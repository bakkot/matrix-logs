2021-08-01
[20:47:37.0468] <bakkot>
Domenic: tracking that specifically at https://github.com/tc39/ecmarkup/issues/116, though it's not my highest priority


2021-08-02

2021-08-03

2021-08-04
[11:52:56.0139] <sideshowbarker>
help with https://github.com/mdn/content/issues/7593 would be much welcome

[11:53:27.0800] <sideshowbarker>
 * help with https://github.com/mdn/content/issues/7592 would be much welcome

[11:54:34.0062] <sideshowbarker>
…even if just a comment added to this issue (short of a patch/PR)

[11:55:30.0002] <jmdyck>
ES doesn't define ServiceWorker.

[11:57:10.0755] <jmdyck>
Though there might be people here who could help anyway.

[11:58:16.0779] <sideshowbarker>
jmdyck: sorry yeah I initially pasted in the wrong URL — the right one is actually https://github.com/mdn/content/issues/7592

[11:59:04.0440] <jmdyck>
Ah! I didn't notice the change.

[11:59:46.0046] <bakkot>
sideshowbarker: commented

[12:00:30.0693] <bakkot>
shu: do you know if there is an existing bug for v8 failing to throw on `new BigInt64Array( new Int32Array(0) )`

[12:00:43.0432] <bakkot>
it does (correctly) when `s/0/1/`

[12:01:01.0982] <bakkot>
I guess I'll just open one and let it get triaged

[12:02:47.0634] <shu>
no idea, the list of TA-related historical issues that're technically non-compliant with ecma262 is large and forboding, and mostly not worth the risk to try to fix

[12:03:18.0307] <shu>
though BigInt64Array is a new type...

[12:05:04.0845] <bakkot>
yeah, this is specifically an error which should happen when converting to (or from) one of the new Big* arrays, not a historical thing

[12:11:22.0143] <shu>
yeah, file it and assign it to me

[12:13:00.0975] <bakkot>
lol I get a 500 when trying to open an issue

[12:13:06.0337] <bakkot>
where do I file bugs in the bugtracker

[12:14:26.0782] <shu>
it... wfm?

[12:14:53.0011] <bakkot>
worked this time: https://bugs.chromium.org/p/v8/issues/detail?id=12052

[12:15:11.0926] <bakkot>
I can't assign to you because I still don't have a Chromium account

[12:30:03.0779] <shu>
wait what is [[ContentType]]

[12:30:19.0158] <shu>
it's just to distinguish bigint or not bigint?

[12:30:28.0809] <bakkot>
yup

[12:31:18.0009] <shu>
hm, would've been clearer to encode that directly by casing on the element type rather than a field named [[ContentType]]

[12:39:56.0799] <bakkot>
possibly even in an AO?

[12:40:00.0165] <bakkot>
PRs welcome :P

[12:47:14.0045] <jmdyck>
origin story: https://github.com/tc39/ecma262/pull/1515#discussion_r305633166


2021-08-05
[16:18:38.0882] <rkirsling>
it appears the Temporal.Duration polyfill and spec are out of alignment on the case `new Temporal.Duration().toString({ fractionalSecondDigits: 2})`

[16:18:42.0913] <rkirsling>
 * it appears the Temporal.Duration polyfill and spec are out of alignment on the case `new Temporal.Duration().toString({ fractionalSecondDigits: 2 })`

[16:21:00.0603] <rkirsling>
 * it appears the Temporal.Duration polyfill and spec are out of alignment on the case `new Temporal.Duration().toString({ fractionalSecondDigits: 2 })` (_where 2 can be anything between 1 and 9_)

[16:37:14.0320] <rkirsling>
(in particular, step 13 of https://tc39.es/proposal-temporal/#sec-temporal-temporaldurationtostring is super unambiguous)

[16:39:24.0834] <ptomato>
that looks like a spec bug. probably we missed that case when adding fractionalSecondDigits. if you file an issue for it, I'll try and include it in the presentation for August TC39 plenary

[16:48:19.0897] <rkirsling>
ah okay


2021-08-06
[17:02:55.0763] <rkirsling>
https://github.com/tc39/proposal-temporal/issues/1697

[11:01:25.0023] <jschoi>
Does anyone know of any way to view the most popular NPM packages that depend on a specific NPM package, other than downloading a Gzemnid dataset? (npmjs.com can sort packages by popularity in its name search, and it can list the dependees of a specific package, but it can’t do both at the same time.)

[11:08:58.0116] <jschoi>
(Use case: Trying to find maximally impactful real-world examples of a library’s usage in the wild.)

[11:09:33.0621] <jschoi>
* (Use case: Trying to find maximally impactful real-world examples of a library’s usage in the wild, while writing a proposal explainer.)

[11:11:48.0316] <jschoi>
Also, I might be confused, but has https://gzemnid.nodejs.org/datasets/ not been updated since 2019?

[13:14:11.0512] <Justin Ridgewell>
Hacker News is linking to a new IETF for UUID formats: https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format

[13:30:50.0686] <ryzokuken>
Looks pretty neat! UUID v6 perhaps? 

[13:31:18.0696] <ryzokuken>
(in the meantime, I still find 99% of UUID usages in the wild being v4)

[13:31:30.0934] <ryzokuken>
* (in the meantime, I still find 95% or more of UUID usages in the wild being v4)

[13:38:23.0588] <ptomato>
is "the integral part of _x_", where _x_ is a mathematical value, valid ecma262-speak?

[13:39:47.0310] <ptomato>
the only instance I can find in the current text is in the prose description of Math.trunc

[13:40:28.0283] <ptomato>
similarly, there are no references to "the fractional part of _x_"

[15:11:50.0544] <jmdyck>
ptomato: I think you'd be better off using floor(x) and (x modulo 1), assuming that the semantics for x<0 are what you want.

[15:13:24.0213] <jmdyck>
If they're *not* what you want, then you might have to define it, rather than just saying "the integral/fractional part". 

[15:19:35.0674] <ptomato>
they are not, which is how I landed on this question

[15:19:51.0777] <ptomato>
I've currently got something like "Let _y_ be the mathematical value whose sign is the sign of _x_ and whose magnitude is _x_ modulo 1"

[15:20:07.0261] <ptomato>
for the fractional part

[15:20:29.0598] <ptomato>
which is a mouthful!

[15:22:36.0854] <jmdyck>
I don't even think it'

[15:22:41.0973] <jmdyck>
 * I don't even think it's what you want.

[15:23:37.0676] <jmdyck>
e.g. -3.1 modulo 1 is 0.9, so you'd be saying that the fractional part of -3.1 is -0.9

[15:25:47.0448] <ptomato>
ah. the magnitude should be abs(_x_) modulo 1, then

[15:49:25.0251] <TabAtkins>
Alternately, "Let y be the mathematical value resulting from x - the integral part of x", or however exactly you spec-ese that.


2021-08-07

2021-08-08
[23:32:33.0510] <bakkot>
shu: you may be interested in https://bugzilla.mozilla.org/show_bug.cgi?id=1724618 in the context of proposal-rm-builtin-subclassing

[23:47:58.0455] <bakkot>
and also https://github.com/chakra-core/ChakraCore/issues/6736, https://github.com/Moddable-OpenSource/moddable/issues/680, and https://github.com/oracle/graaljs/issues/488


2021-08-09
[13:14:22.0162] <bakkot>
yulia: I pushed up a handful of minor editorial tweaks to the TLA PR (see https://github.com/tc39/ecma262/pull/2408/commits; my first one was "adopt 545-style structured headers for new AOs", which you can ignore) - can you take a look over those when you get a chance? I think editors are all happy with it now, otherwise

[13:14:42.0975] <bakkot>
No rush though; I'll keep it rebased


2021-08-10
[00:47:02.0081] <yulia>
sure i will look today

[02:04:25.0078] <ryzokuken>
matrix spaces seem to be getting more stable. should we assign a stable alias to the TC39 space and start publicizing the link?

[03:10:52.0216] <yulia>
bakkot: i read through everything, I think it looks good

[03:11:08.0040] <yulia>
I have one question: is there a guidance I can follow on return values? https://github.com/tc39/ecma262/pull/2408/commits/b3e00d294a4fb150197bad80f236815a3de5608c

[03:25:03.0095] <yulia>
this is also adjusted according to anba's comments https://github.com/tc39/ecma262/pull/2267

[09:25:00.0038] <bakkot>
yulia: on returns, the guidance is basically, 1) if the return value isn't going to be consumed, use `Return.` rather than `Return *undefined*`, and conversely, and 2) don't bother with `Return.` as the final step in an AO (unless it would otherwise be empty).

[09:25:46.0935] <bakkot>
we're not 100% consistent with this right now, but we're close, and I'll fix it up in https://github.com/tc39/ecma262/pull/2429 and https://github.com/tc39/ecma262/pull/2397 once TLA is in

[10:36:39.0539] <shu>
bakkot: thanks, and yes, that is dumb

[12:03:52.0230] <Domenic>
Thoughts on whether web APIs should use JS SyntaxError for parsing problems? (Specific API is https://github.com/WICG/urlpattern/.) I see the ES spec uses it for BigInt and JSON.parse, in addition to actual syntax errors.

[12:57:26.0490] <bakkot>
SyntaxError seems like a reasonable choice to me

[12:58:39.0565] <bakkot>
JS also uses it for RegExp, which seems like the nearest cousin here

[13:08:34.0769] <bakkot>
as a bonus, it makes it marginally less awkward to move it into the JS spec if there is ever reason to do so

[13:13:55.0897] <Domenic>
Sigh

[13:19:38.0215] <bakkot>
I am mostly thinking of that in the context of moving structured clone, which it sounded like you were interested in doing

[13:19:49.0335] <bakkot>
and which will be marginally awkward because of the error type differences

[13:19:54.0991] <bakkot>
only very marginally, though


2021-08-11
[02:01:05.0019] <yulia>
moving structured clone sounds like a great idea

[02:51:26.0999] <littledan>
> <@yulia:mozilla.org> moving structured clone sounds like a great idea

I like this idea too. Others opposed it historically, e.g., Mark has expressed opposition recently. I think it would be a complicated negotiation.

[08:47:25.0421] <Domenic>
I mainly just want to stop being on the hook for updating structured clone with new error types/builtins

[08:47:42.0994] <Domenic>
Like temporal objects are just not going to be structured cloneable I guess because I don't have the time to work on that

[08:47:57.0826] <Domenic>
An alternative would be if structured clone was explicitly remembered as a stage 3 cross-cutting concern criteria

[09:00:16.0747] <ptomato>
Domenic: I don't think you are on the hook for structured clone for Temporal objects? it was identified as a concern and there is a pull request for it: https://github.com/tc39/proposal-temporal/issues/548 / https://github.com/whatwg/html/pull/6284

[09:01:05.0019] <Jack Works>
https://github.com/Jack-Works/proposal-serializer

[09:01:16.0558] <Jack Works>
does anyone interested?

[09:01:44.0782] <Jack Works>
this is my try on the bringing user-extensible structured clone in to the language

[09:03:03.0428] <Domenic>
> <@pchimento:igalia.com> Domenic: I don't think you are on the hook for structured clone for Temporal objects? it was identified as a concern and there is a pull request for it: https://github.com/tc39/proposal-temporal/issues/548 / https://github.com/whatwg/html/pull/6284

Oh wow, somehow I totally missed that! Sorry, that's my bad. I was assuming the unfortunate precedent set by AggregateError/error.cause would carry over for temporal, but you did the right thing.

[09:07:00.0121] <littledan>
we haven't written the PR for Record and Tuple structured clone, but it's definitely on our todo list https://github.com/tc39/proposal-record-tuple/issues/45

[09:08:48.0396] <littledan>
Being friendly to contributors is a great way to encourage more involvement and avoid maintainer burnout

[09:11:35.0459] <littledan>
> <@domenicdenicola:matrix.org> Oh wow, somehow I totally missed that! Sorry, that's my bad. I was assuming the unfortunate precedent set by AggregateError/error.cause would carry over for temporal, but you did the right thing.

I don't think there's any particular precedent here; TC39 delegates have been doing a lot of the HTML integration work for recent proposals.

[09:13:26.0940] <littledan>
We're talking about the process for host integration in TC39 proposals at https://github.com/tc39/Reflector/issues/375 (sorry, delegates/IEs only)

[09:31:15.0605] <bakkot>
> I like this idea too. Others opposed it historically, e.g., Mark has expressed opposition recently. I think it would be a complicated negotiation.

shu suggested we might move the algorithm without exposing it directly in 262, at least initially, so it would _just_ be a matter of making it the 262 editors' responsibility to handle ongoing maintenance for the JS parts of it; my hope was that this would alleviate Mark's concerns

[09:45:11.0005] <shu>
yes, the high order bit is to decouple any normative changes to JS wrt structured clone

[10:20:42.0640] <Domenic>
Aww https://github.com/tc39/notes/blob/master/meetings/2020-06/june-4.md#generic-comparison is sad, I didn't realize the spaceship operator worked so poorly in JavaScript. I really like it as a unifying concept.


2021-08-12
[21:34:38.0215] <ljharb>
yeah that was a bummer :-(

[07:40:20.0312] <Hemanth H.M>
Do we still have a chance to resurface it with array-equality? 

[07:41:49.0170] <littledan>
I think there are lots of chances to resurface the spaceship operator, array comparison, etc. For me, the symbol-based protocol which was disconnected from how < etc work was what I didn't like so much, not the spaceship operator itself.

[07:42:28.0646] <littledan>
anyway yes we agreed on Stage 1 for a proposal for array equality tests

[10:25:11.0060] <bakkot>
oh hey, someone actually using Atomics! https://jlongster.com/future-sql-web

[10:56:01.0732] <shu>
🥲

[10:56:37.0261] <shu>
"The real magic is the Atomics.wait API. It’s a beautiful thing." i don't know if i'd call futexes beautiful personally

[11:55:10.0014] <bakkot>
keep in mind this is the opinion of someone who has just implemented sqlite _on top of_ indexdb

[13:23:53.0734] <bradleymeck>
I'm back! Also I still hate @@species

[13:26:12.0461] <bradleymeck>
did a brute force replace of globals to see what node is leaking and can't think of a clean way to not have @@species leak out a mutable vector when calling some builtins

[13:27:21.0008] <bradleymeck>
so, if anyone knows how to safely act like Array.prototype.concat but not call @@species without subclassing Array or mutating the receiver that would be nice

[13:52:17.0072] <bakkot>
proxy the receiver instead of mutating it :P

