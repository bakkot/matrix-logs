2022-07-04
[15:02:28.0935] <ptomato>
I'd like to do an informal poll! about coercion to integers in the context of Temporal

[15:03:44.0623] <ptomato>
precedent in JS is to convert all sorts of nonsensical values to 0 if an integer is expected:

[15:03:58.0329] <ptomato>
```js
[1, 2, 3].slice(NaN) // => [1, 2, 3]
[1, 2, 3].slice("foo") // => [1, 2, 3]
[1, 2, 3].slice(/regex/) // => [1, 2, 3]
[1, 2, 3].slice(Math) // => [1, 2, 3]
```

[15:04:13.0120] <ptomato>
but not universally:

[15:04:16.0646] <ptomato>
```js
[].length = NaN // RangeError
String.fromCodePoint("foo") // RangeError
```

[15:05:22.0203] <ptomato>
Temporal entry points currently work like the former

[15:06:03.0686] <ptomato>
this leads to several bug-prone situations:

[15:06:38.0057] <ptomato>
```js
new Temporal.Duration("foo") // => zero-length duration 😱
Temporal.PlainDateTime.from("2022-03-20T00:00").add({days: NaN}) // => 2022-03-20T00:00 😱
```

[15:07:08.0271] <ptomato>
therefore we are considering changing this coercion to an integer to be more restrictive

[15:08:30.0099] <ptomato>
I'd like to figure out if people are generally comfortable with this or it is likely to provoke a lot of discussion

[15:11:26.0330] <ptomato>
please react:
🤷 = I don't feel particularly strongly about this
🐛 = I feel strongly that bug-prone situations such as these should be avoided
⚖️ = I feel strongly that consistency with the precedent is most important

[15:12:16.0782] <ptomato>
(for more in-depth information, see https://github.com/tc39/proposal-temporal/issues/2112)


2022-07-05
[18:24:06.0763] <Domenic>
I voted for consistency until I read the thread and saw that you were only considering changing behavior for NaN/things that convert to NaN

[18:24:26.0013] <Domenic>
I think it would be bad to stop `"2"` from being treated as `2`, but I guess that is not what is being proposed here

[18:26:16.0514] <bakkot>
my thoughts are the same as in https://github.com/tc39/proposal-iterator-helpers/issues/169#issuecomment-1025062252

[18:26:36.0451] <bakkot>
though do note that you might want to handle the case of `undefined` explicitly, if you intend for these things to be callable with no arguments


2022-07-07
[20:05:03.0016] <Domenic>
Excited to see progress on iterator helpers

[15:34:57.0922] <sideshowbarker>
https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.

One thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.

[15:44:11.0066] <jschoi>
I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.
For what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.

[15:44:44.0938] <jschoi>
> <@sideshowbarker:mozilla.org> https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.
> 
> One thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.

 * I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.
For what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.

[16:03:03.0759] <sideshowbarker>
jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.

Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.

I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.

[16:03:26.0819] <sideshowbarker>
 * jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.

Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.

I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.

[16:08:23.0208] <jschoi>
@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.
I don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.

[16:08:48.0790] <jschoi>
* @sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.
I don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.

[16:11:00.0087] <sideshowbarker>
I think I’m just gonna leave it up to Josh Chen to try to solve 😋 He’s been doing some great work on the JavaScript docs recently, with in general a much more informed perspective than mine anyway

[16:24:27.0941] <jschoi>
Sounds good. Some prior related discussion I found (sparked by the interpolate syntax of `match`): 
https://matrixlogs.bakkot.com/TC39_General/2021-12-07
https://matrixlogs.bakkot.com/TC39_General/2021-12-08


2022-07-08
[17:04:35.0935] <bakkot>
jschoi: btw you can link to specific lines by clicking on the timestamp (and optionally shift-clicking on another timestamp to link to a range)

[19:54:59.0499] <ljharb>
> <@jschoi:matrix.org> @sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.
> I don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.

i'm confused; `=>` like in an arrow function? how is that an operator? what's the LHS operand in `(a, b) => {}`?

