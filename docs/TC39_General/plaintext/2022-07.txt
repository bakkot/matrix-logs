2022-07-04
[15:02:28.0935] <ptomato>
I'd like to do an informal poll! about coercion to integers in the context of Temporal

[15:03:44.0623] <ptomato>
precedent in JS is to convert all sorts of nonsensical values to 0 if an integer is expected:

[15:03:58.0329] <ptomato>
```js
[1, 2, 3].slice(NaN) // => [1, 2, 3]
[1, 2, 3].slice("foo") // => [1, 2, 3]
[1, 2, 3].slice(/regex/) // => [1, 2, 3]
[1, 2, 3].slice(Math) // => [1, 2, 3]
```

[15:04:13.0120] <ptomato>
but not universally:

[15:04:16.0646] <ptomato>
```js
[].length = NaN // RangeError
String.fromCodePoint("foo") // RangeError
```

[15:05:22.0203] <ptomato>
Temporal entry points currently work like the former

[15:06:03.0686] <ptomato>
this leads to several bug-prone situations:

[15:06:38.0057] <ptomato>
```js
new Temporal.Duration("foo") // => zero-length duration üò±
Temporal.PlainDateTime.from("2022-03-20T00:00").add({days: NaN}) // => 2022-03-20T00:00 üò±
```

[15:07:08.0271] <ptomato>
therefore we are considering changing this coercion to an integer to be more restrictive

[15:08:30.0099] <ptomato>
I'd like to figure out if people are generally comfortable with this or it is likely to provoke a lot of discussion

[15:11:26.0330] <ptomato>
please react:
ü§∑ = I don't feel particularly strongly about this
üêõ = I feel strongly that bug-prone situations such as these should be avoided
‚öñÔ∏è = I feel strongly that consistency with the precedent is most important

[15:12:16.0782] <ptomato>
(for more in-depth information, see https://github.com/tc39/proposal-temporal/issues/2112)


2022-07-05
[18:24:06.0763] <Domenic>
I voted for consistency until I read the thread and saw that you were only considering changing behavior for NaN/things that convert to NaN

[18:24:26.0013] <Domenic>
I think it would be bad to stop `"2"` from being treated as `2`, but I guess that is not what is being proposed here

