2021-11-03
[10:06:19.0791] <devsnek>
what if we added toml to the stdlib

[10:09:22.0318] <bakkot>
i feel like it does not have a good place in JS

[10:09:51.0259] <bakkot>
it's intended as a human-readable config language, which makes sense for server-side apps but not really for any other JS users

[13:40:29.0456] <bakkot>
https://github.com/kaist-plrg/jiset is neat

[13:40:50.0533] <bakkot>
(jmdyck I imagine you might be particularly interested)

[14:12:29.0026] <ljharb>
browser-side users need to configure things too

[14:39:49.0110] <jmdyck>
@bakkot: yeah, it looks like they're doing something similar to my ecmaspeak project

[14:53:34.0445] <jmdyck>
Except, when I look at their code, nothing seems familiar.

[15:15:36.0171] <jmdyck>
 * Except, when I look at their code, not much seems familiar.

[16:40:17.0055] <devsnek>
>  Before installation, please download JDK 8

[16:41:56.0687] <devsnek>
would be cool if one of these spec evaluators can replace engine262 one day

[16:42:45.0718] <devsnek>
it looks like jiset was for some sort of university study

[16:53:07.0973] <shu>
PSA here is the incubator call doodle for pattern matching: https://github.com/tc39/Reflector/issues/407 it wasn't clear if there were interested non-champion delegates. if you are, please sign up for a time *before Nov 9*!


2021-11-04
[17:45:19.0674] <TabAtkins>
okay so if we're champs no need to answer the doodle, or shoudl we do so to kick off time planning?

[19:11:44.0747] <jmdyck>
devsnek: I'm working on it, but progress is slow.

[04:00:11.0920] <nicolo-ribaudo>
Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:
```
let obj = { x: 1 };
let ref = new WeakRef(obj);
await null; // I think we need to wait to allow WeakRefs to be emptied
console.log(ref.deref(), obj.x);
```

which I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.

However, an _hypothetical WeakRef-oblivious execution_ (as defined in "9.10.2 - Liveness") might be `obj === obj`, which observes the identity of `obj` and thus makes it "live" and non-collectable, so `ref.deref()` must return `obj`.

[04:00:27.0444] <nicolo-ribaudo>
 * Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:
```
let obj = { x: 1 };
let ref = new WeakRef(obj);
await null; // I think we need to wait to allow WeakRefs to be emptied
console.log(ref.deref(), obj.x);
```

which I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.

However, an _hypothetical WeakRef-oblivious execution_ (as defined in "9.10.2 - Liveness") might be `obj === obj`, which observes the identity of `obj` and thus makes it "live" and non-collectable, so `ref.deref()` must return `obj`.

[04:02:25.0609] <nicolo-ribaudo>
Maybe my question is "is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my code?"

[04:02:33.0343] <nicolo-ribaudo>
 * Maybe my question is "is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my source code?"

[04:02:39.0246] <nicolo-ribaudo>
 * Maybe my question is "is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my code?"

[04:57:23.0502] <pokute>
It's still weird that I don't have much idea what happened after the latest meeting. I understand that it takes a while to get the complete notes, but I really wish someone made an summary that has a sentence or two for each agenda item soon after a meeting.

[04:57:43.0990] <pokute>
*it still feels weird*

[05:02:34.0726] <nicolo-ribaudo>
pokute Justin Ridgewell has been doing an awesome job reporting the conclusion of each important topic at https://github.com/babel/proposals/issues/77

[05:04:17.0867] <pokute>
> <@nicolo-ribaudo:matrix.org> pokute Justin Ridgewell has been doing an awesome job reporting the conclusion of each important topic at https://github.com/babel/proposals/issues/77

Oh, I didn't know about that. Thank you!

[05:05:02.0813] <nicolo-ribaudo>
Note that it should not be considered an "official source" (only the notes are official), but it's a good approximation

[06:43:08.0544] <devsnek>
> <@nicolo-ribaudo:matrix.org> Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:
> ```
> let obj = { x: 1 };
> let ref = new WeakRef(obj);
> await null; // I think we need to wait to allow WeakRefs to be emptied
> console.log(ref.deref(), obj.x);
> ```
> 
> which I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.
> 
> However, an _hypothetical WeakRef-oblivious execution_ (as defined in "9.10.2 - Liveness") might be `obj === obj`, which observes the identity of `obj` and thus makes it "live" and non-collectable, so `ref.deref()` must return `obj`.

it's saying "if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live"

[06:43:55.0791] <devsnek>
your example is correct afaict, assuming the engine optimized that

[06:44:56.0346] <nicolo-ribaudo>
Ok thanks üëç

[10:36:51.0941] <Mathieu Hofman>
> <@nicolo-ribaudo:matrix.org> Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:
> ```
> let obj = { x: 1 };
> let ref = new WeakRef(obj);
> await null; // I think we need to wait to allow WeakRefs to be emptied
> console.log(ref.deref(), obj.x);
> ```
> 
> which I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.
> 
> However, an _hypothetical WeakRef-oblivious execution_ (as defined in "9.10.2 - Liveness") might be `obj === obj`, which observes the identity of `obj` and thus makes it "live" and non-collectable, so `ref.deref()` must return `obj`.

FYI, the releasing of kept objects is a host defined operation, so it may not happen at a promise job boundary. In particular, AFAIK most engines only clear kept objects when the promise queue is drained.

[10:41:41.0154] <Mathieu Hofman>
> <@devsnek:matrix.org> it's saying "if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live"

Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142
I don't know how @syg came up with it, but it was very clever!

[10:45:14.0450] <Mathieu Hofman>
> <@devsnek:matrix.org> it's saying "if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live"

 * Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142
I don't know how @shu came up with it, but it was very clever!

[10:45:26.0602] <Mathieu Hofman>
 * Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142
I don't know how shu  came up with it, but it was very clever!

[10:46:21.0717] <devsnek>
yeah everything in the spec here is sort of "outer limits" on what engines must do. in practice they are not perfect at removing dead objects and cannot run gc immediately every time the job queue is empty, etc.

[10:49:07.0063] <nicolo-ribaudo>
Thanks everyone!

[11:00:26.0965] <shu>
yeah, the spec only says when it is allowed to empty a WeakRef, so that you can reason about WeakRefs which _must not_ be emptied according to the spec

[11:00:41.0696] <shu>
conversely, an implementation that never empties WeakRefs, or never GCs at all, is always compliant

[11:00:44.0270] <shu>
not that anyone really does that

[11:01:35.0709] <shu>
IOW you cannot write interoperable tests that test for "this WeakRef must be empty now", only "this WeakRef must not be empty now"

[11:04:01.0652] <shu>
you _can_ write tests that test implications, though, like "if this WeakRef is now empty, then these other properties must hold"

[11:04:05.0689] <shu>
test262 have tests of that shape

[11:04:13.0447] <devsnek>
shu now you need to write a turbofan pass that inlines `obj.x`

[11:04:32.0678] <Mathieu Hofman>
> <@shuyuguo:matrix.org> test262 have tests of that shape

They're actually broken, I have on my todo to fix them

[11:04:40.0370] <shu>
oh yeah?

[11:06:10.0402] <Mathieu Hofman>
The hooks and most tests still use `cleanupSome`.

[11:06:17.0825] <shu>
oh lol

[11:06:25.0909] <devsnek>
i miss cleanupSome 

[11:06:31.0161] <Mathieu Hofman>
I rewrote the hooks locally already, I need to fix all the tests

[11:06:43.0336] <shu>
excellent, than kyou

[11:07:33.0201] <devsnek>
is cleanupSome just waiting on the champions at this point

[11:08:40.0421] <Mathieu Hofman>
Would be neat to have a flag to the test262 execution that says "this implementation supports GC and has all host hooks implemented, so these tests must collect as expected"

[11:09:38.0068] <shu>
devsnek: more than that was my understanding; Apple already rejected the wasm use case as compelling enough to add cleanupSome, and i don't know that a more compelling argument has been presented

[11:09:39.0952] <devsnek>
are you saying people provide no-op hooks? :O

[11:10:39.0988] <Mathieu Hofman>
Correct the current gc hooks are not, afaik, provided by the different implementations, so it's relying on a fallback, which is not working right.

[11:11:43.0705] <devsnek>
its weird that apple cares about the aesthetics of cleanupSome but not of Atomics, both being designed to be used in weird non-idiomatic-js cases

[11:11:48.0748] <Mathieu Hofman>
I'm talking about the `clearKeptObjects` and "cleanupFinalizationRegistries" which is not a currently requested hook but should be

[11:13:08.0300] <devsnek>
hmm why don't i implement clearKeptObjects ü§î

[11:13:47.0302] <devsnek>
does $262.clearKeptObjects just call ClearKeptObjects

[11:13:49.0820] <devsnek>
 * does $262.clearKeptObjects just call ClearKeptObjects

[11:13:57.0590] <devsnek>
its not in INTERPRETING.md

[11:15:19.0187] <Mathieu Hofman>
FYI, here is the async-gc harness fixed to not rely on `cleanupSome` and one test fixed: https://github.com/mhofman/test262/commit/a4ae8c8102586a29e06292556bc565776d19b045
Haven't gotten around on fixing the rest

[11:26:09.0532] <Mathieu Hofman>
> <@devsnek:matrix.org> hmm why don't i implement clearKeptObjects ü§î

Yeah I remember engine262 didn't expose the hooks, and the built-in fallbacks didn't work, so I couldn't check it worked there. The fallbacks I wrote cover at least JSC, SM, v8 and XS

[11:26:55.0589] <Mathieu Hofman>
I also found some weird behaviors in engine262 which claimed some things get cleaned up when they shouldn't. That was a separate and much more involved test, and I didn't have time to dig in

[11:27:56.0381] <devsnek>
stuff should be pretty easy to impl in engine262 when you're testing

[11:28:28.0806] <devsnek>
like https://gc.gy/65d126c9-a354-42e7-a63f-2555a9f035c1.png


2021-11-05
[14:38:41.0052] <rickbutton>
anyone doing any work with JS CSTs lately? I‚Äôve been doing a lot of codegen/codemod work lately and the idea of rolling my own sounds like a lot of work 

[15:10:56.0863] <bakkot>
define "doing any work with"

[15:11:32.0903] <bakkot>
I have been in the process of updating our AST (shift), which supports location information and comment although I wouldn't exactly call it a CST

[15:11:57.0042] <bakkot>
what sort of thing are you looking for?

[15:24:58.0564] <rickbutton>
yeah I guess I should clarify I'm not actually looking for a "true" CST from like grammar rules but an AST with additional metadata for comments/semicolons/etc that doesn't fit into a standard estree AST. for context, I've skimmed the various convos on estree/parser repos on this, but the convo seems to have stopped, im wondering if anyone has found a good way to do it

[15:25:01.0269] <rickbutton>
i should look at shift

[15:31:54.0855] <bakkot>
shift just has side tables for comments and location data

[15:32:11.0353] <bakkot>
not really any fancier than you'd get from babel's parser or any other, really

[15:33:00.0438] <bakkot>
the usual approach, or at least my approach, is to slice out input source text using the location data, and inspect that for whatever you're interested in

[15:38:40.0572] <rickbutton>
i see


2021-11-06
[18:53:11.0114] <Justin Ridgewell>
^^ That's how I do it with prettier and eslint

[18:53:29.0542] <Justin Ridgewell>
I've never seen a good CST system yet

[18:55:16.0515] <Justin Ridgewell>
Rome is apparently trying with Red/Green Trees: https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust

[20:51:33.0951] <rickbutton>
oh interesting, thanks for the link

[03:00:01.0101] <vrafaeli>
Can someone help me understand how "browser's built-in API callbacks" work? For example when I define websocket's onmessage, or fetch callback.
Do the set up callbacks go in some JS callback space as closures, where they can be called or what?

[03:36:43.0684] <vrafaeli>
 * Can someone help me understand how "browser's built-in API callbacks" work? For example when I define websocket's onmessage, or fetch callback.
For example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of "then" method invocation.
Do the set up callback closures go in some JS callback space as closures, where they can be called or what?

[03:38:42.0323] <vrafaeli>
 * Can someone help me understand how "browser's built-in API callbacks" work? For example when I define websocket's onmessage, or fetch callback.
For example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of "then" method invocation.
Do the set up callback closures go in some JS closures space with some internal ID, where they get referenced by the task in event loop queue and invoked when its time?

[03:38:45.0487] <vrafaeli>
 * Can someone help me understand how "browser's built-in API callbacks" work? For example when I define websocket's onmessage, or fetch callback.

For example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of "then" method invocation.
Do the set up callback closures go in some JS closures space with some internal ID, where they get referenced by the task in event loop queue and invoked when its time?

[03:58:55.0062] <vrafaeli>
 * Can someone help me understand how "browser's built-in API callbacks" work? For example when I define websocket's onmessage, or fetch callback.

For example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of "then" method invocation.
Does the set up callback closures go in some separate JS-closures-memory-space and gets assigned some reference? This reference is used by the task in the task queue, and when it's its time to run, the task says to the engine to put the referenced closure on the main thread?

[05:56:36.0402] <Ashley Claymore>
I think your understanding is correct. Though there isn‚Äôt necessarily a need for a ‚Äúseparate JS-closures-memory-space‚Äù. Closures can be objects that live on the same JS heap as the other JS objects. And host-integrations can keep references to JS objects that will be compatible with the JS garbage collector.

[06:03:47.0786] <vrafaeli>
> <@aclaymore:matrix.org> I think your understanding is correct. Though there isn‚Äôt necessarily a need for a ‚Äúseparate JS-closures-memory-space‚Äù. Closures can be objects that live on the same JS heap as the other JS objects. And host-integrations can keep references to JS objects that will be compatible with the JS garbage collector.

yea, later i realized this might be more natural

[06:04:22.0081] <vrafaeli>
The only difference is that these objects are not referenced from JS "context" but from outside of the context


2021-11-11
[10:07:26.0658] <jugglinmike>
bakkot: I'd like to recommend some modifications to TR/104. Do you know who I can talk to about that?

[10:41:37.0169] <bakkot>
jugglinmike: I would _guess_ that it's owned by TC39 as a whole, so the way to modify it is probably to present a proposal to the committee in plenary asking for consensus for the modification

[10:42:06.0003] <bakkot>
But I don't actually know for certain; TR/104 hasn't been updated in a while, so I'm not as familiar with what the process ought to be

[10:45:03.0051] <jugglinmike>
Thanks! I think I'll ping the chairs, as well, just to be sure

[12:52:04.0408] <jschoi>
Does anyone have insight into why Generator and AsyncFunction were made separate types from Function? 

[12:53:20.0793] <bakkot>
what does "separate types" mean

[12:54:31.0157] <bakkot>
if you just mean "exist as separate objects", Generator objects need to inherit from the Generator prototype to have `.next`, which should not be on regular functions

[12:55:25.0210] <bakkot>
also, they allow you to dynamically construct a generator or async function from source text, although doing so is ev[ai]l and should be shunned

[13:06:56.0418] <jschoi>
Ah, yeah, right‚Äî`.next`. And yeah, that‚Äôs what I meant.
Was AsyncFunction separated as a separate type from Function just to parallel Generator?

[13:07:13.0089] <jschoi>
> <@bakkot:matrix.org> if you just mean "exist as separate objects", Generator objects need to inherit from the Generator prototype to have `.next`, which should not be on regular functions

 * Ah, yeah, right‚Äî`.next`. And yeah, that‚Äôs what I meant.
Was AsyncFunction separated as a separate type from Function just to parallel Generator?

[13:07:40.0356] <bakkot>
well, there's also the use as a constructor thing

[13:10:49.0867] <jschoi>
Makes sense.


2021-11-13
[16:23:49.0544] <Mathieu Hofman>
Can anyone explain to me what in the spec causes an error to be thrown in strict mode for `'abc'[2] = 'd'` but not for `abc[2]` nor `Object('abc')[2] = 'd'` ?

[16:26:55.0392] <Mathieu Hofman>
String Exotic object `[[DefineOwnProperty]]` (https://tc39.es/ecma262/#sec-string-exotic-objects-defineownproperty-p-desc) doesn't seem to check if the `this` value is a primitive string or object wrapper

[16:27:22.0357] <Mathieu Hofman>
 * Can anyone explain to me what in the spec causes an error to be thrown in strict mode for `'abc'[2] = 'd'` but not for `'abc'[2]` nor `Object('abc')[2] = 'd'` ?

[16:58:04.0637] <Mathieu Hofman>
To answer my own question, in strict mode it never get there, and `OrdinarySetWithOwnDescriptor` (https://tc39.es/ecma262/#sec-ordinarysetwithowndescriptor) Step 2.b. checks if the receiver is an object or not


2021-11-15
[03:30:04.0272] <David Alberto Adler>
Hi guys wondering if there is an existing proposal for the non-null assertion operator?

e.g. 

```
getFoo()! // will throw if undefined or null is returned
```

[03:31:56.0330] <Jack Works>
No proposal for it as I know

[03:34:42.0934] <David Alberto Adler>
interesting, seems like an obvious thing which I would find super useful. I'm writing this code all day long

```
const foo = getFoo()
assert(foo, 'missing foo')
```

