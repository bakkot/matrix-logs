2022-03-01
[16:55:47.0607] <Justin Ridgewell>
danielrosenwasser / rbuckton: The new What's Changed Since RC/Beta in the TS release notes are üëç

[17:47:45.0044] <sirisian>
Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?

[17:55:08.0758] <bakkot>
"intuitive shared state" is a contradiction in terms

[17:55:51.0018] <bakkot>
the thing you're proposing would be incredibly complicated to specify or implement, and we're just now getting to the point where we're fleshing out the building blocks which might let us get there someday

[17:56:03.0616] <bakkot>
or, well, not there precisely, but somewhere like it

[18:19:23.0514] <Jack Works>
> <@sirisian:matrix.org> Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?

we're on the route of that. ü§î
search for those proposals:
- struct (shared struct section)
- module block

[18:41:56.0618] <bakkot>
> <@gibson042:matrix.org> can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes "arguments"?
> ```
> $ eshost -se '[].concat(...["function arguments(){}", "var arguments"].map(occluding => ["()", "(..._)", "(_=0)"].map(params => { const r="return typeof arguments; ", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join("\n")'
> #### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey
> function  // function(){return typeof arguments; function arguments(){}}
> function  // function(..._){return typeof arguments; function arguments(){}}
> function  // function(_=0){return typeof arguments; function arguments(){}}
> object    // function(){return typeof arguments; var arguments}
> object    // function(..._){return typeof arguments; var arguments}
> object    // function(_=0){return typeof arguments; var arguments}
> 
> #### V8
> function  // function(){return typeof arguments; function arguments(){}}
> function  // function(..._){return typeof arguments; function arguments(){}}
> function  // function(_=0){return typeof arguments; function arguments(){}}
> object    // function(){return typeof arguments; var arguments}
> undefined // function(..._){return typeof arguments; var arguments}
> undefined // function(_=0){return typeof arguments; var arguments}
> ```

Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations

[18:42:31.0371] <sirisian>
Well intuitive as in all closed over variables and they automatically behave like SharedArrayBuffer items without the bloat. (And in scope functions can just be called without any module syntax). Creating a variable and using an atomic to increment it or other operation would just "work" without stuff like shared structs or shuffling stuff into TypedArrays like it's some separate API.

