2022-03-01
[16:55:47.0607] <Justin Ridgewell>
danielrosenwasser / rbuckton: The new What's Changed Since RC/Beta in the TS release notes are üëç

[17:47:45.0044] <sirisian>
Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?

[17:55:08.0758] <bakkot>
"intuitive shared state" is a contradiction in terms

[17:55:51.0018] <bakkot>
the thing you're proposing would be incredibly complicated to specify or implement, and we're just now getting to the point where we're fleshing out the building blocks which might let us get there someday

[17:56:03.0616] <bakkot>
or, well, not there precisely, but somewhere like it

[18:19:23.0514] <Jack Works>
> <@sirisian:matrix.org> Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?

we're on the route of that. ü§î
search for those proposals:
- struct (shared struct section)
- module block

[18:41:56.0618] <bakkot>
> <@gibson042:matrix.org> can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes "arguments"?
> ```
> $ eshost -se '[].concat(...["function arguments(){}", "var arguments"].map(occluding => ["()", "(..._)", "(_=0)"].map(params => { const r="return typeof arguments; ", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join("\n")'
> #### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey
> function  // function(){return typeof arguments; function arguments(){}}
> function  // function(..._){return typeof arguments; function arguments(){}}
> function  // function(_=0){return typeof arguments; function arguments(){}}
> object    // function(){return typeof arguments; var arguments}
> object    // function(..._){return typeof arguments; var arguments}
> object    // function(_=0){return typeof arguments; var arguments}
> 
> #### V8
> function  // function(){return typeof arguments; function arguments(){}}
> function  // function(..._){return typeof arguments; function arguments(){}}
> function  // function(_=0){return typeof arguments; function arguments(){}}
> object    // function(){return typeof arguments; var arguments}
> undefined // function(..._){return typeof arguments; var arguments}
> undefined // function(_=0){return typeof arguments; var arguments}
> ```

Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations

[18:42:31.0371] <sirisian>
Well intuitive as in all closed over variables and they automatically behave like SharedArrayBuffer items without the bloat. (And in scope functions can just be called without any module syntax). Creating a variable and using an atomic to increment it or other operation would just "work" without stuff like shared structs or shuffling stuff into TypedArrays like it's some separate API.

[18:45:12.0310] <bakkot>
SABs are the single most "handle with care" part of the entire language, especially when used without atomics; making it so that every single thing in the language behaved like that would be... not an idea I'd endorse, to put it lightly, and I imagine that's a common sentiment among the committee

[18:46:32.0295] <bakkot>
Like, just getting the memory model right for SABs was incredibly complicated, and not without bugs; see e.g. https://github.com/tc39/ecma262/issues/1680 https://github.com/tc39/ecma262/issues/2231 https://github.com/tc39/ecma262/pull/1511

[18:46:52.0305] <bakkot>
and that's the _simple_ case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved

[18:49:43.0636] <bakkot>
(also blocking atomics don't work on the main thread, so the "using an atomic to increment it" thing doesn't really make sense at least not on the main thread)

[18:49:58.0546] <bakkot>
 * (also blocking atomics don't work on the main thread, so the "using an atomic to increment it" thing doesn't really make sense at least not on the main thread)

[18:50:07.0307] <bakkot>
 * (also blocking atomics don't work on the main thread, so the "using an atomic to increment it" thing doesn't really make sense, at least not on the main thread)

[19:04:43.0339] <sirisian>
I meant incrementing in other threads. My general thinking is I'd like for SharedArrayBuffer to be deprecated such that a variable and thread system works more like C++. In this case everything is handled with care implied. Was talking to someone about my type proposal/notes and they commented that you can't just create say an integer in the main thread and increment it in multiple threads (with atomics). In this setup you'd be able to do things like swap two object references atomically or set a variable object atomically. It definitely would be very complex to implement, but for the user they could just call functions to create threads and implement parallelism without any extra sugar (wrapping of objects, functions, variables).

[19:05:06.0557] <ljharb>
also, not everyone on the committee :cough: is convinced that threads are "not incredibly harmful" :-)

[19:08:48.0643] <sirisian>
I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more "spin up 8 threads because I can't use the GPU to compute this" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.

[19:09:37.0328] <bakkot>
As a rule we don't usually introduce features only intended to be used in toy projects, particularly when they have sharp edges

[19:10:12.0960] <bakkot>
and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades

[19:10:44.0440] <Jack Works>
> <@bakkot:matrix.org> and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades

so how u think about the shared structs proposal?

[19:12:01.0716] <bakkot>
Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life

[19:13:14.0651] <bakkot>
it's carefully designed so that the shared memory parts are constrained to the struct and its references, and doesn't get out into the rest of your program, which is the only thing which makes it even conceivably a good idea

[19:13:52.0803] <bakkot>
that is, I agree with the readme:

> Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.

[19:13:56.0733] <Jack Works>
> <@bakkot:matrix.org> Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life

once it is available, it will be used in everyday life by programmers that has c++/rust/java/... background

[19:14:05.0084] <bakkot>
well

[19:14:07.0179] <bakkot>
seems bad

[19:14:11.0859] <Jack Works>
lol

[19:14:15.0817] <bakkot>
if we actually think that's going to happen, it's probably not worth putting in the language

