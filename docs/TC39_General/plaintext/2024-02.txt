2024-02-01
[14:55:10.0151] <snek>
idea that popped into my head a few minutes ago while looking at some debugging tooling that someone made... what if you could attach metadata to stack traces to identify specific function invocations?
for example lets say you have something like an event emitter, you could do something like
```js
class Emitter {
  emit(name, data) {
    System.setStackMetadata(name);
    // ...
  }
}
```
and then in a stack trace, it would be identified as `emit (event name)` instead of just `emit`


[14:58:11.0346] <Chris de Almeida>
/me cries in stalled `error stacks` proposal

[15:04:06.0792] <Ashley Claymore>
> <@devsnek:matrix.org> idea that popped into my head a few minutes ago while looking at some debugging tooling that someone made... what if you could attach metadata to stack traces to identify specific function invocations?
> for example lets say you have something like an event emitter, you could do something like
> ```js
> class Emitter {
>   emit(name, data) {
>     System.setStackMetadata(name);
>     // ...
>   }
> }
> ```
> and then in a stack trace, it would be identified as `emit (event name)` instead of just `emit`
> 

I've wanted that for some stuff too!

[15:04:21.0246] <snek>
error stacks proposal would be nice

[15:04:32.0053] <snek>
ljharb: what was the holdup on that

[15:07:43.0003] <Chris de Almeida>
> <@devsnek:matrix.org> ljharb: what was the holdup on that

I think web platform folks asked for the ocean to be boiled


2024-02-02
[16:29:01.0893] <ljharb>
i wanted to specify just the format, and leave the contents for a follow-on, and i was blocked until i can specify the contents too

[16:50:20.0313] <snek>
> <@ljharb:matrix.org> i wanted to specify just the format, and leave the contents for a follow-on, and i was blocked until i can specify the contents too

the contents as in the stringification?

[16:50:36.0460] <snek>
isn't the point of the proposal to provide structured data so that stringification doesn't need to be relied on ðŸ¤”

[17:08:43.0825] <ljharb>
yes.

[17:09:14.0575] <ljharb>
as in the exact wording of the stack trace. Which i guess would have to be in English despite the spec not specifying prose messaging.

[17:09:56.0215] <ljharb>
it certainly felt unreasonable and demotivating :-) . if folks feel like i could still come back and specify structure only, then Iâ€™d be happy to do that.

[17:15:25.0656] <ljharb>
* it certainly _felt_ unreasonable and demotivating :-) . if folks feel like i could still come back and specify structure only, then Iâ€™d be happy to do that.

[18:04:43.0831] <Jessidhia>
> <@kriskowal:matrix.org> Use of _ Iâ€™ve encountered is not as a black hole (void) but as a readable reference to the last thing bound. 

this reminded me of $_ in Perl

[19:48:58.0692] <Jack Works>
> <@devsnek:matrix.org> idea that popped into my head a few minutes ago while looking at some debugging tooling that someone made... what if you could attach metadata to stack traces to identify specific function invocations?
> for example lets say you have something like an event emitter, you could do something like
> ```js
> class Emitter {
>   emit(name, data) {
>     System.setStackMetadata(name);
>     // ...
>   }
> }
> ```
> and then in a stack trace, it would be identified as `emit (event name)` instead of just `emit`

you may want to know console.createTask

[19:52:33.0045] <snek>
thats cool

[21:11:27.0360] <Kris Kowal>
> <@jessidhia:matrix.org> this reminded me of $_ in Perl

My sincerest apologies.

[22:59:10.0147] <snek>
> <@devsnek:matrix.org> thats cool

seems to be limited to devtools though, doesn't modify the actual stack trace

[04:55:35.0807] <annevk>
> I think web platform folks asked for the ocean to be boiled

Pointer?

[09:58:34.0744] <ljharb>
> <@annevk:matrix.org> > I think web platform folks asked for the ocean to be boiled
> 
> Pointer?

https://github.com/tc39/notes/blob/e338ef708f553b03cf5b74dfb5a585e532991100/meetings/2019-03/mar-28.md?plain=1#L136

[10:09:22.0861] <annevk>
ljharb: that doesn't seem like web platform folks asking for boiling an ocean?

[10:10:44.0070] <ljharb>
i was explicitly asked to specify the exact text content of all stack traces

[10:11:02.0267] <ljharb>
what the proposal already had at that point was 100% specifying the format/structure, without locking down the contents

[10:11:42.0828] <annevk>
Maybe we have a different definition of "web platform folks"

[10:12:42.0475] <littledan>
I guess the two people in that conversation were Mathias Bynens and Till Schneidereit, who were working in JS engines at the time (but neither has that role today, so it's worth checking in with the current people)

[10:14:10.0449] <littledan>
but I would have expected browsers to ask for flexibility in how the stack trace is presented (e.g., to enable async stack traces, as Mathias mentioned)

[10:14:45.0440] <ljharb>
maybe i linked the wrong notes; as i recall it was DD and folks from v8/chrome that had the primary block

[10:15:26.0210] <littledan>
oh I see, he was there

[10:15:35.0859] <ljharb>
but the history isn't quite as important; what i stated that was agreed with was `1) do the legwork to figure out what browsers do in terms of the contents of the stack. 2) explicitly enumerate the similarities and the differences. 3) to attempt to write a spec algorithm that can allow them all and mandate one of them. 4) potentially Create a brand new structure including a preferred output. 5) ask browsers and engines that would need to make changes, what changes they may need to make.`

[10:15:41.0857] <ljharb>
and that list is definitely boiling an ocean

[10:16:08.0783] <ljharb>
whereas if i were able to standardize the structure, the way would be paved for someone more motivated than i to do that list

[10:16:38.0190] <littledan>
what would standardizing the structure mean?

[10:17:38.0677] <Chris de Almeida>
apologies if I mischaracterized or misattributed any positions re: ocean boiling

[10:19:31.0581] <annevk>
To be fair, those five points do make a lot of sense. There is often a desire to replace the old with the new, but as the old has to be maintained forever understanding it fully is essential.

[10:19:46.0179] <annevk>
 * To be fair, those five points do make a lot of sense. There is often a desire to replace the old with the new, but as the old has to be maintained forever, understanding it fully is essential.

[10:22:10.0035] <ljharb>
oh sure

[10:22:29.0015] <ljharb>
i think that's the right path forward overall. i just think the best way to get there is iteratively, and instead i was told "all or nothing"

[10:22:55.0855] <ljharb>
i would vastly prefer to return to the iterative approach and unblock work on those 5 points


2024-02-03
[22:27:40.0677] <Domenic>
If "the iterative approach" means "do one of those steps at a time", then that's good. If "the iterative approach" means "spec something new nobody is doing, possibly with a new API nobody ships currently", then that's bad.

[00:03:08.0983] <ljharb>
the structure i've had in the proposal since 2019 is exactly what everyone's already doing. it does add some new APIs nobody ships as well (whose implementation basically matches what everyone's already doing), but i'm not sure why that would be bad, that's just what almost every proposal is.

[00:03:13.0338] <ljharb>
 * the structure i've had in the proposal since 2019 is exactly what everyone's already doing. it does add some new APIs nobody ships as well (whose implementation basically matches what everyone's already doing), but i'm not sure why that would be bad, that's just what almost every proposal is (adding a new thing).

[00:09:49.0993] <littledan>
Yeah I agree that it would be good to start this project with finding what JS implementations put in their stack traces and comparing them. Just doing that without the subsequent steps would be an interesting and meaningful report, helping any future stack trace API effort

[08:14:58.0975] <snek>
i think all of the error stringification should be removed from this proposal

[08:15:53.0981] <snek>
or at *most*, say that `Error.prototype.stack` and `"string"` are both the result of some implementer defined AO 

