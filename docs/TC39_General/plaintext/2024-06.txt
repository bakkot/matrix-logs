2024-06-01
[17:02:03.0584] <jmdyck>
In general, the parser should, at any point, know the set of terminal symbols (input elements) that could validly occur next, given everything to the left. On the basis of that set, it can tell the lexer which InputElementFoo nonterminal to use as the start symbol for the next input element.

[18:24:05.0343] <sirisian>
Thanks for all that information. That helps clarify things for me.

[04:50:56.0070] <jmdyck>
A different formulation would have the parser, at each point, tell the lexer all the terminal symbols that it's expecting, and ask for one of those. That would eliminate the InputElementFoo nonterminals and the rules about when each is appropriate, and a few other nonterminals like CommonToken. So simpler in some sense. But the current formulation minimizes the information that goes from the parser to the lexer, so simpler in a different sense.


2024-06-05
[15:55:17.0220] <whosy>
I wonder if there's any want for a `Promise.sleep( duration )`. I find myself writing one-liners for this in many a project.
e.g.
`const sleep = durationMs => new Promise( resolve => setTimeout( resolve, durationMs ) );`

[15:58:52.0861] <James M Snell>
> <@whosy:matrix.org> I wonder if there's any want for a `Promise.sleep( duration )`. I find myself writing one-liners for this in many a project.
> e.g.
> `const sleep = durationMs => new Promise( resolve => setTimeout( resolve, durationMs ) );`

There are already solutions for this. scheduler.wait is mostly this. Node.js has timers/promises, etc. Given that timers tend to be implementation specific, it's likely best left as a web platform API 

[16:02:47.0786] <whosy>
Might I ask what `schedular.wait` is?
 
And I really did mean as a simple shorthand for wrapping whatever native implementation of setTimeout is in a promise.

Though I guess that does leave a big question mark about what value is returned (if any). I am very green when it comes to actual implementations and the specification side of the language, by the way.

[16:04:55.0785] <James M Snell>
`scheduler.wait(...)` is defined https://github.com/WICG/scheduling-apis ... there's more to it but it essentially allows you to do `await scheduler.wait(duration)` 

[16:07:38.0109] <whosy>
Ah, I see. I couldn't find any reference to this when I tried a quick search for npm/JavaScript or the proposals listings.

It's an interesting read, and would definitely encompass this use-case.

[16:09:04.0518] <Chris de Almeida>
> <@whosy:matrix.org> I wonder if there's any want for a `Promise.sleep( duration )`. I find myself writing one-liners for this in many a project.
> e.g.
> `const sleep = durationMs => new Promise( resolve => setTimeout( resolve, durationMs ) );`

`setTimeout` is not part of JS

