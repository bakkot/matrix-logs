2024-08-02
[15:51:39.0997] <Andreu Botella>
Hey, I just noticed that the spec text for resizable ArrayBuffers defines a host hook that defaults to *not* resizing the buffer, and the HTML spec was not updated to include an implementation

[15:52:04.0640] <Andreu Botella>
there was a PR to the HTML spec, but that only changed the structured cloning algorithm

[15:52:22.0347] <Andreu Botella>
I assume this is not intentional?


2024-08-03
[19:42:38.0613] <shu>
> <@abotella:igalia.com> Hey, I just noticed that the spec text for resizable ArrayBuffers defines a host hook that defaults to *not* resizing the buffer, and the HTML spec was not updated to include an implementation

you're talking about https://tc39.es/ecma262/#sec-hostresizearraybuffer? that's a hook for the host to override the default behavior that's defined in ecma262

[19:43:08.0316] <shu>
the main practical reason it exists is for wasm to throw when you try to resize wasm memories using values that are not multiples of the wasm page size

[19:43:20.0038] <shu>
unless a host has special resize behavior like that, the default implementation is the right one

[19:44:17.0015] <Andreu Botella>
oh, that's right, I definitely should've checked its caller more closely ðŸ¤¦


2024-08-06
[08:01:36.0983] <Francisco Presencia>
I created a small proposal:
https://github.com/franciscop/import-meta-env

Any thoughts? It's to standardize environment variables into `import.meta.env`, so that different runtimes/environments/etc can put them into a single place (inspired by Vite):

```
const myvar = import.meta.env.MY_VARIABLE;
```

If you think this could be valuable, I'll work then on writing a small polyfill and add some tests for the proposal!

[09:17:32.0901] <bakkot>
Francisco Presencia: that sort of thing doesn't really make sense in a generic JavaScript runtime, because many runtimes (e.g. the web) don't have a concept of "environment variables". that's really more of a server-specific thing, which is outside of the purview of TC39, but you could try wintercg. wintercg actually has a specific place to track `import.meta` properties: https://github.com/wintercg/import-meta-registry

[09:23:47.0767] <Francisco Presencia>
Ah that makes sense, thanks! I thought on the web as e.g. in React it makes sense to have an environment variable _for dev_, but you are right that once it's plain JS for web it doesn't make much sense to expect the e.g. browser to have environment variables! I'll update it for WinterCG, thanks!

[09:26:47.0128] <Francisco Presencia>
 * Ah that makes sense, thanks! I thought on the web as e.g. in React it makes sense to have an environment variable _for dev_, but you are right that once it's plain JS for web it doesn't make much sense to expect the e.g. browser to have environment variables! I'll update it for WinterCG, thanks! Update: [Added the PR to the WinterCG repo](https://github.com/wintercg/import-meta-registry/pull/5)!

[09:26:55.0409] <Francisco Presencia>
 * Ah that makes sense, thanks! I thought on the web as e.g. in React it makes sense to have an environment variable _for dev_, but you are right that once it's plain JS for web it doesn't make much sense to expect the e.g. browser to have environment variables! I'll update it for WinterCG, thanks!
Update: [Added the PR to the WinterCG repo](https://github.com/wintercg/import-meta-registry/pull/5)!


2024-08-07
[18:05:21.0375] <ljharb>
as i commented there, i think import.meta only makes sense for things that are specific to the ES module itâ€™s used in, and env vars are globals

