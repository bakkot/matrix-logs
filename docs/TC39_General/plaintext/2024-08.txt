2024-08-02
[15:51:39.0997] <Andreu Botella>
Hey, I just noticed that the spec text for resizable ArrayBuffers defines a host hook that defaults to *not* resizing the buffer, and the HTML spec was not updated to include an implementation

[15:52:04.0640] <Andreu Botella>
there was a PR to the HTML spec, but that only changed the structured cloning algorithm

[15:52:22.0347] <Andreu Botella>
I assume this is not intentional?


2024-08-03
[19:42:38.0613] <shu>
> <@abotella:igalia.com> Hey, I just noticed that the spec text for resizable ArrayBuffers defines a host hook that defaults to *not* resizing the buffer, and the HTML spec was not updated to include an implementation

you're talking about https://tc39.es/ecma262/#sec-hostresizearraybuffer? that's a hook for the host to override the default behavior that's defined in ecma262

[19:43:08.0316] <shu>
the main practical reason it exists is for wasm to throw when you try to resize wasm memories using values that are not multiples of the wasm page size

[19:43:20.0038] <shu>
unless a host has special resize behavior like that, the default implementation is the right one

[19:44:17.0015] <Andreu Botella>
oh, that's right, I definitely should've checked its caller more closely ü§¶


2024-08-06
[08:01:36.0983] <Francisco Presencia>
I created a small proposal:
https://github.com/franciscop/import-meta-env

Any thoughts? It's to standardize environment variables into `import.meta.env`, so that different runtimes/environments/etc can put them into a single place (inspired by Vite):

```
const myvar = import.meta.env.MY_VARIABLE;
```

If you think this could be valuable, I'll work then on writing a small polyfill and add some tests for the proposal!

[09:17:32.0901] <bakkot>
Francisco Presencia: that sort of thing doesn't really make sense in a generic JavaScript runtime, because many runtimes (e.g. the web) don't have a concept of "environment variables". that's really more of a server-specific thing, which is outside of the purview of TC39, but you could try wintercg. wintercg actually has a specific place to track `import.meta` properties: https://github.com/wintercg/import-meta-registry

[09:23:47.0767] <Francisco Presencia>
Ah that makes sense, thanks! I thought on the web as e.g. in React it makes sense to have an environment variable _for dev_, but you are right that once it's plain JS for web it doesn't make much sense to expect the e.g. browser to have environment variables! I'll update it for WinterCG, thanks!

[09:26:47.0128] <Francisco Presencia>
 * Ah that makes sense, thanks! I thought on the web as e.g. in React it makes sense to have an environment variable _for dev_, but you are right that once it's plain JS for web it doesn't make much sense to expect the e.g. browser to have environment variables! I'll update it for WinterCG, thanks! Update: [Added the PR to the WinterCG repo](https://github.com/wintercg/import-meta-registry/pull/5)!

[09:26:55.0409] <Francisco Presencia>
 * Ah that makes sense, thanks! I thought on the web as e.g. in React it makes sense to have an environment variable _for dev_, but you are right that once it's plain JS for web it doesn't make much sense to expect the e.g. browser to have environment variables! I'll update it for WinterCG, thanks!
Update: [Added the PR to the WinterCG repo](https://github.com/wintercg/import-meta-registry/pull/5)!


2024-08-07
[18:05:21.0375] <ljharb>
as i commented there, i think import.meta only makes sense for things that are specific to the ES module it‚Äôs used in, and env vars are globals

[18:42:53.0643] <Meghan Denny>
have there been proposals in the past for a seedable prng?

[18:54:12.0160] <kriskowal>
> <@meghanbun:matrix.org> have there been proposals in the past for a seedable prng?

I like to think of all such proposals as `new Math`. But, in earnest there is TabAtkins‚Äòs https://github.com/tc39/proposal-seeded-random

[18:59:09.0135] <Meghan Denny>
thanks!

[09:05:02.0479] <nicolo-ribaudo>
For anybody good ad grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189

Or is it invalid syntax because once we enter the MethodDefinition (which we can enter, because `get` is a valid first token for it) we don't backtrack?

[09:16:45.0258] <nicolo-ribaudo>
 * For anybody good at grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189

Or is it invalid syntax because once we enter the MethodDefinition (which we can enter, because `get` is a valid first token for it) we don't backtrack?

[09:16:56.0964] <Michael Ficarra>
the test looks correct to me

[09:17:10.0245] <nicolo-ribaudo>
Ok thanks!

[09:19:28.0522] <Michael Ficarra>
grammar alternatives in 262 are not ordered as they are in PEGs

[09:21:13.0462] <nicolo-ribaudo>
And here there is no ASI right? Because the offending token is `x` and not `async`:
```js
class B {
    get
    async x() {}
}
```

[12:39:35.0399] <Michael Ficarra>
correct, the offending token is `x` and it's not separate by a LineTerminator from `async`, so ASI does not occur and this fails to parse

[13:08:59.0148] <littledan>
> <@michaelficarra:matrix.org> grammar alternatives in 262 are not ordered as they are in PEGs

except for Annex B regexps right?

[13:09:09.0238] <littledan>
or did that change?

[13:10:02.0491] <littledan>
> B.1.2 Regular Expressions Patterns
> The syntax of 22.2.1 is modified and extended as follows. These changes introduce ambiguities that are broken by the ordering of grammar productions and by contextual information. When parsing using the following grammar, each alternative is considered only if previous production alternatives do not match.

[13:10:06.0634] <Michael Ficarra>
possibly, I don't often consider the RegExp grammar

[13:10:26.0451] <Michael Ficarra>
gross

[13:10:34.0943] <littledan>
(I'm not sure if thumbs-up is an appropriate emoji response here)

[13:11:28.0896] <Michael Ficarra>
I'm going to go back to not thinking much about Annex B

[13:22:18.0365] <shu>
B for Best

[13:22:55.0326] <shu>
or maybe B for ‚ú®Ô∏èB‚ú®Ô∏èeautiful

[13:25:33.0712] <bakkot>
https://github.com/tc39/ecma262/pull/2445 should eliminate the ordering, if we ever get it

[13:44:50.0682] <jmdyck>
Note that all of 2445's changes to the grammar are ready for review. I think the only reasons the PR is still in draft is that it needs to generalize the definition of lookahead-constraints somewhat.

[13:44:59.0153] <jmdyck>
 * Note that all of 2445's changes to the grammar are ready for review. I think the only reason the PR is still in draft is that it needs to generalize the definition of lookahead-constraints somewhat.

[13:48:09.0080] <jmdyck>
But there didn't seem to be much interest.


2024-08-09
[00:26:08.0349] <Andreu Botella>
hey, I noticed that according to the spec, this code should throw because it's defined using a generator, and reentering a generator should throw:
```js
const array = [,,];
const iterator = array.entries();
Object.defineProperty(array, "0", {get: () => iterator.next()});
console.log(iterator.next());
```

[00:26:14.0827] <Andreu Botella>
but it seems like none of the major engines do that

[00:26:37.0791] <Andreu Botella>
 * hey, I noticed that according to the spec, this code should throw because array iterators are defined using a generator, and reentering a generator should throw:

```js
const array = [,,];
const iterator = array.entries();
Object.defineProperty(array, "0", {get: () => iterator.next()});
console.log(iterator.next());
```

[03:07:05.0898] <snek>
engine262 throws :)

[05:04:30.0324] <bakkot>
Andreu Botella: https://github.com/tc39/ecma262/issues/3136

[05:04:37.0522] <bakkot>
we haven't gotten around to fixing this but it's a known issue

[05:04:43.0262] <bakkot>
(with the spec, not with engines)


2024-08-12
[07:42:43.0932] <nicolo-ribaudo>
Does anybody remember why we have a `[no LineTerminator here]` restriction in arrow functions, before `=>`? I don't think it's solving any ambiguity

