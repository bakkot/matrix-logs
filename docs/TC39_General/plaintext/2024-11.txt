2024-11-01
[22:02:07.0190] <Sacha Greif>
follow up on this: what if we split this in two questions, one asking about Stage 3+2.7 features, and one asking about Stage 2 features, while limiting both lists to the top 10 items that are relevant to the broadest section of the JS community?

[22:03:58.0418] <Sacha Greif>
I know this is a subjective metric, but otherwise that's probably too many items to ask respondents to scan through

[22:04:43.0672] <Sacha Greif>
the idea behind splitting things between Stage 3/2.7 and 2 is that it offers an opportunity to educate people on what the stages mean as part of the question prompt

[22:07:14.0609] <Sacha Greif>
so, to recap, I see three ways to formulate the question:

1. a somewhat arbitrary list of the top ~15 features among stage 3/2.7/2 that seem the most promising
2. two somewhat arbitrary lists of the "top" ~10 features split by stage
3. just list the current 15 Stage 3 features

[09:18:16.0195] <Chris de Almeida>
Sacha Greif: we would ask that you not cover stage 0, 1, or 2 things at all.  2.7+ is fine

[09:18:53.0140] <Chris de Almeida>
 * Sacha Greif: we would ask that you not cover stage 0, 1, or 2 proposals at all.  2.7+ is fine


2024-11-02
[19:46:37.0380] <Sacha Greif>
is it ok if I pick a subset of "most interesting" features myself, or is that introducing too much bias?

[19:47:04.0490] <littledan>
I think some human judgement is needed. Why don't you suggest a list here for review?

[19:47:04.0644] <Sacha Greif>
(in other words taking out features that seem too niche)

[19:47:21.0737] <Sacha Greif>
ok I'll do that

[19:48:16.0730] <Sacha Greif>
also is there an "official" definition of what Stage 3 and Stage 2.7 mean?

[19:48:28.0755] <Sacha Greif>
or should I maybe not mention Stage 2.7 to keep things simple?

[19:49:14.0845] <littledan>
there's an official definition in https://tc39.es/process-document/ , you can just link to that. I would avoid a detailed definition inline, but you can say early vs advanced features

[19:50:11.0483] <Sacha Greif>
ok I'll keep things generic then


2024-11-03
[17:42:49.0176] <Sacha Greif>
https://github.com/Devographics/surveys/issues/252#issuecomment-2453242524

[17:58:31.0116] <Sacha Greif>
I'll also add descriptions for each item


2024-11-06
[16:44:23.0480] <Sacha Greif>
I had an idea for another question to help get perspective on the JS0/JSSugar thing without asking about it directly

[16:44:42.0746] <Sacha Greif>
I suspect that the answers will skew very much to the right but we'll see!

[05:11:13.0153] <littledan>
Yeah that is an interesting question to ask, though it is a little different. Do you want to specify there whether you mean “shipping in production”?

[07:42:49.0921] <Mathieu Hofman>
There is a lot of nuance here. For example, is writing in TypeScript with types being stripped by the runtime (e.g. node 23) or by a light transform (ts-blank-space) considered directly executing the code that was written? I personally consider such transforms to not really be a build process, at least not one comparable to transforms that change the part of the code meant to be JavaScript (as long as the intent of the author is clear, to avoid ambiguous TypeScript parsing such as https://github.com/microsoft/TypeScript/issues/33639)

[07:52:22.0801] <nicolo-ribaudo>
The difference would probably be "do you use a single command to compile+execute, or do you use two separate commands?"

[08:13:36.0982] <Mathieu Hofman>
So stripping types before/while uploading to a CDN for example qualifies as a build step in that case? What if there was a bundle format that allowed combining multiple ES modules in a single file / HTTP request without changing any of the source code (assuming it was written in JS), would that qualify as a "build" step?

[08:29:06.0389] <bakkot>
that definitely sounds like a build step to me

[08:30:06.0332] <bakkot>
ts-blank-space is also what I would consider to be a build step

[08:30:20.0228] <bakkot>
anything that you do to transform your code before executing it is a build step

[08:31:06.0078] <nicolo-ribaudo>
> <@bakkot:matrix.org> anything that you do to transform your code before executing it is a build step

Do you consider deno/bun to be a build step, as they transform the code before giving it to V8/JSC?

[08:31:26.0312] <bakkot>
no, that is not something you do before executing your code

[08:32:01.0173] <bakkot>
deno transforms the code before executing it in exactly the same sense that v8 transforms the code before executing it

[08:33:57.0275] <nicolo-ribaudo>
Yeah ok that matches my opinion of what is a what is not a build step

[11:46:13.0879] <Ashley Claymore>
> <@bakkot:matrix.org> ts-blank-space is also what I would consider to be a build step

What about `node --import ts-blank-space/register ./path/to/your/file.ts` ?

[11:54:11.0559] <Justin Ridgewell>
If it were shipped as part of node, not a buid step.

[12:17:52.0887] <Chris de Almeida>
> <@sachag:matrix.org> sent an image.

I don't have a great suggestion right now of how this could be worded differently, but you are going to get a mixed bag of responses because people will not know quite what you mean.  For example, because I know what you are getting at here, my answer would be near 0.  But if I read this question without the context that I have have, my answer would be near 100.

[12:19:37.0389] <Chris de Almeida>
> <@sachag:matrix.org> sent an image.

 * I don't have a great suggestion right now of how this could be worded differently, but you are going to get a mixed bag of responses because people will not know quite what you mean.  For example, because I know what you are getting at here, my answer would be near 0.  But if I read this question without the context that I have, my answer would be near 100.

[13:29:54.0656] <shu>
what is the workflow you have that you would consider 0 or 100 depending on context?

[13:42:54.0332] <Jan Olaf Martin>
CommonJS is the grayest area maybe. It technically has to be transformed before being a valid JS script but most people wouldn’t consider that a “build step”.

[13:43:09.0086] <Jan Olaf Martin>
From the JS0 perspective, I’d argue it is one

[13:54:25.0493] <bakkot>
CommonJS is valid JS. (unless you put a top-level `return`, I guess.) it only needs to be transformed if you're running it in a browser, otherwise it's just using host APIs.

[13:54:42.0684] <bakkot>
and yes if you're running it on a browser then you definitely have a build step

