2024-11-01
[22:02:07.0190] <Sacha Greif>
follow up on this: what if we split this in two questions, one asking about Stage 3+2.7 features, and one asking about Stage 2 features, while limiting both lists to the top 10 items that are relevant to the broadest section of the JS community?

[22:03:58.0418] <Sacha Greif>
I know this is a subjective metric, but otherwise that's probably too many items to ask respondents to scan through

[22:04:43.0672] <Sacha Greif>
the idea behind splitting things between Stage 3/2.7 and 2 is that it offers an opportunity to educate people on what the stages mean as part of the question prompt

[22:07:14.0609] <Sacha Greif>
so, to recap, I see three ways to formulate the question:

1. a somewhat arbitrary list of the top ~15 features among stage 3/2.7/2 that seem the most promising
2. two somewhat arbitrary lists of the "top" ~10 features split by stage
3. just list the current 15 Stage 3 features

[09:18:16.0195] <Chris de Almeida>
Sacha Greif: we would ask that you not cover stage 0, 1, or 2 things at all.  2.7+ is fine

[09:18:53.0140] <Chris de Almeida>
 * Sacha Greif: we would ask that you not cover stage 0, 1, or 2 proposals at all.  2.7+ is fine


2024-11-02
[19:46:37.0380] <Sacha Greif>
is it ok if I pick a subset of "most interesting" features myself, or is that introducing too much bias?

[19:47:04.0490] <littledan>
I think some human judgement is needed. Why don't you suggest a list here for review?

[19:47:04.0644] <Sacha Greif>
(in other words taking out features that seem too niche)

[19:47:21.0737] <Sacha Greif>
ok I'll do that

[19:48:16.0730] <Sacha Greif>
also is there an "official" definition of what Stage 3 and Stage 2.7 mean?

[19:48:28.0755] <Sacha Greif>
or should I maybe not mention Stage 2.7 to keep things simple?

[19:49:14.0845] <littledan>
there's an official definition in https://tc39.es/process-document/ , you can just link to that. I would avoid a detailed definition inline, but you can say early vs advanced features

[19:50:11.0483] <Sacha Greif>
ok I'll keep things generic then


2024-11-03
[17:42:49.0176] <Sacha Greif>
https://github.com/Devographics/surveys/issues/252#issuecomment-2453242524

[17:58:31.0116] <Sacha Greif>
I'll also add descriptions for each item


2024-11-06
[16:44:23.0480] <Sacha Greif>
I had an idea for another question to help get perspective on the JS0/JSSugar thing without asking about it directly

[16:44:42.0746] <Sacha Greif>
I suspect that the answers will skew very much to the right but we'll see!

[05:11:13.0153] <littledan>
Yeah that is an interesting question to ask, though it is a little different. Do you want to specify there whether you mean ‚Äúshipping in production‚Äù?

[07:42:49.0921] <Mathieu Hofman>
There is a lot of nuance here. For example, is writing in TypeScript with types being stripped by the runtime (e.g. node 23) or by a light transform (ts-blank-space) considered directly executing the code that was written? I personally consider such transforms to not really be a build process, at least not one comparable to transforms that change the part of the code meant to be JavaScript (as long as the intent of the author is clear, to avoid ambiguous TypeScript parsing such as https://github.com/microsoft/TypeScript/issues/33639)

[07:52:22.0801] <nicolo-ribaudo>
The difference would probably be "do you use a single command to compile+execute, or do you use two separate commands?"

[08:13:36.0982] <Mathieu Hofman>
So stripping types before/while uploading to a CDN for example qualifies as a build step in that case? What if there was a bundle format that allowed combining multiple ES modules in a single file / HTTP request without changing any of the source code (assuming it was written in JS), would that qualify as a "build" step?

[08:29:06.0389] <bakkot>
that definitely sounds like a build step to me

[08:30:06.0332] <bakkot>
ts-blank-space is also what I would consider to be a build step

[08:30:20.0228] <bakkot>
anything that you do to transform your code before executing it is a build step

[08:31:06.0078] <nicolo-ribaudo>
> <@bakkot:matrix.org> anything that you do to transform your code before executing it is a build step

Do you consider deno/bun to be a build step, as they transform the code before giving it to V8/JSC?

[08:31:26.0312] <bakkot>
no, that is not something you do before executing your code

[08:32:01.0173] <bakkot>
deno transforms the code before executing it in exactly the same sense that v8 transforms the code before executing it

[08:33:57.0275] <nicolo-ribaudo>
Yeah ok that matches my opinion of what is a what is not a build step

[11:46:13.0879] <Ashley Claymore>
> <@bakkot:matrix.org> ts-blank-space is also what I would consider to be a build step

What about `node --import ts-blank-space/register ./path/to/your/file.ts` ?

[11:54:11.0559] <Justin Ridgewell>
If it were shipped as part of node, not a buid step.

[12:17:52.0887] <Chris de Almeida>
> <@sachag:matrix.org> sent an image.

I don't have a great suggestion right now of how this could be worded differently, but you are going to get a mixed bag of responses because people will not know quite what you mean.  For example, because I know what you are getting at here, my answer would be near 0.  But if I read this question without the context that I have have, my answer would be near 100.

[12:19:37.0389] <Chris de Almeida>
> <@sachag:matrix.org> sent an image.

 * I don't have a great suggestion right now of how this could be worded differently, but you are going to get a mixed bag of responses because people will not know quite what you mean.  For example, because I know what you are getting at here, my answer would be near 0.  But if I read this question without the context that I have, my answer would be near 100.

[13:29:54.0656] <shu>
what is the workflow you have that you would consider 0 or 100 depending on context?

[13:42:54.0332] <Jan Olaf Martin>
CommonJS is the grayest area maybe. It technically has to be transformed before being a valid JS script but most people wouldn‚Äôt consider that a ‚Äúbuild step‚Äù.

[13:43:09.0086] <Jan Olaf Martin>
From the JS0 perspective, I‚Äôd argue it is one

[13:54:25.0493] <bakkot>
CommonJS is valid JS. (unless you put a top-level `return`, I guess.) it only needs to be transformed if you're running it in a browser, otherwise it's just using host APIs.

[13:54:42.0684] <bakkot>
and yes if you're running it on a browser then you definitely have a build step

[14:03:33.0110] <Chris de Almeida>
> <@shuyuguo:matrix.org> what is the workflow you have that you would consider 0 or 100 depending on context?

as an example, transpilation vs minification

[14:04:17.0555] <shu>
and you consider minification to be not a build step (0), but transpilation to be a build step (100)?

[14:05:19.0273] <bakkot>
minification is also fully a build step, it's just an optional one

[14:17:06.0902] <kriskowal>
Yeah, CommonJS modules are function body. `new Function('require', 'exports', 'module', '__filename', '__dirname', source)` isn‚Äôt really a build step, in my opinion.

[14:17:48.0139] <kriskowal>
Or at least, it‚Äôs a build step iff `new ModuleSource(source)` would qualify as a build step.

[14:20:20.0158] <kriskowal>
Less interesting to me than ‚Äúwhether there‚Äôs a build step‚Äù is whether I can host a webpage in development with `python -m http.server`, change a source file, and expect reloading a web page to be a sufficient workflow.

[14:22:17.0589] <kriskowal>
Also, anything you would do beyond dumping the source in an S3 bucket when running to production, is a build step.

[14:23:58.0532] <kriskowal>
So, e.g., generating an import map and injecting it into `index.html` qualifies as build step in my book, although the sources need not be transformed, which is a step in the direction of not having a build step.

[14:24:33.0284] <shu>
> <@kriskowal:aelf.land> Less interesting to me than ‚Äúwhether there‚Äôs a build step‚Äù is whether I can host a webpage in development with `python -m http.server`, change a source file, and expect reloading a web page to be a sufficient workflow.

fo you consider "vscode invokes toolchain on save" fair game to include in the "change a source file" step?

[14:24:44.0851] <shu>
> <@kriskowal:aelf.land> Less interesting to me than ‚Äúwhether there‚Äôs a build step‚Äù is whether I can host a webpage in development with `python -m http.server`, change a source file, and expect reloading a web page to be a sufficient workflow.

 * would you consider "vscode invokes toolchain on save" fair game to include in the "change a source file" step?

[14:25:29.0058] <kriskowal>
If vscode transforms the source in place, that‚Äôs not a build step in my book. Usually the before and after are behaviorally equivalent in those cases anyway.

[14:25:48.0879] <kriskowal>
I also don‚Äôt mind if you use regular expressions to edit in vim.

[14:25:59.0137] <shu>
what about, like, a watch daemon?

[14:26:07.0495] <kriskowal>
Watch daemon is a build step.

[14:26:14.0289] <shu>
interesting distinction

[14:26:53.0028] <kriskowal>
Well, to be precise, watch daemons are usually used to invoke a build step.

[14:27:08.0232] <kriskowal>
If you‚Äôre using a watch daemon to eslint --fix, that‚Äôs not a build step.

[14:27:33.0384] <kriskowal>
The distinction is whether it‚Äôs source to source or source (edit) to object (build)

[14:27:53.0698] <shu>
what i meant to compare was: if VSCode has an on-save action that invokes the toolchain, vs a watch daemon that invokes the toolchain

[14:28:00.0294] <shu>
are those two things different in your mind?

[14:28:07.0004] <kriskowal>
It‚Äôs also definitely possible to run CommonJS on the web without a build step. I wasted a lot of my life on that.

[14:28:26.0817] <kriskowal>
> <@kriskowal:aelf.land> The distinction is whether it‚Äôs source to source or source (edit) to object (build)

This is the distinctionüëÜ

[14:29:02.0132] <kriskowal>
If the toolchain is editing your sources, that‚Äôs just editing.

[14:30:01.0334] <shu>
but transpilation is always source-to-source

[14:30:08.0434] <bakkot>
> VSCode has an on-save action that invokes the toolchain

there's two relevant kind of on-save actions here. the most common kind is running a formatter or something

[14:30:21.0183] <bakkot>
that is not what I would consider a build step, despite it consuming your source

[14:30:34.0540] <kriskowal>
Now, if the toolchain is editing your importmap in an index.html every time you save, gosh, you‚Äôve definitely wiggled out of the build step criterion, but in a way that makes people really dependent on their choice of editor and configuration complications in a way I don‚Äôt like.

[14:30:35.0727] <bakkot>
the other kind is running typescript or something, where the output file is _not_ overwriting the input file

[14:30:40.0500] <bakkot>
that is a build step

[14:30:46.0573] <shu>
ah i see

[14:30:53.0826] <shu>
that clarifies for me, thanks

[14:49:42.0525] <Ashley Claymore>
Sounds like we need to add typescript support to `python3 -m http.server` üòé

[14:51:10.0013] <kriskowal>
> <@aclaymore:matrix.org> Sounds like we need to add typescript support to `python3 -m http.server` üòé

No, Ashley. It‚Äôs bad enough that _as we speak_, I‚Äôm integrating your `ts-blank-space` in Agoric‚Äôs endo toolchain. üòâ

[14:53:31.0559] <Ashley Claymore>
oh cool! Btw there is an ASI issue I need to fix. Issue on repo. I'll get on it tomorrow

[15:16:00.0733] <Chris de Almeida>
> <@shuyuguo:matrix.org> and you consider minification to be not a build step (0), but transpilation to be a build step (100)?

it's not in my development workflow.  the actions-on-save and hot reload mentioned above is a helpful illustration.  the main point is that the code in my editor is the code that is executed in the browser.  

maybe a better phrasing of the question could be "what proportion of the JS code you write MUST be compiled through a build process to actually run in the browser"

[15:17:31.0593] <Chris de Almeida>
> <@shuyuguo:matrix.org> and you consider minification to be not a build step (0), but transpilation to be a build step (100)?

 * for me it would be 0 no build step needed to run my code and 100 if minification for production, but not dev/test is considered 

it's not in my development workflow.  the actions-on-save and hot reload mentioned above is a helpful illustration.  the main point is that the code in my editor is the code that is executed in the browser.

maybe a better phrasing of the question could be "what proportion of the JS code you write MUST be compiled through a build process to actually run in the browser"

[15:17:37.0670] <shu>
why is that a better phrasing?

[15:18:09.0660] <shu>
personally i'd be interested to know what people do today, regardless of whether they _need_ to

[15:19:24.0471] <Chris de Almeida>
it's better phrasing because my understanding of the intent behind the question is to get a feel for which folks would be impacted by a transpilation requirement

[15:19:35.0661] <shu>
i think that's also what i'm saying

[15:20:39.0009] <Chris de Almeida>
if I answer 100% to that question because minification, that gives the false impression that I would not be impacted by a new transpilation requirement because I'm already minifying

[15:20:56.0465] <shu>
my contention is that you in fact would not be impacted

[15:21:25.0458] <Chris de Almeida>
because I simply would not use JSSugar features?

[15:21:42.0456] <shu>
no, because you're already using a build step, you can add another tool in there

[15:21:58.0008] <Chris de Almeida>
no...

[15:22:02.0169] <shu>
maybe it's unfair to say you're not impacted, but it's a different kind of impact than people who don't have a build step at all?

[15:22:22.0535] <Chris de Almeida>
I don't have a build step in the dev/test cycle.  the build step is in release

[15:23:07.0399] <shu>
so your issue with the question is clarifying whether it means dev/test cycle or release?

[15:25:15.0833] <Chris de Almeida>
my issue with the question is clarifying whether it means the code must be transformed to run correctly in the destination environment

[15:25:56.0736] <bakkot>
if you in fact always run it through a transform before executing it, I don't think it much matters whether you actually _need_ to do that

[15:26:26.0179] <Chris de Almeida>
that's a big if

[15:26:43.0173] <Chris de Almeida>
and I agree, if you were already doing that

[15:27:07.0996] <bakkot>
well, right. but it means that the important question is "do you always run your JS through a build step before executing it in a browser", not "what proportion MUST you run through a build step"

[15:27:52.0268] <shu>
yes, i agree with that

[15:28:41.0543] <shu>
if the code must be transformed to run correctly, that requires you to run a build step. but if you run a build step for some other reason, you still run a build step already

[15:28:55.0620] <Chris de Almeida>
> do you always run your JS through a build step before executing it in a browser

that seems like an oversimplification. you wouldn't mind the loss of data points here for people who do not 100% of the time run their JS through some sort of build step before executing it in the browser?

[15:29:07.0309] <Chris de Almeida>
because I would simply say no to that question

[15:29:33.0187] <shu>
because you'd interpret it to mean "i do it for release, but not for test/dev, therefore, i don't always run it"?

[15:30:37.0889] <shu>
it'd be nice to get a super nuanced answer like when people do it for what workflows

[15:30:43.0781] <shu>
but i don't think state of js is set up for that

[15:30:49.0386] <bakkot>
if we were going for the most detail I'd ask about dev vs prod, but if we're just doing a binary then, correct, I would classify the people who sometimes don't run their JS through a build step in dev the same as the people who never run their JS through a build step

[15:31:11.0937] <Chris de Almeida>
> <@shuyuguo:matrix.org> because you'd interpret it to mean "i do it for release, but not for test/dev, therefore, i don't always run it"?

yes, but also it doesn't allow for the reality that people work on different projects with different pipelines and workstreams

[15:31:20.0786] <shu>
well look

[15:31:36.0542] <bakkot>
because the "sometimes I do not do a build step" people are still affected by the proposal, in a different way that the "I always do a build step" people are not affected by the proposal

[15:31:57.0252] <shu>
we're arguing how to get the best signal from a survey, and in general it's very hard to get good signal from surveys

[15:32:05.0911] <Chris de Almeida>
I mean... or just ask two questions?

[15:32:17.0144] <shu>
which two questions?

[15:32:28.0646] <Chris de Almeida>
> <@shuyuguo:matrix.org> we're arguing how to get the best signal from a survey, and in general it's very hard to get good signal from surveys

sure.  but this makes it more important to disambiguate the question

[15:32:45.0760] <shu>
how do you get data on the multidimensional different projects, different workflows, etc, if you also disagree on the dev/prod distinction

[15:32:52.0011] <shu>
which i agree a dev/prod distinction would be good

[15:33:42.0621] <Chris de Almeida>
> <@shuyuguo:matrix.org> how do you get data on the multidimensional different projects, different workflows, etc, if you also disagree on the dev/prod distinction

well, for one, offering a range of options is more helpful than a binary choice

[15:33:59.0053] <shu>
also like, i feel like you are setting this up so the data is best set up to confirm your priors?

