2023-09-01
[03:05:15.0300] <annevk>
Apparently CLDR is not stable enough for the web: https://github.com/web-platform-tests/wpt/pull/41760. This needs some attention from Intl folks I think. littledan can you help me out finding the relevant people?

[03:33:36.0266] <littledan>
> <@annevk:matrix.org> Apparently CLDR is not stable enough for the web: https://github.com/web-platform-tests/wpt/pull/41760. This needs some attention from Intl folks I think. littledan can you help me out finding the relevant people?

Yeah this is sort of a long known, and to some extent it even provides back pressure on cldr to not change too much (which is extremely unfortunate)

[03:38:39.0571] <littledan>
Responded on the issue, thanks for pinging me here


2023-09-04
[09:42:46.0930] <snek>
in the new pattern matching, you have to specify `let` for every binding you want?


2023-09-05
[18:17:22.0268] <jschoi>
I remember there being a W3C document giving style guidelines for DOM API design saying, e.g., ‚ÄúAbbreviations like HTML should be capitalized in functions‚Äô and classes‚Äô names.‚Äù Does this sound familiar to anyone?

[18:25:50.0994] <snek>
this? https://www.w3.org/TR/design-principles/#casing-rules

[18:31:45.0814] <jschoi>
snek: Perfect, this is exactly it; thank you.

[19:27:32.0409] <ljharb>
> <@devsnek:matrix.org> in the new pattern matching, you have to specify `let` for every binding you want?

yes, that's the idea. instead of bindings being the default, and identifiers needing a marker, it's the reverse.

[19:28:05.0479] <snek>
that seems backward from practical usage in every language with pattern matching that i've used lol

[19:28:55.0806] <snek>
though it is hard to compare to languages with nominal typing

[02:18:59.0607] <Jack Works>
> <@devsnek:matrix.org> in the new pattern matching, you have to specify `let` for every binding you want?

yes, because we find it's hard to read if we create bindings by default 


2023-09-06
[14:06:27.0278] <TabAtkins>
Ultimately the issue is we have two things that want to use the "plain ident" space - binding patterns, and variable patterns. After a bunch of discussion, we decided that letting variables take that space resulted in a better syntax, more naturally flowing from how literal patterns worked. This also meant we didn't have to predecide what kind of binding you produced (var/let/const).


2023-09-07
[18:47:03.0721] <tewuzij>
What is plain ident?

[21:45:02.0006] <ljharb>
like `foo` - an identifier that could refer to a variable


2023-09-21
[10:47:50.0937] <Ben Lesh>
Has there ever been discussion of adding _very common_ functions to the standard. In particular `noop` and `identity`? Is a palatable to propose adding something like `Function.noop` and `Function.identity` to the standard, so people stop creating `() => {}` and `x => x` over and over in their libraries and codebases?

[10:49:35.0890] <ljharb>
yes

[10:49:55.0975] <ljharb>
i tried doing that early in my tc39 time, and before i even got to proposal stage nobody found it valuable. engines seem pretty good at optimizing `() => {}`

[10:51:05.0641] <Ben Lesh>
Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :) 

[10:52:05.0323] <ljharb>
unrelated to pipe, that was rejected on its own merits, let me find the link

[10:52:14.0994] <ljharb>
https://github.com/tc39/proposal-function-pipe-flow

[10:52:27.0008] <ljharb>
ah, i guess not unrelated to pipe

[10:54:07.0226] <ljharb>
 * ah, i guess not entirely unrelated to pipe

[10:58:52.0824] <Ben Lesh>
Yeah, that's pretty much exactly what I'm proposing. Haha. Disappointing but not at all surprising. üòÖ

[11:00:07.0783] <Ben Lesh>
Have there been any updates to the `::` bind proposal? That's been dead-ish since about 2015, I think.

[11:01:26.0789] <Ben Lesh>
https://github.com/tc39/proposal-bind-operator .. seems still dead.

[11:04:04.0943] <Ashley Claymore>
> <@benlesh:matrix.org> Has there ever been discussion of adding _very common_ functions to the standard. In particular `noop` and `identity`? Is a palatable to propose adding something like `Function.noop` and `Function.identity` to the standard, so people stop creating `() => {}` and `x => x` over and over in their libraries and codebases?

We already have noop, it's just got a weird name `Function.prototype` ü´£

[11:06:20.0653] <bakkot>
> <@benlesh:matrix.org> Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :)

I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows over reading a call to `pipe`

[11:06:35.0028] <bakkot>
> <@benlesh:matrix.org> Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :)

 * I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows or chained calls over reading a call to `pipe`

[11:06:40.0363] <Ben Lesh>
Haha. Yeah, I used to do that trick, but i got tired of explaining it to people. Also passing it around is like `noop.lol = 'wee'` and everyone has `fn.lol` from then on.  Or `delete noop.call` 

[11:12:26.0761] <Ben Lesh>
Well, the current `|>` proposal makes me sad. I really don't like it at all... which historically means it will do well in the TC39.  In fact, if you all want me to be a fortune teller, you could just point me at a proposal, and if I don't like it, it's probably going to Stage 2 minimum. If I do like it, it'll be stuck in Stage 1 forever. üòÖ

[11:19:39.0483] <Ashley Claymore>
I have a proposal idea. If your fortune telling rates are resonance I'll DM you üòé

[11:19:54.0046] <Ashley Claymore>
* I have a proposal idea. If your fortune telling rates are reasonable  I'll DM you üòé

[11:20:21.0162] <ljharb>
> <@benlesh:matrix.org> Have there been any updates to the `::` bind proposal? That's been dead-ish since about 2015, I think.

yes! https://github.com/tc39/proposal-call-this

[11:22:33.0036] <Ben Lesh>
> <@ljharb:matrix.org> yes! https://github.com/tc39/proposal-call-this

I like it! Therefor it's dead at the next discussion. Sorry.

[11:23:06.0071] <ljharb>
lol

[11:23:15.0800] <ljharb>
there's a variant of it that tab has suggested as well

[11:23:46.0861] <ljharb>
fwiw i made it pretty clear at pipeline advancing to stage 2 that a requirement for going to stage 3 was something like call-this or `::` being on a likely path to advancement, if that helps

[11:29:50.0622] <Ben Lesh>
> <@ljharb:matrix.org> fwiw i made it pretty clear at pipeline advancing to stage 2 that a requirement for going to stage 3 was something like call-this or `::` being on a likely path to advancement, if that helps

I care more that I get something I can prepare for reasonably, and something that doesn't make code that is hitting libraries I'm responsible for _more_ verbose (and arguably less readable).  So what happens with `|>` at this point, I guess I don't care because I have very little use for that in anything I'm working on at the moment. `~>` or the like, on the other hand ARE interesting to me, and it's plausible that RxJS and other libraries could pivot that way.

