2024-05-08
[22:41:29.0925] <snek>
do threads show up in the matrix logs?

[22:42:05.0018] <snek>
hmm are they just merged into the parent channel

[00:22:44.0652] <bakkot>
yeah I have been meaning to update the logbot but haven't gotten around to it

[00:22:52.0702] <bakkot>
PRs welcome https://github.com/bakkot/matrix-archive-bot


2024-05-09
[19:24:53.0729] <sirisian>
I noticed that in the spec that ExtendedPatternCharacter has the list of emu-t outside of the emu-gmod by mistake. Which project would I report such a typo to?

[19:44:02.0680] <jmdyck>
That's not a typo per se, but rather (the result of) what appears to be a bug in the program that converts the spec's source file into nice HTML. (In the source file, the corresponding production doesn't have that problem.) You could raise an issue in https://github.com/tc39/ecmarkup

[19:45:46.0527] <jmdyck>
Or actually, I wonder if that part of the conversion happens in grammarkdown. @bakkot would know.


2024-05-14
[16:15:19.0298] <sachag>
hi all! I just wanted to say that the State of HTML 2023 survey results are now available: https://2023.stateofhtml.com/


2024-05-15
[17:36:26.0840] <sachag>
also just in passing: I'm always open to feedback/suggestions/etc. so if you want to be involved in the design process for the 2024 edition of this survey (or any other one) definitely do let me know!


2024-05-30
[08:35:08.0179] <Timo Tijhof>
I noticed an interoperability issue between Firefox and Chrome when it comes to Array sort(), in particular, the presence of an undefined/NaN can not only affect the positin of the NaN but the order of all other items which seems problematic?

Minimal example at https://phabricator.wikimedia.org/P63711

[08:35:25.0164] <Timo Tijhof>
 * I noticed an interoperability issue between Firefox and Chrome when it comes to Array sort(), in particular, the presence of an undefined/NaN can not only affect the position of the NaN but the order of all other items which seems problematic?

Minimal example at https://phabricator.wikimedia.org/P63711

[08:36:04.0929] <Timo Tijhof>
Firefox: `0, 1, undefined, -10, -9`
Chrome: `-10, -9, 0, 1, undefined`

[08:49:16.0940] <eemeli>
Timo Tijhof: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#sorting_with_non-well-formed_comparator

[08:52:22.0023] <Timo Tijhof>
eemeli: Is there no apetite for tightening the spec around this? I get the argument for purity and stability, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.



[08:52:34.0441] <Timo Tijhof>
 * eemeli: Is there no apetite for tightening the spec around this? I get the argument for mathematical purity, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.

[09:00:14.0340] <bakkot>
It's not the behavior around NaN, it's the behavior around inconsistent comparators

[09:00:32.0287] <eemeli>
My guess would be that it would be difficult to define the sorting behaviour more strictly without introducing performance penalties for some implementations.

[09:01:47.0461] <bakkot>
there might someday be appetite to fully specify behavior even in the presence of inconsistent comparators, but that would require a particular sorting algorithm (or at least more specific than currently), which would prevent implementations with experimenting with alternative sorting algorithms, which is a very nice thing for them to be able to do

