2024-09-03
[01:31:57.0087] <Michael Ficarra>
A Coq Mechanization of JavaScript Regular Expression Semantics: https://dl.acm.org/doi/10.1145/3674666

[06:58:48.0287] <jmdyck>
In 6.1, they acknowledge the distinction between main-body and annex B regexes, but don't explicitly say which they're mechanizing (as far as I could see). I'm pretty sure it's just main-body.

[13:10:29.0623] <nicolo-ribaudo>
Do the two modes have different _features_, or just different parsing rules?

[13:10:41.0004] <nicolo-ribaudo>
> These grammars do not agree on all inputs:
for instance, the standard grammar rejects ], whereas the legacy grammar allows it and treats it as
a valid regex matching the character ‘]’. Given this, we left parsing out of our mechanization.

[13:42:02.0343] <jmdyck>
It's mostly syntax, but it isn't *just* syntax, some of the pseudocode is different too, so it makes a difference (to the resulting mechanization) which you pick.

[13:43:15.0364] <Richard Gibson>
> <@nicolo-ribaudo:matrix.org> Do the two modes have different _features_, or just different parsing rules?

just different parsing rules AFAICT, but the interpretation of various `\c…` in various possible locations gets _really_ intricate

[13:44:02.0848] <jmdyck>
For research purposes, it makes sense for them to stick to the main-body, but I think it's at least worth saying so.

