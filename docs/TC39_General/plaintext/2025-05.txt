2025-05-01
[11:57:26.0768] <jschoi>
I’m working on [#3581](https://github.com/tc39/ecma262/pull/3581) (Array.fromAsync).
 I’m figuring out the last two esmeta errors in [this job](https://github.com/tc39/ecma262/actions/runs/14781083646/job/41499977134?pr=3581). 

It looks like Array.from’s iteration machinery has changed a lot since I last checked. Now Array.from uses a new IteratorStepValue operation. 

There’s no analogous AsyncIteratorStepValue operation yet, is there?

[12:03:49.0924] <bakkot>
Correct

[12:03:55.0128] <jschoi>
Would it be worth for the Array.fromAsync pull request to define new AsyncIteratorStepValue, AsyncIteratorStep, and AsyncIteratorNext operations?

[12:04:07.0239] <bakkot>
No, probably not until there's more stuff which uses it

[12:04:09.0220] <jschoi>
* Would it be worth for the Array.fromAsync pull request to define new AsyncIteratorStepValue, AsyncIteratorStep, and AsyncIteratorNext operations, to match Array.from’s algorithm?

[12:05:53.0805] <bakkot>
You can use the underlying operations, though

[12:06:32.0107] <bakkot>
IteratorNext works fine on async iterators I think

[12:06:57.0067] <bakkot>
and then after awaiting the result you can use IteratorComplete and IteratorValue

[12:08:23.0861] <bakkot>
which I guess is pretty much what you're doing already, except manually calling .next instead of using IteratorNext, which is fine

[12:08:47.0583] <bakkot>
don't worry too much about esmeta errors; if they don't look like actual errors you can ignore them

[12:09:24.0650] <bakkot>
it isn't capable of handling everything in the spec and there's a file we can use to mark things as expected errors if we decide it's an esmeta bug

[12:10:28.0991] <bakkot>
in this specific case, yes, it looks like it's because of not recognizing the new IfAbruptCloseAsyncIterator macro, which makes sense; macros are hard to typecheck and we don't have any explicit marking for them

[12:29:07.0148] <jschoi>
Thank you very much for your great help.

