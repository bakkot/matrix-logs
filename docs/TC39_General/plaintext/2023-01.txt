2023-01-02
[18:26:55.0326] <Mathieu Hofman>
> <@ljharb:matrix.org> Promise has the brand checks but no non-side-effect way to check it; and error sadly has no way to do the brand check, yes. Yet.

We did discuss this on matrix a [few months ago](https://matrixlogs.bakkot.com/TC39_General/2022-05-11#L9). The inability to brand check a promise without side effects (in particular triggering proxy traps) is a major pain for us, and I would very much would like to find a way to make this possible. But a lot of people expressed concerns with revealing such a power, mostly about users doing conditional work based on the result type (promise or not, aka releasing Zalgo)

[18:34:42.0565] <Kris Kowal>
Yes, and my recommendation is that our stance should be to enable and help people to avoid releasing Zalgo, not prevent people from releasing Zalgo. The latter is not possible. The former is possible while still revealing a brand check. It’s not the same magnitude of hazard as, say, an API to synchronously query the state of a promise.

[20:31:57.0810] <bakkot>
Since we're talking about this stuff, reminder that https://github.com/tc39/proposal-faster-promise-adoption exists

[08:13:44.0011] <voide>
Hello everyone. I've been trying to understand https://tc39.es/ecma262/#sec-functiondeclarationinstantiation.

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

[08:14:19.0416] <voide>
 * Hello everyone. I've been trying to understand https://tc39.es/ecma262/#sec-functiondeclarationinstantiation.

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

[08:19:34.0557] <voide>
 * Hello everyone. I've been trying to understand https://tc39.es/ecma262/#sec-functiondeclarationinstantiation.

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

I'm excluding the VE because there's only 1 reference (20d) and it looks only related to either a strict function or a function with Parameter Expressions.

[08:20:08.0106] <voide>
 * Hello everyone. I've been trying to understand https://tc39.es/ecma262/#sec-functiondeclarationinstantiation.

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

I'm excluding the VE because there's only 1 reference (20d) and it looks only related to either a strict function or a function with Parameter Expressions, but this function has no parameters at all.

[08:31:00.0977] <voide>
 * Hello everyone. I've been trying to understand [https://tc39.es/ecma262/#sec-functiondeclarationinstantiation]().

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

I'm excluding the VE because there's only 1 reference (20d) and it looks only related to either a strict function or a function with Parameter Expressions, but this function has no parameters at all.

This is closely related to [a StackOverflow question](https://stackoverflow.com/questions/70279115/does-lexicalenvironment-s-outerenv-refer-to-the-variableenvironmentof-same) which unfortunately didn't get the answer needed.

[08:34:34.0704] <voide>
 * Hello everyone. I've been trying to understand [https://tc39.es/ecma262/#sec-functiondeclarationinstantiation](https://app.element.io/).

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

I'm excluding the VE because there's only 1 reference (20d) and it looks only related to either a strict function or a function with Parameter Expressions, but this function has no parameters at all.

This is closely related to [a StackOverflow question](https://stackoverflow.com/questions/70279115/does-lexicalenvironment-s-outerenv-refer-to-the-variableenvironmentof-same) ([this comment](https://stackoverflow.com/questions/70279115/does-lexicalenvironment-s-outerenv-refer-to-the-variableenvironmentof-same#comment124269800_70297307) in particular) which unfortunately didn't get the answer needed.

[08:54:34.0937] <voide>
 * Hello everyone. I've been trying to understand [https://tc39.es/ecma262/#sec-functiondeclarationinstantiation](https://app.element.io/) as applied to functions without parameters.

Say I have the function:

```JavaScript
function f() {
      const x = 2;
      let y = 3;
      var z = 4;
  }
```

Is a single Lexical Environment created for x,y,z or is z stored on the first LE and x,y on another one with Outer Environment set to the first LE...or something else I didn't think of?

I'm excluding the VE because there's only 1 reference (20d) and it looks only related to either a strict function or a function with Parameter Expressions, but this function has no parameters at all.

This is closely related to [a StackOverflow question](https://stackoverflow.com/questions/70279115/does-lexicalenvironment-s-outerenv-refer-to-the-variableenvironmentof-same) ([this comment](https://stackoverflow.com/questions/70279115/does-lexicalenvironment-s-outerenv-refer-to-the-variableenvironmentof-same#comment124269800_70297307) in particular) which unfortunately didn't get the answer needed.

[09:10:32.0616] <bakkot>
voide: it depends on whether the function is in a strict context or not. in a non-strict context, "z stored on the first LE and x,y on another one with Outer Environment set to the first LE" is accurate - see step 30/31. 

[10:57:28.0733] <voide>
Thanks for confirming. Does this mean that:

> Set the LexicalEnvironment of calleeContext \[...\] (step 32)

refers to a new LE, _not_ the first one? I feel like this is the missing puzzle piece for me.

[10:58:00.0224] <voide>
 * Thanks for confirming. Does this mean that:

> Set the LexicalEnvironment of calleeContext \[...\] (step 32)

refers to a new LE, _not_ the first one? I feel like this is the missing puzzle piece for me.

[11:01:08.0497] <voide>
I suppose it's the _the_ article that throws me off.

[11:01:31.0109] <voide>
 * I suppose it's the _the_ article that throws me off.

[11:01:41.0616] <jmdyck>
Not sure if this'll help but: in spec terms, there isn't a thing that *is* a Lexical Environment. Rather, `LexicalEnvironment` is simply the name of a component of an execution context.

[11:02:47.0975] <jmdyck>
So the `Set` step is setting a component of `calleeContext`. It's like `calleeContext` is a Record, and `LexicalEnvironment` is simply the name of one of its fields.

[11:04:59.0243] <voide>
Yes, this is something I understand now and I know we're talking about abstractions. Thing is, by the time that step is being executed there's already a Lexical Environment with a **var** declaration and that part confuses me a little.

[11:05:00.0128] <jmdyck>
The value of that component/field is an Environment Record.

[11:06:19.0739] <voide>
This:

> So the Set step is setting a component of calleeContext

Is language that is clear to me because you said it's _a_ component instead of _the_ component.

[11:06:25.0552] <voide>
 * This:

> So the Set step is setting a component of calleeContext

Is language that is clear to me because you said it's _a_ component instead of _the_ component.

[11:07:28.0209] <jmdyck>
If I had a record `_foo_` with a field `[[Bar]]`, I could say `Set the [[Bar]] field of _foo_ to 0.`

[11:08:33.0109] <jmdyck>
It wouldn't be correct to say `Set a [[Bar]] field of _foo_ to 0.`

[11:11:13.0461] <bakkot>
voide: you might find it useful to look at https://github.com/engine262/engine262/blob/3248ccc6793a4de3ca6cab1d3a16a113ddc8d0c9/src/runtime-semantics/FunctionDeclarationInstantiation.mjs#L237, which is a JS implementation of this algorithm

[11:12:14.0579] <voide>
> <@jmdyck:matrix.org> If I had a record `_foo_` with a field `[[Bar]]`, I could say `Set the [[Bar]] field of _foo_ to 0.`

Yes, I understand what you say.

[11:12:32.0715] <voide>
> <@bakkot:matrix.org> voide: you might find it useful to look at https://github.com/engine262/engine262/blob/3248ccc6793a4de3ca6cab1d3a16a113ddc8d0c9/src/runtime-semantics/FunctionDeclarationInstantiation.mjs#L237, which is a JS implementation of this algorithm

This is appreciated, I will take a look at it.


2023-01-03
[23:53:40.0771] <annevk>
yulia | sick: littledan: I could make the Module Loading call tonight if that's helpful, please lmk

[06:48:24.0470] <littledan>
A lot of people seem to be out today; I think we should try to convene in two weeks for the module call

[08:02:33.0426] <Mathieu Hofman>
> <@bakkot:matrix.org> Since we're talking about this stuff, reminder that https://github.com/tc39/proposal-faster-promise-adoption exists

Yes I need to get back to that proposal. I have on my list of tasks to rewrite a user land promise implementation that side-steps some other issues we've found with promises (e.g. memory leaks), and has the ability to get insight into the adoption of unresolved promises. I'm hoping that could help me find ways to rewrite the promise steps in a way that is both mostly compatible with existing behavior, but also enshrines some beneficial behavior that is currently left out by most implementations, such as detection of cycles longer than 2 promises, or these extra ticks incurred by adoption.

[13:10:17.0300] <Justin Ridgewell>
I think we could pretty easily expose the is-not-a-proxy-and-doesn't-have-an-own-`.then` with that proposal (but we'd be getting further away from  faster promise adoption core)

[13:10:36.0800] <Justin Ridgewell>
At least, we could refactor the check in a way that it can be exposed later.


2023-01-09
[10:12:46.0639] <yulia>
does anyone have a proposal that they want HCI research done on?

[11:42:56.0111] <ptomato>
heads up that test262's [async helpers RFC](https://github.com/tc39/test262/pull/3724) has moved to final comment period until 2023-01-19. this is the first RFC according to our new RFC process so additionally if you have comments on the process they are welcome on the [draft process document](https://github.com/tc39/test262/pull/3525)


2023-01-11
[18:47:19.0201] <Jack Works>
I wonder about the use rate of new css features like new units, new color functions

[18:49:18.0983] <Jack Works>
Because css cannot be polyfilled

[21:14:19.0973] <sea-grass>
I would guess that the use rate of new css features would go up as autoprefixer/other css preprocessors add support for them, which is basically polyfilling

[22:56:40.0518] <Jack Works>
Many features cannot be polyfilled because they don't have an old equivalent version, for example different color functions do not represent the same color  space. Units are the same

[05:19:18.0939] <ryzokuken>
https://preset-env.cssdb.org/ atleast claims to get the job done


2023-01-12
[08:53:37.0858] <shu>
practitioners: do you expect/want `Error.prototype.stack` strings to chain together stacks from `.cause`? or do you only expect that chaining to happen in more "sophisticated" printing places like the DevTools console and console.log?

[08:54:17.0680] <shu>
i feel like it's weird to have the `.stack` string automatically chase `.cause` chains because then you have to parse the string to figure out which is a particular error object's stack

[08:55:26.0073] <Jack Works>
🤔 That's an interesting problem. I believe both have their use cases. Is it possible to make this feature configurable in the devtools? 

[08:55:58.0113] <shu>
i guess that's possible, but it doesn't feel right to have devtools configure the fundamental behavior of the `.stack` string

[08:56:50.0737] <shu>
for context: Firefox only chase `.cause` stacks in the more sophisticated printing places like console, afaict

[08:56:57.0344] <Kris Kowal>
I’d expect DevTools to help introspect both cause and aggregate error, and I expect neither to be reflected in the error.stack.

[08:57:08.0507] <shu>
that's my intuition, Kris Kowal 

[08:57:24.0807] <shu>
trying to decide what to do for chrome, that choice (which FF already made) seems like the right one

[08:57:25.0885] <Jack Works>
Yeah, firefox's behavior is good

[08:58:16.0116] <Jack Works>
Developers don't type err.stack (in the console), they type err

[08:58:27.0079] <Kris Kowal>
Meanwhile, inspecting a causal graph is close to what Miller Columns were invented for.

[08:58:32.0246] <shu>
i see

[08:58:38.0085] <Jack Works>
And that should track the causes so it shouldn't be reflected in the stack string

[08:58:45.0240] <shu>
programmatically it's pretty easy to just keep chasing `.cause` yourself anyway

[08:58:50.0771] <shu>
if you want to build up the stack string with all the cause chain

[09:00:21.0266] <Kris Kowal>
Domenic certainly will have opinions. He implemented Q’s “long traces”.

[09:23:46.0855] <snek>
> <@shuyuguo:matrix.org> practitioners: do you expect/want `Error.prototype.stack` strings to chain together stacks from `.cause`? or do you only expect that chaining to happen in more "sophisticated" printing places like the DevTools console and console.log?

i expect devtools to chase it

[09:24:15.0251] <snek>
each individual error's stack string should ideally remain as-is 

[10:18:04.0911] <ljharb>
I also agree that's the right behavior

[10:35:17.0563] <Justin Ridgewell>
Can we have a second getter called `fullStack`? 😂

[10:42:59.0206] <shu>
`.tellMeWhy`


2023-01-13
[18:01:09.0843] <rkirsling>
> <@shuyuguo:matrix.org> `.tellMeWhy`

returns `{ aintNothinButA: SyntaxError }`

[18:27:56.0782] <Rob Palmer>
ensures `assert.doesNotMatch(e.message, /ThatWay/)`

[18:31:54.0184] <Rob Palmer>
* ensures `assert.doesNotMatch(e.message, /ThatWay/)`

[01:29:44.0385] <annevk>
Has `collection.isEmpty()` ever been suggested?

[01:49:40.0119] <Ashley Claymore>
For `Array` too? To gloss over `length ` vs `size`?

[01:57:38.0511] <annevk>
Dunno, just curious if it came up in general for any kind of collection I suppose. There's some demand for it for `URLSearchParams`.

