2023-02-05
[13:43:26.0737] <linusg>
I know https://test262.report/ wasn't properly maintained for a while, but it seems to be fully dead now - does anyone know who to ping to look into that?


2023-02-06
[19:43:04.0968] <snek>
i wish they'd just port all the code and infra for it to some public repo, then we could just take some tc39 budget to pay for ci or whatever and call it a day

[20:06:47.0615] <rkirsling>
it really is an uncomfortable situation, yeah

[07:47:13.0270] <ryzokuken>
> <@linusgroh:matrix.org> I know https://test262.report/ wasn't properly maintained for a while, but it seems to be fully dead now - does anyone know who to ping to look into that?

it belongs to Bocoup

[07:47:56.0760] <ryzokuken>
I can talk to them about it if folks want, but I guess the status is the same as before (they no longer work on any TC39 stuff anymore and don't have the resources to maintain it any further).

[07:48:30.0155] <ryzokuken>
> <@devsnek:matrix.org> i wish they'd just port all the code and infra for it to some public repo, then we could just take some tc39 budget to pay for ci or whatever and call it a day

Not sure if they're open to this idea but I'll float it to them.

[07:49:41.0457] <snek>
last time i asked they were not

[07:49:48.0894] <snek>
maybe the website being fully down is the kick they need though

[07:50:02.0540] <ryzokuken>
> <@devsnek:matrix.org> last time i asked they were not

same

[07:51:55.0788] <ryzokuken>
> <@devsnek:matrix.org> maybe the website being fully down is the kick they need though

dunno, hard to predict but maybe it'd be a better idea to build something new from the ground up without some of the pitfalls

[07:52:09.0695] <ryzokuken>
we could consult leobalter about this, they seemed open to the idea

[07:53:04.0619] <snek>
i mean if someone wants to write all that css, more power to em i guess lol

[08:38:40.0420] <ptomato>
sorry, it's been an action item in the test262 maintainers meeting to try to get ECMA resources for test262.report, but we haven't worked on it recently

[08:40:34.0745] <littledan>
> <@pchimento:igalia.com> sorry, it's been an action item in the test262 maintainers meeting to try to get ECMA resources for test262.report, but we haven't worked on it recently

Is this Ecma resources for hosting it, or to compensate Bocoup for them making it open source? Do we have an idea of the expected cost?

[08:43:30.0087] <ptomato>
no info beyond "we need to talk to people and find these things out"

[08:44:09.0114] <ryzokuken>
in light of this discussion, it might be good to talk to them on behalf of TC39 instead of Igalia?

[08:45:00.0921] <ptomato>
yes, that's the plan

[08:55:08.0240] <littledan>
> <@pchimento:igalia.com> sorry, it's been an action item in the test262 maintainers meeting to try to get ECMA resources for test262.report, but we haven't worked on it recently

 * Is this Ecma resources for hosting it? Do we have an idea of the expected cost?


2023-02-07
[18:22:46.0135] <littledan>
So in the latest round of JS-is-missing-features discourse, one request that stands out is for Jack Works ‘s Number.range/BigInt.range. I am wondering, how can we move that forward? Is it blocked on anything?

[18:24:14.0590] <littledan>
I remember we had some kind of debate around how exactly arguments should work but everyone was positive about it IIRC

[19:00:42.0202] <bakkot>
I think the main blocker was whether the resulting thing should be one-shot or reusable

[19:00:48.0716] <bakkot>
and we just need to actually decide

[19:00:56.0236] <bakkot>
 * I think the main blocker was whether the resulting thing should be one-shot or reusable

[19:01:38.0775] <bakkot>
https://github.com/tc39/proposal-Number.range/issues/17, which is well on its way to being a centithread...

[19:02:49.0727] <ljharb>
indeed i think that's the open question. some iterators are reusable, so one might expect these to be; but most aren't, so one might expect these not to be

[19:03:47.0700] <bakkot>
iterators are never reusable, but many iterables are

[19:04:10.0396] <bakkot>
(iterators being inherently stateful)

[19:04:26.0863] <ljharb>
ah right, that's it

[19:21:24.0981] <bakkot>
from https://twitter.com/tesseralis/status/1622787957261488128, I am actually inspired to do `Math.randomInt()`,  I think

[19:21:41.0729] <bakkot>
where, I guess, it is overloaded based on whether you pass numbers or bigints (and forbids both)

[19:22:17.0888] <bakkot>
or it could be called `randomInRange` or something

[19:22:57.0883] <bakkot>
though, if `Number.range()` gave you a re-usable thing, it could be a class instance with a `.selectRandom()` member...

[19:23:11.0446] <bakkot>
(that is mostly a joke, not a design I would seriously pursue)

[19:23:58.0667] <bakkot>
`let getRandomItem = array => array[Number.range(array.length).selectRandom()]`

[19:53:12.0131] <bakkot>
ok hear me out: `for await.concurrent[2] (item of asyncIter) { ... }` to run the body of the for-await concurrently. equivalent to `await asyncIter.map(item => {...}).bufferAhead(2).forEach(() => {})` except that the body of the for-await can still do stuff like `break` and `return` (which prevent further iterations of the loop from starting, though any which have already started still run to the end of the loop body)

[19:58:08.0623] <littledan>
> <@bakkot:matrix.org> https://github.com/tc39/proposal-Number.range/issues/17, which is well on its way to being a centithread...

I think I was on the “reusable” side previously but I am now am leaning one shot given what we decided about iterator helpers since then

[19:58:42.0130] <littledan>
You should be able to use an iterator helper directly on a range 


2023-02-08
[23:56:49.0991] <Jack Works>
> <@littledan:matrix.org> So in the latest round of JS-is-missing-features discourse, one request that stands out is for Jack Works ‘s Number.range/BigInt.range. I am wondering, how can we move that forward? Is it blocked on anything?

The iterator helper has been stage 3 so I want to advance it in Jan 2023 tc39 meeting, but I forgot to add it to the agenda. I'll add it to the next meeting 

[23:58:43.0881] <Jack Works>
> <@bakkot:matrix.org> ok hear me out: `for await.concurrent[2] (item of asyncIter) { ... }` to run the body of the for-await concurrently. equivalent to `await asyncIter.map(item => {...}).bufferAhead(2).forEach(() => {})` except that the body of the for-await can still do stuff like `break` and `return` (which prevent further iterations of the loop from starting, though any which have already started still run to the end of the loop body)

Yeah I want this and I tried to add it in await.ops proposal but failed 

[06:27:21.0683] <littledan>
> <@jackworks:matrix.org> The iterator helper has been stage 3 so I want to advance it in Jan 2023 tc39 meeting, but I forgot to add it to the agenda. I'll add it to the next meeting

What's the implementation status?

[10:09:55.0016] <bakkot>
littledan I assume that comment was "since iterator helpers advanced it is time to bring back Number.range, as an iterator"

[10:10:01.0717] <bakkot>
Number.range is not yet ready for implementations


2023-02-15
[10:45:11.0438] <annevk>
https://github.com/whatwg/html/issues/8708 might be of interest. Float16Array should be a thing, but people are instead doing things with Float32Array and hoping nobody objects, presumably due to the work involved? I should probably check on the motivation.


2023-02-17
[21:55:25.0513] <snek>
that seems pretty uncontentious, they should just bring it

[23:36:10.0764] <annevk>
Can someone explain to me how https://github.com/tc39/proposal-temporal/issues/1654 was determined to be a Stage 4 concern? It's a pretty significant security issue.

[23:36:53.0264] <annevk>
I really wish host integration was sorted out by Stage 3...

[04:28:22.0478] <littledan>
Host hooks vs implementation-defined is sort of an editorial thing, IMO

[04:28:33.0526] <littledan>
At least in cases like this

