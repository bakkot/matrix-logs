2023-03-09
[03:41:46.0153] <nicolo-ribaudo>
I just noticed thanks to https://github.com/tc39/ecma262/pull/3027 that we list abstract operations as "spec values without identity". Does the spec ever compare abstract operations, or ever use them as first-class values?

[03:49:26.0693] <bakkot>
I don't think so, no

[04:46:48.0645] <jmdyck>
I don't see anywhere that we compare abstract operations. As for treating them as first-class values,
- https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator step 7 has `Let _operation_ be the abstract operation associated with _opText_ and Type(_lnum_) in the following table:`
- https://tc39.es/ecma262/#sec-numerictorawbytes step 3.b has `Let _convOp_ be the abstract operation named in the Conversion Operation column ...`

[06:58:05.0803] <nicolo-ribaudo>
Thank you!

[11:27:21.0651] <shu>
in case any node hackers around: does node not call `V8::Dispose()` on process exit?

[11:27:55.0622] <shu>
i'm trying to print some diagnostic stuff on process exit and it doesn't seem to be called. interestingly, `node --help` does seem to call it, but not normal execution

[11:43:33.0640] <shu>
ooh it might be this stdout redirection thing

[11:55:58.0179] <shu>
okay i give up, `atexit` time


2023-03-13
[11:02:10.0266] <snek>
it *should* call it

[11:02:28.0414] <snek>
maybe you've hit a bug

[15:30:43.0077] <Hemanth H.M>
Is there a section in the spec which talks about spec specific symbols and their meaning? (Grammar??)

For example: `?` indicates that if an exception is thrown during this operation, it should be propagated up to the caller of this function.

[15:40:34.0366] <bakkot>
notational conventions

[15:41:20.0747] <bakkot>
`?` is specifically covered under https://tc39.es/ecma262/multipage/notational-conventions.html#sec-returnifabrupt-shorthands

[15:41:33.0920] <bakkot>
though note that the spec does not have a notion of "an exception being thrown" in the spec's meta-language

[15:41:48.0335] <bakkot>
there's just completion records, some of which can be throw completions

[15:41:51.0255] <bakkot>
(same as in e.g. rust)

[16:10:55.0932] <jmdyck>
If by "grammar", you mean a grammar for the pseudocode in the spec's algorithms, then no, no such section. The closest is https://tc39.es/ecma262/#sec-algorithm-conventions

[16:38:41.0421] <Hemanth H.M>
Ah, right! Notational and Algorithmic conventions; Trying to translate that to dev approximations rather than spec's meta-language. 


2023-03-14
[00:53:54.0673] <BrownJenkin>
is it worth suggesting `Math.TAU`? i have to `Math.TAU = 2 * Math.PI` at the top every time.

[01:18:25.0758] <Domenic>
https://esdiscuss.org/topic/math-tau

[01:20:15.0762] <Domenic>
https://github.com/rwaldron/tc39-notes/blob/master/meetings/2014-07/jul-31.md#51-mathtau

[02:44:42.0065] <BrownJenkin>
lame.

[02:45:11.0485] <BrownJenkin>
even python got a math.tau

[03:39:34.0315] <rkirsling>
wow, the relevant Python issue number for that was apparently 12345

[03:39:45.0866] <rkirsling>
 * wow, the relevant Python issue number for that was apparently 12345: https://bugs.python.org/issue12345

[03:41:50.0559] <rkirsling>
lol, Guido on 2016-08-10: "I'm just going to do this." benevolent dictator indeed

[03:42:58.0890] <rkirsling>
to be fair, that decision was a full two years after the above TC39 discussion (which IIUC was also before the TC39 Process began)

[03:44:06.0673] <rkirsling>
 * to be fair, that decision was a full two years after the above TC39 discussion (and that was also before the TC39 Process began)

[03:44:29.0936] <rkirsling>
so I think it'd be valid to reconsider, it would just require usage data

[03:45:19.0584] <rkirsling>
 * prior art is important, so I think it'd be valid to reraise; the presentation would just require usage data

[03:46:29.0363] <rkirsling>
('cause one figures it would basically either get blocked at Stage 0 or go straight to Stage 3)

[03:47:48.0708] <rkirsling>
 * to be fair, that was a full two years after the above TC39 discussion (which itself was before the current TC39 Process began)

[03:54:31.0315] <rkirsling>
as usual, it sucks that github search is so useless

[04:34:43.0358] <annevk>
The rationale there is pretty weak too "might make Python popular"

[05:11:12.0850] <bakkot>
github search is pretty decent these days I think - https://github.com/search?q=language%3Apython+math.tau&type=code

[05:40:34.0126] <annevk>
bakkot: if you compare that to results for math.pi it really doesn't seem worth the time

[05:55:55.0416] <BrownJenkin>
it's a line of code

[05:56:10.0001] <BrownJenkin>
how much time is that?

[06:01:55.0461] <Andreu Botella>
it might be a line of code for you to polyfill, but to add it to the language takes consensus and definitely more than one line in the spec and in browsers' code

[06:34:48.0375] <rkirsling>
the time in question here is primarily referring to the fact that the committee has finite time to consider proposals in general

[06:36:13.0385] <rkirsling>
if we spent an hour battling over whether this is worth it, that'd be an hour we didn't spend talking about another proposal, which could potentially mean that some other proposal comes to fruition months later than it otherwise would have

[06:36:18.0964] <annevk>
it's also the time for people writing educational material, tests, implementations, web developers trying to understand code, etc.

[06:37:20.0946] <rkirsling>
you're not wrong but I feel like it's not hard to find people passionate enough about tau to do that willingly :p

[07:01:12.0290] <BrownJenkin>
> <@abotella:igalia.com> it might be a line of code for you to polyfill, but to add it to the language takes consensus and definitely more than one line in the spec and in browsers' code

sorry. you are right. this is a very important piece of software and change needs to have aa very good reason.

[07:02:06.0843] <BrownJenkin>
* sorry. you are right. this is a very important piece of software and change needs to have a very good reason.

[10:33:42.0777] <ljharb>
i would LOVE to add Math.tau

[10:34:09.0406] <ljharb>
 * i would LOVE to add Math.TAU but yeah it'll be a tough sell for some, even tho it's literally just a property and a number

[16:36:54.0323] <jasew>
https://github.com/rust-lang/rust/issues/66770


2023-03-15
[17:01:05.0025] <bakkot>
Math.TWO_PI, I love it

[17:01:19.0301] <bakkot>
(TAU is better but less funny)

[17:02:07.0742] <shu>
i would be in favor of TWO_PI but would not be in favor of TAU for this reason

[17:04:07.0773] <bakkot>
> There are people who don't know tau, but know pi. Even if you would find a bit more convenient using math.Tau instead of 2*math.Pi, I'd prefer that all Go code used pi so that every developer can instantly get it.

ok actually TWO_PI is maybe reasonable

[17:04:11.0824] <bakkot>
(from https://github.com/golang/go/issues/40663#issuecomment-671605986 )

[17:04:39.0381] <shu>
2 * `Math.PI` is less typing even

