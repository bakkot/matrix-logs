2023-03-09
[03:41:46.0153] <nicolo-ribaudo>
I just noticed thanks to https://github.com/tc39/ecma262/pull/3027 that we list abstract operations as "spec values without identity". Does the spec ever compare abstract operations, or ever use them as first-class values?

[03:49:26.0693] <bakkot>
I don't think so, no

[04:46:48.0645] <jmdyck>
I don't see anywhere that we compare abstract operations. As for treating them as first-class values,
- https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator step 7 has `Let _operation_ be the abstract operation associated with _opText_ and Type(_lnum_) in the following table:`
- https://tc39.es/ecma262/#sec-numerictorawbytes step 3.b has `Let _convOp_ be the abstract operation named in the Conversion Operation column ...`

[06:58:05.0803] <nicolo-ribaudo>
Thank you!

[11:27:21.0651] <shu>
in case any node hackers around: does node not call `V8::Dispose()` on process exit?

[11:27:55.0622] <shu>
i'm trying to print some diagnostic stuff on process exit and it doesn't seem to be called. interestingly, `node --help` does seem to call it, but not normal execution

[11:43:33.0640] <shu>
ooh it might be this stdout redirection thing

[11:55:58.0179] <shu>
okay i give up, `atexit` time


2023-03-13
[11:02:10.0266] <snek>
it *should* call it

[11:02:28.0414] <snek>
maybe you've hit a bug

[15:30:43.0077] <Hemanth H.M>
Is there a section in the spec which talks about spec specific symbols and their meaning? (Grammar??)

For example: `?` indicates that if an exception is thrown during this operation, it should be propagated up to the caller of this function.

[15:40:34.0366] <bakkot>
notational conventions

[15:41:20.0747] <bakkot>
`?` is specifically covered under https://tc39.es/ecma262/multipage/notational-conventions.html#sec-returnifabrupt-shorthands

[15:41:33.0920] <bakkot>
though note that the spec does not have a notion of "an exception being thrown" in the spec's meta-language

[15:41:48.0335] <bakkot>
there's just completion records, some of which can be throw completions

[15:41:51.0255] <bakkot>
(same as in e.g. rust)

[16:10:55.0932] <jmdyck>
If by "grammar", you mean a grammar for the pseudocode in the spec's algorithms, then no, no such section. The closest is https://tc39.es/ecma262/#sec-algorithm-conventions

[16:38:41.0421] <Hemanth H.M>
Ah, right! Notational and Algorithmic conventions; Trying to translate that to dev approximations rather than spec's meta-language. 


2023-03-14
[00:53:54.0673] <BrownJenkin>
is it worth suggesting `Math.TAU`? i have to `Math.TAU = 2 * Math.PI` at the top every time.

[01:18:25.0758] <Domenic>
https://esdiscuss.org/topic/math-tau

[01:20:15.0762] <Domenic>
https://github.com/rwaldron/tc39-notes/blob/master/meetings/2014-07/jul-31.md#51-mathtau

[02:44:42.0065] <BrownJenkin>
lame.

