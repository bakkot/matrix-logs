2025-01-01
[01:03:40.0823] <Aapo Alasuutari>
Now here's a spec question: Can GetBindingValue of Module Environment Record call user code?

Inside the GetBindingValue AO when an indirect binding is accessed, the website thinks that the GetBindingValue call to get the value can call UC but the [[Get]] method of Module Namespace Exotic Objects does not think GetBindingValue can call UC.

[07:35:34.0480] <bakkot>
I don't believe so; that's probably a bug from when we were doing manual annotations

[07:37:29.0196] <bakkot>
GetBindingValue does sometimes invoke user code (because it can trigger getters) but in this case it's actually always invoking another module environment's GetBindingValue

[10:08:31.0109] <Aapo Alasuutari>
> <@bakkot:matrix.org> I don't believe so; that's probably a bug from when we were doing manual annotations

So in effect, neither should have UC on them. Can I open a PR somewhere to fix that?

[10:14:32.0775] <Aapo Alasuutari>
Unrelated question: I'm kind of wondering about OrdinarySetWithOwnDescriptor's AO step 2.e.i: We've just called GetOwnProperty on Receiver for property P, and if we get undefined from that then we assert that Receiver does not have a property P: What is this for specifically? 


2025-01-02
[20:59:46.0073] <bakkot>
sure, you just need to remove the `<emu-meta effects="user-code">` in the GetBindingValue definition for module environment records. note that sending any PR, even trivial ones, currently requires signing https://tc39.es/agreements/contributor/

[21:00:20.0724] <bakkot>
the repo is https://github.com/tc39/ecma262

[21:02:07.0007] <bakkot>
I don't understand the question, sorry. what do you mean by "what is this for"? It's for... informing the reader that getting `undefined` here implies that Receiver does not currently have a property P.

[21:02:51.0249] <bakkot>
all asserts are for informing the reader of something which it is helpful to know and is not necessarily obvious from the immediate context

[13:22:51.0637] <Francisco Tolmasky>
Is there a term for "non-callable objects" (in other words, objects that *don't* have anything in the [[Call]] slot, and thus return "object" from typeof)? I don't see anything in the ECMAScript spec that gives such objects a definitive name (such as "plain object" or "non-callable object" etc)

[13:24:24.0413] <Francisco Tolmasky>
I see "ordinary object", "exotic object", "standard object", and "built-in object", all of which could be callable or non-callable

