2023-08-03
[20:24:26.0115] <jmdyck>
re question in Delegates room: Originally, it was "... to link, instantiate, and evaluate the module". Then PR #1312 changed occurrences of "instantiate" to "link", and didn't notice what that did to that sentence.

[20:27:13.0912] <jmdyck>
 * HE Shi-Jun: re question in Delegates room: Originally, it was "... to link, instantiate, and evaluate the module". Then PR #1312 changed occurrences of "instantiate" to "link", and didn't notice what that did to that sentence.


2023-08-04
[20:23:06.0921] <kai>
> <@jmdyck:matrix.org> HE Shi-Jun: re question in Delegates room: Originally, it was "... to link, instantiate, and evaluate the module". Then PR #1312 changed occurrences of "instantiate" to "link", and didn't notice what that did to that sentence.

Thank you for your answer, but it is difficult to distinguish the difference between "to link" and "link" in the description. Should "to link" be changed to the concrete method LoadRequestedModules to represent the previous stage

[10:11:50.0989] <jmdyck>
kai: seems like changing it to "to load" would fit the sentence better.


2023-08-20
[17:41:52.0385] <tewuzij>
What is the TC39 space id on Matrix?


2023-08-21
[07:23:29.0333] <Chris de Almeida>
> <@tewuzij:tzchat.org> What is the TC39 space id on Matrix?

https://matrix.to/#/#tc39-space:matrix.org

[14:58:43.0458] <Yehor Yatskevych>
Hey there! üëã 
I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.

Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables
Please correct me if I'm wrong somewhere and I'm open for the discussion.
Thanks! üôè

```javascript
function func() {
    static let isFirstCall = true;
    static let counter = 0;

    if (isFirstCall) {
        isFirstCall = false;
        console.log('Static variables initialized!');
    }

    console.log("Counter:", counter);

    counter++;
}

func(); // OUT: "Static variables initialized!", "Counter: 0"
func(); // OUT: "Counter: 1"
func(); // OUT: "Counter: 2"
```

[14:59:10.0764] <Yehor Yatskevych>
 * Hey there! üëã
I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.

Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables

Please correct me if I'm wrong somewhere and I'm open for the discussion.
Thanks! üôè

```javascript
function func() {
    static let isFirstCall = true;
    static let counter = 0;

    if (isFirstCall) {
        isFirstCall = false;
        console.log('Static variables initialized!');
    }

    console.log("Counter:", counter);

    counter++;
}

func(); // OUT: "Static variables initialized!", "Counter: 0"
func(); // OUT: "Counter: 1"
func(); // OUT: "Counter: 2"
```

[15:08:24.0988] <bakkot>
Yehor Yatskevych the most important part of any proposal is to explain what problem you're solving, compared to what you'd currently do.

[15:08:48.0762] <ljharb>
What's the problem this is solving? How would this work better than:
```
let isFirstCall = true;
let counter = 0;
function func() {
  ‚Ä¶
```
?

[15:08:48.0878] <bakkot>
Right now the thing you'd do is use a closure, and hoist the `static` variables out of the closure. How is your suggestion better than that?

[15:13:13.0187] <bakkot>
(also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it's pretty brief https://es.discourse.group/t/c-style-static-variables/511 )

[15:13:33.0820] <Yehor Yatskevych>
> <@bakkot:matrix.org> Right now the thing you'd do is use a closure, and hoist the `static` variables out of the closure. How is your suggestion better than that?

I see, I'll try to write about the problem more, thanks for your answer!

[15:15:03.0081] <Yehor Yatskevych>
> <@bakkot:matrix.org> (also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it's pretty brief https://es.discourse.group/t/c-style-static-variables/511 )

Oh, let me take a look! Thanks!

[15:18:21.0931] <Yehor Yatskevych>
> <@ljharb:matrix.org> What's the problem this is solving? How would this work better than:
> ```
> let isFirstCall = true;
> let counter = 0;
> function func() {
>   ‚Ä¶
> ```
> ?

Better, because functions can have their own state independently from the global context and remove the problem with naming variables and name conflicts, also the function can be easily refactored and moved to another file without wasting time on finding all variables the function depends on.

[15:19:30.0883] <bakkot>
If it's just about encapsulation, you can do that pretty easily:

```
let fn = (() => {
  let isFirstCall = true;
  let counter = 0;
  return function fn() {...};
})();
```

[15:19:58.0578] <bakkot>
That would get even simpler with https://github.com/tc39/proposal-do-expressions/, if that ends up happening

[15:24:10.0580] <Yehor Yatskevych>
> <@bakkot:matrix.org> If it's just about encapsulation, you can do that pretty easily:
> 
> ```
> let fn = (() => {
>   let isFirstCall = true;
>   let counter = 0;
>   return function fn() {...};
> })();
> ```

of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for "update" and other functions which should be called every frame.

[15:24:48.0225] <bakkot>
I don't think it's especially dirty code? And it works fine for methods, not sure what you mean there.

[15:25:01.0023] <Yehor Yatskevych>
 * of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for "update" and other functions which should be called every frame. This is also applicable for other high performance programs and recursion to avoid unnecessary allocations.

[15:37:46.0861] <Yehor Yatskevych>
Closure
```javascript
GameEvents.subscribe('frame', (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const position = player.getPosition();
                const dir = player.getAngles().toVector();
                velocity.set(position).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)());
```

```javascript
const onServerFrame = (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const position = player.getPosition();
                const dir = player.getAngles().toVector();
                velocity.set(position).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)();

GameEvents.subscribe('frame', onServerFrame);
```

Versus static proposal.

```javascript
GameEvents.subscribe('frame', () => {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const position = player.getPosition();
        const dir = player.getAngles().toVector();
        velocity.set(position).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
});
```
```javascript
GameEvents.subscribe('frame', onServerFrame);

function onServerFrame() {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const position = player.getPosition();
        const dir = player.getAngles().toVector();
        velocity.set(position).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
}
```

Better readability, function declaration pattern support, less code

[15:39:00.0675] <Yehor Yatskevych>
 * Closure

```javascript
GameEvents.subscribe('frame', (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const position = player.getPosition();
                const dir = player.getAngles().toVector();
                velocity.set(0, 0, 0).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)());
```

```javascript
const onServerFrame = (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const position = player.getPosition();
                const dir = player.getAngles().toVector();
                velocity.set(0, 0, 0).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)();

GameEvents.subscribe('frame', onServerFrame);
```

Versus static proposal.

```javascript
GameEvents.subscribe('frame', () => {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const position = player.getPosition();
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
});
```

```javascript
GameEvents.subscribe('frame', onServerFrame);

function onServerFrame() {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const position = player.getPosition();
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
}
```

Better readability, function declaration pattern support, less code

[15:40:16.0588] <Yehor Yatskevych>
 * Closure

```javascript
GameEvents.subscribe('frame', (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const dir = player.getAngles().toVector();
                velocity.set(0, 0, 0).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)());
```

```javascript
const onServerFrame = (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const dir = player.getAngles().toVector();
                velocity.set(0, 0, 0).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)();

GameEvents.subscribe('frame', onServerFrame);
```

Versus static proposal.

```javascript
GameEvents.subscribe('frame', () => {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
});
```

```javascript
GameEvents.subscribe('frame', onServerFrame);

function onServerFrame() {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
}
```

Better readability, function declaration pattern support, less code

[15:40:33.0636] <Yehor Yatskevych>
 * Closure

```javascript
GameEvents.subscribe('frame', (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const dir = player.getAngles().toVector();
                velocity.set(0, 0, 0).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)());
```

```javascript
const onServerFrame = (
    () => {
        let velocity = new Vec3();

        return () => {
            for (player of getPlayers()) {
                const dir = player.getAngles().toVector();
                velocity.set(0, 0, 0).addScaled(dir, 200);
                player.setVelocity(velocity);
            }
        };
    }
)();

GameEvents.subscribe('frame', onServerFrame);
```

Versus static proposal.

```javascript
GameEvents.subscribe('frame', () => {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
});
```

```javascript
GameEvents.subscribe('frame', onServerFrame);

function onServerFrame() {
    static let velocity = new Vec3();

    for (player of getPlayers()) {
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
}
```

Better readability, function declaration support, less code

[15:41:23.0095] <bakkot>
Yeah, I don't think that difference is significant enough to warrant new syntax. In practice, in almost all code, you'd just put the "static" variable immediately before the function, which has the advantage of having completely unambiguous semantics (for example: with `static`, what happens if you have multiple such declarations and one of them throws the first time you call the function?). In the rare cases where putting your variables before the function doesn't work, the IIFE pattern is not really that bad.

[15:42:26.0790] <bakkot>
That is to say, in practice, what you'd write is usually

```
let velocity = new Vec3();
function onServerFrame() {
    for (player of getPlayers()) {
        const dir = player.getAngles().toVector();
        velocity.set(0, 0, 0).addScaled(dir, 200);
        player.setVelocity(velocity);
    }
}

GameEvents.subscribe('frame', onServerFrame);
```

[15:42:34.0959] <ptomato>
maybe I'm not understanding the API of `Vec3` there, but it looks like the variable doesn't need to be static at all in this example? isn't it always reset with `.set(0, 0, 0)` before it is accessed?

[15:44:42.0532] <Yehor Yatskevych>
> <@pchimento:igalia.com> maybe I'm not understanding the API of `Vec3` there, but it looks like the variable doesn't need to be static at all in this example? isn't it always reset with `.set(0, 0, 0)` before it is accessed?

just an example, but at least it not allocate object every frame which save time, function can be called thousand times per second and for example logic can be moved to separate function then complexity will be `playersNum * serverFps`

[15:44:49.0774] <Yehor Yatskevych>
> <@pchimento:igalia.com> maybe I'm not understanding the API of `Vec3` there, but it looks like the variable doesn't need to be static at all in this example? isn't it always reset with `.set(0, 0, 0)` before it is accessed?

 * just an example, but at least it not allocate object every frame which save time, function can be called thousand times per second and for example logic can be moved to separate function then allocation complexity will be `playersNum * serverFps`

[15:45:49.0770] <Yehor Yatskevych>
in case server updates 10000 times per second and we have for example 100 players it will be 100000 calls per second and the same allocations number 

[15:46:35.0410] <Yehor Yatskevych>
 * in case server updates 10000 times per second and we have for example 100 players it will be 100000 calls per second and the same allocations number, some the number of variables needed may also be significantly larger

[15:46:49.0036] <Yehor Yatskevych>
 * in case server updates 10000 times per second and we have for example 100 players it will be 100000 calls per second and the same allocations number, some the number of variables needed may also be significantly larger, it's just an example with one variable

[15:49:34.0684] <Yehor Yatskevych>
> <@bakkot:matrix.org> That is to say, in practice, what you'd write is usually
> 
> ```
> let velocity = new Vec3();
> function onServerFrame() {
>     for (player of getPlayers()) {
>         const dir = player.getAngles().toVector();
>         velocity.set(0, 0, 0).addScaled(dir, 200);
>         player.setVelocity(velocity);
>     }
> }
> 
> GameEvents.subscribe('frame', onServerFrame);
> ```

game script usually contains a huge number of functions and every of this function may have their own "velocity" variable, moving it to global context is not a solution, in case you need to somehow read previous state you should create the same variable for each function in global context with different names.

[15:51:29.0865] <Yehor Yatskevych>
 * game script usually contains a huge number of functions and every of this function may have their own "velocity" variable, moving it to global context is not a solution, in case you need to somehow read previous state you should create the same variable for each function in global context with different names.
It's easiest for me to describe it like for games, but it almost the same for other high loading programs and calculations.

[15:52:26.0785] <Yehor Yatskevych>
 * game scripts usually contain a huge number of functions and every of this function may have their own "velocity" variable, moving it to global context is not a solution, in case you need to somehow read the previous state you should create the same variable for each function in global context with different names.
It's easiest for me to describe it like for games, but it almost the same for other high loading programs and calculations. Currently math is one of the weakest points of js <del>and mine</del>.

[15:52:54.0842] <bakkot>
Hoisting variables to the outer scope is in fact a solution. I agree that there are cases where that means you will need to spend slightly more effort naming things, or otherwise have some awkwardness, but I don't think this is bad enough to warrant new syntax.

[15:53:26.0089] <Yehor Yatskevych>
 * game scripts usually contain a huge number of functions and each of these functions may have its own "velocity" variable, moving it to a global context is not a solution, in case you need to somehow read the previous state you should create the same variable for each function in the global context with different names.
It's easiest for me to describe it as for games, but it is almost the same for other high-loading programs and calculations. Currently, math is one of the weakest points of js <del>and my</del>.

[15:58:56.0065] <ptomato>
in practice how the process works is that you identify the problem first, before proposing a solution - this proposed solution moves a feature from C into JS which brings its own problems along. for example, the cognitive load for learning it due to most JS developers not being familiar with C; even in C, the feature is named confusingly, because `static` means two different things, 3 in C++. so during the early stages of such a proposal, there'd be a search through the solution space for a more "JavaScript-y" solution

[15:59:19.0228] <ptomato>
(& I think bakkot's point is that such a "JavaScript-y" solution already exists)

