2023-08-03
[20:24:26.0115] <jmdyck>
re question in Delegates room: Originally, it was "... to link, instantiate, and evaluate the module". Then PR #1312 changed occurrences of "instantiate" to "link", and didn't notice what that did to that sentence.

[20:27:13.0912] <jmdyck>
 * HE Shi-Jun: re question in Delegates room: Originally, it was "... to link, instantiate, and evaluate the module". Then PR #1312 changed occurrences of "instantiate" to "link", and didn't notice what that did to that sentence.


2023-08-04
[20:23:06.0921] <kai>
> <@jmdyck:matrix.org> HE Shi-Jun: re question in Delegates room: Originally, it was "... to link, instantiate, and evaluate the module". Then PR #1312 changed occurrences of "instantiate" to "link", and didn't notice what that did to that sentence.

Thank you for your answer, but it is difficult to distinguish the difference between "to link" and "link" in the description. Should "to link" be changed to the concrete method LoadRequestedModules to represent the previous stage

[10:11:50.0989] <jmdyck>
kai: seems like changing it to "to load" would fit the sentence better.


2023-08-20
[17:41:52.0385] <tewuzij>
What is the TC39 space id on Matrix?


2023-08-21
[07:23:29.0333] <Chris de Almeida>
> <@tewuzij:tzchat.org> What is the TC39 space id on Matrix?

https://matrix.to/#/#tc39-space:matrix.org

[14:58:43.0458] <Yehor Yatskevych>
Hey there! üëã 
I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.

Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables
Please correct me if I'm wrong somewhere and I'm open for the discussion.
Thanks! üôè

```javascript
function func() {
    static let isFirstCall = true;
    static let counter = 0;

    if (isFirstCall) {
        isFirstCall = false;
        console.log('Static variables initialized!');
    }

    console.log("Counter:", counter);

    counter++;
}

func(); // OUT: "Static variables initialized!", "Counter: 0"
func(); // OUT: "Counter: 1"
func(); // OUT: "Counter: 2"
```

[14:59:10.0764] <Yehor Yatskevych>
 * Hey there! üëã
I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.

Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables

Please correct me if I'm wrong somewhere and I'm open for the discussion.
Thanks! üôè

```javascript
function func() {
    static let isFirstCall = true;
    static let counter = 0;

    if (isFirstCall) {
        isFirstCall = false;
        console.log('Static variables initialized!');
    }

    console.log("Counter:", counter);

    counter++;
}

func(); // OUT: "Static variables initialized!", "Counter: 0"
func(); // OUT: "Counter: 1"
func(); // OUT: "Counter: 2"
```

[15:08:24.0988] <bakkot>
Yehor Yatskevych the most important part of any proposal is to explain what problem you're solving, compared to what you'd currently do.

[15:08:48.0762] <ljharb>
What's the problem this is solving? How would this work better than:
```
let isFirstCall = true;
let counter = 0;
function func() {
  ‚Ä¶
```
?

[15:08:48.0878] <bakkot>
Right now the thing you'd do is use a closure, and hoist the `static` variables out of the closure. How is your suggestion better than that?

[15:13:13.0187] <bakkot>
(also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it's pretty brief https://es.discourse.group/t/c-style-static-variables/511 )

[15:13:33.0820] <Yehor Yatskevych>
> <@bakkot:matrix.org> Right now the thing you'd do is use a closure, and hoist the `static` variables out of the closure. How is your suggestion better than that?

I see, I'll try to write about the problem more, thanks for your answer!

[15:15:03.0081] <Yehor Yatskevych>
> <@bakkot:matrix.org> (also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it's pretty brief https://es.discourse.group/t/c-style-static-variables/511 )

Oh, let me take a look! Thanks!

[15:18:21.0931] <Yehor Yatskevych>
> <@ljharb:matrix.org> What's the problem this is solving? How would this work better than:
> ```
> let isFirstCall = true;
> let counter = 0;
> function func() {
>   ‚Ä¶
> ```
> ?

Better, because functions can have their own state independently from the global context and remove the problem with naming variables and name conflicts, also the function can be easily refactored and moved to another file without wasting time on finding all variables the function depends on.

[15:19:30.0883] <bakkot>
If it's just about encapsulation, you can do that pretty easily:

```
let fn = (() => {
  let isFirstCall = true;
  let counter = 0;
  return function fn() {...};
})();
```

[15:19:58.0578] <bakkot>
That would get even simpler with https://github.com/tc39/proposal-do-expressions/, if that ends up happening

[15:24:10.0580] <Yehor Yatskevych>
> <@bakkot:matrix.org> If it's just about encapsulation, you can do that pretty easily:
> 
> ```
> let fn = (() => {
>   let isFirstCall = true;
>   let counter = 0;
>   return function fn() {...};
> })();
> ```

of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for "update" and other functions which should be called every frame.

[15:24:48.0225] <bakkot>
I don't think it's especially dirty code? And it works fine for methods, not sure what you mean there.

[15:25:01.0023] <Yehor Yatskevych>
 * of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for "update" and other functions which should be called every frame. This is also applicable for other high performance programs and recursion to avoid unnecessary allocations.

