2022-11-02
[04:24:25.0724] <Domenic>
Anyone want to help back me up on https://github.com/web-platform-tests/wpt/pull/36746 ? The perennial confusion about the vague spec language like "For each own property key P of O"

[04:42:03.0275] <annevk>
Domenic: I think I agree with your conclusion, unless `OrdinaryOwnPropertyKeys` actually does something with the hook we do override, there's no reason to expect there would be additional own properties.

[04:42:29.0127] <annevk>
(Now whether that's good or bad, ...)


2022-11-07
[10:38:01.0228] <ptomato>
I'm looking into the Array.fromAsync proposal and have a question about what people's understanding of "Zalgo" is (to explain the [jargon](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/), Zalgo is a reference to a meme, that is used as shorthand for the situation where an async operation sometimes calls a callback and sometimes doesn't)

[10:39:11.0388] <ptomato>
is throwing an error immediately, on bad input, Zalgo?

[10:40:14.0234] <ptomato>
i.e.
```js
function myfunc(input) {
  if (isBad(input)) throw new Error('bad!');
  return promiseFromAsyncOperation(input);
}
```

[10:41:12.0352] <ptomato>
the Array.fromAsync proposal [says yes](https://github.com/tc39/proposal-array-from-async#errors) and takes care to check its input only inside its async closure, which means rejecting the promise, not throwing an error synchronously

[10:41:51.0206] <ptomato>
Atomics.waitAsync, on the other hand, does throw errors synchronously on bad input: (steps 1 and 2 of https://tc39.es/proposal-atomics-wait-async/#sec-dowait)

[10:43:21.0323] <ptomato>
reading the [original](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/) [definitions](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/) of Zalgo, I'd say this is not Zalgo as originally defined

[10:44:12.0226] <ptomato>
however, maybe it is still desirable to do one or the other; in which case we should probably adjust one of these two proposals

[10:45:06.0162] <Kris Kowal>
Zalgo in short is a combinatoric explosion of behaviors that may be either synchronous or anachronous, such that it is not practical to test every combination that will be seen in production.

[10:46:35.0793] <Kris Kowal>
Vetting inputs is I believe debatable. It depends on whether the errant behavior can possibly vary at runtime.

[10:47:05.0899] <Kris Kowal>
Being JavaScript, it almost certainly can.

[10:47:15.0497] <ljharb>
the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that

[10:47:26.0709] <bakkot>
ptomato: I would say that Atomics.waitAsync is actually a sync function, despite the name

[10:47:35.0970] <bakkot>
it does not return a promise; it returns an object which is synchronously usable

[10:47:37.0128] <ljharb>
can it return a promise?

[10:47:39.0233] <ljharb>
ah ok

[10:47:42.0632] <ljharb>
then i would agree

[10:47:49.0999] <bakkot>
(one of the properties of that object can be a promise)

[10:47:57.0568] <shu>
Atomics.waitAsync is the way it is explicitly to avoid zalgo

[10:47:58.0169] <ljharb>
zalgo is basically "always, or never, return a promise"

[10:48:13.0997] <ljharb>
"an object containing a promise" is definitely not a promise :-)

[10:48:53.0680] <shu>
in particular, Atomics.waitAsync *needs* to fail fast because it's built to mutexes -- you can't wait until the next microtask tick to find out you couldn't acquire the lock and need to go into the slow path 

[10:49:01.0138] <Kris Kowal>
> <@ljharb:matrix.org> the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that

And also the Promise constructor.

[10:49:04.0650] <shu>
so, instead of always returning a Promise it does this wrapping

[10:49:34.0656] <ptomato>
fair enough. I got misled by the first sentence of MDN on Atomics.waitAsync: "The static Atomics.waitAsync() method waits asynchronously on a shared memory location and returns a Promise."

[10:49:48.0595] <shu>
it waits asynchronously if it waits at all

[10:49:52.0802] <ptomato>
reading further down, you are right that it actually does not return a Promise

[10:49:56.0835] <shu>
if it doesn't wait, you can find out synchronously

[10:52:27.0581] <ptomato>
> <@ljharb:matrix.org> the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that

is there documentation for this decision? seems like a good thing to put in https://github.com/tc39/how-we-work/pull/119 once that document is established

[10:52:34.0713] <shu>
all that said i love zalgo

[10:52:36.0957] <shu>
i wish we had zalgo

[10:52:38.0139] <shu>
but alas

[11:02:17.0463] <ptomato>
well, in lieu of spec conventions, if anyone has a pointer to context about that decision, I'd be happy to read more. maybe I'll write a blog post on this or something

[11:03:14.0094] <joepie91 üè≥Ô∏è‚Äçüåà>
ptomato: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/ is pretty much the canonical source on this topic

[11:03:52.0080] <ptomato>
thanks, but I linked that document above already üòÑ

[11:04:01.0652] <joepie91 üè≥Ô∏è‚Äçüåà>
oh, sorry.

[11:04:08.0483] <joepie91 üè≥Ô∏è‚Äçüåà>
only half paying attention today

[11:04:34.0451] <ptomato>
sync exceptions are not Zalgo according to that definition, so that's why I'm interested in the context of where we decided to depart from that

[11:05:42.0572] <joepie91 üè≥Ô∏è‚Äçüåà>
I'm unsure of the exact process behind that decision, but it does meet the *principles* behind zalgo; errors that are sometimes synchronous and sometimes asynchronous make it difficult to reason about the behaviour of a function

[11:09:17.0208] <ptomato>
I tend to agree, although the article (and the one from Havoc Pennington before it) concentrates, rightly IMO, on the situation where a callback is called sometimes synchronously and sometimes asynchronously, which is much, much worse

[11:10:09.0477] <Ashley Claymore>
I found it more of an issue when `.then` was more common. Would frequently see code like `.catch(handleError)` but sometimes the code would sync throw and that wasn‚Äôt handled.
Now `await` is here it‚Äôs less common, and code uses a catch block for both paths. But still seems like a good principle to follow 

[11:11:30.0057] <ptomato>
it's effectively a slightly different question; is it OK for the callback to not be called at all? (and I think there is good reason to answer no)

[11:13:51.0054] <ptomato>
which is apparently also what TC39 has concluded as well

[11:17:58.0860] <Ashley Claymore>
Many people, myself included, use zalgo also for when an api always calls the callback, but can either get the call before the outer call returns (current tick) or after (fresh tick)

[11:19:28.0254] <Ashley Claymore>
I think it is ok to further expand that to: when will the error information be available

[11:19:59.0420] <Ashley Claymore>
cuts down code paths if always async

[11:20:15.0973] <ptomato>
if the call happens before the outer call returns, isn't that effectively calling it synchronously?

[11:25:51.0284] <Ashley Claymore>
yeah

[11:28:13.0363] <Ashley Claymore>
ah right, and a sync error would be ‚Äúnot calling the callback at all‚Äù. Which yes is annoying. If the API returns a Result like container, then it has somewhere to return errors. It something is sync returning a value directly, it kinda has to throw if it wants to ‚Äúreturn‚Äù an error 


2022-11-08
[00:59:21.0662] <Jack Works>
Is it possible to freeze the [[Prototype]] of an ordinary object without wrapping it with Proxy? 

[02:13:54.0448] <Ashley Claymore>
Nope. Can only make it non-extensible. Props and prototype all part of the same bag

[02:40:45.0803] <Ashley Claymore>
https://github.com/tc39/proposal-freeze-prototype

[02:42:23.0611] <Ashley Claymore>
https://matrixlogs.bakkot.com/TC39_Delegates/2021-09-20#L1

[07:30:19.0394] <nicolo-ribaudo>
Is there an es5 way of creating a function with length n (where n is known statically when I'm writing the code), and for which `IsConstructor` returns `false`?

[07:51:06.0837] <jmdyck>
As far as I can tell, in es5, the only functions that don't have a [[Construct]] internal method are all built-ins. So even without the length constraint, the answer looks like no.

[08:11:23.0082] <nicolo-ribaudo>
Ok thanks, that matches what I expected but I was hoping for secret hacks üòÇ
I know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args.

[08:11:43.0973] <nicolo-ribaudo>
 * Ok thanks, that matches what I expected but I was hoping for secret hacks üòÇ
I know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args.

[10:19:22.0093] <ljharb>
those functions are constructors tho, aren't they?

[10:24:53.0373] <nicolo-ribaudo>
Nope:
```js
new (Object.getOwnPropertyDescriptor({ get x() {} }, "x").get) 
// TypeError: Object.getOwnPropertyDescriptor(...).get is not a constructor
```

[10:26:51.0182] <littledan>
yeah, all concise methods, e.g., `new ({x() {}}.x)`

[10:26:58.0030] <littledan>
and arrow functions

[10:44:49.0514] <jmdyck>
Are you running that in an ES5 engine?

[10:45:42.0337] <littledan>
I am saying, those things are not constructors, and that code throws. I am using a new engine

[10:46:16.0239] <jmdyck>
and nicolo-ribaudo ?

[10:46:50.0332] <littledan>
oh sorry I missed the "es5" part of the question!

[10:47:26.0572] <jmdyck>
looks like semantics changed between es5 and es6

[10:56:14.0976] <Ashley Claymore>
Does that work in ES5? alt: Using a getter, but re defining length and accessing args via `arguments`

[10:56:26.0511] <Ashley Claymore>
or is it a valid constructor in es5?

[11:02:58.0182] <nicolo-ribaudo>
No, I only tested it in modern browsers. Thank you!

[11:03:22.0469] <nicolo-ribaudo>
> <@jmdyck:matrix.org> Are you running that in an ES5 engine?

 * No, I only tested it in modern browsers. Thank you!

[11:04:14.0771] <nicolo-ribaudo>
For context, I was trying to figure out how to compile arrow functions to es5 in a 100% spec compliant way (mostly for fun, I'm not going to add this to Babel)

[11:05:25.0299] <nicolo-ribaudo>
> <@aclaymore:matrix.org> sent an image.

I thought that the length was non-configurable, this might work to at least keep the semantics of compiled code valid in modern engines üëÄ

[11:07:32.0708] <jmdyck>
In ES5, `get` PropertyName etc involves "the result of creating a new Function object as specified in 13.2", which always sets both [[Call]] and [[Construct]].

[11:07:45.0784] <jmdyck>
In ES6, it involves  "FunctionCreate(~Method~, ...)", which leads to FunctionAllocate being called with `_functionKind_` = "non-constructor", which causes \[\[Construct\]\] to not be set.

[11:09:30.0791] <jmdyck>
 * In ES6, it involves  "FunctionCreate(~Method~, ...)", which leads to FunctionAllocate being called with `_functionKind_` = "non-constructor", which causes \[\[Construct\]\] to not be set.


2022-11-10
[03:56:24.0072] <Jessidhia>
Is there a good reason as to why https://tc39.es/ecma402/#sec-defaultlocale ignores the document language?

Like, I know the language is intentionally underspecified, but is there a reason to prefer the chrome's language instead of the document's language? From what I can gather this would just result in out-of-place formatting if `Intl` formatting is used in documents where a `document.documentElement.lang` is specified and doesn't match the chrome's settings.

[03:57:26.0938] <Jessidhia>
on Firefox it ignores the document language *even if* it's present in `navigator.languages`; only the primary `navigator.language` is ever used

[04:00:53.0296] <Jessidhia>
this is kind of a blocker on me using `Intl.DateTimeFormat` without very careful wrapping üòÖ

[04:02:04.0310] <Jessidhia>
 * Is there a good reason as to why https://tc39.es/ecma402/#sec-defaultlocale ignores the document language?

Like, I know the spec language is intentionally underspecified here, but is there a reason to prefer the chrome's language instead of the document's language? From what I can gather this would just result in out-of-place formatting if `Intl` formatting is used in documents where a `document.documentElement.lang` is specified and doesn't match the chrome's settings.

[04:03:43.0935] <Jessidhia>
(on the other hand this gets into trouble with SSR because there's no document language during SSR so I guess my problem formulation is incomplete)

[04:34:37.0279] <annevk>
"host environment's current locale" seems kinda bogus

[04:36:28.0621] <annevk>
Well, I guess it's good enough, but I haven't seen a PR for HTML that maps "current locale" to `navigator.language`'s underlying primitive.

[04:38:55.0747] <annevk>
(Using the language of a document wouldn't work in quite a few environments, e.g., all workers, worklets. And it's not necessarily declared on the root element all of the time either, although it kinda ought to be. So if you want to write portable code you probably want that to be a separate input from the end user locale.)

