2025-07-04
[23:54:25.0330] <Aapo Alasuutari>
[RegExpBuiltinExec](https://tc39.es/ecma262/#sec-regexpbuiltinexec) is of the opinion that reading and writing the "lastIndex" property of a native RegExp object can trigger user-code, but is that really the case? I at least cannot figure out a case for that: The property is an unconfigurable own property of each RegExp object; it is writable, but it shouldn't be possible to turn it into an accessor property or unset its [[Value]] so as to make the property lookup go into the prototype chain.

Is there some other case that I'm missing here?

[00:08:51.0483] <Ashley Claymore>
The usercode warnings are pessimistic, spec text needs to opt-out. So maybe just that 

[00:09:29.0050] <Aapo Alasuutari>
Yeah, I'm wondering if this is a case where I should open an editorial PR to add the opt-outs.

[00:10:09.0875] <Aapo Alasuutari>
(Well, that and also I'm wondering if in my engine code I need to be aware of possible GC points there.)

[00:15:29.0496] <Ashley Claymore>
I agree with your analysis that this wouldn't trigger usercode

[00:16:16.0101] <Ashley Claymore>
the property is installed when the regexp is created and it's a non configurable property. And the internal slot is checked for before this AO is called 

[00:20:18.0365] <Ashley Claymore>
Unless it's the ToNumber call, rather than the Get

[00:21:16.0793] <Aapo Alasuutari>
Yeah, the ToLength call absolutely can trigger UC.

[00:21:32.0636] <Aapo Alasuutari>
And the Set calls can still throw errors.

[00:30:45.0242] <Aapo Alasuutari>
https://github.com/tc39/ecma262/pull/3636


2025-07-10
[11:23:17.0806] <justingrant>
TIL that `{...undefined}` will not throw and will instead return `{}`. This is convenient!

[11:29:29.0352] <Ashley Claymore>
yeah, I kinda wish we had done the same for iterator spread 

[11:29:54.0877] <Ashley Claymore>
Can remove all those `?? []`

[11:30:04.0403] <Ashley Claymore>
* Could remove all those ?? []

[16:30:07.0338] <kriskowal>
Spread the word. Copilot is without clue.


2025-07-11
[23:30:21.0920] <ljharb>
they're different for a reason tho :-) there's a whole closed issue on ecma262 with tons of discussion about it

[00:55:05.0850] <Ashley Claymore>
This does not surprise me üòÜ

[12:21:38.0593] <Timo Tijhof>
Ashley Claymore: https://stackoverflow.com/q/47155141/319266  - https://github.com/tc39/ecma262/issues/687.

TLDR: Object spread is equivalent to Object.assign which tolerates undefined. Array spread actually related to iterables, not arrays specifically, and so requires an iterator (value -> Symbol.iterator -> next -> etc), so there's more potential for unintended errors there (undefined? null? object without iterator? object with null/undefined iterator? iterator with null/undefined next function, etc).

By now, many years later, the reason is of course simply that it is the way that it is, because changing it poses a web compat issue.

[12:26:12.0825] <Timo Tijhof>
* Ashley Claymore: https://stackoverflow.com/q/47155141/319266  - https://github.com/tc39/ecma262/issues/687.

TLDR: Object spread is equivalent to Object.assign which tolerates undefined. Array spread actually related to iterables, not arrays specifically, and so requires an iterator (value -> Symbol.iterator -> next -> etc), so there's more potential for unintended errors there (undefined? null? object without iterator? object with null/undefined iterator? iterator with null/undefined next function, etc).

In practice, though, the reason is simply that it is how it is because it is that way ‚Äî for web compat.

[12:27:54.0022] <Timo Tijhof>
* Ashley Claymore: https://stackoverflow.com/q/47155141/319266  - https://github.com/tc39/ecma262/issues/687.

TLDR: Object spread is equivalent to Object.assign which tolerates undefined. Array spread actually related to iterables, not arrays specifically, and so requires an iterator (value -> Symbol.iterator -> next -> etc), so there's more potential for unintended errors there (undefined? null? object without iterator? object with null/undefined iterator? iterator with null/undefined next function, etc).

In practice, though, the reason is simply that it is how it is because it is that way ‚Äî for web compat. Although having an API accept more than before and throw fewer errors would not be the most unthinkable change. Maybe, if someone puts in the time :)

[12:32:35.0232] <bakkot>
The time to do the change is trivial; the thing in the way of making the change is that a number of people think it should not be made

[12:32:49.0992] <bakkot>
(and it would indeed almost certainly be web-compat)

[12:34:13.0638] <bakkot>
Personally I am much more interested in changes along the lines of making `Array.prototype[Symbol.iterator]` unforgeable so that engines could trivially elide the allocation in `...(foo ?? [])`

[12:34:42.0577] <bakkot>
some people do not like unforgeable builtins for reasons of polyfills or whatever but I think this one would be worth it

[12:34:44.0092] <bakkot>
someday, maybe

[12:47:16.0027] <ljharb>
what do you mean unforgeable? or do you just mean, nonconfigurable

[12:47:31.0551] <ljharb>
it wouldn't be a problem for polyfills to make it nonconfigurable as long as we never, ever change the function in the future, fwiw

[13:19:15.0468] <kriskowal>
I think ‚Äúincorruptible‚Äù might be the right word for what folks writing polyfills and platforms are looking for, in the sense that subsequently run code ideally can‚Äôt interfere with their integrity.

[13:52:57.0516] <ljharb>
well, tbf, in general nonconfigurable things suck for polyfills, because if they're implemented wrong, a polyfill can't fix it

[15:38:03.0481] <bakkot>
sorry, yeah, bu unforgeable mean nonconfigurable & nonwritable

[15:38:12.0367] <bakkot>
* sorry, yeah, by "unforgeable" I mean nonconfigurable & nonwritable

[15:38:31.0423] <bakkot>
so yes it would mean polyfills couldn't fix it

[15:38:39.0608] <bakkot>
but I think that in this specific case it would be worth it anyway


2025-07-12
[21:21:37.0210] <ljharb>
in any case where we're like, 100% confident we'd never change it? i'm fully on board

[21:22:17.0016] <ljharb>
(to be clear, that doesn't mean i'd necessarily object if not 100% confident in the general case - polyfillability is always less important than making the web more correct/less shitty)


2025-07-15
[23:11:16.0549] <whosy>
I seem to recall hearing about reducing the number of new globally scoped objects, instead requiring they be explicitly imported as a module.
Though now I can't figure out any source for this.

Is this/will this be a thing?

[00:26:59.0436] <Ashley Claymore>
https://github.com/tc39/proposal-built-in-modules tc39/proposal-built-in-modules
Afaik conversation hasn't happened much in last 5 years 

[00:28:48.0679] <Ashley Claymore>
All current active proposals that add new names are being proposed to add either to an existing namespace/prototype. Or, in some cases, a new global name 

[00:29:35.0394] <whosy>
Ah, thank you.

[00:30:30.0641] <whosy>
I'm interested given the possibility of collisions with existing libraries. An import would do well to solve the problem, but if the proposal is inactive then it might not be the solution I'd hoped.

[00:32:07.0921] <whosy>
This is regarding the Random Functions proposal, where I expect a global 'Random' might be too common to avoid collisions. Though I've not looked into it too deeply; this was just on my mind.

[00:34:06.0948] <Ashley Claymore>
If there turns out to be web compat issues a different name will be chosen 

[00:36:55.0077] <Ashley Claymore>
Introducing built in modules would be a fairely large change to the language, so any proposal that wants to try and be the first suddenly becomes a much larger proposal 

[00:36:56.0707] <whosy>
Fair enough. Just looking into it on a surface level I found:
https://www.npmjs.com/package/random-js

Which seems to introduce a `Random` constructor. 336k weekly downloads.
I'll just make a note for myself now. Not really a time to have a discussion in Stage 1 but I like to think forward still.

[00:39:03.0520] <Ashley Claymore>
things would only be breaking if there was an app doing something like:

```
if (typeof Random === "undefined") {
  window.Random = ... // setup custom random lib that is different from the proposal 
}

[00:39:47.0853] <Ashley Claymore>
an uncommon pattern for more modern apps

[00:40:31.0602] <whosy>
Thanks, that's good to know. I appreciate the help.

[00:42:07.0197] <Ashley Claymore>
np!

[10:25:07.0327] <bakkot>
yeah generally speaking collisions with libraries are not, in themselves, breaking


2025-07-17
[08:47:42.0899] <nicolo-ribaudo>
Editorial question: if I were to write `Return ? _foo_.[[Slot]]`, does it set `_foo_.[[Slot]]` to `_foo_.[[Slot]].[[Value]]` in case of a normal completion?

We use that notation in https://tc39.es/ecma262/#sec-innermoduleevaluation step 2.b. In that case it's guaranteed to always contain a throw completion, but seeing the syntax made me wonder how it would work.

[08:51:40.0473] <ljharb>
hm, it would for a variable, but I‚Äôm not sure the macro actually works in that case - if it does I‚Äôd say yes, it mutates the slot

[08:52:52.0944] <nicolo-ribaudo>
Maybe we should replace `Return ? _foo_.[[Value]]` with `Return Completion(_foo_.[[Value]])` to avoid ambiguity in case somebody copy-pastes it in a case where a normal completion is possible

[09:07:39.0289] <Michael Ficarra>
I actually think we forgot to add a `?` expansion for aliases (which we use in many places)

[09:07:54.0822] <Michael Ficarra>
`ReturnIfAbrupt` handles them fine, but no the `?` shorthand

[09:09:26.0920] <Michael Ficarra>
assuming we made the `?` shorthand work, the `ReturnIfAbrupt` expansion should work this way

[09:11:11.0743] <Michael Ficarra>
this conversation reminds me, I really want to get https://github.com/tc39/ecma262/pull/1573 in

[10:46:05.0887] <bakkot>
I do not think of `?` as modifying anything, although I agree the current wording is ambiguous

[10:46:32.0478] <bakkot>
I actually want to get rid of `ReturnIfAbrupt` and just define `?` and `!` explicitly

[10:46:39.0296] <bakkot>
which would make this more clear

[10:46:57.0103] <Michael Ficarra>
yes, I will update #1573 to do that

[10:47:04.0905] <Michael Ficarra>
... whenever I get time

[10:48:48.0167] <bakkot>
just added a comment to https://github.com/tc39/ecma262/pull/1573 which I think does away with the ambiguity

[10:52:18.0856] <Michael Ficarra>
I mean, it's just a single form (let)

[10:52:59.0038] <Michael Ficarra>
it's missing `Perform ? ...`, `Return ? ...`, `F(? ...)`, etc

[10:53:35.0233] <Michael Ficarra>
also, what happened to `tmp5`? üòñ

[10:59:36.0238] <bakkot>
hey it's still valid, no one said the synthetic aliases had to have any particular names

[11:00:26.0845] <bakkot>
and the idea is that the other cases are handled by the last sentence:

> When ? or ! is used in a more complex expression, first apply the rewrite given in [previous section] to the complex expression, then apply this rule.

i.e., `Return ? ...` is rewritten to `Let _tmp1_ be ? ...; Return _tmp1_.`

[11:00:47.0892] <bakkot>
though I guess it doesn't quite manage to actually say that

[11:01:09.0508] <bakkot>
I think that sentence does correctly handle `F(? ...)` though

[11:01:35.0795] <bakkot>
I should just say "in another context" rather than "in a more complex expression"

[12:54:56.0864] <TabAtkins>
rip `tmp5` :(

[13:27:37.0466] <Michael Ficarra>
interview with @canadahonk:matrix.org on Porffor: https://www.youtube.com/watch?v=OSYSXq7y0Ew


2025-07-18
[23:13:24.0937] <Ashley Claymore>
Did know f5 made content like this, tres cool!

[23:13:31.0049] <Ashley Claymore>
* Didnt know f5 made content like this, tres cool!

[23:13:40.0030] <Ashley Claymore>
* Didn't know f5 made content like this, tres cool!


2025-07-20
[19:19:20.0337] <Rob Sayre>
Hi, just piping in with an annoying question (sorry). The ECMA link from the IETF JSON RFCs broke. I filed this issue as a best guess: 

[19:19:22.0343] <Rob Sayre>
https://github.com/tc39/tc39.github.io/issues/542

[19:20:42.0760] <Rob Sayre>
It's not about changing anything in ES or JSON, just restoring an old URL. They couldn't find a suitable ECMA contact, so they pinged me because I know TC-39 (not really, anymore) and IETF stuff.


2025-07-21
[23:20:20.0990] <ljharb>
the issue is great, it'll get fixed, thanks

[06:22:16.0436] <snek>
is there a clean way to un-using something

[07:18:27.0222] <Aki>
r/BrandNewSentence

[07:47:00.0310] <Michael Ficarra>
...`delete`? ü§∑‚Äç‚ôÇÔ∏è

[07:55:22.0793] <Michael Ficarra>
@rbuckton:matrix.org make it work

[07:56:25.0179] <rbuckton>
un-using? That's what DisposableStack is for

[07:58:36.0725] <rbuckton>
```js
{
  using resource = getResource();
} // always disposes resource

// vs.

{
  using stack = new DisposableStack();
  const resource = stack.use(getResource());
  stack.move(); // move resource out of `stack`
} // stack disposed but resource isn't
```

[08:03:02.0929] <rbuckton>
One of its uses is with class constructors, where you want the resources to be disposed if the constructor throws, but tracked with the class if everything succeeds:

```js
class MyResource {
  #disposables;
  #resource1;
  #resource2;
  constructor(options) {
    using stack = new DisposableStack();
    this.#resource1 = stack.use(getResource1(options));
    this.#resource2 = stack.use(getResource2(options));
    // both succeeded
    this.#disposables = stack.move(); // move out of stack to store in #disposables
  } // stack is disposed

  [Symbol.dispose]() {
    this.#disposables.dispose();
  }
}
```

[10:23:17.0640] <bakkot>
honestly I don't hate `delete` working though

[10:28:39.0012] <Michael Ficarra>
I know right

[11:38:55.0500] <snek>
would be nice if you could move a single item i guess

[11:39:10.0299] <snek>
wrapper could do that i suppose


2025-07-22
[03:21:07.0018] <CAva9>
When will ECMAScript 2026 be officially released?

[03:23:02.0345] <Aki>
_likely_ June 2026. ES2025 was just published last month.

[03:23:29.0190] <CAva9>
thanks

[03:33:38.0970] <Shark>
Hi, would it be possible for me to join the next meeting? (I was an observer in a coruna)

[07:06:08.0010] <Chris de Almeida>
I will DM

