2025-07-04
[23:54:25.0330] <Aapo Alasuutari>
[RegExpBuiltinExec](https://tc39.es/ecma262/#sec-regexpbuiltinexec) is of the opinion that reading and writing the "lastIndex" property of a native RegExp object can trigger user-code, but is that really the case? I at least cannot figure out a case for that: The property is an unconfigurable own property of each RegExp object; it is writable, but it shouldn't be possible to turn it into an accessor property or unset its [[Value]] so as to make the property lookup go into the prototype chain.

Is there some other case that I'm missing here?

[00:08:51.0483] <Ashley Claymore>
The usercode warnings are pessimistic, spec text needs to opt-out. So maybe just that 

[00:09:29.0050] <Aapo Alasuutari>
Yeah, I'm wondering if this is a case where I should open an editorial PR to add the opt-outs.

[00:10:09.0875] <Aapo Alasuutari>
(Well, that and also I'm wondering if in my engine code I need to be aware of possible GC points there.)

[00:15:29.0496] <Ashley Claymore>
I agree with your analysis that this wouldn't trigger usercode

[00:16:16.0101] <Ashley Claymore>
the property is installed when the regexp is created and it's a non configurable property. And the internal slot is checked for before this AO is called 

[00:20:18.0365] <Ashley Claymore>
Unless it's the ToNumber call, rather than the Get

[00:21:16.0793] <Aapo Alasuutari>
Yeah, the ToLength call absolutely can trigger UC.

[00:21:32.0636] <Aapo Alasuutari>
And the Set calls can still throw errors.

[00:30:45.0242] <Aapo Alasuutari>
https://github.com/tc39/ecma262/pull/3636


2025-07-10
[11:23:17.0806] <justingrant>
TIL that `{...undefined}` will not throw and will instead return `{}`. This is convenient!

[11:29:29.0352] <Ashley Claymore>
yeah, I kinda wish we had done the same for iterator spread 

[11:29:54.0877] <Ashley Claymore>
Can remove all those `?? []`

[11:30:04.0403] <Ashley Claymore>
* Could remove all those ?? []

[16:30:07.0338] <kriskowal>
Spread the word. Copilot is without clue.


2025-07-11
[23:30:21.0920] <ljharb>
they're different for a reason tho :-) there's a whole closed issue on ecma262 with tons of discussion about it

[00:55:05.0850] <Ashley Claymore>
This does not surprise me ðŸ˜†

[12:21:38.0593] <Timo Tijhof>
Ashley Claymore: https://stackoverflow.com/q/47155141/319266  - https://github.com/tc39/ecma262/issues/687.

TLDR: Object spread is equivalent to Object.assign which tolerates undefined. Array spread actually related to iterables, not arrays specifically, and so requires an iterator (value -> Symbol.iterator -> next -> etc), so there's more potential for unintended errors there (undefined? null? object without iterator? object with null/undefined iterator? iterator with null/undefined next function, etc).

By now, many years later, the reason is of course simply that it is the way that it is, because changing it poses a web compat issue.

[12:26:12.0825] <Timo Tijhof>
* Ashley Claymore: https://stackoverflow.com/q/47155141/319266  - https://github.com/tc39/ecma262/issues/687.

TLDR: Object spread is equivalent to Object.assign which tolerates undefined. Array spread actually related to iterables, not arrays specifically, and so requires an iterator (value -> Symbol.iterator -> next -> etc), so there's more potential for unintended errors there (undefined? null? object without iterator? object with null/undefined iterator? iterator with null/undefined next function, etc).

In practice, though, the reason is simply that it is how it is because it is that way â€” for web compat.

[12:27:54.0022] <Timo Tijhof>
* Ashley Claymore: https://stackoverflow.com/q/47155141/319266  - https://github.com/tc39/ecma262/issues/687.

TLDR: Object spread is equivalent to Object.assign which tolerates undefined. Array spread actually related to iterables, not arrays specifically, and so requires an iterator (value -> Symbol.iterator -> next -> etc), so there's more potential for unintended errors there (undefined? null? object without iterator? object with null/undefined iterator? iterator with null/undefined next function, etc).

In practice, though, the reason is simply that it is how it is because it is that way â€” for web compat. Although having an API accept more than before and throw fewer errors would not be the most unthinkable change. Maybe, if someone puts in the time :)

[12:32:35.0232] <bakkot>
The time to do the change is trivial; the thing in the way of making the change is that a number of people think it should not be made

[12:32:49.0992] <bakkot>
(and it would indeed almost certainly be web-compat)

[12:34:13.0638] <bakkot>
Personally I am much more interested in changes along the lines of making `Array.prototype[Symbol.iterator]` unforgeable so that engines could trivially elide the allocation in `...(foo ?? [])`

[12:34:42.0577] <bakkot>
some people do not like unforgeable builtins for reasons of polyfills or whatever but I think this one would be worth it

[12:34:44.0092] <bakkot>
someday, maybe

[12:47:16.0027] <ljharb>
what do you mean unforgeable? or do you just mean, nonconfigurable

[12:47:31.0551] <ljharb>
it wouldn't be a problem for polyfills to make it nonconfigurable as long as we never, ever change the function in the future, fwiw

