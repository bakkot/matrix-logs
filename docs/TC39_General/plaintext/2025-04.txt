2025-04-01
[17:53:45.0487] <kriskowal>
I believe citgm is the nearest to what youâ€™re looking for https://github.com/nodejs/citgm tagging ulises.gascon 

[17:54:41.0864] <kriskowal>
Iâ€™ve not seen it run on nightlies, but itâ€™s used to qualify v8 version bumps.

[19:50:14.0107] <ljharb>
there's a node nightly build, but it won't have an unmerged v8 in it

[20:09:23.0196] <shu>
kriskowal: thanks

[20:09:32.0286] <shu>
yeah i'm not looking for node nightly, but rather node with v8 nightly

[20:10:03.0009] <shu>
wait, doy, what am i saying, v8 ci has one...

[00:59:37.0264] <Mathieu Hofman>
I believe https://github.com/nodejs/node-v8 is what you're looking for

[01:01:45.0838] <Mathieu Hofman>
Well I guess technically that node nightly with v8 lkgr. Not sure if there is a node current + v8 lkgr

[01:03:23.0357] <Mathieu Hofman>
Also every now and then it gets stuck when something breaks, like now, it hasn't been updated since March 5th

[01:05:56.0771] <James M Snell>
Yeah that typically lags just a bit. And I'm not sure exactly how often the lkgr is updated there. It's the closest we have. V8's own testing with node might be closer but I'm not as familiar with that

[01:13:36.0685] <Jack Works>
NEWS:
engine262 came back to life after 1 or 2 years (counting editorial changes or not) inactive
and with a fresh new playground! Try at https://engine262.js.org/

[15:17:26.0082] <Meghan Denny>
https://tc39.es/ecma262/ :smile: nice one

[15:17:36.0764] <Meghan Denny>
* https://tc39.es/ecma262/ ðŸ˜„ nice one

[16:05:13.0288] <bakkot>
firefox is gonna unflag temporal, woo https://groups.google.com/a/mozilla.org/g/dev-platform/c/RtsRo93ygO4/m/2YzM42GUBwAJ


2025-04-03
[10:49:12.0550] <jmdyck>
The February TC39 meeting was 6 weeks ago. Shouldn't the notes be posted by now?

[10:49:58.0162] <Chris de Almeida>
there is a PR for it, with unresolved comments


2025-04-06
[14:20:25.0714] <akaster>
is there any motivation to pick back up this PR? <https://github.com/tc39/ecma262/pull/2193> ? It seems like it's pretty clear that a 'web reality' change is needed, especially given that it's a 0.08%-er on <https://chromestatus.com/metrics/feature/timeline/popularity/1764>. It looks like SpiderMonkey had some tests added that reflected the web reality, but they were reverted in test262?


2025-04-07
[19:28:59.0065] <littledan>
yes, this would definitely be good to do, IMO

[23:08:20.0533] <Aapo Alasuutari>
I noticed a probably-known implementation inconsistency with Float64Array sorting regarding NaNs: According to spec, any call to Float64Array should canonicalise all NaNs in the TA's viewed buffer since it copies data from the buffer into a list of Values (canonicalising all NaNs here), performs sorting on that list and then writes the sorted items back into the buffer.

On FF, a sort without a comparator seems to sort NaNs according to "absolute value" (uint64) while on Chrome they are left where they were. With a comparator (returning -1 or 1 randomly), on FF they NaNs become canonicalised while on Chrome they get sorted according to the comparator's wishes without canonicalisation.

The spec seems fairly clear to me on this whole issue; canonicalisation happens on every sort call, but the lived reality is different. Should this be accepted, or is this something to file a bug to implementors about (if not already existent)? Or should this be a case where the spec is loosened to allow for implementation defined behaviour?

[04:13:28.0937] <Michael Ficarra>
Aapo Alasuutari: Seems like you should file issues against the implementations. Have you checked the JSC behaviour?

[04:14:03.0830] <Aapo Alasuutari>
Nope, I don't happen to have JSC at my fingertips quite the same as I have FF and Chrome.

[04:20:25.0694] <Aapo Alasuutari>
Okay, non-buggy test code:
```js
b = BigUint64Array.of(9221120237041091055n, 9221120237041090774n);
console.log(b[0], b[1]);
a = new Float64Array(b.buffer);
a.sort();
console.log(b[0], b[1]);
a.sort(() => Math.random() ? -1 : 1);
console.log(b[0], b[1]);
```

[04:25:25.0050] <Aapo Alasuutari>
(I was wrong about FF ordering by "absolute value", that doesn't seem to happen. I must've accidentally sorted the BigUint64Array in one of my tests. Otherwise it all goes as I wrote.)

[04:26:01.0808] <nicolo-ribaudo>
in JSC it logs
```
9221120237041091055n 9221120237041090774n
9221120237041090560n 9221120237041090560n
9221120237041090560n 9221120237041090560n
```

[04:27:37.0141] <nicolo-ribaudo>
Which from your message above seems to be the spec-compliant behavior

[04:28:08.0213] <Aapo Alasuutari>
Yup, that's seems compliant. Ladybird also complies, according to a response I got in their Discord.

[04:28:19.0086] <Aapo Alasuutari>
* Yup, that's seems compliant. Ladybird also complies, based on a response I got in their Discord.

[04:40:32.0066] <Aapo Alasuutari>
https://issues.chromium.org/issues/408932085

[04:48:38.0378] <Aapo Alasuutari>
https://bugzilla.mozilla.org/show_bug.cgi?id=1958820

[08:06:33.0842] <shu>
where's the step that canonicalizes NaNs in sort?

[08:08:23.0856] <shu>
is it your reading that [[Get]] returns the ES NaN, then [[Set]] of that NaN should always produce the same bit pattern in typed arrays?

[08:12:24.0671] <shu>
anyway i think we should fix the spec to reflect reality, and clear up ambiguities in the reading

[08:13:00.0480] <shu>
i don't see a realistic path to get interoperable NaN canonicalization across engines, nor the benefits of doing so

[10:29:03.0409] <ljharb>
we had a whole day of discussion in 2015 about NaN canonicalization. my recollection was that the only time NaNs are canonicalized is when you see one *in JS* - not when a spec-internal operation gets or copies one

[10:30:03.0675] <littledan>
yeah not requiring canonicalization was a pretty explicit decision; I don't understand why we think this doesn't apply to sort

[10:45:31.0261] <annevk>
Not sure if this is what Aapo meant, but when I looked at https://tc39.es/ecma262/#sec-rawbytestonumeric earlier I could interpret that as normalizing NaN values. It checks if value is NaN and then it doesn't return value, but it returns (a canonical?) NaN.

[10:50:36.0540] <littledan>
The current text does imply certain guarantees that aren't actually met in all browsers: "An implementation must always choose the same encoding for each implementation distinguishable NaN value." I would prefer that we adopt Waldemar's proposed alternative semantics, that every time you write a float into a TypedArray, it may have arbitrary undefined NaN bits (which is the previous sentence: "If value is NaN, rawBytes may be set to any implementation chosen IEEE 754-2019 binary64 format NaN encoding. ") https://tc39.es/ecma262/#sec-numerictorawbytes

[10:51:34.0872] <littledan>
the committee was just a little over-optimistic that such regularity would fall out in engines like V8, but it doesn't

[10:51:58.0840] <littledan>
anyway I imagine sort hits this spec path, so it doesn't guarantee canonicalization

[10:53:45.0506] <littledan>
* When you write the JS NaN to a TypedArray, its byte pattern may be arbitrary: which is the previous sentence: "If value is NaN, rawBytes may be set to any implementation chosen IEEE 754-2019 binary64 format NaN encoding. " https://tc39.es/ecma262/#sec-numerictorawbytes

Actually, the text gives some guarantees that aren't actually met in all browsers: "An implementation must always choose the same encoding for each implementation distinguishable NaN value." I would prefer that we adopt Waldemar's proposed alternative, that we just delete that second sentence.

[10:54:04.0265] <littledan>
* When you write the JS NaN to a TypedArray, its byte pattern may be arbitrary: "If value is NaN, rawBytes may be set to any implementation chosen IEEE 754-2019 binary64 format NaN encoding. " https://tc39.es/ecma262/#sec-numerictorawbytes

Actually, the text gives some guarantees that aren't actually met in all browsers: "An implementation must always choose the same encoding for each implementation distinguishable NaN value." I would prefer that we adopt Waldemar's proposed alternative, that we just delete that second sentence.

[13:24:22.0214] <Aapo Alasuutari>
Yeah, I was thinking of [[Get]] and a misread of "The Number Type":
> NaN values of the IEEE Standard are represented in ECMAScript as a single special NaN value.
I had interpreted this to mean that all NaNs must be canonicalised to a single one. Though, the NumericToRawBytes also linked above does indeed say that writing NaN should always choose the same NaN, so I did end up getting it right despite getting it wrong :D

[13:24:29.0171] <Aapo Alasuutari>
* Yeah, I was thinking of \[\[Get\]\] and a misread of "The Number Type":

> NaN values of the IEEE Standard are represented in ECMAScript as a single special NaN value.

I had interpreted this to mean that all NaNs must be canonicalised to a single one. Though, the NumericToRawBytes also linked above does indeed say that writing NaN should always choose the same NaN, so I did end up getting it right despite getting it wrong :D

[13:25:27.0527] <Aapo Alasuutari>
* Yeah, I was thinking of \[\[Get\]\] / RawBytesToNumeric and a misread of "The Number Type":

> NaN values of the IEEE Standard are represented in ECMAScript as a single special NaN value.

I had interpreted this to mean that all NaNs must be canonicalised to a single one. Though, the NumericToRawBytes also linked above does indeed say that writing NaN should always choose the same NaN, so I did end up getting it right despite getting it wrong :D

[13:30:19.0829] <Aapo Alasuutari>
Since spec-wise, sort always performs a fully copy of the buffer data into a list of Values and back after sorting, it'll indeed always pass each entry in the TA through NumericToRawBytes.

[13:30:42.0493] <Aapo Alasuutari>
* Since spec-wise, sort always performs a fully copy of the buffer data into a list of Values and back after sorting, it'll indeed always pass each entry in the TA through RawBytesToNumeric and NumericToRawBytes.

[16:08:03.0267] <akaster>
what's the best way to get this change (PR 2193) on someone's radar? queue it up for an upcoming TC39 meeting? something less formal?

[16:35:37.0267] <bakkot>
that PR is not currently correct and also needs tests

[16:35:46.0448] <bakkot>
so you will need to find a champion willing to do that work

[16:35:50.0520] <bakkot>
thus far no one has stepped forward

[16:35:59.0250] <bakkot>
I personally do not currently have time


2025-04-08
[18:17:16.0380] <littledan>
This would be a great project for a new TC39 delegate to take up, if anyone's looking for something useful to champion

[20:01:25.0814] <rkirsling>
I think my comment in September was meant as a "do y'all want me to carry this over the finish line" but I can't find any context for it in Matrix history, say

[20:01:42.0086] <rkirsling>
and also nobody replied in-thread ðŸ˜…

[09:12:55.0405] <Michael Ficarra>
@rkirsling:matrix.org do it


2025-04-09
[19:34:12.0926] <Abdiel Lopez>
Hi, Iâ€™m new to this community. Iâ€™m curious if there have been any proposals for operator overloading, or what the current thoughts are on it.

[19:41:30.0644] <Andreu Botella>
Hi, operator overloading has been a common topic of conversation, and the current status seems to be that the people working on JS engines consider it unfeasible because it would regress performance

[20:03:17.0014] <Ashley Claymore>
https://github.com/tc39/proposal-operator-overloading

[20:03:29.0160] <Ashley Claymore>
Status: withdrawn

[20:58:04.0828] <jschoi>
It was specifically withdrawn at this plenary; you can read the reasoning here: https://github.com/tc39/notes/blob/main/meetings/2023-11/november-28.md#withdrawing-operator-overloading


[20:58:09.0448] <jschoi>


But, as has been already mentioned, the reason was because many engine implementors say that operator overloading is impossible to do without penalizing the performance of every JavaScript program. It will probably never happen in JavaScript.


2025-04-10
[04:59:46.0151] <Jack Works>
https://github.com/tc39/ecma262/issues/3563

[04:59:58.0332] <Jack Works>
found this when re-implementing RegExp in engine262

[05:36:49.0876] <Seokho Song>
I think between below the  following tests in test262 are contradictory. 

1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js
2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js

And I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.

If it is, I'll open PR soon to test262. correct me if I'm wrong :)

[05:42:29.0159] <Seokho Song>
* I think between below the  following tests in test262 are contradictory.

1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js
2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js

And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - "envRec.\[\[ThisBindingStatus\]\] is uninitialized"  before accessing the property.

If it is, I'll open PR soon to test262. correct me if I'm wrong :)

[05:47:34.0145] <Jack Works>
maybe it's related to https://github.com/tc39/ecma262/pull/2267

[13:18:51.0801] <Mikhail Efanov>
Hey everyone! I had an idea to propose adding a native `deepEqual` to ECMAScript. Iâ€™ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be â€” and whether similar proposals have been made and rejected before?

The main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.

[13:29:46.0292] <bakkot>
the idea is tossed around occasionally. it is a very large problem space; there are many different notions of what it would mean to be "equal". if you want to make the case for it you should give motivating examples for why someone would want to do this (in the browser - things which are mainly useful in tests are not good candidates to add to the language).

[13:30:15.0057] <Michael Ficarra>
we really need a deep equality section in https://github.com/tc39/faq

[13:30:49.0998] <ptomato>
hi, welcome! and thanks for taking the time.

about the idea, I've heard people say that there are many possible semantics for deepEqual which are all valid depending on what your use case is. some are mutually exclusive. not sure how widespread this view is in committee. anyway, as a starting point I'd suggest making sure you've catalogued all the different semantics that people might possibly expect from a deepEqual function and come prepared with arguments why a standardized one should choose one semantic over another.

also see the Composites idea which is on the agenda for the upcoming TC39. there is a `Composite.equal` function which would not exactly be deepEqual, but might cover some of the use cases

[13:37:55.0172] <bakkot>
as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.

there's also
- https://es.discourse.group/t/json-equals-x-y/2019
- https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753

and others I'm sure

[13:39:50.0445] <Mikhail Efanov>
Thanks. I hadn't seen this proposal before. It seems similar â€” two composite objects are almost equal, like in "common" deepEqual logic

[13:41:41.0851] <Michael Ficarra>
also related is [`structuredClone`](https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone) which has made a decision on some of the "deep" questions

[13:45:29.0011] <Chris de Almeida>
also: https://github.com/tc39/proposal-record-tuple#equality

[14:30:01.0131] <littledan>
yes but still, this is different from what you typically want in a test framework, to check whether two *mutable* arrays are (currently) equal. Such a function does not have that same stability property. So probably multiple things need to exist.

[15:06:21.0170] <jschoi>
> <@bakkot:matrix.org> as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.
> 
> there's also
> - https://es.discourse.group/t/json-equals-x-y/2019
> - https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753
> 
> and others I'm sure

Hemanth H.M, ljharb, and I talked about reviving proposal-array-equality a few years ago but none of us have had time. 

[15:14:17.0918] <jschoi>
(Also, there was https://github.com/sebmarkbage/ecmascript-shallow-equal.)

[15:17:17.0470] <jschoi>
* (Also, there was https://github.com/sebmarkbage/ecmascript-shallow-equal, https://es.discourse.group/t/native-deep-clone-algorithm/, and the dormant https://github.com/tc39/ecma262/issues/2555.)

[15:17:27.0239] <jschoi>
* (Also, there were https://github.com/sebmarkbage/ecmascript-shallow-equal, https://es.discourse.group/t/native-deep-clone-algorithm/, and the dormant https://github.com/tc39/ecma262/issues/2555.)

[15:24:16.0059] <jschoi>
Also, I recall someone saying that we probably will never ever be able to add anything to Object.prototype ever again without breaking websites; would that apply to static methods in Object?

[15:24:44.0851] <jschoi>
* Also, I recall someone in the Committee saying once that we probably will never ever be able to add anything to Object.prototype ever again without breaking websites. Does that apply to static methods in Object?

[15:27:27.0440] <shu>
it was more about Array.prototype than Object.prototype

[15:27:30.0022] <shu>
static methods are fine

[15:27:59.0033] <bakkot>
this is also true of Object.prototype to be clear

[15:28:29.0851] <shu>
fair, i would also object to adding stuff to Object.prototype

[15:28:46.0080] <shu>
even if it's web compatible it's guaranteed to be a bugfarm or security thing

[15:46:47.0801] <jschoi>
My feedback is that your proposal looks like a good start. Were I writing this proposal, I would make sure I do three more things: 

0. Search thoroughly for similar official TC39 proposals, like proposal-array-equality, find the meeting notes when they were presented to the Committee in the [meeting notes repository](https://github.com/tc39/notes/), and determine the biggest barriers to them advancing. Other than the lack of time of the champions. If you want to try to revive any proposal you find, feel free to open an issue and start working on the next steps.
1. Search for more prior art of deep equality in JavaScript as practicalâ€”particularly popular deep-equality NPM packages. (Examples of deep equality in other languages also is good, but JavaScript has big differences from all other languages.)
2. Compare the behavior of the prior art (maybe in a table). Do they compare objectsâ€™ enumerated properties, use symbol-based protocols, or do something else?
3. Investigate how real-world codebases use the prior artâ€”particularly popular NPM packages depending on the popular deep-equality NPM packages. I would be especially interested to find out whether those popular dependents on deep-equality packages use deep equality only in testing or for production code. 

For example, if you find that virtual-DOM libraries often use certain types of deep equality in hot loops, that could be a compelling-enough argument to add to the JS engines.

This would all be volunteer work, of course, and we know how thankless volunteer work can be. It must have been a lot of hard work for you already. Thank you for taking the time.


2025-04-11
[20:24:26.0455] <ljharb>
because of null prototypes, imo it would be a bad design to ever add another Object.prototype method, even if web compat wasn't a thing

[21:59:00.0419] <kriskowal>
Thereâ€™s a slightly better adjacent universe where Object.prototype itself is null. (They also have amazing sandwiches.)

[22:01:30.0804] <kriskowal>
If you keep going in that direction, you arrive in another slightly better universe where Object.prototype is void and void === null, then a little farther yet, void == null. This is where the expression _null and void_ comes from. Thereâ€™s no universe where JavaScript only has one bottom. Sad but true.

[07:45:31.0715] <littledan>
don't forget `never`


2025-04-15
[15:09:43.0817] <jschoi>
Re: https://es.discourse.group/t/math-clamp-strawman/1059/22

> I'm an invited expert (it doesn't show up on discourse?)

Is this a bug in the Discourse forumâ€™s configuration?

[15:29:44.0510] <Chris de Almeida>
fixed

[15:37:35.0742] <boneskull>
hi ðŸ‘‹

[15:39:15.0112] <jschoi>
Hello, welcome to the TC39 General Matrix channel. 


2025-04-17
[10:55:14.0626] <Aapo Alasuutari>
Regarding this, I think I figured out another place where `%TypedArray%.prototype.sort` implicitly relies on canonicalisation: if I'm not badly mistaken, the CompareTypedArrayElements AO is designed to invoke the "usual" total ordering for floats (convert to uint64, compare by value), but with the assumption that all NaNs are the usual canonical positive NaNs. If the sentence about canonicalisation is dropped, then the sorting algorithm is no longer the usual total ordering but instead something more custom with presumably a branch for NaNs needed.

[10:59:25.0856] <littledan>
there's "one" NaN value at the JS level, but then when you write it to a TypedArray, it gets the chance to choose a new value. so the de-canonicalization is happening after the code you're talking about.

[10:59:59.0503] <littledan>
the spec is pretty editorially confusing, and we should make that point more clear

[11:00:18.0278] <Aapo Alasuutari>
```js
const b = BigInt64Array.of(-2251795519242240n, -4616189618054758400n, 0n, 4607182418800017408n, 9221120237041090774n);
const a = new Float64Array(b.buffer);
a[3] = 1;
console.log(`${b[0]} ${b[1]} ${b[2]} ${b[3]} ${b[4]}`);
console.log(`${a[0]} ${a[1]} ${a[2]} ${a[3]} ${a[4]}`);
a.sort();
console.log(`${b[0]} ${b[1]} ${b[2]} ${b[3]} ${b[4]}`);
console.log(`${a[0]} ${a[1]} ${a[2]} ${a[3]} ${a[4]}`);
a.sort(() => Math.random() ? -1 : 1);
console.log(`${b[0]} ${b[1]} ${b[2]} ${b[3]} ${b[4]}`);
console.log(`${a[0]} ${a[1]} ${a[2]} ${a[3]} ${a[4]}`);
```

[11:00:27.0535] <Aapo Alasuutari>
* ```js
const b = BigInt64Array.of(-2251795519242240n, -4616189618054758400n, 0n, 4607182418800017408n, 9221120237041090774n);
const a = new Float64Array(b.buffer);
console.log(`${b[0]} ${b[1]} ${b[2]} ${b[3]} ${b[4]}`);
console.log(`${a[0]} ${a[1]} ${a[2]} ${a[3]} ${a[4]}`);
a.sort();
console.log(`${b[0]} ${b[1]} ${b[2]} ${b[3]} ${b[4]}`);
console.log(`${a[0]} ${a[1]} ${a[2]} ${a[3]} ${a[4]}`);
a.sort(() => Math.random() ? -1 : 1);
console.log(`${b[0]} ${b[1]} ${b[2]} ${b[3]} ${b[4]}`);
console.log(`${a[0]} ${a[1]} ${a[2]} ${a[3]} ${a[4]}`);
```

[11:01:05.0037] <shu>
https://tc39.es/ecma262/#sec-comparetypedarrayelements has special casing for NaN, doesn't compare by bit pattern

[11:02:15.0720] <shu>
would more NOTEs help here? i agree the raw bits <> number machinery for TAs can be confusing but i'm not sure how to improve on it atm

[11:02:35.0731] <Aapo Alasuutari>
If you create a Float64Array containing NaNs without ever assigning NaNs into it, you can get to a path where the `sort()` call would be the first place where the NaNs would actually be "observed", and it seems like the CompareTypedArrayElements is designed for engines to be able to use bit pattern comparison as an optimisation there. But that then falls apart if NaN canonicalisation isn't actually done/allowed by the spec.

[11:03:11.0527] <Aapo Alasuutari>
Yeah, it only reads like it was written to be compare-by-bit-pattern-but-we-know-all-nans-are-positive.

[11:03:27.0613] <shu>
"it seems like the CompareTypedArrayElements is designed for engines to be able to use bit pattern comparison as an optimisation there" where do you get that sense from?

[11:05:00.0350] <Aapo Alasuutari>
From the fact that it is entirely equivalent (from my understanding and somewhat limited testing) to a comparison by bit pattern if one makes the assumption that all NaNs are canonicalised or at least positive.

[11:05:17.0503] <shu>
that last bit is pretty important though. you can't make that assumption

[11:05:39.0657] <littledan>
the spec was deliberately written to enable multiple implementation styles. So if you read it and think, "it permits this", you're not wrong, but that's different from requiring it

[11:09:34.0540] <Aapo Alasuutari>
Mm, roger. I keep falling into the mistake of thinking that NaN canonicalisation exists somewhere in the spec :)

[11:16:46.0925] <Aapo Alasuutari>
Except of course for the `NumericToRawBytes` bit where implementations are required to always use the same pattern for NaN, and `sort()` using that AO later when it assigns stuff into the buffer... And since the order of these operations isn't observable, I guess an implementation could freely reorder them, first canonicalise to their chosen positive NaN bit pattern and then run a normal total order comparison.

[11:16:56.0302] <Aapo Alasuutari>
* Except of course for the `NumericToRawBytes` bit where implementations are (currently) required to always use the same pattern for NaN, and `sort()` using that AO later when it assigns stuff into the buffer... And since the order of these operations isn't observable, I guess an implementation could freely reorder them, first canonicalise to their chosen positive NaN bit pattern and then run a normal total order comparison.

[11:17:06.0985] <littledan>
yeah the thing about "it must keep using the same pattern when serializing multiple times" is spec fiction; we should remove it.

[11:22:53.0745] <shu>
could one of you file an editorial issue? :)

[11:26:44.0799] <Aapo Alasuutari>
I at least commented on https://github.com/tc39/ecma262/issues/635 but if you want to, I can also open a new issue or a PR for the change, assuming there's no particular problem with non-delegates doing so.

[11:28:59.0635] <shu>
i meant specifically about "yeah the thing about "it must keep using the same pattern when serializing multiple times" is spec fiction; we should remove it."

[11:33:12.0809] <Aapo Alasuutari>
https://github.com/tc39/ecma262/issues/3567


2025-04-18
[05:54:52.0616] <Aapo Alasuutari>
Regarding https://tc39.es/ecma262/#sec-typedarray-create-same-type there's a marking for user-code on the second step

> 2. Let result be ? TypedArrayCreateFromConstructor(constructor, argumentList).

The constructor is chosen from the intrinsics list, while argumentList comes as a parameter.

If I'm not badly mistaken, this could call user code only if argumentList contained a user-provided iterable value, but at least all of the in-spec call sites always pass in `<< F(len) >>`. Would it thus be correct to change those call sites to not have UC marking on them, since we know statically that they'll enter the 6.c Else branch of TypedArray(...args) with a number that will not call into JavaScript from `ToIndex(firstArgument)`, thus just calling to `AllocateTypedArray` where the only UC would happen from getting `constructor.prototype` which is likewise statically knowable to be the `%TypedArray%.prototype` as that's an unconfigurable, unwritable property.

[07:26:59.0640] <bakkot>
Aapo Alasuutari: as long as it's specified to take a list of ES language values and there's no asserts about only taking numbers, we should leave the UC annotation

[07:27:19.0595] <bakkot>
but we could reasonably change it to take a length instead of a list of ES language values and then drop the annotation


2025-04-20
[09:05:03.0754] <Aapo Alasuutari>
I was referring to calls like `TypedArrayCreateSameType(O, << F(len) >>)`: Is it not acceptable for the spec to "read through" itself and know that these calls cannot trigger UC, although some other `TypedArrayCreateSameType` calls might?

