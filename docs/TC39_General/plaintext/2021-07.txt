2021-07-01

2021-07-02

2021-07-03
[13:23:39.0143] <devsnek>
bakkot: do you know what this means? https://gc.gy/93048818.png

[13:33:08.0363] <jmdyck>
Multiple linebreaks in a <p>?

[13:33:33.0965] <jmdyck>
(See https://github.com/tc39/ecmarkup/issues/226)

[13:36:26.0726] <jmdyck>
 * Multiple linebreaks in a <p>? I.e., an empty line within a <p> element.

[13:48:28.0111] <devsnek>
hmm i don't see any <p>s with linebreaks

[13:48:35.0350] <devsnek>
maybe i'm being dum


2021-07-04
[21:40:43.0289] <bakkot>
devsnek: it's two linebreaks in the the
```
        <td>
          An object that all standard built-in iterator objects indirectly inherit from

          <p><ins>The initial value of the *"prototype"* data property of %Iterator%; i.e., %Iterator.prototype%</ins></p>
        </td>
```
bits

[21:41:04.0597] <bakkot>
ecmarkup ought to give location information; odd that it doesn't

[21:42:09.0955] <bakkot>
seems to be because it's in a table, though I don't know why that should prevent it from giving location information

[21:42:31.0099] <bakkot>
oh, no, I do know why

[21:42:32.0383] <bakkot>
sigh

[21:59:55.0512] <bakkot>
https://github.com/tc39/ecmarkup/pull/329 has a fix so that ecmarkup will properly give location information for this case

[22:00:24.0543] <bakkot>
anyway the actual fix is to delete one of the linebreaks in the above snippet, and the same in the other place that happens

[22:00:34.0218] <bakkot>
ecmarkdown is sensitive about multiple consecutive linebreaks, for some reason


2021-07-05
[17:53:11.0613] <DerekNonGeneric>
what a weird snippet!

[17:53:44.0431] <DerekNonGeneric>
is that ecmarkdown?

[17:54:09.0946] <bakkot>
it's HTML

[17:54:45.0099] <DerekNonGeneric>
hmm, i know markdowns accepts html

[17:55:28.0880] <DerekNonGeneric>
so, ecmarkdown must be a custom markdown format

[17:55:43.0046] <DerekNonGeneric>
i have never used it

[17:56:42.0593] <bakkot>
ecmarkdown is used by ecmarkup in the process of rendering the specification to HTML

[17:56:56.0515] <DerekNonGeneric>
i figured

[17:58:31.0879] <DerekNonGeneric>
is it based on markdown? Going to have to read up on this

[17:58:47.0857] <bakkot>
vaguely, yes

[19:08:12.0142] <DerekNonGeneric>
* hmm, i know Markdown accepts html


2021-07-06

2021-07-07

2021-07-08
[20:26:21.0908] <DerekNonGeneric>
bakkot: there is no example for `emu-eqn` https://tc39.es/ecmarkup/#emu-eqn

[20:34:24.0955] <jmdyck>
Well, it does point to examples in the ES spec.

[20:36:04.0730] <DerekNonGeneric>
yeah, i guess that's ok

[20:36:31.0469] <DerekNonGeneric>
makes me load an enormous document, but ok lol


2021-07-09

2021-07-10
[10:00:21.0312] <ljharb>
loads fast everywhere but chrome :-p


2021-07-11
[13:14:37.0156] <DerekNonGeneric>
ljharb: im not attending next meeting and you are partially to blame

[13:28:42.0658] <DerekNonGeneric>
more accurately: i had some plans come up, so im going to fight about it

[13:37:12.0191] <DerekNonGeneric>
 * more accurately: i had some plans come up, so im not going to fight about it

[14:43:09.0088] <DerekNonGeneric>
- 13th: unavailable all day
- 14th: doubt i will feel up to going to that
- 15th: we'll see what happens


2021-07-12
[21:16:21.0698] <ljharb>
DerekNonGeneric lol how am i to blame?

[21:17:19.0320] <ryzokuken>
I feel that it's likely that the meeting will finish on the 14th or the 15th at the latest...

[21:18:23.0934] <ryzokuken>
but yeah, probably a two-day meeting this time.

[21:36:04.0261] <DerekNonGeneric>
/me is in pacifist mode

[03:42:00.0960] <littledan>
> <@dereknongeneric:mozilla.org> ljharb: im not attending next meeting and you are partially to blame

I'm confused; are you a delegate or invited expert?

[03:56:54.0084] <Jack Works>
What happened 👀

[10:43:00.0200] <DerekNonGeneric>
this thing isn't even happening, so im not mad or anything

[12:14:05.0686] <DerekNonGeneric>
> <@dehrenberg:igalia.com> I'm confused; are you a delegate or invited expert?

you can put me down as an IU delegate

[12:14:45.0540] <DerekNonGeneric>
> <@jackworks:matrix.org> What happened 👀

not exactly sure tbh

[12:19:48.0360] <littledan>
DerekNonGeneric: Our typical process is that the person running the organization's Ecma membership should enroll you by filing an issue at https://github.com/tc39/Admin-and-Business/issues . I don't see an issue there yet; I suggest you get in touch with the appropriate person in IU.

[12:20:49.0426] <DerekNonGeneric>
littledan: we started a thread about this in IRC (facility now blocked) -- the man is very busy, so i don't want to impose

[12:20:50.0810] <littledan>
 * DerekNonGeneric: Our typical process is that a person involved in the organization's Ecma membership should enroll you by filing an issue at https://github.com/tc39/Admin-and-Business/issues . I don't see an issue there yet; I suggest you get in touch with the appropriate person in IU.

[12:21:53.0807] <littledan>
hmm, maybe you could convince him to explicitly delegate to someone else, but anyway, I'm just speculating, and this is all up to the chairs.

[12:22:36.0583] <littledan>
(we're busy too!)

[13:32:37.0021] <DerekNonGeneric>
sent him an email from my student account


2021-07-13
[18:07:21.0348] <HE Shi-Jun>
It seems I don't have permission in TC39-delegate room 😂

[18:45:57.0071] <jmdyck>
ryzokuken: See https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON for one explanation of why there are multiple JSON standards.

[18:47:01.0594] <ryzokuken>
thanks jmdyck 

[23:42:55.0592] <sideshowbarker>
is https://wiki.ecmascript.org still active?

[23:43:23.0578] <sideshowbarker>
response to https://wiki.ecmascript.org/doku.php?id=harmony:proxies just timing out

[00:02:07.0223] <DerekNonGeneric>
nope, i don't have details, but that is not a tc39 web property

[03:46:21.0862] <littledan>
So, that ES wiki is definitely a site created by TC39, but it is indeed down, and we access it through, umm, internet archive

[07:50:52.0449] <DerekNonGeneric>
littledan  we should link to it from the site then (eventually)

[08:04:16.0081] <littledan>
Well, it's more of a historical archive

[08:04:34.0454] <littledan>
Not all pieces of TC39 history are linked from the site

[08:04:44.0151] <littledan>
The main priority IMO is to archive it well 

[10:06:39.0718] <ljharb>
jmdyck not sure if you saw my reply on https://github.com/tc39/ecma262/pull/2125#discussion_r668431272 - it'd really help to get a concrete suggestion to get this over the line :-)

[10:08:01.0853] <jmdyck>
Nope, I've been busy all day so far.

[10:10:03.0411] <jmdyck>
Will do something now.

[10:10:14.0648] <ljharb>
yay, thanks :-) not a huge rush ofc, just trying to get it done

[10:10:24.0896] <jmdyck>
np

[10:54:45.0743] <jmdyck>
Done.

[11:18:39.0672] <ljharb>
jmdyck: thanks! updated :-)


2021-07-14
[19:20:59.0393] <dcrousso>
how does one get access to TC39 Delegates?

[19:21:53.0236] <shu>
one of the admins need to change your access level so you can talk

[23:22:10.0001] <Hemanth H.M>
Aki: World's first make-your-own KitKat shop opening in Tokyo! :D 

[23:22:25.0779] <ljharb>
ooh

[23:34:12.0702] <Aki>
shut up

[03:50:30.0735] <DerekNonGeneric>
this is interesting... according to a user by the name of munrocket,
there seems to be a definition for stage `-1` proposals?

>  **Stage -1** is actually idea thread in discourse.
> Seems that I created topic in a wrong section there.

source: https://github.com/tc39/proposals/pull/362#issuecomment-871434628


[03:54:52.0725] <DerekNonGeneric>
the process document (https://tc39.es/process-document/) is silent on the matter and i have personally been curious about this myself since the proposal template also suggests that there is a stage -1 (https://github.com/tc39/template-for-proposals/blob/main/spec.emu) /cc yulia maybe knows?

[09:01:50.0782] <ljharb>
DerekNonGeneric: "stage -1" is just a conventional way to refer to ideas that aren't actually an official proposal

[09:04:12.0117] <DerekNonGeneric>
ljharb, is that the same thing as "spec fiction" then?

[09:04:44.0275] <devsnek>
spec fiction is something in the spec that no implementation has

[09:08:45.0937] <ljharb>
"stage -1" is just a convenient way to describe a proposal idea seeking a champion, since without a champion it's not actually a proposal

[09:09:18.0891] <devsnek>
technically without consensus for stage 1 it's not a proposal

[09:09:27.0827] <devsnek>
or with consensus for stages 2-4

[09:10:03.0316] <ljharb>
that's not true. technically there are no entry requirements for stage 0

[09:10:21.0414] <devsnek>
ye i was making a joke about stage 1 being called "Proposal"

[09:10:34.0375] <ljharb>
but since that technically means EVERYTHING is already a stage 0 proposal, we've always treated it as "it's not stage 0 til a champion has it on an agenda"

[09:29:43.0860] <DerekNonGeneric>
> <@devsnek:matrix.org> spec fiction is something in the spec that no implementation has

this seems to be a pretty accurate description from what i can tell elsewhere...

> times, if browser makers refuse to implement a platform feature,
>  there's no point having it in the spec; the spec would be fiction.

source: https://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-August/063981.html


[09:30:39.0223] <DerekNonGeneric>
thanks much!

[09:35:29.0830] <DerekNonGeneric>
/me thinking about how to distill this -1 info into a PR to the stage table in the process document

[09:37:51.0609] <ljharb>
i do not think it belongs there.

[09:37:56.0837] <ljharb>
it's just a community convention.

[09:38:48.0832] <DerekNonGeneric>
hmm, maybe a small note in the table caption would be enough

[09:43:13.0728] <ljharb>
even that would give it more officialness than it deserves, i think

[09:45:22.0239] <DerekNonGeneric>
if we had that wiki up and running, an entry there would be nice


2021-07-15
[17:27:32.0801] <devsnek>
I think for future large changes like class fields it would be nice to split them into multiple commits 

[17:44:56.0898] <bakkot>
it's certainly nicer that way, but it's often a great deal of work

[17:45:34.0203] <bakkot>
I'd be open to doing it if it's something many people would get a lot of benefit from

[17:47:24.0171] <devsnek>
i can't speak for anyone else but i would certainly benefit from it

[18:18:52.0904] <littledan>
We did a bunch of work to maintain them separately for a while across rebases but it was ultimately merged

[18:19:03.0196] <littledan>
It would help to know why anyone would benefit

[18:19:37.0800] <littledan>
Engines did not end up slicing up shipping based on the proposal split

[18:20:01.0011] <devsnek>
oh i don't mean by the individual field types

[18:20:21.0401] <littledan>
The state of the language with the different subsets is well-documented; it wasn't clear to me what multiple commits would give us

[18:20:23.0016] <devsnek>
i mean like, there is a lot of refactoring across various things that happened to enable "class fields" in the general sense

[18:21:01.0817] <littledan>
OK, well, it sounds like you're asking for an even more involved factoring then

[18:21:05.0617] <devsnek>
going over thousands of lines of diff to understand what changed is a very difficult way to figure it out

[18:21:19.0392] <littledan>
I dunno, I am happy to answer questions

[18:22:33.0268] <littledan>
But basically no existing semantics changed, only new things were added

[18:25:02.0436] <ljharb>
i'm hearing gus' request as, smaller git commits so that one can choose to look at smaller chunks of conceptual additions at a time. which is definitely a difficult ask, and on class fields in particular would have likely been exceedingly difficult since it was the combining of three repos

[18:25:09.0591] <ljharb>
 * i'm hearing gus' request as, smaller git commits so that one can choose to look at smaller chunks of conceptual additions at a time. which is definitely a difficult ask (but a nice to have), and on class fields in particular would have likely been exceedingly difficult since it was the combining of three repos

[18:26:24.0063] <devsnek>
yeah for example, moving classes from methods to fields, without adding all the new field kinds, might have been one step, idk

[18:26:32.0385] <devsnek>
i don't think it matters too much, the past is the past

[18:37:56.0842] <bakkot>
yeah, to be clear, it would definitely be an after-all-other-work-is-done refactoring

[18:38:12.0142] <bakkot>
which is pretty common for this type of thing, it's just a bunch of work

[18:39:53.0734] <ljharb>
in my experience it actually makes it much easier if you start out keeping commits separate, and keep followup changes split into separate commits that point to the ones they should be squashed into later - but it's definitely not a natural way of working with git for many

[18:42:44.0507] <devsnek>
`git rerere` can help a lot with allowing more commits

[18:42:48.0120] <devsnek>
for annoying rebases

[18:47:14.0652] <bakkot>
ljharb: if you do the work in a way where that works, yeah

[18:47:25.0715] <bakkot>
often there's a big refactor that happens across code touched by many commits, so often you kind of need to come up with the story you're going to tell once you have everything created

[18:47:32.0032] <bakkot>
which is probably what I would have done for class fields

[18:47:37.0828] <ljharb>
very fair point

[20:24:28.0040] <littledan>
If someone wants to contribute this history refactoring, we can probably find time in Igalia to review it, but we don't plan to spend time writing it ourselves.

[20:25:31.0773] <ljharb>
we wouldn't change the commits that have landed - it's more something to think about for future large PRs, i think

[20:32:49.0652] <bakkot>
yeah

[20:32:55.0410] <bakkot>
also probably would be something the editors would take on

[20:35:13.0999] <devsnek>
yes i don't think we should rewrite the history

[20:35:28.0375] <devsnek>
i was just saying it should be something to think about in the future

[12:07:46.0422] <devsnek>
has anyone ever proposed filter map

[16:30:15.0381] <ljharb>
wouldn't that be `.flatMap(x => predicate(x) ? [x] : [])`?

[16:30:55.0819] <ljharb>
 * wouldn't that be `.flatMap(x => predicate(x) ? [mapper(x)] : [])`?

[16:31:11.0976] <ljharb>
 * wouldn't that be `.flatMap((...args) => predicate(...args) ? [mapper(...args)] : [])`?


2021-07-16
[19:31:34.0259] <Richard Gibson>
sure, but in the same sense as flatMap itself is `.reduce((out, ...args) => out.concat(mapper(...args)), [])`

[02:48:30.0542] <Andreu Botella (he/they)>
Hi! I just noticed that `Atomics.multiply()` isn't a thing. Is that because for all other operations you don't need to know whether the type is signed or unsigned but for multiplication you do?

[11:19:19.0566] <Domenic>
What objects in 262 use option bags?

[11:19:31.0739] <Domenic>
I am investigating whether error.cause's HasProperty + Get pattern is standard or unusual

[11:22:02.0785] <bakkot>
262 itself does not tend to use object bags much, though that's changing. 402 uses them more and just does Get, IIRC

[11:22:48.0119] <bakkot>
I think we are in generally in favor of just doing Get; I argued for error.cause to be a special case because, unusually, `undefined` is a value one might reasonably want to use

[11:23:08.0402] <bakkot>
In cases where `undefined` is not an expected value there's no particularly reason to do a Has check first

[11:23:23.0387] <Domenic>
Hmm

[11:23:38.0003] <Domenic>
I do not like distinguishing between undefined and not-present in the options bag

[11:23:42.0788] <Domenic>
As well as on the object itself

[11:24:07.0483] <Domenic>
I feel like if you really want to split hairs there you should use error.cause === undefined vs. error.cause === null, instead of testing 'cause' in error

[11:24:50.0820] <bakkot>
The problem is that the error values are generally being handed to you, not a thing you are given yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`

[11:25:05.0056] <bakkot>
 * The problem is that the error values are generally being handed to you, not a thing you are creating yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`

[11:26:34.0734] <Domenic>
Sure

[11:27:16.0364] <Domenic>
But I don't understand why that means it's important that `'cause' in new Error('message')` is false whereas `'cause' in new Error('message', { cause: undefined })` is true.

[11:28:39.0587] <bakkot>
Ah, this was on the assumption that there would not be a `cause` property if you didn't pass the options bag at all

[11:28:59.0481] <bakkot>
that is, I think it's important that `'cause' in new Error('message', { cause: undefined })`, since you are explicitly asking to create an error with a `cause`

[11:29:30.0487] <bakkot>
I don't know if I have an opinion about whether `'cause' in new Error('message')` should also be true

[11:30:05.0555] <bakkot>
but I do think `'cause' in new Error('message')` should match `'cause' in new Error('message', {})`

[11:30:14.0951] <Domenic>
My opinion is it should also be true

[11:30:28.0999] <Domenic>
I.e. we should not branch behavior on {} vs. { cause: undefined }

[11:31:11.0037] <Domenic>
Filed https://github.com/tc39/proposal-error-cause/issues/35

[11:36:31.0599] <bakkot>
Mind, it's already stage 3, so I don't know how much appetite there will be for this sort of change

[11:56:32.0933] <shu>
it's also already shipping

[11:56:38.0481] <shu>
well, almost, coming up in chrome 93

[12:01:42.0585] <justingrant>
> What objects in 262 use option bags?

Temporal uses options bags in almost every method that takes parameters. If we're using them incorrectly or inconsistently, let us know!


[12:18:24.0788] <Domenic>
My intent was for this to be "implementer feedback" as we work to spec/implement structured clone for it

[12:25:25.0477] <shu>
i was chatting with marja on the V8 team about just this the other day, on whether we should unify option bag handling to be Get for Error cause

[12:26:21.0620] <shu>
my conclusion was that "just a Get" should be the default behavior for option bags, but once in a while a specific use case arises that requires special casing with a Has, like Error cause has with wanting to capture undefined/falsy values, which can be thrown

[12:26:54.0854] <shu>
wait, is that what's being discussed here, i might've skimmed it too fast

[12:42:27.0299] <Domenic>
Pretty much yeah. I just think we shouldn't distinguish because { cause: undefined } and {}

[12:49:58.0552] <justingrant>
From a documentation standpoint, does `{ cause: null }` mean "I am filling `cause` but I don't know what the cause was" as opposed to `{ cause: undefined }` which means "I didn't fill in a `cause`"?

[12:57:08.0701] <shu>
are you asking about the status quo or domenic's suggestion?

[12:57:33.0130] <shu>
the status quo is `cause`, if present at all, is honored, since you can `throw undefined;` and maybe you want to capture that in the `cause`

[13:27:07.0150] <Richard Gibson>
it seems hostile to future options for `new Error(message, {})` to create a `cause` property that would not be present on the result of `new Error(message)`

[13:29:52.0290] <justingrant>
Got it. TIL that `throw undefined` was a thing. 🤷‍♂️ Just when I thought I knew all the weird parts of ECMAScript, it turns out there's always something weirder!

[13:39:37.0203] <bakkot>
Richard Gibson: I believe the proposal is for `new Error(message)` to also have a `cause` property

[13:40:10.0029] <bakkot>
per https://github.com/tc39/proposal-error-cause/issues/35 + https://github.com/tc39/proposal-error-cause/issues/36

[14:03:51.0475] <Domenic>
Indeed, the idea is that, like everywhere is that I'm aware of in the ES spec ecosystem and web platform, omitting the options object is treated the same as the empty options object which is treated the same as the options object with a bunch of undefineds for each option.

[14:06:23.0390] <bakkot>
Are there any other options bags for which `undefined` is a value one might end up explicitly supplying as the value of some option?

[14:06:31.0616] <bakkot>
none in ES including 402, afaik

[14:08:53.0429] <justingrant>
None in Temporal, AFAIK

[16:02:49.0807] <littledan>
WebIDL dictionaries make it impossible to tell the difference


2021-07-17
[19:06:18.0869] <devsnek>
is MethodDefinitionEvaluation of AsyncMethod and AsyncGeneratorMethod not supposed to handle private names?

[19:06:25.0535] <devsnek>
the other two do

[19:07:27.0594] <devsnek>
oh nvm i missed that its calling DefineMethodProperty instead of DefinePropertyOrThrow

[21:57:11.0097] <devsnek>
i don't think the default base constructor sets up private fields correctly

[21:57:30.0275] <devsnek>
i think it is missing a call to InitializeInstanceElements

[22:04:46.0856] <devsnek>
https://github.com/tc39/ecma262/pull/2462

[22:20:38.0380] <bakkot>
yup

[22:20:41.0163] <bakkot>
all fields, not just private

[22:21:06.0141] <bakkot>
the fact that the spec differentiates built-in and ecmascript function objects is dumb

[22:21:11.0445] <bakkot>
I wonder if we can fix that

[22:45:11.0122] <devsnek>
why do all the new abstract ops take the property before the target object

[22:45:14.0923] <devsnek>
this is driving me nuts

[22:46:00.0330] <bakkot>
e.g.?

[22:46:14.0070] <devsnek>
DefineMethodProperty(propkey, object, ...)

[22:46:17.0364] <devsnek>
PrivateGet(P, O)

[22:46:21.0722] <devsnek>
 * PrivateGet(P, O)

[22:46:22.0167] <devsnek>
etc

[22:47:03.0605] <bakkot>
uhhhh yeah that's super weird

[22:47:05.0670] <bakkot>
no idea

[22:47:26.0241] <devsnek>
lol

[22:48:03.0077] <bakkot>
PRs welcome

[22:48:17.0179] <bakkot>
I'll do it sometime this weekend if you don't

[22:48:33.0776] <devsnek>
we'll see where my motivation is

[22:53:35.0054] <devsnek>
hmmm

[22:53:52.0074] <devsnek>
MethodDefinitionEvaluation is duplicating calls to SetFunctionName

[22:54:03.0224] <devsnek>
that fails an assert

[22:54:25.0984] <devsnek>
ignoring the assert it probably breaks those changes to keep function property ordering consistent

[22:55:43.0616] <bakkot>
Which two steps do SetFunctionName?

[22:55:51.0837] <devsnek>
RS itself calls it

[22:55:58.0654] <devsnek>
and then it calls DefineMethodProperty

[22:56:00.0751] <devsnek>
which calls it again

[22:57:47.0990] <bakkot>
ah, just in the generator and async generator cases, yes?

[22:59:01.0557] <devsnek>
ye

[23:02:30.0390] <bakkot>
why do generators and async generators have `.prototype`s anyway

[23:03:11.0240] <devsnek>
cuz they create instances

[23:03:26.0513] <devsnek>
i think there's a flow chart in the spec :P

[23:05:32.0006] <bakkot>
oh god I did not realize that that the instances returned by invoking a `function* f() {}` inherit from `f.prototype`

[23:05:38.0823] <bakkot>
I wonder if anyone is using that for anything

[23:05:46.0981] <bakkot>
seems like kind of an odd thing to want

[23:08:07.0531] <devsnek>
oh man private fields have so many early errors this is gonna take forever

[23:16:54.0593] <bakkot>
fix for the SetFunctionName bug in https://github.com/tc39/ecma262/pull/2463

[23:27:03.0243] <devsnek>
nice

[23:27:29.0726] <devsnek>
why is it a syntax error to do `class { get #f() {} static set #f() {} }`

[23:28:09.0790] <devsnek>
 * why is it a syntax error to do `class { get #f() {} static set #f(v) {} }`

[23:29:01.0578] <bakkot>
same reason it's a syntax error to do `(class { #f; static #f; })`, presumably

[23:29:22.0787] <bakkot>
you can make a private name for use on instances or for use on the class, not the same name for both

[23:32:01.0112] <devsnek>
idk it seems well defined to me

[23:32:18.0122] <devsnek>
 * idk it seems it could be well defined to me

[23:33:42.0660] <bakkot>
lotta things could be

[23:33:58.0861] <bakkot>
see previous discussion in at least https://github.com/tc39/proposal-static-class-features/issues/47

[23:34:50.0246] <bakkot>
also https://github.com/tc39/proposal-class-fields/issues/256#issuecomment-511213911

[23:48:10.0288] <devsnek>
[[PrivateMethods]] and [[Fields]] are not initialized for normal functions

[23:48:20.0779] <devsnek>
so calling InitializeInstanceFields fails there

[23:49:14.0156] <devsnek>
maybe OrdinaryFunctionCreate is a good place to set those to new empty lists?

[00:05:47.0353] <bakkot>
I think I'd prefer to either have [[ConstructorKind]] differentiate between `class`-based ctors and non-, or have InitializeInstanceElements guard on the existence of each slot before reading it

[00:06:26.0680] <bakkot>
though, I guess we do say in table 33 that all ES functions have those fields

[00:08:50.0544] <bakkot>
oh, or we could guard on [[IsClassConstructor]]

[00:09:19.0581] <bakkot>
but given that we do say every function has those two, probably having OrdinaryFunctionCreate initialize them to empty is correct, yeah

[00:26:39.0009] <devsnek>
i don't think test262 has a test for `'use strict'; delete x` applying recursively, like `'use strict'; delete ((x))`

[06:19:03.0259] <jmdyck>
bakkot: "the fact that the spec differentiates built-in and ecmascript function objects is dumb" Why is that distinction relevant to 2462?

[06:41:11.0903] <HE Shi-Jun>
> <@bakkot:matrix.org> oh god I did not realize that that the instances returned by invoking a `function* f() {}` inherit from `f.prototype`

This could be useful in the future --- when we have function decorators :) 

[08:02:52.0822] <bakkot>
jmdyck: because InitializeInstanceElements was already invoked by the [[Construct]] method of ES functions, just not the [[Construct]] method of built-in functions

[08:18:42.0447] <devsnek>
dang this early error for arguments is especially weird

[08:23:57.0269] <jmdyck>
Hm. So for an ordinary built-in constructor, IIE is called from ordinary [[Construct]], but for exotic built-in constructor, exotic [[Construct]] doesn't/can't call IIE, so IIE must be called from the `_behaviour_` supplied to CreateBuiltinFunction?

[08:25:50.0531] <devsnek>
`class X { #y; foo() { eval('this.#y') } }`

[08:25:59.0129] <devsnek>
how does the `#y` existing get piped into eval

[08:26:28.0024] <bakkot>
jmdyck: correct (for base constructors)

[08:29:17.0773] <bakkot>
devsnek: EvalDeclarationInstantiation step 6/7

[08:29:35.0849] <devsnek>
oh i mean

[08:29:37.0962] <devsnek>
during parsing

[08:30:06.0553] <bakkot>
the rule is not applied during parsing

[08:30:18.0966] <devsnek>
wdym

[08:30:23.0023] <bakkot>
see the last item in https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#sec-scripts-static-semantics-early-errors

[08:30:34.0413] <devsnek>
man

[08:30:52.0748] <devsnek>
ok so if eval, turn off private name validation

[08:31:08.0497] <bakkot>
well, that's how it's specified, yes

[08:31:20.0902] <bakkot>
same as for validation of `super` and `new.target`

[08:31:45.0449] <bakkot>
in practice, you'd just find the names before parsing and provide them to the parser

[08:32:07.0943] <devsnek>
uh

[08:32:35.0797] <devsnek>
oh you mean like as an optimization to skip having to actually evaluate?

[08:33:25.0024] <bakkot>
more as a matter of how parsers are implemented; they usually validate as they go, rather than after the fact

[08:33:29.0259] <bakkot>
but either way works

[08:33:37.0342] <bakkot>
I guess plausibly they'd keep a list of names that escape

[08:34:00.0327] <bakkot>
and return that, and do the validation just after parsing by comparing that list to the list of names available in the surrounding context

[08:34:11.0294] <devsnek>
when i press alt+1, to switch to my first browser tab

[08:34:18.0371] <jmdyck>
bakkot: So then if an implementation chooses to implement a built-in constructor as an ordinary function constructor, it has to 'ignore' the call to IIE in `_behaviour_`, because the ordinary [[Construct]] will call it.

[08:34:19.0643] <devsnek>
the multipage spec navigates to #sec-ecmascript-function-objects

[08:36:08.0429] <bakkot>
jmdyck: I suppose, yes

[08:36:51.0781] <bakkot>
at the very least, if we keep the distinction between the two, we really need to remove the bit that says you can implement built-in functions as ES functions

[08:37:06.0895] <bakkot>
it's already allowed by the as-if rule, the spec shouldn't have to care

[08:37:32.0079] <bakkot>
devsnek: it's navigating to your first pin, I think

[08:37:34.0373] <bakkot>
multipage or not

[08:37:57.0448] <devsnek>
ah

[08:38:01.0784] <devsnek>
i didn't realized that was pinned

[08:38:13.0254] <devsnek>
is that just firefox not capturing its own tab navigation event 

[08:38:18.0527] <bakkot>
presumably

[08:38:24.0678] <devsnek>
😔

[08:39:35.0055] <devsnek>
so with this set

[08:39:39.0584] <devsnek>
 * so with this eval rule

[08:39:47.0953] <devsnek>
what handles the private field not existing at runtime

[08:40:28.0110] <bakkot>
EvalDeclarationInstantiation step 6/7

[08:40:44.0037] <jmdyck>
bakkot: Isn't it observable whether a built-in is ordinary or exotic? 

[08:40:52.0369] <devsnek>
ah

[08:40:59.0329] <bakkot>
jmdyck: uhhh I hope not

[08:41:12.0950] <jmdyck>
ok, maybe i'm misremembering

[08:41:26.0901] <bakkot>
It's entirely possible, there's some weird corners here

[08:41:28.0710] <bakkot>
but I hope not

[08:51:27.0511] <devsnek>
i think it used to be

[08:51:36.0258] <devsnek>
but someone changed that

[08:52:00.0988] <devsnek>
i recall a presentation discussing if builtins should appear to have been strict or not

[08:52:43.0580] <jmdyck>
if a built-in is ordinary, it's required to be strict

[08:54:44.0941] <jmdyck>
But couldn't an implementation say, it's exotic, but it happens to present like a non-strict ordinary?

[08:59:45.0124] <jmdyck>
What's the intended normative  effect of requiring ordinary built-ins to be strict?

[09:00:58.0325] <devsnek>
under 200 tests failing :O

[09:01:16.0160] <jmdyck>
Presumably we don't have tests for this, because the test doesn't know how the implementation has implemented a given built-in.

[09:02:34.0583] <devsnek>
are there properties a function can't have in strict mode

[09:02:40.0292] <devsnek>
like caller or callee or something weird like that

[09:09:50.0582] <jmdyck>
Annex C says "An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named "caller" or "arguments" of function instances."

[09:10:31.0689] <bakkot>
yeah, but "Built-in functions ... also must not be created with such own properties"

[09:10:50.0885] <bakkot>
IIRC the strictness thing was to do with whether `this` was undefined or the global

[09:11:07.0874] <bakkot>
I will try to track it down

[09:14:27.0692] <jmdyck>
It looks like the sentence "Built-in functions that are ECMAScript function objects must be strict..." was added in wd20 of ES6.

[09:15:42.0368] <jmdyck>
(Sept/Oct 2013)

[09:19:45.0947] <bakkot>
I am having no lucking finding it

[09:19:50.0912] <bakkot>
but the `this` thing is at least plausible

[09:20:18.0220] <bakkot>
a lot of builtins operate on their `this`, and it makes sense to say that if you pull those off their containing object and invoke them directly they should not be operating on the global

[09:22:21.0485] <jmdyck>
The change-notes for rev 20 say "Elaborated in 9.3 that built-in functions can be implemented as either ECMAScript functions or as implementation defined exotic functions." but they don't mention the strictness thing. It might be in one of the many bugs that rev20 fixed.

[09:23:45.0884] <Jack Works>
That's... a familiar topic

[09:28:25.0307] <Jack Works>
I presented on Feb 2020 about to make all implementation defined functions in strict mode

[09:30:00.0560] <jmdyck>
For what normative effect?

[09:30:28.0338] <Jack Works>
No progress since then. Maybe I should open a PR

[09:30:41.0747] <bakkot>
https://github.com/tc39/notes/blob/master/meetings/2020-02/february-5.md#legacy-reflection-features-for-functions-in-javascript-for-stage-1

[09:30:54.0215] <jmdyck>
No, I mean, what would have been the normative effect?

[09:35:19.0586] <Jack Works>
Back to time that was presented, Chakra (Classic edge) leaks native function (according to spec, strict function are not allowed to be leaked) in loose mode. Is that a normative effect? 

[10:42:10.0794] <jmdyck>
What does "leak" mean?

[10:59:33.0461] <bakkot>
In this context, I'm pretty sure it means "appear as the `.caller` of a sloppy function"

[10:59:49.0252] <bakkot>
as in `function f(){ console.log(f.caller); } function g(){ f(); } g()`

[11:00:10.0104] <bakkot>
note the change if you put `'use strict'` in `g`

[11:01:20.0521] <bakkot>
see the third slide in https://github.com/tc39/agendas/blob/master/2020/02_talk_codiy-dot-caller.pdf

[11:11:15.0646] <devsnek>
am i crazy or are class field tests like 1/10th of all test262 tests

[11:32:24.0816] <justingrant>
Just wait until Temporal lands. 2700 tests and lots more to come.

