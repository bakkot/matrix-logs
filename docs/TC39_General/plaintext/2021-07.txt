2021-07-01

2021-07-02

2021-07-03
[13:23:39.0143] <devsnek>
bakkot: do you know what this means? https://gc.gy/93048818.png

[13:33:08.0363] <jmdyck>
Multiple linebreaks in a <p>?

[13:33:33.0965] <jmdyck>
(See https://github.com/tc39/ecmarkup/issues/226)

[13:36:26.0726] <jmdyck>
 * Multiple linebreaks in a <p>? I.e., an empty line within a <p> element.

[13:48:28.0111] <devsnek>
hmm i don't see any <p>s with linebreaks

[13:48:35.0350] <devsnek>
maybe i'm being dum


2021-07-04
[21:40:43.0289] <bakkot>
devsnek: it's two linebreaks in the the
```
        <td>
          An object that all standard built-in iterator objects indirectly inherit from

          <p><ins>The initial value of the *"prototype"* data property of %Iterator%; i.e., %Iterator.prototype%</ins></p>
        </td>
```
bits

[21:41:04.0597] <bakkot>
ecmarkup ought to give location information; odd that it doesn't

[21:42:09.0955] <bakkot>
seems to be because it's in a table, though I don't know why that should prevent it from giving location information

[21:42:31.0099] <bakkot>
oh, no, I do know why

[21:42:32.0383] <bakkot>
sigh

[21:59:55.0512] <bakkot>
https://github.com/tc39/ecmarkup/pull/329 has a fix so that ecmarkup will properly give location information for this case

[22:00:24.0543] <bakkot>
anyway the actual fix is to delete one of the linebreaks in the above snippet, and the same in the other place that happens

[22:00:34.0218] <bakkot>
ecmarkdown is sensitive about multiple consecutive linebreaks, for some reason


2021-07-05
[17:53:11.0613] <DerekNonGeneric>
what a weird snippet!

[17:53:44.0431] <DerekNonGeneric>
is that ecmarkdown?

[17:54:09.0946] <bakkot>
it's HTML

[17:54:45.0099] <DerekNonGeneric>
hmm, i know markdowns accepts html

[17:55:28.0880] <DerekNonGeneric>
so, ecmarkdown must be a custom markdown format

[17:55:43.0046] <DerekNonGeneric>
i have never used it

[17:56:42.0593] <bakkot>
ecmarkdown is used by ecmarkup in the process of rendering the specification to HTML

[17:56:56.0515] <DerekNonGeneric>
i figured

[17:58:31.0879] <DerekNonGeneric>
is it based on markdown? Going to have to read up on this

[17:58:47.0857] <bakkot>
vaguely, yes

[19:08:12.0142] <DerekNonGeneric>
* hmm, i know Markdown accepts html


2021-07-06

2021-07-07

2021-07-08
[20:26:21.0908] <DerekNonGeneric>
bakkot: there is no example for `emu-eqn` https://tc39.es/ecmarkup/#emu-eqn

[20:34:24.0955] <jmdyck>
Well, it does point to examples in the ES spec.

[20:36:04.0730] <DerekNonGeneric>
yeah, i guess that's ok

[20:36:31.0469] <DerekNonGeneric>
makes me load an enormous document, but ok lol


2021-07-09

2021-07-10
[10:00:21.0312] <ljharb>
loads fast everywhere but chrome :-p


2021-07-11
[13:14:37.0156] <DerekNonGeneric>
ljharb: im not attending next meeting and you are partially to blame

[13:28:42.0658] <DerekNonGeneric>
more accurately: i had some plans come up, so im going to fight about it

[13:37:12.0191] <DerekNonGeneric>
 * more accurately: i had some plans come up, so im not going to fight about it

[14:43:09.0088] <DerekNonGeneric>
- 13th: unavailable all day
- 14th: doubt i will feel up to going to that
- 15th: we'll see what happens


2021-07-12
[21:16:21.0698] <ljharb>
DerekNonGeneric lol how am i to blame?

[21:17:19.0320] <ryzokuken>
I feel that it's likely that the meeting will finish on the 14th or the 15th at the latest...

[21:18:23.0934] <ryzokuken>
but yeah, probably a two-day meeting this time.

[21:36:04.0261] <DerekNonGeneric>
/me is in pacifist mode

[03:42:00.0960] <littledan>
> <@dereknongeneric:mozilla.org> ljharb: im not attending next meeting and you are partially to blame

I'm confused; are you a delegate or invited expert?

[03:56:54.0084] <Jack Works>
What happened ðŸ‘€

[10:43:00.0200] <DerekNonGeneric>
this thing isn't even happening, so im not mad or anything

[12:14:05.0686] <DerekNonGeneric>
> <@dehrenberg:igalia.com> I'm confused; are you a delegate or invited expert?

you can put me down as an IU delegate

[12:14:45.0540] <DerekNonGeneric>
> <@jackworks:matrix.org> What happened ðŸ‘€

not exactly sure tbh

[12:19:48.0360] <littledan>
DerekNonGeneric: Our typical process is that the person running the organization's Ecma membership should enroll you by filing an issue at https://github.com/tc39/Admin-and-Business/issues . I don't see an issue there yet; I suggest you get in touch with the appropriate person in IU.

[12:20:49.0426] <DerekNonGeneric>
littledan: we started a thread about this in IRC (facility now blocked) -- the man is very busy, so i don't want to impose

[12:20:50.0810] <littledan>
 * DerekNonGeneric: Our typical process is that a person involved in the organization's Ecma membership should enroll you by filing an issue at https://github.com/tc39/Admin-and-Business/issues . I don't see an issue there yet; I suggest you get in touch with the appropriate person in IU.

[12:21:53.0807] <littledan>
hmm, maybe you could convince him to explicitly delegate to someone else, but anyway, I'm just speculating, and this is all up to the chairs.

[12:22:36.0583] <littledan>
(we're busy too!)

[13:32:37.0021] <DerekNonGeneric>
sent him an email from my student account


2021-07-13
[18:07:21.0348] <HE Shi-Jun>
It seems I don't have permission in TC39-delegate room ðŸ˜‚

[18:45:57.0071] <jmdyck>
ryzokuken: See https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON for one explanation of why there are multiple JSON standards.

[18:47:01.0594] <ryzokuken>
thanks jmdyck 

[23:42:55.0592] <sideshowbarker>
is https://wiki.ecmascript.org still active?

[23:43:23.0578] <sideshowbarker>
response to https://wiki.ecmascript.org/doku.php?id=harmony:proxies just timing out

[00:02:07.0223] <DerekNonGeneric>
nope, i don't have details, but that is not a tc39 web property

[03:46:21.0862] <littledan>
So, that ES wiki is definitely a site created by TC39, but it is indeed down, and we access it through, umm, internet archive

[07:50:52.0449] <DerekNonGeneric>
littledan  we should link to it from the site then (eventually)

[08:04:16.0081] <littledan>
Well, it's more of a historical archive

[08:04:34.0454] <littledan>
Not all pieces of TC39 history are linked from the site

[08:04:44.0151] <littledan>
The main priority IMO is to archive it well 

[10:06:39.0718] <ljharb>
jmdyck not sure if you saw my reply on https://github.com/tc39/ecma262/pull/2125#discussion_r668431272 - it'd really help to get a concrete suggestion to get this over the line :-)

[10:08:01.0853] <jmdyck>
Nope, I've been busy all day so far.

[10:10:03.0411] <jmdyck>
Will do something now.

[10:10:14.0648] <ljharb>
yay, thanks :-) not a huge rush ofc, just trying to get it done

[10:10:24.0896] <jmdyck>
np

[10:54:45.0743] <jmdyck>
Done.

[11:18:39.0672] <ljharb>
jmdyck: thanks! updated :-)


2021-07-14
[19:20:59.0393] <dcrousso>
how does one get access to TC39 Delegates?

[19:21:53.0236] <shu>
one of the admins need to change your access level so you can talk

[23:22:10.0001] <Hemanth H.M>
Aki: World's first make-your-own KitKat shop opening in Tokyo! :D 

[23:22:25.0779] <ljharb>
ooh

[23:34:12.0702] <Aki>
shut up

[03:50:30.0735] <DerekNonGeneric>
this is interesting... according to a user by the name of munrocket,
there seems to be a definition for stage `-1` proposals?

>  **Stage -1** is actually idea thread in discourse.
> Seems that I created topic in a wrong section there.

source: https://github.com/tc39/proposals/pull/362#issuecomment-871434628


[03:54:52.0725] <DerekNonGeneric>
the process document (https://tc39.es/process-document/) is silent on the matter and i have personally been curious about this myself since the proposal template also suggests that there is a stage -1 (https://github.com/tc39/template-for-proposals/blob/main/spec.emu) /cc yulia maybe knows?

[09:01:50.0782] <ljharb>
DerekNonGeneric: "stage -1" is just a conventional way to refer to ideas that aren't actually an official proposal

[09:04:12.0117] <DerekNonGeneric>
ljharb, is that the same thing as "spec fiction" then?

[09:04:44.0275] <devsnek>
spec fiction is something in the spec that no implementation has

[09:08:45.0937] <ljharb>
"stage -1" is just a convenient way to describe a proposal idea seeking a champion, since without a champion it's not actually a proposal

[09:09:18.0891] <devsnek>
technically without consensus for stage 1 it's not a proposal

[09:09:27.0827] <devsnek>
or with consensus for stages 2-4

[09:10:03.0316] <ljharb>
that's not true. technically there are no entry requirements for stage 0

[09:10:21.0414] <devsnek>
ye i was making a joke about stage 1 being called "Proposal"

[09:10:34.0375] <ljharb>
but since that technically means EVERYTHING is already a stage 0 proposal, we've always treated it as "it's not stage 0 til a champion has it on an agenda"

[09:29:43.0860] <DerekNonGeneric>
> <@devsnek:matrix.org> spec fiction is something in the spec that no implementation has

this seems to be a pretty accurate description from what i can tell elsewhere...

> times, if browser makers refuse to implement a platform feature,
>  there's no point having it in the spec; the spec would be fiction.

source: https://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-August/063981.html


[09:30:39.0223] <DerekNonGeneric>
thanks much!

[09:35:29.0830] <DerekNonGeneric>
/me thinking about how to distill this -1 info into a PR to the stage table in the process document

[09:37:51.0609] <ljharb>
i do not think it belongs there.

[09:37:56.0837] <ljharb>
it's just a community convention.

[09:38:48.0832] <DerekNonGeneric>
hmm, maybe a small note in the table caption would be enough

[09:43:13.0728] <ljharb>
even that would give it more officialness than it deserves, i think

[09:45:22.0239] <DerekNonGeneric>
if we had that wiki up and running, an entry there would be nice


2021-07-15
[17:27:32.0801] <devsnek>
I think for future large changes like class fields it would be nice to split them into multiple commits 

[17:44:56.0898] <bakkot>
it's certainly nicer that way, but it's often a great deal of work

[17:45:34.0203] <bakkot>
I'd be open to doing it if it's something many people would get a lot of benefit from

[17:47:24.0171] <devsnek>
i can't speak for anyone else but i would certainly benefit from it

[18:18:52.0904] <littledan>
We did a bunch of work to maintain them separately for a while across rebases but it was ultimately merged

[18:19:03.0196] <littledan>
It would help to know why anyone would benefit

[18:19:37.0800] <littledan>
Engines did not end up slicing up shipping based on the proposal split

[18:20:01.0011] <devsnek>
oh i don't mean by the individual field types

[18:20:21.0401] <littledan>
The state of the language with the different subsets is well-documented; it wasn't clear to me what multiple commits would give us

[18:20:23.0016] <devsnek>
i mean like, there is a lot of refactoring across various things that happened to enable "class fields" in the general sense

[18:21:01.0817] <littledan>
OK, well, it sounds like you're asking for an even more involved factoring then

[18:21:05.0617] <devsnek>
going over thousands of lines of diff to understand what changed is a very difficult way to figure it out

[18:21:19.0392] <littledan>
I dunno, I am happy to answer questions

[18:22:33.0268] <littledan>
But basically no existing semantics changed, only new things were added

[18:25:02.0436] <ljharb>
i'm hearing gus' request as, smaller git commits so that one can choose to look at smaller chunks of conceptual additions at a time. which is definitely a difficult ask, and on class fields in particular would have likely been exceedingly difficult since it was the combining of three repos

[18:25:09.0591] <ljharb>
 * i'm hearing gus' request as, smaller git commits so that one can choose to look at smaller chunks of conceptual additions at a time. which is definitely a difficult ask (but a nice to have), and on class fields in particular would have likely been exceedingly difficult since it was the combining of three repos

[18:26:24.0063] <devsnek>
yeah for example, moving classes from methods to fields, without adding all the new field kinds, might have been one step, idk

[18:26:32.0385] <devsnek>
i don't think it matters too much, the past is the past

[18:37:56.0842] <bakkot>
yeah, to be clear, it would definitely be an after-all-other-work-is-done refactoring

[18:38:12.0142] <bakkot>
which is pretty common for this type of thing, it's just a bunch of work

[18:39:53.0734] <ljharb>
in my experience it actually makes it much easier if you start out keeping commits separate, and keep followup changes split into separate commits that point to the ones they should be squashed into later - but it's definitely not a natural way of working with git for many

[18:42:44.0507] <devsnek>
`git rerere` can help a lot with allowing more commits

[18:42:48.0120] <devsnek>
for annoying rebases

[18:47:14.0652] <bakkot>
ljharb: if you do the work in a way where that works, yeah

[18:47:25.0715] <bakkot>
often there's a big refactor that happens across code touched by many commits, so often you kind of need to come up with the story you're going to tell once you have everything created

[18:47:32.0032] <bakkot>
which is probably what I would have done for class fields

[18:47:37.0828] <ljharb>
very fair point

[20:24:28.0040] <littledan>
If someone wants to contribute this history refactoring, we can probably find time in Igalia to review it, but we don't plan to spend time writing it ourselves.

[20:25:31.0773] <ljharb>
we wouldn't change the commits that have landed - it's more something to think about for future large PRs, i think

[20:32:49.0652] <bakkot>
yeah

[20:32:55.0410] <bakkot>
also probably would be something the editors would take on

[20:35:13.0999] <devsnek>
yes i don't think we should rewrite the history

[20:35:28.0375] <devsnek>
i was just saying it should be something to think about in the future

[12:07:46.0422] <devsnek>
has anyone ever proposed filter map

[16:30:15.0381] <ljharb>
wouldn't that be `.flatMap(x => predicate(x) ? [x] : [])`?

[16:30:55.0819] <ljharb>
 * wouldn't that be `.flatMap(x => predicate(x) ? [mapper(x)] : [])`?

[16:31:11.0976] <ljharb>
 * wouldn't that be `.flatMap((...args) => predicate(...args) ? [mapper(...args)] : [])`?


2021-07-16
[19:31:34.0259] <Richard Gibson>
sure, but in the same sense as flatMap itself is `.reduce((out, ...args) => out.concat(mapper(...args)), [])`

[02:48:30.0542] <Andreu Botella (he/they)>
Hi! I just noticed that `Atomics.multiply()` isn't a thing. Is that because for all other operations you don't need to know whether the type is signed or unsigned but for multiplication you do?

[11:19:19.0566] <Domenic>
What objects in 262 use option bags?

[11:19:31.0739] <Domenic>
I am investigating whether error.cause's HasProperty + Get pattern is standard or unusual

[11:22:02.0785] <bakkot>
262 itself does not tend to use object bags much, though that's changing. 402 uses them more and just does Get, IIRC

[11:22:48.0119] <bakkot>
I think we are in generally in favor of just doing Get; I argued for error.cause to be a special case because, unusually, `undefined` is a value one might reasonably want to use

[11:23:08.0402] <bakkot>
In cases where `undefined` is not an expected value there's no particularly reason to do a Has check first

[11:23:23.0387] <Domenic>
Hmm

[11:23:38.0003] <Domenic>
I do not like distinguishing between undefined and not-present in the options bag

[11:23:42.0788] <Domenic>
As well as on the object itself

[11:24:07.0483] <Domenic>
I feel like if you really want to split hairs there you should use error.cause === undefined vs. error.cause === null, instead of testing 'cause' in error

[11:24:50.0820] <bakkot>
The problem is that the error values are generally being handed to you, not a thing you are given yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`

[11:25:05.0056] <bakkot>
 * The problem is that the error values are generally being handed to you, not a thing you are creating yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`

[11:26:34.0734] <Domenic>
Sure

[11:27:16.0364] <Domenic>
But I don't understand why that means it's important that `'cause' in new Error('message')` is false whereas `'cause' in new Error('message', { cause: undefined })` is true.

[11:28:39.0587] <bakkot>
Ah, this was on the assumption that there would not be a `cause` property if you didn't pass the options bag at all

[11:28:59.0481] <bakkot>
that is, I think it's important that `'cause' in new Error('message', { cause: undefined })`, since you are explicitly asking to create an error with a `cause`

[11:29:30.0487] <bakkot>
I don't know if I have an opinion about whether `'cause' in new Error('message')` should also be true

[11:30:05.0555] <bakkot>
but I do think `'cause' in new Error('message')` should match `'cause' in new Error('message', {})`

[11:30:14.0951] <Domenic>
My opinion is it should also be true

[11:30:28.0999] <Domenic>
I.e. we should not branch behavior on {} vs. { cause: undefined }

[11:31:11.0037] <Domenic>
Filed https://github.com/tc39/proposal-error-cause/issues/35

[11:36:31.0599] <bakkot>
Mind, it's already stage 3, so I don't know how much appetite there will be for this sort of change

[11:56:32.0933] <shu>
it's also already shipping

[11:56:38.0481] <shu>
well, almost, coming up in chrome 93

[12:01:42.0585] <justingrant>
> What objects in 262 use option bags?

Temporal uses options bags in almost every method that takes parameters. If we're using them incorrectly or inconsistently, let us know!


[12:18:24.0788] <Domenic>
My intent was for this to be "implementer feedback" as we work to spec/implement structured clone for it

