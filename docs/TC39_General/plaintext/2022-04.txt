2022-04-01
[17:57:53.0235] <shu>
ljharb: i apologize for my tone earlier

[14:58:47.0336] <ljharb>
> <@shuyuguo:matrix.org> ljharb: i apologize for my tone earlier

thanks, i apologize for getting worked up.


2022-04-02
[09:56:55.0474] <DerekNonGeneric>
> The Closure type system was originally based on the EcmaScript 4 spec.
> â€” https://github.com/google/closure-compiler/wiki/Types-in-the-Closure-Type-System#javascript-types

By chance, would anyone here happen to know where this is specified in the ES4 spec? The link provided is broken, but [here's the Wayback Machine's backup](https://web.archive.org/web/20161006100721/http://wiki.ecmascript.org/doku.php?id=spec:spec) if anyone knows where to look (it's pretty extensive).

[10:35:24.0676] <DerekNonGeneric>
3rd section of the [Core language](https://web.archive.org/web/20160802002701/http://wiki.ecmascript.org/lib/exe/fetch.php?id=spec%3Aspec&cache=cache&media=spec:core-language-d2.html) document seems like what that was referring to so maybe never mind? (much of that notation looks unfamiliar even having used Closure myself for several years)

[10:38:35.0267] <DerekNonGeneric>
 * 3rd section of the [Core language](https://web.archive.org/web/20160802002701/http://wiki.ecmascript.org/lib/exe/fetch.php?id=spec%3Aspec&cache=cache&media=spec:core-language-d2.html) document seems like what that was referring to so maybe never mind? (much of that notation looks unfamiliar even having used Closure myself for several years)

[12:17:04.0117] <DerekNonGeneric>
> Deprecated syntax: adding a dot before the `<` (e.g. `!Array.<string>`) is also accepted.

Okay, makes sense now; more modern Closure (and TS) annotations don't look like this due to the syntax for parametric type application using the dot now being deprecated (at least by Closure)


2022-04-06
[07:18:15.0402] <sideshowbarker>
for https://github.com/mdn/content/issues/14744, comments in that issue or here would be welcome

[08:12:09.0824] <Ashley Claymore>
Hey sideshowbarker I'll try and add some more info or raise a PR soon. I raised it quickly before I forgot. Context: https://es.discourse.group/t/how-does-super-work-as-an-object/1279/4

[08:13:10.0686] <Ashley Claymore>
 * Hey sideshowbarker I'll try and add some more info or raise a PR soon. I raised it quickly before I forgot. Context: https://es.discourse.group/t/how-does-super-work-as-an-object/1279/4

[10:35:03.0438] <sideshowbarker>
> <@aclaymore:matrix.org> Hey sideshowbarker I'll try and add some more info or raise a PR soon. I raised it quickly before I forgot. Context: https://es.discourse.group/t/how-does-super-work-as-an-object/1279/4

ah thanks â€” I hadnâ€™t realized it was you who raised it


2022-04-08
[20:18:01.0218] <sideshowbarker>
Iâ€™m confused about why we have an article at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction in MDN for a `GeneratorFunction()` constructor and global object when there is no such constructor and object in th spec

[20:18:51.0868] <sideshowbarker>
but then I look in the spec at https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generatorfunction-constructor and I see a whole section on **The GeneratorFunction Constructor**â€¦

[20:19:33.0455] <sideshowbarker>
ah I see the spec defines it as an intrinsic

[20:23:25.0438] <bakkot>
it exists it's just not a property of the global object

[20:27:56.0944] <sideshowbarker>
bakkot: so in looking at the spec, how can I tell that itâ€™s not a property of the global object?

[20:28:31.0320] <sideshowbarker>
and does not being a property of the global object mean itâ€™s not callable at all from user JavaScript code?

[20:28:37.0814] <sideshowbarker>
not even observable?

[20:32:13.0244] <jmdyck>
You can tell it's not a property of the global object because it's not listed as such in section 19.

[20:34:27.0346] <jmdyck>
and also because 27.3.1 "The GeneratorFunction Constructor" doesn't have a bullet saying `is the initial value of the "Foo" property of the global object`

[20:36:43.0312] <jmdyck>
But you can't tell by looking at https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generatorfunction, which is maybe unfortunate.

[20:37:00.0540] <sideshowbarker>
yeah

[21:02:41.0819] <bakkot>
for the non-global-property ones we could reasonably add a bullet saying "Is not exposed as a property of the global object", I suppose

[21:04:27.0502] <jmdyck>
https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object says "does not have a global name or appear as a property of the global object", but it's the only one.

[14:25:07.0977] <ljharb>
we could also just â€¦ start exposing it


2022-04-09
[04:43:27.0656] <jmdyck>
Wasn't there some reason for not exposing it?


2022-04-11
[14:34:05.0995] <ptomato>
if we have a bunch of string options that come off of user-provided options bags, is it preferable to convert them to `~tilde enums~` when used internally? examples of what I'm talking about are the _disambiguation_ and _offsetOption_ parameters of this abstract operation: https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset

[14:34:42.0200] <ptomato>
(the _offsetBehaviour_ parameter doesn't originate from a user-provided options bag, so that's why it's already got tilde values)

[14:35:24.0054] <ptomato>
ecma402 uses the string values (e.g. https://tc39.es/ecma402/#sec-initializedatetimeformat) but there isn't much precedent yet for options bags in ecma262


2022-04-12
[06:48:43.0954] <Jack Works>
so interesting!

[06:49:16.0971] <Jack Works>
https://twitter.com/jackworks_asref/status/1513876593021956103

[07:00:14.0747] <nicolo-ribaudo>
Is there any `export function then`? ðŸ˜›

[07:00:42.0785] <nicolo-ribaudo>
* Is there any `export function then`? ðŸ˜›

[07:47:10.0138] <Jack Works>
No, because the private field is on the import promise, not on the module object

[08:13:10.0150] <Ashley Claymore>
only using spec features? Or special stuff like node async-hooks?

[08:21:43.0703] <Jack Works>
> <@aclaymore:matrix.org> only using spec features? Or special stuff like node async-hooks?

Yeah you got it. It's Node only ðŸ˜‚


2022-04-13
[16:51:05.0997] <shu>
ptomato: why does Time Duration Record have [[Days]]?

[16:59:50.0825] <ptomato>
it's for when an operation that uses Time Duration Records overflows 24 hours and needs to indicate to the caller that if they care about days, they need to adjust their day total 


2022-04-14
[17:00:03.0346] <ptomato>
maybe a more descriptive name would've been [[DeltaDays]]

[17:00:54.0383] <shu>
i don't have anything against [[Days]], just didn't understand why

[17:01:53.0689] <ptomato>
I can give a more concrete example, maybe

[17:05:02.0314] <ptomato>
when you take the difference between two PlainDateTimes, you get the difference between the date parts from the calendar, then you need to take the difference between the time parts ([DifferenceTime](https://tc39.es/proposal-temporal/#sec-temporal-differencetime)). the time difference might be negative or wrap around 24h, so the [[Days]] field indicates that you need to adjust your date difference accordingly

[17:09:09.0560] <ptomato>
I hope that's not gibberish :-) it's hard to know sometimes how much detail to go into

[17:16:09.0527] <shu>
i think so? my confusion is probably because i have a naive understanding of how people do duration math

[17:16:52.0703] <shu>
like, i figured the duration between two times, even if it changes days, would still be represented only as some number of hours

[17:18:06.0736] <shu>
but it also makes sense to represent that the day changed, that seems more useful than just number of hours

[09:32:24.0457] <Richard Gibson>
for a concrete example, there is a difference between a duration of 1 day vs. 24 hours that is observable from `Temporal.ZonedDateTime.from("2022-03-13T00:00[America/New_York]").add(Temporal.Duration.from({days: 1}))` vs. `Temporal.ZonedDateTime.from("2022-03-13T00:00[America/New_York]").add(Temporal.Duration.from({hours: 24}))` because of the DST transition


2022-04-18
[13:26:25.0197] <sirisian>
Does anyone know if the iterator helper proposal has ever discussed parallel/batch features for v1? A lot of my use cases for lazy iterators involve async operations that benefit from parallel requests. Maybe I'm thinking of this wrong, but like for (const item of webpages.map(async url => return await op(url), { batch: 5 })){} where 5 are executed in parallel and are handled out of order first come. (In theory if a break is called then the other 4 pending would be cancelled by the generator's return). The big picture is handling tasks that might look like [500ms, 10ms, 10ms, 10ms, 10ms...] where a random long task blocks the whole pipeline. With more complex pipelines this snowballs into large delays.

[13:48:22.0103] <bakkot>
sirisian: not for v1, no. I would also like to see such a thing at some point but it doesn't really fit with the simpler v1 helpers; it would be its own thing

[13:48:58.0600] <sirisian>
As long as it's possible later, that's all that matters.

[13:49:50.0531] <bakkot>
I haven't thought about it really hard but I expect it should be. and at the very least nothing in this proposal is likely to make it harder.

[13:50:54.0884] <Ashley Claymore>
Ixjs has this with a `concurrent` param for `flatMap` https://github.com/ReactiveX/IxJS/blob/master/src/asynciterable/operators/flatmap.ts

[14:02:48.0183] <bakkot>
for the particular example you give I think the thing you actually want is a helper to bound how many invocations of an async function can be running simultaneously

[14:07:25.0823] <bakkot>
```
function boundAsyncFunctionConcurrency(f, N) {
  let waiting = [];
  let available = N;
  function lock() {
    if (available > 0) {
      --available;
      return;
    }
    return new Promise(res => {
      waiting.push(res);
    });
  }
  function unlock() {
    if (waiting.length > 0) {
      waiting.shift()();
    } else {
      ++available;
    }
  }

  return async function(...args) {
    try {
      await lock();
      return await f.apply(this, args);
    } finally {
      unlock();
    }
  };
}
```


[14:07:29.0425] <bakkot>
or something to that effect

[14:07:58.0564] <bakkot>
so you can do `.map(boundAsyncFunctionConcurrency(async url => await op(url), 5))`

[14:08:11.0084] <bakkot>
rather than getting the iterator helpers involved directly

[14:08:27.0078] <bakkot>
but there are probably other cases where you'd want the iterator helpers to be involved

[14:55:22.0747] <Domenic>
I've used https://www.npmjs.com/package/throat in the past

[15:57:51.0586] <sirisian>
bakkot: Wouldn't your implementation instantly create N promises consuming the whole input generator? Ideally a lazy iterator implementation wouldn't do that. The map would only call next 5 times to start then again when the first promise returns. Ideally a generator could have infinite items and everything would just work.

[15:58:22.0851] <sirisian>
 * bakkot: Wouldn't your implementation instantly create N promises consuming the whole input generator? Ideally a lazy iterator implementation wouldn't do that. The map would only call next 5 times to start then again when the first promise returns. Ideally a generator could have infinite items and everything would just work.

[16:34:26.0363] <bakkot>
sirisian: no, it will not consume the whole input

[16:34:44.0727] <bakkot>
not unless you `toArray` it or something, anyway

[16:36:30.0982] <bakkot>
iterator helpers are lazy

[16:36:40.0471] <bakkot>
which, it occurs to me, probably means they're not a good fit for what you're trying to do anyway

[16:38:55.0542] <bakkot>
you can't really have all three of "works with infinite generators", "provides results in order", and "does not block on inputs which are slow"

[16:41:11.0930] <bakkot>
because if you _don't_ block on slow inputs, but you still want to get results in order, that means it has to eagerly start doing work for results past the next one, which means it's not going to work for infinite iterators.

[16:41:14.0233] <sirisian>
Well I said out of order.

[16:41:23.0342] <bakkot>
ohh, missed that

[16:41:50.0510] <bakkot>
I don't think we want iterators to ever provide results out of order, so that would just be a different proposal for a different mechanism entirely

[16:43:14.0609] <sirisian>
I do see what you mean though. In applications where order matters batch means something very different than what I intended in my ad-hoc example.

[16:43:22.0401] <sirisian>
 * I do see what you mean though. In applications where order matters batch means something very different than what I intended in my ad-hoc example.

[16:44:40.0413] <bakkot>
I think the thing you want is something which works with sync iterators which yield promises? Let me see...


2022-04-19
[17:36:05.0937] <sirisian>
Here's an example:
```
// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms
function* gen() {
  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];
}
for await (const i of gen.map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
})) {
  // This will after summation of all the times in each array.
  console.log(item.shift());
}
```

[17:39:56.0191] <sirisian>
 * Here's an example:
```
// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms
function* gen() {
  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];
}
for await (const i of gen.map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
})) {
  // This will after summation of all the times in each array.
  console.log(item.shift());
}
```

[17:40:29.0323] <sirisian>
 * Here's an example:
```
// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms
async function* gen() {
  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];
}
for await (const i of gen.map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
})) {
  // This will after summation of all the times in each array.
  console.log(item.shift());
}
```

[17:48:16.0683] <sirisian>
 * Here's an example:
```
// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms
async function* gen() {
  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];
}
for await (const i of gen.map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
}).map(async item => {
	await new Promise(resolve => setTimeout(resolve, item.shift()));
  return item;
})) {
  // This will after summation of all the times in each array.
  console.log(item.shift());
}
```

[17:51:47.0988] <sirisian>
Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example.

[17:53:17.0476] <sirisian>
 * Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example.

[19:14:51.0935] <bakkot>
sirisian: yeah it looks like you're trying to do things with sync iterables of promises, which isn't a concept the language ever really works with, right now. except in like `Promise.all` I guess.

[19:45:26.0633] <sirisian>
bakkot: https://jsfiddle.net/9xsyev61/ This isn't cursed at all.

[19:48:17.0398] <bakkot>
sirisian: lol

[19:48:32.0482] <bakkot>
looks like it dropped some though? I only see a single `1` in the console

[19:48:42.0288] <bakkot>
oh, wait, that's just the wrapping, sigh

[19:49:24.0453] <bakkot>
that still only works with finite iterators though

[19:49:30.0128] <bakkot>
finite underlying iterators, that is

[19:49:48.0943] <bakkot>
well... maybe it could be made to work with infinite ones, hmm

[19:50:04.0017] <sirisian>
yes it should be able to. Just pass in the iterator.

[19:50:21.0012] <sirisian>
take(5) kind of thing then next to get the next work.

[19:54:17.0920] <bakkot>
oh, but it doesn't compose, because it produces an async iterator rather than a sync iterator of promises

[19:54:30.0117] <bakkot>
so you can't do it twice with different mapping functions

[20:26:43.0079] <sirisian>
bakkot: https://jsfiddle.net/xs1brkL8/ Wait, I don't use these much. Can you detect the break in code like that to print "map done"?

[20:27:37.0620] <bakkot>
sirisian: i don't understand the question

[20:32:01.0814] <bakkot>
oh, do you mean, the `break` in the bottom loop? yes: it will cause the `yield` to be a `return`, and you can use a try/finally to do cleanup 

[20:32:12.0243] <sirisian>
oh it throws. I see.

[20:32:35.0648] <bakkot>
it doesn't throw

[20:32:40.0165] <bakkot>
it puts a `return`

[20:32:55.0645] <bakkot>
a `finally` will trigger, but not a `catch`

[20:33:01.0004] <bakkot>
```
async function* map(tasks, n) {
  try {
    // Start n work
    const parallel = new Set();
    for (let i = 0; !tasks.done && i < n; ++i) {
      parallel.add(makeWork((await tasks.next()).value));
    }
    // Process the work yielding the first one done in the set of n work
    while (parallel.length != 0 && !tasks.done) {
      const task = await Promise.race([...parallel].map(t => t.promise));
      parallel.delete(task);
      yield task;
      // Add 1 more work
      parallel.add(makeWork((await tasks.next()).value));
    }
  } finally {
    console.log('map done');
    tasks?.return();
  }
}
```

[20:33:09.0269] <bakkot>
 * it doesn't throw

[20:34:40.0951] <sirisian>
https://jsfiddle.net/xs1brkL8/1/ neat, is this composable?

[20:35:59.0871] <sirisian>
In the actual helper setup it would need to be on the iterator, but that should be fine. I could rewrite it do that I think.

[20:37:42.0881] <sirisian>
Oh wait, can you modify all iterators to add functions to them. (I know this would be bad).

[20:38:03.0832] <bakkot>
that's what the iterator helpers proposal is

[20:38:35.0528] <bakkot>
i.e. adding functions to all iterators (all iterators which inherit from iterator.prototype, anyway)

[20:39:00.0566] <bakkot>
I can't quite tell if your thing actually composes properly just from staring at it

[20:40:36.0623] <bakkot>
oh, `!tasks.done` isn't a thing, though

[20:41:01.0335] <sirisian>
whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/

[20:41:23.0081] <sirisian>
 * whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/

[20:41:53.0274] <sirisian>
I mean can you edit the iterator prototype right now for testing polyfills?

[20:41:59.0238] <bakkot>
yes

[20:42:21.0921] <bakkot>
re^, you have to check the `done` property of the result every time you call `.next()`

[20:42:38.0857] <bakkot>
you have to check `done` before reading `value` 

[20:43:01.0615] <bakkot>
(to obey the iterator contract, anyway; you don't _have_ to but it's going to behave weirdly if you don't)

[20:54:36.0579] <sirisian>
 * whoops forgot that one. ~~https://jsfiddle.net/xs1brkL8/2/~~ https://jsfiddle.net/xs1brkL8/3/

[20:56:37.0542] <sirisian>
Wait, how do you edit the iterator prototype? What is it called?

[20:57:17.0151] <bakkot>
it's called `[].values().__proto__.__proto__`

[20:57:53.0631] <sirisian>
That's how I know this is a good idea.

[21:06:50.0244] <sirisian>
Is the async iterator a different one then?

[21:07:02.0315] <bakkot>
yes

[21:11:17.0898] <bakkot>
(it's `(async function*(){})().__proto__.__proto__.__proto__`)

[21:11:45.0659] <sirisian>
ah, I was off one proto

