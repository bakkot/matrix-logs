2024-03-01
[05:51:22.0891] <littledan>
(I donâ€™t have a real position one way or the other on undefined/null; was not trying to make a particular argument about which should be used where)


2024-03-05
[14:39:13.0934] <littledan>
interesting feedback on observables from the W3C TAG:  https://github.com/w3ctag/design-reviews/issues/902#issuecomment-1942576159

[14:39:51.0337] <littledan>
Is anyone interested in discussing Observables in TC39, as Lea recommends?

[14:59:00.0815] <bakkot>
ljharb was definitely interested in seeing it go through TC39 IIRC

[14:59:36.0996] <littledan>
(I'm neutral on venue in theory, but it'd be good to have *a* venue where discussions can take place.)

[14:59:53.0654] <shu>
i'd like to first be convinced that a discussion would be productive

[15:00:45.0722] <shu>
it is a thing we have already discussed in the past

[15:00:58.0673] <littledan>
literally no one has brought it to committee since 2016

[15:01:25.0973] <shu>
wasn't abortcontroller the sticking point back then too?

[15:01:37.0258] <littledan>
It was very much not shot down at that time

[15:01:47.0963] <shu>
i see

[15:01:50.0314] <littledan>
a version was created which was based on the concurrent TC39 cancellation version

[15:01:57.0099] <littledan>
which was also not shot down, just withdrawn by the champion

[15:02:43.0349] <shu>
i am not opposed to discussion provided that we first agree on goals, since the champion in this case already chose to not bring this to tc39

[15:02:46.0997] <littledan>
I think we have had significant cultural problems that led to this demotivation, and we're not perfect, but I'd say it was definitely worse in 2016

[15:03:23.0451] <shu>
given that we cannot force it to be under tc39 purview, what is the goal of the discussion? is it design feedback? is it like a resolution to try to convince the champion to bring it to tc39?

[15:04:54.0859] <littledan>
well, the purpose of me raising it in this current discussion was, "hey, we care about the TAG thinks, they had a recommendation for us, what should we do"

[15:05:08.0509] <littledan>
we'd kinda need a stronger goal set for a TC39 discussion, I agree

[15:06:24.0151] <littledan>
as far as convincing people, in my conversations with Ben Lesh over the years, he was always happy in principle with this going to TC39, just skeptical that we could get our act together and deliver on anything (so I was unable to convince him to do the work to make it happen in TC39). This does point to a serious problem of ours.

[15:07:56.0782] <shu>
agreed

[15:08:14.0360] <shu>
on the merits alone i think i actually disagree with lea's feedback

[15:08:22.0162] <littledan>
interesting, how so?

[15:08:53.0683] <shu>
my sense has been that there will be no concrete users of the API in ecma262, so we'll be designing an interface that's constrained by the web APIs that need this

[15:09:25.0571] <shu>
so doing in 262 adds more friction given the amount of tight coupling that needs to happen during the design anyway

[15:09:31.0481] <shu>
 * so doing it in 262 adds more friction given the amount of tight coupling that needs to happen during the design anyway

[15:09:39.0963] <shu>
also more layering juggling

[15:09:49.0416] <littledan>
we regularly take web API design constraints into account in TC39. Conversely, that proposal repo doesn't show much activity from a variety of web folks as you'd hope for.

[15:10:29.0274] <littledan>
so the purpose of standards venues is often to bring people into discussions. TC39 might be a good or bad tool for that, depending on the details.

[15:10:41.0555] <shu>
sure

[15:11:30.0754] <shu>
still that's why i don't think tc39 is a good fit. i'd rather not design a pure interface that already has real world constraints, where those real world constraints are somewhat far away from us

[15:12:30.0940] <littledan>
honestly for this particular API, the stuff I'm more worried about design-wise is all the weird combinators people end up wanting in RxJS, and is it a problem that this lacks those and goes for something cleaner. This doesn't really have to do with anything that the web platform *or* TC39 have thought very much about.

[15:13:00.0641] <shu>
i'm not really aware of that concern and that may change my thinking

[15:13:23.0261] <littledan>
the constraints here with the web platform are really really simple, just like "it has to be sync enough that I can do preventDefault", not much more

[15:13:35.0694] <shu>
abortcontroller...? domerror?

[15:13:40.0436] <littledan>
also like "there has to be a concept of unsubscribing, and also dropping events if they come too fast"

[15:15:05.0072] <littledan>
so, yeah, if we say that all unsubscribing is owned by the web platform because of AbortController, I guess. But we can just as much make a new "subscription" object that has a [Symbol.dispose] method (this would be more similar to how RxJS works today, I think, so it's more proven out that it works)

[15:15:46.0558] <littledan>
sorry what is the DOMError part? that seems more like an effect of venue choice than motivation

[15:17:31.0489] <littledan>
> <@littledan:matrix.org> honestly for this particular API, the stuff I'm more worried about design-wise is all the weird combinators people end up wanting in RxJS, and is it a problem that this lacks those and goes for something cleaner. This doesn't really have to do with anything that the web platform *or* TC39 have thought very much about.

Fascinating data which could inform this: https://github.com/WICG/observable/issues/106

[15:47:19.0838] <TabAtkins>
> <@shuyuguo:matrix.org> my sense has been that there will be no concrete users of the API in ecma262, so we'll be designing an interface that's constrained by the web APIs that need this

I'm not sure why you would think this. Promises are widely useful in Node, and Observables are, to a first approximation, just a bunch of Promises. UI-driven event streams are the *obvious* primary use-case for them, and that's *mostly* a browser thing as a result, but not entirely, and there are plenty of other uses (literally anything that currently relies on a callback that's invoked multiple times asynchronously).


2024-03-06
[16:28:46.0202] <ljharb>
there weren't any uses of Promises in the language when they were first added

[16:29:41.0578] <bakkot>
yeah but there was an obvious thing they would be used for, i.e. async functions

[16:29:51.0866] <bakkot>
is there a thing we even plausibly think Observable might get used for, in the language?

[16:30:17.0903] <bakkot>
(I'm not opposed to putting it in TC39 anyway, I just don't know of anything in the language that would need it)

[16:35:59.0584] <bakkot>
(I do agree with the point about it being shaped mainly by web constraints and so making more sense in WHATWG, unless there is some language-level thing we want it for)

[17:06:48.0466] <littledan>
I don't understand this line of argument; what is the language-level thing that Temporal is for?

[17:07:03.0317] <littledan>
all of the integrations I've heard of are at the web level, or other embedders

[17:07:32.0950] <littledan>
 * all of the integrations I've heard of for Temporal are at the web level, or other embedders

[17:08:49.0112] <littledan>
I'd argue that either venue is valid, and we're in a situation of actual competition, for who can be the most helpful in facilitating discussion, decision-making, implementation, etc.

