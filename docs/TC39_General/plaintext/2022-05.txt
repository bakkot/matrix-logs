2022-05-02
[12:37:13.0040] <TabAtkins>
I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the `forEach` methods just visit every entry "live" and can potentially run forever if the callback keeps adding entries.

[12:37:21.0583] <TabAtkins>
Is this behavior difference intentional?

[12:43:30.0619] <bakkot>
uh

[12:43:35.0503] <bakkot>
that's probably a bug from when we refactored those

[12:43:44.0682] <bakkot>
 * that's probably a bug from when we refactored those

[12:44:01.0233] <bakkot>
oh, wait, no it's not

[12:44:04.0055] <bakkot>
you missed a step:

[12:44:21.0127] <bakkot>
CreateMapIterator step 2.d.iii.6: Set numEntries to the number of elements of entries.

[12:44:36.0312] <TabAtkins>
Right, I mentioned that.

[12:44:50.0553] <bakkot>
no, that's in the loop

[12:45:03.0292] <bakkot>
it updates numEntries within the loop

[12:45:12.0743] <bakkot>
or I am not understanding your question

[12:45:53.0217] <TabAtkins>
Oh dang you're right, I *did* miss/misunderstand that.

[12:48:01.0968] <TabAtkins>
Hm then, the two methods can both run infinitely, ok. Is there a particular reason why the two have their iteration written significantly differently, or is that intended to just be an editorial detail? (Iterator goes over the entries by index and makes no mention of "empty" values; forEach iterates the entries list directly and explicitly jumps over "empty" values. (I note that "empty" is supposed to be a spec convenience for deleted entries and not an actual author-exposed thing.))

[12:50:51.0374] <bakkot>
Iterator does handle empty values, it seems to me?
> iii. If e.[[Key]] is not empty, then

[12:51:02.0926] <bakkot>
They actually look pretty similar to me, all told

[12:51:25.0009] <TabAtkins>
Sigh, I'm blind.

[12:51:50.0207] <TabAtkins>
Yeah, so it's just the explicit index-based vs just looping over the List directly, I guess

[12:52:10.0389] <bakkot>
yeah, and that one... I think it's a path-dependence thing

[12:53:22.0659] <bakkot>
in earlier editions iterators were specified in terms of explicitly keeping all of the state on internal slots, but in https://github.com/tc39/ecma262/pull/2045 we made it possible to specify a "spec generator" which is more similar to how you'd write it in JS

[12:53:54.0921] <bakkot>
prior to that, the iterator _needed_ to be specified in terms of an index so it could store the index on an internal slot, as in https://tc39.es/ecma262/2016/#sec-%mapiteratorprototype%.next

[12:54:09.0318] <bakkot>
with the refactoring that's no longer strictly necessary but the refactoring was written as a delta from what was originally there

[12:54:35.0519] <TabAtkins>
Ahhhhh, ok, thanks for the history, that makes sense.

