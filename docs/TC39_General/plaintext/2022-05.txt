2022-05-02
[12:37:13.0040] <TabAtkins>
I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the `forEach` methods just visit every entry "live" and can potentially run forever if the callback keeps adding entries.

[12:37:21.0583] <TabAtkins>
Is this behavior difference intentional?

[12:43:30.0619] <bakkot>
uh

[12:43:35.0503] <bakkot>
that's probably a bug from when we refactored those

[12:43:44.0682] <bakkot>
 * that's probably a bug from when we refactored those

[12:44:01.0233] <bakkot>
oh, wait, no it's not

[12:44:04.0055] <bakkot>
you missed a step:

[12:44:21.0127] <bakkot>
CreateMapIterator step 2.d.iii.6: Set numEntries to the number of elements of entries.

[12:44:36.0312] <TabAtkins>
Right, I mentioned that.

[12:44:50.0553] <bakkot>
no, that's in the loop

[12:45:03.0292] <bakkot>
it updates numEntries within the loop

[12:45:12.0743] <bakkot>
or I am not understanding your question

[12:45:53.0217] <TabAtkins>
Oh dang you're right, I *did* miss/misunderstand that.

[12:48:01.0968] <TabAtkins>
Hm then, the two methods can both run infinitely, ok. Is there a particular reason why the two have their iteration written significantly differently, or is that intended to just be an editorial detail? (Iterator goes over the entries by index and makes no mention of "empty" values; forEach iterates the entries list directly and explicitly jumps over "empty" values. (I note that "empty" is supposed to be a spec convenience for deleted entries and not an actual author-exposed thing.))

[12:50:51.0374] <bakkot>
Iterator does handle empty values, it seems to me?
> iii. If e.[[Key]] is not empty, then

[12:51:02.0926] <bakkot>
They actually look pretty similar to me, all told

[12:51:25.0009] <TabAtkins>
Sigh, I'm blind.

[12:51:50.0207] <TabAtkins>
Yeah, so it's just the explicit index-based vs just looping over the List directly, I guess

[12:52:10.0389] <bakkot>
yeah, and that one... I think it's a path-dependence thing

[12:53:22.0659] <bakkot>
in earlier editions iterators were specified in terms of explicitly keeping all of the state on internal slots, but in https://github.com/tc39/ecma262/pull/2045 we made it possible to specify a "spec generator" which is more similar to how you'd write it in JS

[12:53:54.0921] <bakkot>
prior to that, the iterator _needed_ to be specified in terms of an index so it could store the index on an internal slot, as in https://tc39.es/ecma262/2016/#sec-%mapiteratorprototype%.next

[12:54:09.0318] <bakkot>
with the refactoring that's no longer strictly necessary but the refactoring was written as a delta from what was originally there

[12:54:35.0519] <TabAtkins>
Ahhhhh, ok, thanks for the history, that makes sense.

[13:16:34.0426] <TabAtkins>
Okay, more questions in this regard: `Array`'s `forEach`_does_ compute the length once at the beginning and then doesn't go past it <https://tc39.es/ecma262/#sec-array.prototype.foreach>, so you can't infinite-loop yourself by pushing to the array in the callback. Is the behavior difference between arr.forEach and map.forEach intentional or accidental? (And which should we copy for general web-platform purposes when we define iteration better for Infra types in https://github.com/whatwg/infra/issues/396?)

[13:16:56.0093] <TabAtkins>
 * Okay, more questions in this regard: `Array`'s `forEach`_does_ compute the length once at the beginning and then doesn't go past it <https://tc39.es/ecma262/#sec-array.prototype.foreach>, so you can't infinite-loop yourself by pushing to the array in the callback. Is the behavior difference between arr.forEach and map.forEach intentional or accidental? (And which should we copy for general web-platform purposes when we define iteration better for Infra types in https://github.com/whatwg/infra/issues/396?)

[13:18:07.0875] <bakkot>
That one is before my time, so someone else will have to give the actual answer

[13:18:36.0181] <bakkot>
but I do note that looking up the length of an array is observable, whereas looking up the length of a Map's internal list is not, so it's possible that's the reason for the difference?

[13:18:48.0985] <TabAtkins>
Hm, but Array's @@iterator *does* allow infinite-loops, so I guess that might just be a legacy detail we got stuck with

[13:18:56.0869] <bakkot>
ah, yeah, in that case probably

[13:22:22.0394] <bakkot>
that does seem to be the consensus in other languages also

[13:22:30.0038] <TabAtkins>
Excellent, thanks. Looks like we just need to add some details to Infra to make it clear how mid-iteration changes to the collection should work; we can match JS and define it in terms of an internal index that advances until it's past the (current) end.

[13:22:54.0585] <TabAtkins>
And that'll mean I get to simplify some of my text in WebIDL that's doing this by hand, which is nice.


2022-05-10
[12:05:18.0169] <bakkot>
Domenic: do you happen to remember why `new Promise(res => res(thenable))` calls `thenable.then()` on the next tick rather than synchronously, in defiance of the A+ spec? cf https://github.com/tc39/ecma262/issues/2770#issuecomment-1121612732

[12:05:40.0239] <bakkot>
or bterlson or anyone else who was involved in the details of specifying async/await

[12:06:12.0428] <bterlson>
I don't recall sorry :(

[12:08:38.0731] <bakkot>
 * Domenic: do you happen to remember why `new Promise(res => res(thenable))` calls `thenable.then()` on the next tick rather than synchronously, in defiance of the A+ spec? cf https://github.com/tc39/ecma262/issues/2770#issuecomment-1121612732

[12:13:02.0540] <shu>
thenable delenda est :(

[12:15:12.0251] <bakkot>
happens when `thenable` is a native promise too, to be clear

[12:22:03.0547] <bakkot>
I guess this actually dates back to promises in ES6, which I always forget predate async/await

[12:41:31.0847] <bakkot>
aha, finally dug up previous discussion: https://github.com/domenic/promises-unwrapping/issues/105

[12:59:28.0757] <Mathieu Hofman>
So basically the problem is that `new Promise(res => res(thenable))` is not a clean stack but`Promise.resolve().then(() => thenable)` is a clean stack. As I mentioned earlier, I do believe that there would be a lot less code that will break if only the second case is made synchronous, since it'd be after a return, and thus I believe unlikely that any code would be relying on a new tick

[12:59:46.0162] <Mathieu Hofman>
 * So basically the problem is that `new Promise(res => res(thenable))` is not a clean stack but`Promise.resolve().then(() => thenable)\` is a clean stack. As I mentioned earlier, I do believe that there would be a lot less code that will break if only the second case is made synchronous, since it'd be after a return, and thus I believe unlikely that any code would be relying on a new tick

[12:59:54.0584] <Mathieu Hofman>
 * So basically the problem is that `new Promise(res => res(thenable))` is not a clean stack but`Promise.resolve().then(() => thenable)` is a clean stack. As I mentioned earlier, I do believe that there would be a lot less code that will break if only the second case is made synchronous, since it'd be after a return, and thus I believe unlikely that any code would be relying on a new tick

[13:01:25.0272] <bakkot>
the actual issue Justin Ridgewell was worried about arises from the first case, though

[13:01:56.0809] <Mathieu Hofman>
does it? My understanding was the adoption of a return promise

[13:02:43.0181] <Justin Ridgewell>
It falls out of the first case

[13:03:17.0877] <Justin Ridgewell>
The async functions implicit promise wrapper calls resolve with the return value

[13:03:51.0631] <Justin Ridgewell>
* The async functions implicit promise wrapper calls resolve with the return value

