2022-05-02
[12:37:13.0040] <TabAtkins>
I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the `forEach` methods just visit every entry "live" and can potentially run forever if the callback keeps adding entries.

[12:37:21.0583] <TabAtkins>
Is this behavior difference intentional?

[12:43:30.0619] <bakkot>
uh

[12:43:35.0503] <bakkot>
that's probably a bug from when we refactored those

[12:43:44.0682] <bakkot>
 * that's probably a bug from when we refactored those

[12:44:01.0233] <bakkot>
oh, wait, no it's not

[12:44:04.0055] <bakkot>
you missed a step:

[12:44:21.0127] <bakkot>
CreateMapIterator step 2.d.iii.6: Set numEntries to the number of elements of entries.

[12:44:36.0312] <TabAtkins>
Right, I mentioned that.

[12:44:50.0553] <bakkot>
no, that's in the loop

[12:45:03.0292] <bakkot>
it updates numEntries within the loop

[12:45:12.0743] <bakkot>
or I am not understanding your question

[12:45:53.0217] <TabAtkins>
Oh dang you're right, I *did* miss/misunderstand that.

[12:48:01.0968] <TabAtkins>
Hm then, the two methods can both run infinitely, ok. Is there a particular reason why the two have their iteration written significantly differently, or is that intended to just be an editorial detail? (Iterator goes over the entries by index and makes no mention of "empty" values; forEach iterates the entries list directly and explicitly jumps over "empty" values. (I note that "empty" is supposed to be a spec convenience for deleted entries and not an actual author-exposed thing.))

