2024-11-12
[13:01:49.0584] <Jan Olaf Martin>
Spent some time gathering data on the portability on various `import.meta` patterns across tools & runtimes. TL;DR: It's effectively impossible to write fully portable code (across bundling & SSR) that makes use of any `import.meta` API. :D https://bundlers.dev/javascript/modules/import.meta/

[13:40:50.0324] <littledan>
tbh I'm kinda upset that this import.meta thing caught on at all; it seems like an abuse of the API.

[13:47:13.0077] <Jan Olaf Martin>
It does repeat some mistakes that I've seen from import resolution as well: TC39 spec'd a syntax and left the semantics as an exercise to the reader without established spec venue.

[13:48:28.0780] <Jan Olaf Martin>
I'm hoping we can find a way to get those kinds of cross-tooling concerns specified somewhere to at least have a common core of things that can be expected to work consistently.

[13:51:44.0202] <littledan>
I tried to make a repo where we could work out together what various environments' import.meta would be, but it didn't catch on (since I got it mixed up in the whole built-in modules debate)

[13:52:11.0706] <littledan>
maybe we should revive that effort

[13:52:27.0652] <littledan>
https://github.com/littledan/js-shared-interfaces

[14:03:24.0644] <Jan Olaf Martin>
That looks really neat! I think I'd also want to specify things like module resolution - would that be in scope for what you had in mind with that repo?


2024-11-13
[07:11:19.0808] <littledan>
> <@jkrems:matrix.org> That looks really neat! I think I'd also want to specify things like module resolution - would that be in scope for what you had in mind with that repo?

maybe, yeah!

[07:11:31.0137] <littledan>
going straight for the hard stuff, eh

[08:16:21.0385] <Jan Olaf Martin>
Right now I'm just collecting a long list of "things that people depend on in their code that maybe should have actually defined behavior that tools officially agree on". Given the length of that list, I'd want to make sure that there's a single place to work on them. Otherwise it would likely be meeting/communication hell.

[08:16:47.0771] <littledan>
oh yeah I'd love to see that long list!

[08:20:37.0915] <Jan Olaf Martin>
happy to share, although it's currently on my company account so I can only easily share with individuals. if you give me your email, I can give you access though. it's already marked as non-internal.

[08:21:00.0163] <Jan Olaf Martin>
igalia?

[08:22:14.0602] <Jan Olaf Martin>
(I added both your chromium and igalia addresses if either of those work.)

[08:38:36.0174] <Jan Olaf Martin>
(https://docs.google.com/document/d/1C3io9oXDjgp-bMNn806DXidCyasd6kOLVrM8sSqESNY/edit?tab=t.0 - not sure if "request access" works)

[09:47:27.0105] <littledan>
(Chromium works, Igalia is inactive)

[09:48:31.0530] <littledan>
This is a really great list

[09:48:48.0453] <littledan>
And (unfortunately?) forms a multi-year agenda of work

[10:55:05.0093] <nicolo-ribaudo>
Is it ok if I request access too? ðŸ‘€

[12:55:39.0701] <littledan>
Jan Olaf Martin: you may be able to ask for a chromium.org account for this sort of thing, btw

[13:05:57.0840] <Jan Olaf Martin>
Good idea. I might just try to get my angular.io account set up for this which should have the equivalent effect.

[13:06:24.0133] <Jan Olaf Martin>
> <@nicolo-ribaudo:matrix.org> Is it ok if I request access too? ðŸ‘€

Yep, not meant to be secret! Granted access. :)

[13:07:12.0221] <littledan>
> <@jkrems:matrix.org> Good idea. I might just try to get my angular.io account set up for this which should have the equivalent effect.

wiz.dev when?

[13:07:45.0830] <Jan Olaf Martin>
It's likely the list is incomplete, it's biased towards bundlers specifically because I went through the popular bundler docs to find items to add

[13:08:05.0246] <littledan>
the syntax extensions section, for JSX and TypeScript, seems important

[14:37:08.0703] <Jan Olaf Martin>
https://docs.google.com/document/d/1rSTgcJIg1w2O3lM54T92bKmy7aOxNzBiS2qcnO23yYw/edit?tab=t.0 - moved to angular.io account now


2024-11-14
[21:24:15.0736] <Boshen Chen>
I saw pure comments in there. While working on Oxc, I had to follow the non-official pure comments spec https://github.com/javascript-compiler-hints/compiler-notations-spec/blob/main/pure-notation-spec.md

[21:25:37.0234] <Boshen Chen>
The `browsers` field had this spec https://github.com/defunctzombie/package-browser-field-spec

[06:10:21.0079] <littledan>
> <@boshen:matrix.org> I saw pure comments in there. While working on Oxc, I had to follow the non-official pure comments spec https://github.com/javascript-compiler-hints/compiler-notations-spec/blob/main/pure-notation-spec.md

whoa! I didn't know about that

[06:30:55.0071] <nicolo-ribaudo>
Me neither, even though Babel has been supporting it for years. I was always just checking manually what uglifyjs did ðŸ˜…

[08:29:36.0217] <Jan Olaf Martin>
I should add those links to the doc. Also should find Tobias' (?) gist where the webpack resolution behavior with exports is described which I think is close to the "standard" on that front..?

[08:35:04.0300] <Jan Olaf Martin>
(Maybe that gist is no more..? Or maybe I'm misremembering.)

[08:37:23.0699] <Jan Olaf Martin>
https://webpack.js.org/guides/package-exports/ maybe this page basically replaced it


2024-11-15
[20:38:05.0576] <Boshen Chen>
Current webpack maintainer is https://github.com/alexander-akait

We had some conversation regarding webpack resolution logic. The consensus is it should match the esm spec, it is a bug otherwise.

[20:39:43.0774] <Boshen Chen>
Reference: https://github.com/webpack/enhanced-resolve/issues/400

[08:59:58.0427] <Jan Olaf Martin>
I think my interest here was that the algorithm in nodejs docs doesn't cover some important details that aren't applicable to nodejs. Like when particular conditions should apply beyond what nodejs itself supports. The current two-split seems unfortunate.

[09:01:06.0301] <Jan Olaf Martin>
If we had a place to specify the full behavior end-to-end, it would no longer require "stitching together" of expectations, both for users and for implementers.


2024-11-23
[17:39:29.0860] <Jan Olaf Martin>
I'm still seeing the tooling calls scheduled but the agenda doc has no entries for the past year. Are they still happening?


2024-11-24
[17:55:39.0237] <littledan>
Romulo Cintra: ^

[14:15:55.0231] <Romulo Cintra>
> <@jkrems:matrix.org> I'm still seeing the tooling calls scheduled but the agenda doc has no entries for the past year. Are they still happening?

Hi, I paused the call for a while as the agenda and audience alignment were not "enough" to productive discussions. Recently, Iâ€™ve tried to reactivate it by asking participants to suggest agenda items. For now, Iâ€™m keeping the meeting on the calendar and monitoring whether thereâ€™s a solid agenda; if not, Iâ€™ll cancel it for that time

[14:16:23.0386] <Romulo Cintra>
Iâ€™m happy to hear your thoughts or suggestions...


2024-11-25
[16:01:33.0355] <Jan Olaf Martin>
> <@rcintra:igalia.com> Hi, I paused the call for a while as the agenda and audience alignment were not "enough" to productive discussions. Recently, Iâ€™ve tried to reactivate it by asking participants to suggest agenda items. For now, Iâ€™m keeping the meeting on the calendar and monitoring whether thereâ€™s a solid agenda; if not, Iâ€™ll cancel it for that time

I had a *vague* memory that this happened post-source map spinoff. Is the agenda doc still the SoT or is the agenda collected elsewhere?

[22:20:02.0016] <Boshen Chen>
It occurs to me that proposal-decorators fits right into the js-sugar proposal, it is stuck in build tools, with multiple versions.

