2022-07-01
[13:50:10.0331] <Kris Kowal>
Caridy (and by association Daniel) have convinced me that we can use `importMeta` as in `new Module(source, importHook, importMeta)` and in `importHook(importSpecifier, importMeta)` to stand in for a ‚Äúreferrer‚Äù and that every host environment would still be able to emulate every other host environment. The key is that `importMeta` is object identical in these cases so can be used to carry a gensym or as a key in a WeakMap, even though it‚Äôs not identical to the `import.meta` that the evaluated module sees (unless we change that in ecma262 too!).

[13:52:49.0047] <Kris Kowal>
Caridy and I have also come to an agreement that the next revision of the compartments proposal will reify the constructor named `Module` since we believe module harmony will likely mean `module {} instanceof Module`, where `Module(source, importHook, importMeta)` generates unlinked, linkable, initializable instances of modules.

[13:56:37.0723] <Kris Kowal>
I‚Äôve also agreed that there‚Äôs no need for the module constructor to _ever_ have an option to override the execution context of the module instances it creates. We can carve out a supplemental proposal for a reified `new ExecutionContext()` that would carry new evaluators `eval`, `Function`, and `Module` bound to the same \[\[Realm\]\]. Between `Module`, `ModuleSource`, and `ExecutionContext`, we would have everything we need to build compartments in user code. We could still go on to provide a `Compartment` constructor in the language, but the motivation would be ergonomics and performance, and would be entirely orthogonal to these primitives, which we agree ought to be exposed.

[13:58:01.0090] <Kris Kowal>
 * I‚Äôve also agreed that there‚Äôs no need for the module constructor to _ever_ have an option to override the execution context of the module instances it creates. We can carve out a supplemental proposal for a reified `new ExecutionContext()` that would carry new evaluators `eval`, `Function`, and `Module` bound to the same \[\[Realm\]\]. Between `Module`, `ModuleSource`, and `ExecutionContext`, we would have everything we need to build compartments in user code. We could still go on to provide a `Compartment` constructor in the language, but the motivation would be ergonomics and performance, and would be entirely orthogonal to these primitives, which we agree ought to be exposed.

[14:10:33.0757] <Kris Kowal>
I‚Äôve also convinced myself that, if module instances locally memoize the results of their `importHook` for both static and dynamic import, and since the import hook returns module instances, we can induce that import is sufficiently idempotent in aggregate to prevent all useful surprises. Compartments allow for those memos to be slightly more economical with memory, but probably not in any meaningful way in practice. Again, no reason we couldn‚Äôt have both in the fullness of time, but I‚Äôm convinced we should focus on the `Module` and `ModuleSource` primitives.

[14:12:03.0687] <Kris Kowal>
 * I‚Äôve also convinced myself that, if module instances locally memoize the results of their `importHook` for both static and dynamic import, and since the import hook returns module instances, we can induce that import is sufficiently idempotent in aggregate to prevent all useful surprises. Compartments allow for those memos to be slightly more economical with memory, but probably not in any meaningful way in practice. Again, no reason we couldn‚Äôt have both in the fullness of time, but I‚Äôm convinced we should focus on the `Module` and `ModuleSource` primitives.

[14:13:44.0585] <Kris Kowal>
I also believe that there is no better contender for the enormously self-assured name `Module`. My expectation is that `Module` will be backed by the Last Module Record type we ever need and that all meaningful extensions to the module system are different kinds of module source, not new kinds of module instance.

[14:19:03.0641] <Kris Kowal>
Caridy is focusing on a minimal layer that achieves parity with the current behaviors of ecma262, just reifying these two functions. I propose, in addition, that the `Module` constructor receives a ***Module Source Protocol*** implementation object, like `{bindings?, initialize?, needsDynamicImport?, needsImportMeta?}` which instances of `ModuleSource` happen to provide. This would be sufficient to define JSON, CommonJS, WASM, &c module sources in user code. However, that protocol would not be adequate to carry CSP information for vetted module sources and would not preclude the introduction of other host-defined module source classes. I expect only host-defined module source classes would be transmissible via structured clone and cary host-vetted origin metadata.

[14:21:24.0122] <Kris Kowal>
I‚Äôve also been convinced that the first argument to `initialize` should be called a ***Module Imports Namespace Exotic Object*** (not a reification of the entire definition of ***Module Environment Record***, just an exotic object that can be used to get and set the import and export bindings of the module, in its internal namespace.


2022-07-02
[19:45:36.0664] <Kris Kowal>
yulia: Goal: The ability to evaluate modules in isolated execution contexts and shared frozen intrinsics, or rather, a foundation on which that can be built.

[19:48:54.0163] <Kris Kowal>
That‚Äôs at least the pretext on which I can conscionably work on this as an Agoric delegate! As a JavaScript user, though, eval-but-for-modules has been a personal goal for a long while now. I proposed a `Module` constructor to TC39 in January of 2010!

[00:27:28.0346] <nicolo-ribaudo>
Kris Kowal I really like this new direction üëÄ


2022-07-03
[09:29:53.0611] <Jack Works>
> <@kriskowal:matrix.org> In any case, I sketched this, borrowing as much as possible from the Compartments proposal https://gist.github.com/kriskowal/288d38e62e55e09685bf62c3a3c25565

> The compartment will leave that promise to dangle, so an eventual rejection will necessarily go unhandled.

I don't agree with this part. If the module throws sync, it will become a sync error that can be caught, but if the promise dangles, I cannot handle it. This creates inconsistency in if module uses TLA or not

[09:35:26.0826] <Kris Kowal>
I also don‚Äôt like it, but couldn‚Äôt think of an alternative behavior. Answering that point consistently with the current host behavior would be ideal.

[09:36:05.0725] <Kris Kowal>
But also, if we reduce the scope to `Module` and `ModuleSource` constructors, I don‚Äôt believe we have to answer the question in our proposal.

[09:36:13.0433] <Jack Works>
Can't it spread to where the import happens? 

[09:36:52.0936] <Kris Kowal>
Is that the behavior of dynamic import for a module and its transitive dependencies when any of them contains top-level-await?

[09:37:05.0742] <Kris Kowal>
Genuinely, not an expert on TLA.

[09:38:03.0609] <Kris Kowal>
That is, does the promise returned by dynamic import settle only when all of the transitive dependencies settle for TLA?

[09:38:48.0534] <Jack Works>
And I wonder how much code I need to write in the user land for the housekeeping work (e.g. module caching stuff), so I can emulate a normal ES module environment (with some built-in modules and a relative path module resolution)? I would like to see an example. 

[09:39:35.0561] <Jack Works>
> <@kriskowal:matrix.org> Is that the behavior of dynamic import for a module and its transitive dependencies when any of them contains top-level-await?

I believe so, otherwise what should be the result of that dynamic import? 

[09:40:15.0764] <Kris Kowal>
The promise returned by dynamic import could settle after all first turns are completed.

[09:40:31.0928] <Kris Kowal>
Not that I think that‚Äôs sensible, but I don‚Äôt assume.

[09:40:43.0435] <Kris Kowal>
And I haven‚Äôt yet read :-)

[09:41:43.0331] <Kris Kowal>
In any case, I think it will be sufficient to fix that text to match whatever already exists, or delete it if we don‚Äôt have to specify the behavior in the module loader / compartments proposal.

[09:42:15.0129] <Kris Kowal>
As for how much needs to be done in user code, I need to write a sketch of implementing Compartment in user code, in terms of Module, ModuleSource, and ExecutionContext constructors.

[09:42:25.0313] <Kris Kowal>
I‚Äôm expecting to write a couple hundred lines.

[09:46:22.0302] <Kris Kowal>
Again, I know almost nothing about top-level-await, having not used it nor watched the proposal develop. Very much dependent on an expert to call out the right answer for sinking promises.


2022-07-04
[01:09:09.0166] <yulia | Out of Office until July 11th>
I am -sick as heck- y'all

[01:09:20.0802] <yulia | Out of Office until July 11th>
I will not be able to run the meeting on wednesday, or attend at all 

[01:09:31.0140] <yulia | Out of Office until July 11th>
shu: do we have an alternative facilitator?


2022-07-05
[02:27:08.0275] <Surma>
Can someone add surma@shopify.com to the calendar invite for the recurring Loader meeting?

[02:27:14.0599] <Surma>
yulia | Out of Office until July 11th: Hope you feel better soon!

[09:51:11.0876] <littledan>
Surma: Note that you may be able to add the whole TC39 calendar for yourself from https://calendar.google.com/calendar/u/0/embed?src=mozilla.com_l7b50itpaa9bnrvr61nebqrne8@group.calendar.google.com&ctz=America/Los_Angeles

[10:19:53.0276] <Surma>
> <@littledan:matrix.org> Surma: Note that you may be able to add the whole TC39 calendar for yourself from https://calendar.google.com/calendar/u/0/embed?src=mozilla.com_l7b50itpaa9bnrvr61nebqrne8@group.calendar.google.com&ctz=America/Los_Angeles

Yeah i did do that! Thank you! I'm just keen to get a reminder for this specific one ;)

[10:49:30.0117] <Kris Kowal>
> <@yulia:mozilla.org> shu: do we have an alternative facilitator?

I believe I should shadow a facilitator before I volunteer for that role, but if nobody steps up, I will definitely do my best impression. My understanding is that this mostly involves making sure agenda and minutes get captured, in addition to shepherding the meeting.

[10:53:22.0418] <Kris Kowal>
I‚Äôve sketched an agenda:
1. Overflow from my kick-off on Module Harmony thru the Compartments lens
2. nicolo-ribaudo on Module Harmony thru the lens of Module Blocks‚Äôs emerging spec text
3. caridy on minimum-viable first-class Module and ModuleSource

[10:57:36.0591] <Kris Kowal>
I believe yulia | Out of Office until July 11th had in mind some important front-matter to get us all on the same page for each other‚Äôs hopes and expectations from module harmony, which I think we ought to pursue as early as possible. I can also attempt to facilitate that, though I‚Äôm also not confident I can fill Yulia‚Äôs shoes.

[10:58:01.0167] <Kris Kowal>
That is, in fact, probably more important to articulate than any of the above.

[10:59:09.0463] <Kris Kowal>
To that end, please give me a thumbs up here if you‚Äôre prepared to speak to your own hopes and expectations of Module Harmony tomorrow.

[10:59:25.0990] <Kris Kowal>
Perhaps we can do a round-the-room.

[11:02:57.0355] <Kris Kowal>
(And of course, I hope any other convener can lead this conversation since I don‚Äôt expect anyone to trust my impartiality!)

[11:56:22.0627] <littledan>
I can help with convening if Yulia is out but at the same time maybe we should just wait until she gets back?

[13:27:00.0177] <Kris Kowal>
> <@littledan:matrix.org> I can help with convening if Yulia is out but at the same time maybe we should just wait until she gets back?

This would probably be wise, as the premise of this harmony group is to keep all stakeholders on the same page.

[13:28:38.0262] <littledan>
I'd like to propose, for an upcoming meeting, a discussion of how we've figured out how a lot of the space factors into three mostly orthogonal proposals (module reflection, module blocks/fragments, and the loader) since I think we made a lot of progress on that in the past couple weeks

[13:29:53.0281] <Kris Kowal>
Agreed. I‚Äôd also like to focus on how the points of intersection appear to be coherent.

[13:30:11.0313] <littledan>
top agenda item: How do we name ModuleInstance/ModuleBlock :)

[13:30:49.0793] <Kris Kowal>
I think with some effort over the next week, we could arrive at the harmonious conclusion: `Module`.

[13:31:44.0081] <Kris Kowal>
And the desugarring of `module {}` to `new Module()`.

[13:32:24.0406] <littledan>
hmm, maybe. I feel suspicious but I'm fine with that as a working title

[13:32:28.0927] <Kris Kowal>
It seems likely to me that, even if the notion of a `Compartment` survives, the notion of a module descriptor probably merges into `Module` instances.

[13:32:38.0358] <littledan>
(basically for the reasons you gave in your last presentation)

[13:32:45.0697] <Kris Kowal>
Yes, rightly suspicious.

[13:33:39.0187] <Kris Kowal>
Some of my thinking, chronicled above, has changed over the last couple weeks.

[13:35:00.0192] <Kris Kowal>
Since Caridy‚Äôs been challenging my assumption that 262 would need to subsume module maps. Nicol√≤ has also been moving in the direction of subsuming module maps. Not sure whether we‚Äôve crossed positions, but that would be funny.

[13:35:28.0963] <littledan>
huh, what do you mean by subsuming module maps?

[13:39:39.0171] <Kris Kowal>
And Nicol√≤ also learned this morning that HTML anchors module maps in an unexpected place: on module instances. That‚Äôs surprisingly consistent with what Caridy is proposing.

[13:41:30.0314] <Kris Kowal>
I mean that module maps are currently implied into existence by 262, through host behaviors. There isn‚Äôt a [[ModuleMap]], say, on a Realm record. (Qualifier: this is hearsay. I‚Äôm not sufficiently intimate with 262 to purport the non-existence of anything within its pages.)

[13:43:58.0724] <Kris Kowal>
Caridy‚Äôs driving toward a simplification of the compartment proposal that notably omits Compartment. I‚Äôm convinced that it‚Äôs functionally equivalent, even up to preserving all useful idempotence invariants and compatibility with our hardened JavaScript objectives. Omitting compartments effectively moves all module memoization behavior to a new kind of concrete Module Record, say, Virtual Module Record, which would be re√Øfied by a `new Module` constructor.

[13:45:11.0180] <nicolo-ribaudo>
(note: the specific word in html for module instances is "module scripts")

[13:45:16.0041] <Kris Kowal>
And I understand that you, Daniel Ehrenberg , provided the useful insight that the `importMeta` is sufficient to imply a referrer without having a dedicated referrer argument on a `Module` constructor.

[13:47:45.0526] <nicolo-ribaudo>
I have to think about this more, but after I talked with you (Kris) I'm convinced that my direction and how I understood Caridy's direction from you are not inconciliabile 

[13:48:14.0732] <nicolo-ribaudo>
Always assuming that compartments/"reified modules" are exactly as much powerful as hosts

[13:48:40.0726] <nicolo-ribaudo>
* Always assuming that compartments/"reified modules" are exactly as much powerful as hosts

[13:48:47.0516] <Kris Kowal>
My opinion is that, to use the name `Module`, it must be exceedingly worthy. That is to say, there must never come a time in the evolution of 262 that we reify an object that is worthier of the title or create a class where this particular kind of module is no more special that the others. I believe it meets that criterion iff it turns out that all specialization of modules going forward is sufficiently addressed with new types of Static Module Record.

[13:49:24.0368] <Kris Kowal>
> <@nicolo-ribaudo:matrix.org> I have to think about this more, but after I talked with you (Kris) I'm convinced that my direction and how I understood Caridy's direction from you are not inconciliabile

Is this to say, you believe these directions are compatible?

[13:50:26.0173] <Kris Kowal>
I‚Äôm hopeful that they are.

[13:50:27.0693] <nicolo-ribaudo>
Yes. The things I added in the modules block spec are all "spec internals", and they shouldn't affect the exposed API in any way

[13:51:09.0487] <littledan>
> <@kriskowal:matrix.org> And I understand that you, Daniel Ehrenberg , provided the useful insight that the `importMeta` is sufficient to imply a referrer without having a dedicated referrer argument on a `Module` constructor.

Caridy seems to have run with this further than I thought possible

[13:51:36.0108] <Kris Kowal>
We may have run together.

[13:51:45.0350] <Kris Kowal>
So I‚Äôll unpack what we learned.

[13:52:22.0681] <littledan>
> <@nicolo-ribaudo:matrix.org> (note: the specific word in html for module instances is "module scripts")

Can I also say that I don't like this name either? :)

[13:52:46.0362] <nicolo-ribaudo>
Yes, it's the most confusing name possible 

[13:52:59.0510] <Kris Kowal>
Assuming `new Module(source, importHook, importMeta)` is sufficient, `importMeta` is _not_ identical to `import.meta` as seen by the source, but _is_ identical to the object received by `importHook` to address the referrer, as in `importHook(importSpecifier, importMeta) => Promise<Module>`.

[13:53:54.0579] <Kris Kowal>
That is to say, that in user code, one can arrange a side table from `importMeta` to `referrer` and it‚Äôs sufficient that import hooks know about it.

[13:54:20.0126] <littledan>
I was thinking about it and... I'm not sure if importHook is at the same level as importMeta. At least, when serializing and deserializing a Module, you'll often preserve the importMeta and swap in a new importHook

[13:54:31.0417] <littledan>
(along with giving it a new identity)

[13:54:34.0452] <Kris Kowal>
That allows for the possibility, as is necessarily the case for some environments, that neither `import.meta.url` and `import.meta.resolve` are available for an `importHook` to use, much less necessarily trust.

[13:54:55.0388] <littledan>
"preserve" importMeta in an abstract sense, though--it will surely be a different object identity

