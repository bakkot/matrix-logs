2022-09-02
[07:07:39.0107] <nicolo-ribaudo>
If anyone is interested to see how the hooks change looks on the HTML side: https://github.com/whatwg/html/pull/8253


2022-09-23
[17:23:31.0116] <Kris Kowal>
yulia | OOO until sept 26th: I’ve started working on a Module Harmony tech tree, arrows from motivating uses cases to features. To get there, I’m starting with a sketch of the graph, instead of starting with prose. I’m this far: https://gist.github.com/kriskowal/268d46617cd68015b811a2f5fdaf3217


2022-09-24
[00:09:44.0032] <Jack Works>
https://github.com/tc39/proposal-compartments/pull/78/

I tried to implement this change but I found it is invalid

[00:10:00.0188] <Jack Works>
the referral parts goes away

[08:20:45.0763] <Kris Kowal>
At the last SES meeting, we agreed that I’d add a non-normative note that the "options bag" is passed as `this` to the hooks, so you can use `this.referrer` in an `importHook`.

[08:24:34.0417] <Jack Works>
> <@kriskowal:matrix.org> At the last SES meeting, we agreed that I’d add a non-normative note that the "options bag" is passed as `this` to the hooks, so you can use `this.referrer` in an `importHook`.

That's very unintuitive 

[08:24:58.0459] <Jack Works>
Proxy handler supports sharing between multiple proxy

[08:25:13.0607] <Jack Works>
And it's real target is given by the first argument 

[08:25:48.0100] <Jack Works>
If this design requires different object instance for each module, it will be a performance cliff 

[08:52:30.0456] <Kris Kowal>
I’ve been unable to convince Caridy that referrer should be explicitly mentioned. He’s quite adamant about leaving it to user code.

[08:52:53.0666] <Kris Kowal>
Caridy does accept that the hooks themselves cannot be per-module closures.

[08:54:38.0427] <Kris Kowal>
In any case, Caridy is the one among us who needs to be convinced. In our last SES call, Caridy convinced Mark and me at least that his design does not limit expressivity.

[09:09:10.0530] <nicolo-ribaudo>
The middle ground between Caridy's and Jack's positions is to use `new Module(source, handler, thisArg/context)`, rather than mixing the handler and the thisArg in the same parameter. This also feels cleaner, since we have a clearly separation between "an object with clearly defined properties" and "something that the user can use as they wish"

