2022-11-02
[15:22:29.0025] <Kris Kowal>
nicolo-ribaudo: I got a question from guybedford and want to confirm weâ€™re on the same page: reflective import would advance the module to loaded but not to linked and its dependencies wonâ€™t be loaded.

[15:23:24.0917] <Kris Kowal>
I can easily imagine `import(x, {reflect: true, state: 'linked'})` or some such would load transitive dependencies without initializing or executing.

[15:27:03.0806] <nicolo-ribaudo>
Right, it would not load it's dependencies.
However, I hope it will not just result in a ModuleSource but in something that contains all the info necessary to later load&link it's dependencies 

[15:30:11.0313] <nicolo-ribaudo>
"would advance the module to loaded" -> Informally yes. Formally, it doesn't advance the module's state because the first state change happens when loading all its dependencies. It just makes us go from "I have nothing" to "I have a Module/ModuleSource"

[15:30:56.0550] <Kris Kowal>
I assume it would not be an observable optimization if the Module Record was born with a null pointer to the structs needed to advance past the loaded state.

[15:34:41.0394] <Kris Kowal>
We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.

[15:36:52.0569] <Kris Kowal>
In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.

[15:37:29.0147] <nicolo-ribaudo>
> <@kriskowal:matrix.org> We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.

Yeah, we are not solving deferred execution.
I'm almost hoping we can have `import.link(module) -> Promise` and `import.evaluateSync(module)` ðŸ˜¬

[15:38:02.0820] <nicolo-ribaudo>
> <@kriskowal:matrix.org> In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.

I'm 100% aligned with that. I have use cases for not loading the whole graph, and import reflection should be shallow.

[15:39:09.0823] <nicolo-ribaudo>
For JS, it's exactly like `module { export * from "x" }` which doesn't load the graph until the block is imported (except that reflection loads "x", this almost-equivalent-module-block doesn't)

[15:39:46.0210] <nicolo-ribaudo>
* Yeah, we are not solving deferred execution.
I'm almost hoping we can have `import.link(module) -> Promise` and `import.evaluateSync(module)` ðŸ˜¬

[15:40:04.0769] <Kris Kowal>
Right, I expect module expressions to be shallow too.

[15:40:22.0836] <Kris Kowal>
Same reasons. They might be sent somewhere their linkage is possible even if thatâ€™s not local.


2022-11-03
[20:47:01.0506] <littledan>
Yeah, being shallow is critical for the Wasm case as those module specifiers could be interpreted completely differently

[20:47:14.0959] <littledan>
* Yeah, being shallow is critical for the Wasm case as those module specifiers could be interpreted completely differently

[15:16:33.0555] <nicolo-ribaudo>
Kris Kowal: Could you link https://tc39.es/proposal-compartments/0-module-and-module-source.html maybe in the proposal readme, or as the website of the reposory? To make it easer to find it withuot having to manually copy the filename into the url ðŸ˜…

[15:17:12.0396] <Kris Kowal>
READMEâ€™s a good spot for that. Thanks!

[15:23:43.0302] <guybedford>
very glad to hear shallow reflections can work, and I'm still hopeful we can tackle good lazy loading scenarios properly as well

[15:23:47.0268] <guybedford>
 * very glad to hear shallow reflections can work, and I'm still hopeful we can tackle good lazy loading scenarios properly as well

[15:24:22.0430] <guybedford>
Apologies as well I haven't made the modules meetings for a while, will aim to be at the next one if it is still on

[15:30:23.0373] <Kris Kowal>
https://github.com/tc39/proposal-compartments/pull/86


2022-11-04
[07:55:02.0650] <littledan>
> <@guybedford:matrix.org> very glad to hear shallow reflections can work, and I'm still hopeful we can tackle good lazy loading scenarios properly as well

Yeah, shallow reflection corresponds exactly to what we want for module expressions anyway--you shouldn't load those dependencies until you load that module

[07:55:08.0723] <littledan>
> <@guybedford:matrix.org> Apologies as well I haven't made the modules meetings for a while, will aim to be at the next one if it is still on

same!

