2022-11-02
[15:22:29.0025] <Kris Kowal>
nicolo-ribaudo: I got a question from guybedford and want to confirm weâ€™re on the same page: reflective import would advance the module to loaded but not to linked and its dependencies wonâ€™t be loaded.

[15:23:24.0917] <Kris Kowal>
I can easily imagine `import(x, {reflect: true, state: 'linked'})` or some such would load transitive dependencies without initializing or executing.

[15:27:03.0806] <nicolo-ribaudo>
Right, it would not load it's dependencies.
However, I hope it will not just result in a ModuleSource but in something that contains all the info necessary to later load&link it's dependencies 

[15:30:11.0313] <nicolo-ribaudo>
"would advance the module to loaded" -> Informally yes. Formally, it doesn't advance the module's state because the first state change happens when loading all its dependencies. It just makes us go from "I have nothing" to "I have a Module/ModuleSource"

[15:30:56.0550] <Kris Kowal>
I assume it would not be an observable optimization if the Module Record was born with a null pointer to the structs needed to advance past the loaded state.

[15:34:41.0394] <Kris Kowal>
We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.

[15:36:52.0569] <Kris Kowal>
In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.

[15:37:29.0147] <nicolo-ribaudo>
> <@kriskowal:matrix.org> We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.

Yeah, we are not solving deferred execution.
I'm almost hoping we can have `import.link(module) -> Promise` and `import.evaluateSync(module)` ðŸ˜¬

[15:38:02.0820] <nicolo-ribaudo>
> <@kriskowal:matrix.org> In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.

I'm 100% aligned with that. I have use cases for not loading the whole graph, and import reflection should be shallow.

[15:39:09.0823] <nicolo-ribaudo>
For JS, it's exactly like `module { export * from "x" }` which doesn't load the graph until the block is imported (except that reflection loads "x", this almost-equivalent-module-block doesn't)

[15:39:46.0210] <nicolo-ribaudo>
* Yeah, we are not solving deferred execution.
I'm almost hoping we can have `import.link(module) -> Promise` and `import.evaluateSync(module)` ðŸ˜¬

[15:40:04.0769] <Kris Kowal>
Right, I expect module expressions to be shallow too.

[15:40:22.0836] <Kris Kowal>
Same reasons. They might be sent somewhere their linkage is possible even if thatâ€™s not local.


2022-11-03
[20:47:01.0506] <littledan>
Yeah, being shallow is critical for the Wasm case as those module specifiers could be interpreted completely differently

[20:47:14.0959] <littledan>
* Yeah, being shallow is critical for the Wasm case as those module specifiers could be interpreted completely differently

[15:16:33.0555] <nicolo-ribaudo>
Kris Kowal: Could you link https://tc39.es/proposal-compartments/0-module-and-module-source.html maybe in the proposal readme, or as the website of the reposory? To make it easer to find it withuot having to manually copy the filename into the url ðŸ˜…

[15:17:12.0396] <Kris Kowal>
READMEâ€™s a good spot for that. Thanks!

[15:23:43.0302] <guybedford>
very glad to hear shallow reflections can work, and I'm still hopeful we can tackle good lazy loading scenarios properly as well

[15:23:47.0268] <guybedford>
 * very glad to hear shallow reflections can work, and I'm still hopeful we can tackle good lazy loading scenarios properly as well

[15:24:22.0430] <guybedford>
Apologies as well I haven't made the modules meetings for a while, will aim to be at the next one if it is still on

[15:30:23.0373] <Kris Kowal>
https://github.com/tc39/proposal-compartments/pull/86


2022-11-04
[07:55:02.0650] <littledan>
> <@guybedford:matrix.org> very glad to hear shallow reflections can work, and I'm still hopeful we can tackle good lazy loading scenarios properly as well

Yeah, shallow reflection corresponds exactly to what we want for module expressions anyway--you shouldn't load those dependencies until you load that module

[07:55:08.0723] <littledan>
> <@guybedford:matrix.org> Apologies as well I haven't made the modules meetings for a while, will aim to be at the next one if it is still on

same!


2022-11-08
[08:35:07.0948] <shu>
i will not be to attend next meeting; this and next week conflict with some chrome events (blinkon next week, some other thing this week)

[08:57:03.0954] <Kris Kowal>
We did not prepare an agenda. If guybedford is prepared to show us some WASM integration, this would probably be a fine meeting to do so.

[09:00:22.0364] <guybedford>
I guess we could work through a status update of the various specs perhaps since we haven't had a sync in a while

[09:01:52.0141] <guybedford>
not much to show for Wasm right now short of the basic reflection use case which we can always go through again, but was actually considering giving a more in depth Wasm components intro as a TC39 presentation possibly for the next meeting

[09:02:26.0754] <guybedford>
(and sorry just fumbling for the meeting link here!)

[10:06:52.0371] <yulia>
oh, we still had another half hour on the time

[10:08:39.0860] <nicolo-ribaudo>
Dinner time for all of us near GMT, it's fine to end earlier :P

[10:10:32.0205] <nicolo-ribaudo>
Mathieu Hofman I was wrong, `(async function f() { try { await import("data:text/javascript, throw new Error()") } catch (e) { return console.log("STACK", e.stack) } })()` doesn't leak the function name neither in Chrome nor in Firefox.

The error stack contains the function name only when the error is a CSP error, but in that case it throws fresh errors every time.

[11:26:15.0748] <Mathieu Hofman>
interesting that the CSP error contains more information

[11:26:48.0920] <Mathieu Hofman>
We really need to move the error stack proposal forward to put them within tc39 scope

[11:31:30.0854] <littledan>
My understanding from comments from shu was that adding an error stack API wouldn't cause browsers to necessarily change how they expose non-standard information. I think you'd have to persuade them to make those changes more directly.

[11:31:49.0397] <littledan>
(please correct me if I misunderstood)

[11:40:56.0250] <Mathieu Hofman>
The main problem is that right now it's hard to talk about stacks in the spec, and what information can and cannot be exposed through them

[11:41:37.0884] <Mathieu Hofman>
We're seeing this with the ShadowRealm proposal, we're seeing it potentially with the lazy/deferred module loading.

[11:42:26.0643] <Mathieu Hofman>
it may or may not be a problem for any changes we want to make to promises as well

[11:42:47.0462] <littledan>
this relates a lot to the lack of a shared model for what constitutes an information leak, though

[11:42:49.0813] <shu>
i haven't checked since last time this was brought up but littledan's summary still sounds accurate

[11:43:13.0472] <littledan>
(and I think this is not as simple as documenting what the SES group believes is an information leak--there is a sort of ideological disagreement)

[11:43:42.0739] <Mathieu Hofman>
burring out head in the sand pretending stacks don't exist is not right, as programs very much can observe them and change their execution

[11:44:04.0821] <shu>
who is doing that in your opinion, tc39?

[11:44:44.0161] <littledan>
yeah, so I think the project of addressing these leaks will consist more of persuading folks about these issues, more than exposing an additional stack API

[11:45:18.0499] <Mathieu Hofman>
I believe we/tc39 keep forgetting that some changes may have visible impact through stack information

[11:45:55.0567] <Mathieu Hofman>
because stacks are not currently defined anywhere in ecma262

[11:46:25.0874] <littledan>
my point is, you're misanalyzing the causation there

[11:46:54.0048] <littledan>
causality? cause?

[11:46:58.0209] <Mathieu Hofman>
today on the call, noone was sure of the content of the stack property for an error contructed during evaluation of dynamically imported module 

[11:48:18.0061] <Mathieu Hofman>
we all somewhat agreed that having potentially different evaluation behavior based on the dynamic import stack would be weird

[11:48:19.0675] <littledan>
if we add an additional stack API, the existing ones will continue to exist, so it wouldn't really resolve that...

[11:49:30.0443] <Mathieu Hofman>
I think it'd provide a place to explicitly discuss and eventually agree on what stack frames should reveal or not

[11:50:39.0132] <littledan>
well, it would risk being ambiguous if we don't know whether it applies to the existing APIs. Anyway, the first thing we'll need to do in that discussion is resolve exactly that persuasion/ideological issue I mentioned.

[11:52:26.0479] <Mathieu Hofman>
fair

