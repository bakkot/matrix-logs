2023-01-03
[00:05:22.0699] <nicolo-ribaudo>
I will unfortunately skip the call today, I'll be traveling at that time. See you in two weeks!

[00:54:12.0578] <Mathieu Hofman>
@annevk wrote in General:
> yulia | sick:  littledan:  I could make the Module Loading call tonight if that's helpful, please lmk
https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oeD0yH7tagpCoRrR4gbgusb0fzM1ydOzWLIasu1T2ng?via=matrix.org&via=mozilla.org&via=igalia.com

[04:52:37.0102] <Luca Casonato>
> <@nicolo-ribaudo:matrix.org> I will unfortunately skip the call today, I'll be traveling at that time. See you in two weeks!

Me too!

[06:47:49.0288] <littledan>
Let's declare this time cancelled, if Yulia is also sick

[06:47:58.0400] <littledan>
also let's invite Anne tot his room

[08:19:27.0746] <Jack Works>
Do we have an agenda today 

[09:01:11.0009] <Kris Kowal>
We do not. I concur with the overall sentiment. We’ll convene in two weeks. I’ll invite Anne to this room.

[09:02:42.0966] <Jack Works>
Ok (btw I'm also on a sick leave until Jan 16)

[09:03:03.0946] <Jack Works>
* Ok (btw I'm also on a sick leave until Jan 16)

[09:05:13.0895] <Kris Kowal>
For agenda building for N*2 weeks from now, I’d like for us to plan to meet with bakkot to improve our understanding of the feedback from the previous plenary. That may be an opportunity to prepare and dry-run a module harmony presentation-of-presentations.

[09:06:02.0440] <Kris Kowal>
I still am on the hook to refactor the compartments proposal into epic-module-harmony and proposal-module-constructor etc.

[09:19:23.0229] <Kris Kowal>
Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether `import(new Module(new ModuleSource(text)))` qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).

[09:20:15.0414] <littledan>
I also nominate following up on the import assertions design discussion, as an agenda item next fortnight. And I nominate peetk and nicolo-ribaudo to lead that discussion :)

[09:20:23.0893] <Kris Kowal>
We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.

[09:21:32.0044] <littledan>
> <@kriskowal:matrix.org> We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.

I'd propose that we organize that like, annevk recaps his understanding of the problem we need to solve, then nicolo-ribaudo / peetk outline the possible solution we've been discussing, then annevk shares thoughts

[09:22:09.0440] <Kris Kowal>
@annevk are you available +1 fortnight?

[09:23:27.0076] <Kris Kowal>
Also, thank you littledan, I’m ecstatic to find company in which biweekly isn’t a word.

[10:26:30.0385] <bakkot>
> <@kriskowal:matrix.org> Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether `import(new Module(new ModuleSource(text)))` qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).

To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.

[10:39:01.0634] <annevk>
Kris Kowal: yeah that should work

[10:39:33.0196] <littledan>
> <@bakkot:matrix.org> To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.

I think the decision about whether we expose a ModuleSource constructor which takes a string argument is extremely separable from everything else. We've heard bakkot say he doesn't want it, ljharb say he wants it, and others seem OK multiple ways. I don't think the decision here will affect any other part of the APIs we've been discussing, and I think we have a very clear shared understanding of what it would do if it does exist.

[10:42:35.0222] <littledan>
(so, I think it should be treated as a post-Stage 2, pre-Stage 3 decision, having been fully scoped out)

[10:44:41.0399] <littledan>
(still fine to hear out bakkot more, but I think he was plenty clear in plenary?)

[10:46:49.0036] <littledan>
(I think the answer to the question is: clearly yes)

[10:47:18.0543] <Kris Kowal>
> <@bakkot:matrix.org> To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.

Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).

[10:50:15.0077] <Kris Kowal>
That is, being able to parse a string’s static imports and exports is currently subsumed by the ModuleSource(text) constructor but does not necessarily need to be on the path to importing the text. That can be recovered either by a parse bindings function sitting somewhere else, or by rendering module source instances constructed by ModuleSource(text) unusable (which is consistent with what a CSP would do anyway)

[10:50:46.0051] <Kris Kowal>
And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.

[10:51:17.0304] <Kris Kowal>
 * And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.

[10:53:57.0222] <Kris Kowal>
I suspect that the strongest case for a path-to-eval is a debugging environment, with hot module replacement occurring client-side, such that the runtime behavior more closely resembles a production environment than is possible to achieve with the current tooling ecosystem.

[11:02:31.0555] <bakkot>
> bundle, web archive, or import map generation

Those seem like somewhat niche use cases which would be adequately met by userland parsers, to me? Doesn't seem like support for those things would need to be built into the language.

[11:02:55.0951] <bakkot>
We already have pure-JS bundlers, after all.

[11:04:37.0477] <bakkot>
(I'm not saying they're niche things for developers to do, just that they're niche things to do _in code which is shipped to users_; when building something into the language the latter is more relevant.)

[11:05:19.0566] <Kris Kowal>
I agree that the value is bounded in this way.

[11:07:47.0218] <Kris Kowal>
And other motivating use cases I can expound upon do not involve web browsers, so I expect them to be less convincing.

[11:13:45.0698] <Kris Kowal>
For example, at Agoric, we would like to ship programs to workers as zip files containing the original sources. The workers would use the ModuleSource constructor to build out the module graph. We’re also avoiding source-to-source transforms so that audits are more transparent. The auditor can review the code and not worry about holes that would be opened by generated code. We’re currently unable to do this because our shim has to funnel module code through eval, so we necessarily have to do a module-to-program transform, and since that is prohibitively expensive, our zip files currently contain a JSON blob that contains the program and the bindings.

[11:15:02.0455] <Kris Kowal>
And notably, Agoric/Endo execution environments do not employ CSP but do harden the worker realm and confine guest programs, so the trade-offs are different. It would be fair to call our case niche, but not unimportant.

[11:15:35.0135] <Kris Kowal>
Rather, I’d call it nascent.

[11:17:53.0622] <Kris Kowal>
(For example, the very common babel facebook/regenerator runtime introduces thawn-objects in a way that would not be obvious to an auditor and would open a program to interference that would otherwise not be possible.)

[11:19:05.0665] <Kris Kowal>
A consequence of the current language limitations is that a debugger attached to a production heap snapshot can’t match stack traces with local code artifacts.

[11:34:24.0568] <bakkot>
If you could import a reified-but-not-evaluated `Module` and structuredClone it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?

[11:35:04.0882] <bakkot>
(import or otherwise obtain in some manner other than constructing from a string, as would be provided some of these proposals IIUC)

[11:35:27.0449] <bakkot>
 * If you could import a reified-but-not-evaluated `Module` and `postMessag` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?

[11:35:31.0523] <bakkot>
 * If you could import a reified-but-not-evaluated `Module` and `postMessage` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?

[11:35:43.0882] <Kris Kowal>
postMessage is not available in the particular context.

[11:36:15.0530] <Kris Kowal>
Though a suitable postMessage could be implemented in terms of ModuleSource.

[11:36:48.0712] <bakkot>
Wait, so how are you getting stuff into a worker without postMessage?

[11:37:05.0909] <Kris Kowal>
I’m using the term Worker loosely. This is a Node.js or XS child process.

[11:37:32.0792] <bakkot>
Node has postMessage - though I guess not to actual child processes spawned with `exec` or whatever.

[11:38:42.0176] <Kris Kowal>
Aye, and process isolation is key. XS too. The application can resume from snapshot.

[11:43:01.0647] <bakkot>
Since you're targeting specific platforms, can you not hook into the runtime with native code and get at bindings that way? Or roll your own native `ModuleSource`-equivalent constructor, for that matter?

[11:43:33.0635] <bakkot>
I guess V8 might not expose the things you'd need, though that's in principle solvable.

[11:43:39.0069] <Kris Kowal>
XS implements ModuleSource effectively. We are working in that direction, yes.

[11:46:56.0754] <Kris Kowal>
There’s also a course to having these applications portable-to-web using XS on WASM. This is of course, not ideal, but certainly suitable for evidence of motivation :-P 

[11:55:42.0130] <Kris Kowal>
And also the course of using a Service Worker to pop the zip open. My feeling is that’s got its own trade-offs.

[11:57:43.0232] <Kris Kowal>
And of these options, having ModuleSource provided by the language is the most portable.

[11:58:20.0866] <Kris Kowal>
The alternatives require assumptions of a shared foundation that does not exist.

[13:57:01.0862] <bakkot>
Spawning a new process is fundamentally not portable to begin with, so I'm not sure why portability matters here

[14:11:53.0737] <Kris Kowal>
Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.

[14:12:07.0846] <Kris Kowal>
 * Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.

[14:12:39.0625] <bakkot>
Well, neither does parsing the bindings out of a string, in principle

[14:12:57.0242] <Kris Kowal>
Not requiring I/O is a pretty big deal. Dynamic import currently creates an exfiltration channel.

[14:13:20.0379] <Kris Kowal>
> <@bakkot:matrix.org> Well, neither does parsing the bindings out of a string, in principle

And executing JavaScript, in principle!

[14:15:08.0868] <bakkot>
Well, right - evaluating JS is a weird and dangerous thing to do, so it's best not to expose a language-level capability for doing that, but specialist applications can (and do) do it in userland if they really need to. Seems like this use of `eval` is pretty analogous, to me.

[14:15:10.0547] <Kris Kowal>
So, one of the intertwingled concerns is that Agoric/Endo prevents that exfiltration channel. Currently, we do that by censoring the word `import`, which has a number of inconvenient false positives and artificially limits how much extant code can participate on the platform.

[14:15:40.0352] <Kris Kowal>
> <@bakkot:matrix.org> Well, right - evaluating JS is a weird and dangerous thing to do, so it's best not to expose a language-level capability for doing that, but specialist applications can (and do) do it in userland if they really need to. Seems like this use of `eval` is pretty analogous, to me.

Agreed.

[14:16:16.0616] <Kris Kowal>
And equally worthy of existence, in my opinion.

[14:17:10.0139] <bakkot>
... Which is to say, not, or do you have a different impression of the net benefit of `eval` than I do?

[14:17:11.0487] <Kris Kowal>
Except direct eval. That can die in a fire.

[14:18:10.0176] <Kris Kowal>
> <@bakkot:matrix.org> ... Which is to say, not, or do you have a different impression of the net benefit of `eval` than I do?

My impression is that we’d either be stuck with IE5 era JScript or gasp VBScript if eval hadn’t been part of the language.

[14:18:22.0773] <bakkot>
That... is not my impression.

[14:18:59.0888] <Kris Kowal>
CommonJS certainly would not have happened.

[14:19:22.0752] <Kris Kowal>
I know opinions vary on the point, but I have few regrets.

[14:21:05.0403] <Kris Kowal>
(ESM would not have happened if CJS hadn’t happened. TC39’s position in 2009 was to wait and see whether the ecosystem had an appetite for modules, which would not have been observable otherwise.)

[14:21:29.0789] <Kris Kowal>
Besides, the ecosystem didn’t really want it until they had it.

[14:22:48.0161] <bakkot>
I don't think it's really that plausible that we'd've never had a module system at all in the absence of `eval`, but in any case, we do now have such a system, so that can't be an argument for `eval` being something we would design into the language _now_.

[14:31:58.0147] <Kris Kowal>
How sympathetic are you to jsfiddle as a specialist application that would benefit from eval-but-modules?

[14:34:22.0898] <bakkot>
I don't think jsfiddle uses eval?

[14:34:27.0711] <bakkot>
So not particularly sympathetic.

[14:36:23.0867] <Kris Kowal>
At his point in the argument, would you say that the best way for Module constructor to Stage 2 would be to preserve the concept of a module source object (e.g., the source for a module block or a WebAssembly.Module) and omit the ModuleSource constructor?

[14:36:58.0727] <Kris Kowal>
I do not imagine finding better arguments for ModuleSource from text than the above.

[14:37:01.0980] <littledan>
bakkot: Do you consider this decision a Stage 2 blocker? IMO it seems OK to leave it an open question to resolve before Stage 3.

[14:37:21.0939] <littledan>
I think for Stage 2 we should sort of understand the decision space fairly well, and I think we do

[14:37:32.0169] <bakkot>
I think in general that for any proposal to advance all components of that proposal should be justified, and I am not yet convinced that the ModuleSource constructor is justified, so yes.

[14:38:12.0351] <bakkot>
As to whether it's a pre-Stage 2 or pre-Stage 3 concern, personally this decision feels like a fairly major one, so personally I would prefer it be made before Stage 2, but the distinction is pretty artificial given that no one is shipping before stage 3 anyway, so I don't feel strongly about that.

[14:38:22.0586] <bakkot>
 * As to whether it's a pre-Stage 2 or pre-Stage 3 concern, personally this decision feels like a fairly major one, so personally I would prefer it be made before Stage 2, but the distinction is pretty artificial given that no one is shipping before stage 3 anyway, so I don't feel strongly about that.

[14:38:51.0851] <Kris Kowal>
Do you also contend that surfacing the bindings parser is not sufficiently justified? (The performance hit for drawing in Babel into production is significant. I hope that justifies it.)

[14:39:06.0712] <bakkot>
Oh, you can do a _lot_ better than pulling Babel into production

[14:39:11.0634] <bakkot>
You don't need a full parser just to get the bindings out

[14:39:21.0800] <littledan>
Stage 2 implies all sorts of other important qualities, like "is the committee sort of committed to doing something here" and "do we have a concrete first draft"; it is really common to have disagreements about major semantic points when something goes to Stage 2

[14:39:59.0514] <bakkot>
If shipping a parser specialized to the problem of getting bindings is still not performant enough, then that's maybe something to talk about, though I'm not sure it would make sense as part of this proposal in the absence of a ModuleSource constructor

[14:40:10.0088] <Kris Kowal>
> <@bakkot:matrix.org> You don't need a full parser just to get the bindings out

I’m sure you need at least the lexer and a partial parser for sequences introduced by import and export.

[14:40:32.0227] <bakkot>
Yup, but those things are lot smaller and faster than babel's parser.

[14:40:45.0636] <bakkot>
In particular not having to construct trees saves a lot of time.

[14:41:05.0857] <Kris Kowal>
That’ll run you about 16kloc. We’ve got guybedford (Guy Bedford)’s for that.

[14:41:15.0774] <littledan>
https://github.com/guybedford/es-module-lexer

[14:41:44.0716] <littledan>
<1kloc

[14:42:47.0337] <bakkot>
> <@littledan:matrix.org> Stage 2 implies all sorts of other important qualities, like "is the committee sort of committed to doing something here" and "do we have a concrete first draft"; it is really common to have disagreements about major semantic points when something goes to Stage 2

Eh, well, depend on what you mean by "major semantic points". In theory stage 2 signifies "all _major_ semantics, syntax and API are covered", and "does this add a new eval" is IMO a major semantic point. But like I said I don't feel that strongly about this, as long as it's understood that agreeing to stage 2 doesn't signify consensus on this question either way.

[14:42:53.0798] <Kris Kowal>
That’s…much smaller than his other one. Surprising!

[14:43:36.0006] <bakkot>
our full JS parser isn't even 16k semantic LoC

[14:43:49.0027] <bakkot>
(it's like 3-5k I think)

[14:46:02.0786] <Kris Kowal>
Oh, pardon. I’m off by ten. I’m looking at Guy’s CJS lexer (which we use in prod at Agoric) and it’s 1.6K.

[14:48:01.0505] <Kris Kowal>
So, agreed, it’s consequently practical to statically analyze the bindings of a module in production without ModuleSource(text).bindings or a lower-powered Module.parse(text). So making a web page that generates bundles isn’t that much trouble.

[14:50:03.0348] <littledan>
> <@bakkot:matrix.org> Eh, well, depend on what you mean by "major semantic points". In theory stage 2 signifies "all _major_ semantics, syntax and API are covered", and "does this add a new eval" is IMO a major semantic point. But like I said I don't feel that strongly about this, as long as it's understood that agreeing to stage 2 doesn't signify consensus on this question either way.

Yeah, the draft definitely has to make a strong stab at all of those points, including this one. But committee members can still disagree with them (look at where R&T is).

[14:50:32.0690] <littledan>
anyway sorry lawyering here is beside the point

[14:51:19.0567] <littledan>
not trying to deny your right to block this proposal (which has another sort of existential question, about whether we want the importHook to be hookable at all)

[14:54:19.0506] <Kris Kowal>
There are a number of such questions. The folks at Moddable discovered that implementing Module and ModuleSource made it possible for their fuzzer to discover bugs in their module system that were previously too impractical to cover. They’ve fixed the bugs, but it highlights that it’s hard to get ESM right. There’s certainly some philosophical wiggle-room whether composing ESM with callbacks creates more bugs than it reveals.

[14:54:54.0911] <littledan>
I guess I felt like the ordering should be more like, we focus first on whether we want importHook to be a thing at all (as Shu raised), and then we'd resolve lower-order things like whether the ModuleSource constructor should exist

[14:55:40.0882] <Kris Kowal>
That is certainly the most efficient way to prune the tree.

[14:55:52.0817] <littledan>
> <@kriskowal:matrix.org> There are a number of such questions. The folks at Moddable discovered that implementing Module and ModuleSource made it possible for their fuzzer to discover bugs in their module system that were previously too impractical to cover. They’ve fixed the bugs, but it highlights that it’s hard to get ESM right. There’s certainly some philosophical wiggle-room whether composing ESM with callbacks creates more bugs than it reveals.

yes, the importHook certainly makes a bunch of things observable that previously weren't. Analogous to Proxy. Doesn't necessarily mean that the previous state was a bug.

[14:56:25.0363] <littledan>
> <@littledan:matrix.org> I guess I felt like the ordering should be more like, we focus first on whether we want importHook to be a thing at all (as Shu raised), and then we'd resolve lower-order things like whether the ModuleSource constructor should exist

so I was mapping these to Stage 2 and 3, but we could resolve them both before Stage 2 also

[15:11:51.0325] <Kris Kowal>
I assume this is sufficient to accept exactly and only grammatically valid sources. That requires block matching, but not AST generation. The other motivation for a full parse is that `eval('module {' + text + '}')` is an inevitable work-around for the lack of `ModuleSource`, which is much worse if text is not constrained to be a valid module source.

[15:12:22.0440] <Kris Kowal>
> <@littledan:matrix.org> https://github.com/guybedford/es-module-lexer

 * I assume this is sufficient to accept exactly and only grammatically valid sources. That requires block matching, but not AST generation. The other motivation for a full parse is that `eval('module {' + text + '}')` is an inevitable work-around for the lack of `ModuleSource`, which is much worse if text is not constrained to be a valid module source.


2023-01-09
[03:43:09.0072] <Luca Casonato>
My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the "evalness" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.

[03:43:18.0511] <Luca Casonato>
 * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the "evalness" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.

[03:43:37.0702] <Luca Casonato>
 * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the "evalness" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.

[03:44:25.0498] <Luca Casonato>
I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.

[07:30:48.0834] <littledan>
I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, "ModuleSource produces marked things which cannot be passed to import() but otherwise work" (but I'm not so convinced the feature is very useful, and we were discussing this above)

[08:04:32.0926] <bakkot>
Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.

also it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than "we would like it to be easier to do `eval`" (or there needs to be an extremely strong reason to make it easier to do `eval`).

[09:39:01.0363] <littledan>
<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>

[09:39:57.0301] <Kris Kowal>
I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.

[09:40:42.0741] <Kris Kowal>
Making it eaiser to make sandboxes has the emergent effect of making sandboxes safer.

[09:41:11.0697] <Kris Kowal>
And given that the design is compatible with CSP, I feel like this is a win-win.

[09:41:17.0769] <littledan>
Kris, I'm glad you're describing your actual use case, as this makes it a lot easier to follow

[09:41:21.0417] <littledan>
It's quite hard for me to follow a use case argument which centers on the censorship mechanism, since I really don't understand what sorts of restrictions you have in how you evolve that.

[09:41:45.0784] <littledan>
maybe you could give some more details there?

[09:43:00.0697] <Kris Kowal>
Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that not entrain rigorous static analysis or on-the-fly transformations.

[09:44:28.0620] <Kris Kowal>
The heart of the confinement mechanism points four of JavaScript’s sharpest edges at each other: We use use direct eval in sloppy mode inside a with block that puts an opaque proxy on the stack.

[09:44:48.0369] <Kris Kowal>
That’s…a summary.

