2023-03-10
[09:53:31.0395] <yulia>
I've added the "epics" topic to the agenda and will get some slides together.

[10:59:53.0772] <guybedford>
I just added an agenda item to the SES meeting schedule for next week, to discuss some module instance functions that might help to avoid reentrancy between C++ and JS during instantiation / linking time

[11:00:03.0305] <guybedford>
if the meeting is still on, would be great to discuss it further


2023-03-14
[08:40:39.0805] <Jack Works>
hi sorry I don't engage the meeting recently

[08:40:50.0191] <Jack Works>
hope I can caught up what happened these days

[09:01:53.0851] <littledan>
@room modules call now

[10:05:58.0308] <Jack Works>
I'm worried because to support dynamic import we need a import hook

[10:07:33.0215] <Jack Works>
but for static import maybe we can bundle them into a single userland call, since the reflection information is available 

[10:55:22.0832] <annevk>
It would help me a lot if there was some amount of agenda sharing before the meeting. Perhaps we covered all pertinent topics already though.

[11:34:20.0867] <littledan>
That‚Äôs a good point; let‚Äôs try to formulate the agenda ahead of time next meeting.

[11:35:25.0698] <littledan>
Something which we touched on this meeting which I would like to revisit with the group including Annevk, is how expressive the import hook/module linking API should be.


2023-03-24
[05:28:50.0400] <Jack Works>
question: does defer import support re-export?

[05:29:20.0573] <Jack Works>
export defer * as ns from "spec"

[05:32:03.0282] <Jack Works>
and I think disallowing normal exports makes this feature harder to adopt. I know using namespace is easy because it's easier on the spec work, but it's also technically possible to allow named imports

[07:53:13.0434] <nicolo-ribaudo>
Namespace deferred reexports would be supported for sure; normal reexports are still being investigated 

[07:54:01.0567] <scottwhittaker>
The proposal also doesn't preclude support for named imports in the future, so it's possible that they could become supported if people turn out to really miss them

[08:49:35.0055] <Jack Works>
> <@scottwhittaker:matrix.org> The proposal also doesn't preclude support for named imports in the future, so it's possible that they could become supported if people turn out to really miss them

that must happen, people rarely use namespace imports.

[08:50:00.0126] <Jack Works>
by the way, experimental webpack implementation is on the road


2023-03-28
[05:25:53.0369] <Jack Works>
ü§î

[05:26:28.0072] <Jack Works>
implementing "assert { webpackSync: true }" in webpack

[05:26:44.0965] <Jack Works>
asserts the module graph does not contain TLA or Async WebAssembly module

[05:27:20.0301] <Jack Works>
but asserts have been deprecated, and the "with" keyword does not fit the semantic of this feature. 

[05:28:13.0727] <Jack Works>
any suggestion? does that mean assert itself has its meaning? or should I rename it to "with { webpackAssertSync: true }"?

[05:29:03.0110] <svensauleau>
Using `with` the key could express the assertion. What about `with { webpack: { ensureSync: true }}`?

[05:29:18.0604] <Jack Works>
Note: I also found no boolean literal is allowed which is annoying. I have to use `"true"| instead of `true`

[05:29:28.0256] <Jack Works>
* Note: I also found no boolean literal is allowed which is annoying. I have to use `"true"` instead of `true`

[05:29:59.0510] <svensauleau>
another alternative could be `with { webpack: { sync: 'ensure' }}`

[05:31:04.0065] <Jack Works>
> <@svensauleau:matrix.org> Using `with` the key could express the assertion. What about `with { webpack: { ensureSync: true }}`?

oh... that's also an option, but webpack internal does not have the evaluation of object literals means it will be a lot more work for me to do this

[05:32:29.0402] <Jack Works>
for multiple attributes provided by the same tool chain, does the proposal champions supports "webpackX: val, webpackY: val" or nested "webpack: { x: val, y: val }"?

[05:33:04.0304] <svensauleau>
there was a discussion about that and I don't remember the outcome. I think we should support `with { webpack: { ... }}`.

[05:33:09.0517] <svensauleau>
 * there was a discussion about that but I don't remember the outcome. I think we should support `with { webpack: { ... }}`.

[05:33:23.0055] <Jack Works>
* for multiple attributes provided by the same tool chain, does the proposal champions recommend "webpackX: val, webpackY: val" or nested "webpack: { x: val, y: val }"?

[05:44:28.0568] <littledan>
Currently only strings are supported

[05:45:29.0204] <littledan>
For multiple webpack-defined keys, you can use `with { _webpackFoo: ‚Äúxyz‚Äù, _webpackBar: ‚Äúabc‚Äù }`

[05:45:51.0088] <littledan>
We should probably do more ASAP to document and socialize this convention

[05:46:33.0307] <littledan>
I don‚Äôt think we should be adding features right now; we just had a period of reconsideration and explicitly decided to keep the expressiveness of values the same 

[09:01:47.0264] <nicolo-ribaudo>
Meeting now?

[09:02:49.0837] <Kris Kowal>
I‚Äôm still away and tending to a newborn and toddler, but I‚Äôm very much interested in summaries if someone has a moment to describe progress/regress from plenary or today‚Äôs module meeting.

[09:03:13.0086] <Luca Casonato>
I'm sitting in the waiting room - no-one else around to join today?

[09:04:03.0869] <nicolo-ribaudo>
> <@lucacasonato:matrix.org> I'm sitting in the waiting room - no-one else around to join today?

Same

[09:07:42.0901] <nicolo-ribaudo>
> <@kriskowal:matrix.org> I‚Äôm still away and tending to a newborn and toddler, but I‚Äôm very much interested in summaries if someone has a moment to describe progress/regress from plenary or today‚Äôs module meeting.

Most significant updates:
- import assertions are back to Stage 3 (conditional on editors reviews), without the constraint that they cannot affect loading and cannot be part of the cache key
- Luca and Guy gave a presentation in plenary about the various phases of loading a module, from resolution to evaluation, showing how different proposals are just "stop at an early phase"
- Guy is thinking about possible design suggestions to compartments Layer 0 to work around some of the feedback given in the November meeting

[09:08:05.0630] <nicolo-ribaudo>
> <@kriskowal:matrix.org> I‚Äôm still away and tending to a newborn and toddler, but I‚Äôm very much interested in summaries if someone has a moment to describe progress/regress from plenary or today‚Äôs module meeting.

 * Most significant updates:

- import assertions are back to Stage 3 (conditional on editors reviews) as "import attributes", without the constraint that they cannot affect loading and cannot be part of the cache key
- Luca and Guy gave a presentation in plenary about the various phases of loading a module, from resolution to evaluation, showing how different proposals are just "stop at an early phase"
- Guy is thinking about possible design suggestions to compartments Layer 0 to work around some of the feedback given in the November meeting

[09:08:55.0651] <guybedford>
unfortunately I don't have permissions either, also in waiting room...

[09:08:58.0220] <Luca Casonato>
> Luca and Guy gave a presentation in plenary about the various phases of loading a module, from resolution to evaluation, showing how different proposals are just "stop at an early phase"
I think the presentation was well received. We have some feedback from Jordan to think about return types for "source" phase imports, but we think we can tackle this and attempt Stage 3 at next plenary.

[09:09:11.0545] <Luca Casonato>
 * > Luca and Guy gave a presentation in plenary about the various phases of loading a module, from resolution to evaluation, showing how different proposals are just "stop at an early phase"

I think the presentation was well received. We have some feedback from Jordan to think about return types for "source" phase imports, but we think we can tackle this and attempt Stage 3 at next plenary.

[09:09:33.0576] <Luca Casonato>
To join the video meeting, click this link: https://meet.google.com/afs-kzui-qsx
Otherwise, to join by phone, dial +31 20 257 4432 and enter this PIN: 775 821 400#
To view more phone numbers, click this link: https://tel.meet/afs-kzui-qsx?hs=5

[09:09:48.0497] <Luca Casonato>
let's just use a different room then :)

[09:10:15.0702] <littledan>
(I'm skipping this meeting but I can briefly join to let people in if needed)

[09:10:36.0250] <Luca Casonato>
littledan: we've figured it out

[09:11:13.0588] <Luca Casonato>
guybedford: new link, can you join there?

[09:36:14.0383] <annevk>
Nice work on Import Attributes, btw!

[09:44:22.0155] <Luca Casonato>
Mathieu Hofman: https://crbug.com/567999

[10:03:58.0896] <Luca Casonato>
What do you all think about making the loader meeting 1 hour again, but doing it weekly rather than bi-weekly? Please vote below:

[10:22:30.0944] <littledan>
> <@lucacasonato:matrix.org> > Luca and Guy gave a presentation in plenary about the various phases of loading a module, from resolution to evaluation, showing how different proposals are just "stop at an early phase"
> 
> I think the presentation was well received. We have some feedback from Jordan to think about return types for "source" phase imports, but we think we can tackle this and attempt Stage 3 at next plenary.

Is the proposed solution described anywhere?

[10:23:31.0116] <littledan>
I really think we need a general set of built-in type-checkers similar to isArray, as was previously proposed. I don't think it's optimal that we're doing this case-by-case (it comes up for many proposals).

