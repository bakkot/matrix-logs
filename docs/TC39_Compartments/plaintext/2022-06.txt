2022-06-06
[21:18:13.0183] <Kris Kowal>
Thank you ljharb for creating this space and welcome interested parties in module loader virtualization. Iâ€™ve invited as many handles as I could recognize at a glance and I will try to gather the missing champions and collaborators.

[21:24:03.0794] <Kris Kowal>
By wave of an update, Iâ€™m working with the champion group to narrow the focus of the Compartments proposal to just module loader virtualization https://github.com/tc39/proposal-compartments/pull/46

[21:26:15.0964] <Kris Kowal>
Specifically in order to present the narrowest profile to the wind. Thereâ€™s enough interest in the topic and two years of experience vetting the Compartments proposal (stage 1) that itâ€™s time to push for 2.

[21:27:46.0767] <Kris Kowal>
By which I mean I hope to present on behalf of champions and collaborators, not at this plenary, but the next one in July, resources and alignment willing.

[21:31:28.0179] <Kris Kowal>
I invite Luca Casonato and guybedford (Guy Bedford) specifically because of our mutual interest. Talking with Guy yesterday, thereâ€™s substantial overlap between the problems that import reflection seeks to solve https://github.com/tc39/proposal-import-reflection, and the solutions that Compartments provide. And, Compartments I believe solve those problems without needing new syntax (relitigating the original import assertions proposal (import as)), relaxing idempotent import, or complicating cache keys.

[21:36:03.0402] <Kris Kowal>
I invite Surma because I believe the Compartments design can help inform the conversation about module blocks. One of our goals with Compartments is to create a clear distinction between a StaticModuleRecord and a ModuleDescriptor, which 262 currently conflates. Separating those concerns makes clear to me at least that we should choose whether a module block is reÃ¯fied as a StaticModuleRecord or a ModuleDescriptor, the latter containing the former. If a block is a StaticModuleRecord, that suggests easy portability between workers but doesnâ€™t imply a full module specifier or module metadata.

[21:37:03.0559] <Kris Kowal>
The Compartments API also cleanly separates module specifier namespaces from module metadata, since we find that import.meta.url in particular must be a host-specific extension, and must be omissible in some hosts.

[21:37:43.0412] <Kris Kowal>
I think that position also clarifies our feelings about some of the design tensions we see in module blocks and look forward to discussing that.

[21:40:55.0474] <Kris Kowal>
My hope is to recruit you all to our common cause ðŸ™‚


2022-06-07
[21:29:01.0191] <Jack Works>
Hello ~

[21:53:50.0131] <Jack Works>
In the [current](https://github.com/tc39/proposal-compartments/blob/6a180313515f6faec2818dad229e6921109b50f5/README.md) `ThirdPartyStaticModuleRecord` API, the initialize function only receives a `ModuleEnvironmentRecord` (which looks like only containing `import` and `export` bindings). There is no way to access the `globalThis` of the current executing compartment.

Lacking this ability make it impossible to compile a ES Module into a `ThirdPartyStaticModuleRecord`.

[22:17:54.0323] <Kris Kowal>
For folks tuning in, Jack is trying to build a no-eval shim for Compartments that precompiles ESM into a bundle.

[22:18:25.0948] <Kris Kowal>
I assume youâ€™re aware that third-party static-module-records canâ€™t emulate live bindings.

[22:19:30.0107] <Kris Kowal>
Jack Works: Have you looked at https://github.com/endojs/endo/blob/master/packages/compartment-mapper/src/bundle.js

[22:20:06.0187] <Kris Kowal>
That uses the SES shimâ€™s static module record to create a bundle. Itâ€™s not a complete implementation, but it might be similar to your approach.

[22:20:07.0298] <Jack Works>
> <@kriskowal:matrix.org> I assume youâ€™re aware that third-party static-module-records canâ€™t emulate live bindings.

I'm aware that it cannot get the globalThis of the current compartment (it didn't pass as an argument in the initialize function)

