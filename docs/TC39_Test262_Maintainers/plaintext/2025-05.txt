2025-05-05
[10:53:08.0252] <dminor>
So, concretely, can I ask for Stage 3 for upsert when https://github.com/tc39/test262/pull/4454 merges, or should I subsequently open one or more PRs to move them into normal test262?

I'm asking because I'd like to put a Stage 3 advancement item on the agenda for the next plenary if possible, and I'm not sure what the next steps are and if I have enough time to get everything pulled together by then.

[10:54:13.0274] <shu>
it is my understanding that staging suffices for stage 3

[10:54:39.0930] <shu>
and also if there is disagreement in committee i will fight hard for it to suffice


2025-05-06
[20:45:36.0944] <ljharb>
i disagree on that

[20:56:16.0162] <ljharb>
to clarify: certainly tests in staging *might* be up to snuff, but the whole point of staging was to allow subpar tests to go in with minimal to no review, for the purpose of sharing, which isn't the point of the process requirement as i understand it.

[06:09:14.0278] <ptomato>
I think last time I suggested we should look back in the notes to see what was discussed at the time, I haven't had a chance to do that yet

[06:30:51.0809] <dminor>
What's the way ahead for upsert then? I assume no one wants to review all of the tests all at once, should I open a PR to move say just the Map.getOrInsert tests for now, and apply any relevant feedback to the other tests before I trying moving them?

[06:35:43.0370] <dminor>
(well, I guess one way ahead is for me to just wait for the outcome of this process discussion and likely try for advancement at the July plenary)

[06:44:14.0556] <ptomato>
I've done the archive diving just now: https://docs.google.com/presentation/d/1T0SbwsGNibfvcocZrUwEijF63vVuSssn6ZLWEFoZPMU/edit#slide=id.g136a491c2bd_0_0

[06:44:31.0002] <ptomato>
and https://docs.google.com/document/d/1JRG6FeYmZIievBPpAdvJjDhfsEjRrdzsFPTYG86KSmM/edit?tab=t.0#heading=h.yicqiz18gbvl

[06:46:02.0473] <ptomato>
I think the problem is that we just never discussed what might change about the requirements for staging when the committee added stage 2.7

[06:47:31.0482] <ptomato>
in fact currently in the [CONTRIBUTING.md](https://github.com/tc39/test262/blob/main/CONTRIBUTING.md#staging) we say that only stage 3 proposals are allowed to have staging tests

[06:49:54.0481] <ptomato>
so, clearly that needs to be updated to say 2.7, but the question is about what then are the requirements for advancement to stage 3 regarding staging / non-staging

[06:59:39.0332] <ptomato>
personally I'm leaning towards saying something like "the requirement for stage 3 is a testing plan, with X% (90%?) of the items covered with tests, regardless of staging status" and keep the same requirement for stage 4 that we've always had, where tests must migrate out of staging and be in the one-feature-per-file chunks that engines expect. it seems good to me that if engines come across more edge cases during stage 3, they should feel free to land those tests in staging ASAP and get other engines running them, without calling the stage 3 status into question

[07:00:18.0956] <ptomato>
I haven't 100% made up my mind about that, but in any case I'd hope that we don't delay current proposals like upsert while we work out this process question

[07:13:12.0162] <Michael Ficarra>
> <@dminor:mozilla.org> What's the way ahead for upsert then? I assume no one wants to review all of the tests all at once, should I open a PR to move say just the Map.getOrInsert tests for now, and apply any relevant feedback to the other tests before I trying moving them?

yeah I'd say your best bet is to just write proper test262 tests

[14:31:06.0227] <bakkot>
the getOrInsert tests I skimmed are proper test262 tests afaict

[15:23:51.0703] <Michael Ficarra>
then it should be easy to just PR them into the appropriate place


2025-05-07
[01:07:38.0044] <Ms2ger>
But will it be easy to get reviews?

[01:12:18.0259] <nicolo-ribaudo>
The proposal is not very big luckily 


2025-05-12
[09:21:33.0144] <rbuckton>
Explicit Resource Management is fairly close to Stage 4, with the only outstanding task being the review of the outstanding test PRs. I'm currently working through breaking down https://github.com/tc39/test262/pull/3866 into smaller chunks with the hopes that will help unblock reviewers. Please let me know if the more focused PRs are more manageable. Ideally, I'd like to ask for Stage 4 in the upcoming plenary, but I'm aware that reviewer's time is limited.

[09:30:33.0337] <ptomato>
thanks for chunking them. I am planning to do another pass through the review backlog this week, so I might be able to take one of them. unfortunately I'd expect that finishing the whole thing before plenary is not feasible

[13:16:34.0121] <dminor>
I have approvals on https://github.com/tc39/test262/pull/4472 and https://github.com/tc39/test262/pull/4476 but lack permissions to merge them, if someone could help out, it would be much appreciated.

[13:28:43.0098] <ptomato>
merged the first and rebased the second, but I have to go now. will take another look tomorrow


2025-05-14
[08:06:35.0972] <ptomato>
Richard Gibson: Ms2ger attending this week?


2025-05-16
[12:42:22.0257] <ptomato>
I had a look at whether I could push up the commits I already reviewed from https://github.com/tc39/test262/pull/4463. it seems you cannot push directly to main, because it's protected

[12:42:43.0292] <ptomato>
so the only thing that we can really do each time we review a batch of commits, is put that batch into a new, separate PR, then get someone else to rubber stamp it (because we can't approve our own PRs)

[12:42:49.0729] <ptomato>
anyone else have other suggestions?

[14:30:20.0375] <ljharb>
no i think that seems like the right approach


2025-05-22
[16:56:16.0524] <Hans>
Hello maintainers. I have an issue with a staging test (specifically `is-subset-of`) and I think either the test or the spec is wrong somehow. I'll paste my findings and questions in this thread.

[16:59:11.0685] <Hans>
Here's the spec for `Set.prototype.isSubsetOf`:

```
5. Let thisSize be the number of elements in O.[[SetData]].
6. Let index be 0.
7. Repeat, while index < thisSize,
       a. Let e be O.[[SetData]][index].
       b. Set index to index + 1.
       c. If e is not empty, then
              i. Let inOther be ToBoolean(? Call(otherRec.[[Has]], otherRec.[[SetObject]], « e »)).
              ii. If inOther is false, return false.
              iii. NOTE: The number of elements in O.[[SetData]] may have increased during execution of otherRec.[[Has]].
              iv. Set thisSize to the number of elements in O.[[SetData]].
```

The test does the following;

1. create a Set with [1,2,3]
2. create a SetLike that, everytime we check if it has a value v, deletes that value from the first set.
3. asserts there's no values left after the call to `isSubsetOf`

This seems to make sense, but according to the algorithm, that would only work if we make a copy of the set elements in the first place. No such copy is required.

Explanation:
----

So what happens is:

1. index = 0, set = [1,2,3], size = 3, e = 1, Call other.[[Has]](e)
2. The SetLike, removes 1 from the original set
3. index = 1, set = [2,3], size = 2, e = 3. << - WE SKIPPED AN ELEMENT BY INCREMENTING INDEX
4. The element we skipped will remain in the set at the end.

The test thus fails because we use indexing and skipped an element, and it asserts that we're going through all elements.

I'm assuming V8/SpiderMonkey/etc are doing something different than the spec that passes that test?

Also, `isSupersetOf`, strangely, uses an iterator, not indexing.

I can't make a copy of the set's element because its elements might change during the call (there's a test for it too). 



2025-05-23
[17:00:09.0948] <Hans>
* Here's the spec for `Set.prototype.isSubsetOf`:

```
5. Let thisSize be the number of elements in O.[[SetData]].
6. Let index be 0.
7. Repeat, while index < thisSize,
       a. Let e be O.[[SetData]][index].
       b. Set index to index + 1.
       c. If e is not empty, then
              i. Let inOther be ToBoolean(? Call(otherRec.[[Has]], otherRec.[[SetObject]], « e »)).
              ii. If inOther is false, return false.
              iii. NOTE: The number of elements in O.[[SetData]] may have increased during execution of otherRec.[[Has]].
              iv. Set thisSize to the number of elements in O.[[SetData]].
```

The test does the following;

1. create a Set with \[1,2,3\]
2. create a SetLike that, everytime we check if it has a value v, deletes that value from the first set.
3. asserts there's no values left after the call to `isSubsetOf`

This seems to make sense, but according to the algorithm, that would only work if we make a copy of the set elements in the first place. No such copy is required.

Explanation:

Here's what happens if we run the test using the pseudocode from the spec:

1. index = 0, set = \[1,2,3\], size = 3, e = 1, Call other.[\[Has\]](vector://vector/webapp/e)
2. The SetLike, removes 1 from the original set
3. index = 1, set = \[2,3\], size = 2, e = 3. \<\< - WE SKIPPED AN ELEMENT BY INCREMENTING INDEX
4. The element we skipped will remain in the set at the end.

The test thus fails because we use indexing and skipped an element, and it asserts that we're going through all elements.

I'm assuming V8/SpiderMonkey/etc are doing something different than the spec that passes that test?

Remarkably, `isSupersetOf`, strangely, uses an iterator, not indexing.

Note: I can't make a copy of the set's element because its elements might change during the call (there's a test for it too).

[17:00:12.0062] <Hans>
Does this look like an actual error or is it me?

[17:01:04.0114] <Hans>
The test's substep in question: https://github.com/tc39/test262/blob/main/test/staging/sm/Set/is-subset-of.js#L220-L248

[01:17:29.0197] <Ms2ger>
The confusion is in what Set#delete() does

[01:17:45.0438] <Ms2ger>
In  your step 3, set is not [2, 3] but [empty, 2, 3]

[15:37:02.0869] <Hans>
That is confusing. I would have expected Set to not have holes. So it’s expected to act like an array with O(n) insertions?

[15:38:46.0055] <Hans>
Essentially the model in my mind was more `Map<any, never>` (pardon my typescript) but it seems the expectation is akin to `Array<T>` with a special interface. 

