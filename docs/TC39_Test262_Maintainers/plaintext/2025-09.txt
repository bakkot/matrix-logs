2025-09-10
[08:33:46.0533] <ptomato>
what'd be the appropriate moment to merge the unicode 17 updates (https://github.com/tc39/test262/pull/4572 and https://github.com/tc39/test262/pull/4573)? I remember we've waited for a while with such updates in the past until engines have started updating


2025-09-15
[12:44:01.0004] <ptomato>
fyi https://github.com/tc39/test262/issues/4580 - not sure who now maintains the V8 sync bot and should be cc'd on here


2025-09-17
[08:02:58.0062] <Ms2ger>
Meeting? ljharb Richard Gibson 

[08:04:24.0226] <ljharb>
 Canâ€™t make it this week; traveling


2025-09-22
[07:16:54.0410] <Chris de Almeida>
who is giving the 262 update today? 

[07:17:04.0429] <Chris de Almeida>
* who is giving the test262 update today? 

[07:46:24.0175] <Ms2ger>
Chris de Almeida: Richard


2025-09-30
[15:47:40.0705] <bakkot>
for https://github.com/tc39/test262/pull/4528#discussion_r2349906917, ptomato (intermittent availability) asks that the test avoid a mini-implementation. I agree with the reasoning that it is hard to tell if the implementation or the mini-implementation is correct; on the other hand, this test covers 1000 cases, each of which is in some way distinct, and I don't think a test which just hardcodes the result for each of those cases would be maintainable (and who's to say the hardcoded results would not have bugs?).

As an implementer I've found that these more exhaustive tests do a much better job of uncovering bugs than just a hardcoded list of cases. I think that in this case the most useful thing is to ensure the mini-implementation is correct.

[15:49:03.0724] <bakkot>
(In this specific case it's arguably not a mini-implementation but rather just checking "invariant properties of outputs that must hold across multiple inputs", as the slides linked from that comment say, which I think is better still.)

[15:51:05.0379] <bakkot>
* for https://github.com/tc39/test262/pull/4528#discussion\_r2349906917, ptomato (intermittent availability) asks that the test avoid a mini-polyfill. I agree with the reasoning that it is hard to tell if the implementation or the mini-polyfill is correct; on the other hand, this test covers 1000 cases, each of which is in some way distinct, and I don't think a test which just hardcodes the result for each of those cases would be maintainable (and who's to say the hardcoded results would not have bugs?).

As an implementer I've found that these more exhaustive tests do a much better job of uncovering bugs than just a hardcoded list of cases. I think that in this case the most useful thing is to ensure the mini-polyfill is correct.

[15:51:08.0837] <bakkot>
* (In this specific case it's arguably not a mini-polyfill but rather just checking "invariant properties of outputs that must hold across multiple inputs", as the slides linked from that comment say, which I think is better still.)

