2022-05-03
[14:20:49.0080] <ljharb>
Richard Gibson: published npmjs.com/parseint and added some fixes to a few others, and now i'm down to 54 failures. (attached, if you're curious)

[14:21:14.0142] <ljharb>
 * Richard Gibson: published npmjs.com/parseint and added some fixes to a few others, and now i'm down to 54 failures. (attached, if you're curious)

[14:22:16.0143] <ljharb>
the vast majority are Date ones; one pair is "parseInt.prototype isn't undefined" because that's not shimmable; another pair is unavoidable AggregateError constructor hijinx; and then a few scattered others

[14:32:00.0702] <Richard Gibson>
Awesome! I haven't looked at the other failures, but for parseInt, the `asNonConstructible` of https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$fvGRXxCTo23zwsh5a2s7KyK_ZHFuYv0msf3o2YmKEDE?via=matrix.org also takes care of making the prototype undefined in environments supporting Function.prototype.bind.

[14:35:38.0926] <ljharb>
oh right, i haven't tried that one yet

[14:38:17.0187] <ljharb>
hm, that doesn't seem to be working for me

[14:39:32.0059] <ljharb>
```
function p() {}
Object.prototype.hasOwnProperty.call(p, 'prototype') // true
Object.prototype.hasOwnProperty.call(Function.bind.call(Function.call, p), 'prototype') // still true in node 0.4

[14:43:11.0360] <Richard Gibson>
hmm, I wonder at what Node version that changed

[14:45:37.0954] <Richard Gibson>
how do you handle observable behavior that _becomes_ shimmable in general?


2022-05-05
[09:08:15.0967] <ljharb>
feature-detect it, and shim it whenever possible

[09:08:38.0648] <ljharb>
i only tried in node 18, maybe it works in older engines? i'll check

[09:08:53.0073] <ljharb>
psa: i'm making an executive decision to cancel the maintainers meeting during TC39 in june


2022-05-06
[07:19:57.0937] <Richard Gibson>
> <@ljharb:matrix.org> i only tried in node 18, maybe it works in older engines? i'll check

I see bound `call`s having no own "prototype" property for any version of Node.js on RunKit (0.10.48 through 17.9.0): https://runkit.com/rstpflkbkgqetqlavy/bound-call-own-prototype

[08:37:27.0369] <ljharb>
hmm, maybe my testing was wrong, i'll look thanks

[08:41:10.0654] <ljharb>
ok interesting. however that means that the result has the name "bound call" unless function names are configurable, and also `new` of the result doesn't throw

[08:41:28.0796] <ljharb>
so it seems like it'd maybe pass the letter of the test but not the spirit

