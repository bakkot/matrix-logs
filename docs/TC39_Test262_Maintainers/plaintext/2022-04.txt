2022-04-05
[15:30:00.0926] <sarahghp>
Hi friends! I will be out again this Thursday (doin' art) and so I will miss the call again. I took a look at the notes, and I agree the RFC process makes sense. 

I need to look at our derivative RFC of course to see if there a few things I'd change, but generally seems like a good plan. I trust Philip to represent for everything else, and I look back to being on a call with you all soon. 


2022-04-07
[11:10:07.0675] <Rick Waldron>
lol, whoops. I didn't mean to reply to a post

[11:10:09.0740] <Rick Waldron>
I'm in a meeting that's running over. I will join ours asap

[11:10:21.0125] <Rick Waldron>
@room ^^

[11:10:40.0604] <ljharb>
so far it's just three of us

[11:15:16.0473] <ljharb>
https://github.com/tc39/ecma262/pulls?q=is%3Aopen+is%3Apr+label%3A%22needs+tests%22+label%3A%22has+consensus%22

[11:15:44.0685] <ljharb>
 * https://github.com/tc39/ecma262/pulls?q=is%3Aopen+is%3Apr+label%3A%22needs+tests%22+label%3A%22has+consensus%22

[11:23:27.0884] <ljharb>
https://github.com/tc39/ecma262/issues/2170

[11:26:02.0510] <ptomato>
http://ptomato.name/talks/tc39-2022-03/#21

[16:36:43.0400] <ptomato>
something I forgot to put on the agenda this morning, re https://github.com/tc39/Admin-and-Business/issues/216, is it significant which ECMA member is Mike's official sponsor or do we just need to arbitrarily pick Salesforce or Igalia?


2022-04-08
[10:28:37.0379] <Richard Gibson>
sorry for missing yesterday, I got pulled into a conflicting meeting

[14:25:34.0025] <ljharb>
> <@pchimento:igalia.com> something I forgot to put on the agenda this morning, re https://github.com/tc39/Admin-and-Business/issues/216, is it significant which ECMA member is Mike's official sponsor or do we just need to arbitrarily pick Salesforce or Igalia?

i don't think it's significant; i think ecma just needs to write something into field on their form


2022-04-12
[08:49:02.0660] <ptomato>
any reason not to remove the graaljs job from CI? it seems to be consistently broken


2022-04-14
[09:52:51.0777] <Rick Waldron>
I saw that it's passing now

[09:53:17.0733] <Rick Waldron>
@room just a heads up that I cannot attend today's meeting and I'm out on PTO tomorrow

[09:53:33.0017] <Rick Waldron>
Please have meeting without me and I will catch up via notes


2022-04-21
[12:02:16.0801] <sarahghp>
Followup from the meeting. Since we have mostly meaty topics left and I am going to be away next week, should we make next week an async / work on issues meeting and reconvene Thursday May 5?

‚ûï yes
üò≠ no I will miss everyone

[12:06:51.0588] <sarahghp>
 * Followup from the meeting. Since we have mostly meaty topics left and I am going to be away next week, should we make next week an async / work on issues meeting and reconvene Thursday May 5?

‚ûï yes

üò≠ no I will miss everyone

‚öôÔ∏è half-hour task check-in

[12:06:58.0928] <sarahghp>
 * Followup from the meeting. Since we have mostly meaty topics left and I am going to be away next week, should we make next week an async / work on issues meeting and reconvene Thursday May 5?

‚ûï yes

üò≠ no I will miss everyone

‚öôÔ∏è half-hour task check-in



2022-04-25
[21:53:25.0557] <ljharb>
any chance we could add a test feature for "IsConstructor checks"? basically all of them use `parseInt` as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.

i'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)

[08:57:58.0306] <ptomato>
that is a problem that I've heard other polyfills having as well

[09:02:34.0277] <Richard Gibson>
What do you mean by "basically all of them use parseInt as a canonical non-constructor function"? I see only minimal overlap:

```sh
$ git grep -l isConstructor '*.js' | xargs grep -l parseInt
test/built-ins/Number/parseInt/not-a-constructor.js
test/built-ins/parseInt/not-a-constructor.js
```

I'm also not sure what you mean by "can't be shimmed", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \[\[Construct\]\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).

Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?

```sh
$ git grep -l isConstructor test/ | \
  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \
  python3 -c "$(printf 'import sys,yaml\nfor doc in yaml.safe_load_all(sys.stdin):\n if doc:\n  print("\x1F".join(doc["features"]))\n')" | \
  awk 'BEGIN { FS="\x1F" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, "TOTAL" }' | \
  sort -n | \
  tail
13 SharedArrayBuffer
14 Reflect
16 Symbol
21 DataView
24 ArrayBuffer
51 TypedArray
175 Temporal
383 arrow-function
623 Reflect.construct
623 TOTAL
```

[09:03:35.0458] <Richard Gibson>
 * What do you mean by "basically all of them use parseInt as a canonical non-constructor function"? I see only minimal overlap:

```sh
$ git grep -l isConstructor '*.js' | xargs grep -l parseInt
test/built-ins/Number/parseInt/not-a-constructor.js
test/built-ins/parseInt/not-a-constructor.js
```

I'm also not sure what you mean by "can't be shimmed", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \[\[Construct\]\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).

Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?

```sh
$ git grep -l isConstructor test/ | \
  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \
  python3 -c "$(printf 'import sys,yaml\nfor doc in yaml.safe_load_all(sys.stdin):\n  if doc:\n    print("\x1F".join(doc["features"]))\n')" | \
  awk 'BEGIN { FS="\x1F" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, "TOTAL" }' | \
  sort -n | \
  tail
13 SharedArrayBuffer
14 Reflect
16 Symbol
21 DataView
24 ArrayBuffer
51 TypedArray
175 Temporal
383 arrow-function
623 Reflect.construct
623 TOTAL
```

[09:03:58.0443] <Richard Gibson>
 * What do you mean by "basically all of them use parseInt as a canonical non-constructor function"? I see only minimal overlap:

```sh
$ git grep -l isConstructor '*.js' | xargs grep -l parseInt
test/built-ins/Number/parseInt/not-a-constructor.js
test/built-ins/parseInt/not-a-constructor.js
```

I'm also not sure what you mean by "can't be shimmed", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \[\[Construct\]\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).

Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?

```sh
$ git grep -l isConstructor test/ | \
  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \
  python3 -c "$(printf 'import sys,yaml\nfor doc in yaml.safe_load_all(sys.stdin):\n if doc:\n  print("\x1F".join(doc["features"]))\n')" | \
  awk 'BEGIN { FS="\x1F" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, "TOTAL" }' | \
  sort -n | \
  tail
13 SharedArrayBuffer
14 Reflect
16 Symbol
21 DataView
24 ArrayBuffer
51 TypedArray
175 Temporal
383 arrow-function
623 Reflect.construct
623 TOTAL
```

[09:04:00.0265] <ljharb>
bound functions are constructible, and arrows can‚Äôt be made in polyfills that support older engines

[09:04:22.0625] <ljharb>
indeed ‚Äúall‚Äù may have been an exaggeration, but there‚Äôs a bunch in other filenames - species things, eg

[09:04:54.0923] <ljharb>
I‚Äôd be happy to use Reflect.construct as the feature flag for those missing it, but that seems specific to that reflect method, versus a generic ‚Äúnon-constructibles‚Äù thing

[09:07:15.0847] <Richard Gibson>
bound functions in general can be constructible, but those returned by `Function.prototype.call.bind(‚Ä¶)` are not because `Function.prototype.call` is not

[09:10:32.0092] <Richard Gibson>
but at any rate, it is true that the `Reflect.construct` feature is used for more than just isConstructor checks

[09:13:08.0135] <ljharb>
ooh, good point. perhaps test262 could use call instead of parseint as its non-constructible? nothing ever tries to shim call

[09:13:19.0986] <ljharb>
that would immediately make a bunch of currently failing tests start passing for me

[09:15:58.0421] <Richard Gibson>
what do you mean by "as its non-constructible"‚Äîwhere do you want a switch from `parseInt` to `call`?

[09:31:31.0156] <Richard Gibson>
looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF "$(git grep -l isConstructor test/)"`), I retract my implication that the `Reflect.construct` flag covers this

[09:32:04.0268] <Richard Gibson>
 * looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF "$(git grep -l isConstructor test/)"`), I retract my implication that the `Reflect.construct` flag covers this

[09:43:48.0929] <Richard Gibson>
but I think I would expect a maximally faithful polyfill to shim like `parseInt = bind(call, myParseInt)` rather than `parseInt = myParseInt` in order to ensure absence of [[Construct]]

[09:54:46.0030] <ptomato>
I think Jordan's point is that you can't do that if your polyfill targets certain obsolete environments

