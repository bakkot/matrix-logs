2025-08-05
[06:39:31.0495] <Justin Ridgewell>
PHP got a pipeline operator: https://thephp.foundation/blog/2025/07/11/php-85-adds-pipe-operator/

[06:40:05.0513] <rbuckton>
It looks like its using F# style, since the RHS must be callable

[06:49:09.0782] <Justin Ridgewell>
Yah, but PHP doesn’t have first class functions for every fn value, so it’s a bunch of `foo(…)`

[06:49:51.0429] <Justin Ridgewell>
Any arbitrary expressions are wrapped in a closure

[06:50:28.0366] <Justin Ridgewell>
I think our F# supporters would still be unhappy with this syntax.

[06:50:45.0850] <rbuckton>
In lieu of PFA, we would have had to do the same for F# style. And they did get first-class callables

[06:50:52.0817] <rbuckton>
https://wiki.php.net/rfc/first_class_callable_syntax

[06:51:41.0233] <Justin Ridgewell>
Yah, that’s the `(…)` to turn it into a first class callable function.

[06:52:11.0765] <Justin Ridgewell>
Functions aren’t callable by pipe by default

[06:52:40.0524] <rbuckton>
Ah. My PFA proposal did have `...` in addition to `?`

[06:52:55.0740] <Justin Ridgewell>
You could assign the `var f = foo(…)` and pass that to pipe directly

[06:54:09.0499] <Nic>
`x |> filter(isOnSale(...))`
 
It this calling filter passing the closure to it, and then calling the result of filter with x?

[06:56:24.0074] <Justin Ridgewell>
> <@rbuckton:matrix.org> Ah. My PFA proposal did have `...` in addition to `?`

They mirrored your proposal: https://wiki.php.net/rfc/partial_function_application

[06:56:28.0432] <rbuckton>
filter takes a closure and returns a closure

[06:57:10.0997] <rbuckton>
It looks like they didn't move forward with it though, due to engine complexity, per the pipeline article.

[06:57:55.0490] <Justin Ridgewell>
> <@nribaudo:igalia.com> `x |> filter(isOnSale(...))`
>  
> It this calling filter passing the closure to it, and then calling the result of filter with x?

Yes

[06:59:21.0103] <Justin Ridgewell>
> <@rbuckton:matrix.org> It looks like they didn't move forward with it though, due to engine complexity, per the pipeline article.

At the end of the article, they mention trying again for 8.5 or 8.6

[07:00:47.0964] <Justin Ridgewell>
They even call our performance of closure allocations when not using literal syntax directly in the RHS

[07:01:14.0975] <Justin Ridgewell>
https://wiki.php.net/rfc/pipe-operator-v3#:~:text=Performance

[07:06:10.0504] <rbuckton>
`x |> f(?)` could be statically optimized to `x |> (_) => f(_)`. 

[07:11:19.0806] <Justin Ridgewell>
Yup

[10:51:52.0125] <TabAtkins>
I'm not finding filter() or map() in the php manual. Are these meant to be assumed to be user-defined HOFs?

[12:29:32.0978] <rbuckton>
Assumed from context.:
> Or, consider that the right-side can also be a function call that returns a Closure. That means with a few functions that return functions: ...

and the definition of `maybe` further down:

```php
function maybe(\Closure $c): \Closure
{
    return fn(mixed $arg) => $arg === null ? null : $c($arg);
}
```

[13:28:31.0033] <jschoi>
This PHP first-class callable syntax is interesting because they call it out as an “alternative” to PFA syntax, insofar that “the vast majority of PFA uses” would be “to acquire a callable, without partially applying any arguments”. 

The first-class callable proposal also notes, “A PFA-based optimization would entail significant overhead relative to simple function calls, unless special optimization for the pipe operator usage is introduced (which may not be possible, depending on precise semantics).” This is similar to the pushback we’ve gotten from the big JS engines. 

And then this first-class callable syntax results in a pipe syntax that is *not tacit*—it requires using `(...)` on every unary function call.

And then they require wrapping n-ary function calls in pipes with unary closures, like `fn($x) => array_map(strtoupper(...), $x)`.

They punt this to a future PFA proposal. The pipe v3 proposal says, “Should the proposed follow-up RFC of Partial Function Application RFC (see below) be approved, it would be logical and recommended for a similar optimization to be made when a PFA appears on the right-side of pipe.” Which seems optimistic compared to the cautious statement in the first-class callable proposal?

Lastly, like Justin mentioned, the pipe v3 proposal says that their pipe’s requiring that n-ary function calls be wrapped in unary closures “gives a little overhead over making all calls directly, but only in some cases, and not dramatically so”. This contrasts with the JS engines’ concerns about GC thrashing due to closure creation in hot paths. 

[13:29:37.0068] <jschoi>
> <@rbuckton:matrix.org> `x |> f(?)` could be statically optimized to `x |> (_) => f(_)`. 

I vaguely remember an engine implementor saying this kind of closure substitution not being possible to stack traces and other side effects of closure creation…I’d have to double check. 

[13:30:26.0823] <jschoi>
> <@tabatkins:matrix.org> I'm not finding filter() or map() in the php manual. Are these meant to be assumed to be user-defined HOFs?

They’re called array_map and array_filter. The pipe v3 proposal’s code samples link to their pages. 

[13:30:49.0312] <jschoi>
https://www.php.net/array_map

[13:31:03.0185] <TabAtkins>
No, `array_map`/etc take a closure *and* an array.

[13:34:52.0489] <jschoi>
I think Ron was talking about Nicolò’s `x |> filter(isOnSale(...))` question, but Nicolò was probably just abbreviating it from the PHP pipe v3 proposal’s `|> fn(array $ws) => array_filter(isOnSale(...), $ws)` example. 

