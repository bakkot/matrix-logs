2025-03-04
[22:23:54.0082] <jschoi>
ljharb: With regard to https://github.com/tc39/proposal-pipeline-operator/issues/310#issuecomment-2696324408, is there an actual “Tennent’s correspondence principle” of PL design that we’re trying not to break? 

The best answer I can find defining that phrase is https://softwareengineering.stackexchange.com/questions/116395/what-is-the-good-explanation-of-tennents-correspondence-principle, which seems to be some descriptive advice regarding correspondence between variable definitions and producer parameters.

Right now, under https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token#disqualified-tokens, variable identifiers are disqualified because variable tokens “may unexpectedly shadow outer variables”. Which is true. 

(I do agree that we should do our best to avoid any variables, for what it’s worth.)

[22:24:08.0830] <jschoi>
* ljharb: With regard to https://github.com/tc39/proposal-pipeline-operator/issues/310#issuecomment-2696324408, is there an actual “Tennent’s correspondence principle” of PL design that we’re trying not to break?

The best answer I can find defining that phrase is https://softwareengineering.stackexchange.com/questions/116395/what-is-the-good-explanation-of-tennents-correspondence-principle, which seems to be some descriptive advice regarding correspondence between variable definitions and producer parameters.

(I do agree that we should do our best to avoid any variables, for what it’s worth. Right now, under https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token#disqualified-tokens, variable identifiers are disqualified because variable tokens “may unexpectedly shadow outer variables”. Which is true.)

[22:24:18.0691] <jschoi>
* ljharb: With regard to https://github.com/tc39/proposal-pipeline-operator/issues/310#issuecomment-2696324408, is there an actual “Tennent’s correspondence principle” of PL design that we’re trying not to break?

The best answer I can find defining that phrase is https://softwareengineering.stackexchange.com/questions/116395/what-is-the-good-explanation-of-tennents-correspondence-principle, which seems to be some descriptive advice regarding correspondence between variable definitions and producer parameters.

(I do still agree that we should do our best to avoid any variables, for what it’s worth. Right now, under https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token#disqualified-tokens, variable identifiers are disqualified because variable tokens “may unexpectedly shadow outer variables”. Which is true.)

[22:31:38.0812] <rkirsling>
it's a TODO item in the terminology doc https://github.com/tc39/how-we-work/blob/main/terminology.md#todo-considerations

[22:33:39.0824] <jschoi>
rkirsling: Nice, thanks for pointing me there. It's been a while.

[22:34:13.0517] <rkirsling>
but yeah it's a deep cut that seems to lack a primary source(??) yet https://fanf.livejournal.com/118421.html gives a clear sentence of "the meaning of an expression or statement should not change when an extra level of block structure is added around it"

[22:36:04.0505] <jschoi>
It's a pretty good goal. Even if it doesn't seem to actually have been named by Tennent—at least according to Crockford. We might want to give it a better name…

[22:36:39.0687] <jschoi>
In general, the goal should be to reduce modality and contextuality of code as much as possible, which imposes cognitive burden. 

[22:36:41.0240] <rkirsling>
honestly agree

[22:36:56.0834] <jschoi>
* It's a manifestation of the general goal to reduce modality and contextuality of code as much as possible, which imposes cognitive burden. 

[22:37:00.0745] <jschoi>
* It's a manifestation of the general goal to reduce modality and contextuality of code as much as possible, to reduce cognitive burden. 

[22:37:02.0370] <rkirsling>
just give it our own name and relay credit for the idea where it's due

[22:39:19.0906] <rkirsling>
('cause hell, even the acronym is terrible -- who wants to overload TCP :joy:)

[22:39:29.0354] <rkirsling>
* ('cause hell, even the acronym is terrible -- who wants to overload TCP 😂)

[23:29:32.0854] <ljharb>
definitely - https://yehudakatz.com/2012/01/10/javascript-needs-blocks/ https://www.tomshouseofdollars.com/Tennent/

[23:30:01.0528] <ljharb>
it’s been on tc39 bingo for a long time :-p

[23:30:38.0295] <rkirsling>
yeah but not like, in a continuous way

[23:31:17.0026] <rkirsling>
it's one of those "you had to be there, otherwise for years you're just like _what's the deal with that_ anytime it comes up" phrases

[23:32:25.0700] <rkirsling>
like it always looks like a misspelling of David Tennant's name and I'm like, what's Dr. Who got to do with it

[00:03:17.0478] <jschoi>
It really does need a better name than a false eponym. Like “block-wrapped equivalence” or “in-block identity”. 

[00:19:19.0903] <rkirsling>
or something like "invariance under rescoping"

[00:21:16.0352] <rkirsling>
* or something like "invariance under rescoping" or "scope context (in)sensitivity"

[00:27:40.0179] <Ashley Claymore>
Single Semantic Scope

[00:31:38.0086] <jschoi>
“Stable Under Scope”. “That variable is SUS.”

[00:33:46.0537] <jschoi>
(I kind of suspect that that new #310 issue was LLM generated; it has that feeling…)

[00:34:38.0912] <jschoi>
* “Stable Under Scope”. E.g., “That variable is SUS.”

[00:35:31.0555] <jschoi>
* “Stable Under Scopes”: “That variable is SUS.”
“Stable Between Scopes”: “That variable is SBS.”

[00:36:15.0692] <jschoi>
* “Stable Under Scope”: “That variable is SUS.”🔪 “Stable Between Scopes”: “That variable is SBS.”

[09:10:54.0064] <TabAtkins>
Hm, yeah, a better name is indeed needed. We have a similar policy in CSS that adding an unstyled inline between some text and an ancestor should not cause observable behavior changes in any inherited properties; we refer to it informally as "inline transparency"

[09:11:15.0855] <TabAtkins>
* Hm, yeah, a better name is indeed needed. We have a similar policy in CSS that adding an unstyled inline between some text and an ancestor should not cause observable behavior changes in any inherited properties specified on the ancestor; we refer to it informally as "inline transparency"

[09:12:01.0315] <TabAtkins>
Additional Scope Transparency, I don't think there's any other PL-related AST acronym ^_^

[13:51:03.0866] <jschoi>
* “Stable Under Scope”: “That variable is SUS.” 🔪
“Stable Between Scopes”: “That variable is SBS.”


2025-03-05
[16:39:58.0311] <jschoi>
It’s been a long time, and yet I’m realizing now that nobody seems to have proposed `..` as the topic reference. 

```js
x = grunt.config('uglify.all.files') |> Object.keys(..)[0];
x = pkgs[0] |> npa(..).escapedName |> await npmFetch.json(.., opts);
x = cb(predicate) |> _.negate(..) |> _.filter(obj, .., context);
Object.keys(envars)
  .map(envar => `${envar}=${envars[envar]}`)
  .join(' ')
  |> `$ ${..}`
  |> chalk.dim(.., 'node', args.join(' '))
  |> console.log(..);
context
  |> (.. && (..).nodeType ? (..).ownerDocument || .. : document)
  |> jQuery.parseHTML(match[1], .., true)
  |> jQuery.merge(..);
```

`..` as the topic doesn’t seem bad. It only really clashes with property accesses—which are already postfix, so you would rarely use pipe on them anyway. And spread syntax, I guess, but doing that on the topic would probably be even rarer. 

`..` is even more visually lightweight than `^^`, and it’s easier to type than `^^` and `%%`.
Plus, `..` usually gets its own typographic ligatures in fancy code fonts, for those who are into those.

[16:48:05.0977] <ljharb>
why would it be rare to have an iterable topic?

[16:52:58.0162] <jschoi>
I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal would be pretty rare.

[16:55:26.0352] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.
```js
arr |> f(...(..)) // How often would this happen?
```
Though, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.

[16:56:21.0363] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.

```js
x |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0) // How often would this happen?
```

Though, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.

[16:56:50.0451] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.

```js
// How often would spreading a topic into a variadic function happen?
x |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)
```

Though, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.

[16:57:21.0086] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.

```js
// How often would you need to spread a topic
// into a variadic function?
x |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)
```

Though, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.

[17:00:52.0864] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.

```js
// How often would you need to spread a topic
// into a variadic function?
x |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)
```

Though, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.

[17:01:42.0301] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that *spreading* an iterable topic into a function call or array/object literal within a pipe would be pretty rare.

```js
// How often would you need to spread a topic
// into a variadic function?
x |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)
```

Though, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.

[17:04:45.0648] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that _spreading_ an iterable topic into a function call or array/object literal within a pipe would be pretty rare.

```js
// How often would you need to spread a topic
// into a variadic function?
x |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)
// Maybe "appending" a value into an array copy is more common:
x |> fnThatReturnsArray(..) |> [ ...(..), 0 ]
```

Though, even when it does happen, `f(...(..))` or `[ ...(..) ]` wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.

[17:05:06.0938] <jschoi>
* I don’t think having an iterable topic would be rare, but I do think that _spreading_ an iterable topic into a function call or array/object literal within a pipe would be pretty rare.

```js
// How often would you need to spread a topic
// into a variadic function?
x |> fnThatReturnsIter(..) |> variadicFn(...(..)) |> g(.., 0)
// Maybe "appending" a value into an array copy is more common:
x |> fnThatReturnsIter(..) |> [ ...(..), 0 ]
```

Though, even when it does happen, `f(...(..))` or `[ ...(..) ]` wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.

[21:00:04.0004] <ljharb>
`arrayOfNumbers |> Math.max(...(..))`?

[21:01:43.0055] <rkirsling>
^ this seems like a nice syntactic "test case"

[21:02:12.0884] <rkirsling>
* ^ this seems like it'd be a nice syntactic "test case" for considering the various options against

[21:02:23.0255] <rkirsling>
* ^ this seems like a nice syntactic "test case" to consider the various options against

[21:04:28.0032] <rkirsling>
* ^ this seems like a nice syntactic "test case" for evaluating the various options

[22:09:18.0331] <jschoi>
Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls. 
And just a space separating `...` and `..` should work, without parentheses, right?
```js
arr |> Math.min(0, ... ..) |> numFormat.format(..) |> console.log(`Max is {..}`);
arr |> Math.min(0, ...^^) |> numFormat.format(^^) |> console.log(`Max is {^^}`);
arr |> Math.min(0, ...%%) |> numFormat.format(^^) |> console.log(`Max is {%%}`);
arr |> Math.min(0, ...#_) |> numFormat.format(#_) |> console.log(`Max is {#_}`);
```
I’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.

[22:10:08.0767] <jschoi>
* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls.
And just a space separating `...` and `..` should work, without parentheses, right?

```js
arr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);
arr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);
arr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);
arr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);
```

I’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.

[22:11:22.0741] <jschoi>
* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.
And just a space separating `...` and `..` should work, without parentheses, right?

```js
arr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);
arr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);
arr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);
arr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);
```

I’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.

[22:11:52.0069] <jschoi>
* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.
And just a space separating `...` and `..` should work, without parentheses, right? `[ ... .. ]` rather than `[ ...(..) ]`.

```js
arr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);
arr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);
arr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);
arr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);
```

I’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.

[22:16:00.0984] <jschoi>
* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.
And just a space separating `...` and `..` should work, without parentheses, right? `x |> [... ..]` rather than `x |> [...(..)]`.

```js
arr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);
arr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);
arr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);
arr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);
```

I’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.

[22:37:20.0067] <rbuckton>
I can't say I'm thrilled with how `...x` looks for property access. 

[22:42:29.0878] <rbuckton>
I'm still of the opinion that F#-style pipes would have been better. `arr |> (x) => Math.min(0, ...x)` means no special topic is needed, PFA or no PFA. 

[23:05:01.0779] <ljharb>
that's a nonstarter tho based on browser feedback

[23:05:10.0209] <ljharb>
personally i think `..` is way worse than `^^` or `&&`

[23:22:23.0144] <rkirsling>
I mostly like the `..` except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing `(..)`

[23:24:26.0480] <rkirsling>
* I mostly like `..` except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing `(..)`, which might in itself rule it out

[23:26:26.0853] <rkirsling>
I hate %% but I think this discussion makes me come around to ^^ a bit

[23:26:32.0729] <rkirsling>
* I hate %% but I think this discussion actually makes me come around to ^^ a bit

[00:12:59.0102] <Ashley Claymore>
the main thing I like about ^^ is the shape resemblance with |>

[00:27:08.0429] <rkirsling>
interesting

[00:27:47.0121] <rkirsling>
I don't know about that, but in this context, I was appreciating how ^^ can sit next to . and ... nicely

[00:30:18.0248] <rkirsling>
if we could type dots above like ˙˙ then that'd be cool but we can't so ^^ stands as a typable alternative

[01:05:03.0089] <Nic>
> <@ljharb:matrix.org> that's a nonstarter tho based on browser feedback

F# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable) the "parameters" evaluates its body? Since it's an iife anyway 

[01:05:24.0094] <Nic>
* F# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable (the "parameters") and evaluates its body? Since it's an iife anyway 

[01:09:54.0114] <Nic>
Maybe even syntactically limiting it to 1 parameters, like we do for setters

