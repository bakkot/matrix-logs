2025-04-02
[17:10:58.0484] <jschoi>
It’s been nearly three years since the last pipe update to the community in https://github.com/tc39/proposal-pipeline-operator/issues/232. I drafted a [new update covering the past few years in a private Gist](https://gist.github.com/js-choi/b626c180e0e15f3e8b7f7fded693962f).

Let me know if you have any feedback. I plan to post this in about one week. I will update [HISTORY.md](https://github.com/tc39/proposal-pipeline-operator/blob/main/HISTORY.md) with it too.

[06:06:18.0992] <TabAtkins>
This looks good!


2025-04-07
[14:52:49.0363] <jschoi>
FYI, I plan to post that (non-)announcement post from the Gist tonight. I also made some adjustments to it:

* I added references to the JSSugar proposal as an example of how complicated proposing new syntax has become. 
* I also added, in a second file in the Gist, an updated version of the “TC39 does not want to encourage tacit programming” #221 issue.

[14:55:39.0029] <jschoi>
I also am actually pretty excited about potentially getting `#` back from tuples, if we start considering [syntaxes other than `#[0]` for ordinal composite literals](https://github.com/acutmore/proposal-composites/issues/7). I plan to make a comment on the topic bikeshedding thread about that too.

[14:56:03.0807] <jschoi>
* I also am actually pretty excited about potentially getting `#` back for pipe topics from tuples, if we start considering [syntaxes other than `#[0]` for ordinal composite literals](https://github.com/acutmore/proposal-composites/issues/7). I plan to make a comment on the topic bikeshedding thread about that too.


2025-04-08
[17:06:45.0085] <ljharb>
fwiw `#` already means private fields so it's not necessarily a home run

[17:14:52.0760] <jschoi>
That is true. Of course, that problem is shared with `#`-based composite literals, too. 

And every choice of pipe topic left (`^^`, `@@`, `#_`, etc.) also has problems with visual association. I suppose one could argue that binary `^` is relatively rare.

I still think the [formulae in the wiki](https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token#criteria-for-choosing-the-token) are pretty good heuristics.

[14:18:27.0122] <TabAtkins>
I still think we want to allow for # to be a metacharacter, since we're *nearly* out of ASCII syntax, so we'd want `##` for the topic.

[14:45:25.0564] <jschoi>
It’s true that we’re almost out of symbols. 
`@` is also there as a metacharacter, to a limited extent.
I was against `##` in that [November 2021 incubator call](https://github.com/tc39/incubator-agendas/blob/main/notes/2021/11-15.md), but I’m less negative toward it now.
I still want `#` most. The brevity would be so nice.
But `##` (and `^^` aren’t) terrible. I like `#_`, `@@`, and `%%` less.

[14:45:48.0081] <jschoi>
* It’s true that we’re almost out of symbols.
`@` is also there as a metacharacter, to a limited extent.
I was against `##` in that [November 2021 incubator call](https://github.com/tc39/incubator-agendas/blob/main/notes/2021/11-15.md), but I’m less negative toward it now.
I still want `#` most. The brevity would be so nice.
But `##` (and `^^`) aren’t terrible. I like `#_`, `@@`, and `%%` less.

[14:46:09.0310] <jschoi>
* It’s true that we’re almost out of symbols.
`@` is also there as a metacharacter, to a limited extent.
I was against `##` in that [November 2021 incubator call](https://github.com/tc39/incubator-agendas/blob/main/notes/2021/11-15.md), but I’m less negative toward `##` now.
I still want `#` most. Its brevity would be so nice.
But `##` (and `^^`) aren’t terrible. I like `#_`, `@@`, and `%%` less.

[14:56:40.0684] <jschoi>
* It’s true that we’re almost out of symbols.
`@` is also there as a metacharacter, to a limited extent.
I was against `##` in that [November 2021 incubator call](https://github.com/tc39/incubator-agendas/blob/main/notes/2021/11-15.md), but I’m less negative toward `##` now (because composite literals would probably be much less ubiquitous than record/tuple literals, so there would be much less visual noise with `##`).
I still want `#` most. Its brevity would be so nice.
But `##` (and `^^`) aren’t terrible. I like `#_`, `@@`, and `%%` less.

[15:00:35.0915] <jschoi>
* It’s true that we’re almost out of symbols.
`@` is also there as a metacharacter, to a limited extent.
I was against `##` in that [November 2021 incubator call](https://github.com/tc39/incubator-agendas/blob/main/notes/2021/11-15.md), but I’m less negative toward `##` now (because composite literals would probably be much less ubiquitous than record/tuple literals, so there would be much less visual noise with `##`).
I still want `#` most. Its brevity would be so nice.
But `##` (and `^^`) aren’t terrible. I like `#_`, `@@`, and `%%` less.
The [wiki page](https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token) has been refreshed.


2025-04-17
[19:19:25.0349] <pokute>
Let spread them all to evaluate them:
`#@` is super easy to type on english keyboards. For some others, the switching from shift to Alt-Gr for @ is cumbersome.
`#^` has both symbols use shift in my (finnish) keyboard, ^ is a modifier key so requires an extra spacebar hit. Quite fast to type however.
`#~` is an even worse combination as that ~ is a modifier key behind Alt-Gr for ã, ñ so it requires both shift->alt-gr and an extra spacebar hit.
`#:` Fine to type, looks weird.
`#!`, `#?` Super easy to type, but can be written in confusing form.
`#;` Well, that **is** confusing.
`#%`, `#&` Rather neutral
`#=` `#.` `#,` `#|` `#\` ... yeah ...

Fortunately I don't think there's any real case for having a pipeline token immediately followed by an identifier(?) so chance of writing something like `#ãdditionalVariable` is extremely rare (as long as we don't get infix functions).

[19:20:20.0235] <pokute>
But we actually do have a single-character that is extremely available for use: `\`

[19:21:04.0171] <pokute>
* But we actually do have a yet unmentioned single-character that is extremely available for use: `\`

[19:24:17.0497] <pokute>
Though `\` looks weird for a topic identifier for pipelines, I don't see why it can't be used as metacharacter for (rip) records and tuples. `\[0, 1, 2]`

[20:03:47.0414] <pokute>
Finally, I'm of the opinion that the dev reality of syntax highlighting, in-editor parsing and formatters should be taken into account. Just because we can mimic PERL with existing JS to construct the most devious brain teasers for our wetware tokenizers we shouldn't expect to anyone really developing anything even close to that.
I already find it more taxing to read JS that doesn't color the identifiers from operators and parentheses so having the pipeline topic styled helps already a lot.
It should be a concern of course, but not a very big one.

[20:04:24.0312] <pokute>
For example, the following is rather difficult to reason as is: `notFound |> addOne(#) |> (#?#^1:!#)  |> console.log(#)`

[20:04:41.0794] <pokute>
* For example, the following is rather difficult to reason as is: `notFound |> addOne(#) |> (#?#^1:!#)  |> console.log(#)` compared to:

[20:06:13.0209] <pokute>
* For example, the following is rather difficult to reason as is: `notFound |> addOne(#) |> (#?#^1:!#)  |> console.log(#)` compared to the following example where the topic token is conveniently colored differently:

[20:07:55.0351] <pokute>
* For example, the following convoluted and hasty example is rather difficult to reason as is: `notFound |> addOne(#) |> (#?#^1:!#)  |> console.log(#)` compared to the following example where the topic token is conveniently colored differently:

[21:53:17.0843] <pokute>
* Let spread them all to evaluate them:
`#@` is super easy to type on english keyboards. For some others, the switching from shift to Alt-Gr for @ is cumbersome.
`#^` has both symbols use shift in my (finnish) keyboard, ^ is a modifier key so requires an extra spacebar hit. Quite fast to type however.
`#~` is an even worse combination as that ~ is a modifier key behind Alt-Gr for ã, ñ so it requires both shift->alt-gr and an extra spacebar hit.
`#:` Fine to type, looks weird.
`#!`, `#?` Super easy to type, but can be written in confusing form. Can be super confusing with types.
`#;` Well, that **is** confusing.
`#%`, `#&` Rather neutral
`#=` `#.` `#,` `#|` `#\` ... yeah ...

Fortunately I don't think there's any real case for having a pipeline token immediately followed by an identifier(?) so chance of writing something like `#ãdditionalVariable` is extremely rare (as long as we don't get infix functions).

[23:12:51.0422] <jschoi>
pokute: I’m a little confused, sorry. Are you exploring these `#@`, `#^`, etc. symbols as potential pipe topics, or are you exploring them as tokens for other future syntaxes?

[23:15:27.0584] <pokute>
Potential pipe topics that I don't recall having been discussed, just for completionism's sake (at least that start with #).


2025-04-30
[19:27:42.0480] <jschoi>
pokute: `\` is indeed an unused metacharacter. Though it would look very strange for the pipe topic; we should save `\` for other things. 

As far as I’m concerned, `#`, `##`, and `^^` are the frontrunners. I think all the other symbols that start with `#` are unnecessarily visually prominent. 

[19:39:55.0335] <jschoi>
Incidentally, I was going through old pipe issues and I saw a recent mention from this comment on a “GitHub drama” repository: https://github.com/neodrama/github-drama/issues/2#issuecomment-2597021858

