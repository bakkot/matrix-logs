2022-01-04
[09:57:40.0857] <TabAtkins>
jschoi: Oh man, this diagram is great.

[10:00:53.0632] <TabAtkins>
Hmm, I wonder if Extensions has a way to handle the syntax ambiguity of its trinary form - is `x?y::z:f()` equal to `x ? (y::z:f())` or `x ? (y::z) : f()`? Does it depend on whether there's a trailing `: elseVal` afterwards?

[10:04:02.0427] <jschoi>
> <@tabatkins:matrix.org> Hmm, I wonder if Extensions has a way to handle the syntax ambiguity of its trinary form - is `x?y::z:f()` equal to `x ? (y::z:f())` or `x ? (y::z) : f()`? Does it depend on whether there's a trailing `: elseVal` afterwards?

According to Hax’s slides, the trinary form is type-polymorphic depending on whether the middle operand evaluates into a constructor or not. 

[10:04:12.0521] <jschoi>
* > <@tabatkins:matrix.org> Hmm, I wonder if Extensions has a way to handle the syntax ambiguity of its trinary form - is `x?y::z:f()` equal to `x ? (y::z:f())` or `x ? (y::z) : f()`? Does it depend on whether there's a trailing `: elseVal` afterwards?

The trinary form is type-polymorphic depending on whether the middle operand evaluates into a constructor or not. 

[10:04:28.0087] <jschoi>
* > <@tabatkins:matrix.org> Hmm, I wonder if Extensions has a way to handle the syntax ambiguity of its trinary form - is `x?y::z:f()` equal to `x ? (y::z:f())` or `x ? (y::z) : f()`? Does it depend on whether there's a trailing `: elseVal` afterwards?

According to Hax’s slides, the trinary form is type-polymorphic depending on whether the middle operand evaluates into a constructor or not. 

[10:04:37.0857] <TabAtkins>
I'm talking at a higher level of parsing, before evaluation occurs.

[10:04:43.0781] <jschoi>
Oh wait I see. 

[10:04:50.0854] <jschoi>
Yeah, I see. 

[10:05:07.0756] <TabAtkins>
The ?: trinary really poisons single-colon usage.

[10:10:38.0200] <Nicolò>
TS and Flow are a nightmare to parse because of their usage of : for return type annotations (especially of arrow functions)

[10:19:16.0455] <TabAtkins>
Hrmmm, Extension's `obj::foo = 1` syntax for setters doesn't generalize. `obj::foo::bar = 1` will call `foo` as a getter, then `bar` as a setter, meaning you still can't use it for functional data structures, which need to unfold the earlier parts of the assignment chain into get/set pairs.

[10:23:09.0446] <jschoi>
Regarding `x?y::z:f()`, I figure that it would be a SyntaxError to include an unparenthesized trinary extensions expression inside a trinary conditional expression.

Regarding `obj::foo::bar = 1`, yeah, that is a problem, and I don’t know how it could actually work.

CC: HE Shi-Jun 



[10:24:09.0896] <jschoi>
(By the way, Nicolò: if babel/babel#13973 looks good to you, I’m going to start work on `@[]`/`@{}` syntax for tuples/records soon based on that pull request.)

