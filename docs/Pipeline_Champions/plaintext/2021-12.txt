2021-12-07
[12:18:31.0727] <TabAtkins>
Finally realized that setting the room's visibility to "Anyone" won't reveal past messages, so it's safe to do so.


2021-12-08
[00:32:34.0135] <pokute>
Usually past messages under different rules are not (at least should not be) revealed as a default. The people that were talking before the changes relied at the rules at that point and everyone can't be reached for permission.

[00:33:01.0932] <pokute>
 * Usually past messages under different rules are not (at least should not be) revealed as a default. The people that were talking before the changes relied at the rules at that point and everyone can't be reached for permission.

[14:05:51.0490] <TabAtkins>
Yes, they're not, that was my point. (I *thought* they would be, because I didn't read the dialog very carefully and the options are structured in a slightly misleading way.)


2021-12-10
[20:53:15.0735] <jschoi>
https://github.com/tc39/proposal-pipeline-operator/issues/232#issuecomment-990615800

[20:53:22.0567] <jschoi>
https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-990614661

[07:51:47.0221] <jschoi>
https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-991010158 raised the point that the only thing keeping `#` from being the topic token is record/tuple literals being `#{}` and `#[]` and not `{||}` and `[||]`. And this question still doesn’t seem to be settled, since tc39/proposal-record-tuple#10 hasn’t seen recent activity and the most recent record/tuple update from October did not mention the spelling issue.


[07:51:48.0236] <jschoi>
nicolo-ribaudo: Has there been recent talk over whether the record/tuple champions are committed to `#{}` and `#[]` and not `{||}` and `[||]`? Is there still any chance of the latter syntax being what you choose?

[07:52:12.0927] <jschoi>
 * nicolo-ribaudo: Has there been recent talk over whether the record/tuple champions are committed to `#{}` and `#[]` and not `{||}` and `[||]`?

[07:58:59.0969] <jschoi>
 * nicolo-ribaudo: Has there been recent talk over whether the record/tuple champions are committed to `#{}` and `#[]` and not `{||}` and `[||]`? Is there still any chance of the latter syntax being what you choose?

[12:02:03.0175] <James DiGioia (mAAdhaTTah on GH)>
Honestly, I rather like `{| |}`. I think Flow uses that syntax as well.

[12:06:26.0986] <rbuckton>
That could be a reason they can't or won't adopt it however. 

[12:09:06.0016] <jschoi>
Whether or not Flow or other JS dialects impose hard constraints on record/tuple literals’ spelling, we probably should wait on committing to wholly rejecting `#` as a topic token until the record/tuple champions commit to `#{}` and `#[]` (or `{||}` and `[||]`).

[12:38:39.0049] <TabAtkins>
I'm fine with holding onto `#` as an explicit stretch goal

[12:39:06.0329] <James DiGioia (mAAdhaTTah on GH)>
> <@rbuckton:matrix.org> That could be a reason they can't or won't adopt it however.

I believe Flow only uses it for exact object types & not values.

[12:39:54.0808] <James DiGioia (mAAdhaTTah on GH)>
Which actually could be conflicting, now that I think about it, cuz it's not about immutability but extra properties.

[12:42:06.0649] <pokute>
> <@jamesdigioia:matrix.org> Which actually could be conflicting, now that I think about it, cuz it's not about immutability but extra properties.

Something like `const foo: {| a: 2 |} = { a: 2 }` then?

[12:44:28.0047] <Ashley Claymore>
The flow conflict would be that the type would look like a record literal but be an object type. So could be confusing. But wouldn’t be a technical clash

[12:44:55.0137] <Ashley Claymore>
computers would understand the difference 

[12:45:06.0726] <pokute>
The only point that it conflicts is that with `const foo: {| a: 2 |} = { a: 2 };` flow will not be able to declare a tuple type as easily.

[12:46:41.0840] <James DiGioia (mAAdhaTTah on GH)>
> <@aclaymore:matrix.org> The flow conflict would be that the type would look like a record literal but be an object type. So could be confusing. But wouldn’t be a technical clash

Unless the explicit intention is for the type to be a Record.

[12:47:04.0420] <pokute>
Heh, I meant a record.

[12:47:13.0186] <James DiGioia (mAAdhaTTah on GH)>
Oh right yeah

[12:47:15.0150] <James DiGioia (mAAdhaTTah on GH)>
 * Oh right yeah

[12:47:36.0968] <James DiGioia (mAAdhaTTah on GH)>
Well, computer _wouldn't_ know the difference between "Exact Object Type" & "Record Type"

[12:48:01.0591] <James DiGioia (mAAdhaTTah on GH)>
Unless Flow came up with a distinct syntax for Record Types

[12:52:11.0100] <pokute>
Actually, Tuple typing at all in JS IS interesting. For typing the only real issue I think is when something returns a tuple/record. Further, typescript has already a more intricate support for everything except an ergonomic syntax for it. I think there's even DeepReadonlyObject<T> generic (though not included in standard TypeScript typing definitions)

[12:52:21.0080] <jschoi>
As far as I know, TC39 has never considered TypeScript, Flow, etc. to be hard blockers on potential new future ES syntax, and TypeScript has done backwards-compatibility changes to accommodate new ES syntaxes.

[12:52:27.0973] <jschoi>
 * As far as I know, TC39 has never considered TypeScript, Flow, etc. to be hard blockers on potential new future syntax, and TypeScript has done backwards-compatibility changes to accommodate new ES syntaxes.

[12:52:30.0497] <jschoi>
 * As far as I know, TC39 has never considered TypeScript, Flow, etc. to be hard blockers on potential new future ES syntax, and TypeScript has done backwards-compatibility changes to accommodate new ES syntaxes.

[12:52:45.0282] <TabAtkins>
yeah, we do *soft* avoidance of clashes, for politeness' sake, but that's it

[12:53:09.0662] <jschoi>
TypeScript and Flow have the luxury of language versioning, haw.

[12:53:18.0992] <jschoi>
 * TypeScript and Flow have the luxury of language versioning, haw.

[12:54:08.0318] <pokute>
TypeScript can break stuff between minor versions (since the versioning is 2.9 -> 3.0).

[12:54:19.0100] <pokute>
And a new TS version is released every 2 months IIRC.

[12:56:37.0781] <pokute>
I believe that Flow and TS would really really want an ergonomic type to define tuples and records. Preferably the same syntax as in JS.

[12:56:57.0944] <Ashley Claymore>
Flow is also moving for types to be closed by default

[12:57:12.0902] <Ashley Claymore>
so the `{| |}` flow type syntax is actually semi deprecated

[12:57:40.0366] <pokute>
For Flow, it seems like it would be a breaking change to change `{| |}` behaviour, but it should be pretty easy to fix through something like codefix.

[12:57:43.0032] <Ashley Claymore>
That said I don't think the reason R&T was not using that syntax was because of the clash with Flow.

[12:58:55.0003] <pokute>
`{| |}` has the disadvantage that it's not as ergonomic to change objects -> records and vice-versa since you have two places to edit.

[13:01:42.0561] <jschoi>
> <@aclaymore:matrix.org> That said I don't think the reason R&T was not using that syntax was because of the clash with Flow.

See also https://github.com/tc39/proposal-record-tuple/issues/10.

[13:02:12.0623] <Ashley Claymore>
> <@jschoi:matrix.org> See also https://github.com/tc39/proposal-record-tuple/issues/10.

dw I've read almost every comment of every issue in the RT repo ;)

[13:02:39.0498] <Ashley Claymore>
my colleagues are the champions, so I take an active interest :)

[13:06:01.0215] <pokute>
Though, it feels like flow's `{| a: string |}` is for a use case that feels extremely rare: for `const foo: {| a: string |} = { a: 'a', b: 1 }; // Error`. Maybe someone could scour existing flow projects for them.

[13:07:07.0757] <pokute>
Wasn't Flow mainly used at Facebook? maybe we can ask for someone who has access to their repo.

[13:11:21.0743] <Ashley Claymore>
As I said earlier, flow is moving towards 'exact types by default'
https://medium.com/flow-type/on-the-roadmap-exact-objects-by-default-16b72933c5cf

[13:11:58.0740] <Ashley Claymore>
so `{| a: string  |}` in Flow can be replaced with `{ a: string }`
and you opt-out of it with `{ a: string, ... }`

[13:22:13.0210] <ljharb>
why does it matter if flow conflicts? flow isn't js.

[13:22:59.0394] <ljharb>
that's just the risk things take when they extend JS syntax in any but the one way reserved for that purpose (the `:` type annotation stuff)

altho in this case it's flow's type syntax, so JS having that syntax in a value context wouldn't even conflict in a technical sense, just a conceptual one.

[13:23:00.0535] <Ashley Claymore>
 * so `{| a: string  |}` in Flow can be replaced with `{ a: string }`
and you opt-out of it with `{ a: string, ... }`

[13:23:30.0273] <ljharb>
 * that's just the risk things take when they extend JS syntax in any but the one way reserved for that purpose (the `:` type annotation stuff)

altho in this case it's flow's type syntax, so JS having that syntax in a value context wouldn't even conflict in a technical sense.

[13:23:36.0215] <ljharb>
 * that's just the risk things take when they extend JS syntax in any but the one way reserved for that purpose (the `:` type annotation stuff)

altho in this case it's flow's type syntax, so JS having that syntax in a value context wouldn't even conflict in a technical sense, just a conceptual one.

[13:23:38.0997] <pokute>
> <@aclaymore:matrix.org> As I said earlier, flow is moving towards 'exact types by default'
> https://medium.com/flow-type/on-the-roadmap-exact-objects-by-default-16b72933c5cf

Exact types is pretty weird for me, although I've done something similar in TypeScript. I've been thinking of typing in JS and TS as "if it has the required properties, then it fulfills the type". There is a risk of polluting naive code with extra properties, but the type system is not the shield against it.

[13:24:18.0940] <ljharb>
¯\\\_(ツ)_/¯ in react propTypes, using exact types has caught innumerable bugs, including typos on optional prop names, so i think there's tons of value in that being the default in a type system.

[13:25:23.0511] <ljharb>
 * ¯\\\_(ツ)_/¯ in react propTypes, using exact types has caught innumerable bugs, including typos on optional prop names, so i think there's tons of value in that being the default in a type system.

[13:26:23.0545] <Ashley Claymore>
> <@ljharb:matrix.org> that's just the risk things take when they extend JS syntax in any but the one way reserved for that purpose (the `:` type annotation stuff)
> 
> altho in this case it's flow's type syntax, so JS having that syntax in a value context wouldn't even conflict in a technical sense, just a conceptual one.

yep it is only a conceptual clash for people reading it, and isn't the syntax Flow is sticking with going forwards. So Flow isn't the issue here.

[13:33:14.0702] <jschoi>
> <@tabatkins:matrix.org> I'm fine with holding onto `#` as an explicit stretch goal

FYI, I added `#` back to the table of candidates in https://github.com/tc39/proposal-pipeline-operator/wiki/Bikeshedding-the-Hack-topic-token/.

[13:38:19.0094] <pokute>
After having followed many different ECMAScript proposals, is there a FAQ counterargument against the "syntax soup" -argument that is pretty common? Basically explaining that we don't even need ECMAScript 3 to tailor unreadable code.

[13:39:27.0038] <jschoi>
Argument soup? You mean ASCII soup?

[13:40:12.0421] <pokute>
 * After having followed many different ECMAScript proposals, is there a FAQ counterargument against the "syntax soup" -argument that is pretty common? Basically explaining that we don't even need ECMAScript 3 to tailor unreadable code.

[13:46:33.0776] <pokute>
As in I don't think people should care about readability of code that hasn't had any readability in mind when it was written.

[13:47:01.0596] <TabAtkins>
There isn't a counter-argument; it's a valid argument.

[13:47:45.0121] <TabAtkins>
Perl is an existence proof of what JS should not become in regular usage. How quickly we get there is individually arguable, but we all agree it's a bad endpoint, and every new syntax addition pushes us there.

[13:48:29.0311] <jschoi>
Yes. Any new proposal has to be compelling enough to override the fact that any new feature adds more weight to the language. See https://erights.medium.com/the-tragedy-of-the-common-lisp-why-large-languages-explode-4e83096239b9

[13:49:03.0427] <jschoi>
Many of us happen to believe that the benefits of the pipe operator outweighs its cost, but there is no denying that there is at least some cost. 

[13:49:12.0463] <jschoi>
Same goes for any proposal. 

[13:51:18.0869] <pokute>
My point was mostly the most recent `^^^` -example. When people don't bother adding a space, they haven't written the code with an intention of having it simple to read.

[13:51:35.0387] <jschoi>
I’ve seen a counterargument from Rob Palmer though against “you can sometimes create unreadable code with this”. His counterargument is that any reasonably powerful language feature can create difficult-to-read code. Like `[[[], [[], [], [[]], []], [[]]]`.

[13:52:38.0628] <jschoi>
* I’ve seen a counterargument from Rob Palmer though against “you can sometimes create unreadable code with this”. His counterargument is that any reasonably powerful language feature can create difficult-to-read code. Like `[[[], [[], [], [[]], []], [[]]]`.

[13:53:06.0163] <pokute>
So I would rather focus on cases where making a easily readable version is cumbersome to write.

[13:58:31.0623] <pokute>
So in my opinion, less weight should be put on "most complex syntax soup I could write", some weight for "I naturally wrote this code and after I wrote it, I realized that it needed clarification" and most for "Writing this often occurring operation is pain to write clearly."

[13:58:54.0935] <pokute>
 * So in my opinion, less weight should be put on "most complex syntax soup I could write", some weight for "I naturally wrote this code and after I wrote it, I realized that it needed clarification" and most for "Writing this often occurring operation is pain to write clearly."

[14:05:04.0934] <pokute>
In comparison, balancing a dozen parenthesis for multiple nested function calls (which is not a rare to end up with) in my mind is vastly more difficult than almost any realistic usage of any suggested topic placeholder topic.

[14:13:09.0195] <TabAtkins>
Yes, that's more or less how we respond to such an argument.

