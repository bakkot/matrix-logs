2022-07-07
[10:32:39.0232] <jschoi>
Yeah, TabAtkins, thanks for continuing to engage with him and others‚ÄîI‚Äôve been really busy myself, so I haven‚Äôt been able to work much on outreach or updates myself. üòî

[13:25:11.0750] <TabAtkins>
And now I'm back to just closing issue threads because the participants refuse to stay on topic and instead keep relitigating the core question. :/

[13:26:02.0737] <TabAtkins>
Should have done that one weeks ago, but I know Kevin personally and wanted to keep things friendly, but good *lord* I do not have time nor interest to engage in dueling essays where every point was brought up and addressed last year.

[13:29:00.0837] <TabAtkins>
(if he has made novel points I missed them in the screenfuls of text that each post of his produces)

[13:29:32.0997] <jschoi>
Insofar that we have already addressed many points of argument that people keep perseverating over, we should add an FAQ section or an FAQ document that summarizes positions, so we could simply point to them every time something gets brought up again. I‚Äôve meant to do this for a year now, but I just haven‚Äôt had time. My apologies about this‚Äîmaybe if I had done so earlier, we would have had you deal with a few less circular threads. 

[13:29:45.0390] <TabAtkins>
I doubt it. ^_^

[13:33:52.0041] <shu>
at least stare decisis have entered people's vocabularies recently

[13:34:21.0454] <TabAtkins>
ah yes, the "stand your ground" rule

[13:34:33.0866] <shu>
though i guess in this case it's more like res judicata than stare decisis

[13:34:40.0159] <shu>
 * though i guess in this case it's more like res judicata than stare decisis

[13:47:37.0559] <jschoi>
‚ÄúStare decisis‚Äù (n.): The act of staring decisively at each other, without budging.

[14:20:27.0031] <rkirsling>
this has truly been a depressing proposal, sociologically speaking

[14:22:39.0842] <TabAtkins>
huh, for some reason I can't hide Kevin's latest response in https://github.com/tc39/proposal-pipeline-operator/issues/238#issuecomment-1178231937 (but could hide his earlier ones)

[15:09:32.0938] <ljharb>
TabAtkins: sometimes i see no "hide" link present, especially when the anchor link points to that specific comment - i usually click the timestamp of another comment and hard-refresh

[15:11:32.0129] <TabAtkins>
Ah, that was indeed the problem. How confusing. Thanks!

[15:22:39.0271] <rbuckton (PTO: 7/5 - 7/16)>
Have we ever tried to quantify how much of the ecosystem prefers Hack-style vs. F#-style? It's unfortunate that much of the early negative response was so vitrolic, but I still wonder if Hack-style was the right direction. This proposal constantly feels like it's being pushed uphill. 

[15:26:58.0909] <shu>
do you plan to hire Pew?

[15:28:00.0903] <rbuckton (PTO: 7/5 - 7/16)>
No, no budget for that

[15:33:20.0793] <jschoi>
For what it‚Äôs worth, I view reconciliation with call-this syntax to be a much greater obstacle to pipe operator compared to its syntax particulars like Hack/F#‚Äîor the choice of the topic, for that matter.‚Ä®(That is, Jordan‚Äôs prior condition to pipe‚Äôs advancement to Stage¬†2 that a this-binding-or-calling syntax also ‚Äúeventually‚Äù advance, and the fact that we have some strong opposition to any such this-binding/calling syntax.)‚Ä®This is one of the two topics that the pipe incubator was chartered to discuss, and we might have some time this plenary to discuss it. But if pipe fails to ever reach Stage¬†4, it‚Äôs going to be because of that critical issue.

[15:33:42.0026] <jschoi>
> <@rbuckton:matrix.org> Have we ever tried to quantify how much of the ecosystem prefers Hack-style vs. F#-style? It's unfortunate that much of the early negative response was so vitrolic, but I still wonder if Hack-style was the right direction. This proposal constantly feels like it's being pushed uphill. 

 * For what it‚Äôs worth, I view reconciliation with call-this syntax to be a much greater obstacle to pipe operator compared to its syntax particulars like Hack/F#‚Äîor the choice of the topic, for that matter.‚Ä®(That is, Jordan‚Äôs prior condition to pipe‚Äôs advancement to Stage¬†2 that a this-binding-or-calling syntax also ‚Äúeventually‚Äù advance, and the fact that we have some strong opposition to any such this-binding/calling syntax.)‚Ä®This is one of the two topics that the pipe incubator was chartered to discuss, and we might have some time this plenary to discuss it. But if pipe fails to ever reach Stage¬†4, it‚Äôs going to be because of that critical issue.

[15:34:06.0966] <jschoi>
‚ÄúThe default is that neither proposal advances, and I‚Äôm fine with that,‚Äù so to speak. Well, I can sympathize with gatekeeping [what‚Äôs left of] the core language‚Äôs simplicity, even if I shed one tear doing so. :‚Äô)

[15:34:40.0697] <jschoi>
* ‚ÄúThe default is that neither proposal advances, and I‚Äôm fine with that,‚Äù so to speak. Well, I can sympathize with gatekeeping [what‚Äôs left of] the core language‚Äôs simplicity, even if I shed one tear doing so. :‚Äô)

[15:35:36.0171] <rbuckton (PTO: 7/5 - 7/16)>
I am still, and probably always be, in favor of F#-style + PFA, even with the limitations regarding yield and await. 

[15:37:02.0585] <jschoi>
* That is to say, Jordan will probably always block Stage¬†4 for pipe unless call-this or something like it reaches Stage¬†3 or 4, as he essentially warned when it reached Stage¬†2 way back c. 2017. 

And (someone else‚Äôs words) ‚Äúthe default is that neither proposal advances, and I‚Äôm fine with that,‚Äù so to speak. I suppose I can sympathize with gatekeeping [what‚Äôs left of] the core language‚Äôs simplicity, even if I shed one tear doing so. :‚Äô)

[15:40:25.0270] <jschoi>
I can certainly sympathize, though my perspective is colored by my Clojure heritage. Speaking of which, there‚Äôs always Elixir style. Or Clojure‚Äôs operator-all-the-pipes-they‚Äôre-all-just-macros style (->, ->>, as->, cond->, etc.), heh.

[15:40:35.0341] <jschoi>
* I can certainly sympathize, though my perspective is colored by my Clojure heritage. Speaking of which, there‚Äôs always Elixir style. Or Clojure‚Äôs operator-all-the-pipes-they‚Äôre-all-just-macros style (->, ->>, as->, cond->, etc.), heh.

[15:56:38.0902] <rbuckton (PTO: 7/5 - 7/16)>
> <@jschoi:matrix.org> I can certainly sympathize, though my perspective is colored by my Clojure heritage. Speaking of which, there‚Äôs always Elixir style. Or Clojure‚Äôs operator-all-the-pipes-they‚Äôre-all-just-macros style (->, ->>, as->, cond->, etc.), heh.

Strongly imposed to Elixir style implicit parameter injection, it just adds more confusion over JS's existing implicit `this`. 

[15:58:26.0183] <rbuckton (PTO: 7/5 - 7/16)>
At least both Hack-style and F#-style are explicit. Hack-style with a topic, F#-style with `x |> F` meaning `F(x)` (plus PFA explicit placeholders). 

[16:00:08.0272] <rbuckton (PTO: 7/5 - 7/16)>
And I still feel if you're using `|>` to do simple expressions like `a + b`, you're holding it wrong. Its the wrong tool for the job. 

[16:01:15.0286] <jschoi>
Yeah, I agree about Elixir style. Anyways, all of these things are different ways to deal with the dichotomy between unary functional languages and n-ary functional languages. Something like a unary‚Äìn-ary functional impedance mismatch, to varying degrees.

[16:01:20.0809] <jschoi>
* Yeah, I agree about Elixir style. Anyways, all of these things are different ways to deal with the dichotomy between unary functional languages and n-ary functional languages. Something like a unary‚Äìn-ary functional impedance mismatch, to varying degrees.

[16:02:19.0086] <ljharb>
i suspect pipeline is the right tool for the job any time you have something complex to pass into a function, or a function call's return value to pass into a function.

[16:04:37.0360] <rbuckton (PTO: 7/5 - 7/16)>
> <@ljharb:matrix.org> i suspect pipeline is the right tool for the job any time you have something complex to pass into a function, or a function call's return value to pass into a function.

That's exactly my point. Piping through functions is the right use. The contrived `x |> % + 1` examples are the ones I think are a poor use.

[16:05:07.0864] <ljharb>
sure. but i don't think those are at all the only ones that support hack

[16:05:45.0586] <rbuckton (PTO: 7/5 - 7/16)>
I'd much rather have `do {}` or a `let..in` syntax for those cases.

[16:06:03.0177] <ljharb>
personally i have a bunch of examples that would work equally well in either style, and a bunch of examples where hack avoids creating a bunch of extra arrow functions, and close to zero examples (but nonzero) where F# is simpler

[16:10:46.0703] <jschoi>
I think `complexExpr |> % + 1` is contrived insofar that you could always replace it with `complexExpr + 1`. It‚Äôs because `+` is a fairly loose operator. In contrast, `complexExpr |> % ** 2` may not be so contrived, since otherwise it probably would have to be `(complexExpr) ** 2` with parentheses‚Äîand now imagine tacking on more and more (syntactically tight) operations‚Ä¶

[16:17:18.0363] <jschoi>
Function calls are a very syntactically tight operation, involving circumflex operators. It is for that reason that it is quite inconvenient to write and to read deeply nested function calls. But this is also generalizable to deeply nested ‚Äúsyntactically tight operations‚Äù, of which function calls are a subset. + expressions don‚Äôt fit as well in that set, but there are other ones that do.
(And there‚Äôs also prefix operations like await and -‚Äîeven though they are syntactically loose, they also mess with writing and reading when applied to deeply nested expressions due to reading order switching between LTR and RTL.)
*Both* F# pipes and Hack pipes try to solve *all* these problems, in their own ways (e.g., `veryDeeplyNestedExpression |> negate` vs. `veryDeeplyNestedExpression |> -%`.

[16:19:18.0870] <jschoi>
* Function calls are a very syntactically tight operation, involving circumflex operators. It is for that reason that it is quite inconvenient to write and to read deeply nested function calls. But this is also generalizable to deeply nested ‚Äúsyntactically tight operations‚Äù, of which function calls are a subset. + expressions don‚Äôt fit as well in that set, but there are other ones that do.
(And there‚Äôs also prefix operations like await and -‚Äîeven though they are syntactically loose, they also mess with writing and reading when applied to deeply nested expressions due to reading order switching between LTR and RTL.)
*Both* F# pipes and Hack pipes try to solve *all* these problems, in their own ways (e.g., `veryDeeplyNestedExpression |> negate` vs. `veryDeeplyNestedExpression |> -%`.


2022-07-08
[18:48:52.0922] <rkirsling>
(oh man I know that was just a typo but the idea of a language where a combining circumflex would serve as an operator is quite amusing to me)


2022-07-09
[19:38:25.0282] <TabAtkins>
Every time someone says "non-function use-cases are contrived" I look back at all the times I've gone "fuck, I wish I had pipeline right now, this is kinda annoying to write" and how they're a pretty substantial mix of functions and operators and just go.... really?

[19:39:14.0940] <TabAtkins>
I fundamentally do not understand how this assertion can be made when I know for a fact how many times I, personally, want non-functions.

[19:42:42.0391] <TabAtkins>
> <@ljharb:matrix.org> personally i have a bunch of examples that would work equally well in either style, and a bunch of examples where hack avoids creating a bunch of extra arrow functions, and close to zero examples (but nonzero) where F# is simpler

Yes, this is my experience precisely. I often want to pipe into functions (sometimes unary, sometimes not; PFA would address the latter cases), but I also often want to linearize other things (mostly math stuff, calling methods on something complex, and of course `await` every. single. fucking. time). 

[10:04:45.0583] <Richard Gibson>
I frequently want to construct e.g. a Map or Set, which currently requires `new` (as in `‚Ä¶ |> (entries => new Map(entries))` if tacit/point-free or `‚Ä¶ |> (new Map(^))` if not)

[10:24:07.0653] <jschoi>
Did we ever consider `*` as a topic token? `f() |> g({ x: * })`. I don‚Äôt remember why `*` was disqualified, if it was at all.

(Otherwise, the top runner is `^^`, given `@`‚Äôs recent problems found by WH.)

[10:24:30.0254] <jschoi>
Is it because of yield *? (This is such a rare case that we could require it to be `yield (*)`.)

[10:24:58.0058] <jschoi>
* Is it because of yield *? (This is such a rare case that we could require it to be `yield (*)`.)

[10:25:07.0397] <jschoi>
* Is it because of `yield *`? (This is such a rare case that we could require it to be `yield (*)`.)

[10:27:01.0089] <jschoi>
Or maybe it‚Äôs because of `**`‚Ä¶`f() |> g(**2)` is terrible but we would probably require separation between topic `*` and binary `*`/`**` anyway, just from the tokenization perspective. I probably wouldn‚Äôt be a big deal to make people use a space to disambiguate the tokenization here.

[10:27:17.0333] <jschoi>
* Or maybe it‚Äôs because of **‚Ä¶f() |> g(***2) is terrible but we would probably require separation between topic * and binary */** anyway, just from the tokenization perspective. It‚Äôs not a big ask to make people use a space to disambiguate the tokenization here.

[10:27:47.0894] <jschoi>
* Or maybe it‚Äôs because of `**`‚Ä¶`f() |> g(**2)` is terrible but we would probably require separation between topic `*` and binary `*`/`**` anyway, just from the tokenization perspective. I probably wouldn‚Äôt be a big deal to make people use a space to disambiguate the tokenization here.


2022-07-10
[10:51:22.0305] <rbuckton (PTO: 7/5 - 7/16)>
There was an interesting discussion in the last TC39/JavaScript Tools meeting about how pipeline was more statically analyzable by bundlers as a means of inlining and optimizing. I do wonder about the statements from implementers that F#-style couldn't be optimized. I definitely believe that F#+PFA could have been optimized to reduce actual function allocations. i.e., `x |> f~(?)` would have had no more overhead than `x |> f(%)`. 


2022-07-11
[18:44:54.0303] <rbuckton (PTO: 7/5 - 7/16)>
Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., 
- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., "evaluate pipeline" or "expression pipeline"). Has a topic.
- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., "call pipeline" or "function pipeline"). Does not have a topic.
- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., "compose pipeline"). Does not have a topic.

This makes some sense as far as first-order vs. higher-order pipeline:

```
// first-order
x |> F(%) |> G(%) 

// second-order
x ||> F ||> G

// third-order
// NOTE: this is backwards from f . g === g(f(x)), but perhaps we 
//       could introduce a "back pipe" `<|||` as a true point/compose operator
x ||> (F |||> G)
x |> (F |||> G)(%)
```

[18:46:25.0044] <rbuckton (PTO: 7/5 - 7/16)>
That would not only cover the FP crowd but also the data science crowd.

[18:48:34.0886] <rbuckton (PTO: 7/5 - 7/16)>
And if we wanted true point/compose, we could pair it with "back pipes" like in F#:
```
G(%) <| F(%) <| x // trickier to parse though
G <|| F <|| x
(G <||| F) <|| x
```

[18:50:06.0930] <rbuckton (PTO: 7/5 - 7/16)>
The back-pipe variant has similarities to decorator application as well:
```
class C {
  @F
  @G
  method() {}
}
 
F <||
G <||
function () {}
```

[19:04:03.0598] <rbuckton (PTO: 7/5 - 7/16)>
Then there's something for everyone, and while there might be some that ask "But can't we use `|>` for the F# case?" we could say that `|>` means "first-order", `||>` means "second-order" and `|||>` means "third-order" as a heuristic roughly based in first-order vs. higher-order logic.

[19:13:37.0483] <rbuckton (PTO: 7/5 - 7/16)>
For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:

```
a * b + c
a {*} b {+} c 
plus(times(a, b), c)

// first-order
a |> % * b |> % + c
a |> % {*} b |> % {+} c
a |> times(a, b) |> plus(%, c)
 
// second-order
a ||> {*} b ||> {+} c
a ||> times~(?, b) ||> plus~(?, c)
 
// third-order
a ||> ({*} b |||> {+} c)
a ||> (times~(?, b) |||> plus~(?, c))
```

[19:14:42.0865] <rbuckton (PTO: 7/5 - 7/16)>
 * For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:

```
a * b + c
a {*} b {+} c 
plus(times(a, b), c)

// first-order
a |> % * b |> % + c
a |> % {*} b |> % {+} c
a |> times(a, b) |> plus(%, c)
 
// second-order
a ||> {*} b ||> {+} c
a ||> times~(?, b) ||> plus~(?, c)
 
// third-order
a ||> ({*} b |||> {+} c)
a ||> (times~(?, b) |||> plus~(?, c))
```

[19:43:34.0688] <TabAtkins>
> <@jschoi:matrix.org> Did we ever consider `*` as a topic token? `f() |> g({ x: * })`. I don‚Äôt remember why `*` was disqualified, if it was at all.
> 
> (Otherwise, the top runner is `^^`, given `@`‚Äôs recent problems found by WH.)

Binary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.

[19:44:12.0145] <TabAtkins>
But yeah, `*` vs `**` and `yield*` all make `*` even worse, specifically.

[19:50:45.0138] <TabAtkins>
rbuckton (PTO: 7/5 - 7/16): Putting aside that I'm very confident a second pipe won't make it thru committee (the majority of the benefit of pipeline is already granted by the first one), I've no problem with pursuing tacit pipes in the future, so long as they don't block *this* proposal (either by trying to claim syntax, or by getting bundled into this proposal as a package).

[19:56:04.0541] <rbuckton (PTO: 7/5 - 7/16)>
It might have more credence if its promoted as a compromise for FP/Data Science, and that it may have less impact on performance if a first-order `|>` already exists, i.e.: The folks that need it will use it, as they would have been using unary functions anyways (so perf impact would be equivalent), but general use cases could lean on `|>` instead. Linters could, in theory, point users to using `|>` over `||>` (or `|||>`) when their usage would benefit from simplification.

[19:57:11.0709] <rbuckton (PTO: 7/5 - 7/16)>
And it would help to include, rather than alienate, existing FP libraries in the ecosystem.

[20:01:45.0070] <rbuckton (PTO: 7/5 - 7/16)>
 * And it would be a way to include, rather than alienate, existing FP libraries in the ecosystem.

[20:05:14.0372] <rkirsling>
while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice

[20:05:50.0065] <rkirsling>
I've said that here before but I guess I should say it more publicly/formally

[20:18:01.0120] <TabAtkins>
Like I said, I've no problem with it *so long as it doesn't do anything to block this one*; promoting it as a compromise solution implies that it's a package with the current pipeline and will only hurt our chances of getting either thru.

[05:38:55.0326] <jschoi>
> <@tabatkins:matrix.org> Binary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.

Yeah, agreed, but I think that requiring separation between the topic and binary `*`/`**` might not be a big cost. 

I suspect maybe >90% of uses of pipe will be with function calls or object/array literals `f() |> g([*], 0), and it may be worth optimizing for those cases, rather than for `f() |> * ** 2`. And even `f() |> * ** 2` isn‚Äôt that unreadable. 
It‚Äôs worth at least considering, since it probably is basically the only single-character token left. 

[05:39:43.0785] <jschoi>
> <@rkirsling:matrix.org> while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice

Disliking `^^` then, are you? üôÇ

[05:40:21.0610] <jschoi>
> <@rkirsling:matrix.org> while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice

 * You dislike `^^` then, is that right? If so, I‚Äôll add it to the table. üôÇ

[05:42:01.0831] <jschoi>
* You dislike `^^` then, is that right, Ross? If so, I‚Äôll add it to the wiki page‚Äôs Table of Opinions. üôÇ 

[05:43:44.0435] <jschoi>
> <@tabatkins:matrix.org> Binary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.

 * Yeah, agreed, but I think that requiring separation between the topic and binary `*`/`**` might not be a big cost.

I suspect maybe >90% of uses of pipe will be with function calls or object/array/tuple/record literals `f() |> g(#[*], 0)`, and it may be worth optimizing readability for those cases, rather than for `f() |> * ** 2`. And even `f() |> * ** 2` isn‚Äôt that unreadable, I think.
‚Ä®It‚Äôs worth at least considering, since it probably is basically the only single-character token left.

[06:02:09.0639] <Ashley Claymore>
I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon

[06:02:16.0868] <Ashley Claymore>
 * I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon

[06:03:08.0868] <Ashley Claymore>
I guess `~(1)` is visually ambiguous

[06:03:54.0860] <Ashley Claymore>
 * I guess `~(1)` is visually ambiguous

[06:06:55.0554] <jschoi>
`~` is nice and we haven‚Äôt discussed it properly either. `f() |> g(#[~], 0) |> ~(~)`, hmm‚Ä¶

PFA syntax would use `~`. But `f() |> (~)~(0, ?)` would be quite rare!

[06:08:08.0750] <jschoi>
(I‚Äôve added a breakout session for topic tokens to the plenary although we might not have time.)

[06:08:53.0190] <Ashley Claymore>
To call it would have to do something like: `(~)(arg)`

[06:09:52.0354] <jschoi>
Oh yeah. Which might not be that bad‚Ä¶?

Which is worse:
`f() |> * ** 2`
`f() |> (~)(0)`

[06:10:51.0037] <jschoi>
* Oh yeah. Which might not be that bad‚Ä¶?
Which is worse (or at least which would be more common):‚Ä®`f() |> * ** 2`‚Ä®`f() |> (~)(2)`

[06:11:37.0160] <Ashley Claymore>
could be a hazard if someone writes `~(arg)` and expects a function call. If arg can be converted to a number it won‚Äôt throw either 

[06:12:11.0517] <Ashley Claymore>
but again, maybe that‚Äôs OK for the benefit of a single character token

[06:13:18.0337] <jschoi>
At least it will throw if it‚Äôs the only expected use of topic in the pipe body.‚Ä®`f() |> ~(2)` is a SyntaxError: ‚ÄúPipe body contains no topic.‚Äù

[06:13:57.0413] <jschoi>
> <@aclaymore:matrix.org> could be a hazard if someone writes `~(arg)` and expects a function call. If arg can be converted to a number it won‚Äôt throw either 

 * At least it will throw if it‚Äôs the only expected use of topic in the pipe body.‚Ä®`f() |> ~(2)` is a SyntaxError: ‚ÄúPipe body contains no topic.‚Äù

[06:16:05.0411] <jschoi>
 * At least it will throw if it‚Äôs the only expected use of topic in the pipe body.‚Ä®

`f() |> ~(2)` would be a SyntaxError: ‚ÄúPipe body contains no topic.‚Äù

(`f() |> #[~(2), ~ + 1]` would not be a SyntaxError, but is that situation going to be common? Hmm.)

[06:19:09.0123] <Ashley Claymore>
Ah yes. I had completely forgotten about "it will throw if it‚Äôs the only expected use of topic in the pipe body."

[06:52:55.0128] <TabAtkins>
`* * * ** *`

[06:54:45.0158] <jschoi>
That example makes my eyes feel like they‚Äôre bleeding, but at least that‚Äôs hardly ever going to happen. R-Right?

[06:55:14.0352] <TabAtkins>
I'm just saying, math is a lot more common than binary xor üòÖ

[06:56:30.0876] <jschoi>
Yeah, true. Though‚Ä¶I think was RBN or WH or someone who said that we can always come up with contrived examples, like `#[#[#[#[##, this.#blah, #{#[this.#a, this.#b, ##]}], ##]]]`.
The key is whether an example is going to be common enough to be a concern. 
Frequency √ó impact per occurrence = expected impact.

[06:56:58.0348] <jschoi>
It‚Äôs true that the frequency of binary `*` and `**` > the frequency of prefix `~`‚Ä¶

[06:57:47.0789] <jschoi>
‚Ä¶Will the frequency of calling-a-topic-as-a-function be comparable to the frequency of binary `*` and `**`? It is tough to say.

[07:47:18.0353] <TabAtkins>
Right, my big concern is that multiplication is pretty common (and I've wanted to use pipe in precisely a spot where I'd multiply the topic). Xoring the topic, or calling as a function, are both way less common, yeah. (And outside of lambda calculus, calling the topic as a function *and* using the topic as an argument would be incredibly rare, so avoiding the early error will be super uncommon.)

[07:47:50.0291] <TabAtkins>
I also don't feel good about the `yield*` case

[07:48:51.0429] <jschoi>
Sounds reasonable! I think I agree. I will add these opinions to the wiki table when I can.

[07:50:52.0447] <jschoi>
 * Sounds reasonable! I think I agree that topic `~` is probably better than topic `*`. I will add these opinions to the wiki table when I can.

[07:52:01.0016] <jschoi>
 * Sounds reasonable! I think I agree that topic `~` is probably better than topic `*`. (And it should still work with PFA syntax: `f() |> g~(~, 0)`.) I will add these opinions to the wiki table when I can.

[07:55:26.0838] <TabAtkins>
 * `\* \* \* \*\* \*\`

[07:55:40.0163] <TabAtkins>
 * `* * * ** *`

[14:17:06.0511] <rkirsling>
yeah, I think I'd feel less bad about `~`

[14:17:54.0454] <rkirsling>
to be clear, I'm not blocking wrt `^^`, it just makes me slightly sad (...which is ironic when viewed as kaomoji lol)

[14:24:50.0809] <rkirsling>
I say "slightly" because re-noticing in the wiki table that empirical rarity is _not_ the only justification for `^^` makes me feel less awful 

[14:30:11.0561] <jschoi>
I‚Äôm not sure why I thought `*` would be any different from `% ` and `^`, which Shu and others are against because they would require InputElementDiv/InputElementRegExp‚Äìstyle contextuality in the lexer. `*` is not different from `%` and `^`; it suffers from the same problem, and so `*` is out.
I don‚Äôt think `~` suffers from the same problem? I left a comment with some examples but I‚Äôm not 100% sure.

[14:30:53.0096] <jschoi>
* I‚Äôm not sure why I thought `*` would be any different from `% ` and `^`, which Shu and others are against because they would require InputElementDiv/InputElementRegExp‚Äìstyle contextuality in the lexer. `*` is not different from `%` and `^`; it suffers from the same problem, and so `*` is out.
I don‚Äôt think `~` suffers from the same problem? I left a comment with some examples but I‚Äôm not 100% sure.

[15:11:41.0024] <TabAtkins>
Apologies, I thought you'd already noticed that - I referenced the contextuality problem indirectly in my first response to `*`.


2022-07-13
[06:42:16.0663] <jschoi>
I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?
`^^`, `~~`, `%%`, `@@`, `##`.

[06:43:53.0420] <jschoi>
* I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?
`^^`, `~~`, `%%`, `@@`, `##`.

[07:13:27.0310] <rbuckton (PTO: 7/5 - 7/16)>
Isn't `~~(n) ` still valid JS? I don't think doubling is a solution. 

[09:04:52.0641] <jschoi>
You‚Äôre right; no doubled prefixes allowed.

[09:54:24.0847] <TabAtkins>
Yeah double binaries is good, double unaries isn't.

[10:41:18.0623] <rkirsling>
`#~` though? ;)

[11:26:29.0970] <rbuckton (PTO: 7/5 - 7/16)>
Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?

I was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.

[11:27:14.0559] <rbuckton (PTO: 7/5 - 7/16)>
 * Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?

I was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.

[11:28:13.0697] <rbuckton (PTO: 7/5 - 7/16)>
(especially since I already wrote one 7 years ago for TS decorators while exploring the feature, though I never published it)

[12:09:56.0333] <Ashley Claymore>
presumably 'banning' unary `~` in a pipe body is a very unpopular opinion

[12:10:26.0334] <Ashley Claymore>
 * presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)

[12:16:25.0516] <rkirsling>
what's interesting about unaries though is that they don't warrant a separate pipe

[12:16:51.0084] <rbuckton (PTO: 7/5 - 7/16)>
Yes. TS compiler wants to use pipes and we internally use bitmasks, so we would be strongly against banning `~` or `^` inside a pipe

[12:17:20.0837] <rkirsling>
i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`

[12:17:42.0634] <rkirsling>
 * i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`

[12:27:18.0282] <rbuckton (PTO: 7/5 - 7/16)>
Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:
```js
binarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~]; // greatest lower bound
binarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~ + 1]; // least upper bound
```
As you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).


[12:29:12.0832] <rbuckton (PTO: 7/5 - 7/16)>
I much prefer the readability of an identifier here:
```js
binarySearch(array, value) |> it >= 0 ? array[it] : array[~it]; // greatest lower bound
binarySearch(array, value) |> it >= 0 ? array[it] : array[~it + 1]; // least upper bound
```

[12:32:39.0928] <rbuckton (PTO: 7/5 - 7/16)>
Though we're much more likely to see the topic used with `~` in less ambiguous cases such as in the call to `setEmitFlags` below:
```js
return factory.createBinaryExpression(...)
  |> setOriginalNode(~, node)
  |> setSourceMapRange(~, { pos: ..., end: ... })
  |> setEmitFlags(~, getEmitFlags(node) & ~EmitFlags.NoComments);
```

[12:40:19.0606] <jschoi>
For what it‚Äôs worth, I am slowly coming around to using an identifier.
But I think that it really ought to be considered a contextual keyword like `await` and `yield`.
The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.

[12:40:28.0533] <jschoi>
 * For what it‚Äôs worth, I am slowly coming around to using an identifier.
But I think that it really ought to be considered a contextual keyword like `await` and `yield`.
The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.

[12:40:35.0518] <rbuckton (PTO: 7/5 - 7/16)>
 * Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:

```js
binarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~]); // greatest lower bound
binarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~ + 1]); // least upper bound
```

As you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).

[12:40:53.0206] <rbuckton (PTO: 7/5 - 7/16)>
 * I much prefer the readability of an identifier here:

```js
binarySearch(array, value) |> (it >= 0 ? array[it] : array[~it]); // greatest lower bound
binarySearch(array, value) |> (it >= 0 ? array[it] : array[~it + 1]); // least upper bound
```

[12:42:02.0015] <rbuckton (PTO: 7/5 - 7/16)>
If that's the case, I'd go for something like `$_` or `$$`. I've seen `__` used too often for unused parameters, i.e. `f((_, __, x) => { ... })`

[12:42:03.0802] <jschoi>
```js
binarySearch(array, value) |> ($$ >= 0 ? array[$$] : array[~$$ + 1]);
binarySearch(array, value) |> (__ >= 0 ? array[__] : array[~__ + 1]);
```

[12:42:13.0347] <jschoi>
Right, that makes sense.

[12:43:23.0725] <rbuckton (PTO: 7/5 - 7/16)>
I generally prefer `$_` over `$$` despite it being a bit tricker to type, since `_` often indicates a placeholder in multiple languages, and there's precedent in many shell scripts and some languages for `$_`.

[12:45:47.0348] <rbuckton (PTO: 7/5 - 7/16)>
Plus editors can easily offer a completion for `$_` on the right of a `|>`, so its more likely someone just does `$<tab>`

[12:51:01.0995] <rkirsling>
yeah I've expressed before that something with `_` would feel the most "obvious" to me

[12:51:04.0695] <jschoi>
I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.

[12:51:08.0172] <rkirsling>
 * yeah I've expressed before that something with `_` would feel the most "obvious" to me

[12:51:11.0009] <rbuckton (PTO: 7/5 - 7/16)>
If the completion case is strong enough, a longer keyword like `topic` is potentially just as viable since an editor could rank it higher in a completion list.

[12:51:11.0666] <jschoi>
 * I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.

[12:52:28.0711] <rbuckton (PTO: 7/5 - 7/16)>
`$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.

[12:53:44.0614] <rbuckton (PTO: 7/5 - 7/16)>
 * `$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.

[12:55:26.0692] <jschoi>
The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.

[12:55:33.0123] <jschoi>
 * The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.

[13:02:02.0475] <rbuckton (PTO: 7/5 - 7/16)>
A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.

A similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.

[13:02:52.0690] <rbuckton (PTO: 7/5 - 7/16)>
 * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.

~~A similar search for `language:js symbol:$_` has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...

[13:03:00.0169] <rbuckton (PTO: 7/5 - 7/16)>
 * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.

~A similar search for `language:js symbol:$_` has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...

[13:04:05.0556] <rbuckton (PTO: 7/5 - 7/16)>
GitHub is telling me results are not exhaustive, but still only provides me with 18 total matches.

[13:04:58.0019] <rbuckton (PTO: 7/5 - 7/16)>
 * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.

A similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.

[13:05:14.0273] <Justin Ridgewell>
Does `$_` get set while in the expression

[13:05:24.0921] <Justin Ridgewell>
I thought it was only done at statement positions

[13:06:59.0283] <rbuckton (PTO: 7/5 - 7/16)>
 * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.

A similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.

[13:07:38.0627] <rbuckton (PTO: 7/5 - 7/16)>
 * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.

A similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.

[13:07:56.0483] <jschoi>
Excellent data, thank you.

[13:08:07.0536] <jschoi>
 * Excellent data, thank you.

[13:08:51.0712] <jschoi>
I wonder how many people were using `yield` and `await` as variables before generators and async functions‚Ä¶not that it matters. New uses ought to be be zero now.

[13:08:58.0994] <rbuckton (PTO: 7/5 - 7/16)>
Yeah, that seems to be the case. There are only three exact matches for `$_` and they are either `var $_ = ` or `window.$_ = `, and the `window.$_ = ` case reports a deprecation warning.

[13:09:11.0123] <jschoi>
 * I wonder how many people were using `yield` and `await` as variables before generators and async functions‚Ä¶not that it matters. New uses ought to be be zero now.

[13:10:37.0443] <rbuckton (PTO: 7/5 - 7/16)>
`yield` was probably more common than `await`, since `yield` can also be used a noun in agriculture and finance

[13:11:19.0601] <rbuckton (PTO: 7/5 - 7/16)>
I don't know if there were any actual statistics collected for either case, however.

[13:13:00.0152] <jschoi>
 * I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, the fact that `$_` but not `$$` is valid syntax for variables in Bash/Perl/Ruby, so `$_`‚Äôs use is an incident of those languages‚Äô peculiarities. 
But this is a mild preference.

[13:13:04.0954] <rbuckton (PTO: 7/5 - 7/16)>
`yield` though ran into a case where Mozilla shipped generators unflagged prior to ES2015 without a `*` marker on the function, so that may have curtailed use somewhat.

[13:13:26.0194] <rbuckton (PTO: 7/5 - 7/16)>
(if memory serves correctly)

[13:17:00.0288] <jschoi>
The usage statistics are compelling that `$_` is better than `$$`. I have been convinced.

[13:17:00.0613] <rbuckton (PTO: 7/5 - 7/16)>
Disregard my earlier comment about counts. I refined my search to get around the "too exhaustive warning" and found more instances of `$_` than initially reported.

[13:17:08.0936] <jschoi>
Oh, okay, in that case, never mind. ü•≤

[13:17:25.0096] <jschoi>
 * Oh, okay, in that case, never mind. ü•≤

[13:17:59.0028] <rbuckton (PTO: 7/5 - 7/16)>
cs won't give me accurate counts however, though it seems most cases are either:
```js
var $_ = function ...;
const $_ = ...;
class $_ { ... }
function $_ {}
```

[13:18:35.0196] <rbuckton (PTO: 7/5 - 7/16)>
I'd have to find a different way to query to get more accurate counts from GitHub's corpus of OSS projects.

[13:19:02.0968] <jschoi>
I wonder why they use `$_`, hmm. I guess it‚Äôs still true that `$$` is still often¬†(?) used to mean `document.querySelectorAll`, probably as an adjunct to jQuery or whatever.

[13:19:32.0412] <jschoi>
I would support an identifier as the topic reference only if the idea is that we would be blessing a new (contextual) keyword, and that, , from now on, developers should never use the keyword as an ordinary variable. Just like `await` and `yield`. This is why I don‚Äôt think `it` is acceptable.


[13:20:23.0868] <jschoi>
When I see `await` and `yield`, I don‚Äôt have to think, ‚ÄúIs this a variable or a keyword?‚Äù¬†Because nobody uses them as ordinary variables. This is very much not the case for `it`.


[13:20:24.0326] <jschoi>
If we blessed, say, `$_` into the topic reference as a contextual keyword, then I would expect linters to ban `$_` as an ordinary variable‚Ä¶just like how (I think?) they do with `await` and `yield`.

[13:20:49.0726] <jschoi>
 * I would support an identifier as the topic reference only if the idea is that we would be blessing a new (contextual) keyword, and that, from now on, developers should never use the keyword as an ordinary variable. Just like `await` and `yield`. This is why I don‚Äôt think `it` is acceptable.

[13:21:08.0817] <jschoi>
 * If we blessed, say, `$_` into the topic reference as a contextual keyword, then I would expect linters to ban `$_` as an ordinary variable‚Ä¶just like how (I think?) they might do with `await` and `yield`.

[13:21:11.0655] <rbuckton (PTO: 7/5 - 7/16)>
I think there are others on the committee that may have a specific tool for querying such usage, but I do know know offhand what that is.

[13:21:13.0714] <jschoi>
 * If we blessed, say, `$_` into the topic reference as a contextual keyword, then I would expect linters to ban `$_` as an ordinary variable‚Ä¶just like how (I think?) they do with `await` and `yield`.

[13:21:26.0919] <jschoi>
Gzemnid?

[13:31:09.0849] <rbuckton (PTO: 7/5 - 7/16)>
If that's it, I'm not sure what versions of node it works with because it won't install on my machine using a recent version of node :/

[13:34:15.0109] <jschoi>
No need to install anything (maybe except `lz4`). You can download a dataset (last updated in 2019) from https://gzemnid.nodejs.org/datasets/out.2019-06-04/. Then use the `search.topcode.sh` script (download from the same directory).

[14:10:51.0600] <rbuckton (PTO: 7/5 - 7/16)>
```sh
$ ./scripts/search.topcode.sh '[ .(\n]\$\$[ .(\n]' | wc -l
27831
$ ./scripts/search.topcode.sh '[ .(\n]\$\_[ .(\n]' | wc -l
530
```

[14:10:57.0088] <rbuckton (PTO: 7/5 - 7/16)>
 * ```sh
$ ./scripts/search.topcode.sh '[ .(\n]\$\$[ .(\n]' | wc -l
27831
$ ./scripts/search.topcode.sh '[ .(\n]\$\_[ .(\n]' | wc -l
530
```

[14:11:21.0363] <rbuckton (PTO: 7/5 - 7/16)>
Very rough regexp to avoid $$ or $_ in the middle of an identifier.

[14:30:19.0879] <rbuckton (PTO: 7/5 - 7/16)>
still a number of false positives from comments like `// $_` though

[14:40:50.0883] <jschoi>
Nice. We used `| grep -E --invert-match '//.*whatever'` when we tried to analyze Gzemnid for `.bind` and `.call`.

[14:40:58.0078] <jschoi>
 * Nice. We used `grep -E --invert-match '//.*whatever'` when we tried to analyze Gzemnid for `.bind` and `.call`.

[14:41:33.0400] <jschoi>
 * Nice. We used `| grep -E --invert-match '//.*whatever'` when we tried to analyze Gzemnid for `.bind` and `.call`.

[15:13:44.0707] <rbuckton (PTO: 7/5 - 7/16)>
Quite a few false positives due to string literals and comments and this doesn't handle unicode identifiers, but here's an updated query:
```sh
$ ./scripts/search.topcode.sh '[^$_\\[:alnum:]](\$\$)[^$_[:alnum:]]' | wc -l
38639
$ ./scripts/search.topcode.sh '[^$_\\[:alnum:]](\$\_)[^$_[:alnum:]]' | wc -l
629
```

[15:14:25.0018] <rbuckton (PTO: 7/5 - 7/16)>
It's too bad `\P{ID_Continue}` doesn't work in `grep`

[15:39:32.0278] <Richard Gibson>
> <@jschoi:matrix.org> I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, the fact that `$_` but not `$$` is valid syntax for variables in Bash/Perl/Ruby, so `$_`‚Äôs use is an incident of those languages‚Äô peculiarities. 
> But this is a mild preference.

`$$` is also used in browser developer tools: https://developer.chrome.com/docs/devtools/console/utilities/#querySelectorAll-function


2022-07-14
[17:01:13.0401] <Richard Gibson>
> <@rbuckton:matrix.org> It's too bad `\P{ID_Continue}` doesn't work in `grep`

would you settle for GNU awk supporting `/[0-9A-Z_a-z¬™¬µ¬∑¬∫√Ä-√ñ√ò-√∂ √∏-ÀÅÀÜ-ÀëÀ†-À§À¨ÀÆÃÄ-Õ¥Õ∂Õ∑Õ∫-ÕΩÕøŒÜ-Œä ŒåŒé-Œ°Œ£-œµœ∑-“Å“É-“á“ä-‘Ø‘±-’ñ’ô’†-÷à÷ë-÷Ω÷ø◊Å◊Ç◊Ñ◊Ö◊á ◊ê-◊™◊Ø-◊≤ÿê-ÿöÿ†-Ÿ©ŸÆ-€ì€ï-€ú€ü-€®€™-€º €ø‹ê-›ä›ç-ﬁ±ﬂÄ-ﬂµﬂ∫ﬂΩ‡†Ä-‡†≠‡°Ä-‡°õ‡°†-‡°™ ‡°∞-‡¢á‡¢â-‡¢é‡¢ò-‡£°‡££-‡•£‡•¶-‡•Ø‡•±-‡¶É‡¶Ö-‡¶å ‡¶è‡¶ê‡¶ì-‡¶®‡¶™-‡¶∞‡¶≤‡¶∂-‡¶π‡¶º-‡ßÑ‡ßá‡ßà‡ßã-‡ßé‡ßó ‡ßú‡ßù‡ßü-‡ß£‡ß¶-‡ß±‡ßº‡ßæ‡®Å-‡®É‡®Ö-‡®ä‡®è‡®ê‡®ì-‡®® ‡®™-‡®∞‡®≤‡®≥‡®µ‡®∂‡®∏‡®π‡®º‡®æ-‡©Ç‡©á‡©à‡©ã-‡©ç‡©ë‡©ô-‡©ú ‡©û‡©¶-‡©µ‡™Å-‡™É‡™Ö-‡™ç‡™è-‡™ë‡™ì-‡™®‡™™-‡™∞‡™≤‡™≥ ‡™µ-‡™π‡™º-‡´Ö‡´á-‡´â‡´ã-‡´ç‡´ê‡´†-‡´£‡´¶-‡´Ø‡´π-‡´ø‡¨Å-‡¨É ‡¨Ö-‡¨å‡¨è‡¨ê‡¨ì-‡¨®‡¨™-‡¨∞‡¨≤‡¨≥‡¨µ-‡¨π‡¨º-‡≠Ñ‡≠á‡≠à‡≠ã-‡≠ç‡≠ï-‡≠ó ‡≠ú‡≠ù‡≠ü-‡≠£‡≠¶-‡≠Ø‡≠±‡ÆÇ‡ÆÉ‡ÆÖ-‡Æä‡Æé-‡Æê‡Æí-‡Æï‡Æô ‡Æö‡Æú‡Æû‡Æü‡Æ£‡Æ§‡Æ®-‡Æ™‡ÆÆ-‡Æπ‡Ææ-‡ØÇ‡ØÜ-‡Øà‡Øä-‡Øç ‡Øê‡Øó‡Ø¶-‡ØØ‡∞Ä-‡∞å‡∞é-‡∞ê‡∞í-‡∞®‡∞™-‡∞π‡∞º-‡±Ñ‡±Ü-‡±à‡±ä-‡±ç‡±ï‡±ñ ‡±ò-‡±ö‡±ù‡±†-‡±£‡±¶-‡±Ø‡≤Ä-‡≤É‡≤Ö-‡≤å‡≤é-‡≤ê‡≤í-‡≤® ‡≤™-‡≤≥‡≤µ-‡≤π‡≤º-‡≥Ñ‡≥Ü-‡≥à‡≥ä-‡≥ç‡≥ï‡≥ñ‡≥ù‡≥û‡≥†-‡≥£ ‡≥¶-‡≥Ø‡≥±‡≥≤‡¥Ä-‡¥å‡¥é-‡¥ê‡¥í-‡µÑ‡µÜ-‡µà‡µä-‡µé‡µî-‡µó ‡µü-‡µ£‡µ¶-‡µØ‡µ∫-‡µø‡∂Å-‡∂É‡∂Ö-‡∂ñ‡∂ö-‡∂±‡∂≥-‡∂ª ‡∂Ω‡∑Ä-‡∑Ü‡∑ä‡∑è-‡∑î‡∑ñ‡∑ò-‡∑ü‡∑¶-‡∑Ø‡∑≤‡∑≥‡∏Å-‡∏∫‡πÄ-‡πé ‡πê-‡πô‡∫Å‡∫Ç‡∫Ñ‡∫Ü-‡∫ä‡∫å-‡∫£‡∫•‡∫ß-‡∫Ω‡ªÄ-‡ªÑ‡ªÜ‡ªà-‡ªç ‡ªê-‡ªô‡ªú-‡ªü‡ºÄ‡ºò‡ºô‡º†-‡º©‡ºµ‡º∑‡ºπ‡ºæ-‡Ωá‡Ωâ-‡Ω¨‡Ω±-‡æÑ‡æÜ-‡æó‡æô-‡æº‡øÜ ·ÄÄ-·Åâ·Åê-·Çù·Ç†-·ÉÖ·Éá·Éç·Éê-·É∫·Éº-·âà·âä-·âç·âê-·âñ ·âò·âö-·âù·â†-·äà·ää-·äç·äê-·ä∞·ä≤-·äµ·ä∏-·äæ·ãÄ·ãÇ-·ãÖ ·ãà-·ãñ·ãò-·åê·åí-·åï·åò-·çö·çù-·çü·ç©-·ç±·éÄ-·éè ·é†-·èµ·è∏-·èΩ·êÅ-·ô¨·ôØ-·ôø·öÅ-·öö·ö†-·õ™·õÆ-·õ∏ ·úÄ-·úï·úü-·ú¥·ùÄ-·ùì·ù†-·ù¨·ùÆ-·ù∞·ù≤·ù≥·ûÄ-·üì·üó ·üú·üù·ü†-·ü©·†ê-·†ô·††-·°∏·¢Ä-·¢™·¢∞-·£µ·§Ä-·§û·§†-·§´·§∞-·§ª ·•Ü-·•≠·•∞-·•¥·¶Ä-·¶´·¶∞-·ßâ·ßê-·ßö·®Ä-·®õ·®†-·©û·©†-·©º·©ø-·™â ·™ê-·™ô·™ß·™∞-·™Ω·™ø-·´é·¨Ä-·≠å·≠ê-·≠ô·≠´-·≠≥·ÆÄ-·Ø≥ ·∞Ä-·∞∑·±Ä-·±â·±ç-·±Ω·≤Ä-·≤à·≤ê-·≤∫·≤Ω-·≤ø·≥ê-·≥í·≥î-·≥∫ ·¥Ä-·ºï·ºò-·ºù·º†-·ΩÖ·Ωà-·Ωç·Ωê-·Ωó·Ωô·Ωõ·Ωù·Ωü-·ΩΩ ·æÄ-·æ¥·æ∂-·æº·ææ·øÇ-·øÑ·øÜ-·øå·øê-·øì·øñ-·øõ·ø†-·ø¨ ·ø≤-·ø¥·ø∂-·øº‚Äø‚ÅÄ‚Åî‚Å±‚Åø‚Çê-‚Çú‚Éê-‚Éú‚É°‚É•-‚É∞ ‚ÑÇ‚Ñá‚Ñä-‚Ñì‚Ñï‚Ñò-‚Ñù‚Ñ§‚Ñ¶‚Ñ®‚Ñ™-‚Ñπ‚Ñº-‚Ñø‚ÖÖ-‚Öâ ‚Öé‚Ö†-‚Üà‚∞Ä-‚≥§‚≥´-‚≥≥‚¥Ä-‚¥•‚¥ß‚¥≠‚¥∞-‚µß‚µØ‚µø-‚∂ñ ‚∂†-‚∂¶‚∂®-‚∂Æ‚∂∞-‚∂∂‚∂∏-‚∂æ‚∑Ä-‚∑Ü‚∑à-‚∑é‚∑ê-‚∑ñ ‚∑ò-‚∑û‚∑†-‚∑ø„ÄÖ-„Äá„Ä°-„ÄØ„Ä±-„Äµ„Ä∏-„Äº„ÅÅ-„Çñ„Çô-„Çü „Ç°-„É∫„Éº-„Éø„ÑÖ-„ÑØ„Ñ±-„Üé„Ü†-„Üø„á∞-„áø„êÄ-‰∂ø ‰∏Ä-ÍíåÍìê-ÍìΩÍîÄ-ÍòåÍòê-Íò´ÍôÄ-ÍôØÍô¥-ÍôΩÍôø-Íõ± Íúó-ÍúüÍú¢-ÍûàÍûã-ÍüäÍüêÍüëÍüìÍüï-ÍüôÍü≤-Í†ßÍ†¨Í°Ä-Í°≥Í¢Ä-Í£Ö Í£ê-Í£ôÍ£†-Í£∑Í£ªÍ£Ω-Í§≠Í§∞-Í•ìÍ•†-Í•ºÍ¶Ä-ÍßÄÍßè-Íßô Íß†-ÍßæÍ®Ä-Í®∂Í©Ä-Í©çÍ©ê-Í©ôÍ©†-Í©∂Í©∫-Í´ÇÍ´õ-Í´ù Í´†-Í´ØÍ´≤-Í´∂Í¨Å-Í¨ÜÍ¨â-Í¨éÍ¨ë-Í¨ñÍ¨†-Í¨¶Í¨®-Í¨Æ Í¨∞-Í≠öÍ≠ú-Í≠©Í≠∞-ÍØ™ÍØ¨ÍØ≠ÍØ∞-ÍØπÍ∞Ä-Ìû£Ìû∞-ÌüÜÌüã-Ìüª Ô§Ä-Ô©≠Ô©∞-Ô´ôÔ¨Ä-Ô¨ÜÔ¨ì-Ô¨óÔ¨ù-Ô¨®Ô¨™-Ô¨∂Ô¨∏-Ô¨º Ô¨æÔ≠ÄÔ≠ÅÔ≠ÉÔ≠ÑÔ≠Ü-ÔÆ±ÔØì-Ô¥ΩÔµê-Ô∂èÔ∂í-Ô∑áÔ∑∞-Ô∑ªÔ∏†-Ô∏Ø Ô∏≥Ô∏¥Ôπç-ÔπèÔπ∞-Ôπ¥Ôπ∂-ÔªºÔºê-ÔºôÔº°-Ôº∫ÔºøÔΩÅ-ÔΩö ÔΩ¶-ÔææÔøÇ-ÔøáÔøä-ÔøèÔøí-ÔøóÔøö-ÔøúêÄÄ-êÄãêÄç-êÄ¶ êÄ®-êÄ∫êÄºêÄΩêÄø-êÅçêÅê-êÅùêÇÄ-êÉ∫êÖÄ-êÖ¥êáΩêäÄ-êäú êä†-êãêêã†êåÄ-êåüêå≠-êçäêçê-êç∫êéÄ-êéùêé†-êèÉêèà-êèè êèë-êèïêêÄ-êíùêí†-êí©êí∞-êììêìò-êìªêîÄ-êîßêî∞-êï£ êï∞-êï∫êïº-êñäêñå-êñíêñîêñïêñó-êñ°êñ£-êñ±êñ≥-êñπêñª êñºêòÄ-êú∂êùÄ-êùïêù†-êùßêûÄ-êûÖêûá-êû∞êû≤-êû∫ê†Ä-ê†Ö ê†àê†ä-ê†µê†∑ê†∏ê†ºê†ø-ê°ïê°†-ê°∂ê¢Ä-ê¢ûê£†-ê£≤ê£¥ê£µ ê§Ä-ê§ïê§†-ê§πê¶Ä-ê¶∑ê¶æê¶øê®Ä-ê®Éê®Öê®Üê®å-ê®ìê®ï-ê®ó ê®ô-ê®µê®∏-ê®∫ê®øê©†-ê©ºê™Ä-ê™úê´Ä-ê´áê´â-ê´¶ê¨Ä-ê¨µ ê≠Ä-ê≠ïê≠†-ê≠≤êÆÄ-êÆëê∞Ä-ê±àê≤Ä-ê≤≤ê≥Ä-ê≥≤ê¥Ä-ê¥ß ê¥∞-ê¥πê∫Ä-ê∫©ê∫´ê∫¨ê∫∞ê∫±êºÄ-êºúêºßêº∞-êΩêêΩ∞-êæÖêæ∞-êøÑ êø†-êø∂ëÄÄ-ëÅÜëÅ¶-ëÅµëÅø-ëÇ∫ëÉÇëÉê-ëÉ®ëÉ∞-ëÉπëÑÄ-ëÑ¥ ëÑ∂-ëÑøëÖÑ-ëÖáëÖê-ëÖ≥ëÖ∂ëÜÄ-ëáÑëáâ-ëáåëáé-ëáöëáúëàÄ-ëàë ëàì-ëà∑ëàæëäÄ-ëäÜëäàëää-ëäçëäè-ëäùëäü-ëä®ëä∞-ëã™ëã∞-ëãπëåÄ-ëåÉ ëåÖ-ëååëåèëåêëåì-ëå®ëå™-ëå∞ëå≤ëå≥ëåµ-ëåπëåª-ëçÑëçáëçàëçã-ëçç ëçêëçóëçù-ëç£ëç¶-ëç¨ëç∞-ëç¥ëêÄ-ëëäëëê-ëëôëëû-ëë°ëíÄ-ëìÖ ëìáëìê-ëìôëñÄ-ëñµëñ∏-ëóÄëóò-ëóùëòÄ-ëôÄëôÑëôê-ëôôëöÄ-ëö∏ ëõÄ-ëõâëúÄ-ëúöëúù-ëú´ëú∞-ëúπëùÄ-ëùÜë†Ä-ë†∫ë¢†-ë£© ë£ø-ë§Üë§âë§å-ë§ìë§ïë§ñë§ò-ë§µë§∑ë§∏ë§ª-ë•Éë•ê-ë•ôë¶†-ë¶ß ë¶™-ëßóëßö-ëß°ëß£ëß§ë®Ä-ë®æë©áë©ê-ë™ôë™ùë™∞-ë´∏ë∞Ä-ë∞à ë∞ä-ë∞∂ë∞∏-ë±Äë±ê-ë±ôë±≤-ë≤èë≤í-ë≤ßë≤©-ë≤∂ë¥Ä-ë¥Ü ë¥àë¥âë¥ã-ë¥∂ë¥∫ë¥ºë¥Ωë¥ø-ëµáëµê-ëµôëµ†-ëµ•ëµßëµ®ëµ™-ë∂éë∂êë∂ëë∂ì-ë∂ò ë∂†-ë∂©ëª†-ëª∂ëæ∞íÄÄ-íéôíêÄ-íëÆííÄ-íïÉíæê-íø∞ìÄÄ-ìêÆ îêÄ-îôÜñ†Ä-ñ®∏ñ©Ä-ñ©ûñ©†-ñ©©ñ©∞-ñ™æñ´Ä-ñ´âñ´ê-ñ´≠ñ´∞-ñ´¥ ñ¨Ä-ñ¨∂ñ≠Ä-ñ≠Éñ≠ê-ñ≠ôñ≠£-ñ≠∑ñ≠Ω-ñÆèñπÄ-ñπøñºÄ-ñΩäñΩè-ñæáñæè-ñæü ñø†ñø°ñø£ñø§ñø∞ñø±óÄÄ-òü∑ò†Ä-ò≥ïò¥Ä-ò¥àöø∞-öø≥öøµ-öøª öøΩöøæõÄÄ-õÑ¢õÖê-õÖíõÖ§-õÖßõÖ∞-õãªõ∞Ä-õ±™õ±∞-õ±ºõ≤Ä-õ≤à õ≤ê-õ≤ôõ≤ùõ≤ûúºÄ-úº≠úº∞-úΩÜùÖ•-ùÖ©ùÖ≠-ùÖ≤ùÖª-ùÜÇùÜÖ-ùÜãùÜ™-ùÜ≠ùâÇ-ùâÑ ùêÄ-ùëîùëñ-ùíúùíûùíüùí¢ùí•ùí¶ùí©-ùí¨ùíÆ-ùíπùíªùíΩ-ùìÉ ùìÖ-ùîÖùîá-ùîäùîç-ùîîùîñ-ùîúùîû-ùîπùîª-ùîæùïÄ-ùïÑ ùïÜùïä-ùïêùïí-ùö•ùö®-ùõÄùõÇ-ùõöùõú-ùõ∫ùõº-ùúîùúñ-ùú¥ ùú∂-ùùéùùê-ùùÆùù∞-ùûàùûä-ùû®ùû™-ùüÇùüÑ-ùüãùüé-ùüøù®Ä-ù®∂ù®ª-ù©¨ù©µù™Ñù™õ-ù™üù™°-ù™Ø ùºÄ-ùºûûÄÄ-ûÄÜûÄà-ûÄòûÄõ-ûÄ°ûÄ£ûÄ§ûÄ¶-ûÄ™ûÑÄ-ûÑ¨ûÑ∞-ûÑΩ ûÖÄ-ûÖâûÖéûäê-ûäÆûãÄ-ûãπûü†-ûü¶ûü®-ûü´ûü≠ûüÆûü∞-ûüæ û†Ä-û£Ñû£ê-û£ñû§Ä-û•ãû•ê-û•ôû∏Ä-û∏Éû∏Ö-û∏üû∏°û∏¢û∏§ û∏ßû∏©-û∏≤û∏¥-û∏∑û∏πû∏ªûπÇûπáûπâûπãûπç-ûπèûπëûπíûπîûπóûπô ûπõûπùûπüûπ°ûπ¢ûπ§ûπß-ûπ™ûπ¨-ûπ≤ûπ¥-ûπ∑ûππ-ûπºûπæû∫Ä-û∫â û∫ã-û∫õû∫°-û∫£û∫•-û∫©û∫´-û∫ªüØ∞-üØπ†ÄÄ-™õü™úÄ-´ú∏ ´ùÄ-´†ù´††-¨∫°¨∫∞-ÆØ†Ø†Ä-Ø®ù∞ÄÄ-±çä]/`?

(pattern extracted from https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5B%5B%3AID_Continue%3A%5D%26%5B%3AVariation_Selector%3DNo%3A%5D%5D&g=&i= , which is technically incorrect because it excludes variation selectors but is otherwise good)

[17:18:15.0705] <shu>
what sorcery is this


2022-07-15
[05:25:29.0557] <jschoi>
https://github.com/tc39/proposal-pipeline-operator/issues/217#issuecomment-1184910976‚Ä®
> Edit: After it was clarified a more independent route of addressing my concerns can be feasible in the future, contrary to what I interpreted from strong stances expressed to me recently, I will bow out of these discussions indefinitely accordingly. My feedback regarding hack-style pipes impact on the functional-programming ecosystem can always be revisited whenever it next makes sense.
***

I wonder to what this is referring; it was a pretty sudden change.

[05:27:11.0929] <jschoi>
 The closest thing I can think of is my mentioning in https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1184950270 of the (small) possibility that Function.pipe and/or flow may be standardized, and that developers may use pipe/flow widely enough to warrant considering split-mix syntax again: `x |>> f |>> g |>> h |> [^^]`.

[05:27:35.0342] <jschoi>
* https://github.com/tc39/proposal-pipeline-operator/issues/217#issuecomment-1184910976
Edit: After it was clarified a more independent route of addressing my concerns can be feasible in the future, contrary to what I interpreted from strong stances expressed to me recently, I will bow out of these discussions indefinitely accordingly. My feedback regarding hack-style pipes impact on the functional-programming ecosystem can always be revisited whenever it next makes sense.
I wonder to what this is referring; it was a pretty sudden change.

[05:27:53.0154] <jschoi>
* https://github.com/tc39/proposal-pipeline-operator/issues/217#issuecomment-1184910976‚Ä®
> Edit: After it was clarified a more independent route of addressing my concerns can be feasible in the future, contrary to what I interpreted from strong stances expressed to me recently, I will bow out of these discussions indefinitely accordingly. My feedback regarding hack-style pipes impact on the functional-programming ecosystem can always be revisited whenever it next makes sense.‚Ä®
I wonder to what this is referring; it was a pretty sudden change.

[05:28:06.0667] <jschoi>
* https://github.com/tc39/proposal-pipeline-operator/issues/217#issuecomment-1184910976‚Ä®
> Edit: After it was clarified a more independent route of addressing my concerns can be feasible in the future, contrary to what I interpreted from strong stances expressed to me recently, I will bow out of these discussions indefinitely accordingly. My feedback regarding hack-style pipes impact on the functional-programming ecosystem can always be revisited whenever it next makes sense.
***

I wonder to what this is referring; it was a pretty sudden change.

[09:23:50.0176] <TabAtkins>
Me and Shu talked with them privately

[10:59:42.0005] <ljharb>
any chance long essay-like comments were discouraged in these conversations?

[11:09:22.0996] <TabAtkins>
Very explicitly by me, yes.

[11:09:39.0247] <TabAtkins>
Like, ended the conversation with "don't do this"

