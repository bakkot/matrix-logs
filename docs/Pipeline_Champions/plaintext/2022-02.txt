2022-02-04
[11:35:35.0120] <TabAtkins>
It feels like it would be appropriate to do a presentation at the March meeting to get the committee's temperature again, and finally resolve the topic token issue, in anticipation of asking for Stage 3 at probably the following meeting after that. Does this sound good to everyone, or do we still have concerns?

[14:21:15.0452] <Justin Ridgewell>
Were the adhoc meeting notes published?

[14:34:13.0943] <pokute>
> <@jridgewell:matrix.org> Were the adhoc meeting notes published?

I recall that they were planned to be released when the plenary meeting notes are published.


2022-02-05
[16:52:20.0446] <jschoi>
> <@jridgewell:matrix.org> Were the adhoc meeting notes published?

I have not published them yet. I was planning to do them soon, before plenary, but I wasn’t sure whether someone else wanted to wait until plenary notes got published.


2022-02-07
[09:15:47.0315] <jschoi>
https://github.com/tc39/incubator-agendas/pull/23


2022-02-09
[06:38:33.0389] <jschoi>
A Babel contributor has opened a pull request for adding an optional pipe operator spelled as `?>` to Babel. https://github.com/babel/babel/pull/14255 

[06:50:48.0065] <Ashley Claymore>
only a little shame we can't do this:`if (val ?> true) { ... `,  need to `if (val != null)` but some projects force always strict equality checks so then have to do `if ((val ?? null) !== null)`


2022-02-10
[03:09:07.0236] <nicolo-ribaudo>
> <@jschoi:matrix.org> A Babel contributor has opened a pull request for adding an optional pipe operator spelled as `?>` to Babel. https://github.com/babel/babel/pull/14255 

Note that we won't accept it until it's at least stage 1

[10:50:32.0082] <TabAtkins>
I'm on record as thinking an optional pipe would be worthwhile; pipe fills the same syntax role as method chaining and `.?()` is useful.

[10:53:57.0413] <TabAtkins>
(But I'm more than happy to keep it on the back burner as a follow-on proposal.)


2022-02-11
[07:54:38.0870] <jschoi>
ljharb: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, `source |> a + (# |> b + #)` is valid. It is the same as `source |> a + (b + #)` and `a + (b + source)`.

However, `source |> (a + # |> b) + #` is invalid, because `|> b` does not contain any topic reference.

[07:55:18.0880] <jschoi>
Also, `source |> a => # + a |> output(#)` is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.

[08:02:26.0654] <ljharb>
Thanks, the rules are straightforward but that doesn’t mean contrived examples are intuitive :-)

[10:46:06.0983] <jschoi>
We have banned `a |> # ? c : d` and require parentheses: `(a |> #) ? c : d` or `a |> (# ? c : d)`.

I think we should also ban `a ? b : c |> #` and require parentheses: `(a ? b : c) |> #` or `a ? b : (c |> #)`. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.

