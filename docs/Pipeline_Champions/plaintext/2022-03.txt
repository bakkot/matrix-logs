2022-03-16
[09:53:50.0931] <jschoi>
At the next plenary, I am planning to present the results of the dataflow ad-hoc meeting (as well as the results of the recent function-helpers incubator meeting), with an eye towards future advancement of the pipe operator and a bind/call-this operator. Hopefully that sounds good to everyone. 

[09:54:17.0603] <jschoi>
I also plan to ask for time to bikeshed both the topic reference and the syntax of bind/call-this. 

[09:55:00.0726] <jschoi>
I‚Äôll try to have slides for these by March 18. 

[10:25:11.0635] <TabAtkins>
Yes, that matches what I was expecting. So just to be clear - we're asking the committee to help decide the topic reference this meeting, but *not* asking for Stage 2 yet, right? That'll be next meeting, assuming the bikeshedding concludes satisfactorily?

[10:50:30.0940] <jschoi>
> <@tabatkins:matrix.org> Yes, that matches what I was expecting. So just to be clear - we're asking the committee to help decide the topic reference this meeting, but *not* asking for Stage 2 yet, right? That'll be next meeting, assuming the bikeshedding concludes satisfactorily?

Yeah, just updates, no advancement. 

[10:52:42.0113] <jschoi>
There are cross-cutting concerns between the pipe operator and bind/call-this for Jordan, so I want to try to have them not stay too far apart in process. 

[10:52:57.0047] <jschoi>
Also, Tab, did you mean Stage 3 for pipe in the following plenary?

[10:53:02.0908] <TabAtkins>
yes

[10:53:07.0893] <TabAtkins>
the next stage

[10:53:14.0624] <TabAtkins>
whichever


2022-03-18
[19:28:46.0697] <jschoi>
FYI: https://github.com/tc39/agendas/pull/1133



[19:29:24.0723] <jschoi>
(Please update https://github.com/tc39/agendas/blob/main/2022/03.md#schedule-constraints if you have schedule constraints and don‚Äôt want to miss the topic-reference bikeshedding, the bind-this syntax bikeshedding, or the holistic dataflow redux. ljharb, you have some constraints, so you might want to do so.)

[19:49:26.0108] <ljharb>
thanks, will do

[19:49:44.0712] <ljharb>
I‚Äôll land your PR shortly also

[20:35:17.0239] <jschoi>
Just also made a community update: https://github.com/tc39/proposal-pipeline-operator/issues/232#issuecomment-1071995811

[10:30:18.0562] <jschoi>
I‚Äôve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.

Requiring separation between topic and property access isn‚Äôt too bad: `x |> (#)[0]`‚Ä¶since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it‚Äôs not really a ‚Äúspecial case‚Äù‚Ä¶or at least it‚Äôs as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.

Our candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.

[10:30:32.0315] <jschoi>
> <@ljharb:matrix.org> jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)

 * I‚Äôve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.

Requiring separation between topic and property access isn‚Äôt too bad: `x |> (#)[0]`‚Ä¶since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it‚Äôs not really a ‚Äúspecial case‚Äù‚Ä¶or at least it‚Äôs as much as a special case as requiring separation between `(^^)^ y` or `(%%)% y`.

Our candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.

[10:30:41.0511] <jschoi>
 * I‚Äôve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.

Requiring separation between topic and property access isn‚Äôt too bad: `x |> (#)[0]`‚Ä¶since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it‚Äôs not really a ‚Äúspecial case‚Äù‚Ä¶or at least it‚Äôs as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.

Our candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.

[10:30:55.0250] <ljharb>
in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?

[10:30:58.0834] <jschoi>
Yes.

[10:31:04.0797] <ljharb>
 * in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?

[10:31:18.0549] <ljharb>
so it's only non-optional bracketed access that would need parens

[10:31:19.0832] <jschoi>
Leaving the `#[` token to be reserved for tuple literals.

[10:31:21.0251] <jschoi>
Yes.

[10:31:24.0042] <ljharb>
 * so it's only non-optional bracketed access that would need parens

[10:31:28.0519] <jschoi>
 * Leaving the `#[` token to be reserved for tuple literals.

[10:31:34.0422] <ljharb>
while in practice that's probably fine, that is an odd inconsistency

[10:32:32.0225] <ljharb>
i assume in Records, `#\n{` wouldn't be allowed

[10:32:46.0728] <jschoi>
Yes, I believe they are making `#[` and `#{` their own lexical tokens.

[10:33:31.0985] <jschoi>
https://tc39.es/proposal-record-tuple/#sec-punctuators

[10:35:40.0336] <jschoi>
Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but‚Ä¶
The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).

[10:39:35.0272] <jschoi>
 * Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but‚Ä¶
The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).

[10:44:39.0194] <TabAtkins>
Oh no, `#[0]` being a tuple *by default* is absolutely awful. Property access is going to remain *far* more common than tuple literals, forever.

[10:45:00.0880] <TabAtkins>
So long as tuples stick with `#[]` a single `#` for topic is verboten, imo.

[10:45:36.0890] <TabAtkins>
`(#)[0]` is, by itself, a substantially worse outcome than `##` everywhere for all other uses.

[10:45:56.0142] <TabAtkins>
(God, just *typing* it is awful - the hash and the parens are on different hands and all Shifted.)

[10:51:31.0434] <jschoi>
> <@tabatkins:matrix.org> `(#)[0]` is, by itself, a substantially worse outcome than `##` everywhere for all other uses.

Well, if we must have a two-character token (tuples are likely to go with `#[]` in the end), then I would rather have `^^` or `%%` than `##`‚Ä¶because, although topic references (and property access on them) may become more frequent than tuple literals‚Ä¶I expect tuple literals to be far more common than bitwise xor or remainder. 

[10:52:22.0679] <TabAtkins>
All of these are fine with me; my weak aesthetic preference is still for `##` but I'm happy to stick with whatever the committee decides on.

[10:53:53.0965] <jschoi>
I suppose that saying ‚Äúwe can‚Äôt fully disqualify `#` until the tuple champions commit to `#[]` syntax‚Äù is tantamount to saying ‚Äúwe cannot advance pipe operator until tuples advance too‚Äù. Which would probably be Bad.

[10:57:10.0261] <jschoi>
(It‚Äôs still a shame that we can‚Äôt have a single-character topic though. ü•≤)

[10:58:30.0840] <rbuckton>
> <@jschoi:matrix.org> (It‚Äôs still a shame that we can‚Äôt have a single-character topic though. ü•≤)

It's a shame we can't have an Identifier topic, imo. Double character isn't so bad, at least. 

[11:29:59.0050] <jschoi>
https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit?usp=sharing

[11:33:42.0304] <TabAtkins>
Slide 2's find() looks weird - it'd take an arrow function, surely, rather than constructing a comparison out of three strings?

[11:34:07.0233] <TabAtkins>
In all the examples those three args move as a unit anyway, so having them separate doesn't seem to be valuable for what you're showing off.

[11:35:36.0833] <TabAtkins>
otherwise +1

[11:36:48.0614] <jschoi>
> <@tabatkins:matrix.org> Slide 2's find() looks weird - it'd take an arrow function, surely, rather than constructing a comparison out of three strings?

Yeah, I took this code from this Firebase video about its new modular API (https://www.youtube.com/watch?v=r5eJQ3nPc6A).
I‚Äôll revisit the example and see if I can make it more compelling. Let me know if you have any ideas.

[11:37:26.0769] <jschoi>
I do think that arguments are an important part of reading order, and the fact that nested function calls require zigzagging of arguments is an important disadvantage of nested function calls.

[11:37:31.0750] <jschoi>
 * I do think that arguments are an important part of reading order, and the fact that nested function calls require zigzagging of arguments is an important disadvantage of nested function calls.

[11:37:51.0972] <TabAtkins>
The code is reasonable otherwise, that's just a *really weird* set of arguments for a find() function.

[11:38:23.0044] <TabAtkins>
Just swapping that trio out for `x=>x.name == "fruit"` woudl work

[11:38:48.0236] <jschoi>
Yeah, good idea. I think I‚Äôll replace it with `.find(pred)`.

[11:38:58.0742] <TabAtkins>
Sure, that works.

[11:43:00.0232] <jschoi>
And done. Thanks for the suggestion.

[11:43:04.0732] <jschoi>
 * And done. Thanks for suggestion.

[11:43:06.0884] <jschoi>
 * And done. Thanks for the suggestion.

[11:52:11.0288] <TabAtkins>
Yeah, the 4-2-1-0-3-5 order really works now

[15:27:52.0024] <jschoi>
ljharb: I‚Äôm making slides for the bind/call-this operator plenary bikeshedding.

I wanted to confirm your opinion‚Äîthough you would block the pipe operator if bind/call-this did not advance, would you still block the pipe operator if Function.unThis advanced instead?

[15:27:54.0746] <jschoi>


I ask because Mark Miller had stated in the previous plenary that he is currently against any dataflow syntax proposal other than pipe operator to advance, but he is fine with functions (https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-26.md#holistic-discussion-of-tc39-dataflow-proposals). So I am wondering what would happen if he stated that he would block any bind/call-this syntax‚Ä¶I would then pursue Function.unThis instead. Would this be acceptable to you as a substitute for a bind-this operator?

[15:32:14.0525] <jschoi>
https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit?usp=sharing

[15:44:32.0276] <ljharb>
> <@jschoi:matrix.org> ljharb: I‚Äôm making slides for the bind/call-this operator plenary bikeshedding.
> 
> I wanted to confirm your opinion‚Äîthough you would block the pipe operator if bind/call-this did not advance, would you still block the pipe operator if Function.unThis advanced instead?

yes, i want a syntactic mechanism that restores receiver-first ordering. Function.callBind is just sugar for `Function.call.bind`, it doesn't really add much otherwise

