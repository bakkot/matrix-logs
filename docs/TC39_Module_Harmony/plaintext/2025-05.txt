2025-05-01
[05:58:23.0650] <jakobjingleheimer>
I'll use the time to review your node PR

[08:05:05.0319] <guybedford>
Thanks that would be great!

[08:20:54.0165] <nicolo-ribaudo>
https://github.com/tc39/ecma262/issues/3582 I think I found a bug with module evaluation, but I think it's a regression

[08:22:04.0529] <nicolo-ribaudo>
* https://github.com/tc39/ecma262/issues/3582 I think I found a bug with module evaluation

[09:48:28.0215] <guybedford>
good catch, it seems like we either need to clarify that it can be unset for errored modules, or to set it to some arbitrary value in this case

[09:55:35.0698] <guybedford>
another approach might be to move the CycleRoot set into the linking algorithm, but this would imply creating a proper equivalence between DFS for link and DFS for evaluate which doesn't currently exist

[09:56:50.0390] <guybedford>
The algorithm as written though, never did proper state transitions on error in evaluate (DFS transitions), and that was a property from the start. Sticking with that model would effectively mean just saying [[CycleRoot]] can be unset...

[09:57:09.0378] <guybedford>
I'm pretty sure this doesn't affects any real execution paths fwiw

[10:23:03.0169] <nicolo-ribaudo>
I opened https://github.com/tc39/ecma262/pull/3583, which defaults it to the module itself, and I _think_ it's fine to do it in the error case

[11:09:07.0954] <guybedford>
Yeah I'm pretty sure that works, as an import to any module in an errored cycle should still find that error and throw it before trying further evaluations.

[11:36:43.0617] <shu>
nicolo-ribaudo guybedford as the only two people in the world who have this machinery in their heads, any ideas for editorially improving understanding?

[11:37:07.0603] <shu>
i was thinking maybe an interactive example?

[11:37:12.0811] <shu>
how do people teach graph algorithms?

[11:38:02.0158] <shu>
i learned graphs from dr greibach, who taught on transparencies...


2025-05-02
[23:35:33.0449] <nicolo-ribaudo>
The problem is that this is not just a graph, but each node has also a ton of different states, and for evaluation they are _all_ relevant

[23:36:16.0330] <nicolo-ribaudo>
I do have an interactive example (linked to in that PR), maybe I could join the next editors call and we could consider how to embed smaller versions of it in the spec, together with the existing examples?

