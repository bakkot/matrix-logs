2024-09-03
[11:28:21.0095] <bakkot>
looks like compile-time imports for wasm are going to ship: https://groups.google.com/a/chromium.org/g/blink-dev/c/zww0CT9PRVw/m/YmtNkC4jAQAJ

[11:28:35.0453] <bakkot>
was there ever a strategy worked out for integrating that with the source-phase imports proposal?

[11:43:49.0953] <littledan (PTO until September 16)>
Source phase imports give you a WebAssembly.Module instance, so then you can instantiate it with that 

[11:57:22.0108] <nicolo-ribaudo>
> <@bakkot:matrix.org> was there ever a strategy worked out for integrating that with the source-phase imports proposal?

My understanding was that wasm modules coming from the JS loaders would have js-string enabled by default 

[12:16:10.0229] <guybedford>
Wasm ESM integration will specify that string builtins is enabled for source phase, Luca Casonato mentioned this at our update at the last meeting

[12:16:28.0741] <guybedford>
 * Wasm ESM integration will specify that string builtins is enabled for instance & source phase, Luca Casonato mentioned this at our update at the last meeting

[12:16:43.0254] <guybedford>
 * Wasm ESM integration will specify that string builtins is enabled for instance & source phase, Luca Casonato mentioned this at our update at the last plenary meeting

[12:20:35.0328] <bakkot>
> <@littledan:matrix.org> Source phase imports give you a WebAssembly.Module instance, so then you can instantiate it with that

right but that's after the `.compile` time when you'd want to enable it

[12:20:43.0803] <bakkot>
> <@guybedford:matrix.org> Wasm ESM integration will specify that string builtins is enabled for instance & source phase, Luca Casonato mentioned this at our update at the last plenary meeting

ah, great, sorry I missed that

[12:22:08.0369] <bakkot>
presumably also any other built-ins? at least those which don't add capabilities? (which, IIUC the intention is for them to never add capabilities)

[12:22:59.0224] <guybedford>
I believe the intention is for them not to introduce capabilities under compile-time builtins, and that those are better suited as instantiation imports

[12:23:10.0558] <guybedford>
but we will have to see how things progress too

[12:23:34.0004] <guybedford>
perhaps a future compile time import could "pull in" an instantiation import

[12:23:42.0551] <guybedford>
to represent the capability boundary

[12:23:55.0442] <guybedford>
(I'm not sure I'm just hypothesising)

[12:24:36.0075] <guybedford>
at the very least, we can consider proposals on a case by case basis, and should ensure this feedback is part of any future builtins though

[12:27:14.0167] <bakkot>
that would be a nice way of doing it, yeah


2024-09-12
[07:25:47.0586] <nicolo-ribaudo>
I unfortunately cannot join the meeting today

[08:03:12.0939] <jakobjingleheimer>
I can (i'm in the Meet)

[08:03:49.0759] <Chengzhong Wu>
I have an ad-hoc conflict and can not make it

[08:58:21.0393] <jakobjingleheimer>
Notes from today's meeting: https://app.fireflies.ai/view/TC39-Module-Harmony::UkkwlgF06sllfUKA


2024-09-16
[04:52:54.0677] <nicolo-ribaudo>
guybedford shu I wrote down how I would like to see the "Module" vs "Module Source" to be represented in the spec, and what it should mean for two modules to be "the same module".

https://notes.igalia.com/ZuVEtJzHTveQW5yBOSG2vQ

Most of this can apply to scripts if needed, to support shared structs correlation in scripts

[11:08:20.0167] <guybedford>
this looks like the right kind of direction to me

[11:09:46.0404] <guybedford>
Couple of points:
1. Is this purely a refactoring, or, beyond the change of abstraction boundaries with HTML etc - are there real semantic differences at all? It would be nice to see those categorised.
2. Module expressions and module declarations also have the concept of canonical instances, which need to be defined here, and it would be good to have a description of that in this context.

