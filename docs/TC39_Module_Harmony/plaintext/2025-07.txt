2025-07-03
[09:02:46.0988] <nicolo-ribaudo>
Meeting time!


2025-07-04
[09:38:26.0874] <guybedford>
nicolo-ribaudo: per the JSON modules spec, should `video/lottie+json` be accepted as a valid JSON module? It seems like in HTML it should. I ran a quick test in Chrome and this didn't seem to be the case.

[09:40:04.0322] <guybedford>
ahh it seems this was a recently fixed Chrome bug

[09:40:06.0305] <guybedford>
nvm

[09:51:57.0292] <nicolo-ribaudo>
Yeah it should work because it's a JSON mime type

[11:08:01.0901] <Rob Palmer>
Welcome styfle: 


2025-07-07
[06:31:03.0241] <styfle>
Thanks! I submitted my proposal here. Let me know if you have any feedback! https://github.com/tc39/agendas/pull/1900


2025-07-08
[05:14:25.0164] <nicolo-ribaudo>
I'd recommend putting at least 30 min, maybe 45. I assume a presentation explaining the use cases and why the feature is needed would take 10-15 minutes, but them I'm sure people will have opinions

[05:14:41.0392] <nicolo-ribaudo>
* I'd recommend putting at least 30 min, maybe 45. I assume a presentation explaining the use cases and why the feature is needed would take 10-15 minutes, but them I'm sure people will have opinions and will want to discuss before agreeing on Stage 1

[06:44:49.0029] <dminor>
I really see no harm in asking for more time up front, especially this time around with such a light agenda so far.

[07:25:53.0816] <styfle>
nicolo-ribaudo: Thanks I bumped to 30 min https://github.com/tc39/agendas/pull/1901

Do you think 45 would be needed? Not sure how these things work. How long was it for json modules?

[07:37:46.0459] <nicolo-ribaudo>
I'll find that info for you later! Or, if you want to look it up yourself, probably look at old agendas looking for the proposal


2025-07-11
[17:38:38.0903] <guybedford>
is it supposed to be correct that `m.foo = 5` assignment where `m` is a ModuleNamespace only throws in strict mode, not in sloppy mode?

[17:39:07.0753] <guybedford>
just spent way too long debugging why in Node.js it was allowed when importing a namespace into a CJS module...

[19:30:51.0811] <kriskowal>
I believe that is expected, and has more to do with sloppy mode than it has to do with modules.


2025-07-17
[08:26:20.0960] <Jacob Smith>
I'm swamped at work and won't make it today

[09:02:58.0831] <nicolo-ribaudo>
Meeting time!


2025-07-18
[20:21:03.0176] <kriskowal>
I‚Äôm on the docket now to present ‚ÄúImport Hook‚Äù at plenary and have reserved the option of asking for Stage 1, so would be delighted to see folks at TG3 and Module Harmony and discuss https://github.com/endojs/proposal-import-hook

[20:22:15.0518] <kriskowal>
And, naugtur has taken on the front seat role for ‚Äúnew Global‚Äù, which we expect to be a hard sell and will want to invite everyone to the table https://github.com/endojs/proposal-new-global

[20:23:32.0447] <kriskowal>
What makes this different is that we are not going to ask for a new category of global object, just the ability to replicate existing categories with the option of limiting which observable properties are grafted from the incubating global, without limiting whatever internal slots are needed to function properly in implementations.

[01:06:52.0700] <annevk>
Keeping `WindowProxy` and `Window` objects straight in one's mind is already too complex, as also evidenced by the proposal not even acknowledging or going into the particular difficulties of that. At least `ShadowRealm`s had a pretty plausible story, they were just not compelling enough.

[09:13:06.0874] <kriskowal>
I would like to talk to you specifically about this before we touch on this at plenary. We‚Äôre _probably_ going to pull this out, but wanted to get it in before the deadline just in case.

[09:13:59.0323] <kriskowal>
* I would like to talk to you specifically about this before we touch on this at plenary. We‚Äôre _probably_ going to pull this off the agenda, but wanted to get it in before the deadline just in case.

[09:23:30.0704] <kriskowal>
And also particularly ptomato who among us knows a great deal about those difficulties.

[09:23:52.0656] <annevk>
I can probably squeeze in a short chat somewhere next week. E.g., something early for you on Wednesday?

[09:24:15.0700] <kriskowal>
Let‚Äôs use TG-3. That meets Wednesday early.

[09:24:53.0379] <kriskowal>
I mean, Early Pacific, late Central Europe.

[09:25:05.0153] <kriskowal>
* I mean, early Pacific, late Central Europe.

[09:25:08.0223] <annevk>
I suspect that works, though I'll need the details again.

[09:27:18.0544] <annevk>
Unfortunately 7PM my time is not early enough and ends up overlapping with something else. 6PM would work.

[09:31:30.0484] <kriskowal>
Let me connect you to champion naugtur who is closer to your time zone.

[09:32:37.0739] <kriskowal>
I‚Äôm occasionally available an hour earlier, but non-deterministically, what with the procedure for launching the kids out of the home office.

[10:57:21.0222] <ptomato>
I'm at a conference next week and will have very spotty availability

[10:59:12.0496] <ptomato>
maybe async would be easier?

[10:59:22.0995] <kriskowal>
We‚Äôll catch you when we can. Maybe Module Harmony meeting (every other Thursday) or the subsequent TG-3. We‚Äôll appreciate a chance to catch up whenever you‚Äôre around. Would be neat if when Tab‚Äôs in the room, but not necessarily.

[11:09:50.0747] <kriskowal>
Sure. I‚Äôm interested in your strategic advice, hurdles worth avoiding, &c. My understanding from your related experience with our sister proposal ShadowRealm is that is blocked on motivating cases, so we expect to need rich motivating cases and even a parade of invited experts to testify to them. Some if not all of those are overlapping with trade-offs.

[11:13:41.0202] <ptomato>
I can't guarantee _good_ advice, but I can definitely give advice üòÑ


2025-07-23
[23:58:58.0840] <Rob Palmer>
Deno & Cloudflare considering new APIs for sandboxed JS execution

https://x.com/rough__sea/status/1947745772050723114


2025-07-30
[02:20:33.0258] <nicolo-ribaudo>
styfle guybedford The "JSON modules" proposal is stage 4 and part of ecma-262, there is no need for the import bytes proposal to "build o top of it"

[02:21:27.0797] <nicolo-ribaudo>
styfle Can you link to https://styfle.github.io/proposal-import-buffer/ in the repo metadata?

[02:24:24.0189] <nicolo-ribaudo>
Two questions also:
- Why does CreateBufferModule accept a SharedArrayBuffer? If implementations don't want a mutable ArrayBuffer, a SharedArrayBuffer seems even worse
- I missed when we switched from Uint8Array to ArrayBuffer. Why that change? Every API that accepts an ArrayBuffer also accepts a Uint8Array anyway, but Uint8Array avoid the "conversion step" for the most common use cases of needing the bytes.

[02:26:22.0184] <nicolo-ribaudo>
Editorially speaking, I think it would be enough to say in HostLoadImportedModule "must perform FinishLoadingImportedModule(referrer, moduleRequest, payload, result), where result is either the Completion Record returned by an invokation of  CreateDefaultExportSyntheticModule with an immutable ArrayBuffer parameter or a throw completion" without needing the new CreateBufferModule AO, but the current approach is also fine

[02:26:28.0790] <nicolo-ribaudo>
* Editorially speaking, I think it would be better to say in HostLoadImportedModule "must perform FinishLoadingImportedModule(referrer, moduleRequest, payload, result), where result is either the Completion Record returned by an invokation of  CreateDefaultExportSyntheticModule with an immutable ArrayBuffer parameter or a throw completion" without needing the new CreateBufferModule AO, but the current approach is also fine

[02:31:24.0989] <nicolo-ribaudo>
Note that https://github.com/styfle/proposal-import-buffer/issues/5 was asking for the _backing ArrayBuffer_ of the Uint8Array to be an immutable ArrayBuffer, not for the Uint8Array to be _replaced_ with an immutable ArrayBuffer

[02:32:29.0697] <nicolo-ribaudo>
Oh, I see, https://github.com/styfle/proposal-import-buffer/issues/5#issuecomment-3059482682. I'll bring it up in plenary

[02:47:33.0912] <bakkot>
w3c guidelines say to use Uint8Array for sequences of bytes https://www.w3.org/TR/design-principles/#uint8array

[02:47:39.0276] <bakkot>
(disclosure: I wrote this rule)

[02:48:08.0525] <nicolo-ribaudo>
Oh thank you

[02:49:15.0370] <bakkot>
the Response type has a `bytes` method for getting a Uint8Array as well as a now-consider-mistake `arrayBuffer` method for getting an ArrayBuffer and `json` for getting json and `text` for getting text

[02:49:32.0032] <bakkot>
whichever type we chose I think the names should match

[02:49:44.0813] <nicolo-ribaudo>
Do you know if there is any API that accepts array buffers but not uint8arrays?

[02:49:54.0473] <bakkot>
so if we do ArrayBuffer it should be `with { type: "arrayBuffer" }`

[02:50:13.0544] <bakkot>
well, the TypedArray constructors

[02:50:31.0833] <bakkot>
otherwise, no, everything on the web uses ArrayBufferView

[02:50:59.0324] <bakkot>
* the Response type has a `bytes` method for getting a Uint8Array as well as a now-considered-mistake `arrayBuffer` method for getting an ArrayBuffer and `json` for getting json and `text` for getting text

[02:51:16.0955] <nicolo-ribaudo>
Ok yeah -- for typed array constructor it's probably fine since they are a "conversion step" anyway so adding the `.buffer` is not annoying 

[02:53:09.0908] <bakkot>
I might be OK with having both `type: "arrayBuffer"` and `type: "bytes"` I guess, if people strongly want to be able to get a non-wrapped ArrayBuffer

[02:53:28.0459] <bakkot>
but my preference would also be just `bytes` for a Uint8Array

[02:54:31.0473] <bakkot>
web platform is probably not going to put `.arrayBuffer()` when adding this set of methods to new types, see thread starting at https://github.com/whatwg/streams/issues/1019#issuecomment-3014862880

[05:02:29.0689] <annevk>
Yeah, let's only expose bytes as Uint8Array going forward pretty please

[05:02:44.0989] <annevk>
I think on the consumption side it makes sense to be lenient, but not when producing

[05:04:00.0405] <annevk>
Note that we are strict on the consumption side if it's an output parameter, as with `encodeInto()`, and again I think that makes sense

[06:35:48.0674] <styfle>
The proposal was originally written as bytes and then changed to buffer based on all the feedback in issue https://github.com/styfle/proposal-import-buffer/issues/5

[06:37:52.0736] <styfle>
guybedford: guybedford (Guy Bedford) We might ave a typo in the spec. Can you take another look?

[06:44:45.0030] <annevk>
styfle: that seems exactly like the kind of thing that ought to use Uint8Array.

[06:46:11.0593] <annevk>
And that discussion is mainly about mutability, which is really about the underlying buffer.

[06:49:25.0518] <nicolo-ribaudo>
Let's see how the discussion goes today in plenary, I suspect that most will want the Uint8Array

[06:49:34.0663] <nicolo-ribaudo>
annevk I can mention that it's also your preference 

[08:37:05.0915] <kriskowal>
I personally like the spelling of type bytes, like that it aligns with the fetch api, and buy the argument that if it‚Äôs called bytes, the representation should be uint8array (backed by immutable arraybuffer). If the representation is a bare arraybuffer, I prefer the spelling type: buffer. I don‚Äôt love having both but I don‚Äôt mind. Agoric will make the case for ‚Äúbuffer‚Äù ArrayBuffer today, but I will support any of the above options (bytes, buffer, or both) but insist on immutable backing arraybuffer. 

[08:52:33.0392] <bakkot>
I feel reasonably strongly that if we have a bare ArrayBuffer it must be named `arrayBuffer` to match the rest of the web platform (and to avoid being confusing on Node and similar runtimes, which have a widely used typed named Buffer which is basically Uint8Array).

[08:54:05.0956] <kriskowal>
> <@bakkot:matrix.org> I feel reasonably strongly that if we have a bare ArrayBuffer it must be named `arrayBuffer` to match the rest of the web platform (and to avoid being confusing on Node and similar runtimes, which have a widely used typed named Buffer which is basically Uint8Array).

Alright, I can bend to that. 

[08:55:11.0692] <annevk>
Though bare ArrayBuffer seems a bit silly at this point.

[10:10:43.0874] <Mathieu Hofman>
To clarify, the request from Agoric was for immutable ArrayBuffer backing. We are fine with import bytes being a Uint8Array, as long as the backing buffer is immutable.


2025-07-31
[09:02:23.0208] <Zb Tenerowicz (ZTZ/naugtur)>
Is the meeting on?

