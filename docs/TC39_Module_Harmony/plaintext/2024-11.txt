2024-11-07
[08:05:38.0089] <guybedford>
Anyone joining today?

[08:08:19.0286] <nicolo-ribaudo>
Sorry I got distracted 

[08:08:25.0387] <nicolo-ribaudo>
If you are still around I'll join now

[08:08:32.0115] <guybedford>
yeah we're here


2024-11-13
[10:28:22.0418] <guybedford>
Hi all, I've added three new items to the agenda tomorrow, and specifically with new proposal updates.

Will be great to discuss further.



2024-11-14
[08:00:16.0326] <nicolo-ribaudo>
I'm a couple minutes late

[09:00:55.0497] <jakobjingleheimer>
guybedford nicolo-ribaudo i took a quick look, and i might actually be able to facilitate import.meta.load(). I'm doing a quick PoC right now.

[09:03:44.0092] <nicolo-ribaudo>
I assume that is as much problematic to Guy as .require :P

[09:06:31.0846] <jakobjingleheimer>
Why? Isn't his objection about commonjs? (import.meta.load() would use esm)

[09:06:52.0296] <jakobjingleheimer>
Recording and summary of today's meeting: https://app.fireflies.ai/view/TC39-Module-Harmony::qn4hiX7NVrtLJ7ax

[09:08:13.0037] <nicolo-ribaudo>
> <@jakobjingleheimer:matrix.org> Why? Isn't his objection about commonjs? (import.meta.load() would use esm)

I think the objection is to it being just a function that you can grab and pass around, making it as hard to statically analyze as require calls

[09:14:15.0950] <guybedford>
I think statically analyzable import capabilities belong in TC39

[09:14:39.0037] <guybedford>
and `import.meta` is a dangerous place for things in general

[09:14:47.0654] <guybedford>
that we should have a very high bar for

[09:15:06.0660] <guybedford>
but Node.js can have module loading helpers under its builtin modules that offer features like preloading etc for sure

[09:15:13.0371] <guybedford>
just like browsers have custom preloading

[09:15:32.0878] <guybedford>
I'd just suggest it be a `import { preload } from 'node:module'` or something like that so it's clear it's Node.js specific

[09:23:04.0241] <jakobjingleheimer>
Isn't import.meta that space? Also, that's where node-like runtimes are supposed to put these sorts of things.

There are cumbersome drawbacks to it being on node:module instead of import.meta. Notably:

This is possible:
import.meta.load('./foo.js')

This is not:
preload('./foo.js')

Instead it would have to be
preload(import.meta.resolve('./foo.js'))

Or

preload('./foo.js', import.meta.url)

[09:24:38.0925] <jakobjingleheimer>
Btw my initial PoC for import.meta.load is working. I'd need to try it with a loader registered to say it's likely possible.

But if it doesn't facilitate what you want, then i won't bother

[09:26:56.0558] <jakobjingleheimer>
It facilitates what i want though ðŸ˜œ

[11:12:25.0123] <jakobjingleheimer>
guybedford ðŸ‘€

[11:37:50.0916] <guybedford>
`import.meta` is dangerous in the context of things not being standard, while `import x from 'node:x'` is clearly Node.js specific

[11:38:04.0461] <guybedford>
there was discussion in the past about `import.meta.node.feat` as being environment-specific

[11:38:13.0092] <guybedford>
even that still concerns me though...

[11:43:37.0279] <jakobjingleheimer>
That's what WinterCG is for and possibly TC-something

[11:43:56.0965] <jakobjingleheimer>
* That's what WinterCG is for and possibly TC-something when WinterCG gets promoted

