2023-08-01
[14:32:52.0555] <Kris Kowal>
This is the change that Caridy prepared https://tc39.es/proposal-compartments/0-module-and-module-source.html

[14:33:27.0918] <Kris Kowal>
My intention is to move this into a repository, but itâ€™s unclear to me whether we should factor this even finer before making one or more module harmony layers out of it.

[14:34:38.0305] <Kris Kowal>
Luca Casonato Would you like to see an attempt to carve off smaller proposals (in the spirit of making them importable into other proposals like expressions), like one for introducing the module instance concept without the Module constructor?


2023-08-02
[01:33:28.0330] <Luca Casonato>
Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` between expressions, instance imports, and virtualisation. I _think_ this is:

```ts
interface Module {
  get source(): %AbstractModuleSource%;
}

const mod: Module; // could come from expression, instance import, or constructor

await import(mod); // these modules are importable
new Worker(mod); // or usable as the entrypoint to a Worker
self.postMessage(mod); // and structuredClonable (transferrable) to other contexts
```

[01:33:36.0902] <Luca Casonato>
 * Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` between expressions, instance imports, and virtualisation. I _think_ this is:

```ts
class Module {
  get source(): %AbstractModuleSource%;
}

const mod: Module; // could come from expression, instance import, or constructor

await import(mod); // these modules are importable
new Worker(mod); // or usable as the entrypoint to a Worker
self.postMessage(mod); // and structuredClonable (transferrable) to other contexts
```

[01:34:08.0119] <Luca Casonato>
In essence, all the `Module` semantics minus actually getting ahold of a `Module` object

[01:34:59.0253] <Luca Casonato>
From there, we can pursue all three ways of getting ahold of a `Module` in parallel:
- expressions
- instance imports
- constructor (this one also introduces `ModuleSource`)

[01:35:42.0447] <Luca Casonato>
 * Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` interface between expressions, instance imports, and virtualisation. I _think_ this is:

```ts
class Module {
  get source(): %AbstractModuleSource%;
}

const mod: Module; // could come from expression, instance import, or constructor

await import(mod); // these modules are importable
new Worker(mod); // or usable as the entrypoint to a Worker
self.postMessage(mod); // and structuredClonable (transferrable) to other contexts
```

[05:52:59.0204] <nicolo-ribaudo>
guybedford Luca Casonato fyi https://github.com/babel/babel/pull/15829


2023-08-08
[07:22:49.0046] <nicolo-ribaudo>
Last week we discussed meeting only when there are some topics on the agenda. Is there anything we would like to talk about today?

[09:37:28.0252] <Luca Casonato>
Sorry, I'm in a different time zone this week so totally forgot about the module harmony call!


2023-08-22
[06:42:42.0869] <Luca Casonato>
Hey folks, if we have time I'd like to present something on module instance imports. I wrote up an explainer here: https://github.com/lucacasonato/proposal-module-instance-imports

I'd like to talk about it at the TC39 tools meeting tomorrow to get some feedback from tool authors on this direction before talking to HTML folks

[06:43:05.0173] <Luca Casonato>
 * Hey folks, if we have time I'd like to present something on module instance imports. I wrote up an explainer here: https://github.com/lucacasonato/proposal-module-instance-imports

I'd like to talk about it at the TC39 tools meeting tomorrow to get some feedback from tool authors on this direction before talking to HTML folks (and then I'll try present at Tokyo plenary)

[09:05:21.0001] <nicolo-ribaudo>
I'll join, I just have to figure out why in google meet my audio is not working

