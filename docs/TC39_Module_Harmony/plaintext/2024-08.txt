2024-08-01
[08:05:11.0141] <jakobjingleheimer>
is there a meeting today?

[08:14:46.0948] <guybedford>
it was cancelled due to TC39 this week, and then not reinstated, so enjoy the break :)

[08:15:18.0215] <jakobjingleheimer>
> <@guybedford:matrix.org> it was cancelled due to TC39 this week, and then not reinstated, so enjoy the break :)

>due to TC39 this week

what does that mean?

[08:21:25.0925] <guybedford>
I guess strictly speaking we never had TC39 cross-over in timing, but it's still customary to cancel meetings during TC39 weeks

[08:23:52.0034] <Chengzhong Wu>
it's TC39 plenary July 2024 this week: https://github.com/tc39/agendas/blob/main/2024/07.md. Future dates can be found in this repo as well

[08:32:27.0081] <jakobjingleheimer>
ohh, so there's no calendar to follow or anything that can trigger a notification? (you gotta go looking for updates)

[08:33:59.0633] <Chengzhong Wu>
Hmm, I don't think there is a useful public TC39 calendar.

[08:35:30.0786] <jakobjingleheimer>
how did y'all find out about the plenary? just occasionally check that document?

[08:37:25.0241] <guybedford>
the public calendar is here - https://calendar.google.com/calendar/u/0/embed?src=37a2107dff15193b42fffa091bc999165695d43b7e4f43b65eab093da2757a3a@group.calendar.google.com&ctz=America/Chicago, but it doesn't seem to include the plenary meetings

[08:37:48.0928] <guybedford>
typically meetings are posted in Reflector issues though

[08:37:50.0623] <Chengzhong Wu>
The simple rule is it happens every 2 month.

[10:44:50.0010] <ljharb>
> <@jakobjingleheimer:matrix.org> ohh, so there's no calendar to follow or anything that can trigger a notification? (you gotta go looking for updates)

i can add you to any tc39 events that you want to appear on your calendar, just lmk

[10:45:17.0344] <jakobjingleheimer>
> <@ljharb:matrix.org> i can add you to any tc39 events that you want to appear on your calendar, just lmk

Yes please!


2024-08-08
[07:04:19.0914] <nicolo-ribaudo>
Hey, unfortunately I won't be able to join the meeting today and next week

[07:11:31.0906] <jakobjingleheimer>
I also can't (I'll be on an aeroplane)


2024-08-10
[15:12:52.0066] <guybedford>
I assume folks here have seen https://github.com/whatwg/html/pull/10528, but if not, very much worth checking out


2024-08-11
[17:14:51.0351] <bakkot>
I hadn't; thanks for the link guybedford

[17:15:04.0820] <bakkot>
that looks like very much the wrong design; I've left a comment


2024-08-12
[10:21:43.0461] <guybedford>
I think it deals with the conflict cases pretty well in avoiding overriding anything that was already loaded

[10:22:14.0364] <guybedford>
my main concern is that that algorithm loops all the modules already loaded, and needs to be reconsidered for algorithmic complexity - apps shouldn't significantly slowdown as you load more modules!

[16:43:58.0034] <guybedford>
Didn't someone post here an interest in implementing `export **`?

[16:44:10.0563] <guybedford>
still waiting for that one ha

[16:44:23.0722] <guybedford>
 * Didn't someone post here an interest in specifying `export **`?


2024-08-13
[22:24:54.0854] <Aapo Alasuutari>
Yeah, I was at least one of them.

[22:25:54.0658] <Jack Works>
what is that, default including re-export?

[22:25:58.0069] <Aapo Alasuutari>
My work schedule is chock-full with an impending release, but once that is done I'll try to get permission to work on that during office hours.

[22:26:01.0917] <Aapo Alasuutari>
Yeah.

[22:28:05.0157] <Aapo Alasuutari>
We had to set up "export all; import all as temp; export default temp.default || null;" kind of ugly workarounds because we needed a "synthetic redirect" from resource A to resource B without forcing B to be re-evaluated.

[22:29:06.0359] <Jack Works>
> <@aapo.alasuutari:matrix.org> We had to set up "export all; import all as temp; export default temp.default || null;" kind of ugly workarounds because we needed a "synthetic redirect" from resource A to resource B without forcing B to be re-evaluated.

you can write this 

[22:29:24.0142] <Jack Works>
export * from 'x'; export { default } from 'x';

[22:39:54.0178] <Aapo Alasuutari>
Except, that's a syntax error if 'x' doesn't have a default export. And if you're a CDN-like backend, you don't usually care to know if there is one or not.

[23:25:58.0206] <Jack Works>
In almost all cases I have handled, I know if the file has a default export or not.

[23:51:57.0040] <Aapo Alasuutari>
That is unfortunately not the case here. Some files are statically known, yes, but we also serve "generic" modules that we do not know the contents of.


2024-08-15
[08:39:16.0557] <jakobjingleheimer>
Notes and transcript of today's meeting: https://app.fireflies.ai/view/TC39-Module-Harmony::bZPQlyCVjpgSm1vd


2024-08-22
[01:21:57.0342] <jakobjingleheimer>
I'm swamped this week and can't make it. I'll send Fireflies to record and take notes; someone will have to let it into the meet.

[01:24:47.0095] <jakobjingleheimer>
If you want to discuss anything before Fireflies starts, it will wait for 5 minutes after asking to be let in. Message me if you need it triggered to re-join. It takes about a minute to arrive after i trigger it (so it may not be there exactly at 17:00 CEST—if it doesn't show up by ~17:02, message me and I'll re-trigger it)

[07:58:33.0445] <nicolo-ribaudo>
Thank you! I'm in the meeting now, so probably I can let it in whenever you want :)

[07:59:02.0441] <Chengzhong Wu>
I have a conflict first half hour. Will join late, if you are still around

[08:00:45.0832] <jakobjingleheimer>
> <@nicolo-ribaudo:matrix.org> Thank you! I'm in the meeting now, so probably I can let it in whenever you want :)

Done! LMK if it doesn't join within the next couple minutes

[08:03:33.0706] <nicolo-ribaudo>
> <@jakobjingleheimer:matrix.org> Done! LMK if it doesn't join within the next couple minutes

It's in :) I assume it's working

[09:22:08.0431] <jakobjingleheimer>
> <@nicolo-ribaudo:matrix.org> It's in :) I assume it's working

https://app.fireflies.ai/view/TC39-Module-Harmony::qYPlsVWSkn3qNMqC

[12:14:34.0478] <guybedford>
I've posted a new variant of the reexports analysis in https://github.com/tc39/proposal-esm-phase-imports/issues/20#issuecomment-2305458992, it would be great to get some feedback further to work towards specifying the full analysis.

[12:14:39.0572] <guybedford>
/cc kriskowal

[12:21:59.0306] <kriskowal>
TIL minifier invariance is desired, and that makes sense. I read that as:
```
assert.deepEqual(
 new ModuleSource(       source ).exports(),
 new ModuleSource(minify(source)).exports());
```

[12:25:27.0946] <kriskowal>
Starting with the bikeshed, consider naming the determinants/types: `export/Export`, `reexport/Reexport`, `exportAll/reexportAll`.

[12:25:37.0376] <kriskowal>
 * Starting with the bikeshed, consider naming the determinants/types: `export/Export`, `reexport/Reexport`, `reexportAll/ReexportAll`.

[12:26:11.0845] <kriskowal>
 * Starting with the bikeshed, consider naming the determinants/types: `export/Export`, `reexport/Reexport`, `reexports/Reexports`.

[12:27:47.0141] <kriskowal>
I like that this cleanly separates the motivating use cases for `imports()` and `exports()` in general, where `bindings()` conflates those concerns.

[12:28:44.0483] <guybedford>
> <@kriskowal:aelf.land> Starting with the bikeshed, consider naming the determinants/types: `export/Export`, `reexport/Reexport`, `reexports/Reexports`.

Maybe `local | external | reexports`?

[12:28:47.0872] <kriskowal>
That is `imports()` is sufficient for traversing the dependency graph and `exports()` is sufficient for collecting the names and their linkage up the graph.

[12:29:04.0757] <kriskowal>
I dislike local because its dual is remote and absent in the metaphor.

[12:29:35.0193] <guybedford>
Hmm, or something like `internal | external | reexports`?

[12:30:04.0294] <kriskowal>
The duality of internal and external is satisfying but the incongruence of reexports is dissatisfying.

[12:30:52.0325] <kriskowal>
Distinguish reexport from reexports on the plural is dissatisfying too, but reexport and reexportAll is disatisfying in a different way.

[12:31:05.0784] <kriskowal>
But I would be fine with either reexports or reexportAll.

[12:31:17.0679] <guybedford>
`export-all`?

[12:31:26.0938] <kriskowal>
And “by fine with”, this is emphatically about pleasure and not sufficiency.

[12:32:32.0224] <kriskowal>
Is there a precedent for kebab-case descriminators? I have a feeling they will end up in object keys, which will have some dissatisfying aethetics imposed by prettier.

[12:32:59.0481] <guybedford>
I mean, it's a Rust-ism, but becoming fairly well-established

[12:33:26.0976] <kriskowal>
I am very pro-kebab for URLS, file-names, and module-specifiers.

[12:33:29.0937] <kriskowal>
Also lunch.

[12:34:30.0092] <kriskowal>
I assume Intl and Temporal are rich in descriminator precedents.

[12:34:50.0497] <kriskowal>
But if we can side-step that particular bike-shed with a more clever treble, that would be a win.

[12:51:40.0842] <kriskowal>
(And I could buy either (`export`, `reexport`, `reexport-all`) or (`export`, `reexport`, `reexportAll`) without qualm.)


2024-08-23
[09:53:54.0489] <Richard Gibson>
> <@kriskowal:aelf.land> I assume Intl and Temporal are rich in descriminator precedents.

yes, and it's in the former's [style guide](https://github.com/tc39/ecma402/blob/main/docs/style-guide.md#identifiers-defined-by-ecma-402) but with an exception ("_function names, object keys, and string enumeration values below are all in camel case… For identifiers whose syntax comes from a different specification, follow the convention in that specification_") along with . For Temporal, it affects [GetRoundingModeOption](https://tc39.es/proposal-temporal/#sec-temporal-getroundingmodeoption) ("half{Ceil,Floor,Expand,Trunc,Even}") but surprisingly no other part that I can find.

[09:58:14.0647] <Richard Gibson>
> <@kriskowal:aelf.land> I assume Intl and Temporal are rich in descriminator precedents.

 * yes, and it's in the former's [style guide](https://github.com/tc39/ecma402/blob/main/docs/style-guide.md#identifiers-defined-by-ecma-402) but with an exception ("_function names, object keys, and string enumeration values below are all in camel case… For identifiers whose syntax comes from a different specification, follow the convention in that specification_") and an observation that ECMA-262 [`Atomics.wait`](https://tc39.es/ecma262/multipage/structured-data.html#sec-atomics.wait) result objects have value "ok" or "not-equal" or "timed-out". For Temporal, it affects [GetRoundingModeOption](https://tc39.es/proposal-temporal/#sec-temporal-getroundingmodeoption) ("half{Ceil,Floor,Expand,Trunc,Even}") but surprisingly no other part that I can find.

[10:15:16.0334] <Richard Gibson>
but for the deeper topic, I think there's an issue with include both qualified and unqualified "export" fields, especially if the former is not a subset of the latter. I think it would be clearer so qualify both, e.g. `imports` vs. `directExports` vs. `reexports`

[10:51:55.0070] <kriskowal>
> <@gibson042:matrix.org> but for the deeper topic, I think there's an issue with include both qualified and unqualified "export" fields, especially if the former is not a subset of the latter. I think it would be clearer so qualify both, e.g. `imports` vs. `directExports` vs. `reexports`

Can you give an example?

[10:52:33.0290] <Richard Gibson>
 * but for the deeper topic, I think there's an issue with include both qualified and unqualified "export" fields, especially if the former is not a subset of the latter. I think it would be clearer to qualify both, e.g. `imports` vs. `directExports` vs. `reexports`

[10:55:17.0899] <Richard Gibson>
if the fields include both `exports` and `reexports`, some people will expect that `reexports` is a subset of `exports` (i.e., «exports that have the "reexport" characteristic») and others will assume that their contents are disjoint. Either way, someone will be surprised (negative affect).

