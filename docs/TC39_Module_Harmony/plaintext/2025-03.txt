2025-03-03
[09:55:10.0126] <Chengzhong Wu>
If the time is moved one hour earlier, I have a conflict at the second half hour.

[09:59:31.0469] <nicolo-ribaudo>
I now have two recurring conflicts the hour after for 3 weeks out of four ðŸ˜…

[09:59:58.0046] <nicolo-ribaudo>
(numerics proposals and source maps)

[10:48:42.0696] <jakobjingleheimer>
I start a new job this week, so I dunno what my availability will be during work hours (which this currently isâ€”an hour later isn't)

[11:08:09.0042] <guybedford>
okay, let's hold again for now, daylight savings also coming up


2025-03-04
[20:50:48.0869] <kriskowal>
I continue to become available two hours after the current scheduled meeting time. 


2025-03-13
[07:11:28.0369] <nicolo-ribaudo>
Ugh I have a conflict today because of the EU-US different DST change, I might be able to join in the second 30 minutes

[07:13:19.0737] <jakobjingleheimer>
Oh right. Crap, i have a meeting at 4pm

[08:04:18.0818] <guybedford>
ahh right, okay I'm here if anyone wants to discuss ESM Integration stuff and https://github.com/WebAssembly/esm-integration/pull/104

[08:31:14.0657] <guybedford>
still around if you want to start half an hour late nicolo-ribaudo 

[08:31:50.0641] <nicolo-ribaudo>
Yes coming in a second 


2025-03-20
[07:02:04.0808] <jakobjingleheimer>
Still have the 4pm meeting so I can't make this week either :(


2025-03-21
[11:54:20.0120] <guybedford>
I've posted up a draft HTML PR for ESM Phase Imports in https://github.com/whatwg/html/pull/11152

[11:54:23.0221] <guybedford>
feedback very welcome!

[15:19:25.0350] <bakkot>
guybedford: I haven't been following closely; can you give an example of how one would obtain an unrooted module in the current world?

[15:19:38.0433] <bakkot>
(i.e. in the world without `module {}` syntax)

[15:20:50.0595] <bakkot>
I guess just the `ModuleSource` constructor?

[15:21:37.0656] <bakkot>
I forget if we were exposing that or not

[15:23:35.0161] <bakkot>
oh and `WebAssembly.compile` I guess

[15:34:11.0582] <bakkot>
unrelated, has there been any discussion of Trusted Types integration?

[15:35:04.0157] <bakkot>
right now there's TrustedScript; presumably there would need to be TrustedModuleSource or something? Kinda of annoying but not terrible I guess

[16:07:29.0747] <guybedford>
yes just via `new WebAssembly.Module(bytes)` today and in future perhaps either `new ModuleSource('source')` and `eval('module { }')`.

[16:08:16.0794] <guybedford>
For the most part I think rooted modules are _trusted_ in the sense that they are known to originate from their URL and origin with CSP / integrity checks as appropriate

[16:08:34.0843] <guybedford>
I'm hopeful that security model might be possible to develop further

[16:08:53.0183] <guybedford>
(all rooted sources as trusted sources)

[16:09:26.0137] <guybedford>
* yes just via `new WebAssembly.Module(bytes)` today and in future perhaps either `new ModuleSource('source')` or `eval('module { }')`.

[16:12:21.0429] <bakkot>
Trusted Types is specifically a mechanism for getting from untrusted values to values which can be used in contexts which require trust (that is, which pass CSP)

[16:13:05.0547] <bakkot>
so the relevant thing here would be a way to take an _unrooted_ source and get something usable in a CSP context

[16:13:13.0508] <guybedford>
Right, but Trust Types are sink protections for user sources. But module sources are trusted sources, therefore do not require sink protection.

[16:13:27.0789] <bakkot>
for rooted module sources, yes

[16:13:36.0205] <nicolo-ribaudo>
I'm thinking that you would need a TrustedScript as an argument to a potential ModuleSource constructor

[16:13:48.0628] <nicolo-ribaudo>
Similarly to how you need to pass a TrustedScript to Function

[16:14:19.0369] <nicolo-ribaudo>
And gate creation of Module sources, rather than their usage

[16:18:38.0392] <bakkot>
I was trying to figure out how this works for WASM but it's apparently unspecified, fun fun

[16:19:09.0453] <bakkot>
anyway empirically CSP blocks compilation to Module objects

[16:19:23.0268] <bakkot>
so probably it makes more sense for the trust gate to be on creation of Module objects, not on their use

[16:19:54.0021] <bakkot>
as nicolo-ribaudo suggests but not as currently specified, at least based on my reading of the description in the PR; correct me if I'm wrong

[16:20:29.0488] <bakkot>
https://github.com/WebAssembly/spec/issues/1393 is the wasm+csp issue incidentally

[16:20:36.0694] <bakkot>
man CSP is just the single worst web spec

[16:20:42.0294] <bakkot>
CSP and everything it touches

[16:20:44.0386] <guybedford>
Yes, that might well be the approach. Note also that module declarations nested arbitrarily deep in sources that bottom out as rooted sources are still also themselves rooted sources. Yes Wasm might even benefit from its own trusted types support for WebAssembly compile. Note that source phase integration for Wasm already unified Wasm CSP on script-src policy.

[16:21:14.0785] <bakkot>
> Note that source phase integration for Wasm already unified Wasm CSP on script-src policy.

Did it? Where's that specified?

[16:21:48.0965] <guybedford>
In the HTML integration PR - https://github.com/whatwg/html/pull/10380 were a bunch of discussions in WhatWG about that

[16:24:47.0920] <bakkot>
I don't see any discussions of CSP in that thread or anything in the PR which touches CSP

[16:24:51.0644] <bakkot>
did you mean to link a different one?

[16:29:26.0198] <guybedford>
I believe there was a WhatNOT meeting to discuss it, we also discussed it considerably in the modules group and various threads. I don't know if there's an easy canonical resource to find on that. It comes down to using destination script for Wasm I believe.

[16:29:46.0559] <bakkot>
bleh

