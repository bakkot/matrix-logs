2024-04-02
[20:50:55.0141] <sirisian>
Jack Works: I am down a rabbit hole. Not sure if you remember: https://github.com/tc39/proposal-compartments/issues/11 Was your intention there to do a babel-like transform on a Javascript file?

[20:55:42.0986] <sirisian>
At a high level do any of these proposals allow one to create an import "preprocessor" that hooks all imports (and their import attributes), modify their source text, and output a module? (And then hook any new imports if applicable in that module recursively). Or is that out of scope for the proposals?

[21:12:18.0225] <kriskowal>
That is certainly within scope for a `Module` instance constructor with an `importHook`.

[21:27:47.0632] <sirisian>
Would this work for the "root" realm (not sure the term). Like in a node.js environment where an importHook could process everything? Or would you just create a ShadowRealm (or compartment?) and run the index file in a wrapper?

[01:50:16.0770] <Jack Works>
> <@sirisian:matrix.org> Jack Works: I am down a rabbit hole. Not sure if you remember: https://github.com/tc39/proposal-compartments/issues/11 Was your intention there to do a babel-like transform on a Javascript file?

Yes. The old API allows us to run a text based hook before evaluation. This allows, for example, run TypeScript file by calling tsc to transform the source.


2024-04-03
[17:03:42.0839] <sirisian>
Jack Works: Is this in new APIs/proposals already?

[17:44:11.0339] <Jack Works>
> <@sirisian:matrix.org> Jack Works: Is this in new APIs/proposals already?

I cannot tell. maybe no

[12:57:20.0291] <guybedford>
Our usual call tomorrow overlaps with the Involvement in Standards discussion at the Node.js Collab Summit... I have a preference towards keeping our meeting especially with the upcoming progress in the Wasm CG and TC39 but wanted to see if many others here plan to go to the collab summit?

[13:27:55.0884] <nicolo-ribaudo>
I plan to prioritise our modules meeting

[14:09:34.0057] <guybedford>
ok, I will be attending the modules session just before but skipping the standards discussion, so will see you in the modules meeting, possibly a couple of minutes late if things run over a bit

[14:45:42.0368] <littledan>
I'd really love it if you all joined the Node Collab Summit session about modules tomorrow

[14:45:58.0119] <littledan>
The goal is to have more of a cross-over here

[14:46:33.0359] <littledan>
You can register for remote participation with this link: https://zoom.us/webinar/register/WN_3FJCCjgiRseMunHFhb8NoA#/registration

[14:48:38.0701] <guybedford>
littledan: the timing is just a bit unfortunate because of TC39 next week for Deferred evaluation and the ESM Integration going to the Wasm CG next week we do have a lot to discuss

[14:49:28.0912] <littledan>
Sorry I'm fine with skipping the general standards part, I'm talking more about the modules session

[14:49:37.0566] <littledan>
should we consider moving the modules session to enable participation?

[14:49:45.0113] <guybedford>
ohhh yes, I plan to be there for the modules session!

[14:49:52.0324] <guybedford>
it is right before our usual modules meeting

[14:50:01.0711] <littledan>
Good, so that time works out for you?

[14:50:22.0119] <guybedford>
yes, sorry I missed you were referring to the modules session, I will be there and I hope others will too!

[14:51:10.0718] <littledan>
also, if you have thoughts on what I should include in that session, it'd be great... honestly you'd be better to host it than me, guybedford 

[14:53:02.0742] <guybedford>
I always struggle to know how much to share longer term modules directions within the Node.js project, when there are very real immediate standards questions that are more pressing. I did previously present our modules work at last years collab summit, but it wasn't very well attended.

[14:53:19.0151] <littledan>
well, now people won't have a choice! it's single-track

[14:53:49.0733] <littledan>
I think many people were inspired by Joyee's recent work, and we can build off of that momentum

[14:54:44.0572] <littledan>
I was thinking of focusing on reviewing what we have, and what are the immediate future plans in both Node and TC39 (Stage 2+ TC39 proposals maybe), and then gather input as to what people want to happen in each place

[14:58:30.0302] <guybedford>
I think it sounds like you have a clear way to present it, I'm happy to share some thoughts on the current harmony efforts as I did previously. Also very interested to hear what people are interested in discussing.

[15:01:00.0382] <kriskowal>
The recent CJS imports ESM work has interesting parallels with deferred export. They both apply only to synchronous subgraphs, and imply that not-yet-evaluated transitive dependencies will execute in the same microtask.

[15:01:25.0316] <kriskowal>
 * The recent CJS imports ESM work has interesting parallels with deferred export. They both apply only to synchronous subgraphs, and imply that not-yet-evaluated transitive dependencies will execute in the same microtask. They both run ESM on the callerâ€™s stack.

[15:01:58.0641] <kriskowal>
 * The recent CJS imports ESM work has interesting parallels with deferred export. They both apply only to synchronous subgraphs, and imply that not-yet-evaluated transitive dependencies will execute in the same microtask. They both run ESM on the callerâ€™s stack. Theyâ€™re both limited to exposing the namespace object and not destructured imports.

[15:09:15.0327] <littledan>
> <@kriskowal:aelf.land> The recent CJS imports ESM work has interesting parallels with deferred export. They both apply only to synchronous subgraphs, and imply that not-yet-evaluated transitive dependencies will execute in the same microtask. They both run ESM on the callerâ€™s stack. Theyâ€™re both limited to exposing the namespace object and not destructured imports.

sure but they are also pretty different. The eagerly-execute-the-TLA stuff is actually pretty deliberate and important for import defer, and missing in CJS requires ESM. And import defer is a long-term solution, whereas CJS imports ESM is a "temporary" transition strategy.

[15:09:46.0892] <littledan>
they both relate to the theme "actually ESM has never been all that async, so we can do this important stuff"

[15:12:11.0733] <guybedford>
There's an interesting edge case with cycles - the ESM Evaluate function was actually never designed to be reentrant. With CJS importing ESM that effectively introduces reentrancy. And import defer is actually now fixing that reentrancy invariant to more clearly define what reentrancy is allowed (non cyclical).

[15:13:05.0806] <guybedford>
But it does unfortunately mean telling Joyee she can't have ESM - CJS cycles at all :P


2024-04-04
[07:15:43.0567] <littledan>
Node collaborator summit module session starting now. Please join!


2024-04-05
[11:27:01.0326] <Rob Palmer>
I invited Jake here because he has done a lot of work converting TypeScript to use ESM. There are still some challenges before TS can go "fully ESM". 

Potentially Joyee/Guy/Nicolo may have some thoughts on this.

[11:29:02.0632] <jakebailey>
Hello ðŸ™‚

[11:29:36.0289] <kriskowal>
Greetings jakebailey, very interested in your perspective / grievances.

[11:33:06.0028] <guybedford>
Hi jakebailey Rob's mentioned some of your use cases, would be great to discuss further either here or in our weekly meetings if you'd like to join

[11:43:37.0864] <jakebailey>
More or less, the issue with switching TS to ESM is that TypeScript has conditional support for Node; we check if we're in Node (or Node-ish), then `require` stuff from Node if possible. This is good because the same bundle can be used for any use case. But, we can't do this in ESM without top-level await because this code can't be asynchronous (besides during load of the module), defeating the awesome "require ESM works" case that would allow us to move to ESM-only without breaking downstream CJS users. My thinking was that `import.meta.require` or a new `import.meta.importSync` or `import(..., { sync: true })` could be created to allow synchronous dynamic import of synchronously loadable ESM; as it stands, the only use of "synchronous ESM" seems to be require-ing ESM.

[11:46:37.0679] <jakebailey>
It's theoretically possible to do this with import mappings, but that has a bunch of bad knock-on effects for our build, plus the fact that it may exclude downstream consumers who polyfill or aren't actually Node

[11:46:41.0566] <guybedford>
This was one of the motivations for top-level await to make these workflows easier. I'm curious what the issue is with relying on it? import sync is a great discussion point, I suppose the important question there is whether or not you expect to synchronously load arbitrary modules in Node.js through this mechanism or just the builtin host APIs or already-loaded code

[11:47:15.0331] <jakebailey>
TLA prevents require of ESM, so we'd sooner stay CJS because most of the TS ecosystem is CJS.

[11:47:36.0160] <guybedford>
most tools these days support package imports conditions as well

[11:47:56.0365] <jakebailey>
This is all relating to Joyee's change to Node, which would typically mean that an ESM only project would be usable in CJS via require

[11:48:19.0131] <guybedford>
it sounds like your major pressure is on import sync then yes, in which case it would be interesting to hear what modules you expect the import to work for

[11:49:22.0247] <kriskowal>
Also curious how we would square this with TS-to-ESM on the web.

[11:49:26.0080] <jakebailey>
Well, for us, it's just like `require("fs")` and so on; but I think there's a more general question about "if there's now a very clear set of sync-loadable ESM code, isn't it nice for anyone to be able to load that sync too?"

[11:50:18.0046] <kriskowal>
Moddable XS also has a sync import but it only is expected to work for no-TLA subgraphs that have already been loaded.

[11:50:20.0272] <jakebailey>
And IIRC there are some ongoing module related proposals that also require sync ESM, and even a proposal to have a prologue to assert that

[11:51:28.0160] <kriskowal>
Yes, there is a proposal for asserting a no-TLA subgraph, and also a proposal (deferred export evaluation) that under the same circumstances synchronously export pre-loaded no-TLA subgraphs.

[11:52:26.0632] <jakebailey>
Yeah. So on one hand, I'd be happy with `import.meta.require` being re-proposed, especially now that Node has `import.meta.dirname` and such, but there's the more general solution too!

[11:52:33.0898] <kriskowal>
Itâ€™s not hard to imagine an `import.now` proposal that would work under the same limitations.

[11:53:11.0386] <guybedford>
this is a good discussion topic, I'd suggest we bring it up in our next meeting if you'd like to join

[11:53:25.0272] <kriskowal>
`import.meta.dirname`, `import.meta.filename`, `import.meta.resolve`, and `import.meta.require` are all difficult to generalize beyond host-specific bottlenecks for interoperability.

[11:53:45.0671] <guybedford>
The meeting is this one - https://www.google.com/calendar/event?eid=c2luNm9jcm4wbTJyNXNxY2JkbGZtdmdwZWNfMjAyNDA0MThUMTUwMDAwWiAzN2EyMTA3ZGZmMTUxOTNiNDJmZmZhMDkxYmM5OTkxNjU2OTVkNDNiN2U0ZjQzYjY1ZWFiMDkzZGEyNzU3YTNhQGc&ctz=America/Chicago

[11:53:55.0466] <jakebailey>
I'll add that to my calendar ðŸ™‚

[11:54:02.0498] <kriskowal>
But, `import.now` does generalize.

[11:54:53.0293] <jakebailey>
I also remember some oddies in Workers too where a sync import would be beneficial, though I'm leaving my sphere of knowledge ðŸ˜„

[11:56:13.0511] <guybedford>
it's worth thinking carefully about what the real use cases are though

[11:56:20.0560] <guybedford>
as opposed to "it might be nice"

[11:56:39.0184] <guybedford>
there's a big distinction between host apis / a registry cache getter and full sync graph loading as well

[11:57:01.0779] <guybedford>
so if we want to solve the full sync graph loading problems (which are hard, because network), it's important to justify that

[11:57:28.0519] <guybedford>
hard in the sense of, how should it work and how should it error, not how should we syncify the network of course

[11:58:13.0416] <jakebailey>
 * I also remember some oddities in Workers too where a sync import would be beneficial, though I'm leaving my sphere of knowledge ðŸ˜„

[12:00:31.0816] <guybedford>
there's definitely some interesting framings in which a sync import can work though, so it would be great to have a chance to discuss the use cases and viability


2024-04-08
[05:06:27.0324] <littledan>
At the Node Collaborator Summit last week, there was interest in figuring out how to enable module mocking in ESM. Let's work with jakobjingleheimer on this!

[05:12:28.0586] <nicolo-ribaudo>
Hey, welcome!

[05:15:33.0490] <naugtur>
We got this question at WDI conference in Warsaw this Saturday too after a talk that showcased Node's builtin testing tools. It made me wonder if it'd be possible to implement some of the Module loading virtualization from the spec draft on top of Node loaders

[05:33:58.0079] <jakobjingleheimer>
Let's do iiiit ðŸ’ƒ

