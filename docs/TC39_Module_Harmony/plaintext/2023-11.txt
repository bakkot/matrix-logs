2023-11-01
[08:45:56.0206] <Kris Kowal>
Regarding the intermediate design family for transferrable modules, I am warming up to the intermediate position, where a ModuleSource may share private state with the host module loader, not just for CSP, but to determine import hook behavior. I have been mulling the implications for host virtualization and so far conclude that the behavior is trivial to emulate with a side table or private field. For a module loader that is serving as both a host and guest, the module-in-the-middle is sufficiently empowered that it can implement its own emulation of CSP or deny the host behavior. In short, I’m running out of reasons to dislike this framing and I’ll bring this up at the SES meeting today to socialize it.

[08:51:15.0999] <Kris Kowal>
It’s attractive that neither CSP nor import.meta.url need to be captured on the 262 side and can exist entirely in the HTML integration.

[08:53:27.0556] <nicolo-ribaudo>
Interesting, I wonder how that interacts with multi-instantiation of modules 

[08:53:42.0924] <nicolo-ribaudo>
I don't think I can join the SES meeting (this is the "half of the meetings switched timezone, the other half didn't" week), but I'll watch the recording 

[08:55:45.0068] <Kris Kowal>
Re multi-instantiation, I’m assuming the host module loader shares a module map keyed on url among all the instances it creates, so the host import hook is in a position to inspect the privately held url on the source and decide to reuse another instance.

[08:56:30.0391] <Kris Kowal>
That implies a return override, gross.

[08:58:46.0883] <Kris Kowal>
Might also imply that we need to thread return override down to the initializer hook, should we choose to pursue the revealing callback.

