2025-10-02
[09:58:10.0721] <nicolo-ribaudo>
TLA bug in Firefox (and I think WebKit too, but WebKit has multiple TLA bugs that it's difficult to tell why this is failing): https://github.com/nicolo-ribaudo/firefox-async-evaluation-bug/

[10:47:33.0388] <guybedford>
nice catch... yes a web platform test for monotonic evaluation counting seems like it would be beneficial

[11:28:43.0921] <dminor>
thanks for filing the bug :)

[11:29:45.0080] <nicolo-ribaudo>
Getting a minimal reproduction was fun!

[11:41:49.0498] <Chris de Almeida>
hmmm.... I am imagining potential security implications with this bug.... maybe needs an embargo?

[11:42:02.0893] <Chris de Almeida>
dminor ðŸ‘€


2025-10-09
[09:05:50.0101] <guybedford>
Seems we have a few things to discuss in module harmony but all require Nicolo who's on vacation, so cancelling the meeting for today due to lack of attendees. See you all next time.


2025-10-17
[15:05:14.0130] <guybedford>
Seem's there's finally a Chromium CL to support module network failures to not be cached - https://chromium-review.googlesource.com/c/chromium/src/+/7039725.

[15:11:30.0283] <kriskowal>
Wow. Programming is really hard.


2025-10-20
[16:38:38.0112] <Jacob Smith>
It's not particularly related to imports, but any chance i could put this on out agenda to get y'all's thoughts?

https://github.com/tc39/proposal-inspector/pull/2

There may be some changes between now and then (I just sent it over to Ruben to review).

[16:41:01.0460] <kriskowal>
Throw a description on it and Iâ€™ll socialize. Consider running it by #tc39-tg3-security:matrix.org. Would be a good venue if you can make a meeting. We can put it on the agenda.


2025-10-21
[00:25:33.0889] <Jacob Smith>
I see the security meeting is tomorrow, but i don't see a time.

[00:28:15.0863] <Jacob Smith>
Description: flesh out Inspector API and examples; includes return modes (true/false and 'deviation' metadata), and compare options (consider prototype, etc).

[00:29:20.0920] <nicolo-ribaudo>
19:00 to 20:00

[00:29:42.0245] <nicolo-ribaudo>
(and you can find the zoom link in the TC39 calendar)

[00:30:57.0604] <Jacob Smith>
Thanks!


2025-10-23
[03:31:31.0491] <Jacob Smith>
* https://github.com/JakobJingleheimer/proposal-comparisons/issues/5
â€¨Description: flesh out Comparisons API and examples; includes "Deviation" metadata), and compare options (consider prototype, etc).

[03:32:14.0123] <Jacob Smith>
* .

[03:32:22.0940] <Jacob Smith>
* https://github.com/JakobJingleheimer/proposal-comparisons/issues/5â€¨â€¨Description: flesh out Comparisons API and examples; includes "Deviation" metadata), and compare options (consider prototype, etc).

[03:32:47.0573] <Jacob Smith>
Will we be meeting today?

[03:33:43.0829] <Jacob Smith>
* Will we be meeting today? I have a bit of a potential conflict, so I'm wondering if I need to get it moved or if there's actually no conflict

[03:56:22.0333] <nicolo-ribaudo>
I'd like to meet

[08:44:19.0740] <kriskowal>
I should be ready on time. See you soon

[09:02:19.0317] <nicolo-ribaudo>
Meeting time!

[10:22:18.0443] <guybedford>
With regards to `(await import('./foo.js#a')) === (await import('./foo.js#b')))` - it turns out these are distinct URLs in the module registry after all. Can't believe I forgot about that one.

Will follow up now with regards to the import attributes and bundling questions.


2025-10-27
[15:32:06.0780] <styfle>
This is interesting https://jakearchibald.com/2025/importing-vs-fetching-json/

[15:35:54.0808] <kriskowal>
Itâ€™s interesting insofaras the designers of a thing donâ€™t always precog how the feature will be misused. Great that Jakeâ€™s getting ahead of that.

[15:37:39.0315] <kriskowal>
This is one of the ways that having an out-of-band mapping from import specifier to fully qualified URL is useful at deterring misuse. Using a fully qualified URL for an import is a smell, and ideally wouldnâ€™t even be possible.

[15:38:55.0819] <kriskowal>
And I mean that objectively, as most applications should at least be able to endure a bundling transformation when theyâ€™re sent to production, and cross-domain reliance is always going to be runtime fragility, even if the bundler allows exits to other sites.

[16:11:12.0667] <guybedford>
I've also been putting some thought to if bytes imports are useful in a Wasm import context, and I think they are - the interesting thing there is if they were hypothetically supported as passive data section imports of Wasm, passive segments do support being dropped after use in initialization to allow for GC. So in theory there could be an application of import bytes for Wasm that _is garbage collectable_ while being maximally useful due to static instantiation. Including this topic in the ESM Integration update at the Wasm CG this week, will share slides with this group after as well.

[16:14:43.0620] <guybedford>
(of course registry needs to be kept around, although immutable data could in theory be treated as lazy / evicted memory moved to say disk cache if that was optimized for)

[16:20:31.0662] <kriskowal>
Very interesting observation about import bytes being collectible. That might endure scrutiny. Assuming youâ€™ve got Finalization for the retaining Uint8Array and immutable ArrayBuffer, thereâ€™d be no observable loss if the data had to be refetched for a subsequent import.

[16:22:45.0123] <guybedford>
I wonder if there's a spec enabling way to say that each importer may get their own separate instance of the array buffer object, provided the immutable contents remain the same, instead of treating it as a shared object. In theory an `arrayBuffer.transfer()` operation could then provide GC support too for JS.

[16:23:02.0624] <guybedford>
Wonder if worth considering if memory questions come up again?

[16:24:37.0592] <bakkot>
even with such feature, transfer would only work if these weren't immutable

