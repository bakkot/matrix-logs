2020-09-01
[04:18:07.0000] <littledan>
yeah, MDN docs for Intl changes have been running a bit behind... this is one of the things that I think we could improve on if we had Ecma fund a technical writer for TC39 to document everything we do on MDN (especially important with the Mozilla layoffs)

[08:21:12.0000] <shu>
repeating the call for a facilitator for an incubator call next week: https://github.com/tc39/Reflector/issues/318, i unfortunately have conflicts for all morning slots

[10:51:46.0000] <bradleymeck>
@shu I can act as a facilitator Mon or Thurs, but not Tues or Weds

[10:53:34.0000] <shu>
(Mon is Labor Day, so i'm assuming that won't work for US-based delegates who'd like to come)

[10:54:10.0000] <shu>
Thurs sgtm, mind updating those prefs on the issue, and i'll make a Doodle to see if it works?

[10:54:50.0000] <bradleymeck>
k

[10:56:57.0000] <shu>
tyvm for volunteering

[16:43:06.0000] <leobalter>
shu I was off last week due to the wildfires and smoke. I've seen bradleymeck has been proactive here so I wonder where I can be of a better support


2020-09-03
[14:16:44.0000] <ljharb>
any github employees around? i'd love to talk to someone about https://twitter.com/ljharb/status/1301629885190868992

[14:50:44.0000] <littledan>
??? that's absurd, really sorry that happened to you

[14:50:51.0000] <littledan>
MylesBorins: ^

[14:55:12.0000] <MylesBorins>
already pined some people

[14:59:05.0000] <ljharb>
thanks!

[14:59:25.0000] <ljharb>
as long as the repo doesn't get summarily deleted it'll be fine, but yeah it's pretty absurd

[16:11:35.0000] <rkirsling>
is it kosher to create an agenda slot for a normative PR before I have the PR opened?

[16:12:54.0000] <ljharb>
i guess it's fine, but it's not like there's hot competition for normative PR slots :-p

[16:13:49.0000] <rkirsling>
touch√© :p I'll be patient


2020-09-04
[12:29:24.0000] <littledan>
rkirsling: IMO it's good to declare things on the agenda as soon as possible, and fill in the details as we go

[12:29:34.0000] <littledan>
it just gives more information to everyone

[12:29:48.0000] <rkirsling>
ah cool

[12:30:01.0000] <rkirsling>
that approach works for me too :)


2020-09-10
[16:02:36.0000] <shu>
does publishing github pages take a while? if i see a "Your site is published" message, should it appear or it might still need to propagate?

[16:08:23.0000] <ljharb>
shu: i've rarely seen it take more than a minute or three

[16:09:29.0000] <shu>
hmm

[16:09:33.0000] <shu>
wonder what i'm doing wrong

[16:09:57.0000] <ljharb>
link?

[16:10:42.0000] <shu>
ah there it goes, weird

[16:10:51.0000] <shu>
i pushed a whitespace commit to docs/, that triggered it

[16:11:41.0000] <shu>
this was for https://tc39.es/proposal-resizablearraybuffer/, what i did was i committed docs/ *first*, then turn on pages

[16:11:55.0000] <shu>
it said it published but nothing showed up until i made a new commit that touched docs/index.html

[16:14:42.0000] <ljharb>
ah right

[16:15:05.0000] <ljharb>
i'd expect it to work without a trigger but github might have a bug there

[16:56:50.0000] <shu>
oh, next meeting starts *sunday night* PT

[16:56:57.0000] <shu>
wonderful

[16:57:26.0000] <rkirsling>
yup

[16:57:46.0000] <rkirsling>
but other than the shifted day, I'm stoked about the time window

[16:58:00.0000] <rkirsling>
so much easier to focus evening than morning

[16:59:11.0000] <shu>
speak for yourself! i've been sleeping at 8pm

[16:59:35.0000] <rkirsling>
I am! :P

[16:59:38.0000] <rkirsling>
but wow


2020-09-11
[17:00:12.0000] <rkirsling>
8pm would be earlier than my "I have a migraine and _need_ to go to bed" bedtime

[17:06:54.0000] <rkirsling>
2~10am is sort of my typical COVID sleeping window

[06:28:58.0000] <littledan>
huh, much shorter agenda this meeting

[06:29:09.0000] <littledan>
should we plan a breakout session?

[09:38:08.0000] <leobalter>
littledan: I'm actually adding a topic I could extend in case to fit questions, if any

[09:38:10.0000] <leobalter>
https://github.com/tc39/agendas/pull/863

[09:39:21.0000] <leobalter>
I'm always under the impression Test262 is 1000x more interesting to me than it is for other delegates and I try to not  abuse the time talking about it.

[10:00:28.0000] <ljharb>
um, when did oracle take over and start tweeting as @javascript?

[10:09:00.0000] <Bakkot>
well, it is their trademark

[10:22:26.0000] <shu>
we cannot have justice, that's why we have the law

[11:05:42.0000] <rkirsling>
ljharb: geez, that is at best incredibly bad form

[11:06:03.0000] <rkirsling>
they even have ecma-international.org as their URL

[11:10:54.0000] <ljharb>
that was set before they took it over

[11:11:36.0000] <ljharb>
it's super bad form, they're shilling oracle products :-/

[11:33:12.0000] <shu>
bradleymeck: how did the incubator call go?

[13:56:21.0000] <bradleymeck>
shu: terribly, had a kid emergency and couldn't attend last minute

[13:56:51.0000] <shu>
oh no, sorry to hear that

[14:18:41.0000] <Bakkot>
meeting went reasonably well though, I think; michael and I tried to facilitate

[14:21:16.0000] <shu>
ah, thank you


2020-09-12
[23:07:47.0000] <ljharb>
anyone have thoughts on expanding "forbidden extensions" to forbid implementations from adding additional arguments to builtin methods? (modulo the reserved ones in locale methods, for example)

[05:09:32.0000] <devsnek>
ljharb: is that re firefox's additional error arguments?

[07:23:07.0000] <ljharb>
in this case it‚Äôs re rhino throwing on passing 3 args to string replace

[07:23:30.0000] <ljharb>
but in general, any allowed extra args will conflict with us being able to add our own in the future


2020-09-13
[13:13:43.0000] <ljharb>
i can't see which chair blocked the spam user on ecma262, but by blocking them we can't edit any of their reviews, including deleting the image they uploaded ( https://github.com/tc39/ecma262/pull/2160#pullrequestreview-487273109 ) . can someone take care of (or coordinate) that unblock/delete/reblock with me?


2020-09-14
[09:18:00.0000] <leobalter>
littledan: something tells me 10m will not gonna be enough for "Move outreach groups to the TC39 org, like incubator calls" in the agenda

[09:20:07.0000] <leobalter>
I understand it should be ideally discussed in 5 minutes, but something tells me delegates will have tons of questions about this during the meeting, unfortunately not on a thread.

[09:37:32.0000] <littledan>
I'll start a reflector thread so people can register concerns beforehand. Ultimately, I really don't want to take much committee time on this. I will drop it if it is too controversial

[09:37:44.0000] <littledan>
Thanks for mentioning this

[09:55:44.0000] <leobalter>
I hope the reflector thread solves it


2020-09-17
[05:52:13.0000] <littledan>
haxjs: https://github.com/hax/proposal-extensions is 404 for me. is this intentional?

[06:00:19.0000] <devsnek>
^ you might be blocked from advancing because you haven't provided any materials before the deadline


2020-09-20
[06:07:16.0000] <devsnek>
to double check, this plenary is in the evening for those of us in the US right?

[12:02:29.0000] <rkirsling>
yeppers

[12:30:10.0000] <Bakkot>
in... 5 and a half hours

[16:49:29.0000] <leobalter>
I'm so not ready to work from home 5 hours off a Sunday night


2020-09-21
[17:19:48.0000] <rkirsling>
the most hilarious thing

[17:19:54.0000] <rkirsling>
is that it is a national holiday in Japan

[17:20:10.0000] <rkirsling>
I'm not sure how we didn't notice this...lol >_<

[17:21:11.0000] <leobalter>
I underestimated myself working on a Sunday night, after a weekend full of parenting duties.

[17:29:11.0000] <rkirsling>
yeah, today is Êï¨ËÄÅ„ÅÆÊó• (Respect for the Aged Day) and tomorrow is ÁßãÂàÜ„ÅÆÊó• (Autumnal Equinox Day)

[17:30:15.0000] <rkirsling>
so my Japanese colleagues are all off...oops

[17:37:31.0000] <ryzokuken>
Guten Morgen, fellow delegates.

[17:38:23.0000] <ryzokuken>
leobalter: early Monday morning here, and I'd be _so_ much happier if it were Sunday evening lol

[17:38:44.0000] <ryzokuken>
5 AM on monday morning is the worst, I wouldn't wish it on my worst enemies :D

[17:39:10.0000] <leobalter>
the last GA meeting started at 4AM in my time zone :)

[17:39:20.0000] <leobalter>
it was me held by a cup of coffee

[17:39:34.0000] <ryzokuken>
leobalter: talking of coffee... :)

[17:39:48.0000] <rickbutton>
yeah time to make a 8:40PM cup of coffee

[17:39:57.0000] <ryzokuken>
lol

[17:43:10.0000] <ryzokuken>
are we using hubs again this time?

[17:43:13.0000] <ryzokuken>
anyone on it yet?

[17:52:57.0000] <rkirsling>
tomoki_imai: üëã

[17:53:04.0000] <devsnek>
of course my laptop picks this time for the gpu drivers to break

[17:53:15.0000] <rickbutton>
oh no

[17:55:33.0000] <littledan>
FWIW from Android, it only let me set my name once, and when I disconnected and reconnected, it remembered my name

[17:55:41.0000] <littledan>
so that's why I'm set to "Daniel", apologies

[17:57:53.0000] <devsnek>
am i supposed to do something here https://gc.gy/68354869.png

[18:12:30.0000] <devsnek>
can someone update the MOTD

[18:14:04.0000] <devsnek>
lol

[18:14:07.0000] <ljharb>
jinx

[18:14:26.0000] <ljharb>
i guess technically you beat me by 2s :-(

[18:14:32.0000] <devsnek>
oh wait i can set the motd

[18:14:35.0000] <devsnek>
neat

[18:21:35.0000] <michaelficarra>
omg nothing works :-(

[18:21:38.0000] <michaelficarra>
teams is so bad

[18:22:01.0000] <akirose>
I HAD SO FEW COMPLAINTS ABOUT MICROSOFT COLLABORATION PRODUCTS UNTIL TWO WEEKS AGO AND NOW I ONLY TYPE IN CAPS

[18:22:01.0000] <rickbutton>
we should just standardize on a single tool for meetings

[18:22:26.0000] <ryzokuken>
is it just me or do we see Aki's slides?

[18:22:26.0000] <shu>
what have we used so far? zoom and teams?

[18:23:01.0000] <ryzokuken>
apparently we could just take control

[18:23:09.0000] <rkirsling>
yeah. zoom worked well except for the privacy worries :-/

[18:23:14.0000] <rickbutton>
google meet?

[18:23:25.0000] <shu>
i don't think we actually used meet

[18:23:32.0000] <ryzokuken>
jitsi üôà

[18:23:46.0000] <devsnek>
discord :D

[18:23:51.0000] <rkirsling>
meet would seem fine; I just never had a huge meeting in it

[18:23:55.0000] <shu>
don't even know what that is

[18:23:57.0000] <devsnek>
imagine, all our chat and video in one place

[18:24:02.0000] <devsnek>
jitsi == oss zoom

[18:24:52.0000] <rbuckton>
MylesBorins: Its possible to upload a PowerPoint to Teams for a meeting which lets anyone move around within the slides without affecting everyone else, and I think that's what akirose was trying earlier. For some reason it took over sharing from Istvan.

[18:25:04.0000] <MylesBorins>
super strange

[18:25:05.0000] <MylesBorins>
¬Ø\_(„ÉÑ)_/¬Ø

[18:25:31.0000] <akirose>
yeah it's what i was doing earlier and long long after i had given up and no longer had the sharing view, it apparently came back for everyone but me

[18:25:34.0000] <rickbutton>
that feature was broken last time we used teams too

[18:25:38.0000] <ljharb>
rbuckton: unfortunately with that feature, it seems like it's really easy to lose "the presenter advances the slides" sync

[18:25:52.0000] <ljharb>
rbuckton: iow i've found i have to constantly manually advance a slide and hit "to presenter" to sync it up

[18:26:01.0000] <shu>
there's a chrome extension internally that lets meeting participants control Slides sharing, and it is always chaos

[18:26:07.0000] <shu>
a nice idea in theory

[18:27:43.0000] <Bakkot>
zoom is the only one of these which seems to consistently actually work

[18:27:48.0000] <Bakkot>
petition to only use zoom in the future

[18:28:03.0000] <Bakkot>
F5 has an account, we might be able to "host"

[18:28:13.0000] <michaelficarra>
seconded

[18:28:15.0000] <rkirsling>
I would support that

[18:28:15.0000] <devsnek>
petition to try discord once first

[18:28:17.0000] <akirose>
banned from paypal computers i think

[18:28:31.0000] <rkirsling>
orz

[18:30:42.0000] <shu>
Bakkot: googlers are still discouraged from using the Zoom desktop client; requires an exception

[18:30:54.0000] <shu>
i've never used the web version, does that also work well

[18:31:19.0000] <devsnek>
i use the web version for things that require it, seems to be functional

[18:31:52.0000] <Bakkot>
shu is "I need it to participate in the standards body of which I am editor, which uses it because it is the only functional video client" a valid exception

[18:32:20.0000] <shu>
Bakkot: they would take exception to the second phrase but it's certainly a valid exception

[18:32:31.0000] <shu>
but i am not the only googler, just saying it's not zero-friction

[18:33:39.0000] <rickbutton>
Bakkot or ljharb can you give me a slides link for the notes when you have a sec

[18:34:01.0000] <Bakkot>
yeah, just seems like there's a bunch of friction with every client, except that the end result with Zoomo is that you have a functional meeting

[18:34:25.0000] <shu>
we could give meet a try, but i

[18:34:27.0000] <shu>
err

[18:34:35.0000] <shu>
but i've also never had a meeting of this size on Meet

[18:34:51.0000] <rickbutton>
I've had meetings with 100+ people in a room and it works

[18:35:24.0000] <shu>
no no, #2086 is a small PR!

[18:36:20.0000] <bterlson>
Bakkot: can you say how the meeting is not working?

[18:36:28.0000] <bterlson>
how can I help

[18:37:01.0000] <ljharb>
rickbutton: https://j.mp/262editor202009 - i'll add them to the agenda shortly

[18:37:10.0000] <rickbutton>
thx :)

[18:38:07.0000] <Bakkot>
bterlson I'm mostly referring to the thing where Aki struggled to present, but I'm also salty about a.) when presenting I can't see anyone's faces and b.) when not presenting I can only see at most 9 people

[18:38:46.0000] <akirose>
how was i meant to present in presenter view? I HAD NOTES

[18:39:31.0000] <bterlson>
Bakkot: ok got it

[18:46:05.0000] <ljharb>
bterlson: hm, i didn't see anything on TCQ

[18:46:20.0000] <bterlson>
https://tcq.app/meeting/BSXq ?

[18:46:34.0000] <bterlson>
oh whoops

[18:46:35.0000] <ljharb>
ahhh the draft schedule has KfmX

[18:47:00.0000] <devsnek>
yeah that's last month

[18:47:02.0000] <bterlson>
will tell aki to update

[18:47:03.0000] <rkirsling>
is it a problem that that just got exposed?

[18:47:06.0000] <ljharb>
kk ty

[18:47:49.0000] <bterlson>
not really

[18:48:14.0000] <devsnek>
some random person could spam us with POO but that is unlikely

[18:48:41.0000] <bterlson>
if we had sensitive issues on the agenda it would be a concern

[18:48:43.0000] <rickbutton>
needs a github login so isn't anonymous

[18:48:47.0000] <littledan>
I'm very happy about this SDO restructuring

[18:48:56.0000] <littledan>
we're switching from object oriented to pattern matching!

[18:49:06.0000] <littledan>
it's just so hard to read the current spec layout

[18:49:08.0000] <rkirsling>
ooh

[18:49:16.0000] <devsnek>
pattern matching O.o

[18:49:19.0000] <rkirsling>
I hadn't followed that work

[18:49:42.0000] <devsnek>
which one is that again

[18:50:21.0000] <Bakkot>
devsnek https://github.com/tc39/ecma262/issues/1950

[18:50:25.0000] <Bakkot>
assuming I understand the question

[18:50:48.0000] <devsnek>
oh i thought there was a pr

[18:50:56.0000] <devsnek>
curious what "pattern matching" means in this context

[18:50:58.0000] <rkirsling>
lol I love devsnek's `yes yes so much yes`

[18:51:02.0000] <Bakkot>
no, not yet

[18:51:16.0000] <devsnek>
rkirsling: i have spent too much of my life jumping around the spec looking for early errors

[18:51:18.0000] <Bakkot>
no point in making the PR until we're ready, since it will merge-conflict with everything

[18:52:23.0000] <rkirsling>
`this style ... was chosen ... on the basis that it was written in Word and Ecma liked Word`

[18:52:24.0000] <rkirsling>
oof

[18:52:30.0000] <Bakkot>
"pattern matching" means that it is defined like `SDO = match (node.type){ Expression => whatever, Statement => whatever}` instead of being defined like `Expression.SDO = whatever [...] Statement.SDO = whatever`

[18:52:35.0000] <Bakkot>
if that makes sense

[18:52:39.0000] <littledan>
Was it Ross rkirsling ?

[18:52:43.0000] <littledan>
who did Intl.Segmenter

[18:53:03.0000] <rkirsling>
littledan: I reviewed the patch but Yusuke implemented it

[18:56:07.0000] <michaelficarra>
Yusuke Suzuki is amazing!

[18:56:11.0000] <Bakkot>
+1

[18:56:37.0000] <rkirsling>
he literally is

[19:01:51.0000] <shu>
that's interesting. if interop is not an aspiration of the standard, what is the value of the standard? similar general shapes?

[19:02:39.0000] <devsnek>
i had a similar line of questioning the other day on twitter

[19:02:50.0000] <devsnek>
in that case annex b but same idea

[19:03:13.0000] <shu>
devsnek: what's the relation to annex b?

[19:03:58.0000] <devsnek>
people thinking annex b == don't need to impl and then learning some of it is ecosystem reality

[19:04:14.0000] <rkirsling>
in ambulances?! üò±

[19:04:16.0000] <devsnek>
or i guess, people saying it should remain annex b even though it is ecosystem reality

[19:04:27.0000] <shu>
devsnek: i don't think any implementers of web engines i know actually think that

[19:04:46.0000] <devsnek>
well people who make not-web-engines tend to dislike annex b

[19:04:46.0000] <shu>
i suppose XS had to learn the hard way

[19:04:57.0000] <devsnek>
but they still have to implement substr

[19:05:21.0000] <wsdferdksl>
Not all

[19:05:46.0000] <wsdferdksl>
C++ uses ECMAScript regular expressions. Merging in annex b would change how C++ regexps work.

[19:05:58.0000] <devsnek>
yeah there's definitely stuff that needs a closer look

[19:06:13.0000] <rkirsling>
holy crap

[19:06:18.0000] <shu>
devsnek: but annex b is still very much all about interop, the problem with annex b is that the subset of implementations it's intended to apply to doesn't match up with reality

[19:06:21.0000] <rkirsling>
I didn't know that particular detail

[19:07:40.0000] <Bakkot>
wsdferdksl do you know offhand if it specifies a particular version?

[19:07:51.0000] <Bakkot>
I don't have my copy of the C++ standard on hand

[19:08:07.0000] <Bakkot>
a particular version of ECMA-262, that is

[19:08:38.0000] <wsdferdksl>
It does. I'm not sure how often they update it.

[19:09:01.0000] <wsdferdksl>
It's kinda hard to get a hold of the official C++ standard

[19:09:19.0000] <devsnek>
reading through the latex on the draft repo

[19:09:23.0000] <devsnek>
it appears to be the third edition

[19:09:32.0000] <Bakkot>
looks like it's on ES3, yeah: https://github.com/cplusplus/draft/blob/78534e3883c9f296ecec6a26c51e55f6cb1bb395/source/intro.tex#L42

[19:10:47.0000] <shu>
oh boy

[19:12:07.0000] <rkirsling>
wow, I can't imagine dealing with test262 before jsvu / eshost

[19:12:14.0000] <rkirsling>
I'm glad to have missed that era

[19:20:12.0000] <rickbutton>
leobalter: plz link slides link when you have a chance

[19:20:57.0000] <leobalter>
rickbutton: I'm not sure if I want to share the slides. I'll let you know.

[19:21:11.0000] <rickbutton>
ah yes of course

[19:21:22.0000] <rickbutton>
if you decide that you want to just drop them in the notes

[19:23:10.0000] <michaelficarra>
JSC date stuff is suuuuuper broken, take their result with a grain of salt

[19:23:38.0000] <rkirsling>
üò¢

[19:24:39.0000] <michaelficarra>
yeah JSC seems to implement everything in dates with signed 32-bit integers

[19:24:45.0000] <michaelficarra>
and that leaks all over the place

[19:38:52.0000] <littledan>
+100 on separating "normative optional" from "deprecated and discouraged"

[19:39:19.0000] <ljharb>
same

[19:39:47.0000] <littledan>
I would be fine with adding more deprecated things over time, whereas I'm very skeptical of adding more optional things

[19:40:09.0000] <rkirsling>
yeah I think one way or another we should increase clarity around that delineation

[19:43:19.0000] <michaelficarra>
when talking about __proto__ can we be clear about when we're talking about the syntax and when we're talking about the Object.prototype accessor

[19:43:32.0000] <Bakkot>
for clarity, what exactly are we asking for here? making the __proto__ getter/setter in the main spec but marked as normative optional? making __proto__ syntax normative non-optional?

[19:43:37.0000] <Bakkot>
yeah same question as michaelficarra

[19:44:02.0000] <bradleymeck>
i believe this doesn't change syntax

[19:44:11.0000] <ljharb>
accesor

[19:44:21.0000] <michaelficarra>
when people are making statements, I don't know which they're talking about

[19:44:23.0000] <michaelficarra>
if not both

[19:46:15.0000] <Bakkot>
fwiw I want `__proto__` syntax not to be marked as icky

[19:46:30.0000] <Bakkot>
it's the only way to do the thing it does

[19:46:33.0000] <michaelficarra>
same, __proto__ syntax is not bad

[19:47:13.0000] <michaelficarra>
that's not to say it couldn't have been better with its own syntactic form, but it's not bad

[19:48:15.0000] <shu>
it doesn't seem like to me we have consensus on this current proposal because there seems to be desire to have the discouragement note, which this PR doesn't have, and moreover, we don't have consensus that all things in the PR should be discouraged

[19:48:41.0000] <Bakkot>
yeah also we have only briefly mentioned exactly which things are included and in exactly which forms

[19:48:58.0000] <Bakkot>
I want to ask for consensus for the smaller question of, make the `__proto__` syntax required, and not marked as icky

[19:49:15.0000] <shu>
yes, there needs to be a condensed list of the asks

[19:49:28.0000] <michaelficarra>
I thought Gus's description was clear FWIW

[19:49:44.0000] <ljharb>
Bakkot: fwiw i don't personally consider the syntax icky (just aesthetically displeasing, but that's not sufficient imo)

[19:50:05.0000] <Bakkot>
michaelficarra the problem is that this is framed as moving "__proto__" but it covers a bunch of other stuff

[19:50:34.0000] <michaelficarra>
move __define{G,S}etter__ out of Annex B and make it mandatory; move __proto__ accessor out of Annex B and make it optional; move __proto__ syntax out of Annex B and make it mandatory

[19:50:48.0000] <michaelficarra>
am I missing anything? that's all Gus listed

[19:51:18.0000] <ljharb>
michaelficarra: ftr personally, i'd like the define's marked icky, and perhaps the proto accessor i guess; otherwise no additional asks from me.

[19:51:42.0000] <Bakkot>
michaelficarra also `__lookupGetter__`

[19:52:12.0000] <ljharb>
(ah yes ty, i want all the non-proto dunders marked icky)

[19:52:33.0000] <michaelficarra>
ljharb: okay so you're just asking that they are marked as icky before being put in the main spec

[19:52:42.0000] <ljharb>
michaelficarra: before/while, yes

[19:58:55.0000] <littledan>
I do prefer things to be required

[19:58:58.0000] <littledan>
was having troulbe unmuting

[20:00:01.0000] <devsnek>
littledan: do you object to it being optional

[20:00:08.0000] <devsnek>
oh nvm

[20:01:42.0000] <leobalter>
FWIW I support littledan's comment

[20:02:12.0000] <ljharb>
it's worth noting that inlining it in this way makes it easier to remove optionality in a future PR

[20:02:16.0000] <littledan>
I'm definitely happy with devsnek 's work overall. Inline normative optional in the main spec!!!

[20:02:26.0000] <haxjs>
What "icky" means?

[20:02:50.0000] <leobalter>
haxjs: discouraged / not recommended, I guess

[20:02:52.0000] <littledan>
btw bterlson earlier noted possible accessibility issues in the normative optional CSS I wrote

[20:03:16.0000] <littledan>
I think it'd be good for the editors to talk to a skilled a11y person to figure this out; I don't have the expertise myself :)

[20:03:17.0000] <Bakkot>
haxjs: it means roughly "discouraged"

[20:03:18.0000] <littledan>
haxjs: https://www.merriam-webster.com/dictionary/icky

[20:03:18.0000] <Bakkot>
yeah

[20:03:18.0000] <akirose>
haxjs: it's a slang word little kids use to describe something they don't like, especially messy things

[20:03:26.0000] <littledan>
": offensive to the senses or sensibilities : distasteful "

[20:03:28.0000] <Bakkot>
littledan we've actually just come across this ourselves!

[20:03:32.0000] <littledan>
I feel like this definition makes a lot of sense

[20:03:34.0000] <Bakkot>
was talking to michaelficarra about fixing it

[20:03:36.0000] <haxjs>
So let's use "discouraged", not "icky" which is a slang.

[20:03:38.0000] <Bakkot>
(the accessibility thing)

[20:03:57.0000] <littledan>
haxjs: I believe the term "icky" has been used in this conversation as a placeholder, for something that we would definitely not really use

[20:04:00.0000] <akirose>
++

[20:04:01.0000] <rkirsling>
^

[20:04:07.0000] <littledan>
since it's "obviously" too informal

[20:04:12.0000] <haxjs>
I would like to say "icky" is "icky" :-)

[20:04:16.0000] <rkirsling>
I think it's like ËÆ®Âéå

[20:06:59.0000] <shu>
ljharb: what the current annex b wording is missing the thing i'd like to add: *even if* a thing is deprecated, i want to call out that that doesn't imply discouragement in engines if that engine's goal is interop with the existing ecosystem

[20:07:12.0000] <shu>
that nuance is something we don't have with the current wording

[20:07:18.0000] <ljharb>
that's totally fair

[20:07:28.0000] <shu>
and, engines whose goals are greenfield ecosystems are rare, like moddable

[20:07:28.0000] <ljharb>
ie separating out "discouraged to implement" vs "discouraged to use"

[20:07:43.0000] <shu>
not quite, it's discouraged to implement given an engine's goals

[20:07:53.0000] <ljharb>
gotcha, agreed

[20:07:54.0000] <shu>
web engines sure as hell won't be discouraged to implement

[20:08:02.0000] <shu>
and maybe, hermes too, even if it's not web

[20:09:50.0000] <haxjs>
It's not easy for outside (especially the non-native speakers) to understand the slangs. for example i still remember first time i see "sloppy" about ten years ago, i didn't know what that mean, and it cost me long time to figure out it  just means "non-strict" :-)

[20:11:27.0000] <rkirsling>
sloppy is an interesting one, because when I started with TC39 I always wanted to call it "loose" mode

[20:11:42.0000] <rkirsling>
but our use of "icky" here was the same idea as our use of "smooth"

[20:11:45.0000] <rkirsling>
*smoosh

[20:11:46.0000] <avp>
shu: i'm not sure i understand your point, but as a reference, Hermes deliberately avoids implementing plenty of stuff in Annex B because we don't need web compatibility - we've had to add parts of it due to feature requests, but mostly it's been ok for us

[20:12:37.0000] <devsnek>
avp: i think our point is the "we've had to add parts of it due to feature requests" part

[20:13:40.0000] <rkirsling>
i.e. it was intended to be "obviously non-technical" in order to postpone bikeshedding about names/terms. I can see how that obviousness may be assuming a certain level of English intuition ü§î but I'm also not sure how to fix that...

[20:13:46.0000] <shu>
avp: ah cool, okay. my point was that the "discouragement" isn't binary for implementers. we do a disservice to implementer readers of the spec if we don't add nuanced notes like "if you're an implementation that cares about maximal interop, you are actually encouraged to implement this optional feature, even if it's discouraged from being used"

[20:14:06.0000] <shu>
avp: and i'd like the editorial leeway to do that as editor, without seeking consensus for it

[20:14:27.0000] <devsnek>
does hermes target past es5 now

[20:15:27.0000] <avp>
devsnek: we're actively working on it - we've got a significant number of newer features implemented, but are still working our way through block scoping (variable resolution requires significant design changes in the compiler)

[20:16:39.0000] <avp>
but we do support generators, all the JS library functions up to ES2020, as well as some minor features like `?.` and `??`

[20:17:08.0000] <shu>
avp: oh boy, the amount of work each browser engine had to do to support block scoping...

[20:17:32.0000] <shu>
especially parameter scopes, though thankfully that got simplified a few years after the fact...

[20:18:37.0000] <rkirsling>
even now JSC has outstanding work to do to ensure that TDZ checks don't add up to a significant perf hit

[20:18:42.0000] <avp>
shu: we've had a fun time reasoning about function declaration hoisting in the presence of `let`/`const` as well as `catch` vars

[20:18:56.0000] <devsnek>
block scope was pretty easy in engine262 :^)

[20:20:18.0000] <shu>
avp: reasoning to elide TDZ checks?

[20:20:23.0000] <shu>
or correctness?

[20:20:53.0000] <Bakkot>
b.3.3, lol

[20:21:01.0000] <Bakkot>
the worst part

[20:21:07.0000] <devsnek>
proposal to move that to annex z

[20:21:42.0000] <Bakkot>
https://dev.to/rkirsling/tales-from-ecma-s-crypt-annex-b-3-3-56go

[20:21:44.0000] <avp>
yep that's the section

[20:22:15.0000] <Bakkot>
there's still outstanding issues with it too

[20:22:30.0000] <Bakkot>
https://github.com/tc39/ecma262/issues/913

[20:22:48.0000] <devsnek>
scoping gave me some grief in the parser

[20:23:07.0000] <devsnek>
i wish all of js was like modules

[20:23:23.0000] <shu>
oh you're implementing b.3.3? why, if web compat isn't needed?

[20:23:29.0000] <avp>
comparing with other engines yielded behavior that we just couldn't reconcile with our mental model of the spec for a while - eventually we kind of understood it but we're still working on implementing all the variable resolution stuff in a way that works with our "lazy mode" compilation and our debugger information

[20:23:35.0000] <shu>
i mean like, out of all things in annex b to not implement, b.3.3 is it

[20:23:58.0000] <rkirsling>
^ big true

[20:24:49.0000] <devsnek>
html comments

[20:25:29.0000] <rkirsling>
^ medium true

[20:27:19.0000] <avp>
that seemed like the sort of section we might really want to implement because lots of people using our code run third party npm modules which we want to try and be compatible with

[20:29:40.0000] <avp>
plus, we really do want to support as much of the spec as we can without incurring significant size and/or perf costs, it's just that for chunks of Annex B it seems that the tradeoff would be bad (hence no `String.prototype.big`, etc)

[20:30:20.0000] <shu>
hm, getting mixed signals about the web compat part

[20:32:54.0000] <avp>
yeah i'll clarify - there's certain feature requests that fall into "compat" which come from Annex B that we were explicitly asked to implement by users - `String.prototype.substr` comes to mind because it was actually used in code running on Hermes. HTML stuff like `String.prototype.big` was not because we're intended to be used in React Native which doesn't use traditional HTML.

[20:33:21.0000] <devsnek>
substr ‚ù§Ô∏è

[20:34:10.0000] <shu>
avp: ah, okay, and npm usage of things like `String#big` for packages react native codebases pull in is close to nil, i guess?

[20:34:30.0000] <jridgewell>
I don't understand why `substr` is Annex B.

[20:34:41.0000] <avp>
shu: correct

[20:34:47.0000] <jridgewell>
It's genuinely useful.

[20:35:02.0000] <jridgewell>
Put `substring` in Annex B instead, it's basicall `slice`.

[20:35:34.0000] <devsnek>
i'm guilty of using substr

[20:40:06.0000] <ljharb>
jridgewell: how is it useful to you?

[20:40:33.0000] <ljharb>
(substring is indeed terrible, it sorts its arguments which is bizarre)

[20:40:46.0000] <Bakkot>
sometimes the thing you have on hand is an start index and a length, not a start index and an end index

[20:41:47.0000] <devsnek>
we need `trimNull([startIndex])` that reads to the first occurrence of \0 :P

[20:48:23.0000] <Bakkot>
I don't know that I've ever had to find a null byte in a JS string

[20:48:34.0000] <Bakkot>
I guess for encoding to bytes sometimes

[20:51:40.0000] <jridgewell>
Using `length` as the second param is useful

[20:51:59.0000] <jridgewell>
I don't always know the end index, or want to add the current index to my already known length.

[21:14:26.0000] <haxjs>
jridgewell `substring` is not `slice`,  substring may swap the index if i remember correctly

[21:15:04.0000] <jridgewell>
Hence the "basically"

[21:15:15.0000] <jridgewell>
The common features are the same

[21:15:22.0000] <jridgewell>
But there are edge cases that are different

[21:15:40.0000] <ljharb>
haxjs: substring sorts its arguments

[21:15:44.0000] <haxjs>
The problem is `substring` may be also used as freqently as `substr` ... I'm not sure

[21:16:25.0000] <ljharb>
(so `s.substring(a, b)` is identical to `s.substring(b, a)`)

[21:16:57.0000] <haxjs>
I really curious why these methods come from. It seems ES1 only have substring?

[21:17:11.0000] <devsnek>
i still feel like "i'm building a whole new separate ecosystem" is "i don't need 100% compat" not "the spec needs to cater to my case"

[21:18:06.0000] <Bakkot>
haxjs usually it's that either Netscape or Internet Explorer shipped it without worrying about whether it was in the standard

[21:20:15.0000] <haxjs>
consider there are some complains about codeunit vs codepoint, it seems "string.p.slice" would also "icky" for those people  :-)

[21:20:52.0000] <Bakkot>
yup it's bad

[21:21:13.0000] <Bakkot>
shoulda been sliceCodeUnits or something

[21:21:23.0000] <ljharb>
slice is great. strings defaulting to code units is icky.

[21:22:03.0000] <haxjs>
do we have chance to introduce any encoding-neutral string ?

[21:22:14.0000] <devsnek>
i'm regretting being amenable on define/lookup getter/setter being optional now

[21:22:43.0000] <haxjs>
why regreting that?

[21:22:45.0000] <devsnek>
haxjs: you can already put whatever bytes you want into js strings

[21:23:33.0000] <shu>
yay, awesome, thanks rkirsling

[21:23:47.0000] <rkirsling>
thanks for the backup :D

[21:23:52.0000] <rkirsling>
(Bakkot too)

[21:25:09.0000] <haxjs>
devsnek: I mean dev need to remember codeunit/codepoint when they use string api. and when they use it, it also make the engine have to convert a utf8 encoding to utf16 encoding

[21:29:40.0000] <Bakkot>
engines don't always use utf8 internally

[21:29:42.0000] <michaelficarra>
I am very happy to see that this proposal restricts the exports to valid Unicode

[21:29:43.0000] <Bakkot>
v8 uses both

[21:29:48.0000] <Bakkot>
(IIRC)

[21:29:59.0000] <devsnek>
v8 has one and two byte representations

[21:30:13.0000] <devsnek>
they are not called utf8 and utf16 because they don't have to be valid unicode

[21:31:11.0000] <shu>
i don't think anybody uses utf8 internally

[21:31:30.0000] <shu>
but everybody does have a 1byte vs 2byte distinction

[21:31:40.0000] <michaelficarra>
FYI you can uncheck "show comments" in the upper right hamburger menu if you're trying to show off a diff

[21:31:41.0000] <devsnek>
saves a lot of memory

[21:32:34.0000] <mmarchini>
Tcq agenda item is still on the previous topic

[21:32:45.0000] <mmarchini>
(I think)

[21:32:51.0000] <rickbutton>
^ cc robpalme

[21:34:03.0000] <haxjs>
shu: yeah, 1byte vs 2byte,  because if u want efficiency for current api, u can only have such presentation. what i ask is whether it's possible to add a encoding-neutal apis so allow engine use real utf8/utf16 which save the encoding/decoding for io.

[21:34:36.0000] <littledan>
oh I forgot to mention, on the detached arraybuffer semantics PR: if this doesn't already match shipping web reality, can I ask that we have 1-2 implementations to prove it out, and test262 tests, before landing?

[21:34:48.0000] <robpalme>
thanks rick - fixed

[21:34:53.0000] <Bakkot>
wait is this actually true?

[21:34:57.0000] <michaelficarra>
I don't think so

[21:35:00.0000] <Bakkot>
is BOM not legal at the start of a unicode-16 string?

[21:35:08.0000] <shu>
littledan: the PR matches SM and V8 behavior

[21:35:22.0000] <shu>
littledan: JSC disagrees with subparts of the PR

[21:35:29.0000] <littledan>
Oh, I see, carry on

[21:35:31.0000] <littledan>
but, test262?

[21:35:35.0000] <devsnek>
Bakkot: it's only valid in 16 and 32

[21:35:36.0000] <shu>
disagrees meaning mismatches, not active disagreement

[21:35:44.0000] <shu>
test262 i don't actually know, rkirsling?

[21:35:46.0000] <littledan>
(sorry, it's 6:30 AM here, and I haven't slept tonight yet)

[21:36:13.0000] <devsnek>
well i guess it's valid in 8, but it isn't used

[21:36:27.0000] <rkirsling>
rwaldron was suggesting he was going to follow along with the PR and help with the tests

[21:36:39.0000] <rkirsling>
if that's not the case then I can contribute there

[21:36:52.0000] <michaelficarra>
lol this isn't true either, ugh

[21:37:33.0000] <Bakkot>
need mathiasbynens here

[21:37:36.0000] <michaelficarra>
https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent

[21:38:08.0000] <littledan>
the answer is yes; it's been stated several times. I think we can iterate on the wording on the issue

[21:38:25.0000] <rkirsling>
Bakkot: +1

[21:39:09.0000] <rkirsling>
wait but shu there is the `configurable` bit

[21:39:11.0000] <shu>
Bakkot: why can't we volunteer michaelficarra as the new utf abyss gazer

[21:39:32.0000] <shu>
littledan: rkirsling: oops, ross's right about the [[Configurable]] change, that's not in anyone's implementation

[21:39:43.0000] <shu>
littledan: i'll ship that soon and be on the lookout for bugs

[21:39:46.0000] <rkirsling>
<3

[21:39:51.0000] <shu>
i see no way to actually usecounter that

[21:39:55.0000] <littledan>
OK, let's wait to land this until we get 1-2 shipping implementations

[21:40:00.0000] <littledan>
any concerns with that?

[21:40:17.0000] <rkirsling>
fine by me

[21:40:20.0000] <shu>
sure, that should be fine

[21:40:54.0000] <shu>
could someone note that on the PR?

[21:40:57.0000] <shu>
i will probably forget

[21:41:06.0000] <keith_miller>
Bakkot: Is there any order for prototype methods generally in the spec? Is it the same as the order they are listed?

[21:41:14.0000] <Bakkot>
keith_miller nope

[21:41:20.0000] <keith_miller>
hmm, ok

[21:41:26.0000] <rkirsling>
littledan: would you like to add a comment to that end?

[21:41:28.0000] <Bakkot>
people have proposed changing that

[21:41:48.0000] <Bakkot>
"nope" as in "there is no order", to be clear

[21:41:52.0000] <littledan>
rkirsling: I'll do that

[21:41:54.0000] <keith_miller>
Bakkot: As long as its whatever the current JSC order is I'm happy :P

[21:42:26.0000] <Bakkot>
keith_miller to be clear, my length/name PR requires a change from JSC and not from anyone else

[21:42:28.0000] <Bakkot>
I hope that was clear

[21:42:36.0000] <keith_miller>
Oh, I know

[21:42:43.0000] <Bakkot>
ok good good

[21:42:44.0000] <keith_miller>
I'm doing it now

[21:43:26.0000] <keith_miller>
Bakkot: I'm just lazy :P

[21:46:04.0000] <Bakkot>
ain't we all

[21:46:16.0000] <Bakkot>
I try to phrase these PRs in a way which allows the most people to be lazy, as a rule

[21:46:51.0000] <Bakkot>
re: "valid unicode", I guess the pedantic thing is "is valid unicode if interpreted as a UTF-16BE string"

[21:46:52.0000] <michaelficarra>
Bakkot: pretty sure all your PRs from this meeting only require JSC changes

[21:46:58.0000] <shu>
i'm not so much lazy as anxious

[21:47:07.0000] <Bakkot>
or, that's true at least wrt the BOM

[21:48:08.0000] <haxjs>
does that mean we can't have 1cm 1deg , etc?

[21:48:31.0000] <rkirsling>
michaelficarra: womp womp

[21:48:55.0000] <keith_miller>
haxjs: Yeah, seems like it.

[21:49:13.0000] <haxjs>
or is that mean 1cm is allowed but 0x1cm is not?

[21:49:36.0000] <keith_miller>
Oh maybe you're right

[21:49:40.0000] <keith_miller>
Worth a questino

[21:50:41.0000] <haxjs>
push a question in the queue

[21:52:29.0000] <michaelficarra>
I don't like that an _ would be mandatory whereas people are learning today that you can pretend they aren't there

[21:53:07.0000] <devsnek>
i think it should be `@`

[21:53:16.0000] <devsnek>
applies to the decorator idea and discourages people from using asi

[21:53:27.0000] <ljharb>
i'm pretty confident there's web code that depends on bigint literal keys in object literals

[21:54:03.0000] <Bakkot>
that is a remarkable claim

[21:54:17.0000] <ljharb>
you think?

[21:54:26.0000] <ljharb>
i mean, bigints are new

[21:54:31.0000] <rkirsling>
michaelficarra: can you expand upon "pretend they aren't there"?

[21:54:34.0000] <haxjs>
we have bigint landed not very long, so maybe not a big problem?

[21:54:45.0000] <michaelficarra>
rkirsling: 1_2_3 === 123

[21:54:48.0000] <ljharb>
but there was a bunch of discussion about bigint's toString not having the "n" for this exact reason so i'm very skeptical that this was a surprise

[21:54:50.0000] <rkirsling>
ohhh

[21:55:13.0000] <gibson042>
`{ 9007199254740993n: "precise" }`

[21:55:16.0000] <rkirsling>
yeah true, C++ uses ' as a separator so there's no clash with _ for custom literals

[21:55:48.0000] <Bakkot>
ljharb I just don't expect anyone to have wanted this

[21:55:56.0000] <Bakkot>
I thought the toString thing was for access, not definition

[21:56:02.0000] <Bakkot>
as in `x[0n] === x[0]`

[21:56:17.0000] <Bakkot>
not `{ 0n: 'foo' }`, which is a very strange thing to write

[21:56:25.0000] <ljharb>
iirc it came up in both contexts. the access reason was surely more pressing tho

[21:56:37.0000] <ljharb>
certainly not making the claim that people *want* this but i'd be surprised if nobody shipped it by now

[21:56:38.0000] <michaelficarra>
Bakkot: same

[21:56:57.0000] <Bakkot>
I would be surprised if people shipped it

[21:57:11.0000] <michaelficarra>
yeah a lot of people use compilers

[21:57:29.0000] <Bakkot>
(to a website with nontrivial usage, anyway, where nontrivial is > 10 humans / week)

[22:00:34.0000] <rkirsling>
michaelficarra: ahh your tagged template point is a good one

[22:01:11.0000] <michaelficarra>
they were called quasis in the beginning for a reason

[22:02:46.0000] <michaelficarra>
(quasi as in quasi-literal)

[22:04:50.0000] <shu>
michaelficarra: is your concern that some suffixes are builtin and thus have a completely different analyzability / performance reasons?

[22:04:52.0000] <keith_miller>
devsnek: woah!!! with is fast in JSC

[22:05:09.0000] <keith_miller>
You get all the optimizations

[22:05:25.0000] <shu>
michaelficarra: err, s/reasons/profile, dunno why i typed out reasons

[22:05:30.0000] <devsnek>
keith_miller: not a problem for numeric suffixes then :P

[22:05:33.0000] <rkirsling>
keith_miller: does that mean it's no longer evil

[22:05:47.0000] <rkirsling>
 :p

[22:05:49.0000] <michaelficarra>
shu: no, my concern has nothing to do with performance and is all about language design and syntax budget

[22:06:00.0000] <shu>
michaelficarra: well, i threw in analyzability in there

[22:06:05.0000] <shu>
i'll wait to hear it when we get to it

[22:06:15.0000] <michaelficarra>
not that either, no

[22:06:20.0000] <devsnek>
but i do think separate namespace is an actively more confusing/worse dev experience

[22:06:34.0000] <haxjs>
I think dan's motivation of separate namespace is good.

[22:06:53.0000] <Bakkot>
we should just use template literals

[22:06:58.0000] <Bakkot>
tagged templates, that is

[22:07:01.0000] <Bakkot>
they work fine for this use case

[22:07:10.0000] <Bakkot>
people are even starting to have their editors lint them

[22:07:13.0000] <devsnek>
cm`123`

[22:07:19.0000] <Bakkot>
https://marketplace.visualstudio.com/items?itemName=frigus02.vscode-sql-tagged-template-literals

[22:07:24.0000] <Bakkot>
devsnek right

[22:07:26.0000] <Bakkot>
that's perfect

[22:07:28.0000] <devsnek>
sure why not

[22:07:35.0000] <devsnek>
you should bring it up

[22:07:45.0000] <Bakkot>
michaelficarra's already on the queue

[22:07:47.0000] <Bakkot>
gonna let him say it

[22:07:51.0000] <keith_miller>
devsnek: I wasn't actually following the context. I just wanted to call that out :P

[22:08:05.0000] <haxjs>
consider someone write code `var x = 1m;` it's  possible  someone will add code like `let m = ...` and din't notice the `m` because it's suffix.

[22:08:20.0000] <devsnek>
keith_miller: wasn't saying they must be slow, more that if they are slow, what's the point in making the `1px` inside them fast

[22:08:40.0000] <devsnek>
(at the cost of dev exp)

[22:08:46.0000] <keith_miller>
oh, I mean I hope we aren't making it harder than anything else

[22:08:54.0000] <keith_miller>
in a with scope

[22:08:57.0000] <haxjs>
template literals like ``px`1``` ???

[22:09:03.0000] <devsnek>
keith_miller: it seems like a function call so

[22:09:06.0000] <devsnek>
if you can optimize those

[22:09:12.0000] <Bakkot>
hax yup

[22:09:51.0000] <haxjs>
I think dan want number from parse time

[22:10:04.0000] <haxjs>
template string need runtime cost

[22:10:12.0000] <keith_miller>
Yeah, I don't really care for inside a with scope as long as it's lexically obvious

[22:10:15.0000] <shu>
this proposal definitely has runtime cost

[22:11:00.0000] <haxjs>
yeah it have runtime cost, but i think dan don't want the extra cost of `parseInt(s)`

[22:11:18.0000] <Bakkot>
don't think that cost warrants a new syntactic feature

[22:11:49.0000] <haxjs>
it not to save such cost , the proposal itself is for dev experience.

[22:13:04.0000] <shu>
the weak link for me here is the constraint that "decimal ought to be polyfillable"

[22:13:20.0000] <rickbutton>
anecdotally I just moved an entire codebase off of tagged template literals for GraphQL queries, we found that editor support was less than ideal and was brittle

[22:13:38.0000] <shu>
not having this doesn't imply decimal can't use a suffix, but that it can't be polyfilled with the same syntax

[22:13:41.0000] <haxjs>
i understand we may worry about the syntax budget here again, so maybe we could try to find some more general solution. For example old bind op allow u write `1::px()`

[22:14:16.0000] <devsnek>
haxjs: the `px` function needs the source text of the numeric literal

[22:14:38.0000] <haxjs>
devsnek: current CSS.px do not need raw literal.

[22:14:47.0000] <devsnek>
right but other things do

[22:14:52.0000] <devsnek>
like a decimal type

[22:14:53.0000] <Bakkot>
we already found a more general solution: it's tagged templates. that's what they're for

[22:14:58.0000] <haxjs>
even we need it, we could consider add such ability to bind op!

[22:15:14.0000] <devsnek>
Bakkot: inverted tagged templates though :P

[22:15:31.0000] <rickbutton>
yeah template literal suffixes

[22:15:41.0000] <devsnek>
what happens if you prefix and suffix it

[22:15:41.0000] <haxjs>
tagged template have the bad order (prefix vs suffix) and only have raw string not parsed value.

[22:16:07.0000] <devsnek>
templates can afford to call parseInt because they can cache it

[22:16:09.0000] <Bakkot>
parsing small integers is not slow, I don't think that's an actual problem

[22:16:10.0000] <ljharb>
if the parsed value isn't needed tho, then that seems like it's more efficient for most cases?

[22:16:15.0000] <rickbutton>
devsnek: pre``string``post => `post(pre("string")`

[22:16:27.0000] <Bakkot>
I don't hate tagged template suffixes, tbh

[22:16:38.0000] <devsnek>
i slightly dislike them

[22:16:41.0000] <rickbutton>
I would love tagged template suffixes

[22:16:43.0000] <rkirsling>
is suffix viable to add? it is, right?

[22:16:47.0000] <rickbutton>
y devsnek

[22:16:47.0000] <rkirsling>
I don't hate that

[22:16:48.0000] <devsnek>
rkirsling: ASI

[22:16:48.0000] <ljharb>
``` `3`px ``` ?

[22:16:52.0000] <rkirsling>
yeah

[22:17:07.0000] <devsnek>
rickbutton: no objective reasons

[22:17:10.0000] <rbuckton>
There was a suggestion on the issue tracker to use `'` as a separator, as in `3'px`: https://github.com/tc39/proposal-extended-numeric-literals/issues/8#issuecomment-361714521

[22:17:18.0000] <rkirsling>
devsnek: yeah but like whitespace wouldn't be allowed, right?

[22:17:25.0000] <rickbutton>
devsnek: I read "slightly" as "strongly" whoops

[22:17:47.0000] <shu>
the numeric suffixes proposal was an update, not asking for any advancement, right?

[22:17:57.0000] <devsnek>
yes

[22:17:57.0000] <rickbutton>
no advancement

[22:18:23.0000] <shu>
thanks

[22:18:57.0000] <rickbutton>
rkirsling: String.raw\nfoo is allowed, would be weird if you couldn't do it on the rhs i guess

[22:19:05.0000] <rkirsling>
oh

[22:19:29.0000] <devsnek>
:D

[22:19:42.0000] <Bakkot>
weird but not fatal, I think

[22:19:50.0000] <rickbutton>
agree

[22:19:56.0000] <devsnek>
js's motto

[22:19:57.0000] <rkirsling>
wow that is so strange to me

[22:20:00.0000] <ljharb>
seems a bit weird to me to write that code on the lhs in the first place

[22:20:07.0000] <rkirsling>
I did not realize you didn't need the ``

[22:20:10.0000] <ljharb>
(with the \n)

[22:20:11.0000] <devsnek>
wait until you learn about all the places you can put subscript operators

[22:20:14.0000] <Bakkot>
rkirsling oh, you do need that

[22:20:25.0000] <Bakkot>
the `` is necessary, it just can have a newline before it

[22:20:35.0000] <Bakkot>
" String.raw\n` foo ` " works

[22:20:36.0000] <devsnek>
there are people who do `a.\nb.\nc`

[22:20:46.0000] <rickbutton>
yeah sorry bad escaping, you still need the backticks

[22:21:02.0000] <rkirsling>
ohh what rickbutton works as-is but it's *because* of ASI, I see

[22:21:11.0000] <rkirsling>
"works" as in, doesn't thro

[22:21:12.0000] <rkirsling>
w

[22:21:22.0000] <devsnek>
unless foo is undefined

[22:21:26.0000] <rkirsling>
right

[22:22:11.0000] <ljharb>
devsnek: trailing dot, ick

[22:22:22.0000] <ljharb>
devsnek: i've seen that pattern in ruby, is it common in other langs?

[22:22:27.0000] <devsnek>
i've seen it in js

[22:22:30.0000] <Bakkot>
people write it in JS

[22:22:31.0000] <devsnek>
dunno about "common"

[22:22:38.0000] <Bakkot>
sometimes they complain in prettier's tracker / social media

[22:22:45.0000] <Bakkot>
they get shut down 'cause it's rare enough

[22:22:47.0000] <rickbutton>
gross

[22:22:48.0000] <devsnek>
what you really have to worry about is the people who put each lexical token on its own line

[22:29:13.0000] <rkirsling>
keith_miller: that's good to confirm, I wondered if this was a watchpoint-y sorta thing

[22:29:30.0000] <keith_miller>
I think it's just a named property

[22:29:45.0000] <keith_miller>
Sometimes a custom property until you set it

[22:30:14.0000] <devsnek>
just did a test in v8

[22:30:18.0000] <haxjs>
what' function.length be infinity mean? is it affect any other things?

[22:30:24.0000] <devsnek>
setting length to infinity makes accessing `call` slower

[22:30:35.0000] <ljharb>
does it?

[22:30:41.0000] <ljharb>
i'd think it means the same as if you set the function's length to `'foo'`

[22:30:43.0000] <haxjs>
why it would be slow?

[22:31:01.0000] <keith_miller>
Yeah, that's surprising

[22:31:11.0000] <rkirsling>
oh nice, Alexey is like Yusuke #2

[22:31:12.0000] <keith_miller>
but I don't V8 so.. lol

[22:31:43.0000] <rkirsling>
I guess I overlooked that patch

[22:32:02.0000] <devsnek>
looks like it completely destroys the IC

[22:32:24.0000] <devsnek>
keith_miller: https://gc.gy/68371336.png

[22:34:23.0000] <haxjs>
so the conclusion is infinity?

[22:34:28.0000] <Bakkot>
haxjs yup

[22:34:48.0000] <haxjs>
interesting :-)

[22:34:48.0000] <michaelficarra>
devsnek: why f.call() and not f()?

[22:34:49.0000] <Bakkot>
as to "what does it mean", it doesn't really mean anything, and it doesn't affect anything else to my knowledge

[22:35:12.0000] <devsnek>
michaelficarra: it affects the property access, not the call

[22:35:13.0000] <shu>
jridgewell: devsnek: so this change has no new performance implication

[22:35:34.0000] <devsnek>
i included the call itself because idk the specifics of v8's DCE

[22:35:38.0000] <jridgewell>
üëç

[22:35:40.0000] <shu>
if i'm reading correctly as devsnek noted, setting/defining .length on JSFunctions will transition the map

[22:35:49.0000] <shu>
but that's true today

[22:35:50.0000] <jridgewell>
As long as this isn't going to cause some weird cascade to other functions

[22:36:14.0000] <Bakkot>
this doesn't require the major engines to change

[22:36:36.0000] <shu>
yeah, it should transition the map of that function, not all functions

[22:37:19.0000] <devsnek>
you could deopt all functions by changing F.p.length :P

[22:37:37.0000] <shu>
what happens is that .length is implemented in V8 as a getter/setter pair (even though at the language level it is not), except the setter is a magical engine thing that transitions the .length to a normal data property

[22:38:39.0000] <jridgewell>
Does anyone see slides?

[22:38:40.0000] <devsnek>
magic accessors are a theme in implementations

[22:38:43.0000] <devsnek>
jridgewell: yes

[22:38:58.0000] <shu>
devsnek: i'm not sure you can

[22:39:03.0000] <shu>
how does that work?

[22:39:15.0000] <devsnek>
shu: changing f.p.length?

[22:39:21.0000] <shu>
yeah, how would that deopt all functions?

[22:39:27.0000] <devsnek>
hm it might only be anonymous ones

[22:39:49.0000] <devsnek>
i would have to actually check

[22:40:07.0000] <shu>
i thought all functions have a their own length property on their maps

[22:40:14.0000] <ljharb>
they should

[22:40:26.0000] <devsnek>
yeah but i don't remember what happens when the prototype map changes

[22:40:30.0000] <devsnek>
in terms of IC

[22:40:58.0000] <devsnek>
not 100% sure if it actually deopts all functions, was going for a joke more than anything else

[22:43:05.0000] <devsnek>
wow it deoptimized property access off a named function

[22:45:44.0000] <ljharb>
sffc: quickjs

[22:46:51.0000] <littledan>
I'm pretty sure people do use QuickJS for stuff actually

[22:47:59.0000] <devsnek>
it gets use in wasm

[22:48:06.0000] <sffc>
üëç

[22:48:42.0000] <haxjs>
I know some people use quickjs heavily

[22:52:12.0000] <ljharb>
littledan: there is no such clause. you certainly can (and have) withhold consensus, but there's no deadline for anything but proposals. normative changes aren't all proposals.

[22:52:32.0000] <ljharb>
needing more time to review something is ofc a legit reason not to provide consensus

[22:53:12.0000] <littledan>
OK, so that's what I'm saying

[22:53:38.0000] <ljharb>
alrighty. you could say that even if it'd been on the agenda for 2 months, ftr.

[22:53:52.0000] <akirose>
ryzokuken: if you're talking we can't hear you

[22:53:57.0000] <littledan>
I like to review everything ahead of the meetings in written format

[22:54:21.0000] <littledan>
even if not all TC39 delegates do these reviews, I like to do so

[22:54:32.0000] <littledan>
I'm very happy that Bakkot is doing these changes to clarify these edge cases

[22:54:37.0000] <littledan>
and bring interoperability

[22:54:54.0000] <shu>
littledan: i'm somewhat surprised by this. i thought the change small enough to review on the fly during his presentation

[22:55:22.0000] <rkirsling>
I too thought it was quite trivial, if this is a per-case decision to make

[22:56:17.0000] <ljharb>
robpalme: update the queue topic?

[22:56:18.0000] <devsnek>
i feel like all my items get changed during the presentation

[23:02:13.0000] <shu>
ljharb: that is a problem with people

[23:02:19.0000] <ljharb>
that is true

[23:02:57.0000] <shu>
one way to combat this could be legalistic disclaimers, but we know how EULA works out even in a legal system *with* teeth

[23:03:37.0000] <devsnek>
idk if some random person does this we can just tell them off

[23:04:28.0000] <devsnek>
maybe we can start with "standard"js

[23:04:34.0000] <shu>
but i think the actual way to combat this is to make TC39 plenary less of a "room where it all happens", because it's not actually true anyway

[23:07:27.0000] <leobalter>
littledan: the goal is to facilitate this to make it work. I know there are a lot to discuss

[23:09:10.0000] <littledan>
about the earlier topic from Kevin: I'm legitimately extremely tired. It's 8 AM and I didn't get to sleep all last night. This is a topic I'm interested in, and I've been trying to follow the work around it.

[23:10:34.0000] <littledan>
I just am unable to take a nap before the meeting. I tried to sleep in late before, this but it wasn't enough.

[23:10:52.0000] <rkirsling>
right :( that really takes a lot of stamina

[23:28:02.0000] <Bakkot>
time zones are rough

[23:28:18.0000] <Bakkot>
I expect next meeting to get a little silly

[05:13:37.0000] <littledan>
hey, is there an IRC command that I can copy-paste to send a message to the chairs?

[05:13:58.0000] <littledan>
I'd rather not bother one person individually, but last meeting, I had some kind of typo in the command I tried to use, and the message was silently lost

[05:14:14.0000] <littledan>
ah sorry I see this in the topic :)

[05:14:25.0000] <littledan>
`/notice #tc39-chairs your message here`

[09:59:42.0000] <keith_miller>
Bakkot: Are there tests for the length change? I want  to make sure I found all the places...

[10:00:27.0000] <Bakkot>
keith_miller not as yet. I'll try to come up with some to add to test262 before merging the PR

[10:01:04.0000] <keith_miller>
Bakkot: Ok, well, I'm going to land the change now then and double back once there are tests. If you remember, can you ping me when they land?

[10:01:09.0000] <Bakkot>
will do

[10:01:13.0000] <keith_miller>
thanks!

[10:02:06.0000] <Bakkot>
there's basically three categories: intrinsics like Function, weird intrinsics like %ThrowTypeError%, and synthesized on-the-fly functions like you get from `new Promise((f1, f2) => ...)` or `await { then: f => ... }` etc

[10:03:28.0000] <Bakkot>
I am not gonna add comprehensive tests for the first kind because there are so many, but I'll try to be comprehensive about the latter two

[10:05:02.0000] <keith_miller>
gotcha, I think the first kind is the kind that we got wrong. I changed it so that the base class for the C++ functions takes a length so you have to get the right order. Assuming we want the order to be "length", "name", "prototype" eventually

[10:05:24.0000] <keith_miller>
I think all our functions that are wrapping "built-in" JS and user JS are correct

[10:05:31.0000] <keith_miller>
were correct*

[10:06:18.0000] <keith_miller>
That said, our implementation details don't really map to things in the spec. So I could be missing some cases

[10:06:39.0000] <keith_miller>
It's more just about whether something is implemented in JS or C++

[10:08:08.0000] <devsnek>
Bakkot: test262 has a list of top level intrinsics you can use

[10:09:53.0000] <devsnek>
we could abstract the logic here for testing the properties https://github.com/tc39/test262/blob/main/test/built-ins/Function/prototype/toString/built-in-function-object.js

[10:10:39.0000] <Bakkot>
keith_miller: also take a look at `console.log(Object.getOwnPropertyNames(Proxy.revocable({}, {}).revoke))`

[10:11:03.0000] <Bakkot>
devsnek neat

[10:11:35.0000] <keith_miller>
>>> Object.getOwnPropertyNames(Proxy.revocable({}, {}).revoke)

[10:11:35.0000] <keith_miller>
length,name

[10:11:39.0000] <keith_miller>
Is what I get after my change

[10:11:58.0000] <Bakkot>
good good

[10:12:37.0000] <devsnek>
is it legal to install additional properties between those

[10:12:52.0000] <devsnek>
`length,color,name`

[10:13:03.0000] <keith_miller>
more likely length, prototype, name

[10:13:11.0000] <keith_miller>
since prototype is unspecified IIUC

[10:13:18.0000] <devsnek>
sure i just mean

[10:13:22.0000] <devsnek>
we should take that into account in the tests

[10:13:24.0000] <devsnek>
if its allowed

[10:13:29.0000] <keith_miller>
Yeah, I think the spec doesn't say anything

[10:13:43.0000] <keith_miller>
What that means is... ü§∑‚Äç‚ôÇÔ∏è

[10:13:58.0000] <devsnek>
forbidden extensions: functions must not have colors

[10:14:11.0000] <keith_miller>
You could put something in the function constructor that says no properties should be added until after length and name

[10:14:30.0000] <keith_miller>
err function create operation (whatever that's called in the spec)

[10:15:03.0000] <devsnek>
oh no i have name/length for some things

[10:15:24.0000] <keith_miller>
what things?

[10:15:45.0000] <devsnek>
hard to say for sure

[10:16:06.0000] <Bakkot>
yeah I'm just going to assert on relative order, not the actual list

[10:16:08.0000] <devsnek>
i have `CreateBuiltinFunction()\nSetFunctionName\nSetFunctionLength()` sprinkled through a lot of the spec

[10:16:17.0000] <devsnek>
the source*

[10:16:43.0000] <Bakkot>
find-replace

[10:16:50.0000] <devsnek>
idk how to find replace that

[10:17:06.0000] <devsnek>
i'm just grepping for SetFunctionName

[10:17:39.0000] <keith_miller>
SetFunctionName isn't inside CreateBuiltinFunction()? Seems like that would be the idiomatic way to do it

[10:18:03.0000] <Bakkot>
the point of this change is to make that change to the spec!

[10:18:29.0000] <Bakkot>
currently the spec just asserts the existence of these properties; we want to make it install them in CreateBuiltinFunction

[10:18:32.0000] <keith_miller>
Bakkot: For what it's worth I think you can get add a thing to the spec that says length, name must be the first two properties on all functions

[10:18:44.0000] <keith_miller>
well that's some poor phrasing lol

[10:18:50.0000] <keith_miller>
but I think you get the point

[10:18:59.0000] <devsnek>
oh if it moves them to createbuiltinfunction

[10:19:07.0000] <devsnek>
that makes this way easier

[10:19:07.0000] <Bakkot>
that would require V8 and Chakra to change

[10:19:13.0000] <Bakkot>
but yeah probably

[10:19:32.0000] <keith_miller>
"that would require V8 and Chakra to change" is that in response to my comment?

[10:19:36.0000] <Bakkot>
keith_miller yeah

[10:19:45.0000] <Bakkot>
wait, SM and Chakra

[10:19:46.0000] <keith_miller>
Where does that occur?

[10:19:46.0000] <Bakkot>
not V8

[10:19:58.0000] <keith_miller>
Is prototype first or something?

[10:20:07.0000] <Bakkot>
yup

[10:20:12.0000] <keith_miller>
gotcha

[10:20:45.0000] <keith_miller>
Seems like prototype should be 3rd because it's only sometimes there

[10:20:47.0000] <keith_miller>
but that's a nit

[10:20:53.0000] <keith_miller>
and I don't really care lol

[10:20:57.0000] <Bakkot>
devsnek https://github.com/tc39/ecma262/pull/2116/files#diff-3540caefa502006d8a33cb1385720803R8889-R8890

[10:21:01.0000] <Bakkot>
yeah that's my feeling also

[10:21:10.0000] <Bakkot>
plus then it's alphabetic!

[10:21:20.0000] <devsnek>
very exciting

[10:21:27.0000] <keith_miller>
"alphabetic" until you get to any other functions lol

[10:21:29.0000] <devsnek>
well the signature of CreateBuiltinFunction is not exciting

[10:21:35.0000] <devsnek>
but oh well

[10:21:38.0000] <Bakkot>
yeah...

[10:21:48.0000] <Bakkot>
hope to get tooling to help with that eventually

[10:21:57.0000] <Bakkot>
so you can see the signature of an AO if you hover over it, or something

[10:22:00.0000] <devsnek>
we should integrate objective c's named arguments into the spec

[10:22:16.0000] <Bakkot>
ehhhhhh

[10:22:17.0000] <keith_miller>
I lowkey love that about Obj-C

[10:22:22.0000] <keith_miller>
It makes reading code so easy

[10:22:36.0000] <devsnek>
yeah but my editor can just

[10:22:40.0000] <keith_miller>
which is what I'm doing like 90% of the time

[10:22:40.0000] <devsnek>
insert the names anyway

[10:22:59.0000] <keith_miller>
what do you mean by that?

[10:23:23.0000] <devsnek>
like it takes the code `foo(a, b, c)` and renders it as `foo(arg1: a, arg2: b, arg3: c)`

[10:23:42.0000] <keith_miller>
Oh, I see

[10:23:50.0000] <devsnek>
i think vscode can do that too

[10:24:15.0000] <devsnek>
i know that's advertised as a feature of rust-analyzer

[10:24:15.0000] <keith_miller>
That doesn't work too well for C++ since it's common-ish practice to have the signature not have variable names only types

[10:24:31.0000] <Bakkot>
no reason the rendered spec couldn't pull that trick (as an opt-in mechanism); main issue would be discoverability probably

[10:24:37.0000] <keith_miller>
And you'd have to integrate with the compiler

[10:24:46.0000] <keith_miller>
which can be problematic if you're trying to get something compiling

[10:24:51.0000] <devsnek>
yeah you have to use language servers

[10:24:56.0000] <devsnek>
rip battery life

[10:24:59.0000] <keith_miller>
that said, that's a nice feature

[10:25:52.0000] <devsnek>
i think this screenshot is from vscode https://user-images.githubusercontent.com/2690773/75099758-74d99400-55d6-11ea-856f-565e130a7e0c.png

[10:26:50.0000] <Bakkot>
intellij is reasonably good at this for java too

[10:27:03.0000] <Bakkot>
there is so much room for our tools to get better...

[10:27:38.0000] <Bakkot>
I think about this a lot more since I started working with a smalltalker, since this is all they can talk abouot

[10:27:59.0000] <Bakkot>
(that is, a person who worked on/with Smalltalk, the language)

[10:29:51.0000] <devsnek>
i think you mean smalltalk, the os

[12:16:12.0000] <dandclark>
bradleymeck: Did you get a chance to review https://tc39.es/proposal-import-assertions/?  It's on the schedule for today, and we've heard from the other Stage 3 reviewers; it would be great to confirm whether you've also been able to review.

[12:42:35.0000] <bradleymeck>
dandclark: i've had reviews in meetings and had a final one on saturday to clear things up

[12:43:10.0000] <bradleymeck>
shu and ljharb went over concerns about some editorial wording for the host constraint but other than that it looked fine from my end

[12:55:25.0000] <dandclark>
bradleymeck: Great, thanks!


2020-09-22
[17:55:15.0000] <ljharb>
confirmed - when i sign into teams with my microsoft account, i have no ability to change my name or profile picture just for teams, it's forced to be whatever my global account's name/picture are. i had to sign out so i could customize my display name

[17:59:04.0000] <rkirsling>
yeah I'm trying my work computer today so I'll see if it's different this way tooo

[17:59:07.0000] <rkirsling>
-o

[18:02:20.0000] <littledan>
has the meeting started yet? I'm having trouble getting in

[18:02:33.0000] <rkirsling>
they're managing entry individually

[18:04:56.0000] <wsdferdksl>
We just started

[18:05:17.0000] <littledan>
OK, I'm still seeing "When the meeting starts, we'll let people know you're waiting."

[18:05:26.0000] <wsdferdksl>
The chairs requested that only the chairs let folks in

[18:06:15.0000] <littledan>
OK, it doesn't seem like Teams is really working out, either from a technical or moderation perspective

[18:09:09.0000] <rkirsling>
littledan: I don't disagree :-/

[18:09:24.0000] <littledan>
oh, I think I was going into the wrong link, and that's why it wasn't loading

[18:09:32.0000] <littledan>
so, I can't blame Teams for this :)

[18:15:37.0000] <rkirsling>
I love the use of "yadda yadda" in a proposal explanation

[18:17:53.0000] <michaelficarra>
non-BMP *scripts* is the more appropriate term

[18:21:52.0000] <haxjs>
Let's split string.p.item to a follow-on proposal!

[18:24:15.0000] <rkirsling>
haxjs: if it gets removed from this proposal, then yeah, anybody could champion it separately

[18:26:51.0000] <haxjs>
I think maybe we can use codepoint-safe access on string.p.item, but it obviously need further discussion

[18:27:07.0000] <littledan>
our language does support grapheme clusters now, thanks to Intl.Segmenter!  :)

[18:27:19.0000] <devsnek>
v8BreakIterator :)

[18:27:27.0000] <littledan>
not like that!

[18:27:35.0000] <keith_miller>
ljharb: It would have a perf impact if you did it enough

[18:27:39.0000] <ljharb>
noted

[18:28:01.0000] <littledan>
I can understand the argument that we should have .item(), but I don't understand the argument that, without it, the proposal isn't ready for Stage 3

[18:28:13.0000] <keith_miller>
Maybee you could optimize out the array but I doubt any engine does that

[18:28:32.0000] <littledan>
strings are missing other things that logically *could* be defined on them, for example map

[18:28:45.0000] <rkirsling>
re-rope-ification? :p

[18:28:45.0000] <devsnek>
translate

[18:28:56.0000] <michaelficarra>
are the Intl people working on a grapheme cluster iterator?

[18:29:07.0000] <devsnek>
michaelficarra: Intl.Segmenter

[18:29:17.0000] <rkirsling>
yeah it includes iteration

[18:29:19.0000] <michaelficarra>
it has a grapheme cluster mode?

[18:29:36.0000] <michaelficarra>
I only remember it doing like word/sentence stuff

[18:29:38.0000] <devsnek>
yes! and its stage 3!

[18:29:42.0000] <michaelficarra>
cool

[18:30:04.0000] <rkirsling>
admittedly I never thought to test it with emoji but now I want to

[18:31:22.0000] <ljharb>
jorendorff: lol, they might be less confused about what item does - most users don't know about code points or graphemes or whatnot

[18:31:47.0000] <Bakkot>
the benefit of adding this is purely for developers; the cost paid for the bugs is paid by users

[18:32:00.0000] <Bakkot>
there are more of the latter

[18:32:06.0000] <Bakkot>
by a lot

[18:32:15.0000] <ljharb>
i'm very skeptical to the implication that the existence of `item` on strings is going to increase the likelihood that these sort of bugs will happen

[18:32:37.0000] <keith_miller>
jorendorff: But yeah you can't do random access on a UTF-16 without it being O(n)

[18:32:43.0000] <keith_miller>
As far as I know

[18:32:56.0000] <keith_miller>
Which is a big O.o to 99% of JS users...

[18:33:14.0000] <ljharb>
s/skeptical to/skeptical of

[18:33:17.0000] <rkirsling>
devs not knowing about code points doesn't mean it's okay that they don't know about code points

[18:33:31.0000] <apaprocki>
(Like timezones)

[18:33:52.0000] <michaelficarra>
Bakkot: users that are usually disconnected from the development process and will be invisible

[18:33:53.0000] <ljharb>
rkirsling: sure, agreed, but it does mean they're less likely to be confused about `.item`, and if they know about code points, they'd already know about the difference presumably?

[18:34:00.0000] <Bakkot>
michaelficarra right

[18:34:17.0000] <michaelficarra>
(clarification: their pain will be invisible, not the users)

[18:35:30.0000] <gibson042>
`Array.from( (new Intl.Segmenter("en", {granularity: "grapheme"})).segment("Moto\u0308rhead") )`

[18:35:48.0000] <littledan>
how about a straw poll?

[18:36:08.0000] <rkirsling>
littledan: vocally?

[18:36:13.0000] <littledan>
(I agree with Mark's take)

[18:36:19.0000] <rbuckton>
We need better ways to measure and manipulate strings for all 3 scenarios (code unit, code point, grapheme cluster)

[18:36:38.0000] <rkirsling>
I really want to see this advance either way

[18:36:46.0000] <gibson042>
agreed

[18:37:17.0000] <Bakkot>
ljharb if we leave it out, and people reach for it, they might learn why it's not there and learn the correct thing to do

[18:37:22.0000] <Bakkot>
if we add it, there is no chance of that

[18:37:29.0000] <michaelficarra>
I don't think indexing on either code points or grapheme clusters is a good idea, since it's a linear operation

[18:37:31.0000] <Bakkot>
they will be guaranteed to ship the bug

[18:37:31.0000] <haxjs>
maybe we could land item() but add codepoint-safe methods like codePointItem(), codePointSlice() etc.

[18:38:11.0000] <keith_miller>
haxjs: I'd prefer we do something like String("content", { format: "utf-32" })

[18:38:20.0000] <leobalter>
start with Assertions please :)

[18:38:27.0000] <rkirsling>
haxjs: I mean you have a point there; if the key is that `item` and `[]` are consistent then having other means of dealing with code points feels more consistent

[18:38:27.0000] <mmarchini>
Computers are hard

[18:38:35.0000] <ljharb>
Bakkot: that is certainly possible. i am very skeptical they'd do any more thinking about it than just doing `str.slice(-1)[0]` or `str[str.length - 1]`

[18:38:36.0000] <haxjs>
keith_miller: I also support that idea!

[18:38:46.0000] <rbuckton>
i.e., `.codePointCount`, `.graphemeCount`, `.nthCodePoint(n)`, `.nthGrapheme(n)`, `.isLowSurrogate(i)`, `.isHighSurrogate(i)`, etc.

[18:38:50.0000] <ljharb>
haxjs: i like that idea

[18:38:55.0000] <keith_miller>
haxjs: That said, it's way more work for browsers lol

[18:39:04.0000] <keith_miller>
but it's also much faster in the long run

[18:39:16.0000] <devsnek>
rbuckton: `nthWord`, `nthSentence`

[18:39:19.0000] <keith_miller>
since you don't have to have O(n) codePointItem()

[18:39:22.0000] <brad4d>
did we skip item #20 on tcq or did I just miss it somehow?

[18:39:28.0000] <devsnek>
brad4d: skipped

[18:39:32.0000] <rkirsling>
rbuckton: that's a whole new library at that point though

[18:39:34.0000] <rbuckton>
devsnek: Those would be `Intl` features :)

[18:39:36.0000] <Bakkot>
ljharb certainly some would, but also almost certainly some wouldn't

[18:39:38.0000] <rkirsling>
ahhh

[18:39:59.0000] <Bakkot>
some might, e.g., do `[...foo].item(-1)`

[18:40:03.0000] <devsnek>
rbuckton: graphemeCount and nthGrapheme are intl as well

[18:40:07.0000] <Bakkot>
which is at least more correct

[18:40:10.0000] <ljharb>
Bakkot: and then they'd still cause bugs for users, just slightly less often.

[18:40:13.0000] <Bakkot>
right!

[18:40:15.0000] <Bakkot>
which is good!

[18:40:20.0000] <Bakkot>
fewer bugs is better than more bugs!

[18:40:28.0000] <rbuckton>
rkirsling: Perhaps, but we constantly come back to "string indexing is bad".

[18:40:36.0000] <keith_miller>
Bakkot: Oh god at `[...foo].item(-1)` lol

[18:40:40.0000] <devsnek>
Bakkot: so you admit you're trying to cause bugs! (/s)

[18:40:41.0000] <ljharb>
Bakkot: unless more bugs leads to them discovering the true nature of code units/points and grapheme clusters, sooner

[18:40:54.0000] <ljharb>
Bakkot: just like you're claiming the "bug" that item is absent might

[18:40:56.0000] <Bakkot>
ljharb what

[18:41:29.0000] <ljharb>
(not that i believe it will cause more bugs, i'm just working with your hypothetical :-p )

[18:41:38.0000] <Bakkot>
you really aren't

[18:41:56.0000] <Bakkot>
the likelihood of them discovering this fact as a consequence of causing harm to users is a direct function of the amount of harm caused to users, which will happen over a shorter or larger period of time depending on how bad their implementation is

[18:42:51.0000] <Bakkot>
but the thing I am saying is that if we leave it out they might find it (or reach for something which works better, even if not perfectly _before_ causing harm to users), which there is no chance of if we include it

[18:43:50.0000] <Bakkot>
(parentheses are messed up there sorry)

[18:44:23.0000] <shu>
littledan: are those slides shared somewhere?

[18:44:39.0000] <littledan>
shu: Yes, linked from the agenda

[18:44:45.0000] <littledan>
I'll copy that slide into the notes as the conclusion

[18:44:48.0000] <shu>
cool thanks

[18:44:50.0000] <rkirsling>
I think the biggest thing is that having S.p.item exist, with that name, and not be about code units, would be block-worthy

[18:45:06.0000] <jorendorff>
yes, that would be ... bad

[18:45:14.0000] <ljharb>
rkirsling: i agree with that for sure

[18:45:17.0000] <Bakkot>
sure but that's not on the table

[18:46:18.0000] <jorendorff>
there's a pattern with TC39 where we must decide anew each time if we are going to try to protect people from the language's pre-existing warts

[18:46:46.0000] <rkirsling>
right but if somebody made a popular library that did the equivalent of [...foo].item(-1), that could be a worse reality

[18:47:25.0000] <jorendorff>
i don't think we should make a habit of worrying, every time we decide _not_ to do something, that a web developer will do something worse

[18:47:30.0000] <jorendorff>
spoiler: they will do something worse anyway

[18:47:39.0000] <rkirsling>
I accept that counterpoint XD

[18:47:58.0000] <jorendorff>
:D

[18:49:02.0000] <mpcsh>
a friendly reminder to everyone of the existence of #tc39-beginners! if you're willing, please join and help clarify topics for our newcomers ‚ô•

[18:51:14.0000] <shu>
jorendorff: the existence of a bad thing is a stronger argument than hypothetical worries. in this case the argument's kinda weak, but was stronger for TLA, since there was sufficient evidence of people default exporting a thenable or something? i forget what the thing was but it was bad, and convinced me it was worse than having TLA

[18:53:03.0000] <rkirsling>
basically my point here is that I hear Kevin's worries but I at least feel okay with the fact that we're doing the obvious thing

[18:56:06.0000] <ljharb>
shu: re your queue reply, happy to wordsmith with any of the 3 alternatives, and i still strongly and nonblockingly prefer alt 1

[18:56:38.0000] <shu>
ljharb: but my suggestion is to change what alt 1 says

[18:56:45.0000] <shu>
does alt 1 for you generalize to "relax for some subset of hosts"?

[18:56:54.0000] <ljharb>
shu: i'm ok with that, pending wordsmithing :-)

[18:56:59.0000] <shu>
okay

[18:57:01.0000] <shu>
thanks

[18:57:07.0000] <ljharb>
shu: iow i want the default/common case to be the stronger constraint

[18:57:53.0000] <ljharb>
devsnek: eg, 2 dynamic imports one after the other

[18:58:12.0000] <devsnek>
hm ok

[19:01:06.0000] <akirose>
is it possible for us to move on beyond this topic

[19:01:24.0000] <littledan>
akirose: This is really the key topic that we've been debating about

[19:01:30.0000] <akirose>
k

[19:13:32.0000] <shu>
ljharb: i think dan's got a good point. istm your actual worry is the "evaluator attributes" that was split out; the edge cases are going to exist regardless

[19:14:56.0000] <ljharb>
shu: right but without the constraint, there's nothing preventing an implementation from making import assertions *be* evaluator attributes

[19:15:23.0000] <devsnek>
evaluator attributes should be illegal

[19:16:49.0000] <shu>
ljharb: the "no reinterpretation" constraint is still there and uncontroversial!

[19:17:26.0000] <devsnek>
temporal!!

[19:17:32.0000] <shu>
you'd have to squint *pretty* hard to use import assertions like evaluator attributes and say you conform to "no reinterpretation"

[19:17:40.0000] <shu>
like, we would just shoot it down

[19:17:50.0000] <devsnek>
i don't put squinting very hard past the js ecosystem

[19:19:39.0000] <ljharb>
shu: that is fair. but it also seems really unfortunate that all engines would have less usability for users due to an html spec editor's preference :-/

[19:19:52.0000] <leobalter>
I wanted to watch this one - Intl Enumeration - but I'm gonna need to have a break for proper parenting time

[19:20:23.0000] <leobalter>
audio is on, I'll try to catch keywords

[19:20:28.0000] <ljharb>
leobalter: it's json modules now

[19:20:48.0000] <leobalter>
ljharb: yeah, I just spent my luck today

[19:20:50.0000] <shu>
ljharb: it affects edge cases, not general usability

[19:21:02.0000] <shu>
ljharb: if it did affect general usability i'd fight with html harder on this

[19:21:59.0000] <ljharb>
shu: since hosts can play with adding arbitrary assertions, i suspect it'll get way less edge casey over time.

[19:23:12.0000] <shu>
ljharb: that's possible, and for that i pin hopes on implementation notes like for the memory model as we talked about

[19:24:45.0000] <jorendorff>
another footgun issue

[19:25:25.0000] <shu>
all host hooks are footguns, we can treat hosts as adversaries or as partners with some degree of trust

[19:25:56.0000] <jorendorff>
I didn't mean the host hook, I meant the issue of whether JSON modules should be immutable

[19:25:59.0000] <jorendorff>
I don't know

[19:26:01.0000] <shu>
ah

[19:26:37.0000] <jorendorff>
on the web, if you want mutability, you can just fetch()

[19:27:41.0000] <ljharb>
jorendorff: and if you want immutability, you could just Object.freeze it the first time you import it :-p

[19:33:12.0000] <akirose>
i think it was good to come back to this point and spell it out

[19:34:58.0000] <rickbutton>
ljharb: unless someone imports it first and changes it before you

[19:35:22.0000] <ljharb>
rickbutton: well sure, you can't defend against anything if you're not first-run code

[19:35:27.0000] <rickbutton>
true

[19:35:39.0000] <ljharb>
rickbutton: pretty sure if you're unable to safely run SES, then "is a json import mutable" isn't really your biggest problem

[19:35:42.0000] <rickbutton>
well, unless it is strictly immutable

[19:35:54.0000] <ljharb>
true :-)

[19:36:20.0000] <rickbutton>
do people actually want the ability to import a JSON module and change it? feels "icky"

[19:37:38.0000] <devsnek>
importing json is already kind of broken

[19:37:39.0000] <devsnek>
ez leaks

[19:37:53.0000] <haxjs>
what leak mean?

[19:37:58.0000] <devsnek>
haxjs: leaking memory

[19:38:04.0000] <haxjs>
oh, I agree!

[19:40:18.0000] <devsnek>
littledan: fwiw i think shared global namespace, in hindsight, was not a fantastic idea and i don't think we should create more of that

[19:40:40.0000] <rkirsling>
I agree with what jorendorff is saying

[19:41:12.0000] <littledan>
devsnek: I just think it's really important, pragmatically, in this case, that both TC39 and hosts can define assertions

[19:41:27.0000] <devsnek>
maybe `#type`

[19:41:50.0000] <littledan>
?

[19:41:55.0000] <devsnek>
not a valid identifier

[19:42:02.0000] <devsnek>
separate namespace

[19:42:19.0000] <haxjs>
what #type mean?

[19:42:27.0000] <ljharb>
just a string with a hash in front?

[19:42:35.0000] <devsnek>
like if we reserved `#` things for tc39

[19:42:49.0000] <devsnek>
forbidden extension to define your own

[19:42:56.0000] <jorendorff>
haha re: bikeshed-ability

[19:43:02.0000] <haxjs>
It seems `#` already used by several proposals?

[19:43:18.0000] <shu>
devsnek: i am not understanding, `type` isn't closed off as a key to hosts

[19:43:23.0000] <shu>
just the specific pair `type: 'json'`

[19:43:29.0000] <devsnek>
one value of it is

[19:43:38.0000] <shu>
and why is that so bad?

[19:43:53.0000] <devsnek>
for example if i wanted to use `type` for something meaningful to my host that isn't the format of the imported module

[19:44:32.0000] <devsnek>
it would definitely not be a good api for it to interfere with `type: json`

[19:45:00.0000] <ljharb>
why is it prohibitive for you to use an alternate name?

[19:45:11.0000] <devsnek>
because the name "type" might already be meaningful?

[19:45:24.0000] <devsnek>
this comes up in rust a lot where people use `kind` instead of `type` because `type` is a reserved keyword

[19:45:25.0000] <shu>
i see no difference between that and general namespace clashes

[19:45:37.0000] <shu>
it's so easy to feel strongly about the theoretical badness of namespace clashes

[19:45:37.0000] <devsnek>
shu: i think general namespace clashes are bad and we should not make new ones

[19:45:40.0000] <devsnek>
that's my point

[19:45:48.0000] <shu>
i do not see them as a problem borne out in practice

[19:45:58.0000] <jorendorff>
Hmm. this is a stronger point

[19:46:11.0000] <rickbutton>
HTML and TC39 regularly cooperate to share the global object namespace

[19:46:54.0000] <devsnek>
but if we did js again from scratch i assume that wouldn't be something we do

[19:47:23.0000] <shu>
we don't have that luxury, and thus in general i don't find appeals to "if we could rewind time" persuasive

[19:47:34.0000] <devsnek>
right but we don't have to rewind time

[19:47:37.0000] <devsnek>
this is a new feature

[19:48:07.0000] <devsnek>
are you saying shared namespaces are now idiomatic?

[19:48:36.0000] <shu>
so for your constraint i agree we don't have to rewind time

[19:48:39.0000] <shu>
i am, yes, but you're right that your view point was that it isn't

[19:48:46.0000] <shu>
oh whoa irccloud sent it out of order

[19:48:55.0000] <devsnek>
O.o

[19:50:21.0000] <devsnek>
i just know from experience with languages that claim certain identifiers that it is very annoying

[19:50:33.0000] <devsnek>
even if it doesn't come up every minute

[19:51:01.0000] <ljharb>
how is that avoidable tho without making either "making identifiers" or "using builtin things" less aesthetic?

[19:51:21.0000] <devsnek>
i don't see the need for this assertion to be part of the spec

[19:51:31.0000] <ljharb>
wait, so are we on a break rn or are we waiting for someone to fill the last 8-9min?

[19:51:41.0000] <drousso>
^ +1

[19:51:44.0000] <drousso>
would love to make dinner

[19:51:52.0000] <shrutikapoor>
not on a break yet

[19:51:55.0000] <rickbutton>
waiting for PFC to get ready

[19:51:59.0000] <shrutikapoor>
"WE WERE ON A BREAK"

[19:52:09.0000] <devsnek>
good break everyone

[19:52:15.0000] <shu>
shrutikapoor: oh i get that reference now

[19:52:24.0000] <devsnek>
terrible reference

[19:52:30.0000] <rkirsling>
what's the reference?

[19:52:35.0000] <devsnek>
f.r.i.e.n.d.s

[19:52:37.0000] <shu>
shrutikapoor: i grew up with seinfeld and it wasn't until like a month ago that my wife made me watch all of friends now that it's on streaming

[19:52:46.0000] <shrutikapoor>
lol

[19:53:16.0000] <rkirsling>
it's really hard to watch for the first time now

[19:53:28.0000] <shu>
friends? how come?

[19:53:30.0000] <rkirsling>
it's _painfully_ 90's if you don't have nostalgia goggles

[19:53:37.0000] <shu>
oh ha, yes, that part's true

[19:54:02.0000] <rkirsling>
I watched a season and a half a while back, should probably continue

[19:54:05.0000] <rickbutton>
fraiser holds up pretty well, modulo kelsey grammar

[19:54:10.0000] <rkirsling>
also sorry, we should probably move to tdz

[19:54:25.0000] <devsnek>
advance q plz

[19:55:09.0000] <ljharb>
MylesBorins akirose ^

[19:55:48.0000] <MylesBorins>
which item are we on now again?

[19:55:53.0000] <ljharb>
GetOption

[19:55:56.0000] <jorendorff>
bears

[19:56:52.0000] <ljharb>
i'm still not seeing the slides ftr

[19:57:01.0000] <rickbutton>
io

[19:57:07.0000] <rickbutton>
i'm seeing them, on your end i tihnk

[19:57:40.0000] <ljharb>
i'm seeing istvan's placeholder pinned

[19:57:47.0000] <ljharb>
and there's no way to alter it

[19:58:13.0000] <ljharb>
oh hey there it goes

[20:01:22.0000] <shrutikapoor>
@rkirsling: Whats a tdz?

[20:01:34.0000] <akirose>
#temporaldeadzone

[20:01:44.0000] <rkirsling>
shrutikapoor: #temporaldeadzone, where all of our not-serious conversations happen :D

[20:01:48.0000] <akirose>
shrutikapoor: that's where the sass happens

[20:01:58.0000] <rkirsling>
;)

[20:02:03.0000] <shrutikapoor>
thanks lol

[20:02:28.0000] <ljharb>
sass, but not LESS

[20:02:50.0000] <rkirsling>
true

[20:02:57.0000] <shrutikapoor>
SASS > LESS

[20:03:32.0000] <rickbutton>
less < more

[20:05:08.0000] <akirose>
HEY EVERYONE

[20:05:27.0000] <akirose>
does anyone have a 30-ish minute timebox they want to tackle after lunch?

[20:05:34.0000] <akirose>
we have an open slot at the end of the day

[20:06:33.0000] <haxjs>
my proposal-deiter is 15 mins. Is that ok?

[20:07:36.0000] <akirose>
haxjs: if you can find another 15 min to team up with

[20:08:13.0000] <haxjs>
maybe Chengzong Wu's topic? I will ask him

[20:12:00.0000] <rbuckton>
rkirsling: I wrote down a very brief sketch about some helpful string APIs for either `String.prototype` or `Intl` if you're interested: https://gist.github.com/rbuckton/cc14f0ff97cf420f474996fee2f78a13

[20:12:36.0000] <rkirsling>
it seems like a good problem space

[20:13:10.0000] <devsnek>
is there a part of unicode for saying like

[20:13:24.0000] <devsnek>
`a` is latin, `–º` is cyrillic, `Œ∑` is greek, etc

[20:13:50.0000] <devsnek>
it doesn't have to be latin/cyrillic/greek but understanding that those characters are part of different sets

[20:14:21.0000] <rbuckton>
Rather than clutter `String.prototype`, I moved most of the design to an `Intl.StringInfo` namespace (though it can be called whatever), but I did put `.codePointCount()` and `.nthCodePoint(n)` on `String.prototype` because there's already a few code-point related APIs on `String`, so they feel somewhat more natural there.

[20:14:51.0000] <haxjs>
devsnek: can use regexp to test it, but i agree methods are much easy to use

[20:15:07.0000] <devsnek>
haxjs: you mean like `\p{Latin_Letter}` or whatever?

[20:15:12.0000] <haxjs>
yes

[20:15:26.0000] <devsnek>
yeah that's like the reverse of what i'm thinking of

[20:15:35.0000] <devsnek>
rbuckton: is that "unicode category" in your gist?

[20:16:25.0000] <rbuckton>
haxjs: Yeah, most of these methods are already in the spec since they need to exist for `RegExp` evaluation, but testing for them requires using a `RegExp` which can be expensive.

[20:17:05.0000] <rbuckton>
devsnek: no, I don't think so.

[20:19:31.0000] <akirose>
okay i have a taker on the 30 min slot

[20:21:14.0000] <devsnek>
i can rant for 30 minutes about hashing apis

[20:22:13.0000] <rbuckton>
Hashing?

[20:22:27.0000] <devsnek>
hashing values

[20:22:44.0000] <rbuckton>
cryptographic hashing or hashcodes for identity/equality purposes?

[20:22:50.0000] <devsnek>
oh the latter

[20:23:32.0000] <rbuckton>
I've been thinking about that too.

[21:01:13.0000] <michaelficarra>
devsnek: you're looking for scripts

[21:01:24.0000] <devsnek>
michaelficarra: hm?

[21:01:28.0000] <devsnek>
oh for the categorization

[21:01:36.0000] <devsnek>
i assume no way to query that from js

[21:01:50.0000] <michaelficarra>
sure there is, just in RegExps

[21:03:12.0000] <haxjs>
already start?

[21:03:54.0000] <robpalme>
yes

[21:04:10.0000] <michaelficarra>
devsnek: /^\p{Script=Greek}$/u.test('œÅ')

[21:04:15.0000] <devsnek>
michaelficarra: nothing O(1) :P

[21:04:27.0000] <devsnek>
have to iterate over tens of regexes

[21:05:39.0000] <michaelficarra>
sure, there's no API that gives you a character's script

[21:05:56.0000] <michaelficarra>
or any other Unicode property, to my knowledge

[21:06:55.0000] <ljharb>
could you make a single regex listing each of the scripts as a (named?) capturing group, and use .match to see which ones it matched?

[21:07:26.0000] <rickbutton>
the regex engine would iterate over each of those groups to see which one matched

[21:07:32.0000] <rickbutton>
would it not?

[21:07:47.0000] <devsnek>
faster than calling exec on each one

[21:07:53.0000] <rickbutton>
true

[21:08:06.0000] <devsnek>
i wonder if the unicode crates could help with this

[21:08:22.0000] <devsnek>
can we just add `Intl.CLDR` constants

[21:08:30.0000] <rickbutton>
are there ecosystem solutions? I imagine they just build a big object map from char->script

[21:08:42.0000] <devsnek>
yeah i think you could use data from the unicode crate to generate a map

[21:08:44.0000] <devsnek>
a large map

[21:08:55.0000] <rbuckton>
Write a script that uses RegExps to generate a script containing a function that takes in a codePoint and returns the script based on the value of the codepoint?

[21:09:03.0000] <michaelficarra>
we don't even have a titlecase operation on strings, asking for arbitrary Unicode property access is a bit of a stretch

[21:09:21.0000] <devsnek>
it can be on intl

[21:09:38.0000] <shu>
just a bag of... all units?

[21:10:09.0000] <devsnek>
`Intl.generalCategoryOf(c)`

[21:10:25.0000] <michaelficarra>
shu: yeah I can't imagine the use cases

[21:10:47.0000] <devsnek>
i wanted to make a thing to detect when people do stuff like "–ºƒ±Œ∑Œ±—ÇœÉ"

[21:10:57.0000] <devsnek>
for moderation purposes

[21:11:11.0000] <rbuckton>
devsnek: that's kind of like what I was talking about in https://gist.github.com/rbuckton/cc14f0ff97cf420f474996fee2f78a13

[21:11:37.0000] <rkirsling>
devsnek: I mean presumably not so far as to try to resolve œÉ to o though, right?

[21:11:39.0000] <michaelficarra>
devsnek: there's a few concepts you should be familiar with, let me get you the links

[21:11:47.0000] <devsnek>
rkirsling: no i don't want to normalize

[21:11:58.0000] <devsnek>
the normalization there would basically be OCR

[21:12:05.0000] <rkirsling>
right

[21:12:20.0000] <rkirsling>
just makin' sure

[21:12:26.0000] <devsnek>
different categories in the same string is a good indicator of someone doing that

[21:12:37.0000] <devsnek>
then you normalize it to "dumb nickname"

[21:13:30.0000] <michaelficarra>
devsnek: Unicode contains information on "confusables": http://www.unicode.org/reports/tr39/

[21:14:10.0000] <rickbutton>
neatr

[21:14:11.0000] <devsnek>
oh wow

[21:14:13.0000] <rickbutton>
*neat

[21:14:18.0000] <michaelficarra>
also, there is a concept called "mixed script" (http://www.unicode.org/reports/tr39/#Mixed_Script_Detection) which browsers use when displaying IDNs (or their punycode)

[21:14:29.0000] <michaelficarra>
so if it's mixed-script, it's suspect

[21:15:03.0000] <devsnek>
oh wow `# ( –ú ‚Üí M ) CYRILLIC CAPITAL LETTER EM ‚Üí LATIN CAPITAL LETTER M	#`

[21:15:23.0000] <michaelficarra>
people have used this data to make cool confusable string generators: https://www.irongeek.com/homoglyph-attack-generator.php

[21:15:36.0000] <rkirsling>
fascinating

[21:16:02.0000] <michaelficarra>
devsnek: yeah, there's a few Cyrillic characters that use the exact same glyph as their Latin counterparts

[21:16:52.0000] <devsnek>
not in the unicode package though

[21:16:54.0000] <devsnek>
might pr that

[21:18:59.0000] <michaelficarra>
I implemented confusables stuff for PureScript (which is interoperable with JS): https://github.com/michaelficarra/purescript-confusables

[21:19:09.0000] <devsnek>
ohnopurescript

[21:20:04.0000] <rkirsling>
TIL Hanb

[21:20:16.0000] <rkirsling>
does that subsume Hans or Hant or both?

[21:21:46.0000] <michaelficarra>
Hanb is "Han with Bopomofo", I don't know much beyond that

[21:21:50.0000] <rkirsling>
(seems like both, i.e. Hani, which I didn't know either)

[21:24:30.0000] <devsnek>
sent confusables.txt to friend at discord who did mention completion/user search

[21:28:19.0000] <rkirsling>
was that a casual Fiddler reference

[21:28:30.0000] <michaelficarra>
more people should know about Unicode confusables

[21:29:36.0000] <robpalme>
rkirsling:  Dan spent a long time considering % of audience who would clock that joke ;-)

[21:29:51.0000] <michaelficarra>
devsnek: they should also strip diacritics and case fold

[21:30:04.0000] <devsnek>
michaelficarra: yeah they already do some stuff

[21:30:17.0000] <devsnek>
i put them on the trail of S.p.normalize a few months ago

[21:30:20.0000] <rkirsling>
robpalme: nice

[21:39:23.0000] <littledan>
can someone click forward on the queue so that it's possible to respond?

[21:39:34.0000] <rickbutton>
they did you can respond

[21:42:48.0000] <devsnek>
brad4d: they can be used in sets/maps, but not weak sets/maps

[21:44:32.0000] <littledan>
akirose: I'm not sure which reply you're referring to

[21:54:48.0000] <littledan>
agree that these are good things to think about; disagree with "must" framing

[21:55:03.0000] <ljharb>
littledan: everybody has their own "must"s, to me this is a must.

[21:55:08.0000] <devsnek>
i feel like people get too caught up in object/primitive categorization

[21:55:17.0000] <littledan>
ljharb: I don't think this is a productive framing

[21:55:33.0000] <ljharb>
it's ok that we disagree on the productivity of the framing.

[21:56:20.0000] <littledan>
well, I think this is a real problem in the committee, as framing goals as "must" can shut down conversations where we could learn more

[21:56:44.0000] <littledan>
"you must not frame things this way" there

[21:56:54.0000] <littledan>
now what happens?

[21:56:58.0000] <ljharb>
that sounds like you're suggesting any hard constraints shut down discussion

[21:57:06.0000] <ljharb>
what happens is that constraints apply to spec changes, not to discussion

[21:57:15.0000] <ljharb>
so i'm allowed to apply "must"s to proposals, nobody's allowed to apply them to discussion.

[21:57:24.0000] <ljharb>
s/i'm/everybody is

[21:58:06.0000] <littledan>
sorry, it was a distracting joke

[21:58:42.0000] <Bakkot>
"allowed" is also kind of a bad framing

[21:58:47.0000] <devsnek>
i feel like people get too caught up in object/primitive categorization

[21:59:01.0000] <ljharb>
Bakkot: fair

[21:59:28.0000] <shu>
ljharb: i think you're misunderstanding identity as a property of "object" or "primitive". identity is a property of "encapsulated structure"

[22:00:04.0000] <ljharb>
pre-es6, the two overlapped. symbols changed that a bit

[22:00:16.0000] <shu>
it so happens there's a primitive/object divide, but that's not the reason for why things have identity

[22:00:38.0000] <devsnek>
symbols, depending on how you view them, are one example of that

[22:00:50.0000] <akirose>
rbuckton: you're up

[22:01:41.0000] <rbuckton>
yep

[22:02:09.0000] <akirose>
ystartsev_: you're on deck

[22:02:25.0000] <ystartsev_>
for process?

[22:02:26.0000] <ystartsev_>
got it

[22:02:27.0000] <ljharb>
shu: what is the reason?

[22:02:53.0000] <ystartsev_>
shu:  is your concern re: the primitives version of the proposal?

[22:02:54.0000] <devsnek>
because of their inherent encapsulated structure :P

[22:03:12.0000] <ljharb>
devsnek: what are symbols' encapsulated structure?

[22:03:39.0000] <devsnek>
same as a frozen object

[22:03:41.0000] <shu>
ystartsev_: i have no concern about the path of investigation, i was just responding to jordan

[22:03:50.0000] <devsnek>
they're a unique thing

[22:04:20.0000] <ljharb>
devsnek: how is "unique" a property of strucutre?

[22:04:22.0000] <ljharb>
*structure

[22:05:28.0000] <shu>
ljharb: actually how do Symbols have identity? you're talking about `Symbol() !== Symbol()`?

[22:05:33.0000] <shu>
like, the gensym case?

[22:05:43.0000] <michaelficarra>
so when is the next opportunity to reconsider our 4 short days and possibly go back to 3 longer days?

[22:05:48.0000] <ljharb>
shu: yes, it's the only primitive where you can duplicate the source text, but the result isn't `===`

[22:05:49.0000] <michaelficarra>
or are we stuck with 4 days forever now?

[22:06:15.0000] <devsnek>
i prefer four days when the time goes to 1am

[22:06:57.0000] <msaboff>
michaelficarra What don't you like about 4 days 5 hours each day?

[22:06:58.0000] <shu>
ljharb: my mental model is that Symbols still don't have identity, because what `Symbol()` does is to generate a new unique Symbol, not be a unit value like e.g. Number()

[22:07:19.0000] <rkirsling>
I am interested in the idea of scattering topics across timezones

[22:07:20.0000] <Bakkot>
msaboff I dislike the four day schedule because I basically don't get work done for four days now, instead of three

[22:07:24.0000] <michaelficarra>
msaboff: it's effectively 1/3 longer meetings

[22:07:25.0000] <ljharb>
shu: it's the only primitive that works that way tho

[22:07:34.0000] <msaboff>
Got it

[22:07:42.0000] <devsnek>
ljharb: depends on your definition of primitive

[22:07:43.0000] <shu>
ljharb: but since Symbol.for("foo") === Symbol.for("foo"), i don't consider it having identity

[22:07:50.0000] <ljharb>
devsnek: what's yours?

[22:08:01.0000] <Bakkot>
also, wrt the november meeting, I think I'd prefer three nights of being up almost all night over four nights of being up all night

[22:08:03.0000] <rickbutton>
it depends on what the definition if "is" is

[22:08:08.0000] <Bakkot>
but that might not be true; we'll see when it happens

[22:08:08.0000] <ljharb>
shu: that's just because global symbols are different - ie, memoized in a cross-realm registry

[22:08:16.0000] <michaelficarra>
I'd even prefer 4 longer days over 4 shorter days, just so that my time isn't going to waste

[22:08:19.0000] <devsnek>
ljharb: everything listed in "ECMAScript Language Types"

[22:08:19.0000] <ljharb>
Bakkot: +1 to that one

[22:08:20.0000] <rickbutton>
^ but really, do we have a formal definition of "identity" or it is just inherent from the definition of an object?

[22:08:33.0000] <msaboff>
Bakkot I agree that 3 days is preferably for the Nov meeting.

[22:08:33.0000] <shu>
ljharb: that's not "just because", that's the semantics

[22:08:35.0000] <jridgewell>
Shu, thats like saying `o = {}, o === o` means objects don't have identity.

[22:08:38.0000] <ljharb>
rickbutton: imo "identity" is "if you repeat the source text twice, the two results are !=="

[22:08:46.0000] <rickbutton>
that is not the way I think about identity

[22:08:52.0000] <devsnek>
jridgewell: there is some argument about how Symbol.for is described

[22:09:01.0000] <devsnek>
jridgewell: some people don't think of it in terms of a global map

[22:09:01.0000] <ljharb>
shu: well sure, but symbols still have identity - it's just that Symbol.for memoizes that identity-having symbol

[22:09:05.0000] <shu>
jridgewell: no, identity is always reflexiv?

[22:09:10.0000] <Bakkot>
the word "identity" is doing more harm than good here

[22:09:13.0000] <rkirsling>
^

[22:09:17.0000] <Bakkot>
we should have this debate without using it

[22:09:19.0000] <rkirsling>
it's a weird word for this I think

[22:09:27.0000] <michaelficarra>
ljharb: NaN

[22:09:29.0000] <rkirsling>
we're talking about definitional equality, yeah?

[22:09:37.0000] <ljharb>
michaelficarra: fair

[22:09:38.0000] <ljharb>
what term would you use "symbols and objects" versus "non-symbol primitives"?

[22:09:41.0000] <ljharb>
*use for

[22:09:53.0000] <ljharb>
michaelficarra: NaN is definitely the oddball

[22:10:00.0000] <rickbutton>
* non-Symbol.for symbols and objects vs "the rest"

[22:10:01.0000] <ystartsev_>
+1 to Bakkot

[22:10:02.0000] <Bakkot>
the way I would put it is that strings and numbers compare by their contents, objects and symbols do not

[22:10:03.0000] <ljharb>
michaelficarra: but i could tweak my definition to be `!Object.is()` instead of !== and it'd hold

[22:10:24.0000] <shu>
when i say identity, i mean the thing that values that do not compare by contents use to compare

[22:10:29.0000] <ljharb>
also booleans and null and undefined and bigints?

[22:10:30.0000] <shu>
that is the essence of identity

[22:10:32.0000] <ystartsev_>
yep, and that is the same mechanism we would see at work here

[22:10:36.0000] <shu>
if you compare by contents, you do not have identity

[22:10:43.0000] <ljharb>
shu: i agree with that

[22:10:50.0000] <Bakkot>
ljharb right, those things compare by contents

[22:11:07.0000] <ljharb>
Bakkot: and Symbol.for symbols?

[22:11:08.0000] <shu>
and my mental of Symbols is that they compare by content; it happens it's "implemented" in the spec by a cross-realm registry

[22:11:20.0000] <rickbutton>
^ this is also my mental model

[22:11:23.0000] <ljharb>
hmm

[22:11:27.0000] <ljharb>
what is the content of a symbol?

[22:11:29.0000] <rickbutton>
we just use the word identity as a shortcut

[22:11:38.0000] <devsnek>
my mental of symbols is identical to objects

[22:12:00.0000] <shu>
ljharb: for symbols resulting from Symbol.for, the string content, otherwise, just some sui generis thing

[22:12:04.0000] <ljharb>
i would very much disagree with the claim that symbols are compared by contents, they have no contents

[22:12:11.0000] <Bakkot>
yeah what shu said

[22:12:11.0000] <ljharb>
i didn't give it anything to contain

[22:12:18.0000] <shu>
you do...

[22:12:21.0000] <devsnek>
Symbol.for symbols contain a string

[22:12:21.0000] <rickbutton>
an empty string has contents

[22:12:24.0000] <rkirsling>
a private string

[22:12:27.0000] <Bakkot>
that's ok, 0 doesn't contain anything either but like

[22:12:38.0000] <ljharb>
Symbol('') !== Symbol(''), so the string isn't the contents it's comparing

[22:12:53.0000] <devsnek>
maybe they have a hidden number, a pointer for example

[22:13:04.0000] <devsnek>
:^)

[22:13:10.0000] <jridgewell>
And `Symbol.for('foo') !== Symbol('foo')`

[22:13:14.0000] <ljharb>
obv you can do mental gymnastics to make any mental model work, but i can't observe or provide that hidden number

[22:13:23.0000] <shu>
that's because the "description" isn't the contents?

[22:13:35.0000] <shu>
idk man, y'all have a lot of adherence to surface structure

[22:13:36.0000] <devsnek>
i don't get describing symbols differently from objects

[22:13:42.0000] <ljharb>
symbols are the same as objects. they don't compare by contents.

[22:13:55.0000] <ljharb>
they compare by "bakkot's forbidden term"

[22:13:59.0000] <devsnek>
i mean i understand it

[22:14:12.0000] <devsnek>
but i don't get why you would prefer that model to whatever your model is for objects

[22:14:27.0000] <rickbutton>
the spec uses the wording "the same value" when it needs to compare objects or symbols

[22:14:31.0000] <rickbutton>
for what it is worth

[22:15:06.0000] <littledan>
btw if people have concerns about an all-Igalia review team, then I encourage you to sign on or recruit a third reviewer

[22:15:08.0000] <rkirsling>
rbuckton: I like how you just *apologized* for being efficient with your time

[22:15:36.0000] <michaelficarra>
I hope we're not expected to have read this yet

[22:15:55.0000] <michaelficarra>
I never ended up reading it because there was still so much churn and back-and-forth in the PR

[22:16:00.0000] <rkirsling>
same

[22:16:13.0000] <rbuckton>
;)

[22:16:14.0000] <devsnek>
can we put a requirement on all our official documents to have `max-width: 60em`

[22:16:16.0000] <rkirsling>
I was gonna wait until the battling died down

[22:19:13.0000] <michaelficarra>
‚Ä¶ so are we never going to revisit 3 days vs 4 days?

[22:19:31.0000] <ljharb>
michaelficarra: probably best to file a reflector issue

[22:20:09.0000] <michaelficarra>
I was just wondering if we scheduled a date to revisit, but I guess we've made it permanent?

[22:20:39.0000] <ljharb>
i don't think it's permanent, the january meeting doesn't have a timezone picked yet afaik?

[22:20:47.0000] <rkirsling>
not so much permanent as like, we had inertia for one thing and now we have inertia on another thing

[22:21:22.0000] <michaelficarra>
I agree so much about the inability of taking the temperature of the room

[22:21:50.0000] <devsnek>
isn't that kind of antithetical to consensus, e.g. the goal is "is this unworkable" not "does everyone like this"

[22:21:53.0000] <michaelficarra>
someone must have solved this problem with software

[22:22:48.0000] <michaelficarra>
devnsek: it's still informative if we're about to advance something that most people have weak reservations about

[22:22:51.0000] <rkirsling>
michaelficarra: I think it may be that our process has been too dependent on a physical room

[22:22:55.0000] <michaelficarra>
*devsnek

[22:23:17.0000] <Bakkot>
fwiw I am always excited about the intl proposals

[22:23:28.0000] <devsnek>
intl is very cool

[22:23:36.0000] <littledan>
me too

[22:23:54.0000] <michaelficarra>
Intl basically can do no wrong in my book

[22:24:01.0000] <Bakkot>
I don't talk about them because a.) I don't know enough about the space to have opinions and b.) they basically all look good

[22:24:06.0000] <littledan>
What if we required an explicit "second" and "third" for proposal advancements?

[22:24:07.0000] <ljharb>
+1

[22:24:11.0000] <littledan>
like two non-champions voicing explicit support

[22:24:20.0000] <ljharb>
(to Bakkot)

[22:24:25.0000] <ljharb>
but actually i like littledan's idea too

[22:24:29.0000] <littledan>
:)

[22:24:42.0000] <ljharb>
not requiring unanimous enthusiastic consensus, but requiring more than one person being enthusiastic

[22:24:51.0000] <littledan>
(I would like to get a more broad view of the room, too; 2nd/3rd seems like a minimum)

[22:25:03.0000] <ljharb>
and theoretically should be super easy on a good proposal

[22:25:23.0000] <rkirsling>
littledan: I like it

[22:25:41.0000] <rickbutton>
not opposed, but it would be weird if it ended up being the same set of people voicing a +1 for consensus for every proposal

[22:26:04.0000] <rickbutton>
in the same way that some people talk more than others (not a bad thing, but an observation)

[22:26:07.0000] <rkirsling>
hmmmm

[22:26:32.0000] <Bakkot>
<devsnek hat> discord has emoji reactions for this situation! </devsnek hat>

[22:26:44.0000] <rkirsling>
loool. it's true though.

[22:26:47.0000] <Bakkot>
(that is a feature of discord I quite like)

[22:26:50.0000] <rickbutton>
üöÄ we also have emojis in discord

[22:26:54.0000] <rickbutton>
*irc

[22:27:00.0000] <devsnek>
i appreciate devsnek hat

[22:27:02.0000] <michaelficarra>
I want like a happiness slider that averages all of our individual happiness sliders

[22:27:07.0000] <rkirsling>
^ nice

[22:27:18.0000] <rickbutton>
michaelficarra: its 2020 lets not quantify our happiness

[22:27:35.0000] <littledan>
I like the emoji reacts idea too

[22:27:37.0000] <michaelficarra>
rickbutton: it doesn't have to apply outside a 30 second window

[22:27:44.0000] <rkirsling>
I agree with the current point in that I would have a really hard time being a sole objector on just about anything, given my personality

[22:27:50.0000] <littledan>
we could also literally just paste our emojis in IRC

[22:27:58.0000] <Bakkot>
true, but discord reacts are a lot... easier... somehow?

[22:28:08.0000] <Bakkot>
they feel less like an interjection and more like smiling

[22:28:08.0000] <devsnek>
everyone steps into a booth where they must win an argument with mark about the feature being at least as good as the equivalent in elang. if every member can do so, the feature passes

[22:28:08.0000] <littledan>
yeah they are

[22:28:14.0000] <rickbutton>
you can click an emoji that someone else already used, is the nice thing

[22:28:16.0000] <littledan>
(Matrix has emoji reacts also...)

[22:28:45.0000] <shu>
michaelficarra: Intl can do no wrong?

[22:28:54.0000] <devsnek>
did you know in discord you can type `+:emoji:` to react to the last message

[22:28:56.0000] <shu>
michaelficarra: what about `Intl.stringRepresentation = 'ebcdic'`

[22:29:02.0000] <rkirsling>
devsnek: or slack

[22:29:05.0000] <michaelficarra>
I am currently feeling (polar bear) about this proposal

[22:29:28.0000] <shu>
what does polar bear mean

[22:29:30.0000] <rickbutton>
if we are going full -live reactons- lets just get an audience clap meter set up

[22:29:33.0000] <shu>
ravenous?

[22:29:48.0000] <michaelficarra>
rickbutton: yes!

[22:30:06.0000] <devsnek>
the real reason -0 is important

[22:30:09.0000] <rkirsling>
live temp gauge

[22:30:15.0000] <rkirsling>
in TCQ

[22:30:18.0000] <rkirsling>
let's do this

[22:30:28.0000] <shu>
ljharb: given how against voting you are this seems like voting?

[22:30:41.0000] <ljharb>
shu: i definitely don't want voting, but i do want a way to measure the room

[22:30:54.0000] <rickbutton>
unfortunately you don't get to put a minus sign next to your ballot choice

[22:30:54.0000] <devsnek>
if you measure the room and no one likes it

[22:30:54.0000] <shu>
(not that i'm against that, i kinda like wasm's voting by a scale of "strongly against" to "strongly for")

[22:30:57.0000] <devsnek>
but no one objects

[22:30:57.0000] <ljharb>
shu: iow, a "-0" wouldn't block advancement, but it might encourage others to speak up about their own -0's

[22:31:10.0000] <ljharb>
shu: i think that if 90% of the room is -0, that's severely important information to surface

[22:31:10.0000] <littledan>
üê∏

[22:31:29.0000] <ljharb>
let the record show that dan is "frog" on this proposal

[22:31:34.0000] <shu>
ljharb: well, okay, in practice having a quantified temperature measure approaches voting in practice IME

[22:31:46.0000] <shu>
you can skirt around the formality of it

[22:32:01.0000] <ljharb>
shu: i think a "yes/no/abstain" is voting. I think having the "neutral, but negative/neutral, but positive" options drastically changes the dynamics

[22:32:03.0000] <littledan>
I think it's pretty different; it leaves room for judgement calls

[22:32:07.0000] <ljharb>
^ that

[22:32:13.0000] <devsnek>
if everyone feels meh about it, even though no one objects, that may drive the champion to pull it for a future meeting

[22:32:16.0000] <devsnek>
not an official vote

[22:32:20.0000] <devsnek>
but the effect of one

[22:32:23.0000] <ljharb>
but more importantly it signals to those in the room that might not otherwise be emboldened to endorse or objects

[22:32:23.0000] <shu>
why is that not a vote?

[22:32:24.0000] <ljharb>
*object

[22:32:26.0000] <shu>
other than you didn't call it a vote?

[22:32:39.0000] <ljharb>
shu: because if 90% of the room is -0, someone might decide to be -1

[22:32:45.0000] <littledan>
well, in particular, it'd be very weird to play vote counting schemes in that world

[22:32:49.0000] <ljharb>
shu: if nobody decides to be -1, it can advance

[22:32:51.0000] <littledan>
that's one concrete concern

[22:33:00.0000] <shu>
ljharb: that is a voting system to me

[22:33:02.0000] <littledan>
it also does not put "outvoting someone" on the table

[22:33:03.0000] <ljharb>
hm

[22:33:06.0000] <shu>
but i think i'm missing something

[22:33:11.0000] <Bakkot>
a single -1 feels like it should not block

[22:33:13.0000] <ljharb>
shu: in what way is that different than the current consensus process?

[22:33:14.0000] <Bakkot>
I was -1 on .item

[22:33:19.0000] <Bakkot>
S.p.item, that is

[22:33:28.0000] <shu>
ljharb: the current one is not quantified and tallied across all delegates on tcq

[22:33:31.0000] <shu>
which is what i thought you were proposing

[22:33:38.0000] <devsnek>
Bakkot: but you're +1 on S.p.item

[22:33:38.0000] <littledan>
this is a way to add a bunch of opinion-gathering *within* our consensus system

[22:33:39.0000] <rkirsling>
interesting: https://www.apache.org/foundation/voting.html#expressing-votes-1-0-1-and-fractions

[22:33:41.0000] <ystartsev_>
I feel like the scale should only be about temperature, blocking should still work as it is

[22:33:44.0000] <littledan>
I think that's very useful

[22:33:46.0000] <ljharb>
Bakkot: blocking would be -1, nonblocking icky would be -0, and by not blocking imo you'd be -0 in this system

[22:33:53.0000] <ljharb>
ystartsev_: agreed

[22:33:56.0000] <Bakkot>
ljharb that seems like not enough gradiation

[22:34:01.0000] <ljharb>
shu: i'm not talking about documenting the tallies

[22:34:07.0000] <littledan>
Bakkot: +üê∏

[22:34:08.0000] <Bakkot>
there is lots of stuff that I feel like "I don't think this is worth adding"

[22:34:19.0000] <ljharb>
Bakkot: no opinion on that, we can have a -10 to 10 scale as long as it's clear where the "block" threshold lives

[22:34:20.0000] <akirose>
Frank are you on IRC with a username that doesn't start with Frank?

[22:34:20.0000] <Bakkot>
S.p.item was "I feel like adding this with this semantics is actively harmful, but not enough to block"

[22:34:28.0000] <haxjs>
I think I would also -1 on .item because it seems we should use more time to discuss it :) but i don't want to block the whole proposal

[22:34:50.0000] <ystartsev_>
haxjs: thats an interesting take also -- just wanting to take more timee

[22:35:04.0000] <ljharb>
i think that would also have been reasonable to ask for (and it's in ystartsev_'s pr, iirc)

[22:35:19.0000] <ljharb>
but, only if "more time" is something that you could reasonably expect would change things

[22:35:32.0000] <rickbutton>
maybe the additional nuance around "non-blocking but icky" is useful (instead of simply -0)

[22:35:45.0000] <Bakkot>
I think "more time" often gives the rest of the committee a chance to form and express an opinion

[22:35:55.0000] <Bakkot>
even if it doesn't convince any of the major parties to the original discussion

[22:36:00.0000] <ljharb>
üëç if that's likely, that's always a valid reason to delay imo

[22:36:13.0000] <ljharb>
(also fine to err on the side of delay, too)

[22:36:33.0000] <akirose>
whoever has synchronous contact with Frank please let him know i was able to get one of his overflow items on the schedule tomrrow

[22:36:38.0000] <haxjs>
as i stated before ,it have a big pressure to make decision in the meeting in very short time, u need to a big confidence that u understand all things everyone said.

[22:36:40.0000] <ljharb>
but not every champion has "shipping speed" in "not the top place" in the priority list.

[22:37:01.0000] <ljharb>
haxjs: hopefully 10 day review time, plus github discussion, helps with that, but you are also quite correct

[22:37:10.0000] <littledan>
I think "more time" is valid when it's valid, but there are also limits to these days. For example, I think two months is enough time to discuss whether there should be String.prototype.item and come to one conclusion or other. There are other decisions that may make sense to consider for longer amounts of time.

[22:37:27.0000] <littledan>
s/days/delays/

[22:37:28.0000] <haxjs>
yeah, we have time to review , but sometimes there are many new input in the meeting.

[22:37:50.0000] <ljharb>
littledan: +1, haxjs: agreed

[22:37:58.0000] <littledan>
Right, so we have the agenda deadline; we could push that back, or be more strict about it

[22:38:24.0000] <ljharb>
we're pretty strict about it, things miss the deadline yet advance very rarely

[22:38:36.0000] <Bakkot>
things do come up in discussion, though

[22:38:48.0000] <Bakkot>
would be nice if we could more readily revisit discussions

[22:38:59.0000] <littledan>
there are some very large proposals that might take more than a week or two to review. For example, we agreed that Temporal should have at least a full meeting cycle between "stage 2 and frozen" and Stage 3

[22:39:01.0000] <Bakkot>
honestly, I'd be in favor of dedicating the last day to revising stuff from the earlier ones

[22:39:14.0000] <haxjs>
Especially for non-native speakers we heavily rely on reading notes in difficult topics (for example, membrane :)

[22:39:16.0000] <Bakkot>
so that we could ask for a delay without that meaning several more months

[22:39:37.0000] <rickbutton>
that would be neat if it didn't cut into existing time for proposals

[22:39:40.0000] <shu>
Bakkot: i'd be supportive of that idea, yes, a half day even

[22:39:40.0000] <littledan>
membrane stuff is difficult for everyone, not just non-native speakers. There's a lot of background that we haven't clearly presented to the committee

[22:39:47.0000] <rkirsling>
^

[22:39:54.0000] <rkirsling>
membrane is the most difficult IMO

[22:39:56.0000] <Bakkot>
rickbutton I think it is worth it even if it does cut into existing time for proposals

[22:39:56.0000] <littledan>
ideally people can raise the review requests or requests for more information ahead of the meeting.

[22:40:06.0000] <littledan>
I mean, requests to have more review time

[22:40:18.0000] <littledan>
this could help champions provide the needed information

[22:40:21.0000] <Bakkot>
littledan things do come up in discussion, though

[22:40:26.0000] <devsnek>
you have not truly lived until you've seen a presentation on membranes

[22:40:28.0000] <littledan>
yes, for sure

[22:40:30.0000] <rickbutton>
Bakkot, certainly useful, but more useful? maybe

[22:40:44.0000] <rkirsling>
devsnek: steamy membranes?

[22:40:52.0000] <michaelficarra>
devsnek: in person, for the full effect

[22:40:54.0000] <littledan>
if something new comes up, that can be a good reason to think about things for longer, I agree

[22:40:58.0000] <Bakkot>
rickbutton let me put it a different way: I think it would have better outcomes for the language

[22:41:09.0000] <devsnek>
michaelficarra: the pacing is part of the presentation

[22:41:27.0000] <michaelficarra>
the high CO2 content is necessary

[22:41:30.0000] <devsnek>
lol

[22:41:32.0000] <rickbutton>
Bakkot fair

[22:41:59.0000] <Bakkot>
+1 mark

[22:42:10.0000] <rkirsling>
devsnek: lol that one is a fact

[22:42:33.0000] <devsnek>
i'm motivated by both mark's points and ron's points

[22:42:39.0000] <devsnek>
+0, if you like

[22:42:44.0000] <Bakkot>
I bought a CO2 meter to bring to meetings and then we stopped having meetings for which it was relevant

[22:42:46.0000] <littledan>
devsnek: Same

[22:43:03.0000] <rkirsling>
devsnek: ¬±0 even?

[22:43:38.0000] <rickbutton>
Bakkot: we have CO2 meters in all the Bloomberg meeting rooms, its a fun way to get out of a meeting by checking the meter and claiming that there is no way we are making good decisions any more

[22:44:03.0000] <akirose>
omg that time Brian brought one to TC39 at Google in New York

[22:44:28.0000] <rkirsling>
I am not familiar with this practice lol

[22:44:37.0000] <devsnek>
lmao

[22:45:00.0000] <Bakkot>
rickbutton incredible

[22:45:10.0000] <Bakkot>
I wonder if I get budget for that

[22:45:16.0000] <michaelficarra>
rickbutton: why add CO2 meters and not oxygen?

[22:45:17.0000] <Bakkot>
if there are ever offices

[22:45:29.0000] <rickbutton>
michaelficarra: it does both, they are embedded in the tables

[22:45:32.0000] <devsnek>
michaelficarra: why not windows

[22:45:52.0000] <michaelficarra>
devsnek: oxygen delivery holes?

[22:45:59.0000] <devsnek>
lol

[22:46:23.0000] <rickbutton>
no openable windows in the BB NY offices

[22:46:35.0000] <devsnek>
depends on how you consider openable

[22:46:39.0000] <devsnek>
üî®

[22:46:46.0000] <michaelficarra>
you mean they're not closeable

[22:47:01.0000] <devsnek>
mfw no tape emoji

[22:47:50.0000] <Bakkot>
üìº

[22:48:14.0000] <devsnek>
https://i.kym-cdn.com/photos/images/facebook/000/909/991/48c.jpg

[22:48:22.0000] <Bakkot>
wait, this is the wrong channel, sorry

[22:48:34.0000] <michaelficarra>
pipobscure: new.target, they're called meta properties

[22:48:42.0000] <ljharb>
pipobscure: `super.foo`, as well

[22:48:47.0000] <devsnek>
`import.meta`

[22:49:36.0000] <michaelficarra>
hold up, have we already adopted the Apache voting?

[22:49:48.0000] <ystartsev_>
i think we are playing with it to see how it feels

[22:49:54.0000] <ljharb>
people are just saying numbers

[22:50:00.0000] <rkirsling>
-1 is full blocking though

[22:50:07.0000] <michaelficarra>
I am -e on this proposal

[22:50:11.0000] <ystartsev_>
rkirsling: i would disagree, blocking stays the same

[22:50:11.0000] <rkirsling>
if we do Apache-style

[22:50:17.0000] <devsnek>
-Number.EPSILON

[22:50:18.0000] <ljharb>
michaelficarra: that's over twice a block

[22:50:27.0000] <Bakkot>
don't think we should assign numbers to blocking

[22:50:31.0000] <Bakkot>
if you want to block you say so

[22:50:33.0000] <devsnek>
is small `e` epsilon

[22:50:33.0000] <rkirsling>
ah okay

[22:50:35.0000] <ystartsev_>
sorry my irc isn't really working

[22:50:35.0000] <michaelficarra>
ljharb: you're right, I should make it bigger

[22:50:36.0000] <Bakkot>
numbers are for expressing sentiment

[22:50:38.0000] <rkirsling>
that works for me

[22:50:43.0000] <ljharb>
too bad there's no Math.clamp

[22:50:52.0000] <devsnek>
or euler's number

[22:50:55.0000] <ljharb>
devsnek: E is epsilon, iirc?

[22:51:06.0000] <devsnek>
ü§∑üèª

[22:51:15.0000] <rkirsling>
euler's number

[22:51:22.0000] <michaelficarra>
> The number¬†e, known as Euler's number, is a¬†https://en.wikipedia.org/wiki/Mathematical_constant¬†approximately equal to 2.71828

[22:51:25.0000] <rkirsling>
Math.E vs. Number.EPSILON

[22:51:42.0000] <ljharb>
it's also Math.PI, so obv Math is just shouty

[22:51:56.0000] <Bakkot>
constants are all caps

[22:51:58.0000] <Bakkot>
traditionally

[22:52:09.0000] <ljharb>
Symbol.iterator?

[22:52:10.0000] <michaelficarra>
lol undefined.something

[22:52:27.0000] <michaelficarra>
(legal syntax)

[22:52:30.0000] <Bakkot>
what about symbol.iterator?

[22:52:36.0000] <devsnek>
Symbol.ITERATOR

[22:52:37.0000] <ljharb>
why not Symbol.ITERATOR

[22:52:41.0000] <ljharb>
it's a frozen property

[22:52:48.0000] <Bakkot>
that is not a constant in the sense in which œÄ is a constant

[22:52:48.0000] <ljharb>
more constant than Math.PI, even

[22:52:58.0000] <ljharb>
how so? it's an unchangeable cross-realm value :-p

[22:53:06.0000] <devsnek>
i don't think of Symbol.iterator as a constant

[22:53:13.0000] <devsnek>
i'm not sure how to explain this intuition

[22:53:16.0000] <Bakkot>
œÄ is a constant in the math sense

[22:53:23.0000] <rickbutton>
it doesn't go into .rodata

[22:53:29.0000] <Bakkot>
lol

[22:53:31.0000] <ljharb>
window.Infinity, then

[22:53:33.0000] <devsnek>
rickbutton: i have news for you

[22:53:38.0000] <rickbutton>
:)

[22:53:38.0000] <ljharb>
globalThis.Infinity, sorry

[22:53:42.0000] <ystartsev_>
rkirsling: sorry, to finish --> i think blocking should continue as is, with a reason

[22:53:51.0000] <Bakkot>
infinity I could see a case for

[22:53:54.0000] <ystartsev_>
gosh, why did irc have to poot out on me now

[22:54:01.0000] <ljharb>
also NaN, why not NAN

[22:54:06.0000] <gibson042>
Number.POSITIVE_INFINITY

[22:54:08.0000] <rkirsling>
ystartsev_: yeah Bakkot expressed similarly, that sounds good üëç

[22:54:14.0000] <ljharb>
i stand by Math being shouty

[22:54:16.0000] <Bakkot>
NaN is just precedent from other languages

[22:54:24.0000] <rkirsling>
ystartsev_: I wasn't sure just how Apache-ish we were looking to go

[22:54:34.0000] <michaelficarra>
did Ron just withdraw this proposal? üôè

[22:54:39.0000] <ystartsev_>
yes, i think so

[22:54:44.0000] <ljharb>
wait what? i didn't hear that

[22:54:47.0000] <ljharb>
rbuckton: ?

[22:55:18.0000] <rkirsling>
I love that we're actually trying these numbers

[22:55:20.0000] <rkirsling>
no joke

[22:55:37.0000] <devsnek>
i've lowkey used them in the past

[22:55:40.0000] <michaelficarra>
rkirsling: I agree, it is already helping me

[22:55:41.0000] <rbuckton>
I didn't withdraw, but its under consideration.

[22:55:45.0000] <ystartsev_>
ah ok

[22:55:46.0000] <ljharb>
rbuckton: ty

[22:55:59.0000] <ystartsev_>
i do like the numbers, it feels nice to get a sense of where people are

[22:56:35.0000] <shu>
i do not fully understand what hax is arguing for, that we should reserve `class.` for future use cases?

[22:56:45.0000] <michaelficarra>
shu: yeah sounds like it

[22:56:58.0000] <devsnek>
i just got kicked out of tcq

[22:57:03.0000] <devsnek>
reloading fixed

[22:57:04.0000] <devsnek>
very odd

[22:57:20.0000] <shu>
michaelficarra: thx

[22:57:53.0000] <ljharb>
how would a decorator function, defined in another file, be able to use special syntax?

[22:58:08.0000] <michaelficarra>
I think this syntax space has the potential to be used for FAR more valuable proposals than this

[22:58:15.0000] <ljharb>
such as?

[22:58:31.0000] <ljharb>
(do you feel the same about `static.`?)

[22:58:50.0000] <rkirsling>
`static.` seems less bad

[22:59:15.0000] <ljharb>
so your concern isn't "this is a bad feature", it's "this syntax should be put to better use"?

[22:59:31.0000] <michaelficarra>
I would feel the same about just about any syntax, since I see this proposal as having just about zero value

[22:59:39.0000] <ljharb>
rbuckton: why wouldn't `class.#x` work? did i miss that slide

[22:59:42.0000] <michaelficarra>
ljharb: why not both?

[22:59:51.0000] <ljharb>
michaelficarra: noted

[23:00:00.0000] <rkirsling>
I think "papercut" is a good metaphor

[23:00:14.0000] <littledan>
haxjs: it's hard for me to understand which sense of metadata you want to be made especially available within the lexical scope of the class

[23:00:41.0000] <rkirsling>
one never _needs_ to use an anonymous class, right?

[23:00:42.0000] <rbuckton>
`static` could be a reserved identifier inside of a class, given that its currently restricted inside of a class...

[23:00:56.0000] <haxjs>
littledan: I just use decorator as example, if there is no usecase, i would think class.xxx is not worth.

[23:01:10.0000] <ljharb>
rkirsling: when decorating an anonymous class, one must produce one, if one wants to be unobservable

[23:01:16.0000] <littledan>
I like the idea of using static.foo for this, if we do add it

[23:01:33.0000] <michaelficarra>
rkirsling: nope: https://github.com/tc39/proposal-class-access-expressions/issues/13

[23:01:38.0000] <rkirsling>
ljharb: oh that's where decorators come in. sorry, I didn't follow this particular thread

[23:01:38.0000] <haxjs>
yeah we have a addition that u can `new static` but not `new class`

[23:02:23.0000] <littledan>
haxjs: Oh, I see. Yeah, I could think of other cases for `class.` Another totally unrelated case is, if we really don't want to use [no LineTerminator here], then we could make value classes declared as `class.value C { }`, etc

[23:02:45.0000] <rbuckton>
IRCCloud keeps failing to send my messages.

[23:04:09.0000] <haxjs>
littledan: yeah `class.value C {}` is great example of keeping the syntax space. thank u!

[23:04:32.0000] <littledan>
or `class.typed`, etc

[23:05:40.0000] <haxjs>
it always make me think whether we can have a convention of use keyword.xxx for new keyword. like await.all .

[23:05:44.0000] <rbuckton>
Can't say I'm a fan of `class.value C {}`. That's using `.` in a completely different way than we've ever used it in the language. I'd rather see `value class C {}` or `struct C {}` than that. Except for numbers and regexp's, `.` should stay in the realm of property access

[23:06:42.0000] <haxjs>
rbuckton:  The point is not every case we could have `xxx keyword` or `keyword xxx`. For example `await.all` case.

[23:06:43.0000] <akirose>
by the way THANK YOU SO MUCH NOTE TAKERS

[23:07:12.0000] <robpalme>
the note takers were great today.

[23:07:42.0000] <haxjs>
also `with suffix x = ...` many people don't like overload `with`, but i guess `const.suffix x = ...` could get more acceptence??

[23:07:59.0000] <rbuckton>
Teams has a feature where you can use the auto captions to create a transcript of the meeting. I wonder if that would be helpful for notetaking?

[23:08:15.0000] <Bakkot>
re: notes: I am playing with hooking the google speech-to-text API up to google docs

[23:08:21.0000] <Bakkot>
turns out that API is super cheep

[23:08:30.0000] <Bakkot>
and then note takers would just need to fix its jank

[23:08:43.0000] <Bakkot>
not sure it will be good enough though

[23:09:10.0000] <michaelficarra>
worst case, we can try it in parallel and compare the results

[23:09:12.0000] <rkirsling>
post-editing is infinitely easier than writing so I would bet it'd be good enough

[23:09:17.0000] <rickbutton>
would love to trial it if you get it set up

[23:09:36.0000] <rbuckton>
The main thing I dislike about the transcription in Teams (at least, the last time I used it), is that it doesn't attribute the text to the speaker (which it seems like it should be able to do).

[23:09:47.0000] <littledan>
haxjs: yeah, I could see `const.suffix` but I do think that many people see the `.` as ugly in that sort of case. Anyway the objections were more about namespaces than the surface syntax

[23:09:50.0000] <haxjs>
rbuckton: can't find auto caption in the menu...

[23:09:52.0000] <shu>
good night all

[23:10:13.0000] <Bakkot>
my approach will not do attribution, so we'd need humans for that

[23:10:35.0000] <Bakkot>
rbuckton is the transcript live-editable, or just a document you download after the fact?

[23:10:55.0000] <rickbutton>
good night shu

[23:11:06.0000] <littledan>
Good morning everyone

[23:11:14.0000] <rickbutton>
lmao

[23:11:21.0000] <rbuckton>
It may be a preview feature (which requires opt-in in Settings): https://usercontent.irccloud-cdn.com/file/SEazNmdK/image.png

[23:12:20.0000] <haxjs>
littledan: they may slightly related. i guess programmers see `const.suffix x = ...` and would not expect it could be in the same namespace of `const/let`.

[23:13:01.0000] <rbuckton>
Hmm: https://usercontent.irccloud-cdn.com/file/K9zrsL1i/image.png

[23:14:27.0000] <rbuckton>
It did a fairly good job understanding me, and it looks like it does now have attribution. I don't see a way to export it, however, but it could be useful for note-takers if something is missed.

[23:15:16.0000] <rbuckton>
rather, no way to export other than Copy/Paste, since you *can* select the text of the transcription

[23:16:26.0000] <haxjs>
great! where can i download preview version of team so i can try it tommorow?

[23:17:52.0000] <rbuckton>
IIRC, you can opt into preview features from the settings of the desktop app: https://usercontent.irccloud-cdn.com/file/7X4DmJN4/image.png

[23:19:24.0000] <haxjs>
Get it! Thank u!

[10:06:35.0000] <gibson042>
I just ran across another spatial chat system: https://gather.town/ . It's two-dimensional, which I like, and has a convenient full-space map

[10:14:24.0000] <shu>
gibson042: how's the cpu/gpu consumption on it?

[10:15:53.0000] <ljharb>
my company uses that. i vastly prefer hubs.

[10:15:54.0000] <devsnek>
we used theonline.town once

[10:16:13.0000] <ljharb>
gather.town is basically the same as theonline.town

[10:16:24.0000] <shu>
are there domains on .town that are these spatial chat apps?

[10:16:33.0000] <shu>
that aren't*

[10:16:44.0000] <devsnek>
looks like gather took online and commercialized it

[11:00:37.0000] <gibson042>
cpu/gpu seem to not be excessive, but I'm not sure how they compare to other options


2020-09-23
[17:47:02.0000] <ryzokuken>
does the meeting start dot at time?

[17:47:30.0000] <ryzokuken>
if one of the chairs could let me in, I'd ensure that my tech setup works one final time üòÖ

[18:01:38.0000] <devsnek>
hello everyone!

[18:03:15.0000] <Bakkot>
morning all

[18:06:45.0000] <ljharb>
rkirsling: you can't change your name unless you're a guest

[18:07:25.0000] <rkirsling>
üëç

[18:08:43.0000] <ljharb>
are there slides being shown?

[18:08:53.0000] <devsnek>
yes

[18:08:57.0000] <ljharb>
damnit teams

[18:09:12.0000] <ljharb>
aha, switching out of the app and back fixed it for some reason

[18:10:12.0000] <ljharb>
fun hackmd thing, apparently making the days collapsible prevents clicking on links contained in the day heading

[18:14:04.0000] <jorendorff>
All the features are implemented in SM, actually, the slides are out of date

[18:14:09.0000] <jorendorff>
but, they're not shipping yet

[18:14:47.0000] <jorendorff>
to be fair, private methods are inefficient as implemented, we have to fix them before shipping

[18:14:49.0000] <ljharb>
jorendorff: yay, put that on the queue :-p

[18:17:32.0000] <littledan>
yay!

[18:19:16.0000] <shu>
who is speaking?

[18:19:20.0000] <ljharb>
"wenbo z"

[18:20:03.0000] <ljharb>
would it be useful for the chairs to clarify how our process works prior to a future advancement request?

[18:21:30.0000] <haxjs>
Wenbo Zhao is the GA rep of 360.

[18:24:04.0000] <akirose>
fyi devsnek i rearranged you and Frank so both of you have your own topics back to back instead of across two days

[18:24:36.0000] <devsnek>
ok

[18:24:45.0000] <devsnek>
if it makes the schedule better feel free to split mine up

[18:25:00.0000] <akirose>
Frank wanted his to be back to back and it worked really nicely with yours

[18:25:06.0000] <akirose>
but thank you ‚ô•Ô∏è

[18:32:00.0000] <Bakkot>
re: mark's point: that shorthand syntax was indeed in an earlier version of this proposal; strong agree

[18:32:21.0000] <shu>
i see a lot of queue items reacting to the WeakMap-like reification: IIUC that's an explicit non-goal of this proposal and not included in this proposal

[18:32:36.0000] <littledan>
I deleted my queue item since I agree with Mark's various points; I don't have more to add

[18:32:57.0000] <devsnek>
i explicitly want us to reify private fields :(

[18:33:24.0000] <shu>
sure, that's not this proposal

[18:33:37.0000] <jorendorff>
Is it really true no language binds the name of a field to some reification of that field, rather than the value of the field?

[18:34:05.0000] <jorendorff>
statements of the form "no programming language has ever done X" have a low prior probability for me

[18:34:09.0000] <Bakkot>
jorendorff among languages which use `.` for field access? none that I'm aware of, though I don't know every language

[18:34:18.0000] <ljharb>
does any other language actually avoid breaking instance privacy with a reflection mechanism?

[18:34:57.0000] <rickbutton>
yep

[18:34:58.0000] <rickbutton>
no

[18:35:02.0000] <rickbutton>
i read that backwards

[18:37:54.0000] <littledan>
I'm really having trouble making sense of haxjs 's arguments here

[18:38:20.0000] <shu>
^ i am having trouble as well

[18:38:27.0000] <littledan>
Mark has explained how reification would be different from the syntax here (and has done so several times previously), both in terms of syntax and capabilities

[18:39:00.0000] <jorendorff>
ok so ... Alloy isn't an OO language, it's a relational language, but it uses `.` and fields are reified

[18:39:23.0000] <shu>
jorendorff: fascinating, link?

[18:39:30.0000] <jorendorff>
Alloy also isn't ... a programming language

[18:39:35.0000] <jorendorff>
but it IS fascinating

[18:39:37.0000] <devsnek>
the specification language?

[18:39:58.0000] <jorendorff>
yeah

[18:40:04.0000] <devsnek>
that thing is weird lol

[18:40:07.0000] <jorendorff>
shu: the best thing to read AFAIK is the language reference http://alloytools.org/download/alloy-language-reference.pdf

[18:40:49.0000] <rkirsling>
is it like, prolog but less expressive?

[18:42:18.0000] <rkirsling>
er like at a glance it's reminding me of something like LEAN or Coq but again...smaller?

[18:43:39.0000] <jorendorff>
huh. i think it must be weaker than Lean and Coq. feels more along the lines of prolog/datalog, but i don't know enough about that space to say more :-\

[18:43:50.0000] <ljharb>
jridgewell: you're a bit quiet btw

[18:44:45.0000] <rkirsling>
Yeah. I've used each of Coq and Lean a bit but never Prolog (though I know it's Yulia's favorite)

[18:44:57.0000] <jorendorff>
i like Lean

[18:53:12.0000] <jorendorff>
yes, good point. i would definitely assume that `#x` is an expression I can use anywhere, and then i would see the syntax error once, and then I'd be like "well this is stupid" (unjustly) and probably go look it up to make sure i understood

[18:54:57.0000] <rkirsling>
I mean I *definitely* don't think that anything in JavaScript should lead one to believe that `this.` would ever be droppable

[18:55:12.0000] <jorendorff>
yyyes, but mark's objection comes as a surprise to me, as worded

[18:55:54.0000] <rkirsling>
yeah sorry that was in reaction to his statement, not yours üòÖ

[18:56:25.0000] <jorendorff>
we're on the same page (you and I, not mark and I)

[18:56:34.0000] <rkirsling>
yeah

[18:57:08.0000] <devsnek>
what if we just make `#x` a thing you can use anywhere

[18:57:38.0000] <ljharb>
that would be the "private symbol" reification, which mark specifically has said wouldn't work

[18:58:12.0000] <jridgewell>
I think Waldemar actually made Mark's point stronger

[18:58:37.0000] <littledan>
I agree with Jordan here on this subset/syntax error point; this has been what the design of private fields and methods was based around

[18:58:39.0000] <jridgewell>
Having `#x.get` be something different than `this.#x.get` would be very surprising

[18:59:12.0000] <jridgewell>
(That' doesn't mean Mark is arging that `#x` should be shorthand for `this.#x`)

[18:59:36.0000] <jorendorff>
currently, if you go to type `this.toString()` and accidentally type `toString()` instead, it's weird

[18:59:37.0000] <jridgewell>
`#x` in Mark's comment would be a WeakMap

[19:00:07.0000] <devsnek>
who needs `#x.get(v)` when you have `v[#x]`

[19:00:12.0000] <jridgewell>
So `#x.get` would take an object to get from, where `this.#x.get` would be the value at `this.#x`, which apparently has a map API

[19:00:17.0000] <jorendorff>
but that doesn't seem to be a big problem?

[19:00:41.0000] <jridgewell>
devsnek: You can't pass around syntax lik e`v[#x]`

[19:00:54.0000] <jridgewell>
You could pass around `#x` if it reified to a map

[19:01:06.0000] <jorendorff>
jridgewell: I think devsnek means `#x` should be more symbol-like

[19:01:15.0000] <devsnek>
yeah like we should just make it a value

[19:01:16.0000] <jorendorff>
in that view, it is a value and you can pass it around

[19:01:29.0000] <devsnek>
every possible suggestion is causing confusion with expressions in some way

[19:01:42.0000] <jridgewell>
If it becomes a Private Symbol, then that would work

[19:01:48.0000] <jridgewell>
But I don't think we're going to get them

[19:01:49.0000] <devsnek>
confusion with them cuz lhs of `in`, confusion cuz `#x.y`, confusion cuz `x[#y]`

[19:01:51.0000] <devsnek>
there's no winning

[19:02:51.0000] <jorendorff>
hear me out, let's start over with R4RS scheme...

[19:02:52.0000] <jorendorff>
</joke>

[19:03:24.0000] <shu>
R*4*RS

[19:04:21.0000] <jorendorff>
shu: i think tradition has it that the first one you personally implemented is the last good one

[19:04:29.0000] <devsnek>
crazy to me that private symbols is outside the realm of people's mental models but adding a new kind of object is a-ok

[19:04:36.0000] <shu>
ah, very well

[19:06:42.0000] <devsnek>
new decorators look reasonable iirc

[19:06:59.0000] <ryzokuken>
super excited about it!

[19:10:27.0000] <michaelficarra>
I think this is supposed to say "bar"?

[19:10:43.0000] <michaelficarra>
Also foo/bar are terrible names, please don't use them in examples

[19:10:46.0000] <michaelficarra>
use Pokemon

[19:11:27.0000] <devsnek>
use js ui libraries

[19:11:32.0000] <devsnek>
there are thousands to choose from

[19:12:34.0000] <ryzokuken>
pokemon are fun tho

[19:14:00.0000] <jorendorff>
dynamic language features are also fun

[19:14:19.0000] <jorendorff>
I think we're meant to be learning that fun is bad

[19:14:31.0000] <devsnek>
dynamic scoping!

[19:15:49.0000] <rkirsling>
yeah that extended pokemon example was inspiring

[19:16:02.0000] <rkirsling>
definitely will use game references in future presentations

[19:17:17.0000] <ljharb>
might be a fun game, without googling, figure out which obscure universe is being referenced by names of things

[19:17:30.0000] <devsnek>
slide show but everything is don't hug me i'm scared references

[19:17:37.0000] <rkirsling>
devsnek: approve

[19:18:01.0000] <rkirsling>
throw error upon setting color to green

[19:18:13.0000] <Bakkot>
should start using the names of mathematical objects

[19:18:30.0000] <devsnek>
`let lattice = 4`

[19:18:30.0000] <ljharb>
for example, zummi/gruffi/grammi/tummi/sunni/cubbi/gusto/chummi

[19:18:51.0000] <ryzokuken>
I thought it would be more fun if people actually got the reference lol

[19:19:57.0000] <akirose>
ljharb: too easy

[19:20:18.0000] <akirose>
also just reading that makes my teeth hurt

[19:20:20.0000] <shu>
Bakkot: you mean like x, x', x'', x''', x''''

[19:20:29.0000] <ljharb>
akirose: only too easy for the cool kids

[19:20:32.0000] <leobalter>
did we all lost Chris' audio for a few seconds?

[19:20:42.0000] <leobalter>
ok sounds like yes

[19:21:10.0000] <devsnek>
just teams things

[19:21:28.0000] <ryzokuken>
I had to perform 13 satanic rituals to make it work

[19:21:35.0000] <littledan>
whew, what a relief

[19:21:41.0000] <devsnek>
glad it wasn't 14

[19:21:42.0000] <akirose>
ljharb: you mean people in their 30s

[19:21:48.0000] <ryzokuken>
(p.s. it still doesn't, I had to use chromium)

[19:21:50.0000] <gibson042>
ryzokuken: I too have used perl in anger

[19:22:02.0000] <leobalter>
my internet is also bouncy this week so it could be me as well

[19:22:03.0000] <ryzokuken>
lol

[19:22:05.0000] <devsnek>
wait when did this become not-tdz

[19:22:16.0000] <ljharb>
oops

[19:22:17.0000] <gibson042>
whoops

[19:22:22.0000] <akirose>
AHAHAHA

[19:22:41.0000] <mmarchini>
Teams is clearly trolling us

[19:22:50.0000] <shrutikapoor>
trololololol

[19:23:13.0000] <mmarchini>
Blocking proposal via technical issues

[19:23:16.0000] <ryzokuken>
petition to move to the most reliable mode of comms

[19:23:23.0000] <mmarchini>
üôÉ

[19:23:28.0000] <ryzokuken>
i.e. VNC for screenshare plus a SIP call

[19:23:30.0000] <leobalter>
is this the shareware version of Teams?

[19:23:35.0000] <devsnek>
lol

[19:23:57.0000] <leobalter>
pay for the full content

[19:24:01.0000] <ryzokuken>
"teams trial expired"

[19:24:35.0000] <leobalter>
This copy of Teams is not genuine

[19:29:20.0000] <rickbutton>
here just use this to activate: "FCKGW RHQQ2 YXRKT 8TG6W 2B7Q8"

[19:29:39.0000] <devsnek>
pf

[19:29:51.0000] <ryzokuken>
rickbutton: did you read the code from the CD?

[19:30:02.0000] <rickbutton>
from memory of course

[19:30:04.0000] <jridgewell>
Can else hear the WAREZ keygen music?

[19:30:29.0000] <jridgewell>
/me sees myself to TDZ

[19:31:44.0000] <michaelficarra>
how are people going to remember all these signatures for the different kinds of decorators and when they apply?

[19:32:22.0000] <devsnek>
aren't there just two

[19:32:35.0000] <devsnek>
(v, context) and ({ get, set }, context)

[19:32:38.0000] <michaelficarra>
I guess the same way people have to deal with options bags, look at the docs every time

[19:33:02.0000] <jridgewell>
I think this is actually the simplest decorators API yet.

[19:33:09.0000] <devsnek>
definitely the simplest one

[19:33:09.0000] <michaelficarra>
{method, initialiser} or something?

[19:33:15.0000] <akirose>
i can't imagine life without Alfred & Dash (& MDN)

[19:33:18.0000] <JemYoung>
I'm digging it so far

[19:33:23.0000] <akirose>
it's a lot to remember regardless

[19:33:50.0000] <akirose>
i'm not saying it's not a legitimate concern‚Äîit's a v real concern for me

[19:33:50.0000] <akirose>
but also, it's already a lot to remember

[19:33:50.0000] <jridgewell>
v2 API was overflowing with customization

[19:33:54.0000] <devsnek>
when someone recites the splice signature from memory

[19:33:57.0000] <michaelficarra>
yeah I either MDN or just go straight to the spec, depending if I know exactly where to look

[19:34:31.0000] <michaelficarra>
devsnek: offset, length, replacements array? is that right?

[19:34:35.0000] <rkirsling>
devsnek: I mean it's not `tar` flags at least

[19:34:37.0000] <devsnek>
idk i'd have to check

[19:34:49.0000] <devsnek>
for tar i just always pass `-xvf`

[19:34:53.0000] <devsnek>
idk what they do but it seems to work

[19:34:59.0000] <jridgewell>
variadic insertions, not an array

[19:35:00.0000] <rkirsling>
what about -c

[19:35:07.0000] <michaelficarra>
jridgewell: ah, so close

[19:35:09.0000] <devsnek>
idk what -c is so i can't comment

[19:35:13.0000] <rkirsling>
me neither

[19:35:31.0000] <jridgewell>
I use it as an interview question üòà

[19:35:44.0000] <devsnek>
oh yeah you like javascript? name every function

[19:35:52.0000] <michaelficarra>
jridgewell: please no!

[19:36:02.0000] <ljharb>
for tar i have to memorize eXtract Ze Files, Verbosely

[19:36:11.0000] <jridgewell>
Lol. My interview question uses it, but knowing the signature isn't required.

[19:36:31.0000] <rkirsling>
devsnek: name every function on the `Math` namespace would be hard enough

[19:36:55.0000] <rkirsling>
ljharb: ohh it was -z not -c

[19:37:11.0000] <rkirsling>
so close

[19:37:30.0000] <devsnek>
overall this proposal seems pretty good

[19:37:47.0000] <ljharb>
shu: which use cases do you find least compelling?

[19:38:04.0000] <shu>
ljharb: hm, the least? probably metadata personally

[19:38:15.0000] <ljharb>
gotcha

[19:38:18.0000] <devsnek>
metadata is take it or leave it

[19:38:26.0000] <shu>
i don't have a use case in mind that is much less compelling than the others as much as i have a use case that is much more compelling than the others: fields

[19:38:39.0000] <rkirsling>
I've always felt terrified about the decorators proposal so this definitely seems like the least terrifying iteration

[19:38:45.0000] <shu>
class decorators as well, i don't find super compelling

[19:38:50.0000] <rkirsling>
oops I meant to say that in tdz

[19:38:59.0000] <devsnek>
shu: enough that you don't want them to be part of the proposal?

[19:39:13.0000] <shu>
devsnek: hard to say right now

[19:39:57.0000] <shu>
devsnek: i think the class decorator use case is probably fine with existing function call syntax, unless i'm missing something

[19:40:17.0000] <devsnek>
wdym "fine with existing function call syntax"

[19:40:41.0000] <shu>
devsnek: class C {} \n decorate(C) ?

[19:40:43.0000] <jridgewell>
`let Decorated = decorate(class Inner {})`

[19:41:03.0000] <devsnek>
isn't that true of everything

[19:41:07.0000] <shu>
not of fields, no

[19:41:11.0000] <devsnek>
decorate(C) where C has fields

[19:41:22.0000] <michaelficarra>
so decorated methods can be new'd?

[19:41:26.0000] <jridgewell>
That wouldn't give access to private fields

[19:41:54.0000] <devsnek>
is there some bad thing about class decorators i'm not aware of

[19:41:58.0000] <shu>
devsnek: there's no way to do the transform of data property -> getter/setter pair with function calls

[19:42:08.0000] <ljharb>
michaelficarra: that seems like a good issue to file - ensuring that decorated methods can't be newed

[19:42:55.0000] <michaelficarra>
ljharb: it doesn't sound like an issue, it sounds inevitable with this design

[19:43:43.0000] <ljharb>
ah right, it'd be weird if the decorator return got its [[Construct]] changed, so the only alternative is forcing them to `return { foo() {} }.foo` or something :-.

[19:44:00.0000] <michaelficarra>
yep

[19:44:23.0000] <Bakkot>
alternatively, we should make methods newable

[19:44:27.0000] <Bakkot>
they should always have been

[19:44:40.0000] <Bakkot>
static methods at the very least

[19:44:43.0000] <devsnek>
very important use case

[19:44:56.0000] <ljharb>
static methods, fair.

[19:45:06.0000] <devsnek>
at that point all methods

[19:45:31.0000] <michaelficarra>
Bakkot making things difficult

[19:46:53.0000] <jorendorff>
This really seems like it will pare down to a very, very nice MVP

[19:47:17.0000] <jridgewell>
keith_miller: What are the "local variable semantics"

[19:47:22.0000] <devsnek>
aside from metadata everything proposed seems reasonable

[19:47:36.0000] <keith_miller>
jridgewell: var @myDecorator foo = x;

[19:47:43.0000] <jridgewell>
Ahh

[19:48:00.0000] <keith_miller>
I assume that's like a getter on the scope variable

[19:48:04.0000] <leobalter>
I can confirm what Yehuda has said from our code base.

[19:48:07.0000] <keith_miller>
but still it's a bit wierd

[19:48:37.0000] <keith_miller>
I hadn't considered that before this meeting so maybe that's my b

[19:48:52.0000] <leobalter>
it's pretty convenient to add common accessors

[19:51:35.0000] <Bakkot>
re: littledan's point right now: how is a class decorator a position where there is no function call possible right now?

[19:51:37.0000] <Bakkot>
I am confused

[19:51:50.0000] <ljharb>
`export class C { }`?

[19:51:56.0000] <devsnek>
^

[19:52:05.0000] <ljharb>
also name inference with `const C = decorate(class { })`

[19:52:15.0000] <Bakkot>
`export let C = foo(class C{})` is equivalent

[19:52:26.0000] <ljharb>
sure, but then you have to repeat the name

[19:52:35.0000] <Bakkot>
that does not come _close_ to justifying new syntax

[19:52:40.0000] <akirose>
sorry about the english idiom, non-native english speakers

[19:52:44.0000] <devsnek>
Bakkot: you can also manually rewrite your fields to be getter/setters

[19:53:00.0000] <Bakkot>
devsnek right, but you have to do it manually, rather than ecapsulating it with a function call

[19:53:08.0000] <Bakkot>
but here you can do the encapsulation with the function

[19:53:13.0000] <Bakkot>
so I don't know what littledan means

[19:53:52.0000] <jridgewell>
I agree with Bakkot here

[19:54:21.0000] <akirose>
10 minutes

[19:54:29.0000] <jridgewell>
Burden of writing a `decorate(class {})` seems minimal compare to decorating a field

[19:56:09.0000] <jorendorff>
+2 to shu's last sentiment

[19:57:10.0000] <rbuckton>
hmm. I can't get to Reflector to get the link to TCQ ...

[19:57:15.0000] <devsnek>
looking forward to class {} |> decorate1 |> decorate2

[19:57:35.0000] <rbuckton>
nm, working now.

[19:59:44.0000] <gibson042>
‚ù§Ô∏è

[19:59:52.0000] <akirose>
wsdferdksl: should that be a new topic isntead of a reply?

[20:00:15.0000] <leobalter>
akirose: I believe it's a feedback on the current topic

[20:00:26.0000] <akirose>
i read it as parallel

[20:00:28.0000] <leobalter>
understanding the entire design as in a single proposal

[20:01:51.0000] <shu>
rbuckton: i'll delete my queue item if you've read it?

[20:02:05.0000] <rbuckton>
I've read it

[20:03:07.0000] <leobalter>
shu: would it be helpful for a better overview if I prepare a full set of Test262 tests for this proposal? I'd do my best to separate each part.

[20:03:24.0000] <leobalter>
like, I'm trying to improve the trade off

[20:04:16.0000] <shu>
leobalter: sorry i don't understand the question

[20:04:26.0000] <shu>
a better overview of what?

[20:05:13.0000] <rbuckton>
There are caveats to consider with class decorators, such as this case:

[20:05:13.0000] <rbuckton>
```

[20:05:13.0000] <rbuckton>
@decorator

[20:05:13.0000] <rbuckton>
class C {

[20:05:13.0000] <rbuckton>
  static #x = 1;

[20:05:13.0000] <rbuckton>
  static method() {

[20:05:13.0000] <rbuckton>
    this.#x // could throw if `decorator` replaces class with subclass

[20:05:14.0000] <rbuckton>
    C.#x // ok, accessing inner `C`

[20:05:14.0000] <rbuckton>
    new C() // but this produces an inner `C`, not an outer `C`. Fixing this breaks the line above

[20:05:15.0000] <rbuckton>
  }

[20:05:15.0000] <rbuckton>
}

[20:05:16.0000] <rbuckton>
```

[20:05:46.0000] <ljharb>
rbuckton: why would it throw if it's a subclass of C?

[20:05:54.0000] <Bakkot>
it sounded like class decorators were intended to replace the inner binding

[20:05:55.0000] <rbuckton>
Its a private static field.

[20:06:00.0000] <Bakkot>
ljharb static private has this problem

[20:06:03.0000] <rbuckton>
They throw for subclasses of `C`.

[20:06:04.0000] <haxjs>
another footgun

[20:06:05.0000] <ljharb>
oh right

[20:06:08.0000] <leobalter>
I was hoping I could provide some form to check each part of this proposal. I'm offering what I know how to do. It doesn't look like much valuable to do it before Stage 3 anyway

[20:06:17.0000] <ljharb>
i forgot because i have no use cases for private static

[20:06:29.0000] <leobalter>
I'm too tired, I'm sorry my ideas are too raw

[20:07:05.0000] <jorendorff>
littledan: nice work

[20:07:14.0000] <littledan>
jorendorff: Thank you

[20:15:29.0000] <rbuckton>
TypeScript's decorators rewrite the inner bindings of `C` to point to the class result of the decorator:

[20:15:29.0000] <rbuckton>
```

[20:15:29.0000] <rbuckton>
var _x;

[20:15:29.0000] <rbuckton>
var C_1;

[20:15:29.0000] <rbuckton>
let C = C_1 = class C {

[20:15:29.0000] <rbuckton>
    static method() {

[20:15:29.0000] <rbuckton>
        __classPrivateFieldGet(this, _x); // throws for subclass

[20:15:30.0000] <rbuckton>
        __classPrivateFieldGet(C_1, _x); // throws for subclass

[20:15:30.0000] <rbuckton>
        return new C_1(); // creates "decorated" C

[20:15:31.0000] <rbuckton>
    }

[20:15:31.0000] <rbuckton>
};

[20:15:32.0000] <rbuckton>
_x = new WeakMap();

[20:15:32.0000] <rbuckton>
_x.set(C, 1);

[20:15:33.0000] <rbuckton>
C = C_1 = __decorate([

[20:15:33.0000] <rbuckton>
    decorate

[20:15:34.0000] <rbuckton>
], C);

[20:15:34.0000] <rbuckton>
```

[20:15:35.0000] <rbuckton>
Except that TypeScript errors on `static #x` currently. There's no easy way *inside* the class to reference the binding *outside* of the class, currently [1]. This might be way haxjs was suggesting class meta properties yesterday (i.e., `class.current`, `class.decorated`) as a way to distinguish between the two.

[20:15:36.0000] <rbuckton>
[1] Other than `let C = @decorator class { ... }` maybe?

[20:16:15.0000] <rbuckton>
s/be way/be why

[21:02:45.0000] <ljharb>
akirose: robpalme update queue?

[21:02:46.0000] <devsnek>
i like this proposal

[21:03:00.0000] <akirose>
got u

[21:03:03.0000] <ljharb>
ty

[21:03:39.0000] <akirose>
holy shit i love this already

[21:05:37.0000] <michaelficarra>
please no more string literals

[21:05:50.0000] <michaelficarra>
also this is already valid syntax

[21:06:03.0000] <devsnek>
yeah but who is doing ``````

[21:06:10.0000] <devsnek>
that will just throw

[21:06:16.0000] <michaelficarra>
devsnek: me, and no it won't

[21:06:25.0000] <devsnek>
?

[21:06:27.0000] <Bakkot>
where's that gist

[21:06:31.0000] <devsnek>
strings are not functions

[21:06:38.0000] <michaelficarra>
tags can return tags

[21:06:47.0000] <jridgewell>
Yah, michaelficarra provided an `append` tagged template literal which continues to return a function after every tag invocation

[21:07:03.0000] <jridgewell>
But untagged is good to go. üòõ

[21:07:03.0000] <Bakkot>
he provided it four years ago, even

[21:07:04.0000] <Bakkot>
https://gist.github.com/michaelficarra/70ce798feb25fdc91508f387190053a1

[21:07:31.0000] <devsnek>
so if you use append with empty strings on both sides

[21:07:33.0000] <devsnek>
as is very common

[21:07:41.0000] <devsnek>
:unconvinced:

[21:08:00.0000] <shu>
i am really confused by the previous slide

[21:08:11.0000] <shu>
the problem is that... you didn't dedent the string, therefore it's not === to an un-dedented string?

[21:08:18.0000] <shu>
why is that a problem?

[21:08:23.0000] <Bakkot>
yeah I am also confused

[21:08:38.0000] <jridgewell>
The syntax never exposes an un-dedented strings

[21:08:43.0000] <jridgewell>
Where the API can expose both

[21:08:53.0000] <jridgewell>
Whether that's really a problem is up to the dev

[21:09:26.0000] <drousso>
wouldn't this not work if the first line is not a newline?

[21:10:43.0000] <devsnek>
String.dedent is great except composing with other tag functions

[21:10:50.0000] <jridgewell>
Correct, unless that first line had the same common indentation.

[21:10:52.0000] <rbuckton>
https://usercontent.irccloud-cdn.com/file/0A5rHMJe/image.png

[21:11:06.0000] <michaelficarra>
Bakkot: scared me for a second there

[21:11:15.0000] <michaelficarra>
thought we were gonna have to fight

[21:12:03.0000] <littledan>
the syntax seems nice so that it can be based on the indentation where the opening quote is

[21:12:28.0000] <devsnek>
is there a widely understood way to compose template tag functions?

[21:12:31.0000] <rbuckton>
Also, this is valid code that executes and can be well behaved: https://usercontent.irccloud-cdn.com/file/KvA4SWj3/image.png

[21:12:46.0000] <rkirsling>
nice

[21:12:51.0000] <devsnek>
rbuckton: look up :P

[21:13:03.0000] <littledan>
let's use #` `#

[21:13:21.0000] <littledan>
html#`<div/>`#

[21:13:26.0000] <littledan>
everything with #!

[21:13:40.0000] <littledan>
tbh @ would work here as well

[21:13:48.0000] <rbuckton>
Scheme, but with ## instead of ()

[21:14:14.0000] <michaelficarra>
devsnek: I'd love to know if you fin an answer to that question

[21:14:23.0000] <devsnek>
what

[21:14:32.0000] <littledan>
#${ }# replaces ( )

[21:14:35.0000] <michaelficarra>
*find

[21:14:36.0000] <michaelficarra>
> is there a widely understood way to compose template tag functions?

[21:14:43.0000] <devsnek>
michaelficarra: i put it on the queue

[21:14:51.0000] <devsnek>
that's my primary reason for preferring the syntax

[21:15:10.0000] <devsnek>
if there's some easy way to compose String.dedent with other tags then i'm good with it

[21:15:11.0000] <michaelficarra>
uuhhhh that doesn't solve the problem still

[21:15:14.0000] <rkirsling>
oh damn we got elang on the queue

[21:15:44.0000] <devsnek>
E also had promises, now look where we are

[21:16:30.0000] <devsnek>
michaelficarra: my problem is not for N template it is for 1 template so it solves it for me :P

[21:16:42.0000] <devsnek>
s/template/tag/g

[21:16:47.0000] <michaelficarra>
devsnek:boring

[21:16:49.0000] <devsnek>
lol

[21:17:37.0000] <devsnek>
i just realized everything we're discussing is not stage 1 relevant

[21:18:55.0000] <michaelficarra>
true, I don't see this failing to reach stage 1

[21:19:28.0000] <Bakkot>
littledan "it can be based on the indentation where the opening quote is" would be bad, it makes the whitespace outside of the ``` significant

[21:19:51.0000] <shu>
i am now super confused

[21:20:11.0000] <rkirsling>
yeah none of this blocks stage 1 lol

[21:20:22.0000] <devsnek>
wont' stop us from discussing it

[21:20:28.0000] <littledan>
Bakkot: OK, if this is taken to be bad, I prefer a stdlib tag as well

[21:20:36.0000] <rkirsling>
if we can convince the champions to focus on the non-syntactic approach at this point, that'd be great, but not required

[21:24:01.0000] <haxjs>
does ```  conflict with markdown syntax??

[21:24:10.0000] <Bakkot>
?

[21:24:32.0000] <ljharb>
not in the sense that markdown syntax doesn't work in a js context

[21:24:49.0000] <ljharb>
conceptually, sure, it's also the same as "preformatted text" in slack or a bunch of other markdownish contexts

[21:24:53.0000] <haxjs>
i mean if u want to embed js code in markdown or verse vice

[21:25:05.0000] <ljharb>
markdown syntax also has single backticks

[21:25:09.0000] <ljharb>
so template literal syntax already conflicts.

[21:25:31.0000] <haxjs>
markdown could use `` double backtick

[21:25:40.0000] <jridgewell>
There was an option to allow 5 ticks in a row for markdown

[21:25:42.0000] <haxjs>
at least standard markdown

[21:25:42.0000] <jridgewell>
Or 7

[21:25:46.0000] <jridgewell>
etc

[21:25:51.0000] <haxjs>
oh !

[21:25:59.0000] <haxjs>
let's use 7 ```````

[21:26:09.0000] <haxjs>
not sure i enter the right count :)

[21:26:10.0000] <jridgewell>
Any number of ticks would continue until we encounter the same number of ticks

[21:26:10.0000] <rbuckton>
Markdown doesn't conflict with JavaScript. Also, markdown supports _n_-backticks for nesting:

[21:26:10.0000] <rbuckton>
```

[21:26:10.0000] <rbuckton>
`` allows ` in md ``

[21:26:10.0000] <rbuckton>
```

[21:28:04.0000] <haxjs>
but too many backticks just harm my eyes... :)   really hope we can have some easy syntax :)

[21:28:16.0000] <rbuckton>
Somewhat amusing,  I do have code that does something like this:

[21:28:16.0000] <rbuckton>
```

[21:28:16.0000] <rbuckton>
const fence = "```";

[21:28:16.0000] <rbuckton>
markdown`

[21:28:16.0000] <rbuckton>
${fence}typescript

[21:28:16.0000] <rbuckton>
...

[21:28:16.0000] <rbuckton>
${fence}

[21:28:17.0000] <rbuckton>
`;

[21:28:17.0000] <rbuckton>
```

[21:28:18.0000] <rbuckton>
(for mixing trusted and untrusted content when generating documentation for VS Code)

[21:28:23.0000] <rbuckton>
That didn't work well, heh.

[21:28:43.0000] <gibson042>
inline code spans can be wrapped in backtick strings of any length, e.g. ```code```: https://spec.commonmark.org/0.29/#code-spans

[21:29:16.0000] <rbuckton>
```

[21:29:16.0000] <rbuckton>
const fence = "`".repeat(3);

[21:29:16.0000] <rbuckton>
markdown`

[21:29:16.0000] <rbuckton>
${fence}typescript

[21:29:16.0000] <rbuckton>
...

[21:29:16.0000] <rbuckton>
${fence}

[21:29:16.0000] <rbuckton>
`;

[21:29:17.0000] <rbuckton>
```

[21:29:24.0000] <rbuckton>
That worked better...

[21:31:32.0000] <gibson042>
and code fences use 3 or more consecutive backticks

[21:35:29.0000] <rkirsling>
ooh üéâ indeed

[21:37:06.0000] <michaelficarra>
yay, I much prefer Instant

[21:37:34.0000] <michaelficarra>
though I am bummed about negative durations

[21:37:51.0000] <Bakkot>
still don't understand your concern there

[21:37:53.0000] <Bakkot>
time has direction

[21:38:26.0000] <michaelficarra>
it's conflating the magnitude and the direction

[21:38:32.0000] <Bakkot>
it isn't conflating

[21:38:35.0000] <Bakkot>
it's representing both

[21:38:37.0000] <michaelficarra>
a duration is just a magnitude

[21:38:38.0000] <ljharb>
it's combining, surely

[21:38:42.0000] <haxjs>
if every other lib/lang have negative duration, we should have it :)

[21:38:45.0000] <michaelficarra>
sure, combining

[21:38:54.0000] <ljharb>
haxjs: in general i don't agree with that logic, but here i do :-)

[21:39:31.0000] <Bakkot>
whoosh, this is a _giant_ API

[21:39:47.0000] <Bakkot>
not necessarily bad but it is going to take forever to review it

[21:39:47.0000] <haxjs>
ljharb: I mean we need a strong reason to be difference. :)

[21:39:53.0000] <ljharb>
Bakkot: they're hoping we can all review it in 2 months

[21:40:07.0000] <michaelficarra>
they best be ready to rebase on top of 2007 because I'm not doing it for them

[21:40:22.0000] <rkirsling>
Bakkot: yeah it's basically the size of 402

[21:40:22.0000] <michaelficarra>
(quick, someone merge 2007)

[21:40:23.0000] <haxjs>
yeah it's a giant api and changing ...

[21:40:35.0000] <rkirsling>
so we need to consider it as if reviewing an entirely new spec

[21:40:46.0000] <Bakkot>
haxjs the idea is that they'll stop changing it and tell us and then we can review

[21:40:51.0000] <Bakkot>
which I think is what is currently happening

[21:41:17.0000] <Bakkot>
michaelficarra not sure they have a spec at all; I think the work was mostly in the polyfill

[21:41:25.0000] <haxjs>
bakkot: glad to hear that! but it seems there are still some new draft for new additions in the repo

[21:41:58.0000] <ystartsev>
Bakkot: hm, the spec isn't up to date?

[21:42:09.0000] <Bakkot>
ystartsev not sure, to be clear, I haven't been following closely

[21:42:14.0000] <Bakkot>
that was true at some point in the past

[21:42:19.0000] <haxjs>
like LocalDateTime (i am not sure ,this is what i saw last week)

[21:42:53.0000] <gibson042>
there's pending work in both the spec and the polyfill, but I think the polyfill is ahead

[21:43:05.0000] <michaelficarra>
someone post the Twitter vote link from the slides, I am too lazy

[21:43:43.0000] <ystartsev>
gibson042: we have done a review of the spec text in preparation for november, is that far behind?

[21:43:49.0000] <littledan>
btw the original Temporal API had something representing LocalDateTime, and it was a change from a couple years ago to try to remove it, for minimalism. The ensuing investigation taught us, Maggie Pint was right about ensuring it was present

[21:44:10.0000] <ljharb>
ystartsev: my sense from watching the repo is that it seems like it's changing in significant ways every day or three

[21:44:51.0000] <ystartsev>
hm... ok. is the plan still to advance this in november?

[21:45:00.0000] <gibson042>
ystartsev: I think so, many things will likely not change but you'll definitely need to re-review and it will probably feel more comprehensive than you'd like

[21:45:24.0000] <shu>
oh, we need to review Temporal for advancement by november?

[21:45:24.0000] <gibson042>
https://twitter.com/justingrantjg/status/1308619968632688640

[21:45:27.0000] <ljharb>
ystartsev: i assume that's still the hope, i'll be asking about review

[21:45:30.0000] <ljharb>
shu: yes, that's what they said in july

[21:45:30.0000] <michaelficarra>
wait, different calendars still use ISO 8601 instant formatting?

[21:45:35.0000] <shu>
okay, thanks

[21:45:38.0000] <Bakkot>
I am not confident we will all be able to review and address comments by november

[21:45:40.0000] <ystartsev>
gibson042: getting our domain experts to review it is quite a bit of work. i want to make sure that i don't ask them unnecessarily

[21:45:46.0000] <rkirsling>
hoo wow `DateAndTime` would be real bad

[21:45:46.0000] <ljharb>
Bakkot: me neither, which is what i said in july

[21:45:47.0000] <gibson042>
then I would hold off

[21:46:07.0000] <shu>
i would request the champion group to hold tutorial VCs for the reviewers + editors, if possible

[21:46:26.0000] <gibson042>
the current plan/hope is to have the spec ready sometime next month; there should be a slide on that coming up

[21:46:27.0000] <haxjs>
I hope we can have some time to introducing it to users and collect feedback before stage 3.

[21:46:48.0000] <gibson042>
with hope for advancement in January IIRC

[21:47:06.0000] <ystartsev>
gibson042: I've already requested a review and had it done prior to this meeting. It would be really good to only do that when the spec is ready. But outside of that there were no concerns

[21:47:25.0000] <michaelficarra>
shu: I think that's a good idea

[21:47:43.0000] <ystartsev>
ditto, i like shu's idea

[21:47:50.0000] <ljharb>
gibson042: ah ok, that's newly extended

[21:48:33.0000] <rkirsling>
I'm not a reviewer but I would like to attend such a meeting too

[21:48:46.0000] <jridgewell>
shu: Are we chartering a incubator again?

[21:48:52.0000] <jridgewell>
If so, can we sign up String.dedent?

[21:49:27.0000] <shu>
jridgewell: most definitely

[21:49:47.0000] <shu>
jridgewell: until further notice, there will be a 15-min chartering on the last day every meeting

[21:49:58.0000] <jridgewell>
üëç

[21:50:58.0000] <littledan>
ystartsev: Yeah, sorry about the confusion about stability; I thought the expectation was that reviews would be requested before the next meeting, so I guess there wasn't a particular effort to telegraph the continued development

[21:50:59.0000] <michaelficarra>
jridgewell: you don't think you got enough feedback during plenary?

[21:51:26.0000] <ystartsev>
littledan: no problem, its not too much of an issue and we already have a good idea going into the next review

[21:52:12.0000] <littledan>
note that the champion group has done a lot of work to document rationale, but it's definitely a good idea to group it in one place

[21:52:44.0000] <jridgewell>
Yes, there's feedback, but I think we can solve some of the open questions during an incubator

[21:53:07.0000] <jridgewell>
Eg, whitespace-only lines affect "common whitespace", or whether to allow mixing whitespace.

[21:53:21.0000] <jridgewell>
These don't need full committee involvement to decide.

[21:53:57.0000] <michaelficarra>
jridgewell: are there open issues for these things? I'd prefer to weigh in on the issue tracker

[21:54:20.0000] <jridgewell>
Whitespace-only lines: https://github.com/mmkal/proposal-multi-backtick-templates/issues/13

[21:54:55.0000] <jridgewell>
I'll make one for mixing whitespace.

[21:55:08.0000] <Bakkot>
should look at what other languages do, too

[21:55:17.0000] <Bakkot>
often there is a common thing all languages do and we can just go with that

[21:55:52.0000] <jridgewell>
Each one seems to do something different. üò¨

[21:56:34.0000] <jridgewell>
I personally like Python's impl, but there's enough competing prior art to choose anything.

[21:56:40.0000] <akirose>
my least favorite game: "this meeting has more [pick a dude's name] than women" üò≠

[21:57:17.0000] <Bakkot>
a depressing game

[21:57:25.0000] <rkirsling>
yeah this is a bad one

[21:57:45.0000] <rkirsling>
you know it's bad when "Ross" is a name in the running

[21:57:59.0000] <ystartsev>
is it just me and aki this time around?

[21:58:11.0000] <ljharb>
ystartsev: shrutikapoor

[21:58:15.0000] <ystartsev>
ah good

[21:58:16.0000] <akirose>
No! shrutikapoor !

[21:58:35.0000] <akirose>
shrutikapoor: you're paypal, right?

[21:58:57.0000] <ystartsev>
i didn't see the name in the call but maybe she was on an earlier session

[21:59:56.0000] <ljharb>
wsdferdksl: your audio's getting a bit hard to hear

[22:01:25.0000] <Bakkot>
fun fact: you can spread own accessors if they're enumerable

[22:02:00.0000] <michaelficarra>
wow I did not know that

[22:03:34.0000] <ljharb>
that is true

[22:04:20.0000] <Bakkot>
(no reason to prefer that over frozen own data properties, though)

[22:04:31.0000] <Bakkot>
well, actually, I guess maybe laziness?

[22:04:43.0000] <haxjs>
record/tuple already have immutable own property? (or at least it behave like that?)

[22:04:55.0000] <keith_miller>
littledan: +1 on tutorial

[22:05:05.0000] <ljharb>
Bakkot: laziness but also, those own accessors would have to be nonconfigurable anyways to ensure immutability

[22:05:23.0000] <Bakkot>
yup

[22:05:56.0000] <jridgewell>
michaelficarra: mixing whitespace https://github.com/mmkal/proposal-multi-backtick-templates/issues/16

[22:13:49.0000] <michaelficarra>
whose phone keeps beeping? akirose?

[22:14:04.0000] <akirose>
nope i'm HW muted

[22:21:46.0000] <akirose>
i know i can be a little polyanna about things

[22:21:51.0000] <akirose>
but

[22:21:57.0000] <akirose>
i love this

[22:22:36.0000] <rkirsling>
no need to hesitate; language-level i18n is great

[22:26:50.0000] <ryzokuken>
i18n is amazing in general

[22:27:27.0000] <akirose>
YOOOOOOOO

[22:27:29.0000] <akirose>
BUDS

[22:27:29.0000] <haxjs>
i18n is hard! really like we improve the api ability to solve the problems :)

[22:27:32.0000] <akirose>
we need note-takers

[22:27:39.0000] <akirose>
can someone hop on

[22:27:41.0000] <ryzokuken>
akirose: let me try

[22:27:43.0000] <akirose>
so i don't have to interrupt

[22:27:45.0000] <akirose>
ty

[22:27:52.0000] <akirose>
(you don't have to take notes of the presentation of slides)

[22:28:11.0000] <ryzokuken>
okay, thanks!

[22:28:18.0000] <akirose>
having three cursors ready to go would be dope

[22:31:13.0000] <ljharb>
ystartsev: sorry, fixed the slides perms

[22:31:30.0000] <ystartsev>
The library exists but i don't know much about it ... that would be zibi or waldo

[22:31:42.0000] <ystartsev>
so, i have no idea in case anyone is wondering

[22:31:46.0000] <ystartsev>
ljharb: thanks!

[22:45:45.0000] <Bakkot>
I have no opinions on this issue

[22:45:47.0000] <Bakkot>
all options kinda suck

[22:46:03.0000] <devsnek>
lol

[22:46:24.0000] <michaelficarra>
oh good point from Mark

[22:46:39.0000] <devsnek>
we had this problem in node

[22:46:52.0000] <devsnek>
i don't remember how we solved it because its 1am

[22:47:44.0000] <devsnek>
aha we strictly control the type of the option so you can check `option: invalid type` throwing for it to be there

[22:48:44.0000] <Bakkot>
ljharb are you concerned that making an error into a non-error is breaking?

[22:49:19.0000] <devsnek>
Bakkot: new code can't be used on old runtimes

[22:49:22.0000] <ljharb>
in options bags only, yes

[22:49:38.0000] <Bakkot>
what's special about options bags?

[22:50:16.0000] <ljharb>
throwing on an extra property is the same as throwing on an extra argument

[22:50:19.0000] <ljharb>
we don't make apis that do the latter

[22:50:55.0000] <devsnek>
throwing on extra properties is weird to me

[22:51:24.0000] <Bakkot>
this isn't "extra property", it's "an unexpected value", as I understood it

[22:51:36.0000] <Bakkot>
"an unexpected value of an expected property"

[22:51:45.0000] <shu>
yes, that was the clarification just now

[22:51:45.0000] <devsnek>
yeah that should throw

[22:52:40.0000] <shu>
ljharb: i think you're misunderstanding

[22:52:59.0000] <shu>
shane is not proposing anything about unknown properties afaict?

[22:53:30.0000] <jridgewell>
Add a "clarifying statement" on TCQ?

[22:53:46.0000] <ljharb>
thanks

[22:55:44.0000] <ljharb>
my bad on misunderstanding the question i guess

[22:56:10.0000] <devsnek>
seems philipp misunderstood as well?

[23:04:36.0000] <ljharb>
many helpful anonymous animals

[23:04:43.0000] <ljharb>
(do that few people have a google account?)

[23:05:02.0000] <rkirsling>
anonymous-ness is document-specific

[23:05:09.0000] <rkirsling>
presumably everyone has a google acct

[23:05:10.0000] <devsnek>
anonymous is due to it being public

[23:05:23.0000] <jridgewell>
You have to click a button for you to expose your Google account

[23:05:32.0000] <ljharb>
oh, which button

[23:05:37.0000] <devsnek>
that one

[23:05:37.0000] <jridgewell>
By default on pub docs, everyone is anonymous

[23:05:49.0000] <ljharb>
i wanna click it, which one

[23:05:55.0000] <jridgewell>
It's at the top right...

[23:06:05.0000] <jridgewell>
It has a little pop up when you first open Docs

[23:06:34.0000] <ljharb>
ok but i've opened docs like a thousand times and i see no popup

[23:06:42.0000] <ljharb>
i'm logged into my gmail

[23:06:52.0000] <ljharb>
and the only name i see in the list is rob's

[23:07:00.0000] <jridgewell>
ü§∑‚Äç‚ôÇÔ∏è

[23:07:07.0000] <jridgewell>
There's always a pop-up fo rme

[23:08:08.0000] <ljharb>
i wonder if it has to be explicitly shared with someone for their name to show up

[23:08:15.0000] <michaelficarra>
I don't see this button either


2020-09-24
[18:10:24.0000] <ljharb>
gibson042: can you mute?

[18:11:08.0000] <shu>
i cannot understand hax, can everyone check their mic?

[18:11:13.0000] <shu>
oh it's better now

[18:11:17.0000] <shu>
wait, not yet

[18:12:39.0000] <shu>
this has been delayed a meeting already for no new information learned, i am very unhappy about delaying another 2 months

[18:12:48.0000] <shu>
this is not a good precedent

[18:13:01.0000] <michaelficarra>
shu: agreed :-(

[18:13:01.0000] <wsdferdksl>
shu: I agree

[18:13:03.0000] <devsnek>
very unfortunate

[18:13:28.0000] <rkirsling>
yeah this doesn't feel procedurally acceptable

[18:13:41.0000] <wsdferdksl>
And I couldn't figure out what hax's point was over the last ten minutes

[18:13:44.0000] <ljharb>
if that's a common opinion, it'd be great to get the chairs to weigh in on it.

[18:15:31.0000] <jorendorff>
hax, haxjs: would you please mute? I think there is a little background noise where you are

[18:15:45.0000] <haxjs>
oh i forgot

[18:15:46.0000] <haxjs>
sorry

[18:16:10.0000] <haxjs>
muted.

[18:16:24.0000] <michaelficarra>
our process just isn't scaling that well, there's some work to be done

[18:16:46.0000] <michaelficarra>
but I also don't think we should subvert it just because it's not working for us right now

[18:17:16.0000] <ljharb>
i agree with that too, as inconvenient it is for my own proposal.

[18:19:18.0000] <michaelficarra>
if you look at it optimistically, we are getting more examples of exactly the kinds of situations we'd like our process changes to address

[18:19:31.0000] <michaelficarra>
"S.p.item: never again"

[18:20:20.0000] <michaelficarra>
our current process was modeled around "PTCs: never again"

[18:24:26.0000] <haxjs>
Sorry i thought I could finish my summarize in 5 mins, but obviously it's a wrong estimation just like the case i estimate how long i need to finish a feature when programming :(

[18:35:04.0000] <devsnek>
can't engines just add these as new objects that appears as existing arraybuffers? like how they have many internal kinds of arrays or whatever

[18:37:35.0000] <rickbutton>
as in, secretly use a resizable buffer internally if needed?

[18:38:01.0000] <rickbutton>
like, a big IF around `useResizable`, old one or new one

[18:38:33.0000] <devsnek>
sort of lol

[18:38:41.0000] <devsnek>
basically don't touch the code inside one of those branches

[18:38:47.0000] <rickbutton>
right

[18:38:47.0000] <devsnek>
but idk dan's point seems interesting

[18:39:06.0000] <rickbutton>
would be weird if there were divergent bugs between the two impls

[18:39:22.0000] <devsnek>
i think people are overestimating how often js people use arraybuffers/typedarrays directly

[18:39:52.0000] <rickbutton>
well web developers rarely use them, but crypto miners and other various bad actors can freely use them

[18:39:54.0000] <devsnek>
and even when they do use them, they're almost always treated as an opaque type

[18:40:09.0000] <devsnek>
rickbutton: yeah i mean people saying more types is bad dev ux

[18:40:39.0000] <rickbutton>
ah yeah

[18:40:55.0000] <littledan>
the invariant about the length being fixed is a JS developer-facing one, not just an implementation one

[18:41:03.0000] <devsnek>
indeed

[18:41:21.0000] <devsnek>
i'm saying i think serving the immediate security stuff is worth having a bad api in this case

[18:41:25.0000] <devsnek>
because hardly anyone uses the api

[18:41:40.0000] <rickbutton>
I see what you mean now devsnek, I agree

[18:41:44.0000] <littledan>
Waldemar's idea seems fine; the difference would be superficial

[18:41:56.0000] <Bakkot>
I like wsdferdksl's idea

[18:42:02.0000] <devsnek>
what did he say

[18:42:05.0000] <Bakkot>
seems like something to resolve between now and stage 3

[18:42:12.0000] <littledan>
+1

[18:42:25.0000] <Bakkot>
have arraybuffers be frozen-len by default but have an overload allowing you to get an unfrozen one

[18:42:31.0000] <Bakkot>
rather than a whole new type

[18:42:38.0000] <Bakkot>
engines would treat them as different types, users wouldn't have to

[18:42:39.0000] <devsnek>
isn't that what mark said

[18:42:45.0000] <devsnek>
and sort of what i said i guess

[18:42:47.0000] <rickbutton>
that is what devsnek said

[18:42:48.0000] <rickbutton>
haha

[19:03:59.0000] <shu>
Bakkot: what do you think about the tooling argument shane gave for different types?

[19:04:52.0000] <Bakkot>
shu: to my knowledge TS does not give you any help for bounds checks right now, it just assumes all accesses are in bounds (or, with a new flag, that they are all out of bounds unless checked immediately before access)

[19:05:06.0000] <shu>
i see

[19:05:09.0000] <devsnek>
is yulia here today

[19:05:10.0000] <Bakkot>
I may not have understood the point, but if it's just about bounds checks I don't know that it matters

[19:05:20.0000] <Bakkot>
ystartsev ^

[19:05:23.0000] <rickbutton>
devsnek: she is around in the evening half

[19:05:26.0000] <Bakkot>
I think she's only in the afternoon sessions?

[19:05:26.0000] <Bakkot>
yeah

[19:05:28.0000] <shu>
jorendorff is standing in for the earlier session

[19:05:36.0000] <devsnek>
ah ok

[19:05:42.0000] <jorendorff>
/me waves

[19:05:48.0000] <devsnek>
üëãüèª

[19:06:06.0000] <ljharb>
bterlson: queue?

[19:06:09.0000] <rkirsling>
rickbutton: there's an evening half?

[19:06:39.0000] <rickbutton>
for many it's always the evening half

[19:06:47.0000] <rkirsling>
indeed

[19:07:44.0000] <devsnek>
queue needs to move

[19:07:58.0000] <devsnek>
i still don't think this proposal is worth it

[19:09:14.0000] <ljharb>
queue's moved, thanks

[19:14:35.0000] <rkirsling>
Berlin was 2019, but it has been a long long year

[19:15:40.0000] <ljharb>
also i never went to berlin

[19:15:47.0000] <ljharb>
but i may have remoted into that one

[19:16:18.0000] <shu>
man, 2018, really?

[19:16:22.0000] <shu>
i thought we were in berlin last year

[19:16:26.0000] <rkirsling>
we were

[19:16:31.0000] <rkirsling>
see above

[19:16:45.0000] <ljharb>
hard to remember travel, or how time works

[19:17:48.0000] <rbuckton>
Just to check, its not still March right? Because march was looong...

[19:18:37.0000] <rkirsling>
my computer says it's September but who knows whether that can be trusted

[19:19:51.0000] <ljharb>
it seems like it'd be nice to create the notes docs from a *gmail* account, so that non-org members' names are allowed to show up

[19:20:39.0000] <michaelficarra>
ljharb: yeah that'd be nice

[19:29:05.0000] <mmarchini>
But where

[19:29:57.0000] <devsnek>
everything has to be available sync anyway

[19:29:57.0000] <mmarchini>
Ahh i see, in the agenda the link is updated, but in the notes it‚Äôs still the old link

[19:30:01.0000] <devsnek>
because of the script api

[19:30:05.0000] <devsnek>
i don't get this proposal

[19:35:18.0000] <devsnek>
if there's a GetBuiltinSync api for scripts

[19:35:24.0000] <devsnek>
and it must work for everything (i assume)

[19:35:34.0000] <devsnek>
how does the "load async" argument fit into this

[19:39:43.0000] <jorendorff>
polyfilling has this drawback in browsers today!

[19:39:47.0000] <littledan>
bradleymeck: My queue item is about this shimming thing

[19:39:49.0000] <jorendorff>
nobody really notices, it seems

[19:39:59.0000] <jorendorff>
it forces things to be loaded

[19:40:04.0000] <littledan>
I really think that, if we do this right, we can reduce this cost of polyfilling

[19:40:26.0000] <bradleymeck>
i would love reduced polyfilling cost

[19:40:45.0000] <Bakkot>
async APIs on the global could be polyfilled asynchronously

[19:40:50.0000] <littledan>
(and proposed an API in https://github.com/tc39/proposal-built-in-modules/issues/62 + 63

[19:40:57.0000] <bradleymeck>
but i'm unclear on how we can do that if we have to load the source text of polyfill itself

[19:40:59.0000] <jorendorff>
...i think if this were the biggest problem with the proposal, yes, it's fixable

[19:41:14.0000] <littledan>
import map-based polyfilling also had this benefit, but we could do it with an imperative API as well

[19:41:42.0000] <littledan>
I think this is something that we could do much more effectively through built-in modules than through globals with promise-based APIs

[19:42:03.0000] <michaelficarra>
littledan: why?

[19:42:05.0000] <bradleymeck>
banning using static import syntax also would work to make the Script/Module support the same matrix

[19:42:26.0000] <devsnek>
+1

[19:42:29.0000] <littledan>
since users don't have to explicitly await the promise, just import it

[19:42:30.0000] <bradleymeck>
Dealing with global invalidation is a serious pain in my modules

[19:43:04.0000] <Bakkot>
littledan why does that matter, with regards to how readily they can be polyfilled?

[19:44:40.0000] <littledan>
Bakkot: Because it reduces the overhead incurred by newer browsers that don't need the polyfill

[19:44:50.0000] <littledan>
the fetch for the polyfill code could be conditional

[19:45:08.0000] <littledan>
ljharb doesn't seem to be convinced that this would be practical to deploy, in the issues, however

[19:45:11.0000] <Bakkot>
littledan: it can be conditional with an async API, too

[19:45:32.0000] <littledan>
Bakkot: Yes. The benefit over an async API is that you just import it, you don't have to await a promise. So it's practical to apply more broadly

[19:45:50.0000] <littledan>
I think it'd be pretty bad ergonomics if you needed to await a Promise to use Temporal, but shipping a Temporal polyfill is still heavy

[19:46:10.0000] <ljharb>
it's possible for the polyfill itself to sync-load the detection code, and async-load the replacement implementation, but the original module is still synchronously needed to *decide* if polyfilling is needed

[19:46:13.0000] <Bakkot>
with TLA I don't think it makes much difference in modules, and it makes no difference at all in scripts

[19:47:06.0000] <Bakkot>
ljharb disagree

[19:47:43.0000] <Bakkot>
your sync shim replaces the async API with a thing with waits for the built-in API, checks if it's good, and then either returns immediately or fetches the polyfill and applies it

[19:47:52.0000] <Bakkot>
users see no difference

[19:48:20.0000] <Bakkot>
that is, "a thing which waits for the built-in API [when invoked]"

[19:48:27.0000] <devsnek>
what if browsers had `importScripts` in the main thread

[19:48:29.0000] <Bakkot>
... I can reword that if you want, that kind of got away from me

[19:48:42.0000] <ljharb>
Bakkot: ah true, that's reasonable if the thing is only available async, and i can intercept all requests for it

[19:48:48.0000] <ljharb>
Bakkot: nah i think i got you, and you're right

[19:49:23.0000] <littledan>
I would not want all Temporal users to have to write `let myTemporal = await Temporal.get()` at the top of their program

[19:49:54.0000] <ljharb>
that would be very unfortunate

[19:50:27.0000] <Bakkot>
littledan: it is not obvious to me that that would be so much worse than `import { Temporal } from 'js:temporal'` that it warrants this much machinery

[19:51:18.0000] <littledan>
well, in practice, we're not going to give Temporal this Promise-based API, whereas as a built-in module, we would do that

[19:51:51.0000] <devsnek>
what qualifies a builtin as important enough to be its own global

[19:52:48.0000] <rickbutton>
there are entire categories of APIs and libraries that other programming languages provide through imports of various kinds

[19:53:32.0000] <Bakkot>
most other languages do not have a concept of the global

[19:53:44.0000] <Bakkot>
all their stuff is in imports, whereas all our stuff is on the global

[19:53:50.0000] <littledan>
I don't think it makes much sense to make an optional view of things as a module

[19:54:07.0000] <littledan>
our role here is to define a single javascript language

[19:54:52.0000] <shu>
i think appeals to other languages fall short because there're decades of history here

[19:55:18.0000] <shu>
littledan: yes, and if "1JS" is the prioritized property to maintain, then we shouldn't have built-in modules

[19:56:00.0000] <littledan>
I don't understand the purpose of raising this alternative. Hosts already have the machinery they need to define their own built-in modules.

[19:56:21.0000] <shu>
littledan: moddable wants to use it, and they're already not caring about web compatible

[19:56:52.0000] <devsnek>
moddable's whole "we want it to be standard and we don't care about the wider ecosystem" thing irks me

[20:03:24.0000] <ljharb>
littledan: your suggestion is an api that's zalgo?

[20:05:17.0000] <michaelficarra>
just to get a feel for the room, this doesn't appear to have enough justification for stage 2, right?

[20:05:49.0000] <devsnek>
that's how it seems to me

[20:05:51.0000] <rkirsling>
feeling pretty icy by my thermometer

[20:07:16.0000] <littledan>
ljharb: Yes :)

[20:08:35.0000] <ljharb>
littledan: thanks, ·π∑ÃµÃ´Ã∫Ã≤ÕåÕäÕêÃÄÕúÕûÕû√±ÕçÃÆÃ≠ÃòÃπÕîÃ™ÃãÃìÃæÕóÃëÃîÃïÕüdÃ´ÕáÕìÕïÃãÃäÃÄÕíÕÜÃΩÃàÃÅÃöÃïÕ¢eÃ≤ÕçÃ≤ÃºÕâÃêÕõÃãÕÇÃíÕ¢rÃõÕïÃ†Ã¨ÃôÕáÃ§ÃúÃºÃøÃæÃåÕëÕÜÃãÃâÃÄsÃ¥ÃõÃ†ÕâÃ£ÕìÕàÃØÃûÕéÕâÃãÃàÃÅÕåÃèÃâÃêÃïÕ¢ÕùtÕáÃùÃ±ÃºÃ©ÕáÕìÃ•ÕàÕáÃÇÃàÃÅÕÜÃÄÃöÕ†√∂Ã°ÕöÃπÕîÃ≠Ã¨ÃÉÃøÃæÃÉÃÅÕõÕêÃåÕ°·ªèÕìÃ§ÃûÃüÃØÃØÃâÃãÃìÃïÕ¢ÕÖ·∏ëÃ≤ÕáÃ£ÃóÃòÃüÃòÕìÕäÃèÃÅÃâÃÇÕåÃàÕê

[20:12:08.0000] <Bakkot>
devsnek: remind me why your proposal does `dbg!(x)` instead of `debugger(x)`?

[20:12:19.0000] <devsnek>
Bakkot: existing rust feature

[20:12:25.0000] <devsnek>
i'm not proposing any specific function or syntax

[20:12:32.0000] <Bakkot>
gotcha

[20:13:01.0000] <Bakkot>
it should be `debugger (x)` :)

[20:13:11.0000] <devsnek>
that's one of the options on the last slide iirc

[20:13:16.0000] <Bakkot>
approximately yes

[20:13:19.0000] <Bakkot>
anyway I like it

[20:13:31.0000] <devsnek>
üéâ

[20:13:49.0000] <Bakkot>
I think using the rust syntax is going to trip some people up

[20:13:52.0000] <Bakkot>
e.g. waldemar

[20:13:59.0000] <Bakkot>
since it's so weird

[20:14:09.0000] <Bakkot>
from a JS perspective, and has ASI implications and so on

[20:14:12.0000] <devsnek>
i can swap it out

[20:15:17.0000] <rkirsling>
yeah like, I'm plenty familiar with Rust but ! in a JS function call is so jarring that it's hard to not get hung up on

[20:16:16.0000] <devsnek>
oh god i used screenshots

[20:16:18.0000] <devsnek>
noooooooo

[20:17:37.0000] <bradleymeck>
D used binary ! for compile time features, I loved it

[20:18:47.0000] <rickbutton>
big fan of ! for indicating mutation ala ruby/scheme

[20:19:10.0000] <devsnek>
lul

[20:20:07.0000] <shu>
i do miss ? for predicates, that is nice readability

[20:20:44.0000] <shu>
especially because it was pronounced "huh", like "integer huh"

[20:21:47.0000] <rkirsling>
lol

[20:21:49.0000] <rickbutton>
I don't think I've ever heard of that. In my head I've always heard it like you were asking a question, like *integer?*

[20:22:14.0000] <rkirsling>
IIRC linear logic ? is pronounced "why not"

[20:23:10.0000] <shu>
rickbutton: maybe it was just the PLT Scheme folks, since i ran with those folks as an undergrad

[20:24:02.0000] <rickbutton>
to be fair I don't run with any scheme folks so I'm not the authority

[21:00:35.0000] <ljharb>
from ruby i've also used the rising tone thing

[21:01:30.0000] <rickbutton>
it means you should yell when you say `mutate!`

[21:02:15.0000] <devsnek>
this is a good proposal

[21:02:23.0000] <devsnek>
linked lists of errors ftw

[21:04:30.0000] <ptomato>
FYI, I am in the rotation for taking notes during this shift, but I seem to have lost my sound over the break. I will try to get it working during the presentation

[21:07:46.0000] <devsnek>
ljharb: aggregate errors are not inherently causally related

[21:08:00.0000] <devsnek>
in fact the opposite is generally implied, due to where aggregate errors come from

[21:08:07.0000] <ljharb>
and exceptions need not be an object either

[21:08:32.0000] <ljharb>
extend my queue question to include "or a userland subclass"

[21:08:42.0000] <devsnek>
you should never throw something that is not an instance of an error class provided by the engine

[21:08:53.0000] <devsnek>
ok

[21:09:12.0000] <ljharb>
that's an opinion you can have but not one the language may enshrine, i can throw null if i wanna

[21:09:29.0000] <robpalme>
I am +1ing this proposal

[21:09:36.0000] <devsnek>
also +1

[21:09:42.0000] <Bakkot>
it is fine to build convenience methods which are only convenient if you obey that discipline even if the language does not enforce that discipline

[21:09:44.0000] <devsnek>
can the queue be advanced

[21:09:52.0000] <devsnek>
bterlson: ^

[21:09:53.0000] <robpalme>
the queue is good

[21:10:02.0000] <devsnek>
jordan is talking

[21:10:04.0000] <devsnek>
i can't put in a reply

[21:10:10.0000] <robpalme>
got it

[21:10:13.0000] <devsnek>
thanks!

[21:10:24.0000] <ljharb>
Bakkot: fair

[21:11:17.0000] <ptomato>
I have sound again, so I'll take notes now. so sorry about that

[21:11:54.0000] <robpalme>
I wonder if we have Netflix folk in the meeting.  They have a library that does rich errors (way beyond this proposal) called "nerror"

[21:12:03.0000] <robpalme>
thank you @ptomato!

[21:12:06.0000] <Bakkot>
this issue has an example of how it looks in Java: https://github.com/wallabyjs/public/issues/2069

[21:12:48.0000] <Bakkot>
(note that in an IDE you could click on the line number in any of the lines to go to that line, including in the "caused by" lines)

[21:13:27.0000] <rickbutton>
someone unmuted?

[21:13:55.0000] <michaelficarra>
should we mute jack-works?

[21:15:04.0000] <robpalme>
done

[21:17:29.0000] <robpalme>
Can anyone contact Kris Kowal?

[21:17:39.0000] <robpalme>
(we had to skip him)

[21:20:41.0000] <mmarchini>
Uhuuuuuuuuuuuuul <3

[21:21:20.0000] <devsnek>
wut

[21:21:41.0000] <rickbutton>
very excited to add error.cause support to the actual product i work on

[21:22:07.0000] <devsnek>
very excited to add error.cause support to util.inspect

[21:22:45.0000] <rkirsling>
oh wow didn't see that Rust syntax before

[21:23:38.0000] <robpalme>
We do the same thing as amp on the error mutation.

[21:24:25.0000] <rickbutton>
yep I just had to fix a couple of cases where we didn't do that and instead did a weird wrapping like yesterday

[21:25:22.0000] <michaelficarra>
I'm excited to see where this proposal goes

[21:26:40.0000] <devsnek>
double ended iterators are +1

[21:27:06.0000] <Bakkot>
this should definitely be stage 1, in that it definitely outlines a problem we should solve

[21:27:16.0000] <devsnek>
agree

[21:27:24.0000] <gibson042>
I like everything about this proposal except its name

[21:27:24.0000] <Bakkot>
I will need to think more about the the specific proposal to fix the problem presented here

[21:27:25.0000] <michaelficarra>
infinite iterators should not be double-ended lol

[21:27:55.0000] <devsnek>
michaelficarra: stop shutting down my use cases üò≠

[21:28:22.0000] <gibson042>
oh, never mind it got weird

[21:28:34.0000] <devsnek>
i was just about to say

[21:28:36.0000] <rkirsling>
lol

[21:28:50.0000] <michaelficarra>
double-ended iterator should be its own protocol, surely

[21:28:54.0000] <devsnek>
^

[21:28:58.0000] <michaelficarra>
Iterator.from better not give me a double-ended

[21:29:11.0000] <michaelficarra>
or at least I shouldn't be expecting one

[21:29:20.0000] <devsnek>
well i would say

[21:29:24.0000] <ljharb>
double-ended iterator is basically https://github.com/tc39/proposal-reverseIterator (which oops, we never filled in past the initial presentation)

[21:29:26.0000] <devsnek>
its like a subclass

[21:29:37.0000] <devsnek>
a double ended iterator can be used anywhere expecting a normal iterator

[21:29:43.0000] <devsnek>
but not vice versa

[21:29:52.0000] <michaelficarra>
devsnek: yeah that's what I meant

[21:30:10.0000] <rkirsling>
ljharb: he did notice at least :P https://github.com/tc39/proposal-reverseIterator/issues/1#issuecomment-581320556

[21:30:44.0000] <devsnek>
+1 shu

[21:30:50.0000] <ljharb>
rkirsling: lol yes

[21:30:58.0000] <devsnek>
well i understand how they *could* but it isn't how they *should*

[21:32:08.0000] <rickbutton>
+1 to that

[21:33:56.0000] <michaelficarra>
for the double-ended destructuring, which has precedence? [a, b, ‚Ä¶, c, d] = [0, 1]

[21:34:36.0000] <Bakkot>
I would assume the early ones

[21:34:41.0000] <devsnek>
i assume it would fill `a` and `b` and then hit the ellipsis and switch to taking from the back

[21:34:48.0000] <devsnek>
and at that point throw because it was empty

[21:35:04.0000] <devsnek>
that being said `d` filling before `c` is terrible and should be illegal

[21:35:04.0000] <Bakkot>
[a, b, c] = [0, 1] doesn't throw

[21:35:10.0000] <ljharb>
not throw, just give undefined, right?

[21:35:15.0000] <michaelficarra>
[a, b, ‚Ä¶ c, d] = [0, 1, 2]?

[21:35:23.0000] <michaelficarra>
yeah should be undefined, not throw

[21:35:24.0000] <devsnek>
whatever it does

[21:35:30.0000] <ljharb>
michaelficarra: a is 0, b is 1, d is 2, c is []

[21:35:30.0000] <Bakkot>
that case is fun

[21:35:32.0000] <devsnek>
surprised that doesn't throw in a declaration

[21:35:36.0000] <devsnek>
assignment is whatever

[21:36:04.0000] <michaelficarra>
a = 0, d = 2, b and c are 0.5

[21:36:05.0000] <ljharb>
michaelficarra: oh wait no comma, hmm

[21:36:16.0000] <michaelficarra>
ljharb: typo

[21:36:29.0000] <ljharb>
michaelficarra: ok so if it's `...c` then what i said

[21:36:43.0000] <Bakkot>
oh this is a good point waldemar is making

[21:36:46.0000] <ljharb>
michaelficarra: if it's `..., c` then i'd expect `[0, 1, [], undefined, 2]`

[21:37:08.0000] <rickbutton>
what if [a, b, ...c, d] = arr

[21:37:28.0000] <rickbutton>
[...a] = arr

[21:37:29.0000] <ljharb>
rickbutton: `[0th, 1st, slice(2), 2nd]`

[21:37:29.0000] <michaelficarra>
rickbutton: that was ljharb's first answer

[21:38:06.0000] <ljharb>
that you can write confusing patterns doesn't necessarily mean that "what it does" is actually hard to unravel, given the rules suggested above

[21:38:09.0000] <rickbutton>
oh i see

[21:39:40.0000] <michaelficarra>
nice presentation, haxjs!

[21:40:07.0000] <rickbutton>
yeah im a big fan of more expressive destructuring

[21:40:09.0000] <haxjs>
Thank u everyone!

[21:41:59.0000] <mmarchini>
+10000 to gus proposal

[21:42:32.0000] <ptomato>
yes, love this

[21:42:39.0000] <ptomato>
I am a big fan of https://github.com/zestyping/q

[21:42:44.0000] <rickbutton>
+999

[21:42:59.0000] <rkirsling>
+Math.E

[21:43:06.0000] <mmarchini>
+Infinity

[21:43:38.0000] <michaelficarra>
can't you just write `let debug = (x) -> { console.log(x); return x };` at the top of your file?

[21:43:46.0000] <Bakkot>
the thing hax wants sound more like `console.tap`, which browsers should absolutely add

[21:44:51.0000] <mmarchini>
michaelficarra: at the top of every file I ever debug?

[21:44:57.0000] <rickbutton>
you could but this is a really common desire, providing a common set of debug utilities seems useful

[21:45:06.0000] <michaelficarra>
it's not even like it's hard to work out how to do it yourself

[21:45:09.0000] <Bakkot>
I didn't realize this was just logging

[21:45:16.0000] <Bakkot>
I am way less in support of this if it is just logging

[21:45:20.0000] <michaelficarra>
I dunno, it seems really easy to do if you want it

[21:45:25.0000] <mmarchini>
It is

[21:45:27.0000] <ljharb>
`console.tap` seems great

[21:45:34.0000] <mmarchini>
It‚Äôs also easy as a language thing

[21:45:35.0000] <rickbutton>
I didn't think it was just logging, I assumed "implementation defined" meant that you could break on it

[21:45:42.0000] <michaelficarra>
I thought it would auto-thunk and conditionally evaluate or something

[21:45:47.0000] <ljharb>
mmarchini: logging isn't easy, there's no i/o in the language

[21:46:04.0000] <Bakkot>
(pedant hat: except for Date, which is I)

[21:46:21.0000] <ljharb>
troo

[21:46:27.0000] <michaelficarra>
eww Date

[21:47:06.0000] <bradleymeck>
jridgewell: no debugger is a statement

[21:47:19.0000] <Bakkot>
bradleymeck which means we could introduce it in expression position

[21:47:36.0000] <michaelficarra>
we'd need a NLTH but it should work

[21:47:42.0000] <bradleymeck>
sure

[21:47:49.0000] <gibson042>
metaproperty on debugger?

[21:47:53.0000] <ljharb>
michaelficarra: do we? you can't have a variable named debugger

[21:47:57.0000] <michaelficarra>
gibson042: why? no need

[21:47:59.0000] <ljharb>
oh but because of `debugger;`

[21:48:11.0000] <ljharb>
we could require `debugger(‚Ä¶)`

[21:48:12.0000] <michaelficarra>
ljharb: we definitely do

[21:48:23.0000] <ljharb>
yeah sorry, i realized you're right

[21:48:24.0000] <michaelficarra>
ljharb: even still

[21:48:24.0000] <Bakkot>
debugger\n(0)

[21:48:30.0000] <ljharb>
and even with the parens we'd need a NLTH yeah

[21:48:31.0000] <mmarchini>
I don‚Äôt think the proposal is intended for production logging shu

[21:49:08.0000] <michaelficarra>
I'm interested to hear this Kotlin solution

[21:49:10.0000] <shu>
mmarchini: oh, am i misunderstanding the examples?

[21:49:33.0000] <mmarchini>
I‚Äôm not speaking for Gus, but i wouldn‚Äôt except it to be used for prod logging

[21:49:40.0000] <shu>
okay

[21:49:47.0000] <shu>
that's fine, if the primary use case is actually debugging

[21:50:11.0000] <rickbutton>
yeah I'm thinking this is a trap in expression position

[21:50:14.0000] <mmarchini>
If we use the debugger statement it would be good if implementations _can_ log though

[21:50:23.0000] <rickbutton>
but your devtools could disable that or just log or whatever if you wanted

[21:50:30.0000] <mmarchini>
Most of the time I‚Äôm debugging nodejs I don‚Äôt have the debugger open

[21:50:35.0000] <rkirsling>
debugger() expr sgtm

[21:50:36.0000] <devsnek>
yeah don't use this in production logging lmao

[21:50:41.0000] <ljharb>
surely it'd be implementation-defined what it does

[21:50:43.0000] <rickbutton>
just like you can disable breakpoints

[21:50:52.0000] <shu>
devsnek: people do use console.log for production logging, no?

[21:50:53.0000] <mmarchini>
Also: don‚Äôt use console.log in production logging

[21:50:55.0000] <shu>
oh

[21:50:58.0000] <shu>
i stand corrected then

[21:51:02.0000] <devsnek>
lol

[21:51:06.0000] <ljharb>
shu: oh no, they do, all the time

[21:51:12.0000] <mmarchini>
Oh people definitely do. Don‚Äôt mean they should

[21:51:20.0000] <shu>
okay i unstand

[21:51:45.0000] <rickbutton>
nothin wrong with me using console.log on my meme website

[21:52:06.0000] <mmarchini>
I do read production as Node.js server, my bias definitely shows

[21:52:22.0000] <shu>
i read production as "sre's problem"

[21:52:45.0000] <mmarchini>
Gotta love be on the team that is SRE + developer

[21:53:16.0000] <rickbutton>
pl people

[21:53:22.0000] <devsnek>
lol

[21:53:26.0000] <rickbutton>
's production is "getting it published"

[21:53:27.0000] <rickbutton>
whoops

[21:55:41.0000] <Bakkot>
it should have an argument

[21:55:52.0000] <Bakkot>
so that there is a sensible behavior when the devtools aren't open

[21:58:25.0000] <michaelficarra>
no please no I/O in the language

[21:59:36.0000] <michaelficarra>
positional parameters were a mistake

[21:59:51.0000] <rbuckton>
`(...[, , b]) => { }`

[22:00:03.0000] <michaelficarra>
functions get 1 parameter, use an options bag if you want "more"

[22:00:11.0000] <michaelficarra>
(or curry)

[22:00:13.0000] <rickbutton>
only good part of Objective-C

[22:00:20.0000] <shu>
michaelficarra: i can't have this conversation right now

[22:02:10.0000] <rkirsling>
this might be a tough Stage 2 but it's an easy Stage 1, from my perspective

[22:02:17.0000] <ljharb>
ystartsev: the same thing we gain from optional catch, and eliding identifiers from array destructuring

[22:02:55.0000] <shu>
rkirsling: i agree with that sentiment

[22:02:56.0000] <ystartsev>
ljharb: comment from our end is that this seems like a paper cut, and doesn't seem worth introducing syntax to remove identifier names

[22:03:01.0000] <Bakkot>
I dunno, I am not convinced this identifies a problem worth solving

[22:03:10.0000] <shu>
i am not neutral on this being a problem worth solving

[22:03:23.0000] <shu>
if all possibilities have technical issues, that makes me want to drop it than push harder

[22:03:23.0000] <Bakkot>
... in which direction?

[22:03:28.0000] <shu>
Bakkot: -0

[22:03:32.0000] <drousso>
why not just use `a`, `b`, ... or any random character?

[22:03:34.0000] <ljharb>
shu: what technical issues does elision have?

[22:03:42.0000] <ljharb>
drousso: unneeded bindings are not good

[22:03:45.0000] <shu>
ljharb: i don't know, i haven't looked or reviewed the grammars in depth

[22:03:48.0000] <ljharb>
kk

[22:04:05.0000] <shu>
ljharb: but there was also a comment about it being confusing

[22:04:13.0000] <shu>
i don't have a gut intuition on if *i* think it is yet

[22:04:30.0000] <ljharb>
i don't see how `(_, _, _, x)` is perfectly clear but `(, , , x)` is confusing

[22:04:49.0000] <shu>
i'd like to hear from jack works why he thinks it's confusing

[22:04:54.0000] <shu>
cause i don't think i got that

[22:05:44.0000] <michaelficarra>
I don't hate this proposal, but I am afraid of the refactoring hazard where you accidentally leave an extra comma hanging around

[22:05:45.0000] <ljharb>
especially when `const [, , , x] = arr` is a thing

[22:06:29.0000] <mmarchini>
In practice unused Params just end up as _ today

[22:06:35.0000] <ystartsev>
michaelficarra: thats a good dpoint

[22:06:36.0000] <mmarchini>
Not even _varName, just _

[22:06:43.0000] <ljharb>
accurate

[22:06:59.0000] <Bakkot>
ljharb: that should't've been a thing, just like holes shouldn't've been a thing, and no one should ever write it, so people should not need to know what it is, which means it is not a good argument for expecting people to understnad it

[22:07:03.0000] <rbuckton>
`_`, `__`, ... or `_paramName` which is a waste to write for an unused binding.

[22:07:03.0000] <ystartsev>
mmarchini: then we don't really gain anything here

[22:07:39.0000] <mmarchini>
I‚Äôve seen `fn(a, _ /* unused foo */, b)`

[22:07:47.0000] <ljharb>
Bakkot: on holes we agree violently

[22:07:51.0000] <shu>
michaelficarra: i agree with that worry

[22:07:55.0000] <rbuckton>
ystartsev: We gain the ability to lose things from our code we don't need.

[22:07:59.0000] <ljharb>
Bakkot: people use elision in array destructuring all the time, it's quite useful

[22:07:59.0000] <michaelficarra>
mmarchini: you can't duplicate names

[22:08:05.0000] <Bakkot>
:(

[22:08:07.0000] <mmarchini>
As a user, `fn(a, /* unused foo */, b)` seems a lot clearer that it‚Äôs not used

[22:08:11.0000] <rbuckton>
Its primarily useful for callbacks.

[22:08:17.0000] <ljharb>
Bakkot: `const [, match] = str.match(re)`

[22:08:26.0000] <shu>
mmarchini: more than `fn(a, unused_foo, b)`, how come?

[22:08:35.0000] <Bakkot>
ljharb `const match = str.match(re)[1]`, every time

[22:08:49.0000] <rkirsling>
I mean duplicability of `_` would be one solution

[22:08:55.0000] <Bakkot>
well, actually, these days named capturing groups and named destructuring instead

[22:08:58.0000] <rkirsling>
hence I think this is a worthy topic

[22:09:01.0000] <mmarchini>
shu: idk i‚Äôm just showing what I see in the wild

[22:09:06.0000] <ljharb>
Bakkot: a) widely used eslint rules force array destructuring instead of `[1]`, and b) many people prefer the destructuring form

[22:09:15.0000] <ljharb>
Bakkot: but yeah named groups is unarguably better

[22:09:16.0000] <mmarchini>
The vast majority of time

[22:09:17.0000] <shu>
mmarchini: i'm not sure i follow, elisions aren't a thing in the wild, so what are you seeing?

[22:09:35.0000] <Bakkot>
ljharb those are dumb rules; I stand by "no one should ever write that" even if there is a lint rule which tells them to

[22:09:38.0000] <mmarchini>
_ being used as the sole way of shadowing an unused param (instead of _varName)

[22:09:40.0000] <rbuckton>
ystartsev: This is about parameters, not arguments though

[22:10:35.0000] <michaelficarra>
rbuckton: the problem exists, even if she's mischaracterising it a bit

[22:10:43.0000] <shu>
mmarchini: sorry, i was replying to that `fn(a, /* unused foo */, b)` is clearer than a dummy named parameter

[22:11:01.0000] <shu>
rbuckton: yulia's point stands for parameters

[22:11:05.0000] <michaelficarra>
when removing an internal parameter name, you could leave its comma and wind up with bad offsets on the successive parameters

[22:11:13.0000] <mmarchini>
Yeah, what I meant is that elision with a comment is more clear than a _ or _ with a comment

[22:11:13.0000] <shu>
+1

[22:11:17.0000] <shu>
+1 to michaelficarra

[22:11:18.0000] <rbuckton>
I understand that, but we already have existing semantics for how trailing `,` is handled in arrays and in destructuring, we would just need to be consistent.

[22:11:26.0000] <shu>
it's not trailing that i'm worried about

[22:11:30.0000] <shu>
it's the preceding ones

[22:11:31.0000] <michaelficarra>
so I would prefer explicit syntax but I don't think it's worth the new syntax for this kind of problem

[22:12:07.0000] <michaelficarra>
rbuckton: we're not talking about trailing commas here

[22:12:24.0000] <rbuckton>
I see elision as a benefit to callbacks. I wouldn't generally want to use it for named functions.

[22:12:50.0000] <shu>
michaelficarra: i think your point on readability puts me at a -0.5 from a -0

[22:12:51.0000] <michaelficarra>
oh wow, the empty binding pattern is a good idea

[22:13:16.0000] <Bakkot>
has to be `{} = {}` to avoid errors though

[22:13:18.0000] <michaelficarra>
one of those doesn't accept null/undefined though

[22:13:19.0000] <Bakkot>
which sucks

[22:13:20.0000] <ljharb>
fails on null, same reason empty catch was needed

[22:13:25.0000] <Bakkot>
oh right

[22:13:26.0000] <ljharb>
*optional catch

[22:13:31.0000] <mmarchini>
:(

[22:13:32.0000] <rkirsling>
:(

[22:13:42.0000] <rbuckton>
:(

[22:14:11.0000] <devsnek>
:(

[22:14:26.0000] <michaelficarra>
I think we could reevaluate if entirely different possible solutions were presented

[22:14:29.0000] <rbuckton>
You can already elide trailing parameters in callbacks, you just don't bind them. There's just no way to do it for leading parameters.

[22:15:14.0000] <rbuckton>
sorry, "no way" is incorrect, there's still `(...[, , x]) => {}`

[22:16:03.0000] <rkirsling>
this really just feels like "I'm blocking Stage 1 because I can't envision this reaching Stage 2"

[22:16:04.0000] <bradleymeck>
that fires off Array[Symbol.iterator] though which if you are being defensive might not be viable (stares angrily at node internals)

[22:16:33.0000] <michaelficarra>
rkirsling: if you believe strongly enough that it *can't*, not just that it's unlikely, I think that's fine

[22:16:44.0000] <Bakkot>
rkirsling for my part I wasn't going to block, but I did think this did not successfully identify a problem worth solving

[22:16:51.0000] <Bakkot>
which is the criteria I use for stage 1

[22:16:52.0000] <rkirsling>
alright

[22:17:01.0000] <rkirsling>
just feels mildly unfair

[22:17:02.0000] <ystartsev>
yep, thats what we identified as well

[22:17:34.0000] <michaelficarra>
I personally think the problem was worth solving, but only if there was very little cost. New explicit syntax was too much cost, and adding elision was too risky IMO.

[22:18:06.0000] <rkirsling>
I felt like I didn't hear a reason why making `_` duplicable would be so unreasonable

[22:18:09.0000] <devsnek>
queue needs to be advanced

[22:18:28.0000] <devsnek>
rkirsling: mark and yulia said unnamed parameters are bad

[22:18:31.0000] <ljharb>
rkirsling: i find making _ special wildly unreasonable

[22:18:42.0000] <michaelficarra>
rkirsling: yeah I think a solution like that could be possible, so I would've supported at least stage 1

[22:18:43.0000] <ljharb>
rkirsling: identifiers are identifiers

[22:18:53.0000] <ljharb>
rkirsling: allowing duplication of anything tho, i'd love

[22:19:00.0000] <rkirsling>
fair enough

[22:20:34.0000] <michaelficarra>
devsnek: you could try going the route ljharb suggests as an alternative to your proposal

[22:21:01.0000] <devsnek>
michaelficarra: that was open

[22:21:16.0000] <ystartsev>
devsnek: one comment on your proposals: It is hard to tell what you are actually proposing

[22:21:34.0000] <ystartsev>
part of the reason i didn't say anything about debug is that the repo had so little information

[22:21:53.0000] <michaelficarra>
divmod <3

[22:21:57.0000] <ystartsev>
and i was suprised by what was being proposed in the end, but couldn't think fast enough to actually say anything

[22:21:58.0000] <ljharb>
ystartsev: what problem is proposed to be solved? or what solution is being suggested

[22:22:25.0000] <ystartsev>
ljharb: devsnek just said that deduplication was an option for this

[22:22:37.0000] <ystartsev>
but that, in my opinion, is a wildly different proposal

[22:22:47.0000] <ljharb>
proposals prior to stage 2 are about problems, not solutions

[22:22:48.0000] <gibson042>
it is weird to have Math.imul

[22:22:54.0000] <devsnek>
i tried to be clear about it being "lets do something about duplicated parameters"

[22:23:09.0000] <devsnek>
i bring potential solutions to jog the room but this is just stage 1

[22:23:18.0000] <devsnek>
er

[22:23:20.0000] <ystartsev>
devsnek: duplicated parameters don't exist right now, so there isn't anything to be done about them

[22:23:22.0000] <devsnek>
"lets do something about unused parameters"

[22:23:28.0000] <ystartsev>
yes

[22:23:34.0000] <devsnek>
sorry reading while writing :P

[22:24:02.0000] <ystartsev>
and based on what was proposed, and the readme, it is not clear that this isn't actually to the detriment of the language. the problem is small and all of the proposed solutions had significant problems

[22:24:10.0000] <michaelficarra>
FWIW I understood that we were trying to solve the unused leading parameters problem

[22:24:21.0000] <michaelficarra>
the debug one, however....

[22:24:26.0000] <ystartsev>
presenting allowing duplicating *any* parameter is very different and requires a different review

[22:24:35.0000] <michaelficarra>
^

[22:24:49.0000] <ljharb>
ystartsev: i don't understand how a potential solution requires review prior to seeking stage 2 advancement

[22:25:01.0000] <devsnek>
so in the future, lean harder into enumerating actual solutions for stage 1?

[22:25:02.0000] <ystartsev>
ljharb: this isn't a solution, its an entirely different problem

[22:25:21.0000] <michaelficarra>
devsnek: please no

[22:25:27.0000] <ljharb>
ystartsev: duplicating any param addresses the same problem, "how do i avoid creating a bunch of unused bindings when i want unused params"

[22:25:38.0000] <ystartsev>
devsnek: i think the problem was well stated in this case, it just wasn't one that we saw as significant enough to solve right now

[22:25:39.0000] <ljharb>
(deduping creates 1 useless binding instead of n)

[22:25:45.0000] <devsnek>
ystartsev: that's fine

[22:25:53.0000] <devsnek>
i'm more concerned about my proposals being unclear

[22:26:11.0000] <ystartsev>
ljharb: then we would block it on it causing such far reaching implications for the language for so small a gain. our block stands

[22:26:24.0000] <mmarchini>
But that‚Äôs stage 1

[22:26:31.0000] <ljharb>
ystartsev: right but again, that's a "seeking stage 2" concern

[22:26:35.0000] <ystartsev>
devsnek: that is related to the debug proposal, which had no explanatory text

[22:26:37.0000] <ljharb>
solutions *don't exist* prior to seeking stage 2

[22:26:48.0000] <ljharb>
blocking stage 1 means "the problem isn't worth any solution"

[22:26:50.0000] <rkirsling>
I'm specifically uncomfortable with this *in the context of* the current process document revision

[22:27:11.0000] <ystartsev>
ljharb: as i said above, the problem is noted, but doesn't seem significant enough and our current solution is better

[22:27:12.0000] <rkirsling>
I have no expectation that this proposal would reach stage 2

[22:27:14.0000] <ljharb>
like, things like this have gotten stage 1 with "it will never get to stage 2 unless the solution is wildly different"

[22:27:17.0000] <haxjs>
I think there is a good motivation to allowed unused param, it seems we create a too high bar for things like that.

[22:27:19.0000] <michaelficarra>
can this proposal go straight to stage 3?

[22:27:29.0000] <devsnek>
michaelficarra: why stop there

[22:27:45.0000] <michaelficarra>
devsnek: have you already implemented it?

[22:27:56.0000] <devsnek>
lol, no

[22:28:32.0000] <gibson042>
that has definitely happened in the history of this committee, though

[22:28:48.0000] <michaelficarra>
1 to 4? I don't think so

[22:28:53.0000] <michaelficarra>
1 to 3? maybe once

[22:29:05.0000] <michaelficarra>
0 to 3? I don't think so either

[22:30:23.0000] <devsnek>
i think stage 2 would be completely reasonable here

[22:30:33.0000] <ljharb>
0 to 3 has happened

[22:30:36.0000] <michaelficarra>
devsnek: me too

[22:30:37.0000] <haxjs>
i think api like that could advance fast, but complicated feature (for example, syntax involved) should be very careful

[22:30:41.0000] <ljharb>
didn't optional catch do that? or did it only do 0 to 2

[22:30:54.0000] <ljharb>
nothing has ever skipped 3 that i'm aware of

[22:31:01.0000] <devsnek>
ljharb: ptc

[22:31:02.0000] <michaelficarra>
ljharb: I don't think optional catch skipped

[22:31:18.0000] <michaelficarra>
devsnek: that was pre-stage process

[22:31:21.0000] <rkirsling>
while this is about as uncontroversial as it gets, that kind of leap gives me a lot of pause

[22:31:30.0000] <devsnek>
michaelficarra: yeah was more a jab at it not having two implementations

[22:31:55.0000] <michaelficarra>
rkirsling: really what's being proposed here is a specific solution, so it should be fine

[22:32:17.0000] <rkirsling>
yeah I mean like if the spec is there, it does seem to be already implementable

[22:32:24.0000] <ljharb>
michaelficarra: https://github.com/tc39/notes/blob/8e8bfcbddcb29c09a10b0845a55af2e0d31b6f49/meetings/2017-07/summary.md says "advanced straight to Stage 3"

[22:32:35.0000] <ptomato>
geez, the notes doc is freezing for like 30 seconds at a time

[22:32:52.0000] <ptomato>
is that happening for anyone else?

[22:33:25.0000] <haxjs>
yes ! i also lagged when i was presenting

[22:33:44.0000] <haxjs>
make me very nervous...because i can't see the notes to catch all the questions...

[22:34:18.0000] <michaelficarra>
ljharb: straight from stage 2! I dunno

[22:35:25.0000] <ljharb>
michaelficarra: that was the first presentation as far as i can tell

[22:36:18.0000] <michaelficarra>
ljharb: damn I'm good

[22:36:23.0000] <ljharb>
:-p

[22:36:33.0000] <rickbutton>
should start a fantasy league

[22:36:50.0000] <ptomato>
it's especially hard when you're trying to take the notes :-P

[22:38:26.0000] <gibson042>
I can't unmute, but I'm also still interested

[22:43:47.0000] <michaelficarra>
ljharb: is that something that can be worked out between you and hax and only involve the rest of committee if you make progress that needs additional eyes?

[22:44:26.0000] <ljharb>
michaelficarra: specifically, it's "would a generic class brand check proposal obviate the need for `in`" - https://github.com/tc39/proposal-private-fields-in-in/issues/13

[22:44:56.0000] <ljharb>
if issue discussion can persuade folks that either a) no, `in` is needed regardless or b) the more general proposal is not viable, i think that'd do it

[22:45:12.0000] <devsnek>
i don't agree that class brand checks replace the need

[22:45:21.0000] <ystartsev>
rkirsling: re the process document. I had included a line that stage 1 blocking was limited, but several delegates objected to that and it was removed

[22:45:32.0000] <ljharb>
devsnek: comments to that effect appreciated

[22:45:35.0000] <ystartsev>
so part of us blocking here was in line with the most recent reading of the document

[22:45:43.0000] <devsnek>
you could, in theory, have several different objects sharing some private fields but not others

[22:45:56.0000] <devsnek>
tying them together seems unfortunate

[22:45:59.0000] <ljharb>
devsnek: examples of just that would be helpful, i couldn't come up with one

[22:46:02.0000] <Bakkot>
with the private-decls proposal that would be common, even

[22:46:03.0000] <ystartsev>
i spoke to devsnek, that if he wanted to try to advance it I would back down -- but it is unlikely to get to stage 2

[22:46:14.0000] <rkirsling>
hmm alright

[22:46:20.0000] <rkirsling>
yeah I certainly agree about stage 2

[22:46:33.0000] <michaelficarra>
chairs: TCQ isn't updated

[22:47:08.0000] <Bakkot>
they're working on it

[22:47:41.0000] <robpalme>
it was a marathon

[22:48:22.0000] <Bakkot>
ljharb did you want to say your thing about disliking video?

[22:48:33.0000] <ljharb>
y

[22:48:33.0000] <rbuckton>
I wanted to try out Teams' transcription. I tried it very briefly a few days ago, but I think there are issues with transcriptions for Guests (due to permissions)

[22:48:37.0000] <Bakkot>
should get on the queue I guess

[22:48:47.0000] <devsnek>
lets make sure we're not just throwing tech at a problem

[22:48:58.0000] <devsnek>
we are better than the orange site

[22:49:15.0000] <Bakkot>
throwing tech at the problem is great

[22:49:18.0000] <Bakkot>
that is what tech is for

[22:49:22.0000] <Bakkot>
alleviating human suffering

[22:49:30.0000] <mmarchini>
It‚Äôs great, you usually get another problem :)

[22:49:34.0000] <devsnek>
lol i'm definitely saying tech can't help

[22:49:38.0000] <devsnek>
er

[22:49:48.0000] <devsnek>
i'm definitely ***not*** saying tech can't help

[22:49:48.0000] <ljharb>
Bakkot: super good job it's done so far

[22:49:55.0000] <michaelficarra>
rbucton: you can't be suggesting we use Teams for future meetings, have you seen how it has been (not) working for so many people?

[22:49:59.0000] <mmarchini>
Jk i think there‚Äôs room for improvements in the note taking area

[22:50:07.0000] <Bakkot>
ljharb https://ourworldindata.org/child-mortality

[22:50:14.0000] <mmarchini>
I helped a few times and oof it‚Äôs hard

[22:50:33.0000] <rbuckton>
michaelficarra: I've been collecting some feedback to provide to the team.

[22:50:33.0000] <michaelficarra>
Bakkot: that got dark quick

[22:50:51.0000] <ljharb>
lol i can't really counter "less kids die", so bailing out of that one

[22:50:52.0000] <Bakkot>
michaelficarra I dunno, that's probably the single most hopeful chart I have ever seen

[22:51:00.0000] <devsnek>
fewer*

[22:51:07.0000] <michaelficarra>
^

[22:51:55.0000] <rkirsling>
yeah exactly, it's like writing down every word in a lecture

[22:52:02.0000] <devsnek>
hitting the play button on those charts is insanely satisfying

[22:52:09.0000] <devsnek>
the animation is top notch

[22:52:43.0000] <mmarchini>
Video + auto generated transcript is probably the best compromise we can get to alleviate note taking from delegates

[22:52:45.0000] <akirose>
does everyone else not just cmd+f their linitialism?

[22:52:51.0000] <ljharb>
that's what i do

[22:53:08.0000] <rkirsling>
mmarchini: agree

[22:53:12.0000] <devsnek>
someone had the idea to hire dedicated note taker(s)

[22:53:21.0000] <ljharb>
it'd take a lot of talking before reviewing my own comments for all 4 days takes even close to an hour

[22:53:30.0000] <devsnek>
can stenotypes do codeblocks

[22:53:36.0000] <akirose>
yeah

[22:53:41.0000] <akirose>
let's hire mirabai

[22:53:46.0000] <rickbutton>
we should investigate hiring professionals

[22:53:47.0000] <Bakkot>
I am really hoping we can get live transcriptions into a google doc

[22:53:52.0000] <Bakkot>
from google speech or whatever

[22:53:57.0000] <Bakkot>
with note takers just fixing errors

[22:54:00.0000] <Bakkot>
and doing attribution

[22:54:06.0000] <akirose>
http://stenoknight.com üòç

[22:54:13.0000] <rickbutton>
imagine paying people to take complete notes and formatting them well and categorizing them

[22:54:17.0000] <Bakkot>
i don't know how well it will work, but if it works as well as google meet's transcriptions it would be _incredible_

[22:54:44.0000] <devsnek>
i can film my phone adding live captions, then OCR those into notepad and copy them into google drive

[22:54:50.0000] <rkirsling>
I would be willing to help _post-edit_ notes but I find the current procedure intensely stressful

[22:55:05.0000] <mmarchini>
Yeah same

[22:55:08.0000] <michaelficarra>
rkirsling: same

[22:55:08.0000] <rkirsling>
that's why I never volunteer, in spite of feeling awful for not volunteering

[22:55:34.0000] <mmarchini>
When I help I can‚Äôt pay attention to the discussion as I‚Äôm just trying to type as fast as folks talk

[22:55:39.0000] <Bakkot>
chairs: I would really like to say my thing about my proposal before the end of this meeting, since it determines if I try to do the work before the next meeting

[22:56:02.0000] <michaelficarra>
note-taking has made me miss opportunities to contribute and also just not fully follow the actual technical content of the conversation, so I just don't volunteer anymore

[22:56:10.0000] <devsnek>
https://cloud.google.com/speech-to-text/docs/streaming-recognize#speech-streaming-recognize-nodejs

[22:56:23.0000] <mmarchini>
+ not being native English speaker I easily lose the discussion flow while typing

[22:56:24.0000] <Bakkot>
devsnek yeah that's the one I'm referring to

[22:56:33.0000] <devsnek>
not sure if their api supports real time

[22:56:36.0000] <Bakkot>
it does

[22:56:36.0000] <michaelficarra>
Bakkot: you can try it out at the next meeting regardless, just point it at the notes google doc

[22:56:43.0000] <devsnek>
it looks like it expects chunks of data

[22:56:48.0000] <Bakkot>
michaelficarra I need permission from everyone

[22:56:50.0000] <Bakkot>
legally

[22:56:55.0000] <Bakkot>
if someone's going to object I want to know before doing the work

[22:57:08.0000] <michaelficarra>
just ask at the beginning of the meeting then?

[22:57:12.0000] <michaelficarra>
POO it

[22:57:22.0000] <devsnek>
ask right now in your queue item

[22:57:27.0000] <devsnek>
i'd be happy to help btw

[22:57:30.0000] <michaelficarra>
waldemar is right

[22:57:46.0000] <ljharb>
even an interim artifact that results in public notes?

[22:58:04.0000] <ljharb>
k

[22:58:35.0000] <devsnek>
technically if we're streaming voice data to google we're not recording it

[22:59:10.0000] <Bakkot>
devsnek re: chunks: https://cloud.google.com/speech-to-text has a demo you can see it does live

[22:59:18.0000] <Bakkot>
(also their examples have the same thing)

[22:59:22.0000] <Bakkot>
(their code samples, that is)

[22:59:26.0000] <devsnek>
i was reading the nodejs example

[22:59:27.0000] <littledan>
Bakkot: I haven't reviewed the PR yet, I'm sorry. I don't want to hold it up if this will cause extra work for you, but I don't understand why it is coupled or in a hurry. I won't be rejoining the call as I am exhausted and will go back to sleep.

[22:59:43.0000] <Bakkot>
littledan no worries, it's not too much a burden, go back to sleep

[22:59:45.0000] <Bakkot>
I'll revisit next meeting

[22:59:46.0000] <michaelficarra>
littledan: too late, it's already held up

[23:00:32.0000] <devsnek>
aha you can do it via ws

[23:01:13.0000] <michaelficarra>
FYI google speech to text is *amazingly* accurate

[23:02:30.0000] <michaelficarra>
also FYI we will still have to do our own attribution

[23:02:41.0000] <devsnek>
Bakkot: streaming requests cut off after around 5 minutes

[23:02:43.0000] <devsnek>
according to the docs

[23:02:57.0000] <Bakkot>
devsnek their code samples deal with that

[23:03:07.0000] <Bakkot>
they cut it off and make a new stream before the timeout

[23:03:19.0000] <devsnek>
oh ok

[23:03:24.0000] <Bakkot>
(at least, from what i've read; I haven't done the work yet)

[23:03:40.0000] <rickbutton>
Bakkot: if you hook into the meet call with an extension you could auto detect the person speaking

[23:03:48.0000] <devsnek>
inb4 the hardest part is getting the text into google docs

[23:03:59.0000] <Bakkot>
rickbutton yeah, though that will not be in v1.0

[23:04:04.0000] <Bakkot>
devsnek nah I've done that before, it's super easy

[23:04:08.0000] <rickbutton>
sure don't need it in an mvp

[23:04:13.0000] <Bakkot>
hardest part is getting the audio to the speech API

[23:04:14.0000] <Bakkot>
by far

[23:04:18.0000] <devsnek>
Bakkot: like via an api or like puppeteering

[23:04:22.0000] <Bakkot>
devsnek an API

[23:04:25.0000] <devsnek>
nice

[23:04:25.0000] <Bakkot>
gdocs api is good/free

[23:04:35.0000] <rickbutton>
does webaudio let you do redirection shenanigans?

[23:04:52.0000] <Bakkot>
not that I've seen, and also I can't figure out how to connect to the speech api from websockets

[23:05:02.0000] <devsnek>
RE the demo on the site

[23:05:08.0000] <rickbutton>
probably will need to use one of those virtual audio devices

[23:05:10.0000] <Bakkot>
yeah I can't figure out how their demo works

[23:05:13.0000] <rickbutton>
ill stop backseating

[23:05:31.0000] <Bakkot>
rickbutton that's my current plan! specifically https://github.com/ExistentialAudio/BlackHole

[23:05:53.0000] <rickbutton>
nice

[23:05:58.0000] <devsnek>
Bakkot: just reverse engineer zoom's protocol smh

[23:06:04.0000] <Bakkot>
devsnek someday, someday

[23:06:10.0000] <devsnek>
v2

[23:06:16.0000] <rickbutton>
just invent a new voice chat application that has this built in

[23:06:23.0000] <devsnek>
call it meet

[23:06:33.0000] <Bakkot>
lol

[23:06:37.0000] <rickbutton>
just invent a new internet that is specifically used for routing our call

[23:06:48.0000] <Bakkot>
we can call it "telephones"

[23:07:01.0000] <devsnek>
vonage

[23:07:06.0000] <rickbutton>
man using landlines would make the delay so much nicer

[23:07:28.0000] <Bakkot>
btw if someone else wants to build this google speech api -> google docs thing, please reach out

[23:07:38.0000] <devsnek>
i'd be interested in helping

[23:07:56.0000] <devsnek>
as long as you use semicolons, that is

[23:08:10.0000] <rickbutton>
you have to use standardjs

[23:08:11.0000] <Bakkot>
ofc, I'm not a heathen

[23:08:23.0000] <rickbutton>
prettier with 2 spaces

[23:08:29.0000] <rickbutton>
the horror

[23:08:29.0000] <shu>
do people still use coffeescript

[23:08:32.0000] <Bakkot>
prettier has approximately the correct defaults

[23:08:36.0000] <Bakkot>
this is partly because I maintain it

[23:08:37.0000] <rickbutton>
Bakkot: false

[23:08:40.0000] <rickbutton>
:)

[23:08:41.0000] <devsnek>
shu: at least one very loud person does

[23:08:53.0000] <shu>
devsnek: oh? who?

[23:08:59.0000] <devsnek>
the guy who maintains it

[23:09:08.0000] <michaelficarra>
who maintains it nowadays?

[23:09:11.0000] <devsnek>
geoffrey booth

[23:09:18.0000] <michaelficarra>
oh, hmm

[23:09:27.0000] <devsnek>
most of the crazy stuff in node's current esm is due to his constraints for coffeescript

[23:09:30.0000] <devsnek>
its a very weird story

[23:10:26.0000] <robpalme>
I don't think that coffeescript is the main cause of Node's ESM quirks

[23:11:05.0000] <devsnek>
robpalme: not all of them

[23:11:08.0000] <devsnek>
but you would be surprised

[23:12:32.0000] <ljharb>
robpalme: coffeescript ‚Üí babel

[23:12:39.0000] <ljharb>
robpalme: but also, what gus said

[23:13:11.0000] <rkirsling>
I like coffee and javascript

[23:13:24.0000] <rkirsling>
as two separate things

[23:13:50.0000] <robpalme>
I'd generalize it more to be "the code written by folk that loved ESM so much they wanted to use it to author CJS ahead of native support", rather than pinning it on any one tool

[23:14:28.0000] <devsnek>
robpalme: i sat through *years* of node esm meetings i'm too cynical

[23:14:50.0000] <robpalme>
i have sat through the same ones

[23:15:43.0000] <robpalme>
again, I would refrain from blaming specific tools - they are just reflecting positive healthy demand for ESM.  maybe it's just a point of view thing.

[23:16:21.0000] <devsnek>
well there's a rabbit hole there but we can leave it at demand for esm

[23:16:39.0000] <devsnek>
anyway its 1am i'm going to log off, later folks

[23:16:48.0000] <rickbutton>
have a good night

[15:05:24.0000] <shu>
dandclark: hi! could you please PM your email?

[15:05:59.0000] <shu>
dandclark: i'd like to sync up on implementation work for import assertions in chromium

[15:22:28.0000] <dandclark>
shu: Sent you a PM


2020-09-25
[20:38:18.0000] <haxjs>
```js

[20:38:19.0000] <haxjs>
let i = 0

[20:38:19.0000] <haxjs>
const iter = {

[20:38:19.0000] <haxjs>
	[Symbol.iterator]() {

[20:38:19.0000] <haxjs>
		return {

[20:38:19.0000] <haxjs>
			next() {

[20:38:19.0000] <haxjs>
				return {value: ++i, done: i % 3 === 0}

[20:38:19.0000] <haxjs>
			},

[20:38:20.0000] <haxjs>
		}

[20:38:20.0000] <haxjs>
	}

[20:38:21.0000] <haxjs>
}

[20:38:22.0000] <haxjs>
const [a, b, c, ...d] = iter

[20:38:22.0000] <haxjs>
```

[20:42:11.0000] <haxjs>
`d` value: v8, xs, chakra returns `[4, 5]`, other engines empty array. V8,xs,chakra seems buggy. But not sure whether it's only engines bug or there are some issues in the spec.


2020-09-28
[12:52:52.0000] <rkirsling>
shu: it obviously means that it's a "tasty" proposal

[13:02:38.0000] <rkirsling>
also I guess we wouldn't want to go with literal temperature indication like ü•∂ ü•µ

[14:45:00.0000] <bradleymeck>
i dislike how complex grammar parameters can be when something seems relatively simple to explain

[14:54:59.0000] <TabAtkins>
My policy is, whenever the grammar seems too complex, just invent new grammar forms that make it easier.

[14:55:07.0000] <TabAtkins>
*make it LOOK easier

[14:55:37.0000] <TabAtkins>
rkirsling: The cold one seems good, the "thirsty for ****" one is not so good

[14:56:34.0000] <bradleymeck>
do all our semantics have unique productions if they are under a grammar parameter? I'm trying to add `export { StringLiteral as StringLiteral } from StringLiteral` basically and... it seems we need to add a `[+From]` parameter to ExportSpecifier when taking that route since you can't create a local reference to a binding via a string name so you can only have LHS be a string when there is no `from` clause

[14:56:52.0000] <bradleymeck>
but making a unique production for just that case seems... a bit much?

[14:57:28.0000] <rkirsling>
TabAtkins: I mean even without the misinterpretable realization of that emoji, "sweating due to heat" would still be very different from +1

[14:58:01.0000] <TabAtkins>
icy and shaes

[14:58:03.0000] <TabAtkins>
shades

[14:58:35.0000] <rkirsling>
üòé would work, yeah

[14:59:29.0000] <drousso>
why not just ‚ùÑÔ∏è and üî•?

[14:59:57.0000] <rkirsling>
even better probably

[15:00:34.0000] <rkirsling>
or well maybe üßä so that it's not a snowflake? hmm

[15:00:47.0000] <rkirsling>
nah, too non-descript

[15:14:43.0000] <bradleymeck>
'

[15:20:53.0000] <Bakkot>
bradleymeck: not sure what "do all our semantics have unique productions if they are under a grammar parameter" means

[15:21:23.0000] <Bakkot>
your commit seems like a reasonable approach (once you fix the issues the linter is complaining about)


2020-09-30
[15:32:34.0000] <rkirsling>
aww, no middle dot for multiplication, huh? :) https://github.com/tc39/ecma262/issues/2183#issuecomment-701677977

