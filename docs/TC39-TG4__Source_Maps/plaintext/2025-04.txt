2025-04-01
[23:26:53.0209] <Simon ZÃ¼nd>
Holger Benl: FYI, I updated the scopes codec library with the most recent proposal changes


2025-04-07
[10:27:15.0367] <James>
hello ðŸ‘€ one thing I was talking about recently as part of e18e.dev efforts was the idea of a sourcemaps server (like how c#/.net has symbol servers)
maybe its worth bringing up here and seeing what people think

something like npm but which hosts sourcemaps and nothing else. at build time we point all of our sources at that server (inject the domain into the sourcemaps url) rather than shipping sourcemaps

has anyone ever thought about that?

[10:27:59.0055] <James>
could we build that today with existing sourcemaps or would we not be able to reference another host?

[13:00:12.0210] <Nic>
I have no knowledge about .net and c# â€” what would that be? Like a CDN for source maps?

[13:00:35.0378] <Nic>
Or a package registry for them?

[13:00:49.0790] <Nic>
What are the advantages/disadvantages over the current approaches?


2025-04-08
[21:18:20.0169] <Simon ZÃ¼nd>
To answer the last question first: You'd be able to achieve this already with the current source map format. The sourceMappingURL is allowed to be cross-origin.

The closest thing I can think of are artifact servers for cloud providers. E.g. MS Azure allows you to host source maps (and original source files) for you behind some OAuth, so you can securely debug an app without making the source/source maps publicly available (https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/javascript/consume-source-maps-from-azure).

AFAIK there is no package registry purely for source maps yet.

[05:01:46.0008] <littledan>
should we work together to build one? It could make source maps available in practice more of the time, reduce the incentive for doing a data URL for the source map (which slows down loading time), and reduce the size of npm packages (for installation time)

[06:15:16.0499] <James>
ah nice! i didn't realise map URLs can be cross-origin

[06:16:44.0607] <James>
Nic: the benefit .net and various other languages doing this have is that they don't need to ship debug symbols
think of a compiled language, you want to ship the cut down production binary with no debug symbols etc. 
you then pull those symbols from a separate source if you want to debug said binary

we could do the same by having a sourcemap registry and pull sourcemaps from there instead of shipping them in our packages

[06:17:25.0272] <James>
e.g. cloudflare recently removed sourcemaps and halved their package size. great for everyone except the couple of people who want to debug it nicely. but if they could pull those maps from some other source, that'd solve it for both sides

[06:19:05.0900] <James>
we could do this now by having a build-time transform which sets the sourcemap URL to a remote one and uploads them to the server

[06:34:48.0587] <Nic>
Could it be something like we have `@types/foo`, e.g. `@source-map/foo`?

[06:41:45.0040] <James>
i think so yes

[06:43:14.0872] <James>
though maybe its more like unpkg or something. as it isn't something you'd pull from npm. if you did host it on npm though, i suppose you could use something like unpkg/jsdelivr/etc to retrieve it

[06:43:52.0654] <James>
i.e. if we publish our map to `@source-map/foo`, our sources link to `somecdn.com/@source-map/foo/lib/index.js.map`

[06:44:10.0873] <James>
maybe thats how you avoid needing a whole new registry/host

[09:17:32.0179] <ljharb>
`@types` works because DT manages all those packages - i don't think you'd want to have to manage everyone's source maps and keep them in sync

[11:43:54.0498] <littledan>
yeah having your source maps centralized on some cdn seems less risky than actually loading your source from there

[11:58:56.0211] <kriskowal>
I would like to see it to become common for the stock source map URL to be a content address of the preceding text, and eventually, implicit, so an IDE could be configured to find the sourcemap in whatever storage. At Agoric, weâ€™ve been working toward a solution where our bundler drops source maps in a conventional XDG caches directory, keyed on content address. We believe thereâ€™s a solution you can rig up WebPack this way and, in a VSCode launch.json, map content addresses to local physical files, but I simply havenâ€™t found credible documentation for it.

[11:59:11.0544] <kriskowal>
Consider `source-map://${hash}.map.json`.

[13:27:45.0104] <rbuckton>
Do you mean using `"sourceMapPathOverrides"`? https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_overriding-source-map-paths

[13:32:18.0198] <kriskowal>
There it is!

[13:35:29.0570] <kriskowal>
So, I believe this is the thing we would use to make `source-map://${hash}.map.json` just work. It doesnâ€™t look particularly fancy, so itâ€™d probably look more like `source-map://b0/b5c0ffeefacade.map.json` so we donâ€™t end up with intractable `readdir` expenses.

[13:36:31.0852] <kriskowal>
If that practice became the norm, bundlers, LSP, and registries could conspire to their heartsâ€™ content.

