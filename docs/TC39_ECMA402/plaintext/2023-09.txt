2023-09-01
[04:36:55.0708] <hsivonen>
Is BasicFormatMatcher descriptive of ICU4C internals. That is, does "do whatever ICU4C does for datetime format matching" mean BasicFormatMatcher or something different?

[04:37:38.0384] <hsivonen>
 * Is BasicFormatMatcher descriptive of ICU4C internals? That is, does "do whatever ICU4C does for datetime format matching" mean BasicFormatMatcher or something different?

[05:58:47.0193] <eemeli>
So I wrote up a new ECMA-402 proposal: https://github.com/eemeli/proposal-intl-root-locale

I added that to next week's agenda, and hope to also present it to TG1 in Tokyo.

[11:27:48.0787] <ptomato>
I read the readme and I like the idea, it's similar to the idea of the "iso8601" calendar and "UTC" time zone in Temporal being fully specified and required to be present

[15:12:47.0613] <justingrant>
A well-specified "default locale" sounds like a good idea. Is the output of other Intl types abused (meaning parsed by userland code instead of being shown as-is to users) in the same way that intl.DateTimeFormat is?


2023-09-04
[14:02:27.0312] <sffc>
CLDR performs some fallbacks that aren't allowed by naive subtag stripping in `"best fit"`, like en-GB to en-001 or hi-Latn to en-IN

[14:03:09.0615] <sffc>
However, I don't think this behavior is currently observable because ICU, and therefore browsers, treat anything with a nonstandard fallback to be in the availableLocales list

[14:04:32.0906] <sffc>
The spec reads as if it is based on the UTS 35 skeleton resolution algorithm, which is the same algorithm used in ICU

[14:05:48.0304] <sffc>
For both this and `localeMatcher: "lookup"`, it's not clear to me what the motivation was to write what are essentially reference algorithms in the spec when most everyone will be using the alternative implementation-defined routines anyway

[14:06:37.0521] <sffc>
and since these are data-driven algorithms. People can't rely on the behavior of either `localeMatcher: "lookup"` or `BasicFormatMatcher` because they are subject to change when data changes.

