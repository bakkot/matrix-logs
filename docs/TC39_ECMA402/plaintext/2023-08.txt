2023-08-14
[11:30:02.0884] <ramsey>
Is anyone aware of any language tags that would return "bottom-to-top" when passed to icu4c's `uloc_getLineOrientation()` function?

[11:31:18.0020] <ramsey>
For example, I've tried `pgl-Ogam` (Primitive Irish, Ogham script), but that returns "top-to-bottom" (which maybe is wrong?)

[11:32:58.0774] <ramsey>
Also, I know this is a channel for ECMA-402, but I was looking into the Intl Locale Info Proposal, which has a `getTextInfo()` method that includes (character) `direction`, and I was wondering why "line direction" was left out, but maybe it's because there are no language tags that would produce "bottom-to-top" in ICU

[11:35:20.0197] <littledan>
Wow, this is a pretty advanced question. I wonder if people over on the Unicode Slack would have that background, about what's in CLDR

[11:36:11.0758] <ramsey>
I wasn't aware of the Unicode Slack. I had gone looking for some chat channel for them on IRC or Matrix. Do you have a link?

[11:49:15.0541] <littledan>
ramsey: If you DM me your email address, I'll make sure you get an invite

[14:11:38.0269] <sffc>
See some previous discussion on this topic here: https://github.com/tc39/proposal-intl-locale-info/issues/59

[14:11:50.0039] <sffc>
"textInfo.direction is a very simplified model of reality"

[14:31:34.0350] <ramsey>
sffc: Thanks!


2023-08-17
[02:36:13.0712] <hsivonen>
Does there exist stated design rationale for why `Intl.Collator` (which, unlike many other APIs, doesn't format anything) falls back to the host locale instead of falling back to `und`? Considering that the root collation is more likely to be valid for a language that isn't explicitly listed in CLDR than a non-root host-language collation, the specified behavior seems unfortunate. Moreover, it's bad that the distinction isn't visible in the typical CI locale of en-US.

[05:36:44.0103] <littledan>
Everything in Intl falls back to the host locale… I think that’s the extent of the rationale.

[05:37:56.0327] <littledan>
If we wanted to work on Intl.Collator, we should probably address the thing where the design forces a bunch of recalculation of the collation key to do any sorting…

[07:39:40.0816] <sffc>
> Moreover, it's bad that the distinction isn't visible in the typical CI locale of en-US.
Can you check the resolved options to get the locale?


2023-08-21
[02:27:56.0530] <hsivonen>
> <@sffc:mozilla.org> > Moreover, it's bad that the distinction isn't visible in the typical CI locale of en-US.
> Can you check the resolved options to get the locale?

Possibly, yeah, if one goes looking for it, instead of just testing sort behavior.

[02:28:03.0991] <hsivonen>
> <@littledan:matrix.org> Everything in Intl falls back to the host locale… I think that’s the extent of the rationale.

Thanks.

[02:30:17.0007] <hsivonen>
> <@littledan:matrix.org> If we wanted to work on Intl.Collator, we should probably address the thing where the design forces a bunch of recalculation of the collation key to do any sorting…

Unlikely. According to ICU4C docs, the number of comparisons that you need to do to amortize the collation key generation is high, and collation keys are rarely appropriate. (FWIW, it appears that even SQLite's ICU4C mode sorts without stored collation keys even though the use case for stored collation keys is "databases")

[08:30:53.0220] <sffc>
Let's please not use locale sensitive sorting in a database. My team just spent a quarter making a special version of ICU to help a database team not corrupt their data when upgrading our library.

