2024-07-01
[06:11:12.0632] <Andreu Botella>
I was thinking that the unhandled rejection context here is `"foo"`, not `"baz"`:
```js
asyncVar.run("foo", main);

async function main() {
	await asyncVar.run("bar", async () => {
		await asyncVar.run("baz", async () => {
			throw new Error();
		});
	});
}
```

[06:11:25.0492] <Andreu Botella>
so shouldn't it be the same for sync errors?

[06:11:30.0581] <Andreu Botella>
 * so shouldn't it be the same for sync unhandled errors?

[06:29:00.0985] <littledan>
I don't understand what you're getting at; the async/await case is different since it corresponds to a bunch of nested try/catch/rethrow patterns.

[06:30:51.0055] <Andreu Botella>
will that be obvious to developers?

[06:31:28.0305] <littledan>
no, developers will expect that the inner place where the error inside the async/await is the source. But making it "also broken" for sync exceptions won't fix that expectation.

[13:29:35.0348] <Steve Hicks>
Are we talking about the callback's context or the one that's hung on the `unhandledrejection`/`error` event?  If the former, I'm arguing it should always be registration context.  Would it be possible for `event.errorSnapshot` to be `"baz"` even for the `unhandledrejection` case?

[13:32:37.0245] <Steve Hicks>
I've come around to the view that one of the advantages of heterogeneous access to causal contexts (which I was arguing against a few weeks ago) is that you can target more clearly exactly which context you get.

[13:32:38.0071] <littledan>
I think we're talking about the supplemental context that exists as a property

[13:32:57.0470] <littledan>
even for that there's a lot of decisions to make!

[13:33:07.0685] <Steve Hicks>
yes there are

[13:33:30.0695] <littledan>
we *could* expose a whole bunch of them, but IMO one of them will probably be good enough to start, and people won't really be so great at choosing between a bunch of them anyway

[13:33:50.0641] <Steve Hicks>
so i guess i'm asking, is there a reasonable way to spec it so that the unhandled rejection is _also_ baz?

[13:34:05.0267] <Steve Hicks>
right, I don't think we should expose a ton

[13:34:47.0900] <littledan>
> <@stephenhicks:matrix.org> so i guess i'm asking, is there a reasonable way to spec it so that the unhandled rejection is _also_ baz?

I have a huge amount of trouble understanding how that'd work. BUT we could make it so that error objects have a causal context when they're allocated or thrown for the first time, and maybe that'd solve most of the problem.

[13:35:00.0275] <Stephen Belanger>
IMO error construction should capture a context snapshot and you can read out of that later by accessing some property on that error.

[13:35:10.0582] <littledan>
jinx

[13:35:25.0876] <Stephen Belanger>
Yeah.

[13:35:28.0026] <littledan>
(I prefer allocated better than first thrown too)

[13:35:43.0444] <Steve Hicks>
i think that's a good balance

[13:36:16.0217] <Stephen Belanger>
First thrown is a bit mysterious but possibly more correct. You need extra logic to detect if it already HAS a context on a rethrow though.

[13:36:52.0379] <littledan>
first thrown is sad-feeling because it means mutating an object. what if the same thing is thrown twice? anyway that is not very pragmatic knowledge, it's my theorist side talking

[13:37:00.0970] <littledan>
 * first thrown is sad-feeling because it means mutating an object. what if the same thing is thrown twice? anyway that is not very pragmatic motivation, it's my theorist side talking

[13:37:49.0990] <Stephen Belanger>
Yeah. Almost makes more sense to not be attached to the Error object, but then where would you put it?

[13:37:50.0577] <littledan>
but we might still need a causative context for unhandled rejections in case they aren't error objects

[13:38:04.0627] <Stephen Belanger>
True.

[13:38:09.0280] <littledan>
> <@stephenbelanger:matrix.org> Yeah. Almost makes more sense to not be attached to the Error object, but then where would you put it?

it could be on the event (but still, requires extra machinery in implementations)

[13:38:49.0832] <Stephen Belanger>
For unhandledRejection we probably _would_ need the point it throws and not an Error property given you _can_ throw non-errors and unfortunately sometimes people do. üòê

[13:39:03.0264] <Steve Hicks>
unhandledrejection isn't dispatched synchronously, so it's a little more awkward

[13:39:29.0808] <Steve Hicks>
ideally it could reuse the same mechanism for synchronous events (i.e. dispatchEvent captures the snapshot)

[13:40:22.0246] <littledan>
as we've previously reasoned, we could either store the context when the Promise is allocated (as in Node) or rejected (as in the current spec). I guess in either case, it could be in the Promise itself, and then it's only read by the unhandled rejection thing.

[13:41:16.0861] <Stephen Belanger>
Capturing on dispatchEvent also means we could have _anything_ be able to access both register time _and_ call time contexts. ü§î

[13:41:20.0821] <littledan>
I previously convinced myself that the rejected-time context is definitely way better, but now, with distance, I could see that either could be OK...

[13:41:38.0037] <littledan>
> <@stephenbelanger:matrix.org> Capturing on dispatchEvent also means we could have _anything_ be able to access both register time _and_ call time contexts. ü§î

lots of stuff isn't dispatchEvent...

[13:41:44.0945] <littledan>
unless you mean the internal equivalent

[13:41:55.0627] <Stephen Belanger>
Yes, internal equivalent.

[13:42:00.0217] <Steve Hicks>
reject-time means you're not making as many unused snapshots

[13:42:33.0598] <littledan>
> <@stephenbelanger:matrix.org> Yes, internal equivalent.

yeah so conversations with DOM people like Anne seemed to point to, we'd only get this little by little, for particular things where it made sense, since it's complicated and depends on that particular API's details

[13:42:46.0476] <littledan>
> <@stephenhicks:matrix.org> reject-time means you're not making as many unused snapshots

but "making a snapshot" is copying a pointer

[13:43:02.0838] <littledan>
we're *not* doing an allocation, in particular

[13:43:08.0714] <Steve Hicks>
is there a concern about lifetime management?

[13:43:31.0951] <littledan>
> <@stephenhicks:matrix.org> is there a concern about lifetime management?

well, IMO we should give a fresh object identity for the snapshot each time you use it, so we don't have to worry about that

[13:43:47.0404] <littledan>
via the getter

[13:43:47.0976] <Stephen Belanger>
> <@littledan:matrix.org> yeah so conversations with DOM people like Anne seemed to point to, we'd only get this little by little, for particular things where it made sense, since it's complicated and depends on that particular API's details

I mean‚Ä¶that‚Äôs possibly fine? We just need to make a bunch of individual cases for each API, which it seemed like Andreu was already doing the research work for?

[13:43:57.0816] <littledan>
or maybe that's too weird and un-getter-like?

[13:44:37.0878] <littledan>
the alternative is, you eagerly stash a pointer to the underlying data structure, but somehow you can dynamically type check that, and on first access, you replace it with a snapshot in place, and subsequent accesses notice that it's already a snapshot

[13:45:01.0687] <Steve Hicks>
> <@littledan:matrix.org> well, IMO we should give a fresh object identity for the snapshot each time you use it, so we don't have to worry about that

Not sure we're talking about the same thing?  IIUC there was concern about when a snapshot was no longer reachable (hence all the explicit resource management discussions) and if we've got a never-will-be-used snapshot hanging on a long-lived promise, that could confuse it

[13:45:50.0463] <littledan>
> <@stephenbelanger:matrix.org> I mean‚Ä¶that‚Äôs possibly fine? We just need to make a bunch of individual cases for each API, which it seemed like Andreu was already doing the research work for?

yes, though there's still the question of, "are we doing this now or 'later'". IMO we should identify the cases where we believe it's needed *now* (e.g., some of this error stuff) and document why it's needed, and expect that the initially shipped version doesn't include so many of these

[13:46:24.0810] <littledan>
> <@stephenhicks:matrix.org> Not sure we're talking about the same thing?  IIUC there was concern about when a snapshot was no longer reachable (hence all the explicit resource management discussions) and if we've got a never-will-be-used snapshot hanging on a long-lived promise, that could confuse it

oh oops I was talking about a superficial object identity issue, totally separate. For lifetime.... yeah just leak?

[13:46:34.0680] <littledan>
I don't see a solution to this lifetime question

[13:46:55.0726] <Stephen Belanger>
Selfishly, APM‚Äôs probably won‚Äôt care as we‚Äôre focused on servers where most of those APIs don‚Äôt exist anyway. üòÖ

[13:47:33.0257] <littledan>
well, some people care about client-side performance monitoring, but I take it that's not your team

[13:47:57.0653] <littledan>
I guess the lifetime thing might be especially bad for something like Error objects, where it might be really non-obvious what you're keeping around

[13:48:02.0726] <Steve Hicks>
you could have HostPromiseRejectionHandler add/remove it?

[13:48:05.0848] <littledan>
and you can imagine keeping errors around

[13:48:16.0820] <littledan>
> <@stephenhicks:matrix.org> you could have HostPromiseRejectionHandler add/remove it?

it would modify the error?

[13:48:37.0602] <Steve Hicks>
> <@littledan:matrix.org> well, some people care about client-side performance monitoring, but I take it that's not your team

this is our use case

[13:49:20.0500] <Steve Hicks>
> <@littledan:matrix.org> it would modify the error?

no, the promise

[13:50:13.0722] <littledan>
> <@stephenhicks:matrix.org> no, the promise

oh, right... yeah that makes sense, the unhandled rejection can only happen once. (In fact, maybe the spec doesn't even say any of this.) But this doesn't handle the error issue.

[13:50:19.0719] <Justin Ridgewell>
> <@stephenbelanger:matrix.org> For unhandledRejection we probably _would_ need the point it throws and not an Error property given you _can_ throw non-errors and unfortunately sometimes people do. üòê

I‚Äôd honestly be happy saying that‚Äôs an anti-pattern and you don‚Äôt get the correct context in this case.

[13:50:27.0921] <littledan>
> <@stephenhicks:matrix.org> no, the promise

 * oh, right... yeah that makes sense, the unhandled rejection can only happen once. (In fact, maybe the spec doesn't even say any of this, since it's implied by unreachability.) But this doesn't handle the error issue.

[13:50:56.0132] <Justin Ridgewell>
> <@littledan:matrix.org> as we've previously reasoned, we could either store the context when the Promise is allocated (as in Node) or rejected (as in the current spec). I guess in either case, it could be in the Promise itself, and then it's only read by the unhandled rejection thing.

I don‚Äôt think this helps in Andreu‚Äôs code sample, unless we‚Äôre expecting the `‚Äùfoo‚Äù` context

[13:50:57.0957] <littledan>
> <@jridgewell:matrix.org> I‚Äôd honestly be happy saying that‚Äôs an anti-pattern and you don‚Äôt get the correct context in this case.

actually we care a lot about this case at Bloomberg, but maybe for reasons which don't deserve to be prioritized

[13:51:23.0217] <littledan>
> <@jridgewell:matrix.org> I don‚Äôt think this helps in Andreu‚Äôs code sample, unless we‚Äôre expecting the `‚Äùfoo‚Äù` context

that's right, I'm discussing strategies for getting "foo"

[13:51:32.0696] <Steve Hicks>
Google also cares about throwing non-errors, but we believe the solution is "Don't do that" rather than bloating the standards to account for it

[13:52:06.0461] <littledan>
well, maybe we can look into the "don't do that" path... maybe Chengzhong can follow up on this?

[13:52:10.0625] <littledan>
Chengzhong Wu: ^

[13:53:55.0953] <Steve Hicks>
> <@littledan:matrix.org> well, maybe we can look into the "don't do that" path... maybe Chengzhong can follow up on this?

(aside) in particular, one strategy we're consider is to transpile all `throw x`s to `throw trackNonError(x)` that throws a real error with a stack trace asynchronously so as to at least get some logging in place to identify all the offenders

[13:54:25.0584] <Justin Ridgewell>
Are you suggesting we attach the context onto the error instead of just running the `unhandledRejectionHandler` in the correct context?

[13:54:52.0443] <Steve Hicks>
> <@jridgewell:matrix.org> Are you suggesting we attach the context onto the error instead of just running the `unhandledRejectionHandler` in the correct context?

Yes?

[13:55:28.0157] <Steve Hicks>
at that point, maybe there's not as much of a reason to even attach a context to `unhandledrejection`?

[13:55:28.0402] <littledan>
> <@jridgewell:matrix.org> Are you suggesting we attach the context onto the error instead of just running the `unhandledRejectionHandler` in the correct context?

well, we're somewhat deep into this thread of "run everything in registration context, and the 'correct' context is off to the side somewhere", and so we're trying to reason about whether the error's context is enough, or if we also need the rejection's context

[13:55:41.0581] <littledan>
if we get the rejection's context, it could be exposed in the event

[13:57:00.0576] <Steve Hicks>
I'm still hopeful that maybe we can get a more general resolution context for promises, but my understanding is that littledan has reason to think that's not feasible

[13:58:34.0663] <littledan>
I think a general resolution context for all promises would be seen as an information leak, but again that's not a very pragmatic reason for anything. Definitely it's easier to *just* capture the context where resolve()/reject() was done, rather than have that somehow be propagated across .then() as we've previously discussed.

