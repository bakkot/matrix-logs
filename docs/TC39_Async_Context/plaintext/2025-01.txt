2025-01-16
[02:58:59.0404] <Andreu Botella>
I made some additional changes to the web integration document to clarify certain things

[02:59:02.0176] <Andreu Botella>
https://github.com/tc39/proposal-async-context/pull/109


2025-01-17
[22:53:42.0133] <Iliasbhal>
üëã Hello team!

I wrote another polyfill for this feature. 
It works a bit differently that the current one, it works only by intrumenting the Promise object. 

check it out: https://github.com/iliasbhal/simple-async-context.
It satifies the test suite in the repo + some extra tests that I added.

Let me know what you think ;) 

[23:15:26.0075] <Iliasbhal>
Turns out, they work kind of similary. Few differences here and there:

  - On the strategy used to store data in the context. 
    `simple-async-context` let the garbage collectore reclaim memeory, it won't programmaticaly delete stored data.

  - `simple-async-context` will polyfill timers as well.
  - The way it instruments Promise is slightly different.

[23:16:31.0499] <Iliasbhal>
* Turns out, they work kind of similary. Few differences here and there:

- On the strategy used to store data in the context.
`simple-async-context` let the garbage collectore reclaim memory (hopefully üòÜ), it won't programmaticaly delete stored data.
- `simple-async-context` will polyfill timers as well.
- The way it instruments Promise is slightly different.

[23:40:49.0990] <Iliasbhal>
Note: We don't programaticaly delete Variable data because otherwise we won't be able access the context from a running timer.


2025-01-18
[09:13:54.0441] <Phil>
Does this work in Bun, Deno, Node and the Web?

[14:57:36.0791] <Phil>
I wrote a package that now depends on your package: https://code.foss.global/push.rocks/smartcontext, but it does not seem to work in Chrome? Node works though.

[14:57:48.0477] <Phil>
I'm getting ReferenceError: setImmediate is not defined

[15:03:12.0398] <Phil>
https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate

[15:03:34.0500] <Phil>
Seems like it can be replaced with setTimeout?

[15:03:48.0453] <Phil>
Or are there any caveats for the way AsyncContext works?

[15:04:17.0177] <Phil>
* Or are there any caveats for the way simple-async-context works?

[15:27:27.0236] <Phil>
updated it a bit to better reflect the idea of async context.


2025-01-20
[23:06:40.0022] <Iliasbhal>
it was just bad code, I don‚Äôt know where my head was I pushed this ü´†. It‚Äôs now patched üôè

[23:10:19.0462] <Iliasbhal>
Just don‚Äôt forget to transpile the code through babel or anything that will replace async/await with Promises instantiated using the global Promise constructor. 

Otherwise tracking async contexts won‚Äôt work, only sync context and the timers will work otherwise.

[07:09:23.0038] <Andreu Botella>
I see your polyfill patches timers, but not any other web APIs. Is the plan to do that?

[07:10:30.0086] <Andreu Botella>
See https://github.com/tc39/proposal-async-context/blob/master/WEB-INTEGRATION.md and https://github.com/tc39/proposal-async-context/issues/107 for the current web integration proposal


2025-01-22
[01:48:57.0366] <Iliasbhal>
Andreu Botella: I just published a new version that polyfills EventTargets üëçÔ∏è

[02:08:34.0537] <Iliasbhal>
Sidenote: Would you guys accept a PR for the polyfill?

[02:09:09.0349] <Andreu Botella>
Justin Ridgewell: 

[02:11:07.0979] <Iliasbhal>
* Andreu Botella: I just published a new version that polyfills EventTargets üëçÔ∏è Feel free to create issues on the repo if you need more API polyfilled.

[02:12:45.0136] <nicolo-ribaudo>
Probably not, as most proposals don't have polyfills and the few that do have a disclaimer "do not actually use this polyfill, it's just meant to be an example". However, you can open an issue linking to it so that other people can find it

[02:13:43.0287] <Andreu Botella>
our repo has an existing polyfill, made by Justin, only for the TC39/JS part of it

[02:15:05.0736] <nicolo-ribaudo>
Oh I didn't notice üòÖ

