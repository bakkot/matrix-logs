2023-03-08
[10:20:35.0419] <Justin Ridgewell>
We have spec text! https://tc39.es/proposal-async-context/

[10:21:55.0814] <Justin Ridgewell>
I think the only surprising change is the addition of `[[Construct]]` on wrapped callbacks:
```
const Foo = AsyncContext.wrap(class Foo {});

// The wrapper will invoke construct on the wrapped function
new Foo();
```


[10:22:15.0862] <Justin Ridgewell>
This comes from the behavior of `Function.p.bind`

[12:25:31.0724] <littledan>
yeah I am OK with including or omitting the [[Construct]] behavior

[12:42:18.0394] <littledan>
the spec would probably be clearer if we could use whatwg infra algorithms

[12:42:28.0516] <littledan>
(for the mapping)

[12:43:39.0074] <littledan>
we should probably think about exposing reusable algorithms (for web specs) for get and run, but this is an editorial thing

[12:44:08.0692] <littledan>
it might be nicer editorially if we avoided SameValueZero; SameValue or simply = is enough. (But the nicest would be to say that it's a mapping...)

[12:44:31.0584] <littledan>
anyway I don't see any bugs in the spec; looks good for Stage 2 to me

[12:48:11.0181] <Andreu Botella>
IIRC the `setTimeout` infrastructure in HTML jumps off-thread to sleep, and then queues a task on the event loop

[12:48:31.0000] <Andreu Botella>
a wrapped `setTimeout` would have to "send" a snapshot off-thread

[12:48:36.0678] <Andreu Botella>
is that fine, as long as the values are not read?

[12:49:05.0180] <littledan>
I'm not sure if it should be phrased like that

[12:49:23.0828] <littledan>
I hope that you can work with ms2ger and Yoav on a proposed wording here

[12:50:01.0165] <littledan>
I think queued tasks would often carry asynccontext snapshots with them, but that snapshot shouldn't ever logically leave the main thread

[12:50:35.0272] <Andreu Botella>
 * a `setTimeout` that wraps the callback would have to "send" a snapshot off-thread

[12:51:04.0549] <littledan>
in any case, you'll want to have clean abstract algorithms for creating an AsyncContext, and get and run, so that the embedding spec doesn't need to call the actual JS functions

