2024-05-01
[17:33:10.0504] <shaylew>
I think `Variable.wrap` ends up being a very different thing from delimited snapshots -- delimited snapshots operate on sections of the stack that contain (possibly) multiple variables, without the caller needing to know which variables are involved, whereas `Variable.wrap` is a convenience method for something you can already do without any kind of snapshots (global or delimited) as long as you know the variable(s) you want to operate on

[17:49:41.0850] <Justin Ridgewell>
Can you write example code of how delimited stacks would work?

[18:02:14.0630] <shaylew>
So, the system from the paper has "stack marks" as a different thing from "variables" because it already has the marks as part of delimited control... but in JS, without delimited continuations, I think you can just use a variable as a stack mark and get away with it. So it ends up looking something like...
```
Snapshot.partial<T>(v: Variable<T>): Snapshot
```
with the only difference being that when you capture a partial snapshot it captures all variables inside the most recent `v.run` (including `v`), and when you `run` a partial snapshot it instates that sequence of bindings on top of whatever variables are already in scope (perhaps shadowing some if they're in the current scope and also in the partial snapshot, but not clobbering anything that wasn't mentioned in the snapshot).

[18:06:16.0091] <shaylew>
You're probably going to ask "why would someone want this?" and one answer is: I went rifling through the literature for this because of Signals, which really seem like they want to capture and restore the _signal-related_ suffix of the context when running a memoized Computed... but where it doesn't seem to be helpful (and might cause problems) for this to capture or clobber the parts of the async context that were set up completely outside of any Computed

[18:15:46.0387] <shaylew>
There are a bunch of framework features in reactivity systems that all boil down to "save this when you create a Computed and restore it when you start rerunning it later on", and -- because Computeds are memoized -- it seems like it's basically always a bug for some sort of dynamic context (be it AsyncContext or manually managed with try/finally) to pass into a computed that's rerunning. When multiple callers all call `computed.get()` in some order, we want to be sure that the answer we saved into the computed didn't depend on which caller was first. If you have multiple frameworks doing their own extensions, they can save/restore their _own_ dynamic context using try/finally... but you run into problems if two frameworks have different extensions and don't know how to properly mask off each others'. Delimited snapshots nail this use case so well that I thought I'd try to float them and see if they seemed to help with any of the other ongoing AsyncContext mysteries

[18:32:21.0490] <shaylew>
(the signals framework features in question are stuff like... "ownership tree to implement hierarchical cleanup", "scoped error handlers to implement ErrorBoundary", "suspense context", "Context/Provider pattern for implicit parameters")

[15:59:10.0795] <Justin Ridgewell>
@stephenbelanger:matrix.org Please message me with your email so that I can add you to the meetings!

[15:59:43.0644] <Justin Ridgewell>
You were always meant to be invited, and I thought you were ðŸ˜„


2024-05-02
[07:33:31.0454] <Yagiz Nizipli>
Hey Justin Ridgewell, can you invite me to the meeting as well? Sentry just recently joined TC39, and it will be finalized by the June meeting (I believe so) 

[09:51:07.0374] <Justin Ridgewell>
Sure, just gotta send me your email

[10:36:59.0582] <Justin Ridgewell>
@shaylew:matrix.org What's your GitHub handle?

[11:07:44.0459] <shaylew>
> <@jridgewell:matrix.org> @shaylew:matrix.org What's your GitHub handle?

also shaylew there

[13:22:32.0521] <littledan>
> <@yagiznizipli:matrix.org> Hey Justin Ridgewell, can you invite me to the meeting as well? Sentry just recently joined TC39, and it will be finalized by the June meeting (I believe so)

As a provisional member, Sentry can participate like all other members in Ecma groups (just not the theoretical case of voting, which never comes up). If you've received a communication from Ecma which led you to believe otherwise, please let me know so that we can make the right edits to reduce this confusion.

[13:23:46.0567] <Andreu Botella>
Also, regardless of that, I think we don't limit the AsyncContext meeting to delegates only â€“ it's just that the invite is not public (not sure why though).

[13:24:33.0632] <Andreu Botella>
there was talk of having a public calendar, but I don't know what happened with that

[13:24:39.0760] <Andreu Botella>
 * there was talk of having a public TC39 calendar, but I don't know what happened with that

[13:31:39.0708] <littledan>
> <@abotella:igalia.com> there was talk of having a public TC39 calendar, but I don't know what happened with that

To make a meeting public, we just have to ask for it to be made public on the Reflector

[13:31:45.0625] <littledan>
do we all agree on that change?

[13:32:48.0840] <Justin Ridgewell>
Honestly Iâ€™d prefer a permissive invite-only structure

[13:32:58.0242] <Justin Ridgewell>
Everyoneâ€™s welcome, they just need to ask

[13:33:26.0502] <littledan>
we could put the existence and time of the meeting on the public calendar, and direct people to join this channel and ask for call-in instructions

[13:33:43.0683] <littledan>
Bryan English told me he spent 10 minutes trying to search for any evidence of the existence of this meeting and couldn't find ny

[13:33:47.0635] <littledan>
 * Bryan English told me he spent 10 minutes trying to search for any evidence of the existence of this meeting and couldn't find any

[13:34:48.0550] <Chengzhong Wu>
Can they access reflector?

[13:35:17.0419] <littledan>
no, since they're not Ecma members

[13:35:26.0443] <littledan>
but even for Ecma members, the Reflector often isn't discoverable enough

[13:36:48.0575] <Justin Ridgewell>
> <@littledan:matrix.org> we could put the existence and time of the meeting on the public calendar, and direct people to join this channel and ask for call-in instructions

Letâ€™s do that

[13:39:06.0114] <Justin Ridgewell>
Or we could add it to the proposal README

[13:40:58.0587] <littledan>
> <@jridgewell:matrix.org> Or we could add it to the proposal README

why not both .gif

[13:41:12.0702] <Justin Ridgewell>
Both

[13:41:30.0260] <Chengzhong Wu>
A link to this matrix room in the readme (afaik this room is public) could be good. The agenda and notes are in the room description as well


2024-05-06
[04:54:07.0602] <Stephen Belanger>
Apologies for the delay in sharing these docs. I needed to prune some company-specific bits and navigate our convoluted process for making Google Docs actually public. ðŸ˜…

The first doc is a bunch of explanation on the problems we have with existing attempts at context management and some possible solutions we're iterating on to solve these problems in a more flexible way. https://docs.google.com/document/d/1v8tMzV51Cuz32-60dhopoIMIxWfy_epOIRwoL5LmKVc/edit?usp=sharing

The second doc is partly relevant in that it describes an integration between the Diagnostics Channel concept and context management for the purpose of providing control to users to decide in which ways they want to propagate context for their specific store around particular points defined by library code as possibly interesting. https://docs.google.com/document/d/1DTZ2C5BKsoVRnU_ihyi93blF3cxXIbqqcIaSYurhBRk/edit?usp=sharing

I additionally have some slides from a recent internal talk I can also share which covers this overlap more briefly, and with specific examples. https://docs.google.com/presentation/d/1jYO45MudKGPOtir5hK0_wB7XS0D_ksLe4j5NvC8YfTc/edit?usp=sharing

[04:59:57.0810] <Stephen Belanger>
Keep in mind these are written from the perspective of defining a generalized context management system which could exist in _many_ languages, so it doesn't get too deep into JS specifics. It also has some spots I still would like to improve, but what is shared is a snapshot-in-time copy of what the _current_ state is, so I will have to replicate future changes into these docs as it is deemed relevant. The main one is that I'm trying to think of a better expression of the context management part of the Window Channel concept in Diagnostics Channel to put more of the logic and explanation of its use into the context management space. I'm not yet sure if that involves having some additional ContextWindow construct or something like that...still thinking on that one. ðŸ¤”

[05:00:15.0586] <Stephen Belanger>
 * Keep in mind these are written from the perspective of defining a generalized context management system which could exist in _many_ languages, so it doesn't get too deep into JS specifics. It also has some spots I still would like to improve, but what is shared is a snapshot-in-time copy of what the _current_ state is, so I will have to replicate future changes into these docs as it is deemed relevant.

The main one is that I'm trying to think of a better expression of the context management part of the Window Channel concept in Diagnostics Channel to put more of the logic and explanation of its use into the context management space. I'm not yet sure if that involves having some additional ContextWindow construct or something like that...still thinking on that one. ðŸ¤”

[05:00:37.0933] <Stephen Belanger>
 * Keep in mind these are written from the perspective of defining a generalized context management system which could exist in _many_ languages, so it doesn't get too deep into JS specifics. It also has some spots I still would like to improve, but what is shared is a snapshot-in-time copy of what the _current_ state is, so I will have to replicate future changes into these docs as it is deemed relevant.

The main change I'm considering is thinking of a better expression of the context management part of the Window Channel concept in Diagnostics Channel to put more of the logic and explanation of its use into the context management space. I'm not yet sure if that involves having some additional ContextWindow construct or something like that...still thinking on that one. ðŸ¤”

[05:04:45.0389] <Andreu Botella>
Hey, thanks for taking the time and trouble to make these docs public! I'll try to take a look, at least at the context management one, sometime this week

[05:50:26.0136] <Yagiz Nizipli>
> <@littledan:matrix.org> As a provisional member, Sentry can participate like all other members in Ecma groups (just not the theoretical case of voting, which never comes up). If you've received a communication from Ecma which led you to believe otherwise, please let me know so that we can make the right edits to reduce this confusion.

Afaik, we didn't receive anything from Ecma. 

[05:53:11.0155] <littledan>
> <@yagiznizipli:matrix.org> Afaik, we didn't receive anything from Ecma.

OK, good, so welcome!

[05:59:14.0480] <littledan>
Welcome Steven E !

[05:59:21.0668] <littledan>
we are now up to 3 Stevens

[06:00:07.0160] <Steven E>
Any of them ph's? 

[06:00:23.0075] <Stephen Belanger>
/me raises hand

[06:00:27.0042] <Steven E>
Us v's are a good group

[06:01:02.0205] <Stephen Belanger>
Welcome! ðŸ˜„

[06:04:00.0962] <Steven Eubank (sentry.io)>
I can be less anonymous now! Happy to join

[10:59:19.0633] <Chris de Almeida>
Hi All.  Chengzhong reached out to me to add the AsyncContext meeting to the public calendar.

[10:59:22.0896] <Chris de Almeida>
https://github.com/tc39/Reflector/issues/491

[11:00:51.0243] <Chris de Almeida>
this is the issue to address that (though the invite list there is likely out-of-date. something to keep in mind, is that it is not a distinct meeting from the private calendar -- it is the same meeting shared across calendars (and this is an important feature)

the meeting is always invite-based by nature -- the question is whether the invite list can be public, with the specific concern being to not release individuals' email addresses publicly without their consent

as long as the meeting notes link can be public, then there is nothing in the meeting description that needs to change, as there is no information that _can't_ be public there

I suggest that that the invite list is made private initially, so that the meeting can be added to the public calendar immediately.  the question of the invite list being public has been the blocking issue for other meetings, and they continue to not get added to the public calendar because it goes unresolved. the invite list can be made public later, once everyone has approved (or removed) their email address for/from the invite

if there are no objections, I am going to proceed with this

[11:03:10.0970] <Andreu Botella>
I think the meeting in the private calendar has the Zoom link, and Justin Ridgewell mentioned he'd rather have the calendar entry be public but not the link, and to invite people as needed

[11:03:23.0738] <Andreu Botella>
I don't have an opinion on that though

[11:11:05.0788] <Chris de Almeida>
> <@abotella:igalia.com> I think the meeting in the private calendar has the Zoom link, and Justin Ridgewell mentioned he'd rather have the calendar entry be public but not the link, and to invite people as needed

hmm, this seems to defeat the purpose of having it on the public calendar

[11:34:10.0408] <Andreu Botella>
I'm looking at the web integration of the `error` event on `window` (which is fired from JS execution errors), and I just noticed that we might need some extra work to make FinalizationRegistry work with that

[11:34:51.0948] <Andreu Botella>
the way the FR cleanup job is spec'd, if any callback throws, it's up to the host to deal with that

[11:35:28.0954] <Andreu Botella>
but after `CleanupFinalizationRegistry` returns, the host doesn't have access to the context

[11:35:34.0336] <Andreu Botella>
 * but after `CleanupFinalizationRegistry` returns, the host doesn't have access to the FR context

[11:37:43.0664] <Andreu Botella>
and we probably want to make `error` work the same as `unhandledrejection`

[11:37:58.0170] <Andreu Botella>
 * and we probably want to make `error` work the same as `unhandledrejection`, so it'd have to store that context

[15:10:37.0470] <littledan>
Chris de Almeida: the idea is that the meeting is public and open to join, and the process to get the link is to come in and ask us. No need to make the attendee list publicâ€”this can be a separate calendar invite which lacks the zoom link, the notes link and attendees, and only says the time and gives instructions to join this channel and ask for more information 

[15:18:21.0615] <Chris de Almeida>
> <@littledan:matrix.org> Chris de Almeida: the idea is that the meeting is public and open to join, and the process to get the link is to come in and ask us. No need to make the attendee list publicâ€”this can be a separate calendar invite which lacks the zoom link, the notes link and attendees, and only says the time and gives instructions to join this channel and ask for more information

it would be ideal if it were not two separate meetings, but that's alright. please provide the text for the new/public meeting description

[15:19:24.0705] <Justin Ridgewell>
The notes are also publicly editable, which means they shouldnâ€™t be shared to everyone

[15:19:53.0799] <Justin Ridgewell>
(The notes are tied to my deactived Vercel account, so I canâ€™t change the permissions)

[15:23:42.0258] <Andreu Botella>
Can we create a new notes document and copy the contents?

[15:24:52.0324] <Andreu Botella>
 * Can we create a new notes document and copy the contents there?

[15:25:20.0171] <Justin Ridgewell>
Someone else could, but I canâ€™t as a Googler (our docs cannot be made publicly visible)

[15:41:51.0045] <Chengzhong Wu>
Created a new one: https://docs.google.com/document/d/1pi-NMbqVhg2UuxQAZ4jOGDeHLlZGD_DJ7fyxHt_C2hs/edit

[15:42:40.0173] <Chengzhong Wu>
Access granted to people that I have ail address in mind, please donâ€™t be hesitant to ask for editor access by message me your address 

[15:42:53.0261] <Chengzhong Wu>
* Access granted to people that I have email address in mind, please donâ€™t be hesitant to ask for editor access by message me your address

[15:45:13.0770] <Chengzhong Wu>
* Access granted to people that I have email address in mind, please donâ€™t be hesitant to ask for editor access by message me your address (still publicly viewable)


2024-05-07
[20:52:15.0250] <Justin Ridgewell>
Updated the calendar inviteâ€™s doc to that one

[20:53:27.0125] <Justin Ridgewell>
@softwarechris:matrix.org Can you give me moderator access to the inviteâ€™s meet? That way we can publicize the link and still have it be invite-only (people can just ask to join during the meeting if theyâ€™re not on the invite yet)

[21:31:11.0805] <Chris de Almeida>
you already have calendar permission and are the organizer of the meeting.  the web/video call settings are currently set to open access.  keep in mind if you change it from `Open` to `Trusted`, even if people are on the invite, they can only join automatically if their email on the invite is associated with a google account.  otherwise, they still need to be let in.  and the only person that can let anyone in is you

[21:32:12.0605] <Chris de Almeida>
I recall that being a problem, and the reason why the web meeting settings were changed to `Open`

[21:32:45.0607] <Justin Ridgewell>
Can only one person have that power?

[21:36:50.0114] <Chris de Almeida>
> <@jridgewell:matrix.org> Can only one person have that power?

unfortunately, yes. the meeting organizer.  you could use an alternate service that allows you to use cohosts or utilize a host key (which potentially anyone could use if they have the key).  but I don't know of any workaround for google

[21:36:53.0745] <Chris de Almeida>
> <@jridgewell:matrix.org> Can only one person have that power?

 * unfortunately, yes. the meeting organizer.  you could use an alternate service that allows you to use cohosts or utilize a host key (which potentially anyone could use if they have the key).  but I don't know of any workaround for google meet

[21:37:05.0408] <Chris de Almeida>
 * unfortunately, yes. the meeting organizer.  you could use an alternate meeting platform that allows you to use cohosts or utilize a host key (which potentially anyone could use if they have the key).  but I don't know of any workaround for google meet


2024-05-09
[09:27:53.0627] <Andreu Botella>
I'm wondering if we should have an AO that creates an AsyncContext.Variable object?

[09:29:12.0168] <Andreu Botella>
I'm thinking about web specs that might use AsyncContext by creating a spec-internal variable

[09:29:26.0212] <Andreu Botella>
and currently we restrict the keys of a mapping to be Variable instances

[09:31:06.0832] <Andreu Botella>
it's not like those specs can't call the AsyncContext.Variable constructor, but they'd have to deal with abrupt completions and so on

[09:32:17.0951] <Andreu Botella>
though I guess that would be fine if there are only a few specs doing something like that, and it can always be revisited later

[09:38:06.0587] <Chengzhong Wu>
I think it's good to have, as like `AsyncContextSnapshot` and `AsyncContextSwap`

