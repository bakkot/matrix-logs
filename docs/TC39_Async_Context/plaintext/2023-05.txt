2023-05-02
[08:11:51.0733] <Justin Ridgewell>
Reminder, we’re delaying one hour

[08:12:29.0760] <Justin Ridgewell>
I don’t have edit access to the calendar. ljharb ?

[08:17:24.0270] <ljharb>
I’ll fix it shortly

[08:18:13.0981] <ljharb>
k, moved an hour later

[08:18:40.0806] <Justin Ridgewell>
Can you give me and Chengzhong Wu edit access?

[08:18:55.0080] <ljharb>
unfortunately not, i think only Mozilla employees can edit perms

[09:03:09.0907] <Yoav Weiss>
So would that be 7-8pm CET? (rather than 6-7pm)

[09:03:25.0748] <Yoav Weiss>
If so, I can only make the first 30 minutes

[09:04:33.0809] <Chris de Almeida (OoO until 05-14)>
> <@yoavweiss:matrix.org> So would that be 7-8pm CET? (rather than 6-7pm)

yes, 7-8 CEST

[09:39:28.0844] <littledan>
I will be 5-10 minutes late, please don’t wait for me to start

[09:47:34.0417] <Justin Ridgewell>
On the agenda this week is:
- Task Termination: https://docs.google.com/document/d/1yQy8RNeGXLr99bNpy-7tA1Ch7wN0piekp_-JwxC8FtA/edit#
- Generator feedback: https://matrixlogs.bakkot.com/TC39_Delegates/2023-03-23#L173

[10:00:39.0281] <littledan>
Also we can go through the rest of the bugs if we have time

[10:00:45.0557] <littledan>
There are a lot of issues open

[10:01:14.0794] <Justin Ridgewell>
Meeting starting now

[13:55:54.0177] <Justin Ridgewell>
Transcript added to today's notes

[14:37:57.0800] <littledan>
Thanks for a good meeting everyone. I think we made good progress.


2023-05-03
[08:37:18.0291] <Andreu Botella>
How come the readme doesn't show any actual example of using `AsyncContext` with async/await?

[10:03:56.0024] <Justin Ridgewell>
It does: https://github.com/tc39/proposal-async-context#transitive-task-attribution

[10:04:14.0501] <Justin Ridgewell>
There are a bunch of examples, using `setTimeout`, `p.then()`, and `await`


2023-05-04
[23:29:50.0726] <littledan>
I agree that it would be nice to make some basic usages more prominent in the readme 

[23:45:08.0310] <littledan>
Basically if the readme could be more like the first half of the previous presentation pasted together with the presentation from next meeting 

[02:40:00.0970] <Yoav Weiss>
RE https://github.com/tc39/proposal-async-context/issues/52, I'm now thinking if GC times may not be good enough for my immediate use case

[02:40:19.0199] <Yoav Weiss>
and potentially something we can more tightly define once it's actually required

[07:21:14.0619] <littledan>
Garbage collection is not an option here IMO

[07:45:22.0810] <Yoav Weiss>
I agree it's not an option for timestamps

[07:45:31.0100] <Yoav Weiss>
as GC can be arbitrarily late

[07:46:00.0282] <Yoav Weiss>
but it can be an option (I think) for TaskAttribution's container management

[14:09:36.0060] <Justin Ridgewell>
I think we have to deal with GC in a few cases:
1. `AsyncContext.wrap()`
2. `new Promise(() => {})` (permanently pending promise)

[14:10:16.0154] <Justin Ridgewell>
There's an optimistic fast path for promises that resolve (we can decrement the pending counter as soon as that happens), but promises aren't guaranteed to resolve ever.

[14:10:52.0707] <Justin Ridgewell>
So we're stuck waiting for GC the promise

[14:17:05.0715] <Mathieu Hofman>
Which will be fun given how leaky promises are in most engines these days

[15:00:05.0032] <littledan>
Yeah I think we want to count outstanding tasks/micro tasks

[15:47:29.0267] <Mathieu Hofman>
We agree that's an optimization, right?

[15:53:12.0199] <littledan>
I don’t think gc vs exact timing is an optimization; I think it is sort of different semantics 

[15:53:54.0674] <littledan>
There are certain use cases that really only work with exact timing (not just perf metrics but also Angular’s zone.js usage)

[15:54:41.0036] <littledan>
We just shouldn’t build these features in a way which takes advantage of finalizers

