2024-11-11
[09:02:16.0042] <Chengzhong Wu>
> <@legendecas:matrix.org> after the timezone change, the meeting time now is 4pm-5pm UTC. The proposed new time is 5pm-6pm UTC

Reminder: the updated meeting time tomorrow will be 5pm-6pm UTC

[09:02:47.0779] <Chengzhong Wu>
Thank you Chris de Almeida for the help!


2024-11-12
[10:12:47.0129] <Chengzhong Wu>
Given that meeting time conflicts were raised, and the next plenary in 3 weeks, how do people think about switching on/off weeks for meetings (other bi-weekly) starting next week?


2024-11-13
[20:40:48.0869] <Steve Hicks>
In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window `postMessage` (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would `MessageChannel` also be covered here?  (the reason I ask is that I'm working on a userland `aroundEach` for Jasmine - it mostly works, but only if I polyfill context propagation for `MessagePort.prototype.onmessage`)

[03:58:14.0909] <Chengzhong Wu>
agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context?

[03:58:28.0229] <Chengzhong Wu>
 * agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.

[03:58:36.0382] <nicolo-ribaudo>
> <@stephenhicks:matrix.org> In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window `postMessage` (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would `MessageChannel` also be covered here?  (the reason I ask is that I'm working on a userland `aroundEach` for Jasmine - it mostly works, but only if I polyfill context propagation for `MessagePort.prototype.onmessage`)

Given that there is a use case we can surely include it in the list

[03:59:14.0769] <nicolo-ribaudo>
> <@legendecas:matrix.org> agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.

Yeah I think context preservation should work across realms in the same agent: if they can pass (some) objects to each other, they should be able to preserve the context

[04:00:44.0095] <Andreu Botella>
Part of the reason why we focused on same-window `postMessage` is because that is sometimes used as a scheduler

[04:01:30.0264] <Andreu Botella>
but yeah, it makes sense to extend that to other windows in the same agent, or to `MessageChannel`

[08:46:35.0695] <snek>
i've been playing around with async context and disposables, and i realized they don't really work well together because we don't restore the context around suspend points (except in async generators?). curious if anyone else has thought about this at all.

[08:48:14.0573] <Chengzhong Wu>
async context variable disposable needs https://tc39.es/proposal-async-context/#sec-generatorresume to play well with generator/yield

[08:54:31.0964] <snek>
more specifically i was hoping these two examples would behave the same, but the second one doesn't work because you'd have to restore the context "inside" await, before it returns to the caller. https://gist.github.com/devsnek/2eee5001144f7e39513e3694ca6b3e8d

