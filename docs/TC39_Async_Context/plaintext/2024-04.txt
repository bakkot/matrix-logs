2024-04-02
[17:10:49.0615] <Steve Hicks>
I'm a bit wary of overlooking the expressiveness argument.  It's really easy to miss important cases and then those use cases end up high and dry with a non-solution.  As an example, I'm working on a use case right now where registration context would be a huge problem - it's (again) a tracing use case: our data service allows registering interceptors for incoming data and the interceptors are what actually trigger the UI update (possibly via a signal reaction, which is another callback registration that would need to preserve call-time semantics instead of registration semantics for this all to work).  If _either_ the RPC interceptors _or_ the signal reactions use registration context, we're sunk and there's no way to trace an interaction from the initiating event all the way to the UI update, given how loosely-coupled all the reactions in the framework are.

[18:57:49.0223] <Justin Ridgewell>
> <@stephenhicks:matrix.org> I'm a bit wary of overlooking the expressiveness argument.  It's really easy to miss important cases and then those use cases end up high and dry with a non-solution.  As an example, I'm working on a use case right now where registration context would be a huge problem - it's (again) a tracing use case: our data service allows registering interceptors for incoming data and the interceptors are what actually trigger the UI update (possibly via a signal reaction, which is another callback registration that would need to preserve call-time semantics instead of registration semantics for this all to work).  If _either_ the RPC interceptors _or_ the signal reactions use registration context, we're sunk and there's no way to trace an interaction from the initiating event all the way to the UI update, given how loosely-coupled all the reactions in the framework are.

Can you make an example case in code?

[19:17:07.0405] <littledan>
Yeah sorry I donâ€™t mean that I disagree with the expressiveness argument everywhere, just more like I would want to hear about concrete applications like what you are raising, rather than just the abstract form. Thanks for bringing this up.

[00:49:55.0633] <Chengzhong Wu>
What is the context of the call-time of `MessagePort.p.onmessage`? Is it an empty context?

[00:50:28.0614] <Andreu Botella>
yeah

[00:51:25.0053] <Chengzhong Wu>
Hmm, how is it useful if it is an empty context? Or, this is a case of inconsistency in zone.js, I assume

[00:52:31.0925] <Andreu Botella>
I'm not sure why they do this, but I think zone.js does give you a way to make `onmessage` be registration-time, it's just not enabled by default

[00:52:42.0221] <Andreu Botella>
I'm not sure why that is though

