2024-04-02
[17:10:49.0615] <Steve Hicks>
I'm a bit wary of overlooking the expressiveness argument.  It's really easy to miss important cases and then those use cases end up high and dry with a non-solution.  As an example, I'm working on a use case right now where registration context would be a huge problem - it's (again) a tracing use case: our data service allows registering interceptors for incoming data and the interceptors are what actually trigger the UI update (possibly via a signal reaction, which is another callback registration that would need to preserve call-time semantics instead of registration semantics for this all to work).  If _either_ the RPC interceptors _or_ the signal reactions use registration context, we're sunk and there's no way to trace an interaction from the initiating event all the way to the UI update, given how loosely-coupled all the reactions in the framework are.

[18:57:49.0223] <Justin Ridgewell>
> <@stephenhicks:matrix.org> I'm a bit wary of overlooking the expressiveness argument.  It's really easy to miss important cases and then those use cases end up high and dry with a non-solution.  As an example, I'm working on a use case right now where registration context would be a huge problem - it's (again) a tracing use case: our data service allows registering interceptors for incoming data and the interceptors are what actually trigger the UI update (possibly via a signal reaction, which is another callback registration that would need to preserve call-time semantics instead of registration semantics for this all to work).  If _either_ the RPC interceptors _or_ the signal reactions use registration context, we're sunk and there's no way to trace an interaction from the initiating event all the way to the UI update, given how loosely-coupled all the reactions in the framework are.

Can you make an example case in code?

[19:17:07.0405] <littledan>
Yeah sorry I don’t mean that I disagree with the expressiveness argument everywhere, just more like I would want to hear about concrete applications like what you are raising, rather than just the abstract form. Thanks for bringing this up.

[00:49:55.0633] <Chengzhong Wu>
What is the context of the call-time of `MessagePort.p.onmessage`? Is it an empty context?

[00:50:28.0614] <Andreu Botella>
yeah

[00:51:25.0053] <Chengzhong Wu>
Hmm, how is it useful if it is an empty context? Or, this is a case of inconsistency in zone.js, I assume

[00:52:31.0925] <Andreu Botella>
I'm not sure why they do this, but I think zone.js does give you a way to make `onmessage` be registration-time, it's just not enabled by default

[00:52:42.0221] <Andreu Botella>
I'm not sure why that is though

[07:31:00.0601] <Chengzhong Wu>
I am on the trip and will not be able to join the call today

[09:05:12.0675] <Justin Ridgewell>
Ping!

[10:27:25.0799] <Justin Ridgewell>
Interesting discussion about retrieving the call-time context today. Will post a GH issue later today.

[16:43:01.0757] <littledan>
I had a nice chat with Qard here in London about the generator concerns. Ultimately this relates to Koa’s use of generators, but that makes me think that our save-and-restore-across-yield semantics would actually be *better*. We were unable to come to a concrete case which is made worse by the semantics, though there will be some differences vs today’s Node AsyncLocalStorage. IMO, until I hear further evidence, I think this is a good tradeoff and we should stick with the current generator design.


2024-04-03
[06:57:35.0840] <littledan>
I'm very skeptical of the callingContext direction. I'm sorry that I missed the last AsyncContext call, but I think we should discuss this further among ourselves before making it the focus of the presentation next week. Let's focus on the things that are settled. We can briefly mention that we're working on the HTML integration, and this is one idea that's been floated, but it's still very early and we're just beginning to consider it.

[06:58:44.0562] <littledan>
One piece of complexity is that there are actually more than two plausibly relevant snapshots, as this comment alluded to: https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2034251830

[06:59:27.0044] <littledan>
another issue is that it doesn't remove the need for us to develop opinions about how HTML integration works--we still need to figure out the default semantics, which is what most people will be using most of the time.

[07:00:02.0526] <littledan>
If this is presented in committee, we'll end up spending a bunch of time arguing among ourselves. But that would be a disservice to the proposal--we've made so much progress, and we should be focusing on explaining that.

