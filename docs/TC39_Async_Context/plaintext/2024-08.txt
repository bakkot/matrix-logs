2024-08-02
[12:52:03.0078] <Justin Ridgewell>
Congrats @stephenbelanger:matrix.org: https://github.com/nodejs/node/pull/48528#issuecomment-2266038177

[12:52:45.0704] <Stephen Belanger>
Heh, that was quick. 😅

[12:52:46.0277] <Justin Ridgewell>
Last perf improvments were https://github.com/nodejs/node/pull/48528#issuecomment-2253643765

[13:02:17.0080] <Justin Ridgewell>
- `.get()` is ~50% faster regardless of the number of async resources
- `.get()` is ~15% faster regardless of the number of nested `.run()` calls
- Creating new async resources/promises is 50% to 1400% faster depending on number of resources
    - It’s 2%-14% slower when no `Variable` are in use?

[13:02:39.0611] <Justin Ridgewell>
* 1.  `.get()` is ~50% faster regardless of the number of async resources
2.  `.get()` is ~15% faster regardless of the number of nested `.run()` calls
3.  Creating new async resources/promises is 50% to 1400% faster depending on number of resources
      - It’s 2%-14% slower when no `Variable` are in use?

[13:03:01.0492] <Justin Ridgewell>
Is there a test for speed of the `.run()` itself?

[13:22:55.0516] <Stephen Belanger>
The degradation when not in use is because of the infectious nature of AsyncResource. I plan on poking at that a bit to see what I can do to improve the performance there, but given that apps without _any_ variables don't actually _exist_ in-practice it's not a _huge_ concern.

[13:24:37.0446] <Stephen Belanger>
And no, I don't think there's a run-only benchmark. I want to build out the benchmarks a bit more around it. Because it was layered over async_hooks forever, and _that_ was always a pile of hacks, it never really got much serious consideration when it came to performance, stability, correctness, etc. I'm hoping to change that with the move off of an async_hooks core.


2024-08-03
[07:58:46.0325] <littledan>
Great work Stephen!

[13:49:38.0881] <snek>
got the same fun happening in deno as well. it was nice to see after landing the optimizations in V8 that we can measure the overhead in cpu cycles now 😄 https://github.com/denoland/deno/commit/3a1a1cc030fb7fc90d51ee27162466d6ac924926

[13:50:24.0145] <snek>
hopefully this proposal can kill that last bit of O(n) complexity 


2024-08-04
[10:22:10.0203] <littledan>
> <@devsnek:matrix.org> hopefully this proposal can kill that last bit of O(n) complexity 

Which one?


2024-08-05
[05:47:32.0243] <snek>
littledan: in the node impl its `super(AsyncContextFrame.current())` and in the deno impl its `{...previousContextMapping}`. There's no efficient copy-on-write structure available in js like there is in native code

[07:00:34.0576] <littledan>
> <@devsnek:matrix.org> littledan: in the node impl its `super(AsyncContextFrame.current())` and in the deno impl its `{...previousContextMapping}`. There's no efficient copy-on-write structure available in js like there is in native code

it should be possible to implement a HAMT in JS, shouldn't it? (hash based on an incrementing number that each Variable has)

[07:00:57.0671] <littledan>
or, equally, the simple linked list model (good enough sometimes--all web frameworks do this)

[08:35:08.0026] <Stephen Belanger>
A linked list of contexts is what I was going for originally, but it makes things uncollectable even if they’ve been replaced in the store because they are held further up in the linked list. Needed to do the map clone approach for reasonable memory characteristics.

[08:35:33.0212] <littledan>
you can use a HAMT for this (the engine doesn't have special powers that JS doesn't have)

[08:35:44.0339] <littledan>
https://en.wikipedia.org/wiki/Hash_array_mapped_trie

[08:36:09.0083] <littledan>
in particular a "persistent" one

[08:36:21.0567] <littledan>
I think engines would *not* implement this with a linked list plus magical GC


2024-08-07
[11:55:41.0660] <Andreu Botella>
Steve Hicks: You previously mentioned that with a single property name on events, developers would have to look up which would be the source of that snapshot for each event. If most events with async sources don't propagate the context but some do, wouldn't developers also have to look up when the context is propagated?

[11:55:48.0883] <Andreu Botella>
and I suspect that would be a lot harder to google

[12:55:36.0445] <Steve Hicks>
> <@abotella:igalia.com> Steve Hicks: You previously mentioned that with a single property name on events, developers would have to look up which would be the source of that snapshot for each event. If most events with async sources don't propagate the context but some do, wouldn't developers also have to look up when the context is propagated?

That's a fair point.  I really do prefer the consistency, but ultimately I think getting the right default as much as possible is a more important trade-off.  I think in order to reason much further about this, we need two things: (1) a more concrete list of events and what context they will run in, and (2) a better understanding of whether the "no context exists" case falls back on the top-level (empty) context or else the registration-time context.  What's the best way to collaborate on #1?

[12:59:08.0269] <Andreu Botella>
last time I checked there were 250+ event names in the web platform (which is not the same as distinct events, since e.g. the `error` event on window is very different from the `error` event on say `WebSocket`)

[13:00:00.0675] <Andreu Botella>
only those that have async sources matter here, but I don't think there's a good way to get the full list short of analyzing every single one

[13:00:17.0630] <Andreu Botella>
 * only those that have async sources matter here, but I don't think there's a good way to get the full list of those, short of analyzing every single one

[13:01:21.0902] <Andreu Botella>
although maybe there's a way to analyze e.g. chromium code to get a partial list of events that are guaranteed to have async sources

[13:01:55.0646] <Steve Hicks>
I can ask my internal chrome contacts to see if they've got any pointers

[13:03:18.0820] <Andreu Botella>
one thing nicolo-ribaudo pointed out is that we could try to reach out to JS educators, maybe giving some example APIs for libraries that would be using AsyncContext, and let developers tell us which events they'd use those libraries with

[13:03:46.0662] <Andreu Botella>
since we have a selection bias in that first-party developers won't be engaging because they will not be using AsyncContext directly most of the time

[13:04:56.0175] <Steve Hicks>
that's an interesting approach - I'm a little unsure of what it would mean to use an event with a library, though.

[13:05:31.0008] <Steve Hicks>
I imagine a tracing or DI library is generally pretty orthogonal from the event system, so it more comes down to just what events your application uses at all

[13:07:04.0390] <Andreu Botella>
I'm not familiar with DI systems at all, so I'll have to trust you on that

[13:07:24.0247] <littledan>
by DI here, it's referring to the same kind of thing as React Context

[13:07:44.0639] <littledan>
it'll be good for us all to become familiar with these things, as they're a potentially important use of AsyncContext

[13:08:08.0659] <littledan>
an example of a framework that uses this DI terminology is Vue https://vuejs.org/guide/components/provide-inject

[13:11:36.0005] <Steve Hicks>
Well, I think there's a lot more to DI than what react context does (or else I  may have a too-limited view of what react context is about, since my primary experience is just to avoid prop drilling).  For instance, it's typically used to inject top-level/singleton services, like schedulers, RPC clients, or data stores.  My experience with DI is mostly on the server via Guice (in Java) but in that context, it's a pretty different flavor from drilling props.  A lot of the motivation tends to be looser coupling to support testing and late-loading.

[13:13:32.0837] <Steve Hicks>
Andreu Botella: you mentioned 250+ event names, but presumably this also doesn't include (e.g.) custom element lifecycle callbacks, mutation/intersection observers, etc.

[13:14:47.0036] <Andreu Botella>
for custom element callbacks, as far as I'm aware they're always either triggered synchronously from JS code, or caused by a user or browser event, so I don't think there are any possible async sources

[13:16:09.0011] <Andreu Botella>
for observers, most of them bunch multiple observations, so calling the callback with only one of them would be a merge

[13:17:54.0559] <Andreu Botella>
in the document I describe exposing the snapshot for each of them in the observation object, if it would be useful

[13:18:08.0872] <Andreu Botella>
Chengzhong Wu pointed out that for `PerformanceObserver` they would be

[13:19:55.0015] <Chengzhong Wu>
Yeah, resource timing in fetch is only available from `PerformanceObserver` so it is useful to get each resource timing event's relevant context snapshot

[13:33:03.0545] <Andreu Botella>
another important question: if we use the top-level context for user/browser-sourced events, would users of AsyncContext need a way to tell whether it is the top-level context? or would every possible use only care about its own variables, and it could check whether they have the default values?

[13:35:42.0496] <Andreu Botella>
I'm thinking of userland schedulers, which would have no variables, they would just store a snapshot – is there any use case where it would make sense to do that inside an event listener, and where the scheduler would want to replace the snapshot if it's empty?

[13:41:55.0631] <Steve Hicks>
> <@abotella:igalia.com> for custom element callbacks, as far as I'm aware they're always either triggered synchronously from JS code, or caused by a user or browser event, so I don't think there are any possible async sources

One async source I'm aware of is when a contenteditable element is deleted by user interaction.

[13:42:58.0192] <Andreu Botella>
there's never good terminology for this stuff 😮‍💨

[13:43:22.0323] <Andreu Botella>
when I say async source, I'm discouting events caused by user or browser interactions

[13:44:09.0314] <Steve Hicks>
Ah, I thought "user" meant "developer".  So you're not counting a UI click initiating a click event as an async source?

[13:47:31.0679] <Andreu Botella>
if we go with not using registration-time always, then we'd have one consistent behavior for events fired synchronously from the action of some JS code, and another consistent behavior (whether top-level context or registration context) for events that were not fired due to the action of some JS code

[13:48:06.0293] <Andreu Botella>
what I'm concerned with is cases where you have JS code starting an async operation in the browser that eventually fires an event

[13:48:26.0835] <Andreu Botella>
since those cases would have to be handled manually, and it's unfeasible to handle every single one of them in the initial rollout

[13:48:41.0811] <Andreu Botella>
 * since the spec and browser changes for those cases would have to be handled manually, and it's unfeasible to handle every single one of them in the initial rollout

[13:48:48.0125] <Andreu Botella>
 * since the spec and browser changes for those events would have to be handled manually, and it's unfeasible to handle every single one of them in the initial rollout

[13:49:54.0790] <Steve Hicks>
Do you have an example of "JS code starting an async operation in the browser that eventually fires an event"?  Are you thinking of e.g. XHR?

[13:50:20.0778] <Andreu Botella>
XHR is a good and common example, which is why I keep using it, but there are many others

[13:51:00.0527] <Andreu Botella>
a lot of those are obscure though

[13:52:52.0408] <Andreu Botella>
 * if we go with not using registration-time always, then we'd have one consistent behavior for events fired synchronously from the action of some JS code, and another consistent behavior (whether top-level context or registration context) for events that were not fired due to the action of some JS code in the same agent

[13:53:05.0115] <Steve Hicks>
I'm not optimistic, but is there any way to hedge here?  When we're rolling out userland APIs internally, we try to lock things down as much as possible at the outset so that not-yet-defined behavior is an early error.  I'm not coming up with any good way to fail fast if anyone were to try to rely on a specific choice of context in the interim before we figure out what the correct default is.

[13:53:54.0044] <littledan>
> <@stephenhicks:matrix.org> Well, I think there's a lot more to DI than what react context does (or else I  may have a too-limited view of what react context is about, since my primary experience is just to avoid prop drilling).  For instance, it's typically used to inject top-level/singleton services, like schedulers, RPC clients, or data stores.  My experience with DI is mostly on the server via Guice (in Java) but in that context, it's a pretty different flavor from drilling props.  A lot of the motivation tends to be looser coupling to support testing and late-loading.

I think React Context is used for a lot of things (certainly data stores, not 100% sure about the others)

[13:55:35.0049] <Andreu Botella>
> <@stephenhicks:matrix.org> I'm not optimistic, but is there any way to hedge here?  When we're rolling out userland APIs internally, we try to lock things down as much as possible at the outset so that not-yet-defined behavior is an early error.  I'm not coming up with any good way to fail fast if anyone were to try to rely on a specific choice of context in the interim before we figure out what the correct default is.

Yeah, I can't come up with a way either

[13:57:42.0057] <Steve Hicks>
The sledgehammer approach would just be to make `variable.get()` throw until a new snapshot is restored, but I don't see that flying.

[13:58:17.0248] <Steve Hicks>
(and even then, people end up depending on errors, etc... web compat is a pain)

[13:59:04.0545] <Justin Ridgewell>
The only future proof default is no context

[13:59:20.0954] <Justin Ridgewell>
Provide both originating and registration via properties

[14:02:51.0478] <Steve Hicks>
I don't think that satisfies the goal that AC-unaware user code does the right thing by defualt.  And it doesn't really leave the door open to providing a different context later (e.g. we have a `beginTrace` API that starts a new trace if there's not one currently active, or opens a child span if there is.  But changing an event from no-context to registration context (for example) ends up changing this behavior, which isn't good.

[14:46:23.0137] <Steve Hicks>
Backing up a bit, I wonder how many events are actually ambiguous.  I suspect that the majority will be pretty clear.  It's a lot of upfront work, but if we can narrow down the list of events that we really don't know what to do with, that might make it easier to talk about.  Is something like https://www.w3.org/wiki/List_of_events a good place to start?

[14:51:35.0813] <Andreu Botella>
that looks very outdated, but it might be a place to start

[14:52:12.0049] <Andreu Botella>
the definitive list of events is probably https://github.com/w3c/webref/tree/main/ed/events, scraped directly from web specs

[14:52:48.0921] <Andreu Botella>
although not all of those are specs that are far enough in the process to be implementable in browsers, let alone implemented

[14:53:09.0811] <Andreu Botella>
 * although not all of those are specs that are far along in the process to be implementable in browsers, let alone implemented

[14:58:57.0796] <Andreu Botella>
I have a buggy script running around that can take webref data and filter it based on MDN's compat data, I can work on that tomorrow if you think it would be useful

[14:59:22.0360] <Andreu Botella>
 * I have a buggy script running around that can take webref data and filter it based on MDN's compat data, I can pull it out and try to make it work on events tomorrow if you think it would be useful

[15:00:19.0321] <Andreu Botella>
 * I have a buggy script somewhere that can take webref data and filter it based on MDN's compat data, I can pull it out and try to make it work on events tomorrow if you think it would be useful


2024-08-08
[17:39:47.0699] <Steve Hicks>
that sounds useful, I was about to try to put something like that together myself

[11:19:07.0742] <Andreu Botella>
I'm looking at chromium event dispatch code, and it seems like there are a number of events (especially dealing with navigation, cross-window communication and similar things) that are synchronous if the window is active, but not if it's in the back/forward cache

[11:21:32.0793] <Steve Hicks>
That seems consistent with click, where it can be triggered either programmatically or by the user interface.  Active vs fallback context should be fine?

[11:22:44.0302] <Andreu Botella>
could be

[11:23:29.0475] <Andreu Botella>
for the `message` event, though, chromium is already propagating the context for task attribution

[11:31:24.0497] <Andreu Botella>
huh, it seems like for at least some of these events with an async source, the way chromium dispatches them would make it easy to propagate the context in the implementation

[11:32:18.0886] <Andreu Botella>
but I don't know how that translates to other browsers, and that definitely does not translate to the spescs

[11:32:23.0420] <Andreu Botella>
 * but I don't know how that translates to other browsers, and that definitely does not translate to the specs


2024-08-12
[10:54:04.0407] <Andreu Botella>
So as I mentioned earlier, Chromium has a way to track what scheduled some async tasks (seems to be used for devtools and for ad tracking), so I made a patch that prints out the type of event, and for async sources some string related to the scheduler, for each event dispatch

[10:54:14.0603] <Andreu Botella>
https://chromium-review.googlesource.com/c/chromium/src/+/5774262

[10:55:43.0715] <Andreu Botella>
maybe there's a way to turn that into telemetry that we could get, but the timeline on getting that will be months

[10:56:15.0663] <Andreu Botella>
I also don't expect that the async task tracking covers every event with an async source

[10:56:32.0252] <Andreu Botella>
 * I also don't expect that this async task tracking covers every event with an async source, so we might not get a full list of such events

[10:56:54.0653] <Andreu Botella>
but I might run a number of Blink web tests overnight and see what results we get


2024-08-14
[17:58:23.0401] <Steve Hicks>
I put together a spreadsheet from the @webref/events github:
https://docs.google.com/spreadsheets/d/1r-IjEyTEuCzQtJgSyY-a5htrQFME9RPylkv3hT_puqg/edit?gid=1971388798#gid=1971388798

[19:09:51.0412] <Steve Hicks>
So far a handful of cases seem to maybe want to snapshot the context that was active when a task is queued - e.g. `securitypolicyviolation` is fired _asynchronously_ after JS code programatically does something that violates CSP - this seems basically impossible to polyfill, for what that's worth.

[10:17:36.0915] <littledan>
what do you mean by "preserve" here?

[10:18:08.0579] <littledan>
maybe we should maintain a "rationale" column in this doc

