2024-08-02
[12:52:03.0078] <Justin Ridgewell>
Congrats @stephenbelanger:matrix.org: https://github.com/nodejs/node/pull/48528#issuecomment-2266038177

[12:52:45.0704] <Stephen Belanger>
Heh, that was quick. ðŸ˜…

[12:52:46.0277] <Justin Ridgewell>
Last perf improvments were https://github.com/nodejs/node/pull/48528#issuecomment-2253643765

[13:02:17.0080] <Justin Ridgewell>
- `.get()` is ~50% faster regardless of the number of async resources
- `.get()` is ~15% faster regardless of the number of nested `.run()` calls
- Creating new async resources/promises is 50% to 1400% faster depending on number of resources
    - Itâ€™s 2%-14% slower when no `Variable` are in use?

[13:02:39.0611] <Justin Ridgewell>
* 1.  `.get()` is ~50% faster regardless of the number of async resources
2.  `.get()` is ~15% faster regardless of the number of nested `.run()` calls
3.  Creating new async resources/promises is 50% to 1400% faster depending on number of resources
      - Itâ€™s 2%-14% slower when no `Variable` are in use?

[13:03:01.0492] <Justin Ridgewell>
Is there a test for speed of the `.run()` itself?

[13:22:55.0516] <Stephen Belanger>
The degradation when not in use is because of the infectious nature of AsyncResource. I plan on poking at that a bit to see what I can do to improve the performance there, but given that apps without _any_ variables don't actually _exist_ in-practice it's not a _huge_ concern.

[13:24:37.0446] <Stephen Belanger>
And no, I don't think there's a run-only benchmark. I want to build out the benchmarks a bit more around it. Because it was layered over async_hooks forever, and _that_ was always a pile of hacks, it never really got much serious consideration when it came to performance, stability, correctness, etc. I'm hoping to change that with the move off of an async_hooks core.


2024-08-03
[07:58:46.0325] <littledan>
Great work Stephen!

[13:49:38.0881] <snek>
got the same fun happening in deno as well. it was nice to see after landing the optimizations in V8 that we can measure the overhead in cpu cycles now ðŸ˜„ https://github.com/denoland/deno/commit/3a1a1cc030fb7fc90d51ee27162466d6ac924926

[13:50:24.0145] <snek>
hopefully this proposal can kill that last bit of O(n) complexity 


2024-08-04
[10:22:10.0203] <littledan>
> <@devsnek:matrix.org> hopefully this proposal can kill that last bit of O(n) complexity 

Which one?


2024-08-05
[05:47:32.0243] <snek>
littledan: in the node impl its `super(AsyncContextFrame.current())` and in the deno impl its `{...previousContextMapping}`. There's no efficient copy-on-write structure available in js like there is in native code

[07:00:34.0576] <littledan>
> <@devsnek:matrix.org> littledan: in the node impl its `super(AsyncContextFrame.current())` and in the deno impl its `{...previousContextMapping}`. There's no efficient copy-on-write structure available in js like there is in native code

it should be possible to implement a HAMT in JS, shouldn't it? (hash based on an incrementing number that each Variable has)

[07:00:57.0671] <littledan>
or, equally, the simple linked list model (good enough sometimes--all web frameworks do this)

[08:35:08.0026] <Stephen Belanger>
A linked list of contexts is what I was going for originally, but it makes things uncollectable even if theyâ€™ve been replaced in the store because they are held further up in the linked list. Needed to do the map clone approach for reasonable memory characteristics.

[08:35:33.0212] <littledan>
you can use a HAMT for this (the engine doesn't have special powers that JS doesn't have)

[08:35:44.0339] <littledan>
https://en.wikipedia.org/wiki/Hash_array_mapped_trie

[08:36:09.0083] <littledan>
in particular a "persistent" one

[08:36:21.0567] <littledan>
I think engines would *not* implement this with a linked list plus magical GC

