2025-09-09
[09:02:55.0633] <nicolo-ribaudo>
Meeting time!


2025-09-10
[22:17:03.0691] <Steve Hicks>
I spent some time today thinking about the yield issue.  I didn't come to any particularly compelling conclusions, but I listed out some use cases and considerations that I thought about here: https://hackmd.io/@sdh/SJmOBKAqeg - tl;dr is that I was expecting to find evidence that propagating context _into_ instead of _across_ the yield made the most sense, but instead it seemed a lot less clear.  One unanswered question I had (which I believe we've talked about but I don't recall the resolution) was the analogue with iterator helpers and whether `iter.map(mapper)` could be implemented with a generator or would need to use a hand-written iterator - ISTR it's the latter, that the mapper sees the dispatch context - in which case that would be a minor argument in favor of dispatch context for generators as well.  Anyway, no action is necessary here but I wanted to share the results of my thinking.


2025-09-23
[13:31:13.0995] <Steve Hicks>
I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?

At this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c

[13:31:45.0945] <Steve Hicks>
* I had some personal issues come up this week and missed the session where we talked about yield\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?

At this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c

[13:32:15.0496] <Steve Hicks>
* I had some personal issues come up this week and missed the session where we talked about yield\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?

At this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c

[13:47:33.0569] <bakkot>
my understanding of the presentation is that it made `yield*` more like repeated `yield`, so I don't know what "extending this to also include ordinary yield" means

[14:05:51.0204] <Steve Hicks>
This is the opposite of my understanding.  As I understand it, the previous situation was that `yield*` was basically just repeated `yield`, but the discussion this morning was to make it so that `yield*` would _not_ restore the generator's internal/initial context but would instead pass on the next() calling context into the delegate.

[14:10:24.0593] <Justin Ridgewell>
`for (const it of gen()) yield it` will now behave differently than `yield* gen()`

[14:10:34.0733] <bakkot>
oh, sorry, you're right, I'm wrong

[14:10:51.0432] <Justin Ridgewell>
Only the inner `gen()` sees the difference, the wrapping generator does not.

[14:11:25.0139] <Steve Hicks>
Adding one more point to my earlier paragraph: (6) this would also restore consistency between `yield` and `yield*`

[14:12:56.0714] <bakkot>
I'm still not totally sure what "extending this to also include ordinary yield" means though

[14:13:08.0361] <bakkot>
now both behave as, snapshot context before the expression, restore it after

[14:13:48.0264] <bakkot>
(or else I am still misunderstanding)

[14:14:10.0756] <Steve Hicks>
ah, I see what you're saying

[14:15:06.0286] <Steve Hicks>
Yes, that part hasn't changed - yield* and yield both snapshot and restore around them within the body of the generator

