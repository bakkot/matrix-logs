2023-06-08
[01:25:46.0883] <Andreu Botella>
My understading was that all of Node.js's `AsyncLocalStorage` could be implemented on top of `AsyncContext`, but I'm looking into reusing some of the Node.js benchmarks for my implementation in V8, and it's not clear to me that `enterWith` is always implementable that way

[01:34:22.0596] <Andreu Botella>
oh, wait, maybe that's not actually the case


2023-06-12
[13:32:38.0498] <Andreu Botella>
Tomorrow's AsyncContext meeting is showing in my agenda at both 18 *and* 19 CEST

[13:36:06.0111] <Andreu Botella>
(16/17 UTC, 9/10 Pacific)

[13:36:13.0640] <Andreu Botella>
I'm assuming it's the latter

[14:12:09.0188] <Chris de Almeida>
s/b 17 UTC


2023-06-13
[23:01:23.0354] <Chengzhong Wu>
it should be 17 UTC

[03:29:25.0383] <littledan>
Yeah I see the earlier one as “cancelled” but all calendar integration is broken..

[07:22:45.0360] <Sergey Rubanov>
Hello. Is AsyncContext meeting open for everyone? May I invite my colleague joseph@socketsupply.co?

[08:25:17.0068] <littledan>
Yes, please do!

[08:25:53.0301] <littledan>
anyone can make contributions to TC39 things online if they sign https://tc39.es/agreements/contributor/

[09:31:25.0895] <Justin Ridgewell>
Sergey Rubanov: I added Joseph to the invite, please ensure they sign the IPR agreement before joining

[09:32:04.0116] <Justin Ridgewell>
See you all in 30min!

[09:41:26.0321] <Sergey Rubanov>
> <@jridgewell:matrix.org> Sergey Rubanov: I added Joseph to the invite, please ensure they sign the IPR agreement before joining

Thank you, I'll make sure Joe signed it

[11:59:42.0342] <Mathieu Hofman>
littledan: in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play. While I have to think more about this, I have a few clarifying questions:
- Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated
- What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?

[12:36:15.0829] <Mathieu Hofman>
To clarify, if a program adds a reaction to an unresolved promise, then the program drops the resolvers, there is no way for the pending reaction to ever be called. If that reaction was the last thing that captured the async context, would that async context be deemed terminated?

