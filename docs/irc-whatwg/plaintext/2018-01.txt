2018-01-01
[20:34:45.0000] <jsx>
Hello, when does readyState start being present on a dynamically loaded script tag?

[20:34:54.0000] <jsx>
(Happy New Year)

[20:35:53.0000] <jsx>
s/tag/element

[10:03:25.0000] <denisw>
Hi, I am wondering about how to replicate the resolution of relative img src URLs

[10:04:53.0000] <denisw>
In a page at http://example.com/index.html without <base>, an <img src="foo.png"> will load http://example.com/foo.png in all browsers I know. However, I don't see how (if?) this follows from the HTML spec

[10:06:23.0000] <denisw>
The only information I found is that relative URLs are resolved relative to the document base URL. But wouldn't that mean that http://example.com/index.html/foo.png would be loaded?

[10:10:42.0000] <denisw>
Nevermind, found the relevant part of the URL spec: "[set] url’s path to a copy of base’s path, and then remove url’s path’s last item, if any."


2018-01-02
[14:28:23.0000] <Mek>
am I missing something or does the definition of agent cluster in html not actually say that a window and its same origin iframes are in the same agent cluster? The definition of "can share memory with" seems to only allow "A can share memory with B" for cases where B is a dedicated worker agent...

[14:29:06.0000] <Mek>
ah, never mind, same origin iframes would be the exact same agent, so that would work already


2018-01-03
[00:34:18.0000] <annevk>
Domenic: URL preview looks good

[07:11:27.0000] <annevk>
kochi: got my flight to Tokyo, will arrive Sunday morning and leave very early Wednesday morning

[07:53:20.0000] <smaug____>
what might "For each node tree TREE in DOCUMENT" mean

[07:55:43.0000] <smaug____>
hayato: ^

[07:55:46.0000] <smaug____>
that is in https://w3c.github.io/webcomponents/spec/shadow/#sequential-focus-navigation

[08:07:15.0000] <smaug____>
I can guess what it means, but it is a bit unclear

[08:09:49.0000] <smaug____>
hmm, "Stop this algorithm." there... So step 2 finds just one element

[08:16:46.0000] <smaug____>
and step 3 takes a scope as input, yet the algorithm "For each scope SCOPE:"... what does for each means

[08:16:52.0000] <smaug____>
/me files bugs


2018-01-04
[16:04:34.0000] <Domenic>
Oh no, Quirks Mode doesn't have a Twitter account /cc zcorpan

[16:04:48.0000] <zcorpan>
oh no!

[16:05:00.0000] <Domenic>
And its web platform tests directory is different than its spec shortname

[16:05:29.0000] <zcorpan>
no it does have one, https://twitter.com/quirksstandard

[16:05:49.0000] <Domenic>
Ah! Well then that'll get added to the header shortly :)

[16:06:10.0000] <Domenic>
lol we need to fix its logo

[16:07:02.0000] <Domenic>
Hmm it doesn't have its own logo, it's created with CSS

[23:41:03.0000] <annevk>
One day you have shared memory, and then you don't

[23:43:24.0000] <KiChjang>
sometimes you need to retrace your steps in order to move forward

[00:35:51.0000] <JakeA>
annevk: is Firefox thinking of changing its shared content process model in light of this?

[00:36:04.0000] <annevk>
JakeA: I don't know

[00:36:20.0000] <annevk>
JakeA: is Chrome considering not having a limit?

[00:38:26.0000] <JakeA>
annevk: I believe so. https://www.chromium.org/developers/design-documents/site-isolation

[00:38:49.0000] <JakeA>
If I understand it right, that means one process per similar origin

[00:38:57.0000] <annevk>
Mark Miller is certainly vindicated in putting all the authority in the URL and then not having the URLs leak somehow

[00:39:20.0000] <annevk>
Not that I know any system that fully works that way, but it would not have been vulnerable today

[00:39:32.0000] <annevk>
Ambient authority strikes again

[00:39:49.0000] <annevk>
JakeA: sure, but Chrome has a limit at which it stops doing that

[00:40:11.0000] <JakeA>
Ahh ok. Didn't know.

[01:24:01.0000] <foolip>
annevk: I'm going to review https://github.com/whatwg/fetch/pull/579 with tests now, anything to look out for? I see "Add more tests" not checked.

[01:25:45.0000] <annevk>
foolip: I think I've added more tests since and Domenic might have even run some code coverage check

[01:26:20.0000] <annevk>
foolip: so I think I simply forgot to check it, but perhaps there's things I've overlooked

[01:27:13.0000] <foolip>
tobie: is it you or "us" that controls that https://whatpr.org/fetch/579.html includes the big red warning? excluding it would be nice, because the sha is wrong, and results in two changes that are invisible when navigating. (changes 3 and 4)

[01:27:35.0000] <foolip>
annevk: I'll take a look then.

[01:27:55.0000] <annevk>
foolip: it seems some comments from Domenic about the tests went unaddressed

[01:28:47.0000] <annevk>
foolip: the red warning is important

[01:29:20.0000] <foolip>
annevk: you don't think the URL alone will scare people away?

[01:29:31.0000] <annevk>
foolip: no

[01:29:55.0000] <foolip>
OK then :)

[01:29:56.0000] <annevk>
foolip: standards are hosted in so many different places that URLs unfortunately are not clear enough

[03:42:33.0000] <tobie>
foolip: it is you. Fixing the sha would be good though.

[03:42:44.0000] <tobie>
foolip: what's wrong with it?

[03:43:50.0000] <tobie>
foolip: I'm not too sure what you mean by: "results in two changes that are invisible when navigating"

[03:45:55.0000] <tobie>
foolip: note that you can specify how you pass the parameters to bikeshed via the config file, see: https://github.com/tobie/pr-preview#params-optional

[03:47:47.0000] <tobie>
Is it ok to put a dfn in a non-normative section?

[03:55:05.0000] <annevk>
tobie: it seems rather questionable

[03:55:32.0000] <tobie>
annevk: yeah, which is precisely why I'm bringing it up here.

[03:55:46.0000] <foolip>
tobie: in https://whatpr.org/fetch/579/07999e9...3ee4d8e.html, notice what happens when you press next a few times

[03:55:58.0000] <foolip>
tobie: the warning is collapsed and so there's nothing to see

[03:56:04.0000] <annevk>
tobie: I'd say no and try to refactor, but hard without context

[03:56:05.0000] <foolip>
can't really see how to fix that though

[03:57:14.0000] <annevk>
foolip: in that scenario you're reviewing a specific diff, no?

[03:57:47.0000] <tobie>
annevk: I was trying to create an informative section about legacy WebIDL constructs, as there's often confusion with editors wrt to legacy vs deprecated from WebIDL

[03:58:34.0000] <annevk>
tobie: seems that could be normative to some extent, as we have requirements around such constructs for new standards

[03:59:31.0000] <tobie>
annevk: agreed, but "new standards" are not a conformance class

[03:59:44.0000] <tobie>
(maybe they should be?)

[04:00:23.0000] <tobie>
foolip: oh, I see, the collapsed warning is hiding stuff away?

[04:00:38.0000] <annevk>
tobie: standards are to some extent, at least lots of specs make various requirements of them

[04:00:52.0000] <annevk>
tobie: hard to test though

[04:01:22.0000] <tobie>
annevk: yeah

[04:02:22.0000] <tobie>
foolip: (fyi, you can navigate HTML diffs using the "j" and "k" keys)

[04:14:05.0000] <Ms2ger>
zcorpan, do you still deal with chromium?

[04:16:20.0000] <zcorpan>
Ms2ger: not currently

[05:07:43.0000] <tobie>
annevk: your thoughts on https://github.com/heycam/webidl/pull/506 welcomed (informative section on legacy constructs)

[05:29:42.0000] <Zegnat>
I am probably overlooking a thing, but maybe someone here can just tell me: when getting the textContent of an HTML void element, should that result in null or an empty string?

[05:33:56.0000] <annevk>
Zegnat: empty string I'd expect

[05:34:46.0000] <annevk>
Zegnat: though I think you helped me find a bug as https://dom.spec.whatwg.org/#dom-node-textcontent does not really say what happens when there are no Text node children

[05:35:20.0000] <annevk>
Zegnat: would you like to appear in the Acknowledgments section?

[05:35:28.0000] <annevk>
(and if, how?)

[05:35:39.0000] <Zegnat>
Oh, that would be pretty cool. What information usually goes there? Name and URL?

[05:35:57.0000] <Zegnat>
Ah, just name. "Martijn van der Ven{

[05:36:39.0000] <Zegnat>
Yeah, “empty string” would lead me to ask the question “how do I concat 0 nodes” ;)

[05:38:40.0000] <Ms2ger>
annevk, looks like ordered set serializer is the only use of "concatenation" in the spec that considered that case

[05:38:55.0000] <Ms2ger>
Maybe we should just define "concatenation" in infra.swo

[05:41:28.0000] <Zegnat>
I feel slightly vindicated now that it seems I didn't really overlook anything. Ha.

[06:44:27.0000] <annevk>
Ms2ger: sounds reasonable; guess I should audit callsites

[06:52:55.0000] <annevk>
tobie: sorry, maybe tomorrow

[06:55:10.0000] <domfarolino>
Domenic: annevk: thanks for the PR reviews, gonna be MIA for the next couple days just FYI!

[06:55:49.0000] <annevk>
domfarolino: enjoy the other thing!

[07:14:38.0000] <annevk>
Zegnat: https://github.com/whatwg/dom/issues/555

[07:20:37.0000] <Zegnat>
annevk, I subscribed for notifications. For now I am going to assume empty string.

[07:21:16.0000] <annevk>
Zegnat: yeah, that's what it should be

[07:21:26.0000] <annevk>
Zegnat: that's what all impls do anyway, iirc

[07:24:49.0000] <domfarolino>
thanks!

[07:26:12.0000] <Zegnat>
Looks like it is what implementation do, yes.

[07:26:12.0000] <Zegnat>
It still feels a little odd to me on HTML void elements. Elements with content model "nothing" can never have a Text node descendent, so empty string (which could be an empty Text node descendent, IIRC) is not obvious to me.

[07:28:01.0000] <annevk>
Zegnat: have you ever tried to appendChild to a void element?

[07:29:26.0000] <annevk>
Zegnat: (aka content model is not an actual limitation)

[07:30:06.0000] <nox>
Also, templates.

[07:31:33.0000] <Zegnat>
True, it totally makes sense from the DOM point of view. It just didn’t make sense in my head when I ended up doing textContent on a void element.

[07:32:43.0000] <Zegnat>
I will never forget how textContent works after today though. After spending way too long on figuring out this concat thing before asking here.

[08:23:43.0000] <TabAtkins>
"How to concat 0 nodes" strings form a monoid under concatenation, so "empty string" is the correct answer. ^_^

[08:33:43.0000] <Ms2ger>
/me ignores

[08:34:10.0000] <Ms2ger>
annevk, parsing "data,x" into a URL, what happens?

[09:39:39.0000] <Domenic>
TabAtkins: https://github.com/tabatkins/bikeshed/issues/1161 is somewhat high priority as it'd be sad to lose those legacy open bugs links when transitioning to new WHATWG boilerplate.

[09:50:29.0000] <annevk>
Ms2ger: without a base URL you'd get failure

[09:50:46.0000] <annevk>
Ms2ger: "absolute URLs" need a scheme

[10:02:29.0000] <TabAtkins>
Domenic: Will check on it as soon as I'm in the office

[10:02:33.0000] <Domenic>
<3

[10:50:10.0000] <annevk>
Domenic: I'll try to come up with some CSS suggestions for the redesign tomorrow

[10:51:18.0000] <Domenic>
annevk: I gave it a shot myself, might be good enough?

[10:53:34.0000] <Domenic>
At least for the homepage

[10:53:38.0000] <Domenic>
Secondary pages I'm less sure

[10:53:54.0000] <annevk>
Domenic: I'd go for more space at the top still

[10:54:08.0000] <annevk>
Domenic: looks very cramped on a large display at least

[10:54:26.0000] <Domenic>
Hmm yes that change got lost it seems

[10:54:28.0000] <annevk>
I also miss the color a bit, admittedly

[10:55:40.0000] <annevk>
I also think we should stick with images/ and not have this legacy dir and new dir, but that's rather minor

[10:56:13.0000] <Domenic>
I think images/ is a lost cause

[10:56:28.0000] <annevk>
Still doesn't have that much spacing at the very top

[10:56:31.0000] <annevk>
I don't think so

[10:56:34.0000] <Domenic>
Oh very top hmm

[10:56:36.0000] <annevk>
If it was, /principles would be too

[10:56:42.0000] <Domenic>
I think principles is too actually

[10:56:55.0000] <annevk>
It works fine here

[10:56:59.0000] <Domenic>
Although perhaps nobody visited it before

[10:57:01.0000] <Domenic>
Yeah

[10:57:06.0000] <annevk>
And I had visited it

[10:57:09.0000] <annevk>
For sure

[10:57:14.0000] <Domenic>
Hmm

[10:58:27.0000] <Domenic>
Well I'll leave it all be for now, top spacing and /img works for me, but when you have time we can revisit

[11:03:49.0000] <annevk>
Domenic: the big thing with the tabbed pages is the boxes not being clickable btw

[11:03:58.0000] <Domenic>
Yeah that's easy to fix

[11:04:00.0000] <annevk>
Domenic: which you can solve with some display:block float:left trick

[11:04:09.0000] <annevk>
Or maybe it's easy with flexbox these days?

[11:04:14.0000] <Domenic>
Yeah I think flexbox or similar

[11:04:17.0000] <Domenic>
It's fixed on the homepage

[11:04:22.0000] <Domenic>
Just gotta port that

[11:04:23.0000] <annevk>
I only know 2006 era CSS

[11:04:46.0000] <Domenic>
Well our homepage only works in modern browsers after this redesign

[11:45:52.0000] <TabAtkins>
Grid yo, stop doing crazy float hacks.  Hide it inside a @supports block and let down-level browsers get a minimal but useful bare-HTML view.

[12:03:48.0000] <Domenic>
No need to hide within @supports for that, right?

[12:06:33.0000] <TabAtkins>
Depends on how much code beyond the base Grid declarations you're applying - if you've got styling that would be bad when Grid's not there, you want @supports to group it together.

[12:48:28.0000] <Domenic>
TabAtkins: are deploys to api.csswg.org instant for new bikeshed boilerplate?

[12:48:47.0000] <TabAtkins>
Nearly so - the server has a commit hook on the repo.

[12:48:57.0000] <Domenic>
Hmm hmm

[15:16:48.0000] <MikeSmith>
TabAtkins: align-items: left & align-items: left are no valid, right?

[15:17:18.0000] <MikeSmith>
perhttps://drafts.csswg.org/css-align-3/#propdef-align-items

[15:17:43.0000] <TabAtkins>
Nah, they're fine. (And you repeated the same thing twice; I presume one meant to refer to "right"?)

[15:17:52.0000] <TabAtkins>
*-items take the same grammar as *-self.

[15:17:55.0000] <MikeSmith>
yeah

[15:18:36.0000] <TabAtkins>
...huh, we didn't put left and right into the grammar terms. I think that's a mistake.

[15:18:36.0000] <MikeSmith>
TabAtkins: OK but if I follow the links in Values part there I find nothing that allows "left" or "right"

[15:18:41.0000] <MikeSmith>
ah OK

[15:18:49.0000] <MikeSmith>
should I file an issue?

[15:19:37.0000] <MikeSmith>
or if you can just update the spec source, I am happier with that :)

[15:19:38.0000] <TabAtkins>
I just pinged fantasai.

[15:19:45.0000] <MikeSmith>
OK

[15:19:46.0000] <MikeSmith>
thanks


2018-01-05
[18:37:57.0000] <kochi>
annevk: great to hear that. have a safe trip!

[18:38:09.0000] <kochi>
/me starts working today

[20:52:50.0000] <tkore>
is there any plan of integrating native private class members?

[22:32:24.0000] <annevk>
tkore: you want #tc39 and yes, I think so

[00:17:48.0000] <annevk>
foolip: I keep getting "curl: (7) Failed to connect to resources.whatwg.org port 443: Connection timed out"

[00:17:54.0000] <annevk>
foolip: and similar such error messages

[00:18:08.0000] <annevk>
foolip: I wonder if Travis has some kind of limit on curl calls?

[00:18:21.0000] <annevk>
foolip: or maybe our server has some kind of limit we're not aware of?

[00:18:34.0000] <annevk>
foolip: did you end up adding CDNs?

[00:24:53.0000] <foolip>
annevk: no CDN yet, but it also wouldn't help when deploying, stuff still has to go to one place

[00:25:07.0000] <foolip>
annevk: you're seeing this in many Travis jobs?

[00:25:46.0000] <annevk>
foolip: I'm more worried about CDNs adding more uncertainty, so I'd prefer not adding one if we don't need it

[00:26:13.0000] <annevk>
foolip: I have this one whatwg/infra job I can't seem to get a good result from

[00:26:41.0000] <annevk>
foolip: and it's on master and blocking other PRs

[00:26:47.0000] <annevk>
/me restarts it again

[00:29:30.0000] <annevk>
foolip: seems to be either that or an internal server error, but due to the bad debugging messages I'm not sure if the internal server error was for the original curl or another one that build.sh performs

[01:14:02.0000] <yoav>
Is a sharedworker intercepted by a service worker on the scope from which the sharedworker is fetched?

[01:14:57.0000] <annevk>
yoav: yeah, that should also be the case for dedicated workers though, iirc, but browsers have issues

[01:15:44.0000] <yoav>
well, I'm writing Request.destination tests, my "worker" test works fine, but same test for "sharedworker" doesn't (and it seems like SW is not intercepting)

[01:16:00.0000] <yoav>
(but I could be wrong and it's something else entirely)

[01:19:59.0000] <annevk>
yoav: it might work fine due to a bug in the test and the impl 😃

[01:20:19.0000] <yoav>
:)

[01:20:46.0000] <yoav>
console.log() from the SW spits out the request for the worker (so the SW sees it)

[01:20:48.0000] <annevk>
yoav: see https://github.com/whatwg/html/issues/3112

[01:21:05.0000] <annevk>
yoav: currently all workers are not subresources and therefore behave the same as documents when it comes to service worker selection

[01:21:26.0000] <yoav>
ok, so the fact that the document sees the SW is a bug?

[01:21:39.0000] <annevk>
yoav: however, implementations might not do this correctly for dedicated workers and we're undecided on what is going to change

[01:21:41.0000] <yoav>
s/SW/dedicated worker/

[01:21:51.0000] <annevk>
yoav: that's the status quo, yes

[01:22:02.0000] <yoav>
ok, so if I'm writing tests, I should use that, right?

[01:22:11.0000] <yoav>
*I should not use that

[01:22:17.0000] <annevk>
yoav: right, tests should be against the spec

[01:22:36.0000] <annevk>
yoav: you can make the test not rely on this aspect though by making the scope encompass both

[01:23:09.0000] <Ms2ger>
Anyone around who knows a bit about createImageBitmap?

[01:23:26.0000] <yoav>
annevk: ok, thanks! :)

[01:24:12.0000] <annevk>
Ms2ger: a bit, yes

[01:25:33.0000] <Ms2ger>
Because that's all you need to review https://github.com/w3c/web-platform-tests/pull/8880 ;)

[01:26:25.0000] <annevk>
very good

[01:32:06.0000] <annevk>
junov could maybe help own that

[01:34:46.0000] <yoav>
annevk: another question, are favicons intercepted?

[01:35:16.0000] <yoav>
I assume they are...

[01:36:03.0000] <annevk>
yoav: per spec, yes, but it only defines favicon.ico fetching as part of fetching a document

[01:36:20.0000] <annevk>
yoav: if a UA fetches /favicon.ico early it's not documented

[01:36:34.0000] <yoav>
hmm, so dynamically loading of favicons based on <link> element is not defined?

[01:37:04.0000] <annevk>
yoav: I'm only talking about /favicon.ico; all other icons are defined afaik

[01:37:10.0000] <yoav>
ok

[01:37:18.0000] <annevk>
yoav: and all other icons are intercepted, to be clear

[01:37:37.0000] <yoav>
cool

[01:54:37.0000] <Ms2ger>
annevk, thanks (and will try to pay more attention to var/let)

[02:16:37.0000] <foolip>
annevk: I'm upgrading my Mac and can't easily look now, did restarting it work?

[02:17:49.0000] <annevk>
foolip: no, just different errors

[02:18:07.0000] <annevk>
foolip: I guess I should look at the build script and see if I can add some echo statements

[02:43:37.0000] <annevk>
foolip: https://github.com/whatwg/whatwg.org/pull/159

[02:44:06.0000] <foolip>
annevk: I see it was a 500, which is quite surprising, never seen that before. I wonder if it's really nginx that did it or if there's some intermediate thing involved here on Travis's end

[02:44:29.0000] <annevk>
foolip: I think the 500 came from api.csswg.org

[02:44:47.0000] <annevk>
foolip: I now get a 400 which indicates something is wrong Bikeshed-wise

[02:45:15.0000] <foolip>
annevk: oh... I saw curl in the command and curl in the failure, got confused

[02:45:35.0000] <foolip>
Yeah, I just restarted, now it's 400

[02:46:39.0000] <annevk>
I suspect that's because we now have this WHATWG Group template

[02:47:01.0000] <annevk>
And you can't select an older Bikeshed to build against

[02:47:31.0000] <annevk>
Okay, so I think it all makes sense and probably requires Domenic to resolve as he has all the pieces in his head

[02:47:50.0000] <annevk>
We still could do with better error messages if Bikeshed fails

[02:47:58.0000] <foolip>
annevk: isn't the WHATWG group a new thing in Bikeshed, so the problem is api.csswg.org doesn't have the updated code yet?

[02:48:01.0000] <annevk>
I have some ideas

[02:48:27.0000] <annevk>
foolip: I think it now has the updated code and the problem is that whatwg/infra is not using it

[02:48:36.0000] <foolip>
we could just run Bikeshed on Travis, and have a place that says "master" that we could use to pin the version when needed

[02:48:59.0000] <annevk>
foolip: since we haven't merged the whatwg/infra PR that uses the new Bikeshed template (as all those PRs also depend on something else)

[02:49:00.0000] <foolip>
But, that's also stuff to maintain.

[02:49:11.0000] <foolip>
annevk: oh I see

[02:49:17.0000] <annevk>
I think the current setup is fine

[02:49:38.0000] <foolip>
OK, so this wasn't a problem of api.csswg.org doing the wrong thing

[02:49:41.0000] <annevk>
The main thing we need to improve is how the log reads (provide more context) and curl error messages

[02:49:51.0000] <annevk>
Well, the 500 was weird

[02:50:04.0000] <annevk>
And the timeouts from resources.whatwg.org were weird too

[02:50:07.0000] <foolip>
anyway, marquee's graphs have been looking very much the same for a week, and not under much load at all

[02:50:22.0000] <annevk>
Yeah I doubt it's us really

[02:50:24.0000] <foolip>
but there could exist bugs of course

[02:50:30.0000] <annevk>
I think Travis has some kind of curl limit

[03:58:24.0000] <smaug____>
annevk: I'm trying to parse spec's sequential focusing

[03:58:46.0000] <smaug____>
I'm having trouble with https://html.spec.whatwg.org/multipage/interaction.html#sequential-navigation-search-algorithm

[03:58:55.0000] <smaug____>
I mean to understand that

[03:59:27.0000] <smaug____>
selection mechanism DOM vs sequential

[03:59:40.0000] <smaug____>
and what actually happens there

[04:01:54.0000] <smaug____>
perhaps it is https://html.spec.whatwg.org/multipage/interaction.html#suitable-sequentially-focusable-area which I don't understand

[04:03:02.0000] <smaug____>
"Let candidate be the first suitable sequentially focusable area in the home control group following starting point" what is that first

[04:48:58.0000] <annevk>
Hmm, where's Ms2ger

[05:23:54.0000] <csarven>
Can anyone point me to what the root node that MutationObserver is listening on? I'm experiencing document.body but was under the impression that it'd be document.documentElement or something.

[05:25:50.0000] <csarven>
My bad.. I had the wrong target :)

[05:37:59.0000] <smaug____>
annevk: nm the sequential focus question. I think I managed collect the needed information scattered around the spec. Focus handling is hard (to spec and implement).

[05:43:35.0000] <annevk>
smaug____: sorry for totally ignoring that... when folks mention focus I tend to blur

[05:43:49.0000] <annevk>
(as indeed, it's way hard)

[06:56:05.0000] <fantasai>
Are there incoming references to Selectors besides https://dom.spec.whatwg.org/ in the DOM/JS world?

[06:56:43.0000] <annevk>
fantasai: HTML

[06:56:58.0000] <annevk>
fantasai: maybe Fullscreen API (it defines new selectors at least)

[06:57:30.0000] <annevk>
Seems like Fullscreen does not, but maybe should

[06:58:38.0000] <annevk>
fantasai: https://quirks.spec.whatwg.org/

[06:59:00.0000] <annevk>
fantasai: that's probably it as far as WHATWG goes

[06:59:14.0000] <fantasai>
annevk: thanks!

[06:59:26.0000] <fantasai>
annevk: Anything on the W3C side I should be aware of?

[06:59:34.0000] <fantasai>
/me never knows where things live in the scripting world

[07:00:03.0000] <annevk>
fantasai: I'm not really sure, nothing really comes to mind though

[07:01:28.0000] <fantasai>
annevk: Web components maybe? Do you know where the current "you should look at this" spec lives for that? :)

[07:03:07.0000] <annevk>
fantasai: Web Components is DOM + HTML + some leftover bits yet to be upstreamed, and some new CSS specs

[07:03:30.0000] <annevk>
fantasai: of those, the HTML and CSS bits reference Selectors (HTML defines a new pseudo-class and the CSS stuff defines more)

[07:04:06.0000] <fantasai>
Afaik the CSS bits are in css-scoping; does anything  else on the CSS side live elsewhere than the CSSWG?

[07:04:17.0000] <annevk>
fantasai: maybe the Selectors spec should start hosting a registry of pseudo-classes

[07:04:40.0000] <annevk>
fantasai: HTML defines ":defined"

[07:04:54.0000] <annevk>
fantasai: pretty sure that's it

[07:05:20.0000] <annevk>
fantasai: https://html.spec.whatwg.org/multipage/semantics-other.html#pseudo-classes

[07:05:30.0000] <annevk>
fantasai: https://github.com/w3c/webcomponents/issues/665 is related

[07:05:33.0000] <fantasai>
I think we've mostly been trying to host the definitions inline in Selectors, with references out to other specs as needed to fully define the semantics.

[07:05:40.0000] <fantasai>
Web components has been an exception to that, though

[07:05:58.0000] <annevk>
fantasai: Fullscreen too

[07:06:09.0000] <annevk>
fantasai: Fullscreen even extends the CSS stacking context business...

[07:06:31.0000] <annevk>
fantasai: (note that I'd be happy for CSS to embrace and extinguish)

[07:06:49.0000] <fantasai>
Yeah, I vaguely remember discussions about where that stuff should live and there was some non-technical reason for it at the point the spec was written...

[07:07:26.0000] <annevk>
fantasai: maybe nobody has turned Appendix E of CSS 2 into something proper yet?

[07:07:34.0000] <fantasai>
indeed :)

[07:08:01.0000] <fantasai>
Tab and I have that on the to-do list for css-position, but we haven't taken over that spec yet so it's kindof in limbo afaict

[07:08:30.0000] <fantasai>
I'm trying to prep a new WD of Selectors, fwiw.

[07:08:43.0000] <Domenic>
annevk: can I get a re-approval on https://github.com/whatwg/whatwg.org/pull/158 ?

[07:08:46.0000] <Domenic>
It's preventing all builds

[07:10:09.0000] <annevk>
Domenic: sorry, I'm pretty sure I had approved that

[07:10:18.0000] <Domenic>
Yeah, somehow it disappeared.

[07:10:27.0000] <fantasai>
but need to sort through the churn on the sections that are/were referenced by or written for other specs.. which may or may not still exist

[07:10:30.0000] <fantasai>
~_

[07:10:31.0000] <annevk>
Domenic: maybe because I removed the comment? Weird

[07:10:46.0000] <annevk>
fantasai: good times

[07:11:11.0000] <annevk>
fantasai: if you want to create a pseudo-class registry somewhere (maybe in the spec) I can supply PRs now and then

[07:11:29.0000] <annevk>
fantasai: the current situation with sometimes CSS defining things and sometimes other specs is a bit messy

[07:11:36.0000] <fantasai>
yeah, definitely

[07:11:48.0000] <fantasai>
I'll look over the HTML/Fullscreen specs and see what's a good idea to do

[07:11:56.0000] <annevk>
cool cool

[07:31:24.0000] <annevk>
Domenic: do you want me to merge some? e.g. whatwg/url?

[07:31:34.0000] <annevk>
Domenic: also, \o/

[07:31:40.0000] <Domenic>
annevk: I can handle it. Only encoding is I guess stuck somehow.

[07:31:56.0000] <Domenic>
This also adds service workers to everything.

[07:32:05.0000] <annevk>
cool

[08:21:05.0000] <annevk>
Domenic: mobile requires version="1.1" in SVG?

[08:21:13.0000] <Domenic>
No, it was just inconsistent

[08:21:18.0000] <Domenic>
Should we remove them from everywhere?

[08:21:26.0000] <annevk>
Domenic: yes please 😃

[08:21:59.0000] <Domenic>
Done

[08:22:53.0000] <Domenic>
annevk: https://github.com/w3c/web-platform-tests/pull/6890 is still in progress right? Several of the tests that fail with my implementation were not changed.

[08:23:28.0000] <annevk>
Domenic: well I thought I fixed those that were wrong

[08:23:39.0000] <Domenic>
All 6 of them were wrong according to the spec

[08:23:39.0000] <annevk>
Domenic: since you didn't implement the base64 semantics of the spec

[08:23:43.0000] <Domenic>
I didn't?

[08:23:57.0000] <annevk>
Domenic: your comments suggested you didn't

[08:24:12.0000] <annevk>
Domenic: I also left some questions

[08:24:22.0000] <Domenic>
I don't see them...

[08:24:28.0000] <Domenic>
I commented on things I thought were spec bugs but you said they were not spec bugs

[08:24:31.0000] <Domenic>
So in that case they're test bugs

[08:24:34.0000] <Domenic>
Since I implemented the spec

[08:24:59.0000] <annevk>
Domenic: ah okay, I didn't look specifically at https://github.com/w3c/web-platform-tests/pull/6890#issuecomment-350530361

[08:25:13.0000] <annevk>
Domenic: I thought the next comment summarized but it touched on some other things and some same things

[08:25:24.0000] <annevk>
next two comments*

[08:25:31.0000] <Domenic>
The second comment after summarizes that

[08:25:44.0000] <Domenic>
It explains how the spec gets the result in each case

[08:25:53.0000] <Domenic>
(the result that mismatches the tests)

[08:26:12.0000] <annevk>
Domenic: thanks, I misread

[08:26:17.0000] <Domenic>
\o/

[08:26:30.0000] <annevk>
Domenic: maybe I can fix in an hour, otherwise tomorrow

[08:26:34.0000] <Domenic>
sg

[08:26:54.0000] <Domenic>
I am rather sick today, just trying to distract myself with something interesting -_-. Will turn to computer games soon, probably.

[08:27:41.0000] <annevk>
Domenic: good idea; Switch's been a lot of fun

[10:45:04.0000] <TabAtkins>
Say I was, theoretically, writing up a stage-0 proposal to add seeded random numbers to JS. I feel like the best interface is a Math.seededRandom(seed) generator function, which returns an iterator of random values. Any other reasonable options?

[10:45:37.0000] <TabAtkins>
I kinda want to steer away from just having Math.random({seed:0}) update some global seed - far too easy for two applications to clash and mess each other up.

[10:45:59.0000] <mel00010>
Why trust JS devs to properly seed their random numbers?

[10:46:31.0000] <TabAtkins>
I'm not - if you want normal good randomess, you use the normal random APIs. This is for when you specifically need a reproducible string of random numbers.

[10:46:47.0000] <TabAtkins>
(Without having to explicitly stash them somewhere, because the API I want them for is stateless.)

[10:47:44.0000] <TabAtkins>
Specifically, the https://lab.iamvdo.me/houdini/rough-boxes Houdini demo, which currently repaints the rough borders totally differently every time the callback is called.

[10:48:03.0000] <TabAtkins>
The only way around that today is to have them handroll a linear congruential generator or something, which is dumb.

[10:48:08.0000] <mel00010>
I'm just worried some idiot dev working for a bank ends up using Math.seededRandom(0)

[10:48:41.0000] <mel00010>
And decides to roll their own crypto

[10:49:05.0000] <mel00010>
Or generate user keys with it

[10:49:21.0000] <TabAtkins>
That's always a possibility.

[10:49:56.0000] <mel00010>
Its a lot harder to pull off if you have to implement your own seeded random algorithms

[10:49:57.0000] <TabAtkins>
Given that they have good options (both the bad crypto of Math.random() and the better crypto of the actual crypto API), I don't think it's very important to worry about misuse of an even worse crypto.

[10:50:07.0000] <annevk>
TabAtkins: what is wrong with https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues?

[10:50:39.0000] <TabAtkins>
@annevk What I just said - the Houdini APIs are stateless, so there's no place to stash that array.

[10:51:20.0000] <annevk>
TabAtkins: I guess I don't understand

[10:52:19.0000] <TabAtkins>
Anything that boils down to "pre-generate a list of random numbers, then re-use that list multiple times" isn't very good for the Houdini APIs. The invocations have very limited access to state data, and can't reasonably generate their own .

[10:52:44.0000] <TabAtkins>
Note that gRV() is *not* seeded in the way I mean, where the seed is controllable by the user.

[10:53:19.0000] <mel00010>
(Disclaimer:  Not a JS dev)  Could you just add a default parameter to Math.random like seeded=false and allow providing a seed that way?

[10:53:45.0000] <TabAtkins>
I addressed that up above - that means you'd be fiddling with some global random seed, which means that *two* users of seeded randomess will fight with each other.

[10:54:15.0000] <TabAtkins>
(And it's not clear that the global seed will actually work as intended with the Houdini APIs, where each invocation of the callback might happen in a different process with a fresh global.)

[10:54:42.0000] <mel00010>
I mean like this (in C++):  int getRandom(bool isSeeded=false, int seed=0)

[10:55:33.0000] <mel00010>
If isSeeded is false, in this case, it ignores the value of seed

[10:56:42.0000] <TabAtkins>
Hm, that might work. (well, JS doesn't need the extra bool, the presence of the seed argument will work fine) The assumption being that you feed your previous result in as the new seed for the next invocation?

[10:57:11.0000] <mel00010>
Yes

[10:57:13.0000] <TabAtkins>
Problem is - how is that better than the more convenient seededRandom() returning an iterator of random values starting from that seed?

[10:57:34.0000] <TabAtkins>
There's no new functionality or protection, just an API that requires slightly more manual intervention to pull multiple out.

[10:57:50.0000] <mel00010>
It doesn't call out to idiot developers saying "Abuse me" as strongly

[10:58:19.0000] <TabAtkins>
I don't see how that's possible. `Math.random({seed: 0})` vs `Math.seededRandom(0)` seem pretty equivalent in that regard.

[10:59:24.0000] <mel00010>
I guess maybe trying to save idiot devs from themselves in JS is somewhat of a fools errand

[11:00:01.0000] <mel00010>
Math.random({seed: 0}) might require them to read the docs?

[11:00:02.0000] <TabAtkins>
No, it's valid. I just don't see how one is better or worse than the other in this regard, and the second has better ergonomics.

[11:03:35.0000] <mel00010>
My C++ instincts tell me to just overload Math.random() but IDK what the JS idiomatic approach is.

[11:03:51.0000] <TabAtkins>
C++ instincts are very often wrong when designing idiomatic JS apis. ^_^

[11:04:08.0000] <TabAtkins>
(Those, and Java instincts, are the cause of most of the worst-designed JS APIs, imho.)

[11:05:06.0000] <mel00010>
I see 2 possible benefits to adding a new parameter to Math.random()

[11:05:31.0000] <mel00010>
1) No new API

[11:06:39.0000] <annevk>
Domenic: no disagreement on step 6/7 being terrible

[11:06:55.0000] <annevk>
Domenic: I've been wanting to refactor that, but there's so much tied up into a knot it's rather impossible

[11:07:03.0000] <mel00010>
2) Since getting a sequence of random values from a seed requires feeding the last value back into the function, it is more unlikely that someone who doesn't understand what the consequences are of fixed seeds will be able to successfully make their code work with the seed parameter.

[11:08:38.0000] <mel00010>
Also, is there a good way of generating seeds in JS?

[11:08:38.0000] <Domenic>
TabAtkins: a new method makes sense if the return type is different. And the iterator seems pretty reasonable, although perhaps too clever? Will think on it further.

[11:09:47.0000] <Domenic>
annevk: not sure if you saw my suggestion at https://github.com/whatwg/html/issues/3327, but that's a quick fix that would have saved me.

[11:10:32.0000] <annevk>
Domenic: some of that might be doable, but most of it is intertwined and not a good first bug

[11:10:38.0000] <annevk>
Domenic: iirc though

[11:11:11.0000] <Domenic>
I think you can just move stuff until after, there's really no reason why it's defined during step 5.

[11:11:32.0000] <annevk>
Because it references variables and such

[11:11:43.0000] <annevk>
Please do read it carefully before making changes 😃

[13:29:20.0000] <annevk>
Apple joined the AV1 group \o/, prolly too soon, but I’m excited

[13:30:29.0000] <wanderview>
annevk: what is the implication of that?

[13:31:36.0000] <annevk>
wanderview: that we might have royalty-free standardized video in the future

[14:19:34.0000] <foolip>
annevk: do you plan to rename more wpt directories to match spec shortnames? I would approve, especially for xhr.

[14:21:40.0000] <annevk>
foolip: it seems XHR is indeed broken now… Domenic?

[14:22:06.0000] <annevk>
foolip: I guess we can rename, but that one is more risky

[14:22:38.0000] <annevk>
foolip: and the renames are annoying due to git log not dealing with them well

[14:23:52.0000] <Domenic>
Oh, oops :(

[14:24:02.0000] <Domenic>
I say we just rename it?

[14:26:32.0000] <annevk>
Please grep as other stuff might depend on it

[14:27:12.0000] <annevk>
And there’s def incoming README refs

[14:27:53.0000] <annevk>
Anyways, nn all 😊💤

[14:51:09.0000] <aklein>
TabAtkins: #tc39 is a reasonable place to ask ES library design questions

[14:51:24.0000] <TabAtkins>
Yeah, I was getting feedback from a different population. ^_^

[14:53:30.0000] <aklein>
TabAtkins: understood. just saw your response about C++ and Java instincts though :)

[15:17:38.0000] <foolip>
annevk: https://github.com/w3c/web-platform-tests/pull/8937


2018-01-06
[03:19:08.0000] <annevk>
Domenic: the reduced boilerplate is amazing by the way

[03:19:16.0000] <annevk>
Domenic: storage.bs is really super clean now

[03:19:35.0000] <annevk>
Domenic: kinda hard to believe that's all it takes to setup a spec from now on

[03:19:51.0000] <annevk>
Domenic: (well, ignoring repository setup, which maybe some day we'll automate too)

[03:42:10.0000] <annevk>
whatwg/infra had another curl timeout...

[04:04:25.0000] <annevk>
We should write a blog post about the various infrastructure improvements

[04:04:57.0000] <annevk>
Less boilerplate, PR Preview for HTML (and everyone else), consolidated build process

[04:05:04.0000] <annevk>
Though I guess we want more build process changes

[04:17:40.0000] <annevk>
Oh, service workers is worth announcing too \o/

[09:21:15.0000] <Domenic>
It'd be ideal if we did HTML too, that's what's been holding me off from tweeting

[09:30:18.0000] <annevk>
Domenic: trickier due to multipage?

[09:43:50.0000] <Domenic>
I guess so. We just need to output a manifest of resources though.

[09:46:20.0000] <annevk>
Domenic: you on board with adding CONTRIBUTING.md everywhere?

[09:46:34.0000] <annevk>
Domenic: I'm happy to look into the HTML service worker next week

[09:46:35.0000] <Domenic>
annevk: not really, but it seems like it's already being done

[09:46:45.0000] <annevk>
Domenic: I haven't committed anything

[09:46:47.0000] <Domenic>
(and I don't care that much)

[09:47:00.0000] <Domenic>
Well I guess it just doesn't feel like it adds much over the readme

[09:47:13.0000] <annevk>
Domenic: the main thing is that it pops up when creating a PR

[09:47:23.0000] <annevk>
iirc

[09:47:51.0000] <Domenic>
Yeah, I think most people ignore that, based on how few read it in jsdom

[09:48:11.0000] <Domenic>
I guess it's OK though

[09:48:33.0000] <annevk>
Okay, let's try it for a bit then, it's just a one liner

[09:51:18.0000] <annevk>
Hmm, why is https://encoding.spec.whatwg.org/windows-1252.txt a 404?

[09:51:31.0000] <annevk>
foolip: ^^

[09:51:43.0000] <Domenic>
index-, right?

[09:51:51.0000] <Domenic>
https://encoding.spec.whatwg.org/index-windows-1252.txt

[09:52:18.0000] <annevk>
Oh, strange autocomplete then

[09:52:25.0000] <annevk>
Thanks

[09:52:34.0000] <annevk>
Domenic: does the service worker handle those files?

[09:52:48.0000] <Domenic>
I just discovered it does not: https://github.com/whatwg/whatwg.org/issues/163

[09:53:07.0000] <Domenic>
Also it does not handle any of the dependent resources either: https://github.com/whatwg/misc-server/issues/68

[09:53:11.0000] <Domenic>
So, definitely still WIP :)

[10:28:44.0000] <annevk>
Domenic: the readme also currently doesn't refer to CONTRIBUTING.md in any way, that we could change somehow though

[12:28:05.0000] <foolip>
annevk: how did you find that URL, should it be redirected?

[12:33:38.0000] <annevk>
foolip: nah, think it’s a false alarm

[12:35:05.0000] <zcorpan>
Maybe you mistakenly typed it manually at some point and it gut stuck in your history?

[12:39:12.0000] <annevk>
I suspect so


2018-01-08
[19:02:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! pbpkh: lilmonkey timdream hsivonen ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zzwmm: ato trevnorris timdream ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:42.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! diutuq: Fusl igrigorik yoichio ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:42.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! exujoctz: dboehmer gwicke #whatwg ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! dnobt: #whatwg seventh Hasimir ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kultyqglqx: wycats kochi dpk ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:52.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xnwqabqp: beowulf annevk plutoniix ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:52.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! azljawxjbq: hsivonen Fusl dmurph ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! nelxv: abarth daurnimator dmurph ▄▄▄▄▄▄▄▄▄▄▄▄

[19:02:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! uyltsj: timdream karatkievich.freenode.net KiChjang ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! avgqwmxx: plutoniix ato zama ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hnvdxrxugt: justJanne XhmikosR yoav_ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:07.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xxroajstjj: hfaafb not-an-aardvark trevnorris ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:07.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! wjfrj: LEI Fusl hsivonen ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:10.0000] <KiChjang>
bruh i was just chilling

[19:03:12.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ybgup: justJanne XhmikosR calvaris ▄▄▄▄▄▄▄▄▄▄

[19:03:12.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ayeqpmlj: yoav_ abarth XhmikosR ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:15.0000] <KiChjang>
don't just ping me out of the blue

[19:03:17.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! cepcayxdfc: justJanne felixsanz wcpan ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:17.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ehxcz: SimonSapin zama ecobos ▄▄▄▄▄▄▄▄▄▄▄

[19:03:22.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kfnnbdr: XhmikosR hfaafb GPHemsley ▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:22.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tubtsa: trevnorris calvaris KiChjang ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:27.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! seozzknc: webguynow dpk felixsanz ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:27.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! biudo: yutak GPHemsley zama ▄▄▄▄▄▄▄▄▄▄

[19:03:32.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zulhuaz: majidvp bzed Hasimir ▄▄▄▄▄▄▄▄▄▄

[19:03:32.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zhfrdh: eric_carlson XhmikosR abarth ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! timrdyxuwt: dveditz ecobos KiChjang ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! quypw: wycats seventh gwicke ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! gbsbg: hfaafb trevnorris Hasimir ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zsvbdbtma: yoav_ seventh jgraham ▄▄▄▄▄▄▄▄▄▄▄

[19:03:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! mvbzbt: zama yoav_ #whatwg ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! jdmbtniz: abarth hsivonen jgraham ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:52.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ewhabsyejw: Fusl annevk Hasimir ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:52.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! byeeetovw: hayato webguynow calvaris ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:57.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! dhhct: dmurph ebryn 353 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:03:57.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! nebahbm: yutak yoav_ lilmonkey ▄▄▄▄▄▄▄▄▄▄▄

[19:04:00.0000] <justJanne>
Oh yay :/

[19:04:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ehnbnj: junktext_ abarth timdream ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! wktlzsfqg: Fusl yoichio gsnedders ▄▄▄▄▄▄▄▄▄▄▄

[19:04:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hwjzexba: othermaciej igrigorik jgraham ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! dmnojlqpyy: gwicke slightlyoff yutak ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:12.0000] <KiChjang>
justJanne, yeah, i got pinged out of the blue because of this

[19:04:12.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rbjucffytq: #whatwg trevnorris yoav_ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:12.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lorrouu: wcpan KiChjang hsivonen ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! bkjdfayc: abarth justJanne jgraham ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hjamt: plutoniix hayato gsnedders ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:22.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! cgkqzatmp: annevk SimonSapin justJanne ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:22.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! aeisdqupcr: wycats pandem1 yoav_ ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:27.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lndjc: justJanne gwicke GPHemsley ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:27.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! cmhgp: lilmonkey Fusl zama ▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xvxiavlg: ebryn majidvp yoichio ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! mqgikktuko: karatkievich.freenode.net eric_carlson ato ▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! llyihgdda: bzed timdream logicmoo ▄▄▄▄▄▄▄▄▄▄▄

[19:04:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! yuyhkcxppf: pandem1 not-an-aardvark farre ▄▄▄▄▄▄▄▄▄▄▄

[19:04:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! pjufclic: pandem1 slightlyoff 353 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! oewjc: farre blassey othermaciej ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! wqwjnpa: dboehmer yutak XhmikosR ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! aeseantt: LEI dveditz Fusl ▄▄▄▄▄▄▄▄▄▄▄

[19:04:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! bphpufmm: timdream zama musgravejw ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! viavxaxeb: Hasimir justJanne dpk ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! qtlijjm: yoichio yoav_ wycats ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:04:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! wetffv: timdream wycats ecobos ▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! edvsay: KiChjang = SimonSapin ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xptufjc: yoichio 353 ato ▄▄▄▄▄▄▄▄▄▄▄

[19:05:07.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tmpqkxac: LEI igrigorik hfaafb ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ieweovtp: not-an-aardvark musgravejw igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! oxbmrlsw: dveditz ecobos yoav_ ▄▄▄▄▄▄▄▄▄▄

[19:05:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! eexeweuy: abarth majidvp Fusl ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:16.0000] <justJanne>
KiChjang: same here, except it's 4am, I have the phone on loud to ping me in case it's something important

[19:05:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kkudbt: dpk hfaafb LEI ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ypohotsiw: KiChjang othermaciej XhmikosR ▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lzkwcdrsw: timeless calvaris not-an-aardvark ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! gfmvnnnjbm: justJanne slightlyoff dmurph ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:27.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ukuvp: gwicke webguynow pandem1 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:27.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! iwambu: 353 #whatwg dpk ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:32.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tijjubyf: yoav_ jgraham 353 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:32.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zqjabusvit: ebryn othermaciej plutoniix ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ypprmqy: Fusl yoav_ #whatwg ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:37.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rywcbrm: eric_carlson wcpan ebryn ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zzlqnuznpk: bzed wycats justJanne ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! glgkn: XhmikosR igrigorik yoav_ ▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! msgfuwd: slightlyoff not-an-aardvark yoav_ ▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hvykml: ecobos annevk logicmoo ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ftohalqs: KiChjang hayato ecobos ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hsoeiosvi: yutak farre dveditz ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:05:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! awwyd: not-an-aardvark timeless SimonSapin ▄▄▄▄▄▄▄▄▄▄▄

[19:05:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! daoptwnavy: othermaciej gsnedders hsivonen ▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! iiirtjq: seventh farre jgraham ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! iuceydad: daurnimator wcpan hfaafb ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:07.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ieoybboe: Hasimir trevnorris hayato ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zniwwtq: pandem1 gsnedders blassey ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xchvwpojdh: ecobos blassey webguynow ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! pwunl: yutak ebryn logicmoo ▄▄▄▄▄▄▄▄▄▄

[19:06:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! pkjib: logicmoo dpk dveditz ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lgdyx: KiChjang igrigorik Hasimir ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:22.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xivaq: abarth othermaciej = ▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zgosrkl: pandem1 webguynow beowulf ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rddup: Hasimir justJanne yoichio ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xtaiqaulq: zama KiChjang 353 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:32.0000] <KiChjang>
oh right, i can just /ignore

[19:06:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! yrwwbyjda: junktext_ Hasimir ecobos ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kqueevi: beowulf ato #whatwg ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:36.0000] <KiChjang>
done

[19:06:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zrjyvmfzzi: webguynow wcpan hfaafb ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! udjnrifewv: lilmonkey yoav_ trevnorris ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:42.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rfllbcffba: ebryn dveditz yutak ▄▄▄▄▄▄▄▄▄▄▄

[19:06:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! yztykknfyi: gsnedders logicmoo Fusl ▄▄▄▄▄▄▄▄▄▄

[19:06:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! dyxutyzwf: slightlyoff seventh GPHemsley ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! pifnabz: GPHemsley abarth = ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:52.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! foqrr: beowulf abarth hsivonen ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:52.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tudrcgkr: = calvaris gwicke ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:06:57.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! dblyalbsom: dpk eric_carlson othermaciej ▄▄▄▄▄▄▄▄▄▄

[19:06:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xjctbujuy: wcpan lilmonkey = ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄,

[19:07:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! sknnah: majidvp yutak igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:02.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hbggmcpede: annevk wycats daurnimator ▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! walkevvfq: ecobos dboehmer zama ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! skpokz: hayato ato yoav_ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rxdhbzhv: ecobos webguynow gwicke ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! evvru: zama ebryn igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ybkedvh: ebryn Hasimir Fusl ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ywkvuhfn: dpk kochi junktext_ ▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:20.0000] <justJanne>
Yeah my mobile client doesn't have that featire right now, because I wrote too many bugs in it. Sadly

[19:07:22.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!!  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ieqssztfz: hsivonen gsnedders lilmonkey ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! iinkqlnpzv: blassey yutak hsivonen ▄▄▄▄▄▄▄▄▄▄

[19:07:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!!  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! bkyeyn: majidvp dboehmer abarth ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! waeknzlr: kochi hayato majidvp ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ozdzxipys: junktext_ kochi wcpan ▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! pzgzu: ecobos junktext_ dmurph ▄▄▄▄▄▄▄▄▄▄

[19:07:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lufttfayrg: farre yoav_ = ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! asndgs: hsivonen gwicke kochi ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! svouyrcnk: ecobos GPHemsley lilmonkey ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tsljehjlpr: ebryn eric_carlson felixsanz ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:47.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kajdcppc: blassey karatkievich.freenode.net webguynow ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! bbwkcvsce: LEI farre dmurph ▄▄▄▄▄▄▄▄▄▄▄

[19:07:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! mqfcxhvz: XhmikosR hfaafb felixsanz ▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! sfkyp: dpk musgravejw webguynow ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! okccqzi: abarth dpk GPHemsley ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:07:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! numqmqv: webguynow trevnorris justJanne ▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! uhwzrmn: yutak eric_carlson #whatwg ▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! urtmo: dboehmer KiChjang wycats ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ckeplzy: timeless junktext_ wycats ▄▄▄▄▄▄▄▄▄▄▄

[19:08:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! afclqmcm: calvaris hayato timeless ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄��

[19:08:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! nbkaucuzrz: #whatwg calvaris igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ubxzsxigzd: pandem1 lilmonkey yutak ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lkmhnw: karatkievich.freenode.net kochi bzed ▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lflbo: trevnorris othermaciej beowulf ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! umdwu: yutak Hasimir timeless ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! bqkcqvgjfr: justJanne = igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! oeerohuwn: eric_carlson webguynow gsnedders ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! qidsxjy: pandem1 hsivonen musgravejw ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! cehxgmljl: seventh gsnedders timeless ▄▄▄▄▄▄▄▄▄▄

[19:08:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! oqvnuse: junktext_ dmurph felixsanz ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! vfhenxx: lilmonkey junktext_ dboehmer ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zhbavuilz: LEI igrigorik not-an-aardvark ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hlqcpmbnwk: timeless kochi calvaris ▄▄▄▄▄▄▄▄▄▄

[19:08:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! utjphhcsc: GPHemsley KiChjang abarth ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ntlxuzevjl: gwicke abarth plutoniix ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! jgiabfg: gwicke XhmikosR kochi ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! nrzal: LEI abarth jgraham ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:08:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rnaximavq: othermaciej jgraham dmurph ▄▄▄▄▄▄▄▄▄▄

[19:08:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! temsitogl: lilmonkey kochi ecobos ▄▄▄▄▄▄▄▄▄▄

[19:08:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hgsjw: karatkievich.freenode.net jgraham dveditz ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! iolxwphbj: justJanne Hasimir jgraham ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lvdcwxis: hsivonen timdream gwicke ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! djefq: abarth ebryn SimonSapin ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! mbppy: KiChjang annevk XhmikosR ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! mugclsy: KiChjang GPHemsley hayato ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! oiuixpov: gwicke igrigorik blassey ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! cnwfopa: gwicke not-an-aardvark trevnorris ▄▄▄▄▄▄▄▄▄▄

[19:09:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! xkwnnrjkol: musgravejw yoav_ beowulf ▄▄▄▄▄▄▄▄▄▄▄

[19:09:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! oxlnsziyj: bzed XhmikosR ebryn ▄▄▄▄▄▄▄▄▄▄

[19:09:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! elbcvhrww: karatkievich.freenode.net jgraham ebryn ▄▄▄▄▄▄▄▄▄▄▄

[19:09:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kfnpveduk: not-an-aardvark Hasimir timeless ▄▄▄▄▄▄▄▄▄▄

[19:09:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! vlzfruz: farre trevnorris XhmikosR ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! juvqsmb: blassey ebryn bzed ▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! iihrfjv: daurnimator trevnorris = ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! uyyrbr: dveditz igrigorik LEI ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rivmerr: yoav_ seventh calvaris ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zpmugvss: XhmikosR wcpan farre ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! kgsdf: 353 trevnorris dmurph ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! logiu: #whatwg wcpan igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! wemdihnje: dveditz yoichio calvaris ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! sqlcfd: hayato wycats calvaris ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:53.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! rklqirsd: annevk beowulf XhmikosR ▄▄▄▄▄▄▄▄▄▄

[19:09:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tcdaivdsll: farre dveditz hayato ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:09:58.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! winwi: majidvp pandem1 hsivonen ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! tnhtesvx: = pandem1 majidvp ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:03.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lurelmvby: daurnimator pandem1 trevnorris ▄▄▄▄▄▄▄▄▄▄▄

[19:10:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! idghvblf: pandem1 slightlyoff yoichio ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:08.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! hmgrqwm: hsivonen not-an-aardvark yutak ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! ofvsdr: beowulf kochi musgravejw ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:13.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! cfbnirsxr: kochi zama jgraham ▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! irxzmas: 353 daurnimator farre ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:18.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! sbdtqkkbgh: junktext_ timeless #whatwg ▄▄▄▄▄▄▄▄▄▄▄

[19:10:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! gsprgjr: kochi blassey 353 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:23.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! izjgactnsq: #whatwg justJanne lilmonkey ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! svlym: = karatkievich.freenode.net felixsanz ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:28.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! lhsap: gsnedders Fusl lilmonkey ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! yhvoscglu: yutak gwicke lilmonkey ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:33.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! uxhbnxkhx: daurnimator dboehmer hayato ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! bzoeckyyy: jgraham dpk GPHemsley ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:38.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! obhlicg: logicmoo othermaciej wycats ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! zmjja: hsivonen calvaris yutak ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[19:10:43.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! avlnunyt: yoichio ecobos musgravejw ▄▄▄▄▄▄▄▄▄▄

[19:10:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! gqngwnmpla: timeless hayato seventh ▄▄▄▄▄▄▄▄▄▄▄

[19:10:48.0000] <imbmp>
▄▄▄▄▄▄▄▄▄▄ EL YOU SEEM BORED GIRL WITH YOUR RANDOM KLINES IN #FREEDOM HERE IS SOME WORK BABY!! fwhvbtq: daurnimator not-an-aardvark timeless ▄▄▄▄▄▄▄▄▄▄▄▄

[23:39:22.0000] <annevk>
Sigh. I wonder if there is some kind of way to block this early on

[23:50:45.0000] <KiChjang>
annevk, i think the only answer is to have an op watching this channel

[23:54:27.0000] <TimothyGu>
weird thing is that the bots are coming out of everywhere, this one from Bangkok per whois

[23:55:36.0000] <annevk>
KiChjang: can you watch and then make yourself an op when needed?

[23:55:56.0000] <KiChjang>
i think that's what Domenic did

[23:56:07.0000] <annevk>
KiChjang: Freenode suggested policy is to not have ops

[23:56:33.0000] <KiChjang>
honestly i still didn't know how Domenic suddenly have op powers

[23:57:14.0000] <annevk>
KiChjang: the channel has a couple folks empowered to be moderators, Domenic among them

[23:57:32.0000] <annevk>
KiChjang: there's some command you can use to list them

[23:57:41.0000] <annevk>
KiChjang: but I'm really not good at this, despite being on that list

[23:57:48.0000] <annevk>
/me has to look at the manual each time

[23:57:51.0000] <TimothyGu>
ChanServ usually has the info

[23:58:06.0000] <TimothyGu>
but the info is not exposed to mere users

[23:58:20.0000] <TimothyGu>
only to op/voice

[23:58:29.0000] <TimothyGu>
I think

[00:00:06.0000] <TimothyGu>
or actually here: /msg ChanServ access #whatwg list

[01:19:59.0000] <dpk>
TimothyGu: yeah they probably run from a botnet

[02:02:01.0000] <Ms2ger>
annevk, if you're around, https://github.com/w3c/web-platform-tests/pull/8948 should only take a minute

[02:10:29.0000] <annevk>
Ms2ger: done

[02:10:34.0000] <Ms2ger>
Thanks!

[03:21:01.0000] <IZh>
Domenic: Hi! So is your transition to new hosting complete? I mean are you still using my hosting for PDF generation or I can shut it down?

[03:25:35.0000] <annevk>
IZh: I think we stopped using that since https://github.com/whatwg/html-build/commit/32a8ef02d97d229d78690f111c49405d498aeeb7

[03:26:02.0000] <annevk>
IZh: we don't have PDFs for the other standards at the moment and Domenic at least wasn't a fan of adding them unless someone asked

[03:26:18.0000] <IZh>
annevk: Nobody told me. ;-)

[03:26:59.0000] <annevk>
IZh: ah, I thought you knew we only used it for HTML

[03:27:04.0000] <annevk>
IZh: sorry

[03:27:40.0000] <IZh>
annevk: I mean nobody told me that you've stopped using my hosting. :-) I knew it was only for HTML (although didn't know for what reason).

[03:28:06.0000] <annevk>
IZh: oh, but you were part of that PR

[03:28:53.0000] <IZh>
annevk: I don't know how your machinery works. :-) And whether that PR was enough to switch to use your instance, or some other things should be done too.

[03:29:37.0000] <annevk>
IZh: fair enough, I see that it indeed wasn't entirely clear we'd stop pinging your domain

[07:16:34.0000] <annevk>
Did WebKit disable SAB? Did not see anything about that thus far

[07:18:29.0000] <wanderview>
annevk: I saw a bug linked on their mailing list...

[07:18:48.0000] <wanderview>
annevk: https://bugs.webkit.org/show_bug.cgi?id=181266

[07:19:02.0000] <wanderview>
who knows what release or patch that will be in, though

[07:19:19.0000] <annevk>
wanderview: ta

[07:19:43.0000] <wanderview>
annevk: they changed performance.now() much earlier... https://bugs.webkit.org/show_bug.cgi?id=165503

[07:20:08.0000] <annevk>
wanderview: I wonder how they will enable it while wanting to limit timer accuracy to 100ms

[07:20:24.0000] <annevk>
Euh ns presumably

[07:22:14.0000] <wanderview>
annevk: I guess that depends on its SAB+workers is fixed in general...

[07:22:28.0000] <wanderview>
^its^how

[07:22:34.0000] <annevk>
wanderview: I think you can go ahead if JakeA is not able to reply btw

[07:22:44.0000] <wanderview>
annevk: he did reply!

[07:22:56.0000] <annevk>
wanderview: would be nice if, but we already have 3/4 on board

[07:23:01.0000] <annevk>
wanderview: oh!

[07:23:13.0000] <wanderview>
annevk: I was pretty confident since rejecting was his idea from the start, I think

[07:23:19.0000] <wanderview>
or his preference at the f2f anyway

[07:23:26.0000] <annevk>
My email is slow

[07:24:12.0000] <JakeA>
doh, this tab hadn't come back to life following a restart

[07:24:29.0000] <wanderview>
thanks for the quick reply

[07:29:39.0000] <JakeA>
no probs

[07:31:41.0000] <wanderview>
JakeA: have to be honest, it feels good to finally be shipping a fix to this problem we started talking about years ago

[07:31:51.0000] <wanderview>
exposing the Response.url I mean

[07:31:58.0000] <JakeA>
Agreed!

[10:27:25.0000] <Domenic>
IZh: sorry for not telling you! I think we didn't want you to shut down immediately in case something went wrong and we had to revert back to your service, but after things worked for a couple weeks, we forgot to actually tell you that they were now going OK.

[10:50:32.0000] <IZh>
Domenic: Ok. I didn't remove it, but only changed permissions on a script. So if there would be a need, I could easily enable it.

[11:12:56.0000] <Krinkle>
I'm trying to find in the whatwg/dom spec where it says that returning false from an event listener cancels propagation and default.

[11:13:26.0000] <Krinkle>
If I understand correctly, the calling of the callback happens at https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke

[11:13:35.0000] <Krinkle>
but it doesn't seem to use the return value in any way there

[11:16:19.0000] <Krinkle>
annevk: ^

[11:17:07.0000] <smaug____>
do some browsers supports modules in workers?

[11:17:38.0000] <wanderview>
smaug____: I believe its been spec'd, but I don't think anyone has implemented it yet

[11:17:52.0000] <smaug____>
it is spec'ed yes

[11:18:10.0000] <smaug____>
wanderview: I'm just wondering whether it is ok to ship modules in main thread first

[11:18:13.0000] <smaug____>
and I guess it is

[11:19:22.0000] <wanderview>
yea, I think that is what all other browsers have done

[11:22:01.0000] <Domenic>
smaug____: wanderview: the Chrome bug for module workers is quite active, so I'm optimistic. https://bugs.chromium.org/p/chromium/issues/detail?id=680046

[11:31:10.0000] <annevk>
Krinkle: that only happens for event handlers I believe and is defined in HTML

[11:32:33.0000] <TimothyGu>
Krinkle: here: https://html.spec.whatwg.org/multipage/webappapis.html#the-event-handler-processing-algorithm step 4-5

[11:48:00.0000] <Krinkle>
annevk: TimothyGu: Thanks, good to know!

[13:48:20.0000] <ato>
Is it allowed to express ones dislike for the new website?

[13:58:52.0000] <TabAtkins>
@ato No, only fawning love is allowed here. ^_^

[13:59:25.0000] <TabAtkins>
On that note, I still really wish the HTML link would go to the multipage first (or at least have a multipage link alongside the single-page version).

[14:00:48.0000] <a-ja>
TabAtkins, you call that fawning love?

[14:03:11.0000] <a-ja>
/me agrees with your note

[14:32:28.0000] <Domenic>
Oh, hmm, it should go to multipage

[14:32:30.0000] <Domenic>
I thought it did

[14:32:31.0000] <Domenic>
Easy to fix


2018-01-09
[16:18:01.0000] <bradleymeck>
i'm trying to figure out why `scripts/c.js` is aborted and permanently put into error state on https://codepen.io/bradleymeck/project/editor/Xpjrgz , reading spec I'm not sure why it would do so

[16:44:50.0000] <Domenic>
botie: tell bradleymeck that's not quite what's happening, what's happening is you're trying to import the non-existent file "scripts/c" instead of "scripts/c.js"

[16:44:50.0000] <botie>
will do

[16:52:48.0000] <Domenic>
annevk: https://github.com/whatwg/html/pull/3303 when you have time

[17:00:32.0000] <Domenic>
OK, time to start putting @whatbot into action... Becomes mandatory Thursday

[18:11:36.0000] <xialvjun>
I don't know if I can issue an idea.

[18:15:51.0000] <xialvjun>
When the people open the browser at first time, the browser will ask people 'create or import a private key'. Then websites will call a js function to use this private key and it's own things(like origin or some static string) to generate a hash string which can be used as an user_id.

[18:17:21.0000] <xialvjun>
Thus, the login and register flow may be left out in many websites.

[18:18:46.0000] <xialvjun>
If a website need a more strict login flow, it can use it's own login flow like login twice(receiveing a sms verify code).

[18:33:52.0000] <botie>
bradleymeck, at 2018-01-09 00:44 UTC, Domenic said: that's not quite what's happening, what's happening is you're trying to import the non-existent file "scripts/c" instead of "scripts/c.js"

[18:34:37.0000] <bradleymeck>
Domenic: doh, ty

[18:36:00.0000] <bradleymeck>
I think it is interesting that the `import()` works when `export {then}` has `then` in a TDZ.

[18:36:18.0000] <bradleymeck>
was trying to test out various ways to enforce a TDZ of sorts for `import()`

[00:29:05.0000] <annevk>
JakeA: could you take a look at https://github.com/whatwg/whatwg.org/pull/154#issuecomment-356141386?

[00:29:13.0000] <annevk>
JakeA: I remember seeing you tweet about vertically aligning stuff

[00:29:21.0000] <annevk>
JakeA: it's apparently still hard

[00:29:54.0000] <JakeA>
annevk: shall do

[00:37:46.0000] <annevk>
<3


2018-01-10
[18:55:24.0000] <xialvjun>
Can I issue a proposal? When the people open the browser at first time, the browser will ask people 'create or import a private key'. Then websites will call a js function to use this private key and it's own things(like origin or some static string) to generate a hash string which can be used as an user_id. Thus, the login and register flow may be left out in many websites. If a website need a more strict login flow, it can use it's own login flow

[18:55:24.0000] <xialvjun>
like login twice(receiveing a sms verify code).

[00:13:27.0000] <smaug____>
kochi: do you know some Shadow DOM (v1) heavy websites?

[00:16:40.0000] <kochi>
ideally any Polymer 2+ web sites should turn on native shadow DOM...

[00:18:24.0000] <smaug____>
kochi: but Youtube is still using the old Polymer, I think

[00:18:33.0000] <kochi>
Google's santa tracker, chromestatus.com, etc.?

[00:18:44.0000] <smaug____>
/me wonders if there are big non-Google polymer sites

[00:18:54.0000] <kochi>
yeah, YouTube and Google Earth use old Polymer

[00:19:19.0000] <kochi>
I'm not sure commercial adopters like ING or EA uses which version of Polymer

[00:20:22.0000] <kochi>
https://twitter.com/AJStacy06/status/857628546507968512

[00:22:49.0000] <kochi>
giving "?dom=shadow" forces Polymer to use native shadow dom instead of polyfilled one, just FYI

[00:23:30.0000] <kochi>
e.g. https://gaming.youtube.com/ and https://gaming.youtube.com/?dom=shadow

[00:25:12.0000] <kochi>
EA (for me, it redirects the top page to https://www.ea.com/ja-jp ) seems to use native shadow DOM on Chrome.

[14:29:35.0000] <domfarolino>
Domenic: Would a <script> tag attribute be a viable approach to function tostring censorship, or is that a bit reckless? I noticed this option didn't make an appearance under https://github.com/domenic/proposal-function-prototype-tostring-censorship#an-external-to-javascript-switch & was slightly curious about it.

[14:31:33.0000] <domfarolino>
And I assume for module scripts, this would mean any other script loaded via the module would fall under the same censorship defined by the attribute on the top-level script

[14:38:59.0000] <bradleymeck>
domfarolino: if there are 2 competing graphs 1 with the flag and one w/o it that might get weird

[14:42:22.0000] <domfarolino>
bradleymeck: wouldn't the HTTP-header idea suffer the same sort of thing? If a module script is served with `Script-ToString: Off`, which loads other scripts not served with this header I feel the same competition ensues

[14:43:22.0000] <bradleymeck>
domfarolino: how? each individual resource would declare its own mode with that

[14:43:38.0000] <bradleymeck>
you couldn't have a collision since the fetch of the resource would only ever have 1 result

[14:45:02.0000] <Domenic>
domfarolino: seems plausible, indeed with potential interactions, but yeah

[14:46:03.0000] <bradleymeck>
Domenic: i know in the past that vms were using source text to regenerate IR, I'm guessing thats no longer the case?

[14:48:41.0000] <Domenic>
bradleymeck: nah, aklein pointed that out, so yeah it wouldn't allow immediate memory savings in all architectures for all functions

[14:51:57.0000] <aklein>
bradleymeck: v8 no longer re-generates from source, but we do keep source around for functions that have not yet been compiled to bytecode (either because they weren't called, or because no other heuristic caused compilation)

[14:52:07.0000] <aklein>
I expect other engines are similar

[14:52:46.0000] <bradleymeck>
as long as we can keep the fn position offsets for heap snapshots ;p

[15:36:42.0000] <domfarolino>
bradleymeck: (no longer here): Ok yeah that makes sense.

[15:37:26.0000] <domfarolino>
Domenic: potential interactions, as in touching multiple things? HTML would definitely need touched

[15:37:55.0000] <Domenic>
domfarolino: I meant among modules in multiple graphs, as bradleymeck says.


2018-01-11
[16:14:55.0000] <domfarolino>
Domenic: Ah yes, agreed. Not sure what the best way to handle that would be unless the default was to censor ALL scripts from a module graph. Might be a bit much though

[16:15:27.0000] <domfarolino>
Why does c.whatwg.org redirect to the HTML spec? Just curious

[16:27:09.0000] <Domenic>
hysterial raisins

[16:27:15.0000] <Domenic>
(historical reasons)

[16:27:33.0000] <Domenic>
I'm not sure what they were, exactly...

[16:40:20.0000] <domfarolino>
👍

[16:52:40.0000] <gsnedders>
Domenic: there were redirects to all specs at whatwg.org/[xxx] added at [xxx].whatwg.org, and there were a bunch of short URLs for specific versions of HTML

[16:52:43.0000] <gsnedders>
IIRC

[21:32:55.0000] <annevk>
Only HTML ever got subdomain redirects

[03:06:58.0000] <MikeSmith>
https://lists.mozilla.org/pipermail/dev-platform/2018-January/021028.html 🎉

[03:07:14.0000] <MikeSmith>
> JS module scripts (<script type="module">) have been enabled in nightly builds.

[03:10:49.0000] <ondras>
nice!

[05:57:50.0000] <tobie>
Can anyone enlighten me on what the purpose of the first paragraph of https://heycam.github.io/webidl/#es-operations is?

[06:01:46.0000] <annevk>
Domenic: whatbot looking good

[06:06:19.0000] <tobie>
TimothyGu: re: https://github.com/heycam/webidl/pull/494#discussion_r160318258, does that mean that the way operations are defined on namespaces is also slightly incorrect  (https://heycam.github.io/webidl/#namespace-object) ?

[09:37:46.0000] <annevk>
tobie: that first paragraph makes sense until "unless"

[09:37:49.0000] <annevk>
(to me)

[09:38:29.0000] <annevk>
tobie: there must at least be a typo of sorts there

[09:39:36.0000] <tobie>
annevk: heh, yeah, I could have been more precise.

[09:39:49.0000] <tobie>
annevk: that's precisely the part I wanted help understanding.

[09:40:24.0000] <tobie>
annevk: but you knew that already. :D

[09:41:08.0000] <annevk>
tobie: in particular the double "and" makes that hard to parse

[09:42:36.0000] <tobie>
annevk: beyond the specifics, I don't understand what it's trying to do

[09:43:06.0000] <tobie>
Like what's the purpose of this? What is it trying to guard against.

[09:43:24.0000] <annevk>
tobie: I guess file an issue, ping heycam?

[09:43:50.0000] <annevk>
Domenic: thoughts on "topic: document lifecycle" label?

[09:43:50.0000] <tobie>
will do

[09:44:10.0000] <Domenic>
annevk: if you have lots of issues to tag with it, seems reasonable.

[09:44:27.0000] <annevk>
Domenic: has lots of overlap with navigation issues, but it's a big problem

[09:44:58.0000] <annevk>
Domenic: I often end up tagging them with navigation today

[11:11:40.0000] <domfarolino>
Domenic: BS spec says common conjugations are supported by default when linking to dfns, so is `lt=...` *only* necessary when you're using something that doesn't autolink, or is it just always recommended

[11:12:49.0000] <domfarolino>
context: `<a>navigating</a>` autolinks to HTML navigate algorithm, is `lt=navigate` just to make it future-proof in case `navigating` where to be later defined?

[11:13:49.0000] <tobie>
domfarolino: it depends what you want exposed in the exported terms index, really.

[11:14:20.0000] <tobie>
domfarolino: (at least, that's how I reason about it)

[11:22:03.0000] <domfarolino>
tobie: Hm i'm not sure I understand. Is there a reason to use <a lt=navigate>navigating</a> over <a>navigating</a> if they both link correctly? Just a preference?

[11:22:43.0000] <tobie>
domfarolino: oh, I assumed you meant in the DFN itself. Apologies.

[11:23:07.0000] <tobie>
domfarolino: no reason that I know of otherwise.

[11:25:01.0000] <domfarolino>
tobie: Ok I was wondering if that'

[11:25:31.0000] <domfarolino>
that's what you thoght I meant. My bad! Ok that's what I assumed, though I do like the lt just for clarity I think. Thanks!

[11:43:58.0000] <Domenic>
domfarolino: <a>navigating</a> seems nicer to me

[11:48:48.0000] <domfarolino>
Domenic: ok I saw in your review on my fetch PR you included ‘lt’ and I was wondering if it was necessary since linked correctly for me w/o

[11:49:47.0000] <Domenic>
Ah OK, I goofed I guess

[11:52:55.0000] <Domenic>
Nice https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fwhatwg.org%2F

[12:29:43.0000] <annevk>
Encoding defines encoding and encode

[12:30:14.0000] <annevk>
That is the main case I know about that complicates this general rule

[12:31:53.0000] <domfarolino>
No worries I just wanted to make sure I understood :)

[14:06:36.0000] <domfarolino>
Domenic: I'll get on writing tests for that latest Console PR. Will open some browser bugs too (hm, wondering if this should have been done earlier)

[14:16:08.0000] <TabAtkins>
@domfarolino Bikeshed will conjugate to and from the base form, but it does *not* do "two-step" conjugations - if your dfn is "fooed", it won't autolink "fooing" to it. But if you do `<dfn lt=foo>fooed</dfn>`, then `<a>fooing</a>` will work just fine.

[14:17:45.0000] <TabAtkins>
The only reason to conjugate yourself in an <a> is if the conjugated work is not the last term in the definition - like if you have `<dfn>foo a bar</dfn>`, `<a>fooing a bar</a>` does *not* automatically work. You have to do `<a lt="foo a bar">fooing a bar</a>` (or with the shorthand, `[=foo a bar|fooing a bar=]`).

[14:22:23.0000] <TabAtkins>
(Or, of course, manually provide some conjugations in the `<dfn lt>` for convenience.)

[15:40:52.0000] <Mek>
hmm, what guarantees does "in parallel" in specs really give... i.e. if two different algorithms are run, one after the other, and both do some work "in parallel" at some point, is anything guaranteed with the ordering between the two in parallel blocks?

[15:41:28.0000] <Mek>
I guess the answer is no, and parallel queue's were invented to do give some ordering guarantees

[15:43:30.0000] <TabAtkins>
@Mek: Correct. Absolutely no ordering guarantees (which is the point), and ordering queues to recover that when necessary.

[15:47:58.0000] <Mek>
fun... although I suspect that wasn't always what people had in mind when writing specs... i.e. methods that are defined to "return a new primse and run the following steps in parallel", where that would mean that it is completely undefined what order multiple consecutive calls of that method are processed in...

[15:49:42.0000] <Mek>
(of course it is bad code to call the same method twice without waiting for the promise returned by the first to resolve...)

[15:49:53.0000] <TabAtkins>
Not necessarily?


2018-01-12
[17:10:22.0000] <smaug____>
hayato_: got to say "Sequential Focus Navigation" in Shadow DOM is really  hard to understand when the algorithms for example take some single item as input but then algorithm says one should do something 'for each'

[17:20:53.0000] <smaug____>
Domenic: what does "In shadow-including tree order, is shadow-including preorder, depth-first traversal of a node tree." mean? I don't understand that "In"

[17:20:55.0000] <domfarolino>
TabAtkins: (latereply sorry) Ah from reading the spec that's what I figured it would do, and what you said abot "two-step" conjugations makes sense. Thanks. My confusion was from https://github.com/whatwg/fetch/pull/620#discussion_r159297985 where I wasn't sure if the `lt=` was necessary but as Domenic mentioned, it wasn't

[17:21:59.0000] <domfarolino>
TabAtkins: Oh, good to know [=|=] is part of Bikeshed syntax!

[17:22:20.0000] <TabAtkins>
https://tabatkins.github.io/bikeshed/#autolinking

[17:22:36.0000] <domfarolino>
:)

[17:26:25.0000] <smaug____>
Domenic: nm

[17:26:41.0000] <smaug____>
I see it is meant to be referred outside that text

[17:26:44.0000] <smaug____>
in foo...

[17:44:25.0000] <domfarolino>
WPT description is: "Test suites for Web-platform specs — including WHATWG, W3C, and others", curious as to what the others are?

[18:12:16.0000] <Domenic>
IETF

[18:12:25.0000] <Domenic>
A bit of Ecma given the overlap with modules/SharedArrayBuffer

[18:13:16.0000] <Domenic>
I think Khronos keeps all their stuff in a separate thing

[18:14:50.0000] <Domenic>
APNG isn't specified anywhere I think

[18:16:30.0000] <othermaciej>
Perhaps someone shou start an APNG Living Standard

[18:16:47.0000] <othermaciej>
Or maybe even PNG Living Standard if the RFC is insufficient in other ways

[18:20:31.0000] <othermaciej>
APNG seems to be specified on the Mozilla wiki: https://wiki.mozilla.org/APNG_Specification

[18:22:09.0000] <Domenic>
Ah nice

[18:23:07.0000] <tantek>
indeed. thoughts on possible next steps the last time I looked at it: https://wiki.mozilla.org/APNG

[18:23:29.0000] <tantek>
^^^ feel free to liberally offer any manner of alternative suggestions

[18:24:12.0000] <othermaciej>
Also, PNG was published as a W3C Recommendation and IETF RFC but it seems like the latest version might be only on the libpng website: www.libpng.org/pub/png/spec/1.2/

[18:24:40.0000] <othermaciej>
(I can't figure out what is different between the version sso not actually sure)

[18:28:32.0000] <othermaciej>
Also I think the latest W3C version is newer than the IETF's PNG RFC

[18:29:04.0000] <othermaciej>
this would make IETF an awkward venue for APNG

[18:29:24.0000] <othermaciej>
the politics are too confusing for me to have a productive suggestion other than "burn it all down and make it a WHATWG Living Standard"

[18:30:45.0000] <Domenic>
Well you're in the right channel

[18:36:53.0000] <tantek>
othermaciej: it's a format, not a protocol, and thus whatwg or w3c are a better default for future versions / updates than ietf

[18:37:02.0000] <tantek>
that's the historical split

[18:37:59.0000] <tantek>
perhaps try to contact the editor's of APNG on the Mozilla Wiki and see if they care one way or the other or want to participate in an update?

[18:38:05.0000] <tantek>
editors*

[18:38:26.0000] <tantek>
whatwg living standard seems fine to me

[18:39:02.0000] <tantek>
just doesn't mean you have to burn anything per se

[18:58:04.0000] <domfarolino>
Domenic: whenever you get a chance could you tell me what Edge prints (if any) for `console.log("%i", Symbol.for("..."))`

[19:00:18.0000] <domfarolino>
every impl I've tested does not throw, when I believe they should

[19:03:41.0000] <Domenic>
"Could not complete the operation due to error 80020101."

[19:04:06.0000] <Domenic>
It appears to throw an Error (not a TypeError)

[19:04:55.0000] <Domenic>
Per your latest change they should print "Symbol(...)" right?

[19:05:09.0000] <Domenic>
Or I guess parseInt("Symbol(...)") so NaN?

[19:05:21.0000] <domfarolino>
Hm, well the first step of the %parseInt% abstract op calls ToString, so I expect throw, since ToString throws on Symbols?

[19:05:32.0000] <Domenic>
Oh right

[19:05:34.0000] <Domenic>
Good call

[19:05:43.0000] <Domenic>
Yeah weird I wonder what they are even doing

[19:05:55.0000] <Domenic>
Type-testing symbols I guess for all code paths?

[19:07:09.0000] <Domenic>
Well the results are all divergent enough that I think asking them to throw is reasonable

[19:10:04.0000] <domfarolino>
Domenic: Hmm must be I guess, idk interesting. Yeah I think nobody actually follows, and I think spec is reasonable so I'll start filing away

[19:11:25.0000] <Domenic>
With WPTs? :)

[19:11:26.0000] <michael2>
hi does anyone know which section of whatwg spec/docs define "default actions" on HTML elements? e.g. say you have <a onclick="foo();" ... how the browser  should handle that?

[19:12:56.0000] <domfarolino>
Yeah I think I'm going to make the WPT that accompanies the latest Console PR inclusive to testing all format specifiers on Symbols

[19:18:47.0000] <domfarolino>
Ugh in Chrome (at least stable) `console.count(Symbol.for("..."))` doesn't throw, and still "counts". Domenic are the bindings just shot or something?

[19:20:14.0000] <domfarolino>
+Safari

[19:28:45.0000] <Domenic>
Yeah my understanding is that Chrome and Safari both implement console in JS so don't benefit from auto-generated WebIDL bindings

[19:29:26.0000] <Domenic>
michael2: HTML has all those. Can try to track down specific ones if you can't find them.

[19:51:35.0000] <domfarolino>
Ahh

[19:51:39.0000] <domfarolino>
fun

[19:52:44.0000] <domfarolino>
I imagine that's miuch slower too

[19:52:46.0000] <domfarolino>
*much

[19:53:06.0000] <domfarolino>
Well...maybe?

[19:53:45.0000] <Domenic>
Nah if anything a bit faster

[19:53:51.0000] <Domenic>
No JS -> C++ transition

[20:00:24.0000] <domfarolino>
Oh true

[21:10:56.0000] <michael2>
Domenic: hi, just saw your response from earlier. I've looked in HTML but I guess the question is which part? also, I've read this part of the docs before, and from memory its a dedicated (and relavtively small) document

[21:11:22.0000] <Domenic>
michael2: html.spec.whatwg.org/ is not very small :). Let's see, let's start with the a element chapter...

[21:11:44.0000] <Domenic>
"The activation behavior of a elements that create hyperlinks is to run the following steps:"

[21:11:51.0000] <michael2>
hah :) i mean _this_ part is pretty small

[21:12:33.0000] <michael2>
because the number of HTML elements which have this "default action" is few. only <a> and <form>

[21:13:34.0000] <Domenic>
Basically Ctrl+F "activation behavior" to find out what happens when you activate (click, keyboard enter, etc.) various elements

[21:14:13.0000] <michael2>
I think thats something different

[21:15:14.0000] <Domenic>
I can guarantee you it's not :)

[21:15:30.0000] <Domenic>
That's how we define these things

[21:16:32.0000] <Domenic>
Part of the issue is that some people (perhaps including yourself) have some notion that events "cause" actions and that there are "default actions" that are caused. But that's very wrong.

[21:17:05.0000] <Domenic>
Things happen, like an actual user clicking something, then we fire a click event to notify you, and then---if the click event wasn't canceled---the activation behavior happens.

[21:17:37.0000] <michael2>
ok

[21:17:40.0000] <Domenic>
But the event part of that is basically just an "FYI", not essential to the process

[21:18:20.0000] <michael2>
so thats events in general right? well I guess events that are directed at an HTmL element

[21:18:28.0000] <michael2>
at least

[21:18:53.0000] <Domenic>
Events in general really https://dom.spec.whatwg.org/#action-versus-occurance

[21:22:29.0000] <michael2>
what Im trying to find is the part of the spec (which whatwg inherited from pre-existing DOM-something? spec)  relating to those behaviours the browser should follow when a dev say  does <a onclick="return foo(element);" and how the browser should bind "element" to the "this" inside foo() and a return value of "false" should cancel default action (i.e. navigating away from current page)

[21:25:03.0000] <michael2>
like DOM api from 90's netscape days

[21:25:28.0000] <Domenic>
Ah, the spec for inline event handlers

[21:26:25.0000] <Domenic>
It doesn't cancel the default action, since there is no such concept, but it does cancel the event.

[21:26:36.0000] <Domenic>
To see how canceling the event interacts with activation behavior, see https://dom.spec.whatwg.org/#concept-event-dispatch

[21:27:15.0000] <Domenic>
To see how inline event handlers returning false (usually) cancels the event, see https://html.spec.whatwg.org/#the-event-handler-processing-algorithm + https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler

[21:28:22.0000] <Domenic>
And with that, I'm heading to sleep. Hopefully following links from there should help.

[21:31:00.0000] <michael2>
Domenic: thanks alot

[21:31:19.0000] <michael2>
that gives me alot to go from

[21:56:17.0000] <domfarolino>
Action vs occurance link is nice and informative

[21:57:19.0000] <domfarolino>
Domenic: Is there a reason the URL is spelled occurance when the header is "occurrence"?

[21:57:46.0000] <annevk>
domfarolino: I suspect I made a typo and didn't want to break links

[21:58:04.0000] <annevk>
domfarolino: git blame would tell

[21:58:11.0000] <domfarolino>
Ok that makes sense

[22:37:23.0000] <TimothyGu>
Have function.arguments/caller been spec'd?

[22:45:24.0000] <domfarolino>
TimothyGu: Is this at all what you're looking for https://tc39.github.io/ecma262/#sec-arguments-exotic-objects

[23:59:42.0000] <TimothyGu>
domfarolino: nah that's arguments.caller, function.caller is something different

[00:00:01.0000] <TimothyGu>
see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller

[05:06:36.0000] <Ms2ger>
annevk, where is it defined that a Uint8ClampedArray has a [[Detached]] slot?

[05:27:20.0000] <annevk>
Ms2ger: hmm, only the underlying buffer does?

[05:28:58.0000] <Ms2ger>
Ok

[05:29:26.0000] <tobie>
Ms2ger: I think this used to be the case at some point, now you just check whether [[ArrayBufferData]] is null.

[05:29:30.0000] <annevk>
Ms2ger: hmm, no, the underlying buffer can be detached

[05:29:45.0000] <annevk>
Right, what tobie said

[05:29:58.0000] <annevk>
Though there's an actual abstract operation we use for it

[05:30:01.0000] <tobie>
see https://tc39.github.io/ecma262/#sec-isdetachedbuffer

[05:30:06.0000] <Ms2ger>
https://github.com/whatwg/html/issues/3343

[05:30:19.0000] <tobie>
and https://tc39.github.io/ecma262/#sec-detacharraybuffer

[05:30:55.0000] <annevk>
Ms2ger: lots of nice finds

[05:31:17.0000] <Ms2ger>
And I haven't even started filing impl bugs

[05:38:52.0000] <tobie>
TabAtkins: if you can give https://github.com/tabatkins/bikeshed/issues/1166 a look when you get to work, that would be great. Affects builds at least for WebIDL, maybe other specs?

[06:37:32.0000] <annevk>
Hmm, I looked at the state of MIME type sniffing a bit and now I wish I never did

[06:37:53.0000] <annevk>
I guess I'll fix a few more Ms2ger <canvas> issues

[06:38:19.0000] <Ms2ger>
I'm Ms2ger, and I support this message

[06:50:38.0000] <nox>
To the best of my knowledge I'm not Ms2ger, but I support this message too.

[06:50:57.0000] <gsnedders>
I, also, believe myself not to be Ms2ger, and also support this message.

[06:52:21.0000] <annevk>
MIME type sniffing is important too, but the code in Firefox is rather ancient

[06:54:22.0000] <jgraham>
I mean nox seems unusally likely to be Ms2ger. They are both grumpy about Rust syntax additions, for example

[06:54:46.0000] <Ms2ger>
/me hides his baguettes

[06:55:25.0000] <nox>
jgraham: But what if instrumentality happened already and we actually are a single consciousness?

[06:56:04.0000] <jgraham>
nox: All of us? In that case stop arguing with yourself about bread.

[06:56:17.0000] <nox>
Ah ah ah ah ah.

[06:57:35.0000] <ato>
I thought endorsements had to be followed by who paid for it.

[06:57:38.0000] <ato>
Question is who bribed gsnedders.

[06:59:50.0000] <gsnedders>
bbiab, going to bank

[07:00:13.0000] <Ms2ger>
/me hurries with his wire transfer

[07:29:30.0000] <nox>
Not even using bitcoins?

[08:48:48.0000] <nox>
Who the hell manages https://drafts.css-houdini.org/?

[08:48:59.0000] <nox>
https://irccloud.mozilla.com/file/3kD35V7Y/Capture%20d%E2%80%99e%CC%81cran%202018-01-12%20a%CC%80%2017.48.34.png

[08:49:07.0000] <nox>
I'm not living in the US, so please explain how my ISP can block this website…

[08:51:04.0000] <nox>
https://github.com/fightforthefuture/battleforthenet-widget/issues/145 smh

[09:36:16.0000] <annevk>
https://github.com/whatwg/html/graphs/contributors is up to a 100

[09:36:19.0000] <annevk>
Has that been the case for long?

[09:36:52.0000] <annevk>
Two years ago we had 37: https://blog.whatwg.org/html-standard-now-more-community-driven

[09:37:03.0000] <tobie>
TabAtkins: thanks, you rock!

[09:37:05.0000] <annevk>
Maybe we should blog again on January 25

[09:37:32.0000] <TabAtkins>
tobie: Well, my testing situation should have caught this, so I don't rock *that* much. Fixing that now as well.

[09:38:49.0000] <TimothyGu>
tobie: for named properties object, unfortunately I think you can't use ObjectCreate

[09:38:58.0000] <TimothyGu>
The abstract operation ObjectCreate with argument proto (an object or null) is used to specify the runtime creation of new **ordinary objects**.

[09:40:36.0000] <tobie>
TimothyGu: yeah, I imagined this was sort of sketchy.

[09:40:48.0000] <TimothyGu>
See https://tc39.github.io/ecma262/#sec-proxycreate for a more appropriate example

[09:40:54.0000] <tobie>
TimothyGu: is there anything else I can use instead?

[09:41:08.0000] <tobie>
Cool. Thanks. I’ll give it a look later.

[09:41:37.0000] <annevk>
Oh, it's 138 contributors, so we increased by a 100 in two years

[09:41:55.0000] <TimothyGu>
yay! happy to be one of them

[09:42:01.0000] <annevk>
Go go contributors \o/

[10:05:20.0000] <domfarolino>
Woo same!

[10:46:22.0000] <tobie>
TimothyGu: lmk if that makes more sense

[10:55:15.0000] <TimothyGu>
tobie: LGTM

[11:24:16.0000] <domfarolino>
Domenic: Regarding https://bugs.webkit.org/show_bug.cgi?id=181576#c2 do you think the spec should change to not force implementations to throw when %parseInt% would normally?

[11:24:39.0000] <domfarolino>
Personally I like the spec how it is, but since nobody is throwing, and as Joseph pointed out, it could be a backwards-incompatible change I'm not sure what to do

[11:35:17.0000] <Domenic>
domfarolino: Edge is throwing

[11:35:24.0000] <domfarolino>
Nice!

[11:35:32.0000] <domfarolino>
Forgot about that

[11:36:49.0000] <Domenic>
In general I think there's a larger question about "should console methods ever throw or not". But I thought we resolved that at some point in favor of allowing throwing, in some other thread.

[11:36:58.0000] <domfarolino>
I feel like allowing console methods to not throw when the devtools are not open is a little messy, which is _close_ to what WebKit is doing since they don't apply format specifiers if the devtools are not open

[11:37:24.0000] <Domenic>
Yeah observable differences between devtools open and not is bad

[11:37:43.0000] <domfarolino>
Oh, I can check out some old issues to try and see if that decision has been made. In short I think they should be able to throw

[12:07:37.0000] <domfarolino>
Domenic: Yeah in general it seems like the consensus all along has been to allow throwing. https://github.com/whatwg/console/issues/54#issuecomment-216631477 in particular mentions not swallowing errors on Console APIs, which I agree with

[12:37:16.0000] <tobie>
TimothyGu: ty

[12:46:12.0000] <tobie>
TimothyGu: thoughts on https://github.com/heycam/webidl/pull/494#discussion_r161321239 appreciated

[12:56:29.0000] <smaug____>
TabAtkins: there can be several nested element with display:contents right, and only the elements which then eventually have some other display values will be shown

[12:56:50.0000] <TabAtkins>
Yes

[12:57:10.0000] <smaug____>
ok, thanks

[13:00:49.0000] <TimothyGu>
tobie: commented

[13:00:58.0000] <tobie>
TimothyGu: ty

[13:08:31.0000] <Domenic>
TimothyGu: ping on https://github.com/whatwg/html/pull/3314

[13:11:57.0000] <annevk>
Domenic: quirks also still has CC0

[13:11:58.0000] <Domenic>
jungkees: FYI getting source bytes onto the script struct is not straightforward :( I uncovered a giant mess: https://github.com/whatwg/fetch/issues/661

[13:12:17.0000] <annevk>
Domenic: and streams/ has a bunch of matches when I grep for CC0, possibly just ref impl / tests

[13:13:13.0000] <annevk>
Domenic: also meta/ which seems fine and html/ which I suspect is for one of those images

[13:13:52.0000] <Domenic>
annevk: will you fix?

[13:14:41.0000] <annevk>
Domenic: prolly Monday at the earliest, gonna get some sleep

[13:14:55.0000] <annevk>
Domenic: also not entirely sure what to do about any of those except quirks

[13:15:17.0000] <Domenic>
Yeah quirks is the bad one

[13:23:31.0000] <TimothyGu>
Domenic: ah forgot about that. will fix soon

[14:10:06.0000] <tobie>
TabAtkins: is https://github.com/tabatkins/bikeshed/issues/1167 something that's easily fixable on your side or should I just use a workaround?

[14:10:20.0000] <TabAtkins>
Easily fixable.

[14:10:26.0000] <tobie>
TabAtkins: cool


2018-01-13
[21:00:14.0000] <TimothyGu>
Domenic: https://github.com/whatwg/html/pull/3314 fixed

[01:25:46.0000] <TimothyGu>
tobie: could you take a look at https://github.com/heycam/webidl/pull/501?

[01:26:13.0000] <TimothyGu>
would also be happy to help out with the imperative definition patch. Let me know how I can help

[03:40:29.0000] <tobie>
TimothyGu: back at webidl on Thursday. Will look at your PR first thing.

[03:40:40.0000] <tobie>
TimothyGu: Not too sure how you can help with the imperative stuff for now beyond reviewing, which has been super useful.

[03:42:21.0000] <tobie>
TimothyGu: if you have time, it would be helpful if you could update the other pull request you have open so we can merge it.

[03:42:46.0000] <tobie>
TimothyGu: iirc there were a few change requests.

[08:19:20.0000] <Zegnat>
Is there a how-to on writing specs like WHATWG does somewhere, other than reading the entire Infra spec?

[10:53:23.0000] <annevk>
Zegnat: not that I know of; there are some guides, but best is still reading existing work

[10:57:05.0000] <Zegnat>
It is interesting, I basically end up scrolling back and forth through other specs to see if there is any prior phrasing I can use.


2018-01-15
[23:58:56.0000] <yoav>
annevk: I'm looking into adding the initiator to the `<link rel=prefetch>`/`<link rel=prerender>` processing model

[23:59:07.0000] <yoav>
The best place seems to be https://html.spec.whatwg.org/multipage/semantics.html#obtaining-a-resource-from-a-link-element

[00:00:40.0000] <yoav>
but, it probably requires some "else if" logic, as `<link rel="preload prefetch">` is a possible value

[00:01:18.0000] <yoav>
any examples for similar language for "else if" in the spec?

[00:01:55.0000] <annevk>
yoav: "Otherwise, if X, ..."

[00:02:51.0000] <yoav>
ok, coo

[00:02:52.0000] <yoav>
l

[01:37:37.0000] <yoav>
annevk: https://github.com/whatwg/html/pull/3353

[01:38:17.0000] <yoav>
(also the participation bots are rightfully angry with me. Waiting for a decision on https://github.com/whatwg/participate.whatwg.org/issues/11)

[01:40:30.0000] <annevk>
yoav: I thought you agreed with me that we wanted separate initiators?

[01:41:53.0000] <yoav>
I guess I did...

[01:42:10.0000] <yoav>
let me find the relevant discussion...

[01:44:39.0000] <annevk>
It's actually quite hard to find all elements that have "flow content" as their content model

[01:44:40.0000] <yoav>
https://github.com/w3c/webappsec-csp/pull/283

[01:44:46.0000] <yoav>
OK, updating 659

[02:49:39.0000] <kochi>
Shall we (did we) define clipboard events composed or not?

[02:49:55.0000] <kochi>
(i.e. paste, etc.)

[02:53:53.0000] <annevk>
kochi: I'd say yes, given it's UI input

[02:54:17.0000] <annevk>
kochi: I'm not sure if we carefully considered them; I don't quite recall

[02:54:45.0000] <kochi>
As far as I see no mentions about "composed" flag in clipbard API draft.

[02:59:52.0000] <annevk>
kochi: I looked and per hayato_ we left them out: https://github.com/w3c/webcomponents/issues/513#issuecomment-224468080

[03:00:09.0000] <annevk>
kochi: that basically happened though because nobody took the time to look into it much

[03:00:40.0000] <annevk>
kochi: worth opening an issue for to settle this in a more principled matter

[03:05:22.0000] <kochi>
annevk: thanks for the pointer!

[03:05:46.0000] <kochi>
/me will file an issue on clipboard api

[03:11:52.0000] <kochi>
https://github.com/w3c/clipboard-apis/issues/61

[07:27:06.0000] <nox>
annevk: https://twitter.com/nokusu/status/952925077976305668

[07:28:26.0000] <annevk>
nox: bet you wish Twitter would let you edit that

[07:28:33.0000] <nox>
What did I do?

[07:28:41.0000] <nox>
Intra was on purpose.

[07:28:51.0000] <annevk>
nox: the plot thickens

[07:28:57.0000] <nox>
'a prefix signifying inside, within, interior, during'

[07:29:28.0000] <nox>
I was punning, clearly I didn't pun well.

[09:36:50.0000] <Domenic>
tobie: PR preview doesn't seem to be updating on https://github.com/whatwg/html/pull/3352, even a day later. Maybe because of the force-push?

[09:37:26.0000] <tobie>
No. It should work.

[09:37:43.0000] <tobie>
It’s an issue with amazon, apparently.

[09:38:27.0000] <tobie>
And I’m somehow not handling the error message as I should.

[09:38:42.0000] <tobie>
Need to dig in to see what’s up.

[09:38:50.0000] <tobie>
^ Domenic

[09:39:00.0000] <Domenic>
OK np

[11:58:02.0000] <smaug____>
Why https://github.com/w3c/web-platform-tests/blob/master/shadow-dom/event-composed-path-with-related-target.html#L136 is valid?

[11:58:15.0000] <smaug____>
Isn't that against step 4 in https://dom.spec.whatwg.org/#concept-event-dispatch

[12:00:34.0000] <smaug____>
looks like Safari has the same interpretation what I have

[12:00:37.0000] <smaug____>
https://wpt.fyi/shadow-dom/event-composed-path-with-related-target.html

[12:01:05.0000] <smaug____>
/me fixes the test

[12:03:42.0000] <smaug____>
hayato_: FYI ^

[12:03:50.0000] <smaug____>
kochi: ^

[13:20:32.0000] <tobie>
Domenic: ok, so it's the caching layer for whatpr.org that is causing the issue

[13:33:09.0000] <tobie>
Domenic: now to understand what part of AWS does what…

[15:49:35.0000] <tobie>
foolip, Domenic: so the issue was that amazon cloud front (which is used for whatpr.org) caches pages that don't have cache-control directives, contrary to what S3 does.

[15:50:09.0000] <TimothyGu>
cloudfront is the CDN, which I guess isn't terribly surprising

[15:50:47.0000] <tobie>
foolip, Domenic: I wiped out those caches for HTML, and regenerated the intersection of open PR and existing caches for HTML.

[15:52:20.0000] <tobie>
foolip, Domenic: LMK if you bump into the issue again

[15:53:07.0000] <tobie>
TimothyGu: yeah, I wrongly assumed consistency with S3


2018-01-16
[18:34:14.0000] <kochi>
mmm, where beforecut, beforecopy, beforepaste events are defined?

[18:40:58.0000] <a-ja>
https://w3c.github.io/clipboard-apis/

[18:41:23.0000] <a-ja>
there are references near the end

[18:43:24.0000] <a-ja>
referenced: https://msdn.microsoft.com/en-us/library/ms537658.aspx

[19:05:40.0000] <kochi>
a-ja: I cannot find reference in the editor's draft of clipboard api spec

[19:06:16.0000] <kochi>
searching "before" shows 3 candidates which are not before* events

[19:08:20.0000] <a-ja>
kochi: see the msdn link above

[19:09:23.0000] <kochi>
a-ja: yeah, it seems the MSDN doc is a historical archive. So beforecopy et al. existed since long ago?

[19:09:27.0000] <a-ja>
it has link to several before*'s

[19:10:44.0000] <a-ja>
i'm guessing the clipboard-api's are an effort at standardizing/replacing old dhtml

[19:11:20.0000] <kochi>
[MICROSOFT-CLIP-OP]  in the clipboard API spec is just a reference, not a spec... so before* events are not formally specified in any whatwg or w3c specs, then.

[19:12:10.0000] <a-ja>
just a link to prior work, as best i can tell

[19:12:32.0000] <kochi>
yeah, looks like so.

[19:12:43.0000] <kochi>
even MDN has broken links to before* events : https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent

[19:13:35.0000] <kochi>
the context is, that I am trying to specify these events are composed for V1 Shadow DOM, but I could not find any definition for before* events.

[19:14:15.0000] <kochi>
So browser vendors have to do *best guess* to make those before* events composed, then.

[19:17:16.0000] <a-ja>
https://bugzilla.mozilla.org/show_bug.cgi?id=1309697

[19:19:43.0000] <a-ja>
https://bugzilla.mozilla.org/show_bug.cgi?id=1344410  <-- has a *little* history

[19:31:25.0000] <kochi>
also found some history

[19:31:26.0000] <kochi>
https://github.com/w3c/clipboard-apis/issues/24

[19:31:29.0000] <kochi>
https://github.com/w3c/clipboard-apis/issues/25

[22:56:03.0000] <hayato_>
smaug____:  re:  event-composed-path-with-related-target.html#L136 , let me look later.

[23:22:43.0000] <foolip>
tobie: thanks for looking into that, I'll let you know about any bugs I notice :)

[23:26:14.0000] <tobie>
foolip: if there’s a discrepancy between the diff sha you see when hovering over the links and the actual content, then it’s the same issue hitting again.

[01:10:14.0000] <aliray>
hi, I'm having  a small coding issue: this code downloads a URL and saves it to file: http://dpaste.com/13GJCH6

[01:11:25.0000] <aliray>
But I get this result: http://dpaste.com/1DV1XRG

[01:11:37.0000] <aliray>
(this is just the head of the doc)

[01:12:04.0000] <aliray>
The issue is with the namespaced xml attributes

[01:12:43.0000] <aliray>
It reads "xmlnsU0003Aaa" instead of "xmlns:aa"

[01:12:51.0000] <aliray>
what's wrong with my code?

[01:27:35.0000] <zcorpan>
aliray: something in your code implements https://html.spec.whatwg.org/#coercing-an-html-dom-into-an-infoset (which is not necessarily wrong)

[01:34:34.0000] <aliray>
zcorpan, thanks. Related: https://stackoverflow.com/questions/12253791/html5lib-with-lxml-treebuilder-doesnt-parse-namespaces-correctly#12254291

[01:38:55.0000] <smaug____>
hayato_: FYI, I have fix for that test locally, so you don't need to change that, unless you get to it first when fixing blink's implementation.

[01:39:20.0000] <aliray>
zcorpan, this is my problem I guesshttps://www.w3.org/TR/html-rdfa/#backwards-compatibility

[01:39:24.0000] <aliray>
https://www.w3.org/TR/html-rdfa/#backwards-compatibility

[01:46:07.0000] <kochi>
smaug____ I haven't looked at it yet, looking.

[02:25:22.0000] <kochi>
smaug____: looks like you are correct, but I am trying to understand why we did this at first.

[02:26:24.0000] <smaug____>
spec change after implementation perhaps?

[02:26:42.0000] <smaug____>
or implementation has some left over from v0 era?

[02:26:49.0000] <smaug____>
or just a bug :)

[02:27:58.0000] <kochi>
it smells just a bug, but I haven't figured it out.

[02:28:30.0000] <kochi>
smaug____: so you meant the spec is correct, test should be fixed, and Blink implemnetation should be fixed as well, right?

[02:28:52.0000] <smaug____>
right

[02:29:01.0000] <smaug____>
at least to me the spec does look sane

[02:29:37.0000] <kochi>
yeah, so if target is a shadow-including ancestor of related target, then the event dispatch is suppressed at all.

[03:10:44.0000] <hayato_>
smaug____: I've taken look

[03:11:03.0000] <hayato_>
I think the test and Blink's behavior are correct.

[03:11:26.0000] <hayato_>
That was intentionally done for backward compatibility of synthetic events.

[03:11:34.0000] <hayato_>
See the context: https://github.com/w3c/webcomponents/issues/577

[03:11:50.0000] <hayato_>
https://github.com/whatwg/dom/issues/337

[03:12:00.0000] <annevk>
foolip: so what do you think we should research with the validator?

[03:12:05.0000] <hayato_>
We should have different behavior here between synthetic events and user-agent events. That is a confusing point, but we agreed taht we had to accept.

[03:12:07.0000] <annevk>
foolip: how many additional warnings we'd trigger?

[03:12:13.0000] <annevk>
foolip: for <main>

[03:16:44.0000] <foolip>
annevk: for all of the contexts you're proposing that <main> become invalid, which happen most often, and then to look at what those pages are doing

[03:17:12.0000] <foolip>
I'm actually doing some grepping/parsing in httparchive data now to see what the parent chains look like most frequently

[03:18:12.0000] <MikeSmith>
so I think I can actually add use counters for each case to the checker

[03:19:06.0000] <annevk>
foolip: I'm happy to help analyzing URLs to some extent

[03:51:30.0000] <annevk>
MikeSmith: sounds great, if it's not actually common I think we should just proceed so that'd be good to know

[03:52:37.0000] <MikeSmith>
will try to get those added tonight

[03:52:43.0000] <MikeSmith>
bath time for the kids first

[04:28:59.0000] <hsivonen>
gsnedders: subject to plh's license approval, is it OK if I add a noto directory under WPT's tests/fonts/ and put the unzipped directories of the Noto Sans Adlam and Noto Sans Cypriot fonts there? (both are relatively small as far as fonts go)

[04:30:35.0000] <hsivonen>
(that is, I don't have a license approval from plh yet)

[04:32:49.0000] <hsivonen>
oops. there is precedent to having OFL fonts in WPT already. Just not in the directory I examined.

[04:37:39.0000] <hsivonen>
hmm. maybe I should put the fonts under css/fonts/ instead if I put my tests under css

[04:38:22.0000] <hsivonen>
gsnedders: I want to add https://hsivonen.com/test/moz/astral-bidi/ to WPT. Where in the WPT hierarchy should I put these

[04:39:57.0000] <annevk>
hsivonen: https://github.com/w3c/web-platform-tests/tree/master/css/css-fonts?

[04:40:28.0000] <hsivonen>
it's possible that these tests are redundant, but I failed to find existing tests for the two astral rtl ranges

[04:41:01.0000] <hsivonen>
annevk: that directory is for testing CSS font features

[04:41:19.0000] <hsivonen>
annevk: https://github.com/w3c/web-platform-tests/tree/master/css/fonts and https://github.com/w3c/web-platform-tests/tree/master/fonts are for font files

[04:41:45.0000] <hsivonen>
annevk: in my tests, the fonts are incidental and what's being tested is rtl treatement of astral code points

[04:42:32.0000] <hsivonen>
(my interest is testing that DOM-level optimizations don't prevent rtl behavior on the layout layer)

[04:43:39.0000] <annevk>
Maybe css-text then? The hierarchy of directories can make it very hard to determine where to place tests at times

[04:43:58.0000] <annevk>
A tagging system would be better, but doesn't really match file systems that well

[04:45:21.0000] <hsivonen>
nox: you in the OWNERS for the directory that annevk suggested. does it look like the right directory?

[04:45:35.0000] <nox>
What?

[04:46:15.0000] <hsivonen>
nox: If I put https://hsivonen.com/test/moz/astral-bidi/ in WPT, is it OK to put the directory under https://github.com/w3c/web-platform-tests/tree/master/css/css-text ?

[04:46:34.0000] <nox>
Seems like the right place yes.

[04:46:38.0000] <hsivonen>
nox: thanks

[05:06:53.0000] <hayato_>
smaug____:  Ah, my previous comments about event path  were wrong.

[05:07:04.0000] <hayato_>
I've finally found this PR and the discussion there. https://github.com/whatwg/dom/pull/336

[05:07:15.0000] <hayato_>
It looks isTrusted guard was removed from the commit, as per https://github.com/whatwg/dom/pull/336#issuecomment-254416132.

[05:11:28.0000] <hayato_>
Your comment there, https://github.com/whatwg/dom/pull/336#issuecomment-251400264, really makes sense. :)

[05:11:40.0000] <hayato_>
 We shouldn't use PRs for discussing spec issues. Because of that, I couldn't find the discussion and couldn't notice why isTrusted guard was removed easily.

[05:34:48.0000] <gsnedders>
bah, missed hsivonen

[05:45:09.0000] <nox>
Window features (third argument of window.open) are almost not specified, right?

[05:50:20.0000] <annevk>
nox: there's a couple open issues against HTML and CSSOM

[05:51:35.0000] <gsnedders>
nox: the parsing is, but IIRC that's most of what is

[05:55:35.0000] <nox>
gsnedders: Yeah.

[05:55:47.0000] <nox>
gsnedders: Asking because I'm looking at the C++ code to do that in Gecko,

[05:56:00.0000] <nox>
and it looks pretty bad and it just strips whitespace everywhere,

[05:56:10.0000] <nox>
so setting "left" is the same as setting "l e f t".

[05:56:20.0000] <nox>
And then I realised it has a dozen non standard features too.

[05:59:29.0000] <smaug____>
hayato_: yeah, discussing spec issues in prs is horrible

[06:05:17.0000] <nox>
I don't even understand why it strips spaces.

[06:05:39.0000] <gsnedders>
hsivonen: yeah, fonts are clearly okay (we have other Noto Sans fonts in various places, which we should probably move up to /fonts)

[06:06:36.0000] <gsnedders>
hsivonen: and yeah css/css-text is probably right

[06:07:19.0000] <nox>
How do I make Chrome listen to the window features I pass to it?

[06:09:01.0000] <hsivonen>
gsnedders: thanks

[06:10:43.0000] <gsnedders>
hsivonen: (maybe just create a css/css-text/bidi or something?)

[06:15:42.0000] <nox>
I think the feature parsing code is incorrect.

[06:16:21.0000] <nox>
Never mind, can't read.

[15:03:06.0000] <othermaciej>
Domenic: I notice HTML hasn't had its copyright notice updated or a LICENSE file added, should I file an issue? (Would it go in the html issue tracker?)

[15:03:30.0000] <othermaciej>
(Asking first in case it is already tracked or there is some reason for delay or something)

[15:04:00.0000] <Domenic>
othermaciej: It's https://github.com/whatwg/html/pull/3349, blocked on someone reviewing my build tooling patch in https://github.com/whatwg/wattsi/pull/67

[15:04:08.0000] <Domenic>
Maybe I should just merge it


2018-01-17
[16:01:15.0000] <TabAtkins>
Is there a way to make the test runner run a *single* test, specified in the URL?

[16:01:28.0000] <TabAtkins>
(The online one at http://w3c-test.org/tools/runner/index.html)

[16:02:21.0000] <TabAtkins>
Oh, if they're testharness I can just link straight to them, looks like.

[16:23:48.0000] <gsnedders>
yes (there's basically no reason to ever use than runner)

[16:24:05.0000] <gsnedders>
I mean I guess it's better than nothing for running multiple testharness.js tests

[16:29:11.0000] <TabAtkins>
The docs currently point to that runner, and don't mention that you can just navigate directly to the test.

[16:36:28.0000] <TimothyGu>
gsnedders: I'm seeing "POST http://w3c-test.org/tools/runner/update_manifest.py 500 (Internal Server Error)" is this normal?

[16:37:55.0000] <gsnedders>
TimothyGu: yeah, the runner has never really worked well on w3c-test.org :/

[16:43:18.0000] <TimothyGu>
:(

[16:47:49.0000] <gsnedders>
honestly we should just have better tooling to run the tests; better UI for ./wpt run locally, some better way to run them in browser (and run more than just testharness.js tests), and make that less useful generally by having up-to-date results at https://wpt.fyi/

[16:49:26.0000] <TimothyGu>
gsnedders: is there a way to mute websocket connection notifications, like those shown in https://travis-ci.org/tmpvar/jsdom/jobs/329347954#L5163?

[16:49:41.0000] <TimothyGu>
or, for more fun, https://travis-ci.org/tmpvar/jsdom/jobs/329347954#L5207-L5285

[16:50:10.0000] <TimothyGu>
I assume you're the WPT guy but correct me if I'm wrong

[16:50:26.0000] <gsnedders>
TimothyGu: I… guess they come from the websocket server, so I don't know.

[16:50:49.0000] <gsnedders>
yeah, they come from pywebsocket

[16:51:16.0000] <TimothyGu>
so no way to disable it?

[16:51:58.0000] <gsnedders>
Pretty sure it's coming directly from the third party code, so nothing we directly maintain. Might be configurable with logging levels and the like? I don't know. I've never touched the WebSockets stuff.

[16:52:10.0000] <TimothyGu>
ok..

[16:52:24.0000] <gsnedders>
Sorry, I can't give a useful answer.

[16:52:48.0000] <TimothyGu>
it's okay, just stopping by

[22:53:57.0000] <KiChjang>
annevk, spec question about valid floating point numbers

[22:54:24.0000] <KiChjang>
are whitespaces in front of the numbers allowed?

[22:54:45.0000] <KiChjang>
i.e. is "    123.345" considered a valid floating point number?

[22:55:26.0000] <KiChjang>
link to spec: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number

[23:22:27.0000] <annevk>
KiChjang: what would suggest it’s valid?

[23:23:20.0000] <KiChjang>
the parsing part of it suggest that it may be valid, since on step 6 it is allowed to skip whitespaces

[23:23:53.0000] <annevk>
KiChjang: we parse many invalid inputs

[23:24:14.0000] <KiChjang>
ah ok, that's the part i'm missing

[23:24:34.0000] <KiChjang>
my intuition was successful parsing == valid string

[23:46:35.0000] <hayato_>
smaug____:FYI,  I'm going to fix the WPT test, https://github.com/w3c/web-platform-tests/blob/master/shadow-dom/event-composed-path-with-related-target.html, as well as fixing Blink's implementation at https://chromium-review.googlesource.com/c/chromium/src/+/869693.

[01:37:49.0000] <annevk>
I wonder what GitHub uses to mark some of my comments as verified and some not

[01:38:16.0000] <annevk>
I do push from different machines, but I think I use identical setups...

[01:38:26.0000] <annevk>
And I'm not entirely sure it's related to that

[01:39:25.0000] <annevk>
Also, Travis being offline is kinda weird

[02:35:38.0000] <TimothyGu>
annevk: it's GPG signing

[02:35:58.0000] <TimothyGu>
if you merge on GitHub then it uses GitHub's PGP key and GH automatically recognizes it as verified

[02:36:18.0000] <TimothyGu>
If you push from your own machine then depends on the setup

[02:37:09.0000] <TimothyGu>
see https://github.com/jsdom/webidl2js/commit/bfb6ee120e9d816f1515a68d45e3b2d35577570c (GitHub's key) and https://github.com/jsdom/webidl2js/commit/b26285a2fee18f2989874c56f55d94e52c977781 (my own key on my machine)

[02:37:43.0000] <TimothyGu>
if you don't have signing enabled on your local machine, then only merge commits created on GitHub will be verified, I assume

[02:37:58.0000] <annevk>
TimothyGu: I merge everything through GitHub though; either rebase and merge or squash and merge

[02:38:25.0000] <annevk>
TimothyGu: and the difference is also not in the distinction between those, judging from recent whatwg/html changes

[02:38:47.0000] <TimothyGu>
hmm, maybe fast forward vs. not fast forward? no clue

[02:40:01.0000] <annevk>
And locally I use GitHub Desktop, logged in to GitHub directly

[02:40:20.0000] <annevk>
It's probably some minor config difference somewhere, but I don't care enough to find out

[03:10:20.0000] <gsnedders>
annevk, TimothyGu: pretty sure the commit has to be created on GitHub, not merely rebased on GitHub (hence squash/rebase & merge won't do it)

[05:36:16.0000] <JakeA>
Fact check for a talk: Microtasks were originally invented for mutation observers right?

[05:36:58.0000] <annevk>
JakeA: yeah

[05:37:10.0000] <JakeA>
Ta!

[07:43:28.0000] <MikeSmith>
<main> in <td> http://www.realto.ru/journal/articles/kogda-mozhet-ponadobitsya-konsultaciya-yurista-po-zhilishnomu-pravu/

[07:43:41.0000] <MikeSmith>
because it’s using tables for layout

[07:47:33.0000] <MikeSmith>
<main> in <section> https://mentecomunal.net/author/luis/ and http://artlist.io/

[07:54:39.0000] <MikeSmith>
annevk: foolip: stats on <main> are now included in https://validator.w3.org/nu/stats.html

[07:54:49.0000] <MikeSmith>
but note that it caches very aggressively

[07:54:59.0000] <MikeSmith>
so if you want to see fresh data, do something like https://validator.w3.org/nu/stats.html?a

[07:55:09.0000] <MikeSmith>
then the next time do https://validator.w3.org/nu/stats.html?b

[07:55:13.0000] <MikeSmith>
or whatever

[07:55:14.0000] <MikeSmith>
etc

[07:56:02.0000] <MikeSmith>
I am also logging URLs on the backend for the interesting cases

[07:56:15.0000] <MikeSmith>
<main> in <td>, <main> in <section>, etc

[07:56:44.0000] <MikeSmith>
so we will have real current cases to inspect and consider

[07:59:33.0000] <MikeSmith>
another main in section case http://pticainfo.ru/article/?ELEMENT_ID=1780

[08:00:32.0000] <MikeSmith>
multiple visible <main> https://www.ukv.de/content/

[08:01:22.0000] <MikeSmith>
anyway, with that I’m off soon for the night

[08:02:40.0000] <MikeSmith>
hopefully my mostly untested code for those counters doesn’t cause some unexpected eff up in the checker while I’m sleeping

[08:04:14.0000] <annevk>
Thanks MikeSmith! ❤️

[08:24:34.0000] <foolip>
MikeSmith: thanks!

[08:25:11.0000] <foolip>
I also have stats about what the ancestors usually are now, but my draft comment is at work so it'll have to wait until tomorrow

[08:25:40.0000] <foolip>
But basically, form and section are the most common ones that we're contemplating making invalid

[08:26:17.0000] <foolip>
annevk: ^

[08:41:31.0000] <annevk>
foolip: do those pages make sense though or would a message from the checker do some good?

[08:44:02.0000] <foolip>
annevk: I looked at a few and quickly found one that seemed fine, where <main> was just inside a <section>, and inverting it seems like pointless work

[09:12:50.0000] <annevk>
foolip: I don't think that's the only consideration though

[09:13:16.0000] <annevk>
foolip: section is a sectioning element too and if it's used as such that seems rather wrong, at least if we ever want to make sections work properly

[09:14:04.0000] <annevk>
foolip: if it's a high number, maybe, but otherwise I'm not really convinced

[13:05:13.0000] <wanderview>
are there any ways to generate a network request on a worker thread besides fetch(), xhr, improtScripts(), and es import()?

[13:05:18.0000] <wanderview>
offline canvas or something?

[13:05:30.0000] <wanderview>
^offline^offscreen

[13:15:17.0000] <annevk>
wanderview: new Worker in theory

[13:15:33.0000] <wanderview>
annevk: oh yea... ok

[13:15:59.0000] <annevk>
wanderview: WebSockets/EventSource I guess

[13:16:41.0000] <annevk>
wanderview: pretty sure canvas has no networking btw

[13:17:23.0000] <wanderview>
ok

[13:17:26.0000] <wanderview>
annevk: thanks

[13:40:54.0000] <MikeSmith>
annevk: seems like we need to look at some sample of the documents we have that use <main> in <section> and <form> and make a determination about which cases are misuses and which seem legit

[13:41:14.0000] <MikeSmith>
foolip: ⬆

[13:42:15.0000] <MikeSmith>
and if it turns out that the percentage of misuses are way higher than the percentage of legit uses, then that argues for making it non-conforming

[13:42:50.0000] <MikeSmith>
and for the checker to emit an error for those

[13:44:22.0000] <MikeSmith>
and regardless, unless the legit uses seem to greatly outweigh the misuses, then those still would seem to merit at least a “should not” in the spec

[13:44:36.0000] <MikeSmith>
and for the checker to at least emit a warning

[13:48:09.0000] <MikeSmith>
the stats at this point show so far about 800 cases of each that we could take a look at

[13:48:48.0000] <MikeSmith>
to narrow things, I could also add some more-granular stats

[13:49:58.0000] <MikeSmith>
like, I could get stats on how many of the <section> cases that contain <main> are <section> without a heading

[13:50:54.0000] <MikeSmith>
which is arguably a misuse of <section>, in that it indicates the author is just using where they should be using <div>

[13:52:36.0000] <MikeSmith>
and also because <section> without a heading can be bad for AT users, if the AT exposes each of those <section> even though they have no identifying heading (and so makes exposing them for navigation pretty worthless)

[13:52:54.0000] <MikeSmith>
which is why the checker emits a warning for <section> without a heading

[15:51:17.0000] <fantasai>
Afaict, the DOM methods that use selectors are: querySelector, querySelectorAll, closest, matches, webKitMatches

[15:51:28.0000] <fantasai>
Are there any others?


2018-01-18
[16:00:13.0000] <jyasskin>
Hi HTML folks. aboxhall is working on AOM, and part of that seems to be reflecting ARIA attributes into WebIDL properties. Some "boolean" ARIA attributes have 3 states, true, false, and not-present. For example, <elem aria-expanded="false"> is semantically different from <elem>. Our current guess for how to express this is to make ariaExpanded a `boolean?` attribute on Element, where 'null' means the attribute is

[16:00:13.0000] <jyasskin>
not-present. What do the reflection experts think? annevk, Domenic

[16:03:07.0000] <aboxhall>
also note that <elem aria-expanded> is not valid

[16:03:21.0000] <aboxhall>
at least as currently specced.

[16:14:05.0000] <jyasskin>
aboxhall: We'll need to specify the value of the property when the attribute has an empty value. I'm inclined to follow https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#keywords-and-enumerated-attributes, pretending that the ARIA attributes are enumerated between "true", "false", and missing. Then ARIA's defined default value is the missing value default, and that's what's used for the invalid ""

[16:14:05.0000] <jyasskin>
value.

[16:58:15.0000] <Domenic>
jyasskin: aboxhall: I would reflect as a DOMString. The fact that some of the states use the English words "true" or "false" should not mislead you into thinking they are booleans.

[16:58:45.0000] <aboxhall>
sgtm

[16:59:16.0000] <Domenic>
I was also told some of them use more than those two states (+missing) so that factors into it

[17:01:14.0000] <jyasskin>
Domenic: 'k.

[17:23:18.0000] <TabAtkins>
Learn from CSS's rule: NO BOOLEANS

[17:23:43.0000] <TabAtkins>
else be haunted by the specter of `enum { "true", "false", "file_not_found" }`

[19:55:48.0000] <MikeSmith>
https://bugs.webkit.org/show_bug.cgi?id=181778 webkit adding deprecation warning for documens that use appcache

[19:56:43.0000] <MikeSmith>
> ApplicationCache is deprecated. Please use ServiceWorkers instead

[20:10:27.0000] <aboxhall>
@TabAtkins I think the ship sailed on that one already

[20:11:23.0000] <TabAtkins>
At least they're Boolean strings right now. 😀

[20:14:23.0000] <aboxhall>
some of them :)

[20:14:48.0000] <aboxhall>
https://www.w3.org/TR/wai-aria-1.1/#aria-invalid

[21:26:20.0000] <annevk>
It's somewhat unfortunate ARIA never addressed my feedback on those types back when it was still feasible

[21:26:43.0000] <annevk>
Anyway, strings indeed seem better than nullable booleans

[21:32:59.0000] <annevk>
MikeSmith: yeah, though multiple <main> is three times as high as <main> in <form>, but I guess it might still be worth looking what the actual usage is like

[21:39:31.0000] <MikeSmith>
annevk: ok later today I can bundle up all the logs and then run them through `sort` and `uniq` on them

[21:39:43.0000] <MikeSmith>
maybe after it’s been collecting for a full 24 hours

[21:40:34.0000] <MikeSmith>
to account for getting a range of local differences and what across a whole day

[21:40:48.0000] <MikeSmith>
it’s at around the 14 hours mark now

[21:41:03.0000] <annevk>
MikeSmith: can you share the URLs later too?

[21:41:16.0000] <MikeSmith>
yeah that’s what I mean actually

[21:41:24.0000] <annevk>
MikeSmith: okido

[21:41:36.0000] <MikeSmith>
yeah, that’s what’s in the logs that’s not on the stats page

[21:45:51.0000] <MikeSmith>
also by 24 hours it will have collected data for nearly a million requests (there are 5 separate instances of backend running, each handling 8000+ requests an hour)

[21:50:11.0000] <MikeSmith>
annevk: in other news, dunno if you looked at https://stackoverflow.com/questions/47158940/include-authorization-header-using-fetch-api-post-method but if/when you do, been wondering if you might have any insight

[21:55:18.0000] <annevk>
MikeSmith: added a comment, seems like an impl bug

[21:57:16.0000] <MikeSmith>
k

[21:57:17.0000] <MikeSmith>
thanks

[00:50:59.0000] <annevk>
MikeSmith: HTML build just reported "Error: Could not find or load main class nu.validator.client.SimpleCommandLineValidator"

[00:51:18.0000] <annevk>
MikeSmith: it also says wattsi is out of date

[00:51:21.0000] <annevk>
MikeSmith: https://travis-ci.org/whatwg/html/builds/330258050

[01:14:04.0000] <MikeSmith>
OK

[01:14:18.0000] <MikeSmith>
will get it fixed asap

[01:30:48.0000] <annevk>
thanks

[01:33:51.0000] <tobie>
annevk: looking at whatwg/html#3370. How can I help?

[01:35:16.0000] <annevk>
tobie: I guess there's two questions; how to best go about a [LegacyNonObjectIsNull] for this argument

[01:35:45.0000] <annevk>
tobie: and if you've seen the other requests about a method that takes dictionaries of various types and the type depends on some other argument of the method

[01:35:58.0000] <annevk>
tobie: I vaguely recall the permissions API needing that

[01:36:06.0000] <annevk>
tobie: and some other API having a similar pattern

[01:36:15.0000] <tobie>
annevk: that definitely rings a bell

[01:36:19.0000] <annevk>
tobie: it might be time to start thinking about an abstraction?

[01:36:51.0000] <tobie>
annevk: in the form of an abstract operation specs could call?

[01:39:07.0000] <tobie>
annevk: I haven't thought this through, but that doesn't seem trivial to organize in a way that's generic enough and yet still easier on the editor than writing the thing from scratch

[01:39:33.0000] <MikeSmith>
annevk: pushed new jar to https://sideshowbarker.net/nightlies/jar/vnu.jar so maybe restart the build

[01:39:55.0000] <MikeSmith>
annevk:  as far as the message about the wattsi version, dunno why that would happen

[01:40:03.0000] <MikeSmith>
but in teh travis log I see:

[01:40:06.0000] <MikeSmith>
Step 3/18 : ADD wattsi /whatwg/wattsi

[01:40:06.0000] <MikeSmith>
 ---> Using cache

[01:40:06.0000] <MikeSmith>
 ---> 0bb32c4da856

[01:40:07.0000] <MikeSmith>
Step 4/18 : RUN cd /whatwg/wattsi &&     /whatwg/wattsi/build.sh

[01:40:07.0000] <MikeSmith>
 ---> Using cache

[01:40:09.0000] <MikeSmith>
 ---> ca6e77bba158

[01:40:26.0000] <MikeSmith>
“using cache”, not sure what that means

[01:44:06.0000] <annevk>
MikeSmith: k, I'll restart the build

[01:45:53.0000] <annevk>
tobie: I was thinking of associating the arguments somehow

[01:46:46.0000] <annevk>
tobie: you make it accept a union of dictionaries or some such, but only if the dictionaries contain a value that another argument needs to be for them to be used

[01:47:43.0000] <tobie>
annevk: I dread to think of which algorithms you need to touch to enable that.

[01:48:04.0000] <tobie>
annevk: but it's certainly doable

[01:48:49.0000] <tobie>
annevk: … if you got a twisted mind and a knack for complexity.

[01:49:44.0000] <annevk>
tobie: yeah, maybe prose is better, I just noticed that in https://w3c.github.io/permissions/#permissions-interface it actually depends on a dictionary member

[01:51:33.0000] <tobie>
annevk: yeah that was my concern, the "thing that helps pick the type" might have too many different shapes to allow for a simple enough solution

[02:46:54.0000] <annevk>
MikeSmith: fancy reviewing https://github.com/whatwg/wattsi/pull/67 if it's not too late?

[02:58:13.0000] <annevk>
foolip: could you otherwise review it? And do you know that if we land it, would it be picked up by the HTML build process immediately?

[04:12:53.0000] <foolip>
annevk: changes in wattsi will be automatically used by html-build, yes

[04:13:20.0000] <foolip>
annevk: is it the extra commit you want review of, or all of it?

[04:36:30.0000] <annevk>
foolip: the complete PR as it is now would be best

[04:42:07.0000] <annevk>
foolip: thanks, that comment can be addressed, but is more tricky than you might have thought as later on there is also a conditional for a span element that does something else

[04:42:14.0000] <annevk>
foolip: so I'd have to bring that up a bit

[04:42:27.0000] <annevk>
foolip: but I'll see about doing that

[05:03:10.0000] <annevk>
foolip: that too longer than desired...

[05:03:24.0000] <annevk>
foolip: verifying results now

[05:04:46.0000] <annevk>
foolip: please take another look

[05:05:57.0000] <foolip>
annevk: yes, that isn't what I thought would happen :)

[05:06:50.0000] <foolip>
annevk: oh, so it's a huge if-else branch and that change made the second branch unreachable? makes sense, did we have tests to catch that?

[05:07:14.0000] <foolip>
annevk: reviewed

[05:07:34.0000] <annevk>
foolip: we don't have tests around wattsi other than running html-build

[05:08:01.0000] <annevk>
foolip: this is the main thing why I don't like not committing the output in Git somewhere as it's unclear when we regress something

[05:09:14.0000] <annevk>
foolip: I haven't tried running the code though where that second branch would be unreachable as I had already read ahead at some point and knew I'd have to change that

[05:10:41.0000] <foolip>
annevk: we could commit all output to the whatwg.org repo and deploy from that, but we'd only look at it after things have broken

[05:11:41.0000] <annevk>
foolip: I would not particularly mind such a setup

[05:12:17.0000] <annevk>
foolip: can also help catch bikeshed regressions

[05:12:28.0000] <annevk>
(if we do it for everything)

[05:16:47.0000] <annevk>
foolip: it's weird that the build log claims wattsi is out-of-date, despite it using the latest wattsi

[06:48:08.0000] <tobie>
WebIDL says: "The global environment that a given platform object is associated with can change after it has been created." When does that happen?

[06:57:53.0000] <nox>
tobie: window.open can do that, I think.

[06:58:06.0000] <nox>
Err, document.open, sorry.

[07:00:27.0000] <tobie>
nox: thanks (I've never used document.open iirc, have to look it up)

[07:01:00.0000] <nox>
tobie: I implemented part of it in Servo, my opinion is that the less you know about it, the better your life will be.

[07:01:18.0000] <benjamingr_>
Hmm, I need to respond to a fetch from the main window, do I just postMessage everything back and forth or is there any ETA on being able to create a stream and transfer it?

[07:01:28.0000] <tobie>
nox: the problem is this can pretty much be said about all parts of WebIDL

[07:05:33.0000] <jgraham>
I think document.open is pretty special in that way

[07:07:22.0000] <tobie>
jgraham: in the way of being a net negative to your quality of life?

[07:07:39.0000] <tobie>
jgraham: or in the way its mucks around with realms?

[07:07:46.0000] <tobie>
jgraham: or maybe both

[07:09:49.0000] <annevk>
FWIW, only Firefox replaces the global for document.open()

[07:09:59.0000] <annevk>
I'm no longer convinced that's the best way forward

[07:10:11.0000] <annevk>
Though I also haven't done enough research into the other implementations to make that go away

[07:11:34.0000] <annevk>
benjamingr_: https://github.com/whatwg/streams/issues/244 and https://github.com/whatwg/streams/issues/276 seem to touch on that

[07:12:04.0000] <annevk>
benjamingr_: ricea might know if there's anything recent on transferable streams

[07:12:52.0000] <benjamingr_>
Thanks, I saw those but wasn't sure if those were the most recent

[07:14:12.0000] <benjamingr_>
It would really make our lives easier, we're (re)building a large product on top of ServiceWorkers that intercept video requests and deliver them over WebRTC DataChannels instead of over HTTP

[07:14:37.0000] <annevk>
benjamingr_: can't find anything else and that repo would be the place to have the discussion I think

[07:16:08.0000] <benjamingr_>
Of course, WebRTC on the service worker would be even better, but that's a much bigger thing to request and it looks like it didn't progress a lot since it was last asked 2 years ago.

[07:43:05.0000] <Ms2ger>
tobie, both

[07:48:20.0000] <tobie>
So looking at https://heycam.github.io/webidl/#es-interface, and in particular:

[07:48:31.0000] <tobie>
"The result of converting an IDL interface type value to an ECMAScript value is the Object value that represents a reference to the same object that the IDL interface type value represents."

[07:52:38.0000] <tobie>
Boy, I'm so confused about what the above implies, I can't even formulate a question

[07:55:00.0000] <tobie>
Does that imply that the "platform object" is an underlying object that both WebIDL and ES bindings talk to?

[08:03:26.0000] <tobie>
Or put differently: If I were to specify an abstract operation "create a platform object" that could be called from a WebIDL constructor, how would there be ES objects mapping these WebIDL-created platform objects that could be used in the conversion process quoted above?

[08:24:25.0000] <Ms2ger>
So I guess there's two ways to approach it

[08:24:57.0000] <Ms2ger>
One is that the platform object is something separate from the JS Object value, and there's bidirectional pointers between them

[08:25:16.0000] <Ms2ger>
The other is that a platform object is "just" a JS Object with some extra [[Slot]]s

[08:25:26.0000] <Ms2ger>
Not sure which would be best

[08:47:01.0000] <tobie>
Ms2ger: so when a spec says: "create a new Foo object" (where Foo is a WebIDL interface) what *is* the object created?

[08:47:24.0000] <tobie>
Ms2ger: "an interface type value"?

[08:47:51.0000] <Ms2ger>
Both? :)

[08:49:02.0000] <tobie>
you mean both an interface type value AND an JS "platform object" are created?

[08:49:38.0000] <Ms2ger>
I think that's a reasonable way to spec it

[08:49:42.0000] <tobie>
Ms2ger: or do you mean a single object that is both these things is created?

[08:49:52.0000] <tobie>
Ms2ger: oh, the former.

[08:50:00.0000] <Ms2ger>
Well, that depends on which of my two approaches you pick

[08:50:45.0000] <tobie>
Ms2ger: are you saying the WebIDL spec currently is ambiguous about that?

[08:51:20.0000] <Ms2ger>
Yes

[08:52:05.0000] <Ms2ger>
But it doesn't really matter which way you go; they should be indistinguishable from outside

[08:53:10.0000] <tobie>
Ms2ger: I'd want to be consistent with the rest of the spec

[08:53:18.0000] <tobie>
Ms2ger: and when I read something like: https://heycam.github.io/webidl/#idl-objects

[08:53:33.0000] <tobie>
Ms2ger: I'm quite confused.

[08:54:43.0000] <tobie>
Ms2ger: this really seems to describe platform objects as the ES stuff

[08:55:08.0000] <tobie>
Ms2ger: but then it's not in the bindings section

[08:55:21.0000] <Ms2ger>
I think the problem is that WebIDL doesn't really know how it wants to approach this

[08:56:25.0000] <tobie>
Ms2ger: note this is the same for the {{object}} WebIDL type

[08:56:38.0000] <tobie>
Ms2ger: which remains somewhat of a mistery to me

[08:57:18.0000] <tobie>
Ms2ger: and feels more like: "I couldn't use a dictionary or a record here, so fuck it."

[09:01:29.0000] <tobie>
Ms2ger: looking at https://heycam.github.io/webidl/#es-platform-objects it really seems platform objects designate the JS objects and not the WebIDL ones

[09:02:05.0000] <tobie>
Ms2ger:  so this feels like we need on one hand a "create a interface type value" abstract op

[09:02:59.0000] <tobie>
Ms2ger: and on the other, and "create platform object" abstract op that takes an interface type value and a realm as argument

[09:03:11.0000] <tobie>
s/and/a/

[09:04:04.0000] <Ms2ger>
But what realm would you use? I think you always want to define the realm at the point where you'd use the  "create a interface type value" abstract op

[09:07:20.0000] <Ms2ger>
I guess my question is: what is the benefit of having both algorithms be distinct

[09:08:32.0000] <tobie>
Ms2ger: well, if you want to be able to create a new Foo object in the constructor of Foo, then what you want to be playing with is a WebIDL object, and not a Es object, no?

[09:08:54.0000] <tobie>
Ms2ger: in a spec, that is.

[09:10:02.0000] <Ms2ger>
But you haven't clearly defined the difference between those two yet :)

[09:11:06.0000] <Ms2ger>
I think you either need to say that a WebIDL object "is a" JS object or a WebIDL object "has a" JS object

[09:12:11.0000] <Ms2ger>
And then your "create a platform object" algorithm either creates an object that is both, or it creates two objects and associates them with each other

[09:12:23.0000] <Ms2ger>
However, I need to run

[09:12:26.0000] <Ms2ger>
Good luck :)

[09:13:15.0000] <tobie>
Ms2ger: :D see you


2018-01-19
[01:19:10.0000] <Ms2ger>
ecobos, don't reply to all@

[01:22:59.0000] <ecobos>
Ms2ger: yeah... Should've known it :). Still don't regret it this time

[01:23:50.0000] <Ms2ger>
khuey's ghost will haunt you

[01:24:14.0000] <ecobos>
Hah

[01:33:25.0000] <annevk>
Ms2ger: turns out khuey is pleased: https://twitter.com/khuey_/status/954138271692410880

[01:34:55.0000] <Ms2ger>
Hell froze over, huh

[02:04:55.0000] <annevk>
foolip: I think we need to go back to the "flow content excluding main" construct

[02:05:00.0000] <annevk>
foolip: the current setup doesn't work

[02:05:14.0000] <annevk>
foolip: since now <body><article><div><main> ends up being conforming

[02:05:34.0000] <annevk>
foolip: as <main> can be a child of <div>

[02:18:33.0000] <foolip>
annevk: hmm, right, the difference between allowed children and disallowed descendants in those contructs...

[02:19:31.0000] <annevk>
foolip: yup, kinda glad we're taking our time so I managed to catch this

[02:20:00.0000] <annevk>
foolip: so what I want from you is either saying "an abstraction is fine" or saying I need to list it explicitly everywhere for each element with a flow content content model

[02:20:11.0000] <foolip>
annevk: I would still be quite content with just disallowing <main> in a few specific cases, but something that has the effect of just allowing it in body and and body div+ WFM

[02:20:46.0000] <annevk>
foolip: I want to allow it with only html/body/div/form as ancestors, basically

[02:21:09.0000] <annevk>
foolip: my "flow content excluding main" construct works for that, if consistently applied

[02:21:19.0000] <annevk>
foolip: expanding that construct works too

[02:21:26.0000] <annevk>
foolip: I don't see what else can work

[02:22:25.0000] <foolip>
annevk: I can't either, but give me a sec to see how flow content is defined again

[02:23:25.0000] <annevk>
foolip: one alternative might be that we define it in prose in the <main> element section, but that kinda goes against precedent I think

[02:23:57.0000] <foolip>
annevk: I was just thinking that, could we just say something about the ancestor elements?

[02:24:16.0000] <foolip>
you're right that it's backwards compared to the way that content models flow only "downwards" though

[02:24:29.0000] <annevk>
foolip: maybe it's okay, I found some precedent

[02:24:32.0000] <annevk>
foolip: "An area element with a parent node must have a map element ancestor."

[02:24:48.0000] <annevk>
foolip: this would be that, except some kind of negation

[02:25:08.0000] <annevk>
foolip: "A main element must only have html, body, div, and form element ancestors."

[02:25:39.0000] <foolip>
annevk: yeah, that'd work for me.

[02:25:46.0000] <foolip>
what about custom elements?

[02:26:13.0000] <foolip>
how do they work with validity generally?

[02:26:18.0000] <foolip>
MikeSmith: ^

[02:27:02.0000] <annevk>
foolip: currently they can only be used where phrasing content is expected

[02:27:10.0000] <annevk>
foolip: that kinda seems like a bug though, maybe?

[02:27:51.0000] <foolip>
annevk: yeah, seems like they should be transparent, rather?

[02:28:30.0000] <annevk>
Hmm, I'm probably misunderstanding how that works, since one of the categories is "flow content" and the content model is "transparent"

[02:29:51.0000] <foolip>
annevk: ah, so the definition of flow content actually includes autonomous custom elements

[02:30:09.0000] <foolip>
and they're transparent, so it all seems fine

[02:31:39.0000] <MikeSmith>
foolip: For custom elements, as far as the checker behavior goes, the custom elements and their subtrees are ignored

[02:31:43.0000] <MikeSmith>
skipped

[02:32:02.0000] <annevk>
MikeSmith: wow, that goes a little bit against the spec

[02:32:43.0000] <annevk>
MikeSmith: if you use <a> inside <whatever-yo> you'd still want it checked I think

[02:33:24.0000] <MikeSmith>
I guess I overrated things. the actual behavior conforms to whatever the spec says

[02:33:37.0000] <MikeSmith>
Ah no

[02:34:04.0000] <MikeSmith>
as far as the case you mention there

[02:34:45.0000] <MikeSmith>
I'm not sure that <a> will get checked

[02:35:04.0000] <MikeSmith>
not sure from memory

[02:35:29.0000] <MikeSmith>
would need to look back at the code

[02:35:40.0000] <MikeSmith>
well, or just test it

[02:36:41.0000] <MikeSmith>
maybe I made the behavior be that it's transparent

[04:03:41.0000] <annevk>
Transparent would be correct per the content model of the spec

[04:15:28.0000] <MikeSmith>
annevk: OK yeah I misspoke before. Just tested and found that it does check the <a>

[04:15:36.0000] <MikeSmith>
so I think we’re all good there

[04:19:49.0000] <foolip>
tobie: in https://whatpr.org/html/3354/dom.html#kinds-of-content an image doesn't work because of the URL. a problem for all pr preview stuff?

[04:20:07.0000] <tobie>
yes

[04:30:05.0000] <foolip>
annevk: before https://github.com/whatwg/html/pull/3354 is merged, do you think we should write down somewhere why it's changing?

[04:45:56.0000] <annevk>
foolip: at least the commit body should

[04:46:22.0000] <foolip>
annevk: right. so what would we say has changed here, except that we spent some time on it?

[04:46:40.0000] <tobie>
foolip: the way I would go about that is to have all assets on the gh-branch if that's how you're setup, and just change the src attribute to point to the new asset.

[04:46:59.0000] <foolip>
for me, the main thing is that at least Chromium treats <header> and <footer> like generic containers in some contexts, but <main> always maps to main

[04:47:13.0000] <foolip>
and the (unverified) claim that this is true elsewhere too

[04:48:31.0000] <annevk>
foolip: what has changed is that we finally made an effort to close the issue

[04:49:04.0000] <annevk>
foolip: and as I said elsewhere I regret not doing so much sooner

[04:49:08.0000] <foolip>
annevk: I think that's true, yeah

[04:49:45.0000] <foolip>
annevk: but at least the last time around it was not salient to me that <header>, <footer> and <main> had different mappings in implementations, or maybe I ignored it

[04:49:55.0000] <foolip>
(or it wasn't true then)

[04:50:28.0000] <annevk>
foolip: if we do a blog post it should contain an apology of sorts since plenty of folks have let us know it was important to them

[04:50:49.0000] <foolip>
FWIW, it seems like these mappings should be pretty easy to test with wpt using the computedRole API here: https://groups.google.com/a/chromium.org/d/msg/blink-dev/WToTEn4lveY/0DDozNNQqE8J

[04:55:02.0000] <foolip>
annevk: maybe, I think I'd want to nitpick the wording there, but a blog post would be nice

[04:55:24.0000] <foolip>
on to the bloody data: URL thing

[10:47:50.0000] <annevk>
Getting close though on data: URLs


2018-01-20
[07:58:12.0000] <devsnek>
join node-build


2018-01-22
[03:12:21.0000] <hsivonen>
hmm. looks like the html5lib tree construction test format may have changed againg while I wasn't paying attention

[03:16:37.0000] <hsivonen>
it's the #new-errors directive

[03:49:56.0000] <zcorpan>
hsivonen: yeah that's part of the effort to standardize the error codes, which was done for tokenizer and in progress for tree-builder

[04:13:55.0000] <nox>
https://twitter.com/nokusu/status/955412996775399424

[07:08:07.0000] <wanderview>
annevk: am I missing something about `requestStorageAccess()`?  won't every 3rd party ad/tracking iframe just call this whenever it can?

[07:08:41.0000] <wanderview>
without a prompt there is no dis-incentive to spamming it

[07:09:41.0000] <annevk>
wanderview: the reply I got suggested some kind of complicated heuristic might work

[07:09:53.0000] <annevk>
wanderview: I'm fairly skeptical of this entire setup though

[07:10:01.0000] <wanderview>
annevk: so uh, why not just grant permissions automatically when that heuristic matches?

[07:10:09.0000] <wanderview>
why have a method that gets spammed at all?

[07:10:54.0000] <annevk>
wanderview: I'm not really the right person to try to defend this proposal I think

[07:11:12.0000] <wanderview>
annevk: I wasn't try to ask you to... more just... I thought maybe I was missing something

[07:13:20.0000] <wanderview>
annevk: I asked on the issue

[12:52:30.0000] <smaug____>
igrigorik: there aren't resource timing on workers wpt tests, right?

[12:53:00.0000] <smaug____>
/me is looking at https://wpt.fyi/resource-timing but perhaps there are some tests elsewhere too?


2018-01-23
[00:52:40.0000] <kochi>
What's the major use case for `view` property of UIEvents?

[00:53:11.0000] <kochi>
To see if it's in <iframe>?

[01:03:39.0000] <annevk>
kochi: it's similar to document.defaultView; it dates from a time when they envision a different eventual architecture

[01:04:30.0000] <annevk>
kochi: I think the idea was that there would be multiple views or some such, each which could handle its own events, but I'm not sure if any implementation ever realized it

[01:04:45.0000] <kochi>
hmm, then the current motivation to maintaining UIEvents is only for having `details`, then?

[01:05:14.0000] <annevk>
kochi: https://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/views.html (although that doesn't define the UIEvent thing)

[01:05:26.0000] <annevk>
kochi: yeah, I think so

[01:06:32.0000] <annevk>
Interesting, http://www.w3.org/TR/DOM-Level-2-Views redirects to a dated URL; that's an improvement of sorts

[01:06:51.0000] <kochi>
then, pointer events, which inherits UIEvents define all `detail` are default zero... so it could have been non-UIEvents, then?

[01:07:38.0000] <annevk>
kochi: yeah, if pointer events doesn't use the interface I don't think it should have inherited from it

[01:07:49.0000] <annevk>
kochi: maybe that can still be cleaned up?

[01:07:52.0000] <annevk>
probably not

[01:08:52.0000] <kochi>
annevk: maybe it's possible, but I don't think anyone appreciates the value of the cleanup at the risk of breaking something.

[01:09:14.0000] <annevk>
yeah

[01:14:26.0000] <kochi>
/me feels I'm learning something new every day.

[01:15:28.0000] <annevk>
😊 that's what keeps it fun

[01:17:34.0000] <kochi>
exactly.

[07:27:43.0000] <smaug____>
igrigorik: FYI, per spec performance.onresourcetimingbufferfull is never triggered, since the event is supposed to be fired on Document

[07:27:53.0000] <smaug____>
and I have no idea why it has bubbles set to true

[07:29:00.0000] <hsivonen>
what's the preferred way to load a file into an array in memory as part of gtest setup?

[07:29:45.0000] <hsivonen>
oops. wrong channel


2018-01-24
[23:26:00.0000] <foolip>
Domenic: I think there's a bug in https://html.spec.whatwg.org/#HTMLAllCollection-call

[23:26:09.0000] <Domenic>
noooo

[23:26:13.0000] <foolip>
just a small one

[23:26:19.0000] <foolip>
what should document.all(undefined) do?

[23:26:52.0000] <foolip>
Unless there's something is JS that I don't know about, these "custom bindings" need to handle it to be consistent with document.all.item(undefined), right?

[23:27:17.0000] <Domenic>
I don't know if consistency is the goal

[23:27:23.0000] <Domenic>
The goal was matching browsers IIRC

[23:27:30.0000] <Domenic>
I think we covered this case...

[23:27:46.0000] <foolip>
Domenic: you're right, that'd be fine, but Safari now passes a test that contradicts the spec on this point

[23:28:16.0000] <othermaciej>
do other browsers fail the test?

[23:28:45.0000] <Domenic>
So apparently it was intentional to make it return the element with ID "undefined" https://github.com/whatwg/html/pull/2932#issuecomment-327085227

[23:28:46.0000] <foolip>
It's the "legacy caller with undefined" one in https://wpt.fyi/html/infrastructure/common-dom-interfaces/collections/htmlallcollection.html, although the Safari run there is busted (bug filed yesterday)

[23:29:00.0000] <Domenic>
I wish wpt.fyi were reliable :(

[23:29:10.0000] <foolip>
Domenic: it will be!

[23:29:34.0000] <foolip>
/me fails to find anyone at Bocoup to poke right here :)

[23:29:42.0000] <Domenic>
It's been hyped for so long, I look forward to the day it's usable

[23:29:47.0000] <othermaciej>
too bad there is no Edge result there

[23:30:08.0000] <othermaciej>
(Though I don't know if there are ven to be most trusted on the most compatible document.all emulation)

[23:30:28.0000] <foolip>
"Make document.all.item(undefined)" huh, that's not what I get by just trying to implement the spec though

[23:30:34.0000] <Domenic>
The tests basically don't seem to match the spec PR

[23:30:47.0000] <foolip>
How could it, given the "(HTMLCollection or Element)? item(optional DOMString nameOrIndex)" IDL?

[23:31:28.0000] <Domenic>
Hmm right I'm confused and maybe that post is confused

[23:31:45.0000] <Domenic>
Sigh maybe trying to decipher our intent here is stupid and we should try to figure it out from compat matrices again

[23:32:15.0000] <foolip>
The addition in https://github.com/whatwg/html/pull/2932/commits/ec03b38df55f8fddf115d9c704babd0710966ccc that would have made it so seems to not have been landed

[23:33:11.0000] <Domenic>
OK so I think your original diagnosis was right

[23:33:18.0000] <Domenic>
The [[Call]] should be consistent with item()

[23:33:45.0000] <Domenic>
https://github.com/whatwg/html/commit/0679448c59cb4cd69019be1e1f35fee1bcbc9c66 was supposed to be editorial

[23:33:59.0000] <Domenic>
But it didn't take care of aligning document.all(undefined) with document.all.item(undefined)

[23:34:57.0000] <foolip>
Domenic: https://wpt.fyi/html/infrastructure/common-dom-interfaces/collections/htmlallcollection.html?sha=13eaad17a4 had good runs for Edge and Safari

[23:35:23.0000] <Domenic>
So like a 2/2 split it looks like

[23:35:29.0000] <foolip>
Domenic: I have a fix I'm about to send, saying "If argumentsList's size is zero, or if argumentsList[0] is undefined, return null."

[23:35:36.0000] <Domenic>
But we went with Safari because they'd been keeping up to date with spec updates and we didn't want to keep churning them

[23:35:40.0000] <Domenic>
Yes that sounds perfect

[23:35:42.0000] <foolip>
Is that a coherent say to thing, or does JS do something?

[23:38:41.0000] <foolip>
Domenic: https://github.com/whatwg/html/pull/3392 (commit message a bit rushed, feel free to nitpick)

[23:39:35.0000] <annevk>
Given that the time from "there's a bug to PR" is rather short, maybe give it a day before merging?

[23:40:21.0000] <Domenic>
I dunno seems like a straightforward regression fix

[23:40:40.0000] <annevk>
nm

[23:40:43.0000] <foolip>
annevk: I'm not in a rush if you want to ask someone

[23:40:55.0000] <annevk>
Nah, I'm just scared of document.all

[23:41:40.0000] <foolip>
This is from me reviving my old change to match the spec to be able to forget about it forever, when I found that legacycaller was gone and custom bindings still needed :)

[23:43:23.0000] <annevk>
Whoa, Promise.prototype.finally

[23:43:44.0000] <Domenic>
The good news is that legacycaller is gone from everywhere else that would need it, like object and embed

[23:48:21.0000] <foolip>
Domenic: looks like that's even true in Blink actually, amazing

[00:21:27.0000] <foolip>
/me removes remaining traces: https://chromium-review.googlesource.com/c/chromium/src/+/883002

[02:54:06.0000] <smaug____>
annevk: do you happen to know which spec might refer to "add a PerformanceResourceTiming entry" in https://w3c.github.io/resource-timing/#idl-def-performanceresourcetiming

[02:54:39.0000] <smaug____>
/me wonders what sync event dispatch there

[02:57:58.0000] <smaug____>
s/what/that/

[02:59:05.0000] <annevk>
smaug____: all I know is that WG routinely does bad layering so I'm not surprised

[02:59:21.0000] <smaug____>
yeah

[02:59:33.0000] <smaug____>
I'm trying to figure out what should happen for example with sync XHR

[03:02:21.0000] <annevk>
smaug____: file an issue?

[03:02:29.0000] <smaug____>
yeah, just writing it

[03:02:36.0000] <annevk>
smaug____: it seems like that should be integrated with XHR or Fetch somehow and I know for a fact it's not

[03:02:54.0000] <annevk>
smaug____: apparently they also uniquely identified XHR despite nothing else in the networking stack doing so :/

[03:03:10.0000] <annevk>
smaug____: I've yet to complain though, still working through review / issues I wanted to tackle yesterday

[03:04:33.0000] <yoav>
annevk & smaug____: please file issues

[03:04:51.0000] <smaug____>
yoav: these specs are so... unimplementable

[03:05:12.0000] <smaug____>
implementations seem to be full of guesswork

[03:05:24.0000] <annevk>
yoav: I wish whoever wrote these specs would file issues as you're supposed to do when you monkey patch all the things

[03:05:36.0000] <yoav>
we've inherited that spec along with its tech debt. Currently figuring out who can dedicate time to work on open issues

[03:05:50.0000] <annevk>
yoav: having to find out someone added yet more junk to XHR in 2018 is not great

[03:06:08.0000] <yoav>
https://github.com/w3c/resource-timing/milestone/2

[03:06:16.0000] <yoav>
Is the XHR stuff a recent addition/

[03:06:18.0000] <yoav>
?

[03:06:45.0000] <annevk>
I have no idea, but I learned about it a couple hours ago

[03:07:06.0000] <annevk>
Which is weird, being the maintainer of XHR for over a decade

[03:08:35.0000] <yoav>
annevk: I'm guessing you're referring to the `initiatorType`

[03:09:14.0000] <annevk>
yoav: yeah!

[03:09:17.0000] <yoav>
Feels like something that can be fixed, as initiatorType is extremely broken and inconsistent

[03:09:47.0000] <yoav>
I want to kill it and create an "initiator" that is (at least roughly) based on Request.destination

[03:10:22.0000] <yoav>
but for that we need to fix all the L2 bugs first...

[03:11:16.0000] <yoav>
annevk: unrelated, if a Link header has a relative URL, what URL is that relative to?

[03:11:24.0000] <yoav>
The document or the resource?

[03:12:06.0000] <yoav>
https://tools.ietf.org/html/rfc5988#section-5.1 seems relevant

[03:12:42.0000] <yoav>
Note that any base IRI

[03:12:42.0000] <yoav>
   from the message's content is not applied.

[03:12:58.0000] <yoav>
but I don't understand what "Note that any base IRI from the message's content is not applied."

[03:13:04.0000] <yoav>
actually means

[03:13:16.0000] <yoav>
(sorry for the copy/paste shenanigans)

[03:13:44.0000] <yoav>
I think it refers to <base href>

[03:13:58.0000] <yoav>
but not sure

[03:14:14.0000] <yoav>
and not clear what to do if the Link header is on a subresource

[03:21:51.0000] <yoav>
https://github.com/w3c/resource-timing/issues/142

[03:22:05.0000] <annevk>
yoav: I'd use the same as the Location header

[03:22:16.0000] <yoav>
where is that defined?

[03:22:41.0000] <annevk>
yoav: 5.3 of https://fetch.spec.whatwg.org/#concept-http-fetch

[03:23:33.0000] <annevk>
yoav: you probably need to consider service workers somehow and actually define when Link gets parsed

[03:23:41.0000] <yoav>
OK, so relative to the subresource URL?

[03:23:46.0000] <annevk>
yoav: message contents would indeed be <base>

[03:24:22.0000] <annevk>
yoav: yeah, I'm not entirely sure what that means for synthetic responses atm

[03:25:51.0000] <yoav>
what do you mean by "synthetic responses"?

[03:26:53.0000] <annevk>
yoav: new Response()

[03:27:03.0000] <yoav>
ko

[03:27:05.0000] <yoav>
ok

[03:29:53.0000] <yoav>
intuitively, seems like that would depend on the Request the Response is sent on

[03:32:05.0000] <yoav>
annevk: Does a step before 5 in the HTTP fetch concept make sense for such processing?

[03:34:50.0000] <annevk>
yoav: yeah seems reasonable

[04:46:08.0000] <annevk>
yoav_: thanks for filing that issue, added a comment

[06:53:04.0000] <annevk>
<canvas> is such a mess

[06:53:23.0000] <annevk>
I hope nobody uses it as a copy-and-paste template

[06:54:11.0000] <annevk>
I wish Ms2ger never filed those issues so I could have stayed ignorant

[06:54:47.0000] <Ms2ger>
I'm going to interpret that as a compliment :)

[06:58:39.0000] <annevk>
Sigh, and the checks createPattern and createImageBitmap do are not quite equivalent

[06:59:11.0000] <annevk>
Although maybe that's doable still

[07:39:11.0000] <gsnedders>
Can someone else add themself as an owner in wpt for canvas BTW?

[07:43:41.0000] <annevk>
Wait only Safari supports OffscreenCanvas?

[07:44:35.0000] <annevk>
Maybe that makes sense given that Safari was first with <canvas> too

[07:47:04.0000] <gsnedders>
annevk: I didn't think Safari supported it? Chrome does, behind flag, and Firefox does, behind flag, WebGL only

[07:48:32.0000] <annevk>
Per https://webkit.org/blog/8039/release-notes-for-safari-technology-preview-45/ it does, but only webgl

[07:49:04.0000] <annevk>
And also per my local testing, which is always extremely reliable...

[07:50:26.0000] <annevk>
You can trust me since I once got paid to do QA

[07:58:13.0000] <gsnedders>
:)

[08:11:35.0000] <Ms2ger>
annevk, that matches the code I've read

[08:12:22.0000] <Ms2ger>
Igalia is working on 2d support, I believe


2018-01-25
[23:57:43.0000] <sangwhan>
If I understood the intention correctly - transform streams are only intended to be used to build linear (non-branching) transformation pipelines, is this correct?

[23:58:19.0000] <sangwhan>
e.g. not this: https://upload.wikimedia.org/wikipedia/commons/5/55/ArquitecturaPipeAndFilter.jpeg

[00:33:16.0000] <annevk>
sangwhan: afaik they have an input and output, but what you do inside is up to you

[00:33:34.0000] <annevk>
sangwhan: so you could tee the input, do something, and then combine it again before sending it onward

[00:35:33.0000] <sangwhan>
annevk: okay, so tee then doing two parallel transforms is supposed to work?

[00:36:39.0000] <annevk>
sangwhan: I mean, I don't see why not? But I'm very far from an expert

[00:38:32.0000] <sangwhan>
annevk: Neither am I - trying to figure out how to combine the two later

[00:40:16.0000] <sangwhan>
I guess you just read from two and do your thing, I think I'm slowly making sense out of this now

[00:40:31.0000] <annevk>
sangwhan: yeah, that's how I'd think of it too

[00:42:37.0000] <sangwhan>
annevk: thanks, think I can probably scrub that off the list now :)

[01:50:22.0000] <annevk>
MikeSmith: interested in helping gathering data on h1/hgroup? https://github.com/whatwg/html/issues/83#issuecomment-360415905

[01:51:36.0000] <MikeSmith>
annevk: hai

[01:51:46.0000] <MikeSmith>
Steve pinged me about that too

[01:52:00.0000] <MikeSmith>
will add some use counters to the checker

[01:52:46.0000] <annevk>
<3

[01:54:20.0000] <annevk>
Ms2ger: is https://github.com/whatwg/html/issues/3323#issuecomment-360413258 an argument for WebKit's behavior?

[01:54:35.0000] <Ms2ger>
/me looks what webkit does

[01:54:44.0000] <annevk>
Ms2ger: I don't really understand what you mean by it

[01:54:47.0000] <Ms2ger>
Yes

[01:55:37.0000] <annevk>
Ms2ger: but 300/150 is not the maximum size in WebKit, so it's not logical rounding

[01:55:47.0000] <tantek>
wait hgroup is still a thing?

[01:55:51.0000] <annevk>
Ms2ger: it looks much more like trying and then falling back to a default

[01:55:58.0000] <annevk>
tantek: euh yes?

[01:56:13.0000] <Ms2ger>
annevk, 300x150 is the size of the canvas argument

[01:56:54.0000] <annevk>
Ms2ger: ah okay, so what does WebKit do if the <canvas> is too large?

[01:57:12.0000] <Ms2ger>
Throw RangeError, I think

[01:57:24.0000] <Ms2ger>
Lemme check if there's a test for that

[01:59:26.0000] <Ms2ger>
Oh no, InvalidStateError (not sure why)

[01:59:35.0000] <Ms2ger>
http://w3c-test.org/2dcontext/imagebitmap/createImageBitmap-invalid-args.html ("createImageBitmap with an oversized canvas source.")

[02:12:14.0000] <annevk>
Ms2ger: I see, if you do eager clipping the WebKit behavior makes some

[02:16:59.0000] <Ms2ger>
I think that makes the most sense, but I'm happy whichever way you go, as long as it's clear :)

[02:29:41.0000] <annevk>
"As long as it's clear" such a high bar

[02:55:03.0000] <Ms2ger>
It's canvas, so I'll settle for "sorta clear" ;);

[03:19:28.0000] <jgraham>
Trasparent black?

[03:32:39.0000] <Ms2ger>
/me covers jgraham in transparent black

[06:32:58.0000] <annevk>
tobie: I think you don't understand, the idea is that you pay the W3C: https://www.w3.org/support/

[06:33:34.0000] <annevk>
tobie: that's how you become a friend, not by doing unpaid work

[06:34:42.0000] <tobie>
annevk: oh boy. What is this even

[06:35:36.0000] <annevk>
tobie: it's a way to get even more enraged on Twitter

[06:36:36.0000] <annevk>
tobie: this reminds me of how you get a certificate for being a chair, but not even a thank you for tons of editing/review work

[06:37:06.0000] <jgraham>
tobie: Less helpfully, it's "As if on cue", not "queue". Isn't English wonderful.

[06:37:53.0000] <jgraham>
You get a certificate?

[06:37:56.0000] <jgraham>
hahahaha

[06:39:51.0000] <tobie>
jgraham: arg. I had doubts about that when I wrote it. should have checked.

[06:41:16.0000] <tobie>
also I blame data structures.

[06:44:34.0000] <tobie>
This is all sangwhan's fault for tweeting about this in the first place.

[06:45:12.0000] <nox>
annevk, tobie: MFW we don't even remember what's an identifier

[07:01:36.0000] <tobie>
nox: I'm not super I follow. :-/

[07:01:47.0000] <tobie>
*super sure

[07:01:57.0000] <nox>
tobie: https://github.com/whatwg/html/issues/3238#issuecomment-360486782

[07:02:29.0000] <tobie>
nox: oh!

[07:02:39.0000] <tobie>
nox: we can easily tweek that rule

[07:02:48.0000] <nox>
Can we twerk the rule?

[07:03:12.0000] <nox>
Anyway, yeah we can definitely change WebIDL, I was just stating its current state.

[07:03:13.0000] <tobie>
me and spelling aren't friends today

[07:04:22.0000] <tobie>
nox: sure. But sometimes it's a lot harder to do so. For that particular case, it's actually really simple.

[07:05:06.0000] <tobie>
nox: given the current state its an artificial subset of what the grammar supports

[07:05:15.0000] <tobie>
nox: *is

[07:05:25.0000] <nox>
tobie: Yep yep.

[07:06:00.0000] <nox>
tobie: Also, I enjoy how Edge's WebIDL parser seems to be waaaaay more liberal than any other.

[07:06:22.0000] <tobie>
nox: I'm not sure I actually want to hear about that.

[07:06:33.0000] <nox>
tobie: Oh no I'm not saying it's a bad parser,

[07:06:47.0000] <nox>
just that they didn't seem to have implemented a lot of artificial constraints from the spec.

[07:07:13.0000] <tobie>
nox: neither was I implying that's what you were saying.

[07:07:47.0000] <tobie>
nox: I'd just like not to have interop parsing issues between different WebIDL implementations.

[07:08:06.0000] <nox>
tobie: Found what I had in mind: https://github.com/whatwg/html/issues/775#issuecomment-190851825

[07:08:17.0000] <nox>
"legacycaller getter (HTMLCollection or Element)? item((unsigned long or DOMString) nameOrIndex);" YOLO

[07:12:39.0000] <tobie>
🙈 🙉 🙊

[07:14:08.0000] <Ms2ger>
nox, what's disallowed about that?

[07:14:48.0000] <nox>
Ms2ger: Can't combine legacycaller and getter (IIRC, not sure I remembered that part well), and a getter argument type must be unsigned long or DOMString, it can't be an union of them, or be anything else.

[07:15:03.0000] <Ms2ger>
Oh, fair

[07:15:37.0000] <nox>
Ms2ger: But yeah, it does sound weird,

[07:16:26.0000] <nox>
their parser and the semantics they give to WebIDL are cleaner, but it's not like we are going to change all existing parsers and toolchains for the sake of the orthogonality of features.

[10:58:40.0000] <annevk>
Domenic: tobie: if you want to refer to the JavaScript value of something that passed as "any" across the boundary, what's the pattern for that? https://github.com/whatwg/html/pull/3370#pullrequestreview-91552683

[10:58:58.0000] <annevk>
Domenic: tobie: the conversion it does at the moment seems wrong, since there's no conversion afaik, there just exists a JS value

[11:35:53.0000] <Domenic>
annevk: tobie and I talked about making this more explicit last week. We think maybe requiring explicit coercion makes the most sense even for types that are just 1-1 containers like any or interface types.

[11:36:31.0000] <annevk>
Domenic: ok, I guess I’ll leave this then

[11:36:33.0000] <Domenic>
We'd make this explicit by defining "corresponding IDL value" and "corresponding ECMAScript value" or similar.

[11:37:13.0000] <Domenic>
Right now there are several handwavey phrases used inside the Web IDL spec. Outside that spec I guess most people use conversions.

[11:38:14.0000] <annevk>
Allowing an IDL any to be passed to dict extraction might be nice too

[11:38:41.0000] <annevk>
And I guess using Type() on IDL any is wrongish too

[11:38:50.0000] <annevk>
Need to reverse those steps

[11:40:15.0000] <Domenic>
I argued a bit for allowing implicit interchange between those types. But I realized I am biased because I work a lot in spec areas that are on the boundaries. So for most people allowing implicit treatment as either would be confusing.

[11:42:05.0000] <annevk>
sg

[13:20:00.0000] <lgrahl>
Hey everyone. :)

[13:20:06.0000] <lgrahl>
annevk: ping

[13:21:29.0000] <annevk>
Heya, I hope Domenic can help you out as I’m about to sleep 💤

[13:21:41.0000] <lgrahl>
Okay, no worries.

[13:22:00.0000] <lgrahl>
Domenic: ping

[13:22:04.0000] <Domenic>
What's up?

[13:22:20.0000] <lgrahl>
Have you had a look at the data channel streams discussion lately?

[13:24:06.0000] <Domenic>
I've been trying to follow, although I haven't had time to really digest. My main impression is that you all know more about the data channel domain than I do, and in the streams domain you seem to be pretty on track as well, so I'm positive :)

[13:24:59.0000] <lgrahl>
That's good for starters. :) Do you have an idea what Harald is on about (https://github.com/w3c/webrtc-pc/issues/1732#issuecomment-360507120)? I'm quite puzzled...

[13:25:18.0000] <lgrahl>
Is there something related to Blob I have not seen so far?

[13:25:57.0000] <Domenic>
Hmm

[13:26:20.0000] <Domenic>
I mean they're vaguely related in that both blobs and streams allow you to not hold the data all in memory at one time?

[13:26:37.0000] <Domenic>
It almost feels like a wrong-thread though, weird.

[13:27:40.0000] <lgrahl>
I thought maybe you're familiar with Blob as well and there's some way to get a stream out of a Blob... even though I can already see that it would fail on the receiver side with the current API.

[13:28:35.0000] <lgrahl>
Because it really is a chicken-egg problem: How do I know what the user wants to do with the data (in form of a Blob) before it's complete.

[13:30:26.0000] <Domenic>
Ah, there is a hacky way to convert blob to stream actually

[13:30:26.0000] <lgrahl>
What would really help me is a side-by-side comparison of streams vs. Blob. I think that should do as a viable response to that comment. Do we have something like that somewhere? Thinking of stuff like backpressure, ...

[13:30:32.0000] <Domenic>
(new Response(blob)).body

[13:31:01.0000] <lgrahl>
Ah sure, using the body mixin.

[13:31:03.0000] <Domenic>
I guess we don't have that preexisting, because they're really different... you can't actually get at the data in the blob without using FileReader which is a huge mess...

[13:31:43.0000] <lgrahl>
Yeah, it is and it's also really, really slow.

[13:33:45.0000] <lgrahl>
(In case you're interested how slow in comparison: https://jsperf.com/dc-reassembly)

[13:35:30.0000] <lgrahl>
Okay, so we don't have that... but is there a short document that emphasizes the advantages of streams in comparison with what we have in browsers at the moment?

[13:41:00.0000] <lgrahl>
What I have in mind is: Handling backpressure on both sides (I'm not actually sure the term 'backpressure' is applicable to both sides), low-level API when needed, high-level API when possible (pipeTo), ... and I'm sure there are other advantages I haven't considered, yet.

[14:08:54.0000] <lgrahl>
Domenic: Ping (still there?) :)

[14:09:12.0000] <Domenic>
lgrahl: sorry, in meetings for the next while

[14:09:41.0000] <Domenic>
https://github.com/whatwg/streams/blob/master/Requirements.md and https://github.com/whatwg/streams/blob/master/FAQ.md might be somewhat helpful

[14:10:05.0000] <Domenic>
https://streams.spec.whatwg.org/#intro and the following section probably should help too

[14:10:19.0000] <Domenic>
But in the end we might be missing exactly what you describe, which is good feedback and we should fix...

[14:11:11.0000] <lgrahl>
Cheers! I'll have a look at these.

[14:15:11.0000] <Domenic>
(ricea ^)


2018-01-26
[21:32:00.0000] <annevk>
Oh lgrahl left. I was gonna point out that these are the same people that initially passed on promises. I hope they won’t make that mistake again…

[00:08:01.0000] <annevk>
hsivonen: really glad we got that blame setup for the HTML Standard btw

[00:08:06.0000] <annevk>
hsivonen: already traced back many things

[00:08:16.0000] <annevk>
hsivonen: and much quicker than calculating it locally

[03:41:56.0000] <gabri>
Good morning/evening, I'm currently writing my bachelor thesis on service worker and progressive web apps. I'd like to write a small historic introduction of the steps that lead to the current ServiceWorker definition by the W3C and so I discovered the existance of WHATWG ( people outside doesn't know you exist). Can someone share to me some resource of the Web Workers definition story? Did W3C used some part of them to define Service W

[03:43:26.0000] <surma>
@gabri: You can find an extensive history in the repository of the spec: https://github.com/w3c/ServiceWorker

[03:43:51.0000] <surma>
It’s not necessarily easy to consume, but if you look at older/closed issues and the discussions therein, you should find a lot of interesting information

[03:44:49.0000] <surma>
Stream spec: Is there anything speaking against turning `controller` in the note here into a link? I often find myself looking up how to define an `underlyingSource` and then having no link to the definition of controller in the vicinity. https://streams.spec.whatwg.org/#rs-constructor

[03:45:50.0000] <gabri>
thank you @surma

[03:50:19.0000] <annevk>
ricea: ^^ question about streams

[03:53:29.0000] <annevk>
gabri: workers were inspired by Google Gears; see https://lists.w3.org/Archives/Public/public-whatwg-archive/2008Jul/0110.html for one of the earlier messages summarizing the initial addition

[03:59:29.0000] <annevk>
foolip: so I'm almost never having problems with the build script anymore

[03:59:41.0000] <annevk>
foolip: adding retry seemingly helped

[04:00:13.0000] <annevk>
Whenever it fails now it's just my mistake

[04:00:28.0000] <foolip>
annevk: huh, which bit are you guessing was failing before?

[04:01:29.0000] <annevk>
foolip: curl for bikeshed was failing every now and then

[04:01:38.0000] <annevk>
foolip: I added https://github.com/whatwg/whatwg.org/commit/0db31edad82b56f6419fc555fb9c2d334db7bc16#diff-e9607901cbff22c83689e88cb1c1eca6 and haven't seen it since

[04:03:01.0000] <foolip>
Ok, so Bikeshed. Well, I guess retry is the way of reliability when networks are involved, even though it feels icky

[04:03:16.0000] <foolip>
I never feel icky about whatever TCP does though :)

[04:05:16.0000] <annevk>
Well, curl for whatwg.org fails sometimes too, but that I cannot patch in the build script

[04:05:31.0000] <annevk>
Would have to patch each caller and it hasn't happened a lot recently so I'm not too bothered

[04:05:40.0000] <annevk>
And yeah, it's bugs all the way down and up

[04:11:52.0000] <lgrahl>
annevk: Read your last message in the log. Yeah, what can I say... it's not easy to convince these people.

[04:12:16.0000] <annevk>
lgrahl: I added a comment on the issue that I hope helps

[04:12:39.0000] <annevk>
lgrahl: but my understanding of WebRTC is not great...

[04:12:42.0000] <lgrahl>
Yeah, thanks. I was too tired of it yesterday to add anything.

[04:17:27.0000] <lgrahl>
At least API-wise it's not great.

[04:19:17.0000] <lgrahl>
I have a quick question for the Fetch API: IIRC one sends a HTTP request and gets a body mixin as soon as the header of the response has been received. And then one can choose in what kind of data format they want to have it. Is that correct or have I missed something? Disclaimer: I haven't read all of it.

[04:21:29.0000] <annevk>
lgrahl: reading the backlog, a blob provides async access to fixed-size memory (sometimes backed by a file, if the file is changed, the blob will error); given the way a blob is allocated though you cannot really do it before you have all the bytes (arguably maybe you can if you know the size upfront, but that would be new thing of sorts and probably require

[04:21:30.0000] <annevk>
significant impl work)

[04:21:55.0000] <annevk>
lgrahl: once you have all headers, yes

[04:22:42.0000] <annevk>
lgrahl: and yeah, you can pick between "read all bytes as X" and "gimma the stream"

[04:22:46.0000] <annevk>
(at that point)

[04:22:51.0000] <annevk>
back later, lunch

[04:25:59.0000] <lgrahl>
annevk: Right, so a Blob is essentially too high-level. It would be massive backpressure on the receiver side (one can argue about the sender side because at least theoretically a Blob could be read in chunks). Whereas a stream is high-level when possible and low-level when I need it. It also allows me to handle backpressure.

[04:29:52.0000] <lgrahl>
annevk: If there's anything else coming to mind where streams provide an advantage over Blob, let me know. Anything that helps to convince them. :)

[04:41:38.0000] <lgrahl>
annevk: Coming back to the body mixin... I think this would have been cool for WebSocket and data channels but it's probably too late for that. USVString for example is not something you can choose on the receiver side but rather the sender enforces it by sending one. I'd say streams are our best bet now.

[05:00:53.0000] <annevk>
lgrahl: why could you not make it possible to chose string/bytes on the receiver side?

[05:01:11.0000] <annevk>
lgrahl: it seems if you can enable streams, you can enable that too (not saying it's needed per se though)

[05:01:58.0000] <lgrahl>
annevk: Data channels (and I think WebSocket too) have some kind of type inside of a message that indicates whether the message is binary or USVString.

[05:02:55.0000] <annevk>
lgrahl: sure, HTTP has that too through Content-Type, but you can still do whatever

[05:03:19.0000] <annevk>
lgrahl: current API shape might be either/or, but that's not inherent I think

[05:04:50.0000] <lgrahl>
annevk: Sure. But it would be kind of confusing to have an API where you either get USVString or binary where you can choose between ArrayBuffer and Blob and (new) Mixin... which again would let you choose to use .text, .json, .blob, ...

[05:06:02.0000] <lgrahl>
It makes sense for us but will it make sense for them? :)

[05:07:29.0000] <annevk>
Yeah, that's probably not the way to go

[05:07:50.0000] <annevk>
lgrahl: the other thing to consider here is that the timing for the event would be different

[05:07:55.0000] <lgrahl>
In a revised API we should go for it.

[05:08:27.0000] <lgrahl>
Yeah, you mean when you switch between Blob and stream?

[05:08:30.0000] <annevk>
lgrahl: you might just want a new messagestart even or some such

[05:10:11.0000] <lgrahl>
It's not a big deal though as only one message can be received at a time per channel. It's just something API users need to be aware of but most of them will probably not even bother (because it's not really different in terms of usage).

[05:12:04.0000] <lgrahl>
So, unless I missed something, it would be fine to use 'onmessage' for that. Also, I'm not a big fan of event callbacks because they are hard to handle when you have plenty of them.

[06:44:47.0000] <gabri>
Good morning/afternoon. I'm the same as before asking for resources for his thesis. Now my question is about AppCache, I know it's deprecated but I'd like to have a clarification anyway. There are both W3C and WHATWG documents about this, who is the original proposer? If my questions annoy, tell me and I'll quit

[06:46:55.0000] <annevk>
gabri: https://github.com/whatwg/web-history might help

[06:47:10.0000] <annevk>
gabri: basically most things HTML5 originated at the WHATWG

[06:47:51.0000] <gabri>
This might be the right thing I'm looking for, thank you!

[08:41:41.0000] <wanderview>
yoav_: does preload cache in chrome/webkit sit above or below service worker interception?

[08:43:51.0000] <wanderview>
yoav_: I know its unspec'd... just curious what browsers are actually doing

[08:45:58.0000] <wanderview>
yoav_: I've been told it just hooks into memory cache... which I guess means it sits above service worker interception

[08:56:23.0000] <yoav>
wanderview: above

[09:01:52.0000] <lgrahl>
annevk: If a data channel's message would be a stream, I could pipe this directly into a HTTP request by using the fetch API and thus upload a large file efficiently, right?

[09:02:25.0000] <annevk>
lgrahl: yeah, in theory

[09:02:39.0000] <lgrahl>
annevk: And practice? :)

[09:03:04.0000] <annevk>
lgrahl: no impl for upload

[09:03:56.0000] <lgrahl>
annevk. Ah, okay. Are there implementations for Response so far?

[09:04:24.0000] <wanderview>
lgrahl: for Response I believe all browsers except firefox have implemented ReadableStream body

[09:05:30.0000] <wanderview>
firefox implementation is disabled behind a pref while a few issues are sorted out

[09:07:21.0000] <lgrahl>
wanderview: Okay, cheers!

[09:07:41.0000] <wanderview>
yoav: thanks

[10:24:48.0000] <annevk>
Domenic: if a constructor takes one optional argument, what is Interface.length? 0 or 1?

[10:33:29.0000] <annevk>
Looks like 0 based on FormData

[10:39:45.0000] <jyasskin>
surma: I don't own the Streams spec, but there's almost never a problem with more links. Send a patch against https://github.com/whatwg/streams/blob/master/index.bs#L439?

[10:40:29.0000] <surma>
jyasskin: Noice. Thanks!

[10:49:10.0000] <annevk>
surma: goes for structuredClone too btw

[10:50:18.0000] <surma>
annevk: Yes. Planning on tackling (and PR’ing) that in ~2 weeks. Have some travel for the next 2 weeks.

[10:52:22.0000] <annevk>
Cool cool

[10:53:35.0000] <TimothyGu>
surma: you might be interested in the fact that structured cloning with V8 is indeed faster than JSON.parse(JSON.stringify()). Node.js exposes some lower level bindings to V8

[10:54:04.0000] <TimothyGu>
's serializer/deserializer, and you can test that with v8.deserialize(v8.serialize(obj)).

[10:54:39.0000] <TimothyGu>
v8.serialize() returns a Buffer (a Uint8Array subclass) though, and if you convert that to a string then JSON is still faster

[10:56:40.0000] <surma>
TimothyGu: That’s super interesting, considering that I haven‘t found any way to be faster than JSON.* in a browser environment

[10:57:05.0000] <TimothyGu>
not by much really, but still some

[10:57:39.0000] <surma>
Well, even if it’s only a tiny bit faster, it’s win considering it’s more flexible/powerful.

[10:58:19.0000] <TimothyGu>
Good point.

[11:15:25.0000] <annevk>
So in Node.js the serialization format is exposed? o_O

[11:53:11.0000] <annevk>
surma: we currently use an HTTP API for Bikeshed; I don’t really know if switching to Docker would end up using less resources…

[11:54:01.0000] <surma>
annevk: I wasn’t trying to replace the HTTP API. But if you wanna build offline and don’t want to bother with setting it up, it might come in handy. No worries if you just wanna ignore the entire thing. I mostly built it for myself :)

[11:55:17.0000] <annevk>
surma: I might look into it since I had some issues last I looked into it, but I’m mostly happy just using Travis et al

[11:55:44.0000] <surma>
It might also be nice to lower the barrier to entry to spec work

[11:56:00.0000] <surma>
If people want to play around with BS and figure out the syntax, they can just dive in straight away

[13:02:02.0000] <Domenic>
Well, if they have Docker knowledge and installation

[13:57:41.0000] <surma>
Domenic: Installation, yes. Knowledge, not really. You literally copy-paste the command from the readme. It will download the image automatically if necessary. But yes, installing docker would still be required.

[13:58:18.0000] <surma>
TabAtkins: I am building the stream spec and it seems `<emu-alg>` is not being processed properly. Is that a problem in my setup or is that a stream spec special thing?

[13:58:38.0000] <surma>
TabAtkins: ^ That is a bikeshed question.

[13:59:45.0000] <TabAtkins>
Streams uses ecmarkup as well, which isn't part of Bikeshed quite yet. Domenic can tell you how to get that set up.

[14:00:05.0000] <jyasskin>
(https://bterlson.github.io/ecmarkup/)

[14:00:15.0000] <surma>
Thaaaaanks.

[14:33:21.0000] <surma>
\o/ My first WHATWG spec PR https://github.com/whatwg/streams/pull/872


2018-01-27
[21:21:45.0000] <annevk>
Belated 🎉

[00:27:53.0000] <TimothyGu>
annevk/Domenic/MikeSmith: can I get an account on https://wiki.whatwg.org/?

[00:28:05.0000] <TimothyGu>
in case the ping didn't work: annevk Domenic MikeSmith

[00:31:17.0000] <annevk>
TimothyGu: sure can

[00:31:27.0000] <annevk>
TimothyGu: pm me your email?

[01:50:33.0000] <TimothyGu>
annevk: email received, everything works now, thanks!

[01:52:18.0000] <annevk>
Aah great

[01:52:25.0000] <annevk>
Such a delay

[01:56:00.0000] <TimothyGu>
annevk: so... it seems I am not actually allowed to post anything with external links

[01:56:31.0000] <TimothyGu>
it's supposed to show a reCAPTCHA that confirms I'm human when I press edit, but apparently site_key is not set according to the JS console

[01:56:44.0000] <TimothyGu>
*Submit, not edit

[02:12:03.0000] <annevk>
TimothyGu: hmm, GPHemsley can maybe help with that

[02:12:17.0000] <annevk>
TimothyGu: I'll see if I can up your privileges somehow

[02:16:41.0000] <annevk>
TimothyGu: try again?

[02:18:03.0000] <TimothyGu>
annevk: works now. thanks!

[09:13:20.0000] <surma>
Basic question — but how do I build the HTML spec? It doesn’t seem to be a valid Bikeshed file and there’s no `package.json` or anything about building it in the README

[09:59:44.0000] <Domenic>
surma: https://github.com/whatwg/html/blob/master/CONTRIBUTING.md

[10:02:05.0000] <surma>
Ah, thanks.

[12:29:19.0000] <GPHemsley>
hmm... our CAPTCHA is broken, you say?

[13:17:56.0000] <TimothyGu>
GPHemsley: yeah

[13:18:00.0000] <TimothyGu>
in the wiki

[14:05:17.0000] <surma>
annevk: I changed my mind and whipped up a PR for the structuredClone thing. I was in a spec-y mood today ;) https://github.com/whatwg/html/pull/3414


2018-01-28
[21:25:36.0000] <annevk>
surma++

[05:05:24.0000] <annevk>
surma: first step needs to have the second argument removed still

[05:15:58.0000] <surma>
annevk: yeah, noticed that myself after pushing. Started Working on adding transferList, so it's gonna be fixed with the next push :)

[05:18:58.0000] <annevk>
TimothyGu noticed too 😃

[05:19:07.0000] <TimothyGu>
haha

[05:19:15.0000] <TimothyGu>
it's 5am here and I really should sleep

[05:19:34.0000] <annevk>
sounds like a plan; nn

[09:05:57.0000] <annevk>
Ugh, I really hope I'm overlooking something. Kinda sad to notice a regression this big

[09:07:12.0000] <surma>
annevk: What context?

[09:07:39.0000] <annevk>
The transferables thing

[09:08:32.0000] <surma>
I don’t quite see where the problem lies. Maybe you can elaborate? structuredSerialize/Deserialize happens for `event.data`

[09:08:44.0000] <surma>
the ports would get neutered either way

[09:08:47.0000] <surma>
so it’s actually consistent

[09:08:50.0000] <annevk>
surma: how does the MessagePort get cloned?

[09:09:18.0000] <surma>
It doesn’t, it gets transferred, no?

[09:09:25.0000] <annevk>
surma: sure, how?

[09:11:26.0000] <surma>
What do you mean, how? Isn‘t that specced how to handle transferable objects?

[09:14:23.0000] <annevk>
surma: it's not

[09:14:31.0000] <annevk>
surma: see above about the regression

[09:19:33.0000] <annevk>
Domenic: it's quite easy to observe the logo semi-disappearing by just shrinking the window

[09:20:20.0000] <annevk>
Domenic: and since it's -120 you effectively need 240 pixels more space since everything is centered

[09:22:02.0000] <Domenic>
viewport width is not related to content width

[09:22:59.0000] <annevk>
Domenic: if the viewport width gets smaller than a 1000 the content doesn't fit

[09:23:03.0000] <annevk>
Domenic: how is it not related?

[09:25:10.0000] <annevk>
Again, this is super easy to reproduce on desktop. Just slowly make the viewport smaller and see content disappearing on the left side, way before the current break point hits

[09:29:28.0000] <annevk>
Domenic: does https://github.com/whatwg/html/pull/3415#issuecomment-361078261 mean r+? Maybe make it explicit so I can merge it

[10:02:44.0000] <Domenic>
annevk: I see the relation. I'd still like to play around with things, e.g. move the logo around, so that we can have consistent breakpoints.

[10:18:08.0000] <Domenic>
Seems like I shouldn't do standards on weekends... ugh

[10:19:16.0000] <annevk>
Domenic: heh, I recommend video games

[15:03:26.0000] <TabAtkins>
+1


2018-01-29
[17:25:27.0000] <TabAtkins>
Hm, how do I indicate in WebIDL that a method can return undefined?

[17:28:59.0000] <TabAtkins>
Ah, looks like "void" works, like (void or FooType)?

[17:30:59.0000] <TabAtkins>
No, that doesn't work, hrm.  I'm trying to replicate the behavior of Map.get().

[17:47:45.0000] <KiChjang>
isn't it just FooType?

[17:47:54.0000] <KiChjang>
with the question mark that is

[17:50:39.0000] <TabAtkins>
KiChjang: No, that allows null, which is a very different value. ^_^

[17:51:01.0000] <KiChjang>
ugh

[17:51:35.0000] <TabAtkins>
Yeah, per https://github.com/heycam/webidl/issues/60 the only way to do it currently is to write the type as `any`. ;_;

[17:52:02.0000] <TabAtkins>
(So I've done that, followed by a comment that it's really `(undefined or CSSStyleValue)`.)

[19:32:45.0000] <TabAtkins>
Another webidl question: I have an interface, [Exposed] to globals A and B. The interface is maplike, and I override the definition of one of the maplike methods, but only mark it as [Exposed=A]. Does this mean that B sees the interface with the *default* version of the method, or does it not see the method at all?

[19:32:53.0000] <TabAtkins>
tobie, domenic, annevk : ^^^

[19:58:18.0000] <Domenic>
I was under the impression that you could not override a maplike's map methods

[19:58:36.0000] <Domenic>
"Maplike interfaces must not have any interface members named "entries", "forEach", "get", "has", "keys", "size", or "values", or have any inherited interfaces that have members with these names. Read–write maplike interfaces must not have any attributes or constants named "clear", "delete", or "set", or have any inherited interfaces that have attributes or constants with these names."

[19:59:02.0000] <Domenic>
I see, but read/write can override clear/delete/set

[20:00:07.0000] <Domenic>
Per the letter of the spec it appears your exposed is completely ignored https://heycam.github.io/webidl/#es-map-clear

[20:00:34.0000] <Domenic>
Well, no, I maybe am misinterpreting...

[20:00:42.0000] <Domenic>
So you declare something with (e.g.) a clear identifier

[20:00:46.0000] <Domenic>
So the default does not get installed

[20:00:51.0000] <Domenic>
But then nothing else gets installed

[20:00:55.0000] <Domenic>
So I guess the method doesn't exist?

[20:00:58.0000] <Domenic>
This is going to need serious tests though

[20:03:29.0000] <TabAtkins>
Oh, hmmmm, I need to get IDL fixed to allow overriding of get().  (Because I'm implementing a multimap, so the map entries are string->list<Foo>, but .get() needs to return a single Foo.)

[20:04:28.0000] <TabAtkins>
(Or we just need to put multimaps into IDL.)

[20:15:10.0000] <Domenic>
I think you just want to not use maplike, like the other 2-3 multimaps in the platform

[20:22:21.0000] <TabAtkins>
I found URLSearchParams, is there another?

[20:23:13.0000] <TabAtkins>
And it would be sad to lose maplike; StylePropertyMap is *more* map-like than URLSearchParams, even.  (The underlying representation of SPM is a map of key->list<val>, while the underlying repr of USP is list<key->val>.)

[20:24:17.0000] <TabAtkins>
map<key, list<val>> vs list<(key,val)>, rather.

[20:25:00.0000] <TabAtkins>
In any case, we should *at minimum* enshrine multimap as an example in WebIDL, to make sure that we don't diverge definitions - StylePropertyMap is currently making set() and append() n-ary, while URLSearchParams doesn't.

[20:25:16.0000] <TabAtkins>
(I opened an IDL issue for this, https://github.com/heycam/webidl/issues/514)

[20:42:35.0000] <Domenic>
Yes, it would be good to match URLSearchParams and FormData, and e.g. not make those n-ary

[20:42:44.0000] <Domenic>
set() should override entirely

[20:53:03.0000] <TabAtkins>
set() *does* override entirely, but it lets you set multiple values in one (rather than having to call .set(), then .append() several times).

[20:53:23.0000] <TabAtkins>
(It also moves the value to the end of the map, which URLSearchParams does *not* do.)

[20:58:34.0000] <TabAtkins>
(For the list<(key,val)> semantics, setting in-place does often make more sense, and if you're setting in place, it makes less sense to also append additional values. But for map<key, list<val>> semantics, setting multiple at once makes complete sense.)

[21:42:49.0000] <annevk>
Headers is roughly key,list-val but still uses the same pattern

[21:43:37.0000] <annevk>
Although, maybe that’s not entirely true; it’s pretty special

[01:49:44.0000] <annevk>
Where did this gem originate from? https://twitter.com/antimattur/status/957912859127762945

[09:09:06.0000] <wanderview>
JakeA: are you around?

[09:12:15.0000] <wanderview>
hmm, nm

[10:46:37.0000] <Domenic>
annevk: it came from https://twitter.com/mattur/status/957976107499905027

[10:47:01.0000] <guest271314>
Hi

[10:50:58.0000] <guest271314>
Relevant to https://github.com/whatwg/fetch/issues/665, what is the purpose of passing a MIME type to toDataURL()?

[10:53:50.0000] <nox>
https://github.com/whatwg/fetch/issues/665#issuecomment-361333540

[10:54:42.0000] <nox>
A data URL contains a MIME type, e.g. data:text/html,hello

[11:03:37.0000] <guest271314>
Does the toDataURL() concept ignore the validity of the MIME type as to the actual type of the input file?

[11:04:39.0000] <guest271314>
Is the validity of the data URL output not a concern of this particular processor, that is toDataURL()?

[11:34:34.0000] <annevk>
guest271314: Fetch is not defining the whole operation

[11:35:00.0000] <guest271314>
That does not answer the questions

[11:35:12.0000] <annevk>
guest271314: it would how to generate a data: URL string, that’s it

[11:35:50.0000] <annevk>
guest271314: the HTML spec would produce the relevant bits for the given MIME type

[11:37:20.0000] <annevk>
Domenic: yeah, saw that; I don’t really understand what’s going on

[11:39:04.0000] <guest271314>
What section of the HTML spec gets the MIME type of the file? If that is the case what is the purpose of passing a MIME type argument to toDataURL()? Or, am possibly misinterpreting the concept, here? That is, the HTML spec does get and set the MIME type internally, the user does not pass a MIME type as argument to the function; the function is not exposed to users at large?

[11:40:06.0000] <annevk>
The function is not exposed, no

[11:40:28.0000] <annevk>
The MIME type generator that is

[11:40:43.0000] <annevk>
data: URL generator*

[11:51:51.0000] <guest271314>
@annevk Where is the algorithm to get the MIME type from the input?

[11:52:57.0000] <annevk>
There is no such thing?

[11:54:11.0000] <guest271314>
annevk: Is that what https://github.com/whatwg/fetch/issues/665 is intended to achieve?

[11:55:19.0000] <annevk>
No

[11:56:28.0000] <guest271314>
Then what is the purpose and intended outcome of that issue?

[11:56:42.0000] <annevk>
It’s an algorithm to create a data: URL

[11:57:28.0000] <annevk>
Having that more clearly defined is the goal

[11:59:13.0000] <guest271314>
Ok. Although a MIME type is not required for a valid data URL the issue at some point will address the topic of getting the MIME from the input, yes?

[12:01:14.0000] <annevk>
No

[12:01:29.0000] <annevk>
There is no such thing

[12:01:54.0000] <annevk>
There is elsewhere in the platform, but not applicable here

[12:02:09.0000] <guest271314>
What is applicable here?

[12:02:34.0000] <annevk>
This only takes a MIME type so it can be in the generated data: URL

[12:02:54.0000] <annevk>
It’s basically passed through as-is

[12:03:50.0000] <guest271314>
Why omit validating that the MIME type matches the actual file type? Does that validation occur somewhere else in the procedure? Or, are developers on their own?

[12:04:26.0000] <annevk>
I’m gonna call it a day. Hopefully it’s clearer when the PR is written at some point

[12:08:45.0000] <guest271314>
annevk: Hope is meaningless. Though you have tried and am certain the contributors to the PR will perform due diligence. Cheers

[14:59:09.0000] <JakeA>
wanderview: on leave this week, but I can take a sneaky look at stuff from my phone

[15:04:46.0000] <jyasskin>
JakeA: No, bad Jake. Be on vacation! ;-)

[15:08:26.0000] <JakeA>
jyasskin: haha I've let my laptop run out of battery as a way to enforce holiday


2018-01-30
[16:42:16.0000] <TabAtkins>
Domenic: BTW, I was looking at FormData and noticed the passive-aggressive note (^_^) and realized you can get around what Bikeshed's angry about and get the overloads to have the same argument name again.

[16:42:41.0000] <TabAtkins>
If you instead use:

[16:42:57.0000] <TabAtkins>
interface FormData {

[16:42:57.0000] <TabAtkins>
  void append(USVString name, USVString value);

[16:42:58.0000] <TabAtkins>
  void append(USVString name, Blob blobValue, optional USVString filename);

[16:42:58.0000] <TabAtkins>
}

[16:43:09.0000] <TabAtkins>
Ugh, sorry, bad copy-paste. One sec.

[16:44:01.0000] <TabAtkins>
interface FormData {

[16:44:01.0000] <TabAtkins>
  void foo(USVString name, (USVString or Blob) value);

[16:44:01.0000] <TabAtkins>
  void foo(USVString name, Blob value, USVString filename);

[16:44:01.0000] <TabAtkins>
};

[16:44:28.0000] <TabAtkins>
There we go. Same meaning, but the signatures no longer clash.

[18:50:27.0000] <Domenic>
annevk ^

[19:53:40.0000] <MikeSmith>
TabAtkins: about https://github.com/w3c/csswg-drafts/pull/2169 as I just noted in my comment there, the problem remains that the CSS Align spec as currently written doesn’t define align-items: left and align-items: right as valid

[19:54:59.0000] <TabAtkins>
MikeSmith: I'm confused. As I said, we *don't* want them to be valid in align-items.

[19:59:13.0000] <MikeSmith>
TabAtkins: ah I was assuming what you had told me previously here was true

[19:59:31.0000] <MikeSmith>
https://freenode.logbot.info/whatwg/20180104#c1392608

[19:59:38.0000] <TabAtkins>
Nah man, I wrote the comment about consulting with fantasai *after* I told you the opposite here in chat. ^_^

[20:00:05.0000] <MikeSmith>
got it

[20:00:06.0000] <MikeSmith>
thanks

[22:59:07.0000] <annevk>
Domenic: TabAtkins: that is not semantically equivalent when passing undefined as the third parameter

[22:59:30.0000] <annevk>
Domenic: TabAtkins: another strong reason for fixing Bikeshed as I really hope folks are not working around Bikeshed in the way you suggest and moving away from idiomatic JavaScript

[22:59:30.0000] <TabAtkins>
Ah, indeed. Nm then.

[23:00:18.0000] <TabAtkins>
No, everyone else who's ever dealt with overloads and told me about it has been fine with making the argument names different.

[23:02:29.0000] <annevk>
That doesn't make it okay...

[23:02:33.0000] <TabAtkins>
There's no way to "fix" Bikeshed here. Tons of specs depend on Bikeshed recognizing things according to the argument names. The most I could do is add a completely separate linking strategy that autolinks based on argument types instead, and figure out some way to syntactically distinguish that from referring to argument names. And you wouldn't use it except in these precise two instances.

[23:02:57.0000] <TabAtkins>
(Since almost all of the time, you can instead get away with autolinking without args at all.)

[23:03:13.0000] <annevk>
That is true, ideally there's no overloads to begin with

[23:03:14.0000] <TabAtkins>
Overloads are just frustrating, is what I'm saying.

[23:14:57.0000] <MikeSmith>
annevk: added some outline-relevant use counters to the checker

[23:15:14.0000] <MikeSmith>
https://validator.w3.org/nu/stats.html

[01:02:16.0000] <annevk>
MikeSmith: 0.245 means 25%?

[01:02:25.0000] <annevk>
MikeSmith: that'd be a lot of <h1> usage

[01:05:14.0000] <MikeSmith>
annevk: yeah, 25%

[01:11:21.0000] <annevk>
If those documents also use <section> and <article> there'd be a lot of potential for improvement there AT-wise

[01:14:06.0000] <MikeSmith>
I can probably add a more granular use counter, to check if more than one <section> element is open at the point where it finds an additional <h1>

[01:15:05.0000] <annevk>
MikeSmith: ideal would be article, aside, nav, or section

[03:07:53.0000] <annevk>
smaug____: does https://github.com/whatwg/html/issues/3407 address your concerns with hit regions?

[04:08:00.0000] <smaug____>
I need to page in hit regions to my mind

[04:11:27.0000] <annevk>
smaug____: https://github.com/whatwg/html/issues/1030#issuecomment-208989397 had some of your thoughts on the previous iteration, if that helps

[06:28:58.0000] <wanderview>
JakeA: ah... i thought I saw something about devrel all being in SF, so thought maybe we lapped the planet and were back

[06:29:05.0000] <wanderview>
^we^you

[06:47:43.0000] <wanderview>
annevk: do you know why FetchEvent.clientId might have gone from null to empty string for indicating "no client id"?  Is that conforming to an overall spec convention or something?

[06:49:28.0000] <annevk>
wanderview: I'm not sure; I might have argued that if it cannot be the empty string it always being a string seeming nicer

[06:49:40.0000] <wanderview>
ok

[08:58:38.0000] <jyasskin>
annevk/hsivonen: Can you give me a clue about how a metaformat should specify its error handling? It's tricky because not all formats based on CBOR will be happy with the web's "stop on error" policy. I'm kinda hopeful I can land a patch to CBORbis that allows formats to either stream output or return a full item at once, and either stop on error or replace the offending item and resume at a defined byte. Is that good

[08:58:38.0000] <jyasskin>
enough?

[09:14:40.0000] <annevk>
jyasskin: basically you need to have an answer for any arbitrary byte sequence

[09:14:56.0000] <annevk>
jyasskin: I don't really know CBOR so it's hard to go into specifics

[09:16:09.0000] <annevk>
jyasskin: I think ideally if there's some kind of subsetting going on that's made explicit by parser choices

[09:16:37.0000] <annevk>
jyasskin: so you'd invoke the CBOR parser with "streaming" and "stop on error" or some such and then everything ends up being well-defined

[09:16:43.0000] <annevk>
jyasskin: does that make sense?

[09:18:01.0000] <jyasskin>
annevk: Ok, cool. Yep, that should be straightforward.

[09:18:26.0000] <jyasskin>
Thanks!

[09:28:29.0000] <annevk>
Domenic: pushed a small commit to the data: URL tests that writes out the full MIME type everywhere

[09:28:54.0000] <annevk>
Domenic: if you r+ I'm gonna land all the things and see if I need any new browser bugs

[15:22:51.0000] <MikeSmith>
annevk: added more-granular stats https://validator.w3.org/nu/stats.html

[15:23:55.0000] <MikeSmith>
the 25% for multiple h1 that it was showing previously was due to a mistake in the initial logic that is now corrected

[15:24:37.0000] <MikeSmith>
the percentage of documents with multiple h1s appears to in fact be quite lower

[15:25:00.0000] <MikeSmith>
more like only 4% or 5%

[15:25:47.0000] <MikeSmith>
but anyway we should get data through other means to compare that against

[15:26:32.0000] <MikeSmith>
I think Steve may already have data on multiple h1 too. Or at least he has a corpus he can run a query on

[15:26:59.0000] <MikeSmith>
and maybe foolip can run one

[15:34:17.0000] <MikeSmith>
note that maybe should instead be made to count h1s with section/article/aside/nav ancestors rather than just parents

[15:35:10.0000] <MikeSmith>
because I notice that there are cases where the document has thigns like <section><div>h1 or <section><header><h1>

[15:37:27.0000] <MikeSmith>
also noticing more cases than I would have expected of multiple h1 without any section/article etc at all, but instead the document just uses nested <div>s with h1s at arbitrary levels

[15:38:45.0000] <a-ja>
MikeSmith, curious as to how expensive enabling outlines by default would be


2018-01-31
[16:15:36.0000] <MikeSmith>
a-ja: in browsers?

[16:16:19.0000] <a-ja>
MikeSmith, in validator

[16:21:01.0000] <MikeSmith>
dunno but probably less costly than some other things I’m already doing

[16:26:38.0000] <a-ja>
MikeSmith, fwiw, i've been thinking about a possible change to outline messages...another time, earlier in the day

[16:28:03.0000] <a-ja>
basically re sectioning elements without headings but with aria labelling

[16:30:01.0000] <MikeSmith>
ah ok

[16:42:04.0000] <TabAtkins>
Hm, WebIDL seems to say that I can't put [Exposed] on an interface *and* on that interface's members, but then how am I supposed to say "all the members are exposed per A, but this one in particular is instead exposed per B"?

[16:42:30.0000] <TabAtkins>
Does this mean I'd have to instead manually add [Exposed] to *every single member*?

[16:56:34.0000] <TabAtkins>
(Relevance: in Typed OM we want to expose all of our interfaces widely, but restrict the methods that involve CSS parsing to only be available in Window.)

[16:57:06.0000] <jyasskin>
TabAtkins: I haven't checked this, but can you put the less-exposed ones on a separate partial interface?

[17:00:19.0000] <TabAtkins>
Hm, both the algorithm and some following requirements imply that a member can have a different exposure set from the interface it's a part of.

[17:40:34.0000] <TabAtkins>
Yeah, I think this is a WebIDL bug - it contradicts itself in implications.

[17:44:01.0000] <TabAtkins>
Oh nm, that restriction is solely about members of *partial* interfaces - [Exposed] on a partial is implicitly putting it on all the members.  So, not relevant to me, but also doesn't seem necessary. Still filing a bug.

[20:14:19.0000] <TimothyGu>
TabAtkins: re array methods on Typed OM collections, what's the best case scenario? i.e., what should calling cssNumericArray.map() return? (a CSSNumericArray or just Array? should the type of the value returned from the map() callback be cast to CSSNumericValue?)

[20:15:39.0000] <TimothyGu>
if returning an Array is okay then [LegacyArrayClass] + indexed getter would work, no?

[20:16:21.0000] <TabAtkins>
Right now, it throws because undefined is not a function. ^_^

[20:16:51.0000] <TabAtkins>
For the rest, I don't have a strong opinion, but JS *does* have support for good Array subclassing now, such that .map() could return your subclass.

[20:17:08.0000] <TimothyGu>
yeah that's why I said "should"

[20:17:50.0000] <TabAtkins>
But it's probably fine to just return an Array too, since the subclass doesn't do anything additional, and our inputs are all `sequence<>`. Only downside would be that you couldn't directly assign to the attribute, when present.

[20:18:48.0000] <TimothyGu>
TabAtkins: hmm, is typed om implemented in any browser? If so I'd like to test something

[20:18:49.0000] <TabAtkins>
Well, hm, I'm lying. It would be bad if `(new CSSUnparsedValue(["one"])).map(x->x)` returned an Array.

[20:19:08.0000] <TabAtkins>
It's behind a flag in Blink right now.

[20:19:34.0000] <TimothyGu>
TabAtkins: yeah it seems like different collections want different semantics for array methods

[20:20:03.0000] <TabAtkins>
Sometimes maybe. But returning the same class as you started with seems pretty universally good, and supported by JS now.

[20:20:23.0000] <TabAtkins>
If you really want an Array you can wash it thru `[...foo]`, after all.

[20:20:57.0000] <TimothyGu>
TabAtkins: how about type casting though? I assume you would want to force the result of map() to whatever element type is in the original collection?

[20:21:19.0000] <TimothyGu>
TabAtkins: do you know what flag it is in Chrome?

[20:21:24.0000] <TabAtkins>
Yeah, that would presumably cause an error to be thrown during the implicit construction of the new value.

[20:21:31.0000] <TimothyGu>
Experimental Web Platform features?

[20:21:58.0000] <TabAtkins>
Precisely *when* the error is thrown (immediately after the callback returns a bad value, or when the callback is totally done) is an open question which needs to be answered, but whose answer is probably not important.

[20:22:03.0000] <TabAtkins>
Yeah, that's the flag.

[20:22:28.0000] <TimothyGu>
Okay, I'm looking into this

[20:23:01.0000] <TabAtkins>
.push(), etc would also typecheck for you. Basically everything would indirect thru your constructor or your indexed setter, both of which should have the types you want.

[20:23:48.0000] <TabAtkins>
TimothyGu: I forget what browser you work for. ^_^

[20:24:27.0000] <TimothyGu>
TabAtkins: I'm a first-year undergrad

[20:24:36.0000] <TimothyGu>
lol

[20:24:39.0000] <TabAtkins>
ah, kk

[20:24:49.0000] <TimothyGu>
I'll intern at Google this summer though

[20:24:53.0000] <TimothyGu>
(Chrome)

[20:24:53.0000] <TabAtkins>
+1

[20:27:30.0000] <TimothyGu>
TabAtkins: question: why did y'all decide on rest params for CSSUnparsedValue's constructor instead of a sequence<>?

[20:27:54.0000] <TimothyGu>
seems kinda odd when basically everything else takes a sequence

[20:27:59.0000] <TabAtkins>
I think we didn't have any particular reason, but since it's inconsistent with CSSTransformValue we should harmonize those two.

[20:28:30.0000] <TimothyGu>
TabAtkins: yeah, should I file a ticket or is that a known issue?

[20:28:36.0000] <TabAtkins>
file issue plz

[20:33:02.0000] <TimothyGu>
TabAtkins: https://github.com/w3c/css-houdini-drafts/issues/618

[20:34:31.0000] <TabAtkins>
danke

[20:34:43.0000] <TimothyGu>
de nada

[21:08:45.0000] <annevk>
TabAtkins: interface exposed a,b meber exposed a should work; does for XHR at least

[21:09:09.0000] <TabAtkins>
Yeah, discovered that it's fine, the paragraph I was confused about only applied to *partial* interfaces.

[21:13:45.0000] <TabAtkins>
annevk: Do you have some examples of indexed getters/setters on the platform? I need to see what current ones do when you get/set an index that doesn't have an associated value.

[21:14:37.0000] <annevk>
We don’r use those anymore; they’re to be renamed legacy

[21:19:05.0000] <TabAtkins>
That's cool and all, but until we actually resolve the array-like issue I'm still using them, and would like to be consistent with the rest of the platform.

[21:20:01.0000] <TabAtkins>
(Turns out engines all special-case indexed getters/setters and run them much more efficiently than a general proxy would.)

[21:20:38.0000] <TabAtkins>
(I'd love to make them legacy and get something better, they're so manual and frustrating, when so much of it should be automatic.)

[21:24:44.0000] <annevk>
You cannot be consistent if you refuse to be so…

[21:26:05.0000] <TabAtkins>
I can't be consistent with something that's nonexistent, either!

[21:26:24.0000] <TabAtkins>
Looks like getters all return null, per the DOM spec. None of these have setters. :/

[21:27:40.0000] <TabAtkins>
(It's been almost a year since the last time I said "hey, my spec has three array-likes, sure would be good to make IDL support that properly", and nothing's happened since then, so don't try and shame me about this.)

[21:29:42.0000] <annevk>
Saying it’s somebody else their problem is a little weird

[21:30:14.0000] <annevk>
And you got ample feedback there too about the platform not doing this

[21:30:53.0000] <TabAtkins>
No, I got pushback from *you* about this, while Boris supported it. Yay for contradictory advice!

[21:31:12.0000] <annevk>
Domenic pushed back too

[21:31:36.0000] <annevk>
TC39 would push back too

[21:31:40.0000] <TabAtkins>
Sure. I don't think counting 2 vs 1 is reasonable here?

[21:32:09.0000] <TabAtkins>
Nah, TC39 explicitly supported integer catchalls several years back, and I've gotten feedback that they're just fine perf-wise in engines.

[21:32:12.0000] <annevk>
Maybe we should bring it up with the TAG?

[21:32:44.0000] <annevk>
I doubt TC39 did that, pointer?

[21:32:52.0000] <TabAtkins>
(Nobody ended up *doing* anything about it in TC39, but we still have the records with several people enthusiastically supporting, including several current members.)

[21:33:02.0000] <TabAtkins>
It was linked in the WebIDL issue, let me go get it.

[21:34:04.0000] <TabAtkins>
https://lists.w3.org/Archives/Public/public-webapps/2009JulSep/1346.html

[21:34:53.0000] <TabAtkins>
(follow the thread linked from that message)

[21:35:13.0000] <annevk>
The outcome of that discussion was to stop doing live lists

[21:35:33.0000] <TabAtkins>
Yes? That's correct and a good conclusion.

[21:35:47.0000] <TabAtkins>
As I've said multiple times, I'm not doing live lists.

[21:36:25.0000] <annevk>
So why not return arrays then?

[21:37:58.0000] <TabAtkins>
:deep breath: I'm repeating myself, but: because they're not arrays. They're other objects with branding concerns, which have restrictions on what types of objects they contain, and sometimes have useful methods hanging off of them that are only reasonable for their specific type.

[21:38:10.0000] <annevk>
Anyway, I think to be more productive I should study what you are trying to do in more detail. It’s been a while.

[21:38:45.0000] <TabAtkins>
Luckily for you, I just posted an update about that: https://github.com/heycam/webidl/issues/345#issuecomment-361814861

[21:38:52.0000] <annevk>
It seems you could enforce validation when setting though. That’s how everything else works.

[21:39:21.0000] <annevk>
Cool, I’ll check it out later today

[21:39:58.0000] <TabAtkins>
No (a) I can't do that easily (it would be both more expensive *and* would delay catching errors for no author benefit), and (b) that's *not* how everything else works, every single other thing in WebIDL typechecks eagerly as soon as you set a value.

[21:40:19.0000] <TabAtkins>
foo.bar = "something invalid" throws immediately; foo[1] = "something invalid" should too.

[21:41:31.0000] <TabAtkins>
foo("something invalid") throws immediately, but if the brand check succeeds we generally depend on the object being correct, and don't do recursive type-checking by hand.  (I'd be interested if you could find an instance of such manual recursive type-checking.)

[21:42:42.0000] <annevk>
Eg Headers constructor

[21:43:00.0000] <TabAtkins>
That's in Fetch?

[21:43:05.0000] <annevk>
Yes

[21:47:00.0000] <TabAtkins>
Ah, that's not an example of such. (a) it's not recursive, it just checks *one* layer down in the passed sequence, and (b) it's just papering over a deficiency in WebIDL that prevents you from explicitly saying that you take a `map-sequence<ByteString, ByteString>`, so you're having to manually roll that check; all it does it verify that each item has precisely two entries.  (Besides the length-checking, the actual

[21:47:00.0000] <TabAtkins>
type-checking is still done automatically for you by IDL.)

[21:48:53.0000] <TabAtkins>
(And that's captured in https://github.com/heycam/webidl/issues/324 too; there are questions about what to do with map-sequence<> as a return type, but as an argument type it's nice and simple.)

[22:55:18.0000] <annevk>
MikeSmith: are you logging URLs too?

[23:08:57.0000] <TabAtkins>
tobie: Yo, would you take a PR for `pair-sequence<>`? Looking at `sequence<>`, it looks pretty easy to spec.

[23:12:17.0000] <tobie>
TabAtkins: I didn’t read up on the thread, but if there’s consensus and implementor interest, sure.

[23:14:08.0000] <TabAtkins>
I'll write it up and we'll see. I think there's only one consumer at the moment - `Headers` - because the only maplike I'm in charge of isn't currently constructable.

[23:15:48.0000] <TabAtkins>
Hm, about that: Domenic, annevk, we generally want *all* objects to be constructable, right?  I've got nothing against making StylePropertyMap constructable, you just can't *do* anything with manually constructed instances (all attributes of that type are `readonly`).

[23:17:29.0000] <annevk>
TabAtkins: https://github.com/w3ctag/design-principles/issues/44

[23:17:41.0000] <annevk>
TabAtkins: so generally yes, with some exceptions

[23:18:41.0000] <annevk>
TabAtkins: if it's not useful I wouldn't add a constructor

[23:18:46.0000] <TabAtkins>
Hm, that's for using constructors vs factory methods.

[23:18:46.0000] <TabAtkins>
kk

[03:42:45.0000] <lgrahl>
Hey everyone! I've seen ricea's comment on data channel streams (https://github.com/w3c/webrtc-pc/issues/1732#issuecomment-361843997) and was wondering how passing a readable stream to the send method would look like if I were to write in chunks... do you have an example for that?

[03:43:21.0000] <lgrahl>
Basically, my question is how the examples (https://github.com/w3c/webrtc-pc/issues/1732#issuecomment-357442429) would have to be rewritten for providing a readable stream on a send call.

[04:07:12.0000] <annevk>
lgrahl: if you construct your own RS you can push stuff in that the data channel would then read

[04:07:42.0000] <annevk>
lgrahl: that is how upload fetch() works, but not yet implemented

[04:08:38.0000] <lgrahl>
annevk: I'd be interested in how that would look like if I don't have a readable stream beforehand (so, I need to construct one of my own)

[04:08:57.0000] <annevk>
lgrahl: it does not use WS since ideal WS usage requires the underlying buffer, which would require a callback of sorts and was not feasible impl wise

[04:11:16.0000] <lgrahl>
annevk: Okay... but that means constructing a writable stream on RTCDataChannel and writing into that is theoretically more effizient with BYOB (once we have that for writable stream)?

[04:11:37.0000] <lgrahl>
jeez, that German thrown into there... *efficient :)

[04:11:38.0000] <annevk>
lgrahl: could not find a quick example, but https://streams.spec.whatwg.org/#rs-constructor has a description

[04:12:49.0000] <annevk>
lgrahl: if the impl could give you access to the networking layer’s buffer, yes, but not sure how feasible that is given framing and such

[04:13:29.0000] <annevk>
lgrahl: I suspect some piping will be necessary

[04:14:49.0000] <annevk>
Fetch should probably have an example for this

[04:14:55.0000] <lgrahl>
annevk: I worked on the FF data channel implementation and yeah that should be possible if I'm not mistaken. So, would you rather say we should go for .createWritableStream instead of .send(myReadableStream)?

[04:15:50.0000] <annevk>
lgrahl: or make send() return it; is synchronous acceptable though?

[04:16:18.0000] <lgrahl>
It's only sync so far.

[04:16:40.0000] <annevk>
lgrahl: I mean getting sync access to the buffer

[04:17:18.0000] <lgrahl>
I'm not sure what you mean by that

[04:18:46.0000] <Ms2ger>
Argh

[04:19:35.0000] <annevk>
lgrahl: I’m prolly mistaken and it’s not an issue

[04:19:37.0000] <lgrahl>
Returning a writable stream on .send() would be an idea but I'm not a fan of it because I think it creates an awkward API. Also, .send would have to know when it should return a writable stream.

[04:20:12.0000] <annevk>
Ms2ger: wb

[04:21:07.0000] <annevk>
lgrahl: it does seem a little weird if this can get away with using WS, but not fetch()

[04:21:28.0000] <annevk>
lgrahl: curious what ricea and yhirano__ think

[04:22:53.0000] <annevk>
lgrahl: fair re send(); be good to keep the name relatively short though

[04:23:26.0000] <lgrahl>
Ideas welcome :)

[04:23:50.0000] <Ms2ger>
annevk, I'd actually written some more tests for that createImageBitmap PR you reviewed, but I forgot to commit

[04:23:52.0000] <Ms2ger>
Boo, git

[04:24:12.0000] <annevk>
Ms2ger: happy to review

[04:24:21.0000] <Ms2ger>
Coming up in a minute

[04:24:28.0000] <annevk>
Ms2ger: was planning on writing more too for that PR

[04:24:50.0000] <annevk>
Ms2ger: now I figured out Blob is similar to <img>

[04:25:07.0000] <Ms2ger>
I'll try to find time to do a closer review, but not sure I'll be able to

[04:25:28.0000] <lgrahl>
aneevk: My current idea was to just throw buffers into the WS (which are then consumed) and hope you come up with a good idea for BYOB writer. Wouldn't that work for fetch too?

[04:26:02.0000] <Ms2ger>
Probably some of these tests should run in workers too

[04:27:01.0000] <annevk>
lgrahl: then it’s not better than RS iirc, but really need the others for that discussion

[04:27:35.0000] <annevk>
Ms2ger: hopefully junov can help with that

[04:32:11.0000] <lgrahl_>
Freenode is flaky for me...

[04:32:21.0000] <lgrahl_>
annevk: It's not better but it would allow us to switch later without breaking API. But yeah, it's a good idea if you discuss this together. Ping me if you need me.

[04:36:43.0000] <annevk>
lgrahl_: I'm hoping ricea will just chime in, I'm not super invested in this

[04:37:26.0000] <annevk>
lgrahl_: I'm reading through https://github.com/yutakahirano/fetch-with-streams/issues/30 though to figure out why fetch() uses RS again (a lot of the stuff in the beginning isn't it I think)

[04:39:08.0000] <lgrahl_>
annevk: Okay. I'll grab lunch in the meantime. :)

[04:44:47.0000] <annevk>
lgrahl_: good plan; https://github.com/yutakahirano/fetch-with-streams/issues/30#issuecomment-95161858 seems like the conclusion

[04:45:13.0000] <annevk>
lgrahl_: basically even with WS there's no guarantee you get the actual final buffer/sink for fetch()

[04:45:42.0000] <annevk>
lgrahl_: and additionally for fetch() WS became awkward due to how Request works

[05:07:59.0000] <Ms2ger>
annevk, is a video with data URL src cross-origin?

[05:21:40.0000] <lgrahl_>
annevk: Cheers. I don't understand these points entirely (lack of spec knowledge I guess) and so I'm not sure this would apply to data channels, too.

[05:23:55.0000] <lgrahl_>
annevk: It really confuses me that readable streams are used by both ends. so I'm surprised by this (at least in terms of terminology).

[05:29:48.0000] <lgrahl>
annevk: Also, if I come back to the low-level use, creating a writer from a WS and passing chunks into it is easy. But constructing a RS and feeding chunks into it seems tedious because you need to write your own RS object (unless I missed something).

[05:33:13.0000] <Ms2ger>
Test works and passes right away... What'd I do wrong? :)

[05:37:18.0000] <annevk>
Hmm, lgrahl disappeared

[05:37:32.0000] <annevk>
Ms2ger: it shouldn't be

[05:37:38.0000] <annevk>
Ms2ger: (re data: URL)

[05:37:58.0000] <annevk>
Ms2ger: data: URLs are only an opaque origin (cross-origin) when they instantiate a realm

[05:38:50.0000] <Ms2ger>
Okay, thanks

[05:40:54.0000] <Ms2ger>
This is getting a little annoying... Every test I try to write just passes in Chrome :)

[05:41:36.0000] <annevk>
Ms2ger: have you done zero-width/height SVG inside a Blob yet?

[05:41:48.0000] <Ms2ger>
No

[05:42:06.0000] <annevk>
Although I'm not sure Chrome would fail that

[05:43:29.0000] <annevk>
Ms2ger: can you help out with https://github.com/w3c/web-platform-tests/pull/9194 btw?

[05:43:51.0000] <Ms2ger>
Yeah

[05:43:57.0000] <Ms2ger>
Not just now, though :)

[05:45:53.0000] <lgrahl>
annevk: Jeez, was I gone again? :X

[05:47:36.0000] <lgrahl>
Changed some settings and hope Freenode is less flaky now...

[05:48:22.0000] <annevk>
lgrahl: you mean new RS(impl) is tedious? I guess it's a little more work than the equivalent writer

[05:49:40.0000] <annevk>
lgrahl: I think the main question is when you invoke write() can you ensure that writes to the outgoing buffer that the data channel uses or do you need to consume it somehow first before passing it on

[05:49:51.0000] <annevk>
lgrahl: but again, best to ask in the issue thread from ricea et al

[05:50:30.0000] <annevk>
lgrahl: it's a bit unfortunate the issue is getting sidetracked so much; seems everyone has to learn anew that it's about a single message (me included)

[05:57:02.0000] <Domenic>
TabAtkins: I find it a bit frustrating that whenever we ask you to do something moderately complicated in your API design, such as keeping consistency with other multimaps, or using arrays instead of proxies, or accepting a pair-sequence, you try to push back and say this really is Web IDL's job to figure out for you. Yes, maybe in an ideal world Web IDL would do more, but we're not there yet, so in the meantime it

[05:57:02.0000] <Domenic>
would be good if you were able to accept advice without saying it's not your problem.

[05:58:32.0000] <TabAtkins>
(1) Your multimaps already aren't consistent with each other, or with Maps. That's somewhat of a problem, and in the issue about it I've been exploring the space a bit and figuring out what the consistent subset we actually need to work with is. Surprise, different things are sometimes different; trivial consistency is the hobgoblin, etc.

[05:59:29.0000] <Domenic>
annevk: lgrahl: using writable stream for sending data is ideal; Fetch not doing that is really unfortunate stemming from some early design choices about the lifecycle of Request/Response objects. But I think Till from Mozilla is still interested in changing that if possible, even if just by adding writable stream sugar to save people the all-too-common pattern of creating an identity transform stream, piping to its

[05:59:29.0000] <Domenic>
writable end, and sending the readable end to fetch

[06:00:20.0000] <annevk>
Domenic: I thought there were also some concerns around being actually able to have the highest performance solution rather than something that has to pipe?

[06:00:47.0000] <Domenic>
annevk: yeah those are Till's concerns, writable streams are more easily performant because piping can hide all the implementation details

[06:00:56.0000] <TabAtkins>
(2) "Arrays instead of proxies" has been a bugaboo for years; we just super disagree about some fundamental aspects here, and I'm not willing to give up on it. "Just use arrays" means accepting a pretty major inconsistency with every other aspect of WebIDL-mediated APIs, and results in a noticeably worse/awkwarder authoring experience.  Finally, the "use arrays, not proxies" position that you and Anne present is

[06:00:56.0000] <TabAtkins>
*not* universal; see my frustration in the relevant WebIDL thread when I'm trying to work around y'all's issues and Boris is like "lol, just use the proxy thing, that's why it's there, dunno what their problem is".

[06:01:11.0000] <annevk>
Domenic: that's not what I was trying to say 😃

[06:01:29.0000] <annevk>
Domenic: I thought the problem was that implementations could not expose the actual underlying buffer to WS

[06:01:49.0000] <annevk>
Domenic: but also, none of this has shipped, so maybe we should revisit

[06:02:12.0000] <annevk>
Domenic: I think it can still fit with Request/Response if body is a callback

[06:02:13.0000] <Domenic>
annevk: Ah right about accurate desiredSize, yeah, that may not be perfectly possible, but it's already not possible with the pass-a-ReadableStream design

[06:02:30.0000] <lgrahl>
Sorry guys, I'm getting disconnected all the time but I check the logs, so just ignore this is happening.

[06:02:30.0000] <lgrahl>
annevk: Yeah, I think new RS is a bit tedious... also when it comes to terminology because both sides use readers now. pipeTo isn't used... all of this seems awkward to me.

[06:02:30.0000] <lgrahl>
annevk: My understanding is that if I don't use BYOB mode, then I always hand out buffers I cannot reclaim (thus, they are implicitly consumed). So, if I create a non-byob reader for a data channel message, then the implementation hands out buffers that it cannot reclaim. On the other side, if I use a normal writer, I cannot reclaim buffers handed out by calls to .write. Correct me if I'm wrong.

[06:02:31.0000] <lgrahl>
annevk: Yes, people ask the same question over and over again in the issue... ;)

[06:02:41.0000] <TabAtkins>
(3) Dunno what you're talking about with the pair-sequence thing. I'm saying that pair sequences are currently very awkward to write *and* read in WebIDL, and it'd be better to have it be a named concept. I then today offered to *write the WebIDL text for such a feature*.  The more map-likes that appear on the platform the more valuable this will be; spec authors will work around it (or get things subtly different,

[06:02:41.0000] <TabAtkins>
because it's awkward) otherwise.

[06:02:42.0000] <annevk>
Domenic: no, I'm also not talking about Content-Length

[06:03:26.0000] <Domenic>
annevk: well that's the only way I can see WritableStreams exposing the buffer

[06:03:54.0000] <Domenic>
TabAtkins: I've given up long ago on convincing you, especially on these issues, but I'm hopeful you'll notice this pattern in your behavior for the future.

[06:04:06.0000] <Domenic>
And who knows, maybe the TAG will save us from these APIs

[06:04:17.0000] <TabAtkins>
So seriously, pretending that I'm pushing back or complaining "whenever we ask you to do something moderately complicated" is an incorrect and frankly insulting characterization of this; look at all the other complicated API surface I've happily written and accepted elsewhere.

[06:07:16.0000] <Ms2ger>
Hmm

[06:07:47.0000] <annevk>
Domenic: I had this notion in my head that doing WS properly was too hard and UAs would have to pipe/consume anyway and couldn't get the developer-provided bytes/memory close enough to the metal

[06:08:18.0000] <Ms2ger>
If I call createImageBitmap with video whose src is a cross-origin URL which redirects to a same-origin URL, is the result origin-clean?

[06:08:24.0000] <annevk>
Domenic: but maybe the only issue is Request being too early and a callback being a little awkward

[06:08:39.0000] <annevk>
Ms2ger: it should not be

[06:09:04.0000] <Domenic>
annevk: it's been a while but the latter is all I remember. You might be right. I'd be interested to get Till and wanderview in a room :)

[06:09:12.0000] <Domenic>
room-slash-GitHub-thread

[06:09:13.0000] <Ms2ger>
I'll let you file another bug on Gecko, then :)

[06:09:54.0000] <annevk>
Ms2ger: hmm, maybe this is an enshrined side channel leak

[06:10:23.0000] <annevk>
Ms2ger: it probably is as if you did this via <iframe> it'd just work, unfortunately

[06:10:28.0000] <Ms2ger>
I would really prefer if it's origin-unclean, because I have no idea how to do the other thing in WebKit :)

[06:11:01.0000] <annevk>
Ms2ger: it would be better, but if it's not consistently so I don't think it's better

[06:11:10.0000] <annevk>
Ms2ger: and I kinda doubt it's consistently so

[06:11:37.0000] <annevk>
This might be a bug in Fetch too, not sure if I tried addressing it yet

[06:14:33.0000] <wanderview>
Domenic: annevk: I feel like I put all my reasons for wanting ReadableStream in the github issue before... if there is a new proposal to add some WritableStream approach for populating a body, then I'd be happy to look at it... but an abstract "replace ReadableStream with WritableStream" doesn't make sense to me

[06:15:46.0000] <annevk>
TabAtkins: I think the main problem I have with your argument is that Boris disagreeing with TC39 doesn't mean it's okay. If you convinced TC39 (as a whole), fine, but otherwise I'm really not sure why we'd revisit this

[06:15:48.0000] <wanderview>
Domenic: annevk: I still feel anything added here would end up being the equivalent of ReadableStream + an IdentityTransformStream in the implementation... and its better to let script choose the size of the buffer in the IdentityTransformStream

[06:17:27.0000] <annevk>
Domenic: https://github.com/yutakahirano/fetch-with-streams/issues/30#issuecomment-95161858 suggest it did have something to do with the actual sink being hard to get to

[06:17:36.0000] <TabAtkins>
annevk: And as I said earlier (and linked you to, and said last year when I last visited this issue...) TC39 *is* okay with this, or at least was okay with it several years back. In the meantime, the primary argument against ("proxies are slow") turns out to be irrelevant, as Boris explained, because all engines optimize integer catch-alls, due to there being several common APIs that use them.

[06:17:50.0000] <annevk>
wanderview: does https://github.com/yutakahirano/fetch-with-streams/issues/30#issuecomment-95161858 accurately summarize your view?

[06:18:03.0000] <annevk>
wanderview: I'm wondering whether or not it translates to WebRTC data channels

[06:18:32.0000] <TabAtkins>
This is what keeps annoying the heck out of me - y'all keep trying to shut it down with "you can't do it, it's slow, TC39 won't allow it", and, uh, both of those are wrong. And I've explained why they're wrong and documented it and gotten other Web Elders with relevant experience to agree.

[06:18:40.0000] <Ms2ger>
annevk, https://github.com/w3c/web-platform-tests/pull/9313 should be uncontroversial; https://github.com/w3c/web-platform-tests/pull/9314 is for the last thing I mentioned, but no hurry to review it for me

[06:18:50.0000] <Domenic>
TabAtkins: that linked thread *definitely* does not reflect "TC39 is OK with this". At most, it contains Brendan saying "we should keep working on this". TC39 as a whole detests new exotic objects.

[06:18:50.0000] <wanderview>
annevk: the issue is that Request is something that is disconnected from the data sink... if the WebRTC data channel thing does not use a Request then it doesn't have that problem IMO

[06:19:14.0000] <TabAtkins>
Brendan, Mark, Maciej, Jonas...

[06:19:15.0000] <Domenic>
It also predates ES6 being finalized and our modern understanding of exotic objects.

[06:19:29.0000] <Domenic>
Only one of which is on TC39 these days

[06:19:32.0000] <wanderview>
annevk: I still prefer ReadableStream stylistically as it gives you better default back pressure... but I don't think thats a blocker

[06:20:14.0000] <annevk>
TabAtkins: I don't think that 2009 thread accurately reflects TC39's view on this

[06:20:28.0000] <annevk>
TabAtkins: in particular catchalls happened and array-likes never did

[06:21:06.0000] <annevk>
TabAtkins: and their Map/Set didn't end up with indexed getters/setters either, even though they are ordered and could

[06:22:02.0000] <annevk>
TabAtkins: so I think that if you want to push this through, you have to do more due diligence; e.g., make a proposal to TC39, get it progressed

[06:22:12.0000] <Domenic>
+1

[06:23:29.0000] <TabAtkins>
The more general solution that solves more problems ended up getting specced, that's not a huge surprise. ^_^ And with that, catch-alls *do* exist, and engines happen to much better-optimize catchalls limited to integer-key gets/sets, so the slower version of what I'm asking for is already possible in userland, and the faster version is possible and already-existing in browserland.

[06:23:33.0000] <annevk>
wanderview: right, but if body were to take a callback that we invoked the moment we hook up the sink, that would work, right?

[06:24:12.0000] <Domenic>
The problem with proxies isn't just that they're slow, it's that they're exotic.

[06:24:17.0000] <TabAtkins>
(I dunno why one would assume that getting a map/set by index is relevant here. They're ordered, but as a side detail. Getting map/set values by index isn't a common feature in any major language.)

[06:24:20.0000] <annevk>
TabAtkins: possible yes, but Proxy-style APIs are discouraged

[06:24:26.0000] <Domenic>
Using normal arrays is the non-exotic pattern that we use for all TC39 APIs

[06:24:45.0000] <wanderview>
annevk: could we add it as an additional thing?  sure... should we remove the straightforward "provide a ReadableStream body" approach with that?  I don't think so

[06:25:17.0000] <wanderview>
annevk: I think its very complicated and quite frankly does not reflect what we do in the browser at all

[06:25:30.0000] <Domenic>
wanderview: I think that myself and Till believe that the current API will not be "straightforward" in the future when everyone's using transform streams and piping things around

[06:26:05.0000] <TabAtkins>
(it's 1:30am here and we're continuing to relay the exact same points that were made last year without any further reflection or budging, so i'm gonna go to bed)

[06:26:57.0000] <wanderview>
Domenic: I guess I'm curious to hear what Till's concern is... AFAIK he defered to someone else to integrate this into the network and DOM layers, so I'm not sure exactly what aspect he is concerned about

[06:27:41.0000] <Domenic>
wanderview: yeah definitely, I'd love to hear your two's conversation. It might be more ergonomics and disconnected from the actual networking, not sure.

[06:27:43.0000] <annevk>
wanderview: I also heard out-of-band he'd like to have WS here

[06:28:20.0000] <annevk>
Maybe we should just set up a call

[06:28:31.0000] <wanderview>
annevk: I'd be interested to know if he has actually looked at what that would take to implement in our stack... I have I don't think it would be any different than ReadableStream+Transform... just less control for script

[06:29:22.0000] <Domenic>
Why less control? You can always introduce your own intermediate buffers

[06:29:39.0000] <wanderview>
Domenic: annevk: internally we use an nsIInputStream which is our native equivalent of a ReadableStream... for probably the last decade

[06:30:04.0000] <wanderview>
Domenic: because you can't control the buffer size the browser inevitably has to introduce to convert from your WritableStream to its internal mechanism

[06:30:48.0000] <Domenic>
wanderview: if the browser uses 0, then you can control it

[06:30:51.0000] <wanderview>
Domenic: the idea that content script is going to use a WritableStream to feed directly into the operating system buffer is just not realistic in a multi-process browser architecture, IMO

[06:32:04.0000] <annevk>
So that would be true for data channels too, I think, although lgrahl thinks otherwise (and probably knows)

[06:32:24.0000] <wanderview>
annevk: Domenic: anyway, if we want a WritableStream as a second way to feed the Request.body, I'm ok with that but not sure we would implement in firefox... I feel pretty strongly Request.body should be able to take a ReadableStream as we've agreed in the past

[06:32:48.0000] <Domenic>
:-/

[06:32:49.0000] <wanderview>
annevk: webrtc is very different, implementation-wise

[06:32:58.0000] <annevk>
I see

[06:33:25.0000] <wanderview>
Domenic: annevk: how do you propose to handle the upload cloaning issue with a WritableStream body?

[06:33:45.0000] <wanderview>
as in, a POST request is redirected and has to provide the body a second time

[06:36:03.0000] <annevk>
wanderview: don't we reject for streams anyway?

[06:36:25.0000] <annevk>
wanderview: I thought opting into streams meant opting out of redirects, unless it was a 303

[06:36:28.0000] <wanderview>
annevk: well, we haven't even shipped streams yet... but yes, we don't support Request streams right now

[06:36:42.0000] <wanderview>
annevk: oh, you mean in the spec?  I wasn't aware of that restriction

[06:36:50.0000] <annevk>
wanderview: yes, per Fetch

[06:37:08.0000] <annevk>
wanderview: otherwise you'd have to buffer the entire thing, taking away all the memory optimizations

[06:37:18.0000] <Domenic>
It seems we actually could support it with the writable stream version, as you'd just call the body function a second time

[06:37:36.0000] <annevk>
Domenic: you just created a minor security hole

[06:38:19.0000] <Domenic>
drrr

[06:38:20.0000] <wanderview>
I don't know why we can ship ReadableStream body first before trying to eek that last 1% of optimizations out with a complicated WritableStream API

[06:38:27.0000] <wanderview>
^can^can't

[06:38:50.0000] <annevk>
I'm not opposed to shipping RS FWIW

[06:38:55.0000] <Domenic>
(aside: the fact that arr[-0] and arr["-0"] are different really freaks me out. I did not know that before today.)

[06:39:00.0000] <annevk>
I was just interested again in the rationale around WS

[06:39:14.0000] <annevk>
Domenic: same

[06:39:44.0000] <annevk>
Domenic: since yesterday or so I've been worried about being unclear about -0/+0 throughout the platform

[06:40:12.0000] <annevk>
Domenic: it helps somewhat that unsigned in IDL means it's normalized, but still, there's a lot of signed things

[06:40:15.0000] <Ms2ger>
No need to worry about that... We most definitely are unclear about it everywhere :)

[06:40:37.0000] <annevk>
Ms2ger: so you're saying we're consistent? I do like consistency

[06:41:03.0000] <Ms2ger>
The signed integers shouldn't have negative zero at all, but who knows if that's actually written down

[06:41:37.0000] <annevk>
Part of the problem is that we haven't really agreed on what a number in a specification means

[06:41:58.0000] <annevk>
But BigNum might solve that, so I'm excited for BigNum

[06:43:22.0000] <Domenic>
Hmm so far the internet is coming out quite strong in favor of getting the answer right https://twitter.com/domenic/status/958711529070710785

[06:44:49.0000] <lgrahl>
Btw. I don't get the argument of buffer size control. Isn't that what .desiredSize on WS is good for?

[06:46:07.0000] <wanderview>
lgrahl: can you set desiredSize on a WS you did not create?

[06:46:50.0000] <annevk>
Domenic: r+ for https://github.com/w3c/web-platform-tests/pull/9306?

[06:47:15.0000] <lgrahl>
wanderview: No but in the proposed API, RTCDataChannel creates the WS for me and it knows how much buffer space there is. The user can still decide to ignore it.

[06:48:45.0000] <wanderview>
lgrahl: ok, but a user could control the buffer space if they created a Transform... if they wanted to size it exactly for their chunks, etc

[06:49:01.0000] <wanderview>
lgrahl: anyway, I don't have any opinions on webrtc API use of ReadableStream vs WritableStream

[06:50:17.0000] <lgrahl>
wanderview: I haven't really looked at transforms yet. You mean in case the user *requires* a specific chunk size for some transformation?

[06:50:29.0000] <wanderview>
other than I think default back pressure mechanism is nicer with ReadableStream and lots of examples in node.js with people getting back pressure wrong with push-style streams... but I won't fight that issue

[06:51:42.0000] <wanderview>
lgrahl: when I say a Transform I mean a buffer that exposes a WritableStream end to fill the buffer and a ReadableStream end to read from the buffer... so if an API only takes ReadableStream, but you want to use a WritableStream for some reason, you can use this thing to convert... it would just let you control the size of the buffering taking palce

[06:53:25.0000] <lgrahl>
wanderview: Alright, transforming from WS to RS.

[06:54:21.0000] <lgrahl>
wanderview: You guys are the experts but from the outside, it just looks really weird to have WS and then use RS for pretty much everything.

[06:54:28.0000] <wanderview>
lgrahl: I usually call it a "pipe", but folks in streams spec like to call it an "identity transform"

[06:56:47.0000] <lgrahl>
wanderview: What annevk and I wanted to find out is whether there's a reason why we shouldn't go for WS for RTCDataChannel. To me, it originally looked like the way to go.

[06:57:19.0000] <wanderview>
lgrahl: I mean, the other reason to go with ReadableStream is you will get adoption faster since more browsers will ship ReadableStream before they ship WritableStream

[06:58:28.0000] <wanderview>
lgrahl: but like I said, I'm not really involved with webrtc, so I'm not going to fight you all using WritableStream

[06:58:45.0000] <wanderview>
maybe it will work great and it will be the use case used to encourage more WritableStream usage elsewhere

[07:00:47.0000] <annevk>
wanderview: note that https://github.com/whatwg/encoding/pull/127 uses WS too

[07:01:43.0000] <wanderview>
annevk: yea, I think transformation things like that make the most sense for WS... wfm

[07:02:53.0000] <lgrahl>
wanderview: Other than a little API clumsiness (.send(RS) just looks nicer than .createWritableStream()), I haven't seen anything that would be a big blocker to use WS in data channels. But to be honest, I haven't understood all of your points in the issue and stuff like easier backpressure support in RS because I'm just not that deep into the streams spec.

[07:04:26.0000] <wanderview>
lgrahl: well, with a pull-style stream like ReadableStream you get automatic back pressure... if the consumer isn't ready for more data they just stop reading

[07:05:28.0000] <wanderview>
lgrahl: with a push-style stream like WritableStream the source has to understand the signal that says "please stop sending data right now" and back off... its not super hard to implement, but historically its something that people get wrong... and they end up queuing a bunch of data in temporaries and stuff

[07:06:10.0000] <lgrahl>
wanderview: Okay, I get that.

[07:11:05.0000] <lgrahl>
wanderview: I mean, it's a tradeoff, right? And I personally believe it's not too much to ask for the sink implementation to get this right to provide a (at least to me) more appealing way to write data to it. But still, you're the experts regarding streams, so if there are other concerns... let me know. I don't want to create an API that sucks in the end. :)

[07:15:18.0000] <wanderview>
lgrahl: using an API that takes ReadableStream allows the sink to get it write... exposing a WritableStream is asking the person pushing the data to get it right... AFAICT anyway

[07:33:39.0000] <lgrahl>
wanderview: I'm not really sure what the user of a WS writer can get wrong. Granted, when using a WS the user cannot reclaim the buffer (at least not until we have BYOB writers), so this *is* a gotcha. But IIRC you already have a way to claim a buffer somehow, so this could maybe be used?

[07:43:49.0000] <annevk>
lgrahl: looking at some examples it seems rather trivial to ignore backpressure

[07:47:25.0000] <wanderview>
of course ReadableStream is not immune either if you have to adapt a push source you don't control into a ReadableStream... but you are kind of out of luck there

[09:43:43.0000] <Domenic>
surma: FYI I'll work on the separate-section thing myself since it ties into clarifying some stuff that came up while chatting with lgrahl.

[09:44:03.0000] <Domenic>
Would be happy to get your review though :)

[09:49:55.0000] <surma>
Domenic: sg! Happy to review :D

[10:26:43.0000] <Mek>
blah, trying to figure out what cross-origin requests to blob URLs browsers actually allow... firefox seems to allow nothing (at least nothing I've tried so far), which seems reasonable. But chrome allows some no-cors fetches as well as some navigate fetches (but not all in either case)...

[10:27:35.0000] <Mek>
(the spec seems to allow all no-cors and navigate fetches though, which definitely doesn't match implementations)

[10:29:15.0000] <annevk>
Mek: I don't think I carefully considered blob loading and just grouped them with other things

[10:30:07.0000] <annevk>
Mek: also yeah, whenever you look into something ill-defined and go, "how  does this actually work?", it's always bad news

[10:31:16.0000] <annevk>
When there's enough vagueness in a standard to allow for observable differences, there will be plenty of those

[10:31:26.0000] <annevk>
When the standard is solid, but there are no tests, same deal

[10:36:20.0000] <Mek>
yeah... that definitely matches my experience with these things...

[10:47:07.0000] <Mek>
actually writing a test to determine of a no-opener window.open succeeded or not is kind of annoying...

[10:59:19.0000] <wanderview>
Mek: BroadcastChannel() to a cross-origin iframe that forwards to its parent maybe?

[11:07:56.0000] <Mek>
yeah, that's what I'm thinking too

[11:08:49.0000] <wanderview>
Mek: won't work in webkit, but I guess neither would SharedWorker

[12:36:26.0000] <smaug____>
whaat, is Garrett Smith back

[12:38:59.0000] <smaug____>
is it possible to block a github user from commenting on  issues?

[12:46:39.0000] <jyasskin>
smaug____: Yes, if you're an org admin: https://help.github.com/articles/blocking-a-user-from-your-organization/

[12:47:13.0000] <smaug____>
aha

[12:47:27.0000] <jyasskin>
smaug____: There's also the milder https://help.github.com/articles/locking-conversations/

[12:48:25.0000] <smaug____>
https://github.com/w3c/webcomponents/issues/713#issuecomment-362062221 is something requiring blocking, I think

[12:48:31.0000] <smaug____>
and hopefully such comment can be removed

[12:49:47.0000] <smaug____>
MikeSmith: ^

[13:40:34.0000] <Mek>
does window.onload firing guarantee that any iframes in that window have also finished loading?

[13:41:01.0000] <Mek>
(and finished executing sync javascript that sets document.domain)

[13:44:42.0000] <gsnedders>
Mek: yes

[13:46:13.0000] <gsnedders>
Mek: see a bit below https://html.spec.whatwg.org/#iframe-load-event-steps

[13:46:27.0000] <gsnedders>
Mek: the paragraph beginning "When the iframe's browsing context's active document is not ready for post-load tasks"

[13:47:21.0000] <Mek>
gsnedders: I think that's about the iframes load event itself, not the load event of the window containing the document containing the iframe, right?

[13:48:21.0000] <Mek>
although it isn't clear if "the iframe's browsing context" is the browsing context inside the iframe or the browsing context the iframe lives in...

[13:49:20.0000] <gsnedders>
Mek: the end of the sentence

[13:49:48.0000] <gsnedders>
oh wait no you're right

[13:50:17.0000] <Mek>
the spec would be clearer if it actually refered to "the iframe's nested browsing context", rather than being vague about which exact browsing context it is talking about...

[13:50:48.0000] <Mek>
but yeah, an iframe no delaying the load event of its parent document would explain some (very infrequent) flakiness I'm seeing in some tests in chrome

[13:51:28.0000] <gsnedders>
it definitely /should/ AFAIK

[13:51:32.0000] <gsnedders>
per what browsers do

[13:54:29.0000] <gsnedders>
Mek: like this is exactly what the warning where I linked is about

[13:54:35.0000] <gsnedders>
wait no

[13:54:36.0000] <gsnedders>
kjdfkdfgkhfdg

[13:54:51.0000] <gsnedders>
can someone dig me out of this hole?

[13:56:52.0000] <gsnedders>
Mek: I think in the text I linked to by "the iframe must delay the load event of its document" means "the owner document of the iframe" rather than the one in the iframe?

[13:57:16.0000] <Mek>
I'm not sure...

[14:00:06.0000] <Domenic>
I am pretty sure that's what it means, but wow, that is unclear.

[14:00:16.0000] <Domenic>
Even just "its node document" would help me.

[14:02:09.0000] <gsnedders>
Domenic: see I went from thinking that was what it meant to being unsure to thinking that was what it meant *and I know what the behaviour should be*.

[14:02:20.0000] <Mek>
yeah, that text could definitely use some clarification...

[14:02:28.0000] <gsnedders>
and if someone who knows what the correct behaviour per-spec is can't figure out what the spec says…

[14:03:33.0000] <Mek>
it does seem like generally chrome does indeed delay the outer onload till the iframe is loaded. But I'm definitely getting (rare) flaky test failures where it seems like outer code waiting for onload runs before the inner iframe has had a chance to set document.domain. But maybe that's just a bug in chrome.

[14:04:40.0000] <gsnedders>
Mek: the web definitely relies on it

[14:07:52.0000] <Domenic>
Filed https://github.com/whatwg/html/issues/3436 for those who want to follow along

[14:09:56.0000] <Mek>
thanks

[14:33:11.0000] <MikeSmith>
smaug____: thanks for the heads-up

[15:31:22.0000] <TabAtkins>
Domenic: omg, where did you get your twitter header from?

[15:31:55.0000] <Domenic>
Hmm some Marvel comic... which one was it...

[15:33:12.0000] <Domenic>
I want to say Ant-Man?

[15:35:30.0000] <Domenic>
Yeah here we go http://readcomiconline.to/Comic/The-Astonishing-Ant-Man/Issue-5?id=34226#9

[15:43:01.0000] <TabAtkins>
Ahahaha, two panels later is gold too. So good.

