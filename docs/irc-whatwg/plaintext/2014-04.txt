2014-04-01
[17:00:39.0000] <zewt>
for the window.onerror example, are we talking about parsing an error log later on, or programmatically doing something with the magic string?

[17:01:52.0000] <Hixie>
TabAtkins: why 60 million, btw?

[17:01:59.0000] <Hixie>
TabAtkins: what's your definition of "expect"?

[17:02:04.0000] <TabAtkins>
36^5, the sqrt of 36^10.

[17:02:07.0000] <TabAtkins>
50% expectation

[17:02:28.0000] <Hixie>
oh, i see

[17:02:35.0000] <Hixie>
the alphabet only actually has 16 characters

[17:02:40.0000] <Hixie>
so 16^5

[17:02:51.0000] <TabAtkins>
Oh, you're only genning hex?

[17:02:55.0000] <TabAtkins>
I didnt' notice that

[17:03:09.0000] <TabAtkins>
That's only about 1M then.

[17:03:40.0000] <Hixie>
er wait

[17:03:47.0000] <Hixie>
not 16...

[17:04:00.0000] <Hixie>
oops

[17:04:02.0000] <Hixie>
it is 16

[17:04:08.0000] <Hixie>
but it's supposed to be more

[17:04:10.0000] <Hixie>
26 or so

[17:04:13.0000] <Hixie>
2346789abcdefghjkmnpqrtwxy

[17:04:50.0000] <TabAtkins>
Ah, the easy-to-distinguish alphanums.

[17:05:01.0000] <Hixie>
yeah, that's the idea

[17:05:19.0000] <Hixie>
hm

[17:05:25.0000] <Hixie>
i need this to be a power of 2 for the logic to work better

[17:05:37.0000] <Hixie>
/me wonders whether to add or remove

[17:06:35.0000] <TabAtkins>
What's your logic?

[17:07:34.0000] <Hixie>
geenerate hmax sha 512 of increasing number, use the first n bits to generate a 10 character string

[17:07:53.0000] <TabAtkins>
Interesting.

[17:08:04.0000] <Hixie>
i can add z5suv back in but i'm still short a character...

[17:08:12.0000] <zewt>
just reading /dev/urandom will probably give you equally non-repeating results, without depending on a last-used-number state

[17:08:12.0000] <TabAtkins>
Why not just generate a num between 0 and 26^10, then encode it in base 26?

[17:08:18.0000] <Hixie>
really don't want to add il1o0

[17:08:51.0000] <TabAtkins>
And yes, the lowercase z/s aren't really confusable for 2/5.

[17:09:02.0000] <zewt>
(since /dev/urandom these days is basically just a crypto hash on top of entropy)

[17:09:37.0000] <Hixie>
i like to avoid actual randomness in my code

[17:09:58.0000] <TabAtkins>
You're effectively grabbing randomness by taking an arbitrary chunk of a hash.

[17:10:37.0000] <Hixie>
right

[17:10:45.0000] <Hixie>
reproducible "randomness"

[17:10:49.0000] <zewt>
i prefer to avoid state that has to be persisted, myself

[17:12:57.0000] <zewt>
also a bunch of new complexity if two clients might race and generate from the same index

[17:13:29.0000] <TabAtkins>
Yup.

[17:14:32.0000] <zewt>
(which itself can be really hard to write tests for; i hate writing tests for things like locking and atomicity)

[17:14:42.0000] <Hixie>
locking files is a solved problem :-)

[17:15:21.0000] <zewt>
with a solution that's much more complex than open('/dev/urandom').read(16) :----------)

[17:15:45.0000] <zewt>
i guess it comes down to what your environment provides, and how much you trust it

[17:16:03.0000] <zewt>
(i don't include "make sure /dev/urandom is really random" in my tests, after all)

[17:17:00.0000] <zewt>
("really random" as in "not /dev/zero")

[17:17:09.0000] <zewt>
(in case someone was going to nit about PRNGs)

[17:17:30.0000] <TabAtkins>
Any system that doesn't implement a decent /dev/urandom would be *super* insecure anyway.

[17:18:19.0000] <zewt>
i tend to suspect security inexperience in people who still use /dev/random because it's "more secure", heh

[17:18:59.0000] <Hixie>
locking files is like lines of code including importing the relevant constants and unlocking...

[17:19:05.0000] <Hixie>
like three lines, even

[17:19:36.0000] <Hixie>
ok, now using a 32 character alphabet.

[17:20:07.0000] <Hixie>
using the first 5 bits of each of the first ten bytes of the hmac sha 512 of numbers in sequential order.

[17:20:20.0000] <Hixie>
bbiab

[17:21:55.0000] <zewt>
maybe your environment has additional helpers for the busywork (blocking if the lockfile already exists, cleaning up if the pid contained in the lockfile doesn't exist, etc)

[17:22:18.0000] <TabAtkins>
It's perl, so that's plausible.

[17:22:33.0000] <zewt>
also the need to atomically write the state file containing the last-used index (write new file, sync, rename), which is something all languages really should provide, but few do

[17:24:06.0000] <TabAtkins>
While you're locked, that works anyway, right?

[17:27:07.0000] <zewt>
if the machine crashes, you don't want to reboot and come back up with a zero-byte file

[17:27:24.0000] <TabAtkins>
Ah, right.

[17:27:32.0000] <zewt>
(restore from backup and you lose that day's index delta)

[17:28:10.0000] <zewt>
''.join('23456789abcdefghijkmnpqrstuvwxyz'[ord(x) >> 3] for x in hashlib.sha512(open('/dev/urandom').read(32)).digest()[0:10]) # one-liners are evil, even in python

[20:59:02.0000] <Hixie>
i ended up testing 30,058,310 codes with the new algorithm, no dupes.

[21:00:29.0000] <Hixie>
(by tab's maths, there would be a 50% chance of a dupe at about 33 million, if i understand it right)

[22:25:18.0000] <Hixie>
man, the tokeniser sure does have a lot of states

[23:53:09.0000] <sangwhan>
TabAtkins: is unprefixing transitions *and* transforms both covered under the umbrella of this bug? https://code.google.com/p/chromium/issues/detail?id=154772

[00:12:57.0000] <Domenic_>
Hixie: sounds like a plan, will devote some time to it eventually. I need to do a write up with use cases, possibilities (e.g. generated vs. human readable), impact on existing/future specs, etc.

[03:00:14.0000] <a-ja>
TabAtkins: ping

[03:07:12.0000] <a-ja>
TabAtkins: unping....will catch you later

[03:07:55.0000] <Ms2ger>
The new css spec style sheet is so funny...

[03:22:25.0000] <hsivonen>
looks like the support status markers on CSS specs haven't been updated to reflect the demise of Presto and Blink forking off of WebKit

[03:41:39.0000] <hsivonen>
MikeSmith: I don't know what to do about bugzilla.validator.nu cookies. The urlbase and cookiepath settings look right to me.

[03:52:22.0000] <smaug____>
oh, hsivonen is alive

[03:53:57.0000] <hsivonen>
is this where I'm supposed to say that rumors of my demise have been exaggerated?

[03:58:29.0000] <Ms2ger>
There were rumours?

[04:32:33.0000] <Ms2ger>
hsivonen, oh, better news than your death, congratulations :)

[04:32:47.0000] <hsivonen>
Ms2ger: thanks

[04:34:23.0000] <zcorpan>
what's the news?

[04:35:01.0000] <hsivonen>
zcorpan: a baby (that is, I'm now back from paternity leave)

[04:35:30.0000] <zcorpan>
hsivonen: ok, congrats!

[04:35:36.0000] <hsivonen>
zcorpan: thanks

[04:37:47.0000] <smaug____>
congratulations

[04:38:06.0000] <hsivonen>
smaug____: thanks

[06:57:29.0000] <hsivonen>
wow. there's now a community group for MPEG-2 in-band captioning in <video>

[06:59:18.0000] <darobin>
there's a community group for everything

[07:00:31.0000] <Ms2ger>
Sounds more like a business group

[07:16:59.0000] <zcorpan>
heycam|away: maybe we should drop support for webidl in blink

[09:15:32.0000] <yoav>
SimonSapin: Around?

[09:15:41.0000] <SimonSapin>
yes

[09:16:21.0000] <yoav>
Got a Q regarding http://dev.w3.org/csswg/css-syntax/#consume-an-escaped-code-point

[09:16:39.0000] <yoav>
Also: OMG WUT IS THIS BG

[09:16:58.0000] <SimonSapin>
It’s the new spec design :)

[09:17:05.0000] <TabAtkins>
/me is also here. TabAtkins is so alone...

[09:17:24.0000] <yoav>
TabAtkins: Hey

[09:17:36.0000] <yoav>
I'm assuming the design is your fault

[09:17:55.0000] <yoav>
Is '\r' an escaped code point?

[09:18:32.0000] <TabAtkins>
\r is a carriage return?

[09:18:33.0000] <SimonSapin>
yoav: yes, it represents 'r'

[09:18:37.0000] <SimonSapin>
in CSS

[09:18:40.0000] <Ms2ger>
Wat

[09:18:55.0000] <SimonSapin>
"anything else : Return the current input code point. "

[09:19:10.0000] <TabAtkins>
Oh, yeah, if you literally type \r in a CSS document, it's the same as just typing r.

[09:20:04.0000] <yoav>
So why is "(max-width: \r6000px)" is parsed OK in anything that's not my MQ parser?

[09:20:18.0000] <yoav>
Is the \r getting pre processed?

[09:20:30.0000] <TabAtkins>
Because browsers' existing MQ parsers are usually crazy-stupid.

[09:20:52.0000] <TabAtkins>
And/or yeah, they're stupidly interpreting \r as a CR, which is just whitespace.

[09:20:59.0000] <SimonSapin>
yoav: do you have a test case?

[09:21:33.0000] <SimonSapin>
if a JS literal string is involved, it does its own backslash-unescaping first

[09:21:59.0000] <yoav>
SimonSapin: Ahh

[09:22:10.0000] <yoav>
That explains it

[09:22:23.0000] <TabAtkins>
Layers upon layers of escapes.

[09:22:50.0000] <TabAtkins>
I like that HTML has a completely different escape syntax. It avoids the stacked-escapes problem.

[09:22:53.0000] <yoav>
"The escaped onion" would make a good children's book title

[09:24:45.0000] <yoav>
SimonSapin: OK, cool. That's what was messing me up

[09:25:06.0000] <yoav>
So, '\r' is 'r' and everything works fine

[09:25:25.0000] <SimonSapin>
try "\\r" in a JS string

[09:27:17.0000] <yoav>
Any cool examples for escaped MQs I can use for testing?

[09:30:04.0000] <SimonSapin>
hum, replace an character on an identifier with '\' + hex value of the code point + ' '

[09:30:39.0000] <SimonSapin>
add leading zeros to go up to 6 hex digits

[09:30:44.0000] <SimonSapin>
add leading zeros to go up to 6 hex digits and omit the space

[09:30:47.0000] <yoav>
SimonSapin: Trying "(max-width:6000px \u0020 )" and getting nothing

[09:31:10.0000] <SimonSapin>
omit the space if the next char is not an hex digit

[09:31:19.0000] <SimonSapin>
there is no u

[09:31:52.0000] <SimonSapin>
and escapes (unless in a quoted string) give you identifiers

[09:32:40.0000] <SimonSapin>
also: replace any non-hex-digit character in an identifier by '\' followed by itself

[09:32:50.0000] <SimonSapin>
and see https://github.com/SimonSapin/css-parsing-tests

[09:33:19.0000] <SimonSapin>
eg. https://github.com/SimonSapin/css-parsing-tests/blob/101c330cb06b3e6de7f30509b4237421b94e3f28/component_value_list.json#L25-L38

[09:33:56.0000] <SimonSapin>
https://github.com/SimonSapin/css-parsing-tests/blob/101c330cb06b3e6de7f30509b4237421b94e3f28/component_value_list.json#L25-L52, actually

[09:35:46.0000] <yoav>
SimonSapin & TabAtkins: Is it normal that neither Firefox nor Chrome actually match MQs with that? Or am I doing it wrong?

[09:36:07.0000] <SimonSapin>
yoav: with what? (Test case please)

[09:37:01.0000] <TabAtkins>
"(max-width:6000px \0020)" *should* match nothing, because you've got an ident hanging out there.

[09:37:06.0000] <yoav>
http://jsbin.com/texaqabu/3/edit

[09:37:12.0000] <TabAtkins>
An ident whose value is a single U+0020 character.

[09:37:58.0000] <TabAtkins>
yoav: What characters are those?\

[09:38:15.0000] <SimonSapin>
yoav: CSS numeric escapes are always hex

[09:38:23.0000] <SimonSapin>
a 0 prefix does not make it octal

[09:38:42.0000] <yoav>
I was going with "px"

[09:39:00.0000] <SimonSapin>
that’d be \70\78 in hex

[09:39:34.0000] <yoav>
That's dumb of me

[09:39:38.0000] <TabAtkins>
^_^

[09:40:09.0000] <yoav>
OK!

[09:40:13.0000] <yoav>
Breakthrough

[09:40:20.0000] <yoav>
Working in Firefox

[09:40:44.0000] <yoav>
No dice in Chrome tho, but that gives me something to fix!

[09:41:04.0000] <TabAtkins>
Yeah, as mentioned previously, our MQ parser is mega-broken.

[11:14:39.0000] <SamB>
hmm, should I alias mediawiki's UTF-8 tracking bug as "UTF-8", "utf-8", or "utf8" ... practically all existing aliases are lowercase ...

[11:18:16.0000] <SamB>
oh, wait, it's also about Unicode so I'll just alias it as "unicode" ...

[11:31:16.0000] <Hixie>
annevk: yt?

[11:31:23.0000] <annevk>
Hixie: yes

[11:31:32.0000] <Hixie>
annevk: how do you feel about putting document.title in DOM

[11:31:34.0000] <annevk>
Hixie: your timezone for the next seven days

[11:31:44.0000] <Hixie>
annevk: it needs to interact with SVG and HTML <title>

[11:31:57.0000] <annevk>
Hixie: can't HTML just do that?

[11:32:22.0000] <annevk>
Hixie: or does the SVG WG still pretend it can have SVG without HTML? (because they cannot, they don't have an event loop and things)

[11:32:23.0000] <Hixie>
annevk: i could, but it seems weird for HTML to be defining some SVG-specific stuff, so i was thinking HTML and SVG would hook into something DOM specifies

[11:32:49.0000] <Hixie>
maybe i should just do it and not worry about it though

[11:32:58.0000] <annevk>
Hixie: I'm happy to blur the lines further, either way

[11:33:06.0000] <SamB>
/me has always found html <title> rather magical

[11:34:57.0000] <SamB>
(Well, ever since I discovered that you can't get the same results with custom XML and CSS)

[11:37:52.0000] <Hixie>
well all the useful elements in HTML are "magical" by that definition

[11:39:22.0000] <SamB>
in the sense that they have semantics as well as presentation, sure

[11:40:25.0000] <Hixie>
in the sense that the user agent is required to do stuff with them more than you can do with custom XML and CSS

[11:40:43.0000] <Hixie>
e.g. <form>, <a>, <input>, <video>, ...

[11:41:01.0000] <SamB>
you are clearly using a different sense of the term "useful" than I am

[11:41:24.0000] <Hixie>
why?

[11:42:06.0000] <SamB>
well, mine includes stuff like <h2>

[11:43:35.0000] <Hixie>
s/useful/interesting/?

[11:48:04.0000] <SamB>
anyway, it might have been 15 years ago that I got the idea "<title> is magical" into my head ...

[11:49:28.0000] <Hixie>
well, i'm not a fan of the word "magical", but <title> has non-mundane behaviour, certainly

[11:49:45.0000] <Hixie>
like <details>, <output>, <progres>, <canvas>, etc

[12:05:41.0000] <manu->
TabAtkins: I totally love what you've done w/ the non-element selectors spec: http://dev.w3.org/csswg/selectors-nonelement/

[12:06:18.0000] <manu->
(W3C Stylesheets hacked) https://twitter.com/jirkakosek/status/451067752703197184/photo/1

[12:06:28.0000] <Ms2ger>
manu-, *all dev.w3.org/csswg/ specs

[12:07:23.0000] <manu->
It really is a step in the right direction... the dot-com bubble just messed everything up, glad to see a move back to fundamentals.

[12:08:11.0000] <Ms2ger>
It's kinda unimaginative... Same thing from last year

[12:08:44.0000] <manu->
oooh, right... April fools - forgot about that... had turned off all of my news feeds waiting for it to blow over.

[12:23:17.0000] <TabAtkins>
Ms2ger: Yeah, I'd forgotten to prepare anything new.  I'll actually do a new joke next year, I promise. ^_^

[12:51:17.0000] <annevk>
TabAtkins: but will it resolve?

[12:58:29.0000] <TabAtkins>
annevk: It'll take a year, but yeah.

[12:58:32.0000] <dglazkov>
Hixie: with MessagePort, how does one side realize that the other side is no longer listening (due to untimely demise, for instance)

[12:58:36.0000] <dglazkov>
?

[12:58:59.0000] <annevk>
dglazkov: you don't, you need to implement ping

[12:59:15.0000] <annevk>
dglazkov: reason is GC

[12:59:32.0000] <dglazkov>
okay

[12:59:44.0000] <annevk>
Which reminds me, at some point we need to figure out the SW story around garbage collection

[13:00:24.0000] <SamB>
SW?

[13:00:26.0000] <dglazkov>
why is GC being detectable a problem?

[13:00:33.0000] <annevk>
dglazkov: there have been some proposals on the position to not expose GC / make memory leaks likelier

[13:00:56.0000] <SamB>
/me does not like memory leaks

[13:00:57.0000] <annevk>
dglazkov: exposing the details of GC is bad as it might lead to having to define GC

[13:01:06.0000] <annevk>
dglazkov: ask TC39

[13:01:14.0000] <dglazkov>
annevk: that doesn't seem bad, just hard

[13:01:33.0000] <annevk>
dglazkov: why not, we have changed GC strategies many many times over the years due to it not being exposed

[13:01:40.0000] <annevk>
dglazkov: if it's exposed we cannot change strategies

[13:01:48.0000] <dglazkov>
that's not necessarily true, right?

[13:02:53.0000] <annevk>
I'm not sure I can speak much to all of the constraints here. I do know it's been one of the things we have tried very hard to avoid ever doing.

[13:02:56.0000] <SamB>
hmm, that sounds kind of like a silly reason to have no way to detect a broken socket

[13:03:29.0000] <SamB>
just make sure the GC is already sufficiently hard to predict

[13:03:54.0000] <annevk>
"just"

[13:04:04.0000] <SamB>
what, you mean it isn't?

[13:04:42.0000] <SamB>
it's not like there's refcounting involved like in CPython ...

[13:04:57.0000] <dglazkov>
annevk: totally understand. It seems though the times are changing. With where asm.js is going, exposing GC in one way or another looks inevitable.

[13:06:05.0000] <annevk>
dglazkov: I don't know, would have to ask dherman, but exposing to asm.js does not necessarily mean we want to expose it higher-level too

[13:06:33.0000] <dglazkov>
yup

[13:10:37.0000] <SamB>
annevk: I guess you must be worried about exposing what happens when a whole compartment goes away?

[13:11:07.0000] <annevk>
SamB: exposing GC in general

[13:12:38.0000] <SamB>
what else is there that's presently deterministic enough that stuff might grow to depend on it?

[13:13:31.0000] <annevk>
Anything? Content has a tendency to rely on anything we expose, whether intentional or not

[13:16:07.0000] <SamB>
I mean, what other situations can cause objects to be collected more-or-less immediately, rather than whenever the GC finally kicks in?

[13:18:02.0000] <annevk>
Depends on your GC

[13:24:08.0000] <smaug____>
dglazkov: what has asm.js to do with gc?

[13:25:25.0000] <smaug____>
asm.js makes such js that gc doesn't have to run at all

[13:28:43.0000] <smaug____>
SamB: you might implement the whole system using a cycle collector and traditional refcounting

[13:28:58.0000] <smaug____>
SamB: then objects would usually die when the last ref goes away

[13:29:18.0000] <smaug____>
and in case of cycles, when the collector runs

[13:29:32.0000] <SamB>
smaug____: who would be stupid enough to actually do it that way

[13:29:57.0000] <smaug____>
what is wrong with that?

[13:30:08.0000] <SamB>
refcounting is actually pretty slow

[13:30:25.0000] <smaug____>
there are algorithms to optimize out most of it

[13:30:37.0000] <smaug____>
and GC is hard if you have lots of objects

[13:30:52.0000] <smaug____>
since GC deals with live objects and CC only possible garbage objects

[13:31:09.0000] <SamB>
hmm

[13:32:03.0000] <jsbell>
annevk FWIW: dbh = indexedDB.open('db', 1); indexedDB.open('db', 2).onsuccess = function(){alert('GC-or-equivalent must have happened');}; dbh = null;

[13:32:24.0000] <smaug____>
best performing systems are, at least per certain literature and research, combination of gc and cc

[13:32:56.0000] <SamB>
I guess refcounting *does* at least only do the extra work on objects that are probably of interest

[13:32:57.0000] <annevk>
jsbell: you don't define that in terms of event loops and lifetimes?

[13:34:38.0000] <jsbell>
annevk: The spec says "If the connection is GCed  .... the connection is closed", which unblocks the second connection.

[13:35:18.0000] <annevk>
Oh my

[13:35:34.0000] <smaug____>
whaaat?

[13:35:38.0000] <smaug____>
/me files a spec bug

[13:36:14.0000] <jsbell>
Yeah. I was poking around for precedent for "what if a transaction could waitUntil() a Promise, but the Promise was never resolved"

[14:01:06.0000] <annevk>
https://www.youtube.com/watch?v=_eT7sl7bR1A oh man

[14:01:21.0000] <annevk>
I wonder if there's a 2048 homescreen

[14:08:26.0000] <jgraham>
annevk: Higher score == better apps you can launch?

[14:08:45.0000] <jgraham>
And 2048 gives you the browser

[14:08:50.0000] <annevk>
jgraham: yeah, maybe one screen has the game, and another has the apps available thus far

[14:09:09.0000] <jgraham>
No, the game tiles are the launchers

[14:11:09.0000] <annevk>
oh man

[14:11:30.0000] <annevk>
so at some point you can no longer access 1024 until you hit it again?

[14:12:49.0000] <Ms2ger>
Hmm?

[14:13:08.0000] <annevk>
the app corresponding to 1024 if that was unclear

[14:13:23.0000] <annevk>
I still haven't hit 8192 btw

[14:13:30.0000] <annevk>
got 4096 several times

[14:13:40.0000] <annevk>
I get sloppy after a while :/

[14:23:04.0000] <hober>
threes ftw :)

[14:27:52.0000] <zewt>
refcounting is comparatively slow, but in most layers it doesn't matter today

[14:28:11.0000] <zewt>
in systems where you can get away with not breaking cycles (eg. not the web), it also has the huge advantage of being deterministic

[14:28:46.0000] <Hixie>
slow relative to what? managed memory and walking the entire heap every few seconds?

[14:29:01.0000] <Hixie>
or slow relative to a defined ownership model?

[14:29:26.0000] <zewt>
relative to mark and sweep, since you don't have to adjust refcounts all the time (though I guess that also depends on how smart you can be about optimizing those out)

[14:29:47.0000] <Hixie>
really? do you have data on that?

[14:29:53.0000] <zewt>
no, just my recollection

[14:30:04.0000] <Hixie>
refcounting is like 2 extra instructions per assignment

[14:30:10.0000] <zewt>
but if true, I still think it's irrelevant today, except maybe for really performance-sensitive stuff

[14:30:11.0000] <Hixie>
compared to walking the entire heap, that seems cheap.

[14:30:15.0000] <jgraham>
hober: There you are again promoting iOS rather than the open web ;)

[14:30:50.0000] <SamB>
Hixie: that doesn't happen every assignment though ...

[14:30:58.0000] <Hixie>
true, but still

[14:31:08.0000] <zewt>
it's an extra two writes, and in some (also non-web) cases an atomic write (don't know how expensive those are today)

[14:31:20.0000] <Hixie>
i have no data one way or the other, i just find it surprising

[14:31:46.0000] <Hixie>
i would have thought refcounting would win hands down in terms of raw cpu cycles spent on memory management over the lifetime of a task

[14:31:49.0000] <zewt>
i'm sure it depends massively on the access patterns and language, so I'm overgeneralizing for sure

[14:32:22.0000] <Hixie>
i mean, wouldn't a GC model require at least as many instructions per assignment as well?

[14:32:34.0000] <zewt>
not following

[14:32:52.0000] <Hixie>
i guess you could just know where the pointers are

[14:33:01.0000] <Hixie>
if it's a strongly typed system

[14:33:27.0000] <Hixie>
and walk it that way

[14:33:51.0000] <zewt>
if you have a memory model where you can walk around and look at pointers (like you need for that), "x = y" is simply what it says, set the storage for x to a pointer to y

[14:34:07.0000] <Hixie>
/me usually just uses a defined ownership model, which seems faster than either :-)

[14:34:08.0000] <zewt>
for refcounting, you have to say "if x was set to something, decrease its refcount" and then "increase y's refcount" after the assignment

[14:34:18.0000] <zewt>
which might also mean a branch

[14:34:52.0000] <zewt>
definitely faster, it just tends to lose on other fronts :P

[14:35:34.0000] <Hixie>
yeah, it's definitely not a perfect solution :-)

[14:35:45.0000] <Hixie>
i find it makes me think more about the design though

[14:35:48.0000] <Hixie>
which is a win

[14:36:12.0000] <zewt>
i grew up on C++, i guess I should be a little sad that I almost never use it these days

[14:39:10.0000] <Hixie>
i spent a decade or more writing lots of perl

[14:40:00.0000] <zewt>
i avoided that trap

[14:40:09.0000] <Hixie>
but recently i've come to realise that for anything serious, I really prefer a strongly typed non-GCed true OO natively compiled modern language

[14:40:24.0000] <zewt>
is there such a thing?

[14:40:27.0000] <Hixie>
http://ian.hixie.ch/programming/

[14:40:39.0000] <jgraham>
(I think this is where someone says that there is no strongly typed OO language)

[14:40:47.0000] <jgraham>
(which indeed zewt did)

[14:40:55.0000] <zewt>
i've spent enough time at a high level to find things like closures hard to live without, and closures essentially require GC

[14:41:07.0000] <zewt>
jgraham: what I meant is "modern"

[14:41:16.0000] <jgraham>
Rust has closures

[14:41:19.0000] <Hixie>
C++ does closures without GC

[14:41:33.0000] <Hixie>
as do some variants of ObjectPascal (sadly not the variant i'm using, yet.)

[14:41:46.0000] <zewt>
i haven't touched any of the "C++digitdigit" things (since I don't think they'll go anywhere, not to the level of availability of real C++)

[14:41:54.0000] <jgraham>
(it doesn't do OO but unless you are implementing the DOM it doesn't seem to matter. And for implementing the DOM we will probably get single inheritance)

[14:41:55.0000] <Ms2ger>
Hixie, Rust might be interesting to you

[14:42:20.0000] <gsnedders>
Rust is an odd type of OO, though

[14:42:49.0000] <Hixie>
Ms2ger: i find the rust language to be a bit weird to read.

[14:42:50.0000] <jgraham>
Rust currently has typeclasses rather than inheritance

[14:43:09.0000] <Hixie>
Ms2ger: (too much like perl in its liberal use of unusual punctuation)

[14:43:09.0000] <zewt>
i have trouble visualizing closures without GC to handle the locals attached to the closure

[14:43:16.0000] <gsnedders>
zewt: I dunno, I thought this a few years ago, yet now almost all embedded platforms with a C++ compiler support C++11.

[14:43:24.0000] <jgraham>
Most of the punctuation is gone

[14:43:28.0000] <Ms2ger>
Hixie, that's been improved a little... @ is gone, at least

[14:43:29.0000] <gsnedders>
zewt: When a decade ago many didn't support stuff as basic as namespaces.

[14:43:32.0000] <zewt>
gsnedders: msvc?

[14:43:33.0000] <jgraham>
Well @ at least

[14:43:44.0000] <gsnedders>
jgraham: Is it really typecalsses? They didn't seem to quite be typeclasses last time I looked.

[14:44:02.0000] <Hixie>
Ms2ger: still has a long way to go. consider that my favourite language has so little punctuation it doesn't even use { } for blocks :-P

[14:44:17.0000] <zewt>
pascal? :P

[14:44:23.0000] <zewt>
(don't say yes)

[14:44:26.0000] <gsnedders>
zewt: They support most of it now

[14:44:27.0000] <Ms2ger>
Yes

[14:44:27.0000] <Hixie>
(old python was pretty good in this regard, though modern python has taken a bit of a turn for the punctuationy)

[14:44:34.0000] <Hixie>
zewt: modern variants thereof, but yeah

[14:44:55.0000] <zewt>
my only major, fundamental issue with python is the indentation block gimmick

[14:45:12.0000] <jgraham>
I have used perl (and lived to tell the tale) and Rust, and Rust doesn't use punctuation like Perl

[14:45:16.0000] <Hixie>
zewt: that and it's just not a fast language

[14:45:27.0000] <Hixie>
jgraham: yeah, it's not at the level of perl.

[14:45:36.0000] <zewt>
which means it structurally has no way to do inline functions, and it can't do the inverted-template thing of php and ruby

[14:45:36.0000] <Ms2ger>
Hixie, it does tend to follow C conventions for that, to avoid scaring the C programmers too much :)

[14:45:49.0000] <gsnedders>
jgraham: At least most things claim traits aren't quite type classes.

[14:45:53.0000] <jgraham>
Like the usage in Rust generally follows straightforward patterns

[14:45:55.0000] <zewt>
Hixie: it's extremely fast to develop in; fast to execute I don't know (except that it's never been a problem for me)

[14:46:09.0000] <jgraham>
gsnedders: Well I don't exactly know

[14:46:23.0000] <Hixie>
the problem with rust is that i look at some random rust and i can't tell what it's doing off the top of my head

[14:46:27.0000] <Hixie>
in that respect it's like perl

[14:46:56.0000] <Hixie>
e.g. code like: fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) { ... }

[14:47:03.0000] <zewt>
:|

[14:47:08.0000] <Ms2ger>
That's not the most readable of rust :)

[14:47:09.0000] <gsnedders>
/me finds that perfectly readable…

[14:47:20.0000] <Hixie>
the "map: &mut M" part in particular

[14:47:29.0000] <Ms2ger>
Argument map of type &mut M

[14:47:36.0000] <gsnedders>
(And I've not touched that much Rust)

[14:47:50.0000] <Ms2ger>
For M a type parameter that fulfills MutableMap<uint, uint>

[14:47:50.0000] <Hixie>
what is "&mut M" ?

[14:47:57.0000] <Ms2ger>
Mutable pointer to M

[14:48:04.0000] <Ms2ger>
(non-owning)

[14:48:09.0000] <jgraham>
A mutable borrowed pointer  to M

[14:48:10.0000] <Hixie>
mutable pointer?

[14:48:11.0000] <Hixie>
as opposed to?

[14:48:16.0000] <Ms2ger>
Immutable

[14:48:17.0000] <jgraham>
An immutable pointer

[14:48:27.0000] <gsnedders>
Ms2ger: Oh, then I misunderstood what it meant, so maybe not so readable :)

[14:48:31.0000] <Hixie>
is an immutable pointer just a constant reference?

[14:48:37.0000] <Ms2ger>
Stronger

[14:48:41.0000] <zewt>
"immutable pointer" sounds like "reference" (c++)

[14:48:48.0000] <jgraham>
You can only have one mutable pointer to an object in scope at a time so that the compiler can reason about lifetimes

[14:48:57.0000] <Ms2ger>
It also guarantees that there are no mutable pointers to that value

[14:49:03.0000] <jgraham>
(that might be wrong)

[14:49:20.0000] <Ms2ger>
You can only have one mutable pointer to an object in scope at a time so that you don't have data races

[14:49:36.0000] <jgraham>
Yeah, that makes more sense

[14:49:37.0000] <SimonSapin>
Hixie: yes. Rust makes stuff constant by default, you need the 'mut' keyword to change that. (Opposite of C/C++ and the 'const' keyword.)

[14:49:46.0000] <zewt>
mutable pointer as in const foo *x or mutable pointer as in foo *const x?

[14:50:13.0000] <Ms2ger>
You can mutate what's behind it

[14:50:13.0000] <jgraham>
zewt: As in the thing it points to is mutable using that reference

[14:50:18.0000] <Hixie>
so "mut" is more like the opposite of C++ const than it is like pascal argument "var" or the opposite of pascal argument "const"?

[14:50:44.0000] <jgraham>
Rust doesn't have pointer arithmetic

[14:50:45.0000] <Hixie>
/me always thought the C++ "const" thing was a bit weird

[14:50:49.0000] <Ms2ger>
I haven't done pascal in 6 years or so, no idea :)

[14:50:52.0000] <gsnedders>
zewt: foo *const x if I remember which way around they are. :P

[14:51:01.0000] <zewt>
yeah I have to think about it too heh

[14:51:02.0000] <gsnedders>
zewt: i.e., &x is constant

[14:51:21.0000] <Hixie>
another line of random rust, no idea what this does at all: vec!(~"", ~"20")

[14:51:29.0000] <zewt>
looks like a smiley

[14:51:40.0000] <jgraham>
The ! means that vec is a macro

[14:51:41.0000] <zewt>
if a peculiar one

[14:51:56.0000] <jgraham>
~"" is an owned pointer to the empty string

[14:52:05.0000] <jgraham>
No idea what the vec macro does

[14:52:54.0000] <gsnedders>
zewt: essentially all you have is foo * const and const foo * const in Rust

[14:53:38.0000] <Ms2ger>
vec!() is like []

[14:53:47.0000] <Hixie>
anyway. i haven't studied rust much yet. i will eventually. i expect it'll be similar to Go, though, which is to say, a lot of interesting ideas, some really bad decisions, and odd syntax, the total of which isn't really interesting enough to me :-)

[14:53:52.0000] <Ms2ger>
It constructs a new Vec, which is a growable vector

[14:54:03.0000] <Ms2ger>
I hope we're getting better syntax for that at some point

[14:54:16.0000] <zewt>
how about []

[14:54:21.0000] <zewt>
just saying :P

[14:55:08.0000] <zewt>
i'm skeptical of any language I can't read intuitively, without having to study first

[14:55:22.0000] <Ms2ger>
Yeah, that's used for a type that's currently being transitioned to being a non-growable vector

[14:55:30.0000] <Ms2ger>
It's confusing right now :)

[14:56:06.0000] <zewt>
(not to say read every nuance of, but to a reasonable level)

[14:56:50.0000] <zewt>
afk

[15:22:14.0000] <SimonSapin>
Hixie: we’d be interested in knowing what you consider bad decisions, with 1.0 coming soon

[15:23:43.0000] <SamB>
/me wonders: 1.0 of what?

[15:24:00.0000] <SimonSapin>
Rust

[15:24:07.0000] <SimonSapin>
http://www.rust-lang.org/

[15:24:31.0000] <SamB>
/me does know roughly what rust is, even if he can't remember who is working on it

[15:24:41.0000] <SamB>
it's a better name than, uh, Go

[15:25:33.0000] <SimonSapin>
we try not to brand it as such, but it’s lead mostly by Mozilla Research

[15:25:38.0000] <SamB>
though admittedly still seems awfully common of a word to use for a software product's name

[15:25:54.0000] <SimonSapin>
worse than Perl, Java, Ruby, and Python? :)

[15:26:02.0000] <SimonSapin>
or C

[15:26:14.0000] <SamB>
I don't know why Perl is in that list

[15:26:23.0000] <SamB>
though you have a point

[15:26:45.0000] <SimonSapin>
oh, it’s spelled pearl in english, sorry

[15:26:47.0000] <SamB>
not that I've personally seen/heard Java used of the coffee all that often

[15:27:36.0000] <SamB>
/me is amused by VERA's first entry for perl

[15:29:17.0000] <zewt>
none as bad as calling a browser "chrome"

[15:29:44.0000] <zewt>
thus making it forever impossible to search for anything regarding firefox's chrome

[15:34:25.0000] <zewt>
just saw firefox's current fullscreen implementation for the first time, it's ... pretty terrible :|

[15:34:46.0000] <zewt>
every time i focus firefox on the other monitor a giant thing pops up FIREFOX IS NOW FULLSCREEN (which it already told me the first time)

[16:34:02.0000] <Hixie>
SimonSapin: using abbreviations like "fn" and "mod" instead of "function" and "module", using non-standard punctuation like || and !, having multiple string syntaxes, non-standard attribute syntax, that kind of thing

[16:34:40.0000] <Hixie>
SimonSapin: also i don't understand some decisions, which, unless they have good reasons, would also fall into that bucket, like needing to explicitly give the type name before a { } struct literal

[16:41:25.0000] <Hixie>
SimonSapin: (the non-standard punctuation thing extends to e.g. the way ~ is used. I'd personally think it'd be much more readable if it was keywords rather than punctuation.)

[16:41:29.0000] <Hixie>
hth

[16:50:15.0000] <smaug____>
zewt: file a bug

[16:50:32.0000] <smaug____>
zewt: not too many users have several monitors

[16:50:45.0000] <smaug____>
nor developers

[16:52:55.0000] <smaug____>
SimonSapin: btw looks like I agree with Hixie on bad design decisions of Rust. It is just too alien comparing to other languages, and mostly without any good reason.

[16:53:47.0000] <Hixie>
i should add that i have zero experience writing rust, so, you know, take what i said with a grain of salt ;-)

[16:54:40.0000] <Hixie>
but in general, where the language isn't being innovative, i would recommend sticking with what people know

[16:54:49.0000] <Hixie>
it'll make it easier for people to pick up the actually new stuff

[16:55:45.0000] <Hixie>
on a different note, i don't understand the difference between https://developer.mozilla.org/en-US/docs/NSS_Certificate_Download_Specification and https://wiki.mozilla.org/index.php?title=CA:Certificate_Download_Specification&action=history

[16:55:55.0000] <Hixie>
uh

[16:56:08.0000] <Hixie>
https://developer.mozilla.org/en-US/docs/NSS_Certificate_Download_Specification and https://wiki.mozilla.org/CA:Certificate_Download_Specification

[16:57:08.0000] <annevk>
Hixie: file a bug?

[16:57:12.0000] <Hixie>
on?

[16:57:19.0000] <annevk>
Hixie: MDN I suspect

[16:57:58.0000] <Hixie>
i don't really know what the bug is

[16:58:55.0000] <annevk>
Hixie: duplication of content

[16:59:06.0000] <annevk>
Hixie: without clarity on what is canonical

[16:59:14.0000] <Hixie>
it's not quite duplicate

[16:59:15.0000] <Hixie>
:-)

[16:59:29.0000] <annevk>
Not sure that makes it better

[16:59:52.0000] <TabAtkins>
Hixie: The "fn" abbreviation, at least, has a pretty good pedigree.  Several languages use it.


2014-04-02
[17:00:03.0000] <Hixie>
still unnecessary :-)

[17:00:15.0000] <abarth>
Hixie: can any browser actually compute the information required to "await a stable state" ?

[17:00:16.0000] <Hixie>
i'm sure you can find a precedent for pretty much anything

[17:00:24.0000] <Hixie>
abarth: how do you mean?

[17:00:37.0000] <abarth>
Hixie: we're trying to implement some things related to HTMLImageElement

[17:00:48.0000] <Hixie>
abarth: "stable state" is something you reach in the event loop.

[17:00:50.0000] <abarth>
Hixie: that the spec says to "await a stable state" but it seems very hard

[17:00:53.0000] <Hixie>
abarth: nothing to compute

[17:01:04.0000] <abarth>
what does "nothing to compute" mean?

[17:01:13.0000] <abarth>
there are always things scheduled in the event loop

[17:01:18.0000] <Hixie>
you don't have to compute anything to reach a stable state

[17:01:32.0000] <Hixie>
you just follow the loop processing model and it tells you when you're supposed to offer a stable state

[17:01:44.0000] <Hixie>
(which is basically any time you run microtasks)

[17:01:55.0000] <Hixie>
(but see the spec for specifics)

[17:02:05.0000] <abarth>
maybe I misunderstand the spec

[17:02:16.0000] <abarth>
but if there's an algorithm in the spec that spins the event loop

[17:02:27.0000] <abarth>
then isn't the stable state delayed until that algorithm completes?

[17:03:17.0000] <Hixie>
"provide a stable state" happens on step 8 of the event loop.

[17:03:32.0000] <abarth>
i see that

[17:03:49.0000] <abarth>
http://www.whatwg.org/specs/web-apps/current-work/#spin-the-event-loop

[17:03:59.0000] <abarth>
but it doesn't happen after step 6 of that algorithm

[17:04:01.0000] <Hixie>
"spin the event loop" returns to step 4, so the stable state will happen shortly after.

[17:04:22.0000] <Hixie>
that is, spin the event loop's step 7 returns the event loop to step 4

[17:04:35.0000] <Hixie>
and from there it's quick work to reach 8.

[17:04:52.0000] <Hixie>
since 4, 5, and 6 are trivial and 7 is microtasks

[17:05:04.0000] <abarth>
i see

[17:05:06.0000] <Hixie>
(there's an open bug on making stable state into a microtask)

[17:05:12.0000] <Hixie>
(but that would make little difference)

[17:05:29.0000] <abarth>
so, when you spin the event loop, you actually return to the top-level event loop in the spec

[17:05:52.0000] <abarth>
so, why is there a microtask checkpoint at step 6 of spinning the event loop?

[17:06:01.0000] <abarth>
won't we get back to the main event loop and checkpoint there?

[17:06:09.0000] <Hixie>
yeah, there's an open bug on that too iirc

[17:06:35.0000] <abarth>
basically, the person submitting the CL is trying to use the microtask checkpoints to implement stable states

[17:06:45.0000] <Hixie>
(basically "spin" ends the current task, goes async (resuming the event loop), and then waits for the condition to be met and posts a continuation as a task. It never actually spins anything or resumes anything directly itself.)

[17:06:47.0000] <abarth>
and I'm trying to figure out if they're doing it right :)

[17:06:51.0000] <Hixie>
abarth: foolip?

[17:07:09.0000] <Hixie>
abarth: it's his bug asking for me to change the spec iirc

[17:07:12.0000] <abarth>
https://codereview.chromium.org/200923002/

[17:07:20.0000] <abarth>
cbiesinger

[17:07:33.0000] <abarth>
apparently HTMLImageElement waits for a stable state before kicking off the load

[17:07:33.0000] <Hixie>
ugh, <picture>

[17:07:39.0000] <Hixie>
that really is gonna cause you all kinds of trouble

[17:07:46.0000] <Hixie>
<source> is a bad design

[17:07:47.0000] <smaug____>
Hixie: how could stable state be microtask?

[17:07:54.0000] <Hixie>
but anyway

[17:07:55.0000] <smaug____>
isn't stable state between tasks

[17:08:04.0000] <Hixie>
smaug____: microtasks are between tasks too

[17:08:08.0000] <abarth>
Hixie: oh, is it only in the <picture> spec that HTMLImageElement waits?

[17:08:18.0000] <smaug____>
there can be several microtasks in one task

[17:08:53.0000] <abarth>
smaug____: in the impl, we can tell the difference between the nested checkpoints and the top-level checkpoint

[17:09:01.0000] <abarth>
they're triggered by different systems

[17:09:11.0000] <abarth>
e.g., the scripting engine versus the event loop

[17:09:16.0000] <Hixie>
abarth: <img> as specced does a stable state too, <picture>'s problems are bigger than that.

[17:09:38.0000] <Hixie>
smaug____: yeah, there can be several synchronous sections (stable state consumers) too

[17:09:44.0000] <Hixie>
smaug____: it's all in the bugs

[17:09:54.0000] <abarth>
http://www.whatwg.org/specs/web-apps/current-work/#htmlimageelement step 8 says "await a stable state"

[17:09:59.0000] <abarth>
he's trying to implement that

[17:10:06.0000] <smaug____>
but how could stable state be microtask ?

[17:10:24.0000] <Hixie>
smaug____: i don't understand the question. why would it be hard?

[17:10:26.0000] <smaug____>
I don't want to start handling stable state stuff after each event listener call

[17:10:31.0000] <Hixie>
abarth: right

[17:10:46.0000] <Hixie>
abarth: you really want to coordinate with foolip (philipj). He's doing this stuff in blink.

[17:10:57.0000] <Hixie>
smaug____: comment on the relevant bug :-)

[17:11:28.0000] <smaug____>
which one is the relevant bug

[17:12:10.0000] <abarth>
Hixie: yes, he's CCed

[17:12:43.0000] <abarth>
Hixie: what is the underlying problem that waiting for a stable state here is solving?

[17:12:48.0000] <smaug____>
ah, https://www.w3.org/Bugs/Public/show_bug.cgi?id=24724

[17:13:10.0000] <Hixie>
abarth: not wanting to do redundant work when a script modifies an attribute several times in a row

[17:13:22.0000] <Hixie>
smaug____: that's the one

[17:13:24.0000] <abarth>
Hixie: we sometimes load images synchronously out of the cache to avoid trashing layout

[17:13:28.0000] <Hixie>
smaug____: you found it faster than me :-)

[17:13:31.0000] <abarth>
because image width / height is an input to layout

[17:13:37.0000] <Hixie>
abarth: yeah, that's specced too iirc

[17:13:50.0000] <Hixie>
abarth: though the img loading model needs updating to handle the two-image thing, there's a bug on that too

[17:14:24.0000] <abarth>
I see the "list of available images"

[17:14:31.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=24958 is the bug iirc

[17:16:04.0000] <abarth>
Hixie: thanks for the info

[17:17:31.0000] <Hixie>
sorry i can't be more helpful, not sure what to tell you :-)

[17:17:52.0000] <Hixie>
i really would highly encourage you to push back on a multi-element image-loading feature

[17:17:59.0000] <Hixie>
it's a world of pain waiting for you

[17:22:29.0000] <a-ja>
<picture><img srcset> + negotiation     <== sounds like fun

[17:25:38.0000] <TabAtkins>
Ah, I didn't realize I had been volunteered to give a lightning talk at Extensible Web Summit.

[17:25:51.0000] <TabAtkins>
That's fine, but I would have liked to be told by someone other than a Lanyrd update email.

[17:26:09.0000] <Hixie>
uh

[17:26:13.0000] <Hixie>
that's "nice" of them

[17:36:32.0000] <TabAtkins>
At least it's just a lightning talk, not a full-session talk.

[17:36:43.0000] <TabAtkins>
I can do a lightning talk with 5 minutes prep.

[19:53:39.0000] <JosephSilber>
Is there no way to prevent input elements from streching their parent td?

[21:14:46.0000] <Rastus_Vernon>
Aaaah, what is this? http://dev.w3.org/csswg/css-sizing/

[23:33:57.0000] <Ms2ger>
I guess still half an hour left of April Fools

[00:34:17.0000] <zcorpan>
Hixie: it would be useful if you could be more specific about the problems with <picture>, maybe if you could read and review the current spec http://picture.responsiveimages.org/ (it's far from the same spec it was a year ago)

[00:34:52.0000] <sangwhan>
irccloud says i have a mention somewhere in the backlog but manual searching seems to disagree

[00:35:15.0000] <zcorpan>
Hixie: i think you're the only one at the moment pushing back

[00:35:26.0000] <sangwhan>
/me was hoping TabAtkins would have had a answer about prefixing

[05:06:47.0000] <yoav>
SimonSapin & TabAtkins: If you guys are around. I've got a question regarding http://dev.w3.org/csswg/css-syntax/#consume-a-string-token0

[05:08:37.0000] <yoav>
If I understand correctly, under reverse solidus, the "if the stream starts with a valid escape" part is not needed

[05:08:44.0000] <yoav>
Is that correct?

[05:22:12.0000] <zcorpan>
can someone get rid of that stylesheet by now?

[05:23:53.0000] <jgraham>
zcorpan: The April Fools joke was actually that you thought it was only for a day

[05:34:27.0000] <yoav>
jgraham :D

[05:35:51.0000] <zcorpan>
instead it will get worse every day. in a few hours the text will start following the cursor

[05:36:21.0000] <jgraham>
Nah, Bert would never approve the use of javascript

[05:37:50.0000] <zcorpan>
then an image of Bert will also start following the cursor

[05:38:08.0000] <jgraham>
I think they'll go more subtle

[05:38:34.0000] <jgraham>
CSS Filters + Animations will be used to subtly blur the text

[05:38:48.0000] <jgraham>
So it will feel like it's going an and out of focus

[05:39:18.0000] <jgraham>
Because everyone knows that the CSS WG is actually run by a shady cabal of opticians

[05:39:52.0000] <jgraham>
Who else could these "Members that aren't interested in browser applications" be?

[06:10:29.0000] <SimonSapin>
zcorpan: done

[06:10:54.0000] <zcorpan>
thx

[06:11:06.0000] <jgraham>
You mean that Bert now follows the cursor?

[06:11:51.0000] <SimonSapin>
yoav: it’s needed in case you have '\' followed by a newline

[07:04:51.0000] <IZh>
Hi. :-)

[07:05:48.0000] <IZh>
How do you spell WHATWG? ;-)

[07:06:51.0000] <IZh>
W.H.A.T.W.G. or What W.G. or something else?

[07:07:12.0000] <gsnedders>
WHATWG.

[07:07:23.0000] <SimonSapin>
do you mean pronounce?

[07:07:29.0000] <IZh>
Yes.

[07:08:27.0000] <IZh>
Double U eight ey tee double U Gee? What double U Gee?

[07:08:53.0000] <gsnedders>
The latter most go for. I don't think there's any official rule, though.

[07:11:29.0000] <zewt>
double hat wig

[07:11:57.0000] <IZh>
Whatwig

[07:16:43.0000] <yoav>
SimonSapin: Isn't that case covered by the "Otherwise, if the next input code point is a newline, consume it." that comes right be before it?

[07:17:46.0000] <SimonSapin>
yoav: wait, is this for "consume a token", "consume an ident-like token", or "consume a string" ?

[07:18:13.0000] <yoav>
consume a string

[07:18:18.0000] <SimonSapin>
ah

[07:18:22.0000] <SimonSapin>
I was looking at the wrong place

[07:19:18.0000] <SimonSapin>
uhm, yes, it’s redundant now that we changed \<EOF> to not be an error

[07:21:08.0000] <yoav>
SimonSapin: OK, great! I'll delete that if without guilt, then :)

[07:26:19.0000] <SimonSapin>
yoav: Is this better? https://dvcs.w3.org/hg/csswg/raw-file/86568d6b9ce9/css-syntax/Overview.html#consume-a-string-token

[07:26:31.0000] <SimonSapin>
(It’ll take a few minutes to propagate to dev.w3.org.)

[07:27:47.0000] <yoav>
SimonSapin: That's great!

[08:11:59.0000] <annevk>
SimonSapin: what is evil utf-8?

[08:12:22.0000] <SimonSapin>
annevk: allows surrogates

[08:12:35.0000] <annevk>
SimonSapin: but is not CESU-8?

[08:12:51.0000] <SimonSapin>
it’s unclear whether CESU-8 allows lone surrogate

[08:13:08.0000] <SimonSapin>
I think it does not, as a consequence of UTF-16 not allowing them

[08:13:10.0000] <annevk>
SimonSapin: CESU-8 does not allow > U+FFFF

[08:13:30.0000] <annevk>
SimonSapin: that might be true in addition I suppose

[08:13:42.0000] <SimonSapin>
what CESU-8 does is encode non-BMP stuff as a surrogate pair, which doesn’t affect the value-space

[08:14:36.0000] <SimonSapin>
the point of "evil UTF-8" is to have the value space of JS strings

[08:15:39.0000] <SimonSapin>
I proposed it as half a joke, but interestingly roc seems to think it’s realistic https://groups.google.com/forum/#!msg/mozilla.dev.servo/1K2-Qy27e3A/Q9DWOO8Nt3EJ

[08:16:43.0000] <annevk>
Looks interesting

[08:17:36.0000] <annevk>
SimonSapin: a problem with evil utf-8 is that its value space is actually bigger

[08:17:43.0000] <SimonSapin>
how so?

[08:17:58.0000] <annevk>
SimonSapin: you can have paired surrogates as well as the actual code point

[08:20:24.0000] <SimonSapin>
good point

[08:20:48.0000] <annevk>
hsivonen: congratulations!

[08:20:51.0000] <SimonSapin>
so maybe it should be CESU-8 modified to allow lone surrogates

[08:21:17.0000] <annevk>
SimonSapin: the bad thing about that is that then you cannot just copy the input stream

[08:21:40.0000] <annevk>
SimonSapin: it's a tricky problem

[08:21:42.0000] <SimonSapin>
indeed

[08:22:00.0000] <SimonSapin>
would it make sense to only allow unpaired surrogates?

[08:22:03.0000] <annevk>
I guess you can accept that there will be two ways to represent certain code points

[08:22:25.0000] <SimonSapin>
that sounds bad

[08:22:45.0000] <SimonSapin>
makes == either wrong or hard to implement

[08:22:49.0000] <annevk>
It's a bit unclear to me how you can enforce that from JavaScript

[08:23:07.0000] <annevk>
If you can make it so that you only allow them unpaired, that would be interesting

[08:23:28.0000] <SimonSapin>
when decoding a JS string, turn paired surrogates to 4-bytes sequences

[08:24:41.0000] <annevk>
There might be some tricky edge cases, where we store strings as a list and you use += with surrogates

[08:25:29.0000] <annevk>
But yeah, that seems sensible, especially since it should be the edge case, over time people will use the new Unicode escapes or utf-8 directly

[08:27:43.0000] <SimonSapin>
I don’t understand the list thing

[08:28:19.0000] <SimonSapin>
but I think roc’s idea it to make this invisible from script, .charAt() would still give you UCS-2 units

[08:31:04.0000] <jgraham>
SimonSapin: If you have a String stored as a fragment + pointer to next fragment

[08:31:24.0000] <jgraham>
Which I think spidermonkey sometimes does to make append fast

[08:32:11.0000] <SimonSapin>
jgraham: ok, what about it?

[08:32:33.0000] <jgraham>
So if you had var a = low_surrogate + high_surrogate

[08:33:15.0000] <jgraham>
You would have a string represented as (low_surrogate, pointer) (high_surrogate, null)

[08:33:24.0000] <jgraham>
But semantically it would be one character

[08:34:22.0000] <jgraham>
(I'm not sure this would be a big problem in practice)

[08:37:15.0000] <annevk>
Presumably we would not use evil-utf-8 for those situations

[08:50:32.0000] <dglazkov>
good morning, Whatwg!

[09:32:00.0000] <SimonSapin>
annevk: roc’s idea seems to be to use it for everything

[09:32:57.0000] <annevk>
SimonSapin: you mean he'd change all string types in SpiderMonkey? I somewhat doubt that

[09:34:24.0000] <arunranga>
annevk, hai! I think I'd like to explore your idea of an "object list" associated with Blobs a bit more.

[09:34:32.0000] <SimonSapin>
https://groups.google.com/forum/#!msg/mozilla.dev.servo/1K2-Qy27e3A/Q9DWOO8Nt3EJ

[09:34:57.0000] <arunranga>
annevk, doesn't this mean that user agents have to analyze code beforehand?

[09:35:26.0000] <Hixie>
zcorpan: i went through it when srcset was first being discussed years ago.

[10:10:56.0000] <annevk>
arunranga: why?

[10:11:23.0000] <arunranga>
annevk, how is the object list constructed exactly?

[10:12:34.0000] <annevk>
arunranga: it's just something a blob has

[10:12:47.0000] <annevk>
arunranga: and other objects can use to make sure they can read the blob

[10:13:35.0000] <arunranga>
annevk, ok, but how do other objects get inserted into the list? How will a Blob deterministically add objects to it?

[10:14:26.0000] <annevk>
arunranga: the other objects would add themselves to it as part of their algorithms

[10:14:39.0000] <annevk>
arunranga: e.g. FormData would do it as part of serializing itself

[10:15:36.0000] <arunranga>
annevk, I see. So, if the Blob is CLOSED, an object can NOT add itself to the Blob's list. But pre-existing objects can still get serviced.

[10:16:04.0000] <arunranga>
annevk, and CLOSED blobs might be GC'd when their object lists are empty.

[10:16:11.0000] <annevk>
yes

[10:17:06.0000] <arunranga>
annevk, I think this makes sense.

[10:17:24.0000] <arunranga>
/me walks off to spec it

[10:42:47.0000] <zcorpan>
is there no way to serialize an "xml" document as html?

[10:43:01.0000] <zcorpan>
i thought we'd extended XMLSerializer to support that?

[10:45:20.0000] <gsnedders>
Create an HTML document, adopt node, then use that?

[11:00:57.0000] <zcorpan>
yeah, but that seems like a workaround

[11:01:06.0000] <zcorpan>
should be able to serialize it directly

[11:27:33.0000] <Hixie>
<Hixie> zcorpan: i went through it when srcset was first being discussed years ago.

[11:29:39.0000] <odinho>
That was different.

[11:30:12.0000] <SamB>
what's an "xml" document, and how does it differ from an XML document

[11:31:12.0000] <odinho>
Proposal was very different back then. -- The way <picture> is being done now is vastly simpler. And the most interesting/needed parts of <picture> does not use the tag at all. The 90% use case is  <img> with "sizes" and "srcset" (albeit a different srcset than yours, the "w" modifier tells how wide the image is)

[11:31:56.0000] <zcorpan>
SamB: it doesn't differ. but it doesn't need to have come into being from parsing XML source. e.g. `new Document()` creates an XML document

[11:32:17.0000] <zcorpan>
SamB: whereas document.implementation.createHTMLDocument('foo') create an HTML document

[11:32:23.0000] <odinho>
<picture> is only metadata to an <img> that does the actual work.

[11:39:33.0000] <zcorpan>
Hixie: in http://lists.w3.org/Archives/Public/public-whatwg-archive/2012May/0247.html i see concern over verbosity, which i guess is still valid, but it turned out people didn't like the more terse solution with attributes on <img>

[11:39:59.0000] <zcorpan>
Hixie: is it just verbosity or something else?

[11:41:19.0000] <Hixie>
search for "multiple-element" in http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Aug/0070.html

[11:42:16.0000] <Hixie>
multiple-element structures are just a nightmare to manage

[11:42:36.0000] <Hixie>
<video><source> and <select><option> are great examples

[11:42:45.0000] <Hixie>
even <object> with its impact on descendants

[11:42:50.0000] <SamB>
zcorpan: is that the one with the crazy attribute naming?

[11:42:52.0000] <Hixie>
they all suck so much

[11:44:18.0000] <SamB>
Hixie: nightmare from which side(s)?

[11:44:27.0000] <Hixie>
eveyone

[11:44:34.0000] <Hixie>
authors, implementors, specs

[11:44:43.0000] <SamB>
so, um, what's better?

[11:44:47.0000] <zcorpan>
Hixie: i think <picture> sucks much less than <video>

[11:44:59.0000] <Hixie>
SamB: anything that only involves one element, ideally one attribute.

[11:45:15.0000] <Hixie>
zcorpan: i'd hope we'd have a higher bar than that...

[11:45:17.0000] <SamB>
Hixie: that can perhaps get a bit TOO terse

[11:45:57.0000] <SamB>
though at least it doesn't have the crazy attribute names

[11:46:20.0000] <Hixie>
SamB: an attribute just takes a string, there's nothing a priori terse or verbose about it

[11:46:37.0000] <Hixie>
you could put an entire C++ program in there...

[11:46:37.0000] <SamB>
hmm

[11:46:49.0000] <Hixie>
or the machine code equivalent

[11:46:57.0000] <Hixie>
or the java equivalent

[11:46:58.0000] <SamB>
maybe I'm just used to not being allowed newlines between " and "

[11:47:11.0000] <Hixie>
just to give three examples along the line of "terse-verbose"

[11:47:20.0000] <zcorpan>
Hixie: sure. we tried different things and so far it seems this sucks the least, and it seems implementors are on board now

[11:47:26.0000] <zcorpan>
Hixie: anyway, looking at the email...

[11:47:28.0000] <SamB>
Hixie: which one was supposed to be the terse one

[11:47:46.0000] <Hixie>
zcorpan: yeah, well, i just hope someone else has to clean up the mess, cos i don't want to, that's for sure

[11:47:57.0000] <Ms2ger>
I'm afraid it's your job

[11:47:57.0000] <Hixie>
zcorpan: took me long enough to clean up <select>'s mess

[11:48:13.0000] <zcorpan>
Hixie: "they introduce the need for much more elaborate error handling," is handled fine in the spec, it's not really much more elaborate

[11:48:13.0000] <Ms2ger>
And maybe better to clean it up while it can still be changes

[11:48:18.0000] <Ms2ger>
changed*

[11:48:42.0000] <zcorpan>
Hixie: i'm pre-emptively working on having it clean :-)

[11:48:57.0000] <zcorpan>
Hixie: but i have to monkey-patch html which sucks

[11:50:07.0000] <zcorpan>
Hixie: "the processing model has to deal with changes more complicated than just "change" (what if an element is added or removed, or moved?)" - true, but it's covered. it's "just" a list of mutations that trigger an algorithm

[11:50:38.0000] <Hixie>
zcorpan: would you like to just own the entire <img> section? I can just have it automatically import from some doc you maintain

[11:50:43.0000] <hober>
zcorpan: when you say implementors are on board now, who are you referring to?

[11:53:15.0000] <Hixie>
zcorpan: i'm sure it's covered, but how many bugs does it have? how many edge cases have you forgotten? how many race conditions will we run into?

[11:53:24.0000] <Hixie>
zcorpan: we are _still_ fixing <source>, years later

[11:53:28.0000] <zcorpan>
hober: mozilla and blink at least are working on implementing now. not sure about apple and microsoft but i don't think there have been negative signals

[11:53:53.0000] <Hixie>
zcorpan: and the bugs we're finding aren't any simpler than they were at first, in fact i'd say they're much more insidious and hard to fix now than they were when we started

[11:54:01.0000] <Hixie>
zcorpan: if i could go back, i'd never introduce <source>

[11:54:56.0000] <zcorpan>
Hixie: yeah i agree about <video>'s <source>, but <picture>'s <source> isn't the same. i'm not saying there won't be bugs or that it will be easy this time, but i think i've learned the lesson about <video><source> :-)

[11:55:12.0000] <Hixie>
what i'm saying is that the lesson i learnt is "never again"

[11:55:24.0000] <Hixie>
i'm serious about the offer to just give you ownership of <img>

[11:56:25.0000] <Hixie>
(also, i assume there's no actual <source> in this <picture> thing? you're using <img>, right? not <source>?)

[11:56:27.0000] <zcorpan>
that's ok with me. let's wait a bit with that though to see how things shake out

[11:56:37.0000] <zcorpan>
it's <source>

[11:56:53.0000] <Hixie>
please don't overload <source>

[11:57:20.0000] <zcorpan>
what's the problem with that? <source> in itself doesn't do anything. also the attributes are different

[11:57:56.0000] <Hixie>
i don't want to have to deal with a bug where <source> is in a shadow dom and then grafted into a <video> while the <picture> processing model is running and then on the next microtask it's moved to a different shadow dom with an <audio>

[11:58:24.0000] <zcorpan>
we could call it something else i guess, but <img> would be bad for back-compat

[11:58:30.0000] <Hixie>
(also, you say <picture> is simpler, but you have _three_ elements?)

[11:58:52.0000] <zcorpan>
yeah

[11:58:57.0000] <Hixie>
that's not simpler.

[11:59:05.0000] <Hixie>
you're gonna have so much pain.

[11:59:30.0000] <Hixie>
anyway. please avoid interacting with other elements so we never have to worry about the case above.

[11:59:41.0000] <Hixie>
e.g. overloading existing elements

[11:59:57.0000] <Hixie>
let's keep this very self-contained

[12:00:07.0000] <zcorpan>
i'll file a bug about the <source> tag name, thanks

[12:09:29.0000] <zcorpan>
https://github.com/ResponsiveImagesCG/picture-element/issues/133

[12:14:01.0000] <zcorpan>
Hixie: let's go on with the old email, in case there's something more that isn't addressed already

[12:15:07.0000] <zcorpan>
Hixie: "it introduces complexities in the algorithms to deal with unexpected text nodes, comment nodes, PIs, etc." - that's handled, it just skips over anything that isn't a <source> or the <img> element itself

[12:16:50.0000] <Hixie>
by "it's handled" in all these cases you presumably mean "i think i have handled that because it does in fact need to be handled with this design, though it wouldn't have to be if we avoided a multiple element design, and i've no idea if there won't be subtle bugs found with it later"

[12:16:56.0000] <zcorpan>
Hixie: "it introduces some complexity in the parser, ..." - that's handled, the algorithm starts when <img> is seen (it's <img> that does the "work"), and at that point all information is already there. anything after it is ignored

[12:17:18.0000] <Hixie>
what if the img is in a different document than the <picture>?

[12:17:27.0000] <Hixie>
does it still handle it then?

[12:18:05.0000] <zcorpan>
yeah then the <picture> wouldn't be a parent of the <img> so it would act like it was just the <img> and no <picture>

[12:19:09.0000] <Hixie>
my point is that these are questions that just don't come up if you don't do a multiple-element design

[12:21:22.0000] <zcorpan>
ok. yep that's true

[12:23:38.0000] <zcorpan>
Hixie: thanks for the feedback

[12:24:01.0000] <Hixie>
zcorpan: i've put markers in the spec for the part that i'm ready to hand off to you. let me know when you're ready to take it, and i'll replace that segment with a #include that merges your source in.

[12:24:24.0000] <Hixie>
that way you shouldn't have to worry about hooks.

[12:24:28.0000] <Hixie>
or monkeypatching.

[12:24:47.0000] <zcorpan>
ok cool

[12:25:15.0000] <zcorpan>
i'm ready when you've fixed my bugs :-D

[12:27:05.0000] <Hixie>
zcorpan: if you're going to be fiddling with that stuff anyway, might be best for you to just fix them as part of rejigging that part of the spec :-)

[12:27:38.0000] <zcorpan>
Hixie: sorry, not ready yet! :-P

[12:27:52.0000] <Hixie>
:-)

[12:31:11.0000] <zewt>
multi-element images is bizarre and out of place because of the two xml-like axes for data (sub-elements and attributes), html has always chosen attributes

[12:32:34.0000] <Hixie>
not always, but every time it's chosen elements it has been a mistake, imho.

[12:59:20.0000] <SamB>
/me wonders about title of this section: http://www.whatwg.org/html#the-document-object

[13:07:40.0000] <SamB>
I mean, why's that called Document and not HTMLDocument

[13:10:31.0000] <SamB>
/me somehow doubts the people responsible for the package in question are at fault WRT the non-free junk

[13:10:55.0000] <SamB>
er.

[13:10:57.0000] <SamB>
ECHAN

[13:11:02.0000] <SamB>
/me hates it when he does that

[13:27:34.0000] <smaug____>
SamB: some people think there should be only Document, not Document and HTMLDocument

[13:27:52.0000] <smaug____>
that doesn't match the reality too well atm

[13:37:32.0000] <SamB>
it would perhaps be easier to work towards that by starting with the way things are now?

[13:37:52.0000] <Hixie>
smaug____: it's not so much that we think there should only be one, it's that having two makes no sense in a multi-namespace world

[13:38:29.0000] <Hixie>
SamB: specs point to where we should be, not where we are (or were)

[13:41:06.0000] <smaug____>
well, it is not clear what kinds of documents XHR should return for example

[13:41:30.0000] <Hixie>
if there's only one kind of document, it seems pretty clear :-)

[13:41:32.0000] <smaug____>
adding all the legacy html stuff there doesn't make much sense

[13:41:45.0000] <smaug____>
since lots of those APIs would be just broken

[13:42:04.0000] <annevk>
So yes, somebody needs to go through the various APIs returning documents and make suggestions

[13:42:40.0000] <annevk>
Though I'm not super convinced that not exposing certain members here and there will actually be a large benefit

[13:43:09.0000] <Hixie>
i don't understand

[13:43:14.0000] <Hixie>
why would we want to hide certain APIs?

[13:43:18.0000] <Hixie>
just have them return null, etc

[13:43:27.0000] <Hixie>
pretty sure we already do that anyway

[13:43:48.0000] <Hixie>
e.g. if you hold onto a Document that's been ungrafted from browsing contexts

[13:44:06.0000] <annevk>
We do, we also discussed this on the WHATWG list

[13:44:26.0000] <Hixie>
yeah

[13:44:32.0000] <annevk>
I'm not sure what camp I'm in, I'd like this to move forward though

[13:44:33.0000] <Hixie>
i don't really understand what's controversial at this point

[13:44:36.0000] <Hixie>
i thought this was all long resolved

[13:45:00.0000] <smaug____>
really? I thought this was never resolved

[13:45:23.0000] <smaug____>
but was just a thing which was spec'ed to be different what implementations do

[13:45:35.0000] <smaug____>
but I don't have a strong opinion on this one

[13:48:19.0000] <SamB>
claiming that we already have everything on Document doesn't seem to have made it happen, somehow ...

[13:48:32.0000] <Hixie>
nobody is claiming that

[14:05:57.0000] <SamB>
/me wonders why nobody minds SVG being multi-element

[14:09:15.0000] <Hixie>
more than half the e-mails i have pending in my "canvas" folder are from adobe

[14:09:40.0000] <Hixie>
and the majority of the rest are from junov...

[14:10:05.0000] <astearns>
/me perhaps we should hire junov...

[14:23:40.0000] <SamB>
/me wonders how they add stuff to Java's DOM APIs ...

[14:37:44.0000] <SamB>
hmm, I don't suppose anyone would much care if *these* actually stayed on HTMLDocument until the heat death of the universe: http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html#Document-partial

[14:37:59.0000] <Hixie>
HTMLDocument doesn't exist anymore according to the HTML Spec.

[14:38:35.0000] <Hixie>
per spec, document instanceof HTMLDocument returns true only because Document === HTMLDocument

[14:38:52.0000] <Hixie>
("For historical reasons, Window objects must also have a writable, configurable, non-enumerable property named HTMLDocument whose value is the Document interface object.")

[14:39:55.0000] <SamB>
hmm, that wasn't in the index

[14:41:10.0000] <Hixie>
which index would it be in? it's not an interface, event, element, attribute, or content model

[14:42:40.0000] <SamB>
it *used* to be an interface though

[14:43:30.0000] <Hixie>
yes


2014-04-03
[18:24:53.0000] <benschwarz>
hey @ Hixie - someone just hit me up on IRC saying "The file http://www.whatwg.org/specs/web-apps/current-work/images/robots.jpeg has wrong MIME-type text/html. The web-server config have to be corrected."

[18:26:40.0000] <TabAtkins>
Chrome's network tab says it's image/jpeg.

[18:30:47.0000] <benschwarz>
TabAtkins: heh. I didn't check

[18:31:00.0000] <benschwarz>
so does curl

[18:31:06.0000] <benschwarz>
it also says Content-Language: en-GB-x-Hixie

[18:36:49.0000] <benschwarz>
TabAtkins: this time next week we get to kick back in sunny Melbourne

[19:09:16.0000] <TabAtkins>
benschwarz: Yessssss

[19:09:40.0000] <TabAtkins>
benschwarz: And I found nail polish that appears to be the exact shade of the cssconf.au page background. ^_^

[19:09:59.0000] <benschwarz>
we saw !

[19:10:09.0000] <benschwarz>
we posted it in our hipchat

[19:10:18.0000] <benschwarz>
we're thinking a booth setup

[19:10:25.0000] <benschwarz>
where we get our nails did'

[19:10:33.0000] <TabAtkins>
+1

[19:22:18.0000] <zewt>
hate@hipchat

[20:44:04.0000] <Hixie>
benschwarz: weird, dunno why they're asking you. anyway, i fixed those earlier today when someone was asking about it.

[21:42:30.0000] <MikeSmith>
Hixie: thanks for the rel="shortcut icon" change. I'll implement it in the validator this week

[21:42:42.0000] <Hixie>
np

[21:42:59.0000] <Hixie>
sorry i've been slow recently. i should be back on more reliably next week.

[21:43:07.0000] <Hixie>
(then i disappear again for a week, iirc)

[22:56:54.0000] <zcorpan>
hober: http://status.modern.ie/#/ says picture is under consideration. but it's not clear to me if that means anything. looks like they just copy stuff from chromestatus

[22:57:56.0000] <zcorpan>
hober: also http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Jan/0037.html

[01:21:58.0000] <ondras>
can someone please point me to the spec where :host pseudo-class is defined?

[01:30:59.0000] <MikeSmith>
ondras: TabAtkins

[01:31:24.0000] <MikeSmith>
scoping spec

[01:35:12.0000] <ondras>
MikeSmith: okay thanks

[01:35:17.0000] <ondras>
TabAtkins: ?

[01:35:47.0000] <MikeSmith>
his spec

[01:37:34.0000] <ondras>
MikeSmith: well where can I find it then?

[01:38:32.0000] <Ms2ger>
http://drafts.csswg.org/css-scoping/

[01:39:25.0000] <Ms2ger>
zcorpan, re "The harness should do as little as possible."... Didn't you suggest adding the div id=log? :)

[01:39:36.0000] <Ms2ger>
(I know, not nearly as intrusive as a script)

[01:40:22.0000] <zcorpan>
Ms2ger: yeah. i realize that adding a div can confuse things, but it's easy to opt-out

[01:40:39.0000] <Ms2ger>
And we already add the stylesheet, I think

[01:40:47.0000] <zcorpan>
also it only does that after the tests have finished

[01:41:03.0000] <Ms2ger>
Anyway, just throwing that out there :)

[01:41:04.0000] <zcorpan>
at which point it can do whatever, it won't affect the tests' result

[01:41:43.0000] <zcorpan>
maybe it could inject *report at that point also

[01:42:24.0000] <Ms2ger>
I think report wants to be running earlier

[01:42:31.0000] <zcorpan>
yeah

[01:42:56.0000] <Ms2ger>
/me goes back to work

[04:45:08.0000] <manus>
Hello! I have a couple quick questions around tabindex and various notions of focus, specifically regarding behaviors/rules for overflowed elements.. would here be an appropriate place to ask them?

[04:45:36.0000] <manus>
I've already done a bit of googling and light reading and testing and am still slightly confused about something.

[04:46:33.0000] <MikeSmith>
manus: fine to just go ahead and ask here

[04:48:19.0000] <manus>
Cool, thanks MikeSmith. Is there any defined/documented behavior for keyboard focus (as opposed to "normal" focus) for elements such as scrollable divs?

[04:48:59.0000] <manus>
I made a jsfiddle here: http://jsbin.com/sizofuse/7/edit?html,output

[04:49:28.0000] <manus>
and results are surprising, especially when tabindex is involved, and when nesting scrollable divs

[04:50:14.0000] <manus>
I've noticed browsers implementing different behaviors, and I just wanted to know if there's a part of this that hsa been, or will ever be, standardized

[04:50:36.0000] <MikeSmith>
SteveF: ↑☃

[04:51:33.0000] <MikeSmith>
manus: no clue personally but if you hang out here for a bit somebody might be able to give you an informed answer

[04:52:12.0000] <manus>
Thanks, MikeSmith! I'll lurk here for a while, though may be away to lunch at some point

[04:54:13.0000] <jgraham>
So I think that generally the order in which various things get focus is supposed to be standardised, and the focus model itself is getting standardised, although I don't exactly know what would make scrollables different

[04:56:15.0000] <MikeSmith>
zcorpan: fyi I landed support to make rel="shortcut icon" checking match the current spec

[04:56:23.0000] <MikeSmith>
https://github.com/validator/syntax/commit/6befdd67ecf87754fc592cc0ac526d5c9c3c3345#diff-2

[04:56:34.0000] <MikeSmith>
and pushed to http://validator.w3.org/nu/

[04:57:48.0000] <manus>
jgraham: thanks for a response. I think scrollables have a different notion of focus, in terms of, for example, keyboard scrolling. if you click a div that has scrollable content, does it have "focus" from a standards perspective? are there different kinds of focus in play here?

[04:58:05.0000] <jgraham>
manus: I don't know too much about this :)

[04:58:40.0000] <jgraham>
Hixie was working on it, but you will have to wait another 4-5 hours for him to be around, I guess

[04:58:48.0000] <manus>
jgraham: ok, thanks anyway. :] It's just that current browser implementations don't agree, and I want to file a bug somewhere, but I don't know if this behavior is even specified

[04:59:06.0000] <jgraham>
manus++ for wanting to file a bug ;)

[05:03:19.0000] <zcorpan>
MikeSmith: "Error: Bad value shortcut icon  for attribute rel on element link: If the shortcut keyword is present, the rel attribute's entire value must be shortcut icon. The string shortcut is not an absolute URL. "

[05:03:32.0000] <MikeSmith>
yeah

[05:03:40.0000] <zcorpan>
MikeSmith: i follow the message up to the last sentence

[05:03:41.0000] <MikeSmith>
that's because RDFa I think

[05:03:51.0000] <zcorpan>
@_@

[05:04:15.0000] <MikeSmith>
yeah RDFa tokens in rel to be absolute URLs

[05:04:46.0000] <MikeSmith>
the checkers emits two separate error messages

[05:05:18.0000] <MikeSmith>
from two different datatype-checking classes that are unaware of each other

[05:05:53.0000] <zcorpan>
MikeSmith: but why doesn't it pretend that "shortcut" is registered keyword?

[05:06:18.0000] <zcorpan>
it doesn't complain that "icon" isn't a URL

[05:07:20.0000] <MikeSmith>
right, because it only proceeds with the absolute-URL check if the keyword check fails

[05:07:49.0000] <MikeSmith>
and if the keyword check fails the code in that class throws

[05:08:51.0000] <MikeSmith>
I don't have any means after it throws to proceed as if "shortcut" is registered

[05:08:56.0000] <zcorpan>
ok.. "Bad value icon shortcut for attribute rel on element link: If the shortcut keyword is present, the rel attribute's entire value must be shortcut icon. The string icon is not an absolute URL."

[05:09:43.0000] <MikeSmith>
hmm that's not good

[05:10:48.0000] <zcorpan>
":" seems to pass the URL check

[05:11:09.0000] <MikeSmith>
sadly, RDFa

[05:11:43.0000] <MikeSmith>
that passes because it's a valid CURIE

[05:12:09.0000] <MikeSmith>
per the gigasmic mess that the RDFa specs are

[05:13:21.0000] <zcorpan>
do you support CURIEs?

[05:13:58.0000] <MikeSmith>
the W3C service does

[05:14:54.0000] <MikeSmith>
for whatever attributes where the RDFa says they're allowed

[05:15:02.0000] <zcorpan>
;_;

[05:15:08.0000] <MikeSmith>
yup

[05:15:54.0000] <zcorpan>
anyway, it'd be nice if the url/curie checker somehow skipped the tokens that are registered keywords

[05:16:16.0000] <MikeSmith>
yeah I will see if I can make it do that somehow

[05:16:30.0000] <zcorpan>
maybe ax them out of the list before passing on to that checker or something

[05:18:41.0000] <zcorpan>
MikeSmith: rel=":}]%" also validates so it doesn't seem like it checks the url part much

[05:21:59.0000] <zcorpan>
MikeSmith: is safe_curie supported? where is that expected instead of curie?

[06:34:29.0000] <SteveF>
zcorpan: windows Progressive Disclosure Controls http://msdn.microsoft.com/en-us/library/windows/desktop/aa511487.aspx

[06:40:35.0000] <MikeSmith>
zcorpan: sorry lost my connection for a while

[06:41:19.0000] <MikeSmith>
zcorpan: safe_curie is supported yeah

[06:42:28.0000] <MikeSmith>
and I guess the reason rel=":}]%" validates is because ":}]%" is valid curie per RDFa

[06:43:07.0000] <MikeSmith>
prefixless curie I guess

[06:43:54.0000] <MikeSmith>
I vaguely recall something about prefix-lacking curies being allowed in RDFa

[06:45:23.0000] <MikeSmith>
so anyway I think the validator is not checking ":}]%" as a URL in that case but instead as a curie

[06:45:56.0000] <MikeSmith>
and the validator considers it a valid curie

[06:46:16.0000] <MikeSmith>
rightly or wrongly

[06:46:46.0000] <MikeSmith>
but I think rightly, since I'm just using whatever production for curie is given in the current RDFa spec

[09:17:14.0000] <zcorpan>
MikeSmith: the part after the colon is "url" stuff so i figured % was not allowed

[11:41:45.0000] <annevk>
Realms are actually interesting I just realized. They're a way to get a global without a browsing context... I wonder if that's going to lead to a bunch of issues

[11:42:13.0000] <annevk>
I think we carefully check for "associated browsing context" mostly. But if we have checks for "associated global" instead that might be trouble

[14:32:50.0000] <cbiesinger>
Hixie: hey

[14:33:05.0000] <cbiesinger>
Hixie: I was wondering if there's any progress on https://www.w3.org/Bugs/Public/show_bug.cgi?id=24724 ?

[16:05:20.0000] <annevk>
cbiesinger: it came up here the other day, doubt it

[16:05:32.0000] <annevk>
cbiesinger: Hixie would be available more next week btw

[16:06:26.0000] <smaug____>
cbiesinger: why would you want to merge microtask and stable state

[16:06:33.0000] <smaug____>
they are conceptually very different

[16:07:00.0000] <annevk>
smaug____: to have less concepts

[16:07:01.0000] <smaug____>
though, perhaps something which is using stable state could use microtask stuff

[16:08:07.0000] <smaug____>
I can see use cases for running something at the end of the current task

[16:08:23.0000] <smaug____>
for perf reasons for example


2014-04-04
[23:35:53.0000] <zcorpan>
"Polyglot markup begins a comment with either "<!" or "<!--"."

[23:36:26.0000] <zcorpan>
<! polyglot is easy !>

[03:48:02.0000] <SteveF>
zcorpan: are we reaching some agreement re summary/details?

[03:59:06.0000] <zcorpan>
SteveF: maybe

[04:04:12.0000] <krit>
zcorpan: ping

[04:04:19.0000] <zcorpan>
krit: pong

[04:04:41.0000] <krit>
zcorpan: Do you think you need to do more edits on DOMPoint, Quad, Rect on http://dev.w3.org/fxtf/geometry/Overview.html?

[04:05:09.0000] <krit>
zcorpan: otherwise I finish the DOMMatrix stuff and we are closer to FPWD, what do you think?

[04:08:34.0000] <zcorpan>
krit: we might want to fix https://www.w3.org/Bugs/Public/show_bug.cgi?id=24219 although i guess it doesn't need to block fpwd. i also recall some markup bugs in the switch to bikeshed but same there

[04:09:14.0000] <krit>
zcorpan: didn't know that we have a bug tracker for the spec already :P

[04:09:39.0000] <zcorpan>
krit: the spec links to it :-)

[04:09:52.0000] <krit>
zcorpan: :O

[04:10:00.0000] <krit>
zcorpan: I will go over the issues before asking for FPWD

[04:30:28.0000] <zcorpan>
krit: there's little incentive to implement mathml if the geometry spec doesn't use it :-P

[04:31:02.0000] <krit>
zcorpan: :)

[05:11:37.0000] <zcorpan>
Hixie: in https://www.w3.org/Bugs/Public/show_bug.cgi?id=25140 stevef proposes <details><summary id=x> <label for=x>Foo</label> </summary> ... </details> for giving a label to the disclosure triangle to get a bigger click area

[05:14:29.0000] <SteveF>
Hixie: zcorpan: and also to provide an unambiguous accessible name for the triangle when summary includes controls with their own label text

[06:58:43.0000] <MikeSmith>
zcorpan: pushed some rel-handling updates to http://validator.w3.org/nu/

[06:59:17.0000] <MikeSmith>
saner error messages for rel="icon shortcut" etc

[07:02:37.0000] <zcorpan>
MikeSmith: does it just never mention anything about url/curie? just say that it's not registered?

[07:03:12.0000] <MikeSmith>
zcorpan: yeah never mentions

[07:03:23.0000] <MikeSmith>
only says "keyword not registered"

[07:03:24.0000] <zcorpan>
clever

[07:05:27.0000] <zcorpan>
MikeSmith: the curie support means that a url will basically always be treated as a curie (except if the scheme doesn't match Name) right?

[07:05:58.0000] <MikeSmith>
hmm yeah

[07:06:04.0000] <MikeSmith>
I guess it does

[07:06:13.0000] <MikeSmith>
hadn't thought about that

[07:06:48.0000] <MikeSmith>
but dunno anyway to get around it given the rdfa requirements

[07:07:00.0000] <zcorpan>
i think that was pointed out as a flaw way back when curie was a thing, but the response was safe_curie which didn't actually fix the problem

[07:07:18.0000] <zcorpan>
the whole thing is just a fuckup

[07:07:19.0000] <jgraham>
People still care about RDFa?

[07:07:23.0000] <jgraham>
Who knew

[07:07:54.0000] <MikeSmith>
zcorpan: yeah safe_curie which is now "deprecated"

[07:08:12.0000] <MikeSmith>
jgraham: I don't care but I have to make the validator care

[07:08:14.0000] <zcorpan>
MikeSmith: now that'll fix the problem :-)

[07:08:46.0000] <scor>
jgraham: http://schema.org/LocalBusiness (see examples at the bottom)

[07:08:53.0000] <jgraham>
MikeSmith: One would hope you only have to make the validator care if people care. But I suppose it is also possible that people think that other people care (but those other people don't actually)

[07:09:48.0000] <jgraham>
zcorpan: I guess you haven't had any time to look at the unstable tests?

[07:10:04.0000] <jgraham>
(not a criticism of course, just a question)

[07:10:07.0000] <zcorpan>
jgraham: no, sorry

[07:10:32.0000] <zcorpan>
i was busy eating chocolate

[07:10:37.0000] <jgraham>
OK, I guess I will have another look at some

[07:10:38.0000] <jgraham>
heh

[07:11:07.0000] <jgraham>
I am bothered by the ones that always seem to be unstable in automation and always seem to work fine on my machine

[07:11:23.0000] <MikeSmith>
jgraham: I only care because otherwise my fan-mail stream gets tainted with "why you no rdfa" screeching

[07:13:03.0000] <MikeSmith>
zcorpan: so I guess I don't need to have the code even do any valid-url check at all in this case, since it's already first checking if the tokens are valid curiess

[07:13:58.0000] <zcorpan>
MikeSmith: i think so

[07:17:37.0000] <MikeSmith>
zcorpan: ok sad but I guess that'll make the code slightly happier since it hates dealing with rdfa so much I have to always manhandle all the rdfa handling into it

[07:18:13.0000] <MikeSmith>
I think this guy is reading my mind https://twitter.com/mqsiuser/status/452085394813636609

[07:19:00.0000] <MikeSmith>
gsnedders might also find that more acutely relevant

[07:22:08.0000] <jgraham>
That's an amazing non-sequitr in that post

[07:22:25.0000] <jgraham>
I *didn't* study computer science and still got the same outcome

[07:25:14.0000] <Ms2ger>
...wat

[07:26:33.0000] <jgraham>
?

[07:27:17.0000] <zcorpan>
so that means everyone will have to work with w3c's bullshit standards for decades. since everyone will either have studied computer science, or not

[07:27:54.0000] <Ms2ger>
The tweet

[07:28:20.0000] <zcorpan>
but that's silly and therefore jgraham is a fool

[07:28:23.0000] <jgraham>
I think that it means that the existence of Bullshit W3C Standards, and your choice of whether to work with them or not, are mostly independent of your choice of degree

[07:28:29.0000] <MikeSmith>
it's the double hurt of him both wasting his time studying computer science and then having to try to apply that science to teach his computer how to handle RDFa

[07:29:02.0000] <MikeSmith>
his computer keeps saying But this is not science you promised me science

[07:29:37.0000] <jgraham>
You would have thought that computers, out of all entities, would know that computer science is not science

[07:30:08.0000] <MikeSmith>
and clearly he's talking about RDFa there even tough maybe he's not even read the RDFa "family of specifications" yet

[07:30:19.0000] <jgraham>
It's like a highly specialised branch of Mathematics that thinks "Science" is neat branding

[07:30:36.0000] <MikeSmith>
heh

[07:30:58.0000] <MikeSmith>
there's even "Web Science" now

[07:31:09.0000] <zcorpan>
is there HTML5 Science?

[07:32:21.0000] <MikeSmith>
zcorpan: there was but the lab exploded

[07:33:10.0000] <zcorpan>
they found <plaintext> and couldn't get out of it?

[07:40:37.0000] <MikeSmith>
heh

[07:45:20.0000] <MikeSmith>
zcorpan: on the plus side now I guess I really ought to write a bunch of validator tests for rel and you will have the fun of reviewing them

[07:45:29.0000] <MikeSmith>
so every cloud has a silver lining

[07:45:45.0000] <MikeSmith>
even the rdfa cloud

[09:25:13.0000] <gsnedders>
MikeSmith: Do you know what RelaxNG cannot express in html? Is it just the restrictions on valid attribute values? Can it express all the various content model constraints (if not, why not)?

[09:25:25.0000] <gsnedders>
(Anyone else feel free to answer, ofc)

[09:30:50.0000] <darobin>
gsnedders: one thing it can't do is wildcard on names

[09:30:54.0000] <darobin>
so data-* for instance

[09:30:59.0000] <MikeSmith>
bingo

[09:33:12.0000] <gsnedders>
Anything else?

[09:33:52.0000] <MikeSmith>
exclusions

[09:34:05.0000] <MikeSmith>
like old SGML exclusions

[09:34:24.0000] <gsnedders>
What exclusions?

[09:34:41.0000] <MikeSmith>
e.g., footnote can contain all flow content except footnote

[09:34:46.0000] <MikeSmith>
etc

[09:35:13.0000] <gsnedders>
Well you can enumerate all of them no?

[09:35:31.0000] <gsnedders>
So surely that poses no problem?

[09:35:53.0000] <MikeSmith>
it's a practical problem

[09:36:37.0000] <MikeSmith>
anyway lemme get you a URL

[09:37:04.0000] <gsnedders>
Ergh, train running late, cut back to Edinburgh. Yay for n extra change.

[09:37:17.0000] <gsnedders>
*an

[09:37:20.0000] <MikeSmith>
https://github.com/validator/syntax/blob/master/non-schema/java/src/org/whattf/checker/schematronequiv/Assertions.java

[09:38:24.0000] <MikeSmith>
ah required ancestors

[09:38:38.0000] <MikeSmith>
that's one

[09:38:58.0000] <gsnedders>
Ah, right. I guess again technicaly possible, but that really does get ugly.

[09:39:03.0000] <MikeSmith>
yeah

[09:43:04.0000] <gsnedders>
/me wonders about trying to programmatically generating a schema, and wonders if that'll be any quicker thn just doing the whole thing manually in Python

[09:43:55.0000] <MikeSmith>
I'd vote for doing it all manually in python

[09:44:10.0000] <MikeSmith>
but it depends on what your goal is

[09:44:30.0000] <MikeSmith>
if for example your goal is to have good error messages, then don't use RelaxNG

[09:45:00.0000] <MikeSmith>
or don't use any grammar-based schema

[09:45:57.0000] <MikeSmith>
me wonders what you'd want to programmatically generate a schema for

[09:46:14.0000] <MikeSmith>
for validating something, obviously

[09:48:23.0000] <MikeSmith>
but unless you have some large complex set of contraints to check I wouldn't think using RelaxNG will buy you anything

[09:49:01.0000] <darobin>
gsnedders: yes, required ancestors and exclusions are possible but extremely painful

[09:49:23.0000] <SamB>
/me contemplates trying to add support for good error messages to relaxng ...

[09:49:39.0000] <darobin>
for instance I wrote the initial RNG for SVG, and doing something like that changing the content model of something because it was inside <a> was pretty painful

[09:50:26.0000] <SamB>
and yeah, not every constraint fits well at the grammatical level

[09:51:39.0000] <MikeSmith>
which is where assertions-based checking like schematron can be a win

[09:54:50.0000] <MikeSmith>
gsnedders: anyway would be fun to hear what you're needing to do

[09:55:56.0000] <SamB>
RelaxNG Compact schemas are of course handy for editing XML in Emacs

[09:56:31.0000] <SamB>
even if they don't capture every constraint

[09:57:11.0000] <MikeSmith>
SamB: you should add that quote to http://twoproblems.com/

[09:57:40.0000] <SamB>
what, you don't like completion?

[09:58:08.0000] <darobin>
any sentence involving Emacs makes for a good twoproblems :)

[10:11:05.0000] <gsnedders>
MikeSmith: In principle we want to trigger a DataLossWarning in html5lib.HTMLSerializer whenever we won't roundtrip, which is most malformed trees, but not all… I'm not really sure what I want to do. :)

[10:46:15.0000] <MikeSmith>
gsnedders: that sounds great but seems like it'd have no use at all for a schema

[10:48:55.0000] <gsnedders>
MikeSmith: Yeah, indeed. I want the API contract to be "only guarantees roundtrip for trees that match the content model restrictions"

[10:49:03.0000] <gsnedders>
MikeSmith: But the error messages should probably be better

[10:49:13.0000] <SamB>
/me ponders how you you could implmement such that you can be confident in its correctness, without actually reparsing as you go

[10:49:48.0000] <SamB>
/me bemoans his spelling/word-dropping ...

[10:51:40.0000] <gsnedders>
I'm not aiming to prove this correct. :)

[10:51:55.0000] <MikeSmith>
I wonder what's the value of "only guarantees roundtrip for trees that match the content model restrictions"

[10:52:07.0000] <MikeSmith>
what do you gain from that

[10:52:19.0000] <MikeSmith>
oh

[10:52:34.0000] <SamB>
gsnedders: well, by "be confident" I mean be reasonably sure you haven't screwed it up

[10:52:36.0000] <MikeSmith>
yeah for some subset of the content-model restrictions I can see why

[10:53:33.0000] <gsnedders>
SamB: We have enough parser tests that if they roundtrip or error correctly I'd be confident.

[10:53:50.0000] <gsnedders>
MikeSmith: omitting tags is especially hard in that case

[10:55:53.0000] <SamB>
anyway, I certainly wasn't suggesting that you actually, say, convince coq that you'd either emit a warning or achieve = trees ;-P

[10:55:54.0000] <MikeSmith>
oh you having it roundtripping the absence of end tags and start tags?

[10:56:36.0000] <gsnedders>
MikeSmith: Well, it'd be good for the ommitabletags filter to raise DataLossWarning when it cannot guarantee safety

[11:38:44.0000] <MikeSmith>
"whatwag" overheard just now at extensible web summit

[11:38:48.0000] <MikeSmith>
I like it

[11:41:27.0000] <hober>
i pronounce it "what wee gee", i think due to annevk saying it that way

[11:41:45.0000] <Ms2ger>
I thought whatwig was canonical?

[11:41:45.0000] <annevk>
yes, per Hixie that's the way

[11:41:48.0000] <annevk>
no

[11:44:04.0000] <jgraham>
WHAT WAG? WebHypertext Application Technology Wifes and Girlfriends? (c.f. http://en.wikipedia.org/wiki/WAGs in case someone was about to suggest that was sexist)

[11:44:30.0000] <Ms2ger>
That's sexi... Oh

[11:44:49.0000] <TabAtkins>
I do What-Wig.

[11:45:43.0000] <MikeSmith>
I was thinking "wag" more like in the Elizabethan-era sense

[11:48:21.0000] <MikeSmith>
meaning a wit

[11:58:44.0000] <jgraham>
MikeSmith: Well that's just silly


2014-04-05
[17:18:52.0000] <smaug____>
argh, forgot to logout from google

[17:20:05.0000] <smaug____>
/me needs to find some addon to logout automatically from random social media sites


2014-04-07
[02:08:58.0000] <zcorpan>
jgraham_: the chocolate was very nice. haven't had anything quite like it before. much taste. such flavour. or as i said to jenni, bra fräs

[02:09:15.0000] <Ms2ger>
/me wonders which

[02:10:23.0000] <zcorpan>
http://marouchocolate.com/post/58397164815/products 80%

[02:12:37.0000] <jgraham_>
zcorpan: Excellent :)

[06:48:11.0000] <SimonSapin>
http://w3c.github.io/webcomponents/spec/custom/#concepts links for NCName to a 1999 spec that’s been updated twice since, and the new definition looks different. Is this deliberate?

[06:57:58.0000] <zewt>
heh, someone posting to mongodb-user with an <img> containing a gigantic data: url

[06:58:17.0000] <zewt>
i wonder if he got that from "copy image location" on a canvas, that's what firefox did last i checked

[07:47:46.0000] <gsnedders>
SimonSapin: Oh, sorry, it was 3e that updated NCName with a semantic change. I forgot the timing of the changes. :)

[07:49:02.0000] <SimonSapin>
gsnedders: so, is webcomponents linking to 1e a good idea?

[07:50:11.0000] <gsnedders>
SimonSapin: Is anyone using XML1.05e+XMLnames1.0e3? AFAIK Everyone still targets XML1.0e4 + XMLnames1.0e2

[07:50:31.0000] <SimonSapin>
I have no idea

[07:50:46.0000] <gsnedders>
AFAIK no browser has wanted to impl the changes in XML1.05e

[07:50:49.0000] <Ms2ger>
Maybe Servo accidentally

[07:51:03.0000] <jgraham>
gsnedders: annevk suggested that libxml is 5th edition and Chrome blindly imports it

[07:51:06.0000] <gsnedders>
Even though everyone constantly updates the list of what names are valid in JS identifiers

[07:51:27.0000] <SimonSapin>
gsnedders: How can I and other people working on Servo can find out about "everyone agrees" besides asking you?

[07:51:29.0000] <jgraham>
https://bugzilla.mozilla.org/show_bug.cgi?id=501837

[07:51:30.0000] <gsnedders>
jgraham: libxml2 is 5th ed, yes, but has a flag for 4th ed, dunno if Chrome sets it

[07:53:23.0000] <gsnedders>
I don't get why people are willing to change the JS syntax through Unicode updates but not XML.

[07:53:42.0000] <Ms2ger>
Other people

[07:54:54.0000] <gsnedders>
I know. But the people objecting to XML changes typically concern themselves with all of the web platform, inc. JS.

[07:55:29.0000] <Ms2ger>
Fighting tc39 is hard

[07:55:55.0000] <gsnedders>
Sure, but why follow TC39 and ignore XML Core WG?

[07:56:32.0000] <gsnedders>
Difficulty of fighting is irrelevant when you're willing to ignore specs.

[07:57:39.0000] <Ms2ger>
I guess presence of JS engineers who are willing to follow tc39

[07:57:47.0000] <zcorpan>
i think upgrading to 5ed presented difficulties because different set of tools make assumptions, so you need to get all of them upgraded which is hard. js doesn't have that so much

[07:58:15.0000] <zcorpan>
/me now escapes

[09:01:56.0000] <Domenic_>
why is XML relevant? I assume this is about HTML syntax?

[09:06:58.0000] <jgraham>
Domenic_: Because web components defines something in terms of xml-names

[09:07:14.0000] <gsnedders>
But *why*?

[09:07:36.0000] <gsnedders>
Because the DOM's creators limit themselves to XML-names?

[09:07:55.0000] <jgraham>
Oh one level deeper?

[09:07:59.0000] <jgraham>
No idea

[09:08:06.0000] <gsnedders>
That's the level I'm curious at.

[09:08:36.0000] <jgraham>
Doesn't it match HTML?

[09:08:45.0000] <gsnedders>
No, it doesn't.

[09:09:08.0000] <gsnedders>
<foo:bar:lol> is perfectly fine in HTML. Also even the local name "foo:bar".

[09:09:13.0000] <Domenic_>
seems bad

[09:09:22.0000] <Hixie>
("perfectly fine" except for being non-conforming of course)

[09:09:51.0000] <gsnedders>
Hixie: At a parser level or just an unknown element level?

[09:10:05.0000] <jgraham>
Sure, I know the parser can deal

[09:10:15.0000] <gsnedders>
Because the latter doesn't really apply in the web components case, surely?

[09:10:16.0000] <jgraham>
I guess HTML has a closed list of elements

[09:10:22.0000] <Hixie>
("foo:bar:lol" is not a known element, though i expect there's a cascade of other errors that would turn up at the same time)

[09:10:31.0000] <jgraham>
So that's not very relevant

[09:10:41.0000] <SamB>
and nobody is ever going to define an element of that name, either

[09:10:43.0000] <Hixie>
yeah, i'm not really sure what we should do for conformance of web components

[09:10:47.0000] <gsnedders>
Who cares that it isn't a known element when we're in the web components case, though?

[09:10:52.0000] <jgraham>
Anyway, making web-component names that you can't create through DOM APIs seems bad

[09:11:17.0000] <gsnedders>
jgraham: Yeah, I presume this is the reason for the restriction

[09:11:45.0000] <gsnedders>
dglazkov: yt?

[09:12:55.0000] <Hixie>
it would be interesting if we could get something useful out of validators even when you use custom components

[09:13:19.0000] <gsnedders>
Indeed.

[09:13:34.0000] <gsnedders>
jgraham: But yeah, elements in HTML are closed set, attributes are open set.

[09:13:35.0000] <SamB>
/me wonders what about 5e would make it important to upgrade all software at once -- does just unpinning Unicode really cause this?

[09:13:37.0000] <Hixie>
though really once you're using custom components you've pretty much sacrificed the ability for the web to work without css and js, especially if you don't have a fallback element...

[09:29:04.0000] <SimonSapin>
http://dom.spec.whatwg.org/#dom-document-createelementns and other parts of the same spec link to http://www.w3.org/TR/xml/#NT-Name and http://www.w3.org/TR/xml-names/#NT-QName . Should that change if everyone agrees the latest editions are bad?

[09:29:05.0000] <dglazkov>
good morning, whatwg!

[09:29:40.0000] <Ms2ger>
Hmm, did someone change it...

[09:29:42.0000] <dglazkov>
SimonSapin: I just did what annevk said to do. Let me find the bug

[09:32:08.0000] <dglazkov>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=20973

[10:04:02.0000] <mathiasbynens>
zcorpan (if you read the logs): https://twitter.com/kizmarh/status/453215891908722689

[10:22:42.0000] <Hixie>
hsivonen: yt?

[10:30:32.0000] <annevk>
gsnedders: Chrome implements XML 1.0 5th edition afaict

[15:25:15.0000] <Hixie>
what's happened to live dom viewer on firefox?

[15:30:26.0000] <smaug____>
live dom viewer?

[15:32:05.0000] <Hixie>
http://software.hixie.ch/utilities/js/live-dom-viewer/

[15:32:14.0000] <Hixie>
the rendered view no longer renders?

[15:32:34.0000] <smaug____>
works fine here

[15:33:11.0000] <Hixie>
i'm on 29, beta

[15:33:23.0000] <Hixie>
the rendered view just gives a 0-height iframe

[15:33:29.0000] <miketaylr>
wfm on nightly

[15:33:35.0000] <Hixie>
weird

[15:34:55.0000] <smaug____>
wfm on beta

[15:38:20.0000] <Hixie>
i wonder what's up with my build then

[16:04:10.0000] <gsnedders>
jgraham: req html5lib #146/147 speedy review, blocks Travis CI passing anything

[16:25:06.0000] <zewt>
not sure i've seen anything in a version control system that kills my workflow instantly more than git's auto-gc

[16:25:45.0000] <SamB>
zewt: you could turn that off and set up a cronjob?

[16:25:46.0000] <gsnedders>
You can disable it :P

[16:26:03.0000] <zewt>
right now i'm twiddling my thumbs since it's taking several minutes

[16:26:53.0000] <zewt>
also i don't want expensive cronjobs on my laptop, heh

[16:28:27.0000] <SamB>
excuses!

[16:28:59.0000] <SamB>
I guess you could try to set the threshold so high you could just take a break and watch an episode of something while you wait?

[16:31:04.0000] <zewt>
doesn't help when it happens while I'm at work an hour late trying to finish something :P

[16:32:33.0000] <SamB>
well, you have a choice here: have while you work, or at some other point

[16:34:31.0000] <Hixie>
that's a fallacy of an excluded middle

[16:35:03.0000] <Hixie>
there's a third option: have git not have any synchronous or blocking maintenance tasks.

[16:35:03.0000] <zewt>
i tend to expect database-like systems to not require periodic downtime to retain performance these days

[16:36:18.0000] <SamB>
anyway, patches seem welcome

[16:36:34.0000] <Hixie>
or just use svn :-)

[16:36:46.0000] <SamB>
crazies

[16:37:01.0000] <Hixie>
anyone here managed to get requestAutocomplete() to work?

[16:51:18.0000] <annevk>
Hixie: JakeA might have

[16:51:57.0000] <annevk>
Hixie: sicking expressed a concern with requestAutocomplete() about universal address input not being sorted yet

[16:52:28.0000] <Hixie>
the address-level3 stuff? that's blocked awaiting mozilla input...

[16:52:48.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25235

[16:53:27.0000] <Hixie>
backstory in http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Apr/0010.html

[16:57:46.0000] <Hixie>
annevk: ^

[16:58:24.0000] <annevk>
hmm

[16:59:14.0000] <annevk>
maybe I should become project manager

[16:59:32.0000] <annevk>
feels like I do stuff like that at least 30% of my time

[16:59:54.0000] <Hixie>
heh


2014-04-08
[17:10:30.0000] <JakeA>
Hixie: there's a demo linked from http://www.html5rocks.com/en/tutorials/forms/requestautocomplete/

[17:11:00.0000] <JakeA>
It's in the wild too, a few SF companies

[17:11:06.0000] <Hixie>
yeah, that's the one that uses minified JS

[17:11:08.0000] <Hixie>
i can get that one to work

[17:11:16.0000] <Hixie>
but i can't get anything simpler to work

[17:11:20.0000] <Hixie>
even using that page's markup

[17:12:05.0000] <annevk>
Hixie: are you using it from a UI event handler?

[17:12:09.0000] <Hixie>
yeah

[17:14:45.0000] <annevk>
I don't understand the form that pops up from https://googledrive.com/host/0B28BnxIvH5DueUxvWVNsQXd5dU0/

[17:15:06.0000] <Hixie>
what's not to understand?

[17:23:18.0000] <Hixie>
wow, i managed to miss a single row of the 0x80-0x9F numeric char ref mapping table in my code

[17:23:21.0000] <Hixie>
yay for tests.

[17:50:18.0000] <annevk-cloud>
Hixie: API is https-only

[17:50:43.0000] <annevk-cloud>
Hixie: reportedly

[21:36:52.0000] <Hixie>
annevk-cloud: i tried https

[00:41:57.0000] <hsivonen_>
Hixie: I'm here now.

[01:59:34.0000] <gsnedders>
In talk on PNaCl at EuroLLVM… Let's see how this goes. :)

[02:05:56.0000] <gsnedders>
I guess endianness issues aren't really an issue on the web platform now, because that ship has already sailed even in JS. :(

[03:09:28.0000] <zcorpan>
gsnedders: we talked about dropping the NCName etc checks in dom core, but since it was already interoperably implemented and well tested it didn't seem worth the cost of changing it

[03:42:37.0000] <jgraham>
zcorpan: Now I think it mostly is your tests that are causing randomness, and I'm not all that sure how to fix them :|

[03:43:13.0000] <zcorpan>
jgraham: ok, i can have a look now

[03:45:11.0000] <zcorpan>
http://hoppipolla.co.uk/410/unstable.txt is what i should be looking at?

[03:45:31.0000] <jgraham>
zcorpan: I fixed a few of those.

[03:45:44.0000] <jgraham>
The following, at least, remain:

[03:45:46.0000] <jgraham>
/html/infrastructure/urls/resolving-urls/query-encoding

[03:46:00.0000] <jgraham>
/html/semantics/embedded-content/media-elements/interfaces/TextTrack/addCue.html

[03:46:22.0000] <jgraham>
/old-tests/submission/Opera/preload/auto/

[03:46:36.0000] <jgraham>
/webvtt/webvtt-file-format-parsing/webvtt-file-parsing/001.html

[03:47:11.0000] <jgraham>
/workers/semantics/reporting-errors/003.html (I thought I fixed this one; I wonder if I didn't land the change)

[03:49:03.0000] <jgraham>
zcorpan: In some cases it seems like the instability only occurs when you run some other tests before the unstable one. I added a tool to wptrunner to work out the minimal set of prior tests needed to get instability. I don't know if that will be useful to you, but if you want to use it let me know and I can give you instructions

[03:51:13.0000] <zcorpan>
i'll take a stab without it first

[03:51:55.0000] <jgraham>
Yeah, it's a bit of a last-resort option

[03:52:08.0000] <jgraham>
(also I need to make a new release that includes it ;)

[03:56:21.0000] <zcorpan>
EventSource constructor and window.open() first passed and then failed (because they used utf-8). that seems totally wacked

[03:57:38.0000] <zcorpan>
similar for XMLHttpRequest#open()

[03:57:59.0000] <jgraham>
(speaking of eventsource /eventsource/format-field-retry.htm should also be on the list)

[03:58:29.0000] <jgraham>
"totally wacked" as in "Gecko bugs"?

[04:01:34.0000] <zcorpan>
yeah i think so. but i can investigate some more

[04:01:59.0000] <zcorpan>
CSS <style> #<id> { background-image:<url> } also

[04:03:21.0000] <zcorpan>
actually all "CSS <style>" passed on the second run

[04:08:45.0000] <zcorpan>
jgraham: some of the css tests have TIMEOUTs in http://hoppipolla.co.uk/410/unstable.txt which might not be bugs since css sucks at defining when/if things are fetched. not sure what to do about those, maybe yank them?

[04:12:15.0000] <jgraham>
zcorpan: In the query-encoding tests? Well if it's testing underdefined behaviour I guess that's a problem

[04:15:26.0000] <zcorpan>
yeah. http://dev.w3.org/csswg/css-ui/#cursor0 is the spec for 'cursor'

[04:22:08.0000] <zcorpan>
but the others shouldn't be timing out since the styles are used on the page

[04:36:02.0000] <zcorpan>
jgraham: i seem to get stable results for query-encoding in chrome

[05:23:27.0000] <jgraham>
zcorpan: OK, I guess it's Firefox issues. Maybe I will try disabling the unstable tests and filing a bug

[05:24:59.0000] <zcorpan>
jgraham: yeah that's what i'd recommend for query-encoding. i could comment out the 'cursor' test but i guess that doesn't help you much and anyway it would be good if that was also stable :-)

[05:36:08.0000] <zcorpan>
jgraham: when running tests, do you run several query-encoding files at the same time?

[05:36:26.0000] <Ms2ger>
Hmm

[05:38:02.0000] <jgraham>
zcorpan: Yeah

[05:38:10.0000] <jgraham>
Well define "same time"

[05:38:16.0000] <jgraham>
One after another

[05:39:38.0000] <zcorpan>
like do you have two windows open and start running http://web-platform.test:8000/html/infrastructure/urls/resolving-urls/query-encoding/windows-1252.html before http://web-platform.test:8000/html/infrastructure/urls/resolving-urls/query-encoding/windows-1251.html has finished

[05:41:19.0000] <jgraham>
zcorpan: Not in the production configuration, but that could happen when running with multiple processes

[05:41:28.0000] <zcorpan>
i think that can cause timeouts. i could get 13 timeouts in one tab in chrome when opening the same test in 6 tabs. and while writing the tests i had to make some tests run "in sequence" in order to not get mass timeouts

[05:41:47.0000] <jgraham>
zcorpan: Do you know why?

[05:41:55.0000] <zcorpan>
no :-(

[05:42:48.0000] <zcorpan>
but it's probably stressing the server with the stach.py thing

[05:43:54.0000] <jgraham>
That *could* be a bug in the server. In theory it shouldn't matter for the stash if things are run in parallel (that's why you need a UUID as a token)

[05:45:12.0000] <zcorpan>
it's doing time.sleep(0.01) in a loop until it finds the stash it's looking for or until it reaches a limit

[05:45:53.0000] <zcorpan>
i understand that it may be a terrible thing to do :-)

[05:47:39.0000] <jgraham>
That sounds like a pretty terrible thing to do :)

[05:48:09.0000] <jgraham>
But I kind of see why you might do that

[05:48:16.0000] <jgraham>
I'll have a look

[05:56:45.0000] <zcorpan>
jgraham: http://web-platform.test:8000/html/semantics/embedded-content/media-elements/interfaces/TextTrack/addCue.html is not in http://hoppipolla.co.uk/410/unstable.txt and i fail to reproduce randomness in gecko here

[05:57:04.0000] <zcorpan>
the last test always times out though

[05:59:42.0000] <jgraham>
zcorpan: I think it might have changed in recently nightlies, but I'm not sure

[06:00:04.0000] <jgraham>
But I think I failed to reproduce that randomness on my machine too

[06:00:15.0000] <jgraham>
So it might depend on another test

[06:57:00.0000] <jgraham>
zcorpan: I wonder if it would make sense to move the polling of the stash to the client rather than the server. I wonder if what you have could cause a problem with connection limits or something

[06:58:18.0000] <zcorpan>
jgraham: maybe yeah

[07:00:22.0000] <zcorpan>
jgraham: could it use a websocket maybe? a single websocket for "getting" the stash for all tests? would be cheap to poll there

[07:04:04.0000] <jgraham>
zcorpan: I guess that's the more advanced option, although it isn't really easy to create websockets that can access the server state

[07:04:26.0000] <jgraham>
zcorpan: I can try moving the polling to the client and see if it helps

[07:07:05.0000] <zcorpan>
jgraham: ok. i think you could set some delay for the first poll so that it doesn't always waste one connection that's too early

[07:38:41.0000] <jgraham>
Aryeh isn't on irc :( (not surprising, but he did just submit a review)

[07:39:13.0000] <jgraham>
(if he was I would tell him that due to the Magic Of Technology, Ms2ger automatically gets assigned the review)

[07:39:24.0000] <jgraham>
(But he isn't so I can't)

[07:39:29.0000] <Ms2ger>
Dammit

[07:55:52.0000] <gsnedders>
jgraham: Did you see my html5lib review?

[07:55:56.0000] <gsnedders>
/me prods

[07:56:16.0000] <jgraham>
gsnedders: Yes, but I didn't look at it yet

[07:56:21.0000] <jgraham>
Maybe this evening

[07:56:43.0000] <gsnedders>
k

[07:56:50.0000] <gsnedders>
I want to merge a couple of the other PRs we've got

[07:57:13.0000] <gsnedders>
But everything fails with Travis CI atm. Because pep8 update introduced new failures.

[07:58:35.0000] <jgraham>
OK, if it's just trivial things then the review is rather likely

[07:58:50.0000] <gsnedders>
Yeah yeah, it's really obviously safe stylistic changes

[08:23:45.0000] <jgraham>
Hmm, so I think I made this test stable in Firefox

[08:23:49.0000] <jgraham>
But hang in Chrome

[08:23:56.0000] <jgraham>
That's a good tradeoff, right?

[08:32:40.0000] <dglazkov>
good morning, Whatwg!

[09:08:18.0000] <Ms2ger>
gsnedders, because integrating rust into Firefox is an unsolved problem right now, and C++ isn't

[09:09:36.0000] <jgraham>
context?

[09:10:59.0000] <Ms2ger>
https://twitter.com/gsnedders/status/453510682911461377

[09:13:03.0000] <jgraham>
Oh. Could in theory make a C API wrapper or something. But the build system stuff would be interesting

[09:18:53.0000] <SimonSapin>
jgraham: has an interesting definition of "interesting" :)

[09:20:49.0000] <jgraham>
"Interesting" as in "may you live in interesting times"

[09:24:48.0000] <SamB>
/me wonders about a quasi-reference implementation of encodings ...

[09:25:17.0000] <SimonSapin>
SamB: character encodings?

[09:26:43.0000] <SamB>
hmm, okay, I added a stray "s": http://encoding.spec.whatwg.org/

[09:28:30.0000] <Ms2ger>
jgraham++

[09:29:54.0000] <Ms2ger>
gsnedders, also, very little (if any) experience with rust in the security team would mean slower/more likely buggy code writing and reviewing, and calling the library from C++ would still involve crossing through a C API, with all the fun things that implies

[09:32:12.0000] <jgraham>
zcorpan: Well I pushed a review request, but you might not like it (but that's OK; it's what code review is for :)

[10:29:22.0000] <gsnedders>
Ms2ger: Integrating into the build system or more generally?

[10:29:29.0000] <gsnedders>
Ms2ger: Because without stdlib it should be fine, right?

[10:29:57.0000] <gsnedders>
Ms2ger: And I have more trust in a small C wrapper API than something large written in old-sk00l C++. :)

[10:30:44.0000] <Ms2ger>
Build system is one of the first things I thought of, yes

[10:30:59.0000] <Ms2ger>
Especially since we're already spread very thin there

[10:31:39.0000] <Ms2ger>
(There's basically nobody who's actually paid to work on the build system)

[10:36:17.0000] <gsnedders>
Well, of course. Why would that matter? It's not profitable!

[11:11:42.0000] <jgraham>
/me discovers that the HTMLWG meeting is bad for his blood pressure even when it is thousands of miles away

[11:15:21.0000] <Ms2ger>
http://lists.w3.org/Archives/Public/www-archive/2014Apr/0011.html

[11:31:14.0000] <annevk>
jgraham: why?

[11:31:18.0000] <annevk>
jgraham: something happening?

[11:43:53.0000] <Hixie>
jgraham: how is it even affecting you

[11:52:33.0000] <jgraham>
They are talking about testing

[11:52:50.0000] <jgraham>
And people are saying things that sound a lot like "we could just delete the tests that fail"

[11:53:22.0000] <jgraham>
And it's really 386ing me

[11:53:58.0000] <Hixie>
wow, really

[11:54:00.0000] <Hixie>
/me looks at the calendar

[11:54:01.0000] <jgraham>
(or even "we could edit the spec so that the behaviour become undefined, and *then* delete the tests")

[11:54:20.0000] <Hixie>
2014 and still talking about getting interop by ignoring lack of interop!

[11:54:23.0000] <Hixie>
gotta love the w3c!

[11:54:54.0000] <jgraham>
Well I'm hoping that this is just people who didn't get the memo and that darobin will keep them in line

[11:55:43.0000] <darobin>
no tests are getting deleted

[11:55:43.0000] <hober>
Fear will keep the local systems in line. Fear of darobin!

[11:55:57.0000] <darobin>
there are so many better options in the weaseling toolbox

[11:56:06.0000] <Hixie>
like not weaseling?

[11:56:09.0000] <Hixie>
oh right, i forgot, w3c.

[11:56:51.0000] <darobin>
I thought "weasel" was the reason for the initial "w" in anything standards related?

[11:57:00.0000] <Hixie>
um, no

[11:57:10.0000] <Hixie>
weaseling is shameful

[11:59:55.0000] <wilhelm>
jgraham: Who are those people?

[12:00:20.0000] <wilhelm>
/me finds his pitchfork.

[12:00:51.0000] <Domenic___>
hober++

[12:01:02.0000] <MikeSmith>
so should I stop deleting tests now?

[12:01:04.0000] <Domenic___>
also yeah the recent d3events "let's not specify this" threads on www-dom were O__o

[12:01:12.0000] <Ms2ger>
Well, it's d3e

[12:01:18.0000] <Ms2ger>
I don't think they ever got the memo

[12:02:52.0000] <SamB>
are they like "memo? what is memo?"

[12:05:38.0000] <Ms2ger>
I didn't see no memo!

[12:06:50.0000] <Ms2ger>
foolip, did you have a corpus?

[12:07:23.0000] <Ms2ger>
I'm wondering how much <script type=text/javascript;version=*> happens in the wild

[12:25:44.0000] <zewt>
weasel hat wg

[12:26:27.0000] <Ms2ger>
That conjures a nice picture of a weasel in a hat

[12:40:19.0000] <Domenic___>
the ol' question mark logo's been around for a while, maybe it's time to let a weasel in a hat take over the job

[12:43:54.0000] <SamB>
Domenic___: doesn't sound like a good favicon ...

[12:44:53.0000] <SamB>
I mean, unless you get a good drawer and a good pixeler in on it

[12:46:03.0000] <hober>
Domenic___: http://lists.w3.org/Archives/Public/www-dom/1998JulSep/0342.html

[12:46:16.0000] <hober>
annevk: ^^

[12:46:21.0000] <Domenic___>
O_____O

[12:46:23.0000] <hober>
annevk: maybe you should use a weasel

[12:48:05.0000] <Ms2ger>
Oh, good old times

[12:48:17.0000] <Ms2ger>
Re: document.write to self during load not allowed by PR-DOM

[12:48:43.0000] <SamB>
PR-DOM ?

[13:02:39.0000] <annevk>
wut

[13:05:09.0000] <annevk>
hober: it's somewhat nicer than our cludged tree construct

[13:05:18.0000] <annevk>
hober: make it green

[13:05:30.0000] <annevk>
jgraham: now I am sad too

[13:19:49.0000] <annevk>
Domenic___: whoa, you tweet meed me read the other emails in that thread

[13:19:53.0000] <annevk>
Domenic___: http://lists.w3.org/Archives/Public/www-dom/1998JulSep/0349.html o_O

[13:20:07.0000] <Domenic___>
hehe yeah

[13:20:40.0000] <annevk>
also, I wonder if that's the same Mike Champion that's now Microsoft's AC rep

[13:20:44.0000] <annevk>
I guess it might be

[13:20:56.0000] <annevk>
been sixteen years

[13:23:31.0000] <darobin>
it is

[13:24:39.0000] <MikeSmith>
it's the same physical person at least

[13:32:02.0000] <galineau>
yup, same guy

[13:33:52.0000] <galineau>
wait is MSFT suggesting removing tests?

[13:35:21.0000] <SamB>
what, MSFT? never!

[13:39:10.0000] <MikeSmith>
OH: "anally required process"

[13:40:06.0000] <MikeSmith>
"better get my freight on the freighter"

[14:45:33.0000] <annevk>
SamB: https://github.com/inexorabletash/text-encoding

[14:45:49.0000] <annevk>
whoa, galineau

[14:54:18.0000] <galineau>
annevk, I'm guessing he might have browser tabs as old as you

[14:54:39.0000] <annevk>
heh

[15:13:36.0000] <Domenic___>
what's the context on http://w3cmemes.tumblr.com/image/82128157024 ?

[15:14:20.0000] <Hixie>
heh

[15:14:22.0000] <Hixie>
i can guess

[15:14:34.0000] <Hixie>
the w3c won't agree to not copying the whatwg spec

[15:15:12.0000] <Hixie>
so mike pointed out to them that they might get forced to consider it if i just relicensed the spec to just not allow it

[15:15:43.0000] <Domenic___>
heh

[15:15:59.0000] <MikeSmith>
I pointed out more than that

[15:16:20.0000] <Hixie>
man, the latest memes are a depressing reflection of the w3c

[15:16:21.0000] <MikeSmith>
but that's the only part what got minuted

[15:26:21.0000] <Domenic___>
s/depressing/fun

[15:26:43.0000] <Hixie>
depressing, if what you care about is the web

[15:35:00.0000] <annevk>
Hixie: if you run a script, are microtasks run at the end?

[15:35:36.0000] <annevk>
Hixie: e.g. I do new Worker() and in that worker I have a promise that immediately resolves itself, will that return its value before postMessag() stuff starts happening?

[15:36:12.0000] <Hixie>
those two questions seem unrelated.

[15:36:35.0000] <annevk>
Hixie: for service workers we want to do a deterministic "has listener" check at the end of initializing the script ideally before microtasks are run

[15:36:52.0000] <Hixie>
"has listener" should always return true

[15:37:09.0000] <Hixie>
that is, things should not depend on whether you have a listener or not

[15:37:27.0000] <annevk>
Hixie: so yeah, that would change here

[15:37:33.0000] <Hixie>
having a no-op listener and having no listener is the same thing.

[15:38:32.0000] <Hixie>
(i'm not trying to avoid your questions, i'm not sure i understand precisely what you mean by the original two questions; they seem different and so if they're meant to be the same, i definitely don't understand them.)

[15:38:57.0000] <annevk>
Hixie: the specification defines an algorithm for running a script given some fetched content

[15:39:15.0000] <Hixie>
which spec?

[15:39:19.0000] <annevk>
Hixie: the HTML spec

[15:40:45.0000] <Hixie>
you mean the <script> processing algorithm?

[15:40:59.0000] <Hixie>
http://www.whatwg.org/specs/web-apps/current-work/#execute-the-script-block ?

[15:41:10.0000] <Hixie>
or http://www.whatwg.org/specs/web-apps/current-work/#create-a-script ?

[15:41:56.0000] <Hixie>
microtasks run at http://www.whatwg.org/specs/web-apps/current-work/#clean-up-after-running-a-callback if the stack of script settings objects is empty

[15:42:06.0000] <Hixie>
which is called by http://www.whatwg.org/specs/web-apps/current-work/#jump-to-a-code-entry-point

[15:42:23.0000] <Hixie>
which is called by http://www.whatwg.org/specs/web-apps/current-work/#create-a-script

[15:42:35.0000] <Hixie>
which is called by http://www.whatwg.org/specs/web-apps/current-work/#execute-the-script-block

[15:42:56.0000] <Hixie>
as well as various other algorithms

[15:43:14.0000] <annevk>
thanks

[15:43:27.0000] <Hixie>
they also run after each task

[15:43:27.0000] <annevk>
so yes

[15:43:33.0000] <Hixie>
(which is often the same thing)

[15:45:46.0000] <Hixie>
but seriously, don't do anything based on whether you have a listener ornot

[15:45:54.0000] <Hixie>
that's a layering violation

[15:52:49.0000] <TabAtkins>
annevk: Why are you trying to do something different based on the presence of a listener?

[15:53:49.0000] <zewt>
awooga awooga

[16:01:44.0000] <TabAtkins>
Ah, now I see the reasoning: https://github.com/slightlyoff/ServiceWorker/issues/225

[16:02:19.0000] <TabAtkins>
They want to skip the ServiceWorker entirely if there's no listener registered for a given event, since it's guaranteed to fall back to the network stack.

[16:02:38.0000] <Hixie>
isn't that an implementation detail?

[16:03:01.0000] <hober>
it's not if they want to ignore subsequent listener additions

[16:03:06.0000] <TabAtkins>
Technically, yes.  The part that needs some spec language is defining *precisely* when a UA is allowed to assume there's no listener.

[16:03:13.0000] <TabAtkins>
There's some timing issues.

[16:04:10.0000] <Hixie>
i would phrase it differently then

[16:04:22.0000] <Hixie>
i would say that you fire the events at that time, or some such

[16:04:31.0000] <Hixie>
not that you don't fire the event if it doesn't have a handler

[16:04:47.0000] <Hixie>
but this all seems like an implementation detail

[16:05:05.0000] <hober>
Hixie: look at the code example in https://github.com/slightlyoff/ServiceWorker/issues/225

[16:05:14.0000] <TabAtkins>
And what hober said - they want to only allow functional listeners to be registered during install/update, not randomly, so that the fact of whether a SW is going to handle a request or not doesn't change in a way that would expose nondeterminism in request dispatch.

[16:05:16.0000] <Hixie>
i did

[16:05:49.0000] <TabAtkins>
In other words, they need to know about listener registration during some temporal periods and not others.

[16:05:57.0000] <Hixie>
i don't really understand what that code snippet is suggesting

[16:06:30.0000] <TabAtkins>
Imagine that, instead, SWs had to explicitly say "I'm going to handle fetches" (or other kinds of network activity).

[16:06:40.0000] <TabAtkins>
The list of things to handle could only be updated during an install/update.

[16:06:47.0000] <Hixie>
that seems like a reasonable api approach

[16:06:52.0000] <TabAtkins>
And if you didn't explicitly say so, you dont' get sent anything.

[16:07:16.0000] <hober>
even if you subsequently "change your mind" as in the self.onfetch in that example

[16:07:17.0000] <Hixie>
better than doing anything based on what listeners are present, certainly

[16:07:21.0000] <TabAtkins>
They're just trying to reduce boilerplate and reduce the chance of mistakes by making the registration mechanism "add a listener".

[16:07:42.0000] <TabAtkins>
Becasue saying you're going to handle fetches, and then not defining a fetch listener, is stupid.

[16:07:44.0000] <Hixie>
well then why not just have the logic be "when a listener is added, do X", like MessagePort does?

[16:07:54.0000] <TabAtkins>
And so is defining a fetch handler, but not declaring that you'll handle fetches.

[16:08:04.0000] <TabAtkins>
Yeah, I think that's all that needs to be done.

[16:08:16.0000] <Hixie>
that seems better than any weird timing things

[16:09:15.0000] <Hixie>
i mean, this is why message ports have start()

[16:09:58.0000] <Hixie>
there's setting onmessage, which is "explained" as being the same as addEventListener() followed by start()

[16:10:22.0000] <Hixie>
seems better than checking for listeners

[16:10:53.0000] <TabAtkins>
Yeah, the deal is that there's a defined period where they want to listen for registrations, and no more after that.

[16:11:06.0000] <Hixie>
sure

[16:11:12.0000] <TabAtkins>
So you have to nail down the timing correctly, so that it can be documented exactly when listeners stop being paid attention to.

[16:11:24.0000] <Hixie>
so long as they "explain" it properly with an api that doesn't actually rely on this, that's fine

[16:11:45.0000] <TabAtkins>
?

[16:12:01.0000] <Hixie>
like the message port thing above

[16:12:03.0000] <zewt>
most cases i've seen where people think they want to detect whether an event listener exists, what they should really be doing is basing it on whether preventDefault was called

[16:12:20.0000] <TabAtkins>
zewt: Unrelated to this case.

[16:13:08.0000] <TabAtkins>
You're talking about when people are trying to detect "was this event handled by the system, or did JS get a crack at it?".

[16:13:43.0000] <TabAtkins>
They're talking about whether to even fire events at a SW, based on whether the SW is set up to listen to them.

[16:14:45.0000] <zewt>
no, I'm in particular talking about the webglcontextlost WebGL event, where as I recall they wanted to say "if there are any listeners for webglcontextlost, then enable context loss. otherwise they don't support it, so do something different" (not precisely, been too long for the details)

[16:15:14.0000] <zewt>
oh, for automatic context restoration

[16:16:00.0000] <zewt>
"if there are any listeners for webglcontextlost, then the client knows about automatic context restoration and we'll do it. otherwise it's older code, so don't automatically restore the context"

[16:16:20.0000] <zewt>
got changed to "if webglcontextlost is cancelled, enable context restoration"

[16:17:05.0000] <zewt>
(i'm still getting it wrong, but the details aren't important here anyway)

[16:25:48.0000] <TabAtkins>
Yeah, that makes more sense in that case.


2014-04-09
[18:59:26.0000] <GPHemsley>
Hixie: I'm just now going through the backlog of wiki admin stuff... the non-account request e-mails can be quite entertaining

[19:00:07.0000] <GPHemsley>
(Subject: "I'm going to sue you") "I'm tired of you controlling everything I do. I'm going to sue you for all your open source, ifc, developer, xmtl bullshit. It is a total invasion of privacy."

[19:00:27.0000] <GPHemsley>
Oh, wait, I left off the kicker

[19:00:29.0000] <GPHemsley>
"Sent from my iPhone"

[19:01:40.0000] <GPHemsley>
I also love the numerous spam product catalogs for traffic cones

[19:02:49.0000] <GPHemsley>
oh, and apparently html5banners.com will soon be available for auction

[19:50:02.0000] <aretecode>
What books do you recommend reading about specifications/standards/schemas?

[19:58:48.0000] <Hixie>
GPHemsley: sounds like i have better spam filtering than you, i hadn't seen any of those :-)

[19:59:18.0000] <Hixie>
aretecode: i haven't seen any especially brilliant ones, i'd mostly recommend reading the specs and joining the mailing lists

[20:05:14.0000] <aretecode>
Hixie, thanks for your input. Can I buy the specs on paper?

[20:06:17.0000] <Hixie>
you can buy paper and i think some companies still make printers :-)

[20:06:24.0000] <SamB>
aretecode: most of them are living nowadays, it seems

[20:06:47.0000] <Hixie>
yeah most of the good specs these days are maintained, meaning they get bug fixes regularly

[20:06:51.0000] <Hixie>
like, daily or weekly

[20:06:57.0000] <SamB>
it's not like buying a TeX manual that you could use for >1/4 century

[20:07:47.0000] <SamB>
(depending on how interested you are in having all the errata fixed by other than literal copy&paste)

[20:08:09.0000] <aretecode>
I understand, still, I find it easier to speed read on paper & printing them off is such a hassle.

[20:08:31.0000] <SamB>
(Yes, Knuth makes patches that you can print out and paste into the manual!)

[20:10:29.0000] <tantek>
aretecode, for some of these specs, by the time you're done printing them, what you've printed out is already obsolete (changes have occured).

[20:10:47.0000] <tantek>
even more likely for anything "preprinted"

[20:10:51.0000] <tantek>
like "books"

[20:13:25.0000] <aretecode>
True, I will just have to read these online - thank you :-)

[20:14:50.0000] <GPHemsley>
If you wait long enough, they'll probably stabilize eventually

[20:14:56.0000] <GPHemsley>
And then you could print them

[20:18:36.0000] <Hixie>
HTML is pretty stable, but i doubt it'll be unchanging before it's obsolete

[20:18:59.0000] <Hixie>
and it'll probably have a wave of desperate changes just after being obsolete :-)

[20:20:30.0000] <zewt>
if you want stuff on paper, buy a kindle

[03:53:56.0000] <jgraham>
gsnedders: r+

[06:45:47.0000] <Ms2ger>
"The problem is that the CSS Working Group doesn't follow the W3C Process for maintaining specifications."

[06:45:49.0000] <Ms2ger>
/me giggles

[06:47:17.0000] <jgraham>
:-o

[08:23:06.0000] <galineau>
'Not following the W3C process' kind of sounds like a feature to me.

[08:23:18.0000] <dglazkov>
good morning, Whatwg!

[08:23:47.0000] <galineau>
good morning to you too, Monsieur Glazkov

[08:32:55.0000] <Ms2ger>
galineau, well, you know there's one person who'd disagree :)

[08:34:08.0000] <dglazkov>
good morning, galineau and Ms2ger!

[08:34:13.0000] <galineau>
Ms2ger: only one? OMG I've never been this close to consensus before

[08:34:19.0000] <Ms2ger>
Ha

[08:34:34.0000] <Ms2ger>
One person in particular

[09:22:06.0000] <MikeSmith>
who says "The problem is that the CSS Working Group doesn't follow the W3C Process for maintaining specifications"

[09:22:27.0000] <MikeSmith>
don't make me have to go and read www-style

[09:23:41.0000] <MikeSmith>
nm

[09:24:01.0000] <MikeSmith>
I should have guessed

[09:53:08.0000] <TabAtkins>
Yeah, that argument from Björn is totally valid.

[09:53:16.0000] <TabAtkins>
The errata for CSS2 is a disgrace. :/

[09:53:51.0000] <TabAtkins>
galineau: Urg, you're gonna break my name-autocompletion memory with a nick like that.

[09:54:04.0000] <TabAtkins>
Hixie: I remembered that I was supposed to ping you when I'd written this spec: http://dev.w3.org/csswg/css-scoping/#scoping-mechanisms

[09:54:11.0000] <TabAtkins>
So you can point <style scoped> to it.

[09:57:38.0000] <tantek>
isn't the errata for CSS2 called "CSS2.1" ?

[09:59:03.0000] <SimonSapin>
fwiw, I call "CSS2" all of 2.0, 2.1, and any future 2.x

[10:04:25.0000] <tantek>
SimonSapin - if you'd worked on CSS2 (or tried to implement it), you would have no desire to refer to anything as CSS2 except in a legacy / dismissive manner

[10:06:57.0000] <SimonSapin>
tantek: that’s not incompatible with what I just said

[10:07:24.0000] <Ms2ger>
Ha

[10:11:38.0000] <tantek>
SimonSapin, Y U NO LIKE CSS2.1?

[10:16:33.0000] <TabAtkins>
tantek: Because it's full of wrong things that are only corrected in the errata that nobody ever reads.

[10:16:57.0000] <tantek>
so the 2.1 errata is in a sad state, is that what's being asserted?

[10:17:05.0000] <Ms2ger>
s/2.1//

[10:17:32.0000] <tantek>
heh

[10:17:38.0000] <Ms2ger>
Nobody ever bothers with errata in the csswg

[10:18:19.0000] <annevk>
What was the thing you said about mailing lists again tantek?

[10:19:00.0000] <tantek>
on a long enough timeline, open mailing lists turn into support forums

[10:19:00.0000] <hober>
annevk: http://w3cmemes.tumblr.com/post/27939749113/the-conversation-in-whatwg-whenever-tanteks

[10:19:41.0000] <annevk>
Ah too bad, does not entirely feel how I think about errata

[10:20:13.0000] <annevk>
s/feel/match/

[10:20:26.0000] <tantek>
I'm not much of a fan of errata either - the "nobody checks errata" problem makes errata not every useful in practice even if they do exist and are updated.

[10:21:29.0000] <tantek>
I'm much more in favor of the "luke-warm spec" model - "finished" specs continue being updated inline with any errata to their feature set

[10:23:08.0000] <Domenic_>
sounds like a living standard

[10:23:43.0000] <jgraham>
Lukewarm makes it sound like a zombie standard

[10:25:43.0000] <Domenic_>
i guess the distinction tantek is making is "no new features"?

[10:26:41.0000] <tantek>
jgraham, are zombies warm?

[10:26:57.0000] <rniwa>
annevk: yt?

[10:27:02.0000] <annevk>
rniwa: yeah

[10:27:12.0000] <rniwa>
annevk: do you remember why we couldn't make querySelectorAll return Elements?

[10:27:22.0000] <tantek>
Domenic, yes, specific (frozen) feature sets are useful to various folks.

[10:27:33.0000] <hober>
rniwa: Elements didn't exist yet

[10:27:36.0000] <rniwa>
annevk: I know we could replace all static NodeList with Array or make it inherit from Array

[10:27:37.0000] <annevk>
rniwa: we might be able to, it didn't seem worth the hassle of finding out

[10:27:39.0000] <rniwa>
hober: I know.

[10:27:49.0000] <annevk>
rniwa: interesting

[10:27:51.0000] <Ms2ger>
tantek, I'm unconvinced

[10:28:12.0000] <rniwa>
annevk, hober: It seems like querySelectorAll should simply return a JS Array (or Elements when it's introduced)

[10:28:14.0000] <annevk>
rniwa: given .queryAll() I didn't really see the need to find out

[10:28:45.0000] <Hixie>
TabAtkins: sweet, thanks

[10:28:48.0000] <rniwa>
annevk: well, it kind of sucks to force authors to use new function just because of that.

[10:28:53.0000] <annevk>
rniwa: I'd be okay with supporting that in the specification if you implement it

[10:29:14.0000] <annevk>
rniwa: yeah I guess, the new functions also do other things authors asked for

[10:29:22.0000] <annevk>
rniwa: e.g. jQuery selector parsing compat

[10:29:33.0000] <rniwa>
annevk: you mean queryAll?

[10:29:50.0000] <rniwa>
annevk: right, because it supports relative selector.

[10:30:10.0000] <annevk>
rniwa: yes and yes

[10:30:16.0000] <rniwa>
annevk: but it kind of sucks that we have to block the work to make querySelectorAll's results usable until we can implement the relative selector

[10:30:28.0000] <rniwa>
annevk: because the latter requires a substantial amount of work

[10:30:32.0000] <tantek>
Ms2ger, clearly you're not various folks ;)

[10:30:39.0000] <annevk>
rniwa: as I said, I'd be happy to back a WebKit change with a spec change

[10:30:56.0000] <annevk>
rniwa: you might want to ping the list and copy bz and arv_

[10:30:57.0000] <jgraham>
tantek: I imagine zombies follow Newton's law of cooling

[10:30:58.0000] <rniwa>
annevk: I guess the only risk is that someone might calling item() on the result :/

[10:31:02.0000] <rniwa>
arv_: ^

[10:31:04.0000] <annevk>
rniwa: yeah

[10:31:17.0000] <rniwa>
bzed: are you bz?

[10:31:22.0000] <Domenic_>
/me shakes fist at item()

[10:31:28.0000] <annevk>
bzed != bz

[10:31:33.0000] <rniwa>
annevk: thanks.

[10:31:44.0000] <tantek>
jgraham maybe warm blooded vs. cold blooded (mammals vs reptiles) could be another analogy

[10:31:47.0000] <TabAtkins>
rniwa: What's so hard about relative selectors? Absolutizing them is a simple algo.

[10:31:48.0000] <rniwa>
annevk: another risk is that WebKit has historically supported stupid namedItem :(

[10:31:53.0000] <annevk>
Domenic_: item() laughs at you

[10:32:16.0000] <rniwa>
TabAtkins: I'm not saying it's hard. It requires a lot of work.

[10:32:21.0000] <annevk>
rniwa: that hasn't been refactored?

[10:32:41.0000] <tantek>
then again, even mammals don't typically spontaneously grow never-before-seen limbs (features)

[10:32:50.0000] <rniwa>
annevk: you mean namedItem?

[10:32:52.0000] <rniwa>
annevk: not in WebKit

[10:32:55.0000] <rniwa>
annevk: it has been in Blink.

[10:32:57.0000] <annevk>
TabAtkins: proper Elements support also requires a lot of work

[10:33:05.0000] <rniwa>
annevk: (I think)

[10:33:08.0000] <annevk>
rniwa: ait

[10:33:11.0000] <rniwa>
annevk: yeah...

[10:33:16.0000] <annevk>
But going with Array for now seems safe

[10:33:19.0000] <rniwa>
annevk: we might just do Array first and then add Elements later.

[10:33:23.0000] <TabAtkins>
All right.  Not really sure how (you just do a quick check on the selector, then maybe prepend :scope), but whatever.

[10:33:29.0000] <TabAtkins>
annevk: Yeah, I'd believe that.

[10:34:05.0000] <tantek>
living things typically have a static total feature set (gene sequence)

[10:34:20.0000] <Domenic_>
that's interesting. having queryAll return an Array and then upgrading it to Elements later might be a backward-compat change

[10:34:25.0000] <tantek>
living things that grow new things here and there that were outside that feature set are typically the result of cancers

[10:34:25.0000] <TabAtkins>
It's actually correct to just do a string search on the selector (assuming we never define a ::scope pseudo-element).

[10:35:04.0000] <tantek>
so perhaps "living spec" would make more sense to apply to static feature set but inline updated errata specs

[10:35:09.0000] <Domenic_>
this is actually really good. it means queryAll could get implemented much faster.

[10:35:44.0000] <rniwa>
tantek: it would be nice to have snapshots of living standards with errata.

[10:35:57.0000] <TabAtkins>
tantek: And "cancerous spec" to ones like HTML?

[10:36:08.0000] <TabAtkins>
"mutagenic"

[10:36:09.0000] <rniwa>
tantek: i always get surprised by how much things have changed whenever i look at living standards :(

[10:36:10.0000] <tantek>
and a spec that grows new features beyond its base feature set would make more sense labled a "cancerous spec"

[10:36:47.0000] <rniwa>
Domenic_: not so fast in WebKit but yeah... at least we can unblock it from having implemented Elements.

[10:36:48.0000] <tantek>
rniwa - ah yes, you're one of the "various folks" I mentioned then

[10:38:00.0000] <Domenic_>
rniwa: is implementing relativize absolute selector that much work? feels like pull-request material...

[10:39:25.0000] <annevk>
Domenic_: note that rniwa and I were discussing returning an Array from querySelectorAll, not queryAll, though the latter seems ok too

[10:39:31.0000] <tantek>
rniwa - that sort of "living spec" model is what I'm seeing if I can push W3C to do.

[10:39:39.0000] <tantek>
since errata are pretty broken (in many ways)

[10:39:42.0000] <rniwa>
tantek: yeah, that'll be nice.

[10:39:51.0000] <rniwa>
tantek: in fact, that's how we release software products, right?

[10:39:56.0000] <tantek>
right

[10:39:56.0000] <rniwa>
tantek: we have trunk and then we branch for each release

[10:40:02.0000] <tantek>
lots of lessons to be reapplied

[10:40:10.0000] <rniwa>
tantek: "errata's" being merged into each branch

[10:40:14.0000] <annevk>
tantek: as humans grow, they're able to do more things, until they die, not sure the feature set is necessarily static

[10:40:33.0000] <tantek>
precisely rniwa

[10:40:49.0000] <annevk>
However, I don't object to branching, if we can find more people working in this space first...

[10:40:49.0000] <rniwa>
annevk: if you consider the feature set as the physical characteristics of a person, then it doesn't change much over the course of a human life

[10:40:57.0000] <rniwa>
tantek: if you do consider it as his/her knowledge, then it does.

[10:40:59.0000] <annevk>
It's not like we have many editors to go around fixing the platform bugs

[10:41:03.0000] <tantek>
annevk - they're able to do more things (applications) with the same genetics/physical expression (features)

[10:41:25.0000] <rniwa>
annevk: THAT (scarcity of good editors) is the biggest problem we have :(

[10:41:40.0000] <rniwa>
annevk: I'd rather have you and other good spec. editors writing actual specs and participating in discussions

[10:41:44.0000] <rniwa>
annevk: than doing branches and merging fixes :(

[10:42:06.0000] <rniwa>
annevk: because the latter is more of a tedious work...

[10:42:08.0000] <Ms2ger>
rniwa, tell webapps

[10:42:14.0000] <tantek>
so all you "master editors" have taken an apprentice right? ;)

[10:42:16.0000] <rniwa>
Ms2ger: tomorrow!

[10:42:38.0000] <Domenic_>
for smaller specs branching/tagging meaningful versions is pretty easy i think

[10:42:43.0000] <Domenic_>
for html it seems infeasible

[10:42:47.0000] <Domenic_>
but for e.g. fullscreen probably fine

[10:43:05.0000] <tantek>
rniwa are you coming to the webapps f2f tomorrow?

[10:43:06.0000] <tantek>
(cue Annie soundtrack)

[10:43:26.0000] <tantek>
annevk: http://en.wikipedia.org/wiki/List_of_human_anatomical_features ;)

[10:43:32.0000] <annevk>
Domenic_: seems like a chore, maintaining Fullscreen currently takes a couple hours every other week, that would make it worse

[10:43:53.0000] <annevk>
tantek: ok ok, maybe my argument is that I don't really buy the analogy :p

[10:44:13.0000] <annevk>
tantek: mostly, if someone could solve the resources problem, we can look at it again

[10:44:17.0000] <tantek>
annevk ok that's fair ;)

[10:44:48.0000] <tantek>
annevk, the resources to do spec branching/tagging don't have to be as capable as those editing trunk.

[10:45:10.0000] <tantek>
I'll let you draw your own conclusions where there are such resources ;)

[10:49:24.0000] <aklein>
Hixie: I'm curious about the script "entry settings object" (http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#entry-settings-object); in particular I'm interested under what circumstances you'd expect there to be no entry settings object

[10:50:12.0000] <aklein>
also, from a higher level, I'm wondering if the new ES6 tasks stuff breaks some expectation of HTML that the latter (HTML, that is) is always the actor calling into script

[10:51:21.0000] <aklein>
Domenic_: you might also be interested in my higher level concern, above

[10:51:39.0000] <Domenic_>
/me starts listening

[10:51:53.0000] <arv_>
rniwa, annevk: Having querySelectorAll return an Array sounds good to me. We'll be happy to follow if you make this change in WebKit.

[10:52:19.0000] <Domenic_>
O_O

[10:52:21.0000] <aklein>
Domenic_: in trying to make V8 run Promise callbacks itself, we ended up in a position where Blink didn't have enough information about the page context

[10:53:00.0000] <aklein>
Domenic_: https://code.google.com/p/chromium/issues/detail?id=360891 is the bug, if you're interested; the use of Object.observe could be replaced with a Promises example

[10:53:34.0000] <annevk>
aklein: you want to talk to bz probably

[10:53:58.0000] <aklein>
annevk: I definitely want someone from Mozilla, yeah, as I suspect the entry settings object goes back a long way

[10:54:03.0000] <aklein>
its behavior is pretty surprising

[10:54:11.0000] <Domenic_>
yeah these sound like similar concerns to ones bz was voicing

[10:54:32.0000] <Domenic_>
ES6 *does* define the Realm in which these functions are called

[10:54:34.0000] <aklein>
ah, where/when was bz voicing these concerns?

[10:54:44.0000] <Domenic_>
namely, the same realm they were created in

[10:54:52.0000] <Domenic_>
presumably "script settings object" could be a property of the realm

[10:54:52.0000] <aklein>
sure, that's how all functions work

[10:55:26.0000] <rniwa>
that's some super hairy stuff :(

[10:55:27.0000] <aklein>
the distinction is between the "entry" settings object and any old settings object

[10:55:38.0000] <annevk>
aklein: he posted some examples to es-discuss I believe

[10:55:43.0000] <aklein>
annevk: ok, will go look

[10:55:45.0000] <annevk>
aklein: about what promises doesn't define at the moment

[10:55:53.0000] <Domenic_>
aklein: I'm not sure I understand that distinction

[10:55:58.0000] <Hixie>
aklein: when no script is running

[10:56:43.0000] <Domenic_>
aklein: my understanding is that window.location.href in that callback should refer to the window.location.href for wherever the function was created

[10:56:52.0000] <aklein>
Domenic_: nope, it's much crazier than that

[10:57:00.0000] <Domenic_>
so if you got the function from another iframe it would affect the other iframe

[10:57:20.0000] <aklein>
Domenic_: it actually depends not on where the function that's calling window.location.href lives

[10:57:48.0000] <aklein>
but instead on which document had the event or script tag in it

[10:57:53.0000] <Domenic_>
aklein: ah ok, this is one of those crazy web-compat things where the straightforward answer is not compatible

[10:57:58.0000] <rniwa>
aklein: please be sure to add that to ES6/W3C test suite.

[10:58:06.0000] <Domenic_>
it is starting to come back to me now

[10:58:16.0000] <aklein>
Hixie: so you'd be surprised if there was script running but there was no entry settings object?

[10:58:52.0000] <rniwa>
/me feels that "those crazy web-compat things" come up way too often in anything related to ES5/ES6

[10:59:05.0000] <aklein>
rniwa: there are already incompatibilities between Blink and Gecko :(

[10:59:18.0000] <rniwa>
aklein: I'm sure there are plenty of them

[10:59:27.0000] <aklein>
rniwa: I mean in this particular case of Location

[10:59:34.0000] <aklein>
and "entry" settings

[10:59:52.0000] <aklein>
rniwa: you don't happen to know how JSC handles this notion, by any chance?

[11:00:09.0000] <rniwa>
aklein: definitely not, sorry :(

[11:00:26.0000] <annevk>
aklein: http://esdiscuss.org/topic/specification-styles#content-11 is the specific email I was thinking about

[11:00:28.0000] <rniwa>
aklein: you might want to check with weinig or ggaren on #webkit?

[11:01:01.0000] <annevk>
aklein: a script running without a settings object would go horribly wrong for a number of APIs

[11:01:23.0000] <aklein>
annevk: it certainly goes horribly wrong in chrome :)

[11:01:29.0000] <annevk>
aklein: all APIs that deal with URLs for instance

[11:01:39.0000] <annevk>
(except for new URL, funnily enough)

[11:02:04.0000] <Hixie>
aklein: there should definitely be a script settings entry whatsit if a script is running

[11:02:25.0000] <Hixie>
aklein: any time code executes, it has to go through http://www.whatwg.org/specs/web-apps/current-work/#jump-to-a-code-entry-point to execute

[11:02:47.0000] <Hixie>
aklein: that first calls http://www.whatwg.org/specs/web-apps/current-work/#prepare-to-run-a-callback which pushes a script settings object onto the stack of script settings objects

[11:04:24.0000] <Hixie>
aklein: actually, there's one other way script can run, which is callbacks run by WebIDL; WebIDL pushes the script settings objects onto the stack manually. See WebIDL 4.8.

[11:05:04.0000] <Hixie>
heycam|away|away: looks like webidl hasn't been updated to the new terminology regarding script settings objects btw

[11:10:02.0000] <aklein>
annevk: excellent, that is exactly the case, I'll study bz's post

[11:11:04.0000] <aklein>
Hixie: unfortunately https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tasks-and-task-queues also calls into script and doesn't use the HTML hook

[11:11:09.0000] <annevk>
aklein: might be worth posting that tidbit to es-discuss; both Allen and Domenic_ were surprised ES didn't match reality

[11:11:09.0000] <aklein>
(for obvious reasons, but still)

[11:11:24.0000] <annevk>
aklein: and I'm not sure they quite followed what bz went on about

[11:12:29.0000] <annevk>
aklein: seems like ES should expose some hooks (one of the other hooks it still needs is for a configurable this object)

[11:13:07.0000] <aklein>
I'm constantly amused that the way specs are segmented leads implementations to be broken in exactly the same way as the specs they implement

[11:13:33.0000] <aklein>
in this case, it's V8 caring not at all about tagging things as "entry" settings objects

[11:13:37.0000] <hober>
conway's law + murphy's law?

[11:14:20.0000] <aklein>
indeed

[11:15:18.0000] <aklein>
Hixie: the thread annevk linked to (http://esdiscuss.org/topic/specification-styles#content-11) might be interesting to you too...

[11:27:14.0000] <galineau>
TabAtkins: there is another sylvaing in #whatwg

[11:27:45.0000] <hober>
galineau: then use sgalineau so i can still s<TAB>

[11:27:57.0000] <TabAtkins>
Yus.

[11:28:07.0000] <TabAtkins>
STAB

[11:28:31.0000] <galineau>
TabAtkins: Stab Atkins!

[11:28:44.0000] <TabAtkins>
Stab Bat-Skins is my halloween name.

[11:28:48.0000] <annevk>
Hixie: what if we created a custom addEventListener for service workers that did something similar to what onmessage does in the port API? See https://github.com/slightlyoff/ServiceWorker/issues/225 for context

[11:29:01.0000] <annevk>
JakeA: ^

[11:31:47.0000] <sgalineau>
RESOLVED

[11:32:22.0000] <sgalineau>
/me renamed himself. Must be Last Call!

[11:33:50.0000] <Hixie>
aklein: sounds like a bug in ES

[11:35:29.0000] <Hixie>
annevk: any particular reason we're using events here rather than just having a dedicated callback mechanism with one callback per "event"? that would make it unambiguous that it had different semantics.

[11:38:50.0000] <JakeA>
Hixie: you can importScripts 3rd party services which may want a say too

[11:39:22.0000] <Hixie>
ah

[11:39:33.0000] <Hixie>
so what happens if two event handlers do contradictory things?

[11:40:13.0000] <JakeA>
With fetch in particular, you're responding to a thing that happened and potentially making it do something other then the default, events seem to fit

[11:40:59.0000] <Hixie>
*shrug*

[11:41:10.0000] <JakeA>
Hixie: handing the request (respondWith) is an implicit prevent Default and stopImmediatePropogation

[11:41:18.0000] <Hixie>
uh

[11:41:23.0000] <JakeA>
Ugh, my phone made that really difficult to type

[11:41:32.0000] <Hixie>
this sounds less and less like true DOM events

[11:43:18.0000] <Hixie>
i think if you find yourself having to adjust how the API works both in registration and in handling, you might be better off just making a new API, personally

[11:43:37.0000] <Hixie>
(this isn't a bad thing)

[11:57:38.0000] <annevk>
JakeA: that could actually be nice

[11:58:02.0000] <annevk>
JakeA: we could have callbacks that have a promise as return value and such

[12:11:14.0000] <JakeA>
annevk: well, app.get(urlRe, callback) will be the first library I build

[12:11:37.0000] <JakeA>
annevk: but I want a catch-all to do the usual get-it-from-the-cache-if-its-there bit

[12:12:56.0000] <annevk>
JakeA: I mean that instead of event.respondWith() and waitUntil(), you'd have self.add("fetch", function() { return promise })

[12:13:07.0000] <JakeA>
Hixie: annevk: It feel really similar to an event. Eg, I can observe click, I can also prevent the default and do something else. Fetch is like that, but the alternative response is passed to event.respondWith, which also calls event.preventDefault & event.stopImmediatePropogation

[12:13:12.0000] <annevk>
or self.listen() / self.observe()

[12:13:21.0000] <JakeA>
I'm not against it

[12:13:46.0000] <JakeA>
But is it different enough to warrant it?

[12:14:51.0000] <JakeA>
I can see us having an API in future where there's a url match. Might be a useful optimisation, but mostly useful for third party code

[12:15:10.0000] <annevk>
I don't see the current system matching events much

[12:15:44.0000] <annevk>
We want register side effects, we want to return promises

[12:16:08.0000] <JakeA>
It tells you about a thing that happened at a time when you can override default behaviour. Do we have DOM APIs that do that that aren't events?

[12:16:55.0000] <annevk>
.sort()

[12:17:15.0000] <JakeA>
array.sort()?

[12:17:54.0000] <JakeA>
That starts a sort, it doesn't listen for one

[12:18:17.0000] <annevk>
The callback is called and allows overriding behavior

[12:18:33.0000] <othermaciej>
callbacks with a promise as a return value? why would you want that?

[12:19:02.0000] <JakeA>
othermaciej: Well, that's exactly how .then() is

[12:19:17.0000] <annevk>
othermaciej: current API is onfetch = function(e) { e.respondWith(promise) }

[12:19:49.0000] <othermaciej>
I probably lack sufficient context but who is the ultimate consumer of the promise?

[12:20:03.0000] <othermaciej>
is there another layer of API that returns it?

[12:20:42.0000] <othermaciej>
I agree that calling an event method with a promise in an event handler seems dodgy

[12:20:44.0000] <annevk>
othermaciej: the browser consumes it and extracts a response object

[12:21:17.0000] <JakeA>
annevk: I see what you mean, but .sort triggers the event, and once it's complete, it doesn't happen again

[12:21:58.0000] <othermaciej>
the idea of returning a promise that the browser itself is supposed to use seems weird to me, but probably due to lack of understanding

[12:22:58.0000] <annevk>
JakeA: it seems we're not really using any bit from the event API and hacking around where it does not meet our needs

[12:23:05.0000] <annevk>
JakeA: it's not entirely clear what it buys us

[12:23:35.0000] <othermaciej>
I would expect the straightforward way to do it would be that a fetch callback gets some object that it can report to when (asynchronously) done

[12:24:06.0000] <JakeA>
othermaciej: When the browser makes a resource request, imagine it's creating a promise for the response. If the response fails, it does something else (eg, an image with an x). You get to provide that promise.

[12:24:12.0000] <annevk>
othermaciej: so the idea is that a response is an async value

[12:24:27.0000] <othermaciej>
but I guess if the async fetch it would do already naturally returns a promise, then it’s convenient

[12:24:27.0000] <annevk>
othermaciej: so we don't have to load the entire thing into memory

[12:24:53.0000] <annevk>
othermaciej: so yes, if you do a fetch in the worker it'll return a promise, which you would then give to the browser

[12:25:08.0000] <othermaciej>
sure, I assume you do potentially-asynchronous I/O in response to a fetch request

[12:25:37.0000] <JakeA>
othermaciej: we looked at respondWith(fetch(url)) vs fetch(url).then(respondWith) - the latter gets really messy fast

[12:25:54.0000] <othermaciej>
I am just not sure what the promise adds other than extra levels of indirection

[12:26:09.0000] <annevk>
othermaciej: right, so it seems kind of natural that you have dofetchrequest(callback) and callback returns a promise that handles the request et al

[12:26:29.0000] <annevk>
othermaciej: what else would you do?

[12:26:31.0000] <othermaciej>
I don’t know what respondWith is in that example

[12:27:06.0000] <annevk>
othermaciej: you might want to read up a bit on https://github.com/slightlyoff/ServiceWorker/

[12:27:09.0000] <othermaciej>
annevk: I’m obviously not “thinking with promises” yet because you seem to expect that statement to be completely intuititvely obvious and it’s not to me

[12:27:11.0000] <JakeA>
othermaciej: In ServiceWorker's onfetch event, it's the mechanism to hijack the request and respond with something else

[12:27:32.0000] <annevk>
othermaciej: yeah sorry

[12:27:42.0000] <JakeA>
actually, it should be respondWith(fetch(url)) vs fetch(url).then(respondWith, respondWith)

[12:27:45.0000] <annevk>
othermaciej: I wish I could explain in person

[12:28:40.0000] <JakeA>
othermaciej: Providing a promise allows you to synchronously state your intention to handle the request but handle it in an async way

[12:28:48.0000] <othermaciej>
annevk: where is the viewable form of the spec in that?

[12:28:52.0000] <SamB>
... so is there special magic that the browser does when it consumes a primitive promise in the return value of this failure callback?

[12:29:18.0000] <SamB>
like, never actually building the promised value?

[12:29:42.0000] <JakeA>
I'm not sure I get what you mean

[12:29:44.0000] <annevk>
othermaciej: http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html is some of it I suppose

[12:30:10.0000] <annevk>
othermaciej: but I recommend reading https://github.com/slightlyoff/ServiceWorker/blob/master/explainer.md first

[12:30:17.0000] <JakeA>
SamB: It waits for the promise to resolve, if it rejects it's a network error. If it resolves with not-a-response, networkerror

[12:30:33.0000] <othermaciej>
that seems to have large chunks of missing and/or misformatted content so I assumed it was not the right thing

[12:31:40.0000] <othermaciej>
ok, looking at the example of the use of onfetch

[12:32:07.0000] <othermaciej>
I would have thought the natural thing would be that you can call e.respondWith at any later time, so if your actual fetch is asynchronous, you end up calling it outside the scope of the fetch callback

[12:32:15.0000] <othermaciej>
but I assume there’s some reason that is not good enough, or something

[12:32:54.0000] <othermaciej>
it also seems a bit weird to use an event listener for this, because there can only be one response

[12:33:19.0000] <othermaciej>
if there are 10 listeners registered, which one wins?

[12:33:36.0000] <JakeA>
 othermaciej: Providing a promise allows you to synchronously state your intention to handle the request but handle it in an async way

[12:33:37.0000] <othermaciej>
does respondsWith implicitly prevent further event dispatch?

[12:33:42.0000] <JakeA>
yes

[12:34:01.0000] <JakeA>
preventDefault and stopImmediatePropogation

[12:34:31.0000] <othermaciej>
I see

[12:34:41.0000] <JakeA>
If you allow e.respondWith to be called at a later time, you get that race condition you mention

[12:34:44.0000] <othermaciej>
this seems pretty hard to understand for the uninitiated

[12:35:45.0000] <othermaciej>
it almost seems better to have a single callback, since otherwise you have a strong dependency on registration order, so your callbacks have to coordinate anyway

[12:36:17.0000] <JakeA>
We need to allow third party imports

[12:36:32.0000] <JakeA>
Order matters, just as it does with click events

[12:36:34.0000] <othermaciej>
if you do that, there’s no need to synchronously indicate intent to reply, and the whole thing becomes a lot simpler

[12:37:23.0000] <JakeA>
Yep, it makes it simpler with event listeners in general

[12:37:37.0000] <othermaciej>
is capture supported?

[12:37:47.0000] <JakeA>
No

[12:39:31.0000] <JakeA>
I'm open to the idea of this being not-an-event-listener (should be discussed on github), but we must support multiple "listeners"

[12:39:39.0000] <othermaciej>
I would say I’ll review it when there’s a spec, but by then it will probably be too late to five feedback

[12:39:56.0000] <othermaciej>
*give

[12:40:58.0000] <JakeA>
There's a ts file with the API if you want to give feedback earlier. It needs updating from the most recent f2f but it's pretty solid

[12:41:01.0000] <JakeA>
Oh, they're gone

[12:45:05.0000] <annevk>
JakeA: what is gone?

[12:46:56.0000] <JakeA>
othermaciej: There's a ts file with the API if you want to give feedback earlier. It needs updating from the most recent f2f but it's pretty solid

[12:47:09.0000] <JakeA>
annevk: othermaciej vanished for a moment

[12:49:43.0000] <Domenic_>
returning a promise is attractive FWIW

[13:00:26.0000] <annevk>
We should consider adding http://www.nohello.com/ to the topic, although it happens rarely enough I suppose

[13:00:45.0000] <annevk>
Domenic_: yes, the current API is ugly

[13:18:38.0000] <JakeA>
Domenic_: although we'd have to treat some return values as "unhandled", probably just undefined

[13:19:04.0000] <JakeA>
Domenic_: returning an actual response object should work

[13:23:21.0000] <Domenic_>
JakeA: just Promise.resolve() the return value

[13:33:19.0000] <JakeA>
Domenic_: hmm, feels nicer not to require that of the developer

[13:33:38.0000] <Domenic_>
JakeA: that's what I meant; the implementation should Promise.resolve() the return value

[13:34:27.0000] <Domenic_>
JakeA: step 8 onward of https://github.com/whatwg/streams#constructor-start-pull-cancel-

[13:34:36.0000] <JakeA>
Domenic_: but that gets racey if you have multiple "listeners"

[13:35:05.0000] <Domenic_>
JakeA: how so more racey than e.waitUntil?

[13:35:06.0000] <JakeA>
Something needs to be a sync signal of "nahhh, I'm not handling this"

[13:35:14.0000] <Domenic_>
oh gross

[13:35:20.0000] <Domenic_>
so the function has both sync and async behavior

[13:35:21.0000] <JakeA>
Domenic_: onfetch doesn't have waituntil

[13:36:25.0000] <JakeA>
Domenic_: depends how you think of it. You synchronously provide a promise, but that promise represents an async value

[13:37:29.0000] <JakeA>
Eg, you can't asynchronously provide a value to .then(), you need to return the response synchronously

[13:41:59.0000] <JakeA>
But yeah, undefined becomes "not handling" in the onfetch case. I guess this is why respondWith is a better intent

[13:42:55.0000] <Domenic_>
I guess I still prefer promise.then(respondWith) but I'll take your word for it that it's ugly.

[13:43:04.0000] <Domenic_>
I can already see that it's ugly for error-handling

[13:51:30.0000] <JakeA>
Domenic_: and racing

[13:52:19.0000] <JakeA>
Domenic_: eg two handlers

[14:21:43.0000] <slightlyoff>
sorry for not being available (was in TC39 meetings). othermaciej: happy to answer questions about fetch events

[14:22:01.0000] <slightlyoff>
Domenic_: it's super ugly

[14:22:30.0000] <slightlyoff>
Domenic_: the control inversion also doesn't work well with the need to get out of the way early

[14:25:41.0000] <slightlyoff>
Domenic_: the bigger issue is that ".then(resolveOtherThing)" still misses some way of saying "i've got this, keep me alive until I'm done"

[14:26:05.0000] <slightlyoff>
Domenic_: so even if you refactored this into 2 apis, you'd still need the moral equivalent of waitUntil() for deciding to "own" the transaction

[14:26:18.0000] <slightlyoff>
Domenic_: this is something that's also going to be required when we rework IDB

[14:26:52.0000] <Domenic_>
slightlyoff: hmm interesting stuff

[14:27:01.0000] <Domenic_>
having two use cases will help refine

[14:28:18.0000] <slightlyoff>
Domenic_: agreed.

[14:42:01.0000] <full_vlad>
hi all!

[14:42:56.0000] <full_vlad>
Can anyone help me with this problem? https://groups.google.com/a/chromium.org/forum/#!topic/chromium-extensions/sBCw0_jfLhI

[14:46:10.0000] <full_vlad>
it involves running a content script in all frames from a webpage

[14:52:13.0000] <TabAtkins>
This channel probably isn't helpful for Chrome Extensions questions.

[14:52:53.0000] <Hixie>
http://www.whatwg.org/specs/web-apps/current-work/#dom-form-requestautocomplete

[14:53:01.0000] <SamB>
full_vlad: they haven't even begun to standardize content scripts, so they'll not be of much help I'm afraid :-P

[14:55:55.0000] <full_vlad>
what I found so far is this:

[14:56:09.0000] <JakeA>
Domenic_: Sanity check: In cases where we provide promise equivalents to events, the promise should resolve after the event right? (https://code.google.com/p/chromium/issues/detail?id=343630#c10)

[14:56:21.0000] <full_vlad>
the extension runs well on Facebook, Twitter, old google chat (GTalk)

[14:56:38.0000] <full_vlad>
it doesn't run on Hangouts

[14:57:22.0000] <Domenic_>
JakeA: I agree with your reasoning. I also think requestAutocomplete is *perfect* for promises

[14:58:55.0000] <full_vlad>
but when I change the tabs it works, it just doesn't work on refresh

[14:59:33.0000] <full_vlad>
The Google Plus page (with Hangouts) has many iframes in it, so the content script has to run in its specific iframe (the one with the chat). If i run the privly.run() function inside that specific iframe manually it works

[14:59:59.0000] <JakeA>
Domenic_: Yeah, adding promises was always the intention. They just wanted out the door before they were available. Although that availability window turned out to be like a week or something

[15:00:07.0000] <SamB>
full_vlad: again, we don't really know about that stuff here!

[15:00:08.0000] <full_vlad>
Facebook and Twitter implement their chat box in the top frame, so I think that's the difference

[15:00:19.0000] <full_vlad>
ok, sorry

[15:00:48.0000] <JakeA>
Hixie: Looking at http://www.whatwg.org/specs/web-apps/current-work/#allowed-to-show-a-popup - So touchevents aren't a strong enough signal?

[15:01:25.0000] <full_vlad>
SamB, I just found a reference to your site in the Google content script documentation :p lol

[15:02:13.0000] <Hixie>
JakeA: that list was based on what browsers did at the time; i'm happy to add more if browsers want to add more

[15:02:18.0000] <SamB>
you mean whatwg.org? that's not *my* site :-)

[15:02:21.0000] <Hixie>
though honestly, on mobile, popups are even worse

[15:02:50.0000] <SamB>
/me 's mind is blown ... how can there be popups on mobile?

[15:03:06.0000] <SamB>
/me should think about getting a smartphone sometime ...

[15:04:00.0000] <JakeA>
Hixie: gotcha

[15:04:57.0000] <Hixie>
anyone else getting frequent 408s from bugzilla?

[15:07:09.0000] <esprehn>
Hixie: I think we want the autocomplete events to bubble

[15:07:32.0000] <esprehn>
Hixie: is there a reason you have all the new events not bubbling? We've gotten complaints from developers since it doesn't work with event delegation frameworks

[15:10:11.0000] <Hixie>
i tried to test chrome and it didn't seem to bubble there

[15:10:26.0000] <Hixie>
(you can always use capturing event handlers, btw, regardless of bubbling)

[15:11:11.0000] <Hixie>
i'm happy to make them bubble if chrome is going to change

[15:13:41.0000] <Hixie>
hsivonen: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=23940 and ping on the registry proposal thread

[15:14:28.0000] <esprehn>
Hixie: https://src.chromium.org/viewvc/blink?revision=170827&view=revision

[15:14:29.0000] <SamB>
Hixie: maybe Chrome is wrong

[15:15:22.0000] <esprehn>
Hixie: what was the reason for making simple events not bubble by default?

[15:18:28.0000] <Hixie>
esprehn: i like my defaults to be 0/false/""/null, generally. no other reason.

[15:18:54.0000] <Hixie>
esprehn: ah, good to see that change. will make them bubble.

[15:21:57.0000] <Hixie>
esprehn: done

[15:25:38.0000] <slightlyoff>
most events should bubble unless there's a security or privacy reason not to

[15:26:31.0000] <SamB>
slightlyoff: or a "that will really complicate applications" reason?

[15:26:57.0000] <esprehn>
yeah I think we might want to change the default, or at the very least fix up some events

[15:27:07.0000] <esprehn>
Hixie: ex. the form validation events don't bubble

[15:28:07.0000] <Hixie>
like 'invalid' ?

[15:28:28.0000] <Hixie>
you probably don't want 'invalid' to bubble, because there's not really any logical way to handle that generically

[15:30:12.0000] <Hixie>
slightlyoff: i don't see how there could be a security or privacy implication to any events bubbling or not. I think a bigger concern is whether it makes the API sane or not. e.g. clicking makes sense to bubble -- you click something, you're clicking its container. But 'load' on <img> doesn't make sense to bubble, because then it would get confused with the 'load' event on Window.

[15:30:43.0000] <Hixie>
with <form>, since you can't nest them, it doesn't really make any difference either way, so bubbling is probably fine

[15:31:46.0000] <Hixie>
'toggle' on <details> wouldn't make sense to bubble since <details> can be nested, and you'd get confused about which one just opened.

[15:31:53.0000] <Hixie>
and so forth

[15:33:38.0000] <MikeSmith>
Hixie: 408s from w3c bugzilla?

[15:33:43.0000] <Hixie>
[24~yeah

[15:33:45.0000] <Hixie>
yeah, even

[15:35:11.0000] <slightlyoff>
it seems significantly better to have a general "the way this works" than to try to special-case based on local reasoning.

[15:35:31.0000] <slightlyoff>
trying to teach the web platform is really, really hard for these sorts of reasons

[15:35:48.0000] <Hixie>
nah, designing APIs to just follow arbitrary rules doesn't make things better, imho.

[15:36:06.0000] <Hixie>
i'm all for consistency, but not to the point of making APIs hard to use.

[15:36:23.0000] <Hixie>
i don't think anyone has trouble with the fact that <img onload> and <body onload> are different events.

[15:36:29.0000] <esprehn>
Hixie: all the entities in the acknowledgements section are double escaped

[15:36:37.0000] <Hixie>
but i think they'd get _really_ confused if <img onload> bubbles to <body onload>.

[15:36:45.0000] <Hixie>
esprehn: yeah, known bug (only affects the multipage copy)

[15:36:54.0000] <esprehn>
ah okay

[15:37:04.0000] <Hixie>
esprehn: a fix is in the works but i want to do a long-term fix for a bunch of related issues so for now it's still broken :-)

[15:37:23.0000] <slightlyoff>
Hixie: if that was just the way "it worked", they'd start to filter by event target and/or we'd provide a good filtering API for them

[15:37:39.0000] <esprehn>
Hixie: why would you get confused? the event.target points to the one that toggled?

[15:38:11.0000] <slightlyoff>
Hixie: but as it stands there's not good filtering API, no way to teach how it works without "...except in all of these other cases becaues that's the way it is" and no clear model for what got decided in which direction

[15:38:40.0000] <Hixie>
esprehn: because <body onload="start()"> would work fine until you inserted an <img>, and then your code would run twice and you'd have no idea why

[15:38:57.0000] <esprehn>
Hixie: I meant the <details> case, not that one

[15:39:11.0000] <esprehn>
onload we can't change, too much content doesn't understand

[15:39:22.0000] <esprehn>
but modern content does check the target. Developers are used to dealing with click like things

[15:39:29.0000] <TabAtkins>
Hixie: Why would toggle on details be confusing? It's no more confusing than "click".  Being unable to do event delegation for things like "toggle" is annoying.

[15:39:37.0000] <Hixie>
esprehn: well again, <details ontoggle="animate(this)"> would work fine until you nested them, then it would break

[15:39:55.0000] <esprehn>
how is that different than onclick="animate(this)" ?

[15:40:09.0000] <Hixie>
the difference is that "click", conceptually, does affect all the elements in the chain

[15:40:16.0000] <Hixie>
you're clicking on the whole stack

[15:40:18.0000] <TabAtkins>
(No less confusing than "click" either, but the solution to figure out the target element is the same in both cases.)

[15:40:38.0000] <TabAtkins>
Hixie: You're projecting a *particular* mental model on that, which may not make any sense in some cases.

[15:40:55.0000] <TabAtkins>
In some cases for the author, it's really a particular element being clicked.  Like a button.

[15:41:00.0000] <esprehn>
Hixie: that doesn't match conversations we'e had with developers recently

[15:41:09.0000] <esprehn>
they've complained that "invalid" and other new events don't bubble

[15:41:31.0000] <TabAtkins>
More importantly, though, the ergonomics of non-bubbling is annoying, as esprehn and slightlyoff are saying.

[15:41:54.0000] <TabAtkins>
Because you have to specifically register a listener on every element you want to listen to, rather than doing one for a subtree or the whole page.

[15:41:58.0000] <esprehn>
<form oninvalid="..."> doesn't seem unreasonable, you want a single listener that opens some kind of error bubble

[15:42:16.0000] <esprehn>
It uses event.target to figure out what thing wants the bubble

[15:42:18.0000] <TabAtkins>
Each-element listeners make it more complicated to do dynamic HTML updates.

[15:42:18.0000] <Hixie>
file a bug, if there's no compat problem we can change it

[15:42:25.0000] <Hixie>
whatwg.org/newbug

[15:42:41.0000] <slightlyoff>
There's also the non-trivial costs to many apps of needing to do specific registration

[15:42:51.0000] <SamB>
yeah, onload should probably not bubble ...

[15:42:58.0000] <Hixie>
i'm just objecting to the idea that we should blindly make all cases bubble

[15:43:15.0000] <SamB>
Hixie: yeah, of course not blindly

[15:43:17.0000] <Hixie>
remember, btw, that you can always get the bubbling behaviour using capturing handlers

[15:43:19.0000] <slightlyoff>
we implemented delegation in Dojo for many of the common event types (transparently to the users) to prevent us from incurring the (pretty bad) costs of having to thunk through the DOM everywhere vs. add a node to a filter list

[15:46:41.0000] <slightlyoff>
I'd need to look at which events are captureable in which browsers. I think there's some legacy baggage I'm carrying around in my head which might no longer be valid

[15:53:54.0000] <Hixie>
all events can always be captured

[15:54:16.0000] <smaug____>
There are cases when non-bubbling is exactly what you want. mouseenter/leave

[15:54:28.0000] <Hixie>
yeah, those are a good example too

[15:54:58.0000] <zewt>
but capturing events has a different event order; for delegation i usually want the delegate event listener to happen in the bubble phase, not capture

[15:55:47.0000] <Hixie>
you could always add a capture handler that cancels the event and redispatches it with bubbling enabled :-)

[15:56:08.0000] <zewt>
i think i basically never, ever want any event to not be bubbling; that's something that should be decided by the person listening, not the person dispatching (if I'm a listener and I want the behavior of a non-bubbling event, I'll just check the event phase)

[15:56:20.0000] <zewt>
that's far worse :)

[15:56:55.0000] <smaug____>
zewt: mouseenter/leave don't make sense if they bubble

[15:58:59.0000] <zewt>
not sure that mouseenter/leave make sense at all

[16:01:11.0000] <zewt>
seem like a lot of complexity just to save having to say if(e.eventPhase == e.BUBBLING_PHASE) return;

[16:01:38.0000] <Hixie>
the difference between nothing at all, and something at all, is significant, imho.

[16:02:09.0000] <Hixie>
onload="if (e.target == window) start()" vs onload="start()"

[16:02:24.0000] <Dashiva>
And 99% of the time mouseenter/leave is exactly what you want

[16:02:25.0000] <zewt>
the difference between all events having the same dispatch semantics, and some bubbling and some not, is also significant

[16:03:08.0000] <smaug____>
zewt: if(e.eventPhase == e.BUBBLING_PHASE) return; isn't enough

[16:03:11.0000] <zewt>
too late to fix it now, but it should have been a flag on addEventListener

[16:03:46.0000] <zewt>
smaug____: was trying to think if there are differences, but none came to mind

[16:04:05.0000] <zewt>
(performance, maybe)

[16:04:12.0000] <Hixie>
zewt: yeah i'm not saying i would have designed it this way from the start, certainly

[16:04:15.0000] <zewt>
(but you're still going through capture phase)

[16:07:25.0000] <smaug____>
if you move mouse from being on top of subtree A to be on top of subtree B, all the elements in subtree A get a mouseleave and in B a mouseenter. But you'd get only one mouseout/mouseover

[16:10:28.0000] <MikeSmith>
Hixie: no indication of timeouts in the bugzilla server logs

[16:10:53.0000] <MikeSmith>
and nobody else reporting anything as far as I know

[16:21:51.0000] <Hixie>
MikeSmith: odd

[16:21:57.0000] <Hixie>
MikeSmith: might just be a Chrome dev issue

[16:22:22.0000] <Hixie>
MikeSmith: i just get it intermittently

[16:23:29.0000] <MikeSmith>
ok

[16:36:34.0000] <TabAtkins>
zewt: If you don't think mouseenter/leave make sense, then I'm not sure you've ever tried to do anything robust with mouseover/out.

[16:37:36.0000] <TabAtkins>
Ah, reading further, yeah, you've probably never done anything with it.  There are several complicated edge-cases to handle. It's *way* more than just worrying about doubling.

[16:37:43.0000] <TabAtkins>
bubbling, rather.

[16:37:58.0000] <TabAtkins>
Mousing over a child fires mouseout on your element, for example.

[16:38:22.0000] <SamB>
that's an ... interesting choice ...

[16:38:24.0000] <TabAtkins>
It's possible to have a mouseover without a corresponding mouseout, and vice versa.

[16:38:35.0000] <zewt>
the discussion was about bubbling, not about any of that

[16:38:37.0000] <TabAtkins>
SamB: It makes sense *for the chosen semantics of mouseover/out*.

[16:38:46.0000] <TabAtkins>
But those semantics don't match what people want most of the time.

[16:39:09.0000] <SamB>
yeah, that's why I said interesting and not braindead

[16:39:15.0000] <zewt>
and I was only talking about the difference between a non-bubbling event and just checking the event phase

[16:39:48.0000] <TabAtkins>
zewt: Ah, ok.  Yeah, a bubbling mouseenter would make sense, since you can check whether you're getting it for the element you want or not.

[16:39:49.0000] <SamB>
so, presumably none of these four make sense bubbling?

[16:40:16.0000] <zewt>
every event makes sense bubbling (eg. delegation)

[16:40:22.0000] <SamB>
oh, but the non-pairing doesn't really sound like a good idea

[16:40:51.0000] <zewt>
(it could use a more concise way to check it, of course--these old DOM APIs aren't famous for being brief)

[16:41:01.0000] <SamB>
hmm, well, if you just want to have one listener that feeds the events into a different API, sure

[16:41:57.0000] <SamB>
however for your plain old onfoo= ...

[16:44:58.0000] <zewt>
i doubt any change would make sense today (we're already stuck with non-bubbling events) so i'm not really suggesting a change, but one approach would be for "non-bubbling" events to really mean event handlers (not listeners) ignore the event when in the bubble phase

[16:45:16.0000] <TabAtkins>
Now *that* sounds really reasonable.

[16:46:58.0000] <Hixie>
personally i'm pretty sure if i was designing this from scratch the entire approach would be quite different :-)

[16:47:04.0000] <Hixie>
maybe more based on promises or something

[16:48:44.0000] <TabAtkins>
Promises aren't suitable for repeating events, but something *like* promises is.  I drew up some initial thoughts on the matter a while ago <http://www.xanthir.com/b4PV0>, and something like that should either pop out of Streams or show up independently soon enough.

[16:57:02.0000] <Hixie>
mounir: i usually take patches and complaints of lacks of a spec as the firmest indication of interest short of shipping. :-)

[16:58:40.0000] <a-ja>
TabAtkins: ping


2014-04-10
[17:08:46.0000] <TabAtkins>
a-ja: pong

[17:23:49.0000] <TabAtkins>
a-ja: ;_;

[17:26:35.0000] <a-ja>
TabAtkins: sorry....back now

[17:27:10.0000] <a-ja>
TabAtkins: an observation re counter-styles

[17:28:30.0000] <a-ja>
TabAtkins: predefined disclosure close arrow....shouldn't there be rtl and ltr versions?

[17:29:36.0000] <TabAtkins>
Yes, there should be.

[17:29:49.0000] <TabAtkins>
I've had an open issue on that for a while, and haven't been sure how I want to handle it.

[17:30:35.0000] <a-ja>
TabAtkins: thought it a good time to mention it....since there's patches in progress

[17:33:28.0000] <a-ja>
dependancy on dir() ?

[17:34:24.0000] <TabAtkins>
Yeah, probably.

[17:34:49.0000] <a-ja>
perhaps in L2? dunno about timing

[17:35:19.0000] <TabAtkins>
Either dir(), or a hypothetical "text as <image>" function + image() function with ltr/rtl keywords.

[17:35:53.0000] <TabAtkins>
The Counter Styles spec is still hovering in LC right now (like 3 months after the LC period ended) as people are implementing and finding bugs and necessary clarifications. So I can make the change now.

[17:37:02.0000] <a-ja>
TabAtkins: url for issue bug?

[17:37:27.0000] <TabAtkins>
Doubt I have one, but I've recorded it for now in the list of bugs I'm trying to burn down at https://github.com/tabatkins/specs/issues/29

[17:44:13.0000] <TabAtkins>
a-ja: Out for the night, feel free to mention me here in chat or in email or in the github issue or anywhere else you think I might see it. ^_^

[17:44:49.0000] <a-ja>
TabAtkins: different topic....colors4.  an example of how to use named hues would probably be helpful.  is it hsl(namedhue,?,?) or ?

[17:45:26.0000] <a-ja>
TabAtkins: good night....take care

[22:21:46.0000] <zcorpan>
<http://www.w3.org/mid/CAPJYB1gDsLK5Oppjges-uTenQWHOuZy+GEAg=8sTy4A7iVXTTA⊙mgc>

[22:27:57.0000] <zcorpan>
/me notices http://w3c-test.org/resources.whatwg.org/ is gone

[22:28:33.0000] <zcorpan>
i guess i don't need https anymore

[22:31:56.0000] <zcorpan>
Hixie: for onload you'd need to check target == document :-)

[23:55:10.0000] <heycam>
Hixie, yeah, I'm behind on webidl editing. please point me to the relevant bug and I'll prioritise it.

[02:21:30.0000] <aleray>
hi, how would you markup the editor note of a paper

[02:21:32.0000] <aleray>
?

[02:23:32.0000] <aleray>
eg. http://dpaste.com/1775599/

[02:27:03.0000] <webben>
aleray: http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#the-header-element possibly

[02:37:01.0000] <aleray>
webben, thanks

[02:47:50.0000] <annevk_>
JakeA: Hixie: if we are going to standardize requestautocomplete, should we at least use a promise?

[03:50:30.0000] <JakeA>
annevk_: the Chrome impl is getting promises. I posted a link to the ticket here earlier

[04:30:08.0000] <annevk>
JakeA: k

[04:32:05.0000] <JakeA>
annevk: https://code.google.com/p/chromium/issues/detail?id=343630#c10

[04:55:35.0000] <annevk>
JakeA: so you removed non-GET methods from the cache API, but did you keep HEAD working?

[04:56:32.0000] <JakeA>
annevk: I need to add something for HEAD. It's only used in the matching, not the storage I guess

[04:57:18.0000] <annevk>
JakeA: so there's the thing of doing a HEAD request and then updating the headers of a stored entry, but I'm not sure if we should support that

[05:00:27.0000] <JakeA>
annevk: yeah, more than happy to drop that. If we allow storing other methods we can do that then

[05:12:16.0000] <Ms2ger>
/me pokes foolip 

[05:32:23.0000] <jgraham>
So I wonder what UK/London events would have participants also interested in doing Test The Web Forward. So far I didn't think of anything better than full frontal, which has the disadvantages of being in Brighton in November (just after TPAC I think), but the advantage of attrating the kind of people I would love to see at a TTWF event

[05:34:15.0000] <Ms2ger>
Something happens in Brighton?

[05:36:58.0000] <jgraham>
I'm told lots of things happen in Brighton

[05:37:24.0000] <jgraham>
(the main problem with Brighton is "can't use the Mozilla space conveniently")

[05:37:56.0000] <jgraham>
remysharp: Any ideas? :)

[06:00:16.0000] <annevk>
jgraham: we could just try to host one on a Saturday

[06:03:44.0000] <jgraham>
annevk: Sure

[06:05:07.0000] <jgraham>
annevk: My theory is that the participants they have had so far have been relatively untargeted and so we have been relatively ineffective at getting either great tests or retaining people

[06:06:20.0000] <jgraham>
That might not be the right theory, but I wanted to test it by jumping on the coattails of a conference that attracts people who are already working in web development rather than mainly attracting students (which I think has been the case with TestTWF to date)

[06:07:18.0000] <jgraham>
The idea being that getting those people the message that when they find browser bugs there is a simple way for then to contribute to getting the bugs fixed is good for the industry as a whole

[06:32:50.0000] <annevk>
jgraham: could ping Jeremy Keith too

[06:33:02.0000] <annevk>
jgraham: and others

[08:02:15.0000] <arunranga>
annevk, ping

[08:02:30.0000] <annevk>
arunranga: http://www.nohello.com/

[08:04:11.0000] <arunranga>
annevk, w.r.t. https://www.w3.org/Bugs/Public/show_bug.cgi?id=25302 I’d like to round up the loose ends in neutered Blobs. I think we can say that structured clones fail on a neutered Blob.

[08:04:39.0000] <arunranga>
annevk, this will ensure that pre-neutering asynchronous operations on a Blob can take a structured clone.

[08:04:59.0000] <arunranga>
annevk, even if there’s a mid-operation neutering.

[08:05:37.0000] <arunranga>
annevk, if we do this I this, I think you’ll have the pieces you need in affiliated specs, but don’t need a keepalive list of objects.

[08:07:22.0000] <annevk>
yeah, I forgot how we already got around the whole being neutered thing using structured clones

[08:07:25.0000] <arunranga>
annevk, sorry about preemptive pinging. I should have known better.

[08:08:08.0000] <arunranga>
annevk, so I think if we explicitly say that Blobs that are CLOSED can be cloned, we’re ok. That way, operations on clones while still OPENED will work as intended in asynchronous settings.

[08:08:25.0000] <arunranga>
s/can be cloned/cannot be cloned.

[08:09:04.0000] <annevk>
yes, structured cloning should fail or some such

[08:09:46.0000] <annevk>
still unclear to me what happens to closed blobs, does reading from them result in empty sequences?

[08:10:00.0000] <arunranga>
annevk, but that still leaves the “status check” about how exactly to determine if a Blob is closed. I think there’s merit to the 0 byte approach, but zewt asks if there are any use cases in script for knowing if a Blob is neutered.

[08:10:10.0000] <arunranga>
annevk, yes, I like the 0 byte approach

[08:10:28.0000] <arunranga>
annevk, I’d like this to be what happens to neutered Blobs

[08:10:50.0000] <annevk>
it might be a bit cumbersome to write the FormData serialization algorithm if some blobs end up being empty and cannot be cloned whereas others have to be cloned

[08:10:54.0000] <annevk>
but maybe it's okay

[08:11:07.0000] <arunranga>
I actually don’t think it will be cumbersome.

[08:11:39.0000] <arunranga>
Why would a developer actually need a 0 byte Blob, for example? It seems rare that a non-neutered Blob will be 0 bytes

[08:12:08.0000] <arunranga>
of course, you could do var blob = new Blob() but that alone isn’t terribly useful.

[08:14:59.0000] <annevk>
I mean writing the serialization algorithm of FormData in the specification

[08:15:18.0000] <annevk>
If neutered blobs cannot be cloned you end up with special code paths

[08:15:24.0000] <annevk>
But it should not be too bad I suppose

[08:15:43.0000] <arunranga>
Hmmm

[08:16:22.0000] <SamB>
hmm, what was that site with the "You had a problem" quotes?

[08:17:02.0000] <SamB>
or however that's phrased

[08:46:46.0000] <zewt>
i very strongly dislike the 0-byte thing; it's a bad, hacky API, it breaks with actual 0-byte files, it sacrifices the blob size being immutable, it forces developers to cache the size if they want it after closing (progress meters, etc)

[08:47:40.0000] <zewt>
you'll easily get 0-byte blobs, as soon as you use <input type=file> and a user opens an empty file

[08:47:41.0000] <SamB>
aren't there, like, negative numbers that could be used if magic numbers are needed?

[08:48:58.0000] <zewt>
if we want to expose the closedness of a blob, add a property.  i don't see why we would use the size property for that at all

[08:53:26.0000] <annevk>
why would you want to cache the size of the original object?

[08:53:52.0000] <annevk>
you just neutered it

[08:55:48.0000] <zewt>
you might still be using the size, eg. setTimeout(function() { progress.innerText = (totalBytesSent*100 / blob.size) + "%"; }, 500)

[08:56:15.0000] <zewt>
now suddenly that shows 0 or NaN% or whatever

[08:56:40.0000] <zewt>
i gave a similar example on the bug

[09:03:46.0000] <annevk>
/me shrugs

[09:05:33.0000] <zewt>
...

[09:05:58.0000] <zewt>
it's a bizarre, hacky, unexpected API with no redeeming values. hopefully we can do better than "shrugs"

[09:09:17.0000] <jgraham>
I think zewt has a point here. I'm not sure what problem this is trying to solve

[09:11:55.0000] <arunranga>
zewt, jgraham: I suppose if we specify that ALL operations on neutered Blob objects fail at the API level, then maybe we don’t need to expose this, even as a property.

[09:12:14.0000] <zewt>
what do you mean "fail at the API level"?

[09:12:24.0000] <zewt>
i think that sync APIs should always *not* fail

[09:12:44.0000] <arunranga>
zewt, I mean: FileReader.readAsXxx should fail and report an error asynchronously

[09:12:52.0000] <zewt>
for reasons I mentioned earlier (minimizes the surface area of the "closed blob" feature, fewer error cases for developers to have to handle, etc)

[09:12:56.0000] <zewt>
ah, OK

[09:13:14.0000] <arunranga>
zewt, we’ll have to reason through what other things fail.

[09:14:09.0000] <arunranga>
But when you say sync APIs should always *not* fail, do you mean, not throw?

[09:14:28.0000] <arunranga>
So FileReaderSync probaby has to throw in this case

[09:14:59.0000] <arunranga>
Affiliated APIs, including URL.createObjectURL and URL.createFor, won’t “fail” but will generate a URL that results in a network error.

[09:15:12.0000] <zewt>
sync versions of async APIs are an exception

[09:15:44.0000] <zewt>
maybe it's more precise to say that the only thing that should fail is attempts to access the data inside the blob, and it should fail in the same way that the API normally fails

[09:16:14.0000] <arunranga>
zewt, ok, I’m coming round to this.

[09:16:25.0000] <zewt>
sync fetch APIs fail by throwing an exception, so that's OK--that's the error handling the user has anyway for using that API

[09:16:47.0000] <Hixie>
annevk: not clear to me how promises would actually work for rAc

[09:17:11.0000] <zewt>
(eg. FileReaderSync() against a File that the user has deleted)

[09:19:08.0000] <Hixie>
annevk: and you still have to fire the input/change/invalid events, so it's not like it takes you away from events.

[09:19:17.0000] <annevk>
Hixie: yeah, didn't realize that

[09:23:10.0000] <arunranga>
zewt, I guess that leaves .slice(), which you think should do what it does normally with byte sequences, but simply neuter the output.

[09:25:33.0000] <zewt>
arunranga: say you have a black-box API readZipFileFooter(blob), which slices the end of the blob and reads it ... if I pass in a closed blob, it'll cause an error along a typical code path (during the read), instead of throwing an exception in slice(), which that function is probably much less likely to handle

[09:26:51.0000] <arunranga>
zewt, yup, makes perfect sense to me. Can’t argue with that.

[09:27:18.0000] <zewt>
an API might parse out a ZIP into a list of filename: (start, size) items, and let you say zip.openFile(filename), which does { var info = data[filename]; return this.blob.slice(info.start, info.end); }, which also makes sense to just propagate the closed-ness instead of failing

[09:28:33.0000] <arunranga>
zewt, but I guess this does mean that you can access properties of closed Blobs such as size, which the 0 byte approach addressed but perhaps hackishly.

[09:29:12.0000] <arunranga>
so I’m determining whether this is a Bad Thing.

[09:29:18.0000] <zewt>
but i'm saying that the size should remain unchanged

[09:30:05.0000] <zewt>
(and other similar properties, like File's .type)

[09:30:25.0000] <arunranga>
I see what you’re saying. I’m trying to determine if that results in anything bad/inconsistent happening.

[09:30:47.0000] <arunranga>
For instance, a developer might do a if(file.size != 0) test before a read operation

[09:31:01.0000] <arunranga>
Which would fail anyway on a closed Blob.

[09:31:13.0000] <zewt>
what would be the purpose of that test?

[09:31:36.0000] <arunranga>
Well, the purpose of that test would be to see if you’ve got a readable file with bytes to be read

[09:31:50.0000] <arunranga>
But, the Blob is in fact closed. The bytes cannot be read.

[09:32:03.0000] <zewt>
then that test would be wrong; the read might fail anyway, such as if it's a File pointing to a userspace file that the user has deleted

[09:32:53.0000] <arunranga>
zewt, right; but that’s because of the snapshot condition

[09:33:19.0000] <arunranga>
Which is a failure that’s not programmatically determinable from within the sandbox.

[09:33:35.0000] <arunranga>
But a check for neutered objects might need to be.

[09:33:42.0000] <zewt>
but if(file.size != 0) is not a test for whether you can read from the file

[09:34:09.0000] <arunranga>
zewt, yes, it’s not a reliable test.

[09:34:09.0000] <zewt>
(by the way, since this ended up being a different thing than "neutered", we should probably not call it that)

[09:34:40.0000] <arunranga>
zewt, well, even with Blob.close() we’re going to prohibit structured cloning I think

[09:34:50.0000] <zewt>
i don't think we should do that, either

[09:35:03.0000] <annevk>
zewt: most APIs when you neuter them their attributes will return some kind of initial value

[09:35:09.0000] <annevk>
zewt: e.g. ArrayBuffer

[09:36:04.0000] <arunranga>
zewt, I think it would help with FormData (and your proposal) if we can’t structured clone on a .close()

[09:36:21.0000] <zewt>
arunranga: how?

[09:37:11.0000] <zewt>
seems like it makes it easier, actually

[09:37:21.0000] <zewt>
(if you can)

[09:38:44.0000] <arunranga>
Ah wait. You’re right. In the case of FormData, the structured clone won’t create a normal point of failure upon close, but the read will.

[09:38:52.0000] <zewt>
eg. you structured clone the Blob synchronously at the start; if the blob was closed, you don't fail there, you fail later when you try to use the clone (in the same spec code path where you handle other read errors)

[09:39:17.0000] <arunranga>
I guess this does reduce the “points of failure.”

[09:40:06.0000] <arunranga>
annevk, would it be ok if neutering a blob doesn’t affect its ability to be cloned?

[09:40:54.0000] <zewt>
it seems nicer for postMessage, etc. too: if I want to post a FileList containing 100 files and I've closed one or two of them, just let me do it without making a new FileList with the closed blobs removed

[09:40:59.0000] <annevk>
arunranga: per the HTML spec it currently throws

[09:41:18.0000] <annevk>
arunranga: I don't really care

[09:41:53.0000] <zewt>
i was planning on filing a bug on HTML about structured clone, but only after the stuff inside file api itself was decided

[09:41:58.0000] <annevk>
arunranga: I think it would make sense to expose isClosed

[09:42:54.0000] <arunranga>
zewt, your bug would be to allow structured cloning of neutered objects?

[09:42:58.0000] <zewt>
yeah

[09:43:16.0000] <arunranga>
zewt, based on the same “limit the points of failure” reasoning, or some other reasoning?

[09:44:22.0000] <zewt>
well, if the effect of blob.close() is defined as something like "act as though the underlying file was deleted", then disallowing cloning doesn't make sense--structured clone doesn't throw if a File's file is deleted, for example

[09:44:46.0000] <annevk>
arunranga: why is it defined as neutuered and not as closed?

[09:45:36.0000] <zewt>
arunranga: oh, my bug would probably be specifically for closed Blobs (with a side note of "i think this should apply to neutered objects like ArrayBuffer as well")

[09:45:37.0000] <arunranga>
annevk: that should change, I think.

[09:45:52.0000] <arunranga>
annevk: I think terminology is misleading.

[09:46:01.0000] <arunranga>
annevk, though they are similar.

[09:46:22.0000] <annevk>
arunranga: not really, neutering happens as the result of a transfer

[09:47:18.0000] <zewt>
transfer is a user of neutering, neutering isn't tied to transfer (but that's a whole long separate discussion that I've given up on)

[09:47:22.0000] <arunranga>
annevk, well, I’m going to kill the word ‘neuter’

[09:48:24.0000] <arunranga>
(it should be used consistently to mean one thing. By re-using it in FileAPI, I’ve created a confusion bug)

[09:49:03.0000] <zewt>
(i thought that had already been changed, but I guess I thought that since it was changed in HTML, which says "disabled through the close() method")

[09:50:09.0000] <arunranga>
well if annevk doesn’t really care about whether .close() affects cloning, it may as well not affect cloning, and rather, only affect reading.

[09:50:46.0000] <arunranga>
I think FileAPI should position success and failure as reading bytes success and failure anyway. I agree with the bugs that push in this direction.

[10:29:13.0000] <Hixie>
heycam|away: why are trailing commas in enum descriptions not valid?

[11:54:44.0000] <Domenic_>
bahaha http://w3cmemes.tumblr.com/post/82309160313/philosoraptor-couldnt-sleep-last-night-so-she

[11:57:44.0000] <Hixie>
for whomever posted http://w3cmemes.tumblr.com/image/82219740533 - i present to you http://ln.hixie.ch/?start=1056847759&count=1

[12:00:28.0000] <arunranga>
Domenic_ I’ll soon expunge “neutered” from the FileAPI spec. They’ll simply be closed.

[12:00:33.0000] <arunranga>
:-)

[12:00:39.0000] <Domenic_>
seems good :)

[12:20:06.0000] <arunranga>
Domenic_, is AbortableProgressPromise something that we should expect to land as a real thing? I’m using it in spec, but handwaving a bit.

[12:20:16.0000] <Domenic_>
arunranga: no, definitely not

[12:20:53.0000] <Domenic_>
arunranga: Progress is almost certainly dead. Cancellation/abortion is probably going to happen at some point though so collecting spec use cases would be helpful. Still early days.

[12:20:58.0000] <arunranga>
Domenic_, uh-oh. Fx has a sandboxed version of FileSystem API hat uses something a lot like it :-)

[12:21:22.0000] <arunranga>
Domenic_, to be honest, I don’t hate AbortableProgressPromise.

[12:21:30.0000] <Domenic_>
Progress generally means you should be using streams :P. And yes, I'm aware we need to pick up the pace there.

[12:21:32.0000] <arunranga>
Domenic_, but I just want something that addresses the use case.

[12:21:40.0000] <Domenic_>
Actually both of those are better addressed by streams...

[12:21:54.0000] <Domenic_>
Promises should be for one-and-done, non-interruptible, atomic-ish operations

[12:22:12.0000] <darobin>
that's what she said

[12:22:39.0000] <TabAtkins>
Promises are definitely abortable if you want them to be, though - you just have to extract and vend the reject function yourself.

[12:22:52.0000] <TabAtkins>
Exposing them primitively for cases that could use them makes sense to me.

[12:23:41.0000] <Domenic_>
that's true. That's a good way to look at it.

[12:23:51.0000] <TabAtkins>
(You can convert any normal promise into an abortable one by wrapping it in a promise of your own, passing accept and reject to the normal promise and leaking the reject outside of your promise as well.)

[12:23:56.0000] <arunranga>
/me gives darobin scowly smile

[12:24:19.0000] <TabAtkins>
I'm much less convinced about progress, though.

[12:24:20.0000] <Domenic_>
Abortion usually implies that it has some impact back to the promise creator though. It's not only a capability-vending, but always a backward communication channel

[12:24:44.0000] <TabAtkins>
Domenic_: Yeah, true, so the op usually does more than *just* reject.

[12:24:45.0000] <Domenic_>
We are prototyping an interesting alternative to progress (viz. estimated time of arrival) in user-space. So far it composes much better. But it's very very early days for that.

[12:24:56.0000] <Domenic_>
s/always/also/

[12:26:51.0000] <arunranga>
TabAtkins, I’d like to use something like AbortableProgresPromise for an operation like FileHandleWritable in http://w3c.github.io/filesystem-api/Overview.html#the-directory-interface

[12:26:59.0000] <arunranga>
To write some bytes, and then abort.

[12:27:17.0000] <TabAtkins>
Right, I'm not saying that progress monitoring is a bad thing, I'm just not convinced it's best modeled as a Promise extension.

[12:27:36.0000] <TabAtkins>
I dithered over this a bit in my EventStream proposal.

[12:27:53.0000] <Domenic_>
arunranga: "write some bytes then abort" sounds exactly like streams...

[12:28:02.0000] <Domenic_>
arunranga: what is the timeline on this FS API?

[12:28:37.0000] <arunranga>
Domenic_, yes, you’re right; it’s streamlike, but streams aren’t forthcoming. We’re left with Blobs and whatnot.

[12:28:47.0000] <Domenic_>
arunranga: who says streams aren't forthcoming!?

[12:29:02.0000] <arunranga>
Domenic_, well, the timeline, as of today, is “a more specifc draft will land in two-ish weeks.”

[12:29:19.0000] <arunranga>
Domenic_, huzzah! Tell me what I don’t know. Where have Streams been my whole life?

[12:31:01.0000] <Domenic_>
arunranga: https://github.com/whatwg/streams !

[12:31:09.0000] <Domenic_>
we're closing in on something pretty close to final

[12:31:19.0000] <Domenic_>
TCP and UDP sockets spec is based on them

[12:31:29.0000] <Domenic_>
https://rawgithub.com/ClaesNilsson/raw-sockets/gh-pages/index.html

[12:31:52.0000] <Hixie>
/me shudders at the idea of allowing the web access to raw UDP or TCP

[12:32:29.0000] <Domenic_>
arunranga: if you give me deadlines I can push myself to meet them. right now what I have is "everyone wants this yesterday."

[12:33:36.0000] <arunranga>
Heh, well… sounds like you’re going to land this as a WHATWG draft soon-ish. If you land in two weeks, I can bash out details left in FileSystem.

[12:33:48.0000] <Domenic_>
two weeks!! Can do.

[12:34:18.0000] <Domenic_>
important question: do those two weeks include three weekends, or two weekends?

[12:34:28.0000] <Domenic_>
(i.e., is it Monday, or is it Friday)

[12:34:31.0000] <arunranga>
If that’s unreasonable, push back :-) There isn’t really too much “fall off the cliff” pressure about FileSystem, TBH. It’s already in Firefox, but sandboxed (and uses constructs that you disapprove of based on the above ^^). And, user agents are exactly beating down our door with support.

[12:34:47.0000] <Domenic_>
nah two weeks sounds like a perfect incentive

[12:34:50.0000] <arunranga>
I mean, are not exactly.

[12:35:03.0000] <Domenic_>
tyoshino ^

[12:35:14.0000] <arunranga>
So, take two weekends, if you aren’t slammed? Three if you are?

[12:35:22.0000] <arunranga>
I’m not totally blocked on you.

[12:35:25.0000] <arunranga>
I can tweak other things.

[12:35:27.0000] <Domenic_>
Sounds good :)

[12:35:35.0000] <arunranga>
But should also fix my FileAPI bugs *mumble mumble*

[12:36:07.0000] <Domenic_>
I want streams to succeed and FS is like use case #1 for streams so I am very motivated to make them work for you.

[12:36:56.0000] <darobin>
/me looks at arunranga sheepishly

[12:37:15.0000] <arunranga>
Domenic_ oooh synergy!

[12:38:28.0000] <arunranga>
Domenic_ well, we’ll have to unleash sicking on you :-) He’s got strong opinions about Streams vs. AbortableProgressPromise, etc.

[12:38:35.0000] <arunranga>
Also, the use cases are legion.

[12:47:28.0000] <Domenic_>
arunranga: haha great. I talked streams with sicking recently at the TAG meeting but we didn't talk about vs. AbortableProgressPromise in particular.

[13:06:48.0000] <tyoshino>
o

[13:06:52.0000] <Ms2ger>
p

[13:09:18.0000] <sicking>
Domenic_: streams and AbortableProgressPromise actually has quite different use cases. But we should definitely add streams to filesystem

[13:10:01.0000] <sicking>
Domenic_: filesystem needs both async-generator "object Streams", as well as IO streams

[13:10:38.0000] <Domenic_>
sicking: object streams being for e.g. directory listings?

[13:10:43.0000] <sicking>
Domenic_: yup

[13:10:53.0000] <Domenic_>
yeah interestingly even node.js doesn't have those

[13:10:58.0000] <sicking>
iirc it's only needed for directory listings

[13:11:13.0000] <tyoshino>
sg

[13:11:22.0000] <sicking>
Domenic_: oh! node.js just returns an array with all the names?

[13:11:30.0000] <Domenic_>
sicking: yeah, it's kind of embarassing

[13:12:01.0000] <sicking>
hehe

[13:12:08.0000] <sicking>
Domenic_: hopefully we can do better :)

[13:12:26.0000] <sicking>
Domenic_: and then have node.js implement our filesystem

[13:12:39.0000] <Domenic_>
yesss

[13:12:50.0000] <tyoshino>
http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback

[13:14:10.0000] <sicking>
Domenic_: and have filesystem https://www.youtube.com/watch?v=2BRXmgcBHBM#t=75

[13:14:24.0000] <sicking>
/me hopes he got the right quote.

[13:14:27.0000] <sicking>
/me is on mute


2014-04-11
[18:40:05.0000] <TabAtkins>
a-ja: I just looked at Counter Styles, and discovered that I'd already taken directionality into account.

[18:42:51.0000] <a-ja>
TabAtkins: k...will have a re-read.

[18:43:02.0000] <TabAtkins>
I do so in prose, rather than in code.

[18:44:57.0000] <a-ja>
TabAtkins: verticality handled, too? i.e. tb and bt ?

[18:45:20.0000] <TabAtkins>
I just say that if it's directional, it must correspond to the writing mode of the element.

[18:45:26.0000] <TabAtkins>
And expect that, via magic, it'll work.

[18:47:09.0000] <a-ja>
TabAtkins: had a look at the moz patch....looks like it handles directionality with some magic hand-wavy code, rather than in ua stylesheet.  will have to test overriding styles once it's ready for testing

[18:48:46.0000] <Domenic_>
ugh DOM forked again. https://www.w3.org/Bugs/Public/show_bug.cgi?id=25021

[21:40:14.0000] <SamB>
/me likes this guy's picture: https://twitter.com/gimsieke

[01:38:28.0000] <annevk>
darobin: so how is adding Attr.prototype.ownerElement preserving a subset?

[01:39:09.0000] <annevk>
seems like that statement was full of shit

[01:52:43.0000] <Ms2ger>
I'm surprised.

[03:34:48.0000] <annevk>
Just read a bunch of forum topics on indexes vs indices

[03:35:17.0000] <annevk>
To fix a bug in shift_jis's encoder

[03:46:04.0000] <annevk>
Anyone a good short name for "HTML decimal numeric character reference"

[03:47:46.0000] <SimonSapin>
annevk: if they context implies "some way to deal with code points", maybe just "html"?

[03:48:22.0000] <SimonSapin>
as in "the html error handling" vs. "the strict error handling"

[03:49:34.0000] <annevk>
HTML error mode*

[03:56:59.0000] <annevk>
Bit torn on whether I should adopt the terms "character" and "Unicode character"

[03:59:09.0000] <SimonSapin>
Sounds bad to use both. If they’re the same, pick one. If they’re not, the difference might be too subtle (as in, readers maybe will not notice they’re not the same)

[04:01:08.0000] <annevk>
HTML uses those terms meaning code point and Unicode scalar value

[04:30:47.0000] <SimonSapin>
well, my opinion above still applies

[04:46:30.0000] <JakeA>
annevk: hey

[04:46:34.0000] <JakeA>
annevk: yt?

[04:46:37.0000] <annevk>
JakeA: yup

[04:46:40.0000] <JakeA>
annevk: I'm typing a question

[04:46:46.0000] <JakeA>
annevk: Going to type it now

[04:46:50.0000] <JakeA>
/me types

[04:47:14.0000] <JakeA>
annevk: re .add on caches, do you see it resolving before everything downloads?

[04:47:25.0000] <annevk>
SimonSapin: it seems worse to have different terms

[04:47:50.0000] <annevk>
JakeA: i was just wondering whether you'd report success/failure

[04:48:01.0000] <annevk>
JakeA: seems like you wouldn't necessarily expose the response objects

[04:48:03.0000] <JakeA>
(someone just hello'd me, so I thought I'd pass on the pain)

[04:48:23.0000] <annevk>
heh

[04:49:10.0000] <JakeA>
annevk: Yeah, that makes sense. Returning responses felt like something to return, but I can't think of a good use of it.

[04:49:57.0000] <JakeA>
annevk: actually, you're right, since .add(fiveItems) can result in less-than 5 items being added, we shouldn't resolve with responses

[04:50:06.0000] <JakeA>
Will update the ticket

[04:51:42.0000] <annevk>
JakeA: given that, .add(...items) makes sense...

[04:52:19.0000] <annevk>
JakeA: it seems the preferred style is arity

[04:53:26.0000] <JakeA>
annevk: unless the input should map to output, like Promise.all

[04:58:16.0000] <annevk>
yeah

[05:20:27.0000] <annevk>
hsivonen: do you think the operations for arithmetic in http://encoding.spec.whatwg.org/#terminology are sufficiently defined?

[05:21:31.0000] <annevk>
hsivonen: also, if you could provide guidance on how algorithms could be rewritten as you asked for in https://www.w3.org/Bugs/Public/show_bug.cgi?id=24198 that'd be appreciated

[07:36:23.0000] <gsnedders>
SimonSapin: Stop making statements that I want to +1, because that's unproductive!

[07:37:09.0000] <SimonSapin>
gsnedders: about character vs. Unicode character?

[07:37:13.0000] <gsnedders>
Yeah

[07:37:52.0000] <SimonSapin>
well that statement itself was not very productive since I don’t have a better suggestion

[07:37:59.0000] <gsnedders>
:)

[07:38:15.0000] <gsnedders>
/me votes for just using code point and Unicode scalar value

[07:39:53.0000] <SimonSapin>
but Unicode scalar value is so bleh

[07:41:54.0000] <jgraham>
Why "scalar"? Is there also a "Unicode vector value"?

[07:42:26.0000] <SimonSapin>
who knows

[07:42:32.0000] <zcorpan>
Hixie: i wontfixed your suggestion to rename source https://github.com/ResponsiveImagesCG/picture-element/issues/133

[07:42:42.0000] <SimonSapin>
http://www.unicode.org/glossary/#unicode_scalar_value

[07:42:47.0000] <gsnedders>
No, but it makes us just use the underlying terminology, which seems easier than people having to know that Unicode character == Unicode scalar value and then the definition of that.

[07:44:03.0000] <SimonSapin>
maybe omit the "Unicode"? http://www.unicode.org/glossary/#scalar_value

[07:44:35.0000] <SimonSapin>
(just like we omit it in "Unicode code point")

[07:46:43.0000] <SimonSapin>
but "scalar value" by itself has no indication it has anything to do with text

[07:55:21.0000] <gsnedders>
Yeah

[07:55:50.0000] <zcorpan>
call it "value"

[07:56:20.0000] <SimonSapin>
object, or node

[08:02:28.0000] <SimonSapin>
more seriously: annevk, how about "(Unicode) character" as an alias for "Unicode scalar value", and "(Unicode) code point" for itself?

[08:03:44.0000] <SimonSapin>
Hixie: same for HTML ^

[08:06:29.0000] <Ms2ger>
It's probably a good idea to make our specs match

[08:15:15.0000] <gsnedders>
SimonSapin: I dislike character because of its multitude of Unicode definitions

[08:18:58.0000] <dglazkov>
good morning, Whatwg!

[08:22:05.0000] <jcgregorio>
morning dglazkov!

[08:40:42.0000] <annevk>
SimonSapin: I went with scalar value an hour ago or so

[08:40:53.0000] <annevk>
SimonSapin: happy to rename once someone else sorts this out

[08:41:27.0000] <SimonSapin>
I’m not sure who you expect someone else to be

[08:44:10.0000] <annevk>
yup

[10:08:41.0000] <Hixie>
zcorpan: if you reuse <source>, then you're taking over the whole media section as well. there's no way i'm speccing this mistake.

[10:11:41.0000] <TabAtkins>
SamB: I've got the IE version of that guy's picture: https://twitter.com/tabatkins

[10:14:31.0000] <jgraham>
Hixie: That doesn't seem like a good way to deal with the situation. From the bug it didn't appear that you had established the critical difference between this instance of reusing an element name in multiple contexts and other instances of the same (including the existing reuse of <source>)

[10:19:09.0000] <TabAtkins>
Hixie: Yes - as far as I can tell (as I explained in the bug), this is no more troublesome than the existing reuse of <source> in <video> and <audio>.

[10:56:23.0000] <Hixie>
TabAtkins: <video> and <audio> are the same element, in the spec, essentially.

[10:56:37.0000] <Hixie>
TabAtkins: and <source> with <video> and <audio> is a huge pain even then

[10:56:48.0000] <Hixie>
TabAtkins: i'm willing to pay the cost of making that mistake, since i made it

[10:56:58.0000] <Hixie>
TabAtkins: i'm not willing to pay the cost of someone else making the same mistake even after i warned them not to

[11:18:53.0000] <SamB>
TabAtkins: hmm, I can't say I recognize that precise icon; it looks just a little too simple somehow

[11:20:42.0000] <SamB>
/me wonders what the significance of 앳켄스 탭 may be ... wonders why unifont borrowed hangul from such a heavy font

[11:25:23.0000] <SamB>
TabAtkins: also why did you make the text on your page xanthir.com invisible?

[11:25:28.0000] <SamB>
/me goes to open it in elinks

[11:27:50.0000] <SimonSapin>
Hixie: how is this a mistake / what is the cost?

[11:30:16.0000] <Hixie>
i've explained this multiple times over the past few years

[11:30:19.0000] <Hixie>
but basically:

[11:30:36.0000] <Hixie>
whenever your processing model involves multiple elements, it is exponentially more complicated to spec

[11:31:14.0000] <Hixie>
you have to handle mutations, shadow DOMs, non-atomic parsing, non-atomic scripted creation, etc

[11:31:31.0000] <Hixie>
and every time we've done this, we've ended up finding edge case errors for _years_ afterwards

[11:31:52.0000] <Hixie>
i mean, i'm literally _still_ dealing with obscure spec bugs around <source>

[11:32:10.0000] <Hixie>
race conditions, unexpected DOM states, etc

[11:32:43.0000] <Hixie>
but i already went through all this years ago, that's why i didn't spec <picture> in the first place, and i specced srcset="" instead

[11:32:49.0000] <Hixie>
i wrote long e-mails to the whatwg list explaining this

[11:33:07.0000] <Hixie>
at this point, if people want to keep ignoring my feedback on this, then that's fine, but at least don't make me pay the cost

[11:38:08.0000] <SimonSapin>
so the problem is not having the name "source" re-used, but having multiple elements for one (media) "unit"?

[11:38:55.0000] <hober>
there are two problems

[11:39:01.0000] <hober>
1) using multiple elements is a bad idea

[11:39:28.0000] <hober>
2) if you insist on using multiple elements, naming one of them "source" entangles your mistake with Hixie's prior mistake

[11:39:43.0000] <Hixie>
right

[11:40:06.0000] <Hixie>
so then we have to figure out the interactions of both in obscure ways

[11:40:45.0000] <Hixie>
if it wasn't a mistake, i'd have no problem reusing the same element name

[11:40:59.0000] <Hixie>
and i'd have no problem taking responsibility for speccing it

[11:41:12.0000] <Hixie>
(or even if it was a mistake, but i didn't know yet)

[11:48:51.0000] <SamB>
TabAtkins: also I think we do reverse the seasons on the other side of the equator, and I hear some places have only *two* seasons ...

[11:52:39.0000] <Hixie>
california has several seasons, but they're distributed geographically rather than chronologically...

[11:56:03.0000] <arunranga>
/me that’s called a Hixism ^^

[11:59:33.0000] <jgraham>
The flip side is that zcorpan (and others) did a lot of work to minimise the badness of the multiple elements, learning from the prior experience, and that people seem to have a strong preference for a multiple-element design

[12:01:09.0000] <Hixie>
that he had to do a lot of work is kind of the point

[12:01:53.0000] <Hixie>
anyway, i'm not saying this shouldn't be in the spec, especially if browsers implement it. i've already talked with zcorpan about how we're going to integrate it.

[12:02:17.0000] <hober>
is more than one browser going to implement it?

[12:02:18.0000] <Hixie>
basically, he's gonna own the parts that are affected by this, and they'll get merged in during publication

[12:02:34.0000] <TabAtkins>
SamB: The icon is the IE broken image icon.  (And it's fooled IE engineers before!)

[12:02:45.0000] <Hixie>
hober: i hope not, but people are claiming they've conned both mozilla and chrome into doing it (ahem)

[12:02:49.0000] <TabAtkins>
SamB: 앳켄스 탭 is my name in Hangul.

[12:02:52.0000] <SamB>
/me wonders if there couldn't be a framework to allow sanity AND multi-element stuff

[12:03:10.0000] <TabAtkins>
SamB: And finally, the text is invisible because the text-shadow si doing the rendering (to enable the animated blur effect).

[12:03:31.0000] <SamB>
TabAtkins: well I don't see it in Firefox 24 ...

[12:03:34.0000] <Hixie>
SamB: the problems are pretty deeply integrated into how the DOM works (and are only gonna get worse with things like Shadow DOM)

[12:04:35.0000] <TabAtkins>
SamB: Hm, I have both -moz-prefixed versions and unprefixed.

[12:05:05.0000] <SamB>
do you want me to look again and check for warnings?

[12:05:22.0000] <SamB>
okay, it's working now

[12:05:34.0000] <SamB>
oh, it disappeared again now

[12:11:34.0000] <Hixie>
TabAtkins: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25026

[12:38:29.0000] <Ms2ger>
TabAtkins, is this something we don't support unprefixed?

[13:09:27.0000] <TabAtkins>
Ms2ger: I dunno, you definitely support one or the other, and I have both.

[13:09:34.0000] <TabAtkins>
SamB: What do you mean?  What's happening?

[13:10:05.0000] <Ms2ger>
TabAtkins, I was wondering if I should ask you to remove the prefix :)

[13:12:30.0000] <TabAtkins>
I'll do whatever, it's old code and I'm happy to update.  Dunno what all I can remove right now, though.

[13:15:17.0000] <SamB>
oh maybe I have blink turned off

[13:15:35.0000] <Ms2ger>
Less prefixes proliferating is generally good :)

[13:15:40.0000] <Ms2ger>
(Fewer?)

[13:29:49.0000] <TabAtkins>
SamB: Turning off <blink> would only affect the blinking cursor.

[13:29:55.0000] <TabAtkins>
SamB: Why are you on FF 24?

[13:30:07.0000] <TabAtkins>
Aurora is 28 right now - you're a version or two behind.

[13:30:32.0000] <SamB>
because I have an irrational fear that if I switch from ESR to mainline that I'll end up regretting it

[13:30:58.0000] <TabAtkins>
Well, you regret your current choice, because it's somehwo broken.

[13:32:06.0000] <SamB>
actually I think I care more about how badly the devtools are doing at helping me see what's wrong ;-)

[13:33:23.0000] <TabAtkins>
Yeah, being 4 versions behind would exacerbate that.

[13:36:54.0000] <SamB>
/me ponders looking into having multiple installs ...

[13:39:17.0000] <SamB>
what is aurora doing at 28, anyway, when there already seem to be a 30 and a 31?

[13:47:25.0000] <nephyrin>
SamB: Aurora is currently 30

[14:02:56.0000] <TabAtkins>
Hah, so my install is behind as well.

[14:03:20.0000] <TabAtkins>
Oh, no, I'm not even on Aurora.

[14:03:23.0000] <TabAtkins>
Just stable channel.

[14:09:01.0000] <SamB>
hmm, I'm a bit confused though because I just looked at Firefox's download tree and they don't have anything for 30 or 31 yet

[14:09:20.0000] <SamB>
I only saw those versions in Firebug release announcements

[14:13:51.0000] <svl>
http://nightly.mozilla.org/ has 31, http://www.mozilla.org/en-US/firefox/aurora/ has 30 - stable is on 28

[14:38:45.0000] <Hixie>
tantek: it was brought to my attention that you are under the mistaken belief that w3c specs can't reference whatwg specs

[14:38:56.0000] <Hixie>
tantek: HTML5.1 references several wikis, guides on the w3c site, unicode technical reports and notes, the CLDR, several WHATWG specs, editor's drafts of w3c specs, pages on github, graphviz.org, the ES6 draft, IANA registries, mozilla developer docs, publicsuffix.org, torproject.org, and a random page on rniwa.com

[14:39:04.0000] <Hixie>
tantek: so i don't think that's accurate

[15:20:52.0000] <arunranga>
Hixie, tantek: I really *hope* that we can cross-reference. File API does pretty liberally (e.g. url.spec.whatwg.org, amongst others, including mimesniff). FileSystem might. Others within WebApps do.

[15:21:13.0000] <Hixie>
we clearly can

[15:21:16.0000] <Hixie>
lots of specs do

[15:21:17.0000] <arunranga>
Hixie, tantek, these references are also normative. So, disabuse me if I’m wrong to do so.

[15:21:39.0000] <Hixie>
it'd be pretty funny if the whatwg decided to instigate a policy of not referencing w3c docs

[15:21:51.0000] <Hixie>
and then forked all the specs needed to work around that

[15:22:01.0000] <Domenic_>
all the DOM4 references I see make me sad. Just reference the real DOM.

[15:22:57.0000] <arunranga>
Hixie, unless there’s a patent-ish sense here about cross-references opening a backdoor to thwart licensing declarations, I can’t think of a reason not to do that.

[15:23:11.0000] <Hixie>
there isn't

[15:23:32.0000] <arunranga>
/me tempest in a teacup then :)

[15:24:37.0000] <Hixie>
the forking isn't "in a teacup", it's causing real harm and confusion

[15:29:24.0000] <sgalineau>
Hixie: examples of harm and confusion?

[15:29:41.0000] <Hixie>
IE follows one spec, Chrome follows another.

[15:29:57.0000] <Hixie>
Web authors ask me about a bug that's fixed in one and not the other.

[15:30:15.0000] <Hixie>
people don't know if features are in or out because different specs disagree.

[15:30:35.0000] <Hixie>
i get e-mails at least weekly, often more, from people confused about this stuff one way or another.

[15:30:35.0000] <sgalineau>
I think you're assuming IE follows one spec out of confusion instead of deliberately

[15:30:47.0000] <Hixie>
whether it's deliberate or not, it's harm

[15:31:36.0000] <sgalineau>
sure, but is it super different from two browsers implementing two versions of the same spec a few months apart

[15:32:05.0000] <TabAtkins>
Yes, because there's a single obvious answer when anyone asks what the right behavior is.

[15:32:30.0000] <sgalineau>
fair

[15:33:43.0000] <sgalineau>
and to be clear, I do find the situation crazy. OTOH folks complain about w3schools confusing things then we turn around and fork stuff for unclear reasons (when there is a reason)

[15:33:50.0000] <Hixie>
it's also harm in more subtle ways, like, all the effort that could be spent editing specs that desperately need editing, but have no editors, is instead spent redundantly editing specs that already have editors.

[15:34:28.0000] <sgalineau>
still, is the mess documented someplace? even part of it?

[15:35:13.0000] <Hixie>
http://wiki.whatwg.org/wiki/FAQ#WHATWG_and_the_W3C_HTML_WG

[15:35:27.0000] <Hixie>
and the w3c "landscape" doc

[15:35:34.0000] <Hixie>
(but that's woefully incomplete)

[15:35:46.0000] <Hixie>
but even i don't have a clear idea of what the full extent of the mess is

[15:35:56.0000] <Hixie>
and it's not just w3c vs whatwg

[15:36:02.0000] <Hixie>
there's also the problem of w3c vs w3c

[15:36:39.0000] <sgalineau>
right

[15:37:12.0000] <sgalineau>
it's a bit like we're going <spec><source...><source...><source...></spec>

[15:37:16.0000] <sgalineau>
'what could go wrong?'

[15:37:52.0000] <Hixie>
e.g. http://damowmow.com/temp/canvas-specs

[15:39:00.0000] <Hixie>
none of that would be a problem if the w3c hadn't forked the whatwg spec (let alone forked it apparently 27 times)

[15:39:52.0000] <sgalineau>
I wonder if it's worth collecting a bunch of examples like these for the new TAG. Not that they don't know but I've never seen the evidence marshalled in a single place (may have missed it though)

[15:40:01.0000] <sgalineau>
though it might be too late

[15:41:16.0000] <Hixie>
wtf can the TAG do about it

[15:41:17.0000] <Hixie>
they have no authority

[15:42:16.0000] <sgalineau>
I don't think there is a single authority involved. got to start somewhere + some of the folks there are able to make some public noise about it

[15:42:34.0000] <Hixie>
there's one single authority who could fix all this. Jeff Jaffe.

[15:42:46.0000] <sgalineau>
what would he do?

[15:42:57.0000] <sgalineau>
besides a memo saying 'don't do that'

[15:44:15.0000] <Hixie>
well a memo would be a fine start, but then he could also enforce it.

[15:44:31.0000] <Hixie>
e.g. delete any forked spec.

[15:44:36.0000] <Hixie>
deprecate the TR/ page.

[15:44:40.0000] <Hixie>
etc.

[15:44:42.0000] <sgalineau>
which won't happen without enough members believing it is a problem they need to fix

[15:44:53.0000] <Hixie>
he's the CEO. He can do whatever he wants with or without members.

[15:45:12.0000] <Hixie>
in fact, if I was the CEO, the first thing I would do is disband the AC, followed by dropping the concept of paid membership.

[15:45:13.0000] <sgalineau>
not really. he funds his organization from the members.

[15:45:35.0000] <Hixie>
the third thing i would do is fire all the staff, thus solving the funding problem.

[15:45:39.0000] <sgalineau>
lol

[15:45:49.0000] <sgalineau>
sure, but you're not the CEO

[15:45:56.0000] <sgalineau>
so, in the meantime...

[15:46:17.0000] <Hixie>
but he is, and he could do that.

[15:46:27.0000] <Hixie>
the whatwg is funded out of my pocket

[15:46:49.0000] <sgalineau>
he could ride into the TPAC plenary day on a pony, too

[15:47:10.0000] <sgalineau>
all fascinating hypotheticals but I doubt they lead to a practical solution

[15:47:21.0000] <Hixie>
my point is that it's his responsibility, and he has the authority.

[15:47:22.0000] <Hixie>
that's all.

[15:47:32.0000] <Hixie>
he clearly has decided not to solve these problems, though.

[15:47:41.0000] <Hixie>
even though he could.

[15:48:03.0000] <Hixie>
(i'd also cancel tpac.)

[15:48:12.0000] <sgalineau>
You could argue all CEOs have the authority to fold their own organization and that by doing so they'd eliminate all the issues within.

[15:48:29.0000] <sgalineau>
That may be 100% true but it's not a particularly interesting argument.

[15:49:10.0000] <Hixie>
i didn't say it should fold.

[15:49:26.0000] <Hixie>
and in most cases, it wouldn't solve the problems

[15:49:31.0000] <Hixie>
the w3c is a special case in that respect.

[15:50:54.0000] <Hixie>
standards organisations, imho, should not have paid memberships. It totally screws up the incentives for the people running the organisation.

[15:51:01.0000] <Hixie>
the W3C is a case study in that.

[15:52:35.0000] <sgalineau>
I'm not sure how eliminating paid membership prevents forking but I think we've wandered away from the topic here...

[15:53:13.0000] <Hixie>
you said he could only do what the membership wanted. eliminating memberships means that's no longer a problem.

[15:53:46.0000] <Hixie>
(but also, i don't actually accept your premise. He could totally tell the membership that he was not allowing forking even if they disagreed.)

[15:54:19.0000] <Hixie>
(plus, i disagree with the premise that the majority of the membership actually wants the w3c to be forking specs. they in fact have indicated that they are so _against_ forking that they don't even think the w3c should use a document license that allows it.)

[15:54:47.0000] <sgalineau>
without money he has no staff and is not paid himself. the notion that he has more power that way seems odd but anyway...

[15:55:15.0000] <sgalineau>
well, if enough of the membership is against, that's a start and suggests we don't need to abolish the whole thing to fix the problem

[15:55:16.0000] <Hixie>
he can get paid himself (and even a small staff to organise events and maintain the servers) via small grants, like the IETF.

[15:55:54.0000] <Hixie>
the w3c has no power _today_ except over its own web site. he'd still have that power without a membership.

[15:57:08.0000] <sgalineau>
I'm interested in practical solutions that are not only possible but have some realistic probability of occurring in the near future. not hearing that...

[15:57:48.0000] <sgalineau>
and if we know Jeff is not going to do that anyway, arguing what he could do should he choose to do it sounds like a wankfest, to be honest

[15:57:51.0000] <Hixie>
the practical solution is just for the w3c to not publish forks of specs. i don't understand why this is impractical.

[15:58:09.0000] <sgalineau>
I don't think it is.

[15:58:19.0000] <Hixie>
what would the w3c do if the whatwg changed the copyrights on its specs so the w3c could no longer legally fork the specs?

[15:58:36.0000] <sgalineau>
but if you're going to argue for it by saying 'well, jeff could just fire all the staff and suspend paid membership' that's an excellent way to get tuned out

[15:58:57.0000] <sgalineau>
I don't know. I'm sort of tickled to see what would happen if it did...

[16:04:22.0000] <TabAtkins>
Just make a new copyright notice that's exactly the same as today, but specifically prevents the w3c from forking it or any derivatives.

[16:05:51.0000] <Domenic_>
i think it's much simpler to argue for no-w3c-forking than for no-paid-membership

[16:08:17.0000] <Hixie>
well, i think both need to happen, but sure

[16:08:38.0000] <Hixie>
i don't think the w3c will ever really solve its fundamental problems until it changes its funding model, and i don't think it will ever change its funding model

[16:09:02.0000] <Hixie>
i was just pointing out that it could, and Jeff has the authority to do it if he wanted to.

[16:11:48.0000] <Hixie>
sgalineau: why do you think the w3c is forking so many specs? and why do you think it can't not do it?

[16:11:51.0000] <hober>
Hixie: would you have to get agreement from the WHATWG Membership to change the copyright in that manner?

[16:12:14.0000] <SamB>
hober: the WHATWG would probably not do that

[16:12:29.0000] <Hixie>
technically everything i've written since joining google is (c) google and technically none of it has ever had a clear license.

[16:12:41.0000] <Hixie>
so...

[16:12:46.0000] <SamB>
Hixie: it says right on the spec what the license is doesn't it

[16:12:48.0000] <Hixie>
but no, the editors can just pick their own license

[16:12:59.0000] <Hixie>
SamB: yeah... not clear how accurate that license has been since about 2005. :-)

[16:13:18.0000] <Hixie>
hober: (in particular, note that the licenses for the other specs are much clearer)

[16:13:41.0000] <Hixie>
(i just don't like changing legal boilerplate, so i haven't done anything about it)

[16:14:03.0000] <SamB>
well, I believe there's precedent for contributing to a work with a license statement like that being interpreted as licensing your contributions under that license

[16:14:27.0000] <Hixie>
yeah, i think that's why nobody has cared

[16:14:38.0000] <Hixie>
but anyway, it's only subsequent contributions that would matter

[16:14:46.0000] <Hixie>
since the w3c has already forked everything written so far

[16:15:05.0000] <Hixie>
and it would be easy for me just to add "contributions since this date (c) google all rights reserved" or some such

[16:15:21.0000] <Hixie>
(i'd speak to my copyright lawyer first to get the exact wording obviously)

[16:15:30.0000] <Hixie>
but doing so goes against everything i think a standards organisation should do

[16:15:38.0000] <Hixie>
(as does forking)

[16:15:51.0000] <Hixie>
so i dunno, do i believe it's more important to stop the w3c or do i believe it's more important to be open

[16:15:54.0000] <Hixie>
it's a hard call

[16:16:06.0000] <Hixie>
(stop the w3c forking, i mean)

[16:16:20.0000] <Hixie>
(obviously openness is more important than stopping the w3c entirely :-P)

[16:16:45.0000] <SamB>
Hixie: I'm pretty sure if you were to decide "I'm going to GFDL this and I'm going to add 'The W3C is dead.' as a cover text", the existing material would still be available under, uh

[16:17:10.0000] <zewt>
things that would be bad: the internet depending on a spec which which nobody else is allowed to take over if the maintainer/owner stops maintaining it for some unforeseen reason

[16:17:24.0000] <zewt>
just to throw the obvious out there, heh

[16:17:56.0000] <SamB>
this: "You are granted a license to use, reproduce and create derivative works of this document."

[16:18:27.0000] <SamB>
Hixie: hmm, what is the W3C's copyright policy anyway

[16:18:35.0000] <zewt>
anyone can take the document and make further modifications to it which aren't under that license; it's not a copyleft, in other words

[16:18:58.0000] <SamB>
zewt: sure

[16:19:11.0000] <zewt>
continuing to maintain forks would become difficult if they had to re-spec all future work due to being unable to merge in changes

[16:19:37.0000] <Hixie>
SamB: GFDL would be an interesting idea, but it's not open enough for e.g. Mozilla to reuse the text in their MPL-covered code.

[16:19:56.0000] <Hixie>
zewt: yeah, well, welcome to ALL W3C SPECS EVER

[16:20:00.0000] <zewt>
i recall gfdl being really terrible, though it's been years since i looked at it closely and i couldn't say why off the top of my head

[16:20:14.0000] <SamB>
Hixie: that was a "hixie is replaced by his evil twin" scenareo

[16:20:30.0000] <Hixie>
zewt: (one reason why we had to rewrite teh entire HTML spec from scratch rather than just forking it, when the w3c refused to maintain it. The other reason, of course, was that there was no material there worthy of being reused...)

[16:20:37.0000] <SamB>
there's a reason I mentioned the cover text

[16:21:45.0000] <Hixie>
SamB: we're at the point where that's the kind of thing i'm considering.

[16:24:39.0000] <SamB>
so, um, what's the union of the licenses on Gecko, Webkit, and Blink?

[16:31:19.0000] <Hixie>
Gecko is MPL, GPL, LGPL. Dunno about webkit/blink.

[16:31:35.0000] <Hixie>
(i assume BSD or MIT or some such?)

[16:38:28.0000] <SamB>
hmm, looking at <http://metadata.ftp-master.debian.org/changelogs/main/i/iceweasel/unstable_copyright>, <http://metadata.ftp-master.debian.org/changelogs/main/q/qtwebkit-opensource-src/unstable_copyright>, and <http://metadata.ftp-master.debian.org/changelogs/main/c/chromium-browser/unstable_copyright> ...

[16:39:45.0000] <SamB>
I see, well, a few more licenses than you said for mozilla ...

[16:42:53.0000] <SamB>
WAAAAY too many BSD variants

[16:45:24.0000] <zewt>
the bsd license encourages editing it, unfortunately, with the stupid endorsement clause

[16:45:53.0000] <zewt>
MIT/X11 doesn't have that problem

[16:46:16.0000] <SamB>
yeah, but they even have a strange variant of BSD2 requiring it be the first thing, other than copyright notices, in the file

[16:46:47.0000] <zewt>
that's pretty much a nonstarter for me, if I put licenses in files, they go at the end

[16:48:50.0000] <zewt>
amusingly, that's also GPL-incompatible

[16:50:13.0000] <zewt>
(i'm not a huge GPL fan these days, but I am for GPL-compatibility)

[16:50:32.0000] <SamB>
yes, GPL compatibility is fairly important ...


2014-04-12
[17:15:30.0000] <Hixie>
hober: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25236

[17:33:34.0000] <sangwhan>
Webkit/Blink is a mixture of LGPL and BSD

[17:34:06.0000] <SamB>
so it turns out I can't actually read DEP5 files very well; looks like LGPL-2+ / MPL-2.0+ would be a plausible license for the HTML spec that'd allow most browser implementors to paste pieces into their source?

[17:36:42.0000] <SamB>
s|;|; but looking at some relevant pages on wikipedia, <about:license> in FF 24, and <http://mozilla.org/MPL>, it|

[17:57:43.0000] <Hixie>
SamB: MPL would be sufficient for w3c to keep forking, as far as i can tell

[18:01:03.0000] <tantek>
Hixie: re: "belief that w3c specs can't reference whatwg specs" - quite the opposite, I am an *advocate* for W3C specs referencing WHATWG specs.

[18:01:23.0000] <tantek>
not sure who/where you heard that belief from but it is laughable ;)

[18:01:31.0000] <Hixie>
oh ok, good

[18:02:01.0000] <tantek>
and like I said, I'm an advocate for editors of W3C specs to have the freedom to reference WHATWG specs as they see fit.

[18:02:26.0000] <tantek>
if you hear anything to the contrary, I appreciate the heads-up, as you did.

[18:03:27.0000] <Hixie>
roger

[18:04:34.0000] <tantek>
also if you hear from anyone that they are having difficulty doing so, I'm happy to help advocate for them inside W3C

[19:51:36.0000] <SamB>
/me isn't sure how he feels about the way http://dev.w3.org/fxtf/compositing-1/ keeps talking about HTML- or SVG-specific stuff; on the one hand it makes things easier to understand but on the other hand it seems kind of like stuff that should be in HTML or SVG specs ...

[20:04:06.0000] <SamB>
/me thinks you guys need to learn to spell times though

[20:05:23.0000] <SamB>
it's ×, not x

[20:05:30.0000] <SamB>
wow that renders bad in unifont though

[03:40:41.0000] <IZh>
Hi.

[13:45:48.0000] <MikeSmith>
is file:///abc|/foo/bar as valid URL per the rules for file URLs in the URL spec?

[13:46:39.0000] <MikeSmith>
is file:///9|/foo/bar a valid URL?

[13:46:54.0000] <MikeSmith>
and by valid I mean, does not cause a parse error

[13:48:00.0000] <MikeSmith>
and I mean the problem character being the bar character

[13:49:26.0000] <MikeSmith>
"|"

[13:51:12.0000] <MikeSmith>
which is not a "URL code point" so normally generates a parse error but is allowed if in file URLs under certain circumstances

[13:52:08.0000] <MikeSmith>
but I thought the only case where it was allowed was after a single ASCII alpha character

[13:52:57.0000] <MikeSmith>
and then only if that single ASCII alpha character is the first character after the scheme, with nothing else between

[14:07:22.0000] <IZh>
I don't know whether it is valid, but why don't use %xx for bar?

[14:22:00.0000] <MikeSmith>
IZh: because I'm writing test cases to check if an implementation treats stuff like "file:///abc|/foo/bar" as valid

[14:22:47.0000] <MikeSmith>
anyway I realize now that "|" seems be allowed in the host part

[14:25:01.0000] <MikeSmith>
ah oops I meant to say "file://abc|/foo/bar" before

[14:27:18.0000] <MikeSmith>
anyway it seems what happens is that per the spec, "file://c|/foo/bar" gets parsed as host=null path="/c:/foo/bar"

[14:28:30.0000] <MikeSmith>
whereas "file://abc|/foo/bar" gets parsed as host="abc|" path="/foo/bar"

[15:07:24.0000] <MikeSmith>
Hixie: fwiw the w3c bugzilla instance was upgrade to v4.4.2 yesterday and I think there are some new search features

[15:07:27.0000] <MikeSmith>
http://www.bugzilla.org/releases/4.4.2/release-notes.html#v44_feat

[15:07:56.0000] <MikeSmith>
which may or may not be useful to you

[15:21:34.0000] <Hixie>
MikeSmith: cool, thanks for the heads-up

[15:36:27.0000] <annevk>
MikeSmith: file URLs might need some changes

[15:36:46.0000] <MikeSmith>
annevk: OK

[15:36:55.0000] <annevk>
Also, why we need the URL standard: https://bugzilla.mozilla.org/show_bug.cgi?id=241688

[15:37:02.0000] <annevk>
Kind of sad really...

[15:37:43.0000] <MikeSmith>
/me looks

[15:40:49.0000] <MikeSmith>
gotta love backslashes

[15:41:28.0000] <MikeSmith>
annevk: btw I notice that the URL spec nowhere states what code points are allowed in domain labels

[15:42:37.0000] <annevk>
MikeSmith: yeah, I'm hoping UTS #46 will at some point provide guidance for that

[15:42:48.0000] <MikeSmith>
I assumed "|" wasn't allowed since it's not a URL code point but now I see the spec never says that only URL code points are allowed in domain labels

[15:42:52.0000] <annevk>
MikeSmith: not sure I successfully conveyed that to Mark though when I spoke to him

[15:43:03.0000] <MikeSmith>
OK

[15:43:23.0000] <annevk>
MikeSmith: he's fixing a bunch of other problems, might take another year to get syntax requirements sorted

[15:43:49.0000] <annevk>
MikeSmith: see http://www.unicode.org/reports/tr46/proposed.html for changes to ToASCII and ToUnicode that are being made, it's becoming much better

[15:44:04.0000] <MikeSmith>
/me looks

[15:49:38.0000] <MikeSmith>
annevk: OK is it worth me filing a bug against the URL spec about domain-label code points? As a reminder at least. Or should I not bother?

[15:49:55.0000] <MikeSmith>
or maybe you have a note in there already about it that I missed

[15:50:02.0000] <annevk>
MikeSmith: yeah you could file a bug

[15:50:08.0000] <MikeSmith>
k

[15:50:13.0000] <annevk>
MikeSmith: not sure how to fix it though :-)

[15:52:20.0000] <MikeSmith>
annevk: yeah I know. But at least if we file a bug it'll save the next somebody from filing a duplicate if they set out to report the same issue

[15:53:02.0000] <MikeSmith>
oh btw the w3c bugzilla now does the thing where it shows possible duplicates when you got to file a new bug

[15:53:17.0000] <MikeSmith>
based on the summary contents you type in

[15:53:43.0000] <MikeSmith>
or not really duplicates but existing bugs with a similar summary

[15:53:49.0000] <MikeSmith>
you know what I mean

[16:00:57.0000] <annevk>
nice

[16:01:38.0000] <MikeSmith>
annevk: maybe for the URL could at least give the list of characters that are definitely not allowed

[16:01:56.0000] <MikeSmith>
like "/" and "#" and "?"

[16:02:25.0000] <MikeSmith>
would it make any sense to do that?

[16:03:00.0000] <annevk>
I would prefer a more definitive definition

[16:03:11.0000] <annevk>
Do you need this intermediate hack for something?

[16:03:43.0000] <annevk>
I'm planning on reworking the parser a bit by the way to be more functional. Also allowing better reuse of parts of the parser

[16:04:01.0000] <MikeSmith>
annevk: no, don't need it for anything specific

[16:04:33.0000] <MikeSmith>
annevk: so it's not blocking anyting

[16:05:15.0000] <annevk>
MikeSmith: okay, then I think we should try to find something better

[16:05:25.0000] <MikeSmith>
yeah

[16:05:58.0000] <MikeSmith>
OK I'll just file the bug about it for now as a reminder


2014-04-13
[08:28:10.0000] <annevk>
MikeSmith: btw, it seems likely we will get rid of concepts such as "domain label" and "domain label separator" in the URL specification

[08:28:29.0000] <annevk>
MikeSmith: UTS #46 calls the whole thing a "domain" and doesn't distinguish much between its individual components

[08:32:08.0000] <MikeSmith>
annevk: that sounds like an improvement. the domain-label thing doesn't match to normal parlance and just send kludgy

[10:19:57.0000] <Domenic_>
MikeSmith: this is slightly related and is my personal pet-peeve with the current URL Standard. https://github.com/annevk/url/issues/1

[13:15:13.0000] <annevk>
Domenic_: we take pull requests

[13:15:55.0000] <annevk>
Domenic_: but I also have a vague plan of refactoring the specification a bit per https://github.com/SimonSapin/rust-url/blob/master/parser.rs

[13:16:07.0000] <annevk>
Domenic_: to see if that makes parsing more readable

[15:26:28.0000] <MikeSmith>
Domenic_: hmm so per the spec that gives "file:///" by design instead of "file:///C:/"?

[15:27:04.0000] <MikeSmith>
annevk: 🐻

[15:27:32.0000] <MikeSmith>
annevk: you went with that to match the IE and Chrome behavior?

[15:28:16.0000] <annevk>
MikeSmith: I think Gecko, it does not match IE or Chrome iirc

[15:28:28.0000] <MikeSmith>
ah

[15:28:30.0000] <annevk>
MikeSmith: however, the issue is open for a reason

[15:28:38.0000] <MikeSmith>
ok

[15:29:13.0000] <annevk>
MikeSmith: Windows legacy should probably be assimilated

[15:29:23.0000] <MikeSmith>
annevk: yeah

[15:30:06.0000] <MikeSmith>
annevk: btw is there some way you can migrate that issue to https://github.com/whatwg/url

[15:30:57.0000] <MikeSmith>
doesn't matter since I'm now watching your repo too

[15:31:22.0000] <annevk>
MikeSmith: should probably file a bug for it at some point

[15:31:42.0000] <annevk>
MikeSmith: I think my parser code is now maintained as part of some Google project, still need to add a notice

[15:33:48.0000] <MikeSmith>
annevk: oh, it's cool that it's being used

[15:33:53.0000] <MikeSmith>
Domenic_: https://github.com/bterlson/ecmascript is interesting


2014-04-14
[19:17:07.0000] <TabAtkins>
Urgh, appcache examples are... lacking.

[19:17:45.0000] <TabAtkins>
Say I want to cache a single-page app.  There's one data script I'd like to load fresh when online, but allow to draw from cache when offline.  How to write?

[19:18:22.0000] <TabAtkins>
I kinda suspect it's "CACHE: data-script.js SETTINGS: prefer-online NETWORK: data-script.js"?

[19:18:52.0000] <TabAtkins>
The loading algo is too long and annoying to read to figure out what the actual behavior of this is.

[20:08:15.0000] <Domenic_>
MikeSmith: yeah after ES6 ships we hope to move to something like that.

[20:21:37.0000] <MikeSmith>
Domenic_: cool

[01:30:16.0000] <zcorpan>
TabAtkins: isn't this wrong for inlines? "If the property does not apply to this element, then the element has no used value for that property." http://dev.w3.org/csswg/css-cascade/#used

[01:30:29.0000] <zcorpan>
TabAtkins: (and the width/height properties)

[02:42:09.0000] <hsivonen>
http://telemetry.mozilla.org/#release/28/DECODER_INSTANTIATED_HZ/saved_session/Firefox is encouraging

[02:42:35.0000] <IZh>
Hi.

[02:43:45.0000] <IZh>
I have seen <html lang="en-US-x-hixie"...> on developers.whatwg.org. What does it mean? Is it Hixie's dialect of US English? ;-)

[02:44:02.0000] <hsivonen>
IZh: yes

[02:44:49.0000] <hsivonen>
IZh: http://ian.hixie.ch/bible/english

[02:45:03.0000] <Ms2ger>
/me wonders if changing it to en-GB-x-hixie would be a good way to annoy people who want to fork it into en-US

[02:49:08.0000] <IZh>
What's the point of having own language? I don't see drastical difference to en-US.

[03:39:24.0000] <annevk>
Welcome back hsivonen!

[03:39:43.0000] <annevk>
hsivonen: it'd be great if hz-gb-2312 could be nuked

[04:13:11.0000] <hsivonen>
annevk: I'm wondering if I should just nuke it without moving it to c-c myself and let Thunderbird devs know that it's up to them to add it to c-c

[04:13:19.0000] <hsivonen>
...or if I should move it to c-c

[04:13:55.0000] <hsivonen>
annevk: curiously, the supposedly unreachable IBM encodings have been reached in very small numbers *somehow*

[04:14:06.0000] <hsivonen>
I wonder what kind of bug is involved

[04:14:52.0000] <annevk>
Could it be that custom builds of Firefox still report back?

[04:15:14.0000] <hsivonen>
dunno. could be a fringe extension doing something

[04:16:26.0000] <annevk>
hsivonen: makes sense I guess

[04:16:47.0000] <hsivonen>
I can't even get c-c to build right now

[04:17:03.0000] <hsivonen>
it would be easier to help TB devs if I could build their stuff

[04:17:19.0000] <annevk>
hsivonen: I think letting Thunderbird know what's up is okay...

[04:18:02.0000] <annevk>
hsivonen: it's a bit unclear to me how alive that project still is

[04:18:19.0000] <hsivonen>
hmm. I could do the initial "removal" the same way EUC-TW and the IBM encodings were removed

[04:18:20.0000] <annevk>
hsivonen: e.g. for Firefox OS we are building a new email client

[04:18:34.0000] <hsivonen>
i.e. remove it from the Encoding Standard alias table

[04:18:44.0000] <jgraham>
annevk: You haven't used the FirefoxOS email client have you?

[04:19:27.0000] <annevk>
jgraham: I don't think that would clarify what I'm unclear about

[04:19:36.0000] <jgraham>
Comparing it to Thunderbird isn't really talking about two similar products

[04:19:37.0000] <annevk>
hsivonen: yeah that makes sense

[04:20:21.0000] <jgraham>
Anyway the status of Thunderbird is that Mozilla keep the lights on but doesn't pay anyone to work on it

[04:21:12.0000] <jgraham>
There does seem to be some sort of community around it

[04:21:56.0000] <annevk>
hsivonen: btw, I'm happy to rewrite the algorithms to use bit shifting and such, I just need to figure out how to do it; I'm not really familiar with that kind of math, I imagine an implementor would be though

[04:32:35.0000] <hsivonen>
annevk: I see

[06:00:12.0000] <annevk>
hsivonen: so SimonSapin explained how to fix utf-8

[06:54:11.0000] <annevk>
I was going to say something else, but I updated the bug instead it seems

[06:57:41.0000] <annevk>
whoa

[06:57:53.0000] <annevk>
GitHub displaying .csv is sweet https://github.com/briandailey/pycon-2014-job-fair/blob/master/data.csv

[06:58:10.0000] <annevk>
that kind of stuff just makes you want to start using that format again

[06:58:53.0000] <annevk>
we should get things like <table src=.cvs> without loads of JavaScript

[07:00:25.0000] <jgraham>
Seems like it would be pretty weird

[07:00:57.0000] <jgraham>
It would be kind of like a macro in the parser since it would presumably expand to a whole big DOM

[07:01:47.0000] <jgraham>
Well, I guess it could be a shadow DOM, but this is a case where encapsulation doesn't seem helpful

[07:02:09.0000] <Ms2ger>
Didn't tantek propose that eons ago?

[07:04:31.0000] <annevk>
jgraham: I was thinking DOM manipulation

[07:04:41.0000] <annevk>
Ms2ger: there's remnants of it in HTML4

[07:04:47.0000] <annevk>
Ms2ger: I think IE had something like it

[07:05:26.0000] <jgraham>
In unrelated related news, Firefox OS isn't a company

[07:05:29.0000] <jgraham>
I assume

[07:05:40.0000] <annevk>
Why?

[07:05:56.0000] <jgraham>
Why isn't it a company?

[07:06:06.0000] <annevk>
Why is it news?

[07:06:33.0000] <jgraham>
Because that csv claims that a company called "Firefox OS" was at the jobs fair

[07:07:12.0000] <annevk>
jgraham: it seems that was fixed two hours ago

[07:07:40.0000] <jgraham>
Oh, well I got an old version then

[07:07:51.0000] <annevk>
GitHub must not like you

[07:08:00.0000] <jgraham>
Understandable

[07:08:12.0000] <annevk>
Quite

[07:44:12.0000] <annevk>
https://tankredhase.wordpress.com/2014/04/13/heartbleed-and-javascript-crypto/ Hmm, "One codebase means less room for error."... Heartbleed is the perfect example for why one codebase is a very bad idea...

[07:46:40.0000] <jtcranmer>
given the statements after the header

[07:46:54.0000] <jtcranmer>
I suspect he means more that fewer lines of code are better

[07:50:21.0000] <jgraham>
Yeah, the worrying sentence there was " If there’s anything we’ve learned from Heartbleed, it’s that no matter the choice of programming language, the biggest risk is human error."

[07:51:01.0000] <jgraham>
If you are only just now learning that human error is the cause of bugs in programs written by humans, I don't know what to say

[07:52:01.0000] <jgraham>
One kind of human error might be not correctly taking account of the tendency for humans to make errors and work with tools that make such errors especially troublesome

[07:52:28.0000] <Ms2ger>
Let's just blame Ritchie

[07:53:34.0000] <tantek>
Ms2ger indeed (re table and csv), and I think TabAtkins prototyped it too.

[08:02:28.0000] <jtcranmer>
annevk: ping

[08:02:40.0000] <annevk>
jtcranmer: http://www.nohello.com/

[08:03:40.0000] <jtcranmer>
annevk: any updates on the IDNA clusterfuck?

[08:04:08.0000] <annevk>
jtcranmer: http://lists.w3.org/Archives/Public/www-archive/2014Apr/0018.html

[08:04:36.0000] <annevk>
jtcranmer: http://www.unicode.org/reports/tr46/proposed.html has my proposed changes, still no syntax definition of a domain though, not sure when we'll get that

[08:05:21.0000] <jtcranmer>
annevk: mostly, I'm trying to get a sense of what the URL statics will look like

[08:05:42.0000] <jtcranmer>
so I can attempt to convince Firefox to implement them so I can use them

[08:05:49.0000] <jtcranmer>
or at least polyfill them

[08:06:10.0000] <jtcranmer>
I need it for https://github.com/mozilla-comm/jsmime/issues/6

[08:07:19.0000] <annevk>
jtcranmer: I think the two methods provided still make sense; the only question is how we want to signify error

[08:07:25.0000] <annevk>
jtcranmer: return the original string or throw

[08:07:42.0000] <jtcranmer>
well, the other question is about resolving unicode homograph attacks

[08:08:12.0000] <annevk>
if they are allowed per IDNA #46 I'm not going to disallow them

[08:08:15.0000] <jtcranmer>
all browsers do that nowadays by displaying the domain name in punycode form if it would contain a homograph

[08:08:23.0000] <annevk>
right

[08:08:37.0000] <annevk>
so one thing I wanted to add was domainToUI

[08:08:55.0000] <annevk>
which would use the tricks from the UA to decide whether or not it would do toUnicode in the end

[08:09:04.0000] <jtcranmer>
makes sense

[08:09:42.0000] <annevk>
as some browsers only display code points they think their users will understand (Chrome) whereas others follow other recommendations

[08:10:36.0000] <Domenic_>
annevk: have you seen mathiasbynens's http://nodejs.org/api/punycode.html API?

[08:11:15.0000] <annevk>
Domenic_: Punycode != IDNA, but I have seen that and did discuss it with him

[08:11:54.0000] <Domenic_>
ah right, yeah. i guess i was thinking of "possible URL static functions"

[08:11:57.0000] <annevk>
Domenic_: I'm not sure Punycode can fail

[08:12:11.0000] <annevk>
Domenic_: but IDNA ToASCII definitely can

[08:12:15.0000] <jtcranmer>
Domenic_: it lacks stringprep necessary for IDNA

[08:12:28.0000] <annevk>
And IDNA ToASCII is always used, even with eventual ToUnicode

[08:12:45.0000] <jtcranmer>
Domenic_: as I noted in my github issue, there is 0 pure-JS code that exists that can solve IDNA

[08:13:09.0000] <jtcranmer>
I can kind of polyfill domainToUI today in Firefox, but only because Firefox is apparently violating the URL spec

[08:14:03.0000] <annevk>
Firefox' mix of displaying the domain name in Unicode and the rest in ASCII is weird

[08:14:25.0000] <annevk>
Although bz considers it a best effort

[08:14:51.0000] <jtcranmer>
I'd argue that shoving things out in Unicode is better than always going to ASCII

[08:16:12.0000] <annevk>
So mathiasbynens' implementation does throw for ToASCII

[08:17:00.0000] <jtcranmer>
Domenic_: https://github.com/mathiasbynens/todo/issues/9

[08:17:05.0000] <annevk>
jtcranmer: well you need ToASCII either way, and that's what will hit the DNS, it's the question of whether you go ToUnicode afterwards and then ToASCII again later on or just serialize

[08:18:05.0000] <jtcranmer>
annevk: true, but the more we can hide the punycode from end users, the better

[08:18:35.0000] <annevk>
jtcranmer: for end users you will already have to transform the string somehow

[08:18:40.0000] <annevk>
jtcranmer: you don't want ASCII paths

[08:19:07.0000] <annevk>
At some point I'll define URL.urlToUI too I suppose

[08:19:29.0000] <annevk>
Or maybe URL.prototype.toUIString()

[08:19:35.0000] <zewt>
("toascii" sure seems to mean it loses any codepoints over U+7F or so)

[08:19:43.0000] <annevk>
Domenic_: does JavaScript have precedents for toUIString()?

[08:22:05.0000] <zewt>
(and yeah I know, just hard to get keep some people from getting confused over what "ASCII" means for some reason, heh)

[08:22:22.0000] <mathiasbynens>
annevk: you mean in `ToASCII` → `encode`? it *should* never throw, the errors are there just in case (http://rawgit.com/bestiejs/punycode.js/master/coverage/punycode.js/punycode.js.html)

[08:22:56.0000] <annevk>
mathiasbynens: oh okay

[08:23:18.0000] <Domenic_>
annevk: I don't think so...

[08:23:21.0000] <annevk>
mathiasbynens: so yeah, I dunno what's better

[08:23:54.0000] <zewt>
when I see JS code with var declarations at the top of functions, I smell old C programmer

[08:23:55.0000] <annevk>
Domenic_: is it better to have a static or a method for something like that?

[08:24:28.0000] <Domenic_>
annevk: ah interesting. I feel like this is related to discussions around whether things belong on Math. or Number.prototype....

[08:24:41.0000] <annevk>
Domenic_: yeah I guess

[08:24:45.0000] <Domenic_>
probably a method though

[08:24:49.0000] <Domenic_>
since toString() is already a method

[08:25:02.0000] <annevk>
Domenic_: toString() is rather magical

[08:25:10.0000] <Domenic_>
how so?

[08:25:29.0000] <annevk>
Domenic_: for a long time I didn't even realize it was a thing; I thought objects just stringified

[08:25:42.0000] <annevk>
Domenic_: as happens when you do + "" and such

[08:25:43.0000] <Domenic_>
sounds like WebIDL-inspired thinking ;)

[08:25:54.0000] <annevk>
Domenic_: nah, this was way before IDL

[08:26:04.0000] <zewt>
i don't think toString should be a precedent for making other functions-that-convert-to-some-kind-of-string methods

[08:26:04.0000] <Domenic_>
ah ok

[08:26:28.0000] <Domenic_>
yeah toString() and valueOf() and then() and toJSON() are all methods used by various parts of the spec

[08:26:31.0000] <jtcranmer>
well, .toString() invokes magic paths in js

[08:27:00.0000] <Domenic_>
where if you use x in a certain context it will invoke x.method()

[08:27:15.0000] <jtcranmer>
and all I want to do is just be able to implement EAI and IDN for email addresses

[08:27:43.0000] <annevk>
jtcranmer: yeah sorry

[08:28:05.0000] <annevk>
jtcranmer: for domain names they'll have to be statics so the current API is roughly how it will be in the end

[08:28:28.0000] <jtcranmer>
I just need to build a FF polyfill so I can test it

[08:28:34.0000] <annevk>
jtcranmer: I might change to throwing or maybe returning the empty string in case of bad input

[08:28:39.0000] <JonathanNeal>
Polyfill for what, jtcranmer?

[08:28:55.0000] <annevk>
jtcranmer: but other than that I think those two are stable

[08:28:55.0000] <jtcranmer>
except I'm likely to find a corner case I want to test that the current implementations can't handle

[08:28:56.0000] <zewt>
for all of Firefox

[08:29:07.0000] <jtcranmer>
JonathanNeal: URL.domainTo*

[08:29:47.0000] <smaug____>
does gmail have some setting to logout automatically after closing it?

[08:30:04.0000] <JonathanNeal>
jtcranmer: got documentation for it? I could add one to polyfill.io

[08:30:24.0000] <jtcranmer>
JonathanNeal: http://url.spec.whatwg.org/#url-statics

[08:31:08.0000] <JonathanNeal>
wow, no idea what that is doing.

[08:31:46.0000] <jtcranmer>
yeah, it can't be polyfilled using existing techniques

[08:31:49.0000] <jtcranmer>
which is the problem

[08:31:51.0000] <annevk>
smaug____: is there no box to say the computer is untrusted?

[08:32:08.0000] <annevk>
jtcranmer: they can, just requires a bunch of code

[08:32:25.0000] <jtcranmer>
perhaps a better way to put it

[08:32:32.0000] <jtcranmer>
"there is no extant code that can polyfill it"

[08:32:59.0000] <JonathanNeal>
In dumb people terms, what does it do?

[08:33:34.0000] <annevk>
translates domain names between its different representations

[08:33:39.0000] <annevk>
s/its/their/

[08:33:53.0000] <jtcranmer>
it converts strings like ケツァルコアトル。tlalocan to xn--bckc7bj7f1a6vd.tlalocan and vice versa

[08:34:20.0000] <annevk>
losing the fancy dots unfortunately

[08:34:44.0000] <annevk>
toUI might be able to do some extra tricky for those if people feel inclined

[08:34:44.0000] <jtcranmer>
consequence of me not hitting <Meta>-<Space> quickly enough

[08:35:42.0000] <JonathanNeal>
jtcranmer: thanks for the explanation, ah, translation

[08:36:30.0000] <jtcranmer>
the part I just described is the easy part (Punycode), the hard part is the preprocessing necessary first (StringPrep/NamePrep)

[10:13:31.0000] <manus>
Hi folks. Just following up on a question I had at a pretty inactive time in the channel about a week and a half ago, regarding the different notions of focus on a web page: http://krijnhoetmer.nl/irc-logs/whatwg/20140403#l-339

[10:13:45.0000] <manus>
MikeSmith pointed me to SteveF, and jgraham pointed me to Hixie, but I'm not sure either of them got to see or respond to the issues

[10:14:17.0000] <MikeSmith>
manus: Hixie

[10:14:20.0000] <MikeSmith>
when he's around

[10:14:26.0000] <MikeSmith>
if it's about focus

[10:14:28.0000] <Hixie>
i'm here, give me a minute, afk

[10:14:32.0000] <manus>
cool, thanks

[10:14:35.0000] <manus>
oh, sweet, ok

[10:16:16.0000] <MikeSmith>
tantek: btw I think I misunderstood what you had said at the webapps wg f2f about the group being prevented from referencing whatwg specs

[10:16:54.0000] <MikeSmith>
tantek: and needing the AB to do.. something .. in order for the group to be able to reference whatwg specs instead of copying them

[10:18:53.0000] <Hixie>
manus: ok, here now. what's up?

[10:20:07.0000] <manus>
Hey Hixie. I just wanted to know if there's any defined/documented behavior for keyboard scrolling focus (as opposed to "normal" focus) for overflowed elements such as scrollable divs?

[10:20:21.0000] <manus>
Hixie: I.e., how should should keyboard scrolling work in different cases such as those in this jsfiddle: http://jsbin.com/sizofuse/7/edit?html,output ?

[10:20:41.0000] <Hixie>
Ah, yes

[10:20:45.0000] <Hixie>
this was recently updated in the spec

[10:20:51.0000] <MikeSmith>
tantek: anyway maybe we should all take that discussion to public-webapps and continue it there rather than just letting it drop

[10:20:57.0000] <Hixie>
the browsers aren't very interoperable in this rea, unfortunately

[10:21:42.0000] <manus>
Hixie: awesome that there's an update. are browsers hopelessly different, or would said spec update make it better?

[10:22:15.0000] <MikeSmith>
tantek: anyway I'm off to sleep now but maybe we can chat about it more here later after I'm back

[10:22:43.0000] <Hixie>
manus: hopefully the browsers will converge over time now that the spec is not completely out of touch with the reality

[10:23:03.0000] <Hixie>
manus: but it'd probably happen faster if someone agreed that it needed to be fixed and wrote tests and filed bugs on the browsers :-)

[10:23:27.0000] <manus>
Hixie: cool. I basically want a link to point to so I can file bugs with the concerned browsers

[10:23:28.0000] <manus>
yeah

[10:23:33.0000] <manus>
:]

[10:24:59.0000] <Hixie>
manus: http://www.whatwg.org/specs/web-apps/current-work/#focus is where it all begins

[10:25:24.0000] <Hixie>
manus: the term you're looking for is "scrollable regions"

[10:25:45.0000] <manus>
Hixie: thanks, I'll take a look. that helps a lot (terminology)

[10:28:21.0000] <Hixie>
hober: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25236

[11:02:22.0000] <TabAtkins>
zcorpan: What do you mean by "wrong for inlines"?

[11:03:00.0000] <Hixie>
hsivonen: getting timeouts from validator.nu when validating the HTML spec, fwiw

[11:20:22.0000] <Hixie>
TabAtkins: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25026 - any ideas?

[11:28:42.0000] <Domenic_>
that's an interesting one

[11:29:40.0000] <TabAtkins>
Hixie: None besides, like, a 'min-line-height' property.

[11:30:04.0000] <Hixie>
should i just clamp it with prose for now?

[11:30:12.0000] <TabAtkins>
Yeah.

[11:30:14.0000] <Hixie>
k

[11:30:15.0000] <Hixie>
thanks

[11:46:54.0000] <tantek>
MikeSmith - I have no idea what the issue is or was, so I'm just going to keep pushing forward with the assumption that editors in the WebApps WG are free to reference WHATWG specs as they see fit.

[11:47:17.0000] <tantek>
If someone raises a specific issue, or says they're being blocked from doing that for some reason, we can respond as needed.

[11:51:14.0000] <jcgregorio>
Hixie: can I get an account on http://wiki.whatwg.org/ as jcgregorio?

[11:53:32.0000] <eatsomeatso>
I just found out that I cannot test my multiplayer netplay JavaScript game by opening multiple tabs in Firefox; only the one that is active seems to run any logic. So I opened two different instances (windows) of Firefox instead, and then it works. But then it lags so much that it becomes impossible to tell what the game is gonna be like when played on unique computers over the network. Dammit.

[12:11:25.0000] <annevk>
jcgregorio / Hixie: I can give you an account if you msg me your email

[12:13:23.0000] <annevk>
tantek: if that's the case pushback to people who raise objections to that, such as Glenn Adams, might be in order

[12:14:49.0000] <jcgregorio>
annevk: jcgregorio⊙gc, thanks!

[12:15:50.0000] <annevk>
done

[12:19:03.0000] <jcgregorio>
annevk: thanks!

[12:20:23.0000] <tantek>
annevk - oh yeah I certainly do :)

[12:49:30.0000] <arunranga>
heycam|away, any idea when you’ll have something in place for https://www.w3.org/Bugs/Public/show_bug.cgi?id=23682, having to do with sequence<T> and friends?

[14:04:09.0000] <zcorpan>
TabAtkins: so consider <span>foo</span>, doesn't that have a used value for the 'width' property?

[14:04:58.0000] <SamB>
zcorpan: hmm?

[14:05:35.0000] <zcorpan>
SamB: http://dev.w3.org/csswg/css-cascade/#used  "If the property does not apply to this element, then the element has no used value for that property."

[14:06:13.0000] <TabAtkins>
zcorpan: Are you talking about in practice, or observable effects via gCS(), or...

[14:06:55.0000] <zcorpan>
TabAtkins: in this case the observable effect of gCS

[14:07:20.0000] <zcorpan>
TabAtkins: but also interested in understanding how the model is intended to be

[14:07:21.0000] <TabAtkins>
Yeah, given that gCS is defined in terms of used values, looks like we'd need to fix our definition.

[14:07:39.0000] <TabAtkins>
The model is supposed to be what is said.  inlines *dont'* have used 'width' property values.

[14:07:48.0000] <TabAtkins>
Because they don't use 'width' in their layout algorithms.

[14:08:19.0000] <zcorpan>
ok. so gCS needs to say something else. and .usedStyle will be less useful?

[14:09:01.0000] <zcorpan>
depending on what we want .usedStyle to do i guess

[14:09:07.0000] <TabAtkins>
What could .usedStyle possibly give for it?

[14:09:11.0000] <TabAtkins>
The computed value, I guess.

[14:09:43.0000] <zcorpan>
computed as in "auto"?

[14:09:58.0000] <TabAtkins>
Whatever the computed value is, yeah.

[14:10:05.0000] <TabAtkins>
/me wonders what it returns today.

[14:10:20.0000] <zcorpan>
nobody implements .usedStyle i think

[14:10:29.0000] <TabAtkins>
Right, I'm wondering about gcs.

[14:10:43.0000] <zcorpan>
gCS returns the ... old ... used style

[14:10:47.0000] <zcorpan>
so 123px

[14:11:01.0000] <TabAtkins>
I get "auto" in chrome.

[14:11:23.0000] <zcorpan>
yeah but everyone else uses the layouted width iirc

[14:11:29.0000] <TabAtkins>
Bleh.

[14:11:43.0000] <TabAtkins>
Well, at least we have an argument to the contrary. ^_^

[14:12:50.0000] <zcorpan>
i thought gCS needed to return the layouted width for compat, but maybe webkit/blink not doing it means it can be changed?

[14:12:53.0000] <TabAtkins>
width/height are a bit magical in that they can be argued to be meaningful for all boxes, even when they don't have an effect.

[14:12:56.0000] <TabAtkins>
Yeah.

[14:13:45.0000] <zcorpan>
at least gCS was first implemented with the CSS2.0 semantics of computed style, which later changed but browsers didn't change what gCS returned

[14:14:03.0000] <TabAtkins>
Yeah, which is why we had to invent the "resolved style" term.

[14:14:18.0000] <TabAtkins>
I'll compose a thread.

[14:14:33.0000] <zcorpan>
ok. thakns!

[14:20:07.0000] <TabAtkins>
zcorpan: Hm, cssom already defines its way around this, doesn't it?  It says "if the proeprty applies to the element... the resolved value is used value. Otherwise, the resolved value is the computed value."

[14:21:00.0000] <zcorpan>
TabAtkins: hum, that would mean chrome is correct per spec

[14:21:07.0000] <TabAtkins>
Yeah.

[14:21:20.0000] <zcorpan>
TabAtkins: but i thought the spec was intended to match the others

[14:21:25.0000] <TabAtkins>
Shrug.

[14:21:46.0000] <zcorpan>
relevant thing is what to do next :-)

[14:23:49.0000] <TabAtkins>
Yeah, we're consistent with all five of the special properties.


2014-04-15
[02:53:33.0000] <annevk>
morning

[03:36:29.0000] <annevk>
*shakes fist at pointer events specification*

[06:18:16.0000] <annevk>
MikeSmith: partially addressed your domain bug

[06:18:33.0000] <annevk>
Updated the URL Standard to resolve IDNA issues.

[06:18:59.0000] <annevk>
mathiasbynens: jtcranmer: I made the domain statics return the empty string in case the result was failure or an IPv6 address

[06:19:07.0000] <MikeSmith>
/me looks

[06:19:23.0000] <annevk>
MikeSmith: http://url.spec.whatwg.org/#valid-domain

[06:19:25.0000] <MikeSmith>
ah "valid domain" cool

[06:19:28.0000] <mathiasbynens>
annevk: thanks for the heads up

[06:20:50.0000] <MikeSmith>
hah "Ideally we define this in terms of a sequence of code points that make up a valid domain rather than through a whack-a-mole" 🐙

[06:23:20.0000] <MikeSmith>
me wonders out of curiosity under what cases Unicode ToASCII fails

[06:23:38.0000] <MikeSmith>
and Unicode ToUnicode

[06:24:29.0000] <MikeSmith>
just DNS length restrictions?

[06:25:03.0000] <MikeSmith>
ah nah, more

[06:25:37.0000] <MikeSmith>
can "Convert each label with non-ASCII characters into Punycode" fail?

[06:30:34.0000] <annevk>
MikeSmith: I think Punycode does not fail

[06:32:44.0000] <MikeSmith>
ok

[06:33:23.0000] <annevk>
MikeSmith: I might be wrong, http://tools.ietf.org/html/rfc3492 lists a number of "fail" conditions in the pseudo-algorithms, but they are hard to decipher

[06:33:40.0000] <MikeSmith>
/me looks

[06:34:20.0000] <MikeSmith>
"fail on overflow"

[06:36:27.0000] <annevk>
mathiasbynens might know

[06:36:54.0000] <MikeSmith>
annevk: btw the validator just uses galimitas which for toASCII just uses http://docs.oracle.com/javase/6/docs/api/java/net/IDN.html which claims to conform to RFC 3490

[06:37:13.0000] <annevk>
MikeSmith: that sounds pretty bogus

[06:37:30.0000] <annevk>
MikeSmith: the whole idea that IDNA is Punycode is misguided

[06:37:35.0000] <MikeSmith>
annevk: and galimatis reports "Could not convert domain to ASCII" if it fails, and the validator just catches that and emits it

[06:41:22.0000] <annevk>
MikeSmith: oh wait, 3490, that's somewhat correct, except it is IDNA2003 and not UTS #46

[06:41:43.0000] <MikeSmith>
annevk: yeah

[06:42:16.0000] <MikeSmith>
annevk: but UTS #46 just references RFC3490 for toASCII, right?

[06:42:47.0000] <annevk>
MikeSmith: no

[06:42:52.0000] <MikeSmith>
oh

[06:43:31.0000] <annevk>
MikeSmith: http://www.unicode.org/reports/tr46/proposed.html#ToASCII it defines an operation like RFC 3490, but with a twist

[06:43:51.0000] <MikeSmith>
ah "The operation corresponding to ToASCII of [RFC3490] is defined by the following steps"

[06:44:00.0000] <MikeSmith>
annevk: yeah I see now

[06:44:08.0000] <MikeSmith>
I had misread it the first time

[06:44:10.0000] <annevk>
I wish they would just remove the 3490 bit

[06:44:17.0000] <MikeSmith>
annevk: bingo

[06:44:24.0000] <MikeSmith>
I was about to say the same thing

[06:44:40.0000] <annevk>
This whole concept of acknowledging history at the same place you define fundamental algorithms is totally misguided

[06:44:47.0000] <MikeSmith>
yup

[06:45:44.0000] <MikeSmith>
and mention of 3490 should be in a note following the algorithm -- if there's any mention at all

[06:46:28.0000] <MikeSmith>
and even then it should do what the HTML spec does, and clearly state, "This is a wilful violation of RFC 3490"

[06:46:55.0000] <MikeSmith>
or that it "replaces" the corresponding part of 3490, or whatever

[06:51:08.0000] <MikeSmith>
smola: ↑

[06:51:52.0000] <MikeSmith>
I guess there's no Java library that implements UTS #46

[06:52:15.0000] <annevk>
At some point we should write some guidance on writing specifications

[06:54:27.0000] <MikeSmith>
annevk: yeah that would be good

[06:54:55.0000] <MikeSmith>
though I reckon many spec writers would still ignore it

[06:55:37.0000] <MikeSmith>
annevk: btw I think the reason some devs use XPath instead of querySelector is just inertia

[06:56:37.0000] <annevk>
MikeSmith: I was thinking they might, especially those that already write specifications

[06:56:59.0000] <annevk>
MikeSmith: reading dev.platform? :-)

[06:57:43.0000] <MikeSmith>
annevk: about specs yeah I guess some part of the badness is just ignorance about how to write specs more precisely

[06:58:07.0000] <MikeSmith>
annevk: the RDFa editors sure would have benefitted from some guidance

[06:58:47.0000] <Ms2ger>
Ha

[06:58:56.0000] <annevk>
Seems like CSS might too. RFC 2119 usage is often incorrect. Concepts such as "sibling" are used without definition...

[06:59:53.0000] <jgraham>
On the other hand their usage of RFC 6919 is examplary

[06:59:58.0000] <MikeSmith>
annevk: yeah, I think those devs could just replace their XPath expressions with selectors equivalents with very little effort

[07:00:40.0000] <annevk>
jgraham: seems like you found an RFC that allows the W3C to take HTML to REC

[07:01:00.0000] <jgraham>
But it is true that CSS can't yet do all the things that xpath can

[07:01:47.0000] <jgraham>
XPath can do crazy things like "find an a containing the text 'foo' and give me the href attribute of its siblings' third ancestor"

[07:02:08.0000] <MikeSmith>
jgraham: yeah but I doubt most of them are using xpath expressions that don't have selectors equivalents

[07:02:27.0000] <jgraham>
I bet a lot of the Selenium users are

[07:02:42.0000] <MikeSmith>
jgraham: right. the thing is if they're doing that the performance is probably pretty bad anyway

[07:02:49.0000] <jgraham>
I wouldn't be surprised if some of the extension users were too

[07:02:57.0000] <jgraham>
What, using Selenium?

[07:03:06.0000] <MikeSmith>
jgraham: well this is in the context of web applications

[07:03:14.0000] <MikeSmith>
and browser extensions

[07:03:56.0000] <jgraham>
For browser extensions being able to do things like conveniently get the text out of attributes is nice to have

[07:03:58.0000] <MikeSmith>
jgraham: I mean those extensions would probably be causing a performance hit

[07:04:07.0000] <MikeSmith>
yeah I can see that

[07:04:28.0000] <jgraham>
MikeSmith: It's not clear to me why they would cause a noticable perf. hit

[07:04:42.0000] <jgraham>
Is our XPath support notably slow?

[07:05:06.0000] <Ms2ger>
Faster than the polyfill in IE, apparently

[07:06:49.0000] <annevk>
To get back to the pointer events thing... "If you can propose spec text that might make this clearer, I'm happy to take a look." is such a shitty response. Editors not taking responsibility for problems are the worst

[07:06:53.0000] <gsnedders>
even nowadays? how good is the polyfill?

[07:07:12.0000] <annevk>
If you get enough of that you can basically declare "Specification Lost"

[07:07:47.0000] <annevk>
Context: http://lists.w3.org/Archives/Public/public-pointer-events/2014AprJun/0012.html

[07:08:00.0000] <gsnedders>
jgraham: But your XPath support is far slower than CSS selectors.

[07:11:46.0000] <jgraham>
gsnedders: Well, for the things that CSS can't do, the relevant comparison is CSS + custom js code

[07:13:39.0000] <gsnedders>
jgraham: Right, but in the case of them being equiv CSS selectors win. I'm pretty sure most of the polyfills could be more efficient. And String.prototype.indexOf uses naive search in everything but Chakra (le sigh).

[07:14:42.0000] <jtcranmer>
as opposed to a KMP search?

[07:15:26.0000] <gsnedders>
jtcranmer: or similar, yes

[07:15:57.0000] <jtcranmer>
for most use cases of String.indexOf, I'd expect KMP-like searches to have much higher overhead

[07:17:00.0000] <gsnedders>
jtcranmer: Yeah, certainly especially when searching small strings it's likely not worthwhile

[07:17:32.0000] <gsnedders>
jtcranmer: I've seen cases where the cost of the naive string search algorithm was a notable bottleneck, though

[07:20:08.0000] <jtcranmer>
I don't doubt that

[07:21:33.0000] <jgraham>
Sure, like everything in js you want to dynamically switch to more efficient algorithms when you detect it is likely to be worthwhile

[07:26:49.0000] <gsnedders>
jgraham: Nobody does that (except for some never-merged (AFAIK) branch of Carakan) for indexOf though.

[07:27:03.0000] <gsnedders>
And with some text nodes that's likely to make a difference with contains in XPath

[07:48:25.0000] <Ms2ger>
gsnedders, I thought spidermonkey did something of the kind

[07:50:42.0000] <gsnedders>
Ms2ger: tbf, this was a few years back I was looking, but I didn't see any such behaviour?

[07:50:56.0000] <gsnedders>
Ms2ger: I could've missed something, though

[07:56:43.0000] <SamB>
sibling's third ancestor? sounds a bit redundant ...

[07:58:29.0000] <jgraham>
OK, fair enough :p

[07:58:47.0000] <jgraham>
But the point was that you can do more complex things in XPath than CSS Selectors

[07:59:03.0000] <SamB>
/me can't help but wonder if an implementation would notice and optimize that out

[07:59:55.0000] <SamB>
hmm, actually, I guess it might do something: what if the sibling in question wasn't there ...

[08:02:20.0000] <gsnedders>
Well, I mean //a::text()[contains(., 'foo')]/following-sibling::*[position()==1]/ancestor::*[position()==3]/@href is what jgraham was talking about

[08:02:34.0000] <gsnedders>
SamB: Yeah, indeed, thus why that's important

[08:03:00.0000] <gsnedders>
(There are other equivalent queries, it must be said)

[08:04:14.0000] <gsnedders>
 //a::text()[contains(., 'foo') && following-sibling::*]/ancestor::*[position()==3]/@href for example moves the selection of following sibling

[08:57:54.0000] <Domenic_>
JakeA: this is kind of cool https://www.npmjs.org/package/es6-promisify

[09:03:26.0000] <JakeA>
Domenic_: Ohh, that's cool. Although rsvp will do it out of the box

[10:10:19.0000] <TabAtkins>
annevk: Uh, you know that I meant that "if you can propose something" sincerely, right? I"m not just brushing you off? Because I'm not a huge dick?

[10:10:56.0000] <TabAtkins>
Oh, sorry, missed context. That was Pointer Events.

[10:11:04.0000] <TabAtkins>
I said something similar to you yesterday, so I wasn't sure.

[10:11:12.0000] <SamB>
;-)

[10:21:08.0000] <annevk>
TabAtkins: you are huge though

[10:21:21.0000] <TabAtkins>
True, but I'm not literally a dick.

[10:21:32.0000] <TabAtkins>
And ::blushes:: don't share secrets, dude.

[10:21:37.0000] <TabAtkins>
I thought that was special between us.

[10:22:42.0000] <annevk>
TabAtkins: dude, I was referring to your height, not that …

[10:22:49.0000] <TabAtkins>
Mm hm.

[10:22:59.0000] <annevk>
tut tut

[10:43:42.0000] <SamB>
Hixie: see http://www.slideshare.net/fullscreen/dakami/black-ops-2012/39 through at least 42 re: what's the point of using JSON ...

[11:22:19.0000] <SamB>
/me wonders if there's some way to prevent <img> from attempting HTTP authentication ... goes to read spec ...

[11:25:04.0000] <SamB>
/me mutters something about the seemingly random page splitting in the HTML spec ...

[11:37:19.0000] <TabAtkins>
Hixie: Would you be willing to push harder on the WHATCG thing?  plinss is refusing to point Bikeshed's link refs to the WHATWG HTML spec, because we won't be allowed to publish RECs with it.

[11:38:16.0000] <SamB>
what's WHATCG supposed to be?

[11:38:17.0000] <TabAtkins>
SamB: The page splitting is done by hand, and was done a long time ago. At that point the splits were roughly even, but the spec has changed a lot since then.

[11:38:30.0000] <SamB>
TabAtkins: it's nothing to do with "evenness"

[11:38:50.0000] <TabAtkins>
A Community Group whose sole purpose is to publish heartbeats fo the WHATWG HTML spec regularly, and get the browsers to sign off on them for patent policy purposes.

[11:39:19.0000] <SamB>
just looks kind of silly going to #the-img-element and seeing a title of "4.6 Edits"

[11:39:45.0000] <SamB>
TabAtkins: ah, so the W3C has an actual *reason* for not wanting to link to WHATWG specs?

[11:40:00.0000] <TabAtkins>
Patent Policy, as always, is the bugaboo.

[11:40:36.0000] <SamB>
one more practical than "but you keep changing it", even

[11:40:47.0000] <TabAtkins>
Yeah, that one's just people being jackasses.

[11:41:06.0000] <SamB>
since we all know how well that works with e.g. Unicode references ...

[11:42:17.0000] <SamB>
now "but you keep breaking our links" would be a real reason, of course

[12:18:12.0000] <aklein>
who knows things about interactions between ES6 collections and WindowProxy? I'd expect bz, but I don't see him around.

[12:29:20.0000] <Domenic_>
TabAtkins: but it's the EDs that matter; RECs are just for lawyers. Can't that be a pre-REC last-minute-change?

[12:29:47.0000] <TabAtkins>
Hm, I'd have to do some Bikeshed hacking, but maybe.

[12:30:21.0000] <Domenic_>
(IMO adding a big old "just for lawyers" disclaimer to anything in TR/ seems like a worthwhile thing to do.)

[12:30:47.0000] <Domenic_>
TabAtkins: awesome that you're pushing on this.

[12:40:08.0000] <bz_moz>
aklein: You were looking for me?

[12:45:25.0000] <Domenic_>
woah it's bz on IRC! :O

[12:47:25.0000] <bz_moz>
/me was summoned

[12:47:31.0000] <bz_moz>
Also, I'm always on IRC.

[12:47:35.0000] <bz_moz>
Just not on this network.  ;)

[13:00:42.0000] <aklein>
bz_moz: back from lunch, still around?

[13:01:32.0000] <aklein>
bz_moz: I'm curious what should happen if one uses passes a Window as the key to an ES6 Map/Set (or WeakMap/WeakSet)

[13:02:08.0000] <bz_moz>
Hmm

[13:02:31.0000] <sgalineau>
is the 'no links to WHATWG specs' even followed consistently?

[13:02:40.0000] <sgalineau>
wild guess: probably not

[13:02:45.0000] <bz_moz>
aklein: Excellent question

[13:03:55.0000] <bz_moz>
aklein: I _think_ Gecko+SpiderMonkey uses the windowproxy as-is as the key

[13:04:08.0000] <bz_moz>
aklein: and in particular, that you can use it as a key across navigations

[13:04:09.0000] <aklein>
bz_moz: that's what it looks like from a quick test

[13:04:18.0000] <sicking>
Domenic_: why couldn't a buffering strategy be passed to the ctor?

[13:04:19.0000] <bz_moz>
aklein: But that's based on code inspection, not experiment

[13:04:23.0000] <aklein>
bz_moz: the current Blink/V8 implementation does the opposite

[13:04:29.0000] <Domenic_>
sicking: there is no ctor in the channel proposal

[13:05:11.0000] <sicking>
Domenic_: aah, "Channel()" vs. "new Channel()"?

[13:05:15.0000] <bz_moz>
aklein: Exciting

[13:05:27.0000] <Domenic_>
sicking: yeah. Which brings up the question of how input and output came to be. What are they instances of, etc.

[13:05:36.0000] <bz_moz>
bholley: Good.  You're needed in this conversation.  ;)

[13:05:46.0000] <bz_moz>
bholley: topic: windows as keys for map/set/weakmap

[13:05:52.0000] <aklein>
bz_moz: I've also heard some argue that it they should throw

[13:06:04.0000] <bz_moz>
bholley: aklein says that Blink/V8 uses the Window in this case

[13:06:12.0000] <bz_moz>
bholley: Gecko uses the WindowProxy

[13:06:29.0000] <bholley>
bz_moz: can't talk right now - send me mail?

[13:06:30.0000] <aklein>
or, alternatively, that Ecmascript should decide how Proxies work and try to use that behavior

[13:06:42.0000] <bz_moz>
aklein: an interesting factor here from Gecko's pov is that our security membranes are around the WindowProxy, not the Window

[13:06:44.0000] <bz_moz>
bholley: ok

[13:06:45.0000] <sicking>
Domenic_: you'll probably not like the answer :)

[13:06:56.0000] <Domenic_>
exactly

[13:07:08.0000] <bz_moz>
aklein: so any time you might have a cross-global reference it ends up going through WindowProxy

[13:07:26.0000] <sicking>
Domenic_: they can test true for "readable instanceof ReadableStream". But you wouldn't be able to instantiate a ReadableStream directly

[13:07:35.0000] <sicking>
Domenic_: it's unclear to me what downside that has though

[13:07:41.0000] <bz_moz>
aklein: and as a side note, a self-hosted set implementation would end up using the WindowProxy always, since you can't get at Window from script.

[13:07:46.0000] <aklein>
bz_moz: when I say that V8 stores the Window, I just mean that the Window is what's used to generate the hash code/check for equality

[13:07:47.0000] <Domenic_>
sicking: how did that ReadableStream get created in the first place?

[13:08:03.0000] <sicking>
Domenic_: i know Alex likes to beat the "everything should have a constructor" drum, but i'm not convinced

[13:08:17.0000] <bz_moz>
aklein: right, so once you navigate, your key's identity changes

[13:08:23.0000] <bz_moz>
aklein: effectively

[13:08:43.0000] <aklein>
bz_moz: right

[13:09:01.0000] <bz_moz>
aklein: this seems like a siuation where we should go back to use caes...

[13:09:05.0000] <aklein>
bz_moz: self-hosting point is interesting...do you get the impression that WindowProxy is indeed implementable using ES6 Proxies?

[13:09:05.0000] <bz_moz>
er, cases

[13:09:33.0000] <bz_moz>
aklein: Not fully

[13:09:48.0000] <Domenic_>
sicking: well how did those objects get created in the first place, if not by constructors?

[13:09:52.0000] <bz_moz>
aklein: The part that is not implementable, imo, is having "this" return the windowproxy at global scope

[13:10:26.0000] <aklein>
bz_moz: ah, I guess I care less about that for these purposes

[13:10:46.0000] <bz_moz>
aklein: And perhaps some weirdness in terms of bareword getter invocations on the global and the this object those getters see

[13:10:51.0000] <bz_moz>
Apart from that I think it is, yes

[13:11:10.0000] <bz_moz>
windowproxy is not really very magic in terms of what it does.

[13:11:25.0000] <sicking>
Domenic_: they can be just plain "dictionaries" but with a .prototype set to ReadableStream

[13:11:26.0000] <bz_moz>
bholley has a proposed spec for it... lemme dig it up

[13:11:47.0000] <Domenic_>
sicking: how were they created, though?

[13:11:58.0000] <sicking>
Domenic_: new Object()

[13:12:04.0000] <aklein>
bz_moz: anyway, V8 folks are inclined to switch to something like the SpiderMonkey semantics, but it smelled kinda funny to me; if expandos disappear with navigation, why not "private" expandos implemented using WeakMap?

[13:12:21.0000] <Domenic_>
sicking: so how do you access their internal state?

[13:12:25.0000] <Domenic_>
sicking: wait for my reply in-thread

[13:12:55.0000] <sicking>
Domenic_: how is this different from the object that's passed to the ReadableStream constructor?

[13:13:16.0000] <bz_moz>
aklein: So the main reason expandos disappear on navigation is to prevent sites polluting each others global scopes

[13:13:24.0000] <bz_moz>
aklein: at least that's how it started

[13:13:35.0000] <bz_moz>
aklein: that would not be an issue in the weakmap case

[13:13:45.0000] <bz_moz>
aklein: but yes, I agree it could be a bit weird

[13:13:57.0000] <sicking>
Domenic_: ReadableStream also has a bunch of internal state which can't be accessed from the outside. The only difference here is that both sides could be tested with instanceof

[13:14:06.0000] <bz_moz>
aklein: I _really_ wish we had distinct objects representing "the navigation context" and "the global currently inside the navigation context"

[13:14:11.0000] <bz_moz>
aklein: instead of the mess we have right now

[13:14:29.0000] <Domenic_>
sicking: the revealing constructor pattern *explains* how you can have access to something's internals

[13:14:35.0000] <bz_moz>
aklein: But I can't have that pony....

[13:14:44.0000] <sicking>
Domenic_: i don't see the difference

[13:15:34.0000] <sicking>
oh, wait, i think i read that wrong

[13:15:37.0000] <sicking>
Domenic_: nm

[13:15:48.0000] <Domenic_>
sicking: between `var x = {}; x.__proto__ = ReadableStream.prototype; addABunchOfInternalStateTo(x); manipulateInternalStateOf(x);` and `var x = new ReadableStream(manipulateInternalState)`?

[13:16:16.0000] <Domenic_>
sicking: there is not much difference besides the former is awkward and tries to dodge JS constructor semantics all the while reinventing them; while the latter uses the language as it is.

[13:17:33.0000] <sicking>
the resulting ReadableStream interface seems identical, no?

[13:18:20.0000] <sicking>
Domenic_: i'm not married to how you construct these things

[13:18:24.0000] <aklein>
bz_moz: sounds like this ought to be a public-script-coord thread?

[13:18:27.0000] <sicking>
Domenic_: one option is to simply do somehting like this

[13:19:02.0000] <sicking>
Domenic_: `var x = new ReadableStream((WritableStream) => { ... })`

[13:19:58.0000] <bz_moz>
aklein: yes

[13:20:02.0000] <sicking>
Domenic_: if you prefer that over `{ readable, writable } = <new> Channel()` then i'm fine with that too

[13:20:03.0000] <bz_moz>
aklein: we should figure out use cases

[13:20:21.0000] <bz_moz>
aklein: like "associate stuff with this window" vs "associate stuff with the stuff currently in this window".  :(

[13:20:33.0000] <bz_moz>
aklein: maybe we need both behaviors in different cases or some such insanity.  :(

[13:20:35.0000] <aklein>
bz_moz: those are indeed the use cases  :)

[13:21:27.0000] <aklein>
bz_moz: the current HTML spec text tends towards the latter: "This object is unusual in that all operations that would be performed on it must be performed on the Window object of the browsing context's active document instead". But I suspect that wasn't considering object identity to be a thing

[13:21:40.0000] <Domenic_>
sicking: see my longer post https://github.com/whatwg/streams/issues/102#issuecomment-40442921 where I analyze that possibility

[13:22:28.0000] <Domenic_>
sicking: you can't get away with just that. it needs to be more like `new ReadableStream({ start(ws) { .. }, pull(ws) { ... }, cancel() { ... } })`

[13:23:12.0000] <Domenic_>
sicking: and at that point the difference between (push, done, error)` and `({ write, close, abort })` is simply that the latter implies a false symmetry whereas the former communicates the underlying semantics more clearly.

[13:23:27.0000] <sicking>
Domenic_: i guess i care less about how these things are constructed. I'd prefer to optimize for having a simple API.

[13:23:54.0000] <sicking>
Domenic_: I agree it's a tricky situation since we want to create a pair of objects that have an inherent connection to each other

[13:23:55.0000] <Domenic_>
sicking: for sure. I think they're not that bad though. I think you're really feeling the lack of a transform stream helper.

[13:24:38.0000] <sicking>
Domenic_: no, my main concern is too much API surface, not a lack of sugar

[13:24:59.0000] <aklein>
bz_moz: while I have you around I also wanted to pick your brain about what ES6 should do about the notion of the "entry settings object" in HTML (which is also just now coming up in the Blink/V8 implementation of Promises)

[13:25:09.0000] <Domenic_>
sicking: OK, fair. But I think we're solving a large problem and doing it without the benefit of magic to hide API surface from us.

[13:25:19.0000] <aklein>
bz_moz: annevk helpfully pointed me to a recent es-discuss thread on the issue but I didn't see any conclusion

[13:25:25.0000] <bz_moz>
aklein: There wasn't any

[13:25:35.0000] <Domenic_>
sicking: if you look at the old W3C streams draft they had no constructors, which achieves the level of simplicity you are aiming at, but of course at the cost of lack of explanatory power.

[13:25:41.0000] <Domenic_>
sicking: the actual consumer-level API surface is pretty simple.

[13:26:15.0000] <bz_moz>
aklein: I gave up trying to convince people that this needs solving, for now

[13:26:21.0000] <bz_moz>
aklein: though of course it does need solving.

[13:26:21.0000] <aklein>
bz_moz: the highest-level question I had was "how important is this concept for new APIs?"

[13:26:28.0000] <sicking>
Domenic_: actually, i think it'd work if we just create something like `new ReadableStream((wriablestream) => { ... })`

[13:26:40.0000] <aklein>
bz_moz: it seems like only a few DOM APIs depend on it

[13:27:01.0000] <bz_moz>
aklein: it's basically needed for any API that can call from "the platform" into "user script", whatever that means

[13:27:05.0000] <sicking>
Domenic_: the writablestream could have a constructor which you need to pass some internal communication object

[13:27:24.0000] <sicking>
Domenic_: then ReadableStream could create that internal communication object

[13:27:29.0000] <bz_moz>
aklein: WebIDL currently defines that to be any time a WebIDL callback or callback interface is invoked

[13:27:49.0000] <sicking>
Domenic_: hrm... we'd still be left with that internal communication object being exposed as an API surface but that no-one should use ever

[13:28:00.0000] <sicking>
Domenic_: no-one other than ReadableStream that is

[13:28:06.0000] <aklein>
bz_moz: I thought this was defined by HTML...maybe it's moved? I did see Hixie asking heycam|away to change something about this

[13:28:47.0000] <bz_moz>
aklein: HTML defines the settings object stack, kinda

[13:28:56.0000] <bz_moz>
aklein: WebIDL defines how it's used

[13:28:59.0000] <Domenic_>
sicking: plus, that doesn't work, since WritableStream by itself isn't enough to form a new readable stream

[13:29:08.0000] <bz_moz>
aklein: it's not a great situation.  :(

[13:29:10.0000] <sicking>
Domenic_: how so?

[13:29:14.0000] <Domenic_>
sicking: as I said, it's more like `new ReadableStream({ start(ws) { .. }, pull(ws) { ... }, cancel() { ... } })`

[13:29:24.0000] <aklein>
bz_moz: right, and ES refers to neither of those

[13:29:32.0000] <Domenic_>
sicking: because you need (1) to define what happens on startup; (2) to define what happens in reaction to pull; (3) to define what happens in reaction to cancel

[13:29:42.0000] <bz_moz>
aklein: yup

[13:29:45.0000] <Domenic_>
sicking: (1) and (2) perform operations that look something like writing into a writable stream, if you tilt your head funny

[13:29:47.0000] <sicking>
Domenic_: on startup the stream is empty

[13:29:53.0000] <Domenic_>
sicking: (but are actually more like pushing into a queue)

[13:29:58.0000] <Domenic_>
sicking: but how do you e.g. open a file handle?

[13:30:00.0000] <aklein>
bz_moz: agreed. but even if we can't get it specified properly for organizational reasons it'd be nice to get some compatibility between implementations of, e.g., Promises

[13:30:21.0000] <aklein>
bz_moz: is the SpiderMonkey/Gecko behavior to treat these new ES things as if they were WebIDL callbacks?

[13:30:45.0000] <sicking>
Domenic_: that's hard to answer given that ES6 doesn't have a concept of opening a file handle

[13:30:55.0000] <Domenic_>
sicking: i think you're missing the point...

[13:31:01.0000] <bz_moz>
aklein: the current Promise impl in Gecko is not in SpiderMonkey; it's in Gecko proper and defined via WebIDL

[13:31:11.0000] <bz_moz>
aklein: so yes, it follows whatever our webidl implementation's rules are

[13:31:23.0000] <sicking>
Domenic_: but conceptually you'd open a file handle, then start feeding data from it into the WritableStream

[13:31:39.0000] <aklein>
bz_moz: amusingly this came up in Blink/V8 land because we're switching from a Blink implementation to one in V8

[13:31:40.0000] <sicking>
Domenic_: until the WritableStream indicates back pressure

[13:31:52.0000] <Domenic_>
sicking: so, that's what start(ws) { ... } would do. It uses the context to expose the internal ws to you

[13:31:55.0000] <sicking>
Domenic_: then you stop reading until the WritableStream indicates that back pressure is off

[13:32:08.0000] <Domenic_>
sicking: ok, now you need two more hooks: one to react to pulls, and one to react to cancels.

[13:32:40.0000] <Domenic_>
sicking: if we didn't have pull() and cancel(), then it could be `new ReadableStream(ws => ...)`

[13:32:44.0000] <sicking>
Domenic_: WritableStream already has the needed surface, no?

[13:32:58.0000] <Domenic_>
sicking: nope. how do you close the underlying file descriptor in reaction to a cancellation?

[13:33:24.0000] <Domenic_>
sicking: and how do you get notified that someone wants to read from your readable stream, if all you have access to is a writable stream?

[13:33:38.0000] <sicking>
Domenic_: .closed.then(() => { closeFileHandle() })

[13:33:42.0000] <Domenic_>
sicking: cancellation is pretty clear-cut. it doesn't involve the writable side at all

[13:35:32.0000] <Domenic_>
sicking: how do you distinguish between purposeful premature cancellation and natural end-of-file closing?

[13:35:43.0000] <Domenic_>
sicking: you'd have to add a new public `.cancelled` hook

[13:35:54.0000] <sicking>
Domenic_: You close in the response to the .closed promise resolving. You get notified about someone wanting to read by using .state and wait()

[13:36:17.0000] <Domenic_>
sicking: .state and .wait() on the writable stream side have nothing to do with someone wanting to read from the readable stream side

[13:36:17.0000] <sicking>
Domenic_: the end-of-file isn't something that the reader indicates

[13:36:31.0000] <sicking>
Domenic_: that seems wrong?

[13:36:48.0000] <Domenic_>
sicking: right, but if you make me depend on the public .closed interface, i can't distinguish what the reader indicates from what the internals indicate

[13:37:19.0000] <Domenic_>
sicking: how so wrong? it's clearly true that if i call rs.read(), nothing at all happens to the writable stream.

[13:37:27.0000] <aklein>
bz_moz: anyway, we're working on the v8 team to see if we can at least get their stuff to better understand the HTML/WebIDL way of doing callbacks

[13:37:46.0000] <bz_moz>
aklein: sounds good.  :)

[13:38:22.0000] <sicking>
Domenic_: we clearly have very different models in our head

[13:38:33.0000] <Domenic_>
sicking: mind coding yours up? :)

[13:39:13.0000] <sicking>
Domenic_: sadly i don't have the time. I'm trying to get Gozala to do it, but he's also set on chaing the ReadableStream and WritableStream interfaces which I think clouds the conversation

[13:39:31.0000] <Domenic_>
sicking: :-/

[13:39:59.0000] <sicking>
i also won't be writing it in a style that looks very JSy as I'm not a JS guy

[13:40:54.0000] <sicking>
i feel confident that I can create a channel object which has your ReadableStream API on one side, and your WritableStream API on the other side

[13:41:19.0000] <sicking>
and that that would be all that's needed (modulo maybe minor tweaks that I've missed)

[13:42:35.0000] <sicking>
the constructor part is tricky I agree

[13:42:55.0000] <sicking>
I can't see a way to do that without exposing either useless interfaces to the outside world, or by using C++ magic

[13:43:12.0000] <sicking>
i don't know which is worse

[13:45:57.0000] <Domenic_>
I don't see what advantages this has over the existing model.

[13:46:17.0000] <Domenic_>
It is just a no-op transform stream

[13:46:43.0000] <Domenic_>
those will be easy to create

[13:46:55.0000] <Domenic_>
and if people want to use them directly and handle all the relevant complexity themselves, more power to them.

[13:47:04.0000] <Domenic_>
but at least we'll have explained where they come from

[13:47:19.0000] <Domenic_>
and given a more usable alternative (viz. using the original constructors)

[14:06:20.0000] <sicking>
the only advantage is that there's a smaller API

[14:07:00.0000] <sicking>
i'm not sure if the smaller API comes at the cost of reduce performance

[14:07:09.0000] <sicking>
but that's what i'd like to explore

[14:08:40.0000] <sicking>
but if there's a performance cost to it, then that makes the current Readable/WritableStream APIs (not impl) somewhat suspect

[14:09:20.0000] <Domenic_>
I think the smaller API can be achieved by just teaching people `var { input, output } = transformStreamFactory(function (x) { return x; })` and not teaching them the constructors

[14:09:36.0000] <Domenic_>
I don't think it makes them suspect, because you are twisting them into situations they were not meant for

[14:09:44.0000] <Domenic_>
you are trying to use them for something that is actually just a simple queue

[14:09:49.0000] <Domenic_>
and doesn't have all of the complexity of a full stream

[14:12:12.0000] <sicking>
is perhaps this complexity something that's needed for IO streams, but not for other streams?

[14:14:47.0000] <Domenic_>
if we take "IO streams" to mean "streams that handle buffering for you while staying performant for sync cases" then yes, I think so.

[14:16:44.0000] <Domenic_>
there's a large cottage ecosystem in Node.js of making it easy to simply create/consume/etc. "observables," with Node streams underlying them.

[14:16:48.0000] <Domenic_>
e.g. "mapStream" etc.

[14:17:29.0000] <Domenic_>
and DSLs so that `myObservable.map(fn)` becomes shorthand for `readableStream.pipe(new MapStream(fn))`

[14:17:46.0000] <Domenic_>
Yehuda and I have some thoughts on how to integrate these observables well with streams

[14:18:11.0000] <Domenic_>
e.g. if observables end up being described by a `.subscribe(onNext, onError, onComplete)` in a similar fashion to promises

[14:18:23.0000] <Domenic_>
then we could add that to readable streams so that they duck-type as observables

[14:43:38.0000] <bholley>
bz_moz: here now

[14:54:42.0000] <annevk>
ah you guys, discussing all the interesting stuff while I was at the movies

[14:56:22.0000] <Domenic_>
was it a good movie at least?

[14:58:58.0000] <annevk>
bz_moz: this being WindowProxy we should solve by ES providing a hook for the embedder to set this to something else than the global

[15:00:31.0000] <annevk>
aklein: either Domenic_ or Allen should solve the issue with promises and the settings object

[15:00:39.0000] <annevk>
Domenic_: yes, a classic, Castle in the Sky

[15:01:00.0000] <annevk>
I just realized that with https://bugs.ecmascript.org/show_bug.cgi?id=1898 not fixed, the Realm API is probably not adequate in expressing the current setup

[15:01:02.0000] <Domenic_>
ah yes, always fun

[15:01:25.0000] <Domenic_>
annevk: that seems urgent

[15:02:35.0000] <annevk>
Domenic_: I guess I'll email es-discuss again, see what they say...

[15:02:53.0000] <Domenic_>
annevk: the realm api argument helps

[15:03:02.0000] <Domenic_>
annevk: I still think my position on script settings objects from http://esdiscuss.org/topic/specification-styles#content-15 is the most tenable

[15:05:42.0000] <annevk>
Domenic_: why? That doesn't seem to match existing implementations

[15:06:07.0000] <annevk>
Domenic_: note that Chrome / V8 ran into the problem bz_moz described

[15:06:22.0000] <Domenic_>
annevk: what part of my message are you saying doesn't match existing implementations?

[15:06:30.0000] <annevk>
Domenic_: this is why promises are not shipping in Chrome 35

[15:07:04.0000] <Domenic_>
yes, i remember

[15:08:23.0000] <Domenic_>
annevk: there are certain WebIDL functions/getters/setters that have exotic [[Call]] that depends on global state

[15:08:50.0000] <Domenic_>
annevk: this should be specified in their definition of [[Call]], not in ES's

[15:10:10.0000] <annevk>
Domenic_: no, this is valid for all new entry points

[15:10:29.0000] <annevk>
Domenic_: until you had an event loop, you did not have this problem, because you could not create new entry points

[15:12:12.0000] <annevk>
Domenic_: in particular, "async" callbacks need to use http://www.whatwg.org/specs/web-apps/current-work/#jump-to-a-code-entry-point (this problem sort of exists in IDL too, it's not well defined yet)

[15:13:29.0000] <Domenic_>
annevk: but that's only relevant to certain WebIDL funcitons that depend on the script settings object

[15:13:40.0000] <Domenic_>
annevk: which is why the problem only shows up in CHrome when you use specific functions

[15:15:21.0000] <annevk>
Domenic_: sure, some platform APIs use the settings object

[15:16:06.0000] <annevk>
Domenic_: but they do not have the right context to set it correctly

[15:19:17.0000] <annevk>
Domenic_: anyway, you should probably discuss this with bz_moz

[15:28:48.0000] <annevk>
Domenic_: http://esdiscuss.org/topic/realm-api-and-this-global

[15:29:09.0000] <annevk>
I wonder where that double newline came from

[15:30:13.0000] <Domenic_>
annevk: it's a bug in the esdiscuss.org scripts, happens whenever there's angle brackets in the line -_-


2014-04-16
[17:33:41.0000] <zewt>
browsers very challenging to use when they don't show a busy pointer

[17:33:53.0000] <zewt>
click link, nothing happens, wonder

[17:35:20.0000] <zewt>
TabAtkins: not sure if relevant but http://krijnhoetmer.nl/irc-logs/whatwg/20140412#l-231

[17:36:38.0000] <SamB>
zewt: how does that work when there is no pointer to start with

[17:37:01.0000] <SamB>
I bet mobile users hate imagemaps even more than desktop users do ;-)

[17:37:22.0000] <zewt>
that's a problem for those platforms, if I'm on a platform with a mouse (or equivalent), it needs to show that it heard my click

[17:38:20.0000] <zewt>
(was looking for that link above, and getting irritated at clicking links on that page, and not being able to tell naturally whether it was network lag or just me fatfingering the touchpad)

[17:38:23.0000] <SamB>
hmm, don't they usually replace the favicon with a throbber too?

[17:38:35.0000] <zewt>
that's not an alternative--that's not where I'm looking when I click

[18:10:49.0000] <MikeSmith>
.

[18:11:31.0000] <paul_irish>
.

[18:12:13.0000] <MikeSmith>
heh

[19:23:01.0000] <MikeSmith>
slightlyoff: can you let Takuya know I'm downstairs?

[06:14:26.0000] <jgraham>
zcorpan: Did you see I reviewed your worker changes?

[06:14:57.0000] <zcorpan>
jgraham: nope. lost focus of critic

[06:15:00.0000] <zcorpan>
jgraham: thanks

[06:26:44.0000] <jgraham>
zcorpan: For the record, I am still seeing some instability in /html/infrastructure/urls/resolving-urls/query-encoding/* and /websockets/unload-a-document/[005|003].html

[06:27:24.0000] <zcorpan>
jgraham: do you have more details for query-encoding?

[06:33:38.0000] <zewt>
n.onshow = () => setTimeout(() => n.close(), 7000) <- this syntax is not even remotely okay

[06:34:03.0000] <zewt>
stop taking one of the syntactically cleaner languages and making it gross

[06:34:24.0000] <Ms2ger>
/me gets off zewt's lawn

[06:41:03.0000] <jgraham>
zcorpan: TEST-UNEXPECTED-FAIL | /html/infrastructure/urls/resolving-urls/query-encoding/utf-16be.html | loading image <video poster> | expected PASS | assert_equals: expected substring %C3%A5 got undefined expected 2 but got 24

[06:41:07.0000] <jgraham>
TEST-UNEXPECTED-FAIL | /html/infrastructure/urls/resolving-urls/query-encoding/utf-16le.html | loading image <video poster> | expected PASS | assert_equals: expected substring %C3%A5 got undefined expected 2 but got 24

[06:41:11.0000] <jgraham>
TEST-UNEXPECTED-FAIL | /html/infrastructure/urls/resolving-urls/query-encoding/utf-8.html | loading image <video poster> | expected PASS | assert_equals: expected substring %C3%A5 got undefined expected 2 but got 24

[06:41:34.0000] <jgraham>
TEST-UNEXPECTED-FAIL | /html/infrastructure/urls/resolving-urls/query-encoding/windows-1252.html | hyperlink auditing <area ping> | expected TIMEOUT | assert_unreached: Reached poll timeout Reached unreachable code

[06:41:54.0000] <jgraham>
TEST-UNEXPECTED-FAIL | /html/infrastructure/urls/resolving-urls/query-encoding/utf-16be.html | CSS <link> (utf-8) #<id>::before { content:<url> } | expected PASS | assert_unreached: Reached poll timeout Reached unreachable code

[06:42:43.0000] <zcorpan>
MikeSmith: webvtt in http://platform.html5.org should have the link updated

[06:42:57.0000] <jgraham>
That's from 3 runs, so it isn't really telling you much about low-frequency failures

[06:45:06.0000] <zcorpan>
jgraham: for <area ping> do you think there's a race between the test timing out and the xhr interval timing out? (maybe it can set the result to TIMEOUT instead?)

[06:45:29.0000] <zcorpan>
jgraham: that test would reliably FAIL if gecko didn't lie about supporting it

[06:45:48.0000] <jgraham>
zcorpan: Yeah, that's a plausible race

[06:47:57.0000] <jgraham>
I guess it's *possible* to set the status to timeout, but it's not really supported

[06:52:58.0000] <MikeSmith>
zcorpan: fixed

[06:55:19.0000] <MikeSmith>
“consensus is the lack of leadership”

[06:55:32.0000] <MikeSmith>
from http://gigaom.com/2014/04/12/why-i-quit-writing-internet-standards/

[06:55:44.0000] <MikeSmith>
attributed to Margaret Thatcher

[06:56:15.0000] <MikeSmith>
Hixie: ↑

[06:56:24.0000] <Ms2ger>
Well

[06:56:33.0000] <Ms2ger>
"My seven years on the Internet Engineering Task Force (IETF), ..."

[06:57:20.0000] <darobin>
was that Maggie channelling Hixie? :)

[06:58:00.0000] <yoav>
Who's the best person to bug about fonts, their dimensions, "ex" and "ch" units and media queries?

[06:59:00.0000] <Ms2ger>
Let's just say TabAtkins

[07:01:18.0000] <MikeSmith>
yoav: I agree with Ms2ger

[07:01:34.0000] <MikeSmith>
I smell a consensus emerging

[07:01:56.0000] <yoav>
consensus is good. Is there a use case as well?

[07:02:00.0000] <SimonSapin>
yoav: Does this help? http://dev.w3.org/csswg/mediaqueries/#units second paragraph

[07:02:46.0000] <Ms2ger>
yoav, no, consensus is the lack of leadership ;)

[07:02:57.0000] <MikeSmith>
yoav: a use case for TabAtkins?

[07:03:51.0000] <yoav>
SimonSapin: I'm not sure I understand what does it mean for 'ex' and 'ch'. Is there a default value for them? (like the default font size is for 'em')

[07:04:56.0000] <SimonSapin>
well, let’s look at their definition

[07:05:22.0000] <SimonSapin>
http://dev.w3.org/csswg/css-values/#font-relative-lengths "ch unit: Equal to the used advance measure of the "0" (ZERO, U+0030) glyph found in the font used to render it."

[07:05:59.0000] <SimonSapin>
so you do that with the initial value of font-family, font-size, font-weight, etc

[07:07:04.0000] <SimonSapin>
in other words, as in a document with no style (including UA) applied

[07:07:07.0000] <TabAtkins>
'ex' has a default value if there's no font around - it's .5em.

[07:07:18.0000] <TabAtkins>
'ch' doens't have a value without a font, and that's a bug.

[07:08:07.0000] <SimonSapin>
TabAtkins: I’m not the .5em thing applies to MQs

[07:08:11.0000] <SimonSapin>
I’m not convinced*

[07:08:32.0000] <TabAtkins>
Why wouldn't it? It's for when the font doesn't tell you an 'ex' size.

[07:08:43.0000] <TabAtkins>
Which I suspect would include when there's no font at all.

[07:08:57.0000] <yoav>
SimonSapin & TabAtkins: So, in the context of Media queries, I'd need to get the default browser font, and get the metrics from it?

[07:08:58.0000] <SimonSapin>
there is a font, the initial value of font-family

[07:09:18.0000] <SimonSapin>
yoav: I think so, but TabAtkins seems to disagree

[07:09:21.0000] <TabAtkins>
SimonSapin: Ugh, I guess so, but that's ugly and not very useful.

[07:09:58.0000] <SimonSapin>
ex is ugly in any case, but meh

[07:10:28.0000] <TabAtkins>
ex is a useful unit; you hush your mouth.

[07:10:38.0000] <yoav>
Impl wise, if I have to take a shortcut around their calculation for MQs

[07:10:43.0000] <SimonSapin>
yoav: 1ex = 0.5em is valid per spec if you don’t want to bother doing all this

[07:10:49.0000] <SimonSapin>
"impractical"

[07:11:05.0000] <yoav>
What do I do as a default value for 'ch'?

[07:11:21.0000] <TabAtkins>
I'll bring it up in the call this morning and edit the spec.

[07:11:28.0000] <TabAtkins>
It'll probably be .5em as well.

[07:11:49.0000] <SimonSapin>
TabAtkins: what do implementations do?

[07:11:51.0000] <yoav>
TabAtkins: Sounds great!

[07:12:12.0000] <TabAtkins>
SimonSapin: No clue. Not sure who implements 'ch' yet.

[07:12:45.0000] <SimonSapin>
I’ll try and make a test case for ex in MQs

[07:12:58.0000] <TabAtkins>
Well, Blink implements it.  Let's see...

[07:13:24.0000] <yoav>
TabAtkins: Blink has a zeroWidth() on the platform's fontMetrics

[07:14:02.0000] <yoav>
But calling it triggers some weird witchcraft, which makes it impossible for me the cache it just before starting a new thread and passing the value to that thread

[07:16:19.0000] <yoav>
Looks like this zeroWidth is set by looking at the actual glyphs

[07:17:32.0000] <yoav>
TabAtkins: I think I'd be able to get these values into where I need them at some point, but I'd love a reasonable default I can use to substitute them in the mean time

[07:18:02.0000] <TabAtkins>
.5em is definitely a reasonable default for both of them, even if it's just a temporary value that you'll fix later.

[07:21:00.0000] <SimonSapin>
(min-width: 100ex) and (min-width: 50em) switch at different points on Gecko and Blink on my system http://result.dabblet.com/gist/10883309/fc063ef48196cedcbd457f1609de1e4041e9d5d9

[07:23:14.0000] <SimonSapin>
TabAtkins: I’m fine with allowing 1ch = .5em "where it is impossible or impractical to determine" like ex, but not with "it must be .5em in MQs"

[07:23:47.0000] <TabAtkins>
I'm okay with that.

[07:31:52.0000] <TabAtkins>
Based on initial testing, Blink uses the real value of 'ex' in MQs, but doesn't support 'ch' at all yet.

[07:35:52.0000] <zcorpan>
i find not supporting 'ch' at all bettre than 0.5em

[07:36:10.0000] <MikeSmith>
annevk: the Writing section of the URL spec doesn't specify what code points are valid in a schem

[07:36:14.0000] <zcorpan>
at least in the preloader context

[07:36:15.0000] <MikeSmith>
e

[07:37:32.0000] <TabAtkins>
zcorpan: At least in Chrome's default serif font, 1ch exactly equals .5em.

[07:38:43.0000] <annevk>
MikeSmith: "A scheme must be one ASCII alpha, followed by zero or more of ASCII alphanumeric, "+", "-", and ".". A scheme must be registered ...."

[07:40:36.0000] <zcorpan>
TabAtkins: yeah but what if it isn't and you have breakpoints where you care about 'ch' specifically, it would be bad if the preloader thinks one thing and later evaluations think another

[07:40:58.0000] <TabAtkins>
Right, if you have sufficient knowledge to do better, you should do better.

[07:42:32.0000] <zcorpan>
gotta go

[07:44:01.0000] <MikeSmith>
annevk: oh I missed that somehow

[08:36:11.0000] <JakeA>
Is there anything aside from AppCache that can be used to determine if a cross-origin url looks like a 200?

[08:38:32.0000] <jgraham>
JakeA: I have no idea about context, but do you mean "in the absence of CORS"?

[08:38:45.0000] <JakeA>
jgraham: yeah

[08:39:26.0000] <annevk>
JakeA: aah, cross-origin...

[08:40:06.0000] <jgraham>
I'm not sure about arbitary urls but <img> and <script> could be used for resources with known behaviour

[08:40:25.0000] <JakeA>
Trying to work out what to do for serviceworker caches. Either follow AppCache and consider 4xx 5xx a failure, or consider that AppCache feature an error that shouldn't be repeated

[08:40:59.0000] <JakeA>
jgraham: Good point, CSS too.

[08:50:05.0000] <tobie_>
JakeA: I'll be working with Moz on their SW implementation. Essentially on the testing part + API feedback

[08:50:26.0000] <JakeA>
Oh cool!

[08:50:53.0000] <tobie_>
JakeA: we should sync on the testing front to make sure we don't dup the effort.

[08:52:19.0000] <JakeA>
tobie_: Agreed. I'm not at that stage yet (still sorting out the algorithms), don't suppose you're posting to a mailing list?

[08:52:38.0000] <jsbell>
tobie_: We're starting a collection of testharness.js tests for SW as we move into end-to-end testable territory.

[08:53:17.0000] <tobie_>
jsbell: are you writing those locally or directly against the W3C repo?

[08:53:37.0000] <jgraham>
tobie_, jsbell: \o/

[08:53:54.0000] <jsbell>
tobie_: Locally for now due to churn, but we'll move them to W3C eventually

[08:54:22.0000] <jgraham>
I am avaliable for all your test automation / infrastructure needs

[08:54:38.0000] <jernoble|laptop>
ericc: so i have a text track question for you.

[08:54:40.0000] <jsbell>
For now just in https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/http/tests/serviceworker/

[08:56:02.0000] <tobie_>
jgraham: awesome. SW lifecycle makes testing a tad challenging

[08:56:41.0000] <tobie_>
Will have to dig more before I can meaningfully ask for help.

[08:56:52.0000] <jsbell>
speaking of testharness.js - step_func doesn't propagate the return value through so you can't use it in a Promise chain. Should we fix?

[08:57:04.0000] <jgraham>
tobie_: Yep, I expect there could be some challenges

[08:57:24.0000] <jgraham>
jsbell: Fixes to make testharness.js better for promise APIs would be awesome

[08:57:42.0000] <tobie_>
jsbell: thanks for the link.

[08:58:19.0000] <jgraham>
I notice that zcorpan reviewed https://critic.hoppipolla.co.uk/r/1151 so I will fix that up. Might make writing some tests a little bit easier.

[08:58:22.0000] <tobie_>
JakeA: what's the preferred place to discuss Sw?

[08:58:25.0000] <jsbell>
jgraham: I'll see if it's as simple as I think, then make a PR

[08:59:35.0000] <JakeA>
tobie_: If it's an isuse, https://github.com/slightlyoff/ServiceWorker/issues/. For general stuff, public-webapps I guess

[08:59:48.0000] <tobie_>
ty

[10:23:45.0000] <jsbell>
JakeA: SW's Unregister rejects if the registration is not found. That makes it non-idempotent, and unlike e.g. Indexed DB. Is there a strong reason for that?

[10:27:31.0000] <JakeA>
jsbell: No strong opinion on that one. Means you won't be able to tell the difference between a successful unregistration & a typo in the scope, but consistency sounds better

[10:27:53.0000] <jsbell>
I'll file a bug.

[10:29:00.0000] <JakeA>
Cheers, if there's no complaints I'll fix that tomorrow (going to get rid of algorithms.md and just add them to the spec)

[10:29:16.0000] <JakeA>
(still can't spell algorithms without a spellcheck)

[10:32:24.0000] <jsbell>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/233 - thanks.

[11:04:37.0000] <arunranga>
annevk, do you still think that maintaning a check for Blob closure in the read operation for Blob objects is wrong? That is http://dev.w3.org/2006/webapi/FileAPI/#readOperationSection

[11:04:41.0000] <JakeA>
tobie_: So, this ServiceWorker thing is pretty new and big. Thinking about what we can do for user-support & want it to be a cross-browser effort

[11:05:23.0000] <JakeA>
tobie_: Any objections to an IRC room, mailing list & StackOverflow attack?

[11:06:02.0000] <annevk>
arunranga: what is it going to do? return the empty byte sequence?

[11:06:38.0000] <arunranga>
annevk, no; it should return failure along with a termination reason.

[11:06:55.0000] <arunranga>
annevk, I don’t think returning the emtpy byte sequence was the right choice.

[11:07:26.0000] <arunranga>
could you use that in other places, including parse/fetch and formdata?

[11:08:39.0000] <Domenic_>
JakeA: mailing list vs. stackoverflow has historically been a tricky balance

[11:09:27.0000] <arunranga>
annevk, basically we’re fleshing out the model in https://www.w3.org/Bugs/Public/show_bug.cgi?id=25302#c9

[11:09:35.0000] <annevk>
arunranga: I don't understand that model, you have a function that's supposedly async, but sometimes synchronously returns?

[11:09:39.0000] <annevk>
arunranga: how does that make sense?

[11:09:53.0000] <JakeA>
Domenic_: I know. Just been thinking about that. Maybe take mailing list threads and turn them into SO q&a, but maybe they consider that an abuse of SO.

[11:10:05.0000] <arunranga>
annevk, you proposed a wrapper for closure check within that function.

[11:10:22.0000] <arunranga>
annevk, unless you want closure checks within individual APIs, and not on the read operation

[11:12:52.0000] <arunranga>
annevk, I guess the real question is where the closure check should happen.

[11:12:53.0000] <annevk>
arunranga: if you sometimes sync return, all callers will need to check anyway, so I'm not sure how you're helping by making it weird

[11:18:11.0000] <annevk>
arunranga: you'll need to through the various scenarios, and figure out what the best model would be for the programmer

[11:18:18.0000] <Domenic_>
JakeA: as long as it's a well-defined Q&A then you can definitely do that. Answering your own questions is a good thing. People in #promises do that sometimes when we see a FAQ

[11:18:27.0000] <annevk>
arunranga: e.g. should closed blobs fail silently generally or fail hard

[11:18:57.0000] <annevk>
arunranga: once you've sorted that out you can figure out a set of concepts for APIs that take blobs to use

[11:19:37.0000] <annevk>
JakeA: btw, one thing I was wondering about is whether we could expose .status even for OpaqueResponse

[11:20:03.0000] <annevk>
JakeA: that way you'd know something is being redirected or some such

[11:20:14.0000] <annevk>
JakeA: and you could implement AppCache as polyfill?

[11:21:49.0000] <JakeA>
annevk: The more info like that we can expose, the better. Ran that past any security people?

[11:23:16.0000] <annevk>
JakeA: given that it's already exposed...

[11:23:33.0000] <annevk>
JakeA: and the bit of the redirect we'd expose is not the thing that's vulnerable

[11:24:17.0000] <JakeA>
annevk: Wellllll, appcache gives you "it worked" or "it didn't work", where "it didn't work" could be 4xx, 5xx. But it doesn't tell you which

[11:24:55.0000] <Domenic_>
It might be useful to expose the strings "4xx" or "5xx" even

[11:24:58.0000] <annevk>
JakeA: fair, and I guess we rather not expose it at all

[11:25:10.0000] <annevk>
.status is a number

[11:25:21.0000] <Domenic_>
as if JavaScript cares ;)

[11:25:39.0000] <annevk>
given that people do comparison with < and >, I do

[11:25:48.0000] <Domenic_>
still works with strings!

[11:26:39.0000] <Domenic_>
(well, not very well)

[11:27:18.0000] <JakeA>
Having cache.add reject if things are 4xx, 5xx, or cross-origin redirect is enough for most things

[11:27:48.0000] <JakeA>
An option-bag on new Cache() could be used to change those behaviours

[11:28:39.0000] <arunranga>
annevk, there are actually standard synchronous checks for files on disk that won’t be accounted for in the read operation then.

[11:28:47.0000] <arunranga>
annevk, this also includes snapshot state and other things.

[11:29:49.0000] <arunranga>
annevk, individual methods will have to do those. The idea of a ‘reusable’ read operation won’t be that useful then. Or, individual checks will be done for files on disk but not within the read operation.

[11:31:25.0000] <annevk>
I have no idea what you're talking about arunranga|afk :/

[11:32:07.0000] <annevk>
arunranga|afk: the whole point is that read runs in the background, just like fetch... you'll need to elaborate

[11:34:23.0000] <arunranga|afk>
annevk, a read operation should “fail hard” for a closed blob. That check is synchronous, but clearly can’t be done within the read operation itself. Also, a read operation should fail if the file has changed on disk.

[11:35:21.0000] <arunranga|afk>
annevk, that’s what I mean. It’s clear these checks can’t be spec’d in a read operation, so APIs have to individually run these checks. I’m happy with that; I tried to see if we could put it in one place place

[11:36:14.0000] <annevk>
arunranga|afk: I think you need to do some more archeology of how file read actually works

[11:36:21.0000] <annevk>
arunranga: the whole operation should be async

[11:36:32.0000] <annevk>
arunranga: presumably there's bits where it can fail, e.g. if the file was moved

[11:36:48.0000] <annevk>
arunranga: that could happen while reading as well

[11:37:09.0000] <annevk>
arunranga: so you'll have to explain what happens to the bytes that have already been read, and whether anything is signified at that point, etc.

[11:38:23.0000] <Domenic_>
sounds like streeeeeams

[11:38:33.0000] <annevk>
uhuh

[11:38:43.0000] <annevk>
sounds like Domenic_ found his hammer

[11:38:47.0000] <Domenic_>
hahaha

[11:38:52.0000] <annevk>
*new* hammer

[11:38:53.0000] <Domenic_>
so true

[11:39:01.0000] <Domenic_>
yeah i needed a new hammer

[11:39:05.0000] <arunranga>
annevk, sure, but if there’s a hard fail on closure, and that check is synchronous, it can’t be done within the read operation.

[11:39:23.0000] <arunranga>
And Fx currently proposes a snapshot state check that isn’t asynchronous.

[11:39:44.0000] <arunranga>
I think my archaeology is probably ok.

[11:40:14.0000] <arunranga>
I think your insistence on a read operation that’s reusable is good. I’m not sure how some checks can be included within it. That’s fine; FileReader will have to have its own API level checks.

[11:41:23.0000] <arunranga>
Or maybe a task can determine this fail.

[11:41:32.0000] <arunranga>
Domenic_ it does sound like streams

[11:41:41.0000] <arunranga>
(screams/streams)

[11:42:08.0000] <Domenic_>
arunranga: I am not sure streams can help, since this is largely an existing API/paradigm but ... maybe you could conceptualize how it would work if that existing API was built on top of a stream instance?

[11:43:28.0000] <Domenic_>
(I don't really understand the problem being talked about, but people started talking about sync vs. async I/O and bits that could fail and what happens to the bytes that have already been read, which are all questions we answered for streams)

[11:44:22.0000] <annevk>
Domenic_: the problem is basically reading from disk

[11:44:28.0000] <annevk>
Domenic_: how to define that

[11:45:01.0000] <annevk>
arunranga: it seems like nonsense that FileReader would have different failures from other APIs, that should all be part of the read concept

[11:45:02.0000] <Domenic_>
... in a cross-platform way

[11:45:14.0000] <annevk>
uhuh

[11:45:23.0000] <Domenic_>
hammertime answer: with a ReadableStream!

[11:46:47.0000] <annevk>
Yeah, I don't really understand the difficulty, it seems like you keep consuming bytes, something may fail so you need to deal with that, and you need to present that somehow to your caller

[11:47:03.0000] <arunranga>
Tasks would be the right answer.

[11:47:38.0000] <Domenic_>
what is the API under discussion? I thought it was blobs and close()

[11:48:05.0000] <arunranga>
It is! It’s blobs, close() and closure checks within a read operation.

[11:48:18.0000] <Domenic_>
what's the API for a read operation

[11:48:38.0000] <annevk>
FileReader, xhr.send(FormData / Blob)

[11:48:54.0000] <Domenic_>
isn't xhr.send a write?

[11:49:02.0000] <arunranga>
Domenic_, FileReader is a caller for a read operation

[11:49:11.0000] <arunranga>
So’s FormData

[11:49:16.0000] <annevk>
Domenic_: it's a pipe I guess

[11:49:42.0000] <arunranga>
read operation uses a Blob and reads it into memory asynchronously or synchronously

[11:50:36.0000] <Domenic_>
i see

[11:51:08.0000] <arunranga>
annevk, I am probably not using tasks aggressively enough. I’ll rethink this a bit.

[11:51:22.0000] <arunranga>
annevk, thanks.

[11:51:26.0000] <Domenic_>
annevk is always on peoples' case about not using tasks enough ;)

[11:51:36.0000] <Domenic_>
thanks arunranga annevk for patiently explaining to me

[11:51:44.0000] <arunranga>
Domenic_, annevk is always on my case period.

[11:51:48.0000] <Domenic_>
aww

[11:52:19.0000] <annevk>
hah

[11:55:08.0000] <jsbell>
JakeA: FYI, for the extended appcache errors I wedged in, status = 0 for any off-origin failure (4xx, 5xx, or network error)

[11:55:34.0000] <jsbell>
which at least garnered no objections

[11:55:57.0000] <jsbell>
which may say more about how much everyone loves appcache than the proposal...

[12:02:36.0000] <JakeA>
jsbell: that's fair. All we need for SW is fulfill/reject and some vague ability to control what should be considered a failure

[12:02:47.0000] <annevk>
jsbell: URL objects should just be stringified

[12:03:04.0000] <annevk>
jsbell: http://url.spec.whatwg.org/#url-apis-elsewhere re: IDBv2

[12:04:16.0000] <jsbell>
annevk: Not storing URLs; allowing URLs into DB. e.g. <img src="indexeddb:///music/album-covers/1ab2c3df">

[12:04:23.0000] <annevk>
ooh

[12:04:29.0000] <annevk>
confusing

[12:04:30.0000] <jsbell>
(totally made up scheme, don't quote it)

[12:05:13.0000] <jsbell>
Sorry. Mail was unclear. Wiki link is better: http://www.w3.org/2008/webapps/wiki/IndexedDatabaseFeatures

[12:14:03.0000] <arunranga>
jsbell, annevk, scheme proliferation continues :) there’s also a filesystem: scheme to get into the filesystem.

[12:15:08.0000] <Domenic_>
back in my day we just called that C:!!

[12:17:31.0000] <annevk>
arunranga: jsbell: one filesystem: scheme might be good, if we need to support relative references and such

[12:17:40.0000] <annevk>
arunranga: the less URL parser hacks the better

[12:18:40.0000] <arunranga>
annevk, you mean one scheme to rule both the indexeddb use case, and the filesystem use case?

[12:18:45.0000] <annevk>
yes

[12:19:22.0000] <arunranga>
annevk, it could work.

[12:19:23.0000] <Ms2ger>
Call it blobl:

[12:19:26.0000] <Ms2ger>
blob:*

[12:19:51.0000] <Domenic_>
fs:/dev/idb/...

[12:20:25.0000] <annevk>
Domenic_: don't you mean \\lolwindows\file

[12:20:38.0000] <Domenic_>
hehehe

[12:21:02.0000] <Domenic_>
all i'm sayin is that my surface pro 2 was way prettier than all those macbooks at the tag meeting

[12:21:25.0000] <arunranga>
Ms2ger, I wondered about reusing blob: even for filesystem URL (which by the way is in Chrome for the old filesystem API: http://www.html5rocks.com/en/tutorials/file/filesystem/).

[12:21:58.0000] <arunranga>
But I’m not sure now

[12:23:00.0000] <annevk>
I think you want some kind of URL scheme that supports relative URLs

[12:23:07.0000] <annevk>
blob is not that

[12:34:44.0000] <arunranga>
annevk, yep. I’ll bet naming is one of the few following hard problems

[12:41:06.0000] <zewt>
using blob urls for blobs coming from a fs API makes sense, connecting them to fs paths wouldn't

[12:50:45.0000] <annevk>
that depends on what you want to do

[12:51:33.0000] <arunranga>
zewt, the use case is the feature that’s already in Chrome.

[12:56:19.0000] <SamB_>
zewt: but ... plan9!

[13:14:59.0000] <SamB>
Hmm, you guys know MS icon files can have more than one image in, right?  Seems like that's not very well supported on the web ...

[13:37:31.0000] <zewt>
nothing to do with use cases, blob urls have nothing whatsoever to do with paths

[13:38:31.0000] <zewt>
urls for referring to paths inside a filesystem API need a different scheme

[13:39:27.0000] <SamB>
zewt: I guess you missed the joke

[13:42:42.0000] <zewt>
arun was telling a joke?

[13:43:16.0000] <SamB>
no I was

[13:43:40.0000] <SamB>
hmm, okay, I follow you now

[13:45:10.0000] <SamB>
I take it there's a problem with file:/// ?

[13:46:37.0000] <Domenic_>
paul_irish: pretty one-sided poll ;)

[13:47:26.0000] <zewt>
i haven't followed the fs stuff, but i assume it supports sandboxed filesystems

[13:47:32.0000] <zewt>
which wouldn't be file:

[13:49:29.0000] <annevk>
Domenic_: https://plus.google.com/+PaulIrish/posts/QchucJRH7BX is great

[13:49:48.0000] <Domenic_>
:D

[13:51:19.0000] <SamB>
ah, yes, so I see looking at the html5rocks thing

[13:54:52.0000] <SamB>
/me ponders cross-origin file access ;-P

[13:58:24.0000] <SamB>
hmm, how many OSes even provide for asynchronous directory creation ...

[14:02:25.0000] <SamB>
and ... huh ... I'm not aware of any OSes that have handles for directory entries

[14:09:11.0000] <SamB>
and, hmm, why am I thinking that the biggest risk connected with the ability to write malicious files to disk is that a script could write a file to disk for the express purpose of triggering a warning from an antivirus program?

[14:11:26.0000] <SamB>
or, um, it could cause searches in explorer on XP to pop up that annoying dialog box it pops up for multi-volume zips ...

[14:14:27.0000] <SamB>
lol @ <http://www.w3.org/respec/>: "sadly it cannot replace RFC 2119 with the more accurate RFC 6919".

[14:15:36.0000] <tiglionabbit>
has anyone put forward a spec for supporting pen pressure and sub-pixel positioning?

[14:16:32.0000] <SamB>
tiglionabbit: are you looking to write some kind of painting/drawing program?

[14:16:43.0000] <tiglionabbit>
that would be nice

[14:17:21.0000] <tiglionabbit>
currently the only way I know of to get at this information is through CelloSoft JTablet, which is a Java applet plugin

[14:17:34.0000] <tiglionabbit>
and nobody wants to use Java applets anymore

[14:17:52.0000] <SamB>
I don't imagine Android can run those?

[14:18:52.0000] <tiglionabbit>
chrome for mac can’t even run them

[14:19:06.0000] <tiglionabbit>
nor can chrome for chromebooks

[14:20:05.0000] <SamB>
huh

[14:20:32.0000] <SamB>
... isn't there a standard API for JVM plugins?

[14:21:05.0000] <tiglionabbit>
sure, but chrome only distributes a 32-bit version, and java only distributes 64-bit

[14:21:07.0000] <SamB>
by which I mean "whatever Mozilla has been using"

[14:21:10.0000] <SamB>
ah!

[14:21:13.0000] <SamB>
right

[14:22:06.0000] <tiglionabbit>
anyway, has anyone made a spec for this?

[14:22:08.0000] <SamB>
that actually rings a bell for some reason; can't think why as I haven't even messed with any x86 macs that much

[14:22:58.0000] <tiglionabbit>
can I get involved with this somehow?

[14:23:37.0000] <SamB>
sorry, was talking about the mac java thing ...

[14:26:50.0000] <Domenic_>
pointer events?

[14:30:08.0000] <annevk>
tiglionabbit: you could start with hit testing

[14:30:17.0000] <tiglionabbit>
what’s that?

[14:30:19.0000] <annevk>
tiglionabbit: http://lists.w3.org/Archives/Public/www-style/2010Aug/0407.html

[14:30:54.0000] <annevk>
tiglionabbit: it's kind of critical for any kind of cursor input, except we've no idea how it works on the web

[14:31:09.0000] <tiglionabbit>
eh?

[14:32:17.0000] <tiglionabbit>
I’ve never noticed a problem with this

[14:32:32.0000] <tiglionabbit>
I’d be much more interested in getting tablet pen events

[14:32:58.0000] <tiglionabbit>
or, extending the existing events with the tablet pen properties of pressure and sub-pixel position

[14:34:50.0000] <Domenic_>
i think pointer events have this

[14:34:58.0000] <tiglionabbit>
really?

[14:35:11.0000] <Domenic_>
pretty sure, but you should check the spec

[14:35:27.0000] <SamB>
annevk: really? no idea?

[14:36:02.0000] <tiglionabbit>
oh I see

[14:36:37.0000] <tiglionabbit>
unfortunately only supported by IE11 apparently

[14:36:54.0000] <tiglionabbit>
well at least there’s hope

[14:38:31.0000] <Domenic_>
my good deed for the day https://github.com/webcomponents/webcomponents.github.io/issues/96

[14:41:00.0000] <annevk>
SamB: see the email, I'm making it worse than it sounds, but there's no standard, which is pretty bad

[14:41:21.0000] <annevk>
SamB: CSS box tree not being defined in detail contributes to this of course

[14:41:40.0000] <annevk>
SamB: maybe you want to start there if you are doing it from first principles...

[14:42:02.0000] <Domenic_>
I hear TabAtkins is on it ^_^

[14:55:40.0000] <smaug____>
tiglionabbit: pointer events are being implemented in other engines

[14:55:49.0000] <smaug____>
well, I think not webkit, but elsewhere

[15:00:19.0000] <zewt>
SamB: all OS's support async directory creation; you just do it in a thread

[15:00:38.0000] <SamB>
zewt: oh. right.

[15:00:40.0000] <zewt>
(i think windows does support doing every FS operation async with the "overlapped" API)

[15:00:43.0000] <annevk>
cwilso_____: see also http://lists.w3.org/Archives/Public/public-webapps/2012OctDec/thread.html#msg543 and such

[15:01:10.0000] <SamB>
zewt: yes I did get that impression when I looked at their APIs last

[15:01:17.0000] <zewt>
(it may just create a thread behind the scenes)

[15:01:45.0000] <SamB>
or heck it could just not do it asynchronously

[15:02:06.0000] <zewt>
doubt that

[15:02:23.0000] <zewt>
it'd become really obvious as soon as you do something on a dirty CD

[15:02:45.0000] <zewt>
the overlapped API is nasty enough that i'd just do it myself with a thread, though

[15:08:47.0000] <cwilso>
annevk: yep, I'd say abarth and I do not completely agree there.

[15:09:00.0000] <cwilso>
I do agree it should be clear where any spec text came from

[15:09:08.0000] <cwilso>
(and whose work it is)

[15:09:19.0000] <annevk>
yeah, everyone says that

[15:09:21.0000] <cwilso>
canonicality is a tough one.

[15:09:26.0000] <annevk>
lots of nice talk

[15:09:29.0000] <annevk>
little walk

[15:09:31.0000] <annevk>
or some such

[15:10:11.0000] <cwilso>
because.... coming back to what I said like 9 years ago when Hixie et al asked me to join the whatwg effort... there's no IP fence of any kind around the WHATWG spec.

[15:10:22.0000] <cwilso>
because no one adds that text, you mean?

[15:10:34.0000] <cwilso>
If so, that's messed up.

[15:11:19.0000] <cwilso>
(And I do agree with abarth quite strongly that " the document should clearly state that it is based in part (or in whole) on the WHATWG version. "

[15:11:28.0000] <annevk>
"the WHATWG spec"?

[15:12:00.0000] <cwilso>
s/WHATWG spec/WHATWG work.

[15:12:13.0000] <SamB>
annevk: you want it under a license that requires attribution, instead of a PD declaration?

[15:12:20.0000] <SamB>
or, er, cwilso

[15:12:21.0000] <annevk>
because the W3C likes to pretend the WHATWG doesn't really exist

[15:12:21.0000] <cwilso>
that is, the work mode of the W3C engenders some kind of shared IP promise.

[15:12:53.0000] <SamB>
/me sometimes confuses people whose nicks have the same length and capitalization pattern, especially if they get colored similarly in his client ...

[15:13:04.0000] <annevk>
oh

[15:13:06.0000] <annevk>
/me was confused

[15:13:26.0000] <cwilso>
/me thinks that's the first time annevk and he have been confused, and think he's probably more offended than me.

[15:17:25.0000] <SamB>
hmm, now what's a license that requires attribution but isn't too long? expat license looks a bit long to include on spec pages ...

[15:19:01.0000] <cwilso>
samb: was the question to me "do you want it under a license that requires attribution, instead of a PD declaration?"  if so, what's "it"?

[15:19:17.0000] <SamB>
the WHATWG stuff

[15:21:50.0000] <SamB>
hmm, GNU has a nice short one in (info "(maintain)License Notices for Other Files")

[15:23:20.0000] <SamB>
Copying and distribution of this file, with or without modification, are permitted in any medium without royalty provided the copyright notice and this notice are preserved.  This file is offered as-is, without any warranty.

[15:23:30.0000] <SamB>
except maybe that's actually a copyleft by accident?

[15:24:28.0000] <annevk>
SamB: cwilso is not concerned with the license

[15:24:39.0000] <cwilso>
I don't need anything to change.  :P

[15:26:00.0000] <SamB>
/me was just thinking some kind of license requirement would be a reasonable way of ensuring that the W3C don't "forget" to attribute something ...

[15:26:55.0000] <crocket>
!schools

[15:26:56.0000] <annevk>
SamB: requiring something from the W3C would also require something from others, the latter would be bad

[15:31:39.0000] <annevk>
Domenic_: I think the main problem with UI events, btw, is the interaction between them

[15:32:20.0000] <annevk>
Domenic_: e.g. in one task you hit test, dispatch mouseX, check for cancelled, then what? what about focus? what about :hover at this point? etc.

[15:32:55.0000] <SamB>
annevk: well, okay, probably that's not the right form of attribution; maybe something that could be satisfied by simply saying "From WHATWG html:"

[15:33:08.0000] <annevk>
Domenic_: and now it's not just mouse and focus, but also pointer, and "indie UI", and if you're unlucky, touch

[15:34:15.0000] <annevk>
SamB: I don't think the W3C should copy in the first place

[15:34:30.0000] <annevk>
SamB: if they want to make lawyer snapshots so they get IP protection fine, but they're not doing that

[15:35:33.0000] <SamB>
what exactly ARE they doing besides cutting features they think are unstable or something like that?

[15:37:16.0000] <annevk>
SamB: they're causing confusion and wasting resources

[15:38:14.0000] <annevk>
SamB: HTML and 2D <canvas> are probably worst

[15:38:38.0000] <SamB>
oh, they're copying others?

[15:39:19.0000] <annevk>
Yes, most of http://www.whatwg.org/specs/ is copied in one way or another

[15:46:04.0000] <danbeam>
info Domenic_

[15:46:10.0000] <danbeam>
whoops, sorry

[15:46:56.0000] <danbeam>
Domenic_: I would like more info from you, though :P, if you can respond to http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2014-April/254147.html

[15:47:31.0000] <danbeam>
full disclosure, I'm implementing this in blink -- https://chromiumcodereview.appspot.com/228783007/

[15:53:40.0000] <cwilso>
annevk: "make the lawyer snapshots so they get IP protection" is a horribly, dangerously naive view of IP.

[15:54:33.0000] <cwilso>
if the W3C group truly only C&P'ed WHATWG specs, no one would be in the WGs.  And there would be no IP commitments.

[15:54:54.0000] <paul_irish>
Domenic_: crazy results on that poll, yeah.

[15:55:10.0000] <annevk>
cwilso: the dog & pony show they put up now is a horrible waste of resources

[15:55:22.0000] <paul_irish>
I wish it wasn't so damn uneven. I'm sure that with less experienced developers it'd flop the more to seconds, though. :/

[15:55:24.0000] <danbeam>
paul_irish: is it actually s instead of ms? (assuming you're talking about that animation poll)

[15:55:47.0000] <paul_irish>
danbeam: yes elem.animate() from web animations API defines duration in seconds, yah

[15:55:56.0000] <annevk>
Domenic_: paul_irish: note that media elements use seconds (iirc)

[15:56:17.0000] <annevk>
Domenic_: paul_irish: I think based on feedback from Apple

[15:56:24.0000] <danbeam>
paul_irish: considering there's probably not an animation in all of chrome (native or web) that's over 1s, I do find that kind of odd

[15:56:46.0000] <cwilso>
yeah, media apis and web audio.

[15:57:22.0000] <paul_irish>
yeah I'd imagine 80% of all css animations are <1s.

[15:57:40.0000] <cwilso>
annevk: not really a dog and pony show, more of a "maimed and angry cat parade"

[15:57:46.0000] <sgalineau>
paul_irish: I'd say that's because most animations in CSS are transitions which are inherently short

[15:58:21.0000] <danbeam>
paul_irish: that, in itself, should probably enough to make the default unit milliseconds instead of seconds, audio/media should be much longer so seconds makes more sense there

[15:58:42.0000] <paul_irish>
aye. so likely avg duration in keyframe animations is longer. seems legit.

[15:58:43.0000] <danbeam>
but obviously it's not the end of the world if I have to do .2 instead of 200

[15:59:03.0000] <sgalineau>
paul_irish: but the use-case for @keyframes was more about longer-run effects, I think. in practice it's been rare thus far because transition effects was really the one everybody wanted

[16:00:13.0000] <sgalineau>
paul_irish: then there's also the spinner/throbber type @keyframes that may last 1s *per cycle* but are meant to go for as long as it takes....

[16:01:18.0000] <cwilso>
danbeam: sgalineau: actually in Web Audio many durations are short (most are "transitions" (i.e. scheduled ramps)).  But WA units are definitively floating point, and use of ms was heavily ingrained due to "usable precision in an integer unit".

[16:02:02.0000] <sgalineau>
cwilso: yeah, something like audio strikes me as implying units more precise than seconds

[16:02:25.0000] <sgalineau>
cwilso: or at a minimum support for fractional values

[16:02:26.0000] <zewt>
audio time should just be 64-bit seconds

[16:03:12.0000] <cwilso>
zewt: hope you mean 64-bit FLOAT seconds

[16:03:26.0000] <zewt>
it's particularly silly to use ms if you still have to use floats, and integer milliseconds aren't precise enough for some audio use cases

[16:03:31.0000] <zewt>
cwilso: yep

[16:03:55.0000] <sgalineau>
I suppose 64-bit milliseconds might be OK....

[16:03:59.0000] <cwilso>
zewt: that's precisely why they ended up that way across the WA API.

[16:04:10.0000] <cwilso>
sgalineau: WHY use milliseconds, though?

[16:04:13.0000] <sgalineau>
what kind of use-cases need sub-millisecond in audio?

[16:04:30.0000] <cwilso>
sgalineau: getting samples to precisely align on a beat.

[16:04:33.0000] <zewt>
rhythm games

[16:04:38.0000] <cwilso>
getting buffers to play contiguously.

[16:04:40.0000] <sgalineau>
ok, cool.

[16:05:13.0000] <sgalineau>
you could use CSS seconds; they're about 0.96 normal seconds when you hold them at arm's length

[16:05:32.0000] <sgalineau>
/me cannot tire of CSS unit jokes

[16:06:31.0000] <MikeSmith>
tmux attach-session -d -t ssb

[16:34:34.0000] <SteveF>
annevk: the w3c html spec is pretty clear in regards to attribution http://www.w3.org/html/wg/drafts/html/master/ if anybody thinks otherwise all they have to do is speak up


2014-04-17
[17:45:42.0000] <hober>
MikeSmith: I guess I should try tmux at some point. Does it have an equivalent of screen's "nethack on"?

[17:46:10.0000] <hober>
MikeSmith: because you will pry "You cannot escape from window 0!" out from under my cold, dead, bloated Emacs pinky finger.

[17:50:40.0000] <MikeSmith>
hober: dunno what nethack on does but I suspect tmux has an equivalent. tmux also handle Unicode like 🍺 that screen fails to display

[17:53:13.0000] <MikeSmith>
hober: http://www.reddit.com/r/commandline/comments/1y91lz/tmux_vs_screen/

[17:53:44.0000] <MikeSmith>
seems it doesn't have it :-(

[17:59:50.0000] <MikeSmith>
man how do people read reddit on mobile

[18:01:35.0000] <MikeSmith>
hmm looks way better in chrome than in Firefox Nightly

[18:13:36.0000] <sgalineau>
man how do people read reddit at all

[18:31:01.0000] <zewt>
MikeSmith: ircing on couch on ios also showing glyph that I'm certain desktop irc defaulted on

[18:33:13.0000] <SamB>
what, this one? 🍺

[19:14:37.0000] <zewt>
SamB: called it http://i.imgur.com/P0oMgis.png

[19:32:27.0000] <zewt>
speaking of use cases for high-precision audio, https://twitter.com/ID_AA_Carmack/status/456620100758429697

[19:37:58.0000] <zewt>
http://i.imgur.com/yKIqZdS.png theonion with some more font failure

[19:38:25.0000] <zewt>
you can probably fingerprint the developers of websites based on which characters they assume works, if they aren't competent enough to test on more than one platform

[19:38:40.0000] <zewt>
(also plurals fails)

[19:40:28.0000] <zewt>
holy shit, youtube just used an alert()

[19:41:15.0000] <zewt>
(shock triggered by the fact that chrome regressed alerts and removed tab-modal alerts, putting it back into the dark ages, so I'm there clicking tabs and nothing is happening because the tab has an alert open)

[19:41:53.0000] <zewt>
(chrome's catastrophic regression being incomprehensibly worse than youtube's lazy alert)

[19:43:57.0000] <JonathanNeal>
What do any of you think about hashes like ##some+text auto-anchoring to parts of the page matching the text, ala http://sandbox.thewikies.com/autoanchor/ and http://sandbox.thewikies.com/autoanchor/##protocols

[19:47:02.0000] <MikeSmith>
JonathanNeal: would be nice to have some kind of way to address abitrary text or ranges in a page

[19:47:25.0000] <MikeSmith>
"##" is some suggested convention for doing that?

[19:48:43.0000] <JonathanNeal>
KevinMarks2:

[19:50:51.0000] <JonathanNeal>
MikeSmith: I believe so. Kevin suggested it (and Timothy Cole, in that document). I pinged him if he has thoughts to add.

[19:51:43.0000] <MikeSmith>
JonathanNeal: I guess you know that shepazu is following all this stuff closely

[19:52:24.0000] <JonathanNeal>
Honestly, I just stumbled upon it tonight. It just seemed like a great idea.

[19:55:42.0000] <JonathanNeal>
Like, something I would have expected on the web by now. Hey, shepazu, you’re an html5 homie, right?

[20:06:47.0000] <SamB>
how about them xpaths

[20:08:51.0000] <zewt>
xpath was cool until querySelector

[20:10:10.0000] <zewt>
at which point it settled to a cool level equivalent to the macarana, blue LEDs and java

[20:29:55.0000] <SamB>
xpath can do more the CSS selectors ...

[20:30:02.0000] <SamB>
s/the/than/

[21:12:37.0000] <JonathanNeal>
btw, https://github.com/chapmanu/fragmentions

[22:14:59.0000] <MikeSmith>
JonathanNeal: interesting

[22:16:04.0000] <MikeSmith>
getElementByText

[22:17:31.0000] <MikeSmith>
JonathanNeal: shepazu can tell you about some more sophisticated ways that existing sites that use annotations are handling this kind of addressing

[22:19:38.0000] <JonathanNeal>
interesting good,bad,lazy,just-interesting? Looks like we’ll just throw a prototype demo up and get feedback.

[22:21:02.0000] <JonathanNeal>
Related, <a href="##foo"> appears to be invalid markup “Illegal character in fragment component” adding “ Characters should be represented in NFC and spaces should be escaped as %20” — is there something more to this?

[22:21:18.0000] <MikeSmith>
ah

[22:21:36.0000] <MikeSmith>
yeah the URL spec doesn't allow fragments to contain a hash sign

[22:24:11.0000] <JonathanNeal>
That’s good and bad, because one concern regards sites already using ##. Googling various terms related to double hashes did not yield any results on the subject.

[23:04:10.0000] <zcorpan_>
MikeSmith: it appears you should also make some more links in platform.whatwg.org point to whatwg so that it doesn't look like we're not involved in web standards :-P

[23:22:42.0000] <TabAtkins>
SamB: XPath can do more than Selectors, but Selectors can do more than XPath.  The two are roughly equivalent, but not strict subsets.

[23:25:59.0000] <MikeSmith>
zcorpan_: yeah I had already been meaning to change most of those

[23:26:14.0000] <MikeSmith>
lemme change some right now

[23:27:14.0000] <zcorpan_>
MikeSmith: (q.v. blink-dev; i wasn't serious but if there are links that should actually point to whatwg, go ahead)

[23:31:33.0000] <MikeSmith>
zcorpan_: ah yeah I haven't read up on that thread. that guy seemed a bit confused

[23:32:10.0000] <MikeSmith>
still I want to make the right stuff more prominent

[00:33:08.0000] <MikeSmith>
zcorpan: http://platform.html5.org/

[00:36:58.0000] <zcorpan>
MikeSmith: why are the whatwg items bigger font?

[00:37:24.0000] <MikeSmith>
zcorpan: to make them bigger

[00:37:38.0000] <MikeSmith>
and to match more closely with the size of the icon

[00:37:45.0000] <MikeSmith>
should I make them the same size?

[00:38:30.0000] <zcorpan>
yeah i think it looks a bit silly now :-)

[00:38:49.0000] <MikeSmith>
k

[00:39:12.0000] <zcorpan>
might be nice with icons for everything?

[00:39:13.0000] <MikeSmith>
zcorpan: should I make the whatg icon smaller to match the text?

[00:39:26.0000] <MikeSmith>
icons for everything?

[00:39:36.0000] <MikeSmith>
zcorpan: like, add a w3c icon too?

[00:39:46.0000] <zcorpan>
yeah

[00:39:50.0000] <MikeSmith>
OK

[00:39:55.0000] <MikeSmith>
will add it later

[00:40:30.0000] <zcorpan>
as for smaller icons, maybe that makes it ugly on lowres screens?

[00:40:36.0000] <MikeSmith>
yeah

[00:40:43.0000] <MikeSmith>
so I'll leave them as-is

[00:40:55.0000] <zcorpan>
unless you use the svg version but maybe there's no svg version for w3c/kronos/etc

[00:46:40.0000] <MikeSmith>
zcorpan: there is for w3c at least

[00:46:51.0000] <MikeSmith>
but I'll just do the bitmaps for now

[00:47:24.0000] <MikeSmith>
I wonder what's the latest URL for Promises?

[00:48:09.0000] <MikeSmith>
https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects I guess

[00:48:45.0000] <zcorpan>
yeah

[01:45:58.0000] <MikeSmith>
zcorpan: OK take another look now

[01:46:59.0000] <zcorpan>
MikeSmith: A+

[01:54:08.0000] <MikeSmith>
yay

[01:54:13.0000] <MikeSmith>
so I'll stop for now

[02:05:15.0000] <annevk>
MikeSmith: maybe add a link to http://wiki.whatwg.org/wiki/DOM_XPath

[02:09:52.0000] <MikeSmith>
annevk: ok, added

[02:12:57.0000] <annevk>
MikeSmith: would be even cooler btw if the specs with their own logo...

[02:14:59.0000] <MikeSmith>
annevk: yeah I'd need to switch them over the svg ones I guess

[02:16:59.0000] <darobin>
mmmm, w3c-test.org down?

[02:18:51.0000] <annevk>
darobin: glad the DOM thing was a misunderstanding

[02:18:59.0000] <darobin>
annevk: what DOM thing?

[02:19:13.0000] <annevk>
darobin: ownerElement

[02:19:21.0000] <darobin>
oh yeah, I fucked that one up

[02:20:10.0000] <darobin>
I was sure it was in after the discussion in www-dom so when it didn't show up in the snapshot after the copy I assumed I'd screwed up syncing

[02:21:35.0000] <darobin>
I should've given myself more credit, cut and pasting is something I'm actually becoming good at

[02:24:23.0000] <Ms2ger>
darobin, w3c-test.org does appear down from here

[02:24:35.0000] <darobin>
Ms2ger: yeah, I'm looking into it

[02:24:41.0000] <darobin>
the server is running

[02:24:57.0000] <Ms2ger>
Ah, doing something useful, excellent ;)

[02:25:22.0000] <darobin>
mmmm, but using 8321m of memory and 50% CPU, that doesn't sound right

[02:26:46.0000] <darobin>
errr, MikeSmith are you on the server too?

[02:27:06.0000] <MikeSmith>
darobin: yeah

[02:27:09.0000] <darobin>
heh

[02:27:17.0000] <MikeSmith>
I just restarted wptserve

[02:27:19.0000] <Ms2ger>
MikeSmith, the phantom of the server

[02:27:20.0000] <darobin>
we were doing the same thing :)

[02:27:31.0000] <MikeSmith>
darobin: hah

[02:27:39.0000] <MikeSmith>
blood brothers

[02:27:42.0000] <darobin>
got me confused when I killall python and it matches nothing

[02:27:59.0000] <MikeSmith>
I beat you to the kill this time

[02:28:03.0000] <darobin>
lol

[02:28:26.0000] <darobin>
I wonder if we shouldn't have a cronjob restart the server daily

[02:28:43.0000] <darobin>
clearly it can get into a bad state

[02:29:06.0000] <darobin>
or maybe the systeam has a nice watchdog we could use

[02:29:37.0000] <Ms2ger>
Would be interesting to figure out what gets it into that state

[02:30:10.0000] <darobin>
Ms2ger: yeah, I managed to get it in a bad state on my local machine but I couldn't figure out what it was unhappy about

[02:30:18.0000] <darobin>
it was something about trying to write to a closed socket

[02:30:38.0000] <darobin>
Ms2ger: I can repro by reloading lots and lots of times brutally

[02:30:57.0000] <MikeSmith>
maybe it has something to do with it also writing binary data to its log

[02:31:18.0000] <MikeSmith>
or emitting it to the console -- stderr I guess

[02:31:24.0000] <darobin>
but the problem took me deep inside the python libs and I'm not proficient enough to debug that well

[02:31:55.0000] <MikeSmith>
we should get the webdriver folks to look at it

[02:32:03.0000] <darobin>
why them?

[02:32:05.0000] <MikeSmith>
David Burns if he has time

[02:32:12.0000] <darobin>
because pythonistas?

[02:32:16.0000] <MikeSmith>
darobin: because they have the python skills

[02:32:17.0000] <MikeSmith>
yeah

[02:32:22.0000] <darobin>
good point

[02:32:35.0000] <darobin>
though I thought we had Ms2ger and jgraham_ as python deities :)

[02:32:44.0000] <Ms2ger>
Nope

[02:32:48.0000] <Ms2ger>
Just jgraham

[02:33:09.0000] <jgraham>
/me isn't sure about deitiy

[02:33:27.0000] <jgraham>
But I could certainly have a go at debugging the problem if I could reproduce it

[02:35:31.0000] <jgraham>
Anyway, I need to catch a train

[02:37:18.0000] <MikeSmith>
we need some rr for wptserve

[02:39:45.0000] <darobin>
we could use something like https://github.com/tsenart/vegeta

[03:21:03.0000] <Ms2ger>
"if the W3C group truly only C&P'ed WHATWG specs, no one would be in the WGs."

[03:21:08.0000] <Ms2ger>
Then why are they in the WGs now?

[03:26:53.0000] <jgraham>
I don't think anyone *is* in the HTMLWG, at least

[03:27:12.0000] <jgraham>
Well I guess Microsoft are

[03:27:49.0000] <Ms2ger>
I think Mozilla still is

[03:29:01.0000] <Ms2ger>
Do you / zcorpan know if the XHR test suite is comprehensive?

[03:29:52.0000] <jgraham>
Well I mean people are in the group

[03:30:14.0000] <jgraham>
But I don't think anyone believes that the HTMLWG is a useful mechanism for getting changes into HTML

[03:34:16.0000] <tobie_>
/me wonders whether the overhead of discussing the WHATWG vs. W3C situation is <=, >= or == than dealing with the W3C overhead.

[03:34:20.0000] <tobie_>
/me ducks.

[03:34:25.0000] <jgraham>
quack

[03:36:00.0000] <jgraham>
(and I think the fact that people have just stopped participating in the W3C process should be a significant data point in answering that question)

[03:37:26.0000] <tobie_>
So my intent wasn't to start a discussion on that topic and add some meta-overhead.

[03:37:37.0000] <tobie_>
:)

[03:42:13.0000] <zcorpan>
Ms2ger: i'm not that familiar with the xhr testsuite but i have a feeling it has various gaps in coverage

[03:44:25.0000] <jgraham>
zcorpan: Do you store that response locally as "%(name)s: I'm not familiar with the %(suite_name) testsuite but I have a feeling it has various gaps in coverage"?

[03:46:19.0000] <zcorpan>
jgraham: i'm not that familiar with the response testsuite but i have a feeling it has various gaps in coverage

[03:49:12.0000] <jgraham>
darobin-- for mixing big whitespace changes with semantic changes

[03:50:09.0000] <darobin>
ah shit, sorry jgraham

[03:50:21.0000] <darobin>
I blame aryeh for using tabs in the first place :)

[03:50:49.0000] <jgraham>
:)

[04:14:14.0000] <darobin>
Ms2ger: do you know why detach() was turned into a noop?

[04:14:51.0000] <darobin>
I ask because it's clearly not a noop in at least Blink and WebKit (apparently not in IE either), and that's causing an awful lot of test failures

[04:17:22.0000] <darobin>
annevk: ^

[04:17:52.0000] <Ms2ger>
darobin, because it wasn't useful

[04:18:27.0000] <darobin>
Ms2ger: mmmmm

[04:18:55.0000] <Ms2ger>
I'm surprised nobody else killed it yet

[04:19:26.0000] <darobin>
if they did they'd pass most if not all of the range tests

[04:19:26.0000] <Ms2ger>
zcorpan, I should bug... Hallvors, I guess?

[04:30:45.0000] <Ms2ger>
"name of illusion causing proponents of a concept to see most things as that concept? e.g. webintents,annotations,cards"

[04:30:51.0000] <Ms2ger>
tantek, going to coin "monadism"

[04:35:08.0000] <jgraham>
That seems a bit like an error of the form "They laughed at Columbus, they laughed at Fulton, they laughed at the Wright brothers. But they also laughed at Bozo the Clown."

[04:36:17.0000] <annevk>
darobin: what do you mean by clearly not a noop?

[04:36:39.0000] <annevk>
darobin: if you mean they set a flag and threw for some methods, that doesn't necessarily make it useful

[04:36:40.0000] <darobin>
annevk: after you call it, trying to access various attributes throws

[04:36:43.0000] <darobin>
(as per DOM3)

[04:37:04.0000] <darobin>
yeah, I didn't say it was useful, just that it seemed to be implemented as per DOM3

[04:37:35.0000] <annevk>
we removed throwing because it could just be GC'd if you didn't have references

[04:37:42.0000] <annevk>
detach() wasn't needed for that

[04:37:48.0000] <jgraham>
darobin: Here's your chance to write a patch, fix Blink, get a whole load of tests to pass, and get DOM closer to Rec!

[04:37:57.0000] <darobin>
I wonder if other implementations might need it?

[04:38:39.0000] <darobin>
jgraham: yeah! or I could just write something to the effect that 97% of failures come from the fact that browsers support detach() when they shouldn't and call it a day :)

[04:39:04.0000] <annevk>
darobin: need it for what?

[04:39:05.0000] <darobin>
that said, I guess a patch removing stuff from Blink would actually be quite easy to get through the process :)

[04:39:45.0000] <darobin>
annevk: I'm presuming this was initially introduced due to some implementation that needed to be told what to do; I was wondering if it were possible that someone still implemented ranges in a way that made detach() useful

[04:40:02.0000] <darobin>
(which isn't a reason to keep it, I'm just wondering why it hasn't been killed yet)

[04:40:10.0000] <jgraham>
darobin: Well that might work if your only care about the spec going to Rec :p

[04:40:19.0000] <annevk>
darobin: Java prolly needs detach()

[04:40:27.0000] <darobin>
annevk: that's what I was thinking

[04:40:37.0000] <annevk>
we only care about JavaScript

[04:40:42.0000] <darobin>
jgraham: I care about many other things, but patching Blink isn't really one of them

[04:40:51.0000] <darobin>
apparently it's not even implemented in JS!

[04:42:11.0000] <annevk>
OMG IDL

[04:42:23.0000] <annevk>
better call Domenic_

[04:44:26.0000] <darobin>
/me puts on the Ghostbusters theme music

[04:45:38.0000] <jgraham>
annevk: Pretty sure no one uses OMG IDL these days :p

[04:50:36.0000] <zcorpan>
OMG OMG IDL

[05:01:27.0000] <jgraham>
It always confuses me when posting a branch to GitHub fails to create a review :(

[05:02:12.0000] <jgraham>
Maybe I should make a "git review" command

[05:17:55.0000] <zcorpan>
jgraham: maybe test_obj should have a .timeout() function?

[05:18:18.0000] <jgraham>
zcorpan: Yeah, I was thinking .force_timeout() or something

[05:20:00.0000] <zcorpan>
sounds good

[05:30:05.0000] <darobin>
jgraham: actually, I recall seeing some OMG IDL not very long ago, I forget where

[05:30:12.0000] <darobin>
I think it was a payment system defined with it

[05:30:17.0000] <darobin>
apparently it's still a thing

[05:31:15.0000] <darobin>
indeed, not only is the OMG still a thing, but they've also discovered animated GIFs! http://www.omg.org/

[05:33:59.0000] <jgraham>
I was expecting the executives looking at the laptop to start poking their own eyes out

[05:34:14.0000] <jgraham>
Disappointed to find it was only balloons

[05:37:34.0000] <zcorpan>
i like the scrolling thing

[05:41:29.0000] <jgraham>
I'm a big fan of the fact that the top quote is "Personally I have made many friends at the OMG"

[05:41:55.0000] <jgraham>
That's a strategy the W3C should adopt

[05:42:16.0000] <jgraham>
"W3C: Because joining us is a bit like having a social life"

[05:42:59.0000] <jgraham>
Maybe s/joining us/being in a working group/

[05:43:28.0000] <jgraham>
/me applies for the position of brand consultant

[05:57:55.0000] <tobie_>
Can't believe this is a thing.

[06:00:56.0000] <jgraham>
OMG?

[06:01:10.0000] <jgraham>
How did you think they got their name?

[06:05:09.0000] <zcorpan>
jgraham: need to leave now, assume that i've LGTMed some future change involving force_timeout() if you don't want to wait until tuesday

[06:29:20.0000] <MikeSmith>
fyi UK peeps: https://twitter.com/w3c/status/456772456372400128

[06:40:58.0000] <jgraham>
MikeSmith: Uh

[06:41:13.0000] <jgraham>
That appears to be "GCHQ have just joined W3C"

[06:41:31.0000] <jgraham>
I see no possible way this could go wrong

[06:51:37.0000] <MikeSmith>
keep your friends close

[06:51:41.0000] <MikeSmith>
as the saying goes

[06:57:49.0000] <Ms2ger>
jgraham, to join the Intelligence Agencies Business Group?

[06:59:50.0000] <beverloo>
that'd be a great forum to discuss how to not flag security issues

[07:16:25.0000] <jgraham>
Ms2ger: Want do review the merge in https://critic.hoppipolla.co.uk/8241e648?review=1151 ?

[07:19:02.0000] <Ms2ger>
r+

[07:20:07.0000] <jgraham>
Ms2ger: Thanks

[07:20:31.0000] <Ms2ger>
/me was going to do some work this afternoon... *sigh*

[08:01:43.0000] <Ms2ger>
�The language does not prevent you from deeply nesting classes, but good taste should. [...] Nesting more than two levels invites a readability disaster and should probably never be attempted.�

[08:02:33.0000] <jgraham>
?

[08:05:48.0000] <SamB__>
Ms2ger: which one?

[08:06:00.0000] <Ms2ger>
Java

[08:06:34.0000] <Ms2ger>
Oh, I also can't read

[08:07:47.0000] <SamB>
is that talking about actual closures or just some boring namespace/protection thing?

[08:15:12.0000] <tantek>
Ms2ger interesting, I'll have to read up on monads and monadology.

[08:15:22.0000] <tantek>
there are more examples too, e.g. "triples" ;)

[08:15:51.0000] <tantek>
but it's particularly concerning that this illusion pattern appears to repeat itself just in web technology circles so often

[08:17:35.0000] <tantek>
also, there seems to be some consensus that it's a form of confirmation bias, in particular a type of Maslow's hammer. See replies here: https://twitter.com/t/status/456552583499243521

[08:29:05.0000] <annevk>
Ms2ger: where is that from?

[08:29:23.0000] <Domenic_>
MikeSmith: platform.html5.org is really excellent now. I like how it links to EDs for the W3C things too.

[08:30:40.0000] <annevk>
MikeSmith: http://simonsapin.github.io/data-urls/ is the latest we have on data URLs

[08:31:04.0000] <SimonSapin>
It’s more a collection of open issues than anything else

[08:45:45.0000] <tantek>
also, this article from that thread has a lot of applicability in many web platform discussions: http://www.joelonsoftware.com/articles/fog0000000018.html - so many architecture astronauts

[09:15:31.0000] <MikeSmith>
Domenic_: Thanks

[09:16:17.0000] <MikeSmith>
annevk: didn't know about that one

[09:16:23.0000] <MikeSmith>
/me looks

[09:52:54.0000] <Domenic_>
hehehe https://twitter.com/antimattur/status/456835404596252673

[09:59:24.0000] <JonathanNeal>
MikeSmith, ready ready for some in the wild testing of fragmentions?

[10:05:46.0000] <MikeSmith>
JonathanNeal: you win

[10:06:10.0000] <MikeSmith>
/me and JonathanNeal are playing "Best spring-break pickup lines"

[10:07:37.0000] <JonathanNeal>
Oh we are? I plan on observing Good Friday. If you’re free, let’s make it a GREAT Friday!

[10:18:01.0000] <JonathanNeal>
/me listens to the crickets, but still thinks it was clever.

[10:19:13.0000] <jsbell>
that feeling when you haven't settled into a new workflow and you feel like a t-rex in a china shop

[10:25:00.0000] <JonathanNeal>
jsbell: that does sound kind of awesome though. Like, those plates don’t stand a chance.

[10:25:46.0000] <jsbell>
Rawr! Whoops, sorry. Let me pick that up. Oh, wait, useless arms.

[10:29:45.0000] <JonathanNeal>
Tea, Rex?

[10:31:15.0000] <jgraham>
jsbell: Do you want help with something, or are you just happily complaining?

[10:31:28.0000] <jsbell>
jgraham: Just happily complaining. :)

[10:32:50.0000] <Domenic_>
annevk: FYI I think I'm going to do a "how to make subclassable APIs" guide. I feel like we've talked about related topics a lot. https://github.com/w3ctag/subclassable-apis-guide/issues

[10:35:36.0000] <annevk>
Domenic_: one thing that'd be interested is considering the impact on the current APIs

[10:35:42.0000] <annevk>
interesting*

[12:06:04.0000] <IZh>
Hi.

[12:27:37.0000] <KevinMarks>
The difference in what can be in a URL fragment and what can be in an id is interesting

[12:29:17.0000] <annevk>
KevinMarks: you mean given that a fragment is a sequence of bytes and an ID is a string?

[12:30:59.0000] <KevinMarks>
A fragment can encode anything with percent encoding, but an id can't have spaces

[12:32:05.0000] <KevinMarks>
So the fragmention idea could just be "if the fragment contains whitespace, search body text rather than ids"

[12:33:17.0000] <KevinMarks>
/me has the terminology wrong there.

[12:34:47.0000] <annevk>
data:text/html,<style id="x x">head,:target{display:block;height:20em}:target{background:purple}</style>#x x

[12:34:51.0000] <annevk>
does seem to work

[12:35:30.0000] <annevk>
restrictions on IDs are mostly so they can appear space-separated elsewhere I suppose

[13:47:54.0000] <JonathanNeal>
annevk, is this related to fragmentions?

[14:58:00.0000] <benschwarz>
Hixie: yt?

[15:17:50.0000] <jgraham>
jsbell: I'm not sure why you created a new review, but I think we're nearly there

[15:18:31.0000] <jsbell>
jgraham: heh, was just gonna ping. since I wasn't in a branch a merge got in there and critic stopped tracking (and wouldn't start again when I poked it)

[15:20:59.0000] <jgraham>
jsbell: Oh, the merge shouldn't have upset it (although it is unorthodox), but a rebase will (although it is more normal; there are just a few manual steps)

[15:21:19.0000] <benschwarz>
annevk: someone left an issue on developers.whatwg.org asking if they could translate it to chinese…

[15:22:49.0000] <jsbell>
jgraham: I'm sure I poked the wrong button somehow. Then flattened it down to a diff and reapplied. And obviously mucked that up. *sigh* Anyway... updated.

[15:23:44.0000] <annevk>
benschwarz: sounds good, no?

[15:23:50.0000] <jgraham>
jsbell: And we're done! Thanks for the patch

[15:23:56.0000] <annevk>
benschwarz: although might be a bit tricky keeping it up to date

[15:24:07.0000] <jsbell>
Also, no longer filtering mail from critic into /dev/null :P

[15:25:07.0000] <jsbell>
jgraham: If I was gonna add some encoding API tests, any preference for where in web-platform-tests ?

[15:25:34.0000] <jgraham>
jsbell: Well that's a seperate spec so a new top level directory

[15:25:44.0000] <jgraham>
/encoding/ or something I guess

[15:26:26.0000] <jsbell>
jgraham: In blink we have encoding/ for general (e.g. fetch/form/document) encoding tests and encoding/api for the API specifically. How's that sound?

[15:29:23.0000] <jgraham>
jsbell: So the normal convention is to have the subdirectories (if any) match the spec sections so that we can easilly tell which sections have some tests

[15:29:42.0000] <jgraham>
(specifically to have the name match the id of the heading element)

[15:30:22.0000] <jgraham>
so enconding/api for API tests looks right

[15:30:29.0000] <jsbell>
jgraham: groovy.

[15:37:24.0000] <annevk>
Domenic_++

[15:48:10.0000] <benschwarz>
annevk: do you know of any other efforts for translation that have occurred?

[15:48:22.0000] <benschwarz>
it'd be an epic job

[15:48:51.0000] <annevk>
benschwarz: could ask @myakura

[15:49:08.0000] <annevk>
benschwarz: he has done some work on that years ago iirc

[15:56:56.0000] <zewt>
annevk: heh, the #x x thing puts "#x x" in <body> in chrome but not in firefox (but treats it as a hash in both)

[15:57:07.0000] <zewt>
different parsing of data:?

[15:57:15.0000] <annevk>
Chrome has a bug


2014-04-18
[18:43:37.0000] <MikeSmith>
per the URL spec, is scheme data not allowed to contain "<" and ">"?

[18:43:55.0000] <MikeSmith>
since they are not "URL code points"

[01:01:07.0000] <annevk>
Did anyone else notice Web Crypto introduces https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#big-integer

[01:01:10.0000] <annevk>
Seems odd

[01:04:23.0000] <MikeSmith>
annevk: they should use something else instead?

[01:04:48.0000] <annevk>
MikeSmith: we don't have big integers, but I have the feeling they should coordinate with TC39

[01:05:30.0000] <annevk>
MikeSmith: been reviewing Web Crypto's IDL a bit this morning; wanted to watch a TV series since it's a holiday, but got distracted

[01:05:38.0000] <MikeSmith>
annevk: yeah they don't seem to be doing that

[01:05:49.0000] <MikeSmith>
holiday?

[01:06:00.0000] <annevk>
MikeSmith: https://www.gov.uk/bank-holidays

[01:06:44.0000] <MikeSmith>
ah

[01:11:21.0000] <MikeSmith>
annevk: is "1:1" a valid URL?

[01:11:40.0000] <annevk>
MikeSmith: scheme cannot start with a number iirc

[01:13:26.0000] <MikeSmith>
annevk: yeah but galimatias treats that as a relative URL, if the base URL is not null

[01:13:32.0000] <MikeSmith>
afaict

[01:14:12.0000] <annevk>
MikeSmith: that makes sense, an error should be logged for that somewhere though

[01:14:13.0000] <MikeSmith>
so it sees it as a path

[01:14:33.0000] <annevk>
MikeSmith: oh maybe it's error-free in that case, hmm

[01:14:49.0000] <MikeSmith>
annevk: I think per the current spec it's error-free

[01:15:08.0000] <MikeSmith>
it's only a parse error if the state override is set

[01:15:18.0000] <annevk>
seems fine to me, perhaps a tad confusing, but given that 1 can never be a scheme...

[01:21:25.0000] <MikeSmith>
annevk: for the case of the validator it seems like it would be nice to help users catch cases like "1http://example.com", but reporting an error for those

[01:21:44.0000] <MikeSmith>
annevk: hmm maybe I can report a warning for those cases

[01:23:29.0000] <annevk>
MikeSmith: so the problem is that it's a legitimate path

[01:23:42.0000] <MikeSmith>
right

[01:23:47.0000] <annevk>
MikeSmith: and that has not changed

[01:25:22.0000] <MikeSmith>
annevk: yeah it's just that I'd like to be able to help users catch cases of mistyped URLs

[01:25:36.0000] <MikeSmith>
annevk: but I guess we really can't for this case

[01:28:19.0000] <annevk>
MikeSmith: seems hard without the kind of computing power Google has for detecting typos and such

[01:29:33.0000] <annevk>
MikeSmith: flagging ":" if no scheme and no "/" came before it as potential problem might be enough though

[01:30:15.0000] <annevk>
MikeSmith: you'd have to do some telemetry to see how signal / noise plays out

[01:30:23.0000] <MikeSmith>
yeah

[01:31:00.0000] <MikeSmith>
annevk: I'll also ask zcorpan what he thinks

[04:51:14.0000] <IZh>
Hi.

[08:00:59.0000] <JonathanNeal>
Goodmorning (from PT)!

[08:06:31.0000] <Ms2ger>
Good evening

[09:16:25.0000] <SamB>
okay wtf google

[09:17:16.0000] <SamB>
what's so hard to understand about https://www.google.com/search?q=whatwg+ms-icon

[09:17:42.0000] <Ms2ger>
ms -icon

[09:18:13.0000] <SamB>
yeah I kind of gathered it thinks that but come on I can't be the first to google a hyphenated term

[10:29:09.0000] <Domenic_>
So W3C DOM Parsing & Serialization is just a fork of http://domparsing.spec.whatwg.org/ ? /cc Ms2ger

[10:29:38.0000] <Ms2ger>
Yes

[10:29:58.0000] <Domenic_>
How bad is the damage?

[10:30:17.0000] <Ms2ger>
I haven't had the time to follow the changes

[12:06:16.0000] <IZh>
Hi.

[12:09:45.0000] <TabAtkins>
IZh: http://www.nohello.com/

[12:30:52.0000] <IZh>
TabAtkins: I tried to be polite. ;-)

[13:30:47.0000] <SamB>
hmm, are the Author lines in mimesniff.git actually an accurate representation of authorship?

[13:31:27.0000] <IZh>
Hixie: hi.

[13:38:51.0000] <SamB>
/me grumbles about "open in new tab" not working for bookmarklets ...

[14:09:30.0000] <TabAtkins>
Man, I really wasn't kidding about nohello.

[16:01:38.0000] <SamB>
hmm, someone needs to replace the IANA registration for .ico files ... they're currently registered as http://www.iana.org/assignments/media-types/image/vnd.microsoft.icon :-(


2014-04-19
[18:01:30.0000] <KevinMarks>
Do you still use .ico?

[18:03:49.0000] <MikeSmith>
JonathanNeal: http://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0180.html

[18:04:06.0000] <MikeSmith>
KevinMarks: ↑☃

[18:06:06.0000] <KevinMarks>
Hm so I need to join that mailing list to talk about fragmentions?

[18:06:33.0000] <KevinMarks>
/me is seeing lots of very cumbersome linking models

[18:08:20.0000] <MikeSmith>
KevinMarks: you can subscribe to the list but there's not much talk about fragmentions on there at this point

[18:09:05.0000] <KevinMarks>
I was going to bring it up on whatwg once we had it working in practice for a bit

[18:09:29.0000] <MikeSmith>
yeah whatwg list always works

[18:10:14.0000] <MikeSmith>
KevinMarks: I was just pointing that out as a data point about potential standardization movement in this area

[18:10:47.0000] <KevinMarks>
Yes, I was at the w3c annotation meeting, that was what set me off thinking about it

[18:10:48.0000] <MikeSmith>
shepazu driving that, as far as W3C goes

[18:10:55.0000] <MikeSmith>
KevinMarks: ah ok

[18:12:13.0000] <KevinMarks>
But they seem to be doing the gigantic satisfy all use cases with lashings of rdf in three years type WG

[18:16:05.0000] <MikeSmith>
KevinMarks: yeah that's part of the W3C tax

[18:16:23.0000] <MikeSmith>
that's hard to avoid sometimes when trying to get work done at the W3C

[18:16:41.0000] <MikeSmith>
but I think shepazu is savvy enough to know how to contain it

[18:16:45.0000] <MikeSmith>
mitigate the costs

[18:17:44.0000] <MikeSmith>
anyway, I think we could specify the addressing stuff just in the webapps wg

[18:18:10.0000] <MikeSmith>
which is one relatively non-pathological WG at W3C

[18:18:21.0000] <MikeSmith>
and free from the RDF disease

[19:59:00.0000] <JonathanNeal>
Great, I hope we can get Doug’s feedback on fragmentions.

[19:59:05.0000] <JonathanNeal>
Thanks for sharing, MikeSmith

[21:08:47.0000] <SamB>
hmm, the Status on http://www.whatwg.org/specs/web-controls/current-work/ seems kind of innacurate ...

[03:26:32.0000] <JakeA>
Hixie: trying to get Chrome to support the outline algo at the accessibility level https://code.google.com/p/chromium/issues/detail?id=365070#c2 - aware of any previous attempts to do this?

[08:10:05.0000] <SamB>
huh, SVGDocument has a couple of oddball properties ...

[13:01:42.0000] <rniwa>
Ms2ger: hi Ms2ger!

[13:02:38.0000] <Ms2ger>
Uh oh

[13:05:00.0000] <Ms2ger>
rniwa, what's up?

[13:06:46.0000] <rniwa>
Ms2ger: nah, just saying hi

[13:06:48.0000] <rniwa>
othermaciej: hi othermaciej!

[13:07:05.0000] <othermaciej>
hello rniwa!

[13:07:12.0000] <rniwa>
Ms2ger: we should talk about what to do with innerText at some point though...

[13:07:35.0000] <Ms2ger>
My position is still "not going to implement in Gecko or Servo" :)

[13:08:13.0000] <rniwa>
othermaciej: lol

[13:08:16.0000] <rniwa>
Ms2ger: ^

[13:08:28.0000] <Ms2ger>
Unless you get google.com to depend on it, I guess :)

[13:08:31.0000] <rniwa>
Ms2ger: I do think innerText is a useful feature though

[13:09:27.0000] <Ms2ger>
That'll depend on which implementation of it you mean :)

[13:09:57.0000] <Ms2ger>
s/<br>/\n/ doesn't seem too useful, and going full CSS... Not sure that's worth the complexity

[13:10:08.0000] <rniwa>
Ms2ger: going full CSS of course

[13:10:15.0000] <othermaciej>
Ms2ger: plaintext conversion is a useful feature

[13:10:20.0000] <rniwa>
Ms2ger: i agree s/<br>/\n/ won’t be useful

[13:10:25.0000] <othermaciej>
Ms2ger: you could debate whether innerText is the best way to expose it

[13:10:32.0000] <othermaciej>
Ms2ger: but it doesn’t otherwise exist in the platform

[13:11:30.0000] <othermaciej>
I feel like exposing what you do when you paste as plaintext (e.g. “Paste and Match Style” on Mac) is useful

[13:11:44.0000] <Ms2ger>
I'm not denying it could be useful, just not sure if it's worth the cost, personally

[13:11:53.0000] <othermaciej>
you could argue that you can only get that conversion as a side effect of a user-initiated paste, but that seems against the Extensible Web Manifesto

[13:12:10.0000] <othermaciej>
well, at least for Mac browsers, it’s functionality that needs to exist anyway

[13:12:19.0000] <Ms2ger>
Also, not sure if all consumers would be happy with the exact same functionality

[13:12:19.0000] <othermaciej>
the only question is whether to give it explicit API surface

[13:12:40.0000] <othermaciej>
I am not sufficiently familiar with Windows to know if it has the ability to explicitly paste as plaintext

[13:13:00.0000] <rniwa>
Ms2ger: I definitely agree with the complexity argument

[13:13:20.0000] <othermaciej>
I know the native Mail client on Mac has “convert to plaintext”, as does the text editor

[13:13:33.0000] <othermaciej>
it might be that web apps offering equivalent functionality prefer to do it by hand

[13:13:34.0000] <rniwa>
Ms2ger: if Servo can get away with not having innerText, maybe we just need to leave it up to UA to implement in accordance with the host platform

[13:13:57.0000] <othermaciej>
is the complexity about implementation or spec?

[13:13:58.0000] <rniwa>
othermaciej: perhaps we need some API to help that?

[13:14:01.0000] <Ms2ger>
If Gecko can get away with it now, I don't know why Servo wouldn't be able to :)

[13:14:04.0000] <rniwa>
othermaciej: i think implementation & spec.

[13:15:35.0000] <Ms2ger>
And testing and attack surface, as usual

[13:16:15.0000] <othermaciej>
I was going to say Gecko on Mac doesn’t seem to support Paste and Match Style

[13:16:28.0000] <othermaciej>
but on the other hand, it seems to only support plaintext paste, even in a contentEditable area

[13:16:40.0000] <Ms2ger>
(I don't know that feature)

[13:17:57.0000] <othermaciej>
it can’t even paste styled text from another firefox window

[13:18:04.0000] <Ms2ger>
It might still be worth doing despite the costs, of course; I'm definitely not going to make that call for Gecko

[13:18:21.0000] <othermaciej>
only from the same editable area afaict

[13:18:42.0000] <Ms2ger>
Just don't try to sell it on web-compat :)

[13:18:48.0000] <Ms2ger>
/me is off for a bit

[13:20:22.0000] <othermaciej>
it would be useful to have data on how many pages as-actually-browsed use it to see if there is really web compat value

[16:47:14.0000] <KevinMarks>
InnerText is useful for the fragmentions idea. Though collapsing whitespace was handy.


2014-04-20
[23:06:58.0000] <Ms2ger>
gsnedders, happy birtheaster!

[05:57:09.0000] <gsnedders>
Ms2ger: thx!

[12:41:49.0000] <SimonSapin>
Does html5lib have something like iterparse, to do an single in-order traversal on a tree while parsing without having the whole thing in memory?

[13:00:54.0000] <Ms2ger>
How would that deal with <table>foo?

[13:01:30.0000] <SimonSapin>
I don’t know, that’s why I ask :)

[13:03:20.0000] <SimonSapin>
I don’t know what the problem is exactly with <table>foo, but I suppose there could be some "buffering": the "event" for an element is delayed until we know it can not be moved around anymore because of parsing error recovery


2014-04-21
[00:25:38.0000] <MikeSmith>
Hixie: btw I'm getting 408s from W3C Bugzilla too

[08:29:30.0000] <dglazkov>
good morning, Whatwg!

[08:44:42.0000] <arv>
Hixie: Do you know where event propagation from Document to Window is speced?

[08:48:40.0000] <Ms2ger>
http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#events-and-the-window-object

[08:48:43.0000] <Ms2ger>
Is that it?

[08:49:12.0000] <arv>
Thanks Ms2ger

[08:49:21.0000] <Ms2ger>
Np

[11:33:44.0000] <Ms2ger>
So is this the fourth spec Selection has been in?


2014-04-22
[20:16:14.0000] <Hixie>
(i am on a plane and shall now respond to the last few days of comments. apologies for not reading the current state of the channel as i do this)

[20:16:18.0000] <Hixie>
SamB: json doesn't prevent injection attacks any more than xml prevents injection attacks

[20:16:42.0000] <Hixie>
TabAtkins: my understanding is that there's no rule about not referring to whatwg specs; if you are hearing differently, ping tantek.

[20:17:02.0000] <Hixie>
TabAtkins: (the w3c references plenty of specs that don't have patent policies, e.g. anything from the IETF)

[20:17:08.0000] <SamB>
Hixie: it's one less place to screw that up ...

[20:18:06.0000] <Hixie>
MikeSmith: yeah, i'm aware of thatcher's opinions on consensus. One of the few things she was quite right about. ;-)

[20:26:25.0000] <Hixie>
cwilso: the whatwg has the same fence as the w3c (no fence). well, the w3c has a pretend fence, but it has the same effect.

[20:27:02.0000] <Hixie>
cwilso: (the most obvious proof of which is the way the w3c keeps arbitrarily forking our specs)

[20:30:50.0000] <Hixie>
SamB: not really. I'm saying people should write their parsers at the unicode level, you're saying they should write them at the JSON level. It's one fewer layer to go wrong.

[20:32:12.0000] <Hixie>
ok closing laptop now, going in for landing.

[22:27:28.0000] <zcorpan>
SimonSapin: because of <html>foo<html foo> you need to "buffer" the whole document

[03:20:54.0000] <hsivonen>
annevk: what is Windows code page 29001 x-europa?

[03:21:12.0000] <hsivonen>
today I learned: LDAP uses T.61

[03:21:21.0000] <hsivonen>
at least in theory

[03:21:41.0000] <hsivonen>
also: Mozilla LDAP code doesn't used the Mozilla T.61 converter

[03:24:03.0000] <annevk>
hsivonen: I don't know

[03:25:50.0000] <annevk>
hsivonen: seems it's "Europa 3" but I've no idea what that is

[03:41:57.0000] <Ms2ger>
zcorpan_, hey, did you see https://bugzilla.mozilla.org/show_bug.cgi?id=998298 ?

[03:42:35.0000] <zcorpan_>
Ms2ger: yeah. what about it?

[03:43:12.0000] <Ms2ger>
I was hoping you'd suddenly feel like fixing the test :)

[03:46:51.0000] <zcorpan_>
oh. ok. not right now but i can put it on my list

[03:47:51.0000] <zcorpan_>
didn't gecko drop microdata?

[03:50:25.0000] <zcorpan_>
seems not

[03:53:20.0000] <zcorpan_>
Ms2ger: i'll probably not spend time on microdata tests until the api is implemented in blink again

[03:54:16.0000] <Ms2ger>
Alright, thanks

[04:07:59.0000] <annevk>
JakeA: the way the service worker specification is written at the moment reads like a tutorial

[04:08:13.0000] <annevk>
JakeA: e.g. "After successful installation and just prior to receiving functional events (e.g., fetch), the activate event is dispatched."

[04:20:01.0000] <JakeA>
annevk: I didn't write that line, fwiw I think it's wrong

[04:20:19.0000] <annevk>
JakeA: it seems also somewhat odd that there's an "Algorithms" section

[04:21:37.0000] <Ms2ger>
Is there also a "Data Structures" one?

[04:21:46.0000] <JakeA>
annevk: probably because those were developed separately. I guess they should be rolled into their relevant methods

[04:22:27.0000] <annevk>
JakeA: IDL of FetchEvent also seems somewhat botched; e.g. you can reply with an OpaqueResponse, so respondWith should take an AbstractResponse

[04:23:38.0000] <Ms2ger>
hsivonen, I assume not "T-61 Euthanasia Solution (Canada) for Animal Use"

[04:24:14.0000] <JakeA>
annevk: will fix that now

[04:29:58.0000] <annevk>
JakeA: filed https://github.com/slightlyoff/ServiceWorker/issues/242

[04:39:52.0000] <zcorpan_>
annevk: url spec has no limit on the port number?

[04:40:00.0000] <annevk>
zcorpan_: no

[04:40:05.0000] <zcorpan_>
annevk: why not?

[04:40:40.0000] <annevk>
zcorpan_: seemed arbitrary

[04:43:00.0000] <annevk>
Hmm, the current service worker specification seems kind of bad :-(

[04:59:59.0000] <zcorpan_>
annevk: where does the url spec make the windows drive letter quirk invalid?

[05:00:01.0000] <annevk>
JakeA: what does waitUntil() do?

[05:00:17.0000] <annevk>
JakeA: does it set any event flags?

[05:01:41.0000] <KevinMarks_>
is http://www.w3.org/TR/media-frags/ compatible with HTML5? it allows spaces in id's

[05:02:21.0000] <annevk>
KevinMarks_: does it not escape them?

[05:02:45.0000] <KevinMarks_>
it does, but how can they match ids?

[05:03:13.0000] <annevk>
KevinMarks_: could you give a more specific pointer maybe?

[05:03:22.0000] <JakeA>
annevk: It's slightly different per event. In install, the supplied promises define the length & success of the installation phase of the lifecycle

[05:03:52.0000] <JakeA>
annevk: In activate, the supplied promises define only the length of the activation phase

[05:04:04.0000] <KevinMarks_>
http://www.w3.org/TR/media-frags/#general-structure has http://www.example.com/example.ogv#id=Cap%C3%ADtulo%202

[05:04:10.0000] <annevk>
JakeA: what about pagereload?

[05:04:48.0000] <KevinMarks_>
id this dimension denotes a named temporal fragment within the original media, such as "chapter 2", and can be seen as a convenient way of specifying a temporal fragment.

[05:04:49.0000] <annevk>
KevinMarks_: that's not an HTML ID

[05:04:53.0000] <annevk>
KevinMarks_: or DOM ID

[05:05:03.0000] <KevinMarks_>
OK, that's what I thought.

[05:05:35.0000] <JakeA>
annevk: There it delays the reload for the length of the promises

[05:05:46.0000] <KevinMarks_>
so it's not a constraint on fragmentions within HTML

[05:07:30.0000] <annevk>
JakeA: what if the promise rejects?

[05:07:53.0000] <annevk>
JakeA: anyway, it never sets the canceled flag I guess?

[05:08:15.0000] <annevk>
JakeA: seems kind of weird this mix between promises and events

[05:09:55.0000] <JakeA>
annevk: A rejection aborts the reloadAll process

[05:13:11.0000] <annevk>
Hmm okay, so it somewhat augments the event dispatch process, I guess that's sort of within the line of what's okay, but somewhat weird

[05:34:40.0000] <annevk>
JakeA: actually, looking at the algorithms, a lot of them don't seem to talk about queueing events and probably should

[05:34:59.0000] <annevk>
JakeA: you can't just dispatch events at a set of documents

[05:35:40.0000] <annevk>
JakeA: and usually we don't talk about things like "serviceWorkerRegistration.currentWorker" as .currentWorker can be changed by script

[05:37:24.0000] <JakeA>
annevk: "queuing events" - is that to make it clear it's an async operation?

[05:37:47.0000] <annevk>
JakeA: yes and to make it clear when it happens relative to other asynchronous tasks

[05:37:53.0000] <JakeA>
annevk: serviceWorkerRegistration is a private object, it's only used within the spec

[05:37:55.0000] <annevk>
JakeA: see HTML's event loop definition

[05:54:49.0000] <JakeA>
annevk: Is there precedent for firing events across a set of documents then doing something with the result (eg, if some or all defaultPrevented)?

[05:55:34.0000] <annevk>
JakeA: not really, especially not with waitUntil weirdness

[05:56:02.0000] <annevk>
JakeA: you'd have to queue tasks that dispatch the events, check the return value, and report via some callback

[05:56:41.0000] <annevk>
JakeA: and then I guess you'd say "wait until all have reported back" in some kind of language that makes Domenic_ happy

[05:56:58.0000] <JakeA>
annevk: figured the reloadAll stuff would be difficult. Cheers.

[05:57:20.0000] <annevk>
JakeA: this spec needs a lot more infrastructure around it

[05:57:44.0000] <annevk>
JakeA: this is also true for a bunch of the other events, though they're less involved I suppose

[05:58:06.0000] <annevk>
JakeA: but all the across boundary stuff is hard, and service workers is full of it

[05:58:57.0000] <JakeA>
worth it though, at least I hope

[05:59:31.0000] <annevk>
oh yeah, it's just a bit annoying that the current spec doesn't really seem to grasp what it's doing

[06:01:31.0000] <JakeA>
yeah, next iteration needs to remove the vagueness

[06:23:59.0000] <JakeA>
Btw, the w3 guys are wanting to drop the outline algorithm from html5 but keep sectioning elements https://www.w3.org/Bugs/Public/show_bug.cgi?id=25003

[06:24:22.0000] <JakeA>
meaning adding it back in later breaks backwards compatibility

[06:28:40.0000] <annevk>
JakeA: wtf

[06:28:58.0000] <JakeA>
I know right

[06:28:59.0000] <annevk>
W3C HTML is crazy town

[06:29:16.0000] <SteveF>
JakeA: incorrect - not w3 guys dropping outline algorithm, as you know - implementers who have commented are borking at implementing  acc layer implementation

[06:29:55.0000] <SteveF>
JakeA: spreading misinfo not helpful

[06:30:43.0000] <JakeA>
The acc layer is where the outline is important

[06:31:11.0000] <SteveF>
JakeA: convince the implementers

[06:31:39.0000] <SteveF>
you have reps from firefox/chrome/webkit on that bug

[06:32:08.0000] <JakeA>
and I'm responding to that bug

[06:32:27.0000] <JakeA>
and also filing issues with Chrome & looping in the other vendors

[06:33:10.0000] <SteveF>
so why you blowing smoke then?

[06:34:15.0000] <SteveF>
singing to choir about the "W3C HTML is crazy town"

[06:34:32.0000] <JakeA>
Because the w3 are creating a situation where adopting the outline at the acc layer becomes a backwards incompatible change

[06:34:53.0000] <SteveF>
JakeA: how so?

[06:35:00.0000] <JakeA>
Because you're keeping sectioning elements, but dropping the outline from acc. They were introduced at the same time to avoid that.

[06:35:41.0000] <JakeA>
Because you're saying that section > h1 should be heading level 1. A later introduction of outlining to the acc layer means it becomes heading level 2

[06:35:54.0000] <SteveF>
the outline is not implemented in acc layer all that is being discussed is reflecting what is implemented

[06:37:31.0000] <SteveF>
that is what is,  not asking to implement anything

[06:39:17.0000] <annevk>
If you don't want outline, drop <section> & friends too

[06:39:40.0000] <annevk>
Pretty much the sole reason they are useful is influencing heading levels

[06:39:42.0000] <JakeA>
Right, but if it's introduced to "5.1", that makes 5.1 backwards incompatible with 5.0. To avoid that you need to drop all sectioning elements

[06:42:31.0000] <SteveF>
annevk: its not me that does or doesn't want it its the implementers

[06:43:16.0000] <annevk>
Outline is not just for accessibility, it's also for new selectors

[06:43:35.0000] <annevk>
And being able to organize content better

[06:44:15.0000] <annevk>
What Marco Zehe says in that bug is not true for all of Mozilla

[06:45:08.0000] <SteveF>
annevk: and as I have said the outline is not being dropped, we are discussing the modding of the requirement that has not been implemnted

[06:45:56.0000] <SteveF>
annevk: sure nobody speaks for all mozilla do they? but we are talking about acc related stuff so you duke it out with the acc guys if you have an issue with what they are saying

[06:45:59.0000] <JakeA>
annevk: I think what SteveF is suggesting is that the outline stuff would stay in the spec, but that a11y should only use the heading number, which makes it inconsistent

[06:46:31.0000] <wilhelm>
Have browser vendors given any indication on when they'd implement this, if ever?

[06:46:49.0000] <annevk>
wilhelm: I would guess it's generally low priority

[06:47:01.0000] <JakeA>
No one's filed a ticket for it, until now

[06:47:16.0000] <JakeA>
https://code.google.com/p/chromium/issues/detail?id=365070#c2

[06:48:16.0000] <SteveF>
JakeA: I am saying that what every browser does now is implement acc as I have indicated in that bug = current interop implementations

[06:48:56.0000] <annevk>
SteveF: yes, you have demonstrated nobody implements <section>; job well done

[06:49:22.0000] <annevk>
SteveF: your solution however makes <section> unusable forever

[06:49:28.0000] <annevk>
which is why we dub W3C HTML "crazy town"

[06:49:35.0000] <annevk>
or I do, anyway

[06:49:39.0000] <SteveF>
annevk: my solution?

[06:50:09.0000] <JakeA>
Dropping the acc requirement, meaning that outline isn't applied, meaning that section isn't applied

[06:51:06.0000] <wilhelm>
I hit the "all headings are the same level, WTF" issue when testing with screenreader users recently. Discouraging using <section>+<h1> is sensible until the outline algoirthm is actually implemented, but dropping just half of it in the spec sounds like it will just cause more confusion.

[06:52:10.0000] <JakeA>
wilhelm: A small polyfil that sets role="heading" and aria-level will fix it in browsers & ATs that support those things

[06:53:12.0000] <JakeA>
wilhelm: it'll cause confusion, but worse it causes backwards incompatibility. Conformant "HTML 5.0" sites will break in browsers+AT that support "HTML 5.1" and vice versa

[06:54:19.0000] <wilhelm>
JakeA: I hadn't thought of polyfilling that particular issue. That's a good idea.

[06:54:41.0000] <SteveF>
JakeA: using H1-H6 old style in conjunction with sections is fully backward compatible

[06:54:56.0000] <webben>
JakeA: The change wouldn't change the HTML5 CR along with HTML5.1?

[06:54:59.0000] <SteveF>
JakeA: telling devs to use h1 is not

[06:55:00.0000] <webben>
*The proposal

[06:55:31.0000] <annevk>
JakeA: should .client and .purpose be on Request?

[06:56:07.0000] <JakeA>
webben: still results in broken sites

[06:56:35.0000] <webben>
JakeA: Is <section><h1> to mean something other than heading level 1 in common use today?

[06:56:40.0000] <SteveF>
JakeA: how so?

[06:58:02.0000] <JakeA>
annevk: I think the intention was to separate the request from the situation that generated it

[06:58:30.0000] <JakeA>
annevk: As in, a fetch with purpose "image" may have added extra things to the accept header of the request

[06:58:38.0000] <SteveF>
webben: the proposal is to mod HTML5 to reflect current implementations leaving 5.1 to reflect desired implementation

[06:58:48.0000] <annevk>
JakeA: a fetch from origin will have done so too

[06:58:52.0000] <wilhelm>
SteveF: This document would be different in 5.0 and 5.1: <section><h1/> <section><h1/></section></section>

[06:59:09.0000] <JakeA>
webben: yes

[06:59:22.0000] <annevk>
JakeA: if you want to really separate them, we'd have to trim Request more

[06:59:26.0000] <webben>
JakeA: Are there any stats around that?

[06:59:28.0000] <annevk>
JakeA: which may be worth doing

[06:59:54.0000] <annevk>
JakeA: but will be complex

[06:59:58.0000] <JakeA>
webben: Around use & misuse?

[07:00:33.0000] <JakeA>
annevk: I think it comes down to what should go into a cache and what shouldn't

[07:00:36.0000] <webben>
JakeA: Around use of <section><h1> to mean something other than heading level one in the wild.

[07:01:09.0000] <JakeA>
webben: I don't. I'm sure there are misuses, just like any element.

[07:01:29.0000] <annevk>
JakeA: right, what hits the network and what doesn't

[07:01:30.0000] <SteveF>
willhelm: then the answer is to define requirement as "no role" in 5.0 which means implementers can implement as they want

[07:01:30.0000] <webben>
JakeA: I'm not talking about misuses?

[07:01:51.0000] <annevk>
JakeA: might be worth doing long term

[07:02:12.0000] <SteveF>
willhelm: but doesn't cause the break - thanks!

[07:02:14.0000] <JakeA>
annevk: Doing what?

[07:02:14.0000] <annevk>
JakeA: I think in the Fetch Standard I'll keep them unified in the "request concept" for now

[07:02:14.0000] <webben>
JakeA: Per CR and Living Standard, <section><h1> can mean something other than heading level one. I'm wondering how widespread that actually is in the corpus.

[07:03:15.0000] <annevk>
JakeA: trimming request further and having a separate bag of bits that instructs the fetch algorithm to do various things

[07:03:18.0000] <JakeA>
webben: Straw poll in the office & most of us are using section to affect outline on our projects, but I realise that's not good evidence

[07:04:01.0000] <webben>
JakeA: e.g. if 0.0001% of pages that use <section><h1> use it to mean something other than heading level one, then always interpreting h1 as heading level one may result in better understanding of the corpus generally.

[07:04:04.0000] <wilhelm>
webben: My gut feeling from the projects I've worked on says it's widespread, but real data would be nice.

[07:04:10.0000] <JakeA>
annevk: Ahh yes, agreed. The request does need some private link to the requesting element for prioritisation etc. That link should be removed when it goes into caches.

[07:04:48.0000] <annevk>
JakeA: you need a link to the source for CSP, .client, referrer policy

[07:04:53.0000] <JakeA>
wilhelm: What would you look for? Number of sites that use <section> or number of sites that use <section> correctly?

[07:05:02.0000] <webben>
JakeA: I remember in the earlier days of HTML5's evolution, there were quite a lot of attempts to look at usage in the wild and redefine the semantics accordingly on the basis that it led to better understanding of the corpus as a whole.

[07:06:10.0000] <webben>
JakeA: You'd have to look for sites that use section to nest heading levels. It might be possible to approach that statistically (e.g. look for unusual nestings) but to be sure you'd probably have to do a qualitative inspection.

[07:06:29.0000] <JakeA>
webben: agreed

[07:06:49.0000] <webben>
(We had to do similar inspections for e.g. the summary attribute.)

[07:07:47.0000] <wilhelm>
JakeA: Finding sites containing <section> and more than one <h1> would give an indication.

[07:07:55.0000] <SteveF>
willhelm: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25003#c25

[07:08:48.0000] <webben>
wilhelm: Mmm. Multiple h1s is not that uncommon even without <section>

[07:09:27.0000] <webben>
wilhelm: There was a long-running markup debate about whether pages should use h1 for a title for the page or multiple h1s for different sections on the same page.

[07:10:08.0000] <annevk>
JakeA: btw, what about renaming .purpose to .context?

[07:11:05.0000] <wilhelm>
SteveF: I have not used that particular ARIA role before. Would that mean that all heading magic would disappear from the <section><h1> element?

[07:12:39.0000] <JakeA>
annevk: Not sure it's better, but not against it. Could it get confused with browsing context?

[07:14:05.0000] <annevk>
JakeA: it's not really a purpose is my main problem here

[07:15:08.0000] <JakeA>
"origin"! No, wait…

[07:15:39.0000] <JakeA>
annevk: Yeah, fair enough, context is better

[07:15:40.0000] <SteveF>
willhelm: magic where?

[07:15:45.0000] <annevk>
we decided to call browsing context a client

[07:15:50.0000] <annevk>
ok, will file

[07:18:30.0000] <wilhelm>
SteveF: I don't fully understand the implications of what you suggest in comment 25. (c:

[07:20:30.0000] <SteveF>
willhelm: currently there is an implementation requirement on browsers to map hx to outline depth - this is couched in terms of ARIA roles/properties which have mappings to platform acc APIs

[07:21:05.0000] <annevk>
JakeA: looking at http://fetch.spec.whatwg.org/#requests it seems method/url/headers/body are essential, everything else is parameters

[07:21:36.0000] <annevk>
JakeA: I can look into rephrasing things in that way, although it might make Fetch even harder to use from other specifications...

[07:21:39.0000] <annevk>
ugh

[07:21:50.0000] <SteveF>
willhelm: none of the browsers implement this they all implement soemthing else, as you pointed out, requiring they implement something esle in 5.0 and changing in 5.1 causes issue

[07:23:08.0000] <wilhelm>
So far I'm following. (c:

[07:24:34.0000] <SteveF>
willhelm: removing strict requirement from 5.0 , as its is not going to happen in 5.0 rec timeframe, but having it in 5.1 resolves issue

[07:25:45.0000] <wilhelm>
SteveF: So what exactly should browsers do right now to be compliant? "Whatever they want"?

[07:26:59.0000] <SteveF>
willhelm: the interop implementation of heading semantics is currently h1= heading level 1, h2 = heading level 2 etc

[07:28:03.0000] <SteveF>
willhelm: which will not chnage until the browsers decide to implement the new requriements

[07:28:44.0000] <JakeA>
annevk: hmm, maybe there's a better way. What do you need on the request obj to keep things easy?

[07:31:10.0000] <wilhelm>
SteveF: But then we're back to <section><h1> yielding two different outlines depending on whether a UA follows 5.0 or 5.1. Or do I misunderstand?

[07:31:31.0000] <JakeA>
wilhelm: nope, that's exactly the problem

[07:31:58.0000] <SteveF>
willhelm: the problem exists whatever the spec says the problem is in the implementations

[07:32:06.0000] <annevk>
JakeA: I dunno, I want to move this purpose/context thing into http://fetch.spec.whatwg.org/ somehow

[07:32:15.0000] <annevk>
JakeA: I also need the "client" concept there

[07:32:34.0000] <annevk>
JakeA: just wondering how we want to layer the whole stack

[07:33:01.0000] <JakeA>
annevk: Maybe we can put them there & drop them when they go into the cache

[07:33:46.0000] <annevk>
JakeA: I suppose we could also expose the request concept differently in the API

[07:34:04.0000] <annevk>
JakeA: there's a bit of a question too as to how this should all work with fetch()

[07:34:11.0000] <JakeA>
SteveF: The problem is when a spec breaks a compliant implementation, which is what you're talking about. Right now, non-compliant implementations are broken,

[07:34:45.0000] <webben>
SteveF: There doesn't _have_ to be an inconsistency in the versions of the spec. For instance, 5.0 could require <section> to be used so that <hX> elements are in order if <section> were not present.

[07:35:02.0000] <SteveF>
JakeA: what I have proposed after discussion does not break

[07:35:13.0000] <wilhelm>
SteveF: You'll have two versions of the spec that disagree with each other. You can't be compliant both with 5.0 and 5.1.

[07:35:55.0000] <webben>
SteveF: Or (I suppose) require aria-heading-level to be added where hX elements are nested "incorrectly".

[07:36:02.0000] <SteveF>
willhelm: yes you can

[07:36:25.0000] <SteveF>
i agree before you couldn't and thanks for pitning that out

[07:36:30.0000] <SteveF>
pointing

[07:37:07.0000] <webben>
wilhelm: I think you mena it is possible (for a document) to comply with 5.0 and not with 5.1. (One can always use <section><h1> such that it does not introduce conflicts of interpretation, i.e. redundantly.)

[07:37:19.0000] <webben>
*you mean

[07:39:15.0000] <annevk>
Hmm, Chrome wants to ship HTML imports

[07:39:46.0000] <Ms2ger>
Let's go to LC

[07:39:47.0000] <JakeA>
Wonder what happened to the render blocking stuff. slightlyoff?

[07:39:49.0000] <annevk>
Without any of the features ES modules have, such as scoping of names and such

[07:40:04.0000] <annevk>
JakeA: the latest I heard was that you specify async

[07:40:21.0000] <JakeA>
sadface

[07:40:39.0000] <JakeA>
We shouldn't be introducing new render-blocking features

[07:41:37.0000] <annevk>
Blog about it

[07:42:14.0000] <JakeA>
Already made a ton of noise about it internally. Maybe slightlyoff has more info.

[08:26:19.0000] <dglazkov>
good morning, Whatwg!

[08:26:40.0000] <annevk>
morning dglazkov

[08:26:51.0000] <cwilso>
hixie: the incorporation of whatwg output into w3c work does put a ladder across their fence, yes.  We could have a more nuanced discussion of that dynamic; but the point of the W3C PP is getting major patent holders to mutually agree to x-license.

[08:27:02.0000] <cwilso>
hixie: s/their/W3C's

[08:27:16.0000] <cwilso>
good morning dglazkov!

[08:28:04.0000] <cwilso>
hixie: last I checked, whatwg is still wild west wrt ip.

[08:28:49.0000] <Hixie>
cwilso: well, the whatwg is a cg, it's using the cg model of regular FSAs. We just haven't actually done any, much like the w3c hasn't done any RECs. :-)

[08:29:27.0000] <Hixie>
cwilso: but i think you vastly overestimate the benefits of the patent policy.

[08:30:05.0000] <cwilso>
hixie: well, I'd say the whatwg uses a cg as one input, not "it does its work under the umbrella of a cg".  But perhaps I'm mistaken.

[08:30:43.0000] <annevk>
cwilso: a CG's venue can be anywhere

[08:30:45.0000] <cwilso>
hixie: if you think I think a patent policy is some giant protective umbrella, then I can understand why you'd think I vastly overestimate its benefits.

[08:30:55.0000] <annevk>
cwilso: ours is whatwg⊙wo and this IRC channel, roughly

[08:31:19.0000] <cwilso>
annevk: indeed.  Has everyone in whatwg@ and this irc channel signed up to the CG?

[08:33:08.0000] <Hixie>
the whatwg is a w3c cg, it does all the work under the cg umbrella

[08:33:10.0000] <cwilso>
hixie: but I'm not an idiot.  Well, not about ip.  there is nothing that can protect against someone else owning IP and pressing its advantage (e.g. EOLAS); the only useful goal is to get the major ip holders to participate in a venue where they've been kept "honest".

[08:33:39.0000] <Hixie>
right now all the "major ip holders" participate both in the cg and the wg

[08:33:49.0000] <Hixie>
so...

[08:33:58.0000] <cwilso>
hixie: and that's why it's not a complete disaster.

[08:34:10.0000] <Hixie>
well, it's why it _is_ a disaster, but for other reasons

[08:34:17.0000] <cwilso>
ha!

[08:34:31.0000] <cwilso>
/me afk

[08:35:29.0000] <Hixie>
anyway. i don't really understand what threat model you're concerned about which the REC process deals with but the FSA process doesn't.

[08:42:00.0000] <annevk>
JakeA: for the algorithms you need to clarify what kind of exceptions you are rejecting with

[08:42:14.0000] <annevk>
JakeA: and you want to reference terms such as "document url" somehow

[08:42:35.0000] <annevk>
JakeA: and link to the URL parser when you parse URLs (rather than just say "resolved" which doesn't mean much these days)

[08:42:56.0000] <annevk>
JakeA: if you want I can go through the algorithms at one point and file issues

[08:43:05.0000] <annevk>
JakeA: or we can keep doing this

[08:46:27.0000] <TabAtkins>
annevk: Mind chatting about element-tree vs DOM in real-time?  I'm on the fence.

[08:46:45.0000] <dglazkov>
what's element-tree? that sounds awesome

[08:46:49.0000] <annevk>
TabAtkins: can do

[08:46:57.0000] <TabAtkins>
dglazkov: The abstraction I currently have in Selectors of the document tree. ^_^

[08:47:51.0000] <TabAtkins>
annevk: Cool.  So your arguments are definitely pulling me towards just using DOM.  But I'm not 100% convinced yet.  Mainly it's the idea that there is still info not present in the DOM that Selectors uses, like pseudo-elements.  You make some argument about PEs that I don't quite understand in that last email.

[08:48:06.0000] <TabAtkins>
I think it's reasonable (and probably easier) to consider that PEs are always in the tree.

[08:48:28.0000] <JakeA>
annevk: issues would be great. I thought I'd added exceptions to the rejects, guess I missed some

[08:48:45.0000] <annevk>
JakeA: you did, but what is "NetworkError"?

[08:49:12.0000] <annevk>
TabAtkins: so your argument is that ::before and ::after are in the DOM?

[08:49:13.0000] <JakeA>
annevk: I thought I found that in the dom spec

[08:49:24.0000] <TabAtkins>
annevk: Yeah.

[08:49:25.0000] <annevk>
TabAtkins: I always thought of them as to be in the box tree

[08:49:47.0000] <TabAtkins>
annevk: Nah, properties get first applied to elements, so they're in the element tree.

[08:49:51.0000] <TabAtkins>
Boxes get generated from elements, based on 'display' and other things.

[08:50:30.0000] <TabAtkins>
That is, a ::before (pseudo-) element is set to display:block and content: "foo", it generates a block box that forgets about where it came from.

[08:50:30.0000] <annevk>
JakeA: if you reuse those, you also need to reuse the "throw" glue as otherwise it isn't clear what object is being used

[08:51:12.0000] <annevk>
TabAtkins: currently there's nothing that requires pseudo-elements to be in the node tree

[08:51:25.0000] <annevk>
TabAtkins: an implementation could only have them in the box tree, and I think Firefox might do that

[08:51:31.0000] <TabAtkins>
Right, nothing *requires* them, but it makes the overall model simpler.

[08:51:58.0000] <annevk>
TabAtkins: not if that model is not defined ^_^

[08:52:22.0000] <TabAtkins>
I doubt FF has pseudo-elements actually in the box tree.  It might only *generate* boxes for PEs (and not actually keep anything representing them in the tree that selectors are run over), which is fine.

[08:52:32.0000] <annevk>
(Text selection and such might require them to be I suppose. Once we really nail that it'll become observable one way or another.)

[08:52:35.0000] <TabAtkins>
Defining that model is what I'm trying to do (sorta gradually, but mostly I'm holding off until I resolve your issues).

[08:53:16.0000] <TabAtkins>
If you think it's okay to say that Selectors operates on the DOM, augmented with X and Y concepts, I think I can work with that.

[08:54:07.0000] <annevk>
Yeah, I think that would make sense. You'd define that elements have an additional ::after and ::before slot, and that these get returned when you use a pseudo-element

[08:54:33.0000] <annevk>
And then the algorithm that takes a style sheet and a node tree, also looks at element's their ::after and ::before slot

[08:54:48.0000] <TabAtkins>
(+ multiple other pseudo-element slots)

[08:55:08.0000] <TabAtkins>
So, one complication.  Some pseudo-elements can contain real elements.

[08:55:10.0000] <annevk>
Yeah, it could be generic I suppose

[08:55:17.0000] <TabAtkins>
Such as ::shadow containing the contents of the shadow tree.

[08:55:26.0000] <TabAtkins>
Does this disturb anything?

[08:55:54.0000] <annevk>
I would expect that selector to be split and separately matched. Is that correct?

[08:56:19.0000] <TabAtkins>
Depends on how you work it internally.  That's possible, sure.

[08:56:56.0000] <TabAtkins>
foo::shadow bar just means "find a foo element in your current context, find its shadow root, then find a bar descendant".

[08:57:15.0000] <TabAtkins>
You can interpret it similar to combinators, rather than as splitting the selector up, if you want.

[08:57:40.0000] <annevk>
Should that not be a combinator then? Or is is ::shadow also a box of sorts?

[08:58:11.0000] <annevk>
But I think that works, you just have to define the distinct trees that need to be matched upon

[08:58:57.0000] <annevk>
But if that's not a combinator that also makes it complicated for what we want .query() to do when passed ::shadow vs what we want when you pass ::before

[08:59:13.0000] <TabAtkins>
::shadow matches the shadow root.  Currently that's indistinguishable from a combinator, but it's possible for a specialized API to actually *return* the ShadowRoot object from a selector like "foo::shadow", for example.

[08:59:45.0000] <TabAtkins>
Nah, the "match a selector" algo already handles pseudos.  You just have to specify what pseudos, if any, you want to be allowed to be returned by it.

[08:59:52.0000] <annevk>
Whoa, if we want that then that should be raised quickly, currently .query only returns elements

[09:00:11.0000] <TabAtkins>
I dunno if it's useful! But it is possible.

[09:00:40.0000] <TabAtkins>
(Similarly, ::content might be able to return something, though I don't think we have a specialized object for it yet.)

[09:01:08.0000] <TabAtkins>
annevk: How quickly do you think we need to define a PseudoElement interface if we want .query() to be able to return it?

[09:01:35.0000] <Ms2ger>
Let's just ship it

[09:02:23.0000] <annevk>
TabAtkins: dunno, twelve months or so

[09:02:31.0000] <annevk>
TabAtkins: we'd also need a new name for "Elements"

[09:02:32.0000] <TabAtkins>
Okay, that's reasonable.

[09:02:39.0000] <TabAtkins>
What do you mean?

[09:02:45.0000] <annevk>
TabAtkins: "Nodes" might work

[09:03:03.0000] <annevk>
TabAtkins: queryAll() returns an Array-subclass named Elements

[09:03:08.0000] <TabAtkins>
Oh!

[09:03:26.0000] <annevk>
TabAtkins: PsuedoElement is arguably an Element, but ShadowRoot is not

[09:03:35.0000] <TabAtkins>
Yeah, maybe.  I mean, I'm not fussed about something called Elements containing instance of both Element and PseudoElement.

[09:03:53.0000] <TabAtkins>
Ah, true (though maybe it can WebIDL-implement PseudoElement).

[09:04:07.0000] <annevk>
Interesting idea

[09:04:25.0000] <annevk>
Okay, should be fine then I suppose if we can make that work

[09:05:13.0000] <TabAtkins>
(I think the PseudoElement generic interface will probably contain only two fields: name and originatingElement.)

[09:05:42.0000] <TabAtkins>
(Individual pseudos can subclass for more info, of course.)

[09:05:48.0000] <TabAtkins>
(Oh, and .style, obviously.)

[09:06:18.0000] <TabAtkins>
Okay, so plan of record is:

[09:06:48.0000] <TabAtkins>
Rephrase Selectors to be based directly on DOM, with a note about how non-DOM languages can map to a DOM.

[09:07:10.0000] <TabAtkins>
For the purpose of Selectors, augment DOM with arbitrary pseudo-elements as well.

[09:07:32.0000] <TabAtkins>
And, separately, define a PseudoElement interface people are willing to implement (in some other spec).

[09:08:34.0000] <annevk>
Sounds about right. Consider naming originatingElement ownerElement instead

[09:09:25.0000] <astearns>
TabAtkins: "something called Elements containing instance of both Element and PseudoElement"

[09:09:28.0000] <TabAtkins>
Ah, that works.

[09:09:47.0000] <astearns>
sounds a bit like the region interface, defined to be either an element or pseudoelement

[09:10:00.0000] <astearns>
might want to look at the discussion of why we got pushback on that

[09:10:02.0000] <TabAtkins>
"originating element" is just the language fantasai and I came up with, as a replacement for Hixie's "superior parent".

[09:10:16.0000] <Ms2ger>
/me wonders if this tree is going to be defined better than the box tree

[09:11:25.0000] <TabAtkins>
Ms2ger: DOM is indeed better defined than the box tree, yes.

[09:11:34.0000] <TabAtkins>
(And I'm still on the hook for the box tree - it goes in my spec.)

[09:11:50.0000] <TabAtkins>
astearns: Yeah, I plan to basically reopen that discussion.

[09:12:02.0000] <Ms2ger>
TabAtkins, I meant DOM+pseudos

[09:12:13.0000] <astearns>
TabAtkins: ok, just wanted to make sure you weren't blundering blindly into it :)

[09:12:22.0000] <TabAtkins>
Ms2ger: It's defined as "DOM, but with additional pseudos". ^_^

[09:12:44.0000] <TabAtkins>
(Not really; I've got in mind what should be a decent definition.)

[09:18:07.0000] <annevk>
I think it's not too different from elements having flags for pseudo-classes

[09:18:26.0000] <annevk>
Flags for pseudo-classes, slots for pseudo-elements

[09:18:37.0000] <TabAtkins>
Yeah, exactly.

[09:18:54.0000] <TabAtkins>
Specialized information augments that are only visible while evaluating Selectors against the element.

[09:19:30.0000] <TabAtkins>
(Interestingly, the selectors data model is no longer a tree anyway - since the Scoping pseudo-elements, it's a DAG.)

[09:20:06.0000] <annevk>
DAG?

[09:20:25.0000] <MikeSmith>
what's the right way to programmatically determine the current date in the user's local time zone?

[09:20:35.0000] <TabAtkins>
annevk: directed acyclic graph

[09:20:36.0000] <annevk>
"Directed acyclic graph"

[09:20:48.0000] <TabAtkins>
There are multiple paths to a given element now.

[09:20:54.0000] <TabAtkins>
To some given elements, at least.

[09:21:23.0000] <annevk>
Only if you use ::shadow and only if you assume they are not distinct matching operations

[09:21:56.0000] <TabAtkins>
"foo > bar" and "foo::shadow ::content > bar" select the same element in "<foo><bar/><::shadow><content/></::shadow></foo>".

[09:24:18.0000] <annevk>
MikeSmith: you can get all the info from new Date()

[09:25:01.0000] <annevk>
MikeSmith: d = new Date(); alert(d.getYear() + " " + d.getMonth() ...

[09:25:52.0000] <annevk>
TabAtkins: oh man, those are pretty trippy

[09:26:26.0000] <annevk>
TabAtkins: that does look like what you'd want; good luck defining them ^_^

[09:29:30.0000] <MikeSmith>
annevk: ok so if I then do d.getHours() that returns the local hour?

[09:29:49.0000] <annevk>
MikeSmith: it should

[09:29:54.0000] <MikeSmith>
ok

[09:30:17.0000] <zewt>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date

[09:30:28.0000] <annevk>
new Date().getHours() gives 18 for me which seems about right

[09:32:19.0000] <MikeSmith>
yeah, I assume it's defined that way. Otherwise there'd be no point to getUTCHours()

[09:32:33.0000] <MikeSmith>
I suppose I should actually read the spec

[09:33:13.0000] <annevk>
MikeSmith: well to be fair, there's no logic to the Date object really

[09:33:34.0000] <annevk>
MikeSmith: it's badly designed and I think people want to offer a better API as soon as there's modules

[09:33:43.0000] <MikeSmith>
that would be nice

[09:33:48.0000] <zewt>
one of the many warts of the platform: that the short "getHours" ones are local time and "UTC" is the one that looks special, instead of getHours being UTC and having local be getLocalHours

[09:36:31.0000] <MikeSmith>
zewt: yeah though it seems that's actually a wart of JS itself

[09:52:53.0000] <MikeSmith>
jsbell: Can you review pull requests for IDB tests? Or is there someone else who can? There's a bunch of tests waiting to be reviewed: https://github.com/w3c/web-platform-tests/pulls/yunxiaoxie

[09:53:52.0000] <jsbell>
MikeSmith: Zhiqiang has been doing it

[09:55:31.0000] <MikeSmith>
jsbell: ok

[09:56:29.0000] <zewt>
MikeSmith: warts of JS and warts of the platform are the same thing

[09:56:37.0000] <zewt>
as far as I'm concerned, heh

[10:24:39.0000] <Domenic_>
annevk: https://www.npmjs.org/package/dom4-elements

[10:24:55.0000] <Domenic_>
it doesn't absolutize relative selectors, which is kinda dumb. and the name makes me sad.

[10:24:59.0000] <Domenic_>
but, it's neat.

[10:25:21.0000] <annevk>
fun

[10:25:37.0000] <annevk>
Domenic_: did you see the backlog? TabAtkins is proposing some interesting additional features

[10:25:55.0000] <Domenic_>
annevk: I didn't see TabAtkins original proposal, but I saw the replies...

[10:25:56.0000] <TabAtkins>
Well, "features".

[10:26:17.0000] <annevk>
Well, pseudo-elements.

[10:26:20.0000] <TabAtkins>
Plan is to allow pseudo-elements to return PseudoElement objects in an Elements array.

[10:26:32.0000] <Domenic_>
Is PseudoElement a thing?

[10:26:40.0000] <TabAtkins>
Most direct use-case is to say "foo::shadow" to get the ShadowRoots of an element.

[10:26:42.0000] <TabAtkins>
Not yet, no.

[10:27:32.0000] <TabAtkins>
(astearns came up with a proposal earlier, but it died. I plan to revive it.)

[10:28:06.0000] <astearns>
TabAtkins: first convince abarth

[10:28:17.0000] <TabAtkins>
Sure.

[10:28:31.0000] <TabAtkins>
Easier to convince with more concrete use-cases now, like "foo::shadow".

[10:29:08.0000] <TabAtkins>
query("foo::shadow") rather than query("foo").map(function(el) { return el.shadowRoots; }) (or whatever).

[10:30:22.0000] <annevk>
queryAll*

[10:30:34.0000] <TabAtkins>
Yeah, sorry.

[10:53:09.0000] <Hixie>
TabAtkins: iirc, i had used "superior parent" rather than something with "element" in the name because it might not be an element (but i don't remember what this was about now, so it might no longer apply)

[10:53:23.0000] <TabAtkins>
Hixie: PsuedoElement is *like* an element.

[10:53:42.0000] <Hixie>
in some ways

[10:57:24.0000] <annevk>
TabAtkins: you could just stick with owner

[10:57:45.0000] <annevk>
TabAtkins: I guess in some setups it could be another Pseudo-Element

[11:02:52.0000] <Hixie>
"owner" has a lot of baggage

[11:03:23.0000] <dglazkov>
TabAtkins: I have a mental block. What's the value in display module to make element's box disappear?

[11:05:51.0000] <dglazkov>
display-box: contents

[11:08:34.0000] <TabAtkins>
annevk: Yes, it will probably be possible to be a pseudo element in the future.

[11:08:46.0000] <TabAtkins>
dglazkov: Yes

[11:08:53.0000] <dglazkov>
\o/

[11:09:19.0000] <TabAtkins>
annevk: foo::before::before, for example

[11:09:29.0000] <SamB>
hmm, hmm, hmm ...

[11:11:43.0000] <SamB>
... reference "element"? context "element"?

[11:12:03.0000] <Hixie>
"superior parent" :-)

[11:12:22.0000] <dglazkov>
Hixie: you called? :P

[11:13:02.0000] <dglazkov>
wait no, I am just "#1 dad"

[11:13:14.0000] <dglazkov>
that's what the mug says. it must be true

[11:14:25.0000] <Hixie>
Domenic_: btw, on the whatwg list, +1s (or "i strongly support this") don't have much meaning, especially if the +1 comes from someone with a horse in the race (like, "i strongly support that you use this feature i worked on") :-)

[11:16:00.0000] <SamB>
parent seems kind of confusing here wrt :before/:after ...

[11:16:09.0000] <Hixie>
why?

[11:16:12.0000] <SamB>
/me goes to see what it looks like in the DOM inspector ...

[11:16:15.0000] <Hixie>
::before is a child of the element it's attached to

[11:16:21.0000] <Hixie>
::before really means "before the content"

[11:16:23.0000] <Hixie>
or "just inside"

[11:16:44.0000] <SamB>
hmm, okay, so it's not as confusing as I was expecting

[11:17:53.0000] <TabAtkins>
SamB: Yeah, the naming is pretty unfortunate, but that's *long*-frozen legacy.

[11:17:59.0000] <SamB>
/me may be thinking of some other pseudo-element?

[11:18:08.0000] <TabAtkins>
::firstest-child and ::lastest-child.

[11:19:12.0000] <Domenic_>
Hixie: sure, I wouldn't have written a message with that as the *only* content. It was more, before I criticize specifics, let me be clear I'm rooting for you.

[11:19:23.0000] <SamB>
yeah, I trust the old DOM inspector to know what it's doing here ... which may be crashing firefox ...

[11:20:37.0000] <Domenic_>
::before::before rises again!!! I strongly support this!

[11:21:57.0000] <dglazkov>
always wondered if ::before is explained by the mysterious decorators

[11:22:22.0000] <SimonSapin>
and ::before(2)?

[11:24:28.0000] <TabAtkins>
SimonSapin: Sure, why not.  It's distinct from ::before::before and useful for different things.

[11:25:15.0000] <TabAtkins>
Domenic_: We've finally removed the restrictions on things appearing on the RHS of a pseudo-element, so allowing more pseudo-elements there is the next logical step

[11:25:33.0000] <SimonSapin>
TabAtkins: do you know what’s happening with http://dev.w3.org/csswg/css-pseudo/ ?

[11:25:59.0000] <SimonSapin>
do people think it’s a bad idea, or is just that nobody has bothered yet to push it?

[11:26:13.0000] <TabAtkins>
SimonSapin: Latter.

[11:26:29.0000] <TabAtkins>
Once I'm done fixing up Selectors 4, I plan to pick up Pseudo to give it more love.

[11:26:57.0000] <SimonSapin>
cool

[11:41:33.0000] <Ms2ger>
TabAtkins, can you find a few more people like you?

[11:41:42.0000] <Ms2ger>
I wanted the box tree defined last year ;)

[11:42:05.0000] <Ms2ger>
/me wonders if TabAtkins has siblings

[11:45:31.0000] <TabAtkins>
Ms2ger: Man, I've been trying.

[11:45:37.0000] <TabAtkins>
And I do, but none of them are involved with the web.

[11:45:43.0000] <Ms2ger>
To get sibli... Oh

[11:46:12.0000] <jgraham>
Maybe to create more people genetically similar to himself?

[11:46:14.0000] <TabAtkins>
Getting siblings is no longer an option.

[11:46:22.0000] <TabAtkins>
Except through adoption, I suppose.

[12:32:21.0000] <astearns>
TabAtkins: SimonSapin there were definitely some people who thought css-pseudo was the worst idea in the world

[12:32:38.0000] <astearns>
which is the main reason I haven't been pushing it

[12:37:06.0000] <TabAtkins>
astearns: Obviously that's never stopped me.

[12:37:17.0000] <astearns>
:)

[12:37:38.0000] <SamB>
astearns: what do they prefer instead? XBL 1.0?

[12:38:08.0000] <astearns>
SamB: no alternative, just not my draft

[12:40:44.0000] <SamB>
Hixie: why do they need "superior parent" when they're basically just extra-document children? why not just "parent"?

[12:44:24.0000] <TabAtkins>
SamB: Because they're not children.

[12:44:36.0000] <TabAtkins>
"parent" implies that the opposite relationship is "child".

[12:44:48.0000] <SamB>
so pseudo-parent?

[12:45:00.0000] <TabAtkins>
But then that's just weird.

[13:20:42.0000] <zewt>
"xxx parent" referring to something that isn't the opposite of "child" is weird, too

[13:22:07.0000] <Hixie>
iirc "superior parent" reflected to "inferior child"?

[13:22:09.0000] <Hixie>
i could be wrong

[13:22:11.0000] <Hixie>
it's been a while

[13:22:40.0000] <SamB>
pseudo is a good word for weird things

[14:20:50.0000] <Hixie>
anyone remember when form controls were added to HTML browsers?

[14:23:05.0000] <tantek>
Hixie, Dave Raggett added forms and tables to HTML2 IIRC

[14:25:02.0000] <Hixie>
i wonder where that stood relative to implementations

[14:25:46.0000] <Hixie>
http://www.w3.org/People/Raggett/book4/ch02.html suggests april 1993

[14:26:57.0000] <tantek>
back when browsers and mailing lists were tightly bound

[14:27:19.0000] <Hixie>
next question, when did mobile safari come out? june 2007?

[14:27:19.0000] <tantek>
i.e. anyone could suggest something, implementer or w3c person, and if it seemed like a good idea it just got built/deployed

[14:27:31.0000] <Hixie>
same as now then? ;-)

[14:27:43.0000] <tantek>
Hixie - took us a while to get back here

[14:27:55.0000] <Hixie>
true dat

[14:27:57.0000] <SamB>
so why we no can has MNG again?

[14:28:10.0000] <tantek>
SamB - comment on the bug(s) in bugzilla ;)

[14:28:17.0000] <SamB>
noooooo

[14:28:18.0000] <gsnedders>
Hixie: mob saf was same time as iPhone shipped, so would be then

[14:28:19.0000] <tantek>
lol

[14:28:24.0000] <SamB>
actually I might have done that

[14:28:36.0000] <SamB>
but, um, it's not likely to help ...

[14:29:00.0000] <tantek>
SamB, works for some browsers sometimes

[14:30:20.0000] <SamB>
actually, more seriously, JNG seems a shame to lose just because MNG got ripped out ...

[14:36:41.0000] <SamB>
tantek: iirc, it looked like there was either (a) an irrational hatred for MNG/mnglib or (b) an inadequately explained, but rational, hatred for MNG/mnglib

[14:37:06.0000] <tantek>
like RDF hatred or something else?

[14:37:10.0000] <SamB>
at https://bugzilla.mozilla.org/show_bug.cgi?id=mng

[14:37:20.0000] <SamB>
well, RDF is kind of crazy syntax-wise

[14:37:35.0000] <SamB>
I can understand why people might hate that

[14:39:13.0000] <Hixie>
MNG is waaaay over-engineered

[14:39:57.0000] <SamB>
Hixie: yeah, hence the "more seriously, JNG [...]"

[14:40:35.0000] <SamB>
/me wishes the MNG people weren't such sore losers ...

[14:46:31.0000] <Hixie>
yeah i often wonder about that kind of reaction

[14:47:11.0000] <Hixie>
e.g. i wonder if people realise how many specs or parts of specs i've worked on (or that many others in this channel have worked on) that have gone down the drain

[14:47:26.0000] <Hixie>
some involving years and years of work

[14:47:38.0000] <Hixie>
e.g. xbl2, web sql db

[14:47:45.0000] <Hixie>
web controls 2.0

[14:47:57.0000] <Hixie>
you can't take it personally

[14:48:01.0000] <SimonSapin>
astearns: "people who thought css-pseudo was the worst idea in the world", did they give any reason?

[14:53:55.0000] <zewt>
if someone doesn't make a reasonable lightweight animation format to replace gif, one of these days someone's just going to hack RGBA32 into GIF and it'll catch on and then we'll be stuck with that for all eternity

[14:56:48.0000] <astearns>
SimonSapin: some are in the minutes: http://lists.w3.org/Archives/Public/www-style/2012Aug/0771.html

[14:57:05.0000] <astearns>
SimonSapin: mainly they thought the use cases were something we should not design a CSS feature for

[14:58:41.0000] <tantek>
Hixie - perhaps when people spend years only working on a single spec

[14:58:52.0000] <tantek>
then their emotional vesting is all in one basket

[15:01:10.0000] <Hixie>
oh faff, the w3c want me to change my password to a more "secure" one

[15:01:17.0000] <Hixie>
like i care one bit if that account can be compromised

[15:01:25.0000] <Hixie>
now i'll always be forgetting the password

[15:05:19.0000] <smola>
Hixie: just change it to H1x13<year><month> every month, military-grade password policy compliant ;)

[15:39:37.0000] <Hixie>
yay, w3c is actively forking canvas: http://www.w3.org/mid/53515EA3.7090205⊙wo

[15:42:36.0000] <tantek>
ugh

[16:05:22.0000] <zewt>
i'm officially declaring document.cookie The Worst Web Platform API

[16:06:00.0000] <SamB>
zewt: it did look pretty bad ...

[16:06:15.0000] <SamB>
I mean is that even an API?

[16:06:57.0000] <zewt>
the fact that you can't even take the value of document.cookie, and assign it to document.cookie, and have it do the obvious thing...

[16:14:10.0000] <Hixie>
document.cookie is pretty terrible.

[16:14:18.0000] <Hixie>
the race condition is my favourite part of it.


2014-04-23
[19:46:46.0000] <MikeSmith>
Hixie: mobile safari was released in June 2007 I think

[19:46:48.0000] <MikeSmith>
https://github.com/whatwg/web-history/blob/master/README.md#2007-06-to-2007-12

[19:47:19.0000] <Hixie>
k

[21:51:08.0000] <TabAtkins>
annevk: When you get the chance, look over http://dev.w3.org/csswg/selectors/#data-model and see if you're happy with my attempt at defining selectors on top of DOM?

[21:51:15.0000] <TabAtkins>
The rest of the spec isn't matched up yet; I'll do that after.

[03:03:27.0000] <annevk>
Whoa, Hixie wrote a lenghty blogpost on www-archive

[03:08:08.0000] <annevk>
http://lists.w3.org/Archives/Public/www-archive/2014Apr/0034.html

[03:08:17.0000] <annevk>
Hixie++

[03:10:37.0000] <annevk>
Hixie: it's pretty annoying people keep misspelling WHATWG; might be a personal pet peeve

[03:29:29.0000] <jgraham>
Does that mean that Hixie is secretly Björn?

[03:29:48.0000] <jgraham>
Or are mailing list archives the blog platform of the future?

[03:30:09.0000] <jgraham>
Certainly they have a number of advantages over other popular choices

[04:38:16.0000] <annevk>
Standards discussion, support forums, or blogs?

[04:50:44.0000] <jgraham>
Imagine that, a medium flexible enough that it could be all three.

[04:55:01.0000] <annevk>
How do people make decisions between a boolean adjusting the behavior of a state and introducing an additional state?

[04:55:31.0000] <annevk>
E.g. it makes some sense to me to simply fold "force preflight flag" into the request's "mode" concept, but having "CORS-with-forced-preflight" as a mode

[04:55:39.0000] <annevk>
s/but/by/

[04:58:52.0000] <jgraham>
annevk: I guess it depends what's simpler

[04:59:35.0000] <jgraham>
Generally if you have two orthogonal concepts and all combinations of them are allowed it doesn't make sense to flatten them

[05:00:22.0000] <annevk>
jgraham: right, which is why it makes some sense to flatten them here, as mode being tainted cross-origin does not pair with a forced preflight flag

[05:11:19.0000] <hsivonen>
annevk: amazing how much stuff there is to remove under uconv/ thanks to the Encoding Standard

[05:11:41.0000] <hsivonen>
and thanks to just paying attention to stuff that FreeType obsoleted on X11

[05:11:51.0000] <annevk>
hsivonen: yeah, the file savings are great

[05:12:11.0000] <annevk>
hsivonen: I think it has helped that other implementers took a fresh look at encodings

[05:12:27.0000] <annevk>
hsivonen: Opera having their own implementation, Chrome being conservative with ICU

[05:12:37.0000] <hsivonen>
yeah

[05:13:16.0000] <hsivonen>
it's sad that TrueType fonts can have the font name encoded in any of the Mac legacy encodings

[05:20:09.0000] <hsivonen>
you know you are reading good code when "4.x behavior" refers to Netscape 4.x

[05:23:56.0000] <jgraham>
heh

[05:39:44.0000] <IZh>
Hixie: Hi.

[05:40:14.0000] <Ms2ger>
A little early, herpahs

[05:40:18.0000] <Ms2ger>
perhaps

[05:40:45.0000] <IZh>
I'll wait. :-)

[05:42:45.0000] <annevk>
IZh: http://www.nohello.com/

[05:43:41.0000] <IZh>
annevk: My "hello" was personalized. So nobody except Hixie shouldn't wait for continuation. ;-)

[05:44:28.0000] <annevk>
same difference

[06:07:10.0000] <Domenic_>
Great post Hixie.

[06:07:22.0000] <Domenic_>
annevk: +1 on the WHATWG mispelling; I feel the same way.

[06:25:34.0000] <Ms2ger>
WhatWG?

[06:29:36.0000] <MikeSmith>
so I'm trying to run test from http://w3c-test.org/tools/runner/index.html in IE11 in a VM and they're all failing with the error "Could not complete the operation due to error 80700019." If anybody else has run into this, some clue would be appreciated

[06:32:46.0000] <SteveF>
MikeSmith: FYI completed test run but couldn't download JSON have html output

[06:33:15.0000] <MikeSmith>
SteveF: oh

[06:33:22.0000] <MikeSmith>
SteveF: yeah please send me what you got

[06:33:38.0000] <SteveF>
you got skype open?

[06:35:06.0000] <MikeSmith>
ah no

[06:35:11.0000] <MikeSmith>
will open it now

[06:35:28.0000] <SteveF>
nevermind saved the file didn't save the results

[06:35:39.0000] <SteveF>
will run again

[06:35:50.0000] <SteveF>
and mail you

[06:35:54.0000] <MikeSmith>
ok thanks

[07:04:04.0000] <MikeSmith>
so the problem I'm running into with IE11 seems to be due to .postMessage failing

[07:04:42.0000] <MikeSmith>
wonder if there's some known issue and some way to work around it

[07:09:32.0000] <jgraham>
MikeSmith: http://stackoverflow.com/questions/21070553/postmessage-still-broken-on-ie11

[07:10:09.0000] <jgraham>
I think the way to fix it is probably to pick an IE developer at random and show up at their house and start mooning until a fix is forthcoming

[07:10:28.0000] <MikeSmith>
jgraham: thanks

[07:10:30.0000] <MikeSmith>
heh

[07:11:47.0000] <SteveF>
MikeSmith: hey once I followed your original instructions correctly(unchecking ref/manual), started test and nothing appears to happen aprt from button changing from start to stop, just sits there

[07:12:29.0000] <MikeSmith>
SteveF: odd

[07:12:48.0000] <MikeSmith>
SteveF: thanks for trying it, I guess I'll give up for now

[07:12:57.0000] <SteveF>
MikeSmith: looks like a window opens but diappears

[07:13:12.0000] <MikeSmith>
oh

[07:13:47.0000] <SteveF>
MikeSmith - worked it out had space before /

[07:14:06.0000] <MikeSmith>
SteveF: yeah, that'll do it

[07:14:11.0000] <SteveF>
working again now will mail you once done

[07:20:24.0000] <MikeSmith>
SteveF: thanks

[07:34:46.0000] <Hixie>
IZh: got your mail, will be responding today. sorry for the delay, been out of town.

[07:35:08.0000] <IZh>
Hixie: No problems. :-)

[07:50:54.0000] <annevk>
JakeA: what's the idea with shared workers and service workers again?

[07:51:12.0000] <annevk>
JakeA: a shared worker is controlled by a service worker matching its URL scope?

[07:51:32.0000] <annevk>
JakeA: whereas a dedicated worker is controlled by a service worker controlling its document?

[07:51:45.0000] <JakeA>
agreed

[07:52:07.0000] <annevk>
JakeA: should the register API be available from workers?

[07:52:45.0000] <annevk>
JakeA: also, that seems to mean we should distinguish worker from sharedworker in .context (the new purpose), no?

[07:53:47.0000] <JakeA>
annevk: I don't see why the register API can't be in shared workers, but don't think it's essential

[07:55:23.0000] <annevk>
JakeA: agreed I guess, what about the second question?

[07:55:34.0000] <JakeA>
annevk: good spot. I think it's another reason to bring back .isNavigation or similar

[07:55:47.0000] <JakeA>
annevk: Since "child" can be both Worker or SharedWorker

[07:55:57.0000] <annevk>
JakeA: we also have "worker"

[07:56:18.0000] <annevk>
JakeA: I thought "navigate" was child/popup/navigate

[07:56:34.0000] <annevk>
s/"navigate"/isNavigate/

[07:58:14.0000] <JakeA>
annevk: hmm, not sure "worker" should be there. I thought the intention was to stick with CSP terms, except for "navigate" when they don't have.

[07:58:40.0000] <JakeA>
annevk: CSP uses "child" for workers

[07:59:33.0000] <annevk>
JakeA: the idea was to have a superset

[07:59:51.0000] <annevk>
JakeA: that way we have flexibility to hang of different semantics later

[08:00:10.0000] <annevk>
JakeA: or where we already know we need different semantics we can do so right away

[08:00:23.0000] <JakeA>
annevk: you're right, isNavigate shouldn't be for workers…

[08:00:40.0000] <annevk>
JakeA: as you pointed out above, "child" is different from "worker" as "child" is navigate while "worker" is not (unless it's a shared worker, in which case I'm not quite sure what to call it)

[08:01:13.0000] <annevk>
JakeA: fetching a shared worker doesn't invoke HTML's navigate algorithm, but we do want equivalent service worker semantics

[08:01:47.0000] <JakeA>
annevk: Yep. In that case, yeah, we should have separate purposes

[08:02:02.0000] <annevk>
JakeA: contexts* ;-)

[08:02:15.0000] <annevk>
JakeA: I will add sharedworker to the list I'm about to add to Fetch

[08:02:18.0000] <JakeA>
hah. yeah. sorry, was staring at the .ts

[08:02:30.0000] <JakeA>
annevk: works for me

[08:02:45.0000] <annevk>
JakeA: slowly upgrading the vocabulary in Fetch for the eventual integration

[08:03:06.0000] <annevk>
JakeA: still trying to think about what the best way to deal with the request object vs the request concept is

[08:03:27.0000] <JakeA>
annevk: I'm writing a talk, which feels really unhelpful this close to FWD, but gotta be done for Saturday

[08:03:50.0000] <annevk>
JakeA: no worries, I don't care about FPWD

[08:04:03.0000] <annevk>
JakeA: I can stop bugging you this week

[08:04:21.0000] <annevk>
Maybe I can get jungkee to join this chat

[08:04:23.0000] <JakeA>
annevk: no no, I didn't mean that. Just trying to justify the lack of useful I've been

[08:04:33.0000] <annevk>
oh, no, you've been very useful

[08:14:26.0000] <Hixie>
it's amusing to watch the showModalDialog() thing

[08:14:50.0000] <Hixie>
because all these developers are acting as if the feature was a long-standing standard API

[08:15:18.0000] <Hixie>
it's probably the clearest indication of the lack of importance of specs for a long time...

[08:24:47.0000] <Domenic_>
I'm glad Blink seems to be holding the line on killing that one, unlike the Attr changes

[08:27:59.0000] <zcorpan>
i'd expect a more thought-through round of Attr changes later

[08:29:08.0000] <Domenic_>
I kind of thought that making small changes now and seeing the reaction would be OK---getting people used to the idea that Chrome will remove such rarely-used APIs---instead of trying to do everything at once.

[08:29:46.0000] <Hixie>
ojan posting about that recently

[08:29:53.0000] <Hixie>
posted

[08:30:14.0000] <Hixie>
talking about how bigger fewer changes was better than more smaller changes

[08:30:58.0000] <Hixie>
oops, edited the spec forgetting that i already had an edit in flight

[08:31:03.0000] <Hixie>
well, the next checkin is gonna suck for everyone

[08:31:07.0000] <Hixie>
sorry about that

[08:32:33.0000] <zcorpan>
one response i saw to the whateverAttributeNodeNS removal was to write a "polyfill" that used another fooAttributeNode method that was also removed from the dom spec but not yet from the impl

[08:32:59.0000] <Hixie>
heh

[08:33:13.0000] <Hixie>
i wasn't following the Node stuff

[08:33:17.0000] <Hixie>
what are we trying to remove, and why?

[08:33:40.0000] <zcorpan>
we're primarily trying to make Attr not inherit from Node

[08:33:50.0000] <zcorpan>
and secondarily removing methods related to Attr that "nobody" uses

[08:34:11.0000] <Hixie>
i thought the Node thing was done long ago

[08:34:16.0000] <Hixie>
is that failing?

[08:34:40.0000] <zcorpan>
i don't think it has been done in the impl yet

[08:34:46.0000] <zcorpan>
so it's not failing yet

[08:35:15.0000] <zcorpan>
removing one of the methods failed (but might be attempted again later)

[08:35:31.0000] <Hixie>
ah

[08:35:55.0000] <Hixie>
MikeSmith: i think the 408 thing might be a chrome dev bug

[08:36:16.0000] <Domenic_>
Hixie: I didn't really feel strongly or clearly enough to object on-list, but my gut feeling was that I wasn't sure Ojan's "We shouldn't remove APIs that have small value on the path towards a removal that has significant value" made sense.

[08:36:35.0000] <Domenic_>
Basically, gradually easing people in to a change seems potentially valuable?

[08:36:41.0000] <Hixie>
i don't know that i have an opinion either way

[08:36:55.0000] <Hixie>
just pointing out that there was a post on the subject :-)

[08:39:59.0000] <Domenic_>
Wow did not realize <textarea> had three values

[08:40:50.0000] <annevk>
Hixie: we made the Attr spec change long ago, but implementations are slow to clean up old code

[08:41:22.0000] <Domenic_>
When I Google "whatwg html textarea" google shows the page titles as having "WhatWG" O_o

[08:41:52.0000] <Domenic_>
Also when I click the little dropdown in the Google search it says "WHATWG: Programming Language Developer"

[08:43:32.0000] <Hixie>
well i guess that's accurate

[08:43:42.0000] <Hixie>
for some definition of "programming language"

[08:46:46.0000] <annevk>
Domenic_: yeah, seems WHATWG ended up as WhatWG in some Google systems

[08:48:57.0000] <annevk>
WHATWG's Google+ page is not to blame

[08:56:44.0000] <annevk>
JakeA: <object> can create a nested browsing context too; but can also load plugins

[08:57:45.0000] <Hixie>
and images

[08:57:52.0000] <Hixie>
<object> is a disaster of overloaded behaviour

[08:58:30.0000] <JakeA>
annevk: hm, yeah. Object is badly named then. Nested browsing context via object should have the same context as iframe. I guess "object" means object/embed with no better match

[08:58:32.0000] <JakeA>
ugh

[08:59:01.0000] <JakeA>
"The object-src directive restricts from where the protected resource can load plugins"

[08:59:29.0000] <JakeA>
Do we know if it's going to load a plugin at request time?

[08:59:43.0000] <JakeA>
Or is that dictated by the content-type?

[08:59:54.0000] <zcorpan>
embed can also be a browsing context

[09:00:28.0000] <JakeA>
"It is not required that the consumer of the element's data be a plugin in order for the object-src directive to be enforced" ughhghgh

[09:00:35.0000] <zcorpan>
JakeA: if typemustmatch and type are both present, you can know beforehand, iirc

[09:00:58.0000] <zcorpan>
JakeA: but otherwise the content-type wins

[09:01:07.0000] <JakeA>
"This is true even when the element data is semantically equivalent to content which would otherwise be restricted by one of the other directives, such as an object element with a text/html MIME type."

[09:01:46.0000] <JakeA>
annevk: so "object" means "comes from an <object> or <embed>", even if it doesn't load a plugin

[09:02:18.0000] <JakeA>
I don't think we should do something different.

[09:03:17.0000] <annevk>
JakeA: the problem is that it can be a browsing context

[09:03:24.0000] <JakeA>
If you're using object/embed you're opening the Ghostbuster's Containment Unit anyway

[09:03:29.0000] <annevk>
JakeA: and if it's a browsing context, it needs its own service worker

[09:03:46.0000] <JakeA>
Ah, good point

[09:03:51.0000] <annevk>
JakeA: however, you don't know whether it needs its own browsing context until you have examined the response

[09:04:12.0000] <Domenic_>
I kind of was looking forward to the world where <object> replaced <img>, <video>, <audio>, and all other such things. That was XHTML2 right?

[09:04:26.0000] <annevk>
Domenic_: yes, it had src on all elements

[09:04:41.0000] <annevk>
Domenic_: given what we know now that made little sense

[09:05:03.0000] <Domenic_>
src on everything too? I knew about href on everything...

[09:06:04.0000] <JakeA>
annevk: This is tough. Trying to think of something better than "SW responses to <object>/<embed> cannot create browsing contexts"

[09:07:21.0000] <JakeA>
/me goes to read the spec for <object>

[09:07:33.0000] <annevk>
Domenic_: yes

[09:08:02.0000] <Domenic_>
well that's just crazysauce

[09:08:11.0000] <jgraham>
"When a service worker is active the <object> and <embed> elements must have their UA conformance criteria replaced by those of the <div> element" :p

[09:08:40.0000] <annevk>
JakeA: it seems kind of sucky that enabling a service worker renders two elements partially obsolete

[09:08:46.0000] <zcorpan>
anyone know if anyone is implementing aria 1.1?

[09:09:01.0000] <annevk>
JakeA: or makes two elements wormholes

[09:10:44.0000] <SteveF>
zcorpan: which bit(s)

[09:12:53.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/249

[09:12:59.0000] <annevk>
JakeA: filed that issue for object/embed

[09:16:00.0000] <zcorpan>
SteveF: role="switch checkbox" being switch rather than checkbox

[09:16:38.0000] <annevk>
Hixie: https://twitter.com/rillian/status/455859796160151552

[09:18:09.0000] <Hixie>
hrm

[09:18:19.0000] <Hixie>
where are the absolute URLs coming from, that's the question...

[09:18:35.0000] <annevk>
ooh, might very well be the splitter script

[09:18:49.0000] <Hixie>
there's some in the spec source, i'll fix those first

[09:18:58.0000] <Hixie>
i just change http://blabla to //blabla, right?

[09:19:05.0000] <annevk>
yeah that ought to work

[09:19:33.0000] <Hixie>
the images on images.whatwg.org aren't gonna work this way

[09:19:37.0000] <Hixie>
since that doesn't have ssl

[09:19:42.0000] <annevk>
yeah :/

[09:19:54.0000] <annevk>
ssl + put everything on a subdomain = fail

[09:20:30.0000] <SteveF>
zcorpan: don't think switch is in the spec yet - as in can't find it, know its been raised, i think by james craig so coming from apple/webkit direction

[09:20:51.0000] <zcorpan>
SteveF: or any other value that's not in 1.0

[09:21:07.0000] <zcorpan>
context is http://lists.w3.org/Archives/Public/www-style/2013Jul/0099.html

[09:21:46.0000] <annevk>
dglazkov: I think I missed that status email

[09:22:19.0000] <annevk>
dglazkov: and it shipping without being settled is somewhat odd

[09:23:15.0000] <SteveF>
zcorpan: right, its still very early days for 1.1 and don't think anything has been agreed upon apart from describedat

[09:24:35.0000] <zcorpan>
SteveF: ok thanks

[09:25:06.0000] <SteveF>
zcorpan: editors draft http://www.w3.org/WAI/PF/aria-1.1/

[09:25:52.0000] <annevk>
JakeA: so if shared worker is not a navigate request, but is a request that gets its own service worker, do we have a good term for that?

[09:26:13.0000] <annevk>
JakeA: resource request seems like an obvious name for the other type of request

[09:27:25.0000] <JakeA>
annevk: remind me why shared worker doesn't count as "navigate". It has the same restrictions, it can't be an OpaqueResponse

[09:28:21.0000] <annevk>
JakeA: it doesn't use the "navigate" algorithm

[09:29:00.0000] <annevk>
JakeA: and I guess it can be an OpaqueResponse if it's a same-origin redirect

[09:29:13.0000] <Hixie>
ok, styles and scripts now load relatively

[09:29:28.0000] <JakeA>
annevk: that's true for navigations too right?

[09:29:37.0000] <annevk>
JakeA: confirm

[09:30:08.0000] <JakeA>
annevk: I think shared workers would go through the navigate part of the SW algorithms

[09:30:20.0000] <dglazkov>
good morning, Whatwg!

[09:30:22.0000] <JakeA>
which probably means this is a naming issue

[09:30:33.0000] <JakeA>
dglazkov: Morning!

[09:30:37.0000] <annevk>
JakeA: HTML has an algorithm called "navigate" which is only for navigating browsing contexts

[09:31:30.0000] <annevk>
Explaining this stack of turtles to someone new to web development is going to be insane

[09:31:33.0000] <JakeA>
annevk: yeah, whereas SW means "selects a registration"

[09:32:22.0000] <annevk>
JakeA: "registration request"

[09:32:24.0000] <annevk>
?

[09:33:57.0000] <JakeA>
annevk: sounds too much like "request for a registration". All the terms I can think of are balls. "top level", "initial", "browser contexting" urgh

[09:34:42.0000] <annevk>
JakeA: maybe controller?

[09:34:58.0000] <annevk>
JakeA: as the window/worker will be the controller for future requests?

[09:35:27.0000] <annevk>
JakeA: but maybe that's confusing with the document being controlled by the service worker

[09:35:53.0000] <JakeA>
annevk: yeah, we may even end up with a navigator.serviceWorker.controller for the controlling SW instance

[09:37:13.0000] <Domenic_>
can we call it navigationController

[09:37:22.0000] <JakeA>
haha

[09:37:32.0000] <annevk>
oh my

[09:37:55.0000] <annevk>
oooh

[09:38:00.0000] <annevk>
JakeA: how about client request?

[09:38:29.0000] <JakeA>
annevk: it doesn't really mean anything to me, but it's the least-bad so far

[09:38:54.0000] <annevk>
JakeA: well, client is where resource requests originate from

[09:39:20.0000] <annevk>
JakeA: and is the terminology we are introducing to mean either window or worker, right?

[09:39:41.0000] <JakeA>
annevk: that's true actually

[09:40:11.0000] <JakeA>
annevk: fetchEvent.isNewClient

[09:41:00.0000] <JakeA>
annevk: maybe just fetchEvent.newClient

[09:41:52.0000] <annevk>
JakeA: yeah, just trying to introduce terminology at this point

[09:43:52.0000] <annevk>
JakeA: http://fetch.spec.whatwg.org/#concept-request-client

[09:44:10.0000] <JakeA>
annevk: yes! That works

[09:44:37.0000] <annevk>
JakeA: just need to make sure we have enough contexts now

[10:06:00.0000] <Hixie>
MikeSmith: http://platform.html5.org/ - Typed Array is in JS, now, I think

[10:07:33.0000] <Hixie>
thanks to IZh, we have a PDF version of the spec again! :-D

[10:10:25.0000] <MikeSmith>
Hixie: thanks yeah I'll update http://platform.html5.org/ tomorrow

[10:11:07.0000] <MikeSmith>
Hixie: btw yeah I've noticed 408s recently in Chrome from sites other than bugzilla

[10:32:36.0000] <zcorpan>
Hixie: the pdf link points to http://www.whatwg.org/specs/web-apps/current-work/

[11:04:52.0000] <annevk>
I hope people do not actually print and put that on their Kindle or whatever

[11:14:57.0000] <annevk>
"Once the spec is finalized and released, the latest version will be clear and obvious - just as it is for other W3C specs."

[11:15:25.0000] <annevk>
/me snickers

[11:21:17.0000] <tantek>
lol

[11:21:32.0000] <tantek>
annevk - URL? I need more material to humor the AB ;)

[11:21:44.0000] <tantek>
s/humor/inform ;)

[11:21:58.0000] <annevk>
tantek: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25421

[11:22:28.0000] <tantek>
oh Travis

[11:23:07.0000] <tantek>
too bad he didn't make it to the HTMLWG f2f, was hoping for more interesting avoid spec divergence discussions

[11:24:33.0000] <annevk>
Gary said this actually, guy from Google

[12:18:33.0000] <Ms2ger>
OH "As useful & full of potential as hashtags."

[12:18:39.0000] <Ms2ger>
Not sure if sarcastic

[13:28:15.0000] <SamB>
hmm, I don't suppose anyone knows a good channel to talk about problems involving docbook-xsl -- my valgrind(1) manpage has, um, issues ...

[13:35:43.0000] <estellevw>
clarification request: my understanding was that "novalidate" can be on any form field or the form itself, and formnovalidate is only for type=submit and <button>.

[13:35:56.0000] <estellevw>
However, deeper spec reading seems to indicate that  novalidate is on the element's form owner, so is novalidate only valid on <form>?

[13:41:25.0000] <annevk>
estellevw: yes, novalidate is on form

[13:41:51.0000] <annevk>
estellevw: formnovalidate is on input/button

[13:42:27.0000] <estellevw>
thanks annevk

[13:42:27.0000] <annevk>
estellevw: it has a form prefix on input/button just like action et al have because otherwise we'd be breaking sites

[13:42:43.0000] <SamB>
I think if you want some control not to be validated, you don't use a control type with validation?

[13:44:29.0000] <annevk>
SamB: novalidate is more if you want to save intermediate input

[13:45:00.0000] <SamB>
/me should probably read more before talking ...

[13:48:55.0000] <estellevw>
so, if you want to suggest the user include a number from 5 to 10, but want to allow for any data for that field only, and want the rest of the form to be validated, how would you say "validate the entire form except foo where foo is <input type="number" name="foo" min="5" max="10">?

[13:50:07.0000] <estellevw>
is there a way to exclude just one form element from a form validation constraints,

[13:50:12.0000] <annevk>
estellevw: there's no such feature

[13:50:27.0000] <estellevw>
hmm mph. Now I want one

[13:50:56.0000] <estellevw>
didn't want it until I found out I couldn't have it ;)

[13:51:04.0000] <annevk>
hah

[13:51:27.0000] <annevk>
estellevw: whatwg⊙wo ; though don't ask for a specific feature, mention a scenario you find hard to accomplish

[13:52:41.0000] <Domenic_>
why can't this just be accomplished with <input type="number"> with no min or max? If they're not used for validation what are they used for...

[13:53:22.0000] <annevk>
https://mail.mozilla.org/pipermail/es-discuss/2013-April/030412.html bah

[13:54:55.0000] <estellevw>
Domenic_ I was just coming up with an example scenario: when you want to allow for any data entry, but you want to take advantage of the GUI

[13:55:36.0000] <Domenic_>
What GUI?

[13:55:43.0000] <estellevw>
the number spinner

[13:56:04.0000] <annevk>
estellevw: there's also <input inputmode=numeric>

[13:56:10.0000] <estellevw>
http://codepen.io/estelle/pen/fAKJa

[13:56:16.0000] <estellevw>
ah, that I did not know about

[13:56:53.0000] <Domenic_>
The number spinner is still there with no min or max....

[13:57:00.0000] <estellevw>
even though it was right there on http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary

[14:12:32.0000] <SamB>
hmm, #the-blink-element should maybe bring me to http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html#dfnReturnLink-0 ?

[14:20:39.0000] <SamB>
Hixie: have I ever told you that the "comment" box on the HTML spec is awfully small

[14:20:58.0000] <zcorpan>
SamB: #dfnReturnLink-0 is a script-generated id that won't work for anyone else loading that url

[14:21:04.0000] <SamB>
zcorpan: oh

[14:21:04.0000] <Hixie>
samb: if you have more to say, just type in a title and submit the bug

[14:21:13.0000] <Hixie>
SamB: then edit the bug to add more :-)

[14:21:20.0000] <SamB>
Hixie: yeah, I realize I can do that ...

[14:21:45.0000] <Hixie>
SamB: (in my experience, if i give people a multiline field, i get more rambling BS bugs)

[14:22:25.0000] <SamB>
might be nice to have a "prefill this section in bugzilla" button or something?

[14:22:47.0000] <Hixie>
if you click on the spec section, that is the section ID used

[14:22:53.0000] <Hixie>
just click anywhere in the spec

[14:24:01.0000] <SamB>
I know I can get the ID easily enough

[14:24:15.0000] <zcorpan>
SamB: do you prefer the behavior of http://resources.whatwg.org/file-bug.js ?

[14:24:18.0000] <SamB>
I guess you're hinting that I should implement my own damn button?

[14:24:24.0000] <SamB>
or steal his

[14:25:30.0000] <zcorpan>
Hixie's thing is good in that it doesn't require people to create a bugzilla account to give feedback

[14:25:39.0000] <SamB>
zcorpan: I know

[14:25:46.0000] <Hixie>
yeah that was my main priority

[14:26:01.0000] <Hixie>
(though if you have one, and are logged in to the spec annotation system, it does cc you)

[14:26:44.0000] <SamB>
I think I had sort of noticed it but not gotten around to thinking about where it got my email address

[14:28:04.0000] <zcorpan>
but i sort of agree with SamB that it'd be nice to be forwarded to bugzilla to fill in the details and tweak the title or whatever before actually filing the bug

[14:28:19.0000] <SamB>
zcorpan: so if I wanted to use this thing from a userscript, I'd need to insert the link and THEN a script element?

[14:29:16.0000] <SamB>
/me pictures a red button marked only "BZ"

[14:29:21.0000] <zcorpan>
SamB: it wasn't designed to be a userscript, so maybe it can be tweaked a bit

[14:29:30.0000] <SamB>
I know that

[14:30:29.0000] <zcorpan>
i mean maybe i can tweak it and upload it so that it works as a userscript out of the box :-)

[14:30:30.0000] <SamB>
if it were designed to be a userscript, it would ... need to insert elements on its own, and also have a way for the user to configure the bugzilla addresses

[14:30:53.0000] <Hixie>
zcorpan: why does it matter if it's before or after filing the bug_?

[14:32:02.0000] <zcorpan>
Hixie: it's less noisy for other people

[14:32:17.0000] <Hixie>
zcorpan: the only people who get cc'ed are me and mike

[14:32:41.0000] <Hixie>
mike is cc'ed on like half the universe so i doubt he's affected one way or the other by the few people who want to edit the bugs

[14:32:53.0000] <Hixie>
and i have filters that delete bugmail from open bugs assigned to me

[14:32:54.0000] <zcorpan>
Hixie: lots of people read the bugs

[14:33:09.0000] <Hixie>
sure but they're not affected by title changes

[14:33:22.0000] <Hixie>
or the initial comment being split in two

[14:33:37.0000] <zcorpan>
i mean read as in get emails

[14:33:50.0000] <zcorpan>
i get emails for new bugs and new comments and title changes

[14:34:10.0000] <SamB>
/me is just a bit OCD

[14:34:12.0000] <Hixie>
who do you watch? me?

[14:34:25.0000] <Hixie>
if you watch me you're in for a world of trouble if you don't have scripts to manage your bugmail :-)

[14:34:38.0000] <zcorpan>
Hixie: don't remember how i set it up, but maybe

[14:38:12.0000] <zcorpan>
i also think there's some negative force against filing a bug before having thought through the issue, and it's hard to think it through by just writing a title. it's easier to flesh it out and then realize that it was just a misunderstanding or whatever and not file the bug

[14:46:48.0000] <SamB>
zcorpan: yeah

[14:47:31.0000] <SamB>
and sometimes you'd rather not write the title first, too ...

[14:48:52.0000] <SamB>
on a tangent: it's really cool that bugzilla actually supports prefilling stuff

[14:51:58.0000] <Hixie>
zcorpan: figure out a way to make it work without people having to have a bugzilla account, and i'll see what i can do :-)

[14:52:31.0000] <Hixie>
honestly though, the overhead of filing a bug that you then immediately close is nearly zero, to me

[14:53:01.0000] <SamB>
what, just wasting bug numbers???

[14:53:18.0000] <SamB>
well, I guess if it wasn't the *plan* to close them it's different ...

[14:59:53.0000] <zcorpan>
Hixie: replace the hide button with a resize thingie so when you make the comment box bigger you get title+textarea :-)

[15:09:25.0000] <Hixie>
zcorpan: interesting idea

[15:11:29.0000] <MikeSmith>
I support zcorpan's idea, especially since zcorpan's one of the main actual productive users of that form

[15:11:59.0000] <zcorpan>
Hixie: if you're going to tweak things here, i'd also like to have the link to the filed URL stay somewhere because i want to copy it or follow it later, and it's annoying when it's gone and i have to search in bugzilla or check my email to find it

[15:12:44.0000] <Hixie>
zcorpan: k

[16:20:06.0000] <benschwarz>
Hixie: yt?


2014-04-24
[17:11:18.0000] <Hixie>
benschwarz: here

[17:11:23.0000] <Hixie>
benschwarz: commented on the post

[18:10:25.0000] <Hixie>
/me makes some slight changes to the top of the spec

[18:10:54.0000] <jtcranmer>
/me stares cross-eyed at the streams spec

[20:15:56.0000] <SamB>
Hixie: ... interesting choice of mode for the html spec ...

[20:28:16.0000] <MikeSmith>
wow that's a lot of green boxes

[20:28:55.0000] <MikeSmith>
I like how you've gone with the Japanese spelling of "developers" there in the URL

[20:46:18.0000] <SamB>
fatal: repository 'https://bitbucket.org/ms2ger/anolis/' not found

[20:46:20.0000] <SamB>
:-(

[21:12:30.0000] <Hixie>
SamB: yeah... i think it needs something else... but what we had before was worse, so...

[21:12:33.0000] <Hixie>
SamB: any ideas?

[21:13:08.0000] <SamB>
Hixie: not really

[21:13:14.0000] <Hixie>
:-(

[21:13:16.0000] <Hixie>
same here

[21:13:22.0000] <Hixie>
MikeSmith: oops :-) fixed

[22:05:24.0000] <SamB>
   <dt>An end tag whose tag name is "sarcasm"</dt>

[22:05:26.0000] <SamB>
;-)

[01:01:11.0000] <annevk>
Can someone take a look at https://github.com/w3c/web-platform-tests/issues/923 maybe?

[01:06:54.0000] <jgraham>
annevk: Why?

[01:07:23.0000] <annevk>
jgraham: seems to be blocking someone attempting to implement minlength

[01:08:27.0000] <jgraham>
OK. Not sure I know the editing stuff well enough to know theright fix

[01:08:42.0000] <annevk>
jgraham: https://bugzilla.mozilla.org/show_bug.cgi?id=932755

[01:09:36.0000] <birtles>
annevk, jgraham: I'm trying to set up a folder for web-animations on web-platform-tests. Do I have to do anything to be able to review pull requests to that folder?

[01:09:44.0000] <birtles>
I sent a pull request last week (https://critic.hoppipolla.co.uk/r/1302) although I should probably tweak those tests a bit

[01:10:29.0000] <annevk>
Hey birtles, I don't really know, I think jgraham and/or darobin can set you up

[01:10:38.0000] <birtles>
annevk: cheers

[01:11:01.0000] <jgraham>
birtles: You don't need anything to be able to review PRs, although obviously reviewing your own PR isn't normal :)

[01:11:23.0000] <annevk>
birtles: out of curiosity, how did you guys settle the second vs microsecond debate?

[01:11:30.0000] <birtles>
jgraham: ok, so maybe I can just ask one of the other editors/implementors to review it

[01:11:34.0000] <birtles>
annevk: yeah, milliseconds it is

[01:11:51.0000] <birtles>
it's fixed in the spec, being patched in blink and polyfill

[01:12:23.0000] <birtles>
annevk: oh *how*, basically we just did what the tag told us

[01:12:54.0000] <annevk>
birtles: was more interested in the former :-)

[01:13:42.0000] <birtles>
annevk: former = seconds? what the resolution was?

[01:15:05.0000] <annevk>
birtles: I was interested in what you settled on, sorry for the confusion

[01:15:13.0000] <birtles>
k

[01:20:23.0000] <jgraham>
birtles: Have some review

[01:21:01.0000] <birtles>
jgraham: thanks!

[03:08:27.0000] <jgraham>
So you don't actually need user interaction to set the dirty flag on form controls, right?

[03:08:40.0000] <jgraham>
In which case all the execCommand stuff is unneeded

[03:21:37.0000] <zcorpan>
setting .value makes it dirty

[03:22:22.0000] <zcorpan>
but maybe not for checkboxes?

[03:23:36.0000] <jgraham>
Pretty sure what's already there doesn't work for checkboxes either

[03:26:53.0000] <jgraham>
In unrelated news, it looks like the unload-a-document tests are now the most unstable web-platform-tests

[03:27:00.0000] <jgraham>
In gecko at least

[03:27:06.0000] <jgraham>
(although not *only*)

[03:27:33.0000] <jgraham>
It looks a lot like the session storage is sometimes dirty

[03:27:48.0000] <jgraham>
Could replace that with a server-side script I guess

[03:28:22.0000] <jgraham>
Or maybe just use a unique token for each run

[03:28:33.0000] <jgraham>
Although I am not really sure this is the problem

[03:52:30.0000] <zcorpan>
i thought navigation was already interoperable and doesn't need tests

[03:53:58.0000] <jgraham>
Hmm?

[03:55:21.0000] <jgraham>
In yet more news

[03:55:28.0000] <jgraham>
It is very frustrating

[03:55:43.0000] <jgraham>
There are quite a few tests depending on w3c-test.org

[03:55:48.0000] <jgraham>
Which need to be fixed

[03:56:30.0000] <jgraham>
But the rabbit hole goes deeper as some of the tests turn out to believe they are running on port 80

[03:56:42.0000] <jgraham>
And fixing this is taking too much time

[04:04:19.0000] <jgraham>
These dnd tests, for example, are soul-crushing

[04:04:27.0000] <jgraham>
wilhelm: I blame you :p

[04:38:36.0000] <zcorpan>
jgraham: http://w3cmemes.tumblr.com/image/32354094056

[04:43:25.0000] <jgraham>
zcorpan: Sure, but why did you mention it now? unload-a-document?

[04:43:33.0000] <jgraham>
Those are websockets tests

[04:43:43.0000] <jgraham>
Although depend on navigation

[04:43:50.0000] <zcorpan>
jgraham: yeah

[04:43:55.0000] <jgraham>
Ah, OK

[04:44:12.0000] <hsivonen>
annevk: what's the twitter handle for Encoding Standard? I thought @encoding, but it looks like it's not it.

[04:44:42.0000] <zcorpan>
hsivonen: http://encoding.spec.whatwg.org says it's https://twitter.com/encodings

[04:45:05.0000] <hsivonen>
zcorpan: thanks

[04:52:24.0000] <wilhelm>
jgraham: I blame Tarquin!

[05:13:58.0000] <jgraham>
TabAtkins: Looks like https://critic.hoppipolla.co.uk/r/1364 is one for you once zcorpan has finished it?

[05:20:11.0000] <zcorpan>
now i wonder why http://w3c-test.org/submissions/927/selectors/attribute-selectors/attribute-case/syntax.html doesn't show up

[05:20:33.0000] <zcorpan>
MikeSmith: ^

[05:32:37.0000] <MikeSmith>
zcorpan: dunno but maybe the script is wedged

[05:33:42.0000] <MikeSmith>
maybe you don't have the right perms

[05:33:52.0000] <MikeSmith>
it says you're just Collaborator

[05:34:47.0000] <MikeSmith>
hmm something borked

[05:55:13.0000] <MikeSmith>
zcorpan: github logs show the hook ran successfully

[05:55:28.0000] <zcorpan>
MikeSmith: weird

[05:58:29.0000] <MikeSmith>
grepping the log file is made more difficult by the fact it's full of binary data

[06:01:01.0000] <MikeSmith>
hmm log seems to indicate it's not gettin the signature it expects

[06:02:05.0000] <zcorpan>
/me *poof*

[06:19:54.0000] <annevk>
Haha, my landlord is such a troll. Finally replies after months, asks for a swift reply

[07:07:12.0000] <zewt>
browsers need an option to force session cookies to be regular persistent cookies

[07:07:57.0000] <zewt>
the concept doesn't even make sense now, i keep browser windows open for a month at a time, so it just means i have to log into a bunch of random sites for no good reason after i restart the browser

[07:08:19.0000] <zewt>
that or the browser could persist the session cookies when it restores tabs, i guess

[07:45:45.0000] <annevk>
JakeA: it seems we forgot about form-action

[07:46:03.0000] <JakeA>
annevk: As a context?

[07:46:07.0000] <annevk>
JakeA: yes

[07:46:18.0000] <JakeA>
annevk: Ahh yes, we need that

[07:46:23.0000] <JakeA>
annevk: Can you make a ticket for that?

[07:46:33.0000] <annevk>
JakeA: I guess I'll add it to Fetch and then whenever you sync with Fetch...

[07:46:40.0000] <JakeA>
annevk: +1

[07:46:56.0000] <annevk>
/me is reviewing CSP to make sure CSP integrates with Fetch

[07:47:19.0000] <annevk>
Hopefully that makes it easier down the line to evaluate how SW fits into all this

[07:51:01.0000] <annevk>
frame-ancestors seems somewhat tricky too

[08:25:22.0000] <dglazkov>
good morning, Whatwg!

[08:33:43.0000] <annevk>
JakeA: emailed some questions related to this to public-webappsec

[08:34:03.0000] <annevk>
JakeA: http://fetch.spec.whatwg.org/#concept-fetch has a placeholder hook for CSP now

[08:34:11.0000] <annevk>
JakeA: next I guess is placeholder hooks for SW

[08:34:51.0000] <JakeA>
annevk: This is really cool. I can't imagine the amount of crawling through implementations and specs went into this

[08:52:55.0000] <smaug____>
annevk: xhr.responseURL isn't in anyway bound to http, right?

[08:53:01.0000] <smaug____>
/me is reviewing something

[08:53:05.0000] <annevk>
smaug____: no

[08:55:26.0000] <annevk>
smaug____: it's the "final request url" basically

[08:56:05.0000] <annevk>
smaug____: adjusted for redirects and HSTS

[08:56:48.0000] <smaug____>
annevk: with data: it would be just the url

[08:56:50.0000] <smaug____>
and so on

[08:56:55.0000] <annevk>
yup

[08:57:12.0000] <smaug____>
for some reason the patch limited it to http(s)

[08:58:47.0000] <annevk>
it'd be interesting to hear why he/she did that

[08:59:55.0000] <smaug____>
I guess because there happened to be nice helper method to get httpchannel :)

[09:00:39.0000] <smaug____>
(this might be his second patch or so)

[09:00:49.0000] <annevk>
Hopefully one day Fetch is actually a module in browsers

[09:01:11.0000] <annevk>
Servo could do it right

[09:01:21.0000] <annevk>
And then the other browsers get jealous

[09:01:29.0000] <annevk>
And then ... and then profit

[09:04:53.0000] <jgraham>
annevk: Well that doesn't obviously seem to be the way that servo is going

[09:05:36.0000] <jgraham>
It seems to be relying on some third-party lib for the network bits, and I guess that won't implement Fetch directly

[09:06:11.0000] <annevk>
jgraham: I think at this point they are probably not implementing much of data/blob/http handling correctly, let alone things like CSP and such

[09:06:46.0000] <jgraham>
annevk: They aren't, but I don't know of plans to implement their own http

[09:08:13.0000] <jgraham>
Basically I think no one is really working on the network layer in servo, so expecting it to come out matching specs that people outside the web community might be unaware of seems optimistic

[09:12:23.0000] <annevk>
Sooner or later they'll run into questions as to how bits of XMLHttpRequest need to work and learn

[09:12:40.0000] <annevk>
Not too worried about that. The reason Servo can do this is because they don't have extension complexity

[09:21:16.0000] <jgraham>
Well XHR is supposed to be done this summer by a GSoC student, so we'll see how that pans out

[09:27:15.0000] <daurnimator>
sigh; so apparently localStorage in Safari private browsing doesn't work

[10:34:55.0000] <KevinMarks_>
has anyone done a survey of what ids look like on the web in the wild? Like Hixie did for classes?

[10:35:46.0000] <KevinMarks_>
come to that, what fragment links look like on the web too? I bet the dominant one is just #

[10:37:29.0000] <paul_irish>
KevinMarks_: for back-to-top ?

[10:38:01.0000] <KevinMarks_>
no, all the pretend links put in to be overridden by js

[10:38:24.0000] <paul_irish>
Ah yes. :) For sure.

[10:38:52.0000] <jory>
I'd be really surprised is something other than '#' turned out to be the choice of most people.

[10:39:15.0000] <KevinMarks_>
how do you mean, jory?

[10:40:10.0000] <jory>
In almost every project I've worked on where we've wanted to use anchors but have their behaviour completely dictated by the JS, we've used '#' as the href.

[10:40:22.0000] <KevinMarks_>
I'm probably being unclear - I meant grepping a decent chunk of the web for links with fragments in, and seeing what the fragments look like

[10:41:01.0000] <jory>
Ooo, sounds like an interesting study. I'd love to see the results of something like that.

[10:41:39.0000] <KevinMarks_>
that, combined with a survey of what actual IDs look like

[10:43:02.0000] <KevinMarks_>
(I'm getting at the fragmention by default idea here) http://www.kevinmarks.com/poemfragmentions.html##cannot+contain

[11:32:24.0000] <jcgregorio>
KevinMarks: Why the space character as the trigger, aren't there a bunch of characters that are valid after the hash that aren't valid in an ID?

[11:33:00.0000] <KevinMarks_>
I thought so, but nope. IDs can have anything in except a space

[11:33:35.0000] <KevinMarks_>
http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#the-id-attribute

[11:33:45.0000] <KevinMarks_>
see the note in green

[11:34:35.0000] <KevinMarks_>
you could put %20 in an id I suppose but that's still OK

[11:35:24.0000] <KevinMarks_>
it's actually the other way round - fewre valid chars in a fragment, but you can escape them reliably

[11:36:10.0000] <KevinMarks_>
basically, I made up the syntax before reading the specs, then realised that I could make it even simpler

[11:37:10.0000] <KevinMarks_>
## makes a URL invalid per http://tools.ietf.org/html/rfc3986#appendix-A

[11:41:14.0000] <jcgregorio>
wow, that's a surprising, and a pain, space is your only escape hatch

[11:42:35.0000] <KevinMarks_>
actually, I think it's good and simplifying.

[11:43:21.0000] <jcgregorio>
well, if you gobble up any space for fragmentations then there's no more escape hatches

[11:45:12.0000] <jcgregorio>
for example, {} aren't valid in a URI, they were reserved for future expansion

[11:45:19.0000] <jcgregorio>
and we used them in URI Templates

[11:45:35.0000] <KevinMarks_>
in fact, you don't even need a space, as you can tell if it's an ID quickly...

[11:45:57.0000] <jcgregorio>
and in URI Templates = ! @ | and , are reserved for future extensions in URI Templates

[11:47:00.0000] <jcgregorio>
right, but what if after fragmentations ships someone comes up with another cool idea

[11:47:17.0000] <jcgregorio>
how would they differentiate between a fragmentation and their cool new thing

[11:48:30.0000] <jcgregorio>
I would suggest having fragmentations start with +! and leave other fragments that start with +<some other char> as a future extension point

[11:52:55.0000] <KevinMarks_>
I think #! fragments are already used for various things

[11:53:15.0000] <jcgregorio>
ok +%, you get the idea :-)

[11:53:27.0000] <KevinMarks_>
and searching for ! or % is a bit of a weird case

[11:53:40.0000] <jcgregorio>
+:

[11:54:44.0000] <jcgregorio>
true, but you could still do it, +!!, if you use ! as your character

[12:10:07.0000] <JonathanNeal>
KevinMarks_: messed with http://sandbox.thewikies.com/fragmentions/example.html since the changes? jcgregorio: i like what you’re saying about closing all of the escape hatches.

[12:10:36.0000] <KevinMarks_>
I don't think we are though

[12:11:12.0000] <KevinMarks_>
currently ID eats all possible fragments iff it exists. Fragmention catches some more cases

[12:11:27.0000] <KevinMarks_>
still room for other things to catch still more

[12:11:48.0000] <JonathanNeal>
Hmm, I agree.

[12:15:00.0000] <KevinMarks_>
we'll only catch ! or * or whatever in a fragment if both someone makes such a fragment AND the body contains that character sequence

[12:15:01.0000] <JonathanNeal>
I just had not thought of it that way.

[12:30:14.0000] <jcgregorio>
KevinMarks: what's a case that wouldn't be an id nor a fragmentation?

[12:30:51.0000] <jcgregorio>
I think I see what you are saying, in that something being an id or fragmentation is context dependent, depending on what's on the page

[12:30:58.0000] <jcgregorio>
but that's no way to write a spec ;-)

[12:31:00.0000] <KevinMarks_>
any sequence that isn't in the document

[12:31:23.0000] <KevinMarks_>
fragmention BTW (i think you're being autocorrected)

[12:31:49.0000] <Domenic_>
Woah a wild Hixie appears on Twitter!

[12:32:22.0000] <Hixie>
hm?

[12:32:45.0000] <Hixie>
i've posted 6 times this month

[12:32:55.0000] <Hixie>
that's more times than i've posted publicly on g+ in the same time frame

[12:33:10.0000] <Hixie>
7 times on twitter in february

[12:34:20.0000] <Domenic_>
This was the first one that was @-ed to someone I follow

[12:34:23.0000] <Domenic_>
so the first one I saw

[12:35:31.0000] <Hixie>
aah

[12:35:46.0000] <Hixie>
yeah i basically only use it to reply to people

[12:35:55.0000] <Hixie>
/me thinks the 140 character limit is absurd

[12:36:20.0000] <jcgregorio>
KevinMarks: autocorrected by my own fingers :-)

[12:37:12.0000] <Hixie>
ok. compare the top of http://www.whatwg.org/specs/web-apps/current-work/multipage/ to the top of http://www.whatwg.org/specs/web-apps/current-work/

[12:37:17.0000] <Hixie>
poll: which do you prefer?

[12:37:36.0000] <Hixie>
bonus question: do you have any better ideas for making this more approachable?

[12:38:05.0000] <Domenic_>
I prefer the multipage version because it's loaded whereas the singlepage version is still blank ;)

[12:38:24.0000] <Hixie>
yeah well i mean aside from that :-P

[12:39:20.0000] <Domenic_>
Hmm this is nicer. Hard to say.

[12:39:32.0000] <jcgregorio>
Hixie: maybe color code for function?

[12:39:46.0000] <Hixie>
jcgregorio: good idea. which colours for which buttons?

[12:40:12.0000] <jcgregorio>
irc, twitter and mailing list in blue

[12:41:02.0000] <jcgregorio>
file a bug, open bugs, and email the editor in red

[12:41:08.0000] <KevinMarks_>
jcgregorio: there's already a multistage reolution algorithm here: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#the-indicated-part-of-the-document

[12:42:57.0000] <KevinMarks_>
so before #8, we insert fragmention processing to find the target be searching the text for the decoded fragid and picking the smallest containing element

[12:43:27.0000] <KevinMarks_>
so you can't currently use "top" as a fragmention

[12:43:46.0000] <KevinMarks_>
and any other future ones can insert themselves there

[12:44:41.0000] <Hixie>
jcgregorio: trying that, thanks...

[12:45:31.0000] <jcgregorio>
Hixie: and all the versions multipage/onepage/pdf/dev as another color

[12:45:51.0000] <jcgregorio>
sorry, I run out of ideas outside of the three primary :-)

[12:45:56.0000] <Hixie>
:-)

[12:46:27.0000] <Hixie>
i tried using https://kuler.adobe.com/create/color-wheel to pick the colours, but they seem kinda ugly

[12:46:41.0000] <KevinMarks_>
funny how all chat-related things are blue

[12:46:51.0000] <Hixie>
(using "whatwg green", 3C790A, as the base)

[12:47:43.0000] <Hixie>
hm, actually, it does kinda work

[12:47:46.0000] <TabAtkins>
KevinMarks_: Dont' pay any attention to 3986.  Read the URL spec isntead.

[12:47:55.0000] <Hixie>
jcgregorio: http://www.whatwg.org/specs/web-apps/current-work/

[12:48:16.0000] <TabAtkins>
KevinMarks_: http://url.spec.whatwg.org/

[12:48:21.0000] <KevinMarks_>
fair, TabAtkins, but the same is true there

[12:48:30.0000] <TabAtkins>
All right, cool.  Didn'

[12:48:39.0000] <TabAtkins>
Just didn't want you looking at the wrong thing. ^^;

[12:49:22.0000] <KevinMarks_>
a fragment can have http://url.spec.whatwg.org/#url-code-points which don't include #

[12:49:29.0000] <KevinMarks_>
so my ## is still invalid

[12:49:30.0000] <KevinMarks_>
derp

[12:49:40.0000] <KevinMarks_>
even though browsers seem to parse ti happily

[12:51:08.0000] <jcgregorio>
Hixie: http://tinyurl.com/mh3za2q

[12:51:16.0000] <jcgregorio>
my attempt at a pallette

[12:51:31.0000] <Hixie>
jcgregorio: yeah, i was just playing with it again and came to more or less the same one

[12:51:38.0000] <jcgregorio>
:-)

[12:51:59.0000] <Hixie>
ok, orange, i guess, for the remaining ones. and green for the versions.

[12:53:43.0000] <Hixie>
/me regens

[12:57:54.0000] <Hixie>
jcgregorio: http://www.whatwg.org/specs/web-apps/current-work/ look ok?

[12:57:57.0000] <KevinMarks_>
looks a bit like http://www.wired.com/images_blogs/threatlevel/2009/09/dhs-threat1.jpg

[12:58:09.0000] <Hixie>
i'd love to find an even better way of doign this

[12:58:13.0000] <Hixie>
i'm not really happy with it

[12:58:19.0000] <Hixie>
it's better than the <dl>, but...

[12:59:11.0000] <jcgregorio>
yeah, I like the idea, but the colors seem a little strong

[13:03:07.0000] <Hixie>
/me tries halving the saturation of each one

[13:06:34.0000] <Hixie>
no, that doesn't help. maybe halving the lightness...

[13:09:46.0000] <Domenic_>
Hixie: http://forums.whatwg is not a complete URL

[13:09:58.0000] <Hixie>
oops

[13:09:58.0000] <Hixie>
fixed

[13:09:59.0000] <Hixie>
thanks

[13:10:09.0000] <KevinMarks_>
no whatwg tld yet?

[13:10:23.0000] <Hixie>
jcgregorio: what do you think of the current colours?

[13:10:24.0000] <KevinMarks_>
we're behind .guitars

[13:10:30.0000] <Hixie>
KevinMarks_: not on this budget ;-)

[13:10:43.0000] <Domenic_>
current colors seem pretty reasonable

[13:11:07.0000] <Hixie>
try reloading to make sure you're seeing the current ones

[13:11:13.0000] <Hixie>
i changed them 3 times in the last 3 minutes

[13:11:14.0000] <KevinMarks_>
pretty good; the orange is a bit turdy

[13:11:14.0000] <Hixie>
:-)

[13:11:43.0000] <Hixie>
KevinMarks_: i don't want to know what you're eating :-P

[13:11:50.0000] <Domenic_>
"open bugs" sounds like a verb phrase not a noun phrase

[13:11:54.0000] <jcgregorio>
Hixie: yeah, that's a lot better

[13:12:06.0000] <Domenic_>
oh hmm these darker ones are interesting

[13:12:09.0000] <Hixie>
Domenic_: good point

[13:12:23.0000] <Hixie>
changed to "View Open Bugs"

[13:12:39.0000] <Hixie>
ok. i'm gonna go with this.

[13:12:50.0000] <Hixie>
if anyone has any ideas for a more radical change, please do let me know.

[13:12:59.0000] <Domenic_>
fun times

[13:13:15.0000] <Domenic_>
do you feel there's value in separating the HTML FAQ from the WHATWG FAQ?

[13:13:26.0000] <Hixie>
there's an HTML FAQ?

[13:13:47.0000] <Hixie>
oh you mean the HTML subsectiosn of the WHATWG FAQ?

[13:13:50.0000] <Domenic_>
Well whatwg.org/faq currently serves as both

[13:14:01.0000] <Domenic_>
e.g. the HTML spec links to the WHATWG FAQ as "faq"

[13:14:01.0000] <SamB>
wait, you mean there's a non-HTML section?

[13:14:11.0000] <Hixie>
nah, i think it's fine. if people have questions about other specs I'm happy for those questions to be in that list too.

[13:14:20.0000] <Hixie>
we already have too many places to point people to

[13:14:28.0000] <Hixie>
witness this very long list of buttons

[13:14:31.0000] <Hixie>
or the whatwg.org home page

[13:14:34.0000] <Domenic_>
yeah that's fair.

[13:14:34.0000] <Hixie>
let's not add more :-)

[13:15:26.0000] <KevinMarks_>
I do have a veggie lasagne that is close to that colour

[13:15:42.0000] <Domenic_>
I guess things just get a bit confused e.g. "which parts of the spec are stable" and onward inside "The WHATWG Process" are somewhat HTML-specific, whereas the rest of that section is about the WHATWG and Living Standards generally.

[13:15:54.0000] <Hixie>
yeah that stuff should be cleaned up

[13:15:59.0000] <Hixie>
feel free to hack at it if you want

[13:16:04.0000] <Hixie>
i'll get to it eventually otherwise

[13:16:07.0000] <Domenic_>
When I was reading it for the first time I wasn't clear how much applied to general WHATWG working model vs. HTML only

[13:16:10.0000] <Domenic_>
I might do that yeah

[13:16:30.0000] <Domenic_>
do i even have an account? hmm, I've never wanted to add a <meta> tag, so unclear.

[13:17:01.0000] <Hixie>
e-mail? i'll add you one

[13:17:20.0000] <Domenic_>
domenic⊙dc

[13:17:43.0000] <Hixie>
multipage spec is updated, in case anyone lurking was too scared to open the single-page spec but wants to know what we were chatting about :-)

[13:18:38.0000] <Hixie>
done

[13:18:49.0000] <SamB>
/me wonders about the system requirements of the single-page spec

[13:18:55.0000] <Hixie>
ok i gotta run before the cafes close. back in a bit.

[13:19:07.0000] <jcgregorio>
Hixie: the only problem is the illusory dots that appear at the intersections

[13:19:34.0000] <Hixie>
wow i didn't see those until you pointed them out and now i feel almost ill :-P

[13:19:40.0000] <Hixie>
yikes

[13:19:56.0000] <Hixie>
bbl

[13:20:16.0000] <jcgregorio>
yeah, I didn't see it until I was a little further from the monitor

[13:20:53.0000] <mathiasbynens>
Hixie: the link to http://validators.whatwg.org/ is broken

[13:21:14.0000] <SamB>
Hixie: the METAFONTbook has some tips about that ;-P

[13:21:24.0000] <mathiasbynens>
Hixie: as in, the link works, but the URL doesn’t resolve for me

[13:21:28.0000] <SamB>
or, well, at least an example

[13:37:58.0000] <JonathanNeal>
So, on the pros/cons of # versus ## for fragmentions. Pros for # is that its characters are valid, it falls back to ID. Pros for ## is that it is unique, and does not conflict with ID. The con for # is the reserved word "top" and other taken IDs. The con for ## is its invalidity. Thoughts? Disagreements?

[13:41:26.0000] <jcgregorio>
actually, "con for # is the reserved work "top" and other taken IDs" isn't true because they don't have spaces, right?

[13:42:35.0000] <JonathanNeal>
jcgregorio: if we made at least one space character a requirement for fragmentions, perhaps.

[13:54:02.0000] <SamB>
JonathanNeal: what invalidity?

[13:54:21.0000] <SamB>
I mean, what actually cares?

[13:54:34.0000] <JonathanNeal>
SamB: page.html##term is invalid because of the ##. The spec and validators care. Browsers do not care.

[13:55:28.0000] <SamB>
which validotors? regular ones, or just stuff like link checkers?

[13:55:35.0000] <SamB>
er, *validators

[13:56:16.0000] <SamB>
JonathanNeal: also is there a thread or a draft this discussion is referring to?

[13:56:42.0000] <JonathanNeal>
There are at least two, SamB, one is https://github.com/chapmanu/fragmentions

[13:57:25.0000] <Hixie>
mathiasbynens: thanks, fixed

[13:57:27.0000] <SamB>
and, er, has anyone mentioned a more powerful mechanism for use on html?

[13:57:41.0000] <Hixie>
SamB: any idea what the tips are? :-)

[14:00:16.0000] <SamB>
hmm, what intersections are we talking about here?

[14:00:23.0000] <zewt>
JonathanNeal: pages might be using ##foo in scripts; don't know how to find out

[14:00:49.0000] <SamB>
zewt: clearly program the browser to spy on the users

[14:00:53.0000] <JonathanNeal>
SamB: the other is http://indiewebcamp.com/fragmention

[14:00:55.0000] <zewt>
duh

[14:01:05.0000] <zewt>
when I use custom hashes for script navigation i normally run the hash part through encodeURIComponent, which avoids that issue

[14:01:54.0000] <zewt>
JonathanNeal: if there is some unused part of the URL hash space to be used, i'd strongly question whether it's worth using it up on this feature...

[14:02:30.0000] <Hixie>
SamB: those on the html spec's new header

[14:02:53.0000] <SamB>
ah

[14:03:04.0000] <SamB>
for some reason I was looking at the frontpage

[14:03:08.0000] <JonathanNeal>
zewt: are you referring to ## versus #? If so, that is an argument in favor of ##.

[14:03:19.0000] <SamB>
oh, I think these are different dots

[14:03:23.0000] <SamB>
I don't know how to deal with them

[14:03:27.0000] <zewt>
i've used #? myself

[14:04:01.0000] <zewt>
with URLs that look like http://foo.com/server/path?server=data#client/path?client=data (where client/path may be empty)

[14:04:33.0000] <zewt>
so I get analogous paths and key/values, for both the server (path and query) and client (encoded into the hash)

[14:05:12.0000] <JonathanNeal>
zewt: in those cases, what is the probability of matching that to text on the screen?

[14:05:24.0000] <zewt>
no idea

[14:05:26.0000] <JonathanNeal>
But again, that is a chief argument in favor of ##.

[14:05:45.0000] <SamB>
zewt: hmm, I guess that makes sense if you've things that you don't want to interfere with caching because the server doesn't use them anyway ...

[14:06:08.0000] <SamB>
anyway this seems like a dumb fad

[14:06:17.0000] <SamB>
I want my xpath fragments!

[14:06:21.0000] <zewt>
well, my concern (wouldn't call it an argument at this point) is whether the feature is useful enough to use up some rare still-unused way of encoding something into the hash (if it is one)

[14:06:31.0000] <SamB>
maybe not so dumb for text/plain

[14:07:06.0000] <JonathanNeal>
Or for blogs, or long articles, or anything with text.

[14:07:47.0000] <SamB>
anyway, it seems like it should leave room for OTHER possible uses

[14:08:11.0000] <JonathanNeal>
Do you believe ## does this?

[14:08:38.0000] <SamB>
I mean by having some kind of a name before the, uh, query ...

[14:09:58.0000] <JonathanNeal>
That is what the second hash provides, no?

[14:12:16.0000] <SamB>
no!

[14:12:27.0000] <zewt>
SamB: do you mean making it something like http://foo.com##word=foo, so "##" can be used for other things and not be used up completely

[14:12:35.0000] <SamB>
yeah

[14:13:08.0000] <SamB>
preferably allowing one to still have a regular fragment, too, in case you have one of those AJAX sites that needs that to even have the right content ...

[14:13:27.0000] <zewt>
that's really hard, i think

[14:13:56.0000] <SamB>
/me already wants two fragment identifiers sometimes :-(

[14:14:01.0000] <zewt>
since there's no standardization about how to parse hash-as-script-data itself, which means we don't know how to pull this extra data off of it

[14:14:20.0000] <zewt>
could try to define something, but that could be more of a battle...

[14:14:52.0000] <SamB>
yeah

[14:14:54.0000] <SamB>
but

[14:15:13.0000] <zewt>
eg. with my /path?query#path?query scheme, I never put # in the right-hand side (since it always gets escaped, just like it does on the left side), so I could use /path?data#path?data##other-stuff

[14:15:23.0000] <zewt>
... but that's just me, heh

[14:15:37.0000] <zewt>
actually, make the ## a single # in that example

[14:15:38.0000] <SamB>
well, that's what the spying is for!

[14:15:48.0000] <zewt>
(the first # of ## is the one in "data#path")

[14:16:08.0000] <SamB>
hmm, I was figuring you'd only count two # in a row as the extra stuff ...

[14:16:16.0000] <zewt>
in other words, one way you could define this is "data after the first # in the hash"

[14:16:59.0000] <SamB>
that seems more likely to be a problem than requiring exactly ## ?

[14:17:00.0000] <zewt>
rather, "after the first # in the fragment"

[14:17:15.0000] <zewt>
("#foo" is the hash, "foo" is the fragment, right?)

[14:17:22.0000] <Hixie>
well i made a change, but it didn't help with the dots illusion like i hoped it would!

[14:17:26.0000] <Hixie>
bbiab, meeting

[14:17:27.0000] <zewt>
possibly

[14:17:58.0000] <SamB>
hmm, one way to get rid of the dots illusion might be actual dots?

[14:18:24.0000] <zewt>
it would also mean that if we have more features using that mechanism, we could say http://foo.com#client stuff#word=hello#other_stuff=world

[14:18:45.0000] <SamB>
Hixie: having a whole screenfull of bright shiny links at the top of the spec seems kind of excessive ...

[14:18:52.0000] <zewt>
where this feature looks for "#word=" (which might not be the first #thing)

[14:19:07.0000] <SamB>
zewt: I was figuring use e.g. ##word=

[14:19:16.0000] <zewt>
maybe

[14:19:46.0000] <SamB>
but, um, pull them out of the fragment?

[14:19:58.0000] <zewt>
trying to think if it makes more sense to think of this in terms of fragments or hashes

[14:20:15.0000] <zewt>
i think it makes sense in hashes (not so much in fragments)

[14:20:24.0000] <zewt>
that is, as a mental model

[14:21:17.0000] <zewt>
(again--just to be clear, since it's a bit obscure--the hash of a URL means it includes the delimiting "#", where fragment doesn't ... assuming I'm not getting it wrong)

[14:22:07.0000] <zewt>
so in terms of hashes, if you have a hash and you want to add a search link to it, you'd say myHash += "##word=" + encodeURIComponent(word) (assuming there isn't one in there already), which makes sense

[14:22:48.0000] <SamB>
anyway, with such a framework in place -- even if it only supported one such thing in a URL -- it'd be obvious how to allow use of xpath/css ...

[14:23:17.0000] <zewt>
probably missed part of the conversation, but what's the link to those?

[14:23:24.0000] <zewt>
oh, for styling the result?

[14:23:30.0000] <zewt>
(wait, that'd be css but not xpath)

[14:23:56.0000] <SamB>
no, I meant if you wanted to do that instead of searching for a phrase

[14:24:19.0000] <zewt>
just a first impression, but ew :)

[14:24:20.0000] <SamB>
just use ##css= or ##xpath=

[14:25:04.0000] <SamB>
well what if I want to find a *header* containing specific text?

[14:25:57.0000] <zewt>
would they have to combine, eg. ##css=h1#text=Intro

[14:26:09.0000] <zewt>
("first H1 containing Intro")

[14:26:19.0000] <zewt>
er ##text

[14:26:54.0000] <SamB>
I was thinking that one would probably use xpath -- xpath can do that right?

[14:27:01.0000] <zewt>
i'd avoid xpath like the plague

[14:27:42.0000] <zewt>
css selectors are way more usable in practice, and it seems nicer that since you really have an "and" query, do the text query the same way (whether or not you're narrowing it further with css)

[14:27:44.0000] <SamB>
okay, so, how about an image with specific alt or title text?

[14:28:04.0000] <zewt>
##css=img[alt="foo"]

[14:28:19.0000] <SamB>
yeah, I know how to do it; that was a motivating use case

[14:29:34.0000] <zewt>
i know i don't ever want to use xpath if selectors are available :P

[14:29:46.0000] <jensnockert>
Xpath is <3.

[14:29:52.0000] <zewt>
itym 3<

[14:29:57.0000] <SamB>
well, that's why you'd never want just xpath

[14:30:15.0000] <SamB>
assuming xpath doesn't have a convenient way to use selectors anyway

[14:30:40.0000] <zewt>
i'd avoid using xpath in a new platform feature at all; don't add two ways to do something

[14:31:18.0000] <zewt>
is there a realistic (not overly contrived) example of where it'd need xpath and selectors aren't enough?

[14:31:55.0000] <KevinMarks_>
you're all missing the point a bit - css and xpath are all about invisible document stucture, which we care about but most authors don't

[14:32:22.0000] <zewt>
KevinMarks_: not missing the point at all (that's one of my questions--who is the user of this?), trying to understand the goals

[14:32:23.0000] <KevinMarks_>
whereas fragmentions are about text content, which is what the authros of annotations, commenst and references are thinking about

[14:33:03.0000] <KevinMarks_>
I wrote up the thought process at http://www.kevinmarks.com/fragmentions.html

[14:33:23.0000] <zewt>
a css selector feature could allow UAs to have a context menu "link to this place in the document", for example

[14:33:36.0000] <KevinMarks_>
it came from the Annotations WG, which had a lot of intersting use cases for this

[14:33:46.0000] <KevinMarks_>
so can fragmentions

[14:34:06.0000] <KevinMarks_>
er wrokshop, not WG yet

[14:34:21.0000] <zewt>
(grr, what happened to browsers having a "disable page style" option; this font is hard to read)

[14:34:48.0000] <KevinMarks_>
the medium version is prettier https://medium.com/everything-branches-out-until/41ef2be9953f

[14:34:56.0000] <KevinMarks_>
I suck at design

[14:35:06.0000] <zewt>
(this page is rambling too much, heh)

[14:35:19.0000] <KevinMarks_>
it's an essay, not a spec

[14:35:40.0000] <KevinMarks_>
http://indiewebcamp.com/fragmention is more speccy

[14:37:08.0000] <KevinMarks_>
but playing with the prollyfill and browser extension we have, this works very nicely in UX becasue you can just type #words+to+link

[14:37:37.0000] <zewt>
really needs a qualifier like we talked about above

[14:38:24.0000] <zewt>
this feature probably shouldn't require users to type stuff into the URL themselves anyway; better for the UA to do it for them (eg. select text, right click, select "copy link to this text", something along those lines)

[14:38:32.0000] <JonathanNeal>
KevinMarks_: if someone asks for a “spec” I will link them to iwc then

[14:38:50.0000] <KevinMarks_>
zewt: of course

[14:39:05.0000] <zewt>
that is, saying "##text=xxx" instead of "##xxx" isn't a user cost

[14:39:14.0000] <KevinMarks_>
yes it is

[14:39:16.0000] <KevinMarks_>
really

[14:39:21.0000] <zewt>
it isn't, they're not typing it out

[14:39:26.0000] <KevinMarks_>
some of them are

[14:39:39.0000] <zewt>
and using up "##" on one isolated feature should be a complete non-starter

[14:39:40.0000] <KevinMarks_>
assuming "no-one every types html" is how we get xhtml

[14:40:00.0000] <KevinMarks_>
"using up" is such BS

[14:40:23.0000] <KevinMarks_>
by that logic, as IDs can contain anything, all fragments are used up now

[14:40:24.0000] <zewt>
(if "##" is available for use with minimal web compat issues, then let's use it in a way that doesn't pretend this feature exists in a vacuum)

[14:40:36.0000] <KevinMarks_>
#! is used up by IDs

[14:40:46.0000] <KevinMarks_>
by your definition of "used up"

[14:40:59.0000] <zewt>
funny, I didn't give a definition (you did, then claimed it was mine)

[14:41:09.0000] <zewt>
quit the hyperbole, it doesn't help the discussion

[14:41:16.0000] <KevinMarks_>
you said this proposal uses up the namespace

[14:41:22.0000] <KevinMarks_>
I say it doesn't

[14:42:08.0000] <zewt>
so you're saying you can still use ## for linking to a css selector alongside this feature? seems unlikely

[14:42:23.0000] <KevinMarks_>
yes

[14:42:31.0000] <KevinMarks_>
want proof?

[14:43:01.0000] <zewt>
##table could mean "find the text table" or "find a <table>"

[14:43:47.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html

[14:43:59.0000] <zewt>
saying ##text=foo is no more of a cost than query keys (and fits next to them naturally, as a nice bonus)

[14:44:07.0000] <KevinMarks_>
see 'an element with an id of #b1

[14:45:01.0000] <zewt>
not sure what I'm supposed to be seeing

[14:45:23.0000] <KevinMarks_>
I can link to a phrase with http://sandbox.thewikies.com/fragmentions/example.html#phrases+as+anchors

[14:45:39.0000] <zewt>
having ##table search for both the string "table" and the first <table> seems bad to me

[14:46:29.0000] <KevinMarks_>
is ## searching for elements an existing thing, or did you just make it up?

[14:46:34.0000] <zewt>
what?

[14:46:36.0000] <KevinMarks_>
or are you using CSS syntax?

[14:46:55.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html##b1

[14:47:05.0000] <KevinMarks_>
links to the element with id "#b1"

[14:47:15.0000] <zewt>
the whole discussion is about the idea of using CSS selectors in the anchor (one possible future feature that might live alongside this)

[14:47:18.0000] <zewt>
er, in the hash

[14:47:58.0000] <zewt>
talking about css selectors, not just ids

[14:48:14.0000] <KevinMarks_>
OK, so that's a separate proposal

[14:48:27.0000] <zewt>
(not advocating for supporting css selectors like this, rather using it as an example of something that this would get in the way of if done wrongly)

[14:48:33.0000] <KevinMarks_>
frankly if you want that, go with #$ and just use jquery syntax

[14:48:38.0000] <zewt>
ugh

[14:49:03.0000] <zewt>
every new feature shouldn't need to find its own magic sequence of characters (and have to do a bunch of research to figure out the web compat implications, and make URL syntax yet weirder and weirder)

[14:49:12.0000] <KevinMarks_>
agreed

[14:49:25.0000] <KevinMarks_>
which is why i want to make this simple

[14:49:33.0000] <SamB>
that doesn't make sense

[14:50:01.0000] <SamB>
unless you mean something different by "keep this simple" than I think you mean

[14:50:02.0000] <zewt>
##text=search+text##css=table>tr

[14:51:00.0000] <KevinMarks_>
your argument is that is less weird?

[14:51:05.0000] <zewt>
the idea that adding "text=" to it is such a burden that any future features should just make up their own magic characters is the sort of non-forward-thinking that lead to the mess of needing "##" in the first place

[14:51:17.0000] <KevinMarks_>
I say we can get rid of ##

[14:51:20.0000] <KevinMarks_>
and just use #

[14:51:33.0000] <zewt>
that isn't weird at all, it's just like the query part of the URL and could probably be parsed with the same code

[14:51:51.0000] <KevinMarks_>
like http://sandbox.thewikies.com/fragmentions/example.html#remote+annotation

[14:51:57.0000] <zewt>
well, & vs. ## is different, so not quite that

[14:52:19.0000] <zewt>
but the key/value scheme should be very familiar to everyone

[14:52:26.0000] <KevinMarks_>
& is prcessed server-side # is processed client side

[14:52:30.0000] <zewt>
irrelevant

[14:53:19.0000] <SamB>
query parameters are in fact sometimes ignored server-side and used only on the client

[14:53:26.0000] <zewt>
the point of ## is making it possible to use this alongside client-side hashes, at least some of them

[14:54:00.0000] <zewt>
for example, it could be used (in principle) with Gmail's URLs, which look like mail.google.com/mail/a/b/c#foo/bar

[14:54:44.0000] <zewt>
resulting in mail.google.com/mail/a/b/c#foo/bar##text=hello

[14:54:55.0000] <SamB>
I'm thinking something that more than one person can normally access would perhaps make more sense as an example?

[14:55:18.0000] <zewt>
yeah, thus "in principle" :)

[14:55:33.0000] <SamB>
maybe groups?

[14:55:35.0000] <zewt>
(doesn't mean it'd Just Work in every case, and probably wouldn't in many, but using just # would basically never work alongside client hashes)

[14:56:07.0000] <zewt>
incidentally, this could also be used to maybe fix the problem that you can't use id anchors at all with sites that use # for other things

[14:56:42.0000] <zewt>
http://foo.com#clientdata##anchor=toc interpreted like http://foo.com#toc would have been used if the clientdata stuff wasn't there

[14:56:47.0000] <KevinMarks_>
zewt requiring spaces in the fragmention meets all those objections

[14:56:55.0000] <SamB>
I don't think "client-side" is the term you want to be using though, as plain old fragments are client-side too ...

[14:57:04.0000] <SamB>
KevinMarks_: nooo it doesn't

[14:57:09.0000] <KevinMarks_>
these are frgaments

[14:57:21.0000] <KevinMarks_>
they are still parseable by client code

[14:57:37.0000] <KevinMarks_>
we just change how they resolve to target a bit

[14:58:49.0000] <KevinMarks_>
all your examples above have the same issue

[14:59:03.0000] <KevinMarks_>
I could have an element with id="#clientdata##anchor=toc"

[14:59:18.0000] <KevinMarks_>
which would mean that it would be the target

[14:59:51.0000] <KevinMarks_>
or id="#foo/bar"

[15:00:53.0000] <zewt>
that's the web compatibility question, or part of it: does anyone use anchors with "##" in them

[15:01:00.0000] <SamB>
/me already reported https://bugzilla.mozilla.org/show_bug.cgi?id=978431 about http://simonstl.com/articles/cssFragID.html ... could would happily close that as a dupe of something like what zewt is talking about

[15:01:23.0000] <KevinMarks_>
OK, ignore the ##

[15:01:58.0000] <zewt>
then what am I supposed to be answering :)

[15:02:38.0000] <KevinMarks_>
imagine this bit of the spec http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#the-indicated-part-of-the-document

[15:04:06.0000] <KevinMarks_>
has before item 8, "if fragid is a whitespace-insenstitve match for innertext within the document, the indicated part of the document is the containing element of that innertext"

[15:05:02.0000] <KevinMarks_>
er, s/decoded fragid/fragid

[15:06:01.0000] <KevinMarks_>
this doesn't stop any other use of fragments, it just adds some more cases where target is valid and potentially scrolls the document

[15:06:16.0000] <zewt>
it makes a total mess of other use of fragments, as I said

[15:06:21.0000] <KevinMarks_>
no it doesn't

[15:06:32.0000] <KevinMarks_>
only in the same way as IDs do

[15:06:40.0000] <SamB>
yeah, basically

[15:06:44.0000] <zewt>
no, far more, as I explained already

[15:06:51.0000] <SamB>
assuming by IDs you also mean NAMEs

[15:06:58.0000] <KevinMarks_>
IDs and NAMEs yes

[15:07:09.0000] <KevinMarks_>
things above 8 in the bit of spec text

[15:07:09.0000] <SamB>
of course, that was the first use

[15:07:17.0000] <KevinMarks_>
"top" too

[15:07:22.0000] <zewt>
if css selectors were added, http://foo.com##table could mean "scroll to the first instance of the word table", or "scroll to the first <table>" element

[15:07:36.0000] <zewt>
which is a total mess

[15:07:49.0000] <zewt>
the solution is simple and low-cost: http://foo.com##text=table

[15:07:59.0000] <KevinMarks_>
it also would mean "Scroll to element with id="#table" like it is now

[15:08:07.0000] <SamB>
you can sort of understand them not thinking ahead so well at the beginning

[15:08:16.0000] <KevinMarks_>
scroll to Scroll to element with id="#text=table"

[15:08:24.0000] <zewt>
new browsers supporting this would never tried to scroll to "#table", obviously

[15:08:37.0000] <KevinMarks_>
everything you say about this is true of ID already

[15:08:38.0000] <SamB>
but now that we've already got lots of ideas about what fragments ought to be able to do, *and* conflicts between existing uses ...

[15:08:55.0000] <zewt>
and this is even more specific--the changes of there being a link to an id "#text=table" is smaller

[15:09:18.0000] <zewt>
so it both reduces the chance of web compat issues, and allows future features much more easily

[15:10:06.0000] <zewt>
if the only counterargument is "man, I don't want to have to type #text= once in a while", well... :)

[15:10:49.0000] <KevinMarks_>
you are making categorical statements about this proposal that are untrue

[15:11:52.0000] <zewt>
your arguments seem to be of the form "no it's not" and "that's untrue", which nobody can do much with

[15:12:06.0000] <KevinMarks_>
clearly we do need that survey of existing IDs adn fragments on the web to settle the probablistic arguments

[15:12:07.0000] <zewt>
anyway, time to go home

[15:12:11.0000] <zewt>
back in a bit

[15:12:19.0000] <KevinMarks_>
no, my argument is that IDs already consume the namespace

[15:12:33.0000] <SamB>
KevinMarks_: longer things are less likely to occur than substrings of them

[15:12:46.0000] <KevinMarks_>
except fro spaces

[15:12:53.0000] <Hixie>
SamB: agreed... what do you suggest instead, though? i'm scraping the bottom of the barrel for ideas here :-(

[15:13:05.0000] <KevinMarks_>
so requiring spaces doesn't collide with IDs

[15:13:27.0000] <SamB>
is that so?

[15:13:37.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html#remote+annotation

[15:14:15.0000] <KevinMarks_>
decodes the fragid "remote+annotation" to "remote annotation" which cannot match an ID

[15:14:29.0000] <KevinMarks_>
(that link works BTW)

[15:15:02.0000] <KevinMarks_>
so the weak fragmentions argument requires a space

[15:15:27.0000] <KevinMarks_>
the strong fragmentions argument says any text that isn't an ID in the document is fair game as a fragmention

[15:16:06.0000] <KevinMarks_>
eg http://sandbox.thewikies.com/fragmentions/example.html#of

[15:16:12.0000] <KevinMarks_>
which may be overbroad

[15:16:24.0000] <KevinMarks_>
but still doesn't harm IDs

[15:16:32.0000] <SamB>
and what is so special about fragmentions that makes you think *it* should be so enshrined in the html spec?

[15:16:35.0000] <JonathanNeal>
what about the argument of using uncharted, presently invalid space, like ##?

[15:17:25.0000] <JonathanNeal>
SamB: same reason hash anchors are represented, access to content.

[15:17:29.0000] <KevinMarks_>
zewt says he wants that for all kinds of magic jquery style CSS stuff in some hypotherical future

[15:18:04.0000] <KevinMarks_>
SamB there is a huge use case for referring to text remotely

[15:18:15.0000] <KevinMarks_>
*text* not structure

[15:19:21.0000] <KevinMarks_>
effectively every reference to another work can be represented as a quotation from it

[15:19:31.0000] <KevinMarks_>
google is the existence proof

[15:20:07.0000] <KevinMarks_>
https://www.google.com/search?q=%22If+you+get+the+right+ones+in+the+right+order%22

[15:20:27.0000] <KevinMarks_>
is a better anchor for the play text I'm referring to than a URL

[15:22:17.0000] <KevinMarks_>
heh, and my fragmentions page is now #4 for it on google

[15:23:06.0000] <KevinMarks_>
ten words is enough to identify that quote globally

[15:23:21.0000] <KevinMarks_>
4 is probably enough for a given document

[15:24:04.0000] <KevinMarks_>
except for villanelles

[15:24:27.0000] <SamB>
that doesn't give your idea a divine right to this syntax ...

[15:24:27.0000] <KevinMarks_>
http://www.kevinmarks.com/poemfragmentions.html##Do+not+go+gentle+into+that+good+night.+Rage,+rage+against+the+dying+of+the+light.

[15:24:49.0000] <KevinMarks_>
not arguing that

[15:25:03.0000] <KevinMarks_>
standards are documentation, not legislation

[15:25:25.0000] <KevinMarks_>
I contend that this is useful, we're shipping it on the web in various places

[15:26:04.0000] <TabAtkins>
KevinMarks_: "all kinds of magic jquery style CSS stuff" is a misstatement.  The idea of using selectors in the frag to find an element has a long history.

[15:27:20.0000] <KevinMarks_>
TabAtkins: got some spec text or proposals I can link to from http://indiewebcamp.com/fragmention#Related_work?

[15:27:47.0000] <TabAtkins>
http://simonstl.com/articles/cssFragID.html

[15:27:51.0000] <TabAtkins>
/me http://www.w3.org/community/cssselfrags/

[15:27:55.0000] <TabAtkins>
/me https://bugs.webkit.org/show_bug.cgi?id=100841

[15:28:01.0000] <KevinMarks_>
thanks!

[15:28:12.0000] <TabAtkins>
I literally just googled for "selectors in fragment"

[15:28:26.0000] <TabAtkins>
There are a bunch more.

[15:28:40.0000] <KevinMarks_>
yes, lots of prior art

[15:28:48.0000] <KevinMarks_>
all of which are complicated as heck

[15:29:27.0000] <KevinMarks_>
and thus wouldn't collide

[15:29:31.0000] <KevinMarks_>
:D

[15:30:23.0000] <TabAtkins>
What do you mean by "complicated as heck"?

[15:30:43.0000] <TabAtkins>
Simon St Laurent's last proposal is "example.com#css(.foo)"

[15:30:43.0000] <KevinMarks_>
I mean #css(div[class~="content"]:nth-child(2))

[15:31:02.0000] <TabAtkins>
It's exactly as complicated as your selector is.

[15:31:16.0000] <zewt>
the thing samb and I explained it extraordinarily simple

[15:31:29.0000] <KevinMarks_>
is not in namespace contention with #more+complicatd

[15:31:36.0000] <SamB>
KevinMarks_: yes, it is

[15:31:40.0000] <zewt>
is not a parsable sentence

[15:32:10.0000] <KevinMarks_>
or rather it is already in contention with IDs

[15:32:15.0000] <zewt>
please restate your argument against "##text=foo", because I don't understand it

[15:32:17.0000] <SamB>
well, okay, not insofar as it has no parens in it, but ...

[15:33:05.0000] <zewt>
"##" is a hack to work around the unextensibility of the hash; if that works (isn't blocked by web compat), we should do it in a way that only has to be done once and can be reused

[15:33:31.0000] <zewt>
(the single-# thing I'm pretty certain is a non-starter for web compat reasons)

[15:33:54.0000] <KevinMarks_>
can we separate these two

[15:34:08.0000] <KevinMarks_>
I am interested int the web compat reasons

[15:34:22.0000] <KevinMarks_>
because that is the heart of this

[15:34:39.0000] <KevinMarks_>
can you explain how this breaks web compatibility

[15:34:54.0000] <SamB>
the web compat reasons are that it's going to be a pain to find and verify ONE piece of syntax to steal

[15:35:54.0000] <KevinMarks_>
can you rephrase that in less lodded terms please

[15:36:10.0000] <KevinMarks_>
you are saying this will collide with something?

[15:36:12.0000] <zewt>
if you have a link http://foo.com, and there's an ID "credits", what does http://foo.com#credits mean?

[15:36:28.0000] <KevinMarks_>
it means go to ID credits

[15:36:37.0000] <zewt>
you either have a web compat issue (it breaks links to the credits), or you're unable to do a text link to the string "credits"; both are bad

[15:36:43.0000] <KevinMarks_>
IDs win over text

[15:36:50.0000] <SamB>
(or, well, maybe I was going in the wrong direction ...)

[15:36:55.0000] <KevinMarks_>
what does http://foo.com#credits+ mean?

[15:37:01.0000] <zewt>
so you want a text-search-link feature that doesn't work if the page happens to have an ID with the word the user wants to link to?

[15:37:05.0000] <KevinMarks_>
it no longer matches that ID

[15:37:11.0000] <zewt>
what? that's gross

[15:37:16.0000] <SamB>
indeed, very gross

[15:37:18.0000] <zewt>
hope that's not a serious suggestion heh

[15:37:24.0000] <KevinMarks_>
absolutely

[15:37:30.0000] <zewt>
...

[15:37:33.0000] <KevinMarks_>
it's what I have working

[15:37:36.0000] <zewt>
sorry, too insane for me to even know how to reply

[15:37:54.0000] <KevinMarks_>
this is how I know i'm safe

[15:37:55.0000] <SamB>
it doesn't really matter all that much what you have working

[15:38:13.0000] <KevinMarks_>
you all think this is insane, because you haven't seen it on the web

[15:38:19.0000] <KevinMarks_>
hence no collisions

[15:38:37.0000] <zewt>
no, we think it's insane because it's an ugly, nasty hack (even uglier than ##, and far less functional)

[15:38:38.0000] <SamB>
you have to sell it to the browser vendors ...

[15:39:06.0000] <KevinMarks_>
I'm hearing emotion words, not arguments

[15:39:17.0000] <KevinMarks_>
"ugly, nasty" is cognitive dissonance

[15:39:33.0000] <zewt>
we've already responded to everything you've said, and you've given little to no useful response

[15:39:43.0000] <KevinMarks_>
you haven't responded

[15:39:49.0000] <zewt>
...

[15:39:54.0000] <zewt>
okay, i'm done for now :)

[15:39:59.0000] <TabAtkins>
Note that Media Fragments claims a relatively safe portion of the fragment syntax space just by assuming that "foo=..." is safe to claim.

[15:40:00.0000] <KevinMarks_>
I say that fragments with spaces in don't collide with IDs

[15:40:17.0000] <TabAtkins>
video.mp4#t=5s, for example.

[15:40:31.0000] <SamB>
TabAtkins: I heard they specifically excluded HTML though?

[15:40:33.0000] <TabAtkins>
We should probably make sure that everybody claims fragment syntax in the same way.

[15:40:38.0000] <KevinMarks_>
media fragments explicitly exclude htmls

[15:40:46.0000] <zewt>
TabAtkins: my suggestion is http://foo.com#ignored##key=value, because that can coexist with many client-side uses of the hash

[15:40:47.0000] <TabAtkins>
SamB: Not too relevant.  SVG does the same thing.

[15:41:13.0000] <KevinMarks_>
this can coexist with client-side uses of the hash

[15:41:26.0000] <zewt>
(samb's originally, I think)

[15:41:27.0000] <SamB>
KevinMarks_: in the same link?

[15:41:43.0000] <KevinMarks_>
what?

[15:42:14.0000] <KevinMarks_>
where did "in the same link" come from?

[15:42:16.0000] <TabAtkins>
Actually, SVG uses "#foo()" form.

[15:42:21.0000] <SamB>
zewt: well, you came up with the key=value idea; my thinking was just that there should be some sort of a name to indicate which new thing ...

[15:42:51.0000] <TabAtkins>
zewt: Yeah, I prefer using = over function syntax.

[15:42:54.0000] <SamB>
KevinMarks_: see the example above?

[15:43:03.0000] <KevinMarks_>
I do, yes what does it represent

[15:43:19.0000] <zewt>
fwiw, i think it could be defined simply as "the string #text= followed by characters other than #", with no higher-level "parse out key/values" algorithm

[15:43:46.0000] <zewt>
##text

[15:44:14.0000] <SamB>
KevinMarks_: difficult to say; it's rather meta

[15:44:16.0000] <TabAtkins>
I think it's fine to claim #text=

[15:44:40.0000] <zewt>
TabAtkins: i think that's extremely bad

[15:45:04.0000] <TabAtkins>
Why?  Pretty sure it'd be safe to claw that out of the ID space.

[15:45:34.0000] <zewt>
it's the space for scripts to stash stuff in the hash that I'm more concerned about

[15:45:41.0000] <KevinMarks_>
you're all fighting for the ID space. Mine doesn't collie with it at all

[15:46:08.0000] <KevinMarks_>
and scripts stuffing things in the hash aren't going to collide except in documents discussing those scripts

[15:46:43.0000] <KevinMarks_>
and only if they use spaces

[15:46:48.0000] <TabAtkins>
KevinMarks_: Orthogonal concerns.  Even if we decided to use a different syntax like ##foo, we'd still want to make sure it's possible to use more functions than just "match text".

[15:47:17.0000] <KevinMarks_>
TabAtkins: how does this stop that?

[15:47:30.0000] <KevinMarks_>
it's possible to use more functions than just "match ID" now

[15:47:49.0000] <TabAtkins>
Everyone's been over that.  Making "##foo" be the "search for 'foo' text" syntax claims the entire syntax space.

[15:47:56.0000] <Hixie>
what's the problem y'all are trying to solve? (sorry, not been paying attention so far)

[15:48:02.0000] <SamB>
as you can see, there are a lot of people who want various pieces of this action; it's best if we can come up with something that avoids people having to worry about stepping on eachothers toes in the process ...

[15:48:11.0000] <KevinMarks_>
ID already claims the entire syntax space

[15:48:36.0000] <SamB>
KevinMarks_: yes, well, if we're going to steal some we need to do it properly

[15:48:47.0000] <TabAtkins>
Hixie: Trying to solve the problem of multiple specs wanting to put things in the fragment space.

[15:48:48.0000] <KevinMarks_>
if you manage without colliding with IDs, you'll manage with this

[15:49:03.0000] <KevinMarks_>
Hixie: the fragmentions idea

[15:49:10.0000] <zewt>
"we already have a collision with IDs" != "we should stuff whatever unstructured stuff we want in the hash and not care about making things worse"

[15:49:15.0000] <Hixie>
TabAtkins: ah, a time-honoured problem for people to try to solve :-)

[15:49:17.0000] <TabAtkins>
KevinMarks_: There's a difference between "No real IDs use an = character" and "No one will ever want to search for an = character"

[15:49:22.0000] <Hixie>
KevinMarks_: fragmentations idea?

[15:49:45.0000] <SamB>
Hixie: no, fragmentions

[15:49:48.0000] <Hixie>
(in practice, the fragid space in HTML docs is page-defined, and entirely under the control of the page)

[15:49:53.0000] <TabAtkins>
Frag-mentions.

[15:49:54.0000] <SamB>
it's a portmanteu (however that's spelt)

[15:50:04.0000] <Hixie>
frag-mentions?

[15:50:12.0000] <zewt>
Hixie: http://foo.com##text=hello linking to the first text match of "hello" (using one of the syntaxes we've discussed)

[15:50:20.0000] <Hixie>
oh, linking to a text match

[15:50:22.0000] <Hixie>
interesting

[15:50:22.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html#remote+annotation

[15:50:42.0000] <zewt>
(obviously, the web compat and hash namespace issues are biggies)

[15:50:43.0000] <TabAtkins>
(Probably actually pre-filling the browser's Ctrl+F UI.)

[15:50:43.0000] <SamB>
http://indiewebcamp.com/fragmention links to several related things ...

[15:50:45.0000] <Hixie>
yeah you don't want to do that using fragids, pages can already use that space for whatever purpose they want

[15:50:49.0000] <KevinMarks_>
a single word is a problem

[15:50:56.0000] <KevinMarks_>
multiple words isn't

[15:51:01.0000] <TabAtkins>
Hixie: So the idea so far is to lean on ## as the introducer syntax.

[15:51:05.0000] <KevinMarks_>
hang on

[15:51:10.0000] <KevinMarks_>
I'm backing off ##

[15:51:15.0000] <zewt>
we're not :)

[15:51:18.0000] <KevinMarks_>
and being more ambitious

[15:51:31.0000] <KevinMarks_>
IDs cannot contain spaces

[15:51:36.0000] <KevinMarks_>
so http://sandbox.thewikies.com/fragmentions/example.html#remote+annotation

[15:51:42.0000] <KevinMarks_>
means what now?

[15:51:43.0000] <SamB>
KevinMarks_: it might be possible to use that space but it would be more annoying to would-be linkmakers

[15:51:47.0000] <Hixie>
KevinMarks_: fragment identifiers aren't limited to IDs

[15:51:54.0000] <TabAtkins>
Your idea means I can't search for a single word.

[15:51:57.0000] <Hixie>
and "+" in fragment identifiers means "+", not " "

[15:52:03.0000] <zewt>
TabAtkins: he wants you to put a dummy space at the end

[15:52:09.0000] <TabAtkins>
Oh, bleh.

[15:52:11.0000] <KevinMarks_>
not in every browser I've tried it

[15:52:12.0000] <zewt>
my reaction too

[15:52:14.0000] <TabAtkins>
That doesn't work either.

[15:52:18.0000] <SamB>
dummy space isn't even actually possible

[15:52:19.0000] <TabAtkins>
I might be searching for a word prefix.

[15:52:20.0000] <SamB>
browser removes it

[15:52:26.0000] <TabAtkins>
I do that in the Ctrl+F UI regularly.

[15:52:37.0000] <SamB>
I don't know if fragmentions can even search for word fragments

[15:52:43.0000] <astearns>
the part of the URL that contains the fragmention is the fragmention container, so it will have to be called the fragmentiontainer

[15:52:51.0000] <SamB>
astearns: lol

[15:52:53.0000] <SamB>
you win

[15:52:59.0000] <zewt>
anyway, ## solves (or attempts to solve) a number of problems, including possibly improving the situation we have today where you can't use both #anchors and script-data-stored-in-the-hash at the same time

[15:53:04.0000] <KevinMarks_>
Hixie, click that lint

[15:53:08.0000] <KevinMarks_>
*link

[15:53:13.0000] <SamB>
zewt: ## is at least a good stand-in for a solution

[15:53:40.0000] <KevinMarks_>
I don't actually care about the single word case

[15:53:41.0000] <zewt>
SamB: making http://foo.com#clientdata##id=foo behave like http://foo.com#foo does today seems to solve it pretty well

[15:53:43.0000] <Hixie>
KevinMarks_: what about it?

[15:54:19.0000] <KevinMarks_>
because my use case is robust anchors to text content

[15:54:24.0000] <astearns>
KevinMarks_: the single word case seems like a huge use case to me - I'm annotating this word to mention that it's mispelled

[15:54:29.0000] <KevinMarks_>
so multiword is better

[15:54:41.0000] <zewt>
SamB: it doesn't fix it automatically (the site may need to adjust parsing to handle it, or know how to preserve the ##extra stuff in the URL), but it gives them a *way* to do it, which today doesn't exist at all

[15:55:03.0000] <KevinMarks_>
astearns: in practice you give search phrase

[15:55:04.0000] <SamB>
can I point out that I think I'm extremely likely to want to link to something other than the first occurance?

[15:55:22.0000] <KevinMarks_>
which is why you use more words

[15:55:39.0000] <Hixie>
fragment identifiers are a reserved space for use by the page, you can't add UA logic there beyond what's there already

[15:55:50.0000] <zewt>
SamB: i'm inclined to punt that as a use case for a possible future "css selectors in the url" proposal

[15:55:59.0000] <SamB>
zewt: I was sort of assuming we'd want to roll out browsers segregating that stuff from .fragment as the first step

[15:56:02.0000] <JonathanNeal>
KevinMarks_: for the sake of argument, if ## is used, what are the next concerns? < Hixie, TabAtkins

[15:56:02.0000] <KevinMarks_>
http://www.kevinmarks.com/poemfragmentions.html##occurs+more

[15:56:05.0000] <Hixie>
otherwise you'd break e.g. fragmention.js

[15:56:21.0000] <KevinMarks_>
I'm not adding more UA logic

[15:56:46.0000] <Hixie>
oh

[15:56:49.0000] <KevinMarks_>
I'm just expanding the ability to express "the indicated part of the document"

[15:56:57.0000] <TabAtkins>
...which is UA logic.

[15:57:02.0000] <Hixie>
o_O

[15:57:05.0000] <Hixie>
i'm confused

[15:57:09.0000] <zewt>
Hixie: the web compat problem is important, but it's not obvious to me that having (eg.) "##id=foo" jump to <div id=foo> isn't web-compatible enough

[15:57:10.0000] <Hixie>
do you want UAs to change behaviour or not?

[15:57:16.0000] <SamB>
Hixie: well, presumably we could key off of "#" "#" ID "=" ?

[15:57:23.0000] <TabAtkins>
UA logic being "anything the UA does for you", as opposed to "something that in-page scripts do".

[15:57:30.0000] <Hixie>
there are pages that take the fragid and do stuff with it

[15:57:35.0000] <Hixie>
stuff like "draw it on a canvas"

[15:57:41.0000] <zewt>
i've written many of them myself :)

[15:57:43.0000] <Hixie>
or "send an e-mail"

[15:57:44.0000] <Hixie>
or whatever

[15:57:46.0000] <SamB>
Hixie: I want the URL parsing to change, and hide this from old pages

[15:57:54.0000] <KevinMarks_>
I want UAs to change behaviour. I am arguing that this does not in any way affect the other uses of fragments by client code

[15:58:03.0000] <Hixie>
oh well if you want to change URL parsing, that's a different matter

[15:58:07.0000] <KevinMarks_>
and this would not affect them

[15:58:17.0000] <zewt>
SamB: i just thought about that a little, but changing that is scary...

[15:58:30.0000] <Hixie>
/me will leave fighting changing the url parsing spec to anne

[15:58:37.0000] <KevinMarks_>
I want to add a step between 7. and 8. here http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#the-indicated-part-of-the-document

[15:58:44.0000] <Hixie>
KevinMarks_: yeah, you can't do that

[15:58:51.0000] <Hixie>
KevinMarks_: that breaks pages that use the fragment identifier

[15:58:53.0000] <SamB>
zewt: well, it seems impractical to expect every JS app that uses fragments to change

[15:58:55.0000] <zewt>
SamB: for example, if saying document.location.protocol + document.location.hostname ..... + document.location.hash no longer reconstructs the URL

[15:58:55.0000] <KevinMarks_>
how?

[15:58:57.0000] <SamB>
which seems like the alternative?

[15:58:59.0000] <Hixie>
KevinMarks_: you could do it the way SamB suggests

[15:59:03.0000] <Hixie>
KevinMarks_: and change the url parser

[15:59:09.0000] <SamB>
zewt: hmm

[15:59:09.0000] <zewt>
SamB: (because part of the hash is no longer inside .hash)

[15:59:14.0000] <KevinMarks_>
hear me out, Hixie

[15:59:17.0000] <SamB>
I'm not sure if I'd want to change .hash

[15:59:23.0000] <Hixie>
KevinMarks_: suppose a page takes the fragid and draws it on a canvas

[15:59:31.0000] <KevinMarks_>
OK

[15:59:37.0000] <Hixie>
KevinMarks_: you've just made that page have wacked behaviour for certain fragIDs

[15:59:59.0000] <SamB>
Hixie: assuming it has words on it

[16:00:02.0000] <KevinMarks_>
no more than if there is an ID in the page that matches it

[16:00:08.0000] <Hixie>
SamB: right

[16:00:09.0000] <zewt>
Hixie: it seems okay if the new feature doesn't work on 100% of pages, as long as it doesn't break existing pages/links (or whatever small percent of breakage vendors are OK with)

[16:00:14.0000] <Hixie>
KevinMarks_: right, but they already know about that

[16:00:16.0000] <SamB>
KevinMarks_: but it would KNOW about the IDs

[16:00:19.0000] <Hixie>
KevinMarks_: so they already have to deal with it

[16:00:49.0000] <Hixie>
zewt: there's 100s of trillions of pages. unless the number is 0, the number is probably too high.

[16:01:00.0000] <SamB>
the best case here is if we can make this work even for pages that already use their fragments in script

[16:01:03.0000] <zewt>
trying to contrive actual web breakage: a site might use a weird not-base64 binary encoding in their hash, which could end up encoding some binary blob to a string including "##text=hello"

[16:01:18.0000] <zewt>
s/actual/potential/

[16:01:34.0000] <SamB>
we at least need to avoid actually BREAKING such pages

[16:01:55.0000] <zewt>
that page would break if .hash changed, but it might not if .hash stays the same (which I'm pretty sure it should) and it just causes the browser to try to scroll to "hello"

[16:02:12.0000] <KevinMarks_>
so we're back to what I said originally - is there a good survey of existing IDs and fragment URLs in the wild?

[16:02:17.0000] <KevinMarks_>
like Hixie did for classes?

[16:02:32.0000] <SamB>
hmm, what do typical .hash-using pages in the wild actually DO with their .hash strings?

[16:02:39.0000] <Hixie>
KevinMarks_: such a survey wouldn't help, what you need is an inspection-based examination of pages that use location.hash

[16:02:39.0000] <KevinMarks_>
'cos that's how you settle "you might break this carefully constructed edge case" argument

[16:02:44.0000] <zewt>
SamB: probably everything conceivable :P

[16:02:49.0000] <JonathanNeal>
I’d still like to know from Hixie or TabAtkins what happens if we just use the ## space, as those are presently invalid, and let browsers honor the invalid ##term as they already would when <div id="#term">.

[16:03:07.0000] <Hixie>
JonathanNeal: nothing is invalid in a fragid

[16:03:27.0000] <zewt>
invalid as an @id link doesn't mean you can't put it in the fragment at all

[16:03:31.0000] <SamB>
unfortunate truth :-(

[16:03:43.0000] <JonathanNeal>
Hixie, ah, cool, and what are your thoughts on reserving some of that space for targeting elements by text?

[16:03:44.0000] <SamB>
the "nothing is invalid" bit, I mean

[16:03:50.0000] <zewt>
i think he just gave his thoughts :P

[16:03:53.0000] <SamB>
JonathanNeal: no that's not cool :-(

[16:04:45.0000] <KevinMarks_>
A fragment must be zero or more URL units. http://url.spec.whatwg.org/#url-code-points does not include #

[16:04:51.0000] <JonathanNeal>
SamB: so I’m clean, you are saying that anything using a hash to search for text on a page, regardless of the syntax, is not cool?

[16:05:05.0000] <SamB>
Hixie: oh did you see the link to http://simonstl.com/articles/cssFragID.html yet?

[16:05:33.0000] <KevinMarks_>
so #%23foo is needed to produce a decoded fragid of "#foo"

[16:06:03.0000] <Hixie>
JonathanNeal: retroactively reserving space is usually a lost cause

[16:06:21.0000] <Hixie>
KevinMarks_: maybe in theory, but not in practice

[16:06:25.0000] <SamB>
Hixie: obviously based on our discussion we're not sure that's a good plan for the actual syntax, but the things it allows one to *represent* seem useful ...

[16:06:38.0000] <KevinMarks_>
which is what we found

[16:06:49.0000] <KevinMarks_>
though some UA's converted ## into #%23 notably colloquy

[16:06:53.0000] <SamB>
KevinMarks_: you may have found a bug in the URL spec

[16:07:04.0000] <Hixie>
SamB: yeah, xpointer is one of the big over-engineered ways to solve this problem. and it doesn't solve it. :-)

[16:07:14.0000] <Hixie>
(and it went nowhere)

[16:07:21.0000] <zewt>
as a terrible logical-extreme case, do you think "##0271a91a-86a0-4773-b042-eb535834e0d8=hello" would be web-incompatible?

[16:07:26.0000] <SamB>
Hixie: it would help if we had a way to actually *use* it

[16:07:33.0000] <SamB>
I mean in a link

[16:07:48.0000] <Hixie>
anyway i don't want to be the stop energy in the room here, i mean, if you guys can figure out a way to do it, go for it :-)

[16:07:58.0000] <KevinMarks_>
there are variations of complex queries going back to 1998 that didn't work

[16:08:05.0000] <Hixie>
zewt: it would break the script i mentioned earlier, yes

[16:08:13.0000] <KevinMarks_>
the simple one goes right through the gap

[16:08:17.0000] <Hixie>
zewt: (unless we change url parsing to hide it from .hash)

[16:08:21.0000] <SamB>
hmm, my next crazy idea is to invent a new Unicode character especially to start one of these babies

[16:08:30.0000] <SamB>
that probably doesn't actually work though

[16:08:36.0000] <Hixie>
zewt: (though then we break the scripts that concatenate, as you mentioned)

[16:09:07.0000] <SamB>
hmm, FWIW, I think it's acceptable if a script tries to reconstruct its URL and loses the extras

[16:09:14.0000] <zewt>
Hixie: sorry, which script? (what I'm looking for is how it could have web compatibility issues, given that no link on the web contains that text)

[16:09:30.0000] <KevinMarks_>
http://zesty.ca/crit/draft-yee-url-textsearch-00.txt

[16:09:48.0000] <SamB>
I don't think the IETF is in charge of URLs anymore, KevinMarks_

[16:09:53.0000] <zewt>
(I'm willing to make the leap of faith that no URL on the web contains a UUID that I just generated)

[16:10:19.0000] <zewt>
i guess we might be talking about different parts of web-compatible, too

[16:10:58.0000] <SamB>
zewt: oh, the one with the canvas that draws its fragment identifier

[16:11:18.0000] <zewt>
SamB: but no links actual exist with that string in it

[16:11:22.0000] <KevinMarks_>
got a link for drawing fragids on canvas

[16:11:24.0000] <KevinMarks_>
?

[16:11:43.0000] <KevinMarks_>
I can see if the chrome plugin breaks it

[16:12:04.0000] <zewt>
you might create a link in the future that wouldn't work, but there's a big difference between breaking links that someone creates after the feature is deployed (they try it and simply notice it didn't work) and breaking ones that already exist (that's what I think of for "web compat")

[16:12:21.0000] <KevinMarks_>
agreed

[16:12:27.0000] <KevinMarks_>
I don't think this breaks links

[16:12:36.0000] <KevinMarks_>
thats where we keep going in circles

[16:12:39.0000] <SamB>
Hixie: anyway, personally I either won't want to link to words on that page in the first place, or can live with the silly things it decides to draw on its canvas when I do ...

[16:12:48.0000] <Hixie>
zewt: http://damowmow.com/playground/demos/fragment-identifiers/002.html##0271a91a-86a0-4773-b042-eb535834e0d8=hello

[16:12:57.0000] <KevinMarks_>
samB quite

[16:13:21.0000] <zewt>
Hixie: but that's not breaking links that exist today (putting aside web IRC logs of this discussion), since nobody's creating links using that feature (since it doesn't exist yet)

[16:13:35.0000] <Hixie>
zewt: it means you can't use that feature on that page

[16:13:37.0000] <zewt>
right

[16:13:50.0000] <zewt>
that seems different than "web compatibility" as I understand it

[16:13:52.0000] <SamB>
Hixie: yeah, true, which is bad :-(

[16:14:02.0000] <zewt>
the feature doesn't work with the page, but the page itself isn't broken

[16:14:03.0000] <Hixie>
zewt: that seems pretty lame if we can't come up with a feature that works on all pages

[16:14:12.0000] <SamB>
but "can't use it on that page" > "can't use that page because of it", obviously

[16:14:43.0000] <zewt>
the web can be pretty lame (you know that better than me :), but "we can't do this feature perfectly" is usually not a good reason to not do it at all

[16:14:47.0000] <Hixie>
well it means that if you actually WANT to display "#0271a91a-86a0-4773-b042-eb535834e0d8=hello", you can't do it, because it would jump to the word "hello"

[16:14:55.0000] <SamB>
Hixie: yeah, that was why I said we should try to allow this along with a fragment ID, and preferably along with other ## .. = stuff

[16:15:07.0000] <KevinMarks_>
it would jump to it and display it

[16:15:16.0000] <zewt>
right

[16:15:16.0000] <SamB>
Hixie: yeah

[16:15:30.0000] <Hixie>
SamB: yeah, changing the url parsing to add a new component to urls seems like a prereq to making anything like this work, imho. but i don't know how plausible even that would actually be.

[16:15:55.0000] <zewt>
messing with location.hash is scary as hell, heh

[16:15:57.0000] <SamB>
Hixie: yeah, exactly my thinking ...

[16:16:00.0000] <KevinMarks_>
I'm all Eppur Si Muove on this working

[16:16:15.0000] <SamB>
I'm not really sure if it should be included or excluded from location.hash

[16:16:30.0000] <zewt>
SamB: that sounds like the implication from what hixie said, though

[16:16:47.0000] <Hixie>
if we change the url parsing, it should be excluded

[16:16:55.0000] <Hixie>
otherwise you haven't changed url parsing

[16:16:56.0000] <zewt>
it'd have to not be in location.hash if you want that canvas page to "just work"

[16:16:59.0000] <KevinMarks_>
empirically, being able to link by text content is really handy

[16:17:03.0000] <Hixie>
i updated the spec header again, btw. made it way tighter.

[16:17:08.0000] <Hixie>
and added a gradient

[16:17:21.0000] <Hixie>
can't wait to see the reaction of all the other whatwg spec editors when they wake up and find their specs have changed!

[16:17:25.0000] <SamB>
what API would be appropriate for accessing that portion of the URL for at least those things that the browser doesn't grok yet?

[16:17:39.0000] <Hixie>
KevinMarks_: i dunno, i think it's a bit of an esoteric feature in practice

[16:17:43.0000] <zewt>
(i don't know if any pages parse out document.location.href and ignore .hash, anything doing that is probably a lost cause)

[16:17:58.0000] <zewt>
SamB: document.location.hashhash

[16:18:15.0000] <SamB>
KevinMarks_: people have certainly been after such a thing for text/plain for ages

[16:18:24.0000] <KevinMarks_>
quite

[16:18:30.0000] <SamB>
zewt: well, but what would the "type" of that be?

[16:18:39.0000] <SamB>
[(String, String)] ?

[16:18:50.0000] <SamB>
Map String String ?

[16:18:55.0000] <zewt>
not sure, seems not hard to define but probably not worth brainstorming at this point

[16:18:58.0000] <KevinMarks_>
the html5 spec is liberally sprinkled with ids so you can link to almost any bit of it

[16:19:05.0000] <KevinMarks_>
and that is hugely useful

[16:19:08.0000] <SamB>
KevinMarks_: indeed

[16:19:16.0000] <SamB>
not necessarily any bit you'd want to, but ...

[16:19:21.0000] <KevinMarks_>
being able to do that for any web document is great

[16:19:38.0000] <zewt>
changing url parsing and document.location makes this seem like a much bigger, heavier, more dangerous feature, compared to its value

[16:19:57.0000] <KevinMarks_>
it doesn't change .location

[16:20:00.0000] <SamB>
while we're on that topic, shouldn't there be some kind of browser UI for finding a nearby anchor?

[16:20:03.0000] <KevinMarks_>
only target

[16:20:06.0000] <zewt>
sigh

[16:20:06.0000] <JonathanNeal>
Hixie: I would point to http://indiewebcamp.com/fragmention#Related_work and http://en.wikipedia.org/wiki/Fragment_identifier#Proposals are decent arguments against it being esoteric

[16:20:10.0000] <SamB>
and making a you a URL for it?

[16:20:16.0000] <zewt>
it does in a big chunk of the discussion for the last page

[16:20:46.0000] <SamB>
zewt: last page?

[16:20:55.0000] <JonathanNeal>
s/are/as

[16:21:08.0000] <zewt>
the entire "change URL parsing" discussion is about changing .location

[16:21:35.0000] <KevinMarks_>
yes, the ## stuff

[16:21:45.0000] <KevinMarks_>
that's why I say YAGNI on that

[16:21:52.0000] <Hixie>
JonathanNeal: Put it this way. I have never heard non-web-heads (i.e. "real users") ask for this feature.

[16:21:57.0000] <zewt>
please don't make up abbreviations on the spot and expect others to guess what they mean

[16:21:57.0000] <SamB>
oh, I get it, "<zewt> it does in a big chunk [...]" is a response to "<KevinMarks_> it doesn't change .location"

[16:22:10.0000] <zewt>
SamB: sometimes one wishes for threaded IRC :P

[16:22:15.0000] <Hixie>
bbiab

[16:22:21.0000] <SamB>
Hixie: why should only "real users" get features?

[16:22:22.0000] <KevinMarks_>
you weren't in the Annotations meeting i was

[16:22:42.0000] <SamB>
zewt: YAGNI isn't made up on the spot?

[16:23:06.0000] <SamB>
it's in vera; no idea why not foldoc

[16:23:09.0000] <Hixie>
SamB: http://wiki.whatwg.org/wiki/FAQ#Where.27s_the_harm_in_adding.E2.80.94

[16:23:20.0000] <SamB>
Hixie: point

[16:25:20.0000] <KevinMarks_>
this workshop: http://www.w3.org/2014/04/annotation/

[16:25:32.0000] <zewt>
my overall take is that changing URL parsing and document.location is a big, scary change that dwarfs the value of the change; the feature not working on a few pages that use hashes in unusual ways is lame but bearable (and expected--the "##" idea wasn't expected to work in every case); if people decide it's not bearable, better to drop it than to mess around with something so fundamental

[16:25:45.0000] <KevinMarks_>
was where I heard use case after use case of people wanting more robust anchors into the web

[16:25:56.0000] <SamB>
hmm

[16:26:29.0000] <zewt>
my main issue with regular anchors is I can never find them; if browsers had a "copy link to this page at the most recent anchor" (so I didn't have to go hunt down a TOC link or open the inspector) they'd be a heck of a lot more usable

[16:26:37.0000] <KevinMarks_>
yes

[16:26:46.0000] <zewt>
that would help a lot without any platform changes

[16:26:53.0000] <KevinMarks_>
but being able to point to the text is better

[16:26:57.0000] <SamB>
for a moment I was pondering actually trying to allow xlink, but then I was like "but what would be in the address bar?" so yeah not going to work ...

[16:27:08.0000] <KevinMarks_>
because that is what they are trying to do

[16:27:15.0000] <SamB>
zewt: yeah, I just mentioned that above

[16:27:25.0000] <KevinMarks_>
and in this case the address bar is very clear

[16:27:36.0000] <SamB>
"shouldn't browsers have UI to find a handy anchor and make you a link"

[16:27:41.0000] <SamB>
that's a paraphrase

[16:28:28.0000] <KevinMarks_>
they are referring to the text not the anchor

[16:29:55.0000] <KevinMarks_>
In effect, we can make you an anchor for what you select

[16:30:13.0000] <SamB>
anyway, the amount of work involved here would make it an absolute requirement that any such change allow a whole namespace of such things, not just this one "fragmentions"

[16:30:14.0000] <zewt>
we understand the difference

[16:30:40.0000] <SamB>
KevinMarks_: I was talking about better UI to make links that work today

[16:30:51.0000] <SamB>
and, well, probably also last decade

[16:31:14.0000] <SamB>
by which I mean ~2004, not 2009

[16:31:24.0000] <KevinMarks_>
so we'll stick to shipping a page of js that makes the browsers capable of doing this now then

[16:31:44.0000] <SamB>
KevinMarks_: which of course makes you part of the problem

[16:32:11.0000] <SamB>
in the sense that your scripts toes are among those that would need to be avoided in order to make such a change

[16:32:36.0000] <KevinMarks_>
not if you make this change... :D

[16:32:53.0000] <SamB>
well it sure won't happen quickly

[16:34:07.0000] <JonathanNeal>
SamB: actually, I hate that problem too, so when I wrote the script, I built in a feature test.

[16:34:12.0000] <SamB>
Hixie: so, um, does it make much difference what syntax he tries to use for this fragmentions thing? i.e. would it be better to use something like ##text= with the usual query-encoding?

[16:34:27.0000] <SamB>
JonathanNeal: how does it test for the feature?

[16:34:46.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html#phrases+as+anchors

[16:35:03.0000] <JonathanNeal>
SamB: what you could fault me for is making a feature test for a feature that doesn’t exist. The best I could do is search window.location for a fragmention property.

[16:35:03.0000] <zewt>
you could probably write to .hash and see if the location changes, but that'd be pretty intrusive

[16:35:05.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html#readable+shortcuts

[16:35:50.0000] <SamB>
JonathanNeal: pretty confident about the name, huh?

[16:36:07.0000] <JonathanNeal>
in the same way that .hash is a partial, decoded version of .href, .fragmention is a partial, decoded version of .hash.

[16:36:13.0000] <KevinMarks_>
you could see if target already matches what you were going to change it to?

[16:36:15.0000] <JonathanNeal>
SamB: like I said, fault me for that.

[16:36:21.0000] <TabAtkins>
zewt: Yeah, don't mess with .hash at all.

[16:36:44.0000] <TabAtkins>
Just let .hash continue to reflect the entire hash, then have another k/v dict populated from the ## values, like the current .query.

[16:37:05.0000] <SamB>
JonathanNeal: actually, I guess it's best if you don't really go anywhere near before some kind of consensus to use it would happen?

[16:37:05.0000] <JonathanNeal>
TabAtkins: that is what I tried to do, effectively. (see above comment)

[16:37:06.0000] <zewt>
TabAtkins: hixie's concern is that the feature wouldn't work on pages that use the hash literally (as in the "print the hash to a canvas" page)

[16:37:17.0000] <SamB>
s/near/near ##/

[16:37:28.0000] <TabAtkins>
zewt: What I just said *should* work on pages taht use the hash literally.

[16:37:32.0000] <zewt>
i don't think that's web compat, though (or at least, not "web backwards-compatibility", which is the direction I usually think of it in)

[16:37:32.0000] <TabAtkins>
That's why I suggested it. ^_^

[16:37:43.0000] <zewt>
TabAtkins: not sure what you meant, then

[16:37:46.0000] <TabAtkins>
If you want to use the hash literally, you just look at .hash.

[16:37:47.0000] <KevinMarks_>
http://sandbox.thewikies.com/fragmentions/example.html#include+the+entire+text

[16:37:52.0000] <TabAtkins>
Which is *the entire hash*, as it is today.

[16:38:00.0000] <JonathanNeal>
SamB, that’s an interesting point, though, if one of us had not made a proof of concept, I’m curious where the discussion would have gone.

[16:38:03.0000] <SamB>
TabAtkins: obviously whether to include it in .hash would merit further study

[16:38:05.0000] <KevinMarks_>
those last few links are all calls for linking to text

[16:38:28.0000] <zewt>
TabAtkins: the example was http://damowmow.com/playground/demos/fragment-identifiers/002.html##0271a91a-86a0-4773-b042-eb535834e0d8=hello

[16:38:40.0000] <SamB>
hmm, this fragmentions thing does not work with script disabled ;-P

[16:38:51.0000] <zewt>
TabAtkins: or to get rid of the weird example I made: http://damowmow.com/playground/demos/fragment-identifiers/002.html##search=hello

[16:39:14.0000] <zewt>
TabAtkins: the feature would continue to be printed to the canvas, since the ##stuff still shows up in .hash

[16:39:20.0000] <KevinMarks_>
JonathanNeal: I agree - your implementation made it clear that this worked and was useful

[16:39:26.0000] <TabAtkins>
Yeah, that would give a .hash of "#search=hello".  (Or "##search=hello", I forget whether .hash includes the initial #.)

[16:39:27.0000] <zewt>
TabAtkins: i think we can live with that, FWIW

[16:39:27.0000] <SamB>
so, would it be stupid to set up telemetry for ## ?

[16:39:29.0000] <TabAtkins>
Whatever it does today.

[16:39:51.0000] <TabAtkins>
But it woudl also give a .hashQuery of {search:["hello"]} or whatever.

[16:40:05.0000] <TabAtkins>
zewt: So yeah, what you said.

[16:40:07.0000] <SamB>
TabAtkins: hmm, so we don't want to allow repeated keys then?

[16:40:19.0000] <SamB>
or ordering between keys

[16:40:20.0000] <zewt>
TabAtkins: the ##text= idea was meant to 1: avoid collisions with links that already exist today, and 2: give programmers a way to use both this feature and their own stuff in hashes at the same time

[16:40:21.0000] <JonathanNeal>
TabAtkins: today the hash contains the #, so, location.hash = 'hello'; location.hash // '#hello'

[16:40:24.0000] <TabAtkins>
SamB: Note the value is an array, just like for query values.

[16:40:28.0000] <SamB>
oh

[16:40:31.0000] <SamB>
nevermind

[16:40:31.0000] <zewt>
not to make this new feature work on every page, which it definitely won't

[16:40:54.0000] <TabAtkins>
zewt: Not sure how waht you're saying is relevant to what I said.

[16:41:44.0000] <SamB>
oh, well, that would still not allow different handling of ##text=foo##css=:bar and ##css=:bar##text=foo

[16:41:58.0000] <SamB>
not that the former would ever make much sense ...

[16:42:12.0000] <TabAtkins>
SamB: The URL object does track those differently, I think.

[16:42:12.0000] <zewt>
SamB: i'd totally avoid repeated keys, the APIs you end up with for a multidict are uglier than for a simple dictionary for incredibly rare cases

[16:42:23.0000] <TabAtkins>
(Or if it doesn't, then probably we dont' need that for hash queries either.)

[16:42:54.0000] <SamB>
zewt: hmm

[16:42:56.0000] <zewt>
(and even rarer for this stuff, at least for the potential uses we've discussed so far)

[16:43:27.0000] <zewt>
basically this breaks the URL into three major parts: stuff for the server (path, query), client-side stuff for scripts (part of the hash), and client-side stuff for the browser (this stuff)

[16:43:37.0000] <SamB>
(oh, btw: where I said XPath above I must have been thinking of XLink)

[16:43:49.0000] <SamB>
zewt: browser or polyfill

[16:43:56.0000] <zewt>
actually backing up, i'd start with: just expose this as a string

[16:44:03.0000] <KevinMarks_>
JonathanNeal's script works fine with http://damowmow.com/playground/demos/fragment-identifiers/002.html

[16:44:19.0000] <SamB>
zewt: hmm

[16:44:25.0000] <KevinMarks_>
though you'd have to enter a lot of lines to see it do something

[16:44:47.0000] <SamB>
zewt: so like .hashhash ?

[16:44:50.0000] <zewt>
seems like a given that you want a string anyway (for reconstructing the URL in various ways); the real question is whether you *really* need a browser-parsed version of it (which I'd really leave off from this discussion, that's a detail)

[16:44:52.0000] <SamB>
would be a string

[16:45:07.0000] <SamB>
zewt: point, yes

[16:45:19.0000] <zewt>
(we're already pretty far ahead of things talking about exposing it in location at all)

[16:45:21.0000] <SamB>
you don't REALLY need a browser-parsed version

[16:45:34.0000] <JonathanNeal>
zewt: re: "URL into three major parts", it already is, remember that #anchor will do something in your browser if you have <div id="anchor">.

[16:45:56.0000] <JonathanNeal>
Sorry if you meant that and I just misunderstood you.

[16:46:00.0000] <zewt>
JonathanNeal: sort of, but that's not a distinct part of the URL vs. script stuff

[16:46:25.0000] <KevinMarks_>
o_O

[16:46:43.0000] <JonathanNeal>
It is as distinct as hash search, no? At least, my library was written to do exactly what browsers do for hash anchors.

[16:46:50.0000] <KevinMarks_>
exactly

[16:47:10.0000] <KevinMarks_>
ID already owns this namespace

[16:47:16.0000] <zewt>
today there's no way to differentiate between "the client's own special magic stuff in the hash" and "platform features in the hash"

[16:47:27.0000] <KevinMarks_>
except the bit with spaces in

[16:49:57.0000] <zewt>
nope, because pages can already put spaces in the hash for their own use

[16:50:23.0000] <zewt>
of course, they can also put "##text=foo" in the hash, but one is less likely than the other

[16:50:38.0000] <SamB>
http://url.spec.whatwg.org/#api seems kind of strangely-indented

[16:51:29.0000] <KevinMarks_>
I love that my use case is a categorical collision and yours is a statistical argument

[16:51:50.0000] <SamB>
KevinMarks_: huh?

[16:52:05.0000] <KevinMarks_>
if fragmentions had to have 10 words in, would you be happy then?

[16:52:07.0000] <KevinMarks_>
4?

[16:52:31.0000] <zewt>
to restate: "http://foo.com#post10##text=foo" gives script authors a way to encode their own data into the url for AJAX/history API use ("post10"), and also use text search (or ID links, or other things) in the same URL; no other proposal so far does that

[16:53:35.0000] <KevinMarks_>
that's not a use case

[16:53:49.0000] <zewt>
...

[16:53:59.0000] <SamB>
zewt: and with ##css=, we could finally link to individual form controls in mediawiki preferences

[16:54:14.0000] <SamB>
(or ##anchor or whatever)

[16:54:44.0000] <KevinMarks_>
I say "lots of people want to link to the text of pages" you say "some mythical developer wants to combine the history api wiht text search

[16:54:56.0000] <zewt>
wow, I've never been called mythical before

[16:55:13.0000] <SamB>
KevinMarks_: trust me, there are pages people will want to do this on that are not made up

[16:55:15.0000] <zewt>
because I'd sure like to be able to write history API pages without breaking ID links, but it's not possible

[16:55:23.0000] <SamB>
/me goes looking for some apple docs ...

[16:55:25.0000] <KevinMarks_>
aaron added fragmentions to media wiki in about 20 minutes

[16:55:28.0000] <KevinMarks_>
it's handy

[16:55:41.0000] <SamB>
KevinMarks_: that won't do what I just said though

[16:56:18.0000] <SamB>
especially considering that that part of the UI is multilingual

[16:56:47.0000] <KevinMarks_>
yes it does: http://indiewebcamp.com/Special:Preferences##New+signature

[16:57:19.0000] <KevinMarks_>
you have to sign in, mind

[16:57:22.0000] <SamB>
what if I have my UI set to klingon or something

[16:58:03.0000] <SamB>
(obviously not actually klingon, and not actually me, but it does turn out that klingon has an ISO code and everything)

[16:58:31.0000] <KevinMarks_>
whats the iso code for klingon?

[16:59:04.0000] <SamB>
I think it's tlh

[16:59:24.0000] <SamB>
anyway, consider e.g. https://developer.apple.com/library/ios/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066

[16:59:34.0000] <KevinMarks_>
what's kn?

[16:59:59.0000] <KevinMarks_>
that looks like klingon


2014-04-25
[17:00:30.0000] <SamB>
that's a fairly randomly chosen piece of documentation, but you can probably see that it's long enough that one might want to use something like fragmentions there

[17:01:36.0000] <KevinMarks_>
http://indiewebcamp.com/Special:Preferences##ಇ-ಅಂಚೆ

[17:02:19.0000] <SamB>
hmm, maybe that isn't the best example though because I guess the hash part of the URL is not terribly interesting ...

[17:03:08.0000] <zewt>
apple doc urls are a nightmare

[17:03:25.0000] <SamB>
yeah

[17:03:35.0000] <SamB>
but not seemingly a good example of the problem :-(

[17:03:47.0000] <KevinMarks_>
at least they stopped using the webobjects ones with colons in

[17:05:50.0000] <KevinMarks_>
hm, actually the chrome fragmention plugin seems to work OK in that doc

[17:06:10.0000] <SamB>
yeah, I remembered the fragments being more important there

[17:06:22.0000] <SamB>
obviously I misremembered

[17:07:32.0000] <KevinMarks_>
it certainly doesn't break their links

[17:18:05.0000] <SamB>
(Oh, how would you link to something on the Beta tab on, say, mediawiki.org -- without knowing the UI language?)

[17:19:51.0000] <MikeSmith>
is there a downloadable version of Presto-based Opera still available?

[17:24:27.0000] <MikeSmith>
nm

[17:24:34.0000] <MikeSmith>
Opera 12 I guess

[17:32:15.0000] <KevinMarks_>
SamB linking across languages is a tough usecase

[17:32:50.0000] <KevinMarks_>
the person at the annotations mtg who knew most about ti was a biblical concordance speciallist

[17:33:12.0000] <KevinMarks_>
and they have relatively well-defined cross-language anchors

[17:33:14.0000] <SamB>
well, the easy way is to use the ID, isn't it?

[17:33:38.0000] <KevinMarks_>
no, they have Matthew 12:18 type anchors

[17:34:08.0000] <KevinMarks_>
the 12:18 is in the text, and the lookup the Book name, iirc

[17:34:11.0000] <SamB>
/me meant for the MW preferences thing

[17:36:41.0000] <SamB>
or, if we actualyl want stuff like what fragmentions is actually meant for, try using them on https://groups.google.com/forum/#!topic/linux.debian.project/LBCAsdfl_ws maybe?

[17:39:09.0000] <SamB>
(nevermind that you can't read that in elinks, despite there not really being any content there that it couldn't handle tolerably ...)

[17:42:52.0000] <KevinMarks_>
is that an example of the hashbang antipattern?

[17:54:05.0000] <zewt>
"antipattern" is what people call things they don't like that they want to make sound bad, not something necessarily actually bad, so better not to call something an "antipattern" if you're not even sure if it is something or not :P

[17:54:41.0000] <tantek>
yup that's just #! hashbang anti-pattern. Google Groups needs to fix that.

[17:54:59.0000] <SamB>
KevinMarks_: it's an example of AJAX taken too far, period

[17:55:15.0000] <zewt>
(nothing wrong with that url, though the "!" seems a bit pointless)

[17:55:16.0000] <SamB>
#! might actually mitigate it somewhat for clients who have any idea what that means

[17:56:10.0000] <SamB>
I've seen other pages that had several tabs which I think a non-JS browser would just render all of

[17:56:26.0000] <zewt>
non-JS browsers are pretty irrelevant to the real world

[17:56:28.0000] <SamB>
that's not quite as bad, but it'd still be a problem for fragmentions

[17:58:23.0000] <SamB>
not so irrelevant that gmail doesn't support them ...

[17:58:54.0000] <SamB>
... though admittedly actually *getting* into basic HTML mode has had problems lately

[17:58:55.0000] <zewt>
html in email isn't a browser

[18:03:14.0000] <KevinMarks_>
now here's another variant: https://dl.dropboxusercontent.com/u/18852638/draft/silly/test.html##Brennan+Novak(Brennan+is+bnvk+on+#indieweb+and+#mailpile)

[18:12:59.0000] <MikeSmith>
TabAtkins: when you have a few minutes please let me know what should be added to the "CSS features" part of http://platform.html5.org/

[18:14:12.0000] <MikeSmith>
and what if anything should be removed

[19:06:52.0000] <MikeSmith>
Hixie: colors look nice

[19:09:52.0000] <Hixie>
:-)

[19:46:47.0000] <Hixie>
i'm amused that chrome just can't handle the gradient on the html spec and gives up

[19:46:59.0000] <Hixie>
firefox can't handle it well either, it turns into into four bands

[19:47:04.0000] <Hixie>
which actually kinda looks cool

[19:47:46.0000] <Hixie>
tempting to actually switch to that intentionally :-)

[21:56:08.0000] <JonathanNeal>
Will Chrome get HTML5 context menus? http://davidwalsh.name/html5-context-menu

[22:01:27.0000] <Hixie>
looks like the spec splitter is broken

[22:20:09.0000] <TabAtkins>
Hixie: The gradient works just fine on Chrome for me.

[22:36:23.0000] <Hixie>
TabAtkins: on teh single-page copy?

[22:37:04.0000] <TabAtkins>
Oh, haven't looked.

[22:37:11.0000] <Hixie>
works fine for me elsewhere

[23:54:09.0000] <zcorpan>
Hixie: that gradient is horrible :-P

[00:33:59.0000] <JakeA>
Domenic_: response.body will be a readable stream in SW. However, we need something akin to responseText from XHR

[00:34:05.0000] <JakeA>
Domenic_: async of course

[00:34:42.0000] <JakeA>
Domenic_: Are you planning on adding helpers like this to streams?

[00:35:05.0000] <JakeA>
Domenic_: Otherwise we'll just add them to our Response objects

[00:57:48.0000] <mathiasbynens>
Hixie: http://validators.whatwg.org/ still doesn’t resolve for me – sure that fix worked?

[01:06:52.0000] <JakeA>
http://www.downforeveryoneorjustme.com/http://validators.whatwg.org/

[01:07:01.0000] <JakeA>
It's down for me too

[01:32:18.0000] <JakeA>
https://twitter.com/bug_facts/status/457712371616608256

[01:35:48.0000] <JakeA>
Sooooo, posted THAT in the wrong channel

[01:36:00.0000] <JakeA>
Enjoy it anyway

[01:47:37.0000] <annevk>
When is someone going to take ownership of IDL?

[01:47:49.0000] <annevk>
We really need the array issues and such resolved

[01:48:36.0000] <Ms2ger>
When you do

[01:50:22.0000] <annevk>
JakeA: I think we should have helpers on streams

[01:50:42.0000] <annevk>
JakeA: e.g. a TransformStream of sorts that converts bytes to text

[01:51:09.0000] <annevk>
JakeA: although we probably need helpers on Response as well given that the decoding depends heavily on other properties of the Response object

[01:52:03.0000] <JakeA>
annevk: yeah, I guess you couldn't toBlob a stream because there's no content-type

[01:53:06.0000] <JakeA>
annevk: I think SW Response will need a getBodyText helper too, although we can deprecate it when streams land

[01:53:10.0000] <JakeA>
annevk: filed https://github.com/slightlyoff/ServiceWorker/issues/251

[01:53:20.0000] <annevk>
JakeA: you can't just add / remove methods...

[01:53:50.0000] <annevk>
JakeA: getBodyText() sounds a lot like Java

[01:54:34.0000] <JakeA>
annevk: open to other names. Needs to return a promise. Problem is, toString() is taken :D

[01:55:57.0000] <annevk>
JakeA: don't really have great suggestions either

[01:56:03.0000] <JakeA>
asText()

[01:56:05.0000] <annevk>
JakeA: <canvas> has toBlob iirc

[01:56:17.0000] <JakeA>
Sounds like Aztecs

[01:56:36.0000] <annevk>
asString might be okay

[01:56:52.0000] <JakeA>
annevk: toBlob and asString?

[01:56:53.0000] <annevk>
or bodyToString() hmm

[01:59:14.0000] <JakeA>
annevk: to(type).then()

[01:59:52.0000] <annevk>
JakeA: similar to responseType?

[01:59:59.0000] <annevk>
JakeA: not half bad

[02:00:03.0000] <JakeA>
annevk: that's what I'm thinking

[02:03:27.0000] <smaug____>
annevk: how is nobody not maintaining idl?

[02:03:51.0000] <smaug____>
s/not//

[02:03:55.0000] <annevk>
smaug____: I don't know, it's just not happening

[02:04:25.0000] <annevk>
smaug____: I think getting it up to speed would be at least several months of fulltime work and nobody has taken the time

[02:04:27.0000] <JakeA>
more like ID-hell amirite? *holds hand up waiting for high-five*

[02:04:38.0000] <smaug____>
hmm, I thought it has been updated when needed

[02:05:32.0000] <annevk>
https://www.w3.org/Bugs/Public/buglist.cgi?component=WebIDL&product=WebAppsWG&resolution=--- lists 84 bugs and quite a few are larger issues

[02:09:04.0000] <smaug____>
is there annotation for read only array

[02:09:20.0000] <smaug____>
since I guess that is what we want for event.path

[02:09:37.0000] <smaug____>
or Gecko's [frozen]

[02:09:47.0000] <annevk>
It seems what people argue for is that we should simply return a mutable array

[02:10:07.0000] <annevk>
A JavaScript Array object

[02:13:06.0000] <smaug____>
well, for event.path is should be frozen Array

[02:13:16.0000] <smaug____>
that is just a JS thing

[02:13:57.0000] <annevk>
Again, Domenic_, dherman, et al, argue it should not be frozen

[02:51:41.0000] <jgraham>
annevk: If you want those input tests fixed your should review https://critic.hoppipolla.co.uk/r/1370

[02:51:46.0000] <jgraham>
I'm not sure it's right

[02:53:58.0000] <annevk>
jgraham: looks legit, but https://github.com/w3c/web-platform-tests/pull/928#discussion_r11965914

[02:55:19.0000] <jgraham>
Yeah, I wondered about that

[02:55:48.0000] <annevk>
jgraham: I think per spec you can make it dirty by input.value = input.value

[02:56:00.0000] <jgraham>
I guess I should find a way to sort the few useful messages from the torent of spam I get from GitHub

[02:56:27.0000] <annevk>
I just found out I missed pull requests going back six months

[02:56:50.0000] <jgraham>
annevk: Doing input.value += "a"; input.value = input.value.slice(0, input.value.length - 1) or something seems better

[02:57:21.0000] <jgraham>
In the sense that I don't really trust browsers to get this right in the first case

[02:57:21.0000] <annevk>
jgraham: because?

[02:57:40.0000] <annevk>
I guess it depends on what you want to test

[02:58:02.0000] <annevk>
But in that case I'd just do temp = input.value; input.value = "x"; input.value = temp

[02:58:19.0000] <annevk>
As the slice trickery makes it look complicated

[02:59:42.0000] <jgraham>
annevk: Curiously that was almost exactly what I had just written :)

[03:00:17.0000] <jgraham>
Pushed to the review

[03:02:31.0000] <annevk>
reviewed

[03:04:00.0000] <jgraham>
Thanks

[03:04:54.0000] <annevk>
I wonder what the deal with the gradient is

[03:16:42.0000] <jgraham>
Where is this gradient?

[03:17:01.0000] <Ms2ger>
Down

[03:17:18.0000] <jgraham>
Oh wait, I wasn't getting the new stylesheets

[03:18:18.0000] <jgraham>
Well this seems to be exposing bugs in Gecko in a way that make the spec more or less unusuable

[03:19:30.0000] <Ms2ger>
jgraham, oh?

[03:20:06.0000] <Ms2ger>
Oh wow, that's ugly

[03:21:06.0000] <jgraham>
http://imgur.com/NkwmZz3

[03:22:36.0000] <jgraham>
On the multipage spec it works OK

[03:22:40.0000] <Ms2ger>
Ah

[03:22:42.0000] <jgraham>
But I really wish it didn't

[03:22:57.0000] <annevk>
hsivonen: whenever I hear you talk about crypto, it kind of sounds like we need a "Crypto Standard"

[03:23:27.0000] <jgraham>
Also most of the text in the boxes at the top overflows

[03:25:29.0000] <annevk>
hsivonen: I'm not volunteering btw

[03:25:42.0000] <zcorpan>
Hixie: i don't know if you're done with the review script, but currently it seems somewhat broken to me. if i click "more..." all that happens is that that button is replaced with a "hide" button, and clicking that makes the whole thing non-functional and no way to get it back without deleting the cookie

[03:59:33.0000] <smaug____>
why w3c bugzilla doesn't send all the bugmail it should :/

[04:00:34.0000] <annevk>
smaug____: what are you missing out on?

[04:01:27.0000] <smaug____>
comments from bug 25412

[04:01:39.0000] <smaug____>
but reading those now

[04:02:32.0000] <annevk>
:/

[04:04:37.0000] <Ms2ger>
MikeSmith, ^

[04:04:49.0000] <annevk>
so JakeA under http/https in http://fetch.spec.whatwg.org/#concept-basic-fetch we alternate on service worker / no service worker

[04:05:11.0000] <annevk>
JakeA: a response from the service worker will still have all the checks a HTTP response has too

[04:05:32.0000] <annevk>
JakeA: e.g. 301, 401

[04:06:06.0000] <annevk>
JakeA: service worker only intercepts http/https traffic

[04:06:12.0000] <annevk>
JakeA: not data or blob URLs

[04:07:45.0000] <JakeA>
annevk: would SW branch at step 7 of the http(s) steps?

[04:08:58.0000] <annevk>
JakeA: of the initial set of steps, something like that

[04:09:17.0000] <annevk>
JakeA: we haven't really detailed how uploading works

[04:09:30.0000] <annevk>
JakeA: presumably the request would arrive before all the data gets there

[04:10:16.0000] <annevk>
JakeA: I've been thinking of factoring out "upgrading a request to a proper HTTP request", "making an http request", "creating a response from an http response", etc.

[04:10:23.0000] <JakeA>
annevk: the request body in SW would be a stream. Need to get my head around what we can & can't do, and which things should tee automatically

[04:10:28.0000] <annevk>
JakeA: to make the flow a bit more apparant

[04:10:50.0000] <MikeSmith>
smaug____: dunno why it wouldn't be sending you bugmail as expected

[04:11:02.0000] <annevk>
JakeA: currently it's a bunch of paragraphs intertwined with steps, not the best

[04:11:13.0000] <JakeA>
annevk: Good to have that flow there though

[04:11:31.0000] <JakeA>
annevk: It's like… this SW thing might actually happen

[04:11:57.0000] <MikeSmith>
smaug____: I'm receiving bugmail from bug 25412 fine

[04:12:21.0000] <MikeSmith>
about 6 messages from the last two days

[04:13:33.0000] <annevk>
JakeA: yeah, took me a while to realize how badly SW needs Fetch, glad I wrote it

[04:13:40.0000] <MikeSmith>
ーMy main criterion is "A C++ implementation of this algorithm will not crash"

[04:14:13.0000] <annevk>
MikeSmith: for a tombstone

[04:14:24.0000] <MikeSmith>
heh

[04:16:42.0000] <MikeSmith>
in other news for some bizarre reason my Opera 12 won't connect to whatwg.org nor google.com

[04:19:51.0000] <jgraham>
Opera has good taste in gradients and so won't let you see whatwg specs, or other properties with which Hixie has a professional association

[04:20:05.0000] <MikeSmith>
haha

[04:20:12.0000] <MikeSmith>
I like that gradient

[04:45:17.0000] <smaug____>
MikeSmith: I _think_ the same issue with w3 bugmail has happened before

[04:45:19.0000] <smaug____>
oh well

[05:20:03.0000] <tobie__>
slightlyoff: hey, what are you using to write the service-worker spec? It's totally screwing up my toolchain. :(

[05:48:39.0000] <zcorpan>
yay errata... https://www.w3.org/Bugs/Public/show_bug.cgi?id=25290

[06:04:03.0000] <annevk>
tobie__: all the goo.gl URLs also...

[06:04:09.0000] <annevk>
not sure what is going on there

[06:05:12.0000] <zcorpan>
google, try switching it off and on again

[06:16:56.0000] <Domenic_>
JakeA: you plan to buffer the entire response body in memory? O_O that defeats the purpose of streaming it.

[06:17:17.0000] <zcorpan>
MikeSmith: looks like v.nu never implemented the "xml" restriction for <embed>

[06:17:28.0000] <annevk>
Domenic_: I think sometimes getting the response as a single string is fine

[06:17:36.0000] <Domenic_>
annevk: JakeA: yes definitely a TransformStream converting ArrayBuffer to text is in the plan

[06:17:40.0000] <annevk>
Domenic_: e.g. if you know it's small

[06:17:45.0000] <JakeA>
Domenic_: Yes, the response may be json for instance

[06:18:07.0000] <zcorpan>
MikeSmith: but it only gives a warning for foo:bar foo,bar etc, rather than an error

[06:18:14.0000] <Domenic_>
JakeA: annevk: OK, but ... if you're going to buffer the full thing anyway, then don't bother making it a stream

[06:18:30.0000] <JakeA>
Domenic_: This would be developer choice

[06:18:43.0000] <JakeA>
Domenic_: We give them a response object with a stream for the body

[06:18:48.0000] <Domenic_>
JakeA: no it's not. If the computer is buffering it all, then having it as a stream is pointless.

[06:18:57.0000] <annevk>
Domenic_: there's a big problem with Response.prototype.body and a TransformStream

[06:19:11.0000] <annevk>
Domenic_: you need other data from the Response to properly do it

[06:19:13.0000] <JakeA>
Domenic_: But we want to make it non-trivial for them to get the whole response body, if that's what they want

[06:19:30.0000] <annevk>
JakeA: there's a point to be made that as with XMLHttpRequest, the choice for what datatype you want is to be made upfront

[06:19:49.0000] <tobie__>
Agree with annevk.

[06:20:02.0000] <Domenic_>
JakeA: that's easy. readToEnd(Response.prototype.body)

[06:20:13.0000] <tobie__>
+ consistency

[06:20:14.0000] <Domenic_>
readToEnd is a reusable function that works with *all* streams

[06:20:27.0000] <Domenic_>
err, readToEnd(response.body)

[06:20:47.0000] <JakeA>
Where does that method live?

[06:20:54.0000] <Domenic_>
npm?

[06:21:00.0000] <JakeA>
:(

[06:21:29.0000] <Domenic_>
I dunno, we could add a global.streamHelpers namespace

[06:21:35.0000] <JakeA>
annevk: Maybe response.body shouldn't be a stream at all, and you'd get one via .to('stream')

[06:21:51.0000] <Domenic_>
annevk: you need headers, sure. but the body stream and the headers are separate

[06:22:03.0000] <annevk>
brb

[06:22:26.0000] <Domenic_>
annevk: In Node: var request = getThingy(); request.on('response', function (response) { console.log(response.headers); response.body.pipe(process.stdout); })

[06:23:00.0000] <Domenic_>
Now I understand if there's a sequencing problem here

[06:23:16.0000] <Domenic_>
i.e. if streams will be done/implemented after service workers (which seems possible, perhaps probable)

[06:23:22.0000] <Domenic_>
and you need something to hold you over in the meantime

[06:23:32.0000] <Domenic_>
but it will be redundant after streams land

[06:23:58.0000] <JakeA>
Domenic_: We've already got .toBlob, probably going to switch that to .to(type)

[06:24:00.0000] <Domenic_>
because nobody is going to want to use service worker's idiosyncratic way of buffering a whole stream and converting it to text

[06:24:28.0000] <Domenic_>
what does .to(type) return

[06:24:35.0000] <JakeA>
promise

[06:24:39.0000] <Domenic_>
for?

[06:24:52.0000] <JakeA>
depends on type

[06:25:07.0000] <Domenic_>
so promise for stream for example?

[06:25:16.0000] <Domenic_>
seems bad

[06:25:34.0000] <Domenic_>
here would be my vision

[06:25:37.0000] <JakeA>
Could be, although I think it's still better to reserve .body for the stream

[06:25:43.0000] <Domenic_>
nobody uses blobs ever

[06:25:57.0000] <zewt>
(what)

[06:26:13.0000] <Domenic_>
.body is a stream, when streams land

[06:26:40.0000] <Domenic_>
.to('arraybuffer') is conceptually readToEnd(response.body).then(concatAllArrayBufferSegmentsIntoOneGiantArrayBuffer)

[06:26:51.0000] <JakeA>
Domenic_: "nobody is going to want to use sw's way of buffering a whole stream to text" Really, so if I want to get some JSON from a request, people won't want to do response.to('text').then(function(text) {}), they'd rather have to npm install something to do the same thing?

[06:27:02.0000] <zewt>
the to(type) thing is ugly, don't do that

[06:27:18.0000] <Domenic_>
.to('string') is conceptually readToEnd(response.body.pipeThrough(new TextDecoderStream('utf8'))).then(concatAllStrings)

[06:27:35.0000] <Domenic_>
JakeA: yes, because the thing they install from npm will work with *any* stream

[06:28:11.0000] <JakeA>
"People won't use querySelectorAll, because they can just import Sizzle"

[06:28:19.0000] <Domenic_>
False analogy

[06:28:31.0000] <Domenic_>
It would be as if you had a QSA that only worked on SVG

[06:28:35.0000] <Domenic_>
and Sizzle worked on any DOM

[06:30:07.0000] <Domenic_>
oh and implicit in that vision was that response.body is a stream of arraybuffers because that is the primitive

[06:30:11.0000] <JakeA>
Well in this case, Sizzle works in more browsers than QSA

[06:30:25.0000] <Domenic_>
we're talking about the far-future

[06:30:34.0000] <Domenic_>
where both streams and SW are there

[06:30:40.0000] <Domenic_>
so people are now faced with a choice

[06:30:47.0000] <Domenic_>
something that they have to remember to look up for SW

[06:30:51.0000] <Domenic_>
or something that works for every stream in the same way

[06:31:14.0000] <Domenic_>
and that they already use for lots of other things in their code

[06:32:12.0000] <JakeA>
Hmm, this is a lot of future-prediction. Aside from that, SW is likely to land before streams, and we need to offer a way for people to get at response/request bodies

[06:33:04.0000] <JakeA>
We've reserved .body for a readable stream

[06:33:04.0000] <Domenic_>
yes, as i said, that's fine. there is a sequencing problem. but they will be conceptually vestigal after streams land, and---i predict---perceived as legacy vestiges.

[06:33:38.0000] <Domenic_>
yay :)

[06:33:49.0000] <JakeA>
I'm not confident in that prediction, but it doesn't matter

[06:34:02.0000] <Domenic_>
agreed

[06:34:19.0000] <Domenic_>
i would urge you to not have any blobs in new APIs and just use ArrayBuffers

[06:34:35.0000] <Domenic_>
i might be missing something. but ArrayBuffers are JS's binary type.

[06:35:14.0000] <zewt>
not a good suggestion; both Blobs and ArrayBuffers are useful and serve different purposes

[06:35:21.0000] <Domenic_>
and blobs have lots of problems regarding racy weak-ref sematnics

[06:35:38.0000] <zewt>
no they don't...

[06:35:39.0000] <Domenic_>
zewt: educate me. what purpose do Blobs serve that ArrayBuffers do not serve.

[06:35:54.0000] <JakeA>
zewt: What's wrong with .to(type)? The intention is to offer something like .responseType and .response in XHR, but not that awful

[06:35:56.0000] <Domenic_>
yes, they do. we were just going over them in TAG.

[06:36:25.0000] <Domenic_>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25081

[06:36:33.0000] <zewt>
being able to represent data that's stored on disk, which can't be accessed synchronously, and (as a corrolary to that) being able to represent large blocks of data which need to be splashed to disk

[06:36:56.0000] <Domenic_>
The former is Promise<ArrayBuffer>

[06:37:03.0000] <Domenic_>
the latter is arrayBuffer

[06:37:35.0000] <zewt>
blob reading is underdefined, but that's not an inherent problem with blobs themselves (and it's being worked on)

[06:37:55.0000] <zewt>
that doesn't make sense at all

[06:38:35.0000] <tobie__>
JakeA: why `to("type")` instead of `toType`?

[06:38:36.0000] <zewt>
if you get a File from a user via <input>, you don't want a callback system wrapping ArrayBuffer, you want a File (a Blob)

[06:38:56.0000] <Domenic_>
what purposes does a File serve that an ArrayBuffer does not.

[06:39:03.0000] <Ms2ger>
.name

[06:39:17.0000] <Domenic_>
{ name, data } done

[06:39:29.0000] <zewt>
structured clone wouldn't work, which things like postMessage and IndexedDB depend on

[06:39:44.0000] <Domenic_>
structured clone works fine with ArrayBuffers

[06:39:51.0000] <Domenic_>
and works fine with shallow objects containing arraybuffers

[06:39:53.0000] <zewt>
it seems like you don't have a basic understanding of what Blob is if you think it can be replaced with a callback to ArrayBuffer

[06:40:04.0000] <Domenic_>
that's possible, but nobody here is saying anything otherwise

[06:40:13.0000] <Domenic_>
it appears to be a binary data type with strictly less features than arraybuffer

[06:41:27.0000] <zewt>
if you have a File pointing to a user-space file, you can stash the File object in History API (via structured clone), and reload it later after the session is restored, regaining access to the file (as long as it hasn't changed), without the UA having to make a deep copy of the file

[06:41:37.0000] <JakeA>
tobie__: That's the other option, but if they're going to be legacy (as Domenic_) suggests, I'd rather have one method than more than one. Also, naming the function that gives you a string is tough :D

[06:41:50.0000] <zewt>
i don't begin to see how that could map to a callback to a bunch of ArrayBuffers

[06:42:29.0000] <zewt>
you can seek into a Blob to read an arbitrary subset, without reading unwanted stuff from disk; same

[06:42:47.0000] <Domenic_>
zewt: ArrayBuffers and blobs are both things that can be transferred without making deep copies. What about blobs gives them this capability that you claim array buffers don't have?

[06:43:47.0000] <Domenic_>
hmm, seeking is interesting. thanks, that is compelling. although it sounds like the concept of "file handle" and "binary data" have been conflated into the blob concept.

[06:44:11.0000] <zewt>
if you store a File pointing to a user's document, the UA can simply internally store something like { type: "File", path: "c:/Documents/resume.txt", mtime: 12345 /* don't allow access if the mtime changes */ }, and later restore the File from that

[06:44:27.0000] <Domenic_>
ok, so *File*s have special capabilities

[06:44:30.0000] <Domenic_>
*Blob*s do not

[06:44:50.0000] <zewt>
no, File == Blob, except for a bit of extra data (the filename)

[06:44:52.0000] <Domenic_>
And that's still an optimization

[06:44:56.0000] <zewt>
(i think they should be the same type)

[06:45:08.0000] <Domenic_>
You could do the same with a file-backed arraybuffer

[06:45:23.0000] <zewt>
not preemptively reading or making a copy of a 500 GB file from disk is not an optimization in any practical sense

[06:45:59.0000] <Domenic_>
file handles as a use case is interesting, i agree

[06:46:07.0000] <zewt>
(okay, too many zeroes in that example)

[06:46:09.0000] <Domenic_>
if i think of the only use case for blobs as being to represent seekable file handles, that's fine

[06:46:25.0000] <Domenic_>
but e.g. using them to represent http responses is just weird

[06:46:55.0000] <zewt>
depends on the case

[06:47:14.0000] <zewt>
i agree there are fewer cases where it's optimal for that

[06:47:19.0000] <Domenic_>
(i appreciate you being willing to stick with me until i got it.)

[06:47:54.0000] <zewt>
only a few more minutes before I have to head to work, so I have a time cap :)

[06:48:50.0000] <zewt>
there are probably better examples, but: reading a 100 MB archive from the server (say, game data), then reading data out of it (loading textures for the game)

[06:49:25.0000] <zewt>
with Blob, the UA can read the big file to disk (it may not even have enough memory to store all that live); when you slice out the pieces you need it reads just the data you ask for

[06:49:51.0000] <zewt>
ArrayBuffer can never stash data on disk, because it can be accessed synchronously

[06:50:19.0000] <Domenic_>
with streams, you get to choose explicitly ;)

[06:50:30.0000] <zewt>
one other thing Blob allows is shallow copies when posting to Workers, since it's immutable (ArrayBuffer *might* be able to do that, if there was a way to mark it read-only...)

[06:50:56.0000] <zewt>
choosing that should be up to the UA (which knows how much memory it has, etc)

[06:50:57.0000] <Domenic_>
ArrayBuffers are transferable already

[06:51:09.0000] <zewt>
transferable isn't a shallow copy, it's moving the data outright

[06:51:18.0000] <Domenic_>
Ah I see

[06:51:40.0000] <zewt>
you can post a Blob to 10 workers, say to give a copy of data to a bunch of helpers without making 10 full copies

[06:53:28.0000] <Domenic_>
frozen arraybuffers are a thing, yeah. but i doubt UAs do the shallow copy today

[06:54:32.0000] <Domenic_>
plus lots of people hate freeze because it only works in certain specific cases. ArrayBuffers happen to be one of those cases, but the distaste remains.

[06:55:00.0000] <annevk>
Domenic_: what I meant was that the headers influence the processing of the body

[06:55:19.0000] <annevk>
Domenic_: so if you just pipe the body, you lose things such as encoding, MIME type

[06:59:14.0000] <Domenic_>
annevk: that's a good point. there are workarounds of course but you would ideally want `res.body.pipeThrough(new AutoTextDecoder())` to be able to consult the headers. Instead of e.g. `res.body.pipeThrough(new TextDecoder(res.headers.get('Content-Encoding')))` (and I assume that the defaulting logic for that if no header is supplied is some horrendeous

[06:59:14.0000] <Domenic_>
encoding-spec thing.)

[06:59:32.0000] <zewt>
cringe

[07:02:51.0000] <annevk>
Domenic_: yeah, a Blob has that advantage over a stream or ArrayBuffer

[07:03:06.0000] <annevk>
Domenic_: it carries a MIME type with an optional charset parameter

[07:03:19.0000] <zewt>
annevk: strictly speaking, ArrayBuffer could carry any of the metadata that Blob and File do

[07:03:52.0000] <annevk>
Yeah, a Blob could be a promise for an ArrayBuffer I suppose, except for the readonly aspect

[07:03:58.0000] <zewt>
(which might not be a bad idea, to bring the data models closer together)

[07:04:22.0000] <zewt>
(though I'd really try to merge File down into Blob first)

[07:05:56.0000] <Domenic_>
It sounds like promise for ArrayBuffer doesn't have seeking.

[07:06:26.0000] <zewt>
also compositing blobs together is easy and efficient

[07:08:40.0000] <annevk>
A blob sucks though

[07:08:59.0000] <annevk>
The biggest problem is the fixed size

[07:09:18.0000] <zcorpan>
aaargh. i spent so long debugging why there were 0 tests run. turned out i forgot setup({explicit_done:true}) and created my tests onload :-(

[07:09:22.0000] <annevk>
And synchronous availability of that size

[07:09:38.0000] <zewt>
blobs represent immutable data, so it's fine that it's fixed, but yes, it's lame that the property is sync

[07:12:43.0000] <jgraham>
zcorpan: :(

[07:13:02.0000] <jgraham>
Maybe if there were no tests it should give some helpful hints

[07:13:34.0000] <zcorpan>
or if it tries to create tests after the harness thinks it's done?

[07:14:53.0000] <annevk>
JakeA: maybe we should not use fetch() for the API where you need to read the response

[07:15:01.0000] <annevk>
JakeA: but instead something like fetchJSON()

[07:15:23.0000] <annevk>
JakeA: or fetchString()

[07:16:07.0000] <annevk>
JakeA: and those would take care of doing the proper decoding and just hand you back a promise with the JSON object or string (or maybe something slightly more complicated that also exposes some other data from the response)

[07:16:59.0000] <JakeA>
annevk: Do those methods mask the status etc of the request?

[07:17:16.0000] <annevk>
JakeA: response?

[07:17:23.0000] <annevk>
JakeA: depends on what we want

[07:17:25.0000] <JakeA>
yes, sorry

[07:17:48.0000] <Domenic_>
annevk: that makes a decent amount of sense to me given that it encapsulates a lot of encoding-spec and fetch-spec complexity

[07:18:17.0000] <Domenic_>
e.g. i assume fetchString() is actually quite a lot of code on top of raw fetchArrayBufferSegments()

[07:19:12.0000] <annevk>
It might not be that much as I'd force it to be utf-8

[07:19:16.0000] <Domenic_>
haha

[07:20:20.0000] <Domenic_>
General comment: I don't mean to push streams too much as the panacea. I think they will solve lots of problems because they have done so in Node pretty well. But I realize I'm all talk at this point, and so am totally fine with skepticism and "interim" solutions until I can convert that talk into actual results.

[07:25:16.0000] <JakeA>
Domenic_: I'm not skeptic about streams at all. My concerns are around saying "Hey devs, this new fetch method is way better than XHR. If you want to get some JSON, just call fetch('yourjson.json').then(… then import some libraries from NPM…"

[07:26:09.0000] <annevk>
JakeA: I think we should offer things like fetchJSON if we want to compete with libraries

[07:26:18.0000] <Domenic_>
Why do you want to compete with libraries?

[07:27:00.0000] <annevk>
Domenic_: less to reason about what is going amiss

[07:27:01.0000] <zewt>
developers should never need libraries for common things (like "get some JSON")

[07:27:44.0000] <annevk>
Domenic_: I actually wanted to ask you if you're still thinking of developing JSIDL or IDL or some such

[07:28:04.0000] <annevk>
Domenic_: as IDL not being maintained is a pain and "just describe it in prose" is massive ugh

[07:28:14.0000] <JakeA>
annevk: branching at that point seems weird to me, response processing feels separate to making the request

[07:29:05.0000] <JakeA>
It's less about competing with libraries & more about making the common stuff easier. We're not doing this with SW, because we don't know what the common things are, but we do know people like to fetch json

[07:29:38.0000] <annevk>
JakeA: XMLHttpRequest and many libraries do the same though

[07:30:27.0000] <JakeA>
annevk: I thought you saw XHR as legacy? (I thought you said that when I asked for .send to return a promise)

[07:30:44.0000] <JakeA>
So the new thing, fetch() shouldn't regress on the old thing in terms of ease-of-use

[07:31:13.0000] <jgraham>
JakeA++

[07:31:55.0000] <annevk>
JakeA: yes, however, I don't think overloading the new thing for many different scenarios is the best solution

[07:32:13.0000] <annevk>
JakeA: if you look at libraries they offer different fetch methods for the common cases

[07:32:16.0000] <jgraham>
It's not clear to me that there are many different scenarios

[07:32:27.0000] <Domenic_>
not regressing is a pretty good line to draw

[07:32:42.0000] <annevk>
jgraham: euh

[07:32:50.0000] <jgraham>
annevk: Depends which libraries.

[07:33:43.0000] <JakeA>
annevk: The libraries also fail on 404

[07:35:07.0000] <Domenic_>
that's an interesting usability question

[07:35:16.0000] <annevk>
JakeA: ugh

[07:35:31.0000] <JakeA>
(btw, I don't think fetch() should fail on 404)

[07:35:46.0000] <Domenic_>
should it fail on 500?

[07:36:00.0000] <annevk>
JakeA: to go back a few steps; there was a case made when .responseType was introduced, that it was supposed to be settled before the response body came streaming in

[07:36:10.0000] <Domenic_>
people will have to install something from npm to get fail on 404... ;)

[07:36:14.0000] <annevk>
JakeA: to allow for UA optimizations

[07:36:21.0000] <annevk>
JakeA: is that no longer needed?

[07:36:29.0000] <Domenic_>
^ key question

[07:36:39.0000] <JakeA>
Domenic_:  if (r.status != 200) throw Error("Nah")

[07:36:58.0000] <annevk>
Domenic_: it fails on "network error", see Fetch

[07:37:20.0000] <annevk>
Domenic_: anything else is a successful fetch, but might be failure on the protocol level

[07:37:29.0000] <Domenic_>
i was being kind of silly. let's talk about the UA optimizations. that's more interesting.

[07:38:02.0000] <Domenic_>
IN THEORY the UA shouldn't be able to optimize any better than giving the raw data to JS and letting JS optimzie

[07:38:09.0000] <annevk>
I think it mostly came down to being able to decide what kind of object was going to be used as output before the output arrived

[07:38:23.0000] <JakeA>
annevk: I'm unaware of the optimisation thing. I'd assumed it was because .response would change type as new formats were added, and that would be baaaad

[07:38:24.0000] <Domenic_>
I feel that if the UA can optimize better then either (a) it's a matter of raw language primitives that JS is lacking; or (b) the API is not good enough.

[07:38:52.0000] <Domenic_>
(i.e. the API does not expose enough of the lower-level things JS code needs to be able to do things fast.)

[07:39:25.0000] <Domenic_>
(a) is worrying but i imagine maybe you can't get any faster than blitting response data into an ArrayBuffer backing store?

[07:40:40.0000] <annevk>
JakeA: well, say if you do to(x)

[07:41:15.0000] <annevk>
JakeA: first I do to("json") and then I do to("text") on the same response, that would not allow for said optimizations

[07:41:16.0000] <JakeA>
annevk: yeah, I'm seeing issues with the enum thing. Although to('unknown type') could reject

[07:41:43.0000] <JakeA>
annevk: Oh I see, true

[07:41:59.0000] <annevk>
The optimization being that you directly parse into JSON upon getting the bits and lose the original data

[07:42:29.0000] <JakeA>
annevk: I'm absolutely knowledgeless about the optimisation history of responseType

[07:42:43.0000] <Domenic_>
but. is parsing json from a C++/Rust buffer faster than parsing it in JS from an ArrayBuffer?

[07:42:52.0000] <Domenic_>
Seems probable :-/

[07:42:55.0000] <annevk>
JakeA: we designed responseType, because responseXML, responseText, et al was such a mess

[07:43:25.0000] <annevk>
JakeA: and only allowed for lazy optimization, and you'd still have to keep enough data around

[07:43:38.0000] <annevk>
Domenic_: JSON.parse() exists

[07:44:15.0000] <Domenic_>
annevk: I think that's at a whole different level than a byte-by-byte parser...

[07:44:17.0000] <JakeA>
annevk: Would need to define if to ends or tees the stream

[07:44:25.0000] <JakeA>
if `to`

[07:44:53.0000] <annevk>
JakeA: we could do that to() only works the first time you invoke it

[07:45:05.0000] <annevk>
JakeA: which kinda allows for most of the desired optimizations

[07:45:11.0000] <Domenic_>
this seems good

[07:45:18.0000] <annevk>
JakeA: it's not very promise-y maybe

[07:45:26.0000] <Domenic_>
it's stream-ey though

[07:45:34.0000] <annevk>
promis-ey?

[07:45:40.0000] <annevk>
hmm

[07:45:45.0000] <Domenic_>
if you desugar that to streams the most natural way it would indeed consume the stream

[07:45:51.0000] <JakeA>
Well, it'd be streamy the other way too, it'd be teeing it right?

[07:46:02.0000] <JakeA>
(am I using the right terminology?)

[07:46:08.0000] <Domenic_>
yeah it would be, and yeah you are

[07:46:15.0000] <Domenic_>
but introducing a tee is an extra step

[07:46:22.0000] <annevk>
JakeA: we could further say that if you invoke .to .body is set to null

[07:46:28.0000] <Domenic_>
no

[07:46:31.0000] <annevk>
that might not mean much

[07:46:37.0000] <JakeA>
annevk: Nah, it's just an exhausted stream

[07:46:42.0000] <Domenic_>
.body will be an in-the-process-of-being-read stream

[07:46:47.0000] <JakeA>
or that

[07:46:51.0000] <Domenic_>
it will be exhausted when the promise fulfills

[07:47:02.0000] <annevk>
what if you read from .body and the invoke .to?

[07:47:10.0000] <JakeA>
to would reject

[07:47:12.0000] <Domenic_>
no

[07:47:15.0000] <annevk>
or invoke .to and read from body?

[07:47:20.0000] <Domenic_>
it would give you the JSON representation of the rest of the body

[07:47:28.0000] <Domenic_>
which would probably be a SyntaxError

[07:47:35.0000] <JakeA>
oh I see

[07:47:45.0000] <Domenic_>
if you invoke .to and .read() from the body they're going to interfere with each other pretty badly

[07:47:48.0000] <JakeA>
Is there a way to tell if you're getting the first bytes of a stream?

[07:47:49.0000] <Domenic_>
but think of this in terms of desugaring

[07:48:04.0000] <JakeA>
like a current position, or something

[07:48:18.0000] <JakeA>
because to() could throw if that isn't zero

[07:48:35.0000] <annevk>
Domenic_: normally we defend somewhat against such errors

[07:48:52.0000] <Domenic_>
annevk: OK, as long as it's thought of in terms of defense, that makes sense to me.

[07:48:54.0000] <JakeA>
(by throw I mean reject)

[07:49:11.0000] <Domenic_>
JakeA: not in the base stream interface (since bytes are not necessarily a concept at that level). But byte streams could easily add such a property.

[07:49:15.0000] <annevk>
Domenic_: if someone has a use case we could allow it I suppose

[07:49:42.0000] <Domenic_>
annevk: I feel like .read() + .to() might have a use case, but the reverse I can't think of one.

[07:49:50.0000] <annevk>
Domenic_: so the only thing that remains then is how to pass additional info along with a stream

[07:50:08.0000] <annevk>
Domenic_: so you have bytes + encoding for instance which a TransformStream can use if needed

[07:50:10.0000] <Domenic_>
annevk: yeah, I am thinking on that. will open an issue.

[07:50:35.0000] <Domenic_>
the model right now is that the destination doesn't know about what's being piped to it. the pipe just writes into it like anyone else

[07:51:02.0000] <Domenic_>
but this is a clear use case motivating the ability to either tell the destination metadata first, or have the destination query the source

[07:52:26.0000] <Domenic_>
in node this is handled fairly jankily. source does dest.emit('pipe', source) when piping begins.

[07:52:59.0000] <annevk>
great

[07:53:16.0000] <annevk>
I feel like we made some progress on this API

[07:56:26.0000] <JakeA>
People who leave writing talks late: I do not know how you survive

[08:04:35.0000] <Domenic_>
not all of us have fancy explosions in our talks jake ;)

[08:04:58.0000] <JakeA>
I'm using that joke again. I leaned how to do repeats at the BBC

[08:05:54.0000] <annevk>
I wonder if we can turn JakeA into some kind of media element

[08:06:14.0000] <annevk>
Play, pause, repeat

[08:06:49.0000] <JakeA>
As long as I inherit from stream, I get exhausted a lot

[08:07:08.0000] <JakeA>
especially after a small amount of exercise

[08:08:19.0000] <annevk>
pub.pipe(jake).pipe(bed).pipe(talk).repeat()

[08:08:33.0000] <JakeA>
haha

[08:08:43.0000] <annevk>
(Obvious disclaimer: I have no idea what I'm doing)

[08:09:40.0000] <JakeA>
I need a t-shirt with that. Or "cheerfully incompetent"

[08:11:05.0000] <jgraham>
TypeError: sessionStorage is null

[08:11:08.0000] <jgraham>
WTF?

[08:11:35.0000] <JakeA>
that in "private browsing"?

[08:11:56.0000] <jgraham>
No

[08:11:58.0000] <jgraham>
http://w3c-test.org/websockets/unload-a-document/001.html

[08:12:00.0000] <jgraham>
In gecko

[08:15:57.0000] <Domenic_>
wow the new html spec buttons look like shit at 2560x1440. they looked great at 1600x900 on my work computer.

[08:16:58.0000] <jgraham>
They look like shit at 1600x900 on my computer

[08:17:06.0000] <jgraham>
So much for device independence!

[10:30:17.0000] <Hixie>
mathiasbynens: the fix was to fix the link to point to the right url :-)

[10:32:23.0000] <Hixie>
Domenic_: send me a screenshot showing the "looks like shit"? (i made them all smaller, maybe that's the difference?)

[10:32:48.0000] <Hixie>
jgraham: if you have a better idea, let me know! i'm scraping the bottom of the barrel for ideas for making the top of the spec more approachable

[10:33:06.0000] <Domenic_>
Hixie: it's the way they spread wayyy across the window instead of being a 3x3 grid

[10:33:29.0000] <Hixie>
yeah that's intentional

[10:33:45.0000] <Hixie>
the 3x3 grid was making weird optical artefacts and taking way too much room

[10:36:14.0000] <jgraham>
Hixie: It's hard to imagine how it could look worse than http://i.imgur.com/NkwmZz3.png

[10:36:26.0000] <jgraham>
Which is the single page spec on my computer

[10:36:42.0000] <jgraham>
(after a bit of scrolling and hovering)

[10:36:52.0000] <Hixie>
well that's just a bug

[10:37:04.0000] <jgraham>
No

[10:37:07.0000] <jgraham>
It's a bug

[10:37:18.0000] <Hixie>
i mean it's a bug with the browser, not the page

[10:37:18.0000] <jgraham>
(that we can easilly avoid by not having the gradient)

[10:37:27.0000] <jgraham>
and it's bad design of the boxes

[10:37:33.0000] <jgraham>
(the overflowing text)

[10:37:53.0000] <Hixie>
ooh, the overflowing text is interesting

[10:37:59.0000] <Hixie>
i guess you don't have Helvetica Neue

[10:38:11.0000] <Hixie>
what's a good font on your system that's sans-serif and narrow?

[10:38:47.0000] <jgraham>
And bad design in general (the use of underline at least, possibly the choice of colours, the drop shadow)

[10:39:11.0000] <jgraham>
(I am not a designer, so that might not be a useful critique, but those elements seem bad to me)

[10:40:17.0000] <jgraham>
I have no idea. Surely the boxes should make sure they are wide enough for the contained text

[10:41:53.0000] <Hixie>
obviously opinions differ on whether the general approach is ugly, but since i'm out of other ideas, the only way i can make progress on that is if someone gives a better idea

[10:42:03.0000] <Hixie>
the boxes are fixed-width so that they line up in a grid

[10:42:14.0000] <Hixie>
CSS doesn't to my knowledge give me a way to set all of them to the max of their needed widths

[10:42:23.0000] <Hixie>
though that certainly would be nice

[10:42:40.0000] <jgraham>
Well then I guess you need a script

[10:43:05.0000] <Hixie>
(note that the general style here is very similar to what whatwg.org has had for years)

[10:43:21.0000] <jgraham>
But I think I have given concrete suggestions (remove the gradient, the drop shadow, and the underline)

[10:43:41.0000] <Hixie>
the gradient is cool, the drop shadow is cool, and the underline is needed to show it's a link :-P

[10:43:49.0000] <jgraham>
no, no, no

[10:44:19.0000] <Hixie>
i mean, this is all aethetics, so it's hard to really argue one way or the other

[10:44:38.0000] <Hixie>
i actually prefer the gradient that firefox does on the single-page spec

[10:44:43.0000] <Hixie>
just four bands

[10:44:47.0000] <Hixie>
might switch to that intentionally

[10:47:38.0000] <zewt>
Hixie: google's search results suddenly stopped underlining the main link ... drives me crazy

[10:47:48.0000] <Hixie>
agreed

[10:47:52.0000] <zewt>
hard to read

[11:01:03.0000] <Hixie>
man, gradients in blink are all kinds of buggy

[11:03:34.0000] <jsbell>
Has anyone made (spec, implementation) headway on "replace DOMError with DOMException" ?

[11:29:00.0000] <smaug____>
what has happened to the html spec

[11:30:02.0000] <smaug____>
uh, dom spec has the same odd background

[11:30:32.0000] <smaug____>
green text with dark gray background isn't too easy to read

[11:30:37.0000] <Hixie>
i'm playing with the spec style sheet. i'm not finding something i like, though. so if you have any ideas, do let me know :-)

[11:30:56.0000] <Hixie>
it shouldn't be a dark grat background

[11:31:01.0000] <Hixie>
can you send me a screenshot?

[11:31:03.0000] <Hixie>
gray

[11:31:23.0000] <smaug____>
not too dark

[11:31:25.0000] <Hixie>
(if you're using chrome, chrome has all kinds of bugs with this)

[11:32:03.0000] <smaug____>
oh, it looks totally different in chrome

[11:32:20.0000] <smaug____>
are you perhaps using some old blink/webkit only gradient syntax?

[11:32:27.0000] <Hixie>
no

[11:32:30.0000] <Hixie>
firefox renders it right

[11:32:34.0000] <Hixie>
chrome gets it all wrong

[11:33:09.0000] <smaug____>
anyhow, what is wrong with the old background?

[11:33:19.0000] <Hixie>
nothing, particularly.

[11:33:23.0000] <smaug____>
or are you just making the test case harder to load in browsers

[11:33:25.0000] <Hixie>
just seeing if i can find something better.

[11:33:27.0000] <smaug____>
s/harder/slower/

[11:33:29.0000] <smaug____>
:)

[11:33:31.0000] <KevinMarks_>
did the spec just turn into an acid test?

[11:33:49.0000] <Hixie>
the initial reason for playing with the background was that i was trying to find a way to remove the weird artefacts between the buttons on the html spec

[11:34:01.0000] <smaug____>
KevinMarks_: it has never been an acid test, but something more useful

[11:34:02.0000] <Hixie>
but those are gone by just making the buttons smaller, now

[11:34:28.0000] <Hixie>
/me goes back to the smooth gradient

[11:34:46.0000] <smaug____>
in chrome I see a smooth gradient

[11:34:52.0000] <smaug____>
but oddly slow scrolling speed

[11:35:16.0000] <Hixie>
chrome's a disaster

[11:35:19.0000] <Hixie>
trying zooming in and out

[11:35:31.0000] <Hixie>
or selecting text

[11:36:32.0000] <Hixie>
and the bands are the wrong widths

[11:36:36.0000] <Hixie>
and sometiems it's at the wrong angle

[11:36:39.0000] <Hixie>
and it repaints badly

[11:37:16.0000] <smaug____>
Hixie: so I was going to look at the spec and what it says about img elements and img loading in case the element is from a document which isn't in any current/active browsing context

[11:37:35.0000] <smaug____>
looks like blink just doesn't let one to load a new image using such img element

[11:37:42.0000] <smaug____>
gecko doesn't have such limitation

[11:37:52.0000] <Hixie>
this is an img that's in a browsing context but not active?

[11:38:06.0000] <smaug____>
right

[11:38:12.0000] <smaug____>
say, img element from an iframe

[11:38:20.0000] <smaug____>
and then iframe is removed from its parent doc

[11:38:50.0000] <Hixie>
the iframe in that case loses its browsing context, no?

[11:38:56.0000] <smaug____>
or a new page is loaded to the iframe or so

[11:39:07.0000] <smaug____>
Hixie: right

[11:39:08.0000] <Hixie>
"When an iframe element is removed from a document, the user agent must discard the nested browsing context."

[11:39:20.0000] <Hixie>
so there the img wouldn't have a browsing context at all

[11:39:26.0000] <Hixie>
not just not an active document in a browsing context

[11:40:05.0000] <smaug____>
well, what about the case when a new page is loaded to the iframe

[11:41:19.0000] <Hixie>
looks like the spec is unclear on all this

[11:41:54.0000] <Hixie>
if there's no browsing context, "fetch" doesn't do anything. if there's a browsing context and it's not active, "fetch" queues up the tasks but they don't do anything until the document is active.

[11:42:19.0000] <Hixie>
so the img would suddenly update when you navigate back to that page in the session history, in theory

[11:42:23.0000] <Hixie>
which seems unlikely to match browsers

[11:42:31.0000] <Hixie>
but who knows

[11:42:34.0000] <Hixie>
i haven't tested it

[11:43:15.0000] <smaug____>
blink say something like "request cancelled" or some such in the console

[11:44:05.0000] <smaug____>
hmm, but ok, queuing makes sense, possibly

[11:50:39.0000] <Hixie>
i'm soon going to be rewriting the img loading section, so if this needs to be adjusted, now's a good time to do it

[11:58:59.0000] <jgraham>
Hixie: In the interests of being constructive, I think http://imgur.com/zhxdXcC is an improvement

[11:59:20.0000] <jgraham>
Although that brown is still particularly ugly

[12:19:59.0000] <KevinMarks_>
you could just make it a 2048 clone and use their colours

[12:26:07.0000] <Hixie>
jgraham: that's too big, though. takes up so much room that you can hardly see any of the ToC on anything but a big screen.

[12:26:15.0000] <Hixie>
jgraham: (it's more or less what we had yesterday)

[12:26:49.0000] <Hixie>
jgraham: (also i can't tell that those are links)

[12:27:24.0000] <Hixie>
jgraham: (and it suffers from the intersection optical illusion problem that i was trying to get rid of with the gradient)

[12:29:43.0000] <Hixie>
jgraham: (also, the green isn't whatwg green and the other colours are a bit bright... we were trying to make them darker yesterday because people complained about it being too in your face)

[12:35:38.0000] <jgraham>
Hixie: Being able to see the ToC isn't very useful anyway. The brightness is intentional because your colours are really ugly and muddy. There's a reason that no one makes UIs in dark colours. Also I think it is quite easy to guess that they are links. I mean at least as easy as it is to guess that the android/iOS/windows UI elements for launching applications are clickable

[12:36:13.0000] <jgraham>
the green is the same hue/saturation but 50% brighter

[12:36:24.0000] <Hixie>
lots of UIs are dark

[12:37:29.0000] <jgraham>
Pretty sure the lat time I saw that teal colour in a UI was a non-default windows 3.1 theme

[12:37:45.0000] <Hixie>
the launcher on Android uses icons, with a pictures and a label, which has a long history of being clickable. Here we're making things look just like labels.

[12:37:49.0000] <Hixie>
i don't think there's a parallel.

[12:38:34.0000] <Hixie>
my mail client, my irc client, and my editor all have black backgrounds. Can't get much darker than that.

[12:39:07.0000] <Hixie>
the buttons at the top of http://www.apple.com/ are dark

[12:39:24.0000] <Hixie>
(and don't look clickable, but that's another story)

[12:39:28.0000] <jgraham>
OK, let me rephrase

[12:39:34.0000] <jgraham>
Those colours are ugly

[12:39:46.0000] <jgraham>
Brighter colours are less ugly

[12:39:55.0000] <Hixie>
yesterday jcgregorio argued the opposite.

[12:39:55.0000] <jgraham>
Your boxes don't look clickable

[12:40:15.0000] <Hixie>
no, the boxes don't. but the text is underlined, so the text is obviously a link.

[12:40:19.0000] <IZh>
Hi all. Is it possible to make SVG elements to have relative coordinates (to previous element). I want to implement collapsible tree control (where you can expand items by clicking on [+]). I consider html+canvas and svg. In html it's not easy to draw. But in svg it's hard to make simething to collapse like in html (display: none). In svg it's possible to make things like display:hidden.

[12:40:19.0000] <jgraham>
No

[12:40:32.0000] <jgraham>
There is nothing about your text that says link to me

[12:40:44.0000] <Hixie>
ok

[12:40:55.0000] <Hixie>
if underline doesn't mean "link" to you, i don't know what to say

[12:41:21.0000] <jgraham>
Huge amounts of the web doesn't use underline for links anymore

[12:41:21.0000] <Hixie>
anyway, i'm not a fan of this whole box approach

[12:41:30.0000] <Hixie>
huge amounts of the web suck :-)

[12:41:38.0000] <IZh>
+1

[12:41:39.0000] <jgraham>
Because it's ugly and makes the text hard to read

[12:42:30.0000] <jgraham>
Despite this people still manage to figure out which things are links

[12:44:29.0000] <Hixie>
anyway. as i said before, what i'd really like is some better solution that gets away from this whole block paradigm

[12:45:15.0000] <jgraham>
Sure

[12:45:52.0000] <Hixie>
some sites use a similar grid approach but with icons, but i'd rather not have to link in a bunch of images

[12:45:59.0000] <Hixie>
(not to mention having to get the artwork)

[12:46:06.0000] <jgraham>
In the meantime, can we have something that isn't going to actively make me add a user stylesheet if it doesn't change?

[12:46:33.0000] <Hixie>
give me a break, the current style isn't that bad

[12:46:40.0000] <Hixie>
it's way better than what we had before

[12:47:06.0000] <Hixie>
and it's not like you're gonna spend any time actually looking at the top of the spec

[12:47:09.0000] <jgraham>
I don't know what to say. I actually am going to turn it off if it stays like this. That's just a fact

[12:47:25.0000] <Hixie>
ok

[12:48:18.0000] <Hixie>
i mean, these links aren't useful to either you or me anyway

[12:48:32.0000] <Hixie>
so making them display:none would be an improvement for both of us

[12:48:54.0000] <Hixie>
but what i'm going for is trying to get new readers to see that there's useful things they could look at

[12:50:33.0000] <jgraham>
Sure, I appreciate the idea

[12:52:19.0000] <KevinMarks_>
it could be more annoying, you could steal http://leaverou.github.io/animatable/

[13:03:46.0000] <Hixie>
jgraham: i played with it some more

[13:07:43.0000] <MikeSmith>
wondering what zcorpan meant by the "xml" restriction for <embed>, and "it only gives a warning for foo:bar foo,bar etc, rather than an error"

[13:08:10.0000] <MikeSmith>
I guess he meant "Any namespace-less attribute other than name, align, hspace, and vspace may be specified on the embed element, so long as its name is XML-compatible and contains no uppercase ASCII letters"

[13:08:39.0000] <IZh>
How to make part of SVG to collapse?

[13:08:48.0000] <MikeSmith>
and the warning in that case comes from the parser

[13:09:05.0000] <Hixie>
MikeSmith: "Attribute names are said to be XML-compatible if they match the Name production defined in XML, they contain no U+003A COLON characters (:), and their first three characters are not an ASCII case-insensitive match for the string "xml"."

[13:09:20.0000] <Hixie>
IZh: it seems there's not many people here who know svg well enough to help you :-(

[13:12:53.0000] <IZh>
I'm not sure that I need SVG. I want to visualize processes CPU consumption. For each process I have a plot that shows CPU utilization over the time. And for each process I know its children. So I want to show a process tree with the ability to collapse unneded subtree.

[13:13:31.0000] <MikeSmith>
Hixie: yeah so as far as the validator goes, the HTML parser already checks for XML-compatibility of attribute names now, and emits a warning if they're not XML-compatible. But in the case of embed, I guess it needs to be an error to conform to the spec. I guess we could have the parser check to see what element it has open at the point when it emits the current warning message, and if it's embed, change to emitting it as an error instead

[13:13:39.0000] <IZh>
HTML works better for collapsion. But SVG works better for plot drawing...

[13:14:13.0000] <Hixie>
MikeSmith: well note that the i expect zcorpan to file a bug (if he hasn't already) asking for this to change

[13:14:33.0000] <Hixie>
MikeSmith: since apparently the very stable XML 1.0, fifth edition, has errata that removes this reservation.

[13:14:37.0000] <Hixie>
or something.

[13:14:45.0000] <Hixie>
but don't worry! TR/ drafts are STABLE.

[13:15:52.0000] <MikeSmith>
hah

[13:15:54.0000] <MikeSmith>
yeah

[13:20:22.0000] <KevinMarks_>
IZh you could look at d3.js - that makes interactive SVG easier

[13:20:59.0000] <KevinMarks_>
IZh: or put multiple SVG charts inline in HTML and use the HTML to collapse them

[13:23:18.0000] <IZh>
KevinMarks_: I thought about it. May be lots of svgs is better (although it will be hundreds or thousand). But it was strange to me that there are no more easy ways.

[13:24:08.0000] <KevinMarks_>
if they're individually linkable, that may be more generally useful - then you can share one weird one

[13:24:10.0000] <TabAtkins>
IZh: By "collapse", what do you mean? Hide them?

[13:24:49.0000] <IZh>
Not only hide, but move all elements below it up.

[13:25:29.0000] <IZh>
Like in html when you remove a paragraph, all subsequent paragraphs will be shifted up.

[13:25:37.0000] <TabAtkins>
Oh, if you're doing SVG, you have to handle all layout yourslef.

[13:25:57.0000] <TabAtkins>
SVG is like using HTML with "* { position: absolute !important; }" applied.

[13:26:14.0000] <TabAtkins>
It's for drawing, not for documents.

[13:26:28.0000] <IZh>
But in svg I didn' find a way to provide relative coordinates. It seems, they are all absolute.

[13:26:34.0000] <TabAtkins>
Correct.

[13:26:55.0000] <IZh>
So hiding the element doesn't move up next elements.

[13:27:03.0000] <TabAtkins>
Yes, that's what I'm saying.

[13:27:52.0000] <IZh>
But why they don't have relative coords? :-)

[13:28:15.0000] <IZh>
Of course, all could be done with the help of js

[13:28:37.0000] <IZh>
But I first tried to find a way without it.

[13:30:20.0000] <TabAtkins>
Because it's a drawing language, not a document language.  (Also, because the WG has traditionally been dominated by tool vendors, who don't care about hand-authoring, rather than people representing authors.)

[13:30:47.0000] <TabAtkins>
Either use HTML for your document structure, using SVG for the actual drawings when you need it, or do the whole thing in SVG with a bunch of JS to handle layout.

[13:30:56.0000] <TabAtkins>
I recommend the former.

[13:34:01.0000] <IZh>
I tried to avoid thousand svgs in one document. But it seems, I have no choice. :-)

[13:35:26.0000] <TabAtkins>
There's no difference between 1k <svg> diagrams and a giant <svg> containing 1k diagrams.

[13:36:08.0000] <KevinMarks_>
well, a lot of HTTP setup and teardowns?

[13:36:15.0000] <KevinMarks_>
or you mean inline SVG?

[13:36:26.0000] <IZh>
Inline

[13:36:34.0000] <TabAtkins>
KevinMarks_: Inline SVG.

[13:36:46.0000] <KevinMarks_>
ah, OK.

[13:36:48.0000] <TabAtkins>
Yeah, 1k external resources is clearly worse, but there's no reason to do that.

[13:37:18.0000] <KevinMarks_>
well the reason is creating separate links for each diagram so you can share just one

[13:37:34.0000] <KevinMarks_>
with existing img UA model

[13:37:44.0000] <TabAtkins>
You can do this too, with an appropriately smart preprocessor.

[13:38:14.0000] <KevinMarks_>
or img with a data URI for the SVG

[13:38:31.0000] <TabAtkins>
And just make them linkable with an ID.  Why link to them separately?

[13:38:37.0000] <TabAtkins>
Like, http://dev.w3.org/csswg/css-syntax/#token-diagrams is just fine.

[13:40:57.0000] <IZh>
http://www.bootchart.org/images/bootchart.png

[13:41:03.0000] <KevinMarks_>
as long as you don't want to copy one image

[13:41:09.0000] <IZh>
I want something like this.

[13:41:37.0000] <IZh>
But I want to collapse/expand a subtree of processes

[13:41:57.0000] <IZh>
Like in a tree-like folder view.

[13:43:19.0000] <KevinMarks_>
d3 is good at that kind of thing https://github.com/mbostock/d3/wiki/Gallery

[13:45:14.0000] <IZh>
d3 is a library. But what will be in the DOM? Lots of <svg>? Is seems there is no other way.

[13:45:55.0000] <IZh>
Or to regenerate big image frow the data on the fly by d3.js.

[13:46:02.0000] <IZh>
From

[13:46:26.0000] <KevinMarks_>
yes, lots of svg in the dom

[13:46:29.0000] <Hixie>
does validator.nu have a "check the referer" option?

[13:46:44.0000] <Hixie>
or did that get killed along with badges

[13:47:13.0000] <TabAtkins>
IZh: I have no clue why you think "lots of <svg>" is a bad thing.  It's not.  Just let it happen.

[13:47:38.0000] <MikeSmith>
Hixie: does not have that option

[13:48:19.0000] <KevinMarks_>
SVG is great, shame more sites don't support it as an image type

[13:49:02.0000] <IZh>
TabAtkins: I thought it will be more easy for the browser to handle one big document than to handle 1000 inline documents.

[13:50:18.0000] <Hixie>
MikeSmith: k

[13:50:29.0000] <Hixie>
MikeSmith: is there a bookmarklet for validator.nu i could use?

[13:52:43.0000] <MikeSmith>
Hixie: there probably is but I don't know of any specific one. there are some browser plugins I know of

[13:52:49.0000] <Hixie>
k

[15:26:13.0000] <sicking>
abarth: ping

[15:26:37.0000] <abarth>
sicking: hiya

[15:27:00.0000] <sicking>
abarth: do you guys have any special rules regarding loading data from filesystem:// in sandboxed pages?

[15:27:39.0000] <abarth>
we've certainly had bugs in that area

[15:28:00.0000] <abarth>
but I thought we fixed them

[15:28:09.0000] <abarth>
the problem was that those URLs contain an origin string

[15:28:21.0000] <abarth>
and sandboxed iframes have origins that can't be represented a strings

[15:28:56.0000] <sicking>
that's not quite the attack I was thinking of though

[15:29:08.0000] <abarth>
https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/platform/weborigin/SecurityOrigin.cpp&l=47

[15:29:17.0000] <abarth>
i think we solve that problem with the security origin cache

[15:29:28.0000] <abarth>
which lets us use a memory address to represent a unique origin in some cases

[15:46:34.0000] <sicking>
abarth: speaking of origins. Did you see the recent discussion about origins for blob: URLs and data: URLs?

[15:47:16.0000] <sicking>
abarth: i put forward a proposal to fix the current mess of origins in data: URLs. I believe that different browsers still have different security handling of data:

[15:47:28.0000] <sicking>
a very handwavy proposal still

[15:51:47.0000] <abarth>
sicking: oh, what's the proposal

[15:51:50.0000] <abarth>
?

[15:52:21.0000] <sicking>
abarth: basically treat data: as out-of-origin unless the loader explicitly opts in to something else

[15:52:34.0000] <sicking>
at least in cases where the contents of the data: can run script

[15:53:10.0000] <abarth>
ah, something like that could work

[15:53:13.0000] <sicking>
so for <iframe src="data:..."> it would be considered something similar to a sandboxed origin, unless you do <iframe src="data:..." allowinheritorigin?

[15:53:16.0000] <sicking>
>

[15:53:31.0000] <sicking>
we're working towards doing something similar internally in gecko

[15:53:54.0000] <abarth>
there's a little trickiness there

[15:54:15.0000] <abarth>
because you haven't linked the allowinheritorigin to the contents of the data URL in a strong way

[15:54:30.0000] <sicking>
yeah, navigation would get tricky

[15:55:14.0000] <abarth>
the trouble we have in our implementation is that when we're asked to load a URL in a frame

[15:55:15.0000] <sicking>
is that what you mean?

[15:55:18.0000] <abarth>
(yes)

[15:55:33.0000] <abarth>
we don't have a fool-proof way to figure out where the load request came from

[15:55:58.0000] <sicking>
just shoot from the hip, that's what we do :)

[15:56:01.0000] <sicking>
docshell is awesome

[15:56:04.0000] <abarth>
that might just be some work for us to boil that ocean and keep careful track of where the load comes from

[15:56:34.0000] <abarth>
it's harder in WebKit, but I guess that's more Apple's problem now

[15:56:46.0000] <sicking>
i think the idea would be to default all places to "treat data: as sandbox-origin", and then only whitelist particular code paths

[15:56:47.0000] <abarth>
in WebKit, the URL of the load can be mutated in arbitrary ways in the middle of the load

[15:57:17.0000] <abarth>
Blink still has all that machinery, but we can rip it out

[15:57:35.0000] <sicking>
hmm... interesting

[15:57:42.0000] <sicking>
we have similar abilities

[15:58:01.0000] <sicking>
an addon can redirect and say "don't load that URL, load this one instead"

[15:58:10.0000] <abarth>
what if they give a data URL?

[15:58:23.0000] <abarth>
does it get the origin of the site that originally asked to load http://example.com ?

[15:58:32.0000] <sicking>
it's a bit of a mess what we do now, so i don't know

[15:58:47.0000] <sicking>
but the idea would be to treat it as sandbox-origin

[15:59:05.0000] <abarth>
yeah, that makes sense

[15:59:36.0000] <abarth>
what's the usecase for making it same-origin?

[15:59:49.0000] <abarth>
i'm curious why srcdoc doesn't work instead

[15:59:59.0000] <sicking>
for workers i think there are strong use cases

[16:00:14.0000] <sicking>
i.e. doing new Worker("data:...")

[16:00:24.0000] <abarth>
oh, that case is much easier than the iframe case

[16:00:27.0000] <sicking>
in which case you want to consider the URL same-origin

[16:00:35.0000] <abarth>
because there's no navigation to worry about

[16:00:41.0000] <sicking>
right

[16:01:07.0000] <sicking>
for <iframe> i'm not sure. I'm sure people do use <iframe src="data:...">, but i'm not sure if they have strong use cases

[16:01:13.0000] <abarth>
so, you'd write new Worker("data:...", { dataURLsInheritOrigins: true } ) ?

[16:01:23.0000] <sicking>
yeah, something like that

[16:01:26.0000] <sicking>
*handwave*

[16:01:33.0000] <abarth>
yeah, that would be easy for us to implement

[16:02:03.0000] <abarth>
the worker loading path is complicated, but it's just a straight line :)

[16:03:06.0000] <sicking>
heh

[16:03:48.0000] <sicking>
a question is what to do if you write: new Worker("http://...", { dataURLsInheritOrigins: true })

[16:03:58.0000] <sicking>
and the http server redirects to data:

[16:04:48.0000] <sicking>
I'd be inclined to say that it should be treated like sandbox-origin (which means that it'll fail)

[16:10:43.0000] <abarth>
I think we block redirects to data URLs entirely

[16:15:45.0000] <sicking>
ah

[16:15:47.0000] <sicking>
we don't

[16:16:03.0000] <sicking>
but we always treat them as sandbox-origin I think


2014-04-26
[19:04:09.0000] <Domenic_>
Hixie: https://www.dropbox.com/s/pk685ndmevf2jee/Screenshot%202014-04-25%2022.03.08.png

[19:08:56.0000] <zewt>
the vertical gradient is a bit unpleasant, but I don't see that when I load it

[19:09:45.0000] <zewt>
by the way, vertical tabs ^5

[19:10:40.0000] <Hixie>
Domenic_: it's all changed now :-)

[19:10:59.0000] <Hixie>
(what was the problem with that screen shot?)

[19:11:15.0000] <Domenic_>
Ohhh, that's nicer

[19:11:28.0000] <Domenic_>
the overflowing text and the weird color distribution when not in a 3x3 grid

[19:11:46.0000] <Hixie>
meh, not sure it's that much better. i'm still not really hapy with it overall.

[19:11:50.0000] <Hixie>
happy

[19:12:00.0000] <Domenic_>
it's definitely better.

[19:12:18.0000] <Domenic_>
It'd be nice if the groups were always on the same line

[19:12:32.0000] <Hixie>
hmmm

[19:13:10.0000] <zewt>
if there was some way to have CSS derive colors using a formula taking the X and Y position relative to some position into account, and maybe select colors in an HSV color space, you could have the items select colors in some smart way based on how they're laid out dynamically :P

[19:13:30.0000] <zewt>
(was: re: no)

[19:14:15.0000] <zewt>
it's sort of weird how resizing the page in chrome makes chrome freeze up for 1-2 seconds

[19:14:40.0000] <zewt>
i'd think it'd just lay out the stuff that's visible, and do some really fast rough estimation for the rest just to guesstimate the scrollbar

[19:16:00.0000] <zewt>
oops, i forgot that opening the inspector on the spec is a mistake

[19:18:04.0000] <zewt>
fwiw, I have no idea what the "watch for updates" checkbox means

[19:18:16.0000] <zewt>
(not so much asking for an explanation as pointing out the page seems unobvious)

[19:18:24.0000] <Hixie>
it does pretty much exactly what it says

[19:18:39.0000] <zewt>
the text says to me "click here to sign up for emails when something changes", but that doesn't make sense with a checkbox

[19:18:59.0000] <Hixie>
that's the "Edit Subscriptions" button

[19:20:56.0000] <Hixie>
Domenic_: ok, they stick together now

[19:22:10.0000] <Domenic_>
Hixie: nice, I think that's a definite win.

[03:22:57.0000] <Ms2ger>
"Interstellar Travel, Inc. joined W3C"

[04:47:23.0000] <annevk>
lol Apple still uses DTDs and stuff http://www.macrumors.com/2014/04/25/touch-id-ipad-biometrickit/

[05:20:18.0000] <GPHemsley>
/me wants to work on space travel specs!

[11:00:26.0000] <manu>
In space, the only MUST is survival.

[11:00:36.0000] <manu>
(bad spec jokes, or a great tag line to a standardization movie set in space)

[12:32:11.0000] <smaug____>
xhr spec is getting hard to follow :(

[13:43:12.0000] <zcorpan>
https://bugs.webkit.org/show_bug.cgi?id=81752 yay productive

[13:49:32.0000] <jgraham>
Well maybe if WebKit starts getting left behind they will give up with the stop energy on specwise correctness changes

[13:50:31.0000] <jgraham>
Alternatively buy some popcorn and enjoy the show

[13:50:49.0000] <jgraham>
Alternatively spend a few seconds reviewing https://critic.hoppipolla.co.uk/r/1393 instead ;)

[13:55:07.0000] <zcorpan>
jgraham: SharedWorker should never propagate error to window per spec, but dunno if you need to care about that in this test. i think i checked for it in some other sharedworker tests

[13:55:28.0000] <jgraham>
zcorpan: Yeah, I guess that's a bug in Gecko

[13:55:34.0000] <zcorpan>
yep

[13:56:17.0000] <jgraham>
But having this test be stable in the face of that bug is useful, especially if we check for it elsewhere

[13:57:19.0000] <zcorpan>
makes sense

[14:06:21.0000] <jgraham>
zcorpan: Thanks

[14:35:18.0000] <Hixie>
jgraham: how's the spec's header? still too ugly?

[14:46:22.0000] <IZh>
Hixie: What about to make red image [WHATWG] on every page of developers site to be a link to whatwg.org?

[14:46:46.0000] <IZh>
Hi.

[14:46:53.0000] <Hixie>
that's benschwarz's

[14:48:08.0000] <IZh>
benschwarz: Hi.

[14:50:35.0000] <IZh>
Hixie: and what is yours? ;-)

[14:51:54.0000] <Hixie>
my what?

[14:51:55.0000] <jgraham>
Hixie: Well I don't exactly like it, but it's no worse than the rest of the spec now :)

[14:52:09.0000] <Hixie>
jgraham: ok, same as me then :-)

[14:52:18.0000] <Hixie>
jgraham: definitely open to better ideas if you have any btw :-)

[14:53:05.0000] <IZh>
Hixie: responsibility. I'm new here and don't know yet who makes what. :-)

[14:53:09.0000] <Hixie>
aah

[14:53:12.0000] <Hixie>
i do the html spec

[14:53:18.0000] <Hixie>
http://whatwg.org/html

[14:53:26.0000] <Hixie>
benschwarz: does the conversion to developers.whatwg.org

[14:53:32.0000] <Hixie>
(much like you do the conversion to pdf)

[14:53:45.0000] <Hixie>
anne does most of the other specs, like url, xhr, dom

[14:54:03.0000] <Hixie>
jgraham and zcorpan and others do a lot of testing and spec review

[14:54:19.0000] <Hixie>
smaug and others do implementation

[14:55:19.0000] <IZh>
I see. :-) It would be nice to note it somewhere on the site. :-)

[14:57:50.0000] <IZh>
By the way, offline caching is a coolest idea. Why not all sites in the XXI century use it? :-) It's Very useful for mobile browsing.

[15:12:08.0000] <IZh>
The link to validators is broken.

[15:12:43.0000] <IZh>
validators.whatwg.org -> validator.whatwg.org?

[15:13:49.0000] <Hixie>
the multipage copy is out of date

[15:13:58.0000] <Hixie>
for some reason anne's script isn't giving me a valid return value any more

[15:14:08.0000] <Hixie>
(anne does the multipage conversion)

[15:14:55.0000] <IZh>
I see...

[15:20:23.0000] <IZh>
http://html5.validator.nu/?doc=http%3A%2F%2Fvalidator.whatwg.org%2F&submit=Check ;-)

[15:22:14.0000] <IZh>
The main page of the validator is not valid.


2014-04-27
[02:19:29.0000] <annevk>
Hixie: hmm, can investigate tomorrow

[10:03:25.0000] <gsnedders>
Philip` reached a point of eventually autogenerating code for the tree constructor as well as the tokenizer, right?

[10:03:43.0000] <gsnedders>
Because some of the stuff (around doctype tokens esp.) looks pretty hidious to parse the text.

[10:09:58.0000] <jgraham>
Pretty sure that at some point Philip`'s code became self aware

[10:10:28.0000] <jgraham>
But the government keeps it secret

[10:10:36.0000] <jgraham>
That's why you never hear from him these days

[10:11:15.0000] <gsnedders>
Well that would explain that.

[10:28:32.0000] <Hixie>
i had big plans to parse the spec and turn it into code when i started this parser i'm doing

[10:28:43.0000] <Hixie>
but then i ended up making it output things a bit different than the spec does

[10:28:46.0000] <Hixie>
so that went out of the window

[10:29:04.0000] <Hixie>
(e.g. the way i handle character tokens that are in the original input is to just return pointers to the original string to avoid string copies)

[10:49:18.0000] <gsnedders>
Hixie: I may write such a thing over the summer

[10:49:51.0000] <gsnedders>
Hixie: Where I'm really not interesting in performance or memory usage, provided it's "usable".

[10:51:50.0000] <Ms2ger>
A natural language parser for en-US-x-hixie?

[10:53:53.0000] <gsnedders>
The parser's spec text is deliberately regular so you can quite easily parse it.

[10:54:25.0000] <gsnedders>
I'm not interested in general en-US-x-hixie

[10:54:32.0000] <Hixie>
heh

[10:54:48.0000] <Hixie>
gsnedders: yeah. my goal is to make a really fast one since my use case is "anolis is slow"

[10:55:07.0000] <Hixie>
(and that's with anolis using libxml2 sometimes, iirc)

[10:56:15.0000] <gsnedders>
Essentially, I want to be able to: a) check html5lib tests for correctness v. current spec; b) generate more tests for paths not covered (so both tokenizer and tree constructor tests are complete); c) formal assertions of properties of the spec, as then merely the code to generate the model need be checked (instead of checking the whole model v. the spec).

[10:57:02.0000] <gsnedders>
Hixie: honestly, I don't think the parser is *that* slow. the problem is the serializer and the passes --- you want to be able to merge the passes to operate over fewer loops over the document.

[11:07:04.0000] <gsnedders>
Really what you want is to use something with good loop fusion optimization

[11:21:00.0000] <IZh>
Is there WHATWG's version of CSS standard? Or do you agree with W3C about it?

[11:23:51.0000] <Ms2ger>
We don't have the manpower to deal with it

[11:29:03.0000] <IZh>
Ms2ger: But do you have your own vision of CSS3 or W3C's version is suitable for you?


2014-04-28
[17:56:39.0000] <MikeSmith>
from the peanut gallery https://twitter.com/chadaustin/status/460529236411817985

[19:43:32.0000] <MikeSmith>
what can I use place of window.URL.createObjectURL in older browsers?

[19:46:27.0000] <zewt>
nasty, but xhr -> data: url?

[19:47:38.0000] <MikeSmith>
zewt: yeah I guess that'd work

[20:12:31.0000] <MikeSmith>
IE11 doesn't actually seem to support blob: URLs in a@href as far as I can tell

[20:12:58.0000] <MikeSmith>
at least nothing happens when you click one

[20:13:31.0000] <zewt>
that's never supposed to work, as far as i know, though I think that's way underdefined right now

[20:14:06.0000] <zewt>
not sure if it should work to an iframe, but navigating the page to a blob URL doesn't make sense (since navigating away causes the blob itself to go away...)

[20:14:51.0000] <MikeSmith>
zewt: are you sure? I mean it works in other UAs. The UA just prompts you to download it.

[20:15:36.0000] <zewt>
i mean, it shouldn't load the link as a webpage and view it

[20:15:59.0000] <MikeSmith>
ah yeah

[20:16:00.0000] <MikeSmith>
sure

[20:16:22.0000] <MikeSmith>
but at least it should do.. something

[20:16:40.0000] <MikeSmith>
give an error somewhere at least

[20:17:31.0000] <MikeSmith>
in IE nothing happens at all -- no user error, no exception, nothing logged to console

[20:32:56.0000] <MikeSmith>
/me now tries to figure out why http://www.w3c-test.org/2dcontext/fill-and-stroke-styles/2d.pattern.modify.image1.html is timing out

[21:15:25.0000] <cabanier>
MikeSmith: the image can't find red.png so you get a timeout

[21:17:11.0000] <MikeSmith>
cabanier: yeah

[21:17:19.0000] <cabanier>
:-)

[21:17:20.0000] <MikeSmith>
will push a fix for it

[21:19:47.0000] <cabanier>
MikeSmith: are there any test for focus rings?

[21:19:54.0000] <MikeSmith>
cabanier: yeah

[21:20:05.0000] <cabanier>
MikeSmith: great!

[21:20:10.0000] <cabanier>
MikeSmith: have a link?

[21:20:18.0000] <MikeSmith>
but the results are going to show that they fail in all UAs

[21:20:38.0000] <MikeSmith>
given that I'm not turning on any non-default flags

[21:21:07.0000] <MikeSmith>
cabanier: http://sideshowbarker.github.io/test-results/2dcontext/less-than-2.html

[21:21:59.0000] <MikeSmith>
cabanier: I thought you guys had agreed to drop the focus stuff from the CR draft

[21:23:16.0000] <cabanier>
MikeSmith: no, the focus ring is still in there, just not the custom one.

[21:23:35.0000] <cabanier>
MikeSmith: your test works fine on FF. Haven't tried chrome yet

[21:23:55.0000] <cabanier>
MikeSmith: hit regions are also in the spec. I'm about to submit them to FF

[21:25:17.0000] <MikeSmith>
cabanier: I think the focus ring stuff doesn't work without the user neededing to manually set some particular user pref, it should be dropped from the CR completely

[21:25:58.0000] <cabanier>
MikeSmith: I can ask FF to drop that requirement, especially if your test works

[21:26:06.0000] <cabanier>
MikeSmith: I can ask Samsung to do the same for Blink

[21:26:45.0000] <MikeSmith>
cabanier: as far as I can recall, they put it under a user pref for a reason

[21:27:07.0000] <MikeSmith>
as in, the intentionally did not want to ship it without out

[21:27:34.0000] <MikeSmith>
but if things have since changed, then yeah, it seems they should un-pref it

[21:27:56.0000] <MikeSmith>
otherwise it's not actually going to be usable by 99% of the users in practice

[21:28:13.0000] <zcorpan>
morning folks

[21:28:19.0000] <MikeSmith>
zcorpan: hey

[21:29:02.0000] <zcorpan>
MikeSmith: hey i have an idea of a new feature you can implement in v.nu if you're rolling your thumbs

[21:29:17.0000] <zcorpan>
MikeSmith: http://picture.responsiveimages.org

[21:29:20.0000] <cabanier>
MikeSmith: no, I did that because I was told that's the way to develop a new feature

[21:29:29.0000] <MikeSmith>
cabanier: ok

[21:29:56.0000] <cabanier>
MikeSmith: I'll ask for shipping this week

[21:30:01.0000] <MikeSmith>
hai

[21:30:09.0000] <MikeSmith>
/me looks at zcorpan URL

[21:30:48.0000] <MikeSmith>
zcorpan: can try to add it this week

[21:31:04.0000] <zcorpan>
MikeSmith: cool

[21:40:54.0000] <TabAtkins>
zcorpan: ...what's the new feature?

[21:41:05.0000] <TabAtkins>
Oh, the <picture> element.

[21:41:10.0000] <zcorpan>
right

[23:03:51.0000] <zcorpan>
TabAtkins: r? https://critic.hoppipolla.co.uk/showcommit?first=64715af0&last=3316ec27&review=1364

[23:23:05.0000] <zcorpan>
Hixie: thanks for the bug filer. haven't tried it yet but it looks nice

[23:39:08.0000] <TabAtkins>
zcorpan: r+

[23:57:36.0000] <TabAtkins>
There's not already a way to just get the underlying JS binary of a string into a TypedArray, is there?

[23:58:40.0000] <TabAtkins>
Pretending it's text, via TextEncoder, won't work, since it's probably invalid UTF-16 (stray surrogates abound).

[23:58:55.0000] <TabAtkins>
And doing a map with .charCodeAt is slow.

[00:24:54.0000] <zcorpan>
TabAtkins: thanks!

[01:28:04.0000] <annevk>
TabAtkins: I don't think there is, code units to bytes is uncharted territory, although maybe if you give String an iterator and pass that to ArrayBuffer.from()

[01:37:03.0000] <MikeSmith>
annevk: in the context of https://twitter.com/chadaustin/status/460529236411817985 if you've not seen it yet

[01:37:16.0000] <MikeSmith>
ah

[01:37:18.0000] <annevk>
MikeSmith: just replied at the very end of that

[01:37:20.0000] <MikeSmith>
I see you commented

[01:37:21.0000] <MikeSmith>
yeah

[01:37:50.0000] <annevk>
MikeSmith: there's "file a bug" at the top, but I guess there's no help if braindead people make braindead comments

[01:40:30.0000] <MikeSmith>
annevk: hey he alerted twitter man

[01:40:45.0000] <annevk>
MikeSmith: to be fair, that did work

[01:41:38.0000] <MikeSmith>
see! you're plainly wasting your time with that quaint "file a bug" old-school tech

[01:44:21.0000] <MikeSmith>
btw it "worked" in this case only if you happened to have a column for "whatwg" keyword search set up in tweetdeck or whatever, and somebody actually paying attention to it

[01:52:50.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=11984#c60 \o/

[01:54:03.0000] <zcorpan>
MikeSmith: and only if the person tweeting points to the whatwg spec and not some fork

[01:54:20.0000] <MikeSmith>
yah

[03:12:35.0000] <annevk>
https://twitter.com/antumbral/status/460723070743752704 fucking hell

[03:14:29.0000] <jgraham>
annevk: Just calling things "scalar values" is super-confusing

[03:15:00.0000] <jgraham>
Because I don't think that most people have the context to realise that you mean "unicode scalar values"

[03:15:04.0000] <annevk>
jgraham: I guess you're starting a new thread?

[03:15:14.0000] <annevk>
jgraham: because my "fucking hell" was not at all about that

[03:15:29.0000] <jgraham>
annevk: No, I understand what it was about

[03:15:35.0000] <annevk>
jgraham: and if you want to debate Encoding Standard terms, you're welcome to convince everyone to agree on a set of terms

[03:15:54.0000] <JakeA>
annevk: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API/Service_worker_API_reference - is this where the name came from?

[03:16:02.0000] <JakeA>
I assume that predates that SW spec

[03:16:09.0000] <jgraham>
I'm just pointing out that "scalar value" without context isn't going to make sense to most people

[03:16:21.0000] <jgraham>
I'm trying to be helpful, even if the W3C isn't

[03:16:27.0000] <zcorpan>
how about calling them "w3c please don't fork this spec"?

[03:17:22.0000] <zcorpan>
/me -1 helpful

[03:17:47.0000] <annevk>
JakeA: I have no idea

[03:18:09.0000] <annevk>
jgraham: well, the specification defines the term

[03:18:53.0000] <annevk>
jgraham: I could be swayed by character / Unicode character as suggested at some point, if we can all agree on those

[03:19:00.0000] <jgraham>
annevk: Sure. But I doubt the audience of "random people on twitter" has memorised all the terms in the spec

[03:19:32.0000] <annevk>
jgraham: we're talking about the spec, obviously they can look it up

[03:21:13.0000] <jgraham>
Indeed. Nevertheless I think it would have been clearer if you had avoided that particular term of art since it's not widely known and has a totally different meaning in all other contexts

[03:21:28.0000] <annevk>
jgraham: can you rephrase my tweet?

[03:22:27.0000] <jgraham>
I think s/scalar values/unicode characters/ or s/scalar values/unicode scalar values/ are both improvements

[03:23:01.0000] <jgraham>
The second at least makes it clear that you mean a specific term of art

[03:24:17.0000] <annevk>
jgraham: note that it was not unclear to the other person that I was talking about a term of art

[03:25:30.0000] <jgraham>
annevk: OK, but it would have been unclear to me if I hadn't previously been introduced to the term "unicode scalar value" by you

[03:26:02.0000] <annevk>
jgraham: when I talk to you I'll be sure to spell it out ;-)

[03:26:21.0000] <jgraham>
Good good

[03:26:35.0000] <annevk>
jgraham: I don't disagree that all these things suck, but I only have the power to change so much

[04:01:42.0000] <jungkees>
annevk: are you around?

[04:01:47.0000] <annevk>
jungkees: yup

[04:02:08.0000] <jungkees>
annevk: good. so can we talk about the fetch and SW hook?

[04:02:53.0000] <annevk>
jungkees: cool; so I haven't added placeholders yet, but the hook should be in http://fetch.spec.whatwg.org/#basic-fetch under http/https

[04:03:24.0000] <annevk>
jungkees: probably as part of a rewrite of the eight step HTTP request algorithm

[04:03:52.0000] <annevk>
jungkees: and the return value from the service worker we can run the response steps on that follow those steps

[04:04:50.0000] <annevk>
jungkees: so we need some kind of hook for "here's a request, is there a service worker for it, and if there is, can you run it through it and hand me a response"

[04:06:18.0000] <jungkees>
annevk: I see. and do you see anything else we have to work on in terms of Request and Response defined in SW?

[04:06:53.0000] <jungkees>
I just commented on the issue in SW about the FetchEvent.purpose --> Request.context

[04:07:06.0000] <annevk>
jungkees: I'd like to define those objects in Fetch in due course

[04:07:23.0000] <annevk>
jungkees: since Fetch also defines the underlying concepts it makes sense to couple them I think

[04:07:39.0000] <jungkees>
In due course, I agree

[04:08:09.0000] <annevk>
jungkees: as for the APIs defined now, we should not expose synchronous

[04:08:17.0000] <jungkees>
We're just defining it in SW as for now and may hook it into the part of the fetch later on I guess

[04:08:19.0000] <annevk>
jungkees: I'm not sure if timeout should be on Request

[04:08:41.0000] <annevk>
jungkees: yeah, we can make the switch when I get around to it I suppose

[04:09:10.0000] <annevk>
jungkees: also bookkeeping details such as redirectCount should be not exposed

[04:09:35.0000] <annevk>
jungkees: forceSameOrigin seems redundant with Mode

[04:09:47.0000] <jungkees>
Right. I think we better make a ticket in SW issue list for that so that people are aware of what you think of as a direction.. and your plan for it

[04:10:10.0000] <annevk>
jungkees: there's a general ticket on Fetch integration

[04:10:30.0000] <jungkees>
alright. then let's keep updating it upon our discussion

[04:11:17.0000] <jungkees>
annevk: and.. do we need to add "CORS-with-forced-preflight" in the Mode enum?

[04:11:41.0000] <annevk>
jungkees: I guess

[04:11:55.0000] <jungkees>
alright

[04:12:27.0000] <annevk>
jungkees: it's weird if you're the one making the request, but if the request came from XHR, it makes sense to expose that

[04:16:45.0000] <jungkees>
annevk: Alright I'll add it. And found https://github.com/slightlyoff/ServiceWorker/issues/242; think it is the right place to discuss the plan from this point on

[04:17:44.0000] <annevk>
jungkees: yeah sure, but lets use IRC when questions come up, much quicker

[04:18:04.0000] <jungkees>
annevk: Ok

[06:01:14.0000] <annevk>
jgraham: hey, can you walk me through a pull request merge again?

[06:01:40.0000] <Ms2ger>
"Click the button"?

[06:01:58.0000] <annevk>
Ms2ger: I'd prefer one commit in the history

[06:02:08.0000] <jgraham>
annevk: What are you trying to merge?

[06:02:23.0000] <annevk>
jgraham: https://github.com/whatwg/dom/pull/12

[06:02:36.0000] <annevk>
Ms2ger: otherwise we get two tweets

[06:03:36.0000] <jgraham>
annevk: OK, github makes this a bit difficult because there are multiple repos involved

[06:04:11.0000] <jgraham>
So, locally, you can either add Aryeh's remote, or use one of the scripts on the internet that undoes some GH magic

[06:04:18.0000] <jgraham>
The first option is easier

[06:04:50.0000] <jgraham>
git remote add aryeh git⊙gc:ayg/dom.git

[06:05:00.0000] <jgraham>
git fetch origin

[06:05:05.0000] <jgraham>
git fetch aryeh

[06:05:41.0000] <jgraham>
git checkout aryeh/allow-filter-recursion

[06:05:50.0000] <jgraham>
git rebase origin/master

[06:05:57.0000] <jgraham>
git push origin HEAD:master

[06:06:12.0000] <jgraham>
git checkout master

[06:06:21.0000] <jgraham>
git merge --ff-only

[06:06:38.0000] <jgraham>
(the last two steps aren't really necesssary)

[06:09:01.0000] <Domenic_>
Let me find my bash script, it is nice

[06:09:09.0000] <Domenic_>
I type "pr 42" in the current repo and it figures it out

[06:10:04.0000] <jgraham>
Yeah, like I say magic scripts exist. Does it also allow you to land PRs?

[06:10:33.0000] <annevk>
seems almost easier to just apply https://github.com/ayg/dom/commit/61544aa440d0ef6cff10776a952a9562aa67e295.patch

[06:11:07.0000] <jgraham>
Well not really

[06:11:45.0000] <jgraham>
I mean apart from adding the remote there's only one step that would really replace

[06:11:53.0000] <jgraham>
Umm, that didn't make sense

[06:12:05.0000] <jgraham>
Anyway the point is that it wouldn't be much easier

[06:12:33.0000] <Domenic_>
https://gist.github.com/domenic/11371574

[06:12:45.0000] <jgraham>
(in this case you could even optimise by checking out master; updating it to origin/master, cherry-picking aryeh's commit and pushing)

[06:13:15.0000] <jgraham>
Domenic_: that doesn't work

[06:13:21.0000] <Domenic_>
jgraham: I use it every day.

[06:13:26.0000] <jgraham>
annevk specifically wanted to not merge

[06:13:33.0000] <Domenic_>
jgraham: it rebases first

[06:13:36.0000] <Domenic_>
fast-forward merge

[06:14:09.0000] <jgraham>
Oh, OK. Would be way clearer with --ff-only there

[06:14:18.0000] <Domenic_>
sure, sounds good.

[06:16:02.0000] <annevk>
"pr: cannot open 12, No such file or directory"

[06:17:27.0000] <Domenic_>
Hmm. source ~/.bashrc ?

[06:17:52.0000] <Domenic_>
I guess I haven't tested this on non-Windows systems...

[06:21:42.0000] <Domenic_>
oh there's already a /usr/bin/pr on my Mac

[06:21:59.0000] <Domenic_>
so a different name i guess

[06:23:26.0000] <annevk>
I feel like such a noob. I changed the name, but it still does not work

[06:23:56.0000] <darobin>
annevk: did you remember to source your bashrc in that console?

[06:24:29.0000] <annevk>
Oh, Mac uses .profile?

[06:24:33.0000] <annevk>
http://apple.stackexchange.com/questions/12993/why-doesnt-bashrc-run-automatically

[06:25:01.0000] <darobin>
yes

[06:25:13.0000] <annevk>
that worked

[06:25:20.0000] <darobin>
you have to adapt "bashrc" to your platform :)

[06:26:43.0000] <Domenic_>
my platform is the highly-popular Git Bash on Windows, so I can see why this might have been confusing -_-

[06:27:10.0000] <darobin>
lol

[06:31:07.0000] <annevk>
Domenic_: ta

[06:44:31.0000] <jgraham>
Domenic_: I guess you are the wrong person to ask how you get bash and python working in the same shell in windows? I was looking at getting the web-platform-tests running but something required both git and python, which didn't seem to want to work together in the msys.git shell I had

[06:45:11.0000] <Domenic_>
jgraham: I think Git Bash + installing Python using the installer has worked fine for me in the past.

[06:46:06.0000] <jgraham>
Hmm, OK

[06:46:12.0000] <jgraham>
maybe I just had path problems then

[06:46:29.0000] <jgraham>
I think this was the point at which the VM locked my computer

[06:46:41.0000] <jgraham>
and I have been to scared to try since

[06:47:45.0000] <annevk>
jgraham: https://www.google.com/search?q=virtuelenv+windows ?

[06:47:57.0000] <annevk>
jgraham: even corrects typos

[06:48:15.0000] <arv>
annevk: dom.spec.whatwg.org is serving an empty document at the moment

[06:48:55.0000] <annevk>
hmm, the script works, I wonder if GH changed something

[06:49:13.0000] <annevk>
seems like GH fucked up my syncing

[06:49:19.0000] <annevk>
I just turned fetch blank

[06:49:31.0000] <annevk>
thanks arv, I'll investigate

[06:51:56.0000] <annevk>
well fuck, if I fetch https://raw.githubusercontent.com/whatwg/fetch/master/Overview.html it works, if I fetch it from the server, it doesn't

[06:53:42.0000] <Domenic_>
what does "fetch it from the server" mean?

[06:53:45.0000] <Domenic_>
curl?

[06:54:27.0000] <annevk>
curl -k

[06:55:00.0000] <darobin>
annevk: any chance you're using https://github.com/whatwg/fetch/raw/master/Overview.html instead of the link you posted above?

[06:55:19.0000] <darobin>
(GitHub recently changed that and is redirecting)

[06:55:28.0000] <annevk>
nope

[06:55:58.0000] <annevk>
but actually curl directly works, it's just curl -k x > y that fails

[06:56:06.0000] <annevk>
within a shell script

[06:56:41.0000] <darobin>
does the script fail when invoked directly, or only under cron?

[06:57:20.0000] <darobin>
annevk: can you try using -o output-file.html instead of > ?

[06:57:49.0000] <annevk>
darobin: it doesn't necessarily fail, it just downloads no data

[06:58:05.0000] <darobin>
annevk: by fail I meant not do what you want

[06:59:10.0000] <annevk>
-o doesn't make a difference

[06:59:14.0000] <annevk>
nothing in the error log

[06:59:17.0000] <darobin>
mmmmm

[06:59:37.0000] <darobin>
does that curl work with anything else?

[06:59:53.0000] <zewt>
even if you isolate it? not like there's any difference to curl...

[07:00:04.0000] <darobin>
can you maybe paste what you're using?

[07:00:22.0000] <annevk>
#!/bin/sh

[07:00:22.0000] <annevk>
echo "Content-type: text/plain"

[07:00:23.0000] <annevk>
echo ""

[07:00:24.0000] <annevk>
curl -k https://raw.github.com/whatwg/fetch/master/Overview.html > index.html

[07:00:26.0000] <annevk>
echo "teehee"

[07:00:57.0000] <Domenic_>
i think you need -l to follow redirects

[07:01:01.0000] <Domenic_>
raw.github.com redirects these days

[07:01:12.0000] <annevk>
running curl outside the shell script works fine

[07:01:13.0000] <Domenic_>
sorry -L

[07:01:46.0000] <Domenic_>
i am surprised that it works outside. but unsurprised that it fails inside.

[07:02:33.0000] <zewt>
that curl (without -k) works fine for me

[07:03:02.0000] <zewt>
there's no redirect

[07:03:14.0000] <annevk>
adding -L helps

[07:03:21.0000] <zewt>
(with the githubusercontent URL earlier)

[07:03:42.0000] <zewt>
err, confused--the url you pasted in that script != the well fuck URL

[07:03:54.0000] <annevk>
yup

[07:04:09.0000] <annevk>
I wonder what is stable these days

[07:04:32.0000] <Domenic_>
it's frustrating they didn't have a switchover period

[07:04:57.0000] <zewt>
seems like a bug that curl doesn't follow redirects by default

[07:09:30.0000] <annevk>
arv: thanks fixed

[07:09:38.0000] <annevk>
Domenic_: looks like they changed URLs twice already

[07:09:44.0000] <arv>
Thanks annevk

[07:09:58.0000] <annevk>
Domenic_: some of my scripts had -L and are fetching from github.com and not raw.github.com

[07:10:12.0000] <Domenic_>
ah yeah back in the day

[07:10:31.0000] <annevk>
I added -L, removed -k as that seems bad, and have not updated URLs; I should probably write a more generic script to handle all this at some point

[07:10:54.0000] <zewt>
were you expecting a stable web api D:

[07:12:03.0000] <annevk>
My experience writing web services is generally bad

[07:12:09.0000] <annevk>
And I'm doing the most trivial of things

[07:23:15.0000] <annevk>
MikeSmith: autocomplete for cc list is awesome, thanks for adding

[07:27:08.0000] <annevk>
foolip: hey, yt?

[07:27:18.0000] <annevk>
foolip: are you still maintaining the splitter script?

[07:29:10.0000] <annevk>
Okay, so I think the fix is to replace .//*[@class="head"] with something that does subscring matching

[07:29:18.0000] <annevk>
XPath has no support for classes so...

[07:30:27.0000] <annevk>
Hmm [tokenize(@class,'\s+')='atag']

[07:30:31.0000] <annevk>
But that's XPath 2.0

[07:31:00.0000] <annevk>
Otherwise contains(@class,'atag') which has obvious flaws but might be good enough

[07:33:14.0000] <annevk>
contains() is not even supported here

[07:33:19.0000] <annevk>
LOL standards

[07:34:42.0000] <jgraham>
Which XPath lib are you using?

[07:35:35.0000] <annevk>
I have no idea

[07:35:53.0000] <annevk>
I'm trying to debug this over ssh in nano :/

[07:36:42.0000] <annevk>
jgraham: etree?

[07:38:55.0000] <annevk>
jgraham: https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find afaict

[07:42:03.0000] <jgraham>
annevk: Element.find != xpath

[07:42:16.0000] <jgraham>
It's like a very crappy sub-xpath thing

[07:42:31.0000] <annevk>
jgraham: https://code.google.com/p/html5/source/browse/trunk/spec-splitter/spec-splitter.py#94 I see

[07:42:45.0000] <annevk>
I'll repeat: LOL standards

[07:43:30.0000] <jgraham>
annevk: You should be able to use .xpath I think

[07:44:03.0000] <jgraham>
http://lxml.de/xpathxslt.html#xpath

[07:45:04.0000] <foolip>
annevk: oh hi

[07:45:18.0000] <jgraham>
http://xmlsoft.org/html/libxml-xpathInternals.html should tell you which functions are implemented

[07:45:25.0000] <foolip>
annevk: I guess I don't, I haven't had cause to fiddle with it

[07:46:10.0000] <annevk>
jgraham: I replaced it with //header

[07:46:30.0000] <annevk>
jgraham: seems to work

[07:46:38.0000] <jgraham>
OK

[07:48:04.0000] <annevk>
MikeSmith: do you have interest in moving spec-splitter to github.com?

[07:48:12.0000] <annevk>
Hixie: are you planning on rewriting the spec-splitter?

[07:55:53.0000] <annevk>
foolip: ok, thanks

[08:23:06.0000] <annevk>
Maybe we should call it "unicodelatin1"

[08:23:32.0000] <annevk>
Unicode actually calls that block Latin-1 Supplement, so not too far off

[08:29:36.0000] <SimonSapin>
annevk: fwiw, cssselect implements class selectors as [@class and contains(concat(' ', normalize-space(@class), ' '), 'head')]

[08:30:36.0000] <annevk>
SimonSapin: you don't have XPath 2.0?

[08:30:44.0000] <SimonSapin>
nope

[08:30:47.0000] <SimonSapin>
1.0

[08:31:05.0000] <SimonSapin>
that’s what libxml2 (used by lxml) implements

[08:31:17.0000] <annevk>
you should do ' head ', no?

[08:31:40.0000] <SimonSapin>
ah, yes

[08:31:53.0000] <annevk>
XPath is weird

[08:32:00.0000] <SimonSapin>
https://github.com/SimonSapin/cssselect/blob/master/cssselect/xpath.py#L532-L534

[08:32:33.0000] <SimonSapin>
translating Selectors to XPath is an horrible, horrible idea

[08:33:25.0000] <annevk>
I think I can agree to that without having attempted it

[08:33:27.0000] <SimonSapin>
and does not actually work (some Selectors are impossible to express in XPath AFAICT.)

[08:34:10.0000] <annevk>
Well everything that requires observing state would require some newer form of XPath that allows custom functions

[08:34:30.0000] <SimonSapin>
observing state?

[08:34:41.0000] <annevk>
:hover

[08:35:00.0000] <jgraham>
XPath does allow custom functions, no?

[08:35:08.0000] <jgraham>
Or is that only XPath 2?

[08:35:15.0000] <SimonSapin>
Yeah, no. Don’t even go down that road.

[08:35:40.0000] <jgraham>
Which road? The custom functions road?

[08:35:42.0000] <SimonSapin>
:hover just never matches in cssselect

[08:35:45.0000] <jgraham>
Or :hover?

[08:35:50.0000] <MikeSmith>
annevk: yeah we should move the splitter source to github

[08:35:51.0000] <SimonSapin>
jgraham: implementing :hover in XPath

[08:36:02.0000] <jgraham>
Right, that would be weird

[08:36:23.0000] <jgraham>
It depends on a non-obsevable bit that can't be set in most implementations

[08:36:25.0000] <annevk>
MikeSmith: if you still have that Google repo locally, might be worth deleting the stuff we already moved, to make it more clear it's no longer being maintained there

[08:36:55.0000] <MikeSmith>
annevk: ok

[08:39:18.0000] <dglazkov>
good morning, Whatwg!

[08:49:04.0000] <JonathanNeal>
Hixie: are alts not being respected in document outline for things like <h1><img alt="Title" src="path/to/image.jpg"></h1> ?

[08:50:02.0000] <Domenic_>
Oooh good question

[08:55:43.0000] <jgraham>
JonathanNeal: The spec doesn't say anything about that

[08:56:06.0000] <jgraham>
the spec says that the <h1> element is the heading element for that section

[08:56:19.0000] <jgraham>
It doesn't say how to extract the text content of the heading, afaict

[08:59:10.0000] <JonathanNeal>
Okay, was told there might be an issue, which is why I asked. So, when a heading contains <img alt="Title">, what do browsers do with the <img> presently? What (if any) document tells them to use the alt attribute?

[09:00:42.0000] <SteveF>
JonathonNeal: browsers don't do anything, javascript implementations and http://validator.w3.org/nu/ don't pick up the alt text

[09:00:45.0000] <jgraham>
As far as I know there isn't any document that tells them to use alt. Or to use the .textContent of the heading

[09:01:17.0000] <jgraham>
SteveF: Seems like a good time to submit some PRs

[09:01:24.0000] <annevk>
JonathanNeal: you should probably file a bug, I think there's an XXX marker in the specification close to the definition "text content" but I might misremember

[09:01:36.0000] <SteveF>
example http://validator.w3.org/nu/?showoutline=yes&doc=http%3A%2F%2Fwww.apple.com%2Fiphone%2Faccessories%2F

[09:02:14.0000] <SteveF>
jgraham: raise a bug more likely

[09:04:48.0000] <SteveF>
jgraham: "As far as I know there isn't any document that tells them to use alt. Or to use the .textContent of the heading" right, which is suboptimal

[09:05:09.0000] <JonathanNeal>
annevk: thanks. This is probably my first time filing a bug, so I apologize for its messiness https://www.w3.org/Bugs/Public/show_bug.cgi?id=25493

[09:11:27.0000] <annevk>
Domenic_: if JavaScript had immutable arrays, people would use them

[09:11:39.0000] <Domenic_>
annevk: maybe. maybe not.

[09:11:47.0000] <Domenic_>
the language is *so* mutable

[09:12:35.0000] <Domenic_>
tbh I think frozen arrays are cool but I am mostly echoing wycats___ and dherman.

[09:12:38.0000] <jgraham>
FWIW it looks like the right patch in validator.nu is to add a switch in https://github.com/validator/validator/blob/master/src/nu/validator/servlet/OutlineBuildingXMLReaderWrapper.java#L427 that checks inElement and in case HEADING_CONTENT_ELEMENT checks for a HTML img element with a alt attribute and, if one exists, adds its characters to currentSection.getHeadingTextBuilder()

[09:12:59.0000] <Domenic_>
and i see their point about frozen sucking in general and so the fact that it works by accident on arrays not meaning we should use it.

[09:13:26.0000] <annevk>
Well, I agree that frozen is weird

[09:14:07.0000] <annevk>
I wonder if Event.path is always a set

[09:14:28.0000] <annevk>
Or if shadow DOM makes it a graph, I guess it's still a set

[09:15:25.0000] <zewt>
python has immutable arrays (tuples), but the only reason I really use them is convention

[09:15:45.0000] <zewt>
(i think they're faster to create too, but i rarely write python for performance)

[09:20:39.0000] <MikeSmith>
jgraham: yeah that sounds right

[09:37:08.0000] <annevk>
So the main problem with the current request concept setup is that there's a bunch of it describing a request, and there's a bunch of it that is processing input to build up more of the request

[09:38:02.0000] <annevk>
E.g. "author headers" is input for modifying the headers of a request per a given set of rules

[09:38:24.0000] <Domenic_>
TabAtkins: haha wow that old grid spec exceeded my expectations when I read "barely translated C++ code"

[09:39:08.0000] <TabAtkins>
Now imagine fantasai and I poring over it for two hours, scribbling notes on a whiteboard next to us, then each of going to separate desks to translate it into our own words, so that later we can compare algos and make sure we got things right.

[09:43:03.0000] <TabAtkins>
Domenic_: You can still see the intermediate state of the more complicated part of the algo at http://dev.w3.org/csswg/css-grid/#translated-algo , where I tried a more direct translation into English while fantasai tried a more idiomatic translation (which turned out to be wrong in several details, which is why we did separate passes).

[10:42:58.0000] <annevk>
wycats___: feel like we've gone full circle, nobody is surprised I think

[10:43:04.0000] <annevk>
wycats___: just annoyed

[11:20:54.0000] <annevk>
TabAtkins: you're hilarious

[11:21:01.0000] <annevk>
https://twitter.com/tabatkins/status/460840981185581056

[11:21:19.0000] <TabAtkins>
^_^

[11:22:25.0000] <Domenic_>
I really liked https://twitter.com/tabatkins/status/460839870995263488

[11:23:25.0000] <annevk>
heh

[11:25:14.0000] <Domenic_>
Do CGs get the same patent commitments as e.g. webapps? Seems doubtful.

[11:26:01.0000] <TabAtkins>
When you publish a FSD, you get sign-offs from everyone in the CG, and that's equivalent in power to the sign-offs we get by default when publishing through normal W3C process.

[11:26:31.0000] <Domenic_>
so if the CG membership was as large as webapps then it would be equivalent.

[11:26:55.0000] <annevk>
The main problem is that CG is opt-in and WGs are opt-out

[11:26:57.0000] <TabAtkins>
Yeah.

[11:27:38.0000] <annevk>
Note though that none of the plagiarized work made it to REC and so none of it is protected

[11:28:26.0000] <Domenic_>
Yeah.

[11:28:29.0000] <Domenic_>
That's the worst part.

[11:32:08.0000] <annevk>
I think I got more Twitter notifications in the past hour than in the rest of the year

[12:59:44.0000] <estellevw>
question on http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#range-state-(type=range) - multiple attribute.

[12:59:59.0000] <estellevw>
example code

[13:00:00.0000] <estellevw>
<input type=range min=0 max=24 value=0,24 step=1.0 ...

[13:00:01.0000] <estellevw>
         oninput="o1.value = valueLow + ':00'; o2.value = valueHigh + ':00'">

[13:00:06.0000] <estellevw>
doesn't have the multiple attribute set

[13:00:31.0000] <estellevw>
is it necessary to include multiple, or does the comma in the value suffice

[13:00:31.0000] <estellevw>
?

[13:00:59.0000] <Domenic_>
good question...

[13:01:04.0000] <estellevw>
also, any implementers?

[13:01:05.0000] <Domenic_>
looks like a spec bug on first glance

[13:01:27.0000] <annevk>
estellevw: spec bug

[13:01:42.0000] <annevk>
estellevw: although it does say ... so you could assume multiple to be specified there...

[13:04:10.0000] <estellevw>
I did assume it was a spec example bug, but wanted to be sure.

[13:25:55.0000] <Ms2ger>
"We will be having our scheduled DOM L3 Events call tomorrow (October 1st)."

[13:58:09.0000] <Ms2ger>
"I was going to make an XSLT markup joke, but then I remembered that Twitter only allows 140 characters."

[13:58:14.0000] <Ms2ger>
Eric Meyer++

[14:04:17.0000] <IZh>
http://html5.validator.nu/?doc=http%3A%2F%2F192.168.0.1%2F

[14:04:54.0000] <IZh>
It seems that validator doesn't check for private networks.

[14:05:27.0000] <IZh>
It could be used to guess web-servers on nearby local PCs.

[14:14:12.0000] <IZh>
http://html5.validator.nu/?doc=http%3A%2F%2Flocalhost%3A65536

[14:14:20.0000] <IZh>
Intetnal error.

[14:37:40.0000] <Hixie>
annevk: eventually, but not any time soon

[14:41:21.0000] <Hixie>
zcorpan: top line goes into summary, second and subsequent lines into the comment, iirc

[14:57:14.0000] <SamB_>
er, as I understand it you need to leave a blank line after the summary

[15:04:40.0000] <Hixie>
on what?

[15:05:21.0000] <SamB>
Hixie: or some things think the next line is also summary

[15:05:32.0000] <Hixie>
i'm talking about the bug form

[15:05:37.0000] <SamB>
oh!

[15:05:58.0000] <SamB>
/me was thinking git ...

[15:06:32.0000] <SamB>
what bug form is that? I thought bugzilla had separate fields for each of those

[15:10:33.0000] <Hixie>
the one on the spec

[15:10:37.0000] <Hixie>
html spec

[15:11:45.0000] <SamB>
ah

[15:12:47.0000] <SamB>
/me hasn't looked at that for a few days; he's been using an even older computer than usual because the fan on his usual one had gotten WAAAY too noisy and he was waiting for a replacement in the mail ...

[15:12:59.0000] <Hixie>
heh

[15:21:21.0000] <Domenic_>
500 on http://html5.org/tools/web-apps-tracker?from=8582&to=8583

[15:35:10.0000] <Domenic_>
(fixed itself)

[15:46:33.0000] <Hixie>
umm....

[15:46:34.0000] <Hixie>
hey anne

[15:46:41.0000] <Hixie>
the tracker is missing some entries :-)

[15:47:18.0000] <Hixie>
e.g. r8580


2014-04-29
[18:21:08.0000] <zewt>
guh @ urllib.urlencode vomitting when passed unicode

[19:08:43.0000] <MikeSmith>
cabanier: even with the canvas.focusring.enabled pref set in FF, we still have tests that fail http://w3c.github.io/test-results/2dcontext/complete-fails.html

[19:09:23.0000] <MikeSmith>
oh hmm

[19:09:33.0000] <MikeSmith>
maybe not http://www.w3c-test.org/2dcontext/drawing-paths-to-the-canvas/drawFocusIfNeeded_001.html

[19:46:08.0000] <MikeSmith>
cabanier: regenerated http://w3c.github.io/test-results/2dcontext/less-than-2.html

[19:46:20.0000] <MikeSmith>
and http://w3c.github.io/test-results/2dcontext/complete-fails.html now shows zero

[19:58:45.0000] <cabanier>
MikeSmith: thanks! I'll see if I can fix some of the FF issues

[22:04:43.0000] <MikeSmith>
gsnedders: that "All the Dashes in Web Typography" thing is missing ー

[22:05:54.0000] <MikeSmith>
U+30FC

[03:00:09.0000] <annevk>
Hixie: http://html5.org/r/8580 seems to be there?

[03:01:27.0000] <annevk>
Hixie: note that I only track changes to /webapps/source

[04:00:24.0000] <annevk>
JakeA / jungkees: do we have diagrams somewhere of the various fetch flows?

[04:01:06.0000] <annevk>
JakeA / jungkees: in particular I wonder what the best way is to define the event.default() semantic

[04:02:45.0000] <annevk>
<img> -> invokes fetch -> invokes SW -> invokes default -> invokes fetch recursively but with "use SW flag" unset or some such?

[04:03:50.0000] <jgraham>
/me gets annevk a copy of dot

[04:10:20.0000] <JakeA>
annevk: Do you specifically want diagrams or would rough algorithms fo?

[04:10:22.0000] <JakeA>
do*

[04:16:08.0000] <annevk>
JakeA: rough works I suppose

[04:16:52.0000] <annevk>
JakeA: I had this idea of making the request concept much simpler, but then I realized that is probably not possible because we have this recursion thing going on, so at least some of the data needs to stay preserved

[04:22:47.0000] <hsivonen>
annevk: do we have any single-byte encoding (other than x-user-defined) that defines mappings for the entire upper half?

[04:23:20.0000] <annevk>
hsivonen: we need "unicodelatin1" or some such that will have that

[04:23:28.0000] <hsivonen>
non-control mappings that is

[04:23:33.0000] <annevk>
hsivonen: for networking

[04:23:35.0000] <hsivonen>
annevk: that won't help me now

[04:23:47.0000] <hsivonen>
annevk: I'm thinking of an encoding I could use with gedit today

[04:24:06.0000] <hsivonen>
the best I have so far is windows-1251, which has one undefined code point

[04:24:27.0000] <hsivonen>
so I have to be really unlucky not to be able to roundtrip stuff with that one

[04:24:41.0000] <JakeA>
annevk: I'll write an algo for event.default() later this week (I'm booked up today/tomorrow)

[04:24:48.0000] <hsivonen>
use case: editing patches that as a whole are both invalid UTF-8 and invalid windows-1252

[04:25:12.0000] <annevk>
JakeA: I'll do something as well

[04:25:53.0000] <annevk>
hsivonen: http://encoding.spec.whatwg.org/index-x-mac-cyrillic.txt looks complete

[04:26:06.0000] <hsivonen>
annevk: cool thanks

[04:26:42.0000] <hsivonen>
MacRoman, too, actually

[04:26:43.0000] <hsivonen>
wow

[04:27:11.0000] <hsivonen>
it's been so long since I've used MacRoman for something useful that I've forgotten that Mac encodings use all the available space

[04:27:53.0000] <annevk>
macintosh does have a PUA mapping

[04:27:59.0000] <hsivonen>
aargh. gedit doesn't support Mac encodings

[04:28:18.0000] <hsivonen>
it has stuff like UTF-32 and TCVN, but no Mac encodings at all

[04:29:31.0000] <hsivonen>
maybe I should use VISCII for this use case

[04:33:38.0000] <SimonSapin>
hsivonen: what’s the use case?

[04:34:39.0000] <zcorpan>
SimonSapin: http://krijnhoetmer.nl/irc-logs/whatwg/20140429#l-299

[04:55:59.0000] <zcorpan>
jgraham: how do i take the tests here https://dvcs.w3.org/hg/quirks-mode/ and move them to web-platform-tests retaining history?

[04:57:55.0000] <zcorpan>
it seems the w3c haven't forked the quirks mode spec yet

[04:58:13.0000] <MikeSmith>
/me adds that to his TODO list

[04:59:08.0000] <jgraham>
zcorpan: Probably git-hg clone to create a git repo and then git subtree add to add it to wpt

[04:59:32.0000] <jgraham>
Going to experiment with the London transport network now, back online in a bit

[04:59:48.0000] <zcorpan>
jgraham: ok thx

[05:00:52.0000] <zcorpan>
MikeSmith: incentive pays for the number of forked specs eh?

[05:01:06.0000] <zcorpan>
that's why there were 27 canvas specs

[05:01:15.0000] <zcorpan>
/me figured it out

[05:01:21.0000] <MikeSmith>
perceptive

[05:01:51.0000] <MikeSmith>
 how to migrate a mercurial repo to subdirectory of an existing git repo and retain the history)

[05:02:06.0000] <MikeSmith>
oofs

[05:02:42.0000] <MikeSmith>
zcorpan: I meant to say, what jgraham said

[05:02:47.0000] <MikeSmith>
about migrating that repo

[05:03:14.0000] <MikeSmith>
that's what I did to add the conformance-checkers/ stuff

[05:05:15.0000] <zcorpan>
MikeSmith: ok great

[05:08:40.0000] <zcorpan>
pointer to git-hg ?

[05:16:43.0000] <MikeSmith>
http://hg-git.github.io/

[05:17:09.0000] <annevk>
Oh my, I was just wondering whether my seatbelt was fastened while sitting in the office

[05:19:20.0000] <Ms2ger>
Prepare for liftoff...

[05:26:22.0000] <zcorpan>
MikeSmith: thanks. i got an error when trying to install it :-(

[05:26:54.0000] <zcorpan>
Running dulwich-0.9.6/setup.py -q bdist_egg --dist-dir /tmp/easy_install-BsoHD7/dulwich-0.9.6/egg-dist-tmp-wHtFoJ

[05:26:54.0000] <zcorpan>
clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]

[05:26:54.0000] <zcorpan>
clang: note: this will be a hard error (cannot be downgraded to a warning) in the future

[05:26:54.0000] <zcorpan>
error: Setup script exited with error: command 'cc' failed with exit status 1

[05:27:07.0000] <zcorpan>
/me gotta go

[05:35:52.0000] <annevk>
http://www.w3.org/TR/2014/WD-tracking-dnt-20140424/#exceptions-javascript-api wtf

[05:41:10.0000] <Ms2ger>
"Push Server protocol: Mozilla and Google to kick-off a new draft at the IETF to standardize it."

[05:41:20.0000] <Ms2ger>
Because that went so well the last time?

[05:42:25.0000] <annevk>
Ms2ger: I don't understand that either

[05:43:33.0000] <annevk>
Ms2ger: both companies hired too much IETF apologists I suspect

[05:43:52.0000] <Ms2ger>
That may be the case

[05:47:33.0000] <Ms2ger>
Heh

[05:48:14.0000] <Ms2ger>
Apparently w3.org thinks I'm in a "Test Framework Developers group" with URL http://w3c-test.org/framework/

[05:48:44.0000] <Ms2ger>
MikeSmith, you can throw me out of that :)

[05:49:59.0000] <MikeSmith>
Ms2ger: oh man I should just remove that whole group

[05:50:30.0000] <Ms2ger>
Also, Testsuite Maintainers group

[05:51:20.0000] <annevk>
DNT :-(

[05:52:05.0000] <annevk>
Why the fuck does the W3C still allow groups to just go and invent some weird APIs without oversight? http://www.w3.org/2011/tracking-protection/drafts/tracking-dnt.html

[05:52:19.0000] <annevk>
Isn't this what "The Team" is supposed to be good at. Helping out?

[05:53:01.0000] <annevk>
Sorry MikeSmith, bit frustrated

[05:53:43.0000] <MikeSmith>
preaching to the choir

[05:54:03.0000] <MikeSmith>
well I guess I shouldn't say that

[06:06:03.0000] <MikeSmith>
and I didn't even know the DNT spec introduced any APIs. but I can't blame anybody except myself for that, since all it requires is me to actually read the spec

[06:06:22.0000] <beverloo>
annevk, tricking me into giving feedback for DNT...?! ;-)

[06:06:52.0000] <MikeSmith>
good god almighty StoreSiteSpecificExceptionPropertyBag

[06:08:06.0000] <MikeSmith>
annevk: fwiw I also never got any heads up about that stuff from the team contacts for the group

[06:08:10.0000] <MikeSmith>
not that I remember

[06:08:18.0000] <annevk>
beverloo: it could use it :-)

[06:09:03.0000] <annevk>
There ought to be a meme for "Don't know what the fuck I'm doing. Let's ask for feedback during Last Call"

[06:09:20.0000] <Ms2ger>
Does the CSSWG have a logo we could use?

[06:09:28.0000] <MikeSmith>
anyway I'm pretty sure I would remember something mentionining "hey btw we're adding StoreSiteSpecificExceptionPropertyBagW

[06:09:49.0000] <MikeSmith>
*somebody mentioning to m

[06:09:52.0000] <MikeSmith>
*me

[06:10:19.0000] <Ms2ger>
/me wonders if MikeSmith got distracted from those silly groups

[06:11:54.0000] <MikeSmith>
my single interest in the tracking group is pretty much just reading Roy's messages to the WG list, and the responses to him, for the entertainment value

[06:12:15.0000] <MikeSmith>
anyway I blame the TAG

[06:12:53.0000] <Ms2ger>
Ooooh, more Hixie on www-archive

[06:12:55.0000] <annevk>
Ms2ger: http://www.w3.org/Style/Woolly/woolly-icon.svg

[06:13:19.0000] <Ms2ger>
Good old Woolly

[06:57:49.0000] <SimonSapin>
Ms2ger: shepazu talked about making a new one

[06:59:22.0000] <annevk>
SimonSapin: you suggested inlining "redirect count" and such at one point, right?

[06:59:34.0000] <SimonSapin>
annevk: context?

[06:59:37.0000] <annevk>
SimonSapin: I just looked into doing that, and it seems to require quite a bit more text than the current solution

[06:59:45.0000] <annevk>
SimonSapin: http://fetch.spec.whatwg.org/

[06:59:58.0000] <SimonSapin>
annevk: that was probably someone else

[07:02:18.0000] <gsnedders>
Someone should write a wiki page or something with the varying problems of various standards groups

[07:05:04.0000] <annevk>
There's http://wiki.whatwg.org/wiki/IETF

[07:05:16.0000] <MikeSmith>
Diagnostic and Statistical Manual of Mental^W Standard-Group Disorders

[07:12:24.0000] <Domenic_>
Hixie: what's an FSA draft?

[07:12:53.0000] <annevk>
Domenic_: http://www.w3.org/community/about/agreements/final/

[07:13:22.0000] <Domenic_>
Ah, so Hixie is saying that WHATCG snapshots should be published more often?

[07:13:53.0000] <annevk>
We haven't really done it yet

[07:14:38.0000] <annevk>
See http://lists.w3.org/Archives/Public/www-archive/2014Apr/0039.html for reasons

[07:14:43.0000] <Domenic_>
That seems like a weak position to argue from :-/

[07:15:44.0000] <annevk>
W3C has no REC of plagiarized material, we have no FSA of original work

[07:16:27.0000] <annevk>
Agreed that it's not ideal, I'm mostly trying to find a way to simplify the fetch algorithm

[07:16:58.0000] <Domenic_>
haha

[08:02:09.0000] <Domenic_>
Hmm is Firefox actually shipping any promise-based APIs yet? Or did they just ship Promises to be awesome?

[08:26:59.0000] <Hixie>
annevk: weird, it works now

[08:27:16.0000] <annevk>
Hixie: maybe DreamHost tried turning it off and on again

[08:28:50.0000] <Hixie>
heh

[08:29:00.0000] <Hixie>
i was getting the same as now just with some missing lines on the tracker index

[08:29:15.0000] <annevk>
oh

[08:30:45.0000] <SamB>
so is the "leave your sense of logic at the door" referring to the expectation that things will be logical?  (Otherwise it seems like a really lousy suggestion.)

[08:31:13.0000] <Hixie>
basically

[08:31:14.0000] <jgraham>
SamB: Yes

[08:31:29.0000] <Domenic_>
Why do Asian websites use <marquee> so much? I've heard this fact but never understood why.

[08:31:50.0000] <jgraham>
People often come here and say things like "the platform would make more sense if X" where X is some thing that we can't do for compat reasons

[08:32:19.0000] <jgraham>
And when I say "people" I mean "everyone up to and including Hixie"

[08:32:37.0000] <jgraham>
So it is helpful to be able to say "see /topic"

[08:32:50.0000] <jgraham>
Particularly when it's Hixie or someone else that should know better ;)

[08:33:03.0000] <Hixie>
jgraham++ :-)

[08:35:13.0000] <dglazkov>
good morning, Whatwg!

[08:36:31.0000] <annevk>
Domenic_: I only have anecdotal data, but sites in Asia tend to be a lot more busy

[08:37:24.0000] <annevk>
Domenic_: people in that part of the world might enjoy that more, I've no idea

[08:37:48.0000] <SamB>
jgraham: yeah, that's what I figured

[08:38:12.0000] <SamB>
that it referred to the crazy stuff that must be done for compat

[08:38:54.0000] <SamB>
... so what did Asia have to say about the death of <blink>?

[09:07:01.0000] <cwilso>
Domenic_: <marquee> was a way to get vertical text layout in IE, well before vertical text layout was supported.

[09:07:23.0000] <Domenic_>
cwilso: ah nice, that makes a lot of sense!

[09:08:20.0000] <cwilso>
A very twisted hacky kind of sense, but yes.  :)

[09:09:18.0000] <cwilso>
(redacted braindump of "@fonts", vertical-text fonts that had each glyph rotated and the baseline on the side, because that's how vertical text used to be done.)

[09:10:25.0000] <annevk>
I'm somewhat surprised we still don't have vertical text if it's that important

[09:11:24.0000] <SimonSapin>
annevk: we’re working on it, but It’s Hard.

[09:11:45.0000] <SimonSapin>
feel free to send feedback on http://dev.w3.org/csswg/css-writing-modes/ ;)

[09:13:38.0000] <Ms2ger>
Or implement it in Servo :)

[09:27:13.0000] <SimonSapin>
Ms2ger: I hear that part is up to me

[09:54:10.0000] <Hixie>
TabAtkins: is there a spec for 'display-box' yet that has browser adoption of any kind?

[09:57:10.0000] <annevk>
Hixie: http://dev.w3.org/csswg/css-display/#the-display-box

[09:57:20.0000] <annevk>
Hixie: haven't seen intent to implement for it anywhere

[10:03:03.0000] <cwilso>
annevk: yeah, vertical text the right way - or at least, a different-and-much-less-wrong way - has been cycling around for quite a while.  IE did vertical text ca IE5 or so, if memory serves, using CSS writing-mode (I think, it's been a loooong time.)

[10:03:32.0000] <cwilso>
not necessarily any relation to current work SimonSapin mentioned.  :)

[10:04:46.0000] <SimonSapin>
We’re working on display-box: https://bugzilla.mozilla.org/show_bug.cgi?id=907396

[10:25:49.0000] <TabAtkins>
Hixie: Spec is what Anne pointed out. No implementations yet, though Blink is leaning toward one.

[10:26:01.0000] <Hixie>
k thanks

[10:26:42.0000] <MikeSmith>
Domenic_: a lot of Japanese mobile sites used marquee effect back in the WAP days. not using <marquee> but instead by some WAPish thing which name I forget. I wonder if if maybe they liked the effect so much that it ended up getting back-migrated to desktop sites.

[10:39:45.0000] <Hixie>
bholley: any update on https://www.w3.org/Bugs/Public/show_bug.cgi?id=20701 ?

[10:40:32.0000] <bholley>
Hixie: new Window bindings got delayed slightly - they might even be done this week. I was on jury duty yesterday, so I missed the status meeting

[10:40:39.0000] <Hixie>
k

[10:40:51.0000] <bholley>
Hixie: but yeah, just give it another couple of weeks

[10:40:57.0000] <Hixie>
awesome

[10:41:00.0000] <bholley>
Hixie: as soon as that stuff lands I'll land the new XO behavior

[10:47:23.0000] <Ms2ger>
bholley, I don't think there was one

[10:47:38.0000] <bholley>
Ms2ger: do you know the status of the Window bindings?

[10:47:53.0000] <Ms2ger>
Nope

[10:48:04.0000] <Ms2ger>
I asked jst to relay it to me if he figured out

[10:52:45.0000] <Ms2ger>
Oh, the buttons in the HTML spec don't look so awful now

[10:54:14.0000] <Hixie>
really? i think they're still pretty terrible

[10:54:22.0000] <Hixie>
i just don't know what to do that'd be better

[10:56:04.0000] <Ms2ger>
They looked more awful before :)

[10:56:07.0000] <Hixie>
looks particularly bad at the top of the PDF version for some reason

[11:19:46.0000] <cabanier>
MikeSmith: ping

[11:35:18.0000] <cabanier>
MikeSmith: http://www.w3c-test.org/2dcontext/fill-and-stroke-styles/2d.pattern.image.broken.html is supposed to throw an exception but the test is currently looking for a null return value

[11:36:19.0000] <cabanier>
MikeSmith: chrome throws an exception in my local testing but not for the test in your depot

[11:36:36.0000] <IZh>
IZh: Hi. What you think about swapping page title and page navigation of developer's version pages?

[11:39:47.0000] <IZh>
It is strange to me to scroll to the top of the page and do not see its title.

[11:40:11.0000] <IZh>
Currently the title is below the navigation.

[11:40:27.0000] <SamB>
that sounds like a good idea to me

[11:40:30.0000] <SamB>
Hixie: ^

[11:40:42.0000] <IZh>
http://developers.whatwg.org/text-level-semantics.html

[11:40:53.0000] <Hixie>
benschwarz: ^

[11:41:11.0000] <SamB>
oh, that version

[11:41:12.0000] <SamB>
sorry

[11:41:17.0000] <SamB>
/me forgot what "developers" meant

[11:42:02.0000] <SamB>
(confused it with "implementors" or something)

[11:43:29.0000] <IZh>
Also there are no links to Back and Top. Only Next.

[11:43:55.0000] <IZh>
I mean Back and Up.

[12:02:48.0000] <Hixie>
hsivonen: any news on the encoding stuff?

[12:06:12.0000] <SamB>
/me still thinks those link rels should be in the spec, even if they aren't currently used by much except old-school HTML generation tools -- they are GOOD rels which are probably never going to go away

[12:07:21.0000] <Hixie>
"never going to go away" implies that they're not already gone

[12:07:38.0000] <Hixie>
in fact it implies that at some point they arrived

[12:07:45.0000] <Hixie>
and it's not clear to me that they ever did in any meaningful sense

[12:08:00.0000] <SamB>
well, okay, so yeah, there is that

[12:10:10.0000] <SamB>
/me supposes if he really wants to help he should implement a toolbar that actually *works* that uses them ...

[12:11:42.0000] <SamB>
... hmm, how come PDFs get all the fancy outline sidebars anyway ...

[12:28:09.0000] <jcgregorio>
https://github.com/google/canvas-5-polyfill

[12:28:36.0000] <jcgregorio>
I just launched that, feedback welcome :-)

[13:02:17.0000] <cabanier>
MikeSmith: http://www.w3c-test.org/2dcontext/fill-and-stroke-styles/2d.pattern.repeat.null.html is also testing an incorrect assumption. passing null to createPattern should not throw

[13:03:33.0000] <cabanier>
MikeSmith: the drawFocus tests will work on chrome canary with the pref turned on

[13:03:53.0000] <Ms2ger>
Oh really?

[13:05:28.0000] <Ms2ger>
Interesting

[13:05:41.0000] <Ms2ger>
PR?

[13:44:37.0000] <cabanier>
Ms2ger: were you talking to me?

[13:45:17.0000] <Ms2ger>
Yes

[13:45:49.0000] <cabanier>
:-)

[13:46:27.0000] <cabanier>
Ms2ger: are you saying createPattern should throw?

[13:46:39.0000] <Ms2ger>
Not anymore, no

[13:46:46.0000] <cabanier>
good

[13:46:47.0000] <Ms2ger>
So, want to fix the test? :)

[13:47:01.0000] <Ms2ger>
And add one for "null" as opposed to null; that should still throw

[13:47:04.0000] <cabanier>
yes. How do I do that?

[13:47:44.0000] <Ms2ger>
web-platform-tests in general or canvas tests in particular?

[13:47:57.0000] <cabanier>
the canvas tests

[13:47:58.0000] <cabanier>
brb

[13:48:58.0000] <Ms2ger>
Edit 2dcontext/tools/tests2d.yaml

[13:49:06.0000] <Ms2ger>
The format is pretty straightforward

[13:49:20.0000] <Ms2ger>
And then run 2dcontext/tools/gentest.py

[14:37:13.0000] <IZh>
It seems it is impossible to specify dates B.C. because of year must be positive.

[14:38:20.0000] <IZh>
I don't need it, but in some historic documents it is possible.

[14:48:04.0000] <gsnedders>
IZh: IIRC there was no use-case for being able to explicitly mark them up, given we rarely know dates

[14:56:11.0000] <Hixie>
yeah, if you go back more than a few 100 years, it gets realllllly complicated

[14:56:18.0000] <Hixie>
because e.g. our calendar didn't exist back then

[14:56:56.0000] <gsnedders>
Calendar is the least of the worries, really.

[14:58:05.0000] <TabAtkins>
Yeah, just be glad we ended up allowing Proleptic Gregorian.

[15:03:42.0000] <IZh>
Okay. :-)

[15:07:05.0000] <IZh>
What about colors? There are more and more monitors capable to display 30-bit colors.

[15:07:20.0000] <Hixie>
yeah

[15:07:22.0000] <Domenic_>
Wasn't there some smooth animating verison of scrollIntoView() being specced somewhere?

[15:07:28.0000] <Hixie>
color is hard

[15:07:35.0000] <Hixie>
too many places in the platform assume 32 bit colour

[15:07:41.0000] <Hixie>
(including alpha)

[15:07:58.0000] <TabAtkins>
IZh: Colors can be whatever depth you want.  You're not limited to the hex notation.

[15:08:09.0000] <IZh>
There is often lack of support by modern OSes, but I believe it will be more wide supported soon.

[15:08:09.0000] <TabAtkins>
Whether the browser actually uses anything bigger than 32-bit is up to it.

[15:08:13.0000] <Hixie>
you are in a lot of places

[15:08:33.0000] <Hixie>
e.g. rgb(1,1,1) and #XXX are both limited to 32 bit

[15:08:34.0000] <TabAtkins>
Domenic_: It's in CSSOM-View, I believe.

[15:08:46.0000] <TabAtkins>
Hixie: *Some* syntaxes are.

[15:08:52.0000] <TabAtkins>
Other syntaxes aren't.

[15:08:53.0000] <Hixie>
and it underlies a lot of the assumptions

[15:09:36.0000] <TabAtkins>
...like?

[15:09:42.0000] <IZh>
What syntax is suitable for 30-bit colors (10 bit per channel)?

[15:09:44.0000] <Domenic_>
TabAtkins: that was it, thanks. Nice spec. I assume no implementers? :P

[15:09:56.0000] <Hixie>
like, <input type=color> is a 32 bit color

[15:10:01.0000] <Hixie>
(well, 24 bit)

[15:10:04.0000] <TabAtkins>
IZh: Use rgb() with percentages, or use hsl().

[15:10:23.0000] <TabAtkins>
Hixie: Yeah, it exposes the color as a hex string, so 8bits per.

[15:11:02.0000] <Hixie>
and canvas exposes colours using rgba(n,n,n,m) 0<=n<=255

[15:11:34.0000] <Hixie>
i forget what cssom does

[15:11:40.0000] <TabAtkins>
So HTML makes a bunch of assumptions and only exposes colors as 8bit per.  CSS doesn't.

[15:12:51.0000] <Hixie>
oh nobody mentioned CSS. CSS might allow it, sure.

[15:13:34.0000] <Hixie>
CSSOM serialises to 32bit also, it looks like

[15:13:38.0000] <zewt>
doubt we'll see greater than 8bpc color in (consumer) displays any time soon

[15:14:03.0000] <Hixie>
so same problem there

[15:14:20.0000] <zewt>
could be sort of interesting to do temporal dithering on a 24bpp display to get higher resolution color, heh

[15:14:32.0000] <IZh>
I think the best way is a percentages with enough precision to select particular value up to 16-bit per channel -- the highest depth possible in some image formats

[15:15:13.0000] <TabAtkins>
Hixie: Where?

[15:15:14.0000] <IZh>
zewt: I have 30-bit capable display. ;-)

[15:15:20.0000] <zewt>
(which is what my plasma TV seems to do)

[15:15:39.0000] <Hixie>
TabAtkins: http://dev.w3.org/csswg/cssom/#serializing-css-values

[15:15:55.0000] <zewt>
"consumer", they're beyond rare heh

[15:16:11.0000] <TabAtkins>
rgb() no longer requires only integers in the N,N,N format.

[15:16:49.0000] <IZh>
zewt: not so rare as you think. :-) You can search for 30-bit colors

[15:17:01.0000] <TabAtkins>
(Got that fixed in Colors 4. Recent, so impls probably haven't caught up yet.)

[15:17:08.0000] <zewt>
they're precisely as rare as i think :)

[15:17:35.0000] <IZh>
zewt: the problem now is that only few apps like Photoshop can use it :-)

[15:17:55.0000] <Hixie>
TabAtkins: ah. i hope that doesn't break any scripts relying on the serialisation to be rounded off to integers.

[15:19:01.0000] <TabAtkins>
Me too!

[15:19:11.0000] <zewt>
even photoshop is bad at it and turns lots of stuff off

[15:19:13.0000] <TabAtkins>
Because I'm mainly trying to fix *my* scripts that do naive math and forgte to floor things to integers.

[15:19:57.0000] <TabAtkins>
Canvas is extra-bad, since accidentally setting thing to "rgb(127.5, 127.5, 127.5)" gives you pure black.

[15:20:03.0000] <TabAtkins>
Very annoying to debug unless you learn to recognize it.

[15:20:31.0000] <IZh>
zewt: what you mean? I read that all is ok. But I have no time yet to play with it by myself.

[15:22:19.0000] <zewt>
i wonder if it would be useful to allow serializing colors to [0,255] floats to truncate the decimal place early, so (1/65535) can be output as something like 0.004 instead of 0.003921568627

[15:22:55.0000] <zewt>
allow truncating to any value that gives the same result when converted to a 16-bit int, or something like that

[15:23:20.0000] <TabAtkins>
It's annoying that the divisor isn't 256, as that makes for nice pretty decimals.

[15:23:31.0000] <TabAtkins>
10-bit color just has .25, .5, .75 in that case.

[15:24:10.0000] <zewt>
1/256 is 0.00390625, which is beyond my ability to recognize as 1/power of two, heh

[15:24:28.0000] <TabAtkins>
The values are already scaled to 1/256, so that's just "1".

[15:25:09.0000] <TabAtkins>
The issue is that the divisor right now isn't 1/256, but 1/255, which has worse decimal serialization.

[15:25:22.0000] <zewt>
no, 1/256 (0.00390625) is the value you'd get for 1/65536 after converting it to [1,256]

[15:25:35.0000] <TabAtkins>
Oh, that's 16-bit channels.

[15:25:41.0000] <TabAtkins>
Sure.

[15:25:49.0000] <TabAtkins>
([0,256])

[15:26:05.0000] <zewt>
i'll pass on a 257-color mode :P

[15:26:23.0000] <TabAtkins>
Aw, come on.

[15:26:27.0000] <zewt>
IZh: many filters only work in 8-bit, and tons don't work in 32-bit

[15:26:37.0000] <zewt>
(they're probably gradually fixing them)

[15:26:59.0000] <zewt>
but the main point of 16-bit editing in photoshop is editing, not display

[15:27:36.0000] <zewt>
(which I've used many times; helps prevent artifacts cropping in when you're doing a lot of filtering)

[15:28:12.0000] <IZh>
zewt: 1. You can see raw image from your camera with more wider dynamic range.

[15:28:46.0000] <zewt>
16-bit color doesn't give you more dynamic range, it gives you higher resolution in the same range

[15:29:16.0000] <IZh>
Agree.

[15:29:21.0000] <zewt>
do i have to

[15:29:31.0000] <IZh>
Finer gradients

[15:29:51.0000] <zewt>
one of photoshop's dumb things is that it doesn't (as far as I know) support dithering gradients

[15:30:39.0000] <IZh>
With 30-bit mode you don't need it. ;-)

[15:30:50.0000] <zewt>
not sure what you're trying to argue :P

[15:31:09.0000] <IZh>
Although you have a 4k display :-)

[15:31:23.0000] <zewt>
(no I don't)

[15:31:36.0000] <IZh>
Me too. Alas.

[15:32:07.0000] <zewt>
afk

[15:33:40.0000] <astearns>
zewt: the gradient tool options has a dither checkbox (never used it, though)

[15:40:51.0000] <IZh>
What about hex noration, where bits are "left-aligned"?

[15:41:50.0000] <IZh>
I mean that ff, ff4, ff40 will give the same value ff when converted to 8-bit.

[15:42:22.0000] <IZh>
I mean, most significant bit first

[15:42:57.0000] <TabAtkins>
IZh: What are you talking about?

[15:43:04.0000] <IZh>
Colors

[15:43:24.0000] <TabAtkins>
Yes.  What are you talking about, with this discussion of left-aligned bits?

[15:43:50.0000] <IZh>
I propose new encoding :-)

[15:43:55.0000] <IZh>
Of colors

[15:44:55.0000] <TabAtkins>
Why?

[15:45:41.0000] <IZh>
To support different depth without very long floating point numbers.

[15:46:21.0000] <cabanier>
zewt: sure it does

[15:46:29.0000] <cabanier>
support dithering gradients

[15:47:02.0000] <IZh>
TabAtkins: Just an idea.

[15:48:07.0000] <cabanier>
IZh: is this just to reduce banding? nothing's stopping a browser from making that optimization

[15:48:54.0000] <cabanier>
IZh: colors don't have to be in high precision for that. Adobe apps have been doing that for 18 years

[15:50:03.0000] <IZh>
cabanier: I believe that sooner 30-bit displays will conquer the market

[15:50:27.0000] <cabanier>
ok

[15:50:38.0000] <IZh>
cabanier: So you will need to specify particular color.

[15:50:46.0000] <cabanier>
IZh: why?

[15:52:00.0000] <IZh>
cabanier: For image manipulation, for example

[15:53:27.0000] <cabanier>
IZh: with color managments, you will never get the actual color value on the display

[15:55:08.0000] <IZh>
cabanier: I think, this is orthogonal things

[15:55:48.0000] <cabanier>
IZh: 30 bit gives you more consistency over the color range so you don't lose precision

[15:57:15.0000] <IZh>
 cabanier: It gives the ability to set, for example, rgb(1023, 1022, 1000) color

[15:57:59.0000] <zewt>
oh yeah, it's gradient layer styles that don't dither

[15:59:53.0000] <cabanier>
zewt: there's a dither button for gradient layer styles

[16:00:36.0000] <zewt>
ah, that's new

[16:01:03.0000] <zewt>
(i see it in CS6, i do a lot in CS4)

[16:01:05.0000] <cabanier>
Photoshop CS6

[16:01:07.0000] <cabanier>
ah

[16:08:25.0000] <cabanier>
IZh: css color allows decimal points for color values. That should work for you, right?

[16:12:34.0000] <IZh>
cabanier: yes. The only thing is long syntax. 7/1024 = 0.0068359375 vs 013

[16:17:41.0000] <IZh>
I mean 01C :-)

[16:21:57.0000] <zewt>
have browsers implemented high-color support in other systems (canvas, CSS colors, gradients and shadows, image rendering, ) ... well okay

[16:26:02.0000] <cabanier>
zewt: no :-) not even decent color support except maybe Safari

[16:26:50.0000] <zewt>
i presumed that, it was a leading question to "then lobby for that before asking for new features" :)


2014-04-30
[17:25:38.0000] <MikeSmith>
cabanier: thanksーturned on the Chrome "Enable experimental canvas features" flag and re-generated the test report http://w3c.github.io/test-results/2dcontext/less-than-2.html

[17:27:04.0000] <MikeSmith>
cabanier: about http://www.w3c-test.org/2dcontext/fill-and-stroke-styles/2d.pattern.repeat.null.html & http://www.w3c-test.org/2dcontext/fill-and-stroke-styles/2d.pattern.image.broken.html ーthanks also, I'll fix those and open a PR

[17:29:46.0000] <MikeSmith>
cabanier: ah I see you opened a PR already

[17:37:26.0000] <MikeSmith>
cabanier: hmm that new http://web-platform.test:8000/2dcontext/fill-and-stroke-styles/2d.pattern.image.broken.html test fails too

[17:37:48.0000] <MikeSmith>
"that is not a DOMException INVALID_STATE_ERR: property "code" is equal to undefined, expected 11"

[17:44:40.0000] <MikeSmith>
cabanier: yeah seems that still nobody actually conforms to the spec on this yet, right?

[17:44:44.0000] <MikeSmith>
nobody throws

[17:50:12.0000] <MikeSmith>
cabanier: wait in the case where there is not image at a given URL, the image is not going to be in the "broken" state is it? it just remains "unavailable"

[17:55:56.0000] <MikeSmith>
an nah I see it does end up as "broken"

[18:03:37.0000] <MikeSmith>
cabanier: fyi https://bugzilla.mozilla.org/show_bug.cgi?id=405761 "drawImage should throw INVALID_STATE_ERR on invalid image, not NS_ERROR_NOT_AVAIL"

[18:03:57.0000] <MikeSmith>
which is not createPattern but I guess it's the same issue, as far as Firefox goes

[19:28:45.0000] <cabanier>
MikeSmith: It's weird. when I try the createPattern case with my own test file in chrome canary, it throws the right exception, but not in the test

[19:29:08.0000] <cabanier>
MikeSmith: I opened a firefox bug on it: https://bugzilla.mozilla.org/show_bug.cgi?id=1003380

[19:29:33.0000] <cabanier>
MikeSmith: I got an r+ for the patch but the test is failing. Likely because the image is not in the broken state when the test runs

[19:45:58.0000] <MikeSmith>
/me looks at cabanier bug

[19:49:29.0000] <MikeSmith>
cabanier: sounds like you've got another Firefox bug to fix :-) by the time you're done you'll have re-written all the image-processing logic in Firefox. And by the time you're done with that, Hixie will have landed the image-processing changes in the spec and your changes will be out of date already :-)

[19:49:47.0000] <cabanier>
MikeSmith: I marked 405761 as a duplicate

[19:49:53.0000] <MikeSmith>
ok

[19:49:57.0000] <cabanier>
:-)

[19:50:24.0000] <MikeSmith>
so about the createPattern test, maybe there's a bug in the test

[19:50:44.0000] <MikeSmith>
but I dunno what it'd be

[19:50:55.0000] <cabanier>
MikeSmith: I don't know what's going on. I can't tell from stepping through.

[19:51:06.0000] <cabanier>
MikeSmith: it seems the image state is fragile

[19:51:36.0000] <MikeSmith>
sounds like

[21:05:42.0000] <Hixie>
MikeSmith: aw man, img loading. i don't suppose you want to spec that do you.

[21:05:49.0000] <Hixie>
/me is so lot looking forward to speccing that

[21:05:54.0000] <Hixie>
uh, not, not lot

[21:19:07.0000] <MikeSmith>
Hixie: I don't want to spec it :)

[21:19:21.0000] <Hixie>
bummer

[21:19:47.0000] <cabanier>
Hixie: didn't you already spec it?

[21:20:07.0000] <cabanier>
or is it not detailed enough?

[21:20:13.0000] <Hixie>
see recent mails to the list, i linked to the relevant bugs

[21:22:43.0000] <MikeSmith>
Hixie: I guess you probably don't necessarily _want_ to spec it either. But as usual if you don't, nobody else going to

[21:22:56.0000] <Hixie>
:-)

[22:13:45.0000] <Hixie>
woot, my parser is up to passing 5000 tests.

[22:13:50.0000] <Hixie>
no idea how many tests there are...

[22:14:01.0000] <Hixie>
and about 4000 of those seem to be entity tests...

[22:14:05.0000] <Hixie>
but anyway...

[22:28:53.0000] <zcorpan>
Hixie: html parser?

[23:25:04.0000] <zcorpan>
Hixie: now the spec looks nice!

[00:19:18.0000] <hsivonen>
Hixie: no complaints about the TLD-based guessing yet

[00:19:50.0000] <hsivonen>
Hixie: meanwhile, Firefox 29 shipped, so I should nugde the telemetry folks about running the analysis for 27 and 28 now

[00:20:47.0000] <hsivonen>
SimonSapin: the use case for VISCII is editing an mq patch as text in gedit when the patch patches both UTF-8 files and windows-1252 files, so the patch as a whole won't decode cleanly as either

[00:21:38.0000] <hsivonen>
SimonSapin: VISCII a) is supported by gedit, b) assigns all the bytes and c) doesn't do bidi or other munging

[00:23:08.0000] <Ms2ger>
Speaking of obscure use cases :)

[00:32:20.0000] <zcorpan>
https://xkcd.com/1172/

[04:08:38.0000] <jgraham>
zcorpan: You should get TabAtkins to sign up as a reviewer for the quirks mode spec

[04:08:54.0000] <zcorpan>
TabAtkins: ^

[04:09:21.0000] <jgraham>
+tests

[04:18:59.0000] <zcorpan>
mathiasbynens++ for record turnaround time re CSS.escape spec changes

[04:41:29.0000] <mathiasbynens>
zcorpan: Mozilla just landed an initial implementation based on the old spec, bad timing :/

[04:42:31.0000] <zcorpan>
that's ok, it'll just escape some things that are not necessary anymore (but were necessary per css2.1)

[04:42:45.0000] <zcorpan>
(before errata)

[04:43:08.0000] <zcorpan>
i don't like errata

[04:45:54.0000] <MikeSmith>
"In accordance with prophecy" should be the new meme

[04:47:01.0000] <MikeSmith>
zcorpan: errata are the new substantive changes

[04:49:04.0000] <MikeSmith>
we should just give up on trying to create an XML-ER spec and just have the XML Core group publish it all in successive pieces as "errata" for the XML 5th edition spec

[04:54:37.0000] <zcorpan>
what if you need to errata the errata? can it go deeper?

[04:55:45.0000] <zcorpan>
errata #1: fix the link in the errata to this list of errata

[04:56:45.0000] <zcorpan>
(obviously each level should be harder to find)

[04:58:30.0000] <zcorpan>
((the next level is uncommitted))

[05:00:21.0000] <zcorpan>
(((limbo is not written down anywhere)))

[05:22:05.0000] <MikeSmith>
hah

[05:33:23.0000] <annevk>
http://what-if.xkcd.com/94/ <3

[06:05:57.0000] <annevk>
mathiasbynens: so what if I pass in a surrogate to CSS.escape()... I get it back? Does not seem entirely correct

[06:18:00.0000] <mathiasbynens>
annevk: do you mean that whenever CSSOM uses the term “character”, it means scalar value/symbol?

[06:18:20.0000] <mathiasbynens>
annevk: or should CSSOM be changed so that it is

[06:25:08.0000] <annevk>
mathiasbynens: I wonder if the behavior for CSS.escape("\uD800") is what we want

[06:25:48.0000] <annevk>
mathiasbynens: it not defining what it means by character is an issue I suppose

[06:26:02.0000] <mathiasbynens>
agreed

[07:25:37.0000] <zewt>
wow, really? gmail's editor now appears to be swallowing control-pgup/pgdn, preventing me from changing tabs with the keyboard while editing an email

[07:28:53.0000] <SamB>
zewt: time to switch to basic html?

[07:30:19.0000] <SamB>
(it's not as bad as it sounds -- there's still some JavaScript for autocompletion, it's just still possible to use the page if it doesn't work)

[07:44:38.0000] <mathiasbynens>
/me still wishes Gmail would make the annoying hard-wrapping optional for plaintext emails

[08:07:16.0000] <annevk>
I'd rather they wrap the whole thing

[08:07:23.0000] <annevk>
http://lists.w3.org/Archives/Public/public-pointer-events/2014AprJun/0020.html is ugly

[08:09:10.0000] <annevk>
JakeA: seems like the SW spec is broken for interfaces?

[08:11:05.0000] <JakeA>
annevk: ugh, yes

[08:11:16.0000] <JakeA>
will see which commit busted that

[08:17:36.0000] <JakeA>
annevk: I've rolled it back to the last good commit while I figure out what's happening

[08:29:37.0000] <JakeA>
annevk: New version of polymer broke it. Asked Alex to look into it. gh-pages version is working now though

[08:31:32.0000] <annevk>
JakeA: ta

[08:31:52.0000] <annevk>
Polymer seems like such overkill for a spec

[08:37:47.0000] <Domenic_>
I like the idea of killing preprocessors via custom elements.

[08:42:35.0000] <mathiasbynens>
annevk: that’s hypermail’s fault, though

[08:46:39.0000] <Hixie>
gsnedders: yt?

[08:46:53.0000] <Hixie>
gsnedders: are you doing test coverage analysis of the parser by any chance?

[08:54:34.0000] <Ms2ger>
https://twitter.com/mattur/status/461240899503407105

[08:55:30.0000] <annevk>
Pretty sure Philip` would have spotted that before they even started to attempt writing Polyglot

[08:56:02.0000] <Hixie>
anyone want to take over maintaining the blog? it's the main user of CPU on our machine these days.

[08:59:39.0000] <jgraham>
Hixie: 4 posts in 2 years? Seems like you could just shoot it in the head

[08:59:49.0000] <annevk>
Hixie: maintaining how?

[09:00:13.0000] <jgraham>
Maybe try to dump the content somehow first

[09:00:18.0000] <Hixie>
maintaining like maybe transitioning us to something that doesn't take huge amounts of CPU just to report content that, as jgraham points out, has only changed 4 times in 2 years

[09:00:35.0000] <annevk>
/me attempts to reach blog.whatwg.org

[09:01:11.0000] <Hixie>
the lowest hanging fruit would be making /feed static somehow

[09:01:47.0000] <Domenic_>
Octopress has worked very well for me. (Static blog generator.)

[09:01:51.0000] <annevk>
I can't even get to the server at this point

[09:01:59.0000] <Hixie>
load average: 35.36, 20.42, 11.41

[09:02:05.0000] <Domenic_>
My preference for Node toolchains over Ruby ones would make me want to try Ghost, but Octopress is known-working.

[09:02:14.0000] <Hixie>
about 19 of the top 20 processes on the machine are:

[09:02:24.0000] <Hixie>
4897 17693 lhunt      0:00.96  0.3  262m  34m  1.8 ?         php54.cgi

[09:02:29.0000] <Hixie>
where "lhunt" is the user that runs the blog

[09:02:31.0000] <annevk>
Pretty sure WP has plug-ins to make most stuff stable

[09:02:43.0000] <annevk>
s/stable/static/

[09:02:53.0000] <annevk>
Just need to get in...

[09:02:58.0000] <Hixie>
yeah i'd be shocked if WP didn't have something like that

[09:03:25.0000] <Hixie>
making the RSS static was one of the first optimisations i made to my own blog software decades ago :-)

[09:03:43.0000] <annevk>
/me updates blog

[09:04:54.0000] <jgraham>
Oh, look http://octopress.org/docs/plugins/render-partial/ sounds like what I want for the testthewebforward website

[09:05:39.0000] <jgraham>
Domenic_: Any idea if that works directly with github static pages or whatever they're called

[09:05:55.0000] <jgraham>
testthewebforward is using raw Jekyll

[09:06:01.0000] <Domenic_>
jgraham: yup, any static file server. I host http://domenic.me/ with GitHub pages + a CNAME file.

[09:06:21.0000] <Domenic_>
AFAICT Octopress is just Jekyll + some blog-specific helpers

[09:06:22.0000] <jgraham>
Domenic_: Right, but I think GitHub have some auto-build thing

[09:06:32.0000] <Domenic_>
jgraham: yeah, but I don't use that, I just push the files.

[09:06:40.0000] <Domenic_>
after building locally

[09:06:51.0000] <jgraham>
Domenic_: Right, but testthewebforward does

[09:07:00.0000] <jgraham>
Which is what I want to change

[09:07:01.0000] <Domenic_>
jgraham: oh i see what you're saying. Cool!

[09:08:04.0000] <jgraham>
Looks like the answer is no :(

[09:08:14.0000] <cabanier>
Ms2ger: can you do merge your own pull request?

[09:08:19.0000] <cabanier>
s/do//

[09:08:36.0000] <jgraham>
cabanier: Which repo?

[09:08:50.0000] <cabanier>
jgraham: w3c/web-platform-tests

[09:09:16.0000] <jgraham>
cabanier: If it is reviewed on github or critic then feel free to merge

[09:09:57.0000] <cabanier>
jgraham: how do I ask for review there? Do I assign it to someone?

[09:10:00.0000] <annevk>
Hixie: blog.whatwg.org is super slow

[09:10:12.0000] <Hixie>
yes

[09:10:23.0000] <jgraham>
cabanier: critic automagically asks for review

[09:10:25.0000] <Hixie>
that's why i mentioned it eaclier :-)

[09:10:28.0000] <Hixie>
earlier even

[09:10:34.0000] <jgraham>
cabanier: https://critic.hoppipolla.co.uk/r/1416

[09:10:56.0000] <gsnedders>
Hixie: no, but it's trivial to do from html5lib

[09:11:25.0000] <gsnedders>
Hixie: except the fact that that doesn't necessarily perfectly match the spec, as it is slightly out of date

[09:11:32.0000] <cabanier>
jgraham: got it!

[09:11:36.0000] <TabAtkins>
annevk: The behavior for CSS.escape("\uD800") is that you get a string containing U+FFFD, right?

[09:11:51.0000] <gsnedders>
Hixie: and what are you looking for? line coverage? branch coverage? path coverage?

[09:12:07.0000] <Hixie>
gsnedders: mostly coverage of each of the switch statements' branches, i think

[09:12:17.0000] <Hixie>
gsnedders: just to make sure we've covered all of them at least once

[09:12:27.0000] <annevk>
TabAtkins: no, you get U+D800 back with the current API, though it depends on what character means whether or not it crashes

[09:13:02.0000] <gsnedders>
Hixie: ping me in half an hour and I'll check what html5lib currently gives

[09:13:07.0000] <Hixie>
gsnedders: i can probably instrument my own code to check later if you haven't, i was just curious if you were looking into it. could be a useful thing to look at.

[09:13:15.0000] <TabAtkins>
Hmm.  I'd expect either U+FFFD or "\d800", which escapes to a U+FFFD character.

[09:13:21.0000] <gsnedders>
Hixie: it's trivial to do with html5lib, and I've done it before

[09:13:26.0000] <Hixie>
gsnedders: ah ok, cool

[09:13:32.0000] <TabAtkins>
Depending on how escape() is defined.

[09:13:37.0000] <gsnedders>
Hixie: like nosetests --coverage or something, I forget the argument needed

[09:13:44.0000] <Hixie>
cool

[09:13:52.0000] <annevk>
Hixie: cache plugin is on and updated now...

[09:13:54.0000] <Hixie>
/me wishes he could say the same of FPC

[09:13:54.0000] <gsnedders>
but yeah, me -> uni

[09:13:58.0000] <annevk>
Hixie: hopefully it works better?

[09:14:17.0000] <Hixie>
(i think you have to use like valgrind or something to do coverage testing for FPC programs)

[09:14:20.0000] <Hixie>
annevk: cool

[09:14:36.0000] <Hixie>
annevk: does that make /feed basically static?

[09:15:09.0000] <Hixie>
looks like yes

[09:15:17.0000] <Hixie>
there's a huge comment at the end of the feed now talking about the cache status

[09:15:35.0000] <Hixie>
i'm guessing that's not necessary :-)

[09:16:27.0000] <annevk>
hmm

[09:16:50.0000] <Hixie>
thanks for doing this

[09:16:52.0000] <Hixie>
it should be a huge help

[09:21:08.0000] <jgraham>
cabanier: You want to add your email to https://critic.hoppipolla.co.uk/home so you get notifications

[09:24:19.0000] <annevk>
Hixie: I'll look into disabling debug

[09:24:27.0000] <cabanier>
jgraham: done. let me know if I'm not using the toold correctly

[09:25:57.0000] <Hixie>
annevk: cool

[09:26:05.0000] <annevk>
Hixie: the admin panel is sooooo slow

[09:28:18.0000] <Hixie>
the load average is dropping

[09:28:28.0000] <Hixie>
but it's still 4.64, 7.54, 8.89

[09:29:30.0000] <jgraham>
cabanier: Looks like you are doing just fine at the moment. I suspect Ms2ger is particularly interested in "null" rather than a randomly chosen invalid value though (I didn't check the other test, I'm just assuming that it doesn't use "null")

[09:31:10.0000] <cabanier>
jgraham: yes, it uses a bogus value

[09:31:26.0000] <cabanier>
jgraham: maybe he's worried that someone tests for the "null" string?

[09:31:39.0000] <annevk>
Hixie: should be gone now; if you're logged in you might still see it or maybe it's another kind of artifact

[09:31:59.0000] <Hixie>
annevk: k

[09:32:02.0000] <Hixie>
annevk: thanks!

[09:32:35.0000] <annevk>
Domenic_: tools used to fetch DTDs, brought netscape.com nearly to its knees back in the RSS days

[09:32:54.0000] <Domenic_>
wowwww

[09:33:23.0000] <Hixie>
made w3c suffer too

[09:33:46.0000] <annevk>
Yeah, W3C might still suffer I guess

[09:33:57.0000] <cabanier>
jgraham: I'll add that test. It's easy

[09:38:52.0000] <beverloo_>
MikeSmith, thanks for the push repo!

[09:42:45.0000] <cabanier>
jgraham: I think I messed something up

[09:45:08.0000] <zcorpan>
TabAtkins: r? https://critic.hoppipolla.co.uk/r/1424

[09:45:27.0000] <zcorpan>
TabAtkins: also would you be OK with setting up a filter for quirks-mode/ ?

[09:47:25.0000] <TabAtkins>
Dunno how to do so, but I'm fine with such.

[09:49:54.0000] <TabAtkins>
annevk: Yeah, W3C still has caching infrastructure in place to handle DTD queries super-cheaply.

[09:50:39.0000] <jgraham>
cabanier: Seems like you created a new review rather than pushing a commit to your previous branch?

[09:51:55.0000] <jgraham>
cabanier: Right, the normal mode of operation is to address all the comments in that review and not merge until it says "Accepted" in big letters

[09:52:11.0000] <cabanier>
jgraham: I directly committed something in the master github. I have no idea how that happened.

[09:54:25.0000] <cabanier>
jgraham: ok. I should not have merge that pullrequest yet either

[09:54:35.0000] <zewt>
can just reset it if it's not pushed

[09:55:07.0000] <jgraham>
cabanier: Yeah, I'm not sure what you did here, but basically no harm done I thnk

[09:55:15.0000] <cabanier>
weird

[09:56:06.0000] <gsnedders>
Hixie: http://stuff.gsnedders.com/html5lib-coverage-20140430/ is what html5lib-python currently has. html5lib.html5parser and html5lib.tokenizer are probably the only really interesting cases

[09:57:31.0000] <zcorpan>
TabAtkins: https://critic.hoppipolla.co.uk/home click "add filter", type quirks-mode/ in path, make sure it's the right repo and type is "reviewer", click save

[09:57:59.0000] <zcorpan>
TabAtkins: https://critic.hoppipolla.co.uk/tutorial?item=filters if you feel like reading about it

[09:58:07.0000] <zcorpan>
TabAtkins: and thanks :-)

[09:58:11.0000] <TabAtkins>
kk

[09:58:38.0000] <gsnedders>
Hixie: so we're missing tests for <![FOO[ where <![CDATA[ is parsed, some case in the AAA, and a few cases of branches always being taken

[09:59:33.0000] <zcorpan>
jgraham: wtf happened here? https://critic.hoppipolla.co.uk/r/1423 https://critic.hoppipolla.co.uk/r/1424 https://critic.hoppipolla.co.uk/r/1425 https://critic.hoppipolla.co.uk/r/1426

[09:59:34.0000] <Hixie>
gsnedders: neat

[10:01:01.0000] <gsnedders>
Hixie: a few of those cases I'm not sure it's even possible to not take the branch quickly looking

[10:01:09.0000] <jgraham>
zcorpan: My guess is that MikeSmith was trying to help me set up wptrunner in critic, running into problems and pressing the "test hook" button in w-p-t which re-sends the last request

[10:01:19.0000] <gsnedders>
Hixie: (proof is left as an exercise to the reader) :)

[10:01:22.0000] <Hixie>
gsnedders: dead code in html5lib?

[10:01:25.0000] <zcorpan>
jgraham: oh

[10:01:39.0000] <zcorpan>
ok

[10:02:03.0000] <gsnedders>
Hixie: the branch is always taken, so could maybe hoist the body of the if statement and get rid of the if statement

[10:02:24.0000] <zcorpan>
MikeSmith: wanna drop the excess reviews? :-)

[10:03:20.0000] <gsnedders>
Hixie: anyhow, time for me to go back to^W^W^W start revising for exam tomorrow :)

[10:03:52.0000] <Hixie>
gsnedders: enjoy!

[10:05:13.0000] <jgraham>
MikeSmith: I dropped them, no need for you to do anything

[10:19:05.0000] <MikeSmith>
jgraham: OK

[10:19:25.0000] <MikeSmith>
jgraham: yeah your guess was correct

[10:19:34.0000] <MikeSmith>
monkey vs typewriter

[10:31:40.0000] <TabAtkins>
What's the correct repo in critic for quirks-mode tests?

[10:32:49.0000] <jgraham>
TabAtkins: web-platform-tests

[10:32:57.0000] <Ms2ger>
Since... yesterday?

[10:33:22.0000] <jgraham>
Today

[10:33:41.0000] <jgraham>
Possibly depending on timezone or sleeping pattersm

[10:33:42.0000] <MikeSmith>
beverloo_: glad to help

[10:33:45.0000] <jgraham>
*patterns

[10:33:47.0000] <TabAtkins>
Cool, thanks.

[10:34:10.0000] <MikeSmith>
Hixie: let's move the blog over to hosting at w3.org!

[10:34:22.0000] <MikeSmith>
that'll probably work out well

[10:34:26.0000] <jgraham>
MikeSmith: Are we still stuck with the wptrunner webhook thing?

[10:34:40.0000] <MikeSmith>
jgraham: yeah I'm stumped at least

[10:34:54.0000] <Ms2ger>
MikeSmith, ....interesting idea

[10:35:32.0000] <MikeSmith>
jgraham: if Robin can get some time to look at it he might be able to figure it out. I have no clue myself at this point

[10:35:36.0000] <jgraham>
MikeSmith: Did you try choosing a different content type and then switching back, like darobin suggested?

[10:35:39.0000] <MikeSmith>
jgraham: I can look more in the morning my time

[10:35:46.0000] <MikeSmith>
jgraham: yeah did that

[10:35:48.0000] <jgraham>
MikeSmith: OK

[10:35:55.0000] <jgraham>
MikeSmith: Thanks for the help

[10:36:22.0000] <jgraham>
Probably we should just ask github at this point

[10:36:30.0000] <MikeSmith>
yeah

[10:37:17.0000] <MikeSmith>
jgraham: that config UI makes me want to kick somebody in the face

[10:37:53.0000] <Ms2ger>
Hey

[10:37:59.0000] <Ms2ger>
The previous UI was "use the API"

[10:38:15.0000] <MikeSmith>
I like that UI better

[10:38:30.0000] <Hixie>
MikeSmith: heh

[10:38:30.0000] <MikeSmith>
at least somebody didn't get paid money to spend time developing that UI

[10:39:12.0000] <MikeSmith>
Hixie: speaking of blogs btw the blog thing on w3.org also sucks up most of the CPU. except in that case it's multiplied by 150 times. Or however many CGs there are. It's nuts

[10:39:18.0000] <MikeSmith>
so, yay for blogs

[10:40:27.0000] <gsnedders>
Hixie: you just running Apache?

[10:40:50.0000] <Hixie>
MikeSmith: nice

[10:40:52.0000] <Hixie>
gsnedders: yeah

[10:41:43.0000] <gsnedders>
Hixie: should be able to throw mod_cache in front of teh blog, I think

[10:42:03.0000] <MikeSmith>
cabanier: if/when you have time, please review https://critic.hoppipolla.co.uk/r/1239

[10:42:13.0000] <MikeSmith>
cabanier: which is for https://github.com/w3c/web-platform-tests/pull/851

[10:42:16.0000] <Hixie>
gsnedders: configuring apache on dreamhost is a pain

[10:42:23.0000] <gsnedders>
Hixie: gl;hf ;P

[10:42:29.0000] <Hixie>
:-)

[10:52:20.0000] <MikeSmith>
jgraham: please try again on that hook right now if you have time

[10:52:50.0000] <MikeSmith>
when I went to check it now it was set back to no-JSON and with SSL turned back on

[10:53:01.0000] <MikeSmith>
which I re-switched it back again

[10:56:23.0000] <jgraham>
MikeSmith: Checking

[10:56:41.0000] <jgraham>
MikeSmith: Worked :)

[10:56:53.0000] <MikeSmith>
sweet

[10:57:17.0000] <MikeSmith>
so I can now go to sleep feeling like I actually accomplished something useful today

[10:57:26.0000] <jgraham>
Heh

[10:57:35.0000] <jgraham>
Sleep well :)

[12:03:14.0000] <cabanier>
MikeSmith: that test looks good to me

[14:47:24.0000] <IZh>
Hixie: Hi.

[14:48:35.0000] <IZh>
Hixie: My script reported that your URL returned HTTP 504 status for last document.

[14:51:24.0000] <Hixie>
504!

[14:51:30.0000] <Hixie>
/me tries to remember what 504 is :-)

[14:51:38.0000] <Hixie>
oh gateway timeout

[14:51:40.0000] <Hixie>
yeah

[14:51:44.0000] <Hixie>
server was having issues this morning

[14:53:47.0000] <IZh>
Should my script handle this by repeating sending?

[14:56:35.0000] <Hixie>
nah

[14:56:43.0000] <Hixie>
i would just ignore any errors you get back

[14:57:01.0000] <Hixie>
i'll update the spec again soon enough and then it'll regenerate

[15:01:26.0000] <IZh>
Ok :-)

[15:11:48.0000] <eligrey>
i'd like to request an account for the wiki (desired username: eligrey)

[15:12:17.0000] <eligrey>
the first edit i'd like to make is writing up a navigator.cores proposal

[15:12:42.0000] <eligrey>
(which exposes the amount of total hardware threads available to the system)

[15:13:47.0000] <eligrey>
the wiki says to talk to "these permanent autoconfirmed members" (redlink) :/

[15:19:46.0000] <Hixie>
eligrey: e-mail?

[15:19:55.0000] <eligrey>
me⊙ec

[15:20:19.0000] <Hixie>
done

[15:24:24.0000] <eligrey>
ok thanks

[16:06:29.0000] <Hixie>
anyone got a recent IE? what does http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2883 look like?

[16:07:25.0000] <boogyman>
by recent you mean nightly build or 11?

[16:08:37.0000] <boogyman>
i have 10.0.9

[16:10:29.0000] <boogyman>
http://minus.com/i/bpp3b2KgaK6Vy @ Hixie for IE 10.0.9

[16:10:39.0000] <Hixie>
thanks

[16:10:48.0000] <Hixie>
interesting

[16:10:57.0000] <Hixie>
so safari and chrome do cross-origin font loads, but IE and mozilla do not

[16:35:30.0000] <hober>
Hixie: http://www.w3.org/2011/10/31-webapps-minutes.html#item02

