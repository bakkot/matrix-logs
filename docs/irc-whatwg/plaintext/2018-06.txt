2018-06-01
[18:49:28.0000] <annevk>
"into document" is the bit you omitted from your quote that's rather key there

[19:42:05.0000] <MikeSmith>
astearns: so about the github/w3c perms, if I understand correctly, the thing that blocks you is that you can’t on your own add people to github/w3c teams unless they’re already members of the w3c org?

[19:50:09.0000] <MikeSmith>
I think for any repo where you have Admin perms, you can still add anybody you want as a CollaboratorーI mean without adding them to a Team

[19:51:45.0000] <MikeSmith>
to me, using github teams seems like overkill unless you have multiple repos that you want to give the same set of people write access to (like we do with web-platform-tests)

[19:54:56.0000] <annevk>
They have multiple repos though

[19:55:32.0000] <annevk>
Less than I’d like, but more than one

[20:02:45.0000] <astearns>
MikeSmith: You are correct. I can add random people as collaborators, but the current set are official CSSWG members, so I think it makes sense to add them to the org

[20:03:36.0000] <MikeSmith>
astearns: OK

[20:06:14.0000] <MikeSmith>
annevk: you mean web-platform-tests has multiple repos? and it should have more?

[20:06:50.0000] <annevk>
MikeSmith: I meant CSS

[20:06:55.0000] <MikeSmith>
ah

[20:06:57.0000] <MikeSmith>
yeah

[20:07:05.0000] <annevk>
Might have missed some context

[20:07:11.0000] <MikeSmith>
no

[20:07:21.0000] <MikeSmith>
that was the original context

[20:07:36.0000] <MikeSmith>
but IMHO too yeah CSS should have more repos

[20:09:19.0000] <MikeSmith>
anyway as far as the thing about giving perms for a repo Admin adding members to the w3c org, as far as I can see the only way to do that is by giving Admin (Owner?) perms for the entire w3c org

[20:10:07.0000] <MikeSmith>
and one reason for not being able to do that is, there are some private repos in the org, so it would also mean exposing those to them

[20:11:45.0000] <MikeSmith>
but I guess one way to deal with that particular part would be to move those private repos to a different org, e.g., w3c-private or whatever

[20:12:43.0000] <MikeSmith>
but even if we did that, the other people would still have complete owner/admin perms for changing whatever they wanted in org config, and blocking users org-wide, etc.

[20:13:12.0000] <MikeSmith>
summary: it’s complicated :)

[20:13:15.0000] <astearns>
MikeSmith: if associating a W3C account with a github handle would automatically invite people to the W3C github org, then I think my particular problem would be solved. Tab suggested this on sysreq

[20:13:23.0000] <MikeSmith>
yes

[20:13:33.0000] <MikeSmith>
I will follow up with the systeam about that

[20:14:09.0000] <MikeSmith>
since it’s their tool that does the W3C-account association

[02:46:08.0000] <zcorpan>
ok folks, which text editor should I switch to (on macOS)?

[02:47:48.0000] <MikeSmith>
vim

[02:48:18.0000] <zcorpan>
I like rectangular selection and multiple cursors, multi-file regexp search & replace

[02:49:35.0000] <MikeSmith>
vim has rectangular selection built in

[02:50:15.0000] <MikeSmith>
multi-file regexp search & replace I reckon it either has built in or there’s some plugin

[02:50:31.0000] <MikeSmith>
multiple cursors I dunno

[02:51:15.0000] <MikeSmith>
personally for multi-file regexp search & replace I just use perl from the shell

[03:23:02.0000] <zcorpan>
https://github.com/w3c/payment-request/pull/715 seems like a useful template we could use for PRs

[03:23:37.0000] <zcorpan>
https://blog.github.com/2016-02-17-issue-and-pull-request-templates/

[03:23:47.0000] <zcorpan>
annevk: Domenic: foolip: thoughts?

[03:25:10.0000] <zcorpan>
https://github.com/w3c/payment-request/blob/gh-pages/.github/PULL_REQUEST_TEMPLATE.md is the template

[03:30:43.0000] <annevk>
zcorpan: might be worth considering

[03:31:36.0000] <annevk>
zcorpan: if we make it a little clearer they don't all have to be completed before the PR is created that might be better

[03:32:00.0000] <annevk>
zcorpan: but we also get a lot of editorial contributions, for which a lot of this would be noise

[03:32:03.0000] <annevk>
so hmm

[03:43:00.0000] <annevk>
zcorpan: I use Sublime Text, but no idea if it has all those features

[03:43:33.0000] <annevk>
I used to use TextWrangler, but it couldn't handle "source" very well

[03:59:46.0000] <zcorpan>
annevk: yeah I want to switch away from TextWrangler/BBEdit

[04:00:20.0000] <zcorpan>
https://www.sublimetext.com/ demos multiple selections

[04:04:52.0000] <zcorpan>
I'll give this a try

[04:38:44.0000] <zcorpan>
MikeSmith: vim seems intimidating but several people recommend it. I just never feel like hitting a steep learning curve, but maybe sometime I'll give it a try

[04:45:32.0000] <MikeSmith>
zcorpan: GVim can help make it less intimidating

[04:46:13.0000] <MikeSmith>
it’s a GUI program that runs outside the shell

[04:47:02.0000] <MikeSmith>
with default settings for easier use with a mouse instead of keyboard shortcuts

[04:47:59.0000] <MikeSmith>
e.g., normal simple visual selection with a mouse

[04:48:54.0000] <MikeSmith>
which is something that’s not such a great feature that you actually want if you’re running in a shell instead

[05:02:12.0000] <JakeA>
With WPT, I find myself writing a lot of code to get information about a request the browser made (using the stash). Am I missing an easier way? It'd be nice if I could just query the server log, or use EventSource to get information about requests to a particular URL.

[05:05:10.0000] <JakeA>
Currently I stash it (https://github.com/jakearchibald/web-platform-tests/blob/accept-encoding-range/fetch/range/resources/long-wav.py#L57) then create an endpoint to read from the stash (https://github.com/jakearchibald/web-platform-tests/blob/accept-encoding-range/fetch/range/resources/stash-take.py)

[05:08:27.0000] <JakeA>
I'd love to just monitorRequest(url) and get a stream of requests to that URL

[05:11:58.0000] <Ms2ger>
Better hope that nobody else is using that URL in parallel

[05:12:18.0000] <JakeA>
Same problem exists with the stash

[05:13:36.0000] <JakeA>
I guess you could enforce something like a token in the URL

[05:14:13.0000] <annevk>
JakeA: you're supposed to mint a token for stash

[05:14:41.0000] <annevk>
JakeA: token() from /common/utils.js is what's typically used

[05:16:03.0000] <JakeA>
annevk: yeah, that's what I do. monitorRequest could enforce a similar thing if needed. Or: const [urlWithToken, stream]  = createMonitoredUrl(url)

[05:17:20.0000] <annevk>
JakeA: I guess if we abuse the path bit of a stash and use a token as the path as well we could write a get_stash.py and have some kind of JavaScript utility on top

[05:18:06.0000] <annevk>
JakeA: so the user has to write a Python script that takes a token and stores the stuff they care about, but doesn't need to have retrieval logic

[05:18:33.0000] <annevk>
JakeA: not sure how much that ends up simplifying though

[05:18:39.0000] <JakeA>
annevk: A generic retrieval endpoint would be great, but that's usually the easy part

[05:19:23.0000] <annevk>
JakeA: https://github.com/web-platform-tests/wpt/pull/11164/files is my first stash thingy

[05:19:51.0000] <annevk>
JakeA: I'm not sure how much can be abstracted there, other than doing the second request and getting the stash value

[05:21:00.0000] <annevk>
Oh, and I forgot I retrieve the stash value as JSON, that wouldn't work as a generic

[05:21:14.0000] <annevk>
Well, maybe it would, if everyone obeyed

[05:23:01.0000] <JakeA>
annevk: with aborting & the range request stuff, I keep wanting to answer questions like: What headers did the browser send? Did the browser actually make a request? Did it follow the redirect? A stream from the server would make this a lot easier. I agree I'd have to make the monitored URLs unique for the test.

[05:24:21.0000] <annevk>
JakeA: it seems we could do that, by dumping all the request data in the stash

[05:24:40.0000] <annevk>
JakeA: I guess one question there is when can you retrieve it

[05:25:33.0000] <JakeA>
annevk: yeah, that's a problem I have today.

[05:25:34.0000] <annevk>
JakeA: but when the request / response finishes or errors that's probably good enough?

[05:26:13.0000] <annevk>
My script does the redirect thing btw and it does store data from the request, just not that much

[05:26:38.0000] <JakeA>
annevk: yeah, although each API has a different way of telling you that. And with media, "finished" is a bit late.

[05:26:57.0000] <JakeA>
annevk: to clarify, I've done what I need to do. I just feel it's a pain each time I need to do it.

[05:28:03.0000] <annevk>
JakeA: we could file an issue I suppose

[05:28:18.0000] <JakeA>
I can write it up

[05:28:48.0000] <JakeA>
It might only be a problem I've had because of the kind of fetch tests I've been writing recently

[05:28:49.0000] <annevk>
JakeA: basically what you want is having a handle on an EventSource/WebSocket endpoint to write data to as requests come in

[05:29:26.0000] <JakeA>
annevk: that's what I said 😀

[05:29:52.0000] <JakeA>
It'd be easy to create a stream from either, which would work better in promise tests

[05:29:59.0000] <annevk>
Yeah sorry, was trying to restate it

[05:31:27.0000] <annevk>
That kind of setup would greatly simplify a lot of CORS tests too I think

[05:31:39.0000] <annevk>
E.g., did the preflight happen, did it have the right headers, etc.

[05:32:00.0000] <JakeA>
Ohh yeah, I imagine they have exactly the same issues.

[05:32:21.0000] <JakeA>
With redirects you want to monitor more than one url, but I guess you can create multiple monitors

[05:33:10.0000] <JakeA>
Although there may be cases where it's difficult to make sure the same token is in each URL

[05:34:09.0000] <annevk>
JakeA: you can redirect to the same path on a different server and forward the token (that's what I do)

[05:34:29.0000] <annevk>
JakeA: if the EventSource/WebSocket handle is token-based that would work

[05:34:43.0000] <JakeA>
annevk: Yeah, I was wondering about cases where the token might be stripped, but I can't think of any

[05:35:21.0000] <annevk>
As long as you can put it in the URL it's okay

[05:35:42.0000] <annevk>
I guess that means you can't quite test /favicon.ico and such with this

[05:36:53.0000] <JakeA>
Hmm yeah. Maybe you want a monitorUrl(url, { noTokenIKnowWhatImDoing: true }) for cases where having a token just wouldn't work

[05:47:07.0000] <annevk>
Well, the problem with that is that you cannot have multiple requests

[05:48:29.0000] <annevk>
Maybe instead the setup could be that register a set of paths to monitor and you just get all the request objects handed to you

[05:49:51.0000] <JakeA>
Allowing an array of URLs is important for determining order I suppose

[05:52:41.0000] <JakeA>
annevk: https://github.com/web-platform-tests/wpt/issues/11298

[07:43:29.0000] <devsnek>
is the filesystem api expected to gain traction

[08:04:02.0000] <devsnek>
oh heh it died like 5 years ago

[09:57:06.0000] <TabAtkins>
MikeSmith: Command-line support for highlighter should be working now.  Just execute highlighter/__init__.py. Run it with -h flag to get information on the arguments you can pass. Basic usage is `__init__.py webidl < input_file.json > highlighted_output.json`.

[09:57:32.0000] <TabAtkins>
The output will be a JSON object with `html` and `css` keys.

[15:20:44.0000] <Domenic>
Is there a way to stop getting email about a bug I reported to Firefox Bugzilla?

[15:21:08.0000] <Domenic>
Watching patches and reviews fly by is not that interesting

[15:38:43.0000] <MikeSmith>
Domenic: only way I know of is to go into https://bugzilla.mozilla.org/userprefs.cgi?tab=email and uncheck some stuff under Reporter

[15:39:21.0000] <MikeSmith>
but of course that will affect notifications on all bugs you reported, no just that one

[15:40:06.0000] <Domenic>
Hmm OK :-/. I guess email-client-level filtering is probably the way to go.

[15:40:07.0000] <MikeSmith>
TabAtkins: yee-hahー will try it again this weekend

[15:43:09.0000] <MikeSmith>
Domenic: yeah, though this case makes me think the e-mail preferences could be enhanced with by adding a new row with "A comment is added for a patch" or whatever

[16:17:54.0000] <MikeSmith>
devsnek: https://wicg.github.io/entries-api/ is the replacement for that

[16:17:59.0000] <MikeSmith>
File and Directory Entries API

[16:18:19.0000] <MikeSmith>
I think that’s actually implemented in all four browser engines

[16:18:23.0000] <devsnek>
hype

[16:18:29.0000] <devsnek>
does that have writing files too

[16:18:42.0000] <MikeSmith>
no

[16:18:50.0000] <MikeSmith>
well not as far as I know

[16:18:56.0000] <devsnek>
hmm

[16:18:59.0000] <MikeSmith>
jsbell would be the one to ask for details

[16:19:04.0000] <devsnek>
i suppose i'll read through it

[16:19:14.0000] <devsnek>
i want to do something spec-ish for file operations in my runtime

[16:20:48.0000] <devsnek>
why does the spec include engine-specific properties

[16:22:22.0000] <MikeSmith>
devsnek: dunno but jsbell can certainly shed some light when he’s around

[16:22:44.0000] <MikeSmith>
but there’s also https://github.com/WICG/entries-api/blob/gh-pages/EXPLAINER.md

[16:24:50.0000] <devsnek>
thx

[16:52:24.0000] <devsnek>
Domenic: if it isn't too much trouble could i bother you about my url implementation?


2018-06-03
[01:12:13.0000] <KiChjang>
does anyone know what task source we're supposed to use when queuing a PromiseRejectionEvent?

[01:12:14.0000] <KiChjang>
https://html.spec.whatwg.org/multipage/webappapis.html#notify-about-rejected-promises

[01:58:23.0000] <Domenic>
KiChjang: I think someone opened a bug about this... Or maybe it was just Blink engineers asking me internally... Anyway use the DOM manipulation task source (basically the default) and please file a bug so I can fix.

[01:58:35.0000] <KiChjang>
gotcha

[01:58:42.0000] <KiChjang>
that's what i thought as well\

[01:58:53.0000] <KiChjang>
the DOM manipulation task source is the closest thing that makes sense

[02:15:51.0000] <KiChjang>
https://github.com/whatwg/html/issues/3731


2018-06-04
[18:42:27.0000] <GPH-Hickory>
Domenic++

[18:44:24.0000] <GPHemsley>
FTR, I just touched a bunch of old wpt tickets about URL

[18:44:47.0000] <GPHemsley>
there aren't too many that are still open, which is cool

[18:44:54.0000] <GPHemsley>
https://github.com/web-platform-tests/wpt/labels/url

[18:46:10.0000] <Domenic>
Not bad

[18:48:28.0000] <Domenic>
https://github.com/web-platform-tests/wpt/issues/11218 is kind of depressing

[21:13:12.0000] <annevk>
Yeah, there is a real problem there. PSL maintainers saying it need not be relied upon and nobody else heeding their advice.

[00:52:00.0000] <mkwst>
annevk: Ryan's going to be in Zurich next week. I might be there as well. Maybe we can get coffee and argue about the PSL a bit.

[00:56:14.0000] <annevk>
mkwst: that'd bad timing, it's Mozilla week in SF

[00:56:27.0000] <mkwst>
Oh. :(

[00:56:35.0000] <mkwst>
Mozilla week somehow didn't make it onto my calendar. :)

[00:56:50.0000] <annevk>
mkwst: would have loved to though, it's a rather intriguing mismatch between the maintainers and how it's used

[00:57:45.0000] <mkwst>
I think he's in London this week for CA/B.

[00:58:04.0000] <mkwst>
Maybe we can set up a call or something. I don't really understand his position, though I agree with what I imagine it'

[00:58:13.0000] <mkwst>
its philosophical underpinnings might be.

[01:02:14.0000] <annevk>
mkwst: sounds good to me, available 9-5 daily and 7-8 if we cannot make it work otherwise

[01:40:02.0000] <mkwst>
annevk: I'll ping Ryan and see if he can carve out some time.

[01:54:41.0000] <annevk>
mkwst: should we wait for this meeting before proceeding with the URL PR?

[01:56:16.0000] <mkwst>
annevk: Meh. I think we need to define the terms somewhere. My impression is that Ryan's concerns are broader than this PR.

[01:56:41.0000] <annevk>
Fair enough, I'll give everyone until Wednesday just in case

[01:56:47.0000] <mkwst>
That seems totally reasonable.

[05:58:02.0000] <JakeA>
annevk: On background fetch's 'failed' event, I'm looking to communicate the reason for the failure (as long as security allows). Is there any prior art here? Would an enum 'reason' work? Creating an 'error' property would involve defining new error types, which seems bad.

[05:59:01.0000] <annevk>
JakeA: it seems like a bit of a layering violation if background fetch gets to expose that, but not fetch

[05:59:20.0000] <annevk>
JakeA: unless it's network error vs some HTTP layer errors only

[06:01:21.0000] <JakeA>
annevk: it wouldn't be anything new, but it'd distinguish between a quota error, a non-ok status code on one of the fetches, a network error...

[06:02:28.0000] <JakeA>
Another reason could be "underlying resource changed" if the etags change between partial responses

[06:03:52.0000] <annevk>
JakeA: okay, an enum seems fine I suppose, if that works for developers

[06:04:18.0000] <annevk>
JakeA: does background fetch enforce CORS?

[06:04:24.0000] <JakeA>
annevk: yes

[06:04:34.0000] <annevk>
great

[06:04:46.0000] <annevk>
one less vector to worry about

[06:04:49.0000] <JakeA>
:D

[06:11:35.0000] <wanderview>
JakeA: could you expose an exception type like NetworkError or QuotaExceededError on a property?

[06:11:49.0000] <wanderview>
or TypeError with a good message, etc

[06:13:03.0000] <JakeA>
wanderview: I'd probably have to create a load of new error types to allow code to test the difference. That feels worse than an enum, but I can't quite put my finger on why.

[06:13:57.0000] <wanderview>
JakeA: the one advantage of the error exception object types is that they allow you to provide a decent message... at least for TypeError

[06:14:48.0000] <wanderview>
JakeA: I guess it depends on if there is anything useful the site can do with the error other than just logging it

[06:15:34.0000] <annevk>
JakeA: the problem with that is that I think exception type messages are localized

[06:15:37.0000] <annevk>
wanderview: ^

[06:15:42.0000] <JakeA>
Hmm, I'm going to collect all the possible failures we have so far, and see if the right answer becomes clearer

[06:15:47.0000] <annevk>
wanderview: so if you want to allow branching, what JakeA suggests seems better

[06:15:59.0000] <JakeA>
yeah, I'd have to create new error types if I was to use errors

[06:16:13.0000] <wanderview>
I only ask because in firefox we have an old enum-based system... and its a constant annoyance to me because I have to go plumb extra stuff to get good TypeError with messages so devs can actually tell what happened... enums are never fine-grained enough

[06:16:19.0000] <wanderview>
ok

[06:16:32.0000] <annevk>
JakeA: make sure to test that not-ok is only exposed after CORS succeeds

[06:17:17.0000] <annevk>
JakeA: and if you want granular non-ok, you'll either need two fields or a dictionary of sorts, since ~400 enum values seems  like too much

[06:19:00.0000] <JakeA>
annevk: if the error is related to a particular fetch, we can point to the "record" that generated the failure. But yeah, CORS, SSL, MIX related failures will just be "network error"


2018-06-05
[18:16:04.0000] <MikeSmith>
TabAtkins: about the highlighter, --output html seems to not work

[18:16:12.0000] <MikeSmith>
echo '["pre", {}, "interface Foo {};"]' | python2.7 ./highlighter/__init__.py --output html webidl

[18:16:23.0000] <MikeSmith>
...still emits JSON output

[04:39:07.0000] <jyasskin>
Do folks think https://github.com/w3c/resource-hints/issues/74 is the "right" place to specify the `Purpose` header sent by prefetch requests, or would another place be better, like Fetch or an IETF draft?

[04:42:24.0000] <annevk>
jyasskin: I suspect it needs some Fetch integration

[04:42:54.0000] <annevk>
jyasskin: in particular, it seems this is another header that violates the same-origin policy?

[04:44:07.0000] <jyasskin>
It's probably true that prefetch in general could use some Fetch integration. I don't immediately see the same-origin violation here; what are you thinking of?

[04:44:48.0000] <annevk>
jyasskin: it's a non-safelisted header included in cross-origin requests

[04:45:13.0000] <jyasskin>
https://fetch.spec.whatwg.org/#cors-safelisted-request-header in particular?

[04:45:49.0000] <annevk>
jyasskin: now arguably this is a little muddy, as certain protocol headers such as Host are not safelisted either, but basically each addition beyond what we did in 2000 or so I'd count

[04:46:14.0000] <annevk>
jyasskin: yeah

[04:46:51.0000] <jyasskin>
Thanks. Would you put the full specification of the header in Fetch, or just have us make sure to add it to the appropriate lists there?

[04:46:57.0000] <annevk>
jyasskin: it doesn't matter much since the value isn't attacker-controlled (and when it is, there'll be a preflight), but still

[04:47:14.0000] <annevk>
jyasskin: something similar to Sec-Metadata I suspect

[04:47:31.0000] <annevk>
(although that might not be fully defined yet)

[04:48:00.0000] <jyasskin>
I think Sec-Metadata is still in the sketch phase, while Purpose is actually shipped without the matching specification.

[04:48:18.0000] <annevk>
jyasskin: I guess I'd expect something similar to https://github.com/whatwg/fetch/pull/751

[04:48:57.0000] <annevk>
jyasskin: check if request's initiator is "prefetch", then append it

[04:49:05.0000] <annevk>
jyasskin: maybe also prerender?

[04:52:44.0000] <jyasskin>
Yep, whichever actually controls it in Chrome. There's also a rumble of sending it from browser-initiated requests (https://groups.google.com/a/chromium.org/d/topic/blink-dev/IT3pYF5B_p4/discussion), but specifying that probably shouldn't go in Fetch.

[04:54:42.0000] <annevk>
jyasskin: browser-initiated fetches ideally still go through Fetch

[04:54:54.0000] <jyasskin>
Ok, good to know.

[04:55:10.0000] <annevk>
jyasskin: otherwise it's easy to accidentally bypass SOP

[04:55:44.0000] <annevk>
jyasskin: sleevi might not necessarily agree though, https://github.com/whatwg/fetch/issues/530 has a bunch of details

[05:45:48.0000] <annevk>
Anyone any idea why https://software.hixie.ch/utilities/js/live-dom-viewer/saved/5987 does not work? In particular, they/them are supposed to be shared with Singular/Plural row

[05:46:26.0000] <annevk>
Is it just too complicated to allocate the cells and therefore browsers / the spec give up?

[05:55:29.0000] <annevk>
I think per spec I'm doing the right thing (and the conformance checker agrees), but browsers are sad

[06:04:42.0000] <zcorpan_>
annevk: isn't it, though? set a height to 3em the they cell to visualize it

[06:06:22.0000] <annevk>
zcorpan_: I'm not sure I follow

[06:06:30.0000] <annevk>
zcorpan_: I filed https://github.com/whatwg/html/issues/3738 meanwhile

[06:08:23.0000] <zcorpan_>
annevk: commented

[06:10:16.0000] <annevk>
zcorpan_: why would it be collapsed?

[06:10:44.0000] <zcorpan_>
annevk: cells shrink-wrap and it doesn't need more space than that?

[06:10:56.0000] <annevk>
Yeah I guess, that's rather weird

[06:11:19.0000] <zcorpan_>
you can see a slight jigger caused by the cell spacing

[06:11:40.0000] <annevk>
I guess there's still the magic issue with the spec, but it does seem this "works as intended"

[06:40:38.0000] <bradleymeck>
just a heads up but I'm PR'ing Node to add a JS API for accessing the MIME Parsing API from https://mimesniff.spec.whatwg.org/

[06:46:05.0000] <annevk>
bradleymeck: did you see https://github.com/whatwg/mimesniff/issues/43?

[06:46:56.0000] <bradleymeck>
annevk: I had missed that issue but saw the package Domenic made. I'm still not keen on involving myself w/ whatwg as I've stated in the past though

[06:47:59.0000] <bradleymeck>
the PR I made closely resembles Domenic's idea but has some minor differences. I am not a browser implementor and haven't had good experiences in this arena so it is more of a heads up than me wanting to get involved in this sphere currently

[06:48:33.0000] <bradleymeck>
most of the difference is wanting to match URLSearchParams more closely I think

[06:49:11.0000] <annevk>
That sounds wrong, since that allows for duplicates and this doesn't, afaik

[06:50:23.0000] <bradleymeck>
annevk: i had .getAll originally but pulled it before I PR'd due to it not being used anywhere I can see right now. The parser I wrote is exposing all the parameters though, it is just not available once I turn it into a JS representation

[06:51:22.0000] <annevk>
I don't know what that means

[06:52:08.0000] <annevk>
If it means you support duplicate names, it's not an implementation of the standard you referenced

[06:52:41.0000] <bradleymeck>
the C++ parser in that PR takes `foo/bar;a=1;a=2` and exposes both pairs of `a=1` and `a=2`. The API using the parser though only exposes `a=1`

[06:54:49.0000] <bradleymeck>
annevk: correct in a sense, but I'm not sure why multiple parameters aren't supported in MIME, I just prevented exposing the duplicates to user code for now. all existing stuff I saw only uses the first parameter of a given name so I think it was written to drop duplicates for existing matching usage, but there doesn't seem to be a reason why to expose them, since you have to parse the duplicates anyway

[06:55:21.0000] <annevk>
bradleymeck: does Node.js's HTML parser expose duplicate attributes?

[06:55:46.0000] <bradleymeck>
Node doesn't have an HTML parser, but it does expose duplicate query parameters

[06:55:59.0000] <bradleymeck>
and http headers too

[06:56:16.0000] <annevk>
For both of those it's explicitly part of the data model

[06:56:27.0000] <annevk>
That's a pretty significant difference

[06:59:37.0000] <bradleymeck>
annevk: do you have a clear reference to where something says they are not part of the data model when they are duplicates, i spidered out from https://tools.ietf.org/html/rfc6838#section-4.3 but may have missed something but https://tools.ietf.org/html/rfc2045 doesn't note anything that I saw

[07:00:21.0000] <bradleymeck>
per the WHATWG parser it does explicitly drop duplicates, but that doesn't seem to be a requirement of MIME itself

[07:08:33.0000] <annevk>
bradleymeck: I'm not sure it can be directly derived from RFC2046, but given that parameters are unordered and all implementations handle them as maps, I think it's highly likely that was the intent

[07:08:47.0000] <annevk>
bradleymeck: there's also no hint that I know of that indicates they are to be multimaps

[07:08:56.0000] <bradleymeck>
annevk: the whatwg tests actually require the parameters to be ordered

[07:09:22.0000] <bradleymeck>
but that might just be a symptom of how they are written

[07:10:17.0000] <bradleymeck>
if you want to make a comment that duplicates should not be exposed, feel free to do so on the PR; currently they are not exposed in a way that users could access them though.

[07:10:28.0000] <annevk>
bradleymeck: https://tools.ietf.org/html/rfc2045#section-5 at least says it's a set

[07:12:14.0000] <bradleymeck>
seems good enough to make a statement that we should not multi-map it, still a bit vague on if the set is based upon the entire value+key or just key but 🤷 I'll comment on PR with this restriction that this API should not be extended

[07:13:32.0000] <annevk>
bradleymeck: there's other differences too, such as the WHATWG standard handling text/html; per how servers expect clients to do so

[07:14:16.0000] <bradleymeck>
annevk: is there something that needs to be done beyond following https://mimesniff.spec.whatwg.org/ 's algorithm for that?

[07:15:30.0000] <bradleymeck>
I was running all my tests against the data in https://github.com/web-platform-tests/wpt/tree/master/mimesniff/mime-types/resources

[07:16:14.0000] <annevk>
bradleymeck: I meant relative to the RFC

[07:16:34.0000] <bradleymeck>
ah, yes, thats largely why I am not going with RFC as the parsing algorithm.

[07:16:36.0000] <annevk>
bradleymeck: since if you rather follow that and its data model, this is not the way to go

[07:16:40.0000] <annevk>
ok

[07:17:55.0000] <bradleymeck>
data model restriction on WHATWG parser is fine, just seemed a restriction by implementation not by any problems with the model if you only use the first declared parameter of a given name to my knowledge

[07:18:15.0000] <bradleymeck>
requires that the parameters be ordered if you do that, but the whatwg tests fail if you produce things out of order

[07:20:48.0000] <annevk>
I wonder if we should consider changing that, but it doesn't really seem worth it since then we'd either have to sort or randomize

[07:21:20.0000] <annevk>
But I guess we'd be slightly more interoperable with other MIME types

[07:22:17.0000] <bradleymeck>
why not change the `output` to be an `{ type: string, subtype: string, parameters { [key: string]: value: string }`? wouldn't that avoid randomizing or sorting?

[07:22:39.0000] <bradleymeck>
I could PR that, but thought it might be a bit of a burden for people using the existing tests

[07:23:16.0000] <annevk>
bradleymeck: there's a number of places that need to serialize

[07:27:42.0000] <bradleymeck>
could include a possible output per test and ensure both `input` and `output` produce the same type/subtype/parameters when parsed (against a "golden" parsed form like the above object type). Seems a bit odd though, since serializing will make things ordered in a sense anyway

[07:29:32.0000] <annevk>
bradleymeck: right, for serializing you'd need sorting (so you can rely on order) or randomizing (so nobody relies on order)

[07:33:23.0000] <bradleymeck>
you could also just have a few duplicates I think, maybe make the serialized form an array : [`a/b;foo=1;bar=2`, `a/b;bar=2;foo=1`] and let test harnesses ensure all possible serialized forms match expectations?

[07:34:27.0000] <annevk>
I'm not sure how that would meet the requirements

[07:36:30.0000] <bradleymeck>
if your `input` has to match multiple `output`s that are in different order wouldn't that ensure that it is unordered?

[07:49:53.0000] <TabAtkins>
MikeSmith: Yes, it emits a JSON object. But the value of the "html" key is a string of HTML, not of JSON-encoded HTML.

[07:50:17.0000] <MikeSmith>
TabAtkins: so what does --output html do?

[07:50:27.0000] <MikeSmith>
ah

[07:50:31.0000] <TabAtkins>
What I just said, controls what format the "html" key is in.

[07:50:34.0000] <MikeSmith>
I see

[07:51:02.0000] <MikeSmith>
I was hoping to get just HTML back

[07:51:17.0000] <MikeSmith>
the consuming code I wrote in wattsi just expects HTML

[07:51:18.0000] <TabAtkins>
I need to emit the HTML and CSS separately so you don't spam CSS into the spec for every single highlight.

[07:51:24.0000] <MikeSmith>
I see

[07:51:35.0000] <MikeSmith>
OK

[07:52:26.0000] <MikeSmith>
well the bigger problem I’ve realized I have is that all the HTML examples in the HTML spec use &lt; instead of "<"

[07:52:38.0000] <MikeSmith>
because, you know, they’re in an HTML document

[07:53:12.0000] <MikeSmith>
but Pygments apparently doesn’t recognize character entities

[07:53:33.0000] <TabAtkins>
That shouldn't be a problem? Your HTML parser should have turned them into text by the time you read the DOM and construct the JSON.

[07:53:46.0000] <MikeSmith>
yeah that '

[07:54:11.0000] <MikeSmith>
yeah that’s not the way wattsi works

[07:54:11.0000] <TabAtkins>
I mean that if your input is `&lt;pre>`, then by the time you read the DOM you should just get out "<pre>", right?

[07:54:16.0000] <TabAtkins>
Sigh.

[07:54:26.0000] <MikeSmith>
I don’t read the DOM

[07:54:33.0000] <MikeSmith>
I don’t re-parse the source

[07:55:21.0000] <MikeSmith>
at the point where I emit this content, wattsi just sees strings

[07:56:48.0000] <TabAtkins>
How much escapes you got? Just &lt;?

[07:57:17.0000] <MikeSmith>
I think so

[07:57:44.0000] <MikeSmith>
it is whatever escapes were used by whoever authored the particular example

[07:58:09.0000] <MikeSmith>
I think by convention everybody only escapes the "<"

[07:58:19.0000] <MikeSmith>
because that’s the only one necessary

[07:58:30.0000] <MikeSmith>
example:

[07:58:33.0000] <MikeSmith>
  [

[07:58:33.0000] <MikeSmith>
    "pre",

[07:58:33.0000] <MikeSmith>
    {

[07:58:33.0000] <MikeSmith>
      "id": "intro-early-example"

[07:58:33.0000] <MikeSmith>
    },

[07:58:35.0000] <MikeSmith>
    "&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n &lt;head>\n  &lt;title>Sample page&lt;/title>\n &lt;/head>\n &lt;body>\n  &lt;h1>Sample page&lt;/h1>\n  &lt;p>This is a &lt;a href=\"demo.html\">simple&lt;/a> sample.&lt;/p>\n  &lt;!-- this is a comment -->\n &lt;/body>\n&lt;/html>"

[07:58:40.0000] <MikeSmith>
  ]

[07:59:25.0000] <TabAtkins>
If it's a finite set, I can give you an option for a quick unescape.

[07:59:32.0000] <MikeSmith>
OK

[07:59:41.0000] <MikeSmith>
I think just &lt;

[08:00:14.0000] <MikeSmith>
anyway to be clear, even in terms of the DOM, the contents of all the examples are just text nodes

[08:00:26.0000] <MikeSmith>
inside <pre> elements

[08:00:44.0000] <MikeSmith>
oh

[08:01:10.0000] <TabAtkins>
I thought you wanted to highlight the webidl parts too?

[08:01:15.0000] <MikeSmith>
yes

[08:01:18.0000] <TabAtkins>
Which have <a>, <dfn>, etc.

[08:01:24.0000] <MikeSmith>
yes

[08:01:29.0000] <MikeSmith>
that is the exception

[08:01:48.0000] <MikeSmith>
and that is the other big problem I ran into

[08:01:57.0000] <TabAtkins>
Yeah, I thought that was the whole point of adapting my tool, as there are lots of highlighters that don't understand HTML but can just handle a string.

[08:02:03.0000] <MikeSmith>
the highlighter does not seem to handle those as expected

[08:03:10.0000] <MikeSmith>
[ "pre", { "class": "idl" }, "[Exposed=Window,\n ", [ "a", { "href": "#htmlconstructor", "id": "the-menu-element:htmlconstructor" }, "HTMLConstructor" ], "]\ninterface ", [ "dfn", { "id": "htmlmenuelement" }, "HTMLMenuElement" ], " : ", [ "a", { "href": "#htmlelement", "id": "the-menu-element:htmlelement" }, "HTMLElement" ], " {\n};" ],

[08:04:13.0000] <MikeSmith>
or simpler case:

[08:04:15.0000] <MikeSmith>
echo '[ "pre", { "class": "idl" }, "[NoInterfaceObject]\ninterface ", [ "dfn", { "id": "noncedelement" }, "NoncedElement" ], " {\n attribute DOMString nonce;\n};" ]' | python2.7 ./highlighter/__init__.py webidl

[08:04:30.0000] <MikeSmith>
=> TypeError: sequence item 1: expected string or Unicode, list found

[08:05:03.0000] <MikeSmith>
... if I remove [ "dfn", { "id": "noncedelement" }, "NoncedElement" ] from that JSON object, that error goes away

[08:05:17.0000] <TabAtkins>
Sigh, I just spotted the bug. Fix is pushed.

[08:05:35.0000] <TabAtkins>
Me looping over a container then returning the container rather than the item. :/

[08:08:13.0000] <MikeSmith>
glad it was an easy fix :)

[08:22:34.0000] <TabAtkins>
MikeSmith: Okay, added a --unescape flag that unescapes the "big 5" for HTML - &<>'"

[08:25:25.0000] <MikeSmith>
\o/ thank you thank you thank you

[08:25:49.0000] <MikeSmith>
will get back to it in the morning my time

[09:15:54.0000] <MikeSmith>
TabAtkins: --unescape working beautifully, and the embedded markup in IDL too

[09:16:33.0000] <MikeSmith>
working on integrating it back into wattsi+html-build

[09:16:45.0000] <MikeSmith>
(as long as my insomnia lasts)

[09:17:30.0000] <TabAtkins>
Do you want, like, a --just-html and --just-css argument too, so you can get them independently and shove them in easier?

[09:17:50.0000] <MikeSmith>
TabAtkins: yes please

[09:18:06.0000] <MikeSmith>
I think I only need the CSS once, right?

[09:18:16.0000] <TabAtkins>
(The only problem with --just-css is that the returned CSS can vary based on what arguments you give. But as long as you're always/never doing line-numbers/line-highlighting, it'll stay the same.)

[09:18:22.0000] <MikeSmith>
aha

[09:18:26.0000] <MikeSmith>
OK

[09:19:02.0000] <TabAtkins>
So you can just pass some nonsense el to it to get the CSS out when you need it, I suppose.

[09:19:19.0000] <MikeSmith>
yeah as long as the class names are consistent, and the associated CSS rules consistent, I can just add the styles to the main stylesheet, once

[09:19:22.0000] <MikeSmith>
I think

[09:20:06.0000] <MikeSmith>
oh hey one thing: in the --output html output, newlines get emitted as "\n" (like for JSON) instead of as newlines

[09:20:53.0000] <MikeSmith>
ah but that’s within JSON

[09:21:23.0000] <MikeSmith>
/me tries to remember if we have a JSON parser in the wattsi code

[09:23:40.0000] <TabAtkins>
Right.

[09:24:34.0000] <TabAtkins>
With --output=html --just=html it'll print directly, no \n

[09:27:06.0000] <TabAtkins>
MikeSmith: And pushed

[09:27:46.0000] <MikeSmith>
...and just pulled

[09:27:54.0000] <MikeSmith>
beautiful

[09:27:57.0000] <MikeSmith>
perfect

[09:28:01.0000] <MikeSmith>
thanks very very much

[09:28:04.0000] <TabAtkins>
np

[09:29:02.0000] <MikeSmith>
I should be able to get the related wattsi+html-build stuff landed this week

[09:29:26.0000] <MikeSmith>
and then finally syntax-hightlighted examples in the HTML spec

[09:30:07.0000] <MikeSmith>
thanks to magic of combining Free Pascal + Python + TabAtkins

[09:31:03.0000] <TabAtkins>
Yay!

[09:31:11.0000] <MikeSmith>
:)

[09:33:00.0000] <MikeSmith>
and a bonus is that this may push the size of the single-page output of the spec up to 10MB!

[09:33:12.0000] <MikeSmith>
after all the years we been trying hard to get it there

[09:33:41.0000] <MikeSmith>
currently it’s still just a tiny 8.5MB

[09:33:41.0000] <annevk>
MikeSmith: euh that's probably worth a discussion before we land?

[09:33:50.0000] <annevk>
MikeSmith: or is it already close to 10?

[09:34:01.0000] <annevk>
MikeSmith: I see

[09:34:03.0000] <MikeSmith>
annevk: only 8.5MB now

[09:34:05.0000] <MikeSmith>
yeah

[09:34:29.0000] <MikeSmith>
maybe this won’t really add an additional 1.5MB, I dunno

[09:34:38.0000] <MikeSmith>
but we got a lot of examples...

[09:35:51.0000] <annevk>
That seems good to verify as a 15-20% increase or so will also affect the speed of multipage

[09:37:07.0000] <MikeSmith>
yeah this basically makes the source of each example at least 4 times bigger

[09:38:12.0000] <MikeSmith>
anyway we’ll find out soon enough, once I got the highlighter plugged in

[09:42:32.0000] <TabAtkins>
If HTML had added <c> for inline text (for "character") we'd shave a lot of weight off of that. ^_^

[09:42:54.0000] <TabAtkins>
And then I'd be able to write my terrible talk "Learn the <a> <b> <c>s of HTML".

[09:46:10.0000] <MikeSmith>
heh

[09:50:34.0000] <astearns>
would "Learn the <a> <b> <c-s> of HTML" work?

[09:53:41.0000] <tantek>
astearns: Learn the <a> <b> Cs(s) of HTML?

[09:56:24.0000] <TabAtkins>
astearns: That's only a 2-characters savings per element, and so not very impressive. (one per tag)

[09:57:49.0000] <TabAtkins>
Wait tho.

[09:58:15.0000] <TabAtkins>
Actually... if I could bake the classes into the tagname, it would save a bunch more characters.

[09:58:50.0000] <TabAtkins>
<c-kt>...</c-kt>, versus <span class=kt>...</span>

[09:59:01.0000] <TabAtkins>
I *think* it highlights with only a single class per? I'd have to check.

[10:01:24.0000] <TabAtkins>
Are arbitrary attributes allowed on custom elements, or do they still have to be data-*?

[10:08:46.0000] <TabAtkins>
Looks like arbitrary attributes are allowed, per both MDN and spec examples, nice.

[10:12:16.0000] <TabAtkins>
<c- kt>...</c-> is 12 characters of weight, and looks to be valid, versus <span class='kt'>...</span> which is 24 characters of weight. I can literally halve the weight-cost of highlighting.

[10:16:12.0000] <tantek>
/me watches as TabAtkins rediscovers XML ;)

[10:17:03.0000] <TabAtkins>
golfing ftw

[10:17:27.0000] <tantek>
/me remembers when it was tennis

[10:17:47.0000] <zcorpan>
TabAtkins: I think I like the idea of being able to wrap things for test annotations, <span>, <li>, <tr> -- could it be an attribute wpt-test?

[10:18:12.0000] <TabAtkins>
yeah, it def could be. Just requires some more sophisticated handling for output.

[10:30:32.0000] <zcorpan>
👍

[10:31:43.0000] <astearns>
I love it when a dumb joke turns into a terrible hack

[10:40:47.0000] <TabAtkins>
And... pushed. Highlight weight is now magically cut in half.

[10:47:13.0000] <TabAtkins>
I could cut it a little bit more if I explode out the namespace - going with <kt->...</kt-> saves one character, and for the single-char classes I'd save 3.

[10:53:24.0000] <TabAtkins>
But nah, that'd stomp on the element-name namespace too much, make it difficult for me to do this sort of minification on other things. But I can at least rejigger the highlight-names so that i use the entire single-letter alphabet before I go to two letters, save a character on a bunch of stuff.

[11:47:40.0000] <jugglinmike>
Domenic: I believe there's no intention of unifying DOM streams and Node.js streams. Is that correct?

[11:47:51.0000] <Domenic>
jugglinmike: up to Node.js, I guess?

[11:48:12.0000] <jugglinmike>
Oh, okay

[12:06:26.0000] <bradleymeck>
are Blobs frowned upon these days? I do see them in Response objects but was wondering

[12:10:58.0000] <Domenic>
 Blobs are OK. The FileReader API is terrible, but there's no good alternative yet. Blob URLs are frowned upon in general.

[12:21:30.0000] <bradleymeck>
Domenic: thanks

[13:09:32.0000] <a-ja>
MikeSmith, FYI, incoming in a few weeks, new aria roles blockquote paragraph and caption < https://w3c.github.io/aria/#changelog >

[13:33:29.0000] <Mek>
there is a great alternative to the FileReader API: new Response(blob).body gives you a ReadableStream to read the blob

[13:33:41.0000] <Mek>
and yeah, Blob URLs are terrible

[16:02:15.0000] <Domenic>
new Response(blob).whatever still feels like a hack to me, but you're right :)

[16:21:10.0000] <MikeSmith>
TabAtkins: per https://drafts.csswg.org/css-fonts-3/#font-prop is body { font: 3.5mm message-box,serif,helvetica,sans-serif; }

[16:21:23.0000] <MikeSmith>
.. valid?

[16:21:39.0000] <MikeSmith>
the context is https://github.com/validator/validator/issues/661#issuecomment-394836779

[16:22:15.0000] <MikeSmith>
the CSS checker reports an error for body { font: 3.5mm message-box,serif,helvetica,sans-serif; }

[16:22:35.0000] <MikeSmith>
but not for body { font: 3.5mm message-box,serif,helvetica,sans-serif; }

[16:23:07.0000] <MikeSmith>
as far as I read that grammar, both should actually be valid, right?

[16:23:57.0000] <MikeSmith>
    [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]? <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ] | caption | icon | menu | message-box | small-caption | status-bar

[16:24:08.0000] <MikeSmith>
...

[16:25:36.0000] <MikeSmith>
though in both cases “message-box” doesn’t mean the system font but instead is just a (non-existent) font-family name?

[16:25:43.0000] <TabAtkins>
Yes

[16:25:54.0000] <MikeSmith>
OK thanks

[16:26:12.0000] <TabAtkins>
If you want the message box font, you do it all by itself

[16:26:18.0000] <MikeSmith>
right

[16:26:20.0000] <MikeSmith>
OK

[16:26:39.0000] <TabAtkins>
But yeah it's valid

[16:26:46.0000] <MikeSmith>
hai

[16:28:17.0000] <MikeSmith>
so I dunno why the checker reports an error for the first case but not the second, but I guess the case-switch the code is using isn’t written in quite the order it should be


2018-06-06
[17:48:51.0000] <MikeSmith>
TabAtkins: the following WebIDL isn’t syntactically valid?

[17:48:52.0000] <MikeSmith>
[Exposed=Window]

[17:48:52.0000] <MikeSmith>
interface Example {

[17:48:52.0000] <MikeSmith>
  // this is an IDL definition

[17:48:52.0000] <MikeSmith>
};

[17:51:49.0000] <TabAtkins>
That seems to work. Is highlighter complaining?

[17:52:09.0000] <TabAtkins>
Its webidl parser is relatively old at this point, I should update it.

[17:53:07.0000] <MikeSmith>
TabAtkins: Yeah the highlighter chokes on it

[17:53:12.0000] <MikeSmith>
echo '["pre", { "class": "idl extract" }, "[Exposed=Window]\ninterface ", [ "dfn", "Example" ], " {\n // this is an IDL definition\n};" ]' | python2.7 ./highlighter/__init__.py webidl

[17:53:40.0000] <MikeSmith>
=> Exception: IDL SYNTAX ERROR LINE: 1 - skipped: "[Exposed=Window] ...

[17:54:52.0000] <MikeSmith>
that is the very first example in the spec

[17:55:29.0000] <TabAtkins>
I just updated widlparser and pushed, and it seems to work just fine now.

[17:55:31.0000] <MikeSmith>
well, code example at least

[17:55:36.0000] <MikeSmith>
oh cool

[17:55:43.0000] <MikeSmith>
/me pulls

[17:57:43.0000] <MikeSmith>
hmm still fails for me, with the same error

[17:57:49.0000] <MikeSmith>
even after pulling

[17:58:42.0000] <MikeSmith>
/me does find . -name *.pyc | xargs rm

[17:59:10.0000] <MikeSmith>
... gets same error

[17:59:18.0000] <TabAtkins>
Huh, that's odd.

[18:00:03.0000] <TabAtkins>
Ah, I'm getting it now with your exact example. Hm.

[18:00:25.0000] <TabAtkins>
Oh, duh, it's the ["dfn"].

[18:00:32.0000] <TabAtkins>
It needs a {} as the second arg!

[18:00:36.0000] <MikeSmith>
aha

[18:00:45.0000] <MikeSmith>
yeah I ran into that before

[18:01:13.0000] <MikeSmith>
I guess I need to change the serializer code I wrote for wattsi to always emit that

[18:01:20.0000] <TabAtkins>
Yeah.

[18:01:23.0000] <MikeSmith>
k

[18:01:25.0000] <MikeSmith>
thanks

[18:02:18.0000] <TabAtkins>
(The error hints at this - it just says `interface  {`, with no name.)

[18:02:36.0000] <MikeSmith>
ah yeah

[18:02:51.0000] <MikeSmith>
/me adds the {}

[18:03:04.0000] <MikeSmith>
sweet yeah it works

[18:12:51.0000] <MikeSmith>
TabAtkins: btw whenever I pull I need to do a git checkout first

[18:13:15.0000] <MikeSmith>
otherwise git says error: cannot pull with rebase: You have unstaged changes

[18:14:11.0000] <MikeSmith>
...because of pygments/__init__.pyc being under version control and it gets regenerated when I run the highlighter/__init__.py script

[18:14:57.0000] <MikeSmith>
maybe you want to git rm pygments/__init__.pyc

[18:18:58.0000] <TabAtkins>
Ah, indeed, I'll fix

[18:21:48.0000] <MikeSmith>
super

[19:33:04.0000] <smaug____>
igrigorik: https://github.com/wicg/event-timing

[19:33:12.0000] <smaug____>
what is duration trying to capture

[19:35:11.0000] <smaug____>
igrigorik: remember that 'Update the rendering' is basically end of task model

[19:35:23.0000] <smaug____>
not "UA will actually update rendering at this time"

[19:35:36.0000] <smaug____>
UA may decide, per spec, to not update rendering of documents

[19:36:06.0000] <smaug____>
igrigorik: or perhaps you know who to ask about that proposal

[19:39:23.0000] <smaug____>
filed https://github.com/WICG/event-timing/issues/6

[23:24:37.0000] <annevk>
Thanks smaug____, filed an issue too

[23:25:01.0000] <annevk>
I wish folks would be better about filing upstream early

[00:27:28.0000] <domfarolino>
JakeA: CC'd self on http://crbug.com/849952 as I may be interested in implementing, but it'll be on the backlog unfortunately (just figured I'd mention tho)

[00:29:44.0000] <JakeA>
domfarolino: Ohh cheers!

[00:32:31.0000] <JakeA>
annevk: ohhhhh so I should be using the "core" component? Seems weird that isn't signposted on https://bugzilla.mozilla.org/enter_bug.cgi

[00:34:25.0000] <annevk>
JakeA: yeah, dunno

[00:35:06.0000] <annevk>
JakeA: I've tried to improve some aspects of that Bugzilla instance, but there's quite a lot of apathy from peers so I stopped caring

[00:35:22.0000] <JakeA>
fair enough

[04:06:06.0000] <MikeSmith>
what RFC states the requirement that quoted parameter values must use double quotes? (rather than single quotes)

[04:23:12.0000] <annevk>
MikeSmith: HTTP RFC?

[04:23:33.0000] <annevk>
MikeSmith: might be since the dawn of MIME though

[06:10:15.0000] <wanderview>
JakeA: annevk: I highly recommend using the "find product" search box on the new bug page

[06:10:42.0000] <wanderview>
for example, if you type "service worker" in there it will give you CORE:DOM:ServiceWorkers, etc

[06:12:08.0000] <annevk>
neat

[09:23:29.0000] <bkardell>
I'm a little confused on https://github.com/w3c/webcomponents/issues/468 discussion about fake-shadow-root ... this is the thing referred to also as virtual-shadow-root, yes?

[09:28:05.0000] <bkardell>
annevk said interested in seeing how this translates into a proper specification" but domenic also said "what's interesting is that the UA stylesheet-based spec text and the virtual-shadow-root based spec text are almost exactly equivalent in their observable consequences"

[09:33:40.0000] <bkardell>
sorry, so many conversations/overlapping ideas - it can get a little confusing and hard to backtrack to the real thing

[09:40:17.0000] <GPHemsley>
I didn't know we'd upped the price of standards to two bits

[10:29:53.0000] <domfarolino>
annevk: Would you mind taking a look at https://bugs.chromium.org/p/chromium/issues/detail?id=532782 and see if my take on it is correct?

[10:31:06.0000] <annevk>
domfarolino: yeah

[10:31:08.0000] <annevk>
GPHemsley: hah

[10:31:27.0000] <annevk>
domfarolino: not sure if we have good tests, but that seems accurate

[10:32:14.0000] <annevk>
bkardell: Domenic focusing on what it actually means helps

[10:32:18.0000] <Domenic>
bkardell: yes, I am having a hard time understanding as well. Tried to straighten out a bit...

[10:32:19.0000] <annevk>
I'm still confused though

[10:32:43.0000] <bkardell>
Domenic, yes, I gave you a 👍 on that - thank you :)

[10:33:25.0000] <bkardell>
annevk, are you mostly confused in _how_ it is treated that way in the virtual/fake case?

[10:35:12.0000] <annevk>
bkardell: I basically don't understand what people mean when they say "fake shadow root"

[10:43:37.0000] <bkardell>
As I understand it, it is really simply saying what Domenic recapped - but I wanted to know if that is what we were saying.  Effectively this applies to, more or less, how you match selectors in 3rd arg stylesheet?

[10:45:06.0000] <bkardell>
in other words, I think there is no new 'node' in here or anything

[10:45:33.0000] <annevk>
Domenic: I think you need to make your last bullet point more specific as to which style sheet you would use that selector in

[10:45:50.0000] <annevk>
Domenic: I think rniwa is saying that such a selector would not work here

[10:51:44.0000] <Domenic>
annevk: hmm, I thought such selectors worked with shadow DOM today, but maybe I should have tested

[10:54:03.0000] <bkardell>
Domenic, they said they implemented in chrome, will it be in nightlies or something?

[10:54:23.0000] <Domenic>
Might be in Canary behind a flag, not sure, might just be on rakina's local machine...

[10:55:36.0000] <bkardell>
I wonder if maybe a good thing would be for rakina to create demo illustrating the test cases and say 'you can get release x and flip such and such flag' - then people could just actually see/play with it and ask better questions... is that a reasonable thing to ask on the thread?

[10:56:59.0000] <Domenic>
Yeah maybe.

[11:04:21.0000] <bkardell>
done

[12:35:06.0000] <domfarolino>
annevk: ta for checking

[12:38:20.0000] <domfarolino>
I'll check out the tests (if any) we have around that

[12:58:24.0000] <Domenic>
annevk: is https://github.com/whatwg/html/pull/3742 ready for review or should I hold off?

[15:51:51.0000] <undefined_>
anyone here?

[15:53:51.0000] <domfarolino>
should be


2018-06-07
[23:31:34.0000] <annevk>
Domenic: it's ready; planning on writing tests later

[23:57:20.0000] <annevk>
hsivonen: if you could review the window.event tests I think we're all good to go

[23:58:06.0000] <annevk>
hsivonen: only https://github.com/web-platform-tests/wpt/pull/10329 really

[23:58:44.0000] <annevk>
I guess I can also try foolip again

[00:22:53.0000] <foolip>
annevk: need review on something?

[00:25:48.0000] <annevk>
foolip: yeah, the above URL

[00:29:56.0000] <foolip>
annevk: I'll take a look

[00:31:27.0000] <annevk>
\o/

[00:37:07.0000] <foolip>
annevk: most of the tests fail in Chrome and Safari, did you look into that?

[00:37:15.0000] <foolip>
I haven't tested Edge

[00:37:30.0000] <annevk>
foolip: I filed bugs on that

[00:37:53.0000] <annevk>
foolip: they follow a suggestion that we should base the global on the global of the listener's callback

[00:38:26.0000] <foolip>
annevk: ah, as opposed to the event target?

[00:38:39.0000] <annevk>
foolip: made by Shiino Yuki from Chrome

[00:39:04.0000] <annevk>
foolip: yeah, and even that wasn't consistent I think, it's a little unclear to me still what the existing mechanism is

[00:40:57.0000] <foolip>
annevk: the first two test names include  "{ [native code] }", do you think that's worth fixing?

[00:41:01.0000] <annevk>
foolip: if you want to do some light background reading: https://github.com/whatwg/dom/issues/334

[00:41:43.0000] <annevk>
foolip: I could fix that, sure

[00:41:49.0000] <foolip>
annevk: fixing now

[00:42:16.0000] <JakeA>
annevk: Would we ever allow developers to get at the undecoded bytes of a response? I imagine it'd require an additional CORS opt-in at least

[00:43:47.0000] <annevk>
JakeA: we could, I don't think we'd need another opt-in per se, but I maybe I haven't thought about it enough

[00:44:21.0000] <annevk>
JakeA: we actually wanted to go that way initially, but it turned out it was buried deep into the networking stack and nobody liked it, so it didn't seem good as a default

[00:44:58.0000] <foolip>
annevk: what

[00:45:06.0000] <foolip>
annevk: what's "listener intentionally not wrapped in t.step_func" about?

[00:45:13.0000] <foolip>
annevk: is it to cause a harness error?

[00:45:32.0000] <foolip>
annevk: or because that would change the global of the listener?

[00:45:39.0000] <foolip>
I guess that's it

[00:45:41.0000] <foolip>
gotta run

[00:46:55.0000] <JakeA>
annevk: I was wondering about compression formats with some kind of dictionary that might leak additional info, but I guess that'd be a separate request. Ta. Just trying to get my head around Chrome's complaints about the Accept-Encoding stuff.

[00:46:59.0000] <annevk>
foolip: that's it

[00:47:46.0000] <annevk>
JakeA: I think some H/2 stuff might be across requests, but maybe that's just for headers?

[00:47:58.0000] <annevk>
JakeA: dunno how brotli works either

[00:48:27.0000] <JakeA>
annevk: If it becomes a big problem, we could add an optional arg to https://fetch.spec.whatwg.org/#concept-request-add-range-header which can specify the encoding, which would default to identity.

[00:48:48.0000] <JakeA>
me neither

[00:48:57.0000] <annevk>
JakeA: I was thinking that could be another solution here, but it doesn't help when someone sets Range manually

[00:49:28.0000] <annevk>
JakeA: there are a ton of issues around Accept-Encoding though that I recently surfaced a bit in issues, mmenke(sp?) helped with that

[00:49:53.0000] <JakeA>
annevk: we always want identity in that case, so we'd still need the line we already have, unless something set Accept-Encoding first

[00:50:48.0000] <annevk>
JakeA: yeah, but the way we set things up nothing can set that first

[00:51:33.0000] <annevk>
JakeA: I guess their concern is that their layering is different from ours, but I'm not sure how to reconcile properly

[00:52:54.0000] <JakeA>
annevk: I'll see what they come back with. It seems like they're softening a bit from the initial "this doesn't make sense" reaction

[00:53:47.0000] <annevk>
k

[00:56:31.0000] <MikeSmith>
botie, inform tantek http://microformats.org/wiki/existing-rel-values is not responding

[00:56:31.0000] <botie>
will do

[07:46:44.0000] <MikeSmith>
annevk: Domenic about the syntax highlighter: After doing some initial testing with TabAtkins tool hooked into wattsi and html-build:

[07:47:21.0000] <MikeSmith>
the good news is that increases the output file size by only 3.5%

[07:48:22.0000] <MikeSmith>
the single-page output size increases by 300MB, to 8.8MB from 8.5MB

[07:49:49.0000] <MikeSmith>
the somewhat less good news is that makes the build go from 16 seconds (without the highlighter) up to about 4.5 minutes

[07:51:53.0000] <MikeSmith>
but that’s not too surprising given that we have 1121 examples in the spec, and because of the way it needs to be handled in wattsi, each example gets processed 3 times: 1) single-page full spec, 2) multipage full spec, 3) developer version

[07:52:19.0000] <TabAtkins>
Holy shit tho

[07:52:38.0000] <annevk>
Hmm

[07:52:44.0000] <MikeSmith>
TabAtkins: well I think that works out to only 80ms per example

[07:53:19.0000] <TabAtkins>
MikeSmith: You think you could do a pass and pull all the to-be-highlighted text out so I can play with it?

[07:53:21.0000] <MikeSmith>
to pipe the example to the highlighter, have the highlighter process it, write it back to the output

[07:53:29.0000] <annevk>
Also one singlepage snapshot

[07:53:40.0000] <TabAtkins>
80ms is a long time. 😤

[07:53:58.0000] <TabAtkins>
But I'm wondering how much is it vs highlighting

[07:54:09.0000] <MikeSmith>
annevk: right now I have it not highlighting the snapshot output

[07:54:15.0000] <TabAtkins>
* is IO

[07:54:49.0000] <MikeSmith>
annevk: on the assumption we don’t want to make the snapshot especially user-friendly anyway

[07:54:58.0000] <annevk>
4.5min would be annoying with Travis too, currently failure is reported quite quick

[07:55:08.0000] <annevk>
MikeSmith: fair

[07:55:09.0000] <MikeSmith>
or rather maybe, we don’t want people using the snapshot for anything

[07:55:09.0000] <Domenic>
Yeah we knew it would take a while. But I think it's ok since we'll only run it on CI.

[07:55:25.0000] <Domenic>
I think the snapshot should be user friendly, but not the review draft

[07:55:45.0000] <Domenic>
Snapshot is for people being like "this is what I implemented last Thursday"

[07:55:45.0000] <annevk>
How long does Bikeshed take?

[07:56:02.0000] <MikeSmith>
TabAtkins: yeah I can get you the source for all the examples

[07:56:12.0000] <annevk>
If we don’t care about build times…

[07:56:24.0000] <annevk>
(I care a bit)

[07:56:34.0000] <MikeSmith>
TabAtkins: oh, you want the JSONized source of the examples? or the original HTML?

[07:56:58.0000] <TabAtkins>
On my laptop, the Bikeshedded version of HTML took about 3min. On my desktop it was a minute and change iirc.

[07:57:18.0000] <TabAtkins>
MikeSmith: the json, what you'd give to highlighter.

[07:57:50.0000] <annevk>
Sounds like we’d be better of switching to Bikeshed…

[07:58:58.0000] <annevk>
We could potentially do that by making wattsi output a bs source file

[07:59:00.0000] <MikeSmith>
TabAtkins: OK, I have https://gist.githubusercontent.com/sideshowbarker/8284404/raw/cff69f158ea995a17a73af3e9eff29823617caa8/html-spec-all-pre-elements.json but I generated that before I added code for emitting {} for the no-attributes case. So I will regenerate it

[07:59:13.0000] <annevk>
For the conversion

[08:00:20.0000] <MikeSmith>
Domenic: ah OK (about the snapshot). I can flip it on and see how much time it adds

[08:00:42.0000] <TabAtkins>
MikeSmith: I presume you tell which language to highlight it with by looking at the class?

[08:00:50.0000] <MikeSmith>
oh

[08:01:01.0000] <MikeSmith>
I have not implemented that yet

[08:01:17.0000] <MikeSmith>
I think right now I just have it assuming it’s all HTML

[08:01:32.0000] <MikeSmith>
but yeah I will need to have it check the class value

[08:01:33.0000] <TabAtkins>
Ahahaha, ok. That won't give right results. 😀

[08:01:40.0000] <MikeSmith>
yeah I know

[08:02:22.0000] <TabAtkins>
But yeah I'm guessing most of the cost here is in IO, shelling out for each individual example.

[08:03:11.0000] <TabAtkins>
But I think wattsi is intentionally single-pass?

[08:06:53.0000] <MikeSmith>
TabAtkins: single-pass?

[08:07:24.0000] <TabAtkins>
As in it runs thru the source document only one time, rather than repeatedly searching over it (like Bikeshed does).

[08:08:08.0000] <MikeSmith>
it runs through it once for each “variant” we output

[08:08:16.0000] <MikeSmith>
but we output 4 variants

[08:08:52.0000] <MikeSmith>
1) single-page full spec, 2) multipage full spec, 3) developer version, 4) snapshot

[08:08:56.0000] <TabAtkins>
Yeah, but that's fine. Single-pass is just the only way I could imagine getting 16s for each.

[08:09:10.0000] <TabAtkins>
(I really need to buckle down and see about converting wattsi's HTML parser/serializer to Python; those are still the *dominant* time-sinks in large Bikeshed specs.)

[08:09:42.0000] <TabAtkins>
(I think in the Bikeshed-HTML spec they're each 40% of the runtime?)

[08:09:52.0000] <annevk>
MikeSmith: I think it only parses once, serializes a lot though

[08:10:21.0000] <MikeSmith>
annevk: ah right yeah for sure

[08:10:38.0000] <MikeSmith>
if we are talking about HTML parsing, yes, it does it only once

[08:10:59.0000] <MikeSmith>
and blazingly blazingly fast

[08:11:19.0000] <TabAtkins>
Parsing and just general *handling*. Like, Bikeshed obvi only does a single HTML parse, but then it runs over the DOM many many times.

[08:11:59.0000] <TabAtkins>
One of my 2018 goals is to replace almost all of my selectors with a properly-maintained data structure sorting elements by significant classes.

[08:18:39.0000] <Domenic>
annevk: I prefer the <10 second times of the current build to 1.5 minute times...

[08:21:20.0000] <Domenic>
(OK, it's up to 23 seconds now, including linting and pre-processing.)

[08:21:36.0000] <Domenic>
Notably it parses once and then does the three output passes

[08:21:57.0000] <MikeSmith>
TabAtkins: https://gist.githubusercontent.com/sideshowbarker/8284404/raw/8efdf8fe9713839b839955c9a099ff90e2e559a1/examples.json

[08:23:10.0000] <Domenic>
My understanding is that a large part of Wattsi's speed comes from being very intentional about memory use with strings, which is hard to do in a high-level language (i.e. not C/C++/Rust, or apparently, Pascal).

[08:23:20.0000] <Domenic>
s/memory usage/allocation and copying/

[08:23:46.0000] <TabAtkins>
Ah, that would make sense.

[08:26:53.0000] <MikeSmith>
I think it’s actually pretty hard to do even in Pascal

[08:27:31.0000] <MikeSmith>
Hixie did it by inventing some stuff optimized for it

[08:31:36.0000] <annevk>
Domenic: oh, we’d only enable syntax highlighting on master or some such? That’s getting rather fragmented

[08:32:20.0000] <MikeSmith>
why would we need it other than on master?

[08:32:45.0000] <MikeSmith>
I mean the goal is just for end users to have it in the published spec, right?

[08:32:47.0000] <Domenic>
annevk: Well, I certainly wouldn't run it when building locally. Whether we make it on by default (so you have to pass a flag to build.sh to get fast build times) or off by default (so that CI has to pass a flag to get syntax highlighting) is up to us, but I lean toward off by default.

[08:33:22.0000] <MikeSmith>
ah

[08:33:25.0000] <MikeSmith>
good point

[08:33:47.0000] <MikeSmith>
we can add a build flag to disable it

[08:34:02.0000] <MikeSmith>
for local builds

[08:34:13.0000] <Domenic>
Or add one to enable it, for CI builds?

[08:34:18.0000] <MikeSmith>
yeah

[08:35:49.0000] <MikeSmith>
so yeah however we enable/disable it, it runs only for CI builds, so the time cost would only be for CI runs

[08:36:15.0000] <MikeSmith>
that makes it a lot less icky I guess

[08:36:37.0000] <MikeSmith>
as long as it doesn’t cause CI to time out

[08:37:14.0000] <MikeSmith>
I can make it emit log output the whole time at least

[08:38:44.0000] <MikeSmith>
I mean, say, just keeping a counter (of examples) and emitting that after incrementing it each time

[08:38:49.0000] <Domenic>
Yeah I think CI timeout is like 15 minutes so we should be OK

[08:38:57.0000] <MikeSmith>
cool

[08:39:08.0000] <Domenic>
Incremental logs sounds good, yeah, it's annoying staring at CI and wondering if it's stuck

[08:39:16.0000] <MikeSmith>
true yeah

[08:39:45.0000] <MikeSmith>
at this poitn without emitting something, it just feels like it’s hung

[08:39:56.0000] <MikeSmith>
so yeah will add that regardless

[08:40:26.0000] <MikeSmith>
anyway it’s late here so I’ll need to finish the wattsi patch for this later (maybe not til over the weekend)

[08:45:24.0000] <Domenic>
Sounds good! Excited to have these.

[09:26:36.0000] <botie>
tantek, at 2018-06-07 07:56 UTC, MikeSmith said: http://microformats.org/wiki/existing-rel-values is not responding

[09:49:03.0000] <tantek>
botie, inform MikeSmith WFM now, please try reloading microformats.org/wiki/existing-rel-values to confirm and thanks for the heads-up.

[09:49:03.0000] <botie>
will do

[09:51:51.0000] <TabAtkins>
If the CI-errors being quick is something you really care about, the no-highlight version is *so fast* that you could just... do it twice, once without highlighting and once with.

[10:02:27.0000] <annevk>
Not a bad idea

[10:47:13.0000] <annevk>
Ugh, some of the people who want header support in WebSocket are really not helping their cause

[12:34:01.0000] <zcorpan>
jgraham: you're right that the survey should be more coordinated, sorry about that. Can we coordinate now and make tweaks if necessary?

[12:35:58.0000] <zcorpan>
foolip annevk ^

[12:47:14.0000] <zcorpan>
Also what distribution method do you think we should use

[12:48:13.0000] <zcorpan>
Should we have a question for which employer?

[13:03:16.0000] <annevk>
zcorpan: I don’t think any of this matters much personally due to window.js and any.js

[13:04:06.0000] <annevk>
zcorpan: I’d be okay trying to get rid of the single test format entirely

[13:06:18.0000] <foolip>
FWIW, I've always stayed away from it because I never really knew until reading the source how it worked, and when I saw it first thought the tests must be broken

[13:06:33.0000] <foolip>
Which makes me a bad judge of what people who like it would want, of course

[13:18:02.0000] <jgraham>
zcorpan: I think we should withdraw the survey and send out a new one in a week or so. I know that's annoying but since we can only do this kind of thing once per year I think we have to be sure we're getting the input we need each time

[13:30:48.0000] <zcorpan>
Ok

[13:38:25.0000] <zcorpan>
Turned off responses and removed the tweet. Maybe MikeSmith can still reject my email as it's in moderation

[13:39:43.0000] <jgraham>
zcorpan: Thanks. I'll spend some time tomorrow on this

[13:43:20.0000] <zcorpan>
Thank you

[16:22:06.0000] <MikeSmith>
hai, successfully rejected that e-mail message

[16:22:06.0000] <botie>
MikeSmith, at 2018-06-07 16:49 UTC, tantek said: WFM now, please try reloading microformats.org/wiki/existing-rel-values to confirm and thanks for the heads-up.


2018-06-08
[17:37:32.0000] <MikeSmith>
TabAtkins: good point (about how we can just run the build twice in CI)

[03:23:04.0000] <MikeSmith>
is the following WebIDL not syntactically valid?

[03:23:07.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/workers.html#abstractworker

[03:23:14.0000] <MikeSmith>
interface mixin AbstractWorker {

[03:23:14.0000] <MikeSmith>
  attribute EventHandler onerror;

[03:23:16.0000] <MikeSmith>
};

[03:25:53.0000] <annevk>
looks correct to me (the language about "implementing" should probably be changed to "includes" though)

[03:32:06.0000] <MikeSmith>
annevk: OK, I ask because it causes the highlighter to throw with a syntax error

[03:33:02.0000] <MikeSmith>
and there are 5 other WebIDL blocks from the HTML spec that it also fails on

[03:33:07.0000] <MikeSmith>
https://github.com/tabatkins/highlighter/issues/4

[03:33:19.0000] <MikeSmith>
    https://html.spec.whatwg.org/multipage/workers.html#abstractworker

[03:33:19.0000] <MikeSmith>
    https://html.spec.whatwg.org/multipage/interaction.html#elementcontenteditable

[03:33:22.0000] <MikeSmith>
    https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers

[03:33:25.0000] <MikeSmith>
    https://html.spec.whatwg.org/multipage/links.html#htmlhyperlinkelementutils

[03:33:27.0000] <MikeSmith>
    https://html.spec.whatwg.org/multipage/dom.html#htmlorsvgelement

[03:33:29.0000] <MikeSmith>
    https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement

[03:34:09.0000] <annevk>
MikeSmith: what's the error?

[03:34:49.0000] <annevk>
Apart from the last one those are all interface mixins...

[03:36:21.0000] <MikeSmith>
Exception: IDL SYNTAX ERROR LINE: 2 - skipped: "attribute EventHandler onerror"

[03:36:37.0000] <MikeSmith>
...is the error for the https://html.spec.whatwg.org/multipage/workers.html#abstractworker one

[03:37:08.0000] <MikeSmith>
Exception: IDL SYNTAX ERROR LINE: 2 - skipped: "[CEReactions] attribute DOMString contentEditable"

[03:37:20.0000] <MikeSmith>
...for the https://html.spec.whatwg.org/multipage/interaction.html#elementcontenteditable one

[03:40:38.0000] <MikeSmith>
Exception: IDL SYNTAX ERROR LINE: 62 - skipped: "attribute unrestricted double globalAlpha"

[03:40:50.0000] <MikeSmith>
...for the https://html.spec.whatwg.org/multipage/embedded-content.html#htmlimageelement one

[03:45:22.0000] <annevk>
I checked out Safari favicons, doesn't do SVG

[03:45:32.0000] <annevk>
Is Firefox really the only browser? I assume it regressed in Opera?

[04:47:21.0000] <gsnedders>
annevk: I wouldn't guarantee it regressed in Opera, given AFAIK the favicon handling is all in the UI layer?

[04:48:52.0000] <annevk>
Could be, too lazy to test though

[05:08:43.0000] <gsnedders>
I don't think I even have Opera installed nowadays :)

[10:16:43.0000] <annevk>
Domenic: so one thing I was thinking of is that maybe we could have a "document state" object that ends up being 1:1 with Document objects and is created early

[10:17:06.0000] <annevk>
Domenic: but even that might not quite work if we invoke the parser and such too early

[10:17:19.0000] <annevk>
Domenic: so much technical debt

[10:43:39.0000] <Domenic>
annevk: yeah it seems pretty bad. I'm hoping TimothyGu and I can make a dent in some of it this summer, although I am trying to find smaller scoped pieces instead of "fix all of navigation"

[10:44:40.0000] <annevk>
Domenic: it's all so intertwined which makes it really hard

[10:45:06.0000] <Domenic>
I think I've found two separable pieces, namely document.open() and javascript: URLs. Each have like 6 open bugs.

[10:45:21.0000] <annevk>
Domenic: another thing that might be interesting is script execution

[10:45:36.0000] <Domenic>
What's wrong with script execution? :(

[10:46:03.0000] <annevk>
Domenic: I wrote a bunch of tests for document.open() and eventually you hit how it opens the HTML parser which is tricky, but yeah (see a lot of outstanding test PRs on that)

[10:46:38.0000] <annevk>
Domenic: https://github.com/whatwg/dom/issues/575 et al

[10:46:57.0000] <Domenic>
Ah, right :(

[10:46:58.0000] <annevk>
Domenic: basically that browsers have some kind of "it's safe to run scripts stack"

[10:47:17.0000] <annevk>
and some stuff around parser-inserted and moving around documents was also non-interoperable

[15:49:38.0000] <MikeSmith>
TabAtkins: thanks for the highlighter merges


2018-06-09
[23:11:49.0000] <annevk>
Domenic: happy b-day!

[02:27:13.0000] <lgrahl>
https://lists.w3.org/Archives/Public/public-webrtc/2018Jun/0012.html - what do you guys think? I'm not into A/V, so I can't comment on that. :)

[14:22:20.0000] <zewt>
there's no event for img.naturalWidth and naturalHeight changing? :|

[14:23:17.0000] <zewt>
(or more accurately, to find out when they reflect a new src, whether they change or not)


2018-06-11
[17:34:41.0000] <wfpkhc>
/me wanders on in

[17:34:53.0000] <wfpkhc>
Hello

[17:35:10.0000] <wfpkhc>
anyone around?

[17:36:09.0000] <wfpkhc>
/me frowns and sits quietly on the side wall while he waits for someone to join in on the conversation*

[17:37:36.0000] <wfpkhc>
/me sits with his back to the wall and looks about the room and plays with some dice while waits patiently*

[17:39:22.0000] <wfpkhc>
/me ponders about getting a crayon and drawning on the wall but decides its best against that course of action*

[17:39:54.0000] <astearns>
wfpkhc: if you have a question, ask it. this isn't a conversational channel, and you're likely to be kicked if you're spamming emotes

[17:40:14.0000] <wfpkhc>
/me waves hello to astearns -

[17:40:17.0000] <wfpkhc>
yes i have a question

[17:40:24.0000] <wfpkhc>
what do you know about standards sir?

[17:40:45.0000] <wfpkhc>
html5 standards - more specifically

[17:41:48.0000] <wfpkhc>
i try to follow html standards as much as possible and have done a good job up until now - but while migrating from html4 to html5 - i seem to keep coming up with this warning with the validator -

[17:41:54.0000] <wfpkhc>
Warning: The type attribute is unnecessary for JavaScript resources.

[17:42:26.0000] <wfpkhc>
have they removed that in html5?

[17:43:30.0000] <astearns>
wfpkhc: I don't know the answer, but that's a specific-enough question that someone who does know the answer might respond.

[17:43:42.0000] <wfpkhc>
ok sir, thank you

[17:44:33.0000] <wfpkhc>
welcome back ckrn_

[17:45:04.0000] <wfpkhc>
i hate it when the damn hamster dies on the power wheel and you lose connection

[17:45:39.0000] <wfpkhc>
oh come on that was funny :)

[17:46:02.0000] <wfpkhc>
i have to go i might come back later

[17:46:06.0000] <wfpkhc>
thank you all

[18:19:02.0000] <devsnek>
if I were to expose a bunch of non spec globals in my runtime what would be the best way to do that

[18:19:28.0000] <devsnek>
chrome has all it's weird stuff on a "chome" property so im assuming that's a good way?

[06:07:33.0000] <smaug____>
frivoal: that spatial navigation spec is indeed rather long. Will take quite a few hours to review

[06:08:02.0000] <smaug____>
one thing I noticed that the draft seems to think focusin fires differently than it actually fires

[06:08:03.0000] <smaug____>
see https://github.com/w3c/uievents/issues/88

[06:08:56.0000] <frivoal>
smaug____: We've tried to organize the reading order of the spec in a way to minimize the pain. If we have done a poor job at that, that is also useful feedback

[06:09:27.0000] <smaug____>
frivoal: just something I noticed in Example 8

[06:09:53.0000] <smaug____>
focusin/out handling is totally bogus in browsers

[06:10:08.0000] <smaug____>
since webkit/blink decided to implement broken behavior

[06:10:51.0000] <frivoal>
Ok. We should fix that, but this is thankfully only incidental. The rest of the spec does not depend on that behavior, it was just given for context

[06:11:44.0000] <frivoal>
Still, if it's wrong (and I trust you that it is), we should fix it

[06:12:10.0000] <smaug____>
frivoal: question, the example mention keydown

[06:12:17.0000] <smaug____>
what about keyup?

[06:12:34.0000] <smaug____>
or is the idea that there can be several keydown in case of repeated events or something?

[06:13:24.0000] <frivoal>
This is really the problem with example that try to illustrate the general idea without getting into the details too much. For people who know the details, they raise more questions than they answer :)

[06:14:19.0000] <frivoal>
In our case, we spec that it is up to the browser to decide what triggers spat nav. We expect that key down on arrow keys (or shift+arrow keys) will be rather typical, but that's a UI decision, up to the UA.

[06:15:01.0000] <frivoal>
So the example is meant to illustrate (possibly with insufficient details) what a typical implementation would do, but there is some flexibility about that

[06:15:17.0000] <smaug____>
but the idea is that repeated key (long press) will cause several navigations.

[06:15:27.0000] <smaug____>
I assume so

[06:15:41.0000] <frivoal>
It is one possible behavior, and I assume it would be typical. But not required by the spec.


2018-06-12
[02:15:35.0000] <domfarolino>
annevk: I'm a tad confused; should Request objects have an exposed `body` attribute, similar to Responses?

[02:21:16.0000] <domfarolino>
Seems like it should, no implementations do this right now however I couldn't find tests testing this (albeit did not spend very long looking)

[04:04:33.0000] <annevk>
domfarolino: it was added before we had a test requirement

[04:05:02.0000] <annevk>
domfarolino: there are also some open issues against Fetch related to that

[04:05:52.0000] <annevk>
domfarolino: but yeah, impl of request body streams has not yet happened, which is the main issue

[04:31:07.0000] <MikeSmith>
annevk: about the mechanism that other of our build scripts use for determining whether they’re being run under Travis or not:

[04:32:05.0000] <MikeSmith>
I see that whatwg.org/resources.whatwg.org/build/deploy.sh checks for a TRAVIS environment variable to see if it’s set to true

[04:32:25.0000] <MikeSmith>
but I don’t see where/how that TRAVIS variable ever gets set

[04:33:27.0000] <MikeSmith>
ah nm

[04:33:50.0000] <MikeSmith>
from https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables I see it’s set by Travis itself

[04:41:46.0000] <annevk>
👍

[05:28:51.0000] <MikeSmith>
mkwst: is specifying data: as a source in a CSP policy still unsafe?

[05:29:08.0000] <MikeSmith>
or is it handled differently in Blink now at least?

[05:29:54.0000] <MikeSmith>
I mean as far as the thing about data: URLs running in a unique origin

[05:30:40.0000] <MikeSmith>
I don’t have a clear understanding if that makes data: safer or not as far as CSP goes

[05:31:11.0000] <MikeSmith>
*I mean as far as the thing about *scripts* from data: URLs running in a unique origin

[08:38:11.0000] <mkwst>
MikeSmith: Framed `data:` URLs produce a document running in an opaque origin (e.g. `<iframe src="data:text/html,whateverwhateverwhatever">`.

[08:38:46.0000] <mkwst>
MikeSmith: `<script src="data:text/javascript,whateverwhatever">` causes script to execute in your document's origin.

[08:38:54.0000] <mkwst>
The former might be safe, depending on what you care about.

[08:39:01.0000] <mkwst>
The latter almost certainly isn't safe.

[08:56:15.0000] <MikeSmith>
mkwst: OK, thanks


2018-06-14
[05:05:33.0000] <lgrahl>
FYI the WebRTC guys are considering the use of streams for media as well but there are a lot of open questions. Maybe some of you can help answering them or comment on it: https://lists.w3.org/Archives/Public/public-webrtc/2018Jun/0039.html

[05:06:04.0000] <lgrahl>
I don't want them to reinvent the wheel if not necessary :)

[07:10:01.0000] <wanderview>
JakeA: can't a targetClientId be null?

[07:10:23.0000] <wanderview>
or maybe I have forgotten how targetClientId is supposed to work... I've been manually focused on resultingClientId

[07:10:42.0000] <JakeA>
wanderview: hmm, I guess if can be if it's cross-origin

[07:10:50.0000] <JakeA>
it can*

[07:10:55.0000] <wanderview>
JakeA: or opening a brand new tab?

[07:10:59.0000] <JakeA>
yeah

[07:11:03.0000] <JakeA>
good point

[07:44:18.0000] <Domenic>
lgrahl: as much as I would like to see Web RTC use Streams properly, it seems like a long and expensive education campaign, much of which would be done on mailing lists I don't have easy access to. So my current strategy is to just hope for the best. Eventually they figured out promises, at some cost to them due to the transition. Probably similar things will happen for streams.


2018-06-15
[09:24:03.0000] <devsnek>
Domenic: whats your compulsion behind wanting to use existing url infra

[09:26:00.0000] <devsnek>
for the std:x|y

[09:34:10.0000] <annevk>
devsnek: please keep it respectful

[09:42:11.0000] <devsnek>
annevk: er

[09:42:18.0000] <devsnek>
what did i do?

[09:42:37.0000] <devsnek>
i was just asking for his reasoning behind wanting to use existing url stuff

[09:43:09.0000] <annevk>
Using “compulsion” is not just asking

[09:43:27.0000] <devsnek>
sorry about the phrasing then

[09:43:36.0000] <devsnek>
i didn't intend for it to come across in that way

[10:13:36.0000] <Domenic>
devsnek: it's basically about simplicity. URLs are pretty good for locating resources. One might even say they're a universal way to do so. Why invent a new way to locate resources? Everyone thinks their specific resource type is so special it needs a new way of locating it, but I just don't see any advantage.

[10:13:58.0000] <devsnek>
Domenic: because its not just one resource

[10:14:09.0000] <Domenic>
devsnek: it definitely is...

[10:14:16.0000] <Domenic>
We don't somehow load two modules

[10:14:29.0000] <devsnek>
its either std:x or some url

[10:14:29.0000] <Domenic>
Maybe the ?fallback= syntax would make this clearer, interesting.,

[10:14:44.0000] <Domenic>
Here's the analogy

[10:15:26.0000] <Domenic>
https://example.com/foo?fallback=bar returns the contents of https://example.com/foo if you're using a modern browser, or the contents of https://example.com/bar if you're using an old browser

[10:15:37.0000] <Domenic>
https://example.com/foo?fallback=bar is a great way of locating the resource

[10:15:42.0000] <Domenic>
The resource has different representations depending on your user agent

[10:15:46.0000] <Domenic>
But it's still a single resource

[10:15:53.0000] <devsnek>
well in the case of example.com

[10:15:55.0000] <devsnek>
it should just be a query param

[10:16:02.0000] <Domenic>
There are other identifiers for the same resource, only some of which work, depending on which UA you're using

[10:16:12.0000] <Domenic>
Yes, that's why I'm saying maybe this would be clearer for people if we did std:x?fallback=y

[10:16:25.0000] <Domenic>
But there's nothing magical about query params, besides convention

[10:16:32.0000] <devsnek>
std:x?fallback=y makes sense

[10:16:33.0000] <Domenic>
Maybe I should take my own advice and not invent something new and special though

[10:17:00.0000] <Domenic>
I think | as an abbreviate for ?fallback= is nice, but maybe it's too confusing

[10:17:47.0000] <Domenic>
URLs are supposed to be opaque in terms of how they map to resources, but some people really like attaching meanings to sigils like ?, and maybe I should just go along with that

[10:17:56.0000] <devsnek>
std:x?fallback=y feels good to me because uh

[10:18:02.0000] <devsnek>
std:x is just another thing you load

[10:18:11.0000] <devsnek>
and it could theoretically be handling import.meta.url however it wants

[10:18:19.0000] <devsnek>
even if that isn't what happens behind the scenes

[10:18:20.0000] <Domenic>
You understand though that this is just the decision of the server

[10:18:29.0000] <Domenic>
You could have example.com do https://example.com/foo|bar and do the exact same behavior

[10:18:39.0000] <devsnek>
wdym

[10:18:54.0000] <Domenic>
You can set up your server so that https://example.com/foo|bar returns the contents of https://example.com/foo if you're using a modern browser, or the contents of https://example.com/bar if you're using an old browser

[10:19:02.0000] <devsnek>
oh yeah

[10:19:14.0000] <Domenic>
It's just a random convention that sometimes people use ? instead of other sigils

[10:19:22.0000] <devsnek>
i see what you're saying now

[10:19:43.0000] <Domenic>
Yeah. But it does seem using the sigils people are used to would help.

[10:20:02.0000] <devsnek>
maybe i was also misunderstanding the proposal a bit

[10:20:14.0000] <devsnek>
i took it as a generic way to fallback between resources

[10:20:22.0000] <wanderview>
Domenic: have you considered being able to specify multiple std: URLs, or a some kind of matching function, and then only falling back if they all fail?

[10:20:38.0000] <Domenic>
wanderview: yeah that's definitely an important open issue.

[10:20:56.0000] <Domenic>
https://github.com/drufball/layered-apis/issues/5

[10:21:12.0000] <wanderview>
I'm just thinking if the URLs end up containing things like "-v1", "-v2", etc... then people may want to call out specific versions or match any version, etc

[10:21:15.0000] <Domenic>
But overall I'm starting to feel like maybe we should remove this URL syntax and use package name maps instead...

[10:21:18.0000] <wanderview>
thanks

[10:21:36.0000] <devsnek>
package name maps as fallbacks

[10:21:45.0000] <devsnek>
or specifying the fallbacks

[10:21:46.0000] <devsnek>
sounds nice

[10:22:07.0000] <wanderview>
Domenic: oh, that issue is about multiple fallbacks... I was talking about multiple standard things in the browser

[10:22:16.0000] <Domenic>
wanderview: oh interesting!

[10:22:20.0000] <Domenic>
Well I guess it would still work?

[10:22:30.0000] <devsnek>
with a package name map

[10:22:31.0000] <Domenic>
std:x-v1|std:x-v2

[10:22:44.0000] <devsnek>
could you do like src="https://mypollyfill"

[10:22:49.0000] <devsnek>
and then in a package name map

[10:22:51.0000] <devsnek>
intercept that

[10:22:52.0000] <Domenic>
Yes!!

[10:23:00.0000] <wanderview>
Domenic: can you chain beyond that?  std:x-v1|std:x-v2|https://fallback.com

[10:23:01.0000] <devsnek>
so older browsers get the polyfill

[10:23:08.0000] <Domenic>
wanderview: well basically issue #5 is suggesting that

[10:23:12.0000] <wanderview>
ok

[10:23:15.0000] <Domenic>
devsnek: yeah that's one of the two big problems a package name map would solve

[10:23:31.0000] <Domenic>
The std:x|y syntax only gives you fallbacks in browsers that support std:x|y

[10:23:43.0000] <Domenic>
Which is great in the future but hurts when trying to bootstrap the ecosystem

[10:23:56.0000] <devsnek>
tfw package name maps are lowkey the solution to every problem

[10:23:59.0000] <Domenic>
( The other big problem is https://github.com/drufball/layered-apis/issues/10 )

[10:25:09.0000] <devsnek>
hmm about number 10

[10:25:12.0000] <devsnek>
lets say BigInt was behind std:bigint

[10:25:54.0000] <devsnek>
wouldn't it be wiser to do `import BigInt from 'std:bigint|x'` instead of `import 'std:bigint|x';` with attaching to global

[10:27:07.0000] <Domenic>
That's a whole separate issue

[10:27:31.0000] <Domenic>
But even if you did

[10:27:41.0000] <Domenic>
Imagine you then had two separate bigint polyfill instances floating around your pap

[10:27:49.0000] <Domenic>
instanceof wouldn't work, semantics might be slightly different, not good

[10:27:53.0000] <devsnek>
true

[10:28:02.0000] <Domenic>
Even without global side effects it's still not great

[10:29:23.0000] <devsnek>
i guess in that case enforcing fallbacks would make sense

[10:54:13.0000] <wanderview>
Domenic: wouldn't ?fallback= require URL encoding the fallback URL in the search param?

[10:54:24.0000] <Domenic>
Hmm, yeah, maybe :-/

[10:54:29.0000] <wanderview>
whereas it was not clear to me that the URL would need to be encoded if it had special syntax like "|"

[10:55:00.0000] <wanderview>
Domenic: I'll add the question to the issue I guess

[11:34:20.0000] <domfarolino>
annevk: I’ve got something started for console’s formal warning reporting, I’ll get something up for review soon just heads up.

[11:34:38.0000] <domfarolino>
(I know it was mentioned on that DOM PR by jungkees )

[11:51:09.0000] <annevk>
coool

[14:09:15.0000] <Domenic>
TabAtkins: status of https://github.com/tabatkins/highlighter/issues/5 ?

[14:12:40.0000] <TabAtkins>
Looking into it now. I can reproduce the issue.

[14:27:03.0000] <zewt>
download attribute still doesn't work properly? :|

[14:28:05.0000] <zewt>
(seems like browsers still only use it as the default filename if a link is downloaded, but don't actually cause the link to be downloaded by default)


2018-06-16
[18:17:09.0000] <devsnek>
is there a reason that wpt's testharness.js uses `this` and not like `(0, eval)('this')`

[18:17:41.0000] <devsnek>
as far as i can see there's no reason it couldn't be loaded in module parse goal besides that

[20:04:25.0000] <domfarolino>
devsnek: might want to asking in #testing on irc.w3.org

[20:05:02.0000] <domfarolino>
to ask*

[20:46:07.0000] <Domenic>
I'm not sure writing "polyglot" scripts in such a way is a great idea.

[20:46:23.0000] <Domenic>
Also then it wouldn't be usable for testing CSP

[21:01:36.0000] <devsnek>
domfarolino: thanks


2018-06-18
[06:31:20.0000] <annevk>
foolip: I think I lost privileges on Chrome's bug tracking software as I can no longer add the appropriate labels

[06:31:23.0000] <annevk>
foolip: https://bugs.chromium.org/p/chromium/issues/detail?id=853723

[08:36:13.0000] <Domenic>
I wonder if we should add the new CORP header to any whatwg.org pages? I'm kind of unclear on its utility for public sites.

[09:18:24.0000] <annevk>
Domenic: the blog

[09:19:14.0000] <Domenic>
Makes sense. But not for any of the specs?

[09:20:04.0000] <Domenic>
I hope we end up with a canonical set of advice like "If your site is private, or public-but-uses-credentials, add X; if your site is public, add Y".

[09:20:07.0000] <annevk>
Domenic: I don't think so, no private data

[09:20:29.0000] <annevk>
Domenic: yeah, I think that kind of advice is doable

[09:20:56.0000] <annevk>
Domenic: did you read Artur Janc's paper?

[09:21:13.0000] <Domenic>
I think I skimmed it

[15:36:47.0000] <MikeSmith>
TabAtkins: thanks for the highlighter fix and the investigation of the widlparser bug

[15:37:04.0000] <MikeSmith>
once the widlparser bug fix is merged, I think we'

[15:37:10.0000] <MikeSmith>
oofs

[15:37:55.0000] <MikeSmith>
*I think we’ll have the highlighter+wattsi combination working with 100% of the <pre> elements in the HTML spec

[15:39:05.0000] <TabAtkins>
Np. And if we can work around this perf thing, it won't even be noticable in the build. 😀

[15:39:41.0000] <MikeSmith>
yeah that would be great

[15:40:43.0000] <MikeSmith>
yesterday I needed to make a further change to the wattsi sources to get it handle large input as expected

[15:41:07.0000] <MikeSmith>
because of the huge CSS block at https://html.spec.whatwg.org/multipage/rendering.html#quotes

[15:42:30.0000] <MikeSmith>
needed to make wattsi buffer the highlighter output in chunks before being written back out to the generated spec

[15:50:17.0000] <TabAtkins>
Ahhhh, cool. If you can batch it it'll remove most of the time spent, I think.

[15:52:45.0000] <MikeSmith>
well the buffering I added so far didn’t seem to make any difference to the performance

[15:52:57.0000] <MikeSmith>
it’s just there to prevent a deadlock

[15:53:03.0000] <MikeSmith>
http://wiki.freepascal.org/Executing_External_Programs#Reading_large_output

[15:53:17.0000] <MikeSmith>
> Suppose the program writes a lot of data to the output. Then the output pipe becomes full and the called progam waits until the pipe has been read from. But the calling program doesn't read from it until the called program has ended. A deadlock occurs.

[15:56:02.0000] <TabAtkins>
Ah, and I'm talking with some friends who are doing some tests, and yeah, invoking the Python interpreter on a totally empty file still takes about 40ms per invocation.  Add in actually parsing my script and imports, and it's reasonable to jump up to 80ms per invocation, which is what we're apparently seeing (90s total, minus 2s for the actual execution, divided over 1100 invocations = 80ms of initialization per execution).

[15:56:28.0000] <TabAtkins>
Oh, I see, you're doing the opposite and chunking a single large input.

[16:00:17.0000] <MikeSmith>
yeah

[16:01:37.0000] <MikeSmith>
“invoking the Python interpreter on a totally empty file still takes about 40ms per invocation”, that’s pretty surprising

[16:07:26.0000] <gsnedders>
MikeSmith: I expect things like the import machinary and various other bits of the VM implemented in Python are loaded eagerly

[16:11:22.0000] <TabAtkins>
Yeah, this is why pure-Python CGI isn't very common. ^_^

[16:16:53.0000] <MikeSmith>
oh TabAtkins, another remaining fix that needs to be landed is for ensuring UTF-8 output

[16:17:14.0000] <MikeSmith>
https://github.com/tabatkins/highlighter/pull/3 or whatever better way there might be to do that

[16:22:50.0000] <MikeSmith>
gsnedders: so is there some way to make Python not load them eagerly?

[16:22:57.0000] <MikeSmith>
or some way to mitigate it?

[16:23:19.0000] <gsnedders>
I don't think so

[16:23:38.0000] <MikeSmith>
I see

[16:24:01.0000] <TabAtkins>
Yeah, and anyway I still have to load Pygments each time, which is pretty big and apparently about another 40ms.

[16:24:08.0000] <MikeSmith>
ah

[16:25:00.0000] <TabAtkins>
I just pushed a change that *should* handle the utf-8 (encoding back to a utf-8-encoded bytestring before printing) - let me know if it works. In any case, I'm out for the day; feel free to drop me comments here or in the GH issues and I'll get to them tonight or tomorrow.

[16:25:12.0000] <MikeSmith>
hai

[16:25:14.0000] <MikeSmith>
thanks


2018-06-19
[19:08:19.0000] <Domenic>
MikeSmith: TabAtkins: it seems like the solution would be to accumulate text/language pairs, then send some mega-JSON to the python process to get it all highlighted in one go, then go back and update the nodes?

[23:12:48.0000] <MikeSmith>
Domenic: yeah I guess so, if we wanted to optimize for speed. But that would amount to a major rewrite of what the wattsi code has now

[23:14:40.0000] <MikeSmith>
and it’d feel sad to have to move yet more of the cost of it into the wattsi code to make up for limitiations in the desing of the Python VM

[23:16:44.0000] <MikeSmith>
especially given we started out on doing it this way, with needing to write a JSON serializer in the wattsi code to make up for the poor performance of HTML parsing in Python

[23:25:39.0000] <MikeSmith>
to make the rewrite work, I guess we’d have to make wattsi generate a unique ID for each <pre> node (be making a hash for it whatever), then until we get to the end of the spec source document, collecting/holding all the JSON for the <pre>s of each class into memory with the JSON including their IDs, and pass those bundles (three I guess -) along to the highlighter as an attribute so that it gets

[23:25:45.0000] <MikeSmith>
included in the generated

[23:26:24.0000] <MikeSmith>
...output for the highlighter

[23:28:23.0000] <MikeSmith>
but then we’d need to go back and do another pass through the HTML source to do a lookup of each <pre> against the giant output we get back from the highlighter to looko for the corresponding node

[23:29:39.0000] <MikeSmith>
but we need HTML output from the highlighter, not JSON, so if we did that lookup against the HTML contents we get back, then we’re gonna need to (re)parse it in wattsi

[23:30:55.0000] <MikeSmith>
so actually given all that I don’t even see a way to make it work in practice in wattsi ー no practical way to bundle up all the <pre>s

[23:33:49.0000] <MikeSmith>
I mean, the way the current wattsi code is overall, we need to write each modified <pre> node to the spec output right after we read the unmodified source for it

[23:34:44.0000] <MikeSmith>
and that’s also why we need to do that 4 times for each <pre> instead of once for each

[23:35:38.0000] <MikeSmith>
because we are writing/building 4 different spec versions

[02:44:23.0000] <annevk>
JakeA: https://github.com/whatwg/html/issues/2806 seems to contain a proposal for doing range requests for images

[02:44:37.0000] <annevk>
JakeA: and also some confusion about whether that needs to be standardized

[02:45:10.0000] <JakeA>
annevk: will jump in, cheers!

[03:23:47.0000] <Domenic>
MikeSmith: hmm I thought there would be a way to keep references to all pre nodes in memory, with no IDs or lookups or second pass.

[03:24:28.0000] <Domenic>
(Then correlate them by index-in-pre-array <-> index-in-HTML-output-array)

[05:57:44.0000] <MikeSmith>
Domenic: the problem with doing it that way is, there’s content that gets added to the pre nodes by wattsi

[05:58:47.0000] <MikeSmith>
so the highlighter needs to operate not on the raw source by instead on the wattsi-modified/preprocessed versions

[05:59:48.0000] <MikeSmith>
but I have to admit that at this point, I have a somewhat vague recollection of why it needed to be implemented the way I did

[06:00:40.0000] <MikeSmith>
...because I implemented the basis of it 7 or 8 months ago and had a much clearer idea of why then

[06:01:05.0000] <MikeSmith>
but in the mean time it sat for all those months

[06:09:06.0000] <MikeSmith>
anyway as far as the highlighter, it’s not clear to me if there’s something that would prevent the highlighter from being wrapped in a simple web server so that it could run persistently and we avoid repeating the VM startup costs 1121 x 4 times

[06:32:10.0000] <MikeSmith>
similar to teh Bikeshed http service or to wptserve or whatever

[06:45:39.0000] <jsx>
Hello

[06:45:44.0000] <jsx>
I'm trying to use HTML's maxlength attribute to limit character input. This works as expected with English character, but when I enter Japanese character, it allows me to enter any number of characters, but once the input field is blurred, the text is automatically truncated to fit the maxlength limit.

[06:45:57.0000] <jsx>
The issue is found only when entering Japanese, Chinese and Korean characters.

[06:46:18.0000] <jsx>
Is this the expected behavior for maxlength for these characters?

[06:46:42.0000] <jsx>
https://jsbin.com/?html,js,output (works for English chars)

[06:47:00.0000] <jsx>
sry, wrong link

[06:47:01.0000] <jsx>
https://jsfiddle.net/bwtf4ake/

[06:58:30.0000] <JakeA>
Any setTimeout experts here? Is there any reason setTimeout(cb, 10) would call cb in less than 10ms, according to Date.now()? It seems to happen in everything but Safari

[06:58:39.0000] <JakeA>
https://static-misc.glitch.me/set-timeout-delay

[07:22:00.0000] <zcorpan__>
JakeA: maybe they "cheat" to get better score on some benchmark? dunno

[07:23:26.0000] <zcorpan__>
or it takes a while for the first task to be surfaced

[07:24:06.0000] <JakeA>
Either would be against the spec I think

[07:24:16.0000] <wanderview>
JakeA: how much earlier than 10ms?

[07:24:19.0000] <annevk>
jsx: I suspect that's a bug due to usage of an IME, or are you not using that to enter those characters?

[07:24:38.0000] <JakeA>
wanderview: Seems like 9 in Chrome & Firefox. Edge seems to go lower. Saw 5.

[07:24:48.0000] <wanderview>
JakeA: at one point I tried to make firefox never fire early and I believe it caused some interop issues or made things skew too late on average

[07:24:59.0000] <JakeA>
innnnnteresting

[07:25:20.0000] <wanderview>
JakeA: in my tests edge seems to be doing much more aggressive coalescing of timers to 5ms boundaries... probably a big win for battery

[07:26:19.0000] <JakeA>
also interesting!

[07:26:22.0000] <annevk>
wanderview: hmm, now I wonder whether timers can be used as a sidechannel

[07:27:32.0000] <wanderview>
JakeA: at least in firefox we have primitives that only allow sleeping at milliseconds boundary, but you can time things at sub-millisecond level with performance.now() (and internal timing APIs)

[07:27:43.0000] <wanderview>
JakeA: so we have to decide to round-up or round-down at some point

[07:30:34.0000] <JakeA>
makes sense

[07:31:00.0000] <wanderview>
anyway, we could always round up... but then all the error will be biased to be late and things will be more likely to drift

[07:31:32.0000] <wanderview>
JakeA: for setInterval() chrome actually has drift correction code that will purposely fire early if the last interval was late... there is a spec issue somewhere to standardize that

[07:32:02.0000] <JakeA>
wanderview: yeah, it makes a lot more sense for setInterval, although yeah it isn't spec'd

[07:32:58.0000] <wanderview>
annevk: its hard to say for the sidechannel... this could get more precise in the future (or not as edge is doing)...  I do think it would be hard to rely on precise setTimeout() firing in a cross-browser way

[07:33:43.0000] <wanderview>
JakeA: here is the spec issue... I think we have some amount of agreement to do the drift correction: https://github.com/whatwg/html/issues/3151#issuecomment-339000314

[07:37:20.0000] <annevk>
wanderview: I was thinking that if they are coalesced you might be able to determine what other timers are running

[07:39:57.0000] <wanderview>
not sure I understand

[07:43:53.0000] <annevk>
wanderview: it seemed a little similar to the things described in chapter 6 of https://tom.vg/papers/cross-browser-tracking_woot17.pdf

[07:46:07.0000] <wanderview>
annevk: I'll have to read that a little later

[07:46:45.0000] <wanderview>
annevk: coalescing timers is observable, though... like if you use postMessage() you can see that coallescing re-orders setTimeout(0) in relation to the postMessage

[08:36:40.0000] <smaug____>
env() sounds really bizarre "user agents may define additional undocumented environment variable"

[08:37:39.0000] <smaug____>
/me is surprised one even proposes such thing to the web

[08:37:45.0000] <smaug____>
s/variable/variables/

[08:39:58.0000] <lgrahl>
We were wondering if there's an existing "write to file" API for a ReadableStream in browsers... or something planned?

[09:05:16.0000] <annevk>
lgrahl: what does "file" mean?

[09:09:22.0000] <lgrahl>
annevk: Basically, the use case we had in mind was about downloading a stream to a file. So, you get the download "save to disk" dialog thingy and then stream the data into it.

[09:10:38.0000] <wanderview>
I believe you can do that with a service worker and content-disposition header

[09:11:23.0000] <lgrahl>
wanderview: Is there an example for this?

[09:12:05.0000] <wanderview>
lgrahl: I think JakeA had an example of service-worker content-disposition to download an .epub file or something... then it would just be normal fetch API body stream support

[09:12:18.0000] <wanderview>
sorry, I don't have anything handy at the moment

[09:12:21.0000] <wanderview>
I have to step away

[09:14:13.0000] <Mek>
fwiw I do also plan to start looking into more explicit writable file type APIs (again, since it's not like we haven't had many attempts at that already)... although downloading a stream to a file isn't quite a use case I had in mind for that work...

[09:16:21.0000] <lgrahl>
Since we have high hopes that we'll get streams into data channels, this would be really good to have, since one of the core use cases is P2P file sharing.

[09:17:41.0000] <lgrahl>
So far, the only example we can bring up is "pipe an HTTP response into a data channel" which is... interesting but a rather rare use case. :)

[09:20:37.0000] <lgrahl>
Unless of course there are other APIs using (byte) streams I'm not aware of.

[10:29:36.0000] <foolip>
annevk: I assume you've checked that you're using the right account on crbug.com? Still not working now?

[10:31:24.0000] <annevk>
foolip: I'm still using the same account as before and no, it's not

[10:31:46.0000] <annevk>
foolip: that is, I only see a comment field, not the giant list of options I got before

[10:32:41.0000] <annevk>
foolip: I checked with my Mozilla account and that has the same non-privileges; don't think I've got more accounts

[12:42:02.0000] <smaug____>
Domenic: am I missing something, or does https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-upgrade end up upgrading already-upgraded elements again?

[12:42:25.0000] <smaug____>
I mean, if one for example call the method twice with same param, elements are upgraded twice

[12:46:33.0000] <smaug____>
ah, no, https://html.spec.whatwg.org/multipage/custom-elements.html#upgrades will return early

[15:15:05.0000] <Domenic>
Heh, I guess it makes the example in step 1 kinda funny though, since you can now trigger it much more easily.


2018-06-20
[17:25:21.0000] <domfarolino>
Domenic: https://github.com/web-platform-tests/wpt/pull/11399 is super minor, think it looks alright?

[17:26:38.0000] <Domenic>
Ya thanks for the ping, lgtmed

[17:26:54.0000] <domfarolino>
thanks

[21:57:05.0000] <dom>
anyone else having irccloud connectivity issues?

[00:00:56.0000] <jsx>
annevk: I tried with both IME and a physical keyboard and the problem existed in both cases.

[00:01:37.0000] <jsx>
annevk: (regarding maxlength behavior for Korean, Japanese and Chinese characters)

[01:35:24.0000] <annevk>
jsx: I think the best next step would be to file browser bugs

[01:35:48.0000] <annevk>
jsx: unfortunately I don't think we can do keyboard input yet with web-platform-tests, otherwise we could have automated tests for this

[01:38:49.0000] <jsx>
Thanks annevk, will do. I found this old Chrome bug about the same thing (https://bugs.chromium.org/p/chromium/issues/detail?id=28838). I'll investigate a little further and probably file bugs.

[02:35:40.0000] <lgrahl>
I will be proposing the stream API extension to data channels for the WebRTC NV discussion in half an hour. If you want to join in and add your two cents, I can send you a hangouts link.

[09:45:58.0000] <zcorpan>
hsivonen: are you aware of the single page test feature?

[11:05:31.0000] <TabAtkins>
fTWgoql69b/q

[11:05:39.0000] <TabAtkins>
motherfuck

[11:05:41.0000] <TabAtkins>
WELP

[11:14:28.0000] <TabAtkins>
nuts to you haxxors, I needed to change my password *anyway*

[11:33:02.0000] <mkwst>
You should start your password with `/!`.

[11:34:34.0000] <TabAtkins>
...that's a really good idea

[11:34:53.0000] <TabAtkins>
tho doesn't the pw-detector still complain about that if i type it in?

[11:49:09.0000] <mkwst>
No idea! Works for me!

[14:38:25.0000] <Momma_Twink>
/me hello?


2018-06-21
[18:47:54.0000] <a-ja>
mkwst, an idea: https://example.com/.well-known/clear-site-data

[21:53:32.0000] <mkwst>
a-ja: What would that do?

[00:38:23.0000] <foolip>
annevk: turns out it's a holiday tomorrow, maybe we can push out some review drafts today?

[00:39:16.0000] <annevk>
foolip: Domenic did not get back to me on IM

[00:39:42.0000] <foolip>
annevk: do we need to do them all together?

[00:40:13.0000] <annevk>
foolip: the plan was to publish the first 5 (lexicographically)

[00:40:33.0000] <hsivonen>
zcorpan: I am not aware. What's the single page test feature?

[00:41:29.0000] <zcorpan>
hsivonen: https://web-platform-tests.org/writing-tests/testharness-api.html#single-page-tests

[00:42:01.0000] <hsivonen>
zcorpan: thanks!

[00:42:34.0000] <zcorpan>
hsivonen: also see https://github.com/web-platform-tests/wpt/pull/11364

[00:51:37.0000] <foolip>
annevk: let's just wait for Domenic to wake up. I think he's in Waterloo, so the usual timezone

[00:54:28.0000] <annevk>
foolip: yeah, there's no particular rush, but I'll be gone for 3.5 weeks after this week so we'd have to postpone or someone would have to take over

[00:55:02.0000] <annevk>
foolip: I suspect some ongoing HTML <canvas> PRs might also not land due to that, as they're progressing rather slowly

[00:55:23.0000] <annevk>
Timezones don't really help when you're not on the same page

[00:57:41.0000] <foolip>
OK. FWIW, I'll also be out next week and some of the following

[08:48:06.0000] <domfarolino>
annevk: Hm just saw you and foolip talking about the review drafts/timing of their publication. Was it premature for me to merge the Console one?

[08:50:24.0000] <Domenic>
domfarolino: nah we were just starting now, it's all good

[08:51:34.0000] <Domenic>
Need to get https://github.com/whatwg/whatwg.org/pull/210 merged before I feel comfortable blogging about them

[08:51:50.0000] <Domenic>
But https://console.spec.whatwg.org/review-drafts/2018-06/ is now a thing

[08:57:04.0000] <Domenic>
Ah good the images worked on console too

[09:13:03.0000] <domfarolino>
Is the styling (or lack thereof) of the console review draft intentional?

[09:14:39.0000] <annevk>
domfarolino: yes

[09:15:46.0000] <annevk>
domfarolino: shared a thing with you for additional context that Domenic will make public in a bit

[09:15:55.0000] <domfarolino>
Thanks

[09:22:54.0000] <domfarolino>
Looks good

[09:35:01.0000] <FND>
hey TabAtkins, domfarolino figured you might be able to confirm this apparent Chrome CSS bug is in fact non-standard behavor:

[09:35:04.0000] <FND>
https://burningchrome.com/~fnd/_/7dd9ac64-9734-4c1f-951d-e0c214fa26a5.html#s2

[09:35:18.0000] <FND>
with `overflow: hidden`, targeting an element via the URI's fragment identifier does not take into account that element's border on Chrome, i.e. vertical scroll position is determined by the element's top padding edge rather than its top margin edge

[09:35:33.0000] <FND>
by contrast, both Firefox and Safari use the margin edge as expected

[09:36:17.0000] <TabAtkins>
Hmm, unsure that that's specified anywhere. But I agree the border box is the better behavior.

[09:37:01.0000] <FND>
thanks, that should suffice for me to file a bug

[09:37:03.0000] <gsnedders>
yeah, undefined

[09:37:39.0000] <gsnedders>
pretty sure I remember seeing this reported somewhere previously, FWIW, though who knows if I could find it

[09:37:50.0000] <FND>
any tips on how to phrase it better? my description seems a little cumbersome, doesn't scan well

[09:38:02.0000] <FND>
ah, yes, that's the problem exactly :)

[09:41:11.0000] <domfarolino>
FND Would you expect what you are seeing now, if the box-sixing:border-box was not specified?

[09:41:46.0000] <FND>
/me ponders

[09:41:57.0000] <domfarolino>
Personally I would, since overflow is hidden

[09:42:17.0000] <FND>
no, I think I'd expect the anchor to always target the visible top (i.e. margin edge)

[09:43:09.0000] <FND>
that is, box sizing doesn't seem directly related

[09:43:55.0000] <FND>
but that's just a naive user's POV, so ... ¯\_(ツ)_/¯

[09:44:17.0000] <domfarolino>
Hmm. But stuff in an element that "overflows" the main box would probably be considered "overflown" content if the box sizing isn't specifically border-box right?

[09:44:33.0000] <domfarolino>
(my terminology is likely not up-to-snuff, but hopefully the idea is clear)

[09:45:08.0000] <FND>
/me feels like he's being tested ;)

[09:45:36.0000] <domfarolino>
IMO, specifying box-sizing:border-box in this case is saying "The border box should be respected and not treated as overflown content"

[09:46:00.0000] <FND>
so I'm not sure I can answer your question - or even understand your scenario

[09:46:27.0000] <FND>
perhaps explaining why I used `box-sizing: border-box` helps us along:

[09:47:14.0000] <FND>
I needed the borders to visualize the test case, but didn't want it to add to the element's height (because 100%)

[09:47:25.0000] <domfarolino>
Right but that adds another variable

[09:47:48.0000] <domfarolino>
It seems that an element's border is treated as stuff that overflows the content box, unless the box-sizing is specifically "border-box"

[09:47:50.0000] <FND>
yes, I get that - so agree the test case can probably be reduced further

[09:48:06.0000] <FND>
just not sure how (it's been a long day, my brain is depleted)

[09:48:48.0000] <FND>
/me thinks

[09:49:47.0000] <domfarolino>
So with overflow:hidden, I would expect browsers to not respect a border when accounting for vertical scroll position (assuming the element's box-sizing is the usual content box). However with the box-sizing set to border-box, it should respect it, so I suspect chromium is doing something inconsistent here. I just wanted to make sure i was on the same page as you with the experiment

[09:50:50.0000] <domfarolino>
FND: I'd say file with something like "Box sizing is not respected in vertical scroll position when box sizing is 'border-box' " maybe?

[09:51:13.0000] <FND>
I'm not sure whether box-sizing isn't a red herring here

[09:51:27.0000] <FND>
currently reducing the test case, hang on (gotta run out in a few minutes though :/ )

[09:56:49.0000] <FND>
this eliminate the border-box variable, domfarolino: https://burningchrome.com/~fnd/_/736c2586-8642-4c08-af95-ac22f3051d7f.html#s2 - does that help?

[09:56:53.0000] <FND>
*eliminates

[09:58:17.0000] <FND>
(apologies for the fugly page... )

[09:59:56.0000] <Domenic>
And done: https://blog.whatwg.org/first-review-drafts

[09:59:59.0000] <domfarolino>
No worries. Yeah that's kinda what I was dong in the DevTools. IMO Chrome's behavior on that page makes sense, but doesn't for the other.

[10:00:29.0000] <domfarolino>
In other words, vertical scroll position should (again, IMO) be based on content-box when the box-sizing is content box, and border-box when border-box is specified

[10:01:01.0000] <domfarolino>
Domenic: \o/

[10:02:35.0000] <FND>
oh, now I get what you mean, domfarolino - that seems like a good way to phrase the issue too, so shall use that

[10:03:01.0000] <domfarolino>
Feel free to cc me on issue (domfarolino@gmail)

[10:03:02.0000] <FND>
will leave it up to the Chrome folks to decide what's desirable, but currently it's inconsistent across browsers

[10:03:07.0000] <FND>
roger

[10:23:11.0000] <FND>
domfarolino: it appears I can't CC you, so https://bugs.chromium.org/p/chromium/issues/detail?id=855102

[10:23:23.0000] <FND>
gotta run now, thanks for the assistance, much appreciated!

[15:20:38.0000] <MikeSmith>
TabAtkins: you around?

[15:34:18.0000] <TabAtkins>
MikeSmith: no longer at my desk for the day, but what's up?

[16:35:22.0000] <MikeSmith>
TabAtkins: just wanted to say, you rock :)

[16:36:01.0000] <MikeSmith>
last night in my working directory, I set up the wattsi pipeline with the hightlight server

[16:36:10.0000] <MikeSmith>
and tested it with the HTML spec build

[16:36:42.0000] <MikeSmith>
and the result is that in total, the build with the highlighter takes only 27 seconds

[16:36:52.0000] <MikeSmith>
in my environment

[16:37:18.0000] <MikeSmith>
which is only an 11 second increase over the build without the highlighter

[16:37:35.0000] <MikeSmith>
so it’s pretty blazingly fast

[16:46:40.0000] <TabAtkins>
Hell yeah

[16:50:14.0000] <TabAtkins>
Four highlights should only cost about 9 seconds run in pure Python, so almost no overhead now, sweet.

[16:50:47.0000] <TabAtkins>
Now if you could just cache the results of the first run, you can wipe out another 7 or 8 seconds from that. 😀

[16:51:15.0000] <Domenic>
\o/

[16:51:29.0000] <Domenic>
I would not have thought of the web server solution. Very nice, folks.

[16:52:59.0000] <TabAtkins>
It looked easier than named pipes, is all that mattered to me.😀


2018-06-22
[17:14:32.0000] <MikeSmith>
heh

[17:14:50.0000] <MikeSmith>
I always like the laziest choice best

[17:15:23.0000] <MikeSmith>
and whatever the opposite if overengineering is, that’s me

[17:15:55.0000] <MikeSmith>
well maybe that’s under-engineering that would be not good I guess

[17:16:33.0000] <MikeSmith>
just-right engineering, like Goldilocks and the three bears

[17:17:16.0000] <MikeSmith>
anyway I think we right-engineered the hell out of this one

[17:18:00.0000] <MikeSmith>
I’m still auditing the output but so far what I’ve seen all looks perfect

[17:20:19.0000] <MikeSmith>
so I think we can land this very soon

[17:21:19.0000] <MikeSmith>
but yeah after that clearly the next step is to do caching

[17:22:34.0000] <MikeSmith>
I would imagine it’s possible that could be done just by having the highlight server send the right caching headers

[17:53:29.0000] <jungkees>
Domenic: does it make sense for a task running in a worker event loop to queue a task to a browsing context's event loop without going in parallel?

[17:53:43.0000] <jungkees>
Domenic: I'm looking at https://w3c.github.io/ServiceWorker/v1/#dom-windowclient-focus

[17:54:49.0000] <jungkees>
Domenic: There it runs in parallel in the step 3 and it queues a task to the browsing context's event loop from its substeps

[17:55:27.0000] <jungkees>
I'm curious if I can just queue a task directly to the browsing context without going in parallel there

[18:20:39.0000] <Domenic>
jungkees: yeah, that makes sense. Good exception to the general rule.

[18:21:36.0000] <Domenic>
jungkees: I guess the "wait for task to be executed" is the part that needs to be in paralllel

[18:40:18.0000] <jungkees>
Domenic: that's right. That bit has to wait for the queued task to finish, in parallel, and then I think I need to make it queue another task to the original worker thread to Create Window Client there

[18:44:36.0000] <jungkees>
Domenic: Or can I even just queue a task to the browsing context and "Wait for task to have executed, in parallel", and then just run the rest of the steps assuming they are still in the original worker's even loop?

[18:44:45.0000] <jungkees>
Domenic: is that what you meant?

[18:49:10.0000] <jungkees>
Domenic: that'd conceptually sound like *await* ;). Queuing a new task from steps in parallel sounds like more accurate way to make it I guess

[18:53:45.0000] <Domenic>
Yeah, I think queuing a new task is a bit better

[19:05:09.0000] <annevk>
jungkees: why not queue a task from the queued task? Seems simpler than “waiting” for it

[06:03:03.0000] <Ms2ger>
Q for WebIDL people: is https://heycam.github.io/webidl/#create-an-interface-object ever explicitly called?

[07:58:52.0000] <Domenic>
Ms2ger: I don't think so. There's a lot of "create the X" algorithms that eventually we hope to tie into a big old "create a realm" algorithm. But right now we are mid-refactoring from declarative "X must exist" to "to create an X"

[07:59:13.0000] <Ms2ger>
Domenic, ok, thank

[07:59:16.0000] <Ms2ger>
-s

[11:10:25.0000] <annevk>
M2ger

[11:23:52.0000] <wanderview>
annevk: so what happens if a SharedArrayBuffer is transferred via postMessage() from a window to a ServiceWorker?  if window and ServiceWorker are in different agent clusters...

[11:24:27.0000] <Mek>
I think you're supposed to get a onmessageerror event

[11:24:49.0000] <wanderview>
hmm, ok

[11:25:21.0000] <wanderview>
and where does it say ServiceWorker is in a different agent cluster?

[11:25:32.0000] <Mek>
in the definition of agent clusters... let me find the spot...

[11:25:57.0000] <Mek>
https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-agent-cluster-formalism

[11:25:57.0000] <wanderview>
Mek: isn't agent cluster in the es spec? I didn't think it talked about DOM things

[11:26:27.0000] <Mek>
the concept is in the ES spec, but the actual equivalence relation is in the html spec

[11:26:28.0000] <wanderview>
oh, I see

[11:26:31.0000] <wanderview>
Mek: thanks!

[11:29:05.0000] <wanderview>
ok... so dedicated workers seem like the only thing that can share memory

[11:29:10.0000] <wanderview>
I guess that makes sense

[11:29:41.0000] <Mek>
and all windows in the same unit of related similar origin browsing contexts

[11:29:55.0000] <Mek>
(as those are all the same agent)

[11:36:45.0000] <wanderview>
yea

[11:58:24.0000] <annevk>
Thanks Mek 😊

[12:04:22.0000] <wanderview>
sorry for my confusion

[12:12:35.0000] <annevk>
No worries

[12:12:55.0000] <annevk>
This is rather new too

[12:18:25.0000] <wanderview>
well, its nice that its a new thing for a change... usually its ancient legacy web behavior that I'm shocked to discover

[12:20:06.0000] <annevk>
Give it ten years

[14:59:28.0000] <jungkees>
annevk: that was my original thought: queue a task from the queued task. I think that sounds good

[15:03:18.0000] <annevk>
jungkees: seems less complicated too

[15:05:50.0000] <jungkees>
annevk: Yes. Although the implementations may have some more async calls between the worker and the browsing context event loop, spec'ing it in that way (without parallel steps involved) sounds simpler


2018-06-23
[17:12:00.0000] <jungkees>
annevk: once an auxiliary browsing context is disowned, is it still an auxiliary browsing context or becomes a (top-level) browsing context?

[22:22:30.0000] <annevk>
jungkees: disowning is somewhat broken

[22:27:12.0000] <annevk>
jungkees: but if you are auxiliary you can no longer become top-level atm

[09:52:15.0000] <domfarolino>
annevk: what might be the reason for allowing a null callback in addEventListener()? Seems like we null check and return in "add an event listener" algo

[10:00:50.0000] <annevk>
domfarolino: web compat presumably and old bindings that were less thought out

[10:05:18.0000] <domfarolino>
annevk: Ok. Also could you to provide me with an example of an idl interface that accepts a nullable? and at some point distinguishes between null and other values; one that is not RequestInit's signal would be great

[10:07:49.0000] <domfarolino>
if you can't recall one then no worries

[10:27:06.0000] <annevk>
domfarolino: cloneNode maybe? Nullable for methods is less of a pattern though, mostly go for optional (undefined) these days

[11:09:33.0000] <domfarolino>
Ok thanks

[11:11:56.0000] <mathiasbynens>
paragraph 3 of https://whatwg.org/working-mode#conflicts is happening right now over at https://github.com/tc39/ecma262/pull/1242 and it’s not going well

[12:09:35.0000] <annevk>
mathiasbynens: give it enough time and it’ll converge

[12:09:55.0000] <annevk>
mathiasbynens: document.all took a long time too 😊

[12:36:31.0000] <domfarolino>
In general I agree with Domenic’s comments on matching the spec w/ reality and then moving forward from a solid foundation via the usual process. 👍 comment.

[12:38:53.0000] <annevk>
👍

[13:22:40.0000] <mathiasbynens>
yeah, that’s what I was trying to get across too

[13:22:53.0000] <mathiasbynens>
not sure why that’s so controversial


2018-06-24
[22:06:09.0000] <annevk>
mathiasbynens: it seems the idea that not all impl might do this caused controversy? Maybe just ask if anyone impl this and/or wants to?

[22:08:50.0000] <annevk>
mathiasbynens: and I guess the idea that the spec is inherently better than impls still is pretty strong too

[22:09:12.0000] <annevk>
mathiasbynens: even when impls give better perf 😟

[10:41:32.0000] <gsnedders>
IIRC, Presto had some bug with XML namespaces (with… attributes?). Can anyone recall what it was?

[12:41:25.0000] <annevk>
I think attributes were not in the null namespace or some such


2018-06-25
[23:03:13.0000] <domfarolino>
annevk: theoretically if I had an IDL dictionary with a nullable boolean member, this would let you, in the spec, later distinguish between a number, null, and completely omitted right?

[23:06:08.0000] <domfarolino>
s/number/boolean

[23:06:43.0000] <domfarolino>
(in other words: it is fair expect implementations to distinguish between null and undefined here, no?)

[00:05:12.0000] <annevk>
domfarolino: yup

[00:05:30.0000] <annevk>
domfarolino: whether it's great API design depends a bit though, but gotta go, vacation time

[00:05:45.0000] <domfarolino>
annevk: Enjoy & thanks!

[00:26:59.0000] <domfarolino>
JakeA: You around?

[00:30:22.0000] <JakeA>
domfarolino: yep!

[00:36:32.0000] <domfarolino>
JakeA: IIRC you did a good bit of the Abort{Controller,Signal} work in Fetch. I'm curious about step 30 under the Request() constructor https://fetch.spec.whatwg.org/#dom-request

[00:37:43.0000] <domfarolino>
Seems that |r|, made in step 29, will have the same signal as the input request's signal

[00:38:47.0000] <domfarolino>
So by the time we get to 30, |signal| is either input request's signal or the signal provided via RequestInit.

[00:39:23.0000] <domfarolino>
And if we don't provide anything signal in RequestInit, does that mean in 30 we're essentially asking r's signal to follow itself?

[00:39:31.0000] <domfarolino>
(sorry for obscure question)

[01:00:25.0000] <JakeA>
domfarolino: r won't have the same signal, it always has a new signal

[01:01:33.0000] <domfarolino>
Ah ok that's what I originally thought then I talked myself in believing the opposite.

[01:02:32.0000] <JakeA>
domfarolino: In step 30, |signal| will only be not-null if an input request was provided, or a signal was provided in RequestInit

[01:02:53.0000] <domfarolino>
So r's signal will either follow 1.) input request's, when RequestInit does not provide a signal 2.) RequestInit's signal when it is non-null 3.) nothing

[01:03:06.0000] <domfarolino>
JakeA: Ah yeah, ^ is what you just said. Perfect thanks

[01:03:08.0000] <JakeA>
Correct

[01:03:41.0000] <JakeA>
Signal from RequestInit takes priority over input request

[01:04:09.0000] <domfarolino>
Right, makes sense

[03:11:38.0000] <hsivonen>
annevk: what URL should I navigate to when serving WPT locally to run https://github.com/web-platform-tests/wpt/pull/10329 ?

[03:14:35.0000] <hsivonen>
relatedly, I need to learn how to properly cherrypick an upstream WPT test into mozilla-central

[07:49:31.0000] <yoav>
annevk && || Domenic: I'm getting back to https://github.com/whatwg/fetch/pull/729 after getting agreement from privacy folks about a good path forward. Here's a proposed design https://docs.google.com/document/d/1eBMLVHO3p1hwltL9xJJ5LwViW1-yqOvS0w6SNioOUXc/edit#

[07:49:36.0000] <yoav>
can you take a look?

[08:19:38.0000] <Domenic>
yoav: I don't feel super qualified in this area, and annevk is out for a few weeks... :-/

[08:20:52.0000] <yoav>
Domenic: hmm :/ I have Anne's guidance from a few weeks back to work on

[08:21:04.0000] <yoav>
but he wanted most of that stuff to move to HTML

[08:21:36.0000] <yoav>
I guess I can prep up a PR based on a few assumptions and we can see if they are realistic once he's back...

[16:22:34.0000] <wfpkhc>
/me wanders on in*

[16:22:37.0000] <wfpkhc>
hello

[16:22:52.0000] <wfpkhc>
Anyone around?

[16:23:34.0000] <wfpkhc>
i have a question about HTML 5

[16:23:36.0000] <wfpkhc>
Warning: The type attribute is unnecessary for JavaScript resources.

[16:23:42.0000] <wfpkhc>
i am using the validator -

[16:23:50.0000] <wfpkhc>
and that is the message i get

[16:23:55.0000] <MikeSmith>
yeah

[16:23:59.0000] <wfpkhc>
why all of a sudden has this started happening in html5?

[16:24:13.0000] <wfpkhc>
/me waves hello to MikeSmith

[16:24:32.0000] <MikeSmith>
because we made a change to the HTML spec this year to make it a warning case

[16:24:46.0000] <MikeSmith>
and I added a warning to the HTML checker (validator) for it

[16:25:02.0000] <wfpkhc>
well that does not make sense - you have had it for 15+ years - why change it now?

[16:25:53.0000] <wfpkhc>
and how will you know if your not using another script type?

[16:26:04.0000] <MikeSmith>
don’t understand your question

[16:26:08.0000] <wfpkhc>
(no i have not seen it used often, but i have seen it used"

[16:26:20.0000] <MikeSmith>
if you’re using another script type, then use the type attribute with some value

[16:26:21.0000] <wfpkhc>
I will restate the question sir

[16:26:46.0000] <MikeSmith>
but if the script is javascript, then don’t use the type attribute

[16:27:09.0000] <wfpkhc>
So the move really favors JS over all other script types?

[16:27:11.0000] <MikeSmith>
lack of a the type attribute means “this is JavaScript”

[16:27:19.0000] <MikeSmith>
yeah I guess it does

[16:27:26.0000] <MikeSmith>
because that’s what the web does too

[16:27:43.0000] <wfpkhc>
The web does what the developers program it to do

[16:27:55.0000] <MikeSmith>
JavaScript is the only scripting language that browsers have native support for

[16:28:12.0000] <wfpkhc>
That is not true - (well it did not use to be)

[16:28:30.0000] <wfpkhc>
without being stoned to death - IE used to support VBscript in the client

[16:28:43.0000] <MikeSmith>
browsers

[16:28:46.0000] <MikeSmith>
plural

[16:28:55.0000] <MikeSmith>
not “browser”

[16:29:19.0000] <MikeSmith>
one browser having support for some propriety language doesn’t make it part of the web platform

[16:29:26.0000] <wfpkhc>
:)  the arguement was "the web" - the web implies the whole -

[16:29:50.0000] <wfpkhc>
so it goes back to my arguement - why is JS the default :P

[16:30:28.0000] <wfpkhc>
yes you answered the qeustion

[16:30:34.0000] <wfpkhc>
as such - through forward thinking

[16:30:41.0000] <wfpkhc>
so is this a permanent item now?

[16:30:48.0000] <wfpkhc>
even though html5 is not completed?

[16:39:25.0000] <wfpkhc>
hello?

[16:40:32.0000] <wfpkhc>
(ive been ditched) :(

[16:41:38.0000] <wfpkhc>
hello?

[16:42:11.0000] <wfpkhc>
so is this now a permanent item or is there a chance it will be changed?

[16:44:41.0000] <wfpkhc>
well all the best MikeSmith

[16:44:52.0000] <wfpkhc>
thank you for your time and effort sir

[16:46:07.0000] <caitp>
"but feel free to also use typescript, elm, dart, coffeescript, C, rust, ..."


2018-06-26
[22:08:07.0000] <yoav>
Domenic: Following our discussion from yesterday, can you take a look at https://github.com/whatwg/html/pull/3774 just as a sanity check? (to make sure the technical spec bits are in order)

[22:49:15.0000] <yoav>
foolip: in case you're around, I'd appreciate a look at https://github.com/whatwg/html/pull/3774 to make sure I'm not Holding It Wrong™

[23:24:10.0000] <domfarolino>
yoav: I believe he's OOO till July 5th or so

[23:24:24.0000] <domfarolino>
foolip that is

[23:24:35.0000] <yoav>
domfarolino: ok, thanks

[02:40:27.0000] <foolip>
yoav: afraid I'm also OOO, until July 5 in my case. Not sure exactly when annevk is back.

[02:48:32.0000] <annevk>
July 19

[03:53:36.0000] <yoav>
foolip & annevk: ok, have fun! :)

[04:37:07.0000] <hsivonen>
I have vague recollection that WPT used to have a copy of the html5lib tests, but now I don't see them. Have they been removed?

[04:38:20.0000] <hsivonen>
also: Are the html5lib encoding tests actually valid? Some seem to assume <meta> scanning beyond 1024 bytes

[04:39:24.0000] <hsivonen>
does there exist a browser test harness for html5lib encoding tests?

[04:39:45.0000] <foolip>
hsivonen: gsnedders would know

[04:40:12.0000] <gsnedders>
hsivonen: only of the parser tests

[04:40:27.0000] <gsnedders>
hsivonen: the encoding tests there's some issue on the html5lib-tests repo that is essentially "fix this"

[04:40:45.0000] <hsivonen>
gsnedders: ok. :-( thanks.

[04:48:07.0000] <hsivonen>
everything is a rathole. I thought I'd fix this easy bug while waiting for a try run for another patch and now testing this properly is basically a matter of adding the html5lib encoding tests to WPT...

[04:53:44.0000] <hsivonen>
I take it that I should write a Python Handler per https://wptserve.readthedocs.io/en/latest/handlers.html#python-handlers that parses a .dat file and takes a number indicating which test in the .dat file to serve as text/html?

[04:54:04.0000] <hsivonen>
and then also parse the .dat file in JS to retrieve the corresponding expected encodings

[04:56:50.0000] <Ms2ger>
Or add a build step

[04:57:24.0000] <hsivonen>
Ms2ger: what documentation should I read for that?

[04:57:34.0000] <hsivonen>
Ms2ger: or do you mean a manual import script?

[04:57:40.0000] <Ms2ger>
Basically, yes

[04:57:45.0000] <hsivonen>
Ms2ger: I see

[04:57:49.0000] <Ms2ger>
gsnedders probably has more thoughts

[05:06:10.0000] <hsivonen>
ah, the html5lib tests are there but not in .dat form

[05:06:28.0000] <hsivonen>
so it looks like they are imported with a manually-run import script

[05:22:00.0000] <hsivonen>
is it guarateed that os.getcwd() from within a Python Handler returns the path to the top-level directory of WPT?

[05:27:54.0000] <Ms2ger>
Probably not, but I don't suppose it'll change

[05:28:07.0000] <Ms2ger>
Might be worth filing an issue to make sure we test that

[05:36:54.0000] <hsivonen>
Ms2ger: ok. thanks

[07:10:22.0000] <gsnedders>
hsivonen, Ms2ger: we should document that either way

[07:13:14.0000] <Domenic>
yoav: sure I can take a look for sanity check

[07:14:33.0000] <yoav>
Domenic: awesome, thanks! :)

[11:01:05.0000] <domfarolino>
Domenic: have you gotten around to seeing https://github.com/web-platform-tests/wpt/pull/11584 by chance?

[11:01:28.0000] <Domenic>
domfarolino: ah yeah, it slipped out, let me review

[11:01:55.0000] <domfarolino>
no worries, thanks

[14:36:44.0000] <Domenic>
rniwa: I don't quite understand what you're saying at https://github.com/w3c/webcomponents/issues/468#issuecomment-400454801 . We're working from your preferences already; the choice is between an existing cascading order (UA level) and fake shadow root. Given that there are no new cascading orders involved, what are your thoughts?

[15:00:54.0000] <rniwa>
Domenic: the literal UA cascading order wouldn't work because then user stylesheet would be overridden

[15:01:06.0000] <Domenic>
rniwa: right, it's changed so that !important is not parsed

[15:01:25.0000] <rniwa>
Domenic: yeah, that would be a new cascading behavior, which we don't want

[15:01:36.0000] <Domenic>
Hmm, OK, in our implementation that was not a whole new cascading order.

[15:01:42.0000] <rniwa>
Domenic: it doesn't matter how many more changes you make, we always prefer fake-shadow-root approach

[15:02:03.0000] <rniwa>
Domenic: you don't need to keep asking me which one we prefer because we always prefer fake shadow root approach

[15:02:07.0000] <Domenic>
rniwa: that's a little unfortunate; you seem to be saying you're not interested in hearing reasoned discussion, but always want your idea to win, instead of debating on merits.

[15:02:25.0000] <Domenic>
We were hoping we could have a discussion based on what was good for web developers, instead of on whose idea it is.

[15:02:44.0000] <rniwa>
Domenic: i'm not arguing based on whose idea it was

[15:03:12.0000] <rniwa>
Domenic: we've repeatedly stated that we don't want to have a new cascading order or any other new behavior distinct from the way existing stylesheets work

[15:03:14.0000] <Domenic>
rniwa: Hmm OK, then could you help us understand the reasons, instead of just stating thta you always like your idea best, no matter what we say?

[15:03:20.0000] <rniwa>
Domenic: in order to avoid create author confusions

[15:03:39.0000] <rniwa>
Domenic: look, i've stated this reasoning 2-3 times already

[15:03:45.0000] <rniwa>
Domenic: i really don't want to keep repeating myself

[15:03:45.0000] <Domenic>
It's the "any other new behavior" that you haven't stated before

[15:03:53.0000] <rniwa>
Domenic: we have

[15:03:59.0000] <Domenic>
rniwa: I understand it's hard to engage in a dialogue some times, but I hope you can find the time

[15:04:19.0000] <Domenic>
We're concerned about the new behavior of a fake shadow root being confusing for authors.

[15:04:20.0000] <rniwa>
Domenic: i really don't have a time to keep stating the exact same preference over and over

[15:04:24.0000] <Domenic>
Can you see where we're coming from with that?

[15:04:39.0000] <Domenic>
rniwa: stating preferences is not what we're interested in; discussing tradeoffs is what I'm hoping you can help us with.

[15:04:55.0000] <rniwa>
Domenic: well, we've already discussed that internally

[15:05:15.0000] <Domenic>
rniwa: oh, OK, if you don't have time to engage, maybe some of the folks you've discussed internally with could help?

[15:05:28.0000] <rniwa>
Domenic: we've considered all those options you've stated and concluded that we'd like to use fake-shadow-root approach

[15:05:47.0000] <Domenic>
rniwa: that's great, we understand that part. We're hoping you, or someone else, could help us work through the reasoning and tradeoffs.

[15:05:47.0000] <rniwa>
Domenic: maybe you can ask hober

[15:06:06.0000] <Domenic>
OK, yeah, perspectives appreciated, hober or othermaciej

[15:07:06.0000] <rniwa>
Domenic: the reasoning is simple: we have shadow root, and worked through many issues to get it work to support both components defining its own style & letting users of components override it. we've also defined a way for component to specify important rule in a way which doesn't prevent user stylesheet from overriding it

[15:07:31.0000] <rniwa>
given this, we have no reason to create a brand new cascading order, or a brand new style behavior such as ignoring important! rule

[15:08:06.0000] <rniwa>
furthermore, the last time we added the support for shadow root's cascading order support, we observed a serious performance hit which is inherent to introducing a new cascading order

[15:08:29.0000] <rniwa>
note that i've stated all of this at F2F in Tokyo before

[15:09:18.0000] <rniwa>
i find it extremely frustrating that i flew all the way to Tokyo to state all of this and i've been asked to state the exact same stuff again.

[15:09:25.0000] <Domenic>
rniwa: I appreciate your patience, even if you believe that you're repeating yourself. Note that the discussion has changed, as we are explicitly taking into account your requirement of no new cascading order to accomodate WebKit's performance constraints; we explicitly made an alternative with an existing cascading order but tweaked !important parsing to accomodate you.

[15:09:53.0000] <rniwa>
i understand that you're not gonna remember everything i state anywhere but i feel like this is 3rd or 4th time i've been asked to repeat myself

[15:10:25.0000] <Domenic>
I do not believe it was ever stated that any new behavior was unacceptable, as at the F2F you stated it was a performance issue with WebKit and new cascading orders, not any changes to their CSS infrastructure at all.

[15:10:34.0000] <rniwa>
Domenic: i've already said that that wouldn't work because it wouldn't let components to set an important rule which prevent users of components from overriding

[15:11:11.0000] <Domenic>
Sorry, I apologize for not remembering that was a requirement. That kind of requirement was what rakina and I were trying to draw out from you with the tables and such.

[15:11:28.0000] <rniwa>
Domenic: i'm pretty sure our statement was that the behavior of this styling mechanism should be identical to that of using a shadow root

[15:11:41.0000] <Domenic>
I appreciate you engaging on the level of actual use cases and requirements like "components must be able to create styles that users of the component cannot override" instead of "we always prefer the fake SR approach because we discussed it internally and it's best"

[15:13:07.0000] <rniwa>
another big concern we have with this constructible stylesheet & custom element combo is the developer tools

[15:13:15.0000] <rniwa>
today, it's pretty easy to find a stylesheet because it's in the DOM tree

[15:13:34.0000] <rniwa>
with this new mechanism, stylesheet is not in the DOM so we'd need a new mechanism to display & let authors interact with it.

[15:13:42.0000] <rniwa>
which would require a new UI, etc... in our developer tool

[15:13:53.0000] <rniwa>
i'm not saying that we wouldn't do it because of it

[15:14:05.0000] <rniwa>
but this feature already has a high cost of implementation just because of that aspect

[15:14:16.0000] <rniwa>
there is no way we'd accept any other complication from more custom behaviors

[15:15:25.0000] <Domenic>
It's good to hear about what engineering tradeoffs make it harder to implement things in WebKit. For our part it seems most things are implementable; we're concerned about the developer-facing issues like how to explain the use of :host/:host-context/::slotted selectors on something that doesn't have a shadow DOM.

[15:16:46.0000] <rniwa>
Domenic: we can disallow those if you'd like

[15:16:50.0000] <rniwa>
Domenic: and use :root instead

[15:16:58.0000] <rniwa>
Domenic: but i don't think :root makes much sense

[15:17:06.0000] <rniwa>
Domenic: so maybe we'd need a new pseudo class?

[15:17:13.0000] <Domenic>
Hmm, interesting, I thought that would go against your requirement of no changes to your CSS infrastructure.

[15:17:34.0000] <rniwa>
Domenic: no, adding a new pseudo class would be re-using the existing machinary

[15:17:45.0000] <rniwa>
Domenic: adding a new cascading order or ignoring !important is not

[15:17:55.0000] <Domenic>
OK, good to know.

[15:18:50.0000] <Domenic>
This is really helpful; with that in hand I'm hopeful we can make progress on the fake-SR approach.

[15:19:02.0000] <Domenic>
Thanks for taking the time, and having the patience.

[15:19:10.0000] <rniwa>
Domenic: np

[16:53:06.0000] <gsnedders>
if I create a document with document.implementation.createDocument, can I somehow get a iframe containing that document?

[16:54:29.0000] <gsnedders>
given a Document object, how can I apply CSS styles to that? There's no Element.style, and I can't see a way to append a stylesheet to a document?


2018-06-27
[17:11:12.0000] <jsbell>
gsnedders: document.documentElement.appendChild(document.createElement('style')).innerText = 'body { background-color:red }'  ?

[17:11:40.0000] <gsnedders>
jsbell: can you find anything in any spec that justifies that working?

[17:12:20.0000] <gsnedders>
(I realise that's a very different question :))

[17:14:10.0000] <jsbell>
Heh.... um...

[17:15:10.0000] <jsbell>
Which part? document.documentElement, or createElement('style'), or setting its innerText ?

[17:20:37.0000] <jsbell>
To which I'd say https://dom.spec.whatwg.org/#document-element and https://html.spec.whatwg.org/multipage/semantics.html#the-style-element but I'm guessing you have a more subtle question

[17:20:50.0000] <jsbell>
and that's where my knowledge bottoms out. Also heading out, so TTFN and good luck!

[17:41:13.0000] <gsnedders>
jsbell: nah, I meant where the stylesheet is applied to the document

[18:20:55.0000] <Domenic>
gsnedders: https://html.spec.whatwg.org/multipage/semantics.html#update-a-style-block seems to apply whenever the element's child text contents are changed

[18:21:32.0000] <gsnedders>
ah, right, that does actually do everything looking again

[18:21:41.0000] <gsnedders>
somehow my glance missed that

[18:29:47.0000] <Domenic>
https://github.com/whatwg/html/issues/2997 being still unfixed seems bizarre to me

[18:33:21.0000] <gsnedders>
in a sense, I presume it's just a matter of editorial time given unlike many things, it's something there's at least decent interop on?

[18:38:33.0000] <gsnedders>
and CSS always seems to have way more constraints on editorial time than any other part of the platform

[18:45:43.0000] <devsnek>
how might one go about limiting the resolution of performance.now() to fit into 20 microseconds

[22:27:13.0000] <domfarolino>
yoav: http://crrev.com/c/1116418 is a little big (WIP). If you've any advice on splitting it up that'd be great but since it requires shuffling a lot around at once I don't think there's much room

[22:27:42.0000] <domfarolino>
yoav: http://crrev.com/c/1116418 is a little big (WIP). If you've any advice on splitting it up that'd be great but since it requires shuffling a lot around at once I don't think there's much room

[22:28:01.0000] <domfarolino>
oops. Thought I was in #chromium my bad

[23:22:40.0000] <zewt>
grumble grumble no way to reliably refresh a page without flushing cache

[23:48:38.0000] <yoav>
is there documentation to the HTML spec's syntax? e.g. what are the different `data-x` attributes and what they do?

[23:49:42.0000] <yoav>
I'm hitting some trouble trying to wrap an external definition with <code> and would love to understand if there's some way for me to indicate the compiler that it's an external ref

[00:17:24.0000] <domfarolino>
yoav: I believe the data-x attributes on things like <code> reference the data-x attributes defined on a <dnf> somewhere locally.

[00:20:03.0000] <domfarolino>
yoav: So I think you would use something like `<code data-x=someDfn>something here</code>`, and later on write `<dfn data-x=someDfn data-x-href=https://link-where-someDfn-can-be-referenced.com></dfn>` to link usages of `data-x=someDfn` with the external reference

[00:40:57.0000] <yoav>
OK, so I have to include an explicit dfn somewhere?

[00:55:09.0000] <domfarolino>
That's what all of the examples I see seem to indicate, but that feels a little funny. I'm guessing the explicit local `<dfn>` is not necessary if what you're referencing is exported from the spec it belongs to. What are you referencing?

[01:18:16.0000] <yoav>
domfarolino: referencing IETF RFCs (client hints)

[01:18:34.0000] <yoav>
I caved and just added a local dfn :)

[01:29:48.0000] <domfarolino>
haha, seems to be a good call though probably you'll find out for sure upon review

[06:58:03.0000] <Domenic>
OK I'm going to break down and document Wattsi syntax...

[07:44:37.0000] <Domenic>
Reviews (and suggested additions) appreciated: https://github.com/whatwg/wattsi/pull/79

[07:55:23.0000] <yoav>
Domenic: thanks for documenting it! :) I'm in a full day meeting now, but will review tomorrow morning

[08:31:26.0000] <TimothyGu>
just to be sure: a document returned from DOMParser is not an active document, right?

[08:43:49.0000] <Domenic>
TimothyGu: I am 95% sure

[08:44:08.0000] <Domenic>
Yeah OK, checked definitions, 100% sure

[08:44:16.0000] <Domenic>
It has no browsing context, and no browsing context ever has it

[08:44:20.0000] <TimothyGu>
Okay cool

[08:44:34.0000] <domfarolino>
Wooo Wattsi syntax docs!


2018-06-29
[04:55:52.0000] <smaug____>
oh, at least one real web site uses shadow dom v1, https://www.familysearch.org

