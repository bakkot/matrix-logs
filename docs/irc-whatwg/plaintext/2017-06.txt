2017-06-01
[23:12:56.0000] <GPHemsley>
https://url.spec.whatwg.org/#concept-host-parser

[23:13:08.0000] <GPHemsley>
Let ipv4Host be the result of IPv4 parsing asciiDomain.

[23:13:08.0000] <GPHemsley>
If ipv4Host is an IPv4 address or failure, return ipv4Host.

[23:14:00.0000] <GPHemsley>
An IPv4 address

[23:14:00.0000] <GPHemsley>
is a 32-bit unsigned integer that identifies a network address. [RFC791]

[23:15:48.0000] <GPHemsley>
is an implementation of a host parser supposed to confirm that the ipv4Host (1) is a 32-bit unsigned integer, and (2) that it identifies a network address ?

[03:36:52.0000] <zcorpan>
huh. :-( https://bugs.chromium.org/p/chromium/issues/detail?id=87553#c66

[03:38:18.0000] <micminty>
Hello is this the official Web Hypertext Application Working Group irc channel?

[03:39:50.0000] <zcorpan>
micminty: Web Hypertext Application Technology Working Group, yes :-)

[03:41:45.0000] <micminty>
zcorpan: OK,  thanks for the quick reply..

[03:43:19.0000] <zcorpan>
micminty: np

[04:11:33.0000] <nox>
zcorpan: What's that patch? :o

[04:12:04.0000] <zcorpan>
nox: it removes <menu> implementation

[04:12:34.0000] <nox>
zcorpan: Is it an independent decision from them or are we all going to remove it?

[04:12:49.0000] <zcorpan>
nox: independent

[04:12:53.0000] <nox>
:/

[06:49:57.0000] <Domenic>
We should probably remove it from the spec...

[06:53:24.0000] <Domenic>
https://github.com/whatwg/html/issues/2730

[11:06:06.0000] <aklein>
Domenic: you around? I'm picking up my old attempt to fix this modules crossorigin WPT

[11:07:00.0000] <Domenic>
aklein: yep

[11:07:16.0000] <aklein>
(https://github.com/w3c/web-platform-tests/blob/master/html/semantics/scripting-1/the-script-element/module/crossorigin.html)

[11:07:33.0000] <aklein>
Domenic: and now I'm remembering that I can't even tell exactly what the failing test is trying to do

[11:07:42.0000] <Domenic>
To the logs!!

[11:07:46.0000] <aklein>
it specifies a valueless "crossorigin" attribute

[11:07:58.0000] <GPHemsley>
I second Hixie on https://github.com/whatwg/url/issues/295

[11:08:34.0000] <aklein>
http://logs.glob.uno/?c=freenode%23whatwg&s=19+Apr+2017&e=19+Apr+2017#c1026373

[11:10:13.0000] <aklein>
http://logs.glob.uno/?c=freenode%23whatwg&s=19+Apr+2017&e=19+Apr+2017#c1026399 seems like the main outcome

[11:10:19.0000] <aklein>
"	From the spec's point of view github.com/w3c/web-platform-tests/…origin-root-missingheader.sub.html and github.com/w3c/web-platform-tests/…rossorigin-root-different.sub.html should be identical"

[11:10:33.0000] <aklein>
my proposed PR would be to just remove tests 1 and 5

[11:11:36.0000] <Domenic>
"aklein: I think we should change them to fail"

[11:16:02.0000] <aklein>
Domenic: ok :)

[11:18:21.0000] <GPHemsley>
geez, Domenic, let me finish filing the issue first >_<

[11:18:43.0000] <Domenic>
Er, sorry, thought you did once you edited the title...

[11:22:01.0000] <GPHemsley>
Domenic: OK, fire away :)

[11:29:26.0000] <aklein>
Domenic: so does the "crossorigin" attribute on the script elements have any effect in these tests?

[11:29:39.0000] <aklein>
that's really the only difference between tests 1 and 3

[11:34:35.0000] <aklein>
in fact I don't see any web platform tests that set crossorigin to anything

[11:48:26.0000] <Domenic>
aklein: well the servers respond differently, right?

[11:49:02.0000] <Domenic>
aklein: nevermind, same URL

[11:49:14.0000] <Domenic>
aklein: it doesn't have any effect in this case since the server isn't allowing you to access anyway.

[11:49:24.0000] <Domenic>
But Microsoft thought it did, so it's good to keep a test showing the opposite.

[11:49:58.0000] <Domenic>
crossorigin="" for module scripts should impact whether credentials are sent or not, and how

[11:50:05.0000] <Domenic>
But yeah I don't think there are good tests for that yet

[11:50:12.0000] <Domenic>
Possibly ones are being added as part of fixing that Chrome bug

[12:37:41.0000] <domfarolino>
Domenic: crossorigin="" on modules sends creds same-origin whereas ="use-credentials" sends creds cross-origin right?

[14:39:56.0000] <Domenic>
domfarolino: correct

[14:40:22.0000] <Domenic>
foolip: on https://github.com/whatwg/html/pull/2627 / the corresponding fullscreen PR, would editorial-ish review be helpful, or wait for annevk to get back, or you and upsuper can take care of it...?

[14:52:24.0000] <aklein>
Domenic: re: https://codereview.chromium.org/2914273002/, you're not a Chromium committer?

[14:53:23.0000] <Domenic>
aklein: nope


2017-06-02
[05:08:01.0000] <zcorpan>
0 notifications!! (down from something like 550)

[12:13:18.0000] <wanderview>
jugglinmike: where did we come to a decision on returning basic for same-origin no-cors requests? https://github.com/w3c/web-platform-tests/blob/master/service-workers/service-worker/fetch-response-taint.https.html#L122

[12:13:24.0000] <wanderview>
I can't find it

[12:15:05.0000] <jugglinmike>
wanderview: https://github.com/whatwg/fetch/issues/535

[12:15:43.0000] <wanderview>
thanks

[12:31:10.0000] <jugglinmike>
no problem

[13:19:34.0000] <wanderview>
jugglinmike: does chrome actually pass this somehow? https://github.com/w3c/web-platform-tests/blame/master/service-workers/service-worker/resources/fetch-response-xhr-iframe.https.html#L43

[13:19:41.0000] <wanderview>
seems that should throw since event doesn't exist

[13:20:54.0000] <wanderview>
jugglinmike: I'll fix it locally and get it upstreamed

[13:22:25.0000] <jugglinmike>
wanderview: it does pass

[13:22:33.0000] <jugglinmike>
but that change is definitely not intention

[13:22:37.0000] <jugglinmike>
intentional

[13:22:44.0000] <jugglinmike>
It passes because of this https://developer.mozilla.org/en-US/docs/Web/API/Window/event

[13:23:01.0000] <wanderview>
ah....

[13:23:02.0000] <wanderview>
ok

[13:23:13.0000] <wanderview>
I didn't know that existed

[13:23:31.0000] <jugglinmike>
Sometimes

[13:27:41.0000] <wanderview>
jugglinmike: I guess we are thinking of implementing it in the future... but some stuff with shadow dom needs to be spec'd

[13:27:48.0000] <wanderview>
or something

[13:31:36.0000] <jugglinmike>
the lack of support in Firefox is a good thing. I'd like that to go away, so FF proves that interop isn't a problem

[13:38:07.0000] <wanderview>
jugglinmike: does this one pass for chrome? https://github.com/w3c/web-platform-tests/blob/master/service-workers/service-worker/fetch-request-fallback.https.html#L96

[13:38:20.0000] <wanderview>
AFAICT the harness does not like passing null for the exception type there

[13:38:31.0000] <wanderview>
https://github.com/w3c/web-platform-tests/blob/51a11c7f17d967633edbefff36cfb2f0ae23c074/resources/testharness.js#L1182

[13:43:14.0000] <jugglinmike>
wanderview: You're right; it does not. We were only able to land it because of timing issues in the upstreaming process. Mek caught that her https://codereview.chromium.org/2858933003#msg23

[13:43:45.0000] <jugglinmike>
and while I offered to "correct this in WPT directly", I failed to follow through on that offer

[13:43:49.0000] <jugglinmike>
I will do so presently

[13:44:02.0000] <wanderview>
jugglinmike: I can do it... but what did you end up using?

[13:44:43.0000] <wanderview>
'NetworkError' or new TypeError()?

[13:45:04.0000] <jugglinmike>
Oh, hey

[13:45:16.0000] <jugglinmike>
Actually, I'm not as big of a screw-up as I thought

[13:45:19.0000] <jugglinmike>
Here's the patch https://github.com/w3c/web-platform-tests/pull/5869

[13:46:44.0000] <jugglinmike>
I can't request your review on GitHub.com, though. Do you have commit rights to WPT?

[13:47:39.0000] <wanderview>
no

[13:47:56.0000] <wanderview>
I can land it locally and get it upstreamed if you want

[13:48:09.0000] <wanderview>
jugglinmike: that patch fixes the test for us

[13:48:45.0000] <wanderview>
jugglinmike: I'm doing a pass of WPT stuff and will request a sync next week sometime

[13:49:16.0000] <wanderview>
or you can land it there and we'll get it on sync

[13:49:21.0000] <wanderview>
I guess it doesn't matter

[13:50:16.0000] <jugglinmike>
Unfortunately, it's out of my hands now

[13:50:22.0000] <wanderview>
oh?

[13:50:44.0000] <jugglinmike>
It needs a review

[13:51:26.0000] <jugglinmike>
I'll add Matt on the Chromium team to the list of requested reviewers. He's in Japan, but he may be able to get to it before we're in on Monday morning

[13:51:29.0000] <wanderview>
jugglinmike: do you mind if I land it locally and upstream that way?

[13:51:37.0000] <wanderview>
ok, I'll just wait

[13:58:04.0000] <wanderview>
jugglinmike: can you request review from me now?

[13:58:55.0000] <wanderview>
oh, mek approved them

[13:59:16.0000] <jugglinmike>
hah, seems he did

[13:59:21.0000] <jugglinmike>
Thanks, Mek!

[13:59:28.0000] <wanderview>
will it auto-merge?

[14:00:01.0000] <jugglinmike>
Refresh

[14:00:06.0000] <jugglinmike>
It's merged now, too

[14:00:15.0000] <wanderview>
awesome, thanks

[14:00:18.0000] <wanderview>
I have trouble reading

[14:03:44.0000] <jugglinmike>
No worries. It's the end of the week, after all

[14:17:42.0000] <smaug>
rniwa: webkit doesn't support HTML Imports , right?

[14:17:45.0000] <smaug>
and doesn't plan to

[14:17:59.0000] <rniwa>
smaug: nope

[14:18:14.0000] <rniwa>
smaug: we don't support HTML imports or builtin custom elements, and we don't plan to

[14:18:27.0000] <smaug>
wanderview: ^

[14:24:13.0000] <wanderview>
thanks

[14:24:43.0000] <wanderview>
rniwa: do you guys have any thoughts on "html modules" approach?  I've heard some rumblings about that

[14:24:52.0000] <yoav>
Domenic: Reviewed https://github.com/whatwg/html/pull/2588

[14:25:23.0000] <yoav>
The CL with the tests is ready to go. Ideally we want to land both at the same time

[14:25:42.0000] <yoav>
(and I don't have write access)

[14:33:37.0000] <Domenic>
yoav: should be good to go, except you gotta merge the preload spec change :)

[14:36:08.0000] <yoav>
Domenic: deal!

[14:37:37.0000] <Domenic>
yoav: https://github.com/w3c/preload/issues/95 and https://github.com/w3c/preload/issues/80 now seem closable

[14:37:56.0000] <yoav>
just closed

[14:38:18.0000] <Domenic>
:)

[14:39:26.0000] <yoav>
Next is https://codereview.chromium.org/2903653005/. I'll change the IDL according to your comments and land

[14:41:22.0000] <rniwa>
wanderview: html modules seem more promising but we haven't really hashed out details ourselves yet

[14:52:02.0000] <intervalia>
The site `https://github.com/whatwg` says "To be invited, just ask us on IRC; all are welcome to participate." SO I am wondering if I can be added.

[14:53:37.0000] <intervalia>
Also, how do I submit a proposal for things related to V1 Web Components?

[14:56:14.0000] <Domenic>
intervalia: file an issue on https://github.com/w3c/webcomponents/, but please pay attention to https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F

[14:56:32.0000] <domfarolino>
intervalia: Hm I think that means more along the lines of anyone can participate, just ask and mentorship can be provided, since there are only 39 people publically associated with the org. Could be wrong though.

[14:56:45.0000] <Domenic>
indeed, that's what it means :)

[14:57:12.0000] <intervalia>
OK. Maybe a little clarification to that message...

[14:57:19.0000] <intervalia>
Thanks for the info on Web Components.

[15:05:03.0000] <domfarolino>
publicly* lol

[16:59:02.0000] <KiChjang_>
Domenic, i vote we make a joke about the subsubsubsubsubsubsteps littered around the spec in XHR for the next april fools


2017-06-03
[17:14:56.0000] <GPHemsley>
\example\..\demo/.\

[17:15:09.0000] <GPHemsley>
what is the domain supposed to be on that, according to URL?

[17:15:15.0000] <GPHemsley>
sorry, host

[17:52:57.0000] <MikeSmith>
GPHemsley: https://quuz.org/url/liveview.html#\example\..\demo/.\

[17:53:18.0000] <GPHemsley>
lovely, thank you

[17:54:02.0000] <GPHemsley>
wait, that automatically uses the current URL as the base?

[17:54:57.0000] <GPHemsley>
I should have specified, I'm looking for the raw output from "basic URL parser"

[17:55:39.0000] <MikeSmith>
that is it

[17:55:57.0000] <MikeSmith>
there is no URL without a base

[17:56:14.0000] <MikeSmith>
there it just uses https://quuz.org as the base

[17:56:24.0000] <MikeSmith>
but you can replace that with whatever other base you want

[17:56:30.0000] <GPHemsley>
how?

[17:56:57.0000] <MikeSmith>
conceptually

[17:57:02.0000] <MikeSmith>
it is arbitrary

[17:57:23.0000] <GPHemsley>
the algorithm acts differently when there is no base

[17:57:36.0000] <MikeSmith>
yeah it fails

[17:57:46.0000] <MikeSmith>
because it must have a base

[17:58:31.0000] <MikeSmith>
anyway the only relevant information to discern from that string is what path it would produce

[17:58:58.0000] <GPHemsley>
I'm trying to debug my implementation

[17:59:00.0000] <MikeSmith>
which https://quuz.org/url/liveview.html#\example\..\demo/.\ tells you

[17:59:12.0000] <MikeSmith>
I see

[17:59:42.0000] <MikeSmith>
well I don’t see how you can implement anything without evaluating the input string against a base

[17:59:54.0000] <GPHemsley>
again, base can be null

[18:00:02.0000] <GPHemsley>
and the algorithm acts differently when it is

[18:01:09.0000] <GPHemsley>
but ok, I guess I understand what you're saying

[18:01:40.0000] <MikeSmith>
OK yeah well I don’t know any other tools that let you test what happens with some input string in the base=null case

[18:01:41.0000] <GPHemsley>
I think my actual problem is in "host parser"

[18:02:07.0000] <GPHemsley>
so I'm trying to figure out what the return value for that is expected to be

[18:02:12.0000] <GPHemsley>
in this case

[18:05:16.0000] <GPHemsley>
in order for the "basic URL parser" to know to use the base URL's host, it has to determine that the URL doesn't have a valid host

[18:05:44.0000] <GPHemsley>
and my implementation seems to have a problem with doing that in this case

[23:26:26.0000] <annevk>
GPHemsley: if base is null you get failure for that input

[23:26:53.0000] <GPHemsley>
annevk: For which algorithm?

[00:25:07.0000] <annevk>
GPHemsley: URL parser

[03:42:05.0000] <JoWie>
I notice that a lot of browsers skip the capture phase during event dispatching in certain specific situations. this is not specced anywhere right?

[04:06:20.0000] <nox>
JoWie: Do you have a sample?

[04:08:03.0000] <JoWie>
img.dispatchEvent(new Event('load')) vs img.dispatchEvent(new Event('foo'))

[04:08:22.0000] <JoWie>
the first one only seems to handle the AT phase

[04:09:02.0000] <JoWie>
in firefox and chrome

[04:10:32.0000] <JoWie>
however if the load event is triggerd by the browser isTrusted, it does enter the capture phase

[04:10:47.0000] <JoWie>
i'm just wondering if this is against the spec or that i'm missing something

[04:12:07.0000] <nox>
JoWie: Is your listener's capture flag set to true?

[04:12:24.0000] <JoWie>
yep

[04:12:40.0000] <nox>
No idea then, can't find anything in the spec. :)

[04:12:42.0000] <JoWie>
i log both with and without

[04:12:52.0000] <JoWie>
yea that's what i thought

[04:13:24.0000] <JoWie>
i've noticed a lot of spec violations with event handling before, perhaps i should add some WPT's

[06:50:18.0000] <annevk>
JoWie: for load the Window object has a special case

[06:51:22.0000] <annevk>
JoWie: does not explain the isTrusted thing though, so maybe file a bug against DOM

[06:55:40.0000] <JoWie>
so the process nowadays is to file a DOM bug? not at each browser vendor?

[06:55:45.0000] <JoWie>
or HTML, etc

[07:15:40.0000] <annevk>
JoWie: depends on the bug, but this kind of mismatch prolly needs investigation

[07:16:04.0000] <JoWie>
ah sure

[07:16:16.0000] <annevk>
JoWie: and if browsers are consistent it seems best to start with the standard

[07:35:23.0000] <GPHemsley>
annevk: I need to know what happens for "host parser"

[07:40:23.0000] <annevk>
GPHemsley: would reject on the slashes iirc

[07:40:42.0000] <GPHemsley>
so return failure?

[08:58:26.0000] <annevk>
GPHemsley: hai

[08:58:34.0000] <GPHemsley>
/me waves

[10:08:35.0000] <JoWie>
annevk: my issue indeed only occurs for when i add the listener to the window. so i guess it's in the spec after all

[10:22:47.0000] <JoWie>
the isTrusted thing was incorrect

[12:09:41.0000] <GPHemsley>
annevk: I assume you've figured out by now that I've spent the week creating an implementation of URL in Perl. :)

[12:12:12.0000] <GPHemsley>
800/849 tests passing, so almost there

[13:58:19.0000] <annevk>
GPHemsley: cool, I'm on vacation so haven't been keeping track of things

[16:30:40.0000] <GPHemsley>
annevk: When do you come back?

[16:31:36.0000] <GPHemsley>
(this is apparently what I do when *I'm* on vacation)


2017-06-04
[21:31:58.0000] <GPHemsley>
hmm... it always help if you finish coding a particular section >_<

[21:57:43.0000] <annevk>
GPHemsley: beginning of next month

[21:57:57.0000] <GPHemsley>
oh wow, you're taking the whole month?

[22:01:38.0000] <GPHemsley>
I hope that's for positive reasons

[22:10:02.0000] <annevk>
Fairly normal in Europe I think

[22:41:39.0000] <GPHemsley>
ah, so many things normal in Europe that are unthinkable in the U.S.... :(

[22:42:04.0000] <GPHemsley>
like, you know, caring about people's wellbeing and such

[10:57:25.0000] <GPHemsley>
well well well... I actually found an implementation difference

[10:57:53.0000] <GPHemsley>
https://quuz.org/url/liveview.html#http://./

[10:58:06.0000] <GPHemsley>
https://quuz.org/url/liveview.html#http://../

[10:58:15.0000] <GPHemsley>
the platform tests don't match the spec

[10:58:22.0000] <GPHemsley>
so that's fun

[10:59:07.0000] <GPHemsley>
wait, this is a 3-way difference

[10:59:20.0000] <GPHemsley>
>_<

[11:00:02.0000] <GPHemsley>
spec says (a), WPT says (b), jsdom/whatwg-url does (c)

[11:00:38.0000] <GPHemsley>
Domenic, annevk: Thoughts? ^^

[11:02:12.0000] <GPHemsley>
hmm, lemme dig deeper into this... this distinction hinges on whether the base URL can be a base

[11:43:04.0000] <GPHemsley>
hmm, might just be jsdom/whatwg-url that's wrong

[11:43:28.0000] <GPHemsley>
I think there's an issue in the implementation of Unicode ToASCII that is clouding my implementation


2017-06-05
[17:01:20.0000] <GPHemsley>
I think the test is wrong in this case: https://quuz.org/url/liveview.html#http://4294967296

[17:01:26.0000] <GPHemsley>
(says it should fail)

[17:06:54.0000] <GPHemsley>
unless this is another problem with ToASCII >_>

[18:09:53.0000] <GPHemsley>
Releasing to the world:

[18:09:54.0000] <GPHemsley>
https://github.com/GPHemsley/WHATWG-Infra

[18:10:01.0000] <GPHemsley>
https://github.com/GPHemsley/WHATWG-URL

[20:16:46.0000] <MikeSmith>
GPHemsley: very cool

[20:36:38.0000] <GPHemsley>
MikeSmith: :D

[00:54:22.0000] <zcorpan>
gsnedders: how do I run tokenizer tests with html5lib?

[02:24:14.0000] <zcorpan>
gsnedders: can you add inikulin as a collaborator for html5lib-tests?

[06:15:13.0000] <zcorpan>
dgrogan: re https://github.com/whatwg/html/pull/2734 , If you're implementing this in chromium, adding tests to external/wpt and referencing the CL there is OK.

[08:48:21.0000] <wanderview>
igrigorik: what do you think rIC should do in this case:  setInterval(f, 5); requestIdleCallback(d => console.log(d.timeRemaining()));

[08:48:39.0000] <wanderview>
igrigorik: should requestIdleCallback's deadline.timeRemaining() ever return more than 5ms?

[16:27:30.0000] <terinjokes>
Domenic: do you think an implementation of Console should throw on, eg, console.log()?

[16:29:23.0000] <terinjokes>
as wrritten right now `console.log("symbol: %s", Symbol.for("foo"))` should throw

[16:30:06.0000] <terinjokes>
"""If specifier is %s, let converted be the result of ToString(current)."""


2017-06-06
[17:30:08.0000] <Domenic>
terinjokes: yeah, IMO conversions should throw; we've been adding a few tests for that.

[17:30:29.0000] <Domenic>
That said symbols should maybe get a special exception?

[17:33:58.0000] <terinjokes>
Domenic: as a user, i would be a tad surprised by console.log throwing

[17:34:49.0000] <Domenic>
I mean, would you be surprised if the argument was { toString() { throw x; } }?

[17:35:19.0000] <terinjokes>
i think this goes back to the conversations about if console logging is observable

[17:35:52.0000] <terinjokes>
i don't remember the resolution to those

[14:48:12.0000] <Domenic>
How do you rename things on MDN? https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs

[14:49:11.0000] <TabAtkins>
Domenic: There's an "Edit Page Title" right under the page title when you're editting.

[14:49:32.0000] <Domenic>
TabAtkins: thank you.... -_-

[14:49:41.0000] <TabAtkins>
^_^

[15:31:21.0000] <pygy>
Hello, I just noticed that some types of input elements (like `input[type=number]`) do not provide selectionStart/selectionEnd getters (and related methods/properties).)

[15:33:47.0000] <pygy>
There's Bugzilla issue on the topic, closed as wontfix because the W3C spec doesn't mention that functionality for type=number... It would be nice to have those though, for UA whose widgets are plain text inputs that can be selected.

[15:35:15.0000] <pygy>
Should I open an issue at https://github.com/whatwg/dom, or is it a lost cause (if so, I'd love to know why).

[15:56:16.0000] <TabAtkins>
They're not provided because type=number/etc don't necessarily have text-based input; there's no guarantee that a selection can even exist.

[15:57:16.0000] <caitp>
it should be mandatory that they don't have text-based input. I hate entering dates and stuff on mobile browsers without the keypad UI :<

[16:03:33.0000] <pygy>
TabAtkins, That was my guess, but it would be nice for UAs that do implement them as text fields to provide them (be them noops on other platforms).

[16:04:48.0000] <TabAtkins>
UAs shouldn't do that in the first place, and having APIs that work differently like that encourages bad design - it's easy to test on the one browser you usually use, and not realize you have a broken site for someone using another browser.

[16:05:21.0000] <TabAtkins>
(By "shouldn't do that", I mean "provide text-based input"; like caitp said, giving better input methods is *way* better for the user.)

[16:05:52.0000] <pygy>
My current problem is: I have a client that wants me to emulate `maxLength` on an input[type=number] field. It can be done in JS, except for taking care of selections.

[16:06:59.0000] <pygy>
If the field has reached the limit, you can't select some of it to type over.

[16:08:16.0000] <pygy>
What would you suggest as a better input method for numbers on devices with a physical keyboard?

[16:08:52.0000] <Domenic>
pygy: you can do max="999"

[16:09:13.0000] <Domenic>
pygy: a better input method is e.g. a keypad (with no selection allowed)

[16:09:27.0000] <pygy>
That won't limit the text size

[16:09:30.0000] <TabAtkins>
Instead of preventing typing, just show a validation message if the .valueAsNumber is too large?

[16:09:31.0000] <Domenic>
Yes it will...

[16:09:36.0000] <Domenic>
It will limit it to at most 3

[16:11:09.0000] <pygy>
The field will be marked as invalid, but you can type more http://jsbin.com/kalijiridi/edit?html,output

[16:11:33.0000] <Domenic>
Sure, yeah, that's what I meant

[16:11:38.0000] <Domenic>
You can never stop people from typing more, even with maxlength=""

[16:12:18.0000] <pygy>
But maxlength doesn't work for numbers

[16:12:19.0000] <Domenic>
(Well, depends on the browser UI, but again, you're using browser UI, the browser gets to make the decisions.)

[16:12:38.0000] <Domenic>
Indeed, you're supposed to use max="" instead for numbers

[16:13:03.0000] <pygy>
Are we going 'round in circles?

[16:13:07.0000] <Domenic>
Yeah, seems like

[16:13:23.0000] <Domenic>
maxlength="" is not a guarantee that you can't type longer. Several mobile browsers just make the field invalid, I believe

[16:13:24.0000] <pygy>
Around a hole in the spec?

[16:13:48.0000] <Domenic>
The spec doesn't prescribe UI

[16:13:54.0000] <Domenic>
So this cannot be a problem with the spec

[16:14:12.0000] <Domenic>
It is valid per the spec for input type="number" to accept the string "nine hundred and ninety nine"

[16:14:46.0000] <Domenic>
Or perhaps more realistically, 三百五

[16:14:59.0000] <pygy>
The hole is the lack of support for selections in text fields

[16:15:11.0000] <Domenic>
How would you "select" a numeric keypad?

[16:15:15.0000] <Domenic>
It's not a text field

[16:15:20.0000] <Domenic>
If you want a text field, use input type="text"

[16:15:27.0000] <Domenic>
Another valid UI is a dial

[16:15:31.0000] <pygy>
If the UA falls back on a text field, provide selction-related properties/methods.

[16:15:36.0000] <pygy>
Noop out otherwise

[16:15:46.0000] <Domenic>
As explained above, that doesn't work because of cross-browser issues

[16:16:14.0000] <pygy>
What wouldn't work?

[16:16:23.0000] <Domenic>
19:04:48 <TabAtkins> UAs shouldn't do that in the first place, and having APIs that work differently like that encourages bad design - it's easy to test on the one browser you usually use, and not realize you have a broken site for someone using another browser.

[16:17:06.0000] <Domenic>
(having APIs that work differently depending on platform, like you suggest with your "if... noop out otherwise")

[16:17:34.0000] <TabAtkins>
It's also valid, in particular, to type "00009", which will contain the numeric value 9, and send "9" when submitted.

[16:17:48.0000] <TabAtkins>
There's no reason to prevent people from typing that if it's a number.

[16:18:19.0000] <TabAtkins>
If it's not a number, but just a string that only contains digits, then you want to use type=text and inputmode=digits, if I recall the attribute value correctly.

[16:18:27.0000] <TabAtkins>
And then you can just use maxlength like normal.

[16:18:48.0000] <Domenic>
Yeah, if your goal is to limit people to e.g. between 0 and 999, trying some maxlength="3" equivalent will fail badly on 三千 (=3000)

[16:19:40.0000] <Domenic>
Maybe that can be helpful in convincing your client :)

[16:19:49.0000] <pygy>
I'll see how `inputmode` gels with the accessibility team, thanks. The site is French/English only... Arabic numbers only.

[16:21:39.0000] <Domenic>
Sure but lots of people visit French/English sites from other-language phones or computer OSs, which is what input type="number" will care about (the OS's settings)

[16:22:07.0000] <pygy>
Positive integers... So I'm already filtering out non-digits with JS. Those are weird requirements, I agree... I'm several steps removed from the people who make those decisions, so it's not easy to argue...

[16:22:17.0000] <Domenic>
Heh, yeah, I've been there...

[16:23:02.0000] <Domenic>
All I can say is HTML designed min/max for this use case, so hopefully that'll work for those folks... if not then they probably don't want an actual number input, but a text input with some restrictions, yeah.

[16:23:02.0000] <pygy>
It's an insurance site, to order insurance products in Canada.

[16:23:17.0000] <Domenic>
I hear Canada has a lot of Chinese expats

[16:24:58.0000] <TabAtkins>
What's the actual "number" you're putting in?

[16:25:23.0000] <KiChjang>
Domenic, truth, i am one

[16:25:28.0000] <TabAtkins>
Again, is it a real number, or just a string that's limited to digits? (That is, is doing math on the value meaningful, or is it just an identifier?)

[16:25:33.0000] <KiChjang>
vancouver is dubbed as little Hong Kong

[16:25:45.0000] <pygy>
Money amounts.

[16:26:53.0000] <pygy>
Used either to for comparison, or to be sent over the network (as floats, yuck)

[16:27:22.0000] <TabAtkins>
Okay, so then yeah, just use <input type=number max=999> or whatever.  That's literally all you need.

[16:27:43.0000] <TabAtkins>
(Remember that you have to do validation on the value on the server side, too - there's no way to prevent the client from sending whatever random data it wants.)

[16:28:22.0000] <pygy>
I know, the server is none of my business. All I have is a schema, and an endpoint.

[16:28:47.0000] <TabAtkins>
Also: um, you might want to kick it up the chain that representing money as floats can sometimes have legal consequences when pennies are added or lost.  They should be integers representing cents, or whatever fraction of cents you're legally required to work in.

[16:29:20.0000] <pygy>
I already did

[16:29:37.0000] <pygy>
to no avail

[16:30:23.0000] <pygy>
I asked for amounts in cents, as integers, it fell on deaf ears.

[16:31:53.0000] <pygy>
The server sends non-integers amounts, and I convert them immediately to integer cents amounts

[16:42:32.0000] <pygy>
Thanks for the discussion guys :-) `input[inputmode=numeric]` is the actual value (which isn't reflected as poperty on the element)

[16:45:32.0000] <pygy>
Well "numeric" is the value, and "inputmode" isn't reflected... the previous sentence didn't make any sense :-)

[16:45:42.0000] <pygy>
Bye


2017-06-07
[00:58:07.0000] <zcorpan>
hsivonen: MikeSmith: checking https://drafts.fxtf.org/geometry/ with checker.html5.org or validator.nu but via file upload seems to cause a timeout (v.nu says "    IO Error: java.util.concurrent.TimeoutException: Idle timeout expired: 30000/30000 ms", checker.html5.org gives a blank page after a while)

[00:58:18.0000] <zcorpan>
hsivonen: MikeSmith: checking a small file works ok

[03:33:59.0000] <MikeSmith>
zcorpan: thanks for the heads-up

[03:34:12.0000] <MikeSmith>
yeah, https://checker.html5.org/#file just hangs when I try it with that file

[03:34:33.0000] <MikeSmith>
an no errors getting logged on the server side

[03:34:52.0000] <MikeSmith>
hmm ERR_SPDY_PROTOCOL_ERROR

[03:34:57.0000] <MikeSmith>
in Chrome

[03:35:40.0000] <MikeSmith>
but I guess that’s not the related really

[03:37:27.0000] <MikeSmith>
works fine at https://validator.w3.org/nu/#file

[03:37:43.0000] <zcorpan>
i get the same result in firefox as in opera

[03:37:54.0000] <MikeSmith>
there is some chance the cause is in nginx

[03:38:26.0000] <MikeSmith>
I think hsivonen and I are using a similar setup, using nginx to do the TLS termination

[03:39:09.0000] <MikeSmith>
and proxying to the vnu jetty web server on port 8888

[03:39:56.0000] <MikeSmith>
hmm yeah

[03:40:11.0000] <MikeSmith>
zcorpan: I’ll tell you a little secret

[03:40:16.0000] <MikeSmith>
http://w3c-test.org:8888/

[03:40:36.0000] <MikeSmith>
that’s what https://checker.html5.org/ is currently proxied to

[03:40:46.0000] <MikeSmith>
and if you try it there it works fine

[03:40:50.0000] <MikeSmith>
file upload

[03:41:20.0000] <MikeSmith>
because that does not go through nginx but instead directly to jetty

[03:41:59.0000] <MikeSmith>
so I guess there is probably some nginx config setting we need to tweak

[03:42:32.0000] <MikeSmith>
I thought I had already, upped some file-upload size limit that nginx has a low default for

[03:42:39.0000] <zcorpan>
interesting. but doesn't explain java.util.concurrent.TimeoutException in v.nu?

[03:42:58.0000] <MikeSmith>
yeah that I don’t know why

[03:43:01.0000] <zcorpan>
/me bbiab

[15:08:34.0000] <domfarolino>
tbug

[15:08:56.0000] <domfarolino>
/me accidentally typed in the wrong window :(

[15:26:18.0000] <Domenic>
MikeSmith: I have a bit of free time, would you like me to help move the files around for the multipage dfn.js PRs so we can merge them?

[15:31:15.0000] <MikeSmith>
Domenic: yeah if you have the time now

[15:31:35.0000] <MikeSmith>
would appreciate it

[15:31:35.0000] <MikeSmith>
https://accounts.spotify.com/authorize

[15:31:39.0000] <MikeSmith>
oofs

[15:32:11.0000] <MikeSmith>
as far as the filename, html-dfn.js is fine by me

[15:33:27.0000] <MikeSmith>
but I can also do it myself now if you want

[15:33:53.0000] <MikeSmith>
I have about 30 minutes free now

[15:34:08.0000] <Domenic>
I'm happy to do it, and let you have the free time :)

[15:34:16.0000] <MikeSmith>
:) cheers

[15:54:18.0000] <TabAtkins>
Domenic: What's the most reasonable way to poke at TC39? Still es-discuss?

[15:54:29.0000] <Domenic>
TabAtkins: for new feature proposals, yeah

[15:54:35.0000] <TabAtkins>
kk


2017-06-08
[22:08:56.0000] <domfarolino>
Is there a benefit of using multiple link tags w/ media attributes as opposed to stuffing ALL styles into one file and using @media throughout? My guess is there will be less render blocking CSS since the parser doesn't have to actually parse ALL styles up front (and of course wait for that larger file to download) to display page...is this accurate?

[23:43:31.0000] <zcorpan>
MikeSmith: hmmm. the script is loading cross-references when selecting some text. is that intentional?

[23:44:45.0000] <MikeSmith>
zcorpan: nope

[23:44:52.0000] <MikeSmith>
dunno why it would do that..

[23:45:05.0000] <MikeSmith>
but will investigate and fix it

[23:45:32.0000] <MikeSmith>
but I guess it’s just the event listener

[23:46:05.0000] <MikeSmith>
I mean, it’s probably not the select but just the click event?

[23:46:47.0000] <MikeSmith>
which is ignore if you’re clicking on a hyperlink

[23:46:58.0000] <MikeSmith>
but otherwise do not ignore it seems

[23:47:31.0000] <MikeSmith>
so I think it will happen every time you click anywhere in a page other than a hyperlink

[23:48:26.0000] <zcorpan>
MikeSmith: right

[23:49:50.0000] <MikeSmith>
OK I’ll figure out how to make it not do that and write a patch and PR it

[23:54:36.0000] <zcorpan>
MikeSmith: i guess the listener should check if e.target or e.target.parentNode or e.target.parentNode.parentNode is a dfn, and none of those are <a>

[23:55:51.0000] <zcorpan>
(or walk up to <body> maybe)

[23:55:57.0000] <MikeSmith>
zcorpan: yeah was trying to think of a more elegant way but I guress that will do

[23:57:18.0000] <zcorpan>
matchesSelector could work but is likely more expensive. but maybe that doesn't matter if it happens on each click

[23:59:02.0000] <MikeSmith>
well I guess just iterating up to body is simple and fast

[00:21:30.0000] <nox>
TabAtkins: So regarding our discussion about computed values and serialisation,

[00:22:00.0000] <nox>
TabAtkins: Does that mean that https://drafts.csswg.org/css-shapes/#basic-shape-computed-values doesn't matter when it comes to serialising these computed values, and that parts that can be omitted should be?

[02:23:52.0000] <zcorpan>
MikeSmith: i'm looking at html-dfn now

[02:24:06.0000] <MikeSmith>
ok thanks

[02:25:01.0000] <MikeSmith>
(sorry I didn’t get teh PR raised earlier; needed to pick up my little one from daycare)

[06:36:35.0000] <TabAtkins>
nox: Yes

[06:37:54.0000] <hsivonen>
zcorpan: sorry, I don't know how to fix that with nginx

[06:40:33.0000] <nox>
TabAtkins: Nice!

[08:37:18.0000] <astearns>
TabAtkins: is that Shapes section incorrect?

[08:38:25.0000] <astearns>
or is it just that it's not applicable to serialization?

[08:41:42.0000] <TabAtkins>
astearns: Not applicable to serialization.

[08:42:01.0000] <TabAtkins>
It's just normalizing the computed value to have all the information readily available.

[08:42:14.0000] <TabAtkins>
And then serialization outputs the shortest form of it, which will often omit some of that information.

[09:28:11.0000] <a-ja>
is there work under way getting link preload with integrity|nonce attribs working with fetch and csp sri for script|style ?

[09:55:11.0000] <nox>
TabAtkins: And OTOH we serialise to the shortest form for specified basic shapes only because of the spec, right?

[09:55:40.0000] <TabAtkins>
Because of CSSOM

[09:55:40.0000] <nox>
TabAtkins: Other properties, by default, should serialise to whatever was in the property rule, just normalising whitespace and whatnot, is that correct?

[09:57:01.0000] <TabAtkins>
This is for computed values. Specified values should match what was input (modulo whitespace/etc)

[09:57:41.0000] <nox>
TabAtkins: Except in the case of basic shapes and similar cases, where the spec states how they should be serialised, right?

[09:58:23.0000] <TabAtkins>
No, it shouldn't be.

[09:58:37.0000] <TabAtkins>
(Our story isn't too straight here.)

[09:59:10.0000] <nox>
I would love to be able to just serialise shortest forms all the time, but I guess that's wishful thinking.

[10:00:10.0000] <TabAtkins>
People depend on specified values equaling what they entered, in general.

[10:00:12.0000] <nox>
TabAtkins: Adding that this part isn't too clear for now makes a lot of sense, I'm ok with that.

[10:00:42.0000] <nox>
TabAtkins: Sometimes you state things as if they are crystal clear from the prose in the various specs and it confuses the hell out of me hah.

[10:00:47.0000] <TabAtkins>
This is only observable by looking at a stylesheet directly or reading .style, of course.

[10:00:52.0000] <TabAtkins>
Hehe, sorry.

[10:01:04.0000] <TabAtkins>
My specs aren't golden in this regard either.

[10:01:40.0000] <nox>
Well, I don't blame you, given how implementing that stuff is a huge task, I don't want to even think about how to specify them.

[10:02:08.0000] <TabAtkins>
One of my tasks for Typed OM is too define the "shortest form serialization" for every single property.

[10:02:10.0000] <TabAtkins>
Joy.

[10:02:38.0000] <nox>
TabAtkins: In Servo we switched a lot of code to use generic types, parameterised for example by a specified or computed length,

[10:02:56.0000] <nox>
so simpler properties share the same code for serialisation,

[10:03:12.0000] <nox>
that's why I would like both of them to just serialise the same, but I guess real world won't let me have that. :)

[10:03:42.0000] <TabAtkins>
Understandable.

[10:03:48.0000] <TabAtkins>
I'd do it if I could!

[10:03:55.0000] <nox>
TabAtkins: And the cherry on the cake,

[10:04:21.0000] <nox>
TabAtkins: I recently implemented #[derive(ToCss)], so we don't even have to write serialisation code anymore for many properties.

[10:05:36.0000] <nox>
Rust's #[derive(...)] has been damn useful to implement many aspects of the CSS properties, whether a value contains viewport percentages, how to compute values, and serialisation.

[10:06:30.0000] <TabAtkins>
Interesting!


2017-06-09
[00:09:56.0000] <MikeSmith>
zcorpan: I’m looking at https://github.com/whatwg/wattsi/issues/47 now

[00:10:06.0000] <MikeSmith>
= xrefs.json should include cross-spec definitions

[00:10:18.0000] <MikeSmith>
> Clicking on a definition in the Dependencies section used to bring up a panel with the references in HTML.

[00:10:43.0000] <MikeSmith>
can you say precisely which references you mean

[00:10:52.0000] <MikeSmith>
or just one of them

[00:11:52.0000] <MikeSmith>
ah I guess all of them

[00:12:50.0000] <MikeSmith>
when I look at snapshots I don’t see that popups were being generated for those

[00:12:53.0000] <MikeSmith>
https://html.spec.whatwg.org/commit-snapshots/79151848f8f80bb59d9e7bd469c9c1e4e2e7940a#dependencies

[00:15:12.0000] <MikeSmith>
at least now we are (still) generating the popops

[00:15:36.0000] <MikeSmith>
so I just need to figure out why it’s not able to populate them

[00:18:02.0000] <MikeSmith>
OK those terms are actually all in the xrefs.json file

[00:18:33.0000] <MikeSmith>
e.g., “strip leading and trailing ASCII whitespace”

[00:20:52.0000] <MikeSmith>
that is, strip-leading-and-trailing-ascii-whitespace

[00:21:10.0000] <MikeSmith>
and code-point is in there too

[00:21:14.0000] <MikeSmith>
etc etc

[00:21:41.0000] <MikeSmith>
so I think the problem must be in html-dfn.js?

[00:54:33.0000] <zcorpan>
MikeSmith: ok. I didn't actually debug, just guessed at the cause

[00:55:27.0000] <MikeSmith>
yeah, glad it turns out the cause is not the wattsi code

[00:55:38.0000] <MikeSmith>
now looking at the JavaScript

[00:58:57.0000] <MikeSmith>
but I have only 2 minutes

[00:59:05.0000] <MikeSmith>
now 1 minute

[00:59:21.0000] <MikeSmith>
before I get sucked off to something less useful for at least an hour

[00:59:30.0000] <MikeSmith>
will get back to it after that

[01:00:34.0000] <MikeSmith>
zcorpan: btw thanks immensely for fixing all the stuff I regressed with move to the multipage-enabled dfn handling

[01:01:37.0000] <zcorpan>
MikeSmith: thank you for enabling multipage dfn ^_^

[01:19:29.0000] <zcorpan>
hmm. wattsi does not emit a <body> tag. so our scripts at the top in body are parsed in head

[01:49:28.0000] <MikeSmith>
oh

[01:50:14.0000] <MikeSmith>
well `source` has no <body> tag right?

[01:50:33.0000] <MikeSmith>
maybe we can fix it just by adding it to `source`

[01:51:44.0000] <MikeSmith>
zcorpan: btw I mispoke earlier, about the cause of the Dependencies problem not being in wattsi

[01:52:07.0000] <zcorpan>
MikeSmith: source has body

[01:52:15.0000] <MikeSmith>
I had just gotten confused about the state of my working copies

[01:52:19.0000] <MikeSmith>
oh

[01:52:37.0000] <MikeSmith>
OK well we can fix that <body> thing in wattsi easily enough

[01:52:47.0000] <zcorpan>
I've PRed already :-)

[01:52:52.0000] <MikeSmith>
ah cool

[01:53:06.0000] <MikeSmith>
so about the Depedencies thing, the wattsi fix is dead simple

[01:53:13.0000] <zcorpan>
sweet

[01:53:16.0000] <MikeSmith>
-                  if ((Variant <> vDEV) and (not DFN.HasAttribute(kCrossSpecRefAttribute))) then

[01:53:20.0000] <MikeSmith>
+                  if (Variant <> vDEV) then

[01:53:23.0000] <MikeSmith>
will PR that right now

[01:53:55.0000] <MikeSmith>
I now do not remember why I put that `and (not DFN.HasAttribute(kCrossSpecRefAttribute)` in there to begin with

[01:54:15.0000] <zcorpan>
i almost have re-opening panel across multipage working

[01:54:33.0000] <MikeSmith>
oh wow

[01:54:35.0000] <MikeSmith>
great

[01:55:06.0000] <MikeSmith>
yeah in pratice that UX regression is pretty glaring

[01:55:54.0000] <MikeSmith>
since when actually using the spec, you end up following many dfn links across pages

[03:40:22.0000] <zcorpan>
man now i might just start to use multipage again

[04:00:05.0000] <zcorpan>
do updates happen automatically now when merging changes to wattsi (for travis CI, deployment)? Domenic?

[04:23:35.0000] <Domenic>
zcorpan: for unknown reasons no, the web hook errors out. You have to ssh in.

[04:26:32.0000] <zcorpan>
Domenic: ok. can you do that for https://github.com/whatwg/wattsi/pull/49 ?

[04:44:29.0000] <zcorpan>
I want https://discuss.httparchive.org/t/numdomelements-data/756/2 but for <hr> specifically (i.e. REGEXP_MATCH(LOWER(body), r'<hr(\s|>)') or so)

[04:45:14.0000] <zcorpan>
How do I write a query to count matches for each site?

[04:45:55.0000] <zcorpan>
what I've tried I think counts number of resources that have <hr> at all, not the total number of <hr>s there is

[04:46:56.0000] <zcorpan>
igrigorik: ^

[04:47:51.0000] <zcorpan>
(checking just where page = url is fine)

[08:28:47.0000] <salva_>
hi there!

[08:29:01.0000] <salva_>
Salva from Mozilla here

[08:29:26.0000] <salva_>
good afternoon from Spain

[13:51:43.0000] <TabAtkins>
Domenic: Per aklein, the better way to contact tc39 is via their github or mozilla#jslang IRC.

[13:51:57.0000] <aklein>
TabAtkins: er, or #tc39 on Freenode

[13:52:02.0000] <aklein>
bterlson created that soon

[13:52:09.0000] <TabAtkins>
Yeah, I'm in that one.

[13:52:19.0000] <TabAtkins>
Should probably join moz's IRC.

[13:54:34.0000] <Domenic>
GitHub is only really for bug reports.

[15:59:09.0000] <MikeSmith>
anybody here have some experience with Yacy or Solr?

[15:59:37.0000] <MikeSmith>
I have a Yacy instance set up to index the multipage HTML spec

[15:59:54.0000] <MikeSmith>
and it successfully indexes all the pages expect just one

[16:00:00.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/media.html

[16:00:49.0000] <MikeSmith>
my Yacy admin console shows it fetched that document successfully and has the raw content

[16:02:07.0000] <MikeSmith>
but then it shows nothing in the Parsed Content and Parsed Sentences parts of the admin browser for that page

[16:02:55.0000] <MikeSmith>
whereas for all the other multipage/ documents it shows the expected results of parsing those

[16:03:18.0000] <MikeSmith>
..

[16:04:07.0000] <MikeSmith>
so one thing I’m wondering is, what HTML parser does Yacy use and is it failing on that document for some reason

[16:05:22.0000] <MikeSmith>
would like to get this figured out, because otherwise we can’t get search results for searches of any text in that /multipage/media.html document

[16:34:56.0000] <MikeSmith>
https://github.com/yacy/yacy_search_server/blob/master/source/net/yacy/document/parser/htmlParser.java I guess


2017-06-10
[15:50:25.0000] <MikeSmith>
TabAtkins: ⬇

[15:50:32.0000] <MikeSmith>
curl https://api.csswg.org/bikeshed/ -F url=https://raw.githubusercontent.com/w3c/ServiceWorker/master/docs/index.bs -F output=err

[15:50:54.0000] <MikeSmith>
\033[1;33mLINK ERROR:\033[0m No 'dfn' refs found for 'the worker's documents'.

[15:50:54.0000] <MikeSmith>
&lt;a data-link-type="dfn" data-lt="the worker&#8217;s Documents">the worker&#8217;s Documents&lt;/a>

[15:50:57.0000] <MikeSmith>
\033[1;33mLINK ERROR:\033[0m No 'dfn' refs found for 'unicode serialization of an origin'.

[15:51:00.0000] <MikeSmith>
&lt;a data-link-type="dfn" data-lt="Unicode serialization of an origin">Unicode serialization&lt;/a>

[15:51:03.0000] <MikeSmith>
\033[1;33mLINK ERROR:\033[0m No 'dfn' refs found for 'unicode serialization of an origin'.

[15:51:06.0000] <MikeSmith>
&lt;a data-lt="Unicode serialization of an origin" data-link-type="dfn" data-link-for-hint="ForeignFetchEvent">Unicode serialization&lt;/a>

[16:16:50.0000] <MikeSmith>
..

[16:16:56.0000] <MikeSmith>
curl -s https://api.csswg.org/bikeshed/ -F url=https://raw.githubusercontent.com/w3c/ServiceWorker/master/docs/index.bs -F output=err | xargs -0 printf

[16:17:11.0000] <MikeSmith>
LINK ERROR: No 'dfn' refs found for 'the worker's documents'.

[16:17:11.0000] <MikeSmith>
&lt;a data-link-type="dfn" data-lt="the worker&#8217;s Documents">the worker&#8217;s Documents&lt;/a>

[16:17:14.0000] <MikeSmith>
LINK ERROR: No 'dfn' refs found for 'unicode serialization of an origin'.

[16:17:16.0000] <MikeSmith>
&lt;a data-link-type="dfn" data-lt="Unicode serialization of an origin">Unicode serialization&lt;/a>

[16:17:19.0000] <MikeSmith>
LINK ERROR: No 'dfn' refs found for 'unicode serialization of an origin'.

[16:17:22.0000] <MikeSmith>
&lt;a data-lt="Unicode serialization of an origin" data-link-type="dfn" data-link-for-hint="ForeignFetchEvent">Unicode serialization&lt;/a>


2017-06-11
[20:50:54.0000] <Domenic>
MikeSmith: "Unicode serialization of an origin" was removed

[20:51:08.0000] <Domenic>
As was the worker's documents, I believe

[20:51:18.0000] <Domenic>
I thought we fixed the latter at least in service worker

[22:08:52.0000] <MikeSmith>
Domenic: seems like they much still be in there somewhere

[22:08:56.0000] <MikeSmith>
/me looks

[22:09:43.0000] <MikeSmith>
oh I guess by “removed” you mean, removed from HTML

[22:10:04.0000] <MikeSmith>
but the references still must be in the Service Workers spec

[22:10:07.0000] <Domenic>
ya

[22:10:12.0000] <MikeSmith>
OK

[22:10:28.0000] <MikeSmith>
I’ll look and try to write up a patch fixing that

[22:24:11.0000] <MikeSmith>
Domenic: so yeah about “the worker's documents” I see again now the patch I wrote for changing that

[22:24:16.0000] <MikeSmith>
https://github.com/w3c/ServiceWorker/pull/1124

[22:24:54.0000] <MikeSmith>
which has just been waiting for me to make a change that jungkee requested

[22:25:04.0000] <MikeSmith>
so will do that

[22:25:17.0000] <MikeSmith>
then I’ll do that "Unicode serialization of an origin" one

[22:41:58.0000] <MikeSmith>
Domenic: OK https://github.com/w3c/ServiceWorker/pull/1124 righted

[22:54:44.0000] <MikeSmith>
Domenic: OK raised https://github.com/w3c/ServiceWorker/pull/1160 just now

[23:08:33.0000] <annevk>
MikeSmith: FWIW, pretty sure there are open issues on both

[23:08:43.0000] <annevk>
MikeSmith: that I filed

[00:31:32.0000] <MikeSmith>
annevk: Ah ok I'll update the commit messages to reference the issues

[02:07:22.0000] <zcorpan>
MikeSmith: https://github.com/w3c/web-platform-tests/pull/6167#issuecomment-307442381 also shouldn't have been merged while it has the status:needs-spec-decision label

[02:19:29.0000] <MikeSmith>
zcorpan: oops

[06:57:45.0000] <Domenic>
the spec PR was merged, I wonder what spec decision zcorpan thought was needed

[07:28:55.0000] <MikeSmith>
OK well I’ll follow up with jgraham about the other thing

[16:26:08.0000] <GPHemsley>
hmm... jsdom/whatwg-url has a funky bug

[16:26:09.0000] <GPHemsley>
https://quuz.org/url/liveview.html#http://0x100000000/test

[16:26:57.0000] <GPHemsley>
I'm not really sure what it's doing here

[16:28:09.0000] <MikeSmith>
GPHemsley: indeed weird

[16:28:28.0000] <MikeSmith>
wonder how it ever gets there

[16:28:47.0000] <GPHemsley>
yeah, I don't understand why the 16 sticks around

[16:28:48.0000] <MikeSmith>
I mean given there’s no hash in the URL

[16:29:01.0000] <GPHemsley>
https://quuz.org/url/liveview.html#http://0x123456789/test

[16:29:02.0000] <MikeSmith>
oh I was just thinking of the hash

[16:29:14.0000] <GPHemsley>
oh, I'm looking at IPv4/domain parsing

[16:29:25.0000] <MikeSmith>
d’oh

[16:29:48.0000] <GPHemsley>
Anything over 0xFFFFFFFF should be IPv4 serialized as 0.0.0.0

[16:29:51.0000] <MikeSmith>
ignore everything I said :) I just noticed the actual URL being tested

[16:30:00.0000] <GPHemsley>
now, what other functions do with that is another story

[16:31:00.0000] <GPHemsley>
the spec defines an IPv4 address as 32-bit, but doesn't really enforce it anywhere

[16:31:07.0000] <GPHemsley>
not explicitly, anyway

[16:31:45.0000] <GPHemsley>
IPv4 serialize doesn't even explicitly require operating on an IPv4 address

[16:31:59.0000] <GPHemsley>
oh wait, yes it does

[16:32:08.0000] <GPHemsley>
but it doesn't check that that is the case

[16:32:21.0000] <GPHemsley>
it just silently discards anything above 32 bits

[16:32:54.0000] <GPHemsley>
but from looking at the jsdom/whatwg-url code, the problem is not in the IPv4 serialize function

[16:32:59.0000] <GPHemsley>
as that appears to be spec-compliant

[16:33:09.0000] <GPHemsley>
so somewhere down the line, that 16 sticks around

[16:33:22.0000] <GPHemsley>
compare: https://quuz.org/url/liveview.html#http://0x10000000/test

[16:33:47.0000] <GPHemsley>
which is indeed 16.0.0.0

[16:44:50.0000] <GPHemsley>
it seems jsdom/whatwg-url doesn't have unit tests :/

[16:57:52.0000] <Sebmaster>
GPHemsley: it imports web platform tests

[16:59:29.0000] <GPHemsley>
yeah, but that only tests the endpoints


2017-06-12
[22:55:07.0000] <MikeSmith>
JakeA: when you are around I want to ask you about what days are best for Service Workers meeting at TPAC

[22:55:23.0000] <MikeSmith>
I am talking with the W3C meeting planners about the schedule

[22:55:44.0000] <MikeSmith>
the choice is either Monday and Tuesday or Thursday and Friday

[22:57:49.0000] <MikeSmith>
I think the Web Components discussions are scheduled for Monday, so that suggests we should either try to get the SW room for Thursday and Friday, or else ask that the Web Components discussions be rescheduled for Thursday and Friday so that we could do Monday and Tuesday, if that turns out to be preferable

[23:08:00.0000] <GPHemsley>
oh, I see what the problem is here... if jsdom/whatwg-url throws a 'TypeError: Invalid URL', the Live URL Viewer doesn't blank out the other fields from the previous run, thus resulting in weird results and a likely mismatch with the browser

[23:08:49.0000] <GPHemsley>
I think the real problem may be that jsdom/whatwg-url is throwing at all

[23:09:12.0000] <GPHemsley>
"A validation error

[23:09:12.0000] <GPHemsley>
indicates a mismatch between input and valid input. User agents, especially conformance checkers, are encouraged to report them somewhere. "

[23:09:24.0000] <GPHemsley>
"A validation error does not mean that the parser terminates. Termination of a parser is always stated explicitly, e.g., through a return statement. "

[23:14:26.0000] <GPHemsley>
filed https://github.com/jsdom/whatwg-url/issues/92

[23:36:41.0000] <zcorpan>
igrigorik: (I figured something out for the <hr> thing, https://bugs.chromium.org/p/chromium/issues/detail?id=728499#c9 )

[01:37:08.0000] <JakeA>
MikeSmith: avoiding clashing with security stuff would be great too. Other than that, I don't mind which day.

[01:41:59.0000] <MikeSmith>
JakeA: OK

[01:42:12.0000] <MikeSmith>
/me checks webappsec days

[01:43:17.0000] <MikeSmith>
JakeA: so yeah WebAppSec meets Monday-Tuesday https://www.w3.org/2017/11/TPAC/Overview.html#Schedule

[01:43:37.0000] <MikeSmith>
thus I will ask for Thursday-Friday

[05:28:01.0000] <zcorpan>
Domenic: MikeSmith: sorry for confusion with <menu>. I commented in the spec PR when I meant to comment in the wpt PR, and figured we should wait with merging either PR until we have heard something from mozilla folks

[05:28:59.0000] <MikeSmith>
ah OK

[09:32:43.0000] <Domenic>
Oh awesome zcorpan that you got Chrome to update for the <hr> spec change. That makes me hopeful about further UA stylesheet alignment.

[10:02:05.0000] <smaug>
Domenic: I thought blink was implementing context menu

[10:02:14.0000] <smaug>
perhaps plans changed

[10:02:21.0000] <Domenic>
smaug: they were, then plans changed, yeah :(

[10:02:37.0000] <Domenic>
https://bugs.chromium.org/p/chromium/issues/detail?id=87553&desc=2#c64

[10:04:45.0000] <Domenic>
If Mozilla believes this feature is valuable, maybe the right thing to do is find someone at Mozilla to move it into some other spec repo (WICG?) and keep the code... Certainly Blink implements a lot of single-vendor features via that route...


2017-06-13
[08:22:16.0000] <wanderview>
JakeA: ping

[08:23:34.0000] <wanderview>
JakeA: is there a reason we don't exposed the "parsed" internal state as a ServiceWorkerState enum value?

[08:23:45.0000] <wanderview>
https://w3c.github.io/ServiceWorker/#dfn-state

[08:29:19.0000] <wanderview>
JakeA: I wrote a spec issue: https://github.com/w3c/ServiceWorker/issues/1162

[09:08:25.0000] <gsnedders>
If someone wants a: fast, embedded in Python, HTML parser, what should they use? Neither Gumbo nor html5ever support character encoding stuff, so I don't know what's recommendable?

[11:20:16.0000] <jgraham>
gsnedders: No idea, but presumably servo has some encoding support somehow

[11:20:43.0000] <jgraham>
so html5ever should be able to be persuaded to do something meaningful

[11:43:14.0000] <gsnedders>
jgraham: https://github.com/servo/servo/issues/6414 implies not

[11:45:35.0000] <jgraham>
Maybe not then. Looks like it might be somewhat supported at least


2017-06-14
[17:27:28.0000] <MikeSmith>
wow, Blink/Chrome style guidelines recommend (prohibit in some cases?) against use of `const`? because of design limitations in V8 it seems

[17:29:56.0000] <MikeSmith>
https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/MJhTok8Usr8/XCrkisaBBQAJ

[17:30:02.0000] <MikeSmith>
> In a recent CL, I was told that the DevTools still do not use const and existing usage is being removed due to V8 deoptimization concerns.

[01:57:28.0000] <zcorpan>
Is it possible to have a wiki page redirect to an external url? And how do I edit the links in the sidebar?

[02:38:23.0000] <strupo>
zcorpan: for  linking to an external URL, see https://en.wikipedia.org/wiki/Wikipedia:Tutorial/Wikipedia_links#External_links_section

[02:39:05.0000] <strupo>
for editing the sidebar, just click the "edit" link on top of the page, and locate where the sidebar is to edit it

[02:39:52.0000] <zcorpan>
strupo: ideally I want the page to redirect, not just show a link

[02:40:17.0000] <strupo>
Well, I don't know if you can do that

[02:40:25.0000] <zcorpan>
ok

[02:40:43.0000] <strupo>
It can redirect to another wiki article, but to an external URL... I don't think so.

[02:42:27.0000] <zcorpan>
clicking edit gets me to https://wiki.whatwg.org/index.php?title=Main_Page&action=edit but still don't see how to edit the "Code of Conduct" link in the left-hand sidebar

[02:44:50.0000] <strupo>
I think that's indepedent of which article you're seeing now

[02:45:33.0000] <zcorpan>
maybe I don't have editInterface permission. https://www.mediawiki.org/wiki/Manual:Interface/Sidebar

[02:49:01.0000] <GPHemsley>
https://wiki.whatwg.org/wiki/MediaWiki:Sidebar

[02:50:03.0000] <GPHemsley>
zcorpan: I've made you an admin

[02:50:18.0000] <zcorpan>
GPHemsley: thanks!

[02:50:54.0000] <GPHemsley>
there's probably some other folks around here who should have those rights

[02:51:05.0000] <GPHemsley>
this list seems short: https://wiki.whatwg.org/index.php?title=Special:ListUsers&group=sysop

[03:53:54.0000] <hasather>
https://html.spec.whatwg.org/#dom-form-elements says “The elements IDL attribute must return an HTMLFormControlsCollection rooted at the form element…”. But `elements` also includes any elements outside the form whose form owner is the form (<input form=“”>), so “rooted at the form elements” seems wrong to me. Or am I misreading it?

[07:00:26.0000] <GPHemsley>
annevk, Domenic, Sebmaster: Is there a particular organization to the urltestdata.json file that PRs should maintain?

[07:02:49.0000] <annevk>
GPHemsley: no 😟

[07:04:29.0000] <GPHemsley>
cool, so I'll just go willy nilly

[07:09:26.0000] <GPHemsley>
annevk: How about preference for # or no # in comments?

[07:17:07.0000] <annevk>
GPHemsley: one of those for a following block is what I do

[07:18:16.0000] <GPHemsley>
well I added the comment string for the blocks, sure

[07:18:23.0000] <GPHemsley>
but some of them use a preceding #

[07:18:34.0000] <GPHemsley>
I opted not to, since it seems redundant

[07:44:28.0000] <GPHemsley>
https://github.com/w3c/web-platform-tests/pull/6238

[07:46:49.0000] <nox>
GPHemsley: Out of curiosity, what's the purpose of writing "\u003E" rather than just >?

[07:47:37.0000] <GPHemsley>
the spec is explicit about bytes/code points, so this make it clear that they're there

[07:49:06.0000] <nox>
GPHemsley: But the parser won't ever see \u003E.

[07:49:20.0000] <GPHemsley>
I'm aware

[07:49:25.0000] <GPHemsley>
that's for the humans

[07:49:38.0000] <nox>
As a human I would rather read > than \u003E.

[07:54:12.0000] <GPHemsley>
and as a human, you are able to easily identify and distinguish between >›〉⟩〉?

[07:54:36.0000] <nox>
https://irccloud.mozilla.com/file/HNAyCCdJ/Capture%20d%E2%80%99e%CC%81cran%202017-06-14%20a%CC%80%2016.54.27.png

[08:01:44.0000] <GPHemsley>
uh huh, and which one is the one relevant to the test?

[08:54:07.0000] <nox>
GPHemsley: The first one. I wrote it just above soit was easy to distinguish it.

[08:54:44.0000] <nox>
I just don't see how that is an argument against a literal >, which is the obvious one. You wouldn't argue against writing a 'a' because it could be Latin or Cyrillic, would you?

[08:55:48.0000] <nox>
In the end, none of the tests actually show which character it is about, so as a human I have to look up the characters somewhere to know what the test is checking for.

[08:56:36.0000] <nox>
none of the expectations*

[09:18:17.0000] <GPHemsley>
I mean, I can change it if that's the consensus

[09:18:22.0000] <Domenic>
In case hasather comes back: that gives the definition of the elements IDL attribute, so since the definition says it's rooted at the form element, then no, elements cannot contain any elements outside the form.

[09:18:48.0000] <GPHemsley>
but I did it deliberately to highlight what it was testing: "If byte is less than 0x21 (!), greater than 0x7E (~), or is 0x22 ("), 0x23 (#), 0x3C (<), or 0x3E (>), append byte, percent encoded, to url’s query. "

[09:18:49.0000] <Domenic>
GPHemsley: nox: my opinion is it's up to the test author; I try not to let stylistic things get in the way of making authoring tests easy.

[09:19:13.0000] <nox>
Would be nice to give these tests a name then.

[09:19:47.0000] <GPHemsley>
'Percent-encoded query and fragment' is the name

[10:57:55.0000] <Domenic>
hsivonen: I'm willing to devote some time to helping you land WPTs for encoding (including r12a's tests) if you can provide all the domain expertise. E.g. if you want to provide diffs to r12a's pull requests I can apply them and press the merge button.

[11:47:16.0000] <gsnedders>
Domenic, hsivonen: I can also spend some time reviewing them or changes to them, but last I looked I got lost in complexity

[14:16:22.0000] <Domenic>
tobie: https://github.com/heycam/webidl/pull/323 is ready to merge BTW :)

[14:18:42.0000] <tobie>
Domenic: yeah, I got started on adding tests for it and wanted to land both together, but the testing tool a little longer than expected.

[14:18:58.0000] <tobie>
Domenic: https://github.com/w3c/web-platform-tests/pull/6246

[16:49:22.0000] <smaug>
https://html.spec.whatwg.org/multipage/semantics.html#attr-link-as

[16:49:32.0000] <smaug>
doesn't that mean that .as can be "featch"

[16:55:36.0000] <Domenic>
smaug: no. https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:enumerated-attribute

[16:56:05.0000] <smaug>
so?

[16:56:32.0000] <smaug>
"A potential destination is "fetch" or a destination which is not the empty string. "

[16:56:42.0000] <smaug>
er

[16:56:47.0000] <smaug>
fetch

[16:56:57.0000] <smaug>
that was typo, fetch, not featch

[16:57:04.0000] <Domenic>
oh. Then yes.

[16:57:31.0000] <smaug>
just reviewing some code and for some reason it returned "" when content attribute was "fetch"


2017-06-15
[18:46:55.0000] <GPHemsley>
oy, what a bulky test suite this is

[23:45:14.0000] <ondras>
a quick question -- how does a XHR interact with the content-disposition:attachemnt response header?

[23:46:49.0000] <MikeSmith>
/me XhmikosR howdy

[02:45:29.0000] <smaug>
Any folks from React here?

[02:47:01.0000] <hsivonen>
Domenic, gsnedders: https://github.com/whatwg/encoding/issues/57#issuecomment-308654813 indicates we should wait for r12a to address my claims of test suite bugs

[02:47:28.0000] <hsivonen>
Domenic: I commented LGTM to merge EUC-KR, Shift_JIS and Big5 tests

[02:47:32.0000] <hsivonen>
Domenic: thanks

[06:04:52.0000] <smaug>
#join #react

[06:04:57.0000] <smaug>
oops

[09:44:45.0000] <Domenic>
Twitter does not like square logos anymore... https://twitter.com/storagestandard

[09:57:47.0000] <hasather>
Domenic: Hey. I saw http://logs.glob.uno/?c=freenode%23whatwg&s=14+Jun+2017&e=14+Jun+2017#c1030325 `elements` does include form controls outside of the form though, test e.g. data:text/html,<form id=a></form><input form=a><script>alert(a.elements.length)</script>

[09:58:17.0000] <hasather>
is the spec wrong there? (The original question was http://logs.glob.uno/?c=freenode%23whatwg&s=14+Jun+2017&e=14+Jun+2017#c1030301)

[10:08:38.0000] <Domenic>
hasather: well, it looks like it's an interop issue; Edge at least gives 0 for that test case, although FIrefox and Chrome do give 1. Would you mind opening a spec bug so we can collect opinions from implementers?

[10:15:57.0000] <hasather>
Domenic: Edge doesn't support the 'form' attribute yet, see https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/7327649-add-support-for-the-form-attribute. I'll file a bug on the spec. Thanks.

[10:16:16.0000] <hasather>
Domenic: Actually noticed this when implementing the 'form' attribute in jsdom. :)

[10:16:45.0000] <Domenic>
oh i see :)

[10:22:53.0000] <jsbell>
Domenic: for the big5 PR - ping me when the CI finishes if I don't notice first

[10:23:40.0000] <Domenic>
jsbell: sounds good, will do

[10:32:37.0000] <hasather>
Domenic: https://github.com/whatwg/html/issues/2764

[10:39:45.0000] <Domenic>
hasather: awesome, will look into it

[12:53:14.0000] <Domenic>
hsivonen: if the numbers at https://travis-ci.org/w3c/web-platform-tests/builds/243381522 are any indication, good job on encoding_rs performance, FF nightly is taking like 3/5 of the time of Safari and Chrome

[12:55:34.0000] <Domenic>
(Although using Travis for perf comparison is probably dubious, given how it's subject to fluctuating cloud resources)

[13:40:56.0000] <Domenic>
jsbell: https://github.com/w3c/web-platform-tests/pull/6254 ready for review

[14:07:16.0000] <wanderview>
Domenic: is it safe to use async functions in WPT now?

[14:07:30.0000] <Domenic>
wanderview: yes, although Servo folks might be sad.

[14:07:58.0000] <wanderview>
Domenic: if spidermonkey has async functions, won't servo have them too?

[14:08:15.0000] <Domenic>
wanderview: servo updates spidermonkey rarely, if ever...

[14:08:31.0000] <wanderview>
Domenic: well, they can remedy it if they want then

[14:08:40.0000] <Domenic>
Indeed

[14:08:52.0000] <Domenic>
They might be sad, but it's not a blocker

[14:08:57.0000] <wanderview>
Domenic: no one is going to want to run this test anyway

[14:09:11.0000] <wanderview>
/me is testing about:blank replacement interaction with service workers.

[14:09:49.0000] <Domenic>
good times

[15:11:44.0000] <jyasskin>
Do folks have a favorite Jabber client? It looks like that's what the IETF uses...

[15:14:13.0000] <Domenic>
I used to use Trillian, but I can't imagine it's kept up with the times...

[16:08:14.0000] <jsbell>
Domenic: done

[16:11:51.0000] <jsbell>
Domenic: thanks for picking the tests up!

[16:17:03.0000] <Domenic>
:) they just seemed so close, and it was a shame to let them languish


2017-06-16
[17:28:11.0000] <GPHemsley>
Domenic: Hey, did jsdom/whatwg-url pass all those new tests?

[17:29:11.0000] <Domenic>
GPHemsley: yep

[17:29:16.0000] <GPHemsley>
cool

[17:29:30.0000] <Domenic>
https://github.com/jsdom/whatwg-url/commit/e6c485ee0f516ca2467fc87e0d240d8363a2cb8a

[17:31:05.0000] <GPHemsley>
oh, very nice

[17:32:13.0000] <GPHemsley>
Domenic: I assume you are aware of this but are not using it because of the commit hash thing? http://w3c-test.org/url/urltestdata.json

[17:32:22.0000] <Domenic>
GPHemsley: yeah

[17:32:27.0000] <GPHemsley>
k

[17:32:39.0000] <GPHemsley>
I was doing it the same way you were, link-wise, and then I found that

[17:42:19.0000] <Domenic>
Yeah, seems important to check in a last-known-passing revision if I want new contributors to get a passing `npm test` on checkout

[04:23:54.0000] <hsivonen>
Domenic: thanks. for Web workloads, encoding_rs decodes faster than ICU

[04:24:44.0000] <hsivonen>
Domenic: I haven't had the time to extract the non-ICU UTF-8 and windows-1252 decoders from Blink or WebKit to test those in isolation

[04:25:19.0000] <hsivonen>
Domenic: however, with TextDecoder, the overhead in Firefox and Chrome is pretty bad

[04:25:41.0000] <hsivonen>
Domenic: in Firefox can be larger than the time spent in the decoder

[04:26:03.0000] <hsivonen>
Domenic: I'd estimate that to be the case for Chrome, too

[07:10:49.0000] <JakeA>
MikeSmith: Is it possible to *not* have the TPAC service worker meeting on Monday?

[07:43:54.0000] <MikeSmith>
JakeA: you mean only have it one day?

[07:44:17.0000] <JakeA>
MikeSmith: Was the current plan to have it on Monday & Tuesday?

[07:45:16.0000] <MikeSmith>
it is now, because the W3C meeting planners have been trying to fit everything together, and that it where it ended up

[07:46:00.0000] <MikeSmith>
partly because the shadow DOM and custom elements meetings are now scheduled for Thursday and Friday

[07:46:32.0000] <MikeSmith>
and that seemed like the main thing we did not want to conflict with

[07:46:56.0000] <JakeA>
Ok, I'll check to see if we need both days & get back to you

[07:47:26.0000] <JakeA>
Our usual meetings are two days, but we only had one day at the last TPAC

[07:47:38.0000] <MikeSmith>
OK

[08:48:23.0000] <JakeA>
MikeSmith: Yeah, let's just do the Tuesday

[08:48:33.0000] <JakeA>
We'll ad-hoc more if we need to

[09:24:40.0000] <zsoc>
So according to the fetch spec here, for "To append:" https://fetch.spec.whatwg.org/#terminology-headers - it would seem that if header 'x-foo' already exists, and I want to append 'X-Foo': 'bar', my `header list` would end up with both, ala: { 'x-foo': 'bar', 'X-Foo': 'bar' } ... can that possibly be the spec here or am I misunderstanding?

[09:25:25.0000] <zsoc>
Nope, I realized I misread the moment after I typed that out heh... my bad, ty

[10:35:11.0000] <MikeSmith>
JakeA: OK

[11:33:30.0000] <domfarolino>
Hmm is whatwg.org down right now?

[11:51:12.0000] <cgbrewster>
domfarolino: its down for me :(

[12:31:49.0000] <Domenic>
blehhhhhh

[12:32:11.0000] <Domenic>
crack team of sysadmins alerted

[12:53:42.0000] <smaug>
Domenic: is what.org down or something ?

[12:53:51.0000] <Domenic>
Apparently, see above...

[12:54:07.0000] <smaug>
/me looks at the logs

[12:56:58.0000] <Domenic>
Server is sshable, probably a Dreamhost problem :-/

[13:01:24.0000] <Domenic>
Back

[13:04:26.0000] <domfarolino>
:)

[15:37:17.0000] <tobie>
Domenic: quite happy I'm actually implementing tests for [Default] toJSON() in idlharness. Helped uncover some corner cases around supplemental interfaces I wasn't aware of.

[15:38:33.0000] <tobie>
Domenic: in you add an interface J to https://s3.amazonaws.com/pr-preview/tobie/webidl/tojson.html#example-tojson-default-inheritance-and-mixins, and have `H implements J`, then that also gets accounted for with the current algorithm.

[15:39:42.0000] <tobie>
Domenic: I'm not too sure if that's a feature, a bug, or something we shouldn't care about until we add mixins

[15:41:58.0000] <tobie>
Domenic: (I'm tempted to wait for mixins)

[15:47:33.0000] <Domenic>
Heh, yeah... a feature I guess, but not something to worry about

[15:54:02.0000] <tobie>
Domenic: Think I'll be tackling mixins next, actually.

[16:38:38.0000] <jugglinmike>
tobie: Does WebIDL support comparing dictionaries for equivalence?

[16:39:49.0000] <jugglinmike>
I don't see anything to that effect in https://heycam.github.io/webidl/#idl-dictionaries , but it may be defined elsewhere

[16:42:36.0000] <jugglinmike>
I guess that's not hard to express in English, though. Maybe I can just write "If the value of each member of dictionary A is the same as the value of the corresponding member of dictionary B [...]"

[16:42:44.0000] <tobie>
jugglinmike: dictionaries aren't distinguishable, see https://heycam.github.io/webidl/#dfn-distinguishable

[16:43:09.0000] <tobie>
jugglinmike: so what's your use case?

[16:45:03.0000] <jugglinmike>
I'm working on a spec (Permissions) that supports "pending" operations, each associated with a dictionary. I would like to target that operation from another algorithm

[16:46:13.0000] <tobie>
oh, you can use infra notation to help with this

[16:47:00.0000] <jugglinmike>
Happy to educate myself. Could you point me in the right direction?

[16:49:37.0000] <tobie>
jugglinmike: https://infra.spec.whatwg.org/#maps (as described just below https://heycam.github.io/webidl/#ref-for-dfn-dictionary-member-default-value-2)

[16:49:46.0000] <tobie>
(was looking for the links)

[16:50:09.0000] <tobie>
jugglinmike: but you'll have to resort to prose

[16:52:25.0000] <jugglinmike>
got it

[16:52:26.0000] <jugglinmike>
thanks!


2017-06-17
[09:15:24.0000] <GPHemsley>
so... who logged in to @mimesniff yesterday?

[09:30:50.0000] <Domenic>
GPHemsley: that was me; was testing stuff to try to fix https://github.com/whatwg/meta/issues/28

[09:31:32.0000] <GPHemsley>
/me grumbles something about Twitter circular icons

[13:45:46.0000] <GPHemsley>
does web-platform-tests have any tests for "state override" or "encoding override"?

[13:46:00.0000] <GPHemsley>
(in the URL parser)

[13:50:59.0000] <Domenic>
GPHemsley: yeah, the setter tests

[13:51:04.0000] <Domenic>
for "state override"

[13:51:06.0000] <Domenic>
Not sure about encoding...

[13:51:54.0000] <Domenic>
I guess these test encoding https://github.com/w3c/web-platform-tests/blob/master/encoding/legacy-mb-japanese/shift_jis/sjis-encode-href-errors-han.html

[13:52:14.0000] <Domenic>
And https://github.com/w3c/web-platform-tests/blob/master/encoding/legacy-mb-japanese/shift_jis/sjis-encode-href.html

[13:56:20.0000] <GPHemsley>
hmm, ok

[13:56:54.0000] <GPHemsley>
any idea which parts of the HTML spec use these parameters?

[13:57:10.0000] <GPHemsley>
"The encoding override argument is a legacy concept only relevant for HTML. The url and state override arguments are only for use by various APIs."

[13:57:37.0000] <GPHemsley>
I guess that might be an easy search in HTML

[13:59:48.0000] <GPHemsley>
ooh, the toascii.json is gonna be important

[13:59:56.0000] <GPHemsley>
I'm having trouble with my UTS46 library

[14:19:12.0000] <Domenic>
Yeah we don't have that working in jsdom/whatwg-url yet either

[14:19:28.0000] <Domenic>
But someone did a massive PR that should help https://github.com/Sebmaster/tr46.js/pull/11

[16:07:41.0000] <GPHemsley>
Domenic: That's cool; my problem is that the upstream Perl library hasn't been particularly respondent to my PR. I may decide to rewrite from scratch instead. :/

[16:10:43.0000] <GPHemsley>
...and now I need to figure out why I didn't get an e-mail about your comment on the related whatwg/url ticket

[16:13:01.0000] <GPHemsley>
hmm... I wonder if it has anything to do with the fact that it's a closed ticket

[16:15:20.0000] <GPHemsley>
TIL GitHub has a concept of Projects

[16:15:40.0000] <GPHemsley>
AKA Kanban boards

[16:30:02.0000] <GPHemsley>
hmm, it does appear that the notifications stopped after the ticket was closed

[16:30:03.0000] <GPHemsley>
odd

[16:30:13.0000] <GPHemsley>
that sounds like a GitHub bug

[16:33:34.0000] <GPHemsley>
..took a little bit to come, so now I'm just confused


2017-06-18
[19:54:17.0000] <GPHemsley>
oh, here's a question... are validation errors ever used by anybody?

[19:54:43.0000] <GPHemsley>
by which I mean, do they have an effect on web compatibility or anything of that nature?

[20:29:12.0000] <GPHemsley>
I have a question about WebIDL and constructors... does an interface not have a constructor unless you explicitly say it does? how do you initialize an interface without a constructor?

[20:40:47.0000] <GPHemsley>
is it a matter of `Foo()` vs. `new Foo()`?

[20:41:22.0000] <GPHemsley>
I see the dependence on ECMAScript gets stronger the deeper you go

[03:28:33.0000] <profsimm>
Sorry for the silly question but what's the official opinion about why WHATWG calls it "URL" and not URI?

[03:43:16.0000] <tobie>
GPHemsley: interfaces don't have a constructor unless you specify one using the constructor extended attribute

[03:43:52.0000] <tobie>
GPHemsley: so calling both Foo() and new Foo() will throw a TypeError in that case

[03:46:05.0000] <tobie>
GPHemsley: see step 1.1 of  the algorithm described in https://heycam.github.io/webidl/#interface-object

[03:46:24.0000] <Philip`>
profsimm: The distinction between URL/URI/IRI is not useful in practice and is confusing, and URL is the term that almost everyone in the world uses so it seemed best to standardise on that one

[03:47:15.0000] <profsimm>
Philip`: thanks

[03:47:27.0000] <Philip`>
profsimm: See e.g. https://url.spec.whatwg.org/#goals

[03:47:52.0000] <Philip`>
profsimm: (Also it's what I remember from discussions on the mailing lists like a decade ago)

[03:48:00.0000] <tobie>
GPHemsley: Note that as per step 1.2 of the same algorithm, Foo() (without the new constructor) throws in all cases.

[03:49:14.0000] <tobie>
GPHemsley: that is, even when a Constructor extended attribute is present.

[04:14:50.0000] <profsimm>
Philip`: is WHATWG the HTML spec which browsers follow most closely?

[04:14:55.0000] <profsimm>
Philip`: compared to W3C

[04:26:00.0000] <gsnedders>
profsimm: yes

[04:26:46.0000] <profsimm>
gsnedders: aren't browser makers involved in W3C as well?

[04:28:41.0000] <gsnedders>
profsimm: not with the HTML specification; it was merged into a larger WG to try and get them involved they haven't

[08:07:18.0000] <GPHemsley>
tobie: Thanks for clarifying. :)

[08:17:38.0000] <tobie>
GPHemsley: np.

[08:22:05.0000] <GPHemsley>
tobie: Do you know where the semantics of getters and setters are defined? Is that in WebIDL or ECMAScript or somewhere else?

[08:22:21.0000] <GPHemsley>
DOM, maybe?

[08:22:56.0000] <GPHemsley>
oh wait, I think I found them

[09:51:26.0000] <gsnedders>
GPHemsley: WebIDL and ES

[09:51:36.0000] <gsnedders>
GPHemsley: depending on what getters and setters you're talking about

[13:31:18.0000] <GPHemsley>
gsnedders: Ultimately, I just wanted to know if setters return the new value of the attribute, and it seems the answer is yes.

[13:37:35.0000] <gsnedders>
GPHemsley: that would be the normal ES behaviour, and I don't think it can be avoided

[13:44:26.0000] <GPHemsley>
gsnedders: I wasn't trying to avoid it, I was trying to replicate it.

[13:46:14.0000] <gsnedders>
GPHemsley: I just mean I think it falls from the definition of the = operator in ES

[13:46:38.0000] <GPHemsley>
well I'm not implementing ES, and some things take ES behavior for granted

[13:46:47.0000] <GPHemsley>
so I was just trying to approximate


2017-06-19
[00:55:09.0000] <nox>
TabAtkins: When some spec says <foo> && <bar>, unless stated otherwise the serialisation by default should be <foo> <bar>, right?

[00:57:15.0000] <nox>
TabAtkins: Asking because https://drafts.fxtf.org/filters/#funcdef-filter-drop-shadow says <length>{2,3} <color>?, but every UA I tried serialises the colour first.

[02:12:12.0000] <MikeSmith>
TabAtkins: getting long delays for responses from https://drafts.csswg.org/

[02:14:09.0000] <MikeSmith>
on the order of 20 seconds just to get the start of the response

[02:14:45.0000] <MikeSmith>
before the content even can begin loading

[02:21:45.0000] <MikeSmith>
wondering if maybe it has some rate limiting in place and I’m getting tarpitted

[07:51:00.0000] <TabAtkins>
nox: Yes to your first question.  But to your second question, there's no && in there; putting a color first shouldn't even parse, per spec.

[07:51:11.0000] <nox>
TabAtkins: Oh right.

[07:51:32.0000] <TabAtkins>
MikeSmith: Hmm, dunno about that. plinss is the one to bug, tho.

[07:51:40.0000] <nox>
TabAtkins: What happens I think is that both UA probably just parse that stuff like box-shadow and then reject values with inset and spread.

[07:51:48.0000] <TabAtkins>
Probably, yeah.

[07:51:57.0000] <nox>
TabAtkins: But I think the spec should say '&&', because they both serialise the color first.

[07:52:06.0000] <nox>
TabAtkins: Should I file an issue?

[07:52:11.0000] <TabAtkins>
yes plz

[07:52:20.0000] <nox>
TabAtkins: Will do.

[07:52:27.0000] <nox>
TabAtkins: Another question:

[07:52:41.0000] <nox>
TabAtkins: with <number-percentage>, calc(10 + 10%) should be allowed, right?

[07:52:50.0000] <TabAtkins>
Yup.

[07:52:53.0000] <TabAtkins>
Oh wait.

[07:53:09.0000] <nox>
As opposed to <number> | <percentage>.

[07:53:20.0000] <TabAtkins>
No, we just disallowed that. I need to go edit some things.

[07:53:26.0000] <nox>
Ok.

[07:53:34.0000] <nox>
TabAtkins: Are all such mixing disallowed except for <length>, now?

[07:53:35.0000] <TabAtkins>
(Required to be disallowed to make calc unit algebra work sanely.)

[07:53:43.0000] <TabAtkins>
No, all units are fine.

[07:53:50.0000] <TabAtkins>
Just number+percent that's problematic.

[07:53:51.0000] <nox>
But no browsers care, right?

[07:54:05.0000] <TabAtkins>
Nobody implements a number+percent calc yet, no.

[07:54:11.0000] <nox>
I haven't seen anything allow calc(10s + 10%) or angles or whatever else but lengths.

[07:54:32.0000] <TabAtkins>
Uh, probably so.

[07:54:41.0000] <TabAtkins>
Don't remember any off the top of my head.

[13:33:00.0000] <jugglinmike>
Bikeshed question here: when I write `[=fetch/status=]`, Bikeshed complains:

[13:33:01.0000] <jugglinmike>
LINK ERROR: No 'dfn' refs found for 'status' with for='fetch'.

[13:33:02.0000] <jugglinmike>
<a data-link-type="dfn" data-lt="status" data-link-for="fetch">status</a>

[13:33:47.0000] <jugglinmike>
but when I run `bikeshed refs --spec fetch --text status`

[13:34:02.0000] <jugglinmike>
the results include:

[13:34:03.0000] <jugglinmike>
status:    current

[13:34:04.0000] <jugglinmike>
for:       []

[13:34:04.0000] <jugglinmike>
level:     1

[13:34:04.0000] <jugglinmike>
url:       https://fetch.spec.whatwg.org/#concept-status

[13:34:04.0000] <jugglinmike>
type:      dfn

[13:34:04.0000] <jugglinmike>
export:    True

[13:34:05.0000] <jugglinmike>
text:      status

[13:34:05.0000] <jugglinmike>
shortname: fetch

[13:34:06.0000] <jugglinmike>
normative: True

[13:34:06.0000] <jugglinmike>
spec:      fetch

[13:34:28.0000] <jugglinmike>
TabAtkins: or maybe Domenic: do you know what I'm doing wrong there? ^

[13:34:56.0000] <TabAtkins>
Yeah, that definition is "for" nothing. You're trying to specify the *spec* it's from, which can't be done in the shorthand.

[13:35:21.0000] <TabAtkins>
(In [=foo/bar=], it's equivalent to <a dfn for=foo>bar</a>.)

[13:36:16.0000] <jugglinmike>
Does that mean this patch is incorrect? https://github.com/w3c/ServiceWorker/pull/1144/files

[13:36:42.0000] <TabAtkins>
I don't understand the relevance of that patch.

[13:37:31.0000] <Domenic>
Isn't status supposed to be for a response, anyway?

[13:37:34.0000] <Domenic>
Not a fetch?

[13:38:10.0000] <jugglinmike>
Oh, sorry. That patch is using "WorkerGlobalScope", not the name of a spec

[13:38:54.0000] <TabAtkins>
Domenic: Yeah, I think that definition could do with a for value in the spec. A bare "status" is kinda hard to link to.

[13:39:08.0000] <Domenic>
I think it has one in the spec

[13:39:22.0000] <jugglinmike>
This is the text that was confusing me: https://github.com/w3c/ServiceWorker/blob/fa1f95c41523b7cc8de65d2ec24edb43bf9f5cc3/docs/index.bs#L2009

[13:39:27.0000] <TabAtkins>
Domenic: It does not.

[13:39:31.0000] <Domenic>
Oh, well, it depends on if you're linking to the status *type* or the property of a response

[13:39:49.0000] <Domenic>
https://fetch.spec.whatwg.org/#concept-status vs. https://fetch.spec.whatwg.org/#concept-response-status

[13:40:07.0000] <jugglinmike>
It's the latter that I want, actually

[13:40:10.0000] <TabAtkins>
jugglinmike: Yeah, that's linking to the "terminate a fetch" definition, which is for=fetch.  Unrelated to being in the Fetch spec.

[13:40:17.0000] <jugglinmike>
got it

[13:40:18.0000] <Domenic>
Yeah, then just [=response/status=]

[13:40:58.0000] <TabAtkins>
Domenic: The other status should still have a for value. Like for=http or something?

[13:41:10.0000] <jugglinmike>
Perfect! Thanks to you both

[13:41:13.0000] <Domenic>
Yeah, maybe. Unsure why disambiguating by spec is insufficient though

[13:41:26.0000] <TabAtkins>
It's sufficient, but it's hard to do so in Bikeshed's syntax. ^_^

[13:41:51.0000] <TabAtkins>
(And then you'd still need to *also* disambiguate by for value, since there are multiple "status" dfns in the spec.)

[13:43:27.0000] <Domenic>
Well, not if you use the explicit for switch ^_^

[13:43:45.0000] <TabAtkins>
Okay sure, but only you two weirdos use that. ^_^

[13:54:07.0000] <aff23>
Hello. My script is running in context of webpage say http://xyz.com. I make an xhr request to http://media.xyz.com/a.mp4 but it fails. Why is that?

[13:54:21.0000] <TabAtkins>
That's a different domain.

[13:54:30.0000] <TabAtkins>
(And thus, CORS applies.)

[13:54:41.0000] <aff23>
I am trying to understand why that fails and why does <video src = http://media.xyz.com/a.mp4 > would work then?

[13:55:23.0000] <aff23>
TabAtkins: but the browser was able to download and play the video fine (ignoring my script). So how is browser allowed to get the video then?

[13:55:24.0000] <TabAtkins>
Because <video> was implemented *just* before we realized how good of an idea it was to be strict about same-origin restrictions.

[13:56:04.0000] <TabAtkins>
And then people were already using <video> cross-origin, and so changing it would have broken too much stuff.

[13:56:50.0000] <aff23>
so you're saying CORS applies to XHR but not to <video src= ../> ?

[13:58:53.0000] <TabAtkins>
Yup. It's a dumb inconsistency that we can't get rid of.

[13:59:39.0000] <aff23>
Argh I see. So then how can browser load and play a cross domain video but I can't get access to same video via XHR?

[14:00:20.0000] <aff23>
for e.g https://html5media.info serves the video from media.html5media.info

[14:00:33.0000] <TabAtkins>
Browsers have magic powers in many ways; this isn't something built into the internet, it's just how browsers expose the data to you.  If you want to access it via XHR, you just need to set up proper CORS headers on the subdomain; there are plenty of tutorials that'll help you with that.

[14:01:08.0000] <aff23>
i can't control the subdomain..I am just injecting a script (chrome extension) to get video source and making XHR request

[14:04:28.0000] <TabAtkins>
Then you're out of luck.

[14:05:50.0000] <aff23>
so if I've understood it correctly, when browser renders page, it can access any url it wants. When I make an XHR request, it knows that origin is not the browser so it'll get the response, check headers and deny my XHR request?

[14:32:00.0000] <TabAtkins>
aff23: Yes.

[15:02:17.0000] <aff23>
TabAtkins: around?

[16:23:00.0000] <TabAtkins>
aff23: Yo?

[16:23:18.0000] <TabAtkins>
aff23: (Don't ask if you can ask: just ask, and allow people to be async in their communications.)

[16:23:57.0000] <aff23>
aff23: only you seemed active on channel so :p

[16:24:31.0000] <aff23>
TabAtkins: I was wondering..what if I send an XHR request to my own server, which performs GET request on cross-domain video and returns video data as response?

[16:25:28.0000] <TabAtkins>
Yeah, that's a pretty standard proxy setup.  It works just fine, and is common in situations like this where you can't alter the other endpoint's headers.

[16:25:37.0000] <TabAtkins>
It's like money-laundering, but for security. ^_^

[16:28:15.0000] <aff23>
haha okay..and can you point me to any spec/doc which explains how/why we can do <video src = "crossdomain.url"> ?

[16:29:04.0000] <TabAtkins>
You can do <video> because the spec *doesn't* mandate a same-origin restriction.

[16:30:37.0000] <TabAtkins>
(Tangent: the reason the proxy-thru-your-server approach is just fine, is because your server doesn't have any of the credentials that the user does.  Cookies, in particular, tend to "go along for the ride" when you make cross-origin requests, possibly giving your page access to things that the user is signed into. Your server doesn't have any of that, so assuming basic security exists, it only has access to things that it's

[16:30:37.0000] <TabAtkins>
allowed to have access to.)

[16:35:35.0000] <aff23>
aha got it TabAtkins. Yeah valid point about tangent. I read about it as well.

[16:36:05.0000] <aff23>
I am just wondering, if my server is in c++, how do I allocate size for video data? I've no way of knowing the video size in advance

[16:36:13.0000] <TabAtkins>
No clue about any of that. ^_^

[16:36:24.0000] <TabAtkins>
But dynamically-sized arrays do exist in c++

[16:36:27.0000] <aff23>
okay thanks

[16:36:43.0000] <aff23>
yeah but since I am not doing range queries, I'd have to get all the data


2017-06-20
[17:32:33.0000] <aff23>
TabAtkins: Umm, do you think I can use cross domain video data to write to canvas and use getImage to get the video's raw data?

[17:33:28.0000] <TabAtkins>
No, it taints the canvas and disables the functions that get data out.

[17:37:05.0000] <aff23>
ah okay

[17:38:44.0000] <aff23>
TabAtkins: so I believe we cannot do a video src = "crossdomain.url" and use it to render on a canvas, right/

[17:38:45.0000] <aff23>
?

[17:39:09.0000] <TabAtkins>
You can do it, you just can't pull the data out of the canvas afterwards. All you can do is display it.

[17:49:06.0000] <aff23>
hmm got it

[17:49:10.0000] <aff23>
thanks TabAtkins !

[00:15:57.0000] <ondras>
so

[00:16:11.0000] <ondras>
are uniforms/attributes somewhat shared/shareable when using multiple webgl shader programs?

[04:26:57.0000] <zcorpan_>
https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10525830/ Implement <script nomodule> is now fixed 🎉

[05:15:21.0000] <nox>
Where are the repositories for https://drafts.fxtf.org?

[05:15:35.0000] <nox>
Never mind, found them.

[05:24:55.0000] <nox>
Is there anything that can be done about drafts.csswg.org being extremely slow sometimes?

[05:25:00.0000] <nox>
Why does that happen

[05:25:01.0000] <nox>
?

[08:08:34.0000] <tobie>
nox: one solution would be to rely on GH pages instead (or on top).

[08:09:06.0000] <tobie>
nox: not sure how easy it would be to organize given the current setup.

[09:00:48.0000] <jugglinmike>
rbyers: something you said at today's meeting reminded me of this

[09:01:09.0000] <jugglinmike>
"If you’re using Word or Photoshop and it flaked out and crashed even half as much as Web pages do, you’d scream ‘this is unacceptable.’ But people expect that websites won’t work well. That needs to change."

[09:01:14.0000] <jugglinmike>
https://news.microsoft.com/stories/people/james-mickens.html

[09:02:53.0000] <rbyers>
jugglinmike: Nice, thanks.  Agreed 100%.

[09:03:04.0000] <gsnedders>
wait, Word *doesn't* crash that much? :)

[09:03:20.0000] <jugglinmike>
rbyers: Are you familiar with Mickens' work?

[09:12:46.0000] <jgraham>
Said like someone who hs never used Word, indeed

[09:13:02.0000] <jgraham>
(not saying that the web couldn't be better ofc)

[09:13:42.0000] <rbyers>
jugglinmike: No, I'm not.

[09:14:57.0000] <jugglinmike>
rbyers: He has a bunch of good papers published online. Next time you find yourself with 30 minutes to kill, I recommend https://vimeo.com/95066828

[09:15:39.0000] <rbyers>
FWIW, my impression is that word got miles better by relying heavily on telemetry, crash reporting etc.  Something the web still lacks in many ways IMHO (trying to fix this a bit with the Reporting API: https://github.com/wicg/reporting)

[09:16:05.0000] <rbyers>
jugglinmike: Thanks, added to my watch list.

[09:19:17.0000] <jgraham>
Out of all the theories about the web I heard "too little tracking of user activity" is one of the oddest ;p

[09:26:38.0000] <Domenic>
"FWIW, my impression is that word got miles better by relying heavily on telemetry, crash reporting etc." this seems very accurate from what I remember reading during the 00s

[09:28:46.0000] <jgraham>
(but more seriously, presumably the underlying reason that office or whatever got better is because 1) someone in a position of influence decided that they ought to, and 2) because they had the resources to pull it off. For random websites the main blocker is presumably 1&2 rarely coincide. Like the web could be vastly better for most users tomorrow if sites didn't have requests to tens of different third

[09:28:52.0000] <jgraham>
party sites for ads, tracking, &c. and weren't multiple Mb in size. But empirically "no-one" cares about this enough to forego whatever the benefits of all those requests are)

[10:43:31.0000] <TabAtkins>
nox: Yesterday the server was hit by a bunch of bad-acting spiders that were ignoring robots.txt, apparentlyh.

[13:23:55.0000] <jeffh>
is Domenic Denicola hereabouts?

[13:24:04.0000] <Domenic>
/me WAVES

[13:24:16.0000] <jeffh>
/me was wonderin' if that was u

[13:24:39.0000] <jeffh>
ok, ask u questions here in  public or elsewheres (ifn u have time) ?

[13:24:45.0000] <Domenic>
Here works!

[13:25:08.0000] <jeffh>
wrt https://w3c.github.io/webauthn/#getAssertion ....

[13:25:31.0000] <jeffh>
1) how do we know it is doing all its work on the background thread already ?

[13:26:06.0000] <jeffh>
my guess: because it is called from the body of a promise, which by definition is on the/a background thread (?)

[13:26:08.0000] <Domenic>
jeffh: you call it from https://w3c.github.io/webappsec-credential-management/#abstract-opdef-request-a-credential step 5.8, right?

[13:27:40.0000] <jeffh>
ok, yes, got it.

[13:29:48.0000] <KiChjang>
are there any specification documents that are standardizing VR stuff?

[13:30:18.0000] <TabAtkins>
/me https://w3c.github.io/webvr/

[13:30:18.0000] <jeffh>
2) "It never returns actual JS objects or messes with actual JS globals. Instead it returns the necessary data to create one"  -- so this implies submitting an issue on credman to receive the "necessary data" and create the JS object(s) ?   Or define in webauthn a callable alg that does it that credman can invoke from the main thread?

[13:30:23.0000] <wanderview>
JakeA: any chance you are around?

[13:36:51.0000] <jeffh>
Domenic: when you say "posting a task", is that done in spec text by just saying "[=in parallel=]" ?

[13:41:09.0000] <Domenic>
jeffh: no, those are kind of the opposite :)

[13:41:27.0000] <Domenic>
"in parallel" means "go to the background thread and run this spec text in parallel with the main thread"

[13:41:48.0000] <Domenic>
"queue a task" is done via [=queue a task=]. I apologize if I used "post" confusingly instead of "queue"

[13:42:02.0000] <jeffh>
ah!

[13:42:18.0000] <jeffh>
/me <-- fairly literally-minded :-}

[13:42:33.0000] <Domenic>
Oh, wow, I didn't realize I was looking at two separate specs

[13:42:40.0000] <Domenic>
That explains why Ctrl+F wasn't working as expected

[13:43:33.0000] <Domenic>
Given the spec split I think your latter, of a callable algorithm in webauthn, makes some sense. Now it is looking very similar to my "success steps"/"failure steps" setup in https://github.com/WebAssembly/design/pull/1093.

[13:45:02.0000] <jeffh>
s/latter/latter idea/ ?

[13:45:19.0000] <Domenic>
yeah

[13:46:01.0000] <jeffh>
ok, thx!  so I'll try to ascertain the relevant portions of https://github.com/WebAssembly/design/pull/1093

[14:08:28.0000] <aff23>
Hello. How does browser determine difference between video.src = "crossdomain.url" request and xhr request for "crossdomain.url" ?

[14:08:48.0000] <aff23>
because one works fine and is allowed by browser while other isn't

[14:19:14.0000] <aff23>
TabAtkins or anyone?

[14:19:58.0000] <TabAtkins>
They're different APIs?

[14:26:27.0000] <aff23>
TabAtkins: any documentation you can point me to?

[14:28:01.0000] <TabAtkins>
Not sure what you're looking for. The browser is the thing that implements the APIs. It doesn't have to tell anything apart, they're just two different pieces of code.

[14:28:44.0000] <TabAtkins>
One gets called when you set video.src, and knows that cross-domain is okay; another gets called when you make an XHR.

[14:29:20.0000] <aff23>
ah got it TabAtkins .

[14:29:41.0000] <aff23>
one more question, if I've a static video url, does the browser download the entire video at once?

[14:33:49.0000] <TabAtkins>
That's up to the browser.

[14:34:35.0000] <aff23>
From the network tab, I can see only 1 request

[14:46:00.0000] <jeffh>
Domenic:  this queues a task back on "the main thread": "queue a task on the networking task source to run ...."   ?

[14:46:27.0000] <Domenic>
jeffh: yep!

[14:46:43.0000] <jeffh>
so "networking task source" == "main thread" ?

[14:47:17.0000] <Domenic>
Nah, "queue a task" is main thread. "networking task source" means "run this after any other networking-related things already queued from background threads"

[14:47:38.0000] <Domenic>
But e.g. with no order constraints relative to DOM manipulation or user interaction

[14:47:54.0000] <Domenic>
https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources

[14:47:57.0000] <jeffh>
uh.... this could all be explained better in https://html.spec.whatwg.org/

[14:48:13.0000] <jeffh>
the term "main thread" appears only once in passing....

[14:48:37.0000] <Domenic>
Yes, fair. It's obscured by trying to be agnostic to your actual implementation strategy (e.g. green-threads or async I/O or similar)

[14:48:49.0000] <Domenic>
I can work on a "for other spec writers" section

[14:49:45.0000] <jeffh>
yeah, that'd be helpful.   so, "relevant event loop" == "main thread" ?

[14:50:32.0000] <Domenic>
yeah

[14:51:08.0000] <jeffh>
ah ok, thx.

[14:52:19.0000] <jeffh>
so "in parallel" means instantiating a new "background" thread, and "queue a task" means on the "relevant event loop" aka "main thread"...?

[14:52:56.0000] <Domenic>
queue a task in theory takes an argument on which event loop to queue the task on. But it is usually obvious unless you are writing a spec that interacts with workers or something, so that is often omitted

[14:53:12.0000] <Domenic>
E.g. you could in theory queue a task on some worker's event loop

[14:53:13.0000] <jeffh>
ok thx

[14:53:19.0000] <jeffh>
ah

[15:22:28.0000] <Domenic>
Now I need a minimal example of a function that does sync work, then async work, then some sync work...

[15:22:34.0000] <Domenic>
Eh, I got it

[15:24:13.0000] <Domenic>
Maybe I don't got it


2017-06-21
[01:33:11.0000] <JakeA>
wanderview: I am now!

[02:32:18.0000] <zcorpan>
TabAtkins: ping about fingerprint :-)

[06:30:59.0000] <wanderview>
JakeA: any thoughts on this? https://github.com/w3c/ServiceWorker/issues/1163

[06:32:56.0000] <JakeA>
wanderview: I assume it follows the same weird replacement rules as about:blank iframes?

[06:33:02.0000] <JakeA>
If so, yeah I agree with you

[06:33:27.0000] <wanderview>
JakeA: well, its the difference between parent and opener... I guess I was asking from a "what would a web developer expect" point of view?

[06:35:31.0000] <JakeA>
wanderview: I don't think many developers understand about:blank's relationship to the parent/opener. But I think making iframe about:blank and window.open about:blank behave the same is the best thing

[06:35:41.0000] <wanderview>
ok

[06:36:04.0000] <wanderview>
JakeA: we have some bugs that make window.open() not behave the same as about:blank iframe, unfortunately

[06:38:23.0000] <JakeA>
wanderview: it's pretty edge-casey I think

[06:39:04.0000] <wanderview>
JakeA: yea... and lots of compat issues except for a few narrow cases

[06:39:39.0000] <wanderview>
JakeA: about:blank replacement is only really handled the same between browsers when you do `<iframe src="nested.html"></iframe><script>/* poke frame */</script>`

[06:42:05.0000] <JakeA>
wanderview: it blew my mind when I learned about it. Especially that the global survives.

[06:44:10.0000] <wanderview>
I guess I will just focus on the iframe case for now

[07:58:12.0000] <wanderview>
JakeA: using waitUntil in an async function event handler is kind of awkard

[07:58:30.0000] <wanderview>
awkward

[08:00:08.0000] <wanderview>
is there some trick?

[08:20:01.0000] <JakeA>
wanderview: what's the benefit of an async function event handler?

[08:20:20.0000] <wanderview>
JakeA: being able to use await?

[08:20:28.0000] <JakeA>
wanderview: I sometimes do event.waitUntil(async function() { … }())

[08:20:49.0000] <wanderview>
hmm

[08:20:58.0000] <wanderview>
yea. I guess that makes sense

[08:21:38.0000] <JakeA>
wanderview: I suggested that we should implicitly pass the handler return value to waitUntil, but that's kinda weird as handler return values are already used

[08:21:53.0000] <JakeA>
returning false calls preventDefault

[08:21:54.0000] <wanderview>
JakeA: I guess I got confused because I was writing a delayed response thing... so was using a different pattern

[08:23:07.0000] <wanderview>
JakeA: I guess the immediately invoked pattern is a bit weird to me

[08:23:15.0000] <wanderview>
but I know its common in web dev

[08:24:52.0000] <JakeA>
wanderview: I wonder if module scripts are an opportunity to provide a convenience API. Eg export async function install() { … }

[08:25:46.0000] <wanderview>
JakeA: I guess you have to use `async function() {}()` and not `async _ => { }()`>

[08:25:47.0000] <wanderview>
?

[08:26:20.0000] <JakeA>
wanderview: you could export const install = async () => {…}

[08:26:56.0000] <wanderview>
JakeA: oh, I was asking about the immiediately invoked syntax

[08:27:08.0000] <JakeA>
oh sorry

[08:27:10.0000] <wanderview>
JakeA: module exports seem interesting

[08:27:32.0000] <wanderview>
JakeA: I think it would behave different with exceptions thrown from the event handlers today, though

[08:27:39.0000] <JakeA>
wanderview: you can do waitUntil((async () => {…})()) but it looks really messy

[08:27:40.0000] <wanderview>
or maybe we would just have to spec it to work the same

[08:28:43.0000] <JakeA>
wanderview: yeah, I'm not sure how exporting a fetch function would work, given that you have to call respondWith sync

[08:28:58.0000] <JakeA>
also, these exported functions receiving an event object might be a little weird

[08:51:11.0000] <Domenic>
One day we think we might have `async do { ... }` which is like a less-messy `(async () => { ... }())`

[08:51:20.0000] <Domenic>
But first we need to figure out sync `do { ... }`

[08:51:29.0000] <Domenic>
Which is unfortunately nontrivial because `var` hoisting

[08:58:13.0000] <TabAtkins>
Domenic: Just exclude `var` from do statements, simple. ^_^

[09:29:08.0000] <wanderview>
JakeA: fun about:blank test case: https://github.com/w3c/web-platform-tests/pull/6304

[12:20:18.0000] <wanderview>
JakeA: ok, I added a window.open() case as well

[12:24:37.0000] <zcorpan>
MikeSmith: i managed to write something to the <title> (for https://github.com/whatwg/wattsi/issues/50 ) ^_^

[13:37:33.0000] <Domenic>
People may enjoy: https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-for-spec-authors

[13:41:49.0000] <Domenic>
tobie: getting all those closed issue emails in a row was fun :D

[14:11:32.0000] <tobie>
Domenic: :)

[14:12:14.0000] <tobie>
Domenic: shouldn't FrozenArray be a valid JSON type?

[14:12:29.0000] <tobie>
/me is asking for a friend.

[14:31:27.0000] <Domenic>
tobie: I can't see how it would arise, since they really only occur as attributes on interfaces, right?

[14:33:04.0000] <tobie>
Domenic: step 2.3 of https://heycam.github.io/webidl/#collect-attribute-values

[14:33:56.0000] <tobie>
Domenic: checks whether an attribute is of JSON type before adding it to the object returned by the default toJSON operation

[14:34:15.0000] <Domenic>
Ah right, for the default one, yes

[14:34:18.0000] <Domenic>
Then yeah, agreed

[14:34:32.0000] <tobie>
OK, fixing.

[14:34:47.0000] <tobie>
Domenic: (needed for https://heycam.github.io/webidl/#collect-attribute-values)

[14:36:24.0000] <tobie>
Domenic: additional quick help request for |target| variable used here: https://heycam.github.io/webidl/#ref-for-get-the-underlying-value-1

[14:37:51.0000] <tobie>
Domenic: this is supposed to be a reference to the object that implements `Transaction`. Should I just use <emu-val>this</emu-val> instead?

[14:38:09.0000] <tobie>
or "the object implementing Transaction"?

[14:38:31.0000] <Domenic>
tobie: I've been doing "this Transaction object", although the exact phrasing here is an open issue.

[14:40:34.0000] <tobie>
Domenic: "the current ..." ?

[14:41:37.0000] <tobie>
Domenic: I just want the "The following <var>s were only used once in the document" warning to go. :D

[14:47:06.0000] <Domenic>
Well "this" has the right connotation

[14:48:25.0000] <Domenic>
tobie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27301

[14:49:41.0000] <tobie>
Domenic: heh

[14:50:03.0000] <tobie>
Should bump this in the list of priorities

[14:51:11.0000] <tobie>
Domenic: I went with: "Let value be result of getting the underlying value of the attribute identified by attr, for the given Transaction object." bad?

[14:51:48.0000] <Domenic>
I just don't understand why you prefer "the given" (who gave it to you?) instead of "this"

[15:02:06.0000] <tobie>
Domenic: I don't. I just went from "given |target|" to "given this Transaction object" to ", for the given Transaction object" instead of "for this Transaction object".

[15:03:37.0000] <Domenic>
Oh!

[15:03:41.0000] <Domenic>
I misunderstood.

[15:04:10.0000] <Domenic>
You are not wanting to modify the example, you are wanting to modify the definition?

[15:04:49.0000] <Domenic>
No, nevermind

[15:05:02.0000] <tobie>
Domenic: no, I actually had "given |target|" in the example (don't ask)

[15:05:34.0000] <Domenic>
Yeah ok. Seems fine I guess. I would have done "given this Transaction object".

[15:06:01.0000] <tobie>
Domenic: contemplating force pushing.

[15:51:51.0000] <MikeSmith>
zcorpan: cool 👉  > i managed to write something to the <title>


2017-06-22
[22:17:29.0000] <deanedridge>
MikeSmith: Hi, you still around? The other day, I think I saw you mention that v.nu and Firefox use the same HTML parser? Is this correct? Just that I thought v.nu was Java and Firefox would be C++

[22:29:15.0000] <zcorpan>
Domenic: first I read that as "event loop spec for authors"

[22:30:01.0000] <zcorpan>
deanedridge: yes, there's something to translate the Java to C++

[22:48:09.0000] <MikeSmith>
deanedridge: yeah, what zcorpan said. hsivonen_ wrote and maintains code that does the Java-to-C++ translation

[23:11:23.0000] <deanedridge>
Oh, I see. Sounds good. Thanks.

[01:33:59.0000] <gsnedders>
deanedridge: it's probably worthwhile to point out that there are bits of both that are Java-only or C++-only

[01:49:16.0000] <deanedridge>
gsnedders: Thanks. I wondered if something like that might be the case.

[03:27:36.0000] <nox>
Will be nice to see html5ever used in Gecko. :)

[05:05:54.0000] <tobie>
Are there other specs that rely on serializers that I don't know about? https://github.com/heycam/webidl/issues/372

[07:02:07.0000] <wanderview>
Domenic: is it possible for a document to move from one window to another?

[07:02:25.0000] <wanderview>
can you do something like frame2.contentWindow.document = frame1.contentWindow.document?

[07:02:27.0000] <wanderview>
I assume not

[07:09:09.0000] <Domenic>
tobie: https://drafts.fxtf.org/geometry/

[07:09:39.0000] <Domenic>
wanderview: interesting question... I can't think of any way to do so, although it's pretty early in the morning for my full devious-brain-mode to kick in

[07:09:57.0000] <wanderview>
.document is readonly

[07:10:47.0000] <Domenic>
Indeed, just trying to think of weird things you could do with navigation or about:blank or document.open() or something

[07:11:04.0000] <Domenic>
Well, OK, document.open() in some sense moves you from one window to another, at least in Gecko

[07:11:55.0000] <Domenic>
Although we'll probably change the spec to more match everyone else if we can get everyone else to describe what they do.

[07:12:17.0000] <wanderview>
Domenic: I thought document.open() was suppsoed to create a new window

[07:12:27.0000] <wanderview>
I guess I don't know what the document does in that case

[07:12:37.0000] <Domenic>
Right it creates a new window and moves your document to it

[07:12:51.0000] <wanderview>
ugh, ok

[07:13:00.0000] <wanderview>
Domenic: what do other browsers do?

[07:13:10.0000] <wanderview>
oh, you said we need them to describe it

[07:13:31.0000] <Domenic>
They just kind of reset a bunch of state on the current window basically

[07:13:37.0000] <wanderview>
hmm

[07:13:53.0000] <Domenic>
But the exact details are not clear, and likely different between browsers, so it's not a slam-dunk to switch the spec

[07:24:28.0000] <ondras>
Domenic: I have a question regarding (node) Stream API. are you the proper person for that, or shall I seek some core node dev.. ?

[07:34:07.0000] <Domenic>
ondras: yeah, not me.

[07:34:22.0000] <ondras>
Domenic: okay, thanks

[08:49:26.0000] <wanderview>
woah, I didn't know we were using fetch BodyInit in places like sendBeacon()

[08:59:45.0000] <tobie>
Domenic: thanks, yes, spotted Geometry in the meantime. So there's already https://github.com/w3c/fxtf-drafts/issues/199 opened there. I'll still fill another one for the rest of the APIs.

[09:53:36.0000] <tobie>
beverloo: do let me know when you land/update the corresponding idlharness in wpt, as I've a pending patch to test for toJSON in idlharness and I might have things to fix when you land yours.

[10:05:29.0000] <beverloo>
tobie, will do! I don't think there's any push tests in wpt yet but I can add a directory. Won't be until next week though

[10:05:32.0000] <beverloo>
see e.g. #5630

[10:22:19.0000] <tobie>
beverloo: yeah, no hurries. Note idl harness stuff now has its own directory: https://github.com/w3c/web-platform-tests/tree/master/interfaces

[10:23:22.0000] <beverloo>
tobie, ack, thanks. I already used pr-preview for the ReSpec issue ^-^

[10:23:37.0000] <tobie>
beverloo: nice!

[10:34:53.0000] <wanderview>
Domenic: have you seen this worker .name compat issue? https://bugzilla.mozilla.org/show_bug.cgi?id=1375457

[11:25:17.0000] <Domenic>
wanderview: no :(

[11:25:32.0000] <wanderview>
Domenic: should we make the property writable?

[11:25:34.0000] <Domenic>
Frigging `var`s

[11:25:43.0000] <Domenic>
Yeah I guess [Replaceable] is how we do that

[11:26:43.0000] <Domenic>
annevk: since you seem to be working today, https://github.com/whatwg/dom/pull/466 would be a good one to unblock some other stuff

[11:29:22.0000] <Domenic>
wanderview: working on a spec PR now, although we probably shouldn't merge it until Firefox confirms the fix works

[11:29:36.0000] <wanderview>
Domenic: I commented on the original issue

[11:32:00.0000] <wanderview>
Domenic: thanks

[11:32:45.0000] <Domenic>
Do idlharness tests work in workers, I wonder

[11:40:49.0000] <annevk>
Domenic: got hold of my laptop again, but technically still on vacation

[11:41:06.0000] <Domenic>
ah OK nevermind then :)

[12:45:14.0000] <Domenic>
wanderview: I can't repro the problem in nightly when trying to run my tests

[12:45:22.0000] <Domenic>
https://prettier.github.io/prettier/ shows nothing in the console

[12:46:25.0000] <wanderview>
Domenic: hmm... it does for me

[12:46:56.0000] <Domenic>
wanderview: false alarm, wrong window :(

[12:47:40.0000] <wanderview>
👍


2017-06-23
[21:58:22.0000] <KiChjang>
is it just me, or is the whatwg.org domain suffering from connectivity issues?

[06:12:22.0000] <tobie>
So we've started being organized about filing bugs following WebIDL changes and this is what it looks like: https://github.com/heycam/webidl/issues/372

[06:13:14.0000] <tobie>
Suggestions as how to improve this are welcomed. Especially if we're accidentally missing a bunch of folks.

[10:51:44.0000] <yoav>
Domenic: Hey! I think we found a working example in Service Workers

[10:51:59.0000] <yoav>
using "partial interface"

[10:52:19.0000] <yoav>
Basically, we have ResourceTimingEntry and we want to extend it

[10:52:29.0000] <Domenic>
yoav: yep that's probably the answer :)

[10:52:53.0000] <Domenic>
Unless you want to extend multiple objects in the same way, in which case it's "mixins"

[10:53:13.0000] <yoav>
OK, cool

[12:02:16.0000] <Domenic>
wanderview: want to review https://github.com/w3c/web-platform-tests/pull/6319 for me?

[12:02:20.0000] <Domenic>
(self.name)

[12:02:40.0000] <wanderview>
looking

[12:04:20.0000] <wanderview>
Domenic: r+

[12:04:57.0000] <Domenic>
\o/


2017-06-24
[17:00:00.0000] <a-ja>
what's policy on when new link relations get submitted?

[17:00:31.0000] <a-ja>
/me is asking cuz of rel=serviceworker

[19:11:41.0000] <GPHemsley>
tobie++

[01:37:38.0000] <KiChjang>
is it the rule nowadays to use PRs to change the spec?

[01:38:37.0000] <KiChjang>
because i've just been on a wild goose chase on spec changes, only to realize that the change i was looking for was not in a PR, but committed directly on the master branch

[01:39:13.0000] <KiChjang>
i would really hope that to be the case where only PR changes are accepted

[01:43:51.0000] <tobie>
KiChjang: As far as WebIDL is concerned I regularly push non-normative changes directly to master unless I specifically want feedback.

[03:58:39.0000] <nox>
karlcow: Why don't you just look at the commits instead of the PRs?


2017-06-25
[17:55:23.0000] <GPHemsley>
re https://github.com/whatwg/url/issues/326

[17:55:39.0000] <GPHemsley>
oddly, that user also appears to be spamming our admin@ e-mail address

[19:45:45.0000] <GPHemsley>
incidentally, we seem to have won quite a bit of money and missed quite a number of packages this year...

[19:46:32.0000] <GPHemsley>
(Thunderbird spam filtering is pretty terrible)

[02:15:29.0000] <MikeSmith>
botie, inform zcorpan should the checker not report an error for `&;`? https://github.com/validator/validator/issues/529

[02:26:23.0000] <MikeSmith>
botie, inform zcorpan should the checker not report an error for `&;`? https://github.com/validator/validator/issues/529

[02:26:23.0000] <botie>
will do


2017-06-26
[03:06:10.0000] <smaug>
why some people like js symbols?

[03:06:27.0000] <smaug>
/me hasn't seen the light why symbols are a good thing

[03:30:51.0000] <JakeA>
When creating an about:blank iframe, then navigating it, the global is preserved from the original about:blank. This is according to the spec, but only Firefox seems to implement this.

[03:31:02.0000] <JakeA>
Anyone know the history here?

[03:32:59.0000] <JakeA>
If Firefox is the only browser that does the weird replacement stuff, shouldn't Firefox change?

[04:21:38.0000] <smaug>
JakeA: I thought only webkit based browsers had the weird setup of not reusing global

[04:22:26.0000] <smaug>
JakeA: how does blink preverse event listeners when doing  var w = window.open("sameorigin.html"); w.addEventListener("load", function() {});

[04:23:14.0000] <smaug>
JakeA: that is, I believe, the biggest reason for reusing global

[04:23:24.0000] <smaug>
moving listeners to some other object would be super weird

[04:25:38.0000] <JakeA>
smaug: Yeah, load doesn't seem to fire for window.open in Chrome/Safari/Edge

[04:25:46.0000] <smaug>
wait, what?

[04:26:00.0000] <JakeA>
Unless I've done something really wrong http://output.jsbin.com/rofecit/quiet

[04:26:11.0000] <smaug>
you can't use window.open and observe when same origin page has been loaded?

[04:26:32.0000] <JakeA>
That appears to be the case

[04:27:15.0000] <JakeA>
It works with iframes via iframe.onload, which also do the replacement thing (in Firefox only) http://output.jsbin.com/bifelu/

[04:27:32.0000] <smaug>
(loaded www.yle.fi and then) var w = window.open("http://www.yle.fi"); w.onload = function() { console.log("loaded"); };

[04:27:41.0000] <smaug>
JakeA: that certainly prints loaded to console

[04:28:38.0000] <smaug>
JakeA: you're just doing  window.open();

[04:28:44.0000] <smaug>
that is very different case

[04:28:54.0000] <JakeA>
/me falls over

[04:29:17.0000] <JakeA>
I thought that would create a same-origin about:blank window that could later be replaced?

[04:29:49.0000] <smaug>
window.open(); doesn't load anything. it just creates initial about:blank

[04:30:02.0000] <smaug>
_creates_, not _loads_

[04:30:14.0000] <JakeA>
Sure, but then when I navigate it

[04:31:16.0000] <smaug>
anyhow, var w = window.open("http://www.yle.fi"); w.onload = function() { console.log("loaded"); };  shows that blink does dispatch load

[04:31:16.0000] <JakeA>
…to a same origin URL I'd expect a load event, but only Firefox gives me that. Or have I stumbled on another different case?

[04:31:52.0000] <smaug>
but I don't understand why blink works with my testcase. The event listener is added before anything has been loaded

[04:32:52.0000] <smaug>
if it doesn't reuse the global, it somehow mysteriously moves listeners to another object?

[04:34:16.0000] <JakeA>
smaug: here's an example that doesn't use an empty url http://output.jsbin.com/bexuzaq/quiet

[04:48:09.0000] <smaug>
JakeA: and I see same stuff printed in chrome and ff

[04:48:37.0000] <smaug>
but why does chrome ever print "load fired" ?

[04:49:43.0000] <JakeA>
hmm yeah, my test is wrong

[04:50:04.0000] <smaug>
JakeA: what is the model blink has for event listeners?

[04:50:53.0000] <JakeA>
smaug: I guess it's doing something special for window.open(url), but I'm not sure what

[04:51:02.0000] <JakeA>
but it seems Safari & Edge do the same

[04:51:16.0000] <JakeA>
Given the results of http://output.jsbin.com/rofecit/quiet

[04:51:44.0000] <smaug>
JakeA: since if I do var w = window.open("https://www.yle.fi"); w.document.documentURI; also blink shows the uri is about:blank at that point

[04:52:15.0000] <smaug>
IIRC IE used to have same model as Netscape and then Gecko. (but my memory could be wrong here)

[04:56:32.0000] <JakeA>
smaug: http://output.jsbin.com/bifelu/quiet is weird. In Firefox .hello is "world" in both cases, unless I wait for onload before setting .hello

[04:57:31.0000] <JakeA>
I guess it's because the navigate happens before the first navigation completes

[04:57:35.0000] <smaug>
JakeA: iframes load about:blank, at least in gecko

[04:59:03.0000] <smaug>
looks like also blink loads about:blank there

[04:59:12.0000] <smaug>
I mean even without src attribute

[04:59:54.0000] <smaug>
global reuse happens only when initial (not loaded about:blank) is replaced with something else from the same origin

[05:10:52.0000] <JakeA>
"if the nested browsing context's session history contained only one Document when the process the iframe attributes algorithm was invoked, and that was the about:blank Document created when the nested browsing context was created, then any navigation required of the user agent in that algorithm must be completed with replacement enabled."

[05:11:17.0000] <JakeA>
smaug: so, you're saying Blink creates an about:blank iframe, then navigates it to about:blank?

[05:11:35.0000] <JakeA>
So it's the about:blank to about:blank navigation that happens with replacement enabled?

[05:12:05.0000] <smaug>
in gecko initial about:blank -> sameorigin page happens with reuse

[05:12:12.0000] <smaug>
not replacement

[05:12:38.0000] <smaug>
(or perhaps one could call it replacement too :) )

[05:13:03.0000] <smaug>
JakeA: but I still mainly wonder how blink deals with event listeners

[05:13:07.0000] <JakeA>
I think I'll resign myself to never understanding this :D

[05:14:39.0000] <smaug>
FWIW, I think Gecko's model is reasonable sane, but I admit that I don't understand blink's model. Perhaps it is sane too.

[05:15:05.0000] <smaug>
(document.open after load event is also related and makes this even more complicated. )

[05:17:49.0000] <JakeA>
I'm not sure there's a sensible solution here, but it sure is difficult to pick the least unexpected :D

[06:10:06.0000] <JakeA>
If I change the src of an iframe, what's the source browsing context? The parent of the iframe or the iframe itself?

[06:10:41.0000] <JakeA>
https://html.spec.whatwg.org/multipage/iframe-embed-object.html#otherwise-steps-for-iframe-or-frame-elements doesn't pass the source explicitly

[06:12:48.0000] <JakeA>
I'm assuming the source browsing context is the iframe if I do iframe.contentWindow.location.href = "…"

[06:26:22.0000] <yoav>
Hey! Are there known patterns/examples for defining an object and its processing in one spec and then operating on that object (processing it and e.g. adding new proprties to it) from another spec?

[06:29:53.0000] <wanderview>
JakeA: its not just gecko that implements reusing the global

[06:30:02.0000] <wanderview>
oh, you said navigating it

[06:31:05.0000] <JakeA>
wanderview: I guess I'm in a muddle when it comes to when the reuse happens & when it doesn't. I thought I'd see globals live when creating an iframe, waiting for it to load, then navigating it to somewhere same-origin

[06:31:22.0000] <wanderview>
JakeA: from my testing it depends on when you call .src in blink

[06:31:26.0000] <wanderview>
when you set .srv

[06:31:28.0000] <wanderview>
.src

[06:31:33.0000] <wanderview>
/me still drinking his coffee...

[06:31:56.0000] <wanderview>
JakeA: let me find the irc conversation with bz where we talked about it

[06:32:57.0000] <JakeA>
wanderview: this is the case that surprised me in Firefox http://output.jsbin.com/lawumuw/1/quiet

[06:33:20.0000] <JakeA>
wanderview: if I comment out that "await p" (as in don't wait for the load event), the global lives on

[06:35:30.0000] <wanderview>
JakeA: see scrollback here: http://logs.glob.uno/?c=mozilla%23content&s=14+Jun+2017&e=14+Jun+2017#c447305

[06:35:49.0000] <wanderview>
JakeA: in chrome, if you do this:

[06:35:50.0000] <wanderview>
var f = document.createElement('iframe'); document.body.appendChild(f); f.contentWindow.foo = 'foo'; f.src = '?foo';

[06:35:56.0000] <wanderview>
then: f.contentWindow.foo

[06:35:59.0000] <wanderview>
you get undefined

[06:36:02.0000] <wanderview>
but if you do this:

[06:36:09.0000] <wanderview>
var f = document.createElement('iframe'); f.src = '?foo'; document.body.appendChild(f); f.contentWindow.foo = 'foo';

[06:36:15.0000] <wanderview>
then f.contentWindow.foo is "foo"

[06:36:31.0000] <wanderview>
JakeA: chrome has different behavior if you set .src before or after appending to the document

[06:37:21.0000] <JakeA>
haha

[06:37:35.0000] <JakeA>
wanderview: http://logs.glob.uno/?c=mozilla%23content&s=14+Jun+2017&e=14+Jun+2017#c447284 - this is exactly what I just ran into

[06:38:23.0000] <wanderview>
JakeA:  my key take away from that irc log: http://logs.glob.uno/?c=mozilla%23content&s=14+Jun+2017&e=14+Jun+2017#c447305

[06:38:44.0000] <JakeA>
Makes sense

[06:38:59.0000] <wanderview>
and thats why I tried to focus on in that about:blank test I wrote

[06:39:00.0000] <JakeA>
In a weird web way

[06:39:21.0000] <wanderview>
JakeA: I mean... it explains why we all have some kind of functionality here... thats the use case sites actually use

[06:40:29.0000] <JakeA>
yeah

[06:41:26.0000] <wanderview>
JakeA: at least in gecko I think we have a flag set on the about:blank that says its "initial"... and when the load event fires we set that flag false

[06:41:35.0000] <wanderview>
and we only re-use the global if the initial flag is set

[06:42:12.0000] <JakeA>
Yeah, that matches what I'm seeing in those jsbins

[06:42:17.0000] <wanderview>
JakeA: for example, I believe window.open() with no args should give you an initial about:blank that would be reused... but we have a known conflict with the spec where we mark it non-initial and don't reuse

[06:42:52.0000] <wanderview>
JakeA: I think there is some desire to fix this, but not sure this corner case has attracted much attention in the past

[06:44:50.0000] <JakeA>
wanderview: Ahh yes, that explains what I'm seeing in my other jsbin. But yeah, I don't think developers are hitting against this. I was just trying to see if browsers worked how I thought.

[06:45:00.0000] <JakeA>
The answer was "no". The answer is always "no".]

[06:45:02.0000] <JakeA>
:D

[06:45:20.0000] <wanderview>
JakeA: stuff like Clients API increases our exposure to these compat issues, though

[06:46:13.0000] <JakeA>
wanderview: I think your idea of initialClientId helps a lot. I think we should ditch reservedClientId in favour of it

[06:46:24.0000] <JakeA>
but maybe call it resultingClientId

[06:46:33.0000] <wanderview>
JakeA: uh... but we don't always have an initialClientId, right?

[06:46:37.0000] <wanderview>
oh

[06:46:40.0000] <wanderview>
you mean combine them

[06:46:44.0000] <JakeA>
yeah

[06:46:57.0000] <JakeA>
resultingClientId - the potentially-reserved client that will house the resulting document/worker.

[06:46:58.0000] <wanderview>
JakeA: how do you handle the difference in postMessage() behavior between them?

[06:47:09.0000] <wanderview>
that is my main concern with combining them

[06:47:22.0000] <JakeA>
wanderview: by the time you have the client, you can tell if it's .reserved or not

[06:47:33.0000] <wanderview>
hmm

[06:48:00.0000] <wanderview>
JakeA: ok, but that is pretty much the same as having initialClientId and reservedClientId

[06:48:33.0000] <wanderview>
JakeA: what do you think about removing the message queuing on reserved?

[06:49:45.0000] <JakeA>
wanderview: I think I'm missing the problem. If I want to send a message to the resulting client, resultingClientId is the place I go to do that. The queuing helps here, no?

[06:50:51.0000] <wanderview>
JakeA: but if its not reserved, then the message might fire in the window before the message event handler has been setup by the final loading document

[06:51:09.0000] <wanderview>
so the message will work for reserved... but may or may not work for initial

[06:51:51.0000] <wanderview>
making reserved not queue would avoid this since people wouldn't expect it to work

[06:52:15.0000] <JakeA>
wanderview: I thought we buffered messages until something like dom-ready, or does that stop working in the replaced case?

[06:52:21.0000] <wanderview>
JakeA: I kind of feel like instead of queuing messages we should provide some way to listen for the Client execution ready state change

[06:52:57.0000] <wanderview>
JakeA: I'm not sure how existing message buffering works with initial about:blank

[06:53:29.0000] <JakeA>
wanderview: won't we have the same problem with a client-ready event? If it's initial about:blank, the client is ready

[06:53:49.0000] <JakeA>
Whereas we want to know "the new document has loaded"

[06:53:55.0000] <wanderview>
JakeA: you can check the Client.url

[06:54:49.0000] <JakeA>
wanderview: So we'd need to know when the client url was the new url, and when dom-ready

[06:55:09.0000] <wanderview>
JakeA: I guess I was assuming we wanted to allow sites to dynamically built frames and message them... which would mean we need to be able to message the client while it has the about:blank document

[06:55:28.0000] <wanderview>
JakeA: well, you can pretty much do `client.url !== 'about:blank'`

[06:55:56.0000] <JakeA>
wanderview: but you can't do "wait until client.url == 'foo.html'"

[06:56:35.0000] <wanderview>
JakeA: no.. but if we had a "wait for execution ready" thing you could do that then check the URL

[06:56:55.0000] <JakeA>
wanderview: but what if the url is wrong? Wait 100ms and try again?

[06:56:58.0000] <wanderview>
JakeA: maybe need to expose .initial as a boolean getter... and then have "wait until execution ready and not initial"

[06:57:09.0000] <JakeA>
hmm

[06:57:29.0000] <wanderview>
JakeA: there is probably something that handles this stuff in the main window case without Clients API

[06:57:33.0000] <wanderview>
script blockers or something

[06:57:45.0000] <JakeA>
wanderview: given Firefox's current behaviour, is this a problem…?

[06:57:55.0000] <wanderview>
JakeA: I would ask bz or smaug, but they are probably traveling today

[06:57:56.0000] <JakeA>
wanderview: replacement only happens if the page doesn't load

[06:58:14.0000] <JakeA>
as in the initial page

[06:58:16.0000] <smaug>
wanderview: I'm not. I must avoid trumpland

[06:58:41.0000] <wanderview>
smaug: that is wise

[06:58:48.0000] <smaug>
...for my mental health ;)

[06:58:52.0000] <JakeA>
:D

[06:58:57.0000] <wanderview>
smaug: I saw at least on person was stopped from getting on a plane last night

[06:59:00.0000] <wanderview>
one person

[06:59:00.0000] <botie>
one person is working very much but is earning very less

[06:59:24.0000] <JakeA>
I'm going to build a quick test for this postMessage stuff

[06:59:43.0000] <wanderview>
JakeA: you mean without Clients API in the mix?

[06:59:50.0000] <JakeA>
yeah

[06:59:56.0000] <wanderview>
ok

[07:00:11.0000] <JakeA>
in theory the clients postMessage stuff uses the same buffering

[07:00:20.0000] <JakeA>
or, it could do

[07:00:25.0000] <wanderview>
JakeA: well, not in my current code :-)

[07:00:32.0000] <JakeA>
:D

[07:01:01.0000] <wanderview>
JakeA: my WPT test right now specifically tries to postMessage() an initial about:blank while delaying the final document network load

[07:01:09.0000] <wanderview>
and I made that work

[07:01:31.0000] <JakeA>
that's pretty much the test I was about to write

[07:01:32.0000] <JakeA>
hah

[07:01:39.0000] <JakeA>
Well, if that works, we're fine then, right?

[07:01:57.0000] <wanderview>
JakeA: but... the question is should it work

[07:02:10.0000] <wanderview>
JakeA: I made it work in my Clients API re-write... but should it work?

[07:02:39.0000] <JakeA>
wanderview: I think so. Buffing like window.postMessage seems good

[07:02:51.0000] <wanderview>
smaug: is there anything that prevents a page from adding a message handler to an initial about:blank and receiving postMessage events before the final document loads?

[07:03:07.0000] <smaug>
no

[07:03:08.0000] <wanderview>
JakeA: I don't think we're on the same page here... my test is designed to show no buffering

[07:03:28.0000] <smaug>
message events are just events, so if there is a listener for such, it should get called

[07:03:49.0000] <wanderview>
smaug: we don't buffer postMessage() until a particular ready state or something?

[07:04:01.0000] <wanderview>
JakeA: see the "ping" cases in here: https://github.com/w3c/web-platform-tests/pull/6304/files

[07:04:18.0000] <smaug>
why would we...

[07:04:33.0000] <wanderview>
smaug: uh... because JakeA thought we might? :-)

[07:04:41.0000] <smaug>
such buffering might take forever

[07:04:44.0000] <wanderview>
smaug: I mean... the web does all kind of things that I can't explain

[07:04:50.0000] <JakeA>
I thought we did this with regular messages

[07:05:34.0000] <JakeA>
Hence https://html.spec.whatwg.org/multipage/web-messaging.html#dom-messageport-start

[07:06:05.0000] <smaug>
window.postMessage is different

[07:06:15.0000] <smaug>
older and simpler, I'd say

[07:06:26.0000] <JakeA>
client.postMessage is modelled to be similar

[07:06:49.0000] <smaug>
oh, hmm, you were talking about service worker stuff?

[07:06:51.0000] <smaug>
then no idea

[07:07:13.0000] <smaug>
/me tries to stay as far as possible from SW ;)

[07:07:21.0000] <wanderview>
smaug: well, I guess I assumed the various postMessage() things would be more aligned

[07:07:40.0000] <JakeA>
Gonne test window.postMessage & initial documents…

[07:07:43.0000] <wanderview>
JakeA: when is the MessagePort enabled if start() is not called?

[07:07:57.0000] <JakeA>
wanderview: it's like dom ready or something

[07:08:13.0000] <JakeA>
Or when there's an assignment to window.onmessage

[07:08:20.0000] <JakeA>
It's kinda weird

[07:08:39.0000] <wanderview>
smaug: do windows with initial about:blank documents get the DOM ready event?

[07:08:43.0000] <smaug>
we just dispatch the runnable in gecko and then Run() dispatches message event sync

[07:09:08.0000] <smaug>
wanderview: that I don't recall

[07:09:15.0000] <smaug>
readystatechange

[07:09:18.0000] <smaug>
I assume no

[07:09:24.0000] <smaug>
since they are ready from the beginning

[07:09:49.0000] <wanderview>
oh, they start ready from the beginning?

[07:10:00.0000] <wanderview>
JakeA: wouldn't that imply the MessagePort should be enabled? ^^^

[07:10:19.0000] <JakeA>
Let's find out!! :D

[07:10:25.0000] <JakeA>
(writing a test)

[07:10:53.0000] <wanderview>
ok

[07:11:09.0000] <wanderview>
/me should probably start packing soon...

[07:16:59.0000] <JakeA>
wanderview: bleh, yeah, the message gets delivered before the page loads https://clear-princess.glitch.me/

[07:18:13.0000] <wanderview>
JakeA: how can you tell?

[07:18:18.0000] <wanderview>
there is no message handler?

[07:18:37.0000] <wanderview>
oh, I see

[07:18:46.0000] <wanderview>
your slow-ass-page has the handler

[07:19:07.0000] <wanderview>
JakeA: how do you do the slow load in glitch?

[07:20:02.0000] <JakeA>
wanderview: can you see https://glitch.com/edit/#!/clear-princess?path=server.js:17:23?

[07:20:24.0000] <wanderview>
JakeA: oh, cool... didn't realize it had a server.js

[07:20:26.0000] <wanderview>
nice

[07:20:35.0000] <JakeA>
<3 glitch

[07:26:19.0000] <wanderview>
JakeA: do you think edge will have to implement URLSearchParams when they ship service workers?  I bet a fair number of service workers use URLSearchParams

[07:41:00.0000] <JakeA>
wanderview: I left a note at https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/16856668-support-the-searchparams-property-of-url-objects. It feels like a smallish thing to implement right? I know there are complications with windowProxy.location

[07:41:31.0000] <wanderview>
thanks

[07:42:19.0000] <JakeA>
wanderview: I'm writing up the buffering issue in that thread btw

[07:42:32.0000] <JakeA>
the github one I mean

[07:42:42.0000] <wanderview>
JakeA: thanks... sorry, I was just throwing down my thoughts since I have to go get ready for travel shortly

[07:43:14.0000] <JakeA>
not at all, thanks for throwing the rest of the details down!

[08:03:46.0000] <TabAtkins>
smaug: Symbols are the GENSYM of JS - they let you add properties to objects that are *guaranteed* to not collide with anything else.

[08:04:25.0000] <TabAtkins>
In particular, this means you can write mixins that are guaranteed safe. You can extend built-in prototypes without all the problems that causes today. Etc.

[09:12:46.0000] <JakeA>
I can't find where the HTML spec starts the window.onmessage queue automatically. I thought it was after DOMContentLoaded

[09:13:16.0000] <JakeA>
I know it starts if you assign to onmessage, but not if you use addEventListener('message', …)

[12:59:27.0000] <ajeffrey_>
a question that came up in conversation with cbrewster wrt https://github.com/w3c/web-platform-tests/blob/master/html/semantics/embedded-content/the-iframe-element/iframe-append-to-child-document.html

[13:00:19.0000] <ajeffrey_>
the relevant bit of spec is https://dom.spec.whatwg.org/#concept-node-pre-insert

[13:00:56.0000] <ajeffrey_>
it looks like this passes the pre-insertion validity check https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity

[13:02:31.0000] <ajeffrey_>
because childWindow.document is not a descendant of iframe.

[13:03:49.0000] <ajeffrey_>
AFAICT the spec allows a cycle in the DOM + browsing context hierarchies, but I must be missing something :/

[13:04:50.0000] <ajeffrey_>
Domenic: any ideas ^

[13:11:27.0000] <Domenic>
I don't remember any attempts to disallow cycles

[13:11:46.0000] <Domenic>
There's some part of the spec that deals with iframe nesting level I think that tries to prevent infinite loading

[13:14:18.0000] <TabAtkins>
Yeah, cycles are definitely allowed and work right now, they just get broken at some point.

[13:46:09.0000] <jugglinmike>
Domenic: Is it possible to specify, "Wait for the queue's next dequeue operation" ?

[13:47:39.0000] <jugglinmike>
I'm trying to use a queue to schedule request handling in WebDriver

[13:47:56.0000] <jugglinmike>
so my question is just one possible implementation

[13:48:06.0000] <jugglinmike>
although even that is probably too prescriptive

[13:48:54.0000] <jugglinmike>
Could I do something like, 1) Enqueue `request` in `pending requests`, 2) Wait for `request` to be the first element of `pending requests`

[13:50:30.0000] <jugglinmike>
I know this is blocking, but I think that's appropriate for a connection-oriented/request-initiated algorithm

[13:54:14.0000] <virmaha>
Hello. If a website has 50mb approx size video, how can the browser play it almost instantly? Whereas if i fetch the same file via XHR, the download takes approx 2.5 mins after which I can start playing it?

[14:10:53.0000] <TabAtkins>
The browser is streaming it - playing what it has while it downloads the rest - while XHRing the whole file doesn't finish until the whole file is downloaded.

[14:11:18.0000] <TabAtkins>
But if you use fetch(), you can stream the result straight into a <video> element. There are some tutorials out there with examples of this.

[15:36:38.0000] <virmaha>
TabAtkins: I see. However, I can't find fetch + video tutorials. All I could find is https://jakearchibald.com/2016/streams-ftw/

[16:15:20.0000] <ajeffrey_>
Domenic: the pre-insertion check is indented to stop cycles in the DOM,

[16:15:53.0000] <ajeffrey_>
but it looks like there's nothing to stop cycles in the DOM+bc tree.

[16:21:14.0000] <ajeffrey_>
That is, can we get into a situation where A is a descendent of B, but B's browsing context is a child of A's?

[16:22:08.0000] <ajeffrey_>
bz: thoughts ^

[16:47:00.0000] <annevk>
ajeffrey_: don't think so since stuff is tied to documents

[16:47:16.0000] <annevk>
ajeffrey_: bz doesn't hang out here unfortunately

[16:50:03.0000] <ajeffrey_>
annevk: so what stops it? I can see how DOM is acyclic, but not what in the spec stops examples like https://github.com/w3c/web-platform-tests/blob/master/html/semantics/embedded-content/the-iframe-element/iframe-append-to-child-document.html from forming cycles in DOM+bc.

[16:50:46.0000] <annevk>
ajeffrey_: https://dom.spec.whatwg.org/#concept-node-adopt I'd think

[16:53:20.0000] <ajeffrey_>
annevk: I don't see how that stops it, because "node’s shadow-including inclusive descendants" is just the DOM hierarchy, not anything to do with bcs.

[16:56:14.0000] <annevk>
ajeffrey_: when you append an iframe to its own BC, the iframe holding the BC gets removed and no new BC gets created as there's no top-level BC

[16:56:29.0000] <annevk>
ajeffrey_: I might be missing something though


2017-06-27
[17:00:31.0000] <ajeffrey_>
Ah, so the idea is that the iframe gets removed (and so it's old BC is discarded) and when it gets reattached, the node that it's being attached to isn't part of a document with a BC any more?

[17:02:26.0000] <ajeffrey_>
annevk: so the important step is https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-iframe-element:insert-an-element-into-a-document

[17:03:10.0000] <ajeffrey_>
in that we're inserting into a document which doesn't have a BC any more.

[17:03:19.0000] <ajeffrey_>
cbrewster: ^

[17:03:47.0000] <ajeffrey_>
or do  I mean cgbrewster over here?

[17:03:56.0000] <cgbrewster>
thats me

[17:04:03.0000] <cgbrewster>
cbrewster was taken :(

[17:04:13.0000] <cgbrewster>
/me reads backlog

[17:06:17.0000] <cgbrewster>
ajeffrey_: ahh yeah that does make sense... now to figure out what that means for us

[17:06:54.0000] <ajeffrey_>
annevk: thanks! we can go back to #servo now :)

[17:12:46.0000] <annevk>
ajeffrey_: yeah, iframe insertion/removal is rather brutal

[02:54:00.0000] <smaug>
hmm, how could we fix Promise scheduling

[02:54:09.0000] <smaug>
to not cause jank

[02:54:30.0000] <smaug>
I guess we can't change the current setup, but perhaps AsyncPromise objects might not be so horrible

[02:54:56.0000] <smaug>
/me is starting to feel so bad about misuse of microtasks

[02:55:28.0000] <wfpkhc>
hello

[02:55:34.0000] <wfpkhc>
anyone here from the w3c?

[02:56:13.0000] <smaug>
MikeSmith ^

[02:56:46.0000] <smaug>
wfpkhc: but if the question is about some spec, just ask

[02:56:54.0000] <smaug>
someone may answer

[02:57:00.0000] <wfpkhc>
hello

[02:57:11.0000] <wfpkhc>
well its a possible error in a specification

[02:57:27.0000] <wfpkhc>
listed on the - https://www.w3.org/standards/techs/html#w3c_all

[02:57:36.0000] <wfpkhc>
page is mentioned that the current standard is html 5.1

[02:58:02.0000] <wfpkhc>
the standard can be found here

[02:58:33.0000] <wfpkhc>
the problem is when i implement the attributes on the button element - https://www.w3.org/TR/html51/sec-forms.html#the-button-element

[02:58:46.0000] <wfpkhc>
and then validate the output - the validator says "no no"

[02:59:19.0000] <smaug>
oh, don't ask about HTML5.* spec here :) WhatWG maintains the canonical HTML spec.

[02:59:45.0000] <wfpkhc>
ok sir , sorry

[03:00:02.0000] <wfpkhc>
do you know which channel i may speak with someone about this topic?

[03:00:36.0000] <smaug>
wfpkhc: if you implement any features from HTML and HTML spec from WhatWG and HTML5.* spec from W3C disagree, rely on WhatWG spec

[03:01:06.0000] <smaug>
browser vendors in general rely on WhatWG spec.

[03:01:25.0000] <smaug>
http://www.whatwg.org/specs/web-apps/current-work/multipage/

[03:01:59.0000] <wfpkhc>
really?

[03:02:06.0000] <smaug>
really

[03:02:11.0000] <wfpkhc>
this is the first i have heard of this over the last 20 years of web development

[03:02:32.0000] <wfpkhc>
why does everyone then say "follow w3c"?

[03:03:41.0000] <smaug>
in validator sense? That is not clear to me, and I don't know whether the validator follows W3C spec or WhatWG spec.

[03:03:55.0000] <wfpkhc>
k

[03:03:57.0000] <smaug>
W3C spec is mostly an old copy of WhatWG's spec

[03:04:17.0000] <wfpkhc>
(wasnt trying to be rude or anything, its just that this is the first time i have ever heard of you guys)

[03:04:55.0000] <wfpkhc>
k

[03:05:08.0000] <wfpkhc>
do you guys have a validator?

[03:06:53.0000] <smaug>
I'm not familiar with them, but perhaps https://validator.whatwg.org/ ?

[03:07:02.0000] <wfpkhc>
lol really?

[03:07:13.0000] <wfpkhc>
your new too?

[03:07:14.0000] <wfpkhc>
:P

[03:07:22.0000] <smaug>
I can't care less about validators

[03:07:31.0000] <smaug>
(and I'm far from new ;) )

[03:07:49.0000] <wfpkhc>
i love validators - because it removes alot of bulldust from peoples rubbish code

[03:07:56.0000] <smaug>
wfpkhc: what is the exact issue you have?

[03:08:47.0000] <wfpkhc>
the HTML 5.1 spec does not agree with the validator on W3C website sir...

[03:09:12.0000] <wfpkhc>
the validator keeps telling me im a "bad kitty"

[03:09:26.0000] <wfpkhc>
because im following the latest standard listed on the other part of their website

[03:09:28.0000] <smaug>
wfpkhc: but about what property?

[03:10:00.0000] <wfpkhc>
Attribute formenctype not allowed on element button at this point.

[03:10:29.0000] <wfpkhc>
https://www.w3.org/TR/html51/sec-forms.html#the-button-element

[03:10:38.0000] <wfpkhc>
but the standard (including yours i think) does

[03:10:46.0000] <wfpkhc>
https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element

[03:10:51.0000] <smaug>
yup

[03:11:46.0000] <wfpkhc>
see the problem :P

[03:12:00.0000] <smaug>
wfpkhc: what kind of web page do you have? Do you have minimal web page showing the issue?

[03:12:18.0000] <wfpkhc>
omg

[03:12:27.0000] <wfpkhc>
same wiht your validator - i just tried it and it does not like my code

[03:12:36.0000] <wfpkhc>
im doing a basic test code

[03:12:48.0000] <wfpkhc>
what pastebin do you prefer?

[03:13:01.0000] <smaug>
http://pastebin.mozilla.org/ happens to be ad free

[03:13:25.0000] <wfpkhc>
/me frowns at mozilla but will use it anyway

[03:14:42.0000] <wfpkhc>
https://pastebin.mozilla.org/9025874

[03:16:43.0000] <wfpkhc>
im building an element/component framework in php to handle php in OOP  so that my php code doesnt look like a spagetti code base of mish mash

[03:16:54.0000] <wfpkhc>
and in the process of testing it - i have found this issue

[03:18:12.0000] <wfpkhc>
* to handle html 5.X in oop format (sorry correction)

[03:23:51.0000] <smaug>
wfpkhc: couldn't immediately see what the validator issue is. I thought first that it is because of the missing <form> element, but maybe not

[03:26:25.0000] <smaug>
wfpkhc: oh, wait, is it because of button type...

[03:27:08.0000] <wfpkhc>
so it must be nested?

[03:27:10.0000] <wfpkhc>
in the form?

[03:27:11.0000] <smaug>
wfpkhc: yes, type=submit

[03:27:16.0000] <smaug>
in button

[03:27:27.0000] <smaug>
and form attribute needs to refer to a form element etc

[03:27:35.0000] <wfpkhc>
as i understand sir, the button element can be outside of a form in html5

[03:28:14.0000] <smaug>
sure, but form attribute needs to refer to a form element

[03:28:34.0000] <smaug>
and those attributes you're trying to use are valid in authoring sense only when type is submit

[03:29:46.0000] <wfpkhc>
well sir, i just dropped a "form" tag into that code - plain and simple and it still died

[03:30:17.0000] <smaug>
wfpkhc: did you change type to submit?

[03:30:21.0000] <smaug>
in button element

[03:30:35.0000] <wfpkhc>
no sir - im testing just a button element

[03:30:59.0000] <wfpkhc>
see a button element doesnt /shouldnt HAVE TO BE inside a form element

[03:31:11.0000] <wfpkhc>
after all - what if i wish to onClick and raise an alert

[03:31:14.0000] <wfpkhc>
i should not have to be

[03:31:18.0000] <wfpkhc>
inside a form for that

[03:31:39.0000] <wfpkhc>
wait

[03:31:46.0000] <wfpkhc>
i have it wrong - because

[03:31:55.0000] <wfpkhc>
the formaction attribute

[03:32:00.0000] <wfpkhc>
is causing the validation loss

[03:32:37.0000] <smaug>
wfpkhc: you have type=button

[03:32:41.0000] <smaug>
should be type=submit

[03:33:11.0000] <wfpkhc>
yes sir

[03:33:49.0000] <wfpkhc>
THAT is it

[03:33:55.0000] <wfpkhc>
im migrating away from w3c

[03:33:58.0000] <wfpkhc>
to this channel :P

[03:34:18.0000] <wfpkhc>
i dont like how microsoft is in on the w3c

[03:34:23.0000] <wfpkhc>
that has driven me away

[03:34:28.0000] <wfpkhc>
/me hugs smaug

[03:34:32.0000] <wfpkhc>
thank you so much sir

[03:34:40.0000] <wfpkhc>
you have not only helped me solve this issue

[03:34:57.0000] <wfpkhc>
you have helped me with my issue of WTF do i do now that MS is involved in the w3c

[03:35:02.0000] <wfpkhc>
i have an alternative

[03:35:29.0000] <wfpkhc>
i must go sir

[03:35:52.0000] <wfpkhc>
but just wanted to say a big thank you not just for this but for all the other work in the world you may or may not be apart of

[03:36:19.0000] <wfpkhc>
and under no circumstances ever give up - because there are people out there that are counting on you who cannot do what you guys do

[03:36:51.0000] <wfpkhc>
/me runs away

[04:43:39.0000] <wfpkhc>
/me wonders on into the channel

[04:43:43.0000] <wfpkhc>
hello again

[04:44:44.0000] <wfpkhc>
/me sits quietly in the corner of the irc channel waiting for someone

[04:46:37.0000] <wfpkhc>
hmmm

[04:46:42.0000] <wfpkhc>
guess no-one is around...

[04:47:56.0000] <wfpkhc>
/me sits and watches as the tumbleweed blows across the irc channel floor*

[04:49:10.0000] <wfpkhc>
if anyone is around - i have a question about the html5 standard

[04:51:51.0000] <wfpkhc>
/me continues to sit quietly*

[04:52:47.0000] <sknebel>
wfpkhc: don't complain about quiet, just ask. if someone knows the answer and sees it they'll answer, people are way less likely to react to general noise

[04:52:59.0000] <wfpkhc>
/me waves hello to sknebel

[04:53:04.0000] <wfpkhc>
hello sir

[04:53:17.0000] <wfpkhc>
i was speaking to mr smaug earlier :P

[04:53:35.0000] <wfpkhc>
about whatwg and w3c - and i have jumped ship and have come here :P

[04:53:38.0000] <wfpkhc>
my question is

[04:53:52.0000] <wfpkhc>
https://www.w3.org/TR/html51/sec-forms.html#the-button-element  vs https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element

[04:54:13.0000] <wfpkhc>
the w3c has a "menu"

[04:54:29.0000] <wfpkhc>
attribute, but whatwg does not - which one is correct and why?

[04:55:00.0000] <wfpkhc>
and why is one implemented vs left out

[04:56:56.0000] <wfpkhc>
/me sits quietly and patiently

[04:58:15.0000] <wfpkhc>
and if smaug is reading this- just tried the input date thingy - didnt work on my browser either

[04:58:20.0000] <wfpkhc>
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date

[04:58:40.0000] <wfpkhc>
(didnt get the fortnightly though, just the version i have with "check update"

[04:58:56.0000] <smaug>
wfpkhc: I said Nightly

[04:59:04.0000] <wfpkhc>
oh your alive!

[04:59:07.0000] <wfpkhc>
/me hugs smaug

[04:59:12.0000] <wfpkhc>
hello sir

[04:59:26.0000] <wfpkhc>
i dont know how to get the nightly sir

[05:00:31.0000] <wfpkhc>
but i humbly give thanks to the mozilla team for finally implementing it....i have been waiting FOREVER for it :P

[05:03:38.0000] <wfpkhc>
sorry if i have offended you smaug sir

[05:03:44.0000] <wfpkhc>
/me sits quietly

[05:03:51.0000] <smaug>
you didn't

[05:04:09.0000] <wfpkhc>
ok then  thats cool - you just went all quiet on me is all

[05:05:54.0000] <wfpkhc>
is there place i can recommend to re-write javascript from the ground up?

[05:06:23.0000] <wfpkhc>
:) and for it to be possibly implemented in browsers?

[05:06:54.0000] <wfpkhc>
or am i barking up the wrong tree?

[05:07:11.0000] <wfpkhc>
is that one of those things in life - where better of not opening that can of worms?

[05:08:15.0000] <wfpkhc>
/me sits quietly

[05:09:07.0000] <wfpkhc>
omg i just read this

[05:09:08.0000] <wfpkhc>
https://www.reddit.com/r/javascript/comments/5swe9b/what_is_the_difference_between_the_w3c_and_the/

[05:09:32.0000] <wfpkhc>
One of the more recent high-profile forks of this was their latest attempt to copy the WHATWG HTML Standard to create "HTML 5.1". This is widely recognized as a disaster, as the team of editors maintaining that document generally does not read or understand the content they are copying, leading to widespread errors and inconsistencies.

[05:09:37.0000] <wfpkhc>
i so agree with that

[05:09:41.0000] <wfpkhc>
comment

[05:09:51.0000] <wfpkhc>
currently it is a disaster

[05:10:43.0000] <wfpkhc>
so is it definitely safe to say that WhatWG is the one followed by FF and not W3C?

[05:11:42.0000] <wfpkhc>
ill just go then :(

[05:11:46.0000] <wfpkhc>
bye

[05:12:17.0000] <nox>
That was an epic journey.

[05:19:34.0000] <nox>
http://w3c.github.io/html/ So they again removed all authors, btw?

[05:21:23.0000] <nox>
Ah no it's in acknowledgments I'm dumb.

[05:34:06.0000] <Guest80480>
is anyone working on polyfill for CSS Shadow Parts https://tabatkins.github.io/specs/css-shadow-parts/ ?

[06:56:16.0000] <sangwhan>
@annevk: after locking the thread, was there any further discussion on obsoleting shared workers in favor of service workers with implementors?

[09:32:34.0000] <TabAtkins>
I... I think that person hated both Moz *and* MS? For some reason?

[10:31:50.0000] <virmaha>
Hello. If I've a static video url, how can I determine if I can use it as a mediasource?

[10:40:06.0000] <virmaha>
TabAtkins: any idea?

[10:48:58.0000] <TabAtkins>
virmaha: I've never used the MediaSource API, but https://developer.mozilla.org/en-US/docs/Web/API/MediaSource seems fairly comprehensive.

[10:50:43.0000] <virmaha>
TabAtkins: yeah I am familiar with that link. more research says that only fragmented mp4 files can be used as mediasource

[10:51:08.0000] <virmaha>
though I am wondering if there's non fragmented file, how can browser play the video almost instantly?

[10:53:39.0000] <annevk>
virmaha: if it doesn't need to be loaded all at once to be played

[11:08:56.0000] <virmaha>
annevk: yeah i saw that from network tab in chrome dev tools. My question is if that mp4 is not fragmented, how can browser get few initial chunk of data and start playing it?

[11:11:36.0000] <annevk>
virmaha: by having enough bytes to decode frames

[11:12:06.0000] <annevk>
virmaha: for media the browser also does some range requests, but I'm not super familiar with the setup of that

[11:14:35.0000] <virmaha>
annevk: I am still confused :S

[13:10:25.0000] <wanderview>
Domenic: we pushed our [replaceable] name worker property... it fixes the prettier site for us

[13:10:38.0000] <wanderview>
so I think landing the spec changes would be good

[13:34:08.0000] <virmaha>
https://bugs.chromium.org/p/chromium/issues/detail?id=370927 How can I figure out mimetype from a video just as commentator 1 in the link?

[13:34:18.0000] <virmaha>
vlc player's codec detail wasn't much helpful

[13:51:34.0000] <Domenic>
wanderview: I think we landed the spec change, maybe the tests too; let me check

[13:51:56.0000] <Domenic>
wanderview: ah nope not yet. And you even reviewed the tests IIRC

[13:52:10.0000] <Domenic>
OK, and then they got merged. I'll land the spec, haha

[14:10:44.0000] <hsivonen_>
mystor: https://github.com/hsivonen/recode_rs/blob/master/src/main.rs#L258


2017-06-28
[18:06:10.0000] <a-ja>
MikeSmith: ping

[18:10:41.0000] <a-ja>
MikeSmith: just wanted to know when new validator release goes live...no biggie

[01:48:44.0000] <GPHemsley>
eesh... that person must exist on a different plane of time

[01:49:50.0000] <GPHemsley>
where quiet is measured in microseconds

[14:20:34.0000] <annevk>
Domenic: we could do origin.spec.whatwg.org...

[14:21:16.0000] <annevk>
Domenic: folks already get antsy about URL doing too much, so adding origin doesn't seem great

[14:21:30.0000] <annevk>
Domenic: especially with "origin" soon getting all kinds of new fields for suborigin and such

[14:21:36.0000] <annevk>
"soon"

[14:35:59.0000] <tantek>
annevk - I'd agree with that, makes sense to have origin as a separate spec from URL

[14:37:35.0000] <jugglinmike>
annevk: Back from vacation?

[14:45:57.0000] <wanderview>
jugglinmike: he is, but he is drinking his tea now

[14:53:05.0000] <annevk>
🍵

[14:54:09.0000] <jugglinmike>
Roger that. Welcome back, Anne

[14:54:38.0000] <jgraham>
Well this is the US, so "tea"

[14:54:45.0000] <jgraham>
Unless you went somewhere special

[14:57:23.0000] <annevk>
Domenic: did you mean to close https://github.com/whatwg/html/issues/2706?

[14:57:46.0000] <annevk>
jgraham: we have different definitions of tea no matter where we are

[15:05:31.0000] <jgraham>
Yeah, your efinition confuses tea and tisane

[15:05:34.0000] <jgraham>
+d

[15:05:48.0000] <jgraham>
:)

[15:07:26.0000] <annevk>
"Herbal teas and fruit teas should not be confused with true teas" oh Wikipedia you're so serious


2017-06-29
[00:32:21.0000] <wfpkhc>
why does - https://html.spec.whatwg.org/#the-input-element

[00:32:30.0000] <wfpkhc>
have "alt" attribute -

[00:34:02.0000] <wfpkhc>
if you have an <input type="text"

[00:34:07.0000] <wfpkhc>
then you are not going to use an alt tag

[00:34:35.0000] <wfpkhc>
https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search)

[00:34:47.0000] <wfpkhc>
does not specify only which attribute applies to this version of an input

[00:35:43.0000] <wfpkhc>
/me sits quietly

[00:38:22.0000] <wfpkhc>
/me waves bye bye to yudai

[00:38:28.0000] <wfpkhc>
i hope he comes bakc

[00:38:29.0000] <wfpkhc>
back

[00:38:45.0000] <wfpkhc>
/me waves hello to Yudai

[00:38:48.0000] <wfpkhc>
welcome back

[00:39:00.0000] <wfpkhc>
/me sits quietly while waiting for a response...

[00:42:12.0000] <wfpkhc>
what im trying to get is a complete list of global attributes for <input>

[00:42:22.0000] <wfpkhc>
but the document specifies it for all inputs

[00:42:53.0000] <wfpkhc>
what would be interested is to have an section for <input type="text" (or any other input type)

[00:44:30.0000] <wfpkhc>
/me feels alone*

[00:49:48.0000] <wfpkhc>
/me waves bye to goplat*

[00:49:55.0000] <wfpkhc>
i wonder if he will come back...

[00:59:01.0000] <wfpkhc>
/me sits and waits quietly

[01:22:41.0000] <wfpkhc>
HMM

[01:22:54.0000] <wfpkhc>
did find a table with certain aspects on that web page

[01:23:00.0000] <wfpkhc>
/me waves hello to belolap

[01:23:28.0000] <wfpkhc>
i guess not

[01:31:11.0000] <wfpkhc>
i think that the documenation is missing somethin

[01:31:12.0000] <wfpkhc>
https://html.spec.whatwg.org/#the-input-element

[01:31:30.0000] <wfpkhc>
this table is missing the "disable" attribute on the table for the input types

[01:31:38.0000] <wfpkhc>
welcome back

[01:32:11.0000] <wfpkhc>
/me sits quietly

[01:41:19.0000] <wfpkhc>
/me looks around

[01:41:22.0000] <wfpkhc>
/me yawns

[01:47:33.0000] <wfpkhc>
/me still here

[01:54:45.0000] <wfpkhc>
welcome back belolap

[02:10:11.0000] <wfpkhc>
hello

[02:10:37.0000] <wfpkhc>
/me sighs and sits quitly waiting for someone*

[02:12:08.0000] <rianby64>
hello! I've a question about the example at https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-data-element I know that the examples are not so important, but I'd like to know if the <script src="sortable.js"></script> element should be there or not

[02:13:54.0000] <rianby64>
I ask because I don't see the code for that script, and I consider it's not necessary to include it in the example...

[02:19:15.0000] <Zegnat>
I am guessing it is included to make it clear that the extra data provided by the data elements is not consumed by most useragents (e.g. browsers), but the author will have to include scripts themselves. A table sorting script makes for a pretty clear example.

[02:19:55.0000] <wfpkhc>
hello rianby64

[02:20:31.0000] <wfpkhc>
wtf! how come he messages someone and ges a response and i have been here an hour or more

[02:20:54.0000] <wfpkhc>
/me ponders if he is invisible

[02:21:32.0000] <Zegnat>
I just happened to scroll by.

[02:21:39.0000] <wfpkhc>
lucky him

[02:21:46.0000] <wfpkhc>
/me sits and pouts on the couch*

[02:22:15.0000] <rianby64>
ah, uh, ok. Thanks Zegnat.

[02:23:31.0000] <wfpkhc>
sooooooooo

[02:23:37.0000] <Zegnat>
wfpkhc, I believe alt is available on input elements because of type="image" not having any other way to enable UAs to read them out

[02:23:49.0000] <wfpkhc>
yes its available on type image - i get that

[02:23:59.0000] <wfpkhc>
what i dont get - is why is it on the type text?

[02:24:29.0000] <Zegnat>
Is it?

[02:24:37.0000] <wfpkhc>
according to the documentation it is

[02:24:44.0000] <wfpkhc>
https://www.w3.org/TR/html51/sec-forms.html#the-input-element

[02:24:46.0000] <Zegnat>
If you look at the table listing what attributes are in effect on what types it is only listed for type="image"

[02:25:17.0000] <wfpkhc>
but the table is missing information

[02:25:32.0000] <wfpkhc>
its missing the "disabled" attribute

[02:26:43.0000] <Zegnat>
Note the sentence “Which of the accept, alt, […] step, and width content attributes, […] IDL attributes, […] methods, and […] events apply to an input element depends on the state of its type attribute.”

[02:27:28.0000] <Zegnat>
The table is actually a “non-normative” summary. I am not 100% sure where the formal attributes-per-type is defined.

[02:28:08.0000] <wfpkhc>
k

[02:29:29.0000] <Zegnat>
https://www.w3.org/TR/html51/sec-forms.html#element-statedef-input-text - scroll down to “bookkeeping details”, you will see alt is not a listed attribute for type="text"

[02:29:54.0000] <Zegnat>
A comparable section should be included for every type state.

[02:30:00.0000] <Zegnat>
I hope that gets you going, wfpkhc :)

[02:30:30.0000] <wfpkhc>
thank you sir but i was told this list was better then w3

[02:30:35.0000] <wfpkhc>
w3c

[02:32:17.0000] <wfpkhc>
but appreciate the link sir

[02:32:48.0000] <Zegnat>
The same definition is available on the whatwg version

[02:32:49.0000] <Zegnat>
https://html.spec.whatwg.org/#text-(type=text)-state-and-search-state-(type=search)

[02:32:59.0000] <Zegnat>
Scroll down to bookkeeping

[02:33:18.0000] <wfpkhc>
k sir

[02:34:18.0000] <Zegnat>
So, yeah, there is a list per input type. Hope that does answer your initial question.

[02:34:53.0000] <wfpkhc>
to be honest sir its 7 30 pm

[02:35:02.0000] <wfpkhc>
im dog tired  and can barely read the screen

[02:35:09.0000] <wfpkhc>
i think its about time i signed of shortly

[02:37:32.0000] <wfpkhc>
thank you Zegnat

[02:37:51.0000] <wfpkhc>
/me hung smaug and gives him a gold coin as i know he loves gold under the mountain*

[02:39:17.0000] <wfpkhc>
*hung = hugs*

[02:39:24.0000] <wfpkhc>
lol im a little tired

[02:39:30.0000] <wfpkhc>
and read what i just said :P

[02:39:59.0000] <wfpkhc>
hello foolip

[02:41:07.0000] <foolip>
hello wfpkhc :)

[02:41:17.0000] <wfpkhc>
how are you sir?

[02:41:59.0000] <foolip>
wfpkhc: doin OK, had a bit of fun with https://stackoverflow.com/questions/16037787/convert-mercurial-project-to-git

[02:42:57.0000] <wfpkhc>
thats awesome - i have no idea of what you are talking about but im happy for you

[02:44:37.0000] <foolip>
anyone want to review https://github.com/w3c/web-platform-tests/pull/6302 for me? annevk?

[02:45:11.0000] <wfpkhc>
what is it?

[02:45:48.0000] <foolip>
wfpkhc: tests for the fullscreen API when you remove an element which is in fullscreen

[02:46:49.0000] <wfpkhc>
oh ok

[02:46:57.0000] <wfpkhc>
clearly outside my realm of understanding

[02:55:23.0000] <wfpkhc>
night night all

[02:55:35.0000] <wfpkhc>
my brain has stopped working after 14 hours of programming

[02:55:55.0000] <wfpkhc>
bye

[04:12:59.0000] <smaug>
CEReactions handling in specs is error prone

[04:13:05.0000] <smaug>
I guess also in implementations

[04:13:24.0000] <smaug>
how can we guarantee it is used whenever needed

[05:05:36.0000] <GPHemsley>
that person is starting to bother me

[05:06:54.0000] <GPHemsley>
we've determined now that they're in UTC+10, at least

[05:12:42.0000] <nox>
GPHemsley: Grepped their handle on botbot.me, was not disappointed.

[05:16:59.0000] <GPHemsley>
nox: I suppose you'll have to define "not disappointed" for me >_>

[05:17:49.0000] <nox>
I have weird tastes when it comes to entertainment.

[07:06:56.0000] <annevk>
smaug: for CEReactions the alternative would be to always run those steps instead of only when annotated with CEReactions, but the feedback from implementers was to have the optimization defined in the specification as it would be more likely to be correct and aligned across implementations that way

[07:41:54.0000] <smaug>
annevk: sure. I just wonder how to make the setup less error prone

[14:21:03.0000] <TabAtkins>
If I can catch them next time they're on I'm going to inform them of general etiquette, otherwise I'm just /ignore'ing them.

[16:18:44.0000] <Shalom>
exit


2017-06-30
[06:06:47.0000] <pwf>
TabAtkins: how can i make the red/green divs fill the rest of the window when scrolling because the blue divs make the container scrollable

[06:06:50.0000] <pwf>
https://codepen.io/anon/pen/GEQmGx

[08:13:38.0000] <plexigras>
why should i use whatwg fetch instead of something like axios?

[08:59:25.0000] <TabAtkins>
pwf: You're getting bit by <https://bugs.chromium.org/p/chromium/issues/detail?id=599828>, which is forcing the .inner's sole flex line to be .inner's size, and so .a and .b stretch to that height only.

[08:59:42.0000] <TabAtkins>
Feel free to comment on that bug and request prioritizing a fix - Safari and Edge act correctly.

[09:00:05.0000] <ahn0st>
hello

[09:00:29.0000] <TabAtkins>
(The Flexbox spec did, for a while, define "single-line" to be "has one line worth of content", but that ended up being very bad for reasons like this.)

[09:00:58.0000] <pwf>
thank you TabAtkins, good to know it's actually a bug! we're working around it by giving up on making the header fixed

[09:01:13.0000] <TabAtkins>
plexigras: fetch() is the low-level primitive. axios is sugar built on top of it. Use axios if you feel like it makes things sufficiently better to be worth its weight on the page.

[09:01:22.0000] <TabAtkins>
pwf: Using Grid for page layout will work even better. ^_^

[09:01:45.0000] <pwf>
what we ended up with (closer to our actual layout anyways) https://codepen.io/jlee42/pen/owEmXj

[09:03:28.0000] <pwf>
how's browser support for grid

[09:03:31.0000] <pwf>
this is the first i've heard of it

[09:03:40.0000] <pwf>
this is also the first job i've been forced into frontend :<

[09:04:12.0000] <pwf>
oof, no mobile at all

[09:04:19.0000] <TabAtkins>
pwf: https://codepen.io/TabAtkins/pen/owEOmN

[09:04:24.0000] <TabAtkins>
Grid is widely supported!

[09:04:38.0000] <TabAtkins>
But yeah, mobile might still be lagging a little for Safari.

[09:05:08.0000] <TabAtkins>
Ah, no, it should be fine: https://caniuse.com/#search=grid

[09:05:29.0000] <pwf>
awesome

[09:06:03.0000] <pwf>
thank you so much

[09:06:07.0000] <TabAtkins>
Flexbox *should* work fine for this case except for the bug. Sorry about that. :(

[09:06:08.0000] <TabAtkins>
np!

[09:06:15.0000] <pwf>
we're redoing a lot of the layout right now, so grid might be a good option

[10:33:00.0000] <annevk>
rbyers: https://bugs.chromium.org/p/chromium/issues/detail?id=123004 is becoming a problem

[10:33:41.0000] <annevk>
rbyers: https://bugzilla.mozilla.org/show_bug.cgi?id=1377282

[10:51:05.0000] <Domenic>
annevk: I don't understand https://github.com/whatwg/dom/issues/76#issuecomment-311805043 ; specs use create or fire an event, whereas author code uses the constructor or createEvent.

[10:53:25.0000] <annevk>
Domenic: hmm I had forgotten that was the setup

[10:54:13.0000] <annevk>
Domenic: the PR still has all kinds of issues though it seems

[10:54:51.0000] <annevk>
Domenic: the high resolution PR

[10:55:00.0000] <Domenic>
Hmm, dang, would be nice to get that landed

[10:55:26.0000] <annevk>
Domenic: like it still says that timeStamp is set when the event is created

[10:55:44.0000] <Domenic>
I'd imagine majidvp_ views the EventInit issue as blocking though since that would change how he solves all the rest

[10:55:48.0000] <annevk>
Domenic: although maybe that's okay

[10:56:28.0000] <annevk>
Domenic: btw, smaug is not in the US so I haven't really been able to poll him on the addition of new DOM features

[10:56:35.0000] <Domenic>
ah ok

[10:59:14.0000] <Domenic>
annevk: maybe comment on issue 76 then indicating that distinguishing based on create/fire vs. constructor/createEvent is a good path forward?

[11:02:55.0000] <annevk>
Domenic: done

[11:02:59.0000] <Domenic>
\o/

[11:03:10.0000] <annevk>
Domenic: I did think that eventually we wanted all construction of objects to go through the constructor

[11:03:18.0000] <annevk>
Domenic: potentially with hidden flag

[11:03:27.0000] <Domenic>
Maybe... that seems pretty long-term

[11:10:10.0000] <majidvp_>
annevk: "it still says that timeStamp is set when the event is created", only for synthetic events though. The PR uses occurrence time for non-synthetic events.

[11:11:31.0000] <majidvp_>
The PR is not blocked on having EventInitDic issue resolved. But you raised the same concerned there but I don't see it given that we have different wording for the two paths that exists.

[11:16:51.0000] <virmaha>
Hello. When I check http://callmenick.com/_development/html5-video/index.html in network tab, why does the 1st request have content-length 40 MB(approx) but 'size' column shows value in KB? And if the browser has got entire video in first request, why are there multiple requests?

[11:23:09.0000] <annevk>
majidvp_: yeah, maybe it's okay, I have to review again given what Domenic said

[11:23:24.0000] <annevk>
majidvp_: the origin time stuff is a little confusing to me

[14:32:34.0000] <rbyers>
annevk: Thanks, that case helps argue for priority.  Updated: https://bugs.chromium.org/p/chromium/issues/detail?id=123004#c43

