2014-07-01
[17:10:07.0000] <Domenic>
Apparently web-platform-tests differs with the HTML standard about whether input type="email" should be selectable? https://github.com/tmpvar/jsdom/pull/804#issuecomment-47602028

[18:20:57.0000] <zewt>
"a principled stance" is a fascinating phrase (assumes that the speaker's set of principles are the only valid ones)

[21:02:09.0000] <Hixie>
this whole TAG thing is pretty hilarious

[21:02:23.0000] <Hixie>
i love that all these people think they can only contribute if they're in the TAG

[21:03:00.0000] <SamB>
/me suits up in his <HTML></HTML> tag

[22:36:26.0000] <cabanier>
Hixie: TAG in general or did they make some statement?

[00:11:52.0000] <annevk>
cabanier: see www-tag

[00:33:18.0000] <MikeSmith>
zewt: no it does not assume that

[00:33:36.0000] <MikeSmith>
zewt: I haven't read yet the context but in general it doesn't imply that at all

[00:33:52.0000] <MikeSmith>
zewt: in fact it often implies the opposite

[00:35:29.0000] <MikeSmith>
zewt: it's often used to acknowledge that while you disagree with someone else's argument, you respect the position they've taken on it as being one based on principles, though you may disagree with the priorities of those principles over other concerns, or with the principles themselves

[00:36:56.0000] <MikeSmith>
Domenic: if the tests differs from the spec then it should be raised as an wpt issue and/or as a PR

[00:37:41.0000] <MikeSmith>
Domenic: ah I see you already said as much in the issue thread

[00:43:44.0000] <SamB>
MikeSmith: as in a "wow they're really sticking to their principles" type of thing?

[00:57:58.0000] <jgraham>
Domenic: If the spec and the tests disagree it's presumably a bug in the tests.

[00:58:26.0000] <jgraham>
Oh, MikeSmith just said that

[00:58:47.0000] <jgraham>
I should apparently not read a randomly selected subset of the scrollback

[01:23:22.0000] <annevk>
MikeSmith: I opened https://github.com/masinter/multipart-form-data/issues/17

[01:23:39.0000] <annevk>
I'll also watch the repository for a bit

[01:26:44.0000] <odinho>
SamB: Well, in fact chrome.  I think it makes sense to develop more of the web platform in javascript.  From low-level primitives given from the engine c++ land.

[01:45:30.0000] <MikeSmith>
annevk: gool

[01:45:43.0000] <MikeSmith>
erp cool

[01:46:47.0000] <jgraham>
Oh, I assumed that was an unlikely typo for "good". Although now it sounds like some sort of football celebration

[02:01:53.0000] <annevk>
I thought it was a reference to https://twitter.com/hober/status/483296410108833793 & https://twitter.com/hober/status/483296772941283328

[02:40:04.0000] <MikeSmith>
"Web Components as currently designed cannot explain the behavior of any built-in elements (except maybe those which can be explained with CSS alone)."

[03:07:55.0000] <JakeA>
annevk: body.asJSON - we decided they consume the stream rather than tee it, right? Was there a reason for that? Maybe it should tee.

[03:21:12.0000] <annevk>
JakeA: as*allthethings don't tee

[03:21:22.0000] <annevk>
JakeA: elaborate?

[03:22:47.0000] <JakeA>
annevk: If they tee, you can call them multiple times, or call asBlob then asText. I'm not sure it's intuitive that they're one-off at the moment. What's the advantage?

[03:23:16.0000] <annevk>
JakeA: you don't have to keep the response around

[03:24:54.0000] <JakeA>
annevk: I can see that being an issue if the object is kept in reference long after calling asWhatever, not sure that's likely though

[03:26:00.0000] <annevk>
The design of responseType / response on XMLHttpRequest was exactly because of this

[03:26:38.0000] <annevk>
The original design of having both responseText and responseXML was a memory issue, and that's why we didn't add responseBlob

[03:33:42.0000] <JakeA>
annevk: adding responseBlob wouldn't have added extra memory overhead though, the blob would have been constructed as part of the getter right?

[03:34:21.0000] <annevk>
JakeA: the problem was that you could never toss away the original bytes if someone e.g. had already asked for responseText

[03:35:41.0000] <annevk>
JakeA: if streams support something like tee(), then subclasses of streams will too, and you could just do .body.tee().asText()

[03:37:07.0000] <JakeA>
annevk: Yeah, I get the original bytes thing, I didn't realise that'd be a huge problem as the object is likely to get gc'd shortly afterwards anyway. But yeah, body.tee().asText() seems fine.

[03:39:55.0000] <annevk>
I think people are rightly concerned about memory usage. If we offer a low-level API such as this it seems good to make that usage explicit.

[03:40:22.0000] <annevk>
We will need to support a tee operation, there's numerous places that require tee/copy

[03:40:41.0000] <JakeA>
slightlyoff: see above.

[03:40:46.0000] <annevk>
E.g. the stream that is passed to fetch()'s Request object will need to be teed

[03:40:47.0000] <JakeA>
Yeah, makes sense

[03:40:58.0000] <annevk>
tee'd?

[03:42:32.0000] <annevk>
JakeA: we are going to rename navigate to "topframe" and "child" to "frame" most likely

[03:42:35.0000] <annevk>
JakeA: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=26247

[03:43:18.0000] <annevk>
jungkees: ^^

[03:46:12.0000] <JakeA>
annevk: feels like we need a "navigate" helper to cover "topframe", "frame" and "popup"

[03:47:02.0000] <JakeA>
since navigates are the cases you'd want to provide a "no connection" fallback page, or something

[03:47:14.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/345

[03:47:33.0000] <annevk>
JakeA: "client request" was that term

[03:48:59.0000] <annevk>
JakeA: as you demonstrate, "navigate" makes you forget about workers

[03:49:51.0000] <JakeA>
annevk: that was deliberate, in this case

[03:50:10.0000] <JakeA>
annevk: I wouldn't want to serve up a "Sorry no connection" page in response to a sharedworker request

[03:50:59.0000] <JakeA>
annevk: But I understand why sharedworkers are in that grouping, as they can make requests themselves

[03:51:23.0000] <annevk>
isNavigateRequest, isClientRequest could be on Request I suppose

[03:51:44.0000] <annevk>
Or on FetchEvent, depending on where context/client end up

[03:52:53.0000] <annevk>
We also haven't really dealt with <object> yet

[03:53:14.0000] <JakeA>
annevk: <img src="//otherorigin/whatever.svg"> - is this a client request?

[03:53:22.0000] <JakeA>
I guess not

[03:53:33.0000] <annevk>
no

[03:53:47.0000] <JakeA>
but will requests triggered by whatever.svg go through the page's SW, and are we leaking by doing so?

[03:53:59.0000] <annevk>
client requests and resource requests are mutually exclusive

[03:54:01.0000] <JakeA>
I guess it's the same as CSS at that point

[03:54:07.0000] <annevk>
(except maybe for <object>, which does both...)

[03:54:41.0000] <annevk>
if you load an SVG as an image it cannot do any further fetches

[03:54:41.0000] <JakeA>
annevk: hopefully we can reuse a lot of appcache's mess when it comes to <object>

[03:54:53.0000] <JakeA>
annevk: ah, phew, problem solved

[03:55:10.0000] <annevk>
(at least not network fetches)

[03:57:03.0000] <hsivonen_>
is there a term to describe something that looks like trolling but may not be motivated by trolling intent?

[03:58:25.0000] <hsivonen>
like appealing to the behavior of "newer browsers" when requesting a spec change and giving Emacs Web Wowser as an example of such a newer browser

[03:58:45.0000] <annevk>
pedant

[03:58:54.0000] <jgraham>
Doesn't sound like pedantry

[03:59:11.0000] <jgraham>
Sounds like being divorced from the real world

[04:00:55.0000] <annevk>
/me finds phantasmagoric

[04:01:27.0000] <annevk>
That's some phantasmagoric shit right there

[04:02:02.0000] <annevk>
JakeA: maybe we should just not do the weird thing appcache did and always route them through the SW?

[04:02:48.0000] <annevk>
meh

[04:02:50.0000] <annevk>
hard

[04:06:32.0000] <JakeA>
annevk: which SW?

[04:07:12.0000] <Ms2ger>
annevk, JakeA: please don't call it tee(), though

[04:07:19.0000] <JakeA>
annevk: the page's or the one that would be used if it were a navigation

[04:08:43.0000] <annevk>
JakeA: the page

[04:09:20.0000] <annevk>
JakeA: although I guess sometimes you do know upfront the page wants to navigate

[04:09:46.0000] <annevk>
JakeA: well, does <object name=x></object> <a href=... target=x>...</a> work? would need to test :/

[04:16:08.0000] <jungkees>
annevk: thanks for the pointer. will keep an eye on it

[04:24:30.0000] <hsivonen>
annevk: you might be interested in https://bugzilla.mozilla.org/show_bug.cgi?id=1003716

[04:24:54.0000] <hsivonen>
particularly, exposing menus that have items for both ISO-8859-1 and windows-1252 to the user

[04:25:04.0000] <hsivonen>
even though both encode and decode the same

[04:25:21.0000] <hsivonen>
so it's basically exposing the decision of which label to put in email headers to the user

[04:25:26.0000] <hsivonen>
which is sad UI

[04:25:44.0000] <hsivonen>
I'm not sure if I have the stamina to bikeshed that one anymore

[04:27:08.0000] <hsivonen>
(Thunderbird has code that specifically picks the windows-1252 encoder even if the outgoing encoding is ISO-8859-1, which is a distinc encoding internally in Gecko, still)

[04:31:14.0000] <annevk>
hsivonen: why do they even expose technical terms to end users?

[04:46:28.0000] <JakeA>
annevk: so the page SW would control the load of the <object></object> document, but what about the subresources? Through the child document's SW?

[05:17:11.0000] <annevk>
JakeA: hmm yeah, would have to do some more digging as to how that entire thing is setup

[05:19:30.0000] <annevk>
hsivonen: fwiw, I do think that new software should use the Encoding Standard, otherwise we get into the situation where for each format there's a debate about whether the Encoding Standard can be a normative reference

[05:19:49.0000] <annevk>
hsivonen: which would just suck and complicate everything for no good reason

[05:59:31.0000] <Jirka_>
annevk: if all new software will use the Encoding Standard and non-UTF encodings will be allowed then you will loose interop with existing encoding libraries in JDK/.NET/iconv/...

[06:03:53.0000] <annevk>
Jirka_: yes

[06:06:08.0000] <zewt>
it's not really losing interop if they didn't have interop with each other in the first place

[06:10:24.0000] <Jirka_>
annevk: What about spliting the Encoding Standard into two documents -- one will define only UTF-8 related stuff and JS APIs and second will define how to handle legacy web resources in non-UTF encodings. Any new software will be then built on top UTF-8-only Encoding Standard, no need to deal (and possibly create confusion) with legacy encodings

[06:12:22.0000] <caitp>
yeah you can never have to many documents to not read!

[06:12:32.0000] <caitp>
oh man, typo ruined sarcasm =(

[06:12:34.0000] <zewt>
if people won't follow a simple "only use utf-8" instruction, breaking specs apart isn't going to help--and it's a pain in the ass to do, for everyone involved

[06:13:48.0000] <annevk>
Jirka_: I don't really see what problem that solves

[06:13:52.0000] <annevk>
Does this make sense:

[06:13:56.0000] <annevk>
<p>To <dfn>byte lowercase</dfn> a byte sequence, means replacing any byte in the range

[06:13:56.0000] <annevk>
0x41 to 0x5A of the byte sequence with their corresponding byte in the range 0x61 to 0x7A.

[06:14:05.0000] <annevk>
s/means replacing/replace/

[06:14:09.0000] <zewt>
also it seems like the entire point of "new software should use this spec" is exactly *for* legacy encodings ... interop on utf-8 itself isn't a problem

[06:14:34.0000] <annevk>
there's some interop problems around utf-8, but yes

[06:14:40.0000] <zewt>
annevk: makes sense but does require interpretation

[06:15:02.0000] <annevk>
should I do s/their/the/?

[06:15:11.0000] <zewt>
the only interop issue with utf-8 i've really seen is overlong sequences, and that's uncommon

[06:15:46.0000] <annevk>
I'm not talking about 5/6 byte sequences, but amount of U+FFFD emitted during error handling

[06:16:18.0000] <jgraham>
annevk: s/their/the/ is what I was going to suggest

[06:16:21.0000] <zewt>
could say something like "adding 0x20 to any byte of the byte sequence in the range 0x41 to 0x5A"

[06:16:41.0000] <annevk>
that might be better

[06:16:43.0000] <annevk>
thanks

[06:17:09.0000] <zewt>
is it clear that it's an inclusive range

[06:17:19.0000] <zewt>
(aside from "duh")

[06:18:37.0000] <annevk>
<p>To <dfn>byte lowercase</dfn> a byte sequence, increase each byte it contains in the range 0x41 to 0x5A by 0x20.

[06:18:40.0000] <Jirka_>
annevk: current reading of the Encoding Standards and legacy encodings seems to cover all usages of legacy encodings and not only those on the web.

[06:18:59.0000] <annevk>
zewt: yeah, I need to clarify that at some point, that's a bigger issue though :/

[06:19:13.0000] <annevk>
Jirka_: yes that is intended

[06:20:00.0000] <annevk>
Jirka_: it would be weird to allow some CSS or XML to be interpreted in different ways

[06:20:02.0000] <zewt>
i imagine there are many encodings that exist but which aren't used on the web, in which case they wouldn't be in the encoding spec (but I guess if that's a problem for some cases they could write a spec for just those encodings)

[06:20:29.0000] <zewt>
(that are used, not just exist)

[06:22:43.0000] <annevk>
It would be a problem if they leak, which is why I think protocols and formats ought to be based on the Encoding Standard or only allow utf-8

[06:22:45.0000] <zewt>
heh i think ircd does case-insensitive comparisons with just chr | 0x20, since iirc it treats { and } as equal to [ and ] for nicks

[06:22:52.0000] <annevk>
(and then the flavor of utf-8 defined by the Encoding Standard)

[06:23:03.0000] <Jirka_>
annevk: IMHO legacy encoding in CSS could (and should be) handled in the same way as in HTML. However for legacy encodings XML parsers in browsers are not interoperable -- neither between some browsers not with non-browser implementations

[06:23:20.0000] <zewt>
(not aware of there being multiple "flavors" of utf-8)

[06:23:33.0000] <annevk>
Jirka_: browsers are not always interoperable either when it comes to encodings, I would consider all that to be a bug

[06:23:45.0000] <annevk>
zewt: error handling issue mentioned above

[06:30:22.0000] <caitp>
zewt: iirc there are bits reserved for application-specific purposes which might be accidentally transmitted and understood differently by different agents --- I can't recall what that's called, though. so you could think of that as "different flavours"

[06:30:35.0000] <zewt>
i'd call that "not utf-8 at all"

[06:30:55.0000] <caitp>
well, it's not meant to be exposed to anyone outside of the application, that's for sure =)

[06:31:22.0000] <caitp>
just think of it as utf8 with some extra bonus garbage

[06:31:23.0000] <annevk>
I'm not talking about CESU-8 or variants of that

[06:31:24.0000] <zewt>
not aware of any "reserved bits" in utf-8, either

[06:31:34.0000] <caitp>
CESU-8, that sounds like what I'm thinking of

[06:33:52.0000] <zewt>
i wonder if it's possible to satisfy the FFFE definition (efficiently) while seeking backwards in utf-8

[06:34:03.0000] <zewt>
guessing not

[06:36:00.0000] <zewt>
actually you probably could... that is, generate FFFEs without having to seek backwards without bound to figure out how many to generate (but you don't actually need to know how many, only whether you should be generating one more or not)

[06:39:27.0000] <Philip`>
zewt: (JNI has its own special UTF-8 - http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html#wp16542)

[06:39:52.0000] <zewt>
that's also just Not UTF-8(tm)

[06:39:58.0000] <Philip`>
/me has no idea how likely that is to leak out in the external world

[06:41:42.0000] <caitp>
it's not the greatest encoding in the world, it's just a tribute

[06:54:24.0000] <JakeA>
annevk: In APIs like thingOfThings.create(newThingName), if newThingName already exists, do we generally throw or return the existing thing?

[06:54:36.0000] <JakeA>
In idb it throws. Any other cases?

[06:55:25.0000] <JakeA>
annevk: Going to change the caches API. Rather than caches.add(name, new Cache(...)) it'll be caches.create(name).then(function(cache) {})

[06:55:46.0000] <JakeA>
Trying to work out what's best if the cache already exists

[06:55:52.0000] <jgraham>
Create not creating seems pretty confusing

[06:57:30.0000] <jgraham>
(if you called it "set" it would be less confusing)

[06:57:36.0000] <JakeA>
I guess if you want the get-or-create behaviour it's caches.get(name).catch(e => caches.create(name))

[06:58:23.0000] <jgraham>
Actually I guess it wouldn't

[06:58:29.0000] <annevk>
JakeA: well e.g. createElement() would always succeed

[06:59:08.0000] <JakeA>
annevk: yeah, but what about where the name is unique (like caches or idb databases)

[06:59:17.0000] <annevk>
JakeA: throwing or overwriting seems expected from maps?

[06:59:23.0000] <jgraham>
Yeah, there isn't much precedent on the platform for having this kind of datastructure

[07:00:06.0000] <jgraham>
Right, I was assuming that overwriting wasn't sensible for some reason

[07:00:30.0000] <jgraham>
if it is, then I would really expect that

[07:01:41.0000] <JakeA>
Yeah, that works pretty well. So caches.create(name) would replace 'name' with an empty cache even if one existed

[07:02:20.0000] <annevk>
JakeA: if it's a map, maybe just name it set then

[07:02:31.0000] <annevk>
JakeA: although at that point you're back at add() :p

[07:02:48.0000] <jgraham>
It's an async map, right?

[07:03:25.0000] <jgraham>
Only not quite

[07:03:25.0000] <JakeA>
jgraham: Sorta, but we're not defining an async map type

[07:03:35.0000] <jgraham>
It's an async default map

[07:03:59.0000] <jgraham>
JakeA: Well you are, just in DOM rather than ES

[07:04:03.0000] <jgraham>
Which is fine

[07:04:34.0000] <JakeA>
Here's the pattern I'm looking at https://gist.github.com/jakearchibald/69bdd0c49d205717963e

[07:06:02.0000] <JakeA>
"set" doesn't feel right. I'd expect "set" to take two args, key & value.

[07:07:52.0000] <jgraham>
Yeah, I agree

[07:08:21.0000] <jgraham>
This is doing special magic with the key to implicitly create a value

[07:08:37.0000] <jgraham>
Or maybe not with the key

[07:08:55.0000] <JakeA>
I don't think there's any magic

[07:08:58.0000] <JakeA>
it's just the key

[07:09:05.0000] <JakeA>
it's not like createElement

[07:09:29.0000] <JakeA>
caches.create(name) caches.get(name) caches.delete(name)

[07:09:41.0000] <JakeA>
it's most similar to idb's create database method

[07:10:19.0000] <JakeA>
(which throws if a database of that name already exists, so we could do the same as that, but I'm not convinced idb is a great thing to copy)

[07:10:21.0000] <jgraham>
Sure. I just mean that it's not a generic operation, it's specific to this particular type of object

[07:10:38.0000] <JakeA>
yeah

[07:12:09.0000] <jgraham>
(or, I guess, it is probably something that *could* be applicable to many types of objects, but you would need some kind of protocol for specifying the code that create() runs to generate a value. Which doesn't seem worth abstracting out)

[07:14:18.0000] <annevk>
JakeA: so is it a map or a set of caches?

[07:16:08.0000] <jgraham>
annevk: IAFAICT it's an (async) map of caches

[07:16:14.0000] <jgraham>
*AFAICT

[07:16:24.0000] <annevk>
oh right, name -> cache

[07:16:33.0000] <annevk>
sorry

[07:16:52.0000] <annevk>
so yeah, create makes sense

[07:17:10.0000] <JakeA>
annevk: What jgraham said, although all values are forced to be caches, all keys are forced to be strings, uniqueness is enforced in values

[07:17:42.0000] <annevk>
I think following IDB and throwing is fine for duplicates, provided there's has()

[07:17:56.0000] <annevk>
You probably don't want to accidentally erase a bunch of resources

[07:18:11.0000] <annevk>
JakeA: please do respond to the various issues open against this API btw

[07:18:14.0000] <JakeA>
annevk: Problems with the current API: var myCache = new Cache(); caches.add('foo', myCache); caches.add('bar', myCache);

[07:18:20.0000] <annevk>
JakeA: especially the one about it having the wrong name

[07:18:59.0000] <annevk>
JakeA: what if instead you did it as new Cache(name)

[07:19:07.0000] <annevk>
JakeA: and then cache.add(myCache)

[07:19:14.0000] <annevk>
and then cache.getByName(name)

[07:19:32.0000] <annevk>
so it's a set with identifiers on the objects

[07:20:14.0000] <annevk>
and add() would simply throw if either cache or name was already present

[07:21:29.0000] <JakeA>
annevk: Yeah, aware of the wrong name one. Not convinced "cache" is bad, but not strongly opposed to changing it.

[07:21:58.0000] <annevk>
I think the argument from Brendan about Cache not being persistent is quite persuasive

[07:22:10.0000] <JakeA>
yeah

[07:25:27.0000] <JakeA>
annevk: So, var myCache = new Cache("static-v1"); caches.add(myCache); caches.getByName("static-v1")? That solves the unique issue, but feels weird being able to create these cache things without them being part of the thing that persists them.

[07:26:19.0000] <JakeA>
Although I suppose that's true of blobs & idb too, but I don't think a cache is useful outside of caches

[07:32:19.0000] <JakeA>
annevk: just saw https://twitter.com/annevk/status/483974642336825344

[07:32:35.0000] <JakeA>
ugh

[07:32:41.0000] <annevk>
heh, that's what I said

[07:33:33.0000] <JakeA>
I'm not aware of the consensus here

[07:33:33.0000] <annevk>
JakeA: so with this you could imagine transferring the Cache() between apps

[07:33:54.0000] <annevk>
JakeA: you can transfer it between domains even if we support cloning on it

[07:34:40.0000] <JakeA>
annevk: Transferring between apps? Something like caches.copy(name, otherName)?

[07:34:49.0000] <annevk>
It seems like you need Cache to exist as an object either way

[07:35:08.0000] <annevk>
now like otherapp.postMessage(cache)

[07:35:11.0000] <annevk>
s/now/no/

[07:35:28.0000] <annevk>
potentially otherapp.postMessage(cache, [cache]) if we support transfering

[07:36:25.0000] <JakeA>
caches.get(name).then(function(cache) { otherap.postMessage(cache); })

[07:37:48.0000] <annevk>
yeah

[07:39:48.0000] <JakeA>
annevk: That's already possible in the .create & .get model, but if you got a cache via postmessage you wouldn't be able to get it back into caches. Hmm.

[07:41:18.0000] <annevk>
I kind of like what I proposed above

[07:41:57.0000] <annevk>
var files = new Cache(files); caches.add(files, ...)

[07:42:37.0000] <JakeA>
new Cache("files"); right?

[07:47:17.0000] <Domenic>
i agree that that is a bit weird ... not horrible though

[07:47:40.0000] <JakeA>
Domenic: what is?

[07:47:41.0000] <Domenic>
what is the problem with caches.set('name1', c); caches.set('name2', c) ?

[07:48:00.0000] <Domenic>
JakeA: var c = new Cache('name'); caches.add(c); seems a bit weird, but not horrible.

[07:48:29.0000] <annevk>
JakeA: yes

[07:49:20.0000] <JakeA>
Domenic: having some caches be === feels complicated and unuseful

[07:49:48.0000] <Domenic>
JakeA: that's not my mental model. My mental model is there's still only one cache object, but it got put in two entries in the cache-map

[07:50:09.0000] <Domenic>
JakeA: the same as `var x = {}; var m = new Map(); m.set('key1', x); m.set('key2', x);`

[07:50:22.0000] <Domenic>
is that the wrong mental model?

[07:50:43.0000] <JakeA>
Domenic: No, but is there anywhere else we do that with permanent storage?

[07:51:17.0000] <Domenic>
JakeA: I dunno, but, is caches really a permanent storage model, or is it an async map?

[07:51:34.0000] <Domenic>
that is, when you store something in caches, do you serialize it?

[07:51:48.0000] <Domenic>
i think serialization is what draws the line for "permanent storage" vs. "async map" for me

[07:52:05.0000] <wanderview>
annevk: it seems with |var files = new Cache(files); caches.add(files, ...)|, we would still might want to store stuff to disk even if it hasn't been added to caches yet

[07:52:22.0000] <wanderview>
annevk: otherwise someone could add many large resources to the cache and we would have to maintain them all in memory

[07:52:54.0000] <Domenic>
Yes, wanderview makes a good point... at what point do things get put into disk vs. in-memory?

[07:53:35.0000] <wanderview>
I could see that as a common footgun too...  new Cache, add all my resources, put in caches at the end

[07:53:55.0000] <Domenic>
well, until it gets GC'ed, I can't imagine ever being able to evict them from memory...

[07:54:06.0000] <Domenic>
just saying that you put it on disk doesn't mean it can move out of memory

[07:55:16.0000] <wanderview>
Domenic: can't we stream the resources to disk and only read into memory if there is an outstanding Promise<Response>?

[07:55:33.0000] <JakeA>
At the moment, in the current API: var cache = new Cache(); cache.add(things...);

[07:55:45.0000] <JakeA>
I'd expect stuff to be written to disk because of the memory issue

[07:56:03.0000] <JakeA>
but if that isn't added to `caches`, it'd be deleted when `cache` is gc'd

[07:56:15.0000] <wanderview>
JakeA: yea, I think thats possible, but its a bit of a complication to clean up the filesystem on GC I think

[07:56:41.0000] <JakeA>
The caches.create('name').then(c => c.add(things...)) model prevents that

[07:56:49.0000] <Domenic>
wanderview: if the things you add to the cache are accessible as local variables in JS anyway (including temporary ones), you can't remove them from memory until they get GCed ... right?

[07:57:37.0000] <wanderview>
Domenic: I guess I was thinking of the cache.add(requests...) case... where content is pre-loading the cache and not explicitly waiting for the response

[07:57:39.0000] <Domenic>
JakeA: OK, that is helpful. So we are saying in-memory caches are not useful? Or are we saying that new Cache() would still work, but caches.create('name') is a way of getting one that is synced to storage

[07:57:51.0000] <JakeA>
Although there's still cache.get('name').then(function(cache) { caches.delete('name'); })

[07:58:07.0000] <JakeA>
So deleting from disk on gc is still needed

[07:58:18.0000] <Domenic>
JakeA: for testability if nothing else I would think in-memory caches are useful.

[07:58:27.0000] <JakeA>
unless we can put cache objects in some kind of "disabled" state

[07:58:33.0000] <Domenic>
this is going down a dark path

[07:58:51.0000] <wanderview>
JakeA: or we replace caches.delete() with cache.deleteFromCaches() or something... but thats kind of ugly :-(

[07:59:30.0000] <Domenic>
wanderview: that doesn't help, cache still exists in memory.

[07:59:44.0000] <Domenic>
wanderview: unless deleteFromCaches() also puts it in some sort of disabled state

[07:59:54.0000] <JakeA>
the disabled state thing feels ugh

[08:00:00.0000] <annevk>
wanderview: hmm, don't we have an equivalent problem with new File() or new Blob()?

[08:00:01.0000] <Domenic>
yes please don't, if possible

[08:00:12.0000] <wanderview>
I think dealing with the GC file eviction is required

[08:00:24.0000] <wanderview>
annevk: yea, maybe its not the problem I think it is

[08:00:34.0000] <JakeA>
(brb, meeting)

[08:00:42.0000] <wanderview>
its a complication, but probably a solved one

[08:01:16.0000] <Domenic>
why is it caches.each() instead of caches.forEach() O_O

[08:01:54.0000] <annevk>
Domenic: the browser might serialize it

[08:02:13.0000] <Domenic>
annevk: can't tell what that's in response to

[08:02:14.0000] <wanderview>
question... var c = new Cache(); c.add(requests...); without putting in caches count against the origin's disk quota?

[08:02:19.0000] <annevk>
Domenic: or try to keep it alive in some other way

[08:02:43.0000] <wanderview>
I think it must as we will want the flexibility to save to disk at any time... just wanted to clarify since we were talking about "memory only" cache objects

[08:02:46.0000] <annevk>
Domenic: the cache API is a permanent storage model (and therefore has the wrong name)

[08:03:09.0000] <Domenic>
annevk: is the cache API permanent, or is the caches API permanent?

[08:03:31.0000] <annevk>
well only caches is something that survives a reboot

[08:03:41.0000] <Domenic>
wanderview: I think that makes sense, as long as the programmer's mental model is that it's entirely in-memory until explicitly saved?

[08:04:28.0000] <Domenic>
each vs. forEach filed https://github.com/slightlyoff/ServiceWorker/issues/351

[08:05:31.0000] <wanderview>
Domenic: hmm... I guess I was trying to say I will want to write to disk immediately to allow us to GC memory when possible, so not sure we are on the same page... what is the "explicit save" step in your view?

[08:05:46.0000] <Domenic>
wanderview: well from my perspective that's what's being discussed in this chat :)

[08:06:04.0000] <Domenic>
wanderview: so e.g. in the existing `var c = new Cache(); caches.set('name', c)` API, the `caches.set()` step saves to disk

[08:06:20.0000] <Domenic>
wanderview: whereas in the `caches.create('name').then(c => ...)` API, it is created-and-saved in the same step

[08:06:26.0000] <Domenic>
although "saved" is the wrong word

[08:06:39.0000] <Domenic>
more like... "made into something that is backed by persistent storage"

[08:07:01.0000] <Domenic>
versus in-memory only (from the programmer's point of view, even if the implementation puts some stuff on disk for its own reasons)

[08:07:24.0000] <Domenic>
the `var c = new Cache(); /* never store it in caches */` usage would be "in memory only" and useful for testing and such.

[08:07:36.0000] <wanderview>
Domenic: hmm, so in that case it would *not* count against quota until the caches.set()

[08:08:00.0000] <Domenic>
I think so, yeah... if that works from a disallowing-abuse POV

[08:08:10.0000] <Domenic>
or maybe there are separate temporary and persistent quotas

[08:08:29.0000] <annevk>
Cache should use the same quota as Blob I suppose

[08:08:43.0000] <annevk>
but I can see how it all gets rather tricky :/

[08:09:04.0000] <wanderview>
Domenic: I guess I just worry about people waiting to call caches.set() at the end in order to avoid a partial cache object

[08:09:40.0000] <Domenic>
annevk: agreed, same as Blob makes a lot of sense...

[08:09:44.0000] <wanderview>
I'm sure we can make it work

[08:09:54.0000] <Domenic>
wanderview: well, I think a caches.create('name') API would mitigate that

[08:10:03.0000] <Domenic>
the constructor could be a lower-level API used by unit tests and such

[08:10:19.0000] <Domenic>
whereas the best practice if you want a persistent cache would be caches.create

[08:10:24.0000] <wanderview>
Domenic: yea, I guess its an education issue (although at some point those become footguns)

[08:10:58.0000] <Domenic>
At this point it all makes sense in my head; curious what JakeA thinks :)

[08:11:23.0000] <wanderview>
Domenic: what is the advantage of memory-only for testing vs. what we recommend for production use?

[08:11:40.0000] <JakeA>
Domenic: will read through when this meeting is done (yey for meetings)

[08:12:51.0000] <Domenic>
wanderview: if you are not very careful, you will fill up your persistent storage with repeated unit-test data

[08:13:15.0000] <wanderview>
good point

[08:37:03.0000] <annevk>
I emailed the HTTP WG about an issue... but why? *cries*

[08:39:02.0000] <caitp>
it's going to be okay anne

[08:41:36.0000] <annevk>
caitp: that's what they said last time

[08:56:55.0000] <SamB>
Domenic: so this "save" is kind of like migrating stuff from /tmp or /var/cache to /var/lib ?

[08:57:22.0000] <Domenic>
SamB: from my perspective as a JS developer /tmp is an implementation detail of the browser

[08:57:28.0000] <Domenic>
SamB: it could be in-memory for all I care

[08:57:41.0000] <SamB>
/tmp CAN be in-memory

[08:57:47.0000] <SamB>
anyway this is a metaphor

[08:57:48.0000] <Domenic>
yes, well, there you go

[08:57:56.0000] <Domenic>
the only observable thing (as far as I can tell) is whether the data survives a reboot

[08:59:10.0000] <SamB>
and naturally, JS apps don't really get to complain if data turns out to survive that they wouldn't have expected to survive, right?

[08:59:25.0000] <Domenic>
well, it should not observably survive

[08:59:29.0000] <SamB>
hmm

[08:59:42.0000] <annevk>
Domenic: is there a document that explains why we don't want to expose promise state?

[09:00:05.0000] <SamB>
so maybe not the /var/cache part then; that can only *theoretically* get nuked, afaict

[09:00:27.0000] <SamB>
I mean, stuff is still supposed to work if you nuke it, but I've not heard of any automatic process which would nuke it

[09:01:15.0000] <Domenic>
annevk: hmm. we don't want to expose, or we don't want to allow external modification of?

[09:01:51.0000] <annevk>
Domenic: don't expose I guess

[09:02:36.0000] <Domenic>
annevk: I don't think exposing is bad. Several promises libraries have promise.inspect() that returns e.g. { state: "fulfilled", value: [whatever] }

[09:02:50.0000] <Domenic>
the use cases are dubious however

[09:03:03.0000] <Domenic>
i guess it kind of encourages zalgo code?

[09:03:28.0000] <Domenic>
if (promise.inspect().state === "fulfilled") { runUserCodeWith(promise.inspect().value); } else { promise.then(runUserCodeWith); }

[09:03:36.0000] <Domenic>
zalgo in action

[09:14:33.0000] <annevk>
ta

[09:47:45.0000] <JakeA>
Domenic: re each vs forEach, we didn't want to use a name that may be taken by asyncmap, as the behaviour of cache.each may differ

[09:48:04.0000] <JakeA>
Oh you made a ticket

[09:53:13.0000] <JakeA>
annevk: Domenic: exposing promise state would have helped in this case https://github.com/jakearchibald/trained-to-thrill/blob/master/www/static/js/app.js#L64-74 - means I wouldn't need showingLiveData.

[09:54:22.0000] <JakeA>
Domenic: Done the read-back. Are you suggesting `caches.create('name')` work, but also `new Cache()`?

[11:05:32.0000] <Domenic>
JakeA: yes, I think so, at least. new Cache() is in memory; caches.set('name', c) and/or c.makePersistentVia(caches) makes c persistent; caches.create('name') combines the two at once as a sugar layer

[11:06:39.0000] <annevk>
JakeA: maybe file a bug on the promise spec?

[11:06:49.0000] <annevk>
Domenic: we need to start thinking about ES7-promises

[11:07:06.0000] <annevk>
Domenic: at least finally, we should add finally

[11:07:11.0000] <Domenic>
annevk: agreed on that one

[11:07:35.0000] <Domenic>
annevk: I can have an extension spec written up as an "ES7 track proposal" for next TC39; if everyone likes it then everyone can implement it ASAP.

[11:07:47.0000] <Domenic>
(ES is a living standard; they just don't know it yet.)

[11:08:09.0000] <annevk>
Domenic: sgtm (is that enough? :p)

[11:08:17.0000] <Domenic>
:P

[11:08:41.0000] <Domenic>
JakeA: I'm not sure the code would look *that* much better. I dunno, it's pretty rare. Perhaps more common than Promise.race, I'll grant you.

[11:26:14.0000] <annevk>
http://annevankesteren.nl/2014/06/vats now with analogies

[11:27:40.0000] <MikeSmith>
_win 30

[11:34:47.0000] <Hixie>
"ES is a living standard; they just don't know it yet" <- i wish it was that simple :-)

[11:38:07.0000] <Domenic>
From the perspective of implementers, it's pretty close.

[11:38:14.0000] <Domenic>
the messaging is all screwed up

[11:38:34.0000] <Domenic>
but there are "ES7" things that are shipping, and "ES6" things that are nowhere near done or even started on implemnetatios

[11:38:47.0000] <Domenic>
and those ES7 things are locked whereas the ES6 things change all the time

[11:39:01.0000] <Domenic>
So stability is directly proportional to shipping or not

[11:39:16.0000] <Domenic>
and people are starting to realize this

[11:41:22.0000] <Ms2ger>
Domenic, people *here* know that ;)

[11:42:27.0000] <Domenic>
annevk: those are good analogies

[11:42:38.0000] <Hixie>
it's definitely not a living standard in the HTML sense from the perspective of implementors, in my experience

[11:42:57.0000] <Hixie>
i've asked implementors "how about we add foo to ES" and they say "we can'd do that now, because ES is frozen"

[11:42:57.0000] <Domenic>
I feel like implementers are coming around. I might be over-optimistic.\

[11:43:06.0000] <Domenic>
O_O

[11:43:07.0000] <annevk>
Domenic: I love talking to Allen

[13:04:04.0000] <Domenic>
How do I create WebIDL "mixins" that don't appear in proto chains or on the global? Is it just [NoInterfaceObject] + always use implements, not : ?

[13:06:51.0000] <Ms2ger>
Correct

[13:07:16.0000] <Ms2ger>
The former for "on the global", the latter for "in proto chains"

[13:10:42.0000] <MikeSmith>
annevk: I know Dominic Clooney well enough to know that he wasn't trying to be contemptuous or dismissive in that bug comment

[13:10:54.0000] <MikeSmith>
https://code.google.com/p/chromium/issues/detail?id=389124#c8

[13:15:01.0000] <MikeSmith>
annevk: I think he should have used different words there but I don't think his comments are indicative of trying to blow anything off

[13:17:52.0000] <tantek>
MikeSmith - sorry I don't buy that. The very phrase "the consensus within Google" should NEVER be used to justify anything standards related.

[13:18:03.0000] <tantek>
such a phrase is *political* not technical and is not helpful

[13:18:35.0000] <annevk>
I got a bit pissed because various times I have heard about Google discussing things internally about service workers / fetch that are relevant to everyone in the community

[13:18:49.0000] <tantek>
it also implies that there is a "internal standards process" at Google that happens before they send someone to "litigating" their work outside. Also a very poor choice of word.

[13:19:05.0000] <tantek>
that kind of delayed open behavior is unacceptable

[13:19:15.0000] <tantek>
so it's right for annevk to call them out on it

[13:19:30.0000] <tantek>
annevk - you're right to be pissed.

[13:19:49.0000] <tantek>
those that behave that way at Google have a cultural problem that is antithetical to open standards development.

[13:20:02.0000] <tantek>
it's fine to "vet" or "double-check" ideas privately, with colleagues, co-workers etc.

[13:20:15.0000] <tantek>
but any kind of "consensus" discussion should happen in an open space

[13:21:10.0000] <tantek>
MikeSmith - I accept that there is no ill will. That's not the problem. The problem is one where individuals like in that thread don't even realize that their behavior (perhaps learned from internal culture) is antithetical to open standards development

[13:44:38.0000] <MikeSmith>
tantek: yeah like I said, I think he could have used some better words there. And yeah I think what he describes is probably not the process that's likely to produce the best results

[13:45:19.0000] <tantek>
yeah. it however seems to shed light on what may be standard procecdure behind Google's walls. that's the larger concern

[13:46:21.0000] <Domenic>
I think it's somewhat OK to put the job of interfacing with the wider world on one person's shoulders

[13:46:37.0000] <Domenic>
Some people are intimidated by standards lists etc.

[13:49:44.0000] <Ms2ger>
position: sticky is gone from Blink? Bad for mobile perf?

[13:51:26.0000] <MikeSmith>
Domenic: I think most people are intimidated by standards lists. The ones who aren't are the odd exceptions

[13:51:54.0000] <Ms2ger>
That does seem like something we should improve

[13:52:28.0000] <Domenic>
Specifiction seems unintimidating. Although not entirely useful (yet?).

[13:52:42.0000] <Ms2ger>
Never heard of it

[13:53:02.0000] <MikeSmith>
Ms2ger: it's something Robin set up

[13:53:17.0000] <MikeSmith>
Ms2ger: so that automatically means you'll love it

[13:53:39.0000] <Ms2ger>
Ha

[13:54:16.0000] <MikeSmith>
Ms2ger: discourse.specifiction.org

[13:54:47.0000] <Ms2ger>
So what is it?

[13:58:09.0000] <JonathanNeal>
Ms2ger: it’s an on topic chat room, slowed down.

[13:58:21.0000] <Ms2ger>
Aha

[13:58:23.0000] <Domenic>
I think of it as a prototype for replacing mailman

[13:58:35.0000] <Domenic>
But right now everything is in one big forum so it's pretty unfocuse

[13:58:46.0000] <Ms2ger>
So it's moving discussion away from where people expect it to be, without telling them?

[13:58:58.0000] <Ms2ger>
That seems like somewhat poor form

[13:59:22.0000] <Domenic>
Perhaps. It's an experiment, is the somewhat-buyable excuse.

[14:05:28.0000] <JonathanNeal>
I like that posts are more thought out than chat and easier to create than a full blog. I fear it might develop an aggressive mob mentality as I’ve seen in GitHub issues, Twitter threads, and the beccapurple Specifiction.

[14:09:02.0000] <JonathanNeal>
I would also recommend it for all of the creative ideas that appear there, and the notable contributors to the web who chime in with their own responses.

[14:10:41.0000] <Domenic>
The issue (aside from the now there are two things problem Ms2ger alludes to) is that it's not focused around any particular technology implementers care about. It's kind of like whatwg⊙wo in that way, if more people knew about it.

[14:11:24.0000] <Domenic>
Except unlike whatwg@, you don't get a guarantee of a personal response from Hixie, so a lot of threads can just become developers saying "I'd like this" or "here's my bikeshed color" with no driving toward a solution.

[14:12:16.0000] <Hixie>
"I think it's somewhat OK to put the job of interfacing with the wider world on one person's shoulders" <- that's not the problem, the problem is that this job should come _before_ making decisions, not after

[14:20:45.0000] <Domenic>
well, that's where we get into charitable vs. uncharitable interpretations. Charitable: we want it, and we hope Alex can argue for it successfully, so we're implementing now on that assumption. Uncharitable: we're doing it no matter what; Alex's job is to make other people fall in line.

[14:22:44.0000] <tantek>
What Hixie said about "this job should come _before_ making decisions, not after"

[14:22:47.0000] <tantek>
that.

[14:23:18.0000] <tantek>
Domenic, care to explain how you're interpreting anything charitable from "consensus within Google" ?

[14:23:34.0000] <tantek>
which sounds awfully like "done deal within Google"

[14:24:06.0000] <tantek>
and "litigating" sounds like force. I mean at least say something like "negotiating" but even that is bad as it sounds antagonistic.

[14:24:14.0000] <Domenic>
tantek: I am trying, and possibly failing to combat I'm-a-Googler-now bias. But to me it sounds like "after talking with our security folks, this is the solution we thought would work."

[14:24:38.0000] <Domenic>
And yes, litigating sounds very bad. Perhaps a word someone who is scared of standards bodies would use.

[14:25:19.0000] <SamB>
who said that word?

[14:26:17.0000] <SamB>
and I thought it was more like "now there are 17 competing specs"

[14:26:28.0000] <tantek>
Domenic - I can understand people disliking (whether for fear or other reasons) standards bodies, or in particular standards mailing lists.

[14:26:40.0000] <tantek>
SamB talking about https://code.google.com/p/chromium/issues/detail?id=389124#c8

[14:26:43.0000] <SamB>
though actually that didn't work out so bad for "menu"

[14:27:26.0000] <SamB>
I mean, it's kind of dying now that .desktop has come along, but before that it was pretty darn useful

[14:27:40.0000] <Domenic>
oooh i wonder how the Blink <menu> implementation is coming along

[14:27:54.0000] <Domenic>
will be so exciting to have that be more than just a Firefox-only feature

[14:28:21.0000] <Domenic>
/me still likes most of the stuff Hixie has come up with, even in our brave new web components world where everyone builds their own

[14:28:34.0000] <SamB>
"menu" being the debian package that let other packages ship menu entries in *one* format for all WMs

[14:28:46.0000] <SamB>
even though they all had their own menu formats

[14:31:26.0000] <tantek>
"world where everyone builds their own" is merely XML "2.0" (in contrast to actual "XML 2.0")

[14:31:39.0000] <tantek>
I'm going to grab a big bag of popcorn to watch that show

[14:39:31.0000] <SamB>
hmm, if the idea is to prevent trouble with sites that DON'T WANT service workers, how is a new header on the REQUEST going to help AT ALL?

[14:54:50.0000] <SamB>
hmm, I guess it could help when a site becomes AWARE of the rogue SW during the 24-hour window

[15:05:09.0000] <SamB>
https://datatracker.ietf.org/doc/draft-saintandre-xdash-considered-harmful/ expired :-(

[15:06:27.0000] <Domenic>
Welp, that's it, I guess we all have to add X- back to our headers now

[15:08:00.0000] <SamB>
lol

[15:08:24.0000] <SamB>
/me really isn't sure the automatic expiry thing is at all useful

[15:10:30.0000] <SamB>
oh, the tracker is just dumb

[15:10:35.0000] <SamB>
it didn't really get dropped

[15:13:13.0000] <tantek>
isn't automatic expiry the complete opposite of living standard?

[15:13:59.0000] <SamB>
well it would hardly happen to HTML

[15:14:38.0000] <SamB>
since HTML gets edited way more often than every 6 months

[15:16:12.0000] <Hixie>
when i was editing an I-D

[15:16:15.0000] <SamB>
anyway, I really wish there was an obvious place to point out that a draft appears to be an ancestor of another draft, so that someone could make the IETF tools aware of this fact ...

[15:16:19.0000] <Hixie>
i published every edit as a new version

[15:16:26.0000] <Hixie>
and they literally complained that this was generating too much work for them

[15:16:38.0000] <Hixie>
because apparently someone has to manually do something every time you send an update (!)

[15:16:43.0000] <SamB>
hahaha

[15:16:51.0000] <SamB>
did you tell them to automate it?

[15:17:06.0000] <Hixie>
it ended up being a non-issue since i quit editing the spec shortly after

[15:17:27.0000] <tantek>
"someone has to manually do something every time" - hey that sounds like W3C publication!

[15:17:39.0000] <SamB>
tantek: yeah, but this was about DRAFTS

[15:17:48.0000] <tantek>
SamB - same thing - WORKING DRAFTS

[15:18:28.0000] <SamB>
well, I mean, they don't have like dev.ietf.org or anything

[15:19:28.0000] <SamB>
Hixie: I suppose, if nothing else, it would tend to spam the mail archive

[15:20:13.0000] <Hixie>
the idea that one can update a spec too fast was so foreign to me i was baffled

[15:20:22.0000] <SamB>
anyway evidently that draft somehow ended up as this is RFC 6648/BCP 178

[15:20:23.0000] <Hixie>
"please don't fix the errors that quickly"

[15:21:30.0000] <SamB>
Hixie: maybe what they really meant was "put it up somewhere else if you're gonna fix things that quickly, then just send us a snapshot every week or so"

[15:22:07.0000] <Hixie>
who knows

[15:22:12.0000] <Hixie>
seems pretty dumb eitherr way

[15:22:40.0000] <Hixie>
i mean, either they have the canonical copy, in which case it better have all known bugs fixed, or they don't, in which case, what's the point in theirs existing

[15:26:55.0000] <tantek>
Hixie as the Mozart of spec editing. "There's just too many edits, make fewer"

[15:27:36.0000] <tantek>
http://www.toomanynotes.com/Amadeus.htm

[15:31:21.0000] <SamB>
Hixie: so yeah, maybe they should offer to host ED repos like w3 does ...

[15:32:32.0000] <SamB>
lol

[15:33:00.0000] <SamB>
"Which few did you have in mind, Majesty?"


2014-07-02
[19:24:25.0000] <roc>
/me watches Sylvain and Tab go head to head

[19:47:55.0000] <TabAtkins>
roc: I'm *super* pissed about that. Totally done talking with Sylvain for a while.

[19:48:09.0000] <TabAtkins>
Happened before. I should know better by now.

[19:48:20.0000] <SamB>
what forum was this?

[19:48:24.0000] <TabAtkins>
Twitter.

[19:48:53.0000] <TabAtkins>
The moment he switches from arguing to snarking, I just need to block him for a while.

[19:49:00.0000] <TabAtkins>
Too fucking frustrating otherwise.

[19:49:01.0000] <SamB>
that does not sound like a good place to argue

[19:52:13.0000] <TabAtkins>
The smug subtweeting afterwards is the worst part (which is why I need to just block for a while).

[19:54:59.0000] <astearns_>
TabAtkins: FWIW, I think the main disconnect is between what you think (and continue to maintain) you said, and what everyone else in the room heard at the time

[19:55:29.0000] <TabAtkins>
I'm aware of what the disconnect is. Doesn't make it any less wrong, or any less annoying when people insist that I *really meant* something different and evil.

[19:55:44.0000] <TabAtkins>
I know what I actually said. What people heard is their business.

[19:56:32.0000] <astearns>
TabAtkins: I was in the room, and I heard something different than what you maintain you said. Yes, it is my business, but I'm not the only one

[19:56:54.0000] <astearns>
and I do expect that you really meant something different - what you're maintaining you said now

[19:58:53.0000] <TabAtkins>
And it certainly wasn't helped by a few people straight up saying during the discussion that I had previously said "Chrome would accept any changes the WG makes" and implying that I was now going against my word, when I was careful the entire time to say that it was "as long as it doesn't freeze due to usage". Which should be a matter of course, but some

[19:58:53.0000] <TabAtkins>
people like pretending that they can change reality by altering a spec.

[19:59:31.0000] <roc>
time for an emergency subject change

[19:59:34.0000] <TabAtkins>
I suspect that that (some people saying I had said something different in the past) probably had an effect on what other people "heard" me say. Memory is shitty, after all.

[19:59:37.0000] <TabAtkins>
roc: Kittens

[19:59:52.0000] <SamB>
it sounds like everyone should just agree that what TabAtkins meant to say and what other people though TabAtkins meant to say are not the same thing, and stop worrying about the details of whether he said either of those things

[20:00:06.0000] <TabAtkins>
SamB: It would be great if everyone did that, yes.

[20:00:32.0000] <TabAtkins>
roc: You're supposed to *deploy* the subject change when you say that.

[20:00:37.0000] <SamB>
I suspect that the the those two things are actually ideas, in any case, and what he said are words

[20:00:41.0000] <TabAtkins>
roc: Can't just expect the rest of the room to change itself.

[20:00:53.0000] <TabAtkins>
SamB: I communicate only through interpretative dance, so no.

[20:00:58.0000] <SamB>
lol

[20:01:08.0000] <SamB>
TabAtkins: no wonder nobody had a clue what you meant

[20:01:20.0000] <astearns>
it can be difficult at times :)

[20:01:26.0000] <TabAtkins>
SamB: Dance is the universal language. Not my fault the rest of the room hadn't learned it.

[20:01:35.0000] <TabAtkins>
Nor does that make it less universal, if that's what you're thinking.

[20:02:05.0000] <SamB>
obviously terrans are just rude

[20:02:07.0000] <astearns>
it does add a bit of savior-faire to the proceedings, though

[20:02:19.0000] <roc>
savoir

[20:02:27.0000] <astearns>
gah

[20:02:31.0000] <TabAtkins>
*Jesus Christ

[20:02:41.0000] <astearns>
no need for any more savior-faire

[20:02:55.0000] <TabAtkins>
That's the Christian ren-faire.

[20:03:23.0000] <SamB>
why didn't I ever get an invite?

[20:03:32.0000] <TabAtkins>
Not savory enough.

[20:03:48.0000] <roc>
TabAtkins: here's another subject for you. abarth said on www-style a while back that Chrome people were trying to find a script-based approach to generic scrolling effects (sticky, sliding panels, parallax scrolling, etc). What's happening with that? Is there a nascent API proposal anywhere?

[20:03:58.0000] <TabAtkins>
roc: brb

[20:05:57.0000] <astearns>
can't find the video of shirtless dancing at TPAC :(

[20:06:57.0000] <SamB>
'computed COMEFROM' ... mind ... broken!

[20:08:32.0000] <TabAtkins>
roc: Not really, not yet. We're still not sure quite what to do. We have a few ideas, just not enough to put a proposal together yet.

[20:08:44.0000] <TabAtkins>
roc: We discussed it a bit at the Input meeting last week in Seattle.

[20:09:37.0000] <TabAtkins>
roc: Basically, we think that, while moving more effects to a scrolling thread is great for lots of things, it makes it impossible to simulate some existing effects (and thus to do your own effects of the same caliber).

[20:10:28.0000] <TabAtkins>
roc: So we think we'll need some way for pages to opt back into sync scrolling for elements or the page, along with well-designed timing for the scroll events and such, plus other main-thread improvements to make it easier to do the effects and hit every frame.

[20:10:39.0000] <roc>
I don't know if you're aware yet, but we're very interested in extending Web Animations to support scroll position as a timing source. Similar to your CSS-based proposal.

[20:10:50.0000] <TabAtkins>
roc: Pair that with continuing development of off-thread developments in the declarative realm.

[20:11:05.0000] <TabAtkins>
roc: Like, yes, custom timing sources such as scroll position in Web Anim.

[20:11:23.0000] <TabAtkins>
And yeah, the Web Anim approach is our preferred direction for that kind of thing right now, with possible a CSS layer afterwards.

[20:12:06.0000] <roc>
abarth rejected CSS snapping (and apparently position:sticky?). Any idea whether any declarative proposals will be accepted by Chrome in the medium term?

[20:13:02.0000] <roc>
do you think Web Animation with a scroll position timing source is above Adam's bar?

[20:13:22.0000] <roc>
or if you don't want to channel him, where's your bar?

[20:16:19.0000] <TabAtkins>
roc: Adam's on one side of the divide, I'm on the other, and I've been pulling the team a little more on the "we really do need to offer sugar for authors" side lately.

[20:16:32.0000] <roc>
ok good to know :-)

[20:16:45.0000] <TabAtkins>
So we're probably going to do at least a subset of snapping. As we figure it out, I'll send feedback.

[20:16:58.0000] <TabAtkins>
Sticky is going to happen, we just had a bad impl that didn't mesh well with our compositor.

[20:17:12.0000] <roc>
ok

[20:17:14.0000] <roc>
that's also good to know

[20:17:16.0000] <TabAtkins>
And it was making it hard to improve things in the meantime.

[20:17:37.0000] <roc>
for CSS snapping, I think we can actually do most of what we want using script.

[20:17:42.0000] <TabAtkins>
Doing a lot of revolution-not-evolution in our compositing pipeline lately, trying to fix a lot of latent bugs.

[20:17:58.0000] <TabAtkins>
roc: We don't think you can do high-fidelity snapping async.

[20:18:41.0000] <roc>
is there a short explanation?

[20:22:00.0000] <roc>
I agree you can't do perfect-fidelity snapping without telling the compositor enough information that it can execute a complete scrolling gesture plus snapping without any main-thread activity.

[20:24:35.0000] <TabAtkins>
Yeah, that's basically it. That's not something you can tell the compositor right now.

[20:25:19.0000] <roc>
but if the compositor sent an event to the main thread when the user scroll gesture ends, where the event contains the scroll position the compositor will settle on after fling momentum ends etc, then the main thread can compute a snapped position and tell the compositor, which would be responsible for landing at that position --- either by tacking on more animation or by adjusting the...

[20:25:21.0000] <roc>
...in-progress animation.

[20:25:22.0000] <TabAtkins>
And we think that ultimately the set of things you might want to do will exceed what we choose to expose in "tell the compositor about X".

[20:26:20.0000] <SamB>
/me wonders if this is a bad time to mention how much he hates those pages with the background images that don't scroll with the rest of the page, thus requiring lots of needless recompositing ...

[20:26:59.0000] <roc>
the latency between the user scroll gesture ending and the compositor getting the snapped scroll position might not be so bad. After all, snapping generally requires scroll direction and/or velocity changes anyway.

[20:29:52.0000] <roc>
anyway, the impasse over CSS snapping specs means we'll probably have to try that approach for our existing snapping use-cases. Using ScrollOptions.behavior = "smooth" with scrollTo/scrolTop to tell the compositor to snap to a position.

[22:39:54.0000] <abarth>
roc: you can implement snap points today without help from the browser

[22:40:01.0000] <abarth>
roc: amazon has a nice implementation

[22:40:35.0000] <abarth>
the problem is more how to make it possible for folks to re-use implementations written by experts

[22:52:28.0000] <roc>
AFAIK shipping browsers lack two things

[22:52:42.0000] <roc>
1) a way to reliably detect the end of a user scroll gesture

[22:53:36.0000] <SamB>
roc: how would that work exactly

[22:53:41.0000] <SamB>
what is this "end"

[22:53:52.0000] <roc>
2) a way to tell the compositor to scroll smoothly to a destination in a way that dovetails nicely with momentum scrolling that carries on after the user scroll gesture has finished

[22:54:04.0000] <SamB>
if I grab the bar, whose to say where I'm going to release it?

[22:55:42.0000] <roc>
SamB: with a "fling gesture" on a touchscreen, the touch-up is the end of the user scroll gesture, but scrolling continues until it runs out of momentum

[22:56:10.0000] <SamB>
so, how would this thing work on a desktop with a scrollbar?

[22:56:56.0000] <roc>
for thumb dragging, we'd fire the "user scroll gesture ended" event when the user releases the thumb.

[22:57:06.0000] <SamB>
sounds kind of jarring

[22:57:15.0000] <SamB>
to snap AFTER the user releases the thumb

[22:57:51.0000] <SamB>
not that I've got a better idea

[22:58:04.0000] <roc>
that matches how most snapping works on touch devices

[22:58:46.0000] <abarth>
roc: amazon doesn't use scrolling to implement snap points

[22:59:27.0000] <abarth>
maybe I should study their code more, but I would be surprised if they did

[23:00:28.0000] <abarth>
roc: yes, we should add scrollstart and scrollend events

[23:00:31.0000] <roc>
if so, it doesn't work with async scrolling and touch panning, so it won't be a great experience

[23:00:45.0000] <abarth>
roc: the latter doesn't follow from the former

[23:00:52.0000] <abarth>
in fact, it's a great experience

[23:00:57.0000] <abarth>
try it

[23:00:59.0000] <roc>
on a really low end device?

[23:01:19.0000] <abarth>
roc: it works well on the devices I have

[23:01:33.0000] <abarth>
maybe I should try on lower end devices?

[23:01:53.0000] <abarth>
roc: what is the minimum latency to talk to the main thread on your target device?

[23:02:18.0000] <abarth>
meaning, under optimal conditions, how long does it take for the main thread to program data into the compositor

[23:05:48.0000] <roc>
less than 2x the vsync interval.

[23:06:03.0000] <roc>
but the real problem is that conditions are not always optimal :-)

[23:06:21.0000] <abarth>
so, if vsync is 16ms

[23:06:24.0000] <abarth>
it takes 8ms!

[23:06:36.0000] <abarth>
how hard have you tried to bring that number down?

[23:06:42.0000] <roc>
it's really easy to blow the 16ms frame budget with main-thread activity. You know that of course :-)

[23:07:22.0000] <abarth>
well, if your minimum latency is 8ms, I'm not surprised

[23:07:29.0000] <abarth>
we're getting more like 2ms

[23:07:41.0000] <abarth>
we're working on getting it down to 1ms

[23:08:13.0000] <roc>
I'm not worried about the best-case performance.

[23:08:52.0000] <roc>
I'm worried about the main thread getting blocked by a script or something outside our immediate control.

[23:08:53.0000] <abarth>
ok, then what's causing you not to get best-case performance when the user scrubbing a snap point widget?

[23:09:03.0000] <abarth>
who's control?

[23:09:44.0000] <roc>
the UA's control.

[23:09:50.0000] <abarth>
right, the UA is not in control

[23:09:57.0000] <abarth>
the web developer is in control

[23:11:53.0000] <abarth>
my experience discussing this topic is that when you push on the motivation for snap points

[23:12:14.0000] <abarth>
you eventually get down to the person who supports snap points saying that JavaScript developers aren't skilled developers

[23:12:45.0000] <abarth>
I think it's fair to say that some JavaScript developers are highly skilled and some are less highly skilled

[23:13:15.0000] <abarth>
which is why I wrote above that this problem is really about how to you get the less skilled developer to reuse work done by highly skilled developers

[23:13:42.0000] <abarth>
historically, we've done that by having the highly skilled developers hard-code behaviors into browsers

[23:14:26.0000] <abarth>
but another approach is to encourage highly skilled JavaScript developers to make their work reusable by less skilled developers

[23:14:34.0000] <roc>
BTW I completely misunderstood your earlier question about update latency...

[23:14:49.0000] <abarth>
oh good

[23:14:53.0000] <abarth>
you had me worried :)

[23:14:54.0000] <roc>
the problem is that to keep main-thread latency reliably low you have to prevent the "less skilled developer" from doing anything that could blow the latency budget

[23:15:14.0000] <abarth>
which is a scheduling problem

[23:15:24.0000] <abarth>
iOS does that by controling your event loop

[23:15:33.0000] <abarth>
when the finger is down on the glass

[23:15:37.0000] <roc>
so it's not just a matter of "use this library for scrolling", it's also "don't do anything else that could run too long", and there's a long list of things there

[23:15:39.0000] <abarth>
only certain events will come out of the event loop

[23:15:41.0000] <abarth>
the rest are delayed

[23:15:51.0000] <abarth>
we'll likely do something like that too

[23:16:05.0000] <abarth>
but we haven't studied that aspect of the problem in great detal yet

[23:16:08.0000] <abarth>
detail

[23:16:45.0000] <abarth>
roc: put another way, how did the less skill developer steal time from the snap points widget's time slice?

[23:18:44.0000] <roc>
lots of ways ... requestAnimationFrame, triggering a complex CSS restyle/reflow, setTimeout

[23:19:19.0000] <abarth>
can you see how those are scheduling problems?

[23:19:33.0000] <roc>
no, not really

[23:19:49.0000] <abarth>
why did the setTimeout fire during the touch interaction?

[23:19:49.0000] <roc>
I don't think you can get away with suppressing those entirely during a touch-pan

[23:19:56.0000] <abarth>
why not?

[23:20:17.0000] <abarth>
that's what iOS does

[23:20:54.0000] <abarth>
it's true that we haven't gone down that path you

[23:20:56.0000] <abarth>
s/you/yet/

[23:21:00.0000] <roc>
do animations stop?

[23:21:15.0000] <abarth>
we're still working with folks fairly high up the skill curve

[23:21:24.0000] <abarth>
you shouldn't drive animations with setTimout

[23:21:33.0000] <abarth>
if you do that, I'm ok making your animations bad

[23:21:43.0000] <abarth>
it's an iterative process

[23:21:53.0000] <abarth>
whereby we're moving down the skill curve

[23:22:05.0000] <roc>
I didn't say that, I was just curious

[23:22:06.0000] <abarth>
maybe we'll get to a point where the developers aren't skilled enough

[23:22:15.0000] <abarth>
but we haven't reached that point yet

[23:22:42.0000] <abarth>
I don't think we can tile the space of all effects by hard-coding them into the browser

[23:22:53.0000] <roc>
I don't think so either

[23:23:06.0000] <abarth>
so, at some point, we need to decide "that's bespoke"

[23:23:07.0000] <roc>
so I wish you'd stop raising that straw man

[23:23:18.0000] <abarth>
then, it's just a question of where to draw the line

[23:23:22.0000] <abarth>
not whether to draw a line

[23:23:37.0000] <abarth>
how do you decide where to draw the line?

[23:23:55.0000] <abarth>
we're trying to figure that out by seeing how good we can make the platform for bespoke effects

[23:24:01.0000] <abarth>
maybe we'll fail

[23:24:07.0000] <abarth>
and bespoke effects won't work well

[23:24:26.0000] <abarth>
in which case, we'll need to add many tiles and draw the line to include more UA-provided effects

[23:24:32.0000] <abarth>
but maybe we'll succeed

[23:24:42.0000] <abarth>
in which case, many effects can be treated as bespoke by the platform

[23:24:51.0000] <roc>
I don't have a deterministic algorithm for drawing the line

[23:24:54.0000] <abarth>
and the UA provides a much smaller set

[23:25:16.0000] <abarth>
which is why I wrote the email I did about snap points

[23:25:25.0000] <abarth>
it's not that I think they're bad

[23:25:35.0000] <abarth>
it's just that we're not planning to implement them

[23:25:51.0000] <abarth>
that might change if we fail

[23:26:00.0000] <abarth>
and the web platform can't support high-quality bespoke effects

[23:26:20.0000] <roc>
in the FirefoxOS homescreen, touch panning is done by script setting CSS transforms, and we did a lot of optimizations to make that work well

[23:26:49.0000] <abarth>
its too bad you don't have web animations

[23:27:08.0000] <abarth>
that way script can talk directly to the animation engine

[23:27:13.0000] <abarth>
without involving CSS

[23:27:24.0000] <abarth>
e.g., you can program an animation curve

[23:27:33.0000] <abarth>
and all you need to do in your touch handler

[23:27:38.0000] <abarth>
is set the currentTime of the animation

[23:27:59.0000] <abarth>
the main thread has almost no work to do

[23:28:33.0000] <abarth>
that's why I'm interested in the idea of moving that touch handler into the compositor.  it's such a powerful, basic primitive

[23:29:18.0000] <roc>
our existing script-driven panning solutions have some problems. One of them is that we have implemented a lot of heuristics and behaviors for async scrolling and touch scrolling in the platform. And they have to be reimplemented/emulated by our panning scripts.

[23:30:01.0000] <abarth>
so, Android solves this problem by writing them once in Java

[23:30:12.0000] <roc>
we are working on Web Animations, and are very interested in being able to make a Web Animation directly use the async scroll position as its timing source

[23:30:15.0000] <abarth>
in the context of a browser, that would mean writing them once in JavaScript

[23:30:47.0000] <abarth>
another approach would be to supply them to JS as a library

[23:31:04.0000] <abarth>
you can do that in Android too.  They have a bunch of Java classes provided by the framework that do scrolling math for you

[23:31:21.0000] <abarth>
they don't move things around on the screen---they just tell you what the physics are

[23:33:19.0000] <roc>
if you have a lot of use-cases which can be implemented by having your touch handler just set the current time on a Web Animation, then adding an API to that automatically in the compositor seems like a no-brainer to me.

[23:33:43.0000] <roc>
it certainly satisfies most of our use-cases

[23:33:46.0000] <abarth>
I'm glad to hear that :)

[23:34:02.0000] <roc>
and you get a nice robust solution

[23:34:07.0000] <roc>
so are you on board with that? :-)

[23:34:34.0000] <abarth>
yes :)

[23:35:18.0000] <roc>
glad to hear it :-)

[23:35:32.0000] <abarth>
thanks for taking the time to talk this through

[23:35:43.0000] <abarth>
IRC can be a better medium than mailing lists sometimes

[23:46:34.0000] <sspi>
I send an email towards www-dom⊙wo yesterday (about 10 hours ago here), however haven't seen it in the archives yet. Do I need to do anything special besides saying it's okay to archive my email? which I did.

[01:42:51.0000] <annevk_>
"masinter added you to multipart-form-data" great work there MikeSmith

[01:46:10.0000] <MikeSmith>
/me pats himself on the back

[01:46:51.0000] <MikeSmith>
annevk: paving the road for you with my good intentions

[01:49:16.0000] <MikeSmith>
sspi: I'll check on it right now

[01:50:59.0000] <annevk>
jgraham: how easy would it be for you to set up test where Content-Length is set to 4 and body is set to "PASS (if you see this though, FAIL!)"?

[01:51:09.0000] <MikeSmith>
/me pushes some buttons

[01:51:22.0000] <MikeSmith>
sspi: should be on its way to the list no

[01:51:25.0000] <MikeSmith>
*now

[01:53:26.0000] <annevk>
Domenic: given https://code.google.com/p/chromium/issues/detail?id=389124#c10 it seems pretty clear he's not even willing to entertain the thought they might be wrong

[02:03:56.0000] <jgraham>
annevk: Very?

[02:05:11.0000] <jgraham>
annevk: If you were careful with byte counting you could even make it work as a scripted test

[02:06:16.0000] <annevk>
jgraham: could you do it and tell me what happens?

[02:06:28.0000] <annevk>
/me is trying to find the answer to https://www.w3.org/Bugs/Public/show_bug.cgi?id=26241#c6

[02:14:38.0000] <jgraham>
annevk: The test I wrote seems to PASS in Chrome and Fx

[02:15:38.0000] <jgraham>
annevk: If you work out where this test should live I could even submit a PR for it :)

[02:16:54.0000] <annevk>
jgraham: can be part of XHR if you did it that way

[02:17:17.0000] <annevk>
jgraham: it's testing the HTTP layer though, so if we have a directory for HTTP

[02:18:31.0000] <jgraham>
We don't have a HTTP directory, and I just did it through a normal document

[02:18:34.0000] <annevk>
jgraham++ for having a better test framework than we had a couple years back

[02:18:34.0000] <jgraham>
No XHR

[02:19:04.0000] <annevk>
I guess you could make it a ref test in a new HTTP dir?

[02:20:02.0000] <annevk>
SamB: that draft was replaced by another draft which was also replaced, which eventually became http://tools.ietf.org/html/rfc6648

[02:20:09.0000] <annevk>
SamB: unfortunately some of the linking went lost

[02:22:38.0000] <jgraham>
https://github.com/w3c/web-platform-tests/pull/1089

[02:25:02.0000] <jgraham>
http://w3c-test.org/submissions/1089/http/content_length.html is the actual test

[02:30:08.0000] <annevk>
ta

[02:32:34.0000] <JakeA>
annevk: are you suggesting context="frame" for all navigations? Or would iframes get something different?

[02:32:59.0000] <annevk>
JakeA: yes

[02:33:24.0000] <annevk>
JakeA: "document" might be a better term since HTML calls them document environments

[02:33:36.0000] <JakeA>
annevk: much better

[02:33:48.0000] <JakeA>
I'll add that to the ticket

[03:31:12.0000] <pulse00>
hi all. i'm trying to find info on how browsers implement autocompletion of login credentials. we're having a loginpage example.com/login which has 2 input fields, one with type="password". when saving the password, the browser (chrome in this case) not only autofills example.com/login form fields, but also example.com, which holds a registration form.

[03:31:31.0000] <pulse00>
however, the registration form under example.com should not be autofilled with previous username/password values.

[03:31:51.0000] <pulse00>
i've already set <form autocomplete="off"/> on the registration page, but this is being ignored it seems.

[03:32:24.0000] <pulse00>
has anyone an idea if this feature is somewhere handled in the html specification?

[03:33:45.0000] <annevk>
pulse00: instead of setting autocomplete to off, set it to a value that describes the purpose

[03:34:19.0000] <annevk>
pulse00: per http://www.whatwg.org/specs/web-apps/current-work/#attr-fe-autocomplete

[03:36:15.0000] <pulse00>
annevk: thanks a lot!

[03:40:54.0000] <pulse00>
what's still a mystery to me: why is the browser autocompleting a form with values from another url? i mean the login form lives on example.com/login, and the registration form on example.com, which are 2 different forms and urls...

[03:43:10.0000] <annevk>
pulse00: login forms can often be found on many URLs

[03:43:53.0000] <pulse00>
so because the form has an email/password input combination, the browser assumes it's the login form and autofills it?

[03:44:15.0000] <annevk>
yeah, heuristics for that are not really defined

[03:44:46.0000] <annevk>
browsers are slowly working on addressing that problem better now, part of the deal is the new design of the autocomplete attribute

[03:45:30.0000] <pulse00>
annevk: thanks a lot for the info

[04:35:23.0000] <Ms2ger>
If f is not one of "NFC", "NFD", "NFKC", or "NFKD", ...

[04:35:25.0000] <Ms2ger>
Yay ES

[04:42:36.0000] <sspi>
MikeSmith: just read your message, tnx for helping out :)

[05:41:32.0000] <MikeSmith>
sspi: chhers

[05:45:19.0000] <annevk>
Ms2ger: what's the problem?

[05:45:37.0000] <annevk>
JakeA: I'm not sure if checking MIME type was agreed or not, but it seems like it would be good

[05:46:33.0000] <JakeA>
annevk: I'm happy with your conclusion. Assume multipart unless it's a urlencoded mime type

[05:46:50.0000] <annevk>
JakeA: I meant re service worker MIME type

[05:47:05.0000] <annevk>
JakeA: for multipart apparently the MIME type has to be checked to get the boundary parameter

[05:51:38.0000] <JakeA>
annevk: oh, sorry. Yeah, I agree. 96.7% of urls ending in ".js" are served with one of application/x-javascript, text/javascript. application/javascript

[06:13:47.0000] <MikeSmith>
hsivonen: I've landed validator support for <picture> in the syntax repo. Any chance you might be able to deploy it to v.nu and h5.v.nu today?

[06:15:28.0000] <MikeSmith>
hsivonen: for this case (relatively big new addition) I'd prefer not deploying it at the w3c validator until you have time to also deploy it

[06:20:40.0000] <darobin>
/me wonders if annevk gets to spend as much time with his dog as he'd like

[06:21:08.0000] <annevk>
darobin: my dog is dead you ass

[06:21:19.0000] <darobin>
ow!

[06:21:32.0000] <darobin>
sorry about that

[06:21:41.0000] <darobin>
but seriously, is that a .nl expression?

[06:23:06.0000] <annevk>
I had a dog once, but my mother mostly took care of it, he died of old age, and above I was failing to be funny

[06:43:44.0000] <darobin>
annevk: I thought you were trying to be funny, but there was the odd chance you weren't and I didn't want to just torment your bereaved soul

[06:43:51.0000] <darobin>
well, I didn't want it too bad

[06:44:04.0000] <darobin>
anyway, loved that expression on www-tag; I'm definitely going to use it :)

[06:44:44.0000] <annevk>
heh

[07:03:23.0000] <annevk>
This whole blob reading things needs some more thinking...

[07:18:11.0000] <SamB>
annevk: yeah, I noticed, I just wish there was some kind of "report" functionality for such missing links between drafts ...

[07:18:44.0000] <annevk>
SamB: I reported it on Twitter, the editor passed it on

[07:18:58.0000] <SamB>
I guess that works

[07:19:48.0000] <SamB>
naturally, the original title was better ;-)

[07:30:57.0000] <annevk>
There's no place for humor in the IETF, except when it comes to their publishing format

[07:31:18.0000] <jcgregorio>
annevk +1 :-)

[07:35:25.0000] <SamB>
annevk: are you talking about the recent sad but true April 1 RFC?

[07:36:10.0000] <jgraham>
The IETF publishing format is dadaism at its finest.

[07:37:38.0000] <jgraham>
In a few years they'll have an original copy of RFC 2616 printed on a daisywheel printer in MoMA

[07:40:50.0000] <SamB>
oh, *that* ;-)

[07:40:54.0000] <MikeSmith>
you guys need to step up your game

[07:41:23.0000] <MikeSmith>
we need to have higher expectations for IETF trolling than what I'm seeing on display here today

[07:41:25.0000] <SamB>
I was thinking about the "realistic requirement keywords" RFC ;-)

[07:41:51.0000] <SamB>
that was a masterwork of sad, true, and funny all at once ...

[07:45:45.0000] <annevk>
I missed http://lists.w3.org/Archives/Public/ietf-http-wg/2014JulSep/0123.html

[07:45:58.0000] <annevk>
Of course it is directly casually dismissed afterwards

[08:06:43.0000] <annevk>
SamB: https://twitter.com/stpeter/status/484352051645009922

[09:37:17.0000] <annevk>
http://w3cmemes.tumblr.com/post/90566879702 <3

[09:38:56.0000] <Domenic>
oooh w3cmemes stepped up its game

[09:38:58.0000] <Domenic>
i liked http://w3cmemes.tumblr.com/image/90566406597

[09:49:50.0000] <hober>
that's not the first time slightlyoff's been represented by a dog

[09:49:53.0000] <hober>
i wonder what's up with that

[10:20:13.0000] <IZh>
Hi. Is it possible to select multiple Options from JS?

[10:20:56.0000] <IZh>
The select.value selects one.

[10:25:15.0000] <TabAtkins>
IZh: If you ahve a <select multiple>, then you can adjust selectedness on each option individually.

[10:25:17.0000] <TabAtkins>
I forget how.

[10:25:28.0000] <TabAtkins>
Probably opt.selected=true or something.

[10:30:35.0000] <Hixie>
you know your standards organisation is successful when the mailing list for your flagship spec has less than a third the volume of mail traffic as the mailing list for your process, two months in a row

[10:30:46.0000] <Hixie>
(http://lists.w3.org/Archives/Public/public-html/ vs http://lists.w3.org/Archives/Public/public-w3process/)

[10:31:20.0000] <SamB>
Hixie: does the WHATWG even *have* a process?

[10:31:44.0000] <SamB>
I guess they better have at least PID 1 and apache, huh

[10:35:18.0000] <tantek>
mailing lists are such good honeypots. especially process mailing lists.

[10:35:59.0000] <SamB>
you mean, they keep the bullshit away from ... ?

[10:40:14.0000] <jgraham>
SamB: Don't let tantek troll you. He has like a 4 hour spiel about how all mailing lists are failures, even ones that are successful, and how everything should be on wikis despite wikis having faults of their own.

[10:40:48.0000] <SamB>
I hear wikimedia-l is ... fun ;-)

[10:40:58.0000] <Hixie>
i'm not sure, i'm just guessing, but i think jgraham might disagree with tantek on this mailing list thing

[10:41:01.0000] <SamB>
but personally I don't think a wiki is a good place to review patches

[10:41:17.0000] <Hixie>
SamB: not in any meaningful sense, no (by design)

[10:41:17.0000] <jgraham>
A mailing list isn't a good place to review patches either

[10:41:19.0000] <SamB>
Hixie: lol

[10:41:31.0000] <jgraham>
a code review system is

[10:41:34.0000] <SamB>
jgraham: true, not particularly fantastic for that

[10:41:35.0000] <tantek>
SamB - they keep a lot of bullshit (in terms of volume of text) away from say, IRC, like here.

[10:41:50.0000] <SamB>
jgraham: but a wiki manages to do EVEN WORSE

[10:41:51.0000] <tantek>
jgraham, that's the spirit! ;)

[10:42:24.0000] <SamB>
and I'm not sure you couldn't integrate a code review system into a mailing-list workflow pretty well ...

[10:42:27.0000] <tantek>
SamB - who does code reviews on a wiki? I've never done that but I'm curious to see anyone who would try!

[10:43:10.0000] <SamB>
tantek: well, the way I was interpreting jgraham's statements, you were ;-P

[10:43:12.0000] <tantek>
github's UI flow for code submissions/reviews appears to have the best adoption to date of any such "system". so I'd start by studying theirs.

[10:43:22.0000] <jgraham>
At least code review on a wiki would give you some kind of diff between revisions of the patch

[10:43:29.0000] <SamB>
jgraham: hmm

[10:43:36.0000] <tantek>
(!!!)

[10:43:55.0000] <jgraham>
Oh man *I* have a four your rant about the failures of github for code review and patch submission

[10:43:59.0000] <jgraham>
*hour

[10:44:03.0000] <SamB>
jgraham: I was thinking of a Talk:-style thing though, which really wouldn't

[10:44:17.0000] <tantek>
/me looks forwared to reading jgraham's blog post  about the failures of github for code review and patch submission. 

[10:44:31.0000] <jgraham>
SamB: Yeah, the fact that you would have to mix comments and code would be a disaster

[10:44:45.0000] <tantek>
SamB, Talk: pages suck. Don't use them

[10:44:54.0000] <rniwa>
/me prefers Bugzilla code reviews over Github.

[10:45:04.0000] <SamB>
tantek: well, how would YOU discuss a Template on-wiki

[10:45:13.0000] <jgraham>
To be fair, the main problem with GH for submission is that their permissions model is broken so only the original author can update a patch

[10:45:16.0000] <SamB>
or, say, the content or formatting of a wikipedia article

[10:45:21.0000] <jgraham>
s/patch/PR/

[10:45:28.0000] <SamB>
jgraham: mmm

[10:46:26.0000] <SamB>
jgraham: well, given that only the latest version of the PR is accessible from the CLI (afaik), I'm not sure that's totally stupid

[10:46:38.0000] <jgraham>
rniwa: Does webkit have some much better thing than mozilla for review in bugzilla? Because what we have is awful.

[10:46:40.0000] <SamB>
I guess it should be possible to have multiple PRs on one PR page ...

[10:46:58.0000] <tantek>
SamB - IRC for quick discussions

[10:46:59.0000] <SamB>
jgraham: I don't think so

[10:47:29.0000] <jgraham>
SamB: I don't understand what you mean. A PR is just a branch. It should be possible for multiple people to push to the same branch.

[10:47:53.0000] <SamB>
tantek: not always clear where to find anyone relevant to a specific topic on IRC, at least wrt WMF's wikis

[10:48:14.0000] <jgraham>
People certainly *shouldn't* keep squashing and force pushing if that's what you mean by "latest version"

[10:48:16.0000] <SamB>
it's not too bad wrt commons or enwikisource

[10:48:28.0000] <jgraham>
Once you do that you may as well use a mailing list again.

[10:48:54.0000] <SamB>
jgraham: I was just thinking that remote reflog access might be worth implementing

[10:49:01.0000] <SamB>
but yes, I see what you mean

[10:49:23.0000] <SamB>
forbidding force push to PR refs would work too, after a fashion

[10:50:07.0000] <caitp>
squashing and forcepushing is great, it's not like the old refs disappear

[10:50:08.0000] <SamB>
anyway, clearly we have very little clue what we're doing WRT patch review systems

[10:50:26.0000] <SamB>
caitp: huh?

[10:50:36.0000] <SamB>
are you talking about the web UI?

[10:50:40.0000] <caitp>
no

[10:50:45.0000] <jgraham>
You need to allow it but you either need the kind of magic that hg+changeset evolution has to keep track of the previous commits, or you need to strictly control when people squash so that the review system can keep track of it

[10:51:06.0000] <SamB>
caitp: or do you know how to get at the old PR tips from the CLI?

[10:51:27.0000] <SamB>
I haven't done much hg yet

[10:51:38.0000] <SamB>
at least it doesn't seem as stupid slow as bzr

[10:51:41.0000] <caitp>
if you have the sha of an old tip you should be able to cherrypick it back on if you want to restore it

[10:51:51.0000] <SamB>
and isn't dead upstream like bzr

[10:51:52.0000] <caitp>
getting the sha is the hard part

[10:52:07.0000] <SamB>
caitp: github allows you to do that?

[10:52:20.0000] <SamB>
but how would you find out the sha without hitting the web

[10:52:21.0000] <caitp>
i'm not sure why github would care

[10:52:32.0000] <jgraham>
I haven't actually used hg+evolve, but aiui when you rebase it stores a pointer to the old commits in the rebased tree, but marks them as "obsolete" or something

[10:52:58.0000] <caitp>
you can just make a note of shas, or put them in a temporary branch before rebasing

[10:53:01.0000] <SamB>
caitp: by default, git forbids access to commits that aren't found in refs

[10:53:04.0000] <caitp>
temp branch is safer :p

[10:53:14.0000] <SamB>
I mean, when you use the smart protocols

[10:53:24.0000] <SamB>
jgraham: nice

[10:53:29.0000] <rniwa>
jgraham: https://bugs.webkit.org/attachment.cgi?id=224930&action=review

[10:53:39.0000] <rniwa>
jgraham: ojan made a lot of improvements to our review tool

[10:53:47.0000] <rniwa>
jgraham: it supports inline comments, etc...

[10:54:47.0000] <jgraham>
rniwa: Well it allows context expansion at least. Can you get diffs between different versions of patches or track which issues have been addressed somehow?

[10:55:17.0000] <rniwa>
jgraham: diffs between different patches is still broken :(

[10:56:42.0000] <jgraham>
Moilla are supposed to be moving to reviewboard, but it remains to be seen whether that still sucks

[10:56:51.0000] <Philip`>
jgraham: Gerrit seems to work non-terribly at that - it stores every version of a patch that you've pushed for review, and the web UI lets you see diffs between any versions

[10:57:35.0000] <SamB>
Philip`: what happens if you change the subject line?

[10:57:35.0000] <jgraham>
Philip`: Yeah, AIUI Gerrit isn't terrible. Although I haven't actually used it so I couldn't say if it's good or not

[10:57:42.0000] <SamB>
and I hear gerrit doesn't handle series' well?

[10:58:19.0000] <jgraham>
/me is quite a fan of Opera Critic ofc

[10:58:21.0000] <Philip`>
SamB: There's a hook that puts a Change-Id field in your commit message, as a unique identifier for a patch

[10:58:26.0000] <rniwa>
Philip`, jgraham: the one used by chromium is horrible re: Gerrit

[10:58:42.0000] <jgraham>
Reitvald?

[10:58:53.0000] <Philip`>
so you can happily rewrite the commit message (but keep the Change-Id) and it'll recognise it

[10:59:03.0000] <SamB>
I think the cutest review tool I've seen involved GPG-signed votes of approval on a mailing list, and a bot that ran tests and merged if all was well after recieving enough "go ahead" votes

[10:59:15.0000] <rniwa>
jgraham: oh i guess I mixed the two

[10:59:31.0000] <SamB>
Philip`: how does the Change-Id get into your commit message?

[10:59:40.0000] <jgraham>
Isn't Gerrit a fork of Rietvald or something?

[10:59:40.0000] <caitp>
rietveld isn't really ideal, no :[

[11:00:06.0000] <SamB>
is it telling that I've never heard of rietvald before?

[11:00:10.0000] <SamB>
probably not very

[11:00:44.0000] <caitp>
codereview.chromium.org etc, the UI still confuses me after over a year

[11:00:45.0000] <jgraham>
Well code review tools aren't exactly thrilling dinner party conversation

[11:01:05.0000] <jgraham>
It isn't the sort of thing they teach posh people to politely discuss at finishing school

[11:01:35.0000] <SamB>
what is finishing school?

[11:01:38.0000] <Philip`>
SamB: By a commit-msg hook that you have to download into your repository

[11:01:46.0000] <SamB>
do they teach you to finish things?

[11:01:50.0000] <SamB>
maybe I should sign up

[11:01:54.0000] <SamB>
Philip`: ah

[11:01:57.0000] <jgraham>
http://en.wikipedia.org/wiki/Finishing_school

[11:02:02.0000] <SamB>
Philip`: that actually sounds workable

[11:02:26.0000] <Philip`>
The best thing about Gerrit is that part of its configuration is in Prolog

[11:02:46.0000] <SamB>
but somehow I suspect it hasn't a clue how to handle it if you squash or split a change

[11:03:03.0000] <SamB>
er, well, not that you can squash one change by itself

[11:03:21.0000] <jgraham>
Philip`: See, that's what the channel lacks when you aren't around

[11:04:05.0000] <SamB>
Philip`: I'm assuming that it's not actually particularly useful that it's in prolog?

[11:04:12.0000] <SamB>
or you would be explaining how

[11:04:28.0000] <SamB>
hmm, did firefox drop SWI yet?

[11:04:36.0000] <SamB>
(how long ago?)

[11:04:45.0000] <jgraham>
What's SWI?

[11:04:51.0000] <Philip`>
SamB: It's your responsibility to keep the Change-Id in the appropriate commit that you want associated with your previous review, if you're doing some squashing etc

[11:04:53.0000] <SamB>
SWI Prolog

[11:05:28.0000] <Philip`>
If you're doing major reorganisation you might want to just abandon the old reviews and start a new set for your new patches, to reduce confusion

[11:06:02.0000] <SamB>
Philip`: is "review/change set" an actual concept of gerrit?

[11:06:16.0000] <Philip`>
SamB: It's not particularly useful if you don't already know Prolog

[11:06:40.0000] <SamB>
what sort of things does it configure?

[11:07:41.0000] <Hixie>
anyone want to help out with admin⊙wwo requests? (it's just creating wiki accounts for people who seem legit)

[11:09:15.0000] <Philip`>
SamB: The rules for when a patch is allowed to be submitted, e.g. https://gerrit-review.googlesource.com/Documentation/prolog-cookbook.html#_example_14_master_and_apprentice

[11:10:08.0000] <SamB>
Hixie: so basically you get to serve as glorified captcha?

[11:10:35.0000] <SamB>
anyway I'm terrible at handling my mail already, so not I!

[11:13:54.0000] <Ms2ger>
jgraham, Rietveld, btw

[11:14:18.0000] <jgraham>
Danm vowels

[11:16:05.0000] <Philip`>
They're evidently no worse than the consonants

[11:16:54.0000] <jgraham>
Cursed letters

[11:17:11.0000] <Domenic>
I hate Gerrit, largely because of the Change-Ids

[11:21:56.0000] <Hixie>
SamB: yeah

[11:25:17.0000] <Manishearth>
annevk: around?

[11:25:27.0000] <Manishearth>
I'd like to know exactly when CORS applies

[11:25:34.0000] <jgraham>
Manishearth: I don't think he is

[11:25:40.0000] <Manishearth>
:/

[11:26:10.0000] <Manishearth>
apparently fetching an ftp:// page from an http:// page is a CORS violation. Wonder if the same is true for fetching ftp:// from ftp://

[11:26:16.0000] <Hixie>
annevk: i'm not clear on what i'm supposed to be answering on https://github.com/slightlyoff/ServiceWorker/issues/352#issuecomment-47768718

[11:28:09.0000] <SamB>
Manishearth: I'm not aware of a way to clear cross-origin requests with an FTPD

[11:28:35.0000] <SamB>
so, um, naturally you can't use CORS with ftp://

[11:29:41.0000] <SamB>
I guess it's pointless to ask about nntp://, news://, etc. since, uh, well, browsers don't exactly support NNTP these days

[11:29:57.0000] <Manishearth>
SamB: strange, I tried ftp-ftp in Chrome's console and it worked

[11:30:05.0000] <Manishearth>
data-data doesn't work though

[11:30:06.0000] <SamB>
hmm

[11:30:14.0000] <SamB>
wait what

[11:30:31.0000] <SamB>
Manishearth: what exactly are you attempting to do?

[11:30:31.0000] <Manishearth>
and I think blob uris can be fetched ;p

[11:30:39.0000] <Manishearth>
SamB: implement CORS for Servo

[11:30:50.0000] <SamB>
I meant, what did you try between data: and data: that did not work?

[11:30:56.0000] <Manishearth>
or, more generically, implemet CORS in rst -- trying to make it reusable

[11:31:00.0000] <Manishearth>
*Rust

[11:32:47.0000] <Manishearth>
SamB: so data:text/html is a thing

[11:32:51.0000] <SamB>
hmm, I guess ftp has to count as cross-origin; someone's bound to have internal ftp servers with sensitive data on them ...

[11:33:41.0000] <SamB>
Manishearth: it just seems kind of dumb to prevent fetching a data URL when you could just as well get the content by parsing it yourself

[11:35:32.0000] <Manishearth>
SamB: exactly

[11:35:49.0000] <Manishearth>
So I was wondering if there was a table of sorts which specifies who can fetch ffrom where

[11:36:01.0000] <Manishearth>
this data uri doesn't work, for example:

[11:36:04.0000] <Manishearth>
data:text/html;charset=utf-8;base64,PGh0bWw+DQo8aGVhZD48L2hlYWQ+DQoNCjxib2R5Pg0KPHNjcmlwdD4NCnhocj1uZXcgWE1MSHR0cFJlcXVlc3QoKTsNCnhoci5vcGVuKCJHRVQiLCAiZGF0YTp0ZXh0L2h0bWw7Y2hhcnNldD11dGYtODtiYXNlNjQsUEdoMGJXdytEUW9OQ2p3dmFIUnRiRDQ9IikNCnhoci5zZW5kKCk7DQo8L3NjcmlwdD4NCjwvYm9keT4NCjwvaHRtbD4=

[11:36:24.0000] <SamB>
does curl implement data: ...

[11:36:27.0000] <SamB>
/me checks

[11:36:28.0000] <Manishearth>
hm

[11:36:56.0000] <Manishearth>
Note that here I'm talking about same-origin, but different *schemes*

[11:37:38.0000] <SamB>
Manishearth: ah

[11:38:10.0000] <SamB>
turns out curl doesn't support the data scheme

[11:38:34.0000] <Manishearth>
though it would also be interesting if ftp:// fetching http:// cross origin is considered unsupported

[11:39:01.0000] <SamB>
Manishearth: can't see any reason it shouldn't work besides lack of enthusiasm to bother

[11:39:01.0000] <Manishearth>
(even if the correct access-control headers are set)

[11:39:26.0000] <Manishearth>
true, bt it's all confusing ;)

[11:40:00.0000] <SamB>
annevk: perhaps there should be some kind of ... testsuite?

[11:40:27.0000] <Manishearth>
SamB: don't we have wpt? :)

[11:40:34.0000] <Manishearth>
but it doesnt cover thee strange cases

[11:40:47.0000] <SamB>
how would you test this stuff anyway

[11:41:03.0000] <Ms2ger>
Make jgraham write an ftp server

[11:41:05.0000] <SamB>
I mean, I'm thinking live testing is probably not workable here

[11:41:32.0000] <SamB>
but dry-running part of the algorithm maybe could be?

[11:41:42.0000] <jgraham>
/me hides

[11:42:11.0000] <Manishearth>
SamB: I'm creating data uris and using ftp servers and all ;p

[11:42:36.0000] <SamB>
hrmm, maybe it's not THAT hard

[11:43:07.0000] <SamB>
(does, say, twisted have an ftp server?)

[11:44:43.0000] <SamB>
Manishearth: what kind of harness are you using, and how much of the stack does it test?

[11:45:08.0000] <Manishearth>
SamB: me? I'm currently just testing locally

[11:45:14.0000] <Manishearth>
as in, entering stuff into the console

[11:45:21.0000] <SamB>
ah

[11:45:22.0000] <Manishearth>
we use wpt though

[11:45:53.0000] <SamB>
I'm not sure how you can do tests with different toplevel origins though

[11:45:57.0000] <Ms2ger>
Manishearth, you should move the dirs we run into an ini file, I want to start running FileAPI/ at some point

[11:46:22.0000] <SamB>
I mean, automatically

[11:46:59.0000] <SamB>
(I mean, this is the one time you would really want to be able to be able to totally ignore the same-origin rule, no?)

[11:47:09.0000] <Manishearth>
SamB: Okay, turns out that Blick doesn't like xhr in data uris, bt Gecko does

[11:47:15.0000] <Manishearth>
this is unspecced

[11:47:23.0000] <Manishearth>
implement at will ;p

[11:47:28.0000] <SamB>
gecko is right, clearly

[11:47:32.0000] <Manishearth>
Ms2ger: yeah, we shold. Will do that

[11:47:37.0000] <Manishearth>
*should

[11:47:46.0000] <Ms2ger>
Thanks :)

[11:47:46.0000] <SamB>
though, failing safe is better than failing dangerous

[11:50:35.0000] <Manishearth>
            // This bit is probably more complicated. Fetching same origin data URIs from data URIs

[11:50:36.0000] <Manishearth>
            // works in Gecko but not Blink. Fetching same origin ftp:// from ftp:// works in both

[11:50:38.0000] <Manishearth>
            // Same origin blob URIs also work for both. Fetching same origin http from ftp works in gecko

[11:50:40.0000] <Manishearth>
            // but not Blink. I give up.

[11:50:46.0000] <Manishearth>
screw it, I'll just leave a long comment ;p

[12:46:43.0000] <Hixie>
jgraham: any news on the attribute ordering thing?

[12:57:47.0000] <annevk>
Manishearth: see http://fetch.spec.whatwg.org/#concept-fetch

[12:58:01.0000] <annevk>
Manishearth: if you want to implement CORS, "just" implement Fetch

[12:59:39.0000] <annevk>
Hixie: just a heads up that your algorithms might be affected somehow by all this CSP / Fetch stuff; if you're not concerned, it's fine

[12:59:48.0000] <annevk>
SamB: testsuite for what?

[13:00:02.0000] <Hixie>
annevk: which algs?

[13:00:04.0000] <annevk>
Manishearth: implementing CORS without Fetch would be wrong

[13:00:17.0000] <annevk>
Hixie: navigate and things that invoke navigate

[13:00:28.0000] <Hixie>
ah

[13:00:42.0000] <SamB>
annevk: what should happen if URL foo tries to do X involving URL bar

[13:00:46.0000] <Hixie>
i kinda assumed they'd be affected eventually anyway

[13:01:13.0000] <SamB>
perhaps with more details about what bar's server has to say about that

[13:01:31.0000] <annevk>
The address bar is UI

[13:02:30.0000] <SamB>
annevk: sorry, "bar" was a poor choice of metasyntactic variable

[13:02:37.0000] <SamB>
s/bar/baz/

[13:02:55.0000] <annevk>
SamB: oh, yes

[13:03:02.0000] <annevk>
SamB: there's some of that for XMLHttpRequest

[13:03:50.0000] <annevk>
SamB: are you volunteering? if so, I'll have more time to coordinate something like that in twelve hours, or you can talk to jgraham :-)

[13:04:14.0000] <gsnedders>
/me wonders if we should be writing more specs without testsuites, given how badly tested stuff is already...

[13:04:17.0000] <SamB>
annevk: hmm, I'll volunteer Manishearth to come up with the wierd corner cases to try

[13:05:02.0000] <annevk>
gsnedders: well, everything that is implemented gets tests, so there's tests for those specifications somewhere

[13:05:55.0000] <gsnedders>
somewhere doesn't necessarily mean reusable outside of that implementation, which is kinda harmful

[13:07:08.0000] <SamB>
annevk: note that when I said "testsuite", I didn't *necessarily* mean that they would have to be ready for any sort of automated use

[13:07:26.0000] <gsnedders>
manual tests are pretty useless though, nobody ever runs them

[13:08:32.0000] <SamB>
a table of examples with an indication of what the results should be would be better than what we have now

[13:10:48.0000] <SamB>
gsnedders: I mean, yes, ideally you'd have some kind of automatable tests, but it seems like the same-origin restriction would make it distinctly tricky to set up windows with all the wierd origins you'd need here

[13:12:02.0000] <SamB>
if you wanted a cross-browser harness, I mean

[13:12:07.0000] <gsnedders>
not really

[13:12:22.0000] <gsnedders>
the big problem is dealing with browsers that, e.g., don't support FTP

[13:12:29.0000] <gsnedders>
/me wonders if Fetch actually requires FTP support

[13:12:32.0000] <gsnedders>
it looks like it?

[13:12:42.0000] <SamB>
skip tests that involve ftp://, I assume!

[13:13:10.0000] <gsnedders>
it's detecting that FTP isn't supported that's hard :)

[13:13:12.0000] <SamB>
just like nobody is going to make gopher:// tests

[13:14:03.0000] <SamB>
is it?

[13:14:24.0000] <SamB>
gsnedders: couldn't you just load a script or an img over ftp:// ?

[13:14:38.0000] <gsnedders>
can you distinguish the different failure states?

[13:14:55.0000] <gsnedders>
(does anyone still support gopher? was IE not the last, and they dropped it several releases back)

[13:14:57.0000] <SamB>
or maybe you could just let the user tell you

[13:15:28.0000] <SamB>
gsnedders: yes, that's why nobody will write tests; the features involved don't all occur in the same browser

[13:15:47.0000] <SamB>
I mean, no, nobody still supports gopher

[13:16:30.0000] <SamB>
except if they don't support JS in the first place, in which case CORS doesn't seem likely to apply to much

[13:17:13.0000] <gsnedders>
IE7 IIRC supported Gopher and is still supported, no? ;P

[13:17:26.0000] <gsnedders>
Or maybe it was IE7 that dropped it?

[13:17:29.0000] <SamB>
oh, I have no idea

[13:18:32.0000] <SamB>
for all I know, it was dropped in a patch distributed over Windows Update

[13:23:48.0000] <gsnedders>
There are definitely browsers that support JS and gopher though, which is my point. Probably not worthwhile testing, though. :)

[13:25:01.0000] <SamB>
gsnedders: I don't think IE7 counts as "maintained" for the purposes of Fetch

[13:27:11.0000] <gsnedders>
SamB: As I said, "not worthwhile testing"

[13:27:27.0000] <SamB>
yeah

[13:28:15.0000] <SamB>
on the plus side, the likelyhood of anyone having any private information stored on a local gopher server approaches nil

[13:30:06.0000] <jgraham>
Hixie: No. I will have another look this evening.

[13:35:00.0000] <Hixie>
jgraham: cool, thanks

[13:35:09.0000] <Hixie>
jgraham: sorry for giving you work

[13:37:19.0000] <annevk>
gsnedders: yeah, you need all three

[14:58:33.0000] <mounir_>
Domenic, abarth: my understanding that you guys are still holding the position you had when the discussion started, is that right?

[14:59:04.0000] <abarth>
mounir_: I haven't changed my opinon

[15:02:45.0000] <mounir_>
it seems that you guys are the only persons who really care, it would be great if you could find some agreement...

[15:03:19.0000] <abarth>
mounir_: why don't we continue with the implementation

[15:05:03.0000] <mounir_>
eh... that's the problem

[15:05:21.0000] <abarth>
why is that a problem?

[15:05:23.0000] <mounir_>
if I land a patch going one way, let's be honest, I'm not going to write a spec going the other way

[15:05:29.0000] <abarth>
great

[15:05:31.0000] <abarth>
problem solved

[15:07:30.0000] <mounir_>
I wouldn't say that

[15:08:11.0000] <abarth>
what I'd probably do in your place is open an issue in the working groups tracker and move forward

[15:08:25.0000] <abarth>
eventually you'll need to resolve the issues in the tracker before advancing the spec to CR

[15:08:42.0000] <Ms2ger>
Meh, w3process

[15:08:48.0000] <abarth>
if you wait for everyone to agree before writing each line of code, you'll wait for a long time

[15:09:18.0000] <Hixie>
just ask whoever the spec editor is to make a decision

[15:09:26.0000] <Ms2ger>
Well, that's mounir_

[15:09:31.0000] <Hixie>
hawkward

[15:09:52.0000] <Hixie>
ask another vendor to make a decision, and do whatever they say?

[15:09:58.0000] <jgraham>
Hixie: &alphabetical_attributes=on

[15:10:03.0000] <Hixie>
sweet

[15:10:15.0000] <jgraham>
Hixie: Seems past me had a very strange idea about what "defaults" meant

[15:10:21.0000] <Hixie>
heh

[15:10:23.0000] <Hixie>
i know that feeling

[15:10:55.0000] <jgraham>
In this case they seemed to mean "defaults, but only if a parameter value was actually supplied, which for booleans could only be true anyway"

[15:13:17.0000] <jgraham>
mounir_: Toss a coin, and if that doesn't help, toss a salad? At least that way you'll have some delicious salad (assuming you put delicious things in your salad. If you mainly put in iceberg lettuce you will have a soggy disappointment go go with your spec woes)

[15:14:11.0000] <mounir_>
abarth: what bothers me is that given that the Blink implementation will be blocked to a specific solution, I can't realisticly spec something different

[15:14:32.0000] <mounir_>
I would need to be slightly crazy to implement something and spec something else

[15:14:40.0000] <Hixie>
are there other implementations?

[15:14:42.0000] <abarth>
mounir_: sure, but you can log an issue and change both the spec and the implementation when the issue is resolved

[15:15:05.0000] <mounir_>
abarth: except that the issue will unlikely be resolved in another way than what you want to be implemented

[15:15:23.0000] <mounir_>
abarth: given that Blink will anyway not implement it the other way, right?

[15:15:25.0000] <jgraham>
/me doesn't know what the actual issue is

[15:15:31.0000] <Hixie>
/me either

[15:15:37.0000] <abarth>
mounir_: you're just making assumptions

[15:15:45.0000] <abarth>
mounir_: why do you assume that?

[15:16:16.0000] <mounir_>
abarth: there are two patches up there, one is blocked, the other one is ready to land

[15:16:20.0000] <abarth>
right

[15:16:23.0000] <abarth>
so land the CL that's ready to land

[15:16:46.0000] <abarth>
that doesn't foreclose changing the implementation later

[15:17:07.0000] <Ms2ger>
/me isn't sure of that in general

[15:17:39.0000] <abarth>
Ms2ger: this whole feature is experimental, which means we aren't shipping it

[15:17:49.0000] <Ms2ger>
Good good

[15:18:17.0000] <mounir_>
abarth: will do that

[15:18:27.0000] <caitp>
which feature? // curiousity

[15:18:34.0000] <abarth>
ScreenOrientation

[15:18:35.0000] <mounir_>
abarth: but I would be surprise that it doesn't ship for M38

[15:18:39.0000] <caitp>
ah

[15:18:52.0000] <abarth>
mounir_: well, they'll be an intent-to-ship email

[15:18:59.0000] <abarth>
that folks are welcome to raise concerns in

[15:19:31.0000] <abarth>
presumably you're going to write that email.  If you don't think the spec is mature enough, then we're not very likely to ship the feature

[15:19:58.0000] <abarth>
shipping is the gate that locks things in.  implementation behind a flag doesn't

[15:24:00.0000] <Hixie>
jgraham: fwiw, getting 504s. i'll keep trying, it's probably intermittent.

[15:26:16.0000] <jgraham>
Hixie: OK, it worked for me

[15:26:31.0000] <Hixie>
it worked the third time

[15:26:53.0000] <Hixie>
looks perfect, attributes in order and everything

[15:26:54.0000] <Hixie>
thanks!

[15:35:53.0000] <Hixie>
jgraham: is there a flag for not omitting end tags, by any chance?

[15:38:54.0000] <jgraham>
Er, it omits end tags?

[15:40:54.0000] <jgraham>
Oh right maybe if you are passing omit_optional_tags

[15:41:10.0000] <jgraham>
So just removing that might help

[15:42:22.0000] <MikeSmith>
Hixie: a while back bz pointed out that the Navigation Timing spec is using the term "current document" and "previous document" but never defines them

[15:42:28.0000] <MikeSmith>
Hixie: e.g., https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#dom-performancetiming-navigationstart

[15:42:34.0000] <Hixie>
jgraham: ah, excellent

[15:42:43.0000] <MikeSmith>
Hixie: "This attribute must return the time immediately after the user agent finishes prompting to unload the previous document. If there is no previous document, this attribute must return the time the current document is created."

[15:42:54.0000] <Hixie>
MikeSmith: those terms would be easy to define

[15:42:59.0000] <Hixie>
MikeSmith: given the session history

[15:43:05.0000] <MikeSmith>
yeah?

[15:43:32.0000] <Hixie>
yeah

[15:43:38.0000] <Hixie>
current document is just "active document"

[15:43:40.0000] <MikeSmith>
can't they just use terminology that's all ready in the HTML spec? just reference terms

[15:43:43.0000] <MikeSmith>
ah

[15:43:45.0000] <MikeSmith>
yeah

[15:44:01.0000] <Hixie>
and "previous document" is something like "document for the entry before the first entry of the active document" or something

[15:44:02.0000] <MikeSmith>
OK that's what I thought for current document

[15:44:08.0000] <MikeSmith>
ok

[15:44:51.0000] <Hixie>
though exactly what they want depends on how they want to handle things like bfcache, bfcache eviction, fragmetn navigations, pushState, etc.

[15:45:00.0000] <Hixie>
not to mention history traversal

[15:45:06.0000] <MikeSmith>
well

[15:45:27.0000] <MikeSmith>
I think the spec doesn't go into details in those areas that maybe it should

[15:45:43.0000] <MikeSmith>
but I dunno I haven't looked too deeply and kinda don't want to

[15:46:08.0000] <MikeSmith>
I'm glad at least that bz has been taking the time


2014-07-03
[21:07:21.0000] <Domenic>
Mounir_: Honestly I would rather have .screenAngle and .screenType at this point if abarth is going to block on introducing a record.

[21:29:16.0000] <SamB>
/me records Domenic's statement in his logfiles

[23:57:24.0000] <ManishCloud>
annevk: Oh, so you can only fetch HTTP(s). Alright, thanks. This deviates from the actual implementation in Gecko/Blink a bit, but no problem

[23:57:35.0000] <annevk>
ManishCloud: no you can't

[23:57:42.0000] <ManishCloud>
?

[23:57:53.0000] <annevk>
ManishCloud: #concept-fetch handles all URL schemes

[23:58:06.0000] <annevk>
ManishCloud: and defines the security policy for all of them too

[23:58:21.0000] <annevk>
ManishCloud: however, CORS is an HTTP protocol

[23:58:32.0000] <ManishCloud>
it handles data and about

[23:58:38.0000] <ManishCloud>
and http(s)

[23:58:43.0000] <annevk>
ManishCloud: so only the parts of #concept-fetch that end up in the HTTP pipeline will do CORS

[23:58:49.0000] <annevk>
ManishCloud: and blob and ftp and file

[23:58:53.0000] <annevk>
ManishCloud: and soon filesystem

[23:59:24.0000] <annevk>
ManishCloud: a proper implementation of XMLHttpRequest is built on top a proper implementation of Fetch

[23:59:39.0000] <ManishCloud>
yep

[00:01:00.0000] <SamB>
annevk: of course, CORS is totally beside the point for data: URLs anyway, yes?

[00:01:18.0000] <ManishCloud>
I still don't see any rule for ftp. It handles data, then about, then some request modes, then it says that non-http/https should return a network error

[00:01:34.0000] <ManishCloud>
SamB: strangely enough Blink doesn't seem to allow fetching of data

[00:01:42.0000] <annevk>
ManishCloud: it depends on the request mode

[00:02:22.0000] <annevk>
ManishCloud: if you're only considering XMLHttpRequest, then yes, XMLHttpRequest can only Fetch ftp if from an ftp URL (as then they're same-origin)

[00:02:33.0000] <ManishCloud>
okay

[00:02:46.0000] <annevk>
ManishCloud: but e.g. <img>'s request mode is "No CORS" by default, and therefore can fetch ftp all the time (although it would end up being a tainted response)

[00:03:46.0000] <annevk>
SamB: yeah, it's not entirely inconceivable that we add CORS things to non-HTTP schemes, but I kind of doubt it

[00:04:26.0000] <ManishCloud>
oh, I see

[00:04:31.0000] <SamB>
annevk: well, with data: the data is all in the URL anyway so it's totally pointless, no?

[00:04:45.0000] <SamB>
no information leakage is possible, as the information is pre-leaked

[00:07:10.0000] <annevk>
SamB: yeah

[00:07:30.0000] <ManishCloud>
annevk: in case of an <img> it's an opaque taint, though. Isn't opaque almost the same as a network error?

[00:07:34.0000] <ManishCloud>
(how does that work)

[00:08:20.0000] <annevk>
ManishCloud: the implementation of <img> has special privileges in that it can access the internal response to decode the bytes returned and leak some information through width/height

[00:08:38.0000] <annevk>
ManishCloud: that's a bit of a legacy bug

[00:08:41.0000] <SamB>
annevk: it doesn't also tell you if the load outright failed?

[00:08:54.0000] <annevk>
SamB: it does?

[00:08:58.0000] <SamB>
I don't know

[00:09:08.0000] <annevk>
I'm not sure what you're asking

[00:09:10.0000] <SamB>
I guess you could guess pretty well though

[00:09:22.0000] <SamB>
if the placeholder image has a predictable width/height ...

[00:10:10.0000] <annevk>
SamB: if fetch returns a network error <img> will dispatch an error event

[00:10:38.0000] <SamB>
that's what I was thinking of, yes

[00:10:43.0000] <annevk>
With legacy APIs you can definitely distinguish between tainting and network errors, it's a bit of a bug that's been exploited all over

[00:10:54.0000] <ManishCloud>
annevk: Oh, I see.

[00:11:13.0000] <SamB>
how hard can you exploit that?

[00:11:36.0000] <SamB>
doesn't seem as bad as the old :visited problem ...

[00:12:34.0000] <SamB>
oh, you know what I hate? auth dialogs for <img>s

[00:12:42.0000] <ManishCloud>
:o

[00:14:06.0000] <SamB>
there was this one thing that tried to load favicons from a bunch of domains, I think the idea was to see if your ISP was blocking any of them?

[00:14:25.0000] <SamB>
but some of them popped up those stupid dialogs :-(

[00:14:43.0000] <annevk>
Authentication dialogs can be spawn from pretty much any API

[00:14:50.0000] <ManishCloud>
SamB: imagine what happens when you're behind a misconfigured authenticated HTTP proxy

[00:14:58.0000] <annevk>
Only the very newest of APIs have that disabled

[00:15:30.0000] <SamB>
might be nice to rate limit them or something ;-)

[00:15:35.0000] <ManishCloud>
has happened to me. They broke login; usually after a couple of failed logins it returns an html error page. But if there are many images, well, boom.

[00:16:08.0000] <annevk>
SamB: you can figure out whether someone has an account with a certain site (the problem is made worse due to sending cookies along with the request, but it essentially exists because the user resides on a different IP than the server)

[00:16:50.0000] <SamB>
annevk: hmm

[00:17:05.0000] <SamB>
so, like, do they have a met-art account or whatever

[00:17:28.0000] <SamB>
maybe something a bit more embarrassing

[00:20:15.0000] <annevk>
Or if your government is hostile and tries to track which organizations you are affiliated with...

[00:20:47.0000] <SamB>
true

[00:21:07.0000] <annevk>
ManishCloud: you're implementing this for Servo?

[00:21:16.0000] <SamB>
that's what he said

[00:21:18.0000] <ManishCloud>
annevk: CORS? sort of

[00:21:38.0000] <annevk>
ManishCloud: I recommend implementing Fetch

[00:21:56.0000] <ManishCloud>
annevk: So I'm writing it XHR-specific but I intend to integrate this into Teepee (a full Rust implementation of fetch.s.w.o) later

[00:22:12.0000] <annevk>
s.w.o?

[00:22:16.0000] <ManishCloud>
spec.whatwg.org

[00:22:20.0000] <annevk>
heh

[00:22:47.0000] <ManishCloud>
Teepee intends to implement the fetch spec (not the browser specific things like Request and fetch() )

[00:23:03.0000] <annevk>
Pointer to GitHub?

[00:23:45.0000] <ManishCloud>
As far as implementing fetch() in Servo, I'll do that when Teepee is stable; no point implementing it with rust-http when I'll have to do all the plumbing that Teepee plans to do all over again

[00:23:47.0000] <ManishCloud>
annevk: https://github.com/teepee/teepee

[00:23:49.0000] <annevk>
Sounds good I guess, as long as you guys have the better picture in mind

[00:24:02.0000] <annevk>
I don't really care about fetch()

[00:24:07.0000] <ManishCloud>
annevk: then?

[00:24:10.0000] <annevk>
I mostly care about Fetch

[00:24:27.0000] <ManishCloud>
oh, #concept-fetch

[00:24:27.0000] <annevk>
That <img>, XMLHttpRequest, background-image, etc. all call into the same library to get a bag of bits

[00:24:44.0000] <ManishCloud>
Teepee ought to solve that problem

[00:24:48.0000] <annevk>
After that fetch() is relatively straightforward

[00:25:00.0000] <ManishCloud>
Exactly, that's why I haven't implemented it yet ;p

[00:26:14.0000] <annevk>
If Teepee is a generic HTTP toolkit, they might not be okay into making it something specific to clients

[00:26:16.0000] <ManishCloud>
I'm not the maintainer of Teepee, but I believe that it should be easy to just do `let req = Request::new(method, url, header, mode, blah)` and then call `req.fetch()` or something (with channels/hooks for the task queues)

[00:26:43.0000] <ManishCloud>
annevk: it has both a client and server library. As well as some common stuff (like headers/methods)

[00:27:20.0000] <ManishCloud>
It's not for browser specific stuff, but most of the spec isn't browser specific

[00:27:40.0000] <annevk>
Why would an HTTP library be interested in data URLs?

[00:27:47.0000] <annevk>
Or service workers?

[00:27:54.0000] <ManishCloud>
Good point

[00:27:55.0000] <annevk>
Or CORS?

[00:28:05.0000] <ManishCloud>
I need to discuss this with Chris as well, but first I'll try to get CORS done. If Chris doesn't want #concept-fetch, I'll write a wrapper for Teepee

[00:28:18.0000] <ManishCloud>
annevk: he said he does want CORS

[00:28:19.0000] <ManishCloud>
one sec

[00:28:24.0000] <annevk>
Oh

[00:28:44.0000] <annevk>
Fetch is basically a big superset of a client-side HTTP library with some tweaks

[00:29:03.0000] <annevk>
And these days JavaScript hooks (service workers)

[00:29:42.0000] <ManishCloud>
annevk: https://botbot.me/mozilla/rust/2014-06-30/?msg=17205109&page=9

[00:30:47.0000] <ManishCloud>
yep

[00:31:03.0000] <annevk>
I guess you can guys can sort out the planning, now you know how it works

[00:34:52.0000] <ManishCloud>
yep :P

[00:34:54.0000] <ManishCloud>
:)

[00:38:08.0000] <ManishCloud>
anyway, thanks for the help!

[02:29:23.0000] <annevk>
tobie: asURL() still seems simplest, the others get tricky; e.g. request has an origin that won't be the origin of the URL

[02:29:29.0000] <annevk>
tobie: at least not always

[03:25:25.0000] <hsivonen>
MikeSmith: I'll need to figure out how to deploy from git first. Not going to happen today. Tomorrow hopefully.

[03:27:13.0000] <MikeSmith>
hsivonen: no rush then. Tomorrow's a US holiday anyway, so a lot of people would miss any announcement. So it can wait til next week or after.

[04:14:12.0000] <annevk>
Ms2ger: should we revive the thing where we use a single entry to reference a bunch of specs?

[04:14:22.0000] <annevk>
Ms2ger: seems somewhat useful for XML, but especially HTTP

[04:14:27.0000] <Ms2ger>
Mm, perhaps

[05:30:23.0000] <crankharder>
so i'm working with this 3rd party / client that is sending us multi-part POST requests that have no Content-Length which has already caused problems where akamai immediately drops the request ( ddos protection etc )

[05:30:52.0000] <crankharder>
is there any scenario where not specifying the content-length is valid or should I be pushing back on these guys about the finer points of the http spec?

[05:48:45.0000] <annevk>
crankharder: https://tools.ietf.org/html/rfc7230#section-3.3.2

[05:48:48.0000] <Domenic>
crankharder: I believe if you specify Transfer-Encoding: chunked and the data gets sent in that fashion, Content-Length is not necessary

[06:04:33.0000] <crankharder>
I just managed to get my hands on the raw request: 'Transfer-Encoding: chunked'

[06:04:36.0000] <crankharder>
dammit

[06:05:46.0000] <annevk>
crankharder: seems like an Akamai problem

[06:15:52.0000] <zewt>
the whole point of chunked is to not specify a content length, you use it when you don't know the length in advance

[06:16:25.0000] <zewt>
eg. compression

[07:38:33.0000] <tobie>
annevk: not sure that bug's comment is the right place to have the URL conversation. :)

[07:39:37.0000] <tobie>
annevk: happy to take that elsewhere if you want.

[07:40:53.0000] <annevk>
tobie: so you want URL.parse to return an immutable object?

[07:42:22.0000] <tobie>
annevk: no. I'm just expressing confusion as to why we on one hand facilitate devs building URL objects and on the other, hope they use strings to represent urls as much as possible.

[07:42:57.0000] <annevk>
If we had value objects sooner URLs would be a value object

[07:43:35.0000] <annevk>
However, we don't, so they are strings. Similarly time representation is done through a floating point number.

[07:43:36.0000] <tobie>
annevk: I need to refresh my memory about those.

[07:43:44.0000] <annevk>
Meaning can be extracted through objects such as URL and Date

[07:44:05.0000] <tobie>
annevk: everybody agrees that the Date constructor in JS is terrible.

[07:44:31.0000] <tobie>
annevk: also mutable dates kind of blow my mind (but that's more subject to debate).

[07:45:07.0000] <annevk>
tobie: the constructor being terrible does not mean it's not the way to do time

[07:46:59.0000] <annevk>
Anyway, the underlying platform model thing is a URL value object of sorts

[07:47:23.0000] <annevk>
Which is serialized when you do request.url

[07:50:20.0000] <tobie>
annevk: mmm. Well, we're going on in circles, here, but given it's stringifiable(?) why don't we expose this as an immutable URL object then?

[07:50:38.0000] <annevk>
tobie: that doesn't exist

[07:50:58.0000] <annevk>
tobie: or do you mean the URLUtilsReadOnly thing?

[07:51:07.0000] <annevk>
tobie: yeah, I wouldn't mind doing that

[07:51:16.0000] <annevk>
tobie: on reflection, Domenic seemed opposed somewhat

[07:51:58.0000] <tobie>
annevk: no I mean the stringifier attribute.

[07:52:38.0000] <tobie>
annevk: (but I might be misunderstanding what it means.)

[07:52:59.0000] <annevk>
tobie: you lost me

[07:54:15.0000] <tobie>
annevk: :( God I hate WebIDL.

[07:55:02.0000] <Ms2ger>
It's always easy to blame WebIDL

[07:55:38.0000] <annevk>
tobie: I'm happy with an explanation that does not involve IDL

[07:58:23.0000] <tobie>
annevk: wondering if all of this doesn't stem from my misunderstanding of what stringifier does.

[07:58:30.0000] <tobie>
annevk: reading up on it now.

[07:58:36.0000] <tobie>
Ms2ger: heh.

[07:58:43.0000] <annevk>
tobie: that's just another word for toString()

[07:59:31.0000] <tobie>
annevk: right. So the URL object gets turned into url.href when coerced to a string, right?

[07:59:58.0000] <annevk>
yes

[08:05:37.0000] <tobie>
annevk: I guess I need to see more examples of SW before pushing for a change here.

[08:06:26.0000] <tobie>
annevk: if it is mostly the case that people use request.url to choose how to respond, then returning an immutable URL object makes sense.

[08:07:30.0000] <tobie>
annevk: if on the other hand, there's lots of manipulation of the URL object going on anyway, then we might as well keep the string.

[08:08:51.0000] <annevk>
tobie: changing this after the fact will be hard

[08:09:04.0000] <annevk>
tobie: at least in a nice way

[08:11:15.0000] <tobie>
annevk: vaguely related, but you mentioned the Request object has an origin attribute. Where is it defined? (can't find it)

[08:11:30.0000] <tobie>
annevk: true. I meant I want to look at a bit more examples.

[08:11:40.0000] <tobie>
Within the next couple of weeks.

[08:13:43.0000] <annevk>
tobie: oh, it's not exposed

[08:14:01.0000] <annevk>
tobie: I think it might not be exposed because it would always be same-origin with the service worker

[08:14:39.0000] <annevk>
tobie: I kept some properties off Request for now until we have a v0 implementation

[08:15:08.0000] <annevk>
tobie: yeah, I guess we can change this in August still

[08:18:20.0000] <tobie>
Right, that was my understanding wrt that origin prop.

[08:42:02.0000] <tobie>
annevk, JakeA: is the promise returned by cache.add resolved with responseArray or void? Promise<any> seems to imply the former, the algorithm seems to imply the latter.

[08:47:28.0000] <tobie>
annevk, JakeA: Trying to build an example which primes the cache after a cache miss: https://gist.github.com/tobie/0689c5dda8f6d49d500d#file-gistfile1-js-L25-L30

[08:50:17.0000] <annevk>
not sure, haven't followed Cache that much

[08:50:32.0000] <annevk>
waiting for rename, some more stability in the API

[08:53:56.0000] <tobie>
cache.add which does fetch in the background seems like a terrible name (and weird API)

[08:54:33.0000] <tobie>
annevk: also priming the cache before sending back a response shouldn't be that difficult.

[08:58:22.0000] <annevk>
tobie: work on it with Jake?

[08:59:05.0000] <tobie>
annevk: if that's how it works, then sure. :)

[08:59:34.0000] <annevk>
tobie: I think JakeA is working on that API and making sure it's good

[08:59:53.0000] <annevk>
If that's not the case I'd like to know, because then someone else should take ownership

[09:06:10.0000] <tobie>
annevk: reaching out to JakeA by email, cc'ing you.

[09:07:14.0000] <tobie>
annevk: or should I move that conversation to WHATWG mailing list directly?

[09:07:50.0000] <annevk>
tobie: public-webapps is the SW spec list, and since cache is there...

[09:08:04.0000] <tobie>
annevk: ty

[09:10:14.0000] <tobie>
annevk: what about the waitUntil/respondWith issue?

[09:11:00.0000] <annevk>
tobie: could email there too, it's hard to attract people that want to change that part of the design

[09:11:17.0000] <annevk>
tobie: probably need to come up with a replacement design to get that through

[09:11:31.0000] <tobie>
I have for waitUntil

[09:12:35.0000] <tobie>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/256#issuecomment-47878042

[09:53:03.0000] <IZh>
Hi. Is there API to specify which textarea should or shouldn't be spell checked by browser (if capable)?

[09:53:44.0000] <IZh>
And probably suggest language for checking.

[09:56:12.0000] <IZh>
May be for other types of input fields too.

[09:59:44.0000] <gsnedders>
is the script that generates the index published anywhere?

[10:00:01.0000] <gsnedders>
IZh: the spellcheck attribute

[10:00:30.0000] <IZh>
gsnedders: thanks.

[10:00:42.0000] <gsnedders>
IZh: language I guess is inferred from @lang?

[10:00:58.0000] <gsnedders>
but browsers may just always assume the current locale

[10:02:25.0000] <IZh>
gsnedders: May be. But it will be bad for online translator sites.

[10:10:49.0000] <Ms2ger>
gsnedders, assuming not, given that it's part of Hixie's pipeline

[10:11:15.0000] <Hixie>
there's no script that generates the index

[10:11:18.0000] <Hixie>
it's manually managed

[10:12:44.0000] <gsnedders>
Hixie: oh, okay

[10:24:54.0000] <jgraham>
gsnedders: So you can have access to it, but only if you have a scapel

[10:40:53.0000] <jgraham>
Is there a proper way to select the elements of the first column of a table (:nth-child doesn't seem to work in the face of cells with rowspan > 1)?

[10:41:51.0000] <Ms2ger>
No

[10:42:36.0000] <jgraham>
/me adds a class

[10:44:45.0000] <jgraham>
Hmm, it will also screw up alternating row background colours because the first column will get a random colour

[10:47:17.0000] <Hixie>
many people have over the years proposed table-model-aware selectors

[13:11:54.0000] <annevk>
Imagine if all those people instead worked on the table layout model... Oh wait

[13:15:45.0000] <jgraham>
Only dbaron actually understands the table layout model

[13:15:58.0000] <jgraham>
Although he does try to explain it to everyone he meets

[13:16:16.0000] <jgraham>
Which does mean that one day a second person might understand it

[13:19:59.0000] <svl>
/me is reminded of http://quotes.burntelectrons.org/183

[13:52:03.0000] <annevk>
There's some brilliant quotes there

[14:02:29.0000] <annevk>
I should probably stop reading now

[14:04:04.0000] <svl>
^_^

[14:56:56.0000] <cabanier>
annevk: yeah! It makes my sadness for the depressing state of the geometry interfaces go away


2014-07-04
[18:25:24.0000] <estellevw>
While autofocus should only be used once per document, if there were more than one in the document, the autofocus attribute used to target the last element with the autofocus attribute. I tested 3 months ago, and all browsers tested did this. testing again today, Chrome and Firefox now give focus to the first occurrence of autofocus. Did the spec change. I’ve failed to successfully Google any discussion on that topic.

[18:34:28.0000] <caitp>
> If the user agent has already reached the last step of this list of steps in response to an element being inserted into a Document whose top-level browsing context's active document is the same as target's top-level browsing context's active document, abort these steps.

[18:34:48.0000] <caitp>
I take that to mean, for a given browsing context, only autofocus the first control with an autofocus attribute?

[18:35:36.0000] <estellevw>
started in chrome 34

[18:35:47.0000] <estellevw>
they used to all focus on the last occurence of autofocus

[18:36:16.0000] <estellevw>
34+ focuses on the first instead

[18:36:24.0000] <estellevw>
yes

[18:37:18.0000] <caitp>
you can probably find discussion on it if you svn/git blame it

[18:38:45.0000] <caitp>
github doesn't feel it's worth its effort though :>

[18:39:45.0000] <estellevw>
can’t even find it in svn  — then, of course, not sure of the exact range to inspect

[18:41:42.0000] <caitp>
might be able to find mention of it in implementation code, too

[18:41:54.0000] <caitp>
not sure if that would live in parsing or DOM though, otoh

[18:43:23.0000] <estellevw>
trying to figure out if it’s a bug or feature. The spec doesn’t clarify it for me http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#autofocusing-a-form-control:-the-autofocus-attribute

[23:03:08.0000] <annevk>
Figuring out context is hard :-(

[23:14:01.0000] <jungkees>
annevk: During the SW registration process, which is not a task as you told,

[23:14:15.0000] <jungkees>
annevk: If I resolve a promise in a step..

[23:14:28.0000] <jungkees>
annevk: is it queued as a microtask?

[23:14:51.0000] <annevk>
jungkees: no, but unless you change state as well, that is fine, as a promise can only be observed from a microtask

[23:18:50.0000] <jungkees>
annevk: I don't think I understood the term "state" you explained. Is it a term defined in a spec or general word to designate platform state?

[23:19:31.0000] <annevk>
jungkees: general; like changing properties, dispatching events

[23:20:09.0000] <annevk>
jungkees: I think we should define asynchronous as a term to make this whole thing more clear, but Hixie disagrees so far

[23:22:17.0000] <jungkees>
annevk: then in SW registration I just mentioned, when I resolve a promise in step A, the fulfillment cb is executed first? or the subsequent steps in the algorithm executed first?

[23:22:37.0000] <annevk>
/me looks

[23:23:28.0000] <annevk>
jungkees: oh, if the  algorithm is asynchronous, you can't predict that

[23:25:14.0000] <jungkees>
annevk: yeah.. it seems if the asynch part of the algorithm is a definitive task in a queue, it'll be clearer to reason it about

[23:25:43.0000] <annevk>
jungkees: you don't want your algorithms to interfere with the main thread

[23:26:05.0000] <annevk>
jungkees: the event loop is off limits, it's synchronous code

[23:26:15.0000] <annevk>
jungkees: delaying painting and whatnot

[23:27:47.0000] <jungkees>
annevk: weird you express the event loop is synchronous code though..

[23:28:24.0000] <annevk>
jungkees: why? It's just a queue of bits of code run after each other, nothing goes in parallel

[23:28:48.0000] <jungkees>
annevk: so you meant the queue implement itself.. the while loop

[23:29:13.0000] <annevk>
jungkees: you lost me

[23:32:36.0000] <annevk>
jungkees: the rules are very simple, specification algorithms run in parallel (unless they're super cheap and can be done synchronous) and only ever queue tasks or microtasks to set a property or dispatch an event

[23:33:03.0000] <SamB>
and, yes, the event loop is in fact a loop

[23:33:51.0000] <jungkees>
annevk: SamB alright

[23:44:41.0000] <jungkees>
annevk: is there any reason you don't queue a task to fire events in XHR? it just fire events without queuing a task

[23:44:57.0000] <jungkees>
annevk: I've done the same in SW registration

[23:45:10.0000] <jungkees>
annevk: think it should queue a task instead?

[23:54:47.0000] <annevk>
jungkees: XMLHttpRequest queues tasks for events, pointer?

[23:56:50.0000] <annevk>
jungkees: it also does a bunch of other stuff on such tasks usually

[00:00:55.0000] <jungkees>
annevk: like step11.2 in http://xhr.spec.whatwg.org/#dom-xmlhttprequest-send

[00:01:46.0000] <jungkees>
annevk: maybe because it's in main thread?

[00:03:19.0000] <jungkees>
annevk: then in SW case, I think I need to queue a task for firing the events

[00:26:39.0000] <annevk>
jungkees: yeah, that's synchronous

[00:28:59.0000] <SamB>
wait, are they seriously using segmentation for NaCl?

[00:29:19.0000] <annevk>
jungkees: it's also necessary for updating .state

[00:30:13.0000] <jungkees>
annevk: yeah, i'll do that; queue a task to update .state and fire events on the object

[00:31:16.0000] <SamB>
ECHAN

[00:40:42.0000] <jungkees>
annevk: per https://github.com/w3ctag/promises-guide#queue-tasks-to-invoke-user-code, when asynchronously running algorithm do "resolve p with x", it seems do "queue a task to call the callback cb with x,"

[00:41:41.0000] <jungkees>
annevk: is this fulfillment cb queued in task queue? or microtask queue?

[00:42:26.0000] <annevk>
jungkees: if you resolve a promise from asynchronous code it's callbacks will run in the next available microtask slot; so the latter

[00:42:45.0000] <annevk>
jungkees: it's the same really as whenever you'd resolve a promise from synchronous code

[00:43:33.0000] <annevk>
jungkees: however, if you change state on an object, such as a property, and announce that also through a promise, you need to queue a task to change state and resolve

[00:44:25.0000] <jungkees>
annevk: Okay

[03:23:42.0000] <jungkees>
annevk: An asynchronously running steps in algorithm A declared a variable foo and queued a task (B) in a subsequent step; Does it make sense the queued task B set a value to A's foo?

[04:44:42.0000] <annevk>
jungkees: so 1. Let /foo/ be X. 2. Queue a task to set /value/ to /foo/? That could make sense

[04:48:46.0000] <jungkees>
annevk: oh i see

[04:50:12.0000] <annevk>
jungkees: unfortunately the best way to get knowledge of this stuff is to carefully study algorithms in HTML, XMLHttpRequest, Notifications, etc.

[04:50:19.0000] <annevk>
jungkees: while keeping in mind that none of those is perfect

[04:53:00.0000] <annevk>
jungkees: I'll be away for three weeks or so, hopefully this is enough for now, otherwise I recommend asking Hixie or Domenic

[04:53:40.0000] <jungkees>
annevk: thanks for help

[04:53:50.0000] <jungkees>
annevk: going on a vacation?

[04:54:36.0000] <jungkees>
annevk: Enjoy your holidays and let's sync-up when you get back

[04:55:15.0000] <jungkees>
annevk: I think I'll refine the algorithms better till then though I'll may take a week off during the time

[06:32:20.0000] <annevk>
jungkees: yes & sounds good

[07:16:43.0000] <wilhelm>
"The RDF Working Group [1] is now closed."

[07:22:10.0000] <Ms2ger>
/me wonders if the CSSWG is still open

[07:24:43.0000] <wilhelm>
Yes, they just got their charter renewed. :P

[07:35:17.0000] <annevk>
So we need to split request's context into two things

[07:35:39.0000] <annevk>
The first is more or less like context is now, the second will be the browsing context "type"

[07:36:27.0000] <annevk>
contextSource == "hyperlink" && contextFrame == "top-level"

[07:36:47.0000] <annevk>
Anyone want to bikeshed, jgraham?

[07:37:12.0000] <jgraham>
Why are we bikeshedding me?

[07:38:23.0000] <jgraham>
annevk: Well apart from the obvious fact that js needs an enum type, assuming that does what it sounds like it seems like a reasonable choice of names

[07:38:33.0000] <jgraham>
I don't have more context than that line though

[07:39:01.0000] <annevk>
If you want more context (hah!) you could read https://github.com/slightlyoff/ServiceWorker/issues/352

[07:39:55.0000] <annevk>
Might be hard to introduce an enum type now IDL settled on strings

[07:40:55.0000] <jgraham>
Strings are pretty terrible :(

[07:41:22.0000] <jgraham>
I guess frame is somewhat misleading

[07:41:46.0000] <jgraham>
Could be contextType or something

[07:42:31.0000] <jgraham>
(because it doesn't tell you what actual frame you used, just what type of browsing context it was)

[07:53:36.0000] <annevk>
context frame type

[07:53:51.0000] <annevk>
and just context I guess, you don't always need/use context frame type

[08:20:14.0000] <annevk>
Hmm, need more contexts to complete the context alphabet

[08:25:05.0000] <annevk>
Oh my, even <embed> can create a nested browsing context!

[08:25:20.0000] <annevk>
SVG, WHYYYYYY

[09:26:49.0000] <annevk>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26247#c14

[09:29:50.0000] <jgraham>
annevk: I guess I could read the spec, but if [i]frame and hyperlink are orthogonal it's not clear what happens with <iframe name=bar> and <a href="foo" target=bar>

[11:51:29.0000] <annevk>
jgraham: they're not, the former would be setting their src attribute

[11:52:24.0000] <annevk>
for this to be defined in detail requires all end points to be in terms of fetch however

[12:09:10.0000] <cmr>
Hixie: whatwg.org is down

[13:42:37.0000] <Hixie>
cmr: there was some issue a couple of hours ago, yeah. seems resolved.

[13:44:27.0000] <cmr>
Hixie: indeed it does, thanks

[15:05:31.0000] <SamB>
wha, why does the background give out in the middle of the section http://perldoc.perl.org/perlmodlib.html#Asia here ...

[15:06:11.0000] <SamB>
well, part of it starts there, part of it gets a bit further

[15:11:32.0000] <caitp>
huh?

[15:21:57.0000] <SamB>
caitp: does that not happen for you?

[16:35:04.0000] <zewt>
typed "background: none" into a style in the FF inspector ... got "background: none; -repeatndoundkface-visibility"

[16:35:09.0000] <zewt>
^5 braindamaged autocomplete


2014-07-05
[23:32:47.0000] <SamB>
/me wonders why you can't use an SSH key to authenticate with an http[s] server ...

[01:40:36.0000] <MikeSmith>
U+000C isn't whitespace in CSS?

[01:41:50.0000] <Ms2ger>
What is whitespace, really, if you think about it

[01:56:02.0000] <caitp>
how often are those control characters used these days in web documents?

[02:08:22.0000] <MikeSmith>
caitp: probably not at all. But the problem is, the HTML spec defines U+000C as a space character but CSS doesn't, and I'm writing code to parse CSS in HTML "sizes" and "media" attributes but I can't reuse the existing space-processing code I have for HTML

[02:08:44.0000] <caitp>
mm

[09:29:32.0000] <Ms2ger>
MikeSmith, is irc.w3.org still down?

[09:29:41.0000] <gsnedders>
down for me

[09:38:44.0000] <Ms2ger>
Hm, all of w3.org seems to be down

[09:52:49.0000] <Ms2ger>
Back up

[09:53:19.0000] <Ms2ger>
(IRC, at least)

[13:00:56.0000] <zcorpan>
MikeSmith: i thought it was whitespace in css also

[14:04:23.0000] <MikeSmith>
zcorpan: http://drafts.csswg.org/css-syntax/#whitespace-diagram and http://drafts.csswg.org/css-syntax/#whitespace

[14:06:22.0000] <zcorpan>
MikeSmith: drafts.csswg.org/css-syntax/#input-preprocessing

[14:06:44.0000] <MikeSmith>
/me looks

[14:07:25.0000] <MikeSmith>
zcorpan: ah OK good

[14:07:39.0000] <MikeSmith>
FF -> LF I see

[15:04:16.0000] <SimonSapin>
"User agents are encouraged to expose parse errors somehow." Does anyone care about this in practice, outside of validators? http://url.spec.whatwg.org/#parse-error

[15:05:07.0000] <SamB>
SimonSapin: you mean, like, the Console?

[15:05:42.0000] <SimonSapin>
SamB: yeah, for example, does any browser report non-fatal URL parse errors in their Console?

[15:06:34.0000] <SamB>
SimonSapin: I'm not sure; at the time when it would be doing that, the console usually gets cleared anyway

[15:42:02.0000] <zcorpan>
SimonSapin: i think several browsers log HTML parse errors

[15:43:17.0000] <SimonSapin>
zcorpan: There is at least one URL parse error that neither Chromium nor Firefox logs (this is how much testing I’ve done so far)

[15:43:35.0000] <SimonSapin>
(one URL parse error in the spec)

[15:44:10.0000] <zcorpan>
SimonSapin: the URL so spec isn't implemented yet is it?

[15:44:26.0000] <zcorpan>
-so

[15:44:44.0000] <SimonSapin>
zcorpan: I don’t know, maybe not

[15:45:06.0000] <SimonSapin>
I’m implementing it in Rust, but it seems so far that only annevk cares about non-fatal URL parse errors

[15:46:20.0000] <SimonSapin>
detecting parse errors slightly increases the code complexity

[15:46:41.0000] <SimonSapin>
but then I have no good way to log them, for a library that way be used outside of a browser

[15:47:26.0000] <SimonSapin>
Does html5lib log parse errors?

[15:47:31.0000] <SimonSapin>
gsnedders: ^

[15:47:56.0000] <zcorpan>
yes

[15:48:44.0000] <SimonSapin>
where do they go?

[15:50:07.0000] <gsnedders>
SimonSapin: it can

[15:50:14.0000] <gsnedders>
SimonSapin: I think it always does

[15:50:32.0000] <gsnedders>
SimonSapin: there's some API from the parser, maybe errors or something?

[15:50:34.0000] <gsnedders>
idk

[15:51:17.0000] <SimonSapin>
looks like HTMLParser().errors is a list of tuples

[15:52:06.0000] <SimonSapin>
gsnedders: any opinion on URL parse errors?

[15:54:15.0000] <gsnedders>
SimonSapin: what sort of opinions? :P

[15:54:39.0000] <SimonSapin>
should they be logged, or does nobody care?

[15:54:46.0000] <gsnedders>
out of scope

[15:54:52.0000] <gsnedders>
much like we don't report CSS parse errors

[15:55:20.0000] <SimonSapin>
I mean for a URL parsing library

[15:55:46.0000] <gsnedders>
It'd be nice to log them, at least optionally

[16:06:50.0000] <gsnedders>
SimonSapin: Also, note that people said nobody cared about exposing parse errors until HTML5 parsers suddenly started doing so

[16:08:20.0000] <SamB>
gsnedders: how else are they supposed to test that they had correctly *detected* them?

[16:08:32.0000] <gsnedders>
there's no requirement to detect them

[16:08:37.0000] <gsnedders>
just handle them correctly

[16:09:00.0000] <gsnedders>
and handling can be tested by checking the output DOM

[16:09:32.0000] <SamB>
yes, but it makes it harder to tell whether or not you keeping your branches straight if you don't report them ;-)

[16:09:37.0000] <SamB>
+'re

[16:10:11.0000] <gsnedders>
/me only very briefly had anything to do with any browser impl

[16:10:15.0000] <gsnedders>
very very briefly

[16:28:30.0000] <SimonSapin>
SamB: I’m not very familiar with the HTML parser, but I believe it’s similar to URL: the spec defines what implementations should do in all cases. Additionally, in some cases, it says "this is a parse error". Which in itself does not affect the implementation (except if it chooses to log such errors), it only expresses author requirements

[16:28:37.0000] <SimonSapin>
a validator would check author requirements

[16:28:51.0000] <gsnedders>
SimonSapin: browsers log parse errors when the console is open

[16:29:03.0000] <gsnedders>
SimonSapin: or at least WebKit, Blink, and Presto do. I think Trident too.

[16:29:13.0000] <gsnedders>
I'm pretty sure Gecko logs them, um, somewhere.

[16:29:55.0000] <SamB>
SimonSapin: yes, well, I assume it's a lot easier to verify that the parser logic has been accurately translated into code if you can see those parse errors ;-)

[16:30:07.0000] <SamB>
or at least to sanity-check it

[16:32:09.0000] <SimonSapin>
hum, I wouldn’t say "a lot easier"


2014-07-06
[18:30:33.0000] <MikeSmith>
SimonSapin: as far as In other words, it should be possible to catch this case just using a conforming tokenizer, without needing a parser.

[18:30:38.0000] <MikeSmith>
oops

[18:30:45.0000] <MikeSmith>
copy pasta

[18:31:39.0000] <MikeSmith>
SimonSapin: meant to say, as far as "User agents are encouraged to expose parse errors somehow.", Firefox's View Source also uses that

[18:32:04.0000] <SimonSapin>
MikeSmith: for URL parse errors?

[18:32:15.0000] <MikeSmith>
SimonSapin: no, in the case of the similar parse-error stuff in the HTML parsing algorithm

[18:33:14.0000] <MikeSmith>
SimonSapin: for URL parse errors, galimatias (a general-purpose URL parsing library) at least does expose the parse errors

[18:35:00.0000] <MikeSmith>
SimonSapin: there might be non-browser cases other than validators where people would like to have access parse errors, but I don't know of specific ones

[18:38:34.0000] <SimonSapin>
ok, apparently you can give galimatias a custom error handler that will receive errors and can do whatever

[18:38:57.0000] <SimonSapin>
a closure (callback) should do

[18:39:45.0000] <MikeSmith>
SimonSapin: what you need this for?

[18:40:07.0000] <SimonSapin>
MikeSmith: I’m implementing http://url.spec.whatwg.org/ in Rust

[18:40:23.0000] <SimonSapin>
trying to figure out what to do with non-fatal parse errors

[18:42:16.0000] <MikeSmith>
SimonSapin: ah ok

[18:43:59.0000] <MikeSmith>
SimonSapin: well at the very least having an error-reporting URL parser in Rust would mean somebody could eventually use that parser as part of a validator written in Rust, which is worth something

[03:34:13.0000] <zcorpan_>
mathiasbynens: is http://dev.opera.com/articles/showmodaldialog/ still up to date? was the removal delayed another version maybe? (also the demo's popup says 404)

[05:52:36.0000] <MikeSmith>
Ms2ger: I see you heard back from the W3C systeam by now but yeah there was scheduled network outage at MIT that made IRC and everything else inaccessible for a while

[05:53:00.0000] <Ms2ger>
Yep, thanks :)

[16:38:46.0000] <daurnimator>
I return, yet again lamenting the lack of some sort of GC callback in JS :(

[16:40:02.0000] <SamB>
daurnimator: for what?

[16:40:29.0000] <daurnimator>
SamB: interop/other languages running on top of JS

[16:40:43.0000] <daurnimator>
trying to know when js is done with some object/callback/etc

[16:41:16.0000] <caitp>
frankly, having a standard way to run specific code when an object is finalized is very useful, and we are all poorer for not having it

[16:41:18.0000] <daurnimator>
I'm now sitting here contemplating writing a js parser to analyse functions to decorate them as leaky or not

[16:42:33.0000] <SamB>
we could use it for useful things, like putting the object in a list of dead objects!

[16:43:15.0000] <Hixie>
SamB: or to force all browsers to have the same GC model and kill all innovation in that space!

[16:43:25.0000] <daurnimator>
SamB: e.g. I want to run lua in the browser:  x=js.new(window.XHR);x:open("GET", "google.com", true); function x:onreadystatechange() print("I get leaked") end; x:send();

[16:43:54.0000] <daurnimator>
Hixie: having an 'oncollected' callback does not dictate the GC model

[16:43:57.0000] <caitp>
SamB: like closing file handles, for instance

[16:44:20.0000] <SamB>
caitp: I know what such things are used for in the real world, yes

[16:44:34.0000] <caitp>
just checking =]

[16:44:37.0000] <SamB>
but here on the web, our file handles aren't even open in the first place ;-)

[16:44:38.0000] <Hixie>
daurnimator: actually it does, because people will end up depending on in what order things get GCed

[16:44:48.0000] <caitp>
javascript doesn't strictly live on the web though

[16:44:49.0000] <daurnimator>
Hixie: why? they don't in other languages

[16:45:10.0000] <caitp>
all kinds of things use v8, from databases to web servers

[16:45:14.0000] <caitp>
rhino too

[16:45:57.0000] <SamB>
daurnimator: outside of the web, the people who screw stuff up in the first place get most of the complaints

[16:46:24.0000] <SamB>
not the ones who changed what was meant as an implementation detail

[16:46:43.0000] <SamB>
or, well, outside of networking really

[16:47:22.0000] <SamB>
now *I* would think this was easily solved by having an unintelligable order in the first place, but evidently it isn't so

[16:49:04.0000] <Hixie>
daurnimator: the web is an oddly unusual case in that there's orders of magnitude more code, the code isn't maintained but is still compiled by newer compilers every time they come out, and the users are HIGHLY sensitive to breakage and change compilers on a whim so there's a lot of pressure to not break things

[16:49:59.0000] <daurnimator>
that sounds like a documentation issue, but to prevent people relying on *BROWSER'S* behaviour, just add (excuse the psuedo code): function gc_sweep() shuffle(this.marked_objects); this.marked_objects.forEach(function(o) if o.oncollect then o:oncollect() end free(o) end);

[16:50:31.0000] <daurnimator>
that is, if you're scared of people relying on order. randomise order

[16:51:13.0000] <Hixie>
that still exposes order

[16:51:32.0000] <Hixie>
it's not just per-cycle order that matters

[16:51:38.0000] <Hixie>
it's also which cycle

[16:51:40.0000] <daurnimator>
should make it unreliable enough that people don't rely on it?

[16:51:51.0000] <Hixie>
not if the list is one item long each time

[16:52:01.0000] <daurnimator>
Hixie: true.

[16:52:20.0000] <Hixie>
the problem is some browsers want to optimise for memory pressure, so they'll GC aggressively, and others want to optimise for speed, so they'll aggressively wait for idle cycles to do incremental GC

[16:52:28.0000] <Hixie>
and these two have _radically_ different behaviours

[16:52:33.0000] <Hixie>
behaviours that can't just be papered over

[16:52:44.0000] <daurnimator>
anyway, I'd really like to see some sort of oncollect callback. even if it's only on ES6 proxies for e.g.

[16:53:43.0000] <Hixie>
i wouldn't hold your breath :-)

[16:54:21.0000] <daurnimator>
/me goes back to theorising a JS parser in JS and then writing a GC on top of JS

[16:54:28.0000] <SamB>
anyway, it turns out that releasing things like file handles only when something is GC'd naturally can have bad results sometimes ...

[16:54:51.0000] <daurnimator>
SamB: yep. 'sometimes'. in the (rare) cases it's not, you still have ob:close()

[16:54:54.0000] <caitp>
a GC on top of JS? lol

[16:55:49.0000] <daurnimator>
caitp: somefunc.toString() ==> parse ==> what happens to arg#2? ==> does it get assigned somewhere? ==> add it to 'leaked' list

[16:55:52.0000] <caitp>
SamB there's a distinction between "finalized" and "collected"

[16:55:58.0000] <caitp>
I think what he's really talking about is finalization

[16:56:24.0000] <caitp>
once there are no live references to an object, he'd probably want to close those file handles

[16:56:26.0000] <SamB>
so, maybe the real solution is to run finalizers after a random delay regardless

[16:56:39.0000] <daurnimator>
I'd also be happy with that solution

[16:57:12.0000] <daurnimator>
I just don't want to keep leaking via callbacks (e.g. setTimeout, xhr.onreadystatechange, etc)

[16:57:31.0000] <daurnimator>
makes writing long running web apps impossible

[16:57:39.0000] <Hixie>
why would you leak via callbacks?

[16:57:59.0000] <daurnimator>
Hixie: 23:43:25 < daurnimator> SamB: e.g. I want to run lua in the browser:  x=js.new(window.XHR);x:open("GET", "google.com", true); function x:onreadystatechange() print("I get leaked") end; x:send();

[16:58:27.0000] <daurnimator>
the lua function gets a proxy constructed in JS

[16:58:27.0000] <caitp>
now it gets interesting :>

[16:58:37.0000] <daurnimator>
which is set as the onreadystatechange callback

[16:58:39.0000] <Hixie>
ok well step one, don't run lua...

[16:58:52.0000] <SamB>
what browser is this?

[16:58:54.0000] <daurnimator>
this is applicable to running anything on top of JS

[16:58:56.0000] <daurnimator>
SamB: all of them

[16:59:07.0000] <SamB>
most of my browsers don't offer to run lua

[16:59:11.0000] <daurnimator>
SamB: https://daurnimator.github.io/lua.vm.js/repl.html

[16:59:12.0000] <Hixie>
why would you run a language on top of JS

[16:59:23.0000] <caitp>
i expect you could probably build the lua runtime with emscripten, heh

[16:59:28.0000] <caitp>
guessing it's something like that

[16:59:32.0000] <daurnimator>
caitp: that one there is

[16:59:34.0000] <SamB>
ah, right, crazy

[16:59:54.0000] <daurnimator>
SamB: it works except for the fact it leaks proxys >.<


2014-07-07
[17:00:05.0000] <caitp>
make kripken fix it!

[17:00:13.0000] <daurnimator>
caitp: I'm project owner now :P

[17:00:20.0000] <caitp>
furreal?

[17:00:24.0000] <daurnimator>
(of lua.vm.js, not emscripten)

[17:00:28.0000] <caitp>
oh I see

[17:00:36.0000] <daurnimator>
lua.vm.js was originally a kripken demo

[17:01:36.0000] <daurnimator>
BUT, thats just one example (thats easy for me to explain, as I'm close to it)

[17:01:50.0000] <daurnimator>
there's plenty of languages/frameworks/etc that live on top of js

[17:02:37.0000] <SamB>
(note that it is possible to do finalizers in such a way that the object being finalized is never actually revealed to the finalizer)

[17:02:50.0000] <daurnimator>
SamB: hmm?

[17:03:06.0000] <SamB>
well, I mean, the finalizer could certainly know "which one" it had been

[17:03:20.0000] <SamB>
but the object can be dead

[17:03:39.0000] <daurnimator>
which what?

[17:03:39.0000] <SamB>
but that's about finalizer interfaces, not about what you can do in JS now

[17:07:22.0000] <roc>
"that sounds like a documentation issue" hahahahahahaha. You must be new here :-)

[17:07:51.0000] <SamB>
yeah, indeed

[17:08:51.0000] <daurnimator>
roc: I didn't say documentation issues could be solved ;)

[17:09:09.0000] <roc>
depends on what you mean by solved

[17:09:15.0000] <roc>
documenting things is easy

[17:09:28.0000] <daurnimator>
if only

[17:09:29.0000] <roc>
getting people to *follow* the documentation, that's impossible.

[17:09:44.0000] <daurnimator>
if documentation was easy the world would be a nicer place

[17:09:48.0000] <caitp>
it's even more impossible when the documentation sucks

[17:10:01.0000] <daurnimator>
where (e.g.) undefined behaviour in C was obvious

[17:59:04.0000] <SamB>
daurnimator: that's *not* just a documentation issue

[18:00:58.0000] <SamB>
http://en.wikipedia.org/wiki/Finalizer#Resource_management mentions that using finalizers to release resources isn't really all that wise, though that obviously doesn't really apply to trying to interface two GCs ...

[18:01:54.0000] <SamB>
more to the file thing

[18:04:26.0000] <caitp>
Sam that article is essentially saying "deallocating resources during a finalizer is unwise because finalizers might be implemented wrong"

[18:04:36.0000] <caitp>
that's kind of a silly argument

[18:05:32.0000] <SamB>
caitp: not really

[18:06:39.0000] <SamB>
finalizers *are* tied to garbage collection; using them to free resources besides garbage collected memory is very risky, because the next GC could come much later than you expect

[18:07:35.0000] <SamB>
especially with some browsers taking a more aggressive approach to GC than others

[18:07:38.0000] <caitp>
with browsers it's a bit complicated when C++ code holds references to JS objects, BUT at the end of the day, if there are no references to an object that "matter", the object is effectively dead whether it gets collected or not

[18:07:43.0000] <caitp>
and can therefore be considered to be finalized

[18:08:40.0000] <SamB>
um, what exactly is going to be crawling the heap to detect that they aren't referenced, if not the GC?

[18:09:51.0000] <caitp>
it could be the same algorithm which determines that an object needs to be garbage collected, that would be fine

[18:10:01.0000] <caitp>
it would just mark an object as finalized and inform the script context

[18:10:58.0000] <caitp>
and yeah, you could do that and prevent the object from reviving itself during finalization

[18:11:06.0000] <caitp>
we don't do that, but there's no real reason why we can't

[18:11:24.0000] <caitp>
it's just the way it is

[18:12:26.0000] <SamB>
I think there's a lot of Python code out there expecting immediate finalization, actually, because of CPython's reference-counting

[18:13:12.0000] <gsnedders>
That's definitely the case. Though CPython does have some slightly wacky behaviour with finalizers.

[18:13:40.0000] <gsnedders>
(Python 3 at least raises a warning if a file object's finalizer closes the file)

[18:13:43.0000] <SamB>
caitp: as I understand it, a dry run of most any GC algorithm won't take any less time, really

[18:13:51.0000] <SamB>
gsnedders: ah, cool

[18:13:54.0000] <SamB>
wonder why not in 2.7

[18:14:07.0000] <gsnedders>
Added to 3 after 2.7 shipped, I think

[18:14:18.0000] <SamB>
what, that's a "feature" or something?

[18:14:44.0000] <gsnedders>
Adding a warning where there wasn't one before? It's a behavioural change, it's not a bugfix.

[18:14:55.0000] <SamB>
but they should have added it back in 2.2

[18:15:12.0000] <gsnedders>
Did the warnings module exist back then?

[18:15:14.0000] <gsnedders>
;P

[18:15:17.0000] <caitp>
SamB I don't think it would necessarily be a "dry run", just "notify the script before cleaning stuff up" --- there's no guarantee that once an object is marked for collection that it will be collected immediately anyways

[18:15:36.0000] <SamB>
gsnedders: that's beside the point; *Jython* existed back then and was considered to be Python!

[18:15:49.0000] <caitp>
but it doesn't matter, this was a design decision that a certain guy made zillions of years ago, too late to do anything about it

[18:16:12.0000] <SamB>
I thought the *unmarked* objects were the ones that got collected

[18:16:35.0000] <gsnedders>
SamB: Speaking of Jython, I ought deal with the html5lib PR that adds support for it

[18:16:49.0000] <gsnedders>
And yes, unmarked objects get collected

[18:17:01.0000] <gsnedders>
Typically

[18:17:06.0000] <gsnedders>
You can of course reverse the flags

[18:17:08.0000] <caitp>
there's no real difference

[18:17:18.0000] <SamB>
of course, which value of the flag counts as "marked" can be flipped from pass to pass

[18:17:25.0000] <SamB>
but the ones you visited and marked, those were reachable

[18:17:31.0000] <SamB>
so you want to keep them

[18:18:17.0000] <caitp>
it draws the same picture no matter how you phrase it, and the pictures of cycle collection algorithms are not things I want in my brain right now :d

[18:18:45.0000] <gsnedders>
bah, cycle collection algorithms are really simple in their simplest forms!

[18:18:46.0000] <SamB>
oh, you're going back to Python territory

[18:19:02.0000] <SamB>
most things don't have cycle collectors, they have *garbage* collectors

[18:19:33.0000] <SamB>
which sometimes actually work by collecting the non-garbage and declaring whatever is left behind nonexistant

[18:19:45.0000] <gsnedders>
SamB: they're the same, just a "cycle" collector will never collect anything except things that have cycles because they've already been freed through refcounting

[18:19:55.0000] <SamB>
(obviously if there are finalizer-bearing objects involved it has to do something about those, though)

[18:20:47.0000] <SamB>
gsnedders: well, if someone says "cycle collector" it brings to mind that same "normal stuff gets freed immediately, right?" assumption from crufty Python code

[18:20:55.0000] <gsnedders>
right

[18:23:03.0000] <SamB>
hmm, this is the wrong kind of cycle collection: http://www.cyclemuseum.org.uk/

[18:23:10.0000] <gsnedders>
hah

[18:23:28.0000] <gsnedders>
(interesting, pulling the power cord out of this makes it suspend, hmmm)

[18:25:11.0000] <SamB>
this doesn't sound much like a normal GC algorithm: https://developer.mozilla.org/en-US/docs/Interfacing_with_the_XPCOM_cycle_collector

[18:25:39.0000] <gsnedders>
you're touching XPCOM, anything "normal" is far away

[18:26:01.0000] <SamB>
it looks more like the kind of algorithm I'd expect with a name like "cycle collection" though

[18:26:51.0000] <caitp>
kyle huey gave a good talk about it, probably quite a few of them, it's not really unreasonable

[18:27:49.0000] <SamB>
the way it decides to even start looking for a cycle at any given object certainly sounds sensible (as a first impression, anyway)

[18:34:10.0000] <roc>
our approach to refcounting + cycle collection has actually turned out to be pretty good

[18:34:46.0000] <roc>
it has a lot of advantages over traditional tracing GC

[18:35:08.0000] <SamB>
roc: well, it's probably Hixie's worst nightmare to expose anything like it to JS

[18:35:16.0000] <roc>
of course we're not going to do that

[18:35:21.0000] <SamB>
yeah

[18:35:24.0000] <SamB>
just sayin!

[18:36:09.0000] <roc>
the main problem with refcounting+CC is that the performance of refcounting objects that are strongly referenced from multiple threads is terrible

[18:36:23.0000] <SamB>
yeah

[18:36:24.0000] <roc>
fortunately, that is very rare in a Web browsers.

[18:37:03.0000] <SamB>
certainly not from the PoV of content

[18:37:20.0000] <roc>
OTOH pretty much all academic GC research assumes that it's common. Which is why GC researchers have not explored the space that we have.

[18:38:34.0000] <SamB>
it sounds like what the XPCOM cycle collector requires of objects is very similar to what the CPython cycle collector requires

[18:39:23.0000] <roc>
hopefully one of the C++ reflection proposals will let us generate the tracing hooks automatically, without the nasty boilerplate code we currently have

[18:39:25.0000] <SamB>
oh, except suspicion is automatic in CPython

[18:40:21.0000] <SamB>
hmm, I guess you can't just use that Python plugin for GCC, can you, since you build with cl.exe on Windows

[18:40:43.0000] <roc>
yes

[18:41:11.0000] <roc>
we're working on supporting clang-cl on Windows but I suspect it will be a long time, if ever, before we can ship clang-cl builds

[18:41:45.0000] <SamB>
the idea being to use it to write the boilerplate to a text file, mind you, not to inject it into GCC directly

[18:41:58.0000] <SamB>
it sounds like the Python plugin is still read-only

[18:57:45.0000] <Hixie>
wow, academic GC research assumes cross-thread references?

[18:57:52.0000] <Hixie>
i wouldn't have guessed that

[18:58:10.0000] <Hixie>
i always kinda assumed that keeping cross-thread references to a minimum was basically a given

[18:59:01.0000] <SamB>
well, some research involves actual multithreaded programs, not just multiplexings of single-threaded programs

[18:59:50.0000] <roc>
Hixie: the majority is done in the context of Java

[19:00:14.0000] <Hixie>
ah

[19:00:33.0000] <roc>
Hixie: the issue isn't so much that there are lots of actual cross-thread references, but that every class is potentially referencable across threads

[19:00:43.0000] <roc>
so you have to make your refcount operations thread-safe

[19:00:49.0000] <Hixie>
fair enough

[19:00:57.0000] <Hixie>
that's got to be a hell of an overhead

[19:01:04.0000] <roc>
or do very clever optimizations to avoid that

[19:01:18.0000] <roc>
they don't use reference-counting. That's why.

[19:01:39.0000] <roc>
whereas in the browser we know statically that most classes cannot be referenced across threads so it's trivial to avoid atomic refcount ops.

[19:01:50.0000] <SamB>
well, that's *one* reason anyway

[19:02:12.0000] <Hixie>
roc: ah

[19:39:59.0000] <SamB>
whoa: <http://researcher.watson.ibm.com/researcher/view_group.php?id=3385> seems to have been used in jikes despite being based on reference counting ...

[19:43:18.0000] <roc>
Jikes supports lots of GC algorithms. It's commonly used as a GC research testbed.

[19:44:29.0000] <SamB>
oh

[19:44:39.0000] <SamB>
so it's like "We modified GCC to do this or that"

[19:45:13.0000] <roc>
right

[21:00:46.0000] <TabAtkins>
MikeSmith: Re U+000C, mind raising that in www-style? It's probably possible to converge.

[21:02:45.0000] <TabAtkins>
Oh, never mind, I see you got your question answered.  I didn't remember that u+000c was preprocessed away.

[21:33:21.0000] <TabAtkins>
Hixie, jgraham: Re: cells in a given column, we've got stuff in Selectors for that now. (Unimplemented.)

[22:02:56.0000] <SamB>
TabAtkins: WANT IT!

[23:28:15.0000] <MikeSmith>
TabAtkins: you saw my bug about making eof in comments a parse error?

[23:28:28.0000] <TabAtkins>
You saw my response to that bug?

[23:28:58.0000] <MikeSmith>
TabAtkins: ah no, not yet, just got back online now

[23:29:04.0000] <MikeSmith>
/me looks

[23:30:00.0000] <MikeSmith>
rock and roll

[23:30:01.0000] <TabAtkins>
D'oh, I didn't mark it RESOLVED.

[23:30:02.0000] <MikeSmith>
TabAtkins: thanks man

[23:30:05.0000] <TabAtkins>
Link me?

[23:30:48.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26270

[23:51:27.0000] <MikeSmith>
TabAtkins: btw https://github.com/validator/syntax/blob/master/relaxng/datatype/java/src/org/whattf/datatype/tools/CssParser.java#L36

[23:51:49.0000] <MikeSmith>
TabAtkins: uses Rhino to expose your CSS parser/tokenizer to Java

[00:43:22.0000] <mathiasbynens>
zcorpan (assuming you’re reading the logs): the blog post was updated when the removal was moved to M37 https://github.com/operasoftware/devopera/commit/beb0d174be24588bb9f39fc5cc301f9d081e6395 afaik this is still the current plan

[02:04:09.0000] <Ms2ger>
"When using letter-spacing != 0, disable ligatures through font-feature-settings."

[02:04:23.0000] <Ms2ger>
Who doesn't do that automatically?

[05:15:08.0000] <Ms2ger>
For our friends at w3cmemes: https://gs1.wac.edgecastcdn.net/8019B6/data.tumblr.com/21801c47ccff06fa5e6612aea5b87095/tumblr_mlqdctiGeH1rvsbh9o1_500.jpg

[05:20:09.0000] <MikeSmith>
Ms2ger: great photo of timeless there

[05:22:15.0000] <ManishCloud>
Hixie: around?

[05:22:30.0000] <ManishCloud>
Where, besides XHR, is the Fetch spec used for a browser?

[05:23:01.0000] <ManishCloud>
It seems like HTML5 has its own fetch spec, which is rather different: http://www.whatwg.org/specs/web-apps/current-work/multipage/fetching-resources.html

[05:23:24.0000] <Ms2ger>
Awaiting integration :)

[05:25:24.0000] <ManishCloud>
Ms2ger: O.o

[05:25:38.0000] <ManishCloud>
Not seriously?

[05:25:58.0000] <Ms2ger>
http://dev.w3.org/2006/webapi/FileAPI/ seems to reference Fetch

[05:26:18.0000] <Ms2ger>
HTML will move to referencing Fetch at some point when Hixie has time

[05:26:40.0000] <ManishCloud>
ah

[05:27:13.0000] <ManishCloud>
'cause annvk had mentioned that <img> and all use Fetch, but I couldn't find any references

[05:29:53.0000] <ManishCloud>
Ms2ger: will that mean major changes to Fetch, or just the addition of a couple of flags here and there

[05:29:54.0000] <ManishCloud>
?

[05:30:04.0000] <jgraham_>
 

[05:30:07.0000] <Ms2ger>
I hope not too major

[05:30:09.0000] <Ms2ger>
Hi jgraham_

[05:30:34.0000] <ManishCloud>
jgraham_: you seem to have protected yourself from lint

[05:31:06.0000] <jgraham_>
Turns out that facebook guest wifi sucks

[05:36:15.0000] <hsivonen>
MikeSmith: what do the new additions of the galimatias jar and TabAtkins's tokenizer.js and parser.js do?

[05:36:23.0000] <hsivonen>
MikeSmith: in the validator, that is

[05:39:30.0000] <hsivonen>
MikeSmith: ah. so galimatias is a new URL parsing lib

[05:39:55.0000] <hsivonen>
MikeSmith: there's something wrong with the build script, though. It's not getting picked up by javac

[05:41:21.0000] <MikeSmith>
hsivonen: the latest galimatias release addes UTS 46 to bring it into conformance with the current URL spec. It just uses ICU4J

[05:42:37.0000] <MikeSmith>
hsivonen: as far as TabAtkins's tokenizer.js and parser.js, I'm using them for @sizes checking via a bridge through Rhino

[05:43:56.0000] <MikeSmith>
hsivonen: I think we could eventually replace the current MediaQuery datatype checker -- which isn't conformant with the latest CSS specs -- with a new one written using TabAtkins's tokenizer

[05:45:10.0000] <MikeSmith>
hsivonen: but I'm not doing that yet. Right now, I'm only using it as an extra step to catch any outright syntax errors, before it then goes to the existing MediaQuery datatype checker

[05:45:57.0000] <MikeSmith>
hsivonen: if the build script is failing it may be I broke something very recently. I'll do a fresh checkout and see myself too

[05:46:46.0000] <hsivonen>
MikeSmith: bridge through Rhino... wow. there must be a you dawg joke in there somewhere. :-)

[05:47:16.0000] <hsivonen>
MikeSmith: I just pushed a build.py update for the dl URL for jsontool-core, FWIW

[05:47:26.0000] <MikeSmith>
hsivonen: as far as galimatias I only have it being used now for Iri and IriRef datatype checking, and DataURI checking -- but we could eventually use it to replace the other cases where we're using Jena

[05:47:37.0000] <MikeSmith>
ok

[05:47:39.0000] <hsivonen>
MikeSmith: I see

[05:47:58.0000] <hsivonen>
I'm pretty sure there's just a classpath problem with how build.py invokes javac

[05:49:49.0000] <hsivonen>
MikeSmith: at least the version of galimatas in classpath doesn't match the version on disk

[05:50:37.0000] <MikeSmith>
hsivonen: yeah I wasn't sure the Rhino bridge thing would have acceptable performance but it seems to be just fine. It all gets compiled just once -- static. And I guess that may costs some couple hundred milliseconds the first time, but then after that it's negligible -- a few milliseconds at most maybe

[05:50:56.0000] <MikeSmith>
hsivonen: OK will check right now

[05:50:58.0000] <hsivonen>
MikeSmith: cool

[05:51:12.0000] <hsivonen>
OK. I fixed this locally. I'll push.

[05:51:22.0000] <MikeSmith>
ok

[05:51:40.0000] <MikeSmith>
/me is curious to see what he was doing wrong

[05:51:58.0000] <darobin>
MikeSmith: I think it was that last drink Saturday night

[05:52:43.0000] <MikeSmith>
darobin: either that or the part where I fell off the hotel balcony

[05:53:27.0000] <darobin>
that would cause problems with the validator for sure

[05:55:20.0000] <hsivonen>
MikeSmith: https://github.com/validator/build/commit/6f429116af4820f96223de8eb60e3df653b9f567

[05:55:21.0000] <MikeSmith>
jgraham: I bet it still doesn't suck as bad as Mozilla SF guest wifi

[05:56:14.0000] <MikeSmith>
hsivonen: ah yeah. sorry :( that's the 2nd time I maade that same mistake (I did it the previous time galimatias got updated)

[05:57:41.0000] <jgraham>
MikeSmith: I think you were unlucky, although I might be wrong

[05:57:51.0000] <MikeSmith>
hsivonen: btw I don't know what we're using jsontools for. I trust it is still actually being used somewhere

[05:58:09.0000] <hsivonen>
MikeSmith: used for HTML tokenizer unit tests

[05:58:18.0000] <MikeSmith>
hsivonen: ah OK

[05:59:58.0000] <hsivonen>
looks like I need to teach my deployment script about galimatias

[06:16:52.0000] <smaug____>
/me wonders if keygen could be killed

[06:19:37.0000] <MikeSmith>
smaug____: it can't (not last I heard at least). I think Apple was one of those saying they're aware of known sites it would be break that aren't likely to change to quit using it

[06:20:18.0000] <MikeSmith>
smaug____: I guess it remains an evangelism issue (as far as possibility of killing it)

[06:20:20.0000] <smaug____>
MikeSmith: do you recall when apple said that?

[06:20:41.0000] <MikeSmith>
smaug____: I could try to find it. It's been a few years. I think it was on the public-html list

[06:21:44.0000] <MikeSmith>
hsivonen: I did a fresh checkout and build (with your build.py changes) and it all runs fine

[06:22:45.0000] <MikeSmith>
hsivonen: though I see that the galimatias change does cause the TestRunner build to fail. But that's not fatal. Anyway, I'll try to fix that too right now

[06:24:47.0000] <Ualidus>
hello

[06:26:30.0000] <MikeSmith>
hsivonen: hmm no I see that's not a build issue but instead seems to be a runtime problem that the TestRunner is exposing

[06:27:20.0000] <MikeSmith>
Ms2ger: quit trolling over on #w3c ("Can anyone recommend a good guide for making my website xhtml 2.0 compliant?")

[06:27:24.0000] <Ualidus>
I have a question, I don't understand the part of the warning about the InvalidAccessError : http://xhr.spec.whatwg.org/#the-open%28%29-method

[06:27:35.0000] <Ualidus>
I think I have this error occuring, but I'm not quite sure...

[06:27:42.0000] <Ualidus>
and I don't know how to fix it

[06:33:14.0000] <Ualidus>
according to the steps of the open method, the error should be thrown before the request is sent (I suppose), but it seems my script is used anyway... I'm completely lost. :)

[06:35:37.0000] <hsivonen>
MikeSmith: so the deployment script I have actually does upload galimatias to the server

[06:35:57.0000] <hsivonen>
MikeSmith: but it fails for some other reason...

[06:36:05.0000] <hsivonen>
It doesn't find the main class

[06:36:17.0000] <hsivonen>
I'm trying to see if there's a problem with the command line

[06:39:44.0000] <hsivonen>
/me sees -Dnu.validator.servlet.follow-w3c-spec=0

[06:39:56.0000] <hsivonen>
/me doesn't recall noticing that before

[06:40:57.0000] <hsivonen>
the error I get is Error: Could not find or load main class results

[06:40:59.0000] <MikeSmith>
hsivonen: yeah a while back I separated out the w3c "branding" behavior from the w3c-specific schema behavior

[06:41:38.0000] <MikeSmith>
hsivonen: a class literally named "results"?

[06:43:06.0000] <Ms2ger>
jgraham, oh, you folks are at GB?

[06:43:09.0000] <Ms2ger>
FB*

[06:43:13.0000] <MikeSmith>
hsivonen: at this point I wonder if we should just back out to the previous galimatias version -- 0.0.4 I guess

[06:45:28.0000] <Ms2ger>
MikeSmith, I wish I could troll as well as that person

[06:45:57.0000] <MikeSmith>
hsivonen: because another problem is that galimatias 0.1.0 requires a newer version of ICU4J than what we have. I think it maybe it needs v4.5 at least, and we have v4.4 -- which seems to lack the getUTS46Instance method (or at least the right getUTS46Instance method that galimatias expects)

[06:46:04.0000] <MikeSmith>
Ms2ger: :-)

[07:22:48.0000] <Ualidus>
i have to go, see ya.

[07:50:42.0000] <Jasper>
Trying to parse something in the CSS transitions spec.

[07:50:48.0000] <Jasper>
"For each shadow, if one input shadow is ‘inset’ and the other is not, then the result for that shadow matches the inputs; otherwise the entire list is not interpolable."

[07:51:20.0000] <Jasper>
That reads to me like if the two shadows are opposing, then it's interpolable, but if they're the same, then it's not.

[07:51:23.0000] <Jasper>
That seems quite wrong to me.

[07:51:47.0000] <Jasper>
How am I supposed to read it?

[08:01:03.0000] <MikeSmith>
Jasper: you might have better luck pinging dino about that on #webkit, if he's around there

[08:02:13.0000] <TabAtkins>
Jasper: Yup, that's totally opposite.

[08:02:41.0000] <TabAtkins>
And also super-unclear what it's trying to talk about.

[08:02:53.0000] <TabAtkins>
(Looks like it's trying to define the inset-ness fo the interpolating shadow.)

[08:03:03.0000] <TabAtkins>
Jasper: I'll fix.

[08:05:04.0000] <Jasper>
TabAtkins, thanks!

[08:07:48.0000] <TabAtkins>
Jasper: What's your name, for the Acks?

[08:08:02.0000] <Jasper>
TabAtkins, Jasper St. Pierre

[08:08:10.0000] <TabAtkins>
Does that alphabetize as S or P?

[08:08:17.0000] <Jasper>
I'd go with S.

[08:09:06.0000] <TabAtkins>
Oh, didn't matter anyway; last name in the acks was an M.

[08:09:10.0000] <TabAtkins>
Anyway, fixed and pushing now.

[08:10:14.0000] <MikeSmith>
in the spec there's an example for the "accept" attribute for input@type that looks like <input type="file"accept=".doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document">

[08:10:54.0000] <MikeSmith>
that is, with extensions like ".doc" in there -- not just mime types

[08:11:09.0000] <MikeSmith>
Do UAs actually support that?

[08:11:26.0000] <Ms2ger>
TabAtkins, alphabetizes as J, clearly ;)

[08:13:28.0000] <TabAtkins>
Ms2ger: This spec alphabetizes by family name, so I'm just matching convention.

[08:21:08.0000] <MikeSmith>
hsivonen: dunno if you're still around any longer today, but if you are, please let me know if it's OK with you to downgrade galimatias do the previous version -- 0.0.4. I'd go ahead and just do it, but I don't want to further muff things up with you trying to deploy right now.

[08:21:54.0000] <MikeSmith>
hsivonen: anyway I don't think the 0.1.0 version of galimatias is going to work for us in production until we update our ICU4J version

[10:14:40.0000] <Hixie>
Manishearth: yeah, i need to update HTML to point to fetch.spec.whatwg.org

[12:38:04.0000] <Hixie>
jgraham: i removed omit_optional_tags=on but i'm still getting some end tags omitted, any idea what's up?

[12:39:08.0000] <zcorpan>
mathiasbynens: hmm. i see "The latest plan is to land the showModalDialog removal in Chromium 36. "

[12:50:14.0000] <timeless>
MikeSmith: where?

[13:07:42.0000] <montecfel>
Why is nothing outputted when I resize the window? document.addEventListener("resize", function() { console.log("a"); });

[13:07:56.0000] <montecfel>
Also, is there better documentation than MozDev? I find it to suck.

[13:27:43.0000] <mathiasbynens>
montecfel: because you’re resizing the `window`, like you said, not the `document`

[13:31:12.0000] <Hixie>
gsnedders: dude in what order does anolis number IDs?

[13:31:24.0000] <Hixie>
gsnedders: i just noticed that id=history-0 is after id=history-1 in the HTML spec

[13:31:51.0000] <Hixie>
is it like dfns before headings or some such?

[13:35:48.0000] <Hixie>
looks like that's exactly what it is

[13:35:49.0000] <Hixie>
oh man

[16:59:51.0000] <MikeSmith>
Hixie: bugwards compatibility ftw man


2014-07-08
[21:07:38.0000] <abarth>
marcosc_: you around?  (not sure what time zone you're in)

[23:20:55.0000] <mathiasbynens>
zcorpan: ah the correct URL is http://dev.opera.com/blog/showmodaldialog/, but apparently we didn’t have a redirect set up. fixed

[02:09:48.0000] <jgraham>
Hixie: Oh, I forgot to say "no"

[02:56:52.0000] <Ms2ger>
MikeSmith, I dunno what the advantage is of closing old wpt PRs

[02:58:16.0000] <MikeSmith>
Ms2ger: I don't know what the advantage is to keeping around old long-stale PRs that nobody's planning to actually ever review or take any more action on.

[02:58:44.0000] <MikeSmith>
they're just noise, accumulating

[02:59:05.0000] <Ms2ger>
I'm planning to deal with them at some point

[02:59:59.0000] <MikeSmith>
that's fine then, for those. I agree there's not point in closing those

[03:00:30.0000] <MikeSmith>
I'd just like to be able to identify the ones that nobody is actually planning to ever do anything more about

[03:07:56.0000] <MikeSmith>
Ms2ger: thanks for closing that WebGL one, anyway

[03:08:51.0000] <Ms2ger>
I thought I'd commented on it before

[03:21:52.0000] <MikeSmith>
Ms2ger: not as far as I can see

[03:22:02.0000] <Ms2ger>
Yeah

[03:22:11.0000] <Ms2ger>
Must've been a dream

[03:23:10.0000] <MikeSmith>
Ms2ger: you dream big, man

[03:24:46.0000] <Ms2ger>
Dammit

[03:24:53.0000] <Ms2ger>
Oh, there it is

[03:56:35.0000] <jgraham>
Hmm, I guess I need to read my GH mail

[03:56:55.0000] <jgraham>
I'm not generally a fan of dropping PRs unless we did enough work to figure out that the PR has no value

[03:57:07.0000] <jgraham>
If you did that work, I'm all in favour of dropping them

[04:00:58.0000] <hsivonen>
MikeSmith: I don't know enough about galimatias to have an informed opition either way

[04:01:35.0000] <hsivonen>
MikeSmith: any reason not to update ICU4J?

[04:03:49.0000] <MikeSmith>
hsivonen: No reason except it'd need at least minimal testing. But I could do it and run it through the TestRunner + test suite and if that doesn't cause any exceptions or other code issues then I think we're good to go and I can push it

[04:04:14.0000] <MikeSmith>
hsivonen: so gimme a few minutes to try that now, and I'll ping you

[04:06:00.0000] <MikeSmith>
jgraham: a number of those PRs I commented on today are more than a year old, with zero review. If nobody's reviewed than in a year than I'd say nobody sees enough value in having them to even take time to review them.

[04:06:45.0000] <jgraham>
MikeSmith: I think that's a totally invalid inference

[04:08:00.0000] <jgraham>
We have missed various important things before simply because there aren't enough people spending time doing review

[04:08:36.0000] <MikeSmith>
jgraham: well that's why I'm taking time to comment on them

[04:08:45.0000] <MikeSmith>
jgraham: I've not closed any myself

[04:09:16.0000] <odinho>
I think the pinging is nice.

[04:09:19.0000] <MikeSmith>
jgraham: I'm commenting to basically say, we need to take a look at this

[04:09:35.0000] <odinho>
But it should be done at a low enough frequency that it doesn't feel like too big a task to look through.

[04:09:55.0000] <odinho>
Like last time, I was pinged on a million things, and did nothing. This time only one PR, so I could take a look and close it.

[04:10:08.0000] <MikeSmith>
without doing some kind of gardening we just end up with a tail of stale PRs just growing without any bound

[04:10:50.0000] <MikeSmith>
odinho: well last time I did it was the first time and then I basically went through every open issue that was more than a couple months old

[04:11:20.0000] <MikeSmith>
going forward if we do it more regularly it'll be a lot less noisy

[04:11:43.0000] <MikeSmith>
anyway, I reckon it'd be good to be doing it once a month or so

[04:11:53.0000] <MikeSmith>
gardening I mean (for lack of a better word)

[04:13:50.0000] <jgraham>
MikeSmith: Oh, OK, that seems reasonable

[04:14:20.0000] <jgraham>
/me wonders how rude it is to put headphones on in the WebDriver meeting for the bits where I don't plan to contribute ;)

[04:19:16.0000] <MikeSmith>
jgraham: that WG's chair is kind of a hardass so you're probably risking an official reprimand

[05:03:50.0000] <MikeSmith>
hsivonen: OK I updated to ICU4J 53.1 (the latest stable) and tested it from a fresh checkout and it builds and runs, and runs the test suite without any crashes in the test harness or unexpected test failures

[05:04:30.0000] <MikeSmith>
hsivonen: so you could pull and build and deploy from that

[05:26:28.0000] <SimonSapin>
jgraham: how do remote devtools/debugging protocols relate to WebDriver?

[05:27:08.0000] <Ms2ger>
Not, I think

[05:27:17.0000] <SimonSapin>
out of scope?

[05:33:37.0000] <jgraham>
SimonSapin: Yeah, unrelated more or less

[05:34:59.0000] <jgraham>
Sometimes the remote debug protocol is used to implement webdriver, but that's an implementation detail

[05:36:51.0000] <SimonSapin>
Does http://remotedebug.org/ sounds worth pursuing? It was mentioned on the Servo list

[05:37:46.0000] <jgraham>
I think it sounds like a bad idea. I think that devtools is moving too fast and support is too vendor-specific to standardise

[05:38:26.0000] <jgraham>
I think I have heard somewhere that particular spec basically takes all the design mistakes of all the current protocols and standardises the union of them

[05:38:39.0000] <jgraham>
But I haven't actually looked at it myself

[05:39:37.0000] <jgraham>
(there might be something really useless that you could standardise for devtools like a wire protocol where all the actual features would basically be optional)

[05:40:47.0000] <jgraham>
I sort of expect that the pressure here is coming from webdevs who want to run their favourite devtools against some other browser without considering the fact that each feature also needs backend work

[05:41:44.0000] <jgraham>
At the moment we can break back-compat with impunity which allows adding new features more easilly (I assume)

[05:56:10.0000] <MikeSmith>
/me I mean registration for the TPAC f2f meeting of the Browser Testing WG in Santa Clara in October/November

[06:03:54.0000] <wilhelm>
jgraham: How rude! You'll definitely be reprimanded.

[06:07:58.0000] <gsnedders>
Hixie: I have absolutely no idea how Anolis numbers stuff. It's been too long since I looked at it!

[06:08:00.0000] <wilhelm>
SimonSapin: It's in our charter to work on if we want to. But we have no spec and no editor. (c:

[06:08:38.0000] <gsnedders>
ohai, London.

[06:09:02.0000] <darobin>
gsnedders: IIRC it generates IDs whenever it needs to, so if it looks at a certain element type first then it will number that, then the others (and not in document order)

[06:09:14.0000] <gsnedders>
darobin: this is what I would guess

[06:09:25.0000] <gsnedders>
darobin: and yes, it definitely only generates ids when it needs to

[09:38:06.0000] <MikeSmith>
fyi MIT's having some kind of network problem, so you'll find most w3c services inaccessible right now probably

[09:38:10.0000] <MikeSmith>
including bugzilla

[09:38:24.0000] <MikeSmith>
Hixie: ↑

[10:14:24.0000] <Hixie>
MikeSmith: luckily i'm not really looking at bugzilla these days

[10:14:33.0000] <Hixie>
nearly got my anolis replacement done though

[10:14:41.0000] <Hixie>
(just the replacement)

[10:14:44.0000] <Hixie>
(not the new features)

[11:13:35.0000] <cryptic>
anyone know of any good data visualization channels?

[11:20:18.0000] <SamB>
/me imagines a cable channel meeting that description

[11:20:42.0000] <SamB>
cryptic: what sort of data?

[11:25:16.0000] <cryptic>
SamB: I have temperature data from various sensors on many floors of an office building

[11:25:23.0000] <cryptic>
temps are time-series data

[11:25:32.0000] <cryptic>
I'm plotting it against occupancy and time

[11:26:13.0000] <cryptic>
It's a typical 4d projection

[11:28:26.0000] <SamB>
I dunno, maybe #latex could send you somewhere good?

[11:28:28.0000] <cryptic>
an isometric projection of stacked area charts with color gradients should work

[11:29:43.0000] <cryptic>
#d3.js might be better

[11:29:46.0000] <cryptic>
didn't even know it existed

[11:30:17.0000] <SamB>
oh, you want it on the web?

[13:24:07.0000] <jgraham>
Hixie: So the webdriver people were discussing having something in the "Navigate" algorithm that give the UA the ability to opt out of performing a navigation even if it's a supported scheme (e.g. refusing to load file:// for whatever reason). Is that already somewhere in the spec that I missed, or does it sound sensible?

[13:24:27.0000] <Hixie>
seems likely to already be there, let me check

[13:25:35.0000] <Hixie>
step 10 is pretty open-ended

[13:25:52.0000] <Hixie>
assuming you're ok with still supporting fragment navigation

[13:27:06.0000] <jgraham>
Yeah, i think that would do it

[15:13:33.0000] <Hixie>
it's sad that when i try to update my pipeline, all the problems i get are due to the parts of the pipeline i haven't yet replaced...

[15:14:03.0000] <SamB>
yeah, why didn't you get those problems before?

[15:15:38.0000] <Hixie>
i did, it's part of why i'm replacing it

[15:49:18.0000] <Hixie>
great kittens.

[15:49:20.0000] <Hixie>
what a mess.

[15:54:04.0000] <Hixie>
ok!

[15:54:07.0000] <Hixie>
i'm no longer using anolis.

[15:54:41.0000] <Hixie>
(no new features yet though)

[16:09:15.0000] <caitp>
who here can answer a question about SVG in html5 us, for the benefit of that glorious front-end framework that is Angular

[16:09:37.0000] <smaug____>
/me wishes other browsers started to warn about use of sync XHR in main thread

[16:09:50.0000] <pdr>
caitp, what is html5 us

[16:10:10.0000] <caitp>
good question, I think ti's a typo =)

[16:10:15.0000] <caitp>
google hangouts is setting my laptop on fire

[16:10:24.0000] <pdr>
ah :) I can probably answer your question. What's up?

[16:10:51.0000] <smaug____>
ojan: any chance Chrome could start warn about use of sync XHR ?

[16:11:37.0000] <pdr>
smaug____, I think ojan is on a plane. Can you file a bug at crbug.com?

[16:11:42.0000] <caitp>
pdr, someone had filed an issue on angular a while ago about this, https://github.com/angular/angular.js/issues/7538, where we get different behaviour between chrome and safari/firefox

[16:12:04.0000] <smaug____>
pdr: I think that requires logging to some google account

[16:12:09.0000] <smaug____>
so I'd prefer not to

[16:12:27.0000] <caitp>
i will try to boil that down to a simpler reproduction I think

[16:12:31.0000] <pdr>
smaug____, as you wish, but irc is a black hole for feature requests.

[16:13:22.0000] <smaug____>
I can always hope googlers file the bugs I mention here ;)


2014-07-09
[17:47:31.0000] <Hixie>
ok i made some pretty risky changes, please let me know if anything broke with the spec

[17:56:26.0000] <tantek>
heh

[17:57:07.0000] <Domenic>
Hixie: browsing the diff, seems like the web dev edition might be broken by removal of some of the <!-- -->s?

[18:02:34.0000] <caitp>
http://jsfiddle.net/8cQGe/ reproduction is a bit clearer in this case if anyone wants to clarify that

[18:20:16.0000] <Hixie>
Domenic: yeah, i mailed ben about it. i need to figure out what he needs.

[21:05:20.0000] <MikeSmith>
Hixie: I guess https://code.google.com/p/chromium/issues/detail?id=377581 is the fix for the 408s problem in Chrome

[21:06:41.0000] <MikeSmith>
Hixie: and I think the w3c systems team is also looking at making a HAProxy to deal with it http://blog.haproxy.com/2014/05/26/haproxy-and-http-errors-408-in-chrome/

[21:11:57.0000] <MikeSmith>
*HAProxy change

[21:51:55.0000] <montecfel>
Can somebody tell me if it's yet possible to change the colors around of a canvas? That is, fast. Not loading all the pixel data in an array, looping through it all and changing the values, but actual fast manipulation of the existing pixels on a canvas?

[21:52:13.0000] <montecfel>
Also, I do not mean putting a rectangle on top of the image that is transparent. That doesn't change the color in the manner I wish.

[21:52:28.0000] <SamB>
montecfel: what, you want pallette cycling???

[21:52:35.0000] <montecfel>
SamB: Not really that.

[21:52:51.0000] <montecfel>
This would not be limited to the 256 color palette of olden times.

[21:52:58.0000] <montecfel>
Which was damn annoying trying to squeeze in all necessary shades.

[21:53:10.0000] <montecfel>
I need to gradually make it more nightely in my tile-based game.

[21:53:24.0000] <montecfel>
Without drawing 100 copies of each sprite with slightly different colors on it.

[21:53:32.0000] <montecfel>
Or pre-calculating this at the start of the game.

[21:53:41.0000] <montecfel>
Which would take up insane amounts of RAM and CPU.

[21:55:33.0000] <montecfel>
You catch my drift?

[22:10:43.0000] <roc>
WebGL

[22:11:20.0000] <SamB>
yeah, WebGL shaders would presumably work

[22:11:25.0000] <SamB>
never run on this system though

[22:59:24.0000] <montecfel>
SamB: Huh?

[22:59:32.0000] <montecfel>
roc and SamB: Well, I use Canvas 2D.

[22:59:37.0000] <montecfel>
Not Canvas WebGL.

[22:59:49.0000] <montecfel>
Because it's 2D graphics.

[22:59:52.0000] <SamB>
my system doesn't appear to support WebGL

[23:00:01.0000] <roc>
WebGL is the best way to do fast 2D graphics too.

[23:00:02.0000] <montecfel>
Many systems don't.

[23:00:05.0000] <SamB>
and OpenGL has been put to quite good use for 2D graphics for quite some time

[23:00:22.0000] <montecfel>
Why on Earth would they have completely separate APIs where one isn't accelerated?

[23:00:24.0000] <montecfel>
Doesn't add up.

[23:00:39.0000] <roc>
2D is hard to accelerate

[23:00:49.0000] <roc>
WebGL gives you much more direct access to the GPU.

[23:00:55.0000] <montecfel>
That doesn't really answer my question, though.

[23:01:04.0000] <montecfel>
Why not do acceleration under the hood?

[23:01:10.0000] <montecfel>
In fact, I thought they were accelrated.

[23:01:18.0000] <montecfel>
MS IE 9+ sure as hell are.

[23:01:20.0000] <SamB>
at least, nobody has bothered to do 2D-specific hardware acceleration for a LOOONG TIME

[23:01:21.0000] <roc>
yeah

[23:01:25.0000] <roc>
everybody does

[23:01:26.0000] <montecfel>
Ultra-fast 2D drawing.

[23:01:34.0000] <roc>
but it's still not as good

[23:01:38.0000] <SamB>
not saying canvas doesn't use accelaration, mind

[23:01:59.0000] <montecfel>
Well, it's slow like a freaking heck to read and change pixels.

[23:02:14.0000] <montecfel>
I bet there is some well-hidden way to do exactly what I want, in a super nice and fast way.

[23:02:21.0000] <roc>
ironically that's actually slower with GPU-accelerated canvas, because you have to get the pixels back from VRAM

[23:02:24.0000] <montecfel>
Which doesn't involve reading in the pixel data and awkwardly looping through it and whatnot.

[23:02:28.0000] <SamB>
montecfel: shaders are basically the way to do it

[23:02:36.0000] <roc>
montecfel: depending on your effect, you may be able to do what you want with fancy operators

[23:02:43.0000] <SamB>
roc: don't suppose there's a way to ask for a not-accelerated canvas?

[23:02:43.0000] <montecfel>
But I have zero experience in WebGL, and it's different from Canvas 2D, and it's poorly supported?

[23:03:01.0000] <montecfel>
Possibly with typed arrays, but they don't seem much faster than general JS arrays.

[23:03:49.0000] <montecfel>
It feels criminal to, upon load, make 100 copies of each sprite/tile in my game, and keep them all in RAM, just to be able to shade in/out from night and day.

[23:04:51.0000] <montecfel>
What does WebGL code even look like for 2D stuff?

[23:04:56.0000] <montecfel>
And shaders... ugh...

[23:05:03.0000] <montecfel>
/me does not like the idea of diving into that.

[23:06:21.0000] <roc>
montecfel: maybe you can use the "lighten" or "darken" operators

[23:06:26.0000] <roc>
with globalCompositeOperation

[23:07:05.0000] <montecfel>
Hmm...

[23:07:20.0000] <montecfel>
Well, I need to set the R, G and B separately.

[23:21:39.0000] <Domenic>
+1 webgl shaders

[23:21:53.0000] <Domenic>
used them to great affect in a hackathon to make a nightvision filter

[23:27:10.0000] <Domenic>
Does anything specify javascript: URLs? cf. https://github.com/tmpvar/jsdom/issues/823. annevk?

[23:29:49.0000] <montecfel>
I don't understand how to use WebGL.

[23:31:07.0000] <montecfel>
 ImageData.data

[23:31:07.0000] <montecfel>
    Is a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).

[23:31:15.0000] <montecfel>
Oh. It's a typed array.

[23:31:19.0000] <montecfel>
And still so damn slow.

[23:31:22.0000] <Hixie>
MikeSmith: wow, that's a dumb protocol design. totally racy.

[23:31:27.0000] <montecfel>
"Clamped" is a weird term.

[02:47:14.0000] <MikeSmith>
anybody know if there are people from Nashorn on TC39

[02:49:11.0000] <MikeSmith>
Jim Laskey?

[09:27:40.0000] <hsivonen>
MikeSmith: I located the build.py bug that prevented me from launching re-deploying validator.nu the other day

[09:28:03.0000] <MikeSmith>
hsivonen: glad for that

[09:28:07.0000] <hsivonen>
there's now a command line parameter with a space in it and the shell script generation option doesn't deal

[09:28:15.0000] <MikeSmith>
oh..

[09:28:23.0000] <MikeSmith>
sorry about that

[09:28:36.0000] <MikeSmith>
did I add that param?

[09:28:40.0000] <MikeSmith>
I must have

[09:28:42.0000] <hsivonen>
what's the pythonic way to say "take this array of strings and give me an array where each item has been surrounded by single quotes"?

[09:28:53.0000] <hsivonen>
I'm pretty sure I didn't :-)

[09:29:33.0000] <MikeSmith>
as far as your question, I'm not an idiomatic pyton coder

[09:30:07.0000] <MikeSmith>
but we could change that param to have an equals sign between the name of the switch and the value

[09:30:31.0000] <MikeSmith>
/me looks back to see what switches he added

[09:32:34.0000] <gsnedders>
hsivonen: ["'%s' % x for x in foo] is what I'd claim is Pythonic

[09:34:24.0000] <jgraham>
gsnedders: I'd claim that's a SyntaxError :p

[09:35:25.0000] <MikeSmith>
hsivonen: the value for the "--user-agent" switch I guess. So ignore what I said before about the equals-sign thing. That won't make any difference of course

[09:36:58.0000] <gsnedders>
jgraham: shut up you

[09:45:10.0000] <Hixie>
wtf is http://blog.udn.com/bbuqt56/13228080 and why is it linking to my blog

[09:47:32.0000] <tantek>
linkback spam?

[09:47:45.0000] <tantek>
(which now made it into archives ;) )

[09:49:15.0000] <Hixie>
why would someone link-back spam to a random page on my blog with bogus arguments?

[09:51:09.0000] <TabAtkins>
hsivonen: Alternately, map("'{0}'".format, arr)

[09:51:15.0000] <TabAtkins>
/me has used that before.

[09:51:34.0000] <TabAtkins>
But the list comprehension works just as well.

[09:54:26.0000] <gsnedders>
/me would claim that's less idiomatic

[09:56:49.0000] <tantek>
Hixie, on the web, spam is the simplest (Occam's razor) explanation for many behaviors.

[09:57:10.0000] <Hixie>
granted

[09:57:17.0000] <Hixie>
but i don't understand what they hoped to achieve here

[09:57:58.0000] <tantek>
get you to post a link in the channel?

[09:57:58.0000] <MikeSmith>
tantek: I thought broken code was the simplest explanation

[09:58:36.0000] <tantek>
MikeSmith - true - and of that, databases are the biggest subset. spam is second to broken code.

[10:02:24.0000] <Hixie>
tantek: that's some convoluted spam operation

[10:02:43.0000] <Hixie>
tantek: also, i'm probably a poor target, given that i work at google, in the knowledge department...

[10:03:30.0000] <tantek>
and for that we can go with MikeSmith's explanation - broken code - why your link was picked - no idea

[10:03:44.0000] <tantek>
or lazy code

[10:03:55.0000] <MikeSmith>
yeah that too

[10:05:54.0000] <Hixie>
in other news, it's absurd how many RSS readers are still crawling my RSS feed

[10:06:05.0000] <Hixie>
it hasn't changed since 2011

[10:06:17.0000] <Hixie>
time to 410 it, i guess

[10:06:20.0000] <tantek>
maybe they're optimists

[10:06:49.0000] <tantek>
Hixie - do it - then we can point out that you're killing RSS!

[10:07:00.0000] <Hixie>
rss is dumb and should have died long ago :-P

[10:07:41.0000] <tantek>
it is dying, slowly: http://indiewebcamp.com/feed#Shutdowns

[10:08:47.0000] <Hixie>
also i love the crawlers that clearly lie in their referrer field

[10:09:22.0000] <tantek>
Hixie, I for one see most of my bandwidth go to bots lying that they're IE5.5

[10:09:40.0000] <Hixie>
i just had one claiming to be firefox on windows 3.1.

[10:10:55.0000] <tantek>
nice

[10:17:18.0000] <zewt_>
some non-browser but non-bot stuff make up referer, I think lftp puts the url itself in

[10:17:59.0000] <zewt_>
useful when pasting in a file url to download since it convinces a lot of dumb sites to work

[10:31:20.0000] <Domenic>
I still <3 RSS... not as a format, but as a user experience.

[11:27:30.0000] <TallTed>
RSS (and Atom) is just a poor but sometimes pretty reinvention of NNTP.  Fixing/evolving NNTP would be so much better.

[11:28:51.0000] <Domenic>
Why? What practical benefits would that give over RSS?

[11:37:18.0000] <Hixie>
TallTed: NNTP is rather different imho

[11:37:33.0000] <Hixie>
fundamentally the problem with RSS or Atom is that they're poll-based

[11:37:36.0000] <Hixie>
which is just a broken model

[11:37:59.0000] <tantek>
Hixie, what do you think of Atom via PuSH?

[11:38:10.0000] <kmc>
can scripts change a Document's quirks mode? can the quirks mode change during parsing other than by action of the parser?

[11:38:20.0000] <Hixie>
well atom's pretty horrible in and of itself, as a separate issue

[11:38:23.0000] <SamB>
Hixie: NNTP is poll-based too, no?

[11:38:33.0000] <Hixie>
i'm not advocating nntp either

[11:38:42.0000] <SamB>
though at least you poll, like, two servers instead of zillions

[11:40:07.0000] <Hixie>
tantek: i think PuSH is definitely the better model

[11:40:24.0000] <Hixie>
tantek: though i can't help but wonder why it seems that for most purposes, there just isn't that much demand for this kind of thing.

[11:41:12.0000] <Hixie>
at the client end, i mean

[11:41:34.0000] <SamB>
Hixie: Well, you're already familiar with one push-based protocol in common use, yes? Oh, but not usually on the client end ...

[11:41:36.0000] <Hixie>
podcast readers and feed readers are the only real end-user usage of RSS/Atom, and they're pretty low in usage

[11:41:57.0000] <tantek>
Hixie, ironically, there is from a user level AKA "push notifications" but that has yet to translate into decent simple reliable protocols for that at the server level. PuSH is a step but by no means a very good answer.

[11:41:59.0000] <SamB>
are there any good feed readers now?

[11:42:14.0000] <SamB>
um, hey, what's the lowercase u

[11:42:36.0000] <tantek>
SamB: http://indiewebcamp.com/PuSH

[11:43:01.0000] <Hixie>
i would have linked to https://code.google.com/p/pubsubhubbub/ :-)

[11:43:34.0000] <Hixie>
tantek: the push notifications that users seem to want are things like instant messaging and calendar appointments and incoming phone calls and the like

[11:43:47.0000] <Hixie>
tantek: all of which have their own proprietary or dedicated protocols

[11:43:51.0000] <tantek>
Hixie - that page is less up to date unfortunately - as a nearly all such project/corporate pages that don't have some wiki-ness to them.

[11:43:59.0000] <tantek>
It's like the TR problem

[11:44:13.0000] <Hixie>
code.google.com has wikiness

[11:44:14.0000] <Hixie>
but sure

[11:44:37.0000] <tantek>
Hixie - right " have their own proprietary or dedicated protocols" - we're still at that phase in the technology curve for user/web scale notifications

[11:44:47.0000] <SamB>
code.google.com often has incomplete wikiness

[11:45:11.0000] <SamB>
"web scale" is a buzzword, you know that right?

[11:45:25.0000] <tantek>
SamB - I kind of assume all projects there are dead now, either abandoned or moved to github

[11:45:35.0000] <Hixie>
tantek: well it's not clear to me what the user desire is at the end of the day

[11:45:46.0000] <Hixie>
tantek: most people don't seem to care for web sites to push them notifications of new content.

[11:45:54.0000] <tantek>
Hixie, sure, there are probably several different use-cases to unpack

[11:45:57.0000] <SamB>
tantek: I think I've seen one project that was for some reason using google code for issues but github for pull requests

[11:46:00.0000] <SamB>
libarchive, iirc

[11:46:05.0000] <Hixie>
tantek: at least, not in the indiscriminate ways that RSS/Atom/PuSH do

[11:46:22.0000] <tantek>
Hixie "web sites" can be calendar, or even IM/IRC, and with WebRTC, phone calls too

[11:46:24.0000] <Hixie>
SamB: "web scale" is actually a pretty important concept that a lot of people don't get

[11:46:36.0000] <SamB>
Hixie: that's almost the same as a buzzword

[11:46:47.0000] <tantek>
it's jargon, not the same as a buzzword

[11:46:58.0000] <Hixie>
tantek: right

[11:47:02.0000] <SamB>
I mean, um, people seem to use it without actually meaning anything in particular a lot of the time

[11:47:16.0000] <tantek>
SamB, your skepticism is reasonable.

[11:47:35.0000] <Hixie>
tantek: it's messages about application state, not messages about all new site content, though.

[11:47:50.0000] <Hixie>
SamB: a lot of jargon is used by many people as if it was a buzzword

[11:47:53.0000] <SamB>
if a what was jargon gets too much buzz, it can lose value as jargon

[11:48:08.0000] <Hixie>
SamB: but when tantek (or I, or most people in #whatwg) say "web scale", it isn't empty of meaning

[11:48:11.0000] <SamB>
or, maybe, it's just that I personally am confused by the buzz

[11:48:13.0000] <tantek>
Hixie - simple example: txt messages - they're all new (site) content

[11:48:13.0000] <SamB>
dunno ;-)

[11:48:45.0000] <Hixie>
tantek: i guess the distinction i'm making is between user-specific content and public content

[11:48:57.0000] <tantek>
so like Amber Alert txt messages then?

[11:49:23.0000] <Hixie>
tantek: those are an interesting case

[11:49:41.0000] <Hixie>
tantek: not sure they generalise, though

[11:49:45.0000] <tantek>
Hixie - another: weather alerts: http://www.nws.noaa.gov/com/weatherreadynation/wea.html

[11:49:57.0000] <tantek>
for cities, transit system alerts

[11:50:21.0000] <Hixie>
all of these are somewhat user-specific, in that they're geographically scoped

[11:50:26.0000] <Hixie>
but yeah

[11:50:44.0000] <tantek>
they're public-ish

[11:50:48.0000] <Hixie>
sure

[11:50:56.0000] <SamB>
oh yeah, it'd certainly be handy to know about impending weather or SEPTA service interruptions ;-)

[11:51:07.0000] <Hixie>
but you'd want your system to automatically provide you with alerts about the transit problems near you, you wouldn't want to subscribe to them manually

[11:51:14.0000] <tantek>
Hixie, another more recent *global* example: World Cup scores

[11:51:23.0000] <tantek>
(as they happen - as in individual goals)

[11:51:38.0000] <SamB>
why do I keep thinking of twitter

[11:51:54.0000] <Hixie>
yeah, but how many users would want to manually subscribe to those? as opposed to just being told them if they've shown interest?

[11:52:07.0000] <tantek>
Hixie - yes, many "subscriptions" you'd want to be automatic on/off rather than manually curating - we've come to that conclusion in the #indiewebcamp community as well.

[11:52:10.0000] <Hixie>
i mean, people aren't subscribing to Atom feeds for goals en-masse

[11:52:14.0000] <SamB>
Hixie: the latter sounds kind of creepy

[11:52:29.0000] <Hixie>
creepy how?

[11:52:36.0000] <tantek>
It's one of the reasons feed readers died

[11:52:37.0000] <tantek>
too much curating

[11:52:41.0000] <Hixie>
tantek: right

[11:52:45.0000] <Hixie>
tantek: that's kind of my point

[11:52:47.0000] <tantek>
it's also going to doom the silos, Twitter, FB, G+ etc. because you need to do too much curating of who/what you follow

[11:53:07.0000] <SamB>
creepy like Facebook crossed with Amazon?

[11:53:15.0000] <tantek>
Facezon!

[11:53:25.0000] <Hixie>
tantek: i assume that's why G+ and FB are working so hard on automatic curation

[11:53:34.0000] <Hixie>
SamB: i don't understand what you mean by "creepy" here

[11:53:50.0000] <tantek>
Hixie - in FB's case, they're also doing it for academic studies of emotional manipulation / propation.

[11:54:00.0000] <Hixie>
yeah, that was a fascinating study

[11:54:02.0000] <SamB>
some of us like to pretend we've got something resembling privacy

[11:54:10.0000] <Hixie>
SamB: ?

[11:54:14.0000] <Hixie>
SamB: what's privacy got to do with this

[11:54:22.0000] <SamB>
is the automation meant to be client-side?

[11:54:34.0000] <SamB>
in terms of figuring out what feeds to follow?

[11:54:38.0000] <Hixie>
SamB: what do you mean by "client-side"?

[11:54:45.0000] <tantek>
Hixie - agreed, automatic curation is a very hard problem

[11:54:54.0000] <Hixie>
SamB: i don't understand what you mean by "privacy" in this context

[11:55:25.0000] <Hixie>
i don't see anything in what we've discussed that would imply anyone else being able to see anything about you

[11:56:15.0000] <Hixie>
tantek: as you say, though, it's pretty much going to be a requirement.

[11:56:22.0000] <Hixie>
tantek: cos people hate to do manual curation.

[11:56:25.0000] <SamB>
Hixie: who is meant to do the automatic curation?

[11:56:34.0000] <SamB>
or rather, what?

[11:56:40.0000] <Hixie>
SamB: some software somewhere.

[11:57:53.0000] <SamB>
and what is the nature of the information on which it will base its choices?

[11:58:59.0000] <Hixie>
whatever you've provided the software, e.g. if it's twitter, who you follow, what you've tweeted, etc

[11:59:31.0000] <Hixie>
ideally, every action you've ever taken and every thought you've ever had

[11:59:45.0000] <Hixie>
though i doubt we'll get there any time soon, the tech isn't there yet :-)

[12:00:21.0000] <SamB>
Hixie: and you're confused about why I'm bringing up privacy *why*?

[12:00:25.0000] <tantek>
HIxie, I don't think you're helping with not creeping out SamB ;)

[12:00:40.0000] <Hixie>
SamB: privacy is about what other people see. there's no other people in this discussion.

[12:01:01.0000] <SamB>
well, I guess my concern is basically with how vague "somewhere" is

[12:01:52.0000] <Hixie>
well given the volume of data and the processing requirements to handle it, probably some datacenter.

[12:02:35.0000] <tantek>
Hixie, put another way, manual curation doesn't scale, not even to "average" friend group sizes these days

[12:02:37.0000] <tantek>
nevermind all the more public-ish things you want to be notified about

[12:02:47.0000] <SamB>
so will this data center be run by the NSA directly, or ...

[12:03:02.0000] <tantek>
SamB - no they just get their copy as usual

[12:03:29.0000] <SamB>
so it gets used for advertising purposes *and* policing then?

[12:04:03.0000] <Hixie>
SamB: let me assure you than the NSA can far more easily slurp data off your personal hardware than it can out of the datacenter of a company which pays teams of the world's security experts to specifically secure the data against agencies like the NSA

[12:04:31.0000] <Hixie>
_faaaar_ more easily

[12:04:32.0000] <SamB>
Hixie: I believe it

[12:04:52.0000] <Hixie>
so you brought up the NSA because...?

[12:06:29.0000] <SamB>
well, what company did you have in mind exactly?

[12:07:12.0000] <Hixie>
it doesn't really matter, since the NSA can get to your hardware as easily or more easily than any company's.

[12:07:59.0000] <SamB>
yes but I think someone would notice if they actually got to my hardware

[12:08:00.0000] <Hixie>
even if you used the NSA itself as your curation provider, your data would still be no less secure than if you used your own hardware.

[12:08:05.0000] <Hixie>
lol no

[12:08:23.0000] <Hixie>
see the stuff snowden leaked.

[12:08:28.0000] <gsnedders>
Hell, I'd be kinda worried just going over any border crossing

[12:09:00.0000] <SamB>
/me imagines trying to carry a desktop across a border ...

[12:09:00.0000] <Hixie>
they intercept hardware delivers and replace the hardware with identical-looking hardware with built-in wifi hotspots that they can connect to.

[12:09:08.0000] <Hixie>
deliveries.

[12:09:21.0000] <Hixie>
including, e.g. USB cables

[12:09:45.0000] <Hixie>
if your threat model includes the NSA, then the only way you're going to be able to come close to thinking you're secure is if you have the resources of a small nation state.

[12:09:59.0000] <Hixie>
(like, for example, some large companies do)

[12:10:33.0000] <gsnedders>
but do you trust the SoC?

[12:10:58.0000] <Hixie>
which SoC?

[12:11:13.0000] <gsnedders>
any

[12:11:27.0000] <Hixie>
i don't understand your question

[12:11:39.0000] <Hixie>
if you designed and built it, then sure

[12:11:50.0000] <gsnedders>
are you sure the built product is what you designed?

[12:11:50.0000] <SamB>
you think they can squeeze a wifi hotspot into an SoC?

[12:12:05.0000] <Hixie>
SamB: um, every phone has a wifi hotspot on an SoC

[12:12:34.0000] <gsnedders>
the antenna are a fair bit larger, but I'm sure you can work around that somehow

[12:12:40.0000] <Hixie>
gsnedders: if you took the data from your design to fab and so forth, sure

[12:12:57.0000] <SamB>
technically not just the SoC, but I see your point

[12:12:57.0000] <Hixie>
if the hardware the wifi hotspot is being put into is a USB cable, you have a gigantic antenna to work with.

[12:13:16.0000] <SamB>
no need to add much if the hardware was already going to be provided anyway

[12:13:33.0000] <Hixie>
i mean, the victim in the scenario here literally provides the antenna _as the product they're trying to get_

[12:13:58.0000] <Hixie>
anyway

[12:14:00.0000] <Hixie>
as i said

[12:14:41.0000] <Hixie>
if the NSA is in your threat model, then your only real choices are: 1. no computer data at all, 2. be a nation state or large company, 3. employ the services of a nation state or large company.

[12:14:44.0000] <SamB>
so do they really do this to the general public?

[12:14:53.0000] <SamB>
I mean, as a whole?

[12:15:04.0000] <Hixie>
no, of course not. not in any way that matters to you.

[12:15:22.0000] <Hixie>
unless you're the girlfriend of an NSA agent, or are two or three steps removed from a terrorist suspect

[12:15:49.0000] <Hixie>
or make phone calls

[12:15:51.0000] <Hixie>
or send texts

[12:16:47.0000] <Hixie>
btw, if you're worried about the NSA seeing your automatically curated feeds, it's going to blow your mind when you realise that your credit card company sees everything you buy and your ISP sees everything you do online, and both of those are probably sharing that data with the NSA too

[12:16:52.0000] <SamB>
well, I can be fairly certain they aren't responsible for the *design* of my phone; if they were, surely the piece of junk they call a "browser" would actually function, no?

[12:18:53.0000] <SamB>
Hixie: well, somehow having all that preferences information already distilled just makes it worse ...

[12:19:02.0000] <SamB>
I mean, in my mind, not in reality

[12:19:19.0000] <SamB>
anyway I should probably go do something useful rather than worrying about the fiction of privacy ...

[12:19:26.0000] <Hixie>
yeah, god forbid the NSA know what football team you're rooting for

[12:19:38.0000] <Hixie>
your privacy is unaffected by what we're talking about

[12:19:45.0000] <Hixie>
(unless you care about the NSA)

[12:20:02.0000] <Hixie>
(but even then, your privacy isn't any _more_ affected by what we're talking about than it already is.)

[12:21:49.0000] <SamB>
/me is beginning to feel like the NSA could have intentionally not reported heartbleed so that it could later serve as a convenient distraction from their ACTUAL methods of attack ...

[12:22:38.0000] <caitp>
maybe they did intentionally not report heartbleed

[12:22:49.0000] <caitp>
maybe martians have landed in DC

[12:23:50.0000] <Hixie>
the NSA claim that they didn't know about that OpenSSL bug, and people who claim to have looked through logs claim to not have seen any evidence that anyone was exploiting that bug early

[12:24:04.0000] <SamB>
I mean, maybe that's the kind of thing it would have made sense for them to do, given knowledge of the existance of heartbleed.  Not to say that I believe that they knew about it.

[12:24:19.0000] <Hixie>
but that bug's an interesting example of precisely what i meant by large companies having large security teams whose job it is to secure their users' data from the NSA

[12:24:45.0000] <gsnedders>
on the other hand, the large companies are probably larger targets

[12:24:59.0000] <SamB>
The idea being that they actually would do nothing with it, saving it for later when it would cause a huge stir

[12:25:46.0000] <SamB>
(but don't ask me how they would arrange for it to be discovered)

[12:27:03.0000] <caitp>
they have a specific word for revealing security vulnerabilities in the least helpful and most harmful way possible

[12:27:05.0000] <Hixie>
SamB: given how much of the US gov't depends on OpenSSL, I _highly_ doubt that they would be that reckless

[12:27:29.0000] <SamB>
Hixie: point

[12:27:56.0000] <SamB>
maybe a bug that was less bad, but not clearly so, would work better for such a purpose

[12:28:02.0000] <caitp>
> implying agencies of government necessarily care if they step on another agencies toes

[12:28:58.0000] <gsnedders>
the NSA's mission includes defence against sigint

[12:29:24.0000] <SamB>
well, most of my programs will exit upon recieving sigint, so I think they've failed miserably

[12:30:06.0000] <caitp>
heh

[12:30:07.0000] <tantek>
is there a variant of Godwin's law like Snowden's law that says that every conversation online ends up being about the NSA? E.g. scrollback and see how fast we got from RSS to NSA.

[12:30:13.0000] <caitp>
high quality puns

[12:31:37.0000] <SamB>
I mean, I guess it's silly for me to worry so much more when you talk about actually *using* information that I've not hesitated to let e.g. google have in the past to actually make the product work better

[12:31:57.0000] <SamB>
I mean I used reader for a while, was rather sad to see it go ...

[12:32:48.0000] <SamB>
(especially since most sites have terrrible, uh, "retention" on their feeds)

[12:33:12.0000] <tantek>
SamB - another reason why separate feed files were a bad idea

[12:33:31.0000] <tantek>
modern approaches now just markup the visible content in the HTML

[12:33:36.0000] <SamB>
hmm

[12:34:15.0000] <SamB>
I think what was happening was they didn't want stupid clients to download the entire history of the world at every poll

[12:34:25.0000] <tantek>
more on feed files (problems, superseded by) http://indiewebcamp.com/feed_file

[12:35:09.0000] <SamB>
how would you pull in the entire history of everything using these modern approaches?

[12:35:51.0000] <tantek>
SamB - is that a use case for anyone other than a search engine like google?

[12:35:56.0000] <SamB>
and why am I suddenly wishing for a <body> tag to put inside <article> ;-P

[12:36:00.0000] <tantek>
thus: web spider

[12:36:33.0000] <tantek>
SamB - see previous debate about a <content> tag - pretty sure that's in an FAQ somewhere (why we don't need one)

[12:36:40.0000] <SamB>
tantek: well, it used to be nice and convenient to read all of that stuff in reader, especially before it started auto-marking everything as read before a certain date ...

[12:37:03.0000] <caitp>
content doesn't really have much of a semantic meaning does it

[12:37:05.0000] <SamB>
tantek: but ... comments ... aren't ... content ... of the ... article!

[12:37:08.0000] <caitp>
"there is stuff here"

[12:37:34.0000] <caitp>
section[for=comments] ?

[12:37:49.0000] <tantek>
SamB - sure. are you publishing or parsing?

[12:39:38.0000] <SamB>
well, it sounds like these "modern approaches" involve scraping the site, but you might want to see just the main content without all the trappings/comments ...

[12:39:46.0000] <tantek>
no scraping - all parsing

[12:40:08.0000] <SamB>
I'm not sure I follow the distinction ;-)

[12:40:11.0000] <tantek>
yup - content of a post (vs. comments, faves, reposts, reply-context etc.) has been solved

[12:40:39.0000] <tantek>
parsing has a spec that publishers conform to, scraping is one-off per site. not unlike site-specific APIs. which break when sites change.

[12:40:45.0000] <tantek>
big difference

[12:40:56.0000] <SamB>
tantek: okay, fine, I meant "parsing"

[12:41:39.0000] <tantek>
cool - yeah if you want to chat modern approaches for distinguishing post content vs. comments, faves, reposts, reply-context etc. come on by #indiewebcamp

[12:41:45.0000] <SamB>
tantek: got a blog that implements it?

[12:42:02.0000] <tantek>
SamB - several! depends on what you're looking for

[12:43:12.0000] <caitp>
i don't know why I ever bother with debug builds when a release clobber build just sails through so much faster

[12:44:47.0000] <SamB>
caitp: a what now?

[12:45:05.0000] <caitp>
don't mind me I'm yappin

[12:45:08.0000] <SamB>
I hope you always build with -g

[12:46:18.0000] <caitp>
have you ever seen a lithium ion battery explode?

[12:47:30.0000] <caitp>
that's the main reason not to compile/link with symbols and debug info, that's frankly terrifying

[13:50:54.0000] <wanderview_>
this is probably a question for annevk, but does anyone remember why fetch Headers require maintaining ordering?  what use case requires controlling the ordering of headers?

[14:49:05.0000] <GPH-Hickory>
wanderview_: Perhaps for when duplicate headers overwrite each other? (Just guessing.)

[14:52:24.0000] <Hixie>
oops

[14:52:29.0000] <Hixie>
/me accidentally clobbers the spec

[14:53:31.0000] <caitp>
does that mean we can rewrite HTML from the beginning? horray!

[14:54:01.0000] <gsnedders>
Unfortunately it's only the spec, not all the legacy :(

[14:54:12.0000] <caitp>
:'(

[15:03:13.0000] <cabanier>
Domenic: ping

[15:03:33.0000] <Domenic>
cabanier: pong

[15:03:56.0000] <cabanier>
Domenic: about the DOMRectReadonly object, why can't we treat it as just an interface?

[15:04:14.0000] <Domenic>
cabanier: what is an interface? WebIDL interface === JavaScript class

[15:04:16.0000] <cabanier>
Domenic: it seems you're going out of your way to make it the same object.

[15:04:49.0000] <Domenic>
cabanier: I agree, but that is roc's requirement, so that you can monkeypatch a common prototype class. My suggestion was just to have a DOMRectUtils mixin.

[15:04:49.0000] <cabanier>
Domenic: even if it has no constructor?

[15:05:10.0000] <Domenic>
cabanier: yes; remember there is no such thing as "no constructor" in JS, just "constructor which throws unless you pass it a secret"

[15:05:44.0000] <cabanier>
Domenic: but there are a lot of objects like that in the web platform. You can't new a canvas element for instance

[15:06:03.0000] <Domenic>
cabanier: EXCEPT that WebIDL has a special exception for interfaces that are [NoInterfaceObject] and only ever used with `inherits` instead of `:`; those are called "supplemental interfaces"

[15:06:06.0000] <cabanier>
Domenic: maybe domrectreadonly should be a dictionary

[15:06:07.0000] <Domenic>
cabanier: yes, and we are trying to fix those

[15:06:26.0000] <Domenic>
cabanier: well, that might be OK, but what about the left/right/top/bottom :-/

[15:06:52.0000] <cabanier>
Domenic: var c = new HTMLCanvasElement(); ?

[15:07:27.0000] <cabanier>
Domenic: too bad that those attributes already shipped....

[15:08:24.0000] <cabanier>
Domenic: can't they be implemented with JS? I agree it's failry magical

[15:08:32.0000] <Domenic>
cabanier: I think they are useful... either separate DOMQuadBounds and DOMRect classes, or DOMRectReadOnly and DOMRect classes, seem OK.

[15:08:35.0000] <cabanier>
s/failry/fairly

[15:08:53.0000] <Domenic>
cabanier: sorry, can't what be implemented with JS?

[15:09:26.0000] <cabanier>
 left/right/top/bottom as attribute getter functions that do the calculation

[15:09:36.0000] <gsnedders>
why not?

[15:10:00.0000] <Domenic>
they could be, but then there would be separate getters for every instance... classes are nice since they let you reuse getters (or methods) across multiple instances

[15:10:39.0000] <cabanier>
Domenic: but a dictionary defines everything new every time so that would be consistent

[15:11:05.0000] <Domenic>
cabanier: yeah, it'd be consistent, agreed. A little wasteful I guess, but not horrible.

[15:17:17.0000] <cabanier>
Domenic: then DOMRectReadOnly would just be an Object and DOMQuad would keep a reference to that object

[15:34:38.0000] <Domenic>
cabanier: that seems to kind of contradict the stated design goals, e.g. then people can modify quad.bounds.x and it'll be inconsistent with the quad itself. But I know a lot of people would argue that's more JavaScriptey anyway---the reflection of the object in the API can be messed with, even if the quad itself is not impacted.

[15:35:51.0000] <cabanier>
Domenic: can 'x' not be readonly in the dictionary?

[15:36:49.0000] <Domenic>
cabanier: well, I guess it could be a "dictionary" full of getters? E.g. `{ get x() { return 5; }, get y() { return 10; } }`

[15:37:55.0000] <cabanier>
Domenic: yes, for a quad they would pull it out of the quad.

[15:42:45.0000] <Domenic>
cabanier: I guess I don't see the advantage over a DOMQuadBounds class?

[15:43:59.0000] <Domenic>
cabanier: you end up writing a (browser-internal) factory function that is e.g. createRectDictionaryFromDomQuad(quad) { return { get x() { ... }, ... } }

[15:44:31.0000] <Domenic>
cabanier: which doesn't seem any better than creating a (user-exposed) constructor function DOMQuadBounds(quad) { ... }

[15:44:49.0000] <Domenic>
both are better than a throw-without-secret constructor, definitely

[15:45:46.0000] <Domenic>
(note that you can't hide constructors in JS, since they are always accessible via the .constructor property on instances. Whereas factory functions that return simple objects can be hidden.)

[15:46:12.0000] <cabanier>
Domenic: you avoid exposing another object to the global namespace

[15:46:54.0000] <cabanier>
Domenic: and avoid type checking when you pass in a DOMRectReadOnly

[15:47:32.0000] <Domenic>
cabanier: I think you can accomplish both of those though. The type checking definitely; input should never be a DOMRectReadOnly, just a DOMRectInit or something

[15:48:11.0000] <cabanier>
Domenic: yes.

[15:48:13.0000] <Domenic>
cabanier: the avoiding-exposing-an-object thing is a bit trickier since we'd need to fix WebIDL. But there is no reason in JS you cannot both (a) have a constructor; (b) decide not to make a global variable pointing to that constructor.

[15:48:29.0000] <Domenic>
The fact that having a constructor means it must be on the global in WebIDL is just a bug in WebIDL.

[15:48:50.0000] <Domenic>
it'll be a very bad bug once browsers start shipping modules :P

[15:49:10.0000] <cabanier>
Domenic: it might be a fundamental browser feature

[15:49:31.0000] <cabanier>
Domenic: so fixing it might take a while, if you can even convince them to do so

[15:49:49.0000] <cabanier>
s/feature/design flaw/

[15:50:16.0000] <Domenic>
cabanier: that's fair. But we could have a spec that's slightly ahead of the browsers here. And browsers could either expose an extra global (risky), or have a throwing constructor. But as long as the throwing constructor is spec-uncompliant, I am happy.

[15:53:43.0000] <cabanier>
Domenic: thanks! I'm going to ponder this a bit (it's time to go to sleep :-))

[15:55:28.0000] <Domenic>
cabanier: sounds good! glad I could help :)

[15:55:56.0000] <cabanier>
Domenic: yes, the spec will definitely get better

[16:45:23.0000] <Hixie>
dreamhost is moving the whatwg.org server to a different back-end to see if that improves performance

[16:45:30.0000] <Hixie>
site will be down until dns propagates

[16:47:08.0000] <SamB>
Hixie: why can't they propagate DNS first :-(

[16:47:31.0000] <Hixie>
because that would just mean the site was down earlier?

[16:48:24.0000] <SamB>
I mean, er, set up new backend, then wait for dns to propagate, then take down old one.  I guess it would be important to flip the wiki to read-only though ...

[16:52:24.0000] <Hixie>
SamB: not just the wiki

[16:52:47.0000] <Hixie>
anyway, dns has propagated

[16:52:49.0000] <SamB>
oh okay

[16:53:20.0000] <SamB>
I guess a big name like them *would* remeber the "lower TTL first" step


2014-07-10
[17:27:23.0000] <zewt_>
some aws stuff is designed around expecting low ttl always (on the order of ~60s)

[17:27:57.0000] <zewt>
it's a bit bizarre that apparently firefox still ignores TTL, even though it breaks anything hosted on amazon ELB

[17:33:22.0000] <caitp>
sounds like good material for a bug

[17:34:21.0000] <zewt>
https://bugzilla.mozilla.org/show_bug.cgi?id=151929 filed 12 years ago

[17:34:51.0000] <caitp>
nice

[17:36:54.0000] <caitp>
well, 12 years and no attachments shows some commitment :s

[17:36:55.0000] <zewt>
certainly a bigger bug today than it was then

[18:58:17.0000] <Hixie>
how do other browsers honour ttl if the OS doesn't expose it?

[19:08:29.0000] <zewt>
the OS DNS does handle ttl, but iirc firefox has its own caching layer that doesn't

[19:08:58.0000] <zewt>
if they're using the OS to do the underlying DNS and it doesn't expose TTL, then they either need to 1: not use the OS resolver at all to get the info or 2: lose the extra caching layer

[19:10:56.0000] <SamB>
zewt: might not be *totally* insane to cache for, say, a minute despite not knowing TTL

[19:11:48.0000] <zewt>
afaik they're caching for longer than that (five minutes or something)

[19:12:39.0000] <zewt>
amazon ELB instances have a ttl of around 45-60 seconds

[23:10:17.0000] <dbpokorny>
what's with all of the asm.js hate?

[23:11:00.0000] <dbpokorny>
why did everybody decide to put their head in the ground at exactly the same time?

[23:12:05.0000] <dbpokorny>
Why can't I put my MacDraw picture in the cloud?

[23:12:21.0000] <dbpokorny>
Why can't I put my HyperCard stack in the cloud?

[23:15:39.0000] <SamB>
dbpokorny: asm.js hate?

[23:15:59.0000] <SamB>
and what's this about not being able to store those files in the cloud ... ?

[23:18:24.0000] <dbpokorny>
For example "assembly is inherently incompatible with the web". This is the ultimate source of what is and is not web.

[23:18:50.0000] <SamB>
asm.js is probably not what they think

[23:19:56.0000] <dbpokorny>
I bring up MacDraw and HyperCard because they currently require pce.js to run, which requires asm.js.

[23:52:06.0000] <dbpokorny>
*sigh* so stuff like this "image decoding *can't* be done efficiently in script"

[23:52:25.0000] <dbpokorny>
I mean, it is being done in script. That train has left

[23:53:50.0000] <dbpokorny>
Are compiler writers so scarce that people simply believe language translation is not possible?

[23:53:53.0000] <SamB>
it is better if you can let the browser do it rather than insisting on wasting memory in every ... single ... tab

[23:54:24.0000] <dbpokorny>
I agree

[23:54:49.0000] <SamB>
okay, so no lecture about sharing code pages necessary then ;-)

[23:56:22.0000] <dbpokorny>
sharing code pages is very apt to this discussion

[23:57:33.0000] <SamB>
yes, but *you* already know about it so *I* don't need to bore you with the details that you already know

[23:57:54.0000] <dbpokorny>
Basically, I want to run libhfs.c in my browser

[00:01:28.0000] <dbpokorny>
The whole, "it hasn't been invented yet, it will never be invented" attitude is just...so early 90s

[00:01:52.0000] <dbpokorny>
"(People have been trying unsuccessfully to do that since day one of MMX, so it's irrelevant until the day it actually happens.)"

[00:02:14.0000] <SamB>
what, only since then?

[00:02:39.0000] <SamB>
and I thought MMX was late 90s ;-P

[00:02:51.0000] <dbpokorny>
lol you're right

[00:16:31.0000] <dbpokorny>
http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2014-May/296960.html

[00:17:01.0000] <dbpokorny>
"platform-independent code with performance competitive with native SIMD assembly is a thing of myth"

[00:19:01.0000] <SamB>
it does sound kind of grail-ish

[00:20:00.0000] <dbpokorny>
yeah, but if you just turn over the coin, you see that all you have to do is define the algorithm namespace, check which algorithms/libraries you want, and hand the thing over to a compiler from 2050

[00:20:31.0000] <dbpokorny>
everyone implements the same algorithms on new SIMD hardware

[00:21:08.0000] <dbpokorny>
unless, you know, you're IBM Almaden

[00:21:39.0000] <SamB>
the compiler from 2050 still has good sheduling support for the hardware of 2014 ?

[00:25:29.0000] <dbpokorny>
I don't follow. The image compression issue is latency-oriented

[00:40:50.0000] <dbpokorny>
but the greater issue is that there are only so many ways to design different scheduling schemes for hardware. With the web, it will be easier to share them, and then design compilers for historical SIMD hardware the same way we ask students to come up with proofs that every nonempty perfect complete metric space is uncountable

[05:30:08.0000] <gsnedders>
jgraham: I would like opinions from you on the Jython PR for html5lib.

[08:14:09.0000] <bkardell__>
slightlyoff: you around?

[08:20:10.0000] <slightlyoff>
Ish.  In a cab. Whaddup?

[12:54:23.0000] <Ms2ger>
Domenic, you realize that breach.cc is basically Firefox, right?

[12:54:40.0000] <Domenic>
Ms2ger: Firefox has a Node.js core?

[12:54:53.0000] <Domenic>
The UI being in HTML/JS is not the interesting part

[12:55:07.0000] <Ms2ger>
The core is Chromium, afaict

[12:56:45.0000] <Domenic>
see "layer 3" and http://breach.cc/hack/

[12:59:00.0000] <SamB>
what, firefox UI is in HTML now?

[13:00:39.0000] <Ms2ger>
XUL and bits of HTML

[13:11:49.0000] <zewt>
it's sort of neat how FF's view for directly viewing an image is just a built-in html page, I was able to attach a greasemonkey script to it to add better zooming support

[13:17:45.0000] <gsnedders>
zewt: doesn't everyone do that nowadays?

[13:18:59.0000] <SamB>
gsnedders: hasn't mozilla been doing that since before most of the other engines were even born?

[14:26:29.0000] <Hixie>
jorendorff: yt?

[14:26:46.0000] <Hixie>
jorendorff: any idea why the sticky headers on http://people.mozilla.org/~jorendorff/es6-draft.html no longer appear on chrome?

[14:27:46.0000] <Hixie>
maybe chrome dropped position:sticky?

[14:29:38.0000] <Ms2ger>
I think that may be correct

[14:29:53.0000] <jorendorff>
Hixie: Does it work for you here? http://html5-demos.appspot.com/static/css/sticky.html

[14:29:54.0000] <Ms2ger>
<insert wit about mobile performance>

[14:30:14.0000] <Hixie>
jorendorff: it does not

[14:30:23.0000] <Hixie>
jorendorff: you didn't use to use js or anything i take it

[14:30:45.0000] <jorendorff>
Hixie: no, just position:sticky

[14:31:31.0000] <jorendorff>
it says here "Support: Chromium 23.0.1247.0 with the --enable-experimental-webkit-features flag enabled via about:flags."

[14:32:17.0000] <Hixie>
ah maybe that's it

[15:26:01.0000] <zewt>
gsnedders: chrome's can't be affected by user scripts, as far as i could tell

[15:26:16.0000] <zewt>
though chrome basically removed support for user scripts (which forced me back to firefox)

[15:29:44.0000] <jamesr__>
Hixie, jorendorff: the experimental sticky support in chrome was ripped out recently

[15:30:00.0000] <Hixie>
ah

[15:30:01.0000] <Hixie>
k

[15:30:03.0000] <jamesr__>
it'll be added back when somebody (1) writes down what it is supposed to do and then (2) writes code that does that

[15:30:14.0000] <jamesr__>
(1)'s never really happened so it's pretty hard to have good code around

[15:30:22.0000] <Hixie>
/me nods

[15:31:03.0000] <jamesr__>
i think a mozilla intern was starting on it but didn't make it all the way. it's a worthwhile thing in a very long list of worthwhile things to pursue


2014-07-11
[00:44:47.0000] <Ms2ger>
"Revive E4X as EXQO with extended SAX as Methods!!!!!"

[00:53:20.0000] <jgraham>
/me worries for Ms2ger's sanity

[00:53:44.0000] <Ms2ger>
You and me both

[02:55:40.0000] <MikeSmith>
SAX is so good it doesn'T need to be extended

[02:56:54.0000] <jgraham>
/me wonders if MikeSmith is being held hostage by XML terrorists

[02:57:15.0000] <MikeSmith>
tee hhee

[02:57:31.0000] <MikeSmith>
stockholm syndrome

[02:59:43.0000] <MikeSmith>
http://instagram.com/p/JzmkwQCr7y/

[03:02:24.0000] <Ms2ger>
MikeSmith, not sure that's a think one'd like to be called

[03:08:28.0000] <MikeSmith>
yeah that's what makes it even better

[03:10:16.0000] <Ms2ger>
A think?

[03:10:24.0000] <Ms2ger>
/me blames XML

[03:11:32.0000] <MikeSmith>
if it'd been HTML it would have error-recovered from that for you automatically

[03:16:43.0000] <jgraham>
I really can't work out if "the ascii of the future" is supposed to be a compliment or not

[03:37:26.0000] <hsivonen>
MikeSmith: I've redeployed validator.nu, despite it being a bad idea right before heading out of office for a couple of weeks

[03:40:49.0000] <hsivonen>
TabAtkins: thanks for Python map() advice

[03:41:22.0000] <hsivonen>
MikeSmith: I landed a quick map/lambda hack to paper over the shell script generation bug without correctly fixing all possible future cases

[03:41:26.0000] <hsivonen>
(bad, I know)

[03:41:59.0000] <hsivonen>
MikeSmith: if in the future we want a command line switch that both contains a space and requires shell variable expansions, things will break again

[03:43:52.0000] <MikeSmith>
hsivonen: thanks much man

[03:44:24.0000] <MikeSmith>
hsivonen: I'll try not to add any new switches to the script at all. We got plenty already

[03:47:00.0000] <MikeSmith>
hsivonen: the ones I've added are of marginal benefit anyway. They're mostly just there to allow some things for the W3C service to be slightly different. e.g., the space thing was caused by me adding a switch to allow the UA string to contain a URL for page that explains what the validator is

[03:48:17.0000] <MikeSmith>
hsivonen: some sites admins, otherwise not knowing what the validator is, send us complaints about it violating robots.txt and things, or even blocking it

[03:49:25.0000] <MikeSmith>
hsivonen: anyway, thanks again -- I appreciate it

[07:09:27.0000] <smaug____>
what does "Let form document be the form's Document." mean ?

[07:09:37.0000] <smaug____>
is that ownerDocument?

[07:19:15.0000] <smaug____>
Hixie: am I interpreting the spec correctly, and that means ownerDocument ?

[07:19:40.0000] <smaug____>
"The Document of a Node (such as an element) is the Document that the Node's ownerDocument IDL attribute returns."

[07:29:15.0000] <Ms2ger>
Yep

[07:34:15.0000] <smaug____>
and browsers behave differently there

[08:49:02.0000] <Hixie>
smaug____: yeah

[08:51:31.0000] <smaug____>
Hixie: what about "the Document object with which subject in question is associated."

[08:51:39.0000] <smaug____>
in hyperlink handling

[08:51:49.0000] <smaug____>
that Document is also ownerDocument?

[08:51:53.0000] <Hixie>
associated usually means something else

[08:51:56.0000] <Hixie>
let me see

[08:52:53.0000] <Hixie>
looks like in this case it's just ownerDocument, yeah

[08:52:59.0000] <Hixie>
that could probably be phrased more obviously

[08:53:06.0000] <Hixie>
actually all of this stuff probably could be better phrased now

[08:53:15.0000] <Hixie>
at the time it was written, ownerDocument wasn't formally specced

[08:53:27.0000] <Hixie>
but now we have anne's dom spec, it might be easier to reference it

[08:53:50.0000] <Hixie>
ah, yeah, the dom spec now defines "the node document"

[08:53:57.0000] <smaug____>
looks like browsers handle this kind of cases in different ways

[08:54:13.0000] <smaug____>
blink doesn't care whether element is in doc, but gecko and trident do

[08:54:15.0000] <Hixie>
i should just change all of this stuff to just refer directly to "node document" instead of the round-about way i had to use before

[08:55:00.0000] <Hixie>
the spec doesn't care, does it? whether the element is in a doc or not?

[08:55:15.0000] <Hixie>
for following hyperlinks, i mean

[08:55:23.0000] <smaug____>
what I'm starting to do is to go through this stuff and think how it should work in shadow dom

[08:55:36.0000] <smaug____>
Hixie: right. and I think that is probably wrong

[08:55:42.0000] <Hixie>
why?

[08:55:52.0000] <Hixie>
security, compat?

[08:55:55.0000] <Hixie>
something else?

[08:56:00.0000] <smaug____>
something else

[08:56:13.0000] <smaug____>
saner behavior

[08:56:32.0000] <smaug____>
but probably doesn't matter much

[08:58:01.0000] <bkardell__>
Hixie: You around?

[08:58:07.0000] <Ms2ger>
/me grumbles

[08:58:32.0000] <Hixie>
smaug____: i think for some things (form submission in particular, also audio playback, img loading) we have a compat need to handle it while it's not actually in a doc, so for consistency we probably shouldn't artificially check it elsewhere

[08:58:36.0000] <Hixie>
bkardell__: 'sup

[08:58:52.0000] <smaug____>
form submission doesn't work in Gecko and Trident when not in doc

[08:58:53.0000] <Hixie>
smaug____: (i filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=26310 btw)

[08:58:56.0000] <smaug____>
so no compat

[08:58:58.0000] <bkardell__>
Hixie: Trying to figure out which list to even send this question to man...

[08:59:05.0000] <bkardell__>
Hixie: Have a look at this https://gist.githubusercontent.com/bkardell/7da8ba03e690f2c24503/raw/ccbd20fc406f3158b0c616770e4bed1e956ce019/mutationobserverquestion.html

[08:59:15.0000] <Hixie>
smaug____: really? i thought we just found there was a compat need for something like that, when doing the rAc stuff.

[08:59:35.0000] <bkardell__>
Hixie: Whoops, running with mime type https://rawgit.com/bkardell/7da8ba03e690f2c24503/raw/ccbd20fc406f3158b0c616770e4bed1e956ce019/mutationobserverquestion.html

[09:00:14.0000] <smaug____>
http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/HTMLFormElement.cpp#1595

[09:00:15.0000] <bkardell__>
Hixie: The question is - a) shouldn't that output the same in all browsers b) what is under-specified or buggy in existing if do

[09:00:26.0000] <bkardell__>
s/do/so

[09:00:47.0000] <Hixie>
smaug____: huh

[09:00:58.0000] <Hixie>
smaug____: well anyway, the other cases stand

[09:01:42.0000] <smaug____>
I could buy that consistency argument

[09:02:12.0000] <Hixie>
bkardell__: if it's a mutation observer question, probably whatwg⊙wo, cc anne

[09:02:56.0000] <bkardell__>
Hixie: yeah, anne was suggesting maybe it was about pasing... maybe still best to send to the list

[09:03:09.0000] <bkardell__>
Hixie: just trying to shortcut list confusion

[09:03:20.0000] <Hixie>
bkardell__: pasing?

[09:03:31.0000] <bkardell__>
s/pasing/parsing :)

[09:03:35.0000] <smaug____>
bkardell__: note, Gecko's behavior changed recently

[09:03:37.0000] <Hixie>
bkardell__: oh

[09:03:45.0000] <Hixie>
bkardell__: /me looks closer

[09:03:58.0000] <smaug____>
bkardell__: though, I assume you're testing with latest versions

[09:04:03.0000] <smaug____>
not release versions

[09:04:15.0000] <Hixie>
bkardell__: oh if you're getting mutation observers during parsing, you can't guarantee that you'll get the same thing even in the same browser

[09:04:20.0000] <bkardell__>
smaug___: Checking in release versions

[09:04:24.0000] <Hixie>
bkardell__: it depends on TCP packet boundaries, amongst other things

[09:04:29.0000] <smaug____>
bkardell__: not useful

[09:04:54.0000] <bkardell__>
Hixie: why not?  The way the test is constructed, there shouldn't be major variation, right?

[09:05:17.0000] <smaug____>
but yeah, packet boundaries may affect to characterData records

[09:06:18.0000] <Hixie>
bkardell__: e.g. at the simplest level, if one load gets an event loop spin (e.g. because the data was split into two packets and it only got the first packet) half way through the </h1> being parsed, and a second load does it all as one task, then the first will fire the mutation observers as two microtasks (at least), and the second will fire them as one.

[09:06:52.0000] <Ms2ger>
TIL: treatment of img@hspace is not interoperable

[09:07:12.0000] <bkardell__>
Hixie: Ok, I'll buy that for character data, but for element nodes they should be the same, yes?

[09:07:52.0000] <bkardell__>
smaug___: what do you see for type 1 nodes in latest FF?

[09:07:59.0000] <Hixie>
bkardell__: well at the very minimum they'll be fired with different microtask timings

[09:08:39.0000] <bkardell__>
Hixie__: the test doesn't really involve timings though, right?  I mean, ignore text nodes in the output...

[09:09:35.0000] <smaug____>
bkardell__: FF has one characterData which chromium apparently doesn't have

[09:09:37.0000] <Hixie>
bkardell__: i don't really understand the test output

[09:09:52.0000] <smaug____>
(I don't understand those numbers under childList, but they are the same in FF and Chr)

[09:11:06.0000] <bkardell__>
childlist contains a count of nodeType for each addedNode

[09:11:09.0000] <Hixie>
bkardell__: the parser can result in observably different results because of timings, but the end result DOM should be the same. If the question is about timings, then the parser might be relevant. If the question is about the end-result, then that's probably a DOM question, not a parser question.

[09:11:15.0000] <bkardell__>
the source is pretty simple, fits on a visible screen

[09:12:23.0000] <zcorpan>
hsivonen: MikeSmith: validator.nu/?doc=http%3A%2F%2Fscottjehl.github.io%2Fpicturefill%2F&showsource=yes gives an internal error

[09:12:23.0000] <bkardell__>
smaug___: Let me check nightly

[09:12:27.0000] <Hixie>
bkardell__: you're assuming one understands the mutation observer API enough to understand the test :-)

[09:12:41.0000] <MikeSmith>
zcorpan: yeah checking on it now

[09:16:26.0000] <bkardell__>
smaug___: excellent, right!  nightly is matching!

[09:16:36.0000] <bkardell__>
/me does a happy dance

[09:17:34.0000] <gsnedders>
I'm being such a stereotypical PL guy. "Let's just use SML!"

[09:20:05.0000] <bkardell__>
smaug___: any thoughts on why safari works fine for me with that test only if devtools are open? ever heard of that?

[09:20:41.0000] <Hixie>
well bummer

[09:20:58.0000] <smaug____>
no idea. I haven't used Safari for ages

[09:21:02.0000] <Hixie>
i added some checks to catch cases where the dev version of the spec referenced terms not defined in the dev version of the spec

[09:21:31.0000] <Hixie>
i fixed one, then made it tell me the total count, not just one at a time, and it found 3999 more occurrences.

[09:21:39.0000] <bkardell__>
hober: You here?

[09:32:24.0000] <MikeSmith>
zcorpan: found the cause but not going to get it fixed until another hour or so at least. Hope hsivonen will be able to re-redeploy before he needs to head away

[09:34:19.0000] <Ms2ger>
Hm

[09:34:40.0000] <Ms2ger>
If I do margin-top: 50%, what is that based off? Width?

[09:34:53.0000] <zcorpan>
yes

[09:35:39.0000] <Ms2ger>
Ta

[09:36:31.0000] <Ms2ger>
Do I need a link if my reftest files are called foo.html/foo-ref.html in wpt?

[09:36:57.0000] <jgraham>
Ms2ger: In theory, no

[09:37:08.0000] <Ms2ger>
In practice?

[09:37:26.0000] <jgraham>
But if the ref is reusable it's encouraged to use <link> to a standard file rather than -ref

[09:37:32.0000] <Ms2ger>
Not really

[09:37:38.0000] <bkardell__>
smaug___: When is that stuff supposed to land in release?

[09:37:47.0000] <jgraham>
Ms2ger: Can you make it reusable?

[09:38:36.0000] <Ms2ger>
Hmm, maybe I could reuse it

[09:38:39.0000] <Ms2ger>
Alright

[09:39:10.0000] <Ms2ger>
Or not really, actually

[10:55:26.0000] <MikeSmit1>
hsivonen: I just pushed a fix to the build repo. Without it, the <picture> checker will fail with a non-document "Oops" internal error. If you have time to re-reploy before you have to head away, great. If not, it can wait til you're back.

[10:55:51.0000] <MikeSmit1>
hsivonen: sorry for not having been more careful

[10:58:49.0000] <MikeSmit1>
zcorpan: thanks for the heads-up. I fixed the cause and http://qa-dev.w3.org:8888/?doc=http%3A%2F%2Fw3c-test.org%2Fconformance-checkers%2Fhtml%2Felements%2Fpicture%2Fpicture-isvalid.html is built and running from the source trunk

[10:59:57.0000] <MikeSmit1>
zcorpan: But for now the <picture> support is currently broken at both v.nu & h5.v.nu and the W3C validator in the same way

[11:01:25.0000] <MikeSmit1>
zcorpan: and I'm going to leave it that way at the W3C validator until hsivonen is able to re-deploy too. Which may not be until 2 weeks from now

[11:02:27.0000] <MikeSmit1>
and now I need to board yet another plane without wifi

[11:02:47.0000] <MikeSmit1>
back around in 15 or so hours

[12:29:41.0000] <zcorpan>
MikeSmit1: k

[12:35:44.0000] <smaug____>
dglazkov_: what does "Window object named properties [HTML] must access the nodes in the document tree." mean in shadow dom spec

[12:35:54.0000] <smaug____>
doesn't seem to belong to that spec at all

[13:45:25.0000] <gsnedders>
jgraham: wow, you appeared around html5lib, I am amaze ;P

[13:50:27.0000] <jgraham>
gsnedders: Well it wasn't an insanly complex PR

[14:49:52.0000] <smaug____>
dglazkov_: is iframe supposed to work in shadow dom ?

[14:50:13.0000] <gsnedders>
jgraham: I dunno, it's not the most elegent of code, but that's Py2 as it's defined, le sigh

[14:53:26.0000] <smaug____>
per spec no

[14:53:40.0000] <smaug____>
interestingly chrome actually loads the iframe content but doesn't render it

[14:54:03.0000] <smaug____>
h, hmm

[14:54:22.0000] <smaug____>
ah, yes, it does render it

[14:54:25.0000] <smaug____>
but that is a bug

[14:55:11.0000] <smaug____>
Hixie: "the furthest ancestor element node" doesn't mean anything cross shadom-DOM boundaries, right?

[15:02:12.0000] <TabAtkins>
smaug____: Do you mean "how does iframe work when it has a shadow root"?

[15:02:53.0000] <TabAtkins>
smaug____: And I believe any algorithm that look at the ancestor list should cross shadow boundaries and walk up the composed tree automatically.

[15:03:14.0000] <smaug____>
why?

[15:03:21.0000] <smaug____>
I mean per what spec?

[15:04:29.0000] <smaug____>
(I could agree iframe should load, but so far I haven't found any spec which says that)

[15:10:16.0000] <Hixie>
smaug____: no idea

[15:10:27.0000] <Hixie>
smaug____: i haven't updated any of my specs to handle shadow trees yet

[15:10:53.0000] <smaug____>
right, so what is implemented in blink is somewhat random

[15:11:15.0000] <TabAtkins>
smaug____: Unsure which of my comments your question is in response to.

[15:11:51.0000] <smaug____>
TabAtkins: to your comment "And I believe any algorithm that look at the ancestor list should cross shadow boundaries and walk up the composed tree automatically."

[15:12:45.0000] <TabAtkins>
Ah, kk.  That's my personal belief, not one based on a spec ref. ^_^ But if the Shadow DOM spec doesn't define that, it should; for example, form elements inside of shadow DOM should be submitted when placed in an external <form>.

[15:12:47.0000] <smaug____>
hmm, how should session history work in case there are iframes in shadow dom (assuming those actually load something)

[15:13:20.0000] <smaug____>
TabAtkins: whaat? form elements should be submitted in that case?

[15:14:20.0000] <smaug____>
that is surprising

[15:15:13.0000] <smaug____>
if one just used radio buttons in shadow dom for some UI stuff, their value might get submitted accidentally

[15:15:52.0000] <Hixie>
yeah i don't think it's as simple as just everything should work like if it was one tree

[15:15:53.0000] <smaug____>
it should definitely be opt-in behavior to let data to leak out from the shadow dom in such case

[15:15:59.0000] <Hixie>
i think it probably needs to depend on the binding

[15:27:18.0000] <TabAtkins>
smaug____: Hm, valid point.

[15:28:07.0000] <TabAtkins>
Domenic: I've got a super-class that's not meant to be used; it's just a holder for default implementations of methods, as it's designed to be extended.  Should I have its constructor throw, or produce a valid-but-useless object?

[15:28:55.0000] <TabAtkins>
Domenic: (Specifically, I'm defining a set of XXXColor classes for CSS, and have a CSSColor superclass over them. If the constructor should really work, it'll just return an object that represents transparent black, with no way to manipulate it.)

[15:30:44.0000] <TabAtkins>
Also, I'm using WebIDL to define the shape of these interfaces, but defining most of the methods by just saying "here's the JS implementation", which is interesting.

[15:32:42.0000] <Hixie>
i'd just not define a constructor

[15:32:53.0000] <TabAtkins>
Gotta have something there.

[15:33:15.0000] <TabAtkins>
I forget what happens if you don't define a constructor.

[15:33:35.0000] <Hixie>
in webidl, if you don't set a [Constructor], you just don't get one

[15:33:39.0000] <Domenic>
It defines a throwing constructor

[15:34:53.0000] <Domenic>
TabAtkins: if you can make the throwing constructor work in a JS polyfill without mega-hacks, then that might be best... but I think that breaks inheritance

[15:35:24.0000] <Domenic>
(by mega-hacks, I mean a constructor that doesn't throw when you pass it an unguessable secret, which all the subclasses know)

[15:35:35.0000] <TabAtkins>
Domenic: Why is that necessary?

[15:35:44.0000] <Domenic>
TabAtkins: why is what necessary?

[15:35:59.0000] <TabAtkins>
Allowing the subclasses to construct an instance of the superclass?

[15:36:21.0000] <Domenic>
TabAtkins: if the superclass has any internal state at all, then you need to call super() in the subclass constructor to initialize it

[15:36:32.0000] <Hixie>
not necessarily

[15:36:39.0000] <Hixie>
you could call an internal init() method, e.g.

[15:36:45.0000] <TabAtkins>
It doesn't have any.  The interface is just some methods, and some static stuff hanging off of it.

[15:37:00.0000] <Domenic>
TabAtkins: nice, then I think throwing constructor is pretty sound

[15:37:09.0000] <TabAtkins>
Okay, cool.

[15:37:50.0000] <TabAtkins>
(It has a semi-constructor that takes a string and returns one of its subclasses, but that's exposed as a static method on the interface instead.)

[15:38:09.0000] <Hixie>
(i mean, Object has some internal state, and yet it's still fine for subclasses to throw even if they then have further subclasses that don't throw)

[15:38:11.0000] <Domenic>
TabAtkins: as long as it can be JS polyfilled I am happy, even if it's a bit unusual.

[15:38:17.0000] <Domenic>
Hixie: Object has no internal state

[15:38:30.0000] <Domenic>
Hixie: but I think you are right that an internal init() method would probably work

[15:38:30.0000] <Hixie>
Object has quite a lot of internal state :-)

[15:38:44.0000] <TabAtkins>
Usually when I use a useless superclass, I just give its constructor an empty body and don't worry about it, becasue I know I'm not going to try and construct it. ^_^

[15:38:59.0000] <TabAtkins>
But I gotta handle authors doing weird stuff.

[15:39:08.0000] <Domenic>
It would be nice if we had mixins in some first-class way

[15:39:10.0000] <TabAtkins>
So I was just wondering which style is more idiomatic - throwing, or dumb object.

[15:39:15.0000] <TabAtkins>
Yes.  Yes it would be.

[15:39:29.0000] <TabAtkins>
That's all I'm using the stupid thing for, after all.

[15:39:46.0000] <Domenic>
WebIDL implements/ES7 Object.mixin would not allow monkeypatching the mixin and getting those changes shared by all mix-targets

[15:39:57.0000] <TabAtkins>
Yeah.

[15:40:42.0000] <TabAtkins>
And allowing monkeypatching is precisely why I'm structuring these things the way I am.

[15:41:26.0000] <Domenic>
(the problem i usually have with throwing constructors is that instances of them somehow exist. but that is not what is going on here.)

[15:42:06.0000] <TabAtkins>
Right.

[15:42:27.0000] <TabAtkins>
Unless there's some voodoo I'm not thinking of, there's no way to actually get a CSSColor object.

[15:42:44.0000] <TabAtkins>
Reflection wouldn't allow that, would it?

[15:43:04.0000] <Domenic>
Nah, I can't see how

[15:43:18.0000] <TabAtkins>
Oh wait, damnit, this isn't the name I wanted. I was going to go with RGBACompatibleColor.

[15:43:21.0000] <Domenic>
They would have to be exposed through APIs in your specs

[15:44:14.0000] <Domenic>
Wait... OK this is just a thought experiment, but...

[15:44:26.0000] <Domenic>
You could define RGBACCPrototype = { ...methods... }

[15:44:35.0000] <Domenic>
then inherit from that object directly

[15:44:58.0000] <Domenic>
Instead of defining function RGBACC () { throw new TypeError; }; RGBACC.prototype = { ... methods ... }

[15:45:03.0000] <Domenic>
Ah, you lose static methods though

[15:45:05.0000] <TabAtkins>
I need an RGBACC itself, though, to hang some static methods off of.

[15:45:06.0000] <TabAtkins>
Yeah.

[15:45:39.0000] <Domenic>
And... that pattern (proto-only) is getting very far from idiomatic.

[15:47:01.0000] <TabAtkins>
Might be interesting to make this pattern more explicit in IDL with "abstract interface ...", which fails syntax checking if there are any non-static attributes, or any constructors, and which is prohibited to be constructed by specs.

[15:47:31.0000] <TabAtkins>
(You'd still be able to use it in IDL itself, to denote an attribute/method that takes/returns any subclass of the interface.)

[15:48:15.0000] <TabAtkins>
(Or maybe prohibit it from being used directly, and add another syntax construct like "subclass<AbstractFoo>" that must be used by attributes/methods.)

[15:48:34.0000] <TabAtkins>
(Where subclass<XXX> is only valid when XXX is an abstract interface.)

[15:49:01.0000] <TabAtkins>
Unsure if worthwhile, but capturing relatively complex idioms that we want to use consistently is what WebIDL is for.

[15:49:20.0000] <Hixie>
why would non-static attributes be not ok in an abstract interface?

[15:49:37.0000] <TabAtkins>
Because that implies there's state on an instance, but there are no instances, by definition.

[15:49:52.0000] <Hixie>
i mean, fundamentally, "interface" really means "abstract class". WebIDL doesn't have a "class" concept.

[15:49:59.0000] <TabAtkins>
And putting data attributes on a prototype is bad practice.

[15:50:10.0000] <Hixie>
Node has plenty of attributes

[15:50:12.0000] <TabAtkins>
WebIDL's "interface" is JS's "class".

[15:50:14.0000] <Hixie>
i don't think that's bad practice

[15:50:18.0000] <TabAtkins>
I know. It's bad practice. ^_^

[15:50:29.0000] <zewt>
i find distinguishing "interface" from "class with virtual methods" to be a meaningless java-ism

[15:50:42.0000] <Hixie>
nah, Node isn't bad practice

[15:50:49.0000] <Hixie>
at least, not that part of it

[15:50:55.0000] <Hixie>
it's a quite sensible API

[15:51:01.0000] <TabAtkins>
If a data property is on a prototype, setting the property actually sets it on the prototype, changing it for *every instance*.  That's almost never what you want.

[15:51:05.0000] <Hixie>
an attribute is fundamentally no different than a method

[15:51:08.0000] <zewt>
i think the underlying reason java has it is to avoid issues like diamond inheritance, but there are better solutions to that

[15:51:13.0000] <TabAtkins>
And if it is, you can explicitly say so with a getter/setter pair.

[15:51:25.0000] <Hixie>
there's no difference between getter/setter pairs and data attributes in webidl

[15:51:30.0000] <TabAtkins>
Hixie: The "fundamental" difference is that you don't set methods regularly.

[15:51:47.0000] <Hixie>
setFoo()/getFoo() is equivalent to "attribute foo"

[15:51:56.0000] <TabAtkins>
Hixie: Technically, sure, but that's just because the getter/setter pair handle typechecking for you.

[15:53:12.0000] <TabAtkins>
Hm, I guess they always set the value on the instance, though.  (Or set hidden state on the instance, which is the same thing here.)

[15:53:21.0000] <TabAtkins>
So maybe it's not actually terrible.

[15:54:28.0000] <TabAtkins>
But still, making the constructor automatically throw with a standard message, and preventing accidentally using the interface directly in other things (thus making it less likely the spec author absentmindedly constructs an instance in prose) might be helpful.

[15:56:32.0000] <Hixie>
[NoInterfaceObject] is the usual way to prevent that kind of mistake

[15:56:47.0000] <TabAtkins>
That prevents you from hanging static things off the interface.

[15:57:09.0000] <TabAtkins>
And doesn't prevent the mistake at all - prose can still construct a [NoInterfaceObject] object.

[15:57:26.0000] <TabAtkins>
The constructor just isn't present on the global.

[15:57:53.0000] <Hixie>
oh, from prose

[15:58:09.0000] <Hixie>
yeah, dunno what's a good way to prevent that kind of mistake

[15:58:23.0000] <Hixie>
whatever you put in the spec, other spec writers have a tendency to think their case is special :-)

[15:58:27.0000] <Hixie>
(i include myself in this!)

[16:00:01.0000] <Domenic>
TabAtkins: seems like a reasonable thing, although I'd like a couple more use cases first.

[16:00:18.0000] <TabAtkins>
Domenic: Yeah, it's a use-case-count of 1 right now, which is too small to generalize from safely.

[16:00:26.0000] <TabAtkins>
Gotta hit 3 before it's reasonable. ^_^

[16:06:30.0000] <zewt>
putting empty <img> blocks on top of images to break copy image location is the modern-day equivalent of alert("right click is not supported")

[16:20:04.0000] <Domenic>
oooh, that's evil, i've never seen it before

[16:21:30.0000] <zewt>
others put images in css background-images for the same reason

[16:22:02.0000] <zewt>
(there are valid reasons to do that, but often it's just to make it harder to get the image url)


2014-07-12
[19:46:16.0000] <Krinkle>
Hm.. where is the spec for document.cookie / HTMLDocument#cookie ?

[19:46:28.0000] <Krinkle>
MDN links to an old version in the HTML 2 spec on w3.org but can't find much else

[19:46:33.0000] <Krinkle>
http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-8747038

[19:46:51.0000] <Krinkle>
seems neither html/c nor dom.spec contains any reference to it

[19:47:59.0000] <Krinkle>
github search brought up https://github.com/whatwg/html-differences/blob/1f8778b1e26d98ae1de62ca7e99201c1d90a6a44/Overview.src.html#L3129

[22:39:05.0000] <Hixie>
Krinkle|detached: http://www.whatwg.org/html#dom-document-cookie

[22:49:59.0000] <Domenic>
Someone needs to scrub MDN hard…

[02:50:48.0000] <MikeSmith>
 /win 17

[03:37:48.0000] <Krinkle>
Hixie: thanks

[03:47:32.0000] <Ms2ger>
Domenic, you could be the MDN scrubber

[10:29:43.0000] <zewt>
something that never gets old: squinting at a page for five minutes to figure out where some mysterious 4 pixels of padding is coming from

[11:56:42.0000] <SamB>
hmm, http://amjith.blogspot.com/2007/07/visual-diff-tools-in-linux.html does not contain any actual content

[11:57:21.0000] <SamB>
just a bunch of divs and some CSS (I think there was some actual CSS in there somewhere) and some scripts ...

[11:58:11.0000] <SamB>
and even when I turn on JS, I still don't get to the entry in question

[11:58:34.0000] <SamB>
/me wonders if they did the same thing to his blog; if so, he thinks it's time to move it elsewhere ...

[11:58:35.0000] <caitp>
using what, netsurf?

[11:58:55.0000] <SamB>
caitp: I had noscript on to start with

[11:59:16.0000] <SamB>
also I *hate* endless scrolling

[11:59:18.0000] <caitp>
but after enabling scripts you still can't see content? huh

[11:59:37.0000] <SamB>
there's content, but I did not land at the content I would expect for that URL

[12:00:59.0000] <SamB>
but I really hate gratuitously web-1.0-incompatible sites as well as (mandatory) endless scrolling

[12:03:16.0000] <SamB>
thankfully, the wayback machine is working :-)

[12:03:43.0000] <SamB>
(and broken links, I hate broken links too)

[12:06:42.0000] <SamB>
/me edits the link on unix.SE to point at a web.archive.org snapshot ...

[12:09:38.0000] <caitp>
you should put the "bad" one in rubytext or something

[12:45:54.0000] <IZh>
Hi! What is the subdfn attribute of <code>. There are lots of in in the spec now. A validator complains.

[12:53:30.0000] <Ms2ger>
The HTML spec?

[12:53:37.0000] <Ms2ger>
Probably a bug in Hixie's new pipeline

[12:53:56.0000] <IZh>
Ms2ger: Yes.

[12:54:37.0000] <IZh>
And what is the w-nodev attribute of the spans and links?

[12:54:47.0000] <Ms2ger>
Same

[12:55:12.0000] <IZh>
There are about hundred of them.

[12:55:32.0000] <caitp>
one hundred happy accidents is better than zero happy accidents

[16:13:57.0000] <Hixie>
hm, there shouldn't be any w-nodev attributes, i thought i filtered those out

[16:14:06.0000] <Hixie>
i did forget to filter out the subdfn ones though...


2014-07-13
[00:12:14.0000] <yanni>
Hi

[10:11:49.0000] <Hixie>
zcorpan: ping

[11:04:02.0000] <zcorpan>
Hixie: pong

[11:32:17.0000] <Krinkle>
The accessKeyLabel specification does not explicitly state that the node needs to be attached in the document root for the property to resolve.

[11:32:19.0000] <Krinkle>
It seems in Firefox it remains an empty string until attached.

[11:32:21.0000] <Krinkle>
http://jsfiddle.net/R3fNY/

[11:32:23.0000] <Krinkle>
Does that seem sensible? I'd like to have it changed.

[11:32:27.0000] <Krinkle>
So that e.g. a library using this doesn't have to special-case anything that uses this to after insertion of the widget.

[11:32:40.0000] <Krinkle>
Wikipedia software embeds this (when available) in the title attribute like "caption [ctrl-e]"

[11:33:12.0000] <Krinkle>
We're hoping to phase out the ugly logic that currently infers the keyboard shortcut for accesskeys on all browsers using essentially UA sniffing.

[11:36:08.0000] <Krinkle>
Down stream : https://bugzilla.wikimedia.org/show_bug.cgi?id=67946 ; Mozilla: https://bugzilla.mozilla.org/show_bug.cgi?id=583533

[11:36:28.0000] <Krinkle>
I can file a proper bug but would be nice to know whether It'll be backed up by whatwg.

[11:40:09.0000] <Ms2ger>
CC me on the Mozilla bug, please. Ms2ger⊙gc

[11:41:22.0000] <Hixie>
Krinkle: looking...

[11:42:55.0000] <Hixie>
Krinkle: yeah, it does indeed appear that accesskey="" is defined to be assigned regardless of the element being in the doc

[11:43:06.0000] <Hixie>
Krinkle: i could go either way on this, fwiw, if the browsers disagree

[11:43:18.0000] <Krinkle>
Firefox is the first one to have implemented it

[11:43:29.0000] <Krinkle>
I've been waiting for WebKit  for years

[11:43:33.0000] <Krinkle>
I filed a Chromium ticket today

[11:43:58.0000] <Krinkle>
I'm checking Aurora just in case, and will file a mozilla bug after with you two on CC?

[11:48:38.0000] <Krinkle>
Hixie: https://bugzilla.mozilla.org/show_bug.cgi?id=1037990

[11:51:05.0000] <Hixie>
Krinkle: k

[11:51:23.0000] <Hixie>
Krinkle: keep me posted, especially if the browser vendors have a reason for not wanting to pre-assign the access keys before the element is in the document

[11:51:33.0000] <Krinkle>
Yeah

[11:51:52.0000] <Krinkle>
Seems to be going really slow though.

[11:52:46.0000] <Krinkle>
I mean, Wikipedia editors use accesskeys so much and while you tend to know them once you're used to them, I really want to get rid of this code

[11:52:47.0000] <Krinkle>
https://github.com/wikimedia/mediawiki-core/blob/bc725806ac301baa92b7ff61d958be577e514a0b/resources/src/jquery/jquery.accessKeyLabel.js#L27-L74

[13:36:43.0000] <SimonSapin_>
When a test https://github.com/w3c/web-platform-tests does not seem to match the spec, should I file a bug on that repo or on the spec? (The bug could be in the spec as well as in the test)

[13:36:59.0000] <SimonSapin_>
jgraham: ^

[13:42:05.0000] <caitp>
depends

[13:42:18.0000] <caitp>
sometimes the test is wrong, sometimes the spec isn't clear, sometimes both

[13:42:32.0000] <caitp>
probably quite often both

[13:46:01.0000] <gsnedders>
SimonSapin: I'd file a bug on the test first

[13:46:10.0000] <gsnedders>
and see if anyone claims the test is right :P

[13:48:26.0000] <SimonSapin>
There are test for IPv4 normalization (from octal or hex, with less than four pieces) but the spec does not mention that. https://github.com/w3c/web-platform-tests/issues/1104

[13:48:35.0000] <SimonSapin>
… in URL parsing

[13:54:11.0000] <jgraham>
SimonSapin: Ask zcorpan I guess

[13:54:20.0000] <jgraham>
But file a bug on the test

[13:55:19.0000] <SimonSapin>
jgraham: that’s on https://github.com/w3c/web-platform-tests/issues/ , right?

[13:59:10.0000] <caitp>
from what I've seen, a lot of the tests (for older specs in particular) seem to have either been ported directly from browser tests, or have been heavily influenced by a particular browser's implementation, and don't necessarily assert anything specified anywhere normative

[14:00:53.0000] <caitp>
maybe "a lot" is too strong, but a few

[14:14:26.0000] <jgraham>
SimonSapin: Yeah

[14:14:30.0000] <jgraham>
caitp: Examples?

[14:15:53.0000] <SimonSapin>
jgraham: https://github.com/w3c/web-platform-tests/pull/771/files comes from webkit

[14:16:34.0000] <SimonSapin>
and tests behavior that’s not in the spec

[14:25:32.0000] <caitp>
jgraham, some of the xhr tests, I raised an issue about one of them which I'm not sure has been resolved yet

[14:26:02.0000] <caitp>
basically asserting something which isn't said anywhere in the IETF or WHATWG, far as I can tell

[14:26:59.0000] <caitp>
i'm sure there are other examples, but i've only spent any time poking through the XHR tests so far

[14:37:32.0000] <jgraham>
Well you mainly need to talk to hallvors about that

[14:38:07.0000] <jgraham>
But actually XHR has an unusually large number of tests that were written especially for the testsuite

[14:40:12.0000] <caitp>
https://github.com/w3c/web-platform-tests/issues/980 is interesting, because Chromium (along with webkit/safari and IE) will send a content-length of 0 for HEAD requests, for a reason which is explained in a comment in chrome's source, so I think Firefox is the only mainstream browser that actually passes that test

[14:40:50.0000] <caitp>
but none of the HTTP rfcs or anything from the XHR spec say anything about this whatsoever, I spent a good while looking =P

[14:41:08.0000] <caitp>
and, it's only the only such case, there are a few others I ran into a while ago

[14:42:07.0000] <caitp>
so from my perspective it seems like someone either copy/pasted a test from gecko, or was just looking at the gecko implementation and writing tests based on that, rather than based on the spec itself

[14:51:42.0000] <MikeSmith>
SimonSapin: yeah I think all those PR #771 tests came from webkit. I guess I wrongly assumed they were actually testing requirements in a spec.

[14:53:26.0000] <MikeSmith>
SimonSapin: Santiago Mola uses them as part of the test suite for galimatias, so I assume galimatias pass those tests. But I don't know whether that's because he implemented something according a particular spec, or whether he implemented something in order to pass those tests.

[15:05:00.0000] <jgraham>
caitp: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13 seems pretty specific. I haven't checked the updates.

[15:06:14.0000] <caitp>
there's nothing in any of those RFCs which says anything like "a client MUST not send an entity body if the request method is HEAD or GET"

[15:06:40.0000] <caitp>
at best there's a "should not", or "probably not a good idea"

[15:06:42.0000] <gsnedders>
I thought one the httpbis things changed that?

[15:07:14.0000] <caitp>
but if it weren't a good idea, the big 3 browsers would probably be thoroughly broken any time anyone ever wanted to send a HEAD request

[15:09:21.0000] <caitp>
basically http just doesn't care if there's a payload or not

[15:09:37.0000] <caitp>
http doesn't care, and xhr doesn't care, so it's not clear why we're making any assertion in the first place

[15:10:36.0000] <jgraham>
caitp: Anyway what zcorpan says in that bug is right

[15:10:46.0000] <jgraham>
The goal is to get interop

[15:10:55.0000] <caitp>
yes, I agree with that

[15:11:07.0000] <caitp>
but my position is still that we should be testing compliance with the spec

[15:11:18.0000] <caitp>
not with a particular implementation

[15:11:19.0000] <jgraham>
In this case it seems like specs are half-assing things and we should just agree what the right behaviour is and get everyone to implement it

[15:11:44.0000] <jgraham>
caitp: We're not

[15:12:01.0000] <jgraham>
You are assuming some sort of malice here when there is none

[15:12:08.0000] <caitp>
oh no no no

[15:12:14.0000] <caitp>
i'm not assuming malice

[15:12:36.0000] <caitp>
it's not "malice", it seems like an honest mistake, like maybe it's testing something that _should_ be specified but isn't

[15:12:57.0000] <caitp>
but regardless, no implementation that I've seen (not tested netsurf, does netsurf even have XHR yet?) passes that test, apart from gecko

[15:14:06.0000] <caitp>
the comment which explains this reasoning for this behaviour in chromium is interesting, I linked to it in either the issue or PR

[15:14:34.0000] <caitp>
http://mxr.mozilla.org/chromium/source/src/net/http/http_network_transaction.cc#866

[15:15:19.0000] <caitp>
when you word the reasoning like that, it's almost a "feature" to send the header

[15:15:21.0000] <jgraham>
Presto passes

[15:15:39.0000] <caitp>
okay, opera might still pass without opera, since it's not blink which breaks this

[15:15:42.0000] <caitp>
er

[15:15:46.0000] <caitp>
opera might still pass without presto*

[15:16:17.0000] <caitp>
not sure if modern opera shares more of the chromium tree or if it's just blink

[15:16:27.0000] <gsnedders>
it's the chromium content api

[15:16:36.0000] <caitp>
ah

[15:16:59.0000] <gsnedders>
(which was why when Blink happened there was no practical choice)

[15:17:43.0000] <caitp>
interesting =)

[15:21:00.0000] <jgraham>
Anyway, I don't think it's reasonable to assume that Blink behaviour is somehow more authorative than Gecko. The only relevant question is "what will everyone agree to implement". If you think gecko should change, file a bug. Or if you think that Blink+etc. should, file bugs there. It seems like there can't be a strong compat. argument either way, so there ought not to be too much resistance to changing. Reality might not be so straightforward.

[15:21:24.0000] <jgraham>
Also yell at the IETF for not specifying anything clear and unambiguous here

[15:21:43.0000] <caitp>
that's not it, per se, i am just not sure it's right to assert things which aren't specified anywhere

[15:22:03.0000] <caitp>
i agree that changing the test to assert for just a falsy content-length request header isn't right

[15:22:44.0000] <caitp>
hmm webkit nightly and ie11 still fail that test, so I guess it's still true

[15:23:20.0000] <jgraham>
I think it's better to have tests and argue about what the result should be than weaken the test just because people have failed to achieve interop

[15:24:03.0000] <gsnedders>
caitp: webkit doesn't have a single network layer, FWIW, depends on port

[15:25:14.0000] <caitp>
if one line of code was changed in a fork of chromium, "chromium would pass", too :p

[15:25:32.0000] <caitp>
but yeah you're right

[15:26:03.0000] <caitp>
primarily referring to http://nightly.webkit.org/, which is basically safari afaict

[15:26:55.0000] <gsnedders>
IIRC it uses the system Safari with a bit of magic

[15:27:02.0000] <gsnedders>
so yeah, that uses NSURL

[15:28:28.0000] <SimonSapin>
MikeSmith: Galimatias does have code for parsing IPv4, but seems to handle none of the funny cases I mentioned in the bug

[15:28:56.0000] <caitp>
anyhow, in the case of that particular issue, I'm not sure it matters a whole lot if browsers behave identically or not. like, the web doesn't care

[15:29:06.0000] <caitp>
so it's just a weird assertion to make

[15:29:25.0000] <caitp>
anyways, time to drop it and make dinner, fun chat \o

[15:30:48.0000] <jgraham>
Every time we decide that poor interop is OK, the web gets a little bit harder to author content for, and other platforms get a little more compelling

[15:31:05.0000] <jgraham>
So it's not a great position to take

[15:33:03.0000] <MikeSmith>
SimonSapin: ok, so yeah, would be good to hear back from smola


2014-07-14
[02:46:58.0000] <Ms2ger>
I guess all the webperf stuff is not exposed in workers?

[03:58:44.0000] <Ms2ger>
Should one expose MouseEvent in workers?

[04:46:03.0000] <satazor>
hey guys

[04:46:41.0000] <satazor>
I'm having an issue with fs.utimes because it is messing with ctime

[04:47:00.0000] <satazor>
is it expected? Or was it expected to change only the mtime & atime as the documentation says?

[04:50:09.0000] <satazor>
oops

[04:50:11.0000] <satazor>
wrong channel

[04:50:13.0000] <satazor>
ahahz

[06:10:44.0000] <JakeA>
If the browser receives "<body>Hello w" is there any way to tell that's an incomplete response vs the server intending to send that?

[06:10:56.0000] <JakeA>
Assuming Content-Length is not to be trusted

[06:11:28.0000] <jgraham>
Content-Length has to be trusted

[06:12:02.0000] <jgraham>
At least in HTTP 1.1

[06:12:20.0000] <jgraham>
In 1.0 you could theoretically rely on the server to close the connection I think

[06:12:35.0000] <JakeA>
So if we get a response longer/shorter than Content-Length, what happens?

[06:13:18.0000] <gsnedders>
shorter you just hang until you timeout

[06:14:17.0000] <gsnedders>
longer is more complex :P

[06:17:13.0000] <JakeA>
Then I shall build a test. Quick, to the local server! *nodejs logo zooms into the screen & back out again*

[06:17:41.0000] <jgraham>
You could build a test that you could submit to web-platform-test, you know

[06:17:56.0000] <jgraham>
Like http://w3c-test.org/http/

[06:19:28.0000] <jgraham>
The test there is a simple "too long" test

[06:19:44.0000] <jgraham>
From when annevk was asking about the same things

[06:24:30.0000] <gsnedders>
JakeA: longer depends on things like whether pipelining support is enabled, IIRC

[06:26:54.0000] <JakeA>
jgraham: Is that documented somewhere, like how to get a local version running for development

[06:28:10.0000] <jgraham>
https://github.com/w3c/web-platform-tests has basic documentation

[06:28:51.0000] <jgraham>
http://wptserve.readthedocs.org/en/latest/ has more detailed server documentation

[06:29:28.0000] <jgraham>
It should all end up on testthewebforward.org, but unfortunately I* need to do quite a bit of infrastructure work on the site to make that happen

[06:29:34.0000] <jgraham>
*Or someone else of course

[07:17:01.0000] <smaug____>
why do we need Fetch API?

[07:34:09.0000] <jgraham>
smaug____: I think it's fair to say we don't *need* it. We might want it though.

[07:34:43.0000] <smaug____>
ok, why do we want it

[07:34:48.0000] <smaug____>
XHR isn't too good, sure

[07:35:07.0000] <smaug____>
but so aren't many other APIs

[07:39:01.0000] <jgraham>
I believe "we have lots of crappy APIs therefore having crappy APIs is OK" isn't universially considered to be a winning argument

[07:46:09.0000] <annevk>
SimonSapin: sounds like those IPv4 tests are broken

[07:46:28.0000] <annevk>
SimonSapin: IPv4 is basically no different from a domain per the specification in terms of parsing

[07:46:43.0000] <annevk>
SimonSapin: resolving any other numeric sequence as IPv4 is bad for security

[07:47:31.0000] <SimonSapin>
annevk: looks like at least Firefox and Chrome do it

[07:47:54.0000] <annevk>
SimonSapin: I know, Safari doesn't

[07:49:39.0000] <JakeA>
smaug____: ServiceWorker needs Request/Response. Also opaque responses for corss-origin no-cors requests

[07:50:22.0000] <jgraham>
JakeA: In principle you could add Request/Response to XHR, so it doesn't fully justify Fetch

[07:50:35.0000] <jgraham>
And certainly not Fetch-in-document

[07:52:16.0000] <JakeA>
I suppose you could hack it on, but ugh

[07:52:17.0000] <jgraham>
Speaking of Service Worker, is there a mechanism for communicating from the main thread to a service worker when it is launched? e.g. could you use the document fragment?

[07:52:27.0000] <jgraham>
s/document/URL/

[07:52:51.0000] <SimonSapin>
annevk: So Safary tries to resolves these addresses from DNS?

[07:52:57.0000] <SimonSapin>
Safari

[07:53:23.0000] <annevk>
SimonSapin: not sure exactly how the network layer deals with the address given

[07:54:10.0000] <annevk>
SimonSapin: file a bug if it's still unclear, I got some tea and chocolate to take care of

[07:54:39.0000] <JakeA>
jgraham: you could use fragment, but that can only be set at registration time

[07:54:49.0000] <SimonSapin>
annevk: I filed https://github.com/w3c/web-platform-tests/issues/1104 , should it be in the spec’s bugzilla instead?

[07:55:19.0000] <jgraham>
JakeA: I think that might be OK here?

[07:55:44.0000] <JakeA>
jgraham: What's the use-case?

[07:56:17.0000] <annevk>
SimonSapin: maybe, let's talk about it two weeks from now

[07:56:28.0000] <jgraham>
The context is a mechanism to pass harness configuration parameters in to testcases. In particular the timeout. For normal tests this is set in a meta element in the HTML document so that it can be read by the manifest generation stuff

[07:56:47.0000] <jgraham>
So only being able to specify it in JS isn't very helpful

[07:56:52.0000] <SimonSapin>
annevk: who two weeks, are you gonna be in London?

[07:57:17.0000] <jgraham>
In the worst case, I guess I could use specially formatted comments or similar

[07:57:20.0000] <annevk>
SimonSapin: no, but I won't be on vacation

[07:57:27.0000] <SimonSapin>
eh, ok :)

[08:05:47.0000] <JakeA>
jgraham: Yeah, fragment or querystring would work then.

[08:12:02.0000] <smaug____>
JakeA: why does serviceworker even need Request/Response ? (but yes, those could be hacked into XHR)

[08:12:12.0000] <smaug____>
/me is just trying to understand the reasoning behind Fetch API

[08:12:31.0000] <smaug____>
/me doesn't have any opinion whether the API is a good or bad thing

[08:13:46.0000] <JakeA>
smaug____: the fetch event of the serviceworker allows developers to hijack a request and respond differently. Request lets them get information about the intended request, Response lets them construct their own.

[08:33:59.0000] <Domenic>
JakeA: why do both Request and Response have a .body?

[08:34:35.0000] <JakeA>
Domenic: If I'm posting formdata to a server, that request has a body

[08:34:55.0000] <JakeA>
Domenic: if the server responds with "yay everything's great", that response has a body

[08:35:04.0000] <Domenic>
JakeA: OK, but why would you readAsJSON() the request body?

[08:36:01.0000] <JakeA>
Domenic: If the content type of the body is json & you want to read it

[08:36:16.0000] <Domenic>
JakeA: but you put the data there, so you shouldn't need to read it...

[08:36:32.0000] <Domenic>
JakeA: and in fact having the ability to read it means that you must buffer it all in memory in case someone does read it

[08:37:27.0000] <JakeA>
Domenic: The page may have put it there, but you still may want to read it, or pipe it into another request with a transform in the middle

[08:37:40.0000] <JakeA>
Eg, convert formdata into JSON for another endpoint

[08:37:49.0000] <Domenic>
JakeA: then you should do that before writing it to the request

[08:38:02.0000] <Domenic>
JakeA: forcing buffering of all the data in memory that you write to the request is quite bad

[08:38:31.0000] <JakeA>
Domenic: Where is that being forced?

[08:38:43.0000] <Domenic>
JakeA: the fact that you can call readAsJSON() at any time on the request body stream forces that

[08:38:52.0000] <Domenic>
JakeA: it means you can't fire-and-forget bytes over the wire

[08:40:08.0000] <JakeA>
Domenic: if you call asJSON you're consuming the stream & yes you'll have to read it into memory. If you don't call that, you don't.

[08:40:21.0000] <JakeA>
Domenic: Same with responses

[08:41:11.0000] <Domenic>
JakeA: that doesn't make sense. The fact that someone *could* call readAsJSON() means that the socket can never consume data from the request body directly. You need to copy all the buffers that are written to the request body somewhere temporary in case someone calls requestBody.readAsJSON() later, even after the HTTP connection is closed, as long as

[08:41:11.0000] <Domenic>
requestBody is not GCed

[08:41:57.0000] <jgraham>
That's true, but is it a problem?

[08:42:06.0000] <jgraham>
It *might* be

[08:42:12.0000] <JakeA>
Domenic: once the request is given to something like fetch(), its body stream is consumed

[08:42:31.0000] <Domenic>
JakeA: so calling readAsJSON() errors?

[08:42:44.0000] <JakeA>
Domenic: yes

[08:43:00.0000] <Domenic>
JakeA: so that means FetchBodyStream is a readable stream. So how do you write to it?

[08:43:45.0000] <JakeA>
Domenic: new Request(url, {body: stream})

[08:43:55.0000] <Domenic>
JakeA: how do you write to stream? Since it is readable, not writable

[08:46:18.0000] <JakeA>
Domenic: I'm not up-to-date on the plans for the streaming API. If I wanted to create my own readable stream, how would I do that?

[08:46:42.0000] <Domenic>
JakeA: https://whatwg.github.io/streams/#rs-intro

[08:48:34.0000] <JakeA>
Domenic: start(enqueue, close, error) { - is that creating a "start" property on that object?

[08:50:39.0000] <JakeA>
Domenic: Assuming yes, you could create a readable stream like that & use it when constructing a Request object

[08:51:39.0000] <JakeA>
Domenic: You should be able to pipe a response body into a new request

[08:52:26.0000] <Domenic>
JakeA: that's the thing though. You pipe to writable streams, not to readable streams

[08:52:34.0000] <Domenic>
JakeA: see my latest email to whatwg@

[08:53:00.0000] <Domenic>
you are proposing option 2 in my email, I guess. Which is kinda annoying and unidiomatic, from a streams point of view.

[08:53:35.0000] <JakeA>
Domenic: you're not piping to a readable stream, you're passing a stream into the constructor (which will also take a blob, arraybuffer etc)

[08:54:31.0000] <Domenic>
JakeA: yes, that is the problem, you can no longer pipe or write directly, you have to wrap things into readable streams

[08:55:21.0000] <Domenic>
JakeA: ideally things you can write to are represented as writable streams, not as functions accepting readable streams

[08:56:34.0000] <JakeA>
Domenic: ahh ok, understanding better now

[08:57:08.0000] <JakeA>
reading that thread…

[09:17:13.0000] <JakeA>
Domenic: If a request comes into a serviceworker, you don't want that to have a writable stream. Its data is already being provided by something else.

[09:17:58.0000] <Domenic>
JakeA: ah, the old client-request vs. server-request thing...

[09:18:08.0000] <Domenic>
fetch(request) should take a client-request

[09:18:16.0000] <Domenic>
service workers should get a server-request

[09:18:31.0000] <JakeA>
hmm, I should be able to do fetch(event.request)

[09:20:12.0000] <Domenic>
you should?

[09:20:40.0000] <Domenic>
from a server's point of view, a request contains data to read

[09:20:47.0000] <Domenic>
from a client's point of view, a request is something you write to

[09:20:56.0000] <Domenic>
i am not sure how you would reconcile that

[09:21:04.0000] <Domenic>
one is mutable, the other is immutable

[09:22:29.0000] <JakeA>
Domenic: Say I get a fetch event, which gives me a request object, how should I then fetch it so I can look at headers before doing something with the response?

[09:24:27.0000] <Domenic>
JakeA: well, yeah, I see the use case. My only answer is a bad one... essentially copying over the relevant info (URL, headers, body, ...) from the request-to-the-service-worker into a new request-to-the-remote-server

[09:25:21.0000] <Domenic>
Let me see if I can recall how/if Node does this... it might be just copying though, which is bad, in which case we'll have to think of something else

[09:27:39.0000] <Domenic>
JakeA: yeah, it is pretty much just copying, meh... http://stackoverflow.com/a/20354642/3191

[09:31:00.0000] <Domenic>
JakeA: ends up looking like https://gist.github.com/domenic/1bbec0f341ae3cfb3a8f in service-worker land...

[09:32:03.0000] <Domenic>
JakeA: now I am thinking making it a writable stream is not worth the trouble...

[09:32:20.0000] <Domenic>
JakeA: or maybe we should make it a duplex stream

[09:32:55.0000] <Domenic>
(i.e. { input, output } pair, possibly { input, output, readAsJSON, ... }, or maybe put readAsJSON on output, at the cost of more typing...)

[09:33:52.0000] <JakeA>
Domenic: Would that be a different type to the request I get on the fetch event?

[09:34:20.0000] <Domenic>
JakeA: in the gist? yeah it should say ClientRequest; ev.request is a ServerRequest

[09:34:39.0000] <Domenic>
JakeA: the difference being that req.body is writable for ClientRequest, readable for ServerRequest

[09:34:41.0000] <JakeA>
Domenic: I mean your duplex idea

[09:35:14.0000] <Domenic>
JakeA: the duplex idea would be that both client and servers re-use the same Request class, but req.body = { WritableStream input, ReadableStream output }

[09:35:54.0000] <Domenic>
JakeA: conceptually, a client will start with an "empty" stream, and write things into input

[09:36:07.0000] <Domenic>
JakeA: whereas a server will start with a "full" stream and read things from output

[09:36:36.0000] <Domenic>
JakeA: for a client, once they write things into input, the computer then reads from output to consume the data. (Or, they could muck things up by consuming from output themselves, ensuring the network never sees that data.)

[09:37:14.0000] <Domenic>
JakeA: similarly for a server, the computer is writing things into input---or they could do so themselves, creating some chaos by mixing up computer-generated stream data with their own

[09:38:46.0000] <JakeA>
Domenic: I'm trying to get my head around why var req = new Request(url, {method: "POST"}); stream.pipeTo(req.body); is better than var req = new Request(url, {method: "POST", body: stream});

[09:40:35.0000] <Domenic>
JakeA: in the simplest case, it is not any better. But if you want to allow the full flexibility of a writable stream---it's own buffer, potentially combining input from multiple sources, setting up a pipe chain through several transforms, ... then having a writable destination is nice.

[09:42:54.0000] <Domenic>
JakeA: the duplex idea was designed to avoid such shenanigans

[09:43:20.0000] <Domenic>
JakeA: since you could just pass the duplex stream from ev.request into fetch(), since fetch() reads from the output side

[09:55:57.0000] <JakeA>
Domenic: still want to support setting the body as a blob, but I guess you'd still have an input, it'd just mess things up in new & interesting ways if you tried to use it

[10:58:34.0000] <Hixie>
so what do people think cross-spec references should look like?

[10:58:48.0000] <Hixie>
should every link to "URL" in the URL spec have a [URL] reference?

[10:59:12.0000] <Hixie>
should i not bother with [FOO] references except where there's no direct link to the spec?

[10:59:17.0000] <Hixie>
should i drop [FOO]-style refs entirely?

[11:00:03.0000] <caitp>
cross-spec references should: not require you to scroll to the end of the (likely very, very long document) to find links to the specs

[11:00:22.0000] <Hixie>
yeah that's a given

[11:00:44.0000] <Hixie>
assume that the links are now real cross-spec links

[11:59:20.0000] <jgraham>
Hixie: What do you mean by "[FOO]" references? i.e. what's the distinguishing feature that you have in mind?

[12:03:23.0000] <Hixie>
jgraham: so right now the spec says things like "The foobar is a blooberry. [FOO]"

[12:03:38.0000] <Hixie>
jgraham: which then links to the References section and describes the Foo spec

[12:03:51.0000] <Hixie>
so i'd like "foobar" here to link directly to the definition of "foobar" in the Foo spec

[12:04:12.0000] <Hixie>
but what about the next paragraph, which also has a "foobar" in it? Should it also say [FOO]? Should neither say [FOO]?

[12:04:22.0000] <Hixie>
the [FOO] right now is just included where i made an editorial decision to include it

[12:04:28.0000] <Hixie>
it's somewhat arbitrary

[12:05:06.0000] <Hixie>
also, what about cases where there's no specific term, but still a reference to another spec, e.g.: "Implementations that support the XHTML syntax must support some version of XML, as well as its corresponding namespaces specification, because that syntax uses an XML serialisation with namespaces. [XML] [XMLNS]"

[12:05:50.0000] <Hixie>
basically i'm asking what you think cross-spec references should look like if we forget our legacy

[12:05:55.0000] <jgraham>
Well arguably in that case "XML" and "namespaces" should be linked

[12:06:04.0000] <Hixie>
to just the specs?

[12:06:09.0000] <jgraham>
Yeah

[12:06:18.0000] <caitp>
Hixie: from my perspective, in a single paragraph, you shouldn't have multiple links to the same section of a referenced spec

[12:06:25.0000] <caitp>
maybe in the same group of paragraphs

[12:06:48.0000] <Hixie>
caitp: well i want every reference to a term to link to the same place

[12:06:53.0000] <jgraham>
ink consistently linking terms defined elsewhere like you would terms defined in the spec makes much more sense

[12:07:00.0000] <jgraham>
*I think

[12:07:18.0000] <Hixie>
so drop the whole [FOO]-style refernece thing and the references section?

[12:08:35.0000] <caitp>
what I mean is, `The foobar is a blooberry. The foobar makes a delicious pie.` should end up as `The [FOO#foobar] is a blooberry. the foobar makes a delicious pie.` and not The [FOO#foobar] is a blooberry. the [FOO#foobar] makes a delicious pie.`

[12:08:38.0000] <jgraham>
Well you could have a references section that would just be a list of other specs that get referenced

[12:08:44.0000] <jgraham>
But I don't know how useful it is

[12:08:48.0000] <caitp>
otherwise it just gets a bit link-spammy

[12:09:29.0000] <jgraham>
caitp: It shouldn't use a different style compared to internal references

[12:09:38.0000] <Hixie>
jgraham: but not link to it?

[12:09:55.0000] <caitp>
the notation is just indicating that it's a link to the foobar section of the FOO spec

[12:10:01.0000] <caitp>
not that it's a different style

[12:10:07.0000] <jgraham>
Hixie: I don't think linking to it is all that practical

[12:10:15.0000] <Hixie>
jgraham: k

[12:10:34.0000] <jgraham>
caitp: Right, I meant "style" in the sense of "how often it links"

[12:10:48.0000] <Hixie>
caitp: the problem is that if different occurences of the term look different (e.g. one is a link, one is not) then it's confusing.

[12:10:59.0000] <jgraham>
i.e. my suggestion is "do what you already do and ignore the difference between internal and external references"

[12:11:01.0000] <caitp>
hmm, that's true

[12:11:04.0000] <Hixie>
caitp: i think with the current underline-less style, link-spamminess is much less of a problem

[12:11:30.0000] <caitp>
well you probably do want to clearly identify that it's a link to somewhere else

[12:11:33.0000] <jsbell>
The reasons I can think of to maintain [FOO]-style links to a references section are (1) use of the spec when printed and (2) adding additional metadata, such as a specific version/date. Neither of which seem to be worth the visual noise and maintenance burden, but YMMV.

[12:11:38.0000] <jgraham>
In terms of visual style a small marker to indicate an external link might be nice. Maybe *that* could link to the references section, if you want such a thing

[12:12:32.0000] <Hixie>
jsbell: well we don't include the version or date anyway, since we're always linking to the latest revision

[12:12:41.0000] <jsbell>
Yep.

[12:13:22.0000] <Hixie>
jgraham: it's been suggested that links to terms should have a popup that inline the definition and text around it. i figured for external links this would include the reference or something.

[12:13:36.0000] <Hixie>
though kittens know how i figure out what reference to actually use

[12:13:45.0000] <Hixie>
but that's a separate issue

[12:14:05.0000] <Hixie>
one thing is that MikeSmith wanted the references section to link to all the sections that referenced the spec in question

[12:14:11.0000] <Hixie>
which would be harder if there's no marker to link back to...

[12:14:16.0000] <jgraham>
Hixie: Oh well if you are going fancy, that could work. But it's not clear to me that inlining the reference is at all practical

[12:14:27.0000] <jgraham>
e.g. if it's the whole XML spec

[12:14:37.0000] <Hixie>
jgraham: i just meant the title and editor names and so on

[12:15:26.0000] <Hixie>
ok i guess for now i'm going to leave the [FOO] links alone and think about it some more, and i'll make the cross-spec links completely independent of this

[12:15:45.0000] <Hixie>
no magic to autoinsert the right [FOO]s when there's a cross-spec cross-ref or whatever

[12:22:02.0000] <astearns>
Hixie: FWIW, I use real cross-ref links everywhere, and only add a [FOO] to the first instance where a particular spec is linked

[12:22:14.0000] <Hixie>
that makes sense

[12:22:36.0000] <astearns>
mainly to build the reference index

[12:26:37.0000] <smaug____>
dglazkov_: ping

[12:31:06.0000] <Hixie>
man there sure are a lot of <dfn>s in the HTML spec that aren't used by anything in the spec

[13:53:58.0000] <awrbgh>
تحذير

[13:53:59.0000] <awrbgh>
warning

[13:53:59.0000] <awrbgh>
 you may be  watched

[13:53:59.0000] <awrbgh>
do usa&israel use the internet(facebook,youtube,twitter, chat rooms ..ect)to spy??

[13:53:59.0000] <awrbgh>
do usa&israel use the internet 2 collect informations,,can we call that spying??

[14:08:00.0000] <Hixie>
not just usa&israel, i would imagine...

[14:09:01.0000] <caitp>
well that was interesting

[14:13:08.0000] <marcosc>
Thinking of standardizing Wake Locks. Use cases: https://w3c-webmob.github.io/wake-lock-use-cases/

[14:13:26.0000] <marcosc>
would appreciate any feedback before proposing an API

[14:19:34.0000] <caitp>
books doesn't seem like a good use case, you don't want to fall asleep reading a book on your ipad and have the system prevented from going to sleep o_o

[14:20:36.0000] <Hixie>
marcosc: my immediate reaction to the first sentence ("The web platform currently lacks a means to prevent a device from entering a power-saving state (i.e., some means that prevents an aspect of the system from "going to sleep").") was "and that's why i love the web"

[14:21:13.0000] <caitp>
don't media elements offer an attribute or something to prevent sleep? I thought they did but can't recall

[14:22:30.0000] <Hixie>
marcosc: your document seems woefully short on abuse considerations

[14:22:30.0000] <caitp>
maybe it's just a default chosen by the implementation, I dunno

[14:22:53.0000] <Hixie>
marcosc: i would have an additional requirement, namely "the page must not be able to get any kind of wake lock without user opt-in"

[14:24:35.0000] <caitp>
really video elements seem like the only legitimate use case where you're going to leave the browser running for a specific use in the platform

[14:26:10.0000] <caitp>
otherwise, if you're a kiosk, you're disabling sleep on the system itself, if you're a videogame you're getting user input periodically, if you're a book you're turning pages, if you're a map/gps you're probably not a web browser unless someone is just printing directions out or something

[14:26:48.0000] <Hixie>
i don't see why Google Maps shouldn't support navigation on a phone

[14:26:53.0000] <Hixie>
i think that use case makes emminent sense

[14:27:24.0000] <Hixie>
i mean there's nothing really about the native Android Google Maps app that shouldn't be possible from a web app, imho

[14:28:56.0000] <caitp>
Hixie: you might use google maps on a phone, that would be fine

[14:29:13.0000] <caitp>
but you probably are using the android or ios app

[14:29:19.0000] <caitp>
which can keep the device awake natively

[14:29:33.0000] <Hixie>
but why should google need to make two or more navigation apps? instead of just a web app?

[14:29:34.0000] <caitp>
easier on the battery too, quite likely

[14:30:05.0000] <caitp>
well, google already does

[14:30:09.0000] <Hixie>
i see no reason why a web app shouldn't be able to do everything a native maps app can do, with no compromises (e.g. no worse battery usage)

[14:30:09.0000] <caitp>
and if they didn't, someone else would

[14:30:17.0000] <caitp>
(and someone else does, actually)

[14:30:22.0000] <Hixie>
but why is that a good thing?

[14:30:29.0000] <caitp>
because it is

[14:30:32.0000] <Hixie>
...

[14:30:42.0000] <Hixie>
game over: you have lost your argument

[14:30:46.0000] <caitp>
lol

[14:31:13.0000] <caitp>
it's a good thing because other platforms do more than the web platform without going through the process of needing to get other implementations working the same way

[14:31:20.0000] <caitp>
and without being blocked on bugs in different implementations

[14:31:41.0000] <Hixie>
that arguments generalises to all features, and suggests the web shouldn't exist.

[14:31:52.0000] <caitp>
and that's really a logical conclusion, when you get down to it

[14:32:10.0000] <marcosc>
Hixie: true about abuse cases. Will add that.

[14:32:41.0000] <Hixie>
caitp: the web provides a key feature that none of the other platforms provides: it's vendor-neutral. the same app can work on any platform.

[14:32:46.0000] <Hixie>
caitp: that alone justifies its existence, imho

[14:32:50.0000] <caitp>
it's not really vendor-neutral, though

[14:32:53.0000] <caitp>
it's not

[14:32:58.0000] <caitp>
we try, we do try

[14:33:00.0000] <caitp>
but it's not

[14:33:16.0000] <caitp>
with simple documents we get pretty close

[14:33:25.0000] <marcosc>
caitp: did you read the document?

[14:33:32.0000] <Hixie>
caitp: by definition, anything that isn't interoperable across multiple vendors isn't part of the web. :-)

[14:34:52.0000] <caitp>
Hixie, when you add things to the web platform, you have this huge pile of constraints which aren't related whatsoever to the problem you're actually trying to solve

[14:35:11.0000] <caitp>
because of this, the web is not the single platform for all things

[14:35:15.0000] <Hixie>
that also describes every other platform, especially the old ones

[14:35:16.0000] <caitp>
it can't be, it's not possible :(

[14:35:43.0000] <caitp>
it would be cool if it were possible

[14:35:45.0000] <Hixie>
your argument is essentially "the web isn't perfect, therefore it's got no value"

[14:35:54.0000] <caitp>
I never said it had no value =)

[14:35:58.0000] <Hixie>
and things aren't that black and white

[14:36:07.0000] <caitp>
but it's got too many problems which will keep it from progressing in a meaningful way for some of these things

[14:36:23.0000] <caitp>
security issues, limitations of imperative languages, lack of imperative languages, etc

[14:36:41.0000] <caitp>
performance issues, energy cost issues

[14:36:55.0000] <marcosc>
caitp: about games, search for Magic the gathering. Also, see the first example in "other applications".

[14:36:58.0000] <caitp>
too many responsibilities -> never going to be good at everything you need it to be

[14:37:08.0000] <Hixie>
we're literally working on every single one of those

[14:37:23.0000] <caitp>
i know they're being worked on, but it's never really going to "work"

[14:37:59.0000] <caitp>
right now I'm risking a chemical and electrical fire because a web application is heating my laptop to 160F while I'm sitting in a meeting

[14:38:16.0000] <Hixie>
caitp: https://www.youtube.com/watch?v=pWdd6_ZxX8c

[14:38:23.0000] <caitp>
this is a prime example of the web not doing a great job for all things

[14:38:31.0000] <caitp>
not that the web is bad

[14:38:33.0000] <caitp>
the web is awesome

[14:38:40.0000] <Hixie>
you realise that _no_ platform does "a great job for all things" right

[14:38:42.0000] <caitp>
but it's not the be-all-end-all solution for everything

[14:39:08.0000] <caitp>
no, but sometimes C# or ObjC or Java or C++ does a better job of solving a given problem

[14:39:22.0000] <caitp>
(easier than say, javascript + API bindings into someone elses C++)

[14:39:48.0000] <Hixie>
sure. there are multiple projects ongoing for providing ways to compile C++ to a form that runs on any browser.

[14:40:02.0000] <Hixie>
not to mention that many web apps are now written in Java using GWT, etc.

[14:40:03.0000] <caitp>
yeah but that's not really a solution :p

[14:40:14.0000] <caitp>
running in a browser isn't really any better than running in anything else

[14:40:18.0000] <Hixie>
well, again, https://www.youtube.com/watch?v=pWdd6_ZxX8c

[14:40:46.0000] <caitp>
there's nothing that makes an app that runs in IE any better than an app that runs in MS-DOS

[14:41:05.0000] <Hixie>
...

[14:41:16.0000] <Hixie>
that's just objectively false

[14:41:19.0000] <caitp>
it could be the exact same application, running it in IE wouldn't be any better

[14:41:27.0000] <caitp>
it wouldn't necessarily be worse, but it wouldn't be better

[14:41:36.0000] <caitp>
running in a browser doesn't "improve" anything

[14:42:21.0000] <Hixie>
the browser is just the runtime

[14:42:22.0000] <marcosc>
hixie, adding the user opt-in requirement also. Thanks for the feedback.

[14:42:59.0000] <Hixie>
i don't care if it's IE or Chrome OS or whatever

[14:43:08.0000] <hober>
ISTM that wake lock shouldn't be API, but should simply be something UAs do themselves

[14:43:09.0000] <caitp>
yes, it's the runtime

[14:43:10.0000] <Hixie>
in fact the whole point is that it can be any of the browsers

[14:43:11.0000] <caitp>
and the runtime doesn't matter

[14:43:22.0000] <caitp>
the browser being a runtime isn't an improvement

[14:43:31.0000] <caitp>
it's not a detriment in all cases, but it's not an improvement

[14:43:32.0000] <Hixie>
the improvement is that there's multiple runtimes

[14:43:35.0000] <hober>
like, if i take a <video> full screen, a reasonable UA should wake lock while it's playing

[14:43:42.0000] <hober>
without the author doing anything

[14:43:55.0000] <Hixie>
hober: yeah but e.g. for a navigation web app, how does the browser know to wake lock?

[14:43:59.0000] <marcosc>
hober: yes

[14:44:16.0000] <caitp>
you're a website running in an airport kiosk

[14:44:17.0000] <hober>
Hixie: because the user activated a control in the UA chrome? :)

[14:44:25.0000] <caitp>
the sysadmin controlling the kiosk has disabled sleep

[14:44:30.0000] <caitp>
problem solved

[14:44:33.0000] <Hixie>
hober: Safari is going to have a "wake lock" button? :-)

[14:44:48.0000] <caitp>
sysadmin/IT grunt/whoever

[14:44:51.0000] <Hixie>
yeah kiosks aren't a good use case

[14:44:54.0000] <hober>
Hixie: you know us. we love adding lots of random ui buttons :)

[14:45:03.0000] <Hixie>
hober: i rest my case... :-P

[14:45:16.0000] <marcosc>
yeah, I didn't include them... though I do have a picture of one that we use at the office here.

[14:45:50.0000] <marcosc>
(we use an app for meeting rooms.... but the screen could shut off after hours)

[14:45:55.0000] <marcosc>
so they are not a terrible use case

[14:48:04.0000] <caitp>
there are cases where it's obvious you want to disable sleep, like videos

[14:48:20.0000] <caitp>
but I don't think the other cases are that obvious

[14:48:23.0000] <caitp>
that's all

[14:48:36.0000] <Hixie>
how is maps not obvious

[14:48:53.0000] <caitp>
because you're probably issuing inputs

[14:49:31.0000] <caitp>
I mean the only case where you'd ever do that is on your mobile phone, and your mobile phone isn't going to sleep, unless you leave it alone for a minute, and if it does, who cares

[14:49:39.0000] <caitp>
you could disable sleep if you need to use it as your car GPS or something

[14:49:49.0000] <caitp>
(which you shouldn't)

[14:49:56.0000] <Hixie>
uh

[14:50:04.0000] <Hixie>
let me tell you how i am NOT issuing inputs while driving...

[14:50:21.0000] <Hixie>
why "which you shouldn't"

[14:50:22.0000] <Hixie>
i don't get it

[14:50:32.0000] <caitp>
don't use your phone as a GPS while driving =) and if you can avoid it, don't use GPS at all

[14:50:51.0000] <caitp>
people grow overly dependent on these things, you know

[14:51:13.0000] <Hixie>
uh

[14:51:29.0000] <Hixie>
ok

[14:51:50.0000] <Hixie>
/me is going to keep using a navigation app until such time as his car drives itself, thanks

[14:52:02.0000] <caitp>
i'm sure it will only be a few years

[14:52:03.0000] <Hixie>
especially with google maps being so freaking awesome at it these days

[14:52:13.0000] <Hixie>
navigating around traffic dynamically and giving lane guidance and all that

[14:52:17.0000] <Hixie>
it's freaking fantastic

[14:52:20.0000] <caitp>
and then we'll forget all about reading paper maps, street signs and landmarks, and celestial navigation

[14:52:24.0000] <caitp>
and it will be terrible

[14:52:28.0000] <Hixie>
you'd have to be crazy to not use it

[14:53:00.0000] <caitp>
and more importantly, we'll start to forget to look away from the screen

[14:53:05.0000] <caitp>
wouldn't that be awful?

[14:53:08.0000] <caitp>
oh man

[14:53:21.0000] <Hixie>
oh man, yeah, how will we ever survive as a species if we forget how to use logarithm tables, slide rules, punch cards, pedal looms or how to ride a horse

[14:53:33.0000] <caitp>
yes

[14:53:35.0000] <caitp>
darned right

[14:53:40.0000] <caitp>
no sarcasm

[14:53:52.0000] <caitp>
it will be a sad day when that knowledge disappears =)

[14:54:50.0000] <Hixie>
luckily for us, that knowledge will forever live on since we now have near-infinite archival storage and no longer depend on flammable paper for our backups

[14:55:34.0000] <caitp>
archived knowledge is not necessarily living knowledge

[14:55:47.0000] <caitp>
anyway I think this got a bit sidetracked =)

[14:56:03.0000] <Hixie>
do you know how to use a slide rule?

[14:56:57.0000] <marcosc>
caitp: you didn't even read the document, did you?

[14:57:20.0000] <caitp>
in its entirety? heck no, I was in a meeting =)

[14:57:55.0000] <marcosc>
ok, most of the things you mentioned are addressed in the document

[14:57:58.0000] <caitp>
but I'm still not really buying it, I don't want any web app that wants to disabling sleep on my system, and I don't want to let a web app disable sleep

[14:58:13.0000] <marcosc>
caitp: that's fine. You can opt out

[14:58:22.0000] <marcosc>
but other people would want it

[14:58:28.0000] <caitp>
for obvious cases like videos, the UA can disable sleep, but otherwise I'd prefer to do that myself

[14:58:50.0000] <marcosc>
caitp: ok, that's fine. But do you acknowledge that other people might not want that?

[14:58:59.0000] <marcosc>
(i.e., a lot of people don't even know how to do that(

[14:59:00.0000] <marcosc>
)

[14:59:27.0000] <caitp>
if someone doesn't know how to disable sleep, do you think they really know what they're doing allowing a random web app to disable sleep?

[14:59:38.0000] <marcosc>
caitp: again, see the document

[14:59:50.0000] <marcosc>
e.g., the app for cooking and the Brazil 2014 app

[14:59:52.0000] <caitp>
the document explains how it makes up for other peoples lack of knowledge?

[14:59:53.0000] <caitp>
o_o

[14:59:58.0000] <marcosc>
yes

[15:00:32.0000] <caitp>
which section would I find that snippet, is there another spec proposed for interfacing directly with a user's brain?

[15:00:55.0000] <marcosc>
I think that's called interaction design

[15:01:30.0000] <marcosc>
seems you are not really interested in actually providing constructive feedback.

[15:02:07.0000] <caitp>
it's not that it's not constructive, it's that it's not what you want to hear

[15:02:11.0000] <caitp>
which is fine, I can't stop ya

[15:02:32.0000] <Domenic>
no, this is pretty much the definition of non-constructive feedback right here

[15:02:59.0000] <caitp>
there's no way to make this work in a good way within the constraints of the platform, domenic, that would never be appropriate

[15:03:22.0000] <marcosc>
caitp: why is it then possible to do it effectively on Android and iOS?

[15:03:40.0000] <marcosc>
Or even in Firefox OS?

[15:03:45.0000] <caitp>
well, it's not as effective on the android store because the play store isn't policed as effectively

[15:04:08.0000] <caitp>
but certainly on the app store they take abuse a bit more seriously

[15:04:56.0000] <marcosc>
Wait, you are saying that we shouldn't standardize any new features because the web doesn't have an "app store"?

[15:05:02.0000] <caitp>
no

[15:05:09.0000] <caitp>
that's you fitting those words into my mouth =)

[15:05:52.0000] <caitp>
the trouble is, by asking users to opt-in, you're A) assuming they have a clue what they're opting into or how it affects them, and B) essentially giving a free-pass for people to take advantage of less-skilled computer users

[15:05:53.0000] <marcosc>
apologies, can we focus on the use cases and try to find an solution to the abuse cases?

[15:05:59.0000] <Hixie>
caitp: you're not explaining your position very well, fwiw

[15:06:03.0000] <caitp>
while at the same time imposing inconvenience on more experienced users

[15:08:15.0000] <marcosc>
if the application provides a wake lock and it's really useful (e.g., driving, using Google Cardboard, following a recipe) I don't see how that is a huge inconvenience for a significant gain. Once the user is done using the application, they just press the power button or open a different app.

[15:08:35.0000] <Hixie>
marcosc: on android i would expose it as a notification that said "This Web page would like to keep your phone from turning off. This can increase battery usage. (( Allow maps.google.com to control when the phone turns off ))" and if you dismiss it, the app is added to the blacklist so the notification doesn't come back.

[15:08:57.0000] <Hixie>
oh man, google cardboard is another great use case

[15:09:57.0000] <Domenic>
I want a Google cardboard, but am ironically too lazy to make one...

[15:10:03.0000] <marcosc>
heh

[15:10:09.0000] <Hixie>
Domenic: you can find prebuilt kits online

[15:10:36.0000] <Hixie>
Domenic: http://www.dodocase.com/products/google-cardboard-vr-goggle-toolkit http://www.unofficialcardboard.com/

[15:11:46.0000] <caitp>
anyways I'm still not seeing where this draft is claiming to make up for a users inexperience marcosc :( do you have a link to the section/

[15:11:48.0000] <caitp>
?

[15:12:18.0000] <Domenic>
Hixie: awesome!

[15:12:29.0000] <marcosc>
No, it's implied throughout the whole document because there are many successful apps using wake locks.

[15:12:34.0000] <marcosc>
caitp: ^^

[15:12:35.0000] <Domenic>
The "Handcrafted in San Francisco" banner is a nice touch.

[15:12:39.0000] <caitp>
that... isn't the issue though

[15:12:53.0000] <caitp>
there is any number of things that you could gain a marginal benefit from wakelocks for

[15:12:57.0000] <Hixie>
/me must admit to having no idea what issue caitp is currently having

[15:13:08.0000] <caitp>
the issue is how do you prevent abuse

[15:13:13.0000] <caitp>
because opt-in isn't enough

[15:13:17.0000] <caitp>
it just isn't

[15:13:29.0000] <Hixie>
it's isn't because...?

[15:13:49.0000] <caitp>
because people don't understand what they're opting into/out of, don't understand all of the implications, don't know how to undo their choices

[15:14:17.0000] <Domenic>
I guess people should not use phones then

[15:14:17.0000] <caitp>
and more importantly, people don't want to have to opt in

[15:14:25.0000] <Domenic>
Cuz the wakelock monster will get them

[15:14:30.0000] <Domenic>
and lock their phones awake

[15:14:32.0000] <Hixie>
we have much bigger issues that are currently opt-in without the world ending...

[15:14:41.0000] <Hixie>
for example, the geolocation api

[15:15:08.0000] <caitp>
well, it would take a lot for the world to end

[15:15:48.0000] <Hixie>
if opt-in is sufficient for the geolocation api, i'm very comfortable saying that it's sufficient for a wake lock

[15:16:06.0000] <Hixie>
and the industry seems to have concluded that it's sufficient for the geolocation api

[15:16:42.0000] <caitp>
you opted into gUM on website X on one day, on a different day you've opted into wakelock

[15:17:08.0000] <caitp>
now you've fallen asleep, wakelock and gUM are working simultaneously and you're being surveiled

[15:17:16.0000] <caitp>
that's creepy as hell!

[15:17:21.0000] <Hixie>
oh no!

[15:17:31.0000] <Hixie>
call the nsa!

[15:17:36.0000] <caitp>
but worse, it's also killing your ipad battery cycles and causing you to pay another 200$ for a replacement battery sooner!

[15:17:40.0000] <Hixie>
oh wait, they can already do this without any help from us

[15:17:45.0000] <Hixie>
since they can run software on the baseband

[15:17:58.0000] <caitp>
yes they can

[15:18:04.0000] <Hixie>
phew

[15:18:06.0000] <Hixie>
disaster averted

[15:18:16.0000] <caitp>
it's not averted, it's just ignored :p

[15:18:31.0000] <caitp>
just because you already have a problem doesn't mean that making it easier for people to abuse it is any better

[15:19:26.0000] <Hixie>
if you don't trust the site to not surveil you, then don't opt-in to gUM

[15:19:31.0000] <Hixie>
that's what the opt-in is _for_

[15:19:40.0000] <caitp>
maybe you don't remember that you opted in

[15:19:48.0000] <caitp>
maybe you had a good reason to opt-in at one point, but no longer do

[15:20:01.0000] <caitp>
maybe you don't know that you don't have a good reason to suspect people on the internet because you're a 90 year old grandmother

[15:20:09.0000] <caitp>
I mean really, who can say

[15:21:14.0000] <caitp>
you could come up with lots of ways to abuse it, and you'd get like at least 3 out of every 12 people you tried it on

[15:21:19.0000] <caitp>
probably more

[15:21:23.0000] <Hixie>
i'm totally on board with the suggestion that we should make it clearer to users that a site has permissions to use your camera or whatever

[15:21:43.0000] <Hixie>
but that is not specific to the web, and not specific to wake locks.

[15:22:06.0000] <caitp>
maybe an app-store like system for the web would actually be a really good idea

[15:59:31.0000] <TabAtkins>
caitp: Maybe rethink that, given the travesty of App Store permissions (particularly on Android, but only because I'm not familiar enough with iTunes to know how bad it is).

[16:01:30.0000] <caitp>
no, I think it would be extraordinary if we could vette specific applications and grant them permissions because we know that they aren't acting abusinely. I'm not saying it would be even close to a simple thing to implement, and it would cost piles of money and will likely never happen

[16:01:33.0000] <caitp>
but that's the problem isn't it

[16:01:51.0000] <caitp>
we let people do whatever they want and keep giving them more tools to do it with and the only protection we offer is completely half-assed

[16:03:22.0000] <caitp>
not just specific applications but specific hashes computed from the source code of an application

[16:04:10.0000] <TabAtkins>
Oh, so you're saying "A system vaguely similar to an App Store, but actually quite different from every existing App Store in important ways".

[16:04:38.0000] <caitp>
well, somewhat similar to the apple store

[16:05:36.0000] <Hixie>
hm... making <dfn>s for terms that are defined in other specs actually turn into links that go to those other specs makes my dfn.js ui break...

[16:05:53.0000] <Hixie>
because you end up following the link rather than seeing the list os term usages...

[16:05:56.0000] <Hixie>
of

[16:06:43.0000] <TabAtkins>
Hixie: Dont' do that, then.  Your local definitions will clash with the other spec's definitions, and will make Bikeshed unhappy. ;_;

[16:07:36.0000] <Hixie>
don't worry, they're easily detectable. Just ignore any <dfn> containing an <a> (or any <dfn> with a data-x-href, if you use my source file as input)

[16:07:39.0000] <TabAtkins>
(When you do want a local definition of a concept that is more fully defined elsewhere, Bikeshed has a concept of "unexported" definitions, which are local-only and don't get picked up by Shepherd's database.)

[16:07:53.0000] <gsnedders>
Hixie: what was the 3D printing place you were recommending?

[16:08:05.0000] <TabAtkins>
Hixie: No can do, all <dfn>s have an <a> in Bikeshedding specs (for the permalink).

[16:08:46.0000] <TabAtkins>
Hixie: You could put a data-noexport attribute on the definitions you don't want to show up globally, if you wanna be Bikeshed-friendly.

[16:08:58.0000] <Hixie>
TabAtkins: i'm sure we'll figure out some solution

[16:09:17.0000] <Hixie>
TabAtkins: i'm first trying to get something good for HTML before I worry about other specs :-)

[16:09:43.0000] <TabAtkins>
Sure, but I wanna make sure you don't do a lot of work, and then would have to do *more* work afterwards to make it play well with others. ^_^

[16:10:07.0000] <TabAtkins>
So just in case it's something you'd have to do to your source file, knowing about it earlier rather than later is better.

[16:10:33.0000] <TabAtkins>
For example, typing your dfns would be *wonderful*.

[16:10:57.0000] <TabAtkins>
(Particularly your WebIDL ones.)

[16:11:34.0000] <Hixie>
my medium-term plan with webidl is to not have to type any, but just to have my pipeline parse the webidl directly.

[16:12:39.0000] <Hixie>
anyway. the HTML spec has a section on dependencies, where all the terms the spec uses from other specs are defined

[16:12:53.0000] <Hixie>
so what i'm doing is just using this as a way to also declare internally what all the terms should actually point to

[16:13:31.0000] <TabAtkins>
That also works, yes.  That's what Bikeshed does.

[16:13:42.0000] <TabAtkins>
(re: parsing webidl automatically)

[16:14:24.0000] <TabAtkins>
So if you just add a data-noexport attribute to all of those definitions (because they're not "real" definitions, just local ones you're using for spec-specific purposes), that would be great.

[16:14:42.0000] <TabAtkins>
Then I won't have to constantly disambiguate HTML definitions from everything else. ^_^

[16:15:05.0000] <Hixie>
file a bug to remind me (whatwg.org/newbug, whiteboard "tools")

[16:16:32.0000] <TabAtkins>
What's the whiteboard?

[16:16:36.0000] <TabAtkins>
Don't see that field anywhere.

[16:17:43.0000] <Hixie>
you have to edit it after filing the bug

[16:17:44.0000] <Hixie>
for some reason

[16:18:42.0000] <TabAtkins>
k, done

[16:29:08.0000] <marcosc>
caitp: I added the geolocation + wake lock abuse case to the document (haven't pushed yet).

[16:29:48.0000] <Hixie>
TabAtkins: thanks

[16:35:06.0000] <MikeSmith>
-there's also an early version of "Referer". It's called "Referree" [sic]. In a file from the very next day, it's called "Referee" [sic].

[16:35:10.0000] <MikeSmith>
http://lists.w3.org/Archives/Public/public-webhistory/2014Jul/0002.html

[16:37:51.0000] <Hixie>
why is the second marked [sic]?

[16:38:04.0000] <Hixie>
oh because that word doesn't make sense there

[16:38:05.0000] <Hixie>
nevermind


2014-07-15
[17:08:24.0000] <marcosc>
Hixie: I added the basic abuse case - http://w3c-webmob.github.io/wake-lock-use-cases/#potential-for-abuse

[17:08:37.0000] <marcosc>
I'm asking on Twitter for more

[17:08:57.0000] <marcosc>
/me heading home now... but if anyone has any others please let me know

[17:10:20.0000] <caitp>
i guess that would be a fun bug for some college kids to work on at least, so it's got that going for it

[05:00:04.0000] <JakeA>
Anyone awake enough to set me up an account on the whatwg wiki?

[05:03:34.0000] <jgraham>
JakeA: Sure I can do it

[05:04:06.0000] <JakeA>
jgraham: Cheers!

[05:05:02.0000] <JakeA>
jgraham: jakearchibald jaffathecake⊙gc

[05:31:51.0000] <MikeSmith>
the "polyglot" document is very consistent about being really sloppy

[05:32:54.0000] <Ms2ger>
Ha

[05:33:24.0000] <MikeSmith>
if you look at the Status section at http://www.w3.org/TR/2014/WD-html-polyglot-20140204/ and find the link with the hypertext "facilitate migration to and from XHTML" and you follow it.. it goes to http://www.w3.org/html/wg/drafts/html/master/document-metadata.html#charset "Specifying the document's character encoding"

[05:33:59.0000] <MikeSmith>
...which says nothing about how to "facilitate migration to and from XHTML"

[05:34:37.0000] <MikeSmith>
and there's a pattern of instances of stuff like that throughout the document

[05:37:04.0000] <Ms2ger>
You're not supposed to click the links

[05:42:29.0000] <MikeSmith>
no, you're supposed to put yourself in the mind of the authors before you click the links

[09:04:06.0000] <Domenic>
Has nobody built something that auto-generates JS function headers from WebIDL?

[09:08:30.0000] <MikeSmith>
Domenic: as opposed to C++ function headers? I would that somebody from a browser project had moved some feature completely to JS might must have

[09:08:59.0000] <MikeSmith>
I mean I think there have been some cases of things being moved to JS

[09:09:03.0000] <Domenic>
MikeSmith: well, I am starting that browser project to move features completely to JS, so... not here at least :P

[09:09:20.0000] <caitp>
do optional parameters in webidl affect the arity of a function / are they supposed to?

[09:09:21.0000] <MikeSmith>
not just abarth's marquee implementation, but other things earlier

[09:10:11.0000] <MikeSmith>
Domenic: maybe something over there in gecko (me waves hands around a bit)

[09:20:28.0000] <jgraham>
We can do you C++ or Rust, but not js

[09:28:55.0000] <Ms2ger>
Domenic, we have JS-implemented stuff, but I don't think anything to generate stub implementations

[09:29:20.0000] <Domenic>
Ms2ger: thanks... I'll probably start something on GitHub then ^_^

[09:31:49.0000] <Domenic>
Oh wait, I guessed a URL and found marcosc's https://www.npmjs.org/package/webidl

[09:36:01.0000] <MikeSmith>
さすがmarcosc

[09:44:45.0000] <TabAtkins>
caitp: Yes, they do affect the arity.

[09:44:54.0000] <TabAtkins>
caitp: ...pretty sure.

[09:45:35.0000] <caitp>
weird, that's pretty different behaviour from the standard library

[09:45:54.0000] <TabAtkins>
?

[09:46:13.0000] <caitp>
from JS builtins

[09:46:29.0000] <TabAtkins>
Is it?

[09:47:04.0000] <TabAtkins>
Really, it depends on whether they translate to JS as just a normal arg (and only affect the arity/type checking), or if they translate as an arg defaulted to undefined.

[09:47:07.0000] <caitp>
well, it probably varies a lot, but it's frequently "this function has 3 parameters, but a length of 1"

[09:47:18.0000] <cryptic>
should you set content-type to "application/csv" for csv files?

[09:47:29.0000] <TabAtkins>
caitp: Oh, you might have misunderstood me.

[09:47:39.0000] <TabAtkins>
I meant that optional args should *not be counted* in the arity.

[09:47:40.0000] <cryptic>
my browser doesn't recognize that mime type, which seems dumb

[09:47:49.0000] <caitp>
ah

[09:48:20.0000] <TabAtkins>
cryptic: Try text/csv?

[09:48:46.0000] <cryptic>
TabAtkins: doesn't text imply ascii?

[09:48:52.0000] <TabAtkins>
No.

[09:48:57.0000] <cryptic>
oh, perfect

[09:49:00.0000] <TabAtkins>
text/html certainly doesn't, for example.

[09:49:15.0000] <TabAtkins>
It just implies that it's a textual format, as opposed to one of the binary formats.

[09:49:15.0000] <cryptic>
but html is ascii

[09:49:25.0000] <TabAtkins>
No, HTML is definitely not ASCII.

[09:49:38.0000] <TabAtkins>
All of the language-defined stuff is ASCII, yes, but HTML pages are not.

[09:49:51.0000] <TabAtkins>
(Rather, is within the ASCII range, which is far different from *being* ASCII.)

[09:50:06.0000] <cryptic>
right, that's what I mean: "text/html" refers to the language of the page content, which is html (ascii)

[09:50:30.0000] <cryptic>
that the browser ultimately does with that information is beyond the jurisdiction of http

[09:50:35.0000] <TabAtkins>
No. The page content is some HTML tags and a bunch of textual content.  The latter is not required to be ASCII, and often is not.

[09:51:06.0000] <TabAtkins>
HTML doesn't distinguish between tags and text as being "HTML content".

[09:51:19.0000] <cryptic>
it's all html content

[09:51:40.0000] <TabAtkins>
And HTML tags use characters in the ASCII range of unicode, which may or may not be ASCII-compatible in your chosen encoding.

[09:51:51.0000] <TabAtkins>
cryptic: I know it's all HTML content. That's what I"m saying.

[09:54:21.0000] <cryptic>
at the end of the day, it doesn't matter between text/csv and application/csv; I'm just not sure which one comports with the specifications (that some browsers correctly display unescaped unicode characters is not behavior the specs would lead one to expect)

[09:55:09.0000] <cryptic>
but I guess if text meant ascii, it'd be ascii/* and not text/*

[09:56:23.0000] <Ms2ger>
/me notes the topic

[09:58:16.0000] <gsnedders>
Defining "text" is hard :)

[10:06:36.0000] <TabAtkins>
cryptic: If you've been specifying an ASCII charset and escaping all your non-ASCII character in HTML all this time, just in case someone was following some obsolete directive from some ancient version of the text/* definition, then I"m very sorry. ^_^

[10:07:22.0000] <gsnedders>
TabAtkins: hey, Hixie publishes the spec as US-ASCII!

[10:07:28.0000] <TabAtkins>
...why?

[10:07:56.0000] <Ms2ger>
So that he can push it to the IETF, duh

[10:07:56.0000] <gsnedders>
he got fed up of having issues with dev.w3.org and Content-Type headers specificing charset

[10:08:00.0000] <gsnedders>
IIRC

[10:08:09.0000] <gsnedders>
and just changed it to use US-ASCII everywhere

[10:08:23.0000] <TabAtkins>
Oh, huh. I have no idea what those issues might be, since we all use utf-8 in CSS.

[10:08:26.0000] <gsnedders>
source is UTF-8, but the published specs are ASCII

[10:08:34.0000] <gsnedders>
idk, this was years ago this was chnged

[10:08:35.0000] <gsnedders>
*changed

[10:08:41.0000] <TabAtkins>
That's silly.

[10:09:02.0000] <Ms2ger>
W3C? It happens

[10:09:33.0000] <Hixie>
gsnedders: actually source is ascii but i now publish as utf-8

[10:09:46.0000] <Hixie>
then again, i don't publish on the w3c site anymore

[10:11:18.0000] <gsnedders>
Hixie: well you parse source as utf-8 from memory! :P

[10:11:24.0000] <gsnedders>
or rather used to

[10:11:33.0000] <Hixie>
i do parse as utf-8

[10:11:45.0000] <Hixie>
i mean, utf-8 is a superset of ascii, so...

[10:11:55.0000] <Hixie>
anyway, i don't use anolis anymore

[10:12:14.0000] <Hixie>
and once i've written my splitter, i won't use html5lib at all anymore :-)

[10:12:38.0000] <gsnedders>
/me remembers he was meant to see how fast Hixie's parser was

[10:13:52.0000] <Hixie>
oh, yeah

[10:13:56.0000] <Hixie>
how should we do that?

[10:14:04.0000] <Hixie>
can i get you a binary or something?

[10:14:07.0000] <Hixie>
what should it do?

[10:14:14.0000] <Hixie>
or do you want to compile from source?

[10:14:51.0000] <gsnedders>
well I'm on holiday now with nothing more than a kinda weak laptop, so let's not worry for now

[10:14:57.0000] <Hixie>
k

[10:15:13.0000] <gsnedders>
also what seems like a ridiculously slow internet connection :)

[10:37:27.0000] <Hixie>
ok i'm not entirely done yet but this patch is getting out of hand so i'm going to commit it soon

[10:37:37.0000] <Hixie>
anyone see any blockers? http://www.whatwg.org/specs/web-apps/current-work/

[10:38:21.0000] <Hixie>
(if you see them, mention them here. i'm going to be afk for about an hour, then i'll commit it)

[11:13:58.0000] <Hixie>
no comments, huh

[11:13:58.0000] <Hixie>
ok

[11:27:41.0000] <Ms2ger>
Hixie, my browser still doesn't like the single-page spec :)

[11:27:46.0000] <Hixie>
yeah

[11:27:49.0000] <Hixie>
that's unlikely to change

[11:28:01.0000] <Hixie>
in fact the pipeline change made it quite a bit fatter

[11:28:08.0000] <Hixie>
since i have way more IDs now

[11:30:58.0000] <jgraham>
The spec's not done until Mozilla* won't run? [*on Ms2ger's laptop]

[11:31:45.0000] <Ms2ger>
I wonder what it does in Servo

[11:37:29.0000] <gsnedders>
Hixie: can I bat my eyelids and ask for ids on all parse errors again? ;P

[11:58:40.0000] <GPHemsley>
/me wonders aloud (again?) about whether there will ever be an Acid4 test

[11:59:34.0000] <Ms2ger>
No

[12:07:30.0000] <caitp>
so end-tags can have attributes?

[12:07:32.0000] <caitp>
huh

[12:17:59.0000] <Hixie>
gsnedders: unique unchanging ones?

[12:18:07.0000] <Hixie>
gsnedders: what's the use case again?

[12:21:39.0000] <gsnedders>
Hixie: yeah; for the sake of html5lib-tests being able to assert the correct parse-error is being hit

[12:21:55.0000] <gsnedders>
instead of just "a parse error was hit here"

[12:22:06.0000] <Hixie>
is that a good thing? i mean, we don't want to make implementations have to track exactly what parse error was hit

[12:22:11.0000] <Hixie>
it prevents quite a few interesting optimisations

[12:22:26.0000] <Hixie>
e.g. several times i coallesced parse errors

[12:22:49.0000] <gsnedders>
AFAICT you either want to track them exactly or ignore them entirely

[12:22:57.0000] <Hixie>
nah

[12:23:11.0000] <Hixie>
the point of parse errors is to tell the author that there's a problem

[12:23:29.0000] <Hixie>
the author doesn't care whether it came from section 12.6.34.2.4 or section 12.6.33.1.6.4

[12:23:40.0000] <Hixie>
the author just wants to know that their < is missing

[12:23:42.0000] <Hixie>
or whatever

[12:24:14.0000] <Domenic>
TabAtkins: fix the missing </pre> in http://dev.w3.org/csswg/css-color/ so I can tweet about how cool it is?

[12:24:19.0000] <gsnedders>
so html5lib-python I think uses strings that aren't actually entirely unique to deal with stuff like this

[12:24:26.0000] <gsnedders>
so maybe we don't want actual ids

[12:24:46.0000] <gsnedders>
maybe an @data-parse-error='missing <' or smth

[12:25:14.0000] <TabAtkins>
Domenic: Where is it?

[12:25:44.0000] <TabAtkins>
Whoops, it's a missing <code> I think.

[12:25:49.0000] <TabAtkins>
</code>, rather.

[12:26:09.0000] <Hixie>
gsnedders: again, i don't think that works. There are places where I just fire "something's wrong" and it could be any number of parse errors.

[12:26:36.0000] <Hixie>
gsnedders: other places the spec has one parse error line, but the message should vary dramatically in an implementation giving useful advice

[12:28:08.0000] <gsnedders>
I want something that makes sense to test that the implementation does useful advice. I don't care how we do this!

[12:28:21.0000] <TabAtkins>
Domenic: fixed

[12:28:40.0000] <Domenic>
TabAtkins: ah right yeah, code makes more sense

[12:29:31.0000] <Domenic>
TabAtkins: still there "custom stringifiers on the stringifiers object..."

[12:29:50.0000] <TabAtkins>
Sorry, forgot to commit.

[12:29:57.0000] <Hixie>
gsnedders: i'm not sure how the spec can help there

[12:29:59.0000] <TabAtkins>
It was fixed in my local copy, I don't see what the problem si.

[12:30:10.0000] <Hixie>
gsnedders: "useful" is something that is too subjective

[12:40:16.0000] <gsnedders>
/me concludes playing Super Mario Bros is more fun than working out what "useful" is :)

[13:13:26.0000] <Domenic>
Ms2ger: are these the only tests that exist for select? https://github.com/w3c/web-platform-tests/tree/175953ab7f14aedbcf2a5219ede4387bc86a3b91/html/semantics/forms/the-select-element

[13:13:44.0000] <Ms2ger>
Possibly

[13:15:32.0000] <gsnedders>
does anyone have data for how common with/direct-eval are in JS on the web as a whole?

[13:15:47.0000] <caitp>
can we add a test that asserts one particular way to behave when options are dynamically added to a select control?

[13:15:49.0000] <TabAtkins>
Ask on es-discuss, I'm sure someone's got some data.

[13:15:56.0000] <caitp>
i want browsers to do something consistent there :[

[13:16:37.0000] <gsnedders>
TabAtkins: bah, I'm not subscribed to es-discuss any more!

[13:17:30.0000] <jgraham>
gsnedders: Seems unlikely? Well unless people are instrumenting actual js engines I suppose. Are they?

[13:17:30.0000] <Ms2ger>
Good call

[13:20:26.0000] <gsnedders>
jgraham: you could do it at an AST level, and you guys definitely have some instrumentation in SM

[13:20:38.0000] <gsnedders>
jgraham: so you can do it cheaply

[15:11:00.0000] <smaug____>
dglazkov_: so do you or someone else from blink team have plans to go through all the in-doc vs. not-in-doc cases and file spec bugs when stuff should work also in shadow DOM ?

[15:11:30.0000] <smaug____>
currently implementing shadow dom in interoperable way isn't really a trivial task

[15:12:41.0000] <smaug____>
/me will be going through about 800 cases when gecko uses IsInDoc or GetCurrentDoc

[15:14:04.0000] <smaug____>
oh, it wasn't quite that much

[15:14:07.0000] <smaug____>
perhaps only 400

[15:17:54.0000] <mitchell>
Hello.  Would you guys please help me find a list or table of 63 established *-English Braille symbols (1 cell, 6-dots) and their correlating ASCII characters?

[15:19:01.0000] <mitchell>
for instance, http://www.duxburysystems.com/braillechart.asp  but limited to one cell

[15:20:33.0000] <mitchell>
actually, words 63 words instead of characters would be okay too

[15:37:35.0000] <TabAtkins>
mitchell: You looking for the character information? Here's all of Braille in Unicode: http://symbolcodes.tlt.psu.edu/bylanguage/braillechart.html

[15:37:45.0000] <TabAtkins>
But that doesn't help with the definitino of them.  What are you having trouble finding, precisely?

[15:46:47.0000] <mitchell>
TabAtkins: yea, I need an alphabet which gives meaning to those symbols.  my goal is write a 2 character identifier on ~2,000 pieces of paper in both English and Braille.

[15:47:05.0000] <mitchell>
s/alphabet/dictionary

[15:47:21.0000] <TabAtkins>
What's lacking in http://www.duxburysystems.com/images/bana_black.pdf ?

[15:49:04.0000] <mitchell>
I thought it was what I needed at first, and maybe I'm misunderstanding it, because it seems to use multiple cells

[15:49:13.0000] <TabAtkins>
For some words, yes.

[15:49:18.0000] <TabAtkins>
But the letters are single-cell.

[15:49:54.0000] <mitchell>
so, for example "child".  that is 1 cell, and "children" is 2?

[15:51:48.0000] <mitchell>
I think I'm getting a little more clear with it.  I think I'll just need to cross out the multi-cell terms and then it'll be good, hopefully

[15:51:48.0000] <TabAtkins>
The word "child" appears to be, yes.

[15:52:09.0000] <TabAtkins>
Note that "child" apparentlyl has the special rule that it must be surrounded by spaces.

[15:52:59.0000] <mitchell>
whoa, good point

[15:54:12.0000] <jsbell>
nifty, didn't know Braille had an extra layer

[15:54:13.0000] <mitchell>
the pattern that I'm seeing is that I'm basically picking up 2-letter combinations with the remaining 36 (63-27) symbols

[15:54:44.0000] <mitchell>
jsbell: what do you mean by layer?

[15:55:18.0000] <jsbell>
That it's not just 1:1 with English glyphs.

[15:55:34.0000] <TabAtkins>
mitchell: Yeah, it seems like the remaining symbols are for word shortening.

[15:56:01.0000] <jsbell>
Like a standard set of abbreviations that include special use non-letter "glyphs"

[15:56:17.0000] <jsbell>
I wish I was young enough to learn Classic Mayan script. :P

[15:56:43.0000] <caitp->
you are!

[15:57:05.0000] <mitchell>
jsbell: yea, shortened words seems to be common across different Braille systems (as far as my reading today shows)

[15:57:47.0000] <mitchell>
TabAtkins: thanks for helping me understand this chart better

[15:58:41.0000] <TabAtkins>
mitchell: No problem.


2014-07-16
[07:59:39.0000] <gnarf>
anyone know if there is a spec / polyfill implementation for the CSS colors API: http://dev.w3.org/csswg/css-color/#apis ?

[07:59:58.0000] <gnarf>
s/spec/tests/

[08:00:20.0000] <Ms2ger>
Neither

[08:00:37.0000] <gnarf>
I might start working on one / look at turning into jQuery Color 3

[08:00:54.0000] <gnarf>
the api is close enough i could consume it in jQuery color

[08:01:49.0000] <caitp>
i'm surprised lea doesn't have something like that already

[08:40:16.0000] <Domenic>
gnarf: I think that API is less than a week old :)

[08:40:26.0000] <gnarf>
*shrug*

[08:40:32.0000] <gnarf>
worth looking into

[08:40:36.0000] <gnarf>
i already have most of it written

[08:42:44.0000] <Domenic>
definitely! just, i would be surprised if any polyfills existed

[08:43:23.0000] <gnarf>
i'm never surprised when someone beats me to a polyfill though :)

[11:19:32.0000] <smaug____>
Hixie: http://www.whatwg.org/specs/web-apps/current-work/#rules-for-parsing-a-hash-name-reference step 3. What is the context there? "Return the first element" is rather vague. Should it be return the first element in document ... Or is it about the same subtree where img element lives (in case of usamap)?

[11:19:47.0000] <smaug____>
usemap

[11:19:50.0000] <Hixie>
/me looks...

[11:20:46.0000] <Hixie>
hm yeah, it doesn't say which Document, huh

[11:23:06.0000] <Hixie>
smaug____: do you happen to know the right answer?

[11:23:44.0000] <Hixie>
smaug____: i've filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=26359 -- if you happen to know what the compat need is, add a comment; otherwise, you can assume i'm going to make the spec use the Document of the <img> or <object>, not the home subtree

[11:24:13.0000] <smaug____>
yeah, Document sounds better

[11:24:29.0000] <smaug____>
shadow DOM may want some changes, but not sure what kind of

[12:05:02.0000] <caitp>
if you open http://plnkr.co/edit/Wli7OkXQJ2V772jH95rb?p=preview in firefox, is the behaviour in firefox acceptable in terms of the spec? (like, is this an implementation-defined thing where no standard behaviour should ever be expected?)

[12:55:08.0000] <MikeSmith>
caitp: you mean that gecko changes the value the moment you focus on it, instead of waiting for you to actually select it?

[12:55:43.0000] <caitp>
yeah

[12:56:22.0000] <caitp>
it seems to be correct as far as things are defined in the spec, but it still seems really bizarre

[12:58:12.0000] <gsnedders>
caitp: yeah, that's well into impl-defined behaviour

[12:58:48.0000] <caitp>
I don't think that should be implementation defined, because it breaks interoperability under certain circumstances

[12:59:49.0000] <caitp>
we've found a whole pile of interop issues between the different implementations with select controls, it makes things very difficult :(

[13:14:38.0000] <MikeSmith>
caitp: gsnedders I think even if the spec doesn't explicitly prohibit it, that's bad UX for end users, and counter-intuitive for Web developers

[13:15:35.0000] <MikeSmith>
I don't expect my application behavior to change when a user simply changes the focus of a select control without actually you know, intentionally selecting something

[13:18:56.0000] <gsnedders>
I feel like for some of the form widgets many mobile platforms don't have the clear focusing distinction that you get on most desktop OSes

[13:18:57.0000] <caitp>
one of the interns filed a bug about this with gecko, I'm just trying to make a case for it

[13:19:13.0000] <gsnedders>
but maybe that's not true, idk

[13:19:39.0000] <caitp>
well I think it's more that on mobile/touch screens you can't really "hover"

[13:22:52.0000] <MikeSmith>
caitp: hard to judge from that plunk, since when I view it in Nightly on my mobile I don't even get a select control showing up

[13:25:02.0000] <caitp>
yeah, I think plunker has some issues with a good number of browsers, have to talk to ggoodman about that =) it should work better in jsfiddle

[13:25:39.0000] <MikeSmith>
oh http://run.plnkr.co/gZNU4S2M19ttmRa0/ does work on mobile though

[13:26:13.0000] <smaug____>
caitp: what is bizarre in the Gecko behavior ?

[13:26:34.0000] <caitp>
smaug____, the bizarre thing is that the selectedness of options change when you hover the cursor over them

[13:26:36.0000] <smaug____>
/me could be missing something

[13:26:40.0000] <smaug____>
so?

[13:26:54.0000] <caitp>
so, this is not behaviour shared with any other browser on the market, and is kind of unexpected

[13:27:11.0000] <smaug____>
why it is unexpected?

[13:27:14.0000] <MikeSmith>
caitp: and if you use it on mobile the action of changing the focus of the select control does in fact amount to the same action as actually selecting a new value. No clear distinction, as gsnedders pointed out

[13:27:51.0000] <caitp>
yes, but I think that's fine for touch screens

[13:28:09.0000] <caitp>
it's more awkward for actual pointers

[13:28:19.0000] <MikeSmith>
yeah, agreed

[13:28:54.0000] <MikeSmith>
on desktop that's counter-inutitive and badly surprising

[13:29:29.0000] <smaug____>
/me can't understand the issue

[13:30:21.0000] <caitp>
imagine you're ordering a pizza, and you are just reading the menu, and the act of reading the menu causes your credit card to be charged before you've made a decision

[13:30:26.0000] <caitp>
it's kinda like that

[13:30:31.0000] <MikeSmith>
smaug____: a user doesn't expect things to change in an application if they simply just focus on a different option in a select control prior to actually intentionally selecting a different option

[13:31:13.0000] <MikeSmith>
it's a two-step action on desktop, where you have a pointer

[13:32:03.0000] <MikeSmith>
and gecko is prematurely deciding the user has selected something before the user has actually completed the action

[13:33:43.0000] <smaug____>
it is the current selection

[13:34:36.0000] <smaug____>
I don't see the UX issue, but I can see how this could lead to issues if web apps rely on behavior of other browsers

[13:50:50.0000] <gnarf>
TabAtkins: you happen to be around?

[13:52:02.0000] <gnarf>
TabAtkins: looking at implementing some tests / the ecmascript api for css color module 4 - one question i had - how do to deal with out of range values, i.e. 1.1 lightness - 110% ?

[13:52:59.0000] <TabAtkins>
Nothing special. They're valid, and get handled by CSS when you serialize them.

[13:53:46.0000] <gnarf>
to hex?

[13:53:58.0000] <gnarf>
256 -> hex ?

[13:54:00.0000] <TabAtkins>
Is possible to specify colors outside if the sRGB gamut.

[13:54:22.0000] <TabAtkins>
The hex IDL prevents them from going above 255 or below 0

[13:54:48.0000] <gnarf>
aha - i see

[13:54:53.0000] <TabAtkins>
[Clamp] octet does that

[13:54:55.0000] <Domenic>
gnarf: write them as web-platform-tests so you can contribute them to the common browser test suite!

[13:54:58.0000] <gnarf>
miseed that [Clamp] octet

[13:55:56.0000] <MikeSmith>
smaug____: https://bugzilla.mozilla.org/show_bug.cgi?id=1039047 (regarding the select behavior) by way of caitp by way of https://github.com/angular/angular.js/pull/8221

[13:56:53.0000] <caitp>
oh man, our top secret conversation!


2014-07-17
[17:51:48.0000] <MikeSmith>
/me will be busy for the next half hour or so

[19:38:08.0000] <MikeSmith>
https://twitter.com/pamelafox/status/489541624154689536

[19:38:17.0000] <MikeSmith>
"To confirm, "allow-popups" means allow window.open? There's no way to prevent window.prompt/alert, correct?"

[19:38:20.0000] <MikeSmith>
that true?

[19:38:36.0000] <MikeSmith>
Hixie: ☝️

[19:39:12.0000] <caitp->
does it actually mean anything at all in non-IE browsers? afaik all of those properties basically don't work in chrome/ff

[19:39:27.0000] <Domenic>
wat

[19:40:07.0000] <caitp->
certainly anything involving window decorations doesn't work, but from experimentation I've noticed that some other ones didn't either, so I'd be surprised if any of them really worked

[19:40:48.0000] <SamB>
any of what?

[19:41:08.0000] <caitp->
what are they called, the comma-separated options you can pass to window.open

[19:42:09.0000] <caitp->
the interop for those has basically always been a myth

[19:42:37.0000] <caitp->
oh, but I guess allow-popups isn't one of them

[19:42:47.0000] <caitp->
maybe I'm talking out of my ass after a few glasses of wine :)

[19:43:56.0000] <caitp->
are they talking about csp then or something? i'm confused :D

[19:50:28.0000] <MikeSmith>
caitp-: yeah csp

[19:51:10.0000] <MikeSmith>
she was replying to Mike West

[19:52:16.0000] <caitp->
yeah, csp is probably less broken than window.open options

[19:53:31.0000] <MikeSmith>
/me goes back to listening to Bigott's The Reno Poem

[19:53:49.0000] <SamB>
caitp-: you're talking about those evil things that people used to use to pop up browser windows with the %^@@^@ chrome stripped off so you couldn't easily do what you wanted with them?

[19:54:19.0000] <caitp->
yeah, terrible stuff

[19:55:14.0000] <SamB>
best interop there is probably NOP

[19:55:32.0000] <SamB>
for the most part

[19:55:57.0000] <caitp->
i recall there was a thread on blink-dev about making those either actually work, or throwing them away entirely, recently

[19:56:01.0000] <caitp->
can't remember which it was

[19:57:32.0000] <SamB>
maybe some way to slim them down a bit, but let the user unslim at his/her whim, would be acceptable ...

[19:58:46.0000] <caitp->
anyway, it was my misunderstanding of a tweet, I blame alcohol, can't expect me to be fully lucid at any hour, let alone 11pm :)

[20:39:32.0000] <Hixie>
MikeSmith: there's no way to either prevent or allow window.alert and company, correct. I would expect browsers to make sandboxed window.alert() rather uninteresting, though.

[21:27:49.0000] <MikeSmith>
Hixie: ok

[02:02:19.0000] <Ms2ger>
krit, why rename DOMRectList yet again?

[02:02:57.0000] <Ms2ger>
krit, that has a non-trivial engineering cost that could be better used elsewhere

[02:07:21.0000] <krit>
Ms2ger: not that I am favour for renaming it it Legacy... What is the engineering cost? After all, Gecko would require WebKit, Blink and ie I rename it from ClientRectList to the new name anyway.

[02:07:48.0000] <Ms2ger>
Gecko and Servo have renamed ClientRectList already

[02:07:49.0000] <krit>
/me excuse typos, am on my phone

[02:08:13.0000] <Ms2ger>
Haven't webkit and friend?

[02:08:15.0000] <Ms2ger>
friends*

[02:08:36.0000] <krit>
So? If you don't want the renaming, speak up on the mailing list. I renamed it since everyone wanted me to

[02:09:05.0000] <krit>
No, no one renamed it yet

[02:09:12.0000] <Ms2ger>
No one except two

[02:09:32.0000] <Ms2ger>
Alright, I'll complain

[02:09:37.0000] <Ms2ger>
Also, what happened to https://dvcs.w3.org/hg/FXTF/rev/46405013c12f?

[02:09:49.0000] <krit>
Well, it is no bug deal to rename

[02:10:35.0000] <jgraham>
Putting "Legacy" in the name of things is just stupid

[02:10:36.0000] <krit>
Ms2ger: removed ArrayClass by request from hey am

[02:10:43.0000] <krit>
Heycam

[02:10:51.0000] <Ms2ger>
And now added it back?

[02:10:55.0000] <krit>
Ms2ger: but everyone else wanted it back

[02:11:15.0000] <Ms2ger>
At least annevk replied that he's not part of "everyone else"

[02:11:23.0000] <krit>
Ms2ger: yeah, heycam admitted that it might have been a mistake to remove it

[02:13:39.0000] <krit>
Ms2ger: vote for renaming it back on the mailing list and we will see what the TAG thinks about it

[02:15:06.0000] <Ms2ger>
Done

[02:16:17.0000] <Ms2ger>
Anyway, I've already spent more time on this spec than I can justify

[02:47:15.0000] <krit>
Ms2ger: k, thanks

[03:16:15.0000] <JakeA>
Returning true/false with a promise feels really awkward. Eg asyncMap.has(key).then(function(hasKey) { ... }) - I guess it's a lot more natural in async functions

[03:40:45.0000] <JakeA>
…even more awkward with asyncMap.get(key).then(function(item) {  }) - where item is undefined if it's not in the map

[03:43:05.0000] <smaug____>
hayato: so while implementing shadow dom in blink, did anyone go through all the is-in-doc and get-current-doc (which can be null, unlink ownerDoc) cases ?

[03:48:43.0000] <foolip>
Ms2ger, jgraham, I'm thinking about adding some Fullscreen API tests to web-platform-tests, but all but the most trivial require a trusted click event, which would make them manual tests

[03:49:10.0000] <foolip>
In Blink/WebKit the test environment has a way to produce trusted clicks, which is used for this kind of thing

[03:49:28.0000] <Ms2ger>
Gecko has something similar, but jgraham doesn't like it :)

[03:49:39.0000] <Ms2ger>
Maybe WebDriver?

[03:49:47.0000] <jgraham>
I was going to say that I didn't think that anyone liked it :p

[03:49:51.0000] <foolip>
Do you have any ideas about how to write tests so that the tests can be run both manually and automatically?

[03:50:01.0000] <jgraham>
WebDriver is certainly the long-term solution

[03:50:30.0000] <foolip>
ok, I looked a bit at that yesterday actually, but wasn't sure what I was looking at

[03:50:48.0000] <foolip>
are there any existing tests on the form I'm talking about to compare with?

[03:50:49.0000] <jgraham>
Well the problem is that we're not really read to accept webdriver tests yet

[03:51:07.0000] <jgraham>
We need to decide on a client binding

[03:51:19.0000] <smaug____>
testharness could rely on some browser specific library. So when run in Gecko it would use SpecialPowers object to dispatch trusted events

[03:52:17.0000] <foolip>
smaug____: that was basically my thinking, yes

[03:53:08.0000] <jgraham>
smaug____: I think it wouldn't be quite that simple, but yeah, I guess the short term solution is to have a file that is empty by default and vendors can replace to provide a specific implementation of trusted clicks

[03:53:54.0000] <foolip>
I suppose I could also just write manual tests, and then when importing those to Blink add a script that clicks the magic button after onload

[03:54:09.0000] <jgraham>
Yeah

[03:54:10.0000] <foolip>
how would things look with WebDriver, in the shiny future?

[03:55:37.0000] <jgraham>
Well with webdriver I guess you would have a python file that did something like webdriver.get("test.html"); webdriver.getElementByCSSSelector("#button").click()

[03:56:01.0000] <jgraham>
Assuming we have python bindings

[03:56:25.0000] <foolip>
with webdriver, is the python test the top-level thing?

[03:56:36.0000] <foolip>
if so each test would require an identical python counterpart?

[03:56:45.0000] <foolip>
that would be unimpressive

[03:57:24.0000] <jgraham>
It would be interesting if we could invert the control somehow, or use templating

[03:58:06.0000] <foolip>
indeed, something like that

[03:58:27.0000] <jgraham>
e.g have test.webdriver.html with <meta name="webdriver" content="test.py"> and test.py would look like webdriver.get("{{location}}")[...]

[03:59:25.0000] <jgraham>
That actually seems like a pretyt neat solution

[03:59:30.0000] <smaug____>
python?

[03:59:31.0000] <foolip>
are there no JavaScript bindings for WebDriver?

[03:59:40.0000] <jgraham>
There are

[03:59:42.0000] <jgraham>
But

[03:59:47.0000] <jgraham>
They all require node

[03:59:54.0000] <jgraham>
and webdriver is sync

[04:00:09.0000] <jgraham>
So they are all hacks to make js act in a sync way

[04:00:28.0000] <foolip>
hmm

[04:00:54.0000] <jgraham>
I'm not at all crazy about making node a dependency for the testsuite when python already is

[04:01:11.0000] <Ms2ger>
+1

[04:01:17.0000] <smaug____>
js would feel more natural ...

[04:01:17.0000] <foolip>
otherwise a <script language="text/javascript+webdriver"> or something that'll be ignored by the browser could be a way

[04:01:25.0000] <smaug____>
(and js is less horrible language)

[04:01:46.0000] <jgraham>
smaug____: I think that second point is highly debatable :p

[04:02:42.0000] <smaug____>
based on empirical data, me writing python, python is a bad language. Slow to write and easy to make errors ;)

[04:03:01.0000] <smaug____>
and hard to read

[04:03:03.0000] <jgraham>
smaug____: Curiously I have the same experience with js :p

[04:03:17.0000] <jgraham>
But if you think python is hard to read I don't know what to tell you

[04:03:24.0000] <foolip>
so, um, trolling aside, I guess right now I can't make it all nice and pretty

[04:03:42.0000] <jgraham>
foolip: Not really, sorry

[04:04:06.0000] <Ms2ger>
We all know smaug____ has poor taste in languages :)

[04:04:20.0000] <foolip>
so I think I'll try the manual test thing, and include a script that inserts a button to click, which could be modified when integrated with Blink or Gecko

[04:04:51.0000] <foolip>
unfortunately those tests will have -manual in the name, which may cause problems

[04:05:01.0000] <jgraham>
Given that we haven't really solved "have a testsuite requiring just web-exposed features that all browsers actually run", getting one with opt-in to non-web-exposed features hasn't been a priority

[04:05:26.0000] <foolip>
or would it be ok to have them fail by default?

[04:06:02.0000] <jgraham>
Well I don't mind tests that fail, but tests that *can't* pass even if you implement the feature are going to upset peopke

[04:06:05.0000] <jgraham>
*people

[04:06:43.0000] <foolip>
so maybe having them manual by default is the most conservative option

[04:07:31.0000] <jgraham>
Yeah, unfortunately I think it is

[04:08:33.0000] <jgraham>
Assuming we eventually solve this via webdriver, I guess there might be a plan by, say, the end of the year to get that working

[04:09:04.0000] <foolip>
ok, this stuff is hard, it seems

[04:11:49.0000] <jgraham>
Yeah, it's hard because it's not cross browser

[04:12:47.0000] <jgraham>
I mean we could probably solve it in a slightly hacky way, but I'm not super-desperate to extend the current gecko SpecialPowers stuff into wpt

[04:14:00.0000] <foolip>
One thing I realize now is that some tests will actually need trusted clicks multiple times, when entering nested fullscreen

[04:14:31.0000] <foolip>
the way the WebKit tests are written is to have a runWithKeyDown() helper that runs your function in a trusted event

[04:15:01.0000] <foolip>
converting that to WebDriver would require a way to ask the WebDriver to click somewhere, but does there exist a communication channel to make that request?

[04:17:17.0000] <jgraham>
Yeah, you can return data if needed

[04:17:27.0000] <foolip>
kind of like postMessage?

[04:17:49.0000] <foolip>
returning data once isn't going to be good enough I think

[04:18:27.0000] <jgraham>
Well the API isn't event based, so it's hard to react to a stream of events

[04:19:06.0000] <jgraham>
But you can do things like executeAsyncScript() which runs a function in the scope of the page, and can poll for data

[04:19:25.0000] <foolip>
ok, so you could fall back to polling for a button to press?

[04:19:35.0000] <smaug____>
how well is the svg spec maintained ?

[04:20:03.0000] <smaug____>
shepazu might know

[04:20:47.0000] <jgraham>
foolip: If you only need to find a single button and there is an event you could executeAsyncScript(onevent = function(event) {callback(event.button)}) or something

[04:20:58.0000] <jgraham>
Or do that once per button you need to find

[04:24:05.0000] <jgraham>
It's not that intuitive if you come from a browser background

[04:24:46.0000] <jgraham>
It would have worked better if they'd made the API async. But the theory is that people testing web sites are typically not comforatble with that kind of programming :|

[04:37:51.0000] <foolip>
ok...

[04:38:25.0000] <foolip>
I guess it's all hypothetical until I can actually try WebDriver in wpt

[04:42:53.0000] <jgraham>
Yeah, I guess it's a worry that trying to seperate out this kind of priviledged action will be less convenient than SpecialPowers-like APIs which just allow people to wantonly mix browser-specific stuff into otherwise cross-browser tests, so they won't bother to write cross-browser tests at all

[05:33:55.0000] <MikeSmit1>
smaug____: which SVG spec? 1.1?

[05:34:29.0000] <MikeSmit1>
smaug____: krit could help probably

[05:35:38.0000] <krit>
smaug____: SVG2? Depending of the kind of issue you have, pretty responsive https://svgwg.org/svg2-draft/

[05:36:07.0000] <smaug____>
krit: I'm just going through is-in-doc checks

[05:36:12.0000] <krit>
smaug____: basic maintenance of SVG1.1… don’t expect updates till the next errata

[05:36:21.0000] <smaug____>
in order to figure out how shadow dom actually should work

[05:36:46.0000] <krit>
smaug____: oh, shadow-dom :) well, that is very vague at the moment

[05:37:20.0000] <krit>
smaug____: you can also email on www-svg and might get some feedback from Blink… they actively based <use> on shadow DOM

[05:39:53.0000] <smaug____>
krit: well, in blink shadow dom + is-in-doc is rather random

[05:40:01.0000] <smaug____>
things work against the current specs etc

[05:40:39.0000] <smaug____>
I'm mainly trying to figure out how on earth to implement shadow dom in interoperable way

[05:41:25.0000] <krit>
smaug____: in Blink?

[05:41:32.0000] <krit>
smaug____: or across HTML/SVG ?

[05:41:49.0000] <smaug____>
well, all that

[05:42:43.0000] <krit>
smaug____: ok, IIRC this is still an open question on the Shadow DOM side (I thought you meant <use> based on shadow DOM because I recently was speaking with someone about that)

[05:43:29.0000] <krit>
smaug____: Many thinks in the Shadow DOM spec require HTMLElements

[05:43:40.0000] <krit>
smaug____: currently SVGElement does not inherit from HTMLElement

[05:43:57.0000] <smaug____>
right

[05:44:26.0000] <krit>
smaug____: you should ask dglazkov_ when it comes to Shadow DOM. He might have a way forward

[05:55:11.0000] <JakeA>
Are there any APIs that suggest a response has status 200 (vs 4**/5**), even if the response is from another origin, aside from appcache?

[05:55:19.0000] <JakeA>
(assuming the request is no-cors)

[06:04:55.0000] <MikeSmith>
JakeA: none I can think of. Not that my knowledge could be considered broad..

[06:06:32.0000] <MikeSmith>
/me looks at https://dvcs.w3.org/hg/dap/raw-file/tip/discovery-api/Overview.html

[06:07:15.0000] <JakeA>
MikeSmith: trying to work out if the appcache thing was a mistake that shouldn't be repeated

[06:09:29.0000] <MikeSmith>
JakeA: I think it wasn't an unintentional mistake at the time it was specced at least (as opposed to in hindsight now). But you'd probably want to hear from the guy who wrote it, as far as the rationale

[06:09:43.0000] <MikeSmith>
provided he still remembers at this point

[07:03:00.0000] <Domenic>
Does any browser implement add*Event*Listener for MediaQueryList?

[07:03:07.0000] <Ms2ger>
I doubt it

[07:03:28.0000] <jgraham>
foolip: So I realised on the tube that something like <script type="text/webdriver+python">getElement("#button").click()</script> would be rather straightforward to implement

[07:03:29.0000] <Domenic>
yeah MDN was unhelpful. but i noticed today for the first time that the spec included EventTarget

[07:04:23.0000] <Ms2ger>
It was discussed a while ago

[08:14:06.0000] <caitp>
you mean because it's not implemented in blink?

[09:10:20.0000] <Ms2ger>
https://twitter.com/Aeyoun/status/489790384193548288

[09:17:50.0000] <Ms2ger>
showModalDialog ... was never formally standardized

[09:17:52.0000] <Ms2ger>
abarth, wat

[09:21:44.0000] <jgraham>
Ms2ger: Really?

[09:34:29.0000] <abarth>
Ms2ger: hi

[09:35:02.0000] <Ms2ger>
How is that claim true?

[09:35:39.0000] <abarth>
dunno

[09:35:47.0000] <Ms2ger>
Why'd you make it, then?

[09:36:23.0000] <abarth>
i didn't write the blog post

[09:36:30.0000] <abarth>
despite it having my name attached to it :(

[09:36:52.0000] <Ms2ger>
That seems like a poor situation

[09:37:32.0000] <abarth>
indeed

[09:38:17.0000] <SimonSapin>
Hixie: http://whatwg.org/html#quotes uses selectors like :root:lang(af), :not(:lang(af)) > :lang(af). Why this rather than just :lang(af)? AFAICT they’re equivalent, assuming no other 'quotes' declaration in the UA stylesheet.

[09:41:17.0000] <Ms2ger>
I think the issue was with <p lang=en>Voltaire said <q lang=fr>quelque chose</q>

[09:41:32.0000] <Ms2ger>
Does quotes apply to the element it's set on?

[09:41:38.0000] <jgraham>
/me is not down with the kids enough to know which blog post is being refered to

[09:42:24.0000] <Ms2ger>
http://blog.chromium.org/2014/07/disabling-showmodaldialog.html

[09:51:47.0000] <Hixie>
SimonSapin: the problem is other 'quotes' declarations in the UA stylesheet

[09:51:56.0000] <Hixie>
SimonSapin: or the author style sheet

[09:57:14.0000] <SimonSapin>
oh, right. In <div lang=en><p style="quotes: '«' '»'"><q>, :lang(en) would apply instead of the inherited value.

[09:58:08.0000] <Hixie>
right

[09:58:18.0000] <Hixie>
there's a bug on the current selector though

[09:58:24.0000] <Hixie>
arguably it's wrong

[09:58:27.0000] <Hixie>
i forget the problem

[09:58:35.0000] <Hixie>
something about what language to use on the quotes itself, or something

[09:58:44.0000] <Hixie>
or whether to reset the counter when you change languages

[10:05:31.0000] <Hixie>
can i just say that specificity was a mistake

[10:05:44.0000] <Hixie>
a cool seeming, clever-sounding, mistake.

[10:08:14.0000] <jgraham>
s/specificity/css/ ? :)

[10:10:15.0000] <Ms2ger>
s/css/the web/?

[10:12:56.0000] <Hixie>
css and the web as a whole aren't mistakes, they're good ideas with mistakes in them

[10:13:02.0000] <Hixie>
specificity is just a mistake.

[10:14:11.0000] <SimonSapin>
"W3C Invites Implementations of Polyglot Markup: A robust profile of the HTML5 vocabulary"

[10:15:33.0000] <Ms2ger>
Of course

[10:38:16.0000] <jgraham>
Hixie: CSS isn't a mistake, but if you started from a clean slate today you would end up with something pretty different, I think

[10:38:39.0000] <Ms2ger>
With or without the experience we've had with CSS?

[10:43:14.0000] <jgraham>
Either?

[10:47:55.0000] <Hixie>
jgraham: yeah. like, no specificity. :-)

[10:48:06.0000] <Hixie>
jgraham: and pretty different layout model primitives

[10:49:58.0000] <astearns>
and presumably none of these: http://wiki.csswg.org/ideas/mistakes

[10:50:32.0000] <jgraham>
I was mostly thinking of the layout model primitives

[10:51:18.0000] <jgraham>
And the sort of combinatorial explosion of complexity that happens every time you add a new one

[10:51:39.0000] <Domenic>
I really like that mistakes page

[10:51:46.0000] <Domenic>
it humanizes the CSSWG

[10:59:42.0000] <Hixie>
some things in that list are wrong

[10:59:46.0000] <Hixie>
e.g. "Table layout should be sane" isn't a CSS mistake

[10:59:59.0000] <Hixie>
it would have been far worse for CSS to not be compatible with what browsers already had

[11:00:52.0000] <Hixie>
and specificity is missing from that list :-)

[11:37:33.0000] <gsnedders>
It's a problem with CSS, if you call them mistakes. Whether the CSS WG could do anything about them is tangential.

[12:29:43.0000] <TabAtkins>
Someday fantasai and I will finish nailing down the actual layout primitives, so it'll at least be clear *what* things are exploding in complexity when you add a new one.

[13:09:34.0000] <mathiasbynens>
Domenic: re: https://github.com/tc39/test262/pull/4#issuecomment-49222581 sure, once I get back from vacation :)

[13:09:45.0000] <Domenic>
mathiasbynens: awesome :)

[13:10:03.0000] <mathiasbynens>
Domenic: has there been any discussion on what to do with JS tests in https://github.com/w3c/web-platform-tests?

[13:11:05.0000] <mathiasbynens>
WPT has a lower barrier for entry (no CLA signing etc.) but test262 has a better structure, at least for JS specifically

[13:11:49.0000] <Domenic>
mathiasbynens: I was not aware that those tests existed; I don't think anyone else was either.

[13:14:01.0000] <gsnedders>
mathiasbynens: how many of them are correct per ES6?

[13:14:40.0000] <mathiasbynens>
gsnedders: not sure

[13:15:00.0000] <mathiasbynens>
but it seems like something can be done now to avoid duplicate efforts in the future

[13:15:13.0000] <mathiasbynens>
even if it’s just adding a note to the WPT readme

[13:16:38.0000] <gsnedders>
it'd be nice to look through opjsunit too, but most of that is either really basic stuff or regression tests

[13:17:55.0000] <mathiasbynens>
i need to port http://mathias.html5.org/tests/javascript/ too (only the idenfitier tests need updating as per ES6)

[13:48:52.0000] <mathiasbynens>
JakeA: can you confirm that http://www.chromestatus.com/features/6561526227927040 should be moved to M38?

[13:57:01.0000] <JakeA>
mathiasbynens: yes

[14:19:07.0000] <Domenic>
A lot of stuff on that page is not up to date with blink-dev announcements, at least this morning

[14:19:46.0000] <mathiasbynens>
ok, updated the SW section. you guys should probably get edit access ;)

[14:21:21.0000] <Domenic>
JakeA: https://jakearchibald.github.io/isserviceworkerready/ doesn't reflect that Chrome 36 fixed Promise.resolve

[14:22:57.0000] <mathiasbynens>
http://domenic.me/aplus-tests-against-the-browser/ went from ~150 to 24 failures because of that

[14:25:47.0000] <JakeA>
Domenic: will update, cheers

[14:33:03.0000] <tobie_>
 JakeA: have you considered returning Promise.race() for entries missing in the cache as suggested here: http://esdiscuss.org/topic/promise-any#content-7

[14:33:38.0000] <TabAtkins>
tobie_: "Returning promise.race()" is a weird way to say "return an eternally pending promise".

[14:34:56.0000] <tobie_>
TabAtkins: well, it's a weird way to describe a weird concept. So it might be fitting.

[14:35:07.0000] <TabAtkins>
What's weird about a pending promise?

[14:36:13.0000] <tobie_>
TabAtkins: nothing.

[14:36:19.0000] <TabAtkins>
EXACTLY

[14:36:35.0000] <tobie_>
TabAtkins: an *eternally* pending one, on the other hand…

[14:36:53.0000] <TabAtkins>
At least say "new Promise()". ^_^

[14:37:08.0000] <tobie_>
That throws.

[14:37:39.0000] <tobie_>
(not sure if impl or spec issue.)

[14:37:40.0000] <TabAtkins>
new Promise(function(){})

[14:37:45.0000] <TabAtkins>
Probably on purpose.

[14:41:06.0000] <tobie_>
That indeed reads better (than Promise.race()). Unsure why scott used Promise.race() instead.

[14:41:17.0000] <TabAtkins>
It technically does the same thing.

[14:42:15.0000] <tobie_>
Well, sure, but one expresses the intent a lot more clearly. :)

[14:42:22.0000] <TabAtkins>
Indeed. ^_^

[14:45:38.0000] <tobie_>
I'm curious as to whether returning an eternally pending promise works accidentally for this given cache/network race scenario or has other interesting properties.

[14:46:15.0000] <TabAtkins>
Depends on what you mean by "accidentally". It avoids triggering the race end-times behavior.

[14:46:45.0000] <tobie_>
Well sure, I understand the how it works in that case.

[14:48:11.0000] <tobie_>
JakeA tweeted earlier about whether cache.get(missingEntry) should resolve to undefined or reject.

[14:49:23.0000] <tobie_>
And both seem not ideal. Which is why I find this seemingly weird return an eternally pending promise suggestion at least worth looking into.

[14:50:11.0000] <tobie_>
s/And both seem not/Neither seem/

[14:56:02.0000] <TabAtkins>
Hmm, interesting.

[14:56:35.0000] <TabAtkins>
I don't think that eternally-pending is very great, though it has some interesting properties.

[14:56:51.0000] <TabAtkins>
It doesn't mix with future "await", for example.

[14:57:27.0000] <TabAtkins>
(You'd have to guard every get() with a Promise.race(cache.get(), Promise.timeout(...)), for example.)

[15:09:50.0000] <tobie_>
Not sure. Wasn't he suggesting resolving the initial promise with an an eternally pending promise? (Not sure if that changes anything.)

[15:10:25.0000] <TabAtkins>
"the initial promise"?

[15:47:16.0000] <tobie_>
TabAtkins: the promise returned by cache.get would get "resolved" with an eternally pending promise as a value.

[15:47:46.0000] <TabAtkins>
I don't think Jake was suggesting that, but I might need to reread his post.

[15:47:59.0000] <tobie_>
TabAtkins: Jake wasn't. Scott was.

[15:48:37.0000] <tobie_>
TabAtkins: http://esdiscuss.org/topic/promise-any#content-7

[15:48:54.0000] <TabAtkins>
Ah, yes.

[15:49:17.0000] <TabAtkins>
Still, bad idea. It makes .race() "just work", but has a number of bad properties I don't think we should accept.

[15:49:44.0000] <TabAtkins>
For example, you can't ever tell via .get() that the key wasn't in the map.

[15:50:22.0000] <TabAtkins>
We shouldn't *ever* return an eternally-pending promise from UA operations, because once we get "await", it'll be a footgun that freezes your code execution.

[15:50:56.0000] <Hixie>
will we always know they won't be eternal?

[15:50:59.0000] <TabAtkins>
(It's okay if something *ends up* as eternally-pending for outside reasons, like a network request that never happens to complete, but it shouldn't happen when we have control over everything.)

[15:51:44.0000] <Hixie>
ah, fair enough

[15:52:07.0000] <Hixie>
though usually if you have complete control over everything, you don't need to use a promise :-)

[15:52:20.0000] <tobie_>
TabAtkins: yeah, so that was my initial question. Is the the fact it makes .run() just work accidental or is there something more interesting behind these eternally pending promise that would make it a worthwhile pattern to use.

[15:52:42.0000] <tobie_>
Sounds like the answer is: nope that was accidental.

[15:53:40.0000] <SamB>
TabAtkins: are you saying that if it can be determined that a promise that already got returned is never gonna come back, it should then fail unless the browser has decided to apply sanctions to the relevant page anyway?

[15:58:09.0000] <TabAtkins>
tobie_: Okay, in that context, definitely accidental.  It just happens to prevent .race() from prematurely ending.

[15:59:48.0000] <tobie_>
How would the UA know about that in all but the most trivial cases? (Sounds like the halting problem to me.)

[16:01:59.0000] <TabAtkins>
tobie_: Right, accidental.  It just happens to be what's needed to keep .race() from ending prematurely.

[16:03:24.0000] <Hixie>
tobie_: the UA wouldn't know per se, but the UA implementor can prove it in many cases

[16:08:27.0000] <SamB>
tobie_: obviously I'm not saying this should happen in general, but there are often spots in the code where the UI implementor will know stuff like "this operation can't possibly complete anymore" and write it in a comment ...

[16:09:36.0000] <TabAtkins>
SamB: No, I'm just saying that a UA should never do the equivalent of "return new Promise(function(){});" in its code.

[16:09:50.0000] <TabAtkins>
That is, they should never return a promise that, intentionally, doesn't return.

[16:10:40.0000] <SamB>
/me is now confused about whether promises are about lazy evaluation or async I/O

[16:11:34.0000] <TabAtkins>
Both!

[16:11:42.0000] <SamB>
so I'm not the only one then!

[16:11:57.0000] <Hixie>
they can do both, and other stuff

[16:12:04.0000] <SamB>
sounds overloaded

[16:12:06.0000] <TabAtkins>
(And the conflict between those two sometimes means you're conflicted on whether to fulfill with a "kinda failure" value, or reject with an error.

[16:12:10.0000] <TabAtkins>
)

[16:12:18.0000] <SamB>
are they short for "campaign promises"

[16:12:20.0000] <Hixie>
that's like saying a function can be used for I/O and calculation, and is therefore overloaded...

[16:12:36.0000] <SamB>
Hixie: yeah

[16:12:37.0000] <TabAtkins>
Like what Jake is stressing over - whether cache.get(), when the key isn't in the cache, should fulfill with undefined, or reject with a NotFoundError.

[16:12:59.0000] <SamB>
Hixie: if it's for calculation, it should be a pure function that doesn't have any side effects

[16:13:06.0000] <SamB>
or, well, effects

[16:13:49.0000] <Hixie>
so a function that does I/O should never e.g. concatenate a path and a filename? :-)

[16:13:57.0000] <Hixie>
because that's a calculation? :-)

[16:15:51.0000] <SamB>
well, if it involves IO it's stuck in the IO monad, obviously

[16:15:58.0000] <SamB>
;-P

[16:16:02.0000] <TabAtkins>
Promises, the *construct*, can be used for plenty of things.  They're a pretty general tool for representing any async computation.

[16:16:11.0000] <TabAtkins>
Any individual promise will only be used for one thing, of course.

[16:16:22.0000] <SamB>
TabAtkins: one can only hope!

[16:16:25.0000] <TabAtkins>
Objecting to Promises being used for multiple things is like objecting to monads. ^_^

[16:16:42.0000] <SamB>
perhaps it would be helpful to have names for typical genres of promise

[16:17:55.0000] <SamB>
(I'm not saying that APIs should actually include those names, mind you; but they could be useful in API documentation.)

[16:19:47.0000] <TabAtkins>
So far we haven't been using them for lazy eval, so it's not important yet.

[16:19:52.0000] <SamB>
/me tries to understand what, exactly, a Monad Objector would do

[16:20:16.0000] <TabAtkins>
Go read es-discuss when we were discussing promises, and you'll see.

[16:20:38.0000] <TabAtkins>
(Lots of people opposed to the "complexity" of monadic promises, because they don't understand what monads are.)

[16:20:51.0000] <TabAtkins>
It's because "monad" is a stupid ugly name that should die, of course, but still.

[16:21:22.0000] <SamB>
maybe binding promises would be a better name for such a thing

[16:21:35.0000] <SamB>
or not, that might be too punny

[16:21:44.0000] <TabAtkins>
I think actual lazy evalutation as a use for promises is looked down on, actually.

[16:21:54.0000] <TabAtkins>
It means the promise waiting until it gets a listener to do some work.

[16:22:40.0000] <SamB>
TabAtkins: that's how lazy evaluation works, yes ;-)

[16:23:31.0000] <TabAtkins>
What I mean is, you shouldn't use promises for that.  ^_^  At least, not directly.  Returning a thunk which you can *force* to evaluate (and when then returns a promise for such) is fine.

[16:23:35.0000] <tokebloke>
Um... what the hell is a stylesheet with a href like this? <link href="//b.example.com/blabla.css"?

[16:23:46.0000] <tokebloke>
Two //s in the beginning followed by a hostname...

[16:23:49.0000] <TabAtkins>
tokebloke: //foo.com is a scheme-relative url.

[16:23:59.0000] <TabAtkins>
Means it'll use the same scheme (http or https) as the base url.

[16:24:00.0000] <tokebloke>
Really? You can do that?!

[16:24:07.0000] <TabAtkins>
Yup, supported everywhere.

[16:24:10.0000] <tokebloke>
...

[16:24:13.0000] <Domenic>
anything but a promise for undefined is a horrible idea.

[16:24:21.0000] <tokebloke>
This piece of knowledge could've saved me hundreds of hours...

[16:24:36.0000] <TabAtkins>
Domenic: I'm pretty sure I agree with you.

[16:25:06.0000] <TabAtkins>
Though the idea of using rejection as a control-flow mechanism is intriguing, it really should be reserved for the same stuff that we'd throw errors for in sync code.

[16:25:15.0000] <TabAtkins>
(Because it'll turn into errors when we get "await".)

[16:25:18.0000] <Domenic>
TabAtkins: BTW I wanted to +1 your reply in pretty much every aspect. But I thought that would be contentless so I did not.

[16:25:34.0000] <TabAtkins>
Which one?

[16:25:43.0000] <TabAtkins>
/me has been doing too manyt hings today.

[16:25:46.0000] <Domenic>
To the Promise.any thread

[16:25:52.0000] <TabAtkins>
Ah, kk.

[16:30:26.0000] <tokebloke>
RSS feeds and HTML pages must be the most abused standards...

[16:30:39.0000] <tokebloke>
People just type whatever the hell they feel like with no regard to the standards.

[16:30:44.0000] <tokebloke>
Or logic, or common sense.

[16:30:45.0000] <TabAtkins>
The "thunk" thing is similar to what I specced for FontFace, for example.  You can construct a FontFace with a url, and it doesn't do anything immediately.  If you observe the load status via .ready(), still nothing.  You have to explicitly ask it to start loading, via .load(), to get it to start doing work, and it returns a Promise at that point for the

[16:30:45.0000] <TabAtkins>
completion fo the work.

[16:30:53.0000] <TabAtkins>
tokebloke: See /topic.

[16:31:24.0000] <tokebloke>
:|

[16:46:11.0000] <SamB>
tokebloke: I'm sorry about your wasted hours!

[16:46:33.0000] <SamB>
and yes, RSS and HTML *are* pretty darn abused

[16:48:07.0000] <SamB>
I should like to see an abuse of RSS 3.0, though, for some reason ;-)

[16:50:35.0000] <SamB>
(See <http://www.aaronsw.com/weblog/000574> and <http://www.aaronsw.com/2002/rss30>)

[16:57:24.0000] <tokebloke>
I hate finding out actual useful stuff like that.


2014-07-18
[17:06:16.0000] <SamB>
why does everyone know zooko, anyway

[21:43:40.0000] <SamB>
/me does tend to agree that trying to apply monads in a system without anything at all resembling HM-typing results in a great deal of incomprehension ...

[22:23:25.0000] <SamB>
now, nested promises, those I can understand readily

[22:34:08.0000] <hayato>
smaug____: Good point. I guess no one. AFAIK, there hasn't been much attention on that from developers. We should go though all usage of 'in a Document'.

[22:36:23.0000] <hayato>
smaug____: does get-current-doc mean owerDocument property?

[22:36:50.0000] <SamB>
krit: HTMLElement isn't renamed to Element yet?

[02:42:03.0000] <tobie_>
JakeA: sorry for the confusion between the FetchStore and FetchStores APIs.

[02:42:31.0000] <JakeA>
tobie_: No worries, sorry for the terse reply. It was 2am & I'd been woken by a thunderstorm

[02:42:55.0000] <tobie_>
np: I'm getting a hang of what bothers me with the current API.

[02:43:06.0000] <tobie_>
And have a suggestion to make.

[02:43:20.0000] <Ms2ger>
mathiasbynens, the js tests in wpt live there because test262 never used to accept contributions

[02:43:27.0000] <jgraham>
JakeA: You too, huh

[02:44:02.0000] <tobie_>
Ms2ger: I think that's finally getting fixed now.

[02:44:21.0000] <JakeA>
jgraham: yeah, it was kind amazing to watch though

[02:44:27.0000] <JakeA>
kinda*

[02:44:39.0000] <tobie_>
JakeA: here's the APIs of FS and FSs side by side, for comparison: https://gist.github.com/tobie/ecc0768343f15870ae37

[02:45:01.0000] <tobie_>
FSs only operates on stores except for match.

[02:45:08.0000] <Ms2ger>
I still think we should merge test262 into wpt, but I'm not going to spend time arguing with tc39

[02:45:26.0000] <tobie_>
Ms2ger: I agree with both of these comments.

[02:45:38.0000] <JakeA>
tobie_: Yeah, it's a convenience method, but really handy in practice

[02:45:54.0000] <tobie_>
JakeA: Have you considered moving it to the service worker instead?

[02:45:58.0000] <Ms2ger>
If only I was at Google, then I had someone to litigate for me at standard bodies :)

[02:46:19.0000] <JakeA>
tobie_: It's useful for anything that uses FetchStores

[02:47:00.0000] <tobie_>
JakeA: that's a good point.

[02:47:38.0000] <tobie_>
JakeA: are there plans to extend FetchStores beyond service workers, though?

[02:47:46.0000] <JakeA>
tobie_: Eg, if you're wanting to update some page content from the cache then go to the network for fresh content (or race the two), being able to do fetchStores.match('/api.json').then(r => r.body.response).then(updatePage) is useful

[02:47:51.0000] <jgraham>
Ms2ger: What about Attorney Anne? ;)

[02:48:01.0000] <JakeA>
tobie_: I want it on the window object from the start

[02:48:20.0000] <Ms2ger>
Is Attorney Anne back from vacation yet?

[02:48:32.0000] <jgraham>
No. It is still July

[02:48:45.0000] <Ms2ger>
SamB, HTMLElement != Element

[02:49:49.0000] <JakeA>
tobie_: TabAtkins: Having a debate et un on the reject vs resolve(undefined) thing https://github.com/slightlyoff/ServiceWorker/issues/374

[02:49:54.0000] <tobie_>
JakeA: mmm. Shouldn't you just do fetch('/api.json').then(r => r.body.response).then(updatePage) in that case and let the SW handle the caching?

[02:50:26.0000] <JakeA>
Should be fetchStores.match('/api.json').then(r => r.body.asJSON()).then(updatePage) - sorry am le tired

[02:51:07.0000] <JakeA>
tobie_: Nah, you want the page to make two requests. One to the network via the serviceworker & one just from the cache

[02:51:31.0000] <JakeA>
tobie_: You could do both via the serviceworker, using headers or a querystring to make sure the sw gets the content from the correct place

[02:51:43.0000] <JakeA>
tobie_: But it's simpler for the page just to access the cache

[02:52:51.0000] <JakeA>
tobie_: the in-page code would look like https://gist.github.com/jakearchibald/766e0bffb87c87baeba3

[02:57:16.0000] <tobie_>
JakeA: The use case is display cached content immediately if available, update when fresh content comes in, right?

[02:58:26.0000] <JakeA>
tobie_: yep, which is the super A+ offline-first way to do things (Twitter native app does the same)

[02:59:23.0000] <tobie_>
JakeA: thankfully, Twitter knows better and just indicates fresh content is available.

[03:00:08.0000] <tobie_>
JakeA: the auto-replace with fresh content found elsewhere is terrible UX.

[03:00:13.0000] <JakeA>
tobie_: Well, it adds the new content but updates the scroll position so you're looking at the old content still, which is great

[03:00:49.0000] <JakeA>
tobie_: yeah, there's a few places you can get away with it, but generally it's bad. The G+ app used to do it.

[03:01:10.0000] <JakeA>
Actually, I think Facebook does that

[03:01:14.0000] <JakeA>
still

[03:01:23.0000] <tobie_>
JakeA: no comments.

[03:01:28.0000] <tobie_>
:D

[03:01:28.0000] <JakeA>
:D

[03:02:26.0000] <tobie_>
JakeA: OK, I think you're making a convincing argument that FetchStores belongs in window.

[03:02:56.0000] <tobie_>
(in window too).

[03:04:14.0000] <JakeA>
tobie_: It's unique to the origin too, like localStorage etc. If it stays in the sw people think it's unique to the sw

[03:05:33.0000] <tobie_>
that doesn't bother me that much.

[03:08:27.0000] <tobie_>
JakeA: OK, so my proposal to move .match() on the SW itself doesn't work. :/

[03:09:51.0000] <JakeA>
tobie_: What's the problem with .match on the FetchStores? It's just "give me a match from any store". Would matchAny help?

[03:14:56.0000] <tobie_>
JakeA: so the benefits of using just .match is that it Just Works whether you're using FSs or FS.

[03:15:19.0000] <tobie_>
(also its short, which people tend to prefer).

[03:16:10.0000] <tobie_>
The downsides, however, is it blurs the lines between FSs and FS.

[03:17:16.0000] <tobie_>
So as a consumer of those APIs I'm left wondering why FSs doesn't have matchAll.

[03:18:01.0000] <tobie_>
JakeA: Similar issue as to having FSs.get without having a FSs.set BTW.

[03:19:18.0000] <JakeA>
tobie_: It could have a matchAll

[03:19:52.0000] <JakeA>
tobie_: If you allow .set you can have the same store existing in fetchStores under multiple names, which is messy

[03:20:17.0000] <tobie_>
you could have that throw, no?

[03:22:36.0000] <JakeA>
tobie_: Yep, or just make it not-possible as in the current design

[03:22:39.0000] <tobie_>
So yeah, I think renaming FSs.match to FSs.matchRequest / FSs.matchAny / something that clearly marks it as a convenience method that operates directly on the requests rather than on the stores would make the whole API a lot clearer if a tad more verbose.

[03:23:13.0000] <JakeA>
tobie_: the create/get pattern is used in databases

[03:23:38.0000] <tobie_>
it's more commonly create/find

[03:23:41.0000] <tobie_>
no?

[03:24:52.0000] <JakeA>
tobie_: in IDB it's create/get, in mysql it's create/use

[03:25:17.0000] <tobie_>
oh boy, if we use IDB as an example we're doomed.

[03:26:00.0000] <JakeA>
I know, but just because idb is bad doesn't mean every pattern they exhibit is wrong

[03:26:30.0000] <tobie_>
I know. :)

[03:26:53.0000] <tobie_>
I'm used to seing get/set get/post/put/delete create/find create/select but create/get, not so much, tbh

[03:27:11.0000] <Ms2ger>
Everything's bad, so just throw consistency out of the window

[03:27:46.0000] <tobie_>
Ms2ger: honest question, what's better, consistency with a crap API or inconsistency with a Possibly better one?

[03:27:47.0000] <JakeA>
Anne suggested var store = new FetchStore("name"); fetchStores.add(store);

[03:28:03.0000] <JakeA>
fetchStores.get("name")

[03:28:29.0000] <JakeA>
Where fetchStores.add would throw if it already contains a store with a given name

[03:28:56.0000] <JakeA>
That would make Domenic happier I think.

[03:29:29.0000] <tobie_>
Sounds like it from his comments on the issue.

[03:31:15.0000] <JakeA>
I prefer fetchStores.create('name').then(store => store.add(urls))

[03:31:16.0000] <JakeA>
vs var store('name'); Promise.all([store.add(urls), fetchStores.add(store)]);

[03:31:35.0000] <JakeA>
ffs

[03:31:50.0000] <JakeA>
var store = new FetchStore('name'); Promise.all([store.add(urls), fetchStores.add(store)]);

[03:37:33.0000] <tobie_>
Yup. I can see that causing lots of issues down the line.

[03:38:16.0000] <tobie_>
A whole bunch of examples I saw actually forget to wait for the store to be saved to disk before moving on to the next thing.

[03:44:53.0000] <tobie_>
JakeA: I guess this doesn work because fetchStores.add takes multiple stores, right? fetchStores.add(new FetchStore("foo")).then(store => store.add(urls))

[03:46:44.0000] <JakeA>
tobie_: If .add resolves with the added store, that works

[03:47:36.0000] <tobie_>
Well, unless .add accepts multiple arguments, in which case... :(  fetchStores.add(new FetchStore("foo")).then(stores => stores[0].add(urls))

[03:48:21.0000] <JakeA>
tobie_: Yeah, I don't like the "multiple args resolve to array" pattern. I'd rather be like Promise.all and take an array & resolve to an array

[03:48:36.0000] <JakeA>
tobie_: Which is why I changed store.add to take an array

[03:48:51.0000] <tobie_>
Man, I wish JS had a way to abstract collections and single items somehow

[03:50:22.0000] <tobie_>
JakeA: both patterns are terrible, tbh.

[03:51:05.0000] <tobie_>
like arr.push.apply(arr, [1, 2, 3]);

[03:52:07.0000] <tobie_>
Or when it works the other way round: arr.push([1]);

[03:54:03.0000] <tobie_>
What happens if you do fetchStores.add(store) it throws? or internally converts to  fetchStores.add([store])

[04:52:09.0000] <JakeA>
tobie_: Here's the problem, it'll be fetchStores.add(store), but fetchStore.add([url, request, anotherRequest])

[04:52:33.0000] <JakeA>
tobie_: Another good reason to stay with .create IMO

[04:52:44.0000] <tobie_>
oh, boy.

[06:13:46.0000] <Domenic>
.create as sugar for construct + add is I think my preference

[06:14:17.0000] <Domenic>
JakeA: tobie_: ^

[06:15:14.0000] <JakeA>
Domenic: that could work

[06:15:37.0000] <Domenic>
(Still reading scrollback)

[06:16:04.0000] <tobie_>
JakeA brought up the fetchStores.add(item) but store.add(iterable) issue

[06:17:34.0000] <Domenic>
Ah yeah, seems annoying

[06:18:22.0000] <Domenic>
Also on reject vs. undefined, my only strong opinion was on a method names get. One named match I haven't thought too hard bit for now could go either way

[06:18:42.0000] <Domenic>
augh iPad typing ftl

[06:19:05.0000] <Domenic>
I would expect from Set that add takes a single argument

[06:19:23.0000] <Domenic>
but that might be false consistency

[06:19:47.0000] <JakeA>
Domenic: yeah, I spent the train journey in mocking up code using reject vs undefined. I'm favouring reject.

[06:19:56.0000] <Domenic>
in which case a name like put might be better? I dunno this is clearly a tough call.

[06:20:17.0000] <Domenic>
when I get in to work I promise to reply to all issues after actually thinking about them hard

[06:20:18.0000] <tobie_>
yeah, or push?

[06:20:42.0000] <Domenic>
push would take varargs, not iterable

[06:20:59.0000] <JakeA>
Domenic: store.add([url, request, otherRequest]) is an atomic operation, depending on fetching all those resources. It feels like that should reject on failure too.

[06:21:15.0000] <tobie_>
right that was for fetchStores.

[06:21:24.0000] <JakeA>
Domenic: But if you want to resolve with an array, that gets ugly

[06:21:33.0000] <Domenic>
JakeA: that definitely seems reasonable

[06:21:41.0000] <Domenic>
modulo naming

[06:21:56.0000] <Domenic>
resolving with an array is fine in ES6

[06:22:19.0000] <Domenic>
.then(([a, b, c]) => …)

[06:22:21.0000] <JakeA>
Think I still prefer "cache" based names for all this :(

[06:22:52.0000] <Domenic>
FFs I hope iOS 8 custom keyboards let you add a bunch of programmer punctuation to the main screen

[06:23:05.0000] <tobie_>
add does so much stuff, no wonder it's hard to name.

[06:23:22.0000] <tobie_>
store.add that is.

[06:23:43.0000] <Domenic>
I much prefer that style of atomicity to something complicated like IDB's transactions though

[06:24:08.0000] <JakeA>
tobie_: Although cache.add(["/whatever.json", "/style.css"]) feels intuitive to me, but maybe I'm in too deep

[06:24:34.0000] <tobie_>
well, it's really fetchAndStore

[06:25:23.0000] <JakeA>
true

[06:25:30.0000] <tobie_>
store.fetch? store.prefetch?

[06:26:23.0000] <tobie_>
note I would love to see if people would get more upset over fetchAndStore than brand-color

[06:26:42.0000] <JakeA>
"add '/style.css' to this cache" makes sense to me

[06:27:39.0000] <tobie_>
It took me quite a while to figure out what exactly store.add was doing by just looking at the code.

[06:27:50.0000] <tobie_>
Feels a bit like appcache magic to me.

[06:28:08.0000] <tobie_>
if you see what I mean.

[06:28:59.0000] <Domenic>
Is it sugar for two composable reactions (fetch and add)?

[06:29:09.0000] <Domenic>
If so the complexity seems ok

[06:29:20.0000] <Domenic>
S/reactions/operations

[06:29:46.0000] <tobie_>
yeah, throw in a Promise.all and it is.

[06:30:07.0000] <JakeA>
The bit we don't have a lower-level for is the atomic put

[06:31:02.0000] <JakeA>
store.put(request, response) - allowing you to add custom responses & requests

[06:31:47.0000] <JakeA>
Could guarantee that calls to .put within the same task are atomic, but that's getting close to idb-land

[06:31:55.0000] <Domenic>
Noooooo bad bad

[06:32:11.0000] <JakeA>
agreed

[06:32:59.0000] <Domenic>
addRequest, with add as sugar that takes more than one URL, request, whatever?

[06:33:54.0000] <tobie_>
Got to run. Will catch up on the conversation later.

[06:34:31.0000] <JakeA>
Domenic: it's not just sugar if nothing else handles the atomic commit

[06:34:47.0000] <Domenic>
addRequests then?

[06:39:48.0000] <JakeA>
I think we need a version of .put that takes many request & response combos. But ugh.

[06:40:15.0000] <JakeA>
Then we could explain .add on top of that using fetch & Promise.all

[06:40:41.0000] <JakeA>
Actually no

[06:41:04.0000] <JakeA>
because we don't have a way to do a series of deletes + puts atomically, but .add does

[06:41:53.0000] <JakeA>
Will let it bounce round my read over the weekend

[07:37:07.0000] <Domenic>
maybe something more truly low-level, e.g. .atomic({ add: [...], delete: [...] })

[07:39:42.0000] <TabAtkins>
+1 on making the name somehow more descriptive of the "all or nothing" semantics. I didn't get that out of .add() at all.

[11:56:49.0000] <Ms2ger>
gsnedders, https://i.imgur.com/6k0l9zo.jpg

[12:01:38.0000] <gsnedders>
Ms2ger: hah

[12:02:34.0000] <wilhelm>
Internet Explorer keeps Scotland safe?

[13:20:01.0000] <Hixie>
how big should i be making the multipage spec slices?

[13:20:04.0000] <Hixie>
is a megabyte ok?

[13:22:55.0000] <SamB>
Hixie: well, about how big do they run now?

[13:25:00.0000] <Hixie>
the old splitter ranged them from 15k to 650k.

[13:26:15.0000] <Hixie>
but imho had too many

[13:26:58.0000] <Hixie>
the new splitter splits them into sections from 30k to 900k, plus one outlier at 3MB.

[13:27:08.0000] <gsnedders>
how large is it if you just do one per top-level section?

[13:29:26.0000] <Domenic>
Does this mean all multipage links are going to break? :(

[13:29:49.0000] <gsnedders>
they all have magic that redirects based on the fragment anyway

[13:29:58.0000] <gsnedders>
because it's never been stable

[13:30:17.0000] <Domenic>
oh did not know. that's good then.

[13:30:25.0000] <gsnedders>
this is why you can do something really naive like http://whatwg.org/C#parsing without caring what section it lies in

[13:31:22.0000] <Domenic>
It would be cool to use replaceState to show a semi-canonical multipage permalink URL in the URL bar at all times

[13:31:31.0000] <Domenic>
like /C#fragment seems pretty good to me

[13:31:34.0000] <Domenic>
Change it as you scroll

[13:33:54.0000] <Hixie>
gsnedders: the new splitter is doing one per top-level section right now

[13:34:21.0000] <Hixie>
Domenic: file a bug, put "tools" in teh status whiteboard :-)

[13:34:31.0000] <gsnedders>
Hixie: seems more reasonable to me

[13:34:50.0000] <Hixie>
gsnedders: yeah, except for the 3MB one

[13:34:53.0000] <Hixie>
which is all the elements

[13:35:16.0000] <Hixie>
i guess i'll split that one up further

[13:35:40.0000] <Hixie>
Domenic: the multipage stuff is going to be a lot more stable because i'm hard-coding where the splits occur, and the filenames to use, in the source file itself

[13:36:11.0000] <Domenic>
Hixie: well, that does help.

[13:48:02.0000] <smaug____>
when one does var w = someotherwindow.WebSocket(); what is the entry settings object?

[13:53:49.0000] <Hixie>
The entry settings object is the most-recently added script settings object in the stack of script settings objects that is labeled as a candidate entry settings object.

[13:54:05.0000] <Hixie>
i.e. doesn't matter which Window the constructor is invoked on

[13:55:52.0000] <smaug____>
Hixie: right, so it is from the context of w

[13:57:36.0000] <Hixie>
not necessarily

[13:57:47.0000] <Hixie>
if w is in a function in yetanotherwindow

[13:58:01.0000] <Hixie>
but the script execution started in window0

[13:58:18.0000] <Hixie>
it would be window0, if i'm not mistaken

[13:58:37.0000] <Hixie>
otherwise it would be the incumbent settings object

[13:58:41.0000] <Hixie>
not the entry settings object

[14:25:56.0000] <tobie_>
Domenic, JakeA: think we should really have a straightforward way to prime the FS in case of cache miss, e.g.: https://gist.github.com/tobie/83674a1b83e1d4d3da21

[14:27:47.0000] <tobie_>
Basically `add` that fetches caches and returns the response object but for a unique resource (so you don't have to deal with getting an array back).

[14:38:06.0000] <tobie_>
Opened https://github.com/slightlyoff/ServiceWorker/issues/376 with the above.

[16:39:24.0000] <Hixie>
i'm about to replace the multipage copy of the spec with my version

[16:39:28.0000] <Hixie>
so let me know if anything breaks

[16:41:20.0000] <Hixie>
(i haven't yet done the cross-page dfn refs)


2014-07-19
[20:39:53.0000] <MikeSmith>
Hixie: the dfn popups are still just for the current page

[20:40:16.0000] <Hixie>
yeah, haven't addressed that yet

[20:40:21.0000] <MikeSmith>
ah ok

[21:01:24.0000] <SamB>
Hixie: so what's the plan? JSON-ish index?

[21:04:52.0000] <Hixie>
what, for the dfn thing? i dunno.


2014-07-21
[02:50:57.0000] <gsnedders>
I feel like I'm missing something about DNSSEC, what exactly is signed by the root anchors? The results returned by the root servers?

[02:59:24.0000] <gsnedders>
the lookup includes an RRSIG record, okay

[05:27:45.0000] <gsnedders>
GPHemsley: In what sense is PDF scripted but not PostScript (in MIME Sniffing)? Does PDF allow access to things outside of the input and PostScript not?

[05:35:03.0000] <jgraham>
gsnedders: Acrobat certainly allows javascript and seems to have external communication APIs

[05:37:53.0000] <gsnedders>
Right, I know PDF allows JS but wasn't sure if it allowed external communication. PS is itself Turing-complete so the only question is whether it allows external communication.

[05:38:07.0000] <jgraham>
Yeah

[05:38:42.0000] <jgraham>
So I guess it must theoretically be possible c.f. the HTTP server in pure postscript, but I don't know if that depends on specific extensions

[05:42:48.0000] <JakeA>
Domenic: thinking about how to explain transactions in stores. I keep coming back to things like store.transaction(function{ /* all store operations in here will be transactional */ }).then(...)

[05:42:53.0000] <JakeA>
then throw up in my mouth

[05:43:10.0000] <JakeA>
anything in the DOM that does it better?

[05:43:32.0000] <tobie>
keep calm and swallow it back.

[05:43:45.0000] <jgraham>
gsnedders: Postscript seems to have file IO, but not network IO except to the extent that you can make a correspondence between the two

[05:44:27.0000] <gsnedders>
jgraham: so has network IO on any POSIX system :P

[05:46:15.0000] <jgraham>
gsnedders: For example

[05:46:21.0000] <gsnedders>
GPHemsley: then PS should surely be considered a scriptable type in MIME Sniffing

[06:07:21.0000] <Domenic>
JakeA: not that I can think of ... might be worth surveying the LevelDB APIs people have put on npm.

[06:07:49.0000] <Domenic>
JakeA: I am starting to feel like `store.transaction({ add: [...], remove: [...] })` would make sense?

[06:08:09.0000] <Domenic>
Or I guess put: ..., delete: ... might be more accurate

[06:08:45.0000] <JakeA>
Domenic: That misses interleaving put & delete. Also, since put takes 2 args it looks uuuuuugly

[06:09:11.0000] <JakeA>
store.transaction({ put: [[request, response], [request2, response2]] })

[06:09:31.0000] <Domenic>
JakeA: ugly seems OK for a low-level primitive

[06:12:09.0000] <Domenic>
I will ask the levelDB folks in #stackvm

[06:13:12.0000] <JakeA>
https://gist.github.com/jakearchibald/0700c1c622c994c2d335 is ugly but it allows interleaving delete & put

[06:14:04.0000] <Domenic>
JakeA: my main problem with such a thing is that it is a bit too magical. E.g. it looks like it's function scoped but if you do non-store things inside that function, or do anything async, then it's no longer part of the transaction.

[06:14:08.0000] <Domenic>
Very leaky abstraction

[06:14:21.0000] <JakeA>
fair

[06:15:01.0000] <JakeA>
especially when it came to transactions across multiple stores

[06:15:19.0000] <JakeA>
(which wouldn't work, but may appear if it did)

[06:16:24.0000] <Domenic>
JakeA: stackvm people suggest https://github.com/rvagg/node-levelup#batch_chained

[06:16:26.0000] <Domenic>
Very interesting

[06:17:34.0000] <Domenic>
Feels less like composing nice APIs out of low-level ugly ones, but is a pretty nice end result

[06:22:07.0000] <JakeA>
That works for me

[06:22:11.0000] <JakeA>
Domenic: cheers!

[06:29:17.0000] <Domenic>
:)

[06:45:03.0000] <Domenic>
JakeA: Substack likes https://github.com/rvagg/node-levelup#dbbatcharray-options-callback-array-form more because it allows you to compose a transaction as an object

[06:54:38.0000] <JakeA>
Domenic: uglier, but simpler. Less sugar is fine for this method

[07:07:01.0000] <tobie>
chainable batch object lets you fail faster and more precisely, though (e.g. if you del(key, value))

[07:11:11.0000] <tobie>
Domenic: unrelated: re-reading up on Promises today, bumped into wikipedia's definition of Promises where it claims the object given to the client is a future (not a promise). Any idea whether that's true, and if so, why the terminology was changed in JS from something correct to something not?

[07:12:58.0000] <Ms2ger>
What's "correct"? :)

[07:16:45.0000] <caitp->
does it really matter what you call it

[07:17:30.0000] <tobie>
caitp-: yeah, it's kind of useful if the same name describes the same pattern in different languages.

[07:18:11.0000] <Domenic>
JakeA: I think there are at least two promise lineages. Brb.

[07:19:45.0000] <tobie>
caitp: imagine if we had decided to call promises threads instead. :)

[07:20:17.0000] <tobie>
Domenic: that might explain it.

[07:20:30.0000] <caitp>
then we could be pretentious and explain the differences between javascript threads and OS threads to people

[07:20:35.0000] <caitp>
and be the life of the dinner party

[07:20:55.0000] <tobie>
Please don't invite me to your dinner parties.

[07:20:59.0000] <caitp>
:d

[07:22:26.0000] <tobie>
Ms2ger: poor choice of words, admittedly, but does it obscure the gist of the question?

[07:22:52.0000] <caitp>
I'm not sure the audience of javascript has for the most part had much exposure to other languages implementing the same pattern but named Futures --- although dart might change that

[07:24:09.0000] <tobie>
that doesn't seem to be a very future proof argument.

[07:24:49.0000] <tobie>
Anyway, I'm disputing the naming choice. Just curious of its history and the rationale behind it.

[07:25:05.0000] <tobie>
* I'm NOT disputing

[07:25:31.0000] <tobie>
/me go away, Freud.

[07:26:32.0000] <caitp>
well, they're already pretty widely used (jQuery.Deferred, etc etc etc) by web developers, and usually called Promises in web-land, so that might have something to do with it

[07:31:09.0000] <jwalden>
roses by any other names

[07:32:56.0000] <tobie>
JakeA, Domenic: in case that got lost in the unrelated conversation one of the benefits of chainable batch object is it lets you fail faster and more precisely (e.g. if you del(key, value) you can error immediately).

[07:33:59.0000] <jgraham>
"roses" you say? I assume that you are thinking that they are marketed as providing great beauty, but in reality there's a lot of specialised knowledge needed to make them grow right, and even then you have to be careful of thorns? Sounds reasonable.

[07:34:16.0000] <JakeA>
Hmm, I'm not too worried about that, this is a very low level part of the API

[08:03:38.0000] <Domenic>
JakeA: tobie: IIRC it's E -> Python, C#, F#, JavaScript; vs. Java -> Dart, Scala, others

[08:08:25.0000] <tobie>
Domenic: sounds fun. Scramble them some more to find out which languages favor assert(expected, actual) and which ones prefer assert(actual, expected)

[08:08:36.0000] <tobie>
:/

[10:22:51.0000] <Hixie>
anyone know anything about deletableBindings in the JS spec, 15.1.7 Runtime Semantics: ScriptEvaluation? jorendorff maybe?

[10:23:06.0000] <jorendorff>
yeah, let me look

[10:24:07.0000] <jorendorff>
Hixie: what step?

[10:24:19.0000] <jorendorff>
oh, the parameter

[10:25:15.0000] <Hixie>
yeah, the parameter

[10:25:22.0000] <jorendorff>
Hixie: It's legacy cruft, required for non-strict direct eval.

[10:25:29.0000] <jorendorff>
Hixie: Inside a JS function, if you do |eval("var x;")| then, bizarrely, the local variable x can be deleted using |delete x|

[10:25:41.0000] <Hixie>
so i always pass false when evaluating a <script>?

[10:25:44.0000] <jorendorff>
yes

[10:25:47.0000] <Hixie>
k, thanks

[10:27:20.0000] <Domenic>
Hixie: I know you were working on event loop integration a while ago. Where did that end up?

[10:27:38.0000] <Hixie>
got sidetracked by my work on my new pipeline, but i'm working on it again as we speak

[10:28:08.0000] <Hixie>
first step is working out how HTML and ES should integrate in general for legacy <script> evaluation

[10:29:55.0000] <JakeA>
Domenic: tobie: how about store.add(request) which resolves to a response, or store.add([request]) which resolves to an array of responses (one, in this case)

[10:32:04.0000] <Domenic>
Hixie: nice. My big concern is that we normatively specify promises use microtasks

[10:32:25.0000] <Domenic>
JakeA: I hate overloading, but that is my only objection.

[10:32:51.0000] <Domenic>
JakeA: what does var r = new Request(); r[Symbol.iterator] = ...; store.add(r) do

[10:34:10.0000] <Hixie>
Domenic: yeah. unfortunately while doing this i discovered we had much bigger problems. Like, ES 9.5 and 9.5.1 aren't invoked at all for HTML yet.

[10:34:18.0000] <JakeA>
Domenic: reject, unless it provides requests or url strings

[10:34:42.0000] <Domenic>
JakeA: yes, the iterator would be an iterator of requests. BUT IT IS ALSO ITSELF A REQUEST!?!

[10:34:52.0000] <Domenic>
Hixie: ES6? I imagine because they only recently came into existence :P

[10:35:17.0000] <Domenic>
Hixie: the issue is that Firefox currently uses macrotasks and there's no spec we can point them to to say that they're doing it wrong

[10:36:10.0000] <Hixie>
Domenic: yeah, but there's no way to write the microtask spec until we have a foundation to write it on :-)

[10:36:33.0000] <Ms2ger>
Hixie, this would be a good time to remove references to not-JS-languages-in-<script> in the spec ;)

[10:38:12.0000] <Hixie>
Ms2ger: i'll get right on that as soon as people stop trying to put non-JS-languages-in-<script>...

[10:38:32.0000] <JakeA>
Domenic: yep, it'll either treat it as one or the other.

[10:38:49.0000] <Domenic>
JakeA: and thus, why I hate overloading ;)

[10:46:07.0000] <JakeA>
Domenic: yeah, but what if I overwrite querySelectorAll to return a random number?

[10:46:34.0000] <JakeA>
Domenic: crazy stuff will happen. Answer is, don't do that.

[10:49:42.0000] <Hixie>
the ES spec really is written from the point of view of ES being the core of the world

[10:49:45.0000] <Domenic>
JakeA: don't overload your methods? Yes, I agree ;)

[10:49:51.0000] <Hixie>
as opposed to a library that the browser invokes

[10:50:54.0000] <Domenic>
Hixie: I don't *think* that was Allen's intention... he might be open to changing things

[10:51:08.0000] <Hixie>
e.g. NextTask is one task

[10:51:22.0000] <Hixie>
er, one algorithm

[10:51:27.0000] <Hixie>
called from within other ES algorithms

[10:51:49.0000] <Hixie>
instead of "InvokeTask" being the top of the ES "stack"

[11:35:08.0000] <Hixie>
jorendorff, Domenic: this is what i have so far: http://www.hixie.ch/specs/js/loader

[11:35:54.0000] <jorendorff>
NextTask makes no sense

[11:37:23.0000] <Hixie>
in ES? or in my strawman above?

[11:37:47.0000] <Hixie>
i tried sending feedback about turning it inside out in the ES spec, but allen seemed unimpressed

[11:37:54.0000] <Domenic>
yeah :-/

[11:38:38.0000] <jorendorff>
Hixie: in ES. I don't know why Allen wrote it that way.

[11:38:41.0000] <Domenic>
JakeA: "permacache" haha

[11:38:58.0000] <Hixie>
jorendorff: ah. yeah. i agree. kinda just working with what i've got at this point.

[11:54:43.0000] <JakeA>
Domenic: my favourite was "history", but that was down to the shitty 140 char explanation

[11:55:23.0000] <Domenic>
JakeA: permacache, just like fetchAndStore, seems nicely descriptive to me ;)

[11:55:26.0000] <TabAtkins>
tobie: What caitp  said - the naming is actually remarkably inconsistent across various languages and implementations, as is the exposed API.

[11:56:02.0000] <TabAtkins>
Promise/Deferred/Future all describe roughly the same thing, depending on what language/library you're using.

[11:57:20.0000] <Domenic>
TabAtkins: or PromiseCapability X_x

[11:57:23.0000] <TabAtkins>
wikipedia notes that the terms are used somewhat interchangeably.

[12:09:54.0000] <TabAtkins>
For whatever reason, the person who wrote that article settled on "Future" for JS's Promise, and "Promise" for JS's resolve/reject functions.

[12:12:30.0000] <Domenic>
Nothing can be as bad as Wikipedia's JavaScript article

[12:23:10.0000] <gsnedders>
Domenic: that looks a heckuva lot better than it did when I last looked at it

[12:24:39.0000] <Domenic>
gsnedders: you're right! However this part is still horrid. https://en.wikipedia.org/wiki/JavaScript#Version_history

[12:24:53.0000] <gsnedders>
Domenic: totally

[12:25:07.0000] <gsnedders>
Domenic: I'm not saying it ain't bad, I'm saying it could be worse

[12:25:10.0000] <Domenic>
Yeah

[12:25:16.0000] <Domenic>
Before that was 1/3 of the article IIRC

[12:26:25.0000] <Domenic>
First we need to fix MDN to move all the Mozilla "JS 1.8" etc. stuff into a silo, away from the limelight

[12:26:29.0000] <Domenic>
Then we can fix wikipedia

[12:26:42.0000] <Domenic>
And by "we" I mean "probably not me"

[12:29:49.0000] <SamB>
are you guys allowed to edit that stuff

[12:30:07.0000] <Domenic>
MDN certainly

[12:30:16.0000] <SamB>
I was referring to WP:COI

[12:30:30.0000] <SamB>
wrt the wikipedia article

[12:30:31.0000] <Domenic>
I don't even know what that means

[12:30:44.0000] <gsnedders>
SamB: sure, provided you act in a neutral manner

[12:31:22.0000] <SamB>
what, you guys aren't employed by JavaScript?

[12:31:56.0000] <gsnedders>
SamB: WP:COI doesn't prohibit editing any article you have an interest in; it merely prevents you from acting in a self-interested manner

[12:40:27.0000] <SamB>
clearly I have not actually read WP:COI in a while

[13:00:43.0000] <gsnedders>
SamB: you've never been outright forbidden from it

[13:00:55.0000] <gsnedders>
SamB: I mean essentially it's just WP:NPOV

[13:29:50.0000] <Hixie>
zcorpan: oh man, sorry, i totally forgot to do those PRs. Thanks for doing them.

[13:59:22.0000] <Hixie>
TabAtkins: you around?

[13:59:29.0000] <TabAtkins>
pong

[13:59:32.0000] <Hixie>
hey

[13:59:48.0000] <Hixie>
do you know if there's any chance of a display-box: newline? see https://www.w3.org/Bugs/Public/show_bug.cgi?id=25503 for context

[14:00:09.0000] <TabAtkins>
We discussed it on the call but didn't get consensus, so I'mma work on it soonish.

[14:00:19.0000] <TabAtkins>
And I actually still have that bug open in my tabs here.

[14:00:26.0000] <Hixie>
what's the "nay" camp's opinion?

[14:04:26.0000] <TabAtkins>
Specialty display types shouldn't be necessary, as we can just pattern-match on particular styles.

[14:05:47.0000] <Hixie>
interesting idea

[14:05:51.0000] <Hixie>
how many of the vendors were on that side?

[14:06:01.0000] <TabAtkins>
fantasai, mainly.

[14:06:19.0000] <TabAtkins>
I'd need to review the minutes, though, because I'm biased heavily in the other camp.

[14:06:54.0000] <Hixie>
unfortunately there don't appear to be any minutes for that specific meeting

[14:07:13.0000] <Hixie>
(25th of june, if i'm reading the mailing list entrails right)

[14:07:21.0000] <Hixie>
i checked both lists

[14:07:35.0000] <TabAtkins>
http://lists.w3.org/Archives/Public/www-style/2014Jun/0398.html

[14:07:44.0000] <TabAtkins>
You blind, bro?

[14:07:48.0000] <Hixie>
wow, how did i miss that

[14:08:18.0000] <Hixie>
oh, heh, it was the one after the last one i opened, before i'd found the agenda

[14:08:21.0000] <Hixie>
d'oh

[14:10:43.0000] <Hixie>
looks like no implementors were on board with pattern matching particularly

[14:11:00.0000] <TabAtkins>
Yeah, that's what I remembered, but didn't want to claim it until I'd read.

[14:11:05.0000] <Hixie>
btw the biggest problem with pattern matching / special case logic for <br> isn't the performance aspect, that can probably be done pretty efficiently

[14:11:15.0000] <Hixie>
the biggest problem is that because it's special-cased, you'll get special bugs.

[14:11:21.0000] <TabAtkins>
Yup, indeed.

[14:11:28.0000] <TabAtkins>
I don't like pattern-matching for that reason.

[14:11:40.0000] <Hixie>
like, some new property is added, and it matches either way, and you end up with the wrong code path just for that specific combination of properties

[14:11:43.0000] <Hixie>
anyway

[14:11:45.0000] <Hixie>
ok

[14:11:58.0000] <Hixie>
you any objection to my just speccing it in HTML?

[14:12:12.0000] <TabAtkins>
I'm going to put it in Display, so whatevs.

[14:12:17.0000] <Hixie>
oh ok, cool

[14:12:20.0000] <TabAtkins>
Want me to just put it in now, and have you ref it as unstable?

[14:12:34.0000] <Hixie>
no rush.

[14:12:48.0000] <Hixie>
i'll roll this one to the bottom of my pile and will get back to you in a few weeks.

[14:48:04.0000] <TabAtkins>
Hixie: What element autolink in your preprocessor?

[14:48:14.0000] <TabAtkins>
Looks like <code> does?

[14:48:52.0000] <Hixie>
code, span, var, and i.

[14:49:16.0000] <TabAtkins>
kk. Confused why all the <var>s in the spec *lost* their data-x attrs, then.

[14:49:39.0000] <Hixie>
var and i are special in that unles they have a data-x, they won't cross-ref

[14:49:57.0000] <Hixie>
i really should probably change from <span> to <a>

[14:52:57.0000] <Hixie>
TabAtkins: since it seems to be just us working today... any news on https://www.w3.org/Bugs/Public/show_bug.cgi?id=24991 ?

[14:53:43.0000] <TabAtkins>
In what way? Was I supposed to do something?

[14:54:15.0000] <Hixie>
apparently you talked about it in a telecon http://lists.w3.org/Archives/Public/www-style/2014May/0024.html

[14:54:42.0000] <Hixie>
i guess http://lists.w3.org/Archives/Public/www-style/2014May/0056.html says it's in

[14:54:48.0000] <Hixie>
so i should just use it?

[14:55:26.0000] <Hixie>
"bert: So let's say I want to use JS" wow

[14:56:23.0000] <jgraham>
Wow that he might want to use JS, or wow that that was a line from a telecon in 2014?

[14:56:31.0000] <Hixie>
more the former

[15:02:24.0000] <TabAtkins>
Hixie: Ah, whoops, I never made that change.

[15:02:42.0000] <TabAtkins>
/me desperately needs to just crank through all the minutes and find thinks he hasn't done yet.

[15:02:48.0000] <Hixie>
heh

[15:02:51.0000] <Hixie>
that's what i use bug reports for

[15:02:57.0000] <Hixie>
(or e-mails to whatwg)

[15:03:03.0000] <TabAtkins>
Hixie: Define it in HTML, lemme know the anchor, I'll add it to Selectors and link to HTML for the lang-specific definition.

[15:03:07.0000] <Hixie>
roger

[15:03:20.0000] <Hixie>
anchor will be selector-modal

[15:03:24.0000] <caitp>
arv_, do you know if Object.observe (& related api) was ever in the harmony draft at all, and what happened to it if it was?

[15:03:31.0000] <caitp>
and why not if it wasn't :p

[15:03:44.0000] <caitp>
#jslang is a bit quiet today, so I inquire here

[15:03:53.0000] <arv_>
caitp: It was decided that it would go in ES7

[15:04:11.0000] <arv_>
caitp: and it uses the new process (waterfall, ship when ready model)

[15:04:35.0000] <caitp>
hmm I see

[15:09:52.0000] <caitp>
so was the actual design finalized? or is that still likely/possible to change?

[15:10:33.0000] <TabAtkins>
Well, it's shipping now, so pretty final.

[15:10:45.0000] <caitp>
shipping in a single browser

[15:10:52.0000] <caitp>
behind flags

[15:15:24.0000] <caitp>
anyways, I haven't really reviewed it yet, but Rob Eisenberg put together some tests http://jsperf.com/observing-objects using different strategies, and from his results it looks actually worse to depend on O.o by quite a bit compared to dirty checking. (but obviously prone to all the usual issues with jsperf, and possibly very bad tests)

[15:16:13.0000] <caitp>
so I just wanted to see if anything in the specification had changed, but couldn't find any of it :>

[15:17:39.0000] <gsnedders>
caitp: is that not QoI?

[15:18:56.0000] <caitp>
well it might be a QoI issue, or it might be a fundamental problem with the algorithms, or it might be just bad tests

[15:19:00.0000] <caitp>
or a mix of 2 or all 3

[15:19:35.0000] <gsnedders>
I suspect it's the fact that normal property accesses are ridiculously well optimized, and Object.observe is a slow-case compared with that

[15:20:02.0000] <gsnedders>
I suspect observing it will always be slower than checking for changed properties

[15:20:13.0000] <caitp>
yes

[15:20:26.0000] <caitp>
but 1:100 might not be a very good ratio

[15:20:27.0000] <gsnedders>
Because fundementally in your baseline code you'll always generate simple property accesses and slowcase if there's an observer

[15:22:34.0000] <caitp>
right, but what it comes down to is it might not even be worth using if it's cheaper without

[15:23:38.0000] <gsnedders>
idk, I very much suspect the V8 impl is just unoptimized

[15:24:23.0000] <caitp>
could be, should get mi�ko over there :p

[15:31:23.0000] <TabAtkins>
No, I think it's shipping publicly in the upcoming Chrome.  (I think?)

[15:32:24.0000] <caitp>
oh, no apparently it's enabled by default in m36

[15:37:11.0000] <bretolius>
sort of related… anyone have the w3c irc network url with the ssl port?

[15:39:23.0000] <TabAtkins>
bretolius: irc.w3.org:6667

[15:39:53.0000] <bretolius>
TabAtkins ty :)

[15:40:20.0000] <caitp>
that doesn't look like an ssl port

[15:41:33.0000] <TabAtkins>
Eh, it's the only port I kno.

[15:41:35.0000] <TabAtkins>
know

[15:50:32.0000] <Hixie>
can someone check the "Manipulation of the execution context stack" thread on es-discuss to see if i'm missing something?

[15:50:39.0000] <Hixie>
i just don't understand what allen is saying


2014-07-22
[03:05:30.0000] <Ms2ger>
FTR, irc.w3.org only has SSL support for staff

[03:11:32.0000] <jgraham>
Was that apropos anything in particular?

[03:11:54.0000] <Ms2ger>
Backscroll

[03:12:18.0000] <jgraham>
Oh

[03:17:08.0000] <gsnedders>
Ms2ger: why is it staff only, if you know?

[03:17:14.0000] <Ms2ger>
I don't

[03:17:28.0000] <Ms2ger>
Perhaps MikeSmith does

[03:39:04.0000] <MikeSmith>
dunno but if I had to guess I'd guess for the same reason that freenode default is non-ssl

[03:39:45.0000] <MikeSmith>
like, so that people don't have to figure out how to configure their irc clients for ssl

[03:40:23.0000] <MikeSmith>
also there are some channels that are team-only so there needs to be some means to restrict access to those

[03:40:58.0000] <MikeSmith>
we used to do that by running on a different server that required an ssh tunnel to get to

[05:35:38.0000] <test_>
Hello everyone

[05:36:02.0000] <test_>
I have a question

[05:37:55.0000] <gsnedders>
test_: just ask

[05:38:37.0000] <test_>
I wanna start bug hunting into browsers

[05:38:37.0000] <gsnedders>
jgraham: we need to work out how to deal with serializer tests in html5lib-tests again, because they're pretty html5lib-python specific and expect specific sets of options to be available and to be the defaults

[05:38:57.0000] <test_>
but I dont know where to start

[05:39:56.0000] <gsnedders>
test_: do you want to test any specific thing, or just anywhere in browsers? do you want to target specific types of bugs (like, say, security ones)?

[05:40:23.0000] <test_>
I want to hunt vulnerabilities

[05:40:39.0000] <test_>
UAF or OF or etc

[05:42:11.0000] <test_>
I want to fuzz core of browsers

[05:42:34.0000] <gsnedders>
so it's worthwhile to note that browser vendors write fuzzers to test a lot quickly, and run fuzzers with things like AddressSanitizer to detect such classes of bugs

[05:42:54.0000] <test_>
mutation or vector or SMT solvers

[05:43:25.0000] <test_>
yess I know. But there is alot anyway

[05:46:29.0000] <gsnedders>
symbolic execution (which is the only place I've seen SMT solvers around fuzzers) is unlikely to find much directly (the search space is just too big); practically you need to find some area you think will be more likely to yield security bugs and write a decent fuzzer to fuzz around it

[05:49:15.0000] <test_>
smt solvers + taint gives us some helpfull informations

[05:49:26.0000] <test_>
it can be used in fuzzing somehow

[05:49:43.0000] <gsnedders>
for sure it can in principle, it's just not something I've seen done much :)

[05:50:31.0000] <test_>
but I dont know how to select some area to fuzz

[05:50:53.0000] <test_>
I mean which areas will be more vulnerable

[06:04:15.0000] <gsnedders>
test_: look at where bugs are found today; that's probably your best bet if you don't know the codebase yourself

[06:06:20.0000] <Ms2ger>
darobin_, Servo is always hiring ;)

[06:06:31.0000] <wilhelm>
Poking the network/protocol layer would be interesting.

[06:06:39.0000] <darobin_>
Ms2ger: do I need to know Rust already?

[06:06:48.0000] <Ms2ger_>
bah

[06:06:59.0000] <Ms2ger>
Why yes, I'm here

[06:06:59.0000] <darobin>
/me shouldn't try to do two things at once

[06:07:23.0000] <darobin>
Ms2ger: mmmmmm

[06:07:29.0000] <darobin>
that might actually be interesting

[06:07:55.0000] <darobin>
I'll think on it, thanks Ms2ger :)

[06:08:14.0000] <Ms2ger>
Np :)

[06:12:23.0000] <MikeSmith>
Ms2ger: I know PHP is Rust close to that

[06:15:29.0000] <wilhelm>
/me attaches a sphygmomanometer to Ms2ger.[C

[06:31:00.0000] <MikeSmith>
well I know WordPress too

[06:31:57.0000] <MikeSmith>
/me adds "multi-faceted developer" to his c.v., after "thought leader"

[08:27:20.0000] <JonathanNeal>
/me adds the many faceted things MikeSmith adds, following his lead.

[12:12:24.0000] <Hixie>
jorendorff: yt?

[12:13:24.0000] <jorendorff>
Hixie: yep.

[12:13:36.0000] <Hixie>
jorendorff: any chance you could update the js spec html version?

[12:13:46.0000] <Hixie>
allen put out an update recently that affects the stuff i'm looking at

[12:13:51.0000] <Hixie>
but the pdf is a pain to deal with

[12:14:28.0000] <jorendorff>
Hixie: Yes, I'll work on it tonight.

[12:14:33.0000] <Hixie>
cool, thanks

[12:15:21.0000] <Hixie>
i wonder how allen wants event handler attributes to work in the new world

[12:15:51.0000] <Hixie>
i also wonder how anne wants his fetch stuff to interact with ES Loader stuff


2014-07-23
[05:06:18.0000] <gsnedders>
jgraham: https://critic.hoppipolla.co.uk/r/1592 prod prod

[05:09:26.0000] <jgraham>
gsnedders: I'm pretty sure that string concatenation in python isn't n**2 at least for small strings

[05:09:45.0000] <gsnedders>
jgraham: only in CPython

[05:10:09.0000] <gsnedders>
jgraham: in PyPy string concatenation is because it can't do refcounting hacks

[05:10:19.0000] <gsnedders>
jgraham: and it doesn't use anything like ropes

[05:10:35.0000] <jgraham>
It could just overallocate memory, surely?

[05:11:08.0000] <jgraham>
Oh, is that the refcounting hack?

[05:12:33.0000] <gsnedders>
jgraham: the refcounting hack is that it calls realloc and reuses the object when refcount == 1

[05:12:57.0000] <gsnedders>
(PyPy, Jython, etc. don't refcount)

[05:20:31.0000] <gsnedders>
'When an author uses a new metadata name not defined by either this specification or the Wiki page, conformance checkers should offer to add the value to the Wiki, with the details described above, with the "proposed" status.'

[05:20:40.0000] <gsnedders>
That sounds very much like a UI requirement.

[05:24:46.0000] <foolip>
is annevk on vacation perhaps?

[05:27:15.0000] <gsnedders>
jgraham: so I want the treewalker stuff in master so I can use it more sanely for the sanitizer changes, and rewrite the sanitizer tests to assert the tree and not the specific serialization

[05:27:38.0000] <gsnedders>
jgraham: I mean I can just merge it into the branch but then critic will show it as further changes to be reviewed again

[06:20:34.0000] <jgraham>
foolip: Yes

[06:20:49.0000] <jgraham>
gsnedders: I can't review and have lunch at the same time :p

[06:24:53.0000] <gsnedders>
jgraham: I feel like it's later than that. tbf, also being at EuroPython doesn't help given timezone diff. :)

[06:25:54.0000] <MikeSmith>
gsnedders: yeah, conformance checkers have personally told me that they don't want to offer to add stuff to the wiki

[06:26:37.0000] <gsnedders>
MikeSmith: people talk to you? weird.

[06:27:04.0000] <MikeSmith>
they talk about me, then other people tell me what they said

[06:38:49.0000] <foolip>
jgraham: unacceptable, but thanks :)

[06:42:47.0000] <jorendorff>
Hixie: ok, it's updated to the latest thing that awb has sent me

[06:43:07.0000] <jorendorff>
however what he sent me does not have the same version number as the latest pdf, hence the qualification

[06:43:55.0000] <jorendorff>
(my scripts work from the source .docx file, not the .pdf. If I had known awb wouldn't publish it anywhere, I would have started with the pdf)

[07:55:36.0000] <smaug____>
which spec defines Selection these days

[08:08:07.0000] <smaug____>
found

[08:31:26.0000] <Hixie>
jorendorff: wow, he writes the spec in word?

[08:31:35.0000] <Hixie>
jorendorff: that's pretty unusual, for a web spec :-)

[08:31:38.0000] <jorendorff>
yes

[08:31:42.0000] <jorendorff>
fml

[08:34:42.0000] <Hixie>
fml?

[08:34:47.0000] <Hixie>
jorendorff: anyway, thanks!

[08:35:43.0000] <jorendorff>
you're welcome

[08:45:12.0000] <JakeA>
Has there been any attempt to make EventTarget constructible & inheritable?

[08:46:02.0000] <Hixie>
what would that mean?

[08:46:53.0000] <JakeA>
class Whatever extends EventTarget - to get addEventListener etc on a custom object

[08:47:39.0000] <ondras>
/me is afraid that Object.observe is now the preferred way to do so

[08:48:05.0000] <ondras>
EventTarget being used only by DOM citizens which inherit from some HTMLElement or so

[08:48:31.0000] <JakeA>
Loads of non-elements use EventTarget

[08:49:03.0000] <JakeA>
XHR, EventSource, WebSockets

[08:49:10.0000] <ondras>
FileReader, yes

[08:49:48.0000] <ondras>
but I would say that those are not full EventTarget impls, because their events lack what makes DOM events unique - capturing and bubbling through the tree

[08:50:42.0000] <JakeA>
new XMLHttpRequest() instanceof EventTarget === true

[08:52:53.0000] <MikeSmith>
bravo Haakon https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/Tosujr59Akg/YV1NbFqYF2wJ

[10:03:23.0000] <Hixie>
JakeA: ah, i see. i think that's been suggested before, but i'm not aware of a plan to do it.

[10:04:00.0000] <Hixie>
JakeA: in practice it doesn't really give you much, i mean, implementing addEventListener() isn't much hardship :-)

[10:04:15.0000] <Hixie>
does anyone know where the ES spec defines how to interpret the subscripts on productions?

[10:05:00.0000] <Hixie>
ah, found it in 5.1.5, nevermind

[11:52:53.0000] <JakeA>
Hixie: I guess, but it feels wasteful writing code or brining in a library to do something that's already in the platform

[12:10:28.0000] <Hixie>
JakeA: it's like 10 lines of code, but sure

[12:40:26.0000] <Hixie>
TabAtkins: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=18026 (comment 11 responds to your comment 10)

[12:40:33.0000] <Hixie>
TabAtkins: (more selectors stuff)

[13:18:31.0000] <foolip>
Hixie: are you having SVN trouble, or why "Change may be delayed a few more days"?

[13:18:45.0000] <Hixie>
i'm trying to track down a bug in my pipeline

[13:18:46.0000] <foolip>
2nd guess is new section splitter

[13:19:00.0000] <Hixie>
which only manifests when i run the fully optimised build under the profiler on the full spec

[13:19:23.0000] <Hixie>
compiling with all optimisations takes an ungodly amount of time

[13:19:32.0000] <Hixie>
running things under the profiler takes an ungodly amount of time

[13:19:41.0000] <Hixie>
and the spec is giant

[13:20:06.0000] <Hixie>
so i'm having to make one slight change, then run the pipeline, then get back to it two giant ungoldly amounts of times later to see the result

[13:20:10.0000] <Hixie>
it's... taking a while

[13:21:45.0000] <Hixie>
so far i have it narrowed down to two specific functions which if i make inline, i get a crash, and if i don't, i don't get a crash.

[13:21:46.0000] <foolip>
out of curiosity, what's the compiler and profiler involved here?

[13:21:54.0000] <Hixie>
freepascal and valgrind

[13:21:54.0000] <foolip>
are we talking C code?

[13:22:12.0000] <foolip>
there's pascal code involved in producing the spec?

[13:22:18.0000] <Hixie>
there is now! :-D

[13:22:24.0000] <foolip>
wow

[13:22:32.0000] <Hixie>
freepascal, specifically

[13:22:59.0000] <Hixie>
which is a rather modern language with generics and operator overloads and class references and interfaces and so on

[13:23:07.0000] <Hixie>
as opposed to "pascal"

[13:23:30.0000] <foolip>
do you have your tools in public, in case you get hit by a bus or if other spec editors want to make Hixie-style specs?

[13:25:23.0000] <Hixie>
not yet, but it's still in progress

[13:33:37.0000] <Hixie>
i dunno if this bug is something i'm doing, like stomping on the stack or something, or if it's just a compiler bug, but either way, it's hugely annoying...

[13:34:28.0000] <foolip>
are you using the memory tool from valgrind as well?

[13:34:49.0000] <foolip>
that should tell you if you're messing up the stack at least

[13:34:53.0000] <foolip>
(I think)

[13:35:26.0000] <foolip>
I've never written anything freepascal so my tips are pretty useless :)

[13:39:26.0000] <jgraham>
Pretty sure Hixie using FreePascal is basically trolling the world ;) "what's the language that is least likely to get contributions, based on the combined factors of unpopularity and uncoolness"

[13:41:02.0000] <Hixie>
getting contributions wasn't even on my list :-)

[13:41:28.0000] <Hixie>
foolip: just callgrind so far, but yeah, i should run the memory tool, good point

[13:41:58.0000] <jgraham>
Hixie: You don't say :p

[13:42:55.0000] <foolip>
maybe use GNU RCS as revision control to please the crowd further

[13:43:27.0000] <jgraham>
Well he's already using SVN…

[13:43:39.0000] <Hixie>
when i started this, svn was cutting edge :-P

[13:43:58.0000] <Hixie>
not my fault you kids keep changing source control system like it's a flavour of the month ice cream :-P

[13:44:20.0000] <foolip>
we can't help ourselves :/

[13:46:55.0000] <Philip`_>
Surely trying to profile the code in Callgrind is just going to tell you that 98% of the time is spent in the Callgrind instrumentation

[13:48:00.0000] <Hixie>
Philip`_: :-P

[13:48:12.0000] <Philip`_>
/me likes 'perf' since it generally works and isn't slow (though the UI is kind of terrible)

[13:48:14.0000] <Hixie>
Philip`_: actually callgrind was really helpful in finding hotspots

[13:48:21.0000] <jgraham>
svn is an interesting case stufy in …something. Very early they set out their stall and said "all we want to be is a better CVS". For a few years, people praised them both for their pragmatic goals and the fact that they achieved them. Then a couple of projects came along with the idea that "a better CVS" was fundamentally the wrong design and very quickly ate svn's lunch.

[13:48:39.0000] <Hixie>
Philip`_: i had used gprof but it was useless (sampling missed all the interesting bits)

[13:51:46.0000] <foolip>
Hixie: how long does the tool take to run on the full spec under normal conditions?

[13:51:53.0000] <foolip>
are we talking minutes?

[13:52:26.0000] <Hixie>
a few seconds

[13:53:05.0000] <Hixie>
i don't know the exact time, i ran into this bug while running it under the profiler so i could clean out low-hanging fruit before measuring the current time

[13:54:10.0000] <foolip>
that sounds pretty quick given the size of the input

[13:54:35.0000] <Hixie>
making it quicker was one of my main goals

[14:13:00.0000] <Hixie>
foolip: good call on suggesting using memcheck

[14:47:33.0000] <MikeSmith>
me discovers https://github.com/kmcallister/html5ever

[15:00:05.0000] <foolip>
Hixie: did that reveal the problem?


2014-07-24
[17:23:34.0000] <MikeSmith>
"we have an over-arching concern that there is things going on in CSS that likely have an impact on Accessibility, and PF (Protocols and Formats WG) have concerns that we aren't monitoring or seeing work at a focused level"

[17:23:57.0000] <MikeSmith>
nice specific actionable feedback there

[17:24:02.0000] <MikeSmith>
http://lists.w3.org/Archives/Public/www-archive/2014Jul/0031.html

[17:24:21.0000] <MikeSmith>
"Our desire would be to have a "partner" - somebody who couldhelp bridge the two working groups by being members of both"

[17:25:24.0000] <tantek>
s/CSS/*.* WG/

[17:25:36.0000] <MikeSmith>
translation: we don't really have the technical understanding about CSS to know what things you guys are working on in CSS that we should be trying to harrass you about

[17:25:54.0000] <tantek>
s/CSS/the web platform/

[17:27:44.0000] <MikeSmith>
... so, what we'd like to do is, have somebody join our group so that we can make that person explain to us what specific spec we can try to slow work down on by forever expressing slightly more focus but still basically vague "concerns"

[17:27:55.0000] <MikeSmith>
tantek: yeah, unfortunately

[17:28:15.0000] <MikeSmith>
but the gall of this request, it's admirable

[17:28:29.0000] <tantek>
oh this was specifically addressed to glazou! hold on let me get the popcorn...

[17:28:35.0000] <MikeSmith>
hahah

[17:28:37.0000] <MikeSmith>
yeah man

[17:28:50.0000] <tantek>
this ought to be worth some memeage

[17:28:56.0000] <MikeSmith>
they picked the wrong guy to float that idea to

[17:29:02.0000] <tantek>
seriously

[17:29:22.0000] <MikeSmith>
tantek: yeah let's hope so, we could use the memeds

[17:29:27.0000] <MikeSmith>
*memes

[17:29:52.0000] <tantek>
take two memeds and call the WG in the morning

[17:30:08.0000] <MikeSmith>
haha

[17:31:40.0000] <tantek>
BTW I've been wondering about this whole "Extensible Web" thing. Is "Extensible Web" the XML of the 2010s?

[17:31:51.0000] <tantek>
and is the Extensible Web Summit the XTech of the 2010s?

[17:32:15.0000] <MikeSmith>
Glazou, Hey partner! We think maybe there are "things going on in CSS that likely have an impact on Accessibility". Likely. Some things. We extend to you the opportunity to join our telcons and talk about concerns.

[17:32:34.0000] <MikeSmith>
tantek: yeah that would be an apt comparison I guess

[17:33:25.0000] <MikeSmith>
"Extensible Web" is the kind of thing we should have been doing back then instead XML

[17:33:40.0000] <MikeSmith>
we weren't ready yet for it back then

[17:34:02.0000] <tantek>
still not convinced we anyone are ready for extensible anything

[17:34:09.0000] <MikeSmith>
fun to try

[17:34:20.0000] <tantek>
but it's entertaining watching people try for sure

[17:34:22.0000] <MikeSmith>
it's really about putting power back in the hands of web developers

[17:34:33.0000] <MikeSmith>
like your indieweb work

[17:34:50.0000] <tantek>
so far indieweb hasn't need much extension except additions to rel and class

[17:35:10.0000] <MikeSmith>
well, "Extensible Web" isn't about extensibility

[17:35:11.0000] <tantek>
but maybe cross-site comment forms would be neat

[17:35:21.0000] <tantek>
and I could see web components being useful for that

[17:35:24.0000] <MikeSmith>
it's misleadingly named, "Extensible Web"

[17:35:30.0000] <tantek>
yeah, bummer of a name

[17:35:50.0000] <MikeSmith>
yeah, I wasn't asked for my vote on the name when it came up

[17:35:59.0000] <tantek>
was the re-use of "Extensible" from XML an accident, deliberate, ironic?

[17:36:00.0000] <MikeSmith>
we're kind of stuck with it now

[17:36:04.0000] <MikeSmith>
no idea

[17:36:09.0000] <tantek>
kind of like we were stuck with XML?

[17:36:12.0000] <MikeSmith>
I don't know who came up with it originally

[17:36:29.0000] <MikeSmith>
I guess it was first used in that idiot "manifesto" thing

[17:36:34.0000] <tantek>
yay happy 10 year anniversary of the great web schism where XML was presumed

[17:36:55.0000] <tantek>
"manifesto"s have such a great history of working out so well

[17:36:56.0000] <MikeSmith>
yeah we've come a long way since

[17:36:59.0000] <MikeSmith>
heh

[17:37:08.0000] <MikeSmith>
yeah, exactly

[17:38:41.0000] <MikeSmith>
anyway to me the ultimate win we'd get is that Web developers would not have to show up hat-in-hand to browser projects begging for some particular feature to be implementd

[17:39:48.0000] <MikeSmith>
instead they'd have the primitives exposed from which they could build the features themselves, & more quickly get them out to others web devs to use

[17:41:40.0000] <MikeSmith>
things do have a bit of the feel of the xtech era of 2005-2006

[17:42:10.0000] <MikeSmith>
optimism about the possibility of some really great new game-changing things coming

[17:42:14.0000] <MikeSmith>
..along

[17:44:31.0000] <tantek>
I guess it still feels like there so much opportunity to create & build game-changing things *without* all this extensible web manifesto stuff that I'm not sure I buy the implied premise (of necessity)

[17:45:07.0000] <tantek>
but hey - that's why I'm still in the wait and see and learn mode re: extensible web *.*

[17:45:32.0000] <tantek>
and instead, work on the "create & build now" with today's building blocks part in #indiewebcamp

[17:46:05.0000] <MikeSmith>
yeah you got plenty to do there already

[18:25:08.0000] <TabAtkins>
tantek: Basically, EWM is about reducing the distance down the tech stack you have to go when you want to change some aspect of how a web feature works.

[18:25:35.0000] <TabAtkins>
Too often, if you want some small change, we shrug and you have to reinvent a ton of stuff from scratch.

[18:26:02.0000] <TabAtkins>
Better if we can expose the layers and let you just move down to the first layer that gives you the control you need; then you still get to rely on whatever's underneath.

[18:26:24.0000] <TabAtkins>
(And often can rely on what's sideways, if things interoperate well between the primitives. That's an ideal that doesn't always happen.)

[18:27:21.0000] <TabAtkins>
This also drastically reduces the lead time between "I want some new feature" and "I have the new feature", because people can more often build new features themselves.

[18:27:59.0000] <TabAtkins>
Which also means we don't have to invent everything, or try to predict the best way to do something - we can come along afterwards and learn from what was build on top and is already popular.

[19:01:54.0000] <JonathanNeal>
Angular.js does this thing where it parses out the arguments in a function to handle dependency injection, I think it’s referred to as reflection. Is there anything like this in native JS or anything proposed to do this?

[19:05:37.0000] <caitp>
I would guess no, because something people really love to do with JS is mangle symbol names with minifiers

[19:10:14.0000] <JonathanNeal>
caitp: good point.

[19:17:52.0000] <zewt>
(that's no reason to not support reflection; minification is a clueless authoring bug)

[19:18:00.0000] <zewt>
(also "minification" is a euphemism for "obfuscation")

[19:18:32.0000] <caitp>
I don't disagree, I just haven't seen it come up on es-discuss

[19:19:25.0000] <caitp>
in the future, maybe people won't care about file sizes because they can depend on their scripts being cached

[19:19:41.0000] <caitp>
and maybe gzip will be good enough

[19:19:46.0000] <zewt>
minification has nothing whatsoever to do with file size

[19:19:53.0000] <zewt>
(if that's what you want, you just use deflate)

[19:20:23.0000] <caitp>
people rarely just use deflate, minification can get you fewer symbols and deflate better than plaintext would

[19:20:49.0000] <caitp>
but, I'm a neutral observer, I don't care a whole lot what people use :)

[19:21:06.0000] <zewt>
no, "minification" is just an excuse to obfuscate code, deflate is plenty

[19:21:48.0000] <caitp>
I don't know man, I think if people were trying to obfuscate their code, they wouldn't use CDNs with source maps in the same directory

[19:21:51.0000] <zewt>
(or total incompetence from people who don't know about compression, which isn't better)

[19:22:38.0000] <caitp>
nobody really does that for the purpose of obfuscation unless they're trying to win [[certain contests]]

[19:23:05.0000] <caitp>
where "nobody" is the informal "probably very few people"

[19:29:53.0000] <tantek>
TabAtkins - that's the best summary explanation of EWM I've seen yet.

[19:29:56.0000] <tantek>
thanks

[19:57:42.0000] <zewt>
adobe sure is special: their applications don't ask you to configure how much memory to use, they have you configure how much memory to "leave available to other applications"

[19:58:00.0000] <zewt>
"16 gigs detected, leaving: 5 gigs for other applications" no.

[22:38:21.0000] <roc>
I'm just a little afraid that EWM is becoming a bit dogmatic, to the point where if something can't be done in an EWM-friendly way people argue it shouldn't be done at all. Or EWM-friendliness trumps all other considerations.

[22:44:08.0000] <SamB>
EWM?

[22:46:42.0000] <MikeSmith>
SamB: extensible web

[22:46:46.0000] <MikeSmith>
manifesto

[22:46:49.0000] <MikeSmith>
I guess

[22:48:07.0000] <MikeSmith>
roc: yeah the "but this feature can't be explained" comments are tiresome

[22:48:36.0000] <MikeSmith>
roc: and I'm afraid it already has become dogma

[22:52:00.0000] <MikeSmith>
when you start something new by launching it with a "manifesto" I guess you're ensured to get to the dogma stage pretty quickly

[22:55:19.0000] <TabAtkins>
Welp, "unexplainable" pretty much means "better hope your use-case is exactly one of the ones we solved", so yeah, it's kinda important.

[22:56:06.0000] <MikeSmith>
nobody said it's not important

[22:56:25.0000] <MikeSmith>
but as roc said, the point is whether it trumps all other considerations

[22:58:29.0000] <TabAtkins>
There's a distinction between "trumps everything" and "always gets brought up", though it might not always seem that way from the other side.

[23:01:58.0000] <SamB>
I would think "unexplainable" meant "what the hell did you do here, go make something that we can follow!"

[23:05:08.0000] <MikeSmith>
I was referring to "explain" in the specific term-of-art sense in which it appears in recent feature/API discussions

[23:05:14.0000] <MikeSmith>
not in the general sense

[23:05:31.0000] <SamB>
explain should NOT be a term of art

[23:05:48.0000] <MikeSmith>
well extensible web should not a term of art

[23:06:17.0000] <MikeSmith>
and ServiceWorker should not be the name for an API

[23:06:20.0000] <SamB>
it is inexplicable

[23:06:43.0000] <SamB>
perhaps, but that's less bad than "explain" as a term of art ...

[00:08:47.0000] <TabAtkins>
SamB: It means "this chunk of functionality invokes too much magic".

[00:09:08.0000] <TabAtkins>
Stuff is "explainable" if you can create it out of other, smaller features.

[00:09:28.0000] <TabAtkins>
And everything becomes a term of art in some context.

[00:10:35.0000] <TabAtkins>
Anyway, it comes from "explain how this works". If the answer is "C++ magic", rather than "here's the JS it desugars to", you gotta evaluate whether the magic is too big or an okay size.

[00:10:40.0000] <SamB>
TabAtkins: well, I guess "explainable" is a better word for that than "redundant"

[00:11:08.0000] <SamB>
why is it irrelevant whether the JS is an okay size or not ;-)

[00:11:13.0000] <TabAtkins>
Sugar isn't redundant, it's usable.

[00:11:23.0000] <SamB>
TabAtkins: I know that ;-)

[00:11:39.0000] <SamB>
hence "is a better word ..."

[00:12:04.0000] <TabAtkins>
Perfectly fine to have something desugar to some fairly complicated code; that's why you provide the sugar in the first place.  It just means that it's possible for people to move down the abstraction levels without having to go *too* far down and reinvent a whole bunch of unrelated stuff.

[00:12:45.0000] <SamB>
well, at some point you might want to reconsider desugaring it at all

[00:13:22.0000] <TabAtkins>
Yeah, you eventually hit a point that's low enough level that it's not worth further explaining, or at least not worth further explaining *right now*.

[00:13:42.0000] <TabAtkins>
Like, fetch() is trying to remain a fairly small nucleus of functionality.

[00:13:44.0000] <SamB>
or, well, maybe my thinking is colored too much by what desugar means in e.g. GHC

[00:13:47.0000] <TabAtkins>
Which is not, itself, explainable.

[00:13:58.0000] <TabAtkins>
And let further features build on it in a desugarable way.

[00:14:01.0000] <SamB>
where the code actually does get converted to the desugared form in the compiler

[00:14:24.0000] <TabAtkins>
Yeah, it's often not necessary (or even prudent) to *actually* implement it in the desugared form.

[00:14:41.0000] <TabAtkins>
You can get better efficiency/whatever by doing it in CSS instead.

[00:14:49.0000] <TabAtkins>
It should just be possible to do so.

[00:15:04.0000] <SamB>
yes, most of the desugaring that GHC's desugarer does is fairly trivial

[00:15:27.0000] <odinho>
high level sugared apis could be implemented directly, as long as they look/behave exactly as if not.

[00:15:30.0000] <TabAtkins>
s/CSS/C++/

[00:15:33.0000] <TabAtkins>
odinho: Yeah.

[00:15:52.0000] <bufferino>
 is there a channel to discuss software development practices?

[00:16:29.0000] <SamB>
and if you're talking about semantic sugar rather than syntactic sugar, well, I don't actually know what that is ;-)

[00:19:34.0000] <odinho>
when i just started at opera i remember discussing much a higher-level convenient api in browsers. starting with an extension, maybe even pre-bundled and get some highlevel nice apis defined. i like the

[00:20:29.0000] <odinho>
direction the js api discussions has taken lately. seem in that direction though not the same

[00:21:44.0000] <TabAtkins>
bufferino: I'm sure there is, but I don't know where it would be. ^_^

[05:15:00.0000] <gsnedders>
All the introductions to current flexbox model seem... lacking. They either have way too little detail or just describe stuff as black magic when trying to explain how flex items flow.

[11:29:42.0000] <Hixie>
the problem with "explainable" being defined as "doesn't involve too much C++" is that "too much" is invariably defined as "as much as my feature, but less than your feature"

[11:30:33.0000] <Hixie>
imho "explainable" is a bad design philosophy. It's definitely good to design things in a way that they can be repurposed logically, and so on. But it's not objective enough as a design philosophy.

[11:30:49.0000] <Hixie>
that's why i prefer the "list the use cases, then evaluate the proposals based on those use cases" model

[11:43:08.0000] <hober>
Yeah, but "sensibly, incrementally add to the platform based on concrete use cases" isn't the stuff MANIFESTOS are made of


2014-07-25
[17:30:58.0000] <TabAtkins>
Hmm, haven't seen zcorpan in a bit. Vacation?

[17:45:13.0000] <MikeSmith>
TabAtkins: yeah

[17:45:33.0000] <MikeSmith>
he'll be away for another couple of weeks at least I think

[17:45:33.0000] <TabAtkins>
Ah, kk. Hrm, wanna get a CSSOM change in relatively quickly, for Firefox's sake.

[17:45:42.0000] <TabAtkins>
I guess we'll have to CfC without him and I'll make the edit.

[17:46:00.0000] <MikeSmith>
wasn't SimonSapin working on CSSOM too?

[17:57:46.0000] <TabAtkins>
Don't think so.

[18:23:50.0000] <MikeSmith>
TabAtkins: zcorpan's be showing up still on irc every few days or so for a short time, so maybe if you ping him he'll follow up

[18:24:17.0000] <TabAtkins>
kk

[18:25:12.0000] <TabAtkins>
zcorpan: Got two cssom-view issues in www-style regarding scrollIntoView that Chrome and FF are in favor of changing.  Please ping the list with yay/nay, and we'll run a CfC for the rest of the WG. I can take care of editing if you want, or leave it to you.

[18:26:06.0000] <MikeSmith>
TabAtkins: if you do, botie, inform zcorpan with that over on #respimg, he'll get a notification with that message next time he joins the channel

[18:26:24.0000] <TabAtkins>
Yeah, saw that.  Thanks.

[18:26:30.0000] <MikeSmith>
cheers

[19:50:33.0000] <Streusel>
is the dublin core meta correct? currently it uses property="dc.title" while the dublin core site notes that it should be name="dc.title", however this is from back in 2001.

[19:58:36.0000] <SamB>
/me hasn't heard of <META PROPERTY> before ...

[20:13:44.0000] <Streusel>
hmm.. :|

[20:14:00.0000] <Streusel>
well facebook uses it for their opengraph

[20:17:22.0000] <Streusel>
All I know is http://html5.validator.nu/?doc=http%3A%2F%2Fupaste.me returns an error on the <meta name="dc.title" content=""> while none on <meta property="dc.language" content="">

[22:40:26.0000] <MikeSmith>
Streusel: it seems dc.title isn't a registered meta@name value, but dcterms.title is

[22:40:33.0000] <MikeSmith>
http://wiki.whatwg.org/wiki/MetaExtensions

[22:40:58.0000] <Streusel>
let me test it with dc.language then

[22:41:24.0000] <MikeSmith>
dc.language is registered

[22:41:34.0000] <MikeSmith>
but dcterms.language is also

[22:41:53.0000] <MikeSmith>
I have no idea which is the one you're really supposed to use

[22:42:17.0000] <Streusel>
>-<

[22:42:36.0000] <MikeSmith>
but there are no dc.* namespaced values registered other than dc.language and dc.date.issued

[22:42:57.0000] <Streusel>
description should be there

[22:43:12.0000] <Streusel>
http://dublincore.org/documents/dc-html/

[22:43:14.0000] <MikeSmith>
shrug

[22:43:26.0000] <Streusel>
that one has dc.title

[22:43:50.0000] <MikeSmith>
myself from the dublincore docs, I can't make heads or tails of what the usage rules are

[22:44:19.0000] <Streusel>
http://dublincore.org/documents/2001/04/12/usageguide/simple-html.shtml

[22:44:31.0000] <Streusel>
but this was issued 2001-04-12

[22:44:41.0000] <MikeSmith>
http://dublincore.org/documents/dc-html/ is the thing that all the registered values cite

[22:45:04.0000] <MikeSmith>
yeah http://dublincore.org/documents/dc-html/ is 2008

[22:45:25.0000] <Streusel>
weird to omit items..

[22:46:47.0000] <MikeSmith>
hmm <meta name="DC.title" content="Services to Government" > etc. are used throughout that http://dublincore.org/documents/dc-html/ document

[22:46:59.0000] <MikeSmith>
do a find-in-page for "name="

[22:47:52.0000] <Streusel>
yeah

[22:48:16.0000] <Streusel>
it's as if they had no other dc.* value

[22:49:33.0000] <Streusel>
so with the overwhelming usage of dc.title, what's the chance of it being added to the list of metaextensions?

[22:52:32.0000] <MikeSmith>
Streusel: if you add it yourself to http://wiki.whatwg.org/wiki/MetaExtensions there's a 100% chance it will be supported

[22:52:46.0000] <Streusel>
hehe

[22:53:05.0000] <MikeSmith>
if you give me your e-mail address I can set up a wiki account for you

[22:57:32.0000] <Streusel>
didn't know the registration was turned off

[00:50:11.0000] <Ms2ger>
Ouch

[00:50:18.0000] <Ms2ger>
I just hit "Too slow? Try reading the multipage copy of the spec instead: http://whatwg.org/html" on the multipage copy

[05:43:08.0000] <gsnedders>
is there any sane way to get position: sticky to interact with flexbox sanely?

[07:46:26.0000] <TabAtkins>
gsnedders: position:sticky is a magic relpos, which should work fine with flexbox.

[07:46:35.0000] <TabAtkins>
Operative word being "should".

[08:17:59.0000] <gsnedders>
TabAtkins: :)

[08:19:18.0000] <gsnedders>
I'm pretty sure my problem is the sidebar is the height of the flex container (or whatever the term is! :P) and not the height of its contents, hence it's being sticky wrt its size.

[08:21:14.0000] <TabAtkins>
Without seeing any of your markup, I have no idea, but you can fix that by setting align-self to "flex-start" on the sidebar.

[08:21:20.0000] <TabAtkins>
It defaults to "stretch".

[08:22:31.0000] <gsnedders>
Can I complain about not understanding flexbox despite having tried to read plenty about it, inc. the spec?

[08:23:10.0000] <TabAtkins>
Possibly.

[08:23:28.0000] <TabAtkins>
But I'm getting ready for work, so I won't read your complaints for a bit.

[08:23:30.0000] <gsnedders>
/me complains

[08:24:04.0000] <gsnedders>
I'll try and put together some email of stuff I don't understand and could do with some more intro in the spec

[09:27:38.0000] <gsnedders>
dev tools really don't make it clear why flexbox stuff ends up as it does

[09:27:53.0000] <TabAtkins>
gsnedders: Thanks, happy to add more explanatory stuff.

[10:08:22.0000] <Hixie>
Ms2ger: lol

[10:08:36.0000] <Hixie>
Ms2ger: can you file a bug? i must have forgotten to set class=split or something

[10:09:29.0000] <Ms2ger>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26435

[10:10:31.0000] <Hixie>
thanks

[10:12:28.0000] <Ms2ger>
Np

[13:12:54.0000] <Hixie>
anyone know anything about moznofilter=""? in particular, how much traction it's getting? https://www.w3.org/Bugs/Public/show_bug.cgi?id=9785

[13:30:46.0000] <MikeSmith>
Hixie: Yesterday I created a wiki account for Streusel and the system claims it e-mailed him a password, but he's still not actually received any message

[13:36:12.0000] <Hixie>
MikeSmith: send it again, i guess?

[13:37:53.0000] <MikeSmith>
Hixie: the system won't let me

[13:37:57.0000] <Hixie>
odd

[13:38:37.0000] <Hixie>
what happens if he uses the lost password flow?

[13:38:39.0000] <MikeSmith>
it says is already sent one within the last 24 hours, so I guess I could re-try laster today after it times out

[13:38:54.0000] <MikeSmith>
Hixie: what I just described above

[13:38:58.0000] <Hixie>
ah

[13:39:00.0000] <Hixie>
well

[13:39:04.0000] <Hixie>
wait 24 hours? :-)

[13:40:41.0000] <MikeSmith>
yeah

[13:40:56.0000] <Hixie>
or find GPHemsley...

[13:41:04.0000] <Hixie>
or whoever is maintaining the wiki these days

[13:51:51.0000] <Streusel>
Hixie: I tried the "lost password" method already ~2 hours after the initial creation.


2014-07-26
[18:03:33.0000] <MikeSmith>
Streusel: I'll try to find somebody to check up on the wiki e-mail thing today

[19:20:18.0000] <zewt>
my new favorite thing in documentation: "undocumented" http://www.adobe.com/devnet-apps/photoshop/fileformatashtml/#50577409_17115

[19:20:22.0000] <zewt>
at least they say so

[19:42:59.0000] <Streusel>
xD

[19:57:59.0000] <SamB>
zewt: hmm, is that the TODO kind of undocumented or the DANGER \n HIGH VOLTAGE kind?

[20:15:31.0000] <zewt>
seems more like the "we added this field that we needed and we don't care enough about this documentation to update it"

[20:16:32.0000] <SamB>
so basically "TODO, suckers!"

[20:17:04.0000] <zewt>
"some manager made someone write this documentation as a PR thing a decade ago and we have no incentive to spend time updating it"

[20:17:19.0000] <zewt>
surprised the doc exists in the first place

[20:19:13.0000] <SamB>
hmm, point ;-)

[20:24:21.0000] <caitp>
technical writing is more tedious than accounting, maybe they decided the cycles were better-spent doing other things

[20:25:10.0000] <SamB>
hmm

[20:25:21.0000] <SamB>
really more tedious?

[20:25:37.0000] <SamB>
I'm not sure you're doing it write if that's so; sounds error-prone ...

[20:26:00.0000] <caitp>
I don't do it

[20:26:08.0000] <caitp>
I don't do my own accounting either

[20:26:29.0000] <SamB>
(Doesn't even really matter if your *text* is correct, if it is overly tedious ...)

[20:26:45.0000] <SamB>
(... nobody will be able to read it without error either, then!)

[02:15:01.0000] <zcorpan>
TabAtkins: what was the other cssom issue?

[05:59:28.0000] <jomici>
hi, I have a question about html5lib: can it be used to parse files containing a web component instead of a classic "html page" with header/body etc?

[06:03:22.0000] <Ms2ger>
Probably not yet

[06:28:31.0000] <jgraham>
Well it will parse them. But possibly not exactly correctly. And it won't do anyting magic with the component

[07:34:04.0000] <gsnedders>
s/possibly/quite probably/

[08:27:55.0000] <GPHemsley>
MikeSmith: Still having wiki issues?

[09:40:37.0000] <MikeSmith>
GPHemsley: password message for new user Streusel never got sent, though the system claims it sent it

[09:45:04.0000] <jgraham>
MikeSmith: Never got sent or never got received?

[10:10:22.0000] <MikeSmith>
jgraham: never received

[10:10:58.0000] <MikeSmith>
no way to tell if it was actually ever sent

[10:12:04.0000] <jgraham>
Could have ended up in spam or something

[10:12:30.0000] <MikeSmith>
he says he checked all that and found no sign of it

[10:33:18.0000] <gsnedders>
Census data is so diabolically bad. Yup, that 55 year old is definitely a son of of a 50 year old.

[11:23:16.0000] <GPHemsley>
/me sense gsnedders is doing genealogy...

[11:25:43.0000] <GPHemsley>
MikeSmith: Did you properly specify an e-mail address? And what's the second user creation?

[12:06:44.0000] <gsnedders>
GPHemsley: you may be right there :)

[12:06:52.0000] <GPHemsley>
;)

[12:11:28.0000] <gsnedders>
(my great grandfather is pretty much entirely a mystery, except for the fact that he was an alcoholic and was cut off from the rest of his family)

[12:11:42.0000] <gsnedders>
Which, incidently enough, is why he's a mystery. :P


2014-07-27
[18:28:41.0000] <MikeSmith>
GPHemsley: yeah I properly specified an e-mail address

[18:29:25.0000] <MikeSmith>
GPHemsley: the second one was me re-trying with a different username and the same e-mail address

[21:04:08.0000] <estellevw>
my understanding was that the datetime input type was removed from the spec in favor of datetime-local, but I still see it in the whatwg specs: http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#date-and-time-state-(type=datetime)

[21:04:42.0000] <estellevw>
with chrome supporting all of the date/times except "datetime" itself.

[21:04:49.0000] <estellevw>
Anyone know the status?

[21:05:03.0000] <tantek>
estellevw - lots is being dropped from W3C HTML5 in the pursuit to actually exit CR with tests and interoperability

[21:05:23.0000] <tantek>
WHATWG HTML still has anything that anyone has at least some interest in.

[21:05:28.0000] <tantek>
so it's more "live" as a result

[21:05:56.0000] <tantek>
and don't even get me started on *all* the confusion around datetime vs. datetime-local etc.

[21:05:58.0000] <estellevw>
The w3c actually only has time and date listed, not week, month or anthing else

[21:06:17.0000] <tantek>
that's right, like I said, lots being dropped for lack of interest, implementation, or real world use

[21:07:36.0000] <estellevw>
all the other 12 new imput types have wide ranging support,

[21:10:26.0000] <estellevw>
thanks tantek. Also, it was good to see you last night.

[21:11:35.0000] <tantek>
estellevw: it was good to see you too. and chat about all the things. this stuff all matters.

[23:01:02.0000] <TabAtkins>
zcorpan: There were two threads, one about changing the overloads and one about adding a "within" attr to the ScrollOptions dict.

[23:20:49.0000] <TabAtkins>
jgraham: gsnedders: I know for a fact that it'll parse unknown elements just fine - I use them on occasion in Bikeshed (temporarily)

[23:21:56.0000] <SamB>
TabAtkins: is that not a (secret) requirement of the HTML spec?

[23:22:03.0000] <TabAtkins>
It is indeed.

[01:12:37.0000] <Ms2ger>
b.innerHTML = "<input type='radio' checked='checked' name='t'/>", l.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked

[01:12:38.0000] <Ms2ger>
Wat

[04:29:27.0000] <metaspike>
hihi

[06:04:17.0000] <gsnedders>
TabAtkins: yes, it'll parse unknown elements, but that isn't the same as what the spec requires for template AFAIK

[09:27:50.0000] <TabAtkins>
gsnedders: Ah, yes, template definitely requires special parsing.

[10:21:11.0000] <caitp>
you might find this amusing --- or maybe not --- https://www.change.org/en-CA/petitions/w3c-stop-letting-google-propose-and-monopolize-internet-standards-without-ensuring-fair-and-adequate-discussion

[11:30:06.0000] <TabAtkins>
caitp: Hahahahahahaha, and also the reddit screencap from further down shows that achen2345 person is cray-cray.

[12:26:01.0000] <annevk>
GPHemsley: are you planning on replying to http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Jul/0118.html at some point?

[13:15:04.0000] <annevk>
Did anyone here know gb18030 has a BOM as well?

[13:15:25.0000] <annevk>
Bytes 84 31 95 33; need to test that

[14:01:43.0000] <GPHemsley>
annevk: Hmm... it seems my e-mail filters have failed me. Thanks for the heads-up.

[14:09:13.0000] <GPHemsley>
(even knowing that the e-mail exists, I'm having trouble getting a search/filter to match it)

[15:05:07.0000] <Streusel>
How does one go about removing a metaextension?

[15:35:04.0000] <GPHemsley>
annevk: I responded, but I basically punted it back to you.

[16:08:29.0000] <MikeSmith>
Streusel: you just remove it and note the reason in the comment when you submit the change

[16:08:41.0000] <Streusel>
alright

[16:09:43.0000] <MikeSmith>
which by the way please actually do write a comment when you make any changes

[16:10:08.0000] <Streusel>
noted


2014-07-28
[01:46:20.0000] <foolip>
annevk: back from vacation?

[01:46:40.0000] <annevk>
foolip: yeah, trying to catch up with stuff I didn't get done on vacation

[01:46:51.0000] <foolip>
welcome back!

[01:47:19.0000] <annevk>
ta

[01:49:22.0000] <annevk>
foolip: reading some xkcd, will do Fullscreen next

[01:49:40.0000] <foolip>
annevk knows his priorities

[02:05:41.0000] <annevk>
foolip: basically, move step 7.1 to 4.0 in http://fullscreen.spec.whatwg.org/#dom-document-exitfullscreen plus some rewording so it still makes sense

[02:05:49.0000] <annevk>
foolip: to fix https://www.w3.org/Bugs/Public/show_bug.cgi?id=26379

[02:08:00.0000] <foolip>
annevk: maybe, also have a look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=26440 to see how you think that'll change things

[02:13:54.0000] <annevk>
foolip: that bug makes a lot of sense, added some people that can hopefully sort out how we ought to define it

[02:17:00.0000] <foolip>
annevk: great, let's do it!

[03:00:00.0000] <annevk>
foolip: you didn't tweet about your fullscreen post

[03:00:08.0000] <annevk>
/me wanted to RT from @WHATWG

[03:01:11.0000] <annevk>
/me finds https://twitter.com/KrisBytes/status/491989665772474368 and https://twitter.com/KrisBytes/status/492268405240909824

[03:02:59.0000] <jgraham>
You can't please some of the people any of the time

[03:19:41.0000] <annevk>
mounir_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26440 is relevant for screen orientation as well

[03:19:48.0000] <annevk>
mounir_: all needs to be synchronized somehow

[03:23:05.0000] <mounir_>
annevk: how is it relevant?

[03:23:14.0000] <mounir_>
annevk: for the part where screen orientation is using fs?

[03:23:46.0000] <annevk>
mounir_: the relevant bit is that changes to orientation need to be synchronized with whenever animate frames happen

[03:24:05.0000] <annevk>
mounir_: and ordered somehow relative to all the other things that happen at that point

[03:26:20.0000] <jgraham>
annevk: Unrelatedly, what's the status of https://www.w3.org/Bugs/Public/show_bug.cgi?id=20976 ? I might implement base URL support in servo at some point when it's clear what that should be

[03:27:00.0000] <annevk>
jgraham: comment 6 is still the plan of action

[03:27:40.0000] <annevk>
jgraham: there's no proposals that I know of that will make base URLs more complicated for now

[03:28:41.0000] <jgraham>
annevk: So compared to the spec what's different? Ignore <xml:base> and otherwise it's the same?

[03:30:02.0000] <annevk>
jgraham: HTML ties the base URL to nodes at the moment, so the difference would be that it would be tied to documents

[03:30:39.0000] <annevk>
jgraham: also yes, I guess, if you don't care about the difference in model it implies

[03:31:40.0000] <jgraham>
Well I guess I care to the extent that I want the implementation to follow the spec without being unnecessarily complex

[03:34:03.0000] <annevk>
So yeah, comment 6

[03:34:19.0000] <annevk>
I'm waiting for implementations to remove xml:base support to align all the things

[03:36:06.0000] <annevk>
I actually kind of hate this background updating feature of apps on my phone. I open the app, I see something interesting. And within a second it's replaced by new content and I can no longer find it.

[04:08:16.0000] <foolip>
annevk: yeah, I didn't have the password handy when I wrote it and then I forgot :/

[04:08:27.0000] <foolip>
let me fix that

[04:12:48.0000] <foolip>
annevk: https://twitter.com/foolip/status/493715626821955584

[04:13:24.0000] <annevk>
foolip: thanks for cleaning it up

[04:14:04.0000] <foolip>
annevk: I hope the unprefixing works out :/

[04:14:28.0000] <annevk>
me too

[04:14:46.0000] <foolip>
I think the biggest risk of breakage is the event target

[04:15:38.0000] <annevk>
yeah, we can change that back I guess including the bubbling stuff, bit weird, but would not be the end of the world

[04:15:53.0000] <annevk>
and just falling back to document if the fullscreen stack is empty

[04:16:19.0000] <foolip>
yeah, it would be tolerable, but a bit weird, so I'll try per spec first

[04:16:27.0000] <annevk>
the spec was written shortly after things started shipping, but nobody ever updated :/

[04:16:33.0000] <foolip>
yeah

[04:16:59.0000] <foolip>
the biggest surprise to me was that WebKit's "Mozilla version" doesn't actually match anything that ever shipped in Firefox

[04:17:02.0000] <annevk>
anyway, along with some CSS stuff this is basically one of the last major pieces that went out with the broken prefix policy

[04:17:14.0000] <annevk>
which is the positive bit of this whole thing

[04:17:27.0000] <annevk>
hah

[04:17:41.0000] <annevk>
/me -> shopping

[04:17:49.0000] <foolip>
have fun!

[05:20:15.0000] <annevk>
foolip: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26366

[05:20:28.0000] <annevk>
foolip: if requestFullscreen unsets the pending element from its task

[05:20:40.0000] <annevk>
foolip: and the task does the animation

[05:21:38.0000] <annevk>
foolip: and exitFullscreen simply unsets it and otherwise does its own task thing, that should work, no?

[06:31:12.0000] <foolip>
annevk: just replied

[06:32:04.0000] <foolip>
but other than that it seems sound that both functions should set some state and then queue a task (or await a stable state?) to check what to do

[06:32:21.0000] <foolip>
I'm honestly not sure how animation is supposed to work

[06:32:50.0000] <foolip>
is the assumption that implementations can animate *before* scripts have had a change to paint a fullscreen frame?

[06:33:03.0000] <foolip>
if so one can't blend between the two or anything like that

[06:33:44.0000] <annevk>
I think the idea was that the events would fire after the animation happened

[06:34:21.0000] <foolip>
does any implementation actually animate the transition?

[06:34:51.0000] <annevk>
Well, maybe not, what matters is that the moment we change various observable things and dispatch the event, the state exposed to script is "fullscreen"

[06:35:05.0000] <annevk>
I guess it doesn't actually have to be fullscreen at that point...

[06:35:06.0000] <foolip>
right

[06:35:34.0000] <foolip>
It seems to me that the spec saying "you can animate here" doesn't help much

[06:35:49.0000] <foolip>
if one wants to animate it ought to be possible without being observable to scripts

[06:36:04.0000] <foolip>
... I think

[06:36:39.0000] <annevk>
I removed a redundant animate bit https://github.com/whatwg/fullscreen/commit/a567c6c723797cbc5116d558af39af42a59ea9e1

[06:37:20.0000] <foolip>
ok, the one in exitFullscreen() isn't redundant then?

[06:37:41.0000] <annevk>
Well, the resizing mentioned in the tasks is important

[06:37:48.0000] <annevk>
/me looks

[06:38:00.0000] <annevk>
foolip: yeah, that should go as well

[06:38:37.0000] <foolip>
I think that the basic model could be something like this:

[06:39:18.0000] <foolip>
requestFullscreen() sets some script-invisible state, queues a (micro?)task and immediately returns

[06:39:55.0000] <foolip>
when that task runs, all the checks are run on that invisible state, and if they pass, resizing begins

[06:40:22.0000] <foolip>
once resize is complete, a task is made to run before the next animation frame, which sets the script-visible state and dispatches all the events

[06:40:57.0000] <foolip>
similar for exitFullscreen(), I haven't been able to understand why that currently cues multiple tasks TBH

[06:41:38.0000] <annevk>
The reason we have a task per document is that documents can be cross-origin and we don't want to create synchronous access hazards

[06:41:50.0000] <foolip>
ah yes

[06:42:16.0000] <foolip>
so I guess each document could await the next frame independently

[06:42:35.0000] <foolip>
the hazard then is that the order is not dependable and yet observable for same-origin frames

[06:43:33.0000] <annevk>
We could define those to be in the same task I suppose... I wonder what happens for a nesting of origins A -> O -> A

[06:43:35.0000] <foolip>
I've tried to understand how animation frames are work across frames but failed

[06:44:39.0000] <foolip>
another problem that'll come up is the scheduling of the fullscreenerror event

[06:45:07.0000] <foolip>
it ought to also be synchronized with animation frames since otherwise the order of events could change I think

[06:46:31.0000] <annevk>
I don't quite get the purpose of the script-invisible state above

[06:46:45.0000] <foolip>
it's the pending element

[06:46:51.0000] <annevk>
Okay

[06:47:23.0000] <annevk>
So you propose two tasks, but inbetween those tasks anything could still happen

[06:48:31.0000] <foolip>
hmm, between the task that does the checking + starts resize and the task that fires the events after resize?

[06:48:44.0000] <annevk>
Yes

[06:49:05.0000] <foolip>
So what Blink actually does is to request the resize synchronously in requestFullscreen()

[06:49:25.0000] <foolip>
but it also updates the fullscreen element stack there, which is how I noticed all of this

[06:49:36.0000] <foolip>
that's observable immediately by scripts :/

[06:50:10.0000] <foolip>
if something could be made to work where the resize is initiated synchronously and there's only a single task once the resize is done, that'd be pretty close to what's implemented

[06:51:10.0000] <foolip>
it's possibly a smaller change to the spec as well, since some checks are currently sync

[06:51:20.0000] <annevk>
Why can't the task that does the resizing not also manipulate the stack? That was a bit unclear to me

[06:51:54.0000] <foolip>
there is no such task, not in the same sense at least

[06:52:16.0000] <foolip>
Blink just tells Chromium to go fullscreen, some things happen out-of-process and then Blink is told that it's been resized

[06:52:31.0000] <foolip>
there's no task that runs and waits for the resize to complete or anything like that

[06:53:44.0000] <annevk>
Okay, so you want to go fullscreen asynchronously, and then queue a task once that is done?

[06:54:06.0000] <annevk>
Perhaps the specification should separate putting the top-level browsing context fullscreen from the rest?

[06:54:11.0000] <foolip>
queue a task that runs immediately before the next animation frame, yes

[06:54:43.0000] <foolip>
it already has the top-level document flag, do you mean something additional?

[06:55:50.0000] <annevk>
Yeah, it seems perhaps that bit should happen earlier in an asynchronous algorithm

[06:56:00.0000] <annevk>
The resizing of the viewport

[06:56:12.0000] <annevk>
Then the per document/element resizing happen can happen afterwards

[06:57:21.0000] <foolip>
yeah, a "wait for the viewport to match the dimensions of the screen" step seems like it should be somewhere after "Return, and run the remaining steps asynchronously." and followed by the queuing of a task that's synchronized with animation frames

[06:57:56.0000] <foolip>
in the case of nested fullscreen, that condition would already be true without any waiting, so maybe not much special casing is needed

[06:58:28.0000] <annevk>
Yeah, this is only for the top-level browsing context, same for exitFullscreen()

[06:59:16.0000] <annevk>
Given we do that, does my model then make sense?

[07:00:40.0000] <foolip>
It sounds like we're on the same page, but can you outline again the steps of requestFullscreen() and exitFullscreen() in your model?

[07:00:49.0000] <foolip>
or just make the spec change and I can read that

[07:01:47.0000] <annevk>
foolip: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26366#c6

[07:02:26.0000] <annevk>
so 1) sets pending element and does some checks sync) 2) resizes async 3) queues a task once resize is complete to do various bits

[07:02:48.0000] <foolip>
yes, that sounds right

[07:03:25.0000] <foolip>
and some of the checks that now involve the fullscreen element stack would also have to look at the pending element, unless there's always an early return for that case

[07:04:39.0000] <foolip>
I believe you'll have the choice of either making the first or the last requested element be the one that wins, not sure if it matters which it is

[07:05:16.0000] <annevk>
Ah yeah, we could either terminate early or just overwrite and not queue new tasks

[07:05:30.0000] <foolip>
right

[07:05:53.0000] <foolip>
I think I don't have an opinion, and there's likely no compat situation for that to care about

[07:06:18.0000] <annevk>
I guess it would be nicer to overwrite in case there's various buttons and the user changes his mind... Not sure if that'd go fast enough though

[07:06:48.0000] <foolip>
the more likely scenario is that there are multiple frameworks competing I think

[07:07:04.0000] <foolip>
in which case success is not a possible outcome

[07:07:21.0000] <annevk>
Early fail might be better than, plus encouraging a message to the console

[07:08:20.0000] <foolip>
so what about requestFullscreen() and exitFullscreen() in the same script?

[07:09:02.0000] <foolip>
does exitFullscreen() clear the pending element, so that when the resize is done, one exits immediately?

[07:09:21.0000] <foolip>
the only way to not have to deal with this is to have two tasks I think

[07:09:29.0000] <foolip>
but that's less nice in other ways

[07:09:56.0000] <foolip>
or is the exitFullscreen() just ignored? that'd be easy to implement at least...

[07:10:27.0000] <annevk>
Ignoring exitFullscreen() as long as there's an async operation ongoing?

[07:10:43.0000] <annevk>
I don't think that works as that would be bad for navigation

[07:10:51.0000] <foolip>
oh, yeah

[07:11:11.0000] <annevk>
I think exitFullscreen() should detect if an asynchronous operation is ongoing, and if so, reverse it

[07:11:23.0000] <foolip>
and have no events fired at all?

[07:11:31.0000] <annevk>
Yeah I guess

[07:12:07.0000] <annevk>
Nothing really happened except perhaps some flickering depending on timing of the UA

[07:12:14.0000] <foolip>
hmm... I don't know if it's possible to guarantee that scripts won't see the intermediate state

[07:12:33.0000] <foolip>
it'd be pretty easy to allow the request to finish and then immediately exit, though

[07:12:53.0000] <annevk>
Okay, perhaps exit should always dispatch events

[07:13:04.0000] <annevk>
But early exit cancels the requestFullscreen events

[07:13:50.0000] <foolip>
are you thinking about an "exit fullscreen pending" flag to do this?

[07:14:29.0000] <annevk>
request sets pending, exit simply unsets pending

[07:14:52.0000] <annevk>
then once the task from request runs, pending is unset which terminates the task

[07:15:36.0000] <foolip>
yes, ok, I think this could work

[07:16:09.0000] <foolip>
will have to look closely at the spec text to know for sure

[07:17:04.0000] <annevk>
we could also make exitFullscreen a no-op while pending is set but have the navigate variant always exit, not sure what is nicer

[07:17:17.0000] <annevk>
yeah, might require another day of iterating and some more review

[07:17:22.0000] <annevk>
not easy

[07:17:34.0000] <foolip>
not entirely, no

[07:18:15.0000] <foolip>
some feedback from roc and cpearce would be nice too, Gecko might have completely different issues around resizing

[07:18:57.0000] <foolip>
it's about time implementations and the spec started to agreeing on the details here :)

[07:43:34.0000] <annevk>
On something like Firefox OS you might not have these constraints of having to do some OS-level resize

[07:46:16.0000] <SimonSapin>
annevk: Having the IPv4-in-URLs discussion in two places is not great. (Even though it’s my fault for filing both.) Let’s switch to just one, which do you prefer?

[07:46:31.0000] <annevk>
SimonSapin: Bugzilla

[08:00:32.0000] <annevk>
foolip: the synchronous checks from requestFullscreen are broken as they potentially cross origin boundaries

[08:00:53.0000] <annevk>
/me cries a little bit

[08:03:19.0000] <foolip>
annevk: oops, I guess you'll need to fix that :)

[08:03:55.0000] <annevk>
foolip: what does Chrome do at the moment? Just go fullscreen?

[08:04:22.0000] <foolip>
if the checks need to enter a cross-origin iframe?

[08:04:34.0000] <annevk>
yeah

[08:05:22.0000] <foolip>
it just uses does the checks as per spec, with a cute little assert that I think will break without out-of-process iframes

[08:05:34.0000] <foolip>
so this looks like something that needs to be resolved sooner or later

[08:05:57.0000] <foolip>
s/without/with/

[08:47:17.0000] <annevk>
foolip: to prevent race conditions you need a global request fullscreen in process flag

[08:47:47.0000] <annevk>
not even sure if that works :-(

[08:48:01.0000] <annevk>
not the easiest day after vacation

[09:03:51.0000] <annevk>
foolip: I posted this thing as a question to the WHATWG list for now

[09:05:42.0000] <gsnedders>
Hixie: gimme your parser and tell me what I need to build it and how to run it

[09:42:30.0000] <gsnedders>
jgraham: parser.log is both pretty useless and includes what phase we're in twice

[09:42:40.0000] <gsnedders>
jgraham: also totally untested

[09:47:44.0000] <gsnedders>
jgraham: in other news, why does it take two months to be able to push a typo fix in a string to master? code review requirement utterly fails if nothing ever reaches master…

[09:50:06.0000] <Ms2ger>
gsnedders, feel free to r? me for things that simple :)

[09:50:25.0000] <jgraham>
gsnedders: It's not that useless since I wrote it to find a bug that I then fixed. It's not intended to be public-facing code so I don't see why you care about test coverage

[09:50:36.0000] <jgraham>
I agree that the review situation isn't working out

[09:51:04.0000] <gsnedders>
jgraham: it also has a very significant effect on perf under PyPy

[09:51:37.0000] <jgraham>
gsnedders: Even when not in use?

[09:51:56.0000] <gsnedders>
jgraham: It's all the metaclass magic and indirection that's the cost, so yes

[09:52:19.0000] <gsnedders>
jgraham: i.e., any change of parsing phase is a hash table lookup when it could be a direct reference

[09:53:53.0000] <jgraham>
gsnedders: It isn't clear to my where the cost comes from since it sets the metaclass to "type"

[09:54:26.0000] <gsnedders>
jgraham: it's the fact we're doing self.phases["text"] everywhere instead of TextPhase

[09:54:45.0000] <jgraham>
Oh

[09:55:18.0000] <jgraham>
It strikes me that PyPy should be able to optimise constant dicts

[09:55:58.0000] <jgraham>
Can it optimise named tuples?

[09:56:08.0000] <gsnedders>
PyPy's view is that dicts are hashtables and should be treated as hashtables. You don't expect magic from C++ hashtables, so don't expect magic there. classes on the other hand are quicker.

[09:56:32.0000] <jgraham>
If you took that view writing a js engine you would have one slow js engine

[09:56:48.0000] <gsnedders>
but JS doesn't have any separate object type

[09:56:52.0000] <gsnedders>
or class type

[09:56:55.0000] <gsnedders>
or what have you

[09:57:01.0000] <gsnedders>
attribute accesses are fast in PyPy

[09:57:37.0000] <jgraham>
Saying "we aren't going to optimise a very common case that we could optimise" still doesn't seem like a reasonable way to end up with a fast implementation

[09:58:03.0000] <gsnedders>
Are you sure parser.log is private? It's exposed in parse.py, which I thought in theory just used public APIs…

[09:58:12.0000] <gsnedders>
jgraham: go argue in #pypy if you care

[09:59:07.0000] <jgraham>
What gave to the idea that parse.py is only public apis?

[09:59:27.0000] <gsnedders>
well it seems like an example application to me

[09:59:31.0000] <jgraham>
It's only useful to debug the implementation, it's not aimed at end users at all

[09:59:47.0000] <jgraham>
No, it's a debugging tool

[10:00:21.0000] <gsnedders>
that's not at all clear

[10:01:26.0000] <jgraham>
It's certainly not "clear" it's an example application

[10:01:41.0000] <jgraham>
It's not in the documentation or an examples/ directory

[10:05:51.0000] <gsnedders>
jgraham: then why do we ship it with releases?

[10:08:04.0000] <gsnedders>
jgraham: I'd assume anything bundled with the release at the top level is there for example reasons

[10:11:18.0000] <jgraham>
That seems like a properly strange assumption. It doesn't get installed anywhere other than the library directory

[10:11:41.0000] <jgraham>
Anyway, this conversation is not going to get us anywhere

[10:11:48.0000] <jgraham>
What are you trying to achieve?

[10:15:35.0000] <gsnedders>
I was planning on adding tests and totally refactoring how HTMLParser.__init__(debug=True/False) works.

[10:16:50.0000] <jgraham>
I think adding tests is harmful

[10:17:05.0000] <jgraham>
For small values of "harm"

[10:17:31.0000] <gsnedders>
so you want me to totally redesign how it works without testing it? ;P

[10:17:37.0000] <jgraham>
Sure

[10:18:13.0000] <jgraham>
I mean I'm happy for you to totally redesign how it works and produce any output you like that has a broadly comparable feature set

[10:18:32.0000] <jgraham>
If you want to do something more dramatic e.g. remove it entirely, we should talk more

[10:19:13.0000] <jgraham>
I don't think that adding yet more code in the form of tests is worthwhile; I think it will add to the maintainace burden rather than reduce it

[10:19:41.0000] <gsnedders>
I think it's useful. I think it should be there. I'm not entirely convinced it should be private.

[10:19:59.0000] <gsnedders>
Having a private argument on a function seems… dubious API design, though.

[10:22:11.0000] <jgraham>
It could be a global variable

[10:22:14.0000] <gsnedders>
I'd like at least one test for it. If we're having it in parse.py, I'd rather it be tested. AFAIK.

[10:22:29.0000] <gsnedders>
https://launchpad.net/ubuntu/+source/html5lib/0.9-2 makes it look like I'm not the only person believing it an example.

[10:26:30.0000] <jgraham>
Well I'm not exactly going to stop you writing a test for it. But I still don't think the tradeoffs are likely to make sense

[10:26:48.0000] <gsnedders>
I've already written one. It's not exactly hard to do.

[10:27:28.0000] <jgraham>
And if you want to move parse.py to a debug directory or something, feel free to do so

[10:32:57.0000] <gsnedders>
Ms2ger: but you're a reviewer on html5lib-tests and haven't even reviewed all my open PRs there!

[10:33:55.0000] <Ms2ger>
gsnedders, there's too much on my critic dashboard to make it useful for me, so I only review things I'm pinged about :)

[10:35:45.0000] <jgraham>
/me seems to have > 200 things on his critic dashboard :(

[13:38:02.0000] <caitp>
I still think it's terrible that you can't cause a form control to suffer from bad input by programmatically changing its value, this really sucks for testability =(

[13:40:04.0000] <Hixie>
isn't there a testing api

[13:40:08.0000] <Hixie>
web driver or some such

[13:40:24.0000] <caitp>
webdriver has a huge suite of problems along with it

[13:46:11.0000] <caitp>
when the choices are "enable special privileges in the browser" or "use the flake-maker", things are pretty unfortunate

[15:15:45.0000] <TabAtkins>
zcorpan: The other thread was titled "[cssom-view] Allowing scrollIntoView() to only scroll the nearest scroll container"

[16:50:43.0000] <Hixie>
how are we doing in terms of dropping mutation events?

[16:57:07.0000] <jgraham>
Heh

[16:57:56.0000] <roc>
where are proposals for new input-related DOM events specced these days?

[16:59:36.0000] <Hixie>
roc: the premise of your question is flawed, sadly

[16:59:44.0000] <Hixie>
oh wait, you mean new ones

[16:59:47.0000] <Hixie>
not the implemented ones

[16:59:48.0000] <roc>
elucidate?

[16:59:54.0000] <roc>
yes


2014-07-29
[17:00:10.0000] <Hixie>
there's various drafts for various proposals, afaik

[17:00:35.0000] <jgraham>
Yeah that all fragmented. There's a pointer-events wg although I don't know if they still do stuff

[17:01:03.0000] <jgraham>
http://lists.w3.org/Archives/Public/public-pointer-events/

[17:01:10.0000] <Hixie>
i've been mostly ignoring new proposals on the basis that without a spec for 'keydown' and 'mouseup' and so on, there's not much point looking at making new events

[17:02:43.0000] <roc>
well, I don't think that's true. There is still value in speccing new events rather than having people go off and do their own things.

[17:03:36.0000] <Hixie>
i mean "making new events" in the sense of implementing new ones, let alone speccing them

[17:05:13.0000] <jgraham>
Hixie: [Un]fortunately people violently disagree with you on that

[17:05:44.0000] <Hixie>
yeah, clearly :-)

[17:05:49.0000] <jgraham>
Hence the 17 different efforts to specify touch events

[17:06:45.0000] <jgraham>
OTOH if we want the web to do well on touch-based devices, saying "oh we can't figure out touch because we haven't managed to figure out keyboards in the last 20 years" isn't going to cut it

[17:09:41.0000] <Hixie>
i'm saying "let's describe what browsers have to implement for keyboard, mouse, and touch events, since those have already shipped, then let's design an input event system that is media-independent so we don't have to do this again in two years"

[17:15:15.0000] <tantek>
keyboard events is a great way to get embroiled in accessibility and internationalization issue processing. at least that was my experience with the CSS "key-equivalent" property

[17:15:52.0000] <Hixie>
the key (oops) is to scope your work to exclusively be "specify what needs to be implemented to be interoperable"

[17:16:08.0000] <Hixie>
then there's no bikeshedding possible

[17:17:17.0000] <tantek>
interoperable across which devices with which set of keys or buttons? which year of mobile devices with which buttons do you wish to spec?

[17:17:38.0000] <tantek>
or which year of which laptop(s) or qwertyish handhelds?

[17:17:42.0000] <tantek>
good times.

[17:17:53.0000] <tantek>
in which countries?

[17:19:54.0000] <jgraham>
Since we can't get specific input systems right, the chance of abstracting over all existing and  possible future input systems and producing something useful seems remote

[17:20:54.0000] <tantek>
enjoy: http://www.bing.com/images/search?q=japanese+handheld+keyboards

[17:21:55.0000] <jgraham>
It's unfortunate that we have always had to be reactive, but not that surprising

[19:25:28.0000] <SamB>
Hixie: I don't see how not having the old events specced makes having what new events may come into use specced any less useful?

[23:37:31.0000] <annevk>
Hixie: not much progress on mutation events so far

[00:39:40.0000] <annevk>
SimonSapin: sad that your query got no replies, but we do need to address that question somehow

[01:05:51.0000] <foolip>
annevk: did you get the answers you needed in the "Fullscreen API and out-of-process <iframe>" thread?

[01:06:15.0000] <annevk>
foolip: yeah I guess, still a bit unsure how to spec it

[01:07:17.0000] <foolip>
is it specifically the racy requestFullscreen problem, or something more general I'm not seeing?

[01:07:33.0000] <annevk>
foolip: something like requestFullscreen() does a request to resize the browser window; that request either returns it failed, returns it's already done, or returns it succeeds (maybe returns it's in progress for someone else?)

[01:08:11.0000] <annevk>
I was mostly just wondering what the best way was to update state and such

[01:08:30.0000] <foolip>
you mean structure it so that the internal resize request can fail, and deal with that by firing fullscreenerror?

[01:09:06.0000] <annevk>
yeah, that'd be an error I guess

[01:09:11.0000] <annevk>
not sure about the other conditions

[01:09:35.0000] <foolip>
well it's actually not the resize that would fail, but another element would already be in fullscreen when we're notified of success

[01:09:43.0000] <annevk>
what I was also worried is about resizing has completed, but state has not changed and then something happens

[01:09:57.0000] <annevk>
am*

[01:10:41.0000] <foolip>
hmm

[01:11:10.0000] <foolip>
it would be nice to treat two racy requests by imposing an arbitrary order on them, determined by IPC or whatever

[01:11:23.0000] <annevk>
the "pending element" thing is sorta global in a way too

[01:11:37.0000] <foolip>
then make them do the same thing that this order of requests would do with plenty of time in between them

[01:11:39.0000] <annevk>
well the request to resize would be that I guess

[01:11:58.0000] <foolip>
the pending element is per-document, no more global than that, surely?

[01:12:47.0000] <annevk>
if A and B are same-origin and invoke requestFullscreen right after each other, what happens?

[01:13:07.0000] <foolip>
are they sibling or parent-child?

[01:13:35.0000] <annevk>
I guess the first resizes the window, the second is notified the window is already changed, then the first notifies state change, then the second

[01:13:41.0000] <annevk>
parent-child

[01:14:21.0000] <annevk>
I also realized we cannot really make the checks asynchronous, that'd be racy

[01:14:22.0000] <foolip>
I don't think the answer ought to be different than for cross-origin A and B, even if it's possible to implement differently

[01:17:02.0000] <foolip>
you mean the fail-checks that will fire fullscreenerror?

[01:29:40.0000] <SimonSapin>
annevk: about IPv4 address syntax? I’ll try to find Mozilla people who work on related stuff and ask them

[02:12:45.0000] <annevk>
foolip: yeah

[02:14:10.0000] <annevk>
foolip: say B invokes requestFullscreen and A removes B's container

[02:51:34.0000] <foolip>
annevk: not knowing how to spec it, I'd say it should either enter fullscreen sucessfully and then exit again, or fail to enter fullscreen, depending on which event is considered first

[02:51:38.0000] <foolip>
but... sigh

[02:52:30.0000] <foolip>
/me -> lunch

[02:54:21.0000] <annevk>
yes, sigh :-)

[03:52:05.0000] <jgraham>
annevk: The servo people are looking at HTTP at the moment because the Rust HTTP ecosystem is very immature and they have been using a library that doesn't really work

[03:52:35.0000] <jgraham>
So they are likely very interested in a HTTP spec that you could write an implementation from and actually have it work with real websites

[03:53:07.0000] <annevk>
Yeah, no doubt. I don't have the bandwidth

[03:53:39.0000] <Ms2ger>
The other options is to make Manishearth write the spec

[03:53:42.0000] <Ms2ger>
option*

[03:53:46.0000] <annevk>
I'm keeping notes on the WHATWG Wiki

[03:54:06.0000] <annevk>
http://wiki.whatwg.org/wiki/HTTP Not very elaborate so far though

[03:54:21.0000] <jgraham>
annevk: I'm not saying "you have to write the spec"

[03:54:34.0000] <jgraham>
I'm saying "they have an interest in this work"

[03:54:41.0000] <JakeA>
annevk: If WorkerGlobalScope is [Exposed=Worker] and `interface ServiceWorkerGlobalScope : WorkerGlobalScope {` and FormData `Exposed=(Window,Worker)`, doesn't that mean FormData is exposed in ServiceWorkerGlobalScope?

[03:54:51.0000] <jgraham>
Which might indeed by a way of finding someone else who can justify writing the spec

[03:55:27.0000] <annevk>
JakeA: you would need [Global=Worker] but that also makes XMLHttpRequest exposed

[03:55:51.0000] <annevk>
JakeA: which I thought was one of the things we didn't want? And we did not want FileReaderSync which would also have Exposed=Worker

[03:56:29.0000] <annevk>
jgraham: if you know the relevant people you could point them to http://lists.w3.org/Archives/Public/ietf-http-wg/2014JulSep/1542.html

[03:56:50.0000] <JakeA>
annevk: I don't have a problem with XMLHttpRequest, but yeah, FileReaderSync isn't great

[03:57:24.0000] <annevk>
JakeA: if you have Global=Worker all those *Sync APIs would be available in service workers too

[03:57:47.0000] <annevk>
JakeA: if you don't, we'll need to add Exposed=ServiceWorker to some APIs

[03:58:30.0000] <Ms2ger>
annevk, I'm not drowning him in IETF :)

[03:59:06.0000] <annevk>
JakeA: we could potentially only use Worker for sane interfaces, and introduce SyncWorker or some such as alias for dedicated worker / shared worker that APIs such as FileReaderSync can use

[03:59:16.0000] <JakeA>
annevk: hmm or move the sync APIs… yeah, what you said

[03:59:43.0000] <Ms2ger>
Why don't you want those *Sync interfaces?

[03:59:52.0000] <annevk>
JakeA: if you have a plan email public-script-coord⊙wo

[04:00:02.0000] <annevk>
Ms2ger: service workers can't be blocking

[04:00:11.0000] <JakeA>
Ms2ger: Pretty much the same reason they're not great in a sharedworker. You're blocking

[04:00:22.0000] <Ms2ger>
I see

[04:00:23.0000] <JakeA>
actually, they're not great in any worker

[04:05:52.0000] <annevk>
JakeA: now would be the time to propose such a change, need to get Hixie on board; everyone needs to update syntax usage of [Exposed] a bit anyway

[04:06:09.0000] <annevk>
JakeA: however, we'll still need to decide what gets to use Worker and what gets to use SyncWorker or some such

[04:06:16.0000] <JakeA>
annevk: yeah, I'm struggling to find the docs on [Exposed]

[04:06:38.0000] <JakeA>
SyncWorker should be considered lagacy really

[04:06:43.0000] <annevk>
JakeA: http://heycam.github.io/webidl/ defines it

[04:06:46.0000] <JakeA>
heh, or even legacy

[04:07:00.0000] <JakeA>
cheers

[04:07:10.0000] <annevk>
JakeA: HTML defines Global=Window, Global=Worker, Global=DedicatedWorker, Global=SharedWorker

[04:07:54.0000] <annevk>
JakeA: basically we should ask Hixie to also define Sync/LegacyWorker as synonym for DedicatedWorker/SharedWorker

[04:08:14.0000] <annevk>
JakeA: and then go through all APIs and ensure they are annotated in the correct way

[04:08:42.0000] <annevk>
JakeA: and SW would define [Global=(Worker,ServiceWorker)] on its global

[04:11:54.0000] <JakeA>
annevk: why [Global=(Worker,ServiceWorker)] rather than [Global=(ServiceWorker)]?

[04:12:27.0000] <annevk>
JakeA: I thought you wanted FormData to be exposed as is, and not require updating it to say Exposed=(Window,Worker,ServiceWorker)

[04:18:40.0000] <JakeA>
annevk: ok, starting to get my head around how [Global]

[04:19:59.0000] <JakeA>
…works

[04:38:24.0000] <annevk>
[Global] indicates the name of the global, [Exposed] indicates what is exposed on it

[04:38:48.0000] <annevk>
[Global] also indicates the class is a global

[04:49:44.0000] <annevk>
foolip: so I tried to figure out how this would work in JS. In JS, you'd request the resize. Get an event when that's done (stable state) and from there you'd change state and potentially dispatch another event to tell other observers.

[04:50:05.0000] <annevk>
foolip: the only problem is communicating with the cross-origin bits.

[05:55:27.0000] <foolip>
annevk: I read your email as well

[05:56:03.0000] <foolip>
is there anything I can do to help figure this out? I'm not coming up with any brilliant solutions TBH

[05:59:58.0000] <annevk>
I guess I need to find out what invariants we are trying to preserve

[06:00:39.0000] <annevk>
E.g. if you have A -> B -> A'. Are A and A' synchronous?

[06:01:14.0000] <foolip>
you mean if it's possible to do the checks synchronously, or if events should fire in the same task, or something else?

[06:01:38.0000] <annevk>
If A and A' were same-origin, should they be updated in the same animation frame, yes

[06:02:09.0000] <foolip>
didn't someone comment that animation frames were synchronized across frames already?

[06:02:48.0000] <annevk>
They are, but not across origins...

[06:03:03.0000] <annevk>
And A' cannot reach A I think due to B, though I'm not a 100% sure

[06:04:02.0000] <foolip>
I'm not sure about that either

[06:04:41.0000] <foolip>
can A and A' get each others windows or documents in some way? if not, then it doesn't matter

[06:05:05.0000] <annevk>
It matters a bit for how we phrase things in the specification I guess

[06:06:22.0000] <foolip>
for the sake of sanity, it's probably best to assume that no two iframes are in the same process, even if they're same-origin

[06:06:36.0000] <annevk>
So the case I'm concerned with is that a descendant puts something in the animation frame queue of its parent, but then the parent navigates or removes the <iframe> of the descendant

[06:06:51.0000] <foolip>
I suppose the question is if an API designed around that will have observable racy behavior for same-origin iframes

[06:07:08.0000] <annevk>
I guess before you update state in an animation frame, you need to make sure your document is still "sane"

[06:07:41.0000] <foolip>
right...

[06:08:06.0000] <foolip>
when one believes that a document is in fullscreen, queue the task that is synchronized with animation frames

[06:08:33.0000] <foolip>
when we get to that task, we will know if the frame we're about to paint is actually a fullscreen frame or not

[06:08:57.0000] <foolip>
I suppose one could base some decisions on that, and at least let each individual frame have a consistent view of things

[06:09:57.0000] <annevk>
If you have A -> B -> C

[06:10:17.0000] <annevk>
B invokes requestFullscreen(), C invokes exitFullscreen()

[06:11:19.0000] <annevk>
Is it possible that A gets messages about updating its state to exit fullscreen before it updates to fullscreen, whereas the others get it in a different order?

[06:12:16.0000] <foolip>
if C invokes exitFullscreen() before B has successfully entered fullscreen, it won't do anything, right?

[06:12:47.0000] <annevk>
Well B could have entered fullscreen, but that does not say anything about A per se

[06:13:07.0000] <annevk>
Well, unless the IPC queue is global

[06:13:23.0000] <foolip>
if B has successfully entered fullscreen, then A will have an iframe on the fullscreen element stack and can't enter fullscreen

[06:13:29.0000] <annevk>
And the IPC queue is ordered

[06:13:41.0000] <foolip>
the races will be between requests to enter I think, not between enter and exit

[06:13:44.0000] <beverloo>
JakeA, ping

[06:14:14.0000] <annevk>
foolip: B can have entered fullscreen, but A does not need to have the message processed that updates its fullscreen element stack

[06:14:31.0000] <JakeA>
beverloo: pong!

[06:14:40.0000] <annevk>
foolip: the "worry" was that the message from C could arrive in A before B's message arrives

[06:14:41.0000] <foolip>
ah yes

[06:15:03.0000] <annevk>
But assuming a global ordered non-racy IPC queue...

[06:15:30.0000] <foolip>
well it's ordered for sure, but non-racy in what sense?

[06:16:29.0000] <foolip>
if two frames wait for Date.now() to be a whole minute or something and then post events, then those two events aren't in a predictable order

[06:16:38.0000] <foolip>
I guess that's not what you mean thouhg

[06:18:18.0000] <foolip>
maybe something can be gained from the fact that a request must come from a trusted input event

[06:18:52.0000] <foolip>
those come from the top-level process after all, so any requests must happen while it's being processed

[06:19:23.0000] <foolip>
although I'm pretty clueless about input event handling

[06:19:27.0000] <annevk>
So B invokes requestFullscreen and after some time posts messages to A and C. Then after C gets its message it can invoke exitFullscreen() and post messages to B and A.

[06:19:42.0000] <annevk>
Can A get C's before B's?

[06:20:02.0000] <annevk>
Yeah, that helps masking the problem

[06:22:08.0000] <foolip>
I think no, if B first posts a message to A and after that posts a message to C, nothing that C does in that message can arrive at A before B's message

[06:22:28.0000] <foolip>
if that's not true assumption, then sanity is nowhere to be found I think

[06:23:11.0000] <annevk>
I guess we should be okay then... Apart from working out how to synchronize with animation frames

[06:24:22.0000] <foolip>
Sounds promising

[06:24:48.0000] <foolip>
I can dig up the order of things in Blink's event synchronizing code if needed

[06:25:26.0000] <foolip>
the most basic thing is that all events for an animation frame are fired before the requestAnimationFrame callback, but you could probably guess that much

[06:25:49.0000] <foolip>
I'd be shocked if it's actually spec'd though

[06:28:06.0000] <jgraham>
It is kind of unfortunate that no one apart from bz seems to have held the web-perf people to account

[06:28:55.0000] <foolip>
jgraham: what's that about?

[06:29:54.0000] <jgraham>
foolip: What's what about?

[06:30:03.0000] <Ms2ger>
webperf

[06:30:22.0000] <jgraham>
The web-perf people did rAF and various other specs

[06:30:51.0000] <jgraham>
But is lacking people who are sufficiently aware of the quality requirements for modern web specs

[06:31:19.0000] <jgraham>
So I am unsurprised that you would be shocked if they had spec something

[06:31:25.0000] <jgraham>
*speced

[06:33:47.0000] <annevk>
I wonder what /*sealed*/ means in HTML

[06:34:31.0000] <Ms2ger>
Nothing

[06:34:44.0000] <Ms2ger>
It's just a reminded to himself that you can't inherit from global objects

[06:36:08.0000] <annevk>
Document has it too

[06:38:46.0000] <Ms2ger>
Huh

[06:39:35.0000] <beverloo>
annevk, hi

[06:39:41.0000] <annevk>
hey

[06:39:43.0000] <beverloo>
so, web notifications and service workers

[06:40:00.0000] <beverloo>
jake found this document: https://gist.github.com/jungkees/3154398b8deee7c70139

[06:40:53.0000] <JakeA>
annevk: the latter half on events is relevant

[06:41:18.0000] <beverloo>
it answers the event question indeed, and suggest methods to accept an optional service worker argument

[06:41:48.0000] <beverloo>
since the web notification api would define a property in the init dictionary instead, we could require it to be a ServiceWorker instance

[06:42:32.0000] <JakeA>
beverloo: it should be the ServiceWorkerRegistration instance, now we have those

[06:42:40.0000] <JakeA>
(we didn't when the doc was first created)

[06:43:10.0000] <annevk>
that seems a bit nicer than a scope

[06:45:36.0000] <annevk>
beverloo: the event name should be notificationclick

[06:45:37.0000] <JakeA>
The alternative is new serviceWorkerRegistration.Notifiation(), but feels silly to duplicate

[06:45:42.0000] <beverloo>
annevk, yes

[06:45:55.0000] <annevk>
(not activate as per email)

[06:46:09.0000] <beverloo>
agreed :)

[06:46:34.0000] <Ms2ger>
notificationDOMActivate

[06:46:34.0000] <annevk>
if you created the Notification object in the service worker

[06:46:41.0000] <annevk>
what happens then?

[06:46:59.0000] <annevk>
should it automatically set its serviceWorker member?

[06:47:19.0000] <annevk>
are events dispatched to both places?

[06:47:22.0000] <beverloo>
given that the lifetime of a service worker cannot be relied upon, we'd default to serviceWorker=[active ServiceWorkerRegistration]

[06:47:34.0000] <beverloo>
it does raise questions for |onerror| though

[06:48:04.0000] <annevk>
is ServiceWorkerRegistration available inside the service worker global environment?

[06:48:39.0000] <JakeA>
annevk: it could be. Not an unreasonable request.

[06:48:57.0000] <JakeA>
annevk: events should only be dispatched to one

[06:49:08.0000] <annevk>
For the API it does not matter much, as long as there's some abstract concept I can associate with

[06:49:22.0000] <annevk>
JakeA: to either the SW or the object?

[06:49:35.0000] <JakeA>
annevk: a running serviceworker knows its registration, that's not a problem

[06:49:38.0000] <annevk>
JakeA: currently events are dispatched to all associated objects

[06:50:11.0000] <annevk>
I guess I could see an argument for only dispatching events to an SW if one was provided at registration time or if it was created in an SW

[06:50:12.0000] <JakeA>
annevk: ok, it should be one or the other. If the notification has an associated serviceworker, it should only fire the event in the serviceworker

[06:50:18.0000] <JakeA>
yep

[06:50:23.0000] <annevk>
However, that'd argue for exposing all events in the SW, not just two

[06:51:26.0000] <JakeA>
beverloo: what's the issue with firing all events within the sw?

[06:51:54.0000] <beverloo>
there's a hypothetical issue with onnotificationshow -- if we'd ever allow delayed notifications it could be used to set precise timers

[06:51:56.0000] <annevk>
If someone could summarize this on the list that'd be great. I think this works, still trying to sort out some other spec issues, so much to do :/

[06:52:07.0000] <annevk>
Unless there's more?

[06:52:22.0000] <beverloo>
but that's purely hypothetical at this point. there's no issues with onnotificationerror as far as I'm aware

[06:52:49.0000] <annevk>
Ooh, we probably don't want to boot up the SW for show either

[06:53:23.0000] <JakeA>
annevk: is that a security issue?

[06:53:33.0000] <annevk>
Just wasteful I guess

[06:54:03.0000] <JakeA>
annevk: if people don't addEventListener for it, we don't have to wake it up. But I guess we'll be talking about that later :)

[06:54:14.0000] <annevk>
But maybe we should do it, yes

[06:54:31.0000] <annevk>
You'll go into history as the guy who abused the event system beyond repair

[06:55:45.0000] <JakeA>
can always set which events you want as part of the install event, but I'd rather not

[07:20:24.0000] <annevk>
beverloo: JakeA: each event would implement NotificationEvent I take it which has a pointer to a Notification object?

[07:20:41.0000] <JakeA>
annevk: yep

[07:20:59.0000] <annevk>
could reuse CustomEvent event, but bit weird

[07:31:59.0000] <JakeA>
annevk: are there any other *Sync APIs aside from filesystem?

[07:32:10.0000] <JakeA>
I notice the IDB ones have been burned to the ground

[07:32:24.0000] <annevk>
JakeA: I thought IDB was implemented in Firefox

[07:32:33.0000] <annevk>
JakeA: XMLHttpRequest has a sync API

[07:33:06.0000] <annevk>
JakeA: we could disable the sync part of XMLHttpRequest in service workers, or we could not expose XMLHttpRequest at all...

[07:34:29.0000] <JakeA>
annevk: yeah, I'm happy with disabling the sync part. Losing all of xhr could mean already-existing libraries can't be used in importScripts. (but I can't find any useful worker-compatible scripts that use XHR)

[07:35:00.0000] <annevk>
Well, if existing libraries use it synchronously that'd break too

[07:35:10.0000] <JakeA>
true

[07:36:52.0000] <Ms2ger>
Would you expose importScripts?

[07:37:18.0000] <annevk>
Ms2ger: only during install or some such... not entirely sure how that is going to be monkey patched up the chain

[07:52:57.0000] <JakeA>
yeah

[08:35:11.0000] <Manishearth>
Ms2ger: which spec? HTTP?

[08:35:21.0000] <Manishearth>
I can ... co-write, maybe.

[08:35:48.0000] <Manishearth>
Write a whole spec? I'll end up with security bugs in the spec itself. No thanks, don't want to be the next Heartbleed. :P

[08:37:44.0000] <Manishearth>
Ah, HTTP header parsing errors. Hmm

[08:52:05.0000] <annevk>
That is where all the security errors would be, mind you ;-)

[08:57:29.0000] <jgraham>
Manishearth: The possibility of writing security bugs into the spec is a terrible reason not to write the spec. Typically more people read the spec than particular implementations, and having one spec that defines how to handle all possible inputs is a huge net good for reducing security errors

[09:00:27.0000] <Manishearth>
jgraham: Yeah, but neither am I (a) experienced with spec writing, nor (b) *that* knowledgeable about HTTP headers -- The security bugs was a joke, but seriously speaking I don't think I'd be able to do this alone

[09:03:06.0000] <jgraham>
Manishearth: Sure, I wouldn't expect you to

[09:03:34.0000] <Manishearth>
I would love to be part of a joint effort :)

[09:03:47.0000] <annevk>
Manishearth: let mnot know

[09:04:01.0000] <jgraham>
Manishearth: Usually the way these things work is N people express an interest in editing. Then between N and N-1 of them find out that they don't have the time or the inclination, so 0 or 1 people do 100% of the writing

[09:04:25.0000] <Manishearth>
I don't have the time, but I ought to be able to make time.

[09:04:30.0000] <jgraham>
(other people still contribute feedback ofc)

[09:04:41.0000] <astearns>
shh, jgraham - don't scare him off

[09:04:45.0000] <Manishearth>
haha

[09:05:04.0000] <Manishearth>
I have a tendency of overloading myself. Already overloaded, and today I decided to TA a course. Blah.

[09:26:28.0000] <Hixie>
what would a "Sync" worker be?

[09:26:58.0000] <Manishearth>
Hixie: THat exists?

[09:27:11.0000] <Hixie>
i dunno, some people were talking about it earlier

[09:27:15.0000] <Hixie>
i didn't follow the conversation

[09:27:16.0000] <Ms2ger>
Hixie, dedicated worker

[09:27:23.0000] <Hixie>
how is a dedicated worker "sync"?

[09:27:29.0000] <Manishearth>
a sync worker makes no sense

[09:27:30.0000] <Manishearth>
ah

[09:27:34.0000] <Hixie>
and how is a shared worker any less "sync"?

[09:27:35.0000] <Ms2ger>
Hixie, in the sense that it gets access to FooSync APIs

[09:27:41.0000] <Ms2ger>
Shared too

[09:27:46.0000] <Ms2ger>
But not ServiceWorker

[09:27:49.0000] <Manishearth>
ah

[09:27:51.0000] <Hixie>
o_O

[09:27:56.0000] <Hixie>
why would service worker not get the same apis?

[09:28:00.0000] <Manishearth>
hooray for nomenclature

[09:28:09.0000] <Ms2ger>
Because it's not supposed to block

[09:28:28.0000] <Hixie>
why would it matter if it blocks? and how would you stop it from blocking?

[09:28:44.0000] <Hixie>
are service workers going to have script timeouts like main thread scripts?

[09:28:47.0000] <Ms2ger>
annevk, ^

[09:29:28.0000] <annevk>
not sure, they might die at any point

[09:29:34.0000] <annevk>
but that seems like a good question to ask in that thread

[09:44:12.0000] <Hixie>
annevk: so are we going to give up on killing mutation events? or what?

[09:50:55.0000] <annevk>
Hixie: smaug____ still has hope, so I haven't given up just yet

[09:52:29.0000] <Ms2ger>
I'd certainly like to not implement them in Servo

[09:53:18.0000] <Ms2ger>
Hixie, er... *goes off to check the spec*

[09:54:33.0000] <Ms2ger>
Hixie, no, I think I'm right

[09:54:48.0000] <Hixie>
The :disabled pseudo-class must match any element that is actually disabled.

[09:54:57.0000] <Hixie>
An element is said to be actually disabled if it falls into one of the following categories:

[09:55:00.0000] <Hixie>
button elements that are disabled

[09:55:06.0000] <Hixie>
A form control is disabled if its disabled attribute is set, or if it is a descendant of a fieldset element whose disabled attribute is set and is not a descendant of that fieldset element's first legend element child, if any.

[09:55:09.0000] <Ms2ger>
Stop

[09:55:16.0000] <Ms2ger>
I'm talking about fieldsets

[09:55:29.0000] <Hixie>
what about them?

[09:55:35.0000] <Hixie>
oh nested ones?

[09:55:37.0000] <Ms2ger>
Yes

[09:55:40.0000] <Hixie>
ohhh

[09:55:42.0000] <Hixie>
iteresting

[09:55:44.0000] <Hixie>
int...

[09:55:48.0000] <Ms2ger>
"fieldset descendant of a disabled fieldset"

[09:56:18.0000] <Hixie>
i interpreted "fieldset descendant" in the same sense as "italian descendant", as in, a descendant of a fieldset

[09:56:21.0000] <Hixie>
my bad

[09:56:41.0000] <Ms2ger>
Fair :)

[09:59:30.0000] <Hixie>
man, i'm so bad at being a human. i came into this room an hour ago to get a drink. then i sat down just to see what was going on online, and an hour later, i still haven't gotten a drink.

[10:00:25.0000] <smaug____>
Mutation events sure are in my list to kill

[10:00:53.0000] <Hixie>
seems like if we manage to kill showModalDialog() before mutation events, mutation events are a bit too hardy to kill.

[10:02:06.0000] <Domenic>
I think MutationEvents will die slowly over the next few years, event-by-event

[10:02:29.0000] <Hixie>
we don't have much history of usage of a feature going down over time.

[10:03:00.0000] <Domenic>
Hmm I thought I recalled some chromestatus graphs indicating otherwise

[10:03:11.0000] <Domenic>
I think loud deprecation warnings help actually

[10:03:25.0000] <Hixie>
having those is relatively new, so yeah, maybe they have an effect

[10:03:30.0000] <Hixie>
though honestly i'd be surprised

[10:04:56.0000] <Ms2ger>
One can hope ;)

[10:08:52.0000] <Hixie>
MikeSmith: for validator reasons, be aware of https://www.w3.org/Bugs/Public/show_bug.cgi?id=25572

[10:17:22.0000] <Domenic>
JakeA: yaaaay for removing the *

[10:19:53.0000] <annevk>
jamesr__: that email was somewhat depressing

[10:20:09.0000] <annevk>
jamesr__: I believe roc still holds hope for the storage mutex in Servo

[10:23:49.0000] <jamesr__>
annevk: the status quo is a bit depressing, but once you accept it the possibilities are much freer

[10:31:29.0000] <annevk>
jamesr__: and the apps harder to debug?

[10:32:09.0000] <jamesr__>
theoretically, yes, in practice, it doesn't seem so

[10:34:07.0000] <annevk>
jamesr__: also, my problem in that thread is mostly what state the browser will end up in, not so much the page's app

[10:39:04.0000] <jamesr__>
the page can't tell about any of this for the most part. if a page calls requestFullscreen(), the UA is allowed to do any number of async steps before deciding to accept or reject the promise

[10:39:19.0000] <jamesr__>
so from the page's POV it just gets an accepted or rejected promise at some point later

[10:49:27.0000] <annevk>
jamesr__: if the updating of document state races can't the page get in a state where when it's first notified it's fullscreen it's for a different element from the one it requested?

[10:51:04.0000] <jamesr__>
can't that happen without races?

[10:51:29.0000] <jamesr__>
i.e. i ask for fullscreen on X, the ua pops an infobar asking the user if they want to allow X, then somebody request fullscreen on Y, the ua pops an infobar asking for permission, the user allows Y ?

[11:09:43.0000] <annevk>
I thought we had no infobars. Hmm

[11:21:24.0000] <JakeA>
Domenic: yeah, it's late in the day to be removing that, but needed to go

[11:23:13.0000] <zewt>
surely every ua would have a "yes always stop bothering me every time" button

[11:23:57.0000] <zewt>
though browsers today are pretty bad about fullscreen, iirc no way to stop the obnoxious "you're fullscreen now" thing every single time

[11:55:53.0000] <Ms2ger>
What do people use for http fetching in python nowadays?

[11:58:01.0000] <jgraham>
requests

[11:59:04.0000] <Ms2ger>
/me tries that

[12:11:48.0000] <Ms2ger>
jgraham, shouldn't root.find("span[@id='summary']") work?

[12:12:47.0000] <jgraham>
Which treebuilder? If it's ElementTree it only supports a bastardised subset of XPath

[12:13:23.0000] <Ms2ger>
"the default"

[12:13:35.0000] <jgraham>
Oh and .find only seems to look at children

[12:14:30.0000] <Ms2ger>
Doh

[12:14:55.0000] <jgraham>
Oh wait I lied

[12:15:06.0000] <jgraham>
The documentation is self-contradictory

[12:15:13.0000] <jgraham>
You porbably want a // though

[12:15:37.0000] <jgraham>
"//span[@id='summary']"

[12:15:49.0000] <Ms2ger>
SyntaxError: cannot use absolute path on element

[12:15:59.0000] <jgraham>
Add a . then

[12:16:01.0000] <jgraham>
.//

[12:16:12.0000] <Ms2ger>
Then it doesn't find anything :/

[12:16:35.0000] <jgraham>
Does it find anything without the attribute selector?

[12:16:47.0000] <Ms2ger>
With ".//[@id='summary']" it manages to raise SyntaxError("invalid descendant")

[12:17:09.0000] <Ms2ger>
Aha

[12:17:12.0000] <jgraham>
Yeah, that's not valid XPath

[12:17:20.0000] <Ms2ger>
".//*[@id='summary']" seems to find something

[12:17:57.0000] <Ms2ger>
Looks like perl to me, but oh well

[12:18:40.0000] <jgraham>
To be fair CSS Selectors look even more like Perl for non-trivial cases

[12:18:56.0000] <jgraham>
XPath is mostly consistent, it's just complex for any case

[12:19:33.0000] <Ms2ger>
Had I just used regexps rather than html5lib, I'd probably have cursed less now

[12:19:39.0000] <Ms2ger>
(And more later, of course)

[12:57:47.0000] <Ms2ger>
MikeSmith, there's no API to get at the summary of w3.org bugs, right?

[13:03:19.0000] <Hixie>
Ms2ger: bugzilla has an api

[13:03:38.0000] <Ms2ger>
Does it work on the w3.org installation?

[13:04:43.0000] <Hixie>
yeah, it's what i use to graph total bugs

[13:05:31.0000] <Ms2ger>
Pointer?

[13:06:11.0000] <Hixie>
uh

[13:07:20.0000] <Hixie>
dunno

[13:07:30.0000] <Hixie>
can't see any comments in my code pointing to anything useful :-)

[13:08:11.0000] <Hixie>
try putting ctype=xml on the query string for a bug

[13:10:39.0000] <Ms2ger>
Aha

[13:29:04.0000] <Ms2ger>
Hixie, this seems to be reacting terrible slowly

[13:29:25.0000] <Hixie>
yeah i noticed that too

[13:29:28.0000] <Hixie>
dunno if it's always that slow

[13:48:30.0000] <Hixie>
MikeSmith: you around?

[13:49:01.0000] <Hixie>
MikeSmith: i was wondering how easy it would be to instrument the validator, or have something on the validator that would catch certain specific errors and encourage users to comment on the relevant bug

[13:49:29.0000] <Hixie>
MikeSmith: e.g. https://www.w3.org/Bugs/Public/show_bug.cgi?id=12990 is asking for us to allow nested <footer>. Would we be able to detect this case and ask people to comment on that bug about why they need it, possibly linking to their page?

[13:53:18.0000] <Ms2ger>
Hixie, thanks for the pointer :)

[13:54:02.0000] <Hixie>
there's something you can do for queries too, iirc

[13:58:04.0000] <Ms2ger>
This was sufficient :)

[14:21:10.0000] <Hixie>
foolip: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25573

[15:01:18.0000] <SamB>
... hmm, is it possible to scale an image to fit in a given box, keeping the aspect ratio, without knowing the dimensions of the image?

[15:09:14.0000] <Hixie>
SamB: from JS, or in general?

[15:09:18.0000] <Hixie>
or in CSS?

[15:09:24.0000] <SamB>
CSS

[15:09:33.0000] <Hixie>
yeah, there's some property for that

[15:09:47.0000] <Hixie>
background-cover or something

[15:09:54.0000] <SamB>
with JS, you could of course cheat and wait for the image to load

[15:11:24.0000] <SamB>
well, HTML + CSS; it's not an issue if it needs an extra box inside the main box

[15:12:14.0000] <SamB>
Hixie: background-size comes up when I search for that, and looks relevant

[15:16:01.0000] <SamB>
Hixie: hmm, looks like that has values "cover", which will avoid any blank parts at the expense of chopping off other bits, and "contain", which avoids cutting anything off at the expense of having blank spaces?

[15:17:17.0000] <SamB>
/me wonders how it is possible to have one intrinsic dimension AND an intrinsic proportion

[16:00:53.0000] <Hixie>
SamB: sounds about right

[16:28:54.0000] <Hixie>
zcorpan: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=25555


2014-07-30
[17:25:02.0000] <MikeSmith>
Hixie: thanks for the heads-up about https://www.w3.org/Bugs/Public/show_bug.cgi?id=25572 (Don't remove script elements when checking noscript)

[17:26:04.0000] <MikeSmith>
Hixie: as far as providing a way to catch certain specific errors and encourage users to comment on the relevant bug, yeah, it's doable

[17:27:33.0000] <MikeSmith>
in the case of the specific nested footer bug, I can imagine the way we'd handle it is just in the JS code rather than in the in server-side valiator code

[17:29:04.0000] <MikeSmith>
just do a match for the error message and append an additional sentence with a hyperlink to the bug or wherever

[22:10:03.0000] <TabAtkins>
SamB: background-size has "cover" and "contain", if you want backgrounds.  object-fit has the same keywords, for replaced elements (support is spotty, though)

[22:10:55.0000] <TabAtkins>
Scaling to fit *in* a box would be "contain".

[22:27:14.0000] <Hixie>
MikeSmith: qv also https://www.w3.org/Bugs/Public/show_bug.cgi?id=25549

[22:27:46.0000] <Hixie>
MikeSmith: also fyi https://www.w3.org/Bugs/Public/show_bug.cgi?id=25532, though that's purely editorial

[22:28:02.0000] <Hixie>
really hope to regen soon, hopefully tomorrow

[22:29:49.0000] <MikeSmith>
Hixie: thanks looking now

[22:30:32.0000] <MikeSmith>
Hixie: yup actually already saw those

[22:30:50.0000] <MikeSmith>
I really do read all my bugmail

[22:30:59.0000] <MikeSmith>
but thanks for the heads-up about them

[22:31:34.0000] <Hixie>
np

[22:31:44.0000] <Hixie>
i'm just mentioning them since the diffs won't be specific about them

[22:38:15.0000] <Hixie>
MikeSmith: i would be very interested in the feedback on nested <footer>. https://www.w3.org/Bugs/Public/show_bug.cgi?id=12990

[22:41:28.0000] <MikeSmith>
Hixie: I'd have no strong feeling to just allowing nested footer. It seems like something people are just going to end up doing regardless, and either just ignorning the validator errors, or replacing it with <div class=footer> or something to get around the errors

[22:41:57.0000] <MikeSmith>
Hixie: but I'd be glad to add sentence to the current nested-footer error

[22:42:02.0000] <MikeSmith>
with a link to the bug

[22:44:05.0000] <Hixie>
i'm mostly curious about whether the people doing it are doing it on purpose or not. i mean, there's lots of things that are borderline-arguably-ok, but where most people who do it will in fact have done it by mistake

[22:46:42.0000] <MikeSmith>
Hixie: ah yeah, ok, I see your point

[22:47:07.0000] <MikeSmith>
Hixie: so, what should the added text in the error message say?

[22:49:19.0000] <Hixie>
MikeSmith: i dunno, something like "Do you have opinions on whether this error message is useful? _Please comment on this bug_."

[22:54:59.0000] <MikeSmith>
ok

[02:35:25.0000] <annevk>
Is it "resize to user-agent-defined dimensions" or "user agent-defined dimensions"?

[02:38:27.0000] <jgraham>
Don't forget "user agent defined dimensions", "user-agent defined dimensions", "user agent defined-dimensions" or "user agent-defined-dimensions" :p

[02:38:55.0000] <jgraham>
(the first and third look the most sensible to me)

[02:40:48.0000] <annevk>
foolip: so I think my main problem is that I don't know how to define it sanely

[02:41:14.0000] <annevk>
foolip: once you return from requestFullscreen() and the need arises to resize, all the things could have happened

[02:41:49.0000] <annevk>
foolip: and since it's asynchronous there's no guarantees unless you have something like a storage mutex indeed

[03:50:07.0000] <hsivonen>
annevk: possibly of interest: https://support.mozilla.org/en-US/questions/1012431 (percent-escaping host name in URL)

[03:50:28.0000] <annevk>
hsivonen: there's an open bug somewhere

[03:55:44.0000] <hsivonen>
annevk: not sure

[03:55:58.0000] <hsivonen>
annevk: also not sure who should be considered to be in error

[03:55:59.0000] <annevk>
http://www.whatwg.org/specs/web-apps/current-work/multipage/fragment-links.js changed and now html.py from whatwg/xref fails

[03:56:24.0000] <annevk>
hsivonen: per the URL Standard we should first remove percent encoding and then run the thing through IDNA for host names

[03:57:04.0000] <annevk>
hsivonen: http://url.spec.whatwg.org/#concept-host-parser

[03:59:24.0000] <annevk>
I can only find https://bugzilla.mozilla.org/show_bug.cgi?id=956463 but that's a duplicate for sure

[04:12:27.0000] <annevk>
Hixie: on top of that fragment-links.js breakage, you also changed a bunch of fragment identifiers for British English...

[04:15:36.0000] <annevk>
Hixie: dude and you're not even consistent

[04:15:46.0000] <annevk>
Hixie: "serializing simple colour values"

[04:17:20.0000] <JakeA>
annevk: so, we've got these ServiceWorker instances. You can get at them in pages and serviceworkers. Having === work within a page is useful. Is there a way to avoid expandos?

[04:17:46.0000] <annevk>
JakeA: if you want === to work you need to tie them to the lifetime of the document

[04:18:51.0000] <JakeA>
annevk: These live within a serviceworker registration so their lifetime is beyond that of a document, but their lifetime is defined

[04:19:12.0000] <annevk>
JakeA: objects don't live longer than a document

[04:19:20.0000] <annevk>
JakeA: underlying concepts might

[04:19:38.0000] <annevk>
JakeA: the spec should distinguish between the two

[04:20:29.0000] <JakeA>
Gotcha, cheers

[06:37:09.0000] <hsivonen>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=309671

[06:38:14.0000] <annevk>
hsivonen: cool, I'll mark the older one as DUPE

[10:47:08.0000] <yk>
warning

[10:47:08.0000] <yk>
 you may be  watched

[10:47:08.0000] <yk>
do usa&israel use the internet(facebook,youtube,twitter, chat rooms ..ect)to spy??

[10:47:08.0000] <yk>
do usa&israel use the internet 2 collect informations,,can we call that spying??

[10:47:08.0000] <yk>
do they record&analyse everything we do on the internet,,can they harm you using these informations??

[14:10:03.0000] <scheib>
Howdy, a few of us Chrome folk are actively starting work on Bluetooth now. We've proposed a W3C Community Group: http://www.w3.org/community/blog/2014/07/30/proposed-group-web-bluetooth-community-group/

[15:23:42.0000] <GPHemsley>
I guess yk didn't know that this channel is already publicly logged in at least two separate places...

[15:26:03.0000] <Hixie>
maybe he just wanted to make sure we knew

[15:26:20.0000] <Hixie>
though honestly i wish israel paid more attention to #whatwg

[15:26:52.0000] <Hixie>
because (a) it would be fantastic to get their feedback, and (b) maybe it would take their attention away from their current activities.

[15:42:38.0000] <SamB>
/me wonders how dumb it would be to replace an img with an image ...

[16:18:17.0000] <Hixie>
annevk: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=26081


2014-07-31
[21:36:09.0000] <hemanth>
meow

[21:37:16.0000] <hemanth>
/me is watching Domenic's https://github.com/domenic/Array.prototype.contains awesome progress! [ Take a bow ] 

[21:52:35.0000] <caitp>
meow

[21:54:31.0000] <caitp>
it would be a nice feature to have, just like all of the es5 features nobody ever uses because they need to support ie4

[21:55:27.0000] <hemanth>
caitp, hope there will be one day, where all the browser are in sync...

[21:56:17.0000] <caitp>
such a day will never come, because browser A will support remote controlling your toaster while browser B will only support watering your lawn and making coffee

[21:56:32.0000] <hemanth>
:D

[22:02:04.0000] <Domenic>
Thanks hemanth :)

[22:02:15.0000] <hemanth>
:)

[22:05:22.0000] <roc>
scheib: you know about the FirefoxOS Bluetooth work I assume?

[22:05:30.0000] <roc>
and are in touch with the people doing it?

[23:48:37.0000] <hemanth>
BuzzFeedJS is �ber funny :D Criticisms at it's best.

[01:05:45.0000] <foolip>
annevk: I'll take a look at your spec change today. are you still stuck without something like a storage mutex?

[01:14:17.0000] <annevk>
foolip: it doesn't do full protection against multiple tabs trying to go fullscreen

[01:14:53.0000] <annevk>
foolip: the "can activate a popup" helps with that of course, but it's not a perfect system

[01:19:10.0000] <foolip>
you mean because there's no way to actually click in the tabs fast enough?

[01:19:37.0000] <foolip>
are there any races involving exitFullscreen()

[01:20:30.0000] <foolip>
s/tabs/frames/

[01:20:51.0000] <foolip>
if it's only requestFullscreen(), then some vague nonsense about waiting until other requests in the document tree have either failed or completed could be added I guess

[01:33:09.0000] <annevk>
foolip: I think exitFullscreen() is fine

[01:33:44.0000] <annevk>
foolip: I moved most of the logic for both as part of the animation frame task, with the resizing happening before for request and after for exit, asynchronously

[01:34:44.0000] <annevk>
foolip: at least it no longer tries to access document variables from a potentially parallel thread

[01:51:56.0000] <foolip>
annevk: I'll have a look at file a ton of bugs :)

[01:52:27.0000] <hemanth>
Broken link? https://github.com/whatwg/streams/issues/163

[02:17:05.0000] <annevk>
foolip: that's why we love you

[02:25:00.0000] <Ms2ger>
Hey foolip, you like reviewing tests, right? ;)

[02:25:47.0000] <Ms2ger>
Oh look: http://httpwg.github.io/specs/rfc7230.html

[02:46:44.0000] <annevk>
position:fixed and fragment identifiers don't go well together

[03:10:05.0000] <foolip>
Ms2ger: well, is it media-related?

[03:10:24.0000] <Ms2ger>
No

[03:10:31.0000] <foolip>
what is it then?

[03:10:50.0000] <foolip>
"plz review everything in w-p-t"?

[03:11:21.0000] <Ms2ger>
Nah

[03:11:28.0000] <Ms2ger>
Please review all *my* PRs ;)

[03:11:33.0000] <Ms2ger>
Or any of them

[03:11:40.0000] <Ms2ger>
https://github.com/w3c/web-platform-tests/pulls/Ms2ger

[03:12:56.0000] <foolip>
Ms2ger: you don't like semicolons?

[03:13:00.0000] <foolip>
https://critic.hoppipolla.co.uk/39bb75ba?review=2192

[03:13:16.0000] <Ms2ger>
I followed file style

[03:13:29.0000] <Ms2ger>
I think annevk's fault :)

[03:13:38.0000] <foolip>
of course, I assumed the test was originally yours as well

[03:13:38.0000] <annevk>
"fault" I say

[03:14:13.0000] <annevk>
"Just" learn ASI

[03:14:24.0000] <Ms2ger>
commit ddfe31fcc58bf52fab979d0df20fda121a6f8bda

[03:14:24.0000] <Ms2ger>
Author: Anne van Kesteren <annevk⊙oc>

[03:14:25.0000] <Ms2ger>
Date:   Tue Sep 7 09:45:24 2010 +0200

[03:14:25.0000] <Ms2ger>
    adoptNode/importNode should not throw for invalid names as per zcorpan's original draft and implementations

[03:14:36.0000] <foolip>
I shouldn't complain, I like to use == instead of ===

[03:15:03.0000] <Ms2ger>
/me gasps

[03:15:09.0000] <foolip>
/me isn't sure what the cool stance is

[03:15:18.0000] <annevk>
SameValueZero of course

[03:15:35.0000] <Ms2ger>
assert_equals :)

[03:15:48.0000] <foolip>
well yeah, but when not writing tests I mean :)

[03:16:10.0000] <Ms2ger>
I guess === is most correct for the effort required

[03:16:21.0000] <annevk>
Of course, SameValueZero only exists for Map/Set, there's no primitive

[03:16:40.0000] <foolip>
what's SameValueZero? google denies knowledge

[03:16:59.0000] <annevk>
foolip: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero

[03:17:10.0000] <annevk>
foolip: it's like Object.is(), except that -0 and +0 are also equal

[03:18:09.0000] <foolip>
but... 1/Infinity === -1/Infinity

[03:18:42.0000] <foolip>
but apprently !Object.is(1/Infinity, -1/Infinity)

[03:18:43.0000] <foolip>
cute

[03:19:46.0000] <annevk>
foolip: https://github.com/domenic/Array.prototype.contains#why-samevaluezero

[03:20:42.0000] <foolip>
Object.is(NaN, NaN) is true, that's refreshing

[03:20:52.0000] <annevk>
Yeah, that's the difference with ===

[03:21:07.0000] <foolip>
well, I'm glad there's no complexity on the Web!

[03:21:09.0000] <annevk>
They should just add Object.isz() and be done with it

[03:21:18.0000] <annevk>
Or ====

[03:21:33.0000] <annevk>
foolip: at least there's no racing :p

[03:21:44.0000] <foolip>
what's wrong with !Object.is(1/Infinity, -1/Infinity)

[03:21:46.0000] <foolip>
?

[03:22:04.0000] <foolip>
they are different, after all

[03:22:45.0000] <annevk>
I'm not sure, but reportedly you want -0 and +0 to be treated identically commonly

[03:26:15.0000] <foolip>
Ms2ger: https://critic.hoppipolla.co.uk/showcomment?chain=6942

[03:50:14.0000] <Ms2ger>
Landed as "Sumbit progress and range tests from IE10 development"

[04:19:00.0000] <foolip>
Ms2ger: https://critic.hoppipolla.co.uk/r/33 looks like a bucketload of fun, is that completely unreviewed or just in need of rubber stamping?

[04:24:27.0000] <sangwhan>
Does anyone know why this test passes in particular on Gecko? http://tests.sangwhan.com/tests/generated_keyevent.html

[04:24:45.0000] <sangwhan>
seems to fail on everything else i tried (which excludes IE, which I don't have access to)

[05:23:16.0000] <Ms2ger>
"W3C Invites Implementations of #HTML5"

[05:23:21.0000] <Ms2ger>
Why thank you, I'll pass

[05:33:13.0000] <jgraham>
Ms2ger: Do you have time to look at the ServiceWorker PR for testharness.js

[05:33:29.0000] <jgraham>
I have looked through most of it, but didn't mark it reviewed so that you could

[05:33:43.0000] <jgraham>
[Service]Worker

[05:34:06.0000] <Ms2ger>
I guess I'll try to do that today

[05:34:56.0000] <jgraham>
/me wonders if #HTML5 is for people who are high as a kite

[05:35:28.0000] <jgraham>
(that works better if you prnounce # as hash rather than in one of the 26 other ways…)

[05:40:55.0000] <MikeSmith>
sangwhan: suggest asking bz on #developers on irc.mozilla.org

[05:44:56.0000] <MikeSmith>
Ms2ger: your super-important hspace/vspace test is still awaiting responses to my extensive review comments

[05:46:14.0000] <Ms2ger>
I'm more into review-without-comment ;)

[05:46:29.0000] <Ms2ger>
MikeSmith, will do

[05:50:05.0000] <Ms2ger>
MikeSmith, r? https://critic.hoppipolla.co.uk/r/2016

[05:52:43.0000] <MikeSmith>
Ms2ger: buttons pushed

[05:53:56.0000] <Ms2ger>
/me hurries up and close it before anyone has a change of heart

[05:53:59.0000] <Ms2ger>
*es

[05:54:02.0000] <MikeSmith>
heh

[05:59:42.0000] <jorendorff>
foolip: It would be weird for map.get(Math.round(-0.1)) not to find an entry with key 0

[06:00:02.0000] <sangwhan>
MikeSmith: i'll try that, lingering in irc.mozilla might raise a eyebrow or two but no harm done i guess

[06:03:26.0000] <MikeSmith>
I linger there, so the atmosphere's already tainted

[06:05:57.0000] <foolip>
annevk: a colleague of mine just found https://www.w3.org/Bugs/Public/show_bug.cgi?id=26480 if you want something easy to fix today :)

[06:09:46.0000] <annevk>
Hah, going to defer to roc

[06:10:18.0000] <annevk>
I already fixed an easy bug today by removing a feature from Fetch

[06:10:29.0000] <foolip>
can't overrun the quota I guess

[06:15:02.0000] <annevk>
JakeA: thanks for going through the matrix

[06:15:02.0000] <annevk>
JakeA: I guess I need to put some time aside to see it makes sense

[06:16:41.0000] <JakeA>
annevk: no worries, will get up to speed on that headers stuff to

[06:16:42.0000] <JakeA>
too*

[06:21:16.0000] <annevk>
JakeA: so the idea is that Host, cache headers, etc. are all determined post SW

[06:21:32.0000] <annevk>
JakeA: because that's how we keep talking about the layering and is in fact how the layering works

[06:21:41.0000] <JakeA>
Fine with those being post, especially cache

[06:21:56.0000] <JakeA>
cache needs to be as it could be a security issue

[06:21:57.0000] <annevk>
JakeA: headers visible to SW would be Accept / Accept-Language, and headers set by developers

[06:22:25.0000] <annevk>
JakeA: referrer/origin would be exposed as property on Request in due course

[06:22:35.0000] <annevk>
JakeA: Host etc. is exposed already through Request's url

[06:22:42.0000] <JakeA>
annevk: yeah, that's great

[06:23:04.0000] <JakeA>
annevk: "Accept" & "Accept-Language" were the ones I was concerned about

[06:23:39.0000] <annevk>
The downside with this approach is that each spec that does a fetch needs to discuss those headers

[06:23:53.0000] <annevk>
But that might not be a bad idea anyway

[06:24:10.0000] <JakeA>
Well, it's kinda magic at the moment that <img> sends different Accept headers

[06:24:57.0000] <annevk>
Yeah, we never really defined those things in detail

[06:44:47.0000] <annevk>
JakeA: http://fetch.spec.whatwg.org/#http-header-layer-division

[06:48:28.0000] <JakeA>
annevk: that works for me

[08:10:08.0000] <jgraham>
Anyone who has a better feel for promises than me want to comment on promise_test in  https://critic.hoppipolla.co.uk/showcommit?review=2005&filter=files&file=165 (line 465 on the right)?

[08:26:13.0000] <caitp>
how do you even look at a diff in critic anyways

[08:27:39.0000] <jgraham>
Click on the name of the file you are interested in

[08:39:52.0000] <sangwhan>
or press 'e' to see everything

[08:50:23.0000] <caitp>
anyways, the promise_test seems a bit weird to me, since it's pretty much a synchronous operation happening there

[08:50:38.0000] <caitp>
unless you returrn a promise from the test function I guess

[08:51:19.0000] <caitp>
which fair enough, but then it's not really abstracting the operation :<

[08:57:07.0000] <jgraham>
caitp: Please comment on the patch

[08:57:30.0000] <jgraham>
I don't want to end up with a crappy API here

[08:57:56.0000] <foolip>
annevk: I like the new "fully exit fullscreen"!

[08:58:42.0000] <caitp>
I don't have anything really substantive to add jgraham, maybe if I saw a test case which is using that api

[08:59:10.0000] <caitp>
if the expectation is that the function passed should return a promise then it's all good I guess

[08:59:49.0000] <jgraham>
caitp: The apisampleX.htm files in the review should be a guide

[08:59:51.0000] <jgraham>
See https://critic.hoppipolla.co.uk/showcommit?review=2005&filter=files&file=55848,55849,55189,55850,55851,55852,55853,55854,165

[09:00:55.0000] <caitp>
right, so each of those test cases is returning a promise, so I guess that's the expected behaviour

[09:28:53.0000] <caitp>
annevk, if you overwrite the timeout attribute of an XMLHttpRequest after sending, with the value 0, would that mean "cancel the timeout", or would that mean "timeout is going to happen right now"

[09:29:10.0000] <caitp>
that's not totally clear from the spec to me

[09:31:05.0000] <caitp>
/me looks at gecko's implementation

[09:37:45.0000] <caitp>
it looks like in gecko, if you set the timeout attribute to 0, the timeout timer is cancelled?

[09:41:36.0000] <smaug____>
/me is pretty sure gecko does what the spec at least used to say

[09:43:22.0000] <smaug____>
but indeed, interpreting the current spec is hard

[09:44:01.0000] <smaug____>
ah, the note

[09:44:07.0000] <smaug____>
caitp: "When set to a non-zero value will cause fetching to terminate after the given time has passed"

[09:46:10.0000] <caitp>
to me, that makes sense when we're talking about before the request has been sent, but following the note, setting timeout to 0 and updating the timeout timer relative to the start of the request means, 0 ms since the start of the request

[09:46:19.0000] <caitp>
oh it would be so nice to clarify this

[09:46:37.0000] <caitp>
but I guess I'll match gecko's behaviour for now

[09:59:39.0000] <SamB>
so what does -1 do?

[10:00:24.0000] <caitp>
assuming the timer is clever, times out immediately I guess

[11:58:05.0000] <annevk>
caitp: there's an open bug

[11:58:20.0000] <annevk>
caitp: we should actually evaluate timeout each time something is pushed from the network I guess

[12:01:50.0000] <caitp>
is that the one I reported? if not I'd like to CC myself to it

[12:06:00.0000] <annevk>
caitp: list of open bugs is available per link at top of the spec

[12:10:33.0000] <Hixie>
roc: do you have any advice regarding the second paragraph of https://www.w3.org/Bugs/Public/show_bug.cgi?id=23515#c9 ?

[12:11:07.0000] <caitp>
huh, I reported one of those as well, but i guess someone closed it or something

[12:11:30.0000] <Hixie>
foolip: ping https://github.com/w3c/web-platform-tests/pull/970

[12:13:51.0000] <annevk>
caitp: you sure we didn't just talk about it or it was elsewhere?

[12:14:08.0000] <annevk>
caitp: I remember you filed a bug on Fetch with regards to Content-Length

[12:14:48.0000] <caitp>
i've filed lots of bugs, but for w3 and whatwg bugs I rarely manage to keep track of them :>

[12:17:01.0000] <Hixie>
do you file them from your own account?

[12:18:00.0000] <annevk>
caitp: WHATWG and W3C share a Bugzilla instance, although both also use GitHub and mailing lists, and W3C also has a variety of other tools

[12:18:26.0000] <annevk>
Hixie: you're ok with defining the HTML vocabulary in several drafts now? (re nonce)

[12:18:29.0000] <Hixie>
zcorpan: so how does <picture> get around the problem where the preloader can't evaluate media queries? did broser vendors relent on this restriction, or what?

[12:18:49.0000] <Hixie>
annevk: ideally i'd have every web spec in one single document.

[12:19:16.0000] <caitp>
yeah, the issue is that if I don't receive mail on a bug it usually vanishes, since I don't frequently use the w3's bugzilla

[12:19:18.0000] <annevk>
Hixie: all in en-GB?

[12:19:24.0000] <caitp>
that's the way the cookie crumbles

[12:19:38.0000] <Hixie>
annevk: i don't really care what language :-)

[12:19:39.0000] <annevk>
Hixie: you broke a bunch of "permanent" links with that change

[12:19:48.0000] <Hixie>
which change?

[12:20:04.0000] <annevk>
en-US -> en-GB

[12:20:17.0000] <Hixie>
nobody seems to have noticed, if so. that happened months ago.

[12:20:24.0000] <annevk>
fragment-links.js change also caused xref to burn

[12:20:40.0000] <Hixie>
o_O

[12:20:40.0000] <Hixie>
how so

[12:20:47.0000] <annevk>
Hixie: maybe it happened a month ago or so?

[12:21:18.0000] <annevk>
Hixie: it tries to parse the first line as JSON (after eliminating the first seventeen code points)

[12:21:24.0000] <annevk>
Hixie: however, there's more on the first line now

[12:21:34.0000] <annevk>
Hixie: I "fixed" it

[12:21:50.0000] <Hixie>
if it's a JS file, parsing it as JSON seems unwise :-)

[12:21:54.0000] <annevk>
Hixie: but e.g. my links to "ASCII serialization of origin" broke

[12:22:09.0000] <Hixie>
ah, yeah. i can add legacy IDs if that would help.

[12:22:21.0000] <annevk>
Hixie: you also have colour and serialization somewhere, both variants in a single term

[12:22:34.0000] <annevk>
Hixie: too late now I guess

[12:22:57.0000] <Hixie>
i think the only mention of "serialization" is in en-US <cite> elements

[12:23:00.0000] <annevk>
Hixie: but I'm not sure it's helping that we have one spec in en-GB and everything else in en-US for non-native speakers

[12:23:10.0000] <Hixie>
(i fixed that much more recently)

[12:23:15.0000] <annevk>
Hixie: maybe some other term with z then

[12:23:19.0000] <Hixie>
(in fact that might not have been checked in yet)

[12:23:39.0000] <Hixie>
annevk: feel free to move them all to en-GB :-)

[12:23:56.0000] <annevk>
Hixie: yeah, it's "rules-for-serializing-simple-colour-values"

[12:24:11.0000] <Hixie>
the ID?

[12:24:14.0000] <Hixie>
i can add that

[12:24:25.0000] <annevk>
Hixie: no, that's the one you have in the spec

[12:24:38.0000] <Hixie>
that's fixed, just not checked in yet

[12:24:48.0000] <Hixie>
still trying to pin down a really subtle bug in the new pipeline

[12:24:53.0000] <annevk>
mkay

[12:25:11.0000] <annevk>
Moving everything to en-GB is not a credible suggestion

[12:25:23.0000] <JakeA>
racist

[12:25:35.0000] <Hixie>
(it takes like 30 minutes for me to run the pipeline each time i change the source a bit because i'm running it in an emulator, sigh)

[12:26:02.0000] <annevk>
JakeA: you're happily using z's in SW

[12:26:27.0000] <JakeA>
ServiceWorkerz

[12:26:29.0000] <annevk>
JakeA: clearly you spent too much time in the colonies

[12:26:30.0000] <Hixie>
annevk: anyway i added "rules-for-serializing-simple-colour-values" as an ID for the paragraph that will soon say "serialising"

[12:26:36.0000] <JakeA>
haha

[12:26:45.0000] <annevk>
Hixie: please don't, that was just an example

[12:26:49.0000] <Hixie>
annevk: oh

[12:26:57.0000] <Hixie>
annevk: i thought you were saying it was a broken link

[12:27:02.0000] <annevk>
Hixie: the things that actually broke for were around serializing origins

[12:27:06.0000] <Hixie>
ah

[12:27:12.0000] <annevk>
Hixie: well maybe, not sure what spec references that term though

[12:27:19.0000] <annevk>
Hixie: but I've updated xref

[12:27:29.0000] <Hixie>
k well either way, let me know what IDs I should add if you see other breakage

[12:27:33.0000] <annevk>
Hixie: so everyone that generates from whatwg/xref will get the new links

[12:29:18.0000] <annevk>
Hixie: you broke this btw https://github.com/whatwg/xref/commit/baa85a61896e7c044b17f000fda1c73345e8a437#diff-38676f2ddfbfc15a86de3811c50d83c2R5

[12:29:23.0000] <annevk>
Hixie: as you can tell the fix is ugly

[12:29:49.0000] <Hixie>
well parsing that file is a lost cause

[12:29:53.0000] <Hixie>
that's not a data file

[12:29:55.0000] <Hixie>
it's a script

[12:30:15.0000] <Hixie>
i don't guarantee it won't change dramatically again

[12:30:25.0000] <Hixie>
in particular, i expect it to get a lot smaller

[12:30:38.0000] <Hixie>
maybe using a trie or something

[12:30:41.0000] <Hixie>
to make the data shorter

[12:31:17.0000] <Hixie>
if you want though i can definitely output a dedicated file that's actually in a defined format that you can parse

[12:31:23.0000] <Hixie>
bikeshed is asking for something similar

[12:31:44.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26335

[12:45:38.0000] <annevk>
Hixie: I don't really care about maintaining any of these various things

[12:45:54.0000] <annevk>
Hixie: I'd like to switch to Bikeshed I guess if that's going to be maintained

[12:46:29.0000] <annevk>
Hixie: writing and coordinating spec writing is more fun

[13:19:39.0000] <caitp>
Hixie: it would be really neat if there were a section in http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html which enumerates all of the different ways a "submit" event would be dispatched --- primarily so that I have a nice snippet to link to on documentation for other projects

[13:19:56.0000] <caitp>
do you think such a thing could be possible

[13:20:36.0000] <Hixie>
there are different ways 'submit' can be dispatched?

[13:20:44.0000] <Hixie>
you mean other than a form submission and dispatchEvent() ?

[13:20:59.0000] <caitp>
particularly what would cause a form to be submit

[13:21:26.0000] <Hixie>
oh how to submit a form

[13:21:30.0000] <Hixie>
that's an entirely different question

[13:21:49.0000] <Hixie>
submit buttons, implicit submit buttons, .submit()... anything else?

[13:22:09.0000] <Hixie>
(form.submit() doesn't fire the 'submit' event but does submit the form)

[13:22:22.0000] <caitp>
well, I feel like submit should only be dispatched during form submission, but that's getting into semantics :p someone filed a bug about us invoking a submit event handler when an implicit submit button was clicked, and this resulted in confusion for them

[13:22:43.0000] <caitp>
so it would be handy to just have a nice collection of these to link people to from docs

[13:22:55.0000] <caitp>
and it might make writing tests and whatever easier for implementors, too

[13:23:46.0000] <Hixie>
click on "submitted" here: http://www.whatwg.org/specs/web-apps/current-work/#concept-form-submit

[13:23:58.0000] <annevk>
roc: do you still want to be copied on all those Fullscreen bugs?

[13:24:06.0000] <Hixie>
that links to all the places that call that algorithm in the HTML spec

[13:24:14.0000] <annevk>
roc: I sometimes wonder whether I bother you too much

[13:24:41.0000] <caitp>
it's extremely dangerous to open the single-page version on a laptop while building chromium hixie :( if this starts a fire I'm totally blaming you

[13:25:19.0000] <annevk>
Hixie: remember how I once suggested that we should change the markup around elements and such, such that indexes could be generated rather than written by hand?

[13:25:24.0000] <annevk>
Hixie: https://twitter.com/codylindley/status/494155769307078662

[13:26:05.0000] <Hixie>
file a bug, put 'tools' in the whiteboard, make sure the bug report describes exactly what you want to get out

[13:26:14.0000] <Hixie>
right now there are so many exceptions that i don't know how to do it

[13:26:25.0000] <Hixie>
i mean, some of the indexes and stuff are autogenerated

[13:26:49.0000] <Hixie>
but in general what is in the table and what is in the element definitions need to be different in subtle ways

[13:32:26.0000] <Ms2ger>
Does <script async defer src=...> even make sense?

[13:32:28.0000] <Ms2ger>
Hixie, ^

[13:35:44.0000] <Hixie>
right now async and defer are mutually exclusive iirc

[15:25:59.0000] <TabAtkins>
Hixie: How is your WebIDL processed? Does your pipeline parse it and add markup or something, or is it all done manually?

[15:26:17.0000] <Hixie>
right now i just have some poor man's regexp

[15:26:21.0000] <Hixie>
but my plan is to actually parse it

[15:28:12.0000] <TabAtkins>
Okay.

[15:28:38.0000] <TabAtkins>
You're not using Python, so Peter's widlparser project won't help you, but it might be useful to look at for reference.

[15:28:59.0000] <TabAtkins>
I was wondering because it's the main thing that needs to be marked up to make Bikeshed happy.

[15:29:44.0000] <Hixie>
marked up how?

[15:47:35.0000] <TabAtkins>
With a data-dfn-type attribute, so Shepherd knows whether the dfns are for interface names, method names, attributes, dicts, etc.

[15:48:02.0000] <TabAtkins>
And for things like attributes, a data-dfn-for giving the name of the interface they belong to, to allow collision resolution.

[15:52:59.0000] <roc>
annevk: fullscreen bugs aren't the highlight of my day, but I do like to be helpful

[16:05:18.0000] <Hixie>
TabAtkins: i don't expect to add any attributes that aren't useful for the end user, since those are just going to use up bytes on the wire. But I could make a dedicated file in the appropriate format.

[16:05:34.0000] <Hixie>
TabAtkins: anyway, file a bug with precise details on what you want

[16:05:45.0000] <TabAtkins>
Yeah, filing it now.

[16:05:49.0000] <Hixie>
thanks

