2020-04-01
[19:46:47.0000] <MikeSmith>
Domenic: do you know if Location in Blink was ever changed to inherit from URLUtils and then changed back?

[19:47:44.0000] <MikeSmith>
I mean similar to what happened in Gecko, with https://bugzilla.mozilla.org/show_bug.cgi?id=887364 changing Location and then https://bugzilla.mozilla.org/show_bug.cgi?id=1213815 changing it back

[19:59:32.0000] <gsnedders>
MikeSmith: can't see anything in the history at least?

[20:08:14.0000] <MikeSmith>
gsnedders: same here

[20:08:46.0000] <MikeSmith>
I searched through change history for the source, also through bug tracker

[20:10:44.0000] <MikeSmith>
context is that I just want to update https://github.com/mdn/browser-compat-data/blob/master/api/Location.json#L342 to indicate there‚Äôs not password or username members for the interface in any current browsers

[20:11:47.0000] <MikeSmith>
but I know from experience with getting review on similar changes, reviewers aren‚Äôt gonna let me just change version_added: true to version_added: false there for Chrome

[20:59:26.0000] <MikeSmith>
FYI https://github.com/mdn/browser-compat-data/pull/5925

[00:18:10.0000] <annevk>
I've moved spec-factory to the WHATWG organization

[00:18:32.0000] <annevk>
I'll add a README momentarily

[01:41:50.0000] <annevk>
Oh wow, XMLHttpRequest uses "obtain unicode"

[02:55:01.0000] <annevk>
/me wonders if MikeSmith could review https://github.com/whatwg/fullscreen/pull/167

[02:55:19.0000] <MikeSmith>
/me looks

[02:55:56.0000] <MikeSmith>
annevk: yeah will do right now

[03:35:35.0000] <MikeSmith>
annevk: wow, just now took a trip down the location.ancestorOrigins rabbit hole

[03:35:44.0000] <MikeSmith>
via https://github.com/whatwg/html/issues/1918 and https://bugzilla.mozilla.org/show_bug.cgi?id=1085214

[03:42:32.0000] <annevk>
MikeSmith: I'm sad that didn't go anywhere, I put a lot of effort in that

[03:42:40.0000] <MikeSmith>
yeah I can see

[03:42:54.0000] <MikeSmith>
stalled about a year ago I guess

[03:42:54.0000] <annevk>
At some point I should push for it again I suppose

[03:43:27.0000] <MikeSmith>
would be nice to get it resolved

[03:44:30.0000] <MikeSmith>
so about the history, I have gone back in time as a far as https://bugs.webkit.org/show_bug.cgi?id=83493, where it was first implemented in WebKit, but what‚Äôs the prehistory before that?

[03:45:02.0000] <annevk>
MikeSmith: I think that's probably it

[03:45:09.0000] <MikeSmith>
OK good

[03:45:24.0000] <MikeSmith>
well then I was confused by a comment from Ian

[03:45:34.0000] <MikeSmith>
https://bugs.webkit.org/show_bug.cgi?id=83493#c19

[03:45:43.0000] <MikeSmith>
‚ÄúI'll make sure to either match implementations or not conflict on names when I spec this‚Äù

[03:46:19.0000] <MikeSmith>
I thought that implied some implementation prior to the WebKit one

[03:47:10.0000] <annevk>
MikeSmith: implementation came first and Ian said that he might change semantics when speccing

[03:47:16.0000] <annevk>
MikeSmith: and if he did, he'd change the name

[03:47:30.0000] <MikeSmith>
I see

[03:47:46.0000] <MikeSmith>
I guess the plural ‚Äúimplementations‚Äù there is what confused me

[06:45:23.0000] <annevk>
I've updated branch protection rules for most repos and also enabled auto-deletion of branches belonging to merged PRs. If any of this sounds concerning or you run into something, now you know who to talk to.

[08:33:57.0000] <TimothyGu>
annevk: wrt the jsdom suggestion, I mean I think it'd be great for jsdom, but if the person proposing the change successfully implemented in an actual browser (and no existing WPTs broke) then I think it should be fine too

[13:14:27.0000] <annevk>
TimothyGu: it‚Äôs somewhat seldom that those predate spec changes unfortunately

[13:15:54.0000] <annevk>
Maybe not that unfortunate, but it means that some changes are tricky

[14:59:15.0000] <shu>
annevk: ping


2020-04-02
[17:35:01.0000] <MikeSmith>
I see https://bugs.chromium.org/p/chromium/issues/detail?id=571722#c21 ‚ÄúUser-Agent isn't currently allowed to be set. Mark the TestExceptations against it.‚Äù but I nothing in the current Fetch spec that disallows setting User-Agent in fetch requests

[17:35:34.0000] <MikeSmith>
not at https://fetch.spec.whatwg.org/#forbidden-header-name nor anywhere in the spec

[18:10:03.0000] <a-ja>
MikeSmith, related? https://www.zdnet.com/article/google-to-phase-out-user-agent-strings-in-chrome/

[18:11:20.0000] <a-ja>
how about Sec-UA-* ?

[18:12:43.0000] <a-ja>
erm.... Sec-CH-UA-*

[18:13:53.0000] <a-ja>
https://wicg.github.io/ua-client-hints/#fetch-integration

[20:05:18.0000] <annevk>
shu: kinda here now

[23:12:59.0000] <annevk>
TabAtkins: I see I can push to Bikeshed master; if I did that, would api.csswg.org update automatically?

[23:19:41.0000] <TabAtkins>
annevk: yes

[23:23:21.0000] <annevk>
TabAtkins: cool, rest assured, I'll make sure CI is passing

[23:23:56.0000] <annevk>
And I need to wait for Domenic to wake up to align on some other bits

[23:24:53.0000] <annevk>
Cross-repo-dependency count is at 16

[09:52:59.0000] <shu>
what does it mean for the _active script_ in https://html.spec.whatwg.org/#hostenqueuepromisejob to be null?

[09:53:35.0000] <shu>
is it for the case for a web platform feature enqueuing a promise job without running author script?

[09:55:13.0000] <annevk>
shu: sounds likely

[09:55:37.0000] <Domenic>
shu: "active script can be null if the user clicks on the following button:"

[09:55:59.0000] <shu>
ooh, doh, there's an example, thanks

[09:56:34.0000] <shu>
Domenic: am i reading that correctly then it's those other hooks that set up the execution context? i'm not really finding where that's done

[09:57:21.0000] <Domenic>
shu: if I understand what you mean, you are looking for https://html.spec.whatwg.org/#prepare-to-run-script ?

[09:58:53.0000] <shu>
Domenic: not quite, my confusion is: step 5 creates a new execution context to be pushed inside the microtask itself, to propagate active script forward in time. but if there is no active script, there must still be a JS execution context to run the microtask. where does that execution context come from? is it guaranteed to exist already on the stack due to the other import host hooks?

[09:59:48.0000] <shu>
prepare-to-run-script says it's propagated via the other settings objects

[09:59:58.0000] <Domenic>
shu: Ah. The execution context will then be the one pushed via step 6.2.

[09:59:58.0000] <shu>
just trying to put the pieces together with the settings objects stacks

[10:00:23.0000] <shu>
ah, beautiful, ty

[10:00:43.0000] <Domenic>
That doesn't seem particularly intentional FWIW...

[10:01:05.0000] <Domenic>
But I guess it works

[10:01:43.0000] <annevk>
Domenic: probably won't have time to finish the .pr-preview.json cleanups today

[10:01:55.0000] <annevk>
Domenic: if you could set up the remaining bits I can do it tomorrow though

[10:02:42.0000] <Domenic>
annevk: for sure, will do; meant to do it before you signed off but this morning got hit by some surprise issues

[10:03:23.0000] <annevk>
Domenic: all good

[14:58:27.0000] <Domenic>
Someone should fix https://developer.mozilla.org/en-US/docs/Glossary/URI

[15:07:24.0000] <Domenic>
https://www.ryanpickren.com/webcam-hacking is quite something

[15:07:32.0000] <Domenic>
Lots of origin/URL-related madness

[15:08:53.0000] <Domenic>
It's mostly finding terrible corners of specs, and then finding corners of those corners that weren't implemented correctly, in order to create exploits.


2020-04-03
[18:57:28.0000] <TimothyGu>
glad to see that `document.open`/`write` makes a cameo ;)

[19:10:59.0000] <MikeSmith>
Domenic: in the MDN annos, I‚Äôm noticing a weird bug that despite having spent time stepping through the code, I still have no insight about why it might be happening

[19:11:05.0000] <MikeSmith>
the bug is that in single-page output, some MDN annos that are present in the multipage output are not present in the single-page output

[19:11:42.0000] <MikeSmith>
compare https://html.spec.whatwg.org/multipage/webappapis.html#the-promiserejectionevent-interface to https://html.spec.whatwg.org/#the-promiserejectionevent-interface

[19:12:21.0000] <MikeSmith>
that bug is causing literally hundreds of annos to not appear in the single-page output

[19:13:53.0000] <MikeSmith>
can you think of any difference in how we do single-page output that might be the culprit?

[19:15:22.0000] <Domenic>
MikeSmith: I don't have enough of wattsi loaded into my head to really answer that, but I do remember vaguely running in to this sort of mystifying difference between the two... I can try to take a better look tomorrow. File a quick issue so that I have it in my inbox?

[19:15:43.0000] <MikeSmith>
Domenic: OK will do

[19:15:59.0000] <MikeSmith>
thanks

[19:28:01.0000] <MikeSmith>
https://github.com/whatwg/wattsi/issues/111

[19:28:33.0000] <MikeSmith>
maybe one of the many other Free Pascal coders who hang out here will step in to fix it üòõ

[20:09:59.0000] <devsnek>
did import.meta.currentScript ever get past the multiple script issue

[07:52:38.0000] <Domenic>
devsnek: nope

[07:53:50.0000] <devsnek>
i guess you'd end up needing some sort of crazy event model for when a script uses the instance

[09:00:12.0000] <annevk>
Domenic: wanna do the .pr-preview.json stuff today?

[09:00:22.0000] <Domenic>
annevk: yep, working on it now :)

[09:00:47.0000] <annevk>
\o/

[09:10:56.0000] <annevk>
Domenic: if you know who from Google to copy on https://github.com/whatwg/html/pull/5425 that'd be good

[09:11:25.0000] <Domenic>
annevk: Eric Law is probably the right person for Chromium but maybe we can get someone from Google...

[09:12:45.0000] <annevk>
k

[10:04:43.0000] <ecobos>
TimothyGu: ping?

[10:04:56.0000] <TimothyGu>
ecobos: pong

[10:05:38.0000] <ecobos>
TimothyGu: hey, I was unsure whether https://bugzilla.mozilla.org/show_bug.cgi?id=1627285#c1 was incomplete or something (or maybe I just didn't parse it properly, not a native english speaker)

[10:05:48.0000] <TimothyGu>
oops, clicked send too early

[10:05:59.0000] <ecobos>
TimothyGu: did you plan to send a fix? Or should I go ahead and send the patch? It's pretty trivial to fix

[10:06:04.0000] <TimothyGu>
I meant to say that I could help fix it in Firefox

[10:06:11.0000] <TimothyGu>
Yeah I actually just wrote one

[10:06:17.0000] <ecobos>
TimothyGu: ah, if you want to I won't stop you :-)

[10:06:37.0000] <ecobos>
TimothyGu: glad I asked before writing it then ;)

[10:06:39.0000] <ecobos>
TimothyGu: thanks!

[10:18:41.0000] <annevk>
Domenic: hmm GitHub is having many issues, so not gonna risk it now

[10:18:48.0000] <Domenic>
Aww OK

[10:19:05.0000] <annevk>
Domenic: how does Bikeshed get all the relevant data from a PR number alone?

[10:19:21.0000] <Domenic>
annevk: it turns out that's all the data you really need

[10:19:27.0000] <Domenic>
Previously we were linking to the PR's head commit

[10:19:34.0000] <Domenic>
Which required commit SHA + repo owner

[10:19:50.0000] <Domenic>
But if you take a step back, why would that be a good idea? Linking to the PR itself is much nicer.

[10:20:11.0000] <Domenic>
It just needed some extra work to add a dedicated PR preview template instead of reusing the commit snapshot one.

[10:21:00.0000] <annevk>
Ah okay, I guess it is nicer to link to the PR as it might also change over time, just like the PR

[10:21:41.0000] <annevk>
Domenic: you'd kinda think that pr-preview already has the PR number btw as that's used for the filename

[10:22:07.0000] <Domenic>
Yeah it does, you just need to pass it to Bikeshed.

[10:23:16.0000] <annevk>
Oh right, these are Bikeshed instructions. Next level would be { src: "....bs", type: "whatwg" } I guess


2020-04-04
[09:54:58.0000] <xalqor>
anyone on right now? i have an issue with iframes :(

[09:56:24.0000] <xalqor>
i'll just go ahead and rant, then

[09:56:47.0000] <xalqor>
i have a site with a page that is specifically intended for other sites to embed via iframe

[09:57:30.0000] <xalqor>
for the user's convenience, if the user is already logged in to my site they should be able to access their logged-in account via the iframe

[09:57:53.0000] <xalqor>
and this used to work but then browsers starting adding inconsistent/buggy support for 3rd party cookies

[09:58:27.0000] <xalqor>
so i thought, ok I don't really need a cookie, I could just store a session id with localStorage since all the access is with javascript I can just add that token in a header

[09:58:58.0000] <xalqor>
but the trouble is that localStorage seems to be blocked by browsers via the same setting that blocks 3rd party cookies

[10:00:09.0000] <xalqor>
so site A loads an iframe with a page from site B, and the iframe tries to store foo=bar in localStorage, the browser interprets that as a request to store under site A's local storage and that's blocked if the user has "block 3rd party cookies"

[10:00:16.0000] <Domenic>
Yes, I think browsers are generally moving away from letting iframes track people around the internet in that way

[10:00:23.0000] <Domenic>
localStorage, cookies, whatever

[10:00:25.0000] <xalqor>
yes but it's not about tracking users across sites

[10:00:42.0000] <xalqor>
it's about communicating with users of my own site

[10:00:43.0000] <Domenic>
Knowing who the user is (i.e., accessing their logged in account) is tracking them

[10:00:52.0000] <xalqor>
in fact I don't want my localStorage associated to site A at all

[10:01:05.0000] <xalqor>
I'd like a localStorage in an iframe that is associated only to the site the iframe came from

[10:01:43.0000] <Domenic>
The difficulty there is that the browser would need some guarantee that the embedding site never tells the iframe "I exist"

[10:02:39.0000] <xalqor>
there could have been some iframe option to say, allow iframe-origin localStorage and block postMessage at the same time

[10:02:57.0000] <Domenic>
It'd have to be stricter than that

[10:03:28.0000] <Domenic>
No headers, no query params... actually, I can't think of anything that would work, because you can just use the URL path

[10:03:53.0000] <Domenic>
E.g. <iframe src="https://tracking-widget.example/userID1234/"></iframe>

[10:03:58.0000] <xalqor>
if the parent site wants to leak the user's identity i don't think you can stop it

[10:04:02.0000] <Domenic>
Right

[10:04:06.0000] <Domenic>
Which is why browsers are doing this

[10:04:13.0000] <Domenic>
So that once it's leaked, there's no way to store it

[10:04:29.0000] <annevk>
Domenic: using allow="" as additional guard for SAB postMessage() doesn't seem unreasonable to me, how serious is this proposal? Mainly wondering if you thought through all the changes required already.

[10:05:07.0000] <Domenic>
annevk: it is new and just something that came up. We have not thought it through very much but wanted to start a discussion earlier rather than later.

[10:05:07.0000] <annevk>
Domenic: in particular, I'm wondering if it should influence the public crossOriginIsolated getter and perhaps availability of the SAB constructor

[10:05:17.0000] <annevk>
Domenic: kk

[10:05:52.0000] <Domenic>
annevk: it's a bit weirder for Chrome since this is all about a future move to lock up SAB, instead of about how to expose SAB.

[10:06:33.0000] <Domenic>
Influencing SAB constructor makes sense, unsure about the crossOriginIsolated getter

[10:06:50.0000] <Domenic>
If the meaning of crossOriginIsolated is "powerful features available" then that makes sense

[10:07:01.0000] <Domenic>
If the meaning is "COOP+COEP enabled" then maybe not

[10:07:11.0000] <Domenic>
Probably "powerful features available" is more useful

[10:13:56.0000] <xalqor>
iframe with postMessage was a great solution to let a site integrate a feature from a second site, while protecting the javascript in both directions

[10:14:37.0000] <xalqor>
so trying to do this in a way that respects user privacy, meaning it still works with all privacy settings enabled (but still allowing javascript)

[10:15:52.0000] <xalqor>
can it still be done?  if the user has an account at parent site and also on the iframe site, it seems like now the iframe will also need to have a login form inside

[10:16:48.0000] <xalqor>
definitely don't want the user to login through the parent site and reveal their credentials to some other site

[10:16:58.0000] <xalqor>
and if we develop a plugin now we have to do it separately for every browsre

[10:17:00.0000] <Domenic>
xalqor: I am not an expert, but my understanding is that yes, logging in a second time is the current direction browsers are heading.

[10:17:57.0000] <xalqor>
but it's not just a second time, it's also every time they visit the parent site -- because the iframe can't store the cookie or anything in localStorage to remember that session across reloads

[10:19:00.0000] <Domenic>
Hmm, I thought the plan was just a second time, i.e. you'd get a different storage partition for when you're top level vs. when you're embedded in site A vs. when you're embedded in site B.

[10:19:20.0000] <xalqor>
if 3rd party cookies & storage is blocked then it doesn't work

[10:19:32.0000] <xalqor>
and i don't want to tell my users to disable that setting -- because it affects them on all sites

[10:19:52.0000] <Domenic>
Well I guess that setting is basically saying "don't allow embedded iframes to store any state" so it makes sense that it would prevent use cases like that

[10:21:42.0000] <Domenic>
(embedded _third-party_ iframes, that is)

[10:22:07.0000] <xalqor>
yeah

[10:24:03.0000] <xalqor>
thanks for the chat, i will need to rethink how i'm doing this thing

[10:25:39.0000] <Domenic>
Happy to help!

[10:42:06.0000] <annevk>
Domenic: I‚Äôd like to keep the number of (public) booleans down I think. It‚Äôs confusing enough as-is


2020-04-05
[12:35:12.0000] <oliverdunk>
Would it make sense to update the definition of a date string, to allow a single digit for specifying the month/date? It'd be nice to remove the need for zero padding, when code setting the attribute doesn't have it by default.

[12:35:39.0000] <oliverdunk>
The particular use case I have is when programatically setting the max attribute on a date input.

[13:07:55.0000] <annevk>
oliverdunk: it'd add parser complexity and I'm not sure it'd help with readability either

[13:22:35.0000] <oliverdunk>
annevk: It seemed like the "parse a date component" section would only need a small tweak, and I hoped the difference in readability was negligible. I trust your gut though, thanks for replying.

[16:34:14.0000] <MikeSmith>
botie, inform rniwa does the Safari version data at https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot#Browser_compatibility make any sense at all? It claims the "slot" attribute was ‚ÄúImplemented with the vendor prefix: -webkit-‚Äù in Safari 10 ‚Äî though without the prefix in iOS Safari. It as never actually implemented as an attribute named "-webkit-slot" anywhere, right?

[16:34:14.0000] <botie>
will do


2020-04-06
[00:25:44.0000] <annevk>
Domenic: the one small downside from this .pr-preview.json change is that all PRs will need rebasing I think

[00:34:08.0000] <annevk>
Domenic: all is ready to go now, I suggest we do it when you and I have some time in case of fallout

[04:52:10.0000] <Krinkle>
FYI, one trick to make GH rebase the merge commit against latest master for webhooks etc is to close/reopen any PR (so long there is no conflict).

[07:11:46.0000] <Domenic>
annevk: now is a good time for me

[07:12:32.0000] <annevk>
Domenic: okay, so first Tab's PR, then whatwg.org, then the .pr-preview.json ones?

[07:12:47.0000] <Domenic>
Yeah, I think that's it!

[07:17:51.0000] <annevk>
Domenic: can you do https://github.com/whatwg/streams/pull/1034?

[07:18:30.0000] <Domenic>
Will do

[07:20:47.0000] <annevk>
Given https://travis-ci.org/github/whatwg/compat/builds/671502607 I guess it takes some time for api.csswg to update

[07:22:29.0000] <annevk>
I also see that we're getting a shellcheck warning for not using H1 anymore

[07:23:05.0000] <Domenic>
Uh oh

[07:23:17.0000] <annevk>
I'll clean that up now

[07:23:36.0000] <Domenic>
I'm worried about the bikeshed update. Is it still stuck on Python 2?

[07:24:08.0000] <annevk>
That's a good question sigh

[07:24:40.0000] <annevk>
/me wonders if TabAtkins is awake

[07:27:20.0000] <TabAtkins>
Yeah what up

[07:28:12.0000] <TabAtkins>
The server is on py3 now and receiving webhook notifications, so should be picking up updates now

[07:28:26.0000] <annevk>
Thanks! It does indeed seem to be working now

[07:28:39.0000] <annevk>
That is, whatwg/compat just went successfully

[07:29:11.0000] <annevk>
whatwg/dom looks good too

[07:29:50.0000] <Domenic>
Phew!

[07:30:10.0000] <annevk>
Auto-deletion of branches is really nice

[10:58:32.0000] <MassDebates>
Why can't we add multiple IDs to elements?

[13:39:47.0000] <shu>
microtasks queues are 1:1 with event loops, right?

[13:55:44.0000] <Domenic>
shu: correct in specs. I hear Chromium is not quite like that.

[13:57:16.0000] <shu>
Domenic: i see

[13:57:32.0000] <shu>
Domenic: the intended state we want is agent:event loop:microtask queue 1:1:1?

[13:57:45.0000] <Domenic>
shu: yes. That is also the state in specs currently.

[13:57:50.0000] <shu>
cool, thanks

[13:59:06.0000] <shu>
Domenic: to make sure i understand, that'd mean since same-origin iframes are never their own agents, they never have their own microtask queues

[13:59:48.0000] <Domenic>
shu: right.

[14:00:23.0000] <Domenic>
Otherwise order would be unpredictable between same-origin iframes, which is undesirable, since they can sync script each other already.

[14:00:38.0000] <shu>
yeah

[14:00:53.0000] <MassDebates>
We should be able to assign multiple IDs to an element. I don't know why we cannot, aside from "it's been that way".

[14:01:13.0000] <shu>
there's (as always) weirdness in detached iframes, but... that'll get sorted out whenever detached iframes in general get sorted out, i guess

[14:01:30.0000] <MassDebates>
I understand that browsers will try to act as a coverall for ID attributes containing whitespace, and will consider it as a part of the ID itself.

[14:01:51.0000] <MassDebates>
But really, this happens because of the spec saying that there is only ever one value. Why can there only ever be one value?

[14:02:38.0000] <MassDebates>
an ID can be used for many things, but one of the most common is for CSS selection. It is also used for other things, like various form controls to be hit with a <label> element

[14:03:32.0000] <Domenic>
MassDebates: use classes, not IDs.

[14:04:13.0000] <MassDebates>
classes can be space separated lists of names, and I don't see why IDs can't be the same. I understand that classes can be used for various CSS styling, but sometimes an ID is required.

[14:09:16.0000] <MassDebates>
As is normal in many HTML attributes (like class), a space-separated pair of values inside of an <element attr=""></element> or <element attr="" /> indicates multiple values are to be interpreted. Why do we make a special exception for IDs? Is there a purpose for this, or is this just "How its always been" ?

[14:09:38.0000] <MassDebates>
Note: this isn't a query asking for alternatives to how something can be done without multiple IDs. This is a query asking why can't we have multiple IDs.

[14:45:37.0000] <Domenic>
The reason is because there are good alternatives, namely classes.

[14:45:48.0000] <Domenic>
If you remove the distinction between classes and IDs then there is no point in having both

[14:45:55.0000] <Domenic>
The unique feature of IDs is that each element only has one

[14:46:08.0000] <Domenic>
If you remove that then you make them the same as classes and then we have two features that are redundant.

[15:08:58.0000] <TabAtkins>
I disagree; the unique feature of IDs is that only element has it (in a valid page), thus it's an identifier for that element; the fact that an element can have only one is accidental and not part of the core semantic.

[15:09:13.0000] <TabAtkins>
*only one element

[16:33:44.0000] <TabAtkins>
(I don't think it's *worth* messing with IDs at this point, but them being limited to a single value has always been annoying. An element can be "the one X" for multiple roles; the fact that you can't do this has led me to generally just not use IDs at all, and exclusively use classes.)


2020-04-07
[02:06:15.0000] <annevk>
JakeA: I realized that one thing to remember when beating Apple over the Storage Access API is that the HTTP Clear-Site-Data header is still not properly defined either

[02:06:46.0000] <annevk>
JakeA: defining Clear-Site-Data properly might actually give us some of the primitives we need to layer a Storage Access API on top that doesn't just do cookies

[02:11:25.0000] <JakeA>
annevk: Fair, but I'm not criticising Apple for not implementing Clear-Site-Data

[02:12:05.0000] <JakeA>
The narrative that bugs me is: Chrome is bad for not implementing our API / Ok then how does it work? / Dunno.

[02:14:36.0000] <annevk>
So afaict it only affects cookies and it probably relies on something that's not specified in HTML, namely a document's cookie URL concept

[02:14:49.0000] <annevk>
Cookies in general could really use some love

[02:15:50.0000] <annevk>
But also, that narrative is something Firefox often gets as well and we end up fixing a lot of the mess Chromies left behind...

[02:17:01.0000] <annevk>
Not really sure anyone is without blame here, but as long as we have similarish goals we should be able to figure something out

[02:24:29.0000] <JakeA>
There are loads of specs Chrome folks could be doing a better job on, absolutely

[02:25:05.0000] <JakeA>
I'm definitely not saying Chrome is blameless here

[07:21:30.0000] <annevk>
Domenic: windows agent

[07:23:35.0000] <Domenic>
heh

[07:49:16.0000] <annevk>
wow bugs in getElementById, that's pretty good

[08:50:42.0000] <Domenic>
DocumentFragment though, that's slightly more recent

[08:52:22.0000] <annevk>
Fair, added in Oct 2013

[11:42:30.0000] <shu>
annevk: Domenic: something came up during the blink side of implementing top-level await around document.write. i want to check my understanding of what ignore-destructive-writes counter is for, and then possibly propose something

[11:43:16.0000] <shu>
AIUI, that counter is intended so that only inline sync script tags has the legacy behavior of document.write() blowing away everything if there's no explicit document.open()

[11:46:22.0000] <shu>
now, with TLA, dan's current PR says so long as a promise resulting from a TLA is not settled, that counter is incremented

[11:46:53.0000] <shu>
it turns out this is not great to implement and has a runtime cost to distinguish those promises

[11:47:58.0000] <shu>
the current thinking is can we increment that counter to >0 the first time *any* module script tag is executed

[11:48:36.0000] <shu>
this is backwards breaking, but only for pages that mixes classic and module scripts, and uses destructive document.write, which i reckon is vanishingly small

[12:58:07.0000] <annevk>
shu: sounds reasonable, not sure why we made it work there to begin with

[13:00:07.0000] <annevk>
Bit surprising as I thought module scripts were delayed anyway

[13:07:38.0000] <Domenic>
shu: that sounds great, less document.write() in the wild is always a win.

[13:10:06.0000] <shu>
cool, though i'm still kinda confused about why, today, tasks queued from external classic scripts and modules are allowed to do destructive document.write()s

[13:10:50.0000] <Domenic>
tasks queued from external classic scripts doing destructive writes sounds like something the old web would rely on

[13:11:18.0000] <Domenic>
`setInterval(() => document.write(i++), 1000)` "look, babies Netscape 3 counter"

[13:11:45.0000] <shu>
right, that's believable

[13:11:59.0000] <Domenic>
Modules we were probably just trying to make modules more symmetrical with classic scripts

[13:12:13.0000] <Domenic>
I.e. treat them the same as external classic scripts

[13:12:26.0000] <shu>
and the separation of throw-on-dynamic-markup-insertion and ignore-destructive-writes is specifically that `document.open(); document.write(...); document.close();` is less bad?

[13:13:40.0000] <Domenic>
Not really. I think that was an instance that was more "disallow everything we dislike", so we were more aggressive: throwing instead of ignoring, for example

[13:13:56.0000] <Domenic>
We still weren't aggressive enough to just leave the counter forever higher than 0 if you use a custom element, but maybe we should have been

[13:15:52.0000] <shu>
specifically i'm wondering the motivation for not making external scripts increment throw-on-dynamic-markup-insertion as well. too much reasonable code relying on that?

[13:17:59.0000] <Domenic>
I think external classic scripts are probably untouchable

[13:18:07.0000] <Domenic>
But outside that invariant I think we have a good amount of freedom

[13:18:36.0000] <Domenic>
(Also, I think custom elements are probably widely deployed enough that we could not have them permanently disable document.write and friends.)

[13:18:52.0000] <shu>
i see. well, the proposal from the v8 engineer was to leave ignore-destructive-writes permanently >0 after the first module script tag is executed

[13:18:57.0000] <shu>
that *does* affect external classic scripts, if a page mixes them

[13:18:58.0000] <Domenic>
So for example we could switch all module scripts to permanently incrementing the throw counter, if we liked.

[13:19:10.0000] <shu>
you think that's fine?

[13:19:21.0000] <Domenic>
Oh, well, I think that's probably fine, if V8/Chrome is willing to risk it.

[13:19:31.0000] <Domenic>
And my judgment aligns with yours that it's probably rare.

[13:19:48.0000] <shu>
okay, yeah, i think we're willing to risk

[13:21:18.0000] <Domenic>
Awesome. So yeah I guess my main contribution is that I'd also be happy if you wanted to use the throw-on-dynamic-markup-insertion counter too. More risk, but more reward.

[13:22:05.0000] <shu>
trying to track down a use counter for document.write... i was hoping we'd have one

[13:23:32.0000] <Domenic>
We have document.open() at https://chromestatus.com/metrics/feature/timeline/popularity/2494

[13:23:52.0000] <Domenic>
I would expect write() to be >= open() but I am not sure

[13:25:29.0000] <shu>
quite a lot, though it's the intersection with pages that have module scripts that matter

[13:25:44.0000] <shu>
doubt we have that level of info

[13:26:34.0000] <Domenic>
Right


2020-04-08
[18:30:39.0000] <MikeSmith>
in documentation in interfaces defined with Web IDL in specs, is it OK to describe instances as ‚Äúobjects that are instances of the Foo interface‚Äù?

[18:30:52.0000] <MikeSmith>
*documentation on interfaces

[18:32:03.0000] <TimothyGu>
MikeSmith: technically it's "objects that implement the Foo interface" per https://heycam.github.io/webidl/#implements,https://heycam.github.io/webidl/#implements, but isn't it easier to say "Foo objects"

[18:33:53.0000] <MikeSmith>
TimothyGu: well the specific context I am trying to deal with is a general case, so I don‚Äôt have one specific Foo object in this context.

[18:34:08.0000] <MikeSmith>
lemme show you the exact wording I have...

[18:34:39.0000] <MikeSmith>
> See _Iterator-like methods_ in _Information contained in a WebIDL file_ for information on how an iterable declaration in an interface definition causes entries(), forEach(), keys(), and values() methods to be exposed in objects that are instances of the interface.

[18:35:13.0000] <MikeSmith>
where _Iterator-like methods_ hypertext is a link to https://wiki.developer.mozilla.org/en-US/docs/MDN/Contribute/Howto/Write_an_API_reference/Information_contained_in_a_WebIDL_file#Iterator-like_methods

[18:35:58.0000] <TimothyGu>
Okay. Yeah, "objects that implement the interface" would be the technically proper wording

[18:36:26.0000] <MikeSmith>
OK super

[18:36:29.0000] <MikeSmith>
thanks much

[18:37:30.0000] <MikeSmith>
oh

[18:37:57.0000] <MikeSmith>
"exposed *from* objects that implement the interface"?

[18:38:15.0000] <MikeSmith>
what preposition is best there?

[19:24:46.0000] <Domenic>
If this is MDN documentation, I have a long-standing pet peeve to remove all uses of the term "interface", since it it is a COBOL-ism holdover and the correct thing in JavaScript is "class".

[19:25:05.0000] <Domenic>
I've tried suggesting this before and been convinced it will be easier to change Web IDL first before we can convince the MDN maintainers to change.

[20:07:53.0000] <MikeSmith>
Domenic: yeah I personally would be much happier if we could make it align with JavaScript

[20:08:11.0000] <MikeSmith>
that‚Äôd certainly be more clear for web developers

[03:38:29.0000] <annevk>
I would love to see that change in IDL

[06:55:24.0000] <Domenic>
I want to tackle some easier ones first, in particular https://github.com/heycam/webidl/issues/350

[07:56:09.0000] <MikeSmith>
if we wanted to get more changes made to the IDL spec more quickly, my impression is that it could happen if we had somebody willing to put (more) money into a contract to pay for the necessary work

[07:56:58.0000] <MikeSmith>
or maybe not and the real bottleneck is still just not having enough people to work on it, regardless of money

[08:00:06.0000] <annevk>
I think the problem is in part that the payoff is not direct and that there's a lot of cross-cutting concerns.

[08:01:49.0000] <MikeSmith>
yeah

[08:04:02.0000] <MikeSmith>
so by the way about the MDN annos, I notice a kind of bad usability/discoverability problem that happens in a small number of cases

[08:04:13.0000] <MikeSmith>
if you go to https://html-mdn.herokuapp.com/output/multipage/semantics-other.html#selector-read-only

[08:04:37.0000] <MikeSmith>
... there is actually an MDN anno for ":read-only"

[08:05:17.0000] <MikeSmith>
but it‚Äôs not visible right there at point of use

[08:05:28.0000] <MikeSmith>
not aligned there

[08:06:23.0000] <MikeSmith>
the reason is, if you go to https://html-mdn.herokuapp.com/output/multipage/semantics-other.html#pseudo-classes and open the second anno there

[08:07:43.0000] <MikeSmith>
... you‚Äôll see it‚Äôs one giant long anno with info for every single pseudo-class in that dl/dt/dd list in the body of the spec

[08:09:41.0000] <MikeSmith>
but no normal reader would ever realize that they need to scroll all the way back up there to find the anno

[08:10:35.0000] <MikeSmith>
this is why, when I first added the MDN annos, I made them un-minimized by default ‚Äî because otherwise, we run into discoverability issues like that

[08:11:38.0000] <MikeSmith>
so anyway if anybody has some good ideas about how we could better handle discoverability of the annos in cases like that, lemme know

[08:38:59.0000] <Domenic>
MikeSmith: "Pseudo-classes / No support in current engines. / No support data" seems not so good

[08:39:42.0000] <MikeSmith>
Domenic: yeah that‚Äôs a bug

[08:39:56.0000] <Domenic>
MikeSmith: interesting, I guess the problem there is that we're going up to child-of-body, which is the entire <dl>.

[08:40:23.0000] <MikeSmith>
yeah, that is the cause

[08:40:48.0000] <MikeSmith>
maybe we can special-case <dt>

[08:40:52.0000] <Domenic>
Yeah that's what I'm wondering

[08:41:01.0000] <MikeSmith>
yeah will look into that

[08:41:03.0000] <Domenic>
If we had a before/after diff to judge the impact i'd be comfortable with that

[08:41:12.0000] <Domenic>
To make sure it doesn't have worse impacts elsewhere

[08:41:16.0000] <MikeSmith>
right

[08:41:21.0000] <MikeSmith>
yeah good point

[08:41:33.0000] <MikeSmith>
I can do it in a way that gives us a diff

[09:30:26.0000] <TabAtkins>
Hm, why go up to child-of-body, rather than just nearest-ancestor-not-autoclosed-by-an-aside?

[09:42:44.0000] <Domenic>
That sounds more complicated :)

[09:43:34.0000] <Domenic>
If it was easy to know what that list was then we could probably do it

[12:38:29.0000] <TabAtkins>
If only there were a spec around that described the auto-closing behavior, or perhaps an editor of said spec... ^_^

[15:39:06.0000] <shu>
Domenic: mind elaborating the confusion on https://github.com/tc39/ecma262/issues/1524#issuecomment-611222892?

[15:39:52.0000] <Domenic>
shu: just confused/sad that we got to that conclusion given the arguments presented.

[15:39:59.0000] <shu>
AIUI the problem we want to solve was to not mislead -- currently, sometimes implementations mean a user agent, sometimes all user agents

[15:40:12.0000] <shu>
the compromise was to directly address that issue by enumerating all the places where implementation actually means host

[15:40:18.0000] <shu>
and linking to the actual host spec

[15:41:03.0000] <Domenic>
Sure. We've just lost a valuable word to discuss the distinction.

[15:41:32.0000] <shu>
that's fair -- the plan is to clarify that in the front matter somehow, non-normatively


2020-04-09
[05:16:06.0000] <annevk>
shu: I don't think that really works and if this is something Mozilla could object to I hope we do so

[05:16:39.0000] <annevk>
Going all the way back to hosts having to monkey patch is such nonsense

[07:03:30.0000] <zcorpan>
domfarolino: yo

[07:04:07.0000] <zcorpan>
domfarolino: I'm working on lazy images today again :)

[07:15:19.0000] <domfarolino>
zcorpan: excellent. I should be around a bit

[07:17:15.0000] <zcorpan>
domfarolino: did you see https://github.com/whatwg/html/issues/5408#issuecomment-610033630 ? I'll look at httparchive today to test my hypothesis

[07:27:52.0000] <domfarolino>
zcorpan: I see that there was activity on that issue, haven‚Äôt looked at it yet but will check it out today! Sounds exciting

[07:40:54.0000] <annevk>
Domenic: well, HTML doesn't have nullable DOMString for anything but enumerated attributes either

[07:41:07.0000] <annevk>
Domenic: so if that was the argument I'm confused

[07:41:25.0000] <Domenic>
annevk: I see, true.

[07:41:37.0000] <devsnek>
did the async iterator api on streams ever get picked up by any implementations

[07:41:48.0000] <Domenic>
devsnek: sadly not yet

[07:42:11.0000] <devsnek>
do you know if that's low priority or if something is preventing it

[07:44:16.0000] <Domenic>
devsnek: I think generally low priority but in Chrome the easiest path for us would be to get https://github.com/heycam/webidl/pull/808 merged and reviewed (cc edgarchen annevk) and then implement that in our Web IDL bindings system

[07:46:13.0000] <MikeSmith>
Domenic: I remember that a few months back you pointed out a case to me where we had a Can I Use anno in the HTML spec that provided better information than the corresponding MDN anno

[07:46:30.0000] <Domenic>
MikeSmith: https://github.com/whatwg/html-build/issues/213

[07:46:45.0000] <MikeSmith>
/me looks

[07:46:53.0000] <MikeSmith>
there we go

[07:46:55.0000] <MikeSmith>
thanks!

[07:47:07.0000] <Domenic>
It would be nice to remove the caniuse stuff, for sure...

[07:50:09.0000] <MikeSmith>
yeah I can get make some patches for BCD

[07:51:17.0000] <MikeSmith>
the ‚ÄúMDN has 2 entries for Firefox and 2 for Firefox for Android‚Äù case was due to a bug that we since fixed

[07:53:56.0000] <annevk>
Domenic: edgarchen said he would have time next week, if that falls through I'm happy to take a look

[07:54:09.0000] <Domenic>
Great

[08:14:13.0000] <shu>
annevk: sorry i'm confused

[08:14:16.0000] <shu>
annevk: what monkey patching?

[08:15:00.0000] <annevk>
shu: if ECMAScript doesn't acknowledge it can be integrated as part of other specs, presumably the host hooks are going?

[08:16:00.0000] <shu>
annevk: oh it is acknowledging that, i think there's a miscommunication

[08:16:06.0000] <shu>
annevk: in a mtg atm, will elaborate in a bit

[08:20:47.0000] <annevk>
shu: https://github.com/heycam/webidl/pull/870#issuecomment-611586723

[08:28:26.0000] <shu>
annevk: i am missing context here, unfortunately

[08:28:57.0000] <annevk>
shu: ECMAScript is apparently inconsistent on how to spell builtin

[08:29:15.0000] <annevk>
shu: it would be nice if it picked a single style so we could align

[08:29:54.0000] <shu>
annevk: agreed. just making sure that was a separate thing from the "doesn't acknowledge it can be integrated into other specs" concern

[08:30:08.0000] <shu>
annevk: as for that, you're talking about the host vs implementation discussion, right?

[08:30:17.0000] <annevk>
shu: yeah

[08:30:52.0000] <annevk>
shu: in particular the conclusion of not distinguishing the NaN implementation-defined from how to allocate a Realm

[08:31:41.0000] <shu>
annevk: so the editor group conclusion was to just pick a term of art, "implementation", to only mean "blackbox indistinguishable" from an observable behavior inside ecma262 point of view

[08:31:55.0000] <shu>
annevk: and at the same time, address the spec layering issue directly by linking to upstream specs where appropriate

[08:32:26.0000] <shu>
annevk: like for Realms, host hooks, etc, we'll actually link to the relevant HTML parts that specify the additional requirements

[08:32:48.0000] <shu>
the actual interface points of the spec are unchanged

[08:33:18.0000] <shu>
if this arrangement isn't acceptable for HTML folks, i'm happy to bring it up again next week and relitigate

[08:36:49.0000] <annevk>
shu: it doesn't make sense to me to have interface points but then not distinguish the interface points from things that are actually up to implementations entirely

[08:38:05.0000] <annevk>
shu: that ECMAScript can be entirely self-hosted is fine and I think could be addressed by defining a basic self-hosting implementation in an appendix, that would also make it clear how various hooks are kinda broken and how agents don't have any

[08:48:59.0000] <devsnek>
annevk: self hosted meaning the host doesn't provide any of its own behaviour for hooks?

[08:51:27.0000] <annevk>
devsnek: self-hosted is where the hooks are all implementation-defined, is the way I think about it

[08:51:51.0000] <devsnek>
isn't that just "normal"

[08:52:17.0000] <annevk>
it's not my normal, but it could be yours

[08:56:38.0000] <devsnek>
don't hooks only exist for implementation defined behaviour

[09:01:43.0000] <shu>
annevk: concretely, we're planning on distinguishing the interface points by linking to the upstream specs

[09:02:30.0000] <annevk>
shu: but I thought that was non-normative?

[09:02:32.0000] <shu>
annevk: i'm trying to understand if we distinguish the interface points explicitly somehow, is the host-implementation distinguish in prose still as important to you

[09:02:36.0000] <annevk>
it kinda has to be

[09:03:09.0000] <shu>
annevk: whether something is definable by an upstream spec or an implementation is certainly normative

[09:03:18.0000] <shu>
or do you mean whether something _is_ an interface point is non-normative?

[09:03:33.0000] <annevk>
both?

[09:03:51.0000] <annevk>
(I think all should be normative)

[09:03:52.0000] <shu>
i'm kinda confused; to say something is defined elsewhere is definitely normative

[09:04:49.0000] <shu>
the problem right now is for the reader, they don't know if "defined elsewhere" means "defined in another spec" or "go read the c++ of whatever implementation you're running"

[09:04:50.0000] <annevk>
Same, I guess I don't really see how this is going to work, an example might help

[09:08:01.0000] <shu>
annevk: we don't have any PRs up yet, but for example, i was imagining something like

[09:09:02.0000] <shu>
annevk: in https://tc39.es/ecma262/#sec-initializehostdefinedrealm, there will be a note that links to https://html.spec.whatwg.org/#realms-settings-objects-global-objects directly, saying HTML spec has additional requirements here

[09:11:12.0000] <shu>
annevk: as opposed to in something like https://tc39.es/ecma262/#sec-numeric-types-number-exponentiate, there'll be no links to upstream specs because there are no upstream specs that have additional requirements

[09:12:24.0000] <shu>
annevk: but ecma262 doesn't want to preclude that possibility, in case in the future if there's some standardized embedded device host spec that does impose a particular exponentiate algorithm on all its implementations

[09:19:30.0000] <devsnek>
shu: any implementation might have its own usage, are they supposed to all link to their docs/spec there?

[09:20:39.0000] <shu>
devsnek: if there *are* upstream specs, i recommend it

[09:20:42.0000] <shu>
not docs, specs

[09:20:59.0000] <devsnek>
node doesn't have a spec but it implements some of these hooks

[09:21:05.0000] <shu>
then it doesn't count

[09:21:20.0000] <devsnek>
why

[09:21:23.0000] <shu>
the point is to help readers understand additional requirements imposed by specifications that may have its own implementations

[09:21:34.0000] <shu>
not enumerate how it's implemented

[09:21:55.0000] <shu>
if node has its own spec and independent implementations and interop requirements, then we should link

[09:22:24.0000] <devsnek>
the only difference between for example how promises are hooked between node and html is one has a spec and one has docs

[09:22:52.0000] <shu>
no, the difference is one has at least 3 independent implementations that are expected to behave the same

[09:23:04.0000] <devsnek>
node has 3

[09:23:05.0000] <devsnek>
or 2

[09:23:29.0000] <devsnek>
I think chakranode is dead now but Graal has nodejs

[09:25:16.0000] <shu>
there is a qualitative difference between a reference implementation and a standard in my opinion

[09:25:32.0000] <devsnek>
I don't see the difference between "my impl of this hook has to support a browser" and "my impl of this hook has to support node"

[09:25:55.0000] <shu>
the difference is html has a spec that implementers consult to then implement it in their own browser

[09:26:16.0000] <shu>
there is a compliance issue -- a standard exists for html

[09:26:28.0000] <shu>
you're talking how mechanically it's the same

[09:26:32.0000] <devsnek>
i mean if you say your runtime supports node

[09:26:37.0000] <devsnek>
but it works differently

[09:26:56.0000] <shu>
what is a runtime that supports node

[09:27:12.0000] <devsnek>
chakranode, v8 node, graaljs node

[09:27:19.0000] <devsnek>
although i don't think chakranode is maintained anymore

[09:27:43.0000] <shu>
there was never a standard, that artifacts exist that may interop with a reference implementation may be a pre-step

[09:28:03.0000] <shu>
like maybe eventually there'll be a reason to guarantee ongoing interop and codify that in a standard and get through all the IPR hoops and all that

[09:28:14.0000] <devsnek>
so its a legal thing?

[09:28:46.0000] <shu>
part of why standards exists is a legal thing, yes. for this editorial, it's mainly about expectations of where to look next for requirements

[09:28:58.0000] <shu>
it's a reasonable line to draw at "link to other specs"

[09:29:06.0000] <shu>
and not "link to c++ code"

[09:29:09.0000] <shu>
or "link to docs"

[09:29:18.0000] <devsnek>
ü§∑üèª

[09:29:53.0000] <shu>
are you saying to you standards are the same as reference implementations and docs?

[09:30:19.0000] <devsnek>
no, but in terms of "reasons this hook exists with these requirements"

[09:30:34.0000] <devsnek>
* yes in terms of "reasons this hook exists with these requirements"

[09:31:24.0000] <shu>
i disagree. they're only the same mechanically speaking

[09:32:12.0000] <devsnek>
like someone representing html comes to tc39 and says "hook needs to fulfill x" and someone from node comes to tc39 and says "hook needs to fulfill y"

[09:32:31.0000] <devsnek>
why do we list x but not y in the spec

[09:32:42.0000] <devsnek>
also it occurs to me this is probably a bad channel for this

[09:34:54.0000] <shu>
i feel like i'm repeating myself: because one has a standard and realistic expectations of independent implementations having interop, and the other has a reference implementation only

[09:38:02.0000] <devsnek>
so in terms of someone implementing their js engine, they should care less about whether their exposing of the hook matches node's needs?

[10:09:41.0000] <annevk>
shu: aren't you precluding it by not having a host hook?

[10:10:01.0000] <shu>
annevk: we're not removing host hooks

[10:10:24.0000] <annevk>
shu: are you adding host hooks for everything that's implementation-defined?

[10:11:27.0000] <shu>
annevk: ah, i see what you're saying. not right now, but not having a host hook today also doesn't preclude

[10:11:58.0000] <shu>
annevk: if an upstream spec user materializes we can technically add host hooks to anywhere that says "implementation-defined" without normative differences, really

[10:12:41.0000] <annevk>
shu: right, so then it makes sense to me to acknowledge them directly

[10:13:36.0000] <shu>
annevk: concrete suggestions?

[10:15:24.0000] <annevk>
shu: have host hooks, acknowledge hosts, have the default implementation of each host hook be implementation-defined (this also helps HTML if you add hooks HTML doesn't want to override); I don't really see a need to reference HTML from the spec, but it might be nice

[10:16:55.0000] <annevk>
shu: this would also allow you to enforce invariants on hosts, though I guess that can also be done through asserts and might be better

[10:50:34.0000] <shu>
annevk: that is basically the current plan, though we're not adding new host hooks

[10:51:49.0000] <shu>
annevk: the difference is that the *word* that was settled on was "implementation". so the pushback i'm hearing now is that there is still very strong preference for the single word to be "host" and not "implementation"

[10:52:23.0000] <shu>
what do you mean by acknowledge hosts?

[10:53:45.0000] <annevk>
If you 1:1 implementation and host, HTML is the implementation, what does implementation-defined for https://tc39.es/ecma262/#sec-numeric-types-number-exponentiate mean?

[10:54:28.0000] <shu>
annevk: it means HTML has the right (but not the obligation) to impose additional requirements

[10:54:41.0000] <shu>
annevk: if it doesn't, that freedom passes through to HTML's implementations

[10:54:50.0000] <annevk>
shu: literally it says that it's HTML-defined, but HTML doesn't want to define it

[10:55:07.0000] <annevk>
shu: you can't say implementation is both the host and the implementation, imo

[10:55:55.0000] <shu>
annevk: it literally just means it's defined somewhere else

[10:56:41.0000] <shu>
annevk: i'm having trouble understanding why the "right but not the obligation" part is confusing

[10:56:56.0000] <annevk>
shu: there is no right either since there's no explicit hook

[10:57:09.0000] <annevk>
shu: (nor should there be)

[10:58:01.0000] <shu>
annevk: that's the basic disagreement

[10:58:12.0000] <shu>
annevk: i don't think anybody in ecma262 sees the presence of hooks as conferring the right

[10:58:35.0000] <shu>
annevk: well, anybody in the editor group

[10:58:44.0000] <annevk>
How would you do it without hook?

[10:59:04.0000] <shu>
let me clarify

[11:00:07.0000] <shu>
by "the right" i mean ecma262 already allows for upstream hosts or implementations to do its own thing there

[11:00:21.0000] <shu>
host hooks are one way to provide easy hooking points for host-defined behavior

[11:00:57.0000] <shu>
if HTML said, use the following algorithm for ecma262's Number::exponentiate, so long as its it follows the invariants laid out, HTML has the right to just provide its own algorithm, host hook or not

[11:01:36.0000] <annevk>
I'm not a fan of that

[11:01:51.0000] <shu>
sure, but the point is host hooks are mechanics

[11:02:00.0000] <annevk>
That's what I would call monkey patching and an extremely bad practice when it comes to specifications

[11:02:08.0000] <shu>
okay, i see

[11:02:43.0000] <shu>
why is it extremely bad practice in your opinion?

[11:02:53.0000] <annevk>
But I also think it's plain confusing that implementation sometimes means host and sometimes means implementation

[11:03:24.0000] <annevk>
shu: it's not clear to implementers from looking at the algorithm how to implement it

[11:03:43.0000] <annevk>
shu: I guess if you're familiar with the weird way some in TC39 use implementation-defined, you might be alerted to the fact, but otherwise

[11:05:40.0000] <annevk>
shu: it can also lead to hard to iron out inconsistencies between hosts that force multiple implementations of the algorithm or even conflicts within a single host if it's large enough (e.g., if some non-HTML spec tried to take ownership of some things)

[11:06:01.0000] <shu>
annevk: i'm very sympathetic to "unclear to implementers", which is how we ended up on "link to the upstream spec (HTML) directly"

[11:06:54.0000] <shu>
the host-vs-implementation distinction doesn't exist normatively in ecma262, and defining it into existence is very hard

[11:07:03.0000] <annevk>
It's also not the kind of abstraction you'd offer in code I think (supply your own algorithm that matches this one but fills in a couple of details differently)

[11:08:15.0000] <shu>
the distinction we're talking about for exponentiation vs, say, module loading, just doesn't exist in ecma262 currently

[11:08:37.0000] <annevk>
In practice I think it does

[11:08:49.0000] <annevk>
In the way it's read by implementers I think it does

[11:09:31.0000] <annevk>
Certainly in the way I read it, it does, but I don't think it offers enough hooks to implement a host (e.g., no way to set up an agent cluster and such)

[11:10:17.0000] <shu>
in practice it definitely does, but to define the difference normatively in ecma262 isn't going to get consensus

[11:10:30.0000] <annevk>
shu: it even starts with talking about a host environment

[11:10:37.0000] <shu>
sigh

[11:10:39.0000] <annevk>
shu: and there was this whole host objects thing, etc.

[11:10:59.0000] <shu>
i understand the desire to disallow monkeypatching normatively

[11:11:14.0000] <shu>
but there isn't consensus for that

[11:11:27.0000] <annevk>
Is there consensus to replace every instance of host with implementation though?

[11:11:39.0000] <annevk>
Again, I'd hope Mozilla objects if possible

[11:12:13.0000] <shu>
we're replacing host-defined with implementation-defined

[11:12:16.0000] <annevk>
How are  the editors explaining "Jobs are scheduled for execution by ECMAScript host environments."

[11:12:19.0000] <shu>
not touching the word host otherwise

[11:13:46.0000] <annevk>
I gotta go relax for a bit as it's late here. I'm still rather confused about this direction, but I guess we'll see

[11:14:16.0000] <shu>
i don't know how to satisfy the stakeholders tbh, without actually precluding the right for hosts but not implementations to override e.g. exponentiate

[12:53:44.0000] <Domenic>
TabAtkins: Is there any way to disable the Bikeshed thing where it will append "of type X" when I define things in a <dt>?

[14:10:42.0000] <TabAtkins>
Domenic: I don't think so, lemme check...


2020-04-10
[17:58:58.0000] <TabAtkins>
Domenic: check the CSS Syntax algos, are you happy with the increased explicitness now?

[18:38:23.0000] <Domenic>
TabAtkins: Ah, looks great now; thank you!


2020-04-13
[22:14:13.0000] <MikeSmith>
annevk: Domenic: do we know why Travis stopped running for HTML?

[22:14:25.0000] <MikeSmith>
https://travis-ci.org/github/whatwg/html/builds

[22:14:36.0000] <MikeSmith>
last build 4 days ago

[22:15:09.0000] <MikeSmith>
oh wait

[22:15:42.0000] <MikeSmith>
I see that is actually the last time anything was merged to master

[22:16:17.0000] <MikeSmith>
I was thinking https://github.com/whatwg/html/pull/4519/ has been merged but I see now that it has not

[22:18:33.0000] <MikeSmith>
yeah, waiting on resolution of https://github.com/whatwg/html/issues/3840 still I guess

[04:43:39.0000] <annevk>
MikeSmith: üê£

[04:44:14.0000] <MikeSmith>
heh

[04:44:26.0000] <MikeSmith>
that‚Äôs a nice one

[15:56:21.0000] <Domenic>
Phew https://github.com/whatwg/streams/pull/1035

[16:40:41.0000] <MikeSmith>
Domenic: oh wow

[16:40:42.0000] <MikeSmith>
cool


2020-04-14
[19:31:57.0000] <MikeSmith>
offered without comment: https://mailarchive.ietf.org/arch/msg/ietf/h6fTco-9fw7IeF_x6jvEvfrZuvk/

[19:34:08.0000] <Domenic>
Harald's reply seems pretty on-point

[19:34:24.0000] <MikeSmith>
yeah

[19:35:16.0000] <MikeSmith>
> This is part of what theIETF process is supposed to do between "proposed standard" and"standard" (but rarely does).

[20:40:18.0000] <MikeSmith>
stumbled across https://lab.syncer.jp/Web/API_Interface/Reference/IDL/ which in some cases seems more complete than MDN BCD

[05:34:34.0000] <Slyda1>
hey guys

[05:34:47.0000] <Slyda1>
I am a radio operator in Brisbane Australia

[05:34:52.0000] <Slyda1>
abc.net.au/triplej

[05:34:59.0000] <Slyda1>
I will try to get the host to play some punk

[05:35:04.0000] <Slyda1>
this is hard on me....

[05:35:44.0000] <Slyda1>
they are trying to play some punk

[05:35:45.0000] <Slyda1>
talk to me

[05:35:48.0000] <Slyda1>
Slyda1

[05:35:53.0000] <Slyda1>
I hear all of you

[05:35:57.0000] <Slyda1>
and then sometimes I hear you

[05:36:08.0000] <Slyda1>
but I hear all of you!

[05:36:09.0000] <Slyda1>
:)

[05:36:26.0000] <Slyda1>
10.36pm

[05:36:31.0000] <Slyda1>
6x6 are 36

[05:39:13.0000] <Slyda1>
abc.net.au/triplej

[05:39:16.0000] <Slyda1>
Radio Operator

[05:39:18.0000] <Slyda1>
Lachlan is on

[05:39:21.0000] <Slyda1>
he is real good eh!

[05:39:28.0000] <Slyda1>
I like Lachlan

[05:39:34.0000] <Slyda1>
he is pretty good do you like him!

[05:39:37.0000] <Slyda1>
sweet some nice punk!

[06:56:24.0000] <Domenic>
MikeSmith: there's also https://web-confluence.appspot.com/#!/catalog?releases=%5B%22Edge_18.17763_Windows_10.0%22,%22Safari_13.0.2_OSX_10.15%22,%22Chrome_78.0.3904.70_Windows_10.0%22,%22Firefox_70.0_Windows_10.0%22%5D&q=%22%22

[07:01:52.0000] <MikeSmith>
Domenic: yup, thanks ‚Äî the only complaint I have about that is that it doesn‚Äôt go back far enough for what‚Äôs needed in MDN/BCD at times

[07:04:04.0000] <MikeSmith>
I mean as far as ‚Äúwhat browser versions did this feature first ship in‚Äù

[07:08:17.0000] <MikeSmith>
on that note today I realized the https://trac.webkit.org/browser/webkit/tags/ tag browser can be very useful for figuring out what tag a particular webkit revision first went into

[07:09:03.0000] <MikeSmith>
which is useful not just for Safari but also for older Chrome pre-fork

[08:12:11.0000] <annevk>
Domenic: experience with https://hub.github.com/ or similar? Thinking of adding that to spec-factory to create the PRs in an easier way, but not sure if that's the preferred dependency or if there's something else

[08:13:24.0000] <Domenic>
annevk: I use hub, exclusively for the `hub checkout $PR_URL` command. I imagine the "preferred" way would be to use the GitHub API via some pure-Python package, but that involves tokens and stuff; shelling out to a command line script is probably easier for you.

[08:13:37.0000] <Domenic>
annevk: however I think `hub` is being replaced by "the official GitHub CLI"; let me look that up...

[08:13:50.0000] <Domenic>
annevk: https://cli.github.com/

[08:14:15.0000] <Domenic>
https://github.com/cli/cli#comparison-with-hub

[08:14:20.0000] <annevk>
Domenic: I saw that, but that had less features

[08:14:47.0000] <annevk>
Domenic: I guess I'll go with a hub dependency for now and be prepared to change it later

[08:14:58.0000] <Domenic>
I'm curious, what feature of hub do you need that gh doesn't have?

[08:15:28.0000] <annevk>
Domenic: talking to the raw API to add a comment

[08:15:40.0000] <Domenic>
Interesting

[08:15:56.0000] <annevk>
Domenic: I want to create a script for RDs as well if I start doing this

[08:16:17.0000] <annevk>
although I guess the comment there is after merging hmm

[08:17:13.0000] <annevk>
I hadn't completely thought the whole thing through, mandatory reviews are another issue

[08:22:16.0000] <Domenic>
I guess you might want something more like https://github.com/PyGithub/PyGithub for that

[08:22:56.0000] <Domenic>
Lots of choices although that one is listed first https://developer.github.com/v3/libraries/

[08:23:28.0000] <annevk>
That also seems reasonable I suppose, it takes a token which is the main thing we need

[09:02:36.0000] <annevk>
You get an email per commit? Oh my I should be more careful

[09:05:55.0000] <Domenic>
I dunno, it's self-inflicted because I choose not to set up any filter rules.

[09:05:59.0000] <Domenic>
But it usually works pretty well.

[09:06:28.0000] <annevk>
Oh so ARIA attributes are also superglobal attributes, I missed that

[09:08:39.0000] <jgraham>
I've used PyGitHub fwiw

[09:08:57.0000] <Domenic>
annevk: hmm https://w3c.github.io/html-aria/#rules-wd does not say so

[09:09:32.0000] <annevk>
https://w3c.github.io/aria/#AriaAttributes extends Element

[09:09:35.0000] <annevk>
hmm

[09:09:42.0000] <Domenic>
Hmm

[10:19:53.0000] <MikeSmith>
hmm indeed

[10:20:01.0000] <MikeSmith>
that wasn‚Äôt there before

[10:20:07.0000] <MikeSmith>
wonder when they added it

[10:25:20.0000] <MikeSmith>
next maybe the https://w3c.github.io/dpub-aria/ will do the same for the three dozen doc-* roles it defines

[10:30:52.0000] <annevk>
Domenic: so if we ever allow non-data URL sandboxed workers, the allocation of the thread has to happen after the response comes in

[10:31:09.0000] <annevk>
Domenic: which is reasonable I suppose, we fetch in parallel and then create an environment

[10:31:32.0000] <annevk>
Domenic: maybe once we address the racy stuff in how shared workers are created that'll mostly solve itself

[11:41:09.0000] <Krinkle>
Where do we stand nowadays in terms of web apps being able to store key-value pairs with a TTL associated with them. In order words, cookies but without being needlessly sent over the network (which is either unpleasant or a show stopper, depending on the data in quesion and one's policy on privacy).

[11:41:42.0000] <Krinkle>
I recall a few different efforts existing in this realm, but I'm not seeing this particular use case mentioned anywhere, is that right?

[11:44:22.0000] <Krinkle>
The status quo, for Wikipedia as example, is either: Cookies or really-really-bad use of LocalStorage. Where really-really-bad is looping through localStorage key by key (in all its race glory) and delete stuff that's expired based on your own value format. Aside from being buggy and racey, it is also horrible for performance as on mobile localStorage can incur disk I/O. In our testing, easily up to 100ms per call, and unlike desktop, the whole

[11:44:22.0000] <Krinkle>
origin's store does not go into RAM after one call.

[11:45:22.0000] <Krinkle>
Our current compromise for mobile, for the limited cases that absolutely need expiry and cant use cookies, is to start somewhre randomly between 0 and localStorage.length, and to requetIdleCallback/setTimeout yield as much as we can, and either way stop after a handful of iterations because otherwise it'd just be a waste of energy.

[12:27:02.0000] <annevk>
Krinkle: the idea is still alive, there might be some progress on buckets this year

[12:29:18.0000] <Krinkle>
annevk: mainly WHATWG or one of the W3 WGs? Is there a ticket I can create or should follow?

[12:29:35.0000] <Krinkle>
with Wikimedia now being a member, perhaps we can help in a more organised fashion on this if in-scope

[13:02:10.0000] <annevk>
Krinkle: whatwg/storage, but maybe there is discussion elsewhere too, not sure

[13:03:11.0000] <Krinkle>
annevk: you mean that as part of the navigation.storage spec etc there'd be potentially a new localstorage-like API that supports TTL on a per-key basis?

[13:05:01.0000] <Mek>
not sure if buckets really aims to address things on a per-key basis...

[13:05:04.0000] <annevk>
Krinkle: oh, I missed per-key

[13:05:43.0000] <Mek>
Some modification to cache storage might make more sense, although I'm not aware of concrete efforts in that area either. Being able to expire individual cache storage items autoamtically has come up as a use case a couple of times at least

[13:06:33.0000] <Mek>
https://github.com/w3c/ServiceWorker/issues/863 has some thoughts

[13:08:05.0000] <Krinkle>
The main issuse we're running into is that when different features over the weeks/months store keys and then no longer need those keys the code for it ceases to exist so the keys linger ,which ultimately keeps shrinking the amount of space available.

[13:08:31.0000] <Krinkle>
It also means when someone enables an experimental feature that uses up a fair amount storage and then disables it again, the keys remain etc.

[13:08:49.0000] <Krinkle>
also things like mything-{variable}-something are big red flags right now given no expirration

[13:09:41.0000] <Mek>
at least that experimental feature use case seems like it doesn't need per-key expiry; the experimental feature could have its own storage bucket, with a per-bucket expiration date, and then their own CacheStorage/IndexedDB/localstorage/...  inside that bucket

[13:09:53.0000] <Mek>
assuming you don't need transactions that span multiple buckets...

[13:15:31.0000] <Krinkle>
yeah, for 99% of what I'm imagining, transactions are not needed. these are just simple key-value pairs

[14:38:48.0000] <AutomatedTester>
where is the best place to raise issues against unicode.org's site?

[14:41:07.0000] <AutomatedTester>
actually... looks like http://blog.unicode.org/2020/04/technical-alert-unicode-technical.html might the cause of my links to it not working


2020-04-15
[17:42:21.0000] <innovati>
<div hello:world></div> Am I correct in thinking that HTML doesn't support the hello: namespace thing here? Is it defined how this should be parsed, or do we know what should happen?

[17:46:00.0000] <MikeSmith>
innovati: per-spec it‚Äôs parsed as an attribute with the literal name hello:world and an empty value

[17:46:21.0000] <MikeSmith>
there‚Äôs nothing special about the colon in the attribute name

[17:46:41.0000] <innovati>
If this was XML instead, it would be a namespace and an attribute name separately?

[17:47:09.0000] <MikeSmith>
I dunno about XML, don‚Äôt remember

[17:47:21.0000] <innovati>
thanks so much @MikeSmith <3

[20:52:27.0000] <annevk>
innovati: parse error, use data:text/xml, to try

[05:04:34.0000] <annevk>
littledan: I guess I'm a bit out-of-my-depth, but that kind of coding style doesn't sound great for window agents

[05:04:51.0000] <littledan>
annevk: Yeah, I agree

[05:05:06.0000] <littledan>
sorry if my comment was ambiguous. I'm all for restricting this to, roughly, the [[CanBlock]] set

[05:05:14.0000] <annevk>
littledan: it might be okay for audio worklets, but padenot suggested they can make those close to or actually GC-free so might not need this either

[05:05:18.0000] <littledan>
I don't know if it should be the same bit or if we might come to some kind of agent where they differ

[05:05:34.0000] <littledan>
maybe it's fine to use the same bit for now

[05:05:59.0000] <annevk>
I guess that's really a thing TC39 should have settled

[05:06:24.0000] <annevk>
Or is there more to do than set a boolean for HTML?

[05:06:28.0000] <littledan>
well, we decided that different hosts can settle this differently, since not everyone even uses an event loop style

[05:06:50.0000] <annevk>
You'll at least have as much of a loop as needed for promises presumably

[05:06:58.0000] <littledan>
editorially we decided to go for the most parsimonious thing, that it's just "normative optional"--hosts can already resolve that, as they do for Intl and Annex B

[05:07:21.0000] <annevk>
But isn't that the same as an agent flag?

[05:07:34.0000] <annevk>
Or can we make this different per global if we wanted to?

[05:07:38.0000] <littledan>
right, ultimately these are all different ways of talking about the same thing

[05:08:06.0000] <annevk>
Again, I think it would help if TC39 was a bit more opionated and didn't leave all the work to hosts

[05:09:31.0000] <annevk>
Or maybe not opinionated, but doing a bit more legwork on reasonable tradeoffs for hosts

[05:22:21.0000] <littledan>
Well,  maybe this thread we're having in HTML now can lead to recommendations that we can bring back to the committee, to consider refining the "normative optional" wording and proposing something more specific

[07:39:09.0000] <Domenic>
I tend to disagree with annevk, and am in favor of expansive powers for hosts in general :)

[07:45:31.0000] <annevk>
You think the current setup is good?

[07:49:19.0000] <Domenic>
Yeah

[07:49:44.0000] <Domenic>
Giving hosts the ability to choose how to expose things like SharedArrayBuffer or cleanupSome() is nice

[07:52:14.0000] <annevk>
Sure, but there's no concrete API for doing that atm

[07:52:43.0000] <annevk>
E.g., our current SharedArrayBuffer thing assumes it's defined by default

[07:52:57.0000] <Domenic>
I'd rather hosts be able to say things like "expose X" and "don't expose Y" at their leisure than require that they only have control over a proscribed set of things ES takes the time to expose an API for.

[07:53:39.0000] <Domenic>
I don't think there's anything in the current setup that makes it ambiguous what to implement, so I don't see what requiring more formal channels would buy us.

[07:54:26.0000] <Domenic>
(It would just reduce the freedom of host specs.)

[07:55:31.0000] <annevk>
You can have exactly the same level of freedom without the ambiguity

[07:55:54.0000] <Domenic>
What ambiguity?

[07:56:04.0000] <Domenic>
What two different ways to read the current HTML + ES spec combination are there?

[09:01:17.0000] <shu>
i'm also not sure something to the level of host hook rigor is needed for normative optional things in ecma262

[09:02:07.0000] <annevk>
Domenic: how is it clear that it's required that the implementation exposes the SharedArrayBuffer constructor?

[09:02:38.0000] <shu>
ecma262 needs to be exact in what is normative optional (e.g. the data property on the global object), but i'm also confused by the confusion

[09:03:18.0000] <Domenic>
annevk: because HTML says it must?

[09:03:58.0000] <annevk>
It does?

[09:04:11.0000] <annevk>
Anyway, maybe someone else can work on that as none of this makes much sense to me

[09:04:35.0000] <Domenic>
I mean, I'd assumed that's what your PR did

[09:04:38.0000] <Domenic>
If not, then it should

[09:13:27.0000] <annevk>
If someone could suggest the relevant language or add it to that PR that'd be appreciated

[09:13:41.0000] <annevk>
I asked in that TC39 issue and didn't really get a clear answer

[09:14:01.0000] <annevk>
The current PR simply deletes SAB and assumes it's there

[09:19:26.0000] <Domenic>
Happy to work on that

[09:20:06.0000] <annevk>
Thanks!

[09:32:14.0000] <annevk>
Domenic: https://github.com/w3c/aria/issues/1239 fyi

[11:36:53.0000] <TimothyGu>
TabAtkins: your parse-css is kept up to date, right?

[11:37:18.0000] <TabAtkins>
Uh, overall yes. I should make sure I haven't missed any updates in the last few months.

[11:37:32.0000] <TabAtkins>
I know it doesn't have the new entry-point function I added last week.

[11:37:51.0000] <TimothyGu>
Cool. I was about to write something similar before I thought to Google

[11:38:47.0000] <TimothyGu>
I‚Äôd be happy to look it over and do any updates

[11:39:38.0000] <TabAtkins>
yes, looking at both the spec and project histories, it should be up-to-date

[11:42:06.0000] <TimothyGu>
Great


2020-04-16
[09:17:19.0000] <annevk>
JakeA: (and others interested in better defining storage APIs) https://github.com/whatwg/storage/issues/18#issuecomment-614751336

[09:37:29.0000] <FND>
hi, I just noticed that `customElements.whenDefined(node.nodeName)` seems invalid in both Firefox and Chrome due to `nodeName` using uppercase letters

[09:37:51.0000] <FND>
is that intentional? I couldn't find any details on name restrictions other than hyphenation

[09:38:45.0000] <annevk>
FND: looks intentional and makes some sense given XML

[09:38:51.0000] <annevk>
FND: you could do node.localName

[09:40:35.0000] <FND>
MDN says use of localName is discouraged?

[09:40:37.0000] <FND>
(I'm an old-man wannabe, so quirksmode.org has ingrained `nodeName` in my mind)

[09:41:04.0000] <FND>
but I could easily go with `.toLowerCase()`, I was just wondering why custom elements make this distinction when AFAIK other DOM APIs are case-insensitive

[09:46:51.0000] <Domenic>
Wow, MDN is very wrong

[09:47:00.0000] <Domenic>
localName is encouraged, nodeName is discouraged

[09:47:20.0000] <annevk>
FND: MDN is misguided then... (toLowerCase() is fraught and might do the wrong thing for non-ASCII code points)

[09:47:31.0000] <Domenic>
I don't see anything in https://developer.mozilla.org/en-US/docs/Web/API/Element/localName

[09:47:57.0000] <FND>
ah, I was looking at Node.localName, not Element.localName

[09:47:57.0000] <FND>
https://developer.mozilla.org/en-US/docs/Web/API/Node/localName

[09:48:28.0000] <Domenic>
Hmm, I see, that's confusing... but I'm not sure what to concretely suggest MDN do

[09:48:47.0000] <FND>
yeah, the Node vs. Element thing is often confusing...

[09:49:15.0000] <FND>
anyway, TIL localName is preferred - thanks!

[09:50:20.0000] <FND>
yet my original puzzlement remains: why is the custom-elements API case-sensitive? am I wrong in thinking all/most other DOM APIs are case-insensitive?

[09:51:24.0000] <annevk>
FND: a lot are ASCII case-insensitive sometimes, with newer APIs we try to be a bit stricter so there's less of a difference between HTML and XML documents

[09:51:50.0000] <annevk>
FND: as the core model is very much case-sensitive

[09:52:28.0000] <FND>
roger, good to know - and yeah, ASCII assumptions is a good point

[09:57:06.0000] <FND>
jobs

[09:57:20.0000] <FND>
fg

[09:57:42.0000] <FND>
oops, sorry

[14:52:00.0000] <justJanne>
So there's an open question which is kind of interesting

[14:52:23.0000] <justJanne>
If a web notification is spawned with a body of "text <b>foo</b> bar"

[14:52:30.0000] <justJanne>
Should the browser escape this, or not?

[14:52:56.0000] <justJanne>
Firefox doesn't escape it on certain platforms, leading to the body text being interpreted as markup by the system notifications

[14:53:10.0000] <justJanne>
Chrome always escapes it, and on Windows also all browsers escape it

[14:53:43.0000] <justJanne>
Leading to a handful of edge cases where it becomes "text foo bar" instead of "text <b>foo</b> bar"

[14:54:28.0000] <justJanne>
In this case it's interesting because a notification with a body containing "<" led to the second half of the body disappearing, due to the native notification system interpreting it as malformed markup

[14:54:44.0000] <justJanne>
Is this a bug in Firefox or the webapp?

[15:12:10.0000] <Krinkle>
justJanne: I'm not entirely sure about the escaping part, but I do know that afaik web notifications do require that notifications can be rendered as plain text, so it's definitely true that it can't require HTML-escaped input in a way that promises to render them. The question is, how can you tell the browser that is already plain text or that it's marked up with HTML the browser shoudl strip if needed.

[15:14:35.0000] <Krinkle>
from looking at the spec, I see no mention of HTML support. so I would guess it is meant to be plain text, there is no markup support beyond that "title" and "icon" stand separate from "body" (often with title being bold).

[15:15:06.0000] <Krinkle>
and given no primitive in the browser for easily escaping plain text, I imagine it's not intended that developers escape it themselves

[15:16:13.0000] <Krinkle>
Probably a bug in firefox on non-Windows then?

[15:17:30.0000] <Krinkle>
OK, the spec mentions \n as being a paragraph boundary, so yeah, definitely plain text and not HTML.

[16:01:11.0000] <TabAtkins>
Ugh, "plain text only" is discriminatory against languages that need some degree of markup. Common English-speaking programmer mistake, tho.


2020-04-17
[02:40:55.0000] <mathiasbynens>
annevk: re: https://github.com/whatwg/html/issues/3400#issuecomment-615130411, "valueAsColor() doesn't help with submission" -- is that a dealbreaker somehow?

[02:41:31.0000] <mathiasbynens>
valueAsDate() doesn't affect submission either, it's just a way to read the serialized value in a different format

[02:43:18.0000] <annevk>
mathiasbynens: we need something for submission if we're going beyond RGB

[02:44:21.0000] <mathiasbynens>
annevk: sure, but do developers want to specify the exact serialization format? I was assuming it would be sufficient if the .value would be "any valid CSS color as produced by the CSS color serialization spec", and maybe that's wrong

[02:44:27.0000] <annevk>
mathiasbynens: it does seem to fine to offer utility methods, but if you're looking at an MVP I'd not target those

[02:45:03.0000] <annevk>
mathiasbynens: I suspect servers will break if <input type=color> suddenly started emitting non-RGB strings

[02:45:37.0000] <mathiasbynens>
annevk: yeah i think shoehorning this into type=color is a bad idea in general

[02:45:38.0000] <annevk>
mathiasbynens: if it's <input type=color widegamut> that's fine though

[02:45:54.0000] <mathiasbynens>
a new input type seems better

[02:46:27.0000] <annevk>
mathiasbynens: there's a bunch of precedent with the existing types for attributes to modify them somehow, e.g. <input type=file multiple directory>

[02:46:30.0000] <mathiasbynens>
I agree we don't want to break <input type=color> :)

[02:46:31.0000] <annevk>
or webkitdirectory

[02:46:48.0000] <annevk>
I guess we're mostly aligned then

[06:51:16.0000] <Domenic>
A new element!!

[07:11:52.0000] <Domenic>
Specifying MIME type parsing was a good move. It's nice to see things like https://github.com/mensbeam/mime crop up.

[07:22:00.0000] <annevk>
That's not the PHP I used to write üôÇ

[08:19:12.0000] <Domenic>
annevk: for portals (spec work is re-starting) we want to have the spec primitives to specify "no storage" for a given browsing context, and then after activation "storage as normal" (i.e. keyed to origin like a TLBC, no double-keying). Will the storage infra work you're workign on provide the primitives for that?

[08:43:58.0000] <TabAtkins>
I'm going to assume "TLBC" is "Three Letter BaCkronym"

[08:45:01.0000] <Domenic>
top-level browsing context, ofc

[09:04:39.0000] <annevk>
Domenic: it would allow you to explain the observable effects, but it's prolly still some work

[09:05:39.0000] <annevk>
Domenic: this mostly provides infrastructure for replacing the underlying storage bucket and also make it clearer which APIs end up in the same bucket

[09:06:02.0000] <Domenic>
annevk: hmm so this mostly helps with buckets, not necessarily with double-keying? Or are they connected?

[09:07:12.0000] <annevk>
Domenic: they are and it helps with double-keying

[09:07:25.0000] <annevk>
Domenic: but double-keying is different from blocking

[09:09:28.0000] <Domenic>
Right, that makes sense

[09:09:49.0000] <Domenic>
Although I wonder why our plan is blocking instead of changing the key to something useless

[09:11:09.0000] <Domenic>
I guess what I mean is keying to an isolated origin

[09:11:17.0000] <Domenic>
But then it's pretty weird if only storage treats the origin as opaque

[09:11:33.0000] <Mek>
storage is mostly blocked on opaque origins anyway?

[09:11:48.0000] <annevk>
I think so

[09:11:49.0000] <Domenic>
Is it blocked? I thought it just wrote to something that only you could access.

[09:11:50.0000] <Mek>
and swapping out storage is much weirder than unblocking imho. What happens to open transactions, etc for example.

[09:12:04.0000] <Mek>
Currently it is blocked for almost every storage API

[09:12:15.0000] <Domenic>
I see. https://w3c.github.io/IndexedDB/#dom-idbfactory-open

[09:12:22.0000] <annevk>
Transactions get terminated

[09:12:31.0000] <annevk>
Also a problem if you swap with an empty bucket

[09:12:34.0000] <Domenic>
https://html.spec.whatwg.org/multipage/webstorage.html#storage-object-initialisation-steps

[09:12:37.0000] <annevk>
aka Clear-Site-Data

[09:13:05.0000] <Domenic>
I wonder if we can define "storage is blocked" just by piggybacking off of this infrastructure

[09:13:13.0000] <Mek>
I thought clear-site-data also froze/reloaded pages? But perhaps that was an optional flag.

[09:13:32.0000] <annevk>
Mek: that's an optional flag that Chrome didn't implement and caused a bunch of trouble for Firefox

[09:13:34.0000] <Domenic>
I guess we need to define "storage key" separately from "origin" anyway to help with double-keying... /me goes to re-read annevk's proposal

[09:13:48.0000] <annevk>
Domenic: obtain the key is currently XXX, but yes

[09:14:44.0000] <annevk>
Domenic: Storage asks for an environment and my idea is to get the key from there; currently it assumes you don't invoke it from an opaque origin environment but I should probably flip that around and only returning failure or some such

[09:14:46.0000] <Domenic>
This makes sense

[09:14:54.0000] <Domenic>
I'll comment on the bug

[09:20:58.0000] <annevk>
Domenic: thanks

[09:22:02.0000] <annevk>
I need to think a bit more about sessionStorage / history which are of course weirdly special, but it's probably worth starting with this next week even if I leave those as XXX

[10:02:11.0000] <annevk>
Mek: if nobody does sessionStorage for opaque origins I'd be okay with stopping that

[10:02:18.0000] <annevk>
Mek: although if pushState() still works...

[10:02:29.0000] <Mek>
I have no idea what other browsers do for session storage unfortunately

[10:03:18.0000] <annevk>
Mek: but yeah, at this point I think the best course is that sessionStorage gets its own storage bucket that is session-lifetime-bound somehow

[10:04:14.0000] <Mek>
seems reasonable, yes... session-lifetime-bound, but also copied-on-creating-auxiliary browsing contexts

[10:04:16.0000] <annevk>
Mek: and history.pushState() may or may not be able to use that too, not sure I'll figure all that out for v0 though, but I suspect I might try to poke at things a bit

[10:06:01.0000] <annevk>
Mek: yeah that also needs some work, if the session belongs to the browsing context group the spec might not have to copy

[10:06:52.0000] <annevk>
oh wait, it probably does need to copy because afterward they are independent?

[10:07:00.0000] <Mek>
exactly

[10:07:02.0000] <annevk>
oh well, it's all doable

[10:07:40.0000] <annevk>
but that does suggest it should have a bucket separate from pushState()

[10:07:50.0000] <annevk>
don't want to copy over that data too

[10:08:22.0000] <annevk>
weekend \o/

[10:08:44.0000] <Mek>
definitely excited about better figuring out how session storage should/is behaving

[10:09:36.0000] <Mek>
(third party iframes, and should their storage be copied as well? Unclear in current spec, no idea what other browsers do, chrome does. I.e. a.com embeds b.com. Open a new window of a.com embedding b.com, and the new embedded b.com also gets a copy of the old embedded b.com)

[11:43:16.0000] <smaug____>
mkwst: you might know if https://w3c.github.io/reporting/#send-reports is supposed to happen for workers too?

[11:43:27.0000] <smaug____>
the text hints that it should not

[11:43:46.0000] <smaug____>
but the API is exposed to the workers too

[12:25:27.0000] <annevk>
smaug____: it should, baku filed an issue I think

[12:26:13.0000] <annevk>
Mek: I guess that makes sense, but would indeed be good to define it exactly

[12:26:55.0000] <smaug____>
annevk: ok, thanks. I just asked baku to file an issue, but I guess he did that already :)


2020-04-18
[12:06:58.0000] <Soni>
so uh what do I need to make this work https://github.com/creationix/js-git/issues/145

[12:39:30.0000] <Soni>
seriously tho why's it giving me an empty response even with no-cors

[12:43:34.0000] <Soni>
how do I get this to work

[13:09:14.0000] <andreubotella>
I believe no-cors simply makes the browser reject any requests that aren't same-origin (aka for which you wouldn't need cors in the first place).


2020-04-20
[07:53:36.0000] <innovati>
What's the story about HTML's support for <![CDATA[cdata sections]]> and <?processsing-instruction?>?

[07:53:55.0000] <innovati>
In Chrome they parse as <!--[CDATA[cdata sections]]--> and <!--?processsing-instruction?-->

[07:54:21.0000] <innovati>
Is their parsing in HTML to allow parsing them inside embedded XML documents only?

[08:04:31.0000] <Domenic>
innovati: https://html.spec.whatwg.org/multipage/syntax.html#cdata-sections might help.

[08:04:46.0000] <Domenic>
Outside of foreign content they are "bogus comments", I believe. I.e. they are similar to <!anything else>

[08:06:31.0000] <innovati>
interesting it seems <!a> and <?a> parse as <!--a--> and <!--?a-->

[08:07:00.0000] <innovati>
does the spec talk about bogus comments, or is this just something browsers do?

[08:07:33.0000] <innovati>
(I'm writing XML, and HTML templating functions, and functions that process DOM nodes so I have to write tests and I'm realizing gaps in my own understanding :D )

[08:14:59.0000] <andreubotella>
The parsing algorithm describes in full detail all aspects of parsing, including such "bogus comments".

[08:16:55.0000] <andreubotella>
though in many particular occasions, an HTML parser is allowed to give up and reject the input when it's invalid

[08:17:01.0000] <andreubotella>
not sure if in the case of bogus comments

[08:18:12.0000] <andreubotella>
although browsers are not exempted from giving up like that, no major browser does

[08:30:10.0000] <innovati>
ah found this https://html.spec.whatwg.org/multipage/parsing.html#parse-error-unexpected-question-mark-instead-of-tag-name

[08:30:44.0000] <innovati>
and in this section it seems to cover the <!-- and <! style comments, I think that's what you were just talking about? https://html.spec.whatwg.org/multipage/parsing.html#comment-start-state

[08:31:08.0000] <innovati>
Thanks Domenic && andreubotella <3

[08:31:26.0000] <andreubotella>
that's right

[08:31:41.0000] <andreubotella>
np

[08:32:40.0000] <andreubotella>
the CDATA and <!a> cases are covered in the markup declaration state

[08:32:55.0000] <andreubotella>
*markup declaration open

[08:34:45.0000] <innovati>
it's pretty beautiful in practice how resilient HTML is

[08:36:18.0000] <Domenic>
annevk: edgarchen: Web IDL reviews this week? :)

[09:16:48.0000] <annevk>
Domenic: it's very annoying that you cannot accept commit suggestions on whatwg/html; I guess the file is too big or some such?

[09:17:02.0000] <Domenic>
Ah, yeah, that makes sense

[10:00:48.0000] <annevk>
Domenic: I did one and pinged Edgar for the other

[10:20:58.0000] <Domenic>
annevk: so should we merge all the extended attribute renames, you think?

[10:25:54.0000] <Domenic>
annevk: I'm gonna do it

[10:29:53.0000] <annevk>
Domenic: the one remaining concern I had was tooling/impl interest; I can say Fx will get to it eventually

[10:30:23.0000] <Domenic>
Hmm fair

[10:30:29.0000] <Domenic>
I checked the tooling and they're pretty much OK

[10:37:30.0000] <Domenic>
Ugh the Bikeshed service is broken? https://github.com/tabatkins/bikeshed/issues/1649

[11:28:40.0000] <bkardell>
Domenic: can you help me figure out how I can move https://github.com/whatwg/html/pull/5248 properly?  To recap: We suggested changing the interface name first because all of the things follow, but that didn't fly because it wasn't observeable directly by itself until mathml does something in implementations - it does in 2 browsers now mostly agree to what those things are... you suggested the special link/tabindex bit,

[11:28:40.0000] <bkardell>
we took some time and I thought sorted that out, wrote the tests and stuff but then webkit doesn't want to do that in this pull.  It seems to me that another pull would depend on a lesser pull first else there isn't even a tabIndex... Unsure how to move this forward

[11:29:13.0000] <Domenic>
bkardell: I don't see why a tabindex PR would depend on that PR

[11:29:38.0000] <bkardell>
ok then :)

[11:30:07.0000] <bkardell>
I mean, I assumed because nothing specified it should even have a tabindex until you route through all the things, but ok.. .I'm good with that, will send a separate one

[11:32:53.0000] <Domenic>
We might delay merging until they can be merged at the same time, but it seems worthwhile having a separate PR for that separate change.

[12:10:15.0000] <annevk>
This situation is a bit confusing also with ARIA adding to this potentially

[12:10:48.0000] <annevk>
No good suggestions though; I support the high bar

[12:11:06.0000] <annevk>
Or consistent bar, if you will

[13:31:44.0000] <Domenic>
annevk or others: do you know if Gecko is working on out of process iframes?

[13:34:16.0000] <jgraham>
Yes

[13:34:47.0000] <jgraham>
https://wiki.mozilla.org/Project_Fission

[13:35:06.0000] <jgraham>
Unless you mean out of process same origin, in which case I don't know

[13:44:53.0000] <Domenic>
Nah, cross-origin

[13:45:01.0000] <Domenic>
Thanks; I thought Fission was just for tabs, not iframes


2020-04-21
[22:56:06.0000] <annevk>
Domenic: we should discuss https://github.com/heycam/webidl/pull/357. I suspect implementation-wise this is now different in that Firefox is the outlier?

[05:31:51.0000] <annevk>
https://github.com/whatwg/html/pull/5476 was a trip

[06:03:52.0000] <Domenic>
annevk: regarding the toStringTag PR, I don't have a Safari computer to test with... maybe I'll write up some web platform tests and see what happens on the CI

[06:05:18.0000] <Domenic>
Mainly, the PR tries to align with the ES spec model (toStringTag on the prototype; no magic ES5-era overriding of Object.prototype.toString). Chrome almost matched that, but not 100%, so bz was reluctant to accept the spec patch if it matched zero browsers. Very fair. Thankfully TimothyGu has a patch out to fix the Chrome bug that seems within days of landing.

[06:05:41.0000] <Domenic>
I suspect after that we will have 3 different behaviors in 3 different browsers, but the Chrome one matches the ES spec model, so I would still push for it.

[06:05:45.0000] <annevk>
Domenic: ah, I get [object Blob], [object BlobPrototype] so we should check with cdumez prolly

[06:06:12.0000] <Domenic>
Yeah, and I suspect they do that via magic ES5-era overriding of Object.prototype.toString.

[06:06:57.0000] <Domenic>
I'll write up a more comprehensive WPT suite this afternoon and then write a status update on the bug.

[06:07:51.0000] <annevk>
Domenic: no rush from my side btw

[06:08:13.0000] <Domenic>
Eh, I'd love to get this finally fixed. TimothyGu's Chrome change was going to make me try for another push anyway.

[06:48:35.0000] <Domenic>
Anyone aware of WebKit work for out of process iframes?

[06:52:22.0000] <annevk>
I think their plan is to improve low-level sandboxing first as per https://trac.webkit.org/wiki/WebKitGoalsfor2020 and then work on that at some future point

[06:53:42.0000] <annevk>
That information is from November, so might have changed

[06:55:25.0000] <Domenic>
Interesting

[07:31:53.0000] <annevk>
littledan: heya, are you still involved with Wasm? I have a question about WebAssembly.Memory

[07:32:56.0000] <littledan>
annevk: I'm happy to see if I can help, but ms2ger is our main Wasm/JS API spec person at the moment

[07:35:01.0000] <annevk>
I wish he were here

[07:35:25.0000] <annevk>
littledan: so the shared: false variant throws when being serialized despite it being equivalent to a fancy AB

[07:35:32.0000] <annevk>
littledan: I guess it's reasonable, but also a lil weird

[07:36:07.0000] <annevk>
/me was gonna write the non-shared: true variant ü§¶üèª‚Äç‚ôÇÔ∏è

[07:36:37.0000] <littledan>
hmm, I think I wrote that spec text; lemme dig up the thread

[07:38:15.0000] <littledan>
oh, I didn't; this must've come in more recently as part of the threading proposal

[07:39:12.0000] <littledan>
annevk: which spec are you looking at?

[07:39:17.0000] <littledan>
or is this from testing Firefox?

[07:39:21.0000] <annevk>
littledan: browsers :-)

[07:40:35.0000] <annevk>
Curious how Chrome says #<Memory> could not be cloned.

[07:41:01.0000] <annevk>
Although Firefox is less helpful here with just "object"

[07:43:53.0000] <littledan>
annevk: So, you're wondering why Memory isn't transferrable

[07:43:55.0000] <littledan>
?

[07:44:12.0000] <littledan>
presumably you're putting this ArrayBuffer in the transfer list

[07:45:43.0000] <littledan>
You can see the serialization specification here: https://github.com/WebAssembly/threads/blob/master/document/web-api/index.bs#L146

[07:45:54.0000] <littledan>
(unfortunately i can't find a rendered version)

[07:47:16.0000] <annevk>
littledan: no, should I? I was only playing with passing instances directly to postMessage

[07:47:16.0000] <annevk>
Yeah okay, I'm hitting step 1 there

[07:47:47.0000] <littledan>
well, I think this is in parallel with TypedArrays then, isn't it?

[07:48:30.0000] <annevk>
well

[07:48:30.0000] <annevk>
for AB and SAB this works

[07:48:30.0000] <annevk>
so Memory is not in sync in that AB-Memory throws

[07:48:51.0000] <littledan>
Oh I see

[07:49:36.0000] <annevk>
I can file an issue on threads to see what people think

[07:49:52.0000] <littledan>
yeah, that's a good idea, I don't know offhand, sorry

[07:55:52.0000] <annevk>
https://github.com/WebAssembly/threads/issues/160

[07:57:06.0000] <Ms2ger>
annevk, you called?

[07:58:01.0000] <annevk>
Ms2ger: https://github.com/WebAssembly/threads/issues/160 üôÇ

[07:58:01.0000] <annevk>
Ms2ger: wb

[07:58:15.0000] <annevk>
Ms2ger: also, I have some WPTs waiting on you :p

[07:58:27.0000] <Ms2ger>
Can we try turning the restriction to registered nicknames off again?

[08:00:35.0000] <annevk>
Ms2ger: you're not registered? We could try, but I don't really know the syntax

[08:01:07.0000] <Ms2ger>
I am, but my client tries to join before the identification goes through, and I tend to forget to join manually

[08:01:52.0000] <Ms2ger>
Let's see if that sticks

[08:06:18.0000] <Ms2ger>
annevk, this spec text makes no sense at all; it seems to forbid cloning of **not** shared memories

[08:07:19.0000] <Ms2ger>
Oh wait

[08:07:24.0000] <annevk>
Ms2ger: it's reasonable in a way, if they didn't see value in that

[08:07:28.0000] <Ms2ger>
I'm confusing Module and Memory again

[08:07:43.0000] <annevk>
Yeah, I've been there, a lot

[08:22:09.0000] <Ms2ger>
I found the decision \o/

[08:40:21.0000] <annevk>
ta!

[08:43:10.0000] <Ms2ger>
Anyone else having trouble with github?

[08:43:22.0000] <Ms2ger>
Failing to push, pink unicorns, plain 500 errors

[08:43:26.0000] <annevk>
Ms2ger: yeah


2020-04-22
[22:32:39.0000] <annevk>
Anyone awake that can rubberstamp https://github.com/whatwg/meta/pull/167?

[00:06:13.0000] <annevk>
On the one hand, I kinda hope nobody writes nested data URL dedicated workers, but on the other hand, I kinda want to test it does the right thing now...

[03:38:28.0000] <annevk>
Domenic: question about [[Class]], doesn't [[PlatformBrand]] or whatever we ended up calling it not also give that? Or is it different for prototype objects?

[03:39:14.0000] <annevk>
(more of a curiosity; I'm personally on train Chromium with respect to this issue)

[04:25:11.0000] <annevk>
thanks MikeSmith!

[05:28:38.0000] <MikeSmith>
annevk: cheers

[06:23:38.0000] <Domenic>
annevk: in ES5 Object.prototype.toString was defined to return "object [[Class]]", so changing [[Class]] would magically (i.e. non-user-hookably) affect Object.prototype.toString output. We have no such connection with [[PlatformBrand]].

[06:24:46.0000] <annevk>
Domenic: oooh, they all use Object.prototype.toString(), I see

[06:54:30.0000] <bopandrade>
qq: are https://dom.spec.whatwg.org/ going to be immutable? (specifically https://dom.spec.whatwg.org/#dom-node-contains)

[06:54:36.0000] <bopandrade>
im wondering if i need a revision link or something

[06:54:53.0000] <bopandrade>
are [...] links going to be [...]

[06:57:52.0000] <Domenic>
bopandrade: https://whatwg.org/working-mode#anchors

[07:01:47.0000] <bopandrade>
great, will use https://dom.spec.whatwg.org/commit-snapshots/543b7e33487be5e733b0a715eaf71d027e354a50/#interface-node in addition to the living standard one. thanks!

[07:02:05.0000] <bopandrade>
i mean, i linked the wrong anchor but you get the point

[07:08:15.0000] <MikeSmith>
has there been any discussion of moving the "part" attribute and "exportparts" attributes into the HTML spec?

[07:08:42.0000] <MikeSmith>
from https://drafts.csswg.org/css-shadow-parts/#part-attr and https://drafts.csswg.org/css-shadow-parts/#exportparts-attr

[07:10:20.0000] <MikeSmith>
https://wiki.developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/part#Browser_compatibility shows that "part" at least is already shipped both in Firefox and Chrome

[07:11:52.0000] <MikeSmith>
in general about new attributes defined in other specs, we don‚Äôt seem to be following any kind of consistent process of identifying them and deciding if/when to move them into HTML

[07:13:09.0000] <MikeSmith>
we instead seem to be defaulting to just expecting editors of other specs to take some action at some point

[07:15:05.0000] <Domenic>
We should do that...

[07:15:15.0000] <Domenic>
But I'm still bitter about adding reflection for the attributes being blocked

[07:15:20.0000] <Domenic>
(by Apple)

[07:15:37.0000] <Domenic>
It would feel very incomplete to add the attribute to HTML with no reflection support

[07:24:45.0000] <Domenic>
I guess this might be split across DOM and HTML similar to https://html.spec.whatwg.org/multipage/dom.html#classes

[07:40:05.0000] <annevk>
The objection was to string reflection, right? Perhaps we should let rniwa know about srcset; I wonder if that changes things

[07:40:41.0000] <annevk>
Alternatively, perhaps there is a thing we could use? Not entirely clear given the weirdish data model though

[07:42:08.0000] <Domenic>
We've let him know about srcset

[07:42:19.0000] <Domenic>
There is no thing we could use; the data model is new

[07:43:05.0000] <Domenic>
I argued repeatedly for adding string reflection and then, if Apple wants to spec and implement something new, they can. (Like class + classList.) But he said having any string reflection at all wasn't acceptable. So without a second implementer supporting string reflection we're stuck.

[07:55:52.0000] <annevk>
Ms2ger: turns out I made a mistake in that wasm PR, gonna PR soonish

[08:13:53.0000] <annevk>
Ms2ger: https://github.com/web-platform-tests/wpt/pull/23172

[08:16:22.0000] <Ms2ger>
ta

[13:16:31.0000] <annevk>
Domenic: did you see Maciej's comment about Workstreams?

[13:16:46.0000] <annevk>
Domenic: the easiest way to do compact is with <p>s, but ...

[13:35:07.0000] <Domenic>
annevk: doesn't seem that hard to just decrease a few margins?

[13:41:36.0000] <annevk>
Domenic: isn‚Äôt the main thing all the additional ‚Äúnewlines‚Äù?

[13:42:24.0000] <Domenic>
Oh, I didn't catch that. I guess I will stare at the two side by side more.

[13:42:44.0000] <Domenic>
dls are easy to style now though if you use div wrappers

[13:45:43.0000] <annevk>
If you want to take that on that‚Äôd be great, but I suppose I can take a look tomorrow. I was hoping this would be over

[14:02:03.0000] <Domenic>
Yeah, those seemed like really strange things to hold up the work over...


2020-04-23
[17:07:55.0000] <MikeSmith>
to anybody bored and looking for some entertainment, I recommend looking at the source of https://www.chromium.org/Home/loading/oor-cors

[17:08:30.0000] <MikeSmith>
e.g., there‚Äôs not a single h1-h6 in the whole document

[17:08:43.0000] <MikeSmith>
instead, the headings are marked up like this:

[17:09:03.0000] <MikeSmith>
<div><b style="background-color:transparent;font-size:10pt"><font size="4"><br /></font></b></div><div><b style="background-color:transparent;font-size:10pt"><font size="4">Troubleshooting</font></b></div>

[17:09:19.0000] <MikeSmith>
who does that?

[17:10:04.0000] <MikeSmith>
I went in there just trying to find the anchor for that heading, and that found.. that

[17:11:42.0000] <MikeSmith>
also the entire document is one giant layout <table>

[17:12:49.0000] <MikeSmith>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">

[17:14:30.0000] <MikeSmith>
I guess "jotspot" is some Google-internal tool or something?

[17:15:52.0000] <MikeSmith>
hmm, or "Google Sites" I guess https://en.wikipedia.org/wiki/Google_Sites

[17:20:02.0000] <MikeSmith>
anyway, Out of Renderer CORS is gonna make it significantly for web developers to troubleshoot CORS problems ‚Äî and it was already very difficult for an normal web developer anyway

[17:20:28.0000] <MikeSmith>
*significantly more difficult for web developers

[17:21:07.0000] <MikeSmith>
specifically, this stuff:

[17:21:09.0000] <MikeSmith>
> CORS releated detailed network transaction can not be observed via DevTools' Network tab. You need to take a NetLog dump for further investigation. You can use netlogchk.html to analyze the obtained NetLog dump to see if there is CORS related error. NetLog Viewer is general purpose online tools to check details on the dump.

[17:27:32.0000] <MikeSmith>
doing a NetLog dump is a way to report possible bugs in the browser, not a way for web developers to try to troubleshoot their own application code

[20:49:36.0000] <annevk>
They can use Firefox ü¶ä

[21:08:40.0000] <MikeSmith>
annevk: yeah I guess that what we need to starting recommending and documenting

[21:09:04.0000] <MikeSmith>
I will add something to MDN about it

[21:10:50.0000] <MikeSmith>
though I‚Äôd also the Chrome developer advocacy team would be doing a lot more outreach to developers about this

[21:11:05.0000] <MikeSmith>
*I‚Äôd also hope

[02:46:09.0000] <MikeSmith>
TabAtkins: next time I contribute a Bikeshed patch I‚Äôll write tests.. https://github.com/tabatkins/bikeshed/issues/1646#issuecomment-617288206

[03:15:21.0000] <annevk>
I'm very glad Bikeshed has a bunch of tests now, it used to break down every other week

[03:20:05.0000] <MikeSmith>
in this case pretty much exactly the regression I was worried my change might cause, it did actually cause

[03:20:47.0000] <MikeSmith>
in hindsight I don‚Äôt understand now why I didn‚Äôt at least manually check to see if it had happened

[06:16:28.0000] <annevk>
Is GitHub doing a thing again?

[06:16:45.0000] <annevk>
GitHub Status always claims things are fine when I observe them not to be somehow

[06:32:13.0000] <annevk>
Ah it caught up

[09:09:37.0000] <annevk>
Domenic: so I learned something from hober today, there's a .github repository thing

[09:10:27.0000] <annevk>
Domenic: although given we also have many non-spec repos maybe it doesn't change our lives and spec-factory is still the way to go

[09:11:57.0000] <Domenic>
Hmm yeah

[09:13:45.0000] <annevk>
we could add CODE_OF_CONDUCT.md there but it's still not entirely clear to me what that file buys us beyond a checkmark somewhere as we already include it in the readmes

[09:21:32.0000] <Domenic>
It could make the readmes a bit less boilerplate-ey/more useful. And GitHub does include some UI indicators for it.

[09:21:39.0000] <Domenic>
https://usercontent.irccloud-cdn.com/file/sNIbIMXQ/coc.png

[09:22:06.0000] <Domenic>
https://usercontent.irccloud-cdn.com/file/obQFyFlh/coc2.png

[09:25:02.0000] <annevk>
I'll file a whatwg/meta issue to keep track of this

[09:27:04.0000] <annevk>
https://github.com/whatwg/meta/issues/168

[09:39:56.0000] <annevk>
oh my, db.json might become real real soon now

[09:57:14.0000] <annevk>
Domenic: if you could confirm the service worker bump I'll take care of the remainder for db.json, prolly tomorrow

[09:57:53.0000] <Domenic>
annevk: confirmed. I tried to earlier but GitHub was 500ing.

[09:58:30.0000] <annevk>
oh still? geez

[09:58:31.0000] <Domenic>
It's kind of optional; if you don't do it then people get normal dl styling

[10:00:36.0000] <annevk>
That might include most of the SG though :-p

[11:58:00.0000] <Domenic>
annevk: CORS error with logo at https://whatwg.org/workstreams, hrm

[11:58:31.0000] <Domenic>
Maybe Firefox bug

[11:58:52.0000] <Domenic>
Yeah, probably image cache + link favicon + crossorigin are not playing well together...

[11:59:49.0000] <Domenic>
Happening on https://whatwg.org/ as well, weird...

[12:57:27.0000] <annevk>
Domenic: yeah I added specific steps to repro to a Fx bug earlier today

[12:57:40.0000] <Domenic>
Oh awesome. Link or CC me?

[12:58:48.0000] <annevk>
Domenic: https://bugzilla.mozilla.org/show_bug.cgi?id=1551557 and https://github.com/whatwg/whatwg.org/issues/253

[13:00:19.0000] <Domenic>
Awesome, I used my 10th out of 1000 Bugzilla votes.

[13:03:48.0000] <annevk>
üòäüëçüèª

[14:03:44.0000] <shu>
lol BMO votes

[14:49:50.0000] <Domenic>
I'm looking at https://github.com/whatwg/html/issues/4711 for fun and I can't even figure out what the different sections of the diagram in https://html.spec.whatwg.org/multipage/introduction.html#abstract are supposed to represent

[14:50:00.0000] <Domenic>
Like maybe it makes sense that the stuff on the bottom is on the bottom

[14:50:22.0000] <Domenic>
But like, why is JPEG and Geo and Fetch "next to" HTML?

[14:50:40.0000] <Domenic>
Why are SVG and MathML "on top of" HTML?

[14:51:41.0000] <Domenic>
And is "MQ" supposed to be "Media Queries"?

[15:00:48.0000] <MikeSmith>
Domenic: also, the actual photo part of that image has never really conveyed what it was intended for

[15:01:04.0000] <Domenic>
I mean, I'm OK with it being a bit opaque

[15:01:12.0000] <Domenic>
That whole section is kind of jokey

[15:01:21.0000] <MikeSmith>
well the ‚Äúkitchen sink‚Äù metaphor is about a sink being overfilled with dishes

[15:01:31.0000] <MikeSmith>
but that sink is completely empty

[15:01:36.0000] <Domenic>
Hmm I never knew that

[15:02:09.0000] <Domenic>
https://idioms.thefreedictionary.com/everything+but+the+kitchen+sink

[15:02:47.0000] <MikeSmith>
hmm ok

[15:02:57.0000] <MikeSmith>
I guess I got it wrong

[15:04:08.0000] <MikeSmith>
anyway, we could use a better image

[15:04:29.0000] <MikeSmith>
maybe worth an issue with a ‚Äúgood first issue‚Äù label

[15:05:06.0000] <MikeSmith>
a good visual artist could make something that‚Äôs a better ft

[15:05:09.0000] <MikeSmith>
*fit

[15:17:55.0000] <Domenic>
In internal chat someone suggested https://target.scene7.com/is/image/Target/GUEST_e7c04f24-23f7-412d-9fbb-d205872c197e?wid=488&hei=488&fmt=pjpeg


2020-04-24
[21:03:21.0000] <annevk>
Domenic: I don‚Äôt think there is logic to where things are listed in that image

[23:02:18.0000] <MikeSmith>
Domenic: http://web.archive.org/web/20160411100303/http://w3c.html5-tag.de/W3CTag2012/images/html5-car.jpg

[23:06:26.0000] <MikeSmith>
https://html5-tag.ict-media.de/the-html5-car/

[23:07:03.0000] <MikeSmith>
>

[23:07:05.0000] <MikeSmith>
The HTML car is consists of 2 parts: a Formula 1 racing car nose and a Ford T tail symbolizing the mix of advanced features and APIs and the often somewhat  odd constructs inherited from previous HTML versions and browsers. Stickers visualize examples for both as there are e.g.:     CSS3, Javascript, SVG, canvas and video elements, access to the engine via an RJ45 (Web) socket, IE6 and older HTML

[23:07:11.0000] <MikeSmith>
versions as part of heritage, WHATWG sticker on the on the drive axle, and W3C tires on the rim. Web workers are represented by a bike on the backseat.

[23:13:18.0000] <annevk>
o_O

[23:34:36.0000] <MikeSmith>
heh yeah

[23:36:05.0000] <MikeSmith>
anyway, given that https://html.spec.whatwg.org/multipage/introduction.html#abstract image is basically the very first thing that anybody reading the spec introduction is gonna see, it would seem to be good to have something better there

[03:35:15.0000] <Ms2ger>
Who knows things about incumbent/... globals besides bz?

[03:47:23.0000] <annevk>
Domenic!

[03:47:53.0000] <annevk>
The HTML Standard also has many helpful examples thanks to him

[04:47:38.0000] <Ms2ger>
Domenic, I wonder if https://webassembly.github.io/spec/js-api/#run-a-host-function (which creates a wasm function that calls a given js function) needs to have the various setup boilerplate

[05:49:10.0000] <Ms2ger>
EAccessViolation exception: Access violation

[05:49:10.0000] <Ms2ger>
Backtrace:

[05:49:10.0000] <Ms2ger>
  $000000000048F96A

[05:49:10.0000] <Ms2ger>
  $0000000000401DE4

[05:49:32.0000] <Ms2ger>
That's a first (building the html spec)

[07:09:35.0000] <Domenic>
Ms2ger: oh yeah, definitely needs the setup/teardown stuff.

[07:10:07.0000] <Ms2ger>
Could you file, please?

[07:17:23.0000] <annevk>
So the way "session" storage buckets should work is that they are hold alive by browsing session (to be introduced by https://github.com/whatwg/html/issues/5350) I think. And the sessionStorage "session" storage bucket will get copied when a popup is created. So their mechanics can be more or less identical.

[07:18:32.0000] <annevk>
Also, it seems we had already confirmed somewhere that sessionStorage should not be available in opaque origins. It's a good first issue against the HTML Standard.

[07:18:52.0000] <annevk>
Unfortunately I found that after I confirmed it (again) myself.

[07:20:34.0000] <annevk>
Beyond this I haven't really been able to make progress on storage this week, apart from the more high-level write-up at https://github.com/privacycg/storage-partitioning/pull/1 to get everyone aligned on goals.

[07:20:46.0000] <annevk>
Mek: (perhaps of cursory interest) ^^

[08:23:46.0000] <annevk>
Domenic: if it helps, HTML depends on URL, which has https://url.spec.whatwg.org/#url-writing

[08:24:10.0000] <annevk>
Domenic: HTML adding a bunch of schemes that conflict with that seems bad to me

[08:24:45.0000] <Domenic>
annevk: are you saying that "asdf1234" was a bad example and I should have used "asdfwasd"?

[08:25:10.0000] <annevk>
Domenic: no, see the sentence on schemes there and what it references

[08:25:26.0000] <Domenic>
Oh I see. Interesting.

[08:45:28.0000] <jgraham>
Is a change of fragement supposed to constitute a load for the purposes of CSP? Specifically I have a test here that loads an iframe to $URL#0 then adds a meta element with some CSP rules and then checks for a securitypolicyviolation event when it naviagtes the iframe to $URL#1

[08:48:50.0000] <annevk>
jgraham: maybe, not sure where navigation calls CSP

[08:49:12.0000] <TabAtkins>
MikeSmith: That website is *haunting*

[09:10:00.0000] <annevk>
jgraham: CSP has a number of known issues btw so filing a spec issue is a valid out imo

[10:25:35.0000] <jgraham>
annevk: I'll look a bit later; mostly want this test to not timeout :)

[10:33:07.0000] <annevk>
Surprising how simple imperative assignment turns out to be

[15:32:16.0000] <lexer>
Hi there, maybe it's the wrong time of day to poke in asking, but is there anyone familiar with the URL spec able to explain a bit of the background, and in particular why it's written the way it is rather than providing a grammar and writing semantics on top? I filed an issue about it on github and then realized I was misunderstanding the way the

[15:32:16.0000] <lexer>
doc is written.

[15:33:26.0000] <lexer>
All I wanted to know is whether a scheme-less URL can be valid (which it clearly can't under STD 66) to ensure some documentation is accurate and according to your spec... I can't tell.

[15:37:03.0000] <lexer>
In particular, why is there so much weight put on the parser (splitting on special schemes and, apparently from my searching, causing breaking changes when that list of special schemes changes) rather than letting those be post-processing steps?

[15:37:31.0000] <lexer>
(I'm on webchat on a laptop, so I'll disconnect before I get a reply, likely; I'll check the logs to see what people say and pop back in, though)

[15:40:33.0000] <lexer>
Also, are there any plans to actually get STD 66 marked as obsoleted? Because one would be forgiven for referring to it today.

[16:10:22.0000] <TabAtkins>
Ugh, they already disappeared


2020-04-25
[21:10:31.0000] <annevk>
https://github.com/tc39/proposal-wavy-dot seems fun: fetch(url)~.json() iiuc


2020-04-27
[05:21:52.0000] <Ms2ger>
annevk, I'm trying to spec the suggestion in https://github.com/whatwg/html/pull/4571#discussion_r373270764 but it seems like the "runnable" check in step 2 of https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model will break the latter case

[05:21:54.0000] <Ms2ger>
Thoughts?

[05:27:09.0000] <annevk>
Ms2ger: not really, I see bz left a number of comments there that appear unaddressed as well

[05:28:58.0000] <Ms2ger>
Like what? Entry globals are defined, incumbent is explicitly marked as no consensus, and everything else is about dealing with documents that are not "fully active", afaict

[05:29:54.0000] <annevk>
Ms2ger: about confirming what is implemented

[07:20:10.0000] <annevk>
JakeA: https://github.com/whatwg/html/issues/5484#issuecomment-620015579 I don't see how this works given that discarding is currently synchronous, involves script execution, etc.

[07:20:23.0000] <annevk>
JakeA: websites will rely on that

[07:20:40.0000] <annevk>
JakeA: and engines do too

[07:22:09.0000] <JakeA>
annevk: fwiw, I was thinking about this more for <portal>, so there wouldn't be a backwards compatibility issue there. I suppose there could be <iframe keepalive> or something

[07:22:54.0000] <annevk>
JakeA: well, it depends on how much logic from frames is reused internally

[07:23:10.0000] <annevk>
JakeA: I'm guessing <portal> doesn't define browsing context et al from scratch

[07:23:32.0000] <annevk>
JakeA: but removal is much more involved than that

[07:24:12.0000] <JakeA>
annevk: I haven't thought too much about this, but my feeling is iframe & portal should extend something common, in the way audio & video have a common ancestor

[07:24:17.0000] <annevk>
JakeA: as Ryosuke noted multiple elements can be removed at once, script will execute (ideally from a queue as discussed in the various linked PRs)

[07:24:48.0000] <JakeA>
annevk: what kind of script are we talking about here? Unload?

[07:25:31.0000] <annevk>
Yeah, though I'm not sure if that's the full extent of things; again, the status quo is not defined and not interoperable

[07:25:57.0000] <annevk>
First it has to be defined before you can realistically make a change here as otherwise too much will be unclear

[07:26:27.0000] <annevk>
I recommend reading the issue I linked and perhaps encourage people on Chrome to help solve it as thus far it's been somewhat tricky to get interest from browsers

[07:31:14.0000] <JakeA>
Yeah, I'm reading through it, the script execution bit just wasn't clear to me

[07:33:16.0000] <annevk>
I think the basic problem is also clear without that, in that you remove the iframe, but it still has a browsing context and so a bunch of things that branch on that break down because it has a browsing context but it's not in the tree, etc.

[07:33:45.0000] <annevk>
The only way to get rid of that is by having an atomic move operation

[07:34:15.0000] <annevk>
And even then it might be tricky given rniwa's comments, though I'm not sure to what extent those things still apply with atomic move

[07:34:55.0000] <annevk>
It's kind of hard to imagine they do, but who knows

[07:35:34.0000] <JakeA>
I'll need to dig into the issues more. Bfcache pages seem to survive going away & coming back, so it feels like there's some kind of mechanism.

[07:36:48.0000] <annevk>
JakeA: that's top-level browsing contexts only and I think only those without reference to them

[07:38:08.0000] <annevk>
JakeA: not entirely sure about no reference though, that'd be good to confirm

[07:38:25.0000] <JakeA>
seems likely tbh

[07:39:24.0000] <JakeA>
Any idea which APIs rely on their nested browsing context's iframe being connected? Or, an example of one

[07:41:03.0000] <annevk>
Also that too is undefined

[07:41:21.0000] <annevk>
Gotta stop with swamp-based designs

[07:42:27.0000] <annevk>
JakeA: maybe search for discard? There‚Äôs a bunch I wrote tests for a while back, but I don‚Äôt recall offhand

[07:42:54.0000] <JakeA>
In wpt, or html issues?

[07:42:57.0000] <annevk>
That too = bfcache

[07:43:30.0000] <annevk>
In HTML itself; things like .parent or .frameElement iirc

[07:47:37.0000] <JakeA>
From a quick scan, `.parent` relies on getting the iframe's document, which should still be correct. But yeah, I'm sure there's stuff that doesn't work.

[08:35:26.0000] <Ms2ger>
MikeSmith, I noticed that https://www.w3.org/TR/dom/ redirects to dom.s.w.o, but https://www.w3.org/TR/domcore/ doesn't. Is that intentional?

[11:32:36.0000] <Domenic>
TabAtkins: is https://github.com/tabatkins/highlighter/ Python3 friendly?

[11:32:51.0000] <TabAtkins>
Ooh, good question. Probably not, but I'm happy to update.

[11:34:01.0000] <Domenic>
That'd be nice; we've got some html-build issues

[11:34:32.0000] <TabAtkins>
np, i'll see if i can work on that today


2020-04-28
[21:51:09.0000] <MikeSmith>
botie: inform Ms2ger https://www.w3.org/TR/domcore/ now redirects; thanks for catching that

[21:51:09.0000] <botie>
will do


2020-04-29
[20:09:18.0000] <domfarolino>
Per spec, can an async script execute in between the time when a pending parsing-blocking script is "prepared", and when it is executed?

[20:10:05.0000] <domfarolino>
I'm not sure if the behavior asserted by https://github.com/web-platform-tests/wpt/blob/master/html/semantics/scripting-1/the-script-element/script-text-modifications.html is mandated by spec

[20:36:40.0000] <annevk>
domfarolino: that looks wrong to me, but what do browsers do?

[20:37:50.0000] <domfarolino>
annevk: Looks like that's a chrome-only test https://wpt.fyi/results/html/semantics/scripting-1/the-script-element/script-text-modifications.html?label=master&label=experimental&aligned&q=html%2Fsemantics%2Fscripting-1%2Fthe-script-element

[20:40:17.0000] <annevk>
domfarolino: I‚Äôm pretty sure that‚Äôs wrong per spec. File an issue?

[20:40:25.0000] <domfarolino>
Will do

[04:15:27.0000] <botie>
Ms2ger, at 2020-04-28 04:51 UTC, MikeSmith said: https://www.w3.org/TR/domcore/ now redirects; thanks for catching that

[04:16:03.0000] <Ms2ger>
MikeSmith, thanks!

[12:09:24.0000] <domfarolino>
annevk: Actually I think the test is right

[12:24:29.0000] <domfarolino>
The parser "prepares" a script even while the script-blocking style sheet. Once preparing is complete, the parser runs these "otherwise": https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:pending-parsing-blocking-script. Meanwhile, the async script runs, modifying the script's text, after the classic pending script has already been created with the old source text

[12:48:54.0000] <annevk>
domfarolino: isn‚Äôt async excluded from being a blocking script?

[12:50:19.0000] <domfarolino>
annevk: blocking what? The test I guess relies on the async script executing before the pending parsing-blocking script

[12:54:20.0000] <annevk>
domfarolino: that expectation makes lil sense to me

[12:55:51.0000] <domfarolino>
annevk: Yeah I guess there's nothing mandating that really. I think we could change the test to set the pending parsing script's innerText not via an async script, but via setTimeout from the previous pending parsing-blocking script

[12:56:08.0000] <domfarolino>
That way it's testing what it needs to test, and not that + async script scheduling


2020-04-30
[01:03:20.0000] <annevk>
Ms2ger: littledan: I'd like to ask about BigInt (again). Do we have implementer interest for the web platform parts? Are they blocked on IDL changing?

[01:08:01.0000] <annevk>
Oh, it also seems that IDB doesn't need IDL support to add them. Not sure why that's stalled then.

[02:14:46.0000] <littledan>
annevk: I'm not aware of anything blocked on it right now. However, a member of the TAG pinged us asking if this could land to unblock future things.

[02:16:05.0000] <annevk>
littledan: any idea what future thing that might be? Perhaps get them to comment on the PR directly

[02:16:19.0000] <littledan>
the suggested support for BigInt keys in IDB is stalled because there weren't enough concrete use cases documenting. A few web developers saying "we want this" isn't quite concrete enough to justify the change, it was determined.

[02:18:12.0000] <littledan>
OK, will do

[03:56:46.0000] <mathiasbynens>
what was that DOM API that accepts like 9 parameters of which 5 are booleans?

[03:57:35.0000] <annevk>
mathiasbynens: could be that something in WebGL? Or maybe 2D?

[03:58:07.0000] <annevk>
2D seems to be mostly lots of numbers

[03:59:04.0000] <annevk>
> void ellipse(unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false); (has 8, but only one boolean)

[04:00:15.0000] <mathiasbynens>
oh wow, didn't even know about that one

[04:05:01.0000] <Ms2ger>
I don't see anything in wpt/interfaces

[04:12:14.0000] <MikeSmith>
Ms2ger: thanks again the heads-up about that domcore (non)redirect. Lemme know if you come across any other dom or html TR URLs that aren‚Äôt redirecting yet. At this point the only html and dom TR URLs that aren‚Äôt intentionally redirects yet are the ones with dates in them

[04:13:05.0000] <annevk>
MikeSmith: btw, I've attempted an IANA update for application/x-www-form-urlencoded so someone at the W3C side might be receiving email

[04:13:14.0000] <Ms2ger>
MikeSmith, sounds good - I was actually looking for a dated version

[04:13:18.0000] <annevk>
MikeSmith: now they might try to contact Robin Berjon's email address which will bounce so...

[04:13:35.0000] <Ms2ger>
Not sure how to find those now, actually, now that you fixed that redirect

[04:13:37.0000] <annevk>
At least, I suspect it'll bounce, I don't really know W3C policies

[04:14:23.0000] <MikeSmith>
Ms2ger: yeah hopefully you don‚Äôt find those dated ones unless you already know about them ‚Äî that is the intent at least

[04:14:47.0000] <MikeSmith>
annevk: yeah I saw a related github notification about that IANA update

[04:15:47.0000] <MikeSmith>
the whole IANA media-type registration process is a relic

[04:16:27.0000] <MikeSmith>
those messages basically go to one person‚Äôs e-mail inbox, not publicly archived, no record

[04:19:22.0000] <MikeSmith>
mathiasbynens: speaking of media types, dunno if you saw but I updated https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types and in the body of the article itself, I added links to the IETF doc and the relevant parts of the HTML spec

[04:21:11.0000] <mathiasbynens>
MikeSmith: I did see, thank you :)

[04:21:35.0000] <MikeSmith>
annevk: I complained about the IANA media-type registration process and the person who is responsible for it (and has always been) told me it‚Äôs the way it is bay design ‚Äî specifically it‚Äôs designed to now have any public record

[04:22:08.0000] <annevk>
yeah it's bad

[04:22:20.0000] <annevk>
there's a public issue number now at least, but it's still bad

[04:22:34.0000] <annevk>
it could just be PRs

[05:50:04.0000] <annevk>
littledan: FWIW, I think you're right that we should probably just support BigInt in IDL, even if there are no non-any consumers, but it feels a little weird

[06:31:28.0000] <zcorpan>
Have we discussed changing branch name from "master" to something else like "main" (to get away from possibly slavery-origin terminology, though I don't know if it actually is in this case)?

[06:49:13.0000] <annevk>
zcorpan: it's probably worth discussing again now that there's better support for doing so; I kinda wish this was dealt with upstream in Git itself though as now you get everyone making different decisions

[06:49:28.0000] <annevk>
zcorpan: https://github.com/desktop/desktop/issues/6478 has some precedent

[06:49:45.0000] <annevk>
I guess there's also a fair number of places that use gh-pages

[07:12:22.0000] <littledan>
annevk: Yeah, I can understand that. I think the biggest reason to do it is because other people who might write specs needing BigInt might not know that they're supposed to actually ask for a WebIDL change, and could work around it instead

[07:12:49.0000] <littledan>
so, putting it in the WebIDL spec correctly expresses the intent that it's supported, if anyone needs it

[07:24:30.0000] <annevk>
you'd hope implementers hold those people accountable, but on bad days that might be expecting a bit much

[07:27:29.0000] <littledan>
yeah, the TAG also tries to hold those people accountable; it sounds like they see this as a structural thing that might reduce everyone's load here.

[07:37:17.0000] <Domenic>
mathiasbynens: annevk: it's gotta be one of the init*Event methods. PRobably in UI events...

[07:38:14.0000] <Domenic>
mathiasbynens: annevk: https://w3c.github.io/uievents/#idl-interface-MouseEvent-initializers

[07:38:31.0000] <Ms2ger>
6 booleans, that counts

[07:38:38.0000] <mathiasbynens>
Domenic: that's the one!

[07:39:09.0000] <Ms2ger>
mathiasbynens, you were insufficiently pessimistic, though :)

[07:40:32.0000] <Ms2ger>
Oh, and I didn't find it in wpt because the ui events spec is shit

[07:40:48.0000] <Domenic>
Indeed

[07:40:51.0000] <mathiasbynens>
Ms2ger: after all these years in #whatwg, I still haven't learned

