2018-04-01
[00:19:14.0000] <annevk>
domfarolino: ok, I’ll figure out the syntax to make things happen on Tuesday

[00:19:25.0000] <annevk>
domfarolino: thanks

[03:15:55.0000] <domfarolino>
👍

[07:02:21.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  pqykr: calvaris ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:21.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  rzoejoewlp: igrigorik ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:21.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  flmmox: sarri ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:22.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  uajldr: birtles ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:26.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  diykv: milkii ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:26.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  jucaoijqqj: jihye ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:26.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  lyzay: so ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:27.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  dtbwoaxv: terinjok ▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:31.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  mfazqwkgoi: gnarf ▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:31.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  rbuupgn: hsivonen_ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:31.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  sevmehjo: mkwst ▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:31.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  cyfeomrnd: asuth ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:36.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  gmkjazci: fujihiro ▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:36.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  iwmezbdyxi: deathy ▄▄▄▄▄▄▄▄▄▄▄

[07:02:36.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  ytomtz: tkore ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:36.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  nshzuag: shans_ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:41.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  tkjpfu: boaz ▄▄▄▄▄▄▄▄▄▄

[07:02:41.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  awqgakd: Domenic ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:41.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  gpwrwbb: timdream ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:41.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  rorfb: MassDebates ▄▄▄▄▄▄▄▄▄▄▄

[07:02:46.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  mdwchevy: rwaldron ▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:46.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  vogkw: rwaldron ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:46.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  lafych: e1z0 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:46.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  ooofrpr: ebryn ▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:51.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  pckxpjrqht: dcheng ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:51.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  ninyrwu: Domenic ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:51.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  ltgzo: benjamingr_ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:52.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  bwiokm: enick_811 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:54.0000] <tkore>
oh come on

[07:02:56.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  nnyxrpp: ecobos ▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:56.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  phkzblhn: riddle ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:02:56.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  jgrtclif: mantaroh ▄▄▄▄▄▄▄▄▄▄▄

[07:02:57.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  wyiebe: slightlyoff ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:01.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  dyplpzbls: nunnun ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:01.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  usiahsqxdc: svl ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:01.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  ljzqdg: wcpan ▄▄▄▄▄▄▄▄▄▄

[07:03:02.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  qewgzgqedl: rwaldron ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:06.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  gscsvwbrp: birtles ▄▄▄▄▄▄▄▄▄▄▄

[07:03:06.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  cnticgxt: fujihiro ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:06.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  qspogaetbq: miketaylr ▄▄▄▄▄▄▄▄▄▄

[07:03:07.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  fgewk: refack ▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:11.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  xndvnjira: hayato ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:11.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  kvjywpeci: cwilso ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:11.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  adfyf: Smylers ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:03:11.0000] <ifbizofj>
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ HAPPY APRIL FLOODS DAY BROUGHT TO YOU BY iяс.sцреяиетs.ояg сни sцреявоwl  dvllkhxe: slightlyoff ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

[07:04:28.0000] <benjamingr_>
Thanks Domenic

[07:04:54.0000] <Domenic>
most of the damage was done already I fear...

[07:19:59.0000] <nox>
Domenic: There are bots provided by Freenode for such matters, am currently chatting with mst (one of the ircops here) about it.

[07:20:11.0000] <Domenic>
oh neat

[07:20:15.0000] <nox>
Domenic: 16:19 <mst> get one of the ops to hop into #freenode and ask nicely

[07:20:23.0000] <nox>
(Ask nicely for Sygin, the name of the bot)

[07:20:39.0000] <nox>
Sigyn*

[07:22:16.0000] <nox>
\o/

[11:10:03.0000] <domfarolino>
Domenic: how do you feel about getting rid of NOTES.md altogether from Console

[11:10:39.0000] <Domenic>
domfarolino: I think that's probably a good idea, except maybe for the table() stuff? Although that could move into the spec, since the spec doens't have anything currently

[11:11:13.0000] <Domenic>
I guess it might be nice to have a listing of all bugs filed on the non-uniformities noted there, hrm

[11:11:24.0000] <Domenic>
Since not all of them are testable

[11:13:38.0000] <domfarolino>
True. Yeah either removing NOTES as it is, or repurposing it to mainly be a directory of old impl bugs (with a few notes around non-uniformities) would be good.

[11:15:33.0000] <domfarolino>
Domenic: I'm a little torn on what to do. I mean all the bugs do still exist in the repo somewhere in old spec PRs/bugs, but having them altogether would also be nice too...

[11:15:51.0000] <Domenic>
I think listing bugs is reasonable since you don't have to update them

[11:16:04.0000] <Domenic>
It's the stuff you have to keep updated that's annoying

[11:16:09.0000] <domfarolino>
Right

[11:16:24.0000] <domfarolino>
That sounds good I agree

[11:16:50.0000] <Domenic>
But just being like: ## Untestable output non-uniformities ### Float formatter - bug1 -bug2 -bug3 seems nice

[11:18:07.0000] <domfarolino>
Yeah so for things like manual tests largely?

[11:18:30.0000] <Domenic>
Hmm right I guess we have manual tests

[11:18:47.0000] <Domenic>
Now that seems less important

[11:18:52.0000] <domfarolino>
It seems convenient but a little redundant to do

[11:19:07.0000] <Domenic>
As long as manual tests cover all the same stuff; I haven't checked

[11:20:04.0000] <Domenic>
So yeah maybe going through systematically and checking that bugs have been filed/tests (possibly manual) have been written for everything, and then getting rid of it, makes the most sense

[11:20:28.0000] <domfarolino>
I can do some looking-into for that so we can determine the efficacy of NOTES.md

[11:20:33.0000] <domfarolino>
Cool, sgtm!

[11:20:47.0000] <Domenic>
\o/

[11:20:48.0000] <domfarolino>
Yeah as long as we have everything covered somewhere

[11:20:57.0000] <domfarolino>
(ideally in tests)

[11:22:17.0000] <domfarolino>
Domenic: You're learning Japanese right, how's that going?

[11:23:33.0000] <Domenic>
domfarolino: pretty well! A bit of a long slog, especially with all the kanji, but I think it's paying off; I definitely notice improvements in reading and listening comprehension every time I travel to Japan.

[11:26:33.0000] <domfarolino>
Ah nice! That's really exciting, happy to hear. Yeah, sounds like you're in Japan quite a bit!

[11:40:44.0000] <Domenic>
Some great Chrome teams there makes it easy to visit :)


2018-04-02
[23:19:19.0000] <MikeSmith>
annevk: I’m working on implementing a document-headings builder based on the spec text in the PR #3499 patch, and one difference I’ve noticed is that unlike the old outline algorithm, it doesn’t seem to take into account whether any ancestors of a heading have a `hidden` attribute

[23:19:51.0000] <MikeSmith>
(nor whether the heading itself does)

[00:35:13.0000] <annevk>
MikeSmith: should that affect whether it’s a heading, basically?

[00:35:41.0000] <annevk>
MikeSmith: that would add some complexity

[00:36:26.0000] <MikeSmith>
yeah I know ー it’s part of what made the old outline algorithm more complex

[00:37:04.0000] <MikeSmith>
but to answer your question, of course it doesn’t affect whether it’s intrinsically a heading

[00:37:28.0000] <MikeSmith>
but in practice, I’m not sure that’s what’s important

[00:37:52.0000] <annevk>
MikeSmith: so what does it affect?

[00:38:37.0000] <MikeSmith>
well, does a screen reader announce a heading if it’s hidden?

[00:39:11.0000] <MikeSmith>
I thought a big part of the goal of this was to expose heading levels to AT in the right way

[00:39:34.0000] <annevk>
MikeSmith: in that case it affects whether it’s a heading, right? Though AT also respects display:none so hmm

[00:40:07.0000] <annevk>
Anyway, we could make this work and impl presumably do it already

[00:41:08.0000] <MikeSmith>
for h2-h6 yeah I guess implementations do

[00:41:12.0000] <a-ja>
MikeSmith, offscreen headings do get announced unless aria-hidden or role=presentation, generally, iirc

[00:41:53.0000] <a-ja>
/me is no expert

[00:41:56.0000] <MikeSmith>
yeah?

[00:42:13.0000] <a-ja>
...but i've studied some

[00:44:54.0000] <MikeSmith>
OK well anyway right now I’m just trying to consider it in terms of what I need to do in order to replace the backend for the current Show Outline feature in the HTML checker with one based on the PR #3499 patch

[00:46:00.0000] <a-ja>
url?

[00:46:06.0000] <MikeSmith>
and with the current backend of this, which is based on the old outline algorithm, headings in subtrees with `hidden` attributes don’t get included/shown

[00:46:26.0000] <MikeSmith>
a-ja: URL for what?

[00:46:35.0000] <a-ja>
the PR

[00:46:50.0000] <MikeSmith>
ah

[00:46:51.0000] <MikeSmith>
https://github.com/whatwg/html/pull/3499

[00:46:56.0000] <a-ja>
tks

[00:48:34.0000] <MikeSmith>
annevk: thinking about it more, maybe the broader issue/difference is the patch doesn’t define anything about how to build an outline

[00:48:53.0000] <MikeSmith>
or a set of heading levels or whatever we would want to call it

[00:49:24.0000] <MikeSmith>
it defines the term "document headings" but doesn’t say anything about doing something with it

[00:50:23.0000] <MikeSmith>
doesn’t say anything about exposing "document headings" as such, as a set

[00:50:31.0000] <MikeSmith>
or rather, as a list I guess

[00:51:51.0000] <a-ja>
i dunno how screen reader users prefer to nav around a site these dats...whether by headings or landmarks (which may have aria-label)

[00:52:03.0000] <a-ja>
*days

[00:52:24.0000] <MikeSmith>
a-ja: both, I htink

[00:52:32.0000] <MikeSmith>
since it’s not an either-or

[00:53:00.0000] <MikeSmith>
I guess it probably depends a lot on the site and how it’s marked up

[00:54:01.0000] <MikeSmith>
but one thing I do know is that in the years of discussion we’ve had about this, there have been lots of comments from SR users saying they do often navigate by headings

[00:54:26.0000] <MikeSmith>
not saying that they do exclusively, but saying that it’s comment

[00:54:32.0000] <MikeSmith>
*common

[00:55:26.0000] <a-ja>
lately i've been going by whether it's a heading i'd put in a toc...real content, whereas nav's get aria-labels instead of heading

[00:56:15.0000] <MikeSmith>
annevk: so this point, as far as I what I need for my purposes, I guess I just have to assume that `hidden` headings should not be including in the “document headings” view/outline that the checker exposes

[00:56:58.0000] <a-ja>
it keeps the a11y checker tools happy, but i've really no idea of any surveys which ways screen-reader users prefer

[00:58:15.0000] <MikeSmith>
annevk: I mean, since the the spec doesn’t explicitly say what should happen for `hidden` headings ー nor no longer say anything explicitly about how to build an outline

[00:59:21.0000] <MikeSmith>
a-ja: for us I’m not sure it’s so relevant which they prefer, since we need to support both

[01:00:03.0000] <MikeSmith>
I mean as far as having the spec define how UAs expose heading levels

[01:01:18.0000] <a-ja>
gonna create an <h> element, too, while you're at it? :)

[01:01:26.0000] <MikeSmith>
nope

[01:01:31.0000] <a-ja>
heh

[01:01:39.0000] <MikeSmith>
definitely not going to do that

[01:02:15.0000] <MikeSmith>
in hindsight, we never should have created <section> or <article>

[01:02:42.0000] <MikeSmith>
especially <section>

[01:04:58.0000] <a-ja>
not so sure about that...certainly nudged a lot of folks (myself included) into more semantic structure

[03:57:15.0000] <annevk>
MikeSmith: we ahould figure out what to do with hidden I think

[03:57:23.0000] <annevk>
MikeSmith: we did for main

[03:57:51.0000] <annevk>
MikeSmith: I guess we can be more explicit on doc headings too somehow

[04:30:20.0000] <MikeSmith>
annevk: dunno maybe it’s not actually important ー I mostly just noticed it as a difference compared to the previous requirements

[04:31:54.0000] <MikeSmith>
annevk: but anyway, speaking of differences, if I read the patch text correctly, <hgroup> never takes it heading level from the level-ness of its child h1-h6 but instead takes it only from its nesting depth?

[04:32:18.0000] <MikeSmith>
if so, that strikes me a very suboptimal

[04:34:04.0000] <MikeSmith>
I think <hgroup> was never really anything more than a hack to suppress sub-section creation in the old outline algorithm

[04:34:50.0000] <MikeSmith>
so given that we’re discaring the old outline algorithm, I think we should consider just essentially ignoring <hgroup> altogether

[04:36:20.0000] <MikeSmith>
what I mean is, the spec should say that <hgroup> should not be treated as a heading, but instead its child heading elements should take whatever level they otherwise would if they had not <hgroup> parent

[04:37:56.0000] <MikeSmith>
that’s just as easy for UAs to implement (doesn’t require keeping any more state than what the current patch says, doesn’t require looking down/ahead)

[04:39:38.0000] <MikeSmith>
in other words, if we’re dispensing with the idea that headings create sections (as they did in the old outline algorithm), then we no longer have any useful function/behavior to associate with <hgroup>

[04:42:43.0000] <MikeSmith>
it can instead become purely just some extra markup wrapper that’s effect-less/harmless but just there for legacy reasons

[04:43:04.0000] <MikeSmith>
or alternatively, we can deprecate or obsolete it

[04:47:56.0000] <MikeSmith>
the use-counter stats from the HTML checker showed <hgroup> being used in only ~0.2% of documents, if I recall correctly

[05:14:44.0000] <annevk>
MikeSmith: how would we do subheadings then?

[05:15:14.0000] <annevk>
MikeSmith: the current idea is that hgroup is the heading in such cases and UAs can represent the multiple headings nested therein as of being increasingly less important

[07:49:54.0000] <benjamingr_>
Hmm, would be really useful to have a highWaterMark in `fetch`

[08:36:34.0000] <Domenic>
benjamingr_: file a bug? Seems pretty easy to add in theory.

[08:54:42.0000] <benjamingr_>
Domenic: cheers https://github.com/whatwg/fetch/issues/689

[11:58:11.0000] <Zegnat>
Quick question. In 14.3.1 (https://html.spec.whatwg.org/#hidden-elements) what does the `i` in `input[type=hidden i]` mean?

[11:58:23.0000] <Domenic>
Zegnat: case-insensitive

[11:58:41.0000] <Zegnat>
Quick question gets a quick question. thanks Domenic!

[11:58:51.0000] <Zegnat>
quick answer ... ugh

[12:44:37.0000] <espadrine>
Hi, is there a way to ask the browser not to share same-origin XHR with withCredentials set to true?

[12:45:04.0000] <espadrine>
Access-Control-Allow-Credentials:false does not do it.

[13:21:10.0000] <domfarolino>
espadrine: What do you mean by "not to share"

[13:26:12.0000] <espadrine>
domfarolino: as in, either not send the credentials with the request, or not yield the response body to the xhr / fetch

[13:37:59.0000] <domfarolino>
espadrine: Only on same-origin requests?

[13:39:56.0000] <domfarolino>
with fetch() you can set a Request's mode to `no-cors` (and credentials = `same-origin`/`include`) which will give an opaque response if that makes sense.

[13:51:45.0000] <espadrine>
domfarolino: In a situation where I don't trust nor control what a specific page contains, and that page comes from my origin. I can't expect the page to simply not do the harmful thing and set credentials as I want. I don't want it to be able to make a request to my server with the credentials (which it can't read since they are secure cookies).

[13:57:04.0000] <Zegnat>
Hmm, I tried to submit the Participant Agreement (for PR whatwg/html#3606) but it gave me an Error 400 “Invalid 'scope-workstreams' field”. Known error?


2018-04-03
[22:00:19.0000] <annevk>
Zegnat: haven’t seen anyone run into that yet

[22:00:42.0000] <annevk>
espadrine wants sandboxing

[01:09:42.0000] <annevk>
mkwst: FWIW, I think we discussed expanding Origin some years ago too and concluded it wasn't feasible

[01:10:01.0000] <annevk>
mkwst: but as with From-Origin, we can repeat it a few times I suppose 😃

[01:10:17.0000] <annevk>
mkwst: I strongly suspect that if you include it for GET servers will assume CORS and hickup

[01:11:38.0000] <mkwst>
annevk: *shrug* I haven't had enough coffee yet this morning, so I wouldn't be surprised if it's a bad suggestion. But I'd prefer to expand something that already exists if possible, rather than introducing a new thing.

[01:14:23.0000] <annevk>
mkwst: also, for an ad-hoc defense From-Origin seems far easier to deploy at scale to protect users of many sites quickly

[01:16:10.0000] <mkwst>
annevk: It certainly requires less server-side logic for a static policy (e.g. "This endpoint is mine, mine, mine, go away everyone else!"). I'm not sure it's any simpler for a policy with more interesting rules, but maybe those are few and far between.

[01:18:07.0000] <mkwst>
To be clear: I'm not opposed to `from-origin` per se. Among other advantages, I think getting folks on board with shipping it would make it easier for me to come back to the Entry Point Regulation proposal we floated a few years ago. *shrug* I'd like to make sure we explore other options before shipping something, but I think the problem space is totally worth poking at.

[01:58:28.0000] <fergal_daly>
can anyone point me to what powers the spec diffs, e.g. https://whatpr.org/html/3566/be2f5df...e0567b2/interaction.html

[01:58:29.0000] <fergal_daly>
?

[02:00:25.0000] <annevk>
fergal_daly: https://github.com/tobie/pr-preview

[02:00:46.0000] <annevk>
fergal_daly: though note that for HTML it's a specialized setup

[02:01:18.0000] <annevk>
fergal_daly: and for WHATWG in general it's a bit special, since we have our own domain to host these things on

[02:13:10.0000] <fergal_daly>
thanks

[05:46:14.0000] <nox>
annevk: Can I borrow your brain for a second?

[05:46:22.0000] <nox>
I'm getting confused by the wording in https://www.khronos.org/registry/webgl/specs/latest/2.0/#3.7.3

[05:46:49.0000] <nox>
Specifically: "If srcData is a DataView, let copyLength be srcData.byteLength - srcOffset; the typed elements in the text below are bytes. Otherwise, let copyLength be srcData.length - srcOffset."

[05:46:59.0000] <nox>
Why does it matter whether srcData is a DataView or not?

[05:48:39.0000] <annevk>
nox: is that the normative prose?

[05:49:09.0000] <annevk>
Wow, looks like it might be

[05:49:18.0000] <nox>
annevk: AFAIK yes, that's the only prose using JS terminology in the whole stack.

[05:49:40.0000] <nox>
annevk: That spec is… not as good as it could be.

[05:50:50.0000] <annevk>
nox: DataView only has byteLength

[05:50:58.0000] <nox>
annevk: Oh I see.

[05:51:10.0000] <annevk>
nox: so .length would be undefined, but that they're branching on public getters is rather nuts

[05:51:21.0000] <annevk>
nox: and not at all how impls work

[05:51:27.0000] <nox>
:D

[05:52:24.0000] <nox>
annevk: I like how it totally ignores any under or overflow too.

[05:52:27.0000] <nox>
What could go wrong?

[05:53:10.0000] <annevk>
nox: don't tell Waldo

[05:53:15.0000] <annevk>
nox: but maybe do tell Waldo

[05:53:23.0000] <nox>
About which part specifically?

[05:54:18.0000] <annevk>
nox: bound checks; though maybe by now we've found all security issues with ArrayBuffer

[05:54:50.0000] <annevk>
It's also worth asking for a better specification, but I wonder if we're going to get it

[05:54:59.0000] <annevk>
(not from Waldo that last one)

[05:55:20.0000] <nox>
annevk: Isn't ArrayBuffer only for arrays of bytes?

[05:55:59.0000] <nox>
Confused about "If srcData is a DataView, set the size of buf to copyLength; otherwise, set the size of buf to copyLength * srcData.BYTES_PER_ELEMENT. "

[06:04:08.0000] <annevk>
nox: ArrayBuffer is for bytes, but views on top of it are generally not

[06:04:41.0000] <nox>
annevk: So can ArrayBufferView be backed by something that isn't for bytes?

[06:04:59.0000] <annevk>
nox: I think that one makes sense; e.g. if you had a float32array its elements would be 4 bytes each

[06:05:37.0000] <annevk>
nox: you cannot

[06:05:52.0000] <nox>
annevk: So it doesn't make sense, right?

[06:05:56.0000] <nox>
The method takes a `[AllowShared] ArrayBufferView srcData`.

[06:06:37.0000] <annevk>
nox: ArrayBufferView is a typed array object, backed by an ArrayBuffer

[06:07:22.0000] <annevk>
(or SharedArrayBuffer in some parallel universe where that's still a thing)

[11:35:49.0000] <Domenic>
domfarolino: FYI I've made all workstream editors able to edit https://github.com/whatwg/participant-data (e.g. to verify people).

[11:36:02.0000] <Domenic>
That's how it was supposed to be since the beginning, but we forgot

[11:36:14.0000] <domfarolino>
This is great, thank you!

[11:52:55.0000] <domfarolino>
Are browsers allowed to display content above a body-ok <link rel=stylesheet> *even* before a parser-blocking script below the <link> is ran?

[11:53:39.0000] <domfarolino>
It seems in Chrome/Firefox, parser-blocking scripts do not delay the first paint when they come after a body-ok link and i can't find in the spec where this might be specified

[12:07:36.0000] <Domenic>
This reminds me of some bug about non-interoperability here...

[12:08:15.0000] <Domenic>
I guess it's not really specified when browsers are allowed to display content at all?

[12:08:25.0000] <Domenic>
https://github.com/whatwg/html/issues/3355 was probably what I was thinking of

[12:08:42.0000] <Domenic>
Oh or https://github.com/whatwg/html/issues/1349

[12:16:40.0000] <domfarolino>
Interesting, checking those out thanks. Before I saw ^^, I found https://jakearchibald.com/2016/link-in-body/ which does mention Chrome switching to allow rendering before a body-ok stylesheet (though DOMContentLoaded is still blocked)

[14:15:28.0000] <Domenic>
I think I'm achieving some level of bz-ness: https://github.com/w3c/payment-handler/issues/263#issuecomment-373734422

[14:17:02.0000] <wanderview>
Domenic++

[14:17:57.0000] <gsnedders>
Domenic: hello, new AI overlord

[14:27:59.0000] <jsbell>
ha!


2018-04-04
[05:42:58.0000] <annevk>
JakeA: for no-cors range requests, did you look at CORB?

[05:44:01.0000] <JakeA>
annevk: I haven't. Will catch up now.

[06:24:40.0000] <JakeA>
annevk: looks sensible. Doesn't get in the way of the range stuff I'm looking at.

[06:31:25.0000] <annevk>
K

[07:15:45.0000] <domfarolino>
With setTimeout(fn, 0) on a page in a parser-blocking script, should fn be invoked before the DOMContentLoaded event is fired?

[07:20:31.0000] <annevk>
domfarolino: timers are in a diff source, so don’t think so

[07:28:57.0000] <domfarolino>
annevk: Ok, because FF and Chrome seem to handle this differently (FF will run the timeout before DOMContentLoaded, chrome after) would you expect they should behave the same?

[07:29:39.0000] <annevk>
domfarolino: not necessarily, since it's up to the browser to determine relative priorities

[07:29:50.0000] <domfarolino>
Ok that's what I thought

[07:30:09.0000] <domfarolino>
I thought I remembered they could sort of do what they wanted wtih different sources

[07:30:32.0000] <annevk>
It's a little scary though since I'm not sure web developers take that kinda thing into account

[07:39:30.0000] <domfarolino>
annevk: How about https://gist.github.com/domfarolino/e0a19349f7134b9798e984c81138873c, would you expect the <link> load event fired to appear first in the console?

[07:40:21.0000] <domfarolino>
I use async script here that runs before the parser-blocking script to ensure that the event listeners are setup before DOMContentLoaded event has a chance to fire

[07:40:41.0000] <domfarolino>
Chrome won't show the <link> load event fired until after DOMContentLoaded, whereas FF is opposite

[07:41:46.0000] <annevk>
that one is tricky, it depends on whether the browser decides to wait for the stylesheet

[07:42:04.0000] <gsnedders>
/me gets tempted to try and write an extension to redirect people away from /TR/ again

[07:42:04.0000] <annevk>
I think in theory it should, although I could also see a case that it doesn't, unless the script asks for layout

[07:43:47.0000] <domfarolino>
annevk: Wait for the stylesheet to load before executing async script?

[07:44:47.0000] <annevk>
domfarolino: before executing the sync script

[07:45:59.0000] <domfarolino>
annevk: I believe all browsers block parser-blocking scripts from running before previously discovered stylesheets are loaded right now, which should "ensure" that the async script will run.

[07:46:30.0000] <domfarolino>
I can't see how, if both listeners got set before DOMContentLoaded, the DOMContentLoaded handler would be fired first

[07:46:53.0000] <domfarolino>
Because the parser-blocking script can only start running after the <link> load is loaded (and its event fired), it *must* come first right?

[07:47:12.0000] <annevk>
domfarolino: well, loaded will queue a task to fire

[07:47:30.0000] <annevk>
domfarolino: when that task runs depends on which source it's in

[07:47:38.0000] <annevk>
domfarolino: and how much priority that has for the browser

[07:48:10.0000] <domfarolino>
annevk: Right, but won't DOMContentLoaded and `<link> load` events be queued to the same source?

[07:48:14.0000] <domfarolino>
Or is that not mandated

[07:48:23.0000] <annevk>
domfarolino: maybe, some of this is a little vague

[07:48:34.0000] <domfarolino>
My assumption with this example was that they will be the same source, therefore should be well-ordered

[07:48:36.0000] <domfarolino>
Ahh ok

[07:48:40.0000] <annevk>
domfarolino: I haven't checked; if they go to the same source you'd be correct

[07:49:12.0000] <domfarolino>
annevk: I can dig around for it, I assume where we actually queue this task would be in HTML and not DOM right?

[07:51:14.0000] <annevk>
domfarolino: yup

[07:51:20.0000] <annevk>
(both)

[07:57:27.0000] <domfarolino>
Yeah so basically #queue-a-task says all tasks from a specific source must go to the same task queue, but nothing states that the DOMContentLoaded and other element `load` events originate from the same task source

[07:57:48.0000] <domfarolino>
And I guess there's not too much use in specifying that probably

[07:58:12.0000] <domfarolino>
I guess I just assumed they *must* originate from same source :(

[08:00:19.0000] <annevk>
domfarolino: we totally should specify their sources

[08:00:41.0000] <annevk>
Precisely so you can answer whether the order is defined

[08:00:56.0000] <domfarolino>
annevk: Ok initially that's what I thought but didn't know if that would be too restricting

[08:01:07.0000] <domfarolino>
Cool :) I can open an issue to discuss

[08:03:18.0000] <domfarolino>
Maybe specifying like a few key sources that must always exist, and giving impls freedom to add their own would be nice

[08:03:41.0000] <domfarolino>
Would allow us to fire these sorts of DOM events consistently from the same source to the same queue I guess

[08:08:44.0000] <annevk>
There is some of that already

[09:36:23.0000] <kereliuk>
Domenic: You can now send key events in WPT in firefox and chrome

[09:37:10.0000] <kereliuk>
Tab key should work... test_driver.send_keys(element, keys)

[09:41:31.0000] <gsnedders>
<3

[09:45:34.0000] <annevk>
Oooh wow

[09:57:12.0000] <jgraham>
Incrementally adding this stuff should be mcuh easier now, assuming features you want are exposed in WebDriver

[09:57:39.0000] <jgraham>
If you want e.g. control over the GC or fake camera input, that's harder :)

[09:59:05.0000] <Domenic>
Is it keys = "tab" or keys = "\t" or...?

[09:59:53.0000] <jgraham>
Hahaha

[09:59:55.0000] <jgraham>
https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions

[10:00:13.0000] <jgraham>
\uE004

[10:02:41.0000] <domfarolino>
annevk: It seems at the end of these sections (https://html.spec.whatwg.org/multipage/semantics.html#obtaining-a-resource-from-a-link-element & https://html.spec.whatwg.org/multipage/parsing.html#the-end) the task source is specified as the DOM manipulation task source. So it appears this is specified, and Chrome doesn't follow it (a quick look of the source shows that the blink `LinkLoader` actually uses the networking

[10:02:41.0000] <domfarolino>
task source) so I'll refrain from filing a spec issue

[10:06:36.0000] <annevk>
domfarolino: what Chrome does seems a bit more reasonable though

[10:09:39.0000] <domfarolino>
annevk: I find it a little confusing personally. I would think the "load" event of a stylesheet that's blocking a script should be observable before the document is finished parsing. Because for the document to finish parsing, the stylesheet must be finished, we just can't tell from JS it seems

[10:10:52.0000] <annevk>
domfarolino: in this specific scenario it makes sense for them to use the same task source maybe, but generally network-driven events should use the networking task source

[10:13:54.0000] <domfarolino>
annevk: Yeah that too makes sense. I wonder if we should change the spec to fire load/error events from the networking source

[10:27:44.0000] <annevk>
domfarolino: I think so; def worth filing an issue on

[11:05:21.0000] <KiChjang>
is there a way to run a specific WPT on my browser?

[11:06:37.0000] <gsnedders>
KiChjang: http://w3c-test.org/?

[11:06:38.0000] <KiChjang>
oh nevermind, i found w3c-test.org

[11:07:05.0000] <KiChjang>
gsnedders: yeah, i knew of wpt.fyi and i just thought to look there

[11:10:03.0000] <KiChjang>
also, does anyone here maintain wpt.fyi?

[11:10:45.0000] <KiChjang>
the links to w3c-test.org doesn't quite work, because apparently w3c-test.org doesn't serve over SSL and all the links in wpt.fyi uses HTTPS

[11:12:07.0000] <jgraham>
jugglinmike: ^

[11:13:19.0000] <gsnedders>
KiChjang: it should work over HTTPS? though it's frequently super-slow for some reason

[11:13:26.0000] <gsnedders>
yeah I just loaded it over HTTPS

[11:13:45.0000] <gsnedders>
but yeah, most of the links (i.e., all except tests that rely on HTTPS) should point at HTTP

[11:13:48.0000] <KiChjang>
ah, perhaps it was indeed super slow

[11:15:10.0000] <gsnedders>
KiChjang: https://github.com/w3c/wptdashboard/issues/532


2018-04-05
[00:07:55.0000] <kochi>
There are several ways to create HTMLDocument that is not connected to browsing context (e.g. DOMImplementation.createHTMLDocument(), DOMParser API, XHR) but I'm wondering what's the meaningful use case for creating an "HTML document" (vs a DocumentFragment or a plain node tree), where we don't have an API like window.document.swap(otherDocument) or something to display the document.

[01:13:34.0000] <annevk>
Before JSON documents where somewhat popular to exchange data

[01:13:47.0000] <annevk>
Still are to some extent I suppose

[01:34:17.0000] <kochi>
hmm, I see, maybe like XML, or SOAP -like use cases.

[01:47:01.0000] <annevk>
kochi: yeah, not especially compelling though

[01:47:20.0000] <annevk>
kochi: I only ever do it myself to test edge cases and break browsers

[01:47:45.0000] <annevk>
kochi: having said that, I have heard that folks still run into these kind of formats and would actually like to have some kind of DOM in workers...

[01:57:20.0000] <hsivonen>
Is it possible for an event to fire synchronously while another event's handler is being run?

[01:57:46.0000] <annevk>
hsivonen: yes

[01:58:10.0000] <annevk>
hsivonen: e.g., the handler can run obj.dispatchEvent(...)

[01:58:31.0000] <hsivonen>
annevk: ok, so the window.event stuff should restore the previous window.event afterwards instead of just setting to undefined

[01:59:13.0000] <annevk>
hsivonen: yeah, I think in review of that PR it was suggested that you store the current value, then set it to the event, then run the callback, then set it to the stored value

[01:59:46.0000] <hsivonen>
annevk: why is it set and restored for each callback separately?

[02:00:30.0000] <annevk>
hsivonen: oh, I guess you can do it for a whole currentTarget

[02:00:51.0000] <hsivonen>
annevk: Is the shadow DOMness not known before the whole capture and bubble stuff starts?

[02:01:19.0000] <annevk>
hsivonen: it is, that part isn't specced yet

[02:01:32.0000] <annevk>
hsivonen: basically the whole path is known and it has some annotations about boundary crossing

[02:02:01.0000] <annevk>
hsivonen: so when you set it to the event it needs to be conditional upon information from that path

[02:02:08.0000] <hsivonen>
annevk: in that case, it would be really nice the shadow DOMness could be decided using the "target" that Gecko has before it traverses the events path

[02:02:38.0000] <hsivonen>
oh, it needs information from the path :-( :-(

[02:02:58.0000] <annevk>
hsivonen: as I understand it Firefox also has the path pre-dispatch

[02:03:18.0000] <annevk>
hsivonen: perhaps in a different form, but that's basically a per-requisite for many bits of dispatching

[02:05:12.0000] <hsivonen>
annevk: my problem mainly is that I'm unfamiliar with this stuff, so locating the interesting points of code that are not too soon and not too late isn't obvious

[02:06:23.0000] <annevk>
hsivonen: okay, as I understand it from Olli we have all the information before we call into JavaScript

[02:06:47.0000] <hsivonen>
annevk: yeah, smaug____ known this code. I don't.

[02:07:03.0000] <annevk>
hsivonen: e.g., whether the node we are firing listeners for was in a shadow tree at the time dispatch started

[02:07:11.0000] <annevk>
hsivonen: based on that we'd like to set window.event

[02:08:36.0000] <annevk>
hsivonen: the crucial bit here is that if something was in a shadow tree at the time of dispatch and one listener moves it into the main document, when the next listener runs window.event should still be its original value

[02:11:45.0000] <hsivonen>
annevk: what's "original value"? original as in before the whole dispatch thing or the one decided before the node was moved during this dispatch?

[02:12:04.0000] <hsivonen>
annevk: Is there a test case for that?

[02:12:41.0000] <annevk>
hsivonen: I don't know, Mike Taylor wanted to work on this so I haven't been involved much

[02:12:51.0000] <hsivonen>
annevk: ok

[02:12:52.0000] <annevk>
hsivonen: if this is high priority suddenly maybe I should take over a bit

[02:13:11.0000] <hsivonen>
annevk: my understanding is that this is a priority now

[02:14:04.0000] <annevk>
By original value I meant the value it currently has

[02:14:43.0000] <annevk>
Basically we only change the value if the current target was not in a shadow root determined at dispatch time before any JavaScript along the path is executed

[02:15:11.0000] <annevk>
(I tried to look around a bit in Mozilla's event code, but it seems very polymorphic so hard to find the right location for all this...)

[02:15:20.0000] <hsivonen>
annevk: that suggests the current PR has the setting and unsetting of window.event too deep in the algorithm

[02:16:47.0000] <annevk>
hsivonen: yeah I recommend not looking at the current PR, especially if you want to consider shadow trees

[02:17:11.0000] <annevk>
hsivonen: I'll have a look at rebasing the current PR and splitting out srcElement and returnValue, which are now elsewhere

[02:17:56.0000] <annevk>
I did check with Mike and he seemed okay with me doing some work on window.event

[02:19:53.0000] <hsivonen>
annevk: in the spec, step 16 checks shadow DOMness

[02:20:24.0000] <hsivonen>
annevk: Do I understand correctly that `target` may have changed via retargeting after step 11?

[02:22:41.0000] <annevk>
hsivonen: that question is a bit ambiguous, the target passed to dispatch doesn't really change; but as the event gets dispatched, it might have multiple targets due to shadow trees

[02:23:33.0000] <annevk>
hsivonen: note that the current spec at https://dom.spec.whatwg.org/#dispatching-events doesn't have a step 16

[02:23:51.0000] <annevk>
hsivonen: (it changed a whole lot due to review from smaug____)

[02:24:03.0000] <hsivonen>
I meant step 16 in the PR preview

[02:24:09.0000] <hsivonen>
/me looks at the actual spec

[02:24:21.0000] <annevk>
hsivonen: yeah as I said, that PR is out-of-date and needs rebasing

[02:24:31.0000] <annevk>
hsivonen: I can work on that now

[02:25:08.0000] <annevk>
This does seem like a fairly complex thing to work on given that other changes (including to Firefox) are also in flight

[02:25:30.0000] <annevk>
Unless you own all of those changes I think smaug____ should give some specific directions here

[02:26:27.0000] <smaug____>
/me is

[02:26:38.0000] <hsivonen>
annevk: I don't own other changes. I basically know nothing other than I'm supposed to make window.event happen

[02:27:05.0000] <hsivonen>
maybe I should upload my current code

[02:42:11.0000] <hsivonen>
annevk: there's now code on the bug. It works in the non-shadow DOM case and it checks for shadow DOMness, but it might check for shadow DOMness at the wrong time

[03:04:29.0000] <annevk>
hsivonen: hmm, the other thing that's worth testing here is how the global object is found

[03:05:05.0000] <annevk>
hsivonen: e.g. if I run a function in an <iframe> that dispatches an event, which global has its event set

[03:10:47.0000] <hsivonen>
annevk: also, is window.event supposed to be reachable via the outer window

[03:11:40.0000] <annevk>
https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=5853 suggests yes?

[03:13:00.0000] <annevk>
https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=5854 suggests maybe it's just the target's relevant global object

[03:13:11.0000] <annevk>
that'd certainly make sense

[03:16:30.0000] <hsivonen>
OK. That already works with my patch.

[03:26:36.0000] <annevk>
hsivonen: I updated the PR to be a bit more accurate, the main thing missing is still the shadow tree stuff

[03:26:53.0000] <annevk>
hsivonen: gonna take a break for a bit and then I'll look into your work on Firefox and the tests and such

[03:46:22.0000] <annevk>
hsivonen: what does https://software.hixie.ch/utilities/js/live-dom-viewer/?saved=5855 do? log the event as well?

[03:46:32.0000] <annevk>
(tracking that in https://github.com/heycam/webidl/issues/540)

[04:25:43.0000] <hsivonen>
annevk: the 5855 case logs undefined with my patch

[04:26:23.0000] <annevk>
hsivonen: that is diff from Chrome, but might be unrelated

[04:26:45.0000] <annevk>
hsivonen: not clear to me what correct is there

[04:27:02.0000] <hsivonen>
annevk: OK. I'm not properly familiar with the mechanism that makes WindowProxy work at all with my patch

[06:47:25.0000] <annevk>
hsivonen: I created a test for moving the element during listener callbacks: https://github.com/w3c/web-platform-tests/pull/10329

[12:03:00.0000] <michael2>
hi, can anyone clarify what this sentence in HTML spec on paragraph elements means?

[12:03:03.0000] <michael2>
"No p element in scope but a p end tag seen."

[12:03:35.0000] <michael2>
section in docs:

[12:03:38.0000] <michael2>
https://html.spec.whatwg.org/multipage/grouping-content.html#the-p-element

[12:05:44.0000] <michael2>
sorry I pasted the wrong sentence - I was actually wanting clarification on this sentence:

[12:05:50.0000] <michael2>
"The solution is to realize that a paragraph, in HTML terms, is not a logical concept, but a structural one."

[12:14:24.0000] <Domenic>
michael2: I think the note and example nearby that sentence spell it out in more detail

[12:22:16.0000] <michael2>
they spell out the difference between the specs definitions "logic" and "structure"? I don't see it?

[12:23:13.0000] <michael2>
I understand "logical" in HTML to be machine parsable information derived from the tags

[12:23:50.0000] <michael2>
I guess structure is the differnce between a "header" and an <aside> ?

[12:27:10.0000] <railgun>
michael2: I think you're overthinking it, I can understand the section but I can't understand how you described it

[12:28:53.0000] <michael2>
ok, thanks


2018-04-06
[17:39:14.0000] <yhirano__>
domfarolino: yt?

[17:39:24.0000] <domfarolino>
yhirano__: I am

[17:40:41.0000] <yhirano__>
domfarolino: what do you think about having a VC about priority API work? Or if you are coming to BlinkOn we can chat there.

[17:47:29.0000] <domfarolino>
yhirano__: VC sounds great! Don't think I will be able to make BlinkOn (finals week is right around there for me + also I had no idea it was open to anyone?)

[18:07:18.0000] <domfarolino>
yhirano__: Let me know when works for you, next monday or tuesday sound alright?

[18:09:07.0000] <yhirano__>
domfarolino: Thanks, I'll send an e-mail. I'll invite Yoav and a few others too.

[18:10:15.0000] <domfarolino>
yhirano__ Kinuko might be nice to include too, she seems to know about how prioritized requests are queued and I have a few questions that I haven't gotten to writing out yet

[18:11:30.0000] <domfarolino>
mostly about how effective Priority Hints can really be in Chrome right now by *just* adjusting computed priorities

[23:09:02.0000] <MikeSmith>
JakeA: https://stackoverflow.com/questions/49674193/cache-control-directive-only-if-cached-changed-by-dev-tools

[23:10:05.0000] <JakeA>
MikeSmith: I'll reply. Cheers!

[23:12:13.0000] <MikeSmith>
thanks~

[02:19:08.0000] <nox>
foolip: Ping?

[02:19:50.0000] <nox>
Something weird happened to all IDL tests.

[02:20:09.0000] <nox>
Now I have blanket "Untitled" and "IDL check of WebCrypto" failures.

[02:23:28.0000] <nox>
https://github.com/servo/servo/pull/20569/files#diff-2167d5fa6196ac128d0d626f87e20c8c

[02:23:44.0000] <nox>
Err, https://github.com/servo/servo/pull/20569/files#diff-a7b0bfde18cbf33a664497d0241111cd

[02:23:51.0000] <nox>
all those failures seem spurious to me,

[02:24:22.0000] <nox>
what's the point of having a failure for the entire suite when there are already the subtest failures that are more informative?

[02:29:37.0000] <nox>
https://github.com/w3c/web-platform-tests/issues/10343

[02:38:42.0000] <Ms2ger>
nox, did you find the code change?

[02:38:56.0000] <nox>
Ms2ger: There are many.

[02:39:15.0000] <nox>
Ms2ger: E.g. https://github.com/w3c/web-platform-tests/commit/13effc35311c62c60df4c2f34fa62b70f3947934

[02:39:25.0000] <nox>
which adds a "compat interfaces." failure.

[02:50:24.0000] <Ms2ger>
nox, I don't understand. That's a new test, and it fails. So what?

[02:50:43.0000] <nox>
What's the point of this new test, especially when it's not even named?

[02:51:10.0000] <nox>
It will only fail if another test already failed, I just think that's a curious way to test things.

[02:52:30.0000] <annevk>
nox: another test?

[02:53:12.0000] <nox>
Oh damn,

[02:53:15.0000] <nox>
I think I see what happened.

[02:53:23.0000] <annevk>
nox: the point of that test is testing IDL interfaces, fwiw

[02:53:34.0000] <annevk>
which is very good(tm)

[02:53:35.0000] <Ms2ger>
Though it seems to be missing Global annotations

[02:53:38.0000] <nox>
annevk: Ok, let's back up.

[02:53:44.0000] <nox>
annevk: We are already running those tests in Servo,

[02:53:49.0000] <nox>
annevk: I know what those tests are for,

[02:54:04.0000] <annevk>
Ms2ger: hmm yeah

[02:54:07.0000] <nox>
annevk: https://github.com/servo-wpt-sync/servo/blob/68d62eb13908dd0bebd929c7eb3903138ad348fc/tests/wpt/metadata/FileAPI/idlharness.html.ini#L18

[02:54:08.0000] <annevk>
Ms2ger: and Exposed

[02:54:12.0000] <nox>
annevk: In which case can this fail?

[02:54:26.0000] <Ms2ger>
annevk, that's the one I meant :)

[02:55:02.0000] <annevk>
nox: if you don't implement bindings correctly or if you don't implement the feature to begin with

[02:55:19.0000] <nox>
annevk: I mean specifically the line I pointed at.

[02:55:28.0000] <nox>
annevk: It's an *additional* test around the actual WebIDL tests.

[02:55:35.0000] <Ms2ger>
nox, pretty hard to say without the test change...

[02:56:13.0000] <nox>
https://github.com/w3c/web-platform-tests/commit/13effc35311c62c60df4c2f34fa62b70f3947934#diff-73ed5bdf7c7b2944893d61c4b158e3b3R15 <- This tests the WebIDL stuff, and emits a failure per missing operation/missing attribute/other IDL issue/whatever

[02:56:13.0000] <annevk>
nox: the line you pointed to is an ini file, which isn't part of web-platform-tests

[02:56:33.0000] <nox>
https://github.com/w3c/web-platform-tests/commit/13effc35311c62c60df4c2f34fa62b70f3947934#diff-73ed5bdf7c7b2944893d61c4b158e3b3R17 <- This tests that the WebIDL tests succeeded.

[02:56:35.0000] <nox>
Am I right?

[02:57:14.0000] <Ms2ger>
The outer test is mainly to catch any exceptions in the setup

[02:57:36.0000] <nox>
Ok, so my last question,

[02:57:37.0000] <annevk>
Ooh I see what you mean, yeah; that's the setup test

[02:57:45.0000] <nox>
if there are subtest failures,

[02:57:48.0000] <nox>
does the setup test fail too?

[02:58:00.0000] <nox>
Or is it failing in Servo because you ended up using more modern stuff in those,

[02:58:02.0000] <Ms2ger>
Probably not

[02:58:05.0000] <annevk>
That very much depends on the setup (drumroll)

[02:58:08.0000] <nox>
and thus we aren't actually running any of them anymore?

[02:58:13.0000] <Ms2ger>
You're not even running the compat test!

[02:58:14.0000] <nox>
That sounds super sad for Servo. :/

[02:58:18.0000] <nox>
Holy fu

[02:58:27.0000] <nox>
So we can't update WPT anymore until we have a smup.

[02:58:31.0000] <nox>
ajeffrey_: ^

[02:58:37.0000] <nox>
Super sad news on this sunny Friday.

[02:58:52.0000] <Ms2ger>
Can you start talking about tests you actually run and how they actually fail?

[03:01:22.0000] <nox>
What?

[03:03:34.0000] <nox>
I linked to https://github.com/servo/servo/pull/20569/files#diff-a7b0bfde18cbf33a664497d0241111cd at the start.

[03:04:21.0000] <Ms2ger>
Servo doesn't run compat/, so why do you keep pointing at a test in compat/?

[03:04:34.0000] <nox>
I linked to https://github.com/servo/servo/pull/20569/files#diff-a7b0bfde18cbf33a664497d0241111cd at the start.

[03:04:40.0000] <nox>
Which is definitely not compat/, but FileAPI.

[03:05:08.0000] <nox>
And that's a link to an expectation in Servo, which, as you probably know, means we are running that test.

[03:05:10.0000] <Ms2ger>
Okay, and where is the test change that caused it? How does it fail?

[03:05:28.0000] <nox>
I linked to compat/ because all those changes are similar.

[03:05:45.0000] <Ms2ger>
I can't find any similar changes in FileAPI

[03:06:18.0000] <nox>
https://github.com/w3c/web-platform-tests/commit/2f451fb5da7865cc45c7c8eb803072ae7e0649e0#diff-433cab07c3c6ec1525c907a283582cef

[03:06:47.0000] <Ms2ger>
>  merged 1 commit into master from idl-in-interfaces 29 days ago

[03:06:49.0000] <Ms2ger>
That's not it

[03:07:11.0000] <nox>
Well,

[03:07:30.0000] <nox>
then I don't know where something changed, but something changed since yesterday as I mentioned earlier,

[03:07:37.0000] <nox>
if you don't know what changed, I don't know either.

[03:08:47.0000] <Ms2ger>
Can you run the test locally, and tell me what the error message is?

[03:08:55.0000] <annevk>
JakeA: so the CORB 206 blocking is not exactly a subset of what you propose, right?

[03:13:09.0000] <JakeA>
annevk: They'll block a media element reading an HTML response, which is outside of what I'm working on. Their proposal prevents Attack 4 for particular content types, but my PR blocks it for all content types. I could write up a little comparison if that would help?

[03:13:27.0000] <nox>
Ms2ger: Ok.

[03:15:08.0000] <nox>
Ms2ger: So I was entirely wrong about thinking that the test was just failing because subtests were failing,

[03:15:19.0000] <nox>
Ms2ger: and entirely correct when I pinged Alan with Sad News(tm).

[03:15:21.0000] <nox>
 0:05.99 pid:29923 ERROR 2018-04-06T10:14:24Z: script::dom::bindings::error: Error at http://web-platform.test:8000/resources/idlharness.js:687:15 missing = in const declaration

[03:15:24.0000] <nox>
/me cries.

[03:15:38.0000] <annevk>
JakeA: yeah it would; don’t want to end up blocking something twice

[03:16:51.0000] <Ms2ger>
nox, so it's https://github.com/w3c/web-platform-tests/pull/10285

[03:17:33.0000] <Ms2ger>
nox, go ahead and make that use `var`; I'll review

[03:17:41.0000] <nox>
Ms2ger: Oh, ok.

[03:18:18.0000] <Ms2ger>
nox, well, and test in Servo first :)

[03:18:46.0000] <nox>
Ms2ger: Heh.

[03:19:38.0000] <nox>
Ms2ger: It works.

[03:20:02.0000] <nox>
ajeffrey_: https://github.com/w3c/web-platform-tests/issues/10343#issuecomment-379211826 <- This is scary, we really need a smup.

[03:20:09.0000] <Ms2ger>
So is a smup already in the goals for Q2?

[03:23:38.0000] <nox>
Ms2ger: It's one of the things Alan is working on,

[03:23:47.0000] <nox>
not even for Q2 but for his mental health in general.

[03:24:03.0000] <nox>
We are pretty tired of living in the past.

[03:24:13.0000] <Ms2ger>
Good :)

[03:24:57.0000] <nox>
Ms2ger: r? https://github.com/w3c/web-platform-tests/pull/10344

[03:27:02.0000] <nox>
Ms2ger: I would have just kept crying if the changes had been more invasive, I'm glad it was that easy of a workaround.

[03:27:10.0000] <Ms2ger>
nox, r+, but don't ask me again in 2019 ;)

[03:27:16.0000] <nox>
Ms2ger: Yeah, totally fair.

[03:27:42.0000] <nox>
Ms2ger: Reminds of 2 years ago, when the same thing happened but this time because we didn't have promises.

[03:28:11.0000] <nox>
(And where "just remove use of promises" was pretty damn bigger than "just avoid that one for const loop". :P)

[03:28:39.0000] <Ms2ger>
Indeed

[03:28:55.0000] <Ms2ger>
/me wanders off for a baguette

[03:29:01.0000] <nox>
Hah.

[03:30:11.0000] <nox>
It's unfortunate that the expectation update tool doesn't remove expectations of tests that weren't run at all,

[03:30:27.0000] <nox>
because I almost didn't realise we weren't running any of those tests anymore.

[04:07:59.0000] <nox>
I feel like there is something broken in our update-wpt tool. :(

[04:10:01.0000] <nox>
In WPT, are the tools/, resources/ folders and whatnot supposed to be listed in MANIFEST.json?

[04:12:51.0000] <Ms2ger>
nox, I wouldn't be surprised by either answer :)

[04:13:14.0000] <nox>
Ms2ger: Heh.

[04:13:31.0000] <nox>
Ms2ger: So I ran update-wpt which introduced suspiciously-unrelated files in the manifest,

[04:13:37.0000] <nox>
ran update-manifest afterwards, and now they are gone.

[04:13:54.0000] <nox>
I decided I'm not paid enough to try to understand what just happened and moved on.  :P

[04:14:06.0000] <nox>
 tests/wpt/metadata/MANIFEST.json                                           | 2163 +++++++++++++++++++++++++++-------

[04:14:08.0000] <nox>
Seems small enough.

[04:15:57.0000] <Ms2ger>
I guess you'd have to ask jgraham :)

[04:25:27.0000] <foolip>
nox: did you ping me here? I can't find the notification that I saw :/

[04:25:35.0000] <nox>
foolip: Don't worry. :)

[04:25:42.0000] <nox>
foolip: I confused myself.

[04:30:27.0000] <JakeA>
annevk: https://github.com/whatwg/fetch/issues/681#issuecomment-379226334

[05:18:09.0000] <jgraham>
nox: Huh, I reckon that's a regression

[05:18:28.0000] <nox>
jgraham: The stuff being dumped inside?

[05:19:53.0000] <jgraham>
Yeah

[05:22:14.0000] <nox>
jgraham: Was it fixed recently?

[05:22:41.0000] <jgraham>
nox: I'm not sure; I'm investigating :)

[05:34:04.0000] <annevk>
hmm, window.frames is a data property in Chrome?!

[06:00:58.0000] <jgraham>
nox: I think there's a mismatch between the worktree and the git-based behaviour

[06:09:41.0000] <ajeffrey_>
nox: we need an SMup for many many reasons.

[06:10:43.0000] <nox>
ajeffrey_: True. :)

[06:34:32.0000] <Ms2ger>
ajeffrey_, that's been true for years :)

[06:42:19.0000] <nox>
Ms2ger: 2

[06:42:52.0000] <Ms2ger>
nox: o

[06:43:16.0000] <nox>
Did last one Summer 2016.

[06:48:46.0000] <Ms2ger>
Did I comment out loud back then that we shouldn't wait long with the next one?

[07:26:19.0000] <nox>
Ms2ger: It was not supposed to go like this.

[07:26:44.0000] <Ms2ger>
/me cackles, scaring the neighbourhood's children

[07:38:59.0000] <nox>
Ms2ger: This is my life now: https://github.com/servo/servo/labels/A-content%2Fwebgl

[07:39:13.0000] <Ms2ger>
My condolences

[07:39:26.0000] <nox>
:D

[08:34:16.0000] <JakeA>
annevk: Who should I get to review changes to test_harness?

[08:36:00.0000] <annevk>
JakeA: jgraham or gsnedders

[08:37:43.0000] <JakeA>
Thanks


2018-04-07
[01:23:33.0000] <MikeSmith>
2

[04:28:50.0000] <nox>
Oh nice,

[04:28:56.0000] <nox>
whoever cleaned the IDL stuff: thank you,

[04:29:01.0000] <nox>
this removed all the indices in the test names.

[04:31:40.0000] <nox>
Still have a few IDL harness failures though. :(

[04:52:02.0000] <nox>
https://github.com/w3c/web-platform-tests/pull/10356 https://github.com/w3c/web-platform-tests/pull/10357

[06:00:59.0000] <benjamingr_>
Whoever worked on byob readers for readers in streams - thanks - and good job :)

[06:01:07.0000] <benjamingr_>
really useful

[09:38:37.0000] <Domenic>
\o/

[09:38:45.0000] <Domenic>
That was largely tyoshino :)

[09:45:15.0000] <smaug____>
hmm, is whatwg.org a bit slow today

[09:53:19.0000] <Domenic>
Instant on my machine

[10:17:08.0000] <domfarolino>
Likewise

[13:41:40.0000] <lgrahl>
o/

[13:41:47.0000] <lgrahl>
Can someone point me to what WebIDL does when I pass in an invalid value? For example, I have a function with the following signature: `foo(unsigned short blah)`. What is supposed to happen if I call `foo(65536)`?

[14:06:11.0000] <TabAtkins>
lgrahl: https://heycam.github.io/webidl/#es-unsigned-short

[14:06:27.0000] <TabAtkins>
That whole top-level section is hwat you need.

[14:07:08.0000] <lgrahl>
TabAtkins: Thanks. Found it in the meantime and am losing my hair very fast now. :)


2018-04-08
[17:35:30.0000] <Krinkle>
Hm.. is there a solution in CSS for the nested parent problem? E.g. style any X inside Y one way and any X inside Z one way, and work as expected when X and Y are nested, by using the nearest parent.

[17:35:49.0000] <Krinkle>
E.g. https://codepen.io/Krinkle/pen/eMQPby

[17:36:32.0000] <Krinkle>
s/when X and Y are nested/when Y and Z are nested/

[08:38:25.0000] <lgrahl>
A WebIDL question. Signature: foo(USVString s), Call: foo(null) - Is 's' an empty string or 'null'... or something else?

[08:42:05.0000] <nox>
lgrahl: https://heycam.github.io/webidl/#es-USVString -> https://heycam.github.io/webidl/#es-DOMString -> https://heycam.github.io/webidl/#TreatNullAs -> "If the [TreatNullAs] extended attribute appears on the DOMString type, it creates a new IDL type such that that when an ECMAScript null is converted to the IDL type, it will be handled differently from its

[08:42:05.0000] <nox>
default handling. Instead of being stringified to "null", which is the default, it will be converted to the empty string."

[08:42:12.0000] <nox>
lgrahl: So "null" AFAIK.

[08:44:31.0000] <lgrahl>
nox: So, I follow the USVString section conversion which points me to DOMString (but the reference goes to the DOMString definition and not the conversion... that was confusing). Following the DOMString conversion, I ended up at https://tc39.github.io/ecma262/#sec-tostring which would result in null converted to 'null'.

[08:44:38.0000] <lgrahl>
Quite easy to get wrong imo

[08:55:56.0000] <lgrahl>
But thanks for confirming it :)

[09:34:02.0000] <annevk>
If you have some spare time IDL could use the editing help…


2018-04-09
[01:50:14.0000] <annevk>
MikeSmith: DOM build script makes the validator throw: https://travis-ci.org/whatwg/dom/builds/364015253?

[01:56:02.0000] <MikeSmith>
annevk: looking right now

[01:56:20.0000] <MikeSmith>
ah yeah

[01:56:41.0000] <MikeSmith>
same issue as https://github.com/validator/validator/issues/634

[01:57:00.0000] <MikeSmith>
will fix it right now

[01:59:57.0000] <annevk>
hsivonen: miketaylr: it seems there's no Firefox bug for Event's returnValue?

[02:00:15.0000] <annevk>
/me can only find one for window.event and Event.prototype.srcElement

[02:20:52.0000] <nox>
annevk: Care to review https://github.com/w3c/web-platform-tests/pull/10356 and https://github.com/w3c/web-platform-tests/pull/10357 if you have some time, please?

[02:23:37.0000] <annevk>
nox: does idlharness even care about dictionaries?

[02:23:59.0000] <nox>
annevk: It ERROR'd without that.

[02:24:21.0000] <nox>
annevk: And other tests have untested dictionary IDL definitions.

[02:25:45.0000] <annevk>
nox: okay, r+

[02:27:41.0000] <nox>
annevk: So am I supposed to hit the big green button myself?

[02:28:14.0000] <annevk>
nox: please do "rebase and merge" or "squash" (to clean up commit message if you want to)

[02:28:28.0000] <annevk>
nox: unless you really want me to do it

[02:29:17.0000] <nox>
Ok.

[02:36:12.0000] <hsivonen>
annevk: so it seems

[02:36:27.0000] <hsivonen>
no bug for returnVaule that is

[02:36:31.0000] <hsivonen>
Value

[02:36:59.0000] <annevk>
hsivonen: I'll file one then

[03:24:57.0000] <MikeSmith>
annevk: OK build now un-broke https://travis-ci.org/whatwg/dom/builds/364015253

[03:25:04.0000] <JakeA>
In WPT's python file handlers, is there anything special I need to do to import a module in the same folder?

[03:27:12.0000] <JakeA>
`from utils import create_wav_header` fails with "No module named utils", but `utils.py` exists in the same folder

[03:27:29.0000] <jgraham>
JakeA: I think the pwd is the server root rather than the directory with the file in it

[03:27:33.0000] <gsnedders>
JakeA: I am heavily unsurprised that doesn't work

[03:27:56.0000] <jgraham>
JakeA: sys.path.insert(0, os.path.basename(__file__))

[03:28:05.0000] <jgraham>
and then import?

[03:28:38.0000] <jgraham>
JakeA: Not sure how much effort it would be to fix this, but you could file an issue?

[03:29:17.0000] <JakeA>
jgraham: shall do. The sys.path.insert thing doesn't seem to change anything in this case

[03:32:01.0000] <annevk>
MikeSmith: thanks

[03:34:41.0000] <annevk>
mkwst: reportedly there's other PRs timing out too

[03:35:10.0000] <annevk>
mkwst: the suggestion from GitHub support is indeed to open a new PR if you want to continue working on it now...

[03:36:04.0000] <annevk>
mkwst: given that you have write access to whatwg/fetch you should be able to pull up the PR through GitHub Desktop and such at least

[03:37:48.0000] <JakeA>
jgraham: gsnedders: https://github.com/w3c/web-platform-tests/issues/10378

[03:51:19.0000] <jgraham>
JakeA: Takk

[05:21:46.0000] <nox>
TabAtkins: I'm pretty curious about the discussion in https://github.com/w3c/css-houdini-drafts/issues/729#issuecomment-379731917

[05:21:59.0000] <nox>
AFAICT people were mildly in favour of it, and no one was against it, so… it was rejected?

[05:22:24.0000] <nox>
Ah never mind, skipped a log line, disregard that.

[05:23:51.0000] <gsnedders>
nox accepts me as people! success!

[05:24:21.0000] <nox>
What. :D

[05:43:43.0000] <TabAtkins>
JakeA: When importing from your own directly, use absolute relative imports - `from .utils import create_wav_header`.

[06:16:51.0000] <JakeA>
TabAtkins: that didn't work either in this case

[06:17:09.0000] <TabAtkins>
Weird.

[06:18:23.0000] <gsnedders>
JakeA, TabAtkins: you'd need a __init__.py in the directory for that

[06:18:36.0000] <JakeA>
gsnedders: I have that too

[06:18:50.0000] <gsnedders>
oh actually you need to import it as a package so yeah that probably doesn't work

[06:18:51.0000] <TabAtkins>
gsnedders: Oh, is it a directory? I thought he said it was just an update.py file.

[06:18:58.0000] <TabAtkins>
In which case it's a module already, nothing else needs to be done

[06:19:31.0000] <gsnedders>
TabAtkins: no, for "from ." anything you have to already be  in a package (with an __init__.py)

[06:19:56.0000] <TabAtkins>
Oh, you have to be *in* a package, yeah.  wpt not being in a package has annoyed me in the past.

[06:20:29.0000] <gsnedders>
and being in a package is partly down to how you import that Python script first

[06:21:05.0000] <gsnedders>
I mean we could try and import stuff as a package, but we can't really expect __init__.py in every file up to the root

[06:21:46.0000] <TabAtkins>
Sure you can? I mean, like, Bikeshed is a package and contains packages. It's easy and convenient.

[06:22:47.0000] <gsnedders>
well I mean I think people would object if we added an __init__.py to every directory in WPT

[06:23:16.0000] <TabAtkins>
Oh, all the *data* folders. They don't contain Python files, do they?

[06:23:39.0000] <gsnedders>
They can, you can have Python files that get loaded by the server.

[06:24:04.0000] <TabAtkins>
Ah. So why are you expecting pushback about that?

[06:24:24.0000] <gsnedders>
Because there's relatively few of them.

[06:25:54.0000] <TabAtkins>
So you can add them to just the folders with Python in them, and their parents.


2018-04-10
[02:03:14.0000] <yhirano__>
annevk: hi

[02:05:30.0000] <annevk>
yhirano__: hey

[02:06:30.0000] <yhirano__>
Regarding https://github.com/whatwg/html/pull/3592, are you talking about https://html.spec.whatwg.org/multipage/browsing-the-web.html#traverse-the-history? or do you have other call sites in your mind?

[02:08:09.0000] <annevk>
yhirano__: the other one I'm unclear on is reloading

[02:08:40.0000] <annevk>
yhirano__: it says to use the Document object's URL, but it also takes into account other state such as whether the Document object was created as the result of a POST

[02:09:14.0000] <annevk>
yhirano__: which leads me to think it doesn't actually use a URL

[02:11:31.0000] <yhirano__>
annevk: https://html.spec.whatwg.org/#traverse-the-history gives a URL to the navigate algorithm. I can give a request with body and method set from the history entry instead, I think. As reloading reuses the previously used resource that will fix the reload case as well. Does it make sense?

[02:13:03.0000] <annevk>
yhirano__: I'm not sure; I suspect that's still wrong for browsers with a "fast" back implementation, where they keep the tree alive

[02:16:03.0000] <yhirano__>
sorry, what does the "fast" case mean?

[02:18:06.0000] <annevk>
yhirano__: Firefox doesn't always rebuild the node tree

[02:18:44.0000] <annevk>
yhirano__: so you go back and you end up with the same node instances as before

[02:18:53.0000] <yhirano__>
annevk: So are you talking about the case where the first step is skipped (i.e., Document is alive), right?

[02:19:05.0000] <annevk>
yhirano__: the HTML Standard supports this to some extent, though it's buggy

[02:19:33.0000] <annevk>
yhirano__: I'm not sure what you're referring to; none of these algorithms are particularly fresh for me

[02:20:13.0000] <annevk>
I wish I had managed to refactor these at some point so this wouldn't be such a problem, but I didn't succeed :/

[02:28:41.0000] <yhirano__>
annevk: thank you, I will file a bug. I'm not sure I can / should fix this issue soon though.

[02:43:22.0000] <annevk>
Thanks, note that there might well be one already, there's loads of issues tagged with topic: navigate

[07:19:30.0000] <Domenic>
gsnedders: I might take over https://github.com/w3c/web-platform-tests/pull/5525 if you don't mind. Do you have any thoughts on whether the tests are still good according to your standards a year later? E.g. tests that take 5 seconds seem a bit suspect to me.

[07:20:46.0000] <annevk>
Domenic: the JS side of an interface callback is a non-function object, no?

[07:21:01.0000] <Domenic>
I am 95% sure that is the case, yes

[07:21:11.0000] <Domenic>
I see

[07:21:14.0000] <annevk>
Domenic: in that case the concern still applies unfortunately

[07:21:29.0000] <Domenic>
I remember us going through this in some incumbent global thing

[07:21:51.0000] <gsnedders>
Domenic: 5s is mostly just trying to avoid any chance of flakiness, esp. with debug, given it's essentially racing the network

[07:22:08.0000] <gsnedders>
Domenic: go ahead and take it over, though

[07:22:19.0000] <gsnedders>
Domenic: I only hadn't done anything because there's not a huge amount of interop and no spec

[07:22:20.0000] <annevk>
The bad thing with these complex things is that there's months that go by sometimes before a bit more progress is made and then having to remember it all is just...

[07:22:47.0000] <Domenic>
gsnedders: yeah, bz and I both seem to have gotten annoyed enough at this that we're going to make there be a clear spec.

[07:22:50.0000] <Domenic>
and tests

[07:23:05.0000] <Domenic>
annevk: So for https://heycam.github.io/webidl/#call-a-user-objects-operation we just decided to use the realm of the object, despite ES vs. reality concerns.

[07:23:15.0000] <Domenic>
It links to https://heycam.github.io/webidl/#dfn-associated-realm

[07:23:27.0000] <gsnedders>
Domenic: yeah, I saw

[07:23:44.0000] <annevk>
Domenic: hah

[09:42:31.0000] <annevk>
It seems the lower bar for an edge case is a 50-50 split across browsers

[09:42:38.0000] <annevk>
Not even too mad with such an outcome


2018-04-11
[19:10:31.0000] <bradleymeck>
I'm guessing there is no way to change the cache key for type=module's module map at this point, but I was wondering why it was chosen to be the request url. that maps to --perserve-symlinks approximately in node which was attempted to be the default and then backed out due to problems

[19:11:02.0000] <bradleymeck>
I've heard some claims of optimizations being doable on the request url based cache but haven't managed to dig up talks about them

[19:18:46.0000] <domfarolino>
Domenic: The Console wpt PRs very well may be on your post-vacation todo list but just pinging here in case they got buried; they might be some low-hanging fruit :)

[19:20:15.0000] <Domenic>
domfarolino: oh, nope, totally forgot, thanks for the ping!

[19:20:29.0000] <domfarolino>
👍

[19:20:59.0000] <wanderview>
/me did not know you could have avatars in irc(cloud)...

[22:13:28.0000] <Domenic>
Sometimes I wonder if ekr ever expresses any positive thoughts about any changes to the web platform

[22:13:42.0000] <Domenic>
You'd think stricter content-type checking would be a slam dunk, but no...

[22:16:46.0000] <annevk>
Domenic: where is this?

[22:17:11.0000] <Domenic>
https://github.com/mozilla/standards-positions/issues/81#issuecomment-380328972 in particular, mozilla/standards-positions in general

[22:17:52.0000] <annevk>
Domenic: I think ekr would be pretty positive on TLS, but since he's very involved I'd expect him to be critical of that too 😃

[22:19:03.0000] <Domenic>
Also some hurtful words from Martin Thomson, but I guess that's just people being mean on the internet.

[22:19:27.0000] <Domenic>
s/mean/inconsiderate/

[22:19:46.0000] <annevk>
Yeah, though I agree that it's hard to digest

[22:20:09.0000] <annevk>
And I actually had a wrong take on the whole thing initially so fortunately no PRs landed yet and JakeA chimed in

[22:28:10.0000] <annevk>
Concern from ekr seems valid though, esp for the sniffing bits

[22:28:57.0000] <annevk>
I agree that some more Content-Type enforcement might be good, but this also introduces new complexity (such as a new response type) to do it

[22:33:49.0000] <Domenic>
I thought they were changing that to just network error

[23:03:58.0000] <JakeA>
Domenic: but that would be observable via fetch(). I think it needs to return an empty response instead.

[23:05:41.0000] <JakeA>
Domenic: I'm proposing the same thing for a similar issue https://github.com/whatwg/fetch/pull/560/files#comment-180417935

[23:07:41.0000] <Domenic>
Well that was the original proposal

[23:08:05.0000] <Domenic>
But to align with existing nosniff it could just be a network error if we think we could get away with it

[23:09:18.0000] <bradleymeck_>
After some time, and being unable to sleep due to it. I think I want to suggest changing import.meta.url to be on the request URL not the response URL

[23:09:59.0000] <bradleymeck_>
I guess making a new issue on just HTML would be the way to do that?

[23:23:14.0000] <annevk>
Domenic: unfortunately it does not quite align and the other bits would require a different factoring too

[23:23:42.0000] <annevk>
bradleymeck_: I guess, but does not seem acceptable

[23:23:48.0000] <Domenic>
bradleymeck_: you can open the issue, but we won't change. It makes it useless for its primary use case.

[23:24:11.0000] <bradleymeck_>
I claim that use case analysis is flawed after being unable to sleep thinking on it

[23:24:47.0000] <Domenic>
I claim knowing the module map key is not a use case we care for on the web

[23:25:06.0000] <bradleymeck_>
I don't think the use case is just around that

[23:25:28.0000] <bradleymeck_>
I think using the Response has mental model problems with `import()` using `import.meta.url`

[23:25:44.0000] <bradleymeck_>
mostly due to how the module map works

[23:25:45.0000] <annevk>
I recommend getting some sleep first

[23:26:02.0000] <Domenic>
import() also resolves relative to the response URL fwiw

[23:26:20.0000] <bradleymeck_>
well this is a can of worms if true

[23:26:27.0000] <bradleymeck_>
since all of this conflicts with node

[23:26:49.0000] <bradleymeck_>
and we can't reenable the --perserve-symlinks approach that this resembles due to resource usage issues

[23:26:52.0000] <Domenic>
Yeah not really sure what node is thinking.

[23:27:05.0000] <bradleymeck_>
well it tried this approach

[23:27:08.0000] <Domenic>
But they can make their own decisions and balance priorities

[23:27:28.0000] <bradleymeck_>
Domenic: it tried this approach and backed away after problems

[23:27:39.0000] <bradleymeck_>
it isn't like it just does what it wants without thinking

[23:28:00.0000] <annevk>
To be clear, this approach has worked fine for CSS et al

[23:28:05.0000] <Domenic>
Sure that's why I said make their own decisions and balance priorities not randomly pick something.

[23:28:17.0000] <annevk>
The web has tested this long before Node

[23:28:45.0000] <bradleymeck_>
in CSS I'm not sure how to compare the extra load operations that this incurs

[23:29:09.0000] <bradleymeck_>
or maybe I'm misreading something about how resolve works

[23:29:14.0000] <Domenic>
(in case you weren't aware static import *also* resolves relative to the response URL)

[23:29:44.0000] <bradleymeck_>
still bad situation in my mind

[23:30:00.0000] <annevk>
And with shared workers

[23:30:02.0000] <bradleymeck_>
unsure how having multiple module records for a response URL is a good thing

[23:30:20.0000] <annevk>
Shared workers even has the request map thingy

[23:30:34.0000] <Domenic>
Anyway, I'm heading to sleep. Hope Node can figure something out, but the web has a solution it's happy with.

[23:31:01.0000] <bradleymeck_>
I'm glad this talk has been as unwelcoming to my hopes as the last 12+months

[23:31:17.0000] <bradleymeck_>
anywho seems like no point in interacting

[23:33:33.0000] <annevk>
bradleymeck_: I’d be interested in seeing how the mismatch might end up affecting developers, but the response URL being authoritative is a long established fact on the web

[23:34:08.0000] <bradleymeck_>
annevk: if the module map was response URL based I wouldn't think it a problem

[23:37:59.0000] <Domenic>
Oooh before I fell asleep I had a hunch and it was ima

[23:38:30.0000] <Domenic>
Er, it was right. The image cache is also request URL keyed. https://html.spec.whatwg.org/multipage/images.html#the-list-of-available-images

[23:40:41.0000] <bradleymeck_>
I don't think that is really a decent comparison when it doesn't run code. Unclear on if your concern is about the HTTP requests being made or the Module Records being made

[23:43:00.0000] <bradleymeck_>
With ESM at least you have to do all the redirects before linking stuff anyway

[00:02:36.0000] <annevk>
bradleymeck_: found the last time this was discussed: https://github.com/whatwg/html/issues/613

[00:15:08.0000] <JakeA>
annevk: (re Mozilla's CORB position) If we started the web again, no-cors wouldn't exist. Therefore I like CORB, and I'd like to see further efforts to limit no-cors. It has merits other than Spectre protection.

[00:15:42.0000] <JakeA>
(I'm not involved in the CORB effort internally at all, so that's a personal view)

[00:16:05.0000] <annevk>
JakeA: yeah, I'm definitely sympathetic to that point of view

[01:35:29.0000] <hsivonen>
Why does mimesniff  allow whitespace bytes to precede "<?xml"  when sniffing for XML?

[01:40:33.0000] <annevk>
hsivonen: perhaps a mistake, seems to have been there since it first got added

[01:40:51.0000] <annevk>
hsivonen: I'm also not sure how well implemented/tested mimesniff is in general

[01:40:58.0000] <hsivonen>
annevk: ok

[01:41:00.0000] <annevk>
hsivonen: the code in Firefox is really old, afaict

[01:41:23.0000] <annevk>
hsivonen: and this algorithm seems to mostly match it, so maybe it was written for Chrome/Safari

[02:47:30.0000] <Ms2ger>
Good to see people are still being helpful in bug trackers: https://bz.apache.org/bugzilla/show_bug.cgi?id=62273#c2

[02:53:53.0000] <Ms2ger>
annevk, is it supposed to be possible to create a zero-sized ImageBitmap?

[02:55:47.0000] <annevk>
Ms2ger: dunno, need to get back to that PR at some point

[04:21:55.0000] <smaug____>
annevk: do you know if anyone is dealing with https://drafts.csswg.org/cssom related issues

[04:22:56.0000] <smaug____>
(context is https://bugzilla.mozilla.org/show_bug.cgi?id=1449584#c11)

[04:23:36.0000] <astearns_>
smaug____: we just appointed Emilio Cobos Álvarez editor of CSSOM (an hour or so ago?)

[04:23:40.0000] <TabAtkins>
smaug____: We're dealing with them piecemeal at the moment; emilio just agreed to be the editor

[04:23:43.0000] <TabAtkins>
dangit, ninja'd

[04:23:48.0000] <astearns_>
:)

[04:26:17.0000] <smaug____>
nice

[04:36:51.0000] <ecobos>
smaug____: I guess now I'm to blame? :-)

[04:55:35.0000] <annevk>
ecobos: thanks for taking that on; hope you got a lot of spare time 😛

[05:39:56.0000] <nox>
https://github.com/w3c/css-houdini-drafts/issues/751

[05:40:04.0000] <nox>
MFW a ticket becomes a wish list

[05:55:39.0000] <Newbie>
hi

[05:55:44.0000] <Newbie>
anybody

[05:56:20.0000] <Newbie>
trhy

[06:03:59.0000] <Ms2ger>
Bye

[06:22:31.0000] <annevk>
Domenic: counter example: https://github.com/mozilla/standards-positions/issues/82#issuecomment-380448688 😃

[06:26:12.0000] <annevk>
Domenic: interested in reviewing https://github.com/w3c/web-platform-tests/pull/8449 too?

[06:26:58.0000] <Domenic>
annevk: I guess nobody else is stepping up, might as well. Assign me so I get an email I can flag? Will do today.

[06:29:10.0000] <annevk>
Thanks, I suspect most people moved on ten years ago or so

[06:29:55.0000] <annevk>
ajax() works just fine Anne, I don't know why you bother

[13:44:26.0000] <tobie>
foolip: ganesh move + rename seems to have been successful.

[13:44:39.0000] <tobie>
foolip: LMK if you see anything fishy

[15:14:28.0000] <foolip>
tobie: will do, thanks!


2018-04-12
[18:31:43.0000] <wanderview>
Domenic: I was reading the webidl commentary in here: https://domenic.github.io/async-local-storage/#storagearea

[18:32:07.0000] <wanderview>
Domenic: just FYI, gecko does have a webidl-to-js binding today... we used it heavily in fxos for things layered on top of IDB

[18:32:20.0000] <Domenic>
wanderview: oh, wow, neat, I should probably fix that then

[18:33:03.0000] <wanderview>
Domenic: today, though, we only have one API (webrtc) using it and there is some talk of removing it: https://bugzilla.mozilla.org/show_bug.cgi?id=1450827

[18:33:05.0000] <Domenic>
I'd love to see some output, and compare it to my spare-time hobby project webidl2js. (Well, mostly TimothyGu's project now :)

[18:35:01.0000] <wanderview>
Domenic: this is the js implementation of the PeerConnection interface: https://searchfox.org/mozilla-central/source/dom/media/PeerConnection.js

[18:35:29.0000] <wanderview>
Domenic: generated binding code calls into it here: https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/RTCPeerConnectionBinding.cpp#9948

[18:35:47.0000] <Domenic>
Oh, I see, it generates C++ bindings that wrap JS on the inside

[18:36:05.0000] <wanderview>
Domenic: we basically do js->c++->js I believe... comment 0 in bug 1450827 discusses some of that

[18:36:07.0000] <Domenic>
I was thinking of a strategy that generates JS bindings directly

[18:36:12.0000] <Domenic>
Yeah comment 0 makes more sense now

[18:36:55.0000] <Domenic>
Yeah here are the generated bindings https://searchfox.org/mozilla-central/source/__GENERATED__/dom/bindings/RTCPeerConnectionBinding.cpp#6105

[18:37:05.0000] <Domenic>
Compare with https://gist.github.com/domenic/1f57ecc0720b3861b58192a67e296e9b

[18:37:34.0000] <wanderview>
Domenic: FWIW, my initial reaction to using "not webidl" in your proposal is that it would make it harder to implement... today we either expose APIs as an es global in spidermonkey or via webidl... this would require building something new and different

[18:37:45.0000] <Domenic>
Actually https://gist.github.com/domenic/b5c395e036781173e123 is a better example

[18:37:58.0000] <Domenic>
Well yeah, this will definitely require something different since it's a module

[18:38:53.0000] <wanderview>
Domenic: whereas if the proposal just used webidl then it would be straightforward to call into IDB c++ code from the new API's c++ code

[18:39:08.0000] <wanderview>
just my initial reaction

[18:39:14.0000] <wanderview>
it would be an easier lift

[18:39:17.0000] <Domenic>
Sure but it's also easy to call into IDB from JS

[18:40:35.0000] <Domenic>
Basically the tradeoff I see is: Web IDL + some extensions for modules + some extension for non-magic brand checks => people writing in C++ have it easy, people writing in JS need to create a webidl wrapper generator. No-Web IDL => people writing in JS have it easy, people writing in C++ need more infrastructure. Unclear on how to weigh those relatively.

[18:40:40.0000] <wanderview>
Domenic: but we don't expose DOM APIs without webidl... I think trying to ask all the browsers to change that would make it harder for browsers to adopt this (at least firefox anyway)

[18:41:07.0000] <Domenic>
I mean we don't expose any DOM APIs via modules right now

[18:41:22.0000] <wanderview>
I don't see why modules is a requirement for an async key-val store API

[18:41:27.0000] <Domenic>
Ah

[18:41:43.0000] <Domenic>
I will refer you to https://github.com/drufball/layered-apis/blob/master/README.md

[18:42:35.0000] <wanderview>
Domenic: ah, I'll read that.. I guess thats the more appropriate place to discuss webidl-vs-not-webidl

[18:44:54.0000] <Domenic>
I don't think webidl vs not-webidl is very important... it's just a specification style thing, modulo the additions we'd have to make to webidl

[18:45:17.0000] <wanderview>
Domenic: it would still be nice to have a formalized idl language (webidl or not) for a module-based system, though... otherwise aren't we back to different APIs and implementations deviating in subtle ways?

[18:45:35.0000] <Domenic>
Well, no, there shouldn't be. There's only one way to implement that class definition.

[18:46:05.0000] <Domenic>
Unlike the streams spec, that class definition isn't just informative... it's normative.

[18:46:30.0000] <Domenic>
So all the stuff IDL takes care of is just automatic from the semantics of JS class definitions

[18:46:34.0000] <wanderview>
ah

[18:46:35.0000] <Domenic>
THis is all very expertimental

[18:46:43.0000] <Domenic>
But I think it's worth experimenting with

[18:47:08.0000] <wanderview>
sure

[18:47:18.0000] <Domenic>
The alternative is basically Web IDL with some fun extended attributes (E.g. [ExposedModule="std:async-local-storage"]), and we might totally go that way in the end.

[18:47:52.0000] <wanderview>
I guess I was just thinking "maybe finally we can get an async key-val API!"... but this stuff seemed like an extra lift, but now I see this is more of test bed for that extra stuff

[18:48:22.0000] <Domenic>
Ah yeah, I can see how that'd be a surprise, sorry about that :)

[18:48:34.0000] <Domenic>
I still think it'll happen! Prototyping this quarter.

[18:48:36.0000] <wanderview>
np

[19:02:10.0000] <wanderview>
Domenic: at least it seems we will be shipping modules soon... I was going to say we didn't even have that pre-req

[02:50:24.0000] <annevk>
> Alternatively, we could give priority to FetchObserver and put the data there.

[02:50:59.0000] <annevk>
JakeA: my initial impression of that idea is good, as JavaScript doesn't really seem to favor branching on exceptions

[02:51:51.0000] <JakeA>
annevk: we already have some exception branching with aborting fetch. But yeah, `FetchObserver` would let us express the abort case too

[02:52:45.0000] <annevk>
Yeah, it's somewhat unfortunate we have many patterns for these things, none of them great

[06:58:39.0000] <wanderview>
annevk: is there a trick to reviewing spec PR's that let you see the final rendered page?

[06:59:06.0000] <annevk>
wanderview: there's a Preview and Diff link in the PR OP

[06:59:36.0000] <wanderview>
annevk: thanks!

[06:59:59.0000] <wanderview>
annevk: for the fragment thing... we probably need a fix in service workers as well

[07:00:23.0000] <wanderview>
annevk: so if the FetchEvent.request.url has a fragment, but the respondWith() response does not, then we propagate the request fragment to the response

[07:00:29.0000] <wanderview>
and deal with fragment collision

[07:00:43.0000] <annevk>
wanderview: that would be good, yes

[07:01:09.0000] <annevk>
wanderview: I can follow-up on that tomorrow

[07:01:17.0000] <annevk>
wanderview: but add a comment please?

[07:01:29.0000] <wanderview>
sure

[07:01:52.0000] <wanderview>
annevk: also wondering if there could be any weirdness if a site has old responses in Cache API with fragment stripped... but new responses are preserving fragment

[07:02:09.0000] <wanderview>
since current Cache API loses the fragment at the disk layer

[07:02:14.0000] <wanderview>
at least in gecko

[07:02:34.0000] <annevk>
wanderview: ah yes, we should probably consider again what to do for the Cache API here too

[07:03:54.0000] <wanderview>
interesting... the prev/next buttons don't work in nightly... but the "j" keyboard shortcut works

[07:03:57.0000] <wanderview>
in diff mode

[07:46:07.0000] <annevk>
oh, I've never actually tried using those

[07:46:22.0000] <wanderview>
annevk: actually... it just seems sometimes it doesn;t work

[07:46:26.0000] <wanderview>
I dunno

[07:46:29.0000] <wanderview>
computers suck

[07:46:40.0000] <wanderview>
please send me hardcopy

[07:47:02.0000] <annevk>
wanderview: via pigeon or boat?

[07:47:22.0000] <wanderview>
annevk: we should get one of those pneumatic tubes installed

[07:47:24.0000] <annevk>
(neither prolly works from here; too far and landlocked)

[08:06:22.0000] <domfarolino>
There's no (internal) way of checking to see if an element was parser-inserted or inserted via script right? (besides for <script> elements given their parser-inserted flag)

[08:06:40.0000] <domfarolino>
There'

[08:40:16.0000] <annevk>
domfarolino: correct

[11:08:25.0000] <annevk>
wanderview: for https://github.com/w3c/web-platform-tests/pull/10449 did you consider the impl implications?

[11:08:43.0000] <annevk>
wanderview: of having to eagerly parse Location

[11:09:13.0000] <annevk>
wanderview: also, I was using async, but there's no examples of how to mix them with promise_test/async_test, so I gave up

[11:09:13.0000] <wanderview>
annevk: I guess I'm not clear what behavior you are seeing and what you expect it to do instead

[11:10:01.0000] <annevk>
wanderview: on "./test" I get a server redirect to "x"; which I store for later

[11:10:17.0000] <annevk>
wanderview: then "/x/" is requested and I reply with the redirect

[11:10:41.0000] <annevk>
wanderview: the expectation is "./x" but the result in Firefox is "/x/x"

[11:11:37.0000] <annevk>
wanderview: unfortunately testing that requires a lot of resources and I'm not sure where to place them in all in a way that would not be confusing to readers

[11:11:50.0000] <annevk>
wanderview: the current setup breaks lint unfortunately

[11:12:17.0000] <wanderview>
annevk: I'm just not convinced its hitting the FetchEvent handler at all is what I was saying

[11:12:27.0000] <wanderview>
annevk: since you don't wait for activation before creating the frame

[11:12:54.0000] <annevk>
wanderview: based on the asserts it's hitting it

[11:13:05.0000] <annevk>
wanderview: otherwise the first assert would fail

[11:13:29.0000] <annevk>
wanderview: but I'll add that

[11:13:44.0000] <wanderview>
annevk: this may be more a necko question if its about how we handle Location headers

[11:14:43.0000] <wanderview>
annevk: anything we do there is probably legacy and long standing... but I'm not sure

[11:15:34.0000] <wanderview>
sorry

[11:16:21.0000] <annevk>
wanderview: sure, but this specific scenario only surfaces with service workers

[11:16:31.0000] <wanderview>
annevk: does it happen in chrome as well?

[11:16:38.0000] <annevk>
wanderview: in any event, if you don't have strong feelings I guess that's fine

[11:16:58.0000] <annevk>
wanderview: I still need to install cacert.pem into macOS (which I think is what Chrome would use)

[11:17:14.0000] <wanderview>
annevk: I would be in favor of making respondWith(Response.redirect()) function the same as a server based redirect

[11:18:04.0000] <annevk>
wanderview: well that will always have a resolved URL so that is fine

[11:18:26.0000] <annevk>
wanderview: I guess this would be different from when you construct a Response with a Location header manually

[11:19:09.0000] <annevk>
Which seems unfortunate; but it also seems bad that the service worker can subvert the server's intent for redirects, given how special redirects are

[11:23:28.0000] <annevk>
Anyway, thanks for the feedback so far; I guess I'll try clean this up a bit tomorrow and also test some other browsers and synthetic redirects and such (and make sure all that is still defined correctly)

[11:24:13.0000] <wanderview>
annevk: btw, an async function example: https://searchfox.org/mozilla-central/source/testing/web-platform/tests/service-workers/service-worker/worker-client-id.https.html#35-55

[11:26:58.0000] <annevk>
wanderview: thanks; I wonder how that ends up working; guess I need to study async/await again a bit

[11:30:01.0000] <annevk>
anyway, this was rather fun to do; hope to play more with service workers from now on


2018-04-13
[07:11:29.0000] <wanderview>
TIL about "hixie english": https://codepen.io/tigt/post/notes-on-lang

[07:18:31.0000] <glook>
Thanks for sharing that wanderview, very interesting!

[07:44:10.0000] <gsnedders>
wanderview: it has a spec and everything!

[09:22:44.0000] <domfarolino>
annevk: Would you agree it would be a good idea to file an initial issue in HTML to gather some initial implementer interest around Priority Hints? That's what I'm thinking; we've talked with Domenic a bit about adding it to HTML a bit too

[09:32:58.0000] <annevk>
domfarolino: yeah, filing issues against stuff you monkey patch is what I try to convince everyone to do

[09:33:10.0000] <annevk>
domfarolino: https://annevankesteren.nl/2014/02/monkey-patch

[09:45:12.0000] <domfarolino>
annevk: Makes a lot of sense. Nice website styles too :)

[12:01:27.0000] <justJanne>
annevk: next time you claim no strict web spec would ever become popular, you might want to take a look at AMP

[12:53:15.0000] <annevk>
Don’t remember making that claim

[12:53:29.0000] <annevk>
JavaScript is pretty strict


2018-04-14
[18:12:11.0000] <a-ja>
...but what do you *really* feel about W3C DOM CR?!

[09:40:11.0000] <smaug____>
all this automatic wpt syncing is getting so super nice.  ++jgraham & co


2018-04-15
[01:37:24.0000] <annevk>
wanderview: JakeA: small update: I added a certificate to macOS and found Chrome fails the test, but Safari passes

[01:40:05.0000] <annevk>
I guess Safari implements Fetch far more properly

[02:47:20.0000] <gsnedders>
FWIW: My birthday is next Friday; I'm in SF. If anyone wants to be part of something somewhere, ping me.

[09:19:00.0000] <wanderview>
annevk: isn't this something that webkit implemented early while we were still discussing?

[09:19:24.0000] <wanderview>
or am I thinking of something else and this should have been implemented this way from the start?

[09:21:48.0000] <annevk>
wanderview: a lot of this was set up this way upfront, but opaque redirects did come later; and I actually have not checked all details in Fetch again so should prolly keep quiet

[09:34:41.0000] <annevk>
wanderview: yeah so my comment about Safari doesn't make any sense

[09:35:21.0000] <annevk>
wanderview: they basically impl the change proposed in https://github.com/whatwg/fetch/pull/633 (where an opaqueredirect isn't parsed again)

[09:36:03.0000] <wanderview>
annevk: ah, ok

[13:33:54.0000] <yuhong>
So I assume that the HTML5 buzzword made more sense when things like IE6 was common, right?

[13:34:21.0000] <yuhong>
Of course, I do agree that it was probably a poor fit as a W3C standard from the beginning.

[13:34:30.0000] <yuhong>
Hence the web developer edition compromise.


2018-04-16
[21:24:41.0000] <annevk>
HTML5 made sense because HTML4 was the last iteration at the time

[21:25:17.0000] <annevk>
We did not have the foresight that version less is better

[23:46:31.0000] <annevk>
foolip: https://github.com/whatwg/dom/issues/410

[01:12:50.0000] <tobie>
annevk: hey—think you can give me admin privs on whatwg org, so I can better identify the issue?

[01:21:48.0000] <annevk>
tobie: write access to the repository is not sufficient?

[01:23:00.0000] <tobie>
annevk: I dunno. I wanted to check how the teams were structured permission and visibility wise. Maybe you can just share a screenshot. That would work too.

[01:23:19.0000] <tobie>
annevk: I'm just not sure where this info is located though.

[01:23:52.0000] <tobie>
My hunch is this is some kind of weird team visibility issue.

[01:31:02.0000] <annevk>
tobie: there's no settings for teams really

[01:32:08.0000] <tobie>
https://help.github.com/articles/changing-team-visibility/

[01:32:17.0000] <annevk>
tobie: hmm yeah

[01:32:20.0000] <annevk>
tobie: so "A visible team can be seen and @mentioned by every member of this organization."

[01:32:24.0000] <annevk>
tobie: it's visible, so...

[01:33:13.0000] <tobie>
annevk: Right. Let me find out what the deal is with GH apps and mentioning teams.

[01:33:48.0000] <annevk>
tobie: maybe if pr-preview were an actual GitHub account like whatbot it would work better?

[01:34:22.0000] <tobie>
annevk: that bit would. But lots of other things would be a lot more complex. It would also be less secure.

[01:34:46.0000] <annevk>
interesting

[01:34:56.0000] <annevk>
I guess I don't really know enough about all these things

[02:06:38.0000] <nox>
gsnedders: https://github.com/w3c/dom/issues/175#issuecomment-381291015

[02:07:06.0000] <nox>
TFW circumstances make individuals defend some of the biggest corps in the world, what a time to be alive. :)

[02:14:17.0000] <foolip>
annevk: looking at document.lorigin removal

[02:34:38.0000] <annevk>
foolip: let me know if me pinging you for stuff gets too much; the main problem I have is that there's not a lot of people that actually reply

[02:34:50.0000] <annevk>
foolip: especially for web-platform-tests the whole OWNERS system is rather busted

[02:35:25.0000] <foolip>
annevk: no worries, you tend to ping me for things I enjoy and care about, which is probably no coincidence :)

[02:36:07.0000] <foolip>
annevk: I know Document/HTMLDocument is waiting for some reaction from me, too, somewhere in my inbox

[02:36:54.0000] <annevk>
foolip: I think that one is mostly about making document creation in HTML not suck, since then it'd be rather easy

[02:37:23.0000] <annevk>
Unfortunately it's a rather intertwingled mess

[02:37:45.0000] <foolip>
annevk: yeah, I think at this point clearly we should unsplit them, and figuring out all the creation points and maybe picking the prototype in the non-interoperable cases is the remaining work

[02:40:27.0000] <annevk>
That's the main issue I have with the castle Ian created. That there's actually a fair bit of prose intertwined with algorithms. If it were all algorithms it would've been easier.

[02:52:43.0000] <tobie>
annevk: curious what a non-busted OWNERS system would look like to you.

[02:53:35.0000] <annevk>
tobie: remove OWNERS who haven't reviewed after some time

[02:53:56.0000] <annevk>
tobie: (assuming PRs for stuff they own came in)

[02:54:21.0000] <annevk>
There's probably some complexity there in how exactly that should work, but the current system where you get a list of 10 people and none of them does anything for months is just painful

[02:54:52.0000] <annevk>
It makes it so those 10 people probably will forever ignore that entire repository and the person submitting the PR has no idea that nothing will happen

[02:55:24.0000] <tobie>
annevk: interesting. foolip, that ties in well to some of the things we discussed over mail wrt to issue triaging.

[02:56:19.0000] <tobie>
foolip: and more generally the migration of wpt to the GH org.

[02:57:03.0000] <foolip>
tobie: haven't looked at that yet, sorry :)

[02:57:54.0000] <tobie>
foolip: np. I wasn't trying to passive/aggressively suggest you should. :D

[02:58:37.0000] <tobie>
foolip: just pointing out that there was an even larger group of problems my suggestion could be a solution to.

[03:00:05.0000] <jgraham>
TabAtkins: The idea that the CSSWG is doing just fine at the W3C seems kind of like Stockholm Syndrome when you consider that every time we try to improve the testing situation we are told that there are a whole bunch of CSS-only Process-only requirements that add an order of magnitude in complexity

[03:08:22.0000] <tobie>
jgraham: can you elaborate on how you feel this relates to the W3C process, rather than a workmode the CSSWG would adopt regardless?

[03:29:02.0000] <jgraham>
tobie: We keep hearing that the requirements around result collection for process transitions mean that the CSSWG needs a bunch of bespoke infrastructure for e.g. running manual tests, overriding the results of reftests, and storing results. Maybe they would have the same requirements without the belief that they are Required By Process, but they would have to invent some other reason

[03:34:30.0000] <jgraham>
(and also it's apparently not possible for a bunch of senior people at some of the the richest companies in the world to organise resources to actually support those Very Important Requirements)

[03:34:41.0000] <nox>
jgraham: How come so much CSS stuff relies on manual tests btw?

[03:34:59.0000] <foolip>
jgraham: A charitable read of the situation is that at some point for some CSS spec, the WG tried to do it really well and noticed all these problems and found solutions. And no other group has made that kind of attempt, instead waiting it out and maybe filing issues like https://github.com/w3c/web-platform-tests/labels/type%3Auntestable

[03:36:59.0000] <jgraham>
foolip: A more historically motivated view is that CSS2.1 had all kinds of problems getting to Rec. and that experience informed everything since

[03:37:24.0000] <jgraham>
But my point was not that these things aren't actually required by process

[03:38:00.0000] <foolip>
jgraham: sure, but they are kinda motivated by the CSS2.1 experience, right? and the process does say *something* about interoperable implementations.

[03:38:08.0000] <jgraham>
It was the assertion that the W3C Process isn't causing problems for CSS doesn't match my  observations

[03:39:49.0000] <jgraham>
foolip: Right. I mean it seems like other groups manage, so I'm not convinced that the CSSWG read of the Process document is the only valid one. But whether or not they're actually right isn't so relevant as their belief that they are right causing issues

[03:40:27.0000] <jgraham>
nox: A combination of stuff that is actually hard to test in automation, and stuff that could be automated but isn't

[03:43:29.0000] <foolip>
jgraham: AFAICT the main effect of wanting to testing things well has been manual tests and some manual test results management, which we can help automate away. Seems like much of the rest of the complexity is because of levels, would you agreee?

[03:45:50.0000] <jgraham>
foolip: I think that sentence implicitly understates the first part. We can automate some things that require manual tests, but with features like media queries that depend on specific hardware I'm pretty sure there are always going to be features for which manual tests will be written (and then probably run ~once at Process transition time)

[03:46:09.0000] <jgraham>
I also agree that levels vs living standards is a source of complexity

[03:48:06.0000] <foolip>
jgraham: Sure, we can only fix maybe 80% of it. Maybe we should support submitting manual results to wpt.fyi? If tested using the same browser+wpt version as an automated run it'd be useful I think.

[03:48:35.0000] <jgraham>
foolip: I certainly wouldn't object to that

[03:52:27.0000] <jgraham>
foolip: (that would be another reason to allow multiple chunks of results for a single revision to be uploaded)

[03:53:17.0000] <jgraham>
foolip: Although whether that will be enough or there will be something about crowdsourcing, I couldn't tell you

[03:53:58.0000] <foolip>
jgraham: you mean that the css build system currently allows for lots of people to collaborate on a single run?

[03:57:52.0000] <jgraham>
foolip: Yes

[03:58:27.0000] <jgraham>
http://test.csswg.org/harness/

[03:59:38.0000] <foolip>
jgraham: Well, that's interesting. I guess technically it's like sharding, but how to keep track of remaining work?

[03:59:56.0000] <foolip>
Oh wait, we're not in #testing :)

[04:00:59.0000] <jgraham>
foolip: We aren't. Think of it as a useful less in how the sasuage is made for other WHATWG participants  :)

[04:01:59.0000] <jgraham>
foolip: Without a database-based design isn't hard to see how this would work. wpt.fyi seems to have been designed around a different set of requirements with minimal knowledge about the actual tests

[04:06:18.0000] <foolip>
jgraham: yep. https://github.com/web-platform-tests/results-collection/issues/123 would allow us to list missing tests though. Starts to be a bit more work than just submitting results though

[04:08:51.0000] <jgraham>
Yeah, of course we can manipulate the generated json files to include everything in the manifest, not just the ones we actually for results for. But you'd need some process that read all the json data to generate a list of missing tests

[04:57:12.0000] <zcorpan>
Domenic: Do you have any opinion on https://github.com/w3c/fxtf-drafts/issues/275 ?

[04:57:25.0000] <zcorpan>
Also hello everyone

[07:24:06.0000] <Domenic>
zcorpan: it does seem a bit more idiomatic, but probably extra work that's not worth it if this is already shipping in a few places

[07:24:33.0000] <Domenic>
(and hello!)

[07:27:52.0000] <gsnedders>
jgraham, foolip: sent you email about the testing discussion last week

[07:28:14.0000] <Domenic>
Also, doing it in the truly idiomatic way, by using this.constructor, which would work on user-defined subclasseses as well, seems rather un-Web IDL-ey.

[07:28:51.0000] <zcorpan>
Domenic: yeah I agree with the last point

[07:30:28.0000] <zcorpan>
Domenic: can you comment in the issue? :)

[07:30:41.0000] <Domenic>
Sure

[07:31:13.0000] <zcorpan>
thx

[07:39:34.0000] <jgraham>
gsnedders: Thanks

[07:51:33.0000] <zcorpan>
Hmmmmmmmmmmm. Is https://html.spec.whatwg.org/#read-html correct in initializing a new Document when the response arrives, in wpt payment-request/allowpaymentrequest/setting-allowpaymentrequest-timing.https.sub.html ? Seems like it will run "set the allow* flags" twice.

[07:53:53.0000] <nox>
Friends don't send friends to the monopage version of the HTML spec. :P

[07:58:12.0000] <zcorpan>
https://bugs.chromium.org/p/chromium/issues/detail?id=819800#c6

[07:59:07.0000] <zcorpan>
nox: maybe we should have a checkbox to prefer multipage and automatically redirect

[07:59:35.0000] <nox>
zcorpan: Just wanted to say "Friends don't X friends Y". :)

[08:02:14.0000] <Ms2ger>
Friends don't let friends' jokes fall flat?

[08:02:46.0000] <Ms2ger>
zcorpan, since you're taking about Document creation, the default answer would be "no"

[08:03:20.0000] <jgraham>
Friends don't let friends apartments?

[08:04:28.0000] <Ms2ger>
Friends don't pun friends

[08:07:51.0000] <zcorpan>
Ms2ger: I'd be happy to spend a year fixing document creation and navigation

[08:08:52.0000] <nox>
Ms2ger: I disagree, they do in total impunity.

[08:10:47.0000] <Ms2ger>
zcorpan, if I ever find someone who'd pay for that, I'll let you know :)

[08:11:29.0000] <zcorpan>
Ms2ger: thanks :)

[08:57:20.0000] <jwalden>
to all you haters out there, puns are good

[08:57:50.0000] <jwalden>
except in the C++ object model

[08:58:54.0000] <jgraham>
Those just aren't your type of puns?

[08:59:10.0000] <jwalden>
truth

[09:00:35.0000] <Ms2ger>
You got jwalden p'nned in a corner there

[10:49:31.0000] <TabAtkins>
jgraham: Assuming that my statement about CSSWG working must be wrong because of the group doing something annoying in your own wheelhouse makes some pretty strong assumptions about what things *I* care about in terms of how the group works...

[10:50:52.0000] <TabAtkins>
(While I have no opinion on most of the testing stuff, I'll note that CSS *is* fairly unique in that it *does* have an actual, unavoidable need for a goodly number of manual tests, which most specs don't have as their tech isn't directly interacting with user interaction.)

[11:16:26.0000] <jgraham>
TabAtkins: You didn't scope your claim about it being "just fine" only in terms of the bits that you personally care about. But sure, if that's your criteria then you're making a statement that's impossible to disagree with (and also uninteresting)

[11:16:51.0000] <TabAtkins>
lol ok whatever dude

[11:17:56.0000] <tantek>
This sounds more like a twitter thread

[11:18:45.0000] <TabAtkins>
It was ^_^

[11:25:32.0000] <jgraham>
The testing problems in particular are mostly being externaised, and group members repeatedly state that they're a result of Process. So finding out that people in the group don't care about the problems is unsurprising (because the costs are being externalised)

[11:26:03.0000] <jgraham>
Anyway you are right that this is not a useful discussion

[11:26:07.0000] <jgraham>
Sorry

[11:34:48.0000] <tantek>
jgraham FWIW I am interested in helping improve the situation around testing, tests, test suite in CSS

[11:35:06.0000] <tantek>
as is gsnedders

[11:35:36.0000] <tantek>
we've raised issues and discussed a bunch last week at the CSSWG f2f, so it is a priority in so far as group time is being spent on it

[11:36:03.0000] <tantek>
btw I don't think anyone brought up "Process" as a excuse for any problems

[11:36:21.0000] <tantek>
more like crappy/abstract/unusable docs/websites

[11:39:57.0000] <TabAtkins>
tantek: One aspect that can reasonably be interpreted as "Process makes us do it" is our reliance on some level of manual tests; some features *can't be tested* except manually, so if we want to proceed thru Process, we need to write manual tests, which make wpt generally unhappy.

[11:40:19.0000] <TabAtkins>
I'm unsure what else might fall under that rubric, or might have been read as such due to bad communication in the past.

[11:40:58.0000] <TabAtkins>
(But "Process makes us do it" is an uncharitable reading anyway; *good testing* makes us do it. The fact that Process requires good testing is a second-level effect.)

[11:40:59.0000] <tantek>
"Process"? sounds more like engineering discipline like TDD - what's the point of any feature if you can't (or refuse to make) test it

[11:41:11.0000] <tantek>
ah yes, *good testing*

[11:41:28.0000] <tantek>
right agreed, Process is just pointing at existing good engineering practice

[11:45:33.0000] <jgraham>
tantek: The meeting notes expplicitly mention Process transitions as driving requirements

[11:45:59.0000] <jgraham>
And FWIW other groups with similarly difficult features to test have been more proactive about driving automated solutions

[11:46:54.0000] <jgraham>
e.g. adding test-only APIs to reduce the surface area of manual tests

[11:48:05.0000] <jgraham>
(I apparently lost my link to the meeting notes so I can't look up specifics)

[11:48:13.0000] <tantek>
jgraham: will take your word for it

[11:48:28.0000] <tantek>
often such mentions of "Process" are shorthand for explaining engineering discipline (not everyone in CSSWG is an engineer)

[11:48:47.0000] <tantek>
would be interesting to explore CSSOM additions to reduce surface area of manual tests

[11:48:57.0000] <tantek>
I expect we'd hit a limit at some point, but that's no reason not to try

[11:49:09.0000] <TabAtkins>
jgraham: Hm, I'd love an example of such a test-only API, any pointers?

[11:51:52.0000] <jgraham>
https://wicg.github.io/webusb/test/ for example

[12:17:43.0000] <TabAtkins>
Ooh, thanks, that's useful.

[15:55:46.0000] <gsnedders>
jgraham: the big problem with Writing Modes I think is the tests are broken under HiDPI, and under UI we have a bunch of issues open but they're hard to test things

[15:56:02.0000] <gsnedders>
(like cursors using the correct gamma when they're an image)

[15:56:18.0000] <gsnedders>
which is easy to implement wrong and hard to test in an automated fashion

[15:56:39.0000] <gsnedders>
like if I'm not mistaken, that's a hard test to write in C++

[16:02:27.0000] <tantek>
indeed

[16:05:49.0000] <gsnedders>
(I could be mistaken and some OS might somehow make it easy)

[16:06:31.0000] <tantek>
or rather, none that we know of, and if someone does know better, please let us know!


2018-04-17
[02:13:00.0000] <annevk>
Hmm, someone is trying to convince me to give XMLHttpRequest feature parity with fetch(); or at least that one feature nobody ever adopted but they need

[02:24:36.0000] <jgraham>
gsnedders: I mean, I don't disagree that some stuff is hard to test. But writing manual tests that are run once at transition time, and requiring a bunch of special infrastructure to support that exact use case, seems like the worst of all worlds in that it's high effort but has little interop impact

[02:28:48.0000] <jgraham>
(which is, for the record, not an example of good engineering discipline)

[04:26:14.0000] <annevk>
JakeA: https://github.com/whatwg/infra/pull/172

[04:31:52.0000] <zcorpan>
https://github.com/w3c/web-platform-tests/issues/314 looks like an interesting issue

[04:54:04.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/issues/703

[06:05:13.0000] <wanderview>
annevk: do you know where prefetch is defined?

[06:06:02.0000] <annevk>
wanderview: "defined" https://w3c.github.io/resource-hints/#speculative-resource-prefetching-prefetch

[06:06:24.0000] <annevk>
wanderview: there's one or more issues against Fetch about improving its definition

[06:06:57.0000] <wanderview>
annevk: does this define how a prefetch is loaded?  trying to determine if it should go through a service worker

[06:07:54.0000] <annevk>
wanderview: dunno

[06:08:02.0000] <wanderview>
annevk: I'll file an issue I guess

[06:08:58.0000] <annevk>
I really hope they fix it holistically instead of the whack-a-mole game folks are playing now

[06:12:18.0000] <wanderview>
annevk: https://github.com/w3c/ServiceWorker/issues/1302

[07:06:58.0000] <jruiz>
Hello

[07:10:15.0000] <jruiz>
Can I ask a question to the experts that are in this channel?

[07:15:22.0000] <railgun>
no need to ask if you can ask questions, just ask!

[07:15:56.0000] <railgun>
if someone knows the answer, they'll respond :)

[07:16:37.0000] <jruiz>
railgun Ok, thanks ;)

[07:17:33.0000] <jruiz>
It's probably a very stupid question, but I'm curious about the opinion of web technology leaders.

[07:19:01.0000] <jruiz>
Let's imagine that I want to be as expert as possible in frontend. The logic indicates that the way would be to learn HTML, CSS and JavaScript.

[07:21:11.0000] <jruiz>
But would it be more logical to start perhaps by reading the DOM technology?

[07:23:03.0000] <railgun>
jruiz: it depends on what you want to do

[07:23:04.0000] <jruiz>
I ask this because in the documentation the first two chapters is not directly what we call HTML elements.

[07:23:32.0000] <railgun>
there are a lot of topics in front-end alone, I don't think anyone knows everything

[07:23:58.0000] <jruiz>
I would like to start from the base. Although it is difficult and dense.

[07:24:41.0000] <railgun>
I'd say learn the basics first, then learn about the specifics as you need them

[07:25:15.0000] <railgun>
MDN is a great resource https://developer.mozilla.org/en-US/docs/Learn

[07:25:24.0000] <jruiz>
I understand that when using HTML elements, I learn the principles of the DOM. But sometimes I start inspecting elements from the web developer tool, and I do not understand what I see.

[07:28:55.0000] <railgun>
try reading through https://developer.mozilla.org/en-US/docs/Tools and/or https://developers.google.com/web/tools/chrome-devtools/

[07:29:28.0000] <railgun>
it will teach you about all the different parts of developer tools, but you should already know some HTML/CSS

[07:30:57.0000] <jruiz>
Yes, I have knowledge of HTML and CSS. That's why I was wondering if it would not be a good idea, read about DOM now, or directly go to JavaScript.

[07:31:38.0000] <jruiz>
I'm going to read those last two links that you indicate to me. Tha

[07:31:41.0000] <jruiz>
Thanks

[07:31:47.0000] <jruiz>
;)

[07:33:17.0000] <railgun>
I am not an expert in DOM, but I know enough to use developer tools

[07:33:58.0000] <railgun>
if you read https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction it covers DOM + some JavaScript

[07:34:39.0000] <railgun>
I don't think you need to read the spec in this case

[07:41:45.0000] <railgun>
Good luck!

[07:49:29.0000] <Domenic>
I think you'll need some basic JavaScript knowledge to make sense of the DOM stuff. Since the DOM is a large set of JS objects that represent the HTML you see, knowing what a JS object is and how it works is good background info.

[07:56:16.0000] <gsnedders>
jgraham: I agree

[07:56:40.0000] <gsnedders>
jgraham: what I wonder about really is how to replace a lot of the old visual tests

[07:56:52.0000] <gsnedders>
jgraham: because not all of them can be reasonably turned into reftests

[07:58:05.0000] <annevk>
jruiz: learn some basic JavaScript as Domenic suggests; then you'll be able to make sense of APIs more easily

[07:58:47.0000] <annevk>
The other thing I did, but might not be generally applicable, is learn how IDL roughly maps to JavaScript, so it's easier to read the various standards

[08:52:10.0000] <jyasskin>
wanderview: I've left my current understanding on your issue. Kinuko may correct my summary.

[08:52:44.0000] <wanderview>
jyasskin: thanks

[08:52:48.0000] <jyasskin>
wanderview: I suspect the current behavior isn't actually the behavior we ought to define.

[08:53:13.0000] <wanderview>
jyasskin: yea, I doubt a FetchEvent makes sense for something like prefetch... but I dunno... maybe yoav has opinions

[08:55:17.0000] <jyasskin>
wanderview: It *could* make sense, if it were on the right Service Worker, but right now it's not on the right SW. And it's probably easier to just skip SW than identify the right one.

[08:55:45.0000] <wanderview>
jyasskin: oh....  uh... let me re-read what you wrote!

[08:55:57.0000] <jyasskin>
This is https://github.com/w3c/resource-hints/issues/78

[08:57:40.0000] <wanderview>
jyasskin: I'm not sure about triggering other origin service workers from a <link> element... that sounds a lot like a tracking vector similar to foreign fetch to me

[09:28:16.0000] <Domenic>
annevk: to be clear, I am in general in favor of moving from flags to booleans, but I think we should probably figure out a more holistic strategy, and not upgrade piecemeal. Things I am concerned about include the possibility of tri-state, and how "call x with y and true" is less clear than "call x with y and the z flag set"

[09:29:11.0000] <Domenic>
For the latter, in general I think some kind of named arguments convention would be good to spell out.

[09:29:42.0000] <annevk>
Maybe, I'm not sure I wanna force named arguments everywhere

[09:30:02.0000] <Domenic>
Yeah, definitely optional

[09:30:07.0000] <annevk>
Though having unordered arguments would be good to have at times, to make things extensible without having to refactor all the things

[09:30:23.0000] <annevk>
I.e., dictionaries for specs

[10:23:03.0000] <JakeA>
I like how Python does this, where arguments have an order but they're also named

[10:23:12.0000] <JakeA>
Seems like a good convention to copy

[10:30:42.0000] <domfarolino>
I also like this ^

[10:31:09.0000] <domfarolino>
annevk: Thanks for recent pings on issues etc, might be a few days before I'm as active as I'd like with finals approaching etc

[10:52:03.0000] <annevk>
I don’t really see how ordered helps with extensions and not having to refactor all callers

[10:54:30.0000] <JakeA>
it doesn't. Sorry, was just a general reply to unordered arguments / named arguments

[11:53:57.0000] <Domenic>
I think the idea is that you can call either using ordered/unnamed or unordered/named, at the caller's choice.

[11:54:23.0000] <Domenic>
See example 4.4 at http://www.diveintopython.net/power_of_introspection/optional_arguments.html


2018-04-18
[20:46:15.0000] <yuhong>
https://www.reddit.com/r/javascript/comments/8d0bg2/oracle_owns_javascript_so_apple_is_taking_down_my/?st=jg4jzu7k&sh=00af8d6c

[20:46:27.0000] <yuhong>
I wonder if we should depreciate the JavaScript name.

[23:56:20.0000] <annevk>
jochen__: any news on restricting ports more?

[00:05:58.0000] <jochen__>
for cookies?

[00:06:10.0000] <jochen__>
no..

[00:13:48.0000] <annevk>
jochen__: and document.domain and Webauthn and soon Token Binding

[00:14:08.0000] <annevk>
jochen__: maybe we should at least do it for Webauthn and Token Binding?

[00:16:55.0000] <jochen__>
i'm pretty disappointed webauthn isn't just origin scoped

[00:17:24.0000] <jochen__>
but I'm all in favor to restrict both to default port anyways

[00:19:18.0000] <annevk>
jochen__: sigh, given https://w3c.github.io/webauthn/#rp-id I guess that's not possible

[00:19:45.0000] <annevk>
jochen__: I'll file an issue and copy you to see what folks think

[00:20:03.0000] <jochen__>
thx

[00:25:27.0000] <annevk>
jochen__: maybe you could ask about this in the Token Binding thread?

[03:07:26.0000] <annevk>
kochi: https://github.com/w3c/web-platform-tests/pull/9968

[05:59:37.0000] <annevk>
jochen__: \o/

[06:00:17.0000] <annevk>
port-restricted registrable domains ftw

[08:08:21.0000] <Domenic>
annevk: at BlinkOn this week so reviews might be sparse. I know you've pinged me on a few things.

[08:09:22.0000] <annevk>
Domenic: aah have fun

[08:09:46.0000] <annevk>
Domenic: hopefully there'll be one in Europe again at some point and then I'll make an extra effort to join you all

[08:10:48.0000] <Domenic>
Yeah you should definitely come one of these times, would be great I think.

[09:03:32.0000] <jochen__>
the token binding intent makes it look like I'd be super involved in that work,... but i'm not

[09:13:18.0000] <annevk>
heh, I was mainly asking since you care about this extra bit

[09:32:53.0000] <jochen__>
yeah, np


2018-04-19
[22:59:40.0000] <Domenic>
annevk: https://infra.spec.whatwg.org/#byte-sequence is "space separated" correct here?

[22:59:48.0000] <Domenic>
Oh, nevermind

[00:02:42.0000] <foolip>
/me flies to the homeland of annevk to smell (?) the tulips

[00:03:48.0000] <annevk>
foolip: let me know what that's like and if it's something for kids; I don't recall ever going to those fields

[00:04:57.0000] <annevk>
foolip: I don't know what your kid(s?) are into, but Madurodam was a big hit with Oscar

[00:05:34.0000] <foolip>
annevk: we're actually leaving Edison (only kid) with my parents

[00:06:17.0000] <annevk>
Ah, that sounds rather relaxing 😊

[00:10:07.0000] <annevk>
Enjoy!

[00:12:03.0000] <Ms2ger>
I've never noticed tulips to smell, particularly

[01:33:46.0000] <ato>
annevk: Looking at pictures, I think that would be a big hit with me as well (-:

[01:34:29.0000] <annevk>
ato: heh, yeah, it's good

[02:14:42.0000] <foolip>
PSA: check https://github.com/orgs/web-platform-tests/invitation if you don't read all your GitHub email very carefully

[02:14:49.0000] <foolip>
nox: ^

[02:15:55.0000] <nox>
foolip: Do we have a logo? :P

[02:17:33.0000] <foolip>
nox: see https://bit.ly/wpt-transition, being discussed semi-seriously

[02:18:01.0000] <nox>
Nice! Now we just need a html5lib logo.

[02:18:10.0000] <nox>
https://irccloud.mozilla.com/file/TrCgZ5RO/Capture%20d%E2%80%99e%CC%81cran%202018-04-19%20a%CC%80%2011.15.43.png

[02:18:12.0000] <nox>
:D

[02:18:40.0000] <foolip>
nox: we don't have any perfect candidate yet, so we'll see :)

[02:21:58.0000] <annevk>
Seems to have gotten a bit contentious since last time

[02:22:06.0000] <annevk>
Even negative points

[03:54:12.0000] <annevk>
Oooh fun times; the Content-Type Firefox extracts for navigation is different from the one it extracts for Blob objects

[03:54:46.0000] <annevk>
Chrome is better, but drops stuff on the floor

[04:01:34.0000] <Zegnat>
Hmm. I was reading about DOMTokenList and I don’t really understand the use of `supported tokens`. It doesn’t look like the validation steps are ever used when tokens are added/toggled/replaced to the list. So a DOMTokenList may contain unsupported tokens no matter how the list was defined? Or is there some implied moment when the validation steps must be executed?

[04:15:42.0000] <Ms2ger>
Zegnat, looks like it's only used for supports(), yeah

[04:16:58.0000] <Zegnat>
Yep. That surprised me. Any idea why the list isn’t limited to only supported tokens, e.g. by doing validation on add()?

[04:19:37.0000] <Ms2ger>
The platform doesn't enforce what values an attribute can take at all, so it'd be weird to start doing it here, without even getting a guarantee (because setAttribute / plain HTML)

[04:20:39.0000] <Ms2ger>
Also, it's probably better not to block new values in old browsers that don't support them yet

[04:22:51.0000] <Zegnat>
That makes sense, thanks!

[04:26:36.0000] <Ms2ger>
My pleasure

[04:26:39.0000] <nox>
foolip: Voted.

[04:36:15.0000] <Ms2ger>
nox, you don't get a vote, sorry :)

[04:36:29.0000] <nox>
Why? ( ._.)

[06:08:43.0000] <annevk>
jgraham: so part of the reason https://travis-ci.org/w3c/web-platform-tests/jobs/368620442 is failing seems to be that I'm using non-ASCII in a test title

[06:09:03.0000] <annevk>
jgraham: encoded = msg.encode("utf8", "backslashreplace").decode("utf8")

[06:38:46.0000] <jgraham>
annevk: Looks like we're trying to double-encode there

[06:38:50.0000] <jgraham>
Silly Python

[06:39:19.0000] <annevk>
And there's no tests?

[06:39:41.0000] <annevk>
I guess it's specific to the Firefox bot

[07:36:33.0000] <jgraham>
annevk: Specific to the travis integration

[07:40:45.0000] <jgraham>
annevk: https://pastebin.mozilla.org/9083418 looks like a possible patch. Mind trying it out?

[07:41:38.0000] <annevk>
jgraham: locally? I'm not sure I even have all the dependencies

[07:49:13.0000] <jgraham>
annevk: I was thinking you could push it to the PR and see if travis passes

[07:49:40.0000] <annevk>
aah okay, will do later

[07:49:43.0000] <DDK_>
A quick curious question.. Does anyone know of a way to use inspect element to legitimately change the value of an online shopping cart from "x" amount to "0"

[07:49:43.0000] <DDK_>
Just curious to see if it works

[10:14:08.0000] <annevk>
I guess Fetch is just gonna define parsing of all HTTP headers…

[10:55:46.0000] <MikeSmith>
annevk: ?

[10:56:16.0000] <annevk>
MikeSmith: see mimesniff issue on Content-Type

[10:57:31.0000] <annevk>
MikeSmith: have been contemplating figuring out parsers for other core header values too, e.g., Content-Length

[10:57:58.0000] <annevk>
Content-Length: 42,42 and such

[10:58:14.0000] <tantek>
The HTTP spec doesn't define that?

[10:58:33.0000] <annevk>
tantek: in theory, but not implemented that way

[10:58:54.0000] <tantek>
oh boy

[10:58:56.0000] <MikeSmith>
good times

[10:59:16.0000] <tantek>
/me braces himself for the sequel to URL / IRI spec battles

[10:59:48.0000] <annevk>
tantek: I have filed upstream issues and ping mnot now and then

[10:59:58.0000] <tantek>
that is good to hear :)

[11:00:14.0000] <tantek>
I suppose this was inevitable, cleaning up the original TimBL trifecta as it were (HTML, URL, now HTTP)

[11:03:38.0000] <annevk>
All the primitives belong to us (a handful)

[12:10:13.0000] <jyasskin>
The HTTPWG is working on a revision of the core specification, so this is a good time to see if they have the appetite to do it right. (Probably not, but still.)

[12:10:49.0000] <annevk>
jyasskin: yeah am aware, and that’s where my issues are filed

[12:11:00.0000] <jyasskin>
\o/

[12:11:51.0000] <jyasskin>
e.g. https://github.com/httpwg/http-core/issues/58

[12:11:55.0000] <annevk>
jyasskin: but even \r as header separator did not make it last time around so…

[12:15:00.0000] <annevk>
(I filed most issues when that repo was called http11bis or some such.)

[12:26:35.0000] <railgun>
annevk: a bit off-topic, but would any changes to the spec now imply an HTTP/2.1? I've been out of the loop for a while now and only recently learned about HTTP/2...

[12:35:53.0000] <annevk>
railgun: it’s a little more complicated; header value parsing is shared across HTTP versions for instance; the \r thing I mentioned only affects HTTP/1, etc.

[12:37:15.0000] <zcorpan>
hsivonen: re https://github.com/w3c/web-platform-tests/issues/10208 , the html parser waits for 1024 bytes or encoding declaration?

[12:52:04.0000] <wanderview>
zcorpan: while trying to get around the parser wait in firefox I also had to make sure the response had a Content-Type header... not sure if that impacts you

[12:52:15.0000] <wanderview>
Content-Type: text/html

[12:54:06.0000] <zcorpan>
thanks, added that to the issue


2018-04-20
[22:55:09.0000] <Domenic>
Was following various links and ended up on https://www.w3.org/wiki/IETF_HTML5_Meeting_March_2009 . So interesting to see, considering how things played out.

[23:39:33.0000] <annevk>
“IETF does not want to do user interface recommendations” and yet HTTP does/did

[23:41:13.0000] <annevk>
Thanks for finding that

[00:15:24.0000] <annevk>
Btw, for those not wanting to deal with git much, GitHub Desktop now allows you to submit commits to all PRs (i.e., including non-local)

[00:15:58.0000] <annevk>
Rebasing or cleaning up commits is still some command line from memory adventure though

[01:00:07.0000] <hsivonen>
zcorpan: yes, the HTML parser in Gecko waits for 1024 bytes or an encoding declaration (incl. BOM)

[01:01:23.0000] <annevk>
Ah, and that'll also apply to text/plain and such

[01:01:37.0000] <annevk>
So if you want to test any kind of streaming there you first have to send 1024 bytes

[01:01:43.0000] <hsivonen>
hmm. I'm not sure that id does

[01:02:03.0000] <hsivonen>
if it does, it affect text/plain only as a side effect of sharing code with HTML

[01:02:10.0000] <annevk>
I guess it doesn't have to in theory at least as the encoding is derived differently (I haven't tested)

[01:02:25.0000] <hsivonen>
there isn't anything other than the BOM to wait for in the text/plain case

[01:03:50.0000] <hsivonen>
it's better to just declare charset on the HTTP layer than to pad by 1024 bytes

[01:05:04.0000] <annevk>
hsivonen: so if I include a BOM or HTTP charset it stops waiting?

[01:05:18.0000] <annevk>
That'd make sense

[01:05:54.0000] <hsivonen>
annevk: it doesn't wait in those cases

[01:07:47.0000] <hsivonen>
on a different topic: Is the Editor's Draft of Unicode public?

[01:13:40.0000] <annevk>
hsivonen: not that I know, sometimes there's drafts available for technical reports, but even those are not meant to be shared I think

[01:14:19.0000] <annevk>
I wish someone would make them publish on GitHub and in HTML...

[01:15:17.0000] <hsivonen>
annevk: OK. I'll ask on the Unicode list to be sure and to express the idea that there's a use case for viewing the Editor's Draft

[01:15:54.0000] <annevk>
hsivonen: version control of some kind would be great too

[01:16:09.0000] <hsivonen>
use case being optimizing out feedback that's no longer relevant if already addressed

[01:16:49.0000] <annevk>
hsivonen: a public issue tracker would also help with that

[01:16:55.0000] <hsivonen>
yes

[01:17:00.0000] <annevk>
hsivonen: where you can have some actual dialogue with folks...

[01:17:15.0000] <hsivonen>
the issue tracking is public but without search or interaction

[01:17:49.0000] <hsivonen>
anyway, I think I might send feedback on two things:

[01:18:07.0000] <nox>
gsnedders, jgraham: https://github.com/servo/servo/blob/wptup/tests/wpt/web-platform-tests/tools/wptrunner/wptrunner/environment.py#L145:L149 It seems like 'wss' is lacking there.

[01:18:25.0000] <hsivonen>
1) to request informative discussion of alignment issues of reading in UTF-16 or UTF-32 in addition to the current discussion of endianness issues

[01:19:44.0000] <hsivonen>
2) to request an informative remark pointing the Encoding Standard and the security principle embodied by the encoding standard when it comes to securely decoding multi-byte legacy encodings in the case where the trail byte of an unmappable pair is in the ASCII range

[01:20:10.0000] <annevk>
"The state of registerProtocolHandler" there's someone else who cares \o/

[01:20:20.0000] <annevk>
/me is looking at BlinkOn lightning talks

[01:20:28.0000] <annevk>
well, slides

[01:21:23.0000] <annevk>
hsivonen: what do you mean by 1?

[01:24:34.0000] <hsivonen>
annevk: when ingesting UTF-16 data from a byte-oriented I/O source, you not only need to make sure the endianness is right and that there are no unpaired surrogates. You also need to arrange the data to start from an even memory address

[01:25:21.0000] <hsivonen>
annevk: that is, UTF-16 and UTF-32 are even worse as on-disk or over-the-network representations than the Unicode Standard suggests

[01:27:26.0000] <annevk>
hsivonen: I'm afraid I don't understand the "even memory address" bit

[01:27:38.0000] <hsivonen>
annevk: even as in not odd

[01:27:49.0000] <hsivonen>
annevk: a memory address whose least significant bit is zero

[01:28:36.0000] <annevk>
hsivonen: I sorta got that, but I don't understand why

[01:30:08.0000] <hsivonen>
annevk: many CPU architectures and practically all programming languages require data to be aligned such that if you want to read a 16-bit unit in the usual way, it has to reside on a every-16-bits boundary

[01:30:32.0000] <hsivonen>
annevk: even where that might not be true for x86, it's true for C (and C++ and Rust) on x86

[01:30:46.0000] <annevk>
hsivonen: interesting; if I'm not mistaken the way JavaScript deals with bytes does not require that

[01:31:02.0000] <hsivonen>
(e.g. the compiler is allowed to autovectorize on that assumption)

[01:31:10.0000] <annevk>
the offset on the ArrayBuffer on which you create a view can be arbitrary

[01:32:05.0000] <hsivonen>
annevk: in that case, ArrayBuffer views can't use the default read/write operations from C++ or on some architectures even in the JIT code

[01:34:19.0000] <annevk>
https://tc39.github.io/ecma262/#sec-typedarray-buffer-byteoffset-length fwiw

[01:34:47.0000] <annevk>
So instead of a byteOffset a wordOffset or some such would have been a faster design?

[01:35:23.0000] <annevk>
Anyway, thanks for the lesson 😃

[01:36:31.0000] <hsivonen>
annevk: step 7

[01:36:48.0000] <hsivonen>
"If offset modulo elementSize ≠ 0, throw a RangeError exception."

[01:37:05.0000] <hsivonen>
annevk: so unaligned offsets are not allowed

[01:37:25.0000] <annevk>
oh, thanks for that additional lesson

[01:37:40.0000] <hsivonen>
the DataView API is suggestive of things being potentially slower than usual array accesses

[01:37:56.0000] <hsivonen>
annevk: you're welcome

[01:38:42.0000] <annevk>
I think the main aspect that makes ArrayBuffer slow (or hard to optimize for) is that it can be detached

[03:20:18.0000] <annevk>
mkwst: you around?

[03:20:31.0000] <annevk>
mkwst: I'm wondering whether you're gonna do another pass on https://github.com/whatwg/fetch/pull/715 or not

[05:26:24.0000] <jgraham>
Domenic: /html/browsers/browsing-the-web/scroll-to-fragid/replacement-enabled.html seems to be your test; we are having to disable it in gecko for being flaky

[05:32:53.0000] <Domenic>
Link to source? I'm on mobile.

[05:37:13.0000] <Domenic>
Well, file an issue I guess, and we can dig into whether the spec says the test should be nondeterministic, or if it's a Firefox bug.

[05:37:23.0000] <Ms2ger>
Domenic, https://github.com/w3c/web-platform-tests/blob/master/html/browsers/browsing-the-web/scroll-to-fragid/replacement-enabled.html

[05:37:37.0000] <jgraham>
Ms2ger: Thanks

[05:38:40.0000] <jgraham>
Filed an issue

[05:38:57.0000] <Domenic>
Hmm seems like the issue is the Firefox bug mentioned in the test comment

[05:39:12.0000] <Domenic>
Maybe just increase from 100 to a larger number

[05:40:21.0000] <jgraham>
Oh you had a sneaky way of writing setTimeout

[05:40:45.0000] <jgraham>
OK, that might help. Thanks

[06:49:59.0000] <annevk>
wanderview: domfarolino: if it helps I can land the same-origin change (and test)

[06:50:20.0000] <annevk>
wanderview: domfarolino: it seems folks want this to move forward and it seems unlikely it'll break things

[06:50:32.0000] <wanderview>
annevk: works for me... or I was just going to do the test changes locally and sync up

[06:51:00.0000] <annevk>
wanderview: which way you prefer?

[06:51:54.0000] <wanderview>
jgraham: if annevk lands some test changes upstream and I land the same changes in gecko... will we breach the warp core?

[06:54:56.0000] <jgraham>
wanderview: That is supposed to work these days

[06:55:09.0000] <wanderview>
cool

[06:55:16.0000] <wanderview>
annevk: I'd say go ahead and land them then

[06:55:17.0000] <jgraham>
So hopefully not, but maybe? :)

[06:55:28.0000] <jgraham>
(go for it, I'll be able to fix if there's a problem)

[06:55:38.0000] <jgraham>
wanderview: Although I see you  haven't looked at the trees today

[06:55:51.0000] <jgraham>
Landing stuff in Gecko isn't possible :)

[06:56:09.0000] <wanderview>
jgraham: I guess that makes things easier

[06:57:19.0000] <wanderview>
jgraham: btw, I don't recall seeing a gecko sync bug for this one? https://github.com/w3c/web-platform-tests/pull/10536

[06:57:26.0000] <wanderview>
maybe due to the tree sadness

[06:59:07.0000] <jgraham>
wanderview: https://bugzilla.mozilla.org/show_bug.cgi?id=1455367 I think?

[06:59:22.0000] <wanderview>
jgraham: thanks!

[06:59:41.0000] <wanderview>
jgraham: I see... it hasn't been moved to Core yet, so my search didn't find it

[07:00:57.0000] <annevk>
Ooh, I had already filed browser bugs too

[07:02:39.0000] <wanderview>
jgraham: although I'm having trouble finding the test changes in the try build on that bug...

[07:04:13.0000] <jgraham>
wanderview: I'll check after my meeting. I did notice some odd-looking try messages this morning

[07:05:32.0000] <wanderview>
thanks

[07:05:50.0000] <annevk>
/me updates Edge and Safari bugs

[07:16:55.0000] <wanderview>
annevk: if it makes you feel any better the change to same-origin credentials blew up a bunch of internal gecko tests

[07:26:11.0000] <annevk>
wanderview: makes me sad for you mostly (and a little sad we still have some many non-upstreamed stuff)

[07:26:18.0000] <annevk>
so much

[07:31:02.0000] <wanderview>
annevk: its mostly duplicative of the WPT changes

[07:34:52.0000] <annevk>
wanderview: it's not just worker module scripts btw; it's module scripts in general: https://github.com/whatwg/html/issues/2557

[07:35:30.0000] <annevk>
wanderview: I'll see if I can work out the spec changes later today for those

[07:35:39.0000] <wanderview>
ok

[07:35:59.0000] <wanderview>
annevk: I don't think we ship modules for a few weeks... probably too far along to fix it before shipping, though

[07:36:06.0000] <wanderview>
of course, everyone else has already shipped I think

[07:37:41.0000] <annevk>
wanderview: yeah, as with fetch() I guess the upside will be that more things will work

[07:38:12.0000] <annevk>
wanderview: and maybe it's better to make the changes separately to measure impact separately (and maybe ensure tests)

[07:48:11.0000] <annevk>
wanderview: Simpson's GIFs will continue until morale improves

[07:48:56.0000] <wanderview>
yea...

[12:11:27.0000] <domfarolino>
annevk: thanks for landing that wpt PR, will get up to date on some of the surrounding stuff soon

[12:47:22.0000] <wanderview>
domfarolino: thanks for looking at the tests... I had some time so I pushed the change through on the firefox side today

[13:22:24.0000] <domfarolino>
wanderview: of course. Awesome, will be getting to finishing chrome shortly.


2018-04-21
[14:48:20.0000] <lgrahl>
o/

[14:48:25.0000] <lgrahl>
Someone still awake?

[14:48:43.0000] <lgrahl>
(Or in a different timezone, heh)

[14:49:24.0000] <lgrahl>
https://html.spec.whatwg.org/multipage/web-sockets.html#feedback-from-the-protocol - "... a new Blob object, created in the relevant Realm of the WebSocket object ..."

[14:49:25.0000] <lgrahl>
What is that "relevant Realm" all about?


2018-04-22
[17:11:36.0000] <MikeSmith>
lgrahl: "relevant Realm" there is hypertext to the definition at https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-realm, right?

[17:12:12.0000] <lgrahl>
Yep

[17:16:09.0000] <MikeSmith>
lgrahl: so are you asking why the “relevant” part? or what?

[17:16:26.0000] <MikeSmith>
and you read https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-everything too?

[17:16:36.0000] <lgrahl>
I guess I just don't understand the concept behind it. I've never heard of it.

[17:17:23.0000] <lgrahl>
Ah, your link points to the description.

[17:20:42.0000] <MikeSmith>
yeah but I think it’s not something that’s exposed to web content, so unless you’re implementing support for it, you don’t need to deal with it

[17:21:04.0000] <MikeSmith>
oh I guess maybe you are implementing it somewhere?

[17:21:16.0000] <lgrahl>
Mh, doesn't look like I will grasp that concept without quite a lot more research. That's hard stuff to digest.

[17:22:05.0000] <lgrahl>
I've added the missing message receive procedure to WebRTC's data channels and basically copied most of the WebSocket description... and FWIW I completely ignored the realm stuff for now because I just don't understand it.

[17:23:30.0000] <MikeSmith>
lgrahl: I reckon when Domenic is around, he could make it more clear for you

[17:25:31.0000] <lgrahl>
Good idea. Cheers!

[12:48:00.0000] <Alystair>
Hi all, are there any plans for audio capability discovery in upcoming specs?

[12:49:08.0000] <Alystair>
Being able to know if the computer is currently muting audio or has no working audio outputs would be ideal. It would allow one to programatically deal situations like users with audio based disabilities, users with disabled/no audio hardware or user temporarily muting audio

[12:50:12.0000] <Alystair>
so potential use cases would be the user being deaf and automatically activates closed captions without interaction, alert user that there is required audio content as part of a presentation if no hardware is available... or even pause video or other media if user mutes audio

[12:50:48.0000] <Alystair>
if this isn't the appropriate place, where would I go or who would I talk to promote/discuss this concept?

[13:24:25.0000] <Alystair>
just shot an email to the W3 audio group and will hope for the best, cya~


2018-04-23
[17:22:30.0000] <MikeSmith>
annevk: access over TLS to irc.w3.org is now available, on ports 994 and 6679 https://www.w3.org/Project/IRC/#Server

[22:53:48.0000] <annevk>
MikeSmith: thanks, seems to work

[22:56:35.0000] <annevk>
Also seems to be using TLS1.1 / some SHA1 stuff, but perhaps IRC is behind?

[22:56:50.0000] <annevk>
/me doesn't really know the state of IRC + TLS

[00:08:07.0000] <mkwst>
annevk: Sorry, I ended up sick most of last week. I do intend to look at  https://github.com/whatwg/fetch/pull/715 again, and hope to get to it this week.

[00:08:50.0000] <annevk>
mkwst: no worries, I'm in no rush, but then I'll postpone looking at it myself

[00:09:13.0000] <mkwst>
annevk: But I need to deal with folks' feedback on SameSite first, since folks are finally paying attention to it (which (shock!) means they're finding bugs and clarifications).

[00:09:21.0000] <mkwst>
So, probably this week?

[00:09:48.0000] <annevk>
I'm good either way

[00:09:57.0000] <mkwst>
If he took care of the last round of feedback, then I think it'll be functionally pretty close.

[00:13:05.0000] <mkwst>
annevk: Do you know how the `from-origin` discussion ended up? Looks like WebKittens are implementing something.

[00:14:54.0000] <mkwst>
jgraham, gsnedders: FYI, `from-origin` is another thing that needs https://github.com/w3c/web-platform-tests/pull/10166 before anyone can upstream tests.

[00:17:06.0000] <annevk>
mkwst: based on John's comment it seems they want same/same-site and check ancestors as an initial iteration

[00:17:23.0000] <annevk>
mkwst: Tanvi pointed out a concern though for browsers that don't do ancestorOrigins

[00:23:55.0000] <annevk>
mkwst: also, nobody has made proposed changes to the specification thus far or submitted tests as far as I know

[00:24:28.0000] <mkwst>
Yeah. It would be nice to spell things out more clearly alongside any implementation work.

[02:59:48.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/pull/600

[03:00:28.0000] <annevk>
JakeA: maybe also https://github.com/w3c/web-platform-tests/pull/10442

[03:04:48.0000] <jgraham>
mkwst: I hope gsnedders will land that this week

[03:07:14.0000] <JakeA>
will review

[04:13:59.0000] <annevk>
JakeA: thanks, I have some other PRs that could use your review...

[04:20:30.0000] <nox>
Mmmh I still can't sync WPT in Servo,

[04:20:39.0000] <nox>
none of the WS tests pass anymore. :(

[04:44:57.0000] <annevk>
So much of HTTP is such an interop mess

[04:45:12.0000] <annevk>
Despite being on the easier side of interop issues

[06:58:53.0000] <annevk>
yhirano__: https://github.com/w3c/web-platform-tests/pull/10419

[07:44:43.0000] <zcorpan>
It'd be sweet if people signed up for things in https://github.com/w3c/web-platform-tests/issues/5915 (by commenting or creating a PR)

[08:09:43.0000] <annevk>
zcorpan: seems innerText should mimic html

[08:09:52.0000] <annevk>
zcorpan: x-frame-options should mimic csp

[08:10:22.0000] <annevk>
zcorpan: another way of solving that might be to move some of those directories

[08:11:05.0000] <zcorpan>
annevk: ok. yeah. can you create a PR doing one or the other of that? (nearing end of my day) :)

[08:12:20.0000] <annevk>
zcorpan: this was a drive-by comment as that's true for me too, but maybe later once I've collected the other kid and groceries and such

[09:11:35.0000] <JakeA>
annevk: lmk if there's anything else you want reviewed

[09:33:01.0000] <annevk>
JakeA: do you get review requests or is it better to ping you manually?

[09:33:51.0000] <JakeA>
annevk: review requests are good. I'm going to be swept up by Google I/O soon, but I could use the distraction :D


2018-04-24
[07:05:00.0000] <wanderview>
JakeA: reading Mark's CSP+SW post... it bothers me that you can't express "allow SW to connect to <host> only when servicing a request for <destination>"... it seems like we should be able to do that

[07:35:14.0000] <JakeA>
wanderview: Any idea why CSP is based on requests? I know it's based on responses now too, but is the request part just an optimisation?

[07:36:22.0000] <wanderview>
JakeA: I'm no expert in CSP... but it seems you need some way to say what the request is for in order to pick the right CSP policy directive

[07:37:08.0000] <wanderview>
JakeA: so Request.destination is the fetch API thing for that...

[07:37:08.0000] <JakeA>
wanderview: but if the intent is "I only want to execute scripts from a particular origin", then it's the response that matters, not the requests

[07:37:23.0000] <wanderview>
in gecko we have nsIContentPolicyType would serves the same thing (and we map to destination): https://searchfox.org/mozilla-central/source/dom/base/nsIContentPolicy.idl#69

[07:38:08.0000] <JakeA>
wanderview: but, to your original point, I guess we could look at preserving some of the properties like destination when doing `new Request(request)`

[07:38:13.0000] <JakeA>
I think that'd make it work

[07:38:24.0000] <wanderview>
JakeA: sure, and we should still have the check on the respondWith() for the response... but it seems the site should also be able to prevent XSS from calling out to evil.com, etc

[07:39:29.0000] <JakeA>
wanderview: yeah, I guess it stops data leaking out, as long as no part of CSP allows requests to evil.com

[07:39:32.0000] <wanderview>
JakeA: I guess it depends on if folks are ok with someone doing stuff like storing a destination=img request in Cache API and pulling it out later to make an "image" request via fetch again later

[07:39:39.0000] <JakeA>
But if you, say, allow images from anywhere, the game's up

[07:40:36.0000] <wanderview>
JakeA: yea... evil.com could just make an <img> element, stick whatever in the .src, then get an image destination request in the service worker

[07:40:43.0000] <wanderview>
I dunno

[07:42:57.0000] <wanderview>
JakeA: I guess I'll write a fetch spec issue to discuss it further

[07:43:03.0000] <wanderview>
thanks

[07:43:14.0000] <JakeA>
np! I guess we need a CSP expert to figure it out

[07:43:23.0000] <JakeA>
but from the fetch spec point of view I don't think it'd be that hard

[07:43:28.0000] <JakeA>
unless it opens up security issues

[07:44:27.0000] <wanderview>
JakeA: I think it should probably be done in step 14 of https://fetch.spec.whatwg.org/#dom-request

[07:44:38.0000] <wanderview>
it would also keep the destination consistent with mode=="navigate" or not

[07:47:24.0000] <annevk>
JakeA: you might appreciate https://github.com/w3c/web-platform-tests/commit/a8a88982335f854cf824f2f52a9088629b4db011

[07:47:36.0000] <annevk>
/me is gonna do that for more tests

[07:48:03.0000] <annevk>
If you just have some JS to run in a service worker you can use // META global=!default,serviceworker

[07:48:09.0000] <annevk>
coupled with .any.js

[07:48:14.0000] <annevk>
it's so great

[08:38:52.0000] <JakeA>
annevk: Nice! So in this example the test will run in a worker, window, but not a shared worker or service worker?

[08:45:23.0000] <annevk>
JakeA: worker is all workers

[08:45:55.0000] <annevk>
JakeA: it follows the IDL syntax a bit

[08:46:48.0000] <JakeA>
annevk: I thought window + workers was the default for .any?

[08:47:17.0000] <annevk>
JakeA: default is window + dedicated worker

[08:47:26.0000] <JakeA>
Ohhhh!

[08:47:41.0000] <annevk>
JakeA: https://annevankesteren.nl/2018/04/wpt-any-js

[08:47:44.0000] <JakeA>
TIL. I might have to fix some of my tests

[08:48:33.0000] <JakeA>
Nice!

[08:55:35.0000] <annevk>
JakeA: https://github.com/w3c/web-platform-tests/pull/10442 could use another look

[09:06:34.0000] <JakeA>
LGTM

[09:48:22.0000] <bkardell>
hey shouldn't the examples in https://html.spec.whatwg.org/#usage-summary-2 contain headings?

[10:09:18.0000] <Domenic>
The ones which illustrate sectioning content do...

[10:09:45.0000] <Domenic>
Well, the article example has no heading, but that's OK given its content.

[11:46:10.0000] <Phrohdoh>
Does the W3C WebDriver spec specify data types for the return values from a `GetWindowRect` command? https://www.w3.org/TR/webdriver/#get-window-rect links to https://www.w3.org/TR/webdriver/#dfn-window-rect which leads to https://drafts.csswg.org/cssom-view/#dom-window-screenx which doesn't specify a valid range. In practice I get back `u64`s but

[11:46:10.0000] <Phrohdoh>
do not want to error with a 'non-w3' error type if a non-u64 isn't technically violating the spec.

[11:46:20.0000] <Phrohdoh>
If there is a better place to ask this question please direct me there! :)

[11:47:29.0000] <Phrohdoh>
u64 being Rust notation for an unsigned 64bit integer.

[11:49:23.0000] <Phrohdoh>
I could assume that these values are 32bit signed integers since that is what `SetWindowRect` uses but I'd rather have authoritative documentation.

[12:29:43.0000] <JKingWeb>
Phrohdoh: They would be JSON numbers. WebDriver appears to define JSON deserialization in terms of ECMA-262, so that would mean a 64-bit double-precision floating point number.

[13:18:46.0000] <Phrohdoh>
JKingWeb: Okay that makes sense. I may have to propose changes to a library I am consuming then. Thank you.

[13:21:31.0000] <JKingWeb>
I may be wrong (it wouldn't be the first time!), but an integer type would be unsuitable because the values are CSS pixels, and CSS pixels are not necessary integral.

[14:02:02.0000] <gsnedders>
Phrohdoh: I'd expect it to match the type of screenX in CSSOM View, which is a double

[14:02:47.0000] <gsnedders>
(And ultimately, as JKingWeb says, given everything goes over the wire as JSON, it'll become a double then)


2018-04-25
[22:43:42.0000] <annevk>
Technically JSON does not do double iirc

[02:28:16.0000] <smaug____>
foolip: do you recall why DOMQuad has from*() methods

[02:28:53.0000] <foolip>
smaug____: hmm, no. where's zcorpan?

[07:18:16.0000] <JKingWeb>
Would someone be able to point me to a very, very large text consisting primarily of non-ASCII characters? I've been using the Chinese translation of the single-page HTML spec, but much of it is not translated, so it's more or less useful for my purposes?.

[07:19:09.0000] <Ms2ger>
Wikipedia would be a common suggestion

[07:19:52.0000] <Ms2ger>
Still very ascii-biased in the markup, though

[07:22:56.0000] <gsnedders>
most of the non-ASCII web is still pretty bias due to markup

[07:23:44.0000] <JKingWeb>
Yeah, I'm aware. That's okay.

[08:34:04.0000] <nox>
Ms2ger, gsnedders: I wonder if there is a list of starred articles on Wikipedia, per language.

[08:34:09.0000] <nox>
Starred ones usually are longer.

[09:20:27.0000] <wanderview>
falken: I saw you doing work on a blink issue to support extension service workers... do you have anything which describes how these are supposed to work?  The firefox addon folks ask me about supporting them now and then... I don't understand how they are supposed to behave

[09:21:04.0000] <wanderview>
like... what is the origin of the service worker and how exactly do they receive FetchEvents for pages, etc

[09:38:50.0000] <Domenic>
annevk: why would a  jis0208 index be needed by a iso2022jp encoder? Sorry if this is a dumb question.

[09:44:09.0000] <annevk>
Domenic: all Japanese encodings use the two jis indexes

[09:44:24.0000] <Domenic>
Ah OK

[09:44:28.0000] <annevk>
Domenic: well, one or two (I think only one actually uses the other one)

[11:22:29.0000] <domfarolino>
wanderview: Does FF have <link rel=preload as=fetch> implemented?

[11:22:55.0000] <wanderview>
domfarolino: no... our <link rel=preload> implementation is disabled atm

[11:23:02.0000] <domfarolino>
Ah ok, thank you

[11:23:17.0000] <wanderview>
domfarolino: we tried to ship something, but had to disable due to interop issues

[11:24:18.0000] <domfarolino>
Is there en ETA on shipping it? Just curious

[11:25:30.0000] <wanderview>
domfarolino: no, unfortunately

[11:25:56.0000] <wanderview>
domfarolino: having the preload cache spec'd would help, though

[11:26:13.0000] <wanderview>
its more work to reverse engineer other browsers' behavior

[11:27:03.0000] <domfarolino>
wanderview: is there an issue for this?

[11:27:07.0000] <domfarolino>
(fetch spec)

[11:27:19.0000] <wanderview>
/me looks

[11:27:37.0000] <wanderview>
domfarolino: https://github.com/whatwg/fetch/issues/590

[11:33:28.0000] <domfarolino>
Intersting, thanks, will look more into that - seems interesting

[11:33:59.0000] <domfarolino>
Also, anyone know if it's possible to get <link> to send a request without credentials (regardless of sameorigin request ornot)?

[11:34:16.0000] <domfarolino>
s/Intersting/Interesting && s/ornot/or not

[11:43:08.0000] <wanderview>
that I do not know

[11:58:21.0000] <domfarolino>
I don't think you can since "omit" was introduced with Fetch API IIRC

[12:21:57.0000] <Domenic>
https://sonarwhal.com/scanner/82d0ae4e-aa8d-4b9b-9d32-24c1b0817136 (whatwg.org audit by Microsoft's new tool) is kinda interesting

[12:33:44.0000] <Domenic>
I wonder if anything specifies the encoding used for SVG files in <img src>

[13:57:35.0000] <wanderview>
JakeA: filed that issue we discussed yesterday: https://github.com/whatwg/fetch/issues/717

[14:03:22.0000] <wanderview>
/me decides to be a cool kid and use an avatar.

[16:46:29.0000] <Domenic>
Despite setting an avatar for myself, I'm still using the old original IRCCloud view. It just feels right.


2018-04-26
[17:44:36.0000] <falken>
wanderview: good question. I don't think there is polished documentation. https://bugs.chromium.org/p/chromium/issues/detail?id=501569 was the main bug which links to a design doc.

[18:57:43.0000] <wanderview>
falken: says the design doc is internal?

[18:58:03.0000] <wanderview>
oh, I see it now

[19:00:07.0000] <wanderview>
falken: does it let an extension intercept a page's network requests like a script blocker addon would want to do?

[19:01:55.0000] <falken>
wanderview: i'm actually still wading through the tests so I'm learning as I go, but I don't think it does. It's like if there were a page at blah://example/page with a service worker from blah://example/sw.js  and the SW intercepts requests from the page.

[19:02:13.0000] <falken>
wanderview: except in this case "blah://" is "chrome-extension://"

[19:02:38.0000] <wanderview>
falken: oh... I think our addon team is very confused then... they keep asking for this as a way for an addon to provide alternate responses to web content

[19:03:33.0000] <wanderview>
falken: fwiw, I've been opposed to trying to do that because I don't want any kind of cross-origin capability in the service worker code... its too dangerous IMO

[19:04:00.0000] <falken>
wanderview: yea... i don't think they can do that. and agreed about cross-origin concern.

[19:04:21.0000] <wanderview>
falken: I guess I can go suggest doing it through WebRequest extension API again

[19:08:57.0000] <wanderview>
falken: thankjs

[21:52:06.0000] <domfarolino>
Domenic: Hmm what is the original IRCCloud view? Is there a new/optional UI update?

[01:23:28.0000] <nox>
annevk: https://github.com/servo/servo/pull/20693/files#diff-43ef31cdf6bd590d4201c07f57a9cd9b :(

[01:23:37.0000] <nox>
You using await/async in there.

[01:25:51.0000] <annevk>
nox: it already used that, I just made it apply to more globals

[01:26:03.0000] <annevk>
nox: but also, async/await is great; Servo should really update

[01:26:05.0000] <nox>
Really? It used to not fail to parse.

[01:26:20.0000] <annevk>
nox: https://github.com/w3c/web-platform-tests/commit/5adab93dc7ec658c1f3ced37c9934d3fe90f6251 is all I changed

[01:26:42.0000] <nox>
Disregard me then.

[01:27:11.0000] <annevk>
nox: seems you're concerned with something that happened a month ago: https://github.com/w3c/web-platform-tests/commit/b202bbb5aa0d235b22bac11fe902eab1094ef9d2

[03:55:44.0000] <annevk>
mkwst: https://github.com/whatwg/fetch/issues/717

[03:55:59.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/pull/702

[03:57:18.0000] <JakeA>
annevk: ta. Don't suppose you could nudge the script so the diff is updated with linked terms?

[03:58:31.0000] <annevk>
JakeA: can do

[03:59:35.0000] <annevk>
JakeA: should be done within a minute or so

[04:01:06.0000] <JakeA>
Ta! It's updated already

[05:51:53.0000] <annevk>
JakeA: one more look at https://github.com/whatwg/fetch/pull/702?

[05:52:00.0000] <annevk>
JakeA: I think I got the indenting right, but still

[06:20:13.0000] <JakeA>
Done

[07:37:21.0000] <annevk>
wanderview: last sentence of https://github.com/whatwg/fetch/issues/717#issuecomment-384653109 ; do you mean "would not"?

[07:37:43.0000] <wanderview>
annevk: yea, I'll fix... thanks

[07:39:37.0000] <annevk>
wanderview: so the main use case is to avoid having to rewrite your CSP?

[07:39:48.0000] <wanderview>
annevk: no...

[07:39:57.0000] <wanderview>
annevk: the use case is restricting what the service worker can do

[07:40:09.0000] <annevk>
But it doesn't really restrict it with this, right?

[07:40:46.0000] <wanderview>
annevk: sure it does... connect-src: * is *a lot* more permissive in that you can stick any URL in there with zero effort... requiring someone to XSS the main page through an image element is harder

[07:41:23.0000] <annevk>
wanderview: well, the service worker is often in charge of the main page, so...

[07:42:00.0000] <annevk>
(and also in charge of its CSP policy, iirc)

[07:42:59.0000] <wanderview>
annevk: so CSP is pretty pointless on service worker sites?

[07:43:21.0000] <wanderview>
if you want to do anything like the common use case you have to open it up pretty wide

[07:44:51.0000] <annevk>
Yeah, it is somewhat, but not entirely

[07:45:09.0000] <annevk>
The CSP folks didn't really care much about this when I raised it

[07:45:18.0000] <annevk>
Maybe once it becomes an actual problem they'll get back to me...

[07:45:51.0000] <annevk>
Mike West is hard to find these days

[07:45:57.0000] <wanderview>
annevk: do the content type sniffing things make this any better? to block sending non-image data back for an image destination request?

[07:47:22.0000] <annevk>
wanderview: I'm not entirely sure what you're talking about, but I suspect not

[07:47:44.0000] <wanderview>
annevk: I think for CORB and things we were doing more validation that responses were actually the correct type

[07:47:53.0000] <wanderview>
or there was a desire to

[07:48:06.0000] <wanderview>
^I think^I thought

[08:02:26.0000] <annevk>
wanderview: CORB could not be read anyway, unless you count Spectre, then maybe

[08:05:20.0000] <annevk>
Kinda dislike the name therefore

[08:19:35.0000] <wanderview>
annevk: it always makes me think of CORBA

[10:02:05.0000] <annevk>
"The Common Object Request Broker Architecture (CORBA) is a standard defined by the Object Management Group (OMG)..."

[10:02:08.0000] <annevk>
wow

[10:11:06.0000] <wanderview>
annevk: yes, its quite exciting

[10:11:19.0000] <wanderview>
annevk: I used it a lot in my past life in the early 2000's

[11:04:42.0000] <wanderview>
falken: then chrome-extension:// service worker thing sounds a bit like foreign fetch... is that correct?

[11:04:55.0000] <wanderview>
it seems the addon team here also wants this for moz-extension://

[11:43:24.0000] <hober>
TabAtkins: is there a tool for bikeshed where I can feed it a spec#anchor url and have it spit out how you'd reference that in bikeshed source?

[11:43:42.0000] <hober>
TabAtkins: ideally with what i need to put in link-defaults, if anything

[11:50:53.0000] <TabAtkins>
hober: Not yet, but I could probably produce something...

[11:52:05.0000] <TabAtkins>
If I actually tell you what's needed for a link, you wouldn't ever need link-defaults; that just lets you write shorter things.

[12:05:35.0000] <wanderview>
the thing I always want when linking to a spec is being able to reference a specific step

[12:53:04.0000] <md1>
yo

[12:53:09.0000] <md1>
is this where websockets was born

[12:58:55.0000] <TabAtkins>
wanderview: Yeah, making that work automatically is on my roadmap.

[12:59:10.0000] <wanderview>
TabAtkins: that would be awesome

[13:02:59.0000] <hober>
basically i want to paste/input something like html#attr-meta-http-equiv-refresh (or the full url) and have it spit out [=something=] or <{something}> or whatever

[13:07:20.0000] <md1>
hi

[13:17:36.0000] <md1>
yo tantek

[13:17:45.0000] <md1>
wat u doin

[13:19:12.0000] <tantek>
?

[13:23:37.0000] <TabAtkins>
Sigh, randos.

[13:30:20.0000] <hober>
TabAtkins: do section links work for rfcs?

[13:30:27.0000] <hober>
cross-spec ones

[13:31:28.0000] <TabAtkins>
Section links "work" for everything, but if they're not a spec that Shepherd's watching, I can't verify the anchor is right or sub in the actual section heading. Instead you get the hash displayed.

[13:32:03.0000] <TabAtkins>
I should do something about that, but it depends on me finally having per-spec persistent data.

[13:33:31.0000] <hober>
right. is there a <pre class='foo'> block i can put in my file with section to pretty section name mappings?

[13:33:52.0000] <TabAtkins>
Not yet, but that's particularly easy to add. I can put that together this afternoon for you, if you want.

[13:34:11.0000] <TabAtkins>
Also, your previous request is lucky bug #1234 https://github.com/tabatkins/bikeshed/issues/1234

[13:34:20.0000] <hober>
oh, it's super not urgent. but it'd be nice.

[13:42:33.0000] <TabAtkins>
k, well https://github.com/tabatkins/bikeshed/issues/1235 for ya

[13:47:10.0000] <hober>
thanks :)


2018-04-27
[17:32:35.0000] <falken>
wanderview: I don't think so. The SW still only intercepts requests from the page it's a controller of. In this case the page is a chrome extension.

[18:26:46.0000] <MikeSmith>
falken: not sure if you missed that you have github invite waiting, for push access to the web-platform-tests repo

[18:28:06.0000] <falken>
MikeSmith: thanks... I can't find the invite. Is this different from joining the web-platform-tests org?

[18:38:29.0000] <MikeSmith>
falken: no different; if you’re already part of the org, you can just ignore it

[18:39:00.0000] <MikeSmith>
I sent it to the account https://github.com/mattto

[18:39:07.0000] <MikeSmith>
maybe that’s not you..

[18:40:05.0000] <falken>
MikeSmith: Yep that's me. I think I'm a member now. I guess that might be why the invite doesn't show up anywhere for me?

[18:40:23.0000] <MikeSmith>
dunno

[18:40:26.0000] <MikeSmith>
oh wait, the web-platform-tests org is different

[18:40:31.0000] <MikeSmith>
I misspoke before

[18:40:35.0000] <falken>
MikeSmith: oh...

[18:41:13.0000] <MikeSmith>
this is for https://github.com/w3c/web-platform-tests/

[18:41:22.0000] <MikeSmith>
which is in the in github w3c org

[18:41:29.0000] <MikeSmith>
anyway, annevk is the one who actually requested that you have access

[18:41:48.0000] <MikeSmith>
I assume so that you could do approved revieww

[18:42:35.0000] <MikeSmith>
but I see now you already have read access to that repo

[18:42:47.0000] <MikeSmith>
which should be enough to allow you to approve reviews

[18:43:21.0000] <falken>
MikeSmith: OK, sounds good. odd

[18:43:31.0000] <MikeSmith>
yeah

[18:43:54.0000] <MikeSmith>
anyway, it will all be moved over to the web-platform-tests org soon

[18:44:27.0000] <MikeSmith>
in the mean time I can ask annevk about it later when he’s around

[19:30:00.0000] <falken>
MikeSmith: The invite arrived!

[19:31:33.0000] <falken>
MikeSmith: It just arrived now. Joined.

[19:32:08.0000] <falken>
MikeSmith: Well 45 minutes ago

[19:34:05.0000] <MikeSmith>
falken: cool

[19:34:20.0000] <MikeSmith>
yeah that’s because I had the system re-send it

[21:13:25.0000] <annevk>
I think foolip also invited falken

[21:16:30.0000] <falken>
annevk: yes foolip invited me to web-platform-tests org and MikeSmith to w3c org

[01:02:40.0000] <nox>
annevk: https://github.com/servo/servo/pull/20698/files#diff-e55587046e2aec44dd25e5e4a8958217 Does that ring a bell? Any recent changes to those?

[01:03:56.0000] <annevk>
nox: dunno, sorry

[01:05:14.0000] <nox>
annevk: No problem. Pinged you just in case, will look for the answer myself. :)

[01:06:33.0000] <nox>
annevk: https://github.com/w3c/web-platform-tests/commit/3e538e72b8f12de065612862486c3fc24beb9c53#diff-26c995600d11355f7b4b03f54d96cd82 😱

[01:07:09.0000] <annevk>
nox: getting rid of document.origin in favor of self.origin is generally good?

[01:07:22.0000] <nox>
annevk: Oh yes yes, I know those changes are made for good reasons.

[01:07:50.0000] <nox>
But stop pointing out Servo's deficiencies with clever changes, it makes me sad. :P

[01:09:13.0000] <annevk>
I'm pretty sure nobody writes async/await or self.origin to spite Servo 😃

[01:17:27.0000] <nox>
IT'S A CONSPIRACY

[01:30:08.0000] <yoav>
annevk: Can we land https://github.com/whatwg/fetch/pull/659? Or do we need to wait for the official Edge bug?

[01:30:35.0000] <yoav>
(I wanna land https://chromium-review.googlesource.com/c/chromium/src/+/1029858 and prefer to do it after the spec change lands)

[01:36:48.0000] <annevk>
yoav: nah, landed

[01:36:55.0000] <annevk>
yoav: thanks for working on that

[01:37:31.0000] <annevk>
yoav: the only other thing that can help make it go even smoother is preparing a commit message that has all the details, but happy to take care of that

[01:55:28.0000] <smaug____>
ahaa, webkit doesn't seem to implement delegateFocus stuff

[01:57:05.0000] <smaug____>
https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/Element.idl#L156 vs https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/dom/shadow_root_init.idl?q=ShadowRootInit&sq=package:chromium&dr=C&l=11

[01:57:11.0000] <annevk>
I hope that's only because of lack of time and not some disagreement

[01:57:28.0000] <annevk>
I don't recall any disagreements at least

[01:57:33.0000] <smaug____>
yeah

[02:00:26.0000] <nox>
annevk: I'm… I'm lost. Where does window.origin come from?

[02:02:38.0000] <annevk>
nox: WindowOrWorkerGlobalScope

[02:03:21.0000] <nox>
TIL, thanks.

[02:03:39.0000] <nox>
annevk:   // [Replaceable] readonly attribute USVString origin;

[02:03:43.0000] <nox>
Well that explains things. :)

[05:16:56.0000] <annevk>
foolip: did you ever figure out if LockCompatibilityMode et al are redundant?

[05:18:48.0000] <foolip>
annevk: that doesn't even ring a bell, so no :)

[05:19:05.0000] <foolip>
Nothing in my inbox either, what is this?

[05:19:36.0000] <annevk>
foolip: I thought I asked you (on IRC) if compatibility_mode_locked_ was ever false or if it could ever be

[05:19:55.0000] <annevk>
foolip: from document.cc (used to be Document.cpp; took a while to find the new location...)

[05:20:07.0000] <foolip>
annevk: oh, that. yes, my change finished running, and the results weren't what I thought. let me find it

[05:21:09.0000] <foolip>
annevk: https://chromium-review.googlesource.com/c/chromium/src/+/986136

[05:21:29.0000] <foolip>
annevk: hmm, results don't seem to load now, I'll rebase and run again

[05:28:09.0000] <annevk>
foolip: I can reproduce it sometimes changing now, but I don't really understand what I'm looking at: https://github.com/w3c/web-platform-tests/pull/10679

[05:28:56.0000] <foolip>
annevk: ah, actually, some results work, and point to a bunch of tests which trigger the code path we suspected was dead: https://ci.chromium.org/buildbot/tryserver.chromium.win/win7_chromium_rel_ng/133394

[05:29:13.0000] <foolip>
actually https://test-results.appspot.com/data/layout_results/win7_chromium_rel_ng/133394/layout-test-results/results.html is the best starting point

[05:29:36.0000] <foolip>
and https://test-results.appspot.com/data/layout_results/mac_chromium_rel_ng/682797/layout-test-results/results.html

[05:30:18.0000] <foolip>
the first failure I looked at is a simple file at least: https://chromium.googlesource.com/chromium/src/+/1a52caad09e40377c58296887635640ec21c102b/third_party/WebKit/LayoutTests/dom/legacy_dom_conformance/html/level1/core/documentgetdoctypenodtd.html

[05:31:57.0000] <foolip>
annevk: does that provide any clues?

[05:32:03.0000] <annevk>
No

[05:32:26.0000] <foolip>
annevk: is it a minimized test case you need, or just to figure out what the spec should say around this?

[05:32:28.0000] <foolip>
"just"

[05:33:02.0000] <annevk>
foolip: I found a minimal test of sorts: https://github.com/w3c/web-platform-tests/pull/10679 but I've no idea what's going on

[05:33:17.0000] <annevk>
foolip: and yeah, I want to figure out if the spec should match this or not

[05:34:13.0000] <annevk>
I guess what's happening is that it starts out in standards mode, but then the parser can change that or some such

[05:34:50.0000] <annevk>
Ah yeah, I think I understand what's happening now

[05:35:04.0000] <annevk>
The testharness is delayed due to not getting a load event

[05:36:11.0000] <foolip>
annevk: looks like in addition to document.open(), navigation and parsing of document in XHR can also reach this code path, although I don't know if the change of mode is possible in those cases, would have to look at the different failures.

[05:37:28.0000] <annevk>
foolip: I suspect all HTML parser-related cases start out as no-quirks and can then be changed

[05:37:57.0000] <annevk>
foolip: I wonder how deterministic it changing is here though

[05:38:09.0000] <foolip>
annevk: from the failed assert it actually looks like it started out in quirks mode and then became standards mode

[05:38:14.0000] <annevk>
foolip: since you can feed the parser the doctype bits very incrementally

[05:38:58.0000] <annevk>
foolip: document.open() made it no-quirks; then document.close() would've made it quirks due to EOF

[05:39:42.0000] <foolip>
annevk: it is the transition in document.open() that you're wondering about, right? or is the document.close() thing also not well defined/interoperable?

[05:40:30.0000] <foolip>
annevk: do you have results from all browsers for https://github.com/w3c/web-platform-tests/pull/10679?

[05:43:09.0000] <annevk>
foolip: I figured out how Chrome et al work for that

[05:43:18.0000] <annevk>
foolip: it also appears to be fully deterministic

[05:43:26.0000] <annevk>
foolip: though a tad weird

[05:43:39.0000] <foolip>
trying Edge and Safari on BrowserStack

[05:43:47.0000] <annevk>
foolip: they are identical to Chrome

[05:43:47.0000] <foolip>
Firefox Nightly passes, but I think you knew that

[05:43:58.0000] <annevk>
foolip: I pushed an update that makes it match Chrome/Edge/Safari

[05:44:01.0000] <foolip>
Safari fails just like Chrome

[05:44:30.0000] <foolip>
Edge passes, but maybe you *just* updated it?

[05:44:37.0000] <annevk>
did

[05:51:15.0000] <annevk>
Still not entirely sure why it can be locked down though

[05:53:55.0000] <foolip>
annevk: ah, so Firefox just never "locks" it?

[05:54:41.0000] <foolip>
Given the 3/1 split it seems sensible to match that for test cases that aren't contrived, but I don't know if there is a simpler model than what's implemented in Blink. Maybe tkent would know this better.

[05:55:25.0000] <annevk>
foolip: well Firefox doesn't seem to change it here

[05:55:33.0000] <annevk>
foolip: I don't know if Firefox locks it

[05:55:41.0000] <annevk>
(or when that's observable)

[06:16:23.0000] <wanderview>
falken: huh... so an extension couldn't redirect a page resource to a chrome-extension:// URL and intercept it?  I thought that was a prime use case

[06:41:56.0000] <MikeSmith>
https://stackoverflow.com/questions/50062084/how-to-fallback-to-browsers-default-fetch-handling-within-event-respondwith

[06:42:16.0000] <MikeSmith>
JakeA: ⬆

[06:44:53.0000] <wanderview>
MikeSmith: I commented... it looks like a firefox bug that is fixed in 60

[06:45:43.0000] <wanderview>
they are probably using view-source or a session restore which tries to set force-cache... but in FF59 we accidentally use only-if-cached

[06:48:12.0000] <annevk>
oh, I also commented

[06:48:28.0000] <annevk>
but I did not know that!

[06:48:47.0000] <MikeSmith>
wanderview: oh cool, thanks!

[06:50:24.0000] <MikeSmith>
thanks too annevk

[07:02:43.0000] <JakeA>
I guess I want make it a third comment then 😀

[07:04:54.0000] <wanderview>
the real  surprise is that Jeff Posnick did not comment 30 seconds after the question was asked

[07:08:34.0000] <annevk>
foolip: so when this file rename was done, did nobody care all the external links would be broken?

[07:08:45.0000] <annevk>
foolip: e.g., I have https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Node.cpp?l=2054&gsn=RemoveAllEventListenersRecursively here and it's useless now...

[07:09:00.0000] <annevk>
(I can make it work, but still)

[07:16:37.0000] <nox>
annevk: http://w3c-test.org/html/browsers/origin/relaxing-the-same-origin-restriction/document_domain_setter.html

[07:16:41.0000] <nox>
This seems to pass nowhere.

[07:17:10.0000] <nox>
We didn't have WindowOrWorkerGlobalScope.domain in Servo, just implemented it, this failed with `assert_equals: expected "http://web-platform.test:8000" but got "http://www1.web-platform.test:8000"`,

[07:17:21.0000] <nox>
on all other browsers, the test doesn't even seem to pass security checks, so am scared.

[07:29:05.0000] <domfarolino>
annevk: Yeah that always gets&annoys me too

[07:29:14.0000] <nox>
I don't even understand why that test should pass. :/

[07:31:12.0000] <wanderview>
annevk: does cs.chromium.org not offer permalinks?

[07:32:15.0000] <annevk>
wanderview: dunno, the links I had don't work across renames at least

[07:32:34.0000] <annevk>
nox: hmm

[07:32:37.0000] <wanderview>
annevk: we have the same problem in gecko... but we suggest people use permalinks in code comments and bugs, etc

[07:33:27.0000] <annevk>
nox: I guess you'd have to look into blames

[07:33:43.0000] <annevk>
wanderview: ooh I see, with the commit in there

[07:33:52.0000] <annevk>
dunno if that's available

[07:34:22.0000] <annevk>
wanderview: those also annoy me a tiny bit because it's always hard to work myself back to master

[07:34:37.0000] <nox>
annevk: Is there anything in the specs that say that .origin should be stripped of some subdomain prefix?

[07:35:22.0000] <annevk>
nox: the serialized origin should be immutable I think

[07:35:25.0000] <annevk>
/me double checks

[07:35:57.0000] <annevk>
nox: yeah, it doesn't care about origin's domain field

[07:36:06.0000] <annevk>
nox: so document.domain can't affect origin

[07:36:11.0000] <nox>
Mmh…

[07:36:22.0000] <annevk>
(i mean, it can affect the concept, but not self.origin)

[07:37:40.0000] <nox>
annevk: Ok, so I *think* the test is just dumb, even disregarding the security failures on all major browsers.

[07:37:56.0000] <nox>
annevk: This https://github.com/w3c/web-platform-tests/blob/master/html/browsers/origin/relaxing-the-same-origin-restriction/document_domain_setter.html#L19-L20 sets the iframe URL to some www1.… URL,

[07:38:25.0000] <nox>
and window.origin is http://web-platform.test:8000,

[07:38:45.0000] <nox>
so AFAIK iframe.contentWindow.origin can never be equal to window.origin.

[07:43:21.0000] <annevk>
nox: you might wanna look at blame

[07:43:29.0000] <annevk>
nox: Servo folks wrote that test

[07:43:34.0000] <nox>
LOL

[07:44:24.0000] <nox>
annevk: I just pinged Alan because I knew he did cross-origin stuff and he may be interested into looking at the failures, and I had not even noticed he wrote it. :)

[07:45:27.0000] <annevk>
nox: if you're worried about security run https://github.com/w3c/web-platform-tests/tree/master/html/browsers/origin/cross-origin-objects btw

[07:45:36.0000] <nox>
annevk: Noted.

[07:45:51.0000] <nox>
annevk: I'm under three layers of interdependent blocked upgrades, I just want to land stuff rn. :)

[07:46:48.0000] <annevk>
I've lost trace of my stack, but I'm still doing stuff with document.open() so I guess it's all good

[07:48:07.0000] <nox>
annevk: Ah ah ah.

[07:57:53.0000] <ajeffrey_>
nox: okay, looking...

[08:08:37.0000] <ajeffrey_>
nox: OK, so there's three things going on in https://github.com/w3c/web-platform-tests/blob/master/html/browsers/origin/relaxing-the-same-origin-restriction/document_domain_setter.html...

[08:09:54.0000] <ajeffrey_>
1) https://github.com/w3c/web-platform-tests/blob/master/html/browsers/origin/relaxing-the-same-origin-restriction/document_domain_setter.html#L49 does look to be a bug, it assumes origin gets changed to match domain, which it shouldn't.

[08:11:13.0000] <ajeffrey_>
2) Rather annoyingly, some of the tests are failing under FF because it's throwing a different kind of security error: "function() { document.domain = SUFFIX_HOST; }" threw object "NS_ERROR_DOM_BAD_DOCUMENT_DOMAIN: Illegal document.domain value" that is not a DOMException SecurityError

[08:12:22.0000] <ajeffrey_>
3) The test assumes that a cross-origin frameElement is null rather than a security exception. I'd need to check the spec here, but there's a good chance this is also a bug with the test.

[08:17:24.0000] <nox>
ajeffrey_: I marked it as failing in Servo, FYI.

[12:55:36.0000] <annevk>
Would be good to have an issue on that test too

[12:55:51.0000] <annevk>
I can look at fixing it…

[13:01:03.0000] <nox>
annevk: https://github.com/w3c/web-platform-tests/issues/10695

[13:20:50.0000] <foolip>
annevk: I assume people realized that would happen but weren't the same people who could set up a bunch of redirects

[13:21:33.0000] <foolip>
FWIW, whenever I link to something with line numbers I make sure it includes the hash, otherwise it'll be broken before long rename or not

[13:21:43.0000] <foolip>
A bit of extra work, I know


2018-04-28
[19:49:18.0000] <luxio>
What tags should a comment be surrounded in? text in <span>, box surrounding it in <div>?

[06:42:28.0000] <annevk>
nox: ajeffrey_: was pretty easy to fix after all https://github.com/w3c/web-platform-tests/pull/10703

[06:52:13.0000] <ajeffrey_>
annevk: that's good! Odd about the incorrect FF exception, I'm surprised nothing else caught this.

[06:59:52.0000] <annevk>
ajeffrey_: testing is pretty bad overall

[07:00:06.0000] <annevk>
(getting much better though)


2018-04-30
[04:23:48.0000] <smaug____>
I wonder how much webcomponents implementation slows down normal DOM operations and whether to have a fast path when page doesn't use webcomponents

[05:08:52.0000] <annevk>
smaug____: custom elements, shadow trees, or both?

[05:09:11.0000] <smaug____>
both

[05:09:24.0000] <smaug____>
CE adds CEReactions overhead, and element creation etc

[05:09:31.0000] <smaug____>
shadow dom affects to event dispatch and such

[05:31:12.0000] <smaug____>
hmm, https://w3c.github.io/touch-events/#dom-touchevent-targettouches may need some tweaks in shadow DOM case.

[05:31:27.0000] <smaug____>
depends on what 'target' refers to

[06:38:38.0000] <annevk>
smaug____: there's an issue on that

[06:39:41.0000] <smaug____>
there is?

[06:39:47.0000] <smaug____>
there is that other touch event issue

[06:40:15.0000] <smaug____>
perhaps they are the same issue

[06:40:39.0000] <smaug____>
but I thought the other one was about retargeting touch.target in general

[06:41:21.0000] <smaug____>
but targetTouches needs to also change because of touch.target == event.target check

[06:41:35.0000] <annevk>
smaug____: it's supposed to be for touches/targetTouches/changedTouches

[06:42:32.0000] <annevk>
smaug____: the idea is to store all of those in a flat list (event's touch target list), which then gets modified as appropriate by the dispatch algorithm

[06:42:53.0000] <annevk>
smaug____: and then make sure touch.target grabs it from the correct location

[06:43:19.0000] <smaug____>
sure. It is just that other lists don't need to be changed, only their touch objects target

[06:43:43.0000] <smaug____>
targetTouches list itself needs to be modified

[06:44:11.0000] <annevk>
oh sorry

[06:44:29.0000] <annevk>
touch events :/

[06:46:15.0000] <smaug____>
yeah, not exactly simple API, and designed behind closed doors

[07:13:29.0000] <wanderview>
falken: for the chrome-extension:// service workers... do you intercept cross-origin subresource requests to http/https?  and do you enforce CORS there?

[07:53:33.0000] <smaug____>
annevk: do you think touch.targetTouches list object should be modified or replaced with a new one?

[07:54:50.0000] <smaug____>
er, touchEvent.targetTouches

[07:55:59.0000] <annevk>
smaug____: I guess you need multiple lists otherwise you can hold onto one and then if you peek at the appropriate time it'd be similar to the window.event leak

[07:56:20.0000] <smaug____>
right

[07:56:26.0000] <smaug____>
yeah, I was thinking too to create a new list

[07:56:33.0000] <smaug____>
just looking what blink does

[07:56:42.0000] <annevk>
smaug____: I doubt they do anything at the moment

[07:56:55.0000] <annevk>
smaug____: I think both Chrome and Safari haven't fixed these issues

[08:02:03.0000] <smaug____>
blink does adjust touch objects

[08:02:10.0000] <smaug____>
somehow

[08:53:26.0000] <smaug____>
window.event leak is different

[08:53:34.0000] <smaug____>
it is an object hanging on the global

[09:49:59.0000] <Domenic>
annevk: I don't quite understand what's going on in https://github.com/w3c/web-platform-tests/pull/10712 . You're using createElementNS, but browsers still end up with Element and not HTMLAnchorElement?

[09:50:12.0000] <Domenic>
What does that have to do with node document vs. global?

[09:50:14.0000] <annevk>
smaug____: sure, but conceptually it’s similar; you hold onto some object; some code runs while the event is in the shadow tree, can you find a way in?

[09:50:37.0000] <smaug____>
annevk: how is that different to event itself?

[09:50:45.0000] <annevk>
Domenic: they do not end up with Element?

[09:50:54.0000] <annevk>
smaug____: good point

[09:50:59.0000] <Domenic>
annevk: check http://w3c-test.org/submissions/10712/dom/nodes/Document-constructor.html

[09:51:12.0000] <Domenic>
If you use your script editor to log a.constructor.name it's Element

[09:52:20.0000] <annevk>
Domenic: ah, html -> xhtml

[09:52:33.0000] <annevk>
Namespaces are hard, can fix later

[09:52:40.0000] <Domenic>
Oh, OK. Then what is your comment about, node document vs. global?

[09:53:41.0000] <annevk>
Domenic: I draw the wrong conclusions thus far; I was thinking the URL stuff failed because it used the global to find a base URL and encoding

[09:54:02.0000] <Domenic>
I see, OK

[09:54:04.0000] <annevk>
Domenic: the output not being ASCII did not tip me off…

[09:54:30.0000] <Domenic>
Yeah, thus the comment I just added about including a sanity check. The failure mode being ".href just gives you back what you set" makes this test hard to reason about.

[09:55:38.0000] <annevk>
Will do

[10:31:01.0000] <annevk>
Domenic: I think you missed https://github.com/w3c/web-platform-tests/pull/10686 since it wasn't linked from a GitHub comment

[10:32:48.0000] <annevk>
Oh, and I had not removed the "needs tests" label

[13:09:45.0000] <howdoi>
What's am I missing on TransformStream here? -> https://jsfiddle.net/gnumanth/yve4froq/

[13:10:02.0000] <howdoi>
'pipeThrough' on 'ReadableStream': parameter 1's 'writable' property is undefined.

[13:13:10.0000] <howdoi>
shouldn't TransformStream return both write and read streams?

[13:13:16.0000] <howdoi>
/cc @Domenic ^^

[13:14:42.0000] <Domenic>
howdoi: you are passing a function, not a TransformStream.

[13:15:59.0000] <howdoi>
Domenic: duh! my bad, thanks, so it's rather `await resp.body.pipeThrough(markedTransform())` is there a way to `.pipeTo` console?

[13:16:11.0000] <Domenic>
No, neat idea though.

[13:16:25.0000] <Domenic>
pipeTo(new WritableStream({ write: console.log })) should probably work though

[13:18:44.0000] <howdoi>
agree, just for debugging purpose

[13:22:38.0000] <domfarolino>
Domenic: could you tell me what `console.countReset()`produces in Edge (any output at all?, warning that no previous count exists?)

[13:23:21.0000] <Domenic>
domfarolino: it outputs " null: 0"

[13:23:33.0000] <Domenic>
If I call it again it outputs nothing

[13:23:38.0000] <Domenic>
This seems surprising

[13:23:40.0000] <domfarolino>
Whoah really

[13:24:08.0000] <Domenic>
Uhhh now I've broken the console by reloading

[13:24:36.0000] <Domenic>
I guess reloading on about:blank does not make the Edge console happy

[13:24:44.0000] <Domenic>
Anyway same results on another random page

[13:24:57.0000] <howdoi>
https://jsfiddle.net/gnumanth/yve4froq/3/ done :-)

[13:25:21.0000] <howdoi>
we can't pipeTO dom yet, right? (unless we do that iframe trick thinge)

[13:26:00.0000] <domfarolino>
Oh boy lol

[13:26:35.0000] <howdoi>
:D

[13:26:58.0000] <domfarolino>
Ok, I am leaning towards what all browsers are doing now for timeEnd with no timer (a warning)

[13:28:12.0000] <howdoi>
is something wrong with `.pipeThrough(new TextDecoder())` ?

[13:28:54.0000] <domfarolino>
Will see if we can get edge and node on board since they're the impls that have countReset as of now

[13:32:42.0000] <domfarolino>
Domenic: would you mind calling it again with a label like "a" or something? Want to make sure the behavior you're seeing is not a default conversion issue, but an actual anomaly with the API

[13:55:04.0000] <Domenic>
domfarolino: uhhh it appears that it's similar. The first time I call it it prints " a: 0". Future times it prints nothing.

[13:55:23.0000] <domfarolino>
Gotcha, thanks. That's messy

[14:11:46.0000] <domfarolino>
Domenic: RE you're console comment: ahh that's right, whoops I misunderstood. Hopefully we can get this specc'd that'll be nice :)

[14:11:58.0000] <Domenic>
Yeah current Edge behavior seems pretty bonkers

