2015-01-01
[18:51:54.0000] <gsnedders>
Happy New Year, y'all!

[19:17:33.0000] <MikeSmith>
gsnedders: HNY

[22:13:18.0000] <zewt_>
jesus, this is a new top reason for me to get the hell away from firefox: i open a new browser window and i'm blinded by a bright yellow donation beg screen

[00:02:28.0000] <annevk>
Happy 2015 everyone

[00:02:46.0000] <annevk>
/me is starting it with a cold

[00:16:47.0000] <annevk>
I wonder why things like https://github.com/volarvideo/webvtt/commit/c0cc14cf5bb4611e5b72cfca33a2dbe88226eb4e#diff-09461573a85e2d94f056dd6814769042L456 are true

[00:16:55.0000] <annevk>
Shouldn't the JIT take care of that?

[00:25:13.0000] <MikeSmith>
Happy New Year annevk hope your cold goes away soon

[00:26:42.0000] <annevk>
MikeSmith: HNY to you too! Saw you were enjoying the snow :-)

[00:27:57.0000] <MikeSmith>
hah yeah

[00:30:38.0000] <MikeSmith>
annevk: a regular expression being faster seems counterintuitive

[00:31:26.0000] <annevk>
Yeah, though JITting is weird

[02:43:06.0000] <jgraham>
Simple regular expressions get compiled themselves, so it's not that surprising they're fast

[02:43:11.0000] <jgraham>
Blame sunspider

[10:48:32.0000] <roc>
pretty much all regular expressions get compiled these days

[10:52:32.0000] <jgraham>
For large values of "simple" then :)

[10:52:40.0000] <jgraham>
Or should that be small?…


2015-01-02
[16:41:43.0000] <MikeSmith>
soft-keyboard backspace key doesn't work in the github browser-based editor thing in Firefox mobile

[23:10:46.0000] <roc>
filed a bug>

[23:10:49.0000] <roc>
?

[23:11:25.0000] <roc>
which github brower-based editor thing are we talking about by the way?

[23:37:09.0000] <MikeSmith>
roc: haven't filed a bug yet but will now

[23:37:39.0000] <MikeSmith>
roc: I mean the editor that github gives you to edit a file in the repo

[23:37:52.0000] <MikeSmith>
e.g., a readme

[23:39:37.0000] <MikeSmith>
you have to be viewing github in the desktop mode it provides, instead of the default mobile view

[00:09:20.0000] <MikeSmith>
roc: filed https://bugzilla.mozilla.org/show_bug.cgi?id=1117051

[00:16:29.0000] <roc>
thanks

[04:49:32.0000] <hemanth>
can anyone elaborate : "object that does not have the default behaviour for one or more of the essential internal methods that must be supported by all objects."

[04:52:27.0000] <hemanth>
"essential internal methods"

[04:55:10.0000] <caitp>
there are a bunch of internal methods, like [[OwnPropertyKeys]] (for example), there are defaults, but exotic objects often need to have special versions

[04:57:08.0000] <hemanth>
caitp, can you give an example of one such object that is exotic?

[04:58:12.0000] <caitp>
Array and String come to mind

[04:58:37.0000] <caitp>
direct proxies

[04:59:38.0000] <hemanth>
special versions?

[05:00:06.0000] <hemanth>
that means they don't have all the internal methods?

[05:00:35.0000] <hemanth>
they don't have 'default behaviour' hmm

[05:00:40.0000] <caitp>
i believe so, for instance [[Construct]] is not present in bound functions

[05:00:48.0000] <caitp>
but [[Call]] is

[05:01:42.0000] <hemanth>
caitp, strange behaviours

[05:06:37.0000] <caitp>
different behaviours are like, not being able to define an accessor for Array's "length" property

[05:09:55.0000] <hemanth>
caitp, but it's possible for {}

[05:10:19.0000] <hemanth>
essential internal methods that must be supported by all objects, the spec does not list them all, or did I miss it

[05:12:56.0000] <caitp>
https://people.mozilla.org/%7Ejorendorff/es6-draft.html#table-5

[05:15:36.0000] <hemanth>
caitp, so what's different in Array that it become exotic? Because it does not have, [[ Get ]] [[ Set ]] ?

[05:16:18.0000] <caitp>
it has overridden versions of several essential internal methods

[05:16:47.0000] <hemanth>
and there is no way to find out what has been overridden ?

[05:16:55.0000] <caitp>
well, just [[DefineOwnProperty]] I guess

[05:18:13.0000] <hemanth>
thanks caitp

[05:18:15.0000] <caitp>
it's all in the spec, look at section 9.4

[05:18:33.0000] <caitp>
and 9.5

[05:18:40.0000] <hemanth>
sure

[06:27:23.0000] <hemanth>
caitp, how do you read the spec, end-to-end ? I normally skim sections, but it's preferred to read end-to-end twice and then sections...


2015-01-03
[00:04:13.0000] <Ms2ger>
gsnedders, good night

[10:08:46.0000] <hemanth>
what's wrong with class CustomButton extends HTMLButtonElement { constructor() { } }; let myButton = new CustomButton; document.appendChild(myButton); ?

[10:10:37.0000] <hemanth>
TypeError: Failed to execute 'appendChild' on 'Node': parameter 1 is not of type 'Node'....how come?


2015-01-04
[19:03:41.0000] <Domenic>
deriving from Node doesn't make you a Node


2015-01-05
[05:57:07.0000] <hemanth>
class MyImage extends HTMLImageElement {}

[05:57:12.0000] <hemanth>
^ makes sense ?

[05:57:27.0000] <hemanth>
I get a Uncaught TypeError: Illegal constructor

[05:57:33.0000] <hemanth>
w.r.t ES6 classes

[05:58:02.0000] <caitp->
no implementation supports extending host objects yet

[05:58:10.0000] <hemanth>
:(

[05:58:33.0000] <caitp->
hopefully one day it will be possible :D

[05:58:50.0000] <hemanth>
caitp-, it's an interface right?

[05:58:55.0000] <hemanth>
I meant, HTMLImageElement

[05:59:25.0000] <caitp->
sure

[05:59:29.0000] <hemanth>
more over we can do a document.registerElement('my-img',MyImage)

[05:59:29.0000] <hemanth>
how come that works!

[05:59:56.0000] <hemanth>
so, in that case the class extends the interface?

[05:59:56.0000] <hemanth>
/me shudders 

[06:00:01.0000] <hemanth>
#confused

[06:00:05.0000] <Ms2ger>
It doesn't work now

[06:00:06.0000] <caitp->
it "works", but not really

[06:00:13.0000] <Ms2ger>
Some people are trying to make it work

[06:00:20.0000] <Ms2ger>
I still don't see the point

[06:01:13.0000] <caitp->
right now, in Safari for example, if you subclassed an object "the old fashioned way", you'd have the right prototype, but the C++ object would not be the right type, and would not be initialized

[06:01:26.0000] <hemanth>
https://gist.github.com/hemanth/e6bb66141101b52a76fe

[06:01:27.0000] <caitp->
so, if you tried to access any properties from the superclass, it would throw and that would suck

[06:01:49.0000] <hemanth>
native code can't be accessed yet...hrrm

[06:01:55.0000] <hemanth>
DOM should catchup with ES6

[06:02:11.0000] <Ms2ger>
Why

[06:02:30.0000] <hemanth>
So that we can extends them ?

[06:02:59.0000] <caitp->
well you definitely want to be able to extend builtin classes, which you can't do right now

[06:03:10.0000] <caitp->
and if you can extend Array, why not NodeList

[06:03:20.0000] <caitp->
or one of the Matrix classes

[06:03:50.0000] <Ms2ger>
Why

[06:03:52.0000] <hemanth>
caitp-, but, if the class has createdCallback method and if I do a document.registerElement it works just like any other custom element

[06:05:20.0000] <caitp->
because if you can't, that's really weird ;) unless tc39 introduces a concept of "final" classes, which would help explain the confusing behaviour better

[06:06:05.0000] <hemanth>
caitp-, started with a silly node module  extending Array -> https://github.com/hemanth/node-arey/blob/master/index-es6.js ;)

[06:06:26.0000] <caitp->
yeahhhhh that doesn't quite work the way you expect though :(

[06:06:55.0000] <hemanth>
which? the custom element or the node module or both?!

[06:06:56.0000] <annevk>
hemanth: see recent blink-dev discussion and perhaps also on es-discuss with respect to subclassing

[06:06:58.0000] <caitp->
and in all engines, Array.isArray() would fail for it, which it technically shouldn't

[06:07:20.0000] <annevk>
hemanth: ES6 needs to solve some issues and seems to be opting out at the last minute :-(

[06:07:46.0000] <annevk>
hemanth: https://bugzilla.mozilla.org/show_bug.cgi?id=1117172 lists some of the things nobody is decided on

[06:08:37.0000] <annevk>
hemanth: the reason you can pass it to registerElement is because the registerElement implementation looks at the passed object's prototype property, bit of a hack

[06:11:15.0000] <hemanth>
annevk, ha ha, it would fail if I do a new Img() on register after extending :/

[06:11:49.0000] <hemanth>
annevk, Do you think class is not a goof feature of ES6? I have many against it and only few pro

[06:12:03.0000] <annevk>
hemanth: the problem is that TC39 thought they were going to explain all of DOM and then they didn't

[06:12:32.0000] <annevk>
hemanth: I don't know

[06:12:35.0000] <hemanth>
:(

[06:12:43.0000] <caitp->
it's a bit hard

[06:12:48.0000] <annevk>
hemanth: but the syntax you used above needs to work at some point, we're trying to figure out how

[06:13:53.0000] <hemanth>
annevk,if I extend a HTMLSpanElement element it can set it's textContent, but for an ImageElement, I can't set it's src

[06:17:50.0000] <hemanth>
it would cool to have a document.deRegisterElement ;) ? ( or is it dumb )

[06:17:55.0000] <annevk>
hemanth: not even if you use the <img is> construct?

[06:19:23.0000] <annevk>
hemanth: there's a ton of problems though, none of this was designed with extensibility in mind

[06:20:17.0000] <hemanth>
annevk, I get an Illegal construct

[06:20:22.0000] <annevk>
hemanth: what would deRegisterElement do?

[06:20:41.0000] <annevk>
hemanth: it might be interesting to have more registry primitives though, agreed, so you can more completely control it

[06:20:44.0000] <caitp->
you'll get an illegal construct if you subclass Map and call super() too

[06:20:44.0000] <hemanth>
did not try  <img is=""> thing

[06:21:19.0000] <annevk>
hemanth: oh yeah, actual ES6 subclassing does not work yet in any browser

[06:21:19.0000] <hemanth>
caitp-, hrrmm phew..

[06:21:31.0000] <annevk>
hemanth: because it's not defined per above

[06:21:42.0000] <caitp->
it "sort of" works for user-defined classes

[06:21:57.0000] <hemanth>
annevk, so that I can register element with the same name with functionality changed dynamically?

[06:22:06.0000] <hemanth>
annevk, I'm using 6to5 heh heh, does IE support it?

[06:22:26.0000] <hemanth>
that was w.r.t deRegisterElement

[06:22:49.0000] <annevk>
hemanth: as per caitp- the only subclassing that works is of your own classes, you can't subclass builtins or platform objects

[06:22:53.0000] <hemanth>
as of now we can't do a registerElement('cat-say'); twice

[06:23:02.0000] <caitp->
chakra's class support is roughly equivalent to v8's right now

[06:23:09.0000] <caitp->
no builtins, no host objects

[06:23:37.0000] <hemanth>
Array is not an exotic object in ES6 right?

[06:23:42.0000] <caitp->
it is

[06:24:14.0000] <hemanth>
caitp-, no builtins, no host objects as per the spec or the current implementation ?

[06:24:46.0000] <caitp->
the current implementation... per dmitry's comments, the spec doesn't really do an adequate job of explaining how it can/should work for DOM stuff

[06:24:57.0000] <caitp->
it could possibly work for builtins (but doesn't anywhere yet)

[06:26:27.0000] <hemanth>
oh, ok

[06:27:19.0000] <hemanth>
class Fetch extends XMLHttpRequest() {} #lolz

[06:27:36.0000] <caitp->
the issues are about allocation of the object (especially for DOM objects), about passing arguments to the superconstructor (arbitrary arguments) --- DOM objects don't really have callable constructors right now, there are a few other issues

[06:28:57.0000] <caitp->
well, XHR does have a callable constructor, not counting that :>

[06:29:48.0000] <hemanth>
heh heh

[06:31:13.0000] <caitp->
lot of this was discussed at https://groups.google.com/forum/#!topic/v8-users/bwEPA3vcscg

[06:38:59.0000] <hemanth>
reading...

[06:43:45.0000] <caitp->
I think a lot of posters in that thread failed to CC v8-users and kept it to blink-dev, might be better to read the blink-dev version :p

[06:43:57.0000] <caitp->
anyways, people are working on it, it's just not there yet

[07:05:40.0000] <annevk>
caitp-: the problem is that Google Groups does not accept posts from members that are not subscribed, even if they are subscribed to some other group and are not spammers there

[07:05:56.0000] <caitp->
ah

[07:05:59.0000] <annevk>
caitp-: so e.g. my posts would make it through to blink-dev, but not elsewhere

[07:11:05.0000] <hemanth>
/me needs some nom noms

[07:49:22.0000] <MikeSmith>
https://github.com/google/end-to-end/wiki/Threat-model "we discovered that Chrome Extensions can also use chrome.tabs.captureVisibleTab to take a screenshot of current tab in any browser window"

[07:49:41.0000] <MikeSmith>
that seems like not such a great feature

[07:55:33.0000] <caitp->
what would you expect this to do: http://jsfiddle.net/n8rt8saL/

[07:56:03.0000] <caitp->
^--- annevk, you'd probably be good at that one

[07:56:48.0000] <annevk>
caitp-: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26431

[07:56:49.0000] <caitp->
chromium decides to rewrite 1.2 to 1.0.0.2, while other browsers I have available don't :< I feel like that's not right

[08:00:33.0000] <jgraham>
MikeSmith: installing extensions you don't trust seems like a losing game

[08:01:55.0000] <caitp->
that's kind of not fun :(

[08:04:16.0000] <MikeSmith>
jgraham: yeah I guess given how extensions work and there's a lot more invasive things than that a malicious extension could do

[08:11:33.0000] <caitp>
but what if you can't visit that shady looking gambling/smut/whatever website without installing the shady extension which is not vetted by anyone as being trustworthy?

[08:15:02.0000] <jgraham>
I think the problem is more normally that you visit your totally trustworthy banking site having installed an extension / native app / whatever that you mistakenly believed was trustworthy (e.g. because you had no means to verify it wasn't)

[08:16:25.0000] <caitp>
putting the onus of deciding who to trust on users is problematic because a lot of users don't know that it's even something to think about :(

[08:19:03.0000] <annevk>
I wonder if Google will standardize the protocols used by http://chrome.blogspot.ch/2015/01/introducing-google-cast-for-audio.html

[08:19:06.0000] <caitp>
and even when you're dealing with shady sites, grandpa has an incentive to gamble on horse racing,  he might not have an incentive to think about "what will this application be able to do, what data of mine does it have, etc"

[13:24:31.0000] <roc>
annevk: so far Chromecast has been a very closed device.

[13:25:30.0000] <roc>
annevk: but I think it's worth asking our standards-friendly friends at Google to see if there's anything they can do


2015-01-06
[18:29:24.0000] <MikeSmith>
TLS 1.0 support is disabled for whatwg.org, right?

[18:29:55.0000] <MikeSmith>
ah no I mean the other way around

[18:30:11.0000] <MikeSmith>
1.1 and 1.2 not supported

[22:41:33.0000] <annevk>
MikeSmith: should get fixed this quarter by DreamHost

[23:23:08.0000] <MikeSmith>
annevk: ah ok yeah I vaguely remember asking about this earlier

[23:23:25.0000] <annevk>
MikeSmith: sorry you had to fix all that URL bug spam

[23:23:36.0000] <MikeSmith>
no worries

[23:23:44.0000] <MikeSmith>
I should have caught it before I did

[23:23:51.0000] <annevk>
MikeSmith: I initially thought a bunch of actual work happened

[23:23:57.0000] <MikeSmith>
I wasn't checking my e-mail earlier today

[23:23:58.0000] <MikeSmith>
hahah

[23:24:04.0000] <MikeSmith>
yah me too

[23:24:12.0000] <annevk>
so naïve

[23:24:17.0000] <MikeSmith>
haha

[23:24:30.0000] <MikeSmith>
no, you're an optimist

[23:24:43.0000] <MikeSmith>
glass half full and all that

[23:24:51.0000] <MikeSmith>
most of the time

[23:24:55.0000] <MikeSmith>
that's why people love you

[23:26:30.0000] <MikeSmith>
annevk: so btw are you aware of any trend with sites disabling TLS 1.0 support?

[23:26:39.0000] <MikeSmith>
or any guidance that suggests doing that?

[23:27:01.0000] <MikeSmith>
I understand sites disabling SSLv3

[23:27:36.0000] <annevk>
MikeSmith: https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility

[23:27:47.0000] <MikeSmith>
/me looks

[23:28:47.0000] <annevk>
MikeSmith: Adam Langley keeps saying this btw: "This seems like a good moment to reiterate that everything less than TLS 1.2 with an AEAD cipher suite is cryptographically broken."

[23:29:36.0000] <MikeSmith>
that seems pretty drastic

[23:29:53.0000] <MikeSmith>
and I hope it's not true

[23:30:38.0000] <MikeSmith>
I wonder there's some risk of boy-who-cried-wolf right now around some of the rhetoric with regard to TLS

[23:31:04.0000] <MikeSmith>
it alienates some people who would otherwise be more receptive and open-minded

[23:31:20.0000] <annevk>
Adam Langley knows what he's talking about, but cryptographically broken doesn't mean that attacks are necessarily feasible I believe

[23:31:23.0000] <MikeSmith>
or maybe it's needed to wake more people up, I dunno

[23:31:28.0000] <MikeSmith>
ok

[23:31:55.0000] <annevk>
There's certainly a lot of weird rhetoric found on www-tag...

[23:32:08.0000] <MikeSmith>
well that's crazy town out there

[23:32:22.0000] <MikeSmith>
those two guys

[23:32:33.0000] <MikeSmith>
it's like a comedy act

[23:33:13.0000] <annevk>
The biggest hurdle is Mixed Content

[23:33:19.0000] <MikeSmith>
yup

[23:34:21.0000] <MikeSmith>
certainly I know that for trying to move all of w3.org to TLS that's a major issue

[23:34:57.0000] <MikeSmith>
but there are other costly content-migration issues with it

[23:35:41.0000] <MikeSmith>
that doesn't mean it shouldn't be done, or can't be

[23:36:06.0000] <annevk>
But W3C doesn't have that much embedded stuff, does it?

[23:36:46.0000] <annevk>
Most resources seem same-origin

[23:37:14.0000] <annevk>
W3C could at least start by not redirecting away from HTTPS

[23:38:27.0000] <MikeSmith>
yeah w3c doesn't have nearly has much embedded content per page as other sites (as far as the mixed-content issue goes) but it still has tons of pages with small amounts

[23:38:54.0000] <MikeSmith>
especially stylesheets

[23:39:31.0000] <MikeSmith>
yeah I don't understand why w3c is still redirecting away from HTTPS

[23:40:36.0000] <MikeSmith>
but I do know that the w3c systems team is having a lot of discussions about how to deal with this stuff, and deployment plans for the coming months

[23:41:49.0000] <MikeSmith>
anyway, about TLS 1.0 on the server side, in practice right now, disabling TLS 1.0 server support means that a lot of clients aren't going to be able to access your content, right?

[23:42:09.0000] <MikeSmith>
(let alone disabling TLS 1.1 support)

[23:43:42.0000] <MikeSmith>
in other news I see that WebKit is planning to remove their Shared Workers code (after having stopped shipping it some time back)

[23:44:34.0000] <MikeSmith>
dunno how big of a difference any of that is, given no support for Shared Workers on any mobile UAs, nor in IE

[23:44:56.0000] <Ms2ger>
Not even in Servo

[23:45:31.0000] <annevk>
If they ever want service workers... But from that email it seemed like the current implementation was not going to work for that anyway

[23:45:48.0000] <annevk>
MikeSmith: not sure what TLSv10 is needed for

[23:46:54.0000] <MikeSmith>
annevk: I thought it was that some UAs still only have TLSv10 support, and no v11 or v12 support

[23:48:59.0000] <MikeSmith>
hmm I see nobody even asked for Shared Workers support at https://wpdev.uservoice.com/forums/257854-internet-explorer-platform?query=Shared

[23:49:43.0000] <MikeSmith>
though Service Worker got a ton of votes

[23:49:45.0000] <MikeSmith>
https://wpdev.uservoice.com/forums/257854-internet-explorer-platform?query=worker

[00:14:33.0000] <hemanth>
meow

[00:36:38.0000] <MikeSmith>
opensearch plugin this looks pretty cool

[00:36:49.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27754 from Domenic

[00:36:54.0000] <MikeSmith>
https://developer.mozilla.org/en-US/Add-ons/Creating_OpenSearch_plugins_for_Firefox

[00:39:29.0000] <MikeSmith>
works in Chrome too http://browserfame.com/2071/opensearch-plugin-chrome

[00:39:44.0000] <MikeSmith>
though the UI isn't as discoverable

[01:39:23.0000] <annevk>
http://a9.com/-/spec/opensearch/1.1/ is dead

[01:39:28.0000] <annevk>
namespaces \o/

[01:41:42.0000] <annevk>
http://www.opensearch.org/Specifications/OpenSearch/1.1

[04:14:12.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=163050 "Create New HTML Tag: <BLINQUEE>"

[04:14:13.0000] <annevk>
Status: VERIFIED FIXED

[04:14:18.0000] <annevk>
Whiteboard: notfixed

[04:14:48.0000] <annevk>
(via smontagu on another server)

[04:22:03.0000] <hemanth>
meow

[04:53:26.0000] <hemanth>
annevk, if you are around, after extending the image element, i tried <img is="myImg"> that did not work either :(

[05:17:44.0000] <annevk>
hemanth: works for me

[05:17:56.0000] <annevk>
document.registerElement('test-img', { prototype: { someattribute: "x" }, extends: 'img' })

[05:18:06.0000] <annevk>
var test = document.createElement("img", "test-img")

[05:18:07.0000] <annevk>
test.src = "image"

[05:18:07.0000] <annevk>
document.body.appendChild(test)

[05:33:36.0000] <hemanth>
annevk, I have done class TestImage extends HTMLImageElement {}

[05:34:40.0000] <annevk>
hemanth: when everyone said yesterday that class X extends Y {} doesn't work for anything but custom classes they were not joking around

[05:36:17.0000] <hemanth>
heh heh I got that point annevk, but i'm able to emulate it, with backgourdimage attr

[05:36:43.0000] <hemanth>
I just mentioned that with is="" thinge as well, this.src didn't work

[05:37:11.0000] <annevk>
it does if you follow the rules

[05:38:30.0000] <hemanth>
:)

[05:38:59.0000] <hemanth>
/me passes annevk some iced tea ^_^

[05:40:45.0000] <hemanth>
I'm sorry if I annoyed you annevk, I do remember yesterday's discussions

[05:41:22.0000] <annevk>
hemanth: no worries, I was happy to try it out

[05:42:37.0000] <hemanth>
:)

[05:46:23.0000] <hemanth>
annevk, BTW http://jsfiddle.net/gnumanth/a08wghyk/ is what I have done, //cc'ing caitp as well. ( ugly? )

[05:49:21.0000] <hemanth>
that's transpiled using 6to5

[06:01:02.0000] <darobin>
hemanth: that's actually pretty nice code for something transpiled; I'm guessing it's not using that many 6 features?

[06:02:08.0000] <hemanth>
darobin, it's using classes and template strings, hang on ill pass the code

[06:02:17.0000] <MikeSmith>
I heard ES6 classes are going to kill us all

[06:02:34.0000] <gsnedders>
I heard MikeSmith was going to kill us all. :)

[06:02:37.0000] <hemanth>
MikeSmith, heh heh debatable

[06:03:01.0000] <hemanth>
/me is already dead ;)

[06:03:01.0000] <MikeSmith>
class-ical inheritance bugbear

[06:03:31.0000] <MikeSmith>
gsnedders: I kill with kindness

[06:03:39.0000] <hemanth>
I hope FP will lead kindly to light ;)

[06:04:56.0000] <MikeSmith>
dunno what FP is

[06:05:03.0000] <MikeSmith>
wonder if I want to know

[06:05:18.0000] <hemanth>
Functional Programming, MikeSmith you already know ;)

[06:05:19.0000] <darobin>
MikeSmith: run before you get evangelised :)

[06:05:24.0000] <darobin>
ruuuuuuuuun!!!

[06:05:25.0000] <MikeSmith>
ah

[06:05:35.0000] <hemanth>
heh heh

[06:05:46.0000] <hemanth>
The fantasy land

[06:05:58.0000] <hemanth>
/me takes MikeSmith on a ride to the fantasy land 

[06:06:15.0000] <darobin>
/me didn't know MikeSmith was allowed *out* of fantasy land

[06:06:28.0000] <MikeSmith>
/me gets off at the Rust rest top to take a potty break

[06:06:53.0000] <hemanth>
/me gets some sugar.js 

[06:07:06.0000] <Ms2ger>
MikeSmith, joooooiiiiin uuuuuuuuuus

[06:07:47.0000] <MikeSmith>
I'm not smart enough for functional programming

[06:07:57.0000] <MikeSmith>
plus, I actually like side effects

[06:08:00.0000] <Ms2ger>
MikeSmith, we've got plenty imperative :)

[06:08:32.0000] <jgraham>
For once I wish I lived in a more religious — or at least more Christian — country so we could have today as a holiday. Or, I suppose, a less religious country that still had it as a holiday (e.g. Sweden)

[06:08:33.0000] <gsnedders>
side-effects are horrible!

[06:09:06.0000] <MikeSmith>
side effects are what makes life interesting

[06:09:39.0000] <MikeSmith>
jgraham: where is this day a holiday?

[06:09:46.0000] <jgraham>
MikeSmith: Not here :(

[06:09:51.0000] <gsnedders>
jgraham: what, you English people get your Yule Log today!

[06:09:53.0000] <MikeSmith>
Catholic holiday I guess

[06:09:59.0000] <gsnedders>
Why did I capitalise that?

[06:10:13.0000] <jgraham>
Not unless the Scandinavians suddenly went catholic on me

[06:10:28.0000] <MikeSmith>
oh holy god

[06:10:36.0000] <MikeSmith>
Epiphany

[06:10:50.0000] <MikeSmith>
it's like, the very best religious holiday of all

[06:11:25.0000] <gsnedders>
Wikipedia makes it sound like yule logs should be Twelfth Night and not today.

[06:11:31.0000] <gsnedders>
Oh well. Anglicans!

[06:12:37.0000] <annevk>
Is there any point in having <img is=...> once X extends HTMLImageElement {} actually works?

[06:12:42.0000] <jgraham>
gsnedders: I am having great difficulty not making faecal jokes

[06:13:10.0000] <jgraham>
annevk: I thought the point was so the declarative sematics were preserved

[06:13:11.0000] <hemanth>
annevk, readability ?

[06:13:34.0000] <jgraham>
*semantics

[06:13:41.0000] <gsnedders>
jgraham: well it's not my problem that you English people bring them upon yourselves!

[06:13:55.0000] <jgraham>
Yule logs?

[06:14:18.0000] <jgraham>
Well that's the effect of a protein-rich diet…

[06:14:31.0000] <hemanth>
Ok, here I go -> http://h3manth.com/new/blog/2015/custom-elements-with-es6/

[06:14:38.0000] <hemanth>
darobin, ^

[06:15:18.0000] <hemanth>
/me runs and hides behind the tree before annevk et.al gets angry and throw stones at me, meow ^_^

[06:19:30.0000] <hemanth>
/me is peeping from the side ^_ ^

[06:24:34.0000] <caitp>
heh =)

[06:25:19.0000] <hemanth>
/me slowly moves near caitp, any comments ;) ?

[06:26:11.0000] <caitp>
i mean, I guess it works for the browsers that support custom elements

[06:26:33.0000] <hemanth>
:)

[06:31:24.0000] <darobin>
hemanth: this.textContent = 'Today's date: ' <- probably doesn't work right :)

[06:31:29.0000] <Ms2ger>
*et al.

[06:32:21.0000] <hemanth>
darobin,  what would you suggest?

[06:32:35.0000] <darobin>
hemanth: escaping the ' in "Today's"?

[06:33:13.0000] <caitp>
apparently in Safari, interfaces are not "function" but "object", too

[06:33:17.0000] <hemanth>
darobin, yikes, ha, that's done in the jsfiddle, not in the text, thanks editing

[06:33:27.0000] <darobin>
I guessed as much :)

[06:33:37.0000] <caitp>
not that it has custom elements, but it dies earlier

[06:34:30.0000] <caitp>
but, even if it did, I think Object.create(HTMLImageElement.prototype) would break whenever you tried to access `src`

[06:34:49.0000] <darobin>
hemanth: I'm happy to see that the transpiler does such a nice job; I mean you're not using *that* much but still

[06:35:41.0000] <caitp>
yeah, other than shadowing `src`, that wouldn't work :(

[06:36:52.0000] <hemanth>
darobin, :)

[06:36:58.0000] <caitp>
actually I'm wrong, apparently JSC tries to use the IDL-defined accessor before letting you shadow it

[06:36:59.0000] <hemanth>
caitp, that's the sad part...

[06:37:02.0000] <caitp>
so it just doesn't work at all

[06:37:21.0000] <gsnedders>
browsers!

[06:37:25.0000] <gsnedders>
who writes this nonsense!

[06:37:38.0000] <darobin>
gsnedders++ # <3

[06:37:50.0000] <hemanth>
I was curios about how Domenic would make the custom-img element

[06:38:01.0000] <hemanth>
gsnedders, :D

[06:38:05.0000] <darobin>
easy

[06:38:09.0000] <gsnedders>
pff, I'm sure I could write a better browser than you guys!

[06:38:10.0000] <darobin>
step 1) patch Chrome

[06:38:18.0000] <darobin>
step 2) profit

[06:39:23.0000] <gsnedders>
darobin: I think you missed the ???

[06:40:22.0000] <darobin>
gsnedders: the ??? ?

[06:40:31.0000] <darobin>
this could get meta

[06:40:33.0000] <gsnedders>
that's what step 2 is!

[06:40:39.0000] <Ms2ger>
darobin!

[06:40:46.0000] <gsnedders>
the big where somehow you convince Google to accept your patch

[06:40:49.0000] <darobin>
Ms2ger! My long-lost love!

[06:41:00.0000] <gsnedders>
d'awww

[06:41:03.0000] <gsnedders>
so romance

[06:41:05.0000] <darobin>
gsnedders: you missed the fact where Domenic works for Google :)

[06:41:32.0000] <darobin>
(that sell-out)

[06:41:37.0000] <gsnedders>
darobin: still has to convince them to ship it!

[06:41:41.0000] <Ms2ger>
darobin, com'ere and review my tests!

[06:42:02.0000] <darobin>
gsnedders: bah, we all know how shipping works at any company no matter how big; that can't be more than a few beers away

[06:42:11.0000] <gsnedders>
darobin: I mean does he have a spec that's public *before* IO?

[06:42:13.0000] <caitp>
well he's gonna get them to ship A.p.includes, so surely that's good enough

[06:42:59.0000] <darobin>
Ms2ger: finish reviewing my test you dropped off of in the middle of the issue discussion :)

[06:43:12.0000] <darobin>
Ms2ger: also, I need to look at your comments on the GH issues you closed

[06:43:24.0000] <Ms2ger>
darobin, link

[06:43:27.0000] <darobin>
gsnedders: who said the spec can't be in C++ :)

[06:43:34.0000] <darobin>
Ms2ger: https://critic.hoppipolla.co.uk/showcomment?chain=9822

[06:43:42.0000] <gsnedders>
darobin: I DID.

[06:44:15.0000] <Ms2ger>
darobin, your answer appears to be beside my point

[06:44:55.0000] <darobin>
Ms2ger: then we're talking past one another — you're saying the tests worked in Gecko when you wrote them but they don't now, and they don't work elsewhere

[06:45:20.0000] <Ms2ger>
darobin, I said it worked, not that it passed

[06:45:41.0000] <darobin>
okay, but elsewhere it's not that they fail, it's that they blow up on an unrelated problem

[06:46:00.0000] <Ms2ger>
Right, and that unrelated bug is still a bug

[06:46:32.0000] <darobin>
I don't think it's a good idea to have tests test something unrelated

[06:46:45.0000] <darobin>
we can get those tests to actually test something independently of other bugs

[06:46:52.0000] <darobin>
which is the information they're after

[06:47:09.0000] <darobin>
if you have issues with how data: and cross-origin interact, that's something for another test

[06:47:52.0000] <darobin>
this is actually obscuring passes

[06:52:53.0000] <gsnedders>
is there any way to per spec get the tentative pre-parse encoding and the final encoding from the parser to be different?

[06:53:01.0000] <gsnedders>
without relying on how many bytes the pre-parse does?

[06:56:52.0000] <darobin>
gah, submodules!!!

[06:57:26.0000] <caitp>
huh, I guess you can't shadow accessor properties at all

[06:57:32.0000] <caitp>
I did not know that

[07:07:57.0000] <Ms2ger>
darobin, all tests test unrelated things

[07:08:10.0000] <darobin>
Ms2ger: yeah, I know the rhetoric

[07:08:23.0000] <Ms2ger>
Whatever

[07:08:29.0000] <darobin>
but this one happens to test something unrelated that doesn't work in most places, and is trivially fixed

[07:08:39.0000] <darobin>
I don't see what the problem is with fixing that

[07:10:08.0000] <darobin>
Ms2ger: sorry but I really don't see what's making you grumpy about this, it's nice when tests work I think...

[07:10:39.0000] <darobin>
unless you're grumpy because some browsers suck, which is, well, a good point

[07:12:20.0000] <jgraham>
I assumed that being generally grumpy about browsers was why we all did this

[07:12:34.0000] <jgraham>
It's GDD

[07:12:43.0000] <darobin>
lol

[07:18:19.0000] <darobin>
Ms2ger: oh, that's so very nice of you to reclose a PR I just reopened without leaving time for discussion

[07:18:23.0000] <darobin>
very mature and all

[07:18:29.0000] <darobin>
friendly, all that

[07:18:48.0000] <darobin>
welcoming, etc — everything that makes working on web tech a great place!

[07:19:00.0000] <Ms2ger>
darobin, the test is correct, I told you so when I first closed the PR, and you reopened it without discussion

[07:19:20.0000] <darobin>
I reopened it so that it would take the rebase into account

[07:19:39.0000] <Ms2ger>
Why rebase? It's wrong

[07:19:49.0000] <darobin>
s/rebase/merge/

[07:20:55.0000] <darobin>
now, I could easily be lost in the test code but it looks to me like this isn't a case in which defaulting to the XHTML namespace applies

[07:21:02.0000] <darobin>
and this fails in every single engine

[07:21:58.0000] <jgraham>
It is possible for the test to be right and still fail in every engine

[07:22:08.0000] <jgraham>
(note: I have no idea what test you are talking about)

[07:22:25.0000] <darobin>
jgraham: that I know, and I could be reading either of the code or the spec wrong since both have some degree of indirection

[07:24:45.0000] <darobin>
and indeed, I now see that I had read the code wrong

[07:24:56.0000] <darobin>
/me looks for a spec bug

[07:25:50.0000] <Ms2ger>
darobin, it's created through createElement, so it's in the HTML namespace per spec

[07:26:10.0000] <darobin>
Ms2ger: yes, I had misread indeed — which is why I'm looking for a spec bug

[07:26:47.0000] <annevk>
jgraham: if that's the only reason there's no reason to support is="" in createElement()

[07:28:50.0000] <jgraham>
annevk: That makes sense I think

[07:28:58.0000] <annevk>
Perhaps for serialization? But at some point this starts to break down...

[07:29:11.0000] <darobin>
ah, right, I recall https://www.w3.org/Bugs/Public/show_bug.cgi?id=19431

[07:29:20.0000] <darobin>
it looks like implementers haven't weighed in much either way :)

[07:54:49.0000] <annevk>
darobin: euhm

[07:55:00.0000] <annevk>
darobin: it's not like implementations agree with each other today

[07:55:09.0000] <annevk>
darobin: or did that change?

[07:55:45.0000] <darobin>
annevk: well, it depends on what aspect of the whole Document mess. It looks like they all have XMLDocument.createElement() return an element with a null ns

[07:56:02.0000] <darobin>
on other parts it is still a complete mindfuck

[07:56:10.0000] <annevk>
How do you even create an XMLDocument?

[07:57:07.0000] <darobin>
sorry, a Document in XML mode

[07:57:23.0000] <annevk>
That doesn't really seem like something we could meaningfully define

[07:57:36.0000] <darobin>
?

[07:58:46.0000] <annevk>
wouldn't that break createElement() in XHTML documents?

[07:59:26.0000] <darobin>
doesn't everything break that :)

[07:59:46.0000] <annevk>
not necessarily

[08:00:10.0000] <annevk>
not as they exist today :p

[08:00:11.0000] <darobin>
seriously though, document.implementation.createDocument(null, null).createElement("foo").namespaceURI returns null pretty consistently

[08:00:37.0000] <annevk>
that's a pretty specific case, too

[08:02:41.0000] <darobin>
annevk: yes, I was just saying that maybe the bits that are aligned can be spec'ed as such; it doesn't look like there's a lot of movement to solve the full list of issues around document dependence

[08:03:25.0000] <darobin>
you argument that have the same Documet behaviour across MIME types is a good one, but I'm not sure it really has that much impact in the real world

[08:03:44.0000] <darobin>
maybe I'm not seeing all the corner cases, but libs are already broken there anyway

[08:05:03.0000] <darobin>
last I check jQuery needed a plugin in order to do anything useful in SVG for instance

[08:05:47.0000] <annevk>
it seems hard to change the behavior of just that case

[08:06:08.0000] <annevk>
without doing silly things with flags that match what no implementation has today either

[08:07:01.0000] <darobin>
annevk: actually, looking more closely that case *is* on XMLDocument

[08:08:11.0000] <darobin>
annevk: I think changing this specific issue is relatively minor; but my interest was more along the lines of thinking about what the minimum victory could be for the broader Document mess

[08:08:19.0000] <annevk>
darobin: it's unclear whether implementations use that interface elsehwere too so hanging things off that seems unwise

[08:08:34.0000] <annevk>
darobin: there's a distinct bug for that

[08:08:46.0000] <darobin>
annevk: you mean for the Document mess? yes I know

[08:09:13.0000] <darobin>
I was mostly wondering if chipping away some of the tentacles might not render the larger issue either moot or more tractable

[08:09:43.0000] <darobin>
well, Gecko does still have XMLDocument.load() but you guys should really remove that because no one else has it

[08:10:46.0000] <darobin>
/me wonders if there's much "instanceof XMLDocument" out there

[08:11:17.0000] <annevk>
darobin: file a bug on load()?

[08:11:31.0000] <darobin>
annevk: there's one already, it's oooold

[08:11:37.0000] <annevk>
Yahoo Mail might be the last one out there

[08:11:40.0000] <annevk>
darobin: pointer?

[08:11:44.0000] <darobin>
/me looking

[08:12:34.0000] <darobin>
there's https://bugzilla.mozilla.org/show_bug.cgi?id=775480 but that's not the one I was thinking of

[08:14:30.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=330771

[08:15:16.0000] <tomvg>
annevk: do you know if the context property of the Request class from the Fetch API (https://fetch.spec.whatwg.org/#requestcontext) is implemented in some browser? I checked Chrome Canary and FF nightly, but couldn't find it - maybe I missed something?

[08:16:35.0000] <annevk>
tomvg: I'm not sure, haven't paid much attention to Fetch et al recently

[08:16:58.0000] <annevk>
tomvg: if bits are landed in browsers now it could very well be that some of the more complicated parts are left out

[08:17:26.0000] <annevk>
tomvg: I recommend filing bugs with use cases

[08:17:55.0000] <tomvg>
don't have a specific use case at the moment, just a keen interest :)

[08:18:59.0000] <tomvg>
I'll dig a bit deeper first

[08:20:08.0000] <darobin>
annevk: that's not the one either; there's https://bugzilla.mozilla.org/show_bug.cgi?id=494705 but it's marked fixed due to the patch that now warns for its usage

[08:20:25.0000] <darobin>
(but I'm sure that's not the bug either, the one I recall had bz in it)

[08:23:58.0000] <annevk>
darobin: so are you sure it's not in other browsers?

[08:24:12.0000] <annevk>
darobin: I found a couple of related bugs that would get fixed due to removal...

[08:25:31.0000] <darobin>
annevk: pretty sure, I can triple-check tomorrow if you want.

[08:28:05.0000] <annevk>
darobin: using "load" in document.implementation.createDocument("", "", null) confirmed for Chrome and IE

[08:28:21.0000] <annevk>
and Safari

[08:28:24.0000] <darobin>
wha?

[08:28:34.0000] <annevk>
that it isn't there

[08:28:38.0000] <darobin>
oh

[08:28:53.0000] <darobin>
you got me scared that reality had been rebooted for a second there

[08:33:46.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=983090 seems to be the relevant bug

[09:17:45.0000] <MikeSmith>
annevk: https://twitter.com/auchenberg/status/552501350102487042

[09:17:57.0000] <MikeSmith>
"I switched kenneth.io to HTTPS, and now my embedded JSfiddles broke. No SSL, @jsfiddle? Any free alternatives?"

[09:18:18.0000] <MikeSmith>
there are no free alternatives afaik

[09:18:21.0000] <Domenic>
jsbin

[09:18:53.0000] <MikeSmith>
Domenic: I thought jsbin was even more we-intentionally-aren't-gonna-do-TLS

[09:19:42.0000] <Domenic>
hmm yeah i guess pro accounts only http://jsbin.com/help/ssl

[09:19:54.0000] <MikeSmith>
ah

[09:20:04.0000] <MikeSmith>
well, glad they offer that at least

[09:20:08.0000] <caitp>
i think plnkr.co is tls-happy, iirc

[09:20:16.0000] <caitp>
maybe not

[09:20:32.0000] <MikeSmith>
codepen's not either afaik

[09:20:47.0000] <MikeSmith>
time for everybody to pro up

[09:21:14.0000] <MikeSmith>
hey there's another reason for more sites to move to TLS as an alternative

[09:21:32.0000] <MikeSmith>
more revenue

[09:21:38.0000] <MikeSmith>
(only half joking)

[09:28:09.0000] <annevk>
MikeSmith: why would jsfiddle not have TLS?

[09:31:18.0000] <Ms2ger>
MikeSmith, live dom viewer? :)

[10:10:15.0000] <MikeSmith>
annevk: because they don't have it? and I don't know why not

[10:10:18.0000] <MikeSmith>
https://careers.microsoft.com/jobdetails.aspx?ss=&pg=0&so=&rw=1&jid=166914&jlang=EN&pp=SS

[10:10:28.0000] <MikeSmith>
"You love debugging minifed javascript code for your own pleasure"

[10:11:01.0000] <MikeSmith>
sounds like Hallvord wrote this job description

[10:15:40.0000] <jgraham>
"comfortable dealing with negative perception"

[10:28:12.0000] <MikeSmith>
jgraham: typo there

[10:28:26.0000] <MikeSmith>
I think they meant "dealing out"

[10:33:43.0000] <annevk>
MikeSmith: no excuses!

[10:59:38.0000] <annevk>
Might have overused the word "sad"

[12:08:28.0000] <wanderview>
annevk: if someone does a fetch(), but never references the Response body data... would you rather have the response sit in memory forever or eventually produce a network error when the remote server gives up on the connection?

[15:24:25.0000] <dmurph>
test

[15:34:56.0000] <caitp>
> @WHATWG tweets a URL, it is at least 5-10 minutes before URL actually points to something interesting

[15:35:12.0000] <caitp>
okay, 2 minutes this time

[15:36:19.0000] <Hixie_>
i think that's because it takes that long to update github


2015-01-07
[18:06:10.0000] <MikeSmith>
didn't know yet about SlimerJS http://slimerjs.org/

[18:06:32.0000] <MikeSmith>
SlimerJS is similar to PhantomJs, except that it runs on top of Gecko, the browser engine of Mozilla Firefox (specifically, version 31), instead of Webkit, and is not yet truly headless.

[18:07:02.0000] <MikeSmith>
Hixie_: Happy New Year

[21:54:03.0000] <hemanth>
Came here looking for a decent use-case/example of Reflect API...

[21:59:20.0000] <hemanth>
Wonder if the Streams API implementation has begun...

[22:05:13.0000] <hemanth>
dbaron: meow

[22:09:18.0000] <caitp>
hemanth, it looks like a way to invoke internal methods ([[....]] methods), but a lot of it should be more or less equivalent to static methods of Object

[22:09:57.0000] <caitp>
not sure what the use-case is though

[22:17:30.0000] <hemanth_>
caitp: interesting, bumped into Reflect.defineProperty(obj, name, desc)

[22:20:50.0000] <hemanth_>
they gel well with proxies

[22:23:45.0000] <terinjokes>
anyone have any ideas why SSE isn't more popular?

[22:25:39.0000] <caitp>
i'm guessing you don't mean intel's SIMD stuff

[22:25:49.0000] <caitp>
and therefore don't know what you mean

[22:37:16.0000] <terinjokes>
sorry, Server Sent Events / EventSource

[22:38:49.0000] <caitp>
IE11 not supporting it likely has something to do with it

[23:46:36.0000] <MikeSmith>
terinjokes: sse predates web sockets and webrtc datachannel and for most use cases those supersede it

[23:47:15.0000] <terinjokes>
MikeSmith: that seems like it's true only for bi-directional communication, no?

[23:49:01.0000] <MikeSmith>
terinjokes: well cleraly there's nothing that requires you do bi-directional communication over a web sockets connection. You can use it to push stuff if you wan

[23:49:32.0000] <terinjokes>
true, but I would say they solve a different use case, rather than supersede

[23:49:59.0000] <terinjokes>
both are a different language than HTTP, no?

[23:50:13.0000] <MikeSmith>
SSE isn't

[23:51:09.0000] <MikeSmith>
and as far as the UA implementors POV and can understand them not wanting to implement SSE if they already support web sockets

[23:51:26.0000] <MikeSmith>
and web sockets are supported basically everywhere now, in all UAs afaik

[23:51:48.0000] <MikeSmith>
as far as browser engines

[23:51:53.0000] <MikeSmith>
well not Presto

[23:52:15.0000] <MikeSmith>
but I'll sure they'll get there too eventually

[23:52:25.0000] <MikeSmith>
ah I mean Servo

[23:52:50.0000] <MikeSmith>
Jon-gian slip there

[00:20:56.0000] <terinjokes>
MikeSmith: i mean websockets and webrtc being not HTTP

[00:21:08.0000] <terinjokes>
whereas SSE is

[00:21:22.0000] <terinjokes>
and SSE is supported everywhere but IE

[00:28:40.0000] <MikeSmith>
ah

[00:28:45.0000] <MikeSmith>
yeah fair enough

[00:29:51.0000] <MikeSmith>
and I didn't know SSE was now supported everywhere but IE

[00:30:10.0000] <MikeSmith>
that's a pretty good argument for IE to add support for it I guess

[02:04:18.0000] <annevk>
wanderview: it's not entirely clear to me what the scenario is; we shouldn't collect the response just because the page has not inspected it yet though

[03:37:41.0000] <smaug____>
hmm, what should happen when there is an attribute type Window, but that Window isn't the current Window of the WindowProxy?

[03:40:02.0000] <smaug____>
Hixie: ^

[03:40:25.0000] <annevk>
smaug____: elaborate?

[03:40:40.0000] <smaug____>
I mean in the scripts

[03:40:45.0000] <smaug____>
accessing such attribute

[03:43:22.0000] <smaug____>
need to ask bz

[03:45:43.0000] <smaug____>
/me was just reading https://www.w3.org/Bugs/Public/show_bug.cgi?id=27128

[04:39:35.0000] <Domenic>
caitp: hemanth: one major benefit of Reflect.* is many of those functions return false instead of throwing.

[04:44:02.0000] <hemanth>
Domenic, no more try catches ;) instead of Function.prototype.apply.call(f, obj, args); we could say Reflect.apply(f, obj, args)

[04:45:31.0000] <Domenic>
Well, that one will still throw if the function throws

[04:46:16.0000] <hemanth>
heh heh yeah, at least in case of 'defineProperty'

[04:46:38.0000] <Domenic>
More like Reflect.deleteProperty vs. delete operator or Reflect.preventExtensions or, indeed, defineProperty

[04:47:02.0000] <hemanth>
cool

[04:47:39.0000] <hemanth>
Reflect.has(obj, key); feels more Javaish

[04:51:36.0000] <hemanth>
Sadly IE Technical Preview is the only browser that has implemented this API..

[07:06:47.0000] <annevk>
Domenic: do you know why the lifecycle callbacks are tranfered?

[08:10:57.0000] <hemanth>
mewo...

[08:11:51.0000] <caitp>
=)

[08:15:52.0000] <hemanth>
caitp, what's new?

[08:16:40.0000] <caitp>
well v8 folks are back from vacation so maybe more exciting syntax sugar features can get reviewed and worked on more

[08:17:04.0000] <hemanth>
^_^

[08:17:20.0000] <hemanth>
/me makes an attempt on FP joke -> https://twitter.com/GNUmanth/status/552688274632761344

[08:26:48.0000] <wanderview>
annevk: remind me where fetch spec issues go?

[08:26:53.0000] <wanderview>
not on github, right?

[08:28:09.0000] <hemanth>
caitp, how about influencing v8 folks to implement http:crbugs.com/346690 or may be even http://crbugs.com/316153 ? :)

[08:29:08.0000] <hemanth>
wanderview, https://github.com/whatwg/fetch/issues right?

[08:31:49.0000] <caitp>
my influence is pretty limited

[08:32:04.0000] <wanderview>
hemanth: actually, I think he prefers here:  https://www.w3.org/Bugs/Public/enter_bug.cgi?product=WHATWG

[08:32:28.0000] <caitp>
I think 316153 is more an issue for the devtools team

[08:32:35.0000] <caitp>
less v8-specific

[08:32:47.0000] <hemanth>
yup

[08:33:16.0000] <hemanth>
wanderview, must be

[08:36:14.0000] <wanderview>
annevk: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27781

[08:36:35.0000] <annevk>
ta

[08:38:36.0000] <caitp>
hemanth, in that first bug are you saying "template literals don't work correctly" or "template literals aren't implemented, please implement them"?

[08:38:53.0000] <caitp>
(because we did this through october-november, try in canary),

[08:43:06.0000] <hemanth>
caitp, implement temaplate strings, this was reported in Feb, will check on canary

[08:43:36.0000] <caitp>
yeah, there were a bunch of bugs like that, it's too hard to go through them all and switch their status on code.google.com

[08:44:27.0000] <hemanth>
caitp, what about arrow functions? is it on it's way? kangax won't help here

[08:44:58.0000] <caitp>
mm, andy did most of arrow functions, i'm not sure what's left

[08:45:17.0000] <caitp>
probably some minor things that make them unshippable for now

[08:46:14.0000] <hemanth>
oh, heard that class implementation is speeding yup

[08:46:14.0000] <caitp>
they should work if you use --js-flags="--harmony-arrow-functions" or whatever it's called

[08:46:32.0000] <hemanth>
not there in experimental flags?

[08:46:44.0000] <caitp>
i think only staged features get switched on with experimental mode

[08:46:52.0000] <caitp>
and i'm not sure they're staged yet, could be wrong

[08:48:12.0000] <hemanth>
hmm

[08:48:16.0000] <caitp>
https://github.com/v8/v8-git-mirror/blob/master/src/flag-definitions.h#L175-L183 <<< those all need flags manually passed in, the shipping ones don't need a flag at all, and the staged ones are enabled if you turn on that experimental flag

[09:01:19.0000] <hemanth>
caitp, nice, thanks.

[09:02:03.0000] <hemanth>
/me wonders what sloppy mode is...

[09:06:41.0000] <zcorpan>
sounds like not "use strict"

[09:58:27.0000] <terinjokes>
MikeSmith: for things I'm working on, real time data updates, I'd prefer SSE to WebSockets. Seems to be created for this use case.

[11:12:59.0000] <Hixie>
smaug____: there should never be an attribute of type Window

[11:20:18.0000] <smaug____>
ah, yeah

[11:43:11.0000] <Ms2ger>
Hixie, is that written down somewhere? :)

[14:00:02.0000] <Domenic>
annevk: 7 months later https://github.com/w3c/webrtc-pc/issues/172


2015-01-08
[16:09:30.0000] <MikeSmith>
bravo sleevi http://lists.w3.org/Archives/Public/public-webrtc/2015Jan/0013.html

[17:32:58.0000] <MikeSmith>
https://medium.com/@dmitriid/w3c-and-whatwg-should-die-a-quick-and-horrible-death-a7cff5e1da8f is subtle and understated

[17:33:12.0000] <MikeSmith>
I think that guy needs to try to state things more emphatically

[17:38:48.0000] <MikeSmith>
btw apparently WHATWG has been abbreviated to just "WG"

[17:39:14.0000] <MikeSmith>
take a break for the holidays and come back to find out all kinds of things have happened

[17:39:28.0000] <MikeSmith>
anyway, I support this rebranding

[17:39:30.0000] <MikeSmith>
WG++

[17:39:49.0000] <terinjokes>
WG-ng++

[17:40:05.0000] <terinjokes>
the next generation WG, for C++

[17:42:38.0000] <caitp>
what does the "WHAT" part stand for anyway

[17:43:02.0000] <caitp>
and can it be condensed into "WUTWG"

[17:43:31.0000] <terinjokes>
slightly serious question: how does one pronounce WHATWG?

[17:43:46.0000] <MikeSmith>
what wee gee

[17:43:49.0000] <terinjokes>
i say "WHAT-wig", but everyone looks at me funny

[17:43:51.0000] <Hixie>
i pronounce it "whatwuhjee"

[17:44:19.0000] <MikeSmith>
Hixie pronounces it funny

[17:44:40.0000] <MikeSmith>
everybody else says wee

[17:44:50.0000] <MikeSmith>
because weeee

[17:45:30.0000] <MikeSmith>
hey this prodigy has an actual concrete proposal

[17:45:37.0000] <MikeSmith>
"Get people from Apple to implement all font-related specs."

[17:45:40.0000] <MikeSmith>
+1

[17:46:02.0000] <MikeSmith>
but I think he means something different than what that sentence actually say

[17:46:42.0000] <MikeSmith>
though "Dig W3C and WHATWG out of their graves, kill and bury them again." is somewhat concrete too

[17:46:49.0000] <jamesr__>
what double uwe gee

[17:50:29.0000] <MikeSmith>
the WHAT WAI gee

[17:50:34.0000] <MikeSmith>
good brainstorming

[17:51:17.0000] <MikeSmith>
"Both W3C and WHATWG should die a quick and horrible death, and the development of web standards should be given to a lean and mean group of people"

[17:51:28.0000] <MikeSmith>
we're plenty mean enough at least

[17:51:28.0000] <Hixie>
yeah i wonder where he's gonna find these people

[17:51:58.0000] <MikeSmith>
yeah

[17:52:07.0000] <MikeSmith>
finding the mean people is easy

[17:52:08.0000] <gsnedders>
MikeSmith: the not having reference implementations bit is almost concrete

[17:52:17.0000] <gsnedders>
MikeSmith: fuck you, that's totally the hardest part!

[17:52:19.0000] <MikeSmith>
hey gsnedders!

[17:52:24.0000] <MikeSmith>
perfect timing!

[17:52:29.0000] <MikeSmith>
you're lean

[17:52:35.0000] <MikeSmith>
but you're not mean

[17:52:37.0000] <MikeSmith>
damn

[17:52:56.0000] <gsnedders>
I can be mean!

[17:52:57.0000] <MikeSmith>
well let's join together, combine efforts

[17:53:11.0000] <MikeSmith>
no gsnedders you do the lean part, I'll do the mean part

[17:53:18.0000] <MikeSmith>
problem solved

[17:54:33.0000] <caitp>
when you're having trouble reaching consensus, take them bowling

[17:54:56.0000] <gsnedders>
I'm randomly either really good at bowling or really shit.

[17:55:01.0000] <gsnedders>
I'm never in between.

[17:55:11.0000] <MikeSmith>
/me adds this stuff to his notes

[17:55:21.0000] <gsnedders>
I either go out and get strikes every second go, or come last.

[17:56:03.0000] <MikeSmith>
forget bowling I think the only way we're going to resolve this is with a three-way dance-off among this guy, Robin, and Lachlan

[17:56:15.0000] <MikeSmith>
he Lachlan is both lean and somewhat mean

[17:56:40.0000] <MikeSmith>
Robin in unfortunately neither mean nor super lean

[17:56:51.0000] <gsnedders>
I'm choosing Girls Just Want To Have Fun for the dance-off, yo. ;P

[17:56:57.0000] <MikeSmith>
heh

[17:58:12.0000] <MikeSmith>
either that or Super Freak

[17:58:44.0000] <Hixie>
man medium is annoying

[17:59:18.0000] <Hixie>
also how the hell do i have 1214 medium followers

[17:59:23.0000] <Hixie>
since i only created my account about 15ms ago

[18:00:07.0000] <Hixie>
wait this is dumb

[18:00:12.0000] <Hixie>
it's not showing my response on the page

[18:02:40.0000] <MikeSmith>
sgalineau_: please make some magic with https://medium.com/@dmitriid/w3c-and-whatwg-should-die-a-quick-and-horrible-death-a7cff5e1da8f

[18:03:40.0000] <Hixie>
my reply was https://medium.com/@Hixie/i-wish-things-were-that-simple-df0d2a786ecc fwiw

[18:03:44.0000] <caitp>
that guy seems a bit upset

[18:10:02.0000] <gsnedders>
wait you can post replies on medium?

[18:10:38.0000] <gsnedders>
weird

[18:39:46.0000] <MikeSmith>
sgalineau_: btw I don't know if Reginald was being facetious in https://twitter.com/raganwald/status/551808605763014656 but if not I hope he realizes how wrong he is

[18:42:54.0000] <caitp>
he's actually spot on there

[18:43:20.0000] <caitp>
except it doesn't work well on the web

[18:43:26.0000] <MikeSmith>
I guess I'll have to disagree with you about that today

[18:43:45.0000] <MikeSmith>
though I'd disagree pretty much any other day as well

[18:44:17.0000] <caitp>
think about it mike, you're a speaker, it's your job to analyze your audience

[18:44:30.0000] <MikeSmith>
heh

[18:44:31.0000] <caitp>
and speak within the constraints that they impose

[18:44:38.0000] <MikeSmith>
I hate public speaking

[18:44:48.0000] <MikeSmith>
public speaking is a con job

[18:44:55.0000] <MikeSmith>
it's an acit

[18:44:58.0000] <MikeSmith>
*act

[18:45:07.0000] <MikeSmith>
it's entertainment

[18:45:36.0000] <caitp>
you'd probably tell a different joke to your mom than you would to your best friend steve from middleschool

[18:45:37.0000] <tantek>
meh, it's your responsibility, but  "being offended" is in the mind of the offendee.

[18:45:47.0000] <caitp>
you tailor things you say for different people, it's just natural

[18:45:48.0000] <MikeSmith>
and anyway when I do go out a speak at events I say all kinds of offensive stuff. I make a point of it

[18:45:49.0000] <caitp>
people do it

[18:45:58.0000] <caitp>
sometimes we just do a bad job of it

[18:46:52.0000] <caitp>
people that run around saying "well if you get upset, its YOUR fault for being STUPID" are generally not very pleasant to be around :p

[18:47:08.0000] <MikeSmith>
yeah I try to not say Christ or fucking Christ or holy fucking Christ so much around my mom, given that she's pretty deeply religious

[18:47:28.0000] <MikeSmith>
right now I kind of feel like not going out of my way to do that so much

[18:47:40.0000] <MikeSmith>
but I guess I still will avoid it

[18:48:00.0000] <tantek>
caitp - sure, can't absolve responsbility for it, on either side.

[18:48:12.0000] <tantek>
it's a false dichotomy to try to frame as it one person's "fault" or the others

[18:48:15.0000] <tantek>
they're both at fault :P

[18:48:29.0000] <MikeSmith>
but I'll avoid saying it mostly just because there's no humor value in it, in that context

[18:49:17.0000] <MikeSmith>
nobody's ever at fault for taking an opportunity to say something that's genuinely funny and deeply irreverant at the same time

[18:49:34.0000] <MikeSmith>
you don't get opportunities like that very often

[18:49:43.0000] <MikeSmith>
so you take them when you get them

[18:49:51.0000] <MikeSmith>
like inspiration from God

[18:50:12.0000] <MikeSmith>
the only thing I fault people for is not being funny

[18:50:57.0000] <MikeSmith>
being offensive without being funny is .. unrefined

[18:51:18.0000] <caitp>
but that's the thing, funny is pretty subjective, and it depends on a lot of things

[18:51:24.0000] <MikeSmith>
people who make really good humor are to be treasured

[18:51:31.0000] <caitp>
peoples moods, the atmosphere of a place, how tipsy everyone is

[18:52:18.0000] <MikeSmith>
right

[18:52:26.0000] <caitp>
professional comedians figured out they can't do "objectively funny", so they do the next best thing

[18:52:36.0000] <MikeSmith>
some people suck at being funny, I'll concede

[18:52:47.0000] <MikeSmith>
sometimes we all suck at being funny

[18:52:56.0000] <MikeSmith>
but that means we just need to try harder

[18:53:09.0000] <MikeSmith>
geez

[18:53:23.0000] <MikeSmith>
"objectively funny" is complete nonsense

[18:54:21.0000] <MikeSmith>
if you say|draw|meme really funny, maybe 75% percent of the people who read it are going to be offended

[18:54:51.0000] <MikeSmith>
maybe 75% of them deserve to be offended

[18:54:58.0000] <MikeSmith>
they need to check their offense

[18:55:07.0000] <MikeSmith>
that's the point

[18:55:25.0000] <caitp>
well this is part of why I say it doesn't work very well on the web

[18:55:25.0000] <MikeSmith>
that's often the message: check your offense

[18:55:33.0000] <caitp>
nobody really gives a shit about being an effective communicator on the web

[18:55:59.0000] <MikeSmith>
I think it does work pretty well, if it makes me laugh and it makes other people laugh, then it's worked

[18:57:05.0000] <MikeSmith>
of course qualified by, if it's not hateful or trying to cause real harm or pain to somebody

[18:58:12.0000] <MikeSmith>
people aren't caused real pain by, e.g., seeing rude depictions of their holy figures, or hearing crude jokes about them

[18:58:27.0000] <MikeSmith>
or by hearing me say "fucking christ" or whatever

[22:49:49.0000] <MikeSmith>
hsivonen: https://github.com/validator/validator/issues/22#issuecomment-69128876

[22:51:17.0000] <MikeSmith>
seems the TLS handshake with the vnu backend fails if site has TLS 1.0 disabled (that is only TLS 1.1+ enabled)

[22:55:47.0000] <MikeSmith>
hsivonen: I wonder if upgrading the jetty version might fix it

[22:55:56.0000] <MikeSmith>
/me will try that locally

[23:05:42.0000] <MikeSmith>
hsivonen: stack traces https://gist.github.com/sideshowbarker/21fc8a22ad3cad41eb74 https://gist.github.com/sideshowbarker/7fd83a3791f4702c2402

[00:16:11.0000] <annevk>
Is @dimitriid asking for HTML5 Super Friends to come save the day?

[00:48:02.0000] <Ms2ger>
gsnedders, verboten? (re twitter)

[01:03:05.0000] <MikeSmith>
annevk: only after the first phase of his plan, which is to put Apple and "guys who created SASS" in charge of enforcing new standards and implementing everything and to "work on specs for a year"

[01:03:38.0000] <MikeSmith>
then webdevs just step in reap all the obvious benefits from the outcome of that

[02:17:05.0000] <hsivonen>
MikeSmith: commented on github

[02:19:14.0000] <MikeSmith>
hsivonen: thanks

[02:20:46.0000] <hsivonen>
It's kinda amazing that the Apache HttpClient developers have enough time and enthusiasm to keep redesigning and rewriting their project as much as they do

[02:21:15.0000] <hsivonen>
and then they resisted fixing the important stuff like SNI

[02:21:31.0000] <hsivonen>
(now fixed, but the resistance to fixing it was sad)

[02:28:31.0000] <annevk>
hsivonen: resistance?

[02:33:12.0000] <hsivonen>
annevk: https://issues.apache.org/jira/browse/HTTPCLIENT-1119

[02:35:50.0000] <MikeSmith>
hope it's not a pattern across Apache projects. Reminiscent of the years-long Apache web server project resistance to fixing the default content-type brokenness

[04:02:06.0000] <hemanth>
meow

[04:48:09.0000] <MikeSmith>
annevk: a webdev friend asks, "why has the w3c to reinvent js APIs that already exist in Node, only to make them worse (eg Text{En,De}coder vs Buffer) ?"

[04:48:43.0000] <annevk>
MikeSmith: don't think W3C had much to do with it

[04:48:45.0000] <MikeSmith>
where by "w3c" I think he actually means the Encoding spec

[04:48:47.0000] <MikeSmith>
yeah

[04:49:22.0000] <MikeSmith>
what can I say to help enlighten him?

[04:51:26.0000] <annevk>
MikeSmith: looks like Buffer is some kind of byte structure, I guess you could ask him why Node reinvented ArrayBuffer...

[04:51:42.0000] <annevk>
MikeSmith: not really clear to me what to say here

[04:52:16.0000] <MikeSmith>
yeah I don't really know what Buffer is in node

[04:52:27.0000] <MikeSmith>
annevk: ok

[04:52:33.0000] <annevk>
I'm guessing it's http://nodejs.org/api/buffer.html

[04:53:06.0000] <jgraham>
Often when people say "reinvented X but worse", they mean "did X but different"

[04:53:32.0000] <annevk>
TextEncoder/TextDecoder originates from jsbell and some WHATWG discussion. I don't know if Buffer was around back then or why people didn't look at it...

[04:55:06.0000] <annevk>
I believe some Node.js people have aversion to participating in standards so that might explain why it's not always used as a source of inspiration

[04:57:41.0000] <Domenic>
Node's Buffer was created around the same time or a little before ArrayBuffer started shipping

[05:01:39.0000] <ondras>
I would say node's Buffer is similar to CommonJS's Binary/F: wiki.commonjs.org/wiki/Binary/F ?

[05:02:25.0000] <annevk>
ArrayBuffer goes back to at least Feb 2011

[05:02:37.0000] <Ms2ger>
MikeSmith, ask the webdev friend to make his suggestion before we ship?

[05:03:58.0000] <ondras>
ArrayBuffer is commonjs's Binary/B, right?

[05:05:30.0000] <annevk>
Domenic: lifecycle callbacks, do you know why they are transfered?

[05:05:52.0000] <annevk>
Domenic: and they are essentially statics on the class, correct?

[05:06:24.0000] <ondras>
http://wiki.commonjs.org/wiki/Binary

[05:06:24.0000] <ondras>
ah

[05:06:27.0000] <ondras>
loaded, finally

[05:07:02.0000] <annevk>
Domenic: also, can you reply to that thread with bz about Element's constructor, seems kind of relevant to figure out how we want to design that

[05:07:22.0000] <Domenic>
annevk: I am putting off all of this stuff until TAG F2F winds down and I can write reasoned responses

[05:07:35.0000] <annevk>
Domenic: when is that?

[05:07:49.0000] <Domenic>
tonight, plus maybe some recovery sleep pushing us in to tomorrow

[05:08:31.0000] <Domenic>
as for lifecycle callbacks, I don't remember (haven't had time to reboot all of this in to my mind) but one thing I remember is that it avoids calling into potentially-different user code every time.

[05:08:39.0000] <Domenic>
also it allows you to delete the lifecycle callbacks after they're transferred:

[05:08:58.0000] <Domenic>
https://github.com/domenic/html-as-custom-elements/blob/master/src/register-element.js#L23-L27

[05:09:53.0000] <Domenic>
I am excited to get in to designing Element constructor though

[05:10:49.0000] <Domenic>
bz and I have quite different assumptions/priorities in our respective strawmen and I want to sit down and think hard about which ones are valuable to keep, which ones are in conflict, etc.

[05:11:37.0000] <annevk>
Domenic: it seems weird to delete them like that, can't we pass them in as arguments then?

[05:11:40.0000] <Domenic>
also want to see if there's any solution for the upgrading thing... that's an annoying problem

[05:12:07.0000] <annevk>
Domenic: and at the very least they should be symbols if we keep them on the classes...

[05:12:09.0000] <Domenic>
annevk: yeah I would like that. But the argument is that they're good, especially for user classes, so you can do e.g. `super.createdCallback()` in a custom element deriving from a custom element.

[05:13:01.0000] <annevk>
super doesn't refer to an instance?

[05:13:04.0000] <annevk>
I guess that makes sense

[05:13:26.0000] <Domenic>
not sure what refer to an instance means

[05:14:05.0000] <Domenic>
but you can imagine e.g. even if you do `class X extends HTMLInputElement {}` (or something less complicated) being able to call `super.attributeChangedCallback()` would be nice. If we specified HTMLInputElement.prototype.attributeChangedCallback.

[05:14:14.0000] <annevk>
Domenic: so you're destroying that benefit by deleting them, no?

[05:14:30.0000] <Domenic>
yep, in favor of spec-compliance at the moment. But easy to restore.

[05:15:13.0000] <annevk>
Yeah I thought we should have something like Node.clonedSymbol etc.

[05:15:17.0000] <hemanth>
Domenic, I'm interested in contributing to CustomHTMLMediaElementImpl of html-as-custom-element, is there any TODO list for the same :) ?

[05:15:20.0000] <annevk>
to allow for such a future

[05:15:57.0000] <annevk>
hemanth: PR https://github.com/domenic/html-as-custom-elements/ I guess

[05:15:58.0000] <Domenic>
hemanth: heh, it's such a huge project, I got scared off. I can try to write up the missing pieces, but even just getting CustomHTMLMediaElementImpl working is huge, before even starting on CustomHTMLVideoElement

[05:16:33.0000] <hemanth>
annevk, thanks to was very helpful ;)

[05:17:22.0000] <Domenic>
https://github.com/domenic/html-as-custom-elements/blob/master/src/elements/CustomHTMLMediaElement-impl.js is all just stubs. Maybe there are tests we could find and start passing easy ones like playbackRate or something.

[05:17:41.0000] <hemanth>
Domenic, agree, but there must be some strategy to bring down this beast...

[05:17:53.0000] <hemanth>
+1

[05:18:18.0000] <Ms2ger>
Domenic, guess what, there's a repository full of tests for the web platform

[05:18:22.0000] <zcorpan>
just change the spec to HTMLMediaElement : HTMLElement {};

[05:18:29.0000] <annevk>
hemanth: could start with determining all the internal state

[05:18:57.0000] <hemanth>
annevk, sure, starting with?

[05:19:52.0000] <annevk>
hemanth: for HTMLMediaElement, then fill in the various algorithms to manipulate said state, etc.

[05:20:43.0000] <Domenic>
Ms2ger: yeah, with a whole 2 tests for HTMLSelectElement/HTMLOptionElement; I have lost faith since finding that. Perhaps unfairly.

[05:21:53.0000] <Domenic>
annevk: one thing that would be nice is separate classes for every tag name, as you alluded to. If we can pull that off a lot of things get easier I think.

[05:22:01.0000] <Ms2ger>
Domenic, I think I wrote them all :)

[05:22:10.0000] <Ms2ger>
Domenic, but video/audio is much better

[05:22:21.0000] <Domenic>
that is good news :)

[05:22:48.0000] <annevk>
Domenic: either way things would work

[05:23:32.0000] <annevk>
Domenic: but first I need to know about your plan vs bz' plan, then we can figure out how things trickle down

[05:23:42.0000] <hemanth>
annevk, idl will have the clue right?

[05:23:54.0000] <Ms2ger>
Domenic, and there's 8 for select+option now ;)

[05:24:03.0000] <hemanth>
Domenic, I really liked that tool that converts idls to js classes <3 :)

[05:24:40.0000] <annevk>
hemanth: IDL does a lot, but not that much

[05:25:23.0000] <hemanth>
annevk, need to dig the spec then...

[05:26:50.0000] <hemanth>
/me rubs his eyes reading https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/HTMLMediaElement.cpp ^_^

[05:30:46.0000] <hemanth>
annevk, what method would you suggest to determine the internal states?

[05:32:12.0000] <annevk>
hemanth: I'd read the spec

[05:32:37.0000] <Domenic>
they usually say things like "has an associated foo"

[05:33:11.0000] <Domenic>
https://html.spec.whatwg.org/multipage/embedded-content.html#media-element

[05:33:33.0000] <Domenic>
E.g. "All media elements have an associated error status" is saying that there is an internal slot [[AssociatedError]] on all HTMLMediaElement instances

[05:34:18.0000] <Domenic>
"The error attribute, on getting, must return the MediaError object created for this last error, or null if there has not been an error." is saying that you define `get error() { this@[[AssociatedError]] === undefined ? null : this@[[AssociatedError]]; }`

[05:34:39.0000] <Domenic>
where this@[[AssociatedError]] in my ES code ends up being something more like p(this).AssociatedError, if I recall

[05:34:58.0000] <Ms2ger>
What's the obsession with [[]] anyway

[05:35:07.0000] <Ms2ger>
Is that because Word can't do links?

[05:35:21.0000] <Domenic>
O_O it has nothing to do with links

[05:36:06.0000] <Ms2ger>
Then why?

[05:36:31.0000] <Domenic>
It is a notation for denoting internal slots as opposed to regular properties

[05:36:58.0000] <Ms2ger>
Regular props are already in quotes

[05:37:03.0000] <Domenic>
Not in ES they aren't

[05:37:09.0000] <Domenic>
Nor in most specs it seems...

[05:37:11.0000] <Ms2ger>
Really

[05:37:21.0000] <Domenic>
"The error attribute, on getting" no quotes

[05:37:23.0000] <Ms2ger>
Most specs don't access "regular props"

[05:37:29.0000] <Domenic>
they talk about them though

[05:37:39.0000] <hemanth>
Cool, thanks for the heads up Domenic, will paw more at it...

[05:38:30.0000] <annevk>
In a world of markup I don't think we need to use [[ and ]] (could be stylesheet that adds them if you really insist) but having something is useful

[05:39:00.0000] <Domenic>
Yeah I mean it's shorter to type than <span class="internal-slot">AssociatedError</span>, certainly.

[05:39:11.0000] <Domenic>
annevk: btw you may find https://github.com/domenic/html-as-custom-elements/blob/master/src/elements/URLUtils-impl.js interesting

[05:39:30.0000] <Ms2ger>
Maybe use [[Foo]] in the bikeshed source

[06:35:21.0000] <Ms2ger>
MikeSmith, what's "physical web" supposed to mean? Like a spider web?

[06:36:11.0000] <MikeSmith>
buff

[06:38:17.0000] <MikeSmith>
it's about taking the Web outside to play sports, or at least get some direct sunshine once in a while

[06:38:30.0000] <MikeSmith>
or climbing a mountain with annevk

[06:39:07.0000] <Domenic>
NO DAD I WANT TO STAY INSIDE AND PROGRAM MY COMPUTERS OK!?

[06:40:00.0000] <MikeSmith>
no son today we go out and chop some wood

[06:41:02.0000] <MikeSmith>
I thought the page at https://google.github.io/physical-web/ used to say a lot more than it does now

[06:44:24.0000] <MikeSmith>
"the Physical Web is a discovery service: a smart object broadcasts relevant URLs that any nearby device can receive" https://github.com/google/physical-web#the-physical-web

[06:44:31.0000] <MikeSmith>
Ms2ger: 👆

[06:45:08.0000] <caitp>
what could possibly go wrong

[06:46:46.0000] <MikeSmith>
heh

[06:47:06.0000] <MikeSmith>
good times await

[06:47:22.0000] <MikeSmith>
caitp: sorry for ranting yesterday

[06:47:29.0000] <MikeSmith>
I was a little wound up

[06:47:41.0000] <caitp>
it's all good

[07:17:33.0000] <annevk>
"An Update on ES6 classes in V8" it's interesting that what I was afraid of happened, except it happened so fast that nobody got hurt

[07:18:52.0000] <Ms2ger>
annevk, ?

[07:19:52.0000] <annevk>
Ms2ger: Chrome was planning on shipping a conservative subset of ES6 classes; I was afraid that once we got to subclassing builtins and DOM that subset might have to change; people got together and changed the subset

[07:22:02.0000] <caitp>
it was a christmas miracle

[10:33:53.0000] <jamesr__>
wow https support in python is worse than i thought

[10:34:09.0000] <jamesr__>
at least if you actually care about making sure the connection is to what you expect

[11:16:29.0000] <jgraham>
jamesr__: Yes, I have heard that. Is requests any better?

[11:28:12.0000] <jamesr__>
it's supposed to be, but deploying it to everyone who wants to run the script i have to worry about is tricky

[13:01:10.0000] <jamesr__>
oh hey, IDB is a W3C rec

[13:39:01.0000] <Hixie>
https://medium.com/@dmitriid/ok-w3c-and-whatwg-dont-die-but-7952221fcbe4

[13:39:21.0000] <Hixie>
(in particular, note "I also have much less gripe with WHATWG, than with W3C")

[13:44:04.0000] <Domenic>
Wow how did the same person suddenly become much more reasonable.

[13:45:10.0000] <Domenic>
Haha annevk "And what a surprise, there’s actual evidence that the author of the spec actually was<https://annevankesteren.nl/about> a web-developer (hence the useful spec, I presume)."


2015-01-09
[22:16:02.0000] <annevk>
Domenic: heh

[22:16:28.0000] <annevk>
GPH-Hickory: did you review the CSS @charset tests? I recall some of them were bogus, not sure if those got fixed

[22:17:35.0000] <GPHemsley>
annevk: They seemed like they may be from what I recall about encodings, but I didn't check against the Encoding spec.

[22:17:50.0000] <GPHemsley>
Especially the Shift_JIS one

[01:07:36.0000] <hemanth>
MeOw

[02:07:00.0000] <hsivonen>
Oh great. Eric J. Bowman asked an attorney who "doesn't grok" the subject matter of the question

[02:10:24.0000] <SteveF_>
FYI new HTML data set on http://webdevdata.org/

[02:32:50.0000] <annevk>
hsivonen: that guy

[02:35:29.0000] <hemanth>
annevk: meow

[02:40:13.0000] <annevk>
hemanth: ?

[02:41:00.0000] <hemanth>
annevk: that's a way to greeting :)

[02:41:05.0000] <hemanth>
*of

[02:41:13.0000] <annevk>
I see, well good morning to you then :-)

[02:41:40.0000] <hemanth>
annevk: ^_^ I'm still digging for internal states :/

[02:51:19.0000] <JakeA>
Gutted I missed the conversion about offence a couple of days back. Can we have it again so I can take part?

[02:52:05.0000] <jgraham>
JakeA: That depends. Were you offended that you missed out?

[02:57:46.0000] <JakeA>
jgraham: I have a moderate discomfort about it that I believe others should cater for

[03:06:15.0000] <jgraham>
Ah, what is civilisation if not the avoidance of moderate discomfort in others. We must reopen the debate post-haste.

[03:06:48.0000] <JakeA>
:D

[03:53:34.0000] <JakeA>
annevk: I'm struggling with https://github.com/slightlyoff/ServiceWorker/issues/588#issuecomment-67662246 - do we have other APIs that are 'snapshots' but also have methods to change state?

[03:54:24.0000] <annevk>
JakeA: it seems fine to have a method on a snapshot, but it shouldn't affect the snapshot itself

[03:54:34.0000] <annevk>
JakeA: so returning a new client as mounir suggested makes sense

[03:55:05.0000] <JakeA>
annevk: from a usability point of view, I do think people will look for methods on the snapshot

[03:55:40.0000] <annevk>
JakeA: yeah I don't see why we wouldn't have methods that essentially forward

[03:57:59.0000] <JakeA>
Thanks!

[04:58:38.0000] <GPHemsley>
hsivonen: It doesn't appear that any action was ever taken on this: http://lists.w3.org/Archives/Public/public-css-testsuite/2012Dec/0000.html

[04:58:42.0000] <GPHemsley>
Might want to follow up

[05:03:52.0000] <Ms2ger>
GPHemsley, you almost sound surprised

[07:44:22.0000] <Domenic>
hsivonen: I was really tempted to write a reply whose only content was: "> To elaborate, my attorney doesn't grok this stuff \n\n I thought that was the case."

[08:24:30.0000] <MikeSmith>
Domenic: heh

[08:25:47.0000] <MikeSmith>
that guy keeps outdoing himself

[08:26:36.0000] <MikeSmith>
Taking the absurdity to its full potential

[08:27:04.0000] <rubys>
Dominic: I did manage to get IE11 preview installed; saw no change to how it handles URLs.  See http://intertwingly.net/blog/2015/01/08/Ununzippable-Modern-IE#c1420802707 for the gory details

[08:27:09.0000] <jgraham>
Isn't that the W3C motto?

[08:27:50.0000] <rubys>
/me notes that jgraham equates web with absurity

[08:27:57.0000] <rubys>
absurdity*

[08:28:53.0000] <MikeSmith>
I think Jeff confused that with the W3C motto about backasswardsness

[08:29:29.0000] <MikeSmith>
s/Jeff/jgraham

[08:30:05.0000] <MikeSmith>
/me tries to come up with some other typos to dig his hole further

[08:30:08.0000] <rubys>
/me notes that MikeSmith confused jgraham with jeff jaffe

[08:30:36.0000] <MikeSmith>
nope

[08:30:41.0000] <rubys>
:-P

[08:30:42.0000] <MikeSmith>
Jeff Bridges

[08:31:20.0000] <MikeSmith>
either the Dude or as in True Grit

[08:38:26.0000] <hemanth>
/me says hello to jspm by fetching random XKCD comics https://github.com/hemanth/hello-jspm Influenced by @glenmaddern

[08:39:21.0000] <hemanth>
Domenic, meow, I'm still digging those internal states...:|

[08:43:54.0000] <caitp>
you're like the WHATWG's pet cat it's awesome

[08:45:52.0000] <jgraham>
It's pretty weird. "meow" is used to accuse people of being nasty ("catty") so it doesn't sit well as a greeting

[08:46:09.0000] <Ms2ger>
Is it?

[08:46:12.0000] <Ms2ger>
TIM

[08:46:21.0000] <Ms2ger>
Today I Meowed?

[08:46:22.0000] <Ms2ger>
TIL*

[08:46:46.0000] <jgraham>
Usually in speech rather than print I guess, but yes

[08:49:37.0000] <Domenic>
rubys: hmm, what's your IE version? I could swear I got different results, on the page that displayed the components

[08:50:38.0000] <rubys>
Dominic: look at the top of https://github.com/webspecs/url/commit/68210260199db858c9eb349d643916b0d5d564f9

[08:53:00.0000] <rubys>
Dominic: if you want to see what your version produces for all of the tests, go to http://intertwingly.net/projects/pegurl/urltest

[08:53:28.0000] <rubys>
if you want me to update my results based on a different version, simply provide me with the hex ticket number that page produces

[08:57:24.0000] <Domenic>
rubys: what is the version shown in "About Internet Explorer" though; it's not part of the UA string. Mine is 11.0.9879.0

[08:57:54.0000] <Domenic>
rubys: ticket http://intertwingly.net/projects/pegurl/urltest

[08:57:55.0000] <Domenic>
er

[08:58:19.0000] <Domenic>
wow, copying and pasting out of this vm is not working

[08:58:44.0000] <rubys>
b795e48410c0d1ba0c4764e9c30f4e1e

[08:58:51.0000] <Domenic>
yes, that one :P

[08:59:02.0000] <rubys>
just a sec, I'll give you my ie version

[08:59:19.0000] <rubys>
11.0.9841.0

[08:59:45.0000] <rubys>
I'm downloading a new VM.  They claim to have fixed the unzip problem.

[09:05:21.0000] <hemanth>
^_^

[09:08:45.0000] <hemanth>
is there a way to intervene promise, say we have fetch(url).then(); I need to show a spinner till the promise resolves...fetch(url).tillThen().then().catch()...so on...

[09:09:28.0000] <Ms2ger>
showSpinner(); fetch(url).then(hideSpinner)

[09:11:12.0000] <hemanth>
Ms2ger, yeah, currently doing a similar thinge, tillThen() sound dumb ?

[09:11:46.0000] <Ms2ger>
I don't see the point

[09:11:55.0000] <hemanth>
I really liked the way protractor's expect is modified to expect a promise, but still the user need not really resolve it with then...

[09:14:22.0000] <rubys>
Dominic: are you *SURE* that was with IE?  The User agent looks awfully suspicious.

[09:14:25.0000] <rubys>
See: https://github.com/webspecs/url/commit/ed1a053212aae906a4edcce94d7c1681b9b001bd

[09:25:40.0000] <hemanth>
/me paws at caitp 

[09:32:21.0000] <hemanth>
pawing is saying hey, in cat; meow is saying that i'm here, clawing is when you are angry...( gosh...why i'm talking/typing so much... alias hemanth='hemanth -s')

[09:37:18.0000] <caitp>
it's all good man

[09:38:10.0000] <astearns>
/me on the internet, no one knows you're a dog who identifies as a cat

[09:40:40.0000] <hemanth>
astearns, I'm hemanth's dog, I have drunk the magic portion and turned into a cat, will be a dog soon, by the time the cat would be back from it's walk

[09:42:55.0000] <Domenic>
rubys: yes, they have purposefully obfuscated their user agent to avoid detection.

[09:43:15.0000] <annevk>
www-tag continues to amaze in uniting all the trolls

[09:43:17.0000] <Domenic>
rubys: "Edge/12.0" is the only remaining IE detection

[09:44:49.0000] <rubys>
Dominic: cool.  OK, I've updated https://url.spec.whatwg.org/interop/test-results/

[09:44:59.0000] <rubys>
there is a *lot* less "ie" on that page

[09:45:32.0000] <Domenic>
:D

[09:46:10.0000] <Domenic>
I am curious about the rows that have no entries, e.g. (when I select "all current user agents") "http://f:0/c"

[09:46:16.0000] <Domenic>
all current browsers, rather

[09:47:24.0000] <rubys>
I'm confused.  You are curious about results for which there are no current browsers that disagree?

[09:48:49.0000] <Domenic>
i thought those were filtered out of the table, I guess, but now that I think about it I don't know where I got that impression.

[09:49:23.0000] <Domenic>
cool, all is well

[09:49:56.0000] <rubys>
adding more filters is only a matter of code. :-)

[09:50:07.0000] <Domenic>
i also love the infrastructure you've set up where i can provide results by navigating to a page; it worked really nicely here

[09:51:57.0000] <Domenic>
https://url.spec.whatwg.org/interop/test-results/c6c0953a53?select=current is a fun one. you can just see all four engineers making different decisions.

[09:53:28.0000] <rubys>
dominic: a related bug on that one: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26446

[09:54:55.0000] <Domenic>
wow, the fact that Firefox fails above 2^31 makes things even more fun.

[09:55:43.0000] <rubys>
now if only we could get the four engineers to participate in a discussion as to what the correct results should be

[09:56:21.0000] <caitp>
in TCP, the port field is a 16 bit value, so there isn't much reason to support infinitely high ones is there?

[09:57:00.0000] <rubys>
caitp: another way to phrase the question: "what should impls do for unsupported values"?

[10:00:04.0000] <caitp>
port = port >= 0x10000 ? 80 : port

[10:00:17.0000] <caitp>
idk

[10:01:45.0000] <rubys>
that would indeed be a fifth option.  Here's four others: https://url.spec.whatwg.org/interop/test-results/c6c0953a53?select=current

[10:02:33.0000] <rubys>
At the moment, the spec agrees with Firefox.  I personally like Chrome's choice here better.

[10:04:16.0000] <caitp>
i wasn't really being serious about falling back on 80, 0 seems pretty reasonable

[10:06:20.0000] <rubys>
I care that we get people to converge on a single answer, I don't particularly care what that answer is.

[10:08:26.0000] <Domenic>
rubys: I think the spec doesn't agree with Firefox for values > 2^31, according to bug 26446 -_-

[10:09:24.0000] <Domenic>
I like the uniformity of having everything be strings, but it'd probably be easier to get agreement on some restriction to <= 0x10000. Still need to figure out what the behavior is outside that range though.

[10:09:44.0000] <rubys>
The bug indeed does suggest that the spec shouldn't disadvantage implementations that store port numbers as integers

[10:13:37.0000] <caitp>
< 0x10000, not <= :p

[14:12:22.0000] <Domenic>
Is it possible when parsing a HTML page in browsers to get instances of Element that are not instances of HTMLElement?

[14:14:05.0000] <jgraham>
Yes: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3360

[14:14:12.0000] <jgraham>
(svg, mathml)

[14:14:45.0000] <Domenic>
I meant, own-instances. Just Element, not any subclass.

[14:15:58.0000] <Domenic>
Looks like createElementNS can do it

[14:16:02.0000] <Domenic>
document.createElementNS("http://example.com", "baz:foo").constructor === Element

[14:16:33.0000] <jgraham>
Right, but that's not "when parsing a HTML page"

[14:16:47.0000] <Domenic>
ah yeah I guess I forgot the second part of my question

[14:17:01.0000] <jgraham>
I don't think the parser can create things that are bare Elements

[14:18:58.0000] <jgraham>
Oooh, maybe <math> doesn't have a special subclass

[14:23:00.0000] <Hixie>
you can trick the parser into inserting elements in neither svg, mathml, or html namespaces

[14:23:05.0000] <Hixie>
in which case it'll be from Element

[14:23:28.0000] <Hixie>
also, i don't think any of hte browsers implement MathML's DOM, so they're all just Element too

[14:26:40.0000] <jgraham>
with <svg><foo> or something more subtle?

[14:27:09.0000] <jgraham>
Not that at least

[14:27:13.0000] <Hixie>
maybe innerHTML on a non-HTML non-SVG non-MathML element?

[14:27:17.0000] <Hixie>
i forget teh details

[14:27:47.0000] <jgraham>
Oh innerHTML, I hadn't thought of that

[14:27:58.0000] <jgraham>
I guess that still counts as the parser

[14:35:30.0000] <gsnedders>
jgraham: that just creates an svg:foo element


2015-01-10
[16:06:20.0000] <jgraham>
gsnedders: So I realised

[19:23:37.0000] <MikeSmith>
it seems important to pay attention to what the commentor at https://www.w3.org/Bugs/Public/show_bug.cgi?id=27786#c4 and https://www.w3.org/Bugs/Public/show_bug.cgi?id=27786#c8 is saying

[19:25:07.0000] <MikeSmith>
I'm not claiming he's right but he seems reasonably clueful and focused on solving real problems and I would guess his comments are representative of a good number of other also-clueful webdevs

[19:36:10.0000] <MikeSmith>
cool to see that gsnedders has joined the Servo team https://twitter.com/gsnedders/status/553738615151280128

[19:36:16.0000] <MikeSmith>
congrats gsnedders!

[19:36:18.0000] <MikeSmith>
smart move

[19:39:01.0000] <gsnedders>
More like joined the accidental Servo team :P

[19:47:18.0000] <MikeSmith>
isn't the whole thing a troll?

[19:47:27.0000] <MikeSmith>
so you got roped the doped

[19:47:49.0000] <MikeSmith>
trolled in

[19:47:58.0000] <MikeSmith>
trolls all the way down

[19:49:12.0000] <MikeSmith>
since (I heard) it was started as a bar bet to see how many people would be silly enough to take it seriously

[19:49:46.0000] <MikeSmith>
/me looks around for Ms2ger

[19:51:32.0000] <gsnedders>
yeah, writing a whole new web browser from scratch is just stupid

[19:51:46.0000] <MikeSmith>
/me finds it no fun to be a troll falling in the woods if there's nobody around to be outraged by the sound of one troll falling

[19:52:36.0000] <MikeSmith>
gsnedders: バカまじめ

[19:53:26.0000] <gsnedders>
That's Japanese to me.

[19:57:19.0000] <MikeSmith>
holy god speaking of バカまじめ I just got a TV and I'm sitting here watching the public TV channel that has captions and I noticed some use of ruby in the the captions just now

[19:58:03.0000] <MikeSmith>
gsnedders: http://cdn2.natalie.mu/media/owarai/2014-08/extra/news_header_youpackCM_01.jpg

[19:58:27.0000] <MikeSmith>
バカまじめ literally means "stupidly serious"

[19:58:29.0000] <MikeSmith>
in a good way

[19:59:24.0000] <MikeSmith>
the joke of the add in that image is that he's Japan's most famous comedian, really funny guy

[19:59:42.0000] <MikeSmith>
but in these CMs and ads he plays it deadpan

[20:00:38.0000] <MikeSmith>
anyway for the record the Servo project is one thing I finding seriously inspirational right now

[22:53:30.0000] <MikeSmith>
"if you're having trouble with current versions of browser engines, what we most want you to do is raise the issues that you're having so that we can fix them."

[22:53:33.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27786#c10

[22:53:39.0000] <MikeSmith>
bravo dbaron

[02:16:58.0000] <GPHemsley>
"I'm sorry, Hixie, but you have no idea about browser interoperability."

[02:31:59.0000] <Ms2ger>
Troll or idiot?

[02:34:01.0000] <jgraham>
Why not both?

[02:39:08.0000] <matijs>
just rude.

[02:42:33.0000] <jgraham>
Alo, where is this? I need a laugh

[02:43:42.0000] <jgraham>
*Also

[03:16:37.0000] <MikeSmith>
the sentiment in that quote from GPHemsley sounds like something the OP of https://www.w3.org/Bugs/Public/show_bug.cgi?id=27786 might have said somewhere, but at least he didn't say those words in any of his comments in that bug

[03:16:52.0000] <MikeSmith>
maybe GPHemsley is paraphrasing hime

[03:18:08.0000] <MikeSmith>
he did say「@hixie Believes in unicorns. "If I could, I would remove navigator.* entirely. Pages shouldn't be able to distinguish different browsers".」https://twitter.com/hexalys/status/553702038110892032

[03:18:31.0000] <MikeSmith>
where the part he quotes there is something Hixie said in that bug

[03:19:17.0000] <MikeSmith>
anyway, does anybody happen to know if WebVTT supports use of <ruby> markup in text tracks?

[03:20:56.0000] <MikeSmith>
I ask because I just got a TV literally yesterday, and watching programs with the closed-captioning turned on, I notice fairly frequent use of ruby annotations in the captions

[03:28:34.0000] <MikeSmith>
I also notice that while the captions use full-width katakana for cases where the katakana is for Japanese words (like animal names or the word メス, which means "female" (animal)) -- which is normal and is the case for katakana used in books, etc. -- but for some reason the captions consistently use half-width katakana for cases where the katakana represents non-Japanese words

[04:49:54.0000] <annevk>
So I'm trying to recount the problems with mutation events, but I'm having a hard time coming up with examples of the harder problems

[04:50:34.0000] <annevk>
There's a couple around performance and such and how easy it is to create loops, but I want to study the cases that caused browsers to crash and hang

[04:52:22.0000] <annevk>
/me stumbles upon https://annevankesteren.nl/2011/06/mutation


2015-01-11
[23:51:38.0000] <annevk>
Every other week there is this tweet: https://twitter.com/sergiolujanmora/status/554072564989837313 I wonder where they originate...

[03:05:55.0000] <gsnedders>
jgraham: do you have any opinions on py.test v. nose? would like to move to py.test for html5lib, it's compat is such that we don't have to change anything except for requirements-test.txt and tox.ini/.travis.yaml

[05:53:27.0000] <hemanth>
meow!

[06:55:17.0000] <gsnedders>
jgraham: argh why did you let #177 go through? it should update the readme and requirements*.txt files too!

[08:02:40.0000] <jgraham>
gsnedders: Presumably because you didn't review it :p

[08:03:51.0000] <jgraham>
That said

[08:04:09.0000] <jgraham>
I think the idea of a changelog is largely dumb. If you care look at the commit history

[08:05:22.0000] <gsnedders>
I think changelogs are worthwhile for significant changes, or changes that affect a lot of users

[08:05:34.0000] <gsnedders>
I certainly think they're pointless if you include everything in them

[08:05:49.0000] <gsnedders>
And commit history is messy when you start having merge commits (bah, GitHub)

[08:06:08.0000] <gsnedders>
jgraham: can we go back to trying to have a linear history for html5lib? :P

[08:06:12.0000] <jgraham>
I also note that ordereddict is already in the requirements file for 2.6, so I'm not sure what change you wanted

[08:06:27.0000] <gsnedders>
it's in requirements-optional-2.6.txt which makes it sound very optional?

[08:06:40.0000] <gsnedders>
whereas the intention of #177 is that it is now required

[08:07:01.0000] <jgraham>
I claim it's optional in the sense that if you opt to use 2.6 it's required

[08:07:19.0000] <gsnedders>
Though I'm now sure we want that. The argument seems to be "this API is broken without this installed". That equally applies html5lib.parse("a", tree="lxml").

[08:07:49.0000] <gsnedders>
Should we then say we require lxml, etc.?

[08:07:59.0000] <gsnedders>
I think the whole argument that it's required on 2.6 is bogus, tbh

[08:11:43.0000] <jgraham>
Well python's optional dependency handling is pretty terrible. Not that I can think of a system where it's better

[08:12:42.0000] <gsnedders>
tl;dr: we should either document it as being required or we should not list it as required in setup.py

[08:13:19.0000] <gsnedders>
jgraham: fyi I'm moving us over to py.test, because I think it makes all our stuff with loading tests from external files way saner

[08:13:42.0000] <gsnedders>
and makes writing a script to update expected failures sane :P


2015-01-12
[00:02:03.0000] <hsivonen>
GPHemsley: thanks. I posted http://lists.w3.org/Archives/Public/public-css-testsuite/2015Jan/0016.html

[01:58:30.0000] <annevk>
http://intertwingly.net/blog/2015/01/11/URL-Work-Status is somewhat hard to grok. The barrier to entry at the WHATWG is too high, yet everywhere else he hits a door.

[02:13:42.0000] <hemanth>
'http://f: 21 / b ? d # e' interesting

[02:16:58.0000] <hemanth>
/me tried to reflect on ES6 Reflect API http://h3manth.com/new/blog/2015/es6-reflect-api/

[02:58:06.0000] <MikeSmith>
annevk: https://twitter.com/ttepasse/status/554341595185946625

[02:58:27.0000] <annevk>
"fora⊙an" that's a long time ago

[02:59:48.0000] <MikeSmith>
2005 it seems

[03:01:14.0000] <annevk>
That was at Opera, around the time of Opera's 10 year anniversary and around the time of me getting hired for a longer period

[03:04:30.0000] <MikeSmith>
then before I started at Opera

[03:05:16.0000] <annevk>
I guess I switched to using @opera.com a little later, when everything was more permanent

[05:34:56.0000] <MikeSmith>
https://community.rapid7.com/community/metasploit/blog/2015/01/11/google-no-longer-provides-patches-for-webview-jelly-bean-and-prior

[05:35:06.0000] <MikeSmith>
seems pretty surprising if true

[05:38:11.0000] <caitp>
it's pretty sad for people who are contract-tied to their old phones and can't upgrade yet, or who are financially unable to upgrade

[05:38:16.0000] <caitp>
but surprising?

[05:50:56.0000] <annevk>
Hmm, I wanted to write about custom elements, but I think I should first explain web platform objects... Turtles, meh

[09:17:43.0000] <wanderview>
JakeA: annevk: if content runs window.caches.addAll(requests)... should those be intercepted by ServiceWorker?  Does Cache add()/addAll() implicitly get the skip service worker flag?

[09:18:05.0000] <annevk>
wanderview: I feel like they should go through the worker

[09:18:23.0000] <wanderview>
annevk: unless initiated by the ServiceWorker?

[09:18:49.0000] <annevk>
wanderview: fetches from a service worker can never go through that service worker

[09:19:19.0000] <annevk>
(nor any other one at the moment, but it seems like that might change going forward)

[09:20:24.0000] <annevk>
wanderview: that should happen automatically in Fetch due to the associated client of the request

[09:21:04.0000] <wanderview>
annevk: yea... its a quirk of our cache add/addAll implementation that we don't get it automatically...  Cache is using a lower level API

[09:23:36.0000] <JakeA>
wanderview: agree with annevk

[09:23:42.0000] <wanderview>
thanks

[09:24:17.0000] <wanderview>
so we can have window cache.addAll()... go to SW which then does more Cache operations

[09:24:24.0000] <wanderview>
nested within the cache.addAll()

[09:27:25.0000] <annevk>
turtles!

[09:28:21.0000] <annevk>
but yeah, that might get hairy quickly

[09:28:56.0000] <annevk>
need some kind of atomicity otherwise you get races

[09:30:41.0000] <wanderview>
I think this probably is mostly ok since the spec is written async with many operations in flight already

[09:30:58.0000] <wanderview>
its kind of tricky for the gecko implementation, though...

[09:35:48.0000] <JakeA>
annevk: if a call results in an error that isn't speced (perhaps implementation specific), should the browser throw the most appropriate error, or its this a signal that the implementation or the spec is wrong?

[09:37:21.0000] <JakeA>
annevk: I guess what I'm asking is: are there specs that loosely define throwing like "if an error occurs, throw an appropriate error"

[09:37:45.0000] <JakeA>
(feels like insufficient specing to me)

[09:38:02.0000] <Ms2ger>
There's lots of insufficient speccing

[09:38:21.0000] <Ms2ger>
Like HTML "if a network error occurred"

[09:40:12.0000] <jgraham>
The bit after the comma seems particularly poor though

[09:40:31.0000] <jgraham>
The nature of the error shouldn't be left to chance^Wdevelopers

[09:47:38.0000] <annevk>
JakeA: that would be a bug in the spec

[09:48:21.0000] <annevk>
JakeA: the only thing we're loose on is the error message, as that can be localized and such

[09:55:02.0000] <JakeA>
annevk: thought so, ta

[10:33:30.0000] <jgraham>
Does anyone know what happened to the testharness.js-based Chromium Wervice-Worker tests?

[10:33:38.0000] <jgraham>
Did they ever get submitted to wpt?

[10:34:22.0000] <jgraham>
Probably the ones at https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/http/tests/serviceworker/&q=service-worker&sq=package:chromium&type=cs

[10:35:34.0000] <Ms2ger>
Speaking of chromium tests

[10:35:42.0000] <Ms2ger>
jsbell, any news on TextEncoder/Decoder?

[10:38:28.0000] <jgraham>
Seems like jsbell might also be able to help with my question

[10:38:56.0000] <Ms2ger>
/me approaches jsbell from behind

[10:39:00.0000] <jsbell>
Ms2ger: thanks for the ping... I started to move some of them my local w-p-t repo before the holidays, need to get back to it.

[10:39:15.0000] <jsbell>
... into my local...

[10:39:31.0000] <Ms2ger>
Nice to hear that

[10:39:35.0000] <jsbell>
jgraham: ??

[10:39:41.0000] <Ms2ger>
<jgraham> Does anyone know what happened to the testharness.js-based Chromium Wervice-Worker tests?

[10:39:41.0000] <Ms2ger>
<jgraham> Did they ever get submitted to wpt?

[10:39:41.0000] <Ms2ger>
<jgraham> Probably the ones at https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/http/tests/serviceworker/&q=service-worker&sq=package:chromium&type=cs

[10:40:26.0000] <Ms2ger>
jsbell, fwiw, smaller PRs tend to get landed quicker, so you don't necessarily need to wait until you've got them all

[10:40:27.0000] <jsbell>
not submitted yet, we still plan to

[10:41:15.0000] <jgraham>
jsbell: If you can get them submitted we can get them reviewed (although technically that's not needed if you are confident they're good to go)

[10:41:37.0000] <jgraham>
jsbell: The Mozilla implementors would like to run them

[10:42:01.0000] <jsbell>
jgraham: I'll chat w/ the team tonight, see if anyone can take it on. (new quarter, new priorities, yadda yadda)

[10:42:15.0000] <jgraham>
Yup

[10:42:23.0000] <jgraham>
If you need any help let me know

[10:42:47.0000] <jgraham>
Like, if it's as simple as "copy the files from the Chromium tree into the wpt tree" I can just do that for you ;)

[10:52:37.0000] <jsbell>
jgraham: you're welcome to give it a shot. The big issue is likely to be that we don't run them w/ serve.py so many likely have assumptions about our test server config that'll need correcting

[10:53:25.0000] <Ms2ger>
jsbell, any news on moving to wptrunner?

[10:54:41.0000] <jsbell>
ms2ger: no news

[10:55:22.0000] <jgraham>
jsbell: OK, great. Like I say we have interest in running these which I assume (optimistically!) means we have resources to make it happen ;)

[10:57:41.0000] <wanderview>
yea... the tests were helpful when I ran them manually... it would be nice to get them imported before we ship

[10:57:58.0000] <Ms2ger>
wanderview, put it on your todo list :)

[10:58:54.0000] <wanderview>
Ms2ger: the last time I checked the blink folks were waiting on PRs in review with jgraham... once they uplift them to the wpt repo I don't think there is much for us to do besides pull them in

[10:59:24.0000] <wanderview>
it seems we're past that point now, though... so hopefully they can get uplifted

[11:00:17.0000] <jgraham>
Right, the testharness.js changes landed

[11:04:15.0000] <wanderview>
cool

[12:03:09.0000] <TabAtkins>
annevk: The mutation events crashers were about people using nodes exposed by mutation events (particularly removal events) and making more mutations in/with them - they were incompletely sterilized and still thought they had some sort of connection to the DOM, which causes inconsistent state when mutating, and eventually hits crashes.

[12:03:45.0000] <TabAtkins>
It's like the problems with the instance tree in <use> - nothing inherent to the tech, but persistent crashiness due to human frailty in coding, and that just being something which regularly exposed such problems.

[12:08:08.0000] <annevk>
TabAtkins: there are some concerns around synchronous mutation that would be relevant here

[12:08:31.0000] <TabAtkins>
annevk: Likely, yeah. People could be hanging onto references to the old version of the element.

[12:09:02.0000] <annevk>
well there's no old version in solution 1)

[12:09:27.0000] <TabAtkins>
Yeah, but there's all the ordering and raciness there. :(

[12:10:05.0000] <annevk>
why?

[12:10:38.0000] <TabAtkins>
I explained in the email, I thought.  Is it still unclear?

[12:11:50.0000] <annevk>
yeah I guess, not sure it's insurmountable

[12:12:22.0000] <TabAtkins>
It's not insurmountable, it's just a persistent annoyance. Upgrading makes things more declarative, which matches the spirit of using HTML better.

[12:12:39.0000] <TabAtkins>
If you could only use custom elements by constructing them, it wouldn't matter - the ordering constraints of JS would make the right behavior fall out.

[12:14:04.0000] <annevk>
if you ensure your dependencies are loaded you can have constructors during parsing

[12:14:52.0000] <TabAtkins>
"if you ensure" is the hard part.  It means, for example, that you need to load your element definitions in a sync script block before your markup.

[12:55:54.0000] <Hixie>
annevk: lol. if the barrier to entry is too high when the barrier is one's own ability to do the work...

[12:56:25.0000] <Ms2ger>
mailing list is a support forum

[13:30:11.0000] <jgraham>
/me wonders how long checking out blink is supposed to take

[13:30:29.0000] <miketaylr>
multiple hours, last i did that

[13:34:13.0000] <roc>
TabAtkins: FWIW the problems Blink had with <use> may have been Blink's approach, not inherent. We always had a simple cloning strategy and didn't seem to have these problems

[13:35:02.0000] <roc>
mutation events, on the other hand .... blergh

[13:35:32.0000] <jgraham>
miketaylr: I'm up to 1:45 and no end in sight

[13:36:14.0000] <jgraham>
But my internal monolouge of the process has started to sound like the narration of a castaway

[13:36:56.0000] <miketaylr>
heh

[13:37:19.0000] <miketaylr>
be sure to find a volley ball to keep you company

[14:31:58.0000] <jgraham>
Hmm, so 2.5 hours in chromium checkout failed due to low disk space

[14:33:49.0000] <Ms2ger>
It's what, 50GB?

[14:38:55.0000] <jgraham>
I hope not

[14:39:07.0000] <jgraham>
If it is then even deleting B2G isn't going to help

[14:40:01.0000] <Ms2ger>
"Either way, fetch checks out more than 10GB"

[14:40:19.0000] <Ms2ger>
Sounds like I overestimated a bit

[14:40:49.0000] <jgraham>
I think I had 16 when it stopped

[14:41:10.0000] <jgraham>
B2G is 26, but I think that's almost all android

[15:44:46.0000] <jamesr__>
my chromium checkout is roughly 20GB, excluding build artifacts

[15:45:06.0000] <jamesr__>
debug build is 27GBish, depending on configuration

[15:45:12.0000] <jamesr__>
and what targets you wanna build

[15:48:07.0000] <caitp->
that's my favourite thing about v8

[15:48:10.0000] <caitp->
tiny


2015-01-13
[16:02:28.0000] <jamesr__>
chromium is big. web platform is very broad

[16:02:46.0000] <caitp->
yes, and yet i manage to get 7 minute clobber builds of m-c on my laptop

[16:03:19.0000] <caitp->
oh the things we miss

[16:08:25.0000] <jamesr__>
what kinda laptop?

[16:08:45.0000] <jamesr__>
i can clobber build chromium in about 3 minutes, but it takes a lot more power than a single laptop

[16:10:45.0000] <jgraham>
I think it's pretty community spirited of Google to make building Chromium have such a high barrier to entry

[16:11:01.0000] <jgraham>
It makes Gecko look appealing in comparison

[16:17:01.0000] <jamesr__>
i'm pretty sure nobody chooses to make the codebase harder to work with. in fact, quite a few people do the opposite. it's hard

[16:18:48.0000] <jgraham>
I imagine it's less pressing when you can build in 3 minutes due to a huge internal build cluster

[16:26:10.0000] <jsbell>
Ms2ger: https://critic.hoppipolla.co.uk/r/3713

[16:26:37.0000] <jsbell>
dang, not online... but cc'd, good 'nuff

[22:07:14.0000] <hemanth>
meow

[22:07:40.0000] <hemanth>
/me paws at catip, annevk 

[22:59:21.0000] <Domenic>
enough roleplaying in whatwg, I think...

[23:09:08.0000] <hemanth>
Ooops, Sorry Domenic. (It's become a (bad) habit)

[00:06:43.0000] <annevk>
morning

[00:09:48.0000] <terinjokes>
annevk: you're supposed to roleplay

[00:11:51.0000] <annevk>
heh

[00:15:37.0000] <hemanth>
^_^

[02:05:08.0000] <annevk>
this may interest some here: https://annevankesteren.nl/2015/01/javascript-web-platform

[02:29:56.0000] <hemanth>
annevk: internal states, tell me about that! ;)

[02:33:24.0000] <annevk>
hemanth: hah, still unclear?

[02:33:51.0000] <annevk>
hemanth: in the JavaScript specification it is fairly explicit, internal slots are the [[thingies]]

[02:34:42.0000] <annevk>
hemanth: in web platform land you have to read a bit, e.g. https://xhr.spec.whatwg.org/#formdata has an [[entries]] slot and an internal "create an entry" method

[02:35:08.0000] <hemanth>
annevk: not that i'm not clear, but finding those [[ ]] in MediaElement ain't easy (for me)

[02:36:03.0000] <Ms2ger>
I wonder if it'd be clearer if rather than prose "represents" or "has associated" requirements, we'd have a table with all the slots and maybe their type

[02:36:22.0000] <hemanth>
agree, need to "read a bit" :)

[02:36:27.0000] <annevk>
Ms2ger: that's my internal slots IDL proposal

[02:36:59.0000] <annevk>
hemanth: pretty much anything with an attribute getter requires an internal slot

[02:37:00.0000] <Ms2ger>
You mean, do it in the IDL block?

[02:37:24.0000] <annevk>
Ms2ger: yeah, the idea is that basically everything that's an attribute automatically creates an internal slot

[02:37:42.0000] <Ms2ger>
Eh, not sure I like that

[02:37:43.0000] <annevk>
Ms2ger: unless you say it doesn't need one (e.g. innerHTML doesn't need one, we'd generate the string on the fly)

[02:37:59.0000] <hemanth>
annevk: okies...

[02:38:00.0000] <Ms2ger>
We'd have to opt out all the reflecting attributes too

[02:38:02.0000] <annevk>
yeah, not everyone does

[02:38:32.0000] <annevk>
Ms2ger: I think for reflecting attributes we want special IDL

[02:38:38.0000] <annevk>
Ms2ger: [Reflect=URL] or some such

[02:38:45.0000] <Ms2ger>
And with my implementor hat on, I'm not sure I like having it intertwined with the interface definition

[02:38:48.0000] <Ms2ger>
I don't know

[02:38:51.0000] <hemanth>
annevk: https://twitter.com/GNUmanth/status/535356806856331264 is not possible due to internal slots, right?

[02:38:58.0000] <annevk>
Ms2ger: Chrome has that, looks pretty neat

[02:39:28.0000] <annevk>
hemanth: I'm not sure what that is saying

[02:40:57.0000] <hemanth>
well annevk gnumanth in me ;) So...we can't just do an Object.observe(input, function(changes){})

[02:41:05.0000] <hemanth>
 /in/is

[02:41:22.0000] <Ms2ger>
That's what you have with accessors

[02:42:20.0000] <annevk>
hemanth: ah yes, that doesn't work automatically because of getters rather than actual properties

[02:42:50.0000] <hemanth>
#sad

[02:43:07.0000] <hemanth>
anyway MutationObserver can come to rescue, right?

[02:43:08.0000] <annevk>
hemanth: a thought I had was that if we formalize internal slots through IDL we could also formalize Object.observe as acting on those formalized slots

[02:43:30.0000] <hemanth>
that would be great! annevk

[02:43:34.0000] <annevk>
hemanth: mutation observers are only about tree state, not about object state

[02:43:43.0000] <hemanth>
oh :(

[02:44:08.0000] <hemanth>
annevk: you got a chance to read http://h3manth.com/new/blog/2015/es6-reflect-api/ ;) ?

[02:45:28.0000] <annevk>
hemanth: do now, though I read about Reflect before, I'm on es-discuss :-)

[02:45:53.0000] <hemanth>
:)

[02:49:11.0000] <hemanth>
/me runs, got late for the cab...

[03:14:00.0000] <annevk>
JakeA: I for one, cannot wait for the internal build of the pre-alpha

[03:16:19.0000] <JakeA>
annevk: haha, I'm soooo fucking angry

[03:18:26.0000] <annevk>
JakeA: shows that post-religion people are still gullible

[03:55:53.0000] <annevk>
For some reason www.w3.org no longer loads in my Firefox Nightly

[03:56:05.0000] <annevk>
Is Firefox Nightly trying to protect me?

[04:18:52.0000] <JakeA>
annevk: yesterday, when I was talking about vague error messages, I was referring to steps 6.2 and 7 https://w3c.github.io/push-api/#widl-PushManager-subscribe-Promise-PushSubscription

[04:19:58.0000] <JakeA>
They're trying to decide between "be vague, and allow push services the freedom to throw the best error" and "update the spec for new errors created by different kinds of push services"

[04:20:10.0000] <JakeA>
I prefer the former

[04:20:14.0000] <JakeA>
EME does the latter

[04:21:02.0000] <JakeA>
https://w3c.github.io/encrypted-media/#h3_methods-1 1.2.3

[04:22:49.0000] <annevk>
JakeA: you mean EME does the former and you prefer the latter?

[04:23:11.0000] <annevk>
JakeA: what EME does is a bug that they should fix

[04:23:27.0000] <annevk>
JakeA: can't really hand-wave the protocol like that :-(

[04:23:50.0000] <JakeA>
annevk: hah, yes that's what I mean

[04:34:00.0000] <hemanth>
/me likes jsbin and 6to5 integration :)

[05:19:49.0000] <iandevlin>
I feel dumb when I read anything in this channel :-o

[05:20:13.0000] <JakeA>
fwiw so do I

[05:20:27.0000] <JakeA>
I suppose it's better than thinking you know it all, right?

[05:20:32.0000] <iandevlin>
True

[05:20:41.0000] <iandevlin>
But I appear to know nothing :D

[05:21:12.0000] <iandevlin>
That said, I often struggle to open food packaging so hey.

[06:14:18.0000] <annevk>
iandevlin: I think that's how everyone in this channel started out

[06:15:12.0000] <annevk>
iandevlin: hard to say whether we "improved" over time by learning though :-P

[06:16:01.0000] <iandevlin>
annevk: not sure if that's encouraging or not!

[06:18:53.0000] <annevk>
iandevlin: one day I hope social sciences starts studying mailing lists and IRC channels

[06:19:24.0000] <iandevlin>
annevk: haha :-)

[06:39:19.0000] <MikeSmith>
https://www.drupal.org/node/2405903

[06:39:48.0000] <MikeSmith>
does Drupal actually emit <meta name="charset" charset="utf-8" />

[06:40:03.0000] <Ms2ger>
Lolwat

[07:02:29.0000] <MikeSmith>
hsivonen: https://html5.validator.nu/ and https://validator.nu/ returning 502

[07:20:13.0000] <zcorpan>
MikeSmith: the validator messages would be clearer if it reordered the attributes so that "charset" is first before checking against the RelaxNG

[07:20:43.0000] <zcorpan>
MikeSmith: i think that is similarly done for <input> to put type first

[07:23:54.0000] <MikeSmith>
zcorpan: the validator's not doing any reordering of attributes anywhere

[07:24:00.0000] <MikeSmith>
as far as I know

[07:24:28.0000] <zcorpan>
MikeSmith: i recall something about <input type> at least to make error messages less confusing

[07:24:36.0000] <zcorpan>
hsivonen: ^

[07:26:16.0000] <zcorpan>
MikeSmith: try this <input alt type=file> <input type=file alt>

[07:26:28.0000] <MikeSmith>
/me tries

[07:26:58.0000] <zcorpan>
and compare with <meta name=charset charset=utf-8> vs <meta charset=utf-8 name=charset>

[07:28:31.0000] <zcorpan>
without the reordering it would say that type=file is invalid for the first case

[07:32:25.0000] <MikeSmith>
OK, I see what you're saying but I don't think that's due any to the code doing any special reordering of attributes in that case -- instead it's just because of the way the RelaxNG schema defines the constraints for <input>, which is different from how it defines the constraints for <meta>

[07:33:27.0000] <MikeSmith>
because dealing with <input> is a massive PITA due to the fact it's not really one element but actually 17 or whatever different elements masquerading as one element

[07:33:37.0000] <annevk>
MikeSmith: at what point are you going to cut out the middle man?

[07:36:12.0000] <MikeSmith>
annevk: some day when I either suddenly get much smarter or when I suddenly have a bunch more time free to work on solving interesting problems

[07:37:22.0000] <Ms2ger>
zcorpan, fwiw, bz believes http://w3c-test.org/quirks-mode/table-cell-width-calculation.html flakiness in Gecko is because it assumes imgs load sync

[07:38:06.0000] <zcorpan>
Ms2ger: yes, that matches my analysis

[07:38:49.0000] <zcorpan>
Ms2ger: question is if we want <img src=data:...> to load sync or async

[07:39:12.0000] <Ms2ger>
I don't want anything :)

[07:39:57.0000] <annevk>
zcorpan: I want async...

[07:40:25.0000] <zcorpan>
MikeSmith: just need to double your intake of tea and then you can handle it yourself

[07:40:27.0000] <zcorpan>
annevk: why?

[07:40:45.0000] <MikeSmith>
heh

[07:41:13.0000] <MikeSmith>
zcorpan: it's imaginable that we could change the meta-checking user-visible behavior to be more like the input-checking user-visible behavior. But another thing is that the meta-checking behavior is itself also already relatively baroque, but just in a different way. Good times all around

[07:41:27.0000] <annevk>
zcorpan: consistency

[07:41:46.0000] <annevk>
zcorpan: though I guess <img src=known-uri> is also sync...

[07:41:48.0000] <annevk>
bah

[07:41:51.0000] <zcorpan>
MikeSmith: i guess <meta> invalidness might be rare and not worth optimizing for

[07:42:04.0000] <MikeSmith>
yeah true probably so

[07:42:09.0000] <zcorpan>
annevk: it is, yes

[07:42:59.0000] <zcorpan>
annevk: it loads sync in blink but not in current blink/webkit

[07:43:20.0000] <Ms2ger>
I think you blinked a blink there

[07:44:23.0000] <MikeSmith>
zcorpan: I think in general we could move more stuff out of the RelaxNG schema and into the Java code. Maybe <meta> is a specific case where that could happen, I dunno. But in general we get better behavior for end users the more we move stuff out that way when we can

[07:44:31.0000] <zcorpan>
gecko/webkit

[07:45:46.0000] <zcorpan>
MikeSmith: is there any data about which messages or elements or attributes are most common?

[07:46:36.0000] <MikeSmith>
nah we would need to add some stuff to the stats-collecting code to get that

[07:46:50.0000] <MikeSmith>
Hixie also talked to me about that recently

[07:46:56.0000] <MikeSmith>
so I should do it

[07:47:15.0000] <MikeSmith>
one nice thing about that is , it doesn't require me to be so smart

[07:47:24.0000] <zcorpan>
i think hsivonen did something like that in the early days

[07:47:33.0000] <MikeSmith>
yeah?

[07:47:57.0000] <MikeSmith>
if so I don't think he kept the code for collecting it in there

[07:48:16.0000] <MikeSmith>
anyway, it would be very useful info to have

[08:04:13.0000] <zcorpan>
MikeSmith: https://lists.w3.org/Archives/Public/public-html/2008Jan/0305.html

[08:09:20.0000] <zcorpan>
heh, "Bad value “X-UA-Compatible”" "Hmm."

[08:10:48.0000] <zcorpan>
does someone have IE? i can't get modern.ie to give me a screenshot for http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3066

[08:19:12.0000] <iandevlin>
zcorpan: I have IE, what do you want?

[08:20:31.0000] <zcorpan>
iandevlin: can you tell me what the log says for the above link?

[08:21:22.0000] <iandevlin>
zcorpan: In IE11, the log says: log: 0

[08:21:22.0000] <iandevlin>
rendering mode: CSS1Compat

[08:21:22.0000] <iandevlin>
document has no title

[08:21:25.0000] <iandevlin>
oops

[08:21:40.0000] <zcorpan>
thanks iandevlin

[08:21:54.0000] <zcorpan>
means loading is async

[08:24:42.0000] <TabAtkins>
What does e10s expand to?

[08:25:12.0000] <jgraham>
eeeeeeeeees

[08:25:25.0000] <jgraham>
Or electrolysis

[08:25:33.0000] <jgraham>
Your choice

[08:26:58.0000] <iandevlin>
See? I don't even understand those logs that I pasted :-/

[08:27:00.0000] <Domenic>
https://lists.w3.org/Archives/Public/public-html/2008Jan/0305.html seems to basically just be saying "if people make an error often enough we should make it conforming" :-/

[08:29:44.0000] <Domenic>
Oh I see that's from 2008

[08:30:01.0000] <jgraham>
Domenic: It's more like "if people do X and we can't think of a reason that X is actively harmful (in some way that doesn't require everyone else to not do X too), then it should be conforming"

[08:30:39.0000] <Domenic>
Yeah, that doesn't sound like a conformance checker/validator too much to me. More like an interoperability checker.

[08:30:52.0000] <zcorpan>
iandevlin: annevk: Ms2ger: https://github.com/ResponsiveImagesCG/picture-element/issues/223#issuecomment-69772765

[08:31:16.0000] <annevk>
zcorpan: \o/

[08:31:25.0000] <annevk>
zcorpan: ah yes, allowing asynchronous decoding is a good one

[08:31:35.0000] <jgraham>
Domenic: Souns like one to me, just where the definition of "conformance" is based on data rather than someone's idea of aesthetics

[08:31:38.0000] <iandevlin>
zcorpan: aha thanks

[08:31:42.0000] <annevk>
zcorpan: anything sync is PITA, see about:blank

[08:32:22.0000] <Ms2ger>
Domenic, problem is that validators can't whine *too* much, otherwise people ignore them

[08:32:59.0000] <Domenic>
Ms2ger: yeah, I'm sympathetic to that. A lot of those seemed pretty bad though. e.g. border="0" instead of CSS.

[08:33:18.0000] <Ms2ger>
Domenic, *shrug*

[08:33:47.0000] <zcorpan>
Domenic: why is it better to use style="border:0" for something like a badge that you want other people to paste into their sites?

[08:33:54.0000] <Ms2ger>
Domenic, I mean, CSS is better and all, and I'd never use border="" today, but is it really harmful?

[08:33:56.0000] <jgraham>
Domenic: Right that makes sense if you can articulate a particular reason it's bad

[08:34:31.0000] <jgraham>
(some things that "everybody knows" are terrrible turn out to be not-so-terrible-after-all under this test)

[08:34:36.0000] <jgraham>
(e.g. <b>)

[08:34:37.0000] <zcorpan>
(border=0 might not be necessary at all today though since browsers dropped the default border on image links)

[08:34:50.0000] <Domenic>
zcorpan: knowing and propagating knowledge of the general-purpose mechanism is better than knowing that img's have a special-purpose attribute that will tweak the border.

[08:36:40.0000] <zcorpan>
Domenic: so presentational stuff is ok if it's general-purpose?

[08:38:46.0000] <Domenic>
not what i said

[08:40:33.0000] <annevk>
So nobody any idea why Firefox would refuse to load www.w3.org links?

[08:41:21.0000] <Ms2ger>
Doesn't for me

[08:41:27.0000] <Domenic>
is it on the HSTS preload list? There's some part of the w3 site that sets the HSTS header, but the rest of the site redirects https to http

[08:47:19.0000] <annevk>
Domenic: that sounds like it could be it

[08:47:21.0000] <zcorpan>
Domenic: yeah, sorry

[08:48:06.0000] <annevk>
Domenic: seems I cannot inspect items in the list in Firefox, I can either enable or disable it...

[08:48:24.0000] <annevk>
Domenic: but I do end up with infinite redirects...

[08:48:48.0000] <annevk>
/me didn't realize the W3C would try to set that header before they made things work

[08:50:06.0000] <annevk>
"Unfortunately these threads usually devolve into an endless thread of discussion and debate that become next to impossible to actually read through later without several hours of spare time and a bottle of whiskey..." hehehe

[09:32:31.0000] <MikeSmith>
annevk: is your Firefox refusing to load www.w3.org links right now?

[09:33:13.0000] <annevk>
MikeSmith: yes

[09:33:33.0000] <annevk>
"Firefox has detected that the server is redirecting the request for this address in a way that will never complete."

[09:33:41.0000] <MikeSmith>
ok yeah

[09:33:57.0000] <MikeSmith>
this happened to others

[09:34:05.0000] <MikeSmith>
including me, but in Chrome in my case

[09:34:09.0000] <annevk>
MikeSmith: the only way for w3.org to solve this is either no longer redirect https to http or set a HSTS header for everyone that removes the policy

[09:34:33.0000] <annevk>
MikeSmith: strict-transport-security: max-age=0 or some such

[09:34:39.0000] <MikeSmith>
did Tim or somebody send out public mail about this?

[09:34:57.0000] <annevk>
MikeSmith: I don't know

[09:37:39.0000] <annevk>
MikeSmith: yeah it's definitely HSTS

[09:37:52.0000] <MikeSmith>
yeah

[09:52:21.0000] <JakeA>
TabAtkins: Which spec defines a css property that gives an element an aspect ratio?

[09:52:27.0000] <JakeA>
(or am I making it up?)

[09:52:37.0000] <TabAtkins>
An old blog post of mine defined a bad version of it.

[09:52:42.0000] <TabAtkins>
But no spec does.

[09:52:58.0000] <JakeA>
No worries. Must have imagined it

[12:05:49.0000] <jsbell>
MikeSmith: can you verify that inexorabletash is a contributor to w3c/IndexedDB on github?

[12:18:05.0000] <annevk>
/me was reading that and thought, hey, I know inexorabletash, that's jsbell!

[12:18:14.0000] <annevk>
And then I read who wrote the line

[12:18:32.0000] <jsbell>
:)

[12:30:12.0000] <hsivonen>
MikeSmith, zcorpan: validator.nu is up again. thanks

[13:03:09.0000] <GPHemsley>
MikeSmith, jgraham: Yes, I was paraphrasing.

[13:55:05.0000] <Hixie>
so confused

[13:55:12.0000] <Hixie>
suppose i have an Iterator in JS

[13:55:35.0000] <Hixie>
do i use  for (let a in g),  for (let a of g),  or  for each (let a in g)  ?

[13:59:51.0000] <jsbell>
Hixie: for (let a of g)

[14:00:00.0000] <Hixie>
ok, thakns

[14:34:56.0000] <TabAtkins>
Hixie: for(let a of g)

[14:35:23.0000] <TabAtkins>
"for each" was part of a very old proposal, only existed in Firefox if you invoked the right ritual version.

[14:35:42.0000] <TabAtkins>
Testing: ping?

[14:39:32.0000] <TabAtkins>
Ooof, I'm in netsplit right now.  Awesome.

[15:18:34.0000] <MikeSmith>
jsbell: d'oh

[15:18:48.0000] <MikeSmith>
fixed now

[15:20:47.0000] <MikeSmith>
jsbell: I had created a github team odd the idxdb errors but has neglected to actually associate it with the idxdb repo

[15:21:20.0000] <MikeSmith>
*of the idxdb editors

[15:25:16.0000] <jsbell>
MikeSmith: np, thx

[15:26:54.0000] <jsbell>
MikeSmith: history pushed, you should be able to redirect dvcs.w3.org/hg/IndexedDB now

[15:28:46.0000] <MikeSmith>
jsbell: cool, will set it up in a couple hours

[15:29:26.0000] <MikeSmith>
(on from my phone now)


2015-01-14
[22:30:59.0000] <zewt_>
now chrome suddenly wasting a ton of tab bar space to tell me my name. why does everything get worse?

[22:31:09.0000] <zewt_>
wonder if it'll go away if i log out of google

[22:32:11.0000] <paul_irish>
zewt_: chrome://flags/#enable-new-profile-management disable here

[22:33:21.0000] <paul_irish>
zewt_: there's also chrome://flags/#enable-fast-user-switching but i'm not 100% sure what effect it has

[22:52:55.0000] <MikeSmith>
https://github.com/gabelerner/canvg seems fairly cool

[22:54:45.0000] <hemanth>
/me tries ES6 classes on ions https://twitter.com/GNUmanth/status/555254535531139073 ;)

[22:54:59.0000] <hemanth>
 /ions/iojs duh!

[23:07:10.0000] <Domenic>
MikeSmith: wow, nice find

[23:07:23.0000] <MikeSmith>
diffalot:

[23:08:18.0000] <MikeSmith>
oofs

[23:08:29.0000] <MikeSmith>
Domenic: Patrick Walton found that https://twitter.com/pcwalton/status/554789716772401152

[23:08:56.0000] <MikeSmith>
I just re-found it from him

[23:08:57.0000] <Domenic>
fascinating, that servo is actually using this

[23:09:47.0000] <zewt_>
paul_irish: i assume it won't be an option for long if it's buried like that, thanks though

[00:16:29.0000] <annevk>
Is io.js a fork of Node.js?

[00:16:53.0000] <MikeSmith>
yeah

[00:18:01.0000] <tantek>
I keep forgetting, which one has more social justice?

[00:18:10.0000] <MikeSmith>
community fork to take it back from Joyent, as far as I understand

[00:18:25.0000] <tantek>
didn't it have to do with he/she/they pronouns or something?

[00:18:42.0000] <MikeSmith>
wha

[00:18:52.0000] <annevk>
I remember there was some outcry over a board appointed by a private company

[00:19:15.0000] <tantek>
the forking will continue until no one private entity controls the project

[00:19:22.0000] <annevk>
But my Twitter timeline has not provided the details clearly and I have not cared to look into it thus far

[00:20:13.0000] <charl>
i thought it had something to do with ecmascript and the harmony flag but i have not looked into it extensively

[00:20:23.0000] <charl>
haven't used node much the past couple of years

[00:31:34.0000] <iandevlin>
I have never used node, does that make me a heathen?

[00:33:42.0000] <annevk>
I have not either

[00:34:56.0000] <annevk>
My host's default software makes it much easier to write something in Python...

[00:35:59.0000] <iandevlin>
I have also never used Python.

[00:36:00.0000] <charl>
i mostly use python on the server too but that's more a case of personal preference than anything else

[00:36:35.0000] <annevk>
I would use JavaScript I think if it was just a matter of dumping a file

[00:37:38.0000] <annevk>
It doesn't really matter much, end result is network traffic either way

[01:01:57.0000] <MikeSmith>
I guess foolip no longer does irc

[01:02:33.0000] <MikeSmith>
wanted to ask him if ruby is supported in WebVTT text tracks

[01:02:51.0000] <MikeSmith>
I guess I need to read the spec instead

[01:03:48.0000] <MikeSmith>
ah there's at least one wpt test case that has it

[01:53:51.0000] <jgraham>
Domenic: Not sure it's the long term plan for servo (I expect without measuring that you get beter perf and more features with a native implementation), but it gives something with very little effort

[01:54:29.0000] <Ms2ger>
Someone said Servo?

[01:55:17.0000] <Ms2ger>
Domenic, Servo isn't using it

[01:55:37.0000] <Ms2ger>
Domenic, and it's not at all certain that it will

[02:04:47.0000] <annevk>
mounir_: happy b-day!

[02:13:50.0000] <mounir_>
annevk: thanks for reminding me I'm old :)

[02:14:12.0000] <annevk>
mounir_: did you get any presents old man?

[02:14:55.0000] <Ms2ger>
annevk, want to help review https://critic.hoppipolla.co.uk/r/3723 ?

[02:15:29.0000] <mounir_>
annevk: na, that's for youngsters

[02:16:27.0000] <jgraham>
Maybe we should find mounir_ a review for his birthday

[02:17:08.0000] <annevk>
Ms2ger: hmm, if we are going to include encodings.js some other tests should maybe be rewritten...

[02:17:29.0000] <mounir>
jgraham: I could probably do one of the reviews in my queue :)

[02:18:03.0000] <Ms2ger>
annevk, that might be a reasonable idea

[02:18:03.0000] <annevk>
Ms2ger: are you reviewing now?

[02:18:06.0000] <Ms2ger>
annevk, no

[02:21:43.0000] <annevk>
assert_throws, shouldn't that take new TypeError() as first argument?

[02:23:00.0000] <Ms2ger>
Either way works, but I guess new TypeError() is used more

[02:34:02.0000] <annevk>
Ms2ger: actually, I think I rather focus on custom elements a bit more and leave this until that's a bit further ahead

[02:34:39.0000] <Ms2ger>
Wfm

[03:32:08.0000] <zcorpan>
MikeSmith: the spec has ruby (only <ruby> and <rt>). not sure who implements it, but presto didn't (apart from supporting in the parser probably)

[03:35:24.0000] <MikeSmith>
zcorpan: ah ok thanks

[03:36:11.0000] <MikeSmith>
I still hadn't gotten around to checking the spec

[03:36:28.0000] <zcorpan>
MikeSmith: it's a feature that is unique to webvtt compared to other subtitle formats, iirc

[03:36:45.0000] <MikeSmith>
Oh

[03:37:14.0000] <zcorpan>
except for burnt-in subtitles which can do whatever

[03:37:36.0000] <MikeSmith>
sure

[03:38:22.0000] <MikeSmith>
well it's used quite a lot with TV captions in Japan

[03:38:57.0000] <MikeSmith>
maybe that's only started to happen recently

[03:39:55.0000] <MikeSmith>
And to be clear I mean it's used now everyday in non-burnt-in captions

[03:40:53.0000] <MikeSmith>
ones that need to be optionally turned on to be viewed

[03:41:21.0000] <MikeSmith>
closed captions, or whatever they're properly called now

[03:41:43.0000] <MikeSmith>
for hearing-impaired people

[03:42:48.0000] <zcorpan>
MikeSmith: i think it's worked around using font-size and character-level positioning in other formats, rather than native support in the format for ruby

[03:43:51.0000] <zcorpan>
i don't recall what led me to think this but a quick google search on the topic seems to support my claim :-)

[03:46:28.0000] <zcorpan>
it's possible that there is a format or profile or extension of a format in use in japan that has native support though

[03:50:46.0000] <MikeSmith>
zcorpan: hmm yeah I'll ask. we have a guy on the w3c team now in Japan, Yosuke Funahashi, who knows intimately about everything related to broadcasting in Japan, as far as technologies

[03:51:00.0000] <zcorpan>
cool

[05:57:31.0000] <Ms2ger>
And suddenly Bert Bos in my twitter

[05:57:38.0000] <Ms2ger>
Thanks for the retweet, MikeSmith :)

[06:04:04.0000] <MikeSmith>
Ms2ger: servo?

[06:04:25.0000] <Ms2ger>
Some conference in .jp

[06:04:34.0000] <MikeSmith>
ah

[06:06:03.0000] <MikeSmith>
ah I see Bert

[06:06:19.0000] <MikeSmith>
"Bos" means "Badass" in Belgian

[06:13:06.0000] <Ms2ger>
Actually it means "forest"

[06:13:49.0000] <MikeSmith>
in some dialects, yes

[06:15:04.0000] <MikeSmith>
/me tries to figure out other ways to get Bert into Ms2ger's twitter

[06:18:56.0000] <zcorpan>
hsivonen: v.nu gives 502 again

[06:26:04.0000] <zcorpan>
MikeSmith: i get an error for media="((min-width: 769px), (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi))" for the double-parens but i think it should be allowed per spec

[06:26:54.0000] <zcorpan>
(this is from canistaywithyouwhileirentmyplaceonairbnb.com )

[06:27:32.0000] <Ms2ger>
From where?

[06:33:53.0000] <MikeSmith>
zcorpan: oh

[06:34:31.0000] <MikeSmith>
I'd think the code I wrote should handle that as expected

[06:35:08.0000] <MikeSmith>
zcorpan: can you please file a bug for that?

[06:35:13.0000] <zcorpan>
sure

[06:36:21.0000] <zcorpan>
which component?

[06:38:05.0000] <zcorpan>
https://bugzilla.validator.nu/show_bug.cgi?id=1014

[06:53:15.0000] <MikeSmith>
zcorpan: thanks, that'll work

[06:54:03.0000] <MikeSmith>
https://github.com/validator/validator/issues works fine now too, if you like the Github

[06:54:42.0000] <zcorpan>
ok

[09:22:02.0000] <annevk>
Is there a betting pool yet for how long we can have "fetch" as a global variable?

[09:26:14.0000] <Ms2ger>
Anyone going over a week?

[09:28:26.0000] <zcorpan>
oh it's in canary now huh

[09:37:51.0000] <annevk>
Ms2ger: bad odds, but oooh the reward :-P

[09:38:00.0000] <annevk>
(there's no reward)

[09:42:41.0000] <zcorpan>
annevk: what's a regexp that finds problematic uses of "fetch"?

[09:43:06.0000] <Ms2ger>
\bfetch\b

[09:44:03.0000] <zcorpan>
var fetch = "foo"; isn't actually problematic, is it?

[09:50:13.0000] <jgraham>
Presumably just defining a variable, even a global, isn't problematic. It's things like testing for fetch == undefined

[09:52:22.0000] <zcorpan>
or bare fetch in event handler attributes

[11:51:03.0000] <zewt_>
also using generic words is just annoying api (the number of times I've wanted to name a variable max or len in python; ugh)

[11:55:08.0000] <zewt_>
(not that fetch is *that* bad)

[12:39:21.0000] <annevk>
Meh, inbox explosion

[12:40:34.0000] <annevk>
zewt_: it's a bit annoying how variables are not separately scoped

[13:57:08.0000] <TabAtkins>
annevk: On the other hand, Common Lisp's separation of methods and variables is also annoying at times. It's a trade-off.


2015-01-15
[16:04:09.0000] <Domenic>
TabAtkins: can I pass in custom metadata with bikeshed's --md-xxx syntax? I am getting "Unknown metadata key" errors

[16:04:44.0000] <TabAtkins>
Nope, I have a note in the issue saying that I'm not adding it until someone asks, because it's a little troublesome. ^_^

[16:05:15.0000] <Domenic>
hmm maybe i can repurpose another metadata

[16:06:31.0000] <Domenic>
TabAtkins: I basically want to smuggle in some custom text from the command line, so I can do `var currentCommitURL = "[commiturl]"`

[16:06:45.0000] <Domenic>
any better way to do that than asking you to implement custom metadata?

[16:07:03.0000] <TabAtkins>
That won't work in the first place, since there's no way to set custom text macros.

[16:07:10.0000] <Domenic>
Ah, macros vs. metadata

[16:08:20.0000] <Domenic>
so uh yeah any ideas

[16:13:20.0000] <TabAtkins>
Log an issue on me and I'll think about it. ^_^

[00:00:01.0000] <MikeSmith>
anybody know that github is using Flash for?

[00:00:50.0000] <MikeSmith>
in Chrome I get a popup notification about it having blocked a pop-up from Flash

[00:02:55.0000] <ondras>
document.querySelectorAll("object")[0].id

[00:02:56.0000] <ondras>
"global-zeroclipboard-flash-bridge"

[00:03:01.0000] <ondras>
:-)

[00:03:27.0000] <MikeSmith>
https://assets-cdn.github.com/flash/ZeroClipboard.v2.1.6.swf I guess

[00:03:37.0000] <MikeSmith>
ondras: yeah

[00:53:07.0000] <annevk>
Domenic: are you awake?

[01:10:38.0000] <hsivonen>
zcorpan: thanks. validator.nu is back

[01:10:49.0000] <hsivonen>
looks like I need to write some kind of watchdog for this

[01:11:22.0000] <hsivonen>
like I have with Apache+Bugzilla, which is combo that gets killed by the kernel occasionally

[01:11:39.0000] <hsivonen>
so I have a cron job telling apache to start frequently

[01:14:59.0000] <annevk>
heycam|away: whoa, 100Mbps for AUD 1500 is ... move to Europe ;-)

[02:29:25.0000] <zcorpan>
my first v.nu PR https://github.com/validator/validator/pull/25

[02:30:01.0000] <MikeSmith>
righteous

[02:31:10.0000] <zcorpan>
i guess there's no spec for x-ua-compatible http header

[02:33:22.0000] <MikeSmith>
only some scattered msdn stuff, how-to, not spec

[02:35:49.0000] <zcorpan>
maybe the message should say what the value was

[02:36:55.0000] <MikeSmith>
that's always nice to have

[02:37:08.0000] <MikeSmith>
especially in this case

[02:37:29.0000] <MikeSmith>
since it's coming from a header

[02:47:18.0000] <zcorpan>
MikeSmith: the docs say there's error, fatalError and warning. and the other errors are actually fatal. so this should be error

[02:47:52.0000] <zcorpan>
unless error somehow doesn't work and it needs to choose between fatalError and warning

[02:49:28.0000] <MikeSmith>
zcorpan: ok. haven't looked back at the rest of the code yetー I'm on from my phone

[08:09:19.0000] <annevk>
https://twitter.com/awbjs/status/555755196488241152 :/

[08:09:29.0000] <annevk>
Is there nobody that does any triaging on ES bugs?

[08:09:56.0000] <annevk>
What's the point in filing them if they keep getting deferred unless you're on some committee

[08:10:25.0000] <Ms2ger>
What makes you think there is a point?

[08:10:52.0000] <gsnedders>
haha thinking doing anything with TC-39 is worthwhile if you're not a member of TC-39, that's cute

[08:16:50.0000] <Domenic>
annevk: am awake

[08:17:04.0000] <Domenic>
curious on your thoughts on my latest custom elements post

[08:17:17.0000] <Domenic>
i think it makes upgrading a minimum viable part of the mvp

[08:17:43.0000] <annevk>
Domenic: the Dmitry solution?

[08:17:49.0000] <Domenic>
yes

[08:18:32.0000] <annevk>
Domenic: I was not thrilled at first, but then I read Jonas' almost-synchronous solution which wasn't great either

[08:19:07.0000] <Domenic>
I think the Dmitry solution is pretty nice. The biggest problem with the current setup is that C1 = document.registerElement("my-el", C2) gives C1 !== C2

[08:19:16.0000] <Domenic>
with Dmitry's solution they are ===

[08:19:31.0000] <annevk>
Domenic: it seems even wycats is not too opposed to the Dmitry solution although it has the Brain transplant properties...

[08:21:58.0000] <annevk>
Domenic: the main thing I dislike is that it's quite a bit different from normal elements

[08:22:19.0000] <annevk>
Domenic: but I guess that's always going to be the case, given where we put the security boundaries

[08:23:07.0000] <Domenic>
For parses that happen after registration you could use the real constructor using Jonas's technique more or less, I think. But for parses before registration I think not having identity at parse time is the only reasonable thing.

[08:23:28.0000] <annevk>
Domenic: I don't think we should do both

[08:23:43.0000] <annevk>
Domenic: that makes it racy whether certain things end up working

[08:23:56.0000] <Domenic>
Normal elements could probably work the way of the Dmitry solution

[08:24:56.0000] <Domenic>
Probably nobody wants to implement that but seems doable.

[08:24:57.0000] <annevk>
Domenic: the element-constructors repo looks really great btw

[08:25:36.0000] <Domenic>
Thanks :). Needs a bit more work, but I am happy that it is possible.

[08:26:16.0000] <annevk>
Yeah, I think as some suggested on the list we want to require magic tokens for a few to make forward compatibility a bit better, but overall this looks like the way to go

[08:26:44.0000] <TabAtkins>
I'm so happy that someone who understands JS better than I do is making this happen. ^_^

[08:26:50.0000] <Domenic>
Hopefully can restrict it to HTMLUnknownElement.

[08:27:14.0000] <annevk>
Even though it's rather weird that elements have both duck typing and identity but I guess we're not going to remove that anytime soon

[08:31:18.0000] <Domenic>
What do you mean by that exactly?

[08:33:48.0000] <hemanth>
/me : Node Module Of The Week -> http://nmotw.in/isomorphic-fetch/ 

[08:36:33.0000] <annevk>
Domenic: that you check the identity of an element by name/namespace rather than class

[08:37:08.0000] <Domenic>
Yeah but if we maintain the invariants in the readme then those have a 1:1 correspondence so it becomes observably the same

[08:37:09.0000] <annevk>
Domenic: similar to how ES prescribes that you check for [[WeakMapData]] but then makes these slots so unique you can do it either way...

[08:37:57.0000] <annevk>
Domenic: I would like <my-button> to be able to be a subclass of <button> at some point

[08:38:14.0000] <annevk>
Domenic: not right away, but at some point

[08:38:32.0000] <Domenic>
Ah I see

[08:38:33.0000] <annevk>
Domenic: and forget about is="" for now since it's ugly and Apple is not interested

[08:38:47.0000] <Domenic>
is="" is currently the only way to get accessibility

[08:39:06.0000] <Domenic>
Plus other various gaps that HTML as Custom Elements documents

[08:39:37.0000] <annevk>
What's wrong with ARIA?

[08:39:52.0000] <Domenic>
it doesn't cover e.g. focus

[08:39:54.0000] <TabAtkins>
/me isn't super-hyped about dropping something when it's sure to lead to more "Google spec doesn't care about a11y" shouting...

[08:40:24.0000] <Domenic>
TabAtkins: heh, Mozilla is already getting the blame. https://twitter.com/stevefaulkner/status/555757553062535168

[08:40:24.0000] <annevk>
Domenic: anything with tabindex can get focus

[08:41:19.0000] <Domenic>
annevk: or general manipulability with the keyboard. You have to hand-code all the event listeners.https://w3c.github.io/webcomponents/spec/custom/#custom-tag-example

[08:41:28.0000] <annevk>
Is is="" going to be the new longdesc=""?

[08:41:59.0000] <annevk>
Domenic: if your element is doing anything novel that is going to be the case either way, but to be clear I wouldn't want this to stay this way forever

[08:42:04.0000] <TabAtkins>
No, eventually we'll just have <my-button>, presumably.

[08:42:13.0000] <annevk>
Domenic: I would like to solve this too, but I don't think is="" is the way to go

[08:42:21.0000] <Domenic>
<my-button> subclassing button seems doable if Boris changes all the Gecko code and we fill all the HTML as Custom Elements gaps

[08:42:24.0000] <wycats>
annevk: I think Dmitry's approach is the local-maxima for brain transplants

[08:42:33.0000] <wycats>
I'd like to explore options other than brain transplants though

[08:42:57.0000] <annevk>
wycats: I have the options here: https://wiki.whatwg.org/wiki/CustomElements#Upgrading

[08:43:21.0000] <annevk>
wycats: though explanation/drawbacks is not as complete as it could be

[08:43:34.0000] <wycats>
annevk: I need to propose the "import-in-html" thing

[08:43:37.0000] <wycats>
which isn't represented there

[08:43:40.0000] <Domenic>
"Not having identity at creation-time is a giant mismatch with the rest of the platform." I think in theory the rest of the platform could match

[08:43:40.0000] <annevk>
Domenic: if all browsers change all the code rather :-P

[08:44:05.0000] <Domenic>
Or at least I would be interested to tease out the exact problems that occur if we tried to make it match

[08:44:17.0000] <wycats>
Domenic: seems tricky

[08:44:46.0000] <Domenic>
wycats: I don't see how. If we run createdCallback "before user script", it's only inside the createdCallback that the uninitialized state of other elements is observable

[08:45:14.0000] <annevk>
wycats: even with import-in-html one of these four strategies needs to be used I think to actually create instances from markup

[08:45:15.0000] <Domenic>
and you can't override the createdCallbacks that the built-ins supplied to the browser at start-up time

[08:45:23.0000] <wycats>
annevk: sure, yes

[08:46:04.0000] <annevk>
really three strategies, I only added the existing prototype one for comparison sake

[08:46:16.0000] <Domenic>
I *guess* this scenario would be observably different: <my-el></my-el><p>; inside the createdCallback() for my-el you would observe this.nextSibling is HTMLElement instead of HTMLParagraphElement

[08:46:43.0000] <Domenic>
But you could solve even that if you create a priority queue system where the elements that are registered first are called first

[08:47:18.0000] <Domenic>
So then just say that <p> registered its callbacks before <my-el> so it gets upgraded + createdCallback first, so inside <my-el>'s createdCallback() you end up seeing the post-upgrade <p>.

[08:47:29.0000] <annevk>
I guess I need to reread how Dmitry's solution works exactly

[08:47:31.0000] <Domenic>
So I think the brain transplant is not observably different from the existing platform.

[08:47:44.0000] <Domenic>
i.e. all existing elements can be explained in terms of it.

[08:47:57.0000] <wycats>
Domenic: fwiw, this is my very very very very very very straw-man: https://gist.github.com/wycats/b67eb065e5862902a7ee

[08:48:00.0000] <Domenic>
with this additional idea that you run callbacks in order of registration

[08:48:00.0000] <wycats>
for imports-in-html

[08:48:17.0000] <wycats>
like... so straw man that the syntax isn't worth bikeshedding at all

[08:48:22.0000] <wycats>
the key point is the semantics

[08:48:24.0000] <Domenic>
wycats: so you can only use custom elements inside templates?

[08:48:42.0000] <wycats>
Domenic: <template> is a straw-man to get inert DOM

[08:48:49.0000] <Domenic>
sure I don't care about the name

[08:48:55.0000] <Domenic>
So you can't just write .html files using custom elements

[08:49:09.0000] <wycats>
Domenic: my original approach was to just say that any element that contained imports was inert

[08:49:14.0000] <wycats>
which is also fine

[08:49:22.0000] <Domenic>
so that's just equivalent to sync script then

[08:49:26.0000] <wycats>
deny

[08:49:30.0000] <wycats>
Domenic: read down

[08:49:42.0000] <wycats>
it's async, and there is fallback content

[08:49:57.0000] <Domenic>
right, but same idea of blocking the real content until the definition loads.

[08:50:01.0000] <wycats>
yes

[08:50:13.0000] <wycats>
but not actually blocking the main thread

[08:50:27.0000] <Domenic>
sure, <script> doesn't block the main thread, it just blocks parsing the real content

[08:50:33.0000] <wycats>
Domenic: the thing that I'm most struggling with is the fact that usually "loading" is a coarser thing than a single element

[08:50:44.0000] <wycats>
Domenic: I don't think it's worth analogizing to sync script

[08:50:49.0000] <wycats>
it's not meant to work like sync script

[08:51:01.0000] <Domenic>
it is very much worth analogizing because this is just a tweak to the sync script proposal

[08:51:29.0000] <wycats>
the sync script proposal has no way to show other subsequent content

[08:51:39.0000] <wycats>
it seems... not the same?

[08:51:41.0000] <Domenic>
sure it does

[08:51:47.0000] <Domenic>
just place the ocntent there and replace it when hte script runs

[08:51:54.0000] <wycats>
the main characteristic of sync script is that the sync script blocks the world

[08:52:01.0000] <Domenic>
that... is not how scripts work

[08:52:07.0000] <Domenic>
they block parsing, not the world

[08:52:36.0000] <wycats>
Domenic: by "the world", what I mean is that no further content can be put on the page

[08:53:05.0000] <wycats>
Domenic: maybe we're talking past each other

[08:53:17.0000] <Domenic>
so yours allows placing the fallback content spatially after the <import> in the source document; but with <scirpt> you just place it spatially before

[08:53:59.0000] <wycats>
Domenic: yes, and then you're responsible for removing it, AND you cannot put anything else on the page once you hit an area of HTML that requires custom elements

[08:54:11.0000] <wycats>
Domenic: I'm pretty sure we're not talking about the same thing

[08:54:28.0000] <wycats>
what I'm suggesting encapsulates the "blocking" to an area of HTML

[08:54:41.0000] <wycats>
it does not block ALL subsequent parsing

[08:55:07.0000] <wycats>
and the thing is: you usually want loading behavior to be coarser than targeting individual unknown elements with CSS

[08:57:29.0000] <annevk>
Domenic: <script> blocks the main thread, no?

[08:58:06.0000] <Domenic>
annevk: I don't think so. E.g. if you do <script>setTimeout(fn);</script><script src="takes-a-long-time-to-load.js"></script> I am pretty sure fn runs after ~0 ms, not after the load.

[08:58:40.0000] <annevk>
Domenic: sure, but anything after <script> won't show

[08:58:53.0000] <Domenic>
annevk: right that's what I mean by blocking parsing but not the main thread

[08:59:58.0000] <annevk>
Domenic: from what I understood from the <import> idea the parser would just keep going constructing the DOM

[09:00:02.0000] <annevk>
Domenic: you'd get a placeholder of sorts

[09:00:20.0000] <wycats>
annevk: yes, for the container containing the <import>s

[09:00:25.0000] <wycats>
but not for anything subsequent

[09:01:45.0000] <wycats>
and the placeholder could be user-supplied fallback content, like a coarse-grained loader spinner

[09:11:18.0000] <wycats>
it's pretty analogous to how the notional <module> will work

[09:11:22.0000] <wycats>
but for HTML instead of script

[09:37:52.0000] <annevk>
wycats: given that you still need one of the upgrading mechanisms from the wiki page, wouldn't it make sense to pick one from those? Or do you think this proposal would influence the decision? (In which case my advice would be to write up the basic processing model and post it someplace...)

[09:39:17.0000] <wycats>
I think it would influence it because it eliminates user-visible unknown elements in these cases

[09:39:44.0000] <wycats>
Which I think is a weakness in the other async proposals

[09:41:07.0000] <wycats>
annevk: in other words, DOM replacement may work just fine because there's no space for someone to qSA and grab onto the wrong element

[09:41:39.0000] <Domenic>
if it's not observable you could choose any of the alternatives

[09:41:54.0000] <Domenic>
DOM replacement would still fire observable mutation observer callbacks though

[09:42:07.0000] <annevk>
wycats: what kind of DOM replacement is this?

[09:42:19.0000] <annevk>
wycats: the original node is not an actual element?

[09:47:08.0000] <annevk>
http://www.fastcompany.com/3037803/the-oral-history-of-the-poop-emoji-or-how-google-brought-poop-to-america "I used some external power. I went to the product manager of Gmail, who manages everything about Gmail, and got [him to agree] that this is the most useful emoji."

[09:51:59.0000] <wycats>
Domenic: no

[09:52:10.0000] <wycats>
Domenic: let me try to be precise

[09:52:30.0000] <wycats>
it sounds like there is some consternation about *actually* running user code during the time period of parsing

[09:52:39.0000] <wycats>
I can understand that

[09:52:53.0000] <wycats>
so what I'm proposing is a second pass that replaces the dummy nodes inserted *in the algorithm* with new nodes

[09:53:12.0000] <wycats>
but no mutation observers would fire and the entire process would be purely in-algorithm

[09:53:59.0000] <Domenic>
is this observably different from blocking the parse (for that subtree) as you run the constructors

[09:54:35.0000] <Domenic>
it seems like it is because nextSibling would be null in blocking the parse but would be a dummy node in your version

[09:55:02.0000] <Domenic>
which is bad because the observable dummy node would be replaced by a custom element but no mutation observers would fire

[09:56:04.0000] <wycats>
Domenic: I personally would prefer if user-code worked just like platform code (and constructors run inline) but that seems to be a no-go

[09:56:26.0000] <wycats>
Domenic: why would nextSibling be the dummy node in my version?

[09:56:32.0000] <wycats>
you would run the constructor before doing the replacement

[09:56:41.0000] <Domenic>
yes but you've only replaced one of them

[09:56:48.0000] <Domenic>
oh i see

[09:56:58.0000] <Domenic>
it's not even in the DOM when the constructor is run

[09:57:20.0000] <Domenic>
Same problem with attachedCallback thoug

[09:57:39.0000] <Domenic>
user-code can work just like platform-code in the Dmitry version, as I outlined

[09:58:54.0000] <wycats>
Domenic: say more about attachedCallback?

[09:59:19.0000] <Domenic>
<my-el1></my-el1><my-el2></my-el2>

[09:59:22.0000] <wycats>
wouldn't you wait to run those callbacks until all nodes were replaced?

[09:59:36.0000] <wycats>
basically try to make the observable semantics equivalent to inline constructors

[09:59:42.0000] <Domenic>
the definition of attachedCallback is that it runs when inserting

[09:59:53.0000] <Domenic>
if you change that I guess you can avoid observing it

[10:00:04.0000] <wycats>
there is no other user code that runs

[10:00:14.0000] <wycats>
surely the only real requirement is that it runs after inserting and before any other user code?

[10:00:30.0000] <Domenic>
yes but they have to run in order

[10:01:07.0000] <wycats>
right. I guess what I'm saying is that we make the semantics "execute constructors inline" and that this is a strategy implementations can use that is equivalent to those semantics

[10:01:21.0000] <wycats>
that won't pwn their existing code

[10:01:28.0000] <Domenic>
Ah so the Jonas solution.

[10:02:23.0000] <wycats>
I don't see it in annevk's list

[10:02:25.0000] <wycats>
or do I

[10:02:32.0000] <Domenic>
Hmm yeah I don't think it's linked

[10:02:49.0000] <annevk>
shit yeah, that needs to be added

[10:03:06.0000] <annevk>
The almost-synchronous constructor

[10:03:24.0000] <annevk>
wycats: for now, see https://lists.w3.org/Archives/Public/public-webapps/2014JanMar/0098.html

[10:03:30.0000] <Domenic>
wycats: "in a modules world" is a bad way to lead an argument :-/

[10:04:05.0000] <Domenic>
if we have learned anyhting over the last two years it's that you can't block a feature on modules eventually shipping

[10:04:06.0000] <wycats>
Domenic: we think modules aren't going to be the dominant way people write JS in 5 years?

[10:04:19.0000] <wycats>
hm

[10:04:26.0000] <wycats>
I didn't realize I was suggesting that we block something

[10:04:30.0000] <wycats>
maybe I missed something subtle?

[10:05:00.0000] <Domenic>
you weren't suggesting it outright, but the implication that your suggestion works better in a modules world makes it easy to immediately dismiss your suggestion

[10:05:14.0000] <Domenic>
would be better to just work in the world we have and use `Element.ready` instead of `ready`

[10:05:16.0000] <wycats>
Domenic: annevk: ha! The Jonas solution is almost 1:1 with the way Ember handles components!

[10:05:31.0000] <wycats>
sure

[10:05:41.0000] <wycats>
Domenic: that makes sense

[10:05:46.0000] <wycats>
[Element.ready] works fine too

[10:05:52.0000] <wycats>
and is hardly longer than readyCallback

[10:06:05.0000] <Domenic>
yeah I am coming around to the symbols

[10:06:08.0000] <wycats>
do you want to reply with that or should I follow-up and say you suggested it?

[10:06:21.0000] <Domenic>
I can do it

[10:06:42.0000] <wycats>
Domenic: As a framework author, I'm loathe to be as dismissive of the future issues

[10:07:07.0000] <wycats>
symbols let you be really short and declarative about what you're doing, at the cost of slightly more boilerplate around the symbol

[10:07:21.0000] <wycats>
strings make you have to worry about all other ecosystem users

[10:07:26.0000] <wycats>
See A.p.contains :P

[10:07:40.0000] <wycats>
s/declarative/clear/

[10:10:42.0000] <annevk>
wycats: would you suggest symbols for everything though? If we add a new property to an element?

[10:10:46.0000] <annevk>
wycats: or just hooks?

[10:11:03.0000] <wycats>
annevk: just hooks

[10:11:07.0000] <annevk>
good

[10:11:09.0000] <Domenic>
hmm why

[10:11:27.0000] <Domenic>
i don't want to add symbols for everything but i don't see why the argument doesn't apply

[10:11:30.0000] <wycats>
Domenic: hm... mostly experience with Ember but I should try to quantify

[10:12:21.0000] <annevk>
Domenic: so the concern would be that a subclass of <img> adds .exif and then the browser can no longer add it? Or the browser adds it and breaks the subclass? Meh

[10:12:34.0000] <wycats>
right... those issues seem minor

[10:12:37.0000] <wycats>
compared to hooks

[10:12:42.0000] <wycats>
where you could be invoking random code

[10:12:47.0000] <wycats>
that didn't expect to be invoked

[10:12:54.0000] <Domenic>
that makes sense

[10:13:08.0000] <wycats>
Domenic: it's similar to how we can get away with new globals

[10:13:13.0000] <wycats>
because worst-case things get shadowed

[10:14:21.0000] <wycats>
Domenic: Polymer decided not to use *Callback it seems

[10:14:34.0000] <wycats>
they removed all of the `Callback` suffixes :P

[10:14:53.0000] <wycats>
http://note.io/1ygHes0

[10:15:01.0000] <Domenic>
I don't really know the details but I think polymer element definitions don't correspond to the CE prototype exactly

[10:15:07.0000] <wycats>
right

[10:15:12.0000] <wycats>
this table has some details

[10:15:30.0000] <Domenic>
lunch, bbl

[10:15:52.0000] <wycats>
Domenic: I think obviously internal DOM properties should be using private state of some stripe

[10:16:05.0000] <annevk>
https://wiki.whatwg.org/wiki/CustomElements#Upgrading now has "Jonas"

[10:16:10.0000] <wycats>
(which is a real issue with subclasses in Ember and we're pretty careful with `_` which doesn't help enough)

[10:16:32.0000] <wycats>
annevk: I find it interesting that Ember's approach is similar to Jonas

[10:16:43.0000] <wycats>
we do breadth-first recursive rendering

[10:16:57.0000] <wycats>
and we have an abstraction called "morph"

[10:17:01.0000] <wycats>
which is the bookkeeping

[10:17:06.0000] <wycats>
it uses empty text nodes

[11:37:13.0000] <dglazkov>
Domenic: what was the outcome of this thread? https://lists.w3.org/Archives/Public/public-webapps/2014JulSep/0355.html

[11:41:50.0000] <Domenic>
dglazkov: nothing, nobody cares :(

[11:42:57.0000] <Domenic>
I guess that one was where I learned a few things and cleared up a few of my wrong misconceptions. It eventually fed into https://github.com/domenic/html-as-custom-elements/blob/master/docs/accessibility.md which is more accurate than that thread's OP

[11:46:09.0000] <annevk>
dglazkov: Domenic: I'd be happy to help tackle that, making accessibility work is important

[11:46:19.0000] <Domenic>
\o/

[11:46:36.0000] <Domenic>
Looking forward to a faithful <custom-span>!

[11:48:25.0000] <annevk>
Yeah, I've been focusing on figuring out the new low-level bits now JavaScript is finally in shape, but we should definitely revisit old threads such as that one

[11:49:26.0000] <annevk>
I'm starting to dislike the timezone difference for this project, but I guess it's going well enough

[11:50:28.0000] <Domenic>
I need to wake up earlier, heh

[11:50:38.0000] <Domenic>
Been getting in at 11 this week :-/

[11:52:19.0000] <Domenic>
annevk: there is also a proposal for fixing focus, https://docs.google.com/document/d/1k93Ez6yNSyWQDtGjdJJqTBPmljk9l2WS3JTe5OHHB50/edit, although it is pretty confused right now. (See my comment at the top.)

[12:09:40.0000] <Hixie>
who's in charge of WebIDL these days?

[12:09:59.0000] <TabAtkins>
Still heycam|away

[12:11:22.0000] <Ms2ger>
Hixie, and bz in practice

[12:14:49.0000] <Hixie>
k, thanks

[12:14:52.0000] <Hixie>
/me ccs bz

[12:23:15.0000] <jochen__>
when an event handler for the beforeunload event returns an object where the toString method throws an exception

[12:23:36.0000] <jochen__>
should the browser fire an error event

[12:23:47.0000] <jochen__>
or should it just swallow the exception and continue to unload?

[12:24:36.0000] <Hixie>
/me looks at the spec

[12:24:47.0000] <jochen__>
i can tell you what chrome does

[12:25:04.0000] <jochen__>
if the navigation was triggered from js, it fires the error event, if it was triggered by the user, it crashes

[12:25:56.0000] <Hixie>
well it definitely shouldn't crash. :-)

[12:26:35.0000] <jochen__>
can't we just spec it like that?

[12:26:49.0000] <jochen__>
i'm actually trying to fix it, but i don't know what the right fix would be

[12:27:05.0000] <Hixie>
yeah

[12:27:10.0000] <Hixie>
the specs are very unhelpful here

[12:27:32.0000] <Hixie>
even the most generous reading of HTML, WebIDL, and JS doesn't answer the question

[12:28:11.0000] <jochen__>
so

[12:28:15.0000] <jochen__>
what should i do?

[12:28:15.0000] <Hixie>
not sure how to fix this

[12:28:21.0000] <Hixie>
"If the return value is null, then cancel the event."

[12:28:30.0000] <Hixie>
"Otherwise, If the Event object E is a BeforeUnloadEvent object, and the Event object E's returnValue attribute's value is the empty string, then set the returnValue attribute's value to return value."

[12:29:01.0000] <Hixie>
does that first call valueOf() then toString() ?

[12:29:11.0000] <Hixie>
or valueOf() then toString() on that?

[12:29:25.0000] <Hixie>
or...?

[12:29:32.0000] <Hixie>
oh wait wait

[12:29:39.0000] <Hixie>
i'm looking in the wrong place

[12:29:49.0000] <Hixie>
i should be looking in the handling of callback return values

[12:30:34.0000] <Hixie>
http://heycam.github.io/webidl/#es-invoking-callback-functions

[12:31:07.0000] <Hixie>
"end these steps and allow the exception to propagate"

[12:31:48.0000] <Hixie>
so i should catch the exception in the "event handler processing algorithm"

[12:31:48.0000] <jochen__>
mhm

[12:31:55.0000] <Hixie>
in step 3

[12:32:10.0000] <jochen__>
but where does it propagate to, if script is not running?

[12:32:33.0000] <Hixie>
my algorithm, which then crashes with an uncaught exception

[12:32:38.0000] <Hixie>
so technically chrome is matching the spec

[12:32:39.0000] <Hixie>
:-P

[12:32:50.0000] <Hixie>
for DOM event dispatch, the dom spec says "If this throws any exception, report the exception."

[12:32:56.0000] <Hixie>
i just need to add that sentence to HTML

[12:33:10.0000] <Hixie>
well actually

[12:33:11.0000] <Hixie>
no!

[12:33:15.0000] <Hixie>
this is well defined after all!

[12:33:20.0000] <Hixie>
(well not really but arguably)

[12:33:41.0000] <Hixie>
my algorithm gets the exception, aborting it (that's poorly defined but matches exception semantics)

[12:33:47.0000] <Hixie>
then it gets back to the DOM algorithm

[12:33:50.0000] <Hixie>
which reports the exception

[12:34:06.0000] <Hixie>
so to answer your question: it should fire an error event

[12:35:03.0000] <jochen__>
k

[12:35:06.0000] <jochen__>
sounds like a plan :)

[12:35:09.0000] <jochen__>
thx

[12:37:32.0000] <Hixie>
i'll make HTML clearer about this

[12:44:35.0000] <Hixie>
hrm, webidl doesn't actually give a hook for calling callbacks

[12:44:42.0000] <Hixie>
that seems like an omission of note...

[13:20:10.0000] <Hixie>
what do i replace DOMStringList with, if I have to spec an API that uses DOMStringList?

[13:20:26.0000] <Hixie>
uses in implementations, i mean

[13:20:42.0000] <TabAtkins>
It returns a list of DOMStrings? Is it live?

[13:41:17.0000] <Hixie>
TabAtkins: ancestorOrigins. Can't be changed, so not really live.

[13:41:49.0000] <TabAtkins>
Oh, is this an attribute on something?

[13:42:10.0000] <Hixie>
Location.ancestorOrigins

[13:42:16.0000] <Hixie>
returns the origins of the ancestor frames

[13:42:39.0000] <TabAtkins>
Bah.  WebIDL still doesn't allow using a sequence<> in attributes (but also still doesn't provide any other option).

[13:43:03.0000] <Hixie>
what is api-compatible with DOMStringList? anything?

[13:44:07.0000] <TabAtkins>
Aside from .item(), Array is compatible.

[13:44:14.0000] <TabAtkins>
(It now has a .contains() method.)

[13:44:39.0000] <Hixie>
maybe i just return an Array

[13:44:45.0000] <Ms2ger>
 .includes(), actually

[13:44:52.0000] <Ms2ger>
.contains() is dead

[13:45:21.0000] <TabAtkins>
Ms2ger: Ugh, MDN is out of date, then.

[13:45:34.0000] <TabAtkins>
Hixie: You can't return an array in an attribute.

[13:45:35.0000] <Ms2ger>
May well be

[13:45:40.0000] <Ms2ger>
/me looks

[13:45:41.0000] <TabAtkins>
At least, not through WebIDL.

[13:45:49.0000] <Hixie>
why not?

[13:45:55.0000] <TabAtkins>
Because it's not possible.

[13:46:09.0000] <Hixie>
readonly attribute object foo;

[13:46:24.0000] <TabAtkins>
That's not enough. It doesn't protect the array from being changed.

[13:46:31.0000] <TabAtkins>
It just means you can't *replace* the array.

[13:46:36.0000] <Ms2ger>
Wuh

[13:46:43.0000] <Ms2ger>
<TabAtkins> Hixie: You can't return an array in an attribute.

[13:46:46.0000] <Ms2ger>
Sure you can

[13:46:50.0000] <Hixie>
you just return a readonly array

[13:46:51.0000] <TabAtkins>
readonly just means there's only a getter, not a setter.

[13:46:59.0000] <TabAtkins>
The array is still mutable.

[13:47:09.0000] <Hixie>
not if you say it's not...

[13:47:25.0000] <TabAtkins>
There's no way to indicate otherwise in WebIDL.

[13:47:29.0000] <Ms2ger>
Are we talking Array or T[]?

[13:47:39.0000] <TabAtkins>
T[] isn't an Array at all.

[13:47:59.0000] <Ms2ger>
It's called one

[13:48:13.0000] <Ms2ger>
Well, not Array, but array

[13:48:18.0000] <TabAtkins>
Ms2ger: It's possible that i'm still totally turned around by the sequence<T>/T[]/Array mess that IDL is full of.

[13:48:26.0000] <Hixie>
the prototype of a T[] is Array

[13:48:30.0000] <Ms2ger>
Anyway, T[] is dead

[13:48:31.0000] <Hixie>
so it seems pretty arrayy to me

[13:48:48.0000] <Hixie>
there's a bunch of places in HTML where i return read-only arrays iirc

[13:48:54.0000] <Hixie>
in any case i don't really care what i return

[13:49:00.0000] <Hixie>
just need to know what it should be

[13:49:41.0000] <Hixie>
in what sense is T[] dead?

[13:49:57.0000] <Hixie>
http://heycam.github.io/webidl/#es-array seems to describe them in detail

[13:50:03.0000] <TabAtkins>
In that no APIs should use them.

[13:50:24.0000] <Ms2ger>
In that heycam|away should edit the spec

[13:50:28.0000] <TabAtkins>
They're not Arrays, they're magical platform objects with Array on their prototype.

[13:50:42.0000] <Hixie>
sounds good to me

[13:52:46.0000] <Domenic>
the plan is to have FrozenArray<T> or something

[13:53:04.0000] <Domenic>
heycam|away says that's his next priority IIRC

[13:53:06.0000] <Hixie>
ugh i hate frozen stuff

[13:53:14.0000] <Hixie>
it doesn't let you add custom properties

[13:54:30.0000] <Hixie>
in any case it looks like my choices are: a) revive DOMStringList and exactly match Chrome's implementation; b) use the deprecated read only array DOMString[] platform array object; c) punt even longer

[14:05:51.0000] <Hixie>
looks like other uses of DOMStringList got turned into DOMString[]

[14:06:02.0000] <Hixie>
so i'll go with that for now

[14:10:21.0000] <Hixie>
anyone got an IDN site that uses arrays handy?

[14:10:23.0000] <Hixie>
er

[14:10:25.0000] <Hixie>
that uses iframes, even

[14:34:39.0000] <heycam>
yes I should just get around and do that

[14:46:30.0000] <TabAtkins>
heycam: If I can get off my ass and finally write the @extend spec, you can fix up that part of WebIDL. ^_^

[14:46:48.0000] <TabAtkins>
Also: figure out how I can do the same with dicts, plzkthx.


2015-01-16
[01:29:10.0000] <annevk_>
http://sockpuppet.org/blog/2015/01/15/against-dnssec/ "The Internet loses nothing if it declares a TKO on DNSSEC and starts fresh. There are better DNS security proposals circulating already. They tend to start at the browser and work their way back to the roots. Support those proposals, and keep DNSSEC code off your servers."

[01:29:32.0000] <annevk>
However, if you tell that to the IETF they'll puke at the word browser and stop listening...

[02:37:24.0000] <MikeSmit1>
annevk: so we just replace the word "browser" with the word "user" there

[02:37:45.0000] <MikeSmit1>
And it's still the same point

[02:40:19.0000] <annevk>
MikeSmit1: I would be surprised if they give up on DNSSEC anytime soon

[02:40:40.0000] <annevk>
MikeSmit1: though with both IDNA and DNS management IETF hasn't really shined

[02:41:52.0000] <annevk>
MikeSmit1: or IPv6...

[02:42:15.0000] <annevk>
HTTP/2 is the only thing I can think of that's quite exciting

[03:03:55.0000] <gsnedders>
annevk: wait, what should IETF have done wrt IPv6 and IPv4 address space exhaustion?

[03:04:43.0000] <annevk>
It's not a matter of what, it's that the rollout isn't going very well

[03:05:17.0000] <gsnedders>
Well, yes. But how could the IETF have shined? I don't see anything they could've done to make that go quicker?

[03:06:18.0000] <annevk>
I forgot the specifics, but from what I remember there's various parts that could've been done better

[03:08:54.0000] <gsnedders>
Most of what's hurt the rollout for most of the time is it's taken a long while to get hardware support for IPv6 in routers, and then the consumer routers where the problem is now is simply cost-cutting to the extreme by ISPs…

[03:09:15.0000] <gsnedders>
Yes, IPv6 could be better in some ways. But I don't think it'd have had an appreciable difference in the rollout.

[03:26:25.0000] <MikeSmit1>
https://mobile.twitter.com/sideshowbarker/status/520358150583508992

[03:26:35.0000] <MikeSmit1>
http://blog.bimajority.org/2014/09/05/the-network-nightmare-that-ate-my-week/

[03:27:20.0000] <MikeSmit1>
but yeah we really do need IPV6

[03:27:29.0000] <MikeSmit1>
so it's a shame

[03:29:31.0000] <MikeSmit1>
"We have seen Windows machines with more than 300 IPv6 addresses — which, recall, means that every 150 seconds they will be transmitting 30 multicast packets per second which have to be flooded through the network."

[03:30:55.0000] <MikeSmith>
IPv6 "privacy" addresses

[03:34:29.0000] <MikeSmith>
annevk: anyway about your earlier comment, we really should just all start using some code word for "browsers", like "user-facing web clients"

[03:35:27.0000] <MikeSmith>
or Facing-to User Clients

[03:35:37.0000] <MikeSmith>
FUCs

[03:36:12.0000] <MikeSmith>
in discussions with IETFers

[03:38:48.0000] <MikeSmith>
seriously the biggest thing that distinguishes browsers from the myriad of other kinds of web clients that the IETFers always like to drag into every discussion is that browsers are user-facing, and used by billions of real people

[03:41:20.0000] <gsnedders>
I'M A PERSON NOT A MACHINE.

[03:42:34.0000] <MikeSmith>
(the myriads of other kinds of web clients that supposedly exist, according to them, and that the rest of us need to consider even though they almost never give concrete examples)

[03:57:43.0000] <jgraham>
Is there some common name for the combination (method, url)?

[03:58:10.0000] <jgraham>
When describing a HTTP API

[04:02:22.0000] <gsnedders>
I've seen request-line used occasionally for that, but nothing else.

[04:03:18.0000] <jgraham>
/me considers going with "endpoint"

[04:03:42.0000] <annevk>
MikeSmith: yeah, that's one of the articles

[04:04:02.0000] <annevk>
MikeSmith: thanks

[04:04:33.0000] <annevk>
jgraham: endpoint is the URL

[04:06:45.0000] <zcorpan>
jgraham: methurl

[04:10:57.0000] <jgraham>
annevk: citation needed

[04:14:05.0000] <annevk>
jgraham: just search? E.g. http://camel.apache.org/endpoint.html

[04:14:42.0000] <jgraham>
I did search and found WSDL which was a) incomprehensible and b) somewhat suggestive that it didn't mean that

[04:54:34.0000] <hemanth>
/me talking about ES6 generators http://youtu.be/ZrgEZykBHVo :0)

[05:08:33.0000] <hemanth>
annevk, caitp, Domenic_ seeking your comments on http://youtu.be/ZrgEZykBHVo thanks :o)

[05:09:28.0000] <annevk>
jgraham: I've always read HTTP API endpoint as URL, but might just be me

[05:25:53.0000] <gsnedders>
I agree with annevk about endpoint, fwiw.

[05:48:15.0000] <annevk>
Domenic_: so the question for ARIA is really whether elements should have access to a private ARIA API to set an initial role (and aria-* attributes?)

[05:49:25.0000] <annevk>
Domenic_: enabling something like that probably makes sense, I don't think we want to allow overriding e.g. <hr> (unless you create an actual subclass, once we figure out how that should work)

[06:32:56.0000] <annevk>
tobie: can't +1 that email enough

[06:35:55.0000] <tobie>
annevk: wish your +1s would drive change; Unfortunately not holding my breath.

[06:40:39.0000] <scott_gonzalez>
Are dialogs supposed to have forced overflow containment?

[06:40:50.0000] <scott_gonzalez>
http://jsbin.com/pofemovupo/1/

[06:42:31.0000] <scott_gonzalez>
I didn't see anything in the spec about this and dev tools don't show any styles being applied by the user agent stylesheet that should cause this, as far as I can tell.

[06:42:44.0000] <scott_gonzalez>
I'm testing in Chrome, since I believe that's the only browser that supports <dialog> right now.

[06:44:34.0000] <annevk>
tobie: yeah...

[06:46:08.0000] <tobie>
:(

[06:46:15.0000] <annevk>
scott_gonzalez: did you study the rendering section?

[06:47:14.0000] <scott_gonzalez>
I didn't see anything about this relating to dialogs.

[06:47:31.0000] <annevk>
scott_gonzalez: there's default styling there for dialog elements

[06:47:42.0000] <annevk>
scott_gonzalez: dialog elements also create a top layer, which is explained in https://fullscreen.spec.whatwg.org/#top-layer

[06:47:43.0000] <scott_gonzalez>
Yeah, I see that, but I don't see anything that would contain the content.

[06:48:21.0000] <annevk>
Chrome may have bugs in that though, they have for Fullscreen and since they use the same mechanism...

[06:48:45.0000] <scott_gonzalez>
That's why I'm trying to find out if this is expected behavior.

[06:49:55.0000] <scott_gonzalez>
This surprised us (the jQuery UI team) when tooltips were applied to a native dialog.

[06:50:03.0000] <Domenic_>
annevk: : largely yes. States/properties need to change over time. In Chrome at least role is set at inserted-into-document time.

[06:50:04.0000] <annevk>
scott_gonzalez: okay, so what do you mean by overflow containment? What I'm seeing looks okay

[06:50:33.0000] <annevk>
scott_gonzalez: note that a top layer has this for position: "If its position property computes to fixed, its containing block is the viewport, and the initial containing block otherwise."

[06:50:52.0000] <Domenic_>
annevk: we'd also need to expand ARIA's vocabulary a decent bit.

[06:51:19.0000] <scott_gonzalez>
annevk: Refresh that page. I added a native tooltip to the custom tooltip.

[06:51:32.0000] <annevk>
Domenic_: makes sense, I don't really understand why ARIA is not a straight mapping of the available APIs but is instead described on some RDF-like thingie

[06:51:37.0000] <scott_gonzalez>
annevk: Notice how the native tooltip isn't contrained by the bounding box of the dialog.

[06:51:52.0000] <scott_gonzalez>
annevk: I was expecting the same from the custom tooltip since it's absolutely positioned.

[06:52:08.0000] <Domenic_>
annevk: I presume platform independence, although I don't know the history.

[06:52:40.0000] <annevk>
scott_gonzalez: isn't shrink-wrapping normal when you position something absolute that has no width?

[06:52:59.0000] <annevk>
scott_gonzalez: you'd need to add something like width:intrinsic, no?

[06:53:24.0000] <Domenic_>
annevk: it would be a good approach to look at what the intersection of accessibility APIs looks like though across platforms. Programmatic APIs instead of markup, that is.

[06:53:33.0000] <annevk>
Domenic_: well that bit makes sense, but there's a lot of voodoo going on

[06:53:54.0000] <annevk>
Domenic_: I think Steve might have done that already, or someone at least

[06:54:08.0000] <annevk>
Domenic_: there's an ARIA to accessibility layer mapping document somewhere

[06:54:25.0000] <scott_gonzalez>
annevk: The question is why is the dialog used to determine where the content wraps?

[06:54:47.0000] <scott_gonzalez>
annevk: `width: intrinsic` on #tooltip doesn't help.

[06:54:49.0000] <annevk>
scott_gonzalez: see top layer

[06:55:26.0000] <annevk>
scott_gonzalez: I explained that above

[06:55:49.0000] <annevk>
scott_gonzalez: perhaps Chrome does not support that, but if I set a width of 400px on #tooltip it works

[06:56:05.0000] <scott_gonzalez>
Sure, but that's not how native tooltips work.

[06:57:30.0000] <annevk>
scott_gonzalez: apparently there's new keywords but they're not supported: dev.w3.org/csswg/css-sizing-3/#width-height-keywords

[06:57:46.0000] <annevk>
scott_gonzalez: sure, but native tooltips are not implemented through absolute positioning either...

[06:58:22.0000] <scott_gonzalez>
annevk: Ok, let me state this another way. The top layer handling of dialogs has broken the behavior of jQuery UI tooltips.

[06:58:40.0000] <scott_gonzalez>
annevk: It sounds like you're saying right now there's no way to fix that.

[07:03:01.0000] <annevk>
scott_gonzalez: I recommend posting to either www-style or whatwg or both and asking

[07:03:13.0000] <scott_gonzalez>
annevk: Ok. Thanks.

[07:03:32.0000] <annevk>
scott_gonzalez: I'm not an expert on <dialog>, I just know how to read specs :-)

[07:05:36.0000] <annevk>
/me wonders where hemanth went

[07:54:43.0000] <Domenic_>
annevk: so I was thinking about the ARIA/overriding <hr> stuff a bit, and it reminded me one reason why callbacks are copied in on definition time

[07:55:16.0000] <Domenic_>
which is that e.g. if you overrode HTMLHRElement.prototype.attachedCallback, in theory that would give you an (almost-sync) callback every time a HR element is inserted into the DOM

[07:55:24.0000] <Domenic_>
or worse, just HTMLElement.prototype.attachedCallback

[07:55:53.0000] <Domenic_>
The "copying" idea is similar to saying "at start-up time, the browser grabs the value of HTMLHRElement.prototype.attachedCallback, and saves it, and calls the saved value when it inserts <hr>s"

[07:56:11.0000] <Domenic_>
similar to "at start up time, the browser grabs the value of window.Number, and saves it, and calls the saved value when it converts values to numbers"

[07:56:50.0000] <Domenic_>
The punch line being, I think a similar thing could work for ARIA callbacks (and focus, see recent conversations at https://docs.google.com/document/d/1k93Ez6yNSyWQDtGjdJJqTBPmljk9l2WS3JTe5OHHB50/edit )

[07:57:22.0000] <annevk>
Domenic_: how does that help custom elements though?

[07:57:47.0000] <annevk>
Domenic_: oh, we'd still expose some API to custom elements for having non-overrideable roles?

[07:58:07.0000] <Domenic_>
So you could let custom elements define e.g. implicitAriaLabel() and strongAriaRole() or implicitAriaRole() just like they define attachedCallback()

[07:58:18.0000] <Domenic_>
And you'd put those same methods on HTMLHRElement

[07:58:33.0000] <Domenic_>
but you'd have no problem saying "if you override HTMLHRElement.prototype.strongAriaRole(), we're going to ignore it."

[07:58:57.0000] <Domenic_>
same as if you change MyCustomEl.prototype.attachedCallback after registration time, we ignore it

[07:59:22.0000] <Domenic_>
They stick around on the prototype because they're still relatively useful (for subclasses to call, or in other scenarios) but the original value is saved away

[08:02:45.0000] <Domenic_>
It's similar to saying, "HTMLHRElement.prototype.align is a getter that returns `this.getAttribute("align")`, but it makes sure to use the saved value of HTMLElement.prototype.getAttribute instead of just calling it directly."

[08:02:52.0000] <Domenic_>
I should write all this up

[08:13:15.0000] <caitp>
hemanth: re the promise talk, have you watched jafar husain's talks on it? he's pretty good at conveying the message of es6/7/etc control patterns

[08:14:05.0000] <annevk>
Domenic_: yes I see now

[08:14:18.0000] <annevk>
Domenic_: could they not just be data properties in that case?

[08:14:24.0000] <annevk>
Domenic_: a role is just a string after all

[08:16:48.0000] <annevk>
Domenic_: also, did you see all the email? I think we should at least explore "Jonas" a bit more before we go with "Dmitry"

[08:17:29.0000] <Ms2ger>
Planning your dates, huh

[08:18:34.0000] <annevk>
We named the Upgrade alternatives after those who came up with them, see the wiki

[08:24:32.0000] <Domenic_>
annevk: role changes, e.g. <a> vs. <a href>

[08:25:36.0000] <annevk>
c

[08:25:39.0000] <Domenic_>
annevk: yeah saw the email. Willing to explore Jonas, certainly.

[08:25:42.0000] <SteveF_>
annevk: Domenic: HTML Accessibility API Mappings 1.1 http://rawgit.com/w3c/aria/master/html-aam/html-aam.html may be helpful

[08:26:17.0000] <Domenic_>
SteveF_: yeah, I'm also curious about what the actual a11y *APIs* look like on various platforms, not just the strings involved...

[08:27:18.0000] <annevk>
Domenic_: 4.3.2 has that, no?

[08:27:30.0000] <SteveF_>
Domenic: http://rawgit.com/w3c/aria/master/html-aam/html-aam.html#dfn-accessibility-api links to acc apis

[08:27:40.0000] <annevk>
Domenic_: oh you mean how the roles get conveyed?

[08:27:49.0000] <Domenic_>
SteveF_: perfect, never found that section before

[08:27:57.0000] <Domenic_>
annevk: yeah I mean the actual OS function calls I am curious about

[08:28:01.0000] <Hixie>
scott_gonzalez: the default styles for <details> are intentionally pretty minimal

[08:28:14.0000] <Hixie>
scott_gonzalez: but if there's something dumb that we overlooked we can definitely add more

[08:28:24.0000] <Hixie>
scott_gonzalez: mail whatwg@ or file a bug (whatwg.org/newbug) or something

[08:28:24.0000] <Domenic_>
For example http://msdn.microsoft.com/en-us/library/ms697291%28v=vs.85%29.aspx is interesting

[08:35:31.0000] <annevk>
Domenic_: also, for element-constructors, I was thinking of creating a pull request to add an SVG example

[08:35:46.0000] <annevk>
Domenic_: people asked about it on Twitter, makes sense to cover it

[08:36:46.0000] <annevk>
Domenic_: but yeah, main thing I wanted to ask is how we could best evaluate the different Upgrade strategies to get everyone on the same page so we can move on with Apple on board

[09:21:03.0000] <Domenic_>
annevk: yeah, would be good to do SVG as well, I agree. Should probably end up parallel to HTMLElement but I might be missing some stuff.

[09:22:52.0000] <Domenic_>
annevk: the biggest issue with "Jonas" I see is it doesn't cover upgrades. Which I think are important because async modules. You end up needing a second story for upgrades.

[09:23:36.0000] <Domenic_>
annevk: quoting from his post, "While parsing, when you hit a custom element (with a constructor)" the point of the upgrade case is when you don't have a constructor when parsing, but a few seconds later you do

[09:24:38.0000] <annevk>
Domenic_: the question is whether upgrades need to be coupled

[09:24:50.0000] <Domenic_>
say more?

[09:25:30.0000] <annevk>
Domenic_: we could ship almost-synchronous now and have the upgrade bit be polyfilled until something like "HTML modules" emerges

[09:26:00.0000] <annevk>
Domenic_: which might very well emerge based on experimenting with JS modules, the loader API, and all the other new goodness over there

[09:26:30.0000] <Domenic_>
so you are saying that almost-synchronous is really almost-synchronous + dummy-replacement?

[09:26:40.0000] <annevk>
Domenic_: or e.g. you async load your JS module and a blob of HTML

[09:26:52.0000] <annevk>
Domenic_: then once the JS module is ready you parse the blob of HTML

[09:27:13.0000] <Domenic_>
Yes, if you don't want to write your HTML in .html files, upgrading is not needed, I agree.

[09:27:16.0000] <annevk>
Domenic_: I'm saying it's almost-synchronous + something in v2

[09:27:36.0000] <Domenic_>
It feels like we should have all the information now to nail down what "something" is

[09:28:00.0000] <annevk>
Domenic_: I think wycats is correct that :unresolved is a poor mans fallback

[09:28:39.0000] <annevk>
Domenic_: and that typically you want to include a rather large set of custom elements (name it a module...)

[09:29:22.0000] <annevk>
Domenic_: and that while that module is loading you want fallback covering it all

[09:29:54.0000] <Domenic_>
That all makes sense. I think we should nail that down though if we want to go that route, instead of saying "we'll figure it out later"

[09:31:17.0000] <Domenic_>
I also think it could be layered on top of Dmitry just as well as it could be layered on top of Jonas though. The benefit of Jonas being that you write `constructor(...args) { super(...args); /* code here */ }` instead of `[Element.create]() { /* code here */ }` is not too compelling to me. (But apparently is mandatory for rniwa?)

[09:31:23.0000] <annevk>
Domenic_: it seems hard to nail down ahead of time, with loader not being done and modules not having landed

[09:31:48.0000] <Domenic_>
We know roughly how loaders work and if there are specific features we need from them we can demand them

[09:32:10.0000] <Domenic_>
Better to co-evolve than wait until it's nailed down and find out it doesn't solve our use case

[09:32:27.0000] <annevk>
that is fair

[09:33:23.0000] <Domenic_>
Layering on top of Dmitry instead of on top of Jonas has the benefit that Dmitry gives a no-thinking-required solution for out of the box work. I agree that something along the lines of wycats's solution is going to be nicer for more complex apps though. Unsure what the split is, e.g. could be anywhere from 80/20 to 20/80.

[09:34:32.0000] <annevk>
That seems worth figuring out. I guess I'm going to ask rniwa on list to clarify that only Jonas works for Apple

[09:34:38.0000] <Domenic_>
I do want to be cautious of saying that just because Chrome/Polymer works with something simple-ish (similar to, but worse than, Dmitry) that it is OK for the majority of apps. That isn't proven in my mind.

[09:35:10.0000] <annevk>
If you ask Facebook they'll just say no :-(

[09:35:26.0000] <Domenic_>
Right, that's good feedback to keep in mind

[09:35:40.0000] <Domenic_>
Their concerns IIRC are more around the global namespacing (which wycats' proposal also seems to contain a hint of solving)

[09:35:47.0000] <annevk>
I emailed a bit with React and talked with some folks at Mozilla that are into it; they have very different ideas

[09:35:48.0000] <wycats>
Yes confirm :)

[09:35:54.0000] <wycats>
Interesting

[09:35:57.0000] <Domenic_>
But then again their model is so different (immutable state etc.) that I'm not sure they're even in the room.

[09:36:25.0000] <annevk>
Right, the only use they see for custom elements is for if you want to do things between frameworks

[09:36:34.0000] <annevk>
If you're exclusively React it's not needed

[09:36:54.0000] <Domenic_>
I am curious if people write things in .html files when using React.

[09:36:55.0000] <wycats>
My thinking is largely around how granularly "unrendered" loading UI should be

[09:37:08.0000] <wycats>
Per-element seems OK for google +1 buttons and bad for apps

[09:37:26.0000] <wycats>
Domenic_: they do not

[09:37:32.0000] <annevk>
Domenic_: I believe you write the tree as JS plus constraints which then generates a DOM for view

[09:37:35.0000] <wycats>
They are strongly opposed to the concept of separate HTML

[09:38:01.0000] <Domenic_>
brb, somehow freenode is confused and I can't get rid of this underscore.

[09:38:34.0000] <wycats>
Ember's view is actually interesting here: we treat HTML as a DSL for building DOM but are very careful to obey HTML's semantics

[09:38:52.0000] <wycats>
So we parse the HTML on the server and use createElement and friends

[09:39:08.0000] <Domenic>
(that was easier to fix than I thought it would be. Goodbye underscore.)

[09:39:13.0000] <wycats>
Which means that the way we want to deal with custom elements is actually not even in the parser

[09:39:27.0000] <wycats>
We want createElement to work (which it does of course)

[09:39:44.0000] <wycats>
Our goal is to be largely indistinguishable from what the browser would do

[09:39:58.0000] <wycats>
We're a bit of an implementation in that respect

[09:40:38.0000] <Domenic>
Similar to react though in that people don't write in .html files

[09:40:45.0000] <Domenic>
Honestly I don't like writing in .html files myself

[09:40:55.0000] <Domenic>
But it seems important to support

[09:41:10.0000] <wycats>
https://github.com/tildeio/simple-html-tokenizer

[09:41:51.0000] <annevk>
Domenic: XHTML 2.0!

[09:41:57.0000] <wycats>
Domenic: it's a little different than react

[09:42:14.0000] <Domenic>
wycats: definitely different but in terms of whether it needs upgrading or not, neither do

[09:42:17.0000] <wycats>
We have separate template files that are supposed to be "as if" HTML

[09:42:22.0000] <wycats>
yes 100%

[09:42:49.0000] <wycats>
Domenic: we've been talking a lot about adding {{import}} to top-level templates in Ember

[09:42:55.0000] <wycats>
That's where I got the idea

[09:43:19.0000] <wycats>
There's also a lot of desire for scoped imported elements

[09:43:27.0000] <wycats>
(You mentioned it above)

[09:44:16.0000] <wycats>
So one question is: if the use cases for bare .HTML are things like Facebook like buttons, maybe it's OK to do pure DOM replacement there

[09:44:31.0000] <wycats>
And not worry too much about brain transplants

[09:44:55.0000] <wycats>
But if you're scoped inside of some container, you are saved from both DOM replacement and brain transplants

[09:45:20.0000] <wycats>
(iow apps shouldn't mind the extra scoping... they pretty much already need it anyway)

[09:46:39.0000] <Domenic>
I think the use cases for bare .html are much bigger than that

[09:46:55.0000] <Domenic>
they're for less-ambitious apps that want to use non-native components, given that the components built in to HTML are very limited

[09:47:08.0000] <Domenic>
<tabset>, <google-map>, etc. are all useful even on "brochure" sites

[09:48:15.0000] <wycats>
But surely they can wrap in some element

[09:48:52.0000] <wycats>
I see the situation as somewhat analogous to modules in es6

[09:48:56.0000] <Domenic>
Yes, the ywrap in <html>

[09:49:05.0000] <wycats>
There's a bit more verbosity but it makes everything far more predictable

[09:49:18.0000] <Domenic>
But they want their site to load and then <google-map> to load later.

[09:49:54.0000] <wycats>
Domenic: we could add an async global attr for custom elements?

[09:50:02.0000] <wycats>
async is wrong

[09:50:13.0000] <wycats>
Since everything is non-blocking

[09:51:07.0000] <Domenic>
wycats: the problem is all of this "just works" with Dmitry. Why make it more complicated for people building sites like that, if the only benefit is writing `constructor(...args) { super(...args); /* code here */ }` instead of `[Element.create]() { /* code here */ }`

[09:51:28.0000] <annevk>
Domenic: what does instanceof do with the Dmitry design?

[09:51:46.0000] <Domenic>
annevk: works great, no tricks needed. Since the constructor you pass in is the real constructor.

[09:52:00.0000] <annevk>
Domenic: even for markup-created elements?

[09:52:18.0000] <Domenic>
annevk: yep, because __proto__-munging in that case

[09:52:31.0000] <annevk>
Domenic: wait what? We keep __proto__ munging?

[09:52:36.0000] <wycats>
Domenic: the problem with brain transplants is beyond ^^

[09:52:37.0000] <Domenic>
same reason instanceof works in Chrome today, except today you have to do `instanceof ReturnedC` instad of `instanceof PassInC`

[09:52:52.0000] <annevk>
Domenic: I did not realize that :-(

[09:53:04.0000] <wycats>
I think it's a common case you want a loading spinner not a bunch of elements "popping in"

[09:53:15.0000] <Domenic>
annevk: yes, you are essentially emulating the ES [[Construct]] algorithm which itself does proto-munging

[09:53:27.0000] <annevk>
eww

[09:53:40.0000] <wycats>
It's not so bad ;)

[09:54:15.0000] <wycats>
Domenic: I guess I just think "popping in" UIs are amateur hour

[09:54:33.0000] <wycats>
And I don't think the unknown element pseudo does enough to mitigatr

[09:54:40.0000] <wycats>
You know what I mean?

[09:54:44.0000] <Domenic>
I mean, it's worked for Angular for years

[09:54:48.0000] <wycats>
Nah

[09:54:52.0000] <wycats>
They have ng-cloak

[09:55:01.0000] <dglazkov>
if you don't use the HTML parser (that is, use it only as a bootstrapping device), you don't need upgrades -- this is true, btw.

[09:55:03.0000] <wycats>
Which is semi sort of analogous to what I'm talking about

[09:55:04.0000] <Domenic>
I see the desire for a better solution, but I think we still want it to work out of hte box

[09:55:12.0000] <Domenic>
Yeah, ng-cloak is just a worse version of :unresolved

[09:55:18.0000] <Domenic>
it is one you have to manually insert

[09:55:34.0000] <wycats>
Except it can be applied at a coarser grain

[09:55:37.0000] <dglazkov>
and "UI popping in" is orthogonal to the upgrades.

[09:56:03.0000] <wycats>
It's orthogonal to upgrades but not orthogonal to the loading story

[09:56:06.0000] <wycats>
Which is key here

[09:56:09.0000] <Domenic>
dglazkov: how so exactly orthogonal to the upgrades? What I think of by "UI popping in" is the upgrade from <google-map> = HTMLElement to full-fledge <google-map>

[09:56:37.0000] <wycats>
Domenic: I think it's only orthogonal in a narrow sense

[09:56:54.0000] <dglazkov>
the upgrades are really about consistency of how you deal with avoiding to block HTML parser and yielding

[09:57:40.0000] <Domenic>
Hmm I think of upgrades as answering the question "I wrote <google-map> in my .html file but it took 2 seconds on a slow mobile network to load google-map.js"

[09:57:52.0000] <wycats>
that's pretty related to "popping in"

[09:57:53.0000] <wycats>
yes

[09:57:54.0000] <wycats>
I agree

[09:58:12.0000] <wycats>
Domenic: I think the issue is that for things like <google-map> you definite want async + "pop in"

[09:58:20.0000] <Domenic>
I guess maybe dglazkov

[09:58:23.0000] <wycats>
and if you're careful, you'll use CSS to give it the right size so it doesn't affect layout

[09:58:32.0000] <wycats>
but in apps, where you have 20-30 or even more custom elements

[09:58:40.0000] <wycats>
you really don't want to have to fine-tune ::unresolved per element

[09:58:49.0000] <Domenic>
's point is that there are two upgrade scenarios: one where google-map.js is already loaded, and you want to worry about not blocking the HTML parser to run user code, and one where google-map.js will be loaded in the future.

[09:58:49.0000] <wycats>
you just want to show a spinner, and wait for the elements to load

[09:59:10.0000] <wycats>
yes, I think the former is legitimate but may be easy to mitigate

[09:59:18.0000] <Domenic>
"easy", but yes

[09:59:19.0000] <wycats>
iow, it may be possible to avoid leaking the internals

[09:59:26.0000] <wycats>
I meant to say "easy"

[09:59:28.0000] <wycats>
in quotes :P

[09:59:51.0000] <wycats>
I see that as an important, but less critical aspect of this problem

[10:00:14.0000] <wycats>
I understand why it's important to work out, but I think the "correct answer" will be driven by the other half of the problem

[10:00:18.0000] <dglazkov>
the reason I view these as orthogonal, because this is something you need to solve with our without custom elements or upgrades

[10:00:28.0000] <Domenic>
+1

[10:00:34.0000] <Domenic>
this is really a general problem of UI management

[10:00:41.0000] <Domenic>
it is unclear why it should be coupled to custom elements

[10:00:48.0000] <wycats>
Domenic: so an analogy is

[10:00:51.0000] <Domenic>
as opposed to e.g. custom elements giving you a hook, just like any other library

[10:00:59.0000] <Domenic>
maybe :unresolved is not a good enough hook

[10:01:02.0000] <wycats>
before ES6 modules, globals were just totally imperative

[10:01:08.0000] <wycats>
and you just ran code

[10:01:15.0000] <Domenic>
but you probably want a framework for displaying "loading" vs. "ready" content that goes waaaay beyond custom elements

[10:01:17.0000] <wycats>
and had to externally manage the order that things were loaded in

[10:01:21.0000] <wycats>
you could make it work

[10:01:31.0000] <wycats>
but it was very clunky and not quite right

[10:01:40.0000] <wycats>
ES6 modules let you say "this code DEPENDS on this other code"

[10:01:49.0000] <wycats>
"so please go get the other code before you bother trying to execute me"

[10:01:56.0000] <wycats>
and it's a huge ergonomic improvement to the programming model

[10:02:08.0000] <wycats>
even though in theory it was possible to fudge before (using, for example, AMD)

[10:02:19.0000] <wycats>
I'm saying roughly an equivalent problem exists here

[10:02:35.0000] <wycats>
and as in ES6 modules, it's a little more annoying if you're dealing with tiny amounts of code

[10:02:41.0000] <wycats>
but much less annoying if you're dealing with an "app"

[10:03:59.0000] <Domenic>
This kind of ties back to Hixie's declarative dependency stuff IMO

[10:04:06.0000] <wycats>
Domenic: I agree 100%

[10:04:12.0000] <Domenic>
You want a general mechanism of delaying showing some part of the UI until a variety of promises fulfill

[10:04:21.0000] <wycats>
yes

[10:04:28.0000] <wycats>
I think you want to keep it entirely inert, though

[10:04:37.0000] <Domenic>
that sounds better, yes

[10:04:48.0000] <Domenic>
But in general IMO as long as the relevant custom elements stuff exposes the relevant promise then it can tie into this more general framework

[10:04:50.0000] <wycats>
I don't necessarily agree with Hixie's precise proposal, but I agree that at a high-level he's on to something

[10:04:59.0000] <wycats>
Domenic: not necessarily if you want them to be inert

[10:05:12.0000] <Domenic>
So maybe the takeaway here is that you want some kind of promise-returning `document.whenElementRegistered("my-tag")`

[10:05:26.0000] <wycats>
interesting

[10:05:32.0000] <Domenic>
Then maybe later high-level markup syntax like <blahblah inert-until-registered="my-tag my-other-tag">

[10:05:37.0000] <wycats>
yes

[10:05:49.0000] <wycats>
I think that sounds like a good stab

[10:06:16.0000] <wycats>
(I like both attr-based deps and inner-tag based deps because trying to cram multiple imports into an attribute could be crazy)

[10:06:21.0000] <wycats>
(but that's a surface detail)

[10:06:27.0000] <Domenic>
sure yeah

[10:06:35.0000] <wycats>
Domenic: I think Hixie is onto something about this not being just about custom elements

[10:06:49.0000] <Domenic>
dglazkov was the one who drove that home for me ten minutes ago :)

[10:06:54.0000] <wycats>
I think linking it in to ES6 modules is the way to go (I think you've mentioned this in the past)

[10:07:35.0000] <wycats>
so you're importing a Module that maybe exports a default tag or multiple named tags

[10:07:39.0000] <wycats>
something like that

[10:08:12.0000] <Domenic>
yeah that would be nice

[10:08:19.0000] <Domenic>
builds on potentially scoped registrations

[10:08:57.0000] <wycats>
c

[10:10:16.0000] <wycats>
so I think our options for upgrade are:

[10:10:21.0000] <wycats>
1) decide to run constructors synchronously

[10:10:31.0000] <wycats>
2) run constructors asynchronously, but not observably so

[10:10:44.0000] <wycats>
3) brain transplant

[10:10:48.0000] <wycats>
4) DOM replacement

[10:11:10.0000] <Domenic>
1) is not an option for upgrade

[10:11:18.0000] <Domenic>
it is something you could do if you combined with 4)

[10:11:18.0000] <wycats>
5) only update the prototype (this doesn't feel like a real option)

[10:11:24.0000] <wycats>
well...

[10:11:34.0000] <Domenic>
1) is basically saying "no upgrades"

[10:11:37.0000] <wycats>
I'm saying you could decide you don't need upgrade at all if you have the element

[10:11:38.0000] <wycats>
yes

[10:12:37.0000] <Domenic>
bbl lunch

[10:12:43.0000] <wycats>
bbl company offsite :)

[10:36:57.0000] <annevk>
tobie: the whole silo setup also doesn't work the moment you start doing the thing where you let one app talk to the SW of another app

[10:37:14.0000] <annevk>
tobie: because in a world of silos, only the app itself will ever have a SW

[10:37:24.0000] <tobie>
the whole silo setup just doesn't work

[10:37:27.0000] <annevk>
tobie: it's just fundamentally broken

[10:37:31.0000] <annevk>
right :-)

[10:37:32.0000] <tobie>
yes

[10:38:06.0000] <annevk>
this is what we get letting old man like mounir__ be in charge of stuff

[10:38:40.0000] <Ms2ger>
Could be worse

[10:38:46.0000] <Ms2ger>
Could've been marcosc :)

[10:40:59.0000] <mounir>
annevk: who is that mounir__ guy?

[10:41:49.0000] <annevk>
mounir: wouldn't you want to know? :p

[11:10:45.0000] <annevk>
Domenic: wycats: sounds great, hopefully we can flush this out and make it work

[11:10:55.0000] <wycats>
annevk: I'm excited

[11:11:20.0000] <annevk>
Domenic: I continue to be excited by the element constructor project too, I guess I still need to wait a bit with specifying the thing :-)

[11:11:35.0000] <wycats>
we're pretty close with subclassing

[11:12:52.0000] <Domenic>
annevk: :D it is pretty close I think. Also once ES6 classes ship in V8 I will prototype it in jsdom.

[11:24:02.0000] <dglazkov>
just to un-mumble something I said earlier: upgrades are a performance primitive when you have non-blocking script and parser that yields.

[11:25:38.0000] <dglazkov>
with upgrades, the non-blocking script could execute during a yield, register elements, and keep on going. The chunk of html that was parsed previously will upgrade, and the chunk that hasn't yet parsed will start queueing callbacks.

[11:26:47.0000] <dglazkov>
without upgrades, you as a developer are highly incentivized to reduce the amount of html after your non-blocking script, because you need to wait until the doc parsed completely until you can sensibly run the script.

[11:39:21.0000] <wycats>
dglazkov: have you seen my (very syntactically strawman) POV?

[11:39:36.0000] <wycats>
my POV is largely about making it possible to increase the granularity of upgrade

[11:39:50.0000] <wycats>
so you're not upgrading individual elements, but rather chunks of markup

[11:42:45.0000] <dglazkov>
I am open to concrete proposals. It took a while to shake all the kinks out of mine, so I apologize for being weary. It's a human thing.

[12:24:29.0000] <annevk>
dglazkov: I really appreciate how positive you are actually

[12:38:42.0000] <jsbell>
ms2ger: Do I need to do anything more with https://critic.hoppipolla.co.uk/r/3723 at the moment, or is it just waiting for reviewers to have cycles?

[12:39:16.0000] <annevk>
jsbell: yeah, sorry

[12:39:18.0000] <Ms2ger>
jsbell, yeah, just needs review

[12:39:24.0000] <Ms2ger>
jsbell, please badger us :)

[12:39:28.0000] <annevk>
jsbell: you could address the issues I suppose, but mostly it needs more eyes

[12:39:42.0000] <Ms2ger>
annevk, no open issues :)

[12:39:47.0000] <annevk>
ooh

[12:40:01.0000] <jsbell>
:) Just didn't want it to be blocked on me hitting a button or something

[12:40:08.0000] <annevk>
Ms2ger: remind me Monday and I'll just do it, custom elements is making good progress :-)

[12:40:16.0000] <Ms2ger>
annevk, will try :)

[12:42:12.0000] <Ms2ger>
/me just reviewed a -7+7 fixup from last July :/


2015-01-17
[06:50:21.0000] <MikeSmith>
so, the spec for the lazyload attribute has been dropped and the intended intended replacement solution is link with rel=preload and rel=preconnect?

[06:59:01.0000] <annevk>
Domenic: wycats: dherman: https://gist.github.com/annevk/ee2c73152fa6f208f57f

[07:02:48.0000] <hemanth>
Promises @_@

[08:46:45.0000] <wycats>
annevk: yipes

[08:46:54.0000] <wycats>
I'll think about this after I shower

[09:24:05.0000] <annevk>
wycats: just a crazy idea

[09:24:53.0000] <wycats>
My original HTMLBars design had macros :)

[09:25:00.0000] <wycats>
It turned out to not be necessary

[09:36:48.0000] <wycats>
annevk: I should show you how the compiled HTMLBars output looks

[09:38:05.0000] <wycats>
You'd find it interesting

[10:47:39.0000] <wycats>
annevk: http://note.io/1ypYQBQ

[10:47:44.0000] <wycats>
lemme annotate this

[10:50:25.0000] <wycats>
annevk: http://note.io/1ypYQBQ

[10:52:19.0000] <wycats>
the TLDR is that we don't go through the browser's HTML parser ;)

[10:52:41.0000] <wycats>
so we can experiment with different approaches to components pretty easily


2015-01-19
[00:41:16.0000] <Ms2ger>
annevk, <annevk> Ms2ger: remind me Monday and I'll just do it, custom elements is making good progress :-)

[00:41:37.0000] <annevk>
Ms2ger: come on, I'm barely awake

[00:41:51.0000] <annevk>
Ms2ger: but yeah, I'll make some tea and get on that

[00:42:08.0000] <Ms2ger>
No hurry, but you asked to be reminded :)

[00:42:25.0000] <annevk>
Ms2ger: yeah, thanks :-)

[00:44:03.0000] <hemanth>
^_^

[00:45:23.0000] <annevk>
jgraham: could we make it so that "sign in" is "clicked" as some background process?

[01:35:52.0000] <jgraham>
annevk: No

[01:36:38.0000] <jgraham>
annevk: That doesn't work if you don't have a github account or haven't used critic before (you end up on a github login page for some unknown reason)

[01:36:59.0000] <annevk>
jgraham: what if we XHR it?

[01:37:12.0000] <jgraham>
It was the original design and I spent all my time explaining to people that ending up at a github page was expected behaviour

[01:37:43.0000] <annevk>
<iframe>?

[01:39:20.0000] <jgraham>
I guess the problem with that is that a) you won't actually end up logged in until you navigate and b) you don't want to keep sending failed login attempts on every page navigation for non-signed-in users

[01:39:41.0000] <jgraham>
Really the only problem here is that the cookie shouldn't be a session cookie

[01:42:54.0000] <annevk>
jgraham: what's a session cookie?

[01:43:03.0000] <annevk>
jgraham: very low Max-Age?

[01:43:56.0000] <annevk>
Oooh, having neither Expires nor Max-Age

[01:44:10.0000] <annevk>
/me learned about the persistent-flag today

[02:11:36.0000] <hemanth>
any work around to avoid a feedback on local audio streaming with webrtc?

[02:13:32.0000] <hemanth>
for example http://jsfiddle.net/gazq9nwy/ gives a horrible feedback, strangely works well on headphones...did try mediaStream.getAudioStreams()[0].enabled = false; wasn't useful, also tried setting the volume level to 0.7, no use...

[02:18:19.0000] <annevk>
hemanth: might just be your OS being crappy

[02:19:26.0000] <hemanth>
annevk, might be i'm on OSX heh heh

[02:20:10.0000] <hemanth>
https://code.google.com/p/webrtc/source/detail?r=5159 should have fixed it...but not really

[02:21:15.0000] <hemanth>
Darwin Kernel Version 14.0.0 to be specific

[02:29:42.0000] <hemanth>
annevk, there is no feedback on your machine?

[03:24:26.0000] <annevk>
hsivonen: bit unclear whether to add ms932 given the lack of web pressure

[04:04:26.0000] <JakeA>
annevk: What's the best error for "You're not allowed to open a window right now", security or invalidState?

[04:05:07.0000] <Ms2ger>
Why are you not allowed?

[04:09:25.0000] <annevk>
JakeA: TypeError all the things :-)

[04:13:48.0000] <JakeA>
Ms2ger: https://html.spec.whatwg.org/multipage/browsers.html#allowed-to-show-a-popup

[04:14:27.0000] <JakeA>
annevk: What's the rationale there? I mean, with the fetch spec it mean you don't have a DOM dependency

[04:14:31.0000] <Ms2ger>
RangeError :)

[04:14:41.0000] <JakeA>
but this is for a spec that already has a DOM dependency

[04:15:35.0000] <annevk>
JakeA: unless there's a use case for branching I fail to see the point to make an effort

[04:15:58.0000] <annevk>
JakeA: and DOMException doesn't really match what how JavaScript designed exceptions

[04:16:04.0000] <annevk>
s/what//

[04:16:12.0000] <JakeA>
annevk: So why TypeError and not just Error?

[04:16:27.0000] <annevk>
JakeA: that's what awb seems to default to

[04:16:43.0000] <annevk>
JakeA: and sometimes RangeError

[04:17:45.0000] <Ms2ger>
Anyway, I guess I'd InvalidAccess

[04:18:35.0000] <jgraham>
/me feels like if the answer is "TypeError all the things" the question was probably "what sucks about exceptions in js?"

[04:26:51.0000] <caitp>
there are lots of valid answers to that question though

[04:31:22.0000] <annevk>
Ugh, the people suggesting self-signed certificates are fine are many

[05:12:19.0000] <hsivonen>
annevk: yeah, it isn't clear what the right call on the ms932 thing is. you are the editor. :-) However, if the Encoding Standard doesn't add it, it looks pretty clear that Thunderbird will.

[05:13:15.0000] <hsivonen>
annevk: to the extent email deliberately wants to have extra labels, I think not having them everywhere consistently is sad

[05:13:28.0000] <hsivonen>
email having extra encodings like UTF-7 is another story

[05:23:54.0000] <annevk>
hsivonen: it's weird that per https://wiki.whatwg.org/wiki/Web_Encodings#Firefox Firefox never supported that label

[05:24:18.0000] <annevk>
hsivonen: I guess I'll wait a bit and if there's no negative feedback I'll add it

[05:24:37.0000] <annevk>
Also, www-tag...

[05:24:59.0000] <annevk>
More people arguing for OE

[05:25:01.0000] <annevk>
Ugh

[05:32:37.0000] <gsnedders>
hsivonen: time for an Email Encodings spec? :)

[05:40:12.0000] <hsivonen>
annevk: the comments on the Thunderbird bug suggest that we started doing less autodetection and previously it was caught by the detector

[05:40:19.0000] <hsivonen>
annevk: or something

[05:41:04.0000] <hsivonen>
annevk: more labels is better than more autodetection

[05:41:05.0000] <annevk>
hsivonen: perhaps Thunderbird always used the "Universal" detector?

[05:41:26.0000] <hsivonen>
annevk: IIRC that was only when you attached files--not for incoming email

[05:41:40.0000] <hsivonen>
annevk: but yeah, there was that lurking in the code!

[05:42:07.0000] <annevk>
hsivonen: however, adding a label has a problem we've seen before: Content-Type:text/html; charset=shift-jis; \n\n <meta charset=utf-8>

[05:42:31.0000] <hsivonen>
annevk: yeah. I don't know what the right call is

[05:42:49.0000] <annevk>
I'll add a comment to the bug, perhaps someone can supply data

[05:42:49.0000] <hsivonen>
also, I'm not happy about how much time pondering about edge cases like this takes

[05:45:11.0000] <annevk>
hsivonen: yeah, see e.g. blink-dev thread on navigator.vendor

[05:45:44.0000] <annevk>
hsivonen: there's some kind of inverse graph for the core primitives of the platform

[05:46:21.0000] <annevk>
hsivonen: which is probably why infrastructure does not get fixed, but papered over

[05:56:55.0000] <duncanw>
hello all, I write a tool that generates websites, for our japanese users I’ve been trying to figure out how to handle hiragana and katakana characters in the URL path part (i.e. the filename produced by my app), I understand browsers request percent escaped UTF8, and I’m pretty sure there’s a unicode normalization step (which makes sense), but don’t know what it is

[05:57:32.0000] <Ms2ger>
Doesn't url.spec.whatwg.org tell you?

[05:57:34.0000] <annevk>
duncanw: what part of the URL are we talking about?

[05:57:49.0000] <duncanw>
Ms2ger: wouldn’t look like it

[05:57:58.0000] <duncanw>
annevk: the path part

[05:58:06.0000] <annevk>
duncanw: there's no Unicode normalization going on there

[05:58:20.0000] <duncanw>
e.g. http://something.jp/ < japanese glyphs >

[06:00:34.0000] <annevk>
duncanw: end of https://url.spec.whatwg.org/#path-state explains what happens to the input

[06:01:53.0000] <duncanw>
annevk: um, I don’t see that fragment, https://url.spec.whatwg.org/#relative-path-state perhaps?

[06:02:06.0000] <annevk>
duncanw: yeah, sorry

[06:02:10.0000] <duncanw>
kk

[06:04:59.0000] <duncanw>
annevk: this explains why unicode normalization is necessary, and I can only assume browsers do it before encoding the path: https://tools.ietf.org/html/rfc5198#section-3

[06:05:26.0000] <annevk>
duncanw: why can you only assume?

[06:05:32.0000] <duncanw>
annevk: but I haven’t found anything official looking or even unofficial… perhaps I should dig in the webkit source

[06:05:36.0000] <annevk>
duncanw: you could just test it and see it's false?

[06:06:03.0000] <annevk>
duncanw: that RFC is immaterial when it comes to URLs or HTTP

[06:06:52.0000] <duncanw>
annevk: the RFC is irrelevant but it shows cases where something the user enters can have different code points for an identical glyph

[06:07:14.0000] <annevk>
duncanw: yes, that can happen

[06:07:20.0000] <duncanw>
annevk: and even unicode terminology considers them canonically equivalent

[06:07:26.0000] <annevk>
duncanw: sure

[06:07:52.0000] <annevk>
duncanw: you would have to implement Unicode normalization yourself though

[06:09:37.0000] <duncanw>
annevk: my app runs on Macs, and Cocoa has pretty good normalization… that’s not my problem, my problem is figuring out which normalization form to use. I was hoping to find something documenting exactly which one it is, if there is one. I assume it is either NFC or NFKC http://unicode.org/reports/tr15/#Norm_Forms

[06:09:58.0000] <annevk>
duncanw: which one what is?

[06:10:26.0000] <duncanw>
annevk: the unicode normalized form used by browsers

[06:10:31.0000] <annevk>
(if you want to avoid being thrown off bridges, use NFC)

[06:10:40.0000] <annevk>
duncanw: I just told you browsers don't do that

[06:12:31.0000] <duncanw>
annevk: well I have had an instance with german where a user entered filename had an u+umlaut, it was properly encoded as UTF8 by the browser but the file couldn’t be loaded from the server… if the browsers don’t do it then perhaps the server filesystem does

[06:12:56.0000] <duncanw>
annevk: I had “fixed” it by removing non-ascii characters, which clearly doesn’t work for CJK text

[06:13:35.0000] <annevk>
duncanw: so, you want to run Unicode normalization on the filename you get on the server side

[06:14:03.0000] <annevk>
duncanw: and you need to be careful since the filename might not be Unicode (if someone is tricking you or using some weird Linux variant)

[06:15:07.0000] <duncanw>
annevk: right, I don’t control the server so I guess I can only do normalization on the filename before sending it to the server...

[06:16:25.0000] <annevk>
duncanw: sure, I recommend implementing NFC or using the normalize method from ES6 (might not be implemented yet though)

[06:17:45.0000] <duncanw>
annevk: ok, thanks a lot for your help

[06:22:49.0000] <gsnedders>
browsers may do normalization on URLs entered by the user, but may just vary based on how the OS hands them the string from the input (which may or may not be normalised)

[06:49:37.0000] <duncanw>
gsnedders: thanks! You’ve seen this or know of browsers that do it?

[06:50:09.0000] <gsnedders>
duncanw: I know OSes do interesting stuff to text input. :)

[06:50:42.0000] <duncanw>
gsnedders: right well I guess I’m just wondering if you have a specific example that I might try to track down

[06:51:20.0000] <gsnedders>
duncanw: IIRC OS X does interesting stuff with composing characters as you type them, with interesting intermediatry values

[06:53:02.0000] <duncanw>
gsnedders: right, I write diacritics on a US keyboard layout by doing the composition (like opt-e plus e to get é), and I see something similar happening when entering japanese text

[07:39:49.0000] <zcorpan_>
annevk: the spec says shift-jis is a known label. is that intentional?

[08:10:05.0000] <annevk>
zcorpan: I confused with euc_jp


2015-01-20
[02:36:38.0000] <annevk>
I don't really understand jQuery

[02:36:42.0000] <annevk>
$("div").replaceWith([$("div"), "<b>test</b>"])

[02:37:01.0000] <annevk>
Gives you "<b>test</b>", loses the <div> somehow...

[02:37:14.0000] <Ms2ger>
window.$ = do_what_i_mean

[02:37:24.0000] <annevk>
If you remove ', "<b>test</b>"' however, the <div> stays...

[02:37:45.0000] <annevk>
Ms2ger: any ideas how to reply to that oldNode.replaceWith() edge case thread?

[02:38:46.0000] <Ms2ger>
I've ignored it

[02:39:47.0000] <annevk>
Ms2ger: that's not a great way to deal with feedback

[02:40:01.0000] <annevk>
Ms2ger: also, I think those algorithms might in fact have some issues

[02:40:04.0000] <Ms2ger>
That's your job :)

[03:13:43.0000] <zcorpan>
annevk: seems like a bug to remove the div there

[03:22:04.0000] <jgraham>
Anyone know if the reftest.list files in CSS are actually correct?

[03:28:03.0000] <jgraham>
Oh, they seem to be generated so I'll assume they are

[03:47:39.0000] <GuidoBouman>
Are Flexbox questions allowed here as well? ^_^

[03:48:41.0000] <SimonSapin>
jgraham: correct how?

[03:58:59.0000] <annevk>
zcorpan_: should after() / before() / replaceWith() all work the same if you pass in the context object?

[03:59:34.0000] <annevk>
zcorpan_: suggestions welcome in that thread

[04:04:19.0000] <zcorpan_>
annevk: i think jquery ignores the context node when it appears in an array for after/before/replaceWith

[04:05:38.0000] <zcorpan_>
http://jsbin.com/cunejumepo/1/edit

[04:07:41.0000] <zcorpan_>
what is more valuable, consistency with insertBefore etc, or with jQuery, being easier to debug mistakes, addressing more use cases?

[04:24:08.0000] <jgraham>
SimonSapin: Correct in the sense of "not incorrect" :)

[04:24:31.0000] <jgraham>
e.g. if they were hand-written files that didn't get updated regularly

[04:24:50.0000] <SimonSapin>
I don’t know

[04:25:36.0000] <jgraham>
OK

[04:25:48.0000] <annevk>
zcorpan: speed and simplicity were some of the original requirements

[04:28:05.0000] <zcorpan>
annevk: ok. i think i'm the wrong person to have an opinion on what is better here

[04:59:13.0000] <JakeA>
annevk: I'm having to duplicate the about:blank handling from https://html.spec.whatwg.org/multipage/browsers.html#dom-open for cliens.openWindow() - is it appropiate to file a bug with the HTML spec asking for this to be abstracted?

[05:00:10.0000] <annevk>
JakeA: yeah, make it clear what you need though

[05:00:21.0000] <JakeA>
shall do

[05:00:24.0000] <JakeA>
cheers!

[05:42:46.0000] <annevk>
JakeA: did you see the bug I copied you on?

[05:43:07.0000] <annevk>
JakeA: I can't really figure out how to make service workers not observable...

[05:43:28.0000] <annevk>
JakeA: even ev.default() will have some effect (though it's unclear what that should be)

[05:44:21.0000] <JakeA>
annevk: which bug sorry?

[05:46:57.0000] <annevk>
JakeA: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27524

[05:47:28.0000] <JakeA>
ta

[05:53:20.0000] <wanderview>
JakeA: annevk: if a document does a network request, triggers a SW fetch event, SW starts a different fetch() or cache.add().... and then the original document navigates away before the SW network requests finish... should those requests triggered from the SW fetch event be canceled or completed?

[05:54:07.0000] <annevk>
wanderview: I'm not sure what should happen to the FetchEvent instance, but the fetch() and cache.add() should succeed I would think

[05:54:20.0000] <annevk>
wanderview: we don't want to have to traverse the calling stack

[05:55:08.0000] <wanderview>
annevk: well, in gecko we have the concept of a "load group"... if we share the load group with the document, then they will get canceled... don't think we need to "traverse the calling stack", but maybe I don't understand what you mean

[05:55:30.0000] <wanderview>
right now we don't share the document load group directly with the service worker, though

[05:55:42.0000] <wanderview>
annevk: sorry, forgot to CC you on this bug:  https://bugzilla.mozilla.org/show_bug.cgi?id=1122917

[05:55:58.0000] <JakeA>
annevk: wanderview: I took a stab at this over in https://github.com/slightlyoff/ServiceWorker/issues/592#issuecomment-68853209

[05:58:10.0000] <wanderview>
JakeA: I think that works... basically don't cancel the network request, but abort any resulting stream

[05:58:30.0000] <wanderview>
JakeA: and sorry... I read the later comments there, but somehow missed your comment

[05:59:12.0000] <JakeA>
wanderview: No worries! My comment was just a guess, but we don't really know if the request was associated with the fetch event until that point

[05:59:50.0000] <annevk>
wanderview: I don't like this "load group" concept as it's not part of any spec, but I guess we need to define something like it at some point

[05:59:57.0000] <wanderview>
JakeA: yea... since there can be multiple fetch events in flight at once... it seems we have to wait for resolveWith()

[06:00:20.0000] <annevk>
wanderview: but given a document A and a service worker SW, they should probably never share a load group, except maybe for "default" cases, where it is a bit unclear how those should work

[06:00:33.0000] <wanderview>
annevk: well... load group is a gecko implementation detail... doesn't have to be specifically in the spec... and its kind of hard to work with

[06:01:06.0000] <annevk>
wanderview: yeah, well we need a concept in specs of all fetches associated with a global

[06:01:10.0000] <annevk>
wanderview: for various reasons

[06:01:34.0000] <JakeA>
annevk: event.default() differs from fetch(event.request) in that it'll return redirects that'll be processed by the fetch spec without further SW interaction right? What does the synchronous part do?

[06:01:51.0000] <wanderview>
annevk: in the event.default() case... gecko treats the load as being performed by the document (with its load group), not the SW...

[06:02:16.0000] <wanderview>
synchronous part?

[06:02:26.0000] <annevk>
JakeA: see the last comment

[06:02:38.0000] <JakeA>
wanderview: sorry, crossing the streams a little, I'm talking about https://www.w3.org/Bugs/Public/show_bug.cgi?id=27524

[06:03:23.0000] <annevk>
wanderview: that is sort of what the spec says for event.default() as well, however, what's unclear is how we deliver notifications to both globals

[06:04:43.0000] <wanderview>
annevk: I didn't realize the SW got any more events for that fetch event() once it did event.default()... or is that something we want to change?

[06:05:22.0000] <annevk>
wanderview: how does the SW get a Response object out of event.default() if not for some kind of queued task from the network layer?

[06:05:50.0000] <annevk>
wanderview: and how do we maintain progress updates to the document at the same time?

[06:05:58.0000] <JakeA>
Ohhh, I think I'm starting to understand

[06:06:03.0000] <annevk>
wanderview: seems like it would require a very special path

[06:06:25.0000] <wanderview>
annevk: ah... I missed that it does that! :-)  for some reason I was thinking event.default() basically just sent it back to document... but I guess thats responseWith() using no argument

[06:07:41.0000] <wanderview>
or maybe I'm confused still

[06:08:05.0000] <JakeA>
annevk: What if event.default() called fetch in a way that would give it back redirects (opaque if needed), and they're sent back to the original fetch which handles the redirects and doesn't call back into the SW

[06:08:12.0000] <JakeA>
Is that observable?

[06:09:04.0000] <JakeA>
As far as I can remember event.default() was there pave over the redirect behaviour of a new fetch call consuming redirects

[06:10:04.0000] <wanderview>
I guess there is no respondWith()... you have to do event.respondWith(event.default())

[06:10:31.0000] <annevk>
JakeA: yeah, download progress is still gone

[06:11:42.0000] <JakeA>
annevk: the response is passed back to the browser before the stream is read

[06:11:43.0000] <annevk>
JakeA: you might get the "progress" from sending it from SW to A, but the idea is that you get the progress from what actually happens network-wise (at least when using .default())

[06:12:05.0000] <annevk>
JakeA: that is true

[06:12:38.0000] <wanderview>
annevk: I'm guessing on the impl side we can make the progress work... but not sure how it should be spec'd

[06:13:01.0000] <JakeA>
If progress is judged by content-length headers & the stream, doesn't it just work?

[06:13:26.0000] <annevk>
I doubt it "just" works :-)

[06:13:33.0000] <annevk>
For one thing there's that bug

[06:14:52.0000] <JakeA>
That's my specing style. 1. Just, make it happen. 2. Srs have you even started yet? 3. Return correct response.

[06:15:10.0000] <annevk>
heh

[06:16:20.0000] <JakeA>
annevk: If event.default() made a new fetch, which would return raw redirects, then pass those back to the original fetch, doesn't that get us out of having to go from fetchA to SW to fetchA and back to SW?

[06:16:37.0000] <wanderview>
annevk: in gecko we have the concept of a "network callback" which can be set on a load group to effect many requests, or just on a single network request... progress is communicated back to the document that way (I think)... so we can, in theory, set the progress callback for the document while performing the fetch in the SW context

[06:16:41.0000] <annevk>
So yeah, redirects were observable, anything else?

[06:17:51.0000] <annevk>
JakeA: then Fetch needs to know SW used default()

[06:18:01.0000] <annevk>
JakeA: see https://fetch.spec.whatwg.org/#http-fetch for how that would fall apart now

[06:18:06.0000] <JakeA>
annevk: I think that's just a side effect of using event.default(). Things don't change from the document's perspective though, as the redirects are handled by the original fetch, baseurls are fine

[06:18:47.0000] <JakeA>
annevk: Don't see how fetch needs to be aware of event.default(), although I've probably forgotten why

[06:19:39.0000] <annevk>
JakeA: if default() does not handle redirects you can't store it in the cache as easily anymore

[06:19:45.0000] <wanderview>
annevk: JakeA: sorry if this was discussed and I missed... but in the case where SW calls respondWith() with a different fetch() or cache.add()... should the document still get progress updates?  is this unique to default()?

[06:20:07.0000] <annevk>
JakeA: also HTTP Fetch cannot block on all opaque stuff anymore and has to inspect if it's a redirect

[06:20:42.0000] <annevk>
wanderview: it's a bit unclear

[06:21:05.0000] <wanderview>
as a user... I imagine I would expect to still get progress in those cases

[06:21:34.0000] <annevk>
wanderview: and I think you do given that the progress is mostly about the stream anyway

[06:22:02.0000] <annevk>
wanderview: though you wouldn't if someone consumed the whole stream in the SW and then constructed a response and then passed that back

[06:22:27.0000] <wanderview>
annevk: so the terminology we use in our impl is that there is a "progress event sink"... can that be spec'd?  so when event.respondWith(resp) is called, the UA sets the progress event sink for the associated document on the response?

[06:22:52.0000] <wanderview>
and event.default() starts with the documents progress event sink

[06:22:58.0000] <JakeA>
wanderview: the browser should use the response it gets via respondWith to determine progress. So event.respondWith(fetch(url)) would show progress, event.respondWith(fetch(url).then(r => r,text()).then(t => new Response(t))) wouldn't

[06:23:22.0000] <annevk>
Yeah, what JakeA says the specification defines now, that'd be hard to change

[06:23:48.0000] <annevk>
JakeA: I don't see a way around Fetch needing to know about default()

[06:23:54.0000] <wanderview>
ok, I think we have an impl bug... because I don't think we report progress in that case

[06:24:05.0000] <wanderview>
/me goes to bugzilla.

[06:24:06.0000] <annevk>
JakeA: and it knows about default(), you might as well follow all the redirects in SW...

[06:24:15.0000] <annevk>
JakeA: (so you can store the response in the cache)

[06:25:06.0000] <annevk>
wanderview: progress events are based on the stream that comes from the network; from the document's perspective, the network is the SW; from the SW, it's the actual network

[06:25:19.0000] <JakeA>
annevk: we talked about the SW being able to pass a response back that contained something to say "btw, treat the base url as [whatever]" to work around this

[06:25:28.0000] <JakeA>
I think it was dismissed as too hacky at the time

[06:25:33.0000] <JakeA>
but maybe it's simpler?

[06:25:40.0000] <annevk>
wanderview: the confusing bit here is that the stream is shared and at some point probably cloned so it can be read simultaneously

[06:25:46.0000] <wanderview>
annevk: yea... but our current impl does not report progress (afaict) for event.respondWith(fetch(url))

[06:26:50.0000] <JakeA>
wanderview: fwiw, I don't Chrome does it with caches. Don't think those stream yet.

[06:26:57.0000] <annevk>
JakeA: so we'd annotate the response from a .default() somehow?

[06:27:22.0000] <annevk>
JakeA: as meaning "imagine you followed a redirect to get here"

[06:27:29.0000] <JakeA>
annevk: yeah

[06:27:31.0000] <annevk>
JakeA: it is pretty hacky

[06:27:35.0000] <JakeA>
:D

[06:27:55.0000] <JakeA>
less hacky than trying to loop back into the SW?

[06:28:34.0000] <annevk>
JakeA: the alternative is that you don't get anything out of a .default()

[06:28:46.0000] <annevk>
JakeA: that it's exactly identical to letting the request fly

[06:28:55.0000] <annevk>
JakeA: sorry, to not do anything with the event

[06:29:23.0000] <annevk>
JakeA: because now it is a bit different from not doing anything with the event, which is somewhat weird

[06:32:31.0000] <JakeA>
annevk: I think event.default().catch(getAFallbackFromCache) needed

[06:35:18.0000] <JakeA>
From memory, event.default() was there to let the browser do it's normal thing, but still offer recovery from failure. Caching result is nice too

[06:36:05.0000] <JakeA>
annevk: if event.default() resolves with the eventual response, it isn't *ideal* for caching as you'd be caching it against the original request url

[06:36:16.0000] <JakeA>
So your base urls would be off next time you get from the cache

[06:37:47.0000] <JakeA>
(unless it had Jake's patented super magic "use this as the base url" hack)

[06:42:35.0000] <wanderview>
JakeA: yea... the annoying thing is we don't get stuff like progress events for free with data streams in gecko... network streams are completely different than other streams :-\

[06:43:15.0000] <annevk>
JakeA: should we instead drop default() and put a way to mutate a response into requiring a synthetic redirect?

[06:44:45.0000] <JakeA>
annevk: I'm very interested in that. I've been wanting to kill .default() forever.

[06:44:56.0000] <annevk>
JakeA: I know :-)

[06:45:01.0000] <annevk>
JakeA: open a ticket?

[06:45:06.0000] <JakeA>
Shall do

[07:05:58.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/607

[07:37:27.0000] <JakeA>
annevk: speccing Client. Multiple methods return a client object, but client doesn't have a constructor (although I guess it could), where would I define the construction steps? As in, taking an environment settings object and setting all the properties etc

[08:19:27.0000] <annevk>
JakeA: some prose

[08:19:49.0000] <annevk>
JakeA: "To /create a Client object/, run these steps:"

[08:23:51.0000] <JakeA>
annevk: Thanks. Also, I'm hitting the problem I think you tried to explain to me in the past. If the client is a SharedWorker, postMessage doesn't really fit, as SharedWorker doesn't have onmessage (it depends on ports for reasons I've never entirely understood). I guess this is why we should have WindowClient, but then just instances of DedicatedWorker &

[08:23:52.0000] <JakeA>
SharedWorker?

[08:57:05.0000] <JakeA>
Never understood way SharedWorker uses ports the way it does. Why can't it just be sharedWorker.postMessage(…), then the worker can respond via messageEvent.source

[08:57:15.0000] <JakeA>
why*

[08:58:30.0000] <caitp>
0

[08:59:17.0000] <Ms2ger>
Symmetry?

[08:59:31.0000] <JakeA>
Symmetry with what?

[09:03:13.0000] <jgraham>
Could be that it was designed with the idea that everyone would be passing around ports as part of some capabilties system, which might skew one's views on good api design

[09:16:03.0000] <annevk>
JakeA: wait, does client.postMessage() go to window.onmessage?

[09:16:11.0000] <annevk>
JakeA: or to navigator.serviceWorkers...?

[09:17:10.0000] <annevk>
JakeA: the way shared worker works is that each worker or document that connects to it gets its own port

[09:17:27.0000] <annevk>
JakeA: however, when a shared worker is controlled by a service worker we should not use that API

[09:17:37.0000] <annevk>
JakeA: because that is a completely different relationship

[09:18:08.0000] <Ms2ger>
annevk, I wonder if there's anything useful in https://github.com/operasoftware/presto-testo/tree/master/imported/peter/unicode/html

[09:19:17.0000] <JakeA>
annevk: client.postMessage would go to window.onmessage I thought

[09:19:18.0000] <annevk>
Ms2ger: double and ent look redundant

[09:19:52.0000] <annevk>
JakeA: ooooh, that's a lot of branching for window.onmessage then...

[09:20:10.0000] <annevk>
JakeA: I thought the events would go to the associated ServiceWorker object

[09:20:59.0000] <annevk>
Ms2ger: maybe the excess stuff but I suspect we already got that covered elsewhere too

[09:21:18.0000] <Ms2ger>
Ok, thanks for looking

[09:21:44.0000] <annevk>
JakeA: it seems pretty bad to overload window.onmessage like that

[09:22:09.0000] <JakeA>
annevk: navigator.serviceWorker.onmessage? We don't have that right now, but we could. What's the issue with window.onmessage? https://html.spec.whatwg.org/multipage/comms.html#dom-window-postmessage makes it look simple aside from the transferables

[09:22:37.0000] <annevk>
JakeA: it's already used for cross-window postMessage

[09:23:59.0000] <annevk>
JakeA: how can only client have postMessage()? How do you postMessage() from the window?

[09:24:27.0000] <JakeA>
annevk: I thought of window-to-window as client-to-client

[09:24:42.0000] <annevk>
JakeA: no, so ServiceWorker inherits from Worker

[09:24:51.0000] <annevk>
JakeA: and that has both postMessage() and onmessage

[09:25:02.0000] <annevk>
JakeA: Client is the other side

[09:25:11.0000] <annevk>
JakeA: it only makes sense for those two to talk to each other

[09:25:13.0000] <JakeA>
annevk: messageEvent.source.postMessage would post back to serviceWorkerGlobalScope.onmessage

[09:25:41.0000] <JakeA>
/me thinks

[09:28:09.0000] <JakeA>
annevk: so you were thinking the message would go to (await navigator.serviceWorker.getRegistration()).active?

[09:28:54.0000] <annevk>
yeah

[09:29:19.0000] <annevk>
that's the only thing that made sense to me and would work for both documents and workers

[09:29:29.0000] <annevk>
and would give a somewhat sane API

[09:29:45.0000] <annevk>
and be consistent with what we have for workers today

[09:29:59.0000] <annevk>
Are you now going to tell me that Chrome implemented something else?

[09:30:23.0000] <JakeA>
We haven't implemented clients yet

[09:30:34.0000] <annevk>
No messaging at all?

[09:31:13.0000] <JakeA>
Window to SW, but won't think we have a way back yet

[09:31:44.0000] <JakeA>
I think we need to stop & think about how this stuff works

[09:32:18.0000] <JakeA>
registration objects don't feel client-unique to me, so not sure they're a good place for onmessage either

[09:34:09.0000] <annevk>
I guess the only problem is that Client objects are currently designed as non-persistent

[09:34:32.0000] <annevk>
That doesn't make for a great message channel receiver

[09:35:21.0000] <annevk>
JakeA: I thought registration object was ServiceWorkerRegistration, not ServiceWorker

[09:35:29.0000] <annevk>
(I hate the naming)

[09:36:06.0000] <JakeA>
annevk: yes, so (await navigator.serviceWorker.getRegistration()) is a ServiceWorkerRegistration, then .active is a ServiceWorker

[09:38:52.0000] <JakeA>
ServiceWorkerRegistration is an origin-level thing rather than a client-specific thing, so getting client-specific message on it, or its properties feels wrong.

[09:38:58.0000] <JakeA>
Lemmie write up an issue \o/

[09:40:27.0000] <annevk>
JakeA: well, it's the only way to get a reference to a a client's own service worker

[09:40:34.0000] <annevk>
JakeA: seems fairly fricking specific to me

[09:42:23.0000] <JakeA>
annevk: a client selects a registration, but many clients can select the same registration

[09:48:14.0000] <annevk>
JakeA: oh I see what you mean, I had imagined it would go to all of them, but indeed that does not really work

[09:48:26.0000] <annevk>
JakeA: okay, so yes, we need something new :/

[09:49:15.0000] <JakeA>
annevk: I think postMessage & serviceWorker has been handwaved all the way :(

[09:50:01.0000] <JakeA>
annevk: It could be navigator.serviceWorker.onmessage for messages from a ServiceWorker. Anyway, will write up a ticket. Thanks for dragging me through it

[10:01:35.0000] <annevk>
JakeA: yeah, the whole "just like shared workers" stuff has been somewhat painful to point through

[10:01:44.0000] <annevk>
JakeA: thanks

[10:01:54.0000] <Ms2ger>
Do we still like shared workers?

[10:04:10.0000] <jgraham>
Pretty sure that the answer is "No" for all questions of the form "do we still like X" where X is a past web technology, and "Yes" where X is a future web technology

[10:12:13.0000] <caitp>
so you're saying there's a chance that opinions might change in 20 years?

[10:12:35.0000] <caitp>
goodness

[10:12:55.0000] <jgraham>
I'm saying that there's a discontinuity at t=present :p

[10:16:00.0000] <JakeA>
annevk: different subject, we're starting to look more seriously at background sync. I see FirefoxOS has something that I think was based on early ideas we had https://bugzilla.mozilla.org/show_bug.cgi?id=1018320 - who'd be best to get involved in making it a standard?

[10:16:37.0000] <annevk>
JakeA: it seems very likely it'll be the same people as service worker

[10:16:47.0000] <annevk>
JakeA: not sure we can get time from the Firefox OS folks

[10:17:28.0000] <JakeA>
annevk: ok, it'd be good to get their learnings, but I'll sort something out with Jonas & yourself

[10:18:52.0000] <annevk>
JakeA: copy overholt

[10:19:00.0000] <annevk>
JakeA: he'll know who to talk to

[10:19:05.0000] <JakeA>
Ta!

[10:25:31.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/609

[10:25:49.0000] <JakeA>
navigator.serviceWorker.onmessage seems to fit

[12:08:04.0000] <Domenic>
annevk: I managed to confuse myself about "queue a task" and microtasks and such again. What do you think would happen in the following?

[12:08:48.0000] <Domenic>
1. Queue a task to: 1a. resolve the promise p; 1b. fire an event named "foo". Given that I've registered a fulfillment handler on p and a listener for "foo", which fires first?

[12:09:26.0000] <Ms2ger>
I think the listener

[12:09:27.0000] <Domenic>
At first I thought it'd be "foo" first since events are "synchronous". But then I thought it'd be p first since microtasks fire whenever you transition from UA code to user code.

[12:09:34.0000] <Domenic>
hmm

[12:09:43.0000] <Ms2ger>
But I have no idea how microtasks work

[12:10:00.0000] <Ms2ger>
Do they fire before calling event handlers?

[12:10:20.0000] <Ms2ger>
Presumably not, because then you could sniff whether there are event handlers attached for some type

[12:10:21.0000] <Domenic>
I ... think so. This might start falling into the unspecced areas :-/. Hixie do you know?

[12:19:18.0000] <Hixie>
Domenic: no microtasks would fire in that case until the first script for the first event listener returned, iirc

[12:20:10.0000] <Domenic>
Hixie: hmm OK. So saying "microtasks fire whenever transitioning from UA code to user code" is not really correct of me to say then. That's good to know.

[12:30:23.0000] <Hixie>
no it's much more specific than that

[13:39:56.0000] <annevk>
Domenic: the event goes first

[13:40:20.0000] <annevk>
Domenic: microtasks run end-of-task

[13:40:45.0000] <Domenic>
got it :)

[14:10:25.0000] <Ms2ger>
annevk, a few changes for you in https://critic.hoppipolla.co.uk/r/3723

[14:44:35.0000] <Ms2ger>
zcorpan, fyi https://bugzilla.mozilla.org/show_bug.cgi?id=1122897

[15:17:32.0000] <Hixie>
annevk: microtasks also run end-of-script

[15:17:42.0000] <Hixie>
annevk: are you sure they wouldn't run between two event listeners here?

[15:18:06.0000] <TabAtkins>
They should run between event listeners, I think.  (I could easily be wrong.)

[15:38:19.0000] <smaug____>
/me is missing the context, but if there isn't any other script on stack when event listeners run, microtasks run between them

[15:39:49.0000] <Hixie>
right

[15:40:12.0000] <Hixie>
in conclusion, Domenic, resolving the promise and then firing an event is going to lead to weird behaviour

[15:40:30.0000] <Domenic>
yep

[15:40:33.0000] <Hixie>
Domenic: you might be better off resolving then queueing a task to fire the event, or resolving then running microtasks then firing the event

[15:40:37.0000] <Hixie>
or not firing the event at all

[15:41:13.0000] <Domenic>
Yeah the current plan is actually just "when p fulfills, fire an event named 'foo'"

[15:41:50.0000] <Hixie>
is "fulfills" defined?

[15:41:59.0000] <Hixie>
like, what does that mean?

[15:43:26.0000] <Domenic>
http://www.w3.org/2001/tag/doc/promises-guide#shorthand-reacting

[15:50:38.0000] <Hixie>
i don't understand

[15:50:53.0000] <Hixie>
"fire an event" isn't a function

[15:51:09.0000] <Hixie>
you can't really define prose-given requirements in terms of javascript code


2015-01-21
[16:38:55.0000] <terinjokes>
does XHR2 no longer care about ArrayBuffers as a request body?

[16:40:18.0000] <terinjokes>
annevk: ^^

[23:32:09.0000] <annevk>
terinjokes: sure does

[23:32:58.0000] <annevk>
Hixie: pretty sure, yes

[23:33:15.0000] <Hixie>
why?

[23:33:46.0000] <annevk>
Hixie: there's nothing about event listeners that goes back to the microtask thing, we just iterate through them synchronously and run them

[23:34:01.0000] <Hixie>
how do you run the callbacks?

[23:34:21.0000] <annevk>
Hixie: through IDL's "call ..." thingie for that

[23:34:47.0000] <Hixie>
http://heycam.github.io/webidl/#es-invoking-callback-functions ?

[23:34:51.0000] <annevk>
Hixie: yeah

[23:36:57.0000] <Hixie>
huh

[23:37:00.0000] <Hixie>
when did they stop calling "clean up after running a callback"?

[23:37:05.0000] <annevk>
Hixie: note that in https://www.w3.org/Bugs/Public/show_bug.cgi?id=27046#c5 I asked for clarification about this since I thought I had the wrong mental model

[23:38:04.0000] <Hixie>
maybe this changed at some point

[23:38:07.0000] <annevk>
It does seem quite weird to me to run microtasks between two registered event listeners that run in the same task

[23:38:15.0000] <Hixie>
i could have sworn we wanted mutation observers to run after each event listener

[23:38:24.0000] <annevk>
Though smaug always maintains that is the model, so maybe...

[23:38:44.0000] <Hixie>
at some point i thought heycam|away had webidl calling the "clean up after running a callback" logic

[23:38:48.0000] <annevk>
Hixie: yeah I thought so too, but then it wasn't really supported by any specification

[23:38:53.0000] <Hixie>
maybe bz changed it?

[23:39:16.0000] <Hixie>
oh well

[23:39:24.0000] <Hixie>
bed time for me

[23:39:24.0000] <Hixie>
nn

[23:40:13.0000] <annevk>
have a good night

[23:40:26.0000] <annevk>
I might try to sort it out once more if I have some time left

[23:49:48.0000] <terinjokes>
annevk: i just don't see it in the version up on the site

[23:50:21.0000] <annevk>
terinjokes: "void send(optional (Document or BodyInit)? body = null);"

[23:50:45.0000] <annevk>
terinjokes: "typedef (Blob or BufferSource or FormData or URLSearchParams or USVString) BodyInit;" (if you follow the BodyInit link)

[23:51:10.0000] <terinjokes>
i promise you

[23:51:13.0000] <annevk>
terinjokes: http://heycam.github.io/webidl/#common-BufferSource (if you're curious about BufferSource and look into IDL to find out)

[23:51:18.0000] <terinjokes>
that does not look like a link to me

[23:52:08.0000] <annevk>
terinjokes: you need to hover the IDL block these days I think, we made the styles a bit less distracting for when you're just reading

[00:00:02.0000] <annevk>
Ms2ger: ta, done

[00:58:24.0000] <annevk>
Does anyone else get a lot of these GitHub user surveys?

[00:58:30.0000] <annevk>
Is there a way to opt out?

[01:05:04.0000] <JakeA>
annevk: I got one this morning

[01:23:54.0000] <mathiasbynens_>
annevk: you didn’t respond to this part “https://url.spec.whatwg.org/#origin reads as though the default port is included.”

[01:25:31.0000] <mathiasbynens>
fwiw, i always thought origin didn’t include implicit/default ports, only what’s explicitly part of the URL

[01:28:19.0000] <annevk>
mathiasbynens: I made a mistake, origins are tuples, not strings

[01:28:33.0000] <annevk>
mathiasbynens: and the tuple includes the origin

[01:28:42.0000] <annevk>
mathiasbynens: includes the port, oops

[01:29:00.0000] <mathiasbynens>
ok, so the url spec is correct then

[01:29:24.0000] <mathiasbynens>
so https://example.com/ and https://example.com:443/ are same-origin?

[01:35:39.0000] <annevk>
mathiasbynens: yes

[03:37:43.0000] <MikeSmith>
https://w3c.github.io/webappsec/specs/credentialmanagement/#security-considerations seems to be kind of defining a Somewhat Similar Origin Policy

[03:38:14.0000] <MikeSmith>
I wonder what other specs might have the same need

[03:39:52.0000] <MikeSmith>
i.e., for this Credential Management it's about credential sharing among non-exact origins, but it's imaginable that there might other use cases for sharing across non-exact origins

[03:40:39.0000] <MikeSmith>
well I guess there are lots of other use cases, if you listen to the people who think the same-origin policy is a problem

[03:41:29.0000] <MikeSmith>
"MUST NOT offer credentials to an origin in response to request() without user mediation if the credential’s origin is not an exact match for the calling origin"

[03:55:54.0000] <smaug____>
annevk: what is the current plan, will shadow dom be merged to dom, or will it stay a separate spec?

[03:56:04.0000] <smaug____>
(just thinking about bug filing )

[04:06:58.0000] <zcorpan_>
Ms2ger: in quirks spec source i have this:

[04:07:03.0000] <zcorpan_>
<h2>Quirks that maybe can be removed from implementations</h2>

[04:07:04.0000] <zcorpan_>
<dl>

[04:07:04.0000] <zcorpan_>
<dt>In quirks mode, text-decoration is propagated into floating and absolutely positioned elements</dt>

[04:07:05.0000] <zcorpan_>
<dd><p>Opera, WebKit and IE9 (except in compat view quirks mode) don't support this quirk.</dd>

[04:07:38.0000] <zcorpan_>
(commented out)

[04:07:46.0000] <Ms2ger>
There we are

[04:09:37.0000] <annevk>
smaug____: there's no good plan for shadow DOM yet I think

[04:09:46.0000] <annevk>
smaug____: there's not really consensus on what it should look like

[04:11:22.0000] <smaug____>
ok, so keep filing bugs on shadow dom spec for now, not dom spec

[04:12:25.0000] <annevk>
smaug____: yeah

[04:12:50.0000] <annevk>
smaug____: I'd like to do custom elements first, but we can't seem to get agreement on how to do upgrades :-(

[04:13:39.0000] <smaug____>
right

[04:13:48.0000] <smaug____>
I haven't been following that too closely

[04:18:34.0000] <annevk>
Okay, so I tested and yes, there are bugs around microtasks and callbacks

[04:18:41.0000] <annevk>
Baaah

[04:27:49.0000] <annevk>
Filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27874

[04:28:33.0000] <annevk>
Note that mutation are from 2011

[04:32:54.0000] <smaug____>
don't understand what that bug is about

[04:34:10.0000] <annevk>
smaug____: you can't explain when the callbacks are supposed to run from reading the specs

[04:34:50.0000] <smaug____>
oh, spec text issue

[04:35:06.0000] <annevk>
smaug____: well it's a bug against a spec

[04:35:26.0000] <smaug____>
hmm, webidl?

[04:35:30.0000] <smaug____>
why webidl

[04:35:50.0000] <annevk>
smaug____: it defines running callbacks

[04:36:10.0000] <smaug____>
ah, right...

[04:36:34.0000] <smaug____>
ok, I would add some hook to webidl and make HTML spec to use that to invoke end-of-microtask stuff

[04:36:39.0000] <smaug____>
HTML or DOM

[04:36:49.0000] <annevk>
yeah there is such a hook

[04:37:07.0000] <annevk>
however, the problem is that we don't want to invoke it all the time

[04:37:25.0000] <smaug____>
yes, only when there isn't any other script on stack

[04:37:31.0000] <smaug____>
and that would be up to the HTML or DOM to spec

[04:37:36.0000] <smaug____>
I guess HTML

[04:37:40.0000] <annevk>
such a weird model

[05:18:25.0000] <Ms2ger>
/me pokes dglazkov 

[05:37:25.0000] <annevk>
JakeA: did you talk to devdocs.io about AppCache vs SW?

[05:37:35.0000] <annevk>
JakeA: seems like they're lacking TLS

[05:39:04.0000] <JakeA>
annevk: I haven't, but shall. But yeah, I guess TLS is an initial blocker. If they've got it working with appcache, they may not want to move to something with worse support

[05:39:33.0000] <annevk>
JakeA: well, we're going to remove AppCache from Firefox

[05:40:51.0000] <JakeA>
annevk: I'll reach out to them

[05:48:43.0000] <annevk>
JakeA: that site is really fast btw

[05:49:11.0000] <JakeA>
annevk: it's great isn't it? Just in time for my 23hr flight tomorrow too

[05:51:01.0000] <annevk>
JakeA: Oceania?

[05:51:11.0000] <JakeA>
annevk: Yeah, Sydney

[06:57:50.0000] <JakeA>
annevk: re https://github.com/slightlyoff/ServiceWorker/issues/609 - I can't see how client objects can have onmessage, windows have no access to their client

[07:14:19.0000] <iandevlin2>
annevk: appcache is being removed from Firefox?

[07:59:15.0000] <annevk>
iandevlin2: not yet, but with service workers coming the writing is on the wall

[07:59:43.0000] <iandevlin2>
annevk: ok, interesting

[07:59:48.0000] <Ms2ger>
"enemies of the heir beware"?

[07:59:54.0000] <JakeA>
Appcache has some security howlers. Chrome's security team would like to see it gone

[08:01:57.0000] <annevk>
Ms2ger: I'm not sure I comprehend the question

[08:02:18.0000] <jgraham>
annevk: Not a Harry Potter fan?

[08:02:26.0000] <annevk>
iandevlin2: I suspect there will be an announcements of sorts, once we've confirmed that service workers actually works

[08:02:52.0000] <annevk>
jgraham: been a while

[08:03:27.0000] <jgraham>
Think Chamber of Secrets

[08:05:03.0000] <annevk>
heh

[08:40:27.0000] <wanderview>
JakeA: can appcache be polyfilled with SW?  (I'm not too familiar with appcache api)

[08:41:46.0000] <JakeA>
wanderview: appcache allows one tab to be using version n, and another to be using version n+1. I think that's the only part SW (deliberately) can't do

[08:42:35.0000] <wanderview>
JakeA: version of the SW script, right?  I assume they could be using separate cache objects for versions of the site

[08:43:10.0000] <JakeA>
wanderview: yeah, but you can't tell which tab you're serving, so you can't give them items from different caches

[08:43:30.0000] <JakeA>
& there can only be one active SW in a registration

[08:43:32.0000] <wanderview>
JakeA: oh... right...  that makes sense :-)

[08:44:32.0000] <JakeA>
You can get really close though. You can probably make it work under the hood by finding a way to allow that bit

[08:45:47.0000] <JakeA>
Eg, if an appcache SW creates a new registration for each version, but at the same scope, that would work (you can't do that with the currently exposed API)

[08:46:12.0000] <JakeA>
But that means the old tab would be using the old registration & active worker, whereas the new tab uses the new registration & active worker

[08:46:18.0000] <wanderview>
JakeA: or we could just de-orbit appcache... I was just wondering if polyfill was easy or not

[08:46:54.0000] <JakeA>
heh yeah

[09:24:17.0000] <annevk>
JakeA: can't you do that with Client objects?

[09:26:00.0000] <annevk>
Man, the pseudo-security on www-tag just keeps going

[09:26:25.0000] <annevk>
I wish there were at least some memes to alleviate some of the 386 pull

[09:50:06.0000] <TabAtkins>
Does somebody have Chrome Canary and can tell me what this logs?

[09:50:07.0000] <TabAtkins>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3381

[09:50:49.0000] <miketaylr>
TabAtkins: heres what i got https://gist.github.com/miketaylr/ecbf5d97337dc871c90e

[09:50:59.0000] <TabAtkins>
Cool, it's still lolbroke.

[09:51:05.0000] <TabAtkins>
Just checking before I file a bug.

[09:51:13.0000] <TabAtkins>
That is one *broke-ass* background serialization.

[09:52:05.0000] <TabAtkins>
miketaylr: What's your Canary version?

[09:52:27.0000] <miketaylr>
TabAtkins: Version 42.0.2282.0 canary (64-bit)

[09:52:47.0000] <TabAtkins>
OS?

[09:52:58.0000] <TabAtkins>
Not that it matters, but I'm filling out the fields.

[09:53:00.0000] <miketaylr>
OSX Yosemite

[09:53:08.0000] <miketaylr>
10.10.2

[10:06:34.0000] <wanderview>
Domenic: so if we have the request.stream() to reify to a js stream... and request.text() to reify to text... does this mean that request.stream() will set bodyUsed to prevent request.text() from being called?

[10:06:46.0000] <wanderview>
even if the data has not been read?

[10:07:12.0000] <Domenic>
wanderview: bodyUsed is a whole 'nother thread of questions... but I think that is @horo-t's proposal. It seems somewhat self-consistent at least.

[10:07:18.0000] <wanderview>
I think thats how I would expect it to work if I was a developer... "I can only call one of these reify methods and then bodyUsed is set"

[10:07:27.0000] <Domenic>
Yeah.

[10:07:33.0000] <wanderview>
makes sense to me

[10:07:54.0000] <wanderview>
Domenic: sorry I'm always so confused about this stuff on github... I was once familiar with node streams... but its all a bit mixed up for me now

[10:08:07.0000] <Domenic>
wanderview: no problem! it's confusing stuff!!

[10:08:09.0000] <wanderview>
can't keep track of how things have changed recently

[10:15:10.0000] <wanderview>
annevk: why is request.text() a method and not a getter?

[10:15:26.0000] <annevk>
wanderview: because it returns a fresh promise

[10:16:21.0000] <annevk>
wanderview: request.text === request.text wouldn't hold

[10:16:34.0000] <wanderview>
annevk: I guess I would like to see a method like request.stream() so that it can set bodyUsed and return a stream on first call... then reject because of bodyUsed after that

[10:16:46.0000] <wanderview>
which of course can be done with a getter... but would be confusing

[10:16:51.0000] <annevk>
I see, rationale in the ticket?

[10:16:56.0000] <annevk>
I have to go now :-(

[10:17:00.0000] <wanderview>
annevk: k, thanks

[10:26:43.0000] <aklein>
annevk: re: microtasks, did you see my comment?

[12:14:21.0000] <Ms2ger>
So has anything been made public about this Spartan thing?

[12:24:41.0000] <miketaylr>
Ms2ger: seems like the public message is "more details soon"

[12:26:39.0000] <smaug____>
something new about spartan?

[12:26:48.0000] <TabAtkins>
And holograms.

[12:27:39.0000] <wanderview>
they've said "not webkit"

[12:35:13.0000] <smaug____>
/me wonders what is happening @nokia. All the activate@w3c employees are gone?

[13:16:20.0000] <jarek>
Hi

[13:16:47.0000] <jarek>
Is <template> element allowed inside <svg> element?

[13:17:02.0000] <jarek>
The spec says it should inherit from HTMLTemplateElement : HTMLElement

[13:17:40.0000] <jarek>
it would make sense to make it more generic (TemplateElement : Element)

[13:19:51.0000] <Ms2ger>
No

[13:20:31.0000] <jarek>
SVG already has <defs> element which is has very similar functionality

[13:20:51.0000] <jarek>
but I guess it's already too late to rename HTML 5 <template> to <defs>

[13:28:31.0000] <jamesr___>
the html/svg ns split is not very useful nowadays

[13:38:01.0000] <tantek>
jamesr___: it was never useful, but rather XML/SGML dogma.

[13:39:35.0000] <jamesr___>
true, but dogma is less useful these days (not that it was terribly useful technically before, but it had more weight)

[14:00:35.0000] <TabAtkins>
jamesr___: I keep trying to get people to agree to merge the namespaces, but they keep whining about "compatibility" and other such nonsense. ^_^

[14:13:28.0000] <annevk>
aklein: yeah, thanks for that

[14:13:46.0000] <annevk>
aklein: makes total sense, so it's just up to bz or heycam to tie things up

[14:27:25.0000] <aklein>
annevk: sounds good. I was just worried that you actually wished the ordering was always 1, 2, 3, and that I definitely didn't want to mess with

[14:29:06.0000] <annevk>
aklein: if I had better understood things from the get go I might have argued for that, but at this point I'd just like to have the implemented rules written down

[14:30:37.0000] <annevk>
/me read Spartan as SPARTAN, Opera's test infrastructure

[14:30:53.0000] <wanderview>
annevk: whenever I try to comment on one of those stream github issues... I end up feeling like a complete idiot... not sure my opinion should really matter much :-)

[14:32:28.0000] <annevk>
wanderview: please just view it as having a very different perspective, which is very valuable

[14:33:51.0000] <wanderview>
annevk: I just want someone to tell me what bodyUsed means if someone has read half the body through the stream.... its really weird for me if bodyUsed==false there

[14:34:55.0000] <annevk>
wanderview: I think several views are conflated

[14:35:19.0000] <wanderview>
annevk: I gotta run to dinner, but I'll pick up being confused in the morning!  good night!

[14:35:26.0000] <annevk>
wanderview: e.g. I think Domenic wants text() et al to just consume the stream (whatever is in there at the moment) and decode as appropriate (ignoring anything like bodyUsed)

[14:35:34.0000] <annevk>
wanderview: hah okay, nn

[14:41:10.0000] <gsnedders>
annevk: Spartan: better tested than SPARTAN.


2015-01-22
[21:16:58.0000] <hemanth>
Cancelable functions...hrrm...looking for a use case...

[04:29:34.0000] <annevk>
JakeA: I don't understand why you keep bringing up WindowProxy

[04:29:43.0000] <annevk>
JakeA: I don't think it is what you think it is

[04:32:41.0000] <JakeA>
annevk: possibly not. I thought it was one window's insight into another. Like the return from window.open()

[04:33:30.0000] <annevk>
JakeA: no, it's basically a shield for the Window object (you never actually get to hold the Window object, instead you always have a reference to a WindowProxy object)

[04:33:49.0000] <annevk>
JakeA: so it's very much unrelated

[04:34:59.0000] <JakeA>
annevk: but it's the return of window.open, yeah?

[04:35:14.0000] <JakeA>
annevk: and you can't have them in workers because of threads

[04:37:43.0000] <jgraham>
window.open() does return a window proxy, as does window or frames[] or iframe.contentWindow, for example

[04:42:53.0000] <JakeA>
Ahh ok. So I see WindowClient as WindowProxy's worker-safe brother. Obviously it's very limited, and a state snapshot, but that's why I think windowClient.postMessage ends up in window.onmessage

[04:50:46.0000] <annevk>
JakeA: it's the return value of everything that exposes the Window object, because the Window object is not directly exposed...

[04:50:53.0000] <annevk>
JakeA: e.g. window.window also returns a WindowProxy

[04:54:16.0000] <annevk>
JakeA: the analogy doesn't really make much sense to me; window.onmessage and window.postMessage() is for window objects that can directly grab each other; in fact, the window object you invoke postMessage() on gets a message event

[04:54:36.0000] <annevk>
JakeA: that's completely different from sending messages between a document and a worker, which requires a message channel of sorts

[04:56:17.0000] <JakeA>
annevk: hm, so it's breaking the model to suggest windowClient.postMessage is a way of posting a message to a window?

[04:57:42.0000] <annevk>
JakeA: it seems quite different

[05:08:54.0000] <hemanth>
/me is collecting https://github.com/hemanth/coffeescript-equivalents-in-es6

[05:44:54.0000] <JakeA>
annevk: spotted a couple of dragdrop bugs, dunno who best to bug about them (or will they just get picked up?) https://bugzilla.mozilla.org/show_bug.cgi?id=1124645 https://bugzilla.mozilla.org/show_bug.cgi?id=1124646

[05:47:27.0000] <Ms2ger>
JakeA, fwiw, web-platform bugs almost always go in the Core product

[05:48:29.0000] <JakeA>
Ms2ger: thanks for updating those!

[05:49:28.0000] <Ms2ger>
Np

[06:02:38.0000] <hemanth>
/me Are you using packages with vulnerable dependencies? http://nmotw.in/nsp/

[08:08:01.0000] <Ms2ger>
Did one of you Googlers try to get me hired?

[08:17:09.0000] <gsnedders>
Ms2ger: Did someone mistake the Ms2ger AI as being a real person again? :)

[08:17:53.0000] <Ms2ger>
Apparently

[08:24:59.0000] <jgraham>
I always assumed that Ms2ger was the Googlebot

[08:33:16.0000] <hemanth>
:)

[09:55:21.0000] <Ms2ger>
"there are also several new platform features we are thrilled to be releasing in the next preview:"

[09:55:31.0000] <Ms2ger>
"DOM L3 XPath"

[09:55:34.0000] <Ms2ger>
/me cries

[10:02:49.0000] <annevk>
Ms2ger: Microsoft is?

[10:03:01.0000] <Ms2ger>
Yep

[10:03:04.0000] <annevk>
o_O

[10:03:17.0000] <annevk>
I hope they implement the WHATWG edition

[10:29:30.0000] <jgraham>
Ms2ger: I just came to say the same thing :)

[10:57:20.0000] <Domenic>
http://glazkov.com/2004/04/06/xpath-unleashed/

[11:00:18.0000] <jgraham>
I have always prefered http://glazkov.com/2004/02/22/html-css-and-other-curious-stuff/

[11:01:15.0000] <jgraham>
Along with contemporary classics like http://ln.hixie.ch/?start=1042630901&count=1

[11:03:34.0000] <Ms2ger>
"We (the CSS working group) sometimes let years pass between releasing drafts of our modules!"

[11:03:38.0000] <Ms2ger>
Some things never change

[11:04:21.0000] <TabAtkins>
Well, it would take years before we could release a new draft of our process, so...

[11:17:07.0000] <jamesr___>
TabAtkins: y'all need a better process process

[11:17:26.0000] <TabAtkins>
But then it would take years for us to release a new process process draft, so...

[11:42:09.0000] <Hixie>
man, medium.com is spammy

[11:42:25.0000] <Hixie>
don't ever post there

[13:23:34.0000] <TabAtkins>
Is DOM 3 an appropriate spec to reference? Need some place to point a MouseEvent reference to.

[13:26:36.0000] <Domenic>
That does seem to be the latest place it's found :-/

[13:27:12.0000] <Domenic>
TabAtkins: HTML references it. So, probably.

[13:27:24.0000] <Domenic>
https://html.spec.whatwg.org/multipage/infrastructure.html#mouseevent

[13:27:27.0000] <TabAtkins>
Cool.

[13:27:38.0000] <TabAtkins>
Also: AAAAAHHHHH I HATE THE CSS2 SPEC SO MUCH

[13:28:17.0000] <TabAtkins>
They use, throughout the spec, <span class="index-def" title="margin edge"><a name="margin-edge"><strong>margin edge</strong></a></span> rather than <dfn id="margin-edge">margin edge</dfn>

[14:02:29.0000] <Domenic>
Interesting. Any good ideas for "innerHTML, but on text nodes"? The idea being that we want to preserve escapes. I guess maybe just htmlescape(textNode.textContent)?

[14:03:16.0000] <TabAtkins>
Wait, that's the opposite.  .innerHTML does *not* preserve escapes, while .textContent does.

[14:03:38.0000] <TabAtkins>
Or wait, is this on reading or writing?

[14:03:42.0000] <Domenic>
reading

[14:03:55.0000] <TabAtkins>
Okay, opposite then.  And yeah, just escape things yourself.

[14:04:36.0000] <gsnedders>
writing you could do container.innerHTML = s.replace("<", "&gt;"); no?

[14:04:44.0000] <gsnedders>
would that not be safe?

[14:04:58.0000] <TabAtkins>
gsnedders: Have to replace & first, *then* <.

[14:05:03.0000] <TabAtkins>
But then you're safe, yes.

[14:05:11.0000] <gsnedders>
I thought we wanted escapes to be decoded

[14:05:12.0000] <gsnedders>
idk

[14:05:44.0000] <TabAtkins>
Domenic: Really, though, you shouldn't be escaping things early like that. Escape at the point of use; that makes it less likely you'll run into double-escaping bugs.

[14:06:04.0000] <Domenic>
https://github.com/bterlson/ecmarkup/issues/9 is the context

[14:06:05.0000] <TabAtkins>
And when done consistently (or when done with an API that enforces it), it makes it less likely to run into zero-escapign bugs.

[14:06:33.0000] <TabAtkins>
Domenic: Yeah, you have to write out an &lt; in the output there, obviously.

[14:06:47.0000] <TabAtkins>
But do that as you're writing the strings, not when you read them.

[14:06:57.0000] <Domenic>
we are extracting text nodes and passing them through a tool that outputs HTML. But extracting the text nodes via .textContent doesn't work very well.

[14:07:12.0000] <Domenic>
(for these purposes)

[14:07:36.0000] <TabAtkins>
The tool that outputs HTML should be escaping & and < in text.  If it's not, it's buggy.

[14:07:53.0000] <TabAtkins>
Because that's what "outputting HTML" means.

[14:08:13.0000] <TabAtkins>
(It should similarly escape & and the quote character in attributes.)

[14:08:24.0000] <TabAtkins>
(If it fills in attribute values from strings at any point.)

[14:09:04.0000] <Domenic>
Yeah, but currently the tool lets you use HTML tags in your input :-/

[14:09:13.0000] <Domenic>
which is a useful feature

[14:09:22.0000] <Domenic>
but only works by accident

[14:09:29.0000] <Domenic>
it sounds like maybe i need to make it work on purpose.

[14:09:58.0000] <TabAtkins>
Sounds like it's very unhygeinic, then, and is currently just letting things escape or not willy-nilly.

[14:10:30.0000] <TabAtkins>
If it wants to allow <div> as an HTML element, then it needs to distinguish between an input "<" and an input "&lt;".

[14:11:02.0000] <Domenic>
Yes. Well, the *tool* (Ecmarkdown) does. But the process of figuring out what to feed to the tool is currently using textNode.textContent

[14:14:26.0000] <TabAtkins>
Okay? textNodes don't contain HTML. I'm confused about the architecture here. :/

[14:14:39.0000] <Domenic>
Yes. I just realized I am too.

[14:14:48.0000] <Domenic>
Maybe the pass-through html doesn't work in the instance where this is occuring.

[14:15:32.0000] <Domenic>
I will report back!

[14:15:36.0000] <TabAtkins>
Hahaha, ok.


2015-01-23
[00:10:15.0000] <annevk>
es-discuss proves the trivial topic thing once again... "How should we refer to JavaScript?" Oooh, lets write 50 emails within twelve hours!

[00:10:28.0000] <annevk>
let's

[00:11:30.0000] <zcorpan>
i wonder if Spartan has any use of quirks.spec.whatwg.org

[00:18:54.0000] <annevk>
Probably, it's just a major refactoring of Trident from what I heard

[00:19:06.0000] <annevk>
Though the details of what that means are somewhat unclear

[00:27:41.0000] <zcorpan>
i mean since they got rid of their document modes

[02:13:39.0000] <zcorpan>
<!--[if IE ]>

[02:13:39.0000] <zcorpan>
<!doctype html>

[02:13:39.0000] <zcorpan>
<![endif]-->

[02:13:40.0000] <zcorpan>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

[02:13:43.0000] <zcorpan>
view-source:http://www.telegraph.co.uk/

[02:25:41.0000] <jgraham>
Hahaha

[03:18:24.0000] <zcorpan>
hsivonen: time to update https://hsivonen.fi/doctype/ about IE11 and Edge?

[03:22:19.0000] <zcorpan>
hsivonen: also s/(which in invalid in HTML5)//g

[03:23:36.0000] <zcorpan>
hmm, i had forgotten about Chrome Frame

[04:13:32.0000] <hsivonen>
zcorpan: yeah, I should find the time to update the doctype article

[04:19:42.0000] <hemanth>
/me Just made a riotjs timer demo -> http://jsbin.com/dopedo/

[08:00:36.0000] <Domenic>
annevk: I don't really understand the issue or question in https://github.com/slightlyoff/ServiceWorker/issues/607#issuecomment-71176152

[08:46:20.0000] <annevk>
Domenic: we want Response to have some mutable state

[08:46:35.0000] <annevk>
Domenic: question is mostly whether respondWith should halt the mutability

[08:51:53.0000] <Domenic>
annevk: what about "do we expect the Response object to be cloned at that point in a JavaScript-only world?" ? That part seems especially confusing, possibly because I don't understand respondWith

[08:52:30.0000] <annevk>
Domenic: so you have document A and service worker SW

[08:52:43.0000] <annevk>
Domenic: SW has a Response object and hands it back to some fetch from A

[08:52:57.0000] <annevk>
Domenic: how would that work?

[08:54:00.0000] <Domenic>
"hands it back to some fetch from A" does this involve running any code in A? Or is the code entirely in the SW?

[08:56:04.0000] <annevk>
Domenic: I was trying to reason from a platform-implemented-in-JS-perspective

[08:56:13.0000] <Domenic>
Yeah, me too :)

[08:56:27.0000] <annevk>
Domenic: well for A to do a fetch, code has to run, no?

[08:56:46.0000] <Domenic>
ok, so A's JS code does fetch(req)

[08:57:13.0000] <Domenic>
SW's js code does .onfetch = function (e) { e.respondWith(new Response(...)); }

[08:58:01.0000] <Domenic>
A's JS code gets back a Response object from the promise callback

[08:58:19.0000] <Domenic>
Is the question then about the relation between the `new Response(...)` in SW and the Response A gets back in the promise callback?

[09:06:49.0000] <annevk>
Domenic: yeah

[09:07:25.0000] <annevk>
Domenic: and in particular up until what point mutations to it in SW affect what A sees

[09:07:40.0000] <Domenic>
annevk: OK so in that case I think they're definitely cloned, even in pure-JS land. Since it's across "vats" which are super-separated.

[09:07:51.0000] <Domenic>
annevk: so the question would be when exactly the cloning happens I guess.

[09:07:57.0000] <annevk>
Domenic: and whether the object remaining in SW needs to be guarded at some point to further mutations

[09:09:34.0000] <Domenic>
annevk: I would naively guess the cloning happens when the promise you pass to respondWith() has its IDL-registered set of callbacks run

[09:12:00.0000] <annevk>
Domenic: yeah agreed

[09:12:07.0000] <annevk>
Domenic: I arrived at that conclusion too

[09:12:14.0000] <annevk>
Domenic: just not sure how to write this out

[09:12:31.0000] <annevk>
Domenic: should respondWith set a flag on Response that prevents further mutation?

[09:13:48.0000] <Domenic>
Meh, I'm not sure users need to be protected that much. Is this the first mutable state on Response?

[09:14:19.0000] <Domenic>
You'd have to define that the internal slot gets cloned as part of structured clone, for sure.

[09:15:56.0000] <annevk>
So we can't call devs authors, but users is okay?

[09:19:31.0000] <caitp>
authors, editors, biographers, depends what they're developing :u

[09:23:04.0000] <Domenic>
Blah I am used to saying "users" from all the io.js I've been doing recently

[09:46:57.0000] <Ms2ger>
TabAtkins, you should bikeshed FileAPI some time

[10:29:19.0000] <JonathanNeal>
I’m a little unclear on DOM4’s .append method. Will it apply to just Element or Node as well (for document.append usage)?

[10:35:20.0000] <caitp>
i believe that applies to the ParentNode partial interface

[10:35:43.0000] <caitp>
so Element, Document and DocumentFragment

[10:39:24.0000] <JonathanNeal>
caitp: excellent.

[10:40:07.0000] <JonathanNeal>
Does that mean I would find it on the Node prototype? Or only on ParentNode?

[10:40:36.0000] <caitp>
well there's no ParentNode exposed to Js

[10:40:54.0000] <caitp>
you'd see the methods of ParentNode in the interfaces i listed above

[10:43:17.0000] <Ms2ger>
What does the spec say?

[10:44:06.0000] <JonathanNeal>
Ms2ger: that’s what I was having trouble following and decided to asked about.

[10:44:52.0000] <Ms2ger>
Document implements ParentNode; DocumentFragment implements ParentNode; Element implements ParentNode;

[10:45:17.0000] <Ms2ger>
So it's on Document.prototype, DocumentFragment.prototype, and Element.prototype

[10:45:20.0000] <caitp>
eg, if you wanted to polyfill it, you'd have to do it for each of those

[10:45:43.0000] <JonathanNeal>
That’s very helpful. Thanks.

[10:47:44.0000] <Ms2ger>
Relevant spec is https://heycam.github.io/webidl/#es-implements-statements

[10:53:32.0000] <TabAtkins>
Ms2ger: Where's it stored?

[10:55:57.0000] <TabAtkins>
I also really wanna Bikeshed DOM, as there's always tons of links to that from these JS-heavy specs.

[10:56:59.0000] <TabAtkins>
It's gotten a lot easier to link to non-Bikeshedded specs now, but still not 0 effort, so I have work to do.

[10:59:25.0000] <JonathanNeal>
Nice close, caitp.

[10:59:43.0000] <caitp>
huh?

[11:01:03.0000] <JonathanNeal>
https://github.com/angular/angular.js/issues/9967 ?

[11:01:27.0000] <manu>
anyone on this channel know what the current state of the art is wrt. browsers communicating w/ native apps? If I want my website to trigger a native app to handle a payment, for example. What would folks suggest?

[11:01:40.0000] <caitp>
heh, it probably wasn't going to happen

[11:02:20.0000] <JonathanNeal>
caitp: they do it over at https://octane.github.io/promise/tests/browser.html

[11:02:23.0000] <manu>
so, browser page sends JSON data to native app, JSON data is processed by native app and response is sent back to browser page.

[11:02:42.0000] <manu>
is postMessage() + offline mode the "best" way to accomplish something like this nowadays?

[11:04:07.0000] <manu>
(given that web intents is dead?)

[11:42:46.0000] <JonathanNeal>
Would this be a good doc to fork if I wanted to suggest features?

[11:45:58.0000] <JonathanNeal>
^ https://github.com/WebReflection/dom4

[11:46:10.0000] <JonathanNeal>
WRONG

[11:46:29.0000] <JonathanNeal>
Ahem https://github.com/whatwg/dom

[11:48:44.0000] <JonathanNeal>
When did replace become replaceWith? How can I keep up to date with these changes?

[11:54:11.0000] <miketaylr>
just a few days ago JonathanNeal

[11:54:12.0000] <Domenic>
JonathanNeal: https://github.com/whatwg/dom/commits/master seems like a good way to do so.  There's even RSS: https://feedly.com/i/subscription/feed/https://github.com/whatwg/dom/commits/master.atom

[12:00:24.0000] <JonathanNeal>
@Domenic great you just tell me where I can stuff forEach =D

[12:00:43.0000] <Domenic>
JonathanNeal: already there: https://dom.spec.whatwg.org/#collections:-elements

[12:02:26.0000] <JonathanNeal>
So, for polyfilling, Elements can mirror to NodeList? And HTMLCollection is the older, living collection version, right?

[12:03:35.0000] <Domenic>
I don't know what "mirror to NodeList" means

[12:04:09.0000] <JonathanNeal>
Until I see global.Elements, I can expect Elements = NodeList?

[12:04:10.0000] <Domenic>
The main difference between NodeList and HTMLCollection is the former contains nodes and the latter contains elements

[12:04:22.0000] <Domenic>
No, you cannot... they are different things entirely.

[12:05:31.0000] <JonathanNeal>
Okay, so querySelectorAll and childNodes will still return NodeList or will they return Elements?

[12:05:46.0000] <Domenic>
They will return NodeList

[12:06:02.0000] <Domenic>
Which can never have forEach per https://stackoverflow.com/questions/13433799/why-doesnt-nodelist-have-foreach/27024188#27024188

[12:06:04.0000] <JonathanNeal>
There’s this line in the spec “It's the new NodeList / HTMLCollection.”

[12:06:22.0000] <Domenic>
Yes. That doesn't change what other things return.

[12:07:46.0000] <JonathanNeal>
Having it on query but not nodeList will probably bum folks out.

[12:08:08.0000] <JonathanNeal>
Despite the concat bug.

[12:08:47.0000] <Domenic>
The hope is in the beautiful future you won't be seeing many NodeLists

[12:09:33.0000] <JonathanNeal>
How does that happen? Are there significant changes to DOM traversing coming?

[12:12:14.0000] <Domenic>
Well .queryAll() will take care of many cases

[12:12:22.0000] <JonathanNeal>
Ah, so like queryAll(':nth-child(n)’) ?

[12:12:51.0000] <Domenic>
I... don't know why you would ever do that.

[12:13:11.0000] <JonathanNeal>
I … want a Elements collection. =)

[12:13:24.0000] <Domenic>
what elements are represented by :nth-child(n)

[12:13:29.0000] <Domenic>
Is that the same as "> *"

[12:13:45.0000] <JonathanNeal>
Sure, either selector.

[12:13:45.0000] <Domenic>
No I think it's the same as "*"

[12:14:40.0000] <Domenic>
But yes, in general, use .queryAll("> *") instead of .children, etc.

[12:14:41.0000] <JonathanNeal>
So, folks would need to queryAll(‘>*’) ?

[12:15:03.0000] <Domenic>
Maybe we add more aliases once the very basic part of the idea proves its worth

[12:15:20.0000] <Domenic>
although with children and childNodes it's already getting kind of crowded in there

[12:15:43.0000] <JonathanNeal>
And this is to avoid the thing with named properties on HTMLCollection and concat treating non-array-iterables weird?

[12:16:17.0000] <Domenic>
yeah basically. stated more generally, to avoid the problem where making NodeList or HTMLCollection subclass Array breaks the web.

[12:16:58.0000] <Domenic>
You also get benefits that .queryAll("> *") actually works, whereas .querySelectorAll("> *") throws, because of the slightly-better way in which queryAll interprets selectors

[12:18:51.0000] <JonathanNeal>
I’ve been eager for queryAll since Resig blogged about the issues with querySelectorAll.

[12:19:15.0000] <JonathanNeal>
I am surprised browsers weren’t faster to adopt it, but I guess it’s a win for the Elements class.

[12:21:36.0000] <Domenic>
They're waiting for ES6 subclassing to work

[12:22:20.0000] <TabAtkins>
Domenic: :nth-child(n) is identical to "*".

[12:22:27.0000] <TabAtkins>
Except for specificity, which doesn't matter here. ^_^

[12:22:55.0000] <JonathanNeal>
I just wanted to write something worse than *, is all.

[12:50:12.0000] <JonathanNeal>
Anything going on spec-wise with event listeners / handlers or event delegation?

[13:24:29.0000] <TabAtkins>
Anyone know where the File API source is kept?  Can't find if there's a github or something for it.

[13:25:34.0000] <tantek>
probably in a file system

[13:25:52.0000] <TabAtkins>
You lose 1 point for purposeful obtuseness.

[13:26:13.0000] <tantek>
File / file? too obv? sorry.

[13:26:29.0000] <TabAtkins>
No, no, I got it. You still lose the point.

[13:27:08.0000] <TabAtkins>
I wanna Bikeshed it, but dunno where it's kept; I'd vastly prefer messing with the source over the generated output.

[13:36:50.0000] <TabAtkins>
annevk: Could I Bikeshed DOM?

[13:40:00.0000] <JonathanNeal>
Hey, we might all have opinions on bikeshedding that should be discussed before you go and bikeshed.

[13:40:08.0000] <TabAtkins>
Not allowed.


2015-01-24
[01:18:08.0000] <annevk>
TabAtkins: yeah

[01:18:30.0000] <annevk>
TabAtkins: though I'd like at least two people to review the diff given the regressions we had with URL

[09:11:11.0000] <TabAtkins>
annevk: kk


2015-01-25
[20:44:24.0000] <TabAtkins>
Urg, why did nobody tell me DOM was 9000 lines long? This is gonna take a while.

[20:44:46.0000] <TabAtkins>
It speeds up as I get through it, but it still took about 3 hours to do 20%.

[21:38:17.0000] <Domenic>
If we told you, you might be scared off! :P

[21:38:25.0000] <Domenic>
It's easy to forget about treewalker stuff...

[22:41:42.0000] <TabAtkins>
Domenic: Luckily most of the work is search/replacing linking syntax, so as I work through it more and more of the links have already been replaced, and I can just plow through fixing the occasional things.

[22:42:01.0000] <TabAtkins>
I'm not going to kill myself switching it over to Markdown headings and lists like I did for CSSOM View.

[22:42:16.0000] <Domenic>
Heh

[01:39:15.0000] <hemanth>
http://dev.w3.org/ is down? Or is it just me?

[01:41:26.0000] <annevk>
hemanth: you

[01:45:46.0000] <hemanth>
:(

[01:46:16.0000] <hemanth>
::spelling-error nice selector :D

[02:11:25.0000] <jsx>
How can I start a CSS list counter from a negative value?

[07:20:03.0000] <TabAtkins>
jsx: same way you start it at any particular value - supply a starting value in counter-reset when you establish the counter.

[07:21:20.0000] <TabAtkins>
(Usually you want the starting value to be one less than the first <li> value, since counter-increment happens before display.)

[07:41:37.0000] <jsx>
TabAtkins: thanks! that will do. I wanted to add an example of using the negative descriptor of @counter-style

[11:22:30.0000] <pyfisch>
hello. are there any HTTP status code smaller than 100 or greater 999 out there? Because I am contributing to a HTTP library and we failed a W3C that used a status code bigger than 599 as some webapps may do. We can not (or do not want to) support all integers, we want to limit the number of status codes as much as possible.

[11:23:11.0000] <Ms2ger>
It's a 16-bit field, no?

[11:24:57.0000] <pyfisch>
Ms2ger: no it an enum.

[11:25:36.0000] <pyfisch>
actually it is hyper http lib written in rust.

[11:25:45.0000] <Ms2ger>
I know hyper :)

[11:26:20.0000] <pyfisch>
Ms2ger: yes your name sounded familiar. :-D and you contribute to rust-lang ;-)

[11:26:33.0000] <Ms2ger>
Rarely, mostly Servo :)

[11:26:54.0000] <Ms2ger>
Anyway, XHR has a 16-bit attribute for it

[11:28:23.0000] <pyfisch>
ok servo, they asked us to change it :-)

[11:28:31.0000] <Ms2ger>
Can't find anything that restricts it to that range, though...

[11:28:39.0000] <pyfisch>
so 0 would be a valid status code?

[11:28:44.0000] <Ms2ger>
Yeah

[11:28:56.0000] <pyfisch>
but I hope it is unsigned? o_O

[11:28:59.0000] <Ms2ger>
For some value of valid :)

[11:29:05.0000] <Ms2ger>
Yes

[11:29:36.0000] <Ms2ger>
HTTP1.1 seems to claim it's three-digit

[11:31:15.0000] <pyfisch>
and what about HTTP/2?

[11:33:13.0000] <pyfisch>
looks like also 3 digit https://http2.github.io/http2-spec/#HttpResponse it refers  [RFC7231]

[11:34:22.0000] <Ms2ger>
Yep, seems that way

[11:34:48.0000] <pyfisch>
so 42 would be a not very much valid status code

[11:35:20.0000] <Ms2ger>
Hmm

[11:35:25.0000] <Ms2ger>
Maybe 042 would, though

[11:36:35.0000] <pyfisch>
yes 042 would be

[11:40:25.0000] <Ms2ger>
/me makes a note to write tests

[11:43:54.0000] <pyfisch>
Ms2ger: https://github.com/hyperium/hyper/issues/177

[12:01:09.0000] <pyfisch>
Ms2ger: both firefox and chromium deal with 42 and 1024 as codes but only chromium understands 2147483647, firefox thinks it is 200. You will have to do much work until Firefox is as good as Chrome again :-P

[12:04:46.0000] <Ms2ger>
Ha

[12:10:34.0000] <pyfisch>
Ms2ger: but you really have nice integer underflow for firefox HTTP/1.0 -5 UNKNOWN results in 65531 ;-)

[12:10:47.0000] <pyfisch>
this has not even chromium

[12:12:39.0000] <Ms2ger>
Woops...

[12:33:12.0000] <pyfisch>
bye

[14:16:38.0000] <JakeA>
Could a friendly Mozillian triage this https://bugzilla.mozilla.org/show_bug.cgi?id=1125667 - SVGs served from blob urls break

[14:16:46.0000] <JakeA>
I think it could be the url resolver, not sur

[14:16:47.0000] <JakeA>
e


2015-01-26
[23:49:26.0000] <ondras>
morning

[23:49:50.0000] <ondras>
inside an attribute event handler, the element is added to the scope?

[00:10:06.0000] <zcorpan>
ondras: you mean <p onclick="">? (not .onclick = function(){})

[00:13:30.0000] <ondras>
zcorpan: yeah, already found out: https://html.spec.whatwg.org/multipage/webappapis.html#internal-raw-uncompiled-handler

[00:13:50.0000] <ondras>
zcorpan: I was puzzled by body onclick having "body" in scope, while body onload NOT having body in scope

[00:14:09.0000] <ondras>
apparently onload does not belong to body :)

[00:14:14.0000] <zcorpan>
ah, yeah

[00:31:33.0000] <zcorpan>
hsivonen: MikeSmith: ping https://github.com/validator/validator/pull/25

[01:01:17.0000] <benjamingr>
Is the execution order of messages posted with `postMessage` guaranteed with regards to other scheduled tasks?

[01:01:27.0000] <benjamingr>
for example - is the result of the following guaranteed to always be one thing? http://jsfiddle.net/f45a5pdx/

[01:01:39.0000] <benjamingr>
Domenic: you'd probably know ^

[03:24:26.0000] <zcorpan>
hsivonen: it seems MS have now done what you suggested they do back in the days. http://www.smashingmagazine.com/2015/01/26/inside-microsofts-new-rendering-engine-project-spartan/ https://hsivonen.fi/ie6/ (except not for ie6, just ie5.5, 7, 8, 9, 10, 11)

[03:30:46.0000] <zcorpan>
(maybe "enterprise mode" was already a thing in ie11)

[04:34:44.0000] <MikeSmith>
zcorpan: merged the validator change

[04:34:48.0000] <MikeSmith>
thanks

[04:34:58.0000] <zcorpan>
cheers

[04:35:00.0000] <MikeSmith>
sorry for not getting to it sooner

[04:35:14.0000] <zcorpan>
no worries

[04:53:54.0000] <Ms2ger>
Hm, Presto had navigator.appMinorVersion?

[05:15:05.0000] <zcorpan_>
seems so

[05:19:49.0000] <zcorpan_>
also browserLanguage, userLanguage

[05:20:57.0000] <Ms2ger>
browserLanguage only if navigator.appName == "Microsoft Internet Explorer"

[05:22:25.0000] <zcorpan_>
looks like both of those have some usage on github

[05:24:10.0000] <Ms2ger>
return (navigator.browserLanguage || navigator.language || navigator.userLanguage).substr(0,2)

[05:24:10.0000] <zcorpan_>
"navigator.language" 138,088 "navigator.userLanguage" 51,830 "navigator.browserLanguage" 14,089

[05:24:45.0000] <zcorpan_>
"navigator.languages" 991

[07:00:17.0000] <JonathanNeal>
Are any specs in the works that improve upon addEventListener?

[07:06:11.0000] <Ms2ger>
How so?

[07:32:41.0000] <JonathanNeal>
@Ms2ger, how so to improve upon addEventListener? Returning an event object that could disable itself. Promisified like fetch or streamed or whatever the word is. Integrated delegation (without mimicing via .closest).

[09:35:15.0000] <Domenic>
benjamingr: I don't believe so. UAs can pick from any of multiple queues when it's time to execute a task, at their discretion. That is how e.g. painting gets priority over setTimeout IIRC.

[09:36:16.0000] <Domenic>
more confusion between promises and event listeners, sigh, when will it ever end.

[09:37:39.0000] <Ms2ger>
What goes into which queue should be defined, though

[09:37:45.0000] <Ms2ger>
Not sure if Promises do

[09:42:44.0000] <jgraham_>
Hmm?

[10:30:50.0000] <benjamingr>
Domenic: that's what I thought - thanks!

[13:27:35.0000] <nicholasserra>
Anyone have any experience with python html5lib?

[13:28:23.0000] <boogyman>
nicholasserra: dont ask to ask, just as your actual question

[13:28:49.0000] <nicholasserra>
boogyman: Wasn't sure, as this channel seems to have a pretty broad purpose. Thanks

[13:29:43.0000] <boogyman>
If it's a question about #python or ##python that would probably be a better place to ask, but if its a question about the HTML specs, here is appropriate.

[13:30:41.0000] <nicholasserra>
Well, i'm using the python html5lib package to sanitize some html, but it seems to be escaping ampersands inside of an href attribute, which seems like a bug to me. Not sure if i'm not passing a correct flag. The source is pretty hard to dig into. https://gist.github.com/nicholasserra/6bd1ff7650e398127f19

[13:31:13.0000] <boogyman>
that's a #python or ##python question

[13:31:34.0000] <nicholasserra>
Gotcha thanks

[13:31:46.0000] <boogyman>
cheers

[13:49:57.0000] <SimonSapin>
to be fair the html5lib authors hang out here

[14:26:42.0000] <TabAtkins>
You're supposed to escape ampersands inside of attribute values, tho.

[14:34:14.0000] <jgraham>
nicholasserra: That is a #whatwg question, not a #python question

[14:34:15.0000] <jgraham>
:)

[14:36:18.0000] <jgraham>
nicholasserra: The rules around escaping ampersands in attributes are somewhat complicated, but in general it should always be OK to escape them

[14:36:42.0000] <jgraham>
Is it causing you an actual problem?

[14:51:22.0000] <nicholasserra>
jgraham: Yes, as it is in an href, and the link is no longer valid

[14:52:14.0000] <nicholasserra>
I opened up an issue with all the details too: https://github.com/html5lib/html5lib-python/issues/180

[15:11:00.0000] <jgraham>
nicholasserra: So afaict when you parse the output of that you get the same as when you parse the input i.e. everything is working as expected

[15:13:27.0000] <nicholasserra>
jgraham: What do you mean? To clarify my issue, if I try to sanitize an anchor tag with href like google.com/?key=1&key=2, the href will be changed to ?key=1&amp;key=2

[15:19:30.0000] <zewt_>
dpm

[15:19:35.0000] <zewt_>
typing hard

[15:19:44.0000] <zewt_>
don't suppose there's a magic setting to un-break chrome user scripts

[15:20:13.0000] <zewt_>
one day google decided to just kill off user scripts saying "not from chrome web store"

[15:20:16.0000] <jgraham>
nicholasserra: The output will yes. But reparsing that output will give you the same DOM as your original input

[15:20:31.0000] <jgraham>
So I don't see why it's a problem

[15:22:33.0000] <nicholasserra>
The DOM is fine, but now I have an href with an invalid link

[15:22:38.0000] <nicholasserra>
jgraham: ^

[15:23:15.0000] <nicholasserra>
Unless html entities are parsed by the browser. I don't think that's the case though.

[15:24:53.0000] <nicholasserra>
tldr <a href="test.com/&"> goes in, <a href="test.com/&amp;"> comes out. Different href attrs

[15:25:25.0000] <zewt_>
that looks right to me

[15:25:48.0000] <jgraham>
nicholasserra: It is the case. See e.g. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3384

[15:26:34.0000] <zewt>
it's not going to remember which characters were escaped in the input, you just always escape going out

[15:27:14.0000] <zewt>
it could probably figure out when escaping isn't needed, but nobody would risk escaping-related security bugs just to prettify html a little

[15:27:42.0000] <zewt>
(for some value of nobody)

[15:27:45.0000] <nicholasserra>
Nice. I guess I never knew that the browser would treat html special chars as their regular character counterparts when parsing the attribute. Still seems generally wrong to me though.

[15:28:09.0000] <nicholasserra>
I would expect those URI attrs to be excluded from any parsing or treatment in general.

[15:28:14.0000] <zewt>
(you mean URL)

[15:28:24.0000] <zewt>
how would you put a quote in the string?

[15:28:33.0000] <jgraham>
nicholasserra: The spec and all browsers disagree with your expectations, though :)

[15:29:25.0000] <zewt>
i guess you're thinking that you could URL-escape but not HTML-escape, which I guess is fair, but incorrect

[15:29:40.0000] <jgraham>
Not all attributes are URLs

[15:29:47.0000] <nicholasserra>
The code from html5lib refers to them as URI. But yeah.

[15:29:50.0000] <zewt>
since the ... yeah that's a shorter way of typing what i was about to type

[15:30:15.0000] <nicholasserra>
Yeah, I guess I would imagine that urlencoding it would make more sense

[15:30:17.0000] <jgraham>
It probably shouldn't say URI but it's hard to change the API now

[15:30:32.0000] <nicholasserra>
Weird stuff

[15:31:05.0000] <nicholasserra>
thanks for sorting it out with me zewt and jgraham

[15:31:11.0000] <jgraham>
nicholasserra: np

[15:31:17.0000] <nicholasserra>
Im going to leave my issue open to see if anyone else has an opinion on it

[15:31:53.0000] <zewt>
not really good practice

[15:32:55.0000] <zewt>
since it's forcing somebody somewhere to spend time on it (and just repeating what we just said)

[15:34:19.0000] <nicholasserra>
While you're both right that it will work, I still don't think URL attributes should even be parsed. It's probably a wontfix issue, but i'm curious if the authors have any more input.

[15:35:16.0000] <zewt>
given that that's not what browsers actually do, that's frankly just not a valid thing to think :)

[15:36:29.0000] <zewt>
better off posting to a mailing list if you want to ask for opinions--filing a bug is sort of like demanding them

[15:36:52.0000] <zewt>
(anyway, i'm not the one who has to respond to the bug report)

[15:38:00.0000] <nicholasserra>
That's fair. The google group for html5lib is pretty dead. Any suggestions on where to ask that question?

[15:39:00.0000] <jgraham>
nicholasserra: FWIW I am one of the principal authors of html5lib

[15:39:04.0000] <zewt>
it's not really html5lib-specific, you could ask anywhere html-related, eg. stackoverflow

[15:39:21.0000] <zewt>
since you're asking about html parsing, html5lib is just one implementation of that

[15:40:06.0000] <nicholasserra>
Gotcha. Thanks. I closed my issue. Maybe i'll bring it up elsewhere. jgraham zewt

[15:40:31.0000] <zewt>
(another reason what you're suggesting is incorrect: browsers don't know whether an attribute contains a url in advance; it might be a polyfilled attribute that it doesn't know about yet)

[15:42:25.0000] <nicholasserra>
I guess my gripe is more with the parser than the browser. Mainly: If the browser will just read the html special character as its regular character counterpart, and the parser knows that it's in a URL attribute, when why bother escaping it?

[15:42:49.0000] <zewt>
the parser doesn't necessarily know anything about the contents of an attribute

[15:43:05.0000] <nicholasserra>
In html5lib, it has a list of attrs that are marked as URL attributes

[15:43:06.0000] <zewt>
(and it shouldn't have to--that's bad layering)

[15:43:43.0000] <zewt>
and that's not exhaustive: when a new attribute is added to HTML that contains a URL, it won't know about it

[15:43:56.0000] <zewt>
which means HTML would parse differently as attributes are added

[15:44:16.0000] <nicholasserra>
So basically you're saying it should sanitize everything just in case?

[15:45:55.0000] <zewt>
nothing to do with sanitizing, if you say <foo srcurl="http://google.com/&amp;">, and you look at srcurl in javascript on the page, some browsers would say "http://google.com&amp;" and others would say "http://google.com&"


2015-01-27
[00:02:29.0000] <charl>
good morning

[00:15:06.0000] <iandevlin>
Morning

[00:46:08.0000] <annevk>
hsivonen: https://news.ycombinator.com/item?id=8950243

[01:28:52.0000] <hsivonen>
annevk: thanks.

[01:30:49.0000] <hsivonen>
annevk: little endian being niche that goes agains tradition is pretty much like the Web being niche

[01:31:02.0000] <annevk>
uhuh

[04:04:23.0000] <annevk>
JakeA: Domenic: how do you feel about adding Response.prototype.ok = function() { return this.status => 200 && this.status < 300 }?

[04:06:36.0000] <jgraham>
>=

[04:09:47.0000] <jgraham>
annevk: So requests has that, but I have never been convinced that the semantics are quite perfect. But I guess it's not obviously a terrible idea

[04:10:12.0000] <annevk>
jgraham: what problems did you run into?

[04:11:32.0000] <jgraham>
Well I haven't, but I can imagine situations where getting a 204 would be just as unexpected as a 100

[04:12:09.0000] <jgraham>
(well unless 1xx responses are handled at a lower layer I guess. Does anyone actually produce those?)

[04:12:37.0000] <jgraham>
Anyway I guess on balance it's a good idea

[04:13:08.0000] <gsnedders>
AFAIK it's only unknown status codes that should be treated as the base one

[04:13:16.0000] <gsnedders>
and we know that all of those in HTTP/1.1 exist

[04:13:32.0000] <annevk>
jgraham: I believe 1xx is ignored and not exposed

[04:13:35.0000] <gsnedders>
whether you want to lump 201–5 in with 200 is a separate choice

[04:13:52.0000] <annevk>
jgraham: mnot would like us to expose them...

[04:14:24.0000] <annevk>
CORS has a 200-299 check somewhere so there's at least one place in the platform where we use this

[04:15:13.0000] <Ms2ger>
annevk, do you know if HTTP defines what to do with status codes that aren't three digits?

[04:15:57.0000] <annevk>
Ms2ger: parse error

[04:16:31.0000] <annevk>
Ms2ger: maybe that turns it into a HTTP/0.9 response?

[04:16:48.0000] <annevk>
Ms2ger: would be an interesting test for web-platform-tests

[04:18:11.0000] <Ms2ger>
Uhuh

[04:19:21.0000] <gsnedders>
in most things it turns into a HTTP/0.9 response, IIRC

[04:19:43.0000] <Ms2ger>
How do you detect that?

[04:20:00.0000] <annevk>
Ms2ger: 0.9 means the entire response is the body

[04:20:02.0000] <gsnedders>
You're aware HTTP/0.9 has no headers?

[04:20:08.0000] <Ms2ger>
No :)

[04:20:22.0000] <annevk>
It's why we have sniffing

[04:20:32.0000] <annevk>
And why <plaintext> is a thing

[04:21:03.0000] <annevk>
HTTP and HTML used to be intertwined a bit

[04:23:25.0000] <Ms2ger>
"Well-behaved servers should retrict line length to 80 characters"

[04:25:42.0000] <ms7821>
does http/2 mention simple-request?

[04:47:27.0000] <annevk>
Fullscreen API and <dialog>. Anyone from Chromium other than falken and philipj who can give input to this bug? https://www.w3.org/Bugs/Public/show_bug.cgi?id=27865

[04:47:39.0000] <annevk>
Also, anyone know plans from other vendors regarding <dialog>?

[04:49:50.0000] <gsnedders>
ms7821: I presume not.

[05:39:27.0000] <zcorpan>
Ms2ger: it seems to me it would be about equally hard for blink to add taintEnabled as it is for gecko to drop it

[05:39:40.0000] <Ms2ger>
zcorpan, seems plausible

[05:39:47.0000] <Ms2ger>
Stuff sucks

[05:40:10.0000] <zcorpan>
also no incentive apart from "interop!!"

[05:41:35.0000] <zcorpan>
i guess the spec should make it optional or something

[05:44:22.0000] <Ms2ger>
Yay interop :)

[06:05:04.0000] <annevk>
Warnings haven't helped?

[06:43:31.0000] <annevk>
GPHemsley: we should probably add a warning to https://wiki.whatwg.org/wiki/Sanitization_rules that it is not maintained and should probably not be used as reference without scrutiny

[06:43:57.0000] <annevk>
GPHemsley: did you have a template for that?

[06:58:10.0000] <rubys>
annevk: +1 to warning on wiki/Sanitization_rules ... it was never more than a work in progress

[07:29:52.0000] <Domenic>
annevk: seems ok, a bit sugary and possibly encouraging bad habits (e.g. being too lenient, when you expect a 201 a 200 is generally not ok). If another spec uses the check that does make me feel better. Probably a good idea on balance.

[07:30:43.0000] <annevk>
Domenic: yeah, I'm hesitant too, really depends on the protocol

[07:31:54.0000] <Domenic>
I think devs will like it. Just us grouchy pedants who grumble.

[07:32:35.0000] <annevk>
The issue mentioned in that thread about filtering out non-2xx does exist and this does help a lot with that so...

[07:32:52.0000] <annevk>
We'll see, it's fairly trivial to ignore if it's really only relevant for CORS

[08:07:37.0000] <GPHemsley>
annevk: I added {{obsolete}}. Is there a better place to point to, or is it just abandoned?

[08:32:51.0000] <annevk>
GPHemsley: abandonware though now there's template strings it might be worth looking into having a sanitized parser again

[08:32:56.0000] <annevk>
GPHemsley: though it'd be hard

[08:33:39.0000] <GPHemsley>
annevk: Alright, I was just curious as to whether there might be values for the 'spec' or 'see' parameters.

[08:33:59.0000] <GPHemsley>
(Which would point people in a better direction.)

[08:34:30.0000] <annevk>
GPHemsley: I don't think there is anything

[08:52:32.0000] <annevk>
/me reads TAG minutes

[09:40:23.0000] <smaug____>
hmm, is telemetry data wrong, or has mutation event usage gone down

[09:40:40.0000] <smaug____>
where is the tool to see feature usage on chromium?

[09:42:00.0000] <annevk>
smaug____: https://www.chromestatus.com/metrics/feature/timeline/popularity/148

[09:43:03.0000] <annevk>
There seems to be a downward trend but still quite high

[09:43:41.0000] <annevk>
Are you guys going to Edge London?

[09:43:50.0000] <annevk>
I was thinking of going

[09:44:17.0000] <annevk>
27 June

[09:45:03.0000] <smaug____>
yeah, still a bit high

[09:46:18.0000] <annevk>
But yay downward trend I guess

[09:46:25.0000] <annevk>
I wonder if we have to define it

[09:49:24.0000] <smaug____>
oh, chrome doesn't warn about use of mutation events

[09:49:45.0000] <annevk>
Paging fool... why is he not online?

[09:50:40.0000] <annevk>
SimonSapin: hey, I had a question about Servo. Is document.write() there? Is there much parallel code? Is </script> a special code path?

[09:51:08.0000] <Ms2ger>
No document.write()

[09:52:58.0000] <annevk>
smaug____: perhaps we should ask blink-dev?

[09:54:13.0000] <SimonSapin>
annevk: In order: not yet (https://github.com/servo/html5ever/issues/6), yes (especially in layout code), apparently not yet (https://github.com/servo/html5ever/blob/fc515000c0/src/tree_builder/rules.rs#L783)

[09:54:54.0000] <Ms2ger>
Nothing parallel in HTML parsing, though

[09:55:07.0000] <SimonSapin>
right

[09:55:50.0000] <SimonSapin>
In theory we could run character decoding, tokenization and tree building each in a thread, in a pipeline. But I don’t think we do.

[09:57:00.0000] <annevk>
SimonSapin: no parallel tree building?

[09:57:03.0000] <jgraham>
I think that tokenization-in-a-task was mooted as a GSoC project

[09:57:29.0000] <jgraham>
Moving charset decoding to a task seems like it might not be much of a win?

[09:57:51.0000] <SimonSapin>
I have no idea

[09:58:02.0000] <SimonSapin>
"mooted" as in we established it was not a win?

[09:59:19.0000] <annevk>
From another angle, how much hurt would it be to run script for creation and insertion of elements that have a dash in them?

[09:59:34.0000] <TabAtkins>
mooted as in "discussed"

[09:59:47.0000] <TabAtkins>
"moot" has multiple, somewhat opposing, meanings.

[10:00:03.0000] <annevk>
It would mean that part of the code could no longer be run in parallel

[10:44:57.0000] <annevk>
hsivonen: also https://twitter.com/marshray/status/560121170373386240

[11:19:43.0000] <hsivonen>
krijnhoetmer: thanks for the "Previous day" and "Next day" links

[11:33:51.0000] <Ms2ger>
^

[13:53:13.0000] <Domenic>
TabAtkins: can my text macros be empty strings somehow?

[13:53:28.0000] <TabAtkins>
Right now, no, but I can relax error-checking to allow it.

[13:53:49.0000] <Domenic>
There might be a better way... let me open an issue with a bit more details

[14:01:39.0000] <Domenic>
TabAtkins: let me know if https://github.com/tabatkins/bikeshed/issues/335 makes sense

[14:02:03.0000] <TabAtkins>
Yeah, it does.

[14:03:11.0000] <TabAtkins>
Domenic: I'd been planning to add some sort of conditional element, so you could delete elements unless they matched certain attributes of your document.  (Probably starting with just status.)

[14:03:19.0000] <TabAtkins>
I think that'd work for you?

[14:03:37.0000] <Domenic>
TabAtkins: sounds excellent, as long as it works with custom metadata lines like `!Version History`

[14:03:40.0000] <TabAtkins>
I'd still need to do the "remove empty <dd>s" pass.

[14:04:00.0000] <TabAtkins>
Oh wait though. The problem is that you can't pass !Version History conditionally, right?

[14:04:04.0000] <Domenic>
Right

[14:04:11.0000] <TabAtkins>
Let's just figure out how to fix that directly.

[14:04:13.0000] <Domenic>
If I could pass empty strings then I could end up with an empty <dd>

[14:04:25.0000] <Domenic>
which visually is fine

[14:05:27.0000] <Domenic>
TabAtkins: actually, this might be unnecessary. I think I can just add a "back to the living standard" link and substitute that where the "go to commit snapshot" link would be

[14:05:28.0000] <Domenic>
Much easier.

[14:05:54.0000] <TabAtkins>
Heh, kk.  And useful!

[14:06:15.0000] <TabAtkins>
but also, I think I can make custom metadata work just fine.

[14:06:43.0000] <Domenic>
Yeah, I figured it would be redundant with the giant red floating banner, but it's nice for symmetry... this way the TOC doesn't jump up and down a line as you go between LS and snapshot

[14:13:13.0000] <TabAtkins>
Domenic: Say I was wanting to integrate ecmd into Bikeshed directly.  Most of the inline markup turns into plain HTML, but some turn into ecmarkup elements. What's the significance of these, and how should I reproduce their effects in HTML?

[14:13:30.0000] <TabAtkins>
Specifically, <emu-const> and <emu-nt>.

[14:14:10.0000] <Domenic>
TabAtkins: the idea is they are semantically better than <span class="const">, could potentially be custom-elemented in the future (although it seems unlikely you'd be able to do anything useful there), and that the EMU stylesheet will style them specifically.

[14:14:27.0000] <TabAtkins>
So I should stick with them, then?

[14:14:45.0000] <Domenic>
I think so

[14:14:48.0000] <Domenic>
See also https://bterlson.github.io/ecmarkup/

[14:15:13.0000] <Domenic>
Also: are you really looking into this!? I would be sooo excited.

[14:17:06.0000] <TabAtkins>
Yeah.

[14:17:12.0000] <Domenic>
^__^

[14:17:33.0000] <TabAtkins>
I've got more control over what kinds of markup shorthands can exist in a given document, so that gives me more freedom to add additional types of shorthands.

[14:17:44.0000] <TabAtkins>
Like, for example, all the JS shorthands.


2015-01-28
[17:31:59.0000] <rcombs>
is there a channel about, or relevant to, HTTP/2?

[17:36:54.0000] <rcombs>
because I'd love to see it include support for range requests for resources of indeterminate size

[23:02:39.0000] <zcorpan>
annevk: what was the solution to "FATAL ERROR: Functions/methods must end with () in their linking text, got 'dom-MediaList-item'." ?

[23:32:11.0000] <error08del>
hello

[23:32:23.0000] <zcorpan>
hello error08del

[23:33:30.0000] <error08del>
it's quiet here

[23:37:55.0000] <annevk>
zcorpan: I'm not sure

[23:37:58.0000] <annevk>
zcorpan: add ()?

[23:56:17.0000] <zcorpan>
that seems to silence the error at least

[23:56:28.0000] <zcorpan>
next up FATAL ERROR: No 'idl-name' refs found for 'EmptyString'.

[00:03:45.0000] <annevk>
zcorpan: I don't really know how bikeshed works though

[00:04:02.0000] <annevk>
zcorpan: rubys converted the URL Standard to use it, but I haven't really done much updating of that

[00:04:08.0000] <zcorpan>
ok

[00:06:06.0000] <darobin>
also I think rubys always uses bleeding edge Bikeshed

[00:06:11.0000] <annevk>
http://www.cc.gatech.edu/~sakhshab/evoarch-extended.pdf was somewhat interesting, though I didn't really follow the math

[00:07:21.0000] <zcorpan>
darobin: right now i use https://api.csswg.org/bikeshed/ since i failed to update my local copy

[00:07:55.0000] <darobin>
zcorpan: ah, yeah, no idea how fresh that one is; I wouldn't be surprised if it were quite far behind

[00:08:12.0000] <zcorpan>
the docs says it should be kept up-to-date

[00:08:29.0000] <darobin>
zcorpan: not sure what you mean by "failed to update" though, you can just git clone it and run it from the repo

[00:08:42.0000] <darobin>
oh, if the docs say it then it must be true!

[00:09:18.0000] <zcorpan>
i wanted to be able to use `bikeshed` from the command line

[00:09:49.0000] <darobin>
ln is you friend :)

[00:10:41.0000] <darobin>
or whatever the python equivalent of "npm link" is, if that exists

[00:15:28.0000] <zcorpan>
hmm, seems like httparchive data is actually 129236 pages, not ~300,000 pages

[01:08:34.0000] <annevk>
darobin: Microsoft

[01:08:48.0000] <darobin>
annevk: you mean like Silverlight

[01:08:55.0000] <annevk>
darobin: I mean like IE6

[01:08:55.0000] <darobin>
if so got that listed, ta

[01:09:09.0000] <darobin>
I wouldn't call that betting against the Web

[01:09:17.0000] <darobin>
more like going it alone on the Web :)

[01:09:20.0000] <annevk>
Not updating it

[01:09:24.0000] <darobin>
oh that

[01:09:36.0000] <darobin>
well, would you call it a bet though? more like falling asleep

[01:09:56.0000] <annevk>
Yes, the bet was on Longhorn / XAML / whatever it was called

[01:10:20.0000] <darobin>
yeah, I guess that counts, ta

[01:10:38.0000] <annevk>
I think it's the largest gamble against it so far

[01:11:17.0000] <darobin>
Mike found this great cwilso_ quote "Two things I never bet against - the web as a platform, and Moore's Law."

[01:11:37.0000] <darobin>
annevk: well, the people who invested massively in mobile Flash made a big investment too

[01:12:02.0000] <darobin>
Microsoft may have been the biggest from a single company, but there was a lot of investment from multiple players in mobile Flash

[01:12:48.0000] <annevk>
Adobe doing Adobe Air

[01:13:05.0000] <annevk>
sorry, AIR

[01:15:29.0000] <darobin>
oh yeah!

[01:15:38.0000] <darobin>
thanks, I'd *completely* forgotten

[01:15:46.0000] <darobin>
man, AIR

[01:15:51.0000] <darobin>
that was something

[01:16:26.0000] <jgraham>
Something almost entirely irrelevant?

[01:16:58.0000] <darobin>
exactly

[01:22:11.0000] <annevk>
JavaFX?

[01:23:30.0000] <annevk>
There's some successful betting too though

[01:23:35.0000] <annevk>
E.g. the App Store

[01:29:14.0000] <darobin>
annevk: yeah, we listed Java in general already

[01:29:33.0000] <darobin>
annevk: this is precisely to be part of an argument against app stores and why you should bet on them :)

[01:31:00.0000] <annevk>
the web still has some lag compared to native though

[01:31:30.0000] <annevk>
App Store solved payments, making things work offline, and getting the right performance

[01:31:46.0000] <annevk>
we still don't really have any of those

[01:31:48.0000] <darobin>
yes, and it will perhaps always have a lag on the latest cool thing

[01:31:51.0000] <darobin>
I know

[01:44:15.0000] <jgraham>
I sometimes wonder if what app stores actually solved was a mindset issue

[01:44:48.0000] <jgraham>
When people design "a mobile app

[01:45:06.0000] <jgraham>
" they create something with very simple UI designed to work like other apps on the device

[01:45:17.0000] <Ms2ger>
Ha: https://mailarchive.ietf.org/arch/msg/ietf-announce/rlIsY8yvvKhbkbkuk2mcQ-ylSNw

[01:45:32.0000] <jgraham>
When they design a website, even a mobile-targeted one, they somehow fail to do this

[01:45:58.0000] <jgraham>
Which is suspect means that we aren't giving them the right tools

[01:47:33.0000] <MikeSmith>
jgraham: interesting point

[01:50:01.0000] <MikeSmith>
Ms2ger: wow

[01:50:28.0000] <darobin>
jgraham: are you thinking of something like <link rel="stylesheet native"> that could just pump in a bunch of extra styles to make something look like it's from the system?

[01:51:51.0000] <darobin>
holy crap

[01:52:03.0000] <darobin>
well, it only took it 46 years to become a standard

[01:52:07.0000] <Domenic>
RequestAutocomplete still seems like a good payments solution to me.

[01:57:33.0000] <annevk>
It's a small step towards one

[01:57:48.0000] <darobin>
Domenic: it's a good first step for sure, but has anyone implemented it beyond Blink?

[01:58:02.0000] <darobin>
last I checked it was pretty much not there, but it's been a while

[01:58:11.0000] <darobin>
looking on the Web doesn't give me much more hope

[01:59:00.0000] <jgraham>
darobin: Not really :) In theory CSS has a solution for native-"look", albeit one that's broken, but I'm talking more about actual functionality

[02:00:31.0000] <darobin>
jgraham: yeah, I didn't mean the system colours, just a way of conveying that you want a native look; but I guess you want more

[02:03:04.0000] <jgraham>
I'm not even sure how much it's a technical problem and how much it's a social problem. I suspect a bit of both. I presume the technical problem is that native platforms provide good tools for building native apps without too much effort, whereas the web is providing good tools for building 90s era forms. Hence you need a much more skilled developer to make a good web-based app than native app.

[02:03:28.0000] <jgraham>
When the main selling point of the web is "you don't have to build everything twice", that's a problem

[02:04:04.0000] <darobin>
yes, you have a point

[02:04:17.0000] <darobin>
just look at the success of Bootstrap

[02:05:47.0000] <jgraham>
Some social problems are a) if you go out and ask for a mobile app, you inevitably end up getting it done by people who know how to build mobile apps and b) having "an app" is still considered more sophisticated than merely having "a website" so companies want them for PR reasons rather than anything else

[02:05:53.0000] <darobin>
jgraham: but you'd mentioned "looking like the rest of the platform" — that's a different problem from the fact that HTML forms suck

[02:06:02.0000] <darobin>
(to put it in a nutshell)

[02:06:14.0000] <jgraham>
darobin: I guess "and feeling"

[02:06:38.0000] <jgraham>
i.e. it's not just about having the right CSS, it's about having the right interaction models and "flow"

[02:06:39.0000] <annevk>
So why is nobody putting effort into HTML forms?

[02:07:03.0000] <darobin>
yeah, we were wondering the other day about this idea for next generation apps

[02:07:20.0000] <darobin>
that basically are sold on the app store, but do nothing beyond opening the actual browser

[02:07:31.0000] <othermaciej>
doing what typical mobile apps do is not mainly a matter of forms, I think

[02:07:41.0000] <darobin>
yeah, you need a fair bit more than that

[02:07:47.0000] <darobin>
forms are just one of the components

[02:08:13.0000] <darobin>
even just scrolling in HTML in nonsensical if you compare it to most platform's scrollable views

[02:08:25.0000] <darobin>
*platforms'

[02:08:28.0000] <othermaciej>
we are trying to design more stuff over time to let apps do more mobile-platform-like interactions

[02:09:16.0000] <darobin>
othermaciej: thinking of a specific example?

[02:10:20.0000] <othermaciej>
Dean’s animation trigger thing, which synergizes nicely with CSS snap points (which we did not design, but which we like)

[02:10:46.0000] <othermaciej>
pretty much everyone trying to do page swipes on the web with pure JS and existing events is doing a terrible job

[02:11:00.0000] <darobin>
annevk: re forms specifically, I think we're seeing a combination of the fact that a lot of people think the newer types often suck and of web components/extensible web promising that people would just build their own things

[02:11:28.0000] <jgraham>
annevk: It has become very unfashionable to add higher-level primitives to browsers. I guess the perception is that eventually the lower level primitives will allow authors to solve these problems themselves. But of course it will still lead to a situation where authors keep reinventing the wheel and all websites have slightly different feels

[02:11:35.0000] <darobin>
yeah, and doing a terrible job for a reason: it's stupidly hard :)

[02:11:50.0000] <othermaciej>
very few apps on my phone are at all well described as a form

[02:12:31.0000] <darobin>
othermaciej: I think forms surfaced here because they tend to be particularly painful on mobile; not as a model of everything to be done in an app

[02:12:32.0000] <othermaciej>
the closest I can think of is Settings, and none of the control or layout styles it uses are represented in html forms

[02:12:51.0000] <darobin>
Evernote is, like, a big form :)

[02:12:58.0000] <othermaciej>
they tend to be painful on mobile because good mobile app design isn’t form-like, so you shouldn’t use forms

[02:13:09.0000] <jgraham>
othermaciej: No, but one can imagine adding higher-level features directly in browsers in the same way that forms are directly implemented

[02:13:14.0000] <othermaciej>
I don’t use evernote so I would’t know,but I believe you

[02:13:18.0000] <darobin>
yeah

[02:13:28.0000] <othermaciej>
right, the problem is the higher-level features start getting pretty platform-specific

[02:14:08.0000] <darobin>
the set of high-level features that aren't impossible to expose well to styling is small, but I believe it exists

[02:14:42.0000] <othermaciej>
the problem isn’t platform-specific look, it’s platform-specific behavior

[02:14:56.0000] <jgraham>
Yeah, but there are two choices really. 1) you add the higher level features to the browser, which then doesn't match the available featureset on many platforms 2) you allow authors to design the high level features, which still don't work like the specific features on any platforms

[02:15:24.0000] <othermaciej>
one tricky thing about, for example, doing the animation for paged swipe is that Android and iOS use different animation curves in the place where they do it natively

[02:15:40.0000] <darobin>
why do I get the impression I've had this conversation continuously since the late 90s?

[02:15:45.0000] <darobin>
oh, yeah, I know why :)

[02:16:12.0000] <othermaciej>
so either you build a feature that encapsulates all that, or you give people primitives and they match one platform if they are really good, and match zero platforms if they are not (which is most of the time)

[02:16:30.0000] <othermaciej>
this is part of why I don’t fully buy into the “expose the primitives” theory of web platform design

[02:16:32.0000] <darobin>
othermaciej: I suspect that if the swipe speed curve were left up to implementations, it might actually be okay

[02:16:39.0000] <annevk>
jgraham: we have failed in decoupling forms though to make it easier to adjust them or create them from scratch

[02:16:58.0000] <othermaciej>
it’s nearly impossible to abstract platform differences if all you provide is low-level primitives

[02:17:10.0000] <darobin>
for reference, see Flash

[02:17:10.0000] <annevk>
jgraham: no standards group spending critical thinking time on them does not really help either

[02:17:21.0000] <othermaciej>
and what people build ends up not matching the platform, so it feels second-class, so people keep wanting to build native apps

[02:17:30.0000] <jgraham>
annevk: Yes. The built-in stuff fails at being adjustable.

[02:17:44.0000] <darobin>
Flash actually exposed quite a lot of primitives that made it possible to make it look wrong on every platform

[02:18:21.0000] <othermaciej>
Flash helped you fail to match the platform, and also fail to match what any other webpage looked or acted like

[02:18:46.0000] <othermaciej>
somehow it even helped you make your Flash app look and act differently from all other Flash apps

[02:19:00.0000] <othermaciej>
so that was taking it to a whole new level

[02:19:13.0000] <darobin>
actually there are people here and there thinking about these problems, even hashing out early solutions — not sure where they'll take the stuff but I reckon it'll hit an organisation near you soon enough

[02:19:51.0000] <darobin>
othermaciej: well, Java awt made it possible to make your applet look exactly like every other applet and I'm not sure that was necessarily great

[02:19:53.0000] <jgraham>
There is a rich history of toolkits that managed to look wrong on every environment. Usually their shortcomings were hidden by the fact that Windows applications all looked different from each other anyway

[02:20:16.0000] <annevk>
darobin: I feel like I need an accountability board for your predictions

[02:20:34.0000] <darobin>
have I *ever* been wrong?

[02:20:45.0000] <annevk>
see, if I had that board I would know

[02:20:49.0000] <darobin>
lol

[02:20:58.0000] <othermaciej>
I do find myself curious how different the Android and iOS apps are for popular services where they have both and actually tried to make both of them good

[02:21:18.0000] <darobin>
annevk: well, you never know, we might know one another for a few more decades so you could get one such board started now; could come in handy

[02:21:45.0000] <darobin>
othermaciej: to the best of my knowledge they just write them twice

[02:21:53.0000] <darobin>
at least, that's what Facebook did

[02:21:53.0000] <jgraham>
Anyway, I don't really know how to fix this stuff unless Firefox OS (or some other platform using web apis to construct the UI) actually wins. And there are some quite big players working to prevent that happening.

[02:22:08.0000] <darobin>
I'm pretty sure it's what Evernote did too since they adopted Material Design super early on

[02:22:24.0000] <othermaciej>
darobin: I mean different in appearance, design and observable behavior, not how different they are in code

[02:22:45.0000] <othermaciej>
(though there are some apps that try to share a cross-platform core engine with ObjC or Java GUI on top as appropriate)

[02:23:02.0000] <darobin>
othermaciej: that's probably less of the case for FB, but I'd be shocked if Evernote iOS looked like the Android version.

[02:23:56.0000] <othermaciej>
a lot of iOS apps look like they could almost be a webpage, but if you go to their website, even when it’s a mobile-specific site, it’s not even trying to be similar to the app

[02:24:20.0000] <othermaciej>
like Yelp’s mobile site compared to their app looks surprisingly ugly, and I can’t think of any good reason it needs such a crutfy layout

[02:25:18.0000] <darobin>
I suspect that poor application of responsive design might have something to do with that

[02:25:45.0000] <darobin>
yeah, Evernote iOS https://encrypted.google.com/search?tbm=isch&q=evernote%20ios&tbs=imgo:1 seems to be quite different from Evernote Android https://encrypted.google.com/search?tbm=isch&q=evernote%20android&tbs=imgo:1#safe=off&tbs=imgo:1&tbm=isch&q=evernote+material+design

[02:25:48.0000] <othermaciej>
except I guess maybe trying hard to be platform-agnostic

[04:13:35.0000] <zcorpan>
http://www.w3.org/mid/CAN9ydbXtc5oToTTMBZ-f9PigXAoo04KTgn1LfUMTLL6938f5_A⊙mgc reminds me of when rubys started chairing htmlwg

[04:16:04.0000] <Ms2ger>
Imma let you finish, but please let me declare consensus?

[04:47:47.0000] <hemanth>
what's wrong with class Person { sayHi = () => "Hello!"; } ?

[04:49:01.0000] <hemanth>
class Person { sayHi(){ "Hello!"; } }; works fine, i understand that lexical binding would be by default in class, but arrow function are still useful, no?

[04:50:39.0000] <hemanth>
annevk, around :) ^^

[04:51:57.0000] <hemanth>
`new` conflicts with that?

[05:07:45.0000] <annevk>
hemanth: dunno, ask Domenic

[05:08:04.0000] <hemanth>
Domenic, help :)

[05:09:52.0000] <hemanth>
AFAIK, new on a arrow function will throw an error "is not a constructor" and it doesn't have a prototype, so I guess it can't be used with class...

[05:11:09.0000] <annevk>
hemanth: did you try using 6to5 or some such?

[05:13:20.0000] <hemanth>
Unexpected token

[05:13:26.0000] <hemanth>
yup, I tired.

[05:17:18.0000] <hemanth>
annevk, related issue https://github.com/facebook/react/issues/2972 ;)

[05:32:27.0000] <hemanth>
and in 6to5 https://github.com/6to5/6to5/issues/616

[05:40:34.0000] <caitp->
i'm not sure you can really polyfill that behaviour

[05:46:12.0000] <hemanth>
caitp-, looks like, even traceur https://github.com/google/traceur-compiler/issues/1664

[05:46:34.0000] <hemanth>
caitp-, can you spot the not? https://github.com/facebook/react/issues/2972

[05:47:11.0000] <caitp->
spot the not?

[05:48:08.0000] <hemanth>
AFAIK, new on a arrow function will throw an error "is not a constructor" and it doesn't have a prototype, so I guess it can't be used with class...

[05:49:11.0000] <caitp->
the error you have is an early error, and if it's anything like ES2015 classes, it's probably because of the `property = value` stuff going on

[05:49:28.0000] <caitp->
not too familiar with jsx

[05:51:10.0000] <hemanth>
hmm, ok. (`property = value` looks like it..)

[09:00:14.0000] <Domenic>
hemanth: you can't use = inside class declarations.

[10:02:49.0000] <TabAtkins>
darobin: The API version of Bikeshed is always up-to-date, via github commit hooks.

[11:31:55.0000] <Domenic>
as someone put it (dherman I think?), "living spec tool for your living standards"

[11:32:57.0000] <Ms2ger>
TabAtkins, were you going to move DOM?

[11:33:10.0000] <TabAtkins>
Ms2ger: Move?

[11:33:19.0000] <Ms2ger>
To CS

[11:33:20.0000] <Ms2ger>
BS

[11:33:32.0000] <TabAtkins>
Oh, yeah. I'm partially through it.

[11:33:35.0000] <TabAtkins>
Will take a bit.

[11:33:37.0000] <TabAtkins>
Why?

[11:33:58.0000] <Ms2ger>
Just wondering

[11:52:41.0000] <smaug____>
Ms2ger: CS?

[11:54:57.0000] <Ms2ger>
Bikeshed

[11:55:18.0000] <Ms2ger>
With fat fingers

[12:02:13.0000] <TabAtkins>
Not drawing that.


2015-01-29
[00:42:15.0000] <annevk>
TabAtkins: would it be easier if I don't update DOM while you convert it? I can probably wait another week or so

[02:17:33.0000] <annevk>
Does anyone happen to know for which HTML elements notification of end tag popping during parsing is important?

[02:17:44.0000] <annevk>
<script> is obviously one of them, are there any others?

[02:19:27.0000] <zcorpan>
</object>

[02:20:13.0000] <zcorpan>
</style>

[02:20:39.0000] <zcorpan>
</video> </audio>

[02:23:15.0000] <zcorpan>
i think that's it, but impls might have more. i think blink did something for </input>

[02:24:24.0000] <annevk>
there's no such thing in the spec

[02:24:49.0000] <zcorpan>
for </input> no

[02:25:11.0000] <annevk>
it's weird that the contract for the others isn't quite as explicit as it could be either

[02:27:05.0000] <zcorpan>
media elements tried to avoid it, but <track> screwed it over

[02:27:43.0000] <Ms2ger>
How about picture?

[02:27:48.0000] <Ms2ger>
link?

[02:27:48.0000] <zcorpan>
nope

[02:28:08.0000] <zcorpan>
not per spec at least

[02:30:17.0000] <zcorpan>
(picture doesn't do anything at all, it's the img that looks at its parent and previous siblings when it is inserted)

[04:13:33.0000] <gsnedders>
SimonSapin: should I be using tinycss2 or is there something better?

[04:24:41.0000] <SimonSapin>
gsnedders: I haven’t made a tinycss3, if that’s your question :)

[04:26:11.0000] <gsnedders>
SimonSapin: "is this what I should be using to parse CSS in Python?"

[04:26:24.0000] <SimonSapin>
yes

[04:28:40.0000] <SimonSapin>
gsnedders: let me know if you find something that could be improved or added

[04:36:46.0000] <gsnedders>
SimonSapin: Will do. Though I scarcely need more than parse_color. Some nice way to serialise stuff would be nice, though.

[04:36:53.0000] <gsnedders>
But rather out of scope, I suspect.

[04:37:40.0000] <SimonSapin>
gsnedders: https://pythonhosted.org/tinycss2/#tinycss2.ast.Node.serialize

[04:38:13.0000] <gsnedders>
SimonSapin: I was more thinking about serialising color3.RGBA

[04:38:19.0000] <SimonSapin>
though the RGBA type is not a Node

[04:38:34.0000] <gsnedders>
Exactly.

[04:38:52.0000] <gsnedders>
Also one can bikeshed format endlessly :)

[04:39:50.0000] <gsnedders>
A dict of (str) keyword -> RGBA would be nice, too.

[04:39:53.0000] <SimonSapin>
I don’t think it needs to be more complicated than a string interpolation one-liner

[04:40:41.0000] <gsnedders>
Oh, it's not that complex. The only fun thing is multiplying it so you have either a 0–255 int or percentage

[04:40:44.0000] <zcorpan>
serializing the alpha isn't obvious (see www-style)

[04:40:56.0000] <SimonSapin>
that dict is tinycss2.color3._COLOR_KEYWORDS

[04:41:35.0000] <SimonSapin>
https://github.com/SimonSapin/tinycss2/blob/a64d0a64057fa3b73146b8bc7759a882d53550ed/tinycss2/color3.py#L180

[04:41:44.0000] <gsnedders>
Ah, cheers. I hadn't bothered digging into that yet.

[04:41:58.0000] <gsnedders>
zcorpan: is there a tl;dr of that?

[04:42:12.0000] <SimonSapin>
it’s undocumented, but unlikely to change

[04:42:41.0000] <gsnedders>
This is a script I'm likely not gonna touch after today, so not really an issue.

[04:55:33.0000] <zcorpan>
gsnedders: how do you roundtrip rgba(1,1,1,0.5) when storing alpha in 8 bits?

[04:56:42.0000] <gsnedders>
zcorpan: Ah, but tinycss2 stores it as a double. Then you just go for the shortest unique representation.

[04:57:37.0000] <zcorpan>
gsnedders: ah ok

[07:22:52.0000] <ondras>
when using registerElement with the "extends" feature, one has to use is= to instantiate? <x-stuff> cannot be used then?

[07:23:26.0000] <caitp>
that doesn't sound right

[07:24:01.0000] <ondras>
I vaguely recall asking about this some time ago, receiving response approximately compatible with what I wrote

[07:24:04.0000] <ondras>
but I am not sure

[07:24:25.0000] <ondras>
(and my poor english might be also the cause)

[07:25:45.0000] <caitp>
is= was supposed to be, if I understand, a way to work around the dumb aspects of the parser, and a way to ensure hard-to-polyfill features work well (although I'm not positive about that last one)

[07:46:39.0000] <annevk>
Domenic: did you get any further writing up how ARIA bindings would work?

[07:46:55.0000] <annevk>
Domenic: I'm wondering if we can reuse that to explain title="", contenteditable="", etc.

[08:11:06.0000] <Domenic>
annevk: no further than https://github.com/domenic/html-as-custom-elements/blob/master/docs/accessibility.md. I can turn the strawmen there into something more concrete maybe, if there is implementer interest.

[08:11:10.0000] <Domenic>
Why does title="" need explaining?

[08:11:45.0000] <annevk>
Domenic: e.g. you might want to overwrite the default behavior

[08:12:04.0000] <Domenic>
Mehhh just use a different attribute then

[08:12:58.0000] <Domenic>
If I were to say "explain title" I would mean "add `window.showOSTooltip("string", { x, y })"

[08:13:28.0000] <Domenic>
then I could explain title as some sort of global mutation observer + mouseover hooks

[08:13:41.0000] <Domenic>
+ I think it impacts accessible name calculation

[08:14:00.0000] <Domenic>
but that is already explained at the bottom of the above link

[08:14:04.0000] <annevk>
Domenic: see https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/thread.html#msg324

[08:14:38.0000] <annevk>
Domenic: if you want to allow <my-element someattr> we need to account for the fact that some day "someattr" might be a global attribute

[08:14:52.0000] <Domenic>
Sure. How is that related?

[08:15:32.0000] <annevk>
Domenic: it's the same scenario, except "title" is already a global attribute

[08:15:35.0000] <Domenic>
You can already use <div someattr>; how are we accounting for that?

[08:16:31.0000] <annevk>
We tell people to please use data-* or they might have a problem going forward

[08:16:47.0000] <Domenic>
I still don't understand the problem. Maybe jump to a strawman solution and tell me what new capabilities I will have when it is implemented?

[08:18:39.0000] <annevk>
The problem is clashes and I don't really have a good solution

[08:19:57.0000] <Domenic>
Well, what new capabilities will I have if we solve the clashes solution?

[08:21:13.0000] <annevk>
You can use any attribute name (including builtins) without future repercussions

[08:22:36.0000] <Domenic>
I guess I pretty much agree with Hixie's arguments in that thread that this isn't a big deal. But if you wanted to solve it maybe the custom element definition should blacklist or whitelist attributes.

[08:22:43.0000] <annevk>
Domenic: see. e.g. https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0440.html from that thread

[08:23:08.0000] <Domenic>
E.g. registerElement(..., { ..., attrs: ['title', 'somefutureattr'] }) => 'title' and 'somefutureattr' won't get special treatment from the browser

[08:23:23.0000] <annevk>
Yeah maybe

[08:23:56.0000] <Domenic>
https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0440.html doesn't make much sense... you can use setters .osc2 for the attribute data-osc2

[08:50:59.0000] <annevk>
true

[09:54:05.0000] <annevk>
So annoying that GitHub doesn't search through commit messages

[09:54:28.0000] <annevk>
Does anyone know what resulted in IDL adding back the [[HasInstance]] override?

[09:54:43.0000] <Ms2ger>
Maybe bz

[09:55:24.0000] <hasather_>
annevk: search locally?

[10:15:07.0000] <TabAtkins>
annevk: That would be a little easier, yeah, but not strictly necessary.  But I plan to finish up this weekend, so if you're okay with waiting a little bit, that'd be cool.

[10:16:28.0000] <annevk>
TabAtkins: sure thing

[14:41:09.0000] <Domenic>
"Don't expose GC behavior" strikes again! https://github.com/yutakahirano/fetch-with-streams/issues/15#issuecomment-72119046


2015-01-30
[16:59:10.0000] <roc>
it's worth it!

[05:59:56.0000] <JonathanNeal>
Hello!

[06:45:28.0000] <wanderview>
annevk: do you know if onbeforeevicted event is defined anywhere in more detail? (reading https://github.com/slightlyoff/ServiceWorker/issues/611)

[06:45:45.0000] <annevk>
wanderview: I don't think it's more than an idea at this point

[06:45:56.0000] <annevk>
wanderview: I've heard about it before

[06:46:02.0000] <wanderview>
annevk: weird that its in the spec webidl then!

[06:46:09.0000] <annevk>
wanderview: ooh?

[06:46:28.0000] <wanderview>
annevk: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-global-scope

[06:46:32.0000] <annevk>
wanderview: not really sure what's going on then, JakeA?

[06:48:50.0000] <slightlyoff>
Kinuko is working on it now

[06:49:24.0000] <slightlyoff>
Work-in-progress

[06:51:25.0000] <annevk>
slightlyoff: it seems wrong to put it in the spec if there's not even a proposal in public

[06:52:18.0000] <slightlyoff>
We're trying to get the full story together. Basically you need quota API + this to manage things intelligently, but this is just the minimal additive bit

[06:53:23.0000] <annevk>
Who is we? Google?

[07:02:39.0000] <JonathanNeal>
Okay, I’m casting a net. I’m curious how many web devs deal with ad blockers and what they think about circumventing it: https://twitter.com/jon_neal/status/561177352143908864

[08:45:58.0000] <wanderview>
annevk: does anything actually set Response.finalURL yet?

[08:48:13.0000] <annevk>
wanderview: web developers can

[08:48:42.0000] <wanderview>
k

[08:49:04.0000] <annevk>
wanderview: I don't think there's any spec stuff that would set it

[08:49:44.0000] <annevk>
philipj: hey so xml:base in Chromium is not actually causing anything it seems, right? It's just observable in some places?

[08:50:36.0000] <philipj>
annevk: it has an observable effect in one place, and that's where the use counter is

[08:50:53.0000] <philipj>
but the good news is that it just reached stable and stayed at 0%

[08:51:09.0000] <philipj>
there's also SVGElement.xmlbase which I added a counter for just now

[08:51:46.0000] <philipj>
ed wrote https://www.w3.org/Graphics/SVG/WG/wiki/Proposals/dropxmlattributes today after we discussed it

[08:51:56.0000] <annevk>
sweet

[08:52:17.0000] <philipj>
so I'd say xml:base is very likely killable

[08:52:19.0000] <annevk>
philipj: please don't let him introduce <svg:base> :-)

[08:52:32.0000] <annevk>
control over the base URL is so bad

[08:52:33.0000] <philipj>
is that a thing?

[08:52:42.0000] <annevk>
philipj: that wiki page suggests it might be

[08:53:02.0000] <jgraham>
/me feels his head exploding

[08:53:38.0000] <philipj>
annevk: oh. wouldn't it be exactly like <html:base>, presumably? that's not going anywhere, right?

[08:54:34.0000] <philipj>
maybe you should email him or comment on https://code.google.com/p/chromium/issues/detail?id=341854

[08:55:29.0000] <annevk>
philipj: html:base isn't going anywhere

[08:56:49.0000] <annevk>
pinged ed on Mozilla IRC

[08:57:48.0000] <philipj>
I think he's ed_work on #blink too

[08:58:26.0000] <annevk>
okay, pinged that too for good measure

[08:59:38.0000] <philipj>
FWIW, I find <base href> quite handy when reducing web sites to test cases

[08:59:55.0000] <philipj>
never used it for realz though

[09:00:06.0000] <annevk>
yeah, good for test cases is not a use case that flies

[09:01:34.0000] <philipj>
not for test cases, only for arriving at test cases :)

[09:01:59.0000] <philipj>
I suppose that's even less avian :)

[09:04:54.0000] <jgraham>
Critic (ab)uses <base> iirc

[09:06:37.0000] <jgraham>
I'm not defending <base> here, but "makes the platform more testable" doesn't seem like something categorically bad

[09:07:27.0000] <annevk>
the main badness with <base> is that a) it can appear anywhere and b) it's dynamic

[09:07:36.0000] <annevk>
of course, xml:base is even worse

[09:07:50.0000] <annevk>
all bad things have even worse twins

[09:08:01.0000] <annevk>
twin is not the right word

[09:08:03.0000] <annevk>
/me hides

[09:13:14.0000] <Ms2ger>
Cousins?

[09:14:33.0000] <jgraham>
Well XML is sort of the child of HTML and SGML

[09:25:49.0000] <annevk>
philipj: if you have flex:1 and I propose flex:none

[09:25:57.0000] <annevk>
philipj: how does it sound good :p

[09:27:21.0000] <philipj>
annevk: I don't know what the difference is, not the same?

[09:27:39.0000] <annevk>
philipj: I have no idea either, I have yet to play with flexbox

[09:29:46.0000] <philipj>
http://dev.w3.org/csswg/css-flexbox/#flex-property

[09:30:19.0000] <philipj>
apparently flex:none means flex:0 0 auto

[09:36:55.0000] <philipj>
I commented on the bug again

[09:38:26.0000] <annevk>
thanks

[09:38:32.0000] <annevk>
flex:1 is fine by me

[09:38:49.0000] <annevk>
philipj: note that Chromium currently seems to restrict these styles to only a couple of elements

[09:38:59.0000] <annevk>
philipj: but I guess you already know that

[09:39:00.0000] <philipj>
yes, that too :/

[09:39:16.0000] <philipj>
I don't think that's likely to cause trouble

[10:57:48.0000] <rubys>
annevk: ping?

[10:59:01.0000] <rubys>
annevk: nevermind.  Figured it out :-)


2015-01-31
[16:08:37.0000] <TabAtkins>
smaug____: http://dev.w3.org/csswg/css-forms/ Feel free to comment on www-style. ^_^

[16:16:03.0000] <Domenic>
TabAtkins: jeeez, that + @extends make this quite a day for you. Although presumably the work of the last few weeks.

[16:17:09.0000] <Domenic>
"Any elements with class=my-button receive the same styling as actual button elements, as if they had a tagname of button in addition to their normal tagname." woah!

[16:17:14.0000] <TabAtkins>
Domenic: Things often clump in time.

[16:17:46.0000] <Domenic>
that clause is super useful for custom elements

[16:17:53.0000] <Domenic>
custom-button { @extends button; }

[16:18:41.0000] <TabAtkins>
Yup yup.

[16:28:16.0000] <smaug____>
TabAtkins: @fosdem. I'll try to look at that tomorrow

[16:28:29.0000] <smaug____>
hmm, "The source file for the page css-forms/Overview.html has recently been updated and automatic generation is pending."

[16:28:40.0000] <TabAtkins>
Give it a minute or two.

[16:30:47.0000] <smaug____>
background is btw interesting case, if it includes bg image

[16:31:11.0000] <smaug____>
IIRC gecko is the only one which support bg image for select popup

[16:31:50.0000] <smaug____>
and it had to limit how the popup is shown to prevent popup to cover the whole screen

[01:13:32.0000] <annevk>
TabAtkins: Domenic: pointer to @extends?

[01:24:11.0000] <annevk>
"I don't like your API. It creates too much objects. Let me wrap it in a polyfill." Yes, that will make things more efficient

[01:34:17.0000] <SimonSapin>
annevk: https://tabatkins.github.io/specs/css-extend-rule/

[01:40:20.0000] <annevk>
SimonSapin: ta!

[01:41:30.0000] <annevk>
SimonSapin: do you know why the rationale in the introduction is not applicable to using .serious.error instead?

[01:47:15.0000] <annevk>
/me files https://github.com/tabatkins/specs/issues/38

[01:57:17.0000] <SimonSapin>
I don't know

[02:36:34.0000] <Ms2ger>
/me wonders if the spec defines that the selected files are emptied when changing input@type

[04:16:57.0000] <annevk>
I don't really follow how @extend would influence querySelector()

[04:18:12.0000] <annevk>
Also, what's the object model story?

[06:32:28.0000] <Ms2ger>
In this talk: Acid tests

[06:36:10.0000] <Ms2ger>
Also, namespaces. Namespaces everywhere.

[06:37:07.0000] <Ms2ger>
And XPath

[06:40:06.0000] <jgraham>
Ms2ger: Are you sure you didn't slip into a nightmare?

[06:40:43.0000] <Ms2ger>
No

[06:41:08.0000] <Ms2ger>
Aren't you around here?

[06:43:32.0000] <jgraham>
No

[06:43:38.0000] <jgraham>
I sort of forgot about i

[06:43:40.0000] <jgraham>
t

[06:43:56.0000] <Ms2ger>
I see

[06:49:31.0000] <gsnedders>
Anyone got any idea why, given six web fonts with similar definitions, only two would load in IE8?

[06:49:39.0000] <Ms2ger>
"IE"

[06:49:43.0000] <gsnedders>
Like, just aren't loaded. At all.

[06:51:33.0000] <jgraham>
That's almost as obscure as my question, which is basically "why is Chrome not passing my wptrunner tests when it's basially using the same code as Gecko, which does pass"

[06:52:08.0000] <gsnedders>
Bah, you guys are smart!

[06:53:08.0000] <gsnedders>
And now I reload and they all load.

[06:53:11.0000] <gsnedders>
WHAT THE ACTUAL HELL.

[06:53:13.0000] <gsnedders>
/me flips IE

[06:53:26.0000] <gsnedders>
(I bet this is some CORE-44944-like bug)

[06:56:28.0000] <jgraham>
Oh joy. time.sleep(1) => tests pass

[06:57:52.0000] <gsnedders>
:)

[07:08:06.0000] <jgraham>
Hah

[07:08:13.0000] <jgraham>
It fails if the window doesn't have focus

[07:10:25.0000] <jgraham>
https://code.google.com/p/chromedriver/issues/detail?id=388

[08:02:12.0000] <TabAtkins>
annevk: There's an issue in the spec about whether @extend should affect querySelector or not.  I'm undecided so far.

[08:02:19.0000] <TabAtkins>
annevk: What's your concern about the object model?

[08:06:01.0000] <annevk>
TabAtkins: I don't see how it could affect querySelector()

[08:06:07.0000] <annevk>
TabAtkins: just wondering what it looks like

[08:06:13.0000] <annevk>
TabAtkins: if it flattens or something else

[08:06:32.0000] <annevk>
TabAtkins: (I saw the open issue, just didn't see how it would possibly have an impact)

[08:06:45.0000] <TabAtkins>
By... affecting what matches the selector?

[08:06:58.0000] <TabAtkins>
Such that a querySelector('.error') also returns .serious-error elements?

[08:07:21.0000] <TabAtkins>
For OM, the rules just gain a .cssRules attribute, which @extend goes into.

[08:08:56.0000] <annevk>
Why would .error match .serious-error if .serious-error copies styles from .error?

[08:09:02.0000] <annevk>
Seems weird

[08:13:28.0000] <TabAtkins>
annevk: Because you're reading the spec wrong, I guess?  .serious-error elements gain the qualities necessary to match .error selectors, for the purpose of matching selectors.

[08:14:02.0000] <TabAtkins>
So when you write a selector like ".error { color: red; }", .serious-error elements are targeted as well.

[08:14:22.0000] <TabAtkins>
So it makes at least some sense that querySelector(".error") would return .serious-error as well. Dunno if it's good in practice.

[08:17:00.0000] <annevk>
The way that rule reads to me is like a mixin

[08:18:21.0000] <annevk>
Which sort of follows from it being part of the block rather than being part of the selector

[08:21:37.0000] <TabAtkins>
annevk: @extend is similar to @mixin, yes.  But they're not the same.

[08:22:03.0000] <TabAtkins>
If you ignore some fiddly details, they're functionally the same, applied in an inverse manner.

[08:22:10.0000] <TabAtkins>
But those fiddly details are important. ^_^

[08:22:42.0000] <TabAtkins>
And usability-wise they're very different once you get away from the trivial examples.

[08:23:21.0000] <TabAtkins>
For example, you can create a whole suite of rules for styling .error in various situations.  With @extend, your .serious-error elements can opt into the entire thing with a single rule.  With @mixin, not so much.

[08:23:44.0000] <TabAtkins>
(Technically possible to do so, by using nesting rules inside the @mixin block, but not a good practice or very common.)

[08:23:52.0000] <annevk>
Yeah I guess, and @extend is across all stylesheet boundaries (includes UA stylesheets)

[08:23:57.0000] <TabAtkins>
Yeah.

[08:24:33.0000] <annevk>
I don't think we would want layout to affect the results of querySelector() though

[08:25:19.0000] <TabAtkins>
There's no layout involved?

[08:25:31.0000] <TabAtkins>
Unless you're using "layout" in a very broad and incorrect way.

[08:25:56.0000] <TabAtkins>
@extend affects the cascade only.

[08:26:18.0000] <annevk>
I love using layout in an incorrect way

[08:27:04.0000] <TabAtkins>
^_^

[08:27:09.0000] <annevk>
But yeah, having querySelector() depend on stylesheets in general

[08:27:36.0000] <TabAtkins>
Yeah, I was unsure if that was a good idea.  Or if it was a useful idea in general - I could see it being pretty confusing.

[08:27:44.0000] <TabAtkins>
Even if the technical details were fine.

[08:28:09.0000] <annevk>
I'm sure we could explain it, somehow (though would require synchronous cascade in some cases), but I'm not sure it'd be pretty

[08:28:31.0000] <annevk>
Though if we want to do style isolation a la shadow trees as style primitive, maybe we need it?

[08:29:57.0000] <TabAtkins>
Still unsure that makes sense as a style primitive, rather than as a DOM API.

[08:31:17.0000] <TabAtkins>
Basically I'm vaguely uncomfortable with any attempt to do isolation/encapsulation stuff with a big global API like style.  I think we need something more direct and local.

[08:37:01.0000] <annevk>
TabAtkins: any documentation for -webkit-tap-highlight-color anywhere btw?

[08:37:08.0000] <TabAtkins>
Doubt it!

[08:37:44.0000] <TabAtkins>
Just things like http://css-infos.net/property/-webkit-tap-highlight-color

[08:47:36.0000] <annevk>
Google does not even return that for me

[08:57:58.0000] <TabAtkins>
I literally just googled for webkit-tap-highlight-color

[10:14:44.0000] <annevk>
Oh doh, the leading hyphen is a problem

[10:15:03.0000] <annevk>
You'd think Google knows about CSS properties :p

[10:16:02.0000] <caitp>
if they started adding heuristics to figure out if you meant "negate this word" or not, it would probably get even harder to use

[10:17:22.0000] <annevk>
All they need to do is recognize it as a word

[10:17:45.0000] <TabAtkins>
But -word already has a meaning - "exclude matches with word".

[10:17:47.0000] <caitp>
but sometimes it's a word and sometimes it's an operator

[10:18:00.0000] <caitp>
so you need inconsistent rules to figure out which is which

[10:18:14.0000] <annevk>
I meant that you'd use --webkit-tap-highlight-color to exclude it

[10:18:45.0000] <caitp>
if the word is quoted i think that should ideally work as expected

[10:18:48.0000] <TabAtkins>
how woudl it know that -webkit-tap-highlight-color didn't mean "exclude results with webkit-tap-highlight-color"?

[10:18:57.0000] <caitp>
(but it doesn't)

[10:19:04.0000] <annevk>
TabAtkins: because it knows the latter is not a word

[10:19:13.0000] <TabAtkins>
How does it know that?

[10:19:29.0000] <annevk>
TabAtkins: usage patterns, presumably

[10:22:37.0000] <TabAtkins>
And when *I* need to search for something and exclude "webkit-foo", how am I to know I need to double-negate it?

[10:23:16.0000] <caitp>
"-webkit-foo" << don't negate, -"-webkit-foo" << negate -webkit-foo

[10:23:21.0000] <caitp>
probably the most predictable way

[10:23:59.0000] <TabAtkins>
caitp: Yeah, that uses well-known and consistent grammar.

[10:47:41.0000] <annevk>
TabAtkins: if you want literals, use quotes

[10:47:59.0000] <TabAtkins>
I know that.

[10:48:05.0000] <TabAtkins>
You're the one saying otherwise. ^_^

[10:48:37.0000] <annevk>
TabAtkins: no, I'm saying it should be better about words

[11:54:24.0000] <jgraham>
I thought that quotes on Google didn't actually work anymore

[11:55:37.0000] <jgraham>
Although I might be wrong. Doesn't seem impossible to have an algorithm where if -x results in nothing, you try the query again as if quoted

