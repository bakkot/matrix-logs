2018-03-01
[21:48:45.0000] <annevk>
Without multiple implementations it’s not really a standard

[23:36:54.0000] <MikeSmith>
and competition among browser projects has been a big factor in driving innovations and improvements

[23:37:17.0000] <MikeSmith>
concrete example is the case of JavaScript engines

[05:53:05.0000] <devsnek>
how often do things that "need implementer interest" become actual features

[05:54:21.0000] <devsnek>
I would imagine if a feature doesn't start out with one of the browsers pushing for it it's already dead

[05:59:05.0000] <nox>
devsnek: There are plenty of DOM methods which were introduced after libs mentioned they would be useful for their code.

[05:59:10.0000] <nox>
(AFAIK.)

[06:00:02.0000] <devsnek>
I'm just noticing that these issues on the html repo go back to 2015

[06:00:21.0000] <devsnek>
im wondering how I can make sure that doesn't happen with mine :)

[06:00:39.0000] <annevk>
devsnek: it varies, I don't think implementers actively crawl them, so reaching out to folks can help

[06:00:58.0000] <Ms2ger>
Convince people or try to write an initial implementation yourself, I suppose

[06:01:00.0000] <annevk>
devsnek: https://whatwg.org/faq#adding-new-features

[06:01:11.0000] <annevk>
devsnek: it's a long process too; 3 years wouldn't be too bad

[06:01:38.0000] <devsnek>
yea I realize that

[06:01:58.0000] <devsnek>
3 years sounds nice if stuff is happening

[06:05:02.0000] <devsnek>
I assumed more of the whatwg people would actually be working for the implementers

[06:12:30.0000] <annevk>
Quite a few do, but they don't necessarily decide what to work on


2018-03-02
[05:06:56.0000] <annevk>
No existing tests for "pixelated"; quelle surprise

[05:14:42.0000] <shannu>
I am working on the following issue https://github.com/w3c/web-platform-tests/issues/8616 and I found that i have to add amaplike declaration at the line highlighted in the document https://github.com/w3c/web-platform-tests/blob/master/resources/idlharness.js#L2197 .So I thought I should add a code like this https://pastebin.mozilla.org/9078942 I s it right?

[05:14:42.0000] <shannu>
 And is it necessary to be readonly?

[05:14:42.0000] <shannu>
if it is what should be the key values I should use?

[05:14:42.0000] <shannu>
 It would be great if some one helps me.

[05:14:42.0000] <shannu>
 thank you

[05:28:58.0000] <ricea>
shannu: I think it will need a lot more code than that. You can look at https://www.npmjs.com/package/webidl2#iterable--legacyiterable--maplike--setlike-declarations to see how the parser represents setlike and maplike types, and then work out how to test those interfaces.

[05:29:39.0000] <shannu>
ricea:  Thank you

[05:32:18.0000] <ricea>
shannu: It might be easier to start by looking for interfaces that are implicitly iterable as described in that issue, and then call this.add_iterable_members on them.

[05:34:05.0000] <shannu>
Ok

[06:16:17.0000] <nox>
https://drafts.csswg.org/css-lists/#counter-functions

[06:16:36.0000] <nox>
Isn't it a bit weird for the first argument of counter() to be <ident>? Does it make sense to be able to name a counter 'inherit'?

[06:18:59.0000] <nox>
AFAIK counter-increment and friends want a <custom-ident>,

[06:19:06.0000] <nox>
so you can't actually use a counter named 'inherit' in them.

[06:31:39.0000] <annevk>
JakeA: so http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5807 Chrome doesn't seem to resize the SVG

[06:31:53.0000] <annevk>
JakeA: Safari does resize it, but cannot draw it (or ends up drawing nothing)

[06:32:18.0000] <annevk>
JakeA: unclear where it fails in Firefox

[06:35:26.0000] <JakeA>
annevk: ugh, yeah. It should absolutely be 100x100 afterwards. I guess this stuff is relatively new.

[06:36:32.0000] <annevk>
JakeA: if I remove 1,1,1,1 btw nobody still draws anything

[06:37:02.0000] <JakeA>
annevk: does it work if you give the svg an explicit width & height?

[06:37:50.0000] <annevk>
JakeA: no, but that has made me think whether that's required here

[06:38:29.0000] <annevk>
JakeA: can you crop when there's no intrinsic dimensions, I guess you should be able to since for SVG we resize first and then crop, but we only specced that in the PR

[06:38:54.0000] <JakeA>
annevk: I thought <img> took an intrinsic height from the viewbox

[06:39:26.0000] <annevk>
JakeA: this differs between Chrome and Safari too, that's why I added an explicit width/height

[06:39:41.0000] <annevk>
JakeA: I think Safari might actually do that correctly, where it takes up the maximum width possible

[06:39:50.0000] <annevk>
JakeA: per replaced element sizing in CSS 2.1

[06:40:19.0000] <annevk>
I can't believe even that is still non-interoperable in 2018

[06:40:44.0000] <JakeA>
SVG has no love from browsers

[06:41:00.0000] <JakeA>
It's probably the biggest divide between developer interest and browser interest

[06:41:38.0000] <annevk>
Tell foolip

[06:42:32.0000] <annevk>
I'm hoping we can improve SVG a bit by leaning on the things that are common between CSS, <canvas>, and SVG, and give them common underpinnings

[06:42:52.0000] <annevk>
But that's only part of the issue I suppose

[06:43:12.0000] <annevk>
You know, sometimes I don't mind that moratorium idea so much

[06:43:18.0000] <annevk>
There's a lot of technical debt

[06:43:20.0000] <annevk>
A lot

[06:43:47.0000] <JakeA>
:D

[06:44:22.0000] <JakeA>
Yeah, I'd like SVG to stop being a special thing. Like, maybe allow <path> etc outside svg

[06:44:44.0000] <annevk>
<canvas> has <path>'s d="" attribute

[06:44:51.0000] <JakeA>
And make <svg> some kind of separate viewboxing thing.

[06:45:10.0000] <Ms2ger>
But *what working group* would spec that?

[06:45:26.0000] <JakeA>
heh

[06:45:42.0000] <annevk>
(Minor nit: emphasis solely goes on what, iirc.)

[07:02:51.0000] <nox>
https://github.com/w3c/csswg-drafts/pull/2377

[07:03:09.0000] <nox>
JakeA: We would love you if you implemented SVG in Servo. :P

[07:04:11.0000] <JakeA>
I'm the ideas guy not the science guy :D

[07:04:57.0000] <nox>
Ah ah.

[07:05:05.0000] <JakeA>
nox: Is the feeling that SVG is just too complicated? Because I don't think developers would be against something else a little more GPU-aligned.

[07:05:22.0000] <nox>
JakeA: Nah, the feeling is that days are still only 24 hours long even for Servo devs. :)

[07:07:02.0000] <JakeA>
nox: super excited about servo. Great seeing bits of it going into Firefox too.

[07:07:11.0000] <nox>
Thanks!

[07:12:20.0000] <Ms2ger>
annevk, http://ln.hixie.ch/?start=1086387609&count=1 appears to back me :)

[07:21:25.0000] <jgraham>
Ah I see I came to the right place for an argument about Hixie's use of typography 14 years ago

[07:23:54.0000] <astearns>
nox: could you open an issue/PR on counter()/<ident>?

[07:25:22.0000] <nox>
astearns: I don't understand what that means.

[07:25:26.0000] <nox>
I did a PR.

[07:25:37.0000] <astearns>
oh sorry, I didn't check

[07:25:39.0000] <nox>
I linked to it earlier. https://github.com/w3c/csswg-drafts/pull/2377

[07:25:53.0000] <nox>
astearns: No problem. :)

[07:26:40.0000] <astearns>
thanks for the PR - now I'll go bug TabAtkins :)

[07:27:14.0000] <nox>
astearns: Cool. Forgot to mention that the test linked in that PR already passes in Safari and Chrome,

[07:27:26.0000] <astearns>
even better

[07:27:34.0000] <nox>
astearns: and I suspect it was passing too in pre-Stylo Firefox, but I'm too lazy to actually confirm that.

[07:27:45.0000] <nox>
ecobos may know how to check that easily.

[07:28:30.0000] <TabAtkins>
nox: danke

[07:28:34.0000] <ecobos>
nox: layout.css.servo.enabled=false should still work, though not for long

[07:28:59.0000] <nox>
ecobos: Oh right, somehow I almost went and read nsCSSParser.cpp,

[07:29:01.0000] <nox>
thanks for saving me.

[07:29:30.0000] <nox>
ecobos: Do I need to restart Firefox?

[07:29:40.0000] <ecobos>
nox: nah, just reload

[07:29:51.0000] <nox>
ecobos: It was already broken, then.

[07:30:31.0000] <ecobos>
TabAtkins: while you're around, what about https://github.com/w3c/csswg-drafts/pull/2168? It's trivial and has been sitting around for months. Blink & Firefox don't implement the special behavior of display: contents for `<applet>` because well, it's no longer a special element in any way.

[07:30:33.0000] <nox>
TabAtkins: You're welcome, thanks for the fast merge. :)

[07:31:56.0000] <TabAtkins>
ecobos: huh, so applet just didn't do anything any more?

[07:32:09.0000] <ecobos>
TabAtkins: nope

[07:32:32.0000] <TabAtkins>
Cool, merged

[07:32:41.0000] <ecobos>
TabAtkins: thanks!

[07:32:51.0000] <ecobos>
TabAtkins: (and sorry for nagging :P)

[07:33:13.0000] <TabAtkins>
Nah, is necessary, thanks

[07:33:28.0000] <TabAtkins>
I don't keep up with the PRs like I should

[07:33:55.0000] <ecobos>
TabAtkins: you and fantasai do a great work, I don't know how you keep up tbh

[07:34:35.0000] <TabAtkins>
The secret is we don't, but we're still productive enough that it's not too noticeable

[07:35:11.0000] <ecobos>
hah

[07:45:35.0000] <annevk>
Ms2ger: touché

[07:48:32.0000] <gsnedders>
TabAtkins: can I prod you to review https://github.com/w3c/web-platform-tests/pull/8822?

[10:29:11.0000] <railgun>
if there's no objection I can submit a pull request for https://github.com/whatwg/whatwg.org/issues/187

[10:30:02.0000] <railgun>
mobile already has consistent padding from what I've seen, this change only affects the desktop version

[10:35:29.0000] <annevk>
railgun: seems fine to me, it'd be great to have before after screenshots in the PR if not too much trouble

[10:35:33.0000] <annevk>
railgun: makes reviewing easier

[10:35:41.0000] <annevk>
Domenic: ^^

[10:36:44.0000] <Domenic>
I looked in to this at some point and found weird things where we had some padding but it got overridden or something. Good to fix, but check the nearby code to check if there might be leftovers or weird things.

[10:44:35.0000] <railgun>
will do (as a side note using a css preprocessor with variables / mixins for padding may have prevented this issue from popping up in the first place)

[10:45:20.0000] <annevk>
railgun: a lot of this is over a decade old

[10:45:35.0000] <annevk>
railgun: we could maybe add some CSS variables here and there, now we started using them on the website

[11:17:01.0000] <railgun>
heh it's been a while

[11:17:15.0000] <railgun>
I remember when you couldn't use css variables since not all browsers supported it

[11:17:39.0000] <railgun>
now it seems pretty universal https://caniuse.com/#feat=css-variables

[11:20:39.0000] <railgun>
actually looking back at it there was little to no browser support when I learned about css variables


2018-03-03
[00:08:06.0000] <annevk>
TabAtkins: I'm not gonna grant private access for that Octobox thing

[00:08:27.0000] <annevk>
TabAtkins: if that's required please start a whatwg/meta discussion about

[00:34:06.0000] <nox>
I see that /css/css-counter-styles/README points to https://www.w3.org/International/tests/ but it seems many tests from there are missing from wpt. Is that known and ntended?

[00:34:08.0000] <nox>
intended*

[01:29:43.0000] <annevk>
nox: seems like a bug

[01:30:04.0000] <nox>
annevk: And can I add tests in the root there?

[01:32:05.0000] <annevk>
nox: dunno

[01:32:16.0000] <annevk>
nox: I hear /css is weird

[03:16:02.0000] <MikeSmith>
nox: gsnedders is the best person to ask

[04:00:55.0000] <shannu>
I am working on the following issue https://github.com/w3c/web-platform-tests/issues/8616 and I found that i have to add amaplike declaration at the line highlighted in the document https://github.com/w3c/web-platform-tests/blob/master/resources/idlharness.js#L2197 . Can I know what is use of mapike? and how to use that in an interface?

[04:00:55.0000] <shannu>
 It would be great if some one helps me.

[04:00:55.0000] <shannu>
  thank you

[04:11:21.0000] <annevk>
shannu: I think https://drafts.css-houdini.org/css-typed-om/ uses it for some things, but generally I don't think it has much adoption thus far

[04:12:37.0000] <shannu>
annevk:  Can I know what all things i should include in the isuue above?

[09:05:22.0000] <railgun>
is the weird spacing here intentional? this occurs in other sections as well iirc https://i.imgur.com/72wnp7o.jpg

[09:12:57.0000] <railgun>
I also think that note sections should always be on their own separate line, see https://i.imgur.com/s0E3ouT.jpg

[09:13:33.0000] <railgun>
taken from https://dom.spec.whatwg.org/#document-trees

[09:16:25.0000] <TabAtkins>
annevk, shannu: Not using maplike anymore in typed om. But there is a setlike in <https://drafts.csswg.org/css-font-loading/#fontfaceset>

[09:18:03.0000] <shannu>
Ok thank you

[09:19:25.0000] <shannu>
TabAtkins: could you help me in writing maplike in the above issues?

[09:19:40.0000] <shannu>
Or setlike?

[09:19:46.0000] <TabAtkins>
I can't, sorry. I don't know anything about the idlharness code.

[09:44:24.0000] <shannu>
Can I know where or how I could get help?


2018-03-04
[23:34:24.0000] <Domenic>
railgun: it's intentional that some notes are inline and some are their own paragraphs and some are their own sections.

[23:34:46.0000] <Domenic>
I'm not sure what's weird about the spacing in the first screenshot.

[01:01:38.0000] <shannu>
Regarding the issue, I am working on, I am required to add a maplike and setlike handling inside a switch. However I am bit confused regarding the type of the arguments required. Can someone please assist me? 🙂

[04:04:54.0000] <annevk>
shannu: maybe ping @jgraham and @tobie in the issue? (Make sure to give enough context around the problem.)

[04:38:50.0000] <shannu>
annevk:  when i pinged @jgraham i was lead to this channel

[05:28:51.0000] <railgun>
Domenic: yeah just realized that span.note has its own css (inline notes look a bit weird though since the note part gets cut off)

[05:29:08.0000] <Domenic>
Oh heh I just noticed the cutoff, fascinating.

[05:29:18.0000] <Domenic>
Maybe that should un-rotate

[05:29:27.0000] <Domenic>
(We talked about un-rotating all of them, actually.)

[05:30:14.0000] <railgun>
are there any set rules for when to use each? (inline, paragraph, section)

[05:30:27.0000] <railgun>
hmm

[05:31:49.0000] <railgun>
I think it'd be easier just to not use inline since it looks like they cause more problems than solve

[05:32:45.0000] <railgun>
this is bothering me https://i.imgur.com/KmlGtbU.jpg

[05:32:59.0000] <Domenic>
I mean, it's like English. Sometimes you say "Note, X" without starting a whole new paragraph.

[05:33:59.0000] <railgun>
maybe the style could be different?

[05:34:30.0000] <railgun>
inline notes aren't as sectioned out as other notes

[05:34:49.0000] <Domenic>
Suggestions always welcome, although we'd want them to be visually connected to whole-paragraph notes.

[05:36:49.0000] <railgun>
whatwg specs don't feel the same with rotate removed though

[05:38:03.0000] <railgun>
I'm probably biasedd

[05:38:15.0000] <railgun>
biased*

[05:39:26.0000] <Domenic>
:)

[05:50:30.0000] <railgun>
seems like the csswg uses inline notes as well https://i.imgur.com/3pyDRxS.jpg

[06:03:03.0000] <railgun>
here is one suggestion for inline notes https://i.imgur.com/1q10YrM.jpg (original https://i.imgur.com/s0E3ouT.jpg)

[06:06:55.0000] <railgun>
(could also bold note to separate it from the content)

[06:44:50.0000] <railgun>
Domenic: from your review I get Error: missing <dfn> for topic "attr-form-method" even after a rebase

[07:51:09.0000] <domfarolino>
Domenic: I see that Takeshi's name on Chromium-Review now has status "Leaves the project on 2018/03/02", is he no longer working on Chrome?

[14:42:59.0000] <Domenic>
railgun: maybe that isn't the exact ID

[14:43:20.0000] <Domenic>
railgun: That inline note doesn't feel similar enough to other notes, IMO.

[14:43:34.0000] <Domenic>
domfarolino: sadly yes :(

[15:07:42.0000] <domfarolino>
Domenic: Oh wow, what’s he moving on to?

[15:22:15.0000] <annevk>
domfarolino: a smaller company


2018-03-05
[17:34:39.0000] <Domenic>
railgun: https://github.com/whatwg/html/pull/3484/files doesn't have the x/y updates?

[17:35:04.0000] <Domenic>
I guess no changes are uploaded yet :)

[18:27:24.0000] <MikeSmith>
god the source of http://oldnavy.gap.com/ is a freak show

[18:27:36.0000] <MikeSmith>
and no https

[18:27:59.0000] <MikeSmith>
and same for all *.gap.com sites

[18:33:50.0000] <a-ja>
MikeSmith, they're not bankrupt yet?

[18:34:26.0000] <astearns>
what is with all those line feeds?

[18:35:41.0000] <a-ja>
at least the signon page is https

[18:35:47.0000] <MikeSmith>
a-ja: I guess they’re staving off bankruptcy by having their CFO write all the code for their sites

[18:35:56.0000] <a-ja>
heh

[18:37:28.0000] <MikeSmith>
astearns: I’m guessing those line feeds are artifacts of some servere-side templating/pre-processing parts left over after the other bits got parsed/stripped out?

[01:51:47.0000] <hsivonen_>
Maybe we should have some sort of constitution-like doc where we could write: No changes to the HTML parsing algorithm anymore.

[04:23:50.0000] <MikeSmith>
hsivonen: :)

[05:59:53.0000] <Domenic>
I mean, you could definitely write that on your blog, but there's no cross-browser consensus on it.


2018-03-06
[19:43:54.0000] <Domenic>
annevk: review/rubber stamp https://github.com/whatwg/html/pull/3472 ?

[21:34:58.0000] <annevk>
Domenic: test commit says "first batch"?

[21:35:19.0000] <Domenic>
annevk: yeah, I think good enough for spec merge. Most of the rest of the tests will be manual.

[21:35:26.0000] <annevk>
Ooh that's a big change, I'm not gonna get to that today I think :/

[21:35:42.0000] <Domenic>
Fair enough, I guess we didn't get much editorial review from the other reviewers.

[21:35:52.0000] <Domenic>
Each commit is pretty reasonable FWIW.

[12:38:43.0000] <domfarolino>
TabAtkins: When should I use `<a constructor>...` over `{{...}}` (or vice-versa) when linking to something that is defined in `<pre class=anchors>` as type `constructor`?

[12:39:00.0000] <domfarolino>
My understanding is that that both will link to IDL types (constructor being one)

[12:40:00.0000] <TabAtkins>
Yeah, there's really no reason to ever use <a> when linking to any IDL type.

[12:42:23.0000] <domfarolino>
TabAtkins: Sorry, I was trying to finish my question but then a professor walked in ...it seems that they produce different styles though, is `{{...}}` just generally preferred though, and `<a>` is just used for style-less linking?

[12:43:25.0000] <TabAtkins>
{{...}} happens to wrap itself in a <code> in the output, that's the styling difference you're seeing.

[12:44:05.0000] <TabAtkins>
(Or maybe it just adds a class=idl-code, which the default stylesheet targets. I forget.)

[12:45:14.0000] <domfarolino>
TabAtkins: Ah, iirc I think it does wrap in a <code>. Ok thanks, didn't know if it is preferred to use one over the other, but I guess that's context-dependent

[12:45:15.0000] <TabAtkins>
<a> is just the generic, always-works-for-all-types linking syntax.  If there's a shorthand, it's usually better to use it.  (And if you need to specify something that the shorthand can't accommodate, like the `spec` attribute, you should use <l spec=foo>{{something}}</l>, rather than breaking it back down fully into an <a>.)

[12:50:25.0000] <domfarolino>
Ok that makes sense, thank you

[13:12:19.0000] <paul_irish>
I've recently updated the clipboardData that Chrome sets when a user copies an image.  There's some inconsistency between browsers right now regarding what types (html/text/png) are copied, and also inconsistency between paste events and drop events (in dataTransfer).  who knows this area and could answer a few more questions of mine?

[13:17:46.0000] <domfarolino>
Domenic: Can we get away with `Call`ing the %String% constructor in https://console.spec.whatwg.org/#formatter as opposed to `Construct`ing from it?

[13:18:11.0000] <domfarolino>
Seems like there's no good reason to call Construct over Call in that case (since newTarget is irrelevant)

[13:53:22.0000] <domfarolino>
annevk: Are there wpts for https://github.com/whatwg/fetch/pull/585#issuecomment-329121865 ?

[15:07:25.0000] <Domenic>
domfarolino: definitely Call; Construct would incorrectly create a wrapper.

[15:11:58.0000] <domfarolino>
Domenic: Ok, could you possibly explain how this wrapper gets created? I'm just curious, reading https://tc39.github.io/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget

[15:15:29.0000] <Domenic>
domfarolino: Construct sets NewTarget. From there, check the definition of the String constructor.

[15:15:51.0000] <domfarolino>
Domenic: Ah, I'm assuming it is because PrepareForOrdinaryCall uses newTarget instead of undefined, in [[Construct]]

[15:16:04.0000] <domfarolino>
Ok I'll check that out

[15:17:45.0000] <domfarolino>
Oh ok, thanks


2018-03-07
[16:18:15.0000] <annevk>
domfarolino: don’t think so, I think the main problem is updating existing tests;

[16:18:42.0000] <annevk>
domfarolino: because of that it would be useful to have a browser with the fix

[16:19:13.0000] <annevk>
domfarolino: but maybe affected tests can be located with a couple greps

[17:07:41.0000] <domfarolino>
annevk: Ah that makes sense. I can take a look sometime this week assuming a patch to change default credentials behavior is fairly trivial

[17:08:27.0000] <annevk>
domfarolino: cool

[18:09:03.0000] <annevk>
JakeA: I suspect that for https://github.com/whatwg/fetch/issues/145 you'll have to find a new networking person given that tyoshino left

[20:16:14.0000] <annevk>
Domenic: happy to help figure out things for this API

[20:16:20.0000] <Domenic>
\o/

[20:16:21.0000] <annevk>
Domenic: imperative slotting, that is

[20:16:42.0000] <annevk>
Domenic: I'm mainly wondering what developers would want to happen in various places

[20:17:07.0000] <Domenic>
Ah yeah. I was kind of hoping they would never mix styles, but developers sometimes surprise us.

[20:17:21.0000] <annevk>
Domenic: e.g., if you modify the children of a host element, is it fine that everything gets reset?

[20:17:59.0000] <annevk>
Domenic: should this allow elements that are not in a tree? (what if they get removed?)

[20:18:18.0000] <annevk>
Domenic: not connected I mean (everything is in a tree)

[20:18:22.0000] <Domenic>
Interesting, why would it get reset?

[20:19:23.0000] <annevk>
Domenic: that's how we redistribute; if something changes we assign things anew

[20:19:41.0000] <annevk>
Domenic: e.g., step 10 of https://dom.spec.whatwg.org/#concept-node-remove

[20:19:42.0000] <Domenic>
Maybe I am misunderstanding what you mean by "host element"?

[20:19:54.0000] <Domenic>
Right OK, an assigned element

[20:20:26.0000] <Domenic>
Not the whole shadow host

[20:20:35.0000] <annevk>
Hmm, I guess it's not quite connected either, but we require it to be a child of a host element atm

[20:21:32.0000] <Domenic>
Blah I should refresh my memory of this stuff

[20:21:40.0000] <Domenic>
It'd be nice to get some examples into the spec

[20:21:45.0000] <Domenic>
Some are trapped in the old spec

[20:23:11.0000] <annevk>
FWIW, I guess rniwa probably knew about this when he proposed this

[20:23:33.0000] <annevk>
So I suspect his stance here is that if you mutate the tree you'll have to deal with the consequences

[20:23:49.0000] <Domenic>
I am hopeful that is fine with developers

[20:23:51.0000] <annevk>
But would be good to make that clear with some examples around the API maybe

[20:23:55.0000] <Domenic>
Yeah exactly

[20:35:12.0000] <annevk>
Domenic: I think the main question we should answer is what happens if they are already assigned, and how do we update those other slot elements

[20:35:23.0000] <annevk>
Domenic: presumably we do want to fire slotchange at least

[23:11:40.0000] <annevk>
Domenic: it'd be more productive if you proposed something you have in mind in that issue

[23:12:05.0000] <Domenic>
annevk: I am not in favor of the feature in general, so I am not inclined to spend time on developing it. I am happy to give my constraints though.

[23:12:15.0000] <annevk>
Domenic: it just came to mind that built-ins don't have is="", but do have namespaces to consider, so their registry is different anyway

[23:13:19.0000] <annevk>
Domenic: it just seems so weird to suddenly insist built-ins be treated the same while there's no such consistency enforced elsewhere

[23:13:31.0000] <annevk>
Domenic: it appears you're just being arbitrary to stall things

[23:13:45.0000] <Domenic>
The problem is the same for both: the browser has a registry, and some frameworks can't deal with just constructors, so need some sort of side-table.

[23:14:26.0000] <Domenic>
I don't think it's arbitrary to insist we expose the primitives.

[23:14:43.0000] <annevk>
But as I've shown it's not the same primitive and it doesn't live in the same place

[23:15:00.0000] <annevk>
The primitive for custom elements lives on the custom element registry

[23:15:10.0000] <annevk>
The other primitive exists, but it's not layered in the same way at all

[23:15:20.0000] <annevk>
So insisting on the same API or solving them at the same time is arbitrary

[23:16:17.0000] <annevk>
We also don't have something.get(localname, namespace) that returns a constructor for built-ins

[23:16:35.0000] <annevk>
Why didn't you add that? Where is the consistency?

[23:19:58.0000] <Domenic>
Indeed, I'm saying we should add that

[23:20:06.0000] <Domenic>
The problem space needs to be considered holistically.

[23:20:18.0000] <Domenic>
If we're to address these frameworks which can't cope

[23:20:22.0000] <annevk>
But you haven't done that

[23:20:30.0000] <Domenic>
Indeed, I have not. I've only solved the important use cases so far.

[23:20:45.0000] <annevk>
Right, what's the problem with continuing to do so?

[23:21:09.0000] <Domenic>
The problem posed in the OP is the same for built-in elements and custom ones

[23:21:09.0000] <annevk>
I've looked at it holistically and I've outlined how all this could work, but we don't need to add all at once

[23:21:18.0000] <Domenic>
So we should not solve only half the problem

[23:23:56.0000] <annevk>
Right and as pointed out in the meeting and even by that person, it's not a problem for built-ins (also as shown by other issues)

[23:24:12.0000] <annevk>
I feel like we're going in circles...

[23:24:39.0000] <Domenic>
I don't agree it's not a problem for built-ins. For built-ins people keep a large table.

[23:24:45.0000] <Domenic>
They can do the same for custom elements

[23:24:47.0000] <Domenic>
But they don't want to

[23:27:00.0000] <annevk>
Domenic: okay, I guess I can try to solve this more generically; it is a little weird that ElementRegistry will have a different API shape from CustomElementRegistry

[09:12:14.0000] <railgun>
can whatwg definitions be used in the mdn glossary? in particular "insertion point" is a dead link but the whatwg definition is here https://html.spec.whatwg.org/multipage/parsing.html#insertion-point

[09:15:59.0000] <railgun>
mdn uses "(CC-BY-SA), v2.5 or any later version" so that should be compatible with CC-BY-4.0 (if they didn't say "or any later version" it wouldn't be compatible?)


2018-03-08
[19:41:19.0000] <annevk>
Domenic: FWIW, I think https://github.com/w3c/webcomponents/issues/468#issuecomment-370672895 makes it a little more complicated and definitely somewhat related to shadow root infrastructure

[19:41:56.0000] <Domenic>
annevk: I think it'll be that way in the spec. I'm not sure it'll be observable to web devs.

[19:42:05.0000] <Domenic>
I guess :hsot

[19:42:07.0000] <Domenic>
:host

[19:42:31.0000] <annevk>
Yeah, which is nice to have here

[19:42:50.0000] <Domenic>
I'll edit to add "with an interpretation of :host as the custom element being customized"

[22:35:01.0000] <annevk>
kochi: seems style sheets for built-ins needs a more concrete proposal

[22:35:08.0000] <annevk>
kochi: for custom elements*

[22:35:44.0000] <kochi>
annevk: for some time we can ignore for built-ins?

[22:36:30.0000] <annevk>
kochi: sorry, I meant a more concrete proposal for https://github.com/w3c/webcomponents/issues/468

[22:36:42.0000] <annevk>
kochi: and how it works together :host et al

[22:38:50.0000] <kochi>
annevk: sure, for speccing, but I don't know there is real use case for styling *some* children of a custom element without shadow root, like my example.

[22:41:26.0000] <annevk>
kochi: built-ins can do it

[22:42:23.0000] <kochi>
annevk: (looking at ua stylesheet...) I found 'select[disabled]>option { color: GrayText }', yeah

[23:24:23.0000] <domfarolino>
Seems like the Company Type is wrong at https://www.crunchbase.com/organization/whatwg lol. I’ve never heard of crunchbase tho

[23:24:55.0000] <domfarolino>
annevk: actually I’m curious, where does WHATWG get funds for hosting and domains etc

[23:25:56.0000] <kochi>
for profit of the world

[23:26:22.0000] <domfarolino>
👍

[23:26:51.0000] <kochi>
Whenever I try searching something that I expect it would end up in an MDN page, it goes to Japanese translated version of the wiki (due to ranking of search according to my language preference), then I switch the locale of the page, MDN asks me "Do you want to view this site with en-US"?, so I answer "Yes," but the search results keeps returning Japanese page, and MDN doesn't redirect :(

[23:30:24.0000] <kochi>
crunchbase seems to be a database of tech companies run by TechCrunch?

[23:30:40.0000] <annevk>
domfarolino: Ian used to pay it out of pocket, now some of us pay for it and some is paid for by the host

[23:31:10.0000] <annevk>
kochi: hmm maybe file a bug against mdn?

[23:32:15.0000] <annevk>
kochi: not sure where though, maybe https://github.com/mdn/mdn

[23:32:16.0000] <kochi>
annevk: I don't know it's expected or not - if I directly follow the URL pointing to a Japanese page, MDN is expected to redirect according to the cookie-set preferred locale?

[23:32:39.0000] <annevk>
kochi: dunno, but maybe they're open to enabling that

[23:37:00.0000] <domfarolino>
Ah yeah correct. Didn’t do too much digging around on their mobile site.

[23:37:22.0000] <domfarolino>
annevk: ok cool, thanks

[23:41:13.0000] <kochi>
annevk: https://github.com/mdn/mdn/issues/25 filed anyway

[00:45:07.0000] <kochi>
annevk: I'm a bit confused on dependencies of relatedTarget changes.  Which one I should look at first?

[00:46:24.0000] <annevk>
kochi: studying just https://github.com/whatwg/dom/pull/585 is probably fine, maybe I should close the other one since I'm not sure addressing these issues separately is worth the effort

[00:47:39.0000] <annevk>
kochi: added a clarifying comment to the earlier PR

[00:48:02.0000] <kochi>
annevk: thanks, so dom#585 is the spec change and wpt#9919 is the corresponding test change, am I correct?

[00:49:42.0000] <annevk>
kochi: yeah, though I'll need to write more tests (or someone else should)

[00:50:07.0000] <annevk>
kochi: the tests only cover a small part so far

[01:51:24.0000] <yhirano__>
annevk: can you tell me why we need to copy initiator and destination for CORS preflight fetch?

[01:52:25.0000] <yhirano__>
annevk: https://fetch.spec.whatwg.org/#cors-preflight-fetch

[03:54:42.0000] <annevk>
yhirano__: don’t recall offhand

[08:45:50.0000] <railgun>
kochi: annevk: the front-end for mdn is actually managed in this repository https://github.com/mozilla/kuma and issues are reported via bugzilla

[08:50:34.0000] <railgun>
seems like this is a duplicate of https://bugzilla.mozilla.org/show_bug.cgi?id=926963


2018-03-09
[16:04:02.0000] <annevk>
ah, thanks

[18:16:28.0000] <kochi>
railgun: thanks, i'll follow those bugs in the bugzilla.

[18:32:17.0000] <devsnek>
is the loader spec just waiting on realms to finalise now?

[18:33:36.0000] <annevk>
devsnek: I don’t think loader will happen as-is; need something that builds on service workers instead

[18:33:47.0000] <devsnek>
yea thats what the warning says

[18:34:29.0000] <devsnek>
all the workers are fully spec'd now, realms are still stage 1 so i assumed thats why the spec isn't advancing

[18:35:13.0000] <annevk>
Don’t think realms matter here, but dunno

[18:35:58.0000] <devsnek>
i don't know much about any of this hehe, thats why i came by to ask :)

[19:34:28.0000] <yhirano__>
annevk: they look unnecessary to me. if you agree i'd like to remove the copying steps.

[19:47:35.0000] <Krinkle>
TIL, xhr terminates an ongoing xhr when opening the next ; https://xhr.spec.whatwg.org/#the-open()-method

[19:47:39.0000] <Krinkle>
interesting

[19:47:57.0000] <Krinkle>
i guess due to some of the fields being static?

[19:50:51.0000] <Krinkle>
or.. this is only about the same instance being reused, right. I don't even...

[20:28:15.0000] <Domenic>
Don't use XHR :)

[21:20:39.0000] <domfarolino>
^


2018-03-12
[00:08:43.0000] <Domenic>
annevk: If you click "Details" in the PR's participation check you'll get to https://participate.whatwg.org/agreement-status?user=yoavweiss&repo=fetch which is a real-time view with a form at the bottom for updating GitHub. It indicates Yoav is still not quite set up; my guess is his org membership is not public.

[00:09:03.0000] <Domenic>
See also https://github.com/whatwg/participate.whatwg.org/issues/21 for reducing one step

[00:09:24.0000] <yoav>
checking on my end

[00:10:14.0000] <yoav>
yup, was private

[00:10:22.0000] <yoav>
should be good now

[00:11:11.0000] <Domenic>
Perfect. I'll do the tell-GitHub-about it step, although anyone can do it by going to that URL and pasting https://github.com/whatwg/fetch/pull/659 in the box

[00:11:57.0000] <annevk>
Domenic: thanks

[00:12:12.0000] <annevk>
All green now

[00:17:54.0000] <annevk>
yoav: all I meant with follow-up issue was filing one, no need to have it solved straight away

[00:59:55.0000] <yoav>
annevk: oh, OK :) I'll file one

[01:00:31.0000] <smaug____>
/me doesn't yet have an opinion on imperative API. Gut feeling is that non-direct-child-nodes shouldn't be supported, but not sure.

[01:06:46.0000] <annevk>
I guess we made some progress on it in the sense that we have an updated version of the problem space

[01:18:25.0000] <yoav>
annevk: so, basically you want me to file a Fetch equivalent of https://github.com/w3c/webappsec-csp/issues/282?

[01:23:45.0000] <annevk>
yoav: yeah I suppose

[01:24:02.0000] <annevk>
yoav: I wasn't aware we already track it there, but tracking it on both sides seems good

[01:24:22.0000] <yoav>
cool, will do

[01:29:04.0000] <yoav>
annevk: https://github.com/whatwg/fetch/issues/683

[02:29:03.0000] <annevk>
yoav: I think the only thing remaining is impl bugs

[02:29:13.0000] <annevk>
yoav: they weren't filed as part of the CSP change it seems

[02:29:34.0000] <annevk>
mkwst: maybe make that a policy? To file impl bugs for WebAppSec normative spec changes?

[04:27:52.0000] <annevk>
smaug____: I'd appreciate review of https://github.com/whatwg/dom/pull/585

[04:30:41.0000] <smaug____>
annevk: let me have lunch first

[04:37:23.0000] <annevk>
Hmm, Chrome exposes Touch / TouchEvent on desktop, but nobody else does?

[04:37:30.0000] <annevk>
foolip: known interop issue? ^^

[04:37:50.0000] <annevk>
Not sure how to test relatedTargets then...

[06:21:59.0000] <smaug____>
annevk: so is the diff in the first comment of https://github.com/whatwg/dom/pull/585 the right one to look at?

[06:22:45.0000] <smaug____>
(it isn't clear to me from the UI what the 'diff' refers to)

[06:35:44.0000] <annevk>
smaug____: yes

[06:36:13.0000] <annevk>
smaug____: it’s a human readable diff of the whole PR

[08:47:40.0000] <Ms2ger>
Anyone around who can explain why a ServiceWorkerRegistration needs {installing,waiting,active} attributes? Why is one not enough?

[08:48:56.0000] <annevk>
Ms2ger: when you install a new one, you might also have a different active one serving content at the moment

[09:16:46.0000] <foolip>
annevk: that sounds familiar, dtapuska would know the background


2018-03-13
[21:45:34.0000] <Domenic>
dbaron: https://github.com/mozilla/standards-positions/blob/master/CONTRIBUTING.md#which-specifications seems a little exclusionary :)

[21:51:23.0000] <annevk>
Domenic: created https://github.com/mozilla/standards-positions/pull/71

[21:51:44.0000] <Domenic>
\o/

[21:52:12.0000] <annevk>
Pretty sure it's an oversight since we list them elsewhere

[21:52:32.0000] <annevk>
I hope at some point we'll also include Khronos, Unicode, CA/B, et al

[21:52:44.0000] <Domenic>
Yeah fair point

[21:53:03.0000] <Domenic>
Although not sure how many specs the CA/B produces

[21:54:40.0000] <annevk>
Well, they have a set of guidelines CAs need to adhere to that gets change proposals

[21:54:59.0000] <annevk>
So they produce at least one "Living Standard" of sorts that I know of

[21:55:00.0000] <Domenic>
Ah yeah, that fits

[21:59:11.0000] <Domenic>
annevk: if you're working on DOM bugs today https://github.com/whatwg/dom/issues/371 still really bugs me

[22:00:58.0000] <annevk>
Domenic: I'd like all the shadow stuff to land first

[22:01:16.0000] <annevk>
Domenic: also, it's starting to get to me a bit that I'm always cleaning up other folks their trash

[22:02:20.0000] <Domenic>
:-/

[22:02:48.0000] <Domenic>
For shadow DOM that's an issue with how the incubation proceeded I think

[22:03:00.0000] <Domenic>
Not sure what happened with the service worker thing, seems like it needed more review going in?

[22:04:26.0000] <annevk>
Yeah, it didn't have enough architectural scrutiny and it took a long time for the lifetime to become somewhat defined

[22:05:01.0000] <Domenic>
jungkees is doing a lot of the cleanup there, which is great :)

[22:05:19.0000] <Domenic>
Coupled with WPT upstreaming

[22:06:41.0000] <annevk>
Yeah, that certainly helps

[23:01:15.0000] <annevk>
Maybe I can tackle that a bit as it does not touch dispatch

[23:23:28.0000] <dbaron>
Domenic: merged

[23:42:33.0000] <kochi>
oops, I'm not used to using GitHub review tool for making comments...

[00:25:47.0000] <annevk>
TabAtkins: https://github.com/whatwg/dom/issues/185

[01:24:41.0000] <annevk>
Domenic: JakeA: to what extent do we still want https://github.com/whatwg/dom/issues/438?

[01:25:18.0000] <annevk>
Domenic: JakeA: maybe we should file a dedicated issue on serialize/transfer for AbortController and close that one?

[01:27:05.0000] <Domenic>
Hmm I can't remember why I wanted that :/

[01:40:45.0000] <annevk>
That seems like a good reason to close it 😃

[01:50:03.0000] <JakeA>
annevk: Domenic: It's interesting, but transferring promises/streams would be higher on my list

[01:50:35.0000] <Domenic>
Yeah it seems like transferring streams is coming up soon

[02:05:10.0000] <JakeA>
Domenic: what's the solution for deciding which objects should be transferred, and which should be cloned?

[02:05:17.0000] <Domenic>
That's the open question

[02:05:30.0000] <Domenic>
Although at least for readable byte streams we can just easily decide they're all transferred

[02:05:35.0000] <JakeA>
yeah

[02:06:11.0000] <JakeA>
controller.enqueue(whatever, transferables) is the best I can think of

[02:06:39.0000] <Domenic>
For tasklets surma / iank___ contemplated just always transferring all the transferrable things

[02:08:10.0000] <JakeA>
Sure. Might be weird that it's different to postMessage though. Or stream.pipeThrough(new TransferAll())

[02:08:56.0000] <JakeA>
Which could be explained using controller.enqueue(whatever, transferrables)

[02:09:36.0000] <Domenic>
Yeah c.e(w, t) seems like probably the right primitive? But maybe it should be easier?

[02:09:52.0000] <Domenic>
I was thinking new ReadableStream({ autoTransfer: true, ... }) maybe

[02:10:38.0000] <Domenic>
The pipeThrough idea works but feels a bit strange at the moment, hmm

[02:10:43.0000] <Domenic>
I guess it depends on who we want to be in control

[02:11:53.0000] <JakeA>
const stream = new ReadableStream({ autoTransfer: true, … }).pipeThrough(new TransformStream()); // what happens if I transfer stream? Has the transform stream unmarked the objects as transferrable?

[02:12:18.0000] <JakeA>
hmm

[02:14:02.0000] <Domenic>
Hmm yeah

[02:14:13.0000] <Domenic>
There are several levels of transferrability here, I guess autoTransfer is not the interesting one

[02:15:07.0000] <Domenic>
Hmm

[02:15:27.0000] <Domenic>
Maybe x.postMessage(stream, [ReadableStream.transferChunks])???

[02:16:13.0000] <JakeA>
Kinda magic

[02:16:26.0000] <Domenic>
Orrr even just x.postMessage(stream, []) vs. x.postMessage(stream, [stream])

[02:16:43.0000] <Domenic>
I guess the question is, what does the first one do.

[02:16:53.0000] <Domenic>
Does it tee stream or does it lock it forever and clone the chunks over

[02:17:15.0000] <Domenic>
s/tee/clone I guess, which we still haven't really done

[02:17:16.0000] <JakeA>
I figured it'd tee, or throw

[02:17:57.0000] <JakeA>
yeah I guess cloning is the right thing

[02:18:34.0000] <JakeA>
But I think the cloning/transferring of the stream is separate to the chunks

[02:19:07.0000] <Domenic>
I was kinda hoping it wasn't, then we could just use that distinction

[02:19:11.0000] <JakeA>
At least a transform stream lets you do it on a chunk by chunk basis, but having to make sure it's the very last transform in the sequence might be a gotcha

[02:20:03.0000] <Domenic>
I'm no longer sure how that would work, except by some kind of magical marking of chunks as transferrable

[02:20:11.0000] <Domenic>
Because the transfer-or-not decision needs to be made inside the postMessage code

[02:20:54.0000] <JakeA>
Yeah I guess the stream would have a weakmap of chunks to transferrables

[02:21:02.0000] <JakeA>
but yeah, I see your point

[02:21:28.0000] <Domenic>
Auto-transferring seems nice...

[02:21:34.0000] <Domenic>
We could also add an options bag to all the postMessage APIs...

[02:22:20.0000] <JakeA>
obj[Symbol.transferrables] 😈

[02:26:17.0000] <Domenic>
Let the games begin https://twitter.com/domenic/status/973490376731328513

[02:31:55.0000] <nox>
annevk: Around?

[02:34:39.0000] <annevk>
nox: yeah

[02:35:04.0000] <nox>
annevk: https://github.com/immersive-web/webxr/issues/25#issuecomment-372602299

[02:35:21.0000] <nox>
annevk: If the answer is kill, I'm removing the test from a Servo PR and it should land in WPT soon afterwards.

[02:35:31.0000] <nox>
annevk: It's just mentioned in WebVR's idlharness tests.

[02:36:26.0000] <annevk>
nox: sorry, don't know about webxr

[02:36:33.0000] <nox>
Fair enough.

[02:36:48.0000] <annevk>
nox: it does seem that if allowvr is implemented that needs upstreaming to HTML /  Feature Policy

[02:37:05.0000] <nox>
annevk: 'allow="vr"' is a thing,

[02:37:14.0000] <nox>
so probably just something that we forgot to remove.

[02:37:14.0000] <annevk>
nox: that's feature policy

[02:37:29.0000] <annevk>
nox: allow= is here to stay

[02:37:38.0000] <nox>
Yeah that I know.

[02:38:18.0000] <annevk>
Domenic: hmm, how do you count?

[02:38:26.0000] <annevk>
Domenic: are Worker and MessageChannel separate?

[02:38:43.0000] <Domenic>
annevk: IDL method declarations

[02:40:27.0000] <nox>
Can I kill an arrow function in a test?

[02:40:33.0000] <nox>
Servo still doesn't support them.

[02:40:43.0000] <annevk>
nox: I'd rather you not

[02:40:59.0000] <nox>
Well I guess we won't run those tests then. What could go wrong?

[02:41:03.0000] <annevk>
nox: I land stuff with them all the time and they're actually more readable

[02:41:21.0000] <nox>
I don't see how "more readable" enters the picture here.

[02:41:36.0000] <nox>
Now I need to maintain a separate fork of tests.

[02:41:43.0000] <annevk>
nox: in that I likely have to read that test again in the future

[02:42:03.0000] <annevk>
nox: there's a root problem here and the arrow functions are not it

[02:42:50.0000] <nox>
annevk: Ok.

[02:43:31.0000] <annevk>
Domenic: I wonder if that's really the upper bound, given AudioWorklet

[02:43:43.0000] <Domenic>
annevk: I checked, AudioWorklet uses MessagePort

[02:44:31.0000] <Domenic>
Servo should just give up and add Babel at this point

[02:44:33.0000] <annevk>
Domenic: hurray

[02:44:45.0000] <nox>
No, we should get our SM bump,

[02:44:55.0000] <nox>
but SM's build system is… Well it exists.

[02:45:07.0000] <nox>
May have brainfarted anyway, I think the arrow function itself is borken.

[02:45:36.0000] <nox>
Is `r => r.text()` supposed to work?

[02:45:41.0000] <nox>
  │   → invalid arrow-function arguments (parentheses around the arrow-function may help)

[02:46:08.0000] <Domenic>
yeah it should...

[02:46:15.0000] <annevk>
Need to be more ambitious, re-introduce IronMonkey but now with the meaning of being a JS impl in Rust

[02:46:43.0000] <nox>
So we are on a SM version that choke on some arrow functions or something, wonderful.

[02:47:07.0000] <annevk>
That seems really weird

[02:48:30.0000] <nox>
annevk: Oh no. The expression on which it chokes is in `async`,

[02:48:41.0000] <nox>
which is probably what we are actually missing.

[02:53:14.0000] <annevk>
That makes more sense

[03:02:19.0000] <nox>
annevk: Is -manual a special test name suffix?

[03:04:30.0000] <annevk>
nox: yeah, it means it cannot be automated

[03:04:36.0000] <annevk>
nox: well, that it's not automated

[03:04:41.0000] <nox>
:)

[03:19:33.0000] <hsivonen>
w3c-test.org timing out for everyone or just for me?

[03:20:04.0000] <annevk>
hsivonen: wfm

[03:20:09.0000] <hsivonen>
annevk: thanks

[03:20:31.0000] <hsivonen>
it worked for me too a short while ago

[03:23:53.0000] <hsivonen>
ooh. now it came back

[03:56:16.0000] <annevk>
I just realized that if you use event handler attributes you leak an event listener until the element is GC'd

[04:57:25.0000] <Domenic>
yes that seems accurate

[04:57:52.0000] <Domenic>
Well it's the same as event listeners though?

[04:57:58.0000] <Domenic>
In both cases you can remove manually, but if you don't, they leak

[05:16:26.0000] <annevk>
Domenic: you cannot remove an event handler

[05:16:35.0000] <Domenic>
annevk: el.onfoo = null?

[05:16:51.0000] <annevk>
Domenic: does not remove the listener

[05:17:03.0000] <Domenic>
sure, but now the listener does nothing, so I can't imagine engines keep around much if any memory for it

[05:17:18.0000] <annevk>
Sure, but still

[05:17:24.0000] <Domenic>
Not sure I'd call that a leak

[05:22:47.0000] <AutomatedTester>
what is supposed to happen when there is a shadow DOM and element(s)FromPoint is called on that area?

[05:23:12.0000] <AutomatedTester>
do we always need to check the shadowRoot exists and use that?

[05:23:31.0000] <AutomatedTester>
what happens if its a closed shadowRoot?

[05:24:26.0000] <annevk>
AutomatedTester: https://github.com/w3c/csswg-drafts/issues/556

[05:26:06.0000] <AutomatedTester>
annevk: thanks!

[16:00:20.0000] <jyasskin>
annevk/hsivonen: Regarding the worries about CBOR in https://github.com/mozilla/standards-positions/issues/29#issuecomment-334376573, have you gone through WebAuthn to make sure its use of CBOR and CDDL is fine with you? I'm working on improving the CBORbis spec precision (https://github.com/cbor-wg/CBORbis/compare/master...jyasskin:editorial-improvements), but WebAuthn also depends on CDDL which is even less precise.


2018-03-14
[20:47:48.0000] <annevk>
jyasskin: sigh, I only looked at bits of WebAuthn

[20:48:03.0000] <annevk>
jyasskin: can you file an issue?

[20:49:22.0000] <annevk>
Folks are way too technical debt happy

[05:39:49.0000] <JakeA>
annevk: How does the DOM handle: "class Foo extends Event {}; new Foo('hi')"? The spec says the event constructor "Returns a new event"

[05:40:11.0000] <JakeA>
Safari seems to follow that to the letter, and returns an object with the Event constructor

[05:40:27.0000] <JakeA>
Chrome/Firefox return an object with the Foo constructor

[05:44:09.0000] <JakeA>
Edge behaves the same as Safari

[05:52:21.0000] <annevk>
JakeA: I don't really understand how that setup works; presumably it follows from IDL, but it's a little unclear to me

[05:52:52.0000] <annevk>
JakeA: worth filing an issue on, if only to get test coverage (and maybe an example)

[05:53:15.0000] <annevk>
JakeA: I think we do have such a test for EventTarget btw, but maybe not all browsers implement that yet

[05:53:31.0000] <JakeA>
annevk: https://github.com/whatwg/dom/issues/598

[05:54:22.0000] <annevk>
JakeA: and dispatchEvent() works fine with it too, I guess?

[05:54:31.0000] <annevk>
/me wonders what else can be surprised here

[05:55:01.0000] <JakeA>
annevk: It works in all browsers I've tested, but in Edge/Safari you just get an Event object

[06:17:13.0000] <JakeA>
annevk: The EventTarget thing is a separate issue, right?

[06:25:07.0000] <annevk>
JakeA: if there's an issue, I guess

[06:25:19.0000] <annevk>
JakeA: just mentioning it to figure out what we should be saying in general

[06:25:30.0000] <JakeA>
gotcha

[06:27:29.0000] <annevk>
Sebmaster: you around?

[06:27:40.0000] <Sebmaster>
What's up?

[06:28:10.0000] <annevk>
Sebmaster: Unicode put up a new draft of UTS 46 with updated tests

[06:28:24.0000] <annevk>
Sebmaster: http://www.unicode.org/draft/Public/idna/11.0.0/IdnaTest.txt

[06:28:44.0000] <annevk>
hmm

[06:28:54.0000] <annevk>
Maybe I should be pinging TimothyGu instead ^^

[06:29:22.0000] <Sebmaster>
Did they change anything about the actual spec?

[06:30:08.0000] <Sebmaster>
I could probably poke tr46.js sometime tonight, haven't done any oss work recently

[06:30:40.0000] <annevk>
Sebmaster: http://www.unicode.org/draft/reports/tr46/tr46.html has the latest diff, doesn't seem substantial

[06:31:22.0000] <Sebmaster>
Ah, pretty sure we have this in the code already due to test necessity

[07:06:31.0000] <Domenic>
It looks like they added instructions on how to actually use the test file

[07:06:41.0000] <Domenic>
And changed the format to be more usable for our purposes

[07:06:53.0000] <Domenic>
It would be nice to verify that the updates were aligned with what we were hoping for, and if so, tell them

[07:07:20.0000] <annevk>
Domenic: yeah, I updated the relevant whatwg/url issue, Timothy will have a look next week hopefully

[07:08:12.0000] <annevk>
Domenic: I created https://github.com/w3c/web-platform-tests/pull/4504 once, but I never really figured out what the underlying issues were

[07:08:49.0000] <Domenic>
I think TimothyGu did some magic to either the implementation or the test runner to make tr46.js pass all the tests

[07:09:01.0000] <Domenic>
We should figure out how to port that to WPTs

[07:09:51.0000] <annevk>
The main problem here is lack of browser interest to fix anything

[07:10:07.0000] <annevk>
E.g., ToASCII of ASCII vs non-ASCII input

[07:10:10.0000] <Domenic>
Yeah

[07:10:16.0000] <Domenic>
I dunno, maybe WebKit cares

[07:10:37.0000] <Domenic>
Still nice to have tests in case any of them wake up

[07:10:38.0000] <annevk>
E.g., getting Chrome and Edge to deal with "nontransitional"

[07:11:05.0000] <annevk>
Domenic: even Safari has weird bugs, where they flip the nontransitional bit depending on which API you use...

[07:11:19.0000] <Domenic>
Maybe worth filing those

[07:11:26.0000] <annevk>
These are all filed

[07:11:29.0000] <Domenic>
Ah OK

[07:11:46.0000] <annevk>
They're just not getting any attention

[16:54:17.0000] <Sebmaster>
annevk: are you aware of where the new idnatest.txt is? It's not here yet: https://unicode.org/Public/idna/


2018-03-15
[19:18:34.0000] <Domenic>
Sebmaster: I tweeted at the spec author and CCed you

[19:18:39.0000] <Domenic>
Seems like a pretty bad oversight, lol

[21:45:16.0000] <annevk>
Sebmaster: apparently it was meant to be private still and I messed up

[22:32:23.0000] <Domenic>
oh dear

[22:54:55.0000] <vfrflj>
THIS IS A FREENODE BREAKING NEWS ALERT!! Hitechcg AND opal ARE GOING AT IT RIGHT NOW WITH A LOT OF FIGHTING AND ARGUING WOW YOU DON'T WANT TO MISS THIS!! TYPE /JOIN ## TO SEE THE ACTION...AGAIN TYPE /JOIN ## TO SEE THE ACTION!!

[22:54:55.0000] <vfrflj>
THIS IS A FREENODE BREAKING NEWS ALERT!! Hitechcg AND opal ARE GOING AT IT RIGHT NOW WITH A LOT OF FIGHTING AND ARGUING WOW YOU DON'T WANT TO MISS THIS!! TYPE /JOIN ## TO SEE THE ACTION...AGAIN TYPE /JOIN ## TO SEE THE ACTION!!

[22:54:55.0000] <vfrflj>
THIS IS A FREENODE BREAKING NEWS ALERT!! Hitechcg AND opal ARE GOING AT IT RIGHT NOW WITH A LOT OF FIGHTING AND ARGUING WOW YOU DON'T WANT TO MISS THIS!! TYPE /JOIN ## TO SEE THE ACTION...AGAIN TYPE /JOIN ## TO SEE THE ACTION!!

[22:54:55.0000] <vfrflj>
THIS IS A FREENODE BREAKING NEWS ALERT!! Hitechcg AND opal ARE GOING AT IT RIGHT NOW WITH A LOT OF FIGHTING AND ARGUING WOW YOU DON'T WANT TO MISS THIS!! TYPE /JOIN ## TO SEE THE ACTION...AGAIN TYPE /JOIN ## TO SEE THE ACTION!!

[22:54:59.0000] <vfrflj>
rego a-ja dboehmer howdoi plutoniix eric_carlson justJanne hendry karlcow dmiles dgrogan jsbell espadrine Garbee stalled kbrosnan Manishearth mpt yoav gavin__ hober XhmikosR globbot moo-_- scott_gonzalez felixsanz MikeSmith robertkowalski wakaba tomaw manu ricea beowulf MrMaxMeranda daurnimator Domenic jdescottes hayato aklein birtles lerc nox annevk miketaylr twisted` timeless Krinkle jschoi SimonSapin NavidZ Dashiva wcpan Bakkot cgbrews

[22:57:15.0000] <Domenic>
They always leave before I can kick them...

[22:57:56.0000] <a-ja>
cowards!

[23:08:29.0000] <Krinkle>
/me was watching The Terminal minutes before and heard Gupta say “You are a coward! You come *this* close to America.. Coward!”

[00:38:21.0000] <annevk>
nox: https://github.com/whatwg/dom/pull/585#pullrequestreview-103789697

[01:15:41.0000] <nox>
annevk: What about it?

[01:18:33.0000] <annevk>
nox: it's the thing you wrote a PR for once about resetting more state; question now is whether this other stuff should be reset too

[01:21:49.0000] <nox>
Oh. Seems to me like everything should be.

[02:06:18.0000] <nox>
Is w3c-test.org down?

[02:08:44.0000] <annevk>
It's here

[02:09:43.0000] <beowulf>
Hi, in the Participant Agreement what does "a person who does not work in the field of web technologies" mean? If I work for a SaaS company that builds HTML widgets but doesn't contribute to specs or browsers, do I meet the definition of not working in "field of web technologies"?

[02:11:22.0000] <annevk>
beowulf: I think so

[02:11:56.0000] <beowulf>
annevk: thanks

[02:19:44.0000] <nox>
annevk: Ah damn. Doesn't work for me.

[02:20:14.0000] <annevk>
nox: I was agreeing

[02:25:37.0000] <nox>
annevk: Oh. :)

[02:36:59.0000] <Domenic>
annevk: https://github.com/whatwg/html/pull/3472 would be nice to get reviewed and merged

[03:03:11.0000] <annevk>
Domenic: looking

[04:03:41.0000] <annevk>
Domenic: are you waiting with reviewing the StaticRange thing until impl have made the change?

[04:03:51.0000] <annevk>
Domenic: or should someone else review it?

[04:04:59.0000] <Domenic>
annevk: oh, hmm, I think I forgot. I guess since nobody else is stepping up, I should... Tomorrow, hopefully.

[04:05:26.0000] <annevk>
Domenic: I could ping that email thread with folks asking for it

[04:05:52.0000] <Domenic>
I mean, might be good to get more eyes/involvement.

[04:08:13.0000] <annevk>
I pinged Florian, Johannes, Gary, and Chaals who I had been emailing with to some extent about this

[04:08:24.0000] <annevk>
We'll see what happens

[04:09:14.0000] <annevk>
Maybe I should ping Chong too, looking at the blink-dev thread

[04:14:35.0000] <MikeSmith>
wptserve is running on the http://w3c-test.org/ host so I think the problem might be with the W3C firewall not allowing requests to get through to it

[04:15:03.0000] <MikeSmith>
which I can’t fix on my own, so will ping the systems team

[04:15:23.0000] <MikeSmith>
nox: ⬆

[04:15:28.0000] <annevk>
Pinged them too (and some others on the blink-dev thread)

[04:15:37.0000] <nox>
MikeSmith: Ack, thanks.

[04:16:52.0000] <annevk>
Somehow I have the feeling that all these emails are typically in vain

[06:13:42.0000] <MikeSmith>
nox: http://w3c-test.org/ is back

[06:13:58.0000] <nox>
MikeSmith: You rock.

[06:15:28.0000] <MikeSmith>
/me leans gets up from his rocking chair to pat himself on the back

[07:56:16.0000] <smaug____>
annevk: so is the issue about the return value of dispatch algorithm or whether to return early? the initial comment hints about latter, but your latest comment former

[07:57:27.0000] <annevk>
smaug____: the return value of the returning early condition

[08:00:43.0000] <annevk>
I wonder if instead of returning early I should just invert the conditional and nest a whole bunch of steps

[08:00:52.0000] <annevk>
That would actually be a fair bit cleaner

[08:01:59.0000] <smaug____>
I think return value should be false, if the event was already canceled before dispatching

[08:02:11.0000] <smaug____>
did you test Gecko?

[08:02:26.0000] <annevk>
smaug____: Gecko throws on attachShadow

[08:02:38.0000] <smaug____>
what has this to do with attachShadow

[08:03:01.0000] <smaug____>
oh, retargeting

[08:03:29.0000] <annevk>
Anyway, I think I agree the return value should still branch on the canceled flag

[08:03:42.0000] <smaug____>
you could enable dom.webcomponents.shadowdom.enabled

[08:04:14.0000] <annevk>
smaug____: thanks, I didn't know we had that flag, I have custom elements enabled

[08:04:38.0000] <annevk>
although it seems that's enabled by default these days

[08:04:55.0000] <smaug____>
custom elements pref is enabled in Nighlies

[08:06:23.0000] <annevk>
smaug____: so yeah, Gecko returns false (doesn't clear target though if relatedTarget was in a shadow tree)

[08:06:59.0000] <smaug____>
annevk: right, the target clearing happens per (old) spec

[08:08:16.0000] <annevk>
The inverse of "If target is relatedTarget and target is not event’s relatedTarget" is "If target is not relatedTarget or target is event's relatedTarget", right?

[08:25:18.0000] <annevk>
Went with that

[15:57:36.0000] <MikeSmith>
annevk: from the ABNF at https://fetch.spec.whatwg.org/#http-new-header-syntax it currently seems not at all clear that the * wildcard is an allowed value for Access-Control-Allow-Methods and Access-Control-Allow-Headers


2018-03-16
[22:35:35.0000] <annevk>
MikeSmith: guess we should add a note

[22:36:07.0000] <annevk>
MikeSmith: the header and method production allow for *

[22:39:26.0000] <MikeSmith>
yeah to be clear, it’s not a problem for implementors

[22:39:35.0000] <MikeSmith>
instead just for developers/authors reading the spec

[22:40:43.0000] <MikeSmith>
the root problem for developers/authors is that from reading the spec, it’s not clear they can use * in Access-Control-Allow-Headers to mean “any header name”

[22:41:42.0000] <MikeSmith>
anyway I will make time to write up a PR that adds a note

[22:49:56.0000] <annevk>
The ABNF is mostly for implementers but sure

[22:51:30.0000] <MikeSmith>
yeah

[22:55:52.0000] <MikeSmith>
maybe making it clear to developers/authors is as simple as changing “For `Access-Control-Expose-Headers`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` response headers the value `*` counts as a wildcard” to “For `Access-Control-Expose-Headers`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` response headers, you can use the value `*` as a wildcard

[22:55:58.0000] <MikeSmith>
(to mean "any header name" or "any method name")”

[23:00:39.0000] <annevk>
I’d have to read the CORS section again

[00:05:16.0000] <annevk>
foolip: https://github.com/whatwg/dom/issues/410

[00:14:30.0000] <foolip>
annevk: I have it pinned in my inbox, but won't be back at work until Tuesday

[00:15:08.0000] <annevk>
foolip: oh sorry, I did see you were away yesterday and forgot again

[00:15:13.0000] <annevk>
foolip: enjoy things

[01:12:11.0000] <annevk>
Domenic: can you review https://github.com/w3c/web-platform-tests/pull/9967 too?

[01:12:36.0000] <Domenic>
foolip are IDL updates automated yet?

[01:12:58.0000] <annevk>
I don't think so, but note that it does more than just updating the IDL

[01:13:16.0000] <annevk>
Also, he's on vacation

[01:14:08.0000] <Domenic>
Fair

[01:14:19.0000] <foolip>
Domenic: PRs aren't auto-created yet, but lukebjerring is working through all of interfaces/ to get them in sync to enable just that

[01:14:36.0000] <foolip>
Domenic: the ones with some boilerplate at the top are verbatim copies now

[01:14:45.0000] <Domenic>
Ah OK cool

[02:21:35.0000] <Domenic>
annevk: heading on vacation in like 20 minutes, but will try to get through some reviews and bug filing and stuff...

[02:21:58.0000] <annevk>
Domenic: aah enjoy all the great food there

[02:22:30.0000] <annevk>
Domenic: you got a week or a couple of weeks?

[02:22:33.0000] <Domenic>
Two

[02:24:40.0000] <annevk>
Domenic: I think WebKit/Chrome have contenteditable=plaintext

[02:24:44.0000] <annevk>
Domenic: at least internally

[02:25:09.0000] <Domenic>
Huh, I thought that was a proposal from the editing folks that browsers never implemented.

[02:25:46.0000] <annevk>
Hmm, now I'm starting to doubt, oh well, in any event, we shouldn't have multiple cursor/selection models

[02:27:44.0000] <annevk>
Nah I was right: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/html/HTMLElement.cpp?type=cs&q=contenteditable+plaintext&sq=package:chromium&l=1232

[02:34:17.0000] <Domenic>
I mean, we might have one model, but with the Range/Selection API just upconverting a cursor into an empty selection.

[02:36:14.0000] <annevk>
Domenic: but the <textarea> API seems to do the same

[02:36:27.0000] <annevk>
Domenic: e.g., for selectionStart, if there's no selection, you get the cursor position

[02:36:48.0000] <annevk>
Domenic: if we instead always had a selection, there wouldn't be a need to branch

[02:37:17.0000] <Domenic>
I think partly it's just weird to say that the user's selected some text, but they have actually selected no text

[02:37:51.0000] <Domenic>
But as I said in the new issue, I haven't dug into all the implications of something "being a selection" vs. being a text entry cursor

[04:39:59.0000] <hsivonen>
https://www.w3.org/TR/japanese-xml/ is a weird doc. I talks a lot about unconvertional x- labels and then proceeds to say UTF-8 or UTF-16 as a "should" anyway

[04:40:16.0000] <hsivonen>
*unconventional

[04:41:01.0000] <hsivonen>
it looks like a really long way to say that you "should" use what XML Processors "must" be able to ingest

[06:22:26.0000] <annevk>
hsivonen: how did you end up there?

[09:18:10.0000] <annevk>
I wish we had done Infra years ago

[09:18:20.0000] <annevk>
Working on https://github.com/whatwg/dom/pull/609 it clarifies so many things

[10:39:41.0000] <TabAtkins>
Yeah, Infra's so good.

[13:44:31.0000] <jsbell>
Adding a global idlharness test for webaudio. Oops, need to pull in DOM for Event/EventListener. Oops, and HTML for EventTarget and HTMLMediaElement (at least that last one makes sense). And oops, HTML needs CSSOM for LinkStyle... *sigh*

[13:45:44.0000] <gsnedders>
if only someone wrote something to do dependency resolution :)

[13:46:47.0000] <jsbell>
gsnedders: ooh, should I interpret that as: you already did so?

[13:46:50.0000] <jsbell>
or just on the todo list?

[13:46:59.0000] <gsnedders>
nah, I didn't

[13:47:05.0000] <gsnedders>
but it would be nice to have


2018-03-17
[09:26:09.0000] <e1z0>
yo

[09:26:15.0000] <e1z0>
sup

[09:27:59.0000] <e1z0>
got a little bit problems on posting to the xmlhttp and getting answers using php, maybe there is a good class for that thing

[09:28:02.0000] <e1z0>
:|


2018-03-18
[18:55:39.0000] <othermaciej>
Does anyone have a handy link to info about the workshop where the w3c decided to abandon HTML in favor of XHTML2 (many years ago, triggering the foundation of the WHATWG)?

[19:00:59.0000] <MikeSmith>
othermaciej: yeah, gimme a minute

[19:01:13.0000] <othermaciej>
I think I found it: https://www.w3.org/2004/04/webapps-cdf-ws/summary

[19:01:28.0000] <othermaciej>
I didn't remember that it was all Dean Jackson's fault :-)

[19:01:40.0000] <MikeSmith>
haha

[19:01:59.0000] <MikeSmith>
it is also linked to from somewhere on https://www.w3.org/html/wg/wiki/History

[19:02:06.0000] <MikeSmith>
/me looks for it

[19:02:49.0000] <MikeSmith>
https://www.w3.org/html/wg/wiki/History#2004-06 has several links

[19:03:18.0000] <othermaciej>
thanks, that is very useful

[19:04:29.0000] <MikeSmith>
by the way, we also have Dean to blame/thank for starting use of the term “HTML5” for the Web Applications 1.0 spec

[19:04:49.0000] <MikeSmith>
I noticed that in the WHATWG mailing list archives a while back

[19:05:50.0000] <MikeSmith>
Dean wrote a message at some point early on, proposing “Why don’t we just call this thing HTML5?”, or similar words

[19:06:36.0000] <MikeSmith>
and Dean is the first one I can remember hearing the use of the term “web platform”

[19:06:53.0000] <MikeSmith>
before it started to be used more commonly

[19:08:08.0000] <MikeSmith>
at least I remember at the point where I’d seen him use “web platform”, I wasn’t familiar with it and it wasn’t clear what he meant by it

[19:09:24.0000] <MikeSmith>
and I was still working at Opera then can say that I hadn’t heard anybody working on Opera’s browser using that term

[19:20:45.0000] <othermaciej>
Dean deserves a lot of credit for a lot of things and I'm sure the things he proposed on behalf of W3C at the workshop were not 100% up to him

[19:25:06.0000] <MikeSmith>
yep

[19:25:46.0000] <tantek>
oh yeah that workshop

[19:45:27.0000] <othermaciej>
Does anyone remember when the HTML WG / WHATWG re-schism happened?

[19:47:40.0000] <othermaciej>
looks like 2012

[19:49:51.0000] <othermaciej>
wow, did HTML WG really go 7 years before producing a REC?

[03:55:11.0000] <othermaciej>
Is thre a logo for Web Platform Tests?

[04:46:17.0000] <nox>
jgraham_: Do we have any logo for html5lib btw? Kinda wish the org on GH had a proper avatar.

[04:52:17.0000] <othermaciej>
this is missing: (not sure if intentional) https://resources.whatwg.org/logo-mimesniff.svg

[06:42:49.0000] <gsnedders>
othermaciej (if you read the logs): no, closest we've used in some dinosaur from TTWF

[06:42:52.0000] <gsnedders>
nox: no

[07:31:59.0000] <jyasskin>
In case folks are in London and not magically subscribed to the right IETF list, there's a side-meeting tonight at 7pm in the "IAB room" at the Hilton Metropole: https://www.ietf.org/mail-archive/web/art/current/msg00460.html.

[07:32:17.0000] <jyasskin>
Organized by mnot.

[07:39:06.0000] <gsnedders>
oh am I accidentally going to be in London during the IETF meeting?

[07:39:11.0000] <gsnedders>
/me didn't realise

[07:44:25.0000] <jyasskin>
TC39 is also accidentally the same week. :)

[07:46:56.0000] <gsnedders>
if anyone has something they particularly want me to come to on any day except for Monday/Tuesday, lmk, I guess

[07:51:12.0000] <jgraham_>
Oh, I could theoretically go to the IETF thing tonight if there's some reason to, although it's a bit of a trek

[07:52:28.0000] <gsnedders>
(I can do Monday evening, too, I guess, once I arrive late afternoon)

[08:25:41.0000] <devsnek>
someone raised an interesting issue on the node repo https://github.com/nodejs/node/issues/19426

[08:26:06.0000] <devsnek>
making the return value of a timer a theable

[08:31:44.0000] <jyasskin>
jgraham_: Mark has a list of possible topics at https://mailarchive.ietf.org/arch/msg/art/4cMFuua8DgiHbytZeFkw_9xRUtI: URL, MIME sniffing, Fetch, Infra, and the new governance model.

[10:01:37.0000] <annevk>
jgraham_: FWIW, Maciej and I are here, would be nice to say hi, but can understand if you rather wait until the next Mozilla thing

[10:03:36.0000] <jgraham_>
annevk: I'm thinking I might come over

[12:07:27.0000] <jgraham_>
jyasskin: So there are like 4 people in the advertised room, but none of them are mnot annevk or othermaciej

[12:08:23.0000] <jgraham>
Oh now some of them are mnot and othermaciej

[12:08:29.0000] <jgraham>
Well very briefly

[12:08:35.0000] <jgraham>
:)

[14:41:48.0000] <annevk>
Belated apologies for running late. Lightning talks went a little over time


2018-03-19
[02:37:13.0000] <nox>
https://w3c.github.io/webvr/spec/1.1/ is dead

[02:37:33.0000] <nox>
Never mind, that's just an invalid URL on MDN.

[03:45:01.0000] <hsivonen>
annevk: do I understand correctly that the spec text that makes the expected output null for https://github.com/w3c/web-platform-tests/blob/master/mimesniff/mime-types/resources/generated-mime-types.json#L967 is https://tools.ietf.org/html/rfc7230#section-3.2.6 ?

[03:45:54.0000] <annevk>
hsivonen: https://mimesniff.spec.whatwg.org/#parsing-a-mime-type

[03:46:34.0000] <hsivonen>
annevk: I somehow failed to reach that by following links from the constructor of Response in the Fetch spec

[03:46:37.0000] <annevk>
hsivonen: they're in the mimesniff folder for that reason

[03:46:37.0000] <hsivonen>
annevk: thanks

[03:46:59.0000] <hsivonen>
annevk: yes, but the test invoked Response constructor, so I started there

[03:47:12.0000] <annevk>
hsivonen: ah, that might not all be hooked up concretely yet I suppose

[03:47:41.0000] <hsivonen>
annevk: also, Response has bytes, but the "parse a MIME type" algorithm operates on Unicode

[03:47:53.0000] <annevk>
hsivonen: the hope is btw that browsers get a centralized MIME type module for this that's reused everywhere

[03:48:06.0000] <hsivonen>
If I change the error handling policy of UTF-8 to UTF-16 conversion in Gecko, the test fails

[03:48:11.0000] <annevk>
hsivonen: there's some Firefox bugs for this

[03:49:06.0000] <hsivonen>
annevk: what spec tells me how to get from bytes in Fetch to Unicode in mimesniff?

[03:49:12.0000] <annevk>
hsivonen: hmm yeah, "extract a MIME type" is underdefined

[03:49:40.0000] <annevk>
hsivonen: the expectation is that it uses https://infra.spec.whatwg.org/#isomorphic-decode

[03:50:01.0000] <hsivonen>
annevk: thanks. that's not what Gecko is doing

[03:50:25.0000] <annevk>
hsivonen: seems a little weird since header values are supposedly always "latin1"

[03:50:46.0000] <hsivonen>
annevk: I'm not saying that the current code is correct

[03:51:06.0000] <annevk>
hsivonen: but yeah, the specs are not fully okay here and I guess I should get back to cleaning up the remainder of the MIME Sniffing integration

[03:51:23.0000] <hsivonen>
annevk: OK. thanks

[03:52:13.0000] <hsivonen>
It's kinda sad that we actually have code whose test pass level depends on our present weird error handling policy for in-RAM UTF-8 to UTF-16 conversion

[03:52:28.0000] <hsivonen>
the policy being that if there's an error, the result of the conversion is the empty string

[03:53:18.0000] <hsivonen>
silently collapsing stuff to the empty string in infrastructural code seems like Bad Idea, so I'm trying to change this

[04:47:49.0000] <gsnedders>
FWIW: I have no plans for dinner; if anyone from IETF land wants to meet up this evening let me know

[04:48:02.0000] <gsnedders>
Because, like, it'd be great to see some of you.

[04:50:26.0000] <annevk>
gsnedders: I'm flying around that time :/

[04:51:14.0000] <gsnedders>
:(

[05:54:33.0000] <Domenic>
How did IETF day go?

[05:58:30.0000] <annevk>
Domenic: the WHATWG meetup went well, we didn't really get into URLs, but everything else we're doing was roughly agreeable

[06:03:20.0000] <Domenic>
Cool, much discussion of fetch?

[06:03:48.0000] <annevk>
Domenic: a little bit about how we can make the WebSocket bits nicer

[06:03:55.0000] <Domenic>
Oh cool

[06:04:10.0000] <annevk>
Domenic: and an action item of sorts for me to figure out what a better integration with HTTP would look like

[06:04:22.0000] <Domenic>
Sounds hard :)

[06:04:50.0000] <annevk>
Yeah, HTTP folks might work on another revision of the protocol, which might enable that so it's probably worth a shot

[06:06:15.0000] <Domenic>
I don't suppose data: URLs or forgiving base-64 decoding came up

[06:06:27.0000] <Domenic>
Or MIME parsing?

[06:06:53.0000] <annevk>
MIME parsing came up, nobody was phased much by not having strict handling there

[06:07:00.0000] <annevk>
Email might have similar parsing

[06:07:08.0000] <annevk>
No clear action items though

[06:07:19.0000] <annevk>
Didn't really discuss data: URLs

[06:07:45.0000] <annevk>
Or base64; I think IETF mostly prefers the base64 url variant, but I'm not sure what implementations do for that

[06:46:31.0000] <mathiasbynens>
…in which I use #SmooshGate as an excuse to explain why We Can’t Break The Web: https://developers.google.com/web/updates/2018/03/smooshgate

[10:06:18.0000] <domfarolino>
Domenic: Advice on getting https://github.com/whatwg/console/issues/113#issuecomment-370198540 rolling?

[10:06:39.0000] <domfarolino>
I'm a little hesitant to just ping Joseph again but not sure what else to do; chrome seems ready to move forward (https://bugs.chromium.org/p/chromium/issues/detail?id=801442#c9)

[10:17:19.0000] <annevk>
domfarolino: does Joseph even disagree?

[10:17:52.0000] <annevk>
domfarolino: you could ping some other implementers to make sure everyone agrees on a way forward, but not throwing kinda seems like the way to go based on a quick read?

[10:21:13.0000] <domfarolino>
annevk: Yeah, I think not throwing seems to match current behavior and is easier for implementations that don't evaluate the string when the DevTools = closed. Personally I like throwing better, but looks like that might not be the best way moving forward.

[12:40:47.0000] <domfarolino>
Is there an easy way to get the multipage version of a link found in the full-page version of HTML?

[12:44:35.0000] <annevk>
domfarolino: append the fragment to /multipage/ and wait for the client-side redirect script to run

[12:45:31.0000] <domfarolino>
Awesome thanks!

[13:55:58.0000] <KiChjang>
am i correct in thinking that WebIDL and ECMAScript are both different languages, and browsers just happen to use ECMAScript to implement WebIDL interfaces?

[14:02:36.0000] <TabAtkins>
KiChjang: Kinda. WebIDL was originally supposed to be an independent language for describing how interfaces should be implemented, so that you could do the actual implementation in multiple different target languages.

[14:03:23.0000] <KiChjang>
TabAtkins: so, would i be crazy if i think that wasm would allow other languages other than JS to implement WebIDL interfaces as well?

[14:03:43.0000] <KiChjang>
(once wasm is mature enough that is)

[14:03:50.0000] <TabAtkins>
But we abandoned that pretense a while back, because it turns out Java and JS have different execution semantics (who knew!) which changes how you want to shape the interfaces between the two languages. WebIDL is now just a more-succinct way of describing JS APIs that takes a lot of the busywork away.

[14:04:34.0000] <TabAtkins>
Other languages implementing APIs described by WebIDL will still run into the "other languages might not offer the same constructs in the same way" problem that Java/JS had.

[14:17:02.0000] <KiChjang>
hmm, so in other for other languages to substitute JS as the interface layer, they'll need to not only implement the APIs necessary, but also the execution model?

[14:17:06.0000] <KiChjang>
/me recalls that there is a project to replace JS with ruby in the browser

[14:39:12.0000] <annevk>
KiChjang: wasm will impl IDL bindings

[16:18:40.0000] <TabAtkins>
KiChjang: At least a little bit. Like, you can't implement WebIDL's `iterable<Foo>` if your language doesn't have something closely equivalent to iterables.


2018-03-20
[18:42:00.0000] <Domenic>
https://groups.google.com/d/topic/mozilla.dev.platform/_8OAKUHso0c/discussion is pretty amusing to me...

[18:43:07.0000] <Domenic>
Do they not see how this is immediately going to turn into news headlines of the form "Mozilla plans to send all your web traffic to Cloudflare", complete with a rundown of previous stumbles Mozilla has made?

[20:39:14.0000] <Krinkle>
annevk: I like the timeago implementation you use for your blog "Less than a year ago.", quite uncommon but makes a ton of sense. Love it!

[23:40:40.0000] <annevk>
Krinkle: thanks

[23:42:11.0000] <annevk>
rbyers: https://github.com/whatwg/dom/issues/365

[01:37:14.0000] <annevk>
jyasskin: so WebAuthn does state "Verify that attStmt is valid CBOR conforming to the syntax defined above and perform CBOR decoding on it to extract the contained fields."

[01:38:21.0000] <annevk>
jyasskin: if that's not actually sufficient it'd still be good to have an issue I suppose, although I wonder if this format is not developer-controlled whether it matters much; if it's just something the browser produces for the hardware it seems like interop risk is fairly low

[01:46:54.0000] <annevk>
hayato: are you still planning on reviewing the relatedTarget/touch target list proposal?

[01:47:36.0000] <hayato>
Yup

[01:47:45.0000] <hayato>
Let me take a look

[01:48:55.0000] <hayato>
You mean this, https://github.com/whatwg/dom/pull/585, right?

[01:49:43.0000] <annevk>
hayato: yeah

[01:50:17.0000] <annevk>
hayato: https://github.com/whatwg/dom/issues/414 is probably worth a look too, to figure out if that callback is all we need to make event constructors work well with this

[01:51:04.0000] <hayato>
I see.

[02:18:29.0000] <annevk>
kochi: I can also make the changes to the Google tests in a separate PR, maybe that's easier to review

[02:18:43.0000] <annevk>
kochi: not entirely sure when I'll get to it yet

[02:19:09.0000] <kochi>
annevk: thanks

[02:20:23.0000] <kochi>
annevk: so... shall I merge the tests?

[02:20:35.0000] <kochi>
s/tests/the test PR (#9919)/

[02:21:16.0000] <annevk>
kochi: I'd rather wait a bit until everyone has agreed on the spec

[02:21:58.0000] <annevk>
kochi: and the other test changes are ready, in particular changes to existing tests

[02:22:06.0000] <annevk>
kochi: otherwise we end up with conflicting tests in the test suite

[02:22:22.0000] <kochi>
annevk: okay, so #585 has positive reviews from smaug and hayato, do you wait for another from Apple?

[02:22:59.0000] <annevk>
kochi: ooh, didn't realize hayato finished reviewing already

[02:23:12.0000] <kochi>
3 mins ago :)

[02:23:23.0000] <annevk>
kochi: I guess I only want to wait until I fix those other existing Google tests then

[02:23:27.0000] <annevk>
(or someone else does)

[11:47:40.0000] <howdoi>
IntersectionObserver API is not meant for infinite scrolling? Heard that there are some bottle necks


2018-03-21
[19:18:36.0000] <Domenic>
domfarolino: I'm on vacation for the next two weeks, so please go ahead with console stuff without my review :)

[19:19:01.0000] <domfarolino>
Domenic: Alrighty, enjoy vacation

[05:09:31.0000] <domfarolino>
wanderview: any thoughts on https://github.com/w3c/web-platform-tests/pull/9911?

[06:42:35.0000] <wanderview>
domfarolino: I've been on parental leave for last couple weeks... still digging out of email... I'll try to get to it this week

[06:42:46.0000] <wanderview>
doesn't help that my other kids are sick this week :-\

[06:55:57.0000] <domfarolino>
wanderview: no worries I figured it’d be busy with the new one, just figured I’d try and ping :)

[08:00:22.0000] <domfarolino>
paul_irish: Would you mind if I took https://bugs.chromium.org/p/chromium/issues/detail?id=706804 if you haven't started it, and it's OK to start working on?


2018-03-22
[01:11:36.0000] <smaug____>
remind me, what is the css feature to prevent smooth scrolling

[01:12:05.0000] <smaug____>
hmm, perhaps scroll-behavior: auto;

[01:12:41.0000] <annevk>
yeah, that's what I was going to say

[01:12:51.0000] <annevk>
but no expert

[02:41:06.0000] <annevk>
Hmm, I feel like I should be more consistent in making things a set when they can be

[02:41:47.0000] <annevk>
However, that would mean a MutationObserver holds a node set (instead of a node list) and a record set (instead of a record queue as the API calls it)

[02:42:04.0000] <annevk>
Node set seems somewhat reasonable, but I'm on the fence with the record queue

[10:42:35.0000] <annevk>
mkwst: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25529


2018-03-23
[11:03:38.0000] <MassDebates>
Hello. I'm looking for an answer to a question of mine.

[11:03:47.0000] <MassDebates>
I've tried a couple different spots, but maybe this is the right spot.

[11:03:55.0000] <MassDebates>
I've got some CSS that isn't behaving the way I expect. Here it is:

[11:03:57.0000] <MassDebates>
td:hover::after{content: calc( ( var(--data-two) / var(--data-one) * 100 ) ) "%";}

[11:04:19.0000] <MassDebates>
Is this something I should expect to be able to do with CSS variables inside of a pseudo element's content property?

[11:13:35.0000] <TabAtkins>
MassDebates: 1) Make sure your two variables are both numbers; calc() doesn't support dividing by a value-with-unit yet, even things like `calc(20px / 5px)`. 2) More importantly, no, this won't work in any case - the calc() will resolve to a <number>, which isn't valid in the 'content' grammar; it only accepts strings.

[11:19:45.0000] <MassDebates>
Thank you TabAtkins

[11:20:45.0000] <MassDebates>
I have some table cells and I thought it'd be really neat to use either data attributes or custom css props to display a :hover tooltip with a converted value

[11:20:54.0000] <MassDebates>
I will use javascript


2018-03-24
[23:40:27.0000] <annevk>
IDL question, can a mixin include another mixin?

[23:55:48.0000] <Domenic>
annevk: I don't think so; partial mixins is advised in that case?

[23:56:05.0000] <annevk>
Domenic: that won't work here

[23:56:20.0000] <annevk>
Domenic: I'll file an issue against IDL and explain

[23:56:43.0000] <Domenic>
It'd be ideal to avoid that complexity, as the chains-of-mixins led to a lot of complexity in the old system

[00:01:56.0000] <annevk>
K, mentioned that in the issue

[15:28:27.0000] <domfarolino>
MDN's documentation of the <img> says the last `size` in the `sizes`attribute list _must_ not have a media condition, but I can't find anything in the spec that would prevent this

[15:29:40.0000] <domfarolino>
For example https://html.spec.whatwg.org/multipage/images.html#parsing-a-sizes-attribute just accepts the first `size` with a matching media condition if there is one

[15:31:58.0000] <domfarolino>
Oh shoot nevermind it totally does :/ whoops

[15:32:26.0000] <domfarolino>
s/does/does require the last one to not have a media condition


2018-03-25
[18:21:55.0000] <domfarolino>
actually it doesn't, i think i'm going to modify that post then...

[18:22:01.0000] <domfarolino>
gg/calc

[18:22:15.0000] <domfarolino>
/me types in wrong window :(

[07:01:44.0000] <lgrahl>
o/

[07:13:27.0000] <lgrahl>
I have a question for streams (in the context of WebRTC data channels): I have a pull source (an SCTP association) that provides multiple streams. But the individual streams do not provide a flow control (meaning you cannot pause receiving from a specific streams). I guess I will need to model the streams with a push source in that case?


2018-03-26
[00:38:49.0000] <annevk>
domfarolino: if https://github.com/w3c/web-platform-tests/pull/10167 gets stuck somehow let me know and I'll study things

[00:59:18.0000] <MikeSmith>
annevk: about Response.trailer, I vaguely recall that maybe you made a change to an issue or something recently?

[01:01:35.0000] <annevk>
MikeSmith: Firefox's address bar yields https://github.com/httpwg/http-core/issues/16 and https://github.com/whatwg/fetch/issues/473 for me

[01:02:35.0000] <MikeSmith>
/me looks

[01:02:57.0000] <MikeSmith>
thanks

[01:03:07.0000] <MikeSmith>
but it wasn’t those

[01:03:22.0000] <annevk>
heh

[01:03:29.0000] <MikeSmith>
:)

[01:03:48.0000] <MikeSmith>
I guess whatever it was can’t have been all that important, or I would remember

[01:04:01.0000] <annevk>
Fetch only has two issues and they're both fairly old

[01:04:33.0000] <annevk>
I also somewhat wonder if the feature should be removed again since nobody implemented it

[01:04:45.0000] <annevk>
It still seems kinda nice to have

[01:05:05.0000] <MikeSmith>
hmm yeah maybe it was an implementation/status change I remmeber seeing (for a feature bug I follow)

[01:05:15.0000] <MikeSmith>
yeah definitely would be nice to ahve

[08:35:14.0000] <neuro_sys>
Is the non-breaking whitespace (ASCII decimal 160) a valid URI character?

[08:47:29.0000] <nox>
neuro_sys: 'The URL code points are ASCII alphanumeric, U+0021 (!), U+0024 ($), U+0026 (&), U+0027 ('), U+0028 LEFT PARENTHESIS, U+0029 RIGHT PARENTHESIS, U+002A (*), U+002B (+), U+002C (,), U+002D (-), U+002E (.), U+002F (/), U+003A (:), U+003B (;), U+003D (=), U+003F (?), U+0040 (@), U+005F (_), U+007E (~), and code points in the range U+00A0 to U+10FFFD,

[08:47:29.0000] <nox>
inclusive, excluding surrogates and noncharacters.'

[08:47:44.0000] <nox>
U+00A0 is the non-breaking space.

[11:15:06.0000] <railgun>
annevk: I'd like to make a separate pull request to fix the old wiki links

[11:15:43.0000] <railgun>
did a grep and there's also an old link for the code of conduct, etc.

[11:29:03.0000] <railgun>
going to leave the archive links untouched...

[11:51:58.0000] <smaug____>
annevk: did you add beforesubmit already?

[11:52:33.0000] <smaug____>
I guess no

[12:10:28.0000] <tantek>
Anyone here either themselves or even *know* anyone who is using or especially *depending on* "meta name=author"?

[12:10:51.0000] <tantek>
AFAIK no browser does anything with it. Nor any search engine.

[12:10:58.0000] <tantek>
happy to be disproven with links to docs / examples that imply/demonstrate otherwise

[12:27:27.0000] <tantek>
in particular meta name=author is listed here: https://html.spec.whatwg.org/multipage/semantics.html#standard-metadata-names but I don't know of any browser support for it (UI / visible beyond just rando DOM expando props)

[13:04:22.0000] <annevk>
smaug____: no, seems tkent also wants a diff name and also invoke it for new FormData

[13:04:38.0000] <annevk>
smaug____: seems reasonable though

[13:04:59.0000] <smaug____>
annevk: oh, I thought the google doc was just old reference

[13:05:07.0000] <smaug____>
the one discussed during the meeting

[13:05:14.0000] <annevk>
railgun: ok, I guess that can work

[13:05:24.0000] <annevk>
smaug____: they updated it

[13:05:30.0000] <smaug____>
aha

[13:05:42.0000] <smaug____>
well the event name it has feels odd


2018-03-27
[17:43:20.0000] <railgun>
tantek: no idea, but I know that meta name="author" was used a lot more in the past

[17:43:40.0000] <railgun>
https://github.com/hakimel/reveal.js/blob/master/demo.html#L10 is one example I could find

[17:44:08.0000] <tantek>
railgun, I know there is plenty of history of publishing it, I just don't know of any consuming code doing anything with it

[17:44:23.0000] <tantek>
some web searching made it pretty clear that search engines all ignore it

[17:44:52.0000] <tantek>
so that's the real question, any consuming code, and in particular, does any browser do anything with it?

[17:49:12.0000] <railgun>
no idea, but I know that Google uses / has used json-ld to handle data like authors https://developers.google.com/search/docs/guides/intro-structured-data

[17:51:48.0000] <railgun>
personally I'd prefer meta name="author" over json-ld / link rel="author", but that's not the case...

[17:52:06.0000] <tantek>
there's plenty of "other" author data that Google handles, whether from microformats, JSON-LD whatever

[17:52:33.0000] <tantek>
Google used to advocate rel=author, then stopped advocating, and IIRC stopped supporting (though it's harder to verify that)

[17:52:51.0000] <tantek>
whereas meta name=author they've *never* supported

[17:54:52.0000] <railgun>
what is the best practice now?

[17:55:04.0000] <tantek>
what is your objective?

[17:56:19.0000] <railgun>
I'd like to know the best way to specify the author for a page

[17:56:45.0000] <tantek>
for whom to consume?

[17:58:28.0000] <railgun>
hmm it doesn't make as much sense now, but I was thinking about crawlers

[04:24:25.0000] <JakeA>
@annevk if node wanted to implement fetch(), would you be happy with adding stuff to the spec to let node opt out of CORS & safelist headers etc?

[04:43:10.0000] <annevk>
JakeA: maybe, depends a bit on the complexity

[04:43:16.0000] <JakeA>
agreed

[04:43:36.0000] <JakeA>
Discussion is happening here https://github.com/nodejs/node/issues/19393

[04:50:47.0000] <annevk>
JakeA: heh, when I first read that I kinda assumed author was about me, but I guess it wasn't

[04:51:04.0000] <annevk>
JakeA: I do recall some of those discussions, but perhaps they happened in parallel with someone else

[04:54:20.0000] <annevk>
I was thinking of replying, but I guess I'll just let it go

[04:54:36.0000] <annevk>
https://xkcd.com/386/

[05:01:04.0000] <JakeA>
annevk: that guy has been historically like that. The "harrasment" he referrs to is when he wanted to have the last word, saying things about fetch that weren't true, and he got annoyed about the corrections. But yeah, 386.

[05:59:14.0000] <annevk>
lgrahl: fwiw, I think we should reconsider extending WebSocket with streams et al as it reportedly is not going away anytime soon

[05:59:54.0000] <annevk>
JakeA: ^^ full duplex HTTP breaks on client-side middleware often enough reportedly

[06:03:09.0000] <lgrahl>
annevk: What's not going away? WebSocket in general you mean?

[06:03:30.0000] <lgrahl>
annevk: Btw I missed the opportunity to talk to you in person at IETF 101

[06:17:21.0000] <annevk>
lgrahl: right, WebSocket in general

[06:17:28.0000] <annevk>
lgrahl: heh, I was only there briefly

[06:18:27.0000] <lgrahl>
annevk: So... do I understand you correctly that you would like to backport streams to WebSocket once we have them for data channels?

[06:19:14.0000] <wanderview>
annevk: JakeA: at least in firefox we have a super-user type origin that can use fetch that might also benefit from better spec support in this area

[06:19:34.0000] <wanderview>
I wonder what nodejs considers its base URL

[06:20:44.0000] <annevk>
lgrahl: yeah, something like that

[06:21:13.0000] <annevk>
lgrahl: it's at least something we should consider doing again now it's clear that full duplex HTTP cannot be deployed at scale

[06:21:35.0000] <lgrahl>
annevk: Yeah, that makes sense. Especially because in the WS case we can model it as a pull source and handle backpressure... which we can't at the moment.

[06:23:37.0000] <lgrahl>
annevk: Maybe you can have a quick look at my question from two days ago: https://freenode.logbot.info/whatwg/20180325#c1478416

[06:24:15.0000] <annevk>
lgrahl: I saw that, but I don't know; perhaps wanderview or JakeA do

[06:24:54.0000] <wanderview>
lgrahl: if they are pull streams "pausing" just means that you stop pulling, right?

[06:25:24.0000] <lgrahl>
wanderview: Yep. But I can't stop pulling on individual streams, just the whole association.

[06:27:32.0000] <wanderview>
lgrahl: that must be something other than a streams spec issue?  I'm not aware of anything in streams that groups multiple streams into a bundle or whatever

[06:27:54.0000] <lgrahl>
wanderview: It's not a spec issue. It's rather a question of how to apply the streams spec in this case.

[06:27:56.0000] <wanderview>
closest thing might be the clone() operation

[06:28:11.0000] <wanderview>
where you end up with two ReadableStreams tee'd off the same source

[06:28:16.0000] <wanderview>
and one is read, but the other is not

[06:28:26.0000] <wanderview>
in this case the browser ends up having to buffer the difference in read rates

[06:28:42.0000] <wanderview>
which may or may not be a reasonable thing for webrtc...

[06:29:33.0000] <wanderview>
sorry... not clone()... that is fetch spec... the streams spec thing is tee()

[06:29:36.0000] <lgrahl>
Ah, okay, so the SCTP streams aren't WHATWG streams. It's a feature of SCTP.

[06:30:13.0000] <lgrahl>
Basically, SCTP allows you to multiplex multiple SCTP streams. I'm trying to map them to WHATWG streams with the mentioned technical limitation.

[06:31:33.0000] <wanderview>
lgrahl: if there is no way to apply back pressure to individual streams, but only to all of them at once... it seems like you need an extra thing in the API that says "if any of these streams becomes blocked the entire group will be paused"

[06:32:00.0000] <wanderview>
I don't really know the use cases, etc

[06:34:14.0000] <lgrahl>
wanderview: That could deadlock the association. We could either treat them as push sources and not handle backpressure at all or say "if all of the streams are blocked, the entire assoc will be paused". My question would be if the latter would play well with WHATWG streams.

[06:35:10.0000] <wanderview>
lgrahl: not handling back pressure and not pausing the source will lead to exhausting memory, no?

[06:35:29.0000] <lgrahl>
wanderview: It does but without any per-stream flow control I don't see a way around it

[06:36:01.0000] <wanderview>
lgrahl: ok... sounds like a footgun, though

[06:36:31.0000] <lgrahl>
wanderview: It's much more of a footgun at the moment, so it's an improvement. :]

[06:36:31.0000] <wanderview>
lgrahl: I guess we do the same thing for http1.x network response bodies...

[06:36:56.0000] <wanderview>
lgrahl: the difference is those tend to be of bounded size... its unclear to me how much data your streams are going to be pushing

[06:37:07.0000] <lgrahl>
wanderview: Technically unlimited

[06:38:47.0000] <lgrahl>
wanderview: We thought about a per-stream flow control extension to SCTP... but that is very prone to deadlocks, so nobody wants to touch that subject. I wonder how the QUIC people do it...

[06:39:05.0000] <wanderview>
lgrahl: h2 supports it

[06:39:15.0000] <wanderview>
it has its own framing protocol, though

[06:43:09.0000] <lgrahl>
wanderview: Anyway, the common use case will be some control stream on one side and some file stream on the other side. So, while the backpressure issue is going to be annoying if someone sends really fast, it's still a huge advantage to be able to handle chunks early and write them to disk on-the-fly.

[06:43:23.0000] <wanderview>
ok

[06:43:48.0000] <wanderview>
lgrahl: that sounds reasonable... I guess I was worried it was video data or something

[06:44:37.0000] <lgrahl>
wanderview: It does compete with A/V but that falls into a whole other category (congestion control - not my department) :)

[06:44:45.0000] <lgrahl>
And so does it today FWIW

[06:45:18.0000] <wanderview>
lgrahl: thats fine... I was worried about buffering video data

[06:45:45.0000] <lgrahl>
wanderview: People could technically run custom video codecs over it... so it's good you're mentioning this.

[06:46:32.0000] <wanderview>
lgrahl: maybe it would be worth adding some kind of event like "excessive buffering OMG" that people could listen for?  I don't know if that would be used or worth it, though

[06:48:13.0000] <lgrahl>
wanderview: You can already query the amount of buffered data with the current API. We could use that in streaming mode to get the amount of backlogged data. But the question would be if that's helpful... people could run their own flow control but that's really meh.

[06:49:53.0000] <wanderview>
lgrahl: if you want to support that API, you probably need to keep the streams spec streams as pull sources... so you know how much is buffered and can report it... if you push it into the ReadableStream I'm not sure you can see how much is buffered there

[06:52:57.0000] <lgrahl>
wanderview: I'll look into this. But exposing it via https://rawgit.com/w3c/webrtc-pc/master/webrtc.html#dom-rtcdatachannel-bufferedamount would be an ok-ish fallback to me if that's too much effort.

[07:59:27.0000] <domfarolino>
annevk: Does fetch allow for redirecting across schemes?

[07:59:59.0000] <annevk>
domfarolino: not generally

[08:00:38.0000] <domfarolino>
annevk: Ok, would you say https://crbug.com/532782 (redirecting to a Blob URL) is probably a non-issue?

[08:01:28.0000] <domfarolino>
As Kinuko says at the bottom of thread spec doesn't really talk about this, and from what I see, there's only https://fetch.spec.whatwg.org/#http-redirect-fetch which wouldn't support this

[08:01:47.0000] <wanderview>
its basically a cross-origin redirect, right?

[08:02:06.0000] <wanderview>
don't some browsers explicitly block redirect to data URLs?

[08:11:58.0000] <domfarolino>
wanderview: It seems that Chrome does yeah. Is this mandated by spec?

[08:13:16.0000] <wanderview>
domfarolino: I believe we block it from insecure http redirect now... not sure where the spec stands these days

[08:15:12.0000] <domfarolino>
wanderview: Does that mean the redirect is not blocked if it's coming from https?

[08:17:12.0000] <wanderview>
domfarolino: actually, looks like we blocked on subresource redirects to data URLs here... https://bugzilla.mozilla.org/show_bug.cgi?id=1428793

[08:17:15.0000] <wanderview>
FF60

[08:17:19.0000] <wanderview>
which is beta atm

[08:32:30.0000] <domfarolino>
wanderview: Ahh ok thanks for the info

[08:32:58.0000] <domfarolino>
wanderview: So should a Blob URL be treated the same as a data URL then? honestly I'm not entirely familiar with either (or their differences)

[08:33:45.0000] <wanderview>
domfarolino: so... I'm not even sure how a server would legit get a blob URL since it consists of an ephemeral hash specific to a particular browser instance running in the client

[08:34:05.0000] <wanderview>
domfarolino: I guess a service worker could return a redirect to a blob URL, but it could also just respondWith() the blob as a response

[08:34:44.0000] <wanderview>
domfarolino: my inclination would be to block redirects to "local" urls which would covert data:, blob:, about:, etc... not sure what annevk thinks about that, though

[08:35:37.0000] <annevk>
domfarolino: per the spec that's a network error I think

[08:35:47.0000] <annevk>
domfarolino: now if you navigate to the URL, it would work...

[08:36:07.0000] <annevk>
domfarolino: that's what I meant with not generally; when navigating you can be redirected to non-HTTP(S) URLs

[08:36:33.0000] <annevk>
wanderview: you can include it in the URL, which is a little silly

[08:36:46.0000] <wanderview>
annevk: include what?

[08:36:56.0000] <annevk>
wanderview: the blob URL

[08:37:14.0000] <wanderview>
annevk: oh... as a search param that gets reflected... like how our various tests work

[08:37:22.0000] <annevk>
wanderview: "redirectme?url=" + blobURL or some such

[08:37:45.0000] <wanderview>
annevk: yea... I guess that woudl work... but happy to network error that

[08:38:03.0000] <wanderview>
/me lunches

[08:43:21.0000] <domfarolino>
annevk: Ok so as per https://fetch.spec.whatwg.org/#ref-for-concept-response-location-url%E2%91%A3, any redirect through fetch() to a non http(s) should be a network error as you mentioned

[08:43:40.0000] <domfarolino>
annevk: but on navigations it can work and that's fine

[08:47:50.0000] <domfarolino>
thanks for the info!

[08:47:54.0000] <annevk>
domfarolino: for navigations HTML controls what's allowed

[08:48:05.0000] <domfarolino>
Right that makes sense

[08:48:37.0000] <annevk>
domfarolino: it seems that "blob" is disallowed there

[08:48:48.0000] <annevk>
> Otherwise, if response has a location URL that is a URL whose scheme is "blob", "file", "filesystem", or "javascript", then set response to a network error.

[08:50:23.0000] <domfarolino>
Ahh was just looking for that, thanks

[09:31:45.0000] <wanderview>
annevk: hasn

[09:31:54.0000] <wanderview>
hasn't top level data URL navigation also been blocked now?

[09:32:48.0000] <wanderview>
also, I'm confused... blob: URL is allowed as an iframe html load AFAIK

[09:35:15.0000] <domfarolino>
wanderview: FF doesn’t block top level data URL navigation from what I see, same with Blob. I don’t think HTML spec blocks it either

[09:50:05.0000] <annevk>
wanderview: top-level blocking isn't specced, this is also not blocking navigation in general, just redirects while navigating

[09:50:15.0000] <annevk>
wanderview: does that help?

[09:50:23.0000] <wanderview>
ah... I missed that you were only quoting a line about redirection

[10:54:08.0000] <domfarolino>
annevk: Should top-level request redirecting from HTTP(S) => data:... behave differently HTTP(S) => HTTP(S) => data:... ?

[10:54:41.0000] <domfarolino>
HTML Standard seems to make them behave differently, since for the second one, HTTP-Redirect Fetch is called which doesn't allow redirects to anything but another HTTP(S) scheme

[12:01:38.0000] <domfarolino>
woops nevermind, wasn't reading it right :(

[12:39:22.0000] <annevk>
“manual” is key here 😊


2018-03-28
[01:56:39.0000] <smaug____>
jgraham: do wpt merges happen more often these days?

[01:57:01.0000] <smaug____>
or perhaps I just notice them because of the bugmail ;)

[01:57:04.0000] <annevk>
smaug____: they should be automatic

[01:57:21.0000] <annevk>
smaug____: but I think there was a hickup the other day

[01:57:38.0000] <smaug____>
annevk: so they happen normally once a day or so?

[01:58:06.0000] <jgraham>
smaug____: So, the situation is… complicated

[01:58:08.0000] <annevk>
smaug____: looking at the bugs that get filed by the bot I think it's just per PR, as they happen roughly

[01:58:23.0000] <smaug____>
ahaa

[01:58:32.0000] <jgraham>
At the moment we upstream stuff when it lands and merge it when it hits inbound

[01:58:51.0000] <jgraham>
We downstream each PR as it's created and do try pushes

[01:59:34.0000] <jgraham>
But actually pushing the syncs is somewhat behind; I've done a lot of bugfixing on the code and we are now in a better place, but need to catch up

[01:59:54.0000] <jgraham>
I'm currently trying ot push like 350 PRs worth of changes and it's going… badly

[02:00:22.0000] <jgraham>
(inbound just doesn't stay stable enough to do this because a rebase+push seems to take like an hour)

[02:00:49.0000] <jgraham>
Once we are caught up the idea is that we will be able to start the  next landing once the previous one merges to central

[02:00:59.0000] <jgraham>
So in the ideal case we will get two updates a day

[02:01:23.0000] <smaug____>
I see

[02:01:51.0000] <jgraham>
But there may be some difficulties getting there; ensuring that we always get the metadata updates just so and don't e.g. add the wrong result for an intermittent test is tricky

[02:03:39.0000] <jgraham>
I was hoping we'd be a bit further along by now :(

[02:05:51.0000] <smaug____>
well, in general wpt is great. I just wish we had started all that stuff like 25 years ago.

[02:06:41.0000] <smaug____>
jgraham: another question related to wpt. I think I asked this recently-ish. Are there plans to add hooks to be able to send native events to web pages

[02:07:01.0000] <smaug____>
or will that require webdriver or so

[02:07:21.0000] <jgraham>
smaug____: Yes and yesish

[02:08:58.0000] <jgraham>
smaug____: So we have testdriver, which provides an API for tests to use to send native events. The default implementation is webdriver-backed (or marionette, for gecko) but it's designed so that vendors can provide their own implementation so we could replace a marionette click with a priviledged js method if we wanted

[02:09:32.0000] <jgraham>
smaug____: So far click() works and there's a PR for sending a  string of characters for keyboard events (basically WebDriver Send Keys)

[02:09:50.0000] <smaug____>
I have very little experience in marionette

[02:10:06.0000] <jgraham>
smaug____: From your point of view it's just a js API

[02:10:13.0000] <smaug____>
I see

[02:11:32.0000] <jgraham>
smaug____: https://github.com/w3c/web-platform-tests/blob/master/infrastructure/testdriver/click.html for example

[02:14:02.0000] <jgraham>
smaug____: Generally this stuff is a priority both for us and Google (I believe) so if there are more features you want now is a good time to say

[02:26:19.0000] <smaug____>
jgraham: I wonder if the API allows one to test key event handling properly

[02:26:43.0000] <smaug____>
masayuki has been adding quite a complicated stuff in order to test key and composition events

[02:28:39.0000] <smaug____>
(https://searchfox.org/mozilla-central/source/dom/interfaces/base/nsITextInputProcessor.idl)

[02:29:19.0000] <smaug____>
mochitest has helper functions for that

[02:29:20.0000] <jgraham>
smaug____: IMEs are really tricky

[02:29:41.0000] <smaug____>
they are

[02:30:09.0000] <jgraham>
smaug____: If the WebDriver actions stuff isn't enough we should probably start a conversation about standardising something for testing these things

[02:30:29.0000] <jgraham>
(I suspect actions aren't enough for IMEs but are for normal text input)

[02:32:10.0000] <jgraham>
WebDriver  basically allows you to send a sequence of keyUp and keyDown events so you can do things like depress multiple keys simultaneously

[02:32:38.0000] <jgraham>
s/events/actions/

[02:32:52.0000] <jgraham>
But of course there's some complexity in how that input corresponds to an actual keyboard

[03:08:58.0000] <surma>
annevk: Re https://github.com/w3c/web-platform-tests/pull/9218

[03:09:19.0000] <surma>
annevk: Should I start moving ahead or wait for some more input on whether I am overengineering things?

[03:11:09.0000] <annevk>
surma: I think you should be able to move ahead

[03:11:28.0000] <surma>
\o/ cool, thanks

[03:12:01.0000] <annevk>
surma: we can always do dead code elimination later on, if it really comes to that; but as you say, some setups are rather complex here

[03:45:21.0000] <annevk>
If you invoke document.open() in an event listener callback of a node connected to the document, do any remaining listeners have their callback run?

[05:33:16.0000] <Domenic>
jgraham: it'd be really nice to test sequential focus navigation, especially for some shadow DOM stuff. Can we send tab key events?

[08:00:28.0000] <chrisf_>
Hello. Is there any reason XMLHttpRequest doesn't mandate that an error should be set when an error event is published?

[08:02:05.0000] <chrisf_>
Moreover, I'm curious if anyone is aware of how one could go about debugging network error events from XMLHttpRequest. It's a bit curious to me that no error is provided, unless I've missed something.

[08:02:10.0000] <chrisf_>
Thank you

[08:05:42.0000] <chrisf_>
For example, if I make a CORS request and the server doesn't provide correct headers in the response, I get an error event, but nothing indicating that the error is related to CORS.

[08:11:27.0000] <annevk>
chrisf_: that’s for security reasons

[08:11:56.0000] <annevk>
chrisf_: browser dev consoles might provide more detail

[08:17:13.0000] <chrisf_>
annevk: Thanks. Yes the console provides info but I was hoping there was something I could use programmatically, which could be reported to an error service.

[10:40:45.0000] <domfarolino>
annevk: how does individual participant verification work, just an owner ends up verifying the information or something?

[10:41:34.0000] <annevk>
domfarolino: yeah, just a quick profile check really

[10:43:39.0000] <domfarolino>
annevk: gotcha. A real simple console PR is blocking on verification for @hiroppy, no rush but whenever you get a chance that would be great :)

[10:44:55.0000] <annevk>
Can do tomorrow, feel free to ping me in such a PR next time

[11:07:14.0000] <domfarolino>
👍

[11:26:51.0000] <jgraham>
Domenic: I believe the actions stuff is powerful enough to handle that

[11:27:58.0000] <jgraham>
kereliuk is working on that I believe

[11:37:26.0000] <kereliuk>
Domenic jgraham: Would you be able to do that by just sending tab key events to elements?

[11:50:17.0000] <jgraham>
kereliuk: I would expect so

[11:50:44.0000] <jgraham>
kereliuk: But it's a testable question with a webdriver script

[11:51:28.0000] <jgraham>
Shadow dom might require a little more effort because the current setup  depends on the ability to serialize an element as a CSS selector

[15:36:07.0000] <TabAtkins>
Domenic or annevk: Is there something I should hook into in DOM or HTML if my spec-thing needs to respond to an element being removed from or inserted into a document?

[15:36:57.0000] <TabAtkins>
(Context: while an element is removed from a document it needs to throw instead of vending a computed style map object; when it gets inserted into a new one it needs to refresh its cache for that object so it can start returning a new one.)


2018-03-29
[17:34:28.0000] <Domenic>
TabAtkins: yeah, you can check "in a document tree" or "is connected". If you need to perform actions on every element being removed/inserted, then use removing steps I believe it's called.

[03:36:04.0000] <surma>
Streams spec q: Is there a reason why the class definitions are not more WebIDL-y? For example: I was surprised by the fact that the `closed` getter is in fact a promise. Would adding some sort of type annotation to the class definitions be desirable and acceptable?

[03:44:46.0000] <Domenic>
surma: I don't think we should add type definitions to the class definitions, since that is not how JS works

[03:45:03.0000] <Domenic>
surma: as for Web IDL vs. JS spec styles, see https://github.com/whatwg/streams/issues/45

[03:46:10.0000] <surma>
I see

[03:46:44.0000] <surma>
You said in that issue “The class description is meant to be for web developers” — which I agree. I just think it’s currently somewhat hard to figure out that for example `closed` and `pipeTo()` return a promise

[03:47:23.0000] <surma>
Maybe there’s some other way we can make that more discoverable? Maybe we can just add type annotations for the return values?

[03:47:32.0000] <Domenic>
Hmm, doesn't it say "returns a promise" right in their web-developer facing descriptions?

[03:47:42.0000] <Domenic>
If not, indeed, perhaps we can make them say that

[03:47:56.0000] <surma>
Yeah I think it does

[03:47:59.0000] <surma>
The note does

[03:49:06.0000] <surma>
But for example the pipeTo note is quite long. The info is all there, I was just wondering if there’s an acceptable way to make it more structured and directly in the class definition.

[03:49:13.0000] <surma>
But it’s nbd, it definitely works as it currently is

[03:51:15.0000] <Domenic>
I think one way forward is noted in https://github.com/whatwg/streams/issues/907. Notably that would put an "await" before the usage.

[03:51:35.0000] <Domenic>
(and nuke the class definition entirely, since it seems less helpful than I was hoping.)

[03:54:13.0000] <surma>
(the #event-retargeting-steps anchor doesn’t seem to exist anymore btw)

[04:04:21.0000] <annevk>
surma: updated the link in OP to https://dom.spec.whatwg.org/#event-path

[04:04:45.0000] <annevk>
surma: (seems it was mostly about the domintro section; and we removed retargeting steps)

[04:04:59.0000] <surma>
ty!

[04:15:56.0000] <annevk>
surma: next time you fix something don't forget to add yourself to the Acknowledgments section

[04:16:36.0000] <surma>
I thought I was alreadfy listed in the stream spec

[04:16:50.0000] <annevk>
surma: I looked for "Surma"

[04:17:48.0000] <annevk>
foolip: in Chrome (maybe WebKit too), when would compatibility_mode_locked_ in Document.cpp be false?

[04:17:52.0000] <surma>
I could have sworn I added myself in with my first linkification PR

[04:18:04.0000] <surma>
Thanks for the hint. I will happily add myself with my current PR ;)

[04:18:48.0000] <annevk>
cool

[04:21:24.0000] <foolip>
annevk: it's initialized to false, and seems to be set to true in all Document subclasses except XMLDocument, although I didn't exhaustively check

[04:22:28.0000] <annevk>
foolip: I wonder why it exists then

[04:22:50.0000] <annevk>
foolip: document.open() tries to change mode to "no-quirks" in Chrome, but that can never succeed with such a setup

[04:24:11.0000] <annevk>
foolip: maybe just some dead code in Document.cpp's ImplicitOpen then

[04:24:20.0000] <foolip>
annevk: what are the per-spec situation when the compat mode should change? The comment "This is cheaper than making setCompatibilityMode virtual" suggests that the setup is a bit contrived for performance, but maybe the observable effect is correct?

[04:24:33.0000] <foolip>
annevk: dead code would not be surprising to find

[04:25:04.0000] <annevk>
foolip: per spec I don't know about any situation where it could change, though document.open() seems somewhat reasonable as a possible place (just not in the spec)

[04:25:24.0000] <foolip>
annevk: you suspect that the SetCompatibilityMode(kNoQuirksMode) call there never has any effect?

[04:26:00.0000] <annevk>
foolip: yeah, if all subclasses freeze the value per that variable and you can only invoke document.open() on HTML documents...

[04:27:13.0000] <annevk>
foolip: the only other "legit" caller that I found was cloneNode() and friends, and I guess there you want to set it to be the same as the document you are cloning, so that makes some sense

[04:28:45.0000] <foolip>
annevk: I'll try adding an assert and running it through all bots to see if that disproves the dead code hypothesis quickly

[04:30:00.0000] <annevk>
foolip: thanks

[04:30:14.0000] <foolip>
annevk: https://chromium-review.googlesource.com/c/chromium/src/+/986136

[04:30:33.0000] <annevk>
I want to know how document.open() in non-Firefox works to see if we can just make the spec say that

[04:33:43.0000] <kochi>
annevk: the document seems to be only readable by @chromium.org :(  I asked the author to change the permission.

[04:34:17.0000] <annevk>
kochi: ta

[05:41:13.0000] <smaug____>
annevk: isn't blink doing exactly what Gecko does with submit/reset

[05:42:18.0000] <annevk>
smaug____: maybe I got misled due to the nested form stuff

[05:43:08.0000] <annevk>
smaug____: I guess I should write some tests to make sure, but if my proposal matches Fx then hurray?

[05:44:06.0000] <smaug____>
annevk: yeah, I think you did describe what Gecko does

[05:44:15.0000] <smaug____>
er, except

[05:44:40.0000] <smaug____>
no no, it is fine. there is event's currentTarget != event's target

[05:55:29.0000] <annevk>
smaug____: it seems in theory get the parent could add an event listener that does this

[05:56:20.0000] <annevk>
smaug____: though if not implemented that way it would be observable so maybe not worth it

[06:16:24.0000] <Ms2ger>
What's the difference between [[Foo]] and [[foo]] in ES?

[06:47:38.0000] <annevk>
Ms2ger: I think one is the old convention

[08:18:06.0000] <Domenic>
One names an internal slot named "Foo", the other names an internal slot named "foo"

[08:18:22.0000] <Domenic>
It is similar to `x.Foo` vs. `x.foo`

[08:20:37.0000] <annevk>
Domenic: I think a decision was made about casing though

[08:20:42.0000] <annevk>
Domenic: to use uppercase throughout

[08:20:53.0000] <Domenic>
I'm not sure ES ever used lowercase

[08:21:23.0000] <annevk>
Domenic: https://github.com/tc39/ecma262/commit/a2f6bfd7c547a306f428f9ecde9baf5fe04f2c8f

[08:21:49.0000] <Domenic>
Hah wow, I've thoroughly adapted to the new world :).

[08:22:12.0000] <annevk>
Domenic: I guess technically you're no longer editing Streams

[08:22:25.0000] <annevk>
(it uses old-style)

[08:22:27.0000] <Domenic>
It's a multi-editor situation

[08:22:36.0000] <Domenic>
We have an open issue to update, but nobody feels strongly

[08:23:22.0000] <Domenic>
In practice, most of my work is in sprints when I visit Tokyo, with ricea holding down the fort most of the time

[08:24:02.0000] <Domenic>
He did pretty much all the work for transform streams though, which is the most recent big chunk

[08:24:20.0000] <annevk>
Seems pretty exciting

[08:24:39.0000] <annevk>
I wonder if ricea is interested in adding them to WebSocket

[08:25:03.0000] <Domenic>
We talked about it; the issue is prioritizing vs. other work (mostly on the implementation side)

[08:26:18.0000] <Domenic>
The naive wrapping, i.e. a productionized version of https://streams.spec.whatwg.org/#example-both with real backpressure support, might not be much

[08:26:26.0000] <Domenic>
A lgrahl-style stream-of-streams seems harder

[08:26:40.0000] <Domenic>
Unclear who the customers are though

[08:31:32.0000] <annevk>
It does seem there's still some interest in WebSocket given what I hear occasionally, but maybe not that much indeed

[08:31:57.0000] <annevk>
That might also due to it not supporting some features folks would really like though, such as being able to set an Authorization header

[08:39:55.0000] <lgrahl>
I do know of at least one customer :)

[08:40:22.0000] <lgrahl>
Domenic: And once we have them for data channels, we can pretty much c&p it for WebSockets

[08:40:39.0000] <Domenic>
that'd be a good order of operations, yeah

[08:42:42.0000] <lgrahl>
Yes and I'm also wondering whether QUIC will move into the WebSockets area

[10:21:07.0000] <domfarolino>
I thought I understood the purpose of WebIDL but now I'm a little confused. It seems that a big part of WebIDL is to facilitate the conversion of ECMAScript values to WebIDL values, and any language (like C++) can implement WebIDL and therefore have a proper conversion from ECMAScript values => C++ values etc.

[10:21:47.0000] <domfarolino>
But isn't this what each ECMAScript implementation already does? For example, in v8 there certainly are already bindings that take in JS values and eventually v8 uses them in C++-land. So it almost seems like WebIDL is just an extension of ECMAScript, further nailing down abstract conversions right?

[10:22:52.0000] <domfarolino>
could we not just write interfaces (in web specs) in the form of ECMAScript constructs (intrinsic objects, properties, etc). After all, this is what native ECMAScript objects are defined in right?

[10:30:04.0000] <domfarolino>
cc TabAtkins as I know he's answered a few WebIDL questions here before

[10:32:17.0000] <TabAtkins>
We avoid that because it's *incredibly* fiddly. Reading the ES spec is a high-level skill that very few people can actually do effectively (most implementors can't), and *writing* it is even harder. WebIDL just lets us abstract most of that away.

[10:33:30.0000] <TabAtkins>
The whole point of WebIDL is in the name - it's a language for describing web interfaces, so we don't have to actually *write* the interfaces, in their full gory details, by hand. (And get things wrong, and handle things inconsistently, etc.)

[10:34:13.0000] <domfarolino>
TabAtkins: Ok that makes sense, so WebIDL sort of packages some ECMAScript things together in a form to succinctly describe interfaces that use ECMAScript constructs.

[10:35:18.0000] <TabAtkins>
Yeah. This way all methods and properties are attached to classes in the same way, all arguments are converted in the same predictable manner, etc. We're left with mostly just the *relevant* details to specify, the parts that actually matter to authors.

[10:35:22.0000] <domfarolino>
TabAtkins: So it could almost be a subset of the ECMAScript spec that would allow other web standards to hook into it to more easily used the tricky and arduous constructs?

[10:35:43.0000] <domfarolino>
Ok that makes sense thank you.

[10:35:53.0000] <TabAtkins>
I guess that's basically what it is, sure?

[10:36:01.0000] <TabAtkins>
(What's the context of these questions, by the way?)

[10:36:38.0000] <domfarolino>
Giving a talk at my school tonight; just hammering down a few stray details

[10:39:14.0000] <domfarolino>
Previously I've read a good bit of the ECMAScript spec and it made sense (this was long after visiting WebIDL a while ago), then some thoughts hit me when I was connecting the dots.

[10:43:01.0000] <annevk>
domfarolino: the WebIDL repository has a bunch of issues labeled "jsidl" which is an idea to bring both ways of writing specifications closer to each other

[10:43:39.0000] <annevk>
domfarolino: if we succeed with that at some point it'd become much easier to define a new JavaScript class

[10:46:03.0000] <domfarolino>
annevk: Ah ok that's really exciting!

[10:51:30.0000] <domfarolino>
annevk: So given that web APIs are defined with WebIDL (and conversions here etc are specified), and ECMAScript built-in objects are *not* defined with WebIDL (obviously) (though they too appear on the web), you're saying the `jsidl` issues attempt to roughly converge on how the two standards express objects/APIs? Is that roughly correct?

[10:54:57.0000] <annevk>
domfarolino: yes

[10:56:00.0000] <railgun>
annevk: just to confirm I add the default values under "Value" right? https://html.spec.whatwg.org/multipage/indices.html#attributes-3

[10:57:36.0000] <annevk>
railgun: I was thinking we'd add a new column

[10:58:20.0000] <annevk>
railgun: makes it easier to spot at a glance and such (and seems somewhat more correct too)

[10:59:13.0000] <railgun>
ok I'll try adding a new column

[11:01:29.0000] <annevk>
railgun: FWIW, I'm properly back at work Tuesday

[11:09:35.0000] <railgun>
ok

[11:10:12.0000] <domfarolino>
annevk: Ah https://github.com/heycam/webidl/issues/486 is really interesting


2018-03-30
[18:30:38.0000] <gsnedders>
annevk: how would you feel about a PR for DOM defining DOM XPath? I presue you'd rather it be in DOM than a separate spec?

[19:47:54.0000] <annevk>
gsnedders: yeah, there is an open issue for it

[19:50:40.0000] <gsnedders>
annevk: I'm marginally tempted to try and throw something rough together that probably will be far from perfect

[19:52:25.0000] <annevk>
gsnedders: we could leave the PR open and just add to it to make it complete over time

[19:57:54.0000] <gsnedders>
annevk: like, I assume you'd want to get rid of all the special-cased stuff in the HTML spec for XPath?

[20:22:27.0000] <annevk>
gsnedders: sounds good, yes

[20:23:09.0000] <annevk>
gsnedders: had actually forgotten about that, though that might still be needed some as it affects XSLT too

[20:24:22.0000] <gsnedders>
yeah, indeed…

[20:24:46.0000] <gsnedders>
I was thinking of primarily just defining how XPath operates with the DOM as the underlying data model

[20:24:54.0000] <gsnedders>
and not addressing that HTML oddness

[20:57:10.0000] <MikeSmith>
gsnedders: about wptserve config-key name changes, I think we should consider having a requirement that any time a key gets renamed, the code should still check for the old name an emit a message at startup saying, “the foo key has been renamed to browser_foo; you need to update your config file” or whatever

[20:59:02.0000] <gsnedders>
MikeSmith: it should just work without updating the config file

[20:59:41.0000] <gsnedders>
MikeSmith: it's just badly tested and buggy like too much of the infra code :(

[21:00:29.0000] <MikeSmith>
well it should at least neither make the server totally fail to even start, nor cause some other surprising more suble breakage like this browser_host one seems to have

[21:00:51.0000] <gsnedders>
yes.

[21:01:06.0000] <MikeSmith>
the bind_address change (or whatever the name was) totally broke the w3c-test.org instance, and there were no clues logged to the console at all, and even after I looked through the commit logs I couldn’t find the cause

[21:01:07.0000] <gsnedders>
I think my config refactoring fixes this bug, and should make it much harder to introduce such failures in the future

[21:01:14.0000] <MikeSmith>
OK

[21:01:32.0000] <gsnedders>
bind_address again shouldn't have broken anything, ergh

[21:01:46.0000] <gsnedders>
presumably something is wrong in the old code before my refactoring

[21:01:50.0000] <gsnedders>
with how it deals with renamed stuff

[21:02:03.0000] <gsnedders>
which isn't that surprising because that code is stupid

[21:02:42.0000] <gsnedders>
MikeSmith: the new code also has tests, which is good :)

[21:02:51.0000] <MikeSmith>
good

[21:03:05.0000] <gsnedders>
hence I can tell you your old config will work!

[21:03:35.0000] <MikeSmith>
because until now both times you said the changes shouldn’t have broken anything but both times they actually did

[21:04:05.0000] <MikeSmith>
ideally what we should do is make you the maintainer of the central hosted instance

[21:04:40.0000] <MikeSmith>
currently w3c-test.org I mean, but we could move it to somewhere it can be collaboratively maintained better

[21:06:02.0000] <gsnedders>
/me wonders how we can add some integration test for this

[21:06:46.0000] <MikeSmith>
it’s imaginable to set up something in travis that checks w3c-test.org

[21:07:04.0000] <MikeSmith>
at least that tests whether it’s responding or not

[21:07:26.0000] <MikeSmith>
but it would have to be testing commits to master, not PRs

[21:07:47.0000] <MikeSmith>
testing deployment I guess

[21:08:23.0000] <MikeSmith>
for whatwg.org stuff, we have deployment checks set up in travis

[21:08:26.0000] <gsnedders>
I was more thinking generally in the multi-config check

[21:08:33.0000] <gsnedders>
s/check/case/

[12:28:05.0000] <neAlexPietz>
.-.            .-.

[12:28:05.0000] <neAlexPietz>
.-.            .-.

[12:28:05.0000] <neAlexPietz>
.-.            .-.

[12:28:05.0000] <neAlexPietz>
.-.            .-.

[12:28:10.0000] <neAlexPietz>
/   \          /   \

[12:28:10.0000] <neAlexPietz>
/   \          /   \

[12:28:10.0000] <neAlexPietz>
/   \          /   \

[12:28:10.0000] <neAlexPietz>
/   \          /   \

[12:28:13.0000] <neAlexPietz>
|   _ \        / _   |

[12:28:13.0000] <neAlexPietz>
|   _ \        / _   |

[12:28:13.0000] <neAlexPietz>
|   _ \        / _   |

[12:28:13.0000] <neAlexPietz>
|   _ \        / _   |

[12:28:17.0000] <neAlexPietz>
;  | \ \      / / |  ;

[12:28:17.0000] <neAlexPietz>
;  | \ \      / / |  ;

[12:28:17.0000] <neAlexPietz>
;  | \ \      / / |  ;

[12:28:17.0000] <neAlexPietz>
;  | \ \      / / |  ;

[12:28:21.0000] <neAlexPietz>
\  \ \ \_.._/ / /  /

[12:28:21.0000] <neAlexPietz>
\  \ \ \_.._/ / /  /

[12:28:21.0000] <neAlexPietz>
\  \ \ \_.._/ / /  /

[12:28:21.0000] <neAlexPietz>
\  \ \ \_.._/ / /  /

[12:28:25.0000] <neAlexPietz>
'. '.;'    ';,' .'

[12:28:25.0000] <neAlexPietz>
'. '.;'    ';,' .'

[12:28:25.0000] <neAlexPietz>
'. '.;'    ';,' .'

[12:28:25.0000] <neAlexPietz>
'. '.;'    ';,' .'

[12:28:29.0000] <neAlexPietz>
'./ _    _ \.'

[12:28:29.0000] <neAlexPietz>
'./ _    _ \.'

[12:28:29.0000] <neAlexPietz>
'./ _    _ \.'

[12:28:29.0000] <neAlexPietz>
'./ _    _ \.'

[12:28:33.0000] <neAlexPietz>
.'  a __ a  '.

[12:28:33.0000] <neAlexPietz>
.'  a __ a  '.

[12:28:33.0000] <neAlexPietz>
.'  a __ a  '.

[12:28:33.0000] <neAlexPietz>
.'  a __ a  '.

[12:28:37.0000] <neAlexPietz>
'--./ _,   \/   ,_ \.--'

[12:28:37.0000] <neAlexPietz>
'--./ _,   \/   ,_ \.--'

[12:28:37.0000] <neAlexPietz>
'--./ _,   \/   ,_ \.--'

[12:28:37.0000] <neAlexPietz>
'--./ _,   \/   ,_ \.--'

[12:28:41.0000] <neAlexPietz>
----|   \   /\   /   |----

[12:28:41.0000] <neAlexPietz>
----|   \   /\   /   |----

[12:28:41.0000] <neAlexPietz>
----|   \   /\   /   |----

[12:28:41.0000] <neAlexPietz>
----|   \   /\   /   |----

[12:28:45.0000] <neAlexPietz>
.--'\   '-'  '-'    /'--.

[12:28:45.0000] <neAlexPietz>
.--'\   '-'  '-'    /'--.

[12:28:45.0000] <neAlexPietz>
.--'\   '-'  '-'    /'--.

[12:28:46.0000] <neAlexPietz>
.--'\   '-'  '-'    /'--.

[12:28:49.0000] <neAlexPietz>
_>.__  -- _.-  `;

[12:28:49.0000] <neAlexPietz>
_>.__  -- _.-  `;

[12:28:49.0000] <neAlexPietz>
_>.__  -- _.-  `;

[12:28:49.0000] <neAlexPietz>
_>.__  -- _.-  `;

[12:28:53.0000] <neAlexPietz>
.' _     __/     _/

[12:28:54.0000] <neAlexPietz>
.' _     __/     _/

[12:28:54.0000] <neAlexPietz>
.' _     __/     _/

[12:28:54.0000] <neAlexPietz>
.' _     __/     _/

[12:28:57.0000] <neAlexPietz>
/    '.,:".-\    /:,

[12:28:57.0000] <neAlexPietz>
/    '.,:".-\    /:,

[12:28:57.0000] <neAlexPietz>
/    '.,:".-\    /:,

[12:28:57.0000] <neAlexPietz>
/    '.,:".-\    /:,

[12:29:01.0000] <neAlexPietz>
|      \.'   `""`'.\\

[12:29:01.0000] <neAlexPietz>
|      \.'   `""`'.\\

[12:29:01.0000] <neAlexPietz>
|      \.'   `""`'.\\

[12:29:01.0000] <neAlexPietz>
|      \.'   `""`'.\\

[12:29:05.0000] <neAlexPietz>
'-,.__/  _   .-.  ;|_

[12:29:05.0000] <neAlexPietz>
'-,.__/  _   .-.  ;|_

[12:29:05.0000] <neAlexPietz>
'-,.__/  _   .-.  ;|_

[12:29:05.0000] <neAlexPietz>
'-,.__/  _   .-.  ;|_

[12:29:09.0000] <neAlexPietz>
/` `|| _/ `\/_  \_|| `\

[12:29:09.0000] <neAlexPietz>
/` `|| _/ `\/_  \_|| `\

[12:29:09.0000] <neAlexPietz>
/` `|| _/ `\/_  \_|| `\

[12:29:09.0000] <neAlexPietz>
/` `|| _/ `\/_  \_|| `\

[12:29:13.0000] <neAlexPietz>
|    ||/ \-./` \ / ||   |

[12:29:14.0000] <neAlexPietz>
|    ||/ \-./` \ / ||   |

[12:29:14.0000] <neAlexPietz>
|    ||/ \-./` \ / ||   |

[12:29:14.0000] <neAlexPietz>
|    ||/ \-./` \ / ||   |

[12:29:17.0000] <neAlexPietz>
\   ||__/__|___|__||  /

[12:29:17.0000] <neAlexPietz>
\   ||__/__|___|__||  /

[12:29:17.0000] <neAlexPietz>
\   ||__/__|___|__||  /

[12:29:17.0000] <neAlexPietz>
\   ||__/__|___|__||  /

[12:29:21.0000] <neAlexPietz>
\_ |_Happy Easter_| /

[12:29:21.0000] <neAlexPietz>
\_ |_Happy Easter_| /

[12:29:21.0000] <neAlexPietz>
\_ |_Happy Easter_| /

[12:29:21.0000] <neAlexPietz>
\_ |_Happy Easter_| /

[12:29:25.0000] <neAlexPietz>
jgs .'  \ =  _= _ = _= /`\

[12:29:25.0000] <neAlexPietz>
jgs .'  \ =  _= _ = _= /`\

[12:29:25.0000] <neAlexPietz>
jgs .'  \ =  _= _ = _= /`\

[12:29:25.0000] <neAlexPietz>
jgs .'  \ =  _= _ = _= /`\

[12:29:29.0000] <neAlexPietz>
/     `-;----=--;--'   \

[12:29:29.0000] <neAlexPietz>
/     `-;----=--;--'   \

[12:29:29.0000] <neAlexPietz>
/     `-;----=--;--'   \

[12:29:29.0000] <neAlexPietz>
/     `-;----=--;--'   \

[12:29:33.0000] <neAlexPietz>
\    _.-'        '.    /

[12:29:33.0000] <neAlexPietz>
\    _.-'        '.    /

[12:29:33.0000] <neAlexPietz>
\    _.-'        '.    /

[12:29:33.0000] <neAlexPietz>
\    _.-'        '.    /

[12:29:37.0000] <neAlexPietz>
`""`              `""`

[12:29:37.0000] <neAlexPietz>
`""`              `""`

[12:29:37.0000] <neAlexPietz>
`""`              `""`

[12:29:37.0000] <neAlexPietz>
`""`              `""`

[12:29:41.0000] <neAlexPietz>
L0DE AND CHRON FROM #LRH & L0DE RADIO HOUR (IRC.EFNET.ORG) WANTED TO SAY HAPPY EASTER!!

[12:29:41.0000] <neAlexPietz>
L0DE AND CHRON FROM #LRH & L0DE RADIO HOUR (IRC.EFNET.ORG) WANTED TO SAY HAPPY EASTER!!

[12:29:41.0000] <neAlexPietz>
L0DE AND CHRON FROM #LRH & L0DE RADIO HOUR (IRC.EFNET.ORG) WANTED TO SAY HAPPY EASTER!!

[12:29:41.0000] <neAlexPietz>
L0DE AND CHRON FROM #LRH & L0DE RADIO HOUR (IRC.EFNET.ORG) WANTED TO SAY HAPPY EASTER!!

[12:29:45.0000] <neAlexPietz>
ap jwalden ckrn AtumT KevinMarks jugglinmike strugee espadrine junktext__ tantek willkg eric_carlson karlcow Hasimir logicmoo lgrahl svl dmiles rcombs XhmikosR dboehmer mven_ calvaris enick_811 wakaba robertkowalski globbot equalsjeffh_ astearns_ refack dmarr deathy gavin_ timdream mantaroh joyee sarri so stalled soncodi rwaldron e1z0 dan- moo-_- ms7821 boaz alsoStevenXL caitp lerc mmn daleharvey ajeffrey_ miketaylr devsnek tomaw c

[12:29:45.0000] <neAlexPietz>
a p   j w a l d e n   c k r n   A t u m T   K e v i n M a r k s   j u g g l i n m i k e   s t r u g e e   e s p a d r i n e   j u n k t e x t _ _   t a n t e k   w i l l k g   e r i c _ c a r l s o n   k a r l c o w   H a s i m i r   l o g i c m o o   l g r a h l   s v l   d m i l e s   r c o m b s   X h m i k o s R   d b o e h m e r   m v e n _   c a l v a r i s   e n i c k _ 8 1 1   w a k a b a   r o b e r t k o w a l s k i   g l

[12:30:15.0000] <tantek>
and this is what happens when no one is a channel op

[12:30:15.0000] <miketaylr>
ok, thanks

[13:01:13.0000] <devsnek>
authentic irc experience


2018-03-31
[08:03:40.0000] <annevk>
Meh, plenty of ops, but hard to catch two minute abuse

[08:04:03.0000] <annevk>
If anyone wants to volunteer, let me know

[09:19:49.0000] <domfarolino>
annevk: Volunteer for what?

[09:20:17.0000] <domfarolino>
(being an op?)

[12:14:25.0000] <annevk>
Yeah

[15:54:02.0000] <domfarolino>
annevk: I'm willing to volunteer

