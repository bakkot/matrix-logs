2015-03-01
[02:11:38.0000] <Ms2ger>
annevk, you don't happen to be around?

[02:12:25.0000] <Ms2ger>
Oh, nvm

[02:20:56.0000] <annevk>
Ms2ger: waddup?

[02:30:30.0000] <Ms2ger>
annevk, I thought a note in the encoding spec was wrong, but I misdiagnosed the error

[02:30:38.0000] <annevk>
ah

[02:31:00.0000] <Ms2ger>
Though I'm still not entirely sure it isn't wrong

[02:31:09.0000] <Ms2ger>
https://encoding.spec.whatwg.org/#dom-textencoder-encode

[02:31:23.0000] <Ms2ger>
Claims "These encodings cannot return error.", but I don't see why not

[02:32:16.0000] <Ms2ger>
Oh, USVString

[09:09:54.0000] <rektide>
in BroadcastChannel, there's no means available for discoverability

[09:10:36.0000] <rektide>
as a service provider, i'd like to be able to advertise my channel to other channel-users

[09:10:56.0000] <rektide>
they have to know ahead of time all the channels they might ever want to use

[09:11:08.0000] <rektide>
and that seems markedly anti-web, anti loose coupling

[09:11:29.0000] <rektide>
i made a similar bid for freedom in BroadcastChannel's unicast brother, navigator.connect

[09:11:32.0000] <rektide>
https://github.com/mkruisselbrink/navigator-connect/issues/1

[09:11:39.0000] <rektide>
and got ignored there too as i always do by you very smart people

[11:19:34.0000] <Hixie>
rektide: just define a channel to advertise on

[11:19:38.0000] <Hixie>
rektide: and then advertise on there

[11:19:59.0000] <Hixie>
rektide: (since broadcast channels are per-origin, though, you can just tell your fellow web masters about them)

[11:20:46.0000] <rektide>
defining a well known advertisement channel doesn't seem different from making people join your well known actual channel.

[11:21:13.0000] <rektide>
you end up needing intermediating hubs where people can agree to advertise to one another

[11:21:24.0000] <rektide>
i'd much prefer a web that is able to form itself

[11:21:29.0000] <rektide>
#webwewant2015

[11:21:42.0000] <rektide>
/me chagrins himself

[11:24:09.0000] <rektide>
Hixie: Marijn comes up with the same argument against discoverability in https://github.com/mkruisselbrink/navigator-connect/issues/1#issuecomment-62989902 and has a prototype example in his navigator.connect world

[11:26:45.0000] <rektide>
i don't see why my user agent would not permit pages that wish to register the services they have to present that to the browser

[11:27:05.0000] <Hixie>
i'm not arguing against discoverability

[11:27:10.0000] <Hixie>
i'm arguing that it's already possible

[11:27:52.0000] <Hixie>
in any case, it's not like you can easily use randomly discovered channels, i mean, they're each going to have their own semantics and protocols

[11:28:14.0000] <rektide>
that is so irrelevant

[11:28:30.0000] <Hixie>
seems most relevant to me :-)

[11:28:38.0000] <rektide>
send messages to the channel. if it replies in a way you can accept, you can de facto converse

[11:28:45.0000] <rektide>
there's no need to assume anything at all beyond that ever

[11:28:58.0000] <rektide>
you are for your local pair sure of completeness

[11:30:16.0000] <rektide>
any discussion on the need for content-negotiation is a forced one. please don't distract by insisting there's relevance to content negotiation

[11:32:53.0000] <rektide>
there's a basic capability: can a page tell the user agent that it wishes to be able to be found

[11:33:09.0000] <rektide>
defining an answer such that "sure, you can find the page if you know that there's this one url that you can hit"

[11:33:23.0000] <rektide>
my answer is that no, the User-agent is not really bestowing the capability in earnest to the page

[11:34:30.0000] <rektide>
we're getting awesome listenability mechanisms from navigator.connect and broadcast channel but neither of them are things where the user-agent is doing the job it needs to do to help things that want to be discoverable and which want to converse

[11:34:56.0000] <rektide>
to be talk-to-able

[11:42:24.0000] <Hixie>
i've no idea what "can a page tell the user agent that it wishes to be able to be found" means but it doesn't sound like broadcast channels attempt to go near that problem?

[11:42:40.0000] <Hixie>
i guess i don't understand your high level problem

[11:42:50.0000] <Hixie>
are you asking about the equivalent of android intents?

[11:44:07.0000] <rektide>
the most appropriate thing i could cite would be the Network Discovery spec

[11:44:52.0000] <rektide>
i would like for BroadcastChannel to be something that the owner can set a flag on- myBroadcastChannel.makeDiscoverable()

[11:45:20.0000] <rektide>
and from another origin or page i can do a BroadcastChannel.findAllDiscoverable() or some such

[11:46:11.0000] <Hixie>
let's go higher-level. what's the user-facing problem you're trying to solve?

[11:46:12.0000] <rektide>
it may perhaps be useful if one were trying to implement something like Android Intents

[11:47:04.0000] <rektide>
if i'm twitter, i'd like for every page on the system to be able to know the feed of the user

[11:47:23.0000] <rektide>
if i'm stock ticker website, i'd like for every page on the system to be able to see live stock ticks

[11:47:43.0000] <rektide>
if i'm a weather site, i'd like for every page on the system to be able to see the weather reports the user looks for

[11:48:00.0000] <rektide>
as those sides, i want to broadcast a stream of json-ld data

[11:48:03.0000] <rektide>
*sites

[11:48:32.0000] <Hixie>
oh, well

[11:48:34.0000] <Hixie>
you can do that already

[11:48:43.0000] <rektide>
if they know i'm there broadcasting

[11:48:53.0000] <rektide>
hence: discoverability

[11:49:27.0000] <rektide>
othrewise you fail the basic condition

[11:49:39.0000] <rektide>
i want every page to be able to see

[11:49:49.0000] <rektide>
unless your ego is so large you assume everyone already knows you are there

[11:49:49.0000] <Hixie>
so you're saying the user-facing problem is you want the user to open two tabs, that don't know about each other, and for the data from one tab to go to the other tab?

[11:50:04.0000] <rektide>
yes

[11:50:16.0000] <Hixie>
why the heck wouldn't the user just go to the twitter tab to see the twitter feed??

[11:50:18.0000] <rektide>
(please please please don't me eat this ack)

[11:50:31.0000] <rektide>
i dunno, that's not my use case?

[11:50:38.0000] <rektide>
why would they have to?

[11:50:40.0000] <Hixie>
i don't understand your use case at all

[11:50:45.0000] <rektide>
why is the twitter background page color blue?

[11:51:00.0000] <Hixie>
if i want to view my twitter feed, i don't open g+ and hope that g+ notices i have twitter open to display my twitter feed there.

[11:51:08.0000] <Hixie>
especially since twitter is going to be able to do a much better job of rendering it

[11:51:19.0000] <rektide>
in livejournal, when you are authoring a post, there is a "now listening" button that could detect the music from a few known sources

[11:51:52.0000] <Hixie>
ah now that's a more concrete use case

[11:51:55.0000] <rektide>
i just want to make my own personal audioscrobbling server- which i wrote then literally lost the source to-

[11:52:08.0000] <rektide>
well i've given you something consumer-side this time

[11:52:26.0000] <Hixie>
yes, that's what i meant by "user-facing"

[11:52:46.0000] <rektide>
google now would be an example of a user-facing consumer of feeds

[11:52:50.0000] <Hixie>
ok so today the only way to do that that i can imagine is that you have an intermediary site that is a well-known place for producers and consumers to go to

[11:52:57.0000] <rektide>
yes me too and marijn too

[11:53:16.0000] <Hixie>
they each open an iframe to that site, that iframe opens a shared worker, and everyone talks back and forth over that channel

[11:53:54.0000] <Hixie>
if you want that to happen but with the browser being the intermediary rather than some random well-known third-party site, then you probably want anne's hypothetical web intents stuff

[11:54:00.0000] <Hixie>
i recommend sending anne feedback on that

[11:54:15.0000] <Hixie>
giving that use case, in particular

[11:55:08.0000] <rektide>
i am loath to let such a specific user-facingness use-case copt the more general idea of discoverability

[11:55:42.0000] <rektide>
but that doesn't roll back-

[11:55:51.0000] <Hixie>
if you want something more general, describe more use cases so that it's obvious why you need something general

[11:55:53.0000] <rektide>
Hixie: thank you for discussing with me this

[11:56:21.0000] <rektide>
Google Now is a beautiful omnibus consumer of all the datas

[11:56:38.0000] <rektide>
pointing to it and saying "web" is really kind of all the stand i feel like i should have to make

[11:57:12.0000] <rektide>
omnivore post-application user-augmentation ware

[11:58:09.0000] <rektide>
but it'll be fun rattling my brain to dredge up some existing application's that peer to other local wares

[11:59:38.0000] <rektide>
once more chagrined, i just want to say thanks again for taking the time and inquiry to get us togther to the destination i saw

[12:00:39.0000] <Hixie>
the way to get things on the web is to describe the end-user use case. which in any case is what should matter, right, i mean who cares HOW something ends up being possible as long as it's possible

[12:02:04.0000] <rektide>
it's something not modelled much in the world about, but inside of me i know that the agencies i wish to seed are ones which exchange with others and which can be heard from. and i believe we've come to a concensus on what the state of affairs is for that possibility.

[12:02:59.0000] <rektide>
dbus is the most successful example by far, and it's success is meager. there are some very cool adoptions- MPRIS media playing remote interface specification- is really powerful and really well used

[12:03:27.0000] <rektide>
but overall adoption is in a directly bad state, even where this capability of being talk-to-able exists, is very low

[12:05:27.0000] <Hixie>
in my experience, trying to provide hooks for hypothetical general solutions works far less well than trying to solve actual concrete problems that have immediate needs.

[12:06:32.0000] <rektide>
but then you are married to your limited concrete set of the problem

[12:06:37.0000] <rektide>
that's a negligent and dangerous path

[12:07:04.0000] <rektide>
it also means you have to lead with problems, rather than hunting opportunity

[12:07:19.0000] <rektide>
talk about a convergent path to local maxima

[12:08:18.0000] <rektide>
but as far as getting others onboard, i certainly see what you are saying being the patterened way to get stuff done

[12:09:04.0000] <Hixie>
i agree that in theory it sounds like you'd get better results long term if you provided general solutions to hypothetical general problem spaces instead of generalised solutions to targetted problems

[12:09:09.0000] <Hixie>
but in practice it never works

[12:09:21.0000] <Hixie>
the specific has a way to focus the solution to one that actually works

[12:09:32.0000] <Hixie>
whereas general solutions tend to become quagmired in theoretical problems

[12:09:36.0000] <rektide>
well thankfully i'm not providing a general solution, i'm just trying to solve a specific problem- i want people to know the software i write exists

[12:09:54.0000] <Hixie>
google already solves the problem of "i want people to know the software i write exsits"

[12:10:01.0000] <rektide>
well said

[12:10:05.0000] <rektide>
ahhhh lol

[12:10:06.0000] <Hixie>
so clearly that's not exactly the problem you're trying to solve :-)

[12:10:55.0000] <Hixie>
the web, for example, was a concrete solution to a narrow problem: how to share data at CERN. yet it worked out that it was a great base for a more general problem. compare to the other solutions to the more general problem that have been proposed, but have gone precisely nowhere.

[12:11:41.0000] <Hixie>
(in fact that most people have never heard of)

[12:11:52.0000] <rektide>
i guess i have a hard time seeing what you would do to my solution statement-

[12:11:55.0000] <Hixie>
SGML vs XML is another example. SGML tries to solve more problems than SGML.

[12:12:00.0000] <Hixie>
than XML, i mean

[12:12:07.0000] <Hixie>
yet XML is way more successful

[12:12:30.0000] <rektide>
myBroadcastChannel.makeDiscoverable() / BroacastChannel.findAllDiscoverable()- is that in the bad/general side to you?

[12:13:04.0000] <rektide>
that fails for not having a well targetted problem, for being general to you?

[12:14:08.0000] <rektide>
i feel like assuming more factors, having a more built out problem set-up- like yes perhaps the web intents works- would just be a receipe for making more ancillary downstream problems by baking in yet more assumptions

[12:14:45.0000] <rektide>
http://www.w3.org/TR/discovery-api/ is an example of what i feel is a near ideal extensible api, which makes few assumptions. acctually, i think it'd be a great consumer for a myBroadcastChannel.makeDiscoverable()!

[12:15:07.0000] <Hixie>
broadcast channels are per-origin so they don't solve this at all

[12:16:02.0000] <Hixie>
http://www.w3.org/TR/discovery-api/ makes no sense to me

[12:16:05.0000] <Hixie>
but ok

[12:16:08.0000] <rektide>
oh. heh, well.

[12:16:09.0000] <Hixie>
bbiab

[12:16:51.0000] <rektide>
i rescind any asks of #whatwg now seeing that broadcastchannel doesn't have cross origin capabilities.

[12:39:34.0000] <rektide>
i did a pretty crude port of Marijn's discovery-via-intermediary to broadcast channel, but obviously it's frivolous work when there's no cross-origin scenario to do it across. https://gist.github.com/rektide/36c5ec5301fb17f37ea6

[14:28:46.0000] <zewt>
ebay doesn't allow pasting in passwords; it's nonsensical that browsers even allow pages to affect that

[15:26:00.0000] <smaug____>
zewt: well, web pages can just reimplement type="password" themselves


2015-03-02
[16:47:11.0000] <TabAtkins>
annevk: I did another 2k lines of DOM today. 2500 left, which I'll do Tue or Wed. After that is some cleanup, then I'm finally done.

[16:57:34.0000] <caitp->
but you know it never really ends

[17:13:26.0000] <TabAtkins>
caitp-: Well, *my* part ends, since I'm just doing a preprocesser conversion.

[17:18:08.0000] <TabAtkins>
Hixie: Discovery API is about letting a page discover other servers on the same local network that want to be talked to, like a local music server.

[17:18:44.0000] <TabAtkins>
As long as the server can expose an HTTP endpoint and respond to certain standardized discovery protocols, the webpage can talk to it with that API.

[17:21:08.0000] <tantek>
TabAtkins: WSDL 2.0?

[17:21:21.0000] <caitp->
and of course everything on the IOT will want to get in on that, so your refridgerator, calendar, toaster, oven, microwave, vacuum cleaner, tv, raido and cellphone will be sharing info with random websites

[17:21:37.0000] <TabAtkins>
tantek: Dunno details/history, just summarizing the spec. ^_^

[17:22:59.0000] <caitp->
advertisers will know when you're running out of dishsoap and be able to target their specific brand right at you, it will be amazing

[17:27:11.0000] <tantek>
TabAtkins: just the last time someone tried to do "server can expose an HTTP endpoint and respond to certain standardized discovery protocols", we ended up with WS-Deathstar

[17:27:40.0000] <tantek>
or perhaps that was the *first time*

[17:28:04.0000] <tantek>
"Web Intents" may have been the latest version of that kind of discovery abstraction disaster.

[17:28:08.0000] <tantek>
I wish you better luck.

[17:28:13.0000] <TabAtkins>
I mean, you can layer whatever you want on top of it; you've just got an open communications channel.

[17:28:21.0000] <tantek>
exactly what they both said

[17:28:33.0000] <tantek>
classic architecture astronomy

[17:29:39.0000] <caitp->
it's a cool idea, but sec and privacy stuff needs to be at the forefront of anything like that imo

[17:40:33.0000] <zewt>
TabAtkins: sounds useful, but also like something that'll get mired in twenty layers of security mess

[17:40:59.0000] <TabAtkins>
heh, maybe. I don't have a dog in the fight; like I said, I was just summarizing the spec.

[17:42:00.0000] <tantek>
who's writing it?

[17:44:03.0000] <TabAtkins>
http://www.w3.org/TR/discovery-api/

[17:44:03.0000] <botie>
http://www.w3.org/TR/discovery-api/ is an example of what i feel is a near ideal extensible api, which makes few assumptions. acctually, i think it'd be a great consumer for a myBroadcastChannel.makeDiscoverable()!

[17:44:51.0000] <zewt>
is botie a bot that says "%s is an example of what i feel is a near ideal extensible api, which makes few assumptions. acctually, i think it'd be a great consumer for a myBroadcastChannel.makeDiscoverable()!" when someone pastes a url

[17:45:39.0000] <tantek>
lol instead of WSDL we get NSDL.

[17:46:54.0000] <tantek>
<s:Envelope s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"...

[17:47:02.0000] <tantek>
A-HA it *IS* WSDL 2.0

[17:47:55.0000] <tantek>
and untouched in > 1 yr (yes Editor's draft is 2 days *older* than TR draft)

[17:50:05.0000] <caitp->
that doesn't necessarily mean much

[17:50:13.0000] <tantek>
true

[17:50:56.0000] <zewt>
maybe it's already perfect

[17:51:32.0000] <zewt>
like dom2

[18:05:45.0000] <TabAtkins>
zewt: botie discovers "definitions" in what people say; statements of the form "X is Y" teach it something.

[18:05:57.0000] <TabAtkins>
zewt: Then it regurgitates these definitions when you trigger it.

[18:08:04.0000] <zewt>
megahals are pretty early-2000s, heh

[19:37:07.0000] <MikeSmith>
zewt: botie is a bot I run here for people to leave messages for other people who are away

[19:37:22.0000] <MikeSmith>
like Memoserv except more lightweight

[19:38:08.0000] <MikeSmith>
botie, inform foo hey did you finish writing that draft yet

[19:38:09.0000] <botie>
will do

[19:39:48.0000] <MikeSmith>
botie, inform lalslal hey did you finish writing that draft yet

[19:39:49.0000] <botie>
will do

[19:39:57.0000] <caitp->
is it pronounced bow-tie or bottie?

[19:40:07.0000] <botie>
lalslal, at 2015-03-02 03:39 UTC, MikeSmith said: hey did you finish writing that draft yet

[19:40:38.0000] <MikeSmith>
caitp-: bow-tie I guess

[19:40:42.0000] <MikeSmith>
I didn't name it

[19:40:51.0000] <MikeSmith>
a guy from the w3c systems team did

[19:41:03.0000] <caitp->
oh

[19:42:24.0000] <MikeSmith>
anyway the other side-effect thing it does is, any time somebody say "url is y" it adds it to a db it keeps

[19:43:10.0000] <MikeSmith>
I could turn that feature off but it mostly seems to not be annoying

[19:58:03.0000] <MikeSmith>
botie: sync handlers?

[19:58:03.0000] <botie>
mikesmith: i don't know

[19:58:55.0000] <MikeSmith>
botie: spacer?

[19:58:56.0000] <botie>
spacer are the root of all evil.

[20:00:03.0000] <MikeSmith>
botie: scoped styles?

[20:00:04.0000] <botie>
bugger all, i dunno, mikesmith

[20:00:13.0000] <MikeSmith>
botie: styles?

[20:00:13.0000] <botie>
i haven't a clue, mikesmith

[20:00:21.0000] <MikeSmith>
botie: scoped_styles?

[20:00:21.0000] <botie>
i don't know, mikesmith

[21:43:38.0000] <karanlyons>
Hey, so the History API: Why does popstate fire *after* the browser changes state, why is there no corresponding prepop event, why does the browser scroll in a way that is entirely unpreventable and why is the entire history array completely unreadable, even entries that are on the same hostname?

[21:44:44.0000] <karanlyons>
Because all those things make it incredibly frustrating to the point of useless for some very common applications (AJAXy pages and single page site type deals), and I can't for the life of me understand how this is what we ended up with.

[21:44:44.0000] <caitp->
why you wanna break the back button

[21:44:54.0000] <karanlyons>
Who says I want to break it?

[21:45:40.0000] <karanlyons>
Let's say you have a site where content is loaded in dynamically, affecting the page height. Now the browser's scrolling to the wrong page on any navigation.

[21:46:56.0000] <karanlyons>
I should clarify: pushstate, replacestate, being able to store state along with location data, this is all awesome.

[21:47:45.0000] <karanlyons>
But the browser scrolling being unpreventable and the developer being unable to see anything at all about the history of a session beyond the current frame (even being unable to see frames that are on their own hostname) create so many problems.

[21:49:56.0000] <karanlyons>
The closest you can get to solving the scroll issue (without doing things like faking content height completely and trying to reimplement scrolling in a way that still feels native, which people actually have to do right now) results in a one frame flash as the browser is gonna scroll to where it thinks the user wants to be no matter what, even if the developer knows better.

[21:50:43.0000] <caitp->
the history api is bungled for all sorts of reasons, but that doesn't mean it should be bungled even more

[21:51:02.0000] <karanlyons>
This would bungle it way less.

[21:51:15.0000] <karanlyons>
Also, I'm not bringing up anything that I haven't also found in long lived bug reports.

[21:52:39.0000] <karanlyons>
(I'm also very frustrated right now, as I'm fighting the browser to provide a good UX because the assumptions the history API makes right now just don't hold true for a lot of modern sites. And every workaround is just that: a workaround with some unavoidable *other* UX issue.)

[05:23:21.0000] <beverloo>
TabAtkins, thanks; I'm already well on my way :) it's a nice format

[05:24:42.0000] <annevk>
TabAtkins: thanks for the update

[06:00:33.0000] <Ms2ger>
I wonder if anyone still uses ismap

[06:11:08.0000] <darobin>
Ms2ger: $ grep -ri ismap dataset | wc -l # 61

[06:11:36.0000] <Ms2ger>
Aw

[06:12:00.0000] <darobin>
for that dataset, that's about 0.7%

[06:13:24.0000] <darobin>
this puzzles me tbh, when I started ismap was already considered a bad idea, it was usually listed with isindex and such

[06:14:23.0000] <zcorpan_>
annevk: is the "See it live: HTML Standard." thing in the repo? i can't find it https://github.com/whatwg/web-apps-tracker/search?utf8=✓&q=see+it+live

[06:16:08.0000] <zcorpan_>
annevk: (i wanted to add a link to respimg's changelog)

[06:20:12.0000] <annevk>
zcorpan_: hmm dunno

[06:20:25.0000] <annevk>
zcorpan_: guess not

[06:20:43.0000] <annevk>
zcorpan_: let me copy the latest

[06:20:50.0000] <zcorpan_>
annevk: ok thx

[06:22:46.0000] <annevk>
zcorpan_: done

[06:24:28.0000] <zcorpan_>
ty

[06:29:09.0000] <zcorpan_>
annevk: r? https://github.com/whatwg/web-apps-tracker/pull/1

[06:30:03.0000] <annevk>
zcorpan_: single paragraph for "see other links" would be better

[06:31:13.0000] <zcorpan_>
annevk: ok, just remove the <p>?

[06:32:01.0000] <annevk>
yeah I guess

[06:32:35.0000] <zcorpan_>
done

[07:28:20.0000] <zcorpan_>
Ms2ger: 99% was better than anticipated. it's certainly different compared to any other chocolate, but i kinda like it

[07:28:32.0000] <Ms2ger>
\o/


2015-03-03
[16:27:16.0000] <MikeSmith>
yippie ki-yay Apple has a new WebKit/Safari evangelist

[16:27:46.0000] <MikeSmith>
https://twitter.com/jonathandavis

[16:27:54.0000] <MikeSmith>
anybody know him?

[16:37:30.0000] <hober>
i do :)

[16:42:55.0000] <MikeSmith>
hober!

[16:43:30.0000] <MikeSmith>
get him to join here if he can sometimes

[16:43:57.0000] <MikeSmith>
anyway, good news that you guys have somebody in the position now

[16:44:18.0000] <MikeSmith>
I hope the job has some emphasis on devrel

[16:45:36.0000] <MikeSmith>
because it seems like he could end up helping a lot with giving web devs somebody to share their problems with and know that they're being heard

[16:46:25.0000] <MikeSmith>
as far as specific issues with making their web apps work well in iOS Safari I mean

[16:47:10.0000] <MikeSmith>
anyway it's great news

[16:56:50.0000] <hober>
yeah, we're really excited to have him

[17:00:39.0000] <MikeSmith>
btw I didn't know xeenon was responsible for evangelism stuff

[17:42:34.0000] <MikeSmith>
wow https://twitter.com/emacs/status/572571031447052289

[17:42:57.0000] <MikeSmith>
achivement unlocked there, for w3cmemes

[17:43:18.0000] <MikeSmith>
and indirectly for #1 emacs fanboy hober

[18:12:54.0000] <MikeSmith>
Domenic: how's jsdom performance these days?

[18:13:21.0000] <Domenic>
MikeSmith: pretty good IIRC ... faster than selenium at least, in general.

[18:13:26.0000] <MikeSmith>
nice

[18:13:38.0000] <MikeSmith>
what parser do you use with it mostly?

[18:13:43.0000] <MikeSmith>
parse5?

[18:16:05.0000] <Domenic>
yeah parse5

[18:16:11.0000] <Domenic>
we fall back to htmlparser2 if people are in XML mode

[18:16:36.0000] <Domenic>
either explicitly or in the magic DWIM mode we try to see if the file ends in .x(ht)ml, the server response comes back with an XML content type, etc.

[18:18:22.0000] <MikeSmith>
ok

[18:18:40.0000] <MikeSmith>
I don't know htmlparser2

[18:18:46.0000] <MikeSmith>
/me looks it up

[18:19:20.0000] <MikeSmith>
https://github.com/fb55/htmlparser2/ I guess

[18:21:23.0000] <Domenic>
yeah

[18:21:30.0000] <Domenic>
it's what we used to use before moving to parse5

[18:21:39.0000] <Domenic>
but it supports xml so we left it around for that case

[18:22:08.0000] <Domenic>
a more principled approach to xml would be nice

[18:22:17.0000] <Domenic>
but not yet a priority

[18:28:45.0000] <MikeSmith>
Domenic: does anybody use https://github.com/aredridel/html5 any more?

[18:29:09.0000] <Domenic>
MikeSmith: good question :-/. It's well-loved by its maintainer and so I try to keep support for it active. But I don't know of many people doing so.

[18:30:48.0000] <MikeSmith>
Domenic: when I tried it in the past the performance was not great

[18:31:16.0000] <MikeSmith>
but it was hard to judge then in part because at that time jsdom perf wasn't great either

[18:31:36.0000] <MikeSmith>
that said, it was a long time ago that I last tried

[18:32:04.0000] <MikeSmith>
anyway I like Aria

[18:33:44.0000] <MikeSmith>
I like to use software by people who both care about making great software but who are also nice enlighted people who seem like they really care about other people

[18:40:03.0000] <Domenic>
my thoughts exactly :)

[19:13:45.0000] <MikeSmith>
https://twitter.com/mamund/status/572581915456356352 quoting Linus: "We don't break compatibility and we haven't done feature-based releases since basically forever"

[19:13:48.0000] <MikeSmith>
sounds like the Web

[21:15:14.0000] <JonathanNeal>
Legal question: Are polyfills of CC-BY specs automatically or even forcefully CC-BY?

[21:33:40.0000] <MikeSmith>
/me looks around the channel for which lawyer here to assign that question to

[21:41:20.0000] <Hixie>
JonathanNeal: i am not a lawyer, but, no, there is no relationship between the copyright that a spec is under and its implementation.

[21:46:01.0000] <MikeSmith>
Hixie: hey on OSX do you use Terminal or iTerm2

[21:46:09.0000] <Hixie>
terminal

[21:46:12.0000] <Hixie>
never heard of iTerm2

[21:46:25.0000] <MikeSmith>
oh

[21:46:27.0000] <Hixie>
it's easy to imagine that it'd be better than Terminal

[21:46:31.0000] <MikeSmith>
yup

[21:46:46.0000] <MikeSmith>
well iTerm2 is way way better

[21:47:05.0000] <MikeSmith>
very actively developed by a guy who genuinely cares about making it great

[21:47:32.0000] <MikeSmith>
and he makes nightly builds

[21:47:33.0000] <MikeSmith>
http://iterm2.com/downloads.html

[21:47:40.0000] <Hixie>
though most of my problems with Terminal are to do with basic mac things, like, changing spaces eats your keystrokes and the animation slows at the end, or the annoyance around multiple windows vs multiple tabs

[21:47:50.0000] <MikeSmith>
yeah

[21:49:09.0000] <MikeSmith>
well an example of a nice feature around that level is the command+/ key in iTerm2

[21:49:10.0000] <Hixie>
nothing on the iterm2 features pages looks compelling to me, though

[21:49:17.0000] <Hixie>
what does that do?

[21:49:34.0000] <MikeSmith>
it just shows you where your cursor is

[21:49:51.0000] <MikeSmith>
but with a very nice UX

[21:49:59.0000] <Hixie>
can't say i lose my cursor often :-)

[21:50:10.0000] <MikeSmith>
well I do, on OSX

[21:50:23.0000] <MikeSmith>
in text editors

[21:50:29.0000] <MikeSmith>
specifically in vim

[21:51:24.0000] <MikeSmith>
but other places tooーif you use a dark background especially it can be hard to know where your cursor is

[21:51:55.0000] <Hixie>
my background is black and my cursor is white

[21:51:59.0000] <Hixie>
a big white block

[21:52:01.0000] <MikeSmith>
anyway iTerm2 also has a very good way of natively managing multiple tmux windows from a remote ssh session

[21:52:12.0000] <Hixie>
(or light blue or something)

[21:52:23.0000] <Hixie>
what is there to manage?

[21:52:55.0000] <MikeSmith>
well it manages them in way that doesn't require you to do ^B 1 2 3 4

[21:53:08.0000] <MikeSmith>
instead they're just each real windows

[21:53:27.0000] <Hixie>
if i wanted them to be distinct windows, i'd just connect to the remote server again :-)

[21:53:51.0000] <Hixie>
e.g. right now on this space i have an ssh connection to hixie.ch showing me the screen with my e-mail, and on the next space i have an ssh session to hixie.ch with my emacs screen

[21:53:57.0000] <hayato_>
Looks https://labs.w3.org/ is down. Because of that, the specs which use ReSpec aren't rendered properly. Is this a well-known issue?

[21:53:58.0000] <MikeSmith>
sure but you also lose ability to use ^B normally

[21:53:58.0000] <Hixie>
but they're both the same screen session

[21:54:03.0000] <Hixie>
no?

[21:54:13.0000] <MikeSmith>
sure

[21:54:13.0000] <Hixie>
i can switch internal screen buffers in each of these

[21:54:28.0000] <Hixie>
so ^P 2 and now the e-mail window shows my emacs buffer

[21:54:36.0000] <Hixie>
^P^P and we're back to e-mail

[21:54:58.0000] <MikeSmith>
yeah sure that's what I normally do too of course

[21:54:59.0000] <Hixie>
(i also have a connection to the same screen session on my work desktop)

[21:55:20.0000] <MikeSmith>
I'm not totally sold on the idea of native-window management for tmux i'll admit

[21:55:39.0000] <MikeSmith>
I guess it's more like I'm impressed that he made it work the way it does

[21:55:53.0000] <MikeSmith>
hayato_: not a known issue afaik

[21:56:01.0000] <MikeSmith>
hayato_: I'll ping the systems team

[21:56:08.0000] <Hixie>
it does sound pretty impressive, technically

[21:56:10.0000] <hayato_>
MikeSmith: thanks

[22:05:23.0000] <tripu>
Anyone having difficulties with Echidna or spec-generator on labs.w3.org ...?

[22:07:02.0000] <tripu>
There isn't anything on https://labs.w3.org/ as such

[22:07:16.0000] <tripu>
The tools there are Echidna (the publication system): https://labs.w3.org/echidna/

[22:07:35.0000] <tripu>
...and an instance of spec-generator (Respec): https://labs.w3.org/spec-generator/

[22:14:00.0000] <hayato_>
tripu: I have the same problem. I've just pinged Mike Smith in this room about that.

[22:14:29.0000] <tripu>
What is the issue, hayato_?

[22:14:39.0000] <tripu>
Echidna seems up and running

[22:14:50.0000] <hayato_>
ReSpec depends on https://labs.w3.org/

[22:15:15.0000] <hayato_>
I guess all specs which use ReSpec aren't rendered correctly.

[22:16:14.0000] <tripu>
hayato_: https://labs.w3.org/spec-generator/ isn't working?

[22:16:33.0000] <hayato_>
I'm not sure. I am using http://www.w3.org/Tools/respec/respec-w3c-common

[22:17:00.0000] <hayato_>
as an instance of ReSpec

[22:17:43.0000] <hayato_>
e.g. http://w3c.github.io/webcomponents/spec/shadow/

[22:18:53.0000] <tripu>
http://w3c.github.io/webcomponents/spec/shadow/ looks ok to me, hayato_

[22:19:04.0000] <tripu>
I see that's using http://www.w3.org/Tools/respec/respec-w3c-common , as you say

[22:19:27.0000] <tripu>
and that in turn seems to be using https://labs.w3.org/

[22:19:30.0000] <tripu>
which is up

[22:19:36.0000] <hayato_>
Table of Contents are not generated.

[22:20:36.0000] <tripu>
Although Echidna uses Respec, I'm not very familiar with Respec itself, hayato_

[22:20:49.0000] <tripu>
I think this is a question for darobin

[22:21:06.0000] <tripu>
I'll be happy to follow up with him later in the day, hayato_ :)

[22:22:06.0000] <hayato_>
I guess the root cause is same. It looks ReSpec of http://www.w3.org/Tools/respec/respec-w3c-common is waiting for time out from https://labs.w3c.org/.

[22:23:27.0000] <hayato_>
I guess both depends on the bibrefs from https://labs.w3.org/specrefs/bibrefs?refs=xxxx.

[22:25:34.0000] <tripu>
I can look again at this in a few hours, hayato_ -- sorry that I can't right now

[22:28:27.0000] <hayato_>
tripu: Never mind. Just talking to myself. :)

[22:39:51.0000] <tripu>
I'll look into that again when I'm free, hayato_ :)

[23:51:13.0000] <annevk>
Domenic: do you think these cancel threads will drive themselves to a conclusion?

[23:53:44.0000] <Domenic>
annevk: I have opinions on that but probably best to wait until tomorrow, gotta sleep now.

[23:54:23.0000] <annevk>
Domenic: nn

[01:41:44.0000] <darobin>
hayato_: you still around?

[01:42:23.0000] <darobin>
hayato_: it looks like the problem you're seeing is not with ReSpec, but instead with another script that you're including

[01:43:23.0000] <darobin>
hayato_: autolink.js is blowing up, which seems to stop everything somehow

[01:43:40.0000] <darobin>
ah, wait, seeing a timeout now

[01:45:30.0000] <darobin>
hayato_: it looks like the biblio proxy service is down, let me see if I can fix that

[01:45:44.0000] <darobin>
(there's still a problem with your autolink.js btw)

[01:46:42.0000] <annevk>
Domenic: another thing, did we want to change .bodyUsed or not?

[01:49:40.0000] <tripu>
Thank you, darobin, wrt ReSpec/Echidna & hayato_ :)

[01:50:24.0000] <darobin>
tripu: no worries, I'm a bit surprised that the labs specref thing is down; I thought it was just a proxy to the real service!

[01:50:30.0000] <darobin>
(which is up)

[01:50:39.0000] <darobin>
I guess we'll see when dom's around

[01:51:52.0000] <tripu>
ok darobin

[01:55:58.0000] <darobin>
hayato_: the respec parts of your doc are now fixed, but your autolink script is still broken

[02:00:14.0000] <hayato_>
darobin: Thanks. biblio seems working now. I've found some dups in my autolink. It's unrelated local minor issues. Thank you for investigating :)

[02:03:41.0000] <darobin>
hayato_: the autolink issue isn't about dups, it's a race condition

[02:03:46.0000] <darobin>
so maybe you're not seeing it :)

[02:03:58.0000] <darobin>
basically there's no guarantee that it runs before ReSpec

[02:04:03.0000] <darobin>
and if it doesn't things break

[02:04:19.0000] <darobin>
let me fix that for you

[02:05:06.0000] <hayato_>
darobin: I remember I encountered such a timing issue. But I don't remember how to manage that... Maybe I didn't fix it.

[02:05:17.0000] <darobin>
hayato_: fixing it, don't worry :)

[02:06:14.0000] <hayato_>
darobin: you are my hero.

[02:09:49.0000] <MikeSmith>
hayato_: darobin is my hero too

[02:09:58.0000] <MikeSmith>
we could start a hero club

[02:18:14.0000] <darobin>
hayato_: hahaha

[02:18:36.0000] <darobin>
hayato_: well, I'm fixing the problem largely by using a feature that's not in the ReSpec docs... so you could say I'm just cleaning up my own mess

[02:19:05.0000] <darobin>
I also replaced innerText with textContent, which is what you want there

[02:19:12.0000] <darobin>
(innerText is deep magic)

[02:19:40.0000] <darobin>
hayato_: https://github.com/w3c/webcomponents/pull/36

[02:22:12.0000] <hayato_>
darobin: I've merged it. Thanks!

[02:22:22.0000] <darobin>
hayato_: cool :)

[02:22:48.0000] <darobin>
hayato_: I just noticed that you're linking to http://domparsing.spec.whatwg.org/, that spec is gone

[02:27:05.0000] <hayato_>
darobin: thanks. Looks domparsing is now at https://dvcs.w3.org/hg/innerhtml/raw-file/tip/index.html (and http://www.w3.org/TR/DOM-Parsing/), I guess I don't need local Biblio info for DOMPARSING any longer.

[02:28:22.0000] <darobin>
hayato_: yeah, you can use [[DOM-PARSING]]

[02:29:03.0000] <darobin>
hayato_: also, [[selectors4]]

[02:35:57.0000] <hayato_>
darobin: Thanks! I've fixed both.

[02:36:05.0000] <darobin>
hayato_: cool, brilliant

[02:36:13.0000] <darobin>
I hope you can ship this to Echidna!

[02:46:03.0000] <hayato_>
darobin:  I've never used Echidna, assuming it's https://github.com/w3c/echidna. I'll have a look.

[02:46:51.0000] <darobin>
hayato_: I thought you were trying to get into the automatic publishing thing?

[02:47:17.0000] <Ms2ger>
Move to bikeshed already

[02:47:19.0000] <darobin>
you don't need to grab the echidna source, but you can sign up to have your draft pushed automatically

[02:47:26.0000] <darobin>
Ms2ger: it's the same thing for bikeshed

[02:47:32.0000] <Ms2ger>
Yeah

[02:47:33.0000] <Ms2ger>
Move to bikeshed already

[02:47:55.0000] <Ms2ger>
Respec takes ages to load

[02:49:29.0000] <MikeSmith>
boo hoo

[02:49:32.0000] <MikeSmith>
that's a feature

[02:49:49.0000] <MikeSmith>
it frees you up to do other things while you're waiting

[02:50:06.0000] <MikeSmith>
like light up the peace pipe

[03:00:17.0000] <MikeSmith>
hsivonen: could we consider a workflow for getting bug fixes into the Java HTML parser code that doesn't involve contributors to all make changes to the affected gecko parts

[03:02:58.0000] <MikeSmith>
hsivonen: I know in my case for the two simple patches I have pending I submitted them through Mozilla bugzilla voluntarily. But that's mostly because the upstream code's not in github or somewhere that has a pull-request mechanism of some other means for submitting a patch and have a record of it and some kind of workflow around it

[03:12:02.0000] <mrtn_>
the spec [1] says, that the dppx unit are the "dots per ‘px’ unit", but 1 css pixel clearly maps to 4 device pixel for example on a retina display, but the dppx value would be 2 in most (?) browsers - shouldn't it be 4? maybe TabAtkins knows more, as he worked on the spec... [1] http://www.w3.org/TR/css3-values/#resolution

[03:12:34.0000] <Ms2ger>
1 pixel in area or length?

[03:13:16.0000] <mrtn_>
i can't find anything that states if it's per area or length, so i just assume it's area...

[03:17:06.0000] <mrtn_>
it says "The <resolution> unit represents the size of a single "dot" in a graphical representation by indicating how many of these dots fit in a CSS ‘in’, ‘cm’, or ‘px’." in 1 css pixel fit 4 device pixel in my example, but dppx are 2...

[04:09:18.0000] <roc>
per length

[04:56:11.0000] <GPHemsley>
Are there any "bad" Unicode characters, where allowing them (or their raw character references) in user input could have adverse effects?

[05:06:04.0000] <annevk>
GPHemsley: define "bad", there's a number that allows you leaking out of a line box quite extensively

[05:06:16.0000] <GPHemsley>
annevk: Any value of "bad"

[06:19:40.0000] <beverloo>
annevk, https://github.com/whatwg/notifications/pull/36

[06:22:39.0000] <annevk>
beverloo: guess we have to wait for TabAtkins to take a look?

[06:23:06.0000] <beverloo>
I've peeked around in the bikeshed/widlparser code but can't immediately find what's up

[06:23:12.0000] <beverloo>
so yeah, he might know

[06:24:45.0000] <beverloo>
widlparser defines a dictionary member like this:

[06:24:46.0000] <beverloo>
# [ExtendedAttributes] Type identifier [Default] ";"

[06:25:01.0000] <beverloo>
so that's not compatible with webidl and explains the "required" problem

[07:37:47.0000] <TabAtkins>
beverloo: Please report these errors on widlparser; plinss is fast at fixing, then I'll pull into Bikeshed.

[07:38:11.0000] <TabAtkins>
github.com/plinss/widlparser

[07:39:40.0000] <TabAtkins>
mrtn_: The px unit is a linear length, not an area, so a 2x device has 2 pixels per px (but 4 pixels per square px, if that unit ever existed).

[07:43:13.0000] <TabAtkins>
beverloo: Oh, I see you not only already reported it, you submitted a PR. ^_^  I'll merge as soon as plinss does, thanks!

[07:57:10.0000] <beverloo>
TabAtkins, cool! I haven't found the no-space issue yet, the producer code in widlparser seems to be doing it correctly

[07:57:22.0000] <beverloo>
TabAtkins, does bikeshed have its own formatting code for idl?

[08:30:25.0000] <TabAtkins>
beverloo: Feel free to just report it; plinss will figure it out.

[08:30:38.0000] <beverloo>
TabAtkins, ok!

[08:30:55.0000] <TabAtkins>
beverloo: Bikeshed just uses widlparser to handle webidl; it doesn't do anything else besides tweak some attributes.

[08:41:23.0000] <mrtn_>
TabAtkins, yeah that makes sense, thank you. btw, liked your talk about Present and Future of CSS Layout!

[08:41:33.0000] <TabAtkins>
Thanks!

[09:03:32.0000] <jgraham>
So, uh, if I have <div id=1> there is no way to select that by id from css?

[09:06:49.0000] <TabAtkins>
jgraham: #\31

[09:08:44.0000] <jgraham>
Not in Firefox at least

[09:09:03.0000] <TabAtkins>
Taht's a bug, then. Works in Chrome, and works per spec.

[09:09:23.0000] <annevk>
WORKSFORME

[09:09:31.0000] <jgraham>
In querySelector?

[09:09:43.0000] <jgraham>
I guess I should have made that more clear

[09:10:08.0000] <annevk>
jgraham: yes

[09:10:09.0000] <annevk>
jgraham: document.querySelector("#\\31")

[09:10:25.0000] <TabAtkins>
jgraham: Yes, works.

[09:10:35.0000] <jgraham>
Oh, right of course, not enough escaping

[09:10:35.0000] <TabAtkins>
But yeah, the double-escaping needed is non-obvious. ^_^

[09:10:50.0000] <annevk>
Just use CSS.escape(id)

[09:10:55.0000] <TabAtkins>
Dont' worry, I made the same mistake when I was looking at an example just now.

[09:11:30.0000] <annevk>
Although document.querySelector("#" + CSS.escape("1")) is a bit cumbersome to write

[09:11:35.0000] <jgraham>
annevk: This is a WebDriver client that doesn't have convenient DOM functions

[09:12:36.0000] <jgraham>
Anyway now I know it's actualy possible I can just report it as a bug

[10:19:26.0000] <mrtn_>
TabAtkins, there's one thing i wonder about in the responsive images spec, if i use art direction, i may show different pictures, thus need different alt attributes, wouldn't it be good to have an alt attribute on the <source> tag (too)?

[10:22:27.0000] <TabAtkins>
mrtn_: Our conclusion is that you really shouldn't be doing things complicated enough to need different alt text, so we aren't going to support it.  This might change in the future if it's proven necessary.

[10:24:03.0000] <mrtn_>
alright, so this was discussed. i don't need it, just wanted to know... ;)


2015-03-04
[16:15:58.0000] <zewt>
wish more systems would take the web's lead in eliminating rare edge cases from APIs

[16:16:30.0000] <zewt>
(re: most of the day spent running down bugs caused by weird, obscure android service behavior)

[18:47:27.0000] <munsterberg>
leave

[00:42:35.0000] <annevk>
beverloo: thanks for patching all the things :-)

[04:02:56.0000] <beverloo>
annevk, np :)

[04:56:32.0000] <annevk>
JakeA: beverloo: Google still pushing requestAutocomplete()?

[04:56:49.0000] <annevk>
JakeA: beverloo: just noticed development at Mozilla seems stalled since June/July last year

[04:57:27.0000] <annevk>
JakeA: beverloo: was really hoping we'd make some progress on payments :-(

[06:46:36.0000] <wanderview>
annevk: whats a CG vs a WG?

[06:47:04.0000] <annevk>
wanderview: CG is a community group, WG is a working group; difference is mostly related to how IPR works

[06:47:19.0000] <wanderview>
annevk: what is IPR?

[06:47:22.0000] <annevk>
wanderview: and who gets to influence what is in scope and such

[06:47:32.0000] <annevk>
wanderview: intellectual property rights? I think...

[06:47:36.0000] <wanderview>
ah, ok

[06:48:03.0000] <annevk>
wanderview: WG is harder to setup but has strong theoretical protection

[06:48:08.0000] <wanderview>
annevk: what percentage of w3c discussions takes place with acronyms?

[06:48:17.0000] <annevk>
none of it has been battle tested I think

[06:48:53.0000] <annevk>
wanderview: a lot?

[06:49:07.0000] <wanderview>
that was meant to be a joke :-)

[06:55:55.0000] <jgraham>
Pretty sure it's 100% ACD

[06:56:43.0000] <annevk>
Even acronyms are abbreviated as <abbr>

[06:58:49.0000] <jgraham>
Well yes, at one point, most W3C discussions were themselves actually about <acronym>

[08:02:08.0000] <JakeA>
annevk: I haven't heard much from rAC lately. I'm not a huge fan of it. But I don't know what our plans are.

[08:03:20.0000] <annevk>
JakeA: I haven't really seen anything better to do payments

[08:03:42.0000] <annevk>
JakeA: though admittedly I didn't really like it either and it still doesn't seem like a silver bullet, but I doubt there is one

[08:05:54.0000] <JakeA>
annevk: yeah. It doesn't offer a whole lot beyond autocomplete

[08:18:02.0000] <annevk>
JakeA: I think the main thing it offers is some native UI controlled by the browser and a protocol to get that information on a page

[08:18:22.0000] <annevk>
JakeA: which is sort of the basics of what payments would look like

[08:18:59.0000] <annevk>
JakeA: but it needs iteration, e.g. generating tokens and not sharing credit card data would be great, though would require browsers to cooperate with banks somehow

[09:33:51.0000] <annevk>
https://medium.com/backchannel/marissa-mayer-has-completed-step-one-71dc31912855 Hmm, yet another article dissing "HTML 5" for mobile, this time from a Yahoo! perspective

[09:44:46.0000] <tantek>
annevk: and all this work we did to switch from "HTML 5" to HTML5. sigh.

[09:45:06.0000] <annevk>
tantek: yeah, I'm not sure what's bothering me more with that bit :-P

[10:30:00.0000] <wanderview>
JakeA: do you know if Service Worker scripts and related importScripts() end up in the normal http cache in blink?  or do you bypass normal http caching in that case?

[11:27:13.0000] <Krinkle>
Hixie: Heya, regarding link disabled. Wanna pick your brain for a sec.

[11:28:31.0000] <Krinkle>
The issue we ran into is that adding them dynamically means you run into the problem of not having a callback

[11:28:35.0000] <Krinkle>
Or was that resolved?

[11:29:20.0000] <Krinkle>
Which makes orchestration of enabling more than one stylesheet, as well as disabling the previous set, almost impossible.

[11:31:54.0000] <Domenic>
Hixie: I'm idly curious what made you decide navigator.vendorSub was worth adding?

[12:02:03.0000] <jsbell>
wanderview: re: SW+importScripts - yes, they read/write from the normal http cache.

[12:02:29.0000] <jsbell>
(in addition to the dedicated SW script cache)

[12:02:31.0000] <wanderview>
jsbell: ok... and you are just pinning them in the http cache somehow?

[12:02:42.0000] <jsbell>
wanderview: no, we end up storing 'em twice

[12:02:52.0000] <wanderview>
jsbell: awesome... we're going to do the same :-)

[12:02:53.0000] <jsbell>
wanderview: on the list of things to optimize

[12:03:06.0000] <wanderview>
jsbell: thanks!

[12:03:09.0000] <jsbell>
np

[12:04:00.0000] <wanderview>
jsbell: you plan to optimize with de-dupe with http cache?

[12:05:46.0000] <gsnedders>
annevk: I remember you making a comment along the lines of the "XML Namespaces is hard enough even Presto manages to get it wrong subtly". I don't remember in what way. Do you? :P

[12:38:20.0000] <Hixie>
Krinkle: how do you mean, you don't have a callback?

[12:38:32.0000] <Hixie>
Domenic: did the checkin comment link to the bug fail?

[12:38:38.0000] <Krinkle>
Hixie: From when the stylesheet has finished loading

[12:38:41.0000] <Hixie>
TabAtkins: https://www.w3.org/Bugs/Public/show_bug.cgi?id=28080

[12:38:51.0000] <Hixie>
Krinkle: can't you use <link onload>?

[12:39:00.0000] <Krinkle>
Hixie: <link> has onload? O_O

[12:39:11.0000] <Domenic>
Hixie: never noticed the "bug" column in the tracker until today!

[12:40:01.0000] <Domenic>
Wow, how are people using navigator.vendorSub if it is always the empty string? It's falsy, even!?

[12:40:21.0000] <Hixie>
hell if i know man

[12:40:29.0000] <Hixie>
foolip is the one to ask

[12:44:19.0000] <Krinkle>
Hixie: Hm.. it seems <link> have an own property of onload. I can't find it in the html spec though.

[12:44:34.0000] <Hixie>
every element has onload, that doesn't tell you much

[12:44:46.0000] <Krinkle>
If that works, that is amazing. That's the most mundane feature I've wanted to exist for years suddenly realising its existance.

[12:44:54.0000] <Hixie>
what you should look for is whether a 'load' event gets fired at the link element

[12:44:59.0000] <Hixie>
and i'm pretty sure we added that a few years ago

[12:45:01.0000] <Hixie>
could be wrong...

[12:45:26.0000] <Krinkle>
The number of hacks around this are crazy. This is the first I heard of a load event for stylesheets.

[12:45:40.0000] <Krinkle>
It makes perfect sense, but it's evaded me so far.

[13:13:40.0000] <Ms2ger>
Write some tests :)

[13:30:03.0000] <smaug____>
/me wonders if there is some comparison how different open source projects do code reviews

[13:31:29.0000] <jgraham>
smaug____: Write Reviewers at Work

[13:38:21.0000] <annevk>
gsnedders: perhaps one of https://dump.testsuite.org/2006/xml/ is a problem?

[13:55:12.0000] <hober>
MikeSmith: hahahah, I sent that tweet. And the reply. :)

[13:58:02.0000] <tantek>
hober, you tweeting with yourself again?

[13:58:16.0000] <hober>
tantek: :)

[14:47:22.0000] <jsbell>
wanderview: sorry, was mtging. We have no explicit plans; de-duping definitely makes sense. No idea what the priority of that will be

[15:33:27.0000] <MikeSmith>
hober is emacs!

[15:33:52.0000] <MikeSmith>
emacs has finally taken on full human form, as so many people had predicted it would evolve to

[15:34:36.0000] <MikeSmith>
it bega when TV Raman created emacs-speak

[15:34:57.0000] <MikeSmith>
then somebody along the way must have added emacs-walk

[15:35:12.0000] <tantek>
does emacs-speak support the blade runner photo browsing commands? http://www.criticalcommons.org/Members/ironman28/clips/bladeRunner3DphotoH264.mov/view

[15:35:47.0000] <MikeSmith>
maybe hober added emacs-walk himselfーhe emacs-bootstrapped himself into humanness

[15:36:07.0000] <tantek>
can't spell emacs without "mac", figures it'd be someone from Apple

[15:38:17.0000] <MikeSmith>
tantek: emacs can do that photo browsing thingーit's really just hober in there pulling levers and stuff, like wizard of oz

[15:38:46.0000] <MikeSmith>
emacs say, Pay no attention to the human behind that curtain!

[15:39:18.0000] <MikeSmith>
haha https://twitter.com/emacs/status/573265792118071296

[15:39:50.0000] <tantek>
no one tell Stallman that emacs is masquerading on a closed source silo

[15:39:51.0000] <MikeSmith>
I'm a vim user but it looks like I'm at risk of getting assimiliated into the collective

[15:40:09.0000] <MikeSmith>
tantek: blasphemy

[15:40:42.0000] <MikeSmith>
prepared to be struck by emacs-lightning

[15:46:32.0000] <MikeSmith>
in other news I seem to be getting this "Waiting for available socket" thing in Chrome only for www.w3.org URLs


2015-03-05
[16:21:05.0000] <jgraham>
MikeSmith: An alternative explaination is that the whole of twitter is actually parody accounts run by hober

[16:22:45.0000] <MikeSmith>
jgraham: lol

[16:22:57.0000] <MikeSmith>
that's actually starting to seem plausible

[16:41:07.0000] <jsbell>
Just noticed the whatwg logo for XHR. Nice.

[16:59:11.0000] <MikeSmith>
jsbell: from the mind of annevk and maybe he's the only one for whom that connection would have come to mind

[16:59:39.0000] <MikeSmith>
/me tries to imagine what the XHR logo would be if a different editor had chosen one

[17:00:16.0000] <MikeSmith>
too bad XHR is gonna be deprecated

[17:00:48.0000] <MikeSmith>
the Fetch logo is seriously lacking right now

[17:01:52.0000] <MikeSmith>
annevk: I think some variation on https://openclipart.org/detail/210732/Dog%20Bone would be a good logo for Fetch

[17:02:38.0000] <MikeSmith>
not a variation on that particular image but on the idea

[17:03:13.0000] <MikeSmith>
annevk: http://www.alettertomydog.com/wp-content/uploads/dog-bone.jpg

[17:03:45.0000] <MikeSmith>
http://www.newrepublic.com/sites/default/files/migrated/dog%20bone%209.3.JPG

[17:04:15.0000] <jsbell>
MikeSmith: Maybe a sideways u-turn?

[17:04:33.0000] <jsbell>
... which appears to be one of the few arrows not in Unicode...

[17:41:32.0000] <sicking>
Domenic: i'm bummed that Promise.then can be called multiple times. It would have been so easy to add the most important forms of cancellability otherwise.

[18:14:51.0000] <MikeSmith>
botie: inform jsbell ↩

[18:14:52.0000] <botie>
will do

[18:21:45.0000] <tantek>
MikeSmith - looks like "reply"

[18:26:35.0000] <MikeSmith>
tantek: yeah

[18:28:32.0000] <MikeSmith>
I don't really know why Josh suggested "sideways u-turn"

[18:29:38.0000] <MikeSmith>
but I do know I like my bone

[18:45:01.0000] <MikeSmith>
hey annevk when you're back please ping me so I can tell you something I been meaning to tell you

[19:18:05.0000] <tantek>
MikeSmith: 🐶

[19:29:46.0000] <MikeSmith>
tantek: yeah that'd work

[23:16:15.0000] <annevk>
MikeSmith: about new logos for Fetch? :-)

[23:55:51.0000] <MikeSmith>
no

[23:55:53.0000] <MikeSmith>
well that too

[23:56:42.0000] <MikeSmith>
annevk: a simple bone image would be kinda fun

[00:18:06.0000] <annevk>
So https://html5.org/r/8886 is another data point for why custom elements would want some kind of end tag notification

[01:43:35.0000] <annevk>
rniwa: Firefox Nightly works fine here

[01:43:49.0000] <annevk>
rniwa: are you running another Firefox at the same time? That might be the problem

[01:43:59.0000] <rniwa>
annevk: I quit it but it doesn't launch :(

[01:44:09.0000] <annevk>
weird

[01:44:12.0000] <rniwa>
annevk: it keeps bouncing on the dock...

[01:44:26.0000] <annevk>
I've been using Nightly mostly reliably for over two years now

[01:45:10.0000] <annevk>
Yesterday I booted my other copy of Firefox to test something and it was Firefox 22 (beta channel)...

[01:50:04.0000] <rniwa>
annevk: LOL. that's some old Firefox

[01:50:58.0000] <rniwa>
annevk: on a completely unrelated note, I have a pretty decent implementation of classes in WebKit locally.

[01:51:12.0000] <Ms2ger>
Classes?

[01:51:18.0000] <rniwa>
I do need to split it into pieces and land them but it's getting there.

[01:51:21.0000] <rniwa>
Ms2ger: ES6

[01:51:42.0000] <Ms2ger>
Ah

[01:52:16.0000] <annevk>
rniwa: cool

[01:52:29.0000] <karlcow>
HTML Stress test circa 1992 -  http://info.cern.ch/hypertext/WWW/MarkUp/Connolly/errors.html

[01:52:35.0000] <annevk>
rniwa: it seems Firefox' implementation is not entirely complete yet

[01:52:40.0000] <annevk>
rniwa: e.g. no default constructor

[01:52:57.0000] <rniwa>
default constructor is not that trivial due to its dependence on spread

[01:53:05.0000] <rniwa>
thankfully, oliver has implemented that one in JSC

[01:53:12.0000] <Ms2ger>
It's only constructor() and statics that are supported in SM, IIRC

[01:53:19.0000] <rniwa>
so I just need to miranda-function it

[01:53:22.0000] <Ms2ger>
And we have spread, I think

[01:53:57.0000] <rniwa>
Ms2ger: oh nice

[01:54:11.0000] <rniwa>
Ms2ger: and you guys support let/const so TDZ must be supported as well

[01:54:19.0000] <rniwa>
the biggest missing piece for us is TDZ at the moment.

[01:54:22.0000] <Ms2ger>
...maybe :)

[01:54:32.0000] <rniwa>
and it took us a while to figure out the best way to implement it

[01:54:35.0000] <annevk>
Is let finally fixed?

[01:54:41.0000] <annevk>
I thought we had an old version of it

[01:54:47.0000] <rniwa>
annevk: oh..

[01:54:50.0000] <Ms2ger>
We've had let/const long before the TDZ existed

[01:55:04.0000] <rniwa>
annevk, Ms2ger: so you guys might still need to implement TDZ

[01:55:09.0000] <Ms2ger>
It might be fixed by now, but I wouldn't put money on it yet :)

[01:55:10.0000] <rniwa>
I don't like TDZ though...

[01:55:17.0000] <rniwa>
it's like an extra runtime cost for nothing :(

[01:56:57.0000] <Ms2ger>
No comment :)

[01:59:33.0000] <rniwa>
anyway, now I can finally get back to custom elements.

[01:59:40.0000] <rniwa>
there are still some interesting questions.

[02:01:13.0000] <Ms2ger>
Like "Should we really implement this?"?

[02:02:07.0000] <rniwa>
Ms2ger: that's always an important question...

[02:02:24.0000] <rniwa>
Ms2ger: for implementing any feature.

[02:02:54.0000] <MikeSmith>
annevk: I prefer my HTML documents formatted as TeX

[02:03:04.0000] <rniwa>
Ms2ger: I was explaining how shadow DOM works to someone today and convinced myself that it's too damn complicated as is.

[02:03:31.0000] <rniwa>
Ms2ger: like... I couldn't even draw all possible scenarios on whiteboard after 15 minutes.

[02:03:59.0000] <rniwa>
even though the whiteboard looked like a complete gibberish at that point.

[02:04:36.0000] <MikeSmith>
rniwa: you should just build your Nightly from sources

[02:04:49.0000] <MikeSmith>
I reckon you got a good machine to build on

[02:04:52.0000] <Ms2ger>
Eh, not like Google is going to ship it anytime soon, amirite

[02:06:15.0000] <rniwa>
Ms2ger: yeah, and it's gonna be prefixed for a long time even if it did ship.

[02:06:54.0000] <rniwa>
it's not like we've come to consensus in the relevant working groups.

[02:07:27.0000] <annevk>
rniwa: can you make it April 24?

[02:07:34.0000] <rniwa>
annevk: yes!

[02:07:37.0000] <annevk>
great

[02:08:01.0000] <rniwa>
annevk: unless the U.S. government decides to not let me in after going back to Japan LOL

[02:08:04.0000] <annevk>
Travis' comment contrasting components with <iframe> was somewhat interesting

[02:08:08.0000] <annevk>
heh

[02:08:21.0000] <annevk>
although not really new

[02:08:41.0000] <annevk>
I'm still mulling over https://speakerdeck.com/vjeux/react-css-in-js a bit

[02:08:52.0000] <rniwa>
annevk: where did he post that?

[02:09:38.0000] <annevk>
rniwa: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27401#c5

[02:09:58.0000] <jgraham>
MikeSmith: Not sure why you would build nightly from source, really, unless you want a debug build. Or like having a source tree to run tests

[02:10:19.0000] <annevk>
rniwa: it gives the idea that Apple + Mozilla + Microsoft agree that isolation is important

[02:10:48.0000] <annevk>
rniwa: coupled with that being a big complaint about CSS, there might be something there

[02:11:05.0000] <annevk>
though nobody has really turned this into anything concrete yet unfortunately

[02:12:33.0000] <jgraham>
annevk: Did you manage to get any detailed feedback out of the gaia people

[02:12:34.0000] <jgraham>
?

[02:12:50.0000] <rniwa>
annevk: thanks

[02:13:20.0000] <annevk>
jgraham: some from Wilson (if you see him, wish him a happy b-day)

[02:13:30.0000] <rniwa>
annevk: yeah, someone at Microsoft mentioned to me that they're worried about versioning of web components

[02:13:36.0000] <rniwa>
annevk: and I fully agree with that concern

[02:13:39.0000] <annevk>
jgraham: also in the direction of wanting to build isolated components similar to e.g. <input>

[02:13:59.0000] <rniwa>
annevk: as things stand, it's a dependency nightmare for component authors

[02:14:13.0000] <jgraham>
annevk: OK, great. It was Wilson I was talking to, and it sounded like they were planning to move back to a more <iframe>-like model for some things

[02:14:54.0000] <annevk>
rniwa: versioning? That releasing updated components potentially requires global changes?

[02:15:42.0000] <rniwa>
annevk: like... when you release a new version of component, you need to worry about someone depending on your shadow DOM structures

[02:16:01.0000] <annevk>
rniwa: yeah okay, that's how I understood it, makes sense

[02:16:47.0000] <annevk>
rniwa: yeah, you can't really pull a mobile like Safari (and Opera before, hah) did with <input>

[02:17:00.0000] <rniwa>
annevk: yeah, not at all.

[02:17:07.0000] <rniwa>
annevk: for something like that to work

[02:17:21.0000] <rniwa>
annevk: we can't have any JS-visible API changes made by "components"

[02:17:37.0000] <rniwa>
annevk: we need to use something more like CSS-based decorators

[02:17:44.0000] <rniwa>
that UAs can just hoist at its will.

[02:20:08.0000] <annevk>
Decorators make event-based stuff harder though I reckon

[02:20:53.0000] <annevk>
But it does kind of make sense that public API you'd do through a custom element and styling through something decorator-like. But there's some intersection with focus/input...

[02:21:50.0000] <rniwa>
yeah, it's tricky :/

[02:23:22.0000] <MikeSmith>
jgraham: if you run a version with your own patches for changing things but you also want to get the latest upstream changes

[02:28:38.0000] <jgraham>
Well yes, of course, but that's a pretty odd use case :)

[02:33:32.0000] <MikeSmith>
jgraham: it's even odder when some of your code does stuff that strings emitted by the chrome with hardcoded strings like "baddasss"

[02:33:52.0000] <MikeSmith>
I mean hypothetically speaking that would be pretty odd

[03:05:32.0000] <Flump5281>
Hi guys, is there anyone around who can create wiki accounts for wiki.whatwg.org?

[03:20:06.0000] <zcorpan>
would it make sense for Servo to try to identify as webkit instead of as gecko? (i guess there are bigger problems at this point, but long-term)

[03:23:38.0000] <Ms2ger>
We identify as mosaic

[03:30:37.0000] <annevk>
Flump5281: send me a pm with username / email

[03:30:54.0000] <annevk>
Flump5281: might take a while because I'm about to take a break

[03:31:45.0000] <Flump5281>
annevk: PM sent :)

[06:14:48.0000] <hemanth>
/me : nmotw -> http://nmotw.in/dompurify/  Super-fast, uber-tolerant XSS sanitizer for #HTML, MathML and SVG! 

[07:58:06.0000] <zcorpan>
i wonder if browsers are named to conflict with other browser vendors' terminology just to annoy the other browser vendors. (chrome, spartan)

[09:39:21.0000] <jamesr___>
having that as a goal would make naming things easier

[09:40:14.0000] <annevk>
Domenic: I think SharedArrayBuffer is by design not on the main thread, would be bad to lock it

[09:40:31.0000] <annevk>
Domenic: and not sure what primitive I was thinking of, something that does what you want :-)

[09:40:49.0000] <annevk>
jamesr___++

[09:41:40.0000] <caitp>
which browser terminology does spartan conflict with?

[09:42:38.0000] <gsnedders>
Most of the jokes I've seen have been the fact that Opera's old testing infra was called SPARTAN

[09:42:46.0000] <gsnedders>
an acronym for… something, nobody really knows.

[09:43:24.0000] <annevk>
Hixie should know, he made it up

[09:44:30.0000] <gsnedders>
I thought that was only ART

[09:45:35.0000] <caitp>
writing quality maintainable code is absolutely forbidden

[09:49:10.0000] <jgraham>
I think SPARTAN was an acronym for at least two things, although iirc the reasonable-sounding one was coined later

[09:49:50.0000] <jgraham>
I think the original one started Solar Powered…

[09:51:04.0000] <jgraham>
(although I'm not sure that wasn't the more reasonable one)

[09:52:13.0000] <Domenic>
annevk: I think there's nothing in the SAB design that is inherently worker-specific. If it doesn't work on the main thread people will just have to create async shim APIs to let the main thread manipulate it.

[10:42:23.0000] <botie>
jsbell, at 2015-03-05 02:14 UTC, MikeSmith said: ↩

[10:43:39.0000] <jsbell>
Yeah, but not "go get something, then come back" enough

[11:42:45.0000] <sicking>
Domenic: the worker-specific thing is that the API allows for blocking IO, no?

[11:59:06.0000] <Domenic>
sicking: I didn't see any blocking, but maybe I didn't understand the futex stuff entirely.

[11:59:52.0000] <sicking>
Domenic: the futex stuff is entirely about blocking if I understand it correctly. That's the only thing it does

[12:00:48.0000] <sicking>
Domenic: There's two parts to it: 1. Blocking until you receive a signal, 2. Sending a signal to unblock someone

[12:01:03.0000] <sicking>
you could imagine exposing 2 to the main thread

[12:01:11.0000] <sicking>
but i'm not sure what complexities that would pull in

[12:01:16.0000] <Domenic>
OK. I guess I am less interested in the futexes and more in the actual SharedArrayBuffer data structure.

[12:01:41.0000] <sicking>
how would you used shared memory if you don't use futexes?

[12:02:08.0000] <Domenic>
Manually send signals when the background thread is done modifying a section?

[12:02:39.0000] <sicking>
transferring memory seems fine for that

[12:02:51.0000] <Domenic>
Yeah if you could transfer regions back and forth, that would suffice

[12:02:59.0000] <Domenic>
But nobody seems interested in that

[12:03:13.0000] <Domenic>
Probably because it isn't enough for pthread emulation?

[12:03:39.0000] <sicking>
the delta improvement over what is already there (thransferring entire buffers) doesn't seem big enough for the complexity maybe

[12:03:48.0000] <sicking>
right, and that

[12:04:06.0000] <Domenic>
transferring entire buffers is only there in Firefox :P

[12:04:12.0000] <sicking>
huh?

[12:04:20.0000] <Domenic>
ArrayBuffer.transfer is Firefox-proprietary

[12:04:41.0000] <sicking>
postMessage allows transferring arraybuffers in chrome too, no?

[12:04:50.0000] <Domenic>
Asynchronously

[12:05:11.0000] <sicking>
sure, but you were sending a asynchronous signal anyway, no?

[12:05:15.0000] <Domenic>
Yeah I guess so

[12:06:13.0000] <sicking>
so what's there allows you to do mainly what you were asking for. The only thing you can't do is to do a single allocation of a big buffer and then transfer parts

[12:06:23.0000] <sicking>
you'll have to allocate multiple buffers

[12:06:44.0000] <Domenic>
Right, which is wasteful if you don't know ahead of time how many bytes recv(2) is going to read from the socket

[12:07:21.0000] <Domenic>
Maybe not wasteful

[12:07:24.0000] <Domenic>
Just fragmenting

[12:07:30.0000] <sicking>
is the difference really that big between allocating 20 4kB buffers, and allocating one 80kB buffer?

[12:07:32.0000] <Domenic>
Which I don't have enough experience to know if that's a real problem

[12:07:44.0000] <Domenic>
Well

[12:07:45.0000] <sicking>
i don't think fragmentation is that big of a problem here

[12:08:03.0000] <Domenic>
If you allocate a 4 kB buffer and get only 1.5 kB, what do you do with the other 2.5 kB?

[12:08:10.0000] <sicking>
not when dealing with chunks that are of the same size, and are all "fairly large"

[12:08:23.0000] <Domenic>
You can either release it or you can try to reuse it, doing a recv(2) at offset 1.5 kB with length 2.5 kB

[12:08:49.0000] <Domenic>
Probably not a big deal though, yes.

[12:09:07.0000] <sicking>
yeah, i wouldn't think this is a problem

[12:09:24.0000] <sicking>
definitely not obviously enough a problem that we should assume it is without data

[12:16:13.0000] <sicking>
Domenic: fwiw, I believe that there might be people at mozilla who are interested in supporting transferring parts of an arraybuffer between threads. But someone needs to come up with a good API (which is tricky) as well as show interest across browsers (which is probably even trickier)

[13:03:38.0000] <roc>
Domenic: transferring independent buffers isn't just wasteful of memory, it breaks asm.js-like programs, which rely on all memory being accessible in a single array


2015-03-06
[19:36:50.0000] <MikeSmith>
https://www.w3.org/community/groups/proposed/#bgsync

[19:37:21.0000] <MikeSmith>
needs one more person "sponsor" creation of the group

[19:38:20.0000] <MikeSmith>
anybody know if Josh Karlin uses IRC

[21:41:48.0000] <MikeSmith>
Hixie: at https://html.spec.whatwg.org/multipage/forms.html#the-select-element you state a requirement that starts out with, "If a select element has a required attribute specified, does not have a multiple attribute specified, and has a display size of 1..."

[21:42:42.0000] <MikeSmith>
but if the multiple attribute isn't specified the only way to set the display size is by explicitly specifying the "size" attribute

[21:45:12.0000] <MikeSmith>
oops actually I meant the statement just after that sentence

[21:45:23.0000] <MikeSmith>
the one that says, "If a select element has a required attribute specified, does not have a multiple attribute specified, and has a display size of 1, then the select element must have a placeholder label option."

[21:47:01.0000] <MikeSmith>
it seems to me that could more precisely state the requirement explicitly mentioning the "size" attribute instead of indirectly stating it in terms of the abstract "display size" concept

[21:48:06.0000] <MikeSmith>
so it could be refined to say, "If a select element has a required attribute specified, does not have a multiple attribute specified, and does not have a "sizes" attribute with a value greater than 1, then the select element must have a placeholder label option.

[21:58:56.0000] <MikeSmith>
filed a bug https://www.w3.org/Bugs/Public/show_bug.cgi?id=28150

[01:27:03.0000] <annevk>
MikeSmith: see https://github.com/slightlyoff/BackgroundSync/issues/57

[01:27:17.0000] <MikeSmith>
/me looks

[01:27:47.0000] <MikeSmith>
ah ok

[01:40:46.0000] <MikeSmith>
http://robert.ocallahan.org/2015/03/debugging-gecko-with-reverse-execution.html

[01:40:48.0000] <MikeSmith>
wow

[02:48:27.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/607#issuecomment-76349858 ping

[03:04:09.0000] <MikeSmith>
hsivonen: would be good if you could weigh in on https://github.com/validator/validator/pull/48 when have time (relatively minor thing)

[03:33:07.0000] <darobin>
bah, krijnhoetmer.nl is down!

[03:45:21.0000] <MikeSmith>
I want my money back

[03:45:51.0000] <MikeSmith>
darobin: http://logs.glob.uno/?c=freenode%23whatwg remains a live

[03:46:05.0000] <darobin>
MikeSmith: thanks! I didn't know that one

[04:28:24.0000] <beverloo>
annevk, cool, thanks

[04:28:37.0000] <beverloo>
I'll sync the bikeshed version afterwards

[04:28:57.0000] <annevk>
Ah yeah, forgot about that

[04:30:05.0000] <beverloo>
no worries, I'd rather not block the spec on that

[06:37:33.0000] <JakeA>
annevk: on leave at the moment. Not sure I understand the redirect thing. Would it solve the css use case? Where there are redirects that aren't visible to me but I want URLs to be relative to the final url

[06:38:01.0000] <annevk>
JakeA: why would it not be visible to you though?

[06:38:13.0000] <annevk>
JakeA: event.request.url != response.url in that case, no?

[06:38:30.0000] <JakeA>
Correct

[06:39:46.0000] <JakeA>
annevk: is it safe to give visibility to response.url? I thought there were security issues there

[06:40:04.0000] <JakeA>
Or was it just intermediate redirect URLs?

[06:40:04.0000] <annevk>
JakeA: when it's not a redirect it's fine

[06:40:16.0000] <annevk>
JakeA: and already exposed by XMLHttpRequest

[06:40:47.0000] <annevk>
(also required if you want to handle e.g. base URL stuff yourself in case of JSON or some such)

[06:43:00.0000] <JakeA>
annevk: if the SW provides a redirect, does the SW get another fetch event? (I think it's only does that for navigations, but still half asleep)

[06:43:11.0000] <annevk>
JakeA: it does

[06:43:41.0000] <annevk>
well should I think

[06:43:52.0000] <JakeA>
annevk: just navigations or all requests?

[06:44:09.0000] <annevk>
all

[06:44:23.0000] <annevk>
see in https://fetch.spec.whatwg.org/#http-fetch step 2 you get the redirect

[06:44:29.0000] <annevk>
then in step 4 it's handled

[06:44:45.0000] <annevk>
which causes re-entry

[06:44:53.0000] <annevk>
so it's all good

[06:53:53.0000] <JakeA>
annevk: so with the CSS example, id check if the response url is different & instead issue a redirect? I don't like the extra network request or cache lookup that would create.

[06:57:32.0000] <JakeA>
annevk: what was wrong with useFinalURL? I agree it's a bit ugly, but it works

[06:59:06.0000] <annevk>
JakeA: less unnecessary primitives

[06:59:22.0000] <annevk>
JakeA: and yes, redirects are always good to avoid, which is why you should update your code if it creates them...

[07:10:55.0000] <JakeA>
annevk: they're not always in your control. Check out the font css request at talky.io, the redirect there is the font foundry doing dumb anti-piracy checks. I guess it's not a problem in this exact case because the fonts are datauris

[08:27:23.0000] <annevk>
JakeA: perhaps we should call it overrideRequestURL

[08:27:44.0000] <annevk>
JakeA: I'm still a bit skeptic with regards to the savings I have to say

[08:27:50.0000] <annevk>
wanderview: ^^

[08:28:29.0000] <wanderview>
annevk: are you asking me to bikeshed a name? :-)

[08:28:39.0000] <wanderview>
or is this about forcing the urls to match in the cache

[08:28:39.0000] <annevk>
please

[08:29:58.0000] <wanderview>
annevk: I guess I don't really have an opinion other than making it clear its not actually a url... I like starting boolean attributes with "Is" like "IsFinalURL"

[08:34:06.0000] <annevk>
wanderview: overrideRequestURL has that covered, no?

[08:34:28.0000] <wanderview>
annevk: what object is this on?

[08:34:35.0000] <annevk>
wanderview: on response

[08:34:51.0000] <annevk>
wanderview: as a better name for useFinalURL

[08:35:03.0000] <annevk>
wanderview: the default is that request's url wins

[08:35:05.0000] <wanderview>
annevk: it overrides in respondWith()?  would it override in Cache as well?

[08:35:30.0000] <annevk>
wanderview: I'm not sure how it makes sense in the cache

[08:35:42.0000] <annevk>
yeah hmm

[08:35:45.0000] <annevk>
JakeA: ^^

[08:35:51.0000] <wanderview>
annevk: sorry... in a meeting

[08:36:05.0000] <annevk>
JakeA: given the other APIs that use Request/Response it does seem better to decouple it somehow

[08:36:17.0000] <annevk>
JakeA: either require redirects or have a different respondWith

[08:36:37.0000] <annevk>
JakeA: e.g. repondWith(response, {overrideRequestURL: true})

[08:37:15.0000] <JakeA>
annevk: ohh, I like that. I think that's what we were looking for

[09:11:50.0000] <wanderview>
annevk: does this mean the bool would be removed from Response?

[09:14:10.0000] <wanderview>
annevk: or it moves to an internal, not-exposed-to-content type flag?

[09:16:02.0000] <annevk>
wanderview: there's two ways to implement it and the spec will prolly use the flag

[09:16:28.0000] <wanderview>
annevk: just curious if I should tell people not to write the code to persist the flag to cache

[09:16:34.0000] <annevk>
wanderview: one way is that SW returns a response and a flag to Fetch, that's the nice way, the other way is that SW annotates response and then returns it, which is the easy way given how Fetch fits together

[09:16:50.0000] <annevk>
wanderview: yeah, that's not needed with this approach

[09:16:57.0000] <annevk>
wanderview: unless I'm missing something

[09:17:00.0000] <wanderview>
good

[09:17:10.0000] <wanderview>
thanks

[09:17:26.0000] <wanderview>
I guess I'll wait for the spec text to change before closing the bug

[09:17:55.0000] <annevk>
wanderview: it seems JakeA agrees so go ahead...

[09:18:24.0000] <annevk>
wanderview: I can remove the JS property pretty quickly, working on something else now

[09:18:40.0000] <wanderview>
annevk: k... no rush

[09:22:52.0000] <annevk>
wanderview: mkay

[09:23:51.0000] <Krinkle>
Hm.. I'm curious if there's a chance of re-fixing innerHTML  under a different name. It seems browsers are resisting spec compliance with regards to newlines for back-compat. We did it with innerText>textContent. Perhaps an htmlContent is in order?

[09:23:57.0000] <Ms2ger>
No

[09:24:00.0000] <Krinkle>
e.g. https://code.google.com/p/chromium/issues/detail?id=174829

[09:24:30.0000] <Krinkle>
If browsers stay together and resist, the spec might as well be changed back

[09:24:53.0000] <Ms2ger>
HTML serialization just isn't a priority

[09:25:26.0000] <Ms2ger>
If you want to get browsers fixed, fixing them yourself is a lot more likely to work than trying to pitch a new redundant feature

[09:25:44.0000] <Krinkle>
Yeah, we got that after spending 2 years building VisualEditor. Which relies on Content Editable, but due to its instabilities and quirks, have to fallback to innerHTML a fair bit.

[09:26:44.0000] <Krinkle>
Plain content editable works for one's moms cooking blog, but not Wikipedia.

[09:27:34.0000] <Krinkle>
(as long as the mom uses a modern browser and write LTR and in Latin characters and uses no special styling or foreign elements.)

[09:31:08.0000] <MikeSmith>
Krinkle: it sounds like the problem you really want fixed is not with innerHTML but with contenteditable

[09:31:18.0000] <Krinkle>
MikeSmith: Absolutely.

[09:31:19.0000] <MikeSmith>
I mean with contenteditable in the abstract

[09:31:25.0000] <MikeSmith>
in terms of what it rightly should be

[09:31:40.0000] <MikeSmith>
so you know there's active work going on there

[09:31:50.0000] <MikeSmith>
I think we talked about that here before

[09:32:13.0000] <Krinkle>
MikeSmith: We considered going the google-docs route of re-implementing half a browser in JavaScript (e.g. the typical "your cursor is a blinking span"). Which involves having to re-implement text overflow, selection highlights etc. We actually went this route and came quite far.

[09:32:39.0000] <Krinkle>
But for the benefit of native support for spell check, and IMEs and loads of other things as well as mobile support, we re-started and went with CE.

[09:33:25.0000] <Krinkle>
Although heavily locked down as it can't be trusted for anything other than a canvas for output and receiving input events. So we have a separate linear data model, and a detached second DOM tree. That is synced with the Content Editable surface.

[09:33:56.0000] <Krinkle>
It's still in beta, but can be seen here for example: https://www.mediawiki.org/wiki/VisualEditor:Basic_example_worksheet?veaction=edit

[09:34:51.0000] <Krinkle>
There are a few tangible direct issues in browser we worked around and documented, but the broader issues with CE we never cared to document and just worked around. ITtd be cool to document some of that.

[09:35:30.0000] <Krinkle>
It seems like CE was one of those features were the spec (as it was 5 years ago anyway) has not received much input based on real-world usage.

[09:35:44.0000] <Krinkle>
I heard recently there was a call for attention but lost track of that.

[09:43:47.0000] <MikeSmith>
Krinkle: > But for the benefit of native support for spell check, and IMEs and loads of other things as well as mobile support, we re-started and went with CE.

[09:43:50.0000] <MikeSmith>
yeah

[09:44:13.0000] <MikeSmith>
/me looks at https://www.mediawiki.org/wiki/VisualEditor:Basic_example_worksheet?veaction=edit

[09:45:01.0000] <MikeSmith>
this is nice

[09:45:14.0000] <terinjokes>
going to assume fetch's Body.prototype.blob() is never supposed to throw an exception?

[09:45:19.0000] <MikeSmith>
Krinkle: you really should get involved with the current Editing work

[09:45:59.0000] <MikeSmith>
Krinkle: didn't I point you at this stuff the other day? https://github.com/w3c/editing-explainer

[09:46:56.0000] <MikeSmith>
http://w3c.github.io/editing-explainer/tf-charter.html

[09:51:19.0000] <Krinkle>
MikeSmith: Aye, I'm spread thin as it is. I'll definitely pass it on this time though. Writing up an internal mail now

[09:51:42.0000] <Krinkle>
MikeSmith: Are you involved with them?

[09:51:58.0000] <Krinkle>
that topic/group in particular I mean

[10:11:32.0000] <MikeSmith>
Krinkle: no I'm not personally

[10:11:57.0000] <MikeSmith>
not involved with the work on that

[10:15:07.0000] <annevk>
terinjokes: why would you assume that?

[10:15:33.0000] <terinjokes>
annevk: it seems very strange for that method to throw, since it could just reject the Promise it should be returning

[10:16:25.0000] <terinjokes>
but i could be wrong, since the spec doesn't say what to do, which is why i'm asking

[10:18:47.0000] <annevk>
terinjokes: oh I thought by throw you meant reject the promise

[10:18:50.0000] <annevk>
terinjokes: which it does

[10:18:55.0000] <annevk>
terinjokes: as the spec states

[10:19:50.0000] <terinjokes>
annevk: it only says "Resolve p with a Blob whose contesnts are bytes and type is MIME type."

[10:20:20.0000] <annevk>
terinjokes: which specification are you reading

[10:20:28.0000] <terinjokes>
fetch.spec.whatwg.org

[10:20:50.0000] <annevk>
terinjokes: doesn't step 2 of the algorithm reject?

[10:21:34.0000] <terinjokes>
only if you used the response already

[10:21:47.0000] <terinjokes>
i'm in shim land, not in browser land

[10:22:57.0000] <annevk>
terinjokes: well there's nothing more to it than that

[10:23:08.0000] <terinjokes>
in i sometime don't have a good way to go from the body type i do have to the body type requested

[10:27:08.0000] <annevk>
terinjokes: for FormData I guess there are some pieces missing

[10:27:53.0000] <terinjokes>
FormData -> Blob and FormData -> text

[10:28:01.0000] <terinjokes>
it can fake it if required

[10:33:26.0000] <Krinkle>
MikeSmith: Thx, I filed https://phabricator.wikimedia.org/T91781. Also, a more isolated demo: https://wikimedia.github.io/VisualEditor/

[10:33:46.0000] <Krinkle>
Without the intergration of the PHP Wikipedia backend.

[15:07:33.0000] <MikeSmith>
hey Krinkle, looking now

[15:07:37.0000] <MikeSmith>
me just woke up

[15:08:04.0000] <Krinkle>
MikeSmith: Timezone?

[15:08:11.0000] <Krinkle>
Australia?

[15:13:50.0000] <MikeSmith>
Krinkle: Tokyo

[15:14:38.0000] <MikeSmith>
Krinkle: wait I can't (re)use my wikipedia account name for a mediawiki.org wiki account?

[15:14:48.0000] <MikeSmith>
was going to Cc myself on that bug

[15:15:13.0000] <Krinkle>
MikeSmith: Sure thing. Wikipedia.org accounts are login.wikimedia.org, which is what www.mediawiki.org uses as well

[15:15:15.0000] <Krinkle>
Should be all connected

[15:15:21.0000] <MikeSmith>
oh ok

[15:15:23.0000] <MikeSmith>
cool

[15:15:27.0000] <Krinkle>
It should even log you in automatically by just visiting mediawiki.org

[15:15:45.0000] <Krinkle>
logging into Wikipedia sets a central cookie that mediawiki.org routes via as well.

[15:16:00.0000] <Krinkle>
Then you can OAuth from that to log in to Phabricator (only releases a few weeks ago actually :D)

[15:16:06.0000] <Krinkle>
We used to have Bugzilla with its own user db

[15:16:38.0000] <MikeSmith>
nice

[15:16:54.0000] <MikeSmith>
yeah now I'm authenticated

[15:38:56.0000] <MikeSmith>
Krinkle: "It would save us an unmeasurable amount of technical debt, performance and interface freedom if we can get some of our use cases to be considered in the creation of a future web standard on this."

[15:39:17.0000] <Krinkle>
Too much? :P

[15:39:26.0000] <MikeSmith>
no, it's perfect

[15:39:48.0000] <MikeSmith>
that's pretty much the sales pitch I always give people for why they should invest time working with others on standards

[15:39:57.0000] <Krinkle>
You should see some of the hacks we have. Not specifically for CE, but just in general, getting things native just makes so much sense.

[15:40:16.0000] <MikeSmith>
oh I'd not be surprised

[15:40:28.0000] <Krinkle>
MikeSmith: Having said that, I heard today a colleague of mine was already aware of this task force but thinks it's not going in the direction we want.

[15:40:32.0000] <MikeSmith>
I'm sure some of it is pretty gruesome

[15:40:39.0000] <MikeSmith>
oh

[15:41:17.0000] <Krinkle>
But I hope that even if we can't control the overal direction, just being around will at least give us a voice for the use cases and bugs. Even if it's not implemented the way we want, having it work a differnet way is better than not having it work at all.

[15:41:29.0000] <MikeSmith>
well, getting involved makes it possible to make some course correction happen to take it in the direction you want

[15:41:34.0000] <MikeSmith>
yeah

[15:41:39.0000] <MikeSmith>
bingo

[15:41:40.0000] <MikeSmith>
well put

[15:41:59.0000] <MikeSmith>
that also is true for everybody involved

[15:42:50.0000] <Krinkle>
MikeSmith: I'm not familiar with the concept of a w3 "task force" however. It seems they don't always get somewhere. What's the position of W3 and Whatwg? Or a better question in its place. Like.. what can I expect?

[15:43:00.0000] <Krinkle>
I've seen whatwg create new specs (like Fetch) and quite happy with the process.

[15:43:32.0000] <MikeSmith>
🎵 you can't always get what you want, but if you try sometime you just mind find...

[15:43:32.0000] <zewt>
(sometimes, having something not work at all is better than something that half works; half-solutions can stop people from working on real solutions)

[15:43:40.0000] <Krinkle>
I'm not sure if this will get into a similar process after this, or whether that already started and its now on hiatus as a task force? Basically, how do task forces fit in the bigger picture?

[15:44:00.0000] <MikeSmith>
the "task force" thing is just a label

[15:44:05.0000] <MikeSmith>
it's just people

[15:44:12.0000] <MikeSmith>
it's *always* just people

[15:44:34.0000] <MikeSmith>
it's sometimes the same people under different labels

[15:44:39.0000] <zewt>
MikeSmith: heh, it's always annoying when people post to mailing lists with a company name instead of their name

[15:45:04.0000] <zewt>
(or anywhere)

[15:45:13.0000] <MikeSmith>
the whatwg vs w3c is often not really relevant, because there's people with a foot in both places. always has been

[15:45:15.0000] <Krinkle>
zewt: Good point.

[15:45:40.0000] <MikeSmith>
I was involved with whatwg before I starting working at w3c

[15:46:38.0000] <MikeSmith>
and in terms of who I do most of my communication with, I talk as much with Hixie and annevk as I do with any colleagues at w3c

[15:46:52.0000] <MikeSmith>
zewt: yeah

[15:47:23.0000] <MikeSmith>
zewt: and 100% true too what you said about "sometimes, having something not work at all is better than something that half works; half-solutions can stop people from working on real solutions"

[15:47:37.0000] <MikeSmith>
so let's not yet again do something half-assed here

[15:47:50.0000] <MikeSmith>
I think everybody agrees about that, for the Editing stuff

[15:47:56.0000] <zewt>
(just a general statement, I don't know the specific thing you guys are talking about)

[15:48:29.0000] <Krinkle>
Yeah, I've seen annevk active on both sides for as long as I can remember.

[15:48:30.0000] <MikeSmith>
well, contenteditable as it exists today is a good example of a half solution

[15:48:42.0000] <MikeSmith>
though I guess a lot of people would say it's not even half

[15:49:00.0000] <MikeSmith>
but it is sorta worse than having nothing at all

[15:49:06.0000] <Krinkle>
Yeah, believe me, we were not at all attracted to contenteditable at all. But despite all the pains, we went *back* to it.

[15:49:22.0000] <MikeSmith>
yep

[15:49:40.0000] <MikeSmith>
like Michael Corleone

[15:49:59.0000] <Krinkle>
We had our own Google Docs-like system running for a while and it was great. While it's a bigger curve to get anything, after that you have complete control. Whereas with CE, it's a quick start to get basics and then that's the end of it.

[15:51:09.0000] <zewt>
(the next time I hit shift-delete to cut text to the clipboard and it deletes it without copying because of hardcoded shortcuts by someone who always hits control-x and has never heard of shift-delete -> WW3)

[15:51:41.0000] <Krinkle>
We had to change our fundamental model of how to represent a character numerous times to support additional languages and scripts. code units, grapheme clusters, and the back again.

[15:54:17.0000] <MikeSmith>
Krinkle: interesting, about the character model

[15:54:48.0000] <Krinkle>
MikeSmith: Wikimedia also contributes to Unicode CLDR upstream as our language support is a superset of what the standards define.

[15:54:57.0000] <Krinkle>
It's a fun "problem" to have.

[15:55:31.0000] <Krinkle>
our community cares a lot. And many of them are one of few that even represent their language online with the technical know-how to make it work in their language.

[15:55:34.0000] <MikeSmith>
Krinkle: I bet Richard Ishida from the W3C would love to hear more details about the problems you ran into and how you solved them

[15:55:37.0000] <MikeSmith>
Richard "Mr. Internationalization" Ishida

[15:55:40.0000] <MikeSmith>
r12a

[15:55:44.0000] <Krinkle>
Hehe

[15:56:08.0000] <Krinkle>
I'm mostly echo-ing what I've learned. I imagine he'll want to talk to David Chan and Roan Kattouw from our team.

[15:56:28.0000] <Krinkle>
Who are our language expert and data model expert respectively.

[15:56:43.0000] <MikeSmith>
“many of them are one of few that even represent their language online with the technical know-how to make it work in their language” is really important. You guys are serving a real need there

[15:57:34.0000] <Krinkle>
Don't have the luxury of off the shelve options often. It's simply never been considered. Especially not open-source.

[15:58:19.0000] <Krinkle>
The one thing that we were able to use and has been a great help is CSSJanus. An abandoned Google project to flip stylesheets. Before that we manually ported stylesheets, usually meaning that that part of the word got software updates months later.

[15:59:08.0000] <Krinkle>
Since then forked and renewed by us and volunteers. Now same-day delivery to both and most designers and developers rarely even know it, but everything is mirrored seemlessly.

[15:59:17.0000] <MikeSmith>
we have a long way to go on thisーon giving all the world's writing systems the ability be used as easily on the Web as the ones we all use ourselves and take for granted

[15:59:45.0000] <MikeSmith>
I've not heard of CSSJanus.

[15:59:59.0000] <MikeSmith>
oh wow


2015-03-07
[16:00:05.0000] <MikeSmith>
very goog

[16:00:06.0000] <Krinkle>
https://www.mediawiki.org/wiki/ResourceLoader/Features#Flipping

[16:00:52.0000] <MikeSmith>
nice

[16:01:34.0000] <MikeSmith>
/me finds https://github.com/cssjanus/cssjanus

[16:01:46.0000] <MikeSmith>
... and sees Krinkle in the commit logs

[16:02:03.0000] <Krinkle>
Yeah, we maintain nodejs and php ports now

[16:02:13.0000] <Krinkle>
the original was python

[16:02:14.0000] <Krinkle>
This is my area :D

[16:02:22.0000] <MikeSmith>
Krinkle: do you know Aryeh Gregor?

[16:02:33.0000] <Krinkle>
Rings a bell, though it's been a while.

[16:02:59.0000] <MikeSmith>
yeah he's been involved with work at MediaWiki

[16:03:06.0000] <Krinkle>
Ha, yeah, his nickname Simetrical

[16:03:31.0000] <Krinkle>
His (then, SVN) access predates mine by 2 years

[16:03:32.0000] <MikeSmith>
and he was yeah

[16:03:41.0000] <MikeSmith>
extremely clever guy

[16:03:45.0000] <Krinkle>
2006, 2008

[16:03:58.0000] <MikeSmith>
he also did some fundamental work on reforming the Editing stuff

[16:04:14.0000] <MikeSmith>
he's been mostly busy with other stuff since

[16:04:33.0000] <MikeSmith>
but he sometimes has time go come back and help with feedback and insights now and then

[16:18:21.0000] <MikeSmith>
Krinkle: anyway in case you didn't get to it yet, https://lists.w3.org/Archives/Public/public-editing-tf/ is one place where the discussions happen

[16:18:45.0000] <MikeSmith>
so if you point others there, they'll see some names they'd recognize

[16:19:11.0000] <MikeSmith>
e.g., Johannes Wilm, Olivier Forget, Piotr Koszulinski, Frederico Knabben

[16:19:44.0000] <Krinkle>
/me does not recognise those names

[16:19:53.0000] <MikeSmith>
oh

[16:20:17.0000] <Krinkle>
I know you, anne, Ms2ger, Aryeh, and maybe if I see it a few others.

[16:20:18.0000] <MikeSmith>
they are all developers of widely used rich-text-editing libraries

[16:20:33.0000] <MikeSmith>
yeah those are not whatwg people

[16:20:40.0000] <Krinkle>
Oh, right

[16:21:06.0000] <Krinkle>
I know most of the TC39 folks as well, but that's unrelated.

[16:21:07.0000] <MikeSmith>
the CKEditor guys etc

[16:21:18.0000] <MikeSmith>
ah

[16:21:29.0000] <MikeSmith>
TC39 is a whole nother world of its own

[16:21:33.0000] <Krinkle>
Ah yeah, I know the software (to build compatibility), but didn't know anyone from the (f)ck team.

[16:21:50.0000] <Krinkle>
I see Tab is here as well. Cool!

[16:22:54.0000] <Krinkle>
https://lists.w3.org/Archives/Public/public-editing-tf/2014Jul/0015.html

[16:23:04.0000] <MikeSmith>
yeah TabAtkins rocks

[16:23:38.0000] <MikeSmith>
ah cool to see that contact from that Wikimedia PM

[16:24:31.0000] <Krinkle>
he's the product manager of the VE team. I work with him most of my time (when I'm not doing MediaWiki platform and CI testing infra things)

[16:24:48.0000] <MikeSmith>
I see

[16:26:57.0000] <Krinkle>
Alrighty. I'm subscribed now. Pff, another mailing list :-)

[16:44:12.0000] <MikeSmith>
heh

[17:09:55.0000] <TabAtkins>
😀

[22:38:00.0000] <MikeSmith>
the twitter thread from https://twitter.com/matthew_d_green/status/573673281338806275 is interesting

[22:38:12.0000] <MikeSmith>
make that https://twitter.com/davidcadrian/status/573672598384607233

[22:38:30.0000] <MikeSmith>
https://twitter.com/matthew_d_green/status/573678857007558656

[22:38:42.0000] <MikeSmith>
"you get one mega STSLSSL state machine that's not compliant with any RFC"

[23:39:38.0000] <annevk>
It's easy to blame the implementations, but the RFCs not dealing with the reality of implementers is frustrating too

[23:42:31.0000] <MikeSmith>
annevk: seems to be the rule for RFC development, rather than the exception

[23:43:28.0000] <MikeSmith>
I wonder when they're going to get around to realizing that their spec-development process/culture is doing harm and needs some serious change

[23:45:01.0000] <MikeSmith>
with this SSL stuff it seems pretty like it may have been the case that implementations copied each others brokenness because none of them could figure out what the spec was supposed to be requiring

[23:45:59.0000] <MikeSmith>
and because of the high cost imposed by the RFC-development process/culture, and the big disincentives to ask for refinements/fixes, then this is what we end up with

[10:13:06.0000] <ccat>
.

[10:13:10.0000] <ccat>
(sorry, no Bugzilla acct) -- https://dom.spec.whatwg.org/ -- 4.4 Interface Node -- suggest: "Each [ROOT] node has an associated node document, set upon creation, that is a document". -- "Each [ROOT] node also has an associated base URL." -- reason: 4.4 lists many types of nodes but only root has doc? -- Good Luck!

[10:13:11.0000] <ccat>
.

[10:13:42.0000] <Ms2ger>
What

[10:22:41.0000] <ccat>
Ms2ger: ?

[10:24:35.0000] <Ms2ger>
What are you trying to say?

[10:28:55.0000] <ccat>
Ms2ger: the first descriptions of node in 4.4 seem wrong, and was suggesting how maybe to correct them

[10:29:21.0000] <Ms2ger>
Oh

[10:29:40.0000] <Ms2ger>
You're trying to say that you think only root nodes have an associated node document?

[10:31:29.0000] <ccat>
Ms2ger: given how node-doc and doc itself are defined (via links), yes

[10:32:03.0000] <Ms2ger>
Yeah, that's not true

[10:33:42.0000] <ccat>
Ms2ger: ANY node can have a doc?

[10:34:09.0000] <ccat>
-- node-doc

[10:38:45.0000] <Ms2ger>
No "can have", "has"

[10:38:45.0000] <ccat>
Ms2ger: ok, maybe not JUST the root, maybe a few others like eg, script, iframe  --- but not most nodes... ?

[10:38:50.0000] <Ms2ger>
That's what that sentence says

[10:41:25.0000] <ccat>
Ms2ger: EVERY node HAS a node-doc AND a base-URL?

[10:42:04.0000] <Ms2ger>
Yes

[10:42:22.0000] <Ms2ger>
Not distinct ones, note

[10:42:47.0000] <Ms2ger>
The node document of a node is just what .ownerDocument returns

[10:43:13.0000] <ccat>
i.e. the parent doc that contains it?

[10:43:18.0000] <Ms2ger>
Yes

[10:43:26.0000] <ccat>
oh, sorry

[10:44:11.0000] <Ms2ger>
Base URL should be only associated with Documents, but xml:base still exists

[11:04:04.0000] <ccat>
Ms2ger: ok, my correction is invalid, but might wording be a little better as: "Each node is associated with a root node-document at node creation; which is the parent document that contains the node"

[11:06:10.0000] <ccat>
-- "has" seems to imply "contains" rather than just "possesses"

[11:09:04.0000] <ccat>
Ms2ger: -- ^^ actually "has" and "possesses" both seem to imply "contains" rather than just association-with

[13:00:22.0000] <ccat>
.

[13:00:40.0000] <ccat>
(sorry, no Bugzilla acct) -- https://developers.whatwg.org/tabular-data.html#attr-table-sortable -- google chromebook browser shows warning-icon for "This page includes script from unauthenticated sources."  (and pictures do not load) -- Good Luck!

[13:00:44.0000] <ccat>
.

[15:21:02.0000] <ccat>
.

[15:23:45.0000] <ccat>
"Thus, in an HTML document, document.getElementsByTagName("FOO") will match FOO elements that are not in the HTML namespace, and foo elements that are in the HTML namespace, but not FOO elements that are in the HTML namespace."

[15:24:31.0000] <ccat>
-- this seems to say that you cannot get HTML elements with uppercase tags -- which seems rather wrong!

[15:32:33.0000] <Ms2ger>
With document.getElementsByTagName? No

[15:32:47.0000] <Ms2ger>
Note that <DIV>.localName == 'div'

[15:36:36.0000] <ccat>
Ms2ger: y, but it says not GET the FOO elements that are in the HTML namespace, and which is what that DIV would be

[15:36:51.0000] <Ms2ger>
It isn't

[15:39:28.0000] <ccat>
Ms2ger: why? confused

[15:43:38.0000] <ccat>
Ms2ger: so document.getElementsByTagName("DIV") should find nothing if HTML page is all UC ?


2015-03-08
[16:06:07.0000] <MikeSmith>
Hixie: 👆

[16:06:56.0000] <MikeSmith>
ccat: I reckon Ms2ger is sleeping by now

[16:07:16.0000] <MikeSmith>
or nearly

[16:08:07.0000] <ccat>
MikeSmith: ok, ty -- want to take over? :)

[16:12:37.0000] <MikeSmith>
nope

[16:13:06.0000] <MikeSmith>
you were just talking to the one guy who could explain it to you better than anybody

[16:13:38.0000] <ccat>
MikeSmith: : (

[16:14:09.0000] <MikeSmith>
anyway it's the weekend

[16:14:30.0000] <MikeSmith>
Hixie might roll around at some point but my guess is he's busy doing something else fun

[16:15:13.0000] <MikeSmith>
so you might have better luck trying again during the hours of overlap between CET/UK time and US/West

[16:15:16.0000] <ccat>
MikeSmith: ok, ty

[16:15:50.0000] <MikeSmith>
ccat: anyway you're doing the right thing

[16:16:09.0000] <MikeSmith>
there are plenty of places where the wording in the spec could be refined

[16:16:38.0000] <MikeSmith>
and Hixie cares a lot about making it as clear and unambiguous as possible

[16:17:17.0000] <ccat>
MikeSmith: found one (above) but this seems like an error -- then again so did the last one!

[16:24:18.0000] <MikeSmith>
ccat: in general you're not likely to find errors in the specーnot for this kind of stuff at least

[16:25:03.0000] <MikeSmith>
so when you find something that looks like an error it's much more likely that the problem is just that the spec needs to be reworded to make it more clear

[16:25:10.0000] <MikeSmith>
is this the DOM spec or HTML?

[16:26:32.0000] <MikeSmith>
oh about https://developers.whatwg.org/tabular-data.html#attr-table-sortable yeah that's a mixed-content problem that needs to be fixed

[16:26:40.0000] <ccat>
https://dom.spec.whatwg.org/#dom-document-getelementsbytagname

[16:26:56.0000] <MikeSmith>
I can't remember now who took over work on the generating the developer edition

[16:27:25.0000] <ccat>
me: "it says not GET the FOO elements that are in the HTML namespace, and which is what that DIV would be"

[16:27:35.0000] <MikeSmith>
ccat: ah yeah so the DOM was written my Ms2ger

[16:27:44.0000] <MikeSmith>
in part

[16:28:19.0000] <MikeSmith>
annevk is writing/maintaining it so you could ask him later too

[16:29:15.0000] <MikeSmith>
s/the DOM was written my Ms2ger/the DOM was spec written partly by Ms2ger/

[16:31:24.0000] <ccat>
ok, ty

[16:33:05.0000] <MikeSmith>
strugee: if you're the one maintaining developers.whatwg.org now, there's a mixed-content problem at https://developers.whatwg.org/tabular-data.html#tabular-data which ccat noticed

[16:33:52.0000] <MikeSmith>
strugee: "The page at 'https://developers.whatwg.org/tabular-data.html' was loaded over HTTPS, but requested an insecure stylesheet 'http://fonts.googleapis.com/css?family=Droid+Serif:regular,italic,bold'."

[16:34:35.0000] <MikeSmith>
strugee: seems like that URL cna just be changed to the https equivalent

[16:37:26.0000] <ccat>
strugee: also insecure pictures

[16:52:37.0000] <smaug____>
MikeSmith: you gave me a good laugh: "in general you're not likely to find errors in the spec" :)

[16:52:51.0000] <MikeSmith>
smaug____: well you know what I mean

[16:53:15.0000] <MikeSmith>
smaug____: I wouldn't say that to you :)

[16:53:58.0000] <MikeSmith>
I should have written, "in general unless you're smaug or bz you're not likely to find errors in the spec"

[16:54:28.0000] <smaug____>
well, I hope everyone implementing something from specs review them first

[16:54:38.0000] <smaug____>
but I know that isn't actually happening

[16:56:18.0000] <jgraham>
ccat: If you parse <FOO> it ends up as <foo> in the DOM

[16:56:33.0000] <jgraham>
You can only get FOO by using createElementNS

[16:56:46.0000] <jgraham>
(FOO in the HTML namespace, that is)

[16:57:31.0000] <jgraham>
So the fact that getElementsByTagName won't find elements that are very difficult to create isn't a problem

[16:57:42.0000] <jgraham>
Because they ~never actually exist in real pages

[16:58:11.0000] <jgraham>
smaug____: Nice to know you still have a sense of humour

[16:58:22.0000] <ccat>
jgraham: :)

[16:58:27.0000] <ccat>
jgraham: but "spec" says "but not FOO elements that are in the HTML namespace" , which should mean <FOO>

[16:58:38.0000] <caitp>
does it ever make you angry that it's so terribel

[16:58:43.0000] <caitp>
sp

[16:59:05.0000] <jgraham>
ccat: Yes, but you can only create that using a createElementNS call from the DOM

[16:59:18.0000] <jgraham>
Every other way of creating HTML elements lowercases them

[16:59:46.0000] <ccat>
jgraham: what about "<HTML><FOO></HTML>  ?

[17:00:13.0000] <jgraham>
ccat: That is identical to <html><foo></html> -> it gets lowercased by the parser

[17:01:19.0000] <jgraham>
Specifically it will create a DOM like <html><head></head><body><foo></foo></body></html>

[17:07:02.0000] <jgraham>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3441 <- this example might be instructive although the DOM view gets the case wrong. The w() function writes to the text box at the bottom.

[17:07:06.0000] <jgraham>
/me sleep

[17:08:21.0000] <jgraham>
annevk: BTW it seems to me that Aryeh

[17:09:09.0000] <jgraham>
's permissions argument is rather strong. AFAICT the main effect of the change you propose is to make the UX for these things over HTTP sufficiently unappealing that more people with use HTTPS

[17:09:21.0000] <jgraham>
Which is fine, but isn't the way it's prevented

[17:09:33.0000] <jgraham>
I might have misunderstood though

[17:10:28.0000] <ccat>
jgraham: ok, then "list of elements with local name localName" : "Whose namespace is the HTML namespace and whose local name is localName converted to ASCII lowercase."  should be  "Whose namespace is the HTML namespace and whose local name is localName (stored as lowercase ASCII when element is created)."

[17:21:53.0000] <ccat>
jgraham: still, this is the way it seems to read "Thus, in an HTML document, document.getElementsByTagName("FOO") will match FOO elements that are not in the HTML namespace (xml<FOO>), and foo elements that are in the HTML namespace (<HTML><foo>), but not FOO elements that are in the HTML namespace (<HTML><FOO>)."

[17:28:52.0000] <ccat>
jgraham: also, document.getElementsByTagName("FOO") is from point of view of person, not parser, so tagname "FOO" would mean <FOO>

[19:05:28.0000] <ccat>
.

[19:08:36.0000] <ccat>
q: is there a simple description on how to create a sortable table?  the standard doc is (overly) complex and somewhat confusing, or does not work (maybe when done via chrome devtools)

[12:28:07.0000] <ccat>
.

[12:28:10.0000] <ccat>
Thus, in an HTML document, document.getElementsByTagName("FOO") will match FOO elements that are not in the HTML namespace [as xml <FOO>], and foo elements that are in the HTML namespace [as <HTML><foo>], but not FOO elements that are in the HTML namespace [as <HTML><FOO>]. ---- Is this correct?

[12:28:19.0000] <ccat>
.

[12:35:17.0000] <caitp->
which FOO elements in the html namespace?

[12:39:25.0000] <ccat>
caitp-: that is from docs -- so it implies any element <FOO> in an html page

[12:39:43.0000] <ccat>
-- THE docs

[12:47:21.0000] <ccat>
caitp-: ?

[16:05:59.0000] <MikeSmith>
ccat: you can try writing some simple test cases, if you want to tests what UAs actually do, and compare it to the wording in the spec

[16:11:36.0000] <ccat>
MikeSmith: will have to try later as chrome-devtools converts tags to LC immediately

[16:16:21.0000] <MikeSmith>
?

[16:16:55.0000] <MikeSmith>
ccat: you can just write a jsbin or whatever

[16:17:10.0000] <MikeSmith>
there may even be a test in the wpt testsuite for this already

[16:17:21.0000] <ccat>
MikeSmith: what is jsbin?

[16:17:37.0000] <MikeSmith>
like jsfiddle, codepen

[16:18:06.0000] <MikeSmith>
it lets you interactively edit js+html+css and see the results

[16:18:22.0000] <MikeSmith>
somewhat like using devtools in a browser

[16:18:43.0000] <MikeSmith>
except that the test case gets a URL that you can share

[16:19:21.0000] <MikeSmith>
ccat: anyway you may find a relevant test in https://github.com/w3c/web-platform-tests/tree/master/dom/nodes

[16:19:52.0000] <MikeSmith>
and if you don't, you should contribute one for this later

[16:20:12.0000] <ccat>
MikeSmith: just tried in jsf but devtools shows tag as LC

[16:21:09.0000] <MikeSmith>
dunno what to say about that

[16:21:18.0000] <MikeSmith>
btw you can also use Live DOM Viewer

[16:21:30.0000] <MikeSmith>
http://software.hixie.ch/utilities/js/live-dom-viewer/

[16:25:16.0000] <jgraham>
Everything converts HTML tags to lowercase. That's really the point.

[16:25:36.0000] <jgraham>
/me is having difficulty understanding the remaining point of confusion

[16:27:03.0000] <jgraham>
https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state is the lowercasing in the parser (well the tokenizer)

[16:28:05.0000] <jgraham>
"Any other start tag" https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inforeign has some (non-HTML) cases where the lowercasing is undone and some alternate canonical case is used instead

[16:28:38.0000] <jgraham>
https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inforeign has ascii lowercasing

[16:29:00.0000] <jgraham>
https://dom.spec.whatwg.org/#dom-document-createelementns does *not* have ascii lowercasing

[16:30:35.0000] <jgraham>
https://dom.spec.whatwg.org/#dom-element-getelementsbytagname references https://dom.spec.whatwg.org/#concept-getelementsbytagname which converts the input argument to ascii lowercase in HTML documents

[16:31:16.0000] <jgraham>
https://dom.spec.whatwg.org/#dom-element-getelementsbytagnamens references https://dom.spec.whatwg.org/#concept-getelementsbytagnamens which does *not* do any conversion

[16:31:44.0000] <jgraham>
That's everyting there is to know about this

[16:32:56.0000] <jgraham>
Sorry, first "has acscii lowercasing" link should have been https://dom.spec.whatwg.org/#concept-getelementsbytagnamens

[16:33:43.0000] <jgraham>
Ugh *https://dom.spec.whatwg.org/#dom-document-createelement

[16:33:56.0000] <jgraham>
Third time lucky, it seems

[16:36:44.0000] <ccat>
jgraham: ...

[16:47:21.0000] <ccat>
MikeSmith: live-dom-viewer shows dom tags as UC !

[16:48:12.0000] <MikeSmith>
that's just a representation

[16:48:48.0000] <MikeSmith>
that view iss not meant to accurately representing the case

[16:48:59.0000] <MikeSmith>
it's just a rendering

[16:49:52.0000] <MikeSmith>
ccat: I guess you need to look at the innerHTML view there

[16:50:12.0000] <MikeSmith>
if you want to confirm what's happening with the case

[16:51:19.0000] <MikeSmith>
but if you read the links that jgraham posted then like he said, it's hard to see what else needs to be said that's not already stated there

[16:53:20.0000] <ccat>
MikeSmith: (and jgraham) -- y, to LC at parsing -- BUT...

[16:54:51.0000] <ccat>
MikeSmith: is this considered HTML namespace  <HTML> here? <HTML>


2015-03-09
[17:02:02.0000] <ccat>
jgraham: is this considered HTML namespace  <HTML> here? <HTML>

[17:07:42.0000] <jgraham>
ccat: If you don't understand namespaces, then it's not surprising you're having difficulty with all of this.

[17:08:57.0000] <jgraham>
http://en.wikipedia.org/wiki/XML_namespace might be some good background reading

[17:09:54.0000] <jgraham>
The important thing to know is that although HTML is not XML, the HTML DOM still has a concept of namespaces, and under normal circumstances, all elements in a HTML document end up in the HTML namespace

[17:33:02.0000] <ccat>
jgraham: the difference between R in insulation, R in chemestry, and R in electronics, but again...

[17:33:09.0000] <ccat>
jgraham: is this considered HTML namespace  <HTML> here? <HTML>

[17:34:46.0000] <ccat>
jgraham: (sorry, was called away)

[17:54:26.0000] <MikeSmith>
ccat: for text/html documents, the notion of the HTML namespace has relevance only after the document is parsed

[17:54:47.0000] <ccat>
MikeSmith: ohhh, ok

[17:55:16.0000] <MikeSmith>
there's no way to specify the HTML namespace in the serialized document, and no need to

[17:56:14.0000] <MikeSmith>
the parser automatically just puts all the elements into the HTML namespace in the DOM

[17:57:13.0000] <ccat>
MikeSmith: so this is NOT considered to create HTML namespace  <HTML> here? <HTML>

[17:58:01.0000] <MikeSmith>
man read what I said there and what jgraham said above

[17:58:21.0000] <MikeSmith>
that question basically doesn't mean anything

[17:58:32.0000] <MikeSmith>
that question you just asked

[18:00:25.0000] <ccat>
MikeSmith: sorry, the "parser" sentence was not on the screen yet

[18:04:07.0000] <ccat>
MikeSmith: the problem is: "collection = document . getElementsByTagName(localName) ...  (Matches case-insensitively against elements in the HTML namespace within an HTML document.) --- which means getE("TAG") will find element <tag>

[18:23:47.0000] <MikeSmith>
ccat: why is that a problem

[18:27:40.0000] <ccat>
MikeSmith: ok, think the real problem is that the doc starts by referring to an HTML doc with JS code getE(), which SOUNDS like user's point of view -- but then instead of just specifying returned results as tag-examples, it abruptly "switches" to engine's point of view and describes them by NAMESPACE

[18:45:24.0000] <ccat>
jgraham: ^^ ?

[19:05:13.0000] <ccat>
MikeSmith: jgraham : sorry if you responded -- irc webclient reloaded and lost all info

[19:06:20.0000] <MikeSmith>
ccat: didn't respond

[19:07:34.0000] <ccat>
MikeSmith: did you see the problem with the description though?

[19:08:51.0000] <MikeSmith>
ccat: no I don't really. This stuff is pretty fundamental to understanding the entire spec. If a reader doesn't understand how this works, then there are lots of other places in the spec that are going to seem confusing I guess

[19:09:27.0000] <MikeSmith>
ccat: so I don't know what else to add except that if you think the spec doesn't make all this clear enough, the thing to do is to propose some specific wording that you think would make it more clear

[19:13:09.0000] <ccat>
MikeSmith: trying to do that, but first needed to understand what was the intended meaning of the doc-note.  Think i got that now

[19:18:59.0000] <ccat>
MikeSmith: "Thus, in an HTML document," if you follow the <<HTML document>> link back 2 levels it goes to Node -- so what is a file of HTML called in the docs if not a HTML document?

[19:21:23.0000] <MikeSmith>
ah

[19:21:38.0000] <MikeSmith>
so yeah, it's probably not called anything in the spec

[19:22:20.0000] <MikeSmith>
ccat: this is the DOM spec, you mean?

[19:23:09.0000] <MikeSmith>
at least I know in the HTML spec, there's really know term defined for "a file of HTML"

[19:23:43.0000] <MikeSmith>
both specs pretty much entirely refer to the DOM representation of a document

[19:24:14.0000] <MikeSmith>
"HTML document" in the HTML spec certainly always means the parsed document in the DOM

[19:24:58.0000] <MikeSmith>
I guess it would be an improvement if it were to define the term "serialized HTML document"

[19:26:20.0000] <ccat>
https://dom.spec.whatwg.org/#dom-document-getelementsbytagname -- y, dom... and THAT is probably the whole issue -- dom is internal (i.e namespace) -- though html-doc to normal reader is a text file

[19:27:25.0000] <MikeSmith>
ccat: true

[19:27:34.0000] <MikeSmith>
but the specs are not written for normal readers

[19:27:39.0000] <MikeSmith>
not by a long shot

[19:27:57.0000] <MikeSmith>
this is the problem with trying to write a spec that caters both the implementors and to authors

[19:28:02.0000] <MikeSmith>
the authors lose

[19:28:21.0000] <MikeSmith>
the result is tons of confusion on the part of authors because of stuff like this

[19:28:58.0000] <ccat>
MikeSmith: so it is NOT an HTML ref for the USER (html writer) but for the IMPLEMENTER (html engine maker)

[19:29:06.0000] <MikeSmith>
yes

[19:29:14.0000] <MikeSmith>
Hixie might try to tell you otherwise

[19:29:24.0000] <ccat>
MikeSmith: author meaning html-user

[19:29:59.0000] <MikeSmith>
ccat: yeah you're much better off using guides like MDN

[19:31:59.0000] <MikeSmith>
ccat: and also you can contribute to MDN to help make it better

[19:32:17.0000] <MikeSmith>
for specific cases like this, you can make refinements to MDn

[19:32:26.0000] <MikeSmith>
directly, because it's just a Wiki basically

[19:33:17.0000] <MikeSmith>
and it has experienced people who are editors and can review the changes and make fixes is something you contributed is wrong in some way

[19:35:08.0000] <ccat>
MikeSmith: well... tried mdn (mozilla?) but that's not an Authority, w3 but too in-progress, then found whatwg who says w3 has gone astray and isn't up to date with the world -- and now back to MDN    :D

[19:39:31.0000] <Domenic>
My strategy is to just learn how to read implementation terms

[19:41:17.0000] <MikeSmith>
Domenic: I'm not sure I'd recommend that strategy to most authors. I'm not sure how much benefit it buys them relative to the cost in time needed to learn it

[19:41:24.0000] <MikeSmith>
but I could be wrong

[19:41:54.0000] <Domenic>
Yeah, I think it only makes sense if you're the kind of nerd who would enjoy the learning experience anyway

[19:42:00.0000] <Domenic>
Not for just getting your job done

[19:42:16.0000] <MikeSmith>
ccat: http://discourse.specifiction.org/ is another really good discussion forum for asking questions and making proposals and getting feedback

[19:42:29.0000] <MikeSmith>
Domenic: sure

[19:43:04.0000] <ccat>
i tried to do that with table "sortable" and got nowhere... unless that is because "sortable" is not yet widely supported so i'm told :D -- i.e doomed from the start?

[19:43:16.0000] <MikeSmith>
I think there are plenty of people like that, who value having the knowledge and like spending time on the learning

[19:43:37.0000] <MikeSmith>
ccat: yeah sortable is a fiction at this point

[19:43:51.0000] <ccat>
a belated aggggggg

[19:44:47.0000] <MikeSmith>
I personally like sortable a lot but for browser vendors it's not a priority to implement it

[19:45:15.0000] <MikeSmith>
I think it's safe to say at this point that it's very unlikely to get implemented natively in any browser any time soon

[19:45:20.0000] <ccat>
consider: "Thus, in an HTML document, document.getElementsByTagName("FOO")" -- so is document.getElementsByTagName() "supposed" to mean a root node with child f()?

[19:45:59.0000] <MikeSmith>
sorry I don't know what that question means

[19:47:18.0000] <MikeSmith>
ccat: btw http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/ is very much worth reading

[19:47:28.0000] <MikeSmith>
and approachable

[19:48:41.0000] <MikeSmith>
"As a web developer, learning the internals of browser operations helps you make better decisions and know the justifications behind development best practices."

[19:52:27.0000] <ccat>
MikeSmith: nm the q. Conclusion is the doc is just awkwardly worded unless you know what it means.  ---   ...in which case you don't need it anyway :D

[19:53:11.0000] <MikeSmith>
fair enough

[19:53:29.0000] <ccat>
when was this decided: "Document nodes are simply known as documents"

[19:54:03.0000] <MikeSmith>
in the 1990s

[19:54:19.0000] <MikeSmith>
as far as discussions about the specs goes

[19:54:53.0000] <MikeSmith>
ccat: anyway the thing is you really do have to read the entire spec

[19:55:59.0000] <MikeSmith>
the parts of the spec aren't meant to be completely clear to a reader who hasn't done that

[19:57:40.0000] <MikeSmith>
and the spec can't really repeat clarifying statements in every single section to remind readers what's meant by, e.g., "document"

[19:58:12.0000] <MikeSmith>
it would just be annoyingly repetitive and unwieldy

[20:03:15.0000] <ccat>
MikeSmith: true, but saying "in the html doc the function docu.F() returns.." really does imply a text html doc because where else can docu.F() exist?  (unless as a node with function-object?)

[20:25:41.0000] <ccat>
where is the tag-type, the zzz in <ZZZ>, in this IDL? - https://html.spec.whatwg.org/multipage/dom.html#elements-in-the-dom

[20:29:11.0000] <MikeSmith>
ccat: I don't know what "tag-type" is

[20:29:22.0000] <MikeSmith>
nor what you mean by "the zzz in <ZZZ>"

[20:30:39.0000] <MikeSmith>
but IDL pretty much has nothing to do with start tags or end tags

[20:31:00.0000] <MikeSmith>
... and dunno what else you might mean by "tag"

[20:37:39.0000] <ccat>
MikeSmith: the type of tag, like br, a, li,  -- (sorry forgot HTML tags are all LC ....now)

[20:39:21.0000] <ccat>
-- interface HTMLElement : Element --- "which all the HTML elements' interfaces inherit"

[20:40:24.0000] <ccat>
MikeSmith: the IDL in question ^^

[20:49:05.0000] <MikeSmith>
yeah still I have no idea what you mean by "the type of tag"

[20:50:18.0000] <MikeSmith>
the HTMLElement interface doesn't expose any information about the name of element

[20:50:32.0000] <MikeSmith>
other interfaces inherit from HTMLElement

[20:53:03.0000] <MikeSmith>
e.g, when the parser encounter a <meta> tag in serialized document, it creates an HTMLMetaElement instance in the DOM

[20:57:06.0000] <MikeSmith>
maybe what you're looking for is .tagName?

[20:57:24.0000] <MikeSmith>
or .nodeName

[20:58:14.0000] <MikeSmith>
lor lcoalname

[20:58:25.0000] <MikeSmith>
localName

[21:02:26.0000] <ccat>
MikeSmith: kind of tag? in   <p> sometext <br> moretext <p>    the p's are different tags; the p's and br are different kinds/types of tag? --- y, tag-name or node-name

[21:03:57.0000] <MikeSmith>
"the p's are different tags"? different from what? different from each other? different from the <br> tag?

[21:05:07.0000] <MikeSmith>
in HTML a "<p>" in serialized document is just called "a start tag named p"

[21:05:37.0000] <MikeSmith>
the spec doesn't talk anywhere about the "type" of the tag

[21:06:07.0000] <MikeSmith>
it's either a start tag or an end tag, with a name

[21:08:32.0000] <MikeSmith>
looking now, I see「A start tag whose tag name is "meta"」is the exact verbatim formulation the spec uses

[21:09:12.0000] <MikeSmith>
"Tags contain a tag name, giving the element's name. HTML elements all have names that only use alphanumeric ASCII characters. In the HTML syntax, tag names, even those for foreign elements, may be written with any mix of lower- and uppercase letters that, when converted to all-lowercase, matches the element's tag name; tag names are case-insensitive."

[21:09:40.0000] <MikeSmith>
from https://html.spec.whatwg.org/multipage/syntax.html#elements-2

[21:14:06.0000] <ccat>
MikeSmith: as in... an html webpage uses many different kinds of tags --- sorry, should have used the proper term tagName in the first place, but it did not come to mind and used the informal description "type of tag"

[21:16:23.0000] <ccat>
MikeSmith: -- maybe because that IDL does have an (unrelated?) itemType

[21:25:55.0000] <ccat>
-- either way, cant find it on the IDL

[21:54:55.0000] <MikeSmith>
ccat: huh I have no idea what itemType is

[21:55:04.0000] <MikeSmith>
for teh ELement interface?

[21:55:40.0000] <MikeSmith>
ah

[21:55:53.0000] <MikeSmith>
HTMLElement I see

[21:56:24.0000] <MikeSmith>
I don't think UAs support that

[21:56:42.0000] <MikeSmith>
the microdata api

[21:56:52.0000] <MikeSmith>
or maybe gecko still ships it

[21:57:39.0000] <MikeSmith>
another example of something that personally seems really useful to me but that browser projects don't care much about

[21:58:06.0000] <ccat>
MikeSmith: y, the element IDL -- but for tagName, did not see where tagName is specified, and was just wondering

[21:59:53.0000] <ccat>
MikeSmith: oops, the HTMLelement IDL -- a different thing :)

[00:55:45.0000] <zcorpan>
https://www.chromestatus.com/metrics/feature/timeline/popularity/195 \o/

[00:58:46.0000] <Domenic>
itshappening.gif

[01:17:41.0000] <annevk>
nice

[01:18:09.0000] <annevk>
chromestatus always fails on first load in Firefox, seems like you need to have some resources cached...

[01:26:45.0000] <roc>
jgraham: If I was to add a web-platform test for MouseEvent.offsetX/Y, where would I add it and what would I call it?

[01:44:02.0000] <annevk>
roc: you could add one here https://github.com/w3c/web-platform-tests/tree/master/DOMEvents

[01:44:22.0000] <annevk>
roc: mouseevent-offsetxy.html or some such I guess

[01:44:41.0000] <annevk>
And at some point we should rename DOMEvents to ui-events

[03:17:17.0000] <jgraham>
roc: annevk's suggestions seem reasonable

[03:29:14.0000] <roc>
jgraham: are the comments in README.md still true, that to get web-platform tests into the tree we have to submit to the W3C first and then wait for an import?

[03:32:05.0000] <Ms2ger>
No

[03:35:05.0000] <jgraham>
roc: No, if you want to commit directly to the gecko tree we have a script to upstream those changes. It will be more widely advertised once it has proven itself a little better ;)

[04:23:55.0000] <ccat>
.

[04:24:04.0000] <ccat>
jgraham: Hixie: re: https://dom.spec.whatwg.org/#dom-document-getelementsbytagname -- Conclusion: ok, the note is about the HTML dom-doc and NAMESPACE, not the HTML text-doc, but saying it like " IN the html document the function docu.getE("<FOO>") will..." really does imply the text html-doc because what else could docu.getE() exist IN ? (unless it's a node with child function-object?) -- Good Luck!

[04:24:06.0000] <ccat>
.

[04:25:31.0000] <ccat>
PS: thanks for the time MikeSmith and jgraham :)

[04:25:38.0000] <ccat>
.

[04:42:25.0000] <MikeSmith>
ccat: cheers

[04:43:42.0000] <ccat>
MikeSmith: :) -- BTW what about https://www.webplatform.org/ docs?

[05:29:19.0000] <beverloo>
annevk, fwiw, we have implementation storage limits on pretty much anything

[05:29:31.0000] <beverloo>
it'll be very high and unlikely to get in the developer's way

[05:29:41.0000] <beverloo>
and we'll have data on how often people hit it

[05:30:12.0000] <annevk>
Yeah I don't really see the problem, as in that it's already a thing you need to account for with structured clones in various APIs

[05:30:32.0000] <beverloo>
I don't think we have a problem :)

[05:30:42.0000] <beverloo>
I'm OK with a no-change solution

[05:30:51.0000] <annevk>
good

[05:33:46.0000] <jgraham>
annevk: BTW I didn't really feel like people addressed Aryeh's concern about the persistent permission thing. If a site uses these permissions all the time for something rather normal then users will expect to be granting them all the time so lack of persistance won't change much (even moreso if the permissions last for a whole session rather than a single API call; do they?) So it seems like the only real value of this change is making the UX for p

[05:33:52.0000] <jgraham>
... bad that sites feel like they have to use HTTPS instead. Which is a valid strategy ofc, albeit a risky one

[05:36:05.0000] <annevk>
jgraham: yeah that is a valid point, hmm

[05:46:36.0000] <annevk>
jgraham: a bit of that sentence got dropped btw

[05:47:39.0000] <jgraham>
"So it seems like the only real value of this change is making the UX for permissions over HTTP so...", perhaps?

[05:56:57.0000] <annevk>
jgraham: I think for geolocation Aryeh might be correct, not convinced for Fullscreen and Pointer Lock

[05:57:40.0000] <annevk>
jgraham: for geolocation the attacker would just inject a side channel, but exploiting Fullscreen and Pointer Lock actually requires a different site to be presented

[06:01:35.0000] <jgraham>
If you have something like a game running in fullscreen you can probably replace the "end game" function with something that doesn't actually exit fullscreen. I'm not sure how to get people to go from there to the fake site though.

[06:02:28.0000] <jgraham>
I mean the fake banking site or whatever

[06:15:51.0000] <zcorpan>
jgraham: maybe it could have a browser written in JS to let the user continue browsing

[06:22:42.0000] <jgraham>
Haha, just compile Firefox in emscripten :)

[07:04:30.0000] <adrianr1>
hiya

[07:16:47.0000] <MikeSmith>
jgraham: Ms2ger so the w3c systeam is trying to install the needsinfo-flag extension but they ran into an error

[07:16:59.0000] <MikeSmith>
who should we talk to?

[07:17:07.0000] <jgraham>
MikeSmith: glob, I guess

[07:17:11.0000] <MikeSmith>
hai

[07:17:14.0000] <Ms2ger>
^

[07:17:25.0000] <MikeSmith>
can I ping glob on #developers?

[07:17:49.0000] <jgraham>
MikeSmith: Yeah, or there's a bugzilla channel somewhere

[07:20:10.0000] <jgraham>
#bugzilla in fact

[07:20:42.0000] <jgraham>
/me decides it probably wasn't to blame for the random kernel panic he got the moment he switched to it

[07:45:52.0000] <beverloo>
annevk, let me know if there's anything I can do to make the anolis->bikeshed move easier. It's near impossible to review

[07:48:07.0000] <annevk>
beverloo: can you put up a copy somewhere or did you already do that?

[07:50:03.0000] <beverloo>
https://secure.peter.sh/notifications.html

[07:50:38.0000] <Ms2ger>
peter.sh? Why not peter.py?

[07:50:55.0000] <beverloo>
less exploitable?

[07:52:45.0000] <MikeSmith>
heh

[07:54:37.0000] <annevk>
beverloo: it seems dfn.js does not work though that's a general bikeshed problem

[07:54:53.0000] <annevk>
beverloo: although actually, we made that work for url.spec.whatwg.org

[07:54:59.0000] <beverloo>
I don't know what dfn.js does?

[07:55:11.0000] <beverloo>
I looked at the url spec quite a bit, happy to try to figure out how it's working there

[07:55:15.0000] <annevk>
beverloo: when you click on a definition, it shows you a popup with links to where the definition is used

[07:55:41.0000] <beverloo>
aah, I see. yeah, I did notice that

[08:09:35.0000] <annevk>
"The data attribute's getter must return a structured clone of notification's data." seems like this needs some caching to be defined...

[08:10:29.0000] <annevk>
beverloo: other than dfn.js I can't spot anything obviously wrong

[08:11:21.0000] <beverloo>
I'll have a look at the dfn.js issue later today

[08:11:41.0000] <annevk>
beverloo: at the top it says "Version History" and doesn't use a distinct <dd> for the Twitter account

[08:41:03.0000] <MikeSmith>
thanks mathiasbynens

[08:42:28.0000] <MikeSmith>
annevk: so it looks like we got the needsinfo flag working now in w3c bugzilla

[08:42:47.0000] <MikeSmith>
thanks to glob and to laurent from the w3c systems team

[08:43:16.0000] <MikeSmith>
mathiasbynens and I just tested it

[08:43:20.0000] <annevk>
cool beans

[08:43:59.0000] <mathiasbynens>
MikeSmith: \o/

[08:44:24.0000] <MikeSmith>
so once y'all use it for real, if you notice any problems lemme know

[15:12:04.0000] <Ms2ger>
Wow, I never knew cheilmann was this clueless: http://christianheilmann.com/2015/03/09/advancing-javascript-without-breaking-the-web/

[15:13:24.0000] <Hixie>
which part in particular?

[15:14:59.0000] <Ms2ger>
The "let's do browser-sniffing and make it look like feature-detection" bit

[15:15:12.0000] <Hixie>
oh ok good, that's the part that stood out to me

[15:16:10.0000] <Ms2ger>
I stopped reading after that

[15:23:36.0000] <gsnedders>
wait what

[15:23:38.0000] <gsnedders>
that's crazy

[15:23:40.0000] <gsnedders>
le sigh

[15:23:41.0000] <gsnedders>
people!


2015-03-10
[17:21:41.0000] <JonathanNeal>
What on earth was this flexbox standard and whatever happened to this template approach? http://www.xanthir.com/blog/b4580

[17:34:32.0000] <caitp>
heh, that's interesting

[17:34:44.0000] <caitp>
sort of terrible, but interesting

[17:45:26.0000] <tantek>
JonathanNeal: some of the template approach / ideas made it into http://dev.w3.org/csswg/css-grid/

[17:48:44.0000] <JonathanNeal>
http://caniuse.com/#feat=css-grid ?

[18:28:34.0000] <TabAtkins>
JonathanNeal: What do you mean "what on earth was this flexbox standard"?

[18:28:40.0000] <TabAtkins>
The template approach is Grid Layout.

[18:35:57.0000] <TabAtkins>
Rather, became Grid Layout.

[22:46:51.0000] <MikeSmith>
rektide: I think the energy spent critiquing the Push API on twitter would be a lot better directed toward talking with the relatively smart people who are actually working on the Push API spec (and related protocol) and have thought about this stuff already

[22:47:03.0000] <MikeSmith>
e.g., Martin Thompson

[22:48:09.0000] <MikeSmith>
rektide: I hope you don't really imagine you're the first one to have considered the stuff you mention, or that people who have considered it have just blown it off

[22:50:00.0000] <MikeSmith>
rektide: and positioning any of the problems as something that "W3C" is somehow responsible for shows a lack of insight about how specs get developed

[22:50:52.0000] <tantek>
MikeSmith, speaking of how (w3c and other) specs are developed: http://tantek.com/2015/068/b1/security-towards-minimum-viable-web-platform

[22:53:45.0000] <MikeSmith>
rektide: it's just a relatively small group of people who are highly focused on solving a specific problem and they get together somewhere to do that. It could be anywhere. So if you want to constructively criticize the technical decisions, your feedback should better of be directed to the actually real people who are writing the specsーnot to @w3c or some other abstract entity it's convenient to hate o

[22:53:51.0000] <MikeSmith>
n

[22:53:59.0000] <MikeSmith>
/me looks at tantek's URL

[22:54:20.0000] <MikeSmith>
ah good

[22:54:30.0000] <MikeSmith>
glad you took time to write about this

[22:54:33.0000] <MikeSmith>
/me reads further

[22:54:53.0000] <tantek>
there's more to write but I wanted to at least get this much out there

[22:55:03.0000] <tantek>
no checklist substitutes for the value and drive to minimize

[22:57:44.0000] <MikeSmith>
tantek: as far as "we need a security group", as Brad Hill has pointed out, we already have one. The problem is time

[22:57:52.0000] <MikeSmith>
https://twitter.com/hillbrad/status/572491470697074688

[22:58:09.0000] <MikeSmith>
"Already there, also the Security IG. What there is not is magically more time for SMEs to do work."

[22:58:22.0000] <tantek>
MikeSmith: I'm not sure an IG is sufficient

[22:58:39.0000] <MikeSmith>
it's not just the IG

[22:58:51.0000] <MikeSmith>
the WebAppSec WG is chartered for this already

[22:58:52.0000] <tantek>
Yan's tweet hints at the issue: https://twitter.com/bcrypt/status/572220477919260672

[22:58:57.0000] <MikeSmith>
that's why he said "also"

[22:59:08.0000] <tantek>
my understanding is that WebAppSec was not yet chartered for this

[22:59:15.0000] <tantek>
and that is one of the things we need to fix

[22:59:59.0000] <MikeSmith>
then you've been misled :)

[23:00:04.0000] <MikeSmith>
they are chartered for it

[23:00:09.0000] <MikeSmith>
/me goes to look

[23:00:10.0000] <tantek>
tell Yan ;)

[23:00:28.0000] <tantek>
I also appreciate looping in the TAG

[23:00:40.0000] <tantek>
since they of all people should get used to saying "no"

[23:00:46.0000] <MikeSmith>
I though Brad did already reply to Yan to say exactly that

[23:00:56.0000] <MikeSmith>
that they were chartered for it

[23:00:57.0000] <MikeSmith>
http://www.w3.org/2013/07/webappsec-charter.html

[23:01:13.0000] <MikeSmith>
> The Web Application Security Working Group may provide review of specifications from other Working Groups, in particular as these specifications touch on chartered deliverables of this group (in particular CSP), or the Web Security model.

[23:02:02.0000] <MikeSmith>
and on top of that we do as Brad pointed out also have the IG

[23:02:04.0000] <tantek>
well alrighty thing. nothing like citations and quotes ;)

[23:02:24.0000] <MikeSmith>
yeah so the problem isn't one of people not having already planned for review

[23:04:45.0000] <MikeSmith>
tantek: but anyway in general I am deeply suspicious of any model where some WG is given organizational authority to approve or disapprove of other WGs work where it touches on some particular area

[23:05:27.0000] <MikeSmith>
we've had that with WAI PFWG and I don't think most people would consider that to be a great success, or something we want to use a model

[23:05:46.0000] <MikeSmith>
and that's pretty much a big understatement

[23:06:07.0000] <MikeSmith>
as far as how that group is viewed by a lot of people

[23:06:15.0000] <tantek>
MikeSmith, sure, I share such suspicions

[23:06:24.0000] <MikeSmith>
tantek: ok

[23:06:29.0000] <tantek>
more than that, I want to put the fear of featuritis into every spec authors mind

[23:06:33.0000] <tantek>
and every working group's mind

[23:06:35.0000] <MikeSmith>
sure

[23:06:36.0000] <tantek>
and every chair's mind

[23:06:59.0000] <tantek>
because right now, W3C, WHATWG specs both have massive featuritis tumors

[23:07:31.0000] <MikeSmith>
well that's nothing new by a long shot

[23:07:38.0000] <MikeSmith>
CSS cough cough

[23:08:05.0000] <tantek>
hey man, I've been cutting features left and right from CSS3-UI, doing what little I can there. actually helped inspire some of this thinking.

[23:08:30.0000] <tantek>
OTOH what's with everyone going nuts with JSON?

[23:08:37.0000] <MikeSmith>
dunno

[23:09:00.0000] <tantek>
it's just the backend syntax du jour, today's XML

[23:09:08.0000] <MikeSmith>
but as far as CSS on the aggregate I think the numbers speak for themselves

[23:09:34.0000] <MikeSmith>
there are literally on the order of 50 CSS specs in development right now

[23:09:39.0000] <MikeSmith>
last time I could

[23:09:52.0000] <tantek>
that's a good thing actually - a side effect of *minimizing* features per spec

[23:10:15.0000] <MikeSmith>
compare that to, for the entire rest of the platform, everything else, we have *maybe* 50 specs in current development

[23:10:46.0000] <MikeSmith>
tantek: there are lots of creative ways to rationalize the numbers I guess

[23:10:55.0000] <tantek>
that's not to say that CSS WG dynamics and even spec development couldn't be improved, but there's at least active work towards that (in some respects)

[23:11:08.0000] <MikeSmith>
but there are still a large volume of features there

[23:11:28.0000] <tantek>
the nice thing about the "50 specs in development" number is that it puts pressure on cutting/dumping some of those specs

[23:11:51.0000] <MikeSmith>
yeah

[23:11:53.0000] <MikeSmith>
ture

[23:12:44.0000] <tantek>
so feel free to keep up the pressure :)

[23:13:32.0000] <MikeSmith>
well I have nothing to do with CSS

[23:13:45.0000] <tantek>
but you can count :)

[23:13:50.0000] <MikeSmith>
well except backroom political lobbying

[23:13:56.0000] <MikeSmith>
well I can rant to plh

[23:14:20.0000] <tantek>
ranting does seem to be an effective mechanism for gaining attention at W3C

[23:14:21.0000] <MikeSmith>
actually plh does listen to my feedback

[23:14:32.0000] <MikeSmith>
not effective for plh

[23:14:43.0000] <tantek>
not exclusively, but often. ranting that is.

[23:14:58.0000] <MikeSmith>
plh is very good about focusing on problems he can actually solve, and not wasting time on problems he can't

[23:15:06.0000] <tantek>
good to know. better to encourage / pay attention to good behavior than bad.

[23:19:04.0000] <MikeSmith>
anyway, about the security review, what I said above about failure of our existing review groups is why I was suggesting we make a stronger effort to try also some bottom-up approach to facilitating quality review based on a detailed set of shared criteria that anybody can evaluate on their own

[23:19:14.0000] <tantek>
yes

[23:19:24.0000] <tantek>
makes sense, also provides positive incentive

[23:19:33.0000] <tantek>
you can make your specs look better by providing a security review!

[23:19:41.0000] <MikeSmith>
yeah

[23:19:48.0000] <tantek>
(and inviting external review of your review etc.)

[23:20:01.0000] <tantek>
hence why I submitted a pull-request to the self-review doc

[23:20:06.0000] <tantek>
hoping to improve it at the source

[23:20:22.0000] <MikeSmith>
and ideally I think we should get somewhere closer to removing the idea of "experts" we all are supposed to go to, hat in hand, to request review

[23:20:36.0000] <MikeSmith>
yeah I submitted a PR on that doc too

[23:20:40.0000] <tantek>
cool

[23:20:58.0000] <MikeSmith>
but mike west has ignored it so far!

[23:21:20.0000] <MikeSmith>
I think Mike's maybe away on vacation or something actually

[23:27:24.0000] <MikeSmith>
botie, inform smaug____ initMessageEvent has been dropped, right? replaced by just initEvent?

[23:27:25.0000] <botie>
will do

[00:50:43.0000] <The-Compiler>
I hope this is the right place for this kind of question - In an UA, if an user temporarily ignores an SSL error, what "similiar" SSL errors should I automatically ignore? Does it sound sensible to ignore all subsequent errors if (error, certificate, scheme, host, port) all match?

[01:15:41.0000] <annevk>
The-Compiler: it doesn't really sound sensible to ignore SSL errors

[01:19:15.0000] <The-Compiler>
annevk: yeah, but power to the user :)

[03:43:26.0000] <botie>
smaug____, at 2015-03-10 06:27 UTC, MikeSmith said: initMessageEvent has been dropped, right? replaced by just initEvent?

[03:43:59.0000] <Ms2ger>
MikeSmith, replaced by new MessageEvent

[03:45:12.0000] <smaug____>
yes, all init*Event are at least deprecated

[03:45:30.0000] <MikeSmith>
Ms2ger: ah OK

[03:45:45.0000] <smaug____>
who are you, botie

[03:45:45.0000] <botie>
bugger all, i dunno, smaug____

[03:45:54.0000] <smaug____>
that is what I thought

[03:47:35.0000] <MikeSmith>
smaug____: ah OK, yeah vaguely remembering that now (about general deprecation)

[03:48:33.0000] <MikeSmith>
botie is my personal assistant

[03:48:56.0000] <MikeSmith>
botie, CSS?

[03:48:57.0000] <botie>
mikesmith: bugger all, i dunno

[03:57:45.0000] <annevk>
GPHemsley: https://phabricator.wikimedia.org/T62835 might be of interest

[04:53:17.0000] <Ms2ger>
MikeSmith, wait, why is initMessageEvent in the spec

[05:12:27.0000] <zcorpan>
i think it was needed for web compat

[06:30:32.0000] <annevk>
beverloo++

[06:30:46.0000] <beverloo>
glad to help :)

[06:32:00.0000] <annevk>
beverloo: so Version history -> Commits

[06:32:10.0000] <annevk>
beverloo: and that should be two separate entries

[06:32:22.0000] <annevk>
beverloo: and after participate

[06:32:42.0000] <beverloo>
aah missed those, I'll do that right now

[06:32:42.0000] <annevk>
beverloo: also "File an issue" / "open issues"

[06:33:05.0000] <annevk>
/me will skim through the rest meanwhile

[06:37:39.0000] <annevk>
Looks okay, kind of curious that the References have a different order, but seems to be okay

[06:58:00.0000] <beverloo>
annevk, all done. Unsure about the reference order. Created a bikeshed PR too regarding the ordering.

[06:59:51.0000] <annevk>
beverloo: cool

[07:02:20.0000] <zcorpan>
mathiasbynens: it's Element#closest not HTMLElement#closest

[07:02:34.0000] <mathiasbynens>
zcorpan: thanks

[07:02:41.0000] <annevk>
beverloo: feel free to merge it

[07:02:48.0000] <annevk>
beverloo: I gave you some powers

[08:09:21.0000] <MikeSmith>
yeah we have a relatively small number of heavy bugzilla users at w3c: Hixie, AnneVK, Msger, Simon Pieters from Opera, jgraham

[08:09:29.0000] <MikeSmith>
and me

[08:09:44.0000] <MikeSmith>
the rest of the users are tourists :-)

[08:10:24.0000] <MikeSmith>
ooofs

[08:10:41.0000] <MikeSmith>
ahah I meant to write that to glob

[08:10:45.0000] <MikeSmith>
oh well

[08:12:27.0000] <MikeSmith>
I should probably have included mathiasbynens in that list

[10:24:41.0000] <beverloo>
annevk, cool, thanks!

[10:24:53.0000] <beverloo>
annevk, before I merge, is there anything you need to update on the server side for updating on pushes?

[10:24:59.0000] <beverloo>
given that Overview.html now is called notifications.html

[10:56:09.0000] <annevk>
beverloo: ah yeah, I need to fix that

[10:56:48.0000] <annevk>
beverloo: I think you can push and then I'll just change a few things over ssh

[12:22:27.0000] <zcorpan>
hmm, i didn't know about the third argument to String#replace. don't see it in https://kangax.github.io/compat-table/es6/ either

[12:22:57.0000] <zcorpan>
re https://github.com/w3c/web-platform-tests/pull/1671

[12:23:35.0000] <caitp>
zcorpan: it doesn't show up in the draft either, afaik

[12:25:56.0000] <caitp>
annex E does mention that the algorithm for replace was specified wrong when the search object is a regexp with the global flag set though

[12:30:44.0000] <zcorpan>
https://bugzilla.mozilla.org/show_bug.cgi?id=481738

[12:32:34.0000] <Mateon1>
zcorpan: The flags argument is not standardized, and doesn't work in Chrome, sadly.

[12:35:14.0000] <zcorpan>
Mateon1: it doesn't enable anything that a regexp in the first argument can't do, does it?

[12:36:07.0000] <Mateon1>
No, but I was hoping for str.replace("match", "substitute", "g");, though.

[12:36:34.0000] <zcorpan>
why?

[12:37:33.0000] <Mateon1>
Less code, an additional  new RegExp("match", "g");  in case of dynamic "match" is a bit long

[12:39:29.0000] <zcorpan>
ok. yeah i guess it could be more ergonomic in some cases, but OTOH it's more to learn and it's a shorter path to interop for gecko to drop it (I assume IE doesn't have it but i haven't tested)

[15:33:13.0000] <Mateon1>
Is there any chance there will ever be an actual integer type (outside of typed arrays) in Javascript? I find having to do rounding at every point of the program a bit unneccessary.

[15:47:36.0000] <jgraham>
Why do you have to round at every point in the program?

[15:48:44.0000] <caitp>
I think spidermonkey has the same "small integer" type as v8's 31 bit representation, so you have at least 2 variations of fixed size integers

[15:53:45.0000] <Mateon1>
This is starting to make me think about making another transcompiler over Javascript. A good language needs types... An example is storing a structure/object containing some data, a function expects an integer but would crap out if it got a float - you take the data out of the struct, expecting int, you get float, the function craps out.

[15:54:58.0000] <jgraham>
Things that annoy me #187: the word "transplier". We already have a word for that: "compiler"

[15:55:29.0000] <jgraham>
Anyway, if you want a js-like lanuage with better type safety try typescript or something

[15:56:25.0000] <Mateon1>
Interesting, reminds me of ActionScript.

[15:58:37.0000] <caitp>
i mean, typescript doesn't really get you stuff like integer bit width, but hey

[15:59:07.0000] <caitp>
not sure it even has a specific "integer" type

[16:03:45.0000] <Mateon1>
I'm looking for a language that has type safety, doesn't matter if optional or enforced, but shouldn't involve too much extra code. should have a non-nullable type, as well as an Optional type. Is there anything close to that?


2015-03-11
[17:38:50.0000] <MikeSmith>
jgraham: transpiler outputs source code, not object code, right?

[17:39:33.0000] <MikeSmith>
Mateon1: sounds like Swift

[17:40:07.0000] <MikeSmith>
from what little I remember hearing about stuff that swift has

[17:43:44.0000] <MikeSmith>
the benefit in practice of Optional is mainly preventing NPEs, right?

[17:43:50.0000] <MikeSmith>
(I'm asking)

[17:44:00.0000] <MikeSmith>
/me decides to read up some

[17:48:24.0000] <MikeSmith>
... or avoiding segfaults or whatever consequence is

[18:40:43.0000] <MikeSmith>
anybody have opinions on what HTTP client library is best practice to use in Java code these days?

[18:41:10.0000] <MikeSmith>
context is https://github.com/validator/validator/issues/61

[18:42:45.0000] <MikeSmith>
/me wonders about https://developers.google.com/api-client-library/java/google-http-java-client/setup but the fact that page causes a mixed-content warning doesn't inspire huge confidence

[18:44:06.0000] <MikeSmith>
oh anyway that's not a general-purpose libary ("provides simple, flexible, access to Google APIs for Java client applications")

[02:43:25.0000] <jgraham>
MikeSmith: If you like. But early C++ compilers ouput C code and invoked an existing C compiler on that. The modern Nim compiler, for example, does the same thing. Other compilers like GHC have options to output C or JS code rather than object files. So it seems to me to be an arbitary distinction that doesn't really capture the most interesting part of what a compiler does.

[02:51:55.0000] <terinjokes>
Domenic: what archive formats?

[03:27:05.0000] <Domenic>
terinjokes: https://w3ctag.github.io/packaging-on-the-web/

[04:17:03.0000] <roc>
jgraham: indeed

[04:18:31.0000] <roc>
Mateon1: JS Typed Objects give you some of what you want.

[05:53:54.0000] <The-Compiler>
So it seems foo::bar would be a valid URL, right? I'm writing a browser and wonder if I should always treat foo::bar as a searchterm (think C++) instead of a link with an explicit scheme - are there any common protocols which use URLs with a :bar path?

[09:27:51.0000] <terinjokes>
Domenic: i didn't think that went anywhere, since it wasn't very popular at EWS

[09:28:12.0000] <terinjokes>
I've been shimming this for about 2 years now

[10:28:12.0000] <jgraham>
I might be very stupid, but I don't see where new Event() initializes the bubbled and cancelable attributes

[10:33:51.0000] <miketaylr>
jgraham: new Event("plop", {"bubbles":true, "cancelable":false})?

[10:34:44.0000] <jgraham>
miketaylr: I mean if you do new Event() with no arguments, per the spec

[10:34:48.0000] <miketaylr>
ah

[10:35:02.0000] <miketaylr>
it looks like, both as false?

[10:35:11.0000] <miketaylr>
in the IDL https://dom.spec.whatwg.org/#dfnReturnLink-0

[10:35:53.0000] <miketaylr>
but i don't see any prose other than that, no

[10:36:25.0000] <miketaylr>
better link https://dom.spec.whatwg.org/#interface-event

[10:40:20.0000] <jgraham>
Oh right, that thing there.

[10:44:22.0000] <Ms2ger>
Yeah, event constructors are defined pretty magically

[16:30:51.0000] <jsbell>
Heh. encoding/single-byte-decoder.html has "interesting" behavior in Chrome. In the iframe test, Chrome sniffs the byte stream ([0x00, 0x01 ... 0xFF]) - per [[MIMESNIFF]] - and overrides the content type as application/octet-stream and offers to download the file. Or, well, 167 files. :P

[16:34:48.0000] <jgraham>
Fun :)


2015-03-12
[23:51:12.0000] <zcorpan>
http://www.webpagetest.org/result/150312_YY_57415756bcdc2c4945e32d9c9f4c8dda/1/details/ big chunk of SSL negotiation for the subdomains

[23:54:22.0000] <zcorpan>
wonder why start render is 1.5s after the stylesheet has loaded

[23:58:26.0000] <annevk>
Where is this bz thread from w3cmemes?

[23:59:28.0000] <zcorpan>
<http://www.w3.org/mid/579391425936261⊙wyr>

[00:01:28.0000] <MikeSmit1>
beautiful

[00:04:07.0000] <MikeSmit1>
w3cmemes should just pay that guy to write all their material

[01:33:32.0000] <Ms2ger>
https://twitter.com/pcwalton/status/575836058560004096

[04:56:37.0000] <annevk>
Ms2ger: good thing it's still maintained

[04:56:57.0000] <Ms2ger>
Uhuh

[05:13:36.0000] <beverloo>
annevk, just pushed the PR, time to do your ssh tricks :)

[05:13:38.0000] <beverloo>
https://notifications.spec.whatwg.org/

[05:17:22.0000] <annevk>
beverloo: done

[05:17:30.0000] <beverloo>
cool, thanks

[05:20:02.0000] <smaug____>
does anyone have a link to page which triggers mixed mode warning or some such

[05:20:39.0000] <annevk>
smaug____: https://dump.testsuite.org/mixed-content/ has some examples

[05:20:54.0000] <smaug____>
ta

[06:25:20.0000] <Ms2ger>
http://testsuites.opera.com/ is dead?

[06:25:36.0000] <frivoal>
it seems to be

[06:30:32.0000] <jgraham>
Maybe zcorpan or someone can help you retrieve any missing resources?

[06:32:01.0000] <zcorpan>
it got killed a few months ago. i think the stuff on there is just gone (but might have unpolished versions on t)

[06:33:53.0000] <jgraham>
It wasn't on svn somewhere, was it?

[06:34:04.0000] <jgraham>
That might be gone too ofc…

[06:34:42.0000] <zcorpan>
http://web.archive.org/web/20130227122600/http://testsuites.opera.com/ might still have something

[06:35:16.0000] <zcorpan>
jgraham: hmm maybe, i don't recall how it was set up. i can have a look

[06:35:56.0000] <jgraham>
Is Xiven still there? I guess he would know

[06:36:43.0000] <Ms2ger>
I don't know that there was a lot on there that wasn't otherwise released

[06:37:36.0000] <jgraham>
Ah, I was presuming that there was a test in prosto-testo that depended on it or something

[06:37:41.0000] <jgraham>
*presto

[06:38:09.0000] <Ms2ger>
I had it in an open tab for some reason

[06:38:27.0000] <wanderview>
Domenic: in regards to Fetch Response objects and streams... do you expect them to expose ReadableByteStream, and not just ReadableStream, in the future?  my first impression was that the body was better represented as a byte stream than a message-oriented stream (although that can be done by passed buffers as the messages of course)

[06:39:22.0000] <Ms2ger>
jgraham, seems like it could be useful to check if https://docs.google.com/document/d/17-pOErSaZkulu-rRS_Hhj7d8p1J7aJnNJcYs28Pswu0/edit?pli=1 contains anything that isn't on ttwf, but I don't really feel like it :)

[06:41:08.0000] <zcorpan>
it seems the testsuites there are in presto-testo except for the cookies testsuite

[06:46:24.0000] <jgraham>
/me wonders if he has found the ultimate way to make Ms2ger unhappy

[06:47:17.0000] <Ms2ger>
Oh?

[06:49:35.0000] <jgraham>
I changed the serialization in wptrunner for manifest files. And then regenerated all the existing expected data. So I have ended up with something more or less unreviewable

[06:49:55.0000] <jgraham>
https://hg.mozilla.org/try/rev/3fac90bd84f7

[06:50:27.0000] <jgraham>
OTOH it does remove a lot of crap leftover from when tests changed names and similar

[06:51:19.0000] <frivoal>
ms2ger: as you go through presto-testo to find the tests that have already been submitted, I suppose you also run into tests that haven't been yet. Do you keep track of this? It would good to have (in a readme or something) a list of test that haven't been checked vs test have are known not to be submitted (as of a certain date)

[06:51:54.0000] <zcorpan>
is anyone interested in the cookie testsuite?

[06:52:23.0000] <Ms2ger>
zcorpan, I'd be curious what Servo's results look like

[06:53:49.0000] <Ms2ger>
frivoal, I haven't kept track

[06:57:52.0000] <jgraham>
zcorpan: It seems in general like an interesting thing since cookies aren't exactly known for being easy or having great interop

[06:58:33.0000] <frivoal>
Ms2ger: Maybe we should start? What would be the most convenient format?

[07:00:24.0000] <Ms2ger>
An issue, maybe?

[07:02:46.0000] <frivoal>
You mean a "clean up and submit" issue for each non-submitted test suite? That would work pretty well to find things that need to be submitted. A bit more tricky to find things for which we need be checked if they have been submitted

[07:05:01.0000] <frivoal>
I was thinking of a file in each leaf directory. If there's not file, we haven't checked. If there's no directory, it's been submitted, so we deleted it. If there's a file, it contains the date when we last checked and couldn't find it upstream

[07:05:14.0000] <frivoal>
s/not/no/

[07:06:53.0000] <zcorpan>
hmm. 63.94% of pages in httparchive has direction:rtl somewhere. that's crazy

[07:08:28.0000] <jgraham>
Ms2ger: Not sure if there's anything there that really needs to be on TestTWF

[07:08:46.0000] <Ms2ger>
wfm

[07:10:28.0000] <gsnedder1>
jgraham: I thought there was decent interop with cookies, just not what any spec said until a few years ago

[07:12:34.0000] <Ms2ger>
gsnedder1, Servo :)

[07:12:55.0000] <gsnedders>
Ms2ger: pff, servo! :P

[07:13:09.0000] <gsnedders>
You guys can't break the web because the web doesn't work already!

[07:25:06.0000] <Ms2ger>
Anyone want to implement onbeforescriptexecute/onafterscriptexecute attributes?

[07:35:38.0000] <Ms2ger>
/me finds http://www.w3.org/2013/04/test_plan2.html

[07:42:19.0000] <jgraham>
The best laid schemes o' Mice an' Men

[07:42:21.0000] <jgraham>
Gang aft agley

[07:42:29.0000] <Ms2ger>
Whatever happened to krisk?

[07:46:53.0000] <jgraham>
Good question. I don't know if he survived the Great QA Culls

[07:52:48.0000] <frivoal>
Ms2ger: https://github.com/operasoftware/presto-testo/blob/master/README.md updated to include info on how to send pull requests, including the file to track things that have not been submitted

[08:07:03.0000] <Domenic>
wanderview: yes, definitely ReadableByteStream. We have a very nice design now though, where rbs.getReader().read() acts the same as a message-oriented stream, but rbs.getBYOBReader().read(arrayBufferView) will allow you to use a pre-allocated memory region.

[08:07:25.0000] <Domenic>
wanderview: so, ReadableByteStream ends up being a superset (from the consumer's point of view) of ReadableStream

[08:07:33.0000] <wanderview>
Domenic: ok, thats nice

[09:10:53.0000] <hemanth>
/me : nmotw -> http://nmotw.in/confirm-simple/  A simple com�mand-line tool to confirm user inputs.

[09:54:39.0000] <annevk>
Hmm, seems like I finally need to move my Google Code projects

[10:12:33.0000] <beverloo>
annevk, service-worker based web notifications, for Android too, are now in chrome beta :)

[10:12:46.0000] <annevk>
beverloo: congrats

[10:13:05.0000] <annevk>
I guess that's another thing we should tackle once SW-v1 has landed

[10:13:37.0000] <beverloo>
yeah, getting more implementations of all this stuff would be great

[10:13:47.0000] <wanderview>
annevk: we have a large list of stuff after SW v1 :-)

[10:14:01.0000] <beverloo>
I'm hoping to get "data", "silent", SWR.getNotifications() in chrome 43

[10:14:05.0000] <wanderview>
we still need to do push

[10:14:25.0000] <beverloo>
wanderview, fwiw, my team's doing push as well

[10:14:26.0000] <annevk>
wanderview: push is sorta ready though, no?

[10:14:42.0000] <annevk>
wanderview: but yeah, post v1 is prolly more than pre v1

[10:14:47.0000] <wanderview>
annevk: have we started implementation in gecko?  I guess I was talking implementation vs spec

[10:14:50.0000] <annevk>
since well, growth

[10:15:12.0000] <annevk>
wanderview: nsm has been working on it for quite a while, but a lot of that was also the pre-SW stuff

[10:15:24.0000] <annevk>
(push changed in design)

[10:15:40.0000] <wanderview>
hmm, ok

[10:20:13.0000] <annevk>
So we moved some of https://code.google.com/p/html5/ but some of it hasn't really changed at all

[10:20:20.0000] <annevk>
Anyone opinions on what should happen with that?

[10:20:34.0000] <annevk>
Should I migrate it as a legacy-html5 repository inside whatwg or some such?

[10:31:09.0000] <gsnedders>
I wonder if all the Ruby and PHP bugs on html5lib ever got migrated?

[10:53:55.0000] <annevk>
Not sure

[10:54:27.0000] <annevk>
I indicated the project moved but we could still import the old stuff someplace if desired

[10:56:31.0000] <jgraham>
I wonder if anyone cares

[11:01:07.0000] <annevk>
I put the html5 thing here: https://github.com/whatwg/old-google-code-html5

[11:23:52.0000] <cvrebert>
Am I correct that the typical UA behavior of "scrolling the newly-focused element into view (if necessary)" falls under step 4 of https://html.spec.whatwg.org/multipage/interaction.html#focus-update-steps , and is thus not standardized?

[11:27:14.0000] <cvrebert>
...and to answer my own question: Yes; https://www.w3.org/Bugs/Public/show_bug.cgi?id=27913


2015-03-13
[20:59:37.0000] <MikeSmith>
cool to see doublec contributing to servo

[01:36:40.0000] <SimonSapin>
The way to deal with navigating to a text/plain resource is to start the HTML tokenizer in PLAINTEXT mode, right? Is this specified?

[01:39:20.0000] <annevk>
SimonSapin: yes

[01:39:46.0000] <annevk>
SimonSapin: https://html.spec.whatwg.org/multipage/browsers.html#read-text

[01:39:57.0000] <SimonSapin>
thanks

[05:28:59.0000] <annevk>
wanderview: https://wiki.whatwg.org/wiki/Storage

[05:29:01.0000] <annevk>
JakeA: https://wiki.whatwg.org/wiki/Storage

[05:29:12.0000] <wanderview>
thanks

[05:29:14.0000] <annevk>
wanderview: JakeA: all very tentative

[05:29:55.0000] <annevk>
wanderview: I'd like to fit in the quota thing somehow, I agree that it seems like developers would like to be able to know how much they can store

[05:31:10.0000] <wanderview>
annevk: under "storage types" should that say best-effort instead of temporary?

[05:31:54.0000] <wanderview>
it seems that term is used elsewhere in the page instead of temporary

[05:31:58.0000] <annevk>
wanderview: temporary is meant for actual cache APIs (where you can clear stuff)

[05:32:20.0000] <annevk>
wanderview: I guess I should add best effort as well, as the default for non-temporary APIs

[05:32:21.0000] <wanderview>
ah

[05:33:03.0000] <annevk>
wanderview: clearer now?

[05:33:59.0000] <wanderview>
annevk: I guess I just don't see "temporary" mentioned in the "rough plan", so not sure how it fits in

[05:34:05.0000] <wanderview>
beyond what you told me in irc, of course

[05:34:20.0000] <annevk>
wanderview: rough plan has "Also create a new storage API for explicit priority-based temporary storage. A key/value/priority store, effectively. Application is in charge of determining and changing priorities over time."

[05:34:37.0000] <wanderview>
you're right of course...

[05:34:42.0000] <wanderview>
/me drinks more coffee...

[05:34:50.0000] <wanderview>
I'm working earlier than normal today

[05:35:10.0000] <annevk>
10:30 or 9:30?

[05:35:18.0000] <annevk>
oh wait, my math is off again

[05:35:33.0000] <annevk>
more like 7:30/8:30

[05:35:55.0000] <wanderview>
its 8:30, but with recent time change feels like 7:30

[05:36:29.0000] <annevk>
this is like the best three weeks of the year for cooperation with the US

[05:36:49.0000] <annevk>
due to the US changing a bit earlier than us per some Bush administration decision

[05:36:54.0000] <wanderview>
annevk: we do our best not to be cooperative, it seems

[05:37:41.0000] <annevk>
uhuh

[05:51:22.0000] <annevk>
wanderview: perhaps UX along the lines of "mozilla.org would like to use a significant part of your hard drive (details). [Sure] [Nope]" with the site actually requesting a specific quota

[05:51:46.0000] <annevk>
wanderview: but that might already be too hard and too easy to say yes to with malicious cases?

[06:07:29.0000] <wanderview>
annevk: personally I still like the "don't ask except for large amounts" to reduce the amount of prompting

[06:07:42.0000] <wanderview>
annevk: I guess native gets an implicit prompt and permission when the user hits the "install this app" button

[06:10:50.0000] <wanderview>
annevk: btw, I want to say the safari on ios already has something like this prompt... I remember getting it while using ft.com "app" in the past

[06:16:36.0000] <annevk>
wanderview: don't ask seems okay, if we can promise better than "best effort" by default

[06:17:31.0000] <annevk>
wanderview: so yeah, that'd argue for something like by default you get persistent 10 MiB / 50 MiB or some such, you can ask for more, perhaps a specific amount or something elastic, and that would then create a prompt

[06:17:54.0000] <annevk>
hmm Nightly is really sucky today

[06:24:32.0000] <wanderview>
annevk: the problem with setting absolute values is that mobile will have much less space... and space will change over time... but using percantages also sucks because you can end up with unreasonable sizes easily as well... I think thats why gecko has the complex formula we have

[06:26:48.0000] <annevk>
wanderview: sure, we could say "each website by default has X, they can ask for Y, and we'll grant them Z, with X < Y && Z <= Y

[06:26:52.0000] <annevk>
"

[06:27:28.0000] <annevk>
wanderview: and then on top there's the temporary storage stuff, which is maybe some amount up to the UA

[06:28:09.0000] <annevk>
wanderview: (there's also been requests for separating app layer from data layer within persistent storage, but not super convinced that's going to work out)

[06:29:26.0000] <annevk>
wanderview: (iOS has "delete app" as suggestion for most, except some built-in stuff that is fancier...)

[06:29:56.0000] <wanderview>
annevk: yea, I can see the app vs data thing...  that would certainly complicate the API, though

[06:30:51.0000] <annevk>
wanderview: well, we'd have to create yet more APIs... I think, you'd get best effort / persistent or persistent data or temporary

[06:31:42.0000] <wanderview>
annevk: right now I think people are advised to use separate Cache objects for app resources vs data resources... so I was thinking some kind of API to say "this Cache is best effort" and "this Cache is persistent"... thats more annoying than just saying "this origin is persistent"

[06:33:47.0000] <annevk>
wanderview: yeah, to keep the initial thing simple we should probably focus on a single persistence bucket

[06:34:12.0000] <annevk>
wanderview: if we later have more elaborate UX we can see if there's user scenarios for introducing more layers

[06:40:33.0000] <annevk>
wanderview: I learned from talking to Luke that gaming really wants real cache APIs, with priority; given our efforts there I guess that will be relatively important too

[06:47:29.0000] <annevk>
Hmm https://www.pandastrike.com/posts/20150311-react-bad-idea no Firefox does not ship Web Components...

[06:55:09.0000] <jgraham>
Yeah, so that post seems to have two principle problems: 1) the assumption that Web Components ship and 2) the assumption that they actually solve the problems that react et. al. solve, and better

[06:57:30.0000] <annevk>
A lot of seems to hinge on Web Components having a standards sticker of sorts

[09:55:10.0000] <dglazkov>
jgraham: a slightly less contrarian point of view: https://www.youtube.com/watch?v=g0TD0efcwVg

[09:56:29.0000] <dglazkov>
I am happier with that POV. Peeps seems to think it's either/or. Cage matches have always been crowdpleasers

[09:57:31.0000] <jgraham>
dglazkov: I hope that it does all work together well :) I wasn't taking a point of view, just pointing out that the author of that blog was making an argument that he entirely failed to back up.

[09:58:45.0000] <jgraham>
I guess if people suddenly want perf above all else it's quite important to be sure that using web components doesn't impose a mandatory performance penalty on the platform

[09:59:17.0000] <dglazkov>
that would be a terrible thing indeed

[09:59:24.0000] <jgraham>
(again I don't know if they do or not, but it at least seemed like some of the proposals that may since have been rejkected had that effect)

[10:24:37.0000] <dglazkov>
jgraham: there's nothing in specs that's inherently imposing perf penalties

[11:43:57.0000] <aklein>
TabAtkins: ping?

[11:44:04.0000] <TabAtkins>
aklein: pong

[11:45:04.0000] <aklein>
TabAtkins: whatever happened to putting SVG elements in the HTML namespace?

[11:45:23.0000] <aklein>
TabAtkins: or who might know that if it's slipped off your radar

[11:46:05.0000] <TabAtkins>
We'd still like to, but implementors keep being uninterested?  The one case we've been able to drum up some interest with is putting HTML-namespace elements in SVG (rather than duplicating them in the SVG namespace, or using <foreignContent>).

[11:46:11.0000] <TabAtkins>
If you're interested, let's talk. ^_^

[11:46:37.0000] <aklein>
TabAtkins: this came up on webapps the other day re: <template>

[11:46:48.0000] <TabAtkins>
Yup yup.

[11:47:26.0000] <aklein>
I'm not in a good position to actively work on this stuff right now, but I figured someone from the SVG WG should be on that thread

[11:47:30.0000] <TabAtkins>
<template> gives problems both ways. You wanna use it in SVG (thus putting an HTML-namespace element into SVG) and you want it to contain SVG fragments (thus putting an SVG-namespace element into HTML).  And you'd like to do both of those without actually writing a namespace.

[11:47:45.0000] <TabAtkins>
Okay, where's the thread? blink-dev?  Haven't checked that in a few days.

[11:48:03.0000] <aklein>
TabAtkins: https://lists.w3.org/Archives/Public/public-webapps/2015JanMar/0783.html

[11:48:24.0000] <TabAtkins>
Ah, kk. Havent' gotten down to that yet; still digging my way out of a week+ of email debt. ^_^

[11:48:28.0000] <aklein>
I find it more actionable than usual since it's a proposal from a web dev, not an implementor

[11:48:32.0000] <aklein>
ah, ok

[11:48:58.0000] <aklein>
er, not a spec author

[11:49:00.0000] <aklein>
I should say

[11:49:59.0000] <TabAtkins>
Yeah, I understood what you meant to say. ^_^

[11:57:23.0000] <annevk>
TabAtkins: I tried to grep bikeshed for "http:" btw but it looked like a bit too much to figure out for now

[11:57:42.0000] <annevk>
TabAtkins: did notice that there were a lot of IETF links that did not point to tools.ietf.org

[11:58:07.0000] <TabAtkins>
Those are all from SpecRef; if they're wrong, Tobie needs to be informed.

[11:58:27.0000] <annevk>
I thought he fixed them at some point

[11:58:41.0000] <annevk>
https://github.com/tobie/specref/issues/153

[11:59:12.0000] <TabAtkins>
Ah, yup, they're updated in the db.

[11:59:28.0000] <TabAtkins>
Then people just need to regen their specs. ^_^

[11:59:38.0000] <annevk>
Are specs part of the repo?

[11:59:47.0000] <TabAtkins>
No.

[11:59:52.0000] <TabAtkins>
That would be all kinds of crazy.

[12:00:06.0000] <annevk>
E.g. bikeshed/spec-data/readonly/biblio.data has a lot of these

[12:01:01.0000] <TabAtkins>
Yeah, that's the initial version of the data files, so people can use bikeshed immediately after cloning.  It was generated relatively recently.

[12:01:38.0000] <TabAtkins>
Haha, I did it on Nov 12, *right* about the same time Tobie was fixing that stuff.

[12:01:39.0000] <annevk>
It has links such as http://www.ietf.org/rfc/rfc2342.txt which should no longer be part of specref afaict

[12:01:43.0000] <annevk>
I see

[12:02:10.0000] <TabAtkins>
I'll fix.  But if anyone is using the online version, or has run `bikeshed update` since, they'll be good.

[12:02:36.0000] <annevk>
Ok

[12:10:17.0000] <boogyman>
annevk: has the FileAPI been put on hold/abandoned, or has Mozilla decided to just halt advancements? https://developer.mozilla.org/en-US/docs/Web/API/File

[12:11:38.0000] <annevk>
boogyman: neither?

[12:11:53.0000] <Ms2ger>
boogyman, what makes you say that?

[12:11:59.0000] <boogyman>
"Obsolete since Gecko 7.0"

[12:12:27.0000] <annevk>
boogyman: that's referring to those members, that have replacements elsewhere I think

[12:12:45.0000] <annevk>
boogyman: e.g. file.size (due to blob), file.name, and the FileReader API

[12:13:11.0000] <Ms2ger>
That was a proprietary File interface, afaict

[12:13:28.0000] <boogyman>
Thank you both for the clarification

[12:13:37.0000] <annevk>
Are those proprietary members still present in Firefox? Otherwise we could probably clean up the documentation a bit

[12:14:00.0000] <Ms2ger>
"obsolete" should mean they've been dropped

[12:14:03.0000] <Ms2ger>
/me pokes

[12:16:26.0000] <annevk>
We should have some policy that once a new Firefox LTS ships we remove all the removed stuff to avoid clutter

[13:38:00.0000] <jsbell>
I don't think the font used for "No progress" on critic is big enough.


2015-03-14
[09:14:50.0000] <ajpiano>
MikeSmith: did this thread ever end up going anywhere? https://lists.w3.org/Archives/Public/public-speech-api/2013Mar/0002.html

[10:36:40.0000] <slightlyoff>
so there's a script on whatwg wiki pages that causes a wakeup/rerender *every second*

[10:36:54.0000] <slightlyoff>
little clock, e.g., at the top right of: https://wiki.whatwg.org/wiki/DragAndDropEntries

[10:36:58.0000] <slightlyoff>
WTAF.

[10:37:06.0000] <annevk>
GPHemsley: ^^

[10:37:16.0000] <slightlyoff>
WHATWG, DESTROYER OF BATTERIES COMETH

[10:37:22.0000] <annevk>
hah

[10:37:41.0000] <annevk>
Yeah I'm not sure why we have installed some of those extensions

[10:38:21.0000] <slightlyoff>
I have this sneeking suspicion that if I put the tab in the background, it probably also isn't sensitive to visibility API

[10:42:58.0000] <annevk>
Sounds about right. I doubt much of MediaWiki is very mobile friendly

[11:40:37.0000] <paxcoder>
Remind me again what the problem is with the UndoManager spec?

[11:51:24.0000] <Ms2ger>
Dunno

[11:51:33.0000] <Ms2ger>
It's implemented in Gecko, if I'm not mistaken

[14:01:01.0000] <GPHemsley>
Interesting... Well, you can turn that widget off

[14:01:17.0000] <GPHemsley>
And I suppose I could turn it off by default

[14:01:36.0000] <GPHemsley>
if that's what people want, I'll get to it eventually :)

[14:42:26.0000] <GPHemsley>
"WARNING: Multiple failed login attempts will result in all traffic from your IP address being banned from this site."

[14:42:29.0000] <GPHemsley>
Excuuuuse me

[14:42:49.0000] <paxcoder>
GPHemsley, dynamic IP?

[14:43:02.0000] <GPHemsley>
no, multiple failed login attempts :P

[14:43:19.0000] <paxcoder>
yeah, but doesn't mean it's for your username

[15:17:00.0000] <TabAtkins>
Jeezus, I finally reached the end of DOM.  All 9k+ lines (WHAT, 9000?!?) converted.  Now it's time to fix all the errors.

[15:17:58.0000] <boogyman>
converted to bikeshed?

[15:18:09.0000] <TabAtkins>
Yeah.

[15:18:17.0000] <TabAtkins>
It's taken me like 6 weeks or so to do it.

[15:19:33.0000] <TabAtkins>
GPHemsley: Definitely please turn off the clock by default.  It's silly.

[15:20:09.0000] <TabAtkins>
Also very inaccurate, since it appears to be in UTC.

[15:20:56.0000] <jgraham>
TabAtkins: I think what you mean is "I'm so /done/ with DOM. In the future I am only using <canvas>+WebGL". Otherwise you are not fully rant-compliant.

[15:22:03.0000] <TabAtkins>
Please, let's compromise on a middle ground - I'll only use Virtual DOM from now on.

[15:22:17.0000] <TabAtkins>
That way I'm agnostic to what my rendering surface is, so everyone can be happy.

[15:27:04.0000] <TabAtkins>
Hmm, DOM somehow tripped a lingering unicode-handling error in Bikeshed.  That's curious.


2015-03-15
[18:02:40.0000] <sambuddhabasu1>
can someone help me out with CSP?

[21:34:17.0000] <GPHemsley>
TabAtkins: It's a UTC clock. It's in UTC by design.

[04:58:14.0000] <MikeSmith>
ajpiano: I don't even remember having posted anything on the Speech API discussion :) So I definitely don't know if it ever went anywhere. That API was never refined or enhanced any further once the spec was published and implemented, as far as I know. In practice it seems it's pretty much been frozen as-is and not likely to gain any new features unless someone can manage to make pretty compelling case f

[04:58:20.0000] <MikeSmith>
or adding anything.

[09:31:51.0000] <ajpiano>
MikeSmith: how compelling of a use case is "JavaScript Game Shows"

[09:35:37.0000] <ajpiano>
MikeSmith what i really want is to be able to like, do some kind of recording/visualization of the audio data "at the same time" as i'm doing the speech recognition


2015-03-16
[17:38:23.0000] <MikeSmith>
ajpiano: you can't do that now in combination with the web audio API?

[03:28:25.0000] <zcorpan>
hmmm. https://html.spec.whatwg.org/multipage/forms.html#textFieldSelection:do-not-apply makes it not possible to just get the values of all attributes of an e.g. <input type=image> (like live dom viewer does in w())

[03:29:47.0000] <annevk>
JakeA: wanderview: https://wiki.whatwg.org/wiki/Storage#API_proposal

[05:34:45.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/issues/24 feedback welcome

[06:27:15.0000] <zcorpan>
MikeSmith: "Forbidden due to abuse" sayeth w3c bugzilla at the linköping office :-(

[06:44:13.0000] <Domenic>
annevk: I would have expected the code in that fetch issue to work; seems annoying to have to create a new request from scratch.

[06:44:26.0000] <Domenic>
s/request/response

[06:44:47.0000] <annevk>
It's not that simple unfortunately

[06:47:14.0000] <Domenic>
Why?

[06:48:06.0000] <annevk>
Due to filtered responses

[06:48:13.0000] <annevk>
Which all are

[06:48:30.0000] <annevk>
We could introduce some new guards

[06:48:50.0000] <annevk>
But might get tricky...

[07:10:11.0000] <MikeSmith>
zcorpan_: never seen that happen

[07:10:28.0000] <MikeSmith>
you know you're spending too much time in bugzilla when...

[07:10:45.0000] <MikeSmith>
zcorpan_: if it's still happening lemme know

[07:11:10.0000] <MikeSmith>
I think normally the rate-limiting blocks clear after ~2 hours

[07:11:49.0000] <zcorpan_>
MikeSmith: still happens, but it hasn't been 2h yet. i'll use Tor meanwhile

[07:30:02.0000] <zcorpan_>
MikeSmith: apparently it has been working and not working back and forth all day today

[07:30:51.0000] <zcorpan_>
MikeSmith: not just limited to bugzilla

[08:00:52.0000] <smaug____>
ajpiano: FYI, there has been talk to integrate speech API stuff to mediastreams

[08:47:16.0000] <MikeSmith>
/me just landed support in the validator sources for checking documents served from SNI domains

[08:49:05.0000] <annevk>
MikeSmith++

[08:49:21.0000] <annevk>
MikeSmith: though didn't that already work? E.g. I could validate html5.org and annevankesteren.nl just fine

[09:15:06.0000] <MikeSmith>
annevk: didn't work with some sites at least

[09:15:11.0000] <MikeSmith>
annevk: e.g., https://osteo15.com/

[09:15:28.0000] <MikeSmith>
in fact it still doesn't work, because I haven't pushed it yet

[09:15:53.0000] <MikeSmith>
https://html5.validator.nu/?doc=https%3A%2F%2Fosteo15.com%2F

[09:28:57.0000] <MikeSmith>
annevk: compare that to https://vnu.herokuapp.com/?doc=https%3A%2F%2Fosteo15.com%2F

[09:29:41.0000] <annevk>
I wonder what is going on with my domains then

[09:29:57.0000] <MikeSmith>
dunno but I reckon hsivonen does

[09:31:28.0000] <MikeSmith>
the thing is, before today the vnu sources were using a very old version of the Apache commons-httpclient code that basically has no SNI support at all as far as I understand it

[09:33:14.0000] <MikeSmith>
but I updated it today to the latest version of the Apache httpclient. Which was a lot of "good times" because the apache httpclient developers like to keep changing the API significantly every time they do a release

[09:34:42.0000] <MikeSmith>
so I had to rewrite our client code in vnu to work against the latest API, which was quite a bit different from what the code was originally written against

[09:35:30.0000] <MikeSmith>
https://github.com/validator/validator/commit/ce45db603aa77fa5809044e4e1d82c9431fd8b7f#diff-c9f54b9fc478b7db28d3e3443278ac49R122

[09:35:54.0000] <MikeSmith>
ugly stuff

[09:37:09.0000] <caitp->
344 deletions tho

[09:38:05.0000] <MikeSmith>
the deletions are that I completely removed two other classes we'd been using before

[09:38:59.0000] <MikeSmith>
which let you optionally run the validator service with cert checking turned off

[09:50:43.0000] <annevk>
MikeSmith: it's still surprising since DreamHost is not allocating unique IPs for sure

[09:57:39.0000] <MikeSmith>
yeah odd

[10:41:51.0000] <annevk>
JakeA: wanderview: updated https://wiki.whatwg.org/wiki/Storage a bit more

[10:42:02.0000] <annevk>
wanderview: I'm not sure I captured the named storage area stuff accurately

[10:43:21.0000] <jsbell>
annevk: add the "SW" cache api to "existing..." ?

[10:43:37.0000] <annevk>
jsbell: yes

[10:43:45.0000] <wanderview>
annevk: I think the named storage area came out of our discussion about how an app could use additional origins or sub-origins to segment storage now, right?

[10:43:52.0000] <annevk>
jsbell: I wonder where the HTTP cache fits in

[10:43:56.0000] <annevk>
wanderview: yes

[10:44:04.0000] <wanderview>
so a named storage area would let them do that without abusing origins

[10:45:02.0000] <annevk>
yeah I guess, though LRU wouldn't help them much

[10:45:18.0000] <annevk>
with LRU*

[10:45:32.0000] <annevk>
jsbell: added Cache API

[10:48:36.0000] <jsbell>
annevk: FYI https://github.com/slightlyoff/StorageDurability/blob/master/explainer.md - for a basically identical straw-man proposal

[10:50:01.0000] <jsbell>
The surface area of that hasn't gotten much discussion/refinement, so don't put too much weight into it. We've been running with the "origin gets a bit" notion and seeing where that leads.

[10:50:24.0000] <annevk>
jsbell: yeah, I've been participating in the discussion there

[10:51:17.0000] <annevk>
jsbell: I don't quite agree with the assertions in that strawman around .quota being equal, but otherwise yeah... Oh, and mode not being available synchronously seems weird

[10:51:25.0000] <jsbell>
Heh, I hadn't noticed that it was getting attention from others.

[10:52:19.0000] <annevk>
I want to allow for the option that the UA decides to change from best-effort to persistent based on e.g. pinning or bookmarking

[10:53:02.0000] <jsbell>
annevk: +1

[10:56:24.0000] <annevk>
jsbell: are you going to the Extensible Web Summit April 20?

[10:56:43.0000] <annevk>
jsbell: maybe we can meet there or otherwise sometime later that week before Friday?

[10:57:15.0000] <jsbell>
annevk: I probably should...

[10:58:14.0000] <annevk>
But who knows, perhaps we can sort this out asynchronously, would be nice

[10:58:58.0000] <jsbell>
Yep to F2F + async/moving fast. AFK for a bit now

[11:48:48.0000] <mounir>
annevk: you remember the Permissions API, right? :)

[11:48:59.0000] <mounir>
annevk: does having static function on the Permissions object bother you?

[12:19:43.0000] <annevk>
mounir: for persistent storage?

[12:20:24.0000] <annevk>
mounir: doesn't really make sense I think as it's mostly about changing a storage mode that involves a dialog

[12:47:59.0000] <mounir>
annevk: no, permissions api

[12:48:34.0000] <mounir>
annevk: instead of having navigator.permissions.* it has static methods living in the interface

[12:48:52.0000] <mounir>
given that there are no states, it sounds nicer but I wonder if that's a shared opinion

[13:04:23.0000] <annevk>
mounir: I don't really care, Notifications API did set such a precedent

[13:04:47.0000] <annevk>
mounir: I'm still not really sure I want a generic API for permissions

[13:05:46.0000] <mounir>
annevk: I understand that, but you still might have an opinion

[13:05:55.0000] <mounir>
annevk: would you change the Notifications API if you could?

[13:06:04.0000] <annevk>
wanderview: https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Frecency_algorithm seems interesting

[13:06:18.0000] <annevk>
wanderview: reportedly the HTTP cache uses that rather than LRU

[13:06:31.0000] <annevk>
mounir: ooh no, I think it's okay this way

[13:06:53.0000] <annevk>
mounir: ideally most of this stuff is in modules, but statics seems like a good second

[13:09:34.0000] <mounir>
great

[13:09:44.0000] <mounir>
glad to hear we agree :)

[16:21:58.0000] <MikeSmith>
annevk: I wanted to ask you about a mixed-content issue if you're still awake


2015-03-17
[17:46:57.0000] <smaug____>
jgraham: are the wpt tests for websockets?

[17:47:01.0000] <smaug____>
websockets in workers

[19:55:00.0000] <Domenic>
mounir: iis Permissions constructible? Seems bad to have statics if not.

[21:24:41.0000] <MikeSmith>
if there's somebody around here who's familiar with Apache's HTTPClient stuff and could sanity-check-level review of https://github.com/validator/validator/commit/ce45db603aa77fa5809044e4e1d82c9431fd8b7f#diff-c9f54b9fc478b7db28d3e3443278ac49R122 I'd really appreciate it

[21:25:34.0000] <MikeSmith>
I think I got it right but I'm not an idiomatic Java programmer and the set up APIs involved there is just baroque

[21:28:31.0000] <MikeSmith>
in particular despite having read through a ton of their docs, I really don't have a clear idea of how the threading behavior here not what the thread-safety precautions I need to be taking in the rest of my application code as a result of using their pooling connection manager here vs whatever the default connection manager is otherwise

[21:29:42.0000] <MikeSmith>
in fact from their their docs I can't even tell what connection manageer it uses by default otherwise, or if it even has a name or even if it's using a "connection manager" in the default case at all

[23:18:25.0000] <annevk>
MikeSmith: awake now

[00:44:29.0000] <annevk>
So https://twitter.com/brucel/status/577504998256484352 is cool, but unless they figure out how to run Chromium in the cloud for cheap, they're still running abandonware, just a little newer abandonware...

[01:05:32.0000] <zcorpan>
smaug____: it seems not

[01:07:25.0000] <MikeSmith>
annevk: so please see https://vnu.herokuapp.com/?showimagereport=yes&doc=http%3A%2F%2Fxkcd.com%2F

[01:07:48.0000] <MikeSmith>
...which uses the "Image report" feature of the validator

[01:21:28.0000] <annevk>
MikeSmith: ah yeah, you'd have to proxy those images or live with the warning

[01:22:16.0000] <MikeSmith>
annevk: ok

[01:23:05.0000] <annevk>
MikeSmith: it's a goal of sorts to eventually disallow those kind of images too, so I guess you should try to think about a proxy or blocking insecure images

[01:23:18.0000] <annevk>
MikeSmith: generating a warning for sites that don't use HTTPS might also be a good idea

[01:23:38.0000] <annevk>
MikeSmith: some integration with ssllabs perhaps?

[01:26:59.0000] <MikeSmith>
annevk: maybe down the road

[01:27:19.0000] <MikeSmith>
short term, I fell like it would just annoy people and make them not want to use the validator

[01:27:46.0000] <MikeSmith>
if we start giving them warnings I mean

[01:28:03.0000] <annevk>
or some kind of tip thing

[01:28:19.0000] <annevk>
perhaps wait for let's encrypt to launch

[01:28:25.0000] <MikeSmith>
yeah I guess I could add something unobtrusive

[01:29:07.0000] <MikeSmith>
yeah

[01:29:25.0000] <MikeSmith>
I wonder if there are any image proxying services

[01:29:40.0000] <MikeSmith>
hosted image proxying

[01:44:11.0000] <MikeSmith>
annevk: https://sideshowbarker.net/tests/proxied-image.html

[01:46:21.0000] <MikeSmith>
using a google image proxying service described at https://carlo.zottmann.org/2013/04/14/google-image-resizer/

[01:46:37.0000] <MikeSmith>
the URL for the image is https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=http://imgs.xkcd.com/comics/arbitrage.png&container=focus

[01:47:17.0000] <MikeSmith>
which if you navigate to it you'll see has a Content-Disposition: attachment;filename=p.txt header

[01:47:41.0000] <MikeSmith>
but if you put it in a img[src] attribute it works

[01:48:09.0000] <MikeSmith>
so I could actually have the validator use that

[02:45:54.0000] <MikeSmith>
actually using some third-party thing is bad; better to just convert the images to base64 and just use data URIs

[02:46:41.0000] <annevk>
MikeSmith: if you convert them you need to use a proxy, no?

[02:47:51.0000] <MikeSmith>
why? I serve them as data URIs

[02:48:05.0000] <MikeSmith>
am I missing something?

[02:51:21.0000] <annevk>
MikeSmith: isn't your server then fetching them first to convert them into such URLs?

[02:51:51.0000] <annevk>
MikeSmith: as in, isn't your server then acting as a proxy?

[03:00:21.0000] <MikeSmith>
annevk: ah yeah on the backend— but it would just be a matter of reading them into a byte array then converting that to base64 to put into a data to URI. it would otherwise not be persisting the images or making them available at some new URL. so, not an open proxy but just a per-session/transection/request proxy. that is, nothing but the response document I return would have access to the converted im

[03:00:27.0000] <MikeSmith>
age

[03:01:14.0000] <MikeSmith>
well, except of course as a data URI that anybody could manually copy

[03:15:15.0000] <zcorpan>
MikeSmith: what would that do to the load on the validator server to have to fetch and send lots of images?

[03:19:46.0000] <zcorpan>
how often is the image report used?

[03:20:08.0000] <MikeSmith>
zcorpan: not used much, I think

[03:20:33.0000] <MikeSmith>
I can imagine it might be a load problem if it were used a lot

[03:20:58.0000] <MikeSmith>
but in practice, it's not

[03:22:09.0000] <MikeSmith>
plus, the w3c instances are running on relatively beefy hardware

[03:58:29.0000] <annevk>
/me wonders how far TabAtkins is with converting DOM

[03:58:46.0000] <Ms2ger>
I thought he was done

[03:59:47.0000] <Ms2ger>
> Jeezus, I finally reached the end of DOM. All 9k+ lines (WHAT, 9000?!?) converted. Now it's time to fix all the errors.

[03:59:56.0000] <annevk>
Aah

[04:00:01.0000] <annevk>
Errors :-)

[04:40:39.0000] <ondras_>
hmm, text nodes can be event targets?

[04:41:50.0000] <Ms2ger>
Sure

[04:43:03.0000] <ondras_>
so inside a "click" event handler, e.target.nodeType can be 3, right?

[04:43:19.0000] <ondras_>
interesting, I would say I never encountered this

[04:44:05.0000] <Ms2ger>
I didn't say that

[04:44:34.0000] <Ms2ger>
You can dispatch events at text nodes, but that doesn't imply the browser actually does that

[04:44:57.0000] <ondras_>
right

[04:44:58.0000] <ondras_>
http://jsfiddle.net/ondras/6sa3gm9n/

[04:45:07.0000] <ondras_>
clicking on <p> results in p being the target

[04:45:12.0000] <ondras_>
but I have a different, complex web page

[04:45:17.0000] <ondras_>
where the e.target is #text

[04:48:45.0000] <ondras_>
Ms2ger: can you please elaborate on when and why can this happen?

[04:48:54.0000] <Ms2ger>
I don't know

[04:49:26.0000] <annevk>
I think it's when you actually click on the text rather than next to it

[04:49:41.0000] <annevk>
But hey, nobody has defined hit testing

[04:49:49.0000] <annevk>
Also something about me being a broken record

[04:50:39.0000] <ondras_>
the situation in question happened to me when clicking inside a "calendar" widget, that is implemented as a <table>

[04:50:46.0000] <ondras_>
but http://jsfiddle.net/ondras/6sa3gm9n/1/ does not exhibit this behavior

[04:51:01.0000] <ondras_>
perhaps it is somehow related to the fact that the calendard widget disappears when clicked

[04:58:25.0000] <zcorpan>
MikeSmith: w3c block is still there btw

[05:00:24.0000] <zcorpan>
ondras_: do you have a link to the page where it happens?

[05:00:46.0000] <ondras_>
zcorpan: probably not, let me try to find a publicly accessible version

[05:01:36.0000] <ondras_>
zcorpan: so yes, I can reproduce it. But I will need to give you a specific guidance :)

[05:01:48.0000] <ondras_>
zcorpan: first, open http://mapy.cz/zakladni?planovani-trasy&x=16.8616839&y=49.9455682&z=6&rc=9iCMYxXmd-&rl=Nov%C3%A1%20Ves%20I%2C%20okres%20Kol%C3%ADn&rl=&rp={%22criterion%22%3A%22pubt%22%2C%22departure%22%3Atrue%2C%22time%22%3A%22%22%2C%22date%22%3A%2205.03.2015%22}

[05:01:59.0000] <zcorpan>
(in firefox?)

[05:02:02.0000] <ondras_>
yes.

[05:02:14.0000] <zcorpan>
check

[05:02:32.0000] <ondras_>
zcorpan: then, click the input with 05.03.2015 in it

[05:02:37.0000] <ondras_>
this opens the calendar widget.

[05:02:49.0000] <ondras_>
clicking its day cells results in the weird event

[05:02:50.0000] <ondras_>
BUT

[05:02:56.0000] <ondras_>
the website has "console" overriden

[05:03:00.0000] <ondras_>
so console.log does nothing

[05:03:09.0000] <ondras_>
to enable that, please do console.DEBUG=1

[05:03:47.0000] <ondras_>
so something like

[05:03:48.0000] <ondras_>
console.DEBUG=1; document.addEventListener("click", function(e) { console.log(e.target); })

[05:03:55.0000] <ondras_>
does the trick. then just open the calendar, click a day...

[05:03:58.0000] <ondras_>
#text :)

[05:05:15.0000] <MikeSmith>
zcorpan: please send a message to sysreq⊙wo asking to be unblocked, and cc me (and mention that the block has persisted over several days)

[05:05:23.0000] <zcorpan>
ondras_: i get the <td>

[05:05:36.0000] <MikeSmith>
GPHemsley: can you please install https://www.mediawiki.org/wiki/Extension:ExternalRedirect

[05:05:40.0000] <zcorpan>
MikeSmith: ok

[05:06:29.0000] <GPHemsley>
MikeSmith: That seems risky... where are you looking to redirect?

[05:06:40.0000] <MikeSmith>
write-only pages

[05:06:52.0000] <MikeSmith>
it works only for write-only pages

[05:07:09.0000] <GPHemsley>
still, please present your usecases :)

[05:07:22.0000] <MikeSmith>
GPHemsley: the Validator-related pages, to redirect to equivalents in https://github.com/validator/validator/wiki

[05:08:01.0000] <MikeSmith>
that reminds me, I need to mark the current ones as write-only now

[05:08:11.0000] <MikeSmith>
/me wonders if I have perms to do that

[05:08:36.0000] <GPHemsley>
MikeSmith: It seems what you really want is an Interwiki namespace

[05:08:43.0000] <GPHemsley>
https://www.mediawiki.org/wiki/Extension:Interwiki

[05:09:00.0000] <ondras_>
zcorpan: I get the <td> when I click the empty space around a number. But when clicking the "5" directly, for instance, I get #text

[05:09:22.0000] <ondras_>
zcorpan: ff 36.0.1 @ linux

[05:09:53.0000] <MikeSmith>
GPHemsley: ah ok, will take a look

[05:09:55.0000] <MikeSmith>
thanks

[05:09:57.0000] <ondras_>
zcorpan: looks like it happens only on those <td>s where clicking hides the widget

[05:10:28.0000] <zcorpan>
ondras_: i still get the <td>. have nightly 39.0a1 (2015-03-11) on mac os x 10.10.1

[05:10:35.0000] <ondras_>
hm

[05:10:43.0000] <ondras_>
not sure what to do now.

[05:10:47.0000] <zcorpan>
don't have 36 to check :-)

[05:10:58.0000] <ondras_>
/me does not have neither nightly nor macosx

[05:11:00.0000] <MikeSmith>
GPHemsley: hmm that seems more complicated by a good measure

[05:11:34.0000] <GPHemsley>
How so?

[05:12:34.0000] <zcorpan>
ondras_: i had firefox *26*, and can reproduce there

[05:12:47.0000] <ondras_>
zcorpan: ah, nice!

[05:13:29.0000] <GPHemsley>
MikeSmith: This extension is a known entity to me, and I think it will solve your usecase.

[05:13:40.0000] <MikeSmith>
GPHemsley: oh wait I think I was misunderstanding what that does

[05:13:54.0000] <MikeSmith>
GPHemsley: yeah agreed, after actually taking time to read it

[05:13:58.0000] <MikeSmith>
this is the right solution

[05:14:43.0000] <GPHemsley>
MikeSmith: Is this an urgent request? Because I don't have the time to install it right now?

[05:14:47.0000] <GPHemsley>
-?

[05:15:09.0000] <zcorpan>
ondras_: the text node's parentNode is null according to devtools

[05:15:30.0000] <MikeSmith>
GPHemsley: not urgent at allーvery low priority

[05:15:36.0000] <GPHemsley>
OK, cool

[05:15:52.0000] <GPHemsley>
I'll include it in my maintenance whenever I get to it

[05:16:20.0000] <MikeSmith>
GPHemsley: superーthanks!

[05:16:24.0000] <GPHemsley>
MikeSmith: In the meantime, you might find this template useful: https://wiki.whatwg.org/wiki/Template:Obsolete

[05:16:36.0000] <MikeSmith>
/me looks

[05:16:49.0000] <MikeSmith>
ah good

[05:17:04.0000] <MikeSmith>
thanks for that too

[05:20:52.0000] <ondras_>
zcorpan: ah, okay then

[05:20:58.0000] <ondras_>
zcorpan: will try adjusting that

[05:23:03.0000] <mounir>
smaug____: you would prefer window.Permissions or window.permissions?

[05:36:53.0000] <GPHemsley>
Anyone have any insight into this proposal for a 'font' top-level MIME type? http://dev.w3.org/webfonts/WOFF2/spec/#IMT

[05:38:26.0000] <GPHemsley>
Editors:

[05:38:27.0000] <GPHemsley>
    Vladimir Levantovsky (Monotype)

[05:38:27.0000] <GPHemsley>
    Raph Levien (Google)

[05:45:00.0000] <smaug____>
mounir: I don't have preference

[05:49:03.0000] <smaug____>
mounir: is this all for now about Permissions?

[05:49:24.0000] <smaug____>
mounir: are we sure we don't want the API to implement or extend some other interface

[05:49:39.0000] <smaug____>
in such case singleton might work better

[05:56:45.0000] <zcorpan_>
jgraham: Ms2ger: https://github.com/operasoftware/presto-testo/pull/43

[06:31:12.0000] <mounir>
smaug____: how so? I mean, do you have an interface in mind?

[06:31:36.0000] <smaug____>
mounir: say, you want to handle events for some reason

[06:31:48.0000] <smaug____>
like, get observed when some permission changes

[06:32:28.0000] <mounir>
smaug____: yes, in such case, we might want to live in navigator.

[06:32:41.0000] <smaug____>
why

[06:32:53.0000] <smaug____>
where did you get navigator here?

[06:33:05.0000] <mounir>
smaug____: sorry, I thought taht's what you meant

[06:33:10.0000] <mounir>
what did you mean?

[06:33:21.0000] <smaug____>
mounir: just thinking about whether to use interface + static methods

[06:33:26.0000] <smaug____>
or singleton object

[06:34:28.0000] <mounir>
smaug____: ok, I was just assuming that the singleton would live in navigator

[06:34:44.0000] <mounir>
there are no plans in having anything else than static methods

[06:34:53.0000] <smaug____>
right

[06:34:54.0000] <mounir>
obviously, that could change but for now, the plan is to have that interface state less

[06:35:02.0000] <mounir>
if things change, it would be forward compatible

[06:35:14.0000] <smaug____>
singleton would be

[06:35:19.0000] <mounir>
yes

[06:35:23.0000] <smaug____>
interface + static methods might not be

[06:37:22.0000] <zcorpan_>
heh, try{top.opener.rr(result);}catch(e){} is still in my muscle memory

[07:26:01.0000] <wanderview>
annevk: does it still make sense to expempt HEAD in step 4 here?  https://github.com/slightlyoff/ServiceWorker/issues/653#issuecomment-82153813

[07:26:13.0000] <wanderview>
since we can only put GET methods into the Cache by default?

[07:26:25.0000] <wanderview>
or does HEAD normally equate to a GET

[07:26:27.0000] <wanderview>
?

[07:48:46.0000] <annevk>
wanderview: can I get you to comment on my Storage wiki page first? :p

[07:49:00.0000] <annevk>
/me looks

[07:49:56.0000] <wanderview>
annevk: I did glance at it before... I'll look again before our meeting today

[07:51:01.0000] <annevk>
wanderview: HEAD usually does the same as GET, except that the server does not return the body

[07:51:08.0000] <wanderview>
k

[07:51:10.0000] <annevk>
wanderview: what does the cache API do?

[07:51:20.0000] <wanderview>
annevk: as far as I know Cache returns the body too

[07:51:30.0000] <annevk>
wanderview: we might want to change that

[07:51:35.0000] <wanderview>
at least, we do... and I believe thats what the spec says

[07:51:53.0000] <annevk>
wanderview: I can file a bug on the spec

[07:53:10.0000] <annevk>
wanderview: https://github.com/slightlyoff/ServiceWorker/issues/655

[07:57:36.0000] <wanderview>
annevk: I'm not sure if Cache should really block them from getting the body in that case... seems like content script could do this themselves

[08:00:31.0000] <annevk>
wanderview: but why then do we pay attention to method at all?

[08:00:53.0000] <wanderview>
annevk: because you can only store GETs in a cache right now

[08:00:55.0000] <annevk>
wanderview: then HEAD should do the same as POST

[08:01:31.0000] <wanderview>
annevk: I guess I don't feel strongly either way

[08:02:07.0000] <annevk>
wanderview: the point of doing HEAD is that it can be a whole lot cheaper

[08:02:17.0000] <annevk>
wanderview: e.g. if the server stores metadata and files separately or some such

[08:02:44.0000] <annevk>
wanderview: in case of Cache you could imagine setting up a simpler Response object structure...

[08:02:55.0000] <annevk>
wanderview: seems weird to allow HEAD but then give it identical semantics to GET

[08:03:12.0000] <wanderview>
annevk: I guess it makes sense if someone is just doing a simple respondWith(cache.match(event.request)); and it ends up intercepting a HEAD request

[08:03:35.0000] <wanderview>
annevk: its not really a problem for me to implement... I already support Response without a body as you can synthetically create one

[08:07:53.0000] <annevk>
wanderview: I guess it's up to JakeA if he's still maintaining that specification

[08:08:17.0000] <annevk>
wanderview: we did discuss moving the Cache API into Fetch at some point, but that hasn't really materialized yet

[08:08:17.0000] <wanderview>
annevk: he should be?  has he said otherwise?

[08:08:55.0000] <annevk>
wanderview: yeah, I think so

[08:43:11.0000] <wanderview>
annevk: do you have particular questions for me in relation to the storage wiki?  I generally like where we are going, but I'm still nervous about nag popups

[08:44:07.0000] <annevk>
wanderview: I was wondering whether you had seen https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Frecency_algorithm and to what extent we should consider aligning storage and the HTTP cache in terms of algorithms and quota

[08:44:19.0000] <annevk>
wanderview: but also any comments/concerns on the API

[08:45:47.0000] <wanderview>
annevk: my gut feeling is we should try not to couple ourselves tightly to HTTP cache... it seems particularly performance sensitive for the whole browser and they should be free to experiment/change based on real life usage

[08:46:11.0000] <wanderview>
annevk: so we could borrow ideas from there, but maybe not count on them staying aligned

[08:46:34.0000] <annevk>
wanderview: it seems weird that we'd drop the HTTP cache but not localStorage if both are best effort

[08:46:43.0000] <wanderview>
annevk: the Frecency thing strikes me as too detailed and specific to go in a spec (is that an ironic statement?)

[08:46:58.0000] <annevk>
wanderview: I didn't mean that as being part of a spec necessarily

[08:47:24.0000] <annevk>
wanderview: just wondering that if "best effort" drops storage, should it drop HTTP cache as well? And vice versa

[08:47:31.0000] <wanderview>
annevk: http cache makes zero guarantees, though... for example, if you get two responses that match a request based on VARY headers... http cache in gecko only stores the last one you visit

[08:47:51.0000] <wanderview>
annevk: I would vote no, to start... we could allow it, but not require it

[08:48:21.0000] <wanderview>
annevk: at least in gecko, the http cache is a carefully tuned thing that is wholely separate from all our other storage implementations

[08:48:34.0000] <annevk>
wanderview: yeah I'm not really talking about at spec-level

[08:48:57.0000] <annevk>
wanderview: mostly wondering whether it makes sense for the browser to do such a thing

[08:49:30.0000] <wanderview>
annevk: the main thing I want in relation to http cache is the ability to de-duplicate a thing in Cache with a file in the http cache...

[08:49:46.0000] <wanderview>
thats pretty impossible in gecko today, though

[08:50:20.0000] <annevk>
wanderview: yeah, and it seems you'd want the HTTP cache to have the same scope as other storage

[08:51:02.0000] <annevk>
wanderview: it doesn't have to have the same reliability but infrastructure-wise it seems a lot could should? be shared

[08:55:46.0000] <wanderview>
annevk: the reality is I don't think we want them to be shared... http cache has tighter performance constraints that might make it take different design paths than DOM APIs

[08:56:11.0000] <wanderview>
and it shouldn't be constrained by those mostly unrelated DOM APIs

[08:56:24.0000] <wanderview>
just my opinion of course

[08:56:32.0000] <annevk>
wanderview: with service workers it seems HTTP cache and Cache have near identical considerations

[08:57:08.0000] <wanderview>
annevk: Cache is spec'd as to how it behaves and what it must store... that will always make it slower than HTTP cache that can cut corners based on real-world usage data

[08:57:39.0000] <wanderview>
annevk: dropping this like the prefixMatch from Cache has made it closer to http cache, though

[08:57:44.0000] <wanderview>
^this^things

[11:25:37.0000] <TabAtkins>
annevk: Yeah, done with the conversion, just got a lot of link failures to address.  And it's uncovered a lingering unicode bug in Bikeshed I need to fix.

[11:26:10.0000] <annevk>
hah yay

[11:35:30.0000] <TabAtkins>
Thanks for letting me take all this time. This is a big spec, and getting it fixed up properly and into Shepherd will help a lot of people trying to write specs that touch the DOM.

[12:40:39.0000] <wanderview>
annevk: do you understand vary headers?  (or anyone else)

[12:40:55.0000] <wanderview>
does step 9.5.1 of this look right?  https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#query-cache-algorithm

[12:41:19.0000] <wanderview>
shouldn't a vary header value of * immediately match the response?

[12:42:10.0000] <wanderview>
JakeA: does it look right to you? ^^^

[14:05:37.0000] <annevk>
wanderview: isn't it easier to read the Vary spec?

[14:06:12.0000] <wanderview>
annevk: I don't think the official VARY spec allowed * to mixed with other values at all

[14:06:30.0000] <annevk>
wanderview: shouldn't we do the same then?

[14:06:35.0000] <wanderview>
annevk: I only ask about this because gecko's implementation of vary:*,otherheader does something slightly different than the SW spec

[14:06:47.0000] <wanderview>
annevk: I have no idea... I'm new here

[14:07:08.0000] <annevk>
wanderview: I think in principle we should match the semantics of the HTTP specification

[14:07:18.0000] <wanderview>
annevk: it seems for web compat we have to support * mixed with other values... or maybe it changed at some point and I am looking at something out of date

[14:07:24.0000] <annevk>
wanderview: whenever we deviate, we should file a GitHub issue

[14:07:37.0000] <annevk>
wanderview: if that's true, we should point out in the specification why we deviate

[14:07:53.0000] <wanderview>
annevk: where is the most up-to-date VARY spec?

[14:08:08.0000] <wanderview>
the internet appears littered with stale specs

[14:08:30.0000] <annevk>
wanderview: I guess https://tools.ietf.org/html/rfc7231#section-7.1.4 would be it

[14:08:48.0000] <wanderview>
yea, thats what I read

[14:08:53.0000] <wanderview>
I'll open a SW spec issue

[14:09:34.0000] <annevk>
ta

[14:09:51.0000] <annevk>
I guess I should do a more detailed review of Cache at some point

[14:12:27.0000] <seth_>
zcorpan: so what's the next step for this issue? https://www.w3.org/Bugs/Public/show_bug.cgi?id=28096

[14:13:32.0000] <seth_>
zcorpan: i'm fairly keen to implement loadend for multipart/x-mixed-replace images in gecko, but only if i'm fairly confident this will stick

[14:14:54.0000] <annevk>
seth_: do all browsers support multipart/x-mixed-replace?

[14:15:00.0000] <wanderview>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/656

[14:15:30.0000] <seth_>
annevk: IE does not support multipart images

[14:16:28.0000] <seth_>
in general support for multipart/x-mixed-replace images and documents seems to be shrinking everywhere, but i suspect we will end up being stuck with at least the subset necessary to display JPEG webcams

[14:16:44.0000] <annevk>
seth_: how does IE do those webcams?

[14:17:05.0000] <seth_>
annevk: people have hacks, like reloading the image in JS on a timer

[14:17:12.0000] <annevk>
seth_: it seems though that if in general usage is subpar we shouldn't be putting effort into them

[14:18:05.0000] <seth_>
annevk: i generally agree, yes, but i think this is one specific case where we should specify something that is useful as opposed to something totally non-useful

[14:18:31.0000] <seth_>
annevk: there's not a huge implementation cost for firing loadend

[14:19:23.0000] <seth_>
annevk: now if you want to talk about removing them from the spec altogether, i could certainly get behind that =) but whatever we do specify should be useful

[14:19:51.0000] <annevk>
seth_: yeah, I figured we could maybe try removing unused formats

[14:20:00.0000] <annevk>
seth_: or land in the same code path as IE

[14:20:14.0000] <annevk>
if it's a dead end anyway taking a small perf hit doesn't seem too bad

[14:20:15.0000] <JakeA>
wanderview: the intent in the SW spec is to ignore vary *

[14:20:33.0000] <JakeA>
(sorry IRC cloud keeps randomly not giving me notifications)

[14:20:40.0000] <annevk>
JakeA: question is about "Vary: *, x" which is technically illegal

[14:20:44.0000] <wanderview>
JakeA: uh... it doesn't do that does it?

[14:20:58.0000] <seth_>
annevk: browser sniffing makes it hard, but in gecko we're moving in the direction of only supporting JPEG parts, and requiring that they all be the same size. that lets us treat them as just another animated image format, which is not so bad

[14:21:28.0000] <seth_>
annevk: chrome removed support for multipart/x-mixed-replace documents, and i'm pushing to have us follow them on that, so then what we're left with is the webcam subset

[14:21:58.0000] <annevk>
seth_: as long as we don't expect all browsers to align on something we implement we're potentially shooting ourselves in the (long term) foot

[14:22:17.0000] <JakeA>
wanderview: hmm, ok, probably needs fixing. Vary: * struck me as pretty uncacheable and likely just to bloat the cache, so I figured avoiding it would be best. Do you think it's useful?

[14:22:49.0000] <wanderview>
JakeA: I barely understand VARY (raises confidence in the gecko Cache implementation, I know)

[14:22:50.0000] <annevk>
seth_: and if we add features to features that are not widely supported we risk developers creating more content specifically for Gecko...

[14:22:52.0000] <zcorpan>
seth_: do you want just the loadend event?

[14:23:15.0000] <wanderview>
JakeA: it seems VARY:* is treated as a match, right?

[14:23:16.0000] <JakeA>
wanderview: Vary is pretty crazy. I didn't know too much about it before I did the cache design

[14:23:26.0000] <seth_>
annevk: yep. we're actually shrinking what we're supporting, and i think that chrome and us will end up in the same place. the one exception is the loadend event, which i really think is worth adding

[14:23:38.0000] <annevk>
JakeA: famous last words

[14:23:39.0000] <seth_>
zcorpan: i don't view the progress events as important, really. i'm mostly concerned about the loadend event

[14:23:55.0000] <annevk>
seth_: mkay, up to you I guess

[14:24:05.0000] <JakeA>
wanderview: I was intending Vary:* to be matched as if Vary wasn't there, but maybe that got lost in the spec

[14:24:10.0000] <annevk>
wanderview: JakeA: I recommend asking mnot / jreschke

[14:24:32.0000] <zcorpan>
seth_: can you check if another browser vendor is interested in implementing it?

[14:24:41.0000] <annevk>
wanderview: JakeA: mnot / reschke on GitHub

[14:25:21.0000] <seth_>
zcorpan: yeah, that seems like the next step

[14:25:25.0000] <JakeA>
annevk: cheers, added to todos

[14:25:59.0000] <JakeA>
annevk: and appologies for inactivity on tickets of late. Two week holiday and thrown straight into conference (and employee review \o/)

[14:26:14.0000] <JakeA>
Maybe I'll be fired before I get to it

[14:26:31.0000] <annevk>
JakeA: you've not contributed to mobile performance?

[14:26:58.0000] <seth_>
zcorpan: probably if blink would take it, we're ok. i'm not sure if the appropriate engineers follow the whatwg mailing list or bugtracker, though...

[14:27:23.0000] <JakeA>
annevk: just joking, but it's a lengthy process (if you're trying to go for promotion, which I am)

[14:27:33.0000] <annevk>
JakeA: I was hoping you'd be drinking beer someplace not worrying much about the web and such

[14:27:35.0000] <JakeA>
annevk: and I didn't know the deadline was today until today

[14:27:45.0000] <annevk>
oh boy

[14:27:53.0000] <annevk>
good luck

[14:28:01.0000] <JakeA>
I'm going to do beer tomorrow :D

[14:28:10.0000] <wanderview>
JakeA: I think if a * is encountered in step 9.5.1 we want to exit the step 9 loop and keep the match... if I understand your intention correctly:  https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#query-cache-algorithm

[14:28:17.0000] <annevk>
if you still need an external vote of approval, they know how to find me

[14:28:20.0000] <wanderview>
JakeA: that is also what gecko does in its http impl

[14:28:55.0000] <wanderview>
sorry...I have to run...

[14:28:58.0000] <wanderview>
JakeA: good luck!

[14:29:03.0000] <JakeA>
Cheers!

[14:29:35.0000] <JakeA>
annevk: cheers, I'll see if there's a way to do that. It seems awfully internal-centric

[14:30:12.0000] <zcorpan>
seth_: yeah it's probably better to email the relevant people directly. the cc list of https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/hMNb2utmh_s might contain someone relevant (or yoavweiss)

[14:32:46.0000] <seth_>
zcorpan: thanks, i'll try that

[14:33:04.0000] <seth_>
zcorpan: i'm tempted to subscribe to blink-dev so i can contribute to that thread as well =)

[14:33:18.0000] <zcorpan>
seth_: do it :-)

[14:34:45.0000] <smaug____>
seth_: plenty of mozillians in that list too

[14:35:07.0000] <smaug____>
need to watch what crazy ideas blink'ers have ;)

[14:35:15.0000] <seth_>
smaug____: heh, i guess there's precedent then =)

[14:47:52.0000] <seth_>
zcorpan: my best guess is that noel gordon is a good starting point. it seems that google groups censors everyone's full email addresses, though. do you have noel's email?


2015-03-18
[17:15:52.0000] <wanderview>
JakeA++ for dealing with twitter storm

[03:46:18.0000] <annevk>
Hmm, is it "a HTTP/TCP/UDP API" or "an HTTP/TCP/UDP API"?

[04:04:32.0000] <_francisco>
annevk: ping

[04:05:03.0000] <annevk>
_francisco: I'm around

[04:05:13.0000] <annevk>
/me prefers http://www.nohello.com/

[04:05:48.0000] <_francisco>
annevk: will take that in mind

[04:07:15.0000] <_francisco>
annevk: i'm working with serviceworks in b2g, testing to intercept post and put request, but had some problems with the body of those request, bkelly told me that are not part of the standard, just get request are, and wanted to double check

[04:08:15.0000] <annevk>
_francisco: you can't cache non-GET requests, but they should work when it comes to interception

[04:08:45.0000] <annevk>
_francisco: there should be a fetch event for them, for instance

[04:10:23.0000] <_francisco>
annevk: was planning to use http verbs to modify the content of the cache, in chrome was able to intercept the post request, but wasn't able to read the request body, an implementation problem I guess, same in gecko, https://bugzilla.mozilla.org/show_bug.cgi?id=1134325

[04:12:01.0000] <annevk>
_francisco: a simple request.text() does not work? That sounds very broken :-(

[04:13:02.0000] <_francisco>
annevk: right, tried that, also tried to read directly from the stream reader, and no luck

[04:13:53.0000] <annevk>
_francisco: stream reader?

[04:16:12.0000] <_francisco>
annevk: sorry :(, the body, i was trying to read directly the body and no luck either

[04:16:32.0000] <annevk>
_francisco: I don't think we expose the body yet

[04:16:42.0000] <_francisco>
annevk: that explains what then :)

[04:16:50.0000] <annevk>
_francisco: you have to use .blob() .text() .json()

[04:17:04.0000] <annevk>
_francisco: then wait for the promise to resolve, etc.

[04:17:21.0000] <_francisco>
annevk: tried with .text() setting the request headers to text/plain, and no promise resolved :(

[04:23:55.0000] <_francisco>
annevk: another question, sorry if this is a stupid one, what's the reason why non-GET request cannot be cached?

[04:24:18.0000] <annevk>
_francisco: I think the main reason is that it's unclear how that would work semantically

[04:24:39.0000] <annevk>
_francisco: e.g. a POST is typically expected to clear the cache entry for that URL or some such

[04:37:23.0000] <MikeSmith>
does substack normally behave in a caustic and uncivil way or the twitter stuff from yesterday out of character?

[04:38:26.0000] <MikeSmith>
also does he usually express himself in a way that's entirely devoid of wit and humor

[04:38:46.0000] <annevk>
I'm not sure, but he's from the Node.js community I think, which already had a bad rep with standards

[04:40:28.0000] <MikeSmith>
annevk: from what I've seen I think the Nodes.js community doesn't have a bad rep with standards, but instead a couple of influential individuals within the community try to get others to share their anger and hate

[04:41:08.0000] <MikeSmith>
annevk: plus a lot of the isn't directed at standards but instead at people working on standards

[04:41:17.0000] <MikeSmith>
or just, at people

[04:41:30.0000] <annevk>
Yeah dunno, seems he's over it: https://twitter.com/substack/status/578003665727852544

[04:42:16.0000] <MikeSmith>
I can still remember the days when slightlyoff was pretty outspoken about how browser vendors were doing things, but he was always a lot more civil and articulate about it

[04:44:25.0000] <MikeSmith>
annevk: that tweet's cool but before he got to that point he just scattered out a lot of bad energy and hate toward people who are trying to fix the very stuff he's hating on about

[04:44:41.0000] <MikeSmith>
I mean I realize he feels strongly about this stuff, and that's good

[04:45:40.0000] <MikeSmith>
but he might have the human courtesy to imagine that the people he was directing all that at care a lot about it to and don't have their heads way up there asses the way he makes it sound

[04:45:43.0000] <annevk>
I have a hard time getting upset over a rant from someone who hasn't even done basic fact checking

[04:46:08.0000] <MikeSmith>
well the thing is, in terms of the work he does, that guy is a major force for good

[04:46:19.0000] <MikeSmith>
gotta have deep respect for the work he's done

[04:46:34.0000] <MikeSmith>
he's not some uninformed fool

[04:46:53.0000] <Ms2ger>
So a Linus type?

[04:47:09.0000] <MikeSmith>
Ms2ger: dunno

[04:47:17.0000] <MikeSmith>
but there's no shortage of those I guess

[04:47:24.0000] <MikeSmith>
it's the rule, not the exception

[04:48:45.0000] <MikeSmith>
I guess what is exceptional is that we have people like JakeA who put their hearts into responding thoughtfully instead of just ignoring them or fanning the flames

[04:49:34.0000] <MikeSmith>
anyway I wish more people would take time to think about the fact that real people are on the other end of their hate gun

[04:50:01.0000] <MikeSmith>
even when they think they're directing their hate toward abstract entities

[04:51:09.0000] <MikeSmith>
and thank god for JakeA

[04:59:47.0000] <smaug____>
Ms2ger: Linus type? Linus is fine

[05:07:30.0000] <annevk>
MikeSmith: yeah, I replied too https://twitter.com/annevk/status/577759092065832960 but the guy ignored me

[05:11:15.0000] <MikeSmith>
annevk: you probably just caught him at one of the points where he had to stop to wipe the rage sweat off his brow

[05:11:49.0000] <MikeSmith>
annevk: btw I met hirano today

[05:12:49.0000] <annevk>
MikeSmith: cool

[05:23:08.0000] <annevk>
Chrome's unsung heroes from Tokyo

[05:27:06.0000] <MikeSmith>
annevk: indeed

[05:27:20.0000] <MikeSmith>
all very nice people

[05:27:26.0000] <MikeSmith>
along with being very clever

[05:27:40.0000] <MikeSmith>
Yoshino has a heart of gold as well

[05:46:55.0000] <annevk>
What's this W3CMemesExposed thing? Haha

[06:04:29.0000] <MikeSmith>
annevk: no idea but I admire the wit

[06:05:03.0000] <MikeSmith>
let a hundred flowers of W3C memery bloom

[06:05:26.0000] <JakeA>
MikeSmith: cheers! Going to print that and hang it on my wall

[06:09:41.0000] <MikeSmith>
JakeA: 😆

[06:12:34.0000] <annevk>
https://twitter.com/tomdale/status/578012373631430656 and https://twitter.com/tomdale/status/578012197206409216 are also spot on

[06:17:36.0000] <wanderview>
Domenic: am I just completely confused about being able to use native implementations of streams for things returned from DOM APIs?

[06:17:43.0000] <MikeSmith>
annevk: wow yeah

[06:25:08.0000] <annevk>
https://twitter.com/html5_yoda/status/545129883438166016

[06:36:54.0000] <Domenic>
wanderview: you should be able to ... just like promises, except instead of a tiny little `(resolve, reject) => { doRealWork(); }` function, we have a big ol' underlyingSource object with a few hooks.

[06:39:01.0000] <wanderview>
ok

[07:12:35.0000] <slightlyoff>
For some context: aspects of the node community (substack included) have been telling us *for years* that working on ES6, improving the platform, etc has all been a waste and using that as a reason not to engage in helping to make the designs better. Except now that we did it anyway, io.js is using ES6 features as marketing.

[07:13:58.0000] <slightlyoff>
So I don't want their feedback; not if it comes in a rageball. Will talk to the civil wing of the node world instead. Life is far too short.

[07:15:32.0000] <Domenic>
Ah, but isn't that tone policing? </sarcasm>

[07:16:13.0000] <Domenic>
https://twitter.com/substack/status/408293739665162240

[07:18:53.0000] <darobin>
there's so much energy spent replying to the hate there...

[07:21:17.0000] <MikeSmith>
slightlyoff: Thanks for the background. I'm glad to have missed the intervening years of bad vibes

[07:23:47.0000] <MikeSmith>
ah yes the tone policing card

[07:23:53.0000] <MikeSmith>
a key tool of the bigot

[07:24:43.0000] <MikeSmith>
tolerate mah bigotry!

[07:25:13.0000] <darobin>
it's a free country! I can be a jerk to you if I want to!

[07:27:29.0000] <MikeSmith>
yeah I cry now about all the times I've simple-mindedly been intolerant of their rights to abuse and demoralize nice people

[07:29:34.0000] <darobin>
hehehe

[07:39:46.0000] <MikeSmith>
darobin: btw the other trajectory/cycle here is where the abusive person does their abusive behavior and then in the end comes around to saying, I'm so sorry! ... til the next time two weeks later when they come back to abuse you again

[07:40:15.0000] <MikeSmith>
beat -> I'm sorry! cry/hug -> beat ...

[07:40:53.0000] <darobin>
yeah, that's a classic too

[08:42:25.0000] <MikeSmith>
https://twitter.com/console_dot_log

[08:42:52.0000] <MikeSmith>
https://twitter.com/console_dot_log/status/578054541901328384

[11:00:35.0000] <sambuddhabasu1>
can anyone help me with safari response headers?

[14:49:04.0000] <TabAtkins>
Ugh, I keep forgetting what type to use for an array-valued attribute.  This would be fully author-editable, but hopefully with a typecheck.

[14:49:16.0000] <TabAtkins>
Pretty sure I'm not allowed to use sequence<Foo> as an attribute type.

[14:52:19.0000] <TabAtkins>
Oh wait, the collection I want already exists.

[14:53:38.0000] <smaug____>
I thought array attributes issue isn't still solved

[14:53:43.0000] <TabAtkins>
It's not.

[14:53:44.0000] <TabAtkins>
:(

[14:53:53.0000] <heycam>
sorry :(

[14:54:26.0000] <heycam>
the plan is there though. just need to unbitrot the branch I made proposed changes in.

[14:54:32.0000] <TabAtkins>
I can sidestep it this time, because I can just use StyleSheetList.

[14:55:09.0000] <smaug____>
heycam: the plan is to freeze the array or what?

[14:55:49.0000] <smaug____>
and keep the array until the native side just happens to want to update it?

[14:56:34.0000] <heycam>
smaug____, yeah

[14:56:55.0000] <heycam>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=23682#c25

[16:29:54.0000] <rektide>
MikeSmith: thanks for your comments last week regarding my incindiary behavior on twitter re: push api.


2015-03-19
[17:00:27.0000] <MikeSmith>
rektide: positive vibrations

[17:06:15.0000] <rektide>
seeing an api key as the first thing in the sample for the latest greatest webspec... are there engineering specialized psychiatrists?

[17:06:56.0000] <rektide>
i want to be better, but i feel completely outgunned, unlistened to, with people driving things they want to drive with what seems to me like wanton disregard for all the good stuff we do have

[17:08:12.0000] <rektide>
i cant imagine a positive interaction cycle. unless i show up with something that works, that i've in my own time made happen, i have a hard time envisioning myself more than a receiver for someone elses vibrations

[17:12:48.0000] <MikeSmith>
rektide: yet other people are in there getting listened to and helping improve and fix things

[17:14:15.0000] <MikeSmith>
rektide: I think sometimes your rhetorical approach alienates people before they even have a chance to consider the substance of what you're proposing or the problems you're pointing out

[17:24:57.0000] <rektide>
I almost never see any serious spec realignments happen

[17:25:39.0000] <rektide>
I admittedly am far from a close follower, but coming back to most specs, they are from a consumer perspective or or less what they were when I saw them 6 months ago

[17:26:19.0000] <MikeSmith>
rektide: then I think you're not looking hard enough or you're not looking for the right things

[17:26:57.0000] <rektide>
I fully believe there's a lot of ahrd work and people getting things improved and fixed, but the molds get set, and ya'll should be thankful and delighted to have outsiders bringing up derivise by changes

[17:27:50.0000] <MikeSmith>
everybody's thankful for genuinely constructive feedback

[17:28:22.0000] <MikeSmith>
but nobody is thankful if somebody shows up and just shits all over everything and calls everybody idiots

[17:28:39.0000] <rektide>
well in this case i was very happy bringing shame down on this, yes.

[17:29:02.0000] <rektide>
but generally i try to hold my tongue and state some kind of stance that i think is important and i think is being overlooked

[17:29:22.0000] <rektide>
in a civil fashion

[17:30:08.0000] <MikeSmith>
well civility will get you a lot farther than shaming

[17:30:33.0000] <MikeSmith>
anyway I think if/when you can get Hixie's attention you might get more consideration

[17:31:07.0000] <MikeSmith>
because among other things I think he has thicker skin than the rest of us as far as this goes

[17:32:02.0000] <MikeSmith>
he doesn't often flip the bozo bit on anybody

[17:33:37.0000] <MikeSmith>
@poiuytds

[17:34:24.0000] <sambuddhabasu1>
can someone explain how iframe sandbox works?

[17:34:31.0000] <TabAtkins>
When someone is "very happy bringing shame down", that usually results in everyone immediately flipping their bozo bit.

[17:34:34.0000] <sambuddhabasu1>
Im trying for nested iframe to bypass CSP

[17:34:57.0000] <MikeSmith>
rektide: what TabAtkins just said

[17:34:59.0000] <TabAtkins>
sambuddhabasu1: The spec does a decent job of explaining it.  What's confusing you?

[17:35:12.0000] <sambuddhabasu1>
TabAtkins: can you link me to it?

[17:35:33.0000] <TabAtkins>
sambuddhabasu1: https://html.spec.whatwg.org/multipage/embedded-content.html#attr-iframe-sandbox

[17:35:42.0000] <sambuddhabasu1>
TabAtkins: can you help me bypass CSP either by nested iframe

[17:35:50.0000] <sambuddhabasu1>
or by using the iframe srcdoc attribute

[17:35:59.0000] <TabAtkins>
What are you trying to bypass CSP for?

[17:36:13.0000] <TabAtkins>
(Also, I probably can't help; I haven't had to mess with CSP before.)

[17:36:37.0000] <sambuddhabasu1>
TabAtkins: im making a safari extension and will need it for that

[17:37:03.0000] <TabAtkins>
What specifically are you trying to do that is being blocked by CSP, I mean?

[17:37:28.0000] <sambuddhabasu1>
TabAtkins: Im trying to inject an iframe with src of that of a local file packaged in the safari extension

[17:37:58.0000] <sambuddhabasu1>
but look like, safari handles CSP differently and the sites need a safari-extension explicitly in the CSP header for the extension to work

[17:38:56.0000] <rektide>
TabAtkins: people had reactions to EME, thought it did bad un-web things and degraded something precious to them. i think you have to not deny me my own feelings, deny me the ability to act publically, in ways the working groups might not like as some kind of tribute i have to offer to also work inside the group calmly, collectedly, respectfully.

[17:38:57.0000] <TabAtkins>
Is CSP preventing some inline scripts from running, or something?

[17:40:21.0000] <sambuddhabasu1>
TabAtkins: CSP is not letting me load the safari extension local files itself :(

[17:40:30.0000] <TabAtkins>
rektide: I don't care about "denying" you anything. I'm just saying that if you're hostile, I'll ignore you, and lots of other people will do the same.

[17:40:53.0000] <TabAtkins>
sambuddhabasu1: Ah, I really can't help you there. I can at least tell you that srcdoc doesn't help vs anything else; it's the same as src="data:text/html,...", just with easier escaping rules.

[17:41:30.0000] <sambuddhabasu1>
TabAtkins: alright, thanks for letting me know that

[17:41:39.0000] <sambuddhabasu1>
do you know of anyone who can help me with this? TabAtkins

[17:41:54.0000] <TabAtkins>
No clue! Sorry. :(

[17:42:22.0000] <rektide>
TabAtkins: that comes off awfully seriously as a threat, a very big one

[17:42:49.0000] <TabAtkins>
rektide: Haha, ok.

[17:43:10.0000] <TabAtkins>
I don't think reasonable people would call "I don't want to listen to you if you're not willing to speak respectfully" a threat, but whatever.

[17:44:16.0000] <TabAtkins>
There's a lot of work to be done, and a lot of people to be interacted with, and I don't have time to deal with people throwing shade.

[17:44:44.0000] <rektide>
Well, it's just that the reactions i've gotten and what people have been talking to me about aren't interactions-

[17:44:46.0000] <TabAtkins>
That's some mental static I don't have to deal with, except in the most limited and extreme cases.

[17:44:55.0000] <rektide>
they me working through my mental anguish

[17:44:59.0000] <rektide>
publically on twitter

[17:45:09.0000] <TabAtkins>
rektide: I just looked back at some threads you commented in, and yeah, they're totes hostile, in a way that immediately makes me skip past them.

[17:45:29.0000] <rektide>
Yup I know.

[17:45:45.0000] <TabAtkins>
If you've got mental anguish, work through that on your own time. Come to the lists with a calm demeanor, or people will ignore or downplay you.

[17:46:14.0000] <TabAtkins>
This isn't a rough-and-tumble place. We don't truck with letting people be hostile just because they're contributing.

[17:47:31.0000] <rektide>
I don't have any qualm with any of that, or any of what you've said framed in terms of what happens on the list.

[17:48:36.0000] <rektide>
/me is cornered again

[17:49:03.0000] <rektide>
/me feels like he doesn't know the secret sign

[17:51:41.0000] <rektide>
i'm presuming Tab was talking about https://lists.w3.org/Archives/Public/public-webapps/2014OctDec/0257.html

[17:51:51.0000] <rektide>
as that's the first thing that shows up for me, and is a classic me example

[17:52:09.0000] <caitp->
the secret sign is just finger horns

[17:52:20.0000] <caitp->
gestured with your tongue out, of course

[17:52:31.0000] <rektide>
if i'm so obviously right, why is it so hard for me to make a 1/10th decent point

[17:53:19.0000] <rektide>
more shame rektide examples are welcome here, particularly if there's more to say than 'immediately makes me skip past them'

[17:55:47.0000] <rektide>
what do i do when i get 'first draft, more to come' https://lists.w3.org/Archives/Public/public-device-apis/2009Dec/0283.html and then time passes and it's all haha jk https://github.com/w3c/push-api/issues/81

[17:57:35.0000] <caitp->
maybe you could get some big stakeholders on your side

[17:58:35.0000] <caitp->
sort of like the way well funded lobbyists are able to get washington on their side

[18:00:15.0000] <rektide>
i just want to continue being right all the time, continue spending way less time than i should writing emails that poorly commincate little except for a sense of the dire emminating from my corner, and have everyone look at it and go- oh, it's rektide, we'd better fucking listen

[18:00:33.0000] <rektide>
i havent found any lobbyists here in DC that can help me with that

[18:06:02.0000] <caitp->
to be right, you have to convince people you're right --- and the most convincing things are things that big stakeholders want, imo

[18:06:50.0000] <TabAtkins>
rektide: For example, your posts in the blink-dev Push API thread, where there was a random "403 'Fuck You' Forbidden", and then some weird hostile defense of that.

[18:07:18.0000] <TabAtkins>
Your comment in the webapps "What Am I Missing" thread are like *super* hostile.

[18:08:05.0000] <TabAtkins>
Your www-dom "MouseEvent-mouse" thread was fine, it just got ignored. That's not cool, you should ping it again.

[18:09:15.0000] <TabAtkins>
"[blink-dev] Discovery [extends: Intent to Implement: navigator.connect]" is weird - it feels vaguely hostile.

[18:09:42.0000] <TabAtkins>
That's just the first couple of threads that come up when I search for "rektide" in my gmail.

[18:11:35.0000] <rektide>
https://lists.w3.org/Archives/Public/public-webapps/2014OctDec/0486.html is the "What am I missing" thread

[18:13:47.0000] <caitp->
so the main argument is "push api is opaque"?

[18:14:18.0000] <rektide>
i think the guys use case is great

[18:14:29.0000] <rektide>
he wanted to be able to host an http endpoint

[18:19:48.0000] <rektide>
by opaque i mean, there's no identity, no resource for what is pushed. i mean there's no headers to serve as envelope declaring what's inside.

[18:20:41.0000] <rektide>
"push api is opque" right now will do it for me, yes.

[18:21:56.0000] <rektide>
as a web developer, i've always been given the amazing ability to be talking about things. and i lose that ability with the push api. there's just stuff, blobs, showing up, undifferentiable at the transport layer.

[18:58:16.0000] <MikeSmith>
so this is the first time I've seen this one https://twitter.com/sideshowbarker/status/578373861147705344

[18:58:26.0000] <MikeSmith>
https://pbs.twimg.com/media/CAbL9eCUgAAeRMB.png

[18:58:47.0000] <MikeSmith>
「Your connection is private but someone on the network might be able to change the look of the page.」

[18:58:59.0000] <MikeSmith>
only in Chrome, and only on mobile

[18:59:42.0000] <TabAtkins>
MikeSmith: How weird.  No clue what that means.

[19:01:09.0000] <MikeSmith>
TabAtkins: pinged @__apf__ about it. I reckon she knows

[19:01:26.0000] <MikeSmith>
I'm running Chrome beta on Android

[19:01:38.0000] <MikeSmith>
maybe it's something new

[19:01:53.0000] <MikeSmith>
I'm running a version that was just released today

[19:09:32.0000] <MikeSmith>
hsivonen: upgrading to newest Apache HTTP client seems to have increased the number of requests per second the vnu servlet code can handle

[19:09:40.0000] <MikeSmith>
hsivonen: http://validator.w3.org/nu/stats.html

[19:10:48.0000] <MikeSmith>
hsivonen: atm showing around 4.02 validations per second on each instance

[19:11:11.0000] <MikeSmith>
hsivonen: vs around 3.2 before I did the upgrade

[19:16:08.0000] <MikeSmith>
rektide: the normal pattern is that initial feedback doesn't result in any changes

[19:16:30.0000] <MikeSmith>
it often takes some sustained (calm and civil) lobbying

[19:17:52.0000] <MikeSmith>
ask the responsive-images advocates about how they felt in the weeks after they first brought back their <picture> proposal to the browser projects

[19:18:42.0000] <MikeSmith>
rektide: you probably don't want to hear this but it seems like it often takes pretty much a year before you see others come around on some things

[19:19:34.0000] <MikeSmith>
 but that's not a pattern unique to getting standards problems fixed

[19:19:43.0000] <MikeSmith>
cf. https://twitter.com/lgarron/status/576522491939536897

[19:21:33.0000] <MikeSmith>
and there are other cases like when we spent I think at least 5 years trying to get the Apache web server project to change the non-conforming default content type that they were sending out

[19:23:12.0000] <MikeSmith>
and it's taken 5 years for blink to move DOM properties to prototypes where they're supposed to be

[19:24:09.0000] <MikeSmith>
and WebKit is still shipping broken behavior for that, with no sign they plan on fixing it any time soon

[19:25:26.0000] <MikeSmith>
so it's not you're talking to people who've had no big frustrations of their own waiting for others to come around to making things  right

[22:04:01.0000] <paul_irish>
has anyone attempted spec'ing autofill behavior? specifically looking at what events should be expected

[22:09:29.0000] <paul_irish>
I see "autocomplete" event to fire on the form. but nothing for the fields. input? change? keyup?

[22:10:24.0000] <paul_irish>
the challenge is a lot of authors binding to keyup and I'm wondering if it's fair to send a synthetic keyup after autofill. (the alternative is wait till they also bind to oninput)

[00:19:32.0000] <seekadvice>
hi, am i at the right place ? the whatwg html.....

[00:26:19.0000] <seekadvice>
helloooooooo....... anybody here, this is my 1st time on this kind of communication,   i need some advice......regarding html

[00:28:56.0000] <philipj>
seekadvice: well, ask away :)

[00:31:37.0000] <seekadvice>
i wanted to learn html, i am a novice programmer,, i was hit by the news of DRM in W3C,,, i was looking for an alternative and came by whatwg.org by mistake, , so now i am considering learning html,, just with out DRM,

[00:32:31.0000] <seekadvice>
i found this pdf on whatwg.org with 1250 pages,,,,, any easier method to learn html ?

[00:48:51.0000] <seekadvice>
oh well,,,,, thank you anyway,,,i think i found another source.

[01:38:05.0000] <Domenic>
Can we just make all "boolean-ish" attributes (but not actual boolean ones) accept true/false/yes/no/on/off?

[01:38:20.0000] <Domenic>
I guess we'd have to pick a canonical one for the reflection into script, and that might be backward-incompat...

[01:38:35.0000] <Domenic>
wait no they should all reflect as javascript booleans

[01:42:15.0000] <Domenic>
annevk: what is the author-visible implication of "this also impacts Request and the first step of HTTP network or cache fetch"?

[01:42:48.0000] <annevk>
Domenic: should be obvious for Request

[01:43:21.0000] <annevk>
Domenic: there's no implication for the latter I think, just mentioning it

[01:43:23.0000] <Domenic>
So, you mean that request.body will behave the same as res.body with respect to .clone()?

[01:44:10.0000] <annevk>
Domenic: at least on the service worker side, it's still not entirely clear to me how Request works on both sides without issue

[01:44:51.0000] <Domenic>
i really hope it does...

[01:45:18.0000] <Domenic>
Node has a messy ServerRequest vs. ClientRequest thing, at first I thought fetch would have to but then I was convinced we could avoid it.

[01:45:54.0000] <annevk>
Domenic: okay, I think the same is actually true for Response to some extent, e.g. you want to read from response, but you might also want to write to it from a service worker

[01:46:05.0000] <Domenic>
yes, definitely

[01:46:25.0000] <annevk>
Anyway, all I meant to say was that what goes for Response also goes Request

[01:46:31.0000] <annevk>
for ^

[01:46:31.0000] <Domenic>
what we decided last time we talked about this is that the creator of a (Request|Response) gets to write to it, consumer gets to read

[01:46:35.0000] <Domenic>
ok cool

[01:48:29.0000] <Domenic>
some new security attack with caches, abstract sounds scary http://arxiv.org/pdf/1502.07373v2.pdf

[02:16:00.0000] <MikeSmith>
Domenic: hey there are some positive parts in there too

[02:16:03.0000] <MikeSmith>
"The fierce competition between different browser vendors resulted in an intense focus on improving Javascript performance. As a result, Javascript code performs in some scenarios on a level which is on par with that of native code."

[02:16:08.0000] <MikeSmith>
that part's nice

[02:17:02.0000] <annevk>
Yeah and now we have all the exploits of .exe :-P

[02:19:10.0000] <Domenic>
welp, might as well give up and add shared memory

[02:22:38.0000] <MikeSmith>
ah browser has to be new enough to support High Resolution Time

[02:23:35.0000] <MikeSmith>
"the actual resolution of this timestamp for Safari for MacOS was on the order of nanoseconds, while Internet Explorer for Windows had a 0.8µs resolution. Chrome, on the other hand, offered a uniform resolution of 1µ on all operating systems we tested"

[02:24:19.0000] <MikeSmith>
but iOS is safe because no High Resolution Time support

[02:24:55.0000] <MikeSmith>
" the Javascript level, it seems that somewhat reducing the resolution of the high-resolution timer will make this attack more difficult to launch"

[02:25:42.0000] <MikeSmith>
** "A possible stopgap measure would be to restrict access to this timer to applications which gain the user’s consent"

[02:26:04.0000] <MikeSmith>
"(for example, by displaying a confirmation window)"

[02:26:18.0000] <MikeSmith>
who woulda thought

[02:27:28.0000] <MikeSmith>
... that High Resolution Time would become a feature that's sufficiently powerful/dangerous enough to merit requiring user opt-in

[02:34:14.0000] <MikeSmith>
botie, inform plh of high interest to Web Perf WG, security exploit: http://arxiv.org/pdf/1502.07373v2.pdf "A possible stopgap measure would be to restrict access to the High Resolution Timer API to applications which gain the user’s consent (for example, by displaying a confirmation window)"

[02:34:14.0000] <botie>
will do

[02:34:20.0000] <MikeSmith>
oope

[02:47:04.0000] <annevk>
Well given the number of timing attacks we are already familiar with it's not super surprising

[02:47:48.0000] <annevk>
But yeah, given the number of APIs it seems more and more like we want to ask the user to what extent they trust a certain domain + lock combination

[04:33:31.0000] <francisco_>
JakeA: ping, i'm working with sw, trying to do send a postMessage back to a window, but the result from clients.matchAll() is an empty sequence, am I missing something?

[05:05:56.0000] <JakeA>
francisco_: in transit at the moment, but will take a look when I'm in the office. What version of Chrome?

[05:14:10.0000] <ondras>
hm, I have a .ttf font that has a printable character for code point U+0010

[05:14:17.0000] <ondras>
I guess I am out of luck displaying that?

[05:43:21.0000] <zcorpan>
annevk: where is the normative bit for sending Origin for POSTs? "It is used for all HTTP fetches whose CORS flag is set as well as those where request's method is `POST`."

[05:43:35.0000] <zcorpan>
annevk: or is that up to specs that invoke fetch?

[05:46:21.0000] <annevk>
zcorpan: yeah

[05:46:33.0000] <annevk>
zcorpan: the idea is that they would set the force Origin flag or whatever it's called

[05:46:44.0000] <annevk>
zcorpan: I'm open to doing that some other way

[05:48:47.0000] <francisco_>
JakeA: 43.02337, having same problems in gecko :( ... so was wondering if was my code, but it looks a pretty straight forward use. meanwhile i can workaround it on gecko using broadcastchannel api, but didn't think how i can do the same on canary

[05:48:55.0000] <zcorpan>
annevk: thx

[05:50:23.0000] <zcorpan>
annevk: i dunno, given the note i had expected the algorithm to look at the method and insert Origin if it's POST, but maybe it's fine as is

[05:51:10.0000] <annevk>
Ooh, that note is describing the policy there seems to be some agreement around

[05:51:51.0000] <annevk>
Yeah, I agree that is somewhat confusing. Depends a bit on who reads the document. Could add something for specificationers.

[05:57:27.0000] <zcorpan>
that could be useful

[05:58:19.0000] <zcorpan>
on another note, why does sendBeacon use CORS instead of matching <form method=post> ?

[06:02:21.0000] <JakeA>
francisco_: is the code anywhere I can see?

[06:31:38.0000] <annevk>
zcorpan: custom payloads?

[06:31:50.0000] <annevk>
zcorpan: for the subset that matches <form method=post> they do the same, presumably

[06:32:01.0000] <annevk>
zcorpan: it's not like you need to look at the response with sendBeacon()

[06:34:42.0000] <zcorpan>
annevk: ah right. yeah i guess that makes sense

[06:35:14.0000] <zcorpan>
annevk: it's different in that sendBeacon will fail to follow redirects without CORS headers in the response

[06:35:47.0000] <annevk>
zcorpan: that's a good point

[06:36:58.0000] <annevk>
Web Performance WG did it rather rushed and without really understanding the networking principles and I guess I missed that bit...

[06:37:00.0000] <annevk>
meh

[06:37:43.0000] <zcorpan>
apparently blink still follows the redirect, so maybe we can change the spec

[06:38:19.0000] <zcorpan>
https://code.google.com/p/chromium/issues/detail?id=468527

[07:00:40.0000] <annevk>
o_O

[07:07:51.0000] <francisco_>
JakeA:  yup -> https://github.com/arcturus/serviceworkerware/blob/master/lib/sww.js#L150-L173

[08:44:24.0000] <JakeA>
francisco_: I just went to https://jakearchibald.github.io/svgomg/, opened devtools, ran window.onmessage = function(e) { console.log(e) }

[08:44:41.0000] <JakeA>
francisco_: then chrome://serviceworker-internals/, inspect…

[08:45:27.0000] <JakeA>
francisco_: then clients.matchAll().then(function(c) { c[0].postMessage('hi') })

[08:45:33.0000] <JakeA>
and that was logged in the window

[08:47:16.0000] <francisco_>
JakeA: thanks will give it a second try

[08:53:20.0000] <francisco_>
JakeA: no luck for me https://pastebin.mozilla.org/8826453 in mac 64bits 43.02337

[08:58:03.0000] <JakeA>
francisco_: what's navigator.serviceWorker.controller of the page?

[09:00:00.0000] <francisco_>
JakeA: woops, is null, very null

[09:00:26.0000] <JakeA>
francisco_: What's the SW's scope?

[09:00:48.0000] <JakeA>
(and the page's url? I'm betting it's out of scope)

[09:01:38.0000] <francisco_>
JakeA: not specifying scope, and doing the request from the same page that installs the sw

[09:02:05.0000] <JakeA>
francisco_: that means the scops is './' resolved against the SW script url

[09:02:11.0000] <JakeA>
I'm guessing that makes the page out of scope

[09:02:32.0000] <JakeA>
francisco_: serviceworker-internals will tell you the calculated scope

[09:05:26.0000] <francisco_>
JakeA: right, http://localhost:8000/demo/

[09:05:44.0000] <JakeA>
francisco_: but the SW *script* url?

[09:06:15.0000] <francisco_>
JakeA: you are totally right, it's outside the demo directory, despite that the registration is being done there

[09:06:39.0000] <JakeA>
francisco_: that's fine if it's /sw.js, but I guess it isn't?

[09:06:56.0000] <francisco_>
JakeA: it isent, is /lib/sw.js

[09:07:02.0000] <francisco_>
*isnt

[09:07:31.0000] <JakeA>
francisco_: ahh, so the scope is /lib/, which is why pages in /demo/ aren't showing up

[09:08:20.0000] <francisco_>
JakeA: \o/

[09:08:57.0000] <JakeA>
francisco_: in future, clients.matchAll({includeUncontrolled: true}) would have shown that page, but Chrome doesn't support that yet

[09:10:14.0000] <francisco_>
JakeA: good to know, thanks a lot!

[09:11:13.0000] <JakeA>
francisco_: the SW script url is security-sensitive, see http://jakearchibald.com/2014/launching-sw-without-breaking-the-web/ (we went with option B)

[09:13:05.0000] <francisco_>
JakeA: could I have more than one sw handling different scopes?

[09:52:07.0000] <JakeA>
francisco_: yep!

[10:05:03.0000] <JakeA>
Domenic: promise.chain… any idea why we have that?

[10:11:16.0000] <TabAtkins>
JakeA: The guy who implemented Blink's promise support liked a different set of names, and decided to just say "fuck it, I'm shipping these instead".

[10:11:57.0000] <JakeA>
TabAtkins: hmm, yeah, I remember Promise.resolved etc.

[10:17:04.0000] <TabAtkins>
Dealing with all the randos in SVG who dont' give a shit about browsers is always amusing.

[10:40:15.0000] <wanderview>
JakeA: I was thinking about SWs that don't want fetch events again...  can't the UA just detect this by looking to see if the SW script registered an onfetch handler during install?  If it didn't then, just bypass all the network interception logic for that registration, etc

[10:40:58.0000] <wanderview>
in regards to the third goal from https://github.com/slightlyoff/ServiceWorker/issues/566

[10:41:00.0000] <JakeA>
wanderview: annevk wasn't keen on that. I was

[10:41:33.0000] <TabAtkins>
wanderview: Registering an event handler cant' cause an observable behavior change.  This is consistent across the web platform.

[10:42:21.0000] <TabAtkins>
You can obviously omit *actually firing the event* if no one's listening, but that's not observable.  You shouldn't change anything that is possible to detect.

[10:43:11.0000] <wanderview>
TabAtkins: I don't think I suggested any observable change... just an optimization in UA for avoiding fetch event dispatch and network interception if the event would go to /dev/null anyway.

[10:43:47.0000] <TabAtkins>
Well yeah, that's an unobservable change - if nothing's around to see whether the intercept happened, you don't actually have to process it.

[10:44:09.0000] <Ms2ger>
If a tree falls in the forest...

[10:44:58.0000] <JakeA>
Problem is you need to spin up the SW to see if the listener is registered

[10:45:13.0000] <wanderview>
JakeA: that happens at install time, right?

[10:45:15.0000] <JakeA>
Just because it was registered last time it span up, doesn't mean it will be this time

[10:45:32.0000] <TabAtkins>
Well, no.  You need to keep around a bool *associated with* the SW recording whether or not it ever registered an event handler.

[10:45:54.0000] <wanderview>
JakeA: in theory the state of the fetch event handler being setting could be persisted when the SW is shutdown

[10:46:00.0000] <JakeA>
imagine: if (Math.round(Math.random())) self.addEventListener('fetch', …)

[10:46:03.0000] <TabAtkins>
JakeA: I don't understand how it could be not registered suddenly, without having spun up at some point.

[10:46:56.0000] <TabAtkins>
JakeA: I'm not talking about static analysis.  The SW does or doesn't register a fetch event listener. If it doesn't, it's not going to see any fetch events. So you dont' need to spin it up when network requests happen.

[10:47:04.0000] <wanderview>
JakeA: that is kind of undefined behavior, no?  you have no guarantees how many times your SW script will be reloaded

[10:47:15.0000] <TabAtkins>
Because, without a fetch listener, *it can't react to the fetch*, so it can't change itself to register a fetch listener.

[10:47:37.0000] <TabAtkins>
It can only do new things at install time, and when responding to something.

[10:47:50.0000] <TabAtkins>
Unless I'm totally missing something.

[10:48:22.0000] <TabAtkins>
(Like, unless we added a "I just woke up" event since last time I looked, which would be a terrible idea.)

[10:48:37.0000] <wanderview>
yea... I think the random example above is assuming stuff outside the fetch event handler will run on network interception... but thats not in the spec

[10:49:02.0000] <wanderview>
for my limited understanding of the spec

[10:49:07.0000] <TabAtkins>
Definitely not, and if it did, that's terribly nondeterministic.

[10:49:10.0000] <JakeA>
TabAtkins: SW runs, Math.round(Math.random()) is false, fetch listener not attached. Fetch happens, if you spin up the SW now, a listener *might* be registered

[10:49:43.0000] <wanderview>
JakeA: how can script reliably depend on the behavior... the SW might not have shutdown and therefore would not get executed again?

[10:49:46.0000] <TabAtkins>
JakeA: So you let it run whatever rando code it wants upon wakeup?  Putting code at the top of my SW file is effectively wrapped in a "onSpinUp" handler?

[10:50:04.0000] <wanderview>
where spin up may or may not happen

[10:50:10.0000] <wanderview>
this is making GC observable, right?

[10:50:15.0000] <JakeA>
TabAtkins: yes, how would you do it otherwise?

[10:50:19.0000] <JakeA>
I don't think so

[10:50:29.0000] <JakeA>
It's making SW startup observable

[10:51:01.0000] <wanderview>
JakeA: but you are saying SW startup should happen before a fetch event is handled... what guarantees that will run for every network interception?

[10:51:20.0000] <wanderview>
JakeA: what if the browser just never shutdown the SW (allowed AFAICT)

[10:51:32.0000] <JakeA>
wanderview: yeah that's fine

[10:51:42.0000] <TabAtkins>
JakeA: Okay, so we landed ourselves in nondeterminism hell.

[10:51:53.0000] <wanderview>
JakeA: scripts that depend on "spin up" are going to be broken in the real world

[10:51:55.0000] <TabAtkins>
We'll have to wake up the SW for *every* possible event it *might* be capable of handling, *forever*.

[10:51:57.0000] <wanderview>
spin up hook

[10:52:16.0000] <JakeA>
wanderview: totally agree

[10:52:47.0000] <TabAtkins>
Yeah, I give less than a fuck about scripts that implicitly depend on their "spinup" handler.  Break 'em, they suck, who cares.  Register your shit during install or face the possibility of never getting it registered.

[10:53:05.0000] <JakeA>
TabAtkins: install, activate and fetch are the only events that don't require another registration step

[10:53:56.0000] <TabAtkins>
Then either fix that (make fetch require an explicit registration) or stop caring about things that happen in the spinup handler. ^_^

[10:54:00.0000] <JakeA>
Btw, I'm more than happy to say "If the SW has terminated, and the event wasn't registered on the last spin up, it won't be spun up for that event"

[10:54:41.0000] <JakeA>
TabAtkins: I think there's some misunderstanding here? What's your concern?

[10:54:49.0000] <TabAtkins>
I mean, either behavior is *consistent*.  There's nothing requiring a SW to be spun up at random times.  If it's not listening for an event, it has no way of knowing that it's missing them.

[10:57:07.0000] <TabAtkins>
JakeA: The concern, per #566, is that you have to spin up a SW on every fetch, *just in case* it registers a fetch handler in its spinup handler (that is, the top-level code not placed in an onfoo handler).

[10:57:40.0000] <wanderview>
JakeA: maybe this just falls in the unspec'd part of the life cycle of a SW?  maybe we need language that says "when a SW is stopped, the state of the relevent event handlers is persisted and used to determine if the SW should be checked for future events"... or something like that

[10:58:09.0000] <TabAtkins>
Despite the complete nondeterminism here, because there's no way of knowing how many spinup events you'll get - it's possible to get 0 (the SW never gets killed), or one per second (constant killing/revival).

[10:58:26.0000] <JakeA>
TabAtkins: yeah, I'm happy to go for the "only spin up if event previously registered" behaviour. Non-deterministic event handlers within a ServiceWorker should be considered a bug

[10:58:37.0000] <TabAtkins>
Yeah.

[10:58:58.0000] <TabAtkins>
The important bit is that this *doesn't* violate the "no side-effects from event listening" rule.

[10:59:09.0000] <wanderview>
JakeA: is this a new spec issue or just #566?  I can write a new issue if you want

[11:02:45.0000] <JakeA>
wanderview: I think that issue is fine

[11:03:20.0000] <wanderview>
thanks

[11:05:43.0000] <JakeA>
TabAtkins: wanderview: you wouldn't be able to add the listener, say, between 9am-5pm using Date.now()

[11:06:09.0000] <wanderview>
JakeA: don't we need to hook an alarm api into SW?

[11:06:34.0000] <JakeA>
Of course, if you wanted to do that, you'd add the listener and have the date check inside the listener

[11:06:43.0000] <JakeA>
wanderview: yeah, at some point

[11:07:17.0000] <wanderview>
JakeA: I'm having a hard time thinking of a non-nefarious reason to have time based network interception

[11:15:28.0000] <TabAtkins>
JakeA: You can't add a listener during a specific time anyway, because there's no guarantee that the SW will be spun up during that time.

[11:16:09.0000] <TabAtkins>
And if we add an alarm API, then it's totally fine - the SW is *guaranteed* to spin up at a particular time, and you're registering a fetch handler from within that handler. Everything's well-defined and deterministic.

[11:17:04.0000] <TabAtkins>
(You're still screwed if you stochastically register a fetch listener within the "spinup handler", though, because there's no guarantee that the SW will be freshly spun up when the alarm goes off; it might already be awake for some other reason.)

[11:24:42.0000] <JakeA>
wanderview: I was more thinking of other events like push, where the user may not want notifications during particular times. Of course the correct place to handle this is in the handler

[11:25:30.0000] <JakeA>
TabAtkins: well, at the moment the time based thing would work, as the SW is spun up, then the event is fired

[11:26:19.0000] <JakeA>
I guess a long-living SW would break that though

[11:26:21.0000] <wanderview>
JakeA: yea... i think for now they have to do it in the handler... an alarm api would let people do it in a more batter efficient way in the future

[11:26:23.0000] <TabAtkins>
JakeA: *Unless* the SW was already spun up for some other reason, yeah.

[11:26:35.0000] <TabAtkins>
So it's still completely undependable.

[11:28:01.0000] <JakeA>
Yeah. Seems fine to avoid spinning up if listener wasn't registered. It does mean that spin up behaviour changes depending on listeners, so it has a behavioural impact

[11:28:09.0000] <JakeA>
(But I'm fine with that)

[11:29:34.0000] <wanderview>
I guess we just have to convince annevk

[11:32:55.0000] <TabAtkins>
JakeA: Really, it's just that the "spin up handler" is completely non-deterministic and there's no way to know when it'll fire.

[11:37:34.0000] <TabAtkins>
It so happens that browsers use various signals, such as whether listeners are registered, to determine when to randomly fire the spinup event.


2015-03-20
[02:53:09.0000] <Domenic>
Any reason html.spec.whatwg.org is not CORS-able?

[05:17:55.0000] <JakeA>
I'm enjoying this "HTML6" email already. Not only for the HTML6, but the assertion that javascript frameworks render in 10-50ms

[05:33:53.0000] <espadrine>
He may be talking about switching from one "subpage" of the SPA to another

[06:14:55.0000] <JakeA>
true

[06:50:17.0000] <wanderview>
Domenic: if I've already done the work to make our Response.clone() do a zero-copy tee of the underlying body stream... there is nothing in the current proposal that would stop me from using it right?  I would not have to de-opt for some reason?  just concerned that the tee() always makes a new stream will force that on me

[06:50:38.0000] <wanderview>
I think I could use wrappers to keep the same underlying stream

[07:11:41.0000] <wanderview>
Domenic: based on what you wrote in the github issue, this tweet should really say res.body.getReader().read()?  https://twitter.com/domenic/status/578002598487175168

[07:11:53.0000] <wanderview>
not to be pedantic...

[07:12:14.0000] <wanderview>
but it seems people care about the details

[07:33:31.0000] <Domenic>
wanderview: yeah, good point, can't believe I missed that :-/

[07:34:08.0000] <Domenic>
wanderview: and yeah definitely no reason to de-opt. zero-copy is always the goal.

[07:35:15.0000] <wanderview>
Domenic: I think I convinced myself the zero copy is not a concern with shared ArrayBuffer chunks... might be more a concern when ReadableByteStream appears

[07:38:38.0000] <Domenic>
yeah, ReadableByteStream is an interesting tradeoff, for sockets at least. If there are chunks in user-space that are too large, but then the consumer requests like 10 bytes, either you have to do some C++ magic to make an ArrayBufferView onto a 10-byte-subset, or you have to do a copy.

[07:38:56.0000] <Domenic>
Yet, it gives the consumer complete control over allocation, so as to avoid any GC and allow buffer re-use and such

[07:39:24.0000] <Domenic>
And, for files, where it can connect directly to read(2), it should work beautifully

[08:32:27.0000] <JakeA>
Domenic: https://code.google.com/p/v8/issues/detail?id=3237 makes me sad. Any idea why making APIs up and shipping them is somehow ok in thuis case?

[08:32:28.0000] <JakeA>
this*

[08:32:47.0000] <Domenic>
JakeA: no idea at all. It's absolutely horrible.

[08:32:59.0000] <Domenic>
My only guess is that the V8 team doesn't have to follow the normal process?

[08:33:08.0000] <JakeA>
sadface

[08:36:38.0000] <beverloo>
they're indeed outside of the process

[08:37:01.0000] <beverloo>
although more recently they've been sending intent to ship/PSAs, which already is a step forward :)

[08:41:04.0000] <JakeA>
Hopefully we can get them to remove those APIs. It's kinda shitty

[08:41:19.0000] <JakeA>
By "kinda" I mean "absolutely and totally"

[10:19:22.0000] <JakeA>
annevk: getting more requests for status code on opaque requests. Going to start looking at it again, perhaps if credentials are omitted. Agree it's contentious though.

[10:19:47.0000] <JakeA>
Chrome doesn't allow fetch('//other-origin', {mode: 'no-cors'}) from a window, which doesn't make sense to me

[10:20:07.0000] <annevk>
I think that's only disallowed because they couldn't come up with a use case and don't support cache in window?

[10:20:23.0000] <annevk>
JakeA: credentials are not the problem. I recommend reading https://annevankesteren.nl/2015/02/same-origin-policy

[10:21:01.0000] <annevk>
Well, they are part of it, but mostly it's firewalls.

[10:25:32.0000] <JakeA>
annevk: it's disallowed because it exposes the existence of a server. Which is weird because it's somehow ok in a SW, and you can use img requests to /favicon.ico to detect servers anyway

[10:26:01.0000] <JakeA>
Great article btw

[10:26:17.0000] <annevk>
JakeA: when I mentioned that I thought that was bullshit someone on blink-dev told me it was because of the reason I just mentioned

[10:26:58.0000] <JakeA>
hm, that's not what I was told, but maybe I got the info 2nd hand

[10:39:01.0000] <beverloo>
annevk, any concerns with changing Notification.close() to return a promise?

[10:39:37.0000] <beverloo>
annevk, in short, it could be asynchronous and may cause unexpected behavior if SWR.getNotifications() is called immediately afterwards

[10:40:06.0000] <beverloo>
it'll also allow us to reject if it's already closed. none of this should impact current users of the API. I'll write a PR in a bit

[10:40:52.0000] <JakeA>
beverloo: better to resolve with a boolean if it's already closed

[10:41:14.0000] <JakeA>
As in, resolve with true if something actually changed, false if it was already closed

[10:41:31.0000] <beverloo>
closing something that's already closed feels like an exception to me?

[10:41:35.0000] <beverloo>
happy to go either way

[10:41:38.0000] <annevk>
beverloo: I think my concern would be that getNotifications() doesn't necessarily take close into account

[10:41:45.0000] <annevk>
beverloo: as per the specification that is deterministic

[10:42:00.0000] <TabAtkins>
beverloo: Unless there's a way to check whether it's closed, and a good reason to make double-closing an error, I wouldn't throw.

[10:42:07.0000] <annevk>
beverloo: closing might be racy

[10:42:23.0000] <annevk>
beverloo: so shouldn't throw, but I'm not really convinced yet this is needed at all

[10:42:37.0000] <TabAtkins>
(Python, for example, offers two set deletion functions, depending on whether you care about double-deletion or not.)

[10:42:38.0000] <beverloo>
ok, I'm convinced to use a boolean rather than reject

[10:42:59.0000] <beverloo>
for us, closing a notification will be asynchronous, and I imagine this will the case in other implementations as well

[10:43:34.0000] <annevk>
I mean that's fine, but you could schedule it in such a way that getNotifications still gets the right answer

[10:45:51.0000] <beverloo>
that's true, but I'd rather be explicit about the fact that it's not synchronous

[10:46:03.0000] <beverloo>
if people don't care they won't use the promise

[10:46:06.0000] <beverloo>
like today

[10:46:28.0000] <annevk>
Well it sounds like you want a promise to allow for racy behavior...

[10:47:04.0000] <annevk>
As that was your motivation rather than something about the developer wanting to know whether they already invoked close() before...

[10:48:56.0000] <beverloo>
hm. Neither are great arguments if we're honest :-).

[10:49:15.0000] <beverloo>
because of the way how we're implementing getNotifications it will work fine, but I just don't think it's clear

[10:49:24.0000] <beverloo>
it's not racy because of an implementation detail

[13:05:08.0000] <annevk>
beverloo: well so my argument is that it's already defined to be non-racy and that I haven't seen rationale for exposing closedness

[16:34:20.0000] <zewt>
(things to do before posting suggestions about html: know that there's no such thing as "html6")


2015-03-21
[23:24:53.0000] <zewt>
what the hell? apparently they removed the option to disable the html5 player in youtube, which is terrible since firefox fullscreening is unusable

[23:25:20.0000] <zewt>
and the html5 video player on youtube is also poor compared to the flash one :|

[04:10:53.0000] <roc>
"unusable"?

[05:22:09.0000] <csarven>
Is there a definition for "Nightly"?

[05:26:49.0000] <Ms2ger>
"Every night"

[05:29:14.0000] <csarven>
Ms2ger :) I was looking for something a little more than that.

[05:31:13.0000] <Ms2ger>
"Software that's released every night"

[10:15:08.0000] <zewt>
(unusable: giant "YOUTUBE IS FULLSCREEN" popups covering the video every time I fullscreen, and every time I refocus an already-fullscreen window)

[16:01:06.0000] <TabAtkins>
annevk: DOM update - all errors fixed, just got a bunch of ambiguous link warnings to clear up.


2015-03-22
[06:35:52.0000] <gsnedders>
jgraham: https://github.com/gsnedders/html5lib now exists as a simple clone of gcode with all issues, etc.


2015-03-23
[06:41:10.0000] <wanderview>
JakeA: reading your reply here about the "first-party-cookies" and SW:  https://mail.google.com/mail/u/0/#label/blink-dev/14c314afd2174c91

[06:41:32.0000] <wanderview>
JakeA: just FYI, I think we are going to disable SW interception completely when the user has "disable third-party cookies" preference enabled

[06:41:43.0000] <wanderview>
not quite the same, because its not based on a header request... but seems similar

[06:42:09.0000] <wanderview>
JakeA: I mean, disable SW interception completely for third party iframes

[06:43:21.0000] <JakeA>
Phew!

[06:43:28.0000] <JakeA>
I was worried for a second there

[06:44:12.0000] <JakeA>
wanderview: that seems ok, what's the attack? That the iframe request can look at the referrer and track?

[06:45:19.0000] <wanderview>
JakeA: well, we want to disable IDB and other storage APIs for 3rd party iframes when the pref is set... to prevent tracking... but once we are in the SW we have no way to tell if a third party iframe is involved

[06:45:48.0000] <wanderview>
we want to completely hide the API endpoints on the global... so we need to do it at SW spin-up

[06:47:20.0000] <wanderview>
JakeA: also, I don't know if you have an opinion on this issue, but its the other main thing we have to deal with to enable IDB on SW:  https://github.com/slightlyoff/ServiceWorker/issues/648#issuecomment-78621258

[06:47:35.0000] <wanderview>
we currently don't allow IDB in sandboxed iframes at all

[06:53:58.0000] <JakeA>
Hmm good point, I wonder what Chrome does

[08:52:12.0000] <TabAtkins>
gsnedders: Thank god, I can finally submit a PR for the "converting XML name, but I wont' tell you which one" error message.

[08:53:38.0000] <Ms2ger>
Hm?

[09:58:58.0000] <JakeA>
Domenic: why is the input for TextDecoder decode optional? Is that in preparation for TextDecoder to become a transform stream?

[09:59:30.0000] <Ms2ger>
JakeA, for signalling EOF

[09:59:39.0000] <Ms2ger>
I though

[09:59:45.0000] <Ms2ger>
t

[10:00:52.0000] <JakeA>
ahh ok

[10:01:30.0000] <Ms2ger>
I may also have that completely backwards, though :)

[10:09:13.0000] <JakeA>
Domenic: if I'm streaming a string & reading the chunks with TextDecoder, is there anything I can do about a chunk landing mid-way through a multibyte codepoint?

[10:09:36.0000] <JakeA>
I guess I really want a TextDecoder transform stream

[10:15:18.0000] <wanderview>
JakeA: yea... seems there should be a TextDecoder stream that internally re-chunks

[10:19:07.0000] <JakeA>
wanderview: TextDecoder has a 'stream' option, but that appears to read the whole stream

[10:19:32.0000] <JakeA>
ohhh no wait

[10:19:52.0000] <JakeA>
"If options's stream is true, the method can be invoked multiple times to process a fragmented stream."

[10:20:23.0000] <wanderview>
JakeA: what are you looking at?

[10:20:30.0000] <JakeA>
https://encoding.spec.whatwg.org/

[10:23:26.0000] <JakeA>
I can't figure out how to use it

[10:23:53.0000] <JakeA>
var decoder = new TextDecoder();

[10:24:14.0000] <JakeA>
decoder.decode(???, {stream: true});

[10:24:24.0000] <JakeA>
Then keep calling decoder.decode() to get more data

[10:24:40.0000] <JakeA>
but I can't figure out that first param "BufferSource"

[10:25:03.0000] <JakeA>
It can't be a stream, as decode() is sync and stream reading isn't

[10:25:34.0000] <wanderview>
JakeA: maybe annevk knows

[10:25:50.0000] <wanderview>
JakeA: the spec doesn't seem to reference whatwg-streams, so I assume its not related?

[10:27:17.0000] <JakeA>
wanderview: I think you're right, stream means something different here

[10:29:07.0000] <wanderview>
JakeA: does anyone implement this spec yet?  or it mainly meant as something other specs can refer to?

[10:29:18.0000] <JakeA>
wanderview: it appears to be in Canary

[10:30:25.0000] <wanderview>
JakeA: http://heycam.github.io/webidl/#common-BufferSource

[10:30:34.0000] <wanderview>
I guess it should link there

[10:30:44.0000] <JakeA>
Aha!

[10:30:48.0000] <wanderview>
the "copy to" link in the decode() function goes to that spec

[10:39:51.0000] <gsnedders>
TabAtkins: :)

[10:45:49.0000] <JakeA>
Ok, worked it out. var d = new TextDecoder(); d.decode(uint8Array, {stream: true}); /* returns whole chars, doesn't cut off partial utf8 chars */ d.decode(uint8Array, {stream: true}); /* this is added to the data it had so far */

[10:46:39.0000] <JakeA>
wanderview ^

[10:47:10.0000] <jsbell>
JakeA: I'm lacking context but I can help w/ text encoding API stuff. :)

[10:47:59.0000] <JakeA>
jsbell: I'm playing with the streams API, so I'm getting chunks as uint8array, I'm trying to read this as text in a way that don't fail if the chunk ends/starts on parts of a multibyte char

[10:48:40.0000] <jsbell>
JakeA: Yep, {stream:true}. And you probably want to call d.decode() (no i.e. default args) at the end of the stream to flush

[10:49:09.0000] <jsbell>
so that if you have a partial sequence it correctly generates a U+FFFD

[10:50:05.0000] <jsbell>
JakeA: I haven't had a chance to soak in streams; glad someone's trying to compose encoding+streams

[10:50:08.0000] <JakeA>
jsbell: like this? https://jsbin.com/gowaze/quiet

[10:50:49.0000] <jsbell>
JakeA: lgtm

[10:50:52.0000] <JakeA>
jsbell: ideally in future this should be stream.pipeThrough(new TextDecoder) I think

[10:51:06.0000] <wanderview>
is the text regarding the stream option correct?  https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/decode

[10:52:11.0000] <jsbell>
Um... not really correct. Not very helpful anyway....

[10:52:30.0000] <wanderview>
yea

[10:53:18.0000] <wanderview>
JakeA: and I guess everyone supports it except IE/safari

[10:53:53.0000] <jsbell>
I has polyfill: https://github.com/inexorabletash/text-encoding

[10:54:48.0000] <wanderview>
nice

[10:56:58.0000] <jsbell>
Spec isn't much clearer on 'stream' but that's not the spec's job. :) MDN could say: "A Boolean flag indicating that additional data to decode will follow in subsequent calls to decode(). Set to true if processing the data in chunks, and false for the final chunk or if the data is not chunked" or something

[11:04:03.0000] <Domenic>
JakeA: yeah the plan is to do "encoding api v2" when we have all the parts of streams figured out

[11:04:20.0000] <Domenic>
Possibly add some simpler static methods for one-shot encoding/decoding while we're there

[11:04:59.0000] <Domenic>
I think I asked annevk about this and he said that TextEncoder instances didn't keep any state, and so I'm not sure what to do about landing halfway through multibyte content :-S

[11:05:01.0000] <JakeA>
Domenic: jsbell: so does my use of decoder make sense here https://jsbin.com/gowaze/edit?js

[11:05:20.0000] <JakeA>
Domenic: they retain a stream, so there's some state

[11:05:29.0000] <JakeA>
"stream"

[11:05:55.0000] <JakeA>
calling .decode(input, {stream:true}) pushes to that internal stream

[11:06:11.0000] <Domenic>
gah jsbin I want to love you but why is the content area so small (jshint + giant features banner)

[11:06:47.0000] <Ms2ger>
bit.ly/livedom :)

[11:07:05.0000] <Domenic>
JakeA: in general you'll either have { value: x, done: false } or { value: undefined, done: true }, so you can simplify a bit

[11:07:41.0000] <Domenic>
but yeah looks solid in general

[11:08:44.0000] <JakeA>
Domenic: what simplification? Drop the || []? I was worries the explicit undefined would be counted as a value

[11:09:05.0000] <JakeA>
But that doesn't appear to be the case, cool

[11:09:20.0000] <Domenic>
JakeA: I was thinking, test result.done early and bail immediatley if you see it

[11:09:26.0000] <Domenic>
then assume it's false from then on

[11:10:22.0000] <JakeA>
Domenic: I don't think I can, because partialCell may still contain data. Also calling decode will flush any remaining data.

[11:11:59.0000] <Domenic>
Ah, interesting, I see.

[11:12:21.0000] <Domenic>
You don't need to pass { stream: true } for previous chunks, only for the last one?

[11:13:59.0000] <Domenic>
I guess just worth testing this thing on some real data and we'll know the answer :P

[11:17:09.0000] <jsbell>
JakeA: I may have lost context, but {stream: result.done} seems like it should be {stream: !result.done} ??

[11:18:49.0000] <Domenic>
right, I think that is what I was implying as well

[11:18:59.0000] <jsbell>
stream is basically !flush

[11:21:12.0000] <jsbell>
<3 wanderview for updating MDN already

[11:21:26.0000] <wanderview>
np! thanks for the text :-)

[11:25:29.0000] <jsbell>
wanderview: if you're feeling really keen, you can crib the examples from https://github.com/inexorabletash/text-encoding

[11:26:45.0000] <wanderview>
jsbell: thanks... I'll see if I can find the time later today

[11:55:14.0000] <JakeA>
jsbell: oh wow, yes, don't know how that crept in

[11:56:38.0000] <JakeA>
I can code, honest

[11:56:39.0000] <JakeA>
I can code, honest

[16:06:40.0000] <othermaciej>
is there anyone around who understands how microtasks are supposed to work?

[16:06:44.0000] <othermaciej>
I am finding the spec confusing

[16:19:54.0000] <jsbell>
othermaciej: maybe? what's up?

[16:22:52.0000] <othermaciej>
jsbell: is there anything that causes microtasks to be performed after an event handler, function-based timer, or other non-script-based callback is run?

[16:23:39.0000] <othermaciej>
it sure sounds like this algorithm should run after such callbacks: https://html.spec.whatwg.org/#clean-up-after-running-a-callback

[16:24:37.0000] <othermaciej>
but I could not find anything that would cause it to happen; only seems to happen for stuff evaluating bare script code, like <script> or a timer with a string instead of a function

[16:45:55.0000] <jamesr___>
othermaciej: https://html.spec.whatwg.org/multipage/webappapis.html#processing-model-9 step 7 perhaps?

[16:46:41.0000] <jamesr___>
there are various other invocations of the "Perform a microtask checkpoint." text, for example in the "spin the event loop" section

[16:49:20.0000] <jamesr___>
but the task one in the processing model should cover event handler, function-based timer and other non-script-based callbacks

[16:49:23.0000] <jamesr___>
since those are all tasks

[16:52:56.0000] <jsbell>
(sorry was afk). Agreed - anything that isn't covered by that sounds like a spec bug.

[16:55:57.0000] <jsbell>
jgraham: I've lost track of what the actual question is in the serviceworker/wpt thread

[16:57:11.0000] <jgraham>
jsbell: The latest messages are about whether the tests can be written to run on https rather than on http

[16:57:55.0000] <jgraham>
AIUI the tests currently rely on running on a hostname that's whitelisted as allowing SW on http i.e. localhost or 127.0.0.1

[16:58:39.0000] <othermaciej>
jamesr___: yeah, I am not sure if event handlers, function timers, and miscellaneous functioncallbacks, are all meant to be handled by the post-task catchall

[16:58:47.0000] <othermaciej>
jamesr___: or if they should have some specific affordance

[16:58:54.0000] <jsbell>
jgraham: as far as chrome's test harness goes, https://localhost:8443 should be available

[16:59:05.0000] <othermaciej>
jamesr___: it potentially makes a difference, for example for events dispatched synchronously from within script


2015-03-24
[17:00:01.0000] <jamesr___>
othermaciej: i think in that case microtasks shouldn't fire

[17:00:14.0000] <jamesr___>
since the general philosophy is that they run on clean callstacks, no?

[17:00:26.0000] <othermaciej>
I don’t know what the philosophy is

[17:00:46.0000] <othermaciej>
The spec doesn’t explain the theory of microtasks at a high level, it just has a bunch of algorithms that reference each other

[17:00:50.0000] <jgraham>
jsbell: Right, but the problem is semantics. A test for cross-origin communication isn't necessarily going to work if I just s|http://locahost:8000|https://{{host}}:{{ports[https][0]}}|

[17:01:00.0000] <othermaciej>
so I can’t tell if I’m following them correctly

[17:01:42.0000] <jamesr___>
i think the idea is you implement the algorithms you don't have to understand the theory :)

[17:01:44.0000] <jgraham>
jsbell: So it would be useful if the chrome tests were rewritten to run from https:8443 by default

[17:01:52.0000] <othermaciej>
jamesr___: what confuses me is this Note: https://html.spec.whatwg.org/multipage/webappapis.html#processing-model-9:clean-up-after-running-a-callback

[17:02:24.0000] <othermaciej>
jamesr___: it seems like most kinds of callbacks do not in fact eventually call the “clean up after running a callback” steps

[17:02:39.0000] <othermaciej>
jamesr___: which is the hook where microtasks might be run after running some script

[17:02:49.0000] <jsbell>
jgraham: if you're asking us to s/http/https/, s/8000/8443/ where possible in the blink repo, then SGTM

[17:02:57.0000] <jamesr___>
looks like that's only reached by 8.1.3.3 which is reached by creating a <script>

[17:02:59.0000] <othermaciej>
jamesr___: that note implies they would, but it only seems to apply to non-function entry into script

[17:03:24.0000] <othermaciej>
jamesr___: if that is totally intentional, then perhaps the only issue is that the note is confusing

[17:03:41.0000] <jamesr___>
it seems a bit confusing. the flag in the queue is needed since the event loop can be entered reentrantly

[17:03:49.0000] <jgraham>
jsbell: Yeah, that would be ideal

[17:03:51.0000] <jamesr___>
i.e. you could within a microtask call showModalDialog() and then start spinning again

[17:04:17.0000] <jamesr___>
could you insert a new <script> within a microtask?

[17:04:26.0000] <jamesr___>
i mean you could, but would it run then?

[17:05:11.0000] <othermaciej>
I don’t know

[17:05:26.0000] <jamesr___>
well you could via showModalDialog

[17:05:30.0000] <jamesr___>
since you can do anything in that

[17:05:33.0000] <othermaciej>
document.write() would run it synchronously but I am not sure if something about microtasks prevents it

[17:05:45.0000] <jamesr___>
but i don't think that's what the note is supposed to signify. definitely worth some clarification

[17:05:54.0000] <jsbell>
jgraham: but ideally we should be using resources/test-helpers.js and get_host_info() everywhere instead of hardcoding anything

[17:06:07.0000] <othermaciej>
I notice though that there is nothing to account for non-<script> script callbacks in that algorithm

[17:06:40.0000] <jsbell>
jgraham: i.e. crbug.com/462361

[17:06:50.0000] <othermaciej>
I guess the only relevance is to prevent the algorithm from re-entering so it doesn’t matter that most script callbacks don’t do it

[17:07:26.0000] <jgraham>
jsbell: Right, but irrespective of that moving from http to https by default requires changes to what's considered cross-origin + etc.

[17:08:46.0000] <jsbell>
jgraham: get_host_info() populates e.g. HTTPS_REMOTE_ORIGIN; assuming the tests use those variables correctly, wouldn't that cover it? (sorry if I'm being dense here)

[17:09:43.0000] <jgraham>
Well I think my point is just that the changes there might not be trivial, depending on *exactly* what is being tested

[17:09:59.0000] <jsbell>
jgraham: Agreed.

[17:11:14.0000] <jgraham>
e.g. if the default server is https://localhost:8443 then the remote origin probably has to be a subdomain, or different port, or something, whereas at the moment https is itself a seperate origin

[17:11:38.0000] <jgraham>
(and different tests might want different things here)

[17:12:23.0000] <jgraham>
Anyway I guess I will look at this more tomorrow, now I will sleep

[17:12:31.0000] <jgraham>
jsbell: thanks for the help!

[17:12:51.0000] <jsbell>
jgraham: I'll reply to the thread a bit and annotate the bug, but your clarifications (post sleep!) will help, thx!

[19:42:12.0000] <jpdevries>
Hello all. I understand this would probably target HTML6, but does anyone else feel there is a case for allowing multiple <base> tags on a page (outside of <head>)? Imagine being able to nest a base tag in a section and have it override the base href for that section and it's inner elements.

[02:02:03.0000] <Ms2ger>
"I tried to make an "end credits" slide w/ IE-only APIs not in Project Spartan that scrolls while I talk. The list was so long it crashed PPT"

[02:13:04.0000] <jgraham>
Ms2ger: Pointer?

[02:14:48.0000] <Ms2ger>
https://twitter.com/jacobrossi/status/580253880690208768

[02:21:23.0000] <Ms2ger>
annevk_, https://github.com/servo/servo/issues/5336

[04:47:23.0000] <tiago>
hi, how would I read a certain meta tag with html5lib?

[04:47:25.0000] <tiago>
in python

[04:47:49.0000] <tiago>
like, <meta name="description" content="Something" />

[04:47:53.0000] <tiago>
I need the "Something"

[04:52:08.0000] <JakeA>
tiago: this channel is for HTML & DOM specs. In JS it could be document.querySelector('meta[name=description]').getAttribute('content'), dunno if html5lib has something similar. It isn't maintained by whatwg.

[04:52:54.0000] <tiago>
Thanks JakeA, it's just because the html5lib github page points to this channel

[04:54:44.0000] <JakeA>
Streams people (cc Domenic), if I have an underlying binary stream, piped to a text decoding transform stream, piped to a CSV decoder, should the CSV decoder yield, say, a CSV cell per read, or is it customary to deliver as much data as you can per read?

[04:57:59.0000] <JakeA>
tiago: oh, actually, maybe I'm wrong, looks like quite a few people in this channel build that lib. My bad. +MikeSmith gsnedders

[04:58:21.0000] <tiago>
ah

[05:06:04.0000] <JakeA>
tiago: once you've got a document, you can use .childNodes to gets its children etc etc. Once you find the meta, use .attributes and find the one with name 'name'

[05:06:08.0000] <JakeA>
https://github.com/html5lib/html5lib-python/blob/f5fd711dd3e933353423656b8adf114e436cc4bb/html5lib/treebuilders/etree.py#L19

[05:07:17.0000] <tiago>
thanks JakeA, I will tr

[05:07:19.0000] <tiago>
*try

[05:51:50.0000] <Domenic>
JakeA: CSV cell (more likely row) per read is generally customary

[05:54:19.0000] <JakeA>
Domenic: thanks!

[05:56:36.0000] <JakeA>
Domenic: btw, the streams API seems to be a perfect balance of simplicity and functionality. Nice one

[05:56:42.0000] <Domenic>
:D

[06:08:17.0000] <wanderview>
yea, it seems for chunk or message oriented streams like ReadableStream... each chunk should be a logical object for whatever transformation you are doing

[06:08:28.0000] <wanderview>
I think its less clear for ReadableByteStreams

[06:09:14.0000] <JakeA>
wanderview: yeah, or text which is "as many chars as possible", and it only holds back incomplete chars

[06:26:56.0000] <annevk_>
Domenic: iirc I told you that TextDecoder kept state, but TextEncoder didn't

[06:27:30.0000] <annevk>
JakeA: you should keep passing stream:true until you hit OEF

[06:29:24.0000] <JakeA>
annevk: that's what I'm doing

[06:29:56.0000] <JakeA>
stream is !result.done

[06:30:31.0000] <annevk>
JakeA: we could maybe make pipe(new TextDecoder) work for the common case, if TextDecoder/TextEncoder implement some stream-protocol

[06:31:25.0000] <Domenic>
annevk: ah yes, now I remember

[06:31:27.0000] <JakeA>
annevk: at a quick glance, I think that could be possible in a backwards compatible way

[06:32:29.0000] <JakeA>
You could maybe even define .decode in terms of real streams

[06:32:31.0000] <Domenic>
yeah just add .writable and .readable properties

[06:33:01.0000] <JakeA>
Domenic: the bit I'm worried about is what .decode etc do if you're using the decoder as a stream

[06:33:13.0000] <Domenic>
yeah true

[06:33:44.0000] <Domenic>
perhaps unnecessarily complicated

[06:34:28.0000] <JakeA>
Domenic: it could be as simple as it throws if the stream is locked

[06:34:48.0000] <Domenic>
Mehhhh

[06:35:19.0000] <JakeA>
Using it as a stream, *and* calling .decode sounds like a mistake

[06:39:17.0000] <wanderview>
It seems the streamified object should wrap an existing TextDecoder object

[06:40:38.0000] <JakeA>
Gone done a post on fetch & streams http://jakearchibald.com/2015/thats-so-fetch/

[06:41:18.0000] <Domenic>
wanderview: or TextDecoder should wrap a streamified object. But, they should be separate I think... too messy otherwise.

[06:41:40.0000] <wanderview>
Domenic: I think since TextDecoder existed first... its easier to write the new stream in terms of the TextDecoder

[06:42:01.0000] <Domenic>
Sure

[06:59:37.0000] <annevk>
JakeA: "Dramatic reconstruction" :-)

[07:06:55.0000] <JakeA>
annevk: I had to fallback to an SVG of that on iphone because they *still* don't allow inline video

[07:07:02.0000] <JakeA>
Could have used a 5mb gif but screw that

[07:14:31.0000] <Domenic>
an svg O_O i gotta see this

[07:16:45.0000] <Domenic>
hmm tried it on my ipad looks the same

[07:19:06.0000] <Domenic>
don't engage webreflection...

[07:24:54.0000] <JakeA>
Domenic: ah, too late

[07:25:06.0000] <Domenic>
he is _the_ es-discuss troll

[07:25:17.0000] <JakeA>
Domenic: the SVG is static unfortunately. Inline video works fine on ipad

[07:25:33.0000] <Domenic>
hmm i was picturing an animated vector representation

[07:25:47.0000] <JakeA>
So I'm not crazy then? I can't match up what webreflection is saying to reality

[07:26:44.0000] <wanderview>
JakeA: I think maybe if someone focuses on the tongue-in-cheek parts they could view it as a rant... *mumbles something about cognitive bias*

[07:27:27.0000] <JakeA>
maybe. I tried to keep it tongue-in-cheek and of course didn't name

[07:28:25.0000] <gsnedders>
JakeA: the official policy has always been there's no real topic for this channel, and nobody really cares about using this for html5lib since half the discussions historically were half spec discussions and actual questions are pretty infrequent

[07:29:50.0000] <MikeSmith>
does anybody maintain a JSON file or something with a list of the currents UA strings for major browsers?

[07:30:18.0000] <MikeSmith>
something meant to be easily consumable

[07:30:45.0000] <wanderview>
JakeA: I know... it was a valiant effort... but people tend to see what they expect to see unfortunately

[07:31:40.0000] <JakeA>
gsnedders: noted, cheers!

[07:33:08.0000] <ondras>
webreflection is andrea giammarchi_

[07:33:08.0000] <ondras>
?

[07:33:18.0000] <ondras>
I recall his talk on jsconf.eu ~2012 or so

[07:34:58.0000] <caitp->
was this whole thing about how fetch is bad because of promises, or was that a different one?

[07:35:00.0000] <jgraham>
MikeSmith: At one point that UA sniffing tool thing had them, I think. Or I guess regexps that were supposed to match lots of known browsers

[07:35:42.0000] <wanderview>
caitp-: I believe this started with "OMG fetch is not based on streams"

[07:35:54.0000] <wanderview>
or maybe there are two issues flying about

[07:36:48.0000] <MikeSmith>
jgraham: ok

[07:38:04.0000] <wanderview>
/me enables Cache by default in Firefox nightly.

[07:39:38.0000] <JakeA>
ondras: he's a cool guy, he's just a bit hot-headed about this

[07:39:57.0000] <jgraham>
MikeSmith: Something like https://github.com/3rd-Eden/useragent/blob/master/lib/regexps.js

[07:40:18.0000] <JakeA>
caitp-: yeah, partly it was "this is not based on streams" even though it is, but also that we don't have cancellation yet, but that's on its way

[07:44:29.0000] <JakeA>
wanderview: ohhhh! In window objects too?

[07:44:40.0000] <MikeSmith>
jgraham: looking now

[07:44:46.0000] <wanderview>
JakeA: yep... it won't ride the trains to release yet, though

[07:45:00.0000] <wanderview>
I'm going to push a blog post in a bit explaining

[07:45:24.0000] <MikeSmith>
jgraham: ah coolーthanks

[08:18:40.0000] <wanderview>
/me can never figure out how to get images to look right in twitter summary cards.

[08:23:24.0000] <wanderview>
JakeA: here is the blog explaining what we are doing:  https://blog.wanderview.com/blog/2015/03/24/service-workers-in-firefox-nightly/

[16:21:46.0000] <MikeSmith>
wanderview: nice blog post

[16:21:55.0000] <MikeSmith>
wanderview: thanks for taking time to write it up

[16:22:49.0000] <MikeSmith>
wanderview: the amount of work you've been doing to get there is pretty phenomenal

[16:25:29.0000] <jgraham>
/me always forgets who wanderview is

[16:26:14.0000] <jgraham>
Also wanderview++ on landing the SW stuff. Hopefully we make more progress with the Blink tests soon

[16:26:48.0000] <MikeSmith>
ah tests

[16:30:36.0000] <jsbell>
jgraham: If no-one beats me to it, I'll try and pick up the blink side of the test todos, but I'm booked solid for ~2 weeks

[16:31:23.0000] <jgraham>
jsbell: That sounds great :) (well not that you are booked solid ofc. Unless it's solid fun ;)

[16:51:11.0000] <jsbell>
wanderview: is the caches API in FF scoped to SW or exposed everywhere?


2015-03-25
[23:33:56.0000] <annevk>
Does https://www.w3.org/Bugs/Public/show_bug.cgi?id=28326 not have an equivalent WHATWG bug?

[23:50:54.0000] <MikeSmith>
annevk: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26689 mauabe

[23:51:31.0000] <annevk>
MikeSmith: nah, that's about something that still exists

[23:51:51.0000] <annevk>
MikeSmith: this is about removing the HTML parser <isindex> macro

[23:52:17.0000] <MikeSmith>
ah ok

[03:12:02.0000] <annevk>
Domenic: dude, I want to mute HTML6 on Twitter

[03:12:45.0000] <annevk>
Domenic: so many people tweeting about that, it's on HN (maybe says more about HN), ... and actual interesting things hardly get mentioned

[03:13:49.0000] <Domenic>
-_-

[03:17:01.0000] <annevk>
HTML6 is a very effective /dev/null route

[03:22:41.0000] <JakeA>
Domenic: any idea when the stream constructors land in Canary? Super keen to adapt a streaming json parser and show the performance benefits

[03:24:17.0000] <Domenic>
JakeA: no plans quite yet, best bet is to grab the reference implementation

[03:24:43.0000] <JakeA>
Domenic: ta

[03:34:35.0000] <jgraham>
Calling your idea "HTML6" is an effective way to get lots of attention on it regardless of merit (or relationship to HTML)

[03:57:05.0000] <MikeSmith>
yeah but http://sdtimes.com/w3c-member-proposes-single-page-apps-without-javascript-in-html6/ really takes it up a notch

[03:57:35.0000] <MikeSmith>
I can't recall ever reading anything that guy Rob Marvin ever wrote before

[03:57:56.0000] <MikeSmith>
but from now on it's going to be impossible to take anything he writes seriously

[05:27:43.0000] <zcorpan>
Domenic: any thoughts on https://lists.w3.org/Archives/Public/public-fx/2015JanMar/0123.html ?

[05:47:09.0000] <Domenic>
zcorpan: I don't like overloading in general

[05:47:20.0000] <Domenic>
MikeSmith: wow

[05:47:48.0000] <Domenic>
zcorpan: probably would prefer a single constructor signature then maybe a static factory method for other cases

[05:48:18.0000] <Domenic>
"the W3C Web Hypertext Application Technology Working Group (WHATWG) mailing list" W_W

[05:49:55.0000] <jgraham>
And yet you probably trust journalists on a whole range of topics about which you are slightly less informed :)

[05:50:03.0000] <annevk>
"But I can't stand by, pontificating and arguing from a purely intellectual place, while the Web architects itself out of relevance, long term, by adopting shoot-me-in-the-foot ideas, and while so many terrible decisions are being made."

[05:50:25.0000] <zcorpan>
Domenic: like [Constructor(optional DOMPointInit p1, ...)] interface DOMQuad { static fromDOMRect(optional DOMRectInit); static fromDOMQuad(optional DOMQuadInit); ... } ?

[05:50:38.0000] <Domenic>
zcorpan: that sounds about right, yeah.

[05:50:53.0000] <Domenic>
Maybe fromRect/fromQuad for brevity

[05:51:34.0000] <zcorpan>
Domenic: can you reply in the thread?

[05:51:41.0000] <Domenic>
sure

[05:51:44.0000] <zcorpan>
thanks!

[06:00:28.0000] <smaug____>
annevk: where is that from?

[06:18:20.0000] <annevk>
smaug____: www-tag, I recommend not subscribing

[06:21:26.0000] <annevk>
Domenic++ I like that approach better too

[06:22:00.0000] <smaug____>
/me shivers... not going to subscribe

[06:25:28.0000] <Domenic>
wow i scanned the thread titles and am scared

[06:25:34.0000] <jgraham>
annevk: I'm not sure "take it to twitter" is a constructive response either though

[06:25:50.0000] <Domenic>
it really is www-eric-bowman-and-mark-fawzi

[06:26:06.0000] <annevk>
jgraham: you mean IRC?

[06:26:28.0000] <jgraham>
"Marc – can you please refrain from making alarmist, nonsensical flame-baiting comments like this on our mailing list? Probably this sort of thing would be more sensibly expressed on Twitter or similar?"

[06:26:44.0000] <annevk>
jgraham: ah right

[06:27:10.0000] <jgraham>
OTOH I have general dificulty with "more sensibly expressed" and "twitter" in the same sentence.

[06:29:15.0000] <annevk>
I'm not really sure how to best handle such a situation and it seems www-tag maintainers haven't either since this happens pretty frequently...

[06:30:08.0000] <annevk>
Dan should probably just ban them for a couple of weeks and if they are repeat offenders for ever increasing longer periods... I think that strategy has worked well for the WHATWG list and hasn't really been used much at all

[06:30:46.0000] <Domenic>
But I mean what about html6. Not as troll-ey but if we get many more of those it makes the list useless.

[06:31:42.0000] <annevk>
Domenic: someone should probably point the new people to https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F

[06:32:00.0000] <Domenic>
Hmm yeah

[07:22:28.0000] <annevk>
philipj: do you remember who from Mozilla looks at Fullscreen now and then?

[08:18:46.0000] <Ms2ger>
annevk, you :)

[08:18:56.0000] <Ms2ger>
(I know, not helpful)

[09:02:09.0000] <philipj>
annevk: roc and chris pearce I think

[09:02:18.0000] <annevk>
Yeah, that's all I got too

[09:02:41.0000] <annevk>
I wish there was a way to copy a W3C bug into a Gecko one

[09:04:24.0000] <philipj>
annevk: is this about the border/padding on iframes?

[09:04:32.0000] <annevk>
philipj: yeah

[09:04:42.0000] <annevk>
philipj: what about margin?

[09:05:08.0000] <annevk>
never mind, already covered

[09:05:19.0000] <philipj>
indeed

[09:05:24.0000] <killfill>
hi

[09:05:36.0000] <killfill>
is there a way to specify query strings when using 'then'?

[09:06:03.0000] <killfill>
or should i just use a lib to transform a javascript object -> string and concatenat that into the url?

[09:06:11.0000] <TabAtkins>
killfill: Can you give more detail? Your question doesn't make much sense to me.

[09:06:33.0000] <killfill>
oh probably becasue of my english.. :P

[09:06:54.0000] <killfill>
so i.e. fetch('//domain/api/search')

[09:07:14.0000] <killfill>
i which to send a GET request with //domain/api/search?searchfor=whatwg

[09:07:38.0000] <killfill>
is there something like fetch('//domain/api/search', {saerchfor: 'whatwg})

[09:07:39.0000] <killfill>
?

[09:08:06.0000] <TabAtkins>
Then you should put it into the string argument.  Once you call fetch(), the call is done.

[09:08:33.0000] <TabAtkins>
If the URL object exists in the browser, you can build the url programmatically, then turn it into a string automatically.

[09:08:44.0000] <zcorpan>
killfill: https://url.spec.whatwg.org/#urlsearchparams maybe?

[09:08:50.0000] <annevk>
yeah, what zcorpan said

[09:09:04.0000] <killfill>
ok, just wanted to check if the {} -> string transformation need to to that myself or there is an already way for that on fetch()

[09:09:46.0000] <annevk>
fetch() separates URL and content body a bit more cleanly than <form>, so you need to use different tools

[09:09:47.0000] <killfill>
oh

[09:10:38.0000] <wanderview>
intent-to-implement pointer events on blink-dev... thats a reversal, right?

[09:11:02.0000] <killfill>
but that seems to be for parsing query string, not for building a string out of them, right?

[09:11:09.0000] <killfill>
meaning, i need to do it myself?

[09:11:19.0000] <annevk>
wanderview: yup

[09:11:21.0000] <zcorpan>
i think you can use fetch(url_object) and the url object will stringify

[09:11:24.0000] <annevk>
wanderview: interesting

[09:11:27.0000] <zcorpan>
if i understand correctly what you want to do

[09:12:12.0000] <killfill>
zcorpan: like fetch({url: 'theurl', search: 'whatwg'}) ??

[09:12:13.0000] <annevk>
killfill: x = new URLSearchParams(); x.append("searchfor", "whatwg")

[09:12:39.0000] <annevk>
killfill: fetch(url + "?" + x)

[09:12:45.0000] <killfill>
ok

[09:13:16.0000] <annevk>
(not the cleanest way that is btw, using a URL object for URL manipulation would be better)

[09:13:20.0000] <zcorpan>
or var x = new URL(url); x.searchParams.append("searchfor", "whatwg"); fetch(x)

[09:13:28.0000] <annevk>
right

[09:14:53.0000] <killfill>
ok thanks!

[09:32:44.0000] <annevk>
Re fullscreen stuff, ended up filing https://bugzilla.mozilla.org/show_bug.cgi?id=1147459 on Gecko

[10:38:52.0000] <annevk>
hsivonen: https://github.com/Ygg01/html5ever/commit/77448b44e467769debbfbaa52ddfd559dd139220 (adds XML5 support to some servo HTML parser)

[13:00:00.0000] <annevk>
Congrats to the new V8 team and Chrome's collaboration policies! http://news.dartlang.org/2015/03/dart-for-entire-web.html

[13:01:47.0000] <annevk>
(via wanderview)

[13:13:04.0000] <smaug____>
nice

[13:13:11.0000] <smaug____>
and not surprising

[13:18:09.0000] <roc>
annevk: Xidorn Quan is supposed to be doing some fullscreen work too

[14:13:11.0000] <JonathanNeal>
What word might describe the state of an element when it is either :focus or :hover?

[14:21:36.0000] <TabAtkins>
JonathanNeal: :hocus-focus

[16:01:06.0000] <MikeSmith>
annevk: wow https://github.com/Ygg01/html5ever/commit/77448b44e467769debbfbaa52ddfd559dd139220 is pretty cool

[16:03:28.0000] <MikeSmith>
"take the best aspects of HTML(5) syntax and apply it to XML. And no, I don't mean quirks mode or the adoption agency algorithm." 😆

[16:08:59.0000] <TabAtkins>
Holy fuck, it's been 8 years since anne last worked on XML5. o_O

[16:12:47.0000] <MikeSmith>
TabAtkins: wow yeah didn't realize it was that long

[16:13:17.0000] <jgraham>
It's called "getting old"

[16:26:17.0000] <MikeSmith>
legacy XML5 parsing

[16:26:53.0000] <MikeSmith>
when the IETF makes memes: http://ietfmemes.tumblr.com/image/114620414864

[16:36:32.0000] <JonathanNeal>
TabAtkins: hocus was the first thing my co-workers said. I wish there were a state for it, like :visual-focus or :over.


2015-03-26
[19:07:57.0000] <wanderview>
Domenic: is the streams reference implementation in npm anywhere?  I'm thinking about converting some of my old stream modules to the new spec as an experiment

[19:08:19.0000] <wanderview>
I see some whatwg-stream stuff in npm... but it seems old

[19:10:20.0000] <wanderview>
I guess maybe this one is what I want... but only updated once it appears... a month ago:  https://github.com/h13i32maru/eo.whatwg-streams

[20:35:07.0000] <frewsxcv>
"To be invited, just send an email or ask us on IRC" can i take anyone up on this offer? :)

[20:35:53.0000] <frewsxcv>
/me is 'frewsxcv' on github if so

[20:46:30.0000] <caitp->
hang around for a few hours, someone will probably wake up or come back from a night of drinking soon

[20:48:44.0000] <frewsxcv>
a room full of users who write standards drinking on a wednesday night. i think i'm going to like it in here

[20:51:33.0000] <caitp->
if you're going to write standards, what better way to do it

[23:03:46.0000] <annevk>
roc: ah thanks!

[23:03:52.0000] <annevk>
I knew there was someone

[23:22:41.0000] <Domenic>
wanderview: yeah I don't think I've published. File a bug and I'll do so as soon as I get some free time (either today if TC39 ratholes on something boring, or Monday)

[23:34:05.0000] <annevk>
frewsxcv: invited to what?

[23:34:08.0000] <annevk>
/me is missing context

[01:11:22.0000] <MikeSmith>
annevk: whatwg github

[01:12:06.0000] <MikeSmith>
I did the invite thing for frewsxcv after he inquired here earlier

[01:12:13.0000] <MikeSmith>
or at least I think I did

[01:12:16.0000] <MikeSmith>
I pushed some button

[01:36:17.0000] <annevk>
MikeSmith: I'm not sure we should just give anyone access there though

[01:36:47.0000] <MikeSmith>
annevk: I checked and frewsxcv seems to be working on rust

[01:37:06.0000] <MikeSmith>
and otherwise seems clueful

[01:37:13.0000] <annevk>
ok

[01:37:33.0000] <MikeSmith>
and also I didn't add him to any teams because I don't know what he's interested in helping with

[01:38:32.0000] <annevk>
Oh I see, I thought it was about Owners

[01:39:31.0000] <MikeSmith>
ah

[01:39:42.0000] <MikeSmith>
yeah I wouldn't add anybody to Owners

[01:40:14.0000] <MikeSmith>
actually frewsxcv also seems to be contributing to servo too https://github.com/frewsxcv?tab=activity

[01:49:11.0000] <annevk>
cool cool

[02:09:40.0000] <annevk>
JakeA: I created https://github.com/whatwg/fetch/issues/27 for all aborting a fetch stuff to come together

[02:16:47.0000] <annevk>
Domenic: ^^

[02:16:54.0000] <Domenic>
yeah

[02:18:07.0000] <hsivonen>
annevk: cool to see XML5 implemented

[02:30:46.0000] <JakeA>
annevk: cheers, going through it now. Probably the highest priority thing we have

[02:35:07.0000] <hsivonen>
MikeSmith: why is the saxtree subtree of the htmlparser hg repo imported into a git repo of its own under github.com/validator?

[02:39:13.0000] <JakeA>
annevk: fetch(url, controller(c => c.abort())) should be fetch(url, {controller(c) { c.abort() }}) I think

[02:39:27.0000] <MikeSmith>
hsivonen: oh I thought I had removed that

[02:39:42.0000] <MikeSmith>
hsivonen: was experimenting

[02:39:51.0000] <MikeSmith>
will delete it now

[02:40:18.0000] <JakeA>
annevk: or fetch(url, {controller: c => c.abort()});

[02:46:07.0000] <hsivonen>
MikeSmith: I see

[02:53:48.0000] <annevk>
JakeA: I like that last one, will correct, thanks

[02:54:30.0000] <hsivonen>
MikeSmith: the SNI patch has now been deployed on validator.nu. Thank you.

[02:54:38.0000] <hsivonen>
(Still running old Java without new TLS)

[02:54:46.0000] <MikeSmith>
ah cool!

[02:54:56.0000] <annevk>
JakeA: done

[02:55:48.0000] <hsivonen>
I still have a hard time believing that Ubuntu 14.04 doesn't have OpenJDK 8 in backports

[02:56:05.0000] <MikeSmith>
hsivonen: the Apache HTTP Commons docs are inscrutable. If it weren't for stackoverflow I don't think I ever would have figured out how to migrate to the new API

[02:56:29.0000] <hsivonen>
MikeSmith: did you ask or was there already an answer there?

[02:57:52.0000] <MikeSmith>
hsivonen: there was an answer there alreadyーone of those where the person who submitted it basically said, This is based on several hours of frustration, trial-and-error, etc.

[02:58:22.0000] <hsivonen>
/me can imagine several hours of frustration with HttpClient

[02:58:31.0000] <MikeSmith>
yeah

[02:58:56.0000] <MikeSmith>
hsivonen: anyway given the track record of the maintainers of that library, it seems likely they're going to change the API again. They did in a breaking way even between, the 4.36 release and the 4.4 release, apparently

[02:59:01.0000] <hsivonen>
well, at least way back when it was better than the JDK's built-in HTTP client

[02:59:06.0000] <MikeSmith>
yup

[02:59:46.0000] <MikeSmith>
I did some looking around for possible alternatives but I couldn't find anything that looked superior and well-documented

[03:07:26.0000] <annevk>
hsivonen: not just implemented, he's also actively patching the specification

[03:07:38.0000] <annevk>
/me was impressed

[03:11:07.0000] <hsivonen>
It'll be interesting to see how much code internal subset handling is going to be (even if it ends up being just skipping over it)

[03:12:53.0000] <MikeSmith>
does the spec (yet) say anything about what do with namespaces?

[03:14:10.0000] <annevk>
MikeSmith: they're parsed and supported, from what I remember

[03:14:59.0000] <JakeA>
annevk: crazy thought while I'm reconsuming the various threads. Have we considered request.abort? As in var r = new Request(url); fetch(r); r.abort()

[03:15:15.0000] <annevk>
JakeA: yeah we have

[03:15:30.0000] <JakeA>
hah, ok *gets back to reading*

[03:15:42.0000] <annevk>
JakeA: the problem is that fetch() copies /r/ and mutates it a fair bit

[03:15:48.0000] <annevk>
JakeA: the copy that is

[03:16:32.0000] <annevk>
JakeA: it would also get weird with the cache API as wanderview pointed out

[03:17:11.0000] <JakeA>
hah, just got to that bit of the thread. Tell you what, I'll read it all before having any more "ideas"

[03:22:47.0000] <annevk>
Oh also, I'm going to moderate that particular issue if this will take a while. Cleaning up stuff and simply deleting off-topic rants if any appear

[03:35:41.0000] <Domenic>
yes please -_-

[03:41:35.0000] <annevk>
First comment already seems to have missed part of the post but I'll let it slide...

[03:42:14.0000] <Domenic>
moderate him harshly, he has already lost all goodwill

[03:54:27.0000] <annevk>
zcorpan: I guess the relevant Mozilla people for that DOMQuad question are on public-fx?

[03:55:01.0000] <zcorpan>
annevk: bz is cc-ed at least

[03:55:59.0000] <zcorpan>
roc: https://lists.w3.org/Archives/Public/public-fx/2015JanMar/0129.html

[03:56:18.0000] <annevk>
if we haven't shipped I'd say r+

[03:56:27.0000] <zcorpan>
you have shipped

[03:56:33.0000] <annevk>
that is pretty sad

[03:57:04.0000] <annevk>
zcorpan: also these complicated constructors?

[03:57:10.0000] <annevk>
zcorpan: that are impossible per IDL?

[03:57:17.0000] <annevk>
seems hard

[03:57:50.0000] <zcorpan>
annevk: yeah, webidl designed dictionaries for a single settings argument, not for this sort of overloading

[03:58:12.0000] <zcorpan>
we could change webidl, but it might still be ugly to have overloading

[03:58:39.0000] <annevk>
zcorpan: no I mean, did Gecko ship with the weird design?

[03:58:54.0000] <Domenic>
always remain skeptical of overloading :P

[03:59:52.0000] <zcorpan>
annevk: ah no i think it requires an actual DOMRect. but can check

[03:59:54.0000] <annevk>
zcorpan: or do we only return instances of these objects from certain methods?

[04:01:13.0000] <annevk>
http://lxr.mozilla.org/mozilla-central/source/dom/webidl/DOMPoint.webidl looks like it has overloading

[04:01:16.0000] <annevk>
zcorpan: ^^

[04:01:32.0000] <annevk>
same for http://lxr.mozilla.org/mozilla-central/source/dom/webidl/DOMQuad.webidl

[04:01:58.0000] <annevk>
only http://lxr.mozilla.org/mozilla-central/source/dom/webidl/DOMRect.webidl is cleanish

[04:02:15.0000] <zcorpan>
annevk: yeah but the DOMQuad doesn't accept a dictionary as a rect

[04:03:33.0000] <annevk>
yeah so we should use-counter that

[04:03:38.0000] <annevk>
and some of the other stuff too

[04:03:51.0000] <annevk>
:-(

[04:44:47.0000] <annevk>
So there's URL.createObjectURL(...) and a proposed URL.createFor(...). I was thinking URL.from(...) would be more JavaScripty but it returns a string, so maybe not...

[05:18:58.0000] <annevk>
JakeA: from your post I can't quite make out what happens when the promise is already fulfilled but the fetch is not

[05:19:42.0000] <annevk>
JakeA: e.g. there's no example demonstrating what .abort() does within .then()

[05:20:02.0000] <annevk>
JakeA: which per the goals is something I'd like to see addressed

[05:20:22.0000] <annevk>
JakeA: and is something that I don't see a general cancelable-promises design addressing

[05:20:51.0000] <JakeA>
annevk: var p = fetch(url); p.abort() - if headers have arrived, it does nothing. var p2 = fetch(url).then(r => r.text()); p2.abort(); - this would cancel either the request or the stream

[05:23:49.0000] <annevk>
hmm

[05:25:43.0000] <JakeA>
annevk: I thought about a design where onCancel would fire even if the promise was settled, but it doesn't really make sense, and I don't think it's needed

[05:28:00.0000] <JakeA>
annevk: have clarified on github

[05:30:18.0000] <annevk>
JakeA: when chained it seems okay, and I guess once you have the stream it's okay too... yeah

[05:33:18.0000] <annevk>
JakeA: not triggering .catch but triggering .finally is also novel, rather nice design I have to say

[05:34:18.0000] <annevk>
JakeA: I guess that does lead us into promise-subclass land if we want to control other things, e.g. a fetch in-flight

[05:34:28.0000] <annevk>
JakeA: or maybe the rather ugly controller approach makes a comeback then?

[05:48:22.0000] <frewsxcv>
MikeSmith: for what it's worth, i never got an invite to the github organization. i would have chimed into that conversation last night but i was asleep :)

[06:00:24.0000] <MikeSmith>
frewsxcv: ok is there a particular spec you want to help with?

[06:00:50.0000] <MikeSmith>
frewsxcv: as I think you know, github sorta forces orgs to put contributors into particular teams

[06:01:00.0000] <MikeSmith>
and we don't have a general team

[06:01:09.0000] <MikeSmith>
except for the Owners team

[06:01:11.0000] <frewsxcv>
ah, hm

[06:02:25.0000] <frewsxcv>
'dom' seems most relevant

[06:02:47.0000] <frewsxcv>
or possibly 'fetch'

[06:03:07.0000] <MikeSmith>
yeah so we don't have teams for those yet

[06:03:21.0000] <MikeSmith>
so you probably want to ask annevk

[06:03:40.0000] <MikeSmith>
he's editor for both of those

[06:04:26.0000] <frewsxcv>
alright

[06:04:39.0000] <MikeSmith>
the only teams we have so far are for the (now-defunkt) loader spec, "media-keys", notifications, serial spec, streams, and url

[06:05:01.0000] <frewsxcv>
is there a url repo?

[06:05:15.0000] <MikeSmith>
yeah

[06:05:27.0000] <frewsxcv>
that's weird, can't see it on github.com/whatwg bug i can navigate to it manually

[06:05:48.0000] <frewsxcv>
/me *but

[06:06:09.0000] <MikeSmith>
ah https://github.com/whatwg/url but I think there's another one too maybe

[06:06:43.0000] <MikeSmith>
https://github.com/webspecs/url

[06:07:14.0000] <MikeSmith>
I can't remember now if both of the repos are active or if the 2nd one's meant to replace the first

[06:10:27.0000] <MikeSmith>
frewsxcv: so for now I made a new team called "contributors" and invited you to that

[06:10:27.0000] <frewsxcv>
:)

[06:11:09.0000] <frewsxcv>
thanks!

[06:11:10.0000] <JakeA>
annevk: yeah, I don't want to do the controller thing unless we really have to

[06:38:43.0000] <annevk>
frewsxcv: I recommend just watching the individual repositories

[06:38:54.0000] <annevk>
frewsxcv: feel free to fix issues too as you see fit

[06:39:06.0000] <frewsxcv>
sounds good

[06:39:15.0000] <annevk>
frewsxcv: once you fix enough issues, we can talk about commit access I guess

[06:39:37.0000] <frewsxcv>
yeah, working on some stuff now with servo that will probably result in pull requests for some repos

[07:32:06.0000] <annevk>
JakeA: about getting feedback, https://github.com/whatwg/fetch/issues/24 pretty please?

[07:41:23.0000] <JakeA>
annevk: thanks for the nudge. I'm still in inbox hell so feel free to bug me about anything urgent like this. Will reply today.

[07:46:39.0000] <annevk>
/me is down to seven tricky threads he isn't quite sure how to tackle

[07:46:52.0000] <annevk>
well, and presumably over a hundred open issues on various standards

[07:47:08.0000] <annevk>
oh well, better than this morning

[07:57:54.0000] <JakeA>
annevk: say we work out the cancellable promise thing… any reason that stuff shouldn't just be added to Promise rather than having a subclass?

[08:11:04.0000] <bradleymeck>
is there an actual thread about cancellation yet? every time I search for one its just tons of people talking in different places

[08:12:41.0000] <annevk>
JakeA: hmm, talk to Domenic and TC39? The cancellable promise thing does seem like kind of an uphill battle given the strong feelings

[08:13:01.0000] <annevk>
bradleymeck: well that hasn't changed

[08:13:17.0000] <annevk>
biab

[08:14:04.0000] <bradleymeck>
ive started using generators :-/ they have .return I am using as a cancellation method

[08:14:11.0000] <bradleymeck>
but its kinda a dirty hack

[08:55:42.0000] <annevk>
bradleymeck: JakeA's suggestion is here btw: https://github.com/whatwg/fetch/issues/27#issuecomment-86484678

[08:59:50.0000] <bradleymeck>
seems sane, not sure I like the { onCancel } arg to new Promise, but w/e

[09:02:58.0000] <Domenic>
Don't think I like cancellation as a third channel

[09:03:53.0000] <annevk>
It makes sense...

[09:03:58.0000] <bradleymeck>
would you treat cancellation as an error?

[09:04:06.0000] <annevk>
I agree that the constructor reads a bit ugly though

[09:04:16.0000] <annevk>
This is great: http://youmightnotneedjquery.com/

[09:04:43.0000] <caitp>
what does cancelling a promise even mean

[09:05:30.0000] <annevk>
mu

[09:06:24.0000] <Domenic>
It doesn't fit with return value/thrown exception

[09:06:40.0000] <Domenic>
it isn't analogous to fulfilled or rejected

[09:06:48.0000] <Domenic>
in that it isn't a type of resolution

[09:06:55.0000] <Domenic>
it's not a state or a fate really

[09:07:28.0000] <caitp>
you're either saying "cancel my subscription to finding out what happened" or "stop doing the thing that will cause a resolution" --- but it could be either one

[09:07:53.0000] <caitp>
and the former is problematic for promise chaining

[09:08:13.0000] <caitp>
latter is too, probably

[09:08:40.0000] <Domenic>
cancellation token seems more robust in the face of such existential questioning

[09:08:48.0000] <Domenic>
since you could do it today

[09:09:04.0000] <Domenic>
although it kind of punts on the question of how/whether consumers observe

[09:10:33.0000] <darobin>
annevk: if anything that page makes me want to use jQuery more

[09:10:53.0000] <jgraham>
annevk: The inconsistent use of semicolons in the examples is maddening

[09:11:14.0000] <jgraham>
darobin: Well it gets better for !jQuery after the ajax stuff

[09:11:44.0000] <darobin>
jgraham: some parts yes, then it gets worse and better on and off

[09:12:00.0000] <darobin>
and if you switch to IE8, it mostly gets worse

[09:12:30.0000] <wanderview>
Domenic: are the node.js/io.js folks considering implementing whatwg-streams?  wondered after this issue:  https://github.com/whatwg/streams/issues/304

[09:12:35.0000] <caitp>
but it's only looking at ie compatibility

[09:12:42.0000] <Domenic>
wanderview: yeah, there's definite interest

[09:12:43.0000] <caitp>
it's not like webkit/blink/gecko are perfect and non-buggy

[09:13:06.0000] <wanderview>
Domenic: but they have not started working on it yet?

[09:13:16.0000] <annevk>
Domenic: I guess the other thing you could do is embrace async is a little different

[09:13:19.0000] <Domenic>
wanderview: no, probably just going to lift the implementation from v8

[09:13:32.0000] <jgraham>
caitp: I imagine they are more or less compatible on the things listed there. It's mostly not rocket science.

[09:13:34.0000] <Domenic>
annevk: meaning what?

[09:13:48.0000] <jgraham>
But testsneeded if you know of any bugs :)

[09:14:01.0000] <wanderview>
Domenic: hmm... can you explain why streams is a language (v8) feature and not more of a DOM/js hosted thing?

[09:14:03.0000] <caitp>
well, it depends how much new stuff you want to use

[09:14:06.0000] <bradleymeck>
wanderview: there is a lot of talk / concern about needing data before daing things

[09:14:11.0000] <Domenic>
wanderview: they're like promises

[09:14:17.0000] <bradleymeck>
doing*

[09:14:25.0000] <annevk>
Domenic: meaning you might need more than return and throw

[09:14:25.0000] <Domenic>
wanderview: implemented as a v8 extension probably since blink team owns it

[09:14:45.0000] <Domenic>
annevk: sure, but i'm saying that cancel isn't even in the same category

[09:14:53.0000] <caitp>
qsa works inconsistently between different browsers when it comes to xml crap

[09:14:57.0000] <Domenic>
it affects the ongoing operation; it's not a result of it

[09:15:05.0000] <caitp>
cloneNode is broken for template elements in webkit (until january afaik)

[09:15:09.0000] <caitp>
lots of other stuff

[09:15:29.0000] <caitp>
the web is ridiculously complicated, and probably impossible to simplify, so stuff is gonna be wrong

[09:15:29.0000] <wanderview>
Domenic: ok... but its just some properties on the global essentially... not actual language primitives introduced, right?

[09:15:49.0000] <Domenic>
wanderview: i mean i guess so, in the same way as Promise is just a property on the global

[09:17:53.0000] <bradleymeck>
wanderview: it will need to have hooks in the VM somehow for implementations to allow better chaining etc that we can't see from the ref impl if we want to optimize them.

[09:18:22.0000] <bradleymeck>
which is one of the things we are curious about, as well as some of the usage of getters/setters

[09:18:36.0000] <wanderview>
right... I guess my confusion stems from stuff like Promise being implemented under "DOM" in gecko

[09:18:39.0000] <bradleymeck>
but we have lots of questions, just no data to do much

[09:19:04.0000] <Domenic>
bradleymeck: you keep saying "we" but you mean "I"

[09:19:04.0000] <caitp>
surprised they didn't put it in the spidermonkey part of the tree

[09:20:13.0000] <bradleymeck>
Domenic: I have trevnorris and others from NS

[09:20:18.0000] <bradleymeck>
I am not alone

[09:20:40.0000] <Domenic>
yes, they are much more understanding than you are

[09:20:53.0000] <bradleymeck>
as long as it is not frozen for eternity its not that big of a deal for us, but it sounds like it is being frozen before it gets userland testing

[09:21:02.0000] <bradleymeck>
promises were in userland for a while before they landed

[09:21:17.0000] <wanderview>
caitp: maybe there is a SM part too... this is the binding part I'm familiar with:  https://dxr.mozilla.org/mozilla-central/source/dom/promise

[09:21:59.0000] <caitp>
i don't see it with the other self-hosted JS stuff in sm

[09:22:50.0000] <bradleymeck>
I don't understand the freezing; but I'm backing off and letting others poke around at it. now I'm just kinda curious/concerned if there does show up a problem but it is frozen

[09:23:19.0000] <wanderview>
bradleymeck: do you mean freezing the spec or locking a stream?  (sorry, missed the context)

[09:23:29.0000] <bradleymeck>
the spec

[09:24:25.0000] <wanderview>
it seems like every spec continues to evolve over time... its just how much you need to pay attention to backward compatibility

[09:25:56.0000] <bradleymeck>
it will evolve but it would ease my mind to have some testing out there to make sure nothing nefarious is hiding

[09:26:24.0000] <bradleymeck>
node's crypto calling .nextTick is pretty heinous how many times it ends up being called

[09:27:50.0000] <annevk>
wanderview: Promise being in DOM is meant as a "temporary" hack

[09:27:55.0000] <wanderview>
bradleymeck: are your spec concerns written up any where?  I have to run now, but would be interested in learning more later

[09:28:09.0000] <annevk>
wanderview: leads us to violate the specification in some edge cases

[09:28:17.0000] <wanderview>
annevk: awesome

[09:28:18.0000] <bradleymeck>
wanderview: ping trevnorris hes got the things

[09:28:43.0000] <wanderview>
thanks

[09:31:49.0000] <annevk>
wanderview: it seems better than https://code.google.com/p/v8/issues/detail?id=3237

[09:41:00.0000] <annevk>
Domenic: I don't know. To me it makes sense. Return/throw is me controlling the flow. Cancel is the outside controlling the flow. In synchronous context cancel just makes no sense.

[09:41:34.0000] <caitp>
"break" statements are usually considered to be a part of flow control

[09:41:34.0000] <annevk>
Domenic: but I guess you've had this argument a 1000 times already, no need to indulge me :-)

[09:41:50.0000] <caitp>
but breaking a promise is just too tacky

[11:02:44.0000] <Domenic>
still kinda sad we didn't get more puns, keep and break are a lot more fun than fulfill and reject

[12:59:53.0000] <Domenic>
oh wow the cancelable promise thread got getify'd, this'll be fun

[13:00:32.0000] <Domenic>
wow i think he does not know what backpressure means

[13:05:37.0000] <bradleymeck>
Domenic: he went from 0-60 on spec knowledge in like 2 years @-o, not sure I always agree but he has changed a lot

[13:06:06.0000] <bradleymeck>
has same nature to freak out as I do though

[13:08:48.0000] <roc>
annevk: see my email in public-fx ... we shipped a Constructor(DOMRectReadOnly), which is what the spec said at the time, and doesn't have problems AFAIK

[13:09:58.0000] <Domenic>
sigh i shouldn't be mean

[13:17:21.0000] <caitp>
what does backpressure mean?

[13:17:42.0000] <caitp>
for those of us who don't know how to spell good and want to do other stuff good too

[13:18:44.0000] <annevk>
roc: it's mostly the overloading that would be problematic, and it seems passing a DOMRect is not the most useful, but I'll let you guys sort it out :-)

[13:20:02.0000] <bradleymeck>
having a stream pushing data to another stream that is consuming; the stream that is consuming being being able to halt the pushing stream while it processes stuff is back pressure. Generally this is accomplished by using pull streams (so the consumer controls when new data comes in)

[13:21:57.0000] <roc>
I don't think overloading DOMRectReadOnly and DOMPointInit is problematic

[13:27:49.0000] <caitp>
Domenic: do you know who would be good to ping about something that needs to be checked into blink on the next v8 roll? sherrifs or somethin?

[13:31:15.0000] <caitp>
actually, it may not be needed at all

[14:02:59.0000] <zcorpan>
roc: thanks. replied

[14:04:12.0000] <zcorpan>
roc: any opinion on introducing DOMMatrixInit (other thread on public-fx)?

[14:05:03.0000] <IZh>
Hi! Getting 403 error on https://html.spec.whatwg.org/

[14:06:05.0000] <IZh>
On https://whatwg.org/ too.

[14:06:20.0000] <zcorpan>
Hixie: ^

[14:20:32.0000] <IZh_>
Channel logs' site is not working too.

[14:21:21.0000] <IZh_>
Upd: WHATWG's sites now works.

[14:21:55.0000] <caitp>
it's a miracle

[15:24:26.0000] <wilhelm>
"RDFa Working Group now Closed". And there was much rejoicing.

[15:34:49.0000] <tantek>
wow for reals? (I mean on the closed, not the rejoicing)

[15:41:22.0000] <jgraham>
ere actually was much rejoying

[15:41:28.0000] <jgraham>
*rejoycing

[15:41:38.0000] <jgraham>
A parade just went past my window

[15:45:09.0000] <tantek>
next up: who around here is using JSON-LD, for anything?

[15:52:54.0000] <gavinc>
tantek: me! ... but I'm not that normal ;)


2015-03-27
[23:42:55.0000] <zcorpan>
krijnhoetmer: http://www.downforeveryoneorjustme.com/http://krijnhoetmer.nl/irc-logs/whatwg

[01:25:01.0000] <jgraham>
hsivonen: I have mentioned to the Servo people several times that document.write is non-trivial to implement

[01:25:23.0000] <jgraham>
Hopefully kmc will work on it in Q2 or something, but I'm not sure

[01:40:14.0000] <annevk>
JakeA: my main concern now with your cancelable promises proposal is that Domenic doesn't like it

[01:40:21.0000] <annevk>
JakeA: that doesn't bode well for standardizing it

[01:48:46.0000] <JakeA>
annevk: yeah, if Domenic doesn't like it, it's probably wrong :D - will chat with him later and find out why

[01:50:46.0000] <annevk>
GitHub seems super slow or something is wrong with my network...

[01:50:54.0000] <JakeA>
Could always add .abort() to the return promise but not any additional promises. The token solution is soooooo ugly, I'm surprised it has so much backing

[01:50:55.0000] <annevk>
Nah, just GitHub

[01:51:08.0000] <JakeA>
annevk: they're being ddos'd

[01:51:59.0000] <JakeA>
https://twitter.com/githubstatus/status/581372857353154560?s=09

[01:52:02.0000] <annevk>
Okay, I guess I'll wait a bit then

[01:52:40.0000] <annevk>
JakeA: yeah, that's the terminate() idea, while reserving the names abort() / cancel() for future efforts

[01:53:21.0000] <annevk>
not super elegant, but does seem better than the token thing, agreed

[01:58:16.0000] <MikeSmith>
I heard it through the grapevine that "Upgrade Insecure Requests" support may be landing soon

[01:58:30.0000] <MikeSmith>
if so that's a pretty amazing success story of going from "gleam in someone's eye" to shipping feature in record short time

[02:03:12.0000] <annevk>
Ooh, I think I'll introduce "redirect mode"

[02:03:46.0000] <annevk>
With "follow", "error", and "manual", and expose only the first two to script

[03:12:57.0000] <JakeA>
annevk: re media key event targeting, I think it's the element that should request the global lock for media key events

[03:14:43.0000] <annevk>
JakeA: makes sense

[04:39:37.0000] <JakeA>
annevk: If background sync is split into .sync and .periodicSync, we should probably have separate ServiceWorker events

[04:56:52.0000] <annevk>
JakeA: yeah I think that would make sense

[04:57:06.0000] <annevk>
JakeA: they are quite distinct and can have completely different UI flows too

[04:57:48.0000] <JakeA>
annevk: agreed, different use-cases too

[05:41:50.0000] <annevk>
x => y is such a convenient way to write a function

[05:53:27.0000] <jgraham>
Yeah, I hope that quells some of the complaints about testharness.js being too verbose

[06:17:53.0000] <smaug____>
/me being old and cranky code reviewer thinks => is good for writing code, but bad for reading it

[06:18:17.0000] <smaug____>
luckily I review .js very rarely

[06:18:35.0000] <smaug____>
(except tests)

[06:41:27.0000] <JakeA>
I only use "function" when it's the only way to create a named function, or for when I want the "this" value to change, which is rarely

[07:42:54.0000] <JakeA>
Domenic: I realise you've gone through this a ton of times, but could you explain why cancellable promises are bad? A link will do

[08:50:00.0000] <wanderview>
JakeA: response.body.cancel() is shipped?

[08:50:24.0000] <JakeA>
wanderview: hmm, yeah, misleading wording. I mean it's in Canary

[08:50:31.0000] <JakeA>
wanderview: Thanks for pointing that out

[08:50:59.0000] <JakeA>
Updated the post

[08:51:44.0000] <wanderview>
I guess it was more I didn't realize .cancel() was on ReadableStream

[08:52:02.0000] <wanderview>
but I'm happy to be the pedantic police too :-)

[08:52:09.0000] <JakeA>
wanderview: yep! https://streams.spec.whatwg.org/#rs-class

[08:53:32.0000] <wanderview>
JakeA: so, what happens if someone does cache.put(req, resp).then(function () { resp.body.cancel(); })?

[08:53:47.0000] <wanderview>
and the cancel fires before the body is written to the cache

[08:54:18.0000] <JakeA>
"If IsReadableStreamLocked(this) is true, return a promise rejected with a TypeError exception."

[08:54:34.0000] <JakeA>
I imagine the cache has a lock

[08:55:24.0000] <wanderview>
yea... I guess they would just have to do cache.delete(req) and then eat the wasted bandwidth usage?

[08:56:13.0000] <wanderview>
JakeA: seems like it could do whatever Cache is supposed to do if the network errors out while getting the body, but after headers have been committed to cache

[08:56:16.0000] <JakeA>
wanderview: Unless .put returns *jazz hands* a cancellable promise

[08:56:21.0000] <wanderview>
(which I don't currently understand)

[08:56:45.0000] <wanderview>
JakeA: I don't think cancellable promise helps here... since we changed Cache.put() to resolve that promise before the body is written to disk

[08:56:54.0000] <wanderview>
right?

[08:56:54.0000] <JakeA>
Good point

[08:57:32.0000] <wanderview>
JakeA: I suppose we could make Cache.put() promise resolve with another promise representing body completion

[08:57:54.0000] <annevk>
Very nice that document.URL and document.documentURI are made compatible in Chrome

[08:58:22.0000] <JakeA>
wanderview: a promise can't resolve with a promise, but it could be an object with a promise hanging off it I guess

[08:58:39.0000] <wanderview>
no?  hmm

[08:59:22.0000] <wanderview>
that seems a weird restriction

[09:00:22.0000] <wanderview>
JakeA: has chrome implemented committing to Cache when headers are available?

[09:01:34.0000] <JakeA>
wanderview: if you resolve a promise with a promise, it unwraps the promise and resolves with the underlying value. Eg Promise.resolve(fetch(url)) resolves with a response, not a fetchPromise

[09:02:06.0000] <wanderview>
I see... I guess that makes sense

[09:02:07.0000] <JakeA>
wanderview: ummmm, I'm not completely sure to be honest. We *should* have

[09:02:24.0000] <wanderview>
JakeA: I'm still hazy on what Cache is supposed to do on network error when writing the body

[09:02:33.0000] <wanderview>
I should try to decipher that part of the spec I suppose

[09:03:17.0000] <wanderview>
although I think it might not be spec'd... since it just says "may commit when headers available" and async body writing is not even really mentioned anywhrere else

[09:03:27.0000] <wanderview>
so I was curious what chrome did today

[09:04:21.0000] <wanderview>
hmm... seems the spec only does early resolve for add()... not put()

[09:04:33.0000] <wanderview>
oh... nm

[09:07:20.0000] <wanderview>
JakeA: wrote an issue: https://github.com/slightlyoff/ServiceWorker/issues/665

[09:12:16.0000] <JakeA>
wanderview: Cheers!

[09:15:35.0000] <wanderview>
I have to admit... from a purely abstract point of view it seems to make more sense to make the thing producing the Promise to have cancel then on the Promise itself

[09:15:50.0000] <wanderview>
but my eyes also glaze over when trying to read that github issue

[09:31:44.0000] <JakeA>
wanderview: I don't think Domenic likes it, which probably means there's a big flaw with it that I haven't seen yet

[09:33:20.0000] <wanderview>
JakeA: it just seems that a "promise of future behavior" conceptually does not grant control over anything... its just a notification mechanism

[09:35:59.0000] <JakeA>
wanderview: yeah, I get that a cancellable promise breaks that, but I'm not sure why it's a problem in this case.

[09:39:42.0000] <wanderview>
JakeA: yea... I meant from a theoretical abstract point of view... I guess you are proposing that Promises "forget" the operation and a cancel occurs if they all forget?

[09:39:49.0000] <wanderview>
from the talk about ref counts

[09:41:08.0000] <JakeA>
wanderview: yeah, if all cancellable children enter a cancelled state, as should the parent

[09:41:39.0000] <wanderview>
but you can have some children that are not cancellable?

[09:42:12.0000] <JakeA>
wanderview: Promise.resolve(cancellablePromise) creates a non-cancellable child

[09:43:11.0000] <wanderview>
JakeA: seems like many people may not understand this distinction...

[09:44:40.0000] <wanderview>
JakeA: don't get me wrong... I want cancellable fetch too... but this seems like footgun territory

[09:55:02.0000] <annevk>
Do we really want cancelable fetch? I'm personally curious if we can set a record in developer table flipping.

[09:58:27.0000] <wanderview>
annevk: you know... April 1 is coming up... you could have some fun here

[09:59:16.0000] <jgraham>
Tell people that we heard they wanted cancellble fetch, so we cancelled fetch and they will have to use XHR instead.

[09:59:35.0000] <wanderview>
fetch has been renamed XHR2

[09:59:36.0000] <annevk>
slowclap

[09:59:54.0000] <caitp->
it's potentially a big deal for mobile

[10:01:07.0000] <gsnedders>
How does fetch work wrt HTTP2 server push?

[10:02:18.0000] <wanderview>
annevk: image you are using fetch() to stream https://github.com/whatwg/fetch/issues/27 and want to stop reading because its never ending... how do you cancel the fetch?

[10:02:55.0000] <annevk>
gsnedders: can't tell if joke or honest question

[10:03:09.0000] <wanderview>
mine was a joke

[10:07:25.0000] <gsnedders>
annevk: semi-serious. what happens if the server initates another response in response to the request? is it just assumed the UA cancels it?

[10:08:00.0000] <annevk>
gsnedders: it would just be used for the next identical request afaik

[10:08:37.0000] <annevk>
gsnedders: push stuff is handled by the network layer / network cache

[10:09:18.0000] <gsnedders>
I thought normally some stuff crossed that boundary, but I could be misremembering

[10:12:01.0000] <annevk>
gsnedders: if that actually happened that would mean every context we know would be affected, no?

[10:12:24.0000] <annevk>
gsnedders: that would not be a great upgrade of the network layer

[10:12:38.0000] <annevk>
(not saying we could not do something with push if we wanted to at some point)

[10:14:02.0000] <gsnedders>
annevk: I thought there were interactions with the pre-parser in most impls, but idk. Obviously just cancelling it immediately or just caching it in case it's requested are plausible.

[11:02:44.0000] <bradleymeck>
gsnedders: the same, your main payload will come in, and push will be cached

[11:03:03.0000] <bradleymeck>
i assume it doesn't do sorcery... but I could be wrong

[11:31:54.0000] <JakeA>
wanderview: I think you're right btw, normal promises should count as refs

[12:39:26.0000] <wanderview>
JakeA: it does seem not being able to cancel .json()/.text()/etc reduces their utility

[12:39:42.0000] <wanderview>
you basically can't use them if you think you might need to cancel the stream

[12:40:22.0000] <wanderview>
Domenic: why do streams require the lock in order to cancel?

[12:58:59.0000] <Domenic>
Lots of scrollback here, not sure how much of it I can reply to on my iPad…

[12:59:43.0000] <Domenic>
Streams required lock in order to cancel because if you have a lock then nobody should be able to interfere with you.

[13:00:29.0000] <Domenic>
We envision .json() etc., as well as pipeTo, returning cancellable promises (I.e., supporting cancellation tokens)

[13:01:23.0000] <Domenic>
JakeA: the main thing that immediately made me flinch from your proposal is that it treats cancel on the same ground as fulfill and reject. I don't think it's at all analogous. It would need to be separated, for sure.

[13:02:09.0000] <wanderview>
Domenic: thanks

[13:03:06.0000] <wanderview>
Domenic: although I'm not sure I see cancel in the same light as other operations on the stream... even if you have a lock it seems the source could encounter an error and cancel() is just one type of error

[13:04:00.0000] <Domenic>
Cancellable promises are not bad, but we don't want to give out the ability to cancel to everyone who holds the promise. It's probably ok though for some types of operations to return a promise while also returning the capability to cancel itself, as long as that's not baked in to all promises ever

[13:05:15.0000] <Domenic>
wanderview: well cancel() makes things closed, not errored, but yes, I agree. That's a big capability leak though. The same reason we don't have p.resolve() / p.reject(), instead reserving those for the creator

[13:06:07.0000] <Domenic>
Not exactly the same, but the same category of hazard

[13:06:17.0000] <wanderview>
hmm, ok

[13:07:43.0000] <Domenic>
I agree it's not immediately clear and could perhaps be a judgment call. But the only reason I wanted it was to be able to cancel pipes/json/etc. and then I realized those should just be cancelable promises

[13:10:46.0000] <wanderview>
Domenic: I guess its confused in the github issue because the world where you would use body.cancel() does not contain cancelable promises...  I mean, they are being discussed as alternatives to one another

[13:14:27.0000] <Domenic>
O_o

[13:14:41.0000] <Domenic>
How do you cancel before the headers arrive then

[13:14:57.0000] <wanderview>
Domenic: some fetch extension or something

[13:15:00.0000] <Domenic>
I unsubbed from the issue btw

[13:15:14.0000] <wanderview>
Domenic: but put cancelation on the source, not the promise

[13:15:57.0000] <Domenic>
Well I mean you could use the same mechanism for cancelling .json etc.

[13:16:21.0000] <Domenic>
When I say "cancelable promise" I don't necessarily mean a promise with a .cancel() method

[13:16:58.0000] <wanderview>
I should probably just defer to annevk or JakeA here... I have not kept up with the issue as well as they have

[15:11:29.0000] <JakeA>
Domenic: do you have some time on Monday to go through this with me?

[15:17:10.0000] <Domenic>
JakeA: yeah definitely.

[15:40:39.0000] <JakeA>
Domenic: ta, I'm sure it'll be retreading old ground, but fetch is getting a lot of flack for it

[16:01:07.0000] <Domenic>
yeah, people really don't seem to have taken the bicycle analogy to heart

[16:59:09.0000] <scheib>
dtseng: Look at https://build.chromium.org/p/chromium.linux/builders/Linux%20Tests/builds/22541


2015-03-28
[17:10:45.0000] <scheib>
browser_tests

[17:10:46.0000] <scheib>
AutomationApiTest.DesktopLoadTabs failing in e.g. https://build.chromium.org/p/chromium.linux/builders/Linux%20Tests/builds/22541 look like: https://codereview.chromium.org/1003283002  but revert checkbox no worky due to A+, preparing manual revert.

[17:24:27.0000] <scheib>
Landed revert as https://codereview.chromium.org/1040863002/

[17:28:12.0000] <jgraham>
wrong channel?

[17:29:00.0000] <scheib>
jgraham: Thanks.. oops. :P

[20:01:19.0000] <MikeSmith>
Hixie: fyi http://www.andreaforte.net/ParkICER2013.pdf (by way of SteveF) See Table 6. Nothing super interesting but on the off chance you might be able to glean anything from it.

[23:30:19.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=1055465#c8 if we still have that TR/ wiki page

[07:45:51.0000] <Ms2ger>
annevk, do you know if there's any standardization of the value of the Accept header?

[08:23:39.0000] <annevk>
I don't think so, though I think we should use */* mostly...

[09:35:11.0000] <Domenic>
annevk: https://github.com/mozilla/servo/wiki/Relevant-spec-links perhaps?

[09:35:18.0000] <Domenic>
oh i see the "harms of TR" wiki page

[09:35:36.0000] <frivoal>
"HTML Editing APIs" defines "Editing Host" as either an HTML element with a contenteditable, or the HTML element child of a document with designMode

[09:35:55.0000] <frivoal>
Is there a term that covers the superset of that AND form controls into which the user can type something?


2015-03-29
[17:56:49.0000] <IZh>
Hi. Once again 403 error on the web-site.

[03:30:54.0000] <IZh>
Hi. What's happened with site?

[04:02:57.0000] <annevk>
IZh: what site?

[04:03:29.0000] <IZh>
annevk: whatwg.org

[04:03:35.0000] <annevk>
IZh: works fine here

[04:03:47.0000] <IZh>
I'm getting 403.

[04:04:02.0000] <annevk>
IZh: any specific URL?

[04:05:26.0000] <IZh>
annevk: Any URL.

[04:06:41.0000] <IZh>
Even https://whatwg.org/

[04:07:47.0000] <IZh>
Forbidden

[05:15:29.0000] <JakeA>
Works for me

[05:16:17.0000] <benjamingr>
works for me too

[05:17:23.0000] <IZh>
Hmm... Am I banned? :-)

[05:28:50.0000] <IZh>
Who is the admin of the server?

[07:49:43.0000] <annevk>
IZh: Hixie

[07:50:11.0000] <IZh>
annevk: Thanks.

[10:23:14.0000] <zewt>
Use of getPreventDefault() is deprecated. Use defaultPrevented instead. <- man, that's the sort of pointless warning that makes developers start ignoring console warnings

[10:24:02.0000] <zewt>
should only be things that matter (utf-8, sync xhr), not cosmetics

[14:53:25.0000] <aleray>
hi, is there a way to output prettified html using html5lib python?

[15:10:35.0000] <Ms2ger>
Prettified? Not that I know of

[15:12:37.0000] <gsnedders>
aleray: no

[15:14:44.0000] <jgraham>
Well I mean it's possible, but you have to write a custom serializer

[15:19:41.0000] <gsnedders>
nah, should be doable with a treewalker filter, I think?

[15:19:50.0000] <gsnedders>
Depends on how pretty you want, really :)

[15:24:56.0000] <aleray>
gsnedders, jgraham Ms2ger typically something like this: http://jsbeautifier.org/

[15:53:08.0000] <aleray>
would be an interesting project. For now I will use the node.js package js-beautify (which seems to be develloping a python module for that)


2015-03-30
[18:14:26.0000] <MikeSmith>
anybody know if there's a WebKit implementation bug open for datalist

[18:15:39.0000] <MikeSmith>
https://bugs.webkit.org/show_bug.cgi?id=27247

[18:15:45.0000] <MikeSmith>
It seems

[18:18:48.0000] <MikeSmith>
now myquestion is, what's blocking it

[00:15:38.0000] <annevk>
MikeSmith: probably just someone to work on it

[00:19:51.0000] <MikeSmith>
annevk: yeah, seems so

[00:20:59.0000] <MikeSmith>
tkent points out that the interactive form validation stuff is in the same state

[01:35:58.0000] <JakeA>
annevk: when is the right time to make response/request.body a ReadableStream in the fetch spec?

[02:05:29.0000] <annevk>
JakeA: I was waiting for "tee" to be defined

[02:05:38.0000] <annevk>
JakeA: seems to be the only issue left: https://github.com/yutakahirano/fetch-with-streams/issues

[02:05:49.0000] <JakeA>
annevk: gotcha, cheers

[02:05:57.0000] <annevk>
JakeA: well, and also, I'm waiting for some confirmation that this design is okay

[02:06:34.0000] <annevk>
JakeA: I wish there was a second implementation

[02:12:58.0000] <hsivonen>
MikeSmith: If I tweak the TLS config for the validator, do you have a preference whether I should set properties procedurally in Main.java or via external files and command line switches managed by build.py?

[02:13:28.0000] <hsivonen>
I'm leaning towards Main.java, because the command line is pretty crazy already

[02:13:57.0000] <MikeSmith>
hsivonen: yeah, in Main.java sounds better to me as well

[02:14:06.0000] <hsivonen>
MikeSmith: OK. thanks

[02:14:13.0000] <MikeSmith>
hai

[03:27:21.0000] <mounir>
am I correct that per webidl, if I want a dictionary parameters with values depending on other parameters, i need to have a base dictionary in the method parameter type?

[03:32:38.0000] <Ms2ger>
What

[03:33:12.0000] <mounir>
Ms2ger: I have navigator.permissions.query(name, options)

[03:33:20.0000] <mounir>
options will depend on "name"

[03:33:36.0000] <Ms2ger>
You mean like canvas.getContext()?

[03:33:52.0000] <Ms2ger>
I thought we decided that wasn't a pattern we wanted to repeat

[03:35:30.0000] <mounir>
Ms2ger: except that "name" is part of an enum

[03:35:54.0000] <mounir>
and it's only used to know a permission state, not to get a feature

[05:07:08.0000] <JakeA>
Domenic: let me know when you're free to drown in the lands of cancellable promises

[05:49:43.0000] <zcorpan>
why is there no TouchEvent constructor?

[05:56:03.0000] <wilsonpage>
roc ping

[06:01:12.0000] <annevk>
wanderview: hey, where are we at with https://github.com/yutakahirano/fetch-with-streams/issues/25 and streams in general?

[06:29:03.0000] <annevk>
zcorpan: do you know if Chromium has an origin associated with the global?

[06:33:22.0000] <zcorpan>
annevk: don't know

[06:39:21.0000] <wanderview>
annevk: at this point I do not feel comfortable implementing that... I'm planning to talk to sicking in a couple weeks to try to iron out our differences

[06:42:24.0000] <annevk>
JakeA: given wanderview's statement and not hearing anything from Apple/Microsoft I'm inclined to hold off on integrating streams for now

[06:44:18.0000] <JakeA>
annevk: makes sense, wasn't aware of wanderview's concerns

[06:44:26.0000] <wanderview>
annevk: I guess to clarify, I'm personally ok with implementing the fetch body stream bit... but I need to address sicking's concerns first... and it feels like we're further away from agreement than I thought before

[06:45:56.0000] <wanderview>
JakeA: not my personal concerns... we need some internal consensus before moving forward, though

[06:46:07.0000] <wanderview>
if that makes sense

[07:19:52.0000] <jgraham>
Anyone know of a version of something like jsfiddle or the live dom viewer with support for multiple origins?

[08:25:26.0000] <Domenic>
JakeA: let's do this

[08:25:34.0000] <Domenic>
wow that thread really got overrun

[08:26:17.0000] <JakeA>
Domenic: yeah. Where's the best place to do this, here?

[08:26:26.0000] <Domenic>
seems reasonable

[08:26:34.0000] <Domenic>
Unless you want VC or something for higher bandwidth

[08:28:39.0000] <JakeA>
We'll try here and if that isn't good enough (or annoys people here) we'll go VC

[08:28:44.0000] <JakeA>
Will be back in a min

[08:32:12.0000] <JakeA>
Domenic: so, I get the feeling you've been around the ref-counting idea before, and every other cancellable-promise proposal, and you don't think it's possible outside of a token-based system. Is that true?

[08:34:10.0000] <Domenic>
JakeA: I think ref-counting is tricky business with lots of edge cases and potential usability hazards. I'd want to see it worked out in excruciating detail before saying it's workable.

[08:34:46.0000] <Domenic>
I'm also sympathetic to the argument that it's philosophically "wrong", i.e. cancellation should be a property of the operation and not of the result.

[08:35:17.0000] <Domenic>
JakeA: as an example I'd wonder if Promise.prototype.then.call(cancelablePromise, f, r) increases the ref count, or even works at all.

[08:36:50.0000] <JakeA>
Domenic: I think it would increase ref count. I initially thought otherwise, that the parent should only count cancellable children, but I think all children is more consistent

[08:37:20.0000] <Domenic>
JakeA: OK, so this would involve modifying the spec for Promise to be aware of CancelablePromise?

[08:39:43.0000] <JakeA>
Domenic: does a promise have a link to its children? (eg, a way to iterative over the and look at their state?)

[08:40:41.0000] <Domenic>
JakeA: only before it gets fulfilled or rejected; after that it aggressively cuts off references in order to avoid memory "leaks".

[08:42:05.0000] <JakeA>
Domenic: that seems ok then, since a settled promise cannot cancel. Promise.prototype.then.call(cancelablePromise, f, r) would still create a cancellable promise

[08:42:37.0000] <Domenic>
Hmm OK, so @@species is still CancelablePromise

[08:42:57.0000] <JakeA>
Promise.resolve(cancellablePromise) will create a child plain Promise

[08:43:00.0000] <Domenic>
right

[08:43:16.0000] <Domenic>
So you can't use this to just cancel a fetch operation then, if the headers have already been received

[08:43:26.0000] <Domenic>
You need to do the chaining thing

[08:43:48.0000] <Domenic>
But you can't e.g. create a token, do some fetches (which shar ethe token), then when people navigate the page, cancel the token and thus destroy all chained processing

[08:44:01.0000] <Domenic>
instead you have to keep track of all child promises

[08:44:10.0000] <Domenic>
and cancel them, when people navigate the page

[08:44:22.0000] <Domenic>
("navigate the page" = within a single-page app, not browser navigation)

[08:44:23.0000] <JakeA>
fetch(url).then(r => r.json()) - both fetch() and r.json() are cancellable

[08:44:29.0000] <Domenic>
right, but

[08:44:33.0000] <Domenic>
compare with:

[08:45:16.0000] <Domenic>
var canceller = new Canceller(); var p1 = fetch(url1, { canceller }); var p2 = fetch(url2, { canceler }); doStuffWith(p1, p2); doMoreStuffWith(p1, p2); /* later */ canceller.cancel();

[08:45:45.0000] <Domenic>
tokens allow you, as the initiator of fetch, to decide when to stop

[08:46:02.0000] <Domenic>
instead of depending on your consumers to coordinate and say "oh, we'd better all cancel at the same time"

[08:46:47.0000] <Domenic>
I guess you could build that on top of promise.cancel() though

[08:47:14.0000] <Domenic>
well, but not for after-headers-have-arrived...

[08:47:24.0000] <Domenic>
unsure

[08:47:30.0000] <JakeA>
Domenic: var p1 = fetch(url); /* pass p1 to some other code which does whatever it wants */ p1.cancel(); /* kill the downward chain */

[08:47:57.0000] <Domenic>
right but you don't actually kill the downward chain because of ref-counting

[08:48:10.0000] <Domenic>
if "whatever it wants" includes a .then, you lose.

[08:48:35.0000] <Domenic>
I guess you could Promise.resolve() it first

[08:49:17.0000] <Domenic>
Can we turn things around for a bit? Why do you find the ref-counting solution more attractive? It seems less flexible and harder to reason about, to me.

[08:49:18.0000] <JakeA>
Domenic: ref-counting isn't used on the promise you call .cancel on, it stops straight away & cancels all children. Ref counting is used to decide if the parent should now be cancelled

[08:49:57.0000] <Domenic>
JakeA: oh interesting... so cancel flows in both directions

[08:50:04.0000] <Domenic>
down like rejection, but also up to parents

[08:50:17.0000] <JakeA>
If you call p.cancel() this promise will always cancel as long as it hasn't settled, as will all its children and so on. p's parent may cancel, if p was its only child or all its children have cancelled

[08:50:22.0000] <JakeA>
That's what I was thinking

[08:50:28.0000] <Domenic>
huh

[08:50:58.0000] <Domenic>
hmm ok back to the modifying-Promise-spec

[08:51:06.0000] <Domenic>
because there's no linkage from child to parent right now

[08:51:31.0000] <Domenic>
i guess it's only necessary for CancelablePromises

[08:51:41.0000] <Domenic>
I worry a bit about the implicit reference causing memory leaks

[08:52:07.0000] <JakeA>
Domenic: once the promise settles it can kill its parent link

[08:52:15.0000] <JakeA>
as it can no longer be cancelled

[08:52:18.0000] <Domenic>
var q = cancelablePromise.then(x).then(y).then(z).then(w) keeps 5 promises alive whereas for normal promises it'd be just 1

[08:52:41.0000] <Domenic>
hmm right ok so maybe it's the same then

[08:52:59.0000] <Domenic>
probably

[08:54:31.0000] <JakeA>
So when p.cancel() is called, it walks up the chain to find the highest promise that can be cancelled. That promise gets its cancel callback called, then the others get [rejected/hung/something else]

[08:55:07.0000] <Domenic>
the others?

[08:55:31.0000] <JakeA>
Sorry, down the chain from the one that gets cancelled

[08:55:40.0000] <Domenic>
right, ok

[08:55:59.0000] <Domenic>
so unwinding the stack a bit ... why do you like this design?

[08:58:08.0000] <JakeA>
Domenic: var p1 = fetch(url); var child1 = p1.then(r => consumeStream(r)); var child11 = child1.then(doSomethingElse); child11.cancel();

[08:58:36.0000] <JakeA>
Taking that example:

[08:59:37.0000] <JakeA>
If there's another p1.then(…), the child11 will appear cancelled, but the underlying fetch will not, so the branch is safe

[09:00:21.0000] <Domenic>
yep, i got that

[09:00:44.0000] <Domenic>
not sure why you think it's a good experience though, in comparison to the initiator of the fetch being in control

[09:00:45.0000] <JakeA>
If there's no branch, then either the fetch or the stream read will be cancelled. If they've both finished, doSomethingElse will appear cancelled even if it carries on its work (because it returns a normal promise)

[09:01:26.0000] <Domenic>
what does "doSomethingElse will appear cancelled" mean?

[09:02:38.0000] <JakeA>
Domenic: its call to resolve/reject will not do anything, because the promise has been cancelled. What happens on promise cancel is still up for grabs, perhaps reject with undefined or an AbortError

[09:03:02.0000] <Domenic>
whose call to resolve/reject?! I thought doSomethingElse was just a function? Maybe write out its body...

[09:04:20.0000] <JakeA>
Sorry, yeah, that would be more helpful: .then(r => setTimeout(_ => r("Hello"), 1000))

[09:04:32.0000] <JakeA>
hang on

[09:04:33.0000] <JakeA>
that's wrong

[09:04:34.0000] <Domenic>
thta's... not how .then works...

[09:04:44.0000] <JakeA>
yeah sorry, brain break

[09:04:48.0000] <Domenic>
np

[09:05:22.0000] <JakeA>
.then(_ => new Promise(r => setTimeout(_ => r("Hello"), 1000)))

[09:05:45.0000] <JakeA>
Basically, doSomethingElse resolves in 1 second with "Hello"

[09:06:59.0000] <frivoal>
Does anyone remember who was involved in thinking / making -o-double-rainbow() ?

[09:07:09.0000] <JakeA>
/me thinks about the token solution some more

[09:07:46.0000] <annevk>
frivoal: I think I suggested that to whoever was implementing gradients at the time

[09:07:51.0000] <Domenic>
OK, so I think what you meant was "doSomethingElse isn't even called"

[09:08:33.0000] <frivoal>
annevk: thanks, I suspected you might be the one to thank for that.

[09:08:39.0000] <JakeA>
Domenic: if it's called, but the second hasn't passed, .cancel() would still "work" in that the promise won't resolve with "Hello"

[09:09:05.0000] <JakeA>
r("Hello") will be called, but since the promise is in a cancelled state (which could just mean rejected) it's ignored

[09:09:18.0000] <Domenic>
oh hmm that's weird

[09:09:33.0000] <Domenic>
so child11 is resolved already but you un-resolve it when you cancel

[09:09:38.0000] <Domenic>
or change its resolution or something

[09:09:48.0000] <frivoal>
annevk: Would I be wrong to attribute this work of art to Bruce Lawson: http://media.opera.com/media/press/2011/unicorn/ ?

[09:09:49.0000] <Domenic>
(child1 is pending-but-resolved in your example)

[09:10:02.0000] <JakeA>
Domenic: that doesn't sound right…

[09:10:44.0000] <Domenic>
JakeA: child11 is pending, since doSomethingElse returns a promise that is still pending-for-a-second. But it's resolved to that pending-for-a-second promise.

[09:11:03.0000] <Domenic>
normally that would mean it's locked in to follow that pending-for-a-second promise without fail.

[09:11:44.0000] <annevk>
frivoal: not sure

[09:12:03.0000] <annevk>
frivoal: was it Leif Arne who should get the credit?

[09:12:05.0000] <annevk>
/me forgot :-(

[09:12:30.0000] <frivoal>
annevk: possibly

[09:13:15.0000] <JakeA>
Domenic: child11 is pending, calling .cancel() makes it (let's say) reject, the timeout hits, resolve is called, it's ignored

[09:14:28.0000] <Domenic>
JakeA: let's break this down. `var p = new Promise(r => setTimeout(() => r("Hello"), 1000))`

[09:14:39.0000] <Domenic>
function doSomethingElse() { return p; }

[09:14:46.0000] <Domenic>
var child11 = child1.then(doSomethingElse)

[09:14:57.0000] <Domenic>
This immediately does PromiseResolve(child11, p)

[09:15:07.0000] <wanderview>
if we make fetch() return an extended promise with a fetch-specific cancel... can we later switch to a CancellablePromise once we see that it works out?

[09:15:10.0000] <frivoal>
annevk: Yep, it seems to be Leif Arne: https://twitter.com/rchl2k/status/135129843170947072

[09:15:11.0000] <Domenic>
You cannot reject a resolved promise

[09:15:36.0000] <annevk>
frivoal: nice find

[09:16:01.0000] <Domenic>
JakeA: similar example: var q = new Promise((res, rej) => res(p); rej(new Error("foo"))); q will be pending for 1 second then fulfilled with "Hello"

[09:16:56.0000] <annevk>
wanderview: that's the terminate() proposal, and yeah, I think there's agreement that can work, though there's still the open question there whether to do forever-pending or reject or allow for both

[09:17:56.0000] <JakeA>
Domenic: hmm, yeah, I see *thinks*

[09:18:25.0000] <wanderview>
annevk: I guess the problem with that is it just breaks the Promise API niceness.. you can't really chain off the fetch() any more

[09:19:09.0000] <annevk>
wanderview: yup, though if you want to do complicated things you can't really chain anyway I think

[09:19:12.0000] <Domenic>
I'm still not sure keeping terminate-ability through a chain is desirable

[09:19:21.0000] <Domenic>
i kind of feel it should only belong to the initiator

[09:19:31.0000] <Domenic>
that's a key difference here I think

[09:19:50.0000] <Domenic>
I could be convinced otherwise but that's my conservative position

[09:20:04.0000] <wanderview>
annevk: I wonder if we could so something like fetch(req).control(function(controller) { .. }).then(function (response) { });

[09:20:10.0000] <wanderview>
and controller.cancel()

[09:20:37.0000] <annevk>
wanderview: why .control?

[09:21:22.0000] <wanderview>
annevk: the idea being fetch() returns an extended promise with a .control()... letting you get a handle to the controller for later use... because the decision to cancel will be async most likely

[09:21:31.0000] <annevk>
Domenic: if there was an established API pattern that would be an easy sell

[09:21:35.0000] <wanderview>
and .control() returns a Promise for the response

[09:21:53.0000] <annevk>
wanderview: why not just make control an argument to fetch()?

[09:22:03.0000] <wanderview>
annevk: that works for me too

[09:22:34.0000] <wanderview>
pretty sure we've discussed this before... I think I just like that approach from a "how I would want to use it in code" point of view

[09:23:22.0000] <wanderview>
annevk: I guess .control() seems slightly nicer than a fetch arg because then it fits into the chaining pattern nicely

[09:23:28.0000] <wanderview>
/me shrugs

[09:23:40.0000] <annevk>
fetch(url, control: c => c.abort()) just seems rather ugly

[09:24:01.0000] <annevk>
fetch(url).control(c => c.abort()) doesn't seem too different

[09:25:35.0000] <wanderview>
annevk: it would really be fetch(url).control(c => savedControl = c).then(response => ...);

[09:26:21.0000] <Domenic>
I still like `var c = new FetchController()`; fetch(url, { controller })` or similar.

[09:26:34.0000] <wanderview>
Domenic: thats nice

[09:26:37.0000] <Domenic>
the upside being you can hand out the same controller to multiple fetches

[09:29:05.0000] <wanderview>
Domenic: yea... and if we make individual Promises cancellable... then the page has to rebuild a controller for themself by aggregating a promise for each fetch() in the place where the "cancel now" event happens

[09:29:53.0000] <Domenic>
wanderview: right, that was kind of my worry... although you could probably build a wrapper that implements either on top of the other

[09:31:55.0000] <wanderview>
I just can't think of a use case where you want to stick .cancel() at the end of a Promise chain... and Promise chain syntax does not lend itself to getting a reference to the promise itself, except at the end of the chain

[09:33:27.0000] <Domenic>
Well, I dunno, it's fairly believable for non-branching chains

[09:34:03.0000] <JakeA>
wanderview: fetch(url).then(r => r.json())

[09:34:30.0000] <Domenic>
var result = fetch(url).then(r => r.json()).then(parseJSONIntoModel).then(updateUI); router.on("hashchange", () => result.cancel())

[09:34:48.0000] <JakeA>
right

[09:35:15.0000] <Domenic>
not much different from `var canceller = new Canceller(); fetch(url, { canceller }).then(...).then(...).then(...); router.on("hashchange", () => canceller.cancel())` admittedly.

[09:35:53.0000] <wanderview>
ok

[09:36:00.0000] <Domenic>
but less work if the router.on(...) code is located somewhere else; becomes an issue of passing it a { promise, canceller } pair vs. a promise by itself

[09:36:14.0000] <Domenic>
unsure though, this example is kind of unrealistic

[09:36:23.0000] <wanderview>
Domenic: I guess the Canceller example is more clear it only effects fetch()... the first example suggests you can cancel parseJSONIntoModel, etc

[09:36:49.0000] <Domenic>
wanderview: ah yeah hmm i guess that's actually a downside though...

[09:37:03.0000] <JakeA>
Domenic: so, going back to what you said earlier, var p = fetch(url).then(r => r.json()) - calling .cancel() wouldn't work if we had headers, since the .then is immediately resolved with the r.json() promise.

[09:37:12.0000] <wanderview>
Domenic: downside for the controller approach?  how so?

[09:37:15.0000] <Domenic>
that's a pretty bad downside really

[09:37:33.0000] <Domenic>
wanderview: because you want an easy way to stop parsing or updating the UI too

[09:38:25.0000] <wanderview>
Domenic: they may not be cancellable, though... for example if the parse is synchronous (which is probably is)

[09:38:32.0000] <Domenic>
wanderview: so it becomes fetch(url, { canceller }).then(r => r.json({ canceller })).then(j => parseJSONIntoModel(j, { canceller })).then(m => updateUI(m, { canceller }))

[09:38:39.0000] <Domenic>
wanderview: yeah true

[09:40:06.0000] <Domenic>
JakeA: hmm yes that's true -_-

[09:40:33.0000] <JakeA>
Domenic: So the resolved value needs to be treated as a chain too

[09:40:37.0000] <wanderview>
Domenic: if you want a cancellable parse, use a Stream? :-)

[09:41:03.0000] <Domenic>
wanderview: haha true.

[09:41:25.0000] <Domenic>
JakeA: not sure what the implications of that are.

[09:41:34.0000] <JakeA>
Domenic: me neither

[09:42:24.0000] <JakeA>
I feel we're getting closer to fetch() returning a FetchPromise with an abort() methods with a @@species of Promise

[09:42:42.0000] <Domenic>
the terminate() solution, you mean?

[09:42:51.0000] <JakeA>
yeah, terminate()

[09:42:58.0000] <Domenic>
why is that better than canceller?

[09:43:31.0000] <JakeA>
Canceller seems ugly to me, maybe I'll get used to it

[09:43:58.0000] <Domenic>
the weight of minting a new promise subclass, especially one of such limited use, makes me hesitant.

[09:43:58.0000] <JakeA>
I'll probably get used to it

[09:44:11.0000] <Domenic>
if we had more methods to put on it then i'd feel better

[09:44:17.0000] <Domenic>
e.g. http2 priority-adjuster?

[09:45:03.0000] <wanderview>
how do cancel response.json?

[09:45:13.0000] <wanderview>
response.body.cancel(), doesn't work right?

[09:45:28.0000] <wanderview>
Domenic: JakeA: ^^^

[09:45:29.0000] <JakeA>
wanderview: it would have to take a canceller or similar

[09:45:41.0000] <Domenic>
yeah, that

[09:45:46.0000] <wanderview>
JakeA: or have response.cancel()

[09:46:06.0000] <Domenic>
do we really want to give that authority to anyone though?

[09:46:45.0000] <wanderview>
Domenic: how does one get a handle to the same Response object without being the same code that sets up the cancel?

[09:46:49.0000] <Domenic>
i dunno the ergonomics argument is making me want to reconsider JakeA's ideas... if we can make them work somehow...

[09:47:03.0000] <Domenic>
wanderview: doSomethingWith(response) :)

[09:47:22.0000] <Domenic>
wanderview: it's a matter of, when you give someone a response, are you also giving them ability to blow up the response? or just to read it (if it's not locked)?

[09:47:46.0000] <Domenic>
i think we made res.headers immutable for similar reasons?

[09:48:25.0000] <wanderview>
Domenic: if you don't trust the code you can call doSomethingWith(response.clone())

[09:48:38.0000] <Domenic>
wanderview: true true.

[09:48:39.0000] <wanderview>
Domenic: because they could drain the body and "blow up" the Response as well

[09:48:48.0000] <Domenic>
wanderview: not if it's locked though.

[09:49:18.0000] <wanderview>
Domenic: I find the lock blocking cancel very unexpected, to be honest

[09:49:30.0000] <JakeA>
Domenic: https://github.com/slightlyoff/ServiceWorker/issues/592#issuecomment-68853209 - here I say "If the user hits X (or even closes the tab) while /whatever.json is fetching, I don't think we can simply cancel the request", this is because the tab isn't consuming the stream at this point. With a chaining cancellable promise, this is no longer an issue

[09:49:31.0000] <Domenic>
:-S

[09:49:54.0000] <JakeA>
This is a case where you want the party you give the promise to to be able to cancel, rather than the initiator

[09:50:08.0000] <wanderview>
Domenic: simultaneous reads is good to block with a lock... but having some async thing cancel a stream while another bit of code is reading seems pretty commonplace to me

[09:50:14.0000] <Domenic>
JakeA: is "we" the browser or author code in that sentence?

[09:50:33.0000] <JakeA>
Domenic: the browser

[09:50:36.0000] <Domenic>
wanderview: this is kind of just a principle of least authority thing I think

[09:50:46.0000] <Domenic>
JakeA: I think the stream becomes errored if it's prematurely terminated.

[09:51:08.0000] <annevk>
Domenic: we'd use a promise-subclass for other things too

[09:51:16.0000] <annevk>
Domenic: e.g. postMessage() with the SW

[09:51:21.0000] <wanderview>
Domenic: this forces Response.json(canceller) as the only solution then

[09:51:25.0000] <annevk>
Domenic: or changing priority of the fetch

[09:51:46.0000] <wanderview>
which is fine I guess

[09:51:48.0000] <Domenic>
wanderview: right, or a CancelablePromise solution that I've been arguing is complicated.

[09:52:25.0000] <wanderview>
I guess, keep in mind that everything with the body stream effects Cache produced Responses as well...  but canceling "before the headers" is fetch only

[09:52:34.0000] <wanderview>
unless Cache grows something similar to fetch

[09:52:54.0000] <wanderview>
/me doesn't want to allow canceling Cache.match(), etc.

[09:53:03.0000] <annevk>
Domenic: the only reason headers is immutable at the moment is because that's the easiest

[09:53:17.0000] <annevk>
Domenic: but we'll make it mutable together with request's headers

[09:53:25.0000] <Domenic>
annevk: hmm ok

[09:53:28.0000] <annevk>
Domenic: just needs some careful consideration of all the implications

[09:53:41.0000] <wanderview>
I wonder how much pain here is due to separating "we have headers" event from the body stream its parsed from

[09:54:01.0000] <wanderview>
^body stream^data stream

[09:54:06.0000] <Domenic>
JakeA: now I'm curious if you can make CancelablePromise work generally. I think you need: 1) compelling ergonomics examples vs. canceller; 2) work through the semantics and edge cases in detail.

[09:54:36.0000] <Domenic>
JakeA: I can try to help with 2)...

[09:54:38.0000] <annevk>
wanderview: having headers also means no more redirects, it's a rather important milestone

[09:55:07.0000] <wanderview>
annevk: yes... but treating them as separate cancelable things when really there is one underlying stream supplying both

[09:55:14.0000] <annevk>
Domenic: I think the case for CancelablePromise is indeed primarily ergonomics

[09:55:22.0000] <Domenic>
wanderview: annevk: yeah, the have-headers milestone being separable is quite nice in practice, I think. Certainly can be a leaky abstraction in some cases though.

[09:55:35.0000] <annevk>
Domenic: having to construct a controller is awkward

[09:55:47.0000] <Domenic>
annevk: to me that's not the awkward part, the awkward part is lack of propagation

[09:56:08.0000] <annevk>
Domenic: when would it be a leaky abstraction?

[09:56:22.0000] <annevk>
Domenic: this is exactly as atomic as implementations are

[09:56:51.0000] <Domenic>
annevk: well it's leaky here because an implementation could cancel the underlying TCP stream at any point, but here we have this two-stage thing => potentially two cancel mechanisms

[09:58:10.0000] <Domenic>
lunchtime...

[09:58:20.0000] <wanderview>
I guess it does fit Cache better.... load meta-data separate from body data stream

[09:59:47.0000] <JakeA>
Domenic: I'll do as much of 1 as I can tomorrow

[10:37:17.0000] <JakeA>
Domenic: has there been any further discussion on window.onerror alternatives for promises? onpromiseerror and onpromiseerrorhandled perhaps?

[10:38:11.0000] <JakeA>
Where the former would fire if a promise rejects without a reject handler, and the latter fires if it's later handled

[10:39:54.0000] <JakeA>
wanderview: ohh, how are you cancelling those fetching in Gecko (from the promises thread)

[10:41:09.0000] <wanderview>
JakeA: all network requests in gecko have an associated "LoadGroup"... right now we call LoadGroup.cancel() when the ServiceWorker is shutdown

[10:41:21.0000] <Domenic>
JakeA: people liked it, nobody said "yeah let's implement it"

[10:41:33.0000] <wanderview>
JakeA: non-SW cases share the LoadGroup with the document and the LoadGroup.cancel() is triggered by navigation, etc

[10:42:03.0000] <wanderview>
JakeA: we also have a way of cancelling things when the worker thread is shutting down

[10:42:06.0000] <JakeA>
wanderview: ahh yeah, but that doesn't work if the SW stays alive, eg if the page is navigated within scope it's likely to stay alive

[10:42:21.0000] <wanderview>
JakeA: its poorly defined in the spec, I think :-(

[10:42:34.0000] <wanderview>
JakeA: for example... does the SW stay alive until respondWith() resolves a Response?

[10:42:46.0000] <wanderview>
or until the underlying Response body completes?

[10:43:11.0000] <wanderview>
what if there is an outstanding Cache.put() in operation?  do we cancel that?

[10:43:15.0000] <JakeA>
wanderview: receives a response should be enough. We may need a fetchEvent.waitUntil for further tasks

[10:43:23.0000] <JakeA>
yeah, exactly

[10:44:07.0000] <wanderview>
JakeA: right... I think we may actually have to keep the worker thread alive until body is fully copied in... but that could just be our implementation

[10:44:17.0000] <wanderview>
right now we don't explicitly do that... probably a bug

[10:44:47.0000] <wanderview>
JakeA: I guess my point, though... is the browser can cancel this stuff regardless of what script does (without script using something like waitUntil() )

[10:44:53.0000] <JakeA>
wanderview: welllll it's not really a bug. The browser is allowed to keep the SW alive as long as it wants

[10:45:49.0000] <JakeA>
wanderview: those requests can only be cancelled if the promise has resolved, or if the browser can shut the SW down

[10:45:50.0000] <wanderview>
JakeA: I think we may stop the SW too soon in gecko right now

[10:46:43.0000] <wanderview>
JakeA: I haven't looked, but if navigation caused the FetchEvent to no longer be valid... we should be able to stop the SW and cancel those operations

[10:46:53.0000] <wanderview>
FetchEvent holds SW alive... Document should hold FetchEvent

[10:46:57.0000] <wanderview>
I'd have to check, though

[10:47:13.0000] <JakeA>
wanderview: but if the navigation is to another page in scope, the SW needs to be alive for that new page and its resources

[10:47:52.0000] <wanderview>
JakeA: true... these mechanisms will not cancel in that case

[10:48:28.0000] <JakeA>
wanderview: maybe an edge case though

[10:48:49.0000] <wanderview>
JakeA: canceling per FetchEvent seems reasonable... if the FetchEvent is going nowhere

[10:49:13.0000] <JakeA>
wanderview: will design fetchEvent.waitUntil tomorrow

[10:49:16.0000] <wanderview>
JakeA: I suppose the FetchEvent could be for a window.fetch() that gets canceled too :-)

[10:49:33.0000] <wanderview>
FetchEvent cancellation I mean

[10:49:33.0000] <JakeA>
haha

[12:03:04.0000] <mounir>
Domenic: ping

[12:03:50.0000] <mounir>
marcosc: ping

[12:04:27.0000] <Domenic>
pong

[12:05:03.0000] <marcosc>
/me here

[12:05:13.0000] <mounir>
marcosc: Domenic suggests to remove the base interface

[12:05:17.0000] <mounir>
or maybe use "implements"

[12:05:24.0000] <mounir>
I don't mind both, FWIW

[12:05:34.0000] <Domenic>
https://gist.github.com/domenic/db44ae9dd73534d63e46

[12:05:41.0000] <mounir>
my main concern now is to figure out which way to go: strong types or strings

[12:06:02.0000] <wanderview>
JakeA: can we just remove VARY headers completely and make Cache key-value? :-)

[12:06:46.0000] <Domenic>
mounir: I think hanging methods off of types (instead of having a string-param to a generic method) is OK; not much preference either way. But, a strong preference *against* passing those types around.

[12:07:21.0000] <mounir>
Domenic: then we should try to see how we could add a .request() on top of that

[12:07:39.0000] <mounir>
Domenic: I want the design to allow .request() to take multiple permissions

[12:07:52.0000] <mounir>
the string based solution would allow that fairly easily

[12:07:55.0000] <Domenic>
yeah. .request(["midi", "geolocation"]), etc. seems fine. They are keys into Permissions.prototype.

[12:09:46.0000] <mounir>
Domenic: except that you would need to pass some options

[12:09:50.0000] <marcosc>
sorry, was chatting to other people at moz about the API at the same time

[12:09:54.0000] <Domenic>
Oh, interesting

[12:10:11.0000] <Domenic>
I suppose you guys have already explored and rejected coalescing separate requests?

[12:10:38.0000] <Domenic>
So e.g. the natural Promise.all([n.p.midi.request({ sysex: true }), n.p.geolocation.request()]) is not good enough?

[12:11:29.0000] <marcosc>
that's what we would want, yes

[12:11:52.0000] <Domenic>
oh, then, seems good...

[12:12:34.0000] <marcosc>
I don't have a strong preference about the strings vs the attributes

[12:12:48.0000] <mounir>
for .request(), I'm not sure Promise.all() is the right solution

[12:13:06.0000] <Domenic>
People will do it, even if you don't think they should

[12:13:33.0000] <marcosc>
you can handle individual rejects as needed, so what's the problem?

[12:14:02.0000] <marcosc>
"Oh, without Camera you are going to have a bad time... but ok..."

[12:14:37.0000] <mounir>
or UI coallescing, it's better if it's clear that the permission requests have to be bundled

[12:14:50.0000] <mounir>
instead of guessing

[12:24:29.0000] <mounir>
Domenic: the more I think about it, the more I prefer the original design with only a dictionary passed to .query()

[12:24:33.0000] <mounir>
no name + options

[12:24:38.0000] <Domenic>
oh interesting

[12:25:05.0000] <mounir>
Domenic: a permission isn't defined by it's name but by the name and the options even if some doesn't

[12:25:25.0000] <Domenic>
hmmmm that makes sense

[12:25:39.0000] <mounir>
Domenic: you can't query() 'midi' or 'push', it's more a side effect that some options will have a default value

[12:26:57.0000] <mounir>
Domenic: how terrible is navigator.permissions.query({'name': 'foo'}); to you?

[12:27:04.0000] <mounir>
knowing that sometimes there would be other values?

[12:27:14.0000] <Domenic>
mounir: not so bad now that you explain the conceptual backing

[12:27:48.0000] <Domenic>
i wonder if it's coherent to have an overload that takes a string and converts it to { name: s } though

[12:28:04.0000] <Domenic>
Just for pure convenience

[12:28:13.0000] <mounir>
Domenic: that's exactly what I had, but slightlyoff hated it

[12:28:19.0000] <Domenic>
-_-

[12:28:49.0000] <mounir>
;)

[12:28:51.0000] <Domenic>
{ name: 'foo' } it is then!

[12:28:56.0000] <zcorpan>
MikeSmith: fwiw, w3c ip block issue turned out to be quite the mystery. something was hammering the svg blog, but we couldn't identify what. now it doesn't happen anymore. issue closed, mystery prevails

[12:45:17.0000] <darobin>
zcorpan: that happened at my office, we tracked it down to someone having a misbehaved Chrome extension that kept hitting a bunch of W3C pages for no reason

[12:47:36.0000] <Domenic>
probably dtds

[12:58:07.0000] <darobin>
Domenic: nope, it was weirder

[12:59:03.0000] <darobin>
I *think* that it was somehow trying to refresh an RSS feed that it autodetected from a page but getting it very wrong

[12:59:49.0000] <zcorpan>
the url here involved something about rss in the query string (but it didn't point to the svg blog's feed). also the request had no User-Agent.

[13:00:24.0000] <zcorpan>
know which extension?

[13:46:03.0000] <[swift]>
does anyone have an opinion on delivering visibilitychange events to iframes when they enter and exit the viewport?

[13:46:24.0000] <[swift]>
ack, znc keeps changing my nick

[13:46:55.0000] <sethf>
(or perhaps nickserv)

[13:48:14.0000] <sethf>
at any rate, the idea here would be to allow iframes to take actions to throttle themselves if they're not currently visible. think for example HTML5 ads - they may be performing a variety of kinds of work when visible that they may want to throttle down when the user has scrolled them off the page

[13:56:14.0000] <zcorpan>
sethf: seems like it could be useful. send a mail to the list?

[13:59:38.0000] <sethf>
zcorpan: that was step two =)

[13:59:50.0000] <jamesr___>
it's definitely come up

[14:01:26.0000] <sethf>
jamesr___: i looked around for previous discussions but didn't have much luck finding any

[14:01:44.0000] <sethf>
i may well be using the wrong keywords to search, though

[14:23:49.0000] <Ms2ger>
Someone killed irc.w3.org?

[14:24:13.0000] <gsnedders>
So it appears. It wasn't me, though, honest!

[14:27:41.0000] <jgraham>
/me blames gsnedders 

[14:28:16.0000] <gsnedders>
Nah, I'm way too busy cursing SCSS to care.

[14:29:49.0000] <jgraham>
Should have called it CUSS

[14:30:41.0000] <jgraham>
Did I already spam this channel with https://docs.google.com/document/d/1K-mKOqiUiSjgZTEscBLjtjd6E67oiK8H2ztOiq5tigk/pub ?

[14:30:54.0000] <jgraham>
A most interesting look at web perf problems

[14:35:59.0000] <gsnedders>
tl;dr: JS makes everything slow?

[14:47:32.0000] <jgraham>
gsnedders: tldr for web authors is "if you want good perf you have to be super-careful about the code you actually run, rather than carelessly slinging about high level abstractions"

[14:47:51.0000] <darobin>
jgraham: wow, great doc

[14:47:59.0000] <jgraham>
But there are also messages for platform engineers and people working on tools

[14:48:08.0000] <darobin>
I'd say tl;dr is "ads will kill your perf"

[14:48:30.0000] <jgraham>
Well that was certainly the most egregious thing

[14:48:43.0000] <darobin>
"a loading spinner, that’s a canvas element, is rotated with css transforms every 42ms, via setInterval."

[14:48:55.0000] <darobin>
that's, like, wat?

[14:49:07.0000] <gsnedders>
hey gifs are so 90s

[14:49:18.0000] <gsnedders>
LIKE THIS GIF IF YOU'RE A 90S KID

[14:49:36.0000] <jgraham>
I was particularly horrified by the adsense script running in a scroll handler and taking 25ms

[14:49:56.0000] <darobin>
gsnedders: sure, I mean, why not. but do you need to replace the gif by using setInterval to animate a CSS transform that CSS could animate itself, to rotate a fucking canvas that could rotate itself?

[14:49:58.0000] <tantek>
lol adsense. NoScript. block adsense everywhere.

[14:50:10.0000] <darobin>
tantek: this is for performance for real users

[14:50:30.0000] <gsnedders>
darobin: yes

[14:50:38.0000] <tantek>
darobin: in that case, just install NoScript. if a site doesn't work, use a different one.

[14:50:41.0000] <darobin>
ok, you have a point gsnedders

[14:51:02.0000] <darobin>
tantek: I think a better solution is the one they advocate "Tell Google Adsense this is unacceptable"

[14:51:17.0000] <darobin>
AdSense is basically using 30ms of JS every second

[14:51:34.0000] <darobin>
times the number of tabs in the world this is run on, that's a lot of energy

[14:51:53.0000] <tantek>
where do you think all that distributed computing was going to come from? their own compute farms? nah. why bother with a compute cloud when you can hijack 30ms of user browser time every 1s?

[14:52:25.0000] <jgraham>
Well in this case I think it's more than that

[14:52:28.0000] <tantek>
the cloud … it's made of users!

[14:52:39.0000] <jgraham>
(it was 25ms on a phone, so probably less on a desktop, but still)

[14:52:45.0000] <darobin>
hehe

[14:52:53.0000] <tantek>
SoylentCloud™

[14:53:18.0000] <jgraham>
To be fair, doing compute on the client is totally legitimate. Running any ad related script in scroll handlers isn't

[14:53:27.0000] <gsnedders>
are there any UAs people actually use that use anything except screen or print media types?

[14:53:58.0000] <jgraham>
But the impression I get is that for the (biased) sample of sites they looked at, people had *no idea* what was actually running

[14:54:03.0000] <gsnedders>
jgraham, darobin: IIRC AdSense have stats on how often the ads scroll into view, I presume that's what it's there for… and that involves touching CSSOM and that's dear

[14:55:13.0000] <jgraham>
Yeah, well they clearly can't do that the way they are doing it without killing performance of the platform

[14:55:52.0000] <jgraham>
Oh hurrah, roc posted this to dev.platform

[14:58:00.0000] <darobin>
"Any flash ad that’s being transpiled to HTML5 clientside is more costly than it should be." — wait, you are doing *what* on the client?

[14:58:37.0000] <jgraham>
Yeah, I mean I understand shumway, but are people really producing new content like that?

[14:58:46.0000] <Ms2ger>
"You blocked flash? Let me work around that"

[14:58:51.0000] <jgraham>
I suspect this means that HTML authoring environments are still terrible

[14:59:12.0000] <jgraham>
Ms2ger: But they could just write HTML in the first place

[14:59:15.0000] <tschneidereit>
Ms2ger: that's not how we roll, though

[14:59:45.0000] <jgraham>
anyway, it seems like one message here is "the more third-party code you run, the less likely you are to win at perf"

[14:59:48.0000] <tschneidereit>
Shumway won't run for ads if you have Flash disabled

[15:00:10.0000] <jgraham>
And since ads are all third-party code…

[15:00:12.0000] <Ms2ger>
tschneidereit, no, I mean that the ad would do that itself

[15:00:51.0000] <tschneidereit>
Ms2ger: oh, ok. Yeah, obviously ads will move to html/js more and more

[15:01:22.0000] <jgraham>
tschneidereit: In this case it seems like the ads had been compiled from flash to html or something

[15:01:34.0000] <jgraham>
Presumably using something shumway-like

[15:02:03.0000] <sethf>
jgraham: doesn't google have something like that? swiffy? thought it was server-side, though

[15:03:15.0000] <jgraham>
That could be it. But presumably it emits js that runs on the client

[15:03:51.0000] <sethf>
oh yeah, sure, the js runs on the client

[15:03:56.0000] <tschneidereit>
jgraham: almost certainly Swiffy, yes. Do you have a URL?

[15:04:16.0000] <jgraham>
Oh, yeah it says that in the screenshot

[15:04:23.0000] <tschneidereit>
heh

[15:04:43.0000] <jgraham>
Search for flash in the document I linked above

[15:07:57.0000] <jgraham>
So I guess a cynical takeaway is that Google is an enabler for bad web perf :)

[15:10:05.0000] <tantek>
wow that google doc is amazing

[15:10:35.0000] <tantek>
had no idea so much overengineering was going on in webpages. no wonder the silo web keeps getting slower.

[15:11:02.0000] <jgraham>
I'm not sure it's over-engineering as such

[15:11:22.0000] <jgraham>
I think that there are two related dev-side problems

[15:12:18.0000] <tantek>
I think you only get to code messes / overengineering like that by having massive engineering staffs that divide up everything, and everyone has to deliver some code, so it becomes an n-layers mess of inefficient crap

[15:12:34.0000] <tantek>
or, don't understand this layer? add a layer!

[15:12:43.0000] <jgraham>
1) A culture of just throwing random scripts onto a page without much clue what they're doing (e.g. ad scripts, analytics scripts). This unfortunately is lots of the revenue-providing stuff.

[15:12:51.0000] <tantek>
yes that big time

[15:14:18.0000] <jgraham>
2) A culture of favouring high levels of abstraction rather than optimising perf. This is partially because it's historically been needed to use jQuery or whatever to smooth over browser differences, but that's less true now

[15:14:37.0000] <jgraham>
Also, we haven't given great tools for people to identify jank

[15:16:13.0000] <jgraham>
(the wikipedia example is instructive for point 2 because they are using apparently simple jQuery methods in favour of simple DOM manipulations without realising that the jQuery methods bury lots of expensive calls)

[15:16:18.0000] <tantek>
a lack of "good examples" to copy from is also a problem

[15:16:35.0000] <tantek>
good *running* examples that is. that you can view source on and figure out "how did they do that?"

[15:16:55.0000] <jgraham>
With perf it's often more about what you *didn't* do

[15:17:21.0000] <jgraham>
It's harder to get the idea of "I didn't call any layout-computing functions" from an example

[15:17:23.0000] <tantek>
if you start with something performant, at least you can measure regressions when stuff gets added and like the doctor says, don't do that.

[15:18:22.0000] <tantek>
also when you have big engineering staffs, you're biased towards adding more crap code, and thus anti-performant by default.

[15:18:41.0000] <tantek>
it becomes hard to cut code for political reasons

[15:18:46.0000] <jgraham>
I think blaming this on "big engineering staff" is an over-simplification

[15:18:52.0000] <tantek>
people's managers feelings getting hurt etc.

[15:19:05.0000] <jgraham>
companies with lots of staff can produce performant code

[15:19:12.0000] <tantek>
can but rarely do

[15:19:20.0000] <gsnedders>
Is that not more a problem with too many managers? :)

[15:19:32.0000] <jgraham>
That seems hugely [citation needed]

[15:20:13.0000] <tantek>
citation was provided with that google doc - orgs with big-ish engineering staffs. Wikipedia was perhaps the exception.

[15:20:39.0000] <jgraham>
That's so clearly not valid

[15:20:52.0000] <tantek>
to provide a counter-point of anecdata, FB has a big engineering staff yet seems to be quite good at web perf, desktop or mobile

[15:21:11.0000] <tantek>
so yes, it is possible to have a big engineering staff and be performant, it's just rare.

[15:21:42.0000] <jgraham>
Since "slow and well-known" were presumably the defining features of the sample it seems much more reasonable to assume that well-known sites are produced by larger companies with more engineers

[15:21:52.0000] <terinjokes>
from what i understand, they have a smallish group dedicated to ensuring the rest of the org is performant on the web

[15:22:53.0000] <tantek>
jgraham - this is just a specific instance of http://en.wikipedia.org/wiki/Conway%27s_Law

[15:23:28.0000] <paul_irish>
jgraham: change /pub to /view to get the full comment thread along the side. good discussion in there

[15:23:29.0000] <JonathanNeal>
In CSS, can I have a variable written only if it has not already been declared? In other words, do CSS variables allow for something like !default in Sass?

[15:24:00.0000] <jgraham>
tantek: This whole sub-discussion is just a projection of biases about the merits of different organisational structure

[15:24:32.0000] <jgraham>
paul_irish: Oooh!

[15:24:43.0000] <jgraham>
paul_irish: Did I already mention this is awesome btw?

[15:25:14.0000] <paul_irish>
:) thanks! it was fun to write up

[15:25:34.0000] <paul_irish>
We're now talking to some folks in adsense. But I didnt want to gate publishing this on resolving those issues.

[15:26:15.0000] <paul_irish>
one of the big challenges for all ads/analytics is Viewability, which is now in the IAB mandatory guidelines for Ad Platform providers.

[15:26:15.0000] <paul_irish>
http://www.iab.net/iablog/2014/03/viewability-has-arrived-what-you-need-to-know-to-see-through-this-sea-change.html

[15:27:11.0000] <paul_irish>
tl;dr: ads need to know if they are at least 50%  visible to the user for 1 continuous second.

[15:27:28.0000] <jgraham>
paul_irish: Not sure I can see the comments

[15:28:16.0000] <paul_irish>
/me ah. you're right. flipped off commenting to address trolls deleting content. one sec.

[15:28:21.0000] <tantek>
paul_irish: on that URL, scripts currently forbidden: <script>: 42

[15:28:23.0000] <tantek>
of course 42

[15:28:35.0000] <paul_irish>
turns out that the web platform is totally lacking performant APIs to evaluate those visibility concerns

[15:28:51.0000] <paul_irish>
which is why you see so many things binding to touch handlers and/or polling

[15:29:09.0000] <gsnedders>
What's the status of idlharness.js nowadays?

[15:29:51.0000] <tantek>
paul_irish: do they provide any guidance for how to performantly implement measuring that 50% visible for 1s+? or is this just an unfunded IAB mandate?

[15:29:56.0000] <paul_irish>
jgraham: https://docs.google.com/document/d/1K-mKOqiUiSjgZTEscBLjtjd6E67oiK8H2ztOiq5tigk/view is comment-enabled now.

[15:30:05.0000] <jgraham>
gsnedders: It works. It occasionally gets patches

[15:30:47.0000] <gsnedders>
jgraham: are we using it for most things now? last I knew there were concerns over the noisiness of results from it?

[15:30:53.0000] <paul_irish>
tantek: there is some text around "you need to poll every 100ms for 10+ times to confirm its a continuous second."  beyond that, there is no suggestion on how one would acquire those metrics.

[15:31:08.0000] <jgraham>
paul_irish: THanks

[15:31:34.0000] <jgraham>
gsnedders: It's being used. I'm not sure what the noise concerns are/were but it's largely stable on gecko

[15:32:49.0000] <paul_irish>
tantek: http://www.mediaratingcouncil.org/063014%20Viewable%20Ad%20Impression%20Guideline_Final.pdf

[15:32:51.0000] <gsnedders>
jgraham: just so many fails because of people not using WebIDL for everything

[15:32:58.0000] <gsnedders>
jgraham: so it being unclear what fails are significant

[15:33:20.0000] <gsnedders>
jgraham: like, what failures are subtle parts of WebIDL, what failures are fundemental bugs in the implementation of the API

[15:36:35.0000] <paul_irish>
jgraham, tantek: http://www.sfgate.com/ was what kicked off this series. the amount of external script slowing down that site is just mind-blowing. and publishers are the web's bread and butter. :/

[15:38:13.0000] <jgraham>
gsnedders: Oh, in that sense. Well yes, sometimes browsers don't implement the WebIDL spec correctly and so fail tests. I'm not sure that's a problem for anything other than artifical things like progressing specs

[15:38:43.0000] <jgraham>
So if you mean "do they get used for CR transitions" then no, I think they are typically ignored

[15:39:08.0000] <jsbell>
yep; we had that debate for IDB for example since all the fails were in idl tests

[15:39:12.0000] <tantek>
paul_irish: perhaps it is time for faster independent publishers to displace the inefficient ones.

[15:39:29.0000] <jsbell>
"It would be nice if..." testharness/report could group errors somehow, e.g. "39 failures because [[Class]] is wrong on your prototypes".

[15:41:00.0000] <tantek>
paul_irish: going to www.sfgate.com without loading scripts results in empty page content body. so at some point they already killed themselves.

[15:41:01.0000] <paul_irish>
my point being more that monetizing free content on the web conflicts with delivering a fast (and good) user experience

[15:41:07.0000] <JakeA>
wanderview: hah you want to make that change now you've implemented it all? :D

[15:41:30.0000] <jsbell>
wanderview: you around?

[15:44:16.0000] <tantek>
viewing source on sfgate.com...

[15:44:30.0000] <tantek>
paul_irish: this is hilarious. sfgate is doing the exact *opposite* of the minimum of what you should put in the HTML. they are rendering all the "furniture" (heading, sidebar) nav / boxes statically, and leaving out the article body itself.

[15:45:22.0000] <tantek>
in ~420k of just the page HTML. Because it's not like adding the article inline would have added much size to 420k of JS, nav, sidebar crap.

[15:46:20.0000] <paul_irish>
yeah. it's a trainwreck.

[15:47:33.0000] <tantek>
because of course you need 33 static copies of <div class="social-links " social-url=".." social-hashId="" social-blurb="> instead of the thing you might actually be sharing.

[15:49:20.0000] <tantek>
correction: article permalinks are more viewable

[15:49:30.0000] <gsnedders>
jgraham: I just mean in terms of seeing how interoperable support for things is. "Can I use feature [x] in general and expect it to work?"

[15:49:31.0000] <tantek>
the home page is the total disaster

[15:51:48.0000] <jgraham>
gsnedders: Well I wouldn't load interfaces.html for a feature and expect all the failures to mean "this feature doesn't work" without understanding what the tests are

[15:52:53.0000] <jgraham>
But I wouldn't recommend doing that with any test

[15:53:31.0000] <tantek>
paul_irish: e.g. this page shows article text without needing JS: http://www.sfgate.com/news/article/California-drought-Sour-water-a-new-normal-6168768.php

[15:57:19.0000] <roc>
ad visibility detection is a great use-case for async geometry APIs

[16:01:46.0000] <JakeA>
roc: https://www.w3.org/Bugs/Public/show_bug.cgi?id=20246 seems like a good idea

[16:02:12.0000] <jgraham>
karlcow: I don't understand your point

[16:02:27.0000] <gsnedders>
jgraham: well yes, but it just seems worse than the general case :P

[16:02:53.0000] <roc>
JakeA: seems like not quite the right thing to me

[16:03:21.0000] <karlcow>
jgraham: hmm? did I send anything on whatwg list?

[16:03:22.0000] <roc>
I'll comment in the bug

[16:03:30.0000] <jgraham>
karlcow: dev.platform

[16:04:14.0000] <jgraham>
gsnedders: Well perhaps? I mean it's clearer *what*'s being tested here. The tests are rather simple. OTOH some complex tests might need a lot of study to work out if they're edge cases or major parts of the functionality

[16:05:20.0000] <gsnedders>
jgraham: aye, I guess

[16:05:51.0000] <sethf>
roc: is there a proposal for an async geometry api?

[16:06:09.0000] <roc>
not exactly

[16:06:09.0000] <sethf>
googling didn't find me anything concrete

[16:06:12.0000] <roc>
there has been some discussion

[16:06:14.0000] <roc>
F2F

[16:06:20.0000] <sethf>
i see

[16:07:00.0000] <karlcow>
I didn't make a point. Or at least I thought so. :) I gave context. It was on dev.platform. Mozilla Brain Parser Activation. Reading the email at first I have read "audit perf" then see the URI, click and then understood. CLICK. Ah it's BLINK. OK. Not what I was expected. it was in the context of Blink rendering engine. Some of these sites behave differently in Firefox.

[16:07:01.0000] <karlcow>
So if there are other people as brain dead as me, I have context. That's all.

[16:07:08.0000] <karlcow>
I guess I confused you more.

[16:07:51.0000] <karlcow>
 /expected/expecting/

[16:09:54.0000] <jsbell>
gsnedders/jgraham: other than Chrome (which I'm intimately familiar with...), at this point how badly do the other browsers tend to fail idlharness tests for nitpicky IDL reasons vs actual feature reasons?

[16:13:38.0000] <jgraham>
jsbell: Gecko does pretty well I think

[16:13:55.0000] <jgraham>
We have quite reasonable WebIDL conformance these days, although it's surely not perfect

[16:14:06.0000] <jsbell>
jgraham: yeah, I got IndexedDB/interfaces.html to 100% on gecko

[16:14:24.0000] <jgraham>
karlcow: Oh, OK

[16:15:06.0000] <jgraham>
karlcow: Then my reply probably isn't as useful as I would like :)

[16:15:31.0000] <karlcow>
heh. Poetry!

[16:22:03.0000] <gsnedders>
jgraham: I thought it depended on which binding API Gecko was using for that API?

[16:23:04.0000] <karlcow>
ok jgraham I tried to make it more confusing :p ;) replied.

[16:24:26.0000] <jgraham>
gsnedders: I think the WebIDL bindings are used ~everywhere now, but ask bz or Ms2ger if you actually want to know

[16:24:36.0000] <jgraham>
/me -> sleep

[16:25:43.0000] <gsnedders>
jgraham: I could just well be out of touch with what's happened :)

[16:26:11.0000] <gsnedders>
jgraham: I don't exactly pay much attention to "how is Gecko implementing it's DOM bindings?"


2015-03-31
[17:00:40.0000] <wanderview>
JakeA: which change?  lost context

[17:07:03.0000] <wanderview>
JakeA: oh, if you mean the VARY:* thing... our network stack treats VARY:* as never match, but our Cache implements whats currently in the SW spec

[17:08:42.0000] <wanderview>
I think we should just reject cache.put() if the response has VARY:*

[17:09:05.0000] <wanderview>
and add/addAll

[17:26:58.0000] <gsnedders>
wait, does the CSSOM spec still not define element.style.background = "green"?

[17:27:30.0000] <gsnedders>
i.e., the named property setter (if I'm recalling my WebIDL terminology) on CSSStyleDeclaration?

[17:38:36.0000] <karlcow>
gsnedders: this reminds me of

[17:38:41.0000] <karlcow>
> The CSSOM spec isn't crystal clear on which behavior is correct, so they might both be considered valid.

[17:38:47.0000] <karlcow>
https://miketaylr.com/posts/2014/01/when-should-a-stylesheetlist-update.html

[17:39:20.0000] <karlcow>
not related. :) but CSSOM seems to forget a couple of things

[17:40:21.0000] <gsnedders>
karlcow: tbf the CSSOM spec was totally unmaintained for such a long while it's not entirely surprising it isn't perfect

[17:40:36.0000] <karlcow>
https://miketaylr.com/posts/2014/01/yui-set-style-differences.html

[17:40:39.0000] <karlcow>
:)

[17:40:49.0000] <karlcow>
gsnedders: yup yup.

[17:40:55.0000] <karlcow>
part of the funny things.

[17:43:08.0000] <gsnedders>
that involves YUI, I ain't touching that link :)

[17:47:10.0000] <karlcow>
In fact, it's about different implementations of setProperty method of CSSStyleDeclaration in different browsers :)

[17:47:13.0000] <karlcow>
but yeah

[17:47:33.0000] <gsnedders>
I just have had enough of YUI for my lifetime.

[18:32:42.0000] <MikeSmith>
zcorpan: if you could go through http://goo.gl/sJ34Xj and resolve any really old/stale bugs you don't care about keeping open, I'd appreciate it. Anything you would actually still like to see fixed, please do keep it open.

[18:33:44.0000] <MikeSmith>
zcorpan: for open bugs that we would really like to see fixed, I think eventually we might want to migrate them all to https://github.com/validator/validator/issues But I don't want to do that just yet

[02:23:08.0000] <mounir>
Ms2ger: ping

[02:23:21.0000] <Ms2ger>
Here

[02:23:52.0000] <mounir>
Ms2ger: is moving from Foo(DOMString) to Foo(sequence<DOMString>) forward compatible per webidl?

[02:24:39.0000] <Ms2ger>
No

[02:25:03.0000] <mounir>
interesting

[02:25:07.0000] <mounir>
would you care to elaborate?

[02:26:35.0000] <Ms2ger>
Passing a string to a method that takes sequence<DOMString> would throw, I think

[02:27:16.0000] <Ms2ger>
Oh, no

[02:28:27.0000] <Ms2ger>
It would be interpreted as a sequence of characters, it seems

[02:28:51.0000] <annevk>
you'd need to accept either

[02:29:04.0000] <mounir>
Ms2ger: Foo(DOMString) extended to accept DOMString _or_ sequence<DOMString> would work then?

[02:30:26.0000] <Ms2ger>
Sure

[02:42:52.0000] <annevk>
GPHemsley: you around?

[02:43:15.0000] <annevk>
GPHemsley: I want to outline some stuff that compliments https://mimesniff.spec.whatwg.org/

[02:43:40.0000] <annevk>
GPHemsley: in particular, we need a place to define how the no-sniff header influences various contexts, such as <script>, <link rel=stylesheet>, etc.

[02:44:01.0000] <annevk>
GPHemsley: I was thinking of jotting notes down on a wiki page, then getting that implemented, and then filing bugs to standardize it

[03:46:48.0000] <annevk>
jgraham: can web-platform-tests handle the case where I issue a HEAD and it responds with something that includes a body?

[04:12:19.0000] <jgraham>
annevk: Yes

[05:22:47.0000] <GPHemsley>
annevk: I'm here now, for a moment. But if you want to write stuff on the wiki, I can look at it when I have more time.

[05:37:20.0000] <annevk>
Is there a way to reset a git repo?

[05:37:45.0000] <annevk>
E.g. currently web-platform-tests suggests I've made some change to "tools" but I've no idea how to undo that

[05:38:11.0000] <GPHemsley>
git reset --hard

[05:38:12.0000] <jgraham>
Ah, well tools is a submodule (if you pulled recently)

[05:38:22.0000] <jgraham>
So it's a bit more compilcated

[05:38:23.0000] <annevk>
"fatal: Not a git repository: tools/../.git/modules/tools"

[05:38:37.0000] <jgraham>
Yeah, please rm -r that folder

[05:38:51.0000] <jgraham>
i.e. .git/modules/tools

[05:39:12.0000] <jgraham>
Then git submodule update --init --recursive

[05:40:43.0000] <zcorpan>
fatal: Not a git repository: ../.git/modules/tools

[05:40:44.0000] <zcorpan>
Unable to find current revision in submodule path 'tools'

[05:40:51.0000] <zcorpan>
after those instructions

[05:40:51.0000] <annevk>
yeah

[05:40:55.0000] <annevk>
same

[05:42:05.0000] <jgraham>
Hmm

[05:42:14.0000] <jgraham>
git is really properly terrible at deleing subrepos

[05:42:33.0000] <jgraham>
So does .git/modules/tools exist at all?

[05:42:42.0000] <zcorpan>
no

[05:43:24.0000] <zcorpan>
html5lib and resources exist in .git/modules/

[05:44:15.0000] <annevk>
same

[05:44:31.0000] <zcorpan>
now `git fetch upstream` also results in fatal: Not a git repository: tools/../.git/modules/tools :-)

[05:45:34.0000] <jgraham>
so I would kind of expect git submodule init to fix this

[05:46:19.0000] <jgraham>
Maybe delete the tools/ directory and everything under .git/modules and git submodule update --init --recursive again?

[05:47:09.0000] <annevk>
"fatal: Not a git repository: ../.git/modules/resources"

[05:47:18.0000] <annevk>
"Unable to find current revision in submodule path 'resources'"

[05:47:20.0000] <GPHemsley>
Make sure .git/config is in the proper state

[05:47:21.0000] <annevk>
blargh

[05:47:29.0000] <jgraham>
Yeah remove resources/ too

[05:47:44.0000] <annevk>
I did

[05:47:55.0000] <zcorpan>
same result here

[05:48:22.0000] <jgraham>
So you have no $WPT_ROOT/resources directory and no $WPT_ROOT/tools directory?

[05:48:36.0000] <jgraham>
and $WPT_ROOT/.git/modules is an empty directory?

[05:49:07.0000] <zcorpan>
yep. i tried removing the modules directory itself also but no difference

[05:49:21.0000] <jgraham>
Hmm, well I just did exactly that and it wfm

[05:49:28.0000] <annevk>
jgraham: yeah works

[05:49:45.0000] <annevk>
jgraham: didn't realize what you meant by resources/ thought you meant .git/modules/resources

[05:49:57.0000] <annevk>
jgraham: one final question, how do I start the server again?

[05:50:01.0000] <zcorpan>
[submodule "tools"]

[05:50:02.0000] <zcorpan>
	url = https://github.com/w3c/wpt-tools.git

[05:50:04.0000] <zcorpan>
GPHemsley: ^

[05:50:11.0000] <jgraham>
https://pastebin.mozilla.org/8827681

[05:50:30.0000] <jgraham>
annevk: ./serve

[05:50:38.0000] <jgraham>
in the root directory

[05:50:44.0000] <GPHemsley>
zcorpan: If things are in a hybrid state of deletion, you may want to remove that section of the file and reinit the submodules

[05:50:45.0000] <zcorpan>
ah. ok now it seems to work

[05:51:27.0000] <zcorpan>
excellento. thx

[05:52:01.0000] <GPHemsley>
annevk: Any pressing questions you have for me before I leave?

[05:52:12.0000] <annevk>
GPHemsley: no, thanks

[05:52:38.0000] <GPHemsley>
OK, then I'll just leave you with the reminder of the existence of https://wiki.whatwg.org/wiki/Contexts

[05:52:49.0000] <GPHemsley>
Let me know where you need me to look later

[06:07:40.0000] <annevk>
jgraham: see https://github.com/w3c/web-platform-tests/pull/1697 for my test

[06:37:08.0000] <JakeA>
annevk: given that fetch/XHR are HTTP APIs, and a response inc. body from a HEAD request is a violation, is it fair or not that the browsers try and do something to error correct?

[06:37:17.0000] <JakeA>
I can argue it both ways

[06:38:27.0000] <annevk>
Yes :-)

[06:40:50.0000] <annevk>
JakeA: since even Content-Length means something different arguably throwing away the body is sane

[06:42:03.0000] <annevk>
JakeA: what IE does makes no sense btw

[06:55:58.0000] <wanderview>
annevk: is this a general problem or does it sound chrome specific to you?  https://code.google.com/p/chromium/issues/detail?id=448427

[06:57:04.0000] <wanderview>
its unclear to me if "cross origin favicon tainting" is a consequence of the way chrome does content process caching or a general web attack

[06:58:48.0000] <annevk>
wanderview: I'm not sure what that means

[06:59:30.0000] <annevk>
wanderview: not sure why a favicon is different

[06:59:45.0000] <wanderview>
I'm going to assume its a chrome-specific issue

[07:00:54.0000] <smaug____>
who wants to spec how resize event works

[07:01:50.0000] <annevk>
smaug____: zcorpan

[07:02:31.0000] <smaug____>
good

[07:04:56.0000] <MikeSmith>
what's the best way for a normal person to collect usage data on a particular API?

[07:05:12.0000] <MikeSmith>
other than by browser-project telemetry I mean

[07:05:45.0000] <annevk>
MikeSmith: there's not really any other reliable way

[07:06:19.0000] <wanderview>
annevk: how will the fetch issue solve the HEAD method thing for Cache?

[07:06:34.0000] <annevk>
wanderview: it won't, that was the point

[07:06:34.0000] <JakeA>
It won't

[07:06:57.0000] <wanderview>
oh... "this issue" means the SW issue, not the fetch issue you linked in the first sentence

[07:07:05.0000] <wanderview>
its morning in america

[07:07:22.0000] <annevk>
typical wanderview coffee excuse :p

[07:07:36.0000] <wanderview>
annevk: if only I could use that in the afternoon too...

[07:07:59.0000] <wanderview>
/me feels slightly dirty for quoting Ronald Reagan.

[07:08:34.0000] <JakeA>
That was all good fun, been a while since I did some low-level HTTP testing

[07:16:52.0000] <wanderview>
JakeA: speaking of which... I remember you did some of that to see what browsers do when the body is truncated by a network error, right?

[07:18:11.0000] <wanderview>
guess I'm still wondering what to do here:  https://github.com/slightlyoff/ServiceWorker/issues/665

[07:18:19.0000] <zcorpan>
smaug____: http://dev.w3.org/csswg/cssom-view/#resizing-viewports

[07:18:47.0000] <zcorpan>
smaug____: https://html.spec.whatwg.org/multipage/webappapis.html#run-the-resize-steps

[07:30:13.0000] <JakeA>
wanderview: yeah https://github.com/slightlyoff/ServiceWorker/issues/362#issuecomment-48612616

[07:38:23.0000] <wanderview>
JakeA: yea... it just seems a bit scary to me to potentially have truncated values in Cache

[07:38:45.0000] <wanderview>
JakeA: I wonder if we should have some kind of strict mode in Cache that rejects if content-length is wrong

[07:38:59.0000] <wanderview>
rather than make all script authors deal with this condition themslves

[07:41:33.0000] <smaug____>
zcorpan: that is surprising

[07:42:06.0000] <zcorpan>
smaug____: what? that it's specced?

[07:42:23.0000] <smaug____>
the behavior is a bit surprising

[07:42:40.0000] <smaug____>
I would have expected we spec resize to fire around animation frame callbacks

[07:42:50.0000] <smaug____>
but ok, perhaps this is fine too

[07:43:26.0000] <smaug____>
why isn't it just using a task?

[07:43:31.0000] <smaug____>
to fire the event

[07:44:11.0000] <smaug____>
/me hasn't looked at 8.1.4.2 Processing model for ages

[07:44:22.0000] <smaug____>
very different to how Gecko works :/

[07:46:43.0000] <smaug____>
wait, I'm misreading it or what.. "An event loop must continually run through the following steps for as long as it exists:" ...  "For each fully active Document in docs, run the animation frame callbacks for that Document, passing in now as the timestamp."

[07:46:58.0000] <smaug____>
I see, that mixes animation frame handling into the event loop

[07:48:26.0000] <JakeA>
wanderview: If we need a strict mode, shouldn't it go on fetch()?

[07:48:58.0000] <smaug____>
so fine (just differently modeled comparing to what I have in mind for animation frame handling and such)

[07:49:03.0000] <wanderview>
JakeA: well, its Cache that has to decide what to do if the body stream is truncated, no?

[07:49:08.0000] <zcorpan>
smaug____: it's intended to fire just before animation frame callbacks

[07:49:09.0000] <smaug____>
but end result should be the same

[07:49:47.0000] <zcorpan>
smaug____: it was using a task before but we changed it to sync with animation frames since impls do that or want to do that

[07:50:00.0000] <wanderview>
JakeA: I mean... content uses fetch() can decide what to do if the Response.body stream gives them an error

[07:50:18.0000] <JakeA>
wanderview: hmm yeah, good point

[07:50:31.0000] <wanderview>
JakeA: but if there is no way for Cache to surface an error after resolving Cache.put() promise... then it needs some strategy for handling it

[07:50:45.0000] <smaug____>
zcorpan: some impls do that

[07:50:59.0000] <smaug____>
but ok

[07:51:02.0000] <smaug____>
I think this is fine

[07:51:49.0000] <zcorpan>
smaug____: it's possible that the event loop spec is wrong and should be changed in some way. i think bz had vague concerns about it not matching impls (or at least gecko)

[07:51:50.0000] <zcorpan>
smaug____: ok

[07:51:53.0000] <smaug____>
it means that resize is occasionally pending while layout has changed its state already

[07:52:15.0000] <zcorpan>
another issue here is that the concept of flushing layout is not specced yet

[07:53:26.0000] <JakeA>
wanderview: wondering if .text() etc should also reject

[07:54:07.0000] <wanderview>
JakeA: I think it should, yea

[07:54:33.0000] <wanderview>
JakeA: can it provide the partial body if it rejects?  or just say "use the stream version" if you want that behavior

[08:00:18.0000] <smaug____>
zcorpan: shoud resize fire if an iframe is first resized to size foo,bar, then foo+1, bar+1, and then back to foo,bar, before animation frame callbacks are run?

[08:01:16.0000] <annevk>
GPHemsley: FWIW, the Contexts wiki page is hopelessly out of date with respect to the number of contexts

[08:05:24.0000] <JakeA>
wanderview: it should reject with an error, it's possible but weird to have the partial as a property of the error. I think that might be too weird though

[08:05:44.0000] <wanderview>
yea... especially with promise propagation

[08:10:31.0000] <Domenic>
why does fetch/cache care about the content-length header at all?

[08:11:45.0000] <zcorpan>
smaug____: how do you interpret the spec for that case? "If doc’s viewport has had its width or height changed ... since the last time these steps were run"

[08:12:25.0000] <zcorpan>
maybe it should say if the width and height are different, rather than have changed

[08:13:08.0000] <JakeA>
wanderview: I guess the cache should take the whole body stream, and it's down to stream consumers to decide if they carry on reading or not

[08:14:00.0000] <wanderview>
JakeA: not sure I understand... what does "take the whole body stream" mean if there is an error while reading Response.body and streaming it to disk?

[08:14:25.0000] <JakeA>
Domenic: if a request has a content-length, should the stream stop at that content length even if there's more content?

[08:15:00.0000] <JakeA>
wanderview: I mean if the body stream is > content-length. If there's an error reading response.body it shouldn't go into the cache

[08:15:01.0000] <Domenic>
JakeA: I would just treat content-length as incidental metadata that in some authors' minds might have some relation to the body length in bytes, or might not

[08:15:22.0000] <Domenic>
not sure how that squares with XHR though

[08:15:29.0000] <wanderview>
JakeA: yea... I don't think we can make content-length strict by default... too many broken servers out there

[08:15:47.0000] <wanderview>
at least, we can never seem to get away with it in FF for other network requests

[08:15:52.0000] <JakeA>
Domenic: that's fair. Although .text etc may truncate at content-length, that's how browsers seem to behave today

[08:16:16.0000] <Domenic>
JakeA: hmm I mean that seems OK but unnecessary

[08:17:19.0000] <JakeA>
Domenic: I know what you mean, but it's something all browsers do so I guess there's a good reason. Maybe it's ok to break that tradition with fetch()

[08:17:39.0000] <Domenic>
I dunno, I feel like we need an expert :)

[08:17:50.0000] <JakeA>
Can't we just make shit up outselves?

[08:18:08.0000] <JakeA>
Can't we just make up words like "outselves"?

[08:18:08.0000] <Domenic>
aka "all the web platform"

[08:19:44.0000] <Domenic>
annevk: @fetchstandard should tweet this question and we'll all RT

[08:20:26.0000] <JakeA>
What? "Can't we just make shit up ourselves?"

[08:20:43.0000] <Domenic>
lol

[08:21:02.0000] <Domenic>
i meant, should content-length have any impact on .json(), but that works too

[08:21:08.0000] <Domenic>
hmm

[08:21:14.0000] <wanderview>
JakeA: pretty sure gecko is going to ignore content-length for the short term...

[08:21:24.0000] <Domenic>
what if the stream ends early before content-length is reached

[08:21:26.0000] <wanderview>
too many servers send the wrong value when gzip content-encoding is applied

[08:21:33.0000] <Domenic>
do we error or ignore content-length or...?

[08:21:57.0000] <JakeA>
Domenic: that tends to be an error

[08:22:11.0000] <Domenic>
hmm

[08:22:31.0000] <Domenic>
given the gzip thing i'm not sure i believe you?

[08:22:59.0000] <wanderview>
I think some browsers with less legacy just return error there

[08:23:00.0000] <JakeA>
Domenic: https://github.com/slightlyoff/ServiceWorker/issues/362#issuecomment-48612616 - although this research was done by past-Jake and I don't trust that guy

[08:23:19.0000] <Domenic>
ah that's very nice

[08:23:24.0000] <JakeA>
Maybe I'd have seen different results with gzipping

[08:23:27.0000] <JakeA>
I didn't test that

[08:23:45.0000] <wanderview>
its harder for us because "Firefox used to work, but doesn't in this new release!" when we try to treat content-length strictly

[08:24:20.0000] <JakeA>
wanderview: In my tests, content-length > content caused Firefox to wait until timeout

[08:24:40.0000] <JakeA>
Maybe that was keep-alive

[08:25:09.0000] <wanderview>
JakeA: maybe we check in one direction and not the other... probably depends on exactly what server bugs we have to bend to

[08:28:46.0000] <wanderview>
can we just spec the network to be infallible

[08:28:50.0000] <wanderview>
and no aborting fetches

[08:32:59.0000] <Domenic>
yes please

[09:23:40.0000] <annevk>
wanderview: we do use Content-Length to some extent

[09:24:29.0000] <annevk>
but I doubt it matters much in an HTTP/2 world

[09:33:47.0000] <annevk>
JakeA: your responses to https://github.com/slightlyoff/ServiceWorker/issues/651 don't really seem to take into account OP

[09:34:13.0000] <annevk>
JakeA: if I stream the body from a response, the SW shutting down once the promise resolves kills the body

[09:34:29.0000] <annevk>
doesn't*

[09:36:15.0000] <JakeA>
annevk: ah yes, I got lost in the replies

[09:53:49.0000] <wanderview>
jsbell: hi, were you looking for me yesterday?

[10:11:46.0000] <smaug____>
zcorpan: back. So I interpret it so that if there was a change after last resize, fire a new resize, even if the current size is the same.

[10:13:16.0000] <smaug____>
zcorpan: do you happen to know what blink does currently?

[10:57:29.0000] <jsbell>
wanderview: yeah, sorry. Wanted to see if your CacheStorage was exposed to windows yet or just for SW contexts

[10:57:49.0000] <wanderview>
ah... I think I ended up answer on list

[10:57:50.0000] <jsbell>
wanderview: but you replied on blink-dev :)

[10:57:54.0000] <wanderview>
yep :-)

[10:57:55.0000] <wanderview>
thanks

[10:58:50.0000] <jgraham>
jsbell: Thanks for the heads up

[11:00:53.0000] <jsbell>
np

[11:01:59.0000] <jsbell>
wanderview: also, I just told jgraham (via email), but I revamped the blink tests for cache storage (yesterday) so if you were pulling those, now's a good time to re-grab them

[11:03:07.0000] <wanderview>
thanks

[11:03:20.0000] <wanderview>
I don't think we're quite running those yet

[11:05:16.0000] <wanderview>
I did some temporary hacks in our tree to run them before... but have not tried again in the last few months

[11:06:20.0000] <Ms2ger>
So is TabAtkins going to do the geocities look again?

[11:07:28.0000] <jgraham>
I was sort of hoping that the upstream tests would be revamped a bit to make dealing with the origin issues a bit easier before I had another go at importing them into wpt

[11:11:04.0000] <jsbell>
jgraham: once this is out the door I'm hoping to tackle that. the cache ones don't have any actual server references except one php file, at least

[11:22:41.0000] <jgraham>
jsbell: Oooh, that seems like something I could import rather quickly then :)

[13:21:00.0000] <zcorpan>
smaug____: in http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3477 i get one resize event in blink, two events in gecko. remove the clientWidth and i get no events in either.

[13:21:29.0000] <smaug____>
zcorpan: in my test case blink fired event, gecko didn't

[13:22:14.0000] <smaug____>
zcorpan: https://pastebin.mozilla.org/8827770

[13:22:16.0000] <zcorpan>
smaug____: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3478 webkit 2 events

[13:23:07.0000] <smaug____>
ah, you have layout flush

[13:24:06.0000] <zcorpan>
yeah. different case from what you asked about i suppose :-)

[13:24:07.0000] <smaug____>
oh, wait, blink fires resize even without any actual resize

[13:25:40.0000] <smaug____>
zcorpan: so current Gecko fires resize if there is one pending and one does layout flush

[13:26:01.0000] <smaug____>
otherwise resize is fired async

[13:26:11.0000] <zcorpan>
blink seems to fire resize sometimes (?) when loading an iframe

[13:26:39.0000] <zcorpan>
smaug____: ok

[13:27:05.0000] <smaug____>
my testcase runs after the iframe has been loaded

[13:27:47.0000] <smaug____>
and resize should fire before animation frame callbacks

[13:28:02.0000] <smaug____>
so gecko nor blink follows the current spec

[13:28:38.0000] <smaug____>
s/so/so not/

[13:28:54.0000] <zcorpan>
right

[13:29:37.0000] <zcorpan>
blink fires an event here which is pretty weird http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3479

[13:30:39.0000] <smaug____>
does it perhaps just fire pending resize after animation frame callbacks have run?

[13:34:49.0000] <Domenic>
TabAtkins: I am a bit confused by Bikeshed's "Terms defined by this specification" vs. exported dfns. Is there anywhere in the output that lists exported dfns?

[13:34:59.0000] <zcorpan>
maybe. but there shouldn't be any resize at all in this case (unless it considers a page load to be a resize)

[13:36:40.0000] <Domenic>
TabAtkins: also how should I mark up ES-style "abstract operations" that I want other specs to be able to call? Just <dfn>s? But they are already <h4>s... what's the suggested markup?

[13:37:10.0000] <smaug____>
zcorpan: sure. But does blink perhaps fire resize always after animation frame callbacks?

[13:38:27.0000] <smaug____>
I'm just about to upload a patch to change gecko's behavior to fire resize around animation frames, but would be good to know whether event should fire before or after the callbacks

[13:42:14.0000] <zcorpan>
smaug____: i'm not sure how to test the order

[13:43:31.0000] <zcorpan>
smaug____: i think the html spec's order has some reasoning behind it, that animation frames happen last

[13:43:48.0000] <zcorpan>
animation frame callbacks

[13:44:57.0000] <smaug____>
not sure the order matters much

[13:45:11.0000] <smaug____>
except for interoperability

[13:46:40.0000] <smaug____>
/me tries to find where blink dispatches resize

[13:52:41.0000] <zcorpan>
smaug____: https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/FrameView.cpp&q=enqueueresizeevent&sq=package:chromium&type=cs&l=2102

[13:54:38.0000] <smaug____>
that doesn't dispatch it, right?

[13:55:02.0000] <smaug____>
 ensureScriptedAnimationController().enqueuePerFrameEvent

[13:55:08.0000] <smaug____>
no idea what that might do

[13:55:28.0000] <smaug____>
sounds like something not what the spec says

[13:56:12.0000] <zcorpan>
it predates the spec changes, so entirely possible it is not at all what the spec says

[13:56:36.0000] <zcorpan>
i'd try to match the spec unless you find the spec insane

[13:56:44.0000] <smaug____>
ok

[13:56:46.0000] <smaug____>
thanks

[13:56:52.0000] <smaug____>
I don't find it insane

[13:56:58.0000] <smaug____>
it is just not what anyone is doing

[13:57:27.0000] <zcorpan>
yeah. i'll file a bug on blink to investigate getting closer to the spec

[13:58:36.0000] <zcorpan>
do you have a mozilla bug for your change?

[13:59:29.0000] <smaug____>
zcorpan: https://bugzilla.mozilla.org/show_bug.cgi?id=1149555

[14:00:22.0000] <zcorpan>
thx

[14:16:22.0000] <zcorpan>
smaug____: https://code.google.com/p/chromium/issues/detail?id=472247

[14:17:52.0000] <caitp->
someone on blink-dev just noticed that idl attributes are found on prototypes now, rather than own properties of instances

[14:18:43.0000] <caitp->
is it here to stay this time? :O

[14:24:09.0000] <smaug____>
caitp-: blink is late getting idl attributes to behave per spec

[14:24:48.0000] <caitp->
yeah I know

[14:25:43.0000] <smaug____>
and ++blink getting this stuff fixed finally :)

[14:25:56.0000] <caitp->
i think it's been attempted before

[14:27:19.0000] <Domenic>
before it was reverted because perf

[14:27:41.0000] <Domenic>
this time the only thing that can stop it is another MS Exchange/Array.prototype.contains-style debacle once it reaches stable channel

[14:27:52.0000] <Domenic>
And even then they might just be able to turn it off for one or two properties...

[14:28:11.0000] <Domenic>
Array.prototype.values, rather

[14:28:49.0000] <caitp->
well, won't have to worry about A.p.values until it's actually implemented in v8

[14:28:49.0000] <smaug____>
Domenic: curious, which properties?

[14:29:25.0000] <Domenic>
smaug____: I meant, hypothetical ones that cause compat problems. So far none have done so on a large scale...

[14:29:50.0000] <Domenic>
caitp-: pretty sure it was implemented but had to be backed out because it broke MS Exchange Online? Was that something else?

[14:29:55.0000] <zcorpan>
w00t! let's hope it sticks this time

[14:30:29.0000] <caitp->
Domenic I believe that's what it was

[14:30:39.0000] <caitp->
@@iterator is there, but the values alias isn't exposed

[14:30:48.0000] <Domenic>
yeah

[14:31:09.0000] <Domenic>
wonder when we're going to feel brave enough to try that again

[14:31:13.0000] <smaug____>
while fixing this all Gecko had some issues. onmouseenter/leave required special handling

[14:31:15.0000] <Domenic>
spartan is shipping it i believe

[14:31:20.0000] <smaug____>
but I guess that ended up to some spec

[14:31:30.0000] <smaug____>
http://mxr.mozilla.org/mozilla-central/source/dom/webidl/EventHandler.webidl#65

[14:32:55.0000] <smaug____>
(and of course all the issues related to global )

[14:33:27.0000] <zcorpan>
https://html.spec.whatwg.org/multipage/webappapis.html#idl-definitions:handler-onmouseenter

[14:33:36.0000] <smaug____>
good

[14:33:57.0000] <zcorpan>
idl attributes on globals is on the instance per spec

[14:35:01.0000] <smaug____>
right, and it took quite some time to find something compatible-enough-with-the-web

[14:37:14.0000] <caitp->
so how was the perf issue solved?

[14:37:38.0000] <caitp->
i don't remember seeing any bugmail about it, so I missed something :>

[14:38:13.0000] <smaug____>
zcorpan: https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/dom/GlobalEventHandlers.idl&q=onmouseenter file:idl&sq=package:chromium&l=73

[14:40:01.0000] <zcorpan>
smaug____: thx. will file

[14:41:08.0000] <caitp->
hmmm, fixme comment in that file does not have a name on it :>

[14:52:02.0000] <zcorpan>
https://code.google.com/p/chromium/issues/detail?id=472260

[14:52:10.0000] <zcorpan>
it's probably philipj

