2017-09-01
[18:09:52.0000] <MikeSmith>
oh wow the new Github embedded-code-snippets feature is much awesome

[18:10:01.0000] <MikeSmith>
https://github.com/blog/2415-introducing-embedded-code-snippets

[18:10:31.0000] <MikeSmith>
I guess I’m probably late to the party, as far as figuring out how to use it

[18:11:41.0000] <MikeSmith>
it’s not super-intuitive that you must choose “Copy permalink” from the context-menu widget

[18:12:17.0000] <MikeSmith>
and I still haven’t figured out how to selecte multiple lines from the GUI view

[18:12:47.0000] <MikeSmith>
I just manually add the end line to the range in the URL after pasting it

[18:16:08.0000] <MikeSmith>
ah

[18:17:02.0000] <MikeSmith>
/me only just now trial-and-error discovers the way to select multiple lines is shift+click

[01:48:48.0000] <tobie>
annevk: seems iteration order of stacks and queues in infra are the same. Is this by design or is this an oversight?

[02:01:21.0000] <TimothyGu>
aww darn it https://cia.webkit.org/changeset/216851/webkit

[02:02:05.0000] <TimothyGu>
tobie: seems like the consistency we see in HTMLAllCollection behaviors among different browsers won't be that consistent after all :((

[02:04:14.0000] <tobie>
TimothyGu: :-/

[02:04:37.0000] <tobie>
TimothyGu: that said: what consistency!?

[02:05:14.0000] <TimothyGu>
basically returning undefined when nothing is found (Chrome, Edge, Safari)

[02:05:45.0000] <TimothyGu>
Spec and Firefox (and now apparently Safari nightly) returns null

[02:06:29.0000] <tobie>
TimothyGu: sounds like it's not a webcompat issue?

[02:06:56.0000] <TimothyGu>
probably not

[02:07:04.0000] <tobie>
TimothyGu: so we can fix and file issues against vendors either way

[02:07:30.0000] <TimothyGu>
DocumentAllLegacyCallNoArguments is <=0.000001%

[02:07:44.0000] <TimothyGu>
yeah I think so

[02:08:56.0000] <TimothyGu>
is Sam Weinig on GitHub or IRC?

[02:09:40.0000] <TimothyGu>
would like to let him know at the minimum

[02:09:53.0000] <tobie>
TimothyGu: yes

[02:11:09.0000] <tobie>
TimothyGu: samweinig on github

[02:11:40.0000] <TimothyGu>
tobie: cool thanks

[02:12:10.0000] <tobie>
TimothyGu: and SamWeinig on w3's irc

[02:12:57.0000] <TimothyGu>
If I add one more channel to WeeChat my VPS is going OOM lol

[02:13:09.0000] <tobie>
TimothyGu: please do loop me in on that conversation

[02:13:36.0000] <TimothyGu>
I'll just use GitHub

[02:14:02.0000] <tobie>
TimothyGu: I'd like to 1) apologize for the screw-up and 2) see what we can do to lessen the risk of that happening in the future

[02:15:08.0000] <TimothyGu>
tobie: well it's not really your fault, the commit happened in May when I haven't even starred whatwg/html yet :)

[02:16:07.0000] <TimothyGu>
only started looking at legacycaller when I was implementing legacy platform objects in jsdom

[02:20:02.0000] <tobie>
TimothyGu: Well, that commit was triggered by a cleanup I made earlier this year.

[02:21:44.0000] <tobie>
TimothyGu: this wouldn't have been an issue if we had better tests.

[02:25:35.0000] <tobie>
I don't understand how WebIDL can both claim: "The order that members appear [on an interface] has significance for property enumeration in the ECMAScript binding." and "The order of appearance of an interface definition and any of its partial interface definitions does not matter."

[02:25:55.0000] <tobie>
Which is it?

[02:26:42.0000] <TimothyGu>
tobie: Oh heh. Speaking of tests, how is https://github.com/w3c/web-platform-tests/pull/6786 coming along?

[02:27:25.0000] <tobie>
TimothyGu: it's on my todo list. :-/

[02:27:48.0000] <tobie>
TimothyGu: You're welcome to contribute. :D

[02:28:41.0000] <TimothyGu>
:/ school will start pretty soon for me, I'll do what I can!

[02:29:19.0000] <tobie>
TimothyGu: I'll get back to it.

[05:30:18.0000] <domfarolino>
annevk: were you referring to WPT my latest HTML PR?

[05:30:34.0000] <domfarolino>
I assume so but wasn't sure

[05:34:32.0000] <annevk>
domfarolino: yeah

[05:34:45.0000] <domfarolino>
cool

[05:34:49.0000] <annevk>
domfarolino: as per https://whatwg.org/working-mode#changes

[05:35:24.0000] <domfarolino>
annevk: ah make sense, thanks

[06:54:21.0000] <tobie>
So I'm really seeing mixins as named interface partials  that can extend > 1 interface with a more limited set of members.

[06:55:02.0000] <tobie>
Can you relate to this mental model or is it completely off-marks?

[07:07:25.0000] <annevk>
tobie: nah is fine

[07:35:11.0000] <gsnedders>
what's the current status of >>>?

[07:35:34.0000] <annevk>
gsnedders: controversial still

[07:35:42.0000] <annevk>
gsnedders: and maybe renamed?

[07:35:48.0000] <annevk>
gsnedders: never know with CSS

[07:36:06.0000] <gsnedders>
annevk: I don't care so much about renaming, but I want to know if we're going to have some way to select elements within a shadow tree

[07:41:42.0000] <annevk>
gsnedders: there's a "part" proposal that has some agreement

[07:42:15.0000] <annevk>
gsnedders: <shadow-tree-element part="x"> outsideShadowTree::part(x)

[07:46:29.0000] <TabAtkins>
tobie: Yes, it's intended, they're both just lists.

[07:46:52.0000] <TabAtkins>
gsnedders: >>> is not in the dynamic (stylesheet) profile, but it is in the static (querySelector) one.

[07:47:16.0000] <TabAtkins>
::part() is indeed how we'll be exposing things outside of the shadow for stylesheets.

[07:48:03.0000] <annevk>
I don't think WebKit agreed to implement >>> though and I'm not sure Mozilla has either

[07:48:10.0000] <tobie>
TabAtkins: it's sort of surprising to enumerate a stack in FIFO order, though.

[07:48:36.0000] <TabAtkins>
tobie: Standard result of doing it in JS tho, where it's just an Array that you're using push/pop on.

[07:50:24.0000] <tobie>
TabAtkins: I think this warrants a note in the spec.

[09:00:49.0000] <tobie>
Sneak peek at WebIDL mixins: https://github.com/heycam/webidl/pull/433 (WIP)

[09:02:02.0000] <tobie>
And with this, have a nice w-e, all!

[09:14:22.0000] <annevk>
you too tobie

[09:18:08.0000] <annevk>
wanderview: r? https://github.com/whatwg/fetch/pull/584

[09:19:34.0000] <wanderview>
annevk: r+... I don't have perms to merge

[09:19:50.0000] <annevk>
wanderview: ta

[09:20:19.0000] <annevk>
wanderview: yeah, we keep master fairly restricted for standards since we're pretty nitpicky about commit messages and such


2017-09-02
[07:17:15.0000] <xkill>
Hello

[15:27:47.0000] <nox>
Is there any API that exposes a non-normalized TimeRanges object?


2017-09-04
[03:24:04.0000] <smaug____>
annevk: do I recall correctly that focus handling is pretty much the only thing in Shadow DOM spec which hasn't been merged to elsewhere?

[03:26:53.0000] <annevk>
smaug____: yeah, kochi wanted to fix that iirc

[03:27:07.0000] <annevk>
smaug____: maybe also some event stuff?

[03:28:10.0000] <smaug____>
just trying to figure how to implement this all

[03:28:17.0000] <smaug____>
or where to look at what to implement

[03:30:03.0000] <smaug____>
/me is about to start to update wchen's patches

[03:46:44.0000] <annevk>
smaug____: okay, another thing I realized is that https://w3c.github.io/DOM-Parsing/ isn't updated

[03:47:17.0000] <annevk>
smaug____: I'll look into and create a new tracking issue on upstreaming if we don't have one already

[03:48:46.0000] <smaug____>
annevk: what should be updated there?

[03:49:40.0000] <annevk>
smaug____: ShadowRoot.prototype.innerHTML is a thing iirc

[03:50:05.0000] <annevk>
smaug____: https://github.com/w3c/DOM-Parsing/issues/21

[03:50:57.0000] <smaug____>
aha, I thought DocumentFragment had innerHTML in some spec

[03:51:25.0000] <annevk>
smaug____: that was a plan at some point, but didn't happen

[03:51:37.0000] <annevk>
smaug____: putting it on DocumentFragment is more complicated because there's no context node

[03:52:14.0000] <smaug____>
and what is the context node in ShadowRoot case? the host?

[03:52:21.0000] <annevk>
smaug____: yup

[03:58:21.0000] <annevk>
smaug____: https://github.com/w3c/webcomponents/issues/377#issuecomment-250693594

[03:58:35.0000] <annevk>
smaug____: I added a comment there asking some questions from hayato

[03:58:50.0000] <annevk>
smaug____: and added a couple pointers to some issues I'm aware of

[03:58:58.0000] <annevk>
smaug____: hope that helps

[04:09:38.0000] <annevk>
smaug____: looking through things it seems like there's still many open issues around shadow trees that have gone unresolved

[04:12:12.0000] <ondras>
hm, can an AudioBuffer instance be passed to a Worker ?

[04:17:21.0000] <ondras>
DOMException: Failed to execute 'postMessage' on 'Worker': An object could not be cloned.

[04:17:24.0000] <ondras>
okay, apparently not.

[04:31:00.0000] <annevk>
gsnedders: see https://github.com/w3c/webcomponents/issues/78 for the >>>-controversy

[06:36:08.0000] <gsnedders>
is the private mailing dead and buried along with any notion of membership gone?

[07:04:10.0000] <annevk>
JakeA: did anyone sign up to remove foreign service workers from Fetch?

[07:04:45.0000] <annevk>
JakeA: there doesn't seem to be a tracking issue against  Fetch either; I can probably write a patch though

[07:05:15.0000] <JakeA>
annevk: as in browsers or spec?

[07:05:27.0000] <JakeA>
There's https://github.com/w3c/ServiceWorker/issues/1188 for the spec

[07:05:45.0000] <annevk>
JakeA: spec, there's a bunch of text in Fetch

[07:06:05.0000] <JakeA>
annevk: it's on my todo list, but happy for you to do it

[07:06:37.0000] <annevk>
JakeA: I'm a little bit afraid of creating a bunch of rebase conflicts for your abort work whenever I touch Fetch

[07:07:54.0000] <JakeA>
annevk: I can deal with those. Going to do another push on the abort spec tomorrow. The whole thing's been like pulling on a thread, especially given that XHR needs changes now :(

[07:08:57.0000] <annevk>
JakeA: yeah, none of it was really in shape yet and the API really lays that bare

[07:09:27.0000] <annevk>
JakeA: this is why I try to advocate we first revamp existing things; e.g., with the storage work you're planning

[07:10:18.0000] <annevk>
But what typically happens is that folks add new features and the infrastructure is left broken for quite a while... Glad that's not the case here though

[07:11:39.0000] <JakeA>
gotta do it properly :D

[13:49:56.0000] <zcorpan>
yay https://github.com/w3c/csswg-drafts/commit/371d0a1e60e8a2045393fc4db2f1110b9418b2f2


2017-09-05
[22:16:13.0000] <kochi>
smaug____: yeah, it's on my list in THIS quarter :)

[22:16:35.0000] <nootan>
Do you guys know if browsers send the Basic HTTP Auth header when doing a fetch() request ?

[22:16:59.0000] <nootan>
XHR seems to do it, fetch does not seem to do it. I just want to know if its possible

[23:15:20.0000] <MikeSmith>
nootan: not sure what you mean. XHR doesn’t send the Authorization header automatically. It only sends it if your application code adds it

[23:16:17.0000] <MikeSmith>
though if it’s a cross-origin request, neither fetch nor XHR will send it unless the server responds to the browser CORS preflight OPTIONS request to say it’s OK to send requests that have the Authorization header

[00:21:28.0000] <nootan>
MikeSmith: Let me rephrase it. I've a nginx server setup with Basic Http Auth (which I believe looks for Authorization: Basic xxx) , I've a site setup on that server. When I perform an XMLHttpRequest to get some data, I get it, no questions asked. When I do a fetch() call and see the Network tab on my browser devtools, the server response is 401

[00:22:21.0000] <MikeSmith>
the server response to the OPTIONS request?

[00:23:21.0000] <nootan>
let me check

[00:24:12.0000] <nootan>
401

[00:25:08.0000] <nootan>
OPTIONS with Authorization header ==> 405

[00:26:43.0000] <annevk>
nootan: pass credentials:"same-origin" as second argument to the fetch() call

[00:27:26.0000] <annevk>
nootan: I plan on making that the default in https://github.com/whatwg/fetch/pull/585 but it hasn't happened yet much less landed in browsers

[00:27:38.0000] <nootan>
but that just sends the cookies, right?

[00:27:50.0000] <annevk>
nootan: nope

[00:28:26.0000] <annevk>
nootan: if it controlled just cookies I'd have named the argument cookies

[00:31:27.0000] <nootan>
annevk: from MDN: same-origin: Send cookies if the URL is on the same origin as the calling script.

[00:31:45.0000] <nootan>
because it didn't work while doing that too.

[00:32:34.0000] <nootan>
I'll give it another try

[00:34:36.0000] <annevk>
nootan: well MDN isn't the spec

[00:36:33.0000] <nootan>
annevk: thanks! It worked.

[00:37:07.0000] <nootan>
I'm sure i did try that before, I must have been looking at a different server. :/

[01:01:54.0000] <annevk>
smaug____: https://github.com/w3c/webcomponents/issues/661

[01:01:58.0000] <annevk>
smaug____: hope that helps

[01:02:32.0000] <smaug____>
thanks

[01:08:47.0000] <MikeSmith>
nootan: sorry wasn’t paying enough attention when you said it it was the same server

[01:08:57.0000] <MikeSmith>
anyway, glad annevk was around :)

[01:09:06.0000] <MikeSmith>
and glad you got it working

[01:35:26.0000] <kochi>
annevk: thanks for creating a tracker for remaining issue!

[01:35:49.0000] <kochi>
s/issue/issues/

[01:37:23.0000] <kochi>
it seems clicking on the checkbox directly edits the content... (if you have an editor bit, of course) :)

[01:37:39.0000] <annevk>
yup

[02:47:20.0000] <nootan>
thanks MikeSmith // annevk

[03:25:42.0000] <TimothyGu>
annevk: are the w3c-test commands documented anywhere?

[03:30:07.0000] <annevk>
TimothyGu: https://github.com/w3c/web-platform-tests#publication

[03:30:26.0000] <annevk>
TimothyGu: I don't think that works for anyone though, probably need to be privileged somehow

[03:31:34.0000] <TimothyGu>
annevk: I've got commit access to wpt repo if that matters?

[03:31:40.0000] <annevk>
TimothyGu: kinda sucks how WebKit gets punished a lot for following the spec, though maybe it happens less frequently than I think

[03:31:49.0000] <annevk>
TimothyGu: then it prolly works

[03:32:44.0000] <TimothyGu>
annevk: yeah that was meh

[05:10:56.0000] <tobie>
annevk: yeah :-/

[05:52:29.0000] <annevk>
zcorpan: https://github.com/w3c/web-platform-tests/pull/4966#issuecomment-327163613

[05:55:35.0000] <zcorpan>
annevk: thanks, replied.

[07:00:43.0000] <TimothyGu>
Hey all, can I get added to the @whatwg org? I don't necessarily need (or want) commit access to any repos but would be nice to have a badge on my GitHub profile ;)

[07:07:27.0000] <annevk>
sure thing

[07:08:28.0000] <TimothyGu>
annevk: thanks!

[07:13:11.0000] <SimonSapin>
Any idea why http://w3c.github.io/media-source/ has a ™ in the title?

[07:16:54.0000] <bradleymeck>
anyone know if someone is working on ES Module loader hooks ?

[07:17:38.0000] <annevk>
bradleymeck: I don't think so

[07:18:28.0000] <bradleymeck>
is there a place I could start a discussion / start use case requirements? WICG ?

[07:18:50.0000] <annevk>
bradleymeck: there's https://github.com/whatwg/html/issues/2640 and https://github.com/whatwg/loader

[07:19:13.0000] <annevk>
bradleymeck: either of those seems better than doing yet another thing

[11:56:35.0000] <TabAtkins>
foolip: What's the link to your WPT-template gist or whatever?

[11:56:41.0000] <TabAtkins>
Gonna go build something into Bikeshed with it.

[11:59:59.0000] <wanderview>
annevk: JakeA: are we sure about giving up on mixed-content in service workers? https://twitter.com/AdamRackis/status/905131845188284417

[12:03:07.0000] <TabAtkins>
wanderview: What if it's a malicious jpg that got mitm'd into an ad?

[12:03:27.0000] <wanderview>
TabAtkins: thats what mixed-content UX is there for?

[12:06:57.0000] <TabAtkins>
I was mostly being unserious. ^_^ I don't have an opinion on this or any connection to its resolution.

[12:07:09.0000] <annevk>
wanderview: I'd prefer that, it's rather complicated


2017-09-06
[00:49:53.0000] <smaug____>
blink has the some 0.x% usage limit for removing APIs

[00:50:03.0000] <smaug____>
anyone recalls what that number is

[00:50:11.0000] <smaug____>
was it something like 0.01?

[00:50:19.0000] <smaug____>
or 0.1

[00:50:33.0000] <smaug____>
foolip: ^

[00:55:15.0000] <annevk>
smaug____: 0.003 iirc

[00:55:30.0000] <annevk>
smaug____: but they use it more as an indicator of sorts these days, not as a hard line

[00:55:35.0000] <smaug____>
sure

[00:57:09.0000] <foolip>
TabAtkins: do you mean the thing I've added to lots of specs?

[00:57:40.0000] <foolip>
foolip: I pasted that in https://github.com/tabatkins/bikeshed/issues/1001, but I imagine that's not what you're asking for?

[00:58:29.0000] <foolip>
smaug____: we used to say that 0.03% was some magic limit, but we've removed mention of that from everywhere now I hope

[00:58:45.0000] <foolip>
certainly chromestatus.com no longer has a different color for things below that cutoff

[00:59:01.0000] <foolip>
smaug____: things with >1% usage have been removed, it all depends on likely breakage in the wild

[00:59:21.0000] <smaug____>
ok

[02:11:15.0000] <espadrine>
I presume NPAPI was a bit above

[02:34:16.0000] <smaug____>
annevk: how documents get destroyed isn't spec'ed anywhere, right? I mean, how the DOM tree is unraveled and so. Since internally there are operations similar to 'remove' http://w3c.github.io/webcomponents/spec/custom/#concept-node-remove but of course we don't want to call the custom element callbacks then.

[02:47:34.0000] <annevk>
smaug____: no, expectation is that is not observable

[05:29:47.0000] <TabAtkins>
foolip: No, you had a gist or codepen or something containing a template for a wpt test, that you'd start from when writing one.

[05:32:13.0000] <jgraham>
TabAtkins: http://searchfox.org/mozilla-central/source/testing/web-platform/mach_commands.py#165 might be similar to what you want

[05:37:00.0000] <foolip>
TabAtkins: ah, that was from https://docs.google.com/document/d/1LSuLWJDP02rlC9bOlidL6DzBV5kSkV5bW5Pled8HGC8/edit?usp=sharing

[05:37:24.0000] <foolip>
and https://jsbin.com/pazubak/edit?html,output is the template

[05:37:46.0000] <TabAtkins>
Excellent.

[07:04:08.0000] <zcorpan>
TabAtkins: note that the test needs to use /resources/testharness.js as the URL, unlike in that template

[07:12:31.0000] <Domenic>
smaug____: annevk: yeah that limit is not real anymore and really should stop being repeated. We have no limit; it's all case by case judgment.

[07:12:52.0000] <Domenic>
I see foolip said that too

[07:15:07.0000] <Domenic>
annevk: what do you mean by "the test (subtest two in particular) you pointed to above should also be fixed" ?

[07:16:19.0000] <annevk>
Domenic: it does an array.length assert where it equals 5 and then shortly after compares the array to another array of 4 items

[07:17:28.0000] <annevk>
Domenic: looks like that was my fault

[07:17:31.0000] <annevk>
Domenic: patch coming up

[07:18:32.0000] <Domenic>
OK. So LGTM on spec patch but will wait to see test changes as I think it'll be easier to tell what's going on there with a patch.

[07:20:26.0000] <annevk>
Domenic: you already changed the existing tests last time around

[07:20:56.0000] <Domenic>
Sure, but now we have a full rewrite, and maybe also some fix about 5 vs. 4, I'm not sure what the actual plan is anymore

[07:21:23.0000] <annevk>
Domenic: I don't understand

[07:21:51.0000] <Domenic>
So the plan is not to merge https://github.com/w3c/web-platform-tests/pull/7266 , right? Since that tests something we haven't agreed on.

[07:22:27.0000] <Domenic>
https://github.com/whatwg/html/pull/3013#issuecomment-327493192 says that's the plan, but I'm assuming it's not the plan anymore.

[07:23:19.0000] <Domenic>
Then some test (still not sure which one) has some 5 vs. 4 issue, so you're thinking about submitting a separate patch for that? Is that the new plan for testing whatwg/html#3013?

[07:23:31.0000] <Domenic>
Or do we not need to test whatwg/html#3013 at all since it was already tested way back when?

[07:23:35.0000] <annevk>
Domenic: those tests need to be reviewed, but I don't think that should block this simple bug in the HTML Standard

[07:23:59.0000] <Domenic>
Right, as I said, spec patch LGTM, but I'll wait to see what's going on with test changes.

[07:24:02.0000] <annevk>
Domenic: yeah, I don't think we necessarily need tests for this change

[07:24:20.0000] <annevk>
Domenic: I submitted a patch for the 5/4 thing

[07:24:24.0000] <annevk>
Domenic: https://github.com/w3c/web-platform-tests/pull/7267

[07:24:43.0000] <annevk>
Domenic: the assert is redundant with the assert_array_equals, which does that length check already

[07:24:52.0000] <Domenic>
Got it

[07:27:04.0000] <annevk>
If I don't forget I'll look into those tests some more tomorrow

[10:10:29.0000] <TabAtkins>
Domenic: While not real, the limit is still an okay eyeball figure, I think.

[15:59:22.0000] <MikeSmith>
TabAtkins: I'm wondering why in http://wpt.fyi/css the css-page-3 subdir doesn’t show up, despite being in https://github.com/w3c/web-platform-tests/tree/master/css/css-page-3

[15:59:45.0000] <MikeSmith>
is there something different about those tests that would cause them to not get picked up?

[16:00:01.0000] <TabAtkins>
MikeSmith: I haven't a single clue about any of that.

[16:00:03.0000] <MikeSmith>
like, those tests can’t be automated

[16:00:04.0000] <MikeSmith>
OK

[16:04:48.0000] <MikeSmith>
I guess maybe they’re print-only

[16:05:26.0000] <MikeSmith>
anyway the specific thing I was looking for is a @bottom-right test

[16:05:54.0000] <TabAtkins>
They, those tests appear to all be manual tests that you need to print and verify yourself.

[16:05:56.0000] <MikeSmith>
and looking at http://w3c-test.org/css/work-in-progress/hp/margin-boxes-012.xht it seems like it’s maybe a print-only thign

[16:05:59.0000] <MikeSmith>
yeah

[16:06:05.0000] <MikeSmith>
> This test requires 3 pages. When printed, the green box on this page should be equidistant from the blue boxes above and below it.


2017-09-07
[17:04:10.0000] <TimothyGu>
tobie, annevk, Domenic: should I just apply https://github.com/w3c/web-platform-tests/pull/7254?

[17:09:46.0000] <TimothyGu>
and https://github.com/whatwg/html/pull/2932 too

[17:56:19.0000] <GPHemsley>
wiki is once again open for business

[17:56:37.0000] <GPHemsley>
foolip, annevk, MikeSmith: ^

[17:58:02.0000] <MikeSmith>
GPHemsley: super

[19:11:51.0000] <Domenic>
TimothyGu: sorry we haven't had time for review; it's on my to-do

[19:12:12.0000] <TimothyGu>
no worries

[21:22:00.0000] <annevk>
GPHemsley: excellent! 🎉

[22:57:14.0000] <foolip>
GPHemsley: sweet, thank you!

[01:27:24.0000] <MikeSmith>
annevk: for same-origin requests, the XHR API provides no way to prevent credentials from being included, right?

[01:29:21.0000] <annevk>
MikeSmith: nope

[01:29:36.0000] <annevk>
or I suppose, you are right

[01:32:55.0000] <MikeSmith>
k

[01:34:31.0000] <MikeSmith>
annevk: another question, why does the XHR spec use the term *user credentials* https://xhr.spec.whatwg.org/#user-credentials while the Fetch spec uses just *credentials*? https://fetch.spec.whatwg.org/#credentials

[01:34:43.0000] <MikeSmith>
do those to mean the same thing?

[01:34:50.0000] <MikeSmith>
*those two

[01:35:17.0000] <annevk>
MikeSmith: yeah, XHR should probably just reference Fetch for that

[01:35:29.0000] <MikeSmith>
OK I can make a PR

[01:35:35.0000] <annevk>
thanks!

[01:36:02.0000] <MikeSmith>
but there’s another difference:

[01:36:14.0000] <MikeSmith>
Fetch says, “ are HTTP cookies, TLS client certificates, and authentication entries.

[01:36:18.0000] <MikeSmith>
oofs

[01:36:42.0000] <MikeSmith>
Fetch says, “Credentials are HTTP cookies, TLS client certificates, and authentication entries.”

[01:37:28.0000] <annevk>
Nah, just different words

[01:37:32.0000] <MikeSmith>
while XHR says, “The term user credentialsfor the purposes of this specification means cookies, HTTP authentication, and TLS client certificates.”

[01:37:40.0000] <MikeSmith>
yeah well

[01:37:49.0000] <MikeSmith>
different words are pretty important

[01:37:52.0000] <annevk>
And Fetch has the better words

[01:37:57.0000] <MikeSmith>
not sure about that

[01:38:07.0000] <MikeSmith>
technically it does of course

[01:38:21.0000] <MikeSmith>
but to a web-developer reader of the spec, maybe not

[01:39:11.0000] <annevk>
I guess we should mention HTTP authentication more explicitly somehow in https://fetch.spec.whatwg.org/#authentication-entries but otherwise I think it's fine

[01:39:21.0000] <MikeSmith>
in particular, the specific mention of *HTTP authentication* in the XHR definition is more clear to web-developer readers

[01:39:25.0000] <MikeSmith>
yeah

[01:39:28.0000] <MikeSmith>
that is all I meant

[01:39:32.0000] <MikeSmith>
I will work on it, anyway

[01:40:00.0000] <MikeSmith>
if nothing else, will add a note

[01:40:30.0000] <MikeSmith>
in practice, notes mean as much to non-implementors as the normative statements do

[01:41:57.0000] <annevk>
my main worry with notes is that I sometimes see implementors cite them as if they contain the truth

[01:42:07.0000] <MikeSmith>
yeah

[01:42:13.0000] <MikeSmith>
that is the downside

[01:42:31.0000] <MikeSmith>
and I strongly believe the specs should be optimized for implementors

[01:43:15.0000] <annevk>
but fortunately that's easier to teach than not looking at forked variants that end up higher in search results

[01:43:23.0000] <MikeSmith>
:)

[02:18:29.0000] <tobie>
TimothyGu: today's a bank holiday, here.

[04:03:41.0000] <smaug____>
jgraham: where do w3c reftests live these days?

[04:04:03.0000] <smaug____>
aha, https://github.com/w3c/web-platform-tests

[04:04:58.0000] <jgraham>
Also testing/web-platform/tests/css in m-c

[04:05:03.0000] <jgraham>
Or, therefore, rather

[04:05:30.0000] <smaug____>
hmm, I wonder if there are css tests for shadow dom

[04:05:34.0000] <smaug____>
I mean reftests

[04:05:51.0000] <jgraham>
Oh not sure, there could be but not under css probably

[04:08:06.0000] <smaug____>
kochi: perhaps you know

[04:09:18.0000] <jgraham>
smaug____: james@ginny:~/develop/web-platform-tests/shadow-dom$ rg -l 'rel=.(:?mis)?match' | wc -l

[04:09:21.0000] <jgraham>
6

[04:09:32.0000] <kochi>
what kind of css tests for shadow dom?

[04:10:07.0000] <kochi>
I guess some are covered in csswg tests (now in wpt anyway)

[04:12:16.0000] <smaug____>
kochi: just some tests ensuring that if one uses shadow dom, the layout is still correct

[04:13:30.0000] <smaug____>
like comparing layout without use of shadow dom to some page with shadow dom

[04:13:38.0000] <kochi>
hmm, the scope sounds too broad :)

[04:13:52.0000] <kochi>
ah, in shadow-dom/ directory we have several reftests

[04:13:55.0000] <smaug____>
that is very broad sure

[04:14:01.0000] <smaug____>
ah, looking

[04:15:27.0000] <smaug____>
kochi: hmm, where

[04:15:56.0000] <kochi>
Using Blink's layout test runner infrastructure, running reftests automatically compares generated PNGs so its automatic, but running it manually is tedious.

[04:16:10.0000] <smaug____>
oh, you mean in blink

[04:16:19.0000] <smaug____>
I was wondering if wpt has them too

[04:16:39.0000] <smaug____>
we do have some reftests in gecko too

[04:17:15.0000] <kochi>
I guess csswg tests are mostly reftests

[04:18:13.0000] <kochi>
you can find '*-ref.html' in shadow-dom directory.  I found 7 tests under shadow-dom/untriaged.

[04:19:19.0000] <kochi>
smaug____: Blink imports wpt in its layout test subdirectory (external/wpt), and run them as a part of commit queue.

[04:20:28.0000] <kochi>
Under "shadow-dom/untriaged" directory, we have several dozens of ancient tests.

[04:20:54.0000] <kochi>
(ancient = created in Shadow DOM V0 era, converted to use V1 API)

[04:21:25.0000] <kochi>
they test something, but their values are questionable, therefore needs triage...

[04:26:06.0000] <TimothyGu>
tobie: oh ok, I'll wait then

[04:31:27.0000] <JakeA>
annevk: Any idea what https://xhr.spec.whatwg.org/#stop-timeout-flag is for? It isn't exported, and it doesn't really seem to be used

[04:32:54.0000] <JakeA>
annevk: seems like the use of it was removed in https://github.com/whatwg/xhr/pull/133/files

[04:40:29.0000] <jgraham>
~,

[04:53:54.0000] <ondras>
validator.w3.org:

[04:53:56.0000] <ondras>
503 Service Unavailable

[04:53:58.0000] <ondras>
No server is available to handle this request.

[04:56:39.0000] <xfq>
/me MikeSmith ^

[04:56:41.0000] <xfq>
it works for me though

[04:57:43.0000] <ondras>
right, works now

[04:58:20.0000] <ondras>
checking which of these "scissor" symbols happens to be valid:

[04:58:22.0000] <ondras>
--->8---

[04:58:24.0000] <ondras>
---8<---

[04:58:36.0000] <ondras>
apparently only the first one is okay

[05:00:30.0000] <annevk>
JakeA: oversight I suppose then

[05:00:52.0000] <JakeA>
annevk: cool, I'll remove it

[05:26:21.0000] <jgraham>
https://misc0110.net/web/files/keystroke_js.pdf

[05:39:08.0000] <ondras>
jgraham: I am not sure how exactly their 6-liner works

[05:39:29.0000] <ondras>
jgraham: what exactly happens/changes when a key is pressed in an unrelated context?

[05:41:51.0000] <ondras>
hm, I may see now

[05:42:07.0000] <ondras>
they measure how many increments happened in every 5ms timeslot

[06:52:26.0000] <annevk>
zcorpan: hey while you're looking at data

[06:52:37.0000] <annevk>
zcorpan: for https://github.com/whatwg/html/issues/3005 it would be interesting to know usage of charset + cross-origin URL

[06:53:03.0000] <annevk>
zcorpan: and usage of a utf-16 charset, including utf-16le and utf-16be

[06:56:01.0000] <zcorpan>
annevk: I find two utf-16s

[06:56:11.0000] <zcorpan>
i'll comment in the issue

[06:56:52.0000] <annevk>
hmm, that's potentially bad news

[06:57:16.0000] <annevk>
thanks

[07:01:20.0000] <zcorpan>
I'll need to write a new query to get the src attribute and compare origins, but need to go. Can you remind me tomorrow?

[09:22:28.0000] <annevk>
I can

[09:23:01.0000] <annevk>
One of those results was rather sad, suggesting that treating utf-16 as utf-8 would fail, but the upside is that it was same-origin, so maybe there's still hope cross-origin

[12:32:21.0000] <Domenic>
annevk: what is "topic: javascript" as opposed to "topic: script"? seems confusing

[12:40:13.0000] <annevk>
Domenic: javascript was meant for host integration stuff

[12:40:28.0000] <annevk>
script for the script element

[12:40:39.0000] <Domenic>
I dunno that's a blurry line

[12:40:48.0000] <annevk>
guess I'm okay with merging them

[12:40:51.0000] <Domenic>
Like all module stuff is host integration too

[12:40:54.0000] <Domenic>
Ok cool

[13:25:49.0000] <TabAtkins>
gsnedders or whoever: The WPT introduction page <http://web-platform-tests.org/introduction.html> mentions how to work with the GH repo, *but doesn't actually link to the repo*.

[13:26:13.0000] <gsnedders>
hah, a+++ me

[13:26:21.0000] <gsnedders>
TabAtkins: can you throw together a PR?

[13:26:28.0000] <TabAtkins>
No, because I can't find the GH repo.

[13:26:32.0000] <gsnedders>
TabAtkins: wpt/doc

[13:26:33.0000] <gsnedders>
*docs

[13:27:03.0000] <gsnedders>
TabAtkins: i.e., in the wpt repo

[13:27:18.0000] <TabAtkins>
Which, again, I cant' find, because it's not in the docs.

[13:27:42.0000] <gsnedders>
the docs are bad :(

[13:27:47.0000] <gsnedders>
I mean they're better than they were a year ago

[13:27:52.0000] <gsnedders>
but that's not saying much

[13:27:58.0000] <TabAtkins>
JUST LINK ME TO THE REPOSITORY

[13:28:18.0000] <gsnedders>
https://github.com/w3c/web-platform-tests/blob/master/docs/introduction.md

[13:28:26.0000] <TabAtkins>
Danke. ^_^

[13:28:37.0000] <gsnedders>
I thought you could find a directory in the wpt repo :P

[13:29:39.0000] <TabAtkins>
I can find a directory, yes. Couldn't find the repository.

[13:29:49.0000] <TabAtkins>
Thus my original complaint.

[13:30:31.0000] <TabAtkins>
(At some point I definitely could have just googled for it again, but you seemed to be purposely avoiding actually telling me where the repository was, and I wanted to see how far it would go.)

[13:31:04.0000] <gsnedders>
(until you realise I'm just an idiot

[13:31:06.0000] <gsnedders>
)

[13:31:41.0000] <TabAtkins>
Correct. ^_^

[13:32:12.0000] <TabAtkins>
Your trickery (telling me about a fake "wpt/docs" repo) was really confusing me for a while.

[13:32:26.0000] <gsnedders>
/me goes back to trying to sort out an earlier screw up with more… financial consequences

[13:32:38.0000] <gsnedders>
(financial consequences are the best consequences)

[14:09:22.0000] <cantom>
I have a few questions. I notice the URL object is not recommended to be used in APIs, rather string URLs should be passed. Is there a strong reason for this? If URL was made immutable it could've saved us some reparsing between objects maybe?

[14:28:50.0000] <Domenic>
MikeSmith: sideshowbarker.net seems to not be working, causing HTML build failures, hrm https://travis-ci.org/whatwg/html/builds/272976905#L586

[14:36:53.0000] <MikeSmith>
Domenic: thanks will check and get it fixed

[14:38:33.0000] <MikeSmith>
Domenic: working again now

[14:38:47.0000] <Domenic>
Thanks!

[14:39:08.0000] <MikeSmith>
and I’ll put some kind of watchdog in place so I get alerted when it’s down

[14:39:36.0000] <MikeSmith>
I think my `certbot renew` cron job is what caused it to go down

[14:40:13.0000] <MikeSmith>
that cron job stops nginx before running `certbot renew` and then restarts it after

[14:41:00.0000] <MikeSmith>
I think I am &&’ing the `certbot renew` and nginx restart

[14:41:16.0000] <MikeSmith>
which I guess I shouldn’t be

[14:41:59.0000] <MikeSmith>
yeah

[14:42:01.0000] <MikeSmith>
> 59 22 * * * sudo /etc/init.d/nginx stop > /dev/null && /opt/workspace/letsencrypt/letsencrypt-auto -q renew > /dev/null && sudo /etc/init.d/nginx start > /dev/null

[14:42:20.0000] <MikeSmith>
that’s not so smart

[14:43:29.0000] <MikeSmith>
OK, fixed that

[15:12:29.0000] <MikeSmith>
yay the chair of the W3C Service Workers WG has now actually joined the group

[15:12:38.0000] <MikeSmith>
progress!

[15:19:28.0000] <Yuhong>
https://news.ycombinator.com/item?id=15196280

[15:25:00.0000] <Yuhong>
TabAtkins is not the only one here that has worked for Google.

[15:36:41.0000] <TabAtkins>
Fucking hell, now I'm gonna have to talk to Legal. That jackass.

[15:44:11.0000] <TabAtkins>
On the plus side, comments are surprisingly good for HN.

[15:45:24.0000] <Yuhong>
Notice the question I asked though.

[15:45:50.0000] <TabAtkins>
The one pretending this his conspiracy theory actually has some validity? Thanks for that.

[15:46:06.0000] <Yuhong>
I was making an important point.

[15:47:02.0000] <Yuhong>
"How often does random personal blog posts like this make it to the top in the first place "

[15:47:31.0000] <TabAtkins>
A lot? Especially when they're linked from the person's own blog?

[15:48:01.0000] <TabAtkins>
And several other high-Page Rank news-ish sites linked to it at one point.

[15:48:29.0000] <TabAtkins>
I'm super surprised at the longevity actually. Go look at my damn site, there's no special juicing going on. I just have a normal blog.

[15:49:08.0000] <TabAtkins>
But for serious, he's a paranoid jerk with an axe to grind. Don't feed his delusions.

[15:49:18.0000] <Yuhong>
Yea, I just edited the comment to point that out too. This post is more than one year old.

[15:49:24.0000] <astearns>
this current go-around might promote it higher. It's on my first page of duck duck go results now.

[15:50:31.0000] <Yuhong>
I don't see any other news article about it on the first page either.

[15:50:33.0000] <TabAtkins>
Yeah, every time he complains he cements it.

[15:51:04.0000] <Yuhong>
Other than the GamerGate interview.

[15:51:40.0000] <Yuhong>
Which is also more than one year old too.

[15:53:13.0000] <Yuhong>
And you are also talking about the blog article being in the third position of page one.

[15:56:23.0000] <TabAtkins>
Go look at my fucking blog and find a lick of SEO (beyond "write good markup, good content, and make it fast"). Otherwise you're accusing me of having the power and access (and complete lack of morals) to juice Search results, our company's bread and butter, the thing that we firewall from employees *precisely to avoid the possibility of this kind of thing*.

[15:57:23.0000] <Domenic>
This seems a bit off-topic; I'd appreciate if you two had the chat in private conversation?

[15:57:43.0000] <Domenic>
Yuhong, in particular, please don't use this channel as a way to just discuss other members of the channel

[15:58:58.0000] <Yuhong>
Domenic also happens to work for Google though.

[15:59:28.0000] <astearns>
I don't, and I'd also like this off the channel

[15:59:33.0000] <Domenic>
Yuhong, discussing personal characteristics of members and their employment for purposes of some flagged hackernews channel is not on topic in #whatwg. If you wish to discuss that, please do so in another channel.

[16:00:25.0000] <Yuhong>
I have joined #google

[16:12:16.0000] <MikeSmith>
annevk: https://stackoverflow.com/questions/20035101/no-access-control-allow-origin-header-is-present-on-the-requested-resource/46099357#46099357 describes an interesting case with CDNs and Access-Control-Allow-Origin getting cached across origins

[16:14:05.0000] <MikeSmith>
just getting server config alone done right for CORS seems to be pretty error-prone and problematic for a lot of developers. But from that I can see how much adding a CDN to the mix can further complicate it

[16:15:56.0000] <tantek>
it definitely feels like one of those "fragile" things where the slightest change breaks everything

[16:16:07.0000] <tantek>
CORS that is

[16:17:46.0000] <MikeSmith>
yeah there’s multiple knobs to turn

[16:18:44.0000] <MikeSmith>
including the arcane need to deal with HTTP OPTIONS, for which I think the average web dev doesn’t have a huge amount of prior knowledge

[16:19:13.0000] <tantek>
does anyone actually use HTTP OPTIONS for anything in the web stack or rather for what use-cases?

[16:19:31.0000] <MikeSmith>
dunno

[16:19:55.0000] <MikeSmith>
so I guess I am one of the people who has never had need for it other than for CORS

[16:20:59.0000] <Domenic>
TabAtkins: is there a definition for "valid CSS syntax"?

[16:21:02.0000] <Domenic>
For conformance requirements

[16:21:38.0000] <MikeSmith>
tantek: heh, quick search leads me to https://www.mnot.net/blog/2012/10/29/NO_OPTIONS

[16:22:10.0000] <cantom>
Folks, where can I get an up-to-date list of WHATWG members? And the companies they represent?

[16:22:18.0000] <MikeSmith>
> To make OPTIONS work well, you’d be forced to design your own caching model – silly when HTTP already has one.

[16:22:38.0000] <tantek>
/me checks his site code for how he supports CORS

[16:22:40.0000] <MikeSmith>
that is what CORS does (special caching model for OPTIONS)

[16:23:24.0000] <tantek>
oops no sorry I meant CSP

[16:23:38.0000] <tantek>
yeah no explicit CORS support on my site yet. just CSP

[16:24:07.0000] <tantek>
yeah one line of PHP

[16:24:30.0000] <MikeSmith>
tantek: you can do CORS with one line too

[16:24:42.0000] <MikeSmith>
and yuck btw

[16:25:21.0000] <MikeSmith>
tantek: you should be using Python https://stackoverflow.blog/2017/09/06/incredible-growth-python/

[16:25:34.0000] <tantek>
lol no I can't do CASSIS with Python

[16:26:06.0000] <MikeSmith>
no idea what CASSIS is but if you can’t do it in Python it can’t be important :)

[16:26:32.0000] <MikeSmith>
anyway, time for you to leave 1999 behind and get on the Clue Train

[16:26:40.0000] <tantek>
cassisproject.com

[16:26:45.0000] <MikeSmith>
/me looks

[16:28:14.0000] <MikeSmith>
can you not do CASSIS with node?

[16:28:32.0000] <tantek>
runs on more servers / services than node

[16:28:36.0000] <MikeSmith>
which is almost as good a python, but with lots more collateral drama for free

[16:28:39.0000] <tantek>
more webhosts = cheaper etc.

[16:29:08.0000] <MikeSmith>
OK, sold. I’m switching :)

[16:29:15.0000] <tantek>
hey I run it on my site

[16:29:28.0000] <tantek>
you can check which version directly: tantek.com/cassis.js

[16:29:50.0000] <tantek>
(literally that file is executed by both my clientside pages in JS and backend in PHP)

[16:30:11.0000] <MikeSmith>
whoah that code, my eyes my eyes

[16:30:26.0000] <Domenic>
cantom: the WHATWG is a community with no formal notion of membership. If you participate on GitHub or elsewhere, I'll be happy to consider you a member.

[16:30:34.0000] <tantek>
didn't say it was pretty. just that it works. and I only have to write it once turn in both JS and PHP

[16:30:55.0000] <tantek>
s/turn in/to run it in

[16:32:00.0000] <MikeSmith>
tantek: sorry, you haven’t been on this channel much lately so I am mostly just trying to meet my quota for trolling you :)

[16:36:35.0000] <cantom>
Domenic: that's great, but I was hoping for some overview to see which browser-making companies are involved.

[16:36:55.0000] <Domenic>
cantom: oh, all of them participate

[16:37:07.0000] <tantek>
MikeSmith: all good. I'm here a lot, just nearly completely lurking.

[16:37:33.0000] <cantom>
Domenic: let me put the question differently: who moderates, and who elects the moderators

[16:38:12.0000] <Domenic>
cantom: are you concerned with IRC, or elsewhere?

[16:38:15.0000] <tantek>
MikeSmith: your reaction is pretty tame actually, I've had friends give me the weirdest looks (in person) after hearing of the concept/goals of cassis.js and then actually looking at the code. something between horrified and disgusted.

[16:39:03.0000] <Yuhong>
I once argued about the idea of W3C using the WHATWG webdev edition as a base.

[16:39:22.0000] <Yuhong>
Remember the 2022 prediction?

[16:41:02.0000] <Yuhong>
the webdev edition would be a better fit.

[16:43:11.0000] <Yuhong>
Yea, it is a compromise, and I know that caniuse.com does a better job.

[16:43:55.0000] <cantom>
Domenic: nag the group itself

[16:44:27.0000] <Domenic>
cantom: each editor moderates their own spec.

[16:49:35.0000] <cantom>
Domenic: I see

[16:49:50.0000] <Yuhong>
https://lists.w3.org/Archives/Public/public-w3process/2014Oct/0073.html

[16:50:18.0000] <Yuhong>
"One could imagine having multiple "views" of the spec, with newer features omitted from some."

[16:50:35.0000] <Yuhong>
"In practice this isn't viable because when you add new features you often have to make pretty invasive changes to the core model, and so maintaining multiple branches becomes hellish."/

[16:50:44.0000] <Yuhong>
Why I suggested the web developer edition.

[16:51:36.0000] <cantom>
Yuhong: as a web developer I'd always go to the "real" spec because anything else is doomed to be out of date

[16:52:23.0000] <Yuhong>
Yes, but it is unlikely that what makes to the web developer spec snapshots will be particularly inaccurate.

[16:52:40.0000] <Yuhong>
It might not have some newer features of course.

[16:53:12.0000] <Yuhong>
Especially as the web developer spec lack things like implementation details.

[16:54:09.0000] <Yuhong>
So it is less complex and will likely change less often.


2017-09-08
[17:09:13.0000] <Domenic>
cantom: so, we actually generate the dev edition from the real spec these days, so that should be OK :). https://blog.whatwg.org/developers-edition-comeback

[17:10:10.0000] <Yuhong>
the point is doing snapshots based on the dev edition.

[17:11:00.0000] <cantom>
Domenic: :D

[17:11:25.0000] <cantom>
Big question. Why is the slogan of WHATWG "Please leave your sense of logic at the door, thanks!"

[17:12:23.0000] <Domenic>
Haha. It's just an IRC channel topic, but yeah, it's about how the web is designed over a long time and has no sense of logic to it sometimes

[17:12:45.0000] <Domenic>
We often say "see topic" when someone complains about some old historical thing like "why is typeof document.all 'undefined'???"

[17:13:52.0000] <cantom>
Domenic: I've been neck deep into URL, HTTP, Unicode + charsets, MIME + multipart, HTML etc. specs and I felt the slogan might refer to that :/

[17:14:07.0000] <Domenic>
lol, yep, sounds right

[17:15:00.0000] <Yuhong>
Which also reminds me of the title of https://whatwg.org/specs/url/2014-07-30/

[17:15:33.0000] <Yuhong>
Now URL is less complex and less likely to change than the main HTML spec.

[17:17:06.0000] <Yuhong>
https://github.com/whatwg/url/commits had not even an editorial commit for a month.

[17:35:48.0000] <TabAtkins>
Domenic: No, but you can require that there's no syntax errors or unrecognized constructs when using one of the parsing entry points in Syntax.

[17:36:09.0000] <Domenic>
I ended up linking to https://drafts.csswg.org/css-syntax/#conform-classes

[17:36:32.0000] <TabAtkins>
Sure.

[18:09:37.0000] <Yuhong>
And government officials are actually another good reason.

[18:10:26.0000] <Yuhong>
It should be pretty rare that a page will not work in future browsers if it confirms to a good snapshot and works in current browsers.

[00:44:30.0000] <annevk>
smaug____: what's the status of https://dvcs.w3.org/hg/speech-api/raw-file/tip/webspeechapi.html?

[00:46:47.0000] <smaug____>
implemented in some form, but the spec hasn't got much updates as you can see

[00:46:53.0000] <smaug____>
there are some open bugs, I think

[00:47:05.0000] <smaug____>
annevk: why?

[00:47:46.0000] <annevk>
smaug____: mostly want [Exposed] added to the interfaces

[00:47:52.0000] <smaug____>
Gecko has the synthesis part, and recognition API is implemented too, but I don't know recall when it is enabled. never or only when platform has the support

[00:47:56.0000] <smaug____>
ah

[00:48:11.0000] <annevk>
smaug____: and since there's not even a GitHub repo I'm wondering where I can reliably file bugs

[00:48:23.0000] <smaug____>
w3 bugzilla

[00:48:41.0000] <annevk>
smaug____: I see, but not mentioned in the spec somehow?

[00:49:27.0000] <smaug____>
aha, I see it is not mentioned there

[00:50:37.0000] <annevk>
smaug____: I filed a bug; I guess I'll file another one about mentioning Bugzilla in the spec

[00:50:54.0000] <smaug____>
annevk: curious, will you attend TPAC this year?

[00:53:03.0000] <annevk>
smaug____: I can't, if all goes well I have a second child to take care of that's a couple weeks old by then

[00:53:46.0000] <smaug____>
aha. I think I had heard that but forgot. Hopefully everything goes well.

[00:53:57.0000] <smaug____>
/me is wondering who from Mozilla will be there

[00:54:25.0000] <annevk>
smaug____: wanderview will go

[00:55:53.0000] <annevk>
There's a couple more people, but I don't remember all the names 😕

[01:27:28.0000] <smaug____>
if it wasn't in Trumpland, I'd attend.

[02:02:37.0000] <jgraham>
annevk: I guess being woken up by a new baby is better than being woken up by the SFO flights passing overhead :)

[02:04:24.0000] <annevk>
Haha

[02:04:30.0000] <annevk>
That really depends on how much sleep I've had

[02:05:12.0000] <annevk>
First six months with Oscar were rather rough

[02:07:29.0000] <jgraham>
Not being woken up at all is for sure the best option :)

[02:08:15.0000] <jgraham>
I hope that this time things are a little smoother

[02:39:52.0000] <annevk>
zcorpan: hey, where can I find tests for <source type>?

[02:41:49.0000] <annevk>
grep suggests html/semantics/embedded-content/the-img-element/

[02:44:02.0000] <annevk>
Seems someone already wrote all the tests I needed

[02:44:04.0000] <annevk>
hurray

[02:55:48.0000] <annevk>
TimothyGu: if you have the time, I'd love a pointer for this magic [[Call]] affecting inheritance stuff

[02:57:52.0000] <zcorpan>
annevk: html/semantics/embedded-content/the-img-element/update-the-source-set.html

[02:58:01.0000] <TimothyGu>
annevk: huh? what about inheritance

[03:00:06.0000] <annevk>
TimothyGu: why custom [[Call]] means there's no .call

[03:01:07.0000] <TimothyGu>
annevk: because .call is on Function.prototype, and document.all's [[Prototype]] is HTMLAllCollection.prototype

[03:01:26.0000] <TimothyGu>
and HTMLAllCollection.prototype's [[Prototype]] is Object.prototype

[03:01:36.0000] <TimothyGu>
like any other interface prototype object

[03:04:30.0000] <TimothyGu>
so -- no .call, no .bind, no .apply

[03:06:18.0000] <TimothyGu>
likewise, Object.setPrototype(function () {}, Object.prototype) doesn't have .call either

[03:07:18.0000] <inoas>
Is there a dedicated channel for discussing http1/http2 (push, preload, prefetch, preconnect, prerender; as/mime-types/crossorigin; block/async/defer)?

[03:39:57.0000] <annevk>
TimothyGu: aah right, I was confusing this with methods

[03:39:59.0000] <annevk>
TimothyGu: thanks

[03:40:33.0000] <annevk>
inoas: probably this channel

[03:40:42.0000] <annevk>
inoas: yoav ^^

[03:46:24.0000] <yoav>
hey inoas!

[03:46:34.0000] <yoav>
let's discuss :)

[03:59:51.0000] <inoas>
Well it is more questions, but not "programming details"

[04:01:17.0000] <inoas>
When a document loads, depending on the loading and the execution priority of the ressource you can use: h2 push (preload header on http2) OR preload (preload header on h2 with nopush, or <link tag with rel push) OR prefetch

[04:02:01.0000] <inoas>
I am working on some kind of CMS (with staging, revisions, translations, templates) and I want to pass the options to make this right for linked code assets instead of doing combination and/or inlining (http1 tricks)

[04:02:55.0000] <inoas>
and for the execution it can be "blocking" (no attribute), async (non-blocking, in any order) or defer (non-blocking, but in order specified)

[04:03:23.0000] <inoas>
crossorigin=anonymous needs to be setup for fonts and otherwise just for remote origins

[04:03:34.0000] <inoas>
is that "about" correct so far?

[04:05:35.0000] <inoas>
another thing: I have done some http2 tests (with localtunnel.me and a vagrant box) using 100-140 image tiles and apache2 / http2 and while there are huge gains when moving from HTTP1.1 to HTTP2 there are little gains or even losses when moving from regular loading to pushing... sure there is a header that is up to about 7kb larger (max 8kb) but that can't be the reason (testing in chrome and firefox, I have also tested with sitespeed.io (chrome))

[04:10:54.0000] <inoas>
and then another question would be: you can also "preload" domain resolve, tcp/tls handshake, links and even prerender them... aside prefetch which can also be used on pure ressources on the document itself (say which could but maybe not later used by elements loaded dynamically, say a chat window popping up), the other ones such as preconnect and prerender should be used with links (or domains for preconnect, but links would work, right?)?

[04:11:41.0000] <inoas>
so. ressources: h2 push, preload, prefetch & links: pefetch/preconnect/prerender

[04:34:10.0000] <inoas>
yoav: is that about correct?

[04:36:45.0000] <yoav>
RE "h2 push (preload header on http2)" - a preload header *may* be used as an indication for the web server to push down that resource

[04:37:01.0000] <yoav>
H2 push does not require link preload headers

[04:37:19.0000] <yoav>
and link preload headers don't mean that you're using h2 push

[04:38:14.0000] <inoas>
sure it does not require them, I am just saying there are these ways to handle ressource loading and execution priorities

[04:38:24.0000] <inoas>
h2 push, document header preload etc etc

[04:39:11.0000] <inoas>
h2 push would be via http header with a very similar semantic to document <head> <link> rel preload

[04:39:17.0000] <yoav>
"there is a header that is up to about 7kb larger" - headers this big can definitely result in slowed initial processing, as your effective initial congestion window is reduced from ~14K to ~6K

[04:39:47.0000] <inoas>
so what do you think a good header size is?

[04:39:57.0000] <inoas>
like a sweet spot? it isn't easy to answer, right?

[04:40:14.0000] <yoav>
as small as it can be

[04:40:26.0000] <yoav>
:)

[04:40:30.0000] <inoas>
well but if you want H2 Preload it has to be in the header instead of the <head>

[04:40:49.0000] <yoav>
H2 push is something that works well when your HTML has some "think time"

[04:40:57.0000] <yoav>
(so server side processing)

[04:41:38.0000] <yoav>
You can use that time to start pushing critical resources so that they will be available in the network stack once the browser got the HTML and realized that it needs them

[04:41:44.0000] <inoas>
What I consider is in the software allow to select when/how a code asset is loaded/executed: H2 Push with Fallback <head> Preload (If the maximum H2 Push header size is exceeded OR only HTTP1.1 available), then direct <head> Preload etc.

[04:41:53.0000] <yoav>
https://blog.yoav.ws/being_pushy/

[04:42:18.0000] <inoas>
It seems like using nopush in conjunction with http2 would make little sense unless you reload only very very few ressources anyway?

[04:42:31.0000] <inoas>
because the trade off (header bigger vs the client knowing earlier) isnt worth it?

[04:42:47.0000] <yoav>
preload only kicks in after the HTML started sending down to the browser (and you can use preload both in its header form as well as inside the markup)

[04:43:25.0000] <inoas>
yes but in header form it is using push on h2, unless nopush is declared, right?

[04:44:03.0000] <yoav>
I'm not a fan of using the link preload header as a push signal. You could maybe use an HTTP server which strips those headers when it pushes

[04:44:13.0000] <inoas>
so say I limit the amount of preload directives in http headers to maximum of 2kb... and then I prefer the ones without "nopush" then if still space left = the ones with nopush... if there is an overflow... <head> <link preload the rest

[04:44:30.0000] <yoav>
"yes but in header form it is using push on h2, unless nopush is declared, right?" depends on your server implementation. It doesn't have to

[04:44:50.0000] <inoas>
well I am talking about apache 2.4x or so

[04:45:18.0000] <inoas>
I cannot change to nginx or H2O

[04:45:23.0000] <inoas>
mod_http2 then

[04:45:53.0000] <yoav>
push, preload, etc are not magic dust that you can spray over your sites to make them faster

[04:46:07.0000] <yoav>
they are tools you can use to fix specific bottlenecks in your site's loading

[04:46:26.0000] <yoav>
H2 push should be used to fill in the gaps before your HTML is sent down and right after it

[04:46:28.0000] <inoas>
that's the reason I want to yield some control to setting up templates and documents in our CMS

[04:46:49.0000] <yoav>
preload should be used for critical resources that are late discovered

[04:47:00.0000] <inoas>
as far as magic dust goes. the only magic dust so far is HTTP2... just enabling it really improved performance without any pushing

[04:47:11.0000] <yoav>
preconnect can help you establish TLS connections to third party domains ahead of time

[04:47:26.0000] <inoas>
Yes I understand, they would be in say a 50kb html document, at the very bottom with async

[04:48:17.0000] <inoas>
I understood preconnect so far that it only makes sense for us if we use cdns for static assets or non-origin domain JS APIs etc

[04:48:22.0000] <yoav>
async scripts are tricky to preload, as I've seen cases where loading them earlier actually makes things slower (they run earlier, delaying more critical work)

[04:48:23.0000] <inoas>
I hope that's about correct

[04:48:49.0000] <inoas>
well the async script then needs to be aware of DOMContentLoaded?

[04:49:59.0000] <yoav>
you can just avoid preloading it, turn it into a "defer"ed script (if you don't care about e.g. IE9) https://calendar.perfplanet.com/2016/prefer-defer-over-async/

[04:50:05.0000] <yoav>
or load it dynamically

[04:50:21.0000] <yoav>
if it's not critical content, you shouldn't preload it, at least not upfront

[04:50:34.0000] <yoav>
there's no way to tell preload "this is a non-critical async script"

[04:50:38.0000] <yoav>
we probably should

[04:50:52.0000] <inoas>
Pushed responses go into this special push-only cache, and they go into the HTTP cache only when there’s an actual request for them. <= however prefetch would put things in http-cache right? (it would be about loading ressources that may or may not get used... whereas push/preload would load ressources that 99% are going to be used on the same page, "soon") ?!

[04:51:14.0000] <yoav>
as part of https://github.com/WICG/resource-priorities perhaps

[04:51:23.0000] <inoas>
tell preload + non-critical execution?

[04:51:43.0000] <inoas>
thought if I push or preload and set async true it would work!?

[04:51:58.0000] <yoav>
no

[04:52:10.0000] <yoav>
`async` is not taken into account on link elements

[04:52:21.0000] <yoav>
https://blog.yoav.ws/tale-of-four-caches/ for explanation on the different browser caches

[04:52:50.0000] <inoas>
yeah I remember push cache, memory cache, http cache or so

[04:53:00.0000] <inoas>
but it depends on the browser I suppose

[04:53:30.0000] <yoav>
yeah

[04:54:29.0000] <inoas>
if i push/preload a ressource and the browser uses it (otherwise maybe it wasnt a good idea to push it in the first place) then that is going to end in http cache (if cache headers are setup) AFAIU

[04:55:01.0000] <inoas>
the non-visible (say: below the fold and the user does not scroll) content however would eventually not be requested and thus would not enter http cache?

[04:55:35.0000] <inoas>
would it not be better if there was a flag for preload/push that says: and-also-put-it-into-http-cache?

[04:57:16.0000] <yoav>
Not sure but I think there are some security protections in the fact that pushed resources only live during the H2 session unless actually requested

[04:58:21.0000] <inoas>
Would the following semi-automated logic be okay: Setup Code Assets (JS/CSS) and Media Assets (SVG, JPG, PNG, Audio, Video) in templates/documents. While assigning them, set their Load Priority (Push or Preload, Preload, Prefetch) and their Execution Priority (Defer, Async, Blocking) as well as a natural order for loading and execution?

[05:01:37.0000] <yoav>
sounds somewhat reasonable, only that you don't necessarily have those controls today

[05:01:54.0000] <yoav>
which brings us to https://github.com/WICG/resource-priorities again...

[05:03:05.0000] <inoas>
Why don't I have those controls? What is missing?

[05:03:33.0000] <inoas>
"Even though ASYNC and DEFER don’t block the HTML parser, they can block rendering. This happens when they’re parsed and executed before rendering is complete and take over the browser main thread. <= if " if I wrap scripts with DOMContentLoaded checks would the blocking of the main thread not just be very short for async=true?

[05:13:21.0000] <inoas>
@ https://github.com/WICG/resource-priorities having relative priorities may be nice but maybe also complex because ressouces "need to know" about each other

[05:14:00.0000] <inoas>
what about supporting weight - layering in CSS is also done via this (z-index) instead of saying below-layer-a

[05:16:11.0000] <inoas>
having something like unix nice/weight/z-index means there is a defintiion of say -20 to +20 and then even remote scripts that load remote scripts can give them an execution priority?!

[05:16:13.0000] <yoav>
A few missing pieces: no way to indicate async/defer in preloaded resources, no way to indicate relative priority of resources of similar types, no way to define resources so they won't block more critical resources even if discovered before them

[05:17:34.0000] <inoas>
No way to indicate async/defer in preloaded resources <= so it is not possible to set defer (or async) attribute on the push header/preload link - and just on the tag where the ressource is requested ain't enough? Preloading should not mean pre-execution, does it?

[05:18:19.0000] <inoas>
Relative loading priority (for the same type) would be the priority in the http header / push promise or the <head> <link> order

[05:18:27.0000] <inoas>
execution order: dom order?

[05:19:32.0000] <inoas>
"no way to define resources so they won't block more critical resources even if discovered before them" I don't understand? - would it still not be wise to start implemeting things like suggested above and then just hope for the browsers to do the best. Users would not need to use push/preload, it would be an opt-in feature

[05:37:01.0000] <inoas>
I ll make a note that we should drop the preload headers after the http server processed them (right? there is no point sending them if the connection is http2)

[06:14:53.0000] <wanderview>
smaug____: annevk: marcosc is going I believe

[09:58:53.0000] <tobie>
What objects actually implement PerformanceNavigationTiming?

[13:10:43.0000] <virmaha>
Hello, when i enumerate getBoundingClientRect properties of an element, why do I get toJSON function ?

[13:57:52.0000] <Domenic>
Probably because they have a toJSON function!

[14:00:45.0000] <virmaha>
Domenic: haha but it wasn't there in previous version of chrome :p

[14:00:58.0000] <Domenic>
Probably Chrome is getting more spec-compliant :)

[14:33:29.0000] <virmaha>
Domenic: where can I find in spec

[14:33:45.0000] <virmaha>
that toJSON should be part of getBoundingClientRect

[14:41:40.0000] <tobie>
virmaha: https://github.com/w3c/fxtf-drafts/pull/220

[14:45:42.0000] <virmaha>
tobie: thanks. You are the guy who works on web IDl holy shit that's so cool :D

[14:48:55.0000] <tobie>
virmaha: there's a number of us, tbh. Currently, this behavior is specified in the spec using serializers. But we've changed that recently to use toJSON instead to make it more explicit.

[14:50:28.0000] <virmaha>
tobie: yeah but I am talking to one of them:) Also, tbh this is first time I am delving into specs so this serializers and all confuses me

[14:51:26.0000] <tobie>
virmaha: well, you were talking with Domenic earlier—he's done loads more for the WebIDL spec (and others) than I have.

[14:51:56.0000] <tobie>
virmaha: that said: serializers are super confusing, which is why we're replacing them with toJSON

[14:52:38.0000] <virmaha>
tobie: oh nice. thank you Domenic !

[14:52:40.0000] <tobie>
virmaha: they were basically a long and complex way of describing different flavors of toJSON methods

[14:53:00.0000] <virmaha>
tobie: umm if so, why did in previous version of chrome, everything worked fine? What 'serializer' did it use?

[14:53:21.0000] <tobie>
what do you mean by "worked fine"

[14:54:19.0000] <virmaha>
tobie: earlier, getBoundingClientRect didn't have toJSON. So I could easily JSON.stringify the output

[14:55:19.0000] <tobie>
virmaha: what do you mean by "easily JSON.stringify" the output?

[14:55:31.0000] <virmaha>
tobie: props = myElement.getBoundingClientRect(); for (var p in props) console.log(p);

[14:55:47.0000] <virmaha>
this never printed 'toJson' in chrome 60 but it does print toJSon in chrome 61

[14:55:56.0000] <tobie>
oh, well, now you should just pass the object itself.

[14:56:46.0000] <tobie>
virmaha: so just do: jsonString = JSON.stringify(myElement.getBoundingClientRect());

[15:00:46.0000] <virmaha>
thanks tobie!

[15:01:10.0000] <tobie>
virmaha: glad I could help

[15:02:18.0000] <virmaha>
glad I could learn from members who drive the web standards!

[15:06:31.0000] <virmaha>
err tobie , why can't I see toJSON here : https://chromium.googlesource.com/chromium/src/+/89bc0736a6c3d48eb426ffad99ff87fb6fd4e695/third_party/WebKit/Source/core/geometry/DOMRectReadOnly.idl

[15:06:52.0000] <virmaha>
that's from changelog of chrome..or am I looking at wrong file?

[15:07:31.0000] <tobie>
There's the serializer

[15:08:17.0000] <tobie>
virmaha: which now should be [Default] toJSON(); instead

[15:08:26.0000] <tobie>
virmaha: but which basically means the same thing

[15:09:37.0000] <tobie>
virmaha: see explanation here: https://github.com/w3c/fxtf-drafts/issues/200

[15:15:38.0000] <virmaha>
alright tobie. Thanks a lot.

[15:15:53.0000] <tobie>
np


2017-09-09
[09:06:36.0000] <WeirdAl>
Anyone around for me to bounce a crazy idea off of?


2017-09-11
[22:46:41.0000] <sangwhan>
I'm not entirely sure which parts of Servo made it into Gecko, so asking here.. Is this https://dxr.mozilla.org/mozilla-central/source/servo/components/script/dom/htmllinkelement.rs used by Gecko?

[00:04:14.0000] <annevk>
sangwhan: seems highly unlikely

[00:04:39.0000] <annevk>
sangwhan: for now it's text encodings and part of the style system

[00:08:49.0000] <sangwhan>
annevk: Thanks, was just checking if apple-touch-icon is whitelisted in link rel within Gecko, seems like it's dealt with on the Android platform side?

[00:25:34.0000] <TimothyGu>
annevk: we could cite https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type for a definition of UTF-16

[00:26:19.0000] <TimothyGu>
esp. when one of the refs to UTF-16 is DOMstring conversion to ES String

[00:26:27.0000] <TimothyGu>
*USVString

[00:35:43.0000] <annevk>
TimothyGu: as I said, once the real fix is in all those UTF-16 references go away

[00:35:51.0000] <annevk>
TimothyGu: so I don't think we should worry too much about it

[00:35:56.0000] <TimothyGu>
ok

[00:36:19.0000] <annevk>
sangwhan: I don't really know anything about that

[00:37:28.0000] <annevk>
sangwhan: I've at various times suggested we create some kind of icon finder algorithm in HTML that deals with all this crap once and for all, but nobody picked up on it and I haven't made the time

[00:40:49.0000] <sangwhan>
I could sit down with wireshark and see what implementations do and document that in the form of a PR if anyone has time to review it..

[00:41:53.0000] <sangwhan>
TIL: ids in implementations are weird, and also zcorpan is living proof that I can't read English

[00:44:13.0000] <zcorpan>
sangwhan: hehe. ids used to be weirder I believe

[00:45:51.0000] <sangwhan>
None of the implementations I checked seem to acknowledge or enforce the uniqueness though, and also let whitespaces through. This probably is worth fixing, but not sure at which layer

[00:46:03.0000] <annevk>
Whoa, this latest thread on whatwg@ is rather surprising to me

[00:46:39.0000] <annevk>
Third email is from someone I think I haven't seen before, but basically spot on with advice

[00:46:42.0000] <annevk>
That doesn't happen a lot

[01:07:24.0000] <annevk>
hayato: https://github.com/w3c/web-platform-tests/pull/4541#issuecomment-328285388

[01:13:04.0000] <hayato>
annevk: thanks. That looks good to me.

[02:56:24.0000] <smaug____>
Which spec might define that modifying .style modifies style attribute too...perhaps HTML

[03:00:34.0000] <smaug____>
hmm, no

[03:00:38.0000] <smaug____>
foolip: perhaps you know

[03:01:14.0000] <smaug____>
I guess https://drafts.csswg.org/cssom/#the-elementcssinlinestyle-interface

[03:02:33.0000] <foolip>
smaug____: looks like it, yeah

[03:04:59.0000] <smaug____>
foolip: I wonder if DOM attribute should be set, when one sets a declaration to its current value

[03:05:31.0000] <smaug____>
That seems to cause https://bugzilla.mozilla.org/show_bug.cgi?id=1395767

[03:14:00.0000] <nox>
"Mutating the declarations must set the style content attribute on the context object to the serialization of the declarations."

[03:15:38.0000] <smaug____>
nox: exactly

[03:15:50.0000] <smaug____>
that is vague

[03:15:55.0000] <nox>
I don't see how.

[03:16:12.0000] <smaug____>
does setting declaration to its current value mutate it?

[03:16:44.0000] <nox>
If I don't see wording that special cases that, I take it as always doing the thing.

[03:18:31.0000] <smaug____>
it is not really a special case, I think. It is more about what the word "mutate" means

[03:19:21.0000] <nox>
Setting = mutating to me.

[03:20:57.0000] <nox>
And AFAIK there would be no precedent for such a behaviour.

[03:21:10.0000] <nox>
Replacing an element by itself queues a mutation record, etc.

[03:54:32.0000] <annevk>
That sentence could be clarified, but I agree with nox's sense of what should happen

[03:55:11.0000] <annevk>
In particular it would be better if declaration mutation was a defined algorithm that ended up invoking something that updates the style content attribute

[05:18:20.0000] <gsnedders>
bah, no hsivonen

[05:26:27.0000] <jgraham>
He sent dev.platform an email not long ago, so you could try email?

[05:26:37.0000] <jgraham>
In unrelated questions

[05:27:01.0000] <jgraham>
Does a websocket connection really not make a page unsalvagable?

[05:27:16.0000] <jgraham>
How are you supposed to keep that alive in the bfcache?

[05:27:22.0000] <jgraham>
What am I missing?

[05:27:53.0000] <jgraham>
gsnedders: Oh I see.

[07:27:33.0000] <gsnedders>
jgraham: yeah, I went for #content instead

[07:38:28.0000] <gsnedders>
jgraham: and now replied to his email. was just trying to be fast before I ran out.

[12:37:52.0000] <czm>
With respect to Fetch, is the following statement from RFC 7231 Section 7.1.1.1 germane?

[12:37:54.0000] <czm>
"When a sender generates a header field that contains one or more timestamps defined as HTTP-date, the sender MUST generate those timestamps in the IMF-fixdate format."


2017-09-12
[18:24:59.0000] <cantom>
When WHATWG recommends URL over URI, does that mean the specification is just for URLs, and they don't pay attention to URIs, or does it mean that they prefer everything is called URLs.

[18:30:41.0000] <cantom>
?

[18:30:53.0000] <tantek>
what is the difference between URL and URI to you?

[19:19:02.0000] <cantom>
tantek: to me?

[19:19:14.0000] <cantom>
tantek: whatever you tell me :P

[19:19:34.0000] <cantom>
tantek: I do understand the difference, but I'm curious what's the official position of WHATWG

[19:23:32.0000] <TimothyGu>
cantom: everything should be called URLs

[19:23:45.0000] <TimothyGu>
cantom: "Standardize on the term URL. URI and IRI are just confusing. In practice a single algorithm is used for both so keeping them distinct is not helping anyone. URL also easily wins the search result popularity contest."

[19:24:05.0000] <TimothyGu>
https://url.spec.whatwg.org/#goals

[19:27:43.0000] <cantom>
TimothyGu: Thanks, thing is I quoted this exact sentence to someone and they're adamant that this means "because browsers mostly need URLs they focus on URLs, and use the same parser for URLs and URIs, doesn't mean they call all URIs URLs"

[19:28:41.0000] <TimothyGu>
cantom: uh well, that's exactly what it says "Standardize on the term URL"

[19:28:56.0000] <cantom>
TimothyGu: another thing "this is just how WHATWG deals with it internally, it doesn't mean they want anyone else not calling it URIs"

[19:29:41.0000] <cantom>
TimothyGu: I know but... Sigh.

[19:29:45.0000] <cantom>
TimothyGu: thanks.

[19:30:06.0000] <TimothyGu>
this is written in a STANDARD, not a W3C working group note or TAG guide. those latter things are "internal", but standards are public standards

[19:30:19.0000] <TimothyGu>
well, WG-NOTE isn't really internal

[19:31:04.0000] <cantom>
TimothyGu: BTW what this guy says aside, it's interesting to me that it says "this standard obsoletes the IETF RFCs"

[19:31:18.0000] <cantom>
TimothyGu: it's curious to me how one organization obsoletes the standards of another ;-)

[19:33:40.0000] <cantom>
TML, I asked Timothy Gu and Tantek Çelik, and they said this is a published standard that intends to obsolete the IETF RFCs that call it URIs, and so they want everyone to use the URLs term for all link schemes.

[19:33:55.0000] <cantom>
Oops

[19:33:58.0000] <cantom>
Wrong place.

[19:46:54.0000] <TimothyGu>
cantom: btw I don't really consider the RFCs *fully* obsoleted, just their normative requirements

[19:47:32.0000] <cantom>
TimothyGu: all right :) thanks

[19:47:50.0000] <TimothyGu>
they still have some information that's helpful, like explanations of each fields of a URL

[19:48:01.0000] <cantom>
TimothyGu: last question, is there a good test suite for URL parsing WHATWG provides (or someone)?

[19:48:06.0000] <TimothyGu>
yep

[19:48:16.0000] <TimothyGu>
https://github.com/w3c/web-platform-tests/tree/master/url

[19:48:20.0000] <cantom>
Thanks!!

[19:48:35.0000] <TimothyGu>
if you are only intersted in parsing: https://github.com/w3c/web-platform-tests/blob/master/url/urltestdata.json

[19:49:01.0000] <TimothyGu>
(the others test URL() APIs too

[19:50:33.0000] <cantom>
Beautiful, I'm so happy I asked, I was about to write this myself hehe (poorly)

[19:56:55.0000] <TimothyGu>
cantom: oh, in case you are implementing the parsing algorithm, there's an unofficial JS reference implementation at https://github.com/jsdom/whatwg-url

[19:57:47.0000] <TimothyGu>
and Node.js' implementation is kept up-to-date too, though it's written in C++: https://github.com/nodejs/node/blob/master/src/node_url.cc

[19:57:56.0000] <TimothyGu>
(grep for url::parse)

[19:58:00.0000] <cantom>
:D

[19:58:04.0000] <TimothyGu>
URL::Parse()

[02:59:04.0000] <tobie>
zcorpan: as a sidenote I'd prefer unlessViewed to notIfViewed

[03:36:35.0000] <zcorpan>
tobie: thx

[04:30:31.0000] <Ms2ger>
https://www.khronos.org/registry/webgl/specs/latest/2.0 is the very latest, right?

[04:31:17.0000] <gsnedders>
Ms2ger: well maybe something newer in the GitHub repo

[04:38:00.0000] <Ms2ger>
Ugh, apparently so

[04:38:31.0000] <gsnedders>
but idk if that actually reflects consensus in any real sense

[04:40:09.0000] <Ms2ger>
Well, does anything?

[04:41:02.0000] <Domenic>
Do we have a statement anywhere about how the web is supposed to be portable? E.g. how we don't generally expose hardware/OS capabilities directly and require feature testing to figure out what works, but instead we build a slightly higher-abstraction API that covers general situations

[04:42:27.0000] <Domenic>
Ms2ger: gsnedders: in my experience the delta from GitHub merge to publication was very low, possibly zero?

[04:43:51.0000] <annevk>
Domenic: https://www.w3.org/TR/html-design-principles/#media-independence

[04:44:39.0000] <Domenic>
That seems OKish I guess. It seems pretty small for something so foundational, and you have to squint to see how it would apply to e.g. the Notifications API

[04:45:01.0000] <Ms2ger>
Does chromium code search have blame?

[04:45:32.0000] <annevk>
Yeah, and media is a little different from platforms arguably... Maybe at some point we should redo that document and makes it apply more generally

[04:45:47.0000] <annevk>
And bring it back home to the WHATWG...

[04:51:35.0000] <gsnedders>
Ms2ger: under layers

[04:51:48.0000] <Ms2ger>
Thx

[04:52:31.0000] <Ms2ger>
> blink-reformat⊙co

[04:52:34.0000] <Ms2ger>
<.<

[04:52:36.0000] <Ms2ger>
>.>

[07:58:30.0000] <wanderview>
JakeA: service worker scripts can redirect same-origin, right?

[07:58:53.0000] <wanderview>
hmm, no... I guess it sets redirect mode to "error"

[08:05:36.0000] <JakeA>
yeah, errors

[08:06:01.0000] <wanderview>
JakeA: sorry, I should have checked the spec before pinging you

[08:06:07.0000] <JakeA>
np :D

[08:06:16.0000] <wanderview>
I wonder if we have a WPT for that

[08:42:10.0000] <wanderview>
well, at least both browsers prevent install when redirected: https://sw-script-redirect.glitch.me/

[08:47:49.0000] <wanderview>
JakeA: but I guess imports can redirect

[08:48:12.0000] <JakeA>
wanderview: yeah, they can be cross-origin too

[08:59:09.0000] <wanderview>
JakeA: I'll add a WPT test for the importScripts() redirect... I don't think we test that today

[08:59:17.0000] <wanderview>
we had a bogus assertion that path was hitting

[09:06:51.0000] <wanderview>
JakeA: btw, I think we've made the call not to ship ReadableStream in FF57... doesn't look like the remaining issues will be fixed in time

[09:19:09.0000] <JakeA>
wanderview: more important for it to be right than early imo

[09:19:43.0000] <wanderview>
well, it definitely won't be "early" :-)

[09:28:03.0000] <JakeA>
In specs: If I'm going to resolve a promise with an object, say a Request, do I need to queue a task before creating that object?

[09:29:46.0000] <wanderview>
JakeA: are you already on the js thread?

[09:29:50.0000] <Mek>
JakeA: if you use the shorthands from https://www.w3.org/2001/tag/doc/promises-guide#shorthand-manipulating, then "If the algorithm using these shorthands is running in parallel, the shorthands queue a task on p’s relevant settings object’s responsible event loop to call the stored function."

[09:29:57.0000] <Mek>
but that doesn't help with creating the Request itself of course...

[09:30:29.0000] <Mek>
well, "resolve with a newly created X object" should be fine, while "1) create a new Request object, 2) resolve with that object" wouldn't

[09:30:49.0000] <Mek>
or maybe not

[09:33:30.0000] <JakeA>
Mek: Makes sense, cheers. I guess if I need two steps I could propose something like "Resolve p with the result of these steps:"

[10:56:46.0000] <jyasskin>
Did the delegatesFocus flag (mentioned in https://developers.google.com/web/fundamentals/architecture/building-components/shadowdom#focus but not in DOM) get replaced by anything, or is it just gone?

[11:06:43.0000] <jyasskin>
(I don't need to use it; I'm reviewing a spec that propagates it from one place to another.)

[12:57:05.0000] <jyasskin>
Has there been any movement on declaratively attaching a shadow tree to an element? Someone gave me a proposal to attach <template shadowmode="..."> as its parent's shadow root, but if there's another live proposal I'll encourage them to use that instead.

[12:57:16.0000] <jyasskin>
Domenic: ^?

[13:42:30.0000] <TabAtkins>
jyasskin: None yet, but I *really really really* want it.

[13:47:24.0000] <Domenic>
jyasskin: I think delegatesFocus is still in shadow DOM, not yet moved over.

[13:48:18.0000] <Domenic>
Declarative shadow DOM is just <script>el.attachShadow(...)</script> :) https://github.com/w3c/webcomponents/issues/657#issuecomment-324417136

[13:48:51.0000] <TabAtkins>
Domenic: Boooooooo

[13:51:10.0000] <TabAtkins>
In particular, big "booooooo" because that breaks syntax highlighting, and doesn't work well with anything that expects to be able to output HTML.  You can't include a <script> inside the shadow without remembering to do the string tricks to avoid a literal `</script>` showing up in the string. Etc.

[13:51:16.0000] <TabAtkins>
It's not a good answer. :(

[13:52:43.0000] <jarek>
What about allowing Shadow DOM on SVG elements?

[13:52:50.0000] <TabAtkins>
What about them?

[13:52:57.0000] <jarek>
This used to be in the v0 spec, but was removed in v1

[13:53:20.0000] <jarek>
IMHO features that were previously implemented by user agents should have the highest priority

[13:53:44.0000] <TabAtkins>
The v0-to-v1 removals were mostly about getting something that Safari and others would actually implement.

[13:54:03.0000] <TabAtkins>
v0 was implemented a single user agent (Chrome), so the plural isn't accurate. ^_^

[13:54:13.0000] <TabAtkins>
(That said, Shadow DOM should absolutely work on SVG.)

[13:54:35.0000] <jarek>
TabAtkins: Chrome, Opera, Electron, NW.js, the list goes on...

[13:54:49.0000] <TabAtkins>
Those aren't separate user agents for this purpose.

[13:54:59.0000] <TabAtkins>
They're all "things using Blink", which is what implemented it.

[13:56:58.0000] <jyasskin>
Domenic: https://w3c.github.io/webcomponents/spec/shadow/ is in really bad shape. For example, it refers to delegatesFocus without defining it.

[13:57:07.0000] <Domenic>
Indeed :(

[13:57:19.0000] <jarek>
So, are custom SVG elements a dead end like HTML imports?

[13:58:03.0000] <jyasskin>
Domenic: <script>el.attachShadow(...)</script> doesn't work in sandboxed code (which is how we handle MHTML), and doesn't seem like it'd play well with CSP either.

[13:58:15.0000] <Domenic>
Use nonces

[13:58:53.0000] <jyasskin>
Well, my real use case is MHTML, which disallows script, so ...

[13:58:55.0000] <TabAtkins>
Domenic: Deeper and deeper...

[14:00:15.0000] <TabAtkins>
"I'd like to just put this subtree into the shadow DOM for an element. / Use script, it's simple. / This causes X, Y, and Z problems. / Here's workarounds for each of those problems; oh yeah, and some of them require you to use crypto safely."

[14:00:56.0000] <wanderview>
/me notices work is more pleasant with the twitter tab closed.

[14:02:40.0000] <Domenic>
Wow, this is a bold proposed change... https://s.codepen.io/cssgrid/debug/50554e6ae6f9a57e5d566b73edcbca37

[14:02:46.0000] <Domenic>
Maybe it is time to shake things up a bit though

[14:04:52.0000] <TabAtkins>
Oh gosh, I really like it to (everything except the GitHub font; it's jarring surrounded by the normal-text buttons around it).

[14:06:50.0000] <Domenic>
https://github.com/whatwg/whatwg.org/pull/90 for encouragement to the author :)

[14:10:54.0000] <inoas>
TabAtkins: would you say a declarative (markup) approach to creating shadow dom roots is missing?

[14:11:49.0000] <TabAtkins>
Yes, definitely.  Something like what jyasskin said - `<div><template shadow-mode="open">...</template></div>` to add the template contents to the div as a shadow root would be great.

[14:12:38.0000] <inoas>
I am not nitpicky on the syntax but anything that is xhtml5-polyglot compatible and does not require a script block would be <3

[14:13:02.0000] <inoas>
(or any other kind of inline js)

[14:13:34.0000] <jyasskin>
inoas: Why can't you use inline js?

[14:13:37.0000] <TabAtkins>
We long ago abandoned polyglot as a goal, so I dont' care about that, but yeah, inline scripting has so many frustrating downsides.

[14:13:59.0000] <TabAtkins>
jyasskin: *Can* use it isn't the question.  *Want to* use it is, because of the reasons I gave above.

[14:14:22.0000] <inoas>
TabAtkins: well as long as you do not force people to use non-closing tags, stand-alone attributes its ok

[14:14:43.0000] <inoas>
we are still validating against xml wellformdness and it makes things lots easier

[14:14:57.0000] <inoas>
but thats beside the point, being tag based/declarative <3

[14:15:05.0000] <jyasskin>
TabAtkins: That's enough for me, but the more "can't"s we can find, the more likely we are to convince Domenic and rniwa.

[14:16:23.0000] <inoas>
the reason for us is that we can use it for sand-boxing css and we can forbid javascript to certain users but allow shadow doms for css

[14:16:51.0000] <inoas>
(other users than can build javascript that attaches on the same shadow dom)

[14:17:40.0000] <jyasskin>
Do you forbid JS to some-authors-but-not-others with a build step or something the browser enforces?

[14:18:34.0000] <inoas>
different privileges in our software

[14:19:05.0000] <inoas>
writing to the database, building documents/assets off that

[14:20:23.0000] <jyasskin>
inoas: 'k, thanks.

[14:23:06.0000] <inoas>
jyasskin: what's your use case?

[14:29:24.0000] <jyasskin>
inoas: Chrome supports saving MHTML snapshots of loaded web pages, but because of historical bugs, when those snapshots are loaded, they're not allowed to run script. If the web page had some shadow dom, how do we serialize it?

[14:30:29.0000] <jyasskin>
https://crbug.com/330663

[14:31:59.0000] <inoas>
so implementors using declarative shadow dom would allow serialization into mhtml snapshots?

[14:35:37.0000] <jyasskin>
inoas: Yeah, the implementation would write declarative shadow dom into the snapshot. This still works if we only allow declarative shadow dom during MHTML loads.

[15:17:29.0000] <TabAtkins>
jyasskin, inoas: https://github.com/whatwg/dom/issues/510

[15:36:09.0000] <Domenic>
TabAtkins: nonces are not related to crypto

[15:36:52.0000] <TabAtkins>
It's 100% related to crypto? You have to send an unguessable nonce.

[15:36:53.0000] <jyasskin>
Yeah, although they're a security feature that's hard to get right. e.g. No static HTML page can safely include a nonce.

[15:37:22.0000] <jyasskin>
TabAtkins: There's no encryption involved. There's a random number generator, but that's easier than crypto.

[15:37:53.0000] <TabAtkins>
Okay, sure, you could just use randomness.

[15:38:02.0000] <TabAtkins>
But randomness is crypto. ^_^

[15:41:05.0000] <TabAtkins>
But yeah, point is that authors can't reliably use nonces anyway (thus why Ian designed <iframe srcdoc> the way he did, rather than a <sandbox> element with nonces to mark the start/end), and they *require* server-side dynamic pages.

[15:44:51.0000] <MikeSmith>
TimothyGu: about https://github.com/whatwg/html/pull/3031 thing, thanks for caring enough about this (non-implementation-requirements) to take time to review and comment

[15:45:26.0000] <MikeSmith>
in hindsight, I realize your comment about “Nothing” being technically correct, that was spot on

[15:46:22.0000] <MikeSmith>
you were right, I was wrong to think we shouldn’t make it clear there (even for author/developer readers)

[15:47:22.0000] <MikeSmith>
it’s just messy to try figure out how to clearly explain the template case, as far as authoring/document-conformance requirements

[15:47:50.0000] <MikeSmith>
I mean, to explain it without making it even more complicated and confusing to read about

[15:49:05.0000] <MikeSmith>
it’s a pulling-threads case, where I find that the more details I consider including there, the more other explanation that requires pulling in

[15:49:56.0000] <MikeSmith>
anyway, I think (hope) we are getting close to the sweet spot, in the review iterations in https://github.com/whatwg/html/pull/3031


2017-09-13
[19:07:53.0000] <Domenic>
TabAtkins: I think Bikeshed updates have broken things

[19:08:01.0000] <Domenic>
CI is failing for infra and console with 400 bad request

[20:10:55.0000] <TabAtkins>
Weird! Will check as soon as I get in tomorrow, sorry for the inconvenience.

[01:53:09.0000] <kochi>
I'm trying to run bikeshed locally on Linux, against whatwg dom spec:

[01:53:20.0000] <kochi>
FATAL ERROR: IDL SYNTAX ERROR LINE: 3 - skipped: "attribute [TreatNullAs=EmptyString] DOMString data"

[01:54:57.0000] <Ms2ger>
Have you tried updating?

[01:55:08.0000] <kochi>
This seems to be for  CharacterData.data

[01:55:26.0000] <kochi>
Ms2ger: do you mean "bikeshed update"

[01:55:27.0000] <kochi>
?

[01:55:32.0000] <Ms2ger>
I think so

[01:55:42.0000] <kochi>
trying...

[01:55:52.0000] <Ms2ger>
/me hasn't used bikeshed for a while

[01:56:14.0000] <kochi>
I once used, but me neither

[01:56:39.0000] <kochi>
"bikeshed update" doesn't help :(

[02:05:28.0000] <sangwhan>
If you pip install -e'ed it, think git pull in the local bikeshed checkout should do

[02:05:52.0000] <sangwhan>
Oh right, that won't fix the references, only the source..

[03:11:43.0000] <annevk>
Redesign of whatwg.org home page, if you care comment here: https://github.com/whatwg/whatwg.org/pull/90

[03:13:02.0000] <jgraham>
Is emailing Hixie really still a thing?

[03:13:14.0000] <jgraham>
I should comment on the bug…

[03:14:44.0000] <annevk>
jgraham: yeah it is, but I don't think he gets many media requests if at all

[03:24:28.0000] <kochi>
will retry if bikeshed is not up-to-date.

[03:25:47.0000] <kochi>
^^ will retry fresh reinstall bikeshed, and do all over again.

[03:55:13.0000] <kochi>
hmm, got another python error - which might be python version thing.  I'll try on Mac next...

[07:15:11.0000] <annevk>
kochi: FWIW, for delegatesFocus wouldn't we want to define that in HTML as an extension of sorts?

[07:15:29.0000] <annevk>
kochi: I guess it doesn't matter much, but DOM wouldn't really define behavior for it, seems weird to just define the API

[07:15:54.0000] <annevk>
kochi: as for bikeshed errors, you can just create a PR

[07:16:16.0000] <annevk>
kochi: that should create a preview for you (will be added as a link in the first comment of the PR after some time)

[07:17:28.0000] <deyomax>
Can I read someone why the WHATWG URL API chose terms like "url.search" "url.hash" instead of "url.query" and "url.fragment"?

[07:18:34.0000] <kochi>
annevk: I thought I would add a "delegatesFocus" in ShadowRootInit IDL (in DOM), and refer to it in HTML - but defining it as "partial interface ShadowRootInit { ... }" in HTML also work?

[07:21:06.0000] <kochi>
annevk: as to "FATAL ERROR: IDL SYNTAX ERROR ..." I might have used bikeshed that I installed long time ago, and I'm not able to reproduce so I'll retry in fresh environment.

[07:30:06.0000] <annevk>
deyomax: seemed better to stick with terms that were already used for Location and <a>/<area>

[07:30:23.0000] <annevk>
kochi: yeah, partial should work

[07:30:54.0000] <deyomax>
annevk: I see. But it's a bit odd when the spec seemingly has two minds about it "the url.hash contains the URL fragment"

[07:31:05.0000] <deyomax>
annevk: it's referred to as a fragment :)

[07:31:50.0000] <annevk>
deyomax: that's true, I wasn't really brave enough to deviate from the RFC terminology for the underlying concepts

[07:32:39.0000] <annevk>
deyomax: but they're also subtly different so it seems okay

[07:32:52.0000] <annevk>
deyomax: protocol always has a ":" for instance, but scheme doesn't

[07:38:53.0000] <deyomax>
annevk: interesting

[07:39:18.0000] <deyomax>
annevk: thank you

[07:39:53.0000] <deyomax>
annevk: btw does WHATWG see the "everything is URL" as a purely WHATWG internal terminology, or as something they wish the world used at large?

[07:42:04.0000] <annevk>
deyomax: the latter

[07:42:26.0000] <gsnedders>
(though it's largely just reflecting current usage, so not so much a wish)

[07:44:00.0000] <deyomax>
Thanks folks!

[08:05:36.0000] <annevk>
JakeA: should I look at the Fetch patch again tomorrow or are you waiting for Domenic?

[08:19:15.0000] <deyomax>
annevk: there's something that's bothered me a little about URL, it parses "data:text/plain,foo?bar#baz" as path "text/plain,foo" search "?bar" and hash "#baz" but then when data URL is decoded the entirety of this content is taken into account "foo?bar#baz". IETF says this with non-hierarchical URLs, the path is the entire thing without the scheme, ie. "text/plain,foo?bar#baz".

[08:20:20.0000] <deyomax>
annevk: now one might think "easy, just recombine the parts before you parse" but that also doesn't work because in the following data URL:  "data:,x?#" the search and hash fields are empty, so the reconstructed content would be ",x" instead of ",x?#"

[08:20:41.0000] <deyomax>
I'm curious what you think :)

[08:26:30.0000] <JakeA>
annevk: it's ready for anyone to review afaik. Sorry it's gotten to vast & tough to go through

[10:37:06.0000] <TabAtkins>
Domenic: Fix applied to stop DOM/etc from dying. (All the WHATWG specs, because they all use the Complain About metadata, which is what was breaking. I'm adding tests for that now.)

[11:05:40.0000] <annevk>
deyomax: https://github.com/whatwg/fetch/pull/579

[11:06:02.0000] <annevk>
deyomax: in particular fragments are not part of the content, not even in the IETF RFCs

[11:06:24.0000] <deyomax>
annevk: this doesn't match real-world behavior in any browser though

[11:06:35.0000] <annevk>
deyomax: and although hard to reproduce with the API other than looking at the serialization, the internal representation does store the nuance of ? being present or not

[11:06:42.0000] <annevk>
deyomax: sounds like you didn't test in all browsers

[11:07:21.0000] <annevk>
deyomax: and same for #; there was some hasSearch/hasHash idea, but it hasn't happened yet, I still think it might be worthwhile to add at some point

[11:08:05.0000] <annevk>
JakeA: okay, will go through again tomorrow (and yeah, the patch is a little daunting at this point, but not sure what can be done about that)

[11:10:48.0000] <deyomax>
annevk: well storing it internally is not helpful when it's not exposed :P

[11:13:42.0000] <deyomax>
annevk: well I'm not even more confused. Firefox ignores the fragment, Chrome doesn't. In Edge it's hard to test. And MDN says "nothing interrupts the data stream" implying also fragment

[11:13:46.0000] <deyomax>
now*

[11:20:42.0000] <deyomax>
annevk: the IETF RFC doesn't seem clear what happens with # in the data segment. It says "data is urlchar from RFC 2396" and that RFC has no such term anywhere

[11:21:26.0000] <deyomax>
Ah it's called "uric", ok.

[11:21:54.0000] <annevk>
Hopefully someone else can help, back tomorrow

[11:21:59.0000] <deyomax>
Doesn't include ? and #, but also that's not an up-to-date RFC for URIs

[11:22:10.0000] <deyomax>
:(

[11:22:13.0000] <deyomax>
Goodbye

[11:32:08.0000] <deyomax>
So now I don't even know if "data:" URL must respect the fragment or not.

[14:07:25.0000] <MikeSmith>
beverloo: about the behavior at https://stackoverflow.com/questions/37991514/notification-api-always-returnning-denied-chrome/37991695#37991695, is that documented anywhere?

[14:10:33.0000] <MikeSmith>
beverloo: I mean specifically, “Notification permission is silently denied from file:// URLs.

[14:12:27.0000] <MikeSmith>
beverloo: that assertion seems to be true, in that I find I can observe the same behavior with any simple notifications case I try to load as file:// locaally

[14:13:58.0000] <MikeSmith>
but I can’t find anywhere this is documented for Chrome, nor can I understand what the rationale might be for not logging some error to the console in that case, and instead just “silently” failing it

[14:30:07.0000] <deyomax>
MikeSmith: one thing I've learned about browsers and the web is that not even half of what we use every day is standardized and documented

[14:34:04.0000] <MikeSmith>
deyomax: see the last part of the channel topic :)

[14:34:40.0000] <MikeSmith>
if you want logic and consistency, you won’t get that from the web runtime

[14:37:30.0000] <deyomax>
MikeSmith: it's quite fascinating it still works though

[14:42:02.0000] <MikeSmith>
deyomax: indeed

[14:42:27.0000] <MikeSmith>
kind of amazing

[14:42:44.0000] <MikeSmith>
anyway, I think the Servo project is proof that we are getting better

[14:42:57.0000] <MikeSmith>
as far as having more of it standardized and documented

[14:44:02.0000] <MikeSmith>
because 10 years writing a new browser engine would not have been possible without reverse-engineering all over the place

[14:45:01.0000] <MikeSmith>
because back then, entire giant swathes of what browser engines were doing was still completely undocumented, unspecified

[14:45:07.0000] <deyomax>
MikeSmith: isn't Servo written by people who are quite familiar with browser engines?

[14:45:12.0000] <MikeSmith>
sure

[14:45:21.0000] <MikeSmith>
but they are working from specs

[14:45:27.0000] <deyomax>
Are they :)?

[14:45:32.0000] <MikeSmith>
hah

[14:45:34.0000] <MikeSmith>
good quesiton

[14:45:37.0000] <deyomax>
Maybe to some degree, but...

[14:45:56.0000] <MikeSmith>
well you can ask nox to how much degree

[14:46:20.0000] <deyomax>
There are so many things undocumented. Say it's not documented ANYWHERE I could find, how does a server determine if a form field is a file or not a file. And especially if it's a file field... but left empty

[14:46:20.0000] <MikeSmith>
but I know their M.O. is to work from specs

[14:46:37.0000] <MikeSmith>
dunno about that particular one

[14:46:40.0000] <nox>
We are.

[14:47:23.0000] <gsnedders>
there's also plenty of people around Servo with no background in browsers

[14:47:24.0000] <MikeSmith>
deyomax: there you go. from god’s lips to your ears

[14:47:50.0000] <MikeSmith>
that’s both jesus and the holy ghost speaking to you

[14:47:51.0000] <deyomax>
And what I kept finding is browser bugs being filed when a given engine accidentally has a regression bug related to file fields. Where the browser would change something, follow spec, but break half the servers out there.

[14:48:18.0000] <deyomax>
Say Firefox for the last 12 or so years keeps regressing the file upload functionality every 4-5 years, releases a broken build and then they fix it

[14:48:28.0000] <deyomax>
Because it's not documented anywhere.

[14:48:39.0000] <deyomax>
It's kind of funny :)

[14:49:00.0000] <MikeSmith>
yeah, laugh to keep from crying

[14:49:35.0000] <MikeSmith>
deyomax: anyway about specific question like, “how does a server determine if a form field is a file or not a file?”, please raise spec issues at https://github.com/whatwg/html/

[14:49:53.0000] <MikeSmith>
best case by doing that, you find out you are wrong

[14:50:09.0000] <MikeSmith>
I mean, somebody replies to put out that in fact it is documented

[14:50:13.0000] <MikeSmith>
specified

[14:50:39.0000] <MikeSmith>
even though often the spec for it may be arcane and hard to follow unless you are actually implementing it

[14:50:58.0000] <MikeSmith>
and worst case, somebody replies to say, you’re right, we need to document that

[14:51:06.0000] <MikeSmith>
so it is win-win

[14:51:27.0000] <MikeSmith>
*we need to specify that

[14:51:57.0000] <MikeSmith>
well you know what I mean in this context, as far a *documenting* vs *specifying*

[14:52:34.0000] <MikeSmith>
I mean because for features that are already implemented, those two words amount to the same thing

[14:53:28.0000] <MikeSmith>
anyway, on today’s good-news report, about my notifications question, I did find where it’s “documented”

[14:53:36.0000] <MikeSmith>
for a different definition of that word

[14:53:48.0000] <MikeSmith>
https://chromium.googlesource.com/chromium/src/+/master/third_party/WebKit/Source/modules/notifications/Notification.cpp#378

[14:53:59.0000] <MikeSmith>
String Notification::permission(ExecutionContext* context) {

[14:53:59.0000] <MikeSmith>
  // Permission is always denied for insecure contexts. Skip the sync IPC call.

[14:53:59.0000] <MikeSmith>
  if (!context->IsSecureContext())

[14:53:59.0000] <MikeSmith>
    return PermissionString(mojom::blink::PermissionStatus::DENIED);

[15:08:02.0000] <deyomax>
MikeSmith: filed an issue https://github.com/whatwg/html/issues/3040

[15:09:01.0000] <deyomax>
MikeSmith: ah yeah, documented in source :P the most reliable documentation

[15:09:18.0000] <MikeSmith>
deyomax: thanks for raising that issue

[15:09:38.0000] <MikeSmith>
you’re a good citizen

[15:09:41.0000] <deyomax>
As the old joke goes "the software works as d̶o̶c̶u̶m̶e̶n̶t̶e̶d̶  implemented"

[15:10:51.0000] <MikeSmith>
heh

[15:17:16.0000] <nox>
deyomax: Yeah never worked on a browser before working on Servo.

[15:17:54.0000] <deyomax>
nox: how easy to you find it to understand the specs and then understand the *exceptions* to the specs after some real website testing ;-)?

[15:18:26.0000] <nox>
deyomax: We file issues and let specs people sort it out with other UA makers, and often participate to the discussions ourselves.

[15:19:27.0000] <nox>
deyomax: AFAIK we are in a way better place than years ago.

[15:19:52.0000] <deyomax>
You know, I don't understand why W3C couldn't achieve what WHATWG is achieving. I thought the major UA makers participate in W3C - it's the same people no? Mostly?

[15:20:33.0000] <deyomax>
Is it just the reduced formality of it? The GitHub environment?

[15:21:06.0000] <nox>
I don't know and to be honest, I don't really care, as long as what we are doing now is working.

[15:27:22.0000] <jyasskin>
MikeSmith: Your Notifications/file: thing is probably https://github.com/whatwg/notifications/issues/93 then.

[15:27:43.0000] <MikeSmith>
jyasskin: looking now

[15:27:56.0000] <MikeSmith>
so yeah I think so at first too

[15:28:15.0000] <MikeSmith>
but the thing is, this has been the behavior since before beverloo made the change about

[15:28:26.0000] <MikeSmith>
I misspoke a bit here earler

[15:28:28.0000] <MikeSmith>
*earlier

[15:29:00.0000] <MikeSmith>
that code I cited is the current code in the trunk

[15:29:20.0000] <MikeSmith>
but this behavior was happening before beverloo added that code

[15:29:37.0000] <MikeSmith>
like, in Chrome 60 and before

[15:29:52.0000] <jyasskin>
Mm, so it was blocked on files (maybe all unique origins?) before the secure-context restriction was added.

[15:29:57.0000] <MikeSmith>
right

[15:29:58.0000] <MikeSmith>
yup

[15:30:03.0000] <MikeSmith>
as far as I can see

[15:31:07.0000] <MikeSmith>
but am still investigating and testing

[15:32:41.0000] <jyasskin>
Still, restricting to secure contexts is probably the right spec fix to cover that, even if the sin was older.

[15:53:49.0000] <MikeSmith>
jyasskin: yes

[15:56:05.0000] <MikeSmith>
but as far as the behavior I’m seeing for this file:// case, I actually get back the permission string "granted" from Notification.requestPermission()

[15:57:21.0000] <MikeSmith>
and then if I call new Notification(), I do get a Notification object back without Chrome throwing

[15:57:45.0000] <MikeSmith>
but the actual notification is never shown

[16:40:56.0000] <gsnedders>
deyomax: politics. some of it politics 13 years ago.

[16:47:28.0000] <deyomax>
MikeSmith: remember you said "either you'll learn it's in the spec, or help improve the spec"

[16:47:56.0000] <deyomax>
MikeSmith: unfortunately there's a third option "WHATWG worker will point to an irrelevant part of the spec, and say it's covered by the spec" :P

[16:50:40.0000] <Domenic>
Gee, thanks

[16:50:53.0000] <Domenic>
Probably I should have just ignored the issue

[16:51:00.0000] <Domenic>
Instead of trying to help you

[16:59:54.0000] <deyomax>
Domenic: you're not helping me, you're preventing me from helping improve the WHATWG  spec :P


2017-09-14
[17:00:14.0000] <Domenic>
Yeah, I'm done replying to you.

[17:00:19.0000] <Domenic>
(here and on thread)

[17:00:34.0000] <deyomax>
Domenic: that's not very professional.

[17:01:24.0000] <deyomax>
Domenic: I personally don't have a problem, I've documented this in my codebase, it's not for me that I filed this issue.

[17:05:47.0000] <deyomax>
I'm starting to understand Daniel Stenberg's annoyance, Domenic https://github.com/whatwg/url/issues/118#issuecomment-217866196

[17:10:40.0000] <jyasskin>
deyomax: Professionalism doesn't mean someone owes you unlimited amounts of time.

[17:11:06.0000] <deyomax>
jyasskin: I didn't need any of his time.

[17:11:25.0000] <deyomax>
But currently the conclusion on this thread on GitHub is misleading.

[17:14:24.0000] <deyomax>
¯\_(ツ)_/¯

[18:26:16.0000] <Domenic>
I wonder why inside <picture>, <source> is only allowed to have srcset, not src.

[20:08:31.0000] <jyasskin>
MikeSmith: That sounds like definitely a bug in Chrome.

[20:16:49.0000] <domfarolino>
Hm am I missing something? The MutationObserver.observe function has an optional MutationObserverInit object, yet when you leave it out the console yells at you and can't execute the function

[20:19:21.0000] <MikeSmith>
jyasskin: yeah I’m doing some crude hacking on sources now to see if I can isolate where it actually errors

[20:19:38.0000] <MikeSmith>
and lord why does it take Chromium so long to link

[20:20:20.0000] <MikeSmith>
after a one-line change, 5.5 minutes to 6 minutes mostly just spent linking

[20:29:50.0000] <Domenic>
domfarolino: so this is an instance where Web IDL is not expressive enough (currently). A dictionary with no required members must be marked optional per Web IDL. MutationObserverInit has no required members... technically. At least one member must be present, but no single member is marked as required (i.e. always required).

[21:00:49.0000] <domfarolino>
Domenic: ahh ok. Interesting. Thanks for that. So the logic of the API requires at least one to be present, but since we don't actually need any one of these to be "required"...we see a little oddity?

[21:00:58.0000] <Domenic>
Yeah

[21:01:55.0000] <Domenic>
People have suggested not requiring that such dictionaries be marked optional, but my opinion is that hurts the 99% case

[21:02:21.0000] <Domenic>
(i.e. dictionaries with no formally-required members really should be marked optional, and it's best if tools complain about that if you forget)

[21:03:44.0000] <domfarolino>
Domenic: Gotcha. Hm so is there presently work being done on WebIDL to get around this (you alluded to this with "currently"?). Like expressing in the logic of an API that even though there are no required members, there are requirements present that must mandate its presence anyways?

[21:04:34.0000] <Domenic>
Not really, just debate about maybe removing the requirement about optional. I think it's so small of a case and it's really about confusing documentation, not confusing processing model, so it's IMO not worth it

[21:13:01.0000] <domfarolino>
Domenic: Ok that makes sense. Yeah I assume if we forced dictionaries with no formally-required members to be not optional that would probably what, lead to a bunch of apis looking like this: `something('somethingElse', {})` all the time?

[21:13:23.0000] <domfarolino>
where we'd rather not pass in that empty object or something? (when it has to members)

[21:13:41.0000] <Domenic>
Maybe not a bunch, but some, where the spec editors didn't realize their mistake and roaming reviewers didn't stop by to correct them, yeah.

[21:15:40.0000] <domfarolino>
Ah yes.

[21:24:14.0000] <domfarolino>
Is there a reason there is not a mutation-observer directory in wpt? Has nobody gotten to it yet or something?

[21:24:51.0000] <Domenic>
It'd be under dom

[21:30:47.0000] <domfarolino>
ah

[21:34:37.0000] <MikeSmith>
is foreign fetch dead?

[21:35:57.0000] <MikeSmith>
specifically is https://github.com/w3c/ServiceWorker/issues/1188 basically already decided?

[21:53:46.0000] <Domenic>
That is my impression, just from reading public stuff

[22:06:38.0000] <MikeSmith>
OK

[23:54:49.0000] <annevk>
MikeSmith: yup, is dead

[23:55:55.0000] <annevk>
MikeSmith: is not compatible with double keying cookies and storage, which browsers don't all do now, but would be better so is a goal

[00:26:14.0000] <zcorpan>
Anyone want to review https://github.com/w3c/web-platform-tests/pull/6982 Update IDL tests for CSSOM and CSSOM View

[00:35:15.0000] <MikeSmith>
annevk: thanks

[00:36:07.0000] <MikeSmith>
annevk: so, given that though, it seems there is the matter of open browser implementation bugs to at least post comments to

[00:36:14.0000] <MikeSmith>
e.g., the Chrome feature bug for it

[00:37:02.0000] <MikeSmith>
not sure if there are also bugs for other UAs that have been opened, but I know there’s at least the Chrome one

[00:50:11.0000] <annevk>
MikeSmith: yeah I suppose, service workers issue is not closed yet

[01:14:23.0000] <MikeSmith>
annevk: I guess I meant specifically https://bugs.chromium.org/p/chromium/issues/detail?id=540509

[01:14:59.0000] <MikeSmith>
as far as posting comment or changing the status of that issue

[01:15:33.0000] <MikeSmith>
or maybe that’s something that yhirano__ himself should be the one to take action one

[01:15:36.0000] <MikeSmith>
*on

[01:16:14.0000] <MikeSmith>
or kochi

[01:16:30.0000] <MikeSmith>
or Mek :)

[01:20:45.0000] <kochi>
I'm not working on ServiceWorker or fetch :)

[01:21:24.0000] <kochi>
ah, on that bug I just removed false accidental dependency

[01:24:07.0000] <MikeSmith>
ah ok

[01:24:42.0000] <MikeSmith>
oh Kenji is the service workers PM?

[01:25:28.0000] <MikeSmith>
/me tries to remember, and tries to re-visualize the faces around the table at the f2f SW meeting we had at Facebook on Tokyo 

[02:14:16.0000] <yhirano__>
I also am not working on foreign fetch.

[02:39:34.0000] <MikeSmith>
yeah, sorry I think when I pinged y'all I was looking at two different bugs (the foreign-fetch one and another one) and I conflated the two

[02:40:57.0000] <MikeSmith>
holding a sleeping baby in one arm while browsing chrome bugs and typing with one hand is a bit error-prone it seems

[04:53:18.0000] <annevk>
JakeA: FYI, I'm editing https://github.com/whatwg/html/pull/3038

[04:58:21.0000] <ondras>
are css custom properties supposed to work with generated content?

[04:58:29.0000] <ondras>
as in, "content: var(--mystuff)" ?

[05:05:10.0000] <gsnedders>
ondras: yes

[05:05:17.0000] <gsnedders>
ondras: 'The var() function can be used in place of any part of a value in any property on an element.'

[05:06:17.0000] <ondras>
gsnedders: thanks. it was not working for me, but apparently because I was using *numeric* custom properties.

[05:06:36.0000] <ondras>
gsnedders: strings are working just fine.

[05:12:55.0000] <ondras>
gsnedders: it still behaves in a weird way: https://jsfiddle.net/z83ug7dd/

[05:13:04.0000] <ondras>
(both firefox and chrome show nothing when modified by JS)

[05:15:20.0000] <gsnedders>
/me shrugs :)

[05:15:41.0000] <hasather>
ondras: document.body.style.setProperty("--test", "'clicked'");

[05:15:54.0000] <hasather>
ondras: i.e., it should be a string

[05:16:12.0000] <ondras>
hasather: thanks a lot. makes sense.

[05:16:20.0000] <gsnedders>
hasather: shouldn't it be converted at the WebIDL level?

[05:16:54.0000] <hasather>
gsnedders: you probably know that better than me :) No idea

[05:17:27.0000] <gsnedders>
hasather: (what are you even doing nowadays? you were at finn, no?)

[05:17:49.0000] <hasather>
gsnedders: still there

[05:19:06.0000] <ondras>
I see. It works with strings, but these cannot be then used in calc() expressions

[05:19:08.0000] <ondras>
dammit.

[05:20:02.0000] <JakeA>
annevk: cheers! I don't have anything else to push

[05:20:04.0000] <ondras>
my case: passing a current/total number of slides to be #1 displayed in a footer, #2 making the footer's width calc(current/total))

[05:20:14.0000] <ondras>
apparently not possible with a single css custom property

[05:23:35.0000] <Ms2ger>
gsnedders, I'm guessing it's parsed as css

[05:29:19.0000] <gsnedders>
Ms2ger: oooh, that'd make sens

[05:29:52.0000] <Ms2ger>
Yeah, so that's probably not it :)

[05:30:14.0000] <gsnedders>
idk, it seems the easiest way to explain behaviour :)

[05:50:07.0000] <JakeA>
annevk: are you adding that "white true" note or shall I?

[05:51:06.0000] <annevk>
JakeA: feel free, I was gonna wait for another round from Domenic before addressing more nits

[06:44:48.0000] <wanderview>
JakeA: annevk: did anything change much in the abortable fetch in the last round of reviews?

[06:44:55.0000] <wanderview>
AFAIK we are planning to ship in FF57

[06:45:49.0000] <JakeA>
I don't think so, it was mostly editorial

[06:49:15.0000] <wanderview>
JakeA: any word on when chrome will implement?

[06:50:22.0000] <annevk>
wanderview: not sure when we'll ship tbh

[06:50:30.0000] <annevk>
wanderview: did it land?

[06:50:53.0000] <annevk>
wanderview: and yeah, editorial shuffling only

[06:50:59.0000] <wanderview>
annevk: it did land and is pref'd on... baku sent mail to dev-platform

[06:51:16.0000] <annevk>
🎉

[06:51:31.0000] <annevk>
Missed/forgot that

[06:51:50.0000] <wanderview>
I find it interesting that chrome is implementing fetch keepalive before aborting

[06:51:51.0000] <annevk>
Many unrelated things going on

[06:53:19.0000] <JakeA>
wanderview: haven't heard anything in terms of implementation, but I'll give them a nudge. Also I'll write about it when it's in Firefox beta unflagged, or is that already the case?

[06:53:22.0000] <wanderview>
is fetch keepalive high priority for some particular use case?

[06:53:35.0000] <wanderview>
JakeA: it will be in beta in a couple weeks

[06:54:29.0000] <JakeA>
wanderview: I'll get an article out on https://developers.google.com/web/updates/

[06:57:04.0000] <wanderview>
JakeA: thanks... in theory MDN will be updated in month or so

[06:58:47.0000] <JakeA>
(I kinda like the idea of shouting about a new Firefox feature on Google web updates)

[06:59:27.0000] <wanderview>
JakeA: well, edge implemented first!

[06:59:59.0000] <JakeA>
wanderview: true, but it's first to release that counts :D

[07:07:30.0000] <wanderview>
JakeA: also, is there a still compelling use case for link-element service worker registration?  I'm not sure we will implement without foreign fetch

[07:10:58.0000] <JakeA>
wanderview: some folks like the declarative thing, but yeah, I don't think there's a strong case for it

[07:11:25.0000] <wanderview>
JakeA: I guess we should find out if edge or webkit are going to implement it

[09:20:54.0000] <annevk>
wanderview: I don't think we should do it

[09:21:31.0000] <annevk>
wanderview: I think we should wait for "origin policy" and if that's really fast somehow see if we can link service workers from there, which would make them available from first run...

[09:21:57.0000] <annevk>
wanderview: just lazily fetching the primary service worker doesn't seem like enough of a benefit

[11:17:33.0000] <foolip>
annevk: something's wrong with the header of https://dom.spec.whatwg.org/

[11:17:48.0000] <foolip>
just opening (, maybe a bikeshed regression?

[11:20:11.0000] <wanderview>
JakeA: do you know who might work on the ft.com service worker?

[11:21:34.0000] <annevk>
foolip: yeah must be I think since I don't think anyone touched that recently, TabAtkins ^^

[11:21:48.0000] <foolip>
annevk: it does say Sep 14 though

[11:22:04.0000] <TabAtkins>
...huh. I absolutely tested the scenario that's failing here.

[11:22:12.0000] <TabAtkins>
Sorry about that, will fix immediately.

[11:22:39.0000] <annevk>
foolip: I mean nobody touched the header recently, but DOM itself was updated today

[11:22:55.0000] <annevk>
TabAtkins: thanks

[11:28:23.0000] <TabAtkins>
...somehow, the precise thing I tested works perfectly, but almost any variant I'm trying breaks. wtaf

[11:29:23.0000] <wanderview>
JakeA: nm, I'm spamming twitter

[11:54:14.0000] <TabAtkins>
annevk: Sorry, fix pushed now. (I was accidentally doing something different for custom metadata specified in Metadata Order and ones that weren't, and my testcase was only doing the one. It's now testing both.)

[15:43:52.0000] <TimothyGu>
MikeSmith: thanks :). Sorry about the non-reply, I was (and am) doing my university orientation

[16:00:39.0000] <MikeSmith>
TimothyGu: no worries about reply latency, I am used to that here :)

[16:01:29.0000] <MikeSmith>
and also in general thanks for all you have been contributing to the WHATWG work over the previous months

[16:01:48.0000] <MikeSmith>
super glad to have you involved

[16:03:09.0000] <MikeSmith>
from what I have seen, you bring in a ton of insight toward making some important improvements in various places


2017-09-15
[17:05:26.0000] <Domenic>
Anyone know how you're supposed to include Unicode in HTTP headers? https://twitter.com/domenic/status/908480923070373888

[18:15:43.0000] <deyomax>
Domenic: it's about asterisk parameters, not full headers.

[18:15:54.0000] <deyomax>
Seems like a clarification on an existing practice

[18:16:29.0000] <deyomax>
And thank god because last thing we need is an alternative way to encode headers.

[00:33:44.0000] <Ms2ger>
Oh my: https://twitter.com/mnot/status/908471139348840449

[00:37:09.0000] <annevk>
Ms2ger: wake me up when it's no longer text/plain-compatible

[00:37:24.0000] <annevk>
Anyone here interested in joining a @whatwg/i18n team? https://lists.w3.org/Archives/Public/www-international/2017JulSep/0110.html

[00:37:46.0000] <annevk>
This wouldn't be for whatwg/encoding btw, since that's all related I'd expect folks to just watch the repository

[00:37:48.0000] <MikeSmith>
xfq maybe?

[00:38:07.0000] <Ms2ger>
This is how stories about people waking up after centuries start

[00:38:29.0000] <annevk>
I'd like to post a similar message to a a11y group btw, if someone can give me a good list I'll go ahead and post it, though dentist first

[00:38:58.0000] <annevk>
Ms2ger: I'd like to revise my answer to "tell me to stop playing Zelda"

[00:39:18.0000] <Ms2ger>
Approved

[00:53:08.0000] <gsnedders>
annevk: maybe?

[02:18:53.0000] <annevk>
gsnedders: you can always leave teams

[02:22:07.0000] <gsnedders>
annevk: indeed

[02:36:59.0000] <JakeA>
annevk: if I have an API that takes a sequence of Whatever dictionaries, is there an easy way to store that as part of a concept? Can I just say "Foo has whatevers (a list of Whatevers)"

[02:37:27.0000] <JakeA>
It feels like a DRY violation to have to recreate the structure as a concept

[02:38:38.0000] <annevk>
JakeA: I guess you can store the resulting dictionaries, yes

[02:39:10.0000] <JakeA>
annevk: Ta!

[02:39:15.0000] <annevk>
JakeA: we haven't really flushed IDL structures out so much, but it seems reasonable that once a JavaScript value is converted to an IDL value you can store the result

[02:40:54.0000] <JakeA>
annevk: yeah, especially for things like dictionaries where it isn't linked to the JS object

[02:41:13.0000] <JakeA>
Using an IDL reference in a concept made me stop and think

[02:41:57.0000] <annevk>
JakeA: we do it all the time for strings and numbers and such

[02:43:00.0000] <JakeA>
annevk: That reminds me, if I'm storing an unsigned long long, should the concept also be an unsigned long long? Most concepts I see just use "number".

[02:43:51.0000] <annevk>
JakeA: I use number when it's not important, and x-bit when it is

[02:44:14.0000] <annevk>
JakeA: I would try to call out unsigned/signed and nonzero

[02:45:04.0000] <annevk>
JakeA: this should all get a lot clearer as IDL is fully redefined in terms of Infra, but that'll take a while

[02:45:10.0000] <annevk>
(and Infra itself matures more)

[02:45:40.0000] <JakeA>
Gotcha , cheers!

[06:49:45.0000] <wanderview>
JakeA: do you have an opinion on https://github.com/w3c/ServiceWorker/issues/1189?

[06:49:58.0000] <wanderview>
we can discuss at TPAC, but we are planning to ship this feature around that time

[06:50:34.0000] <JakeA>
wanderview: will take a look

[06:51:35.0000] <wanderview>
JakeA: it was bad on us not to raise this question in the spec when we chose to do something that was not clearly spec'd

[06:52:25.0000] <JakeA>
wanderview: nah I've been procrastinating when I should have dealt with this issue a while ago

[07:07:01.0000] <domfarolino>
Each browser thread gets its own event loop, does this mean each thread also gets its own microtask queue? Is this queue just a part of the event loop...as in...does an event loop consists of a task queue and microtask queue basically?

[07:07:46.0000] <domfarolino>
JakeA: reading your article on tasks/microtasks, to give some context

[07:13:17.0000] <annevk>
domfarolino: yeah, it's defined in the HTML Standard, but that's roughly it

[07:15:16.0000] <domfarolino>
annevk: ok thanks. Hm, so I've learned that microtasks are executed mid-task after callbacks...not just at the end of a task. When would a callback not be at the end of a task though? Is it when there are say, multiple callbacks to execute in a single task?

[07:16:29.0000] <annevk>
domfarolino: they're only executed after callbacks if there's no JavaScript on the stack

[07:18:38.0000] <annevk>
domfarolino: so _a_ in the following code would not run directly after onclick: obj.onclick = ...; Promise.resolve(...).then(a); obj.click(); // a hasn't run at this point

[07:23:25.0000] <domfarolino>
annevk: Hmm ok I think I'm a tad confused. So what else is on the stack that would prevent a from being run directly after on click?

[07:25:18.0000] <annevk>
domfarolino: the JavaScript engine executing JavaScript

[07:26:25.0000] <annevk>
I'd expect JakeA's article to cover this though, but it's been a while

[07:27:04.0000] <annevk>
Hmm maybe he didn't cover that

[07:28:33.0000] <domfarolino>
So after we perform the onclick callback, isn't that the end of JS execution though? because there's no JS after "// a hasn't run at this point"

[07:28:50.0000] <JakeA>
It's covered

[07:29:38.0000] <JakeA>
domfarolino: See "Level 1 bossfight" vs "Level 1 boss's angry older brother"

[07:30:27.0000] <JakeA>
domfarolino: A manual click shows microtask checkpoints happening between event callbacks, because the stack is empty after each callback.

[07:30:41.0000] <annevk>
Oh it is

[07:30:45.0000] <annevk>
I just wrote http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5376 as an example

[07:31:05.0000] <JakeA>
domfarolino: Whereas when the same event is triggered with el.click(), the stack isn't empty between callbacks, so no checkpoint until the end

[07:31:07.0000] <annevk>
Firefox does this wrong it seems, even though I'm pretty sure smaug____ designed these rules

[07:31:10.0000] <domfarolino>
Ohhh but with a JS initiated click, the stack is not empty after that execution, because we're still "executing script"?

[07:31:17.0000] <annevk>
Maybe Firefox only does it correct for mutation events

[07:31:27.0000] <annevk>
domfarolino: yup

[07:31:42.0000] <annevk>
domfarolino: there's some terminology the HTML Standard uses for this that I forgot about...

[07:32:33.0000] <annevk>
Firefox bug is https://bugzilla.mozilla.org/show_bug.cgi?id=1193394 fwiw

[07:32:56.0000] <JakeA>
domfarolino: https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/#why-is-it-different – here's a step-by-step example showing the stack & queues in this case

[07:33:47.0000] <domfarolino>
annevk: thanks for the org invite btw. OHH, I jumped the gun then JakeA, didn't get to that part yet but that definitely makes sense. Thanks a ton for the info!!

[07:34:06.0000] <JakeA>
np!

[07:35:24.0000] <domfarolino>
Makes a lot more sense now. Sweet! annevk: oh interesting bug

[07:37:39.0000] <domfarolino>
annevk: thanks for the demo up there. JakeA: great article

[07:37:54.0000] <JakeA>
Cheers!

[07:38:11.0000] <wanderview>
annevk: its frustrating that old tests are preventing us from landing the fix :-(

[07:39:05.0000] <annevk>
wanderview: old WPT tests?

[07:39:23.0000] <wanderview>
annevk: no, firefox-specific tests for things like devtools, etc

[07:39:50.0000] <annevk>
That is too bad indeed

[08:15:02.0000] <smaug____>
annevk: hmm

[08:15:11.0000] <smaug____>
something about microtasks?

[08:15:21.0000] <smaug____>
someone using Promises?

[08:15:33.0000] <smaug____>
(since in Gecko Promises don't use microtasks)

[08:15:55.0000] <smaug____>
try MutationObservers, they follow microtask model

[08:16:16.0000] <smaug____>
and I'll try to finally get Promises fixed in FF58

[08:16:23.0000] <wanderview>
smaug____: this is about the bug to fix that in FF, yea

[08:16:46.0000] <smaug____>
but in other words, as far as I know FF's microtasks are correct

[08:16:54.0000] <smaug____>
it is that Promises are broken

[08:17:42.0000] <annevk>
that's probably true

[08:24:15.0000] <Jasper>
I just read the Worklet specification, and I'm confused.

[08:24:38.0000] <Jasper>
"Multiple instances of WorkletGlobalScope can be created for each Worklet that they belong to. User agents may choose to do this in order to parallelize work over multiple threads, or to move work between threads as required.

[08:24:39.0000] <Jasper>
"

[08:24:47.0000] <Jasper>
Does this mean that a Worklet cannot hold any state?

[09:11:24.0000] <annevk>
Jasper: some worklets cannot

[09:11:36.0000] <annevk>
Jasper: an audioworklet can

[09:11:45.0000] <Jasper>
What about a PaintWorklet?

[09:11:53.0000] <annevk>
Jasper: cannot

[09:12:27.0000] <Jasper>
The class that it registers cannot hold state? OK.

[09:12:29.0000] <annevk>
Jasper: that bit of the specification also has an outstanding issue btw, since it's basically the subclass that needs to decide whether that happens, and it's not some kind of optional thing

[09:12:49.0000] <annevk>
Jasper: so many broken things with worklets still

[09:12:58.0000] <annevk>
was kinda surprised Chrome tried to ship them

[09:13:09.0000] <Jasper>
I think I figured out after posting that that it's mostly talking about the global state of the script environment, *not* the class that you register.

[09:13:25.0000] <Jasper>
I'm kinda surprised at a lot of things Chrome tries to ship :/

[09:14:11.0000] <Jasper>
What would be more effective than trying to say "try not to mutate global state or your script might break" would be a frozen, immutable global environment

[09:14:24.0000] <Jasper>
But I assume there are constraints that prevent that from happening

[09:17:26.0000] <Jasper>
Apparently Firefox isn't even running Worklets in a thread yet https://bugzilla.mozilla.org/show_bug.cgi?id=1328964

[09:17:28.0000] <Jasper>
womp womp

[09:18:20.0000] <Jasper>
I come into this after not paying attention for a few years -- I honestly don't know what's going on in the web space anymore.

[09:19:53.0000] <wanderview>
Jasper: I don't think worklet is being actively worked at the moment

[09:29:07.0000] <annevk>
wanderview: I suspect for audioworklets there's at least some work being done, or maybe that also got delayed?

[09:31:47.0000] <wanderview>
annevk: baku worked on it for a while before, but I don't think he has been working on it recently

[09:32:13.0000] <annevk>
wanderview: I was thinking padenot

[09:32:23.0000] <wanderview>
oh audioworklets

[09:32:36.0000] <wanderview>
annevk: well, baku was adding the underlying worklet support

[09:32:38.0000] <annevk>
wanderview: it at least comes up every now and then, but maybe padenot is mostly working on the spec still

[09:32:50.0000] <wanderview>
not sure padenot is working on the worklet infrastructure

[09:32:54.0000] <wanderview>
sorry, I have to run

[09:33:00.0000] <Jasper>
For context, I wrote a kind of scathing article on Web Audio yesterday, and people were telling me to look into AudioWorklets which apparently are the future of the web.

[09:33:43.0000] <Jasper>
I have limited free time so it's mostly a nights-and-weekends thing, but I wanted to at least try to understand the new solution being proposed and try to help out where I can

[09:33:49.0000] <annevk>
I think at W3C's TPAC in Sapporo someone from Google told me how worklets would be pretty easy and quick to define

[09:34:24.0000] <annevk>
That's two years ago now and it still has the similar holes and a couple more uncovered

[09:34:40.0000] <Jasper>
I'm stuck trying to understand macro- and micro-task queues so I don't think I'm the right person to try and understand the subtleties of this :/

[09:34:49.0000] <annevk>
Nothing is ever easy

[09:35:21.0000] <annevk>
Jasper: take the time to read through and study https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/

[09:35:30.0000] <Jasper>
Thank you.

[09:36:24.0000] <annevk>
Jasper: you wrote http://blog.mecheye.net/2017/09/i-dont-know-who-the-web-audio-api-is-designed-for/?

[09:36:29.0000] <Jasper>
Yes.

[09:36:34.0000] <annevk>
Jasper: did you see http://robert.ocallahan.org/2017/09/some-opinions-on-history-of-web-audio.html?

[09:36:44.0000] <Jasper>
I did, yes (and left a comment on that post)

[09:36:53.0000] <annevk>
ah ok

[09:37:41.0000] <Jasper>
Apologies -- I try not to be too cynical and combatative since the industry is already full of way too many people like that... but my anger got the better of me in that post.

[09:37:48.0000] <Jasper>
And of course angry posts are what blow up on social media.

[09:39:13.0000] <Jasper>
So I feel it's sort of my karmic duty to spend some energy to try and pioneer and help out in the specs where I can, rather than just insult from a distance.

[09:40:26.0000] <annevk>
Jasper: so https://github.com/WebAudio/web-audio-api is the place where AudioWorklet et al are being designed

[09:40:34.0000] <Jasper>
Yep.

[09:41:52.0000] <annevk>
Jasper: if you need any help let me know

[09:42:07.0000] <Jasper>
Thank you. My first order of business is to try to wrap my head around a modern event loop.

[09:43:24.0000] <Jasper>
I hope my blog post wasn't too destructive. I know how it is to have short-sighted slights pelted at you from a distance.

[09:44:13.0000] <annevk>
Jasper: I haven't worked much on Web Audio other than helping out a little bit with AudioWorklet

[09:44:21.0000] <Jasper>
Alright.

[09:44:30.0000] <annevk>
Jasper: and from the couple people I know that do work on it, they dislike it too

[09:45:11.0000] <Jasper>
It's... a bit of a departure from what's usually in a platform layer, that's for sure :)

[09:45:12.0000] <annevk>
Jasper: Chrome/Safari ended shipping something and then Firefox felt like they had to copy, is my understanding of the events

[09:45:34.0000] <Jasper>
That's what roc posted, yeah.

[12:16:03.0000] <KiChjang>
did the fetch/HTTP cache specs ever say that we should always strip URL fragments when storing to/getting from cache?

[12:17:57.0000] <wanderview>
KiChjang: we no longer do for Request.url... I believe Response.url does still strip fragments

[13:13:17.0000] <KiChjang>
wanderview: is it good practice to strip fragments though?

[13:15:10.0000] <wanderview>
KiChjang: well, its required by the fetch spec: https://fetch.spec.whatwg.org/#dom-response-url

[16:01:50.0000] <xfq>
annevk: thanks for inviting me to join!

[16:07:28.0000] <Yuhong>
I have just mentioned the Browsium/EMIE story here: https://news.ycombinator.com/item?id=15259584


2017-09-16
[00:03:28.0000] <MikeSmith>
TimothyGu: about that revert PR, it was because due to me, um, multitasking whilst I was in the process of fixing up the commit description before merging it, I fat-fingered the merge button prematurely

[00:03:52.0000] <TimothyGu>
MikeSmith: ah ok

[00:04:34.0000] <MikeSmith>
yeah so it caused it to be merged to master with broken misleading description in the body of the commit message

[00:06:17.0000] <MikeSmith>
so we discussed it and after that rather than further complicating things with a revert etc, I just fix-amended the commit description for the change from the original PR

[00:06:22.0000] <MikeSmith>
and force-pushed

[00:06:55.0000] <MikeSmith>
so, sorry if you had pulled already before I force pushed that amended commit

[00:25:47.0000] <TimothyGu>
no I didn't, so no worries

[01:58:57.0000] <leclerc>
What's the "common supertype" of HTTP messages and email messages?

[01:59:05.0000] <leclerc>
Do we have a term for this.

[05:26:20.0000] <nox>
leclerc: I think they are different in such subtle ways that the supertype doesn't actually exist.

[05:26:58.0000] <leclerc>
nox: I guess it doesn't.

[05:27:11.0000] <leclerc>
nox: maybe I can pretend "MIME entity" is the supertype

[08:21:46.0000] <MikeSmith>
naively I would guess that “message” is the supertype

[08:22:04.0000] <MikeSmith>
leclerc: ⬆️

[08:32:32.0000] <leclerc>
MikeSmith: message - yes. Although if it's "message" it would be an abstract kind that has no concrete application. While "MIME Entity" does have a concrete application, although historically MIME came after the header/body message format was in use online.


2017-09-17
[23:13:00.0000] <TimothyGu>
oh, I guess it would be helpful to know that I operate https://github.com/mirror/chromium, which is the only complete and active chromium mirror on GitHub that I can find

[23:13:35.0000] <TimothyGu>
cs.chromium is still better for general usage, but just FYI

[06:49:37.0000] <leclerc>
I can't find the spec saying somewhere explicitly that empty ?query and #fragment is the same as not having them. Am I missing something?

[12:59:57.0000] <annevk>
leclerc: that's not the same

[13:04:38.0000] <leclerc>
annevk: hmm yeah, I notice it preserves them now.

[13:04:52.0000] <leclerc>
It's just not exposed via the URL API

[13:04:59.0000] <leclerc>
Thanks.


2017-09-18
[18:35:50.0000] <domfarolino>
Is there a section in the fetch spec where things like URL objects are converted into `Request`s before performing the fetch algorithm?

[18:36:53.0000] <domfarolino>
I ask because it mentions that the input for fetch is a Request, yet the fetch API takes in things like strings and URLs

[18:46:03.0000] <Mek>
domfarolino: see step 2 in the algorithm for the fetch method; it calls the Request constructor with whatever was passed to the fetch method

[18:46:11.0000] <Mek>
domfarolino: https://fetch.spec.whatwg.org/#fetch-method

[18:49:20.0000] <domfarolino>
Mek: wow how'd I miss that. Thank you!

[19:21:06.0000] <domfarolino>
Mek: perhaps you could answer this, what allows the Request constructor to be called with a URL object as its first param, and still work? Seems the constructor takes in strings and Request objects.

[19:23:49.0000] <Mek>
domfarolino: the magic of WebIDL, which stringifies whichever is passed in (and the URL interface has a stringifier defined)

[19:24:10.0000] <Mek>
(stringifies things passed to a method taking a DOMStirng/USVString)

[19:26:56.0000] <domfarolino>
Mek: Ok so an object with a stringifier defined will pass a "string" (DOMString/USVString) type check then?

[19:28:37.0000] <Mek>
domfarolino: well, anything will pass a "string" type check (i.e. there is no error throwing in the algorithm to convert a ecmascript value to a DOMString https://heycam.github.io/webidl/#es-DOMString)

[19:30:54.0000] <Mek>
actually, a Symbol would throw a TypeError in the ecmascript spec

[19:32:45.0000] <domfarolino>
Mek: Hmm so I just realized that URL.toString() is called when passing a URL into Request constructor. I guess I'm a little confused as to how in the Request constructor, we can get away with checking for the more general type "string" before checking for object of type Request. Because if an object of type Request can be seen as a string, wouldn't we ALWAYS pass the "if input is a string" condition?

[19:33:14.0000] <domfarolino>
I mean obviously we don't, but I'm just confused as to why. Because new Request().toString() will pass (just return an invalid URL is all)

[19:33:49.0000] <Mek>
domfarolino: see the algorithm for converting a union type from ES to IDL (https://heycam.github.io/webidl/#es-union)

[19:34:17.0000] <Mek>
the string conversion isn't attempted till step 14, Request will be handled in step 4

[19:39:11.0000] <domfarolino>
Mek: Ohh so we don't delegate if we recognize a platform object first then

[19:39:19.0000] <domfarolino>
delegate to ecma ToString, that is

[19:39:23.0000] <Mek>
yeah

[19:39:38.0000] <domfarolino>
Ok this makes a lot more sense thanks!

[20:45:38.0000] <domfarolino>
Mek: could you help me understand step 4 substep 1 of the es-union algorithm you sent a bit ago. For example, `new Headers()` is a platform object (right?), however when passed into the `Request` constructor (which looks for a string) we fallback to calling `.toString` (step 14), and I'm not sure what condition in step 4 > substep 1 we're failing

[21:56:46.0000] <Domenic>
domfarolino: `new Headers()` does not implement `Request`

[22:06:26.0000] <domfarolino>
Domenic: hm does that mean 'new URL()' does then since we're caught at step 4 when passing in 'new URL()'? Or am I misunderstanding something

[22:09:22.0000] <Domenic>
No, new URL also fails step 4 substep 1

[22:09:43.0000] <Domenic>
new URL ends up in step 14

[22:23:05.0000] <domfarolino>
Domenic: Ok, so headers and URL are both platform objects so they attempt step 4 dubstep 1 which they fail and move on (eventually hitting 14) correct?

[22:23:31.0000] <domfarolino>
Substep ** autocorrect

[22:24:43.0000] <domfarolino>
but of course Request object passes fine

[22:26:23.0000] <Mek>
yeah, because Request is the only interface type included in "types"

[00:51:44.0000] <JakeA>
annevk: with background fetch I need to process the body of the response as it arrives. "process response" is ideal in terms of timing, but it requires an event loop that I may not have. Feels like the task queuing part should be optional.

[00:52:24.0000] <JakeA>
Has this come up before?

[00:53:28.0000] <Domenic>
JakeA: I think usually when there's no even loop you set the sync flag

[00:53:53.0000] <Domenic>
Hmm I guess that doesn't work for you

[00:54:55.0000] <Domenic>
Hmm per spec SRI disables streaming!?

[00:55:03.0000] <Domenic>
I guess that makes sense, but still....

[00:55:25.0000] <JakeA>
Yeah, sync means it'll wait for the body before giving me the response

[00:55:34.0000] <Domenic>
https://fetch.spec.whatwg.org/#concept-fetch step 19 for the SRI thing

[00:56:07.0000] <Mek>
hah, that (streaming and packaging/sri/signature type things being incompatible) also came up over lunch...

[00:56:27.0000] <Domenic>
JakeA: I wonder if you should just have a simple event loop...

[00:57:04.0000] <Mek>
so change HTML to define a third type of event loop?

[00:59:06.0000] <JakeA>
I can't see how SRI can work without streaming. But that'll provide an interesting challenge for bg fetch too.

[01:01:10.0000] <annevk>
JakeA: how can you do callbacks without an event loop?

[01:23:20.0000] <JakeA>
annevk: In spec-speak, I can call out to another algorithm while I'm "in parallel". Given that the algorithm I'm calling is on the same thread, it doesn't seem like an event loop is needed for algorithmic callbacks.

[01:26:09.0000] <annevk>
JakeA: so you're happy to block yourself until you got a response, but no further?

[01:26:53.0000] <annevk>
JakeA: also, who says fetch is on the same thread?

[01:27:16.0000] <annevk>
JakeA: I wonder how background fetch integrates with "fetch groups" and the various timing APIs

[01:27:56.0000] <JakeA>
annevk: I'm happy to block until I've got a response, but it'd nice to hand back to fetch after that so it can process the trailer etc

[01:28:19.0000] <JakeA>
annevk: main fetch is on the same thread in as much as it can return a response

[01:28:26.0000] <annevk>
JakeA: you also need the body?

[01:28:46.0000] <annevk>
JakeA: in that case i'd just use the sync flag

[01:29:29.0000] <JakeA>
annevk: that waits for the response body

[01:30:09.0000] <JakeA>
annevk: Since background fetch can be multiple requests combined, I need to be able to handle the stream

[01:31:28.0000] <JakeA>
annevk: and a response that provides data before failing is still useful, as I can resume from there

[01:32:45.0000] <JakeA>
annevk: in terms of fetch groups, I'm still figuring that out. Use of clients is also interesting. I'm leaning on keepalive for now, but haven't looked too closely at it.

[01:45:09.0000] <annevk>
JakeA: so Fetch does have an open issue on making the callbacks more explicit

[01:45:34.0000] <annevk>
JakeA: maybe if that were fixed we could make things more flexible around event loops

[02:05:37.0000] <JakeA>
https://github.com/whatwg/fetch/issues/536

[02:05:46.0000] <JakeA>
annevk: ta, I'll add my use-cases to that issue

[02:27:27.0000] <JakeA>
annevk: the more I think about it, the sync flag is perfect, except for the "wait for body" bit. Mind if I send a PR that adds a flag that means it *doesn't* wait for the body?

[02:30:25.0000] <annevk>
JakeA: it feels a bit like a hack at that point

[02:31:18.0000] <annevk>
JakeA: I'd be worried about the added complexity and ensuring everything remains working well

[02:32:03.0000] <annevk>
Domenic: thoughts on https://github.com/whatwg/html/issues/3043#issuecomment-329838865?

[02:32:24.0000] <annevk>
xfq: your welcome 😊

[02:34:00.0000] <Domenic>
annevk: I haven't taken the time to look at the current spec enough to validate the design... Maybe later tonight I can.

[02:34:58.0000] <annevk>
Domenic: leave it then, I'll just go with something and see if it works

[02:35:06.0000] <annevk>
Domenic: and then we can bikeshed during review

[02:36:11.0000] <smaug____>
What is the security model for service workers

[02:36:20.0000] <smaug____>
when can a service worker run?

[02:36:25.0000] <smaug____>
security is wrong word

[02:37:51.0000] <annevk>
smaug____: it runs when a document associated with a browsing context or worker is created

[02:38:15.0000] <annevk>
smaug____: and then during the lifetime of that document/worker whenever stuff is fetched

[02:38:28.0000] <smaug____>
what about push?

[02:38:51.0000] <JakeA>
smaug____: that can run when there isn't an associated document open. But…

[02:39:10.0000] <JakeA>
smaug____: That requires user permission at registration time, and a notification must be shown as a result

[02:39:29.0000] <smaug____>
and there is no way to cancel such notification ?

[02:41:24.0000] <JakeA>
smaug____: no way to remove the notification without the user seeing it

[02:42:44.0000] <JakeA>
smaug____: There are some cases where you don't have to show a notification, eg there's a page to the origin open. The reason you have to show a notification is so the user is aware the site ran in the background, so there's no need to do that if it's already visibly running.

[02:43:29.0000] <smaug____>
sure. I'm just wondering in which all ways web sites may misuse users' machines

[02:43:33.0000] <smaug____>
running random JS code

[02:43:48.0000] <JakeA>
smaug____: There are use-case this gets in the way of. Eg, you show a notification on the phone "You have a new direct message", but the user views that message on another device, so you want to remove that notification from all devices. We don't have a good answer for that yet

[02:44:24.0000] <smaug____>
just read about that bitcoin mining using JS, but that, I guess, isn't SW related

[02:45:33.0000] <JakeA>
smaug____: With background fetch, the plan is to close the service worker during the fetch (unless it's otherwise needed), then run it again to handle completion events once the fetch is complete. During the fetch there'll be a download notification showing progress, so again it's very user-visible

[06:22:46.0000] <wanderview>
smaug____: JakeA: I don't believe the spec requires "notification must be shown"... firefox uses a different heuristic

[06:32:37.0000] <JakeA>
wanderview: it's somewhat in the spec https://w3c.github.io/push-api/#dom-pushsubscriptionoptions-uservisibleonly

[06:33:37.0000] <wanderview>
JakeA: we don't implement that: http://searchfox.org/mozilla-central/source/dom/webidl/PushManager.webidl#11

[06:33:49.0000] <JakeA>
gothca

[06:33:52.0000] <JakeA>
um

[06:33:53.0000] <JakeA>
gotcha

[06:34:07.0000] <JakeA>
/me goes away to draw gothcat

[06:34:09.0000] <wanderview>
JakeA: gothca sounds like a pokemon to me

[06:34:16.0000] <JakeA>
haha

[06:35:11.0000] <wanderview>
JakeA: I wasn't directly involved in our push heuristic, but I think the idea is we believe the throttling is adequate and if a site is abusing it we slow their pushes to the point it doesn't matter

[06:35:20.0000] <wanderview>
but again, I'm not 100% sure

[06:38:07.0000] <JakeA>
I guess that enables the "hide notification" thing at the very least

[06:42:04.0000] <wanderview>
yea

[06:43:25.0000] <wanderview>
JakeA: AFAIK the `userVisibleOnly` thing is not feature detectable... does it have any observable change on script?

[06:44:57.0000] <JakeA>
wanderview: I don't think so

[06:45:19.0000] <wanderview>
ok, that makes me feel a bit better in not implementing it

[06:46:12.0000] <JakeA>
wanderview: I mean, if you don't set it to true, we always reject

[06:46:27.0000] <wanderview>
JakeA: what did you mean earlier about SRI not working without streaming?

[06:46:56.0000] <JakeA>
wanderview: don't you need the whole response before you know it matches the hash

[06:47:24.0000] <wanderview>
JakeA: right... ok... maybe I misread what you said

[06:47:55.0000] <wanderview>
JakeA: I guess it depends if we need to reject the outer fetch or if we can abort the body stream... but right now it requires not providing a Response with status=200

[06:48:07.0000] <wanderview>
so we can't provide Response before the body is available

[06:49:00.0000] <JakeA>
wanderview: spec says reject the outer fetch

[06:49:27.0000] <wanderview>
JakeA: yea, I was more wondering if we could make that more forgiving now that streams exist... I think SRI was integrated before body streams

[06:50:07.0000] <wanderview>
but I don't think aborting the body is the same

[06:50:13.0000] <JakeA>
wanderview: ohh I see. Yeah, I guess it depends if header access for a non-matching response should be considered dangerous. But I guess it's fine

[06:50:25.0000] <wanderview>
or partial body data

[06:50:42.0000] <JakeA>
that's definitely risky

[06:50:47.0000] <wanderview>
seems unwise

[06:51:18.0000] <smaug____>
wanderview: Isn't userVisibleOnly feature detectable if one has a throwing getter for it in the object passed as dictionary

[06:51:38.0000] <wanderview>
smaug____: oh, I guess so

[06:51:48.0000] <wanderview>
/me doesn't know all the tricks...

[06:51:54.0000] <JakeA>
ohh yeah, I keep forgetting about that trick

[06:52:07.0000] <wanderview>
/me has to go do a code review on his house shortly.

[07:35:08.0000] <JakeA>
annevk: are you happy to address Domenic's nits in https://github.com/whatwg/html/pull/3038? In terms of comments on the stuff I wrote, there isn't anything I disagree with

[07:38:28.0000] <annevk>
JakeA: yeah, I likely won't get to it today though

[07:38:41.0000] <JakeA>
annevk: no rush, I just didn't want to get in the way

[10:43:18.0000] <annevk>
JakeA: ended up doing it

[11:08:35.0000] <JakeA>
annevk: hah cheers

[11:52:21.0000] <wanderview>
JakeA: if a user completely disables cookies in chrome, does that block service workers from working?

[11:52:57.0000] <wanderview>
similar to 3rd party cookies being disabled blocking service worker itnerception of 3rd party iframes


2017-09-19
[00:57:45.0000] <mkwst>
Does `TreatNullAs` have interesting behavior when combined with union types? For https://github.com/mikewest/trusted-types, I'd like to define some sort of union on top of `DOMString`, but the semantics for things like `innerHTML` are strange. :/

[01:21:02.0000] <annevk>
mkwst: I thought TreatNullAs is obsolete now

[01:21:33.0000] <mkwst>
Obsolete except insofar as it's used on things like `innerHTML`.

[01:21:45.0000] <annevk>
mkwst: anyway, we should just make it means that passing null means passing ""

[01:22:00.0000] <annevk>
mkwst: I thought we have renamed it to [TreatNullAsEmptyString] without value

[01:22:21.0000] <mkwst>
https://heycam.github.io/webidl/#TreatNullAs *shrug*

[01:22:38.0000] <annevk>
Yeah, I saw

[01:23:19.0000] <annevk>
mkwst: ah, https://github.com/heycam/webidl/issues/350

[01:23:41.0000] <annevk>
mkwst: anyway, I don't think it should be problematic with unions necessarily

[01:23:48.0000] <annevk>
mkwst: might just be a bug

[01:25:07.0000] <mkwst>
So the expected behavior for something like `(DOMString or Whatever)` with the `TreatNullAsEmptyString` attribute is that `null` would be accepted, treated as a `DOMString`, and converted to "" rather than "null"?

[01:25:35.0000] <mkwst>
I guess that's not clear to me from the spec, but I think it's the behavior I want. :)

[01:26:48.0000] <annevk>
Hmm, Worklet folks trying to get out of secure contexts

[01:27:09.0000] <annevk>
"CSS doesn't have X" So why don't you add X?

[01:27:33.0000] <annevk>
mkwst: yes

[01:28:37.0000] <annevk>
mkwst: I think you're right that IDL currently doesn't account for the union case

[01:30:37.0000] <annevk>
mkwst: maybe it does...

[01:31:01.0000] <annevk>
mkwst: https://heycam.github.io/webidl/#es-union has "includes a nullable type", which is https://heycam.github.io/webidl/#dfn-includes-a-nullable-type

[01:31:25.0000] <annevk>
mkwst: that talks about annotated types which is https://heycam.github.io/webidl/#annotated-types

[01:32:14.0000] <annevk>
mkwst: however, https://heycam.github.io/webidl/#TreatNullAs does not entirely make it clear that it becomes a nullable type due to this...

[01:32:22.0000] <mkwst>
annevk: That seems right. But the inner type is `DOMString`, which isn't nullable.

[01:32:35.0000] <mkwst>
Right. Seems like we could add something there to make it clear.

[01:32:48.0000] <mkwst>
(Though an example would be helpful as well, because I wouldn't have found that chain. :( )

[01:33:59.0000] <annevk>
mkwst: I suspect we'd just want to special case TreatNullAs in "includes a nullable type", but worth an issue to see what other people say

[01:34:20.0000] <annevk>
mkwst: might also only want to fix this if we actually end up going with trusted types

[01:34:21.0000] <mkwst>
https://lists.w3.org/Archives/Public/www-style/2017Mar/0023.html "The group will raise this with TAG and get their recommendation."

[01:34:48.0000] <mkwst>
Who do we need to lean on to get the TAG to land dbarron's addition to the design doc?

[01:35:30.0000] <mkwst>
annevk: Yeah. And the type thing is all super hand-wavey and experimental at the moment, so I don't really want to push other specs to change until we actually know what we want to build.

[01:37:58.0000] <annevk>
mkwst: this seems minor enough indeed, but I'd like to see an HTML issue for things like this, just to give people a heads up and the ability to weigh in

[01:38:42.0000] <annevk>
mkwst: we might end up changing a bunch of your APIs six-twelve months down the road is good to know

[01:40:58.0000] <mkwst>
Sure. Filing a bug now.

[01:42:36.0000] <annevk>
mkwst: and I guess for the IDL thing I'd file an issue in trusted-types at least, so you know what is still outstanding

[01:45:00.0000] <mkwst>
Would you like a "Hey, look at this thing!" bug against HTML? Seems a little early for that... But I'm happy to file one if you'd find it helpful.

[01:48:10.0000] <annevk>
mkwst: I'd like it to be filed quite a while before the point is reached where it becomes hard to revisit the design

[01:49:29.0000] <mkwst>
Hrm. Ok. *shrug* Filing bugs is cheap. :)

[01:50:40.0000] <annevk>
mkwst: it's the modern equivalent of a heads up on a mailing list

[01:50:57.0000] <annevk>
mkwst: I don't really see another way of reaching the 200 folks who watch the HTML repository

[01:51:26.0000] <mkwst>
Sure. https://github.com/w3ctag/design-reviews/issues/198 certainly doesn't have the same reach.

[01:54:08.0000] <tobie>
mkwst:  You can't use [TreatNullAs] on anything but a DOMString.

[01:54:53.0000] <mkwst>
tobie: You should talk with annevk, who just said I could. :)

[01:55:24.0000] <tobie>
mkwst: "The [TreatNullAs] extended attribute must not be associated with a type that is not DOMString." --https://heycam.github.io/webidl/#TreatNullAs

[01:58:10.0000] <annevk>
tobie: I think we can fix that if the need is compelling enough

[02:02:30.0000] <annevk>
mkwst: you might also want to chime in here: https://github.com/whatwg/dom/issues/150

[02:02:37.0000] <annevk>
mkwst: it's losely connected to trusted types

[02:03:29.0000] <tobie>
mkwst: so re-reading the whole thread, it seems that what you want is simply: ([TreatNullAsEmptyString] DOMString or Whatever), where whatever CANNOT be a nullable type.

[02:03:43.0000] <tobie>
s/whatever/Whatever/

[02:03:52.0000] <mkwst>
annevk: Yeah. I think it's talking about things a layer or so up from what I'm toying with at the moment.

[02:04:08.0000] <mkwst>
That is, whatever types we come up with could be jammed into/required in certain slots of a template.

[02:04:58.0000] <tobie>
mkwst: and you'll be covered by step 14 of https://heycam.github.io/webidl/#es-union

[02:05:55.0000] <mkwst>
Does that work? Like, I'm pretty sure it won't work in Chrome, but is it valid syntax in general?

[02:06:43.0000] <tobie>
mkwst: yes. these are annotated types. I think Chrome supports them now. Let me find the bug

[02:07:10.0000] <mkwst>
`third_party/WebKit/Source/core/dom/trustedtypes/TrustedHTML.idl(5) : error: Unexpected "[" after "("` :)

[02:07:39.0000] <mkwst>
Blink's bindings generation code is complicated. :(

[02:08:05.0000] <tobie>
mkwst: https://bugs.chromium.org/p/chromium/issues/detail?id=714866

[02:09:10.0000] <mkwst>
Ok. Then they just haven't gotten around to making it work with union types.

[02:09:18.0000] <mkwst>
Which kinda makes sense, given the non-existant usage.

[02:12:03.0000] <mkwst>
Ugh. My workaround doesn't work, since we treat `undefined` and `null` the same for `?` but not for `TreatNullAs`.

[02:12:21.0000] <mkwst>
Is that something we could change? :)

[02:13:02.0000] <mkwst>
Like, make the first two tests in https://github.com/w3c/web-platform-tests/blob/master/domparsing/outerhtml-02.html have identical output? :)

[02:15:44.0000] <mkwst>
It's a bit strange that step 2 of https://heycam.github.io/webidl/#es-nullable-type treats `null` and `undefined` as interchangable, but `TreatNullAs` doesn't.

[02:19:01.0000] <tobie>
mkwst: I don't know the precise origins of TreatNullAs tbh, and I have no idea whether changing that behavior would be web compatible.

[02:19:19.0000] <mkwst>
Let's blindly assert that it would be, and change all the browsers today.

[02:19:25.0000] <annevk>
I'm pretty sure it was intentional that undefined becomes "undefined"

[02:19:43.0000] <annevk>
I also don't really see why we'd change that

[02:19:45.0000] <mkwst>
Eh. I'm sure it was intentional. I just find it strange.

[02:19:55.0000] <annevk>
That's not a good enough reason to change it

[02:20:04.0000] <annevk>
See topic

[02:20:30.0000] <mkwst>
Eh.

[02:28:38.0000] <tobie>
mkwst: I guess your other option is to lobby for a [TreatNullAndUndefinedAsEmptyString] extended attribute.

[02:29:07.0000] <tobie>
mkwst: I take cash and bitcoins

[02:29:12.0000] <mkwst>
Or to add metrics and prove that there would be basically zero impact to the web if we made the change.

[02:30:10.0000] <tobie>
mkwst: I guess it all depends whether you value time or money more.

[02:31:03.0000] <mkwst>
Do you take amex?

[02:33:44.0000] <tobie>
mkwst: no, traceable, + the fees are too high.

[02:34:19.0000] <mkwst>
Ethereum it is.

[02:34:36.0000] <tobie>
mkwst: frankly, I'd be surprised if this change was web-compatible, so yeah, that seems like your safest option.

[02:34:58.0000] <mkwst>
Who do you think expects `innerHTML = undefined` to result in `"undefined"` showing up on their page?

[02:35:02.0000] <mkwst>
Like, no one, right? :)

[02:36:37.0000] <annevk>
mkwst: that's the normal behavior for things taking strings

[02:36:44.0000] <annevk>
mkwst: that null turns into "" is weird

[02:37:03.0000] <annevk>
mkwst: so I'd expect most people familiar with JavaScript to expect that

[02:37:37.0000] <mkwst>
annevk: I think the fact that we have magical behavior for `null` would make folks less likely to expect non-magical behavior for `undefined`.

[02:37:47.0000] <mkwst>
Especially when we treat them the same for explicitly nullable types.

[02:39:13.0000] <tobie>
mkwst: I agree, but that doesn't really matter, does it. The question is whether changing this will break stuff or not, and whether all vendors will be happy to move ahead with that change.

[02:39:48.0000] <mkwst>
Sure. And in the grand scheme of things, my claim is both that this is trivial, and that we've made larger changes successfully.

[02:39:58.0000] <annevk>
mkwst: I really don't see why we'd change this perfectly interoperable behavior of a legacy feature that's best avoided

[02:40:54.0000] <mkwst>
annevk: I suppose "It would be simpler to work around Chrome's bindings generation code's foibles" isn't a good enough answer for you? :)

[02:41:13.0000] <mkwst>
*shrug* I don't particularly enjoy leaving my sense of logic at the door.

[02:41:36.0000] <mkwst>
Making small changes to smooth out the rough edges of the platform is good.

[02:41:46.0000] <annevk>
Causing churn to all other browsers to make things easier for Chrome plus taking a potential compat risk? No thanks

[02:42:12.0000] <annevk>
I disagree that this would smooth anything out

[02:42:24.0000] <annevk>
Just goes from ugly A to ugly B

[02:42:39.0000] <mkwst>
You don't think the distinction between nullable types and "TreatNullAs" is confusing?

[02:43:20.0000] <mkwst>
If ugly B is 5 ugly, and ugly A is 6 ugly, then it's an improvement.

[02:43:29.0000] <mkwst>
Obviously there are costs.

[02:43:53.0000] <mkwst>
Which is why I'm not just landing the change and walking out the door. :)

[02:46:08.0000] <annevk>
I don't think the distinction matters (I do think we need to have undefined-able types at some point, that cannot take null)

[03:21:40.0000] <TimothyGu>
mkwst: at this point I would suggest not using [TreatNullAs] at all for your new API

[03:22:24.0000] <TimothyGu>
instead just use (DOMString? or SomeObjectType) + prose "if value is null, set value to ''"

[03:22:53.0000] <mkwst>
TimothyGu: I don't want to use `TreatNullAs`. I want to override `innerHTML` to accept a specific type in addition to a `DOMString`.

[03:23:19.0000] <Domenic>
Catching up... I strongly agree that TreatNullAs is very bad and we should get rid of it, not propagate it to also treat undefined as.

[03:23:23.0000] <mkwst>
Yeah. The issue there is that `?` means that `undefined` will be stringified as `""`, not `"undefined"`.

[03:23:26.0000] <Domenic>
Stringification is stringification

[03:23:46.0000] <Domenic>
If you want to measure something to change, measure removing TreatNullAs so that null stringifies like everything else

[03:24:07.0000] <TimothyGu>
mkwst: well, just change the idl for innerHTML to stop using TreatNullAs

[03:24:18.0000] <mkwst>
TimothyGu: Thanks. That's helpful. :P

[03:24:51.0000] <mkwst>
Domenic: I'd be happy to remove it. One way of doing so would be to shift to `DOMString?`, and add in some prose about what to do with `null`, as TimothyGu suggested.

[03:25:06.0000] <Domenic>
Well... no... I meant the other thing...

[03:25:15.0000] <Domenic>
Just do DOMString like all other string attributes...

[03:25:16.0000] <mkwst>
That brings us back to the question of whether or not we'd treat the... what other thing?

[03:25:25.0000] <TimothyGu>
oh I see what the problem is about undefined... sorry for not understanding it out-of-hand

[03:26:27.0000] <mkwst>
Domenic: Ah. For things like `innerHTML` that might be viable? It might be less viable for various bits of CSSOM that use the attribute.

[03:26:55.0000] <mkwst>
I imagine passing `null` into `setProperty` might be more common than assigning `null` to `innerHTML`.

[03:27:05.0000] <mkwst>
But we'd need to measure either way.

[03:27:15.0000] <Domenic>
*shrug* I dunno, just saying that if we're making theoretically web-breaking changes, they all seem reasonably plausible to me and I'd much rather stringify uniformly than special-case more values

[03:35:23.0000] <mkwst>
I think my claim was that doing things to `undefined` was pretty unlikely to be a web-breaking change. But, in any event, numbers would be helpful before deciding how much effort to put into any change at all.

[03:40:09.0000] <Domenic>
I think special-casing undefined would be a step backward (going from 5 ugly to 6)

[04:51:32.0000] <zcorpan>
Domenic: i'm pretty sure web compat depends on innerHTML = null meaning innerHTML = ""

[05:25:50.0000] <tobie>
mkwst: what do you want me to do with what do you want me to do with https://github.com/heycam/webidl/issues/441. Can I close it? And you reopen something around the undefined behavior later on?

[07:03:30.0000] <mkwst>
tobie: If the type annotation is the right answer, great! It's not entirely clear to me that it does what you say it does, but you're deeper in the spec than I am, so I trust you!

[07:05:46.0000] <tobie>
mkwst: well, it is the right answer to the question the issue asks. I don't think it's the right answer to what you want to do, however.

[07:19:22.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/pull/598

[07:20:01.0000] <JakeA>
annevk: ta, will do this now

[14:49:42.0000] <timwis>
Hey folks, is there any effort behind server-side rendering of custom elements? I imagine without that, SEO can take a hit (things like <h1> are given more weight by search engines, and if they're hidden inside a <my-header>...unless google's synchronous JS execution will handle that?), and there can be a flash of unstyled/initialised content (or at least missing elements until initialised?)

[14:49:55.0000] <timwis>
I'm trying to share components between a Vue.js app and a WordPress site so we only need to maintain one library.

[14:50:11.0000] <timwis>
(for government, at standards.phila.gov if you're interested)

[15:16:37.0000] <MikeSmith>
howdy timwis

[15:16:52.0000] <MikeSmith>
no discussion about anything like that been going on as far as I know


2017-09-20
[20:57:33.0000] <Domenic>
Has anyone upgraded to Safari 11 yet? Is that out for macOS or just iOS?

[20:57:42.0000] <Domenic>
Want to know if dynamic import() got shipped

[22:06:53.0000] <annevk>
Domenic: test? I have the iOS version

[22:12:46.0000] <Domenic>
annevk: let's try https://ripple-hacksaw.glitch.me/ although without a working impl in Chrome I'm not sure I coded it right

[22:16:06.0000] <annevk>
Domenic: green

[22:16:12.0000] <Domenic>
\o/

[22:25:37.0000] <gsnedders>
Domenic: presume it isn't shipping on macOS till High Sierra next week

[22:25:54.0000] <Domenic>
Ah OK, thanks

[22:36:06.0000] <belarm>
So - who's running the fork of w3c?

[22:37:41.0000] <belarm>
Now that the master branch has outlived its usefulness, I figure someone's started w3c-ng by now, right?

[22:42:36.0000] <belarm>
I don't get it. The Web was designed for research. How is enabling companies to cut the legs out from under researchers in the spirit of that?

[23:04:29.0000] <gsnedders>
belarm: you can argue the W3C got forked by the WHATWG because of the focus on XHTML 2 and RDF, and you can argue that's moving away from researchers

[23:05:09.0000] <gsnedders>
More seriously, everything is shades of grey.

[00:40:16.0000] <annevk>
Domenic: also green in the latest Safari TP on macOS

[00:41:54.0000] <annevk>
gsnedders: Domenic: looks like Safari 11 for macOS was released today/yesterday as well

[00:42:00.0000] <annevk>
gsnedders: Domenic: downloading now

[00:43:53.0000] <annevk>
Might take a while since Xcode is taking priority

[00:47:05.0000] <annevk>
yhirano__: maybe close all the issues in https://github.com/yutakahirano/fetch-with-streams/issues? It seems they're all better raised against whatwg/fetch at this point, if they're still relevant

[01:03:21.0000] <Domenic>
Does anything in the spec use the HTMLElement reflection from https://html.spec.whatwg.org/#reflecting-content-attributes-in-idl-attributes ?

[01:05:16.0000] <annevk>
Domenic: I suspect something in form, maybe label or some such

[01:06:17.0000] <annevk>
hmm no

[01:06:35.0000] <gsnedders>
annevk: oh, I couldn't see any evidence before at least here, but staged rollouts, etc

[01:07:26.0000] <annevk>
Domenic: gsnedders: also green on macOS Safari 11

[01:11:41.0000] <annevk>
Domenic: I can't find anything that uses reflect in that matter

[01:11:50.0000] <annevk>
Domenic: next step would be to run blame to figure out why it was introduced

[01:24:59.0000] <annevk>
Domenic: found https://github.com/whatwg/html/commit/ce5b422f2d8db7abb8e00b90adcc2681eb43ce28 but not what it's used for...

[01:30:38.0000] <annevk>
Domenic: per https://github.com/whatwg/html/commit/78009c8e5cb697ec51043cfae8396f7bccdfdce3 looks like it was for contextMenu

[01:31:00.0000] <annevk>
Domenic: now I've done all this research I'll go ahead and remove it

[01:34:52.0000] <annevk>
Ugh, the inability to ask for a review on whatwg/html is rather frustrating

[01:36:11.0000] <annevk>
JakeA: could you prepare a commit message for https://github.com/whatwg/fetch/pull/523?

[01:36:28.0000] <annevk>
JakeA: I'm going to land it and any remaining feedback we'll do as follow-ups

[01:42:29.0000] <JakeA>
annevk: oh wow, big day! Yeah will write a commit message now

[02:18:23.0000] <yhirano__>
annevk: thanks, will do

[05:20:23.0000] <belarm>
I'd actually frame it differently than moving away from research - CERN won't care about DRM. The *rest* of the web, on the other hand...

[05:22:14.0000] <belarm>
So far as I can tell, protecting the profitability of a handful of corporations has taken precedence over an open, accessible, and useful Web. Which kind of makes them useless as an organization.

[05:22:34.0000] <belarm>
*W3C, that is.

[05:24:20.0000] <belarm>
If we're just going to let megacorps decide the rules, why even have committees? Just turn the reigns over to the biggest company advising, and let them decide what the Web will be.

[05:36:39.0000] <nox>
Not sure what's your final point.

[05:37:21.0000] <belarm>
That the W3C is no longer relevant and should be replaced.

[05:38:15.0000] <nox>
That's been true for years.

[05:38:23.0000] <nox>
For HTML, specifically.

[05:38:30.0000] <nox>
CSSWG is fine, and other stuff at the W3C is fine too.

[05:39:31.0000] <belarm>
For now. How long before the same companies who pushed for DRM in HTML 5 start exerting their will elsewhere? For that matter, I posit that what it's done to HTML is bad enough - HTML is kinda important.

[05:41:45.0000] <nox>
What?

[05:42:01.0000] <nox>
You seem to think that the W3C is a monolithic thing,

[05:42:19.0000] <nox>
but people working on MSE, or on CSS animations, or on other specs managed by the W3C have very little to do with the EME mess.

[05:43:09.0000] <belarm>
Then those groups can function under different leadership. I was half sincere in my question - is there any competing standards body?

[05:43:47.0000] <belarm>
You're correct in that I don't know ... anything, really about the administration. I just know the tech, and that they've made a decision that leaves me with no confidence in them.

[05:43:55.0000] <nox>
There is the WHATWG.

[05:44:25.0000] <nox>
And I don't really see the point to try to move standards that have no issues to some other body.

[05:47:29.0000] <belarm>
At the risk of sounding hysterical, I think the EME decision demonstrates that corporate and patent interests are more important to the leadership of W3C (or at least those responsible for that decision, which I believe includes Berners-Lee) than ensuring the openness of the Web.

[05:47:48.0000] <belarm>
To me, that makes them suspect in the extreme.

[05:50:53.0000] <belarm>
</rant>, sorry.

[05:51:37.0000] <jgraham>
The W3C was irrelevant in the DRM thing. It was going to happen either way. It's sad that they didn't try to leverage their position to get some DMCA protection for people working on EME, but the fact is that DRM in the browser was already ubiquitos via flash and Google and Microsoft decided that they would ship it directly in the browser irrespective of standardisation.

[05:52:07.0000] <belarm>
The fact that people are doing it does not mean it has to be a standard.

[05:52:37.0000] <jgraham>
Whether it's formally a standard is irrelevant

[05:52:52.0000] <jgraham>
It doesn't change any outcome that anti-DRM people care about

[05:53:02.0000] <belarm>
Blessing the practice means companies can assume that capability - that's the whole point. It also frees them to use legal measures against technological problems that they cannot solve (like the fact that DRM doesn't work)

[05:53:09.0000] <jgraham>
Nope

[05:53:12.0000] <belarm>
I beg to differ, as an anti-DRM person.

[05:53:36.0000] <jgraham>
The fact of it shipping means that companies will assume it

[05:53:56.0000] <jgraham>
Indeed it is mostly shipping because the companies who wanted it to be there demanded it be there

[05:54:05.0000] <nox>
belarm: Content providers will use DRM one way or the other.

[05:54:21.0000] <jgraham>
I'm not aware of anything to suggest that the fact of it being a standard changes the legal position wither

[05:54:26.0000] <jgraham>
*either

[05:54:26.0000] <nox>
I don't have a problem with EME either, I have a problem with TBL arguing against protections for security researchers breaking their stuff.

[05:54:46.0000] <jgraham>
Yeah, it was unfortunate that the W3C didn't make a credible effort on that

[05:55:31.0000] <jgraham>
But blaming W3C for the fact of DRM on the web is missing the point in a way that seems very unhelpful to everyone

[05:55:37.0000] <belarm>
The way they did it, no, jgraham. But had they accepted one of the EFF's compromises that would have compelled member companies to swear off suing people for legitimate circumventions of DRM, that would have stopped them from doing it. Instead, they got everything they wanted.

[05:55:37.0000] <nox>
Amen.

[05:55:42.0000] <belarm>
"Unfortunate"

[05:55:51.0000] <belarm>
I'd say "damning"

[05:56:06.0000] <nox>
belarm: "Unfortunate" as in "I have absolutely no leverage on this topic and I don't want to feel miserable".

[05:56:19.0000] <belarm>
I never said they were responsible for DRM. I said their decision was wrong and makes them untrustworthy.

[05:56:28.0000] <jgraham>
Yes, they should have done that. It's disappointing they didn't. But a better measure there would be to change local laws

[05:56:34.0000] <nox>
belarm: I was just interpreting jgraham's choice of words. :)

[05:56:42.0000] <belarm>
...in over 200 countries, jgraham?

[05:56:53.0000] <nox>
belarm: Yes.

[05:56:54.0000] <nox>
Law > *

[05:57:00.0000] <belarm>
...

[05:57:02.0000] <belarm>
No.

[05:57:06.0000] <nox>
Yes.

[05:57:17.0000] <nox>
jgraham didn't say it was easily doable, or doable at all.

[05:57:23.0000] <belarm>
The net is a remarkably good at circumventing laws when they are bad. See the history of the Net.

[05:57:25.0000] <nox>
He was just stating it would be a better measure.

[05:57:39.0000] <nox>
s/when they are bad//

[05:57:51.0000] <belarm>
Fair point.

[05:57:57.0000] <jgraham>
belarm: I don't know if there are 200 countries with DMCA-like anti-circumvention clauses

[05:58:11.0000] <belarm>
There are 200 nation states who can decide to implement such laws at any time.

[05:58:20.0000] <jgraham>
But presumably if there are it's because someone managed to get them passed

[05:58:31.0000] <jgraham>
So it obviously isn't impossible

[05:58:36.0000] <belarm>
Then, there's a consortium that the companies actually want to be in, who could have MADE them play by fair rules. And didn't.

[05:58:58.0000] <belarm>
jgraham, multi-billion dollar companies with armies of lobbyists got those laws passed.

[05:59:20.0000] <belarm>
Grassroots campaigns won't overturn them - we've been trying that here for 16 years with the DMCA

[05:59:23.0000] <jgraham>
So, not impossible, but hard when those with money want it some other way?

[05:59:33.0000] <jgraham>
Welcome to capitalism I guess

[05:59:47.0000] <jgraham>
In any case any W3C covenant would only have covered EME

[05:59:55.0000] <belarm>
Essentially impossible. Yes, that is an outcome of capitalism. The W3C is not (supposed to be) a capitalist group.

[06:00:02.0000] <belarm>
"only"

[06:00:37.0000] <belarm>
Sorry, I know this isn't ya'lls fault. I appreciate the discussion.

[06:00:57.0000] <jgraham>
I don't even know what a capitalist group is. I also don't know what happened. Maybe the media companies just said "if you require that we will leave the W3C and standardise at ECMA"

[06:01:29.0000] <jgraham>
The point is that W3C's only card here was its brand name

[06:01:42.0000] <belarm>
A capitalist group would be one concerned with making money. The W3C is a non-profit organization.

[06:02:00.0000] <belarm>
Right. And if it won't use its brand name to defend open standards, then what good is it?

[06:02:56.0000] <jgraham>
belarm: So, hypothetical alternate scenario. W3C refused to standardise this. Exactly the same work happened at ISO, except now you have to pay to get the standard (is that still a thing?). Who benefits?

[06:03:56.0000] <annevk>
jgraham: W3C could have kept some credibility

[06:04:16.0000] <jgraham>
AFAICT the only practial difference in that situation is that you aren't complaining about the W3C. Which might be good for them; maybe this work was so toxic that it will kill them. But ppractically it makes no difference.

[06:04:27.0000] <jgraham>
You get the same DRM with the same DMCA

[06:06:31.0000] <annevk>
I would have liked to see that tested more

[06:06:54.0000] <annevk>
The way things went down timbl was happy to just let it happen

[06:07:38.0000] <annevk>
Didn't much try to get concessions

[06:07:53.0000] <jgraham>
Fair enough. But also the way it went down enough browsers shipped this before it was any kind of standard that I'm pretty sure that it would have happened in any case.

[06:07:55.0000] <annevk>
Didn't try to require sandboxing and get that defined in some manner

[06:08:21.0000] <annevk>
Yeah, I don't think anyone is disputing that

[06:08:29.0000] <annevk>
Though probably someone is

[06:10:01.0000] <jgraham>
/me goes back to worrying about Facebook and Google as tools of societal manipulation

[06:18:39.0000] <nox>
Anyone knows which task source is supposed to be used when queuing a task to run https://html.spec.whatwg.org/multipage/media.html#dedicated-media-source-failure-steps?

[06:21:48.0000] <belarm>
/me sets his laptop on fire

[06:22:40.0000] <belarm>
jgraham, ISO standards, having a cost of entry, are harder for small companies to implement. That would, I expect, inspire at least some of them to come up with a workaround - or simply refuse to implement it.

[06:22:59.0000] <belarm>
The work isn't toxic. The decision is.

[06:23:16.0000] <nox>
Not sure how the cost of entry helps in that direction.

[06:23:35.0000] <belarm>
jgraham, why can't I worry about both? They're FB and Google are trying to pull the same crap elsewhere.

[06:24:09.0000] <belarm>
Well, I can't prove my case, as this is a hypothetical.

[06:24:53.0000] <belarm>
But small projects (which is where most big projects start) would have a harder time implementing an ISO standard than a W3C one. ISO also doesn't have protection of the web as part of it's charter, so...

[06:27:36.0000] <belarm>
Oh, the votes are secret, too. How nice.

[06:31:58.0000] <Domenic>
nox: seems like a spec bug. I guess DOM manipulation task source probably, but please file.

[06:32:10.0000] <nox>
Domenic: I squinted hard,

[06:32:23.0000] <nox>
Domenic: and the spec actually says that the media element event task source should be used for this task.

[06:32:41.0000] <Domenic>
Oh, erm, OK. (I didn't know that task source existed...)

[06:33:10.0000] <nox>
Domenic: I wonder if the spec should always locally specify task source though.

[06:33:18.0000] <Domenic>
That seems nicer

[06:33:27.0000] <nox>
Domenic: It's painful to have to check in which section we are, and go find some previous paragraph that states which task source should be used.

[06:33:44.0000] <Domenic>
Oh wow each media element has its own task source that's fun

[06:33:57.0000] <nox>
Domenic: LALALA I HEARD NOTHING

[07:24:34.0000] <annevk>
jgraham: https://github.com/w3c/web-platform-tests/pull/7420 any idea what's going on?

[07:39:37.0000] <jgraham>
annevk: No. That seems to have happened a couple of times. We are currently rewriting all the import stuff, but it's a little troubling.

[07:40:05.0000] <annevk>
jgraham: if you could comment there whether you object to merging or not that'd be a good

[07:40:22.0000] <annevk>
jgraham: and also whether you want me to do some kind of follow-up to get this looked into

[07:42:23.0000] <jgraham>
annevk: No need to do a followup

[09:00:11.0000] <jgraham>
annevk: So that patch appeared in the list to be upstreamed, but didn't make it. I think I did something wrong during the process.

[09:00:32.0000] <jgraham>
This is why we are trying to remove me from the process as much as possible :)


2017-09-21
[23:09:29.0000] <gsnedders>
trying to add

[01:30:47.0000] <gsnedders>
idea for StackOverflow bot: comment on any answer using TR links (cc Domenic)

[05:14:07.0000] <annevk>
Domenic: one or more of your comments on https://github.com/whatwg/html/pull/3038 wasn't on the final diff

[05:14:16.0000] <annevk>
Domenic: which makes them hidden

[05:14:27.0000] <Domenic>
Oh, oops, sorry

[05:55:52.0000] <annevk>
Should we start archiving blame files for whatwg/html again?

[05:56:22.0000] <annevk>
Even on desktop it takes quite a while to compute them, downloading them would likely be faster

[05:56:28.0000] <annevk>
I guess I could just keep a local archive

[06:24:03.0000] <annevk>
JakeA: Domenic: put up a commit message at https://github.com/whatwg/html/pull/3038#issuecomment-331154972

[06:24:17.0000] <annevk>
JakeA: Domenic: I suggest we squash land this and don't try anything more fancy

[06:26:11.0000] <Domenic>
lgtm

[06:26:41.0000] <JakeA>
same

[06:33:25.0000] <annevk>
JakeA: will you follow-up with service workers on this?

[06:33:33.0000] <annevk>
JakeA: to potentially redo the job stuff?

[06:33:53.0000] <annevk>
JakeA: there was a lot of talk about that in the original issue I just realized that we didn't quite touch on yet

[06:37:22.0000] <JakeA>
annevk: Created https://github.com/w3c/ServiceWorker/issues/1197 for it. It isn't a small job, but yeah I think it'd clean stuff up a lot.

[06:38:44.0000] <JakeA>
annevk: added it to me todo list, but want to get the abortable fetch + service worker stuff done first

[06:38:57.0000] <JakeA>
s/me/my I didn't mean to sound like Oliver Twist

[06:49:58.0000] <wanderview>
JakeA: are "parallel queues" equivalent to SW job queues, though?

[06:50:20.0000] <wanderview>
I'm not sure I want to rewrite our job queue code again

[06:51:24.0000] <JakeA>
wanderview: the change should be editorial

[06:51:32.0000] <wanderview>
ok

[06:51:33.0000] <JakeA>
it's a pita in the spec

[06:52:03.0000] <wanderview>
JakeA: I've been wondering how many PITA spec stuff you are going to do before you decide you want to travel giving talks again :-)

[06:53:14.0000] <JakeA>
wanderview: haha well umm I may have booked myself into a Bangalore and Singapore trip in December and January

[06:53:18.0000] <JakeA>
Going to keep a balance though

[06:53:22.0000] <JakeA>
hopefully

[06:53:31.0000] <wanderview>
cool

[06:53:59.0000] <JakeA>
A family holiday coincides with Chrome Dev Summit this year, which got me off the hook for all that work

[07:11:57.0000] <nox>
JakeA: How dare you prioritise family over dev summits!!1!

[07:13:47.0000] <JakeA>
nox: It is in-laws, so it's not all fun. I mean, they're lovely but there's always that extra layer of filtering that needs to be active to avoid saying anything wrong.

[07:14:04.0000] <nox>
JakeA: DO YOU MEAN CSS FILTERS

[07:14:07.0000] <nox>
:)

[07:14:53.0000] <JakeA>
Well, in CSS terms it's .liberal-opinions { display: none; } unfortunately

[07:15:33.0000] <nox>
JakeA: Ah ah.

[07:16:07.0000] <JakeA>
They're not that bad, just a bit Daily Mail.

[07:16:27.0000] <annevk>
JakeA: but you enjoy that kind of stuff all the time on Twitter

[07:16:47.0000] <nox>
JakeA: I always have to remember where the people I talk to come from,

[07:16:59.0000] <nox>
because to the French me, "liberal" is usually a swear word.

[07:17:43.0000] <JakeA>
annevk: yeah, but I don't have to have Christmas dinner with the people on Twitter :D

[07:18:52.0000] <tantek>
JakeA, I bet you're good at asking the right questions tho

[07:19:58.0000] <JakeA>
tantek: I dunno, questions sound dangerous

[07:21:21.0000] <wanderview>
JakeA: wait, do they display the English flag?

[07:21:42.0000] <annevk>
I like pushing my in-laws a little bit

[07:21:43.0000] <Ms2ger>
English or UK? :)

[07:21:46.0000] <JakeA>
wanderview: nah they're not racist

[07:22:08.0000] <wanderview>
Ms2ger: English... apparently its become the flag of extreme right in UK

[07:22:24.0000] <wanderview>
JakeA: well, thats something you can talk about then

[07:22:41.0000] <annevk>
They came around on Sinterklaas being racist after all

[07:23:57.0000] <nox>
Latest far right drama around here is food-related, an exec from the Front National took a selfie eating a couscous instead of choucroute while being in Strasbourg.

[07:24:21.0000] <annevk>
Sounds pretty serious

[07:24:41.0000] <nox>
Part of his own party's electoral base was so disappointed he called them idiots publicly, amazing.

[07:26:07.0000] <Ms2ger>
Couscous trucks on every corner?

[07:26:38.0000] <nox>
Hah.

[07:30:51.0000] <JakeA>
haha

[07:31:58.0000] <wanderview>
JakeA: I guess Cache.add() should just work with abortable fetch if the signal is passed through correctly?

[07:32:06.0000] <wanderview>
I wonder if we have a test for that yet

[07:33:04.0000] <wanderview>
/me sees a typo in his tweet.

[07:33:19.0000] <JakeA>
wanderview: hmm, I don't think we do. I'll add that when I do the SW tests

[07:33:25.0000] <JakeA>
wanderview: When is 57 beta?

[07:33:42.0000] <wanderview>
JakeA: dev-edition is the same binary as beta... official beta release is next week

[07:34:30.0000] <wanderview>
JakeA: maybe I shouldn't point people at dev-edition 57 yet... but I don't care :-)

[07:34:38.0000] <JakeA>
wanderview: niiiice! I'll get an abortable fetch post for https://developers.google.com/web/updates/ together tomorrow

[07:34:58.0000] <wanderview>
thanks!

[07:35:17.0000] <JakeA>
wanderview: Pointing at dev is totally fine, (I think) we just try and limit /web/updates/ stuff to things heading for stable

[07:36:11.0000] <JakeA>
Usually Chrome stable of course, but y'know, whatever

[07:36:17.0000] <wanderview>
JakeA: here is the dev-platform mail where we indicated we are going to ship: https://groups.google.com/d/msg/mozilla.dev.platform/jk6XtUch4GQ/RnlbpugIAQAJ

[07:36:43.0000] <JakeA>
ta!

[07:39:29.0000] <wanderview>
wish we could have gotten streams in for 57

[08:36:05.0000] <JakeA>
Domenic: if a method returns a promise that resolves once an action completes, and the completion of that action also causes an event, which order should they be queued? https://github.com/whatwg/html/pull/1936 is promise-first, which is what I've gone with in similar code. Is that "the way"?

[08:49:07.0000] <annevk>
JakeA: look at fullscreen?

[08:49:25.0000] <annevk>
JakeA: we should abstract this pattern…

[08:49:40.0000] <JakeA>
annevk: aha, cheers!

[08:59:47.0000] <annevk>
JakeA: you generally need a task to resolve a promise so might as well dispatch at that point

[09:00:15.0000] <annevk>
JakeA: otherwise you get two tasks or an additional microtask

[09:00:51.0000] <annevk>
JakeA: I hope that is what fullscreen does anyway

[09:09:06.0000] <JakeA>
annevk: full screen is different as the full screen events happen as part of the render steps of the event loop, whereas the promise resolves sooner.

[09:09:51.0000] <JakeA>
So the promise resolves before the element is actually fullscreen, I think

[09:11:26.0000] <JakeA>
https://github.com/whatwg/html/pull/1936/ queues two tasks, one for the promise and one for the event.

[10:08:05.0000] <luxio>
is whatwg like w3c?

[12:25:01.0000] <leclerc>
luxio: it's what w3c hopes to be when they grow up one day.

[12:31:50.0000] <wanderview>
JakeA: it seems to me the ready promise should fire here... what do you think? https://sw-ready-resurrection.glitch.me/

[12:33:42.0000] <wanderview>
JakeA: both chrome and firefox fail to ever resolve the ready promise there even though there is a live registration.active service worker for the current scope

[12:41:25.0000] <annevk>
JakeA: hmm I’ll look tomorrow then

[12:50:16.0000] <wanderview>
JakeA: I filed it as an issue: https://github.com/w3c/ServiceWorker/issues/1198

[13:44:16.0000] <luxio>
leclerc: what would convince browser developers to follow whatwg standards instead of w3c?

[13:44:25.0000] <luxio>
w3c already has microsoft, google, apple, netflix, etc on their side

[13:44:54.0000] <luxio>
the fact that they have mozilla and google is practically enough

[13:52:22.0000] <TabAtkins>
luxio: leclerc was trolling.

[13:53:12.0000] <TabAtkins>
WHATWG is a standards organization, similar to W3C. It has some slightly different practices, and some interesting history related to the HTML spec, but is mostly interchangeable with W3C.

[13:54:45.0000] <TabAtkins>
When a spec exists both in WHATWG and W3C, it's almost always the case that the WHATWG version is the maintained one, and the W3C version is an outdated fork.  Browser devs already generally follow the WHATWG versions of specs, for this reason.  (There are arcane patent-related reasons for the W3C versions to exist, but they're still generally maintained badly, which sucks.)

[13:56:38.0000] <luxio>
so why's everyone going crazy about EME?

[14:11:01.0000] <TimothyGu>
luxio: well some people don't think it should exist in the Web platform, and some people within that group are more vocal than others

[14:11:38.0000] <luxio>
but if people follow whatwg rather than w3c, does w3c standardizing DRM really mean anything?

[14:12:28.0000] <TimothyGu>
well, TabAtkins only specified the situation when both a WHATWG version and a W3C version of the same spec exist

[14:12:33.0000] <TimothyGu>
EME is a W3C-only spec

[14:12:48.0000] <TimothyGu>
heck, we even link to W3C specs from WHATWG specs

[14:12:57.0000] <TimothyGu>
and vice versa too

[14:13:59.0000] <TimothyGu>
luxio: ^^

[14:14:56.0000] <TabAtkins>
Yeah, WHATWG only maintains a dozen or so specs. Most web specs are done in the W3C.

[14:29:34.0000] <leclerc>
TabAtkins: I wasn't "trolling", I was "joking". What you said about W3C is quite more uncomfortable. WHATWG also has some weaknesses that make IETF and W3C a necessary source.


2017-09-22
[22:33:40.0000] <gsnedders>
Things I dislike about writing specs in English: no type-checker

[00:54:54.0000] <annevk>
gsnedders: maybe one day? I feel like we're getting closer

[01:23:44.0000] <gsnedders>
annevk: I kinda want to implement a high-level version of a bunch of stuff in Dafny

[01:23:52.0000] <gsnedders>
annevk: for the sake of checking types

[01:30:11.0000] <xfq>
rewrite the specs in Coq?

[01:30:12.0000] <xfq>
;)

[01:31:02.0000] <Domenic>
This is like a weekly meme now...

[01:31:11.0000] <MikeSmith>
xfq: be careful, he will take you seriously

[01:31:13.0000] <Domenic>
The language rotates though

[01:32:25.0000] <gsnedders>
MikeSmith: what, me and formal methods? never. :P

[01:47:17.0000] <JakeA>
TypeShed – a tool that turns TypeScript into prose.

[01:48:36.0000] <JakeA>
import inParallel from "/in parallel";

[01:48:37.0000] <JakeA>
etc etc

[01:49:01.0000] <JakeA>
if someone could build and ship that before lunch that'd be great

[01:52:53.0000] <TimothyGu>
tobie: thanks for fixing up the rfc keywords :)

[01:53:21.0000] <Mek>
even better if it could also automatically create tests from it :P

[01:57:53.0000] <JakeA>
I see a lot of specs not linking terms like "in parallel", "while", "resolve" etc. Should the aim be to link all of these, or is it considered overkill?

[02:04:36.0000] <TimothyGu>
mkwst: according to a brief google search xuebang.com.cn is basically ratemyprofessors but for Chinese universities

[02:04:48.0000] <TimothyGu>
well, supposed to be

[02:05:16.0000] <mkwst>
TimothyGu: Based on my experience with HTTP Archive, I assume everything is porn.

[02:05:29.0000] <mkwst>
Especially if it contains "bang" in the title, `.cn` TLD or not. :)

[02:05:51.0000] <TimothyGu>
lol that's honestly a good assumption

[02:13:36.0000] <annevk>
JakeA: not sure about "while" and "resolve" really needs https://github.com/w3ctag/promises-guide/issues/27 fixed first

[02:13:47.0000] <annevk>
JakeA: "in parallel" should really be linked

[02:16:58.0000] <JakeA>
ta!

[02:29:49.0000] <Ms2ger>
(The internet is really great... For porn)

[02:36:36.0000] <MikeSmith>
?

[02:36:48.0000] <MikeSmith>
that’s kind of .. out of the blue

[02:40:11.0000] <gsnedders>
eh, I think referencing Hixie's favourite (former favourite?) musical is on-topic in here :P

[02:43:01.0000] <Domenic>
I'd rather we not :-/

[02:46:24.0000] <Ms2ger>
/me blames mkwst

[02:46:54.0000] <mkwst>
MikeSmith: https://github.com/whatwg/html/pull/3011#issuecomment-331391908 <--

[02:48:18.0000] <MikeSmith>
/me looks

[02:48:33.0000] <MikeSmith>
aha

[02:50:00.0000] <MikeSmith>
btw great twitter photo there mkwst

[02:50:31.0000] <mkwst>
I thought it'd only be funny to me, but people seem amused. :)

[02:50:50.0000] <MikeSmith>
made me laugh :)

[02:51:15.0000] <MikeSmith>
anyway I have to tell you I am very sad that I went to all the trouble of attending BlinkOn just so that I could hang out with you, but then you didn’t show up

[02:51:21.0000] <mkwst>
!!!

[02:51:37.0000] <MikeSmith>
hehe

[02:51:50.0000] <MikeSmith>
I made the best of it in spite of the disappointment

[02:52:03.0000] <mkwst>
Sorry. It's the second week of school: my wife is a teacher, and my oldest daughter just started first grade. My life is way too chaotic right now to jaunt off to Tokyo for a week. :/

[02:52:12.0000] <mkwst>
I'll be at TPAC, though!

[02:52:23.0000] <MikeSmith>
yeah was just trolling

[02:52:27.0000] <mkwst>
In lovely and exciting Burlingame!

[02:52:36.0000] <MikeSmith>
will look forward to seeing you there

[02:52:56.0000] <MikeSmith>
and look forward to exploring the dark side of Burlingame

[02:53:09.0000] <MikeSmith>
the seedy side I should say

[02:53:27.0000] <MikeSmith>
people claim there is no seedy side to Burlingame

[02:53:44.0000] <mkwst>
All I know is that I drive through Burlingame on my way to the airport. And never felt any need to stop.

[02:54:00.0000] <MikeSmith>
yeah that seems to be the common experience

[02:54:08.0000] <gsnedders>
yeah, I feel unconvinced there's anything of value there

[02:54:46.0000] <MikeSmith>
well the places that everybody habitually overlooks are the places where you get by with doing some pretty crazy stuff without attracting attention

[02:55:28.0000] <gsnedders>
So… Tokyo?

[02:55:46.0000] <MikeSmith>
yeah

[02:56:21.0000] <MikeSmith>
there are many overlooked parts of Tokyo that are orders of magnitude more interesting than the well known parts

[02:56:35.0000] <MikeSmith>
anyway

[06:32:44.0000] <annevk>
https://twitter.com/wikipediachain/status/911213522218078209

[06:50:19.0000] <annevk>
JakeA: did you know about https://dxr.mozilla.org/mozilla-central/source/dom/webidl/FetchObserver.webidl?

[06:50:26.0000] <annevk>
JakeA: should we create a tracking issue for that?

[06:50:46.0000] <annevk>
Also https://dxr.mozilla.org/mozilla-central/source/dom/webidl/Request.webidl#59

[06:51:22.0000] <annevk>
And https://developer.mozilla.org/en-US/docs/Web/API/FetchObserver

[06:51:29.0000] <annevk>
I've been missing out

[07:18:27.0000] <JakeA>
whuuuuuut

[07:18:37.0000] <JakeA>
annevk: haha no I was not aware

[07:18:59.0000] <JakeA>
I guess I should be careful what I say in public

[07:19:08.0000] <gsnedders>
JakeA: why are you not aware of everything?

[07:21:12.0000] <annevk>
JakeA: what did you say in public?

[07:21:16.0000] <JakeA>
I know right. Gotta up my game.

[07:21:59.0000] <JakeA>
annevk: I mean, I roughly sketched FetchObserver, and now it's in Firefox & MDN

[07:22:56.0000] <JakeA>
(I say "I", really we're all to blame here)

[07:24:19.0000] <annevk>
ooh

[07:24:39.0000] <annevk>
Yeah Andrea told me he implemented from https://github.com/whatwg/fetch/issues/447#issuecomment-281731850

[07:24:50.0000] <annevk>
Pretty eager

[07:38:48.0000] <wanderview>
JakeA: its in MDN?  its disabled behind a flag because we are not shipping it yet

[07:39:07.0000] <wanderview>
annevk: JakeA: FetchObserver is disabled by default in firefox AFAIK

[07:39:23.0000] <wanderview>
hmm... or is it

[07:39:58.0000] <JakeA>
we only have a half-baked idea right now, and no tests or spec, so it probably shouldn't ship :D

[07:40:03.0000] <wanderview>
yes, its disabled

[07:40:22.0000] <wanderview>
annevk: this was when we were trying to push forward on cancelation a bit earlier in the year

[07:40:24.0000] <JakeA>
cool to see it was implementable though!

[07:42:34.0000] <wanderview>
I guess MDN says its disabled by default

[07:42:46.0000] <wanderview>
probably just made some extra work for the dev-doc folks

[09:07:42.0000] <annevk>
wanderview: baku was asking when it was going to be standardized so he could flip the pref

[09:19:11.0000] <jyasskin>
annevk: I'm finally working on pulling permissions.request() into an incubation, in https://jyasskin.github.io/permissions-request/. Sorry I didn't get to that way sooner.

[09:20:27.0000] <annevk>
jyasskin: I don't really care about that distinction personally

[09:20:53.0000] <jyasskin>
annevk: 'k. I don't have a particularly strong opinion on making it general vs specific.

[09:20:55.0000] <annevk>
jyasskin: I mostly care about the spectrum of wide support - single vendor support - no support

[09:21:52.0000] <annevk>
jyasskin: one thing I've wondered with the generic variant is whether it has side effects

[09:22:04.0000] <annevk>
jyasskin: does getting the persistent storage permission also make your storage persistent

[09:22:06.0000] <annevk>
for instance

[09:22:26.0000] <jyasskin>
annevk: Ah, my rule is that something with no- or single-vendor support should be an incubation, and we should pull it into the standards process when it has wider support.

[09:22:27.0000] <annevk>
or does it just flip the permission bit and you still have to flip the persistent bit yourself using persist()

[09:23:24.0000] <annevk>
anyway, I guess at this point I can say there's some interest in the more limited variant of request() for a couple one-off legacy APIs that don't have a permission framework around them

[09:23:36.0000] <annevk>
but I haven't verified with mt

[09:23:39.0000] <jyasskin>
annevk: Is there anything more detailed about persistent storage than the single bit? If not, I'd lean toward having-permission makes everything persistent.

[09:24:11.0000] <annevk>
jyasskin: at some point there might be

[09:24:20.0000] <annevk>
jyasskin: once we have multiple boxes

[09:24:42.0000] <annevk>
jyasskin: so yeah, I think I wouldn't like a generic API either

[09:25:05.0000] <annevk>
I vaguely recall this being a concern back in the day too, but I'm not sure we ever discussed it in detail

[09:25:07.0000] <jyasskin>
What would make a site want some of its boxes to be persistent but others not?

[09:26:03.0000] <annevk>
jyasskin: make vital persistent, but leave large assets to be collected as needed to avoid being blamed for taking up all the storage when the user runs out

[09:26:46.0000] <jyasskin>
Thinking about it more, I think I lean toward saying that if the API isn't generic, it should be spelled "requestFoo(...)" instead of "request({name: 'foo', ...})"

[09:27:11.0000] <jyasskin>
But maybe I've missed an advantage of the {name:'foo', ...} option.

[09:34:28.0000] <annevk>
jyasskin: I never really understood why permissions were made that complicated

[09:34:40.0000] <annevk>
jyasskin: implementations still mostly use strings

[09:35:06.0000] <annevk>
jyasskin: and dialogs to users should hardly ever have more complexity than something resembling a string either

[09:35:54.0000] <jyasskin>
annevk: Why they have internal structure? Some things, like cameras, have internal structure. It's dumb that browsers don't let the user pick *which* camera to grant access to.

[09:36:41.0000] <jyasskin>
I'm not convinced that {name:'midi', sysex:true} was a good idea: that could have been "midi-sysex".

[09:36:46.0000] <jyasskin>
But it predates my involvement.

[09:37:27.0000] <annevk>
jyasskin: I think that's true, but wouldn't the permission still be camera access?

[09:38:07.0000] <annevk>
jyasskin: or do we want apps to ask for each camera individually? I don't think iOS does that and it'd seem rather annoying if that's how things worked

[09:39:43.0000] <jyasskin>
If you look at the specific camera 'request' function, it's got loads of arguments: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Parameters. I think we want the app to describe the cameras that'll work for them, and then users to select which cameras to grant access to.

[09:39:45.0000] <jyasskin>
It's similar to how file access works. iOS also doesn't make the app get permission to access each file individually, but that's insecure.

[09:40:40.0000] <annevk>
Yeah, I guess what I'm saying is that at the permission level I still see that as a single bit

[09:40:57.0000] <annevk>
"This site can play with the camera infrastructure"

[09:41:37.0000] <annevk>
But it's a good reason not put it in a generic request() API

[09:41:44.0000] <jyasskin>
(I'm wrong about iOS file access: they have only sandboxed files. Android does it the insecure way.)

[09:42:50.0000] <jyasskin>
I think "can play with the camera infrastructure" isn't the kind of permission we should be asking users about, and the permissions API (and infrastructure) should reflect the kinds of questions we actually ask.

[09:43:40.0000] <jyasskin>
I agree that nothing here argues for or against a generic API. I've been pushing slightlyoff to give me code that a generic API allows, which a specific one wouldn't.

[09:44:29.0000] <annevk>
jyasskin: I guess my main question at this point is that issue I just raised

[09:44:54.0000] <annevk>
jyasskin: is that something you/Chrome are interested in or should we pursue something more specific somehow

[09:45:14.0000] <annevk>
I wonder if anyone is volunteering to maintain legacy orientation/motion events

[09:45:37.0000] <annevk>
I guess I could take a look at some point, but I'm worried there's all kinds of yak shaving to be done there

[09:46:30.0000] <jyasskin>
Not speaking for Chrome here, but I'd vote for requestSensors() and requestClipboard(...). instead of request('sensors'), etc. I'm still discussing the clipboard aspect with Raymes and Gary.

[09:47:44.0000] <annevk>
kk

[09:47:57.0000] <jyasskin>
annevk: I've started to put together https://docs.google.com/spreadsheets/d/1xWK4uf5O3v7xTo85U3X0gGVNfJLD8_W8Zt93BO37we4/edit?ts=59b895ce#gid=0 to comprehensively describe how we guard platform capabilities, which isn't just with permissions. It's not complete, but you might enjoy it.

[09:49:22.0000] <annevk>
That does look like fun

[12:26:49.0000] <jyasskin>
Could someone (MikeSmith?) install https://github.com/apps/pr-preview on the https://github.com/w3c/permissions repository?

[12:27:48.0000] <jyasskin>
Oh, nm. It's not listed in the repository, but https://github.com/tobie/pr-preview says it's already enabled.

[12:29:15.0000] <tobie>
jyasskin: add a config file using: https://tobie.github.io/pr-preview/config.html

[12:29:24.0000] <tobie>
jyasskin: and you'll be good to go

[12:30:19.0000] <jyasskin>
Turns out we already have that file. D'oh.

[12:37:32.0000] <tobie>
jyasskin: and it's not working?

[13:02:00.0000] <jyasskin>
tobie: Some older PRs have previews, but https://github.com/w3c/permissions/pull/159 doesn't yet. I thought it might just be being slow, but maybe it's broken?

[13:47:10.0000] <tobie>
jyasskin: I should find a way to do error reporting, but I'm not sure how.

[13:47:49.0000] <tobie>
jyasskin: in general, if it takes longer than 30-60 seconds, there's a problem.

[13:50:48.0000] <mathiasbynens>
aaah, so that’s what it means https://github.com/tc39/ecma262/pull/1010#issuecomment-331554667

[13:54:25.0000] <tobie>
jyasskin: I'm not seeing this show up in the logs

[13:55:15.0000] <jyasskin>
tobie: Whee.

[13:55:37.0000] <jyasskin>
I can push an update to see if that sends the right ping.

[13:56:14.0000] <tobie>
jyasskin: just editing text of the issue is enough to restart a build

[13:56:21.0000] <tobie>
*the

[13:56:32.0000] <tobie>
jyasskin: add a couple of line breaks

[13:56:47.0000] <jyasskin>
Edited.

[14:01:35.0000] <tobie>
jyasskin: ok, something's broken somewhere

[14:02:22.0000] <tobie>
jyasskin: GH's been flakey today, so is it not sending webhooks?

[14:02:23.0000] <jyasskin>
tobie: Thanks for checking.

[14:04:37.0000] <tobie>
jyasskin: I just restarted the server. Can you poke the PR another time?

[14:06:04.0000] <jyasskin>
tobie: Poked.

[14:06:55.0000] <tobie>
jyasskin: webhooks aren't working.

[14:08:01.0000] <jyasskin>
😢

[14:13:39.0000] <tobie>
jyasskin: weird, seems like an issue with the whole W3C org.

[14:19:40.0000] <tobie>
jyasskin: pinged W3C sysreq

[14:21:40.0000] <tobie>
jyasskin: working off the assumption pr-preview was removed from the W3C repo by someone, as it's still working for WHATWG, WebIDL, WICG, etc.

[14:21:52.0000] <tobie>
s/repo/org/

[14:46:01.0000] <tobie>
jyasskin: can you give it another try. My logs say someone added the whole org back a couple of minutes ago.

[14:46:52.0000] <jyasskin>
tobie: I've added a newline.

[14:51:28.0000] <tobie>
jyasskin: never mind, I can't read a log to save my life.

[14:51:33.0000] <jyasskin>
:)

[14:52:07.0000] <tobie>
jyasskin: this was the log of someone removing it, not adding it, and it was earlier today, not minutes ago.

[14:52:32.0000] <jyasskin>
tobie: Recall that this discussion started when I missed that my repository already contained a .pr-preview file.

[14:53:58.0000] <tobie>
jyasskin: heh. It's midnight here, on Friday night, and I has some excellent wine earlier, so there's also that.

[14:54:25.0000] <tobie>
MikeSmith: the logs show your handle mucking with stuff in this area today. Was this removal accidental?

[15:00:35.0000] <tobie>
jyasskin: OK, so the logs are confusing cause they're async and there's been quite some toggling of that setup button happening today. So the outputs are all intertwined.

[15:01:42.0000] <tobie>
jyasskin: currently, the app is not longer installed for the W3C org. MikeSmith needs to fix that.

[15:02:18.0000] <jyasskin>
I like how my first request was correct, but for the wrong reason.

[15:09:45.0000] <tobie>
jyasskin: that's a pretty cool twist, I agree.

[15:11:00.0000] <tobie>
Darn, where is botie

[16:57:12.0000] <MikeSmith>
tobie: where?

[16:57:35.0000] <MikeSmith>
ah the preview/diff thing

[16:58:03.0000] <MikeSmith>
yeah I tried to set that up for a specific repo, but from what you said it appears I disabled it for the entire rest of the org?

[16:58:09.0000] <MikeSmith>
if so I wonder how do I fix it

[16:59:45.0000] <MikeSmith>
OK I just went back in and in the *Repository access* setting for it, I changed it (back?) to *All repositories*


2017-09-23
[17:00:02.0000] <tobie>
MikeSmith: that should help

[17:00:04.0000] <tobie>
:D

[17:00:12.0000] <tobie>
it's a blanket install

[17:00:13.0000] <MikeSmith>
sorry :)

[17:00:17.0000] <MikeSmith>
ah OK

[17:00:25.0000] <MikeSmith>
well if that’s not what it should be or if that doesn’t fix it, lemme know

[17:00:29.0000] <tobie>
to enable it for a given repo, just add the json file to it

[17:00:35.0000] <MikeSmith>
aha

[17:00:38.0000] <MikeSmith>
OK

[17:00:53.0000] <tobie>
jyasskin: can you give it another try, now?

[17:01:06.0000] <MikeSmith>
I should have read the instructions before going in there and bashing at the buttons

[17:01:21.0000] <jyasskin>
'k, poked.

[17:02:19.0000] <jyasskin>
tobie: It worked!

[17:02:20.0000] <MikeSmith>
tobie: also just restarted botie

[17:03:01.0000] <tobie>
jyasskin: cool

[17:03:10.0000] <tobie>
MikeSmith: thanks

[17:32:31.0000] <MikeSmith>
tobie: and sincerely sorry again for having caused you to burn up up time. I promise I’ll be more careful I’ll be more careful next occasion I run across another thing you’ve set up

[23:52:33.0000] <tobie>
MikeSmith: don't worry about it. We all make mistakes.

[01:16:41.0000] <nox>
tobie: The Web doesn't.

[11:18:46.0000] <ondras>
so, a @counter-style question

[11:18:49.0000] <ondras>
https://jsfiddle.net/8d5jxc5a/

[11:19:11.0000] <ondras>
how am I supposed to get an empty string instead of "0" for a zero counter value?


2017-09-24
[03:40:37.0000] <leclerc>
I'm curious what WHATWG thinks of the newly accepted W3C EME https://www.w3.org/TR/encrypted-media/

[03:41:36.0000] <KiChjang>
leclerc, in short, not good https://blog.whatwg.org/drm-and-web-security

[03:41:51.0000] <leclerc>
KiChjang: thank you

[03:44:46.0000] <leclerc>
KiChjang: I'm confused what this means for W3C, how can they make a standard for DRM that browser vendors refuse?

[03:44:57.0000] <leclerc>
I mean, what's the point of them even going with it.

[03:45:04.0000] <leclerc>
It'll only make them look even less relevant.

[03:45:17.0000] <KiChjang>
unfortunately i don't think i'm the right person who can give an adequate answer to that

[03:45:25.0000] <KiChjang>
Domenic or annevk may be able to

[03:45:44.0000] <Domenic>
All browsers implement EME

[03:46:19.0000] <Domenic>
There are many standards created at the W3C that are not paid attention to by browser vendors. EME is not one of those.

[03:47:02.0000] <leclerc>
Is they implement EME, then what's even the controversy about.

[03:47:05.0000] <leclerc>
If*

[03:48:42.0000] <KiChjang>
the blog post actually says so in the last few paragraphs - it's about not suing security researchers who study EME

[03:50:28.0000] <leclerc>
Installing EME agents... I can't think of a browser that allows users to do that. Which means the vendors themselves choose what agent to embed.

[03:50:30.0000] <leclerc>
Or am I wrong.

[03:59:33.0000] <gsnedders>
leclerc: yes, CDMs are not generally installable components

[04:00:07.0000] <leclerc>
gsnedders: thanks


2017-09-25
[20:59:31.0000] <xfq>
the "Participate" and "Tests" headers of the DOM Standard look weird

[20:59:34.0000] <xfq>
there are unclosed parens

[20:59:37.0000] <xfq>
is it a known issue?

[21:10:31.0000] <MikeSmith>
xfq: hmm yeah, something broken there

[21:13:12.0000] <MikeSmith>
maybe a regression in bikeshed

[21:13:48.0000] <MikeSmith>
the source just has this:

[21:13:53.0000] <MikeSmith>
!Participate: <a href=https://github.com/whatwg/dom>GitHub whatwg/dom</a> (<a href=https://github.com/whatwg/dom/issues/new>new issue</a>, <a href...

[21:14:27.0000] <MikeSmith>
!Tests: <a href=https://github.com/w3c/web-platform-tests/tree/master/dom>web-platform-tests dom/</a> (<a href=https://github.com/w3c/web-platform-tests/...

[21:16:26.0000] <MikeSmith>
,,,

[21:16:35.0000] <MikeSmith>
and I can’t reproduce it locally

[21:16:51.0000] <MikeSmith>
but then my bikeshed isn’t the latest

[21:21:29.0000] <MikeSmith>
hmm just updated my bikeshed to the latest but I still can’t reproduce this

[21:21:51.0000] <MikeSmith>
xfq: file a DOM spec bug?

[22:35:27.0000] <xfq>
MikeSmith: Infra (13 September 2017) also has this issue, but URL (18 September 2017) doesn't

[22:35:47.0000] <MikeSmith>
interesting

[22:36:00.0000] <MikeSmith>
I have no idea what the cause might be

[22:36:09.0000] <MikeSmith>
maybe annevk will

[22:36:34.0000] <xfq>
the closest issue I can find is: https://github.com/tabatkins/bikeshed/issues/1097

[22:36:49.0000] <annevk>
Bikeshed issue

[22:37:01.0000] <annevk>
We just need to generate new copies

[22:37:46.0000] <xfq>
so just triggering Travis will solve this issue?

[22:38:04.0000] <annevk>
I suspect so

[22:38:05.0000] <TabAtkins>
Yup, dom just happened to last generate in the few hours when the bug was present.

[22:38:40.0000] <annevk>
I can look at it in a couple of hours

[23:54:42.0000] <annevk>
Domenic: are worklets JavaScript modules?

[23:54:49.0000] <annevk>
Domenic: I wonder if we resolved that already

[00:10:34.0000] <annevk>
We did: https://drafts.css-houdini.org/worklets/

[01:06:30.0000] <annevk>
JakeA: would be good to have a thumbs up/down from you on https://github.com/whatwg/fetch/pull/527

[01:06:48.0000] <annevk>
JakeA: mostly about the service worker selection for worklets part

[01:07:22.0000] <annevk>
jungkees: same goes for you, if you have the time

[01:08:31.0000] <jungkees>
annevk: thanks for the notice. I'll check it out

[01:34:24.0000] <JakeA>
looking now

[01:56:13.0000] <annevk>
mkwst: I guess you're okay with https://github.com/whatwg/fetch/pull/527 going with distinct destinations for the different worklet types?

[01:56:28.0000] <annevk>
mkwst: it seems a little safer to just mark them differently from the outset

[02:15:32.0000] <mkwst>
annevk: Yes. Totally fine with that. We can always reduce granularity in the future if we feel the need, but starting with more specific data seems right.

[03:21:06.0000] <nox>
In https://html.spec.whatwg.org/multipage/media.html#concept-media-load-algorithm,

[03:21:26.0000] <nox>
Shouldn't the step '⌛ Otherwise the media element has no assigned media provider object and has neither a src attribute nor a source element child: set the networkState to NETWORK_EMPTY, and abort these steps; the synchronous section ends.' also set the delaying-the-load-event flag back to false?

[03:24:44.0000] <annevk>
foolip: ^^

[03:27:01.0000] <JakeA>
Btw, TabAtkins landed <script type=idl> in Bikeshed which avoids the need to escape < & >. Also works better with syntax highlighting

[03:27:05.0000] <JakeA>
https://tabatkins.github.io/bikeshed/#idl

[03:27:16.0000] <gsnedders>
hmm, who do we know who is still at Opera and can help us find stuff? both test-related (either by finding stuff around or in VCS history or bugs) and looking up bugs?

[03:28:02.0000] <foolip>
nox: yes, that would make sense, can you file an issue?

[03:28:08.0000] <nox>
foolip: Ok.

[03:29:20.0000] <annevk>
gsnedders: bratell/jl?

[03:29:57.0000] <annevk>
gsnedders: mstensho?

[03:30:20.0000] <annevk>
gsnedders: rune

[03:30:36.0000] <gsnedders>
ah, true, they're all still there

[03:31:28.0000] <nox>
foolip: https://github.com/whatwg/html/issues/3065

[03:39:47.0000] <nox>
foolip: Failing to set it back to false in Servo made /html/semantics/embedded-content/media-elements/loading-the-media-resource/resource-selection-invoke-play.html timeout,

[03:39:53.0000] <nox>
and I don't really understand why, hah.

[03:40:30.0000] <nox>
Do tests time out if we don't fire the load event, in general?

[03:55:02.0000] <JakeA>
annevk: what's the correct way to hook an event handler up to its associated event?

[03:55:07.0000] <JakeA>
I've seen it done a few different ways

[03:55:39.0000] <JakeA>
And none of them are done in https://dom.spec.whatwg.org/#aborting-ongoing-activities, so I should fix that

[04:12:11.0000] <jungkees>
annevk: a dictionary object passed from JS also has its own realm, right?

[04:13:28.0000] <jungkees>
annevk: if I want to pass that onto an algorithm goes in parallel, would it be a good practice to convert it to a internal struct? Or would just passing it as-is be okay?

[04:17:25.0000] <Ms2ger>
I don't know if ES already defines the realm for arbitrary objects

[04:18:32.0000] <gsnedders>
nox: testharness.js tests?

[04:31:59.0000] <annevk>
jungkees: it’s converted to an IDL dictionary at the boundary which has no Realm so should be fine

[04:32:49.0000] <nox>
gsnedders: Yes.

[04:33:45.0000] <annevk>
jungkees: the only somewhat weird thing is passing dictionaries across "in parallel" boundaries

[04:34:12.0000] <annevk>
jungkees: I think that should be okay, provided you don't mutate it, but at some point we need to document how that works

[04:37:07.0000] <gsnedders>
nox: no, it shouldn't matter

[04:38:37.0000] <jungkees>
annevk: yeah, currently "run a worker" also takes a dictionary from the main thread and access it inside the worker thread

[04:38:47.0000] <nox>
gsnedders: Well, that is weird then.

[04:39:52.0000] <nox>
gsnedders: /html/semantics/embedded-content/media-elements/loading-the-media-resource/resource-selection-invoke-play.html times out locally if I don't account for https://github.com/whatwg/html/issues/3065

[04:40:08.0000] <nox>
And it's not a test case that times out, but the whole test.

[04:40:26.0000] <annevk>
jungkees: ah, good to know

[04:41:04.0000] <annevk>
jungkees: I suspect we don't want to formalize it too much right now, first figure out what all the various usage patterns will be and what kind of issues arise

[04:41:12.0000] <annevk>
jungkees: still very early days for "in parallel"

[04:41:34.0000] <gsnedders>
nox: will look in a few mins

[04:41:56.0000] <jungkees>
annevk: okay. I don't think there are many cases for dictionary indeed

[04:42:48.0000] <jungkees>
annevk: a tricky part that I encountered is.. I'd want to pass a struct to an internal algorithm

[04:43:27.0000] <jungkees>
annevk: and that struct should somehow carry information in a dictionary given from JS

[04:44:07.0000] <jungkees>
annevk: I'm not sure if I can set an item in a struct to a dictionary itself. Would that make sense?

[04:44:57.0000] <jungkees>
annevk: otherwise, I'll need to convert the dictionary to a struct only for a reason to pass that along

[04:44:59.0000] <annevk>
jungkees: that's fine

[04:45:16.0000] <jungkees>
annevk: sounds good :)

[04:45:28.0000] <annevk>
jungkees: again, at some point we should be more clear on the rules and all the various types, but structs holding IDL types should be okay

[04:45:43.0000] <jungkees>
annevk: okay

[04:51:36.0000] <gsnedders>
nox: how much is this blocking you btw?

[04:53:26.0000] <nox>
gsnedders: It's not. I'm just very confused why it would happen. Pay me no mind.

[04:55:00.0000] <gsnedders>
nox: ack

[08:17:39.0000] <wanderview>
JakeA: sorry if I'm being confusing... I don't really want FetchEvent to be a unique snowflake... but I thought there were objections from other people (annevk?) to more widely observing the state of event handlers

[08:18:19.0000] <wanderview>
JakeA: it would be nice to have some common api to "enableEvent('fetch')" or "disableEvent('message')", etc

[08:20:21.0000] <JakeA>
wanderview: I'm not against that API, although I worry about the amount of state we're adding to service workers. Maybe it's fine. But with the Facebook case I'm wondering if we went too narrow with navigation preload, and perhaps we should make it just fetchPreload, where "navigation" is an option

[08:20:37.0000] <JakeA>
Trying to understand their problem better

[08:22:46.0000] <wanderview>
JakeA: I don't fully know their use cases, but it feels like some of the problem is that things are just not optimized well in browsers well for what they want... not sure I want to add too many weird apis to work around problems that might get resolved as we fix perf issues

[08:23:01.0000] <JakeA>
wanderview: agreed

[08:23:43.0000] <JakeA>
wanderview: once we understand the problem fully, we'll be in a better position to decide if this is a Chrome-world problem, or something that can never be fast and we need to offer another path

[08:24:31.0000] <wanderview>
JakeA: I don't think FF is immune to these problems either

[08:25:39.0000] <wanderview>
JakeA: we've started collecting SW start times more explicitly: https://mzl.la/2wh9v2G

[08:25:47.0000] <wanderview>
95-percentile is kind of crazy

[08:26:11.0000] <wanderview>
oh wait... thats the submissions line

[08:26:21.0000] <wanderview>
https://mzl.la/2wg5qfe

[09:37:40.0000] <jyasskin>
I wish *.specs.whatwg.org would redirect to *.spec.whatwg.org.

[10:28:04.0000] <annevk>
wanderview: I generally think that's a bad thing, but for service workers that ship has sailed

[10:28:22.0000] <annevk>
jyasskin: file an issue at https://github.com/whatwg/misc-server/issues/new?

[10:29:13.0000] <annevk>
jyasskin: should be doable, although maybe we should wait for let's encrypt to support wildcards

[10:29:49.0000] <jyasskin>
annevk: Thanks for the pointer.

[12:28:24.0000] <nox>
Is it just me or everything about the fetching of the poster frame of video elements has some hand-waving?

[12:29:09.0000] <nox>
I expected it to be piggy-backing the wording on the image element in some sort. Not just "If an image is thus obtained, the poster frame is that image. Otherwise, there is no poster frame."

[13:54:17.0000] <tobie>
foolip: hoping onto irc as this will be easier to solve if we're sync

[13:54:54.0000] <tobie>
foolip: so what I think you should do is merge the WICG PR first.

[13:54:58.0000] <foolip>
tobie: here I am

[13:55:13.0000] <foolip>
I can't do that, need someone with write access to that repo

[13:55:22.0000] <tobie>
foolip: oh. :D

[13:55:23.0000] <foolip>
cwilso: ^

[13:56:10.0000] <tobie>
cwilso: this is https://github.com/WICG/admin/pull/36

[13:56:39.0000] <foolip>
or perhaps yoav? ^

[13:57:11.0000] <foolip>
tobie: do the BIGNAMES need to be globally unique?

[13:57:25.0000] <tobie>
foolip: yes

[13:57:34.0000] <foolip>
huh, well OK

[13:58:04.0000] <tobie>
foolip: AND they need to persist from update to update

[13:58:10.0000] <foolip>
Then what'll we do with the old one? Delete it manually?

[13:59:00.0000] <tobie>
foolip: moving stuff from org to org is super rare, so we're in mostly unchartered territories, here.

[13:59:17.0000] <tobie>
foolip: we'll probably need to do it manually

[13:59:23.0000] <foolip>
ok, but wicg->w3c must be pretty common?

[13:59:44.0000] <tobie>
maybe?

[13:59:46.0000] <foolip>
tobie: is most wicg stuff just not in specref, given the short biblio.json there?

[14:00:00.0000] <tobie>
foolip: I dunno

[14:00:56.0000] <tobie>
foolip: it might be that most don't need to be referenced until they move to W3C

[14:01:12.0000] <jyasskin>
foolip: WICG is recent, so it could be that you're one of the first to do that migration.

[14:01:41.0000] <foolip>
jyasskin: the first whatwg->wicg for sure, yes

[14:01:59.0000] <foolip>
but it seems like wicg things in general just aren't added to specref, unless I'm missing something

[14:02:06.0000] <tobie>
foolip: for context, specref is massive ball of scotch tape + band aid

[14:02:27.0000] <foolip>
tobie: and here I am trying to build something robust and cool on top of it

[14:02:29.0000] <tobie>
foolip: for which I have pretty much not time

[14:02:42.0000] <foolip>
tobie: https://foolip.github.io/day-to-day/ is the thing

[14:03:14.0000] <tobie>
foolip: there's a whole bunch of pretty robust things built on top of specref

[14:03:36.0000] <foolip>
tobie: how can I filter for "real" specs, is that an unsolved problem?

[14:03:48.0000] <tobie>
foolip: define "real"

[14:04:03.0000] <foolip>
tobie: specs that define CSS properties, IDL or HTTP headers

[14:04:25.0000] <tobie>
that's not going to happen

[14:04:27.0000] <tobie>
:D

[14:04:34.0000] <foolip>
Uh, which would make ecmascript not a real spec I guess

[14:04:48.0000] <tobie>
BUT, if you're working on something wpt-related

[14:05:20.0000] <foolip>
tobie: it is wpt-related, and the non-trivial bit if figuring out which directories in wpt correspond to each spec

[14:05:36.0000] <jyasskin>
foolip: Have you talked to TabAtkins? Shepherd has a list of at least CSS and IDL-providing specs.

[14:05:40.0000] <tobie>
foolip: that should be rather trivial

[14:05:57.0000] <tobie>
foolip: as the tagging there is Specref-based

[14:06:20.0000] <cwilso>
*wakes up*

[14:06:24.0000] <cwilso>
foolip: merged

[14:06:30.0000] <tobie>
cwilso: ty

[14:06:32.0000] <foolip>
cwilso: thank!

[14:06:37.0000] <TabAtkins>
foolip: Ooh, that day-to-day thing is cool

[14:06:58.0000] <foolip>
TabAtkins: glad you like it, trying to make it not suck and then include many more specs

[14:07:01.0000] <cwilso>
/me was literally off getting coffee.  :)

[14:07:22.0000] <foolip>
TabAtkins: ignoring specs that nobody probably cares about isn't entirely trivial it seems. would sheperd help?

[14:07:27.0000] <TabAtkins>
foolip: To check for things defining CSS or IDL, you can always pull the Bikeshed datafiles and read over the definitions to see what specs define them.

[14:07:41.0000] <TabAtkins>
Or use Bikeshed directly, so you can use its parsing/etc.

[14:08:06.0000] <tobie>
foolip: if you know the directory of a test in wpt, then you know its specref id

[14:08:06.0000] <TabAtkins>
Oh yeah, and I do have a dfn type for headers, so that should theoretically work too.

[14:08:42.0000] <foolip>
TabAtkins: yes, I am cloning all the repos anyway, could probably work it out somehow

[14:09:01.0000] <foolip>
tobie: there are exceptions that I'm having to deal with, like webrtc-pc vs webrtc, and HTML's many directories

[14:09:19.0000] <TabAtkins>
You can just iterate thru the refs, checking if they're a dfn type you want to care about, and collecting the specs they're associate with. Then you can check the spec db to get their URLs. This doesn't translate over into GitHubs, tho.

[14:09:43.0000] <foolip>
TabAtkins: iterating over shepherd, you mean?

[14:10:10.0000] <foolip>
I'm now working from something that guesses the git URL from the spec's URL, which I think will work with very few exceptions

[14:10:13.0000] <TabAtkins>
Nah, over Bikeshed's db.

[14:10:18.0000] <tobie>
foolip: well obviously the webrtc folks are doing their thing

[14:10:37.0000] <foolip>
tobie: it was probably the right name once upon a time

[14:10:53.0000] <tobie>
foolip: in which case it should still be in specref

[14:11:11.0000] <foolip>
tobie: maybe?

[14:11:16.0000] <TabAtkins>
Boot up a reference manager (check cli.py, under the `command == "refs"` section, for how to do that), then call `.queryRefs(type="property")`/etc.

[14:11:29.0000] <foolip>
tobie: are you only using biblio.json and similar, or also crawling around github orgs for new repos?

[14:11:53.0000] <TabAtkins>
The specs db is in ReferanceManager.specs, it's just a dictionary of spec names => spec info; it'll match up with the `spec` data field in the refs.

[14:12:20.0000] <tobie>
foolip: not doing crawling

[14:13:03.0000] <tobie>
foolip: just poking the different ref sources hourly

[14:14:01.0000] <foolip>
tobie: mkay, well it mostly works, so thank you :)

[14:15:07.0000] <tobie>
foolip: for ref, here's the code that handles the labeling for wpt: https://github.com/tobie/ganesh/blob/master/lib/metadata/raw-labels.js

[14:16:24.0000] <tobie>
foolip: should probably include webrtc-pc in there

[14:17:36.0000] <Mek>
of course wpt labels aren't exactly the same as specs (in particular for a bunch of stuff that is defined in whatwg html, but in separate wpt directories)

[14:17:37.0000] <foolip>
tobie: hmm, looks like a wpt dir -> shortname mapping?

[14:18:08.0000] <tobie>
foolip: yes

[14:18:53.0000] <tobie>
Mek: yeah-that's sort of subar

[14:18:58.0000] <foolip>
tobie: I guess I could start from wpt and work out what specs they belong to, but doing it the other way also allows me to discover specs with no wpt dirs, which I could then rectify

[14:18:58.0000] <tobie>
subpar

[14:19:54.0000] <foolip>
basically I'm going for a 1 spec repo + dir => many test repo + dir mapping

[14:20:10.0000] <foolip>
(css is all one repo, hence the +dir)

[14:20:19.0000] <foolip>
we'll see, hacking away

[14:20:34.0000] <tobie>
foolip: css is organized by shortname within that repo

[14:20:52.0000] <foolip>
tobie: well, with the complication of versioned directories

[14:20:53.0000] <tobie>
they all match, iirc, gsnedders fixed them

[14:21:03.0000] <foolip>
which is also a complication for the specs themselves of course

[14:21:27.0000] <tobie>
foolip: I've given up on trying to make sense of how the CSSWG organizes its work

[14:21:40.0000] <tobie>
(Sorry Tab)

[14:21:55.0000] <foolip>
TabAtkins: please tell us it's actually very simple to understand :)

[14:22:21.0000] <TabAtkins>
Not a clue, ask fantasai and gsnedders I guess.

[14:22:40.0000] <foolip>
TabAtkins: ha, gsnedders just rants about versioned directories like me, no help there

[14:22:48.0000] <foolip>
I guess it's down to fantasai

[14:22:53.0000] <TabAtkins>
Oh wait, is this about WPT specifically, or just our spec organization in general?

[14:23:14.0000] <tobie>
Sort of both

[14:23:29.0000] <foolip>
TabAtkins: I was just building my little toy, the only thing I want to do with it now is map specs to tests

[14:23:38.0000] <tobie>
and additionally whether and how they map

[14:24:00.0000] <foolip>
although another thing I'd like to do is find specs that don't link to wpt and fix those

[14:24:08.0000] <foolip>
if they all did then I'd have my mapping right there

[14:24:33.0000] <tobie>
foolip: well if they have tests elsewhere, no one runs them so…

[14:24:53.0000] <tobie>
foolip: outside of ES + WebGL(?)

[14:25:02.0000] <foolip>
tobie: wasm too

[14:25:13.0000] <foolip>
and yes, webgl is still external

[14:25:21.0000] <tobie>
wasm has a spec?

[14:25:24.0000] <tobie>
:D

[14:25:44.0000] <tobie>
/me ducks

[14:25:55.0000] <foolip>
tobie: dunno, when I go look for it I usually find things aimed at web developers

[14:26:26.0000] <TabAtkins>
tobie: There is a spec, yes. It's currently written in some tool intended for Python library documentation.

[14:26:33.0000] <foolip>
https://webassembly.github.io/spec/

[14:26:51.0000] <tobie>
TabAtkins: I know, we've just added more legacy stuff to WebIDL for it

[14:26:54.0000] <TabAtkins>
I and some wasm folks tried our damnedest to make it be in Bikeshed, but apparently Andreas has the final say for some reason, and he demanded it.

[14:28:05.0000] <tobie>
foolip: if the goal is to move everything to wpt, which imho it should be, then you shouldn't incentivize folks to do their own thing on the side by helping them out with tooling

[14:28:28.0000] <tobie>
foolip: unless there are very good reasons to do so, obv

[14:30:12.0000] <tobie>
foolip: so I work up from wpt and eventually manually add stuff that's not in it for good reasons

[14:30:33.0000] <tobie>
foolip: but that's just my $.02

[14:32:24.0000] <foolip>
tobie: I'm actually not convinced that wpt should devour everything, or at least not be the source of truth for everything

[14:33:18.0000] <foolip>
tobie: because v8 is a separate project from chromium, and I think they should be able to change test262 together with their code

[14:33:47.0000] <tobie>
foolip: yeah test262 doesn't belong in wpt

[14:33:49.0000] <foolip>
tobie: which could mean mirroring in one wpt directory into v8, but mirroring test262 itself would also work

[14:34:15.0000] <tobie>
foolip: not sure about wasm and/or WebGL

[14:34:27.0000] <tobie>
foolip: these three exceptions can work for all I care

[14:34:35.0000] <tobie>
foolip: and can be handled manually

[14:34:41.0000] <tobie>
(imho)

[14:34:58.0000] <foolip>
tobie: once the infrastructure around wpt is compelling enough I doubt we'll be accumulating more exceptions

[14:35:13.0000] <tobie>
foolip: agreed

[14:54:13.0000] <foolip>
tobie: where should I report bugs in https://www.w3.org/2002/01/tr-automation/tr.rdf?

[15:03:07.0000] <tobie>
foolip:  sysreq⊙wo

[15:03:22.0000] <foolip>
tobie: thanks

[15:13:29.0000] <tobie>
foolip: alright; merged and closed a bunch of things

[15:14:11.0000] <tobie>
foolip: gave you commit rights to the repo and now going back to webidl mixins

[15:14:22.0000] <foolip>
tobie: awesome, I'll try not to delete it

[15:15:38.0000] <tobie>
nothing gets merged to heroku unless the test suite is green

[15:16:11.0000] <tobie>
foolip: so the risks of you doing anything bad beyond wasting my time are pretty low

[15:16:54.0000] <foolip>
tobie: I'll have to apply myself then

[15:19:12.0000] <tobie>
foolip: disabling travis isn't rocket science, so…


2017-09-26
[04:45:15.0000] <tobie>
annevk: would love your thoughts on https://github.com/heycam/webidl/issues/363#issuecomment-332046225

[08:17:56.0000] <wanderview>
/me tries to reset bikeshedding requestAfterAnimationFrame().

[08:52:09.0000] <annevk>
tobie: added a comment

[09:23:48.0000] <annevk>
jochen__: if you happen to have written down the suborigin ideas we had for CORS and postMessage let me know

[11:42:14.0000] <tobie>
annevk: ty


2017-09-27
[21:11:29.0000] <MikeSmith>
TabAtkins: so the HTML spec directly references the definition of the 'overflow' property in the "CSS Overflow" spec

[21:11:35.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/infrastructure.html#'overflow'

[21:11:54.0000] <MikeSmith>
but it links to https://drafts.csswg.org/css-overflow/#propdef-overflow

[21:12:13.0000] <MikeSmith>
however that link is broken

[21:12:44.0000] <MikeSmith>
because that "CSS Overflow" doesn’t actually define the 'overflow' property

[21:13:28.0000] <MikeSmith>
instead it seems the definition is at https://drafts.csswg.org/css-overflow-3/#propdef-overflow

[21:13:46.0000] <MikeSmith>
CSS Overflow Module Level 3

[21:14:00.0000] <MikeSmith>
so now I am wondering what we should do for the HTML spec

[21:14:31.0000] <MikeSmith>
should I change the HTML spec to reference CSS Overflow Module Level 3 instead?

[21:16:40.0000] <MikeSmith>
but if I do, is CSS Overflow Module Level 3 eventually going to become obsolete/stale/unmaintained, and the current/up-to-date/maintained spec will always be https://drafts.csswg.org/css-overflow and the 'overflow' property definition will eventually move back there?

[21:34:10.0000] <tantek>
those are good questions MikeSmith and I don't know the answer (and I feel I should)

[21:40:20.0000] <MikeSmith>
tantek: OK glad I’m not the only one :)

[21:40:33.0000] <tantek>
I figured I could help in that respect :)

[21:40:38.0000] <MikeSmith>
heh

[21:41:44.0000] <MikeSmith>
anyway in general it seems like we ideally want to be able to reference a definition at one place in a long-lived spec that’s going to continue to be maintained

[21:42:28.0000] <MikeSmith>
or to put it in other specific terms, ideally we don’t want the content of https://drafts.csswg.org/css-overflow to get replaced by some partial version of what was there before

[21:43:07.0000] <MikeSmith>
and don’t want what was there before to move to https://drafts.csswg.org/css-overflow-3 and break the references

[21:43:29.0000] <MikeSmith>
because I am guessing that is what has happened here

[21:53:36.0000] <astearns>
we shouldn't be redirecting the non-versioned link to a diff spec, which looks to be what's happening here

[21:55:27.0000] <astearns>
https://drafts.csswg.org/css-overflow should be the safe URL to use, and it should be going to the level 3 draft until we make the level 4 draft a strict superset of level 2

[21:55:37.0000] <astearns>
s/2/3/

[01:07:55.0000] <MikeSmith>
astearns: OK, thanks

[01:08:25.0000] <MikeSmith>
but then still not sure what I should do in order to fix the broken reference in the HTML spec

[01:10:35.0000] <MikeSmith>
also, anybody know why in *Value:* row of https://drafts.csswg.org/css-overflow-3/#propdef-overflow the ‘hidden’ and ‘scroll’ values are not hyperlinks?

[01:43:36.0000] <gsnedders>
so what makes it hard to keep one a strict superset of the other?

[01:43:52.0000] <gsnedders>
plenty of software projects deal fine with long-lived branches

[01:44:08.0000] <gsnedders>
but admittedly they use VCS branches to manage them instead of having to copy/paste patches across directories

[03:26:08.0000] <annevk>
rbyers: ping for https://github.com/whatwg/html/issues/3016

[05:40:14.0000] <annevk>
jochen__: I filed https://github.com/w3c/webappsec-suborigins/issues/73 based on my recollection

[07:30:58.0000] <astearns>
gsnedders: it's mainly just to reduce copy/paste, particularly when a lower level is still going through a good rate of change. We park newer/less polished stuff in the next level as a diff of the lower level so that we don't have to make the lower level changes in two places.

[08:26:57.0000] <rbyers>
annevk: Sorry I missed this, will ask the input team to take a look.

[09:00:09.0000] <jyasskin>
MikeSmith: If HTML were a Bikeshed spec or pulled references from Shepherd, then just rebuilding would be sufficient, but of course it's not.

[12:59:13.0000] <TabAtkins>
MikeSmith: Yeah, Overflow 4 is currently a delta spec, only defining some new features on top of Overflow 3. When the features in 3 are stable and the spec matures, we'll move active development to 4, fleshing it out with the downlevel stuff from 3.

[12:59:58.0000] <TabAtkins>
(see https://www.w3.org/TR/css-overflow-4/#overflow-properties for where 'overflow' will go afterwards)

[13:00:32.0000] <TabAtkins>
While it's a delta spec, it probably shouldn't be the target for the unlevelled URL, tho - I'll check with Florian and get that switched, so your link will stay good.

[13:00:59.0000] <TabAtkins>
Ah, astearns already said that, cool.

[13:01:12.0000] <tantek>
TabAtkins: do we have a redirect for /TR/css-overflow setup to redirect to the latest "complete" (non-delta) version on TR?

[13:01:39.0000] <tantek>
so people don't have to worry about updating from css-modulename-n to css-modulename-nplus1

[13:01:42.0000] <TabAtkins>
https://www.w3.org/TR/css-overflow/ 404s, so not yet

[13:01:57.0000] <tantek>
well then perhaps we should, for all css-modulename-n

[13:02:04.0000] <TabAtkins>
I guess we havent' done a pub on that in a bit, so we haven't bothered to correct the record.

[13:02:17.0000] <TabAtkins>
Yes, that's part of the publishing plan for all of TR - check spec-prod from I think July?

[13:02:32.0000] <tantek>
astearns: ^^^ would be interested in your thinking on that, use-case is being able to normatively reference a property (or value) where it is canonically defined and not having that link break over time

[13:04:23.0000] <TabAtkins>
Ah, a shifting link based on the property db perhaps?

[13:13:46.0000] <tantek>
TabAtkins: well that would be even more powerful / robust (for if/when a property moves between specs)

[13:19:19.0000] <TabAtkins>
tantek: I mean, that sort of thing is definitely possible.

[13:20:02.0000] <tantek>
https://www.w3.org/TR/css-property/color

[14:05:57.0000] <smaug____>
Domenic: curious, is https://github.com/w3c/webcomponents/issues/635 waiting for something?

[14:06:26.0000] <Domenic>
smaug____: https://github.com/w3c/webcomponents/issues/635#issuecomment-297516487

[14:07:06.0000] <smaug____>
Domenic: you're still waiting for more feedback from bz?

[14:07:27.0000] <Domenic>
No, "This is simply because I haven't had time to get back to that general problem area and come up with any alternatives that I can compare with his proposal."

[14:07:33.0000] <smaug____>
ah, that, ok

[14:07:42.0000] <smaug____>
yeah, we're implementing something

[14:08:02.0000] <Domenic>
Yeah, everyone is, presumably, but in general it appears nobody agrees on error reporting in multiple globals in general

[14:08:07.0000] <smaug____>
it is just that I can't quite review the patch since I don't know what is the right thing to do

[14:08:43.0000] <Domenic>
Doing whatever feels consistent within your implementation makes sense to me for now

[14:08:54.0000] <Domenic>
One day we'll have time to figure it out

[14:10:01.0000] <smaug____>
not what I'm comfortable when reviewing patches :/

[14:10:28.0000] <smaug____>
but I guess I'll have to live with that


2017-09-28
[18:10:20.0000] <gsnedders>
astearns: but plenty of software projects do this all the time with multiple branches

[18:10:30.0000] <gsnedders>
like, I don't buy the argument that it's too hard.

[18:14:51.0000] <gsnedders>
IMO, what we need is a continious master branch and occasional stability branches where we push things to REC by dropping at-risk content

[18:25:17.0000] <gsnedders>
and we should look at how other software projects deal with long-term maintainence branches

[18:25:27.0000] <gsnedders>
Because like them ultimately we're just dealing with large text files.

[18:28:45.0000] <astearns>
gsnedders: I did briefly consider a branching strategy for next-level drafts today. I think the main concern would be how we host the various branches. People will want a single place to see foo-3 and foo-4 drafts, and argue that outsiders shouldn't need to understand our branching strategy to see the latest ideas for each level.

[18:37:23.0000] <gsnedders>
astearns: for the git repo or for drafts.csswg.org?

[18:37:51.0000] <gsnedders>
I mean all the git tooling for applying patches to multiple branches rely on actual git branches not just copy/pasted folders, which means we can't use any standard tooling

[18:38:05.0000] <gsnedders>
and that hsas a very real cost, IMO, 

[18:50:37.0000] <MikeSmith>
jyasskin: yeah building HTML with Bikeshed would make a number of things easier as far a maintenance, but we not going to be moving HTML to Bikeshed any time soon

[20:34:21.0000] <astearns>
gsnedders: for drafts.csswg.org. If we can flatten out relevant git branches to a single web host, I think we could do away with diff specs

[23:21:01.0000] <xfq>
tobie: in specref, how to fetch Unicode UAXes automatically?

[23:21:06.0000] <xfq>
(maybe also UTSes and UTRs)

[23:21:18.0000] <xfq>
I'll see if I can write a script for that, if you'd like to point me in the right direction

[23:21:23.0000] <xfq>
thanks

[23:37:39.0000] <jochen__>
annevk, thx!

[23:42:53.0000] <tobie>
xfq: you can look at the scripts folder. There's a bunch of helpers in there.

[23:43:20.0000] <tobie>
xfq: a good example is W3C.js for a rather complex case

[23:45:46.0000] <tobie>
 xfq: If you already have json as a src, then look at the examples inside of the scripts/fetch-helpers

[23:46:25.0000] <tobie>
xfq: all scripts then end up being called by the update-all bash script which runs hourly.

[23:47:06.0000] <tobie>
xfq: iirc, for Unicode, you'll have to fetch the web page and parse the table.

[23:56:35.0000] <xfq>
tobie: Thank you. I'll look into it.

[00:58:28.0000] <freesamael>
annevk: Do you have any plan on how we can push the session history issue forward? https://github.com/whatwg/html/issues/1454

[01:06:56.0000] <annevk>
freesamael: not really, it's a rather daunting task

[01:08:11.0000] <annevk>
freesamael: I also haven't studied history enough to know if we could do it in small chunks

[01:08:42.0000] <annevk>
freesamael: I'd actually expect you to know much better than I how to tackle this

[01:10:37.0000] <freesamael>
annevk: I'm actually willing to work on it. Just that there still something hasn't been clarified and I don't know how (process-wise) I can push this forward.

[01:11:33.0000] <freesamael>
annevk: Do you know if we're toward Servo's proposal and maybe do something based on that?

[01:13:25.0000] <annevk>
freesamael: I see

[01:13:52.0000] <annevk>
freesamael: https://whatwg.org/working-mode#changes has some high-level notes on the process

[01:14:05.0000] <annevk>
freesamael: I think it's already demonstrated that we don't match implementations so we have to change

[01:14:34.0000] <annevk>
freesamael: so that then leaves tests, implementation bugs, and a PR that changes the text

[01:15:04.0000] <annevk>
freesamael: I don't know how close Servo gets to more widely deployed browsers

[01:15:46.0000] <annevk>
freesamael: I would expect a change to more closely align the spec with Chrome/Edge/Firefox/Safari primarily, and Servo secondarily

[01:16:13.0000] <annevk>
freesamael: unless for some reasons the Chrome/Edge/Firefox/Safari all have weird cases that Servo somehow smoothed out and everyone is willing to align with Servo

[01:17:57.0000] <annevk>
freesamael: so concretely, I would expect a high-level description of a new model given that the current model is flawed, then tests against that new model to make sure it doesn't stray too far from implementations, and then find agreement on the new model and refine it along the way

[01:18:37.0000] <annevk>
freesamael: and then probably write a change to the specification and get that reviewed, then file browser bugs and land all the tests in web-platform-tests

[01:18:54.0000] <annevk>
freesamael: does that seem reasonable?

[01:19:35.0000] <annevk>
(I would be extremely happy to see you pull this off btw; and I'm sure many other people would be too)

[01:21:23.0000] <freesamael>
annevk: Yes. That roughly points how long the path will be :)

[01:21:23.0000] <freesamael>
About the model, what I was thinking is either we could be based on the servo paper's "joint session past / future" model, and try to align that with browser behavior, or we could start from scratch to made a tree structure model.

[01:21:49.0000] <freesamael>
One main blocker is probably that browsers have quite different implementation on iframe histories

[01:23:36.0000] <annevk>
freesamael: yeah, I don't know how much Servo's model is based on what implementations do

[01:23:59.0000] <annevk>
freesamael: ajeffrey_ can probably help clarify that, but I'm not sure when he's around

[01:24:23.0000] <annevk>
https://github.com/asajeffrey says Chicago so I guess not now

[01:25:01.0000] <annevk>
freesamael: if Servo is a reasonable approximation of what Firefox does that might be a good start

[01:26:00.0000] <annevk>
freesamael: it does seem like the proposed model from the paper would at least be better than what we have today 😊

[01:27:17.0000] <freesamael>
annevk: That's what I think. I'm not sure if it will be easier to align browsers' behaviors than a re-designed tree structure, tho.

[01:28:45.0000] <annevk>
freesamael: is the Servo model not a tree?

[01:29:04.0000] <annevk>
freesamael: because then I suspect it would be hard to get it adopted by others

[01:35:02.0000] <freesamael>
annevk: Servo's paper was more like an improvement on the current joint session history concept, so it's still "browsing contexts have distinct session history" rather than Firefox's "root browsing context hold a tree of session history which include the entries for nested browsing contexts". I somewhat feel there are pros and cons for both concepts, even if

[01:35:02.0000] <freesamael>
we eventually model the same behavior.

[01:36:34.0000] <freesamael>
annevk: The downside of joint session history is that we need to describe how a discarded nested browsing context's session history is kept by the root browsing context, and how we can map that back to nested browsing contexts when it's recreated on history navigation.

[01:37:05.0000] <annevk>
freesamael: okay, from what I know (which isn't much) what Firefox has as model is also something which other browsers have, modulo bugs and minor differences, so I'd expect that to be easier to align on, but you probably know the details better

[01:38:10.0000] <freesamael>
annevk: Humm.. I'll think about it. I'm also trying to understand Chromium's current history implementation "PlzNavigate"

[01:39:01.0000] <annevk>
freesamael: maybe as a first step you could write a brief description of both models and the tradeoffs and email smaug____ / ajeffrey_ and some of the Chrome folks involved with PlzNavigate (and Domenic for good measure) for feedback?

[01:39:17.0000] <annevk>
freesamael: or maybe just add it as a comment in the issue

[01:39:33.0000] <annevk>
freesamael: and I'll try to help out to get everyone to give feedback

[01:40:32.0000] <annevk>
freesamael: I would expect that given an explicit choice like that they all might remember some additional things why things are the way they are

[01:41:56.0000] <smaug____>
(last time I looked at the paper, it was missing all the interesting edge cases which make session history so hard)

[01:48:26.0000] <freesamael>
smaug____: Yes. But on the other hand I'm not sure if describing things like RemoveDynEntries and RemoveDuplicate is easy in the spec. I'm just not sure which is harder - rewritting in a tree structure or trying to add these missing tricky iframe cases in that joint session future / past concept.

[01:49:49.0000] <smaug____>
For some reason all the browser engines have the tree model

[01:50:01.0000] <smaug____>
(not talking about Servo)

[01:50:37.0000] <smaug____>
and given that session history is very regression prone, changing the model might be hard

[01:52:12.0000] <annevk>
It also seems unlikely that browsers would rewrite it unless there's some very solid advantages

[01:52:34.0000] <freesamael>
that's true

[02:06:31.0000] <freesamael>
I guess the easiest way for me to start with is probably making a clear documentation on whatever Firefox implements, and ask for feedbacks from other browser vendors to see how different they handle these cases. Hopefully that helps us to push the discussion forward.

[02:09:25.0000] <annevk>
freesamael: yeah, you could even tackle the question part yourself by writing tests

[02:10:07.0000] <annevk>
freesamael: though that might be tricky if you still expect many changes

[02:10:27.0000] <annevk>
freesamael: but it will help you identify the parts of the model that are solid and those that probably need more work

[04:03:51.0000] <kochi>
annevk: re https://github.com/whatwg/dom/pull/513 my intern is working on WPT side but still needs work, hopefully complete next week.

[04:16:44.0000] <beverloo>
do we still have irc logs for this channel? somebody pinged me, but I can't see who/why

[04:18:15.0000] <beverloo>
(found it on the wiki)

[04:18:58.0000] <beverloo>
MikeSmith (hi again!) - re: file:// URLs, I think it must've broken around Chrome 40-45ish when we aligned with the common permission infrastructure in Chrome, that hasn't dealt with file:// URLs well at all

[04:19:22.0000] <beverloo>
I think we have an exception for Flash right now, for which it does work

[04:31:36.0000] <smaug____>
Does anyone recall some github issue which has lots of comments?

[04:31:41.0000] <smaug____>
/me needs one for testing

[04:37:11.0000] <annevk>
smaug____: https://github.com/whatwg/fetch/issues/27

[04:37:32.0000] <annevk>
smaug____: and its successor might also qualify: https://github.com/whatwg/fetch/issues/447

[04:37:38.0000] <smaug____>
thanks

[04:38:08.0000] <annevk>
kochi: great!

[04:42:37.0000] <MikeSmith>
howdy beverloo

[04:42:40.0000] <MikeSmith>
thanks

[06:08:30.0000] <annevk>
JakeA: any closer to getting AppCache removed?

[06:14:38.0000] <JakeA>
annevk: the implementation work is wait for a new owner :( https://bugs.chromium.org/p/chromium/issues/detail?id=588931

[06:15:13.0000] <mkwst>
JakeA: That was work to deprecate it over plaintext. We don't have anyone working on removing it entirely (that I know of).

[06:15:18.0000] <mkwst>
It seems like a good thing to do, though!

[06:15:38.0000] <JakeA>
Yeah, removing it over HTTP would be a good first step

[06:15:42.0000] <mkwst>
annevk: Is anyone at Mozilla looking into it? There was an announcement quite some time ago that it was to be deprecated.

[06:16:09.0000] <mkwst>
JakeA: I'm not actually sure it's any less work than removing it entirely. Folks were concerned about data loss, as I recall, and I don't think we found good answers for them.

[06:16:36.0000] <mkwst>
But our cultural knowledge of that discussion left with Joel. So.

[06:17:53.0000] <JakeA>
I can't think of a data-loss case. I think the issue suggested stubbing out the API but never returning something from the service worker cache. That could work if sites are expecting the API, but I don't know if that's the case.

[06:19:34.0000] <mkwst>
There was a long thread on blink-dev. rbyers might remember details.

[06:19:56.0000] <mkwst>
If not, Michael Nordman, maybe?

[06:21:18.0000] <annevk>
mkwst: I'm not aware of anything recent

[06:21:56.0000] <annevk>
mkwst: I just worry I end up having to define it properly, though maybe I can get JakeA to do that 😛

[06:22:23.0000] <mkwst>
Removing features from the platform to save yourself some work sounds like a wonderful idea!

[06:22:44.0000] <mkwst>
Can I add some things to the list? :P

[06:23:08.0000] <annevk>
We should just preemptively add all new ideas

[06:40:30.0000] <JakeA>
/me runs away

[07:13:30.0000] <Domenic>
freesamael: I am very happy to help with the session history work. It's on my "things I definitely want to do but never manage to get high enough on my to do list to actually happen" list. Which effectively means it's probably not going to happen if I have to do the work, but I can still help review/guide etc.

[07:40:08.0000] <Domenic>
annevk: is https://github.com/whatwg/html/issues/333 fixed?

[07:41:42.0000] <annevk>
Domenic: no

[07:41:47.0000] <Domenic>
Aww

[07:42:30.0000] <annevk>
Domenic: it seems like we have enough infrastructure to solve it

[07:42:41.0000] <annevk>
Domenic: maybe

[07:42:54.0000] <annevk>
Domenic: because we have serialization/deserialization today

[07:46:18.0000] <Domenic>
Yeah, I thought maybe we would have fixed it while doing all that, but I guess not yet

[07:58:13.0000] <annevk>
Domenic: https://github.com/whatwg/html/pull/2277 was the last attempt at fixing it, I think that's before the serialize/deserialize thing happened

[07:58:24.0000] <annevk>
Domenic: maybe I'll give this a go tomorrow

[10:28:46.0000] <wanderview>
JakeA: are you still open for questions today or are you already at the pub?

[10:34:52.0000] <JakeA>
wanderview: I wish. Walking home from the station though. Can answer whatever I can from my phone

[10:35:16.0000] <wanderview>
JakeA: I'm putting it in an issue... another range request thing to add to the pile

[10:38:13.0000] <wanderview>
JakeA: https://github.com/w3c/ServiceWorker/issues/1201

[13:18:05.0000] <rbyers>
annevk, mkwst: Yeah I had some discussion with Joel and have some context.  Personally I'm fairly skeptical that we can remove AppCache anytime soon.  It seems like we really need service worker to be supported everywhere before we can reasonably expect usage to drop enough.

[13:19:39.0000] <rbyers>
... As one example (which I believe is representative, but one that I'd certainly avoid relying on as a specific case given it's a google property) mobile GMail's primary client is iOS.  It makes little sense for them to shift to a ServiceWorker model until iOS supports it.

[13:19:54.0000] <rbyers>
... And AppCache is still absolutely critical for good performance of mobile GMail.

[13:22:39.0000] <rbyers>
[aside: whoa, why the heck am I using W3C-scribe style on #whatwg IRC?  Perhaps my brain is preparing itself to be sitting in CSSWG meetings in TPAC  <grin>]

[13:24:33.0000] <rbyers>
Anyway I've heard a few other anecdotes of sites that feel they really don't have the choice to drop AppCache yet that make me think there's a general problem here still, but I don't think anyone has done the analysis.  I could be convinced by data that (outside mobile/offline GMail) there's really no good reason people should still be relying on AppCache and hence we should be more aggressive about removal in chromium.

[13:25:32.0000] <rbyers>
Either way with SW finally in progress in WebKit it does feel like just a matter of time to me, hardly seems worth investing in improving the spec.  Shouldn't be long before nobody in their right mind would write any new code depending on it...

[13:44:22.0000] <annevk>
rbyers: there was a similar story for mutation events; we still have those

[14:07:26.0000] <Domenic>
;_;


2017-09-29
[00:47:11.0000] <nox>
gsnedders: Don't know if you remember our past discussion about timeouts and load events,

[00:47:43.0000] <nox>
gsnedders: "By default the test harness will assume there are no more results to come when: * There are no Test objects that have been created but not completed * The load event on the document has fired"

[00:47:56.0000] <nox>
So that seems like if you delay the load event indefinitely, the test will timeout.

[02:22:14.0000] <JakeA>
annevk: Is it ok for specs to say "A {{Whatever}} object represents a [=whatever=]", where whatever is a concept, or should it be "A {{Whatever}} has a [=Whatever/whatever=] (a [=/whatever=])"

[02:23:14.0000] <JakeA>
The latter feels more precise. We went that way with headers in the fetch spec and it felt more precise and easier to reference.

[02:23:26.0000] <annevk>
JakeA: the former is okay if it's nothing else

[02:23:41.0000] <annevk>
JakeA: but if you then also add additional fields, it gets confusing

[02:24:29.0000] <JakeA>
annevk: yeah, results in a lot of text like "Let |foo| be {{Whatever}}'s associated [=whatever=]", which is difficult to track through the spec

[02:24:30.0000] <annevk>
JakeA: though in case of the former the question becomes why not flatten whatever into {{Whatever}}?

[02:25:06.0000] <JakeA>
annevk: because [=whatever=] can exist without {{Whatever}}

[02:25:14.0000] <annevk>
JakeA: e.g. DOM doesn't have a concept for elements and an Element object, it just has the latter

[02:26:06.0000] <JakeA>
annevk: In this case [=whatever=] is part of storage, and {{Whatever}} is an instance that exposes it

[02:26:18.0000] <annevk>
JakeA: okay, I think it's fine to just say represent then

[02:26:34.0000] <JakeA>
annevk: gotcha, cheers

[02:26:35.0000] <annevk>
Notification has something similar, but a tad more complex

[02:26:49.0000] <annevk>
There it's a M:1 relationship

[02:27:28.0000] <JakeA>
annevk: I've been pretty specific about it in background fetch https://wicg.github.io/background-fetch/#backgroundfetchregistration-background-fetch, but I can revisit that

[02:28:41.0000] <annevk>
JakeA: I think being specific is better

[02:29:48.0000] <annevk>
JakeA: I suspect that once we have internal slots we'll end up refactoring everything to use those, but there might be a case for some variant where an object exposes a concept 1:1

[02:30:33.0000] <JakeA>
annevk: I'm not familiar with internal slots, is there somewhere I can read up on those?

[02:30:49.0000] <annevk>
JakeA: it's the [[slot]] notation ECMAScript uses for private fields of objects

[02:31:21.0000] <annevk>
JakeA: I've been lobbying to get something like that in IDL so we can stop with the informal "has an associated" language and actually define the private object layout more formally

[02:31:38.0000] <annevk>
JakeA: https://github.com/heycam/webidl/issues/258

[02:32:53.0000] <JakeA>
Cheers!

[04:09:58.0000] <gsnedders>
nox: oh well

[04:10:15.0000] <gsnedders>
nox: if that's a problem, we should just add an explicit harness done function

[04:54:07.0000] <nox>
gsnedders: It’s not a problem. It’s just that this fact was my only explanation for a timeout in Servo.

[04:54:25.0000] <nox>
And it would have made me anxious if that wasn’t the actual cause of that timeout.

[05:35:57.0000] <annevk>
Pretty happy with https://tools.ietf.org/html/rfc7159#section-8.1

[05:39:30.0000] <smaug____>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=1403441#c13 ok so the plan is to actually modify session history. Drop the entries which have some state

[05:41:25.0000] <annevk>
smaug____: well that's my proposal, otherwise they can be used as a way to revive state

[05:41:52.0000] <smaug____>
sure, that is fine. I just wanted to make sure I understood the proposal.

[05:42:02.0000] <annevk>
kk

[05:42:16.0000] <smaug____>
So basically remove all the other entries except the first one for the domain

[05:42:19.0000] <smaug____>
or something like that

[05:42:46.0000] <annevk>
Oh, the RFC reading that way might be because of https://lists.w3.org/Archives/Public/www-tag/2013Nov/0074.html

[05:42:57.0000] <annevk>
I forgot I got myself involved somehow

[05:55:05.0000] <nox>
https://github.com/w3c/web-platform-tests/blob/master/html/semantics/embedded-content/media-elements/event_loadeddata.html#L29 Cute.

[06:36:46.0000] <Ms2ger>
Oops

[06:39:10.0000] <Ms2ger>
Broken in https://github.com/w3c/web-platform-tests/commit/1f1f813f93dd1084ea3656dec3f8907507e1bf34

[06:40:14.0000] <Ms2ger>
Seems like it's the only case

[06:59:14.0000] <wanderview>
JakeA: I can fix this range request result you saw on FF: "fetch(event.request) - seems to lose the range header somewhere, so it appears like the 200 result above"

[06:59:24.0000] <wanderview>
JakeA: but wondering if I should just wait

[07:00:00.0000] <JakeA>
wanderview: depends how you fix it. I think we only want APIs to be able to set that header

[07:00:18.0000] <Domenic>
Bikeshedding/style question, input from spec consumers welcome https://github.com/whatwg/meta/issues/41

[07:00:28.0000] <wanderview>
JakeA: I was going to set a hidden value on the Request... it would only get used if directly passed through... not persisted in Cache API, etc

[07:02:39.0000] <JakeA>
wanderview: yeah, I support that landing :D

[07:03:16.0000] <wanderview>
JakeA: the weird thing is if its really a Range header or something else... I'm confused now

[07:03:44.0000] <JakeA>
Pretty sure it's a range header, unless we're talking about different things

[07:04:23.0000] <wanderview>
JakeA: I meant in firefox we might be doing something different to ask for a range request instead of adding a header at that API point

[07:04:39.0000] <wanderview>
JakeA: like our "ResumeAt()" method which asks for maybe a range if its matches the previous response

[07:04:51.0000] <annevk>
Ms2ger: we have those "terms used from other specs" indexes with Bikeshed; perhaps that is indeed sufficient

[07:06:34.0000] <annevk>
TabAtkins: in case you didn't see Domenic's message above, your input on https://github.com/whatwg/meta/issues/41 would be appreciated

[07:06:49.0000] <annevk>
TabAtkins: seems like something you might have thought about given Bikeshed

[07:11:58.0000] <TabAtkins>
Thanks for the reference.

[08:00:01.0000] <Ms2ger>
annevk, oh, I looked at Fetch and didn't see it

[08:18:31.0000] <wanderview>
JakeA: I have to say, after using async functions and await a lot recently... I really like the decision not to put abort() on the fetch() promise

[08:50:24.0000] <JakeA>
wanderview: yeah, I think the model we have now is pretty good

[08:50:32.0000] <JakeA>
I love async/await too

[09:44:33.0000] <jyasskin>
JakeA: 2 cents re "represents a [=whatever=]": If the rest of the spec says "associated  [=whatever=]", I'd like that to be a link to somewhere that talks about how the [=whatever=] gets associated. https://wicg.github.io/background-fetch/#backgroundfetchregistration-background-fetch is great IMO, but I've seen some specs by other people that are much less clear.

[09:45:24.0000] <jyasskin>
webidl#258 is even better when we get it.

[12:03:10.0000] <rniwa>
Domenic: yt?

[12:07:52.0000] <Domenic>
rniwa: yeah

[12:08:53.0000] <rniwa>
Domenic: who works on geolocation stuff these days at Google?

[12:09:07.0000] <Domenic>
rniwa: not sure, let me check around a bit and ask if there's no clear docs...

[12:09:23.0000] <rniwa>
Domenic: thanks

[12:19:45.0000] <Domenic>
(I found the person who used to own it and they redirected me to their most likely guess for who now owns it; currently waiting for that second person to confirm or redirect me again...)

[12:23:15.0000] <Mek>
/me wouldn't be surprised if the answer is "nobody"...

[12:31:49.0000] <JakeA>
jyasskin: cheers!

[13:02:04.0000] <scheib>
rniwa: Oh Hi, https://www.chromium.org/teams/device-team is looking after Geolocation now.

[13:02:13.0000] <scheib>
(I'm on that team)

[14:03:32.0000] <Domenic>
omg upcoming Web IDL mixins are so good. https://github.com/heycam/webidl/pull/433

[14:03:42.0000] <Domenic>
so much simpler and better suited for their purpose

[14:03:50.0000] <Domenic>
So many Web IDL confusions just gone

[14:13:31.0000] <TabAtkins>
Agreed!

[14:58:21.0000] <jyasskin>
Domenic: https://github.com/travis-ci/dpl/pull/695 will make auto-gh-pages much simpler.

[14:59:03.0000] <jyasskin>
We'll be able to completely replace deploy.sh with https://github.com/jyasskin/testing/blob/master/.travis.yml

[14:59:04.0000] <Domenic>
jyasskin: oh wow, brilliant move

[14:59:39.0000] <jyasskin>
Domenic: The one maybe-downside is that their script doesn't keep any history in gh-pages. Do you think that matters?

[15:00:06.0000] <Domenic>
Now I'm feeling a little sad I never converted my gist into a blog post and garnered all the internet blog fame, but oh well, too late now!

[15:00:11.0000] <Domenic>
Hmm

[15:00:12.0000] <jyasskin>
Heh

[15:00:14.0000] <Domenic>
I used to not keep history

[15:00:16.0000] <Domenic>
But I like having it

[15:00:18.0000] <Domenic>
And it's not that hard

[15:00:23.0000] <Domenic>
Maybe worth modifying their script?

[15:01:08.0000] <jyasskin>
Yeah. I nominate you to write that PR. ;)

[16:35:31.0000] <rniwa>
scheib: hello

[16:35:38.0000] <rniwa>
scheib: are you still there?

[16:39:27.0000] <scheib>
rniwa: Yes about 10min

[16:53:30.0000] <jyasskin>
Is there a best practice for saying "specs that depend on this one need to do X"? https://w3c.github.io/webappsec-credential-management/#credential-internal-methods currently says "derived interfaces MUST override ...", but it's not really correct to MUST another specification.


2017-09-30
[18:07:51.0000] <Domenic>
It's not?

[18:08:00.0000] <Domenic>
I must other specs a decent amount

[18:08:06.0000] <Domenic>
Web IDL does all over the place

[21:32:27.0000] <annevk>
Yeah, I think that’s fine

[22:45:27.0000] <musgravejw>
hi there, I may have missed a thread on this issue (if there was one), was this a feature that is being considered?  https://github.com/whatwg/console/issues/110

[23:34:21.0000] <annevk>
musgravejw: all discussion on that is linked from there I think

[23:35:01.0000] <annevk>
musgravejw: if you’re referring to a mailing list, we no longer really use those in the WHATWG

[09:54:02.0000] <jyasskin>
Domenic/annevk: Specifications say how software works, and MUST specifies a requirement on implementations, sometimes multiple classes of implementations. Another specification isn't an implementation; it's another set of constraints on implementations. That said, it's clear, so if MUST is how we do it, I'll use MUST.

[10:09:00.0000] <Domenic>
I don't think specifications only say how software works. Sometimes they say how other specifications work.

[10:09:19.0000] <Domenic>
Again, that's most of what Web IDL does.

[10:55:02.0000] <annevk>
jyasskin: a web developer is not an impl

[10:59:07.0000] <annevk>
I thought https://www.w3.org/TR/qaframe-spec/#what-conform would be a good reference here, but it doesn’t really cover this explicitly

[11:10:20.0000] <annevk>
Maybe we should put some rules in Infra

[11:12:38.0000] <jyasskin>
Domenic: WebIDL mostly says, ~"when another specification says X, the browser implementation must Y." But you're right that it uses 'must' a lot to constrain what the other specifications can say.

[11:13:16.0000] <jyasskin>
annevk: We generally 'must' the server software if we're going to constrain the web developer. And, of course, 'must'ing HTML content was a disaster.

[11:13:35.0000] <jyasskin>
+1 for describing this in infra or somewhere.

[11:28:44.0000] <Domenic>
I've just never heard this rule that must can only apply to implementations...

[13:04:15.0000] <annevk>
Yeah, wonder about the source for that too

[13:04:41.0000] <annevk>
RFCs sometimes make rules for specifications

[13:07:20.0000] <annevk>
Mixed feelings on HTML myself; validator is generally considered useful

[13:07:58.0000] <annevk>
Is the thinking that a validator would emerge without a standard? Similar to eslint?

[14:49:32.0000] <TabAtkins>
jyasskin: Yeah, I use MUST to constrain things other than impls semi-regularly. Some in the group don't think it's reasonable to MUST an author, but it's like, you can't enforce it anyway, might as well be clear rather than conspicuously avoiding certain language.

