2016-09-01
[22:47:53.0000] <rniwa>
annevk: yt?

[22:53:20.0000] <dominicc>
rniwa: yt?

[22:53:25.0000] <rniwa>
dominicc: yeah

[22:53:35.0000] <rniwa>
dominicc: so there's some confusion about brand check in https://dom.spec.whatwg.org/#concept-create-element

[22:54:01.0000] <rniwa>
dominicc: I think the intent is to check it against any HTMLElement interface, not just the one in the same global

[22:54:43.0000] <dominicc>
Can I try custom elements in WebKit Nightly? I ran your LayoutTests in Chrome yesterday, they were very informative, found a few good bugs. I also found some things which, if WebKit is passing the tests, might be contrary to the spec. I made a detailed list I can share with you if you're interested.

[22:55:40.0000] <rniwa>
dominicc: great :)

[22:55:41.0000] <rniwa>
dominicc: that would be graet

[22:55:41.0000] <rniwa>
great*

[22:55:41.0000] <rniwa>
dominicc: unfortunately, there is not a good way to enable a runtime flag at the moment :(

[22:55:41.0000] <dominicc>
I have a link, one second...

[22:55:41.0000] <rniwa>
dominicc: you basically have to modify the code :(

[22:55:50.0000] <dominicc>
I tried building WebKit but I think I need a newer framework; I have 10.10. Guess that is old. Got some macro failure spew about CF_AVAILABLE.

[22:56:14.0000] <rniwa>
dominicc: hm...

[22:56:21.0000] <rniwa>
dominicc: so I'm going to try enabling it in STP soon-ish

[22:56:30.0000] <rniwa>
dominicc: my goal is to finish implementing as much as I can before TPAC

[22:56:36.0000] <rniwa>
dominicc: so that we can just sit down & compare impls

[22:56:46.0000] <dominicc>
Here's my notes:  http://goo.gl/yli9Ao

[22:57:40.0000] <dominicc>
Great! I plan to be at TPAC every day.

[22:59:09.0000] <dominicc>
re: confusion about the brand check, I guess it takes digging throw WebIDL to find out what "implements" means, but I could imagine that means any HTMLElement interface. What do you think?

[22:59:41.0000] <dominicc>
rniwa: I assume you mean in step 6.1.3?

[22:59:48.0000] <rniwa>
dominicc: yeah

[23:00:35.0000] <dominicc>
rniwa: There's a webidl issue linked in the note, it seems that any HTMLElement is certainly the intent.

[23:01:02.0000] <rniwa>
dominicc: yeah

[23:02:58.0000] <rniwa>
dominicc: cool. thanks for the notes

[23:03:15.0000] <rniwa>
dominicc: they were written way back in April or something when I first implemented the new spec

[23:03:31.0000] <rniwa>
dominicc: so all these things are fallouts from the spec changes that have happened since then

[23:04:44.0000] <rniwa>
dominicc: e.g. we don't implement any of sanity checks in 6.1.: https://dom.spec.whatwg.org/#concept-create-element

[23:05:00.0000] <rniwa>
although I'm fixing that right now. sort of.

[23:16:42.0000] <annevk>
rniwa: around a bit, lack of branding is a known issue with IDL and DOM

[23:17:14.0000] <rniwa>
annevk, dominicc: for now, WebKit & Chrome implementations both do "the right thing".

[23:17:20.0000] <rniwa>
but this is a compat risk.

[23:21:39.0000] <annevk>
rniwa: I guess we could clarify the issue and planned fix more, file an issue?

[23:21:40.0000] <rniwa>
annevk: I was about to but it seems like your issue is still open

[23:21:40.0000] <rniwa>
annevk: so i figured i don't need another one

[23:21:40.0000] <rniwa>
annevk: I'll just wait 'til the definition is added and then we can argue whether we need to fix it or not

[23:21:40.0000] <annevk>
rniwa: IDL is on track to get maintained a bit more, but it'll take a while still I suspect

[23:21:40.0000] <annevk>
rniwa: if Apple could find an editor somewhere…

[23:21:40.0000] <rniwa>
annevk: well, we need to first implement all these specs people have produced

[23:21:40.0000] <rniwa>
annevk: but yeah, i wish we had more man power to contribute there.

[23:21:45.0000] <annevk>
rniwa: if only Apple had the money

[23:22:14.0000] <rniwa>
annevk: the money isn't usually issue though. finding a candidate is insanely hard :(

[23:22:30.0000] <rniwa>
annevk: we've had a position open for more than 12 months in our team for example

[23:22:52.0000] <annevk>
heh

[23:24:36.0000] <rniwa>
annevk: the requirement that one has to work in Cupertino isn't helping there :(

[23:25:16.0000] <boogyman>
why does the location matter?

[23:25:21.0000] <rniwa>
annevk: so we can't tap on those good european software engineers who aren't willing to relocate, etc... :(

[23:25:27.0000] <rniwa>
boogyman: i don't know.

[23:26:20.0000] <boogyman>
maybe the fact that the position has been unoccupied for so long would spur the recruiters to consider other candidates

[23:31:44.0000] <rniwa>
annevk: are we supposed to be creating Element in a XML document when the custom element interface isn't defined and its name is a valid custom element name?

[23:31:52.0000] <rniwa>
annevk: or are we still supposed to create HTMLElement

[23:37:15.0000] <rniwa>
dominicc: ^

[23:37:23.0000] <rniwa>
I think the current spec indicates that it should be Element.

[23:37:31.0000] <rniwa>
implies*

[23:38:18.0000] <dominicc>
rniwa: What does the HTML spec say about XML documents having browsing contexts? I think if you found a definition you'd create a HTML element; what do you think about the possibility of finding a definition?

[23:38:54.0000] <rniwa>
dominicc: I'm not following.

[23:39:06.0000] <annevk>
rniwa: not sure

[23:39:21.0000] <rniwa>
dominicc: the existence of browsing context is independent of whether it's a XML document or a HTML docuemnt.

[23:39:22.0000] <dominicc>
To create a custom element you have to find a definition; to find a definition, you have to be creating an element in the HTML namespace.

[23:39:25.0000] <annevk>
rniwa: forgot whether XML parser is patched

[23:39:41.0000] <rniwa>
dominicc: that's not entirely true.

[23:39:46.0000] <dominicc>
That is https://html.spec.whatwg.org/multipage/scripting.html#look-up-a-custom-element-definition step 1?

[23:40:06.0000] <rniwa>
dominicc: you can create an element inside a XML document, which uses the same global object as the one that as a browsing context

[23:40:17.0000] <rniwa>
dominicc: and then adopt that element into the document with a browsing context

[23:40:18.0000] <dominicc>
rniwa: Are you referring to create an element step 6.2.1?

[23:40:30.0000] <rniwa>
dominicc: not sure

[23:40:34.0000] <rniwa>
dominicc: not quite*

[23:40:54.0000] <rniwa>
dominicc: I'm trying to create an element in a detached XML document. e.g. one created by DOMImplementation

[23:41:22.0000] <rniwa>
dominicc: then adopt it back into a HTML document with a browsing context both of which shares a single global object

[23:41:33.0000] <rniwa>
/me this is getting complicated

[23:41:59.0000] <dominicc>
rniwa: OK. I'm with you so far. You do those things.

[23:42:01.0000] <rniwa>
dominicc: so in this case, the element we're creating isn't necessary in HTML namespace.

[23:42:22.0000] <rniwa>
dominicc: so I think it should be using Element interface

[23:42:37.0000] <rniwa>
dominicc: and upgrade should subsequently fail because it doesn't match the namespace

[23:43:06.0000] <rniwa>
more precisely, looking up a custom element definition step should not find any interface

[23:43:13.0000] <dominicc>
rniwa: Right. I think every algorithm checks the namespace is HTML and bails out/no ops if it isn't HTML.

[23:43:19.0000] <rniwa>
dominicc: something like that

[23:43:31.0000] <dominicc>
Right. That is look-up-a-custom-element-definition step 1 I linked to ^^^

[23:45:15.0000] <rniwa>
dominicc: ah, okay. now I follow what you were saying earlier

[23:45:39.0000] <dominicc>
rniwa: Sorry for the bit about browsing contexts, you're right it's not a browsing context thing.

[23:48:49.0000] <rniwa>
dominicc: oh, np.

[00:18:54.0000] <rniwa>
dominicc: i forgot to reply but i'll be at TPAC for five days so hopefully we'll have a plenty of time to sort out details of custom elements

[00:19:11.0000] <dominicc>
rniwa: splendid, look forward to it!

[00:19:24.0000] <dominicc>
rniwa: domenic is coming too.

[00:19:29.0000] <rniwa>
dominicc: cool

[00:20:08.0000] <rniwa>
dominicc: luckily, custom elements have fewer contentious points than shadow DOM still

[00:20:41.0000] <rniwa>
dominicc: except is=

[00:21:05.0000] <rniwa>
dominicc: so hopefully it'd be straight forward to sort out the remaining issues at TPAC at least for autonomous custom elements

[00:21:12.0000] <dominicc>
rniwa: Yep!

[00:22:09.0000] <dominicc>
rniwa: We're working hard to get our tests in shape by that time. We need to do some updates for recent spec changes.

[00:22:36.0000] <rniwa>
dominicc: yeah, i'm doing the same for webkit tests as fast as I can

[00:25:22.0000] <rniwa>
dominicc: it looks like you haven't added "element definition is running flag"?

[00:25:54.0000] <dominicc>
rniwa: not yet. We still have the older check where reentrancy is allowed, as long as it is a different name.

[00:26:05.0000] <rniwa>
dominicc: I see.

[00:26:06.0000] <dominicc>
rniwa: This will change next week.

[00:29:28.0000] <rniwa>
dominicc: here's a way to enable custom elements on STP.

[00:29:41.0000] <dominicc>
rniwa: ooh goody, what?

[00:29:42.0000] <rniwa>
dominicc: on macOS Sierra, there's a submenu in "Develop" menu

[00:30:22.0000] <dominicc>
rniwa: interesting. I will have to set up Sierra... I'm travelling next week :/

[00:30:34.0000] <rniwa>
dominicc: yeah, probably not a good idea :(

[00:32:52.0000] <rniwa>
dominicc: but going forward, you should be able to toggle experimental features on that submenu.

[00:33:17.0000] <rniwa>
so hopefully this pain of not being able to toggle features without having to build webkit will go away soon

[00:50:15.0000] <zcorpan>
I wonder if we can start checking the MIME type for (classic) Worker()/SharedWorker() and importScripts()

[00:51:44.0000] <zcorpan>
although maybe that doesn't help anything if <script> still has a lax check

[01:11:21.0000] <annevk>
zcorpan: yeah, <script> is the main problem

[02:00:47.0000] <zcorpan>
apart from <script>, which requests send Accept:*/* in chrome?

[02:04:37.0000] <annevk>
zcorpan: is https://bugzilla.mozilla.org/show_bug.cgi?id=1299373 on your list?

[02:04:48.0000] <annevk>
zcorpan: XHR and fetch() should, iirc

[02:08:14.0000] <zcorpan>
annevk: the not-execute part is "If src is the empty string, queue a task to fire a simple event named error at the element, and abort these steps." https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model:attr-script-src-5

[02:10:19.0000] <zcorpan>
annevk: as for reflect, <script src> indeed falls under that case and should return "" per spec

[02:14:45.0000] <zcorpan>
it can't find any browser now that returns empty string for .src for http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=4429 though.

[02:16:52.0000] <zcorpan>
the spec issue was https://github.com/whatwg/html/issues/859

[02:19:53.0000] <zcorpan>
https://github.com/w3c/web-platform-tests/pull/2663 .... looks like I've missed to follow up on this

[03:14:56.0000] <zcorpan>
MikeSmith: r? https://github.com/whatwg/html-build/pull/93

[03:24:03.0000] <MikeSmith>
zcorpan: so yeah maybe I will just drop the IE-conditional-comment warning

[03:29:10.0000] <zcorpan>
MikeSmith: ok. I made a PR for that :-)

[03:30:19.0000] <zcorpan>
annevk: FYI https://discuss.httparchive.org/t/which-mime-types-are-used-for-accept-requests/821

[03:31:17.0000] <zcorpan>
MikeSmith: if you mean comment-before-doctype warning

[03:41:04.0000] <mkwst>
zcorpan: Thanks for looking into this. :)

[03:41:35.0000] <mkwst>
`*/*` is used for just about everything, though; I think it's going to be tough to isolate `<script>` responses just from the network-level data.

[03:42:13.0000] <zcorpan>
mkwst: yeah :-( why is favicon */* and not together with IMAGE though?

[03:42:24.0000] <mkwst>
zcorpan: Oversight, probably.

[03:44:36.0000] <MikeSmith>
zcorpan: yeah that’s what I meant

[03:45:07.0000] <zcorpan>
MikeSmith: https://github.com/validator/htmlparser/pull/2 is the pr

[03:47:14.0000] <zcorpan>
annevk: OK if I go ahead and merge https://github.com/whatwg/html/pull/1732 and the lint check?

[03:48:27.0000] <annevk>
zcorpan: yeah, thanks for working on it

[03:48:58.0000] <annevk>
zcorpan: I'm somewhat on-off for two weeks and then TPAC, after all which I hope to get back to the WHATWG style guide stuff

[04:02:32.0000] <zcorpan>
annevk: ok cool

[04:18:53.0000] <smaug____>
mounir: re-ping

[04:18:59.0000] <smaug____>
or perhaps he is on vacation

[04:37:45.0000] <smaug____>
what is wrong with w3 drafts

[04:37:58.0000] <smaug____>
some server down so that css files aren't loaded?

[04:38:41.0000] <smaug____>
or bug in https://www.w3.org/Tools/respec/respec-w3c-common

[04:40:57.0000] <smaug____>
MikeSmith: do you happen to know if this is a known issue, or where should I report this?

[04:41:29.0000] <smaug____>
https://w3c.github.io/preload/ for example looks bad, so does http://w3c.github.io/presentation-api/

[04:55:53.0000] <zcorpan>
smaug____: Uncaught ReferenceError: PARAMS_CONTAINS is not defined

[05:00:42.0000] <zcorpan>
maybe a bug in the minifier? https://github.com/w3c/respec/blob/e384535ab86bd0511c96e88b24902889e8a1eb07/js/deps/highlight.js#L990 doesn't have "return" there

[05:01:15.0000] <mkwst>
zcorpan: https://codereview.chromium.org/2303443005

[05:01:50.0000] <zcorpan>
mkwst: <3

[05:02:24.0000] <zcorpan>
smaug____: https://github.com/w3c/respec/issues/928 was reported already

[05:36:51.0000] <smaug____>
annevk: remind me, what is the current state of * settings object

[05:36:51.0000] <botie1>
will do

[05:36:57.0000] <smaug____>
which one should be used normally

[05:37:54.0000] <smaug____>
I assume incumbent

[05:38:52.0000] <smaug____>
or Domenic ^

[05:47:45.0000] <annevk>
smaug____: no, use relevant, then current

[05:47:59.0000] <smaug____>
hmm, what is current

[05:48:23.0000] <smaug____>
seems like we've got even more * settings object since I last time looked at this part of the spec

[05:49:02.0000] <smaug____>
entry, incumbent, relevant, current, environment

[05:49:16.0000] <smaug____>
are there more

[05:49:19.0000] <annevk>
smaug____: matches JavaScript's current Realm

[05:49:40.0000] <smaug____>
I need to understand what current is

[05:49:43.0000] <smaug____>
and what is relevant

[05:49:49.0000] <smaug____>
and what is environment

[05:49:58.0000] <annevk>
smaug____: that's it; entry/incumbent are least interoperable

[05:50:28.0000] <annevk>
smaug____: relevant is the global object of a platform object

[05:50:38.0000] <smaug____>
In Gecko we don't have anything for relevant or current, I think

[05:50:50.0000] <annevk>
smaug____: we do for sure

[05:50:55.0000] <smaug____>
I see, for relevant it is implicit

[05:51:10.0000] <annevk>
smaug____: many features depend on those

[05:52:11.0000] <smaug____>
hmm, now I'm lost with current and incumbent

[05:52:50.0000] <smaug____>
and looks like there is a getter for current in Gecko

[05:55:00.0000] <smaug____>
annevk: but ok, new specs should use entry settings, right?

[06:04:05.0000] <annevk>
smaug____: no

[06:04:24.0000] <annevk>
smaug____: relevant, then current

[06:28:02.0000] <smaug____>
annevk: er, I said wrong. missed 'not'

[06:28:16.0000] <smaug____>
but ok, thanks

[06:28:34.0000] <annevk>
Heh

[06:29:16.0000] <smaug____>
annevk: filed a presentation API bug to switch using something else than entry settings

[06:31:17.0000] <annevk>
Ta

[06:43:23.0000] <tobie>
TabAtkins, others: is there a quick an easy way to include JS snippets in bikeshed source files without having to escape constructs that are mistaken for macros?

[06:45:23.0000] <Ms2ger>
setInterval('{', 10)

[06:45:36.0000] <Ms2ger>
Should that hit window.onerror once or every ten ms?

[06:55:39.0000] <ondras>
/me would vote for every ten ms

[06:59:13.0000] <smaug____>
yeah, every 10 it should be

[07:15:18.0000] <zcorpan>
Ms2ger: per spec it's every 10 AFAICT. note there's also event handler content attributes, and i think tests for these in wpt

[07:15:56.0000] <Ms2ger>
Yeah

[07:16:55.0000] <zcorpan>
in html/webappapis/scripting/processing-model-2/

[07:17:39.0000] <zcorpan>
though maybe not checking if it's once or every time

[07:18:17.0000] <Ms2ger>
Yeah

[07:18:22.0000] <Ms2ger>
I don't think there's one for that

[07:20:09.0000] <zcorpan>
could change ran from a boolean to an int and increment it, then check the value being > 1 after a big enough timeout, or pass the test on the second onerror invocation...

[07:21:59.0000] <Ms2ger>
Yeah

[07:22:09.0000] <Ms2ger>
I tried that, but it was flaky in Servo

[07:23:41.0000] <zcorpan>
"pass the test on the second onerror invocation" shouldn't be flaky though?

[07:23:53.0000] <Ms2ger>
Yeah

[07:24:08.0000] <Ms2ger>
Anyway, for another day

[10:28:03.0000] <TabAtkins>
tobie: Unfortunately no. The macro recognizer's regex should ignore *most* JS array access, but not all.  Specifically, it only recognizes macro names composed of uppercase characters, digits, and dashes (and excludes all-digit ones).

[10:28:37.0000] <TabAtkins>
So common JS practice (using foo[0] or foo[var]) is perfectly safe.

[10:30:15.0000] <tobie>
TabAtkins: yeah, minified code (...[N]) along with /[A-Z]/ regex constructs in modernizr snippet.

[10:30:33.0000] <tobie>
s/cat/sed/ and was good to go

[10:30:39.0000] <TabAtkins>
Ah, kk.

[10:31:01.0000] <TabAtkins>
I think I know how to make the text-fixer function not replace inside of opaque elements, tho.

[10:32:29.0000] <TabAtkins>
I run block-Markdown parsing first, which *is* smart enough to avoid opaque elements. I think I can just litter the text with escape sequences, to make it trivial for the inline text-fixer to know whether it's in an opaque thing or not, without having to redo the parsing logic on its own.

[10:32:36.0000] <TabAtkins>
Then remove them afterwards.

[10:33:39.0000] <tobie>
yeah, I can see that working.

[10:34:15.0000] <marti_>
Hi is there zcorpan?

[10:34:28.0000] <tobie>
TabAtkins: You might have backward compat issues though, if escaped stuff suddenly no longer needs escaping

[10:34:47.0000] <marti_>
 I would like to work in https://github.com/whatwg/html/issues/507

[10:34:47.0000] <TabAtkins>
Why is the world pain?

[10:43:51.0000] <Domenic>
marti_: how can we help you?

[16:20:44.0000] <jyasskin>
API design question: is the https://w3c.github.io/presentation-api/#dom-presentationrequest-getavailability pattern something we should emulate in other specs, specifically Web Bluetooth? Folks write "new PresentationRequest("...").getAvailability().then(avail => ...)", and then avail.value holds whether the resource is available, and you do

[16:20:45.0000] <jyasskin>
avail.addEventListener("changed") to check if availability changes.

[16:21:04.0000] <jyasskin>
s/changed/change/

[16:22:26.0000] <jyasskin>
Exposing this through a non-Promise interface isn't ideal because it forces shipping the information to every renderer whether or not they want it, but the approach of creating a whole type for it is also ugly.


2016-09-02
[17:57:43.0000] <TabAtkins>
jyasskin: Sounds like what you want is the thing I'm calling a "ReactiveValue" in http://www.xanthir.com/b4PV0

[17:58:00.0000] <TabAtkins>
An object Stream which exposes its current value synchronously.

[17:58:18.0000] <TabAtkins>
Object streams, uh, don't exist yet tho.

[18:02:34.0000] <wanderview>
TabAtkins: thats a great way to leak windows if someone send a DOM object through a stream

[18:50:17.0000] <TabAtkins>
Uh, no more so than literally any other way of communicating values?

[19:36:54.0000] <wanderview>
TabAtkins: it keeps the value around forever until another value is produced in the stream, no?  I've seen this used carelessly to distribute "window closed" events which of course always leaked the last window that was closed

[19:37:53.0000] <wanderview>
I had to change our event channel things in our addon-sdk to hold their last value weakly to avoid these leaks: https://bugzilla.mozilla.org/show_bug.cgi?id=1267693

[20:29:22.0000] <jyasskin>
TabAtkins: Yep, ReactiveValue<boolean> sounds right for this use case. The API needs to avoid sending values until someone subscribes though.

[20:34:06.0000] <jyasskin>
Although the API for ReactiveValue is bigger than I think would be useful for watching availability

[22:46:24.0000] <Domenic>
jyasskin: doesn't look great to me? In particular it seems like those would work better as something like PresentationAvailability.request("...").then(...)? But I dunno maybe in that domain there are actually two separate concepts of request and availability that are important, as seen by the start/reconnect methods?

[01:16:36.0000] <WisdomSky>
hi

[01:16:36.0000] <botie1>
hi, WisdomSky

[01:34:01.0000] <tobie>
Thoughts on dropping the " (Second Edition)" suffix from the Web IDL spec title? (Seems obvious to me—it should be a living standard—but there might be some backstory I'm not aware of here.)

[01:35:39.0000] <tobie>
^ annevk

[01:36:05.0000] <tobie>
(as you're the only one awake right now.)

[01:36:13.0000] <annevk>
tobie: fine with me

[01:36:22.0000] <annevk>
tobie: the whole distinction never made much sense to me

[01:36:22.0000] <tobie>
ta

[01:36:31.0000] <tobie>
good

[01:37:02.0000] <annevk>
tobie: should also remove "Latest Version:" as it's not actually the latest version and maybe clean that header up in general

[01:37:51.0000] <tobie>
annevk: yeah, that's easier to do manually (there's a bunch of manual changed queued once all the automated things are done)

[01:37:59.0000] <tobie>
*changes

[01:38:03.0000] <annevk>
cool

[01:38:09.0000] <tobie>
nearly there

[01:38:12.0000] <annevk>
tobie: did someone get around to reviewing things yet?

[01:38:28.0000] <tobie>
oh yeah--heycam filed something like 30 issues

[01:38:40.0000] <annevk>
oh nice

[01:38:50.0000] <annevk>
that's very quick, excellent

[01:38:53.0000] <tobie>
well, that's a question of perspective

[01:38:56.0000] <tobie>
:D

[01:39:02.0000] <annevk>
heh

[01:40:20.0000] <tobie>
annevk: one of the last things I want to check it the dfn stuff you mentioned.

[01:41:04.0000] <tobie>
what precisely is the DOM spec relying on to do all of the linking to WebIDL?

[01:41:59.0000] <tobie>
annevk: does it map bikeshed behavior 1:1?

[01:42:19.0000] <annevk>
tobie: basically bikeshed has some kind of "dfn contract"

[01:42:40.0000] <annevk>
tobie: Shepherd, some "global" tool that indexes specs, uses that contract for cross-spec links

[01:42:49.0000] <annevk>
tobie: IDL implements that "dfn contract" for some terms today

[01:43:10.0000] <annevk>
tobie: other specs rely on IDL doing that

[01:43:16.0000] <tobie>
so if I go by: https://github.com/tabatkins/bikeshed/blob/master/docs/dfn-contract.md, I'm good?

[01:43:26.0000] <annevk>
tobie: yeah

[01:44:00.0000] <annevk>
tobie: the main thing that's important is that stuff that has data-dfn-for="" and such today, has data-dfn-for="" / for="" going forward

[01:44:02.0000] <tobie>
annevk: ok, that's informally what I followed. Just want to write a bunch of test that verifies this, now. Thanks.

[01:44:40.0000] <annevk>
tobie: note that in your source you can spell it the shorter for="", bikeshed should handle the rest

[01:44:49.0000] <annevk>
tobie: the other data-* also have shorthands

[01:45:02.0000] <annevk>
tobie: should all be specified in "dfn contract"

[01:47:22.0000] <tobie>
annevk: yes, I think I got those mostly right. There might be a couple of corner cases though. I'll write a bunch of tests.

[01:47:39.0000] <tobie>
Easier to fix them now than later.

[01:50:18.0000] <annevk>
On the other hand, will be much easier for folks to contribute with bikeshed

[02:44:58.0000] <zcorpan>
annevk: fyi https://github.com/plinss/widlparser/issues/17

[03:54:12.0000] <annevk>
Ta

[03:54:36.0000] <annevk>
Could maybe use underscore hack, but…

[04:56:44.0000] <zcorpan>
mkwst: wonder why github is highlighting this? https://github.com/w3c/webappsec-csp/commit/bb49255376c3f485831c9ce90c710157cd12c507#diff-117d6498d2aa8019cc0abf5eeb87a9faR3513

[04:57:38.0000] <mkwst>
Looks like I missed a `. https://github.com/w3c/webappsec-csp/commit/bb49255376c3f485831c9ce90c710157cd12c507#diff-117d6498d2aa8019cc0abf5eeb87a9faL3486

[04:58:47.0000] <mkwst>
Somewhere. Or maybe GitHub is nuts? :)

[04:59:21.0000] <mkwst>
A problem is that this document really isn't HTML. It's mostly HTML.

[04:59:54.0000] <zcorpan>
looks like github's syntax highlighter is incredibly confused

[05:00:02.0000] <mkwst>
And HTML syntax highlighters aren't thrilled with the mix of markdown and HTML.

[05:00:33.0000] <mkwst>
Somewhere on my list is to go through the doc and consistently use the new bikeshedisms that have cropped up over the last year.

[05:04:34.0000] <mkwst>
I think the real issue here is that I have unclosed elements in the document on purpose.

[05:05:22.0000] <mkwst>
https://github.com/w3c/webappsec-csp/blob/master/index.src.html#L3441 <--

[09:19:58.0000] <jyasskin>
mkwst: I think you could write that as &lt; to unconfused github.

[09:20:01.0000] <jyasskin>
*unconfuse

[09:23:23.0000] <TabAtkins>
tobie: Ideally you convert down to the minimal Bikeshed representation - <dfn data-dfn-type=foo> just becomes <dfn foo>, all the other <dfn data-dfn-*="bar">s become <dfn *="bar">.

[09:24:17.0000] <TabAtkins>
If a data-dfn-* is on an ancestor of some <dfn>s, it converts down to dfn-* (have to be able to distinguish between the dfn-* and link-* set when it's not on a <dfn> or <a>).

[09:29:11.0000] <tobie>
TabAtkins: I think I got the first part mostly right.

[09:29:45.0000] <tobie>
I'm not sure I understand the second part nor it if applies to WebIDL.

[09:31:18.0000] <TabAtkins>
<dfn data-dfn-for=Foo>bar</dfn> can be written as <dfn for=Foo>bar</dfn> in Bikeshed.

[09:31:50.0000] <TabAtkins>
You *never* need to type a data- prefix for any of Bikeshed's attributes in an actual Bikeshed document.

[09:32:24.0000] <TabAtkins>
And for <dfn> and <a>, you can omit the whole data-dfn- and data-link- prefix, because it's obvious.

[09:36:04.0000] <tobie>
Yes. Got that part. What I didn't get: what are data-link- prefixes and how does the ancestor system works

[09:36:15.0000] <tobie>
TabAtkins: ^

[09:37:01.0000] <TabAtkins>
Oh, autolinking technically runs off of data-link-* attributes, identical to the data-dfn-* attributes. You just never see them, because they're *only* useful in Bikeshed documents, where you never have to write them. ^_^

[09:37:26.0000] <TabAtkins>
But you can put the dfn/link attributes on an ancestor element and they'll apply to all the <dfn>/<a> descendants (unless overridden).

[09:38:43.0000] <TabAtkins>
And when you do so, you can omit the data- prefix, but need to keep the dfn- or link- part (so you can put both <dfn> and <a> in a block and not have them both receive the same defaults, as that's rarely useful).

[09:39:15.0000] <tobie>
OK, I get it.

[09:43:29.0000] <tobie>
TabAtkins: if you read XSLT: https://github.com/tobie/webidl/blob/c84a0f7/WebIDL-bs.xsl#L350-L382

[09:43:59.0000] <tobie>
I think that covers all but the ancestor cases.

[09:44:14.0000] <TabAtkins>
Looks good to me.

[09:44:20.0000] <tobie>
Which I think WebIDL doesn't have (but will check).

[12:26:04.0000] <smaug____>
mounir: ping

[13:56:43.0000] <jyasskin>
Domenic: I'm translating the Presentation pattern to "navigator.bluetooth.getAvailability()..then(avail => ...)", and then avail.value holds whether the user has any bluetooth adapter at all. Are you suggesting that we should put a requestBluetooth() function in front of requestDevice(), and have it fail if there's no adapter? How would it behave if the user

[13:56:43.0000] <jyasskin>
then unplugged the adapter? Or plugged the first one in?

[13:58:49.0000] <Domenic>
jyasskin: I don't really understand the second idea, so it's probably not what I'm suggesting :)

[13:59:07.0000] <Domenic>
jyasskin: To me the biggest question is whether availability needs to be its own class (with a .value property) or not. The weird thing in the presentation API was separate request and availability classes

[13:59:32.0000] <jyasskin>
:) If Presentation spelled their thing PresentationAvailability.request("...").then(...), how would folks sign up to be notified if availability changed?

[14:00:33.0000] <Domenic>
I think I see. Putting it on whatever their "navigator.bluetooth" is seems reasonable to me.

[14:00:59.0000] <Domenic>
navigator.bluetooth.onavailable = ..., or even navigator.bluetooth.whenAvailable.then(...)

[14:01:35.0000] <jyasskin>
With just onavailable, how do we get the initial value?

[14:02:07.0000] <jyasskin>
whenAvailable as a Promise doesn't work well because we also want to eagerly say "no" if no adapter's available.

[14:02:44.0000] <jyasskin>
We could do a Promise<boolean> and put the onavailable at the top level.

[14:02:56.0000] <Domenic>
jyasskin: yeah that last is what I was thinking

[14:03:14.0000] <Domenic>
This is indeed, as Tab mentioned, an instance of a more general concept we see a lot

[14:03:24.0000] <Domenic>
inputEl.value/inputEl.oninput, etc.

[14:03:34.0000] <jyasskin>
Ok, I'll follow https://xkcd.com/927/ and do what you're suggesting. :)

[14:03:48.0000] <Domenic>
I guess the question is whether this should be a synchronous getter or promise getter for the initial thing

[14:04:10.0000] <jyasskin>
We want a promise getter for the initial thing so we don't have to send it to every renderer.

[14:05:45.0000] <jyasskin>
With the event, I think we need a new event type so it can transmit the value? I don't really want to make folks do getAvailability().then(...) inside the event handler.

[14:06:29.0000] <Domenic>
Seems true... I'm a little surprised we don't have a generic ValueEvent, ick.

[14:11:19.0000] <jyasskin>
I can specify ValueEvent in WebBT. ;)

[14:11:20.0000] <jyasskin>
Domenic or TabAtkins: do you know of any frameworks that have implemented this pattern? I think what we really want is a kind of event listener that's guaranteed to fire with an initial value. TabAtkins' ReactiveValue has a whole bunch layered on top of that, but we don't really need the complexity.

[14:12:13.0000] <TabAtkins>
I mean, th epoint of having a stream is that there's a ridiculous amount of great stuff you can do with the combinators once you get a good ecosystem going. Same with promises - any individual usage is typically okay with something smaller than a Promise.

[14:12:37.0000] <TabAtkins>
Benefit is that the value/time dependency is reified and manipulable.

[14:12:55.0000] <Domenic>
jyasskin: not really; people usually use something more general and just shoehorn this in. They are called "signals" in https://github.com/kriskowal/gtor/ and in my presentation https://vimeo.com/132786072

[14:17:23.0000] <jyasskin>
That's fair. I'm worried about specifying too much up front, especially in a spec that's not specifically focused on reactivity primitives. What's the minimum subset? Just availability.forEach(callback), where callback is guaranteed to be called once with the current value?

[14:18:17.0000] <Domenic>
oof, I would not... I would just specify ValueEvent, onavailable, and getAvailability().then(aBool => ...)

[14:18:34.0000] <jyasskin>
Domenic: SGTM

[14:45:34.0000] <TabAtkins>
Yeah, I'd def stay simple with this until we get something useful actually specced.

[15:26:18.0000] <jyasskin>
TabAtkins: Somehow [[!DOM#constructing-events]] is producing the text "DOM Standard §constructing-events" despite https://dom.spec.whatwg.org/#constructing-events. I think DOM's in Shepherd. Have I done something dumb?

[15:27:17.0000] <jyasskin>
(That should be "[[DOM#constructing-events]]")

[15:27:26.0000] <TabAtkins>
Oh phew, I was like "how the HELL"

[15:27:45.0000] <TabAtkins>
And no, probably not your fault. Doing some final testing on something right now, will get to this in a sec.

[15:27:58.0000] <jyasskin>
TabAtkins: Thanks!

[15:28:03.0000] <TabAtkins>
(I noticed something similar on a CSSWG spec today.)

[15:32:18.0000] <jsbell>
Do we have a "Encodings for web standards dorks" doc that explains JS's strings are 16-bit code units (and JS's various string/character handling FUNctions), DOMStrings are 16-bit clean not UTF-16, fun edge cases to be aware of, when USVString is appropriate, etc etc? I think our collected knowledge is just strewn across notes in places like WebIDL and TAG notes, but maybe someone's consolidated it?

[15:33:12.0000] <jsbell>
Told a new developer "make sure to test with \uDC00\uD800" and he found a bug in Firefox. :P

[15:46:54.0000] <jyasskin>
TabAtkins: Could you add https://w3c.github.io/fingerprinting-guidance/ to Shepherd?

[15:47:19.0000] <botond>
TabAtkins: what does a bright pink highlight mean in a Bikeshed source?

[15:47:19.0000] <TabAtkins>
jsbell: https://simonsapin.github.io/wtf-8/ ?

[15:47:30.0000] <jsbell>
TabAtkins: That too. :)

[15:47:49.0000] <TabAtkins>
botond: I just use it for highlighting headings, to make the section breaks more obvious in the Sublime minimap.

[15:49:10.0000] <botond>
TabAtkins: but not markdown-style headings, apparently

[15:49:45.0000] <TabAtkins>
Yeah, as I said the other day, I haven't updated the highlighting styles in a long while. Latest revision predates markdown-style headings being valid.

[15:53:10.0000] <TabAtkins>
jyasskin: Done. Give it a few for those to filter into the db.

[15:53:19.0000] <jyasskin>
TabAtkins: Thanks!

[16:24:53.0000] <TabAtkins>
Aw dang, Status metadata now emits a proper error message when you're in a new group and try to use a W3C status.

[16:25:20.0000] <TabAtkins>
This was a lot of work, but it's *super* helpful to the user now, which makes me happy. The previous failure state was terrible and confusing.


2016-09-03
[17:04:05.0000] <jyasskin>
:-D


2016-09-04
[09:38:43.0000] <smaug____>
huh, the spec terminology about microtasks has changed a lot since I read it last time

[09:46:53.0000] <annevk>
Really? Hmm

[09:52:41.0000] <smaug____>
what is " execute a compound microtask subtask" about?

[09:52:52.0000] <smaug____>
and what is 'solitary callback microtasks'.  the spec says "This specification only has solitary callback microtasks."

[09:52:55.0000] <smaug____>
but nothing seems to use them

[09:53:29.0000] <smaug____>
and nothing explains what "solitary callback microtasks"

[09:53:32.0000] <smaug____>
are

[09:55:05.0000] <smaug____>
or how they are used

[09:55:55.0000] <smaug____>
I guess it is just a name for something, but I don't know when it is used

[09:58:19.0000] <annevk>
smaug____: compound is for mutation observers

[09:58:30.0000] <smaug____>
sure, that is clear

[09:58:44.0000] <annevk>
smaug____: to make sure they do not get interleaved with promises and such

[09:59:43.0000] <annevk>
smaug____: forgot where HTML queues microtasks, used to be for table sorting but that is out

[09:59:58.0000] <smaug____>
but what is "solitary callback microtasks'" ?

[10:00:17.0000] <smaug____>
and what is " execute a compound microtask subtask" about, why is it needed?

[10:00:25.0000] <annevk>
smaug____: I guess the counterpart to a compound one?

[10:00:39.0000] <smaug____>
ok, and when is it used?

[10:01:32.0000] <smaug____>
I guess with Promises, but where is that defined?

[10:02:20.0000] <annevk>
smaug____: JS integration I guess?

[10:02:36.0000] <smaug____>
and where is that ? :)

[10:02:43.0000] <annevk>
smaug____: sorry, not in a good place to research

[10:02:52.0000] <smaug____>
ok

[10:02:53.0000] <annevk>
smaug____: just have a phone

[10:03:10.0000] <smaug____>
/me is in a train so network may die at any time

[10:03:55.0000] <smaug____>
I really don't understand the comment "This specification only has solitary callback microtasks." when nothing in the spec seems to use such microtasks

[10:03:59.0000] <annevk>
smaug____: https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-job-queue

[10:05:43.0000] <annevk>
smaug____: compound almost reads like a nested task

[10:06:11.0000] <annevk>
smaug____: I wonder what that does to timing of Promise callbacks

[10:07:23.0000] <annevk>
smaug____: promise callbacks queued during mutation callbacks run directly after or some such?

[10:07:48.0000] <annevk>
Anyway, I once again recommend reaching out to aklein

[10:08:18.0000] <annevk>
I have the feeling every other month someone from Moz is confused by this 😊

[10:08:20.0000] <smaug____>
I thought Domenic had written this stuff. Ok, thanks

[10:08:47.0000] <annevk>
Domenic wrote the JS integration stuff

[10:09:00.0000] <annevk>
Compound microtasks are way older

[10:09:19.0000] <annevk>
Basically existed since mutation observers

[10:09:45.0000] <smaug____>
annevk: well, I'm confused. I invented microtasks and then every couple of months more complications are added to the specs dealing with them, and somewhat amusingly no one dares to ask me about the changes :p

[10:11:03.0000] <annevk>
smaug____: you should talk to aklein

[10:11:25.0000] <annevk>
smaug____: also, nothing changed since forever

[10:11:50.0000] <smaug____>
well, all the slots stuff is quite new

[10:12:01.0000] <annevk>
smaug____: could maybe look at git log of DOM and find out when it started using compound microtask

[10:12:16.0000] <annevk>
smaug____: oh yes, that is

[10:12:31.0000] <annevk>
smaug____: we discussed that I think

[10:13:06.0000] <annevk>
smaug____: that is not a microtask change though

[14:09:18.0000] <tobie>
TabAtkins: struggling with how to markup some of the WebIDL. For example: what is the type of void? dfn? typedef?

[14:10:00.0000] <tobie>
http://heycam.github.io/webidl/#idl-void


2016-09-05
[23:56:41.0000] <tobie>
annevk: re for attribute for DFNs: Bikeshed doesn't pick it up for dfns of type dfn.

[23:57:41.0000] <annevk>
tobie: it does

[23:57:48.0000] <tobie>
annevk: so <dfn export for=foo>definition</dfn> and <dfn export for=bar>definition</dfn> conflict

[23:58:00.0000] <annevk>
tobie: maybe you need a dfn for the for value?

[23:58:24.0000] <tobie>
oh... so I'd need to add a "for"' for the value?

[23:58:27.0000] <tobie>
arg!

[23:58:40.0000] <annevk>
tobie: URL uses this a bunch

[23:58:50.0000] <annevk>
tobie: oh yes, you do

[23:59:05.0000] <annevk>
tobie: when referencing such a dfn

[23:59:20.0000] <tobie>
Mmm.

[23:59:24.0000] <tobie>
that sucks.

[23:59:37.0000] <annevk>
<a for=x>term</a>

[00:00:09.0000] <tobie>
darn.

[00:00:49.0000] <tobie>
OK, so I need to undo a bunch of changes.

[00:01:29.0000] <tobie>
annevk: glad you picked that up.

[00:04:03.0000] <MikeSmith>
tobie: you’ll be at TPAC?

[00:04:23.0000] <MikeSmith>
if so for one thing please add to https://www.w3.org/wiki/TPAC2016/WebPlatformTests if you can think of anything

[00:04:25.0000] <tobie>
MikeSmith: I'm debating this as we speak

[00:08:06.0000] <tobie>
debating going, that is.

[03:03:46.0000] <MikeSmith>
tobie: well I think it would be worth you while to go

[03:04:17.0000] <MikeSmith>
there will be more of us at TPAC this year than usual I think

[03:04:32.0000] <tobie>
MikeSmith: it's out of pocket + large extra babysitting costs so it has to be worth it.

[03:04:45.0000] <tobie>
hence debating

[03:04:48.0000] <MikeSmith>
oh

[03:05:12.0000] <tobie>
I'm not too far away, though, so plane tickets are sort of affordable.

[03:05:22.0000] <MikeSmith>
do we not have something scheduled for WebIDL?

[03:05:32.0000] <MikeSmith>
if we do not then we are missing an opportunity

[03:05:56.0000] <MikeSmith>
we should take time to talk about WebIDL status and plans when we are face to face

[03:06:17.0000] <MikeSmith>
and if we did that maybe you could get a budget for it I dunno

[03:06:27.0000] <MikeSmith>
rather than doing it all out of pocket

[03:06:46.0000] <tobie>
I'll ask domenic.

[03:06:53.0000] <tobie>
See what his thoughts are.

[03:06:57.0000] <MikeSmith>
ok

[03:07:52.0000] <tobie>
In Bikeshed, I'm confused as to what the best practice is when it comes to external terms referenced through the anchors pre block.

[03:09:05.0000] <tobie>
For example, if I reference a term from the ES spec, the ES spec doesn't appear in the normative references by itself.

[03:09:19.0000] <annevk>
Why does WPT still allow merge commits?

[03:09:26.0000] <annevk>
jgraham: Ms2ger: ^^

[03:09:27.0000] <tobie>
So what am I supposed to do?

[03:09:46.0000] <Ms2ger>
annevk, for multi-commit PRs

[03:09:59.0000] <annevk>
Ms2ger: can't those be handled manually?

[03:10:12.0000] <annevk>
Ms2ger: otherwise you still get the whole non-linear history

[03:10:17.0000] <Ms2ger>
Yeah

[03:10:24.0000] <annevk>
tobie: create a dependency section?

[03:10:45.0000] <annevk>
tobie: https://dom.spec.whatwg.org/#dependencies

[03:10:47.0000] <tobie>
annevk: that WFM

[03:11:41.0000] <annevk>
tobie: long term we should probably work something out with the ES people

[03:11:56.0000] <annevk>
tobie: see if they want to export similar metadata

[03:12:46.0000] <gsnedders>
annevk: why is non-linear history so bad?

[03:13:05.0000] <annevk>
gsnedders: makes it hard to see what happened

[03:13:46.0000] <tobie>
annevk: agreed re ES, but that doesn't seem to be an ES-specific issue. It's the case with all specs.

[03:14:05.0000] <tobie>
Seems BS could figure out the references from the URLs.

[03:14:10.0000] <annevk>
tobie: I mean, ideally we have no anchors block

[03:14:24.0000] <annevk>
tobie: it's just there until we get everyone on the "dfn contract"

[03:15:25.0000] <tobie>
annevk: Oh, true. I've mostly referenced things that weren't in Shepherd so far, so yeah.

[03:16:07.0000] <annevk>
tobie: jyasskin and mkwst  have been great about adding more specifications to it

[03:16:23.0000] <annevk>
tobie: e.g., HTML now exports a whole lot of things per the dfn contract, despite not using bikeshed

[03:18:19.0000] <MikeSmith>
gsnedders: I agree with annevk about non-linear history being harder to follow. Or at least much more noisy. Because in the worst case you end up with a branch merge commit in addition to every single substantive commit. Which is not a hypothetical worst case, because I have seen some repos/projects where that is the case.

[03:19:09.0000] <MikeSmith>
short of not allowing merge commits at all it would at least be nice to have a way to optionally suppress them in log views

[03:23:26.0000] <nox>
All hail non-linear history!

[03:24:47.0000] <annevk>
Never

[03:28:47.0000] <nox>
Ah ah.

[03:31:26.0000] <jgraham>
FWIW I am somewhat persuaded by nox's argument that allowing only ff merge commits is actually an improvement over always squashing

[03:31:42.0000] <jgraham>
Since it provides the equivalent of the gecko pushlog but in the vcs directly

[03:31:54.0000] <nox>
I said that?

[03:32:13.0000] <nox>
/me has quite a high information density then, because he didn't even notice.

[03:43:27.0000] <MikeSmith>
don’t knowing what gecko pushlog looks like

[03:59:57.0000] <jgraham>
MikeSmith: The pushlog is ancillary data that records which commits were pushed together. I think these days we might store it in a custom hg metadata field

[04:00:26.0000] <MikeSmith>
ah OK

[04:00:45.0000] <jgraham>
http://hg.mozilla.org/integration/mozilla-inbound/pushloghtml

[04:00:46.0000] <MikeSmith>
sometimes people push unrelated commits together

[04:00:55.0000] <MikeSmith>
well at least I know I do

[04:01:39.0000] <MikeSmith>
ah OK yeah that kind of view is generally helpful I agree

[04:03:10.0000] <MikeSmith>
at least as long as you don’t have someone who often pushes groups of commits that aren’t related

[04:03:42.0000] <MikeSmith>
or I guess especially as long as you don’t a lot people doing that regularly

[04:03:57.0000] <mkwst>
annevk: Apropos of nothing, wdyt about an `Origin` object alongside `URL`? It seems like it might be a good idea to give folks something other than a string to work with, especially for things like suborigins.

[04:04:30.0000] <annevk>
mkwst: the URL object is meant for manipulation

[04:04:37.0000] <annevk>
mkwst: I don't think we'd ever manipulate origins

[04:04:49.0000] <annevk>
mkwst: note that we still handle URLs as strings in APIs

[04:05:52.0000] <mkwst>
annevk: Handing URLs as strings periodically causes problems when people decide that regex is the right way to compare them. :)

[04:06:35.0000] <annevk>
mkwst: object wouldn't necessarily solve that though

[04:06:48.0000] <annevk>
jgraham: I'm not advocating squash-only fwiw

[04:06:54.0000] <annevk>
jgraham: just linear history

[04:07:32.0000] <tobie>
annevk: is there a list of those HTML dfns somewhere? I can't seem to remove from the abchors block the ones I'm referencing (or could that be a multi-page issue?).

[04:07:59.0000] <annevk>
tobie: it could be that the ones you are referencing are not yet exported properly

[04:08:14.0000] <annevk>
tobie: I'm not sure there's a good UI for Shepherd, I don't think there is

[04:08:17.0000] <mkwst>
tobie: Just look in bikeshed's `bikeshed/bikeshed/spec-data/anchors.data`, and add any you need.

[04:08:33.0000] <annevk>
tobie: you can run bikeshed against the spec in some way I believe, but I'm not sure ho

[04:08:34.0000] <annevk>
w

[04:08:41.0000] <mkwst>
tobie: Many of the more common terms are already nicely defined; adding more is pretty straightforward.

[04:08:44.0000] <tobie>
mkwst: oh, you're adding those by hand?

[04:09:16.0000] <annevk>
mkwst: FWIW, the whole suborigin proposal is still super vague to me

[04:09:23.0000] <mkwst>
tobie: I've been adding them to the HTML spec, then waiting a day for Shepard to catch up, and then removing the lines from the anchors block in specs I care about.

[04:09:38.0000] <annevk>
mkwst: what exactly it impacts, how it impacts UI, whether we change CORS / postMessage() / permissions / etc.

[04:09:55.0000] <tobie>
mkwst: that seems...

[04:09:58.0000] <annevk>
mkwst: I'm not sure that creating origin objects for it will help

[04:10:14.0000] <mkwst>
IMO, it doesn't impact UI. It does impact CORS, postMessage, etc.

[04:10:22.0000] <mkwst>
But Joel and Dev are the folks to ask.

[04:10:51.0000] <annevk>
mkwst: so permissions are still for the entire origin, not the suborigin?

[04:10:58.0000] <annevk>
mkwst: document.domain throws I guess?

[04:11:40.0000] <mkwst>
I'm a tiny bit worried that we're defining something that meets all of Google's and Dropbox's use cases, without enough feedback from folks outside those orgs. So feedback would be totally welcome...

[04:12:11.0000] <annevk>
mkwst: it's still not entirely clear to me that anyone is asking for adding complexity to an already complicated model

[04:12:28.0000] <annevk>
mkwst: apart from the companies that can obv afford it

[04:12:57.0000] <mkwst>
annevk: I don't think I'd recommend that folks build new apps that rely on suborigins. At least, that's not how I've been thinking about it.

[04:13:25.0000] <mkwst>
I've seen it more as a mechanism for folks with legacy to reduce the impact of that legacy on their origin.

[04:13:54.0000] <annevk>
mkwst: if something on your origin becomes big enough to be standalone you've got such legacy

[04:14:04.0000] <mkwst>
Yup.

[04:14:07.0000] <annevk>
mkwst: or folks might want to group lots of things to get less permission prompts

[04:14:22.0000] <mkwst>
Yup.

[04:14:35.0000] <annevk>
mkwst: not sure any of that is necessarily better for users

[04:15:49.0000] <annevk>
mkwst: if corp.example starts hosting all kinds of third-party things same-origin so they get location access etc. without any of the problems due to this new security boundary, users lose control

[04:16:32.0000] <mkwst>
If it's true that developers are going to put disparate apps onto a single origin for whatever reasons they think are reasonable, then suborigins seem like a way of minimizing the damage.

[04:16:34.0000] <annevk>
Anyway, adding Origin objects just for suborigins seems overly complicated

[04:16:56.0000] <mkwst>
But, the spec should say more than it does about permissions.

[04:16:59.0000] <annevk>
mkwst: I'm saying they would do it if given access to suborigins

[04:17:05.0000] <mkwst>
Like, anything at all would be nice. :)

[04:17:16.0000] <annevk>
mkwst: not the other way around

[04:17:32.0000] <annevk>
mkwst: facebook.com obv wouldn't host a game same-origin if that meant the game had access to the user's storage

[04:18:37.0000] <mkwst>
annevk: They're doing it in the status quo. Look at maps.bing.com and maps.google.com. One can speculate about reasons that both might redirect to the root origin.

[04:18:52.0000] <annevk>
That is, separating the security boundary from the UI security boundary can end up hurting users

[04:19:23.0000] <annevk>
mkwst: no need to speculate, but those are first-party

[04:20:27.0000] <mkwst>
Is first-party not what you're concerned about?

[04:21:17.0000] <annevk>
mkwst: I expect first-party to already share all the things

[04:22:15.0000] <mkwst>
annevk: the primary goal (for Google) of suborigins is to ensure the opposite of that.

[04:22:34.0000] <mkwst>
that is, pieces of the first-party should be treated as third-party to each other.

[04:22:43.0000] <annevk>
mkwst: the concern is e.g. me granting something to social.example and then visiting social.example/thirdpartygame

[04:22:54.0000] <annevk>
mkwst: well then it would affect UI

[04:23:04.0000] <annevk>
mkwst: which is impossible afaict

[04:23:55.0000] <mkwst>
Hrm. If we changed the UI, I think we'd be giving the user a false impression of how deep the separation actually is.

[04:24:30.0000] <annevk>
If we changed UI, we'd make it way too hard for users anyway

[04:24:36.0000] <annevk>
Origin is complicated enough

[04:24:50.0000] <mkwst>
It seems reasonable to tell the user that A and A` are the same thing, even if we split them up internally.

[04:24:53.0000] <annevk>
We need to get that down to just domain, with HTTPS efforts

[04:25:47.0000] <annevk>
mkwst: the problem is that it enables sites to host third-party code easily and the user doesn't really realize what they're granting to who anymore

[04:26:16.0000] <mkwst>
Anyway, long discussion short: I'm happy to volunteer Joel to answer all your questions about suborigins. :)

[04:26:40.0000] <mkwst>
I hope it turns out to be useful. I think it can be.

[07:48:58.0000] <MikeSmith>
http://stackoverflow.com/questions/39331408/is-there-a-way-to-use-shadow-dom-with-strict-content-security-policy

[08:12:25.0000] <MikeSmith>
http://stackoverflow.com/questions/39262132/in-content-security-policy-is-there-a-way-to-match-self-any-port

[08:26:00.0000] <mounir>
smaug____: you pinged me when I was away -- what can I do for you?

[08:26:39.0000] <smaug____>
mounir: it was about chromecast stuff

[08:26:57.0000] <smaug____>
mounir: which is apparently now integrated into Chrome, right?

[08:27:15.0000] <smaug____>
are you familiar with that stuff?

[08:27:31.0000] <smaug____>
(I thought you were doing some Presentation API spec'ing)

[09:57:25.0000] <jyasskin>
tobie: reading the backlog: you can definitely get non-shepherd things to show up in the bibliography. If you didn't already figure it out, check web bluetooth.

[09:58:49.0000] <tobie>
jyasskin: oh, I can manually add them. I was hoping to have that automatically.

[10:01:32.0000] <tobie>
Now I feel like it's a weird mix. Customs defs don't show up in the term index or in the biblio. Shepherd ones do.

[10:02:08.0000] <jyasskin>
You do have to add non-shepherd things to anchors, but if you set their spec right, it should automatically show up in the references.

[10:03:19.0000] <tobie>
Oh! Using "spec: "?

[10:03:31.0000] <jyasskin>
Yep.

[10:03:46.0000] <tobie>
<3

[10:03:55.0000] <tobie>
ty

[10:03:59.0000] <jyasskin>
Np

[10:04:16.0000] <tobie>
Makes my day, actually.

[10:06:13.0000] <jyasskin>
And, did you figure out that uses of a term with multiple for's need to themselves specify the for?

[10:07:44.0000] <jyasskin>
Eventually you'll be able to use link-defaults for that, but there's a Bikeshed but about it.

[10:08:34.0000] <jyasskin>
I don't think you need a separate definition of the for value, but you probably will anyway.

[10:09:17.0000] <jyasskin>
I made some changes to HTML recently to get 'origin' to do this right.

[10:23:44.0000] <tobie>
Yes. Anne helped me out.

[14:54:45.0000] <gsnedders>
why do we recommend Windows users download OpenSSL over HTTP with no form of verification for wpt? :(

[15:04:28.0000] <jgraham>
Because their boxes are probably part of a botnet anyway?

[15:04:43.0000] <jgraham>
If you want to change it please do :)


2016-09-06
[20:28:35.0000] <jtcranmer>
win move 5

[21:39:48.0000] <mildlettuce>
whats whatwg?

[00:48:35.0000] <MikeSmith>
http://stackoverflow.com/questions/39343303/why-does-the-sharedworker-onconnect-event-have-a-ports-array

[00:58:30.0000] <annevk>
MikeSmith: posted a reply

[01:09:43.0000] <MikeSmith>
annevk: thanks

[01:45:38.0000] <annevk>
beverloo: if that notification image thing isn't merged mid next week ping me

[04:02:23.0000] <beverloo>
annevk, will do. I'll give it a review as well

[05:50:50.0000] <mounir>
smaug____: it seems that I missed your reply, I'm a bit familliar with chromecast, what do you want to know?

[05:58:26.0000] <smaug____>
mounir: so, Chrome is now shipping some API to it?

[05:58:37.0000] <smaug____>
is that Presentation API?

[05:58:46.0000] <mounir>
smaug____: correct

[05:59:00.0000] <mounir>
smaug____: we are also working on Remote Playback API

[05:59:12.0000] <mounir>
smaug____: Firefox OS is shipping Presentation API too

[05:59:36.0000] <smaug____>
mounir: so chromecast doesn't use .chrome.* APIs?

[05:59:53.0000] <smaug____>
(that is what I found when searching, but perhaps documentation hasn't been updated)

[06:00:08.0000] <mounir>
smaug____: if you use a recent version of Chrome, the Cast SDK will use the Presentation API indeed

[06:00:19.0000] <smaug____>
ok.

[06:00:36.0000] <smaug____>
mounir: is the protocol to chromecast opened?

[06:00:40.0000] <smaug____>
or is it still proprietary

[06:00:57.0000] <mounir>
still proprietary unfortunately :(

[06:01:29.0000] <smaug____>
mounir: any chance it will be opened? not very nice to add proprietary stuff to the web

[06:01:46.0000] <mounir>
smaug____: Presentation API isn't proprietary

[06:01:52.0000] <smaug____>
the protocol is

[06:02:06.0000] <mounir>
smaug____: the protocol isn't defined by the spec

[06:02:12.0000] <mounir>
there is some work that started on this

[06:02:27.0000] <mounir>
mfoltz had a presentation at the last second screen wg

[06:02:29.0000] <mounir>
let me find some links

[06:03:44.0000] <mounir>
smaug____: https://webscreens.github.io/cg-charter/

[06:03:45.0000] <smaug____>
(ok, rather disappointed that blink folks allow shipping proprietary stuff.)

[06:03:57.0000] <smaug____>
mounir: will Chrome still update its Presentation API

[06:04:08.0000] <smaug____>
since that API is still somewhat in flux I'd say

[06:04:11.0000] <mounir>
smaug____: the Second Screen CG will work on an open protocol

[06:04:25.0000] <mounir>
smaug____: the Presentation API is protocol agnostic

[06:04:41.0000] <smaug____>
I mean, I've been reviewing patches for that in Gecko and the spec tends to have some quite some bugs

[06:05:03.0000] <mounir>
smaug____: if you have bugs, file them because I believe the spec went to CRC

[06:05:04.0000] <mounir>
CR

[06:05:06.0000] <smaug____>
mounir: shipping API which requires backend, and when backed in proprietary makes the whole thing rather proprietary

[06:05:12.0000] <smaug____>
uh, CR

[06:05:19.0000] <smaug____>
ok, someone needs to review it

[06:05:35.0000] <mounir>
smaug____: the backend doesn't have to be proprietary

[06:05:50.0000] <smaug____>
sure. but that is what Chrome is shipping

[06:08:50.0000] <mounir>
smaug____: FWIW, on some platforms, one can implement the same thing as Chrome

[06:09:11.0000] <mounir>
smaug____: Chrome Android implementation is based on Android APIs and is entirely public

[06:09:19.0000] <mounir>
s/public/open source/

[06:10:02.0000] <mounir>
smaug____: on desktop, it's more complicated

[06:10:19.0000] <smaug____>
ahaa, so one could clone Android implementation to desktop. interesting

[06:10:31.0000] <smaug____>
maybe

[06:10:35.0000] <mounir>
smaug____: if you can clone the Android APIs :)

[06:11:06.0000] <mounir>
smaug____: I wouldn't be surprised that there are reverse engineered Cast SDK out there -- the SDK is in JS

[06:11:21.0000] <mounir>
I'm not a lawyer but it might not be legal

[06:11:59.0000] <smaug____>
mounir: I'm just wondering how other browsers can implement the same stuff what Chrome is now shipping to the web

[06:12:36.0000] <mounir>
smaug____: maybe we can discuss over email

[06:12:44.0000] <smaug____>
sure

[06:12:55.0000] <smaug____>
mounir: are you planning to come to tpac?

[06:13:00.0000] <mounir>
smaug____: mlamouri@ mfoltz@ and avayvod@ (all google.com)

[06:13:10.0000] <mounir>
smaug____: the three of us will be at TPAC

[06:13:15.0000] <mounir>
avayvod@ and I only the last two days

[06:13:30.0000] <smaug____>
I guess we can discuss there

[06:13:30.0000] <mounir>
the CG/WG are meeting at TPAC too

[06:14:25.0000] <mounir>
smaug____: it might help if you share your plans before TPAC as in we can see what we can do earlier rather than later

[06:15:56.0000] <smaug____>
I'll need to ask schien and others. I'm mostly worried about the overall health of the web

[06:17:44.0000] <mounir>
smaug____: this is something we care about too

[06:18:12.0000] <mounir>
smaug____: and I think we are doing progress: websites no longer have behaviour depending on a Chrome extension being installed which is a step in the right direction

[06:18:45.0000] <mounir>
and with 1UA mode, the Presentation API should be fully compatible

[06:18:54.0000] <mounir>
unfortunately, Chrome doesn't implement it yet but we are working on it

[06:19:32.0000] <smaug____>
well, it really needs backend protocol to be spec'ed

[06:19:46.0000] <mounir>
that's what the CG is doing

[06:20:28.0000] <smaug____>
sure. But why shipping proprietary backend. ok...we're not going to agree on this stuff :)

[06:22:04.0000] <mounir>
smaug____: it's not my decision

[10:21:11.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/39354408/safari-rejects-redirected-cors-request-due-to-browser-set-headers

[10:27:32.0000] <annevk>
replied

[10:29:14.0000] <MikeSmith>
danke

[10:59:35.0000] <TabAtkins>
tobie: Uh, what are you talking about re: <dfn> and `for`?

[11:00:23.0000] <TabAtkins>
tobie: It's stretching, but "void" fits the category of "interface", same as "long" and friends.

[11:03:52.0000] <tobie>
TabAtkins: I misunderstood how for was used. annevk explained it to me.

[11:04:10.0000] <TabAtkins>
I'm not certain they did? At least, I didn't understand anne's explanation.

[11:04:34.0000] <tobie>
Oh.

[11:04:35.0000] <TabAtkins>
It sounded like Anne had said that, to use <dfn for=foo>bar</dfn>, you need a <dfn>foo</dfn> somewhere. Which is def wrong.

[11:05:16.0000] <TabAtkins>
At some point I want to start actually checking `for` values for some types, but right now it's literally justan opaque disambiguator string. Any meaning you assign is purely for human-readability, Bikeshed doesn't care.

[11:05:53.0000] <tobie>
I didn't understand it that way, but I can see how you can read it like that.

[11:07:04.0000] <tobie>
Yeah. I assumed you were checking for types already and disallowing custom strings.

[11:07:15.0000] <tobie>
Wrongly assumed, that is.

[11:07:41.0000] <TabAtkins>
I definitely wouldn't be doing so for "dfn" types anyway. I'm mainly aiming for the IDL and HTML types.

[11:16:52.0000] <Mek>
especially for method arguments it would be nice if there was some cleverness in parsing the for= value (also something must have changed somewhere for that at some point, as https://github.com/w3c/FileAPI/commit/0ca0d71f813ba98bf8f5a6a7becbc89cc60c0fde was needed to make a spec that used to build correctly build correctly again with current bikeshed)

[11:17:59.0000] <Mek>
but probably the before wasn't supposed to be working correctly if for= really is just an opaque string...

[11:24:30.0000] <TabAtkins>
Mek: Yes, there's something funky going on with argument references that I haven't spent the time to tease out yet. Got two open bugs on it, I think.  Being smarter about `for` values for IDL (that is, actually parsing them so you can be more flexible with how you type out things like a method reference) would be great, and I'll address eventually.

[11:37:36.0000] <tobie>
TabAtkins: from reading the docs (https://github.com/tabatkins/bikeshed/blob/master/docs/definitions-autolinks.md#specifying-what-a-definition-is-for): "Some types of definitions are defined relative to a higher construct, such as values for a particularly property, or attributes of a particular IDL interface. [...]," I imagined the for attribute was

[11:37:37.0000] <tobie>
reserved for the higher-construct relationships only (i.e. WebIDL, possibly some CSS stuff, etc.), but not for DFNs at all.

[11:38:10.0000] <TabAtkins>
Hm, could improve that. Some things *require* a `for` value, the rest just *allow* one.

[11:42:21.0000] <tobie>
+1

[13:44:39.0000] <jyasskin>
TabAtkins: Respec documents still need explicit 'id's in their source in order to be indexed by Shepherd, right?

[13:45:38.0000] <TabAtkins>
Yeah. It needs an ID in whatever HTML you actually load from the network.

[13:46:30.0000] <TabAtkins>
If you send source+ReSpec over the wire and compile it on-the-fly on user's computers (LIKE A MONSTER), then you'd better have the IDs (and all dfn-contract attributes) in the actual source.

[13:55:07.0000] <jyasskin>
Thanks.


2016-09-07
[05:18:25.0000] <zcorpan>
it seems webkit and blink skip <script> blocks when sniffing for encoding decl - <script>/*<meta charset="iso-8859-15">*/</script>

[05:25:00.0000] <zcorpan>
or at least the effect is that document.characterSet in that case is windows-1252

[05:26:45.0000] <zcorpan>
hmm i suppose i should write tests in https://github.com/html5lib/html5lib-tests/tree/master/encoding

[05:27:05.0000] <zcorpan>
are those in wpt also?

[05:28:13.0000] <gsnedders>
no, partly because they're a total mess :\

[05:28:46.0000] <gsnedders>
we really need to deal with having tests for what the pre-scan is expected to find for a given pre-scan length, and what the eventual encoding at the end of parsing is

[05:31:40.0000] <zcorpan>
gsnedders: so what should i do if i want to write new tests for https://github.com/whatwg/html/issues/1438 ?

[05:32:52.0000] <gsnedders>
a) cry. b) ??? c) write tests.

[05:33:09.0000] <zcorpan>
i could write straight wpt tests

[05:35:24.0000] <zcorpan>
though it seems attractive to write in html5lib-test format and have a script generate wpt files

[06:24:31.0000] <JakeA>
annevk: are you doing anything fetch specific at TPAC? If not, happy to slant the service worker meeting towards fetch issues that are vaguely SW related

[06:27:22.0000] <JakeA>
MikeSmith: payments meeting not on today?

[06:27:43.0000] <JakeA>
(I realise I missed the first half)

[06:54:30.0000] <annevk>
JakeA: was thinking we should have a session at some point

[06:54:50.0000] <annevk>
JakeA: nothing organized though, so sounds good

[08:56:25.0000] <marti_>
Hi!

[08:56:41.0000] <marti_>
I would like to work in this issues https://github.com/whatwg/html/issues/507

[08:56:53.0000] <marti_>
my github account marti1125

[09:42:43.0000] <annevk>
marti_: you should be able to work on it by creating a fork

[09:43:06.0000] <annevk>
marti_: and then creating a PR with your commits that implement the required changes

[09:43:49.0000] <annevk>
marti_: if you're not familiar with pull requests, I found this that will probably help you out: https://yangsu.github.io/pull-request-tutorial/

[09:44:22.0000] <annevk>
(also, hi!)

[09:46:41.0000] <marti_>
thanks :D

[09:47:33.0000] <marti_>
for  Remove top-level ForceType text/html is only remove this line https://github.com/whatwg/html/blob/master/.htaccess#L3

[09:47:43.0000] <marti_>
or remove all ForceType text/html

[09:52:14.0000] <Domenic>
marti_: just that line :

[09:52:18.0000] <Domenic>
:)

[09:54:17.0000] <marti_>
ok thanks!!

[09:55:02.0000] <marti_>
I will send a PR from my fork master to master

[09:55:10.0000] <marti_>
or I have to create a new branch=?

[09:55:39.0000] <Domenic>
marti_: either will work, but creating a new branch will be easier for you if you want to work on other things in the future. Then you can do one branch per thing.

[14:09:51.0000] <Domenic>
It's here!! https://heycam.github.io/webidl/ \o/ yay tobie

[14:10:06.0000] <tobie>
:)

[14:10:26.0000] <jyasskin>
\o/

[14:12:23.0000] <smaug>
mkwst: ping

[14:13:57.0000] <tobie>
Domenic: favorite glitch so far: Function (https://heycam.github.io/webidl/#Function) randomly referencing a Houdini spec.

[14:14:17.0000] <Domenic>
nice :P

[14:18:01.0000] <KiChjang>
/me thought "houdini spec" was a joke

[14:18:10.0000] <KiChjang>
apparently it's real

[14:32:36.0000] <tobie>
KiChjang: well, I certainly wish it would magically disappear from the references on the spec. :D

[14:35:46.0000] <jyasskin>
tobie: I'm sending the Houdini spec a change to avoid re-defining Function.

[14:36:18.0000] <tobie>
jyasskin: oh, is _that_ why it's happening?

[14:36:28.0000] <jyasskin>
Do I shave the yak that URL has <dfn for=url>url</dfn> instead of just <dfn>url</dfn>?

[14:40:01.0000] <tobie>
jyasskin: fwiw, filed an issue against Bikeshed here the other day https://github.com/tabatkins/bikeshed/issues/803

[14:40:19.0000] <tobie>
jyasskin: might want to reference in your PR so TabAtkins knows what's up.

[14:41:04.0000] <Domenic>
Still seems like argument names to Web IDL methods should never link to IDL terms defined elsewhere

[14:41:49.0000] <jyasskin>
tobie: It's not really a bug in Bikeshed: https://drafts.css-houdini.org/worklets/#dom-function-arguments has `<dfn class="nv idl-code" data-dfn-for="Function" data-dfn-type="argument" data-export="" id="dom-function-arguments">arguments</dfn>`, which says any other use of Function/arguments should link to there.

[14:42:38.0000] <jyasskin>
Houdini shouldn't be re-defining a name that's defined more authoritatively in WebIDL.

[14:42:47.0000] <tobie>
jyasskin: I agree with Domenic, though.

[14:43:22.0000] <jyasskin>
Is there never a case that you want to refer to a function's argument from another spec?

[14:43:35.0000] <jyasskin>
I agree it's probably rare.

[14:45:44.0000] <tobie>
I don't really have an opinion beyond wanting to get rid of a reference to worklets in WebIDL. :D

[14:52:06.0000] <Domenic>
I guess some specs do the thing where they have a table of arguments with a bunch of non-normative text about them :-/

[14:52:18.0000] <Domenic>
Probably they should never export it

[14:52:54.0000] <TabAtkins>
tobie: I'm answering that issue right now. ^_^

[14:53:33.0000] <TabAtkins>
Not a glitch - the Houdini spec defines a callback named Function already, so Bikeshed is assuming you want to link to it instead.

[14:54:04.0000] <TabAtkins>
I have code that ignores that for interfaces, and always defines (unless it's partial), but I'm generalizing it to all definition statements right now.

[14:54:24.0000] <tobie>
TabAtkins: nice.

[14:56:03.0000] <TabAtkins>
And pushed.

[14:56:57.0000] <TabAtkins>
So now IDL blocks will always dfn; you only get a link if it's dfn'd elsewhere locally, or it's a `partial` construct

[14:57:32.0000] <tobie>
Nice.

[14:59:01.0000] <tobie>
TabAtkins: I must say filing issues against Bikeshed and seeing them fixed at such a pace is a pretty gratifying experience.

[14:59:15.0000] <TabAtkins>
Eventually you'll hit one that I let sit for a while.

[14:59:28.0000] <TabAtkins>
Thus why I have 70 open issues in the repo. ^_^

[14:59:43.0000] <TabAtkins>
But I do like to get things fixed asap when I can.


2016-09-08
[22:46:19.0000] <MikeSmith>
JakeA: I don’t attend the payment-apps meeting normally, so not sure if they were meeting this week or not

[23:35:03.0000] <annevk>
tobie: oooh you did it

[23:35:06.0000] <annevk>
tobie: congrats!

[23:35:16.0000] <annevk>
tobie: and thanks for fast-forwarding the commits rather than merge commits

[23:37:23.0000] <tobie>
annevk: yeah, didn't want to leave all other bikeshed users blocked until we shipped for too long.

[23:38:16.0000] <annevk>
tobie: seems the last fixup commit isn't making use of bikeshed functionality (<a lt>) but I guess in general things are okay

[23:39:24.0000] <tobie>
Oh, I have to look at that. Where is this?

[23:41:43.0000] <annevk>
tobie: last commit: https://github.com/heycam/webidl/commits

[23:43:19.0000] <tobie>
Oh. I hadn't seen it.

[23:43:52.0000] <tobie>
I guess folks need to be schooled on the bikeshed way, now.

[23:44:33.0000] <annevk>
tobie: seems https://github.com/heycam/webidl/issues/161 also wasn't closed as a result of fixing that

[23:44:42.0000] <annevk>
Yeah

[23:45:36.0000] <tobie>
Mmm. I'm much more worried about a chunk of an algorithm disappearing, tbh.

[23:48:52.0000] <annevk>
tobie: well, yes

[23:49:44.0000] <tobie>
I *had* to cut some corners, but this is really surprising.

[23:54:26.0000] <tobie>
annevk: oh, it's this: https://github.com/heycam/webidl/blob/06bae58f/index.xml#L7667

[23:54:55.0000] <tobie>
I can see how that botched some of my regexes.

[00:01:27.0000] <tobie>
OK, so I found three others places where the same thing happened. :(

[00:02:02.0000] <tobie>
Will fix. Strongly hopping it's not the beginning of an avalanche or similar issues. :(

[00:04:22.0000] <annevk>
tobie: I thought you used XSLT to generate bikeshed?

[00:04:29.0000] <annevk>
tobie: XSLT has regular expressions?

[00:06:19.0000] <tobie>
annevk: I did.

[00:07:52.0000] <tobie>
annevk: but had to add a line by line post-processor to cleanup the indentation levels and markdownify the  source, as XSLT's output can't really deal with this

[00:08:30.0000] <tobie>
I'm not sure which of the two screwed those up.

[01:04:55.0000] <tobie>
annevk: alright fixed those: https://github.com/heycam/webidl/pull/163

[01:05:20.0000] <tobie>
annevk: seems like a relatively well contained issue.

[01:05:38.0000] <annevk>
Ah good

[01:06:22.0000] <tobie>
annevk: combination of nested references and < > and related entities

[01:07:28.0000] <tobie>
not sure where in the pipeline this broke and not sure it's really worth investigating either.

[01:08:08.0000] <tobie>
heycam: what's your merging process for WebIDL?

[01:08:47.0000] <tobie>
heycam: do you self-merge small fixes like these or get a second pair of eyes on them before you do?

[01:14:36.0000] <heycam>
tobie: hi! I tend to commit my own changes without going through PRs unless I specifically want review from someone

[01:15:46.0000] <tobie>
heycam: oh, nice. Less process. \o/

[01:16:00.0000] <heycam>
heh yes

[01:16:17.0000] <heycam>
use your discretion I suppose

[01:16:26.0000] <heycam>
I think bz errs on the side of getting reviews

[01:23:18.0000] <tobie>
heycam: Well, as long as everyone feels confortable telling someone else they screwed up and need to revert, I'm all for favouring speed of protocol.

[01:25:35.0000] <tobie>
speed OVER protocol.

[01:27:08.0000] <tobie>
heycam: will you be at TPAC?

[01:27:24.0000] <heycam>
tobie: no, won't be there

[01:27:32.0000] <tobie>
:(

[01:27:43.0000] <heycam>
:(

[01:28:11.0000] <annevk>
heycam: not cool

[01:29:32.0000] <Ms2ger>
/me is not cool either

[01:30:39.0000] <annevk>
Ms2ger: dude

[01:31:13.0000] <annevk>
Well if it's going to be like this we might have to setup something else at some point

[01:31:38.0000] <MikeSmith>
yes

[01:31:48.0000] <MikeSmith>
we really should anyway

[01:32:13.0000] <Ms2ger>
Do one in Brussels and I'll consider it :)

[01:33:31.0000] <MikeSmith>
/me had forgotten that Ms2ger’s parole requirements prevent him for being able to travel outside Brussels

[01:47:21.0000] <tobie>
MikeSmith: I'm going, btw. :)

[01:56:54.0000] <MikeSmith>
tobie: excellent

[01:57:27.0000] <MikeSmith>
tobie: so given that we should definitely schedule something concrete for WebIDL discussion

[01:57:50.0000] <tobie>
Yeah, I pinged Yves.

[01:57:54.0000] <MikeSmith>
OK

[01:58:17.0000] <tobie>
I have no idea how the super group is organized these days

[01:58:24.0000] <MikeSmith>
we can get a Tech Plenary breakout session of course, but that’d be just one hour

[01:58:31.0000] <MikeSmith>
oh

[01:59:16.0000] <MikeSmith>
yeah I forgot this was in the Web Platform WG

[02:00:34.0000] <mkwst>
Or, you know, folks could just go get coffee somewhere together.

[02:00:38.0000] <tobie>
MikeSmith: I was thinking of:

[02:00:39.0000] <tobie>
1) short WPWG session just to update people on current status and plans

[02:00:39.0000] <tobie>
2) breakout session to gather requirements for future work

[02:00:39.0000] <tobie>
3) eventually ad-hoc meeting to get actual work done

[02:01:09.0000] <MikeSmith>
sounds good

[02:01:16.0000] <tobie>
mkwst: yeah, see 3) above (so we get a room)

[02:02:23.0000] <MikeSmith>
mkwst: yeah agree and sometimes a lot more gets done in informal get-togethers between formal meetings

[02:02:33.0000] <tobie>
"sometimes"

[02:02:39.0000] <MikeSmith>
heh

[02:02:43.0000] <MikeSmith>
I was being nice :)

[02:03:09.0000] <MikeSmith>
tobie: but what do you mean “we get a room”?

[02:03:39.0000] <tobie>
MikeSmith: last time I looked, we could claim slots in rooms for ad-hoc meetings

[02:03:49.0000] <MikeSmith>
oh

[02:03:56.0000] <tobie>
MikeSmith: think we did that for the sensor work last time

[02:04:00.0000] <MikeSmith>
OK

[02:04:01.0000] <tobie>
booked half a day or so

[02:05:30.0000] <tobie>
man the distinction between the bindings and the WebIDL stuff in there is just hard to grok in some places.

[02:05:50.0000] <MikeSmith>
that is why we should erase that distinction as much as we can

[02:06:03.0000] <tobie>
How's an ES throw different from a WebIDL one?

[02:06:21.0000] <tobie>
/me cries

[02:07:11.0000] <Ms2ger>
tobie, what do you mean?

[02:08:14.0000] <tobie>
Ms2ger: http://heycam.github.io/webidl/#dfn-throw vs http://heycam.github.io/webidl/#ecmascript-throw

[02:10:27.0000] <Ms2ger>
I think it would be fine to redirect ecmascript-throw to dfn-throw

[02:17:43.0000] <annevk>
tobie: the difference is that IDL still tries to be language-agnostic

[02:18:05.0000] <Ms2ger>
Kinda sorta

[02:18:07.0000] <tobie>
"The meaning of each simple exception matches its corresponding Error object in the ECMAScript specification."

[02:18:10.0000] <annevk>
tobie: I think we should give up on that to some extent

[02:18:52.0000] <annevk>
We might actually short circuit some of IDL with wasm, but that should just become part of the IDL spec

[02:19:07.0000] <annevk>
(E.g., a bunch of type coercion would no longer be needed.)

[02:19:24.0000] <tobie>
Oh interesting

[02:20:44.0000] <tobie>
Yeah, the extra level of indirection added by this near 1:1 mirroring makes things really complicated

[02:22:28.0000] <tobie>
You have a {{SyntaxError}} IDL interface which has a SyntaxError name and maps the ES SyntaxError object.

[02:22:46.0000] <tobie>
I'm not sure we're getting anything out of that beyond technical purity.

[02:23:02.0000] <annevk>
I think it does make sense to have an IDL entry-point for all these things

[02:23:34.0000] <annevk>
So if I define an IDL-algorithm, I use IDL-throw in it and IDL defines the implementation of that

[02:24:18.0000] <annevk>
Basically IDL should define the language all spec-algorithms are written in

[02:24:29.0000] <annevk>
How to do loops, comparisons, etc.

[02:24:48.0000] <annevk>
A major outstanding issue is promise integration

[02:25:00.0000] <annevk>
There's the promises guide, but that really needs to be part of IDL

[02:25:35.0000] <annevk>
And once integrated IDL needs to really explain things in terms of ECMAScript, not hand-wavy language

[02:27:22.0000] <tobie>
How much of that mean pulling in thing s described in HTML?

[02:27:56.0000] <tobie>
(e.g. the infamous "in parallel" dfn everybody references)

[02:30:39.0000] <annevk>
tobie: that might need to happen at some point

[02:30:47.0000] <annevk>
tobie: baby steps

[02:31:32.0000] <annevk>
tobie: but yeah, "in parallel" is a very special thing only available to IDL-algorithms and not really to ECMAScript

[02:32:19.0000] <tobie>
annevk: oh yeah. Just trying to build a mental model of how the different pieces fit together so I can make educated decisions down the line.

[02:33:11.0000] <annevk>
tobie: but IDL / HTML / DOM are intertwined

[02:33:23.0000] <annevk>
tobie: Hixie would argue they should all be the same thing

[02:34:02.0000] <tobie>
annevk: yeah, I'm just trying to figure out what the nodes are.

[02:34:29.0000] <annevk>
tobie: points of overlap?

[02:35:09.0000] <tobie>
yeah, I'm not exactly sure how to call these things yet. :)

[02:35:39.0000] <annevk>
Let's not reuse node

[02:35:52.0000] <annevk>
😛

[02:36:15.0000] <tobie>
heh

[02:36:41.0000] <tobie>
/me was thinking graph-theory node, fwiw.

[02:37:26.0000] <annevk>
Fair

[02:37:43.0000] <annevk>
tobie: next step is sorting through the bugs, right?

[02:39:27.0000] <JakeA>
annevk: if I do a window.open(url), does this create a fetch client for about:blank, then create another for the navigation to url?

[02:39:41.0000] <JakeA>
Or does the about:blank page use the client of the opener?

[02:40:11.0000] <tobie>
annevk: There's a bunch of things

[02:41:03.0000] <tobie>
annevk: removing the inline issues is one.

[02:41:20.0000] <annevk>
JakeA: opener I think, but not defined yet

[02:41:26.0000] <tobie>
annevk: triaging bugzilla is the second

[02:41:52.0000] <annevk>
JakeA: and yeah, new one when you navigate

[02:41:58.0000] <JakeA>
annevk: ta. This matters for the reserved/target clientid stuff

[02:42:05.0000] <annevk>
JakeA: <object> and <embed> are especially hairy

[02:42:11.0000] <tobie>
annevk: there are still parts of the spec that need fixing (bugs that were there before the conversion but whic are now a lot easier to spot)

[02:42:15.0000] <JakeA>
yeah, that's why we skip them with SW :D

[02:42:23.0000] <JakeA>
appcache does crazy dancing

[02:42:47.0000] <tobie>
annevk: lots of low hanging fruits also (small issues, etc.)

[02:43:02.0000] <annevk>
JakeA: for <object data> and <embed src> you use the fetch group of the element, but then when you pass them to navigate (the response) they create a new fetch group and their own fetches get moved

[02:43:25.0000] <annevk>
JakeA: there's notes in an issue somewhere, I haven't really defined it yet

[02:43:54.0000] <annevk>
JakeA: we either need to drop AppCache fast or just embrace that it is there and actually make it a functional part of the platform

[02:44:07.0000] <annevk>
JakeA: keeping it in its current state is not helping anyone

[02:44:16.0000] <JakeA>
annevk: can this be simplified if the object has type text/html and typemustmatch? We *know* that's iframe-like at that point

[02:44:49.0000] <annevk>
JakeA: that wouldn't really simplify the existing code

[02:44:57.0000] <annevk>
JakeA: that would just add a branch, with more chance for bugs

[02:46:06.0000] <JakeA>
annevk: hm, I was hoping we could use typemustmatch to send <object> requests through SW

[02:46:12.0000] <JakeA>
but I'm not that bothered

[02:46:24.0000] <JakeA>
the only worthwhile thing it's used for is SVG

[02:48:03.0000] <annevk>
JakeA: oh we could add it, just saying it's not a simplification

[02:48:15.0000] <JakeA>
fair

[02:48:35.0000] <annevk>
JakeA: and if we do add it, I would appreciate if whoever wants to add it first cleans up how the elements are defined today, since they're known to be wrong

[02:48:40.0000] <annevk>
JakeA: it's a rather messy area

[02:49:00.0000] <annevk>
tobie: sounds really good to get those cleaned up first indeed

[02:49:17.0000] <annevk>
tobie: will also help with getting yourself familiarized

[02:49:29.0000] <tobie>
annevk: yeah, I'm getting there

[02:49:37.0000] <tobie>
annevk: albeit slowly

[02:57:46.0000] <tobie>
What's the difference between http://heycam.github.io/webidl/#dfn-dictionary and http://heycam.github.io/webidl/#idl-dictionary?

[02:59:33.0000] <tobie>
I'm also not sure I understand what this means: "There is no way to represent a constant dictionary value in IDL."

[03:04:29.0000] <tobie>
Oh, never mind the former. I now get it.

[03:19:13.0000] <annevk>
tobie: IDL has support for constants

[03:19:23.0000] <annevk>
tobie: I think that's just saying a dictionary value is not a valid value for it

[03:19:38.0000] <tobie>
really?

[03:20:06.0000] <tobie>
annevk: that seems super redundant given acceptable values for consts are whitelisted somewhere else

[03:20:40.0000] <tobie>
annevk: the sequence type is defined as an interface in the type list (and now my head hurts)

[03:21:50.0000] <annevk>
tobie: it's not a normative statement, so yeah, it's redundant

[03:22:11.0000] <annevk>
(might still help someone though, or confuse)

[03:23:02.0000] <tobie>
annevk: I guess whether it does one or the other depends on your programming background

[03:29:26.0000] <annevk>
tobie: not sure how a sequence is an interface

[03:29:48.0000] <tobie>
annevk: in the BS sense.

[03:32:46.0000] <tobie>
annevk: for BS, long long is an interface

[03:33:23.0000] <annevk>
tobie: oh, you mean bikeshed

[03:33:46.0000] <annevk>
Guess it works both ways

[03:34:46.0000] <tobie>
annevk: well, it's currently inconsistant across types which means that you must write [=null type=] but {{sequence|sequence type}}

[03:37:39.0000] <tobie>
annevk: to make matters worse, the promise type is defined as <dfn interface>Promise</dfn>

[03:38:04.0000] <tobie>
s/worse/more confusing to me/

[03:38:49.0000] <annevk>
tobie: you can probably fix some of that up with TabAtkins

[03:39:00.0000] <annevk>
tobie: once you have more of an idea of what you want

[03:39:23.0000] <tobie>
yeah--hoping to talk about these at TPAC.

[03:39:41.0000] <tobie>
annevk: too confused in my head to have sensible asks for the time being.

[03:40:25.0000] <tobie>
annevk: concerned about breaking things elsewhere (e.g. in DOM) if I fix these here.

[03:41:12.0000] <tobie>
annevk: e.g. change type of Promise from interface to dfn to match other type defs

[03:42:32.0000] <annevk>
tobie: right, those kind of changes need to happen through a PR and with some discussion

[03:42:54.0000] <annevk>
tobie: but we can do them and should I think, where they make sense

[03:43:04.0000] <annevk>
tobie: future is longer than the past

[03:43:16.0000] <tobie>
(hopefully)

[03:43:31.0000] <annevk>
tobie: but probably better to first have a holistic view of everything that needs to change and then figure out a game plan

[03:43:42.0000] <annevk>
tobie: if that's false we might as well stop

[03:44:26.0000] <tobie>
annevk: should we wait for November 8?

[03:44:55.0000] <tobie>
;)

[03:48:41.0000] <annevk>
tobie: what's then?

[03:52:33.0000] <tobie>
annevk: well, we *might* be a lot closer to nuclear armageddon if small hands gets elected, no?

[03:52:55.0000] <annevk>
tobie: oh, good to know the date

[03:53:05.0000] <annevk>
tobie: I kinda stopped paying attention

[03:53:31.0000] <tobie>
annevk: I hope those who get a say haven't

[05:08:09.0000] <smaug>
hmm, WICG has become a place to dump random ideas which may then get implemented without much feedback ?

[05:09:09.0000] <MikeSmith>
smaug: I’m guessing you have something specific in mind that’s happened

[05:09:30.0000] <smaug>
nah, just the generic use of WICG

[05:10:03.0000] <annevk>
smaug: yeah, seems like it

[05:10:14.0000] <MikeSmith>
as far as the implementation part, seems like not so much from WICG has been implemented yet

[05:10:49.0000] <annevk>
Step up from impl random ideas

[05:11:56.0000] <MikeSmith>
yeah it’s not like any browser project would ever go ahead an unilaterally implement something without getting any feedback from other implementors first

[05:12:16.0000] <MikeSmith>
that would be crazy if we ever had any browser projects that did thank

[05:12:26.0000] <MikeSmith>
so thank god that never happens at least

[05:18:49.0000] <Ms2ger>
/me passes MikeSmith the booze

[06:04:35.0000] <nox>
Ms2ger: I don't think I've ever seen you drink any alcoholic beverage.

[06:05:01.0000] <Ms2ger>
It would surprise me if you had

[07:01:03.0000] <JakeA>
annevk: how do you feel about serviceWorkerRegistration.fetch being a place to get/set fetch options? Or would you rather it was fetchManager?

[07:05:07.0000] <annevk>
JakeA: shorter is better

[07:05:17.0000] <JakeA>
ta

[07:05:34.0000] <annevk>
JakeA: but not part of register dict?

[07:07:17.0000] <JakeA>
annevk: I'm in two minds about it. Facebook wanted a header that they could set at any point, but it feels like cookies by another name, and it complicates the implementation

[07:07:43.0000] <JakeA>
annevk: I'm moving towards putting it on the install or activate event

[07:08:08.0000] <JakeA>
oh I should say this is for the navigation preload thing

[07:08:36.0000] <JakeA>
It kinda feels like fetch options should sit with the thing handling the fetching

[07:10:27.0000] <annevk>
As long as we have something that can be easily reused I suppose it's ok

[07:11:02.0000] <JakeA>
install/activateEvent is where I'd have static routes, if they were a thing

[07:14:16.0000] <annevk>
You want install for static routes I guess

[07:14:25.0000] <annevk>
Little weird otherwise

[07:19:38.0000] <JakeA>
annevk: just seen foreign fetch on install too, so I guess that's where fetch options are going. We should probably review foreign fetch at tpac, I don't think it's had a lot of eyes on it

[07:21:03.0000] <annevk>
Yeah, makes sense

[07:21:25.0000] <annevk>
Not sure how much changed since we first designed it

[07:22:00.0000] <annevk>
But yeah, we should figure out a pattern for these things and make sure folks adopt them

[08:06:28.0000] <wanderview>
annevk: JakeA: why doesn't an about:blank frame get its own fetch client?  I understand it inherits the origin from the parent, but inheriting the client itself seems really weird to me

[08:11:02.0000] <JakeA>
I don't mind which way we go with this

[08:11:08.0000] <JakeA>
Can about:blank have its own CSP?

[08:55:58.0000] <TabAtkins>
smaug: The point of WICG is to gather small groups of relevant people from the various browsers from each project, and dev the idea in a more silo'd repo.  The hope is that this avoids (a) the noise of webapps "everything happens in this mailing list", and more importantly, (b) the pathology of long-lived groups where non-functioning trolls gather over time

[08:55:58.0000] <TabAtkins>
and reduce the usefulness of the group.

[09:13:02.0000] <astearns>
deliberately impatient misreading: "The point of WICG is to … reduce the usefulness of the group"

[09:23:22.0000] <TabAtkins>
+1

[09:23:51.0000] <smaug>
TabAtkins: well, my tiny experience with WICG stuff has been that things have been designed behind closed doors, and doors have been opened around the time some vendors would like to implement and ship APIs

[09:24:35.0000] <TabAtkins>
smaug: Some of that's because, well, we really just started on WICG (and really pushing people to dev things there), and so things are entering the pipeline at various stages.

[09:25:09.0000] <TabAtkins>
If Google people are trying to use WICG to rubberstamp an already-designed API, please yell about it to slightlyoff.

[09:26:45.0000] <TabAtkins>
(We're also gradually trying to get more people into standards dev internally, so there's a lot more culture friction about it; sorry about that.)

[09:28:11.0000] <annevk>
rbyers++ and a beer for reply to "[blink-dev] Intent to ship: Media tracks"

[09:29:42.0000] <annevk>
(or port, offer only valid while at TPAC)

[09:30:42.0000] <TabAtkins>
ah yes, that's great

[09:33:21.0000] <smaug>
TabAtkins: WICG seems to be mostly Google trying to push new APIs. Which is totally fine, but it isn't clear how to participate with discussions when new WICG drafts seem to pop up at random time. Or, this is very possible, I'm just not familiar at all with the working model WICG has.

[09:34:35.0000] <TabAtkins>
If you want to track new things popping up, that's just a matter of following the Discourse and muting everything that's not browser engineers. That's where new repos get proposed.

[09:38:03.0000] <smaug>
/me doesn't know what is Discource

[09:38:20.0000] <TabAtkins>
This explains some of your problem, then. ^_^

[09:38:28.0000] <TabAtkins>
https://discourse.wicg.io/

[09:38:47.0000] <smaug>
why is one group using that when others use email + irc?

[09:39:05.0000] <smaug>
is it possible to get emails from discourse?

[09:39:46.0000] <TabAtkins>
I'm not sure what you mean by the first question. Yes to the second question; that's how I watch it.

[09:40:48.0000] <smaug>
TabAtkins: whatwg and webapp (or whatever it is called these days), and HTML and audio and other WGs have traditionally used email for communication

[09:40:54.0000] <smaug>
like w3c email lists

[09:41:02.0000] <smaug>
or whatwg mailing list

[09:41:11.0000] <smaug>
why is wicg doing something else

[09:41:47.0000] <TabAtkins>
I wasn't part of the decision, but I think it was meant to encourage webdev communication - normal people seem to find forums much less intimidating than mailling lists.

[09:45:01.0000] <annevk>
WHATWG mostly uses GitHub and IRC for discourse

[09:45:11.0000] <annevk>
We tried forums, but they failed

[09:46:19.0000] <JakeA>
I think the mailing lists are a pretty poor experience. Github works really well.

[09:47:04.0000] <JakeA>
In my experience, mailing list discussions get filibustered by a few

[09:47:26.0000] <JakeA>
Happens occasionally on github, but far less frequently

[09:51:14.0000] <smaug>
I've started to cope with github, issue tracking and discussions.

[09:51:37.0000] <annevk>
JakeA: yeah, the topic isolation of GitHub helps enormously

[09:51:52.0000] <smaug>
how github still hides useful information is rather annoying. But I think that happens only in PRs or something, not in issues.

[09:51:57.0000] <annevk>
JakeA: and only following what interests you

[09:52:59.0000] <annevk>
smaug: yeah, that's how PRs handle commits that change lines someone previously commented on

[09:56:53.0000] <Domenic>
Less of a problem now with squashing meaning that you no longer need to force-push

[09:57:22.0000] <rbyers>
annevk: Thanks!  I'm definitely trying to ratchet up interop discipline.  You all can help by encouraging use of web-platform-test along with normative spec changes.

[10:00:24.0000] <annevk>
Domenic: the problem also happens with follow up commits

[10:00:31.0000] <annevk>
Domenic: it's that the comments get collapsed

[10:00:40.0000] <annevk>
Domenic: that's not obvious to everyone

[10:00:48.0000] <Domenic>
annevk: ah right, yeah if you comment on the /files tab instead of on the specific commit that's true

[10:01:50.0000] <annevk>
Ah, I didn't know that bit, maybe I should try to change my review habbits, although then I might end up commenting on outdated stuff

[10:03:16.0000] <Domenic>
Yeah not sure what the right way to do that is, /files is so convenient.

[10:03:48.0000] <majidvp>
smaug: My small experience with WICG has been a mixed bag. Most useful feedback has mainly been solicited via reaching out to relevant folks via email and not by publishing to WICG discourse.

[10:05:04.0000] <smaug>
majidvp: right. That hints about something I've been thinking... many relevant people don't follow WICG discourse at all

[10:05:11.0000] <majidvp>
smaug: I have WICG setup so I receive an email for every new thread but I feel most people don't so most new proposals fall off radar.

[10:05:34.0000] <rbyers>
smaug: Yeah, and some of us try but fail to keep up with the threads also.

[10:05:34.0000] <majidvp>
smaug: Yep! agreed.

[10:05:36.0000] <annevk>
I only ever look at WICG stuff when asked

[10:06:06.0000] <annevk>
Too much of a grab bag

[10:06:17.0000] <rbyers>
IMHO the important bit is that feedback is solicited from relevant folks at other browser vendors before a new API is shipped in the first engine.

[10:06:34.0000] <rbyers>
This is why soliciting feedback is part of the blink launch process.

[10:06:53.0000] <annevk>
Yeah, I'm surprised Mozilla is not copying more of that

[10:07:13.0000] <rbyers>
If people are doing it right, they're getting feedback early in the spec process, well before "intent to ship" and there's not much value in trying to watch for new specs appearing (from google at least) on WICG.

[10:07:20.0000] <annevk>
"Intent to implement/ship" is really great

[10:08:02.0000] <rbyers>
Thanks.  It's a tough tradeoff (eg. we also say we don't block waiting for feedback when there hasn't been any meaningful response) but we're trying to be pretty careful about it.

[10:08:26.0000] <rbyers>
And just eat the compat pain when we need to correct our mistakes (eg. ShadowDOM v1 vs. v0)

[10:09:32.0000] <rbyers>
smaug: Speaking of all this, you said https://github.com/NavidZ/auxclick seemed reasonable to you, right?  If you say that at https://discourse.wicg.io/t/new-event-for-non-primary-button-click/1527/7 then we can move the repo to WICG (start getting IP protection etc.)

[10:13:24.0000] <smaug>
rbyers: curious, why would it be added as WICG thing?

[10:13:30.0000] <smaug>
and why not to UIEvents ?

[10:13:46.0000] <rbyers>
"incubation first standards policy"

[10:13:55.0000] <rbyers>
i.e. it's too early to move it to UIEvents.

[10:14:02.0000] <rbyers>
Maybe when a 2nd implementation ships...

[10:14:25.0000] <rbyers>
But that's absolutely where it should end upt.

[10:15:01.0000] <rbyers>
WICG is intended as a staging ground to get details ironed out and multiple interoperable implementations, not the ultimate standards destination.

[10:16:29.0000] <smaug>
I'm having hard time to understand this model and what good it gives us. How is that better than WhatWG model?

[10:17:17.0000] <rbyers>
Only one big benefit: Microsoft will participate in it.

[10:17:36.0000] <smaug>
if things are first hidden in some WICG draft, they sure don't get as much feedback or reviewing than if the feature was discussed in the place such feature is normally handled

[10:17:49.0000] <smaug>
like, in this case, github issue would be ok place

[10:17:57.0000] <smaug>
w3c github

[10:18:03.0000] <rbyers>
Otherwise it aims to have all the upside of WHATWG with very little of the problems of the W3C.

[10:18:05.0000] <smaug>
so that MS can give feedback

[10:18:48.0000] <smaug>
I'm worried that people start to think that once something from WICG is moved to some other kind of spec, it somehow becomes more official, more "standard"

[10:19:33.0000] <smaug>
yet, given the current setup, WICG doesn't probably get enough feedback and real spec reviewing happens only once the feature is in some other spec

[10:20:38.0000] <rbyers>
Are you worried primarily here about spec quality or about interoperability risk (getting locked into APIs we'd like to change)?

[10:21:16.0000] <smaug>
both

[10:22:00.0000] <rbyers>
I think it's absolutely intentional that WICG specs start sort of rough (you don't need to be a full-time standards professional to write one) and the spec quality matures as it moves through the standards process along with implementations.

[10:22:52.0000] <smaug>
ok, then there should be some "DO NOT IMPLEMENT THIS" in WICG drafts

[10:23:13.0000] <smaug>
or at least "DO NOT SHIP IMPLEMENTATIONS BASED ON THIS API" :)

[10:26:33.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/39393909/how-do-i-handle-javascript-fetch-errors

[10:27:37.0000] <rbyers>
We're trying to be more incremental about shipping new features rather than blocking every new feature on some WG reaching 100% consensus on it.  I know that's controversial (you and I have talked about the tradeoffs before) and increases the risk of getting locked into things we regret.  But the alternative is not really that much better - we regret plenty

[10:27:38.0000] <rbyers>
of things that shipped based on a W3C REC spec.

[10:28:11.0000] <rbyers>
And worse, the web almost became irrelevant when it couldn't respond to the shift to mobile in any sort of reasonable timeframe.

[10:28:37.0000] <annevk>
rbyers: I don't see how you're preventing the bad stuff if you ship

[10:28:51.0000] <annevk>
rbyers: it's shipping that's the main issue, not where you spec stuff

[10:29:09.0000] <annevk>
rbyers: I totally agree with smaug that stuff that goes into UI Events should not be discussed elsewhere

[10:29:22.0000] <annevk>
rbyers: that's the same shit as with passive listeners, that didn't go that well

[10:30:02.0000] <rbyers>
There is no "preventing the bad stuff" in any world - there's just risk/benefit tradeoffs.

[10:30:07.0000] <annevk>
rbyers: and when shipping you don't want to look at the standard, as you already established on blink-dev

[10:30:33.0000] <annevk>
rbyers: you look at which browsers are planning on shipping, who was involved, what's the testing story, who reviewed, etc.

[10:30:47.0000] <rbyers>
Anyway this isn't my call - Alex Russel has basically dictated that all new blink features go through incubation of some sort.  See https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/PJ_E04kcFb8/ZXJXLJYYAAAJ

[10:32:03.0000] <annevk>
I'm not sure what incubation means

[10:32:04.0000] <rbyers>
Not sure what you mean "don't want to look at the standard".  Of course we want to look at it as one signal on the likely eventual interoperability.

[10:35:00.0000] <rbyers>
To me "incubation" means doing new feature development iteratively in collaboration with customers who are actually using the thing, and being agile in responding to their feedback and (when possible) making breaking changes.

[10:35:29.0000] <rbyers>
BTW I meant to say that having a UI Events issue for 'auxclick' is a good idea - I'm embarassed to find one doesn't exist yet.  Will file it now.

[10:36:36.0000] <annevk>
The first rule of monkey patching is to tell upstream it's happening

[10:38:17.0000] <slightlyoff>
for the purposes of Googlers, incubation means "do it at WICG or the ES stages process, or ping me directly and we'll figure something out"

[10:50:17.0000] <rbyers>
annevk: Oh we definitely discussed it with the UI Events editor (looking for a public thread, but you can see garykac was cc'd in the initial discourse thread: https://discourse.wicg.io/t/new-event-for-non-primary-button-click/1527/7).

[10:50:31.0000] <rbyers>
This isn't monkey patching though, it's an entirely stand-alone feature.

[10:50:59.0000] <rbyers>
Sure it makes logical sense to group into UI Events but it doesn't change the existing UI Events spec in any way.

[10:51:14.0000] <annevk>
rbyers: the current UI spec isn't really complete though

[10:51:35.0000] <annevk>
rbyers: there's some kind of processing model where this is a branch that's not yet defined

[10:52:00.0000] <annevk>
UI Events is still in a rather sad state

[10:54:07.0000] <rbyers>
Yeah it could definitely be better.  I think opinions differ on the urgency of defining a full processing model.  Personally I'd much rather invest resources in having automated tests which watch the event stream generated for various types of input (that's at least where my team is currently investing for UI Events)

[11:36:55.0000] <Domenic>
Hmm I thought "Note:" shorthand in Bikeshed omitted the leading "Note:" in the output

[11:39:11.0000] <TabAtkins>
Domenic: What do you mean? It should be omitting it in text; it instead marks it up as a marker for the block.

[11:39:51.0000] <Domenic>
TabAtkins: it isn't omitting it; see https://heycam.github.io/webidl/#dfn-partial-interface

[11:39:53.0000] <TabAtkins>
Wait, hmmmm

[11:40:03.0000] <TabAtkins>
Did something start screwing up? Gonna investigate.

[11:40:10.0000] <TabAtkins>
No clue how this could have changed...

[11:47:32.0000] <TabAtkins>
Hm, no, looks like it's always been like that since the beginning.

[11:54:05.0000] <Domenic>
Can we change it?

[11:54:36.0000] <Domenic>
Hmm and "Warning:" doesn't work, sad

[11:55:40.0000] <TabAtkins>
Try "Advisement: " for something that might be better for your style?

[11:55:48.0000] <Domenic>
I guess that's it, yeah

[11:56:03.0000] <TabAtkins>
Recognizing "Warning:" as the same thing is a good idea, tho.

[11:57:01.0000] <Domenic>
Oh but that makes it strong, like tobie mentioned earlier, so we have to use <p class="advisement"> instead

[11:57:18.0000] <TabAtkins>
Why is this a problem?

[11:57:43.0000] <Domenic>
It doesn't match the style of all the other notes/examples/etc.

[11:58:11.0000] <TabAtkins>
Right, because it's calling out something important, correctly  using <strong> semantics.

[11:58:28.0000] <tobie>
Well, more precisely, the problem is that the style doesn't match between single and multiple element advisements.

[11:58:32.0000] <Domenic>
Nah, I don't think this is more important than the nearby note

[11:58:32.0000] <TabAtkins>
Notes and examples can be skipped; they're at the same level of importance as surrounding text (or less so). Advisements (/warnings) are *more* important.

[11:59:32.0000] <TabAtkins>
tobie: Yeah, if you're not using the shorthand, you have to provide the <strong> yourself.

[11:59:46.0000] <TabAtkins>
Domenic: Then it's not a advisement/warning.

[11:59:56.0000] <Domenic>
*shrug* I disagree.

[12:00:24.0000] <TabAtkins>
I mean, you can use whatever wording you want for it on your own. But the "Advisement: " pattern is meant to capture rare, important call-outs that shouldn't be ignored.

[12:00:49.0000] <TabAtkins>
If you have your own, different concept of advisements, that's cool. But it wont' be captured by the markup shorthand Bikeshed provides.

[12:00:51.0000] <tobie>
Domenic, see: https://github.com/tabatkins/bikeshed/issues/790 and particularly the output of using the different markup strategies

[12:01:07.0000] <Domenic>
Yeah, that's why I have to use <p class="advisement">

[12:01:24.0000] <Domenic>
 I understand that my opinions differ from yours and so I can't use your shorthands

[12:04:06.0000] <tobie>
TabAtkins: to be clear, I'm in the same position as Domenic: I'd like to use the shorthand but can't because it creates a stylistic difference with cases where I can't use the shorthand because there are multiple elements.

[12:05:14.0000] <TabAtkins>
tobie: Like I said above, it doesn't. You're just not using the same markup pattern in your "manual" examples.  The styling created by the "Advisement:" shorthand is more than just what's applied via a class on the container; it also applies a <strong>, and styles that somewhat.

[12:05:54.0000] <TabAtkins>
This is different than note/issue, which derive all of their styling from a class on the container, but that's because they don't need any additional structure for their intended semantics.

[12:06:42.0000] <TabAtkins>
(heading to lunch, bbs)

[12:08:04.0000] <tobie>
TabAtkins: yup, that's understood. I was just responding to your question about needing to add "strong" manually. (I don't want the strong at all.)

[12:08:56.0000] <tobie>
But like I said, I haven't lost any sleep over the wontfix. :)

[12:09:02.0000] <tobie>
Also, bon appetit!

[12:28:27.0000] <Domenic>
Is there a way to get rid of "This version:" I wonder

[12:36:38.0000] <tobie>
Domenic: it would be nice to have a syntax to override or remove metadata.

[12:36:57.0000] <Domenic>
tobie: It looks like "This version:" is mandatory for non-living standards

[12:37:18.0000] <Domenic>
I wonder who would get made if we changed "ED" to "LS" in the bikeshed file :P

[12:37:26.0000] <tobie>
Domenic: mandatory in the published drafts

[12:37:41.0000] <Domenic>
Even for EDs according to bikeshed

[12:37:47.0000] <Domenic>
I don't know what the rules are for EDs (or who enforces them)

[12:38:15.0000] <Domenic>
E.g. presumably it's important to have that giant "status of this document" thing clogging up your intro and people would get mad if it went away

[12:40:22.0000] <tobie>
Domenic: there are things which are legal requirements and there are pubrules

[12:40:51.0000] <tobie>
the latter don't apply to EDs.

[12:41:18.0000] <Domenic>
At some point I feel like trying to make the first screenful useful is just a worthless cause. Look at all that whitespace dedicated to the W3C logo, before the title "Web IDL" even appears

[12:42:05.0000] <tobie>
Domenic: these are design issues to be brought with Fantasai during the tech plenary on the Wednesday.

[12:42:14.0000] <tobie>
*brought up

[12:42:59.0000] <tobie>
Domenic: those are neither pubrules nor legal reqs.

[12:43:28.0000] <tobie>
Domenic: also sotd could most probably be turned into much smaller text

[12:43:52.0000] <tobie>
with the approval of W3C legal

[12:44:06.0000] <Domenic>
Paragraphs 2 and 3 duplicate the header

[12:44:27.0000] <Domenic>
Anyway enough of that, back to the fun stuff :)

[12:46:28.0000] <tobie>
there's isn't a definition of type in WebIDL

[12:46:38.0000] <tobie>
shouldn't there be one?

[12:48:14.0000] <tobie>
Domenic: ^

[12:48:33.0000] <Domenic>
mehhh? I guess if people want to link to it?

[12:56:39.0000] <TabAtkins>
fantasai dedicated this year's redesign to (a) as much as possible, just CSS changes, and (b) overcoming the massive inertia against *any* change.

[12:57:04.0000] <TabAtkins>
Having accomplished both those goals, fixing the top-matter to be useful and tiny (and remove or move as much boilerplate as possible) is her next redesign goal.

[13:04:40.0000] <jyasskin>
TabAtkins: Note that the Conformance section says that notes start with "Note:". If you start dropping it, you should also make the Conformance section match.

[13:04:58.0000] <TabAtkins>
jyasskin: Right, I think that's why I'm keeping it currently.

[13:42:10.0000] <tobie>
Domenic: https://www.w3.org/2015/Process-20150901/#general-requirements are surprisingly light weight


2016-09-09
[01:17:53.0000] <tobie>
Is there a trick to close a PR when using the command line to modify a commit and push it to upstream directly?

[01:18:27.0000] <tobie>
I just tried that with https://github.com/heycam/webidl/pull/165 and failed.

[01:18:29.0000] <annevk>
tobie: you modify the commit on the branch, force push, then merge it using fast forward

[01:19:04.0000] <annevk>
tobie: https://github.com/whatwg/html/blob/master/TEAM.md has various pointers

[01:19:26.0000] <tobie>
annevk: thanks for the resource.

[01:19:28.0000] <annevk>
tobie: https://github.com/whatwg/html/blob/master/TEAM.md#merging-pull-requests-from-branches in particular

[01:20:18.0000] <tobie>
annevk: that implies having push rights to the branch, though, right?

[01:24:11.0000] <annevk>
tobie: yeah, if you don't the only way to close the PR is to add close #{prnumber} to the commit message, but that's somewhat frowned upon for reasons not entirely clear to me

[01:24:48.0000] <tobie>
annevk: because it closes the PR but the PR appears to not have been merged.

[01:25:57.0000] <annevk>
Sure, but assuming you cannot merge the PR successfully (external branch that requires a change other than a commit message change) that's kinda your only option

[01:26:10.0000] <tobie>
yup

[01:26:38.0000] <tobie>
oh well.

[01:31:00.0000] <annevk>
tobie: you should prolly give Domenic write access to that repo so he can create branches

[01:31:18.0000] <annevk>
tobie: and then protect master to only give the editors push access to that branch

[01:31:21.0000] <annevk>
tobie: or some such

[01:32:07.0000] <annevk>
tobie: I think that's the way to go if you have contributors that come back a lot, just give them write access so you can collaborate on branches, but protect master from accidents (other than your own)

[01:32:26.0000] <tobie>
annevk: I don't have admin access.

[01:32:36.0000] <tobie>
annevk: I guess heycam does

[01:32:43.0000] <annevk>
heycam: ^^

[01:32:52.0000] <annevk>
would be weird if not

[01:35:26.0000] <heycam>
how do you do fine grained access control like that?

[01:35:26.0000] <heycam>
branch protection for gh-pages says "Disables force-pushes to this branch and prevents it from being deleted" so I guess that's not it

[01:39:03.0000] <annevk>
heycam: should be at https://github.com/heycam/webidl/settings/branches/master

[01:39:20.0000] <annevk>
heycam: or https://github.com/heycam/webidl/settings/branches/gh-pages I guess

[01:39:45.0000] <annevk>
heycam: should have "Restrict who can push to this branch"

[01:39:55.0000] <heycam>
annevk: no I don't see that

[01:39:59.0000] <heycam>
maybe that's only available for orgs?

[01:40:59.0000] <annevk>
heycam: https://github.com/blog/2051-protected-branches-and-required-status-checks none of this is there?

[01:41:35.0000] <heycam>
annevk: no I see that

[01:41:47.0000] <annevk>
heycam: so maybe you first need to make gh-pages a protected branch

[01:41:56.0000] <annevk>
heycam: and then once it is, you can add further protections

[01:42:19.0000] <heycam>
I don't see any more options even after I enable protection

[01:42:24.0000] <heycam>
just the "Require status checks " one

[01:42:37.0000] <heycam>
oh that opens some more things when I check it

[01:42:38.0000] <heycam>
grr

[01:43:04.0000] <heycam>
though I'm not sure if the status checks one is what I want either...

[01:43:39.0000] <annevk>
heycam: yeah, status checks isn't important unless you have some integration thing setup

[01:44:35.0000] <heycam>
so I just see this: http://mcc.id.au/temp/branch.png

[01:45:57.0000] <annevk>
heycam: fascinating

[01:46:17.0000] <annevk>
heycam: maybe it's only available for "master"

[01:46:22.0000] <heycam>
hmm

[01:46:46.0000] <annevk>
heycam: no, it's an org feature as you thought

[01:46:49.0000] <heycam>
ah

[01:46:50.0000] <heycam>
how about I just add domenic and he can exercise restraint, in only pushing branches

[01:46:52.0000] <annevk>
https://help.github.com/articles/about-protected-branches/

[01:46:57.0000] <annevk>
yeah

[01:47:02.0000] <annevk>
do that

[01:47:27.0000] <heycam>
ok done

[02:15:57.0000] <Ms2ger>
annevk, tobie: btw, there's also https://github.com/blog/2247-improving-collaboration-with-forks now

[02:17:34.0000] <annevk>
Ms2ger: oh wow, that's great

[02:27:32.0000] <MikeSmith>
yeah very nice

[02:32:11.0000] <tobie>
Ms2ger: oh, I thought I had seen that somewhere! Thanks for sharing.

[07:49:05.0000] <tobie>
bz: sorry you're having issues building Bikeshed

[07:49:38.0000] <tobie>
bz: TabAtkins should be able to help you debug.

[08:34:02.0000] <JakeA>
annevk: when/why did headers.getAll vanish?

[08:48:22.0000] <JakeA>
nm found https://github.com/whatwg/fetch/commit/42464c

[08:54:17.0000] <JakeA>
annevk: new Headers([['foo', 'bar'], ['foo', 'yay']]).get('foo') returns "bar" in both Firefox & Chrome. It should be "bar,yay" right?

[08:54:34.0000] <annevk>
JakeA: yeah

[08:54:50.0000] <JakeA>
filing

[08:55:19.0000] <annevk>
JakeA: WebKit made a convincing argument that since we don't expose cookies, we shouldn't expose non-mapness to developers

[08:56:05.0000] <JakeA>
annevk: should they be combined at iteration time too?

[08:56:55.0000] <JakeA>
[...new Headers([['foo', 'bar'], ['foo', 'yay']])].length == 2 in Chrome

[08:57:04.0000] <annevk>
JakeA: yes

[08:57:22.0000] <annevk>
JakeA: iteration is the result of https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine

[08:58:50.0000] <JakeA>
ta, will file

[09:06:46.0000] <JakeA>
annevk: Safari combines with ', ' rather than ',' - are they wrong?

[09:10:37.0000] <annevk>
JakeA: technically, I think they're fixing that

[09:10:47.0000] <JakeA>
cool

[09:11:50.0000] <JakeA>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=1301713

[09:12:46.0000] <annevk>
ta

[09:14:41.0000] <JakeA>
annevk: and https://bugzilla.mozilla.org/show_bug.cgi?id=1301714

[09:16:23.0000] <annevk>
JakeA: you might care about https://github.com/WICG/async-cookies-api/issues/36

[09:20:43.0000] <JakeA>
I am, cheers!

[09:20:54.0000] <JakeA>
am interested that is

[09:26:41.0000] <bkardell>
dglazkov u around?

[09:27:23.0000] <bkardell>
actually... anybody around who might have more discussion history on this https://docs.google.com/document/d/1E16tmoOveGopys9Fx4Nn8x8P9q7Jm6CJIqoJyz31tlg/edit

[09:35:54.0000] <TabAtkins>
bkardell: What's up?

[09:36:19.0000] <bkardell>
do you have additional links on where aspects of this were discussed?

[09:37:01.0000] <TabAtkins>
No, tho there is some links in the doc, and several issues in the wicg repo you can look to for more details.

[09:37:11.0000] <bkardell>
like... I have concerns/thoughts but I'm sure it's pretty likely they've been discussed

[09:37:13.0000] <TabAtkins>
What's the context of your question? What specifically do you want to know?

[09:37:15.0000] <bkardell>
yeah I've been looking

[09:43:06.0000] <tobie>
Domenic: Rebased https://github.com/heycam/webidl/pull/170, think you could give it a look?

[09:52:31.0000] <annevk>
TabAtkins: see https://github.com/whatwg/dom/pull/313#issuecomment-242428180 for information about what might cause the span noise

[09:53:06.0000] <TabAtkins>
Oh, thanks!

[09:53:09.0000] <TabAtkins>
Hmm.

[10:07:39.0000] <annevk>
My Pygments version is 2.0.2

[10:07:50.0000] <annevk>
Was there some regression inbetween?

[10:08:18.0000] <Domenic>
Yes, I think newer versions add empty spans

[10:08:35.0000] <annevk>
Bah

[10:11:45.0000] <Domenic>
Maybe Bikeshed should do some kind of version check on pygments before running

[10:18:08.0000] <Domenic>
TabAtkins: in HTML, do I need to do `<dfn data-lt="transferable object">transferable objects</dfn>` or will Bikeshed/Shepherd figure out the pluralness itself?

[10:25:50.0000] <TabAtkins>
Domenic: It's best to lt the "base" version.  Bikeshed will handle <dfn>conjugated</dfn> => <a>conjugate</a>, but not <a>conjugating</a>. (It only goes to/from the base form once.)

[10:26:28.0000] <TabAtkins>
I didn't know there were empty spans in newer versions. Should be trivial to remove manually.

[10:27:49.0000] <TabAtkins>
Hm, looks like they're always just at the start of the highlight blocks?

[10:55:04.0000] <TabAtkins>
and fixed

[11:34:01.0000] <jyasskin>
TabAtkins: https://github.com/tabatkins/bikeshed/commit/127d0ac944ee152012efcc16c66ed88b50177810 broke the permissions spec. Any suggestions for how to let other specs define the enum-values from https://w3c.github.io/permissions/#enumdef-permissionname?

[11:51:01.0000] <jyasskin>
tobie Domenic: ^

[11:58:00.0000] <jyasskin>
I can define a bunch of new terms like `"bluetooth" permission-related algorithms`, and have a lookup table in the Permissions spec. We might have to do that anyway once PermissionName merges into the Feature Policy spec.

[12:19:56.0000] <TabAtkins>
jyasskin: If Permissions isn't defining the values, it shouldn't have them in WebIDL blocks, as those are inferred to be defining.  (I'm really not sure what I was thinking with my original "link elsewhere if already defined" code in the first place; I think maybe I just didn't know about partial?)  If you want it to look WebIDL-ish, just use <pre

[12:19:56.0000] <TabAtkins>
class=lang-webidl>, and write <a>s in the source to link them up.

[12:20:12.0000] <TabAtkins>
(Sorry for breaking your previous use; you didn't know it was non-idiomatic, and that was my fault.)

[13:32:58.0000] <tobie>
jyasskin: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27048

[13:33:55.0000] <tobie>
jyasskin: and in particular: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27048#c3

[13:34:22.0000] <tobie>
jyasskin: but there seems to be a lot of resistance to that idea.

[13:40:49.0000] <jyasskin>
tobie: Yeah, it's important that there be an index that points to all the enum values, although Shepherd might give us that soon. Faking the IDL block with explicit links might be the way to go here, until the next set of things changes.

[14:01:01.0000] <jyasskin>
TabAtkins: Using class=lang-webidl makes the enum disappear from the IDL Index.

[14:02:06.0000] <TabAtkins>
Yes, because then you're not defining it. ^_^ Okay, let's start over from the beginning. You want to define an enum, but not define any of its values? Or maybe just some of its values, and let other specs define other values, but still document those external values in this core spec?

[14:02:18.0000] <jyasskin>
Exactly.

[14:02:45.0000] <jyasskin>
It's a registry, where remote specs ought to define their set of algorithms and types, and then the Permissions spec should link to them.

[14:03:15.0000] <jyasskin>
Initially, most of the entries are defined locally, but it doesn't work well for the Permissions editors to maintain the details of, say, the Media algorithms.

[14:03:57.0000] <TabAtkins>
Okay. So. In a normal WebIDL block, put the enum and the values that you define in this spec. Then gimme a sec to fix up the (purposely undocumented) <index> element so it'll work for your use-case; it's 95% of the way there right now. It'll generate an index of all known enum-value values for the given enum.

[14:05:05.0000] <jyasskin>
!!! So then other specs can write, what, `enum PermissionName { "my-value" }`, and the <index> will automatically link to there?

[14:05:25.0000] <jyasskin>
Where would {{PermissionName}} link in that case? We really do want tobie's suggestion of partial enums for this.

[14:06:09.0000] <TabAtkins>
Well, we dont' have partial enum support in WebIDL, so they'll have to do it manually, with <dfn enum-value for=PerimissionName>"my-value"</dfn>, but yes.

[14:06:27.0000] <jyasskin>
Which is what they're doing right now, so that's fine.

[14:06:40.0000] <TabAtkins>
If they did it with WebIDL, then {{PermissionName}} would just complain about multiple possible refs.

[14:07:18.0000] <jyasskin>
Will the <index> add the other values to the IDL Index in the Permissions spec?

[14:08:03.0000] <TabAtkins>
No, it'll generate an index right there, like in https://drafts.csswg.org/indexes/

[14:08:29.0000] <TabAtkins>
So you'd need some explanatory text around it to give it context.

[14:09:10.0000] <jyasskin>
Mhmm. And we'd lose the unified IDL for PermissionName that implementers can copy into their .idl files, but that's not the end of the world.

[14:10:19.0000] <TabAtkins>
I could work on something to make that work a little better; I see the value in having a "unified" IDL block for anything that can be partial'd.

[14:10:28.0000] <TabAtkins>
But the index thing is nearly ready right now. ^_^

[14:10:34.0000] <Domenic>
We should probably add partial enums

[14:13:37.0000] <jyasskin>
Yeah, the index is probably better than what I'm doing right now.

[14:15:33.0000] <TabAtkins>
It'll be automagical, so yeah.

[14:23:39.0000] <tobie>
jyasskin: in that case, isn't the unified block actually *not* what you want? As I mentioned in the comment linked above, why would you want an enum value representing a permission for something you haven't implemented?

[14:25:45.0000] <jyasskin>
tobie: For Bluetooth, we take the IDL blocks and comment out the lines we haven't implemented yet: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/modules/bluetooth/BluetoothRemoteGATTCharacteristic.idl?l=17. But maybe people won't actually copy the PermissionName IDL block verbatim into their implementations.

[14:28:41.0000] <tobie>
jyasskin:

[14:29:21.0000] <tobie>
(sorry, auto tab mixup)

[14:38:43.0000] <tobie>
jyasskin: from an implementor's perspective, I guess this boils down to whether if fits the code structure more to group the permissions together, or scatter them across the different features they enable. I would imagine the former be easier to setup and the latter to maintain, by ymmv.

[14:40:29.0000] <jyasskin>
Yeah. I don't know for sure whether it'd help folks to have an IDL Index that includes everything.

[14:47:23.0000] <jyasskin>
Domenic/annevk: I'd like to use "relevant settings object" without an explicit platform object to refer to the relevant settings object of the *context object*. Does that sound like a good idea? I'll send you an HTML patch if so.

[14:47:51.0000] <jyasskin>
I could also just write "this's relevant settings object".

[15:14:38.0000] <Domenic>
jyasskin: yeah seems bad. This's or the context object's seems better.

[15:17:39.0000] <jyasskin>
Domenic: 'k


2016-09-10
[22:57:12.0000] <annevk>
Yeah, was should use "context object"

[22:57:22.0000] <annevk>
Well, really IDL should define "context object" as "this"

[01:06:00.0000] <botie>
heycam|away, at 2016-05-10 15:52 UTC, halindrome said: ping me about webidl and sequences

[07:05:27.0000] <Domenic>
I prefer "this"... "context object" was very confusing to me the first 100 times I saw it

[08:53:08.0000] <annevk>
Domenic: yeah, if IDL doesn't adopt it fast I think I'll change context object in DOM to "this"

[10:27:56.0000] <jyasskin>
HTML currently recommends the relevant settings object when 'this' exists, or the current settings object otherwise. If we write `this's relevant settings object` in places that aren't directly inside a method or attribute definition (e.g. the default in https://w3c.github.io/permissions/#permission-state), sometimes they'll be used from a constructor or

[10:27:57.0000] <jyasskin>
another place that `this` doesn't exist. Should we define a fallback to 'current' in that case?

[13:13:51.0000] <Domenic>
jyasskin: I don't quite understand the question. You can't write `this's relevant settings object` in places that aren't directly inside a method or attribute definition.

[13:14:23.0000] <Domenic>
jyasskin: in general for situations like permission state I think the settings object should be mandatory


2016-09-11
[19:54:37.0000] <KiChjang>
what's the relationship between a browsing context and a window?

[19:56:00.0000] <Domenic>
KiChjang: depends on what you mean by a window

[19:56:32.0000] <KiChjang>
Domenic, i mean it by the HTML spec's definition of a window

[19:56:41.0000] <KiChjang>
https://html.spec.whatwg.org/multipage/browsers.html#window

[19:56:42.0000] <Domenic>
KiChjang: you mean the Window class?

[19:56:46.0000] <KiChjang>
yes

[19:56:51.0000] <KiChjang>
well, the window object

[19:57:05.0000] <Domenic>
OK, so not the thing that has many tabs on a computer

[19:57:16.0000] <Domenic>
A browsing context has many windows

[19:57:22.0000] <Domenic>
it navigates from one to the next

[19:57:34.0000] <Domenic>
its WindowProxy proxies to a different Window upon each navigation

[19:58:04.0000] <KiChjang>
can there be a browsing context without a window?

[19:58:26.0000] <Domenic>
I think so, if you e.g. remove an iframe

[19:58:27.0000] <KiChjang>
and vice versa?

[19:58:49.0000] <Domenic>
i have to remember what happens when you remove an iframe...

[19:59:10.0000] <KiChjang>
well, let's not complicate things by considering iframes first

[19:59:29.0000] <KiChjang>
let's just consider the normal case where you only have tabs or windows

[19:59:42.0000] <Domenic>
OK, without iframes then all browsing contexts will have at least one Window and all Windows will belong to a browsing context

[20:00:20.0000] <KiChjang>
and i assume a browsing context has its own unique document as well?

[20:00:43.0000] <Domenic>
It's not quite that simple...

[20:00:51.0000] <Domenic>
Each browsing context has an active document

[20:01:43.0000] <Domenic>
but there can be up to two documents per Window (due to about:blank) and many Windows per document (due to document.open())

[20:03:23.0000] <KiChjang>
what does it mean when a document is inactive?

[20:03:32.0000] <KiChjang>
as in, it's not being displayed?

[20:05:13.0000] <Domenic>
Basically, yes.

[20:06:54.0000] <KiChjang>
but there's no active window...

[20:08:04.0000] <KiChjang>
basically, i'm trying to determine that whether i can trust that there's going to be a browsing context, if i'm given a window

[20:08:21.0000] <KiChjang>
looks like the answer is yes

[20:08:34.0000] <KiChjang>
since all windows belong to a browsing context

[20:09:21.0000] <KiChjang>
but is it the same as the browsing context that a particular element's owner document's browsing context?

[20:09:53.0000] <KiChjang>
s/that/of/

[20:10:20.0000] <KiChjang>
no wait

[20:10:38.0000] <KiChjang>
is it the same as the browsing context that a particular element's owner document contains?

[20:43:34.0000] <Domenic>
Not necessarily, e.g. for document.implementation.createDocument()

[20:43:46.0000] <Domenic>
(and elements from there)

[20:43:56.0000] <Domenic>
Those documents do not have a browsing context

[20:44:04.0000] <Domenic>
Same for template contents

[20:46:24.0000] <Domenic>
And I think the bc can go away even if the Window is still around, given detached iframes. (If JS captures the window value)


2016-09-12
[05:14:57.0000] <zcorpan>
https://github.com/whatwg/html/issues/192#issuecomment-146830020 - http://people.mozilla.org/~roc/videosync.html is gone :-(

[05:18:01.0000] <jgraham>
This is what happens if we let roc leave the building :(

[08:13:45.0000] <zcorpan>
https://github.com/w3c/web-platform-tests/pull/3697 - it's not clear to me why some events have exposed=Worker and some others do not. should all events be exposed? or only those that get fired on objects that are exposed in workers?

[09:37:16.0000] <annevk>
replied to zcorpan in the PR

[10:18:48.0000] <jez9999>
Hixie: hi there, I have a question about your data: URI kitchen

[10:18:57.0000] <jez9999>
Hixie: you have a checkbox for "base64", but looking at your code i'm not sure why you first base64-encode the data, then URI encode it. often. the "=" character will still need to be URI-escaped. what's the purpose of the base64 encoding?

[11:47:17.0000] <gsnedders>
Given a HTMLScriptElement that has been loaded and executed, is there any way to find the src of what was loaded and executed? Assume the src attribute is unchanged, but the document base URL has.

[11:57:34.0000] <Domenic>
gsnedders: I can't think of any way.

[12:15:33.0000] <gsnedders>
Domenic: thx

[12:52:08.0000] <smaug>
crazy stuff https://wicg.github.io/shape-detection-api/

[12:52:16.0000] <smaug>
totally crazy to add that as web api

[12:53:54.0000] <jyasskin>
smaug: What's your criterion for something to make a good web API?

[12:54:33.0000] <smaug>
some API which is defined properly and which isn't something one is expected to implement on top of other web APIS

[12:55:08.0000] <smaug>
this shape detection API is so something which should either run over some code running in workers

[12:55:19.0000] <smaug>
or it should send data to server side and get it there

[12:55:27.0000] <jyasskin>
How does the code in the workers access the hardware acceleration?

[12:56:47.0000] <smaug>
shape-detection-api doesn't seem to in anyway define the algorithms detection is supposed to do

[12:56:53.0000] <jyasskin>
And it seems bad to require web code to expose extra data to servers, and use extra network bandwidth, for use cases that native apps can achieve locally.

[12:57:59.0000] <jyasskin>
I think that's a good place the spec could be improved: nail down a little more precisely what these detectors actually detect.

[12:58:35.0000] <jyasskin>
That said, it also seems bad to forbid UAs from improving their object detection.

[12:59:28.0000] <smaug>
jyasskin: how is this API supposed to be implemented when it doesn't define what to do?

[13:03:49.0000] <jyasskin>
Taking just https://wicg.github.io/shape-detection-api/#barcode-detection-api, the spec seems clear enough: it identifies QR codes (it should link to ISO/IEC 18004:2015 or similar to define that) in an image. It doesn't say how to do that, and different implementations might do a better or worse job, making testing difficult, but IIRC the same is true of

[13:03:49.0000] <jyasskin>
font rendering.

[13:10:32.0000] <smaug>
qr code detection using JS isn't exactly hard

[13:11:08.0000] <mcasas>
smaug@ help me understand your concerns

[13:11:41.0000] <smaug>
my concern is to add API which can be implemented on top of other stuff and/or adding API which isn't defined properly

[13:11:42.0000] <mcasas>
the API is not providing any sw-fallback. If there's hw acceleration sitting there in the platform, it'll be surfaced; otherwise is JS-business as usual

[13:12:07.0000] <smaug>
currently the draft is more like an idea

[13:12:44.0000] <mcasas>
the API is the simplest you can find, and mimics the underlying Hw/OS: pass a single image, get the metadata back

[13:12:50.0000] <mcasas>
near-zero state

[13:13:37.0000] <smaug>
which Hw/OS?

[13:13:56.0000] <jyasskin>
mcasas: I think smaug wants a more rigorous definition of what the HW/OS actually do.

[13:13:56.0000] <mcasas>
and it lends itself nicely to a polyfill: if there is hw acceleration, use it, otherwise fallback to one of a number of JS libraries implementing, e.g. Face Detection

[13:14:09.0000] <mcasas>
Yeah, let me pull some links

[13:14:50.0000] <smaug>
we shouldn't add APIs which possibly require polyfills to the platform

[13:15:55.0000] <jyasskin>
smaug: So you'd be happier if the spec required UAs to include the software fallback?

[13:16:15.0000] <tobie>
People going to TPAC, where are you staying?

[13:16:49.0000] <mcasas>
Currently there are a number of JS libraries providing Face Detection. My idea was that, if the platform (i.e. the OS) provides hardware acceleration for such tasks, developers can use it, saving CPU and battery/energy.

[13:16:58.0000] <smaug>
jyasskin: right, and some kind of default algorithm how it all should work

[13:17:02.0000] <mcasas>
AVFoundation face detection is implemented here: https://developer.apple.com/library/ios/documentation/CoreImage/Reference/CIDetector_Ref/

[13:17:26.0000] <smaug>
UAs would be then free to implement it all using HW or whatnot, but the end result should be still the same

[13:17:27.0000] <mcasas>
(-featuresInImage: is the function to actually detect)

[13:18:25.0000] <mcasas>
Android has the FaceDetector class: https://developer.android.com/reference/android/media/FaceDetector.html

[13:18:38.0000] <mcasas>
the method being findFaces(...)

[13:18:55.0000] <smaug>
mcasas: and what about desktop OSes?

[13:18:58.0000] <mcasas>
Ever since the OpenCV implementation in ~2000, all Face/shape detectors work pretty much the same

[13:19:15.0000] <mcasas>
so hardware manufacturers just took that pseudo-API

[13:19:34.0000] <mcasas>
Desktop OSes: I've only seen hw implementation in MacBooks

[13:20:00.0000] <mcasas>
some USB sophisticated cameras have that as well

[13:20:34.0000] <smaug>
mcasas: ok, so you'd have sw implementation on Windows and Linux and others

[13:20:50.0000] <mcasas>
JS comparison of libraries doing face detection: https://github.com/mtschirs/js-objectdetect#performance

[13:21:18.0000] <mcasas>
Re. having a sw fallback implementation: I don't think the browser should include such a large piece of code, for a perhaps-not-too-popular use case.

[13:21:44.0000] <mcasas>
If the platform has some accelerated capabilities, the browser may offer them, but the sw-fallback would be getting into deep waters

[13:22:02.0000] <smaug>
mcasas: so browsers would ship this API only on mobile and OSX?

[13:22:07.0000] <smaug>
that would be quite some new API

[13:22:14.0000] <mcasas>
(by "deep waters" I mean e.g. what algorithm to provide, etc)

[13:22:32.0000] <jyasskin>
mcasas: The CIDetector_Ref API documentation is much less precise than we're used to for web specs. It may be as precise as it can be, given the freedom we want to give implementations to optimize and improve their detection, but you should try to defend that.

[13:23:05.0000] <jyasskin>
(We could move that to an issue on https://github.com/WICG/shape-detection-api/issues.)

[13:23:12.0000] <mcasas>
the proposed API would reject the Promises if the underlying platform does not provide such acceleration

[13:23:24.0000] <mcasas>
it's similar to e.g., having a gps unit or not,

[13:23:29.0000] <mcasas>
or having a compass

[13:23:47.0000] <mcasas>
but yeah, feel free to open bugs to the wicg spec

[13:49:18.0000] <Domenic>
Windows 10 has built-in face detection I am pretty sure

[13:49:30.0000] <jez9999>
i will never use that malware

[13:51:35.0000] <mcasas>
domenic@: investigating. Would love to have more platforms.

[13:52:02.0000] <Domenic>
Windows.Media.FaceAnalysis

[13:52:22.0000] <Domenic>
https://msdn.microsoft.com/library/windows/apps/dn974129

[13:54:55.0000] <jyasskin>
jez9999: Please stay civil on this forum.

[13:55:05.0000] <jez9999>
how is that uncivil?

[13:56:28.0000] <mcasas>
https://msdn.microsoft.com/library/windows/apps/windows.media.faceanalysis.aspx yeah, now the question is if that's accelerated in any way (probably yes)

[13:57:06.0000] <Domenic>
Surfaces come with these Intel depth cameras for real face detection (so you can't fool them by holding up a picture). I guess that's a whole nother thing

[13:59:47.0000] <KiChjang>
jez9999, i'm not sure how calling an entire software package malware without good reason is considered civil

[13:59:58.0000] <jez9999>
i have perfectly good reason

[14:02:10.0000] <Domenic>
jez9999: regardless, it's not appropriate for this channel.

[14:08:10.0000] <TabAtkins>
Yes, most important is that it's off-topic and annoying.

[14:14:49.0000] <jgraham>
To be fair there has traditionally been a very loose sense of "off topic" in this channel

[14:34:45.0000] <TabAtkins>
Yeah, but context-free "windoze sux lololol" is definitely outside of the topic, whatever it is.


2016-09-13
[17:50:44.0000] <TabAtkins>
annevk: For Document and ASCII case-insensitive, should I be reffing DOM or HTML?

[20:27:42.0000] <Domenic>
This is a good question

[20:27:52.0000] <Domenic>
I guess Document should probably be DOM

[20:27:54.0000] <Domenic>
HTML is partial

[20:28:28.0000] <Domenic>
Maybe we should consolidate the string stuff in one of the two specs

[23:15:29.0000] <smaug>
annevk: the min 1s timeout in background tabs isn't spec'ed anywhere, right?

[23:15:56.0000] <smaug>
it is just spec'ed that UA is allowed to do something like that

[23:16:11.0000] <annevk>
smaug: think so

[23:16:18.0000] <smaug>
k

[00:56:19.0000] <annevk>
zcorpan: I guess I'll leave that PR to Domenic

[00:56:21.0000] <annevk>
zcorpan: seems like he knows what needs doing

[00:56:41.0000] <zcorpan>
sounds like a good idea :-)

[00:57:02.0000] <annevk>
Anything else someone wants me to look at? I'm back to being fulltime available for the remainder of this week

[02:16:33.0000] <zcorpan>
annevk: why add a separate file instead of changing cross-origin-objects.html directly?

[02:17:37.0000] <annevk>
zcorpan: because bholley wanted points for throwing "whatever" exceptions

[02:18:02.0000] <annevk>
zcorpan: long term it should just be one file

[02:18:42.0000] <zcorpan>
annevk: ok

[05:06:48.0000] <mkwst>
tobie: Ping for a quick specref question. You around?

[05:07:17.0000] <tobie>
mkwst: yes

[05:08:39.0000] <mkwst>
tobie: https://w3c.github.io/webappsec-csp/ is pointing to CSP1 for some IDL references. I'm sure half of this is a bikeshed issue, but I think the other half is specref/W3C not being clear about the relationship between CSP{1,2,3}.

[05:09:46.0000] <mkwst>
https://specref.herokuapp.com/bibrefs?refs=CSP shows an `aliasOf` CSP1, for instance. CSP{2,3} don't seem to fit into that chain. Is this a red herring, or can I poke at the data somewhere to link these together?

[05:10:57.0000] <tobie>
/me looking

[05:13:42.0000] <tobie>
mkwst: so…

[05:14:27.0000] <tobie>
mkwst: the aliasing bit comes from W3C

[05:15:27.0000] <tobie>
what should it alias to? CSP2 or CSP3?

[05:15:50.0000] <tobie>
(it could also be a bug in the import script, LMK check)

[05:16:15.0000] <mkwst>
Ideally, CSP would mean CSP3. And CSP2 and CSP1 would be obsoleted.

[05:16:38.0000] <mkwst>
I have no idea how the W3C represents this data, so I'm happy to believe that that's the issue. :)

[05:17:19.0000] <annevk>
tobie: seems DOM xref "call a user object's operation" to IDL broke

[05:17:51.0000] <tobie>
mkwst: in RDF, what else?

[05:17:54.0000] <tobie>
:D

[05:18:12.0000] <mkwst>
tobie: Ah. Not JSONLD? I thought that was the new hotness.

[05:18:41.0000] <tobie>
mkwst: think there is one such API that happened since

[05:19:11.0000] <tobie>
annevk: yeah, I think the apostrophes caused issues

[05:19:36.0000] <annevk>
tobie: they don't in bikeshed

[05:19:57.0000] <annevk>
tobie: I guess it's fairly new so I could change DOM, but it seems nicer not to have to add an lt=""

[05:20:16.0000] <tobie>
annevk: let me look into this

[05:20:35.0000] <annevk>
ta

[05:22:07.0000] <tobie>
mkwst: so… the redirects on TR point to CSP2 while the ones in the RDF file point to CSP1

[05:22:28.0000] <mkwst>
tobie: who should I poke?

[05:22:53.0000] <mkwst>
plh?

[05:23:11.0000] <tobie>
mkwst: no there's an email address, let me check

[05:25:23.0000] <tobie>
mkwst: sysreq⊙wo

[05:26:06.0000] <tobie>
mkwst: you want to tell them to change the following in https://www.w3.org/2002/01/tr-automation/tr.rdf:

[05:26:08.0000] <mkwst>
Ok. And I'll say "The RDF file is wrong. You know. The RDF file. That you use. For the thing."

[05:26:17.0000] <mkwst>
Thanks. ;)

[05:26:59.0000] <tobie>
mkwst: here's the content they'll want to modify:

[05:27:04.0000] <tobie>
https://www.irccloud.com/pastebin/I4XHs8XV/

[05:27:54.0000] <tobie>
You can always /cc me on the mail: tobie⊙cc

[05:28:12.0000] <tobie>
mkwst: that said, I'm not sure this will magically fix your IDL issue

[05:28:43.0000] <tobie>
mkwst: as I'm not sure how exactly Tab handles this in Bikeshed

[05:28:50.0000] <mkwst>
Like I said, I'm sure half of it is me holding Bikeshed wrong.

[05:29:09.0000] <mkwst>
But the CSP1 reference is weird enough that I'm sure the W3C is somehow responsible. :)

[05:29:18.0000] <tobie>
mkwst: well, that needed fixing anyway

[05:29:32.0000] <tobie>
mkwst: plus you might ask them to fix the redirects on TR while you're at it

[05:29:47.0000] <tobie>
mkwst: it would be nice to have more consistency there, tbh

[05:31:30.0000] <mkwst>
is there something I can do about it, other than writing this email?

[05:31:44.0000] <mkwst>
like, some structure I (or Bikeshed?) should be adding to the published documents?

[05:36:29.0000] <tobie>
annevk: this seems to be a line break issue in the original spec

[05:36:39.0000] <mkwst>
(Emailed. Thanks for the help, tobie!)

[05:36:49.0000] <tobie>
mkwst: np

[05:37:59.0000] <jez9999>
Is this spec governed by WhatWG: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API

[05:38:41.0000] <tobie>
mkwst: regarding the shortname -301-> shortname[LEVEL], this is done in a completely ad-hoc manner

[05:38:46.0000] <annevk>
jez9999: it's part of html.spec.whatwg.org/multipage

[05:39:06.0000] <tobie>
mkwst: generally this is reflected automatically in the rdf file, but sometimes not

[05:40:59.0000] <tobie>
annevk: the x-ref seems to WFM

[05:41:07.0000] <tobie>
annevk: did you fix things already?

[05:41:12.0000] <tobie>
/me is confused

[05:43:16.0000] <annevk>
tobie: I get a warning locally when generating DOM

[05:43:31.0000] <tobie>
annevk: oh

[05:43:34.0000] <jez9999>
annevk: i see that it defines the event handlers that must be supported by all HTML elements, but is there anywhere where it actually defines the behaviour of the drag/drop API events?

[05:44:06.0000] <tobie>
annevk: what does the warning say?

[05:44:41.0000] <annevk>
tobie: "No 'dfn' refs found for 'call a user object's operation'"

[05:45:11.0000] <annevk>
tobie: it seems this isn't really introduced by you though, since afaict this should just work

[05:45:32.0000] <tobie>
annevk: I mean, it works now...

[05:45:45.0000] <tobie>
annevk: so I don't know

[05:45:59.0000] <annevk>
tobie: I'm guessing Shepherd is doing something wrong hmmmmm

[05:46:16.0000] <tobie>
annevk: might have to do with line breaks that I removed

[05:47:04.0000] <tobie>
annevk: there was a line break in the middle of the text before the bikeshed conversion

[05:47:27.0000] <tobie>
annevk: so if something along the pipeline is sensitive to this, it might be causing the problem

[05:47:31.0000] <annevk>
tobie: that'd be a very weird

[05:48:54.0000] <annevk>
tobie: filed https://github.com/tabatkins/bikeshed/issues/815

[05:49:09.0000] <jez9999>
Suggestion: https://html.spec.whatwg.org/#datatransferitem

[05:49:24.0000] <jez9999>
a DataTransferItem should allow the code to see whether it is a file or folder.

[05:50:11.0000] <jez9999>
alternatively, the DataTransferItemList interface could allow Chrome's .getAsEntry() method, which can be a FileEntry or a DirectoryEntry

[05:50:16.0000] <jez9999>
see: https://developers.google.com/web/updates/2012/07/Drag-and-drop-a-folder-onto-Chrome-now-available?hl=en

[05:50:40.0000] <annevk>
jez9999: there should be a processing model somewhere in the spec

[05:50:49.0000] <jez9999>
processing model?

[05:50:50.0000] <annevk>
jez9999: that defines when events are dispatched (and where)

[05:51:08.0000] <annevk>
jez9999: as for new features, best to file GitHub issues for those

[05:51:18.0000] <jez9999>
annevk: yeah i'm talking about the definition of the event received by ondrop

[05:51:29.0000] <jez9999>
where's the place on github to file?

[05:51:44.0000] <annevk>
jez9999: and keep https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F in mind, though if a feature already has an impl it definitely deserves to be filed

[05:51:53.0000] <annevk>
jez9999: https://github.com/whatwg/html/issues/new is the place

[05:51:58.0000] <jez9999>
ok

[06:03:58.0000] <jez9999>
annevk: https://github.com/whatwg/html/issues/1777

[07:06:29.0000] <annevk>
JakeA: can https://github.com/w3c/ServiceWorker/blob/master/Makefile be removed?

[07:10:42.0000] <JakeA>
annevk: hah, yeah. *gone*

[07:12:07.0000] <annevk>
JakeA: also, it seems "assets" in spec/ can be removed?

[07:12:21.0000] <annevk>
JakeA: and the contribution guidelines should no longer talk about the web components framework?

[07:15:56.0000] <annevk>
JakeA: means you can get rid of .gitmodules

[07:18:06.0000] <JakeA>
annevk: agreed. Fixing now. Also want to make https://w3c.github.io/ServiceWorker/ the spec url

[07:18:27.0000] <annevk>
JakeA: that'd be nice

[07:19:13.0000] <JakeA>
annevk: I don't have admin rights, I guess I'm not allowed them, but will ask w3 folks to make the changes

[07:20:41.0000] <Ms2ger>
MikeSmith, give the man access already

[08:25:17.0000] <JakeA>
annevk: done the cleanup, and waiting on a switch to be flipped for moving the spec to /

[08:25:24.0000] <JakeA>
https://github.com/w3c/ServiceWorker/issues/966#issuecomment-246709306

[08:28:55.0000] <annevk>
JakeA: saw that, hope it works out

[08:28:59.0000] <annevk>
and thanks

[08:58:18.0000] <Domenic>
https://browser-issue-tracker-search.appspot.com/ looks useful

[08:59:02.0000] <Domenic>
Hmmm still pretty WIP I guess

[08:59:38.0000] <Domenic>
https://browser-issue-tracker-search.appspot.com/?q=same-origin%20data%20URL

[09:56:17.0000] <jez9999>
http://stackoverflow.com/questions/15363632/background-size-contain-but-dont-scale-up

[09:56:28.0000] <jez9999>
are there any plans to fix this?  it seems crazy that there is no way to do this in CSS

[10:07:17.0000] <jyasskin>
Hey TabAtkins, https://html.spec.whatwg.org/multipage/dom.html#document has data-dfn-lt="", but `bikeshed refs --text Document` still finds it.

[10:42:32.0000] <TabAtkins>
Ugh, I'll bet Shepherd's heuristic mode is just looking for that being falsey and using the text instead. I'll bug plinss.


2016-09-19
[01:46:11.0000] <JakeA>
Domenic: annevk: happy to look at particular fetch+streams issues during the service worker meeting tomorrow since we're in the same building

[01:49:35.0000] <annevk>
sg

[02:12:47.0000] <smaug>
esprehn: ok, the global delayed microtask delivery point would still be consistent, so I can buy that. I assume it would be per global and not per connected-same-origin-global or such

[02:14:00.0000] <annevk>
mkwst: https://bugzilla.mozilla.org/show_bug.cgi?id=1302539 seems weird?

[02:34:09.0000] <annevk>
yoav: FWIW https://twitter.com/annevk/status/777800561366274048

[02:34:23.0000] <annevk>
FYI, really

[02:35:13.0000] <yoav>
annevk: Saw it :)

[02:35:44.0000] <yoav>
not my call, but I think we should just break those pages and make them feel bad about themselves

[02:35:54.0000] <yoav>
(assuming usage is low enough)

[02:38:37.0000] <mkwst>
Hi! Yeah, WebKit/Blink never implemented `nosniff` for anything other than script and style. From a security perspective, there didn't seem to be much value to doing so.

[02:38:48.0000] <mkwst>
If it's hurting interop, it's certainly something we could investigate doing.

[02:38:57.0000] <mkwst>
Do y'all have any numbers?

[02:39:32.0000] <Ms2ger>
If only someone wrote a fucking spec when it was implemented

[02:40:14.0000] <mkwst>
Ms2ger: Eh. It's an artifact from a different era. I think it shipped in IE8 or something.

[02:42:11.0000] <mkwst>
Like I said, if Chrome's behavior is breaking Firefox, then it's something we should address. But Chrome's behavior hasn't changed in at least ~3 years, so...

[02:47:37.0000] <annevk>
mkwst: I asked for numbers in the bug

[03:19:11.0000] <MikeSmith>
annevk: now would be a the right time to visit the Web Payments room

[03:19:48.0000] <MikeSmith>
same for anybody else here who’s interested in the payments stuff

[03:19:57.0000] <mkwst>
MikeSmith: What's the topic?

[03:20:54.0000] <MikeSmith>
mkwst: Rouslan talking about the Chrome implementation of the PaymentRequest API

[03:21:21.0000] <annevk>
MikeSmith: stuck elsewhere

[03:21:30.0000] <MikeSmith>
and in general about POV from implementors

[03:21:34.0000] <MikeSmith>
annevk: ok

[03:21:55.0000] <esprehn>
smaug: yeah per global, I don't understand the implementation complexity there since our microtask queue is inside v8 though

[03:22:18.0000] <gsnedders>
we're about to reach testing in the CSS WG, FWIW

[03:26:17.0000] <smaug>
esprehn: in Gecko microtask handling (used by MutationObserver, not Promises yet) could be quite easily modified to that delivery happens at end of task. I think. Except in case one MutationObserver is used to observe changes from a normal document _and_ changes form a document where delayed delivery is needed

[03:26:26.0000] <smaug>
hmm, I guess that should be reasonable easy too

[03:27:33.0000] <smaug>
(need to still sort out microtask handling in the spec too. I think there are couple of bugs and it is unclear to me why there ended up this special microtask thingie for mutation observers.)

[03:27:48.0000] <esprehn>
okay

[03:28:27.0000] <esprehn>
I need to think about the complexity of delivering for some documents and not others. I was imagining that the thing doing the calling skips it, so it'd be all contexts that would be invoked there

[03:29:11.0000] <esprehn>
ex. a child iframe that does parentWindow.requestAnimationFrame or a childWindow.mutationObserver.observe(parentWindow) wouldn't make it behave different

[03:29:45.0000] <esprehn>
if that's what you're suggesting, but it might be possible :)

[03:33:54.0000] <smaug>
esprehn: so if the behavior is per global and parent window has delayed mt but child doesn't, and childWindow's MO observes itself and parent, that is the case I'm talking about

[03:36:13.0000] <smaug>
I still wonder if the issue could be solved in Custom elements level

[03:37:22.0000] <smaug>
maybe not

[03:38:54.0000] <smaug>
it could be solved there, that during parsing callbacks are called at the end of the task

[05:42:59.0000] <Ms2ger>
CSSWG seems to be discussing XSL:FO

[05:43:03.0000] <Ms2ger>
What year is it?

[05:47:35.0000] <TabAtkins>
Nah mang it's dead.

[05:47:54.0000] <TabAtkins>
But still had some useful things that we had plans to import, if someone will actually do the work to dig it out.

[07:31:05.0000] <jgraham>
Ms2ger: Earlier they were discussing tables. Next up jsss

[07:32:52.0000] <zcorpan>
spaces gifs were also mentioned

[15:22:54.0000] <jyasskin>
I have a map from shorts to a particular dictionary type ({data:BufferSource, mask:BufferSource}), to express as an argument to a function. I want to have folks just pass objects, but getting the k/v pairs out is pretty hard to express in WebIDL. My fallback is to express it as an array of {id: short, data: bufferSource, mask: BufferSource}, and I'm leaning

[15:22:54.0000] <jyasskin>
toward that. Anyone have preferences?


2016-09-20
[01:13:29.0000] <TabAtkins>
jyasskin: Shouldn't make decisions based on what is easiest in WebIDL, particularly since this is just prose handling.

[02:00:06.0000] <tantek>
longdesc brought up in the CSS WG / APA joint meeting. I just don't even.

[02:05:42.0000] <TabAtkins>
Brought up by the a11y people in an offhand comment, with the rest of us groaning and shushing.

[02:13:35.0000] <tantek>
TabAtkins: don't forget the creepy voice version of LOOOONGDESC

[02:13:36.0000] <tantek>
we really needed video (or at least audio) of that

[02:27:00.0000] <annevk>
jyasskin: maybe also propose the API sketch on public-script-coord

[03:25:57.0000] <gsnedders>
https://news.ycombinator.com/item?id=12520865 sounds like it might be a parser bug?

[03:26:19.0000] <gsnedders>
like, the whitespace difference?

[03:48:52.0000] <gsnedders>
jyasskin: you at TPAC?

[06:48:10.0000] <FND>
hey annevk, you busy? I have some follow-up questions regarding https://github.com/w3c/web-platform-tests/pull/3592 (nothing urgent though)

[06:49:30.0000] <MikeSmith>
gsnedders: jyasskin is not at TPAC

[06:49:34.0000] <gsnedders>
kk

[08:04:55.0000] <annevk>
FND: next week would be much easier

[08:05:43.0000] <FND>
that's cool, annevk - I've left a few comments on the PR (it seems like we need to make sure we're observing the same behavior), so we can continue asynchronously

[08:09:44.0000] <smaug>
annevk: Domenic: when are you going to fix session history in the spec? :)

[08:10:12.0000] <Domenic>
smaug: some time after TPAC and TC39? I was hoping those researchers would answer more of my questions but I think I can do the work myself.

[08:10:14.0000] <smaug>
/me is trying to design this shadow dom part, and would like to rely on the behavior Gecko has for dynamically added iframes

[08:10:28.0000] <smaug>
Domenic: TC39 is when ?

[08:10:33.0000] <Domenic>
smaug: next week

[08:10:48.0000] <smaug>
Domenic: indeed would be good to get some feedback from servo folks

[08:31:09.0000] <jyasskin>
gsnedders: I'm still on the U.S. west coast. jsbell's my designated proxy if you need to talk to someone in person, and he's probably more knowledgeable about testing than me anyway.

[08:34:47.0000] <gsnedders>
jyasskin: jsbell's here? huh. haven't seen him. :)

[08:35:06.0000] <jyasskin>
He might only have arrived today.

[08:36:13.0000] <MikeSmith>
/me has not see him yet but I was not in the SW meeting or wherever else he might have been

[08:40:38.0000] <LeoLux>
Hi! The HTML5 validator at https://html5.validator.nu/ returns an server error when validation a html text: 500 Internal Server Error nginx/1.11.4

[08:42:07.0000] <LeoLux>
Any idea who can look into the validator error message?

[08:43:26.0000] <MikeSmith>
hsivonen: ⬆

[08:43:46.0000] <MikeSmith>
LeoLux: use https://checker.html5.org/ instead for the time being

[08:44:11.0000] <MikeSmith>
they are exactly the same backend

[08:44:34.0000] <LeoLux>
Ok, testing the same input at the moment...

[08:45:18.0000] <LeoLux>
yes, this site works! Thanks Mike!

[08:45:51.0000] <MikeSmith>
cheers

[13:21:11.0000] <jyasskin>
TabAtkins, annevk: Thanks for the API advice. I'll send a sketch to public-script-coord.


2016-09-21
[02:47:51.0000] <smaug>
annevk: can you connect to moznet?

[03:09:06.0000] <annevk>
smaug: I'm there, no?

[03:16:05.0000] <Ms2ger>
annevk, yeah

[06:21:25.0000] <MikeSmith>
anybody know what channel the Intersection Observer sesssion is in?

[06:23:32.0000] <MikeSmith>
also the WebIDL discussion

[06:24:15.0000] <Ms2ger>
annevk, ^

[06:25:02.0000] <TabAtkins>
MikeSmith: webidl isn't minuting - we're doing #webapps for passing links and such, but are otherwise summarizing in https://public.etherpad-mozilla.org/p/webidl

[06:25:04.0000] <hober>
webidl is in #webapps, but we're not taking minutes (there's an etherpad for results)

[06:25:07.0000] <annevk>
MikeSmith: IDL is in 5C

[06:25:22.0000] <annevk>
oh channel

[06:25:23.0000] <annevk>
doh

[06:33:50.0000] <tantek>
what about manifest? any idea?

[06:34:39.0000] <astearns>
manifest/publications is in #collection

[06:41:56.0000] <MikeSmith>
I guess nobody is in the Intersection Observer session

[06:43:00.0000] <jgraham>
You can't observe an intersection between the atendees and people in this channel?

[06:55:57.0000] <wanderview>
JakeA: can you think of a reasonable use case for keeping a FetchEvent.resolveWith() open for longer than 5 minutes *without* streams?

[06:57:26.0000] <JakeA>
wanderview: not that I can think of

[06:58:14.0000] <wanderview>
JakeA: thanks!  I guess chrome does not have any kind of kill timer on FetchEvent.respondWith(), right?

[06:58:42.0000] <JakeA>
wanderview: I don't think so

[06:59:12.0000] <wanderview>
JakeA: does chrome kill the worker if FetchEvent.respondWith() is holding it alive, but then the last controlled window is closed?

[06:59:51.0000] <JakeA>
wanderview: hmm, I don't know :(

[07:00:02.0000] <wanderview>
ok, thanks

[07:00:40.0000] <wanderview>
JakeA: we currently have a 5 minute kill timer on FetchEvent.respondWith()... we'll have to remove it once we get stream support, but I worry about the case where the window is closed while its being held alive...

[07:56:41.0000] <wanderview>
JakeA: did you guys discuss this SW issue at all yesterday? https://github.com/w3c/ServiceWorker/issues/962

[07:57:47.0000] <wanderview>
JakeA: seems in-process memory caches offer order-of-magnitude perf benefits... so enabling those should probably be a priority even if impls aren't there yet

[08:40:06.0000] <JakeA>
wanderview: we didn't discuss it, but it still doesn't feel like a service worker thing. More that we need programmatic access to something like the img cache

[08:51:43.0000] <smaug>
mkwst: so in your idea of isolation, how does a domain tell it wants isolation? Would that be part of origin-policy-manifest?

[08:53:53.0000] <smaug>
mkwst: and another question... since I think what some people at mozilla have been thinking about - the process isolation to get clean addressspace on 32bit, is in many ways still very similar to your idea of isolation, how could these two ideas be merged

[09:07:30.0000] <smaug>
mkwst: and nm, you answered to my questions :)

[09:08:59.0000] <wanderview>
JakeA: its more that the service worker needs a way to hint "I'm not going to change this resource every time its accessed" so the browser can then do higher level caching

[09:09:28.0000] <JakeA>
wanderview: what's the lifetime of that statement?

[09:09:50.0000] <wanderview>
JakeA: till the service worker that served the response goes Redundant

[09:10:51.0000] <JakeA>
wanderview: ohhh ok. Static routes? :D

[09:11:48.0000] <wanderview>
JakeA: that could have a similar effect, but not necessarily the same thing

[09:12:17.0000] <wanderview>
JakeA: static routes feels closer to http cache to me (on disk) vs allowing the browser to do memory caches that sit on top of http cache

[09:13:07.0000] <JakeA>
wanderview: welllll these aren't memory caches if their lifetime is tied to the SW, as the SW survives if the browser is closed & reopened

[09:13:58.0000] <wanderview>
JakeA: I meant SW going redundant would be upper bound on these caches... browser free to not cache at all or cache sometimes up until then

[09:14:10.0000] <wanderview>
JakeA: or cache until a memory limit is hit, etc

[09:14:33.0000] <JakeA>
wanderview: I guess I'm worried about "what if something ends up in that cache by accident?"

[09:14:48.0000] <JakeA>
would you have an API to remove items from that cache?

[09:16:07.0000] <wanderview>
JakeA: we could say hard-refresh also requires revisiting SW... but by "accident" you mean SW didn't intend to put the "allow extra caching" bit on the response, but did anyway, and now it regrets that decision?

[09:16:48.0000] <JakeA>
wanderview: Yeah. Like "whooops I put a 404 in there"

[09:16:55.0000] <wanderview>
JakeA: I view this like cache-control:immutable, but between the SW and higher level caches

[09:17:29.0000] <wanderview>
JakeA: not sure why the browser would choose to cache a failure response

[09:19:33.0000] <JakeA>
wanderview: I guess it depends what the API looks like. If I pass a response to something and say "please memory-cache this response for this request", it might be weird if it sometimes decides not to do that

[09:20:01.0000] <wanderview>
JakeA: its not saying "please memory cache it"... its saying "its ok if you choose to memory cache it because I'll never return a different value"

[09:22:39.0000] <JakeA>
wanderview: I think I need to think about this more when I'm not tired and grumpy :D struggling to imagine the API

[09:23:15.0000] <wanderview>
JakeA: if you think of cache-control as a hint from the server to browser http-cache... something similar from SW hinting to a higher level browser memory cache

[09:23:19.0000] <wanderview>
JakeA: but yes, get some sleep\

[09:30:54.0000] <JakeA>
wanderview: the tough part is where to put that signal. respondWith is too early, and it's tough to add things to response objects

[09:31:33.0000] <wanderview>
JakeA: why is respondWith() too early?  it could certainly be added there for anything that is pre-cached at install time

[09:33:19.0000] <wanderview>
I mean, you would add this extra header or whatever when you do the pre-cache in the install event

[09:35:10.0000] <JakeA>
wanderview: maybe it's fine, but having to decide this synchronously when you can decide the response async could be weird

[09:36:13.0000] <wanderview>
JakeA: I would say the more dynamic the response the less likely this thing should be used... again this is an opportunistic optimization and shouldn't be required for every response

[09:36:54.0000] <wanderview>
but this also seems like a space where browsers could experiment without too much compat risk

[16:48:10.0000] <jwalden>
heh, nice nuclear attack in the blog post

[16:48:29.0000] <KiChjang>
what just happened?

[16:49:29.0000] <jwalden>
https://blog.whatwg.org/drm-and-web-security

[16:49:40.0000] <jwalden>
I mean, I'm obviously exaggerating, but :-)

[16:57:17.0000] <KiChjang>
woah, so much animosity towards W3C

[16:57:38.0000] <KiChjang>
but that's why WHATWG was created in the first place, wasn't it?

[16:57:52.0000] <KiChjang>
because W3C published standards that nobody was willing to implement

[16:58:00.0000] <KiChjang>
and totally out of touch with reality


2016-09-22
[17:00:41.0000] <jwalden>
certainly this is a somewhat different axis of disagreement

[17:46:07.0000] <athenes19>
"Members of the World Wide Web Consortium (W3C) are getting ready to launch the HTML 5.1 specification and have already started work on the upcoming HTML 5.2 version since mid-August."

[17:46:15.0000] <athenes19>
What happened to "HTML now has no version number"?

[17:46:28.0000] <athenes19>
I guess that lasted until they decided to make a 5.1.

[17:46:34.0000] <athenes19>
Wasn't it supposed to be a "living standard"?

[17:47:23.0000] <athenes19>
I've still no idea how much of HTML 5 I understand. Maybe there are features in it that I would find useful, such as a native way to "uncheck/check all checkboxes with this class".

[17:47:42.0000] <athenes19>
There is a distinct lack of good summaries.

[17:50:08.0000] <KiChjang>
i don't think it matters much though, i believe browsers are following WHATWG's HTML spec instead?

[17:51:44.0000] <tantek>
KiChjang: yes, browser developers are largely following WHATWG HTML, except maybe Microsoft Edge.

[17:52:16.0000] <KiChjang>
athenes19, W3C still publishes versioned HTML specs for reasons

[17:52:23.0000] <athenes19>
Is the WHATWG one better? Does it have version numbers?

[17:52:27.0000] <tantek>
athenes19: W3C is continuing with "versioned" HTML 5.x "snapshots" which are following a different criteria/path in terms of stability / modularization

[17:52:43.0000] <KiChjang>
WHATWG's HTML spec is a living document

[17:52:50.0000] <athenes19>
Seems like W3C is the sane one for once... in that particular aspect.

[17:53:01.0000] <athenes19>
But otherwise, I have nothing but contempt for W3C.

[17:53:07.0000] <tantek>
athenes19: no version numbers fo the WHATWG one, it tends be more up to date (bug fixes etc.) and have more prospective features that are in progress.

[17:53:10.0000] <athenes19>
Or W3 or WC whatever they call themselves this week.

[17:53:44.0000] <tantek>
athenes19: W3C has a different way of working with HTML 5.x than WHATWG has with HTML

[17:54:08.0000] <tantek>
athenes19: sorry to hear about the "nothing but contempt" - I mean, it's likely not worth your energy to feel such contempt.

[17:54:44.0000] <tantek>
OTOH if there's a specific bad behavior you know of from W3C (spec, working group etc.) please feel free to let me know (citations helpful) and I'll see what I can do about it.

[17:55:07.0000] <athenes19>
The main thing I like about "HTML 5" (I hate how this is such a "volatile" standard) is how it enabled a lot of simplification of insanely verbose code from 4.01.

[17:55:57.0000] <athenes19>
Such as <script> instead of <script type="text/javascript"> (I can't even remember if that was the right one).

[17:56:11.0000] <athenes19>
It was pretty idiotic of them to force the "type" attribute.

[17:56:20.0000] <athenes19>
When 99.99% of all <script> tags used JavaScript.

[17:56:38.0000] <athenes19>
Especially as JavaScript wasn't even called JavaScript in all browsers, yet you had to type "javascript" explicitly.

[01:19:13.0000] <smaug>
yikes, this input event stuff in editing work is odd

[02:07:02.0000] <TabAtkins>
Okay, so I need to make an attribute that's an array. Can I do that with sequence<>?

[02:07:13.0000] <TabAtkins>
It's a dead array.

[02:26:05.0000] <gsnedders>
/me hober you have food? :'(

[02:49:50.0000] <nox>
TabAtkins: Isn't FrozenArray for that?

[02:50:19.0000] <TabAtkins>
Yeah, got told that's the case. Annoying because the whole object is dead, so the immutability doesn't do anything *useful*, but I guess it communicates useful intent.

[02:50:28.0000] <TabAtkins>
Made everything readonly too, to be consistent.

[02:51:07.0000] <nox>
TabAtkins: What's a dead object?

[02:51:23.0000] <TabAtkins>
I just mean an object with no communication channels back to anything in the engine.

[02:51:46.0000] <TabAtkins>
In this case, it's exposing the CSS Syntax parsing methods - you feed in a string, you get tokens back out. Tweaking the token objects won't do anything.

[03:17:24.0000] <annevk>
smaug: so yeah, I'm not really convinced yet

[03:17:36.0000] <smaug>
annevk: I like the new element

[03:17:50.0000] <smaug>
comparing to the current contentEditable mess

[03:18:06.0000] <smaug>
it is sanest way forward, I think

[03:18:08.0000] <annevk>
smaug: that does make sense, but nobody seems to have a decade of exp

[03:18:54.0000] <annevk>
smaug: I guess'll see when the processing model arrives

[03:19:02.0000] <smaug>
right

[03:19:11.0000] <smaug>
for now it is just the old stuff + some sugar on top of it

[06:30:54.0000] <Ms2ger>
OH: it would be crap because it's always crap

[09:32:54.0000] <MikeSmith>
do any UAs support path[vector-effect="non-scaling-stroke"]

[09:33:15.0000] <MikeSmith>
from SVG Tiny 1.2 https://www.w3.org/TR/SVGTiny12/painting.html#VectorEffectProperty

[09:34:46.0000] <TabAtkins>
MikeSmith: None of the browsers yet afaik

[09:34:56.0000] <MikeSmith>
ok thanks

[09:37:39.0000] <gsnedders>
Does anything actually care about SVG 1.2?

[09:38:11.0000] <TabAtkins>
No, but individual features have back-migrated to SVG2.

[09:49:37.0000] <jyasskin>
1.2->2 is a "back" migration?

[09:50:54.0000] <MikeSmith>
yeah in that SVG2 is the shipping branch from SVG1.1

[09:51:15.0000] <MikeSmith>
whereas 1.2 was a detour kind of

[09:51:20.0000] <MikeSmith>
I guess

[09:51:49.0000] <MikeSmith>
sort of it is migrating back to reality from fantasy

[10:05:56.0000] <jyasskin>
Am I right to interpret https://html.spec.whatwg.org/multipage/interaction.html#triggered-by-user-activation as including microtasks?

[11:16:10.0000] <MikeSmith>
jyasskin: yeah since microtasks are tasks

[11:16:20.0000] <jyasskin>
Thx

[12:22:01.0000] <KiChjang>
is it just my impression, or is it true that W3C is a monolithic/authoritative organization who thinks it can decide how the web should look like?

[12:37:45.0000] <jyasskin>
I think that's just your impression. Lots of people with different perspectives work with the W3C.

[12:45:44.0000] <caitp>
the W3C is marginally better at compromise than the house/senate, and not quite as good at pay to play legislation

[12:51:50.0000] <KiChjang>
thing is, i'm seeing it pushing for XHTML and it didn't happen

[12:51:59.0000] <KiChjang>
and also a really bloated SVG spec

[12:52:11.0000] <KiChjang>
(it had networking code, would you imagine)

[13:09:41.0000] <jyasskin>
KiChjang: This is what happens when you let theoreticians and users have a say, in addition to people implementing browsers. You get some impractical compromises. If anything, you're complaining that the W3C isn't monolithic *enough*. ;)

[13:14:37.0000] <caitp>
"users" not so much being grandma and grandpa, but businesses trying to impact how they can present their content


2016-09-23
[04:49:35.0000] <smaug>
does anyone else but Gecko support nested workers?

[04:49:56.0000] <smaug>
Or did blink add support in case there is service worker which wants to use normal workers or something?

[04:50:14.0000] <smaug>
(though, I don't understand the lifetime management of subworkers in that case)

[05:58:46.0000] <jyasskin>
smaug: I know blink talked about letting SWs use normal workers, but I don't know the outcome.

[06:28:32.0000] <Domenic>
smaug: IIRC Blink wants to but hasn't devoted the resources yet...

[06:30:00.0000] <smaug>
Domenic: right. I also wonder how to have reasonable lifetime for subworkers when SW can be killed at any time

[06:40:03.0000] <annevk>
smaug: GC-lifetime :-p

[06:45:59.0000] <beverloo>
annevk, friendly ping re: https://github.com/whatwg/notifications/pull/82, as you asked :)

[06:51:24.0000] <Domenic>
https://html.spec.whatwg.org/#execute-the-script-block can anyone tell how to write a test that the last step queues a task to fire load, vs. does not?

[07:11:38.0000] <Domenic>
Filed https://github.com/whatwg/html/issues/1817 if someone wants to help

[07:37:41.0000] <jgraham>
Domenic: It *might* work to add a second script block after the first that added a load event listener. If load is fired synchronously that script would never see it, otherwise it almost certainly would

[07:37:58.0000] <jgraham>
But that seems potentially racy

[07:38:45.0000] <jgraham>
Or maybe you can use postMessage

[07:39:50.0000] <jgraham>
If you see the load before a postMessage at the end of the script block it must have been sync, otherwise it was async

[07:40:00.0000] <jgraham>
If they use the same task source…

[07:42:11.0000] <annevk>
beverloo: I tried to ping someone internally

[07:42:20.0000] <annevk>
beverloo: so, one more week?

[07:42:32.0000] <annevk>
beverloo: I mean, I tried pinging someone again

[07:44:19.0000] <beverloo>
annevk, sure, I appreciate that! It's a bit of a systematic issue though, it would be great to see more involvement from your notifications people in general

[07:46:02.0000] <smaug>
mkwst: are you still somewhere around @tpac

[08:01:03.0000] <annevk>
beverloo: there's only one at the moment as far as I know and he's doing other things

[08:10:32.0000] <smaug>
mkwst: https://bugs.chromium.org/p/chromium/issues/detail?id=649686

[09:23:41.0000] <smaug>
how does one get email about all the new topics in discourse.wicg.io

[13:02:26.0000] <annevk>
beverloo: change is fine with wchen

[13:03:03.0000] <annevk>
beverloo: guess I can merge next week, but there's also a small outstanding comment

[13:03:29.0000] <annevk>
beverloo: I suppose I could also check the whole text one more time

[15:26:26.0000] <smaug>
are there any wpt tests for secureContext?


2016-09-24
[17:10:11.0000] <annevk>
Ask bz

[17:16:01.0000] <smaug>
oh sure, he was probably writing some today. But I was wondering some older ones which would have captured the bug I found in chrome

[18:09:51.0000] <jyasskin>
smaug: In https://discourse.wicg.io/users/<your-username>/preferences, fill some categories into "Watching First Post". There may be some other ways too.

[18:10:21.0000] <jyasskin>
cwilso may know a better.

[18:10:23.0000] <jyasskin>
way

[18:11:52.0000] <smaug>
hmm, that is not what I want

[18:12:13.0000] <smaug>
I want effectively mailing list behavior

[18:15:30.0000] <smaug>
otherwise one can't know what kind of random stuff people are trying to spec via wicg

[22:27:10.0000] <olalonde>
is there any plan to get request progress events for the fetch standard?

[23:21:34.0000] <annevk>
olalonde: there's the notion we need to address it at some point

[23:22:09.0000] <annevk>
olalonde: for now we just point folks at streams, which don't work for upload yet


2016-09-26
[00:10:19.0000] <jochen__>
annevk: do you have a pointer to your isolation proposal?

[01:52:18.0000] <MikeSmith>
jochen__: I thought that was mkwst’s isolation proposal

[01:52:27.0000] <MikeSmith>
or annevk has a different one?

[01:57:08.0000] <annevk>
MikeSmith: someone at Moz has one

[01:57:31.0000] <annevk>
MikeSmith: needs to be fixed a bit before sharing

[01:58:41.0000] <MikeSmith>
ah ok

[02:15:01.0000] <annevk>
I wonder how stuff like https://github.com/whatwg/encoding/commit/9224c4cad81fd5720306fe79241cf04b5526a3f0 happens as it's clearly a commit of a fork

[02:15:12.0000] <annevk>
It's https://github.com/ricea/encoding/commit/9224c4cad81fd5720306fe79241cf04b5526a3f0

[02:15:26.0000] <annevk>
Anyway, that commit might interest JakeA

[02:16:12.0000] <annevk>
I think GitHub basically has a whole bunch of commit attribution issues

[02:16:50.0000] <annevk>
The forked repo getting a notification about a fork just seems wrong

[02:17:20.0000] <annevk>
Especially with it appearing as if it was a notification for a commit in the forked repo, rather than the fork

[02:20:01.0000] <JakeA>
annevk: ohh cheers!

[02:21:45.0000] <annevk>
JakeA: I suppose they're planning on turning that into a PR at some point, at which point I'll ping you for review

[02:23:00.0000] <mkwst>
annevk: If you want to spend some time on the `all-the-memory: gimmie` variant of the proposal we talked about on Friday, I'm happy to chat this week. Or to volunteer jochen__ to chat instead.

[02:23:30.0000] <annevk>
mkwst: sounds good, we're having an internal talk tomorrow evening

[02:23:50.0000] <annevk>
mkwst: I'm going to try to forward all the points you made today, and then hopefully get the answers tomorrow

[02:24:18.0000] <mkwst>
annevk: Great. I don't know how lucid my arguments were at that point in the week, but hopefully they made enough sense to spend time on.

[02:24:44.0000] <JakeA>
annevk: yeah, I'd rather it was a simpler {readable, writable}, but pretty sure they'd have thought about that

[02:25:12.0000] <annevk>
mkwst: they did

[05:19:00.0000] <annevk>
"This is way out of scope for IDL. This is just about how we use English words." At some point I'd like IDL to have an opinion about that, as it's kind of governing "IDL algorithms"

[05:55:50.0000] <tobie>
annevk: agreed. As a relatively new spec editor, guidelines as to how to write algorithms plus formalized language for common cases would have really helped.

[06:13:45.0000] <mkwst>
annevk, tobie: See also https://github.com/w3ctag/spec-reviews/issues/136.

[13:09:44.0000] <jyasskin>
Domenic/annevk: Is https://github.com/whatwg/fetch/issues/164 the best reference we have on the OpenEndedDictionary proposal?

[14:36:27.0000] <smaug>
annevk: ping

[14:36:35.0000] <smaug>
or Domenic

[14:36:44.0000] <smaug>
want to perhaps comment https://github.com/w3c/presentation-api/issues/336

[14:36:57.0000] <smaug>
to indicate which settings object should be used these days


2016-09-27
[00:20:11.0000] <annevk>
jyasskin: I guess it might be

[00:20:19.0000] <annevk>
jyasskin: should probably open an issue against IDL

[02:56:06.0000] <annevk>
zcorpan: "rebase and merge" is useful if you have multiple commits that don't need to be squashed, just fast-forwarded?

[02:56:35.0000] <zcorpan>
annevk: yep

[02:58:58.0000] <zcorpan>
next on my wishlist is ability to move an issue to another repo :-)

[03:25:00.0000] <MikeSmith>
mkwst: FYI the plan for the Workers spec appears to be to assign a new editor to it

[03:26:02.0000] <MikeSmith>
rather than, say, just making it a Note or folding referencing the Workers section of HTML

[03:26:48.0000] <MikeSmith>
I think there was an announcement at the TPAC f2f about it

[03:35:17.0000] <annevk>
😟

[03:59:18.0000] <mkwst>
MikeSmith: The plan is dumb.

[04:02:04.0000] <Ms2ger>
mkwst, you realize which WG you're talking about?

[04:41:51.0000] <ondras>
so, when using the html5 dragdrop api, is there any way to influence the visual representation that is being dragged?

[04:42:06.0000] <ondras>
(preferrably via css)

[04:46:01.0000] <zcorpan>
ondras: https://drafts.csswg.org/selectors-4/#drag-pseudos ?

[04:46:24.0000] <zcorpan>
i suppose that's for the drop target

[04:47:11.0000] <annevk>
zcorpan: should we update HTML to account for that pseudo-class?

[04:47:31.0000] <annevk>
zcorpan: I think HTML might also have some source comments about drag-and-drop pseudo-classes

[04:49:00.0000] <annevk>
       <hyatt> :droptarget

[04:49:00.0000] <annevk>
       <hyatt> or something

[04:49:00.0000] <annevk>
       <hyatt> we don't support a pseudo-class for the drop target but that's a great idea

[04:49:00.0000] <annevk>
       <Hixie_> yeah, thinking about that too

[04:49:00.0000] <annevk>
       <Hixie_> :drop-target, :drop-target(above), :drop-target(below) and having ondragover be able to say "not on me, but next to me maybe"

[04:49:33.0000] <zcorpan>
annevk: i don't think anything in particular is needed in HTML, other than dropping the comment

[04:49:37.0000] <annevk>
seems Selectors went into a slightly different direction

[04:49:55.0000] <annevk>
zcorpan: HTML needs to say when it applies

[04:50:31.0000] <annevk>
zcorpan: and at some point we need to expose an API so custom elements can also let it apply and such

[04:50:35.0000] <zcorpan>
ah yes

[04:50:40.0000] <annevk>
zcorpan: same for :disabled etc.

[04:50:41.0000] <zcorpan>
ok

[04:51:01.0000] <zcorpan>
i can file an issue

[04:51:07.0000] <annevk>
ta

[04:52:09.0000] <ondras>
zcorpan: I would like to style the semi-transparent clone of the element being dragged

[04:55:59.0000] <zcorpan>
ondras: i'm not aware of a way to do that

[04:58:18.0000] <ondras>
zcorpan: ok :/

[05:16:06.0000] <smaug>
ondras: so you don't want setDragImage but something else?

[05:16:56.0000] <ondras>
smaug: well I want to drag the html element in question

[05:17:08.0000] <ondras>
smaug: but for <a> elements, the browser (ff?) adds its href

[05:17:11.0000] <ondras>
to the dragged visual

[05:17:25.0000] <ondras>
or I want to change its background color to outline the box being dragged

[05:17:27.0000] <ondras>
etc

[05:17:36.0000] <ondras>
the kind of stuff you do with css, generally speaking

[05:18:14.0000] <smaug>
hmm, I wonder if you could have some hidden element and use that as drag image

[05:18:24.0000] <smaug>
style that element whatever way you want

[05:18:49.0000] <ondras>
*chrome adds @href value to the element, not ff

[05:19:25.0000] <ondras>
smaug: yeah, that would be cool. status quo makes me re-implement the whole d'n'd machinery in custom js

[05:21:10.0000] <smaug>
oh, interesting

[05:21:17.0000] <smaug>
didn't know that

[05:21:28.0000] <smaug>
and looks like Chrome's dnd UI is rather busted on linux

[05:21:45.0000] <smaug>
the link title and href overlap, so one can't really read either one

[05:22:34.0000] <smaug>
ondras: and Chrome uses title+href even if you explicitly call setDragImage?

[05:23:01.0000] <ondras>
smaug: will try

[05:23:35.0000] <ondras>
smaug: as in, .setDragImage(someNonImageElement) ?

[05:23:43.0000] <ondras>
weird

[05:24:19.0000] <smaug>
ondras: that is what the  spec is yes. weird indeed

[05:24:39.0000] <smaug>
https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-setdragimage

[05:25:45.0000] <ondras>
smaug: confirming that setDragImage fixes the @href issue in Chrome.

[05:25:52.0000] <smaug>
Gecko seems to take data from <canvas> and <img>, but if something else is used, that element is explicitly painted

[05:26:45.0000] <ondras>
well that would be optimal for my case

[05:27:22.0000] <ondras>
also, for larger elements, firefox makes the "ghost" a bit scaled

[05:27:27.0000] <ondras>
about .7 I would guess

[05:29:39.0000] <ondras>
smaug: the setDragImage fix has the disadvantage of specifying some anchor point

[05:29:45.0000] <ondras>
but I can probably compute that, hmm.

[05:49:48.0000] <MikeSmith>
TabAtkins: about vector-effect="non-scaling-stroke" see https://github.com/validator/validator/issues/373#issuecomment-249838095 and http://codepen.io/thebabydino/pen/oXpWjd It seems Blink, Gecko, and WebKit to actually support it

[05:50:01.0000] <MikeSmith>
*do actually support it

[05:58:26.0000] <zcorpan>
MikeSmith: i discussed with i think it was bz about a problem with w3c-test.org, that it uses port 80 breaks some tests

[05:58:39.0000] <zcorpan>
MikeSmith: can it use 8000 and redirect 80 to 8000?

[06:00:11.0000] <MikeSmith>
sure

[06:00:21.0000] <MikeSmith>
I think

[06:00:51.0000] <MikeSmith>
hmm well actually I do not know how to configure that

[06:01:12.0000] <MikeSmith>
without installing an additional web server

[06:01:31.0000] <MikeSmith>
right now w3c-test.org is just running wptserve

[06:01:52.0000] <MikeSmith>
not apache nor nginx or anything

[06:03:03.0000] <MikeSmith>
to do what you describe I think I would need to install nginx and run in on port 80 but just have it proxy port 8000

[06:03:42.0000] <MikeSmith>
or could I just do it through DNS?

[06:04:05.0000] <MikeSmith>
anyway that would not help much since I don’t actually have admin access to the DNS for it

[06:04:48.0000] <MikeSmith>
anyway I guess I also wonder why we don’t just fix the text that break if the port is 80 (or is not 8000)

[06:05:03.0000] <MikeSmith>
that seems like a bug in the test suite

[06:05:17.0000] <MikeSmith>
unless we want to document somewhere that the port must be 8000

[06:05:31.0000] <MikeSmith>
or just hardcode it

[06:06:06.0000] <MikeSmith>
because otherwise other people are also going to run into the same problem if they try to run the test suite on a different port

[06:07:04.0000] <zcorpan>
well 80 is special since it changes the serialization of e.g. location.href from including the port to not including it

[06:07:26.0000] <zcorpan>
it is a bug in the test so long as anyone is using port 80 to run the tests

[06:08:07.0000] <zcorpan>
which right now is only w3c-test.org AFAIK

[06:09:37.0000] <zcorpan>
wptserve has a thing to rewrite URLs but it can only do path rewrites, looks like? http://wptserve.readthedocs.io/en/latest/_modules/wptserve/server.html?highlight=rewriter

[06:09:43.0000] <zcorpan>
jgraham: ^

[06:10:08.0000] <jgraham>
(will look later going afk for a bit)

[06:10:38.0000] <MikeSmith>
ah OK if I could just use wptserve with that rewrite thing that would be great

[06:11:27.0000] <MikeSmith>
I also am about to step out for 90 minutes or so

[06:12:03.0000] <zcorpan>
hmm i suppose rewrite doesn't help. we need to serve a redirect response to switch ports

[06:13:10.0000] <MikeSmith>
OK well I’m fine with doing it however we need to, even if it requires installing and configuring nginx

[06:13:13.0000] <zcorpan>
alternatives: 2: fix the broken tests, try to come up with a lint check. 3: break existing links to w3c-test.org

[06:13:35.0000] <MikeSmith>
I still prefer 2

[06:13:39.0000] <zcorpan>
ok

[06:14:52.0000] <MikeSmith>
but if it turns out to be too big of a deal to fix the tests I am fine with changing the w3c-test.org setup to add the redirect

[06:15:27.0000] <annevk>
miketaylr: I think I'll try to create that issue for srcElement / window.event today

[06:15:47.0000] <annevk>
miketaylr: because if we are having them I'd like the shadow tree angle to be sorted sooner than end-of-year

[06:20:24.0000] <zcorpan>
MikeSmith: 246 files include "{{ports", i'd need to check all of those and any files referencing those (in case of shared scripts) to do (2)

[06:20:47.0000] <MikeSmith>
hmm that is a lot I guess

[06:21:12.0000] <MikeSmith>
would be good to know what jgraham and Ms2ger prefer to do

[06:21:22.0000] <zcorpan>
or maybe that many instances, not that many files

[06:23:14.0000] <Ms2ger>
Breaking all links to w3c-test.org kinda sucks

[06:23:22.0000] <Ms2ger>
No strong opinion otherwise

[06:25:19.0000] <MikeSmith>
anyway I am gonna step out now and be back in 90 minutes or so

[06:32:47.0000] <zcorpan>
http://w3c-test.org/html/browsers/origin/cross-origin-objects/cross-origin-objects.html is broken... maybe it's just that file, who knows. can fix it though

[06:48:10.0000] <zcorpan>
hmmmm. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4519 returns empty string, not "80". i don't see that specced in https://html.spec.whatwg.org/multipage/browsers.html#dom-location-port - annevk?

[06:49:09.0000] <annevk>
zcorpan: a URL's port is null when it's the default

[06:49:19.0000] <zcorpan>
ah

[06:49:47.0000] <annevk>
zcorpan: https://url.spec.whatwg.org/#port-state 2.1.3

[06:50:01.0000] <zcorpan>
thanks

[07:33:46.0000] <zcorpan>
https://github.com/w3c/web-platform-tests/pull/3831 MikeSmith

[07:38:31.0000] <jgraham>
zcorpan: Yeah, we should move w3c-test.org off port 80

[07:38:37.0000] <jgraham>
bz was also complaining about that

[07:39:33.0000] <gsnedders>
Why is that a problem?

[07:40:19.0000] <zcorpan>
gsnedders: see above. location.port returns "" for default ports, and location.host is different

[07:40:44.0000] <gsnedders>
yeah, but most of the web runs on port 80, so we probably want to run at least some tests on port 80!

[07:41:37.0000] <zcorpan>
isn't it most 443 nowadays? :-P

[07:42:41.0000] <jgraham>
In practice binding to port 80 in automation is tough because root

[07:53:05.0000] <gsnedders>
https://github.com/w3c/XMLHttpRequest/issues/2

[07:53:06.0000] <annevk>
mkwst: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25529#c12 is waiting for input from you I think

[07:53:07.0000] <annevk>
mkwst: not sure who else can help out

[07:53:07.0000] <annevk>
gsnedders: I guess they only found a victim for workers?

[07:53:08.0000] <gsnedders>
annevk: yeah

[07:53:53.0000] <annevk>
gsnedders: curious that they only stop on "v1"

[07:54:07.0000] <annevk>
gsnedders: wonder if that means they keep the other snapshot from 2014 around to confuse everyone

[07:54:22.0000] <gsnedders>
I think someone in theory is working on that.

[07:54:24.0000] <gsnedders>
Unlike v1.

[07:54:32.0000] <gsnedders>
But, y'know, every little helps.

[07:54:43.0000] <annevk>
Pretty sure nobody is working on that

[07:54:48.0000] <annevk>
I guess

[07:55:07.0000] <annevk>
I also don't think anyone will actually work on workers btw

[07:55:16.0000] <annevk>
All I've heard indicates that someone will copy-and-paste bytes

[07:55:26.0000] <annevk>
Well, code points

[07:55:35.0000] <annevk>
I've not heard that anyone will help out solve issues with workers

[07:56:33.0000] <Ms2ger>
As usual

[07:58:02.0000] <miketaylr>
annevk: cool

[07:58:17.0000] <miketaylr>
annevk: send a link when you get a chance (or cc me or something)

[07:58:30.0000] <annevk>
miketaylr: you should be copied

[07:59:04.0000] <miketaylr>
cool thx

[07:59:09.0000] <miketaylr>
(haven't looked at mail yet this morning)

[08:06:33.0000] <miketaylr>
/me sees DOM#334

[09:13:06.0000] <JonathanNeal>
Just noticed https://dom.spec.whatwg.org/#dom-parentnode-queryall is gone. What happened to .query/.queryAll ?

[09:16:02.0000] <miketaylr>
JonathanNeal: see https://github.com/whatwg/dom/commit/10b6cf1ba02806220d5461a3bdb7939728b73635 and comments

[09:16:20.0000] <miketaylr>
basically, waiting on subclassing to work

[09:18:18.0000] <JonathanNeal>
Is the underlying subclassing being actively worked on? Does this increase or decrease the need to add subclassing?

[09:19:07.0000] <annevk>
JonathanNeal: I'm not entirely sure what the status is, I think we can subclass builtins in engines now, but I haven't tested it

[09:19:29.0000] <annevk>
JonathanNeal: what would remain after that is bringing subclassing of builtins to IDL, which might be quite a bit of effort, but not sure

[09:22:31.0000] <JonathanNeal>
I mostly follow about the subclassing; I remember a conversation about subclassing versus extending. So, what improved as a result of this being removed?

[09:23:44.0000] <annevk>
JonathanNeal: some folks got confused because the IDL bits were not defined

[09:23:56.0000] <annevk>
JonathanNeal: so I decided to comment out the feature until that got resolved

[09:24:28.0000] <annevk>
JonathanNeal: it seems that either way there's confusion

[09:26:52.0000] <JonathanNeal>
How do you recommend packages like dom-elements, polyfill.io, or my own polyfills address this? It seems dangerous pointing to an imaginary spec, because (maybe only from my point of view) it would seem easier to radically change how relative queries behave. To put a little meat on that last statement, I imagine it could mean a name change to .find/.findAll

[09:26:53.0000] <JonathanNeal>
again (that was the old name for the live collection?) or a difference in behavior (something related to how scope is handled).

[09:29:45.0000] <annevk>
JonathanNeal: that's always a risk, right?

[09:30:04.0000] <annevk>
JonathanNeal: (and why I'm not sure that polyfills are that great if they mimic the API exactly)

[09:30:44.0000] <annevk>
JonathanNeal: as long as it's not stable (i.e., implemented by most browsers and used in the wild) it can change

[09:36:38.0000] <JonathanNeal>
@annevk

[09:37:26.0000] <JonathanNeal>
@annevk agreed it’s a gamble. sometimes is pans out like .closest and other times like .query/.queryAll

[09:37:45.0000] <JonathanNeal>
^ irccloud experiencing some interesting delays, apologies if this message was duplicated

[09:41:41.0000] <jgraham>
Oh FWIW my opinion is that breaking all links isn't terrible

[09:44:01.0000] <annevk>
jgraham: which links?

[09:44:37.0000] <JonathanNeal>
What was the reason query/queryAll was chosen over find/findAll? Was it to avoid a conflict with another library or was the query wording just considered more accurate?

[10:44:35.0000] <jgraham>
annevk: All of them!

[10:44:48.0000] <jgraham>
OK, actually just to w3c-test.org

[11:21:48.0000] <jyasskin>
Domenic: Am I just polluted by C++ if I think that non-integral arguments should cause a TypeError in their coercion to IntEnforceWithin<x, y>?

[11:28:14.0000] <annevk>
jyasskin: hope I got all your issues connected now, sorry about the lag

[12:10:29.0000] <Domenic>
jyasskin: for keys I think it makes sense to throw

[12:11:04.0000] <jyasskin>
annevk: Yep, thanks a bunch for all the issue links.

[14:35:52.0000] <rniwa>
Domenic, kochi: could either one of you merge https://github.com/w3c/web-platform-tests/pull/3637 ?

[14:37:01.0000] <rniwa>
Domenic: thanks!

[14:37:06.0000] <Domenic>
\o/

[14:45:04.0000] <rniwa>
Domenic: another one: https://github.com/w3c/web-platform-tests/pull/3835

[14:45:09.0000] <rniwa>
kochi: ^

[14:45:43.0000] <rniwa>
Domenic, kochi: Chrome Canary seems to fail some of *callback tests that involve adopting custom elements into a new document

[14:45:56.0000] <rniwa>
somehow the reactions aren't queued or processed

[14:47:41.0000] <rniwa>
oh wait, no. this is about "new Document" failing

[15:04:06.0000] <Domenic>
yeah :(

[15:05:18.0000] <Domenic>
we're trying to implement it but foolip has concerns

[16:05:39.0000] <rniwa>
Domenic, kochi: here are more tests for custom elements reactions: https://github.com/w3c/web-platform-tests/pull/3835


2016-09-28
[17:46:36.0000] <KiChjang>
if i have a Document object (as defined in the HTML spec), can we assume that its associated URL is immutable and never changes?

[17:48:13.0000] <KiChjang>
in other words, is there a one-to-one relationship between a URL and a Document?

[18:12:12.0000] <MikeSmit1>
annevk: http://stackoverflow.com/questions/39725955/why-is-there-no-preflight-in-cors-for-post-requests-with-standard-content-type

[18:58:09.0000] <rniwa>
annevk: yt?

[18:58:28.0000] <rniwa>
hayato: yt?

[20:19:21.0000] <fantasai>
So.. if the validator is complaining about <details role="note"> is it an error in the document, the validator, or the spec?

[20:25:23.0000] <fantasai>
/me keeps running into this when trying to publish specs

[20:43:11.0000] <kochi>
rniwa: looking #3835, fyi hayato is ooo this week

[22:18:37.0000] <MikeSmith>
fantasai: error in the document because per http://w3c.github.io/html-aria/#details <details> is not allowed to have any role attribute at all

[22:19:08.0000] <MikeSmith>
it’s implicit role=group

[22:20:42.0000] <MikeSmith>
if there’s a reason why it should allow role=note file an issue at https://github.com/w3c/html-aria/issues

[22:32:12.0000] <Domenic>
KiChjang: definitely not 1:1; you can have many documents with the same URL

[22:32:44.0000] <KiChjang>
Domenic, is it due to fragments and queries?

[22:32:56.0000] <Domenic>
KiChjang: no, I can just open two documents, both to http://example.com/

[22:33:46.0000] <Domenic>
or, within the same window, every call to document.implementation.createDocument() creates a new document with URL about:blank. Many documents -> one URL

[22:34:12.0000] <Domenic>
KiChjang: for one document -> many URL, use pushState or replaceState

[22:34:35.0000] <Domenic>
KiChjang: or, indeed, just navigate to a fragment

[22:34:40.0000] <KiChjang>
but once a document is opened, does the URL change at all?

[22:34:41.0000] <Domenic>
so it's many to many, not 1:1

[22:34:58.0000] <Domenic>
the URL changes with pushState, replaceState, fragment navigation so far... probably a few more

[22:35:09.0000] <KiChjang>
oh, so it's not immutable

[22:35:19.0000] <KiChjang>
pushState?

[22:35:39.0000] <KiChjang>
lemme check its definition

[22:35:46.0000] <Domenic>
https://html.spec.whatwg.org/#dom-history-pushstate

[22:35:54.0000] <Domenic>
step 10

[22:36:16.0000] <Domenic>
document.open() too it looks like

[22:36:28.0000] <Domenic>
based on multi-global weirdness

[22:36:53.0000] <Domenic>
e.g. it looks like otherWindow.document.open() will change otherWindow.document's URL to window.document's URL

[22:37:33.0000] <Domenic>
i wonder if that's actually interoperable though; would be good to get rid of it if not

[23:34:13.0000] <annevk>
MikeSmith: you gave the correct answer

[23:34:22.0000] <annevk>
MikeSmith: added a brief comment though

[23:34:25.0000] <MikeSmith>
thanks

[23:35:17.0000] <MikeSmith>
I actually pinged you about it before I posted that answer, because I initially thought the OP was asking a more interesting question

[23:39:16.0000] <annevk>
ah

[23:44:23.0000] <annevk>
https://lists.w3.org/Archives/Public/public-webappsec/2016Sep/0118.html

[23:44:45.0000] <annevk>
"I am describing an idealized world. I thought that’s what Standards are for, and we then work towards them? Conversely, it seems like it would be bad to standardize on “good enough for now” and then need to change it."

[23:45:34.0000] <MikeSmith>
oh man

[23:45:53.0000] <MikeSmith>
“Edge can’t do an effective job of CORS Preflight right now due to architectural issues which we hope to address in the future.”...

[23:46:09.0000] <annevk>
I have no idea what that means either

[23:46:43.0000] <annevk>
I wonder if mkwst is planning on pointing out what's what?

[00:43:41.0000] <mkwst>
I don't understand Crispin's arguments, and I'm not sure it would be productive to argue with him. So, I'm not planning on pointing out anything, but just responding to the "I have no complaint at all if Chrome chooses to block loopback access from HTTP sites" with something like "Good. Done. And also, why did we have this entire thread if you don't actually

[00:43:41.0000] <mkwst>
object?"

[00:44:21.0000] <mkwst>
MikeSmith: Chrome can't do an effective job of it either because I don't understand our network stack (and it's completely divorced from CORS, which lives in Blink).

[00:44:32.0000] <mkwst>
Everyone has lots of work to do. *shrug*

[00:57:45.0000] <annevk>
mkwst: I guess I might reply then to at least point out his notion of standards is wrong

[00:58:01.0000] <annevk>
mkwst: at least as it pertains to the web

[00:58:28.0000] <mkwst>
annevk: Sounds like a reasonable thing to do. Though I'm not sure he's the right guy at Microsoft to spend time on. *shrug*

[00:58:49.0000] <annevk>
mkwst: he's not with Edge?

[00:58:52.0000] <mkwst>
(I'll look at the CSP node cloning thing today; I don't remember any of the context behind that spec text.)

[00:59:02.0000] <mkwst>
annevk: He is.

[00:59:43.0000] <mkwst>
brb

[01:18:55.0000] <annevk>
mkwst: he sends emojis through Wingdings. K

[06:22:19.0000] <mkwst>
annevk: What's the origin of the document navigated to as a result of clicking on the link in `<a href="javascript:'boo'">yay</a>`?

[06:22:57.0000] <mkwst>
The origin of the URL from which the navigation occurred?

[06:23:24.0000] <annevk>
mkwst: I think so

[06:24:09.0000] <annevk>
mkwst: I think the origin of the active document of the browsing context, but there's some dispute over whether override URL should be a thing, so it might be wrong still

[06:24:44.0000] <mkwst>
soooo... can we stop doing that? it's crazy.

[06:31:15.0000] <annevk>
mkwst: I guess, see the "override URL" issue

[06:31:39.0000] <mkwst>
Well, I'd prefer to just stop navigating to a random string. :)

[06:36:02.0000] <mkwst>
Nevermind. This happens on 2% of page loads.

[09:44:48.0000] <annevk>
https://github.com/w3c/input-events/issues/9 o_O

[10:09:30.0000] <Domenic>
Yeah that thread has me just flabbergasted

[10:10:50.0000] <annevk>
I really dislike the "please propose text because I don't understand the problem" replies

[10:11:08.0000] <annevk>
If you don't understand a problem with something you work on, you should really seek to understand it

[10:11:28.0000] <annevk>
That kind of response is not limited to that thread or specification, by the way

[10:13:35.0000] <nox>
annevk: Please explain better because I don't understand the problem with such replies.

[10:13:37.0000] <nox>
/me runs away.

[10:31:18.0000] <astearns>
annevk: conversely, "this is wrong, and I can't tell you how to fix it" is equally frustrating

[10:31:41.0000] <Domenic>
All we're asking for is to leave the issue open

[10:32:18.0000] <annevk>
astearns: fair

[10:32:23.0000] <annevk>
astearns: I don't think that's the situation here

[10:33:03.0000] <annevk>
astearns: whenever I get those I still consider it somewhat interesting though and would see it more as a challenge than a problem with the reporter

[10:35:30.0000] <annevk>
astearns: basically, it's indicative of you as an author not fully grasping the domain you're operating in and having to do some more research

[10:35:41.0000] <annevk>
astearns: and that can be kinda fun

[10:38:17.0000] <astearns>
giving a little direction on the required research would probably help (going from my own experience trying to dig in to Fetch for the first time)

[10:38:56.0000] <annevk>
astearns: yeah, for input events I actually gave a quite detailed description of what needs to be done several times

[10:39:07.0000] <annevk>
astearns: actually, for UI events in general

[10:40:05.0000] <annevk>
astearns: https://w3c.github.io/clipboard-apis/ has adopted this advice to some extent

[10:40:48.0000] <annevk>
astearns: the TL;DR is that we need to define "OS UX input actions" (or whatever you wanna call it), not events

[10:41:15.0000] <annevk>
astearns: events are just a thing that such actions end up generating at one point or another

[10:41:25.0000] <astearns>
is that detailed description something that would help with this particular issue? (I don't see a detailed description in that thread)

[10:41:54.0000] <annevk>
astearns: this particular issue is about it not being defined how the extensions affect that model

[10:42:27.0000] <annevk>
astearns: if you add an attribute to an event, you actually need to define how it's initialized prior to dispatch, probably based on input from the OS

[10:43:02.0000] <annevk>
astearns: I mentioned that a few times there and at the F2F I explained the whole thing in person too, so I'm not sure why the editor is now not understanding

[10:43:42.0000] <annevk>
astearns: to be clear, this has been going on for years

[10:44:47.0000] <astearns>
fair - I'm just trying to see if there's a way to get past this particular bit of miscommunication

[10:45:25.0000] <annevk>
astearns: e.g., https://lists.w3.org/Archives/Public/www-dom/2014JanMar/0064.html is an early email on the matter

[10:46:29.0000] <annevk>
astearns: I also found https://lists.w3.org/Archives/Public/www-dom/2013JanMar/0128.html which still isn't addressed yet (has some overlap with CSS stuff)

[10:47:32.0000] <annevk>
astearns: as for CSS and Fetch, the main thing there is that you need to define a model around stylesheets

[10:47:47.0000] <annevk>
astearns: a concept of a stylesheet, it's associated URL, referrer policy, etc.

[10:48:02.0000] <astearns>
linking to those (and other previous discussions) may help - it looks to me (from just skimming this one issue now) that Johannes is missing connections (that I'm also missing)

[10:48:05.0000] <annevk>
astearns: you need some kind of fetch queue I suppose for values that require a particular resource

[10:48:28.0000] <annevk>
astearns: and then just start calling the fetch operation somewhere passing along the right bits

[10:48:59.0000] <annevk>
astearns: the main problem with CSS is that you don't really define a model (yet are now exposing all kinds of stuff through Houdini, which seems like the wrong way around to be addressing this)

[10:50:01.0000] <annevk>
astearns: okay, I'll point out the email

[10:50:02.0000] <astearns>
please open Houdini issues if they need to be thinking through this

[10:51:16.0000] <astearns>
you're likely to get more engagement on fetch concerns from the Houdini group than the CSSWG as a whole

[10:51:39.0000] <annevk>
CSS needs to be thinking through this

[10:51:43.0000] <astearns>
and then we can bring that back to CSS :)

[10:52:06.0000] <annevk>
I have little faith, been trying since I worked on CSSOM however many years ago

[10:52:24.0000] <annevk>
Glenn Adams took over and would fix it all, not much happened

[10:52:40.0000] <astearns>
fair point

[10:54:29.0000] <annevk>
I told the Houdini folks from Google in person too and they didn't really see it either

[10:55:14.0000] <annevk>
But meanwhile there's nothing in CSS that actually allocates the objects defined in the object model or ties the whole thing together

[10:58:34.0000] <annevk>
astearns: anyway, I suppose I should try harder, just hard to balance with everything else that's going on

[10:59:20.0000] <astearns>
yeah, completely understandable

[11:03:26.0000] <TabAtkins>
Glenn's contribution was zero or negative literally the entire time. He blessedly faded away. Basing any conclusions on your interactions with him would be... incorrect. zcorpan runs CSSOM now, and I'm going to spend time this week or next writing the stuff to nail down the url() fetch model, and hopefully @import too.

[11:04:17.0000] <TabAtkins>
Houdini has little to nothing to do with the CSSOM, btw. I don't think there's anything tying the two together.

[11:05:50.0000] <annevk>
TabAtkins: I'm not really basing it off him, just on where we are today

[11:06:15.0000] <annevk>
TabAtkins: although I do hold some grudge about how I was treated back then

[11:06:15.0000] <TabAtkins>
Yeah, sure, I've certainly put off some of the relevant work for, um, years.

[11:07:36.0000] <gsnedders>
To be fair, CSS inherently doesn't expose as much implementation detail through unspecificed gaps compared with most other bits of the platform which are more directly introspectable

[11:08:01.0000] <TabAtkins>
The fetch model is one of the exceptions to that.

[11:08:08.0000] <TabAtkins>
Which is a big failing on our part to spec.

[11:08:21.0000] <annevk>
Values leak all over too in various forms

[11:08:45.0000] <annevk>
And various things leak through APIs such as offsetWidth

[11:10:55.0000] <annevk>
TabAtkins: I think the way Houdini ties in is that it exposes many similar things (perhaps more limited at the start)

[11:11:01.0000] <gsnedders>
that mostly shows itself only insofar as what unit you get the result in, though

[11:11:21.0000] <TabAtkins>
Insofar as we start exposing more things, we're (I think) doing a lot better with defining them properly.

[11:12:23.0000] <annevk>
TabAtkins: mkay, I'm fairly skeptical still given that values and their object model representation are in different specifications

[11:12:38.0000] <annevk>
TabAtkins: but we'll see how it goes

[11:13:27.0000] <annevk>
TabAtkins: I mean, we learned a lot with HTML as to how to define syntax/model/API and get implementations better at the edge cases

[11:13:34.0000] <TabAtkins>
Yup.

[11:13:49.0000] <annevk>
TabAtkins: I haven't really seen CSS take notice much, but if you think it's improving, sounds good I suppose

[11:14:17.0000] <TabAtkins>
I mean, feel free to continue yelling at us in the future as we keep fucking it up. ^_^

[11:14:58.0000] <annevk>
TabAtkins: heh, I wish I had more time, would be fun to work on CSS

[11:15:20.0000] <TabAtkins>
Meh, you're already on the "basically work on everything" train.

[11:15:25.0000] <TabAtkins>
I wish I could work more on SVG.

[11:15:37.0000] <annevk>
TabAtkins: yeah, that one too, heh

[11:16:44.0000] <annevk>
TabAtkins: I might try to write a somewhat more cogent piece at some point

[11:17:02.0000] <annevk>
gotta go, good day!

[11:29:45.0000] <smaug>
whatwg.org has been slow recently

[11:35:47.0000] <duper>
smaug: dreamhost, heh.

[11:47:54.0000] <jsbell>
Given that TC39ers are currently TC39ing, I'll probably have to wait for an answer, but...

[11:48:08.0000] <jsbell>
Anyone know what became of the TextSegmenter proposal for ECMA-402 (i.e. ECMAScript Intl stuff) ?

[11:48:39.0000] <jsbell>
Old proposal: http://wiki.ecmascript.org/doku.php?id=globalization:text_segmentation

[11:48:59.0000] <jsbell>
never made it to https://github.com/tc39/ecma402 so far as I can tell, but I swear it was progressing. :(

[11:50:08.0000] <Domenic>
jsbell: littledan__ is presenting it at this very TC39!

[11:50:19.0000] <jsbell>
Domenic: w00t!

[11:50:19.0000] <Domenic>
https://github.com/littledan/Segmenter https://docs.google.com/presentation/d/1X2zBU3bZ4ergVMWfubCsdnHFzeaDgqiTRJVgvNGjQBs/edit#slide=id.p

[11:50:39.0000] <littledan__>
I haven't presented it yet; happy to take feedback

[11:50:46.0000] <littledan__>
did we get a Font Metrics API at TPAC?

[11:51:11.0000] <littledan__>
some committee members are interested in hyphenation as well; not sure how that should fit into all this

[11:51:42.0000] <jsbell>
littledan__: I'll review. segmentation is key for building fulltext search on top of IndexedDB. I'll try and rope in some library authors for additional feedback.

[11:54:11.0000] <littledan__>
jsbell: I know eae is also looking into related issues

[11:54:14.0000] <littledan__>
but from the web side

[11:54:39.0000] <littledan__>
jsbell: Unfortunately, segmentation is locale-dependent, as you might notice from the API

[11:55:29.0000] <jsbell>
littledan__: re: font metrics - not sure. It was planned to be discussed but I was far away from those mtgs. I'd ping eae@ who would have been in the right room

[12:01:01.0000] <astearns>
littledan__: eae and I did a bit of work on font metrics at TPAC - he'll be adding a wicg repo for it soon (this week or next)

[12:21:45.0000] <gsnedders>
astearns: yay!

[12:37:12.0000] <rniwa>
annevk: yt?

[13:13:00.0000] <annevk>
rniwa: about to get some sleep, will reply to issues tomorrow

[13:13:08.0000] <rniwa>
annevk: okay

[13:48:53.0000] <smaug>
anyone recall who patches UIEvents to have composed stuff?

[13:48:59.0000] <smaug>
annevk: you might recall?

[13:50:02.0000] <smaug>
oh, maybe hayato did that

[13:52:57.0000] <smaug>
hmm, I could be wrong

[13:53:05.0000] <smaug>
we rely on related target in this case

[13:57:00.0000] <smaug>
how is this spec'ed...

[13:57:12.0000] <smaug>
is mouseenter happens in shadow dom

[13:57:23.0000] <smaug>
mouseenter is per specs composed

[14:02:11.0000] <smaug>
ah, there it is, in DOM spec

[14:33:54.0000] <smaug>
there isn't load event for <video>'s poster image. Should there be?

[14:34:09.0000] <smaug>
zcorpan: you might have some opinion

[14:36:49.0000] <zcorpan>
smaug: what's the use case? :-)

[14:37:37.0000] <smaug>
zcorpan: I could imagine one might want to for example hide the whole <video> if loading doesn't succeed. ok, that would be error event

[14:37:53.0000] <smaug>
or hide the <video> until load event for poster fires?

[14:40:08.0000] <zcorpan>
it seems more common to want the <video> to take up the right amount of space (by using width and height attributes) before anything has loaded

[14:41:43.0000] <zcorpan>
anyway i think poster is a simple convenience feature, if you need something more then use <img> and flip to a <video> with script or so

[14:41:53.0000] <smaug>
true

[14:41:55.0000] <smaug>
fine

[14:42:19.0000] <zcorpan>
/me sleep

[14:52:29.0000] <MikeSmith>
smaug: about whatwg.org you might want to check and make sure you’re not trying to get to it through ipv6

[14:54:39.0000] <MikeSmith>
because if you try to reach it through ipv6 it basically behaves as if it’s tarpitting you

[16:45:59.0000] <Domenic>
rniwa_: I just realized that littledan__'s https://github.com/littledan/Segmenter proposal for JS is solving the issue we discussed about finding the grapheme length of something

[16:46:32.0000] <rniwa_>
Domenic: oh nice

[16:46:59.0000] <rniwa_>
Domenic: not sure if I want to tie it with word, sentence, & line stuff though...

[16:47:08.0000] <Domenic>
rniwa_: apparently ICU does

[16:47:14.0000] <rniwa_>
Domenic: although... if we did add that feature, we could probably spec selection API using this API

[16:47:30.0000] <rniwa_>
Domenic: I know ICU does but not sure if it makes sense for JS

[16:47:31.0000] <rniwa_>
API

[16:47:59.0000] <Domenic>
rniwa_: just filed https://github.com/littledan/Segmenter/issues/2 to suggest more convenience

[16:48:24.0000] <rniwa_>
there's a lot of things ICU does for historical reasons. Not sure if this one is intentional and makes sense

[16:50:51.0000] <jyasskin>
rniwa_: We could ask the ICU authors if they'd still do it this way given a chance to break compatibility. Want to write up an issue in the Segmenter repo that we could point them to?

[16:51:25.0000] <rniwa_>
jyasskin: that would be useful.

[16:51:53.0000] <rniwa_>
jyasskin, Domenic: I'd imagine that having one API that counts or iterates characters based on code points and grapheme clusters

[16:52:03.0000] <rniwa_>
jyasskin, Domenic: then another one that goes over word, sentence, line, etc...

[16:52:22.0000] <Domenic>
I mean I think we want to expose all (grapheme, word, etc.) of these to the web. So it's a question of whether the spec contains multiple objects or one. One seems to work pretty well.

[16:52:24.0000] <rniwa_>
jyasskin: Domenic: since I feel like going over each character and going over a word is very different kind of actions

[16:53:09.0000] <rniwa_>
Domenic: we probably want to but there's no chance of interoperability there because of the way Chinese & Japanese use dictionary based heuristics to define word boundaries

[16:53:24.0000] <rniwa_>
Domenic: although such is true already for many Intl features so that may not be an issue

[16:53:25.0000] <Domenic>
rniwa_: interop would be based on ICU dictionaries, wouldn't it?

[16:53:44.0000] <rniwa_>
Domenic: well, ICU dictionary can be of a different size

[16:53:50.0000] <rniwa_>
Domenic: also, not all browsers ship with ICU

[16:53:56.0000] <Domenic>
which ones don't?

[16:54:06.0000] <rniwa_>
Domenic: or rather not all browsers use ICU as their underlying intl system

[16:54:15.0000] <jyasskin>
Edge, right?

[16:54:30.0000] <rniwa_>
Domenic: and even if the browser DID use ICU, there will be differences between ICU versions and of different dictionary size

[16:54:44.0000] <rniwa_>
Domenic: because of the binary size, I believe, Chrome uses a small dictionary size for ICU

[16:54:50.0000] <Domenic>
Sure, if you're not using the latest version, you won't be interoperable with the latest version, that's true.

[16:54:53.0000] <rniwa_>
I believe Chrome*

[16:55:23.0000] <rniwa_>
Domenic: well, what I'm saying is that even within the same version, you can choose a different size of ICU dictionary

[16:55:34.0000] <rniwa_>
Domenic: regardless, ICU isn't a thing the spec can refer to so it's kind of irrelevant

[16:55:52.0000] <Domenic>
Yeah. I guess this just falls into the same pattern as all other Intl features as you said

[16:55:53.0000] <jyasskin>
Yeah, shipping subsets of ICU is a thing. It seems worth sacrificing that level of interoperability so that not every website needs to ship its own subset of ICU.

[16:56:00.0000] <Domenic>
Which are in general interoperable if everyone uses ICU, and otherwise, not so much.

[16:56:29.0000] <rniwa_>
Domenic: well, things are clearly not interoperable between browsers with regards to Chinese & Japanese

[16:56:38.0000] <jyasskin>
On the question of whether grapheme iteration is a different sort of thing from word iteration, I'd rather defer to the experts than try to figure it out ourselves.

[16:57:05.0000] <rniwa_>
jyasskin: so my point was more that Grapheme clusters is more of a Unicode concept that doesn't depend on ICU

[16:57:13.0000] <rniwa_>
even though some browsers may depend on ICU to do it for them

[16:57:38.0000] <rniwa_>
jyasskin: so I felt like maybe having a separate API for things that are clearly interopeable given a specific version of Unicode might make sense

[16:57:54.0000] <rniwa_>
but I don't really have a strong opinion nor have I consulted with my colleagues so it's hard to tell


2016-09-29
[17:47:53.0000] <littledan__>
Bterlson made the same point at the meeting about grapheme breaks being locale-independent

[20:09:29.0000] <duper>
wind 10

[00:15:43.0000] <annevk>
jyasskin: guess you're asleep?

[00:19:00.0000] <annevk>
jyasskin: actually, I thought I had a comment on your proposal, but I don't think I do anymore

[00:34:08.0000] <tobie>
annevk: re OpenEndedDictionary, what's the requirement around keys being unique?

[00:34:44.0000] <annevk>
tobie: how would you create one where they are not?

[00:37:59.0000] <tobie>
annevk: yeah. Let me rephrase that: given you're targeting URL params and HTTP headers, which both allow for multiple values per key, why is a dictionary the right construct?

[00:39:40.0000] <tobie>
annevk: or are you planning something like: dictionary<DOMString or sequence<DOMString>>?

[00:40:50.0000] <annevk>
tobie: the common case is key-value

[00:41:04.0000] <annevk>
tobie: for the uncommon case there's sequence<sequence<ByteString>>

[00:42:19.0000] <annevk>
tobie: I guess we could maybe do (x or sequence<x>), hmm, or for Headers we could allow "," in the value, which we probably need to allow anyway

[00:42:23.0000] <annevk>
tobie: so many options

[00:42:36.0000] <tobie>
annevk: so {"foo": "bar"} or [["foo", "bar"], ["foo", "baz"]] but not {"foo" : ["bar", "baz"]}?

[00:43:03.0000] <annevk>
tobie: that's the status quo

[00:43:27.0000] <annevk>
tobie: although I'm not sure how many implemented sequence<sequence<x>> here

[00:43:59.0000] <Ms2ger>
I think Gecko does

[00:47:06.0000] <tobie>
annevk: It's interesting to see what common JS libraries tend to do here.

[00:47:28.0000] <tobie>
annevk: unsurprisingly, they're super lenient in what they accept.

[00:48:25.0000] <tobie>
annevk: So they'll even accept things like: [{foo: "bar"}, {foo: "baz"}]

[00:50:24.0000] <tobie>
annevk: what's your take on how Web APIs should handle options like that? Does leniency belong in the Web APIs themselves or in JS libraries built on top?

[00:50:41.0000] <tobie>
annevk: I would argue for the former, but—

[01:08:26.0000] <annevk>
tobie: it depends a bit on the tradeoffs involved I suppose

[01:10:10.0000] <annevk>
tobie: in general I'm not opposed, but perf, complexity, extensibility, etc. are also things we need to take into account

[01:17:06.0000] <tobie>
annevk: sure.

[03:14:22.0000] <annevk>
astearns: I looked, and it's filed btw: https://github.com/w3c/uievents/issues/23

[03:14:29.0000] <annevk>
astearns: just ignored for 2+ years

[03:40:14.0000] <MikeSmith>
is Gary not actually working on the UI Events spec any more?

[03:43:23.0000] <Ms2ger>
Has anyone ever really worked on the UI events spec?

[03:47:46.0000] <MikeSmith>
I thought Gary K was working on it at one time actually

[03:48:13.0000] <MikeSmith>
and he was at TPAC so it’s not like he isn’t around

[03:50:16.0000] <annevk>
We discussed UI events at TPAC

[03:50:20.0000] <annevk>
This exact issue even

[03:50:39.0000] <annevk>
It still seemed as new to those involved as it was two years ago

[03:50:44.0000] <annevk>
I'm not really getting my hopes up

[05:55:54.0000] <gsnedders>
I so totally don't understand SVG paths.

[06:10:01.0000] <ondras>
aren't they rather similar to canvas paths?

[06:11:19.0000] <gsnedders>
I don't know. I'm pretty sure I've never used canvas paths :)

[06:13:17.0000] <annevk>
gsnedders: study the WHATWG logos

[06:13:59.0000] <annevk>
gsnedders: it's relatively straightforward once you play around with it a bit

[06:14:10.0000] <ondras>
/me agrees

[06:16:03.0000] <gsnedders>
I think I'm just not understanding how arcs are computed, more than anything else

[06:16:38.0000] <ondras>
arcs are indeed the most complex part of it

[06:16:44.0000] <gsnedders>
and are, sadly, what I need :(

[06:17:29.0000] <ondras>
gsnedders: seen https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#Arcto ?

[06:18:34.0000] <gsnedders>
ondras: yeah

[06:18:42.0000] <ondras>
gsnedders: generally speaking, you define the ellipse whose arc is to be drawn.

[06:19:31.0000] <ondras>
gsnedders: so you have an ellipse, an implied starting point and an end point. an arc is drawn from the starting point to the end point.

[06:19:52.0000] <gsnedders>
and then it's closed by the implied straight line from the starting point to the end point?

[06:20:36.0000] <ondras>
no, no closing

[06:20:45.0000] <ondras>
the "A" command just draws an arc segment

[06:21:15.0000] <gsnedders>
sorry, the fill area is bounded by that line

[06:21:39.0000] <gsnedders>
/me has no idea what the proper terminology is here :)

[06:22:24.0000] <ondras>
well if you fill that shape, than yeah, but I suppose no straight stroke line is drawn?

[06:22:51.0000] <gsnedders>
yeah

[06:25:49.0000] <gsnedders>
what decides the intrinsic width and height of an inline SVG element?

[06:26:44.0000] <annevk>
gsnedders: when inside HTML? CSS

[06:27:25.0000] <gsnedders>
annevk: I guess I mean what does width/height: auto compute to when there's no width/height attributes on the SVG element

[06:28:47.0000] <annevk>
gsnedders: I think it tries to go for widest these days? max-content or so. But best to try

[06:28:57.0000] <annevk>
Used to follow the 300x150 rule

[06:29:42.0000] <gsnedders>
where does the 300x150 rule come from tho?

[06:29:57.0000] <gsnedders>
Some UAs seem to still do this

[06:32:12.0000] <annevk>
gsnedders: replaced elements

[06:32:27.0000] <annevk>
gsnedders: maybe that's still what you have to do if there's no aspect ratio either

[06:32:35.0000] <annevk>
gsnedders: (aspect ratio is derived from viewBox)

[06:32:56.0000] <annevk>
gsnedders: that's very plausible; as you can tell, it's been a while since I played with this

[06:34:38.0000] <gsnedders>
:)

[06:34:43.0000] <gsnedders>
You still have more idea than I!

[07:56:12.0000] <annevk>
jyasskin: https://github.com/whatwg/html/pull/1831#issuecomment-250490825

[07:56:43.0000] <annevk>
tobie: that comment might also be interesting to you, although we should probably not make that part of IDL for now

[07:57:02.0000] <annevk>
jyasskin: I remember you were thinking about this problem

[07:57:09.0000] <annevk>
jyasskin: I was wondering if you had any further thoughts

[07:57:28.0000] <annevk>
jyasskin: it might be time to start an issue for it in whatwg/html or somewhere else and maybe sketch a few things

[07:59:08.0000] <jyasskin>
annevk: Yes. I'd been thinking in terms of named parallel threads, but named parallel event loops make equal sense. The wrinkle I found was that I wanted certain steps to complete totally asynchronously (generally because they're calls out to the OS or another device), while other steps should run on the event loop, so we'll need a way to say that.

[07:59:38.0000] <jyasskin>
HTML seems to have our threading model, so there seems fine for the issue. I'll try to file it today.

[08:02:16.0000] <annevk>
jyasskin: it might actually be beneficial to introduce new terminology for this such as "thread" and "job" (hey JavaScript!)

[08:02:49.0000] <annevk>
jyasskin: that way nobody will get it confused with stuff observable from JavaScript (tasks / microtasks)

[08:03:03.0000] <jyasskin>
Worklets also live in a similar construct, so maybe they have some terminology we can use.

[08:03:07.0000] <annevk>
jyasskin: so yeah, not "job" 😊

[08:03:32.0000] <annevk>
jyasskin: worklets don't really have a concept of a queue I think

[08:04:31.0000] <jyasskin>
annevk: https://drafts.css-houdini.org/worklets/#the-event-loop

[08:05:57.0000] <annevk>
jyasskin: that looks a little weird

[08:06:49.0000] <annevk>
jyasskin: also, microtask is only mentioned once in the document, right there

[08:08:40.0000] <jyasskin>
One of the worklet specs actually has postMessage, but I don't remember which. But yeah, the worklet specs aren't necessarily the right inspiration, just another place to look.

[08:10:03.0000] <jyasskin>
https://github.com/WebAudio/web-audio-api/wiki/AudioWorklet-IDL-Proposal maybe.

[08:12:34.0000] <annevk>
Yeah, Paul mentioned that they wanted postMessage

[08:12:41.0000] <annevk>
But he could never explain how that would work

[08:12:51.0000] <annevk>
Maybe they figured it out by now

[08:14:05.0000] <annevk>
Although that looks like the typical approach of IDL-first-model-later-maybe-never

[08:15:37.0000] <annevk>
jyasskin: anyway, agreed that we should look there too

[08:15:39.0000] <tobie>
annevk: yeah, I might have introduced raciness in the sensor spec because of "in parallel." Here again, some non-normative help section would be useful.

[08:15:46.0000] <annevk>
jyasskin: and maybe tell them to fix a few things

[08:17:14.0000] <annevk>
tobie: makes sense, once there is something to write something non-normative about 😊

[08:17:31.0000] <tobie>
annevk: heh

[08:20:28.0000] <annevk>
jyasskin: but yeah, named threads with a message queue, message passing between those and the event loop world, system calls that return promises?

[08:20:43.0000] <annevk>
jyasskin: and message passing between named threads of course

[08:21:56.0000] <annevk>
jyasskin: can we assume threads last for the lifetime of the system from a spec perspective or do we need to define that too?

[08:22:13.0000] <jyasskin>
Yep, that sounds about right. I might have the system calls be "Asynchronously" blocks, which the main thread waits for, but I'll have to think more about it.

[08:23:15.0000] <annevk>
jyasskin: the system calls could even be sync as long as they're called from a named thread (and you could use a new named thread to make them async from your perspective...)

[08:23:18.0000] <jyasskin>
We might need a way to identify a collection of algorithms, and wait for that collection to complete. I think we don't want folks creating new threads in their algorithms.

[08:24:17.0000] <annevk>
I'm not sure I quite follow that yet, but the names for the threads need to be reserved somehow

[08:26:36.0000] <annevk>
jyasskin: the main way I view this concept of "threads" is a mechanism for us to state invariants

[08:26:43.0000] <annevk>
as a*

[08:27:03.0000] <annevk>
jyasskin: so using many of them is okay, if many if your things can run in parallel

[08:27:23.0000] <annevk>
jyasskin: a UA doesn't have to use as many threads (or threads at all) to implement your algorithm

[08:29:08.0000] <jyasskin>
annevk: We could have my "asynchronously" blocks be "Start a thread to run the following steps, resolving |promise|."

[08:30:26.0000] <annevk>
jyasskin: yeah, having shorthands sounds good

[08:31:11.0000] <annevk>
jyasskin: I'm excited now, this might not even be that hard to define

[08:31:31.0000] <jyasskin>
annevk: Yeah, it's sounding coherent.

[09:00:26.0000] <jyasskin>
https://html.spec.whatwg.org/multipage/infrastructure.html#dom-event-istrusted seems to have lost its data-noexport="", even though that appears in `source`. Did something change in the generation script?

[09:01:37.0000] <annevk>
jyasskin: Domenic dropped noexport from some things recently

[09:01:55.0000] <annevk>
jyasskin: maybe you need to run git pull?

[09:02:11.0000] <jyasskin>
This isn't one of them; the <dfn> in HTML just says that DOM defines it.

[09:02:33.0000] <annevk>
jyasskin: rationale was that noexport was the default

[09:03:03.0000] <annevk>
jyasskin: I think it might have been, but cannot check at the moment

[09:03:17.0000] <jyasskin>
NM, it is one of them. Somehow that's causing Shepherd to think it's exported. TabAtkins

[09:08:32.0000] <Domenic>
I'm surprised {{Event/isTrusted}} could get confused,

[09:08:56.0000] <Domenic>
HTML does not have the appropriate  dfn type or for

[09:09:39.0000] <annevk>
Domenic: maybe logic based on ID?

[09:14:20.0000] <annevk>
TabAtkins: ^^

[09:20:36.0000] <annevk>
TabAtkins: jyasskin: https://heycam.github.io/webidl/#Exposed has an explanation

[09:20:49.0000] <annevk>
Still a bit confused

[09:24:15.0000] <jyasskin>
annevk: I intentionally didn't mention the exact issue in my first tweet because it wasn't about that issue in particular: we should just always make sure it's clear how to fix any error message. Tab wasn't sure from the bugzilla discussion what fix to link to, so he pushed back. "https://heycam.github.io/webidl/#example-eafd180b" is probably sufficient

[09:24:15.0000] <jyasskin>
(with a better id) because it explains to a spec-writer how to decide what to put in the attribute.

[09:26:12.0000] <annevk>
I don't disagree, just unclear why #whatwg was even mentioned or why it was unclear what to suggest

[10:10:42.0000] <Domenic>
I thought of it as flattering. When you have a spec question, this is the place to go ^_^

[10:24:53.0000] <caitp>
even when it's an ecma262 question?

[10:26:24.0000] <gsnedders>
there's normally someone who has a clue here

[10:28:50.0000] <caitp>
usually my questions are actually implementation related, and there isn't anywhere good to ask :(

[10:29:24.0000] <gsnedders>
/me is mostly too far out of the ES game nowadays to be be much use :\

[10:33:18.0000] <annevk>
Domenic: heh

[11:31:31.0000] <Wes666>
evening gents. is there any difference in behavior between Node.textContent and CharacterData.data ?

[11:33:19.0000] <Wes666>
called on a CharacterData object, of course

[11:39:16.0000] <jyasskin>
Wes666: https://dom.spec.whatwg.org/#dom-node-textcontent says no.

[11:39:36.0000] <jyasskin>
Wes666: Also, note that not everyone here is a "gent".

[11:40:02.0000] <jyasskin>
I recommend "folks" instead. :)

[11:40:24.0000] <Wes666>
ah right, it's 2016

[11:40:33.0000] <Wes666>
forgive me :P

[11:41:01.0000] <Wes666>
thank you very much for the help

[11:43:15.0000] <TabAtkins>
annevk: Yeah, it's flattering. ^_^ My problem is that, if an error message says "interfaces need to have an [Exposed=...] extended attribute", spec authors not intimately clued into this subject won't know what to put in there.

[11:44:34.0000] <TabAtkins>
Even that example in WebIDL isn't great - it explains how to interpret different values, but not *why* a given interface is exposed in Window vs Worker.  How should a spec author decide what to put there?

[11:44:45.0000] <TabAtkins>
Right now the answer is "go ask in #whatwg, they'll help you figure it out".

[11:45:15.0000] <jyasskin>
TabAtkins: This probably belongs in a spec design guideline, rather than WebIDL.

[11:45:17.0000] <TabAtkins>
So a paragraph or two of guidance for what kinds of APIs should be exposed in Window vs Worker vs Worklets  would be useful.

[11:45:47.0000] <TabAtkins>
jyasskin: Yes, that's exactly what it is. I don't care if it lives in WebIDL or elsewhere, I just want it somewhere public that I can point to, before I start dropping fatal errors on innocent spec authors.

[11:47:18.0000] <jyasskin>
https://w3ctag.github.io/design-principles/

[11:47:35.0000] <jyasskin>
(Doesn't have it yet, but it's probably the right place.)

[11:48:30.0000] <TabAtkins>
Yeah, that seems appropriate.

[12:47:14.0000] <jyasskin>
TabAtkins: Did something change in Bikeshed that might be causing <h3 dfn-type=interface> to lose the dfn-type when it's generated?

[12:48:29.0000] <jyasskin>
TabAtkins: https://github.com/WebBluetoothCG/web-bluetooth/blob/master/index.bs#L2176 has it, but https://api.csswg.org/bikeshed/?url=https://raw.githubusercontent.com/WebBluetoothCG/web-bluetooth/master/index.bs#bluetoothdevice doesn't.

[12:55:32.0000] <annevk>
TabAtkins: jyasskin: ❤️

[14:21:05.0000] <TabAtkins>
jyasskin: Yes, accidental change where I was assuming a list of selectors was a list of tagnames. Should be fixed now.

[14:21:35.0000] <jyasskin>
Thx

[14:22:38.0000] <TabAtkins>
Turns out W3C HTML is an amazing stress-test for Bikeshed, and I'm trying to cut down on the biggest slow points for them. Did a big refactor of the cleanupHTML function from being 20 or so different applications of "run a selector, loop over results" to just being a single tree-walk that tests each element to see if the cleanup applies.

[14:25:15.0000] <jyasskin>
TabAtkins: If Bikeshed renders W3C HTML in less time than my browser renders html.spec.whatwg.org, you've won. ;)

[14:27:03.0000] <gsnedders>
:)


2016-09-30
[17:05:16.0000] <rniwa>
have we gotten rid of window.find?

[23:37:15.0000] <annevk>
wycats: it's happening https://github.com/whatwg/html/issues/1840

[23:37:42.0000] <annevk>
wycats: you remember bringing this up three years ago?

[00:42:44.0000] <annevk>
jyasskin: I raised a couple Houdini issues around the event loop thing

[00:48:45.0000] <jyasskin>
annevk: Cool.

[01:28:02.0000] <tobie>
heycam|away: any reasons why we have: ReadWriteSetlike →	SetlikeRest in the grammar? http://heycam.github.io/webidl/#prod-ReadWriteSetlike

[01:28:20.0000] <heycam>
/me looks

[01:28:45.0000] <tobie>
Same for http://heycam.github.io/webidl/#prod-ReadWriteMaplike

[01:30:12.0000] <tobie>
Same of AttributeNameKeyword

[01:31:06.0000] <heycam>
tobie: I'm not sure. if you think it's clearer feel free to just use MaplikeRest etc. in its place

[01:31:26.0000] <heycam>
tobie: though if you look at the definition of InterfaceMember maybe it's nicer to read?

[01:31:30.0000] <heycam>
http://heycam.github.io/webidl/#prod-InterfaceMember

[01:31:43.0000] <heycam>
than something with "Rest" in its name

[01:33:36.0000] <tobie>
readability is a good enough reason. :)

[01:33:50.0000] <tobie>
heycam: I'd all it SetLike, though

[01:34:03.0000] <tobie>
s/all/call/

[01:34:15.0000] <heycam>
you mean with a capital L? or without the "Rest"?

[01:34:32.0000] <heycam>
or without the "ReadWrite"

[01:35:16.0000] <tobie>
the latter, sorry.

[01:35:25.0000] <heycam>
as you wish :)

[01:35:41.0000] <tobie>
But I see how that breaks consistency with ReadWriteAttributes.

[01:36:57.0000] <tobie>
heycam: I wanted to know if there was a reasoning behind this. Seems there is. I'll send a PR if I suddenly become strongly opinionated about why it should be simplified.

[01:37:08.0000] <heycam>
tobie: ok

[01:37:33.0000] <tobie>
heycam: thanks for the explanations.

[01:37:44.0000] <heycam>
np

[02:56:39.0000] <annevk>
jyasskin: the other thing with threads and lifetime is that keeping them alive for the duration of the system allows storing things in variables and being available in the next task/message/job/thingy

[02:56:55.0000] <annevk>
jyasskin: e.g., for a shared worker manager thread, that's a necessity

[06:35:22.0000] <annevk>
zcorpan: I think https://github.com/whatwg/html/pull/1790 is good to land now

[06:37:13.0000] <zcorpan>
annevk: ok thanks

[07:40:37.0000] <annevk>
Domenic: https://github.com/whatwg/html/commit/cf0355d7e0e229b98f7fbd51b8c7608010c787f5 regressed setting name / constructor url on the SharedWorkerGlobalScope object

[07:40:47.0000] <annevk>
Domenic: there's basically nothing doing that at the moment

[07:40:56.0000] <annevk>
Domenic: and I'm not sure how to best bring it back

[07:41:30.0000] <annevk>
Domenic: I found this because in https://github.com/whatwg/html/pull/1782 I identified the need for a third field on that object, constructor origin, and couldn't figure out where we'd actually set it

[08:01:28.0000] <kochi>
annevk: thanks for the review, will update the fullscreen PR shortly.

[08:01:51.0000] <annevk>
kochi: ta, seems done now

[08:02:31.0000] <annevk>
kochi: might be able to land it later

[08:03:33.0000] <kochi>
annevk: yeah, not in a hurry but for mental sanity for Friday night.

[08:03:38.0000] <kochi>
:-)

[08:04:07.0000] <annevk>
kochi: oh wow, are you back home?

[08:04:35.0000] <annevk>
kochi: hadn't realized yet that it's kinda late in Tokyo

[08:04:43.0000] <kochi>
annevk: yes, I'm at home :)

[08:04:58.0000] <kochi>
/me is still jet-lagged?

[08:05:18.0000] <annevk>
hehe

[08:06:25.0000] <Ms2ger>
/me idly wonders how you fly from Lisbon to Tokyo

[08:06:48.0000] <jgraham>
On a plane?

[08:07:13.0000] <gsnedders>
yeah, jgraham's answer seems like the right one

[08:07:19.0000] <gsnedders>
I mean I'm sure you can go by airship

[08:07:21.0000] <gsnedders>
but… yeah.

[08:07:26.0000] <gsnedders>
would take a while.

[08:07:41.0000] <Ms2ger>
Oh, I thought attached to a long-distance duck

[08:08:18.0000] <jgraham>
No, you can't fly a duck over china in case it gets turned into crisy pancakes

[08:09:59.0000] <Ms2ger>
Perhaps it would be better to use a flying nun

[08:10:18.0000] <kochi>
btw, I flew back via CDG (Paris).

[08:11:04.0000] <Ms2ger>
I see

[08:34:51.0000] <jyasskin>
annevk: Does the storage need to be associated with the thread, or can we say that the shared worker manager has such-and-such state, including a thread?

[08:54:52.0000] <annevk>
jyasskin: could work too

[08:55:09.0000] <annevk>
jyasskin: would remove need for named threads

[08:55:28.0000] <jyasskin>
annevk: I did realize that we want each variable to live on a particular thread, to avoid races in updating the variables.

[08:56:17.0000] <annevk>
jyasskin: yeah, no cross access

[08:56:33.0000] <jyasskin>
I'd probably want a "bluetooth communication thread" that doesn't have any particular state, but I can just say "The <dfn>bluetooth communication thread</dfn> is a <a>thread</a>."

[08:59:02.0000] <annevk>
Yeah

[08:59:29.0000] <annevk>
Associating state with a thread seems better

[08:59:58.0000] <annevk>
Could make it similar to internal slot dfns of objects

[09:47:16.0000] <wycats>
annevk yes

[10:46:33.0000] <jsbell>
jgraham: is http://hoppipolla.co.uk/410/results.db.gz something you would have generated?

[10:46:48.0000] <jgraham>
jsbell: It is

[10:48:33.0000] <jsbell>
jgraham: do you know what version of Chrome was used?

[10:49:43.0000] <jgraham>
jsbell: The one on my machine at the time I guess

[10:49:50.0000] <jgraham>
It was not generated in a very careful way

[10:50:23.0000] <jgraham>
I currently have Version 53.0.2774.3 dev (64-bit) so something before that

[10:50:42.0000] <jsbell>
jgraham: cool - yeah it looks like "not the current one" based on particular failures, but I wanted to confirm

[10:53:58.0000] <jgraham>
(I don't know how out of date that is or whether my chrome updates broke at some point)

[10:54:32.0000] <jsbell>
53 is current

[12:20:59.0000] <JonathanNeal>
I just noticed that document.querySelectorAll('a').forEach is in Chrome and Safari. When did that happen?

[12:26:16.0000] <TabAtkins>
Dont' know when, but it's defined due to it being iterable in WebIDL: https://dom.spec.whatwg.org/#nodelist https://heycam.github.io/webidl/#idl-iterable

[12:30:30.0000] <JonathanNeal>
That’s pretty interesting. I’ve never seen code leveraging that, polyfills for Firefox, or anything talking about it.

[12:42:15.0000] <gsnedders>
It also conviently avoids all the breakage we saw when we tried to make it have Array.prototype on its prototype chain

[13:09:14.0000] <TabAtkins>
We're unfortunately still missing the ability to map over it, but at least you can easily cast to an Array now - [...document.querySelectorAll("a")].map(...)

[14:30:32.0000] <jyasskin>
Is there any interest in adding a second level of error types to DOMException? e.g. bluetooth.requestDevice() returns a NotFoundError for several conditions that result in the user canceling the chooser. However, a site might want to give the user more help and so might want to know if the user canceled because the system doesn't support bluetooth, there

[14:30:32.0000] <jyasskin>
were no devices, or because they changed their mind.

[14:36:32.0000] <jsbell>
jyasskin: at TPAC we discussed adding .details to error (in webidl it'd be an "any")

[14:36:55.0000] <jsbell>
jyasskin: Domenic was going to follow up on that I think... ?

[14:37:45.0000] <jyasskin>
jsbell: Mhhmm. Would there be guidelines on what details should contain? Or is it just whatever the dispatching spec wants?

[14:37:53.0000] <jsbell>
the latter

[14:41:41.0000] <jyasskin>
'k

[15:07:32.0000] <BMMJJ>
hello

[15:07:36.0000] <BMMJJ>
eveyone

[15:08:01.0000] <BMMJJ>
is this a https://html5.validator.nu help chat ?

[15:13:04.0000] <BMMJJ>
or w3c

[16:34:19.0000] <jyasskin>
Domenic / bz: Is the paragraph at http://heycam.github.io/webidl/#ref-for-dfn-dictionary-member-5 correct? It seems to constrain dictionary member types to disallow "SomeDictionary?".

