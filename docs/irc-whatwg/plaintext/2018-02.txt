2018-02-01
[17:21:36.0000] <karlcow>
annevk, MikeSmith: do you accept lurkers on that meeting? https://github.com/w3c/WebPlatformWG/blob/gh-pages/meetings/18-03-Web-components.md

[17:27:59.0000] <MikeSmith>
annevk: I would think you would be very welcome to attend

[17:28:06.0000] <MikeSmith>
just need to ask kochi probably

[17:28:28.0000] <MikeSmith>
not sure who will be the formal chair for the meeting

[17:30:10.0000] <kochi>
We already invited people from framework developers, so I think anyone is welcome to join.

[17:30:42.0000] <MikeSmith>
cool

[17:31:10.0000] <kochi>
probably what we need is just follow w3c's code of conduct. https://www.w3.org/Consortium/cepc/

[17:31:46.0000] <kochi>
I haven't done setup for registration form kind of thing, for building security badge etc., and catering planning

[17:55:02.0000] <karlcow>
MikeSmith, kochi: thanks!

[17:56:27.0000] <karlcow>
I'm living in Japan. And my interest is more on the side of implementation differences in between browsers (webcompat hat). And I'm happy to stay silent for the full meeting. :)

[19:15:25.0000] <domfarolino>
Should the loading of a environment-matching style sheet requested by a <link> in <body> block the rendering of the page?

[22:48:21.0000] <shout-user501>
hi, over at https://html.spec.whatwg.org/multipage/webappapis.html#handler-onload I see "The following are the event handlers (and their corresponding event handler event types) that must be supported by all HTML elements other than body and frameset elements"

[22:48:51.0000] <MikeSmith>
shout-user501: yeah?

[22:48:52.0000] <shout-user501>
included in this list is onload - but I thought onload was only for certain elements?

[22:49:04.0000] <shout-user501>
see e.g. https://stackoverflow.com/questions/4057236/how-to-add-onload-event-to-a-div-element

[22:54:03.0000] <MikeSmith>
shout-user501: I guess it comes down to what “must be supported” means there

[22:54:37.0000] <MikeSmith>
that statement isn’t actually requiring any processing behavior

[22:55:46.0000] <shout-user501>
so it means supported as in adding it doesn't break anything? is this type of language common in the spec? admittedly I'm not well-versed in it

[22:57:07.0000] <MikeSmith>
adding onload to an element that the load event is never fired at isn’t going to break anything

[22:57:17.0000] <MikeSmith>
it’s just never going to have any effect

[22:57:56.0000] <MikeSmith>
as far as that type of language being common, not really

[22:58:49.0000] <MikeSmith>
arguably it’s a deficiency in the spec that it doesn’t make unambiguous what it means by “must be supported by all HTML elements” there

[23:02:34.0000] <shout-user501>
I was kind of looking for where the spec defines how it works precisely and which elements it applies to, but the section I found which describes that says it is "non-normative" https://html.spec.whatwg.org/multipage/indices.html#events-2

[23:03:06.0000] <shout-user501>
nvm, I'm looking at a single page of the multipage version

[23:05:37.0000] <MikeSmith>
OK

[23:06:40.0000] <MikeSmith>
yeah, for the elements the load event actuall gets fired at, the spec explicitly states in each case, “Fire an event named "load"...”

[23:07:01.0000] <MikeSmith>
or some wording close to that

[23:07:41.0000] <shout-user501>
nice, i see that now :)

[23:11:32.0000] <shout-user501>
I noticed the comment "While these attributes apply to all elements, they are not useful on all elements. For example, only media elements will ever receive a volumechange event fired by the user agent" at one spot - aware of a good list which matches the events to the relevant elements?

[23:12:15.0000] <shout-user501>
took a look at MDN and it's not clear that they do - I guess maybe this is out of scope for the spec itself but it seems like it could be a handy reference thing for spec folks too

[23:15:30.0000] <annevk>
shout-user501: onload on body is special

[23:15:39.0000] <annevk>
shout-user501: it's actually tied to the Window object, iirc

[23:15:56.0000] <shout-user501>
yep, it's also special on embed and various other tags too

[23:16:14.0000] <shout-user501>
MikeSmith helped me out a fair bit already on that

[23:16:19.0000] <annevk>
shout-user501: I don't think it's special on embed?

[23:16:57.0000] <shout-user501>
"fired at an element containing a resource (e.g. img, embed) when its resource has finished loading"

[23:17:58.0000] <annevk>
That doesn't make the attribute special

[23:18:11.0000] <shout-user501>
seems to be fired on link, style, etc

[23:18:20.0000] <shout-user501>
well it's only fired on a small handful of elements, so it's special

[23:18:25.0000] <annevk>
Sure, but fired on is a different concept from the attribute

[23:18:40.0000] <annevk>
They're not really related

[23:18:51.0000] <shout-user501>
for me, if it's useful at all that makes it special

[23:18:55.0000] <annevk>
You can manually fire events of any type to anything that's an event target

[23:19:01.0000] <shout-user501>
since it technically is "supported" on all HTML elements

[23:19:14.0000] <shout-user501>
it's fired by the browser on a very small handful of elements

[23:19:24.0000] <annevk>
The attribute is; but that doesn't mean the event is dispatched by the UA on all of them

[23:19:47.0000] <shout-user501>
it is dispatched by the UA for embed and link tho, as well as body

[23:19:59.0000] <annevk>
No, I don't think it's dispatched on body

[23:20:19.0000] <annevk>
It's dispatched on the global, and the onload attribute on body gets actually registered there

[23:20:27.0000] <annevk>
That's why _that_ attribute is special

[23:21:17.0000] <shout-user501>
hmm, OK - ultimately the word special doesn't have much meaning anyway..

[23:21:47.0000] <annevk>
Well, it has different behavior from what the attribute normally has

[23:21:55.0000] <shout-user501>
I think you might be coming at it from a spec / implementation perspective, whereas I am coming at it from an app development perspective

[23:21:58.0000] <annevk>
Normally it just registers a listener on the object it's associated with

[23:22:14.0000] <annevk>
I'm not sure how that matters

[23:22:42.0000] <shout-user501>
well, as an app developer it is fired when the resource loads - and the body is similar to an embed in that respect

[23:22:52.0000] <shout-user501>
not really special at all, just different types of resources

[23:23:26.0000] <shout-user501>
from a technical perspective, the fact that it ties into Window makes it seem more special?

[23:23:36.0000] <annevk>
Again, you're conflating events and event handlers

[23:30:23.0000] <shout-user501>
the UA does fire certain events which can only be captured against certain event handlers, right? I mean sure I can fire it in my app code but that seems like an antipattern

[23:31:23.0000] <shout-user501>
long-run I'd be personally be happy to see a system for warnings or errors on something like that

[23:32:38.0000] <shout-user501>
the non-normative explanation of load says "Fired at the Window when the document has finished loading; fired at an element containing a resource (e.g. img, embed) when its resource has finished loading"

[23:32:55.0000] <shout-user501>
to me those use cases seem quite similar, but you're saying they are conceptually quite differnet?

[23:34:38.0000] <shout-user501>
maybe you mean it's different because you can listen with window.onload as well as the body attribute

[23:35:13.0000] <annevk>
I'm saying that event handlers and events are different. E.g., if you registered an event listener on body for load using addEventListener() it would never trigger since the event isn't dispatched there. The event handler (onload) would trigger since it actually ends up registering a listener on window.

[23:36:06.0000] <annevk>
That's what makes that event handler special, whereas the others are pretty normal. You're right some objects are special in that the UA dispatches events on them, but that's not always closely correlated to the event handlers.

[23:36:58.0000] <shout-user501>
oh, interesting, that seems a bit unfortunately confusing

[23:56:40.0000] <annevk>
MikeSmith: I think we might have been measuring the wrong thing

[23:56:51.0000] <MikeSmith>
oh?

[23:56:57.0000] <annevk>
MikeSmith: you've only been looking at parents, not nearest ancestor article, nav, section, aside

[23:57:06.0000] <annevk>
MikeSmith: unless the caption is wrong

[23:58:10.0000] <annevk>
MikeSmith: either way, it'd be good to look through a sample of those multiple <h1>s

[00:08:21.0000] <MikeSmith>
annevk: right yeah I can change it to look at ancestors

[00:15:29.0000] <annevk>
MikeSmith: cool; I hope those numbers would line up a bit more with the 3% usage

[00:16:00.0000] <annevk>
MikeSmith: although on the other hand if they don't the change would not make much of an impact and is therefore fairly safe...

[03:26:36.0000] <annevk>
/me missed that Ms2ger eventually pushed more tests

[03:26:58.0000] <Ms2ger>
So, yeah, r? :)

[03:27:31.0000] <annevk>
Yeah looking now, though might take a while since I'm getting hungry

[03:59:25.0000] <annevk>
Ms2ger: hmm so what if a Blob is a WebM resource?

[03:59:39.0000] <annevk>
The specification for createImageBitmap() was really quite bad

[03:59:46.0000] <annevk>
Well, still is

[04:00:14.0000] <Ms2ger>
Per spec, it's not an image, so not supported, I guess

[04:00:45.0000] <annevk>
I guess that's fine

[04:02:22.0000] <annevk>
Ms2ger: although Safari added MPEG support to <img> so...

[04:02:35.0000] <annevk>
Without really defining what that means...

[04:02:40.0000] <Ms2ger>
I donno, man

[05:00:48.0000] <annevk>
surma: are you interested in creating a better test suite for structured cloning?

[05:01:18.0000] <annevk>
/me is looking at the current mess

[05:36:26.0000] <surma>
annevk: Seems like that might be in order, huh?

[05:41:05.0000] <annevk>
surma: yeah, we can then also add tests for Symbol throwing

[05:41:25.0000] <annevk>
surma: there's tests in webmessaging/ and in html/ in various folders

[05:41:52.0000] <annevk>
surma: html/browsers/history/the-history-interface and html/infrastructure/safe-passing-of-structured-data

[05:42:10.0000] <annevk>
surma: also workers/semantics/structured-clone

[05:44:08.0000] <annevk>
surma: my thinking is that we'd want a JavaScript resource that sets up various test scenarios and expectations and that's imported into various wrappers for the different APIs

[05:44:13.0000] <surma>
annevk: Alright. I’ll take a stab. Should I create a re-usable set of tests than can be used for all methods that use structured(De)Serialize under the hood?

[05:44:16.0000] <surma>
Ha!

[05:44:22.0000] <surma>
annevk: sg :)

[05:44:41.0000] <annevk>
much appreciated \o/

[05:50:27.0000] <annevk>
surma: FWIW, stuff that'd be nice to be able to test include things like postMessage(Symbol(), "*", [new ArrayBuffer(2)]) throwing and not detaching the buffer (want to be able to test the order things happen in)

[05:51:38.0000] <surma>
annevk: Ah good one.

[05:52:01.0000] <surma>
I’ll go through the spec and see what I come up with :)

[05:52:34.0000] <annevk>
cool; once you have a framework I'm happy to help out filling it out for various objects

[08:29:26.0000] <Domenic>
shout-user501: another useful thing is that you can do e.g. body.ondragexit = ... and catch bubbled dragexit events. That is part of why those are defined on all elements.

[09:50:49.0000] <annevk>
Domenic: are records perhaps always passed by reference?

[09:50:57.0000] <annevk>
Domenic: in that case my pointer comment can be disregarded

[09:51:25.0000] <Domenic>
annevk: yeah I think everything in specs is, generally. I am going to check the PR soon, but my impression seeing it in my email was that it's not an issue.

[09:51:49.0000] <annevk>
kk

[09:52:10.0000] <annevk>
if this works it'd be a pretty sweet simplification

[10:14:23.0000] <annevk>
HTML has an interesting defense against -0:

[10:14:26.0000] <annevk>
> If sign is "positive", return value, otherwise return the result of subtracting value from zero.

[10:14:57.0000] <annevk>
/me is trying to find +0/-0 issues

[10:37:42.0000] <annevk>
Domenic: as I update https://github.com/whatwg/html/pull/3437, shall I keep it two distinct commits?

[10:37:48.0000] <annevk>
Domenic: or would you prefer a fixup commit?

[10:38:02.0000] <annevk>
Domenic: (I might not get to doing it until tomorrow, but would like to know how)

[10:38:02.0000] <Domenic>
Oh I didn't notice the two commits hmm

[10:38:53.0000] <Domenic>
annevk: can you remove the placeholder without the other change, or does it depend on the bugfix first?

[10:39:16.0000] <annevk>
Domenic: I think it can be done separately

[10:39:35.0000] <Domenic>
Hmm OK, then separate seems good. I'll try to understand better how that's possible...

[10:39:51.0000] <Domenic>
Maybe reorder so that goes first, if it's not extra work.

[10:41:42.0000] <annevk>
Domenic: let me try it in a new PR

[10:41:50.0000] <Domenic>
awesome

[10:41:51.0000] <annevk>
I have a bit of time

[10:42:01.0000] <Domenic>
/me keeps banging my head against is=""

[10:42:12.0000] <annevk>
I do not envy you

[10:42:23.0000] <Mek>
hmm, why does `bikeshed update` claim local data is already up-to-date, while showing me a timestamp from 3 days ago... did really nothing change between now and then?

[11:30:26.0000] <Mek>
hmm, DOM defines a Document's URL as being a URL record. Which would mean that if it's a blob: URL the url would contain that blob as its object, which from reading the spec means that for example location.reload() should work on a document created from a blob URL even after the blob URL is revoked (since it just passes the already parsed URL on to navigate/fetch...)

[11:30:56.0000] <Mek>
I wonder if any browser actually implements it like that...

[11:53:57.0000] <annevk>
Domenic: if instead of uninitialized value we use an empty record? Would that work? How is it different?

[11:55:40.0000] <Domenic>
annevk: I don't think so? The issue is you're changing only what memory[transferable] points to. But lots of other places, inside _serialized_ now point to the placeholder/uninitialized value, which don't get updated.

[11:56:22.0000] <Domenic>
annevk: I guess if you set it to an empty record and then instead of creating dataHolder, just updated all the fields of it, that would work

[11:56:28.0000] <Domenic>
Although records traditionally have a more fixed set of fields

[11:58:03.0000] <annevk>
Domenic: we already violate that with transfer steps

[11:58:34.0000] <annevk>
Domenic: although we could fix that

[11:58:36.0000] <Domenic>
No I mean once you create a record you don't change its fields

[11:58:47.0000] <Domenic>
Oh, yeah, we do

[11:59:39.0000] <annevk>
Domenic: I have an idea of how to fix both, but breaks downstream transferables if any

[11:59:50.0000] <Domenic>
Hmm

[11:59:56.0000] <Domenic>
Unsure if worth it, at least for transfer steps

[12:09:23.0000] <annevk>
Ok, we can consider that separately then

[12:11:16.0000] <Domenic>
I think the placeholder thing is not so bad, now that it's all defined in terms of lists and records at least.

[12:11:37.0000] <Domenic>
It was bad when it was within a graph of JS objects; it was like, how do you traverse such a graph? Does it trigger getters? Ugh. But now it makes sense.

[12:12:01.0000] <Domenic>
That said something like discussed above is probably more efficient, in the event implementers are anywhere close to verbatim following our algorithms.

[15:05:56.0000] <TabAtkins>
Mek: Because my computer at work auto-restarted while I'm in Sydney, and that's what runs the update script. I should be able to run it manually today.

[15:06:13.0000] <Mek>
TabAtkins: ah, okay, thanks

[15:52:54.0000] <TabAtkins>
Mek: Ran it manually now.


2018-02-02
[16:31:55.0000] <jsbell>
Ah, that's why I haven't seen TabAtkins around recently. :)

[16:34:22.0000] <TabAtkins>
jsbell: Also: you're in the SF office ^_^

[16:34:26.0000] <TabAtkins>
(I'll be there on Tuesday.)

[16:35:22.0000] <jsbell>
In other news, wrote a content script extension to work around https://github.com/whatwg/meta/issues/10 and now my tabs look ossm

[16:39:00.0000] <Domenic>
Haha, nice. annevk zcorpan, still holding firm on no PNG favicons for specs?

[16:47:46.0000] <MikeSmith>
so I just learned yesterday that https://developer.microsoft.com/en-us/microsoft-edge/platform/usage/ exists

[16:48:50.0000] <MikeSmith>
data showing percentage of use CSS properties and values

[16:50:02.0000] <MikeSmith>
e.g., https://developer.microsoft.com/en-us/microsoft-edge/platform/usage/css/--var/ shows CSS variables used in 0.559% of documents, and shows that vast majority of usage is for pixel values and colors

[16:50:48.0000] <Domenic>
Oh yeah I remember that from when it launched

[16:51:00.0000] <Domenic>
I wonder how often they update it... July 2017 last update

[16:52:09.0000] <Domenic>
I wonder what a Bing-powered scan means paired with "Contains data from: Edge, Chrome, Firefox"

[16:52:40.0000] <MikeSmith>
right, I was confused by that too

[16:54:36.0000] <MikeSmith>
in other news, one of of the use counters I added to the HTML checker this week was for the style attribute

[16:54:56.0000] <MikeSmith>
disappointing to find that 65% of documents checked are using it

[16:55:04.0000] <Domenic>
It's the new hotness

[16:55:12.0000] <Domenic>
React and inline styles are best friends

[16:55:19.0000] <MikeSmith>
ah

[16:55:31.0000] <MikeSmith>
wish they wouldn’t do that

[16:56:21.0000] <MikeSmith>
but oh well. I guess it means I should have the checker report non-conforming CSS in style-attribute values

[16:56:26.0000] <MikeSmith>
along with style element

[18:28:01.0000] <Domenic>
Oooh

[23:40:53.0000] <MikeSmith>
annevk: log of URLs for documents that have multiple h1 without an section/article/aside/nav ancestor: https://gist.githubusercontent.com/sideshowbarker/8284404/raw/9220fb7b5a1befbabc04dc27943a5255cdfecc3e/h1.log

[23:42:25.0000] <MikeSmith>
youtube.com is there but when I checked the source I notice the h1s are <template> descendants. The counter/logger  should be ignoring those, but I haven’t updated it to do that yet

[23:42:32.0000] <annevk>
Domenic: I feel like it'd just remove all incentive to ever fix it

[23:43:27.0000] <MikeSmith>
and current stats out of 40703

[23:43:35.0000] <MikeSmith>
...documents checked:

[23:43:41.0000] <MikeSmith>
<h1> multiple found	4093	0.100558

[23:43:41.0000] <MikeSmith>
<h1> multiple with <section> ancestor found	1024	0.025158

[23:43:41.0000] <MikeSmith>
<h1> multiple with <article> ancestor found	903	0.022185

[23:43:41.0000] <MikeSmith>
<h1> multiple with <aside> ancestor found	121	0.002973

[23:43:41.0000] <MikeSmith>
<h1> multiple with <nav> ancestor found	195	0.004791

[23:44:03.0000] <MikeSmith>
https://validator.w3.org/nu/stats.html

[23:45:36.0000] <MikeSmith>
= 10% of docs have multiple h1s but only ~2% have multiple h1s with section or article ancestors

[23:46:45.0000] <MikeSmith>
looking at the documents in the logs, you’ll see there are just a lot of lot of them that instead of <section> just use nested <div>s with h1 at arbitrary levels

[23:48:31.0000] <annevk>
MikeSmith: okay, so those documents are perhaps bad either way, unless hidden is used I guess

[23:49:02.0000] <MikeSmith>
yeah I didn’t check to see if they were hidden or not

[23:49:32.0000] <MikeSmith>
but from looking through the documents in those logs, I think in most cases they are not

[23:50:12.0000] <MikeSmith>
oh you will find some facebook URLs in that log

[23:50:43.0000] <MikeSmith>
oh not in that one, but I did see it get logged in another instance

[23:50:54.0000] <MikeSmith>
https://www.facebook.com/events/222607394963984/

[23:53:36.0000] <annevk>
"seo_h1_tag"

[01:08:34.0000] <annevk>
MikeSmith: thanks a lot for these btw

[01:08:54.0000] <annevk>
MikeSmith: you planning on posting in the issue too?

[01:32:29.0000] <MikeSmith>
annevk: yeah I will

[07:45:29.0000] <annevk>
Domenic: I particularly like that is="" becomes syntax and less an enshrined part of the model, but I have a hard time articulating why to myself

[08:03:24.0000] <Domenic>
annevk: it's always been a bit dubious as an attribute since dynamic changes to it are not respected. HTML has several of those already, e.g. nonce="" and manifest="", but yeah

[08:27:02.0000] <Domenic>
Does anyone remember that page that was like the same code but was HTML and an image and some other thing at the same time?

[08:28:42.0000] <annevk>
Domenic: http://lcamtuf.coredump.cx/squirrel/

[08:29:02.0000] <Domenic>
nice

[08:29:39.0000] <annevk>
I wonder if that person now refuses to go HTTPS because of the favicon joke

[08:30:13.0000] <smaug____>
annevk: you might recall. https://fullscreen.spec.whatwg.org/#fullscreen-element-ready-check doesn't have check for ancestors

[08:30:44.0000] <smaug____>
but looks like in Gecko we check that if some element is already in fullscreen, the new one needs to be descendant of that

[08:30:53.0000] <smaug____>
IIRC that was in the spec at some point

[08:32:59.0000] <smaug____>
I wonder why the spec was changed

[08:38:53.0000] <Domenic>
"soon to include essential squirrel facts" I wonder how long it's said that

[09:22:54.0000] <annevk>
smaug____: xidorn has been involved in most changes

[09:23:16.0000] <annevk>
smaug____: I can git log grep later I suppose, busy atm

[09:23:17.0000] <smaug____>
sure. It is just probably too late for him atm

[09:57:19.0000] <annevk>
smaug____: https://github.com/whatwg/fullscreen/issues/45 has a bunch of related links

[09:57:36.0000] <annevk>
smaug____: basically a lot of it got redesigned

[09:57:46.0000] <smaug____>
I see

[09:57:47.0000] <smaug____>
I wonder why

[09:57:50.0000] <smaug____>
I'll read

[09:58:04.0000] <smaug____>
thanks

[14:04:37.0000] <xidorn>
smaug____: there was no point to keep that restriction at that point

[14:04:51.0000] <smaug____>
aha

[14:04:57.0000] <smaug____>
xidorn: Gecko just have that still

[14:05:12.0000] <smaug____>
I kept it while adding support for shadow dom

[14:05:24.0000] <xidorn>
smaug____: we are quite behind at the moment

[14:05:31.0000] <smaug____>
yup, noticed

[14:05:44.0000] <xidorn>
smaug____: though others are more behind :)

[14:05:50.0000] <smaug____>
aha

[14:06:29.0000] <xidorn>
smaug____: but because of the way we want to dispatch the event, we may have to reintroduce that restriction

[14:06:40.0000] <smaug____>
hmm

[14:07:07.0000] <xidorn>
smaug____: what's the problem with that restriction?

[14:07:24.0000] <smaug____>
xidorn: I guess no problem. I was just wondering what to do with it

[14:07:28.0000] <smaug____>
and decided to keep it

[14:07:38.0000] <smaug____>
I was looking at the spec and didn't see the restriction there

[14:08:05.0000] <xidorn>
smaug____: ok, we should be adding it back at some point

[14:08:20.0000] <smaug____>
so, just the generic I-know-I-am-writing-code-against-the-spec worry

[14:08:29.0000] <xidorn>
smaug____: sorry for the confusion

[14:08:54.0000] <smaug____>
np, specs change

[14:09:32.0000] <xidorn>
smaug____: I involved most changes but didn't get much time to follow up in our impl :/

[14:12:29.0000] <smaug____>
xidorn: one could of course ask why the spec was changed

[14:12:47.0000] <smaug____>
since that made at least some implementations behave against the spec

[14:13:00.0000] <smaug____>
and increasing the risk that implementations do different things

[14:13:04.0000] <smaug____>
but oh well

[14:13:09.0000] <smaug____>
nothing special here

[14:13:26.0000] <xidorn>
smaug____: that actually make all impls behave against...

[14:14:06.0000] <smaug____>
right, but then some implementation might start to follow the spec and pages relying on that behavior...

[14:14:16.0000] <smaug____>
and other impls would show up as broken

[14:14:52.0000] <xidorn>
smaug____: I'm not sure how to balance the risk with the ideal design forward

[14:15:21.0000] <smaug____>
it is hard

[14:19:06.0000] <xidorn>
smaug____: anyway, that restriction is expected to back, and the current spec is kind of a middle point between gecko's impl and webkit/blink's impl

[14:19:45.0000] <xidorn>
smaug____: (with some part ahead of both)

[14:20:51.0000] <xidorn>
smaug____: and foolip is trying to make blink's impl mostly on par with gecko's so we can try shipping unprefixed api coordinately

[14:21:54.0000] <xidorn>
there are some changes I need to do on gecko though...

[14:22:29.0000] <smaug____>
ok

[14:22:43.0000] <xidorn>
(actually this makes me miss the w3c level way for defining features)

[14:23:37.0000] <xidorn>
(it would be good to move the part we are not going to implement soonish into the next level, but we don't have such a place to put it)


2018-02-03
[17:07:52.0000] <xidorn>
annevk: is there any convention for naming a helper algorithm invoked before doing something or after doing something?

[21:35:22.0000] <annevk>
xidorn: don’t think so, if I understand the question


2018-02-04
[11:05:31.0000] <Domenic>
annevk: ping on https://github.com/whatwg/xhr/issues/157


2018-02-05
[00:00:01.0000] <annevk>
Domenic: yeah, I haven't really gotten review for any of the XHR fixes or the corresponding tests so I just let it go for a bit

[00:00:17.0000] <annevk>
Domenic: gonna be away for roughly two weeks so not gonna happen now either

[00:06:31.0000] <annevk>
The fact that opener and noopener are actually quite unrelated is bothersome and part of the reason why I wasted a ton of time trying to make them a similar thing while that was never a realistic option

[00:07:22.0000] <annevk>
noopener basically means open a new top-level browsing context that's not an auxiliary browsing context

[00:07:53.0000] <annevk>
And opener is a thing that many browsing context's WindowProxy's [[Window]] can have, due to targeted navigation...

[00:08:23.0000] <annevk>
We should have called noopener "fresh" or "isolated" or some such

[00:27:58.0000] <MikeSmith>
hsivonen: wonder if you have time to review https://github.com/validator/htmlparser/pull/5

[01:12:38.0000] <justJanne>
By the way, on the topic of punycode (which was semi-limited due to known issues in some browsers), I've found a good example case of flüge.de. The site has no alternative domain to reach it, advertises as flüge.de, and all ascii domains that might be reasonable alternatives, e.g. fluege.de, are owned by competitors. And showing xn--flge-1ra.de (sorry if I typo'd, this is from memory) in the URL bar obviously just increases the risk for

[01:12:39.0000] <justJanne>
phishing (as a user won't be able to distinguish that site from e.g. xn--flge-2ra.de, or whatever)

[01:12:50.0000] <justJanne>
Just in case an example is needed for punycode discussions next time

[02:03:55.0000] <annevk>
foolip: could you take a look at https://github.com/whatwg/html/issues/2636?

[02:27:00.0000] <kochi>
annevk: related to https://github.com/whatwg/html/issues/56#issuecomment-362517302 the other day I tried to find the definition of :defined() and ended up finding it in the HTML spec (prior to that I searched CSS selectors and other CSS specs)

[02:33:08.0000] <annevk>
kochi: https://github.com/w3c/csswg-drafts/issues/2258

[02:36:14.0000] <kochi>
annevk: ah, you already raised the concern clearly.

[02:37:49.0000] <kochi>
The other complaint is that "defined" is quite search-unfriendly :)

[02:38:37.0000] <kochi>
You can find "defined" in almost all specs, while you can only find ":defined" in the HTML spec :-P

[02:39:47.0000] <kochi>
If ":defined()" is fine to be specified in the HTML spec, then e.g. "::slotted()" can be defined in the DOM spec.

[02:41:20.0000] <kochi>
IMHO all these pseudo classes and elements should be defined in the CSS Selectors spec.

[02:43:50.0000] <annevk>
As long as things are defined it's fine with me, but a registry of sorts would be nice

[03:11:30.0000] <kochi>
yeah, indeed.

[07:29:19.0000] <annevk>
hsivonen: https://github.com/whatwg/html/pull/2056

[08:05:59.0000] <Domenic>
annevk: status on https://github.com/whatwg/html/pull/3383 ? "do not merge yet" why?

[08:11:10.0000] <annevk>
Domenic: I was thinking of grouping it with any outline changes to hgroup, if any

[08:11:24.0000] <Domenic>
Hmm OK, seems like it could be done incrementally

[08:11:47.0000] <annevk>
Domenic: that's fine too; I wasn't sure if we'd keep hgroup around so changing it and then removing it seemed a little weird

[08:15:53.0000] <hsivonen>
annevk: looking

[08:33:23.0000] <hsivonen>
annevk: commented

[08:40:02.0000] <jyasskin>
kochi/annevk: Check out https://drafts.csswg.org/indexes/#selectors for that registry. It sometimes falls out of sync, but it's right today.

[08:44:52.0000] <annevk>
jyasskin: pretty cool

[15:07:58.0000] <kochi>
jyasskin: thanks for the pointer!


2018-02-06
[01:49:23.0000] <mounir>
in which spec are window.{inner,outer}{Width,Height} defined?

[01:51:33.0000] <kochi>
https://drafts.csswg.org/cssom-view/#dom-window-innerwidth

[01:52:05.0000] <kochi>
Usually for the kind of question I use MDN "Specification" section.

[01:52:11.0000] <kochi>
https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth

[01:53:42.0000] <mounir>
kochi: thanks :)

[10:10:54.0000] <wanderview>
Domenic: does the promise spec say anything about firing resolve/reject callback when the global that owns the promise has been detached?  trying to figure out if this WPT test is correct or not: https://searchfox.org/mozilla-central/source/testing/web-platform/tests/service-workers/service-worker/detached-context.https.html#44-46

[10:12:33.0000] <wanderview>
firefox does not fire the callbacks in that case... but I guess chrome does since the WPT was upstreamed from chrome

[10:13:15.0000] <Domenic>
wanderview: long standing contentious issue, let me find it... basically I think it should be OK, bz doesn't

[10:13:38.0000] <wanderview>
it would be nice if this test didn't timeout without that contentious spec issue

[10:17:58.0000] <wanderview>
I guess I asked matt to land the test https://github.com/w3c/ServiceWorker/issues/1221

[11:03:20.0000] <jugglinmike>
wanderview: Domenic https://github.com/w3c/web-platform-tests/pull/5738 & https://github.com/whatwg/html/issues/2621

[11:04:06.0000] <wanderview>
jugglinmike: thanks.. bz pointed me at that issue as well... I updated the service worker one to point at it

[11:04:31.0000] <jugglinmike>
ah, yeah over in #content


2018-02-07
[01:29:46.0000] <teoe>
The browser should have a feature to refresh a image and bypass cache. The frontend developers are more or less "hacking" the feature but it's really ugly espe\cially with single page applications with models.  Just look at this sad discussion: https://stackoverflow.com/questions/1077041/refresh-image-with-a-new-one-at-the-same-url   Even worse when using eTAGS it works on one computer and not on the other (maybe because one disabled we

[01:30:51.0000] <teoe>
do we need a hack that has a nickname 'cachebreaker' in 2018 ?

[10:15:33.0000] <railgun>
do I need to sign the participant agreement if I want to contribute to whatwg?

[11:25:08.0000] <Domenic>
railgun: for submitting pull requests, yes, you or your company (if applicable) need to sign

[13:02:54.0000] <railgun>
Domenic: I'm getting 404s for the css at https://participate.whatwg.org

[13:03:19.0000] <railgun>
screenshot here https://i.imgur.com/aTS4fi1.jpg

[13:03:26.0000] <Domenic>
railgun: oh dear, thank you

[13:05:25.0000] <railgun>
np but it was working a few days ago iirc

[13:05:31.0000] <Domenic>
Ugh... the auto-deploy seems quite broken...

[13:06:40.0000] <railgun>
what happened?

[13:07:11.0000] <Domenic>
Two things... first, it tried to deploy a pull request, which was not ready to be merged (it referenced CSS that didn't exist yet on another site)

[13:07:28.0000] <Domenic>
Second, when I tried to do a re-deploy of master, for some reason that didn't work, which I still don't understand

[13:07:30.0000] <Domenic>
But it's better now

[13:11:13.0000] <Domenic>
Thanks for notifying us :)

[13:11:52.0000] <railgun>
yeah it works now

[13:12:06.0000] <railgun>
glad I could help

[13:19:51.0000] <railgun>
Domenic: what is the location data used for?

[13:20:29.0000] <Domenic>
railgun: I believe lawyers are more comfortable with people signing things when they provide location data. It is stored privately, though.

[13:38:50.0000] <railgun>
Done. Do you mind if I do two first issues instead of one? I already tried #3426 but I really want #3441 to be my first issue instead since it involves working with the actual tags

[13:40:04.0000] <railgun>
I need some help with #3441 though (I'm not sure what exactly to put in the dt/dd tags)

[14:46:05.0000] <Domenic>
No problem with doing more than one good first issue :). Feel free to ask in the thread for #3441 for more details


2018-02-08
[04:02:15.0000] <tobie>
annevk: what does the "w(...)" stand for here: https://github.com/heycam/webidl/pull/517#issuecomment-361855121

[04:10:59.0000] <Domenic>
tobie: it stands for "console.log"; it's the syntax used in http://software.hixie.ch/utilities/js/live-dom-viewer/

[04:11:15.0000] <Domenic>
Hmm so am I reading right that plans to use rust-url in Gecko have been abandoned? /cc nox

[04:23:28.0000] <tobie>
Domenic: ty

[04:51:55.0000] <nox>
Domenic: Didn’t hear about that.

[04:52:15.0000] <Domenic>
nox: https://bugzilla.mozilla.org/show_bug.cgi?id=url-oxidation

[04:53:55.0000] <nox>
There is still MozURL.

[08:55:15.0000] <Domenic>
How did Bikeshed figure out that it was safe to turn my ' into a ’ inside a code example? It was safe because it was inside a JS comment... is it really that smart?

[08:55:31.0000] <Domenic>
Not complaining, just impressed/confused

[09:24:28.0000] <railgun>
Domenic: apologies for taking the question seriously, but here are the revelant bits (I want to contribute to Bikeshed as well so this was a fun exercise for me)

[09:24:54.0000] <railgun>
fixTypography: https://i.imgur.com/Gf3hSrh.jpg gets called in fixText here: https://i.imgur.com/lLVIxSl.jpg

[09:27:15.0000] <railgun>
not sure where to go from here though (does the regex handle it or something in fixText?)

[09:35:22.0000] <railgun>
unrelated, but is there a reason why pages like https://html.spec.whatwg.org/dev/sections.html#the-nav-element don't have syntax highlighting?

[09:44:34.0000] <Domenic>
Yeah, HTML uses a different build toolchain :-/. MikeSmith has a patch ready to add syntax highlighting but I think it's waiting on some integration work from TabAtkins?

[09:44:47.0000] <TabAtkins>
Argh, yes, it's waiting on me. :(

[09:47:20.0000] <railgun>
oh hey TabAtkins thanks for creating Bikeshed!

[09:48:55.0000] <TabAtkins>
Domenic: Re smartquote, no, it's not actually that smart. But it does avoid doing the fix on word-ending apostrophes, so it won't catch programming-related quote usage accidentally.

[09:49:17.0000] <Domenic>
hmm i see

[09:49:20.0000] <TabAtkins>
railgun: Welcome. ^_^ I did it for myself, and just got lucky that so many other people needed a better toolchain for this stuff too. ^_^

[09:49:37.0000] <Domenic>
So it's not safe from a hypothetical language that has some literal syntax like 'foo'u8 or similar

[09:49:40.0000] <TabAtkins>
Domenic: It's super dumb https://github.com/tabatkins/bikeshed/blob/master/bikeshed/htmlhelpers.py#L596

[09:49:40.0000] <TabAtkins>
yeah

[09:51:26.0000] <TabAtkins>
I'm not sure why I'm doing this over the text before parsing it, tho. All of these transforms would work just fine over the post-parsing text, and then I could avoid code/pre (or be super smart and run it in comments, tho I guess that's still potentially fraught).

[10:04:09.0000] <railgun>
TabAtkins: that explains why I couldn't find anything relevant haha

[10:04:44.0000] <railgun>
yeah I noticed the section where you undo fixTypography iirc

[10:05:20.0000] <TabAtkins>
That whole thing is some bad remnants of my original, much hackier code. Should rip it out and do it proper at some point.

[10:12:11.0000] <railgun>
Domenic: sorry I missed the syntax highlighting bit, that's great

[15:05:20.0000] <ska>
Can I point fetch() to a local file?

[15:06:36.0000] <ska>
If so, how?

[15:13:15.0000] <Mek>
no, you can't fetch from a local file

[15:52:35.0000] <railgun>
is it fine if I just open the source file in my browser to preview the changes I make locally?

[15:52:58.0000] <railgun>
or is there a better way to do it

[15:55:11.0000] <TimothyGu>
railgun: for bikeshed? I build the output first before previewing :p

[15:56:03.0000] <ska>
FOr some reason, when I download the file and put it up on my localweb, fetch() is unable to get it.

[15:56:13.0000] <ska>
Is there some meta-magic I need to provide?

[15:57:12.0000] <railgun>
TimothyGu: right now I'm just opening the whatwg/html source file in my browser

[15:57:45.0000] <TimothyGu>
railgun: oh for whatwg/html

[15:57:59.0000] <railgun>
yeah

[15:58:17.0000] <TimothyGu>
hmm I don't think I've ever previewed

[15:58:26.0000] <TimothyGu>
I guess if opening the source file works, great

[15:58:54.0000] <TimothyGu>
you do know how to create the spec from the source files right

[15:59:05.0000] <railgun>
most of it works, just some colors and links don't work

[15:59:11.0000] <TimothyGu>
through whatwg/html-build

[15:59:21.0000] <TimothyGu>
https://github.com/whatwg/html-build


2018-02-09
[16:00:02.0000] <railgun>
no I haven't seen this

[16:00:15.0000] <TimothyGu>
oh yeah that's the repo containing the tools for building

[16:00:48.0000] <railgun>
so if I just follow the instructions I should have a version like the one on the site?

[16:00:59.0000] <TimothyGu>
railgun: yup

[16:01:08.0000] <TimothyGu>
clone html-build alongside html

[16:01:17.0000] <TimothyGu>
it'll find your source file automatically

[16:02:44.0000] <ska>
I'm trying to use this https://github.com/widget-/slack-black-theme but I'd like to use a local copy of that fetch() url.

[16:30:50.0000] <railgun>
TimothyGu: just tried html-build and it worked, thanks!

[17:38:40.0000] <railgun>
would be helpful if the wattsi readme was updated with a reminder that you need to add bin/wattsi to your path

[17:39:58.0000] <TimothyGu>
railgun: yay!

[17:44:41.0000] <railgun>
TimothyGu: mind if I submit a pull request? wattsi makes things a lot faster too, so I think the README should be more straight-forward

[17:45:02.0000] <TimothyGu>
railgun: go ahead. I don't maintain wattsi though

[17:49:02.0000] <railgun>
ok, thanks for the tips btw, this is a lot better than what I was doing before

[18:04:22.0000] <railgun>
is this correct for issue #3441? https://i.imgur.com/0IVBCwX.jpg cc: annevk

[19:42:11.0000] <MikeSmith>
PSA for those who like Dockerfiles: I created a Dockerfile of the HTML checker and put it on Docker Hub

[19:42:31.0000] <MikeSmith>
https://hub.docker.com/r/validator/validator/

[19:45:57.0000] <Domenic>
Oooh

[19:46:07.0000] <Domenic>
I wonder if that'd be faster than downloading the jar

[19:46:09.0000] <Domenic>
Probably similar

[19:47:36.0000] <MikeSmith>
yeah though I guess Dockerhub has caches and uses a CDN

[19:49:22.0000] <MikeSmith>
the slowest part of running it is actually a part that calls "gpg --recv-keys" to get my gpg key and check the gpg sig for the downloaded jar

[19:50:13.0000] <MikeSmith>
which is probably overkill because I also have it checking the SHA1 sum for ot

[19:50:41.0000] <Domenic>
railgun: that looks like a good start. Missing an OffscreenCanvas <dt> (you can have multiple <dt>s for a given <dd>), and need to use <code> inside the <dt>s

[20:10:40.0000] <railgun>
Domenic: just rebased against master and added the <dt> for OffscreenCanvas

[20:10:53.0000] <Domenic>
railgun: great! Feel free to submit a PR so we can review

[20:12:13.0000] <railgun>
sure I'll submit it as soon as I add <code> inside the <dt>s

[20:16:17.0000] <railgun>
no <code> for otherwise right?

[20:22:53.0000] <Domenic>
Right

[20:36:26.0000] <railgun>
just made the PR https://github.com/whatwg/html/pull/3463 Domenic: can you verify me?

[20:36:38.0000] <Domenic>
railgun: I'll do so tomorrow at work :)

[20:39:02.0000] <railgun>
thanks!

[22:41:51.0000] <annevk>
railgun: the <dl> needs to be inside the <ol> unfortunately as a step; returning good needs to be the last step applicable to all types

[22:42:06.0000] <annevk>
railgun: my instructions were faulty :/

[07:54:22.0000] <railgun>
annevk: is there an example somewhere in the source that I can reference? I'm still not sure where to put the ol and li tags

[09:50:51.0000] <annevk>
railgun: I hope Domenic can help out; I’m back in a week

[09:51:08.0000] <Domenic>
railgun: basically the algorithm should not just be a <dl>

[09:51:12.0000] <Domenic>
It should be an <ol> with two items

[09:51:22.0000] <Domenic>
1. Switch on image

[09:51:25.0000] <Domenic>
2. Return good

[09:51:34.0000] <Domenic>
And in more detail on 1

[09:51:44.0000] <Domenic>
<li><p>Switch on image:</p> <dl>...</dl></li>

[09:51:58.0000] <Domenic>
(well, I forgot the <var> I guess)

[10:38:25.0000] <railgun>
Domenic: is this correct? https://i.imgur.com/gaBvJcf.jpg

[10:40:59.0000] <railgun>
output is https://i.imgur.com/NJkkWnD.jpg

[11:07:57.0000] <Domenic>
railgun: looks perfect!

[11:55:17.0000] <railgun>
Domenic: one last thing, should I add "run these steps" back to the first sentence?

[11:56:28.0000] <Domenic>
railgun: hmm good question. We're pretty inconsistent so far. I guess maybe add it back to minimize changes. Maybe one day we'll figure out whether we want to be consistent there.

[12:10:22.0000] <railgun>
Domenic: done and updated

[12:22:51.0000] <railgun>
https://i.imgur.com/PaPDRw3.png hope this is fine (I can amend my commit if it's really needed)

[13:07:59.0000] <Domenic>
Ah, I missed that. Would have been better to not do that, but no big deal. (And not worth fixing now.)

[13:09:02.0000] <Domenic>
Congrats on your first contribution! As I said on the PR, it's a really nice one :)

[13:15:23.0000] <railgun>
thanks for the help

[14:14:19.0000] <railgun>
learned a lot from doing that issue, hope you don't mind if I take on some more issues later

[15:38:58.0000] <Domenic>
For sure, I'm looking forward to it!


2018-02-10
[16:09:56.0000] <MikeSmith>
railgun: nice work

[17:16:24.0000] <railgun>
MikeSmith: thanks!

[01:46:32.0000] <salty-horse>
hi. is this a good place to ask questions about the html5 spec?

[02:30:07.0000] <MikeSmith>
salty-horse: yes

[02:44:28.0000] <salty-horse>
great. in <https://html.spec.whatwg.org/multipage/canvas.html#2dcontext:canvasrenderingcontext2d-19> it's explained what happens when setting a canvas to "alpha: false". is it correct that the alpha=false state should be kept when the canvas's width/height is changed? it's an old bug in firefox that I'm trying to fix, and I want to make sure I understand the spec https://bugzilla.mozilla.org/show_bug.cgi?id=1219985

[03:11:38.0000] <MikeSmith>
salty-horse: dunno but if you hang around somebody else on the channel will probably eventually respond

[03:12:08.0000] <MikeSmith>
Philip` maybe

[03:16:30.0000] <MikeSmith>
salty-horse: reading https://html.spec.whatwg.org/multipage/canvas.html#concept-canvas-set-bitmap-dimensions I see no mention of UA requirements to make any change to the alpha boolean when seeing the width and height

[03:16:59.0000] <MikeSmith>
given that, then yeah it’s correct that the alpha=false state should be kept when the canvas's width/height is changed

[03:17:12.0000] <MikeSmith>
for a UA to do otherwise would be non-conforming

[03:17:15.0000] <salty-horse>
that's what I thought. thanks.

[03:18:51.0000] <MikeSmith>
yeah, because in general, unless the spec explictly says in some algorithm that something must change as a result of that algorithm running, then it must not change as a result of that algorithm runnig


2018-02-11
[14:35:37.0000] <railgun>
I made a meta issue on "good first issues" here https://github.com/whatwg/meta/issues/74

[14:35:55.0000] <railgun>
looking for comments

[14:44:23.0000] <smaug____>
hmm, could I just ignore webperf wg completely.

[15:58:57.0000] <MikeSmith>
smaug____: is bz still trying there?

[15:59:19.0000] <smaug____>
not sure. I think not in the email list at least


2018-02-12
[16:01:06.0000] <MikeSmith>
OK, well I know he got pretty frustrated with it more than once

[16:01:43.0000] <MikeSmith>
dunno why that group has the kind of culture it does

[16:02:44.0000] <MikeSmith>
I don’t follow it myself but I did see bz’s comments, which seemed to indicate the specs there were being edited without the kind of attention to deal and rigor that should be expected

[16:03:13.0000] <MikeSmith>
railgun: would be nice to have something set up to do the bumping described there. I vaguely recall other repos that have something set up like that

[17:18:57.0000] <railgun>
MikeSmith: I know some projects like Zulip have a claim bot (e.g. https://github.com/zulip/zulip/issues/8279) but I'm personally not a fan of it

[17:21:43.0000] <MikeSmith>
railgun: OK. So rather than a bit did you have in mind that somebody will instead periodically do the re-triaging manually?

[17:24:27.0000] <railgun>
I'd like a human reponse to issues that need to be bumped instead of a bot

[17:24:49.0000] <railgun>
but some form of automation could still be done with the GitHub api?

[17:25:34.0000] <railgun>
such as curate a page of good first issues that haven't been active in a while

[17:27:07.0000] <railgun>
I'm not familiar with the word triaging, care to explain it to me?

[17:41:42.0000] <railgun>
MikeSmith: for automation I'm thinking of this: run a script each day, for all open good first issues, if last action > X days ago (i.e. the issue is inactive) then add it to the list of issues to manually review

[18:41:41.0000] <MikeSmith>
railgun: ok yeah that could work

[18:43:04.0000] <MikeSmith>
by triaging I just meant somebody going (back) through the issues and deciding what to do with them ー (re)categorizing or (re)labeling etc

[19:08:00.0000] <railgun>
ok thanks

[00:44:45.0000] <annevk>
JakeA: great talk on event loops; would have loved to see microtasks as part of the animation

[00:45:39.0000] <annevk>
JakeA: also makes me wonder again about event listeners and if they are the only place with the gotcha and whether we should consider switching

[00:47:48.0000] <JakeA>
annevk: Cheers! I don't think microtasks fit as part of the animation, since they don't happen in one place. That's why I did the separate stack animation to show how the microtask queue is emptied vs other queues

[00:49:06.0000] <JakeA>
Although there's a microtask checkpoint in the event loop, I figured it'd confuse things to put it on the diagram, since the most likely place folks will encounter microtasks is on-stack-empty

[00:50:16.0000] <JakeA>
annevk: What change are you thinking of for events? Running microtasks after callbacks is what allows IDB to be promisified, so I'm pretty keen on that 😀

[00:50:55.0000] <annevk>
JakeA: always running them at end of listener

[00:51:49.0000] <annevk>
JakeA: not sure if empty stack is exposed in other ways though

[00:52:39.0000] <JakeA>
annevk: ohh I see. Interesting. It would become the only point where promises can run in the middle of other JS, which may become weird

[00:53:09.0000] <annevk>
JakeA: do microtasks run after rAF?

[00:53:19.0000] <annevk>
I guess they have to?

[00:53:22.0000] <JakeA>
yeah

[00:54:15.0000] <annevk>
Would have been complicated to fit into the animation then, indeed

[00:55:09.0000] <JakeA>
They can also happen in events that happen in the render steps. Eg scroll, resize, animationend, touchmove, intersection observers etc etc

[00:56:01.0000] <JakeA>
I wanted to cover those kind of events, but ran out of time

[01:02:14.0000] <annevk>
JakeA: contentDocument does not throw for cross-origin frames I think

[01:02:26.0000] <annevk>
JakeA: should return null iirc

[01:03:20.0000] <JakeA>
annevk: ahh gotcha. So the error is when accessing 'body' of null, rather than a security error.

[01:04:22.0000] <annevk>
JakeA: yeah; contentWindow.document throws a sec error

[01:10:41.0000] <annevk>
JakeA: what might work is zooming in on the task/rAF/render event when you get there to show the microtasks in action

[02:33:11.0000] <AutomatedTester>
what does it mean to have a navigation mature? does it mean complete?

[02:39:07.0000] <JakeA>
annevk: it's still tough, because you can have multiple microtask checkpoints in a task, or in raf. Microtasks just feel more to do with JS execution than the 'loop'.

[03:20:16.0000] <MikeSmith>
I can’t recall ever having heard the term “navigation nature”

[03:20:37.0000] <MikeSmith>
at least don’t think it’s used in the HTML spec

[04:29:18.0000] <annevk>
mature is a thing

[04:29:34.0000] <annevk>
It’s some kind of point of nu return

[07:10:12.0000] <bradleymeck>
URL.createObjectURL is in the File API spec... which makes it awkward, but would it be the right place to try and add a form that takes a Response? That seems counter intuitive to me

[07:20:29.0000] <Domenic>
Object URLs are probably not going to be updated much, as they're leaky and we're trying to get the platform away from them... But you don't need to add to do that, just do URL.createObjectURL(await response.blob())

[07:26:45.0000] <bradleymeck>
Domenic: that doesn't let me have non-200 responses and the like be created

[07:27:02.0000] <Domenic>
Yeah, blob URL resolution always succeeds

[07:27:04.0000] <bradleymeck>
I'm fine using a new API that gives me ~= ability to create these synthetic URLs

[07:27:07.0000] <Domenic>
If you want a non-200 response, use Response

[07:27:21.0000] <Domenic>
That's where the platform is moving

[07:27:22.0000] <bradleymeck>
Domenic: I still need to generate a URL string for ESM

[07:27:31.0000] <bradleymeck>
and window.caches doesn't seem to let me do that

[07:27:49.0000] <Domenic>
All I can say is, trying to use an effectively-deprecated technology as a key part of your workflow seems like a bad idea.

[07:28:00.0000] <bradleymeck>
Domenic: is there an alternative?

[07:28:15.0000] <Domenic>
Not sure what the context is, but using Response is generally what is preferred

[07:28:37.0000] <bradleymeck>
I need to make a URL for ESM to import based upon a Response

[07:29:05.0000] <wanderview>
JakeA: are you ok with this ready promise behavior from a webdev perspective?  mainly curious because I'm about to re-write our ready promise stuff and just want to know if there is any chance we would change it... https://github.com/w3c/ServiceWorker/issues/1279

[07:29:10.0000] <Domenic>
OK, well, that's probably not going to be possible on the web platform, because indirecting through URLs has proven very problematic and leaky.

[07:29:41.0000] <bradleymeck>
Domenic: right, for web I'm having to do multiple round trips through service workers

[07:30:28.0000] <bradleymeck>
I'd love to read the exact problems of synthetic URLs sometime if it is written up in a single place

[07:31:01.0000] <Domenic>
Essentially they leak memory forever

[07:31:16.0000] <Domenic>
The fact that blob URL scope is very wide is also problematic.

[07:31:25.0000] <Domenic>
(Not sure how wide, but possibly larger than a single process.)

[07:31:27.0000] <bradleymeck>
ESM Module Map does too?

[07:31:55.0000] <Domenic>
No, you can throw away the contents of the source text of a module once it's compiled. (Modulo f.p.toString issues.)

[07:32:08.0000] <Domenic>
And you can definitely throw it away after the realm gets destroyed (e.g. by navigation)

[07:32:10.0000] <wanderview>
FWIW I would much rather see `.src` or `.srcobj` take a Response vs making URLs out of a Response

[07:32:12.0000] <Domenic>
Neither is true for blob URLs

[07:32:15.0000] <Domenic>
+1 wanderview

[07:32:49.0000] <bradleymeck>
wanderview: but JS needs a string not a reference

[07:34:32.0000] <wanderview>
bradleymeck: sorry, what is the use case that requires a string?

[07:34:43.0000] <bradleymeck>
wanderview: `import "..."`

[07:38:24.0000] <wanderview>
I guess I'd rather see discussion on how to pass a consumable response into `import` vs converting Response objects into memory-locked buffers that get leaked

[07:38:54.0000] <bradleymeck>
wanderview: well that is in the JS spec so I'm not sure what you want to discuss

[07:39:10.0000] <bradleymeck>
it is done at parse time so you can't really grab references

[07:39:55.0000] <bradleymeck>
If a different store works, that seems fine too. I just didn't see how to do this workflow with `window.caches`

[07:41:05.0000] <bradleymeck>
it seems like the main objection is that blob URLs are shared across realms and don't free up once used?

[07:41:49.0000] <wanderview>
bradleymeck: you have to explicitly call revokeObjectURL() if you want to free the blob URL before the window/worker that created them goes away

[07:42:25.0000] <bradleymeck>
wanderview: would standardizing https://msdn.microsoft.com/zh-cn/data/hh772302(v=vs.100) 's oneTimeOnly make sense then?

[07:42:57.0000] <wanderview>
bradleymeck: that would create a page that could not be reloaded then, right?

[07:44:24.0000] <bradleymeck>
wanderview: I've never considered directly navigating to a blob URL as the main window, but yes. I think for all these solutions of "don't keep the URL alive" that is true, same for Object references like Response which would need to be reloaded somehow

[07:49:59.0000] <bradleymeck>
blob URLs should be revoked also when their document is unloaded now so don't think they would let you reload anyway https://w3c.github.io/FileAPI/#lifeTime

[07:51:22.0000] <wanderview>
correct

[07:52:55.0000] <Domenic>
domfarolino: https://github.com/whatwg/console/issues/82 and https://github.com/whatwg/console/issues/110 can probably be closed

[07:53:28.0000] <bradleymeck>
I guess `location = Response` could in theory keep that response body alive? but then you could do `location = new Response(await fetch(blob)...)` to make shallow reloading of blob URLs work too

[07:54:15.0000] <domfarolino>
Domenic: That sounds good thanks. I should also be able to close https://github.com/whatwg/console/issues/27 today

[07:54:31.0000] <Domenic>
Oh yeah, that'll be quite good :)

[07:56:28.0000] <Domenic>
domfarolino: did you see https://twitter.com/TheLarkInn/status/962465510137872385 BTW? Quite exciting; hopefully he'll chime in on various issues.

[07:58:57.0000] <wanderview>
yoav: what happens if a site tries to preload very large resources or too many resources?  do webkit/chromium spill to disk or just stop preload caching at some memory limit?

[07:59:51.0000] <domfarolino>
Domenic: Oh nice! I remember seeing he joined Edge Developer Tools and was wondering if he'd get a chance to dig around in the Console Spec stuff. Good stuff

[08:03:10.0000] <bradleymeck>
Domenic: since blob URL lifetimes are limited to the document and we could implement/standardize oneTimeOnly are there any other potential problems you see?

[08:03:39.0000] <Domenic>
They aren't limited to the document

[08:04:07.0000] <bradleymeck>
Domenic: other documents can load the URLs, but they get revoked/removed when the origin document is unloaded

[08:04:35.0000] <Domenic>
Ah really, that's nice

[08:04:49.0000] <bradleymeck>
so, maybe have a flag to limit their scope to a single realm as well?

[08:05:29.0000] <Domenic>
Yeah I mean you could keep piling kludges on top, not sure if people will be interested in implementing them, but I guess it's not a lost cause at least.

[08:06:00.0000] <bradleymeck>
I'm coming at this not from web implementor perspective so I'm already in an awkward scenario

[08:06:47.0000] <bradleymeck>
anyway, I'll take those flags as being requested and take it to the File API issue tracker for better or worse

[08:14:35.0000] <domfarolino>
Domenic: We definitely want to close https://github.com/whatwg/console/issues/110 right, like you mentioned? I ask because though the webappsec-csp issue has not been closed yet, https://github.com/w3c/webappsec-csp/issues/217#issuecomment-302474980 kind of does it for me, and it seems that the granular control of console filtering is not part of the CSP. Just want to make sure closing it isn't jumping the gun :)

[08:15:27.0000] <Domenic>
Yeah I mean you could even say something equivocal like "thanks for letting us know, seems like there's nothing to do on our side".

[08:15:58.0000] <Domenic>
I basically tried to look through the issue tracker with the POV of Edge implementing and that stood out as not useful to be tracking.

[08:24:05.0000] <domfarolino>
Ok that makes sense.

[08:28:54.0000] <jyasskin>
bradleymeck: I haven't thought this through, but might it work to have JS initiate module parsing with a set of either pre-imports or a mapping of import names -> Responses?

[08:29:22.0000] <bradleymeck>
jyasskin: how would that be different from URLs?

[08:32:17.0000] <jyasskin>
Oh, actually, that's probably just spelled as a way to pre-fill the module map. I guess it's URLs instead of strings, but they're scoped more tightly than Object URLs.

[08:33:26.0000] <bradleymeck>
jyasskin: I'm not entirely sure how that would work to make it tighter because you would need to pre populate all the mappings of the whole ESM graph

[08:34:55.0000] <bradleymeck>
jyasskin: that might be better served by https://github.com/whatwg/html/issues/2640 which I think has stalled (forever?)

[08:36:14.0000] <yoav>
wanderview: not afaik. preloads are treated like any other subresource (based on their `as` values)

[08:36:44.0000] <jyasskin>
bradleymeck: Yep, #2640 seems very similar.

[08:37:12.0000] <wanderview>
yoav: what does that mean?  webkit and chromium use RAM without bound if there are excessive <link rel=preload> elements?

[08:37:46.0000] <yoav>
similar to what happens when there are excessive <img> elements

[08:37:58.0000] <yoav>
if there are limits in place, they are identical to both

[08:38:51.0000] <yoav>
The memory cache in both doesn't store a copy of the resources, it holds a pointer to the resources themselves

[08:39:01.0000] <yoav>
which are in memory for the lifetime of the page

[08:58:46.0000] <Domenic>
It seems like there are many ways to make a browser use unbounded RAM

[09:07:18.0000] <wanderview>
yoav: image cache is spec'd as "may" I believe... its an optional optimization... is <link rel="preload"> also something that the browser can just choose to ignore?

[09:07:47.0000] <wanderview>
Domenic: sure, but for compat reasons it would be nice to know what this under-spec'd feature considers reasonable memory usage

[09:18:09.0000] <yoav>
wanderview: it's not currently defined. You can open an issue on the spec and we can discuss it there

[09:22:21.0000] <wanderview>
yoav: sure: https://github.com/w3c/preload/issues/121

[09:25:21.0000] <Domenic>
I think image cache is a must, because the web depends on it?

[09:25:54.0000] <Domenic>
Well, OK, no

[09:26:09.0000] <Domenic>
There is a lot of wiggle room that makes it effectively a "may", e.g. UAs can remove entries from the list at any time.

[14:05:27.0000] <domfarolino>
Domenic: Does me interning for Microsoft at all affect my participant agreement? Will I need to sign for an Entity as opposed to sign as a Individual?

[14:07:03.0000] <Domenic>
domfarolino: oh, hmm, I think it does :-/. But, Microsoft is already signed up, so you should be OK... we'll want to talk to them about getting console added to https://github.com/whatwg/participant-data/blob/master/entities.json#L84-L89 though.

[14:07:27.0000] <Domenic>
Maybe email the two folks listed as contacts there to explain what's up?

[14:46:42.0000] <domfarolino>
Domenic: Thanks, will do


2018-02-13
[20:10:57.0000] <howdoi>
2FA/3DS is possible with the payment request API? If not, what are plans for handling the same?

[23:41:06.0000] <domfarolino>
foolip: I'm assuming my latest comment kicked off an email, but in case it didn't: ping https://github.com/w3c/web-platform-tests/commit/3b211051e475df10aac7cdddf5b5eaca77540373#r27526241

[23:58:04.0000] <foolip>
domfarolino: I got email, replied

[00:02:51.0000] <domfarolino>
foolip: Thanks! Hmm I am adding a console.log right before the `assert_unreached` however when the test passes, I don't see anything in the console

[00:10:12.0000] <domfarolino>
foolip: But I do get what you are saying, because I just added another `assert_unreached` directly after `t.done()` which didn't cause any issues.

[06:15:08.0000] <smaug____>
annevk: https://lists.w3.org/Archives/Public/public-webapps/2018JanMar/0013.html sounds odd

[06:15:32.0000] <smaug____>
Domenic: ^

[06:15:45.0000] <smaug____>
Is the plan to merge CE to WhatWG html too?

[06:15:55.0000] <smaug____>
that would be fine to me, but not to merge to w3c html only

[06:40:00.0000] <Ms2ger>
AFAICT, w3c html is nothing but a playground to keep chaals occupied

[07:41:40.0000] <annevk>
smaug____: was merged into DOM and HTML long ago

[07:42:00.0000] <smaug____>
all of it?

[07:42:13.0000] <smaug____>
how did I miss that

[07:42:45.0000] <smaug____>
I've been looking at CE spec still recently, since it has been updated, based on the date "W3C Editor's Draft 08 February 2018"

[07:43:15.0000] <annevk>
smaug____: CE, yes; Shadow, some focus bits not

[07:43:27.0000] <smaug____>
not talking about shadow

[07:43:30.0000] <smaug____>
only CE

[07:45:30.0000] <annevk>
All done long ago

[07:46:39.0000] <smaug____>
why is w3c spec then being updated still, at least based on the date

[07:47:24.0000] <smaug____>
oh well, hopefully those specs are still somewhat similar

[08:09:32.0000] <annevk>
I suspect they want to copy and pass it of as original thought?


2018-02-14
[11:35:45.0000] <domfarolino>
Domenic: if you want to give a quick once-over of https://github.com/whatwg/console/pull/127/commits/79ed3c285c79b3cc543f656573e085250dfdb011 I can merge soon

[11:35:53.0000] <Domenic>
domfarolino: just saw it, looks good!


2018-02-15
[06:17:09.0000] <domfarolino>
Domenic: Firefox makes no distinction between the "Common object formats" (https://console.spec.whatwg.org/#object-formats), but given the flexibility of the definitions, I think that's still OK, would you agree?

[06:18:55.0000] <domfarolino>
Domenic: That is, `%O`, `%o`, `console.log`, `console.dirxml`, and `console.dir` all yield the same type of formatting when printing something like a DOM node

[07:22:43.0000] <Domenic>
domfarolino: yeah, that seems well within the spec

[08:16:25.0000] <smaug____>
'current node tree' isn't a thing, right?

[08:17:34.0000] <smaug____>
web components have still so many issues

[08:17:54.0000] <smaug____>
hopefully we'll spend most of the time sorting them out in Tokyo

[09:07:48.0000] <smaug____>
hrm, someone added wpt tests for element(s)FromPoint when the spec is unclear

[09:32:46.0000] <smaug____>
crap, that test is full of bugs

[09:36:34.0000] <smaug____>
unless the methods are spec'ed somewhere I'm not familiar with

[09:36:57.0000] <smaug____>
I'm looking at http://w3c.github.io/webcomponents/spec/shadow/#extensions-to-the-documentorshadowroot-mixin and https://drafts.csswg.org/cssom-view/#extensions-to-the-document-interface

[12:20:45.0000] <miketaylr>
zcorpan: thanks for review!

[12:20:53.0000] <miketaylr>
zcorpan: does this make sense? https://github.com/w3c/web-platform-tests/pull/4790#discussion_r168596376

[12:28:18.0000] <zcorpan>
miketaylr: commented

[12:29:20.0000] <miketaylr>
thanks

[12:29:37.0000] <zcorpan>
miketaylr: also, for the shadow tree case, need to set it to undefined, not do nothing, since it might not be undefined (basically https://cs.chromium.org/chromium/src/third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp?l=147 )

[12:30:28.0000] <miketaylr>
💯

[12:30:34.0000] <miketaylr>
is there a shadow tree emoji yet

[13:47:48.0000] <TabAtkins>
Domenic: You had a short thing summarizing "which global do you want?" a while ago, right? Can you point me to it again?

[13:48:08.0000] <Domenic>
TabAtkins: https://html.spec.whatwg.org/multipage/webappapis.html#realms-settings-objects-global-objects

[13:49:06.0000] <TabAtkins>
Excellent, thanks.

[13:50:01.0000] <TabAtkins>
(Several of bz's latest rounds of feedback are things that are Deep Knowledge right now, but should really be spelled out in WebIDL. I'm trying to make a list of these things so I can suggest they get put in somewhere.)

[14:13:06.0000] <Domenic>
Sounds like https://github.com/heycam/webidl/issues/135

[14:27:52.0000] <TabAtkins>
One part is, yeah.


2018-02-16
[17:02:05.0000] <othermaciej>
Does HTML have an authoring requirement that authors must not use unknown elements (ones that are not explicitly allowed, or a custom element)?

[17:02:16.0000] <othermaciej>
If so, can someone point me to it?

[17:02:21.0000] <othermaciej>
(or similarly for attributes)

[17:04:13.0000] <othermaciej>
I see "Elements must not contain content that their content model disallows."

[17:04:23.0000] <othermaciej>
In https://html.spec.whatwg.org/#elements-2

[17:04:31.0000] <othermaciej>
Don't see anything more on-point

[17:05:17.0000] <MikeSmith>
othermaciej: https://html.spec.whatwg.org/#semantics-2:other-applicable-specifications

[17:05:22.0000] <MikeSmith>
> Authors must not use elements, attributes, or attribute values that are not permitted by this specification or other applicable specifications, as doing so makes it significantly harder for the language to be extended in the future.

[17:08:35.0000] <a-ja>
"must" in lowercase, eh? ;)

[17:09:32.0000] <MikeSmith>
yeah because it’s always normative

[17:10:22.0000] <MikeSmith>
we have a linter that finds and reports errors for use of any RFC 2119 keywords in non-normative text

[17:10:47.0000] <MikeSmith>
including “should” and “may”

[17:12:01.0000] <a-ja>
now if only various frameworks would stop inventing their own attributes

[17:16:45.0000] <othermaciej>
MikeSmith: thanks!

[17:17:01.0000] <MikeSmith>
othermaciej: cheers

[17:17:26.0000] <a-ja>
one i noticed the other day: JSX className

[17:17:57.0000] <MikeSmith>
a-ja: the problem is that we still lack any standard way to define custom attributes

[17:18:14.0000] <MikeSmith>
other than data-*, which is for a different purpose

[17:19:28.0000] <MikeSmith>
see the discussion and proposals at https://github.com/whatwg/html/issues/2271

[17:20:16.0000] <MikeSmith>
personally the syntax that seems to make the most sense to me is to have the spec define underscore-prefixed attributes as custom

[17:20:37.0000] <MikeSmith>
and I think that is what Angular is doing these days

[17:21:17.0000] <MikeSmith>
or at least one of the ways that Angular allows (they seem to have a pattern of having multiple ways to do the same thing)

[17:39:19.0000] <a-ja>
MikeSmith, semi-related question, at what point do new attributes get added to checker/validator?

[17:42:34.0000] <a-ja>
e.g., FPWD Personalization Semantics has like a half-dozen with "aui-" prefix

[17:46:14.0000] <a-ja>
(formerly had "coga-" prefix)

[18:32:47.0000] <MikeSmith>
a-ja: sorry, was away dealing with another thing

[18:33:42.0000] <a-ja>
np....so was I

[18:33:45.0000] <MikeSmith>
heh

[18:34:23.0000] <MikeSmith>
attributes only get added to teh checker if they get added to the HTML spec or a spec referenced by the HTML spec

[18:35:12.0000] <MikeSmith>
and even then I don’t usually add them until some browser engines actually support them (in the case of attributes that have UA requirements)

[18:35:31.0000] <MikeSmith>
/me looks up Personalization Semantics

[18:38:14.0000] <MikeSmith>
OK I see https://www.w3.org/TR/personalization-semantics-1.0/#a-2-wai-aria

[18:38:22.0000] <MikeSmith>
> Properties in this case can be represented as WAI-ARIA properties by adding the prefix "aui-" to the attribute name, and the property value as the attribute value.

[18:38:27.0000] <MikeSmith>
but then also:

[18:38:30.0000] <MikeSmith>
The prefix above is not yet accepted by the ARIA Working Group.

[18:38:50.0000] <MikeSmith>
..

[18:39:23.0000] <MikeSmith>
anyway for that one I guess I would wait til somebody finds it important enough to file a validator bug for

[18:39:25.0000] <a-ja>
just mentioned it as a heads up

[18:39:30.0000] <MikeSmith>
thanks

[18:39:54.0000] <MikeSmith>
I see the can also be expressed with Microdata or RDFa?

[18:40:29.0000] <a-ja>
parts, iirc.

[18:40:35.0000] <MikeSmith>
OK

[18:41:19.0000] <MikeSmith>
well if so, personally I hope the WG doesn’t end up accepting the aui- prefix stuff

[18:41:51.0000] <a-ja>
sounds like a job for schema.org

[18:41:55.0000] <MikeSmith>
yeah

[18:42:15.0000] <MikeSmith>
if it can be solved with that instead is should be

[18:42:35.0000] <MikeSmith>
and there’s already been plenty enough attribute proliferation from that domain

[18:42:57.0000] <MikeSmith>
well role values at least

[18:43:12.0000] <MikeSmith>
e.g., the massive number of DPUB role values that I got forced to add support for a while back

[18:45:28.0000] <a-ja>
i need to go read some to see what's happened since Daniel's suggestions

[20:56:58.0000] <MikeSmith>
Domenic: https://groups.google.com/forum/#!topic/mozilla.dev.platform/DZ7YctNoUUk (in case you didn’t see it already)

[20:57:04.0000] <MikeSmith>
> Intent to ship: Module scripts (ES6 modules)

[23:29:39.0000] <domfarolino>
\o/

[03:22:11.0000] <annevk>
JakeA: not sure I'd call github.io GitHub, but fair enough

[03:22:29.0000] <annevk>
JakeA: https://github.com/robots.txt/ doesn't do it either

[03:23:14.0000] <annevk>
I wonder why they return 406 Not Acceptable for that

[03:24:21.0000] <JakeA>
annevk: ahh sorry, didn't realise you meant Github-proper

[06:11:39.0000] <nox>
.

[06:11:45.0000] <nox>
Mmh, keyboard focus fail.

[08:43:00.0000] <wanderview>
annevk: are you back from PTO?

[08:57:07.0000] <annevk>
wanderview: yeah, still quite a backlog end-of-day

[08:57:18.0000] <wanderview>
ok

[08:57:20.0000] <wanderview>
welcome back

[09:02:28.0000] <annevk>
wanderview: FWIW, from what I skimmed I’d favor preserving and exposing fragments

[09:02:50.0000] <wanderview>
annevk: even if we do it as a hidden bit to start?

[09:03:02.0000] <wanderview>
or just expose it fully

[09:03:07.0000] <wanderview>
I guess I can wait until you catch up

[09:03:08.0000] <annevk>
wanderview: I regret not investigating properly before

[09:03:47.0000] <annevk>
wanderview: fully, aiui

[09:03:54.0000] <wanderview>
ok

[09:04:09.0000] <wanderview>
annevk: I guess we need to wait on spec to change before updating WPT, though

[09:04:20.0000] <annevk>
wanderview: still need to read through your feedback on that properly though

[09:04:24.0000] <wanderview>
ok

[10:30:47.0000] <smaug____>
wpt tests are so nice. I wish we had started to write them since the beginning of the web

[13:52:28.0000] <railgun>
Domenic: is there an easy way to find out which page a section is in? I'd like to preview my changes for #2533 but don't know which page it's on

[13:54:29.0000] <MikeSmith>
railgun: I sometimes grep through the output dir

[13:54:40.0000] <MikeSmith>
or else just use the single-page output

[13:56:34.0000] <railgun>
MikeSmith: grep did the trick, thanks

[13:56:51.0000] <railgun>
I want to avoid the single page output since it takes a while to load for me

[13:56:57.0000] <MikeSmith>
OK

[13:57:23.0000] <MikeSmith>
oh btw, another way is to look at the id attributes in the diff

[13:57:44.0000] <MikeSmith>
locally

[13:58:12.0000] <MikeSmith>
if you do `git diff` it will show, e.g.:

[13:58:13.0000] <MikeSmith>
@@ -65656,8 +65656,8 @@ <h5 id="custom-elements-customized-builtin-example">Creating a customized built-

[13:58:22.0000] <MikeSmith>
for each chunk of the diff

[13:58:39.0000] <MikeSmith>
then if you copy that id and do this:

[13:58:51.0000] <MikeSmith>
http://html.spec.whatwg.org/multipage/#custom-elements-customized-builtin-example

[13:59:14.0000] <MikeSmith>
that will automatically redirect you to the right page

[13:59:43.0000] <MikeSmith>
of course use the file:// URL to your local output/multipage dir

[14:03:16.0000] <railgun>
MikeSmith: seems like the h4 tag in my git diff doesn't have an id attribute

[14:03:38.0000] <MikeSmith>
ah

[14:04:35.0000] <MikeSmith>
yeah a lot don’t, since the built generates them if they’re not explicitly inthe source

[14:05:16.0000] <MikeSmith>
but even in that case, given:

[14:05:18.0000] <MikeSmith>
@@ -109699,6 +109708,14 @@ <h5>Unclosed formatting elements</h5>

[14:06:01.0000] <MikeSmith>
you can do:

[14:06:10.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/#unclosed-formatting-elements

[14:06:51.0000] <MikeSmith>
..because the build, to create the id in teh output, just takes that heading and lowercases and adds hyphens

[14:09:39.0000] <railgun>
yeah that works (it is important to note that it's case sensitive though)

[14:09:54.0000] <MikeSmith>
yup


2018-02-17
[21:10:04.0000] <railgun>
just made a series of PRs addressing some of the older issues, I'll be heading off for now

[01:32:35.0000] <annevk>
\o/

[10:21:56.0000] <railgun>
annevk: if I merge the two paragraphs, do I need to keep the old section as well?

[10:22:15.0000] <railgun>
(for #860)

[10:45:54.0000] <annevk>
railgun: the old section contains loads more, no?

[10:46:14.0000] <annevk>
railgun: oh you mean, keep the audio element specific requirements?

[10:46:23.0000] <annevk>
railgun: they'd be redundant with media element requirements, so no

[10:59:08.0000] <railgun>
annevk: yeah that makes sense

[10:59:51.0000] <railgun>
just noticed that the audio element section would be talking about media elements if I didn't move it

[11:00:46.0000] <annevk>
railgun: ah yeah, we need to move it for that reason

[11:01:19.0000] <annevk>
railgun: thanks for all these fixes, I'll do more review later on, taking a break now

[11:03:15.0000] <railgun>
np, I'm enjoying this so far

[11:50:55.0000] <railgun>
it may be helpful to warn of nested <div w-nodev> tags (would also help if there was an easy way to figure out which sections are nodev imo)

[12:55:48.0000] <Domenic>
You can view the developer view to find out

[13:03:33.0000] <annevk>
Maybe we should bring back the stylesheet if we preserve those elements

[13:04:12.0000] <annevk>
We had an alternate stylesheet so you could see the diff more clearly in the main spec

[13:18:58.0000] <railgun>
Domenic: yeah that works (didn't realize html-build made a dev/ directory as well)

[13:21:15.0000] <railgun>
annevk: I'm not familiar with it, but I assume nodev sections had a box around them?

[13:50:46.0000] <MikeSmith>
yeah we should bring back the alternative stylesheet

[13:51:45.0000] <MikeSmith>
I think we should also add back the in-page UI that went along with it, for hide/show-toggling nodev parts

[13:52:31.0000] <MikeSmith>
I’ll make time soon to put together a PR

[13:54:09.0000] <MikeSmith>
in the mean time, PSA: the HTML checker now does JavaScript syntax checking of <script> contents

[13:55:24.0000] <MikeSmith>
though only classic scripts at this point, because the checker uses Rhino to do the syntax checking, and Rhino doesn’t support modules yet

[13:57:05.0000] <MikeSmith>
Rhino also doesn’t handle template literals, so I had to add some special-casing in the checker code to drop the error Rhino reports when it finds the backticks

[15:32:17.0000] <railgun>
hope I'm not doing too many of the good first issues, I'm just trying to get familiar with how things work (and fix things I think need to be fixed)


2018-02-18
[16:18:17.0000] <MikeSmith>
railgun: I reckon nobody would think you were doing too many of them no matter how many you did

[16:18:45.0000] <MikeSmith>
and instead everybody’s grateful for the contributions

[16:19:24.0000] <MikeSmith>
so please keep at it :)

[00:28:15.0000] <annevk>
Yeah, we'll just have to file more bugs 😃

[02:20:56.0000] <annevk>
kochi: I've been triaging a bunch of the issues

[02:21:15.0000] <annevk>
kochi: there's two issues about "upstream" that basically point to all existing v1 issues

[02:21:23.0000] <annevk>
kochi: we should maybe just go through those quickly

[02:21:46.0000] <annevk>
kochi: I guess I can try to figure out which of those are bugs and which need some kind of agreement check

[02:21:56.0000] <annevk>
kochi: that might be good work to do before the meeting

[11:09:02.0000] <railgun>
fixed the line issue in #3481

[11:12:42.0000] <railgun>
Domenic: https://output.jsbin.com/maferi didn't work for me for the min max and low lines, not sure why

[11:50:22.0000] <railgun>
would there be any downside to adding word-break: break-all; to pre tags and padding-right to .example?

[11:52:02.0000] <railgun>
before - https://railgun.s-ul.eu/AAce5E1S after - https://railgun.s-ul.eu/6hOO0mva


2018-02-19
[17:36:57.0000] <kochi>
annevk: thanks for everything.  I was not well available last week due to private matters, but will be doing more stuff for the f2f this week and the next week.

[17:56:24.0000] <kochi>
annevk: are you coming to Tokyo, or if not, could you join VC remotely?

[19:25:56.0000] <smccandlish>
Any of the autoconfirmed around? Need to set up wiki.whatwg.org account

[19:49:37.0000] <smccandlish>
Domenic, you around?

[19:51:24.0000] <smccandlish>
GPHemsley: What about you? I'm going down the autoconfirmed list.  Need help with getting wiki.whatwg.org account.

[19:53:46.0000] <smccandlish>
Is anyone active at all right now?

[20:00:12.0000] <MikeSmith>
smccandlish: I can create an account for you

[20:00:28.0000] <smccandlish>
Yay!

[20:00:43.0000] <smccandlish>
I requested one via e-mail a long time ago, but never saw a response, so this seems the way to go.

[20:00:50.0000] <MikeSmith>
yeah

[20:01:08.0000] <smccandlish>
What will you need from me?

[20:01:12.0000] <MikeSmith>
I get those e-mail messages but ignore them at this point

[20:01:23.0000] <smccandlish>
Too much spam?

[20:01:48.0000] <MikeSmith>
no, just that I don’t want to encourage people to keep using that wiki

[20:01:59.0000] <smccandlish>
Is a replacement in the works?

[20:02:29.0000] <MikeSmith>
well I personally think we should take all the current content there and move it to a github wiki

[20:02:35.0000] <MikeSmith>
but others disagree

[20:03:03.0000] <MikeSmith>
anyway, to set up an account for you, I need an e-mail address and your preferred username

[20:03:52.0000] <MikeSmith>
feel free to PM them if you want

[20:05:09.0000] <smccandlish>
That sounds reasonable, since people could use their existing accounts.  Anyway, I'm a pretty public figure, so no secrecy needed. UserID: SMcCandlish, e-mail smccandlish⊙gc

[20:06:47.0000] <MikeSmith>
OK, gimme a minute, doing it right now

[20:06:56.0000] <smccandlish>
Thanks much.

[20:07:39.0000] <MikeSmith>
hmm, it says “username already in use”？

[20:08:23.0000] <smccandlish>
??  Hmm. I don't have a PW on file for that site. I can try stabbing guesses.

[20:09:15.0000] <MikeSmith>
maybe I can have it send you a reminder

[20:09:20.0000] <MikeSmith>
oh, you can yourself I think

[20:09:22.0000] <MikeSmith>
https://wiki.whatwg.org/wiki/Special:PasswordReset

[20:09:46.0000] <smccandlish>
Yeah, I just clicked on that.  I had no idea the account already existed, and now feel very silly.  Sorry for wasting your time.

[20:09:56.0000] <MikeSmith>
no worries

[20:11:10.0000] <smccandlish>
I'll go look for the reset. Have a good one. :-)

[20:12:55.0000] <MikeSmith>
cheers

[20:30:04.0000] <kochi>
MikeSmith: do you think if we have remote participants for the coming F2F at Google Tokyo, they can connect using Google Hangouts?

[20:30:19.0000] <MikeSmith>
kochi: yes

[20:30:24.0000] <kochi>
(depends on who they are, of course, but is "webex" required thing?)

[20:30:27.0000] <MikeSmith>
no need to set up anything else

[20:30:34.0000] <MikeSmith>
no, webex is not required

[20:30:42.0000] <MikeSmith>
it is better to avoid it, actually

[20:30:48.0000] <kochi>
ok, cool, then not setup is needed, then.

[20:30:53.0000] <MikeSmith>
hai

[20:31:08.0000] <kochi>
s/not setup/no setup/

[22:07:10.0000] <annevk>
kochi: I land the Sunday before and depart Friday

[22:19:22.0000] <kochi>
annevk: cool.  In the w3c meetings page https://github.com/w3c/WebPlatformWG/blob/gh-pages/meetings/18-03-Web-components.md I didn't find your name and was wondering if you could not make it.

[22:21:09.0000] <kochi>
we're trying to make the logistic as lightweight as possible, but in any case you need a blue security badge for entering the building. we are figuring out if name/company are required for passing those badges to guests.

[22:25:19.0000] <annevk>
kochi: I guess I should update that

[22:26:01.0000] <kochi>
annevk: thanks.  we expect there are last-minute updates on the list, so no hurries.

[22:31:03.0000] <annevk>
kochi: added

[22:31:34.0000] <kochi>
annevk: thanks!!

[01:32:51.0000] <annevk>
MikeSmith: I didn't realize that currently if you use <h1> followed by <h3> there's no conformance error

[01:33:02.0000] <annevk>
MikeSmith: so this outline change will definitely affect the validator

[02:04:34.0000] <MikeSmith>
yeah

[02:05:08.0000] <MikeSmith>
which is fine as far as I’m concerned

[02:05:21.0000] <MikeSmith>
happy to see that be made an error

[02:07:11.0000] <annevk>
It used to be an error too I think in HTML4

[02:07:27.0000] <annevk>
Insofar that required more than a quoted desk

[02:07:46.0000] <annevk>
(I'm probably messing up that joke)

[02:09:37.0000] <MikeSmith>
it was never an error in HTML5 as far as I can recall

[02:10:16.0000] <MikeSmith>
the (second) outline view in the checker exposes it as problem

[02:10:20.0000] <MikeSmith>
by design

[02:10:53.0000] <MikeSmith>
by showing an empty placeholder for any heading levels that are missing in the hierarchy

[02:11:43.0000] <MikeSmith>
oh I see that’s the first outline view now

[02:11:52.0000] <MikeSmith>
I guess I reversed the order a while back

[02:12:50.0000] <MikeSmith>
I guess at this point I really should just remove the (now-second) one, the “Structural outline” (generated from the outline algorithm)

[03:40:47.0000] <nox>
HTML4? What year is this

[04:32:15.0000] <annevk>
kochi: if you think there's other things worth categorizing with the existing issues, let me know

[04:32:39.0000] <annevk>
kochi: I think I've mostly done my bit, except for working on fixes

[05:14:47.0000] <Domenic>
annevk: re https://github.com/whatwg/fetch/issues/505#issuecomment-366671504, in what way did HTTP start dealing with fragments? I hadn't heard.

[05:17:33.0000] <annevk>
Domenic: they made it more explicit about how they work with redirects

[05:17:59.0000] <annevk>
Domenic: so that kinda means the fragment has to go into the HTTP subsystem

[05:20:18.0000] <Domenic>
Huh interesting

[05:20:21.0000] <Domenic>
Probably a good thing

[05:26:44.0000] <annevk>
I kinda like it actually, it's just a little risky at this point due to me not fully considering it early on

[05:26:51.0000] <annevk>
And nobody reviewing noticing I suppos

[05:26:52.0000] <annevk>
e

[05:44:24.0000] <annevk>
smaug____: are you around? I want to ask about the strategy for https://github.com/whatwg/html/issues/1127

[05:45:13.0000] <annevk>
smaug____: do we basically run the insertion steps twice for DocumentFragment with some kind of flag that indicates when it's safe to execute scripts or do we just special case script elements or something else?

[05:46:59.0000] <annevk>
smaug____: I'm inclined in the specification to special case script elements, unless there's other things we need to run the steps twice for

[05:46:59.0000] <annevk>
smaug____: nm, that doen't work

[06:45:35.0000] <nox>
annevk: Did the mixin stuff etc land in our WebIDL parser?

[06:45:52.0000] <nox>
Wrong channel.

[07:13:43.0000] <annevk>
/me wonders if esprehn is still planning to get around to making mutation events "async"

[09:08:03.0000] <wanderview>
is there an up-to-date draft svg spec?

[09:10:50.0000] <annevk>
wanderview: https://svgwg.org/svg2-draft/ maybe?

[09:12:11.0000] <annevk>
wanderview: https://github.com/w3c/svgwg/commits/master does not look like it's very active though

[09:12:28.0000] <wanderview>
annevk: thanks, mainly looking for any kind of processing model for fetching stuff

[09:12:50.0000] <annevk>
wanderview: kinda doubt that exists 😕

[09:13:43.0000] <annevk>
wanderview: SVG rendered as image is somewhat defined at https://svgwg.org/specs/integration/ I think, but not really

[09:14:04.0000] <annevk>
wanderview: at some point I drafted together some notes for what SVG needs, but nobody is really available to do the work

[09:14:16.0000] <wanderview>
annevk: just trying to figure out the fragment stuff

[09:14:23.0000] <wanderview>
annevk: or if anything else should keep the fragment

[09:47:46.0000] <railgun>
annevk: fixed #3473

[09:59:56.0000] <annevk>
railgun: cool, will look tomorrow

[10:00:04.0000] <annevk>
wanderview: per HTTP it'd be best if everything preserved it

[10:00:33.0000] <annevk>
wanderview: I recall there also being some proposals for fragments to work on media resources (video, audio) so that seems sensible in retrospect

[10:00:43.0000] <wanderview>
annevk: the question I have is... when the Response.url has a fragment that the original Request.url did not have... is that possible with service worker?

[10:01:10.0000] <annevk>
wanderview: it's possible with redirects and service workers, I think

[10:01:11.0000] <wanderview>
annevk: should we just take the fragment off of the Request.url and attach it to the Response.url in HandleFetch?

[10:01:18.0000] <wanderview>
hmm, ok

[10:01:56.0000] <annevk>
wanderview: we wanna forward, but explicit response fragment wins

[10:02:10.0000] <annevk>
wanderview: see some of the tests I wrote

[10:02:17.0000] <annevk>
wanderview: they don't cover service workers yet though

[10:02:18.0000] <wanderview>
annevk: so service worker HandleFetch should forward the fragment?

[10:02:20.0000] <wanderview>
ok

[10:02:36.0000] <wanderview>
annevk: I think that would solve this particular problem that xidorn has

[10:02:36.0000] <annevk>
wanderview: I need to figure out a local HTTPS setup for WPT

[10:02:44.0000] <annevk>
wanderview: yeah it should

[10:03:13.0000] <wanderview>
annevk: it would also solve it without having to figure out the Response.url fragment situation

[10:03:43.0000] <annevk>
wanderview: if we just kept it internal you mean?

[10:03:57.0000] <annevk>
wanderview: sure, that'd work, it just doesn't give the same power to apps

[10:04:11.0000] <wanderview>
annevk: well, we have the fragment on FetchEvent.request.url... we could just apply it to whatever the Response.url is right now

[10:04:20.0000] <astearns>
annevk: When I last talked to esprehn he had a new, non-Blink (and non-mutation-event) project he was excited about.

[10:04:25.0000] <annevk>
wanderview: what about redirects?

[10:04:44.0000] <wanderview>
annevk: I'm not saying we stop there... but it solves the immediate compat problem xidorn raised while we figure out the full picture

[10:05:05.0000] <wanderview>
annevk: and its easy for me to do this without touching Response.url yet

[10:05:32.0000] <annevk>
astearns: hmm good for him I guess

[10:06:17.0000] <annevk>
wanderview: sure, intermediate fixes seem fine, esp since Chrome/Safari already work, right?

[10:07:04.0000] <wanderview>
annevk: I don't think they are doing the Response.url propagation stuff yet in this case, so not sure they have run into the problem yet

[10:09:32.0000] <wanderview>
annevk: maybe I should file a separate spec issue on applying the Request.url fragment if present when ServiceWorker does an interception

[10:12:26.0000] <annevk>
wanderview: I think we should tackle it all at once

[10:13:09.0000] <annevk>
wanderview: btw, for your intermediate solution, if request.url contains a fragment, response.url wins?

[10:13:21.0000] <annevk>
wanderview: but response.url only wins if it also has a fragment?

[10:13:46.0000] <wanderview>
not sure I understand

[10:14:12.0000] <annevk>
wanderview: if you request /hi#bye and you get /hi#yo

[10:14:33.0000] <annevk>
wanderview: it needs to be /hi#yo, right?

[10:14:38.0000] <wanderview>
annevk: in the interim you cannot get a fragment on Response.url (and we don't save it internally)

[10:14:50.0000] <wanderview>
annevk: you will always get /hi right now

[10:14:52.0000] <annevk>
I see, okay

[10:15:06.0000] <wanderview>
annevk: saving it internally means also storing it on disk in Cache API, etc

[10:15:15.0000] <wanderview>
so we haven't done that

[13:23:07.0000] <esprehn>
annevk: I still think it's worth doing but I'm not working on Blink/Chrome at this time. I'm not sure who works on the DOM these days, maybe ask TabAtkins or ikilpatrick (who's unfortunately not in this channel)

[13:29:09.0000] <astearns>
maybe iank___ ?

[13:54:18.0000] <smaug____>
annevk: (traveled to Toronto today)

[13:55:21.0000] <smaug____>
I'll look at the question later today or on Wed


2018-02-20
[22:33:26.0000] <jochen__>
annevk: do you happen to know how / where firefox handles <a href="blob:.." download> clicks?

[22:33:57.0000] <jochen__>
annevk: it seems that while typically firefox navigates (and thus dispatches the onunload event), it doesn't for blob URLs?

[22:34:48.0000] <annevk>
jochen__: don’t; sounds like a bug

[22:55:41.0000] <jochen__>
is it just me, or is bugzilla really really slow? :/

[22:57:01.0000] <annevk>
jochen__: I think so too

[23:05:12.0000] <jochen__>
k, filed a bug. best I found was nsDocShell::InternalLoad but that only skips beforeunload for javascript: URLs

[02:19:14.0000] <JakeA>
annevk: Little demo - https://jakearchibald.github.io/streaming-html-spec/#origin. Requires TransformStream, so I guess Chrome Canary + web platform experiments flag. Streams the whole HTML spec, but just displays the linked section. Pauses the download once it gets it.

[02:21:51.0000] <annevk>
JakeA: I'm not really sure how flags work, but that doesn't look like a lot of code at all

[02:22:55.0000] <JakeA>
annevk: chrome://flags/#enable-experimental-web-platform-features. But yeah, turned out pretty easy. Hackiest bit is having to use an iframe & document.write to do the parsing.

[05:53:45.0000] <wanderview>
JakeA: maybe footnotes are one of those things you have to be older to understand... like publishing

[06:24:48.0000] <gsnedders>
where is insertion order specified for objects in ES?

[06:26:39.0000] <gsnedders>
https://tc39.github.io/ecma262/#sec-enumerate-object-properties is where I'd expect it to be, but it isn't

[06:27:18.0000] <gsnedders>
or does for..in not require it?

[06:28:49.0000] <annevk>
gsnedders: "The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below."

[06:29:02.0000] <gsnedders>
But it is that section that deals with for..in, right?

[06:29:11.0000] <gsnedders>
/me for some reason was convinced for..in now had a defined order

[06:29:30.0000] <annevk>
gsnedders: yeah, if you hover over the heading you find that the for/in section is a caller

[06:30:56.0000] <gsnedders>
/me hasn't touched the ES spec much since ES5 days :)

[06:38:44.0000] <annevk>
Properly dealing with the v0 createElement() version that took a string as a second argument is rather painful

[06:53:24.0000] <annevk>
Only Firefox implements customized built-in elements?!

[06:53:45.0000] <annevk>
I guess Chrome still hasn't shipped them or some such?

[06:55:54.0000] <annevk>
So many bugs everywhere

[07:48:14.0000] <JakeA>
wanderview: haha yeah, pretty surprised at the reaction. I got less shit for questioning frameworks.

[07:48:36.0000] <wanderview>
JakeA: at this point I just look forward to referencing that twitter thread in a footnote one day

[07:51:21.0000] <gsnedders>
tbf, I think footnotes both make sense and the way most people implement them with scrolling media is stupidly broken

[08:26:55.0000] <wanderview>
annevk: I'm going to do the request-url-fragment propagating in service worker interception... I think I will just do a mochitest for now while the spec is sorted... or do you think I should write it as a WPT?

[08:27:58.0000] <annevk>
wanderview: mochitest seems okay

[08:28:06.0000] <annevk>
wanderview: .tentative WPT would make my job easier

[08:28:19.0000] <wanderview>
annevk: what is ".tentative"?

[08:28:40.0000] <wanderview>
just a WPT naming convention?

[08:28:58.0000] <annevk>
wanderview: yeah, for things not specced

[08:29:06.0000] <wanderview>
annevk: cool... first I have heard of that

[10:17:19.0000] <annevk>
Domenic: should I rename the whatwg/dom shadow label to "topic: shadow"?

[10:17:43.0000] <annevk>
Domenic: I guess the main benefit would be that you can search across the entire WHATWG org for a label

[10:17:51.0000] <annevk>
Domenic: which seems nice

[10:21:44.0000] <annevk>
JakeA: DocumentFragment insertion is a tad different though and if you're inserting a lot of <script> elements maybe it can be a little faster

[10:22:12.0000] <annevk>
JakeA: but hopefully not in the general case...

[10:22:38.0000] <JakeA>
annevk: I imagine mutation events can change things too

[10:22:49.0000] <annevk>
JakeA: right, a lot less mutation records

[10:22:50.0000] <JakeA>
But like you say, not general

[10:25:10.0000] <Domenic>
annevk: seems like a good idea

[10:32:49.0000] <wanderview>
/me has to figure out WPT reftests and is sad.

[10:40:32.0000] <gsnedders>
wanderview: why so?

[10:40:52.0000] <wanderview>
gsnedders: union rules... I'm supposed to stick to the DOM

[10:42:24.0000] <wanderview>
gsnedders: its also partly because I have to figure out how to do svg stuff

[10:42:48.0000] <gsnedders>
hah, SVG stuff is fun :)

[10:43:23.0000] <wanderview>
gsnedders: this is what I get for reading bug reports from xidorn

[10:43:40.0000] <gsnedders>
wanderview: I mean I both recommend doing that and recommend against doing that.

[10:44:56.0000] <wanderview>
gsnedders: well, at least I vaguely know how to embed multiple things in an svg and pick them by URL fragment target now

[10:47:39.0000] <gsnedders>
I wonder how much would break if we made input@type=password.value always equal "" or "password"

[10:47:59.0000] <gsnedders>
Probably quite a lot, given plenty of sites do testing of the password strength client side.

[10:56:45.0000] <domfarolino>
Is it at all possible to see valid HTML tag sequences (like `<b></b>`) appear in the source of a document but not have these added to the DOM? Or will you *always* have to use escape characters to do this

[10:57:28.0000] <domfarolino>
Like, can I _ever_ see `<b></b>` in the source of a document, have this same sequence rendered as text and not picked up by the parser?

[11:05:34.0000] <domfarolino>
Ah I just found the `<xmp>`!

[11:06:35.0000] <domfarolino>
Though it is obsolete. I guess `<textarea readonly>` also works

[11:08:56.0000] <gsnedders>
domfarolino: <xmp>, <script>, <style>, <textarea>, probably more

[11:09:07.0000] <gsnedders>
(of course script/style depend on CSS whether they'd get rendered)

[11:09:47.0000] <gsnedders>
domfarolino: heck, <input type="text" value="<b></b>">

[11:10:22.0000] <domfarolino>
gsnedders: Forgot the obvious `<script>` and `<style>`.. Oh wow that's interesting thanks for the example!

[11:19:10.0000] <gsnedders>
I'm sure there's more ways you can do this

[11:20:47.0000] <domfarolino>
gsnedders: Yeah now that I think of it there are a ton

[11:35:12.0000] <TabAtkins>
@annevk @esprehn I'm not planning on doing any work with async mutation events. Outside of my wheelhouse, and I've got way too many other things to worry about to move into something tangential like that.

[11:36:10.0000] <TabAtkins>
domfarolino: Note that if you're writing a Bikeshed document, you can freely use <xmp> - it'll convert to a <pre> (with contents escaped) in the output so your document validates.

[11:37:39.0000] <TabAtkins>
But yeah, <script style="display: block"> (or same with <style>) also works, tho they'll be active elements (so don't use <style> unless you want the CSS to work, and use <script> with a nonsense type='' attribute).

[11:38:05.0000] <TabAtkins>
But see https://tabatkins.github.io/railroad-diagrams/example.html for an example of using a visible <script> for useful purpose - it's showing the JS and the results of running the JS. ^_^

[11:39:07.0000] <wanderview>
gsnedders: hmm... reftests are easier than I thought

[11:39:22.0000] <wanderview>
/me probably just jinxed himself

[11:44:06.0000] <domfarolino>
TabAtkins: Oh nice thanks! Just read that section in the Bikeshed document. Oh, I didn't know you could actually display a working script block; thanks for the info!!

[11:50:33.0000] <esprehn>
@TabAtkins: I meant you might know who owns the DOM on the chrome team :)

[11:50:43.0000] <TabAtkins>
Oh, that's Tokyo.

[11:50:48.0000] <TabAtkins>
Dunno who the *person* is.

[11:51:43.0000] <gsnedders>
wanderview: :)

[12:05:19.0000] <TabAtkins>
Don't we have a blame-annotated view of the HTML source somewhere?

[12:05:50.0000] <TabAtkins>
I really wanna see what commit line 93222 came from.

[12:06:46.0000] <gsnedders>
TabAtkins: I just use GitHub nowadays

[12:07:03.0000] <TabAtkins>
gsnedders: Which very specifically doesn't work for HTML, unless I'm doing something wrong?

[12:07:08.0000] <gsnedders>
oh wait for HTML

[12:07:38.0000] <gsnedders>
I've mostly justed used a local checkout, though dear god does it eat CPU

[12:13:06.0000] <wanderview>
is there any way to nicely use utility functions in a reftest that depend on testharness.js's step_func()?

[12:16:11.0000] <Domenic>
TabAtkins: there's a link in the whatwg/html readme

[12:16:27.0000] <Domenic>
wanderview: I always make my utility functions take a t argument

[12:16:43.0000] <wanderview>
Domenic: where do I get the t argument in a reftest?

[12:16:44.0000] <TabAtkins>
Ah, danke, I haven't actually looked at the README ever. ^_^

[12:16:59.0000] <Domenic>
wanderview: oh I see, reftest specific, I skipped past that

[12:17:30.0000] <wanderview>
I can either make this utility function work if t is null, or rewrite the function in my reftest

[12:17:45.0000] <wanderview>
utility function in question is quite small... wait_for_state() in serviceworkers

[12:18:58.0000] <wanderview>
Domenic: maybe this is enough: const fake_test = { step_func: f => f };

[12:20:49.0000] <wanderview>
that seems to work

[12:24:07.0000] <Domenic>
MikeSmith: lots of errors with the new JS syntax checker on some spec demos :-/. https://travis-ci.org/whatwg/streams/builds/344010078#L2276

[12:25:27.0000] <Domenic>
MikeSmith: files are in e.g. https://github.com/whatwg/streams/blob/master/demos/append-child.html

[12:36:42.0000] <gsnedders>
wanderview: what are you trying to do? control when the screenshot is taken?

[12:37:13.0000] <wanderview>
gsnedders: I am writing a test that an <img src="some.svg#target"> still renders properly when intercepted by a service worker

[12:37:28.0000] <gsnedders>
wanderview: what do you want step_func to do?

[12:38:02.0000] <wanderview>
gsnedders: so I need to do some setup of the service worker.... the service worker utility function wait_for_state() takes a test object with a step_func... I just want wait_for_state() behavior

[12:38:17.0000] <wanderview>
stubbing the step_func seems to work

[12:38:26.0000] <gsnedders>
ah. um. that's awkward. Yeah, that's the only thing I can suggest.

[12:38:35.0000] <gsnedders>
Given including testharness.js will make ita a testharness.js test.

[12:38:41.0000] <wanderview>
gsnedders: here is what I ended up with: https://bugzilla.mozilla.org/page.cgi?id=splinter.html&bug=1437760&attachment=8952500

[12:38:52.0000] <mchampion>
 Hmm, https://whatwg.org/workstream-policy renders the title as "WHATWG orkstream Policy" but it

[12:39:47.0000] <mchampion>
is correct in the source markdown.

[12:44:24.0000] <TabAtkins>
mchampion: You have a problem with orkstreams?

[12:44:39.0000] <TabAtkins>
The WHATWG policy is that ork and their streams are a-ok.

[12:45:10.0000] <mchampion>
A bit evil for my tastes, Hobbitstreams would be preferable

[12:45:16.0000] <TabAtkins>
That's racist.

[12:46:23.0000] <Domenic>
Oooh weird

[12:46:42.0000] <Domenic>
Thanks mchampion, probably my bad with recent website upgrades, will fix

[12:46:48.0000] <TabAtkins>
(Also, I think Tolkien used the spelling "orc"; "ork" is intended to be a 40k reference.)

[12:47:09.0000] <TabAtkins>
Domenic: You need to run it with -Wall to keep all the Ws, otherwise it drops some.

[12:47:18.0000] <Domenic>
-_-

[12:47:35.0000] <TabAtkins>
I'll never apologize.

[12:49:28.0000] <wanderview>
/me ponders which browser corresponds to each 40k race...

[12:50:07.0000] <Domenic>
Wow https://www.tutorialspoint.com/python/string_lstrip.htm does not do what I thought it did at all

[12:50:42.0000] <TabAtkins>
What did you think it would do?

[12:54:34.0000] <Domenic>
I thought  it would basically be like a substring

[12:55:00.0000] <Domenic>
E.g. I thought `"ababcd".lstrip("ab")` would give `"abcd"`. But instead it gives `"cd"`.

[12:55:07.0000] <Domenic>
It treats the given string as an array of characters

[12:55:42.0000] <TabAtkins>
Oh! Yeah, it's somewhat confusing.  ("abbcd" also reduces to "cd" .)

[12:55:54.0000] <Domenic>
right yeah

[12:56:04.0000] <Domenic>
It makes sense when I realized mostly it was meant to be called with no arguments

[12:56:07.0000] <Domenic>
(to strip whitespace)

[12:57:12.0000] <TabAtkins>
This is another case where treating strings as iterables obscures the behavior, rather than helps.  It really should take a list or set of characters, that's *much* more clear than *treating* a string as a list.

[12:57:37.0000] <TabAtkins>
(I'm still strongly of the opinion that strings should never be iterable; you should have to call a specific method to get an iterable over the string.)

[12:58:35.0000] <TabAtkins>
(For many reasons, including that "recurse on iterables until you find something that's not iterable" requires a special case for strings *every single time*, or else you'll infinite-recurse since characters are strings too.)

[13:27:13.0000] <MikeSmith>
Domenic: looking at the checker results for that Streams demo now


2018-02-21
[16:25:18.0000] <railgun>
annevk: is this correct for #3474? https://railgun.s-ul.eu/iAoiJLz6

[17:26:39.0000] <Domenic>
MikeSmith: any luck?

[17:26:59.0000] <MikeSmith>
Domenic: yeah

[17:27:01.0000] <MikeSmith>
still wo

[17:27:09.0000] <MikeSmith>
*still working ont it

[17:27:54.0000] <Domenic>
<3

[17:28:33.0000] <MikeSmith>
so far, “fixed” the fact that Rhino’s parser doesn’t allow “const” in “for (const foo of bar)”

[17:28:43.0000] <MikeSmith>
only allows var and let there

[17:29:25.0000] <MikeSmith>
it also doesn’t understand the `async` keyword for function

[17:29:32.0000] <MikeSmith>
so, made it handle that

[17:29:41.0000] <MikeSmith>
and now working on `await`

[21:37:25.0000] <MikeSmith>
Domenic: oK, build un-broke

[21:39:32.0000] <MikeSmith>
hmm, green at https://travis-ci.org/whatwg/streams/builds/344010078 at least

[21:42:18.0000] <MikeSmith>
OK also at https://travis-ci.org/whatwg/streams/builds/344010699 now

[21:42:37.0000] <MikeSmith>
and https://github.com/whatwg/streams/pull/884 green too

[01:57:59.0000] <JakeA>
annevk: to clarify, are you happy with me doing a PR for that pixelated thing?

[02:00:18.0000] <annevk>
JakeA: I guess; are you by any chance happy to rebase my PR after landing it?

[02:01:19.0000] <JakeA>
annevk: let's just wait until your stuff lands

[02:03:56.0000] <annevk>
JakeA: I'm letting it sit a bit since I'm trying to sort out some web components stuff

[02:04:09.0000] <annevk>
JakeA: since there's an upcoming meeting I prioritized that a bit

[02:04:32.0000] <annevk>
JakeA: but yeah, that seemed easier to me too

[02:06:06.0000] <JakeA>
annevk: yeah, it isn't urgent

[06:45:57.0000] <nox>
annevk: I've thought about your ping from yesterday,

[06:46:09.0000] <nox>
annevk: and I think there is precedent for that change in DOM or HTML, let me try to find that.

[06:46:36.0000] <nox>
annevk: Btw, r? https://github.com/whatwg/dom/pull/402

[06:47:49.0000] <nox>
annevk: Your issue about insertion steps reminded me of https://github.com/whatwg/dom/pull/71, but that's slightly unrelated I guess.

[06:51:34.0000] <annevk>
nox: I think that has r+ but needs tests to land

[06:51:47.0000] <annevk>
nox: and it seems it needs to be rebased at this point too unfortunately

[06:52:06.0000] <nox>
annevk: Ok.

[06:52:27.0000] <annevk>
nox: seems a little similar to 71, yes

[06:52:27.0000] <nox>
annevk: Why 'topic: shadow'?

[06:52:33.0000] <annevk>
nox: though no script execution there

[06:53:14.0000] <annevk>
nox: retargeting is shadow tree stuff

[06:53:20.0000] <nox>
Oh, TIL.

[07:13:14.0000] <smaug____>
annevk: in diff view for a spec change, what does yellow color mean?

[07:15:08.0000] <smaug____>
hmm, perhaps the tool just somewhat randomly marks something as removed, something as new addition, and something as changed

[07:16:53.0000] <annevk>
smaug____: it might not be perfect

[07:17:03.0000] <annevk>
smaug____: Preview has the change integrated

[07:17:50.0000] <annevk>
I thought we had some thread that ended up rejecting read-write classes inheriting from read-only classes? In particular DOMRect and DOMRectReadOnly, but that pattern only seems to have spread?

[07:18:32.0000] <annevk>
I guess the idea is that the base class is actually mutable despite saying ReadOnly, it just doesn't expose public accessors for it? Seems a bit weird

[08:10:37.0000] <lgrahl>
Hey :)

[08:10:57.0000] <lgrahl>
Domenic: Was there something else I should take a look at and forgot to do so?

[08:22:39.0000] <wanderview>
annevk: if an img element hits a redirect, should the img.src property reflect the final URL?

[09:05:09.0000] <annevk>
wanderview: no

[09:05:17.0000] <wanderview>
ok

[09:05:38.0000] <wanderview>
annevk: that explains why I didn't see the fragment disappear from the .src property when we were stripping it

[09:06:13.0000] <Domenic>
lgrahl: all good!

[12:04:13.0000] <TabAtkins>
annevk: thank you for the review!

[13:24:31.0000] <annevk>
TabAtkins: ooh cool, looking forward to reviewing the fixes tomorrow; thanks


2018-02-22
[16:23:59.0000] <MikeSmith>
TabAtkins: about @charset, is it valid per the relevant CSS specs?

[16:24:23.0000] <MikeSmith>
if not, is there normative statement somewhere about it not being valid?

[16:24:42.0000] <MikeSmith>
I ask because at https://drafts.csswg.org/css-syntax-3/#charset-rule I see the following notes:

[16:24:58.0000] <MikeSmith>
> Note: The algorithm to parse a stylesheet explicitly drops the first @charset rule from the document, before the stylesheet is grammar-checked, so valid rules that must appear first in the stylesheet, such as @import, can still be preceded by an (invalid) @charset rule without making themselves invalid.

[16:25:02.0000] <TabAtkins>
The answer is slightly complex: @charset, the at-rule, is invalid.  But @charset, the ASCII byte sequence, is allowed at the start of the stylesheet, according to some stringent requirements.

[16:25:10.0000] <MikeSmith>
OK

[16:25:47.0000] <TabAtkins>
AKA, there's no such thing as a @charset at-rule, but CSS's inline encoding declaration happens to look similar to an at-rule. ^_^

[16:25:55.0000] <MikeSmith>
hai

[23:43:26.0000] <annevk>
It probably shouldn't say that it drops the first @charset rule then? but that it drops a sequence resembling such a rule?

[11:18:11.0000] <TabAtkins>
@annevk Nah, it's accurate. This stuff happens, conceptually, before grammar-checking.  Everything at-rule-shaped parses into an at-rule, and then later invalid ones get thrown out.  So we first recognize the byte sequence as an encoding declaration, then parsing runs and turns it into an at-rule, then grammar-checking runs and discards it as invalid (or would, if we didn't first throw it out).

[12:35:21.0000] <annevk>
When do you throw it out?

[13:27:04.0000] <TabAtkins>
annevk: https://drafts.csswg.org/css-syntax/#parse-stylesheet

[13:27:13.0000] <TabAtkins>
Step 3


2018-02-23
[00:35:58.0000] <annevk>
TabAtkins: looking at that it seems that one potential problem here is that nothing marks errors with the @charset production

[00:36:29.0000] <annevk>
TabAtkins: e.g., if you have @charset hi { ... } it'll just be ignored

[03:34:46.0000] <MikeSmith>
incidentally, I wonder if the spec should normatively require authors to use UTF-8

[03:35:26.0000] <MikeSmith>
to conform to the Encoding spec, with language similar to what the HTML spec has now

[03:35:26.0000] <annevk>
MikeSmith: probably should, given that HTML does

[03:35:30.0000] <MikeSmith>
yeah

[04:57:05.0000] <Emil>
Hey so

[04:58:21.0000] <Emil>
What's the correct way to allow wss connections to 'self'?

[04:59:55.0000] <Emil>
with csp

[05:02:23.0000] <annevk>
Emil: self doesn't work?

[05:03:58.0000] <annevk>
Emil: https://github.com/w3c/webappsec-csp/issues/7

[05:06:12.0000] <Emil>
annevk: no, because even though the protocol starts as https it's upgraded to websocket and it must be specified as "wss" in the standard WebSocket api and since 'self' is https and not wss 'self' will block wss

[05:06:40.0000] <Emil>
annevk: so is there a workaround?

[05:07:40.0000] <Emil>
annevk: https://emil.fi/p/heatstream/ here's my page if you want to take a look

[05:08:00.0000] <Emil>
could be a chrome issue though

[05:08:40.0000] <Emil>
firefox only complains about Content Security Policy: Directive ‘child-src’ has been deprecated. Please use directive ‘worker-src’ to control workers, or directive ‘frame-src’ to control frames respectively.

[05:09:21.0000] <Emil>
while chrome says script.js:202 Refused to connect to 'wss://emil.fi/websocket/heatstream' because it violates the following Content Security Policy directive: "connect-src 'self' *.emil.fi".

[05:16:06.0000] <Emil>
annevk: so it might just be a chrome issue

[05:17:10.0000] <annevk>
Emil: ok, guess the workaround is listing the wss URL too

[05:17:52.0000] <annevk>
Emil: I think we should make this work everywhere though (and get it tested)

[05:19:45.0000] <Emil>
so I must do wss://emil.fi?

[05:20:56.0000] <Emil>
and wss://*.emil.fi?

[05:21:50.0000] <Emil>
also, one thing that'd be great is having access to the current host with say 'host' or so instead of having to write explicit *.domain.tld if I want to trust my own subdomains

[05:22:52.0000] <annevk>
Emil: I suspect that'll work

[05:23:13.0000] <annevk>
Emil: you can file feature requests against the repository I linked earlier

[05:23:29.0000] <annevk>
Emil: maybe search first if it hasn't been requested before

[05:23:40.0000] <annevk>
/me isn't entirely up-to-date on all things CSP

[05:31:00.0000] <Emil>
annevk: anycase thanks for confirming the issue, lets hope it gets fixed. I filed a bug report on crbug.com about this

[05:32:07.0000] <annevk>
Emil: maybe link that bug from the issue while you're at it?

[05:32:28.0000] <annevk>
Emil: always helpful to have spec and browser issues cross-linked

[05:33:27.0000] <Emil>
annevk: well I dun goofed and selected the security tag and apparently only users with securityTeam permissions can see the issue :D

[05:33:48.0000] <Emil>
https://bugs.chromium.org/p/chromium/issues/detail?id=815142&can=2&start=0&num=100&q=&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified&groupby=&sort=

[05:34:42.0000] <Emil>
annevk: https://emil.fi/d/2018-02-23_15-34-28_SOzY3Qkc.png picture of bug report

[05:35:10.0000] <annevk>
heh

[05:35:11.0000] <Emil>
oh yeah if you meant link the github issue yeah I linked that

[05:35:29.0000] <annevk>
I meant link from GitHub to https://bugs.chromium.org/p/chromium/issues/detail?id=815142

[05:35:38.0000] <annevk>
But I guess wait a little until it's opened up first

[05:35:52.0000] <Emil>
yeah I'll do that (y)

[05:36:01.0000] <annevk>
Well, sorry, I meant link both ways, so what you did is definitely good

[05:38:20.0000] <Emil>
annevk: thanks for helping out

[05:46:10.0000] <Emil>
annevk: https://github.com/w3c/webappsec-csp/issues/297 and filed a feature request for exposing the host

[05:46:57.0000] <annevk>
cool

[07:35:09.0000] <annevk>
JakeA: if Fetch knows it's not a range request and it gets a range response (it can look passed the opaque bit since it's the spec/impl), it could just return a network error?

[07:36:12.0000] <annevk>
JakeA: so we annotate responses with whether they're range responses and if a service worker hands us a mismatch it's a network error

[07:43:13.0000] <JakeA>
annevk: You disagree :D https://github.com/whatwg/fetch/issues/144#issuecomment-323938559

[07:43:20.0000] <JakeA>
That was my original plan

[07:44:27.0000] <annevk>
JakeA: I think that's slightly different

[07:44:46.0000] <annevk>
JakeA: that's saying that if <script> makes a request and a server gives a 206 it'll just work

[07:45:35.0000] <annevk>
JakeA: the Attack 4 AIUI is that <script> makes a normal request; then SW makes a Range request; then server gives a 206; then that's handed to <script>

[07:45:58.0000] <annevk>
JakeA: in that case it seems reasonable to reject

[07:46:09.0000] <annevk>
JakeA: maybe important even

[07:46:55.0000] <annevk>
JakeA: or am I still missing something?

[07:47:19.0000] <JakeA>
annevk: so how are you telling the difference between the two? The best I could think of was, in the second case, the response was gained by making a range request

[07:48:30.0000] <annevk>
JakeA: yeah, you mark the response somehow

[07:49:07.0000] <annevk>
JakeA: "range-requested flag" or some such

[07:49:20.0000] <JakeA>
annevk: That's the solution I wrote for attack 4, right?

[07:49:53.0000] <JakeA>
"Fetch should reject if the original request did not have a range header, but the service worker provides a response that is opaque, partial, and was requested with a range header."

[07:50:06.0000] <annevk>
JakeA: yeah

[07:50:11.0000] <JakeA>
sold

[07:50:20.0000] <annevk>
JakeA: I guess you're saying I should have said "agreed" instead :-p

[07:50:51.0000] <JakeA>
annevk: haha, I thought at first you were proposing an alternative

[07:52:45.0000] <annevk>
JakeA: thanks for continuing to tackle this

[07:53:34.0000] <JakeA>
annevk: np, about time really. I'll rebase that PR then make changes in additional commits.

[08:16:03.0000] <Emil>
annevk: https://bugs.chromium.org/p/chromium/issues/detail?id=815142 now its open

[08:16:06.0000] <Emil>
it's

[09:24:03.0000] <norbert>
hi all; I'm wondering why validator.w3.org says "No Referer header found!" for the link in the top-right of https://www.norbertdejonge.nl/

[09:30:58.0000] <norbert>
ankh of #w3c helped me out; the link had to be https (can't send the header from https to http)

[09:46:17.0000] <annevk>
norbert: you can with referrer-policy, but that's a better fix

[09:49:48.0000] <norbert>
ok :)

[11:25:27.0000] <TabAtkins>
annevk: Nothing "marks errors" anywhere in CSS, invalid things are always silently dropped.  (At most, DevTools might report something, but that can happen regardless of specs.)

[12:28:20.0000] <TabAtkins>
Is there a reasonable notion of what base URL to automatically use for URL-things created in JS?

[12:28:30.0000] <TabAtkins>
Like, by default.

[12:29:46.0000] <aklein>
TabAtkins: looks like for `new Image()` it's done like this: "Let document be the current global object's associated Document."

[12:30:25.0000] <TabAtkins>
That's exactly analogous to the sort of object I was asking the question about, thanks!

[12:30:55.0000] <aklein>
of course Image is super-old, so I could imagine someone coming up with a better way to do it :)

[12:31:00.0000] <aklein>
"better"

[12:31:39.0000] <TabAtkins>
I mean, that's probably the most reasonable way to do it anyway.

[12:32:08.0000] <TabAtkins>
I'm gonna put in some advice that if people want a relative URL resolved in a particular way, they should use the URL constructor and supply their own.

[12:52:57.0000] <annevk>
aklein: it does not get the base URL from the entry settings object or some such?

[12:53:36.0000] <annevk>
TabAtkins: note that you cannot rely on there being a document

[12:53:49.0000] <aklein>
annevk: hmm, maybe Image is a bad example since it requires a document

[12:54:04.0000] <aklein>
fetch is probably what you're thinking?

[12:54:06.0000] <TabAtkins>
I'm probably fine with just failing to absolutize if there's no document.

[12:55:18.0000] <annevk>
TabAtkins: pretty crappy for worklets et al?

[12:55:42.0000] <TabAtkins>
Ah, they have a URL, right.

[12:55:58.0000] <TabAtkins>
Man, all this ambient information floating around in DOM is hard for me to keep track of. ^_^

[13:01:39.0000] <annevk>
Designed a long time ago

[13:01:52.0000] <annevk>
“Designed” I suppose

[13:48:26.0000] <Domenic>
TabAtkins: annevk: this is fixable!

[13:48:36.0000] <Domenic>
I think you just want to use the current or relevant settings object's API base URL

[13:48:49.0000] <Domenic>
relevant, unless in a constructor, then current

[13:49:23.0000] <Domenic>
That should just do the right thing and also be equivalent to the image thing

[13:49:44.0000] <Domenic>
(API base URL is derived from the active document for Window global objects; and is set correctly otherwise for worker/worklet/etc. global objects.)

[13:50:05.0000] <TabAtkins>
Nice

[14:16:29.0000] <MikeSmith>
TabAtkins: I notice the https://developer.mozilla.org/en-US/docs/Web/CSS/%40charset article describes @charset as an at-rule, so I’d like to edit that article to correct it

[14:16:32.0000] <MikeSmith>
but

[14:17:19.0000] <MikeSmith>
in looking through https://drafts.csswg.org/css-syntax-3/ I don’t really see a definition of what @charset is

[14:17:45.0000] <MikeSmith>
I see a note that says:

[14:17:51.0000] <MikeSmith>
> Note: Note that the syntax of an encoding declaration looks like the syntax of an at-rule named @charset,

[14:18:49.0000] <MikeSmith>
so maybe I could edit the article to have it refer to @charset as the CSS “encoding declaration”?

[14:19:48.0000] <MikeSmith>
otherwise, calling it, e.g., “the @charset byte sequence” doesn’t see so great

[14:20:07.0000] <MikeSmith>
maybe “@charset statement”

[14:20:53.0000] <MikeSmith>
anyway it would help if the spec itself had some formal definition of it, to refer to

[15:03:32.0000] <TabAtkins>
MikeSmith: It is an at-rule, in that it conforms to the general at-rule grammar. It's just not a valid CSS at-rule, as in it's not defined to exist.  We use the term "at-rule" to refer to anything that matches the generic grammar, tho.

[15:04:37.0000] <TabAtkins>
Note that in CSS2, @charset *was* called an actual at-rule, even tho it was only paid attention to according to the stringent byte-sequence rules that Syntax describes.  We just drop it from the stylesheet now, per spec, while before it would stick around and do nothing.

[15:04:49.0000] <MikeSmith>
ah OK

[15:04:57.0000] <MikeSmith>
thanks for the clarification


2018-02-24
[11:38:10.0000] <railgun>
travis failed for #3484 since it couldn't download something (step 6)

[11:42:57.0000] <railgun>
#3477 fails from RFC2119 (need to fix the non-normative part, but not sure how)

[12:34:26.0000] <railgun>
#3484 passes now, for reference the affected build was https://travis-ci.org/whatwg/html/builds/345723038#L496

[14:48:58.0000] <MikeSmith>
railgun: for #3477, change “may” to “can” in “Different implementations may have slightly different interpretations of "quality"”


2018-02-25
[16:04:18.0000] <railgun>
MikeSmith: that worked thanks! I assume "may" can only be used for normative statements?

[16:08:57.0000] <MikeSmith>
railgun: yes

[16:09:05.0000] <MikeSmith>
same for “should”

[16:09:59.0000] <railgun>
ok


2018-02-26
[00:23:46.0000] <annevk>
Domenic: even if you use current it's still ambient, no?

[01:59:54.0000] <annevk>
Chrome implements out-of-process <iframe>s: all good.

[01:59:54.0000] <annevk>
Firefox (maybe mostly bz) takes a look: you know, the @htmlstandard is broken.

[02:10:38.0000] <Ms2ger>
Firefox implements ImageBitmap: all good

[02:11:04.0000] <Ms2ger>
I try to check how something works in Firefox: "Gah. Your tab just crashed."

[02:16:46.0000] <annevk>
Did you file a bug? Haven't seen many crashes myself, but also haven't been testing ImageBitmap much, mostly refactoring

[02:43:30.0000] <Ms2ger>
Yeah

[02:44:20.0000] <Ms2ger>
annevk, if you pass the same object twice in transferList when structured cloning, where does the spec handle that?

[02:47:09.0000] <annevk>
Ms2ger: good question, maybe the throwing early on https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer needs to be moved down

[02:47:17.0000] <annevk>
early on in*

[02:48:28.0000] <annevk>
Ms2ger: would need to create a test where StructuredSerializeInternal throws something other than a DataCloneError to see if they actually happen later

[02:56:22.0000] <annevk>
Ms2ger: curiously Safari does not throw on buffer = new ArrayBuffer(10);postMessage(null, "*", [buffer, buffer]);

[03:07:09.0000] <annevk>
Ms2ger: are you going to file issues here?

[03:07:22.0000] <Ms2ger>
Yeah, in a minute

[03:09:15.0000] <annevk>
I can never remember how to write a getter in an object literal

[03:10:48.0000] <annevk>
So buffer = new MessageChannel().port1;postMessage({ get data() { throw 'hi'; } }, "*", [buffer, buffer]); suggests duplicates are caught earlier on though

[03:11:35.0000] <annevk>
So basically before we set memory[transferable] we should have "If memory[transferable] exists, throw a ..."

[03:18:28.0000] <annevk>
At least it's an easy fix...

[03:25:27.0000] <Ms2ger>
https://github.com/whatwg/html/issues/3507

[05:30:06.0000] <annevk>
Ms2ger: look what you made me do: https://github.com/w3c/web-platform-tests/pull/9672

[05:38:43.0000] <Ms2ger>
Thanks :)

[06:33:37.0000] <gsnedders>
"When the document's character encoding is ISO-8859-8, the following rules are additionally expected to apply, following those above:" (from HTML rendering)

[06:33:40.0000] <gsnedders>
what. even.

[06:33:49.0000] <gsnedders>
I mean my logic got lost a long time ago, but wow.

[06:46:32.0000] <annevk>
gsnedders: that is a lovely quirk

[06:46:48.0000] <gsnedders>
annevk: where does that even come from?!

[06:47:40.0000] <annevk>
gsnedders: I found it while trying to figure out why iso-8859-8-i could not be merged into iso-8859-8

[06:47:42.0000] <annevk>
gsnedders: see https://encoding.spec.whatwg.org/#legacy-single-byte-encodings

[06:48:18.0000] <annevk>
gsnedders: I suspect this was just an early hack to make bidirectional text easier

[10:14:07.0000] <TimothyGu>
tobie: it seems like @@unscopables already has a null prototype on WebKit

[10:14:10.0000] <TimothyGu>
tobie: per https://github.com/heycam/webidl/issues/496#issuecomment-356994768

[10:14:41.0000] <tobie>
TimothyGu: it crossed my mind right after I hit enter on that issue.

[10:15:05.0000] <tobie>
TimothyGu: #facepalm worthy

[10:16:19.0000] <tobie>
TimothyGu: I guess I can just close it.

[10:16:27.0000] <tobie>
TimothyGu: you're positive about this?

[10:19:50.0000] <TimothyGu>
err I'm not but seems like bz is

[10:20:05.0000] <TimothyGu>
tobie: ^^

[10:20:27.0000] <TimothyGu>
would help if someone with safari could confirm

[10:29:30.0000] <tobie>
TimothyGu: indeed. seems fixed (just checked). Should have done that before doing anything else.

[10:29:34.0000] <tobie>
Apologies

[15:07:25.0000] <Krinkle>
annevk: Curious on your thoughts regarding https://github.com/douglascrockford/JSLint/issues/222 - I couldn't quite figure out whether or not this is correct behaviour on the new URL spec.

[15:07:54.0000] <Krinkle>
TL;DR: Chrome expands href="http:foo" relative to  https://example.org/bar as http://example.org/foo, note the protocol switch


2018-02-27
[16:18:08.0000] <smaug____>
interesting. Blink leaks closed shadow DOM via focus event's relatedTarget

[16:19:38.0000] <smaug____>
it also propagates focus event from shadow DOM

[16:24:11.0000] <smaug____>
hayato: ^

[16:36:05.0000] <smaug____>
some old Safari version has similar issues, but I should update my macbook (which I boot perhaps twice a year :)).

[16:39:14.0000] <smaug____>
(except that apparently I can't update it. oh well)

[17:39:31.0000] <MikeSmith>
/me discovers https://timothygu.me/es-howto/

[17:40:16.0000] <MikeSmith>
bravo TimothyGu

[19:30:06.0000] <hayato>
smaug____:  That's bad news for us. :( Could you share a test case?  Does it happen only for focus events?

[19:30:29.0000] <hayato>
I am assuming it is not spec's issue. It's the bug of the implementation.

[21:49:11.0000] <annevk>
Krinkle: it is

[22:16:31.0000] <Krinkle>
annevk: Thx, also, it seems it didn't actually switch protocols. Or at least I couldn't reproduce it.

[22:16:46.0000] <Krinkle>
So http:foo is the same as 'foo', and ignores http vs https.

[22:23:59.0000] <annevk>
Krinkle: oh yeah, that is right, no switch in scheme

[23:24:09.0000] <MikeSmith>
gotta love Crockford’s commit message for the related change

[23:24:16.0000] <MikeSmith>
https://github.com/douglascrockford/JSLint/commit/0e5065a51a7602499aa500c1db4125145f5dbeb3

[23:24:19.0000] <MikeSmith>
one letter

[23:26:45.0000] <annevk>
That whole commit log is performance art

[23:26:53.0000] <MikeSmith>
heh

[23:26:54.0000] <annevk>
And rather useless for future maintainers

[23:27:14.0000] <MikeSmith>
style trumps utility

[23:29:32.0000] <MikeSmith>
anyway I hope he can make time to write a new/updated essay about how to fix HTML

[23:29:50.0000] <MikeSmith>
(speaking of performance art)

[23:32:27.0000] <annevk>
/me finds https://www.crockford.com/html/

[23:33:11.0000] <MikeSmith>
holy god it’s been 10 years

[23:33:14.0000] <MikeSmith>
hard to believe

[23:34:23.0000] <MikeSmith>
definitely overdue for new one

[23:47:46.0000] <ricea>
I never realised until now that gzip eliminates the size argument against UTF-8. Obvious in retrospect.

[00:34:14.0000] <annevk>
It seems we did adopt that one, restricting things to UTF-8

[00:34:31.0000] <annevk>
Although it's not enforced

[00:35:37.0000] <annevk>
ricea: btw, I'm in Tokyo most of next week; I don't think we need to discuss anything in person, but since I'll be at the Google office on Monday and Tuesday for the Web Components meeting maybe we should try and say hi

[01:13:15.0000] <smaug____>
looks like Safari preview leaks closed shadow dom too via focus event's relatedTarget

[01:13:21.0000] <smaug____>
or am I testing something wrong http://mozilla.pettay.fi/shadow_focus.html

[01:16:27.0000] <annevk>
smaug____: yeah, seems like a bug

[01:16:41.0000] <smaug____>
happens in blink too

[01:16:45.0000] <annevk>
smaug____: you raised a bug against DOM too about that needing to be redesigned, right?

[01:16:59.0000] <annevk>
smaug____: that is, more computation ahead of time or some such

[01:17:21.0000] <annevk>
https://github.com/whatwg/dom/issues/562

[01:17:21.0000] <smaug____>
hmm, was it about this

[01:17:34.0000] <annevk>
no

[01:17:38.0000] <smaug____>
there is the issue related to touch.target

[01:17:40.0000] <annevk>
just related

[01:17:41.0000] <smaug____>
I'm still trying to understand how focus should work

[01:18:50.0000] <smaug____>
webkit and blink seem to do something very different what is in the specs

[01:19:37.0000] <annevk>
Sigh, I thought all this had tests

[01:19:46.0000] <annevk>
Not enough I guess

[01:20:12.0000] <annevk>
smaug____: if there are no tests for this, feel free to file it as a whatwg/dom issue

[01:20:37.0000] <smaug____>
well, relatedTarget should be just not exposing shadow DOM

[01:20:38.0000] <smaug____>
and

[01:20:46.0000] <smaug____>
where does it say that focus event is composed?

[01:20:50.0000] <annevk>
smaug____: I guess maybe there aren't tests because it's hard to automate these

[01:21:02.0000] <smaug____>
perhaps I'm missing the latter thing somewhere

[01:21:20.0000] <annevk>
smaug____: it should be composed because it's a UI event, but not sure if that's explicitly stated atm

[01:21:51.0000] <smaug____>
DOM spec explicitly says event shouldn't be composed by default

[01:22:17.0000] <annevk>
smaug____: yeah, I'll file a bug against HTML to make focus events composed

[01:22:28.0000] <smaug____>
and https://html.spec.whatwg.org/multipage/interaction.html#fire-a-focus-event doesn't make focus event composed

[01:22:34.0000] <smaug____>
thanks

[01:25:40.0000] <annevk>
smaug____: also added you to the whatwg/components team

[01:25:52.0000] <smaug____>
k

[01:26:01.0000] <smaug____>
whatever that means :)

[01:27:26.0000] <annevk>
smaug____: you get more GitHub notifications about custom elements / shadow tree related issues

[01:27:39.0000] <annevk>
(your welcome)

[01:27:50.0000] <annevk>
😛

[01:28:27.0000] <annevk>
Hmm, now I'm reminded we still haven't defined focusin/out

[01:29:12.0000] <smaug____>
there we'll need to follow the broken model now implemented I guess in all the engines

[01:29:19.0000] <smaug____>
and not the reasonable model IE had

[01:32:03.0000] <annevk>
At least everyone agrees they are composed

[01:32:49.0000] <annevk>
smaug____: any idea why onfocusin/onfocusout do not exist?

[01:38:01.0000] <smaug____>
perhaps because focusin/out bubble, but focus/blur don't

[01:38:13.0000] <smaug____>
and onfoo are added to bubble phase

[01:38:17.0000] <smaug____>
just guessing

[01:39:21.0000] <smaug____>
might be confusing to get focusins/outs not targeted to your element using event handlers... I don't know.

[01:40:12.0000] <annevk>
I think we have lots of events like that which do have event handlers

[01:40:33.0000] <annevk>
This is probably just an oversight as they haven't been properly standardized thus far

[01:49:21.0000] <smaug____>
well, I was thinking the focus not bubbling and focusin bubbling difference in particular, not random event handler

[01:49:25.0000] <smaug____>
but yeah, dunno

[01:54:15.0000] <annevk>
smaug____: in Firefox if I invoke .focus() and then .remove() an element in the same task I don't seem to be getting both a focus and a blur event for it

[01:54:25.0000] <annevk>
smaug____: this works in Chrome (also fails in Safari)

[01:55:07.0000] <smaug____>
there is existing bug, IIRC, to dispatch events if focused element is removed from DOM

[01:55:19.0000] <annevk>
okay

[01:55:24.0000] <annevk>
I guess I'll just use .blur() for now

[02:17:18.0000] <annevk>
smaug____: so in https://searchfox.org/mozilla-central/source/dom/base/nsFocusManager.cpp#2254 we dispatch focus/focusin and blur/focusout

[02:17:34.0000] <annevk>
smaug____: focus/blur are done as script runner so presumably fire later therefore

[02:17:48.0000] <annevk>
smaug____: are there any other effects of them being added as a script runner?

[02:27:42.0000] <smaug____>
well, they don't technically fire sync, but just once the stack has unwound enough

[02:27:49.0000] <smaug____>
but no, there shouldn't be other differences

[02:28:08.0000] <smaug____>
except, if there are other scriptrunners waiting to be executed

[02:28:22.0000] <annevk>
smaug____: hmm, it seems focus fires before focusin

[02:28:40.0000] <smaug____>
the model is all broken

[02:28:48.0000] <smaug____>
isn't is explained in some github issue

[02:28:50.0000] <annevk>
smaug____: I guess https://w3c.github.io/uievents/#events-focusevent-event-order is not really implemented

[02:28:59.0000] <smaug____>
https://github.com/w3c/uievents/issues/88

[02:29:08.0000] <annevk>
Thanks, I only knew about https://www.w3.org/Bugs/Public/show_bug.cgi?id=25897

[02:29:19.0000] <annevk>
I think we should just move all of focus into HTML

[02:29:24.0000] <smaug____>
oh, maybe https://github.com/jquery/jquery/issues/3123

[06:36:35.0000] <annevk>
foolip: can you r+ https://github.com/w3c/web-platform-tests/pull/5188?

[08:35:47.0000] <csarven>
I'd love to cite "Please leave your sense of logic at the door, thanks!" with a preferred URL. Currently using https://blog.whatwg.org/

[08:36:15.0000] <csarven>
AFAIK, the statement is pretty old, but if anyone has a better URL, that'd be great

[09:03:41.0000] <annevk>
csarven: I don't think there's a canonical URL, it started here as a topic

[09:03:44.0000] <annevk>
(iirc)

[09:06:24.0000] <MikeSmith>
zcorpan: about https://github.com/validator/validator/issues/195, what’s the expected result for checking <input pattern="foo\'bar" name=x>

[09:08:05.0000] <zcorpan>
mathiasbynens: you're the regex expert :D ^

[09:10:13.0000] <zcorpan>
MikeSmith: "ES6 requires more strict syntax when "u" flag is specified for RegExp (see the difference between [+U] and [~U] there), and it rejects some patterns that was working without "u" flag." from https://github.com/whatwg/html/issues/439

[09:10:40.0000] <zcorpan>
MikeSmith: so \' should be a syntax error

[09:10:49.0000] <MikeSmith>
OK

[09:11:44.0000] <MikeSmith>
well if the JS parser is supposed to throw/reject for `new RegExp("foo\'bar", "u")`, no parser I’ve tested actually does that

[09:12:54.0000] <MikeSmith>
https://mathiasbynens.be/notes/es6-unicode-regex#support seems to indicate that Firefox, Chrome, and WebKit all should

[09:13:51.0000] <MikeSmith>
or maybe doing just `new RegExp("foo\'bar", "u")` is not the way to test it?

[09:13:55.0000] <csarven>
annevk: Thanks. I suppose I could use an irc: URL ;) The http: URL is nice though given a snapshot of the blog from Internet Archive

[09:20:30.0000] <gsnedders>
MikeSmith: are you sure you aren't wanting "foo\\'bar"?

[09:20:43.0000] <gsnedders>
MikeSmith: because "foo\'bar" is the same as "foo'bar"?

[09:20:48.0000] <MikeSmith>
oh

[09:20:54.0000] <gsnedders>
/me can't remember much about ES6 regexps tho

[09:28:05.0000] <MikeSmith>
gsnedders: OK, thanks, yeah Firefox, Chrome, and WebKit all throw for `new RegExp("foo\\'bar", "u")`

[09:29:28.0000] <gsnedders>
(I can't remember what the semantics of /foo\'bar/u would be, I think that would also throw?)

[09:36:41.0000] <MikeSmith>
dunno

[10:31:59.0000] <tobie>
Are there constants on globals beyond window.TEMPORARY and window.PERSISTENT?

[10:32:13.0000] <TimothyGu>
MikeSmith: thanks! please let as many people know about it as possible. it's difficult

[11:04:12.0000] <foolip>
annevk: done and merged!

[11:04:56.0000] <foolip>
tobie: depends on what you'd classify as a constant. window.offscreenBuffering is always true

[11:06:02.0000] <tobie>
foolip: IDL constants.

[11:07:17.0000] <foolip>
tobie: I know of no others. Mark Dittmer might be able to search to confirm absence more widely

[11:07:58.0000] <tobie>
I’ll give searchfox a spin too.

[11:16:33.0000] <zcorpan>
MikeSmith: yeah `new RegExp("foo\\'bar", "u")` is the right test

[13:47:39.0000] <MikeSmith>
zcorpan: OK, thanks


2018-02-28
[21:34:54.0000] <hayato>
smaug____: Thank you for the test case:  http://mozilla.pettay.fi/shadow_focus.html

[21:35:36.0000] <hayato>
smaug____: I've confirmed. At least, it is an unexpected behavior to me. I guess it's Blink's bug.

[21:35:57.0000] <hayato>
I happens also in open shadow root.

[21:36:05.0000] <hayato>
Let me file a bug for Blink.

[00:58:19.0000] <annevk>
JakeA: minor nit: you probably want to say origin of the last URL

[00:59:01.0000] <annevk>
JakeA: it's an interesting addition to the same-origin policy this

[00:59:21.0000] <annevk>
JakeA: and I guess it wasn't quite thought out back when we added media elements and partial requests

[01:00:37.0000] <JakeA>
annevk: I'm worried about origin A redirecting to different resources on origin B

[01:01:12.0000] <JakeA>
annevk: Another thing we'll have to decide is where the next partial request goes. Does it go back to the original url, or the final url in the previous response

[01:01:19.0000] <JakeA>
I think Firefox & Chrome do different things here

[01:02:04.0000] <annevk>
JakeA: oh right, same URL might be correct given it's partial requests, sorry

[01:03:04.0000] <JakeA>
annevk: https://github.com/whatwg/fetch/issues/145 "denied responses to range requests if their origin is distinct from the origin response for the initial request" - so it sounds like Chrome does what you suggest

[01:03:39.0000] <JakeA>
annevk: but I don't think Chrome goes back to the src for the next part.

[01:06:23.0000] <annevk>
JakeA: I vaguely recall mkwst saying that

[01:06:32.0000] <annevk>
JakeA: that's probably reasonable

[01:06:52.0000] <JakeA>
annevk: but may become unreasonable with a service worker in the middle

[01:07:07.0000] <JakeA>
I'll make a note in the issue

[01:07:35.0000] <annevk>
JakeA: can the service worker make them distinct?

[01:07:58.0000] <annevk>
JakeA: I thought the response URL would win, or maybe not with synthetic?

[01:08:44.0000] <JakeA>
annevk: The service worker could respond with resource A from origin B, then on the next range request respond with resource B from origin B.

[01:09:30.0000] <JakeA>
annevk: This isn't possible in Chrome today, as it goes straight to origin B to request the second part, so origin B gets to decide where the next part is appended from

[01:09:41.0000] <JakeA>
annevk: but with a service worker, origin A gets a say each time

[01:13:16.0000] <JakeA>
(it would be difficult to respond using a particular range from origin B, since I can't create the range headers myself, but I might be able to convince a media element to do it, then keep a clone of the response around in the service worker to reuse later)

[01:22:04.0000] <annevk>
JakeA: but the media element could reject resource B for not being the same URL, no?

[01:22:36.0000] <annevk>
JakeA: or the Fetch "range request" algorithm, which seems like a better place to enforce such security restrictions

[01:23:38.0000] <JakeA>
annevk: but it wouldn't reject if it was just checking the origin of the last url

[01:24:30.0000] <annevk>
JakeA: I was already convinced that same URL would be more reasonable

[01:24:36.0000] <JakeA>
ah sorry

[01:24:42.0000] <annevk>
JakeA: or does Chrome currently allow that URL to redirect elsewhere within the same origin?

[01:25:21.0000] <annevk>
JakeA: or is that a request with redirect mode set to "error"? (that'd make more sense to me)

[01:26:07.0000] <JakeA>
annevk: I'll test that. But that seems ok if it goes straight to origin B. Origin B can redirect to anywhere else on origin B. But if Chrome does do that, I don't know if it's behaviour we need to preserve.

[01:26:31.0000] <JakeA>
annevk: I think this stuff needs to sit with the media element. Only it has the concept of a single piece of media. The fetch spec doesn't have the state of previous requests.

[01:27:37.0000] <annevk>
JakeA: I think we should have a helper in Fetch, perhaps at a higher-level than the fetch call

[01:28:00.0000] <annevk>
JakeA: there's been talk about using range requests for images to figure out width/height early on

[01:28:12.0000] <annevk>
JakeA: we might get other contexts that want to do range requests

[01:28:28.0000] <annevk>
JakeA: seems problematic if they don't reuse the security infrastructure

[01:30:06.0000] <JakeA>
annevk: agreed. I've already made the privileged headers flag not-exported, so you have to go through the range request helper. I'll add more stuff to that like url history.

[02:22:41.0000] <kochi>
MikeSmith: what IRC channel should we use for webcomponents F2F?  irc.w3.org#webplat ?

[02:24:24.0000] <MikeSmith>
kochi: yeah that should work

[02:25:15.0000] <kochi>
MikeSmith: you seem not on the channel...

[02:25:43.0000] <MikeSmith>
yeah, I didn’t know that channel actually existed :)

[02:25:55.0000] <MikeSmith>
I have never been on it as far as I can remember

[02:26:03.0000] <kochi>
MikeSmith: #webapps is superceded by #webplat IIUC, but much fewer participants there

[02:26:11.0000] <MikeSmith>
oh

[02:26:24.0000] <kochi>
We used the channel at TPAC last year.

[02:26:24.0000] <MikeSmith>
maybe #webapps is the better choice, then?

[02:26:29.0000] <MikeSmith>
ah OK

[02:26:55.0000] <MikeSmith>
yeah I didn’t attend any of the TPAC meetings of that group

[02:27:27.0000] <kochi>
/me thinks it's weird to chat about the topic in #whatwg channel...

[02:27:32.0000] <MikeSmith>
heh

[02:27:53.0000] <annevk>
Well the majority of the features are now defined by WHATWG standards so might as well

[02:27:57.0000] <kochi>
So WebPlat is the official working group name now, I think #webplat seems better now.

[02:28:08.0000] <MikeSmith>
kochi: sgtm

[02:29:00.0000] <kochi>
Added IRC channel info at https://github.com/w3c/WebPlatformWG/blob/gh-pages/meetings/18-03-Web-components.md

[02:30:08.0000] <kochi>
/me referred https://www.w3.org/WebPlatform/WG/ for the working group name.

[02:34:43.0000] <kochi>
BTW it may be too late to announce, but we are planning to have a group dinner on the first day.

[02:35:23.0000] <kochi>
Probably we can get together and go to some restaurants, but I'm trying to book for ~20 people.

[05:06:54.0000] <annevk>
JakeA: I'm looking at createImageBitmap() again

[05:07:07.0000] <annevk>
JakeA: if we want SVG to resize early on, how does that work together with  sourceRectangle?

[05:10:03.0000] <annevk>
JakeA: I guess we should just try to make it work, even if it results in a bunch of special casing...

[05:11:26.0000] <JakeA>
annevk: Yeah, the problem is you want the rectangle applied before resizing for bitmap images, but for vector you want a scaled version of the rectangle applied after rasterisation

[05:11:58.0000] <JakeA>
annevk: for bitmaps it needs to be applied before resizing to avoid pixels outside the rectangle leaking through

[05:12:42.0000] <annevk>
JakeA: I guess you basically need to scale the sourceRectangle too

[05:13:15.0000] <annevk>
Although that doesn't quite work either

[05:13:17.0000] <annevk>
Ugh

[05:14:13.0000] <JakeA>
annevk: yep. I think, early on, you need to "if vector", then create a bitmap image that's the final-scale of the SVG, and transform the rectangle by the same amount. Then you can go through the same steps as bitmap images

[05:14:54.0000] <JakeA>
annevk: Implementations should be encouraged to avoid rasterising parts of the SVG that are cropped out, but that can be a note

[05:20:01.0000] <annevk>
JakeA: the current text has this oddity too

[05:20:58.0000] <annevk>
JakeA: if sourceRectangle is 0x0x100x100 and resize is 200x200, and input has no dimensions, then first you size input to 200x200, then take out the top left corner, then resize that to 200x200

[05:21:08.0000] <annevk>
JakeA: I guess that's reasonable?

[05:26:36.0000] <annevk>
JakeA: the thing I was talking about is that if input is 100x100, and sourceRectangle is 0x0x50x50, and resize is 200x200, you cannot render at 200x200 and then take 0x0x50x50 from that, you need to render at 800x800 and take 0x0x200x200 from that, right?

[05:27:02.0000] <JakeA>
annevk: The intrinsic example is weird, but I can't think of a better way

[05:28:07.0000] <JakeA>
annevk: yeah, that's right.

[05:28:24.0000] <annevk>
It's a little annoying that the math for SVG is totally different

[05:30:13.0000] <annevk>
Oh maybe it's not so much

[05:30:20.0000] <JakeA>
annevk: Like this https://gist.github.com/jakearchibald/6ca3400071631a51e41bc9d10107fa60

[05:31:15.0000] <annevk>
JakeA: except that rendering as a bitmap and resizing a bitmap happen at different stages, so it's a little more complicated

[05:31:33.0000] <annevk>
JakeA: also, you left out all the complicated bits :p

[05:31:40.0000] <JakeA>
haha yeah

[05:32:23.0000] <JakeA>
annevk: But now, for vectors, the resize size is the same as the bitmap size, so that doesn't matter.

[05:33:09.0000] <JakeA>
(or, it will be after cropping)

[05:33:49.0000] <annevk>
JakeA: except you cannot really reset sourceRectangle in the algorithm that renders image data, but I guess that'll have to leak somehow

[05:36:55.0000] <JakeA>
annevk: Couldn't you do it just before 1.6.svg.4.1? https://whatpr.org/html/3424/imagebitmap-and-animations.html#dom-createimagebitmap, just before "rendering image data as a bitmap" figure out what the source rectangle should be

[05:37:31.0000] <JakeA>
annevk: Another problem is figuring out which media queries to apply within the SVG. I'm pretty fond of what Edge does here https://jakearchibald.com/2016/svg-media-queries/

[05:38:02.0000] <annevk>
JakeA: then I'd end up duplicating since Blob needs to do the same thing

[05:38:19.0000] <annevk>
JakeA: at least, I'm assuming we want equal support for SVG in Blob

[05:39:01.0000] <annevk>
I'm considering just passing it on as image data instead of rendering it at that point

[05:39:22.0000] <annevk>
And making crop bitmap data to the source rectangle with formatting deal with both vector images and bitmaps

[05:40:19.0000] <JakeA>
annevk: Yeah, that could work.

[05:41:00.0000] <annevk>
JakeA: do you know if none vector images without intrinsic dimensions?

[05:41:14.0000] <annevk>
/me doesn't

[05:42:15.0000] <JakeA>
annevk: nah, I can't think of how that'd be possible

[05:43:06.0000] <JakeA>
I guess it'd be a format that has n pixels, but no width, but I'm not aware of anything like that

[06:02:54.0000] <beverloo>
annevk, I was planning to land notifications#127 after your change, but we can flip it around if I send the WPT change now?

[06:05:23.0000] <annevk>
beverloo: yeah, seems better in that order given it simplifies the setup a bit

[06:17:53.0000] <beverloo>
annevk, ok, thanks! I'll squash and rebase the spec change, can you help merge the WPT change?

[06:19:04.0000] <annevk>
beverloo: done

[06:40:04.0000] <fgasper>
WebSocket question: Has there ever been consideration of allowing browsers to read the HTTP status code from a rejected handshake? I see the LS section that stipulates that clients shouldn’t distinguish such cases other than to see a 1006 status, but I don’t see why this is any different from a normal XHR response, which does give the HTTP status codes.

[06:42:56.0000] <annevk>
fgasper already left?

[07:08:00.0000] <fgasper>
WebSocket question (repost): Has there ever been consideration of allowing browsers to read the HTTP status code from a rejected handshake? I see the LS section that stipulates that clients shouldn’t distinguish such cases other than to see a 1006 status, but I don’t see why this is any different from a normal XHR response, which does give the HTTP status codes.

[07:18:44.0000] <Ms2ger>
annevk, they're back

[08:28:56.0000] <annevk>
fgasper: https://github.com/whatwg/html/issues/2401

[08:29:29.0000] <fgasper>
@annevk Thanks!

[09:44:13.0000] <devsnek>
what goes in the transferList for StructuredSerializeWithTransfer

[09:44:39.0000] <annevk>
devsnek: second/third argument of postMessage(), depending on the variant

[09:45:13.0000] <annevk>
devsnek: if you click on StructuredSerializeWithTransfer you'll find all its callers

[09:45:18.0000] <devsnek>
ah ok

[09:45:30.0000] <annevk>
(that generally goes for definitions in WHATWG standards)

[09:46:32.0000] <devsnek>
i want to propose a standard for something like that api except with a standardized Blob (or something similar) intermediary

[09:47:05.0000] <devsnek>
sorta like an alternative to the current json api

[09:47:08.0000] <annevk>
devsnek: you mean standardizing the byte format?

[09:47:12.0000] <devsnek>
yea

[09:47:19.0000] <devsnek>
i realize that would probably slow things down

[09:47:36.0000] <annevk>
devsnek: well, browsers do have such a thing under the hood

[09:47:54.0000] <devsnek>
from what i can tell they all have their own byte format for the serialized stuff

[09:48:01.0000] <annevk>
devsnek: yes

[09:48:11.0000] <annevk>
devsnek: do you want it for network transfer or something else?

[09:48:24.0000] <devsnek>
whatever you would use json for

[09:48:53.0000] <devsnek>
json is kinda a lost cause in my mind as we keep getting more and more types and structures etc

[09:49:53.0000] <annevk>
I've often thought it'd be cool to have it standardized, especially if Node.js were game

[09:50:00.0000] <devsnek>
node already exposes v8's serdes

[09:50:10.0000] <devsnek>
i imagine this as a standardized version of that api

[09:50:12.0000] <annevk>
Not sure transferring makes sense for the byte format though

[09:50:21.0000] <devsnek>
yea thats why i was trying to figure out what that way

[09:50:23.0000] <devsnek>
was*

[09:50:48.0000] <annevk>
Transferring is more of an optimization when you don't have a byte format, to avoid duplicating the memory allocation

[09:50:52.0000] <devsnek>
yea

[09:51:44.0000] <gsnedders>
Also impls will likely want their own custom byte format

[09:51:49.0000] <gsnedders>
because object representations etc. vary

[09:51:55.0000] <devsnek>
ya thats my current worry

[09:51:58.0000] <gsnedders>
and the goal is really to make the transfer as low cost as possible

[09:52:03.0000] <annevk>
devsnek: I guess it's worth filing a whatwg/html issue to discuss it

[09:52:11.0000] <devsnek>
well i'm ok with it not being the fastest thing ever

[09:52:14.0000] <devsnek>
json isn't known for speed

[09:52:27.0000] <devsnek>
my current goals are: all the js types and structures (within reason so no weakmaps, functions, etc) and being cold storage capable

[09:52:44.0000] <devsnek>
which i think also implies a saved blob of data might be served to any browser

[09:52:57.0000] <devsnek>
or from any browser

[09:53:15.0000] <annevk>
devsnek: I think if you go beyond what StructuredSerialize can do you'll find you'll have to figure out how to extend that first

[09:53:26.0000] <devsnek>
wdym

[09:53:42.0000] <annevk>
devsnek: that abstract operation is basically the limit of what can be reasonably serialized at the moment

[09:53:45.0000] <devsnek>
like the types and structures it can currently handle?

[09:53:54.0000] <jyasskin>
devsnek: So you probably don't care about transfers, just StructuredSerializeForStorage?

[09:53:57.0000] <devsnek>
yea

[09:54:08.0000] <devsnek>
transfers are pointless with this

[09:54:40.0000] <annevk>
Hmm yeah, StructuredSerializeForStorage is the relevant one

[09:55:25.0000] <jyasskin>
This seems related to some bits of Web Assembly too.

[09:55:48.0000] <devsnek>
how come structured serialize doesn't handle symbols

[10:01:56.0000] <annevk>
devsnek: I think we didn't want to decide on the scope of GlobalSymbolRegistry

[10:02:25.0000] <devsnek>
i guess that does count as a form of scope heh

[10:02:28.0000] <devsnek>
makes sense

[10:08:09.0000] <devsnek>
https://github.com/whatwg/html/issues/3517

[10:54:25.0000] <railgun>
when I started contributing to whatwg/html I had the goal to decrease the issue count by cleaning up older issues

[10:54:51.0000] <railgun>
but it seems like every issue I submited a pull request for 3 more popped up in its place haha

[10:57:10.0000] <railgun>
s/submited/submitted/

[11:02:17.0000] <devsnek>
heh

[11:18:18.0000] <Domenic>
Yeah I made a graph once of issue count and it depressed me.

[11:24:14.0000] <jyasskin>
But the phenomenon of fixing one issue revealing 3 more, doesn't mean that fixing the one was useless. The other 3 had always been issues even if we didn't know about them, and the one's still fixed. </daily-encouragement>

[11:29:38.0000] <Domenic>
<3

[11:30:31.0000] <railgun>
I haven't maintained a large repository before, so I still can't imagine hundreds of open issues (even though most of them are probably waiting for something else)

[11:31:23.0000] <railgun>
but if there are any issues that I can do feel free to link me, I feel like I'm missing some of the easier ones that aren't tagged good first issue

[11:31:25.0000] <Domenic>
We don't have it as bad as some; cf. nodejs/node, npm/npm, angular/angular

[11:32:51.0000] <railgun>
Domenic: when I look at those repositories I feel like most of the issues are actually questions

[11:34:27.0000] <Domenic>
Yeah, although a lot are bugs in disguise, albeit probably duplicate ones

[11:37:36.0000] <railgun>
I suppose that's the cost of trying to maintain a large code base

[12:44:39.0000] <annevk>
whatwg/html holds a lot of browser technical debt

[12:45:10.0000] <annevk>
And no browser is serious in paying it off

[13:11:26.0000] <railgun>
is there any valid reason why multiple browser engines exist? It seems like there would be a lot of duplicate code between them

[13:43:17.0000] <railgun>
apparently the link https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+user%3Awhatwg does not work if you're not signed into GitHub

[13:45:02.0000] <railgun>
was going to make a pull request fixing the link but I'm not sure if there's one that works all the time

[13:50:51.0000] <railgun>
https://github.com/search?utf8=%E2%9C%93&q=is%3Aopen+label%3A%22good+first+issue%22+user%3Awhatwg&type=Issues seems to work but the interface is slightly different (arguably better since it includes an excerpt?)

[13:52:18.0000] <railgun>
can I make the update here?

