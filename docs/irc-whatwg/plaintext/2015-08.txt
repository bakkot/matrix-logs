2015-08-01
[17:23:55.0000] <littledan>
Hi everyone

[17:24:17.0000] <littledan>
would anything bad happen if, in ES, we added 'global' to point to the WindowProxy?

[20:53:00.0000] <xxMatiasFCxx>
Help: A form that used to work flawlessly now shows: Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check http://xhr.spec.whatwg.org/.

[21:08:52.0000] <miketaylr>
xxMatiasFCxx: the form should still work

[21:09:02.0000] <miketaylr>
the message is just there to encourage you to not use sync xhr

[21:09:14.0000] <xxMatiasFCxx>
lol it was a very stupid mistake from me lol, deleted a cname and was causing the problem lol

[21:09:18.0000] <xxMatiasFCxx>
i'm a shamed

[21:09:38.0000] <xxMatiasFCxx>
btw what is this new warning ? is it going to stop working someday ?

[21:09:51.0000] <miketaylr>
probably not for a very long time

[21:10:22.0000] <miketaylr>
but if you change it to async xhr, the form won't lock up the user's browser

[21:10:34.0000] <miketaylr>
which is a nicer behavior

[21:15:20.0000] <xxMatiasFCxx>
and what do you mean by block ?

[21:18:10.0000] <miketaylr>
xxMatiasFCxx: until the server responds (or the request times out), the browser UI will be "frozen"

[21:18:22.0000] <xxMatiasFCxx>
that doesn't happen to me heheeh

[21:18:26.0000] <miketaylr>
the UI thread is waiting on the sync xhr

[21:18:34.0000] <miketaylr>
see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests

[21:18:38.0000] <xxMatiasFCxx>
y just use jquery $.post

[21:18:58.0000] <xxMatiasFCxx>
actually $.ajax

[21:19:04.0000] <miketaylr>
here's a good article too http://blogs.msdn.com/b/wer/archive/2011/08/03/why-you-should-use-xmlhttprequest-asynchronously.aspx

[21:19:25.0000] <xxMatiasFCxx>
thanks miketaylr

[21:19:41.0000] <miketaylr>
np, cheers xxMatiasFCxx

[21:19:44.0000] <miketaylr>
bed time for me

[21:20:08.0000] <xxMatiasFCxx>
miketaylr, I should go to bed also :S

[21:20:10.0000] <xxMatiasFCxx>
gnite

[21:20:16.0000] <miketaylr>
nn

[23:01:07.0000] <annevk_>
Domenic: https://html.spec.whatwg.org/multipage/webappapis.html#concept-script under global object

[23:27:18.0000] <SimonSapin>
TabAtkins: well, maybe I am being pedantic, but you can only have one definition of the same function. It’s only indirectly, through generics, that you can make that definition do different things

[07:17:09.0000] <jelle>
what is the latest stable html5lib release? Since the 1.0b5 release sounds like it is beta

[09:20:43.0000] <Domenic>
annevk: did you see littledan's question above? "would anything bad happen if, in ES, we added 'global' to point to the WindowProxy?"

[09:22:38.0000] <Domenic>
annevk: reported https://www.w3.org/Bugs/Public/show_bug.cgi?id=29012 btw because that was my first attempt at finding this

[12:33:33.0000] <annevk>
Domenic: I didn't, but why do we want yet another alias for window?

[12:34:57.0000] <annevk>
littledan: just standardize self

[12:35:53.0000] <annevk>
littledan: at least that's already consistent across window and workers and wouldn't pose any risks

[12:37:54.0000] <annevk>
I believe we discussed this before

[12:38:04.0000] <annevk>
This comes up every six months or so?


2015-08-02
[17:24:25.0000] <TabAtkins>
SimonSapin: Hmm, so you're still single dispatch (on the first arg)? I got the impression that, say, From::from could be written to convert to many types, and the right one would get chosen based on what it gets stored into.  (I know you can write multiple versions of the function for different *source* types, by just defining the method in each source

[17:24:25.0000] <TabAtkins>
type.)

[20:17:17.0000] <Domenic>
annevk: well window and self and frames are getters which is a bit weird

[21:41:21.0000] <annevk>
Domenic: that is a good enough reason to duplicate? Hmm... Was changing self considered?

[22:42:37.0000] <cvrebert>
MikeSmith: I assume you'd be onboard with bumping SVG to SVG2 on http://platform.html5.org ?

[23:51:41.0000] <MikeSmith>
botie, tell cvrebert no, the SVG reference is one thing that should not be updated.

[23:51:42.0000] <botie>
will do

[23:52:52.0000] <SimonSapin>
TabAtkins: hum, right. Trait implementations are multi-dispatch

[23:56:27.0000] <MikeSmith>
oh lordy the SVG2 spec lists 10+ editors

[23:57:56.0000] <MikeSmith>
I think we could probably right a script that uses a very simple set of heuristics to decide whether a particular spec is likely a bad spec

[00:06:34.0000] <SimonSapin>
TabAtkins: So yeah, it’s a form of overloading, just not the same as C++. (This might off-topic here, feel free to join #rust on Mozilla IRC… or one of these http://edunham.net/2015/07/31/how_many_rust_channels_are_there.html)

[04:23:45.0000] <SimonSapin>
When parsing HTML from bytes, is there a way around keeping unbounded amount of input in memory in case the parser decides to "change the encoding"?

[06:03:23.0000] <MikeSmith>
SimonSapin: I thought the spec defined some limit on that

[06:03:32.0000] <MikeSmith>
like, the first 512 bytes

[06:03:57.0000] <SimonSapin>
MikeSmith: that’s " prescan a byte stream to determine its encoding"

[06:04:24.0000] <MikeSmith>
ah

[06:04:49.0000] <SimonSapin>
there is also "change the encoding" invoked by the tree builder

[06:05:12.0000] <SimonSapin>
https://html.spec.whatwg.org/multipage/#parsing-main-inhead:change-the-encoding

[13:13:47.0000] <ato>
What specifically is the concept called when elements like <p> don't require an end tag/is closed by the subsequent element?

[13:38:08.0000] <JoWie>
implied end tag?

[14:02:25.0000] <ato>
JoWie: Yes, thank you (-:


2015-08-03
[23:20:00.0000] <annevk>
Ugh, some kind of OS X autocorrect thing added a space between opaque and redirect

[23:20:17.0000] <annevk>
Fortunately that only happened in the commit message

[23:35:59.0000] <annevk>
SimonSapin: and UAs implement that beyond 1024 bytes?

[00:58:55.0000] <SimonSapin>
annevk: html5lib has code for it, but I’ll have to test it in other impls

[02:30:27.0000] <annevk>
Any love here for range.insert(nodes...)? https://www.w3.org/Bugs/Public/show_bug.cgi?id=27650

[02:49:37.0000] <annevk>
TabAtkins: using "<a spec=url>URL</a>" within DOM doesn't give the expected result

[03:01:12.0000] <JoWie>
why not make document fragments easier to use

[03:03:27.0000] <JoWie>
keep ranges as they are, and support something like document.createDocumentFragment(node1, node2, ...)

[03:03:56.0000] <annevk>
well, we could add that to new DocumentFragment() I guess

[03:04:11.0000] <annevk>
I guess the question is whether we'll ever need more arguments to support

[03:05:13.0000] <JoWie>
well in that case we could add a second method that is intended just for this convenience

[03:06:12.0000] <JoWie>
instead of using new DocumentFragment or document.createDocumentFragment

[03:06:39.0000] <JoWie>
could even add such a convenience method to collections

[03:06:54.0000] <annevk>
JoWie: maybe add that comment to that bug

[03:07:10.0000] <JoWie>
range.insertNode(document.getElementsByClassName('foo').toFragment())

[03:07:35.0000] <JoWie>
sure

[03:08:06.0000] <Ms2ger>
new DocumentFragment(...document.getElementsByClassName('foo'))?

[03:08:54.0000] <JoWie>
yes or that

[03:08:55.0000] <annevk>
Ms2ger: yeah, JoWie, I meant the "make DocumentFragment easier" comment

[03:09:13.0000] <annevk>
JoWie: that seems spot on, toFragment() a lot less

[03:17:25.0000] <JoWie>
posted the comment

[03:17:43.0000] <JoWie>
bugzilla redirected me to a completely different bug after I submitted it, very weird

[03:18:16.0000] <annevk>
it does that sometimes when stuff is part of a collection or so

[03:18:29.0000] <annevk>
so you get to see more bugs? I'm not really sure what the purpose is

[03:18:39.0000] <annevk>
the whole page refresh is kind of oldfashioned

[03:18:54.0000] <JoWie>
Changes submitted for bug 27650... then on the same page: Bug 27688 - Odd comment in DO...

[03:21:10.0000] <JoWie>
speaking of that bug annevk, does subclassing Array work well with the live-ness of the dom collections?

[03:21:40.0000] <annevk>
JoWie: not sure which bug you're talking about, but a subclass of Array would only be used for a snapshot

[03:21:50.0000] <JoWie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27688#c3

[03:22:10.0000] <JoWie>
the one i was redirected to ;)

[03:23:24.0000] <annevk>
Weird, that one is fixed

[04:37:19.0000] <SimonSapin>
Hixie: Are you aware of a case where "prescan a byte stream to determine its encoding" would fail to find an encoding when given 1024 bytes, but tree construction would still "change the encoding" based on a meta start tag in the first 1024 bytes?

[05:01:47.0000] <annevk_>
philipj: any opinions on https://www.w3.org/Bugs/Public/show_bug.cgi?id=27456 and https://bugzilla.mozilla.org/show_bug.cgi?id=1061578?

[05:02:06.0000] <annevk>
SimonSapin: I think hsivonen might have some statistics

[05:24:57.0000] <philipj>
annevk: ugh, namespace lookup?

[05:33:28.0000] <philipj>
annevk: commented on the bug, but haven't looked at any of this before

[05:36:48.0000] <annevk>
Hopefully Arkadiusz replies since indeed, ugh, namespaces

[05:37:17.0000] <annevk>
They're not the greatest APIs for dealing with them either

[05:43:31.0000] <philipj>
Are they supposed to reflect something like "the prefix->namespace" mappings that the parser would have used here?

[05:43:43.0000] <philipj>
move " to the end

[05:44:09.0000] <annevk>
philipj: something like that, I suppose

[05:44:14.0000] <annevk>
philipj: designed before my time

[05:44:24.0000] <philipj>
well, it sure looks weird as implemented in Blink

[05:45:56.0000] <philipj>
so I hope Arkadiusz will just tell me what to do :)

[05:57:29.0000] <annevk>
philipj: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25428?

[05:58:52.0000] <philipj>
annevk: hasFeature() now always returns true in Blink

[06:01:14.0000] <philipj>
annevk: I'll comment and close the bug

[06:01:21.0000] <annevk>
philipj: ta

[06:13:06.0000] <annevk>
MikeSmith: is there a way to close Bugzilla components for new bugs while still letting you mess around with existing bugs?

[06:13:46.0000] <annevk>
MikeSmith: I think other than HTML/Unwelcome, we're probably ready for such a switch within WHATWG and perhaps some WebAppsWG components

[06:15:51.0000] <annevk>
philipj: and https://www.w3.org/Bugs/Public/show_bug.cgi?id=27386?

[06:16:02.0000] <annevk>
/me is doing some bug triage today

[06:16:12.0000] <philipj>
/me can tell

[06:17:10.0000] <philipj>
annevk: how much effort do you want to spend trying to kill CDATASection?

[06:17:20.0000] <annevk>
I don't know

[06:17:29.0000] <annevk>
Ms2ger: ^^?

[06:17:56.0000] <annevk>
philipj: I have stopped caring about a lot of these things, although any simplification we can make would still be nice

[06:18:19.0000] <philipj>
I tried to measure the cases where CDATASection was serialized at one point, but failed, and even if we could measure it I don't know what it would say about the risk

[06:18:27.0000] <philipj>
Well, if it never happens then the risk is low

[06:19:19.0000] <philipj>
but since CDATASection can't be nuked thoroughly, I'd vote to just keep it around and wait until time machines become available

[06:20:38.0000] <Ms2ger>
I know I don't want to add it to Servo :)

[06:21:34.0000] <annevk>
philipj: why can't we nuke it thoroughly?

[06:21:47.0000] <philipj>
annevk: because createCDATASection is used

[06:21:59.0000] <annevk>
philipj: that could return a Text node?

[06:22:27.0000] <philipj>
it could, but it's not as thoroughly nuked as it could be

[06:22:42.0000] <annevk>
Well, the node is gone

[06:22:45.0000] <annevk>
That's what matters

[06:22:52.0000] <philipj>
sure, that's not bad

[06:23:00.0000] <Ms2ger>
createCDATASection itself is a lot less complexity compared to another Node type

[06:23:34.0000] <philipj>
since CDATASection inherits from Text there isn't much complexity here

[06:24:01.0000] <philipj>
I tried to remove it just to see, and it wasn't a lot of code that needed fixing or could be removed

[06:24:26.0000] <philipj>
that being said, I'd be happy to see it gone, I'm just not excited enough to spend a lot of effort figuring out how to do it

[06:25:32.0000] <annevk>
Thanks, let me summarize this in a new comment, I guess I'll just leave it open for now

[06:50:58.0000] <wanderview>
annevk: got time to talk about RequestMode and navigations?

[06:51:06.0000] <annevk>
wanderview: yes

[06:51:44.0000] <wanderview>
annevk: can you explain why you think navigations should get RequestMode 'same-origin'?  It seems navigations can normally redirect cross-origin, etc

[06:52:01.0000] <wanderview>
I guess google does this when you click on a search result, etc

[06:52:13.0000] <annevk>
wanderview: a navigation doesn't follow redirects

[06:52:49.0000] <annevk>
wanderview: each redirect is examined by the navigate algorithm and then acted upon with probably fresh request

[06:53:08.0000] <annevk>
wanderview: although whether we should model it that way is still a bit unclear to me

[06:54:05.0000] <wanderview>
annevk: I guess this annoyance I am running into is that RequestMode almost maps to our new gecko security policies: https://dxr.mozilla.org/mozilla-central/source/netwerk/base/nsILoadInfo.idl?from=nsILoadInfo.idl&case=true#38

[06:54:41.0000] <wanderview>
annevk: except for navigations... the navigations will get SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS I think... but I will have to special case RequestMode on navigations to force same-origin

[06:55:06.0000] <wanderview>
which makes me wonder if the same-origin RequestMode is correct

[06:55:23.0000] <annevk>
You think it should be "no-cors"?

[06:55:54.0000] <annevk>
Or a special mode?

[06:57:37.0000] <wanderview>
annevk: well, we used to have a "if client request, then do extra check" in HTTP Fetch step 2.2

[06:58:07.0000] <wanderview>
annevk: also, chrome currently gives navigations "no-cors" (but has the old extra client request check you removed)

[06:58:48.0000] <annevk>
wanderview: well, workers are same-origin, we agree on that, right?

[06:59:13.0000] <wanderview>
annevk: yes, although chrome also seems to give them no-cors... I think thats incorrect, though

[06:59:37.0000] <wanderview>
annevk: workers will get a SEC_SAME_ORIGIN security policy

[06:59:41.0000] <wanderview>
in gecko

[07:00:22.0000] <annevk>
we could keep say that navigations are no-cors and add a check for navigation requests (not clients)

[07:00:54.0000] <annevk>
maybe that's better and maybe even navigations keep some state around when they hit a redirect

[07:01:12.0000] <annevk>
e.g. I guess Referrer is still the same

[07:03:01.0000] <annevk>
wanderview: what does bz think?

[07:03:04.0000] <annevk>
wanderview: or jgraham?

[07:03:04.0000] <botie>
rumour has it jgraham is happy with that option

[07:03:14.0000] <annevk>
fascinating

[07:03:18.0000] <philipj>
annevk, smaug____, can you battle it about nullability of ClipboardEvent.clipboardData?

[07:03:21.0000] <annevk>
jgraham outsources his opinions to a bot

[07:03:49.0000] <annevk>
philipj: if we already shipped that, do it?

[07:03:57.0000] <annevk>
philipj: I don't care strongly

[07:04:13.0000] <wanderview>
annevk: I guess it depends what the purpose of RequestMode is... is it supposed to reflect the overall security policy for the request or is it really only there for service worker interception stuff?

[07:05:29.0000] <annevk>
wanderview: if you don't follow redirects automatically, its value is a whole lot less interesting

[07:05:58.0000] <annevk>
wanderview: unless we have some automated way of following redirects, where given a Request and Response you get a new Request

[07:06:22.0000] <wanderview>
annevk: let me ask you this... what motivated you to add RequestMode?

[07:06:44.0000] <philipj>
annevk: when will you be 30?

[07:06:48.0000] <annevk>
wanderview: I think someone asked if we could expose it to script

[07:07:16.0000] <annevk>
philipj: 363 days, unless it's one of those special years next, which I guess it might be?

[07:07:35.0000] <philipj>
annevk: so I guess happy recent birthday?

[07:07:45.0000] <annevk>
philipj: heh, yes

[07:08:36.0000] <annevk>
wanderview: the reason it exists at all is security decisions in Fetch of course, the reason it's exposed is mostly so you can ask for a policy in fetch()

[07:08:50.0000] <annevk>
wanderview: reflecting it on Request.prototype.mode was the next logical step

[07:12:36.0000] <wanderview>
annevk: are there other places its used besides Http Fetch step 2.2?

[07:15:19.0000] <wanderview>
/me looks

[07:16:06.0000] <annevk>
wanderview: yes, lots of places

[07:16:31.0000] <annevk>
wanderview: ah, the main reason actually that I didn't think "no-cors" made sense for navigate was that the response could never be opaque

[07:16:39.0000] <annevk>
wanderview: the response is always treated as same-origin

[07:17:12.0000] <annevk>
wanderview: so either you have some new kind of mode that doesn't cause the response to be masked, or you just always make same-origin requests to ever changing URLs...

[07:17:21.0000] <annevk>
sorry it took me a while to get to that

[07:18:00.0000] <wanderview>
annevk: I guess the main disconnect I am running into is that fetch expects new RequestMode values for redirects while gecko's security policy flag encompasses redirects (I think)

[07:19:10.0000] <annevk>
wanderview: I don't expect new values for redirects...

[07:19:23.0000] <wanderview>
annevk: new Request objects

[07:19:25.0000] <wanderview>
no?

[07:19:28.0000] <wanderview>
I thought thats what you said above

[07:19:28.0000] <annevk>
wanderview: I expect navigate to make new requests when its a redirect, since it doesn't follow them automatically

[07:19:39.0000] <annevk>
when it hits a redirect*

[07:21:37.0000] <annevk>
wanderview: I guess you're saying even for navigate we have some kind of callback all the way from Necko that navigate does something with before Necko follows the redirect?

[07:22:01.0000] <annevk>
wanderview: such a design seems somewhat distasteful...

[07:23:48.0000] <wanderview>
annevk: in gecko the docshell (window container thing) starts a network request... it then gets told when everything is done... the docshell checks the final URL on the network request to see if it ended up redirecting... all the redirects happen transparently in that single network request

[07:23:53.0000] <wanderview>
AIUI

[07:24:27.0000] <wanderview>
annevk: so we have the security policy settings that say "allow cross-origin or require same-origin", etc... in this case navigations will get a cross-origin policy which conflicts with your vision of RequestMode

[07:24:44.0000] <wanderview>
this is the only conflict between our security policy and RequestMode as far as I can tell

[07:26:43.0000] <annevk>
wanderview: I don't understand what it means for a navigation to have a cross-origin policy

[07:26:58.0000] <wanderview>
annevk: allow a cross-origin redirect

[07:27:10.0000] <wanderview>
cross-origin as defined by your original navigation URL

[07:27:12.0000] <annevk>
wanderview: but what does that mean for the response?

[07:27:21.0000] <annevk>
RequestMode is really about what kind of responses you allow

[07:27:29.0000] <annevk>
And "no-cors" allows opaque responses

[07:28:04.0000] <annevk>
And whenever you hit a redirect with navigation you need to do all kinds of things

[07:30:17.0000] <annevk>
wanderview: so either we make it "no-cors" and navigate needs to open up some opaque responses, but not others, ...

[07:30:53.0000] <annevk>
wanderview: or we keep it same-origin and each navigate attempt is a newish fetch with some accumulated state

[07:31:13.0000] <annevk>
wanderview: it's not entirely clear to me how the "no-cors" processing model would work

[07:31:44.0000] <wanderview>
annevk: our network stack is modeled differently from the fetch spec... makes it really hard to reason about the two

[07:32:03.0000] <annevk>
wanderview: say I navigate to http://example.com/redirect and end up at http://crossorigin.example/

[07:32:15.0000] <annevk>
wanderview: that second will become an opaque response if mode is "no-cors"

[07:32:33.0000] <annevk>
wanderview: it's not clear to me how we can allow that while disallowing arbitrary opaque responses

[07:32:46.0000] <annevk>
wanderview: though I guess we could compare the request and response URL or some such...

[07:33:18.0000] <annevk>
wanderview: that's why I suggested involving bz and maybe jgraham who have some experience with navigation and might know what's best

[07:33:25.0000] <wanderview>
annevk: isn't that exactly what we are saying behavior should be, though... the browser follows redirects on navigation even cross-origin... but we don't want a service worker to do an opaque cross-origin interception

[07:33:39.0000] <wanderview>
annevk: bz is on pto

[07:33:46.0000] <wanderview>
we could ask sicking

[07:33:52.0000] <annevk>
wanderview: the browser doesn't follow redirects automatically though

[07:33:55.0000] <wanderview>
when CA wakes up

[07:34:13.0000] <annevk>
wanderview: navigate does all kinds of things with the response before even deciding to go to the network again

[07:34:45.0000] <wanderview>
annevk: are you saying some redirects are not permitted?

[07:35:15.0000] <annevk>
wanderview: some redirects result in skype or some such

[07:35:30.0000] <annevk>
wanderview: for navigate

[07:35:53.0000] <annevk>
wanderview: whereas in fetch that would end up as a network error

[07:36:59.0000] <wanderview>
annevk: does fetch permit the case of clicking on a google link that goes to google and then redirects to the actual search result?

[07:37:31.0000] <annevk>
sure, the navigate algorithm is priveliged code

[07:37:45.0000] <annevk>
this is not Fetch, mind you, this is HTML

[07:37:56.0000] <annevk>
Fetch has nothing to do with navigate

[07:38:06.0000] <annevk>
it only supports not following redirects for it

[07:38:18.0000] <wanderview>
/me is thoroughly confused now.

[07:38:19.0000] <annevk>
as navigate is the only consumer that needs that

[07:38:32.0000] <annevk>
(though there's some API support for it added to fetch() too now)

[07:38:40.0000] <wanderview>
I'll just special case navigations to force same-origin RequestMode for now

[07:39:18.0000] <annevk>
wanderview: something else to consider, a navigate would never result in a service worker seeing a request for a cross-origin URL

[07:39:22.0000] <wanderview>
annevk: I think some of the confusion is coming from there being no rules for how to actually set RequestMode

[07:39:26.0000] <annevk>
wanderview: it will always be a request for a same-origin URL

[07:39:38.0000] <annevk>
wanderview: what do you mean, no rules?

[07:39:40.0000] <wanderview>
annevk: ok... so its really just ServiceWorkerRequestMode?

[07:39:56.0000] <annevk>
no :-/

[07:41:17.0000] <wanderview>
annevk: how do I as a browser implementer determine what to set RequestMode to for any given Request?  obviously confusion here since Chrome also sets navigations to no-cors

[07:41:44.0000] <annevk>
wanderview: oh you mean no specification

[07:41:52.0000] <annevk>
wanderview: yeah that is unfortunate

[07:42:05.0000] <annevk>
we'll get it fixed, will just take a bit more time

[07:42:07.0000] <wanderview>
annevk: no specification and it seems your expectations are not matching what has been shipped

[07:42:16.0000] <wanderview>
which suggests there is a disconnect somewhere

[07:42:55.0000] <annevk>
Well service workers have been implemented as a hack on top of existing code, so that much is pretty clear...

[07:43:17.0000] <annevk>
I'd be happy to discuss this with mattto et al though

[07:44:09.0000] <wanderview>
annevk: for now I will just match the current spec... which involves basically doing the "if navigation for same-origin mode" since that mode value doesn't match gecko's internal concept

[07:45:28.0000] <wanderview>
annevk: it seems the only other same-origin Requests will be worker scripts and xmldocument.load()?

[07:45:46.0000] <annevk>
wanderview: <track> when you don't specify crossorigin

[07:46:14.0000] <wanderview>
annevk: I looked at track and it appears to use CORS... where does it define same-origin?

[07:46:26.0000] <annevk>
wanderview: it says potentially CORS

[07:47:01.0000] <wanderview>
annevk: step 8 here says "No CORS" https://html.spec.whatwg.org/multipage/embedded-content.html#start-the-track-processing-model

[07:47:38.0000] <annevk>
wanderview: yeah, but that combination means "same-origin"

[07:47:54.0000] <annevk>
wanderview: because "default origin behaviour set to fail"

[07:48:38.0000] <wanderview>
ok, thanks

[07:48:44.0000] <wanderview>
that was.... non-obvious

[07:49:07.0000] <annevk>
yeah, rewrite coming up within some months

[07:52:22.0000] <annevk>
philipj: I'll try to give you a definition tomorrow for elements and attributes

[07:52:28.0000] <annevk>
philipj: bit tired

[07:54:30.0000] <philipj>
annevk: No problem, happy to help measure if it'd answer any questions.

[07:58:03.0000] <hsivonen>
smaug____: pong

[08:08:44.0000] <smaug____>
hsivonen: did I ping?

[08:09:09.0000] <smaug____>
and if I did, I have no idea what I was going to ask

[08:09:24.0000] <hsivonen>
smaug____: ok. the ping was pretty old (a couple of weeks)

[08:09:29.0000] <smaug____>
:)

[08:11:40.0000] <jgraham>
SimonSapin: hsivonen is around

[08:12:33.0000] <annevk>
(this is why you shouldn't ping, ask a question...)

[08:12:53.0000] <SimonSapin>
thanks jgraham

[08:12:59.0000] <Workshiva>
But the channel was pretty quiet anyway, so there's also the entertainment value to consider

[08:13:45.0000] <SimonSapin>
hsivonen: Do you know if there is a way around keeping unbounded amount of input in memory in case the parser decides to "change the encoding", when parsing HTML from bytes?

[08:14:32.0000] <hsivonen>
SimonSapin: there intentionally is not supposed to be one

[08:14:43.0000] <SimonSapin>
and, to test if browsers do it, are you aware of a case where "prescan a byte stream to determine its encoding" would fail to find an encoding when given 1024 bytes, but tree construction would still "change the encoding" based on a meta start tag in the first 1024 bytes?

[08:16:53.0000] <SimonSapin>
hsivonen: intentionally? Why?

[08:19:47.0000] <hsivonen>
SimonSapin: to answer the previous question: after the 1024-byte boundary, the parser instance commits to one encoding. However, a late meta or a Japanese/Russian/Ukrainian detector can still trigger a reload with a different encoding

[08:20:25.0000] <hsivonen>
SimonSapin: in which case a new parser instance starts a new parse

[08:20:44.0000] <SimonSapin>
hsivonen: I’m trying to decide what to do in html5ever, which doesn’t necessarily have a notion of reload

[08:21:02.0000] <hsivonen>
SimonSapin: IIRC, WebKit/Blink doesn't support late <meta> triggering a reload. I don't know if they do it for their Japanese detection

[08:22:17.0000] <hsivonen>
SimonSapin: as for "intentionally", the intention of the 1024-byte boundary is precisely to make sure that the parser doesn't keep buffering forever and not produce any output

[08:22:43.0000] <hsivonen>
SimonSapin: I suggest committing to an encoding at the latest when you've seen 1024 bytes

[08:23:11.0000] <hsivonen>
SimonSapin: I can't recall why I implemented the late <meta> thing in the new parser

[08:23:32.0000] <hsivonen>
SimonSapin: initially, I make the detectors see at most 1024 bytes so that they couldn't trigger a reload

[08:23:44.0000] <hsivonen>
SimonSapin: but that broke Japanese Planet Debian

[08:23:58.0000] <hsivonen>
SimonSapin: and people get really nervous if you break a Japanese site

[08:24:01.0000] <hsivonen>
so...

[08:24:11.0000] <hsivonen>
Japanese Planet Debian has since been fixed

[08:25:31.0000] <hsivonen>
it's quite possible that we could get rid of the Russian and Ukrainian detectors and limit the Japanese detector to 1024 bytes and the sky wouldn't fall

[08:25:38.0000] <SimonSapin>
hsivonen: I see, thanks. So only run the byte-based prescanner, or can tree construction find meta tags that the pre-scanner doesn’t?

[08:26:43.0000] <SimonSapin>
hsivonen: I’m referring to https://html.spec.whatwg.org/multipage/#parsing-main-inhead:change-the-encoding

[08:26:44.0000] <hsivonen>
SimonSapin: I suggest only running the prescanner. (but I bet it's possible to construct something that the prescanner doesn't see but the tree builder sees)

[08:27:23.0000] <annevk>
hsivonen: WebKit only has a Japanese detector iirc

[08:27:33.0000] <hsivonen>
SimonSapin: oh. the reason I added support for late <meta> may be that the spec said so!

[08:27:44.0000] <hsivonen>
SimonSapin: but IIRC, WebKit doesn't honor the spec there

[08:27:55.0000] <annevk>
we should fix the spec

[08:28:03.0000] <hsivonen>
SimonSapin: it quite possible that the spec says so because the old parser in Gecko behaved like that

[08:28:29.0000] <hsivonen>
SimonSapin: I'm not sure what IE did at the time the spec was written, but my vague recollection is that it supported late <meta>

[08:30:11.0000] <hsivonen>
hmm. an obvious way to create a <meta> seen by the tree builder but not by the prescanner is, of course, document.write

[08:30:34.0000] <jgraham>
This wasn't one of the cases where Hixie was concerned about the security impact of an attacker that could cause early termination of the byte stream?

[08:30:58.0000] <hsivonen>
jgraham: I don't recall this topic co-occurring with that topic

[08:31:05.0000] <jgraham>
/me isn't quite sure what such an attack would look like given incremental parsing

[08:31:05.0000] <hsivonen>
jgraham: that was about comments and scripts

[08:32:26.0000] <jgraham>
OK

[08:32:48.0000] <MikeSmith>
annevk: so about bugzilla, short answer is Yes, we can. I think.

[08:32:53.0000] <hsivonen>
SimonSapin: so I suggest 1) implementing just the prescan until 1024 bytes, 2) being aware that you might end up having to implement something that allows you to signal to the browsing context to reload if #1 Breaks the Web, 3) researching if old IE actually supports late <meta> and if it doesn't, filing a spec bug

[08:33:08.0000] <hsivonen>
it's possible that a spec bug is warranted just based on the success of WebKit, though

[08:33:09.0000] <SimonSapin>
hsivonen: Chrome doesn’t reaload, it switches encodings mid-stream: https://gist.github.com/anonymous/addad9f51781a6cd2cf9

[08:33:21.0000] <SimonSapin>
Firefox reloads

[08:33:25.0000] <hsivonen>
SimonSapin: whoa!

[08:34:00.0000] <SimonSapin>
Firefox makes two HTTP requests

[08:34:03.0000] <MikeSmith>
annevk: In the admin UI for components, every component has a "Enabled For Bugs" which by default is enabled; I think the scope of the effect of disabling is that it just prevents anybody from creating new bugs in that component, but you can still comment on existing bugs and edit them. I think.

[08:34:19.0000] <hsivonen>
SimonSapin: Firefox making two requests is expected

[08:34:27.0000] <hsivonen>
SimonSapin: the Chrome behavior is news to me

[08:35:12.0000] <SimonSapin>
Chrome 46 dev, don’t have Release at hand

[08:37:51.0000] <MikeSmith>
beverloo: on Android, "new Notification(...)" intentionally no longer works in Chrome, right? (from 42 on? or 43?)

[08:37:55.0000] <hsivonen>
annevk: my current assumption is that the Russian and Ukrainian detectors misfiring is a greater problem than the problems they fix, but I don't have proof

[08:38:04.0000] <beverloo>
MikeSmith, yup

[08:38:07.0000] <MikeSmith>
k

[08:38:11.0000] <beverloo>
MikeSmith, we shipped it in Chrome 42 on Android

[08:38:20.0000] <beverloo>
MikeSmith, we'll support it eventually, but they'll be more like Android toasts

[08:38:28.0000] <beverloo>
have to figure out the right ux :)

[08:38:33.0000] <hsivonen>
annevk: I want to get rid of those two detectors but I feel I need something more concrete than a guess that they have negative utility

[08:39:31.0000] <annevk>
MikeSmith: that sounds good to me

[08:40:28.0000] <annevk>
SimonSapin: it changes the decoder on the fly?

[08:40:31.0000] <MikeSmith>
beverloo: what's there now seems to fairly well already. I mean was far as how the notifications get displayed in the status area, and what's shown if you pull down to view more

[08:40:39.0000] <annevk>
SimonSapin: now that is interesting

[08:41:21.0000] <MikeSmith>
annevk: OK, so shall I go ahead and disable "Enabled For Bugs" for all WHATWG components except "Unwelcome"?

[08:41:30.0000] <beverloo>
MikeSmith, yes, but there's lifetime issues with that (the OS can kill the page whenever it feels like it). That's why the spec now mentions they're a more ephemeral form of notifications

[08:41:47.0000] <annevk>
MikeSmith: they're still welcome for the HTML components too

[08:41:51.0000] <annevk>
MikeSmith: for the time being

[08:42:04.0000] <MikeSmith>
annevk: ah yeah ok, sure

[08:42:20.0000] <MikeSmith>
beverloo: oh, ok

[08:42:48.0000] <annevk>
MikeSmith: oh, Books and Figures too

[08:42:56.0000] <annevk>
MikeSmith: howcome hasn't switched it seems

[08:43:01.0000] <MikeSmith>
annevk: yeah, those I figured to leave as is

[08:43:34.0000] <MikeSmith>
beverloo: was there an intent-to-deprecate message sent out to blink-dev about de-supporting the Notification constructor?

[08:43:35.0000] <annevk>
MikeSmith: seems mimesniff hasn't migrated either

[08:43:44.0000] <annevk>
GPHemsley: ^^

[08:44:05.0000] <beverloo>
MikeSmith, we still support it on desktop (but are considering changing UX there too, part of a larger "what do we want with notifications"-effort)

[08:44:06.0000] <annevk>
MikeSmith: neither has HTML Differences

[08:44:09.0000] <beverloo>
I sent a PSA, let me find a link for you

[08:44:16.0000] <annevk>
MikeSmith: hmm, perhaps I can better list what we should disable :-/

[08:44:44.0000] <beverloo>
MikeSmith, https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM

[08:44:45.0000] <MikeSmith>
annevk: OK, for now, so I just did only Encoding, Fetch, and URL

[08:44:57.0000] <annevk>
MikeSmith: to disable: JavaScript, URL

[08:45:02.0000] <MikeSmith>
beverloo: thanks

[08:45:25.0000] <MikeSmith>
annevk: ok just did JavaScript too

[08:45:35.0000] <beverloo>
MikeSmith, up for a drink later this week btw? :)

[08:45:38.0000] <beverloo>
would be good to meet you

[08:45:46.0000] <MikeSmith>
whoah

[08:45:50.0000] <MikeSmith>
beverloo: you in Tokyo?

[08:45:55.0000] <beverloo>
flying on Wednesday

[08:46:01.0000] <annevk>
MikeSmith: Quirks Mode lists a very old URL in its description

[08:46:14.0000] <MikeSmith>
annevk: what should it be?

[08:46:24.0000] <annevk>
MikeSmith: https://quirks.spec.whatwg.org/

[08:47:49.0000] <MikeSmith>
beverloo: oh man, on Thursday morning I'm flying to Shanghai for a few days. Do you arrive in Tokyo on Wednesday or Thursday?

[08:48:15.0000] <MikeSmith>
annevk: OK, updated

[08:48:28.0000] <annevk>
thanks

[08:48:51.0000] <beverloo>
MikeSmith, Thursday morning at Haneda (7:20am)

[08:49:57.0000] <MikeSmith>
beverloo: OK I think I fly from Haneda on Thursday at 1pm :(

[08:50:29.0000] <MikeSmith>
beverloo: but will be back in the evening on the 9th (sunday), so could meet up then

[08:54:46.0000] <Ms2ger>
Clearly the two of you should meet for drinks at the airport

[08:55:26.0000] <MikeSmith>
heh

[09:11:46.0000] <MikeSmith>
annevk: oh, Firefox on Android is going to continue supporting the old-style Notification constructor?

[09:12:00.0000] <MikeSmith>
per your comment at https://github.com/whatwg/notifications/issues/26#issuecomment-126310459

[09:12:27.0000] <annevk>
MikeSmith: non-persistent notifications are toasts, just a different name

[09:12:52.0000] <annevk>
MikeSmith: also, I'm not familiar with Firefox' product plans

[09:14:29.0000] <MikeSmith>
ah I see, the "we" in "we're keeping non-persistent notifications" was about the spec itself

[09:15:07.0000] <annevk>
MikeSmith: yeah, WHATWG-we

[09:15:25.0000] <MikeSmith>
k

[09:16:00.0000] <annevk>
MikeSmith: I guess that's confusing, unless it's clear from context, I believe I usually make it quite clear when I speak of Mozilla or its products

[09:16:06.0000] <annevk>
but unless*

[09:16:25.0000] <annevk>
/me goes to look at the HTML parser

[09:46:43.0000] <annevk>
Domenic: see recent post on blink-dev, making createElement() match the HTML parser seems hard

[09:47:00.0000] <Domenic>
annevk: I didn't really understand that post.

[09:47:41.0000] <Domenic>
It seemed to contradict itself a couple times? Incompatible, but a full subset?

[09:49:01.0000] <annevk>
/me refers back to him being  tired

[09:49:37.0000] <annevk>
Domenic: there's a distinction between requirements on the first code point and any remaining code points

[09:50:55.0000] <Domenic>
I guess I am not able to find an actual example of incompatibility in that message

[09:51:20.0000] <Domenic>
Maybe... HTML does not allow a start of xEFFFF, but XML does?

[09:51:36.0000] <Domenic>
It seems fine if createElement allows more characters than the parser does

[09:52:13.0000] <annevk>
Domenic: HTML only allows a-zA-Z at the start of an element

[09:52:50.0000] <Domenic>
annevk: OK. Why is that a problem?

[09:53:10.0000] <annevk>
Domenic: XML and createElement() allow more, per the production I pointed too

[09:53:36.0000] <Domenic>
annevk: again, why is that a problem.

[09:53:46.0000] <annevk>
Domenic: if you make createElement() a superset of both, you're suddenly allowing in new elements your code base might not have considered

[09:54:01.0000] <Domenic>
what elements?

[09:54:14.0000] <Domenic>
what is an example?

[09:54:29.0000] <Domenic>
it seems like any example could be either created by the parser or by createElement, so nothing new is happening.

[09:54:53.0000] <annevk>
Domenic: ":>"

[09:55:16.0000] <annevk>
Domenic: that cannot be created by the parser or by createElement() today

[09:55:27.0000] <annevk>
sorry

[09:55:29.0000] <Domenic>
annevk: then don't allow it. nobody is asking for *new* elements

[09:55:32.0000] <annevk>
Domenic: ":<"

[09:56:01.0000] <annevk>
Domenic: well either you restrict per the HTML parser or you restrict per XML

[09:56:09.0000] <annevk>
Domenic: HTML parser has restrictions on the first code point

[09:56:22.0000] <Domenic>
annevk: the proposal is very simple. allow a union of both.

[09:56:24.0000] <annevk>
Domenic: if you open those up, you automatically allow more and allow things that cannot be done through XML

[09:56:43.0000] <Domenic>
annevk: start char = union of (what xml allows) + (what HTML allows) = what XML allows

[09:56:52.0000] <annevk>
Domenic: so making it more complex?

[09:56:58.0000] <annevk>
Domenic: I guess...

[09:56:59.0000] <Domenic>
annevk: rest of chars = union of (what xml allows) + (what HTML allows)

[09:57:18.0000] <annevk>
well, you'd need to validate either or in that case

[09:57:24.0000] <Domenic>
yep

[09:57:30.0000] <annevk>
if the first char is a non-HTML char remaining cannot be HTML char

[09:57:32.0000] <Domenic>
there's something on the platform that is creating elements and following these rules

[09:57:52.0000] <annevk>
the internals might not actually care about the names I suspect

[09:57:58.0000] <Domenic>
then we should expose that

[09:58:22.0000] <Domenic>
saying that the platform can create elements you can't is the silly part people are against

[09:58:39.0000] <annevk>
though it's a bit trickier with XML namespaces of course

[09:58:51.0000] <annevk>
but that's namespaced elements and those likely have their own path anyway

[09:58:53.0000] <Domenic>
:-S

[10:03:34.0000] <TabAtkins>
annevk: I'll check it out, thanks.

[10:04:19.0000] <annevk>
TabAtkins: thanks, it seems we also haven't quite figured out references yet

[10:04:28.0000] <TabAtkins>
?

[10:04:36.0000] <TabAtkins>
Oh, biblio stuff

[10:04:52.0000] <annevk>
TabAtkins: yeah, DOM still has SELECTORS4 and SELECTORS-4 whereas I just want SELECTORS

[10:05:10.0000] <TabAtkins>
Yeah, I need to finish working on deduping that. I've done *some* deduping.

[10:05:25.0000] <annevk>
TabAtkins: editor's drafts have dates listed next to them too

[10:06:15.0000] <annevk>
TabAtkins: also, it seems syntax for dated references doesn't work? https://dom.spec.whatwg.org/#informative for UIEVENTS is quite wrong

[10:06:51.0000] <TabAtkins>
Hm, there's no syntax for them, it's just another ref name.  I'll see what's up.

[10:07:11.0000] <annevk>
But perhaps DOM stating it supersedes them is no longer necessary either... At some point that's just the new normal.

[10:13:44.0000] <TabAtkins>
annevk: Looks like URL's not in Shepherd's database, which is why that link didn't work. ^_^  Tell me which WHATWG specs are bikeshedded and I'll add them.

[10:45:43.0000] <littledan>
annevk, thanks for the suggestion, that makes more sense actually. Trivial proposal writeup at http://littledan.github.io/global.html

[10:48:16.0000] <Domenic>
littledan: probably want to explain that this is then either shadowed by or in conflict with HTML's `self`, which is a getter

[10:49:10.0000] <littledan>
oh, it's readonly? I see

[10:49:39.0000] <littledan>
yeah, we definitely can't make it readonly, due to SES, but shadowed makes sense to me

[10:49:49.0000] <littledan>
that's annoying

[10:50:00.0000] <Domenic>
littledan: not readonly. a getter.

[10:50:22.0000] <Domenic>
{ get, configurable: true, enumerable: true } instead of { writable: true, configurable: true, enumerable: false }

[10:50:31.0000] <littledan>
looks like the IDL for Window says readonly, which translates into a getter in ES, right?

[10:50:36.0000] <Domenic>
right.

[10:50:41.0000] <Domenic>
and all IDL attributes are enumerable true

[10:51:00.0000] <littledan>
oh, interesting

[10:51:12.0000] <littledan>
doesn't that make enumerability pretty limited utility?

[10:51:21.0000] <Domenic>
note also that globals are special-cased and their getters/methods are on the instance, not the prototype. otherwise, if this was a normal IDL object, you'd have another mismatch

[10:51:27.0000] <Domenic>
yes. yes it does.

[10:52:01.0000] <littledan>
oh, well if it were on the prototype, then it'd just be shadowed and that's fine

[10:52:07.0000] <Domenic>
yeah, but it's not

[10:52:19.0000] <littledan>
you're allowed to have a writable thing shadow something

[10:52:19.0000] <Domenic>
i think it's just a conflict

[10:52:34.0000] <Domenic>
one or the other spec would have to change

[10:53:01.0000] <littledan>
yeah, OK, so in spec-land, the DOM is written on top of the new ES realm after all of the ES primordials are set

[10:53:09.0000] <littledan>
right?

[10:53:21.0000] <Domenic>
i guess. there's never really been a conflict of this sort where the ordering needed to be established.

[10:53:22.0000] <littledan>
so if I just say, in a note, this is occurring, then that's enough

[10:53:47.0000] <littledan>
well, the ES spec is pretty explicit about how a realm is established and then stuff is written to it imperatively

[10:53:59.0000] <Domenic>
right, but that stuff doesn't reflect reality, it's just allen's imagination

[10:54:04.0000] <Domenic>
similar to "jobs"

[10:54:25.0000] <littledan>
do you think this will be a difficult thing to do in implementations?

[10:54:42.0000] <Domenic>
i am really not sure (i.e. i would bet either way with 50% probability)

[10:54:43.0000] <littledan>
to have them make it a writable configurable property in, basically, their shell?

[10:55:07.0000] <Domenic>
engines can do it, but then what does an engine's IDL binding do when a global object IDL attribute has to override an existing property?

[10:55:14.0000] <Domenic>
depends on what APIs are used to implement the IDL binding layer

[10:55:37.0000] <Domenic>
It's solvable, but might require writing custom bindings.

[10:55:53.0000] <Domenic>
It would be better to hope that we can change `self` from a getter to a data property so that it isn't defined by HTML at all.

[10:56:43.0000] <littledan>
so the question is, would it be better for HTML to make it a writable/configurable data property, or can we figure out if SES can accept it in its current for (which I guess it would have to to make it work on the current web)

[11:03:55.0000] <Domenic>
I think if it is web-compatible the best approach would be to move self to ES as a writable/configurable data property.

[11:04:22.0000] <Domenic>
however, experimenting with that sounds like a decent amount of implementation work, and the potential to break websites, for very little benefit.

[11:04:32.0000] <Domenic>
so i am not sure that the best approach will end up happening.

[11:05:16.0000] <Domenic>
alternate approaches include: figuring out if SES can live with `self` as a configurable, enumerable getter, and trying to move that to ES; or going for `global` to avoid such issues.

[11:09:53.0000] <littledan>
OK, this whole thing sounds like too little benefit for me to pursue

[11:10:19.0000] <littledan>
maybe we should just suggest to Node people to add 'self' in some way or another to make things easier for library authors

[11:10:29.0000] <littledan>
or the problem just doesn't exist at all

[11:11:59.0000] <Domenic>
yeah the cost/benefit tradeoff is indeed quite high

[11:12:07.0000] <Domenic>
that is why this has not happened yet :)

[11:13:08.0000] <littledan>
OK, I'm new, I'm still learning this stuff

[11:13:20.0000] <Domenic>
:) all good!

[14:36:30.0000] <Domenic>
TabAtkins: I am trying to write a spec with bikeshed and <pre class="idl">... MediaStream ... </pre> and it is complaining that "No 'idl-name' refs found for 'MediaStream'"

[14:36:46.0000] <Domenic>
I've searched a lot of docs and haven't found how to tell it where to get MediaStream

[14:39:28.0000] <TabAtkins>
Domenic: https://github.com/tabatkins/bikeshed/blob/master/docs/definitions-autolinks.md#providing-custom-definitions

[14:42:16.0000] <Domenic>
TabAtkins: thanks. I guess I have to use url if I want to avoid lowercasing?

[14:43:11.0000] <TabAtkins>
Yeah, if you use text it auto-gens the url based on Bikeshed's normal id-generation rules. If your target doesn't conform to that, supply url manually.  (You can still combine with urlPrefix; url is appended to the urlPrefix.)

[15:19:55.0000] <Domenic>
TabAtkins: any ideas on how I can make a <h4> into a definition for an IDL thingy without nesting a <dfn> inside it (which gets its own auto-generated id etc.)?

[15:20:09.0000] <TabAtkins>
Domenic: Don't?

[15:20:21.0000] <Domenic>
TabAtkins: that is literally all of the streams spec

[15:20:25.0000] <TabAtkins>
(That is to say, there is nothing in Bikeshed that supports that, and I don't really plan to make it.)

[15:20:36.0000] <Domenic>
methods and getters and constructors are all defined as headings

[15:20:38.0000] <Domenic>
all of ES too

[15:21:21.0000] <TabAtkins>
So what's wrong with getting a different heading?  You'll get one formatted properly for IDL stuff, after all.

[15:21:38.0000] <TabAtkins>
Well, those are abstract ops, not IDL. Hm.

[15:21:45.0000] <Domenic>
I don't understand the question. What's wrong with <h4><dfn> is that then I get dfn styles and two IDs (one for hte h4 and one for hte dfn)

[15:21:52.0000] <Domenic>
No, all the public API is done the same way.

[15:22:28.0000] <TabAtkins>
Styling is trivially fixable, obviously.  Two ids isn't, tho.

[15:22:32.0000] <Domenic>
I also get two self-link <a>s, a consequence of the double-IDs. Super-ugly.

[15:22:38.0000] <TabAtkins>
Yeah, that's definitely ugly.

[15:22:45.0000] <TabAtkins>
Okay, file a bug on me, I'll think about it.

[15:22:56.0000] <Domenic>
thanks

[15:28:01.0000] <jgraham>
jsbell: I was hoping that someone who had looked at those tests before would review, but if they haven't I'll look tomorrow

[15:55:59.0000] <jsbell>
jgraham: thx


2015-08-04
[17:13:59.0000] <TabAtkins>
Domenic: plinss just landed code for recognizing headings that are definitions.  I'll shortly be adding the code to Bikeshed to make it work properly, too.

[23:06:00.0000] <annevk>
littledan: Node.js adding self first makes the most sense to me. Then we can figure out if that's worth harmonizing over.

[23:06:28.0000] <annevk>
TabAtkins: Fetch and I think also HTML have header definitions

[23:06:58.0000] <annevk>
TabAtkins: though I think HTML also has one case where a single heading contains multiple definitions (for h1, h2, etc., ironically)

[02:24:35.0000] <annevk>
Oh, so now the IETF approved http://tools.ietf.org/html/rfc7159 that's the only RFC defining the MIME type, but it seems they at least aligned with the definition from Ecma, although I haven't read closely...

[02:42:29.0000] <annevk>
philipj: does not seem to be much in https://lists.w3.org/Archives/Public/public-editing-tf/ or https://github.com/w3c/editing

[02:43:47.0000] <philipj>
/me sees Ryosuke Niwa, Arthur Barstow and Florian Rivoal among the posters

[02:43:52.0000] <annevk>
philipj: https://github.com/w3c/editing/issues/56 is the most interesting

[02:45:19.0000] <philipj>
I'll watch that

[02:46:00.0000] <philipj>
Looks like Ryosuke-san has some healthy skepticism

[02:48:17.0000] <annevk>
yeah

[03:03:52.0000] <MikeSmith>
annevk: thanks for doing the bugzilla hygiene

[03:07:07.0000] <annevk>
MikeSmith: made it possible to see all bugs on a single page again

[03:07:50.0000] <annevk>
MikeSmith: not really impressed by how Web Components folks just moved all over Template bugs without any additional triage

[03:08:16.0000] <annevk>
but most was spammy stuff from the widget

[03:15:24.0000] <MikeSmith>
annevk: yeah that Templates move was kind of quick-and-dirty

[03:59:53.0000] <philipj>
annevk: what do you think about forking https://github.com/ayg/editing to https://github.com/whatwg/editing now that https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html is gone?

[04:00:50.0000] <annevk>
philipj: we should ask ayg if he would be willing to move the repository

[04:01:19.0000] <philipj>
yeah, there's certainly no rush

[04:01:59.0000] <annevk>
philipj: and maybe we should include rniwa/ehsan in that email to get a feeling for what everyone else feels

[04:02:04.0000] <annevk>
well "everyone"

[04:02:18.0000] <annevk>
at least those that did some work on this in the past

[04:02:47.0000] <annevk>
overall though I'd be supportive of that, certainly if this new Editing TF is not actually doing any hard work

[04:03:58.0000] <philipj>
well perhaps they are doing good work, but just not taking ownership of execCommand()

[04:06:55.0000] <annevk>
or contenteditable...

[04:07:03.0000] <annevk>
or designMode

[04:07:19.0000] <annevk>
if you don't take ownership of the primitives that exist, you're bound to create a shit show

[04:36:34.0000] <annevk>
Speaking of editing, https://www.indiegogo.com/projects/prosemirror/ is pretty interesting

[04:36:49.0000] <annevk>
philipj: it seems ayg is still around

[04:37:55.0000] <philipj>
annevk: yep, and with no love for execCommand() :)

[04:38:34.0000] <annevk>
yeah, I wonder what his answer is to "what about Servo?"

[04:38:52.0000] <JoWie>
i remember creating a rich text editor using javascript & dom many years ago, without using execCommand. that sure was a lot of work

[04:38:58.0000] <annevk>
I'm assuming Edge simply has IE's old code without all the ridiculous switch statements

[04:39:19.0000] <philipj>
annevk: he already answered in https://github.com/w3c/clipboard-apis/issues/16#issuecomment-127570472

[04:40:09.0000] <annevk>
ah I see

[04:44:30.0000] <JoWie>
it would be great if the editing api was more low level

[04:44:59.0000] <philipj>
a sane API which execCommand can be built on top of would be nice

[04:45:02.0000] <JoWie>
contenteditable is so incredibly buggy in all browsers

[04:45:43.0000] <JoWie>
(not just execCommand)

[04:46:22.0000] <JoWie>
for example, in certain situations elements can "leak" outside of the element that has contenteditable

[04:47:38.0000] <JoWie>
so i think the behaviour of contenteditable must either be very well defined, or provide a much lower level api

[05:03:59.0000] <GPHemsley>
annevk, MikeSmith: What am I supposed to be migrating?

[05:04:42.0000] <annevk>
GPHemsley: the idea is to slowly move over to GitHub

[05:04:51.0000] <GPHemsley>
:(

[05:04:53.0000] <annevk>
GPHemsley: as you can see in e.g., URL and DOM

[05:04:58.0000] <GPHemsley>
/me dislike GitHub issues

[05:05:04.0000] <GPHemsley>
/me are plural

[05:05:58.0000] <GPHemsley>
annevk: I assume there's justification for this?

[05:07:42.0000] <annevk>
GPHemsley: I don't have a long form argument handy

[05:08:05.0000] <GPHemsley>
I noticed also that the editor has been removed from the header?

[05:08:18.0000] <annevk>
GPHemsley: in general we notice more participation on GitHub and due to GitHub's tight integration of PRs, issues, and commits, it also makes things easier to track

[05:09:08.0000] <annevk>
GPHemsley: yes, we did that because some people felt having a name there might be unwelcoming to contributions of others, there's some other arguments too

[05:09:27.0000] <GPHemsley>
hmm

[05:10:05.0000] <annevk>
GPHemsley: if specifications are more community owned, it doesn't make much sense to have a single name at the top

[05:10:38.0000] <GPHemsley>
are all of our specs by definition community-owned?

[05:10:52.0000] <MikeSmith>
it makes even less sense to list 10+ names at the top the way some W3C specs do

[05:11:29.0000] <MikeSmith>
IMHO name(s)-at-the-top-of-the-spec often creates perverse incentivies

[05:11:52.0000] <GPHemsley>
interesting

[05:12:10.0000] <MikeSmith>
GPHemsley: what else would they be if not community-owned?

[05:12:17.0000] <annevk>
GPHemsley: they are in the public domain

[05:12:25.0000] <annevk>
GPHemsley: and maintained by the WHATWG

[05:12:26.0000] <GPHemsley>
I always saw it as "who's the expert on this spec?" or "who do I talk to to clarify what this spec means?"

[05:12:30.0000] <annevk>
dunno how other folks do it

[05:12:37.0000] <GPHemsley>
MikeSmith, annevk: That sounds like by definition, then

[05:13:05.0000] <annevk>
GPHemsley: it would actually be a bad thing if it encouraged that kind of line of reasoning

[05:13:21.0000] <GPHemsley>
k

[05:13:23.0000] <MikeSmith>
GPHemsley: what you describe is what the Participate links are for, really

[05:13:37.0000] <annevk>
GPHemsley: although it's great to have a couple of people own the spec and sort through things, having all conversations flow through that group alone seems damaging long term

[05:14:19.0000] <GPHemsley>
Well, in that case, then, I guess... patches welcome ;)

[05:14:32.0000] <annevk>
MikeSmith: yeah, in the W3C you often have people volunteer to have their name on the spec, and only for that...

[05:14:44.0000] <MikeSmith>
annevk: yep

[05:14:52.0000] <GPHemsley>
although I appear to have turned github issues off for mimesniff

[05:14:57.0000] <annevk>
GPHemsley: I'm happy to make the changes I made elsewhere at some point directly if you don't mind

[05:15:21.0000] <GPHemsley>
it looks like you can still do pull requests even with issues turned off

[05:15:29.0000] <MikeSmith>
the fringe WGs in the Linked-Data/Semantic-Web area are full of that "I'm here to get my name on a spec"-think

[05:15:59.0000] <GPHemsley>
they're also specs that few people look at, so... *shrug*

[05:16:21.0000] <MikeSmith>
annevk: re "having all conversations flow through that group alone seems damaging long term", yeah, hypothetically speaking

[05:17:35.0000] <MikeSmith>
annevk: hypothetically speaking, if an active editor were to sorta to go away and do other things for 10 months or whatever, on a spec that's never really been a community product in the same way most of our other ones now are

[05:17:39.0000] <MikeSmith>
just sayin'

[05:17:57.0000] <MikeSmith>
that would be less than ideal, if that were to ever happen

[05:18:09.0000] <MikeSmith>
especially if it were to happen with a really important spec

[05:18:33.0000] <MikeSmith>
so let's just hope that never happens I guess

[05:19:55.0000] <annevk>
MikeSmith: indeed :-)

[05:23:27.0000] <Ms2ger>
Let's hope such a spec would at least have an open-source publication pipeline

[05:23:29.0000] <GPHemsley>
I haven't migrated off anolis yet, either

[05:29:08.0000] <jgraham>
If Hixie is actually blocking any work then it seems possible to address the situation

[06:18:58.0000] <philipj>
annevk for execCommand editor, wee :)

[06:19:19.0000] <annevk>
philipj: "maintainer"

[06:19:26.0000] <annevk>
"PRs appreciated"

[06:19:40.0000] <annevk>
If Aryeh is indeed giving up...

[06:20:10.0000] <philipj>
I think he definitely isn't interested in editing, he said as much when I asked about the spec in an email a few years ago

[06:52:04.0000] <annevk>
philipj: your list seems about right

[06:52:21.0000] <annevk>
philipj: I think Domenic is only interested in elements and attributes, but I guess we might as well make it complete

[06:52:50.0000] <annevk>
philipj: and yeah, breaking invariants elsewhere was my worry too

[06:53:08.0000] <annevk>
philipj: to avoid that you need to go with the HTML/XML union

[06:54:46.0000] <MikeSmith>
nice to see Aryeh back around some, the last few days

[06:55:16.0000] <philipj>
annevk: yeah, that should at least reduce the risk, even if it's still the case that there are things that can't be roundtripped in XML and/or HTML

[06:55:49.0000] <annevk>
yeah, whoever designed that...

[06:56:01.0000] <philipj>
Domenic: maybe you can just add use counters for the things you'd like and I can sit back and do nothing? :)

[06:56:16.0000] <Domenic>
still catching up on the morning email...

[06:56:47.0000] <philipj>
annevk: any idea what the union would look like, is it just a short blacklist for the first code point and another short blacklist for the rest, or something more complicated?

[06:57:15.0000] <annevk>
philipj: more complicated

[06:57:28.0000] <annevk>
philipj: you need to validate against XML, if that fails, validate against HTML, if that fails, throw

[06:57:44.0000] <annevk>
philipj: if at any point you succeed you have a winning name

[06:58:02.0000] <philipj>
so more exception handling code in some of the most most called methods there are...

[06:58:14.0000] <annevk>
yeah, seems unlikely

[06:58:24.0000] <annevk>
although you could code it more efficiently that that of course

[06:58:31.0000] <annevk>
by branching

[06:58:43.0000] <philipj>
it might not affect perf at all since it's in an unlikely branch, but still not great

[06:58:58.0000] <philipj>
so let's just wait for Domenic to read some more email :)

[06:59:48.0000] <annevk>
although apparently it's more efficient to create a bunch of elements through appending to DocumentFragment and then cloning that then invoking createElement() a whole lot

[07:00:29.0000] <philipj>
well, yeah, at some point the overhead of bindings just ruins everything I guess

[07:00:38.0000] <annevk>
yeah I guess so

[07:00:50.0000] <philipj>
maybe we should have API that allow you to create lots of elements in a single call, without parsing?

[07:02:19.0000] <annevk>
probably not

[07:02:47.0000] <annevk>
WebAssembly can also take some of this away I'm told

[07:03:26.0000] <Domenic>
/me eyerolls at the wasm panacea

[07:03:33.0000] <Domenic>
just allowing everything sounds better

[07:03:41.0000] <Domenic>
what would the use counter do?

[07:07:11.0000] <philipj>
Domenic: I was thinking measure how often an exception is thrown where it no longer would be, but I'm not sure what to do with the result if it's anything but ~0.001%

[07:07:31.0000] <philipj>
0.1% could mean that we'll now make 0.1% of pages work better, who knows

[07:07:56.0000] <Domenic>
hmm yeah i would be surprised if it is >0% though, so that seems like a reasonable thing

[07:08:55.0000] <philipj>
depending on exceptions being thrown is unusual, but given a common enough API it enters the realm of the possible

[07:09:24.0000] <philipj>
But I dunno, just trying it would answer the question much faster :)

[07:10:03.0000] <annevk>
zcorpan wanted to do this at some point btw

[07:10:04.0000] <philipj>
o_O is TimBL actually posting on blink-dev as 0123456789abcedf⊙gc ?

[07:10:07.0000] <annevk>
I'm not sure why he didn't

[07:10:22.0000] <annevk>
philipj: I didn't see that

[07:10:32.0000] <philipj>
annevk: in the <keygren> thread

[07:11:12.0000] <philipj>
It's his picture and name, but could just as well be an impostor I guess

[07:11:52.0000] <Ms2ger>
That sounds quite unlikely

[07:12:23.0000] <annevk>
I think that's him

[07:13:33.0000] <philipj>
Odd

[07:20:11.0000] <wanderview>
Domenic: what does this mean? https://lists.w3.org/Archives/Public/public-webapps/2015JulSep/0232.html

[07:21:53.0000] <annevk>
wanderview: nothing

[07:22:07.0000] <wanderview>
ok

[07:25:09.0000] <annevk>
Domenic: I do hope that if IDL is formalized we could actually have a "copy" operation that just creates a new instance and copies over all internal slots

[07:25:37.0000] <annevk>
Domenic: so you can just write "copy" in your spec and it means something when applied to an object

[07:43:12.0000] <Domenic>
annevk: maybe, such an operation is rarely useful (never used in ES)

[07:47:13.0000] <Domenic>
What does no-backref do?

[07:54:31.0000] <annevk>
Domenic: something I should probably patch into dfn.js

[07:55:11.0000] <annevk>
Domenic: partially because ES doesn't define structured cloning as it should

[07:55:24.0000] <Domenic>
True

[07:56:19.0000] <annevk>
There's quite a lot of objects that are copied in some manner, though arguably such a generic definition might give the wrong results for elements and such, that don't necessarily want all their internal slots copied

[08:13:47.0000] <annevk>
Another interesting thing, we gave up on DOM Parsing & Serialization, but the W3C stopped maintaining their copy too

[10:07:35.0000] <smaug____>
does github's bug tracker have anything like needinfo in bugzilla?

[10:08:00.0000] <wanderview>
smaug____: closest is @ mention in a comment I believe

[10:09:07.0000] <smaug____>
which is quite different

[10:09:25.0000] <wanderview>
I guess "no" then :-)

[10:10:02.0000] <smaug____>
wanderview: I mean, needinfos end up to a queue which you can check easily

[10:10:21.0000] <smaug____>
I assume @ stuff don't end up to any queue

[10:10:40.0000] <smaug____>
if you miss some bugmail, you really miss it

[10:11:01.0000] <wanderview>
smaug____: they show up here: https://github.com/notifications

[10:11:23.0000] <wanderview>
probably too easy to clear something from the list, though

[10:12:04.0000] <smaug____>
wait what? I need to read bugmail _and_ clear that list

[10:12:06.0000] <smaug____>
huh

[10:12:32.0000] <smaug____>
though, perhaps there is some pref

[10:14:57.0000] <wanderview>
sorry

[10:15:09.0000] <wanderview>
I personally ignore that notifications page... but its kind of queue like

[10:43:26.0000] <ajankovic>
hello, I was wondering why isn't there encoding spec for iso-8859-1 on whatwg.org?

[10:44:46.0000] <Domenic>
you can assign github issues and see all issues assigned to you

[10:44:49.0000] <Domenic>
again not quite the same

[10:45:38.0000] <Domenic>
ajankovic: there is. It is an alias of windows-1252.

[10:46:31.0000] <ajankovic>
Domenic: I saw there is an alias for it but those two are not the same?

[10:46:45.0000] <Domenic>
ajankovic: it turns out they are in shipping software

[10:47:42.0000] <Domenic>
(or there could be a bug in encoding spec, but this particular issue has the feel of something that's already been discussed a lot.)

[10:50:43.0000] <Domenic>
ajankovic: I think the way to show they are different would be to create a document, with <meta charset="windows-1252">, containing one of the bytes in https://encoding.spec.whatwg.org/index-windows-1252.txt, and show that it is not displayed in browsers according to that table

[10:51:06.0000] <Domenic>
sorry, with <meta charset="iso-8859-1">

[10:55:35.0000] <ajankovic>
thanks, I was led here by the issue in Go language implementation of character conversion which uses whatwg specs to generate character conversion tables, I guess whatwg is web centric and I need better precision than that for my project

[10:56:44.0000] <Domenic>
ajankovic: well, interoperability with the web is the primary use case for a lot of encoding software. I would suggest interoping with the web if at all possible.

[10:57:04.0000] <Domenic>
ajankovic: otherwise you will interpret one of those bytes differently than web browsers do, which is a recipe for lots of bugs being filed on your software :)

[10:59:11.0000] <ajankovic>
Domenic: I am dealing with character conversions for sms messages

[11:04:45.0000] <Ms2ger>
ajankovic, I'm so sorry

[11:06:08.0000] <ajankovic>
Ms2ger: thank you that was my first laugh today

[11:06:29.0000] <jgraham>
ajankovic: And it will be your last too.

[11:06:34.0000] <jgraham>
Sorry.

[11:06:53.0000] <Domenic>
yes, all i can offer at this point are condolences.

[11:07:33.0000] <Ms2ger>
ajankovic, more seriously, the whatwg spec is not very likely to  be useful for you

[11:44:08.0000] <wanderview>
JakeA: you around by any chance?

[12:21:01.0000] <JakeA>
wanderview: a little

[12:21:30.0000] <wanderview>
JakeA: I decided to write a fetch issue... I'll let annevk set me straight in the morning

[12:21:50.0000] <wanderview>
thanks, though

[12:22:36.0000] <Domenic>
TabAtkins: I don't really understand "terms defined by this specification". E.g. in https://domenic.github.io/streaming-mediastreams/#index-defined-here it says this spec defines "stream" which feels a bit ridiculous.

[12:23:09.0000] <TabAtkins>
Domenic: It's an argument to a method.

[12:23:25.0000] <Domenic>
TabAtkins: yes. Which is why saying that the definition of "stream" is that argument is pretty silly.

[12:23:48.0000] <Domenic>
Maybe only exported definitions should appear there?

[12:23:58.0000] <TabAtkins>
Arguments are exported. ^_^

[12:24:05.0000] <Domenic>
O__________o

[12:24:11.0000] <Domenic>
can i turn that off

[12:24:24.0000] <TabAtkins>
Everything is exported by default except "dfn" type arguments.

[12:24:27.0000] <TabAtkins>
Why do you want to?

[12:24:39.0000] <Domenic>
now anytime someone does <a>stream</a> in a Bikeshed spec they'll get this spec's method argument!?

[12:25:00.0000] <Domenic>
I want method arguments to be refactorable at will, not something people take dependencies on

[12:25:02.0000] <JakeA>
wanderview: I was thinking again about a fetch option that causes failure on !ok

[12:25:08.0000] <Domenic>
method argument names, that is

[12:25:26.0000] <JakeA>
I got bitten by a server 500 getting cached

[12:25:29.0000] <TabAtkins>
No, it's pretty hard to reference an argument. Almost impossible to do accidentally.

[12:26:15.0000] <TabAtkins>
You have to write either {{foo()/arg}} or {{arg!!argument}} (or the equivalents in longhand).

[12:27:00.0000] <wanderview>
JakeA: yea... seems annoying... I imagine best practice might become to put a thing on the promise chain to turn bad status codes into a rejection

[12:27:35.0000] <Domenic>
i would really rather them not be there ever. if they have to be then maybe nest them under the relevant constructor or method name? My index is clogged up with argument stuff I don't care about using up all the good terms.

[12:27:59.0000] <TabAtkins>
Domenic: *That* is something I can do.

[12:28:06.0000] <TabAtkins>
Tho what do you mean by "using up all the good terms"?

[12:28:25.0000] <wanderview>
fwiw, here's my fetch issue: https://github.com/whatwg/fetch/issues/101

[12:28:43.0000] <Domenic>
I look at the list of terms defined and I think "wow this spec defines stream, cool"

[12:28:49.0000] <Domenic>
I'll file an issue for nesting

[12:29:14.0000] <TabAtkins>
I've wanted to nest values underneath properties for a while; nesting arguments underneath their function should work the same.

[12:31:18.0000] <Domenic>
I still think, given that argument names don't have any normative value, they should not be defined by specs

[12:31:29.0000] <Domenic>
well, should not be listed as officially defined by specs

[12:35:43.0000] <TabAtkins>
Domenic: I've had use-cases for referring to them; given that, they need to be an anchor.  But I agree that they probably shouldn't be exported by default.  (That won't remove them from the index.)  (Tho maybe it should.)

[12:36:09.0000] <Domenic>
:) yes IMO it should

[12:36:33.0000] <TabAtkins>
That would mean that a lot of dfn-type definitions would stop showing up, tho maybe that would be a clue for people to export them.

[12:39:00.0000] <Domenic>
+1

[12:39:10.0000] <Domenic>
I pretty much only use <dfn>s right now when I should be exporting them a lot more

[12:39:42.0000] <Domenic>
I have different problems though with Web IDL vs. JS :-/

[14:19:02.0000] <Domenic>
Why do we use <div class="note"> instead of <aside class="note"> in specs?

[15:25:04.0000] <JoWie>
smaug____: github uses tags for things like that

[15:25:07.0000] <TabAtkins>
Domenic: Our markup standards are a carry-over from pre-html?

[15:25:13.0000] <TabAtkins>
Sorry, pre html5

[15:25:28.0000] <Domenic>
TabAtkins: hmm kind of what i figured, but a bit sad.

[15:27:45.0000] <TabAtkins>
Anyone have opinions on me auto-formatting IDL blocks like https://github.com/tabatkins/bikeshed/issues/449 suggests?

[15:28:22.0000] <TabAtkins>
I'm pretty sure the syntax highlighting is doable with a minimum of effort (all the structures already exist, I just need to tag them with classes and style them).

[15:49:13.0000] <Domenic>
TabAtkins: I object to the alignment. The coloring seems fine though.

[16:49:56.0000] <botie>
cvrebert, at 2015-08-02 06:51 UTC, MikeSmith said: no, the SVG reference is one thing that should not be updated.

[16:55:02.0000] <cvrebert>
Any w3C peeps able to look up who's a GitHub Collaborator on https://github.com/w3c/css-validator ?


2015-08-05
[17:04:24.0000] <MikeSmith>
cvrebert: the only people who have push access to that repo at this point are W3C staff

[17:04:33.0000] <MikeSmith>
why do you ask?

[17:05:06.0000] <cvrebert>
MikeSmith: Trying to find out who to ping to merge my PR: https://github.com/w3c/css-validator/pull/10

[17:05:31.0000] <MikeSmith>
we're not going to keep that repo

[17:06:26.0000] <MikeSmith>
it will end up getting overwritten when somebody (probably me) finally pushes the current code in the cvs repo to there

[17:07:34.0000] <cvrebert>
Ah. I eagerly await that clobbering then :-)

[17:07:53.0000] <MikeSmith>
yeah sorry it's not been done already

[17:08:27.0000] <MikeSmith>
the thing that's holding me up from doing that right now is, doing a mapping of the names of the contributors in the cvs repo to their github usernames, so that the history will be as it should be

[17:08:36.0000] <cvrebert>
eh, things happen :-)

[17:09:57.0000] <MikeSmith>
cvrebert: well please remind me about this again some time soon

[17:10:10.0000] <MikeSmith>
I may be able to do it today but I doubt it

[17:11:17.0000] <cvrebert>
/me adds a calendar reminder

[17:32:38.0000] <MikeSmith>
botie, inform cvrebert it would be helpful if you just close https://github.com/w3c/css-validator/pull/10, since it's not going to end up getting merged. (P.S. I'm putting together the username mappings for the repo migration right now.)

[17:32:38.0000] <botie>
will do

[17:33:27.0000] <MikeSmith>
TabAtkins: might you know if Bert has a github account?

[17:33:52.0000] <TabAtkins>
MikeSmith: No clue!

[17:34:29.0000] <MikeSmith>
yeah I reckoned :)

[17:34:34.0000] <MikeSmith>
figured it was worth a try

[17:34:48.0000] <MikeSmith>
/me peruses https://github.com/w3c/csswg-test/graphs/contributors

[17:35:56.0000] <MikeSmith>
oh astearns, know if Bert has a github account?

[17:36:29.0000] <astearns>
I don't know, but my guess would be no

[17:36:33.0000] <MikeSmith>
ok

[18:35:29.0000] <ssyrain>
Hi good people. I got messy code when `fetch` Chinese.

[18:35:59.0000] <ssyrain>
tried on both Chrome and Firefox, is this a issue of `whatwg-fetch` or Chrome/Firefox?

[18:37:50.0000] <ssyrain>
@channel

[18:44:25.0000] <TabAtkins>
ssyrain: @channel is a Slack thing, not an IRC thing.

[18:44:37.0000] <TabAtkins>
ssyrain: But what do you mean by "got messy code when `fetch` Chinese"?

[18:46:16.0000] <ssyrain>
when server respond with Chinese text with `utf-8` setted in response header, `fetch` can not recognize that and i got messy text.

[18:47:30.0000] <ssyrain>
when i changed to XmlHTTPRequest, Chinese text can be recognized

[18:49:36.0000] <TabAtkins>
If fetch() and XMLHttpRequest are acting different for the Content-Type header, it's a bug. Please report it!

[00:10:53.0000] <botie>
cvrebert, at 2015-08-05 00:32 UTC, MikeSmith said: it would be helpful if you just close https://github.com/w3c/css-validator/pull/10, since it's not going to end up getting merged. (P.S. I'm putting together the username mappings for the repo migration right now.)

[00:11:27.0000] <cvrebert>
Did that long ago :-)

[00:13:36.0000] <Ms2ger>
You should hang around here more often :)

[04:28:11.0000] <MikeSmith>
hsivonen: https://html5.validator.nu/ and https://validator.nu/ both 502 atm

[06:09:15.0000] <darobin>
Domenic: I don't know what your plans are for the WHATCG, but if you want to automate checks that PRs come from people who've signed the CG CLA (i.e. are members in it) feel free to use https://labs.w3.org/hatchery/ash-nazg/

[06:09:23.0000] <darobin>
happy to send you further details if it helps

[06:11:13.0000] <Domenic>
darobin: oh very cool. philipj ^

[06:11:41.0000] <darobin>
Domenic: it's just a click for me to add the WHATCG as one of the groups using that

[06:11:58.0000] <darobin>
there are still bugs, but it's used by the WICG and WebRTC WG already

[06:12:08.0000] <Domenic>
darobin: example of it in action?

[06:12:18.0000] <Ms2ger>
nazg for Nazgul?

[06:13:21.0000] <darobin>
Domenic: if you look at https://github.com/ResponsiveImagesCG/picture-element/pull/270 for instance you can see that it has IPR checks passing

[06:13:33.0000] <darobin>
whereas https://github.com/w3c-test/test-live/pull/1 doesn't

[06:13:46.0000] <Domenic>
darobin: excellent, full integration instead of google-cla-bot style nagging comments

[06:13:49.0000] <darobin>
Ms2ger: close enough, ash-nazg is the one ring

[06:14:02.0000] <darobin>
Domenic: yeah, it's basically just a status hook

[06:14:13.0000] <darobin>
when you create a repo through it, or import a repo into it, it adds the hook

[06:14:18.0000] <Domenic>
would be nice if clicking "Details" didn't ask me for mega-permissions

[06:14:23.0000] <darobin>
yeah

[06:14:26.0000] <Ms2ger>
Ah

[06:14:42.0000] <philipj>
Domenic, darobin, that sounds cool!

[06:14:54.0000] <darobin>
getting granularity with the GitHub API isn't simple

[06:15:07.0000] <darobin>
or at least, I couldn't find a simple way to make it work

[06:15:17.0000] <Domenic>
yeah i've heard that from a lot of people

[06:15:26.0000] <Domenic>
still surprised that "details" can't go to a "this is what this check is about" page

[06:15:49.0000] <darobin>
and since the tool needs to create repos, add files, add hooks for some of its functions, it's a bit of a PITA

[06:15:49.0000] <philipj>
darobin: does it just check the committer, or can the commit say where the idea came from somehow?

[06:16:20.0000] <darobin>
Domenic: I'm sure I can remove the login requirement on some pages; it's mostly a question of making sure the UI still makes sense and doesn't offer affordances for stuff you can't do

[06:16:47.0000] <darobin>
philipj: when you create a PR you can add comments to it with +@whoever to add someone, or -@someone to remove them

[06:16:57.0000] <darobin>
so yeah, you can get an idea from someone else and track that

[06:17:05.0000] <darobin>
(and even remove yourself as PR author)

[06:17:10.0000] <philipj>
darobin: awesomeness

[06:17:19.0000] <darobin>
it's pretty new, it has its rough edges

[06:17:36.0000] <darobin>
notably it doesn't mind if a PR has no contributors :)

[06:17:52.0000] <darobin>
also, mapping CG participants to GH usernames is semi-manual

[06:18:04.0000] <philipj>
for divinely inspired changes, presumably?

[06:18:15.0000] <darobin>
(but since you typically only have few contributors, the admin overhead isn't too bad)

[06:18:17.0000] <darobin>
lol

[06:18:28.0000] <darobin>
I've got some docs in an email, I need to put them up

[06:18:47.0000] <darobin>
anyway, I just wanted to say that if you folks want it it's there for you to use

[06:19:01.0000] <darobin>
and of course the source is available, yadda yadda

[06:19:27.0000] <darobin>
right now it creates repos that follow the WICG template, which isn't the same one you'd want — but that can be hacked in

[06:21:35.0000] <Domenic>
i'd kind of prefer not to create repos from it

[06:23:50.0000] <darobin>
that's fine, but in order for a repo to be managed by it you'd need to at least import them

[06:24:02.0000] <darobin>
and the current behaviour is that'll create files if they're not there :)

[06:25:18.0000] <darobin>
anyway, if you think it could be useful but with some changes, in a few weeks' time we can just sit down together to hash something out :)

[10:40:50.0000] <hsivonen>
MikeSmith: thanks. the validator is back up now.

[10:41:09.0000] <hsivonen>
/me seriously needs to automate the response to this situation

[10:45:15.0000] <MikeSmith>
hsivonen: thanks

[11:44:21.0000] <wanderview>
I wish github had a better way to show diffs on html files

[11:58:00.0000] <Domenic>
http://services.w3.org/htmldiff can sometimes help

[13:27:43.0000] <annevk>
/me misses context for https://twitter.com/W3CmemesExposed/status/628873727271415808


2015-08-06
[00:52:18.0000] <Ms2ger>
Arguments thing?

[00:53:06.0000] <annevk>
Ms2ger: that bikeshed treats arguments as if they're definitions

[00:53:18.0000] <Ms2ger>
Ah

[02:49:03.0000] <Ms2ger>
annevk, were you working on something for sites' database quota?

[02:55:01.0000] <MikeSmith>
Ms2ger: https://storage.spec.whatwg.org/#quota I think

[02:55:42.0000] <Ms2ger>
There we are

[02:56:53.0000] <MikeSmith>
though there's not much there there at this point

[02:57:06.0000] <Ms2ger>
Yeah

[02:57:42.0000] <Ms2ger>
/me wonders if we're going to move Storage into that spec

[03:04:56.0000] <annevk>
Ms2ger: what is Storage?

[03:05:06.0000] <Ms2ger>
local/session

[03:05:44.0000] <annevk>
We could maybe, would that shrink HTML a lot?

[03:05:56.0000] <annevk>
The Cache API could move there too maybe

[03:07:48.0000] <Ms2ger>
I don't know that there's any single piece that would shrink HTML by a lot, compared to its overall size :)

[03:09:03.0000] <Ms2ger>
Print preview on the w3c fork says 20 pages or so, for whatever that's worth

[03:09:37.0000] <jgraham>
That's <5% I think

[03:11:48.0000] <annevk>
Yeah, about 2% I suspect

[04:10:20.0000] <annevk>
Well, and since it's the fork that likely includes a bunch of boilerplate, so more like 1%...

[04:10:31.0000] <annevk>
But maybe as with performance every little bit helps?

[04:11:17.0000] <annevk>
TabAtkins: https://github.com/whatwg/dom/issues/62

[05:06:24.0000] <wanderview>
annevk: you around to help me with opaqueredirect?

[05:07:25.0000] <wanderview>
annevk: I don't see where the fetch algorithm consumes the opaqueredirect to actually do the redirect

[05:09:27.0000] <wanderview>
annevk: won't the original fetch algorithm that initiated the fetch event end up in the "manual" redirect mode of the 30x handling when an opaqueredirect is returned?  thus returning another opaqueredirect?

[05:10:07.0000] <wanderview>
annevk: ultimately I'm trying to understand if an opaqueredirect can result in the navigation triggering a second fetch event

[05:10:28.0000] <wanderview>
JakeA: maybe you have thoughts about this too ^^^

[05:21:56.0000] <JakeA>
wanderview: an opaque redirect to a navigation should result in another fetch event

[05:22:09.0000] <JakeA>
depending on the redirect location

[05:22:19.0000] <wanderview>
JakeA: depending?

[05:22:24.0000] <JakeA>
it'll go to the SW that controls the new location, if any

[05:22:50.0000] <wanderview>
JakeA: is this all "to be spec'd in HTML spec" sort of stuff?

[05:22:59.0000] <wanderview>
I don't see it currently

[05:23:29.0000] <JakeA>
So, if a navigation to //origin1/foo/bar returns a redirect to //origin2/baz, the SW which controls //origin2/baz will get the 2nd fetch event

[05:24:04.0000] <wanderview>
I have the feeling this is going to be really hard to implement in gecko

[05:24:55.0000] <wanderview>
JakeA: thanks

[05:25:46.0000] <JakeA>
wanderview: so a navigation hits https://fetch.spec.whatwg.org/#http-fetch, it gets an opaque redirect from the SW, which survives the checks in 2.2

[05:26:02.0000] <wanderview>
yep

[05:26:18.0000] <JakeA>
It doesn't do 5.301.10, because it's manual, not follow

[05:26:26.0000] <wanderview>
yep

[05:26:33.0000] <JakeA>
The response is returned to the navigation algo

[05:27:33.0000] <wanderview>
JakeA: well, does it double wrap as an opaque response then?

[05:27:40.0000] <wanderview>
but yea

[05:28:12.0000] <JakeA>
In step 19 of https://html.spec.whatwg.org/multipage/browsers.html#navigating-across-documents, the navigate algo loops back to create a new fetch based on the redirect url

[05:28:31.0000] <wanderview>
ok... thats the part I was missing

[05:28:43.0000] <wanderview>
I find the html spec hard to navigate

[05:28:55.0000] <JakeA>
it's a beast

[05:30:48.0000] <wanderview>
/me wishes bz was not on vacation...

[05:31:39.0000] <wanderview>
JakeA: it seems an error that 5.301.11 creates a new opaqueredirect if it already has an opaqueredirect

[05:31:51.0000] <hallvors>
jgraham: have a moment to look at the last few comments in https://critic.hoppipolla.co.uk/showcomment?chain=12228 ? TIA!

[05:32:24.0000] <wanderview>
seems like it should just return the existing opaqueredirect

[05:33:02.0000] <JakeA>
yeah, not sure I fully understand that, annevk usually has a good reason though. He'll be able to clear it up.

[05:33:35.0000] <wanderview>
JakeA: at least in our impl, we assert that an opaqueredirect doesn't wrap an existing filtered response type

[05:33:53.0000] <wanderview>
since it breaks the "get unfiltered <value>" semantics... that stuff only looks one level deep

[05:37:01.0000] <annevk>
wanderview: what is 5.301.11?

[05:37:24.0000] <wanderview>
annevk: http-fetch step 5, for the 30x series of status codes, step 11

[05:38:25.0000] <annevk>
wanderview: hmm yes

[05:40:08.0000] <annevk>
wanderview: I guess another problem is that when you return an opaqueredirect from a service worker when redirect mode is follow

[05:40:23.0000] <wanderview>
annevk: I don't think that is permitted today

[05:40:24.0000] <annevk>
wanderview: although I guess that scenario fails in 2.2

[05:40:29.0000] <wanderview>
annevk: yea

[05:41:42.0000] <annevk>
still, the whole status code dance should probably operate on the internal response, which would avoid recursive wrapping

[05:42:05.0000] <wanderview>
JakeA: so if someone is doing read-through-caching... we would expect an opaqueredirect to end up in the Cache... and the following secondary fetch event will result in the final resource being in the Cache too?

[05:42:54.0000] <wanderview>
annevk: the restriction for opaqueredirect for navigations seems a bit problematic to me

[05:42:55.0000] <JakeA>
wanderview: unless they were serving from cache-first, in which case they'd get a redirect loop

[05:43:28.0000] <wanderview>
JakeA: hmm... not sure I see where the loop happens

[05:43:34.0000] <annevk>
wanderview: you'll have to tell me what the problem is

[05:44:10.0000] <wanderview>
annevk: consider an opaqueredirect gets put in the Cache for navigation... but then the same URL is loaded as *not* a navigation, you will get a failure when its read out of the Cache

[05:44:23.0000] <wanderview>
annevk: for example, someone visits an img thats served with a redirect

[05:44:33.0000] <JakeA>
wanderview: no, you're right, it wouldn't loop, sorry

[05:44:37.0000] <wanderview>
visits the img as a navigation... then loads the page with the img embedded

[05:46:18.0000] <annevk>
why would the Cache API cache a redirect?

[05:47:18.0000] <JakeA>
annevk: if the pattern is cache-after-fetch: User visits '/', fetches, response added to cache

[05:47:46.0000] <wanderview>
annevk: this pattern: https://jakearchibald.com/2014/offline-cookbook/#on-network-response

[05:49:03.0000] <annevk>
Well, not handling manual redirects for navigations causes its own set of problems

[05:49:10.0000] <annevk>
Pick your poison

[05:49:49.0000] <JakeA>
I don't think caching a redirect is so bad tbh. If it's temporary maybe. But yeah, developers will need to watch what they cache

[05:50:23.0000] <annevk>
wanderview: I filed https://github.com/whatwg/fetch/issues/105 on your double wrapping issue

[05:50:39.0000] <wanderview>
annevk: by why not allow opaqueredirect for non-navigation

[05:50:41.0000] <wanderview>
?

[05:50:56.0000] <annevk>
wanderview: did you read #66?

[05:51:02.0000] <annevk>
I think we discussed this

[05:51:09.0000] <wanderview>
not in its entirety, no

[05:51:28.0000] <wanderview>
I can look for the navigation restrict

[05:54:10.0000] <annevk>
wanderview: I think https://github.com/whatwg/fetch/issues/66#issuecomment-121192316 discusses it

[05:55:07.0000] <annevk>
wanderview: the main problem is where the request ends up if the redirect went cross-origin

[05:55:20.0000] <annevk>
wanderview: that's clear for "manual", not for "follow"

[05:55:59.0000] <annevk>
It might be worth explaining that in the specification since it's a security restrictions of sorts

[05:56:12.0000] <jgraham>
hallvors: Donw

[05:56:16.0000] <jgraham>
*Done

[05:58:58.0000] <annevk>
I just received a long private rant about why we have to keep synchronous XMLHttpRequest...

[06:00:08.0000] <jgraham>
annevk: Do you have a Sync XHR bingo card yet?

[06:02:30.0000] <wanderview>
someone probably wrote "for a sync xhr, email annevk" in a bathroom stall somewhere

[06:02:49.0000] <annevk>
If you're curious, I forwarded the email to the responsible party: https://lists.w3.org/Archives/Public/www-archive/2015Aug/0006.html

[06:04:34.0000] <ato>
annevk: Millions I tell you.  MILLIONS!

[06:05:16.0000] <annevk>
"Douglas Crockford has likened doing changes like the ones you and your ilk imposed, as being like a physical assault, like cutting people with knives..."

[06:09:19.0000] <TabAtkins>
Oh wow, both "nazi" *and* "indian giving".  Had to throw in some racism at the end there I guess.

[06:09:20.0000] <caitp>
imposed?

[06:10:44.0000] <caitp>
i didn't think anyone actually turned the feature off yet

[06:11:42.0000] <ato>
Turning off sync XHR would have devastating effects on the web I think, although I can't back that up with data.

[06:12:02.0000] <caitp>
yeah, it sounds like it's probably not going to happen

[06:12:26.0000] <annevk>
The warning is there mostly to recommend better practice

[06:12:42.0000] <annevk>
And it seems to be effective in raising awareness

[06:13:21.0000] <TabAtkins>
And, I guess, having people with unrelated bugs fly off the handle.

[06:14:06.0000] <wanderview>
annevk: you could have gotten a short message like he sent this person: http://thehandshakedrugs.tumblr.com/post/22360423717/i-woke-up-to-this-email-this-morning-its-pretty

[06:15:30.0000] <wanderview>
/me goes on kid duty

[06:16:21.0000] <annevk>
wanderview: o_O nice detective work

[06:16:49.0000] <TabAtkins>
omg

[06:17:54.0000] <annevk>
I missed this gem at the end: "my hate and that of many others will be forever"

[06:52:53.0000] <wanderview>
/me resists making a Warhammer joke.

[06:53:54.0000] <wanderview>
annevk: why is the http-fetch 2.2 check "fail if non-navigation and opaqueredirect" instead of "fail if redirect mode is follow and opaqueredirect"?

[06:54:18.0000] <wanderview>
annevk: I mean.. why can't code do fetch(url, { redirect: 'manual' }) and get it intercepted with an opaqueredirect?

[06:57:13.0000] <annevk>
wanderview: well, redirects have tons of security issues around them, I rather keep them closely guarded until we know it's safe

[06:58:10.0000] <annevk>
wanderview: what's the use case of allowing that?

[06:58:24.0000] <annevk>
wanderview: we could work through it I suppose and add it if you think that's valuable

[07:02:22.0000] <wanderview>
annevk: no use case in mind... just trying to understand why we are operating on "navigation" instead of the primitives script can see/reproduce (since we rolled back context for now)

[07:04:26.0000] <annevk>
wanderview: since it's more restrictive

[07:04:39.0000] <annevk>
more MVP, if you will

[07:28:50.0000] <annevk>
So for whoever is attending TPAC... When you book the Renaissance Sapporo Hotel through Egencia (perhaps Expedia too?) the rates are less than half from what is listed on w3.org and their recommend travel agency...

[07:29:50.0000] <annevk>
As in, I'm staying six nights for USD ~400

[07:30:19.0000] <wilhelm>
Yes. I got it cheaper from Hotels.com.

[07:31:43.0000] <jgraham>
annevk: You're going to get angry mail from W3C management :)

[07:31:56.0000] <annevk>
jgraham: Film at 11

[07:32:07.0000] <wilhelm>
I'm arriving in Tokyo on Saturday morning (23rd). Will drink the best cocktails in town that night (you're all invited). Off to Sapporo the next day.

[07:32:52.0000] <annevk>
I'm arriving Friday morning...

[07:33:19.0000] <wilhelm>
In Sapporo or Tokyo?

[07:33:50.0000] <annevk>
Tokyo

[07:34:24.0000] <annevk>
I'm either staying there until Sunday, or join mnot's road trip idea, but that thread's been kind of silent lately

[07:38:29.0000] <wilhelm>
I'll be here all of Saturday night: http://www.japantimes.co.jp/life/2014/06/10/food/meet-willy-wonka-extraordinary-cocktails/ :D

[07:38:36.0000] <wilhelm>
(The Akasaka branch.)

[07:40:22.0000] <TabAtkins>
wilhelm: If you're ever in Seoul, you must go to Le Chamber. Best cocktails I've ever had.

[07:40:51.0000] <wilhelm>
/me takes notes.

[07:41:12.0000] <TabAtkins>
(We happened to go the night before the Korean bartending championships, so they had some guest mixers that night who made some *amazing* drinks.)

[07:41:31.0000] <TabAtkins>
The owners are brothers who have both won the championship, iirc

[07:41:37.0000] <wilhelm>
Oh, fun.

[07:42:10.0000] <TabAtkins>
I believe you always need a reservation, at least for a bar seat (which you want).

[07:47:46.0000] <wilhelm>
I attended a rather amazing food-and-cocktails pairing dinner at the above-mentioned place last week. The head bartender from Tippling Club in Singapore did the cocktails. That place is hereby recommended by proxy, too.

[07:55:50.0000] <gsnedders>
wilhelm: Sat is the 24th?

[07:56:28.0000] <wilhelm>
gsnedders: Yes.

[07:56:40.0000] <gsnedders>
wilhelm: silly wilhelm, can't you even date?

[07:56:41.0000] <wilhelm>
Eh, mistyped.

[07:56:43.0000] <wilhelm>
No.

[07:56:48.0000] <wilhelm>
Because timezones.

[07:56:51.0000] <gsnedders>
…that sounded more questionable than I meant.

[08:26:41.0000] <wanderview>
JakeA: annevk: if a navigation triggers a fetch event, then fetch event does nothing (does not call respondWith()), then the normal browser processing hits a redirect, should a second fetch event be triggered in that case?

[08:26:50.0000] <wanderview>
or only a second fetch event if an opaqueredirect is hit?

[08:27:24.0000] <JakeA>
Second fetch event, targeted at the controller of the new url

[08:27:51.0000] <wanderview>
JakeA: even if the controller is the same as the first fetch event? (same origin/scope)

[08:28:07.0000] <JakeA>
wanderview: yep!

[08:28:18.0000] <wanderview>
ok

[08:28:39.0000] <wanderview>
/me is beginning to think taking this bug was a mistake.

[08:28:47.0000] <JakeA>
wanderview: if I respondWith(Request.redirect('/')) to a navigation, I'd expect another fetch event too

[08:29:07.0000] <wanderview>
JakeA: but only for navigations, right?

[08:29:12.0000] <wanderview>
or manual redirect flag

[08:29:29.0000] <wanderview>
JakeA: Request.redirect('/') is not an opaqueredirect, right?

[08:31:07.0000] <JakeA>
wanderview: I'd expect another fetch if the original request was manual-redirect, and the initiating algo reacts to redirects by starting a whole new fetch (which is navigations, there may be others)

[08:31:26.0000] <JakeA>
wanderview: Request.redirect('/') is just a Response

[08:31:59.0000] <wanderview>
JakeA: so I guess if a script does fetch(url, { redirect: 'manual' }) they could detect the 30x status code and do a new fetch()

[08:32:20.0000] <JakeA>
annevk: would it be useful to start a ticket for drafting the patches to HTML regarding fetch?

[08:42:03.0000] <wanderview>
JakeA: do you consider this new redirect behavior v1 or v2 for service workers?

[08:42:21.0000] <wanderview>
should I be concerned about being incompatible if chrome waits to implement?

[08:53:52.0000] <JakeA>
wanderview: Google docs hit a problem where, on navigation, their SW would fetch the page, but it'd hit a redirect to the (other origin) login page. If they served this they'd get an error. They could work around it by making a no-cors fetch and assuming an opaque response was a redirect, and issue the redirect themselves, but then they're downloading the

[08:53:52.0000] <JakeA>
login page twice

[08:54:05.0000] <JakeA>
The changes to redirect were to handle this case

[08:54:50.0000] <JakeA>
So, without these changes, offline may fail in Google Docs, so I guess it depends on how much that matters

[09:09:20.0000] <annevk>
wanderview: yeah, because of manual and each request being fresh

[09:09:33.0000] <annevk>
JakeA: yeah sounds fine

[09:22:52.0000] <wanderview>
JakeA: well... from the issue comments the chrome impl team were a bit surprised by the changes... so I was wondering if it was going to be implemented later, etc

[09:22:57.0000] <wanderview>
not a priority or something

[09:23:46.0000] <JakeA>
wanderview: Docs are a pretty high priority customer for us, so pretty sure it'll get done with pretty high priority

[09:27:00.0000] <wanderview>
JakeA: annevk: do we need Request.context sorted before integrating with other specs?

[09:27:17.0000] <wanderview>
or I guess its not hard to change later... just might be more work to roto-till the other specs twice

[09:27:27.0000] <annevk>
wanderview: we'd just not define it for now I guess

[09:27:40.0000] <annevk>
I should have made a proposal for that today

[09:27:41.0000] <annevk>
forgot

[09:27:45.0000] <JakeA>
although CSP has kinda defined most of them

[09:35:06.0000] <ccardona-work>
Good morning WHATWG crew o/

[10:22:31.0000] <wanderview>
annevk: any chance you want to put http-fetch step 4, 30x case, step 11 before the "follow" steps?  short circuiting the short path is nicer when implementing

[10:22:35.0000] <wanderview>
minor nit

[10:32:57.0000] <annevk>
wanderview: file an issue?

[10:33:06.0000] <annevk>
wanderview: seems fine

[10:33:14.0000] <wanderview>
ok

[10:39:39.0000] <wanderview>
annevk: https://github.com/whatwg/fetch/issues/107

[11:10:54.0000] <miketaylr>
i need a better test word when trying to figure out how bikeshed works https://github.com/whatwg/compat/commit/2530dc6adcbd46f88f61c662501ff2ea81ba8ebf

[11:10:55.0000] <miketaylr>
>_<

[11:37:13.0000] <caitp>
so, what is the/an "associated url" of URLSearchParams?

[11:37:29.0000] <caitp>
a hack of URLs that have a reference to it?

[11:37:31.0000] <caitp>
hash*

[11:38:31.0000] <caitp>
"run these steps for each associated url object urlObject" --- i assume that's like a weakmap that gets added to on assignment or something

[11:56:48.0000] <caitp>
annevk: if you're still around, am I reading that right? we have this sort of URLSearchParams-looking polyfill in angular2, and if it's too complicated to actually polyfill correctly, or we end up wanting different behaviour, I'd like to clarify that asap

[12:34:30.0000] <annevk>
caitp: we will probably make it 1:1 instead

[12:34:43.0000] <annevk>
caitp: need to check if the change in Mozilla sticked around

[12:35:45.0000] <caitp>
but during the update step, any original search query stuck on the associated url is replaced right?

[12:36:46.0000] <annevk>
sure

[12:37:23.0000] <caitp>
Jeff Cross at google is saying that's probably not very good for our use cases, so i guess we can't leverage the native URLSearchParams if available :( oh well

[12:38:38.0000] <annevk>
caitp: he should file an issue against the URL spec

[12:38:56.0000] <annevk>
caitp: if it's not meeting someone's needs I'd like to know

[12:41:48.0000] <caitp>
maybe another method like URLSearchParams.prototype.append(urlSearchParams) { /* update current fields with new ones or different ones */  } might work better for us, we could probably leverage that

[12:41:57.0000] <caitp>
anyway I'll let him know he can file

[13:14:28.0000] <TabAtkins>
caitp: Note the possible semantic confusion - when there's a collision, are you adding your values, or replacing them?

[13:14:49.0000] <caitp>
yeah, i renamed that idea to .merge() in PM with jeff

[13:15:05.0000] <TabAtkins>
So adding?

[13:16:36.0000] <caitp>
that's a hard semantic to really figure out :|

[13:16:50.0000] <TabAtkins>
Because there's no single right answer!

[13:17:22.0000] <TabAtkins>
Thus why MultiMaps expose API for manipulating their values as a list *or* as a single value, depending on what your particular model is for the keys.

[13:17:31.0000] <caitp>
but the primitive of doing it manually by iterating over each field and deciding on a key by key basis, kind of sucks too

[13:19:10.0000] <TabAtkins>
Yeah, sure. Just means that we need *two* update methods (like we have .set() and .append(), and .get() and .getAll()) with names that suggest the right behavior as clearly as possible.

[13:19:44.0000] <TabAtkins>
Like updateReplace() and updateAppend() (using "update" because it's the Python name for the operation)

[13:22:44.0000] <caitp>
well, already got set/add/delete, how about merge(object, optionalSchema) :x

[13:25:04.0000] <TabAtkins>
You only listed a subset of the operations, and mixed the two modes together in doing so. I'm confused...

[13:26:20.0000] <TabAtkins>
We'd got get/set (for treating it as a Map) and getAll/append (for treating it as a MultiMap).  has/delete work the same in either type, so they're not duplicated.

[13:26:57.0000] <TabAtkins>
So for merging in another map, you need both a Map version (replaces collisions) and a MultiMap version (appends collisions).

[13:28:27.0000] <caitp>
so, if one key in your Map has a List value, and another key in your Map has a String value, you may want to append to one, and replace the other

[13:28:43.0000] <TabAtkins>
Then you have to do it manually, because you're being complicated.

[13:30:15.0000] <caitp>
well it is complicated, but nobody would want to write instructions for multiple query parameters that need to be merged with some default query parameters specified somewhere else, if they could simply write up a frozen schema and just reuse it, right?

[13:30:33.0000] <caitp>
that seems more friendly

[13:31:49.0000] <TabAtkins>
It's quite trivial to package that up yourself in a method on your own, so you just have to pass in the two maps and get the result.  I don't think there's enough call for "mixed" maps to justify specifying a schema, *particularly* not if you're suggesting using that *instead of* providing the two simple Map/MultiMap variants.

[13:32:44.0000] <caitp>
alright, not a fan of the idea, I get that =)

[13:33:23.0000] <TabAtkins>
It's super easy to write a function that does this automatically based on whether the key ends in [], a la PHP, too.

[13:36:54.0000] <caitp>
yeah but there are problems with that :( certain php authors assume that every client and backend understands that notation

[13:37:26.0000] <caitp>
ah well, can't spend too much time on this discussion, but maybe someone who has more time to think it through will float a proposal at whatwg/url

[13:51:04.0000] <TabAtkins>
Yeah, I didn't mean it as some universal baked into a spec, just as something you could do within a project to enable a generalized function for merging url search params, rather than having to write individual ones for each different search param pattern, or write up a separate schema for each pattern.


2015-08-07
[18:12:52.0000] <Oksana>
hsivonen: I was wondering if you could provide tips on requesting Maemo Source Code from Nokia (or Microsoft, as it may be)? https://hsivonen.fi/maemo-src/ You have source code for osso-rss-feed-reader version 1.2.31-1, while I am wondering about version 1.8.22-2 . Of course, I would prefer getting the latest source codes of _everything_ , if possible.

[21:57:29.0000] <annevk_>
Multimaps :-) At some point we'll redo FormData, URLSearchParams, and Headers in terms of them

[21:57:40.0000] <annevk>
Ugh that underscore

[03:42:01.0000] <hsivonen>
Oksana: I put the text of my request letter at https://hsivonen.fi/maemo-src/request.html . Feel free to adapt that text to the facts of your case. The GPL offer notice was in some sort of system-wide about box.

[05:36:35.0000] <n0a___>
Hi, Iv been redirected here, anyone knows what's the usage for the "xmlhttprequest" context? cf https://fetch.spec.whatwg.org/#concept-request-context

[05:42:52.0000] <JakeA>
n0a___: yeah, it's not xmlhttprequest, it's fetch. It means a serviceworker can detect the rough type of the request, which is useful when determining what kind of fallback content to show. It's also useful for CSP when deciding whether to block content or not. Also useful for network stack when deciding priority

[05:45:15.0000] <n0a___>
JakeA: sorry but I understand for most of the other values

[05:45:26.0000] <n0a___>
but not for this one or others connect-src ones

[05:45:54.0000] <n0a___>
in these cases does it refer to the context of the destination?

[05:46:18.0000] <n0a___>
or do you have a simple use case?

[05:46:40.0000] <JakeA>
n0a___: that big list is likely to be boiled down to something simpler. See https://github.com/whatwg/fetch/issues/93#issuecomment-126686379

[05:47:29.0000] <n0a___>
hum

[05:48:06.0000] <n0a___>
so ur saying these connect-src context values will be dropped?

[05:49:00.0000] <n0a___>
in short what is the use case for any connect-src scenario using fetch?

[05:49:10.0000] <n0a___>
ur fetching from xhr?

[05:49:19.0000] <n0a___>
that doesn't make sense to me

[05:49:42.0000] <n0a___>
you are fetching the url string to feed to xhr?

[05:49:44.0000] <JakeA>
fetch('/hello') would have a context of "connect" in that proposal

[05:49:55.0000] <JakeA>
as would xhr requests

[05:52:03.0000] <n0a___>
JakeA: so "processor" in your comment corresponds to the context property?

[05:52:14.0000] <JakeA>
annevk: Israel from Microsoft, what was his surname? (trying to find his email address)

[05:52:37.0000] <annevk>
JakeA: see pm

[05:52:57.0000] <JakeA>
n0a___: yeah, the context property is likely to be replaced by something like the things in that github comment

[05:53:32.0000] <n0a___>
that's a good thing because it seems easier to grasp

[05:53:59.0000] <n0a___>
is the current context property already supported by current browsers?

[05:54:05.0000] <n0a___>
well I could check

[05:55:48.0000] <n0a___>
JakeA: context is already supported by browsers so my question remains what does it mean to have an xhr context?

[05:56:12.0000] <JakeA>
n0a___: which browsers support context?

[05:56:17.0000] <n0a___>
chrome

[05:56:29.0000] <n0a___>
new Request({})

[05:57:04.0000] <n0a___>
I dunno if it supports the values though

[05:57:10.0000] <n0a___>
would require more tests

[05:58:29.0000] <JakeA>
n0a___: Chrome would drop 'context' and move to the new thing (which may still be called 'content')

[05:58:52.0000] <JakeA>
I don't think the current implementation is useful enough to create a breaking change

[05:58:57.0000] <n0a___>
JakeA: I still need to understand what are those src-connect value today

[05:59:42.0000] <n0a___>
of course if they are not supported that's another sotory

[05:59:44.0000] <JakeA>
n0a___: I don't think I understand your question. Are you asking what the context value would be in XHR? Do you mean in the current spec or the thing we're proposing on github?

[05:59:46.0000] <n0a___>
*story

[05:59:53.0000] <JakeA>
I don't think they're supported

[06:00:51.0000] <n0a___>
I am not proposing anything on GitHub, I want to understand why you would use the value "xmlhttprequest" for the property context of a request object

[06:01:38.0000] <n0a___>
what's the use case that supports it

[06:01:45.0000] <JakeA>
n0a___: well, the proposal on GitHub is to use "connect" as defined as CSP

[06:02:02.0000] <JakeA>
The use cases are at https://github.com/whatwg/fetch/issues/93#issuecomment-126653941

[06:02:07.0000] <annevk>
n0a___: it gives the service worker the ability to impose policies based on who requested the resource

[06:02:17.0000] <annevk>
n0a___: but as several folks pointed out, we're going to change how this works

[06:02:34.0000] <n0a___>
annevk: sorry to be so dense but what are the resorces in that case?

[06:02:52.0000] <JakeA>
n0a___: anything a page requests

[06:02:55.0000] <n0a___>
resources why do you need to set specifically to xhr?

[06:03:09.0000] <annevk>
n0a___: do you know what a service worker is?

[06:03:17.0000] <n0a___>
yes

[06:03:23.0000] <JakeA>
n0a___: we're not specifically setting xhr, the proposal is to use "connect" as defined by CSP

[06:03:24.0000] <annevk>
n0a___: and in particular how it can intercept fetches?

[06:03:48.0000] <annevk>
n0a___: "xmlhttprequest" is used when the service worker intercepts a fetch coming from XMLHttpRequest

[06:03:48.0000] <JakeA>
by using what's already defined by CSP, we're not really inventing much new

[06:04:03.0000] <n0a___>
OHHH so it's not fetch()

[06:04:13.0000] <n0a___>
but xhr using fetch internally?

[06:04:37.0000] <annevk>
n0a___: everything that does requests uses Fetch internally, but not necessarily the fetch() API

[06:04:50.0000] <annevk>
JakeA: I don't think "connect" is a value we should use

[06:05:06.0000] <n0a___>
ok but I wasn't interested in internal stuff… now I get it

[06:05:08.0000] <annevk>
JakeA: the type stuff made much more sense to me anyway

[06:05:28.0000] <annevk>
I guess I should try to resolve this next week

[06:06:15.0000] <JakeA>
annevk: I agree that "connect" is a bad name. I was just reusing CSP for consistency

[06:06:38.0000] <n0a___>
you should really differentiate fetch [intern] and fetch global

[06:06:45.0000] <n0a___>
it's quite confusing

[06:06:57.0000] <annevk>
n0a___: well, fetch() and fetch

[06:07:05.0000] <annevk>
n0a___: but... open to suggestions I suppose

[06:07:22.0000] <n0a___>
just a remark, you do whatever you want with it

[06:08:00.0000] <annevk>
n0a___: I agree with your remark, but I don't really have any better ideas

[06:08:39.0000] <JakeA>
I go with "fetch event" "fetch spec" and "fetch api" verbally

[06:09:28.0000] <n0a___>
maybe be very verbose whenever it could be confusing if it's taken out of context

[06:09:40.0000] <n0a___>
I see ppl quoting the spec and being confused

[06:10:32.0000] <n0a___>
or just add examples, always work :)

[06:12:49.0000] <annevk>
n0a___: well if you're already in the spec you can read https://fetch.spec.whatwg.org/#preface which should make things pretty clear

[06:13:20.0000] <n0a___>
like I said, ppl do quote the spec so it's out of context

[06:13:25.0000] <n0a___>
https://code.google.com/p/chromium/issues/detail?id=455116

[06:17:00.0000] <JonathanNeal>
I’m pushing svg4everybody v2 today. Any last minute pass over the README.md is very welcome: https://github.com/jonathantneal/svg4everybody/tree/feature/2.0.0

[06:17:42.0000] <n0a___>
gosh this is messy now they want to remove it https://code.google.com/p/chromium/issues/detail?id=515786

[06:19:02.0000] <n0a___>
reminds me of IE5 and document fragments

[06:19:31.0000] <n0a___>
implemented removed reimplemented

[06:20:56.0000] <JakeA>
n0a___: not too messy, we knew shipping aggressively may mean making breaking changes. I haven't seen a lot of use of it, although we're going to gather evidence

[06:21:22.0000] <n0a___>
well I am starting

[06:21:56.0000] <n0a___>
but something that puzzled me is the lack of type for the Response object

[06:22:17.0000] <n0a___>
as if you have to know the type

[06:23:34.0000] <n0a___>
and even more confusing is that we have https://developer.mozilla.org/en-US/docs/Web/API/Response/type

[06:24:08.0000] <JakeA>
n0a___: what type do you want?

[06:24:15.0000] <JakeA>
as in, what information are you wanting?

[06:24:33.0000] <JakeA>
If it's content type, look at the headers

[06:24:36.0000] <n0a___>
blob, json, text etc

[06:24:55.0000] <n0a___>
why? the content header could lie

[06:26:26.0000] <JakeA>
n0a___: there's no such type as blob

[06:26:37.0000] <JakeA>
that's what you read the content into, but all types can be read into blob

[06:27:00.0000] <JakeA>
sounds like you're wanting something to read the data and determine the type?

[06:27:26.0000] <n0a___>
https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype

[06:27:26.0000] <JakeA>
But take "Hello <b>everyone</b>" - is that plain text or HTML?

[06:27:48.0000] <JakeA>
n0a___: that's something you set for how you want the response to be processed

[06:27:50.0000] <n0a___>
I don't really care about the values

[06:27:57.0000] <n0a___>
just a string with the type

[06:28:10.0000] <JakeA>
It's a string you set, not a string you read

[06:28:16.0000] <n0a___>
right

[06:28:25.0000] <n0a___>
so ur saying there's no way to forge the header?

[06:28:26.0000] <JakeA>
Is that what you want?

[06:28:38.0000] <JakeA>
Let's start again

[06:28:48.0000] <n0a___>
you must be right

[06:28:55.0000] <JakeA>
Are you looking for a way to say "I want to read this response as JSON"?

[06:29:04.0000] <n0a___>
the responsetype is set before the send

[06:29:07.0000] <n0a___>
sorry about that

[06:29:12.0000] <JakeA>
Yep

[06:29:53.0000] <n0a___>
no I wanted to know the type of the received data without having to know it or use the header

[06:30:03.0000] <JakeA>
With fetch you don't set a response type, you get a response and read the body how you want, eg fetch(url).then(r => r.json())

[06:30:24.0000] <n0a___>
still you need to know what ur receiving

[06:30:27.0000] <JakeA>
Isn't really possible I'm afraid. Some types can be detected, but not all

[06:30:41.0000] <JakeA>
Back to the example: "Hello <b>everyone</b>" - is that plain text or HTML?

[06:30:47.0000] <JakeA>
Or XML

[06:30:47.0000] <n0a___>
a data-agnostic receiving function would be complicate

[06:31:00.0000] <n0a___>
well it's a string :)

[06:31:01.0000] <JakeA>
Impossible I reckon

[06:31:41.0000] <JakeA>
n0a___: You're still relying on headers to decide that

[06:34:14.0000] <n0a___>
I dunno if you are working on the spec yourself but there's something else I had a hard time with, it's the non object values of https://fetch.spec.whatwg.org/#headers-class

[06:34:23.0000] <n0a___>
I dunno if I am the target of the spec

[06:34:41.0000] <n0a___>
but it seemed pretty obscure

[06:34:58.0000] <n0a___>
probably requires webidl knoledge to graps

[06:35:02.0000] <n0a___>
graps*

[06:35:20.0000] <n0a___>
grasp third try

[06:37:27.0000] <annevk>
n0a___: I write the spec, but yeah, you need to know IDL

[06:58:30.0000] <n0a___>
JakeA: it's implemented https://codereview.chromium.org/1060033002/diff/60001/Source/modules/fetch/Request.cpp#newcode296

[06:58:45.0000] <n0a___>
so I have to support it sadly for you :)

[07:06:00.0000] <JakeA>
n0a___: I'm not sure what you're saying. Why do you need to support it?

[07:06:42.0000] <n0a___>
I don't understand sorry, if it's implemented that's what you have to use

[07:07:11.0000] <JakeA>
You don't have to use everything that's implemented

[07:07:24.0000] <n0a___>
until something else replace it

[07:07:31.0000] <JakeA>
And we're likely to remove that feature

[07:07:35.0000] <JakeA>
What are you trying to do?

[07:08:31.0000] <n0a___>
just reading the spec

[07:08:36.0000] <n0a___>
thx for your support

[07:09:10.0000] <JakeA>
/me goes for a lie down

[08:06:52.0000] <wanderview>
annevk: (or JakeA if you're up) if I event.respondWith(Response.redirect(url) where event.request.redirect==follow, should I get another fetch event?  reading the spec is seems I should, but I don't trust anything about my interpretation now

[08:09:09.0000] <JakeA>
wanderview: I agree with your reading, you'll get another fetch

[08:10:42.0000] <wanderview>
JakeA: and even if the redirect is same origin, its done as a CORS request?  (seems CORS flag is always set... seems weird for same origin)

[08:13:20.0000] <JakeA>
wanderview: "CORS flag set if set.", so it only sets CORS is the original was

[08:13:45.0000] <wanderview>
JakeA: arg... I actually parsed that odd language yesterday

[08:14:16.0000] <JakeA>
Took me a couple of reads, but then, I have a \o/ deskbeer \o/

[08:15:49.0000] <wanderview>
ha

[08:15:51.0000] <wanderview>
thanks

[08:53:35.0000] <annevk>
If you have suggestions for rewording that, I'm all ears (or eyes, really)

[08:54:12.0000] <annevk>
But yeah, if you get a redirect from the service worker, fetch will follow it and go into the service worker again

[09:43:30.0000] <n0a___>
annevk: just a quick question I don't wanna add a dupe issue on github, is there a ticket which covers the fact that the default for request modee should be 'same-orgin' (and not "no-cors") which would imply an opaque filtered response (which is not desired obviously)?

[09:44:00.0000] <n0a___>
I don't think https://github.com/whatwg/fetch/issues/101 covers my demand

[09:44:52.0000] <annevk>
n0a___: neither of those is the default iirc

[09:45:16.0000] <n0a___>
"A request has an associated mode, which is one of "same-origin", "no-cors", "cors", and "cors-with-forced-preflight". Unless stated otherwise, it is "no-cors"."

[09:45:35.0000] <n0a___>
unless there's another source for the spec that I am not aware of

[09:45:52.0000] <annevk>
n0a___: ah, that has to be the default since most stuff requires "no-cors"

[09:46:02.0000] <annevk>
n0a___: but for fetch() the default is "cors"

[09:46:22.0000] <n0a___>
so the default listed there are not for fetch

[09:46:30.0000] <n0a___>
I should look elsewhere then

[09:47:00.0000] <annevk>
The defaults there are for all features

[09:47:14.0000] <annevk>
The API is defined in https://fetch.spec.whatwg.org/#fetch-api

[09:47:53.0000] <n0a___>
Otherwise Set request's response tainting to "cors".

[09:48:19.0000] <n0a___>
k thx you should put somewhere the default state of a request for fetch

[09:49:43.0000] <n0a___>
(all of them instead of having to check each one)

[09:53:27.0000] <annevk>
Yeah, that would make sense, one day

[10:01:07.0000] <wanderview>
annevk: I think instead of "CORS flag set if set", I would understand "with the current CORS flag value" better.

[10:01:36.0000] <annevk>
wanderview: but set/unset is not a value

[10:02:14.0000] <wanderview>
annevk: how is it not a boolean value?

[10:02:24.0000] <wanderview>
/me senses a lesson in spec terminology coming on.

[10:03:14.0000] <annevk>
wanderview: gotta go, but yeah, it's basically the way it's phrased

[10:09:09.0000] <n0a___>
can't ctrl-f numbers since ur using lists :)

[10:26:07.0000] <ccardona-work>
Good morning WHATWG crew o/

[11:57:10.0000] <TabAtkins>
Am I reading this correctly, that when you dispatch an event, all the event handlers run synchronously at that point in your algorithm?

[11:57:16.0000] <TabAtkins>
annevk: ^^^

[11:58:11.0000] <TabAtkins>
It *looks* like that's the case from the DOM spec, but I was under the impression that firing an event just queued up the event handlers onto the task queue, so they don't run until the next time you hit the event loop.

[13:35:14.0000] <JakeA>
TabAtkins: I thought it was sync

[13:35:38.0000] <JakeA>
In fact, IDB relies on it being sync

[13:40:40.0000] <jsbell>
JakeA: Agree that it's sync, but where in IDB?

[13:41:06.0000] <jsbell>
(since in IDB that triggers events happens async)

[13:41:10.0000] <smaug____>
TabAtkins: event dispatching is always sync

[13:41:25.0000] <jsbell>
(... in IDB everything that triggers events...)

[13:41:30.0000] <TabAtkins>
Okay, cool, that means I'm wrong and have to swap the ordering of some stuff in Font Loading. ^_^

[13:41:37.0000] <smaug____>
if you need asyncness, you queue a task to dispatch event...

[13:43:07.0000] <JakeA>
jsbell: step 4 of http://w3c.github.io/IndexedDB/#fire-a-success-event - if events were async the transaction would be closed onsuccess

[13:44:04.0000] <jsbell>
JakeA: ah, yes.

[13:45:54.0000] <JakeA>
That's my least favourite line of IDB. If only it was queue a microtask.

[13:46:12.0000] <JakeA>
Then you could build an OK promise API on top

[13:50:00.0000] <jsbell>
JakeA; It does seem likely it's web-compatible to change it

[13:51:07.0000] <JakeA>
jsbell: that'd be great

[13:51:14.0000] <jsbell>
JakeA: although some devs don't want anything that'd make transaction commits slower. To them I say: https://gist.github.com/inexorabletash/d55a6669a040e92e47c6

[13:51:33.0000] <jsbell>
JakeA: file a spec bug so we don't forget to discuss?

[13:53:15.0000] <JakeA>
jsbell: I'll pick it up before Monday (I've got a tab open for the Chrome & Firefox bugs so that'll remind me when I'm next at the laptop)

[13:53:23.0000] <jsbell>
cool

[13:54:02.0000] <jsbell>
sicking: who's the best Moz contact for IDB at the moment? (specifically I want to discuss shipping getAll)

[13:55:15.0000] <sicking>
jsbell: i think it might be Jan Varga (jvarga@moz). Though you should include Andrew Overholt (overholt@moz) as well

[13:55:21.0000] <jsbell>
thx

[13:55:35.0000] <sicking>
jsbell: i think we would be for it though

[13:55:54.0000] <jsbell>
cool; running away to an appt now, TTYL


2015-08-08
[22:08:09.0000] <capella>
You can further customize the speed at which it captures video, the length of time it records (the default duration is 3-minutes) and the size of the video in terms of resolution.

[22:08:10.0000] <capella>
adb shell screenrecord --bit-rate 8000000 --time-limit 30 /sdcard/kitkat.mp4

[22:08:17.0000] <capella>
ooops sorry

[04:03:08.0000] <hgl>
MikeSmith, how was the conf? had a great time there? :)

[08:43:15.0000] <mrtn_>
can anyone tell me when the <picture> element and the srcset attribute (in short, responsive images) have been added to the specs (living standard) for the first time?

[08:52:47.0000] <mrtn_>
or asked differently, is there a public history of all changes to the whatwg living standard?

[10:39:07.0000] <Domenic>
mrtn_: https://github.com/whatwg/html-mirror


2015-08-09
[01:53:56.0000] <annevk>
Does anyone know an email client on iOS that only emits text/plain emails?

[01:54:39.0000] <annevk>
(That doesn't require ssh to use Mutt on some far away server.)

[02:23:31.0000] <nox>
annevk: Why does NodeIterator need a special pre-remove hook exactly?

[02:26:25.0000] <nox>
I don't see what it does that couldn't be done with the removing steps.

[02:30:59.0000] <nox>
What did it make possible that wasn't before?

[02:31:35.0000] <nox>
annevk: The issue explains what is the change, but doesn't explain why.

[02:35:48.0000] <annevk>
nox: well, the first step of NodeIterator was sort of broken before

[02:36:02.0000] <nox>
annevk: How so?

[02:37:37.0000] <annevk>
nox: hmm, maybe that's okay

[02:37:46.0000] <annevk>
nox: the other reason is that oldPreviousSibling is going away

[02:38:37.0000] <nox>
I don't follow. You remove it because it's not useful anymore, but it's not useful anymore because there is now a concept specific to NodeIterator.

[02:39:20.0000] <annevk>
nox: well, what we had didn't exactly match browsers either

[02:39:39.0000] <nox>
But it still doesn't match browsers doesn't it? It just matches whatever Blink does.

[02:39:40.0000] <annevk>
nox: I first want to refine things to more accurately match what browsers do

[02:39:52.0000] <nox>
And you are not even sure that NodeIterator couldn't work with just removing steps. :/

[02:40:04.0000] <annevk>
nox: well this is also roughly what Gecko does, except it does it through a generic mutation observer thingie

[02:40:22.0000] <annevk>
nox: well I'm sure it can't work if the removing steps no longer include oldPreviousSibling

[02:40:32.0000] <annevk>
which they won't, since they don't include that in anyone's setup

[02:40:39.0000] <nox>
annevk: That's circular reasoning IMO.

[02:42:14.0000] <annevk>
No browser has the setup you advocate... I'm not sure what to tell you

[02:42:54.0000] <nox>
I don't see how Gecko has the setup with the NodeIterator special hook either.

[02:44:11.0000] <annevk>
It instead has a far more elaborate synchronous mutation observer setup

[02:44:25.0000] <annevk>
Which I don't think makes sense to specify

[02:45:37.0000] <nox>
So you can't say "it's also roughly what Gecko does".

[02:46:10.0000] <annevk>
nox: Gecko has the same "removing steps" that I plan to have and that Blink also has

[02:46:39.0000] <nox>
My point is that I could see uses for oldPreviousSibling in the first place, that it allowed NodeIterator to not have its own special snowflake hook, and now it's yet another concept to implement in addition to the other ones.

[02:47:46.0000] <annevk>
Well ranges are already special, it didn't seem too bad to make NodeIterator special too in that light

[02:48:01.0000] <annevk>
And focus/blur...

[02:48:40.0000] <nox>
Well I don't see how ranges could avoid being special, that's a different issue to me.

[02:48:54.0000] <annevk>
I don't think we actually want to expose oldPreviousSibling precisely because it could mean more stuff starts using it... But we could of course change the contracts around if it's compelling enough

[02:49:09.0000] <nox>
What is wrong about more stuff using it?

[02:49:59.0000] <annevk>
It would require browsers to change most of their existing infrastructure. It would also require different hooks for custom elements. And it's not clear whether it's a good idea since so far we haven't needed it.

[02:51:09.0000] <nox>
I fear the opposite, that more special behaviours will be added when they could have just use oldPreviousSibling.

[02:52:17.0000] <annevk>
That seems unlikely

[02:52:26.0000] <annevk>
But if that happens we can revisit

[02:52:26.0000] <nox>
And you don't need it because you had to rewrite NodeIterator removing steps as its own special thing.

[02:54:06.0000] <annevk>
Given that NodeIterator didn't use the normal remove hook in all browsers that seemed like fine to me. Also given that ranges were there too. I guess you see things differently, but you're not exactly coming forward with cases that would require oldPreviousSibling...

[02:54:48.0000] <nox>
annevk: How will you handle "The relevant mutations for an img element are as follows: (…) The element's parent is a picture element and a source element that was a previous sibling is removed."?

[02:56:19.0000] <nox>
Wouldn't the associated plumbing be in the <source> removing steps? In which case you would just gather all <img> that followed oldPreviousSibling.

[02:56:21.0000] <annevk>
Presumably in the same way that browsers handle that today?

[03:01:22.0000] <annevk>
nox: that's an interesting question though

[05:11:40.0000] <jgraham>
http://www.reuters.com/article/2015/08/08/opera-software-ma-idUSL5N10J09C20150808

[05:58:22.0000] <MikeSmith>
jgraham: :(

[06:03:58.0000] <MikeSmith>
hgl: Shanghai was great. Talked to Dapeng there. My friend Gao Bo did Mandarin interpretation of the presentation I did. That guy's an exceptional translator.

[09:40:14.0000] <annevk_>
jgraham: everyone did sort of expect that from the new CEO

[09:40:30.0000] <annevk>
jgraham: being a sales person

[09:41:26.0000] <annevk>
jgraham: somewhat surprised it took this long, although admittedly I also thought they were going to make it on that advertising stuff for a while

[09:53:25.0000] <jgraham>
AIUI the adertising stuff is now their biggest source of revenue

[09:53:49.0000] <jgraham>
Although I did believe the internet rather than actually looking at the financials

[09:58:03.0000] <jgraham>
The financials do indeed make Opera look like a mobile advertising business with an increasingly vestigial software development arm

[12:22:46.0000] <Ms2ger>
https://sny.no/2015/08/living

[15:13:25.0000] <Domenic>
Not bad

[15:13:29.0000] <Domenic>
Now just to fix these http://www.w3.org/TR/webdriver/#references

[15:14:27.0000] <Domenic>
I wonder if it's worthwhile pushing for DOM4 to be abandoned now that it has no active editors doing the work of porting

[16:14:16.0000] <SimonSapin>
How does https://html.spec.whatwg.org/multipage/infrastructure.html#parsed-as-a-css-color-value deal with currentColor?

[16:15:07.0000] <SimonSapin>
(context: https://github.com/servo/servo/issues/7106#issuecomment-129171059)


2015-08-10
[17:57:26.0000] <hgl>
MikeSmith, awesome. Dafeng said he had a great time with you too. also he said you put in a good word for me. thanks you! i just joined his company recently. :) glad to hear you are happy with Gao Bo's translation.

[22:44:20.0000] <annevk>
SimonSapin: search for "computed value of the 'color' property"

[22:45:32.0000] <annevk>
SimonSapin: https://html.spec.whatwg.org/multipage/scripting.html#2dcontext:canvasrenderingcontext2d-22 seems to be a somewhat direct reference

[22:46:03.0000] <annevk>
So even <canvas> flushes layout...

[23:31:33.0000] <annevk>
JakeA: Domenic: is it worth correcting https://twitter.com/KevinLozandier/status/630588656835760129?

[23:32:12.0000] <annevk>
JakeA: Domenic: I've seen him mention this several times now, neglecting to mention that e.g., Domenic is a TC39 member too...

[23:46:19.0000] <annevk>
richt: what's the Working Copy application?

[23:47:22.0000] <annevk>
I see, a git client

[23:53:05.0000] <JakeA>
annevk: on it

[01:24:39.0000] <richt>
annevk: Working Copy is an iOS Git app: http://workingcopyapp.com. I've removed it...unless it's ok to use it after all.

[02:08:28.0000] <annevk>
richt: seems alright

[02:12:53.0000] <annevk>
richt: it's also still approved for /whatwg afaict

[02:16:57.0000] <annevk>
Does anyone understand the GitHub Public/Private distinction and why I can change it for Owners, but not for Members?

[02:17:14.0000] <annevk>
Ideally everyone part of WHATWG is Public, I think...

[02:18:54.0000] <richt>
annevk: I revoked SSH key access from Working Copy. It should no longer be approved (or even listed) :/

[02:19:48.0000] <annevk>
richt: perhaps SSH key access and being an approved application are different things

[02:20:00.0000] <annevk>
richt: if you want I can remove it as an approved application

[02:20:08.0000] <richt>
annevk: please do.

[02:20:30.0000] <richt>
annevk: I was just trying it out a couple of weeks ago.

[02:44:29.0000] <SimonSapin>
thanks annevk

[02:46:01.0000] <annevk>
SimonSapin: we can (and probably should) make that clearer down the road

[02:46:26.0000] <annevk>
I think it's somewhat important to clearly identify the places that require layout/style recalc

[02:57:02.0000] <SimonSapin>
annevk: perhaps https://html.spec.whatwg.org/multipage/scripting.html#dom-context-2d-fillstyle , when it links to  parsed as CSS <color> values, should also link to the bit you pointed out

[03:11:47.0000] <annevk>
SimonSapin: perhaps the <color> parser needs an explicit second argument to supply currentColor

[03:15:03.0000] <SimonSapin>
yes, except that CSS Color is written more in the style "this is a thing that exists, and that is what it means" rather than algorithms with arguments and results

[03:36:52.0000] <annevk>
At some point that requires either a wrapper of sorts or a rewrite...

[08:45:43.0000] <annevk>
JakeA: "is this the correct origin? Does it have a padlock?" yes this

[08:46:51.0000] <annevk>
Updating HTTP references was somehow super painful

[08:47:11.0000] <annevk>
Not sure anything really improved, other than stripping leading and trailing whitespace from header values

[08:47:14.0000] <JakeA>
annevk: something like [padlock][origin-minus-scheme-if-http(s)][    gap    ][path in light grey] might work

[08:47:25.0000] <JakeA>
People get angry at removing the path

[08:47:28.0000] <JakeA>
unless Apple do it

[08:48:13.0000] <annevk>
Given that mobile rules the world these days I'd be interested in hearing what these folks suggest for displaying all that stuff there... Doesn't really seem reasonable to fit that all...

[08:50:41.0000] <JakeA>
https://jakearchibald.com/2014/improving-the-url-bar/#comment-1369138973 "This is a terrible idea… and, like so many others, I can't help but be suspicious that this is a tricksy way to make users stupider, less powerful"

[08:53:02.0000] <annevk>
I actually think it empowers more users overall

[08:53:53.0000] <annevk>
Since training origin + padlock is much easier than origin + padlock while ignoring "https://" (but not "https.") and everything following the initial "/"

[08:55:07.0000] <annevk>
And security is still what we have the address bar for, navigating based on hacking the URL space not so much

[08:55:24.0000] <annevk>
And I believe technically URL paths are opaque anyway, although search engines derive meaning from them

[09:05:49.0000] <jgraham>
Woah

[09:06:01.0000] <jgraham>
What happened with all the editable stuff

[09:06:02.0000] <Domenic>
annevk: does my point at https://github.com/whatwg/fetch/issues/103#issuecomment-129507316 make sense? the primitives there are OKness and mutexes, or at least OKness and transactions.

[09:07:01.0000] <annevk>
Domenic: hmm, can't follow it entirely, maybe JakeA can?

[09:07:35.0000] <Domenic>
annevk: well, suppose you wanted atomic transactions based on only allowing through 301s instead of only allowing through OK.

[09:07:48.0000] <Domenic>
you need a transaction primitive that you can combine arbitrarily with any predicate

[09:07:57.0000] <Domenic>
not one that's hard-coded to the OK-ness predicate

[09:08:40.0000] <JakeA>
You'll still end up with specs including "if response is not 'ok', treat as network error"

[09:09:15.0000] <annevk>
That might be okay though

[09:09:28.0000] <JakeA>
If we don't get a way to treat !ok requests as failures, I'll want to add it to cache.add & addAll

[09:09:46.0000] <annevk>
:-/

[09:09:54.0000] <JakeA>
If it's considered high-level, perhaps that's the place for it

[09:11:18.0000] <jgraham>
Does anyone know if the intersection of focus and contenteditable is specced anywhere?

[09:21:04.0000] <annevk>
jgraham: there's https://w3c.github.io/editing/ but how stable any of that is, is unclear

[09:29:30.0000] <wanderview>
JakeA: could NEL be implemented completely in user-space on top of SW?

[09:29:33.0000] <wanderview>
seems like it could

[09:30:15.0000] <wanderview>
with foreign fetch event

[09:30:23.0000] <JakeA>
wanderview: it seems that if //origin includes a js file from //other-origin, and that request fails… ah yes you know

[09:30:33.0000] <JakeA>
but yes

[09:31:00.0000] <wanderview>
should we recommend that instead of adding a new thing to the platform?

[09:31:11.0000] <wanderview>
I guess there is download cost for the scripts/libs

[09:31:25.0000] <JakeA>
The thought did cross my mind, it feels premature

[09:31:42.0000] <wanderview>
k

[09:34:04.0000] <jgraham>
annevk: Yeah, I just found that apparently the work that Aryeh did has now been replaced with something that has basically no content

[10:59:55.0000] <annevk>
jgraham: yeah if that continues I plan to fork

[11:02:29.0000] <wanderview>
JakeA: have we previously considered some SW feature that tells the browser to automatically "reply to these URLs by executing .match() on this Cache object" without running js?  So we can avoid spinning up a worker thread on cold-launch of a site

[11:04:50.0000] <JakeA>
wanderview: yeah, we drafted a "static routes" API, where you'd specify a url (with globbing) and could provide a series of sources to attempt to find a match, eg: look for match in cache, try network, match a specific request in cache

[11:05:12.0000] <JakeA>
We decided we shouldn't solve performance problems until we knew the size and shape of them

[11:05:37.0000] <JakeA>
But if we're getting to that point we can look at it again

[11:05:55.0000] <wanderview>
JakeA: ok... I guess it comes down to what we think is reasonable performance

[11:06:39.0000] <wanderview>
JakeA: firefox os is moving to service workers from out non-standard app:// scheme... but its hard to avoid a performance regression since app:// pulled straight from a zip archive on disk

[11:07:12.0000] <wanderview>
but a performance regression for firefox os may still be a performance improvement for the web in general

[11:09:33.0000] <JakeA>
wanderview: what kind of regression are we talking? I mean, if it's bad, FirefoxOS may be a decent place to trial such an API

[11:10:31.0000] <wanderview>
JakeA: we have two optimizations to try first... 1) grace time to keep worker thread alive longer (easy) 2) pre-compile the SW scripts and cache the bytecode

[11:11:05.0000] <wanderview>
JakeA: if I had to guess, I think we will still have a 20ms to 30ms regression for the machinery to start the thread... but who knows for now

[11:11:07.0000] <JakeA>
Makes sense. I *think* we have both of those going on now

[11:11:25.0000] <wanderview>
JakeA: I was asking about the other thing as kind of a backup plan

[11:11:42.0000] <JakeA>
wanderview: hah, that's exactly what we drafted the API for :D

[11:11:50.0000] <wanderview>
JakeA: yea... chrome definitely has the grace period... had not heard about caching the bytecode, but wouldn't surprise me

[11:12:16.0000] <wanderview>
JakeA: ok, good to know we can resurrect that if needed

[11:12:16.0000] <wanderview>
thanks!

[11:12:22.0000] <JakeA>
wanderview: http://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html

[11:13:46.0000] <wanderview>
I think we only cache bytecode for asmjs scripts at the moment...

[13:48:52.0000] <wanderview>
TabAtkins: do you know if CSSFontFaceLoadEvent is a real thing?

[13:49:05.0000] <TabAtkins>
Real how?

[13:49:09.0000] <TabAtkins>
It's, like, in the spec.

[13:49:21.0000] <wanderview>
I don't see it in here: https://drafts.csswg.org/css-font-loading/

[13:49:46.0000] <TabAtkins>
Sorry, yeah, "load" doesn't exist.

[13:49:55.0000] <TabAtkins>
"loading", "loadingdone" and "loadingerror" do.

[13:50:10.0000] <wanderview>
TabAtkins: I see this in the spec:  FontFaceSetLoadEventInit

[13:50:22.0000] <wanderview>
without the Init

[13:50:48.0000] <TabAtkins>
Yeah, that's the interface.

[13:51:06.0000] <TabAtkins>
https://drafts.csswg.org/css-font-loading/#fire-a-font-load-event

[13:51:08.0000] <wanderview>
hmm... I wonder why we have this CSSFontFaceLoadEvent interface then

[13:51:24.0000] <TabAtkins>
Because you need to subclass DOMException if you want to pass extra info.

[13:51:33.0000] <TabAtkins>
Or Event, whatever.

[13:51:45.0000] <TabAtkins>
I'm incapable of using words today.

[13:51:59.0000] <wanderview>
I mean... we seem to have named our interface incorreclty

[13:52:07.0000] <wanderview>
was the interface named something else before?

[13:52:40.0000] <TabAtkins>
No? All three events share that interface.

[13:52:57.0000] <TabAtkins>
It's the event interface used for all the load events coming out of a fontfaceset

[13:53:15.0000] <wanderview>
TabAtkins: I mean... the spec references an interface named FontFaceSetLoadEvent... but gecko has a CSSFontFaceLoadEvent which seems a different interface name

[13:53:33.0000] <TabAtkins>
Ohhhhh

[13:53:40.0000] <TabAtkins>
See my earlier "I can't words today"

[13:53:57.0000] <wanderview>
I think its a gecko bug... but I guess I need to track down one of our font/css people

[13:54:02.0000] <wanderview>
who all seem to be out today

[13:54:04.0000] <TabAtkins>
I was seriously just auto-translating what you actually typed into what was in the spec. ^_^

[13:54:22.0000] <TabAtkins>
Anyway, it might have been named that at some point?

[13:54:25.0000] <TabAtkins>
I can trawl history.

[13:54:50.0000] <wanderview>
TabAtkins: thanks, but I don't want to take your time for something that is our problem

[13:54:58.0000] <wanderview>
just thought you might know off the top of your head

[13:56:52.0000] <TabAtkins>
wanderview: Confirmed that it was renamed at some point; I just checked the oldest version in the repo and it has the name CSSFontFaceLoadEvent

[13:57:04.0000] <wanderview>
TabAtkins: thanks!

[13:57:40.0000] <TabAtkins>
wanderview: https://github.com/w3c/csswg-drafts/commit/48353a72f7bc4bb9cd91102f3a2ce25f7e73b669

[13:58:09.0000] <wanderview>
awesome... over a year ago

[13:58:28.0000] <wanderview>
and we're about to ship the old name *facepalm*

[13:58:54.0000] <TabAtkins>
This is probably why I should write tests, if only I had time...

[14:03:03.0000] <wanderview>
filed a bug to get it fixed in gecko

[14:03:06.0000] <wanderview>
TabAtkins: thanks for your help!

[14:03:11.0000] <TabAtkins>
np


2015-08-11
[18:06:00.0000] <cvrebert>
MikeSmith: Any update on the CSS Validator repo migration?

[18:30:25.0000] <tripu>
ato?

[18:38:20.0000] <ato>
tripu: Hi.

[18:47:29.0000] <MikeSmith>
cvrebert: probably will get to it today

[18:47:51.0000] <cvrebert>
MikeSmith: \o/

[22:10:55.0000] <annevk>
"You’ve been removed from the Web Platform Testing and Tools Pushers team on the World Wide Web Consortium organization." I wonder what I did

[22:17:18.0000] <MikeSmith>
annevk: nothingーyou still have push perms

[22:17:40.0000] <MikeSmith>
that team was redundant

[22:23:03.0000] <Domenic>
annevk: is there a way to invoke the basic URL parser without a base URL in browsers, except indirectly? I tried setting <base href="url-to-parse"> and then investing <a href="#">.href, but it parsed url-to-parse relative to the page's "real" URL.

[22:23:30.0000] <Domenic>
I know you can do it with new URL("url-to-parse") but I was wondering if there were another context I could try, especially one that isn't allowed to fail.

[22:24:08.0000] <annevk>
Domenic: set <base> to about:blank

[22:24:13.0000] <annevk>
Domenic: roughly equivalent

[22:24:30.0000] <annevk>
Domenic: not sure it works reliably in IE/Edge though

[22:24:34.0000] <Domenic>
doesn't seem to work in Chrome...

[22:24:56.0000] <annevk>
oh

[22:25:44.0000] <annevk>
Domenic: test:test seems to work in Chrome...

[22:25:59.0000] <Domenic>
oh nice!

[22:26:20.0000] <Domenic>
https://jsbin.com/someje/edit?html,console,output is fun

[22:27:48.0000] <Domenic>
"" in Chrome, "/\\example.jpg" in Firefox, "https://null.jsbin.com///example.jpg" in IE11

[22:28:58.0000] <Domenic>
It's as if all this code was written without a well-specified standard

[22:29:03.0000] <Domenic>
Or worse, off of RFCs

[22:29:47.0000] <annevk>
Firefox' output is correct, if you hit a fatal parse error you just return the input

[22:29:56.0000] <annevk>
(it's fatal since there's no base URL)

[22:31:22.0000] <annevk>
Domenic: how does it match Chrome?

[22:33:15.0000] <Domenic>
Chrome matches when parsed with base URL

[22:33:29.0000] <Domenic>
Firefox matches without one

[22:33:51.0000] <annevk>
Oh right, Firefox doesn't handle backslashes correctly yet

[22:34:07.0000] <annevk>
There's an open bug on that

[22:36:17.0000] <annevk>
Domenic: for https://github.com/whatwg/loader/issues/62 I think ideally we end up with something similar to custom elements

[22:36:36.0000] <annevk>
Domenic: although I guess it's not quite lifecycle methods, but it's somewhat close

[22:37:15.0000] <Domenic>
Ah yeah interesting parallel

[22:37:34.0000] <Domenic>
That argues for symbols at least

[23:46:22.0000] <annevk>
MikeSmith: https://blogs.oracle.com/maryanndavidson/entry/no_you_really_can_t seems like something you'd enjoy reading

[23:46:38.0000] <MikeSmith>
/me looks

[23:54:44.0000] <MikeSmith>
annevk: needs more photos

[23:54:50.0000] <MikeSmith>
but "Bug bounties are the new boy band" is good

[23:57:39.0000] <MikeSmith>
there should be a reverse bug-bounty thing, where if you try to get attention by claiming some product/spec has a security vulnerability and it turns out to not really be true, you have to give money to a community fund that then gets paid out to people who find real security vulnerabilities

[23:58:21.0000] <annevk>
<<Otherwise everyone would hire a consultant to say (legal terms follow) “Nanny, nanny boo boo, big bad consultant can do X even if the customer can’t!”>>

[23:59:23.0000] <annevk>
The entire premise though of security by obscurity seems so wrong... I'm somewhat baffled this person is the CTO.

[00:04:46.0000] <MikeSmith>
annevk: actually, Chief Security Officer, right?

[00:06:15.0000] <MikeSmith>
and speaking of security by obscurity I notice that Oracle's state-of-the-art blogging tool identifies her as "User701213-Oracle" in the byline

[00:06:25.0000] <MikeSmith>
that inspires a lot of confidence

[00:07:02.0000] <MikeSmith>
especially since the gist of the piece is basically "Trust us, we know what we're doing."

[01:16:07.0000] <annevk>
abc.wtf is kinda funny

[01:33:51.0000] <Ms2ger>
So what's this Alphabet thing?

[01:40:33.0000] <annevk>
Ms2ger: most plausible explanation I saw was that it's a trick to pay less tax, but I don't understand US tax law so I don't really know if that's the real reason

[02:33:27.0000] <JakeA>
annevk: when a listener callback is executed (https://dom.spec.whatwg.org/#dispatching-events), is that calling a callback as per https://html.spec.whatwg.org/#clean-up-after-running-a-callback ?

[02:33:51.0000] <annevk>
JakeA: this is the dust thing I mentioned

[02:34:05.0000] <JakeA>
ahh ok

[02:34:34.0000] <annevk>
JakeA: see the bugs blocking https://www.w3.org/Bugs/Public/show_bug.cgi?id=17713

[02:34:47.0000] <JakeA>
Chrome's implementation performs a microtask checkpoint per listener, Firefox doesn't

[02:34:50.0000] <annevk>
JakeA: the idea though, is yes

[02:35:06.0000] <annevk>
JakeA: Firefox does too, just not for promises

[02:36:21.0000] <JakeA>
Ahh I see. I'll test this with mutation observers

[02:37:29.0000] <annevk>
JakeA: are you using FirefoxNightly btw?

[02:37:37.0000] <JakeA>
annevk: no, will test that now

[02:40:18.0000] <JakeA>
annevk: yeah, still wrong in Nightly

[02:40:28.0000] <annevk>
Hmm, I cannot find the bug in Nightly

[02:40:55.0000] <JakeA>
annevk: http://jsbin.com/zetoya/edit?console,output

[02:41:08.0000] <JakeA>
click the blue square

[02:42:20.0000] <annevk>
I see

[03:02:03.0000] <Ms2ger>
Was display: -webkit-flexbox a thing?

[03:09:27.0000] <annevk>
Ms2ger: some search results suggest display: -webkit-flex is

[04:20:59.0000] <Ms2ger>
MikeSmith, https://blog.mozilla.org/community/2015/08/10/firefox-40-new-contributors/

[04:23:10.0000] <MikeSmith>
Ms2ger: w00t

[04:23:34.0000] <MikeSmith>
I wonder when do I start getting the royalty checks

[04:28:44.0000] <Ms2ger>
MikeSmith, can you add csswg-test to the testing teams on github?

[04:29:15.0000] <MikeSmith>
Ms2ger: which teams exactly?

[04:29:43.0000] <Ms2ger>
 Web Platform Testing / Web Platform Testing and Tools Owners

[04:31:42.0000] <MikeSmith>
ok

[04:31:46.0000] <MikeSmith>
done I think

[04:32:00.0000] <Ms2ger>
Yep, thanks

[05:09:44.0000] <annevk>
JakeA: https://html5.org/temp/fetch-newcontext.html

[05:15:25.0000] <JakeA>
annevk: looks good. Why does imgset get an initiator?

[05:16:42.0000] <JakeA>
annevk: I can see why xslt-styles are their own thing, given the CSP rule, but why an initiator rather than type?

[05:17:21.0000] <annevk>
JakeA: you'd want type = "xslt"?

[05:17:44.0000] <annevk>
JakeA: I opted for initiator since I expected "xslt" to maybe be removed at some point and initiator is not exposed

[05:17:55.0000] <annevk>
JakeA: I guess it doesn't matter much either way...

[05:18:05.0000] <JakeA>
that's a good enough reason

[05:18:15.0000] <annevk>
JakeA: "imageset" is needed for Mixed Content

[05:18:23.0000] <annevk>
and again, since initiator is not exposed...

[05:18:35.0000] <JakeA>
ahh good point

[05:18:46.0000] <JakeA>
annevk: I take it audio/video/track have different enough requests to warrant their own type?

[05:18:51.0000] <JakeA>
rather than just media

[05:19:01.0000] <annevk>
JakeA: I would expect them to have their own Accept header

[05:19:15.0000] <annevk>
JakeA: which is one of the things we use context for today

[05:19:38.0000] <annevk>
JakeA: we also use context to enforce X-Content-Type-Options: nosniff for which we'd also need these distinguished

[05:21:37.0000] <JakeA>
annevk: would fetch's type become settable?

[05:22:43.0000] <annevk>
JakeA: I don't see how we could do that and use it as a security mechanism at the same time, unless we restrict how the response is used

[05:24:54.0000] <JakeA>
Yeah, that follows. I guess there could be Request.asType('image', url, opts), but it only affects headers, not underlying type (or sets some kind of "imitating type")

[05:26:08.0000] <JakeA>
annevk: this looks really good. Nice one.

[05:26:52.0000] <annevk>
JakeA: yeah, I think for igrigorik's use cases we'd include an additional axis of sorts

[05:27:14.0000] <annevk>
JakeA: "as type" or "pretend type" or some such, that's simply not used for security

[05:27:32.0000] <JakeA>
Makes sense

[05:28:32.0000] <JakeA>
For <link rel="prefetch"> etc, setting actual type should be fine, as only the correct type will get a cache match on that

[05:29:29.0000] <JakeA>
But fetch(request) should always be connect-src

[05:42:40.0000] <annevk>
JakeA: does Chrome always use a browsing context for <object>?

[05:42:56.0000] <annevk>
JakeA: afaict Chrome does something different from Firefox

[05:44:03.0000] <JakeA>
annevk: I don't know off the top of my head, I'll find someone to bug about that when SF wakes up. I'm not sure how I'd test that

[05:44:32.0000] <JakeA>
annevk: When I click something on the page, how is the dispatch of the event queued? Is it a task?

[05:45:25.0000] <JakeA>
actually, thought of a way to test the object thing

[05:45:27.0000] <annevk>
JakeA: I've been playing with http://software.hixie.ch/utilities/js/live-dom-viewer/ and <object data=document> vs <object data=image>

[05:45:45.0000] <annevk>
JakeA: for the latter contentDocument is null in Firefox, but in Chrome you still get a document

[05:46:30.0000] <annevk>
JakeA: In Firefox you only get a contentDocument if you do <a target=x href=image>...</a> against <object data=document name=x>

[05:47:46.0000] <JakeA>
annevk: http://jsbin.com/jeruku/edit?console,output - no contentDocument on this

[05:47:56.0000] <JakeA>
click events don't get trapped either

[05:49:36.0000] <annevk>
whoa how is that different

[05:50:10.0000] <annevk>
Does it depend on whether or not you document.write() the <object> in Chrome?

[05:51:04.0000] <JakeA>
annevk: updated the bin. Looks the same

[05:52:49.0000] <annevk>
If I start typing in that bin it really shouldn't try to sync your stuff from upstream

[05:52:53.0000] <annevk>
That's super annoying

[05:53:20.0000] <JakeA>
heh, I've stopped typing

[05:54:35.0000] <annevk>
JakeA: see http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3589

[05:54:47.0000] <annevk>
JakeA: and the difference in Chrome and Firefox

[05:57:00.0000] <JakeA>
That is bizarre

[05:57:40.0000] <annevk>
I know, I was thinking we could require Chrome's behavior and always have a browsing context, but you've shown that Chrome doesn't always do that

[05:57:49.0000] <annevk>
And now I'm confused

[05:58:15.0000] <JakeA>
annevk: typemustmatch would do the trick though, right?

[05:59:05.0000] <annevk>
JakeA: provided we defined the behavior and removed those <object> elements from being able to be targeted with <a target>...

[06:00:10.0000] <JakeA>
annevk: can an object with typemustmatch and a non-document type still be navigated via <a target>?

[06:00:20.0000] <annevk>
JakeA: I'm not sure

[06:00:37.0000] <JakeA>
That might be ok, because we still know before the response if it'll be a document or not

[06:03:26.0000] <annevk>
Yeah, although I wonder if <object> will show its fallback content in case of a network error and whether it'll have a browsing context in that case...

[06:04:12.0000] <annevk>
But I guess that's fine, it's equivalent to a hidden <iframe>, only the ones no longer part of the tree are bad

[06:05:40.0000] <JakeA>
Hah, I don't think I understand the processing model of object fallbacks, they don't seem to appear in the DOM

[06:06:39.0000] <annevk>
That sounds like a bug

[06:11:38.0000] <JakeA>
It's certainly not what I expected

[06:12:39.0000] <gsnedders>
they definitely should be in the DOM!

[06:14:15.0000] <JakeA>
Ah, I think they are, but devtool's representation is broken

[06:14:20.0000] <JakeA>
http://output.jsbin.com/ganehi/quiet

[06:30:02.0000] <JakeA>
annevk: is it explained anywhere that jobs and microtasks share the same queue?

[06:32:16.0000] <annevk>
JakeA: not yet

[06:32:54.0000] <annevk>
JakeA: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=25981

[06:33:42.0000] <annevk>
I wonder if we can work with bterlson on a better model

[06:34:03.0000] <annevk>
Since awbjs wasn't too helpful

[06:39:51.0000] <JakeA>
Thanks for the link, exactly what I was looking for. https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-18 appears to be the closest to confirmation

[06:40:13.0000] <JakeA>
And yeah, awbjs wasn't being too helpful in that thread

[07:40:12.0000] <annevk>
JakeA: I think https://bugzilla.mozilla.org/show_bug.cgi?id=874571 and https://bugzilla.mozilla.org/show_bug.cgi?id=1169307 are the Firefox issues btw

[07:41:46.0000] <JakeA>
annevk: cheers! I might get you to proofread this tomorrow if you have time

[07:42:52.0000] <wanderview>
annevk: so does our broken microtask implementation block something significant?  looking for a way to prioritize it to get someone to work it

[07:43:51.0000] <JakeA>
wanderview: you can't promisify indexedDB https://github.com/w3c/IndexedDB/issues/27

[07:44:58.0000] <JakeA>
wanderview: I wrote a promisified version of IDB, but it only works in Chrome due to the microtask thing https://github.com/jakearchibald/indexeddb-promised/blob/master/test/idb.js#L18

[07:46:10.0000] <wanderview>
JakeA: you mean you can't write a polyfill that works?

[07:46:48.0000] <JakeA>
wanderview: yep, there's no way to get a value & write a value within the same transaction, as promise callbacks happen too late

[07:47:11.0000] <JakeA>
same goes for iterating over cursors

[07:48:08.0000] <wanderview>
hmm, I see... I'm not sure that's enough to raise the priority unfortunately... I guess we can ask bz when he returns from holiday

[07:51:21.0000] <wanderview>
annevk: maybe we should write a bug about this specific problem... since not sure anyone will see it buried in the comments on the other bug

[08:02:13.0000] <annevk>
JakeA: are you writing a patch for HTML?

[08:02:35.0000] <annevk>
wanderview: we could I guess

[08:02:54.0000] <JakeA>
annevk: for what?

[08:03:06.0000] <annevk>
JakeA: you were asking for proofreading

[08:04:08.0000] <JakeA>
annevk: ohh sorry, no, I'm writing an article on tasks microtasks & jobs. You mentioned the bugs right after I saw https://twitter.com/briankardell/status/631095683559387136 so thought you'd seen it

[08:05:00.0000] <annevk>
JakeA: ah, I only saw your original tweet

[09:21:00.0000] <Domenic>
JakeA: yay, thus proving my strategy of never actually writing anything in my blog post backlog, since other people will do so eventually anyway

[09:21:32.0000] <Domenic>
JakeA: can you emphasize how jobs are a stupid non-real-world abstraction that just make things complicated by pretending they're relevant. they make me angry.

[09:21:36.0000] <annevk>
wanderview: JakeA: I filed https://bugzilla.mozilla.org/show_bug.cgi?id=1193394 specifically on the topic of promises and microtasks

[09:22:00.0000] <annevk>
Domenic: when can we fix awbjs mistakes? es-discuss does not make me hopeful

[09:22:15.0000] <Domenic>
give brian some time to settle in, and we'll see.

[09:24:14.0000] <JakeA>
Domenic: haha, so what should ECMAScript have done instead? Offered an API to the queue so microtasks could just use that?

[09:24:35.0000] <Domenic>
JakeA: just actually worked with the real-world concept of microtasks, IMO.

[09:25:04.0000] <wanderview>
JakeA: there seems to be an excellent opportunity for a "Domenic is angry" picture here

[09:25:11.0000] <Domenic>
Pretending there is this abstract separation of "abstract job which could in theory be anything" is silly when all engines intend to implement in the exact same way.

[09:25:19.0000] <wanderview>
from your last blog post we know you are a wiz with photoshop...

[09:25:25.0000] <Domenic>
oh dear

[09:25:27.0000] <JakeA>
haha

[09:25:43.0000] <Domenic>
I still never found out why I was on a slide at jqConf

[09:28:44.0000] <annevk>
JakeA: I think the best would have been for ECMAScript to just do HostEnqueue(potential metadata, the task) and have some requirements around ordering for hosts

[09:29:43.0000] <JakeA>
annevk: that would have covered the microtask listener behaviour automatically, since the stack would be empty between listener calls, so it'd do the right thing

[09:30:53.0000] <Domenic>
annevk: wait, that's basically what ES does.

[09:31:16.0000] <annevk>
Domenic: see the HTML ES6 integration bug for how much harder ES makes it

[09:31:27.0000] <annevk>
(referenced above somewhere)

[09:31:52.0000] <Domenic>
Ah right it tried to take over initialization somehow

[10:01:53.0000] <Domenic>
TabAtkins: ping https://github.com/tabatkins/bikeshed/issues/438#issuecomment-129662299

[10:13:12.0000] <TabAtkins>
Domenic: It strikes me that I might not have the id generation correct for dfn-headings.  I think the heading will generate an id first and then won't generate one as a dfn.

[10:13:44.0000] <Domenic>
TabAtkins: I've heard of a technique called unit tests that might help in this kind of situation ;)

[10:14:44.0000] <TabAtkins>
I've heard of those, but I dont' think they're real.

[12:06:36.0000] <Domenic>
bterlson: would you say Edge has "no public signals" for Array.prototype.includes, or "public support"

[13:07:29.0000] <bterlson>
Domenic: I think the latter as I don't recall talking about it

[13:08:12.0000] <Domenic>
bterlson: as in, no objections, so your default position for TC39-supported things is public support?

[13:08:29.0000] <bterlson>
err, I meant former not latter

[13:08:32.0000] <Domenic>
ah right ok

[13:08:34.0000] <bterlson>
there have been no public signals

[13:08:35.0000] <bterlson>
BUT

[13:08:39.0000] <bterlson>
can I make one now? ;)

[13:08:43.0000] <Domenic>
yep!

[13:08:45.0000] <bterlson>
do you need to link to something

[13:08:46.0000] <bterlson>
?

[13:08:52.0000] <Domenic>
chat logs should be fine :)

[13:09:16.0000] <bterlson>
how is public support defined anyway?

[13:09:30.0000] <bterlson>
saying "yeah we'll implement that" is sufficient?

[13:09:58.0000] <Domenic>
yeah pretty much

[13:10:07.0000] <bterlson>
because assuming Array.prototype.includes works on the web we will def implement it :-P

[13:10:16.0000] <Domenic>
as distinct from "that's a bad idea" or "we have no comment at this time and will leave you in suspense"

[13:10:31.0000] <bterlson>
no evidence yet to suggest it's a bad idea

[13:10:35.0000] <bterlson>
:-P

[13:10:43.0000] <Domenic>
i'll take it! :)

[13:10:48.0000] <bterlson>
haha

[13:10:49.0000] <bterlson>
nice

[13:11:54.0000] <Domenic>
sigh the logs for this channel are over HTTP, so sad so sad.

[13:22:41.0000] <Ms2ger>
Domenic, I'm sure krijnhoetmer would be happy for you to pay for https ;)

[13:23:00.0000] <Domenic>
Ms2ger: I'm happy to walk him through how to create a free cloudflare account.


2015-08-12
[03:56:19.0000] <annevk>
JakeA: we need some new terms for service workers

[03:56:44.0000] <annevk>
JakeA: when request's destination is "unknown", the service worker needs to be skipped

[03:56:58.0000] <annevk>
JakeA: when it's "subresource", the service worker is selected based on the client

[03:57:23.0000] <annevk>
JakeA: when request's destination is any other value, the service worker is selected based on the request's url

[03:57:51.0000] <JakeA>
Makes sense

[03:58:00.0000] <annevk>
JakeA: we used to call this last one "client request", but does that still make sense if it includes NEL and CSP reports?

[03:58:09.0000] <annevk>
(and downloads)

[04:00:05.0000] <JakeA>
annevk: agreed, describing it in terms of destination makes more sense. Although I'm still not totally sure if CSP reports are "of the page" or not

[04:00:40.0000] <annevk>
If they're not they could become a subresource, but it doesn't really resolve the naming issue

[04:00:50.0000] <annevk>
Assuming we want to have names

[04:01:16.0000] <JakeA>
Since CSP can block "client" requests, I guess they're not of the page

[04:01:28.0000] <JakeA>
(of the client, I mean)

[04:01:43.0000] <JakeA>
So the system works

[04:01:57.0000] <JakeA>
"" is an acceptable destination

[04:02:17.0000] <annevk>
Sure, but my question is what we should do with "client request" as a term

[04:02:25.0000] <annevk>
And "navigation request"

[04:02:29.0000] <annevk>
Etc.

[06:04:05.0000] <annevk>
JakeA: are you explaining microtask vs compound microtask, too?

[06:04:46.0000] <JakeA>
annevk: I wasn't, but probably because I don't understand it myself

[06:04:51.0000] <JakeA>
I could

[06:06:04.0000] <annevk>
JakeA: I just know I need the latter for mutation observers... I forgot why it has that setup

[06:06:26.0000] <annevk>
JakeA: aklein knows and explained it to me once

[06:06:28.0000] <JakeA>
annevk: just saw the other messages, we could get rid of "client request" and "navigation request" and instead describe them in terms of destination

[06:06:48.0000] <annevk>
JakeA: I have some kind of solution for that already

[06:07:00.0000] <annevk>
JakeA: it's "non-subresource request"

[06:07:15.0000] <annevk>
JakeA: not super elegant, but it'll do

[06:07:20.0000] <JakeA>
Seems fine to me

[07:11:38.0000] <annevk>
JakeA: is https://github.com/whatwg/fetch/issues/79 going to result in a change to the Cache API?

[09:22:52.0000] <JakeA>
annevk: yeah, I think the same-origin restriction seems reasonable

[09:22:59.0000] <JakeA>
(sorry that reply took so long)

[09:24:26.0000] <annevk>
JakeA: hmm, that's not the one I hoped for

[09:25:00.0000] <annevk>
JakeA: I was hoping that if we the request has redirect mode not to follow and the cache only has a redirected response, it returns failure

[09:25:23.0000] <JakeA>
annevk: oh, wait, you're right

[09:25:28.0000] <JakeA>
yeah, it won't need a change

[09:25:34.0000] <JakeA>
sorry

[09:25:49.0000] <JakeA>
I should think more

[09:25:51.0000] <annevk>
You mean Fetch doesn't need a change, but the Cache API does?

[09:26:20.0000] <JakeA>
No, cache doesn't need to change, "same-origin" navigations are enough

[09:27:05.0000] <annevk>
Hmm. I thought we wanted to allow CORS responses for those in theory?

[09:27:10.0000] <annevk>
I do anyway

[09:27:21.0000] <JakeA>
I think this is a good reason not to

[09:27:28.0000] <annevk>
Seems rather arbitrary

[09:27:54.0000] <annevk>
I think this is a good reason to not make the Cache API return something different from the fetch() API

[09:31:07.0000] <JakeA>
annevk: not sure what you mean

[09:32:56.0000] <JakeA>
This bug can be fixed by a same-origin restriction in cache, or enforcing same-origin for navigations in fetch. In both cases, you could take a CORS response, read the data & make a synthetic response to circumvent the limitation

[09:33:19.0000] <annevk>
What about my solution?

[09:34:34.0000] <annevk>
What I mean is that the Cache API not respecting RedirectMode seems like a bit of a bug

[10:42:44.0000] <wanderview>
annevk: JakeA: whatever happened to the idea of requiring SW scripts to be 'use strict'?

[11:21:41.0000] <jsbell>
wanderview: https://github.com/slightlyoff/ServiceWorker/issues/294 captures most of it, I guess.

[11:22:34.0000] <wanderview>
ok, thanks

[11:44:40.0000] <annevk>
wanderview: I think that failed

[11:45:00.0000] <annevk>
wanderview: we need something like module:true at some point

[11:49:21.0000] <wanderview>
annevk: ok... I was more just verifying we should not be treating script warnings as hard failures in the SW script... currently gecko does that

[11:50:05.0000] <annevk>
wanderview: what is a script warning?

[11:50:29.0000] <annevk>
wanderview: sounds bogus

[11:50:45.0000] <wanderview>
annevk: function f() { return 1; return 2; }

[11:50:57.0000] <wanderview>
legal js, but we generate a warning

[11:51:00.0000] <wanderview>
I believe

[11:51:31.0000] <annevk>
that doesn't even throw with "use strict" afaict

[11:52:17.0000] <annevk>
wanderview: so yeah, we shouldn't do that

[11:52:29.0000] <wanderview>
right

[11:59:48.0000] <Domenic>
 yeah that's a devtools thing basically

[12:32:29.0000] <wanderview>
Domenic: whats really awesome is that because of this bug we can't load asmjs stuff in service worker scripts... because it "logs" success messages as "warnings"

[12:32:52.0000] <Domenic>
oh wow that is fun

[12:39:51.0000] <annevk>
wanderview: so much wrong :-/

[12:40:18.0000] <wanderview>
annevk: Its a one-line fix thankfully

[13:14:10.0000] <JosephSilber>
TabAtkins, when nesting two `flex-direction: column` containers in a `flex-direction: row` container, the innermost flex items seem to overflow the innermost container.

[13:14:13.0000] <JosephSilber>
http://codepen.io/anon/pen/oXOYNz?editors=110

[13:14:39.0000] <JosephSilber>
Is that right? I have an app that I haven't touched in months. It used to work as expected, but doesn't now.

[13:15:22.0000] <TabAtkins>
JosephSilber: That's the min-height:auto triggering.

[13:15:34.0000] <TabAtkins>
Set min-height:0 to make it not expand too large

[13:15:36.0000] <JosephSilber>
TabAtkins, In that example, I would expect the list to scroll, since it should stop at the boundry of its container.

[13:15:51.0000] <JosephSilber>
min-height makes it spill over?

[13:16:07.0000] <TabAtkins>
Yeah, it forces it to a minimum height equal to its natural height.

[13:16:18.0000] <JosephSilber>
Which element needs the min-height:0

[13:16:19.0000] <JosephSilber>
?

[13:16:25.0000] <TabAtkins>
The column

[13:17:06.0000] <JosephSilber>
Why does it only happen in triple-nested flex containers like that?

[13:17:56.0000] <JosephSilber>
TabAtkins, it doesn't happen here: http://codepen.io/anon/pen/mJgOeB?editors=110

[13:18:11.0000] <JosephSilber>
Only when I wrap it in an additional flex container with a perpendicular axis.

[13:30:17.0000] <TabAtkins>
It does happen, but overflow is complicated and hard to debug.

[13:31:10.0000] <TabAtkins>
In that case you're specifying the height on the containers, so the min-width adjusts to that.

[13:31:34.0000] <TabAtkins>
But when they're perpendicular, if often doesn't have a definite-height container any more.

[13:31:40.0000] <TabAtkins>
So the min-height is full-powered.

[13:36:49.0000] <JosephSilber>
hmmmmmm.

[13:36:57.0000] <JosephSilber>
Like you said, complicated.

[13:37:00.0000] <JosephSilber>
:)

[13:39:10.0000] <TabAtkins>
It turns out to be complicated no matter what. :(  Before we did min-height:auto, flexboxes did visible overflow constantly and it was really hard to debug which one was the problem.

[16:20:13.0000] <gsnedders>
NetVC is aiming at WebRTC and similar things, right? who has (and hasn't) expressed an interest in it?

[16:20:24.0000] <gsnedders>
I presume it's mostly the normal crowd (Moz, Goog, Op)


2015-08-13
[00:56:02.0000] <annevk>
philipj: perhaps Firefox throws because 2^32-1 is out of range/index?

[00:56:08.0000] <annevk>
/me is not super familiar with this API

[01:01:57.0000] <philipj>
annevk: yeah, it would still throw, just for a different reason

[01:03:08.0000] <annevk>
philipj: indeed, seems like the IDL can be safely changed, but then you need to decide what to do with the value...

[01:03:15.0000] <philipj>
yep

[01:03:39.0000] <annevk>
well, "safely", you will get different results

[02:38:53.0000] <annevk>
"[T]he reviewer for my registration of application/xhtml+xml in 2014 objected because I was not referring to XHTML 2.0." Thank you darobin, that's comedy gold

[02:39:06.0000] <darobin>
annevk: :)

[02:39:16.0000] <darobin>
yeah, MikeSmith and I laughed about that for a while

[02:39:22.0000] <darobin>
shame the stuff is not public

[02:39:31.0000] <darobin>
PLH had to stop me from basically strangling them

[03:26:15.0000] <annevk>
SimonSapin: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26341 is so true

[03:26:50.0000] <annevk>
SimonSapin: and over a year old now, I guess I should try to come up with a model that sucks less

[03:30:03.0000] <aleray>
Hi, I'm trying to implement a filter in html5lib python to avoid word widows and orphans by replacing the first and last spaces of, let say, paragraphs with non-breaking spaces. it seems more complicate than I initially though because it should handle cases where the paragraphs have sub elements like `em` or `bold`. Any idea how to implement this?

[03:50:14.0000] <annevk>
In IE11, if you parse file:#x or file:?x, pathname returns U+FFFD

[03:50:24.0000] <annevk>
What is even happening?

[03:59:24.0000] <annevk>
Hmm, in IE11 on Win10 I can't connect to google.com due to some certificate error...

[04:37:31.0000] <annevk>
So the problem was that the time was not accurate inside VirtualBox...

[04:37:39.0000] <annevk>
And the time synchronization feature of Windows was broken

[04:38:24.0000] <annevk>
Which makes me wonder how you'd run time synchronization over HTTPS when you don't know the time yet...

[06:08:48.0000] <SimonSapin>
MikeSmith: I’m getting email from buzilla⊙jwo (A "g" got dropped, making email filters not match anymore. I’ve updated my filter, but maybe this also affects other people.)

[07:33:08.0000] <wanderview>
annevk: is there something that wants to run time synchronization over https?

[07:33:32.0000] <annevk>
wanderview: an OS should

[07:33:44.0000] <annevk>
wanderview: otherwise a network attacker can invalidate HSTS entries

[07:34:37.0000] <wanderview>
annevk: most OS implementations will not slew the clock by huge values from ntp updates

[07:34:47.0000] <wanderview>
if its outside a reasonable range it just ignored the input

[07:34:52.0000] <annevk>
wanderview: after I learned about this attack I think there's basically nothing you want to do without HTTPS

[07:35:07.0000] <annevk>
wanderview: hmm, after I found a server Windows just changed the clock by about a year

[07:35:25.0000] <wanderview>
annevk: thats a windows bug then :-)

[07:35:33.0000] <wanderview>
IMO

[07:35:42.0000] <wanderview>
but some kind of signing on ntp would be cool too

[08:07:14.0000] <annevk>
Hmm, halfway rewriting file URL parsing and my Windows VM refuses to boot

[08:20:15.0000] <annevk>
So now I can't perform the final checks around Windows drive letter until I download a new 5GiB blob and make it run...

[08:20:32.0000] <annevk>
More tomorrow I guess...

[08:32:10.0000] <Domenic>
annevk: I'll run tests for you!

[08:32:17.0000] <Domenic>
Sebmaster: ^ movement on file URLs

[08:32:32.0000] <Domenic>
(in addition to the recent commits)

[08:39:55.0000] <annevk>
Domenic: put a list in https://www.w3.org/Bugs/Public/show_bug.cgi?id=23550#c3

[08:40:47.0000] <annevk>
Domenic: but I think I'll call it a day for now and take a break from file URLs until tomorrow

[08:41:00.0000] <annevk>
Domenic: my head is feeling rather fried

[08:41:33.0000] <Domenic>
annevk: ok, sounds good!

[08:42:45.0000] <Sebmaster>
Yeah i saw on twitter

[09:59:03.0000] <annevk>
TabAtkins: url.bs has some hardcoded references to Encoding through class=anchors

[09:59:14.0000] <annevk>
TabAtkins: some of those "conflict" with DOM Standard terms

[09:59:25.0000] <annevk>
TabAtkins: resulting in warnings

[09:59:32.0000] <annevk>
TabAtkins: how can I avoid the warnings?

[10:00:33.0000] <TabAtkins>
They'll only conflict if they're not distinguishable (same text/type/for)

[10:00:47.0000] <TabAtkins>
Are you doing that on purpose?

[10:01:06.0000] <annevk>
TabAtkins: Encoding is not yet in Bikeshed

[10:01:38.0000] <annevk>
TabAtkins: not sure why DOM does not use type/for

[10:01:48.0000] <annevk>
TabAtkins: I think it does actually

[10:02:04.0000] <TabAtkins>
I'll look at it, shortcut this process. ^_^

[10:02:43.0000] <annevk>
Yeah, DOM uses for=Document

[10:07:25.0000] <TabAtkins>
annevk: Oh, it's not the definitions conflicting (directly), it's your autolinks.  They're just <a>encoding</a>, which doesn't let Bikeshed know which of the multiple local "encoding" dfns it should pick.

[10:07:52.0000] <TabAtkins>
/me is considering moving anchors-block things into an intermediate category between local and remote, to avoid this problem happening accidentally.

[10:08:11.0000] <annevk>
TabAtkins: when I change to <a dfn for>encoding</a> nothing changes

[10:08:37.0000] <TabAtkins>
Yeah, empty for is no information. :/  Try <a for="/">encoding</a>

[10:08:40.0000] <annevk>
TabAtkins: but also, it seems that if you define a class=anchors block you should get the shortcut

[10:08:48.0000] <TabAtkins>
What shortcut?

[10:08:57.0000] <annevk>
TabAtkins: not having to define anything

[10:09:07.0000] <annevk>
class=anchors > external stuff

[10:09:10.0000] <TabAtkins>
Yes.

[10:09:20.0000] <TabAtkins>
Currently I do that by making them equivalent to local dfns.

[10:09:35.0000] <annevk>
TabAtkins: so if I need for=/

[10:09:40.0000] <annevk>
TabAtkins: the warning I get is wrong

[10:09:45.0000] <annevk>
TabAtkins: it says "Arbitrarily chose the one with type 'dfn' and for ''"

[10:09:53.0000] <annevk>
TabAtkins: which suggests <a for> to me

[10:10:03.0000] <TabAtkins>
Ah, indeed.  You're totally right about that. That's on me, I'll fix the warning.

[10:13:25.0000] <TabAtkins>
Hm, actually, I'm only finding one local encoding ref in url.bs - the one from Encoding.  I'll need to look into this more, don't make any changes yet.

[10:14:41.0000] <annevk>
Yeah, using for=/ doesn't help

[10:15:01.0000] <annevk>
If I remove the ones from class=anchors though I do get concept-document-encoding from the DOM Standard

[10:15:11.0000] <annevk>
Weird...

[10:16:14.0000] <TabAtkins>
Yeah, bug on my part - somehow I'm inserting *two* versions of the Encoding ref into the local anchors db.  They're identical, so dunno what's happening, but that's why Bikeshed is complaining about finding multiple of them. ^_^

[10:17:31.0000] <TabAtkins>
UGH I FOUND IT

[10:17:53.0000] <TabAtkins>
"encode" and "encoding" are both returned by the fuzzy matcher for the autolink "encoding".

[10:18:08.0000] <TabAtkins>
Hm, I wonder how to fix this.

[10:25:34.0000] <TabAtkins>
All right, I know how to fix.  No change required on your part.

[15:45:43.0000] <ChALkeR>
Hi all.

[15:45:59.0000] <ChALkeR>
I suppose that there is a mistype in the css3-values spec.

[15:46:04.0000] <ChALkeR>
Regarding the 1px size.

[15:48:54.0000] <ChALkeR>
http://www.w3.org/TR/css3-values/#absolute-lengths

[15:49:05.0000] <ChALkeR>
> The image below illustrates the effect of viewing distance on the size of a reference pixel: a reading distance of 71 cm (28 inches) results in a reference pixel of 0.26 mm, while a reading distance of 3.5 m (12 feet) results in a reference pixel of 1.3 mm.

[15:49:15.0000] <ChALkeR>
That does not match with the numbers in the image.

[15:49:40.0000] <ChALkeR>
http://www.w3.org/TR/css3-values/pixel1.png

[15:50:00.0000] <TabAtkins>
All of them match except it has 138 inch rather than 144

[15:50:06.0000] <TabAtkins>
Which is 11.5 feet, close.

[15:50:31.0000] <TabAtkins>
(And is the actual closest inch measurement to 3.5m)

[15:50:56.0000] <ChALkeR>
0.28mm and 0.26mm

[15:50:59.0000] <TabAtkins>
Ah, maybe the old /TR version is different but with newer text.

[15:51:02.0000] <ChALkeR>
1.4mm and 1.3mm

[15:51:09.0000] <TabAtkins>
Don't ever read /TR anyway. https://drafts.csswg.org/css-values/#absolute-lengths

[15:51:49.0000] <ChALkeR>
Ah, that one has a fixed image, thanks =)

[15:51:52.0000] <TabAtkins>
np

[15:53:27.0000] <ChALkeR>
Looks like TR has an old image, compare http://www.w3.org/TR/css3-values/pixel1.png and https://drafts.csswg.org/css-values/pixel1.png

[15:53:43.0000] <TabAtkins>
Yeah, the TR one wasn't updated in time I guess.

[15:53:48.0000] <TabAtkins>
It'll be fixed next time we publish.

[15:53:57.0000] <ChALkeR>
Ok, thanks =)/

[15:54:33.0000] <ChALkeR>
(«/» is there by an accident)

[16:25:42.0000] <Domenic>
ChALkeR: TR stands for trash, never read anything with that in the URL

[16:33:34.0000] <ChALkeR>
lol :-)

[16:36:01.0000] <boogyman>
Domenic: may I suggestion to add a "dont index" header to things rendering on those domains. Google search: "css spec" gives the CSS 2.1 (TR) link as the first result

[16:36:28.0000] <Domenic>
boogyman: believe me, if I controlled those domains I would.

[16:37:09.0000] <boogyman>
at least it's w3.org and not the schools variant

[16:44:34.0000] <ChALkeR>
boogyman: Only in the case if you don't omit the «spec» part…


2015-08-14
[23:22:16.0000] <annevk>
URL Standard's Twitter hook failed due to an authentication failure...

[23:22:27.0000] <annevk>
miketaylr: didn't you have something similar with Compat?

[23:31:40.0000] <cvrebert>
FYI: w3bug.com is now a thing, just like crbug.com etc; e.g. http://w3bug.com/28673

[23:33:00.0000] <annevk>
Now it works again...

[23:34:31.0000] <annevk>
cvrebert: interesting default redirect :-)

[23:34:42.0000] <annevk>
cvrebert: note that we're mostly migrating everything to GitHub at this point

[23:35:14.0000] <cvrebert>
annevk: HTML itself seeming to be the exception :-)

[23:35:27.0000] <annevk>
cvrebert: patience :-)

[23:36:34.0000] <cvrebert>
/me adds a calendar event for one eon from now

[02:41:59.0000] <annevk>
TabAtkins: if I have for=URL for the model, what would make sense to describe syntax?

[02:42:07.0000] <annevk>
TabAtkins: for=url-syntax or some such?

[04:02:04.0000] <annevk>
philipj: any chance getting updates on https://github.com/whatwg/xhr/issues/19 at some point?

[04:02:59.0000] <philipj>
annevk: that would be nice, yeah

[04:03:01.0000] <philipj>
I'll ping some more

[04:47:17.0000] <annevk>
Bit annoying to see Blink deprecate getUserMedia() outside of secure contexts now, while earlier opposing this in the standards venue.

[04:48:25.0000] <annevk>
https://lists.w3.org/Archives/Public/public-media-capture/2014Oct/thread.html#msg79

[05:39:52.0000] <Ms2ger>
annevk, r? https://github.com/w3c/web-platform-tests/pull/2078

[05:41:05.0000] <annevk>
Ms2ger: r+

[05:41:15.0000] <Ms2ger>
Ta

[06:12:41.0000] <annevk>
SimonSapin: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26398

[06:12:49.0000] <annevk>
SimonSapin: note also that HTML currently contains the exact same algorithm

[06:12:58.0000] <annevk>
SimonSapin: that bit hasn't merged yet

[06:18:59.0000] <annevk>
JakeA: https://twitter.com/jaffathecake/status/632178499915284480 heh. This applies to writing standards too.

[06:19:58.0000] <annevk>
JakeA: fortunately the couple dozen folks that read a standard will then use that knowledge to change browsers and the web. So there's some ROI.

[06:23:01.0000] <JakeA>
Yeah, with standards the benefit is huge even if very few read. I guess in some way it's pretty cool how far developers can get with the web with only a vague understanding of the spec beneath

[06:35:37.0000] <TabAtkins>
annevk: Don't use hyphens unless absolutely necessary

[06:39:33.0000] <jgraham>
Whereas em dashes should — it goes without saying — be used with reckless abandon.

[06:49:55.0000] <SimonSapin>
annevk: I haven’t done the testing I said I’d do… a year ago :/

[07:00:49.0000] <annevk>
TabAtkins: or maybe syntax can be a different type?

[07:02:10.0000] <Ms2ger>
Surely em-dashes�unlike en-dashes�should not have spaces around them

[07:02:28.0000] <TabAtkins>
"grammar" is a type, but I don't know what you're using it for

[07:03:56.0000] <jgraham>
Ms2ger: If you want them to look like crap because it says in a book somewhere it's "right" then sure

[07:06:21.0000] <annevk>
TabAtkins: I want to rewrite https://url.spec.whatwg.org/#url-writing and make it use <dfn>s that are not equivalent to <dfn for=URL>

[07:06:33.0000] <annevk>
TabAtkins: but I'll probably reuse some terms

[07:06:43.0000] <annevk>
TabAtkins: it's basically syntax productions

[07:49:16.0000] <annevk>
SimonSapin: I figured. I fixed a couple of your issues though, most over a year old... Quick test here with application/x-www-form-urlencoded shows that most code points are escaped by Firefox, so I'll leave that as-is for now at least until HTML references this algorithm rather than a duplicate.

[07:50:13.0000] <SimonSapin>
ok

[08:21:06.0000] <caitp>
you guys were really patient with whatwg/xhr#24, nice

[08:26:46.0000] <annevk>
caitp: I'm trying to improve, but I notice I'm still very brief at times

[08:27:32.0000] <annevk>
caitp: changing habits is hard, fortunately there's tyoshino who does the right thing by default :-)

[08:47:19.0000] <miketaylr>
annevk: yeah, but i think it only error'd for the first commit/tweet

[08:48:34.0000] <annevk>
miketaylr: sortof similar here

[09:17:45.0000] <micahf>
hey there! i'm interested in making a "yaml-like" ontology format for myself

[09:18:02.0000] <micahf>
(for my blog)

[09:18:27.0000] <micahf>
so the idea is, i will write my blog in plain html (or whatever plain text format i choose)

[09:19:27.0000] <micahf>
then i will make metadata description files that are basically just yaml with little bits of xpath or regular expressions

[09:20:29.0000] <micahf>
so say I use an unordered list for "tags".  "tags" would be a property of a blog post

[09:22:57.0000] <micahf>
then in the yaml there would be a property "tag", with an xpath string that points to the list item values

[09:24:15.0000] <annevk>
what's holding you back?

[09:26:30.0000] <micahf>
annevk, well, i've heard and read about web ontology formats, but i'm not so familiar with the goals and challenges faced when standards like OWL/RDF were created

[09:26:49.0000] <micahf>
annevk, part of me wants to get a better understanding, but maybe that would taint my raw, innocent creative spirit

[09:27:02.0000] <annevk>
micahf: I see, this might be wrong place

[09:27:32.0000] <micahf>
annevk, how's that?

[09:28:53.0000] <annevk>
micahf: there's not much semantic web discussion here, I think #swig might be a place where you can go

[09:29:22.0000] <micahf>
annevk, thanks!


2015-08-15
[22:43:33.0000] <annevk>
Hmm TabAtkins still awake?

[22:43:49.0000] <annevk>
TabAtkins: would still like type=grammar vs for= advice

[00:37:54.0000] <annevk>
/me finds https://github.com/tabatkins/bikeshed/blob/master/docs/definitions-autolinks.md

[02:56:25.0000] <nox>
Given when URLUtils' set the input's algorithm is invoked, cannot HTMLAnchorElement's accessors be out of sync when the element's base URL changes?

[03:25:18.0000] <annevk>
nox: that's why we now have "reset the input"

[03:26:02.0000] <annevk>
nox: note that element's don't have a base URL anymore, only documents

[03:26:16.0000] <annevk>
nox: HTML doesn't reflect that yet

[03:27:48.0000] <nox>
annevk: Ok.

[03:28:30.0000] <annevk>
nox: also, if you're implementing this, I noticed the Location object is quite butchered with the current set of specifications :-/

[03:29:22.0000] <nox>
annevk: Yeah.

[03:29:42.0000] <nox>
annevk: URLUtils implementors in general have few in common.

[03:29:58.0000] <annevk>
Which is my fault...

[03:30:29.0000] <annevk>
That is less of my fault, and I'm hoping that we can get browsers to slowly align for most bits.

[06:02:27.0000] <nox>
annevk: So HTMLAnchorElement accessors should always be up-to-date with regard to the Document base URL, right?

[07:45:55.0000] <annevk>
nox: yes, HTMLAreaElement getters too

[07:46:02.0000] <nox>
annevk: Ok.

[07:46:20.0000] <nox>
annevk: I wanted to cache the parsed URL but that sounds like the wrong thing to do then.

[07:46:33.0000] <annevk>
I guess I should make the setters reset the input too...

[07:46:52.0000] <annevk>
Yeah, perhaps the current setup needs to be restructured in light of this...

[07:47:10.0000] <annevk>
nox: file a bug on perhaps removing URLUtils' url concept?

[07:47:16.0000] <annevk>
s/bug/issue/

[07:47:28.0000] <nox>
annevk: To me it looks like URLUtils try to abstract over different things that behave too differently to be abstracted in such a way.

[07:48:02.0000] <nox>
URL never has an input, Location never uses its input and never store anything anyway because it says goodbye the moment you change the URL, etc.

[07:48:28.0000] <annevk>
nox: Location might actually store the url

[07:48:51.0000] <nox>
annevk: Doesn't it load the new one immediately?

[07:48:57.0000] <annevk>
nox: but you might be correct that we need a different approach

[07:49:08.0000] <annevk>
nox: only for the setters, the getters keep returning the old values

[07:49:18.0000] <nox>
annevk: To me, it looks like the whole abstraction is just to support URLUtilsSearchParams.

[07:49:41.0000] <annevk>
nox: the abstraction is there to define the properties in a single place

[09:32:03.0000] <annevk>
nox: you might still want to cache URLs btw if they're frequently accessed and the base URL doesn't change much, and have some global base URL dirty counter that the getters check

[10:01:12.0000] <annevk>
MikeSmith: https://url.spec.whatwg.org/#syntax-url it now has absolute URL with fragment

[10:01:29.0000] <annevk>
MikeSmith: if you wanted to refer to such a thing

[10:01:59.0000] <annevk>
MikeSmith: remaining syntax enhancements are outlined here: https://github.com/whatwg/url/issues/33#issuecomment-131400647

[10:02:17.0000] <annevk>
MikeSmith: if you needed something else would be nice to hear about that soonish

[10:02:38.0000] <annevk>
MikeSmith: trying to resolve most open URL bugs while not much else is going on

[12:07:51.0000] <jojo->
hello

[16:12:07.0000] <TabAtkins>
annevk: Sorry, attending a funeral this weekend


2015-08-16
[17:30:33.0000] <MikeSmith>
annevk: thanks, taking a look right now

[17:33:56.0000] <frewsxcv>
does anyone know why the webidl spec doesn't mention the [[OwnPropertyKeys]] binding in this section? https://heycam.github.io/webidl/#ecmascript-binding

[17:58:19.0000] <MikeSmith>
annevk: fwiw (and unrelated to what you pinged me about) I like "syntax violation" but I think optimally we should maybe align the language for this "parse error" stuff across all specs, including the HTML spec, but in the HTML spec, since the tree-construction algorithm also contains "parse error" cases, "syntax violation" may not work for those cases

[22:12:51.0000] <annevk>
MikeSmith: isn't anything in the tree builder ultimately a syntax violation?

[22:13:05.0000] <annevk>
MikeSmith: nothing there is about semantics as far as I know

[22:14:44.0000] <annevk>
frewsxcv: maybe it's never modified?

[22:16:15.0000] <MikeSmith>
annevk: yeah especially after looking through a few of the cases in the tree-builder part, I think "syntax violation" would work for those too

[22:16:36.0000] <frewsxcv>
annevk: what is 'it' referring to?

[22:16:52.0000] <MikeSmith>
annevk: I had in my mind that some of them were more like lexical violations but I guess that's splitting hairs anyway

[22:16:54.0000] <annevk>
frewsxcv: [[OwnPropertyKeys]]

[22:17:22.0000] <frewsxcv>
It should get used for 'supported property names', right?

[22:19:35.0000] <annevk>
frewsxcv: are those not stored directly on the object?

[22:19:49.0000] <annevk>
frewsxcv: so that [[OwnPropertyKeys]] does the right thing?

[22:21:37.0000] <frewsxcv>
annevk: 'those'?

[22:21:46.0000] <annevk>
frewsxcv: https://heycam.github.io/webidl/#dfn-named-property-visibility

[22:26:14.0000] <frewsxcv>
The implementation for Object.getOwnPropertyNames has different implementation rules for different html collections based on the 'supported property names'.

[22:26:50.0000] <frewsxcv>
/me is struggling to stay awake....he's going to go to sleep

[06:53:55.0000] <Domenic>
Web IDL was largely written in ES5 era. I am not sure [[OwnPropertyKeys]] existed then.

[08:31:16.0000] <jojo->
anyone here of the ppl who authored the appcache part of the html5 spec?

[08:36:24.0000] <annevk>
jojo-: that'd be Hixie, but he's not around much

[08:36:51.0000] <jojo->
annevk: yeah, i figured. i sent an email to him a few days back but haven't gotten a reply yet. guess he's really busy

[08:37:11.0000] <annevk>
jojo-: the plan is to remove the appcache section and remove support from browsers

[08:37:25.0000] <jojo->
lol, what? really?

[08:37:27.0000] <jojo->
and why?

[08:37:30.0000] <annevk>
jojo-: if you want something changed in the HTML Standard best is probably to file a bug or email whatwg⊙wo

[08:37:34.0000] <jojo->
and what's gonna replace that functionality

[08:37:38.0000] <annevk>
jojo-: service workers

[08:37:59.0000] <jojo->
hmkay, haven't really looked into it yet to be honest

[08:38:21.0000] <jojo->
annevk: where would one get that kind of information? is that something discussed on the public whatwg mailing list?

[08:38:45.0000] <annevk>
jojo-: yeah and public-webapps⊙wo to some extent

[08:39:16.0000] <annevk>
jojo-: you can also learn a fair bit by following developer advocates on Twitter, not sure there's really one canonical source

[08:39:22.0000] <jojo->
so will this be dropped like a hot iron or "phased out / deprecated" with support still lingering in browsers?

[08:39:35.0000] <annevk>
jojo-: ideally we would've updated the HTML Standard a while ago with this information

[08:39:45.0000] <annevk>
jojo-: if browsers don't drop support we won't drop it from the spec

[08:39:51.0000] <annevk>
jojo-: but browsers have plans to remove support

[08:40:17.0000] <jojo->
ok, gotta do some more googling then i suppose

[08:40:31.0000] <jojo->
guess i'll stay in this channel for the foreseeable future though ;)

[08:41:53.0000] <annevk>
jojo-: you should be able to get information on various specs here, especially those pertaining to browsers

[08:42:13.0000] <jojo->
cool

[08:42:23.0000] <jojo->
are you writing the specs as well?

[08:43:13.0000] <annevk>
yup

[08:43:41.0000] <annevk>
https://wiki.whatwg.org/wiki/User:Annevk keeps track somewhat

[08:46:12.0000] <jojo->
thanks. i saw that wiki before but didn't browse the userpages

[10:20:12.0000] <Domenic>
Hmm I did not know that Fetch was formerly CORS.

[10:57:22.0000] <jojo->
is there some good guide on how browser caching is implemented in different browser and when the cache is cleared?

[12:47:18.0000] <jojo->
so, may be an old hat for you guys, but nevertheless: https://heipei.github.io/2015/08/20/Persistent-AppCache-Injections/

[13:17:38.0000] <Domenic>
botie: tell Ms2ger please review https://github.com/w3c/web-platform-tests/pull/2085 to make sure I am not insane

[13:17:38.0000] <botie>
will do

[14:26:36.0000] <botie>
Ms2ger, at 2015-08-16 20:17 UTC, Domenic said: please review https://github.com/w3c/web-platform-tests/pull/2085 to make sure I am not insane

[14:27:22.0000] <Ms2ger>
Domenic, seems possible, will look in the morning

[15:09:29.0000] <Domenic>
Trying to get the web platform tests to pass has led to a bunch of discoveries

[16:34:27.0000] <Sebmaster>
annevk: i somehow can't parse the sentence/conditions at https://url.spec.whatwg.org/#file-state > otherwise > 1; what's the intent there?


2015-08-17
[18:00:32.0000] <MikeSmith>
Domenic: about not getting how to stop the critic-bot e-mail for a wpt PR, did you try the "Exclude me, please!" button at https://critic.hoppipolla.co.uk/r/5726

[18:00:46.0000] <MikeSmith>
maybe that won't work if you're the owner

[18:02:00.0000] <MikeSmith>
if not, maybe you can try the "Edit owners" button and remove yourself

[18:02:47.0000] <MikeSmith>
if none of that works, you can rebase and force-push the branch, or do something else that rewrites history for the branch, and force-push it

[18:03:10.0000] <MikeSmith>
because critic will choke and that and stop tracking the branch

[18:04:42.0000] <MikeSmith>
short of those I don't know any other way to disassociate yourself from a critic review, or to disassociate the critic review from a PR

[18:04:49.0000] <MikeSmith>
but jgraham may know

[21:13:02.0000] <cvrebert>
botie: any news?

[21:13:02.0000] <botie>
cvrebert: no idea

[22:40:31.0000] <annevk>
Sebmaster: I guess I should use some bullet points

[22:42:20.0000] <annevk>
Sebmaster: what it wants to do is prevent copying host and base's path if input starts with a Windows drive letter followed by nothing or some delimiter

[00:30:13.0000] <annevk>
philipj: https://github.com/whatwg/fullscreen/issues/17

[00:31:08.0000] <annevk>
Domenic: if we did URL comparison with options, URL.is(1, 2, options)?

[00:31:28.0000] <annevk>
Domenic: and if we did host comparison with options, URL.hostIs(1, 2, options)?

[00:31:42.0000] <annevk>
Domenic: or is Object.is really the worst?

[02:35:47.0000] <annevk>
https://code.google.com/p/chromium/issues/detail?id=517819 at the top says "Google Code will be turning read-only on August 25th. See this post for more information."

[02:35:55.0000] <annevk>
Is chromium special cased?

[02:36:17.0000] <annevk>
Ah, it is

[02:37:07.0000] <annevk>
Although that only lists chromium and android, not e.g., v8

[02:38:42.0000] <annevk>
/me finds the need for "non-Windows path-absolute file URL"

[03:17:43.0000] <MikeSmith>
if I want to compare instances of two objects without concern about their prototypes, JSON.stringify is an OK way to to that, right?

[03:26:11.0000] <espadrine>
not if they have reference cycles in them, or anything that doesn't serialize well

[03:29:32.0000] <Ms2ger>
Or anything with things on the prototype

[03:36:30.0000] <MikeSmith>
Ms2ger: to be clear, the context is the wpt PR I raised from replacing a few of the simple cases of assert_object_equals, and for those I think they could better have been written from the beginning just using a JSON.stringify comparison (or for one case, just using assert_equals, because it was just comparing to null anyway)

[03:38:13.0000] <MikeSmith>
I think all the cases we have/had in the suite that I've looked at so far didn't need to begin with to be using a strict comparison like assert_object_equals attempted to be

[03:40:49.0000] <MikeSmith>
espadrine: I don't know what it means for an object to have to reference cycles in it

[03:41:01.0000] <MikeSmith>
unless that means somethign other than in the GC sense

[03:41:16.0000] <MikeSmith>
well, then I still don't know what that would mean

[03:42:14.0000] <MikeSmith>
I thought JSON.stringify just serializes what the object exposes to you programmatically

[03:44:22.0000] <espadrine>
a = {b: {a: null}}; a.b.a = a; JSON.stringify(a)

[03:44:24.0000] <espadrine>
Exception: TypeError: cyclic object value

[03:44:53.0000] <MikeSmith>
ah

[03:45:44.0000] <MikeSmith>
yeah we're not doing anything like that

[03:46:01.0000] <MikeSmith>
in the test cases I'm looking at, I mean

[03:46:18.0000] <MikeSmith>
they're not tests for pathological cases

[03:47:15.0000] <MikeSmith>
they're just normal things where the test case is constructing some set of data and then comparing it to an object that representswhat the expected data is supposed to be

[03:53:53.0000] <annevk>
MikeSmith: what's the purpose of assert_object_equals?

[03:57:10.0000] <annevk>
I think my main gripe with Bikeshed at the moment is that the output is so much uglier than ReSpec, making it much harder to review generated HTML

[04:00:48.0000] <MikeSmith>
annevk: I think it was intended to be a way provide a strict comparison of two objects, for tests that needed to do that for some reason

[04:01:10.0000] <MikeSmith>
annevk: but it doesn't actually do that, which is why it's being removed

[04:01:38.0000] <MikeSmith>
also, it turns out that there aren't really any tests that need to do a strict object comparison

[04:01:50.0000] <MikeSmith>
at least not that I've seen so far

[04:02:38.0000] <MikeSmith>
so instead the method ended up getting used to do comparisons that it wasn't really needed for, and that some other comparison could be used for instead

[04:08:49.0000] <MikeSmith>
annevk: what's uglier about Bikeshed output? Lack of indenting or line breaks or what?

[04:09:03.0000] <MikeSmith>
(assuming you mean the formatting of the HTML source)

[04:09:54.0000] <MikeSmith>
if it's just stuff like that, that seems easy enough to add some step to Bikeshed to prettify it

[04:21:40.0000] <gsnedders>
MikeSmith: JSON.stringify doesn't guarantee serialisation order is constant, AFAIK

[04:22:44.0000] <MikeSmith>
gsnedders: yeah foolip noted that also

[04:49:38.0000] <annevk>
MikeSmith: isn't assert_equals that already?

[04:49:58.0000] <MikeSmith>
annevk: no

[04:50:28.0000] <annevk>
MikeSmith: Bikeshed does its own serialization, but it doesn't really remove whitespace from the input where it can, so the output is just ugly

[04:50:35.0000] <annevk>
MikeSmith: at least for stuff I write...

[04:54:08.0000] <MikeSmith>
does Bikeshed also use its own parser?

[04:55:53.0000] <annevk>
MikeSmith: html5lib, iirc

[04:56:37.0000] <MikeSmith>
then I wonder why it doesn't just use the html5lib serializer

[04:58:17.0000] <TabAtkins>
MikeSmith: Because it didn't serialize <wbr> correctly, iirc

[05:00:05.0000] <TabAtkins>
I feel like there was another reason too

[05:00:52.0000] <annevk>
It's more than that though, Bikeshed seems to actively change indentation and such too

[05:01:27.0000] <annevk>
Perhaps in part due to it supporting Markdown like stuff mixed with HTML?

[05:03:12.0000] <TabAtkins>
Yeah, and it dues a terrible job with it too. Need to weigh in that more.

[05:03:46.0000] <TabAtkins>
*work on

[05:06:36.0000] <annevk>
TabAtkins: btw, is it possible to change the order of the sections?

[05:07:00.0000] <annevk>
TabAtkins: for WHATWG stuff it really makes sense to have Acknowledgments last

[05:10:38.0000] <TabAtkins>
Ugh, it would be annoying to make the boilerplate generate not-at-the-end.

[06:02:04.0000] <krijnhoetmerbot>
Domenic, Ms2ger: yeah, sorry about that (logs over http, not https)

[06:04:28.0000] <annevk>
TabAtkins: is there any way to link from syntax diagrams?

[06:04:51.0000] <annevk>
TabAtkins: I guess it's not strictly needed in my case, but since SVG supports links it seems nicer

[06:12:54.0000] <gsnedders>
TabAtkins: we don't serialise <wbr> correctly? why haven't we fixed that?

[06:21:37.0000] <annevk>
TabAtkins: you around?

[06:21:51.0000] <annevk>
TabAtkins: I'm playing with railroad diagrams and they look cool

[06:22:03.0000] <annevk>
TabAtkins: but it seems they need a lot of prose around them before they start making sense

[06:22:33.0000] <annevk>
TabAtkins: I was kind of hoping to just use them to illustrate the grammar, but it seems I can't even name the diagram without resorting to some outside markup

[06:22:42.0000] <annevk>
TabAtkins: and then I can't link pieces together...

[06:30:11.0000] <annevk>
TabAtkins: summary here: https://github.com/whatwg/url/issues/67

[07:11:34.0000] <TabAtkins>
annevk: Sorry, still in the middle of traveling.

[07:12:09.0000] <annevk>
TabAtkins: no worries, let me know whenever you're back, none of this is in a great hurry

[07:12:10.0000] <TabAtkins>
There are ways to link, but they aren't documented right now.

[07:12:38.0000] <annevk>
TabAtkins: Chris Lord's Navigation Transition stuff is higher priority than any of my Bikeshed stuff :-)

[07:15:44.0000] <TabAtkins>
Kk 😀

[07:19:52.0000] <gsnedders>
TabAtkins: I can't see any bug report or anything about <wbr> :(

[07:23:40.0000] <TabAtkins>
I reported it to you in person iirc

[07:23:55.0000] <gsnedders>
TabAtkins: bah!

[07:23:57.0000] <TabAtkins>
You serialize an end tag for it

[07:33:14.0000] <annevk>
if that was all the reason you needed to write your own serializer...

[07:34:18.0000] <annevk>
it seems someone should just patch https://github.com/html5lib/html5lib-python/blob/master/html5lib/constants.py#L487 and that'd be fixed

[07:36:22.0000] <TabAtkins>
Just looked it up, the reason i did it originally was to get newlines in my generated code.

[07:36:40.0000] <TabAtkins>
https://github.com/tabatkins/bikeshed/commit/a4a4c5bded724c604234f8333f5d6d0e7851d9ce

[07:37:36.0000] <annevk>
gsnedders: https://github.com/html5lib/html5lib-python/issues/203

[07:38:00.0000] <annevk>
(is the issue for void elements not being up-to-date, even has <event-source> :-))

[07:41:49.0000] <gsnedders>
annevk: takk

[07:42:06.0000] <gsnedders>
annevk: I think we've normally been better with /adding/ elements than removing them

[07:42:49.0000] <annevk>
looks like it, I doubt there's many people that remember <event-source>

[07:48:31.0000] <Domenic>
annevk: URL.is and hostIs seems OK... Not obviously correct or obviously wrong. Maybe public-script-coord it?

[07:50:15.0000] <gsnedders>
TabAtkins: where do  yoiu want new lines?

[07:59:51.0000] <annevk>
Domenic: done

[08:00:28.0000] <annevk>
Domenic: nobody else seems to really use that list :-/

[08:01:11.0000] <Domenic>
annevk: that's why I love it :p

[08:01:51.0000] <annevk>
Domenic: I'll remind you next time you see Chrome shipping a shitty API

[08:05:17.0000] <TabAtkins>
annevk: .is() is commonly used as an identity check

[08:05:58.0000] <TabAtkins>
gsnedders: Everywhere, just formatting HTML like you would by hand, with newlines and indents.

[08:07:26.0000] <annevk>
TabAtkins: but that breaks so badly if the input was already formatted well

[08:07:41.0000] <annevk>
TabAtkins: you should just have added newlines to the auto-generated HTML/tree stuff

[08:07:58.0000] <TabAtkins>
annevk: Yeah, I can fix it, I just haven't yet

[08:08:30.0000] <TabAtkins>
And omg no, I am absolutely not shitting newlines and indents all over my code.

[08:09:16.0000] <TabAtkins>
I'm building stuff with DOM methods, manually handling code formatting would be the worst thing ever

[08:10:42.0000] <annevk>
just append some newlines here and there

[08:10:55.0000] <annevk>
the way you do it now, if the input contains newlines, you get a mess

[08:12:47.0000] <annevk>
I mean, it's exactly as you say, you're shitting newlines and indents all over my code

[08:12:52.0000] <annevk>
(And closing tags.)

[08:13:17.0000] <annevk>
And the closing tags come after the newlines, it's all kinds of terrible the current setup is.

[08:34:39.0000] <wanderview>
JakeA: thanks for writing the bug

[08:36:06.0000] <wanderview>
/me notices ms2ger is in firefox's dictionary...

[08:37:18.0000] <JakeA>
no worries! Odd to see both the latest version of Firefox and Safari regress, I wonder if it's just coincidence.

[08:43:39.0000] <wanderview>
JakeA: did you try running your tests in workers as well?  I bet its even more messed up

[08:44:05.0000] <JakeA>
wanderview: hah, I didn't. I guess I didn't expect them to be different

[08:45:25.0000] <wanderview>
JakeA: I believe they have different implementations, at least in gecko...

[08:45:54.0000] <wanderview>
for example, we have a thing to free the worker thread while we perform work on the main thread

[08:45:58.0000] <wanderview>
/me throws up a little

[08:46:45.0000] <jgraham>
/me wonders which tests these are

[08:47:20.0000] <wanderview>
jgraham: https://twitter.com/wanderview/status/633288790082240512

[08:50:04.0000] <Ms2ger>
JakeA, yeah, jgraham and I can help

[08:50:27.0000] <Ms2ger>
There's also http://testthewebforward.org/docs/

[08:50:41.0000] <JakeA>
Will give those a read, cheers!

[08:52:31.0000] <Ms2ger>
JakeA, if there's anything that's unclear there, write it down :)

[08:53:13.0000] <jgraham>
Yeah, this is *super* good stuff to submit tests on. Not least because there's an interop fail, but also because as you note it's a subtle hazard that will cause sites to fail for obscure reasons

[08:54:00.0000] <Ms2ger>
(jsbell used to be at MS?)

[08:57:54.0000] <jgraham>
Speaking of Microsoft

[08:58:04.0000] <jgraham>
I'm 2 hours in to running web-platform-tests in Edge

[08:58:29.0000] <jgraham>
Reached html/obsolete so far

[09:02:00.0000] <jgraham>
Oh now I reached the tests that make a sound

[09:02:10.0000] <jgraham>
Either that or a bird got in when I wasn't looking

[09:02:36.0000] <darobin>
the sound tests should use more cowbell

[09:04:01.0000] <jgraham>
/me sends darobin to the naughty step

[09:04:19.0000] <darobin>
the naughty step?

[09:04:26.0000] <darobin>
that's not a punishment I'm familiar with

[09:11:58.0000] <Domenic>
annevk: I am pretty sure https://www.w3.org/Bugs/Public/show_bug.cgi?id=25981 is all about integration with ES initialization, not with the ES job queue. Is there another bug about microtasks vs. jobs?

[09:13:40.0000] <annevk>
Domenic: that bug mentions jobs a whole lot though. Seems like it might be all intertwined?

[09:13:56.0000] <Domenic>
annevk: no, it's basically saying "work around the job queue stuff while initializing."

[09:35:17.0000] <JakeA>
Is there a way that two user-opened tabs can start synchronously communicating? Trying to work out why they must share an event loop

[09:35:57.0000] <wanderview>
JakeA: localstorage?

[09:36:25.0000] <JakeA>
wanderview: aha! Thanks

[09:36:27.0000] <wanderview>
JakeA: but someone at mozilla has patches to give windows their own event loop... not sure why its never landed

[09:36:48.0000] <JakeA>
It might be localstorage as you say

[09:39:17.0000] <wanderview>
JakeA: I guess chrome gets separate event loops due to each tab having its own process?

[09:41:03.0000] <JakeA>
wanderview: I wonder if it's process-per-site rather than process-per-tab. This sounds like something I really should know

[09:42:05.0000] <jgraham>
I imagine it's process per unit of related-origin browsing context, or whatever the spec term is

[09:42:22.0000] <JakeA>
wanderview: Chromium has this tool (can't remember its name) that lets you bisect stuff, it launches Chromium with a particular url, then on close it asks if something worked/failed, then loads the next version until it finds the commit. Does Gecko have anything like this?

[09:43:05.0000] <jgraham>
mozregression

[09:43:06.0000] <wanderview>
JakeA: we have an auto-bisect tool... I haven't used it directly... I can try to find the wiki

[09:43:12.0000] <wanderview>
what jgraham said

[09:43:38.0000] <JakeA>
ohh ta

[09:44:28.0000] <jgraham>
also window.open() can give you multiple top-level browsing contexts that can communicate

[09:45:29.0000] <wanderview>
jgraham: yea, but can they communicate synchronously

[09:45:33.0000] <wanderview>
postMessage is async

[09:47:46.0000] <JakeA>
jgraham: how do I convert a Firefox version into a date for mozregression, is it the release date?

[09:49:04.0000] <wanderview>
JakeA: its every 6 weeks in general, but the exact date/time can vary by a day or so

[09:49:24.0000] <wanderview>
/me tries to find out

[09:49:30.0000] <jgraham>
JakeA: Look in "about firefox" under help

[09:50:02.0000] <jgraham>
(the (?) icon in the dropdown menu)

[09:50:25.0000] <wanderview>
JakeA: search for strings like FIREFOX_39 here: http://hg.mozilla.org/releases/mozilla-release/

[09:51:04.0000] <JakeA>
jgraham: that only has the version number on OSX anyway. Looks like wanderview's solution works

[09:51:09.0000] <JakeA>
Ta!

[09:51:15.0000] <wanderview>
FIREFOX_39_0 for first release, for example... or FIREFOX_39_0_3 for 39.0.3 chemspill release

[09:51:17.0000] <jgraham>
Oh, right I guess it wouldn't tell you when it branched

[09:52:00.0000] <jgraham>
JakeA: Oh, use --good-release and --bad-release

[09:52:06.0000] <jgraham>
http://mozilla.github.io/mozregression/documentation/usage.html

[09:53:19.0000] <JakeA>
perfect, thanks!

[09:53:35.0000] <annevk>
Domenic: it seems a bunch of it is about the event loop too

[09:53:57.0000] <Domenic>
annevk: it is about initializing the event loop. I am 95% certain on this.

[09:54:07.0000] <Domenic>
annevk: notice how e.g. it doesn't mention microtasks at all.

[09:54:19.0000] <annevk>
Domenic: I noticed that, that's certainly curious

[09:54:36.0000] <annevk>
Domenic: I guess you need this first, and then build microtasks on top

[09:54:37.0000] <Domenic>
there is a separate set of work that needs to be done to integrate microtasks and jobs

[09:54:40.0000] <Domenic>
maybe

[09:54:44.0000] <Domenic>
i think they might be independent

[09:54:58.0000] <annevk>
Domenic: but it would sure be easier if ECMAScript just let the host language define some callbacks

[09:55:04.0000] <Domenic>
this bug is more about working around allen's crazy model of ES environment initialization

[09:55:10.0000] <Domenic>
I don't think that's true for microtasks + jobs

[09:55:14.0000] <Domenic>
I think that is true for initialization

[09:55:20.0000] <Domenic>
We'll see

[09:55:26.0000] <Domenic>
I'll try writing a patch soon

[10:05:53.0000] <annevk>
Ugh https://github.com/github/github-services/issues/964

[10:12:17.0000] <annevk>
Domenic: I think https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-5 in particular is why it's complicated

[10:12:39.0000] <annevk>
Domenic: in ECMAScript everything is a job, including running script

[10:12:47.0000] <Domenic>
Yes

[10:15:17.0000] <caitp>
do you think it would ever be possible to make it less complicated

[10:17:42.0000] <annevk>
caitp: I think if ECMAScript delegated more to the host it could be pretty straightforward

[10:18:06.0000] <annevk>
caitp: it's the host having to intertwine itself into ECMAScript and modify its core algorithms that makes this rather messy and involved

[15:17:42.0000] <jgraham>
Well eventually it took 8 hours to run the web-platform-tests in IE

[15:17:47.0000] <jgraham>
Erm, Edge

[15:18:10.0000] <jgraham>
Mainly because the harness kept killing and restarting the browser, to be fair

[15:21:56.0000] <Domenic>
How's it doing

[15:23:50.0000] <jgraham>
Well, I don't know, I need some better way to compare multiple log files

[16:19:55.0000] <gsnedders>
jgraham: through wptrunner, I presume?

[16:20:59.0000] <jgraham>
Yeah


2015-08-18
[17:06:07.0000] <MikeSmith>
it's actually great just to hear that you have wptrunner working at all already with Edge

[01:44:02.0000] <annevk>
Seems like a bit of a bug that HTML's syntax section doesn't describe <template> as as special kind of element

[01:48:27.0000] <gsnedders>
annevk: which subsection? the writing HTML? or…?

[01:48:36.0000] <gsnedders>
annevk: because it's in the list of special elements

[01:48:56.0000] <annevk>
gsnedders: yeah, writing talks about five different kinds of elements

[01:49:08.0000] <annevk>
gsnedders: <template> ends up classified as Normal

[01:50:07.0000] <annevk>
But maybe syntax-wise it is indeed normal, just seems a bit odd

[02:38:58.0000] <nox>
annevk: I think I saw somewhere template qualified as special.

[02:39:13.0000] <nox>
annevk: Weird that you would mention this, I just started implementing it in html5ever. :)

[02:39:31.0000] <annevk>
nox: for the parser it's special

[02:39:35.0000] <annevk>
nox: for syntax it's not

[02:39:50.0000] <annevk>
which was the weird part for me :-)

[02:39:57.0000] <nox>
Where is the syntax part?

[02:40:06.0000] <nox>
That's not it? https://html.spec.whatwg.org/multipage/syntax.html#the-stack-of-open-elements:stack-of-open-elements-4

[02:42:49.0000] <annevk>
https://html.spec.whatwg.org/multipage/syntax.html#elements-2

[02:45:58.0000] <nox>
annevk: I see. I guess they aren't special from that POV, right?

[02:55:37.0000] <JakeA>
annevk: did DOM promises use microtasks?

[02:55:48.0000] <annevk>
JakeA: nope

[02:55:53.0000] <annevk>
nox: I guess not

[02:56:13.0000] <JakeA>
annevk: tasks instead?

[02:56:27.0000] <annevk>
JakeA: yeah, but nobody ever implemented from that specification

[02:56:46.0000] <annevk>
JakeA: the problem is ES15

[02:57:07.0000] <JakeA>
cool, just getting an impression of the history. Microsoft have asked that I make it clear in my blogpost that they're not "wrong", because it isn't specced that promises should be microtasks

[02:57:30.0000] <nox>
ES15?

[02:57:39.0000] <nox>
Did I miss 9 revisions of it?

[02:57:40.0000] <annevk>
nox: "proper" name for ES6

[02:58:30.0000] <annevk>
JakeA: well they have a point in that the specifications are unclear, but they also never asked so they're wrong as far as being engaged goes

[02:58:31.0000] <nox>
annevk: Your scare quotes are scary. ;)

[02:59:08.0000] <annevk>
nox: heh, I just meant to indicate I think renaming ECMAScript 6 to ECMAScript 2015 was rather silly

[03:00:03.0000] <nox>
annevk: So I missed 2006 revisions?!

[03:00:06.0000] <nox>
:P

[03:01:15.0000] <annevk>
2009*

[03:01:26.0000] <annevk>
/me hides

[03:42:46.0000] <JakeA>
annevk: on task queues… having different queues is mentioned in the spec, but when a task is queued it doesn't really say what queue it goes into. Is this a UA free-for-all?

[03:43:16.0000] <annevk>
JakeA: often specifications have a default task queue

[03:43:31.0000] <annevk>
JakeA: so it might be mentioned someplace else

[03:43:58.0000] <annevk>
JakeA: perhaps we should change that convention though, since it's rather vague

[03:44:32.0000] <annevk>
I think it might be better if we always had "Queue a task on /task queue/ to do X"

[03:44:33.0000] <JakeA>
Ahh I see, IDB specifies its own task source etc

[03:44:39.0000] <JakeA>
Agreed

[03:45:14.0000] <JakeA>
Or at least, I'd have found that easier to follow

[03:48:29.0000] <annevk>
Yeah, also, a lot of specification authors forget about task sources...

[05:34:16.0000] <annevk>
JakeA: btw, as for processes, it's basically a process per https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts

[05:35:26.0000] <annevk>
JakeA: different tabs can be different processes, even with localStorage, but you'll get race conditions in implementations that don't do storage mutex (Chrome, and every other implementation that will get processes, since I don't think anyone wants to implement that mutex thing)

[05:36:07.0000] <JakeA>
ahh gotcha, cheers!

[05:48:57.0000] <annevk>
Hmm, URLUtils is even more messed up than I thought :-(

[05:50:23.0000] <nox>
annevk: Hah.

[05:50:28.0000] <nox>
annevk: What's the problem this time?

[05:50:46.0000] <annevk>
I think the parser overrides effectively have to go...

[05:51:18.0000] <annevk>
Since modifying the underlying URL is not how this works at all...

[05:52:12.0000] <annevk>
The URL Standard has had that design since 2012 and nobody noticed...

[06:28:55.0000] <wanderview>
/me finally figured out how to make a w3c account.

[07:59:25.0000] <annevk>
I can probably get away by making some changes to the URL parser and keeping the modification of the underlying URL

[08:24:18.0000] <Ms2ger>
Anyone know a dictionary with a non-nullable interface member?

[08:26:29.0000] <annevk>
Ms2ger: most of the dictionaries I design these days don't have one

[08:27:05.0000] <annevk>
Ms2ger: https://fetch.spec.whatwg.org/#requestinit

[08:31:58.0000] <TabAtkins>
annevk: Shitting newlines and indents all over my *code* would be terrible.  I'd have to take tons of easy, simple appendChild() calls and sprinkle "\n"s around, and let's not even talk about indentation.  It's absolutely not a simple thing to do, and it would massively reduce code readability in those parts.

[08:32:46.0000] <annevk>
But instead you're doing it for everyone else their code

[08:33:00.0000] <TabAtkins>
I agree that the current HTML output isn't ideal; like I said, I have an issue to fix it up.  But that's an output file. ^_^

[08:33:19.0000] <annevk>
The output file is what gets rendered, so it's fairly important to review

[08:33:49.0000] <TabAtkins>
I virtually never look at the actual raw HTML. When I review, I do it on the rendered output.

[08:34:12.0000] <annevk>
I guess that's where we differ

[08:34:47.0000] <TabAtkins>
Sure.  And like I said, I've no problem with fixing it.

[08:44:16.0000] <wanderview>
annevk: the username and password components of a URL are different from the Request.credentials attribute, right?

[08:46:12.0000] <annevk>
wanderview: yes

[08:46:37.0000] <annevk>
wanderview: note that username/password are forbidden in fetch()

[08:46:46.0000] <annevk>
wanderview: at least when you pass in a URL

[08:46:58.0000] <wanderview>
annevk: oh?  I can't create a Request with them?

[08:47:13.0000] <annevk>
wanderview: step 13, substep 3

[08:49:14.0000] <wanderview>
/me files a bug

[08:50:00.0000] <SimonSapin>
What should html5lib do with <template>, ideally? Provide separate subtrees?

[08:51:40.0000] <annevk>
SimonSapin: yes

[08:53:02.0000] <wanderview>
annevk: so to test that we block username/password during interception with redirection and CORS mode... I need to use XHR or a navigation or something?

[08:53:08.0000] <wanderview>
I guess not a navigation

[08:53:13.0000] <wanderview>
since thats manual

[08:57:11.0000] <SimonSapin>
annevk: Thanks. A contributor is implementing it for html5ever :)

[08:57:15.0000] <annevk>
wanderview: no, because it's about the contents of the Location header

[08:57:37.0000] <annevk>
wanderview: which are not constrained by the Request constructor

[08:57:49.0000] <SimonSapin>
oh hi nox

[08:57:51.0000] <annevk>
wanderview: I should update that line though to use "include credentials"

[08:58:05.0000] <wanderview>
annevk: oh, I see!

[08:58:09.0000] <nox>
SimonSapin: Hello there.

[08:58:34.0000] <nox>
/me is said contributor.

[08:58:59.0000] <wanderview>
annevk: the credentials in the location URL are ok for a manual redirect?  they will show in the opaqueredirect URL?

[08:59:37.0000] <wanderview>
no... will still be opaqueredirect's Location header

[08:59:39.0000] <wanderview>
which is filtered

[08:59:44.0000] <wanderview>
but the navigation will see it

[08:59:51.0000] <wanderview>
right?

[09:00:16.0000] <annevk>
wanderview: the navigate algorithm will see it

[09:00:24.0000] <annevk>
wanderview: I suppose it might allow them, too

[09:00:54.0000] <Domenic>
annevk: regarding https://github.com/whatwg/url/issues/62#issuecomment-132202394 I don't have any concrete suggestions, but are you sure that you're not just irrationally attached to the "internal URL" concept, even though it might not work that well?

[09:01:15.0000] <Domenic>
E.g., have you checked what browsers do? It sounds like they are significantly more lazy, with less internal fields

[09:01:21.0000] <wanderview>
thanks... this stuff is confusing

[09:01:53.0000] <annevk>
Domenic: I think it makes sense to keep it for URL/Location/WorkerLocation

[09:01:59.0000] <annevk>
Domenic: as per the next comment

[09:02:22.0000] <Domenic>
annevk: oh OK, I think I see. Processing...

[09:02:43.0000] <annevk>
Domenic: and I think we might need to keep it for <a> if we really wanted blob URLs to work nicely and somewhat deterministically

[09:03:01.0000] <Domenic>
annevk: why is it important for Location? Location seems very similar to <a> to me.

[09:03:17.0000] <annevk>
Domenic: Location is very different from <a>

[09:03:42.0000] <Domenic>
Hmm in jsdom we implement them the same (and I am pretty sure we follow the spec)

[09:03:51.0000] <Domenic>
Let me dig up the code and explain that a bit more

[09:03:55.0000] <annevk>
Domenic: the spec is wrong, which is why it needs a new design

[09:04:05.0000] <Domenic>
well, we follow browsers, is what i meant

[09:04:26.0000] <annevk>
Domenic: so when you set .pathname on Location you don't change the pathname of Location?

[09:04:42.0000] <Domenic>
oh, nope, that we don't do :-/

[09:04:43.0000] <annevk>
Domenic: and getting pathname keeps returning the old value?

[09:04:56.0000] <annevk>
sounds like you could have used some test cases ;-)

[09:04:58.0000] <Domenic>
ok, i guess i'll try to re-read your comments again...

[09:05:08.0000] <Domenic>
well, we mostly don't support navigation, so it's all a little bonkers anyway :P

[09:05:40.0000] <Domenic>
re-reading the comment... the setters only do side-effects, and do not do any actual setting?

[09:06:27.0000] <Domenic>
that's almost certainly not true for the hash setter... /me tests

[09:06:51.0000] <annevk>
yeah hash might be a special case, interesting point

[09:07:26.0000] <Domenic>
yeah it is

[09:07:39.0000] <Domenic>
hmm how does .contentWindow.location behave, I wonder

[09:08:38.0000] <annevk>
I think bholley is writing a spec for that when it's cross-origin

[09:08:54.0000] <annevk>
Stuff gets rather involved :-/

[09:09:19.0000] <Domenic>
jeez

[09:09:30.0000] <Domenic>
it errors in firefox, works in chrome (for hash)

[09:09:36.0000] <Domenic>
time to test somtehing more interesting than hash

[09:11:16.0000] <Domenic>
Chrome appears to censor iframe locations (even same-origin ones)??

[09:11:46.0000] <Domenic>
https://jsbin.com/kewuv/1/edit?html,console,output

[09:14:41.0000] <annevk>
Domenic: because the URL you use redirects

[09:15:41.0000] <annevk>
Still, the reason .hash does change is because navigate in that case is synchronous

[09:15:56.0000] <annevk>
Not because it has anything to do with the Location object, which just observes the document's url

[09:16:05.0000] <wanderview>
Domenic: does internet explorer 10 really have the new streams API?  I think someone is confused (usually me) https://dev.modern.ie/platform/status/streamsapi/

[09:16:51.0000] <annevk>
wanderview: it points to http://www.w3.org/TR/streams-api/ which is not at all what streams ended up being

[09:17:14.0000] <wanderview>
annevk: it also says chrome is implementing it

[09:17:28.0000] <wanderview>
seems a bit confusing to people looking at it

[09:17:35.0000] <annevk>
wanderview: I suspect whoever wrote that is confused

[09:18:01.0000] <Domenic>
annevk: but the Location object retains identity even during navigation, when changing hash

[09:18:11.0000] <Domenic>
wanderview: yeah I tried ot correct them about this, let me find the bug...

[09:18:26.0000] <wanderview>
I guess I could write a pull request against their status page... but I'm lazy

[09:18:26.0000] <annevk>
Domenic: only because navigate doesn't create a new document when you change the hash

[09:18:32.0000] <Domenic>
sure

[09:19:11.0000] <Domenic>
https://github.com/MicrosoftEdge/Status/issues/108

[09:20:06.0000] <annevk>
Note that the document URL can also change through pushState()

[09:20:13.0000] <annevk>
which is reflected by Location

[09:20:13.0000] <wanderview>
ah, thnaks

[09:20:35.0000] <annevk>
it's just that any change to Location triggers navigate instead

[09:20:40.0000] <Domenic>
right

[09:21:03.0000] <Domenic>
so Location having no internal URL, but instead using the document's URL, makes more sense to me

[09:34:59.0000] <Domenic>
wanderview: wouldn't hurt for you to ping them on https://github.com/MicrosoftEdge/Status/issues/108 :)

[09:36:36.0000] <Ms2ger>
"apply the URL parser algorithm to the absolute URL of the new resource"

[09:36:37.0000] <Ms2ger>
Huh

[09:37:23.0000] <annevk>
TabAtkins: if you could fix the output of Bikeshed that'd be great

[09:37:25.0000] <Domenic>
I like how status.modern.ie just randomly chooses W3C statuses to apply to WHATWG specs

[09:37:40.0000] <annevk>
TabAtkins: that would also make it significantly easier to rewrite existing specifications and compare the output

[09:37:54.0000] <Domenic>
Tempted to poke them to add an actual living standard status but that would probably be counterproductive

[09:38:08.0000] <annevk>
Domenic: they have to pretend we don't exist presumably

[09:38:09.0000] <Domenic>
annevk: I always have to use htmldiff to compare bikeshed spec outputs

[09:38:19.0000] <Domenic>
annevk: nah check this out: https://dev.modern.ie/platform/status/fetchapi/

[09:38:35.0000] <Domenic>
annevk: this one is my favorite: https://dev.modern.ie/platform/status/fullscreenapi/

[09:39:15.0000] <Domenic>
annevk: but yeah along hte lines of picking random statuses, https://dev.modern.ie/platform/status/urlapi/

[09:40:43.0000] <annevk>
heh

[09:40:57.0000] <annevk>
I'm surprised that last one doesn't point to http://www.w3.org/TR/url/

[09:41:00.0000] <annevk>
I believe it did earlier

[09:41:13.0000] <annevk>
That they point to whatwg.org is actually news to me

[09:42:15.0000] <Domenic>
oooh another one https://dev.modern.ie/platform/status/mutationobservers/

[09:42:48.0000] <Ms2ger>
"Established standard"? What does that even mean?

[09:43:10.0000] <Domenic>
hehehe

[09:46:28.0000] <Domenic>
annevk: MikeSmith: can we get /TR/url to redirect to https://url.spec.whatwg.org/ yet? The out-of-dateness is strong.

[10:12:51.0000] <nox>
Ms2ger: You reviewing my stuff? I feel your pain.

[10:31:16.0000] <annevk>
Domenic: I doubt the W3C would be interested in that

[10:31:36.0000] <annevk>
Domenic: besides, they put out this new charter of some mega group that's supposedly going to work on it...

[10:32:43.0000] <annevk>
Domenic: http://www.w3.org/2015/07/web-platform-wg.html "The Group MAY provide a specification defining the syntax, process and error handling for resolving URL, along with its API."

[10:32:56.0000] <annevk>
Grammar is not a thing they care about it seems...

[10:33:24.0000] <annevk>
Also, why does the charter uppercase MAY while not referencing RFC2119?

[10:33:50.0000] <annevk>
Meh

[10:33:58.0000] <Domenic>
I mean, that group is supposedly going to work on a lot of things

[10:34:07.0000] <Domenic>
Doesn't mean they have an editor for them

[10:34:50.0000] <annevk>
They don't

[10:35:45.0000] <annevk>
There's only a couple of folks interested in editing in the first place. The number of folks interested in maintaining infrastructure is a fraction of that. So...

[10:43:13.0000] <jgraham>
I think "interested" is not always the limiting factor

[10:43:25.0000] <jgraham>
"competent, and able to make a living"

[10:44:22.0000] <annevk>
Fair, but if competent, we should be able to find a sponsor...

[10:46:18.0000] <jgraham>
Well it's ahrd to prove you're competent if you don't spend any time doing it

[10:46:23.0000] <jgraham>
There are exceptions ofc

[10:48:49.0000] <annevk>
Yeah, this is a problem for open source software too

[11:04:46.0000] <Domenic>
I am annoyed at trying to get Google to sponsor this kind of work ... they don't want to sponsor working from home or remote work, which has lost a couple candidates already.

[11:23:29.0000] <annevk>
wow

[11:33:55.0000] <Ms2ger>
Boo

[11:43:53.0000] <Ms2ger>
TabAtkins, re: your tweet: "zit nog altijd vast" means "is still in jail"

[12:48:28.0000] <wanderview>
JakeA: do we no longer require a scope to be at or below the location of a service worker?  I can't find it in the spec any more

[12:48:30.0000] <wanderview>
maybe I'm blind

[12:50:29.0000] <wanderview>
ah, its in the update algorithm... never mind

[12:54:30.0000] <wanderview>
JakeA: another question... can I have SWs registered at both scope /a/b and scope /a/b/c?

[12:57:27.0000] <Mek>
wanderview: given that the "Match Service Worker Registration" explicitly tries to find the longest matching scope, I'm pretty sure the answer is yes

[13:01:13.0000] <wanderview>
Mek: I'm wondering if that is intended to match /some/scopeislong against /some/scope

[13:01:28.0000] <wanderview>
where there is no path separator... matching within path elements

[13:02:07.0000] <annevk>
TabAtkins: what is Shepherd?

[13:03:16.0000] <Mek>
I think it is indeded to just find the longest scope that matches the clientURLString, although the text does indeed seem a bit oddly phrased...

[13:03:21.0000] <Mek>
*intended

[13:04:03.0000] <wanderview>
I think its very surprising that it searches within the final token in the patch

[13:04:32.0000] <wanderview>
means I can't have separate service workers for peers in my directory tree structure if they have similar names

[13:04:53.0000] <annevk>
wanderview: you can have a service worker for a file, so yes, they are different

[13:05:18.0000] <wanderview>
annevk: ok... I'm writing a spec bug

[13:05:23.0000] <wanderview>
(I think you just agreed with me)

[13:05:34.0000] <annevk>
wanderview: no I didn't?

[13:05:43.0000] <annevk>
wanderview: /x/ and /x are different

[13:06:07.0000] <wanderview>
annevk: the wording for this matching does not distinguish for trailing slash at all

[13:06:26.0000] <wanderview>
annevk: and I believe those would probably get normalized to the same URL string by parsing the URL?

[13:06:40.0000] <Mek>
well, the wording for the matching just compares string serializations of URLs

[13:08:16.0000] <Mek>
except that the "the longest key [...] starting with the value of clientURLString" seems to imply the key(scope) should start with the client URL instead of the other way around...

[13:08:38.0000] <wanderview>
I think the spec language is crazy... I'm writing an issue

[13:08:56.0000] <annevk>
wanderview: no they wouldn't

[13:09:18.0000] <annevk>
wanderview: the spec should probably talk about this in terms of the URL Standard

[13:09:19.0000] <wanderview>
annevk: ok... but thats still not the case I was talking about... I'm talking about /some/scope and /some/scopeislong

[13:09:55.0000] <annevk>
wanderview: sure, those are different

[13:10:06.0000] <TabAtkins>
annevk: Shepherd is the separate tool that plinss runs that parses specs periodically and extracts all their anchors for me.

[13:10:31.0000] <wanderview>
https://github.com/slightlyoff/ServiceWorker/issues/734

[13:10:33.0000] <annevk>
TabAtkins: so based on that list of specs, that's only done for a set of specs?

[13:10:51.0000] <annevk>
TabAtkins: and that's what causing the mismatch in references for selectors4 vs selectors-4, dom vs dom-ls, etc.

[13:10:59.0000] <TabAtkins>
Yeah, but it's not based on that list.  There's another list managed through the Shepherd UI.

[13:11:13.0000] <annevk>
hmm

[13:11:20.0000] <annevk>
guess I need to study that

[13:11:22.0000] <TabAtkins>
That latter issue is actually Bikeshed.  It's fixable with some more hacks by me.

[13:11:25.0000] <TabAtkins>
And I'm fine with those hacks.

[13:11:37.0000] <TabAtkins>
annevk: It's not accessible to people in general. I have admin to it, tho.

[13:21:55.0000] <annevk>
I see

[13:24:07.0000] <annevk>
TabAtkins: so the cross-specification cross-reference database is not publicly available? Are the tools?

[13:24:21.0000] <annevk>
TabAtkins: does Bikeshed have any other non-public dependencies?

[13:25:24.0000] <TabAtkins>
As far as I know, Shepherd's source isn't publicly available.

[13:26:00.0000] <TabAtkins>
Other than the dependencies in Bikeshed's install, it only additionally depends on SpecRef (on GH) and Shepherd (not).

[13:26:23.0000] <annevk>
Guess I should ask plinss if he can fix that somehow

[13:27:36.0000] <annevk>
TabAtkins: so SpecRef is exclusively for the references section?

[13:27:45.0000] <TabAtkins>
Yeah.

[13:28:07.0000] <TabAtkins>
SpecRef provides biblio data, Shepherd provides anchor/spec/testsuite data.

[13:28:31.0000] <annevk>
Both have been behaving badly :-/

[13:29:01.0000] <TabAtkins>
The DOM https issue is my fault - I put it into Shepherd as http. Trying to change it now.

[13:40:58.0000] <JakeA>
wanderview: /x/ and /x are different scopes if you want them to be

[13:41:19.0000] <JakeA>
If you want to restrict to a path, end the scope in /

[13:41:27.0000] <wanderview>
JakeA: I'm not interested in the case... I'm interested in /some/scopeislong and /some/scope being separate

[13:42:07.0000] <wanderview>
but I think I'm convinced my actual problem is a gecko issue somewhere

[13:44:29.0000] <JakeA>
wanderview: they should be able to be separate scopes yeah

[14:09:25.0000] <TabAtkins>
annevk: Got dom changed to https. Give it a few minutes and then `bikeshed update` to get things fixed.

[15:15:30.0000] <nox>
In <https://html.spec.whatwg.org/multipage/syntax.html#markup-declaration-open-state>, in which case can there be no adjusted current node, and in which case can that node not be an element at all?

[15:21:35.0000] <gsnedders>
nox: the start of parsing a document

[15:21:43.0000] <gsnedders>
nox: it's always an element

[15:21:50.0000] <gsnedders>
(or null)

[15:22:38.0000] <gsnedders>
nox: <!dcotype><html>foo, for example, hits that case

[15:22:47.0000] <gsnedders>
or <!kjdfg> etc.

[15:22:52.0000] <nox>
gsnedders: Thanks.

[15:23:11.0000] <gsnedders>
nox: I /think/ that's the only case where that's true

[15:23:27.0000] <gsnedders>
(I don't really have the parsed in my head at the moment)

[15:23:30.0000] <gsnedders>
*parser

[15:48:55.0000] <nox>
In <https://html.spec.whatwg.org/multipage/syntax.html#cdata-section-state>, shouldn't the switch be the second step?

[15:49:11.0000] <nox>
Cf. https://html.spec.whatwg.org/multipage/syntax.html#bogus-comment-state

[16:37:30.0000] <gsnedders>
nox: the positioning of the switch is irrelevant, unless there's an explicit "stop executing these steps"

[16:38:02.0000] <gsnedders>
nox: note in most of the states you have the matching of the consumed character, then for each character the first thing done is changing the state

[16:38:25.0000] <nox>
Still looks inconsistent with bogus comment though.


2015-08-19
[19:07:00.0000] <MikeSmith>
Domenic: I don't have perms to update /TR shortname (undated) URLs. Nor does plh. They're basically just symlinks set up by the publication manager (aka webmaster)

[19:08:04.0000] <MikeSmith>
but what I can do is, I can add a bold disclaimer that will show up there

[19:08:08.0000] <MikeSmith>
will do that right now

[19:11:28.0000] <MikeSmith>
Domenic: btw sad to hear "they don't want to sponsor working from home or remote work, which has lost a couple candidates already". I had thought that in the past at least they'd taken more of an enlightend view of things

[19:15:16.0000] <MikeSmith>
I guess the claims at various places of attracting/having the "best and brightest" needs to be qualified with "The best and the brightest people who already live near one of the few places where we have engineering offices or are willing uproot your entire lives to relocate to one of the few places where we think they should leve."

[19:20:40.0000] <MikeSmith>
btw while working right now on adding the disclaimer to the https://www.w3.org/TR/url/ document, it seems very appropriate that I have to use cvs to do it

[19:29:54.0000] <MikeSmith>
Domenic: annevk https://www.w3.org/TR/url/ now has a fugly non-dismissable fixed-position warning

[19:30:04.0000] <MikeSmith>
that's the best I can do for now

[20:45:14.0000] <MikeSmith>
Domenic: annevk fwiw I also went ahead just now and added the fugly non-dismissable fixed-position warning to the https://dvcs.w3.org/hg/streams-api/raw-file/tip/Overview.htm and https://www.w3.org/TR/streams-api/ documents

[20:50:04.0000] <roc>
MikeSmith: who's "they"?

[20:51:29.0000] <MikeSmith>
hi roc

[20:51:34.0000] <MikeSmith>
roc: http://krijnhoetmer.nl/irc-logs/whatwg/20150818#l-602

[20:51:39.0000] <MikeSmith>
is the context

[20:52:56.0000] <roc>
ta

[20:55:59.0000] <MikeSmith>
roc: btw as a parent 8with a lot of what you wrote about the rw

[20:56:02.0000] <MikeSmith>
oofs

[20:56:06.0000] <MikeSmith>
roc: btw as a parent 8with a lot of what you wrote about the rw

[20:56:28.0000] <MikeSmith>
/me straightens out his fingers

[20:57:42.0000] <MikeSmith>
roc: as a parent (with another new one on the way soon), lot of what you wrote about the unexpected rewards of being a parent in http://robert.ocallahan.org/2015/08/parenting.html really spoke to me and my own experiences

[20:57:51.0000] <MikeSmith>
so, thanks for taking time to write it

[20:57:52.0000] <roc>
cool!

[20:59:18.0000] <MikeSmith>
I wish more tech people in our world would take time to write a bit now and then about their non-tech lives

[20:59:37.0000] <MikeSmith>
I should more myself, I guess

[21:22:56.0000] <MikeSmith>
birtles: thanks for the https://platform.html5.org/ PR (just now merged it)

[21:37:35.0000] <birtles>
MikeSmith: thanks!

[21:38:57.0000] <Domenic>
oh awesome, thanks MikeSmith!

[22:56:59.0000] <annevk>
MikeSmith++

[00:33:22.0000] <nox>
I don't see anything related to U+0000 NULL in https://html.spec.whatwg.org/multipage/syntax.html#cdata-section-state, is that intended?

[00:33:50.0000] <nox>
html5lib-tests seem to include tests for NULL replacement by U+FFFD, but I can't find that in the spec.

[00:38:44.0000] <Ms2ger>
I think there's supposed to be some kind of preprocessing step

[00:39:50.0000] <Ms2ger>
Or not

[00:39:51.0000] <Ms2ger>
The handling of U+0000 NULL characters varies based on where the characters are found. In general, they are ignored except where doing so could plausibly introduce an attack vector. This handling is, by necessity, spread across both the tokenization stage and the tree construction stage.

[00:45:34.0000] <nox>
Ms2ger: I think the rationale was avoiding NULL everywhere, because of legacy things where it could be a security issue. The weird thing is these tests checking for replacement.

[00:57:37.0000] <annevk>
nox: see 12.2.5.5

[00:58:08.0000] <annevk>
nox: CDATA only occurs in foreign content, where a null is replaced with U+FFFD looks like

[00:59:49.0000] <nox>
annevk: Oh, thanks.

[01:19:56.0000] <annevk>
zewt: https://github.com/whatwg/url/issues/62#issuecomment-132488127

[01:22:00.0000] <nox>
annevk: Oh, subscribed. :)

[01:37:11.0000] <nox>
There are tests for <rb> in <ruby> in html5lib-tests, but no mention of <rb> at all in the HTML spec. Is that intended too?

[01:40:00.0000] <Ms2ger>
Don't ask

[01:40:13.0000] <nox>
Ah ah.

[01:40:35.0000] <nox>
I think the tests are wrong, according to https://github.com/html5lib/html5lib-tests/issues/54.

[01:41:32.0000] <annevk>
nox: there's an open bug on <rb> iirc

[01:42:00.0000] <nox>
annevk: https://github.com/html5lib/html5lib-tests/issues/51?

[01:42:15.0000] <annevk>
nox: I meant against the HTML Standard

[01:42:22.0000] <nox>
Oh, sorry.

[01:42:52.0000] <nox>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26189

[01:43:55.0000] <annevk>
Yeah, I wonder how much scrutiny the addition in "W3C HTML" got

[01:44:25.0000] <annevk>
The last time the W3C supplied a patch (for <template>) it was quite bad

[01:44:35.0000] <nox>
Hah.

[01:45:11.0000] <nox>
annevk: The current consensus is that <rb> and <rtc> should be implicitly closed, right?

[01:48:19.0000] <annevk>
nox: I don't know

[01:52:09.0000] <Ms2ger>
Calling hsivonen

[01:54:37.0000] <hsivonen>
I was called

[01:55:54.0000] <hsivonen>
nox, annevk, Ms2ger: I've noticed that we fail the html5lib Ruby tests, but I haven't had the time to look into whether to blame the code, the tests or the spec

[01:56:14.0000] <nox>
hsivonen: In doubt, blame everything.

[01:56:19.0000] <nox>
Or just Obama.

[01:56:38.0000] <Ms2ger>
Or Canada

[01:56:55.0000] <hsivonen>
https://bugzilla.mozilla.org/show_bug.cgi?id=1178484 makes me sad, but I guess I should r+ it and not fight it

[01:57:06.0000] <hsivonen>
Facebook won this one long ago :-(

[02:02:49.0000] <jgraham>
Canada will at least apologise

[02:08:10.0000] <nox>
jgraham: Ah ah.

[02:11:20.0000] <annevk>
hsivonen: that idea still seems terrible though

[02:11:55.0000] <annevk>
hsivonen: note also that folks objected when this was raised on dev.platform

[02:27:14.0000] <jgraham>
/me mutters something about tests where the title doesn't match the actual test behaviour

[02:27:31.0000] <jgraham>
For the record, it's quit possible that I wrote the test in question :)

[02:27:35.0000] <jgraham>
*quite

[02:27:55.0000] <jgraham>
Although history — at least outside Opera — doesn't record that

[02:28:58.0000] <jgraham>
Anyone want to guess what https://github.com/w3c/web-platform-tests/blob/master/old-tests/submission/Opera/script_scheduling/112.html is supposed to be testing?

[02:31:05.0000] <jgraham>
testing that a script with both async and defer runs before the load event seems rather pointless since either attribute could have that effect

[02:32:06.0000] <jgraham>
and timing alone should usually cause it to run after DOMContentLoaded even if it's async

[03:05:33.0000] <annevk>
jgraham: I wonder if that used to be a more elaborate external dependency before, with "pipe=trickle(d1)"

[03:05:49.0000] <annevk>
jgraham: causing it to hang for a second or so

[03:30:45.0000] <annevk>
Ms2ger: why is there both a ref and xref folder in https://github.com/whatwg/xref/?

[03:34:46.0000] <Ms2ger>
ref is for the References section?

[03:35:03.0000] <Ms2ger>
Not sure if there's still much of a point to that

[03:38:48.0000] <annevk>
Oh, I didn't know about that feature

[03:38:51.0000] <annevk>
Seems weird

[03:46:43.0000] <annevk>
MikeSmith: what's the two favicon files in https://github.com/whatwg/platform.html5.org?

[03:47:08.0000] <annevk>
MikeSmith: also, maybe remove whatwg.png in favor of just referencing resources.whatwg.org?

[04:11:10.0000] <nox>
I have trouble following the spec as to why "<!doctype html><p><math><mn><span></p>a" should end up with a p inside a span inside an mn inside a math inside another p.

[04:40:14.0000] <gsnedders>
nox: you hit the 'Otherwise, process the token according to the rules given in the section corresponding to the current insertion mode in HTML content.' in the foreign content insertion mode

[04:40:44.0000] <gsnedders>
then you go back to the in body mode and you hit "If the stack of open elements does not have a p element in button scope, then this is a parse error; insert an HTML element for a "p" start tag token with no attributes.

[04:41:24.0000] <gsnedders>
and because "mn" creates a scope you don't have a p element in scope

[04:42:50.0000] <nox>
gsnedders: Thanks.

[04:43:44.0000] <nox>
gsnedders: But that "Otherwise" is hit 'If the adjusted current node is a MathML text integration point and the token is a start tag whose tag name is neither "mglyph" nor "malignmark"', isn't the token here <span>?

[04:43:52.0000] <Ms2ger>
jgraham, wait, why does https://github.com/w3c/web-platform-tests/blob/master/old-tests/submission/Opera/script_scheduling/112.html call t.done() twice?

[04:45:59.0000] <gsnedders>
nox: oh, sorry. yes, the span is parsed in the current insertion mode (in-body)

[04:46:16.0000] <nox>
/me is utterly lost. :)

[04:47:35.0000] <nox>
gsnedders: Shouldn't the span be parsed through "Otherwise process the token according to the rules given in the section for parsing tokens in foreign content."?

[04:48:08.0000] <gsnedders>
nox: OK, so when you've parsed "<!doctype html><p><math><mn>", you have a span start tag token to parse

[04:48:16.0000] <nox>
Yes.

[04:48:32.0000] <gsnedders>
nox: the adjusted current node is a mn element in the MathML namespace, which is a MathML text integration point

[04:48:38.0000] <gsnedders>
so we "Process the token according to the rules given in the section corresponding to the current insertion mode in HTML content.

[04:48:42.0000] <nox>
Why?

[04:48:52.0000] <gsnedders>
https://html.spec.whatwg.org/multipage/syntax.html#tree-construction-dispatcher

[04:48:58.0000] <nox>
"If the adjusted current node is a MathML text integration point and the token is a start tag whose tag name is neither "mglyph" nor "malignmark"

[04:48:58.0000] <nox>
If the adjusted current node is a MathML text integration point and the token is a character token"

[04:49:43.0000] <nox>
AFAICT, the adjusted current node is indeed a MathML text integration point, but the token isn't a start tag whose tag name is neither "mglyph" nor "malignmark".

[04:49:44.0000] <gsnedders>
so the adjusted current node is a mn element in the MathML namespace, right?

[04:50:08.0000] <gsnedders>
the token is a start tag whose tag name is neither "mglyph" nor "malignmark", because it's a start tag whose tag name is "span"

[04:50:21.0000] <nox>
Oh god, I can't read.

[04:50:22.0000] <gsnedders>
and "span" is neither "mglyph" nor "malignmark"

[04:50:25.0000] <gsnedders>
:)

[04:50:48.0000] <gsnedders>
eh, it happens to us all. especially when implementing something that's quite repetitive.

[04:55:31.0000] <jgraham>
Ms2ger: Good point!

[05:32:04.0000] <annevk>
hsivonen: it just occurred to me that https://github.com/whatwg/encoding/issues/5 is a problem for several encodings

[06:58:06.0000] <gsnedders>
nox: you implementing foreign content support in html5ever, or?

[06:58:36.0000] <nox>
gsnedders: I'm making failing tests pass. That was one of them yes.

[06:59:58.0000] <gsnedders>
nox: so yeah, I /believe/ we should have the right number of errors for all the tests, but I can't guarantee it.

[07:04:21.0000] <nox>
gsnedders: I kinda want to add tests for the parse errors too.

[07:04:55.0000] <gsnedders>
nox: what do you mean?

[07:05:29.0000] <nox>
gsnedders: I mean in html5ever. The #error part isn't tested.

[07:05:38.0000] <gsnedders>
nox: right

[07:05:59.0000] <gsnedders>
nox: so yeah, I can't guarantee the #error section is right, but it probably is?

[07:06:07.0000] <gsnedders>
nox: I can give far stronger guarantees about everything else!

[07:07:10.0000] <nox>
gsnedders: Well, even all the more reason to implement them, that way we will be able to give strong guarantees about everything.

[07:12:57.0000] <Ms2ger>
There's still the question of collapsing multiple parse errors into one

[07:14:36.0000] <gsnedders>
the /number/ of parse errors should be constant, IIRC

[07:14:43.0000] <gsnedders>
it's just /what/ parse errors you get is undefined

[07:16:33.0000] <nox>
gsnedders: I know of at least one FIXME in html5ever where it wonders if some error machinery should stop at first erroneous tag. I'm not currently at home so can't say more about it.

[07:17:06.0000] <jgraham>
I'm less sure that the error part is right :)

[07:43:28.0000] <wanderview>
annevk: https://github.com/whatwg/fetch/issues/112

[07:44:18.0000] <Domenic>
Ah, it's so nice having more implementers in the channel, spicing things up with crazy parser talk. <3 nox

[08:06:09.0000] <annevk>
wanderview: thank you

[08:27:37.0000] <nox>
Domenic: Heh. :)

[08:42:07.0000] <wanderview>
annevk: I'm going to write my wpt test to the gecko behavior for now on the assumption that spec issue is real

[08:43:18.0000] <annevk>
wanderview: sounds good

[08:43:29.0000] <annevk>
wanderview: I can try to fix it tomorrow if that helps

[08:45:24.0000] <wanderview>
thanks

[08:45:38.0000] <wanderview>
annevk: I'll probably be working on this for at least a few more days... so any time in there

[09:10:47.0000] <ccardona-work>
Good morning WHATWG crew o/

[09:46:19.0000] <annevk>
/me has been tidying up URL and Encoding

[09:47:15.0000] <annevk>
I still have to do some Encoding and URL stuff, but fixing a few Fetch things shouldn't take long

[09:50:22.0000] <nox>
gsnedders: I think there are no tests for parsing fragments into templates.

[09:52:22.0000] <nox>
gsnedders: Nor tests for parsing fragments into annotate-xml elements.

[09:55:45.0000] <gsnedders>
nox: entirely plausible

[09:56:19.0000] <gsnedders>
nox: in general fragment parsing is somewhat undertested

[09:56:40.0000] <gsnedders>
nox: feel free to contribute tests (or at least file bugs on what needs tests)!

[10:09:39.0000] <wanderview>
annevk: does Response tainting effect anything other than the type of Response returned from fetch()?

[10:10:36.0000] <wanderview>
I mean, do we expect other specs like html to look at the type of the Response returned from the fetch algorithm?

[10:26:58.0000] <Ms2ger>
annevk, un-owner-ed myself

[11:28:14.0000] <nox>
gsnedders: Filed some.

[11:31:49.0000] <nox>
hsivonen: Any idea when you will look at the Ruby in HTML tests/spec btw? Last failing tests I can't do much about. :)

[12:54:58.0000] <nox>
OH: "HTML is fairly easy to parse, I wrote an HTML parser once just with a loop and state variable"

[13:04:24.0000] <jgraham>
hahahahahaha

[13:55:16.0000] <Matt5ander5>
does anyone in here use textual irc client for mac ?

[14:08:39.0000] <nox>
#data

[14:08:39.0000] <nox>
<table><colgroup> foo</colgroup></table>

[14:08:39.0000] <nox>
#errors

[14:08:39.0000] <nox>
(1,7): expected-doctype-but-got-start-tag

[14:08:39.0000] <nox>
(1,32): foster-parenting-character-in-table

[14:08:39.0000] <nox>
(1,32): foster-parenting-character-in-table

[14:08:39.0000] <nox>
(1,32): foster-parenting-character-in-table

[14:08:40.0000] <nox>
(1,32): unexpected-end-tag

[14:08:40.0000] <nox>
#document

[14:08:41.0000] <nox>
| <html>

[14:08:41.0000] <nox>
|   <head>

[14:08:42.0000] <nox>
|   <body>

[14:09:16.0000] <nox>
Anyway, yay, gsnedders, the errors look funky in many places, from a quick first glance.

[14:10:10.0000] <nox>
In the case I mistakenly pasted just now, the foster-parenting errors are I think for the "foo" text, one per character, and is reported at the end of </colgroup> for a reason I ignore. A mistake, probably?

[14:11:57.0000] <nox>
I also don't know how they are related to foster parenting, too.

[14:50:06.0000] <gsnedders>
nox: and the locations seem off, bah

[14:51:42.0000] <gsnedders>
nox: basically nolanw based them off his Obj-C implementation a while ago because it was the first time in ages anyone had tried to make sure an implementation was up to date with the spec wrt parse errors. at some point html5lib-python should be updated so we can see how that compares.

[15:03:00.0000] <nox>
gsnedders: I'm currently comparing them to the results of html5ever,

[15:03:16.0000] <nox>
gsnedders: looked at 4 mismatches, all 4 seem to be problems in the tests.

[15:04:01.0000] <gsnedders>
Entirely plausible. :)

[15:04:27.0000] <nox>
59 failing tests when checking errors.

[15:04:37.0000] <gsnedders>
Feel free to open a PR. That one might take longer to review, though. :)

[15:04:44.0000] <nox>
Many of them are just foster-parenting-character-in-table.

[15:04:52.0000] <nox>
gsnedders: Will do, with the most obvious commits first.

[15:05:22.0000] <nox>
For example, &#1111111FOO in the tests only report an error for the illegal code point, and not the missing semicolon.

[15:53:51.0000] <nox>
gsnedders: Just understood why the location are off. And it seems on purpose.

[15:54:41.0000] <nox>
gsnedders: Error happens in "Anything else" in https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intabletext, so you could argue it is reported at the end of the "anything else" thing, in that case </colgroup>.

[15:54:51.0000] <nox>
Having the error three times is wrong though.


2015-08-20
[17:11:48.0000] <gsnedders>
nox: eh, location we need some big discussion about with a bunch of us to decide what we actually want to do with it

[17:12:22.0000] <gsnedders>
nox: I think we've long ago concluded that the error messages are mostly for helping understand the test rather than meaningful at all

[17:13:17.0000] <gsnedders>
nox: tl;dr: for now you're best treating the errors as documented, i.e., only the number of lines matters

[18:19:10.0000] <MikeSmith>
annevk: seems like I probably just that favicon file in my working directory untracked and wound up adding and it committing it by mistake

[18:19:47.0000] <MikeSmith>
anyway, deleted now

[18:32:53.0000] <MikeSmith>
annevk: also deleted whatwg.png

[22:31:00.0000] <annevk>
MikeSmith: ah ok, takk

[23:18:38.0000] <jamesr___>
jgraham: servo doesn't seem to render http://smfr.org/misc/css/stacking/css-escher.html correctly

[23:20:19.0000] <jamesr___>
do you plan to implement that insanity? (i think it's required for web compat, but who knows)

[23:26:54.0000] <annevk>
jamesr___: SimonSapin might be a better target for that question

[00:19:45.0000] <MikeSmith>
I seem to recall some mention here a while back of somebody working on Navigation Transistions again

[00:19:52.0000] <MikeSmith>
but can't remember who

[00:21:26.0000] <MikeSmith>
Chris Lord it seems

[00:25:16.0000] <MikeSmith>
http://cwiiis.github.io/gaia-navigator/

[00:25:22.0000] <MikeSmith>
that wasn't very easy to fine

[00:29:53.0000] <annevk>
Hmm, is there a simple command line tool that checks whether a file is valid JSON?

[00:30:17.0000] <annevk>
We now publish https://resources.whatwg.org/biblio.json and since it's draconian it's rather easy to mess up

[00:36:54.0000] <annevk>
Also, whoever is next with a new standard, please start with an "A" or "G", "I", "K", "O", "P", "R", "T", "V", "W", or "Z"

[00:47:32.0000] <MikeSmith>
annevk: https://github.com/zaach/jsonlint maybe

[00:48:29.0000] <MikeSmith>
oh Zach Carter

[01:02:42.0000] <kochi>
If script calls "input.focus()", is the generated focusin event a 'trusted' event?

[01:03:43.0000] <kochi>
(background: for writing an automated test, I'm wondering if any way to dispatch 'trusted' event from scripts)

[01:03:53.0000] <kochi>
http://www.w3.org/TR/2015/WD-uievents-20150428/#trusted-events says

[01:04:11.0000] <kochi>
"Events that are generated by the user agent, either as a result of user interaction, or as a direct result of changes to the DOM, are trusted"

[01:06:44.0000] <kochi>
Chrome hasn't implemented the property so far, anyway

[01:07:10.0000] <kochi>
According to https://developer.mozilla.org/en/docs/Web/API/Event/isTrusted even Firefox and IE are differently implemented

[01:09:07.0000] <smaug____>
kochi: that mdn page is a bit odd

[01:09:37.0000] <smaug____>
events created by scripts in web pages are untrusted

[01:10:05.0000] <smaug____>
not sure what that comment about IE tries to say

[01:10:15.0000] <annevk>
smaug____: is click() untrusted as well?

[01:10:21.0000] <smaug____>
or does IE have some bizarre behavior for element.click()

[01:10:22.0000] <annevk>
yeah I guess it better be

[01:10:29.0000] <SimonSapin>
jamesr___: Interesting. I filed https://github.com/servo/servo/issues/7293

[01:10:31.0000] <smaug____>
click() does create untrusted event

[01:11:24.0000] <kochi>
hmm, if click() creates untrusted event, it sounds natural to think focus() creates untrusted event.

[01:12:31.0000] <smaug____>
well click() just dispatches click event

[01:12:45.0000] <smaug____>
focus() focuses something and that ends up dispatching focus event

[01:13:22.0000] <smaug____>
(what the spec says about click() is IIRC very different to what all the implementations do)

[01:15:03.0000] <annevk>
"Fire a click event at the element. If the run synthetic click activation steps algorithm was invoked because the click() method was invoked, then the isTrusted attribute must be initialised to false."

[01:15:07.0000] <annevk>
seems about right

[01:16:59.0000] <smaug____>
well, implementations trigger the activation steps during event dispatch

[01:17:21.0000] <smaug____>
which is why manually dispatching untrusted click event should behave as if click() was called

[01:28:07.0000] <kochi>
Can a focus event as a result of focus() invocation be though of "a direct result of changes to the DOM"?

[01:28:57.0000] <kochi>
I guess this part of the sentence is still ambiguos about "who" makes the changes to the DOM, can it be a script?

[01:31:03.0000] <Ms2ger>
Context?

[01:31:03.0000] <botie>
hmmm... Context is https://github.com/validator/validator/issues/61

[01:32:12.0000] <Ms2ger>
What

[01:32:21.0000] <kochi>
Ms2ger botie: my context is https://github.com/w3c/webcomponents/issues/293

[01:33:01.0000] <Ms2ger>
I have no idea what "closed" even means there

[01:33:09.0000] <kochi>
I am trying to make a automated test case, but the spec depends on an event to be "trusted", so

[01:33:30.0000] <kochi>
I was wondering any way I can make a trusted event from script.

[01:33:38.0000] <kochi>
"closed" means a closed mode shadow root.

[01:34:02.0000] <kochi>
oops, wrong reference

[01:34:07.0000] <annevk>
you can't get trusted from script

[01:34:12.0000] <kochi>
my context is https://github.com/w3c/web-platform-tests/pull/2099

[01:34:59.0000] <annevk>
kochi: you probably want to talk to jgraham but it seems that'd require some kind of web driver test

[01:35:08.0000] <kochi>
okay, so we have to use manual test to generate trusted events?

[01:35:51.0000] <kochi>
or web driver...

[01:36:15.0000] <Ms2ger>
And web driver doesn't really work yet, I don't think :/

[01:36:37.0000] <Ms2ger>
smaug____, you know if there's a test for click()'s event being untrusted in wpt?

[01:37:33.0000] <smaug____>
no idea

[01:38:01.0000] <Ms2ger>
/me goes and writes one

[01:38:52.0000] <kochi>
cool

[01:39:17.0000] <kochi>
html/editing/focus/focus-management/focus-events.html seems to assume that focus() generates focus event whose isTrusted is true.

[01:39:34.0000] <annevk>
kochi: mind filing a bug on that?

[01:39:44.0000] <kochi>
sure

[01:40:38.0000] <annevk>
kochi: it seems the HTML Standard does say that focus events are always trusted

[01:41:00.0000] <annevk>
kochi: at least, quickling going through the various algorithms focus() invokes seems to say that

[01:41:08.0000] <annevk>
kochi: so there might be bug in the HTML Standard too :-/

[01:41:46.0000] <smaug____>
focus event is trusted if the focus actually moved

[01:42:01.0000] <smaug____>
click() and focus() behave quite differently

[01:42:02.0000] <Ms2ger>
"When a user agent is required to fire a focus event named e at an element t and with a given related target r, the user agent must create a trusted FocusEvent object"

[01:42:44.0000] <annevk>
right

[01:42:48.0000] <annevk>
smaug____: o_O

[01:43:16.0000] <smaug____>
annevk: click() dispatches click event which triggers the activation

[01:43:17.0000] <annevk>
okay, kochi, apologies, ignore what I said above, and ask smaug____ instead

[01:43:51.0000] <smaug____>
focus() tries to focus some element, and focusing that element then dispatches focus event

[01:44:06.0000] <smaug____>
so the focus event is a result of focus() causing focus change

[01:45:23.0000] <kochi>
So focus event is considered "a direct result of changes to the DOM", and it is trusted.

[01:46:53.0000] <smaug____>
something like that yes. focus event is fired after some state change

[01:47:17.0000] <annevk>
wanderview: I fixed 112, anything else you want me to look at soonish?

[01:47:53.0000] <Ms2ger>
r? https://github.com/w3c/web-platform-tests/pull/2100

[01:51:09.0000] <annevk>
Ms2ger: r+

[01:52:02.0000] <smaug____>
/me would have reviewed but didn't know how

[01:52:40.0000] <annevk>
an IRC comment worked last time

[01:53:01.0000] <Ms2ger>
For something this small, it doesn't really matter

[01:53:06.0000] <smaug____>
I see

[01:53:41.0000] <kochi>
I can merge now

[01:54:09.0000] <kochi>
mm "Merge attempt failed"

[01:54:26.0000] <kochi>
ah, you did yourself

[01:54:38.0000] <Ms2ger>
I did

[02:03:55.0000] <kochi>
smaug____ annevk Ms2ger: thanks all, I replied in https://github.com/w3c/web-platform-tests/pull/2099

[02:23:18.0000] <annevk>
kochi: I recommend using https://html.spec.whatwg.org/multipage/ as definitive reference

[02:23:34.0000] <annevk>
kochi: I believe that's what both Google and Mozilla at least attempt to implement

[02:31:35.0000] <smaug____>
Indeed. I wouldn't refer to W3C's HTML5*

[02:36:22.0000] <kochi>
annevk: thanks, updated.

[02:38:01.0000] <kochi>
/me will keep in mind

[02:38:50.0000] <smaug____>
/me wonders who got the "great" idea to try to merge webapps and html wg

[04:52:46.0000] <wanderview>
annevk: can you explain what you meant in the issue by "Otherwise cross-origin to same-origin would not be covered"?

[04:53:31.0000] <MikeSmith>
annevk: as far as railroad diagrams in the URL spec, the plan is that they'd be non-normative, right?

[04:53:37.0000] <MikeSmith>
https://github.com/whatwg/url/issues/67 I mean

[04:54:47.0000] <MikeSmith>
I'm pretty certain that is the plan but I would still like to be reassured

[04:57:29.0000] <wanderview>
annevk: if its cross-origin, shouldn't all future redirect origins be considered "cross-origin" since the request origin is marked as being an opaque value?

[05:13:24.0000] <wanderview>
I commented in the bug

[05:24:14.0000] <annevk>
wanderview: say request's origin X and request's current URL's origin is Y

[05:24:31.0000] <annevk>
wanderview: then you get a redirect that also has origin Y for locationURL

[05:24:39.0000] <annevk>
wanderview: that scenario would not be covered

[05:24:53.0000] <annevk>
MikeSmith: yes

[05:25:22.0000] <annevk>
MikeSmith: normative prose, plus some kind of grammar production thingie to skim through

[05:26:01.0000] <MikeSmith>
annevk: ok, good to hear

[05:26:41.0000] <wanderview>
annevk: hmm... I have to step away... but let me think about that... I don't see how CORS flag is set in that case either

[05:29:28.0000] <annevk>
wanderview: because main fetch would invoke basic fetch with it set because current URL's origin is not same origin with request's origin

[05:30:22.0000] <wanderview>
annevk: but what about origin X redirect to Y redirect to X... the second X should be considered cross-origin, right?

[05:30:49.0000] <wanderview>
where is CORS flag set in that chain in time to mark the opaque origin?

[05:32:38.0000] <wanderview>
I think CORS flag is set after the first redirect (but too late to set the opaque origin)

[05:34:55.0000] <wanderview>
but I guess maybe thats ok since the opaque origin is set on next redirect before evaluating main fetch again

[05:38:14.0000] <nox>
annevk: Does the generator for that diagram syntax already exist?

[06:23:26.0000] <annevk>
nox: yeah, part of Bikeshed

[06:23:36.0000] <nox>
annevk: Nice.

[06:23:36.0000] <annevk>
wanderview: right

[08:36:24.0000] <wanderview>
JakeA++ for "poomorphism"

[08:36:31.0000] <JakeA>
:D

[09:46:18.0000] <igrigorik>
annevk: ping :)

[09:48:36.0000] <annevk>
igrigorik: hey

[09:48:44.0000] <igrigorik>
https://fetch.spec.whatwg.org/#concept-request - seems to be missing frame-src.. is that intentional?

[09:49:15.0000] <annevk>
igrigorik: yeah, the idea is that CSP can look at request's client

[09:49:48.0000] <annevk>
igrigorik: it says as much underneath the table

[09:50:57.0000] <igrigorik>
ah, figures. that makes sense - thanks.

[09:55:15.0000] <igrigorik>
annevk: back to our favorite topic of preload :) ... Looking at this new table, I think I can map preload's "as" to {initiator: '', type: as-value, destination: 'subresource'}. that would make preload fetches subject to all the right CSP policies based on specified as type.

[09:55:33.0000] <igrigorik>
annevk: does that make sense? anything I'm overlooking?

[09:55:48.0000] <annevk>
yes, security

[09:55:48.0000] <botie>
security is, like, still what we have the address bar for, navigating based on hacking the URL space not so much

[09:56:05.0000] <annevk>
heh

[09:56:41.0000] <annevk>
igrigorik: it needs to be a new thing, but what would be good to see first is preload's processing model in terms of Fetch

[09:56:54.0000] <annevk>
I don't think we have that yet

[09:57:17.0000] <annevk>
mkwst said as much anyway in the issue were we added initiator/destination/type

[09:59:26.0000] <igrigorik>
annevk: preload is <link>, the processing model for which is in the HTML spec itself (https://html.spec.whatwg.org/multipage/semantics.html#the-link-element). I've intentionally stayed away from duplicating that..

[10:01:10.0000] <annevk>
igrigorik: I don't understand, HTML doesn't define what preload does

[10:02:16.0000] <annevk>
igrigorik: see e.g., what HTML defines for "stylesheet"

[10:02:32.0000] <annevk>
igrigorik: and how that further defers to "creating a stylesheet" etc. which is defined elsewhere

[10:12:38.0000] <igrigorik>
annevk: right but that's once response is received. by default all of the link's use http://www.w3.org/TR/html5/document-metadata.html#concept-link-obtain to obtain the resource, which is what current preload spec is relying on as well. are you suggesting I pull that out and explicitly define it within preload spec?

[10:13:27.0000] <annevk>
Where is it stated that all use that?

[10:13:53.0000] <annevk>
Also, where is it stated that an <img> fetch pulls something out of the preload cache?

[10:14:10.0000] <annevk>
And where in fetch that cache lookup happens and how?

[10:17:14.0000] <annevk>
igrigorik: anyway, as far as I know you do need to have a section similar to the "stylesheet" section HTML has

[10:17:33.0000] <annevk>
igrigorik: and you need a section that monkey patches Fetch and a section that defines the preload cache

[10:18:08.0000] <annevk>
igrigorik: and then you have a feature that's maybe hopefully defined from first principles

[10:19:23.0000] <igrigorik>
annevk: perhaps I'm reading it wrong but, the main definition of <link> specifies steps 'to obtain the resource', and none of the other sections (e.g. stylesheet) elaborate further.. e.g. stylesheet specifies 'when to obtain' and what to do 'once obtained'. Hence my comment about all rel's relying on same steps to fetch.

[10:21:09.0000] <igrigorik>
annevk: re, section: most of that content is already there in the preload spec, perhaps I could shuffle it a bit to make it more clear. the one thing that's unclear to me is whether I now should define my own 'obtain resource' algorithm to work with the new Fetch.. such that I can set initiator/type/destination.

[10:22:22.0000] <annevk>
igrigorik: right, once you define https://html.spec.whatwg.org/multipage/semantics.html#linkTypes you get the obtain the resource for free, but you still need to define what the UA needs to do with the obtained resource, as the "stylesheet" rel does, for instance

[10:23:26.0000] <igrigorik>
annevk: yes, fair enough. that's where I need to define the 'preload cache' or some such.

[10:23:37.0000] <annevk>
igrigorik: and yeah, since you want something different you might need your own obtain the resource algorithm... (though HTML will be modified to use Fetch in due course, you probably still want something slightly different here)

[10:23:42.0000] <annevk>
igrigorik: yup

[10:24:39.0000] <annevk>
igrigorik: so preload is in https://w3c.github.io/preload/

[10:24:45.0000] <annevk>
igrigorik: where are prefetch/prerender?

[10:25:13.0000] <igrigorik>
annevk: https://w3c.github.io/resource-hints < these are speculative and have different processing model, which is why we split them into separate spec

[10:25:48.0000] <annevk>
igrigorik: ait

[10:26:13.0000] <annevk>
whoa

[10:26:32.0000] <annevk>
igrigorik: without the trailing slash you end up on http://

[10:26:46.0000] <annevk>
igrigorik: that seems like a serious GitHub bug

[10:27:13.0000] <igrigorik>
annevk: oh wow, that's a.. fun one =/

[10:28:43.0000] <annevk>
I'll let them know

[10:29:32.0000] <igrigorik>
annevk: re, preload + obtain the resource: ok, it sounds like I should define my own in preload. Drilling in on that specifically, in there when I initialize the request I'd set the new fetch request properties to {initiator: '', type: as-value, destination: 'subresource'} -- ya?

[10:30:00.0000] <igrigorik>
annevk: where 'as-value' is one of https://fetch.spec.whatwg.org/#concept-request-type

[10:30:13.0000] <annevk>
yes, except you cannot overwrite type for security reasons

[10:30:18.0000] <annevk>
most likely

[10:30:34.0000] <annevk>
so we'd have to introduce a new axis that's the same as type except not used by CSP

[10:30:47.0000] <annevk>
gotta go

[10:34:44.0000] <igrigorik>
annevk: hmm, but in this case I do want these fetches to be subject to relevant CSP policies. For preload in particular I think it should be fine to set those: fetch initiated by preload is subject to set type+CSP policies, and there is no way to consume the response directly -- that goes into preload cache (to be defined :)). To consume it you need another

[10:34:44.0000] <igrigorik>
fetch to retrieve it from the cache, which will enforce its CSP rules as well.


2015-08-21
[22:17:58.0000] <annevk>
igrigorik: GitHub was not interested in fixing the redirect issue because HTTPS support is not supported

[22:18:15.0000] <annevk>
igrigorik: I pointed out it clearly works, just not the redirects, no reply yet...

[22:22:48.0000] <annevk>
igrigorik: you might be right about CSP, I guess once the processing model is clear that should be easy enough to evaluate

[22:23:39.0000] <annevk>
igrigorik: I'm still worried that you can download something using img-src and if the cache doesn't store that you can then use it for script-src, but who knows

[22:35:12.0000] <MikeSmith>
annevk: did you take a look at https://github.com/zaach/jsonlint

[22:36:20.0000] <annevk>
MikeSmith: briefly

[22:36:23.0000] <annevk>
MikeSmith: did you listen to http://mozaic.fm/post/108439721723/14-whatwg?

[22:36:40.0000] <MikeSmith>
eh

[22:36:42.0000] <MikeSmith>
what is this

[22:36:50.0000] <annevk>
MikeSmith: I don't have npm I think

[22:36:52.0000] <MikeSmith>
oh it's Yakura-san, and Hiro

[22:37:07.0000] <MikeSmith>
annevk: well you should have npm...

[22:37:19.0000] <MikeSmith>
this seems like a good use case for setting it up

[22:38:22.0000] <annevk>
I really dislike software with tons of dependencies that infects all kinds of directories and I can never be sure whether it's gone from the OS or how it actually works

[22:38:25.0000] <annevk>
But I guess...

[22:39:20.0000] <MikeSmith>
yeah sadly that sorta describes npm pretty well

[22:39:43.0000] <MikeSmith>
but if you have to work with python you probably have had to use pip or whatever

[22:39:49.0000] <MikeSmith>
anyway

[22:40:08.0000] <MikeSmith>
wow this podcast is pretty interesting, even just from looking at the agenda, and listening to the first few minutes

[22:40:55.0000] <annevk>
MikeSmith: yes, I have the same problem with Python :-)

[02:48:41.0000] <annevk>
Yay, down to two open issues for https://encoding.spec.whatwg.org/

[02:48:48.0000] <annevk>
And neither is something I can address

[02:50:40.0000] <MikeSmith>
"Filing this issue so hopefully one day a browser can experiment and figure out if this is doable."

[02:50:56.0000] <MikeSmith>
kind like putting a message in a bottle and throwing it into the ocean

[02:52:04.0000] <annevk>
hah

[02:52:17.0000] <annevk>
So hsivonen expressed interest in doing it at some point, that's why it's not completely dead

[02:52:43.0000] <annevk>
But it wasn't worth keeping the original bug open for that and therefore keep having the "legacy open bugs" link at the top of the Standard

[02:55:30.0000] <MikeSmith>
what blocks the other bug?

[02:55:41.0000] <MikeSmith>
needs further implementor feedback?

[03:08:57.0000] <annevk>
MikeSmith: yeah, need to figure out if it's actually feasible

[03:09:30.0000] <annevk>
I'm pretty happy to have resolved all bugs around encoders/decoders though

[03:09:34.0000] <annevk>
Was less work than expected

[04:17:41.0000] <annevk>
JakeA: how is progress on promise.abort() going?

[04:18:14.0000] <JakeA>
annevk: halted :( been given tight deadlines for other things, and I think Domenic is busy too

[04:18:33.0000] <JakeA>
Domenic: you got any spare time coming up?

[04:18:52.0000] <annevk>
If he does, perhaps IDL can finally get some love

[04:22:08.0000] <annevk>
JakeA: do you know balfanz from https://github.com/whatwg/fetch/issues/30?

[04:22:32.0000] <annevk>
JakeA: I'd like to help them out, but communication seems to be going rather poorly

[04:24:27.0000] <JakeA>
annevk: I don't know them. Not familiar with token binding at all, but will try to go through that doc

[04:31:31.0000] <annevk>
JakeA: don't worry about it if you have deadlines, this has been going on for a while now

[04:32:20.0000] <JakeA>
Maybe in a couple of weeks I'll feel more in control and wonder what I was panicking about. That's usually how it goes.

[04:34:21.0000] <annevk>
wanderview: where did the fetch() tests go from Chrome?

[05:32:37.0000] <annevk>
MikeSmith: https://www.w3.org/Bugs/Public/show_activity.cgi?id=27502 last activity looks suspect

[06:20:30.0000] <wanderview>
annevk: we have not imported them yet https://bugzilla.mozilla.org/show_bug.cgi?id=1186106

[06:28:55.0000] <Huvet>
can I ask questions about html5lib here?

[06:29:05.0000] <Huvet>
(python implementation)

[06:29:27.0000] <Ms2ger>
Sure

[06:30:47.0000] <Huvet>
I would like to write a small script that parses a html snippet, removes all style and script tags, and then serializes it out as a string with HTML again. This is how far I've come: http://dpaste.com/3CD5V55

[06:31:02.0000] <Huvet>
but when serializing I get the error: AttributeError: 'TreeWalker' object has no attribute 'getroot'"

[06:31:24.0000] <Ms2ger>
Ah, the mess of python tree apis :/

[06:32:00.0000] <Huvet>
yeah, if anyone has better ideas of how to get this done I'm all ears

[06:33:51.0000] <Ms2ger>
I wish

[06:34:08.0000] <Huvet>
the question becomes: how do i serialize a lxml tree?

[06:35:45.0000] <Ms2ger>
I wish I could say something useful, but I always have similar issues

[06:37:51.0000] <MikeSmith>
annevk: Thanks, disabled that bugzilla account

[06:38:19.0000] <Huvet>
I did it! http://dpaste.com/0PN6E5F

[07:51:20.0000] <wanderview>
annevk: is there any way for the body of an opaqueredirect to be actually used?  its not exposed to script and it seems the UA won't look at it

[08:18:07.0000] <Domenic>
JakeA: no real spare time, but I've been trying to figure out Q4 goals and wondering if cancelable promises should be one of them...

[08:51:43.0000] <annevk>
wanderview: nope

[09:04:43.0000] <igrigorik>
annevk: re, Github.. wow, really? That's not like them. I might have to resort to public shaming.

[09:06:34.0000] <annevk>
igrigorik: I got another follow up

[09:06:42.0000] <annevk>
igrigorik: the problem is their CDN

[09:07:12.0000] <annevk>
igrigorik: which they have said before, so basically HTTPS is only partially supported...

[09:07:22.0000] <igrigorik>
when in doubt, always blame the CDN! Fastly? We can bug them too :)

[09:07:42.0000] <annevk>
igrigorik: but yeah, shaming might work, at some point they have to start offering HSTS et al

[09:07:50.0000] <annevk>
igrigorik: they didn't mention which CDN, could be

[09:08:49.0000] <igrigorik>
github.io maps to github.map.fastly.net, so it is Fastly. did they say what the issue actually is?

[09:09:09.0000] <JakeA>
Domenic: might be an idea, my end of year is looking messy :(

[09:09:16.0000] <annevk>
igrigorik: just that they're not in control

[09:09:46.0000] <annevk>
igrigorik: could shame Fastly asking when they'll finally properly support github.io

[09:09:59.0000] <igrigorik>
who are you talking to at Github? Any chance you can cc me and I can loop in the fastly crew?

[09:10:27.0000] <annevk>
was an exchange with someone from support

[09:10:57.0000] <igrigorik>
hmm, ok, I'll kick off a separate thread then

[09:11:01.0000] <annevk>
I forwarded you an email

[09:11:27.0000] <igrigorik>
cool, thanks.

[09:41:53.0000] <terinjokes>
anyone know whom i should talk to at w3 about upgrading the OpenSSL version used for their Feed Validation Service?

[09:42:20.0000] <Ms2ger>
systeam@?

[09:43:10.0000] <annevk>
and MikeSmith most likely

[09:43:25.0000] <terinjokes>
people have been reporting the bug to the list since at least last October

[09:43:52.0000] <annevk>
there's also #sysreq on irc.w3.org

[09:44:05.0000] <ccardona-work>
Good morning and happy friday WHATWG crew 😎✌🏽

[09:44:50.0000] <terinjokes>
ccardona-work: morning

[09:44:56.0000] <terinjokes>
annevk: thanks, i'll try there

[09:45:25.0000] <annevk>
ccardona-work: good evening!

[09:45:38.0000] <ccardona-work>
annevk: :) Did I at least get the Friday bit correct?

[09:45:50.0000] <annevk>
ccardona-work: yes!

[09:45:56.0000] <ccardona-work>
score

[09:46:00.0000] <Ms2ger>
Not in Tokyo ;)

[09:46:09.0000] <annevk>
Yeah, seems MikeSmith is ahead of us

[09:46:12.0000] <ccardona-work>
:)

[09:46:15.0000] <annevk>
and hopefully asleep

[09:46:18.0000] <ccardona-work>
MikeSmith: is always ahead of us :)

[09:46:30.0000] <ccardona-work>
Thoughtleader && time leader

[09:46:43.0000] <igrigorik>
annevk: based on our chat yesterday: https://rawgit.com/w3c/preload/processing/index.html#processing - see 'obtain' section.. wdyt?

[09:48:31.0000] <annevk>
igrigorik: seems to be heading in the right direction

[09:48:34.0000] <igrigorik>
there are other details to work out there, but first want to resolve the as -> type mapping..

[09:50:01.0000] <igrigorik>
as written, <link rel=preload as=image href=thing.jpg> would be initialized with Request.type=image and will be subject to image-src.

[09:51:02.0000] <annevk>
igrigorik: so... say I have CSP img-src: example.com elsewhere.com; script-src: elsewhere.com

[09:51:18.0000] <annevk>
igrigorik: <link rel=preload as=image href=example.com>

[09:51:24.0000] <annevk>
example.com redirects to elsewhere.com

[09:51:40.0000] <annevk>
I then do <script src=elsewhere.com>, does it get the preloaded resource?

[09:52:55.0000] <igrigorik>
annevk: no, it shouldn't.. when you request it via <script> the request.type won't match, since that was set to image.

[09:53:08.0000] <annevk>
igrigorik: so you store the type in the preload cache?

[09:54:30.0000] <igrigorik>
annevk: yeah, we'll need that to get the plumbing right.. afaik, SW caches api does that already?

[09:55:10.0000] <annevk>
the Cache API stores the Request, but it doesn't use everything when matching

[09:55:26.0000] <annevk>
it won't use type for instance

[09:56:31.0000] <igrigorik>
I see, then yeah we might need to sort out that plumbing and include that check. As I noted later in that doc the 'preload/fetch cache' is a bit of a magical thing in the browsers today.. we need to figure out how to spec-explain it :)

[09:57:16.0000] <annevk>
Perhaps you can reuse some stuff from the CORS cache

[09:57:48.0000] <annevk>
It's not that hard to define a cache in prose, you just need to be clear about when writing and reading happens and what happens for misses and such

[09:58:07.0000] <annevk>
And the conditions of course, such as whether type needs to match :-)

[10:00:08.0000] <annevk>
https://twitter.com/jacobrossi/status/634768416088424448 this is great

[10:00:43.0000] <annevk>
igrigorik: why do you have nigiri as favicon? :-)

[10:01:16.0000] <igrigorik>
thanks for the tip, I'll take a look.. On that note though, seems like the lookup logic should live in Fetch? Since, implicitly what we have today is: prefetch cache -> HTTP cache -> network

[10:01:22.0000] <annevk>
ooh, that's from rawgit.com

[10:01:30.0000] <igrigorik>
yeah :)

[10:01:48.0000] <annevk>
igrigorik: yeah, the lookup needs to happen in Fetch someplace

[10:02:04.0000] <igrigorik>
you're looking at a branch.. I haven't landed those updates yet. wanted to get a sanity check first.

[10:02:06.0000] <annevk>
igrigorik: ideally just a simple hook where I invoke something in preload

[10:02:30.0000] <annevk>
igrigorik: and preload returns me a response, and if I have a response I simply don't go to the network (or the service worker?)

[10:03:03.0000] <igrigorik>
annevk: yep, makes sense.. since SW could have served the prefetch response ^_^

[10:03:14.0000] <annevk>
right

[10:05:08.0000] <igrigorik>
annevk: Ok, well, sounds like the 'as' bits are in a reasonably good place. I'll land that as a start and we can iterate on the cache bits to define all the matching + hooks semantics.

[10:18:15.0000] <annevk>
/me curses blob URLs

[12:03:27.0000] <annevk>
nox: is https://twitter.com/nokusu/status/634686055548100608 your work?

[12:03:32.0000] <annevk>
nox: sounds pretty cool

[12:03:40.0000] <nox>
annevk: That's me yes.

[12:03:54.0000] <nox>
@RustLang RT'd it, I keep getting notifications now, hah.

[12:09:40.0000] <annevk>
nox: it's kind of cool that even encoding/decoding can use this stuff

[14:24:23.0000] <jamesr___>
convert ASCII to UTF-8

[14:24:25.0000] <jamesr___>
?

[14:24:29.0000] <jamesr___>
is that not memcpy() ?

[14:26:36.0000] <jamesr___>
oh, the input bytes are maybe ASCII but you still have to check?

[16:05:39.0000] <MikeSmith>
terinjokes: I would guess that whatever version of openssl running on that host is whatever security-patched version is currently in debian stable

[16:58:29.0000] <TabAtkins>
annevk: I'm rewriting the serializer to be more opinionated about formatting (and as a result, no longer strew bonus newlines everywhere).

[16:58:47.0000] <TabAtkins>
Since you care about the output, what do you prefer in the situation where a block element contains only inline content:

[16:59:16.0000] <TabAtkins>
(a) the block's start tag, content, and end tag are all on the same line, or

[16:59:34.0000] <TabAtkins>
(b) the block's start tag is on one line, the content is indented on the next line, and the end tag is on a third line


2015-08-22
[17:06:44.0000] <gsnedders>
nox: BTW, isn't it still the case that SSE2 is *way* quicker with aligned reads? Do you not want to check input is aligned first?

[17:07:28.0000] <nox>
gsnedders: I guess I could.

[17:07:37.0000] <nox>
jamesr___: Yeah, have to check.

[17:07:59.0000] <nox>
gsnedders: I'm not sure the simd crate handle that though.

[17:08:55.0000] <jamesr___>
sse2 instructions generally require 16 byte alignment or they fault

[17:09:21.0000] <jamesr___>
or some do, it hink

[17:11:30.0000] <nox>
Alignement matters only for load and store.

[17:12:38.0000] <nox>
gsnedders: In general when handling multibyte encodings, you can't stay aligned during the whole reading anyway.

[17:13:08.0000] <nox>
gsnedders: Maybe through very fancy shuffling to handle continuation bytes across chunks, but I'm not sure it's worth it.

[17:15:00.0000] <Domenic>
hmm how did nobody else catch that ASCII to UTF8 is a memcpy...

[17:16:14.0000] <jsbell>
I was wondering about that; isn't the code actually UTF-8 to ASCII, which requires range validation?

[17:17:23.0000] <jsbell>
(I glanced at the code only enough to realize I didn't care that much...)

[17:17:32.0000] <Domenic>
yeah same...

[17:17:52.0000] <Domenic>
"ASCIIEncoder" implies you are right

[17:34:52.0000] <jamesr___>
"maybe ASCII" -> utf8 is not a memcpy, if you want to map bytes with the high bit set to an error value in some way

[23:08:02.0000] <annevk>
TabAtkins: same line

[23:08:27.0000] <annevk>
TabAtkins: also, I prefer <li><p>Text to be on one line if <li> only contains a single <p>

[23:09:36.0000] <annevk>
jamesr___: yeah, seems to be about checking invalid bytes

[00:54:15.0000] <nox>
Domenic: UTF-8 is compatible with US-ASCII.

[00:54:31.0000] <nox>
Domenic: Not all bytes are US-ASCII code points.

[00:54:58.0000] <nox>
So no, decoding ASCII into UTF-8 isnt memcpy.

[01:10:01.0000] <Ms2ger>
What

[01:10:22.0000] <Ms2ger>
If it's actually ASCII, there's no bytes with the high bit set, so it is a memcpy

[01:11:14.0000] <nox>
Ms2ger: In the context of rust-encoding, you don't know if input is actually in said encoding.

[01:11:27.0000] <nox>
Ms2ger: That's why the UTF-8 decoder isn't a noop either.


2015-08-23
[18:26:29.0000] <MikeSmith>
botie, tell othermaciej Wondering if you have any opinion on implementation of Subresource Integrity https://bugs.webkit.org/show_bug.cgi?id=148363

[18:26:29.0000] <botie>
will do

[18:30:16.0000] <MikeSmith>
mkwst: Lemme know if you're interested in getting your specs set up for "auto-publishing", such that you can publish a new version at, e.g., https://www.w3.org/TR/SRI/ every time you push any commit to the github repo

[18:30:35.0000] <MikeSmith>
or short of that, publish to https://www.w3.org/TR/SRI/ whenever else you want

[18:31:48.0000] <MikeSmith>
because it's triggered by pushes to the gh-pages branch

[18:32:41.0000] <MikeSmith>
or actually I think you could alternatively trigger it off pushes to any arbitrary branch you want to trigger it off

[18:34:49.0000] <MikeSmith>
I think it may not yet be set up optimally for the case of a repo like https://github.com/w3c/webappsec that has multiple specs

[18:36:01.0000] <MikeSmith>
but I'm sure we could make any changes needed to system to get it working well for webappsec specs, if you or others wanted to use it

[18:40:37.0000] <MikeSmith>
..

[18:41:25.0000] <MikeSmith>
hmm, does Apple actually have anybody in the WebAppSec WG?

[23:21:27.0000] <wk96>
And nothing happend


2015-08-24
[22:28:50.0000] <botie>
othermaciej, at 2015-08-23 01:26 UTC, MikeSmith said: Wondering if you have any opinion on implementation of Subresource Integrity https://bugs.webkit.org/show_bug.cgi?id=148363

[22:29:39.0000] <othermaciej>
MikeSmith: We are interested and looking into it, no firm commitment.

[22:31:13.0000] <MikeSmith>
othermaciej: ok, thanks

[22:32:06.0000] <MikeSmith>
othermaciej: as far as the WebAppSec group in general, it seems like it's turned out to an exceptionally productive and useful group

[22:32:34.0000] <MikeSmith>
which may not be saying much relative to some other W3C groups

[22:33:22.0000] <MikeSmith>
so even in absolute terms it seems like a highly productive place to get some Web-security-related problems solved

[22:47:43.0000] <othermaciej>
I don't know if this has happened yet but we were planning to put people from both WebKit and some Apple security teams in WebAppSec

[22:51:13.0000] <MikeSmith>
othermaciej: ah cool

[22:51:29.0000] <MikeSmith>
genuinely glad to hear that

[22:51:45.0000] <othermaciej>
We are pretty positive on what WebAppSec has been coming up with, as a matter of general sentiment.

[22:54:15.0000] <MikeSmith>
yeah it's an encouraging group

[22:55:26.0000] <MikeSmith>
they have a very good chair and one particularly good focused-on-just-getting-stuff-done editor

[22:55:45.0000] <MikeSmith>
it all comes down to individual people in the end

[22:55:57.0000] <MikeSmith>
regardless of where the work takes place

[22:57:58.0000] <MikeSmith>
anyway, I think the additional active involvement will definitely help a lot too

[02:07:48.0000] <zcorpan>
hello everyone

[02:10:52.0000] <hasather>
zcorpan: hi!

[02:11:05.0000] <zcorpan>
sup hasather

[02:12:43.0000] <Ms2ger>
Aloha

[02:13:12.0000] <Ms2ger>
Wanna review https://github.com/w3c/web-platform-tests/pull/2082 so I don't have to?

[02:14:44.0000] <zcorpan>
my first day and you give me document.write? why thank you

[02:16:01.0000] <Ms2ger>
It has document.write?

[02:16:13.0000] <Ms2ger>
Then I definitely want someone else to do it :)

[02:19:56.0000] <Ms2ger>
zcorpan, actually, while I have you here...

[02:22:41.0000] <Ms2ger>
Apparently Opera wrote a bunch of reftests for css21 tests back in the day, and lastorset released the references, but not which tests they were references for, any chance you could find that out? :)

[02:25:03.0000] <zcorpan>
Ms2ger: possibly. got a link to PR?

[02:25:11.0000] <Ms2ger>
https://github.com/operasoftware/presto-testo/commit/a0acfbef13a3f8cae67cc7145216d31b67aa8eb4

[02:27:09.0000] <zcorpan>
"There is an old database matching them to tests, but we're waiting to gain access."

[02:28:05.0000] <zcorpan>
/me lunch

[02:59:44.0000] <roc>
"my first day"?

[03:00:45.0000] <Ms2ger>
He's been on vacation for a while

[03:00:54.0000] <Ms2ger>
We haven't poached him, sadly :)

[03:21:37.0000] <MikeSmith>
welcome back zcorpan

[03:43:10.0000] <zcorpan>
Ms2ger: reviewed

[03:47:59.0000] <nox>
Ms2ger: Upstream'd test btw.

[04:01:19.0000] <zcorpan>
/me -> Paris

[04:08:14.0000] <Ms2ger>
nox, yeah, I saw, thank you

[04:12:14.0000] <nox>
Ms2ger: I was so confused.

[04:12:24.0000] <nox>
Ms2ger: "Where is css21_dev? Where are the HTML files?"

[04:13:25.0000] <Ms2ger>
Yeah :/

[05:42:28.0000] <annevk>
ooh, zcorpan is back, but not on IRC

[05:42:41.0000] <annevk>
maybe finally we can start specifying when synchronous layout happens

[06:12:04.0000] <smaug____>
hmm, where is .style property defined

[06:12:11.0000] <smaug____>
I thought CSSOM but no

[06:12:47.0000] <smaug____>
oh, maybe I'm looking at wrong spec

[06:12:53.0000] <tantek>
smaug____: well this is the attribute part: http://www.w3.org/TR/css-style-attr/

[06:13:12.0000] <annevk>
smaug____: https://drafts.csswg.org/cssom/#the-elementcssinlinestyle-interface

[06:14:39.0000] <smaug____>
does anything define at which point the DOM attribute is updated

[06:14:49.0000] <smaug____>
when .style.foo is set

[06:15:30.0000] <annevk>
smaug____: I don't think so

[06:16:00.0000] <annevk>
smaug____: actually, it seems CSSOM does

[06:16:13.0000] <annevk>
smaug____: "Mutating the declarations must set the style content attribute on the context object to the serialization of the declarations. If the style content attribute is set, changed or removed, the declarations must be updated as appropriate."

[06:16:28.0000] <annevk>
smaug____: bit too hand-wavy for my taste, but it is there

[06:17:30.0000] <smaug____>
indeed

[06:17:51.0000] <smaug____>
the case I'm wondering is .style.foo = "some invalid value"

[06:18:10.0000] <annevk>
If zcorpan was actually on IRC he could go and clarify...

[06:20:40.0000] <MikeSmith>
annevk: zcorpan is apparently on the way to Paris atm

[06:21:07.0000] <MikeSmith>
per earlier comment here

[06:21:12.0000] <MikeSmith>
about 2 hours ago

[06:26:13.0000] <MikeSmith>
annevk: could get botie to leave a comment for him

[06:36:10.0000] <TabAtkins>
annevk: I just pushed the serializer changes. Expect a huge output diff.

[06:37:48.0000] <MikeSmith>
hey TabAtkins about Chris Lord's Navigation Transitions spec

[06:37:58.0000] <MikeSmith>
is there plans for that in the CSS WG?

[06:38:07.0000] <MikeSmith>
as far as taking it up as a deliverable

[06:38:08.0000] <TabAtkins>
I have plans to do review on it this week.

[06:38:15.0000] <MikeSmith>
ok

[06:38:19.0000] <TabAtkins>
We haven't discussed taking it as a CSSWG deliverable yet.

[06:38:58.0000] <MikeSmith>
other Chrome team interest in possibly impelementing it?

[06:39:30.0000] <MikeSmith>
or maybe that th's pending your review

[06:39:49.0000] <TabAtkins>
We've discussed it a bit, but aren't convinced yet that is hitting the important use-cases properly.

[06:40:05.0000] <TabAtkins>
This'll show up in my review, yeah

[06:41:32.0000] <MikeSmith>
ok cool

[07:17:47.0000] <philipj>
TabAtkins: Did you just change something about whitespace in Bikeshed?

[07:18:23.0000] <philipj>
TabAtkins: I now get whitespace before commas where it shouldn't be, and other spurious whitespace changes

[07:18:28.0000] <TabAtkins>
Yup, committed a big serialization change

[07:18:34.0000] <TabAtkins>
To make whitespace less stupid

[07:19:01.0000] <TabAtkins>
Oh weird, file an issue on me with some example text

[07:19:45.0000] <TabAtkins>
Ohhhh I bet I know what I did wrong

[07:19:50.0000] <TabAtkins>
Will fix tonight

[07:26:52.0000] <philipj>
TabAtkins: Should I still file a bug?

[07:30:21.0000] <TabAtkins>
Yeah, so u don't forget

[07:30:23.0000] <TabAtkins>
I

[07:33:30.0000] <philipj>
TabAtkins: https://github.com/tabatkins/bikeshed/issues/464

[10:33:14.0000] <ccardona-work>
Good morning/afternoon WHATWG crew o/

[12:27:01.0000] <zcorpan>
TabAtkins: help? FATAL ERROR: The argument autolink 'other' for 'DOMPoint/fromPoint()' has too many possible overloads to disambiguate. Please specify the full method signature this argument is for. https://drafts.fxtf.org/bikeshed/geometry/

[12:38:16.0000] <wanderview>
Domenic: stupid question... does the Promise constructor call the provided callback synchronously or in a microtask?

[12:38:23.0000] <Domenic>
wanderview: sync

[12:38:46.0000] <wanderview>
thanks... I didn't see anything about the constructor in https://promisesaplus.com/

[12:39:07.0000] <Domenic>
wanderview: yeah, that's just the .then method for promise libraries. ES2015 promise spec is in the ES spec.

[12:39:29.0000] <Domenic>
Promises/A+ is somewhat historical at this point, I'd say?

[12:39:43.0000] <wanderview>
I just searched for "promise spec" and it was the first link

[12:40:00.0000] <Domenic>
huh, will you look at that

[12:40:05.0000] <Domenic>
maybe might be worth adding a link at the top...

[12:41:45.0000] <wanderview>
wow... the es spec thing to dynamically keep the header at the top is really buggy in FF nightly

[12:41:51.0000] <wanderview>
wonder if it could just use position:sticky

[12:41:56.0000] <wanderview>
or maybe it already is

[12:44:16.0000] <TabAtkins>
zcorpan: Will check on it. Are you referring to an argument via autolinking?

[12:45:19.0000] <zcorpan>
TabAtkins: i don't know what part it's complaining about. i have a <dfn> that mentions the argument, but other than that dunno

[12:45:57.0000] <Domenic>
wanderview: yeah I am pretty sure it does use position: sticky

[12:50:12.0000] <wanderview>
Domenic: hmm... now I can't duplicate the glitching

[12:50:16.0000] <wanderview>
oh well

[12:50:32.0000] <Domenic>
nightly ¯\_(ツ)_/¯

[12:51:57.0000] <wanderview>
aha!  caught it https://www.dropbox.com/s/oizffofxdfgoypb/Screenshot%202015-08-24%2015.51.42.png?dl=0


2015-08-25
[19:42:22.0000] <MikeSmith>
Firefox tail in Firefox logo seems to have gotten more firey recently

[00:12:07.0000] <zcorpan>
annevk: filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=29083

[00:13:28.0000] <annevk>
cool

[00:18:03.0000] <zcorpan>
https://codereview.chromium.org/1154373005/ looks like good news

[00:23:04.0000] <MikeSmith>
zcorpan: except, it seems there haven't been any movement in that review in 2 months

[00:26:27.0000] <zcorpan>
MikeSmith: it's committed, no?

[00:32:35.0000] <Ms2ger>
Is it? That review tool is awful at actually communicating anything to the uninitiated

[00:34:44.0000] <MikeSmith>
oh yeah maybe I just missed the fact that it was committed

[00:35:13.0000] <MikeSmith>
but also, what Ms2ger said

[00:36:09.0000] <MikeSmith>
anyway, it's good news for sure

[00:36:44.0000] <MikeSmith>
/me didn't mean to be the wet blanket

[00:46:28.0000] <jgraham>
Well the review tool does seem to put (Closed) in the title and the last comment is from the commit bot, so I think that aspect could be less clear. I have never heard anyone say they actually like that review tools though. At least not anyone who used another review tool.

[00:49:13.0000] <jgraham>
OTOH we are still getting requests rom Chromium engineers to make tests work over file:// so something is clearly wrong still

[00:53:57.0000] <annevk>
jgraham: it seems those engineers are not informed about Chromium moving to a stricter origin policy for file URLs

[00:55:13.0000] <jgraham>
Well I think a lot of their tests rely on the current behaviour, so GLWT, I guess

[00:56:01.0000] <jgraham>
But my concern was more that no one has communicated how to run tests using wptserve or, better yet, constructed a coherent system where all wpt tests are run in the same way

[01:15:12.0000] <MikeSmith>
/me discovers https://developer.mozilla.org/en-US/docs/Template:SpecName and finds that it looks pretty thorough and up to date

[01:18:43.0000] <zcorpan>
MikeSmith: except for CORS :-)

[01:18:54.0000] <annevk>
and all the links lacking HTTPS

[01:19:06.0000] <annevk>
and "DOM4"

[01:22:26.0000] <jgraham>
annevk: It's a wiki? :)

[01:23:19.0000] <annevk>
jgraham: can't 386 all the things

[01:24:14.0000] <hober>
but we *can* complain about all the things

[01:26:14.0000] <annevk>
hober: or memeify

[01:29:27.0000] <MikeSmith>
ok, I put together a MDN article on Subresource Integrity https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity

[01:30:02.0000] <MikeSmith>
and I already spent far more time on it than I should have, so anybody else feel free to "improve" it

[01:30:50.0000] <annevk>
MikeSmith: you haven't defined fetch(url, {integrity: ...}) it seems

[01:31:04.0000] <annevk>
MikeSmith: might want to mention it in #mdn on Mozilla's IRC

[01:31:24.0000] <MikeSmith>
yeah will send a heads-up there

[01:37:14.0000] <tantek>
nicely done MikeSmith

[01:41:53.0000] <MikeSmith>
annevk: so has that whole "Modifications to Fetch" monkey-patch in the SRI spec be superseded by it actually having been folded into the Fetch spec now?

[01:41:56.0000] <MikeSmith>
tantek: thanks

[01:42:22.0000] <annevk>
MikeSmith: there's an open PR that removes it

[01:42:39.0000] <annevk>
MikeSmith: Fetch already has it included

[01:42:47.0000] <MikeSmith>
ah ok

[01:53:58.0000] <annevk>
/me could use some help on https://github.com/whatwg/url/issues/62#issuecomment-134530442

[01:54:06.0000] <annevk>
with*

[02:03:31.0000] <MikeSmith>
annevk: btw https://w3c.github.io/webappsec/specs/subresourceintegrity/#does-varresponsevar-match-varmetadatalistvar

[02:03:50.0000] <annevk>
MikeSmith: seems broken?

[02:03:51.0000] <MikeSmith>
...is a link to the SRI spec that I found in the Fetch spec

[02:04:08.0000] <annevk>
MikeSmith: oh, I guess they changed links then, pretty sure I tested it

[02:04:08.0000] <MikeSmith>
annevk: yeah seems like a Bikeshed problem

[02:04:16.0000] <MikeSmith>
ah ok

[02:04:36.0000] <MikeSmith>
the "varresponsevar" part looks wrong though

[02:05:07.0000] <MikeSmith>
like, <var> markup crept into the anchor

[02:05:37.0000] <TabAtkins>
That's... not a Bikeshed spec.

[02:05:55.0000] <annevk>
yeah, they have something weird

[02:06:03.0000] <annevk>
ReSpec with markdown

[02:06:15.0000] <MikeSmith>
oh ..

[02:06:24.0000] <MikeSmith>
well they seem to have fixed it https://w3c.github.io/webappsec/specs/subresourceintegrity/#does-response-match-metadatalist

[02:07:22.0000] <annevk>
Fix deployed

[02:12:46.0000] <nox>
What's the status on css-selectors-4?

[02:12:58.0000] <nox>
Is the terminology in it mostly viable?

[02:13:32.0000] <TabAtkins>
Drop the "css-". It's cleaner.

[02:13:34.0000] <TabAtkins>
And yes.

[02:13:43.0000] <TabAtkins>
What terminology are you looking for specifically?

[02:13:45.0000] <annevk>
and the -4

[02:13:59.0000] <TabAtkins>
Well, the spec's name is selectors-4

[02:14:04.0000] <TabAtkins>
Sorry, selectors4

[02:14:07.0000] <annevk>
:-/

[02:14:17.0000] <Ms2ger>
No, it's "selectors" :)

[02:14:24.0000] <TabAtkins>
No it's becky

[02:20:19.0000] <zcorpan>
Hixie: can you look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=28796 pls?

[02:24:57.0000] <philipj>
zcorpan: har du tid?

[02:25:16.0000] <zcorpan>
philipj: ja

[02:26:49.0000] <jgraham>
Ska alla prata Svenska nu?

[02:27:31.0000] <zcorpan>
japp

[02:28:33.0000] <Ms2ger>
Njet

[02:31:14.0000] <annevk>
zcorpan: see also https://www.w3.org/Bugs/Public/show_bug.cgi?id=29061

[02:31:28.0000] <annevk>
zcorpan: it's a bit more complicated due to DOMTokenList

[02:34:22.0000] <zcorpan>
annevk: thx. we have relList so values can be feature-checked with that api without the case-folding idea

[02:35:08.0000] <annevk>
zcorpan: yeah, both sandbox and this seem to require the same thing

[02:53:53.0000] <nox>
TabAtkins: Compound selectors, complex selectors, are these names going to stay?

[02:54:08.0000] <nox>
The terminology in selectors3 was confusing.

[02:58:45.0000] <TabAtkins>
Yeah, that terminology is solid.

[03:03:04.0000] <hallvors>
annevk: in https://xhr.spec.whatwg.org/#dom-xmlhttprequest-send step 4, will an implementation never handle input that is *neither* Document nor BodyInit ?

[03:03:31.0000] <annevk>
hallvors: IDL will stringify it

[03:03:33.0000] <nox>
TabAtkins: Cool, thanks.

[03:03:43.0000] <hallvors>
annevk: OK, thx

[03:14:46.0000] <hallvors>
Is "Content-Type: charset=UTF-8" a valid content-type header?

[03:15:23.0000] <annevk>
hallvors: yes

[03:15:42.0000] <annevk>
hallvors: oh wait, no it isn't

[03:15:57.0000] <annevk>
hallvors: I read text/plain; in there somehow

[03:26:48.0000] <hallvors>
OK.. so the test expects such headers to be sent as they are set because it doesn't have a proper charset attribute to rewrite.. Did I get that right?

[03:27:06.0000] <hallvors>
(Trying to annotate the test file a bit - this is rather obscure stuff)

[03:28:50.0000] <annevk>
hallvors: yeah, I guess if it can't parse the Content-Type header it should leave it alone

[03:29:29.0000] <annevk>
hallvors: right, the XHR spec contains a "valid MIME type" check

[03:30:27.0000] <hallvors>
yes - I think the tests are up-to-date and match the spec carefully, it's just that they are not commented so it's hard to figure out the actual logic ;)

[03:30:56.0000] <hallvors>
I'll have you review the PR in a moment..

[03:31:08.0000] <hallvors>
should be an easy review :)

[04:01:38.0000] <annevk>
Anyone have any novel URL security concerns? https://www.w3.org/Bugs/Public/show_bug.cgi?id=27642#c2

[04:07:20.0000] <MikeSmith>
annevk: maybe something about data URLs?

[05:37:39.0000] <jgraham>
SimonSapin: http://log.csswg.org/irc.w3.org/css/2015-08-25/#e581689 seems like it's the route of maximum complexity

[05:37:51.0000] <jgraham>
in the long run

[05:39:13.0000] <SimonSapin>
jgraham: does this happen that often?

[05:39:38.0000] <jgraham>
SimonSapin: I don't know

[05:40:04.0000] <SimonSapin>
what would be a better way to deal with this?

[05:41:03.0000] <SimonSapin>
(I want strong arguments if I’m gonna re-open this topic)

[05:41:23.0000] <jgraham>
Not making backwards-incompatible changes? Not allowing implementations to optionally support older versions of the spec?

[05:41:34.0000] <jgraham>
I mean I don't think these will be winning arguments in CSS-land

[05:44:14.0000] <jgraham>
Anyway, if this doesn't happen very often I guess it's not a huge concern, but the current setup seems to either require implementations to (potentially) compare both refs on each test run, which is unnecessarily slow, or have additional metadata about which ref they expect to match, which is unmaintainable

[05:44:27.0000] <jgraham>
wptrunner will do the former fwiw

[05:45:06.0000] <astearns>
jgraham: I don't think the intent is to allow implementations to optionally support older versions

[05:45:31.0000] <jgraham>
If that's not the intent why wouldn't you just update the tests to require the new behaviour?

[05:45:31.0000] <astearns>
in addition to changing the old test to allow either result, a new test for the new result should be added to a new test suite

[05:46:34.0000] <jgraham>
Literally the entire CSS levels system seems to be designed around that concept

[05:47:00.0000] <astearns>
a 2.1 implementation will pass with the old behavior, and a new implementation will pass the old test *and* the new test

[05:47:17.0000] <Ms2ger>
There's no such thing as "a 2.1 implementation"

[05:49:24.0000] <astearns>
the initial suggestion was to remove the old test and add a new test to the level 3 test suite. fantasai countered with allowing both results in the old test

[05:51:29.0000] <Ms2ger>
So what's the plan for testing css-color-4? Spreading tests around in css21/, css-color-3/, css-color/4?

[05:51:32.0000] <Ms2ger>
-4*

[05:52:15.0000] <zcorpan>
css/color/ ?

[05:53:03.0000] <Ms2ger>
No, that would make sense

[05:53:13.0000] <zcorpan>
right, sorry

[05:54:58.0000] <Ms2ger>
Does css still require repo-wide unique file names?

[05:55:04.0000] <jgraham>
Yes

[05:56:46.0000] <hallvors>
annevk: quickie for you :) https://critic.hoppipolla.co.uk/r/5750

[05:59:21.0000] <annevk>
TabAtkins: why does <a spec=html for=/>origin</a> still get confused with an <dfn>origin</dfn> in a document that is not HTML?

[05:59:32.0000] <annevk>
TabAtkins: why do I even need for=/ to make that work?

[05:59:42.0000] <TabAtkins>
...interesting

[06:01:28.0000] <annevk>
hallvors: r+

[06:02:16.0000] <hallvors>
annevk: thanks

[06:02:39.0000] <annevk>
TabAtkins: also, "unicode serialisation of an origin" from HTML appears not to be indexed

[06:03:11.0000] <SimonSapin>
sorry annevk http://w3cmemes.tumblr.com/post/127554590107/lazy-college-senior-csswg-continues-to-not-go

[06:03:11.0000] <annevk>
TabAtkins: also, many terms in DOM that are used elsewhere lack export... I guess that's the reason I cannot use them elsewhere...

[06:03:54.0000] <annevk>
SimonSapin: not a very interesting resolution

[06:04:31.0000] <annevk>
"Nobody has done work." "Let's decide to continue to not do work."

[06:04:44.0000] <annevk>
Film at 11

[06:06:28.0000] <TabAtkins>
annevk: To be fair, I gave the explicit reason of "to annoy Anne"

[06:06:46.0000] <annevk>
TabAtkins: meh

[06:07:02.0000] <annevk>
TabAtkins: so apparently <a spec=html for=/> ends up pointing to https://html.spec.whatwg.org/multipage/infrastructure.html#concept-url-origin

[06:07:22.0000] <annevk>
TabAtkins: so it's not quite where I need it to end up

[06:08:05.0000] <TabAtkins>
annevk: HTML defines two indistinguishable "origin" terms.

[06:08:30.0000] <TabAtkins>
Bikeshed, unfortunately, has no way to distinguish between indistinguishable definitions, which is why it throws a fatal error if you try to define such.

[06:08:57.0000] <TabAtkins>
`bikeshed refs --text="origin" --type="dfn"`

[06:11:27.0000] <annevk>
TabAtkins: so they only way to reference all of HTML from Bikeshed is to use an anchors block? Which won't show up in the terms defined by this specification block...

[06:12:58.0000] <TabAtkins>
HTML's definitions aren't exported, and they're marked up shittily in the first place (which is why we're not exporting them by default; they'd stomp all over everything)

[06:13:13.0000] <TabAtkins>
Well, they're not marked up at all, and so Shepherd can't do much inference for them.

[06:13:28.0000] <TabAtkins>
Their markup isn't shitty for the purpose it was originally intended.

[06:13:32.0000] <annevk>
The same is true for DOM which you converted...

[06:13:49.0000] <TabAtkins>
Yes, I *converted* DOM.

[06:13:57.0000] <annevk>
And forgot to add export et al

[06:14:06.0000] <TabAtkins>
Oh, yeah, sure.  Want me to fix all that?

[06:14:27.0000] <TabAtkins>
(I often forget.  I've struggled for some time to figure out a non-annoying way to get Bikeshed to let you know you should export things.)

[06:14:30.0000] <annevk>
I dunno, I'd prefer you fix some of the other lingering issues I guess

[06:14:57.0000] <TabAtkins>
Working on those.

[06:15:15.0000] <TabAtkins>
It does suck that HTML is hard to ref. :/

[06:15:47.0000] <TabAtkins>
Don't know what else I can do, tho - there is literally no way to distinguish between the two "origin" terms besides their url.

[06:16:46.0000] <annevk>
I guess the scraper for HTML could use the IDs

[06:17:15.0000] <annevk>
Or we could attempt to change the markup for HTML in some way to accommodate the scraper

[06:19:25.0000] <TabAtkins>
The latter would be the best, but it's a big job.

[06:19:47.0000] <TabAtkins>
We don't need a full conversion or anything, tho, just add some decent markup to the dfns.

[06:20:15.0000] <TabAtkins>
Like for origin, export both and put for=url on one and for=http on the other, or something.

[06:20:30.0000] <TabAtkins>
or give it lt="http origin"

[06:21:44.0000] <annevk>
it's not really HTTP, but I'm not sure what it would be otherwise either

[06:21:53.0000] <annevk>
it's sort of the definition of the core security concept of the web

[06:22:45.0000] <TabAtkins>
Sure, I was just going off of the IDs.

[06:23:48.0000] <annevk>
Oh, I guess that might be the Origin header

[06:23:58.0000] <annevk>
for=http would make sense there I suppose

[06:27:14.0000] <TabAtkins>
Ah yeah, I was thinking of adding a "header" definition category. Mike West asked for it.

[06:28:08.0000] <annevk>
makes sense

[06:28:31.0000] <annevk>
TabAtkins: I've established host, hostsyntax, url, and urlsyntax categories btw

[06:28:54.0000] <TabAtkins>
Hm?

[06:29:10.0000] <annevk>
for=urlsyntax and such

[06:29:23.0000] <annevk>
but maybe you meant something else

[06:29:39.0000] <TabAtkins>
Yeah, I meant type=header

[06:29:51.0000] <TabAtkins>
<dfn header>Origin</dfn>, that kind of thing

[06:30:03.0000] <TabAtkins>
So they're not "dfn" type terms.

[06:30:29.0000] <annevk>
aw

[06:31:59.0000] <TabAtkins>
Jeez, HTML has *three* "origin" dfns.

[06:32:08.0000] <annevk>
right

[06:32:13.0000] <TabAtkins>
#concept-url-origin, #http-origin, and #origin-2

[06:32:15.0000] <TabAtkins>
wtf

[06:32:29.0000] <annevk>
also https://html.spec.whatwg.org/multipage/browsers.html#origin

[06:32:52.0000] <annevk>
oh, that's the heading

[06:33:04.0000] <TabAtkins>
#origin-2 is the definition you want for the core "origin" concept.

[06:33:07.0000] <annevk>
yeah

[06:36:28.0000] <TabAtkins>
annevk: Do you have the ability to fix HTML? We can at least spot-fix things as we go.  Any time you need to put an HTML term in an anchors block, we can fix it in the spec.

[06:51:38.0000] <beverloo>
annevk, back from holiday, I'll be picking up the PR today. Sorry I didn't get to it before I left!

[06:57:43.0000] <annevk>
beverloo: no rush!

[06:58:04.0000] <zcorpan>
annevk: what's the status of URL comparison? came up for the context of @document rule

[06:58:34.0000] <annevk>
zcorpan: https://url.spec.whatwg.org/#url-equivalence no API yet

[06:58:53.0000] <annevk>
zcorpan: if you have specific use cases, I recommend filing issues

[06:59:17.0000] <zcorpan>
ty

[07:00:56.0000] <zcorpan>
annevk: looks like some spaces are missing, is that in the source or bikeshed's fault?

[07:02:12.0000] <annevk>
zcorpan: looks like TabAtkins' new serializer's fault :-/

[07:02:47.0000] <TabAtkins>
Sorry, iterating back towards success here.  Almost done!

[07:06:05.0000] <TabAtkins>
Working on that specific issue right now, since I noticed it in another spec.

[07:06:16.0000] <TabAtkins>
I know exactly what's causing it, but I'm trying to fix it without regressing in certain other matters.

[08:08:01.0000] <Domenic>
annevk: in https://github.com/whatwg/url/issues/62#issuecomment-134530442 do <a>/<area> have non-relative flags?

[08:22:39.0000] <Domenic>
TabAtkins: I am really concerned by Bikeshed's lack of regression tests... You fix things now, but we have no guarantee they stay fixed :(

[08:23:11.0000] <Domenic>
I guess we can start checking out specific bikeshed revisions and using those to build the spec on ci

[08:23:43.0000] <Domenic>
and only upgrade periodically

[08:31:17.0000] <TabAtkins>
Domenic: Yeah, I (a) need to start producing tagged revisions, and (b) greatly increase my test suite.

[08:33:07.0000] <TabAtkins>
Sucks having to be a grown-up about this now. ;_;

[08:35:32.0000] <darobin>
TabAtkins: welcome to my world :-p

[08:54:55.0000] <annevk>
Domenic: non-relative flag is a property of a URL, blob URLs would typically have it set

[09:00:21.0000] <Domenic>
annevk: OK, then I don't understand which URL the reset algorithm is consulting the non-relative flag of

[09:02:33.0000] <Domenic>
JakeA: if anyone asks about progress events in fetch, I made a thing. https://gist.github.com/domenic/95e689d0be5e24fb08ec

[09:02:37.0000] <nox>
Domenic: s/URL/url/

[09:02:48.0000] <nox>
It looks into the url set in set the input.

[09:03:05.0000] <Domenic>
nox: in the new scheme there is no set the input

[09:03:22.0000] <nox>
Domenic: Sorry, I can't hear you from the late train.

[09:08:23.0000] <JakeA>
Domenic: ohh, cheers

[09:11:49.0000] <annevk>
Domenic: the internal url

[09:12:21.0000] <Domenic>
annevk: I see

[09:13:13.0000] <Domenic>
I think maybe inlining reset into each algorithm would be clearer tbh.

[09:19:13.0000] <annevk>
Domenic: that's a lot of duplication

[09:19:35.0000] <annevk>
Domenic: the main question I have though is whether it would make sense to separate out Location setters

[09:19:54.0000] <annevk>
Domenic: those are so different from all the other setters that it doesn't really make sense to handle them in a single algorithm

[09:19:55.0000] <Domenic>
annevk: it's one line: if internal url's non-relative flag is not set, let internal url = parse URL using get the base / get the input

[09:20:27.0000] <Domenic>
annevk: separating them out seems very reasonable.

[09:20:45.0000] <Domenic>
annevk: I was anticipating three separate interface definitions

[09:20:56.0000] <annevk>
Domenic: I see

[09:21:10.0000] <annevk>
Domenic: I was kind of hoping to keep them together

[09:21:31.0000] <Domenic>
i think it's much clearer separate... they act on different "this" types

[09:25:59.0000] <annevk>
Domenic: yeah, but it's a lot of redundancy and a new source for bugs

[09:26:08.0000] <annevk>
hmm

[09:26:15.0000] <Domenic>
I see basically zero redundancy... they're just different functions

[09:26:25.0000] <Domenic>
Think about the implementation

[09:26:33.0000] <annevk>
yes I have :-)

[09:26:38.0000] <Domenic>
No implementation is going to implement this as one class with each algorithm having a three-way switch statement

[09:26:46.0000] <Domenic>
They'll have three separate classes

[09:26:52.0000] <annevk>
most of these algorithms don't need a three-way switch

[09:27:13.0000] <annevk>
e.g., other getter can be shared across all pretty easily

[09:27:33.0000] <annevk>
by just making reset conditional on "get the input" as well

[09:27:44.0000] <Domenic>
But that kind of conditional is not fun

[09:27:52.0000] <Domenic>
Prefer polymorphism over branching

[09:28:20.0000] <Domenic>
https://sourcemaking.com/refactoring/replace-conditional-with-polymorphism

[09:28:53.0000] <Domenic>
having a "reset" step that is meaningless 2/3 of the time is not great

[09:29:05.0000] <Domenic>
hard to follow the resulting algorithm

[09:37:31.0000] <annevk>
Domenic: so I guess what you'd argue for is that we define them separately in URL and HTML

[09:37:46.0000] <annevk>
Domenic: share them between <a> and <area>

[09:37:54.0000] <annevk>
Domenic: put the members directly on URL.prototype

[09:38:11.0000] <annevk>
(well, that already happens, just through a different technique)

[09:38:26.0000] <annevk>
Domenic: I guess we could do that, it's a bit of duplication, but nothing too bad I suppose

[09:38:27.0000] <Domenic>
annevk: yeah, that sounds right.

[09:38:59.0000] <annevk>
I was kind of hoping we could make these properties more consistent by defining them in a single place, but so far I failed at that, so...

[09:40:45.0000] <Domenic>
I just think what we've learned is that they're irreducibly different

[09:45:54.0000] <annevk>
Getters for Location/WorkerLocation/URL could still be shared somehow, but IDL doesn't let you define getters and setters separately

[10:47:36.0000] <gsnedders>
is bugs.webkit.org really slow for anyone else?

[10:52:31.0000] <jgraham>
gsnedders: Well they're slow to fix the bugs, so… </rimshot>

[10:55:50.0000] <gsnedders>
well yes, I am getting annoyed by a bug first reported in 2008, and still UNCONFIRMED

[10:56:03.0000] <gsnedders>
https://bugs.webkit.org/show_bug.cgi?id=18954 specifically

[10:58:43.0000] <annevk>
gsnedders: loads fine here

[15:21:32.0000] <nox>
"table[border] { border-style: outset; } /* only if border is not equivalent to zero */"

[15:21:58.0000] <nox>
Can't that be expressed properly with selectors4's :not() and :has()?

[15:23:50.0000] <nox>
Mmmh, I guess attribute selectors aren't powerful enough.


2015-08-26
[00:39:54.0000] <zcorpan>
miketaylr: sup

[00:41:16.0000] <TabAtkins>
nox: table[border]:not([border=0]) ?

[00:42:19.0000] <zcorpan>
miketaylr: i stumbled over the compat spec. what's the background there? is moz implementing it? edge?

[00:45:55.0000] <Ms2ger>
TabAtkins, how about border=00?

[00:46:12.0000] <TabAtkins>
Screw you, that's how about.

[00:47:05.0000] <Ms2ger>
Go review my reftests :)

[00:47:53.0000] <tantek>
zcorpan: re: compat spec, yes.

[00:48:38.0000] <tantek>
feedback very much appreciated!

[00:48:51.0000] <zcorpan>
tantek: edge also?

[00:49:20.0000] <tantek>
zcorpan: I haven't spoke for MS in >10 years ;)

[00:52:00.0000] <karlcow>
zcorpan: the goal is to describe at least things which are not yet described and are necessary for WebCompat. Some of the things are in being implemented in Gecko, and some are already implemented in Edge.

[00:52:11.0000] <karlcow>
s/are in/are being/

[00:52:48.0000] <zcorpan>
ok. ty

[00:52:53.0000] <MikeSmith>
tantek: ...but when I do [ *** ]

[00:55:18.0000] <MikeSmith>
every time MS tries to speak at an event, tantek should hijack the mic and demand 2 minutes of silence for MS people to express remorse for IE6

[00:55:55.0000] <tantek>
MikeSmith: I don't think anyone misses IE6/Windows. Or do you mean the IE6/Mac that never shipped?

[00:56:25.0000] <MikeSmith>
I had in mind, for the harm that IE6 caused

[00:56:51.0000] <MikeSmith>
but in that cause it would need to be instead, like, 7 years of silence

[00:56:58.0000] <MikeSmith>
or however long it was

[00:57:36.0000] <tantek>
MikeSmith, if one vendor walking away from the web (for a while) can cause the web to stall, that doesn't speak well of the web's robustness.

[00:57:57.0000] <MikeSmith>
oh it didn't cause the web to stall

[00:58:26.0000] <MikeSmith>
it just caused lots of people to have to waste lots of time

[00:58:28.0000] <tantek>
oh I know, I was pretty busy during that time myself ;) (#microformats)

[00:58:44.0000] <MikeSmith>
I think we should demand that MS give us all that time back

[00:58:48.0000] <MikeSmith>
reparations

[00:59:26.0000] <tantek>
MikeSmith you mean for having to support legacy IE6 CSS, when there wasn't even a CSS 2.1 finished nor test suite to pass to verify they got it right?

[01:00:15.0000] <Ms2ger>
Really we should just complain about the csswg

[01:00:23.0000] <tantek>
MikeSmith if you're looking for reparations, look no further than the XML mafia which hijacked W3C from ~1998-2004

[01:00:31.0000] <tantek>
Ms2ger: your timing is impeccable :)

[01:00:51.0000] <Ms2ger>
There is no bad timing for that :)

[01:00:59.0000] <karlcow>
IE6 Seems to me / You don't want to talk about it / Seems to me / You just turn your pretty head and walk away

[01:00:59.0000] <karlcow>
— https://www.youtube.com/watch?v=ICmD8P0x8_M

[01:01:14.0000] <tantek>
Ms2ger: during f2f meetings can be particularly effective

[01:01:23.0000] <Ms2ger>
uhuh

[01:01:26.0000] <MikeSmith>
the XML mafia shamed themselves into irrelevance, so nothing more to do there

[01:01:49.0000] <tantek>
MikeSmith, and how much of all our time in web standards did the XML mafia waste for all those years?

[01:02:11.0000] <Ms2ger>
tantek, still hoping someone there will review https://github.com/w3c/csswg-test/pull/829

[01:02:22.0000] <tantek>
of course now there's the growing JSONLD mafia in their place

[01:02:30.0000] <MikeSmith>
tantek: dunno but be got some serious lulz out of it

[01:02:35.0000] <MikeSmith>
they paid us in lulz

[01:02:38.0000] <Ms2ger>
(Making the css21 test suite relevant, 5 years late)

[01:03:06.0000] <tantek>
Ms2ger: your attention to detail is admirable.

[01:03:17.0000] <tantek>
clearly you're in the right place

[01:06:06.0000] <MikeSmith>
in our history, the XML mafia were like weekend bikers who really wanted to look like outlaw bikers, but instead their bikes  were all shiny (and not stolen from somebody else) and their cutoffs/vests were washed and clean and neat

[01:06:09.0000] <tantek>
Ms2ger: just looking at the first couple of files at-import-009 and 010 - why change the prose from "must" to "should"? Looks like spec is pretty clear about the requirements there.

[01:28:22.0000] <Ms2ger>
tantek, true, but ref-this-text-should-be-green.xht uses "should", and it's better to reuse that reference even if it doesn't use rfc2119 terminology

[01:28:52.0000] <tantek>
I worry that the inconsistency will confuse someone looking at the test

[01:29:23.0000] <tantek>
can we fix ref-this-text-should-be-green.xht or is that even more painful?

[01:30:28.0000] <Ms2ger>
We probably can, but can I defer that to a followup?

[01:34:11.0000] <tantek>
The change in prose in the tests from "must" to "should" seems like a regression to me. If that prose change can be postponed and instead dealt with in that same follow-up where ref-this-text-should-be-green.xht is fixed, that would be better IMO.

[01:37:27.0000] <Ms2ger>
I guess I could fix it now, but there's about 3000 occurrences of "should" in the css21 suite alone, and I suspect most of those would need to be "must" by that logic

[01:42:45.0000] <zcorpan>
Ms2ger: jgraham: erikdahlstrom wanted push access to web-platform-tests for svg stuff

[01:43:31.0000] <Ms2ger>
/me looks

[01:44:21.0000] <Ms2ger>
I think I'd rather wait to grant it until I've seen contributions

[01:47:59.0000] <Ms2ger>
tantek, could you at least ask fantasai where she stands on that first?

[01:48:21.0000] <Ms2ger>
I don't really want to start on a big should-removal if it won't be accepted

[01:48:41.0000] <tantek>
Ms2ger: no problem will ask. I figure you asked for review so I'd try to help :)

[01:49:23.0000] <tantek>
Ms2ger re: 3000 occurrences of "should" - hoping to not add any more, or worse, not replace any existing "must"s with "should"s.

[03:40:28.0000] <nox>
Why does specificity depends on the element being matched in selectors4 now?

[04:25:30.0000] <beverloo>
Is it valid for W3C specs to have normative references to non-free ANSI documents?

[04:26:08.0000] <Ms2ger>
Yes, though readers will be grumpy

[04:26:37.0000] <beverloo>
My grumpyness caused me to ask. Thanks!

[04:26:58.0000] <Ms2ger>
Doesn't mean you can't complain :)

[04:27:12.0000] <beverloo>
I will :) It's only a PR at this point

[04:27:28.0000] <beverloo>
but it's kind of hard to complain about something if I can't see what it is

[04:28:11.0000] <nox>
TabAtkins: What about border="00"?

[04:30:04.0000] <Ms2ger>
 <Ms2ger> TabAtkins, how about border=00?

[04:31:03.0000] <nox>
Ms2ger: Err, sorry. :)

[04:31:14.0000] <Ms2ger>
Great minds think alike? :)

[04:31:27.0000] <nox>
Hah. Thanks. :D

[04:31:41.0000] <nox>
Anyway, what's that mess in CSS 4 with the selectors' specificity?

[04:31:54.0000] <nox>
Isn't that a huge increase in complexity that the specificity depends on the element being matched?

[04:49:02.0000] <annevk>
nox: how does it depend on the element?

[04:49:06.0000] <annevk>
nox: I don't see it in https://drafts.csswg.org/selectors/#specificity-rules

[04:49:23.0000] <nox>
annevk: "for a given element"

[04:49:34.0000] <nox>
annevk: "If the selector is a selector list, this number is calculated for each selector in the list, and the specificity of the entire selector is the largest of any individual selector in the list that matches the element."

[04:49:47.0000] <nox>
annevk: ":matches(em, #foo) has a specificity of (0,0,1)--like a tag selector--when matched against <em>, and a specificity of (1,0,0)--like an ID selector--when matched against <em id=foo>."

[04:50:36.0000] <annevk>
oh

[04:50:53.0000] <annevk>
I wonder if that's implemented correctly in WebKit

[04:56:48.0000] <nox>
annevk: https://github.com/w3c/csswg-drafts/commit/53a057fb219394c8816a470ab96e5de8c720082c#diff-11f338bfd5b68aaa92f2013402218063 https://github.com/w3c/csswg-drafts/commit/ce57f47360dcff13a99da7e68f94020b9638d557#diff-11f338bfd5b68aaa92f2013402218063

[04:56:48.0000] <nox>
https://github.com/w3c/csswg-drafts/commit/bfebc135d542fde47a049798669aad6a6fe82965#diff-b8f9f5846b8094cd2099649b6fb92111

[04:58:17.0000] <Ms2ger>
Calling TabAtkins

[04:58:17.0000] <nox>
annevk: Seems to come from https://lists.w3.org/Archives/Public/www-style/2010Sep/0534.html.

[04:58:36.0000] <nox>
Found this link in https://github.com/w3c/csswg-drafts/commit/353bbef8abc9e09bee3af6a170cb25426cde230e

[05:00:47.0000] <annevk>
wow all CSS drafts are in a single repo?

[05:01:26.0000] <annevk>
I guess they liked their CVS setup

[05:14:45.0000] <TabAtkins>
What's up?

[05:15:12.0000] <TabAtkins>
annevk: We still sync our git and mercurial, for the handful of people that for some reason like mercurial

[05:15:13.0000] <SimonSapin>
annevk: inertia rather than like, I think

[05:15:30.0000] <SimonSapin>
TabAtkins: we could have multiple hg repos too

[05:15:46.0000] <TabAtkins>
We could, sure. But we didn't.

[05:16:22.0000] <jgraham>
/me is surprised that no one has yet suggested putting all specs in a single repository

[05:16:33.0000] <jgraham>
(I am not endorsing that idea)

[05:18:16.0000] <Ms2ger>
GREGORY SZORC enters

[05:23:07.0000] <nox>
TabAtkins: Up is a direction.

[05:23:18.0000] <nox>
TabAtkins: But otherwise, is specificity depending on the element being matched here to stay?

[05:23:33.0000] <TabAtkins>
nox: Yes. :matches() is just syntax sugar for writing multiple selectors.

[05:23:59.0000] <nox>
TabAtkins: That's orthogonal isn't it?

[05:24:02.0000] <TabAtkins>
`:matches(a,b) > :matches(c,d)` is equivalent to `a > c, a > d, b > c, b > d`.

[05:24:49.0000] <nox>
TabAtkins: Their specificity could be the same even without depending on the element. Not sure how that's related to my question.

[05:24:52.0000] <TabAtkins>
It's not orthogonal, because often this'll be used when refactoring - you first write simple selectors, then as you need to expand a term you add :matches(), and you don't want to break specificity.

[05:25:18.0000] <nox>
My question isn't specific to :matches().

[05:25:43.0000] <TabAtkins>
...okay? Nothering else acts like :matches.

[05:25:48.0000] <nox>
"If the selector is a selector list, this number is calculated for each selector in the list, and the specificity of the entire selector is the largest of any individual selector in the list that matches the element." <- That doesn't involve :matches(), does it?

[05:26:14.0000] <TabAtkins>
That's just a way to talk about selector lists.  It's the behavior we've had since CSS1

[05:26:16.0000] <nox>
"foo, #bar"'s specificity varies depending on the element, doesn't it?

[05:26:38.0000] <nox>
CSS1's selectors' specificity also depended on the element being matched? :o

[05:26:45.0000] <TabAtkins>
You're overthinking this.

[05:26:54.0000] <nox>
How so?

[05:27:28.0000] <TabAtkins>
If you have ".foo, #bar { color: red; }", then for <div class="foo"> the 'color' is applied with specificity [0,1,0], but for <div id=bar> it's applied with specificity [1,0,0]. It's always been that way, forever.

[05:27:43.0000] <nox>
SimonSapin: ^

[05:27:53.0000] <nox>
SimonSapin: rust-selectors was always wrong then, no?

[05:27:56.0000] <TabAtkins>
Appending a new (non-matching) selector to an existing style rule doesn't suddenly change the specificity of anything on the page.

[05:28:29.0000] <TabAtkins>
Again, this is because that example is equivalent to the decomposed ".foo { color: red; } #bar { color: red; }".

[05:28:30.0000] <zcorpan>
TabAtkins: i get an error in cssom that CSSFontFaceRule has no ref. is css fonts spec doing something wrong or am i?

[05:28:32.0000] <nox>
TabAtkins: That's how browsers did it, but not how the CSS1 was specifying it, right?

[05:28:48.0000] <TabAtkins>
zcorpan: CSS Fonts is wrong, until I get it finished converting to Bikeshed.

[05:29:14.0000] <zcorpan>
TabAtkins: k, i'll Ignored Terms it for now

[05:29:16.0000] <TabAtkins>
nox: CSS traditionally talked about only one selector at a time.

[05:29:22.0000] <TabAtkins>
zcorpan: Yeah, that's the right thing to do.

[05:29:51.0000] <nox>
TabAtkins: Oh ok, I see.

[05:30:30.0000] <TabAtkins>
So it just pretended that, in the ".foo, #bar" case, that you were only worrying about .foo or #bar, not both at the same time.

[05:30:39.0000] <SimonSapin>
nox: In Selectors 3, "lists of (comma-separated) selectors" don’t have a specificity, only single "selectors" do.

[05:30:42.0000] <TabAtkins>
That seemed unclear, so I rewrote.

[05:30:56.0000] <nox>
SimonSapin: Yeah; understood now.

[05:31:09.0000] <TabAtkins>
Basically it seemed dumb to push the handling of specificity of selector lists to the cascade spec, when it could be defined in selectors.

[06:00:27.0000] <Ms2ger>
gsnedders retweeting Dutch tweets? What's the world coming to...

[07:34:27.0000] <gsnedders>
Ms2ger: bah, sometimes I can get what they say from my knowledge of German :P

[07:35:05.0000] <gsnedders>
Ms2ger: I mean I do retweet stuff relatively frequently in English, German, French, Swedish, Norwegian, and Danish.

[07:35:13.0000] <gsnedders>
I'm not entirely sure why, I doubt most of my followers cope :P

[07:54:46.0000] <frewsxcv>
what does /* sealed */ mean in this webidl? https://html.spec.whatwg.org/multipage/browsers.html#window

[07:59:07.0000] <liefer>
So i'm reading https://fetch.spec.whatwg.org/ which makes it seem like it should indeed be possible to perform a fetch which does a HTTPPOST request that includes a body. How do i go about figuring out the syntax for actually doing so? Google only seems to give me examples of how to do simple HTTPGET's like e.g. https://bpaste.net/show/f754e9ca53bd

[08:00:30.0000] <Ms2ger>
frewsxcv, nothing at this point

[08:00:55.0000] <frewsxcv>
Ms2ger: excellent

[08:02:13.0000] <annevk>
liefer: fetch(url, {body:..., method:"POST"})

[08:02:24.0000] <TabAtkins>
frewsxcv: I think the idea is that you're not supposed to `partial` it.

[08:02:41.0000] <frewsxcv>
even though it is partial'ed?

[08:02:50.0000] <zcorpan>
liefer: https://fetch.spec.whatwg.org/#requestinit

[08:04:31.0000] <liefer>
zcorpan, ah embarrasing, should just have read further :) thank you

[08:04:35.0000] <liefer>
annevk, thank you!

[08:04:52.0000] <Ms2ger>
TabAtkins, no, that's not it

[08:05:05.0000] <gsnedders>
zcorpan: wrt the reftests data, "dump the data there" — why? we already have it in git? for upstreaming stuff I was just assuming a checklist of each directory

[08:05:18.0000] <annevk>
Ms2ger: do you know why there's no bug open against IDL to define what it means?

[08:05:32.0000] <Ms2ger>
annevk, I don't recall what was going on there

[08:06:15.0000] <gsnedders>
totally random: was there not some talk about making invisible file pickers unclickable?

[08:06:36.0000] <annevk>
Ms2ger: there's a couple of interfaces marked as such...

[08:06:45.0000] <annevk>
including partial interfaces so that's definitely not it

[08:06:56.0000] <Ms2ger>
gsnedders, that (not random bit) sounds like something I'm interested in, but am lacking context

[08:07:41.0000] <annevk>
gsnedders: a long long time ago, but folks gave up on that

[08:07:58.0000] <gsnedders>
annevk: last I knew it was still occasionally getting talked about :P

[08:09:57.0000] <Ms2ger>
Can't find anything on sealed in my email either

[08:10:02.0000] <gsnedders>
Ms2ger: tl;dr: zcorpan was asking what he can do to help with the refs in presto-testo

[08:10:15.0000] <Ms2ger>
Ah, great

[08:12:56.0000] <annevk>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26490

[08:13:00.0000] <annevk>
seems related to sealed

[08:14:50.0000] <zcorpan>
gsnedders: is the partial .csv already public somewhere?

[08:15:44.0000] <gsnedders>
zcorpan: https://github.com/operasoftware/presto-testo/blob/master/reftest.list is it converted to a more normal format

[08:16:06.0000] <gsnedders>
zcorpan: and without absolute URLs

[08:16:47.0000] <zcorpan>
gsnedders: ok. thanks. then there's not much for me to do at this point

[08:18:18.0000] <zcorpan>
Ms2ger: it appears we don't have the full list of associations anymore

[08:18:31.0000] <Ms2ger>
Aw

[08:19:33.0000] <gsnedders>
also we appear to not have all the refs released

[08:19:39.0000] <gsnedders>
but that I'm dealing with

[08:19:50.0000] <Ms2ger>
Oh, there's some css21 refs in there

[08:19:56.0000] <Ms2ger>
/me missed those before

[08:20:32.0000] <Ms2ger>
160 is better than none, certainly

[08:20:37.0000] <gsnedders>
yeah, but I think they are all the ones part of the testsuite from upstream

[08:20:48.0000] <Ms2ger>
Ha

[08:21:14.0000] <gsnedders>
/me is currently waiting for other people running `find` to have it come to its end

[08:22:55.0000] <Ms2ger>
/me will grumble at MS some more

[08:27:24.0000] <annevk>
https://heycam.github.io/webidl/#indexed-and-named-properties seems related to the sealing too

[08:37:56.0000] <gsnedders>
Ms2ger: also half the problem is I'm not quite sure what I did five years ago

[08:40:06.0000] <gsnedders>
Ms2ger: it's looking like I only converted those four into files with all the CSS WG metadata, and the rest are all HTML files

[08:41:59.0000] <gsnedders>
bah, I should've done this all a couple of years ago :P

[08:42:08.0000] <gsnedders>
do it myself without proxies

[08:45:50.0000] <Ms2ger>
Yeah, well, it's not like the csswg would've accepted them then

[08:46:23.0000] <gsnedders>
Could've pushed them all out publicly, though.

[08:46:30.0000] <gsnedders>
CSS WG be damned

[08:46:46.0000] <Ms2ger>
True

[08:46:50.0000] <gsnedders>
oh well, we can recreate the mapping for the CSS 2.1 testsuite

[08:47:02.0000] <gsnedders>
run all the tests, save screenshots, run all the refs, save screenshots, and match

[08:47:16.0000] <gsnedders>
probably across multiple browsers to make sure we get everything given some browsers fail some stuff

[08:59:30.0000] <Ms2ger>
    [giow] (3) Make sure <iframe name=location> doesn't override Document.location

[08:59:31.0000] <Ms2ger>
    Fixing https://www.w3.org/Bugs/Public/show_bug.cgi?id=19560

[08:59:42.0000] <Ms2ger>
annevk, blame for sealed points there ^

[09:06:51.0000] <ccardona_work>
Good morning/afternoon/evening WHATWG crew o/

[09:24:32.0000] <annevk>
Ms2ger: according to Hixie it's to prevent subclassing

[10:15:01.0000] <Ms2ger>
annevk, I see


2015-08-27
[17:07:24.0000] <Krinkle>
annevk: Are we getting any closer to figuring out the fetch/abort situation?

[17:08:19.0000] <Krinkle>
I'm starting to think that something is better than nothing. I rarely go down that path, but it seems we're looking for a holy grail that doesn't exist.

[17:41:33.0000] <miketaylr>
zcorpon: oops, missed ur pings

[17:41:46.0000] <miketaylr>
and you're not here so unless you read logs, i'll find you tomorrow

[23:01:04.0000] <annevk>
Krinkle_: slowly

[23:01:10.0000] <annevk>
Krinkle_: JakeA is in charge

[23:01:17.0000] <annevk>
miketaylr: he reads the logs

[23:31:59.0000] <JakeA>
Krinkle: we're investigating cancelable promises first. If that doesn't work we have back-up plans. At the very least, the underlying streams will be terminateable

[23:34:39.0000] <daurnimator>
Krinkle_ / JakeA, got a summary of the problem?

[23:36:19.0000] <JakeA>
daurnimator: the problem is the request part of fetch(url) isn't abortable, neither are the body readers such as response.json()

[23:37:43.0000] <daurnimator>
ah okay; I was thinking of trying to solve my GC observability woes by performing requests; which according to the fetch spec: will be aborted if the request is collected; sounded like it might be related

[00:03:42.0000] <daurnimator>
JakeA: it certainly is an interesting question in general

[00:04:35.0000] <daurnimator>
http requests can be hard to abort => for HTTP/1.1, what if it's already sent, and something has been pipelined after it? the responses still has to be read off the socket

[00:04:45.0000] <daurnimator>
for http2 you can at least send a RST_STREAM

[00:05:30.0000] <daurnimator>
but at the high level; yeah, you'll want cancels to cascade; or the code isn't composable

[00:05:47.0000] <daurnimator>
which in the case of JS, implies that promise chains are cancelable

[00:07:36.0000] <JakeA>
daurnimator: yeah, from a js point of view you'd receive no further data, although it may not actually cancel the underlying request

[00:08:29.0000] <daurnimator>
JakeA: which brings up the question of why you want to bother cancelling in the first place if the server still has to send the reply, and the client still has to process it :P

[00:10:28.0000] <JakeA>
daurnimator: if it's a large resource such as a video, you'd want to cancel that. And as you say, http/2 has a good answer here

[00:11:33.0000] <daurnimator>
JakeA: true. the answer I was thinking of was it means that you won't need to bother following any redirects

[00:16:52.0000] <daurnimator>
this has brought up some good points for me to ponder on

[00:17:54.0000] <daurnimator>
'composibility of cancelability' => what is the smallest unit you can cancel => how can you propagate => how should it flow across error handling

[00:35:08.0000] <annevk>
Interesting differences between https://tools.ietf.org/html/std68 and https://tools.ietf.org/html/rfc5234

[00:35:20.0000] <annevk>
Latter seems more useful, but former is more permanent reference...

[00:57:00.0000] <MikeSmith>
annevk: I guess that fact you're spending time looking at those means you have plans to do something that would necessitate referencing them

[01:05:54.0000] <Ms2ger>
zcorpan, https://critic.hoppipolla.co.uk/r/5723 is back to you

[01:09:59.0000] <zcorpan>
Ms2ger: ports[http][1] is unnecessary but i suppose it's not a problem to have it there, right?

[01:10:43.0000] <Ms2ger>
Is it unnecessary?

[01:11:00.0000] <Ms2ger>
These run on port 8000 in automation

[01:11:24.0000] <zcorpan>
yeah, the test just needs cross-origin, which domains[www1] achieves already. no need to also have a different port

[01:11:58.0000] <Ms2ger>
Wouldn't {{domains[www1]}} just try port 80, which may or may not be mapped to wpt?

[01:12:32.0000] <zcorpan>
oh. yeah you're right

[01:12:50.0000] <Ms2ger>
Thanks, I like to be right :)

[01:13:12.0000] <zcorpan>
though it's still a different port compared to 8000 :-)

[01:13:43.0000] <zcorpan>
the docs for wptserve says ports[0] might be the only port, but i suppose other tests need another port also

[01:16:43.0000] <Ms2ger>
Calling jgraham

[01:19:14.0000] <zcorpan>
miketaylr: o/

[01:23:11.0000] <jgraham>
Ms2ger: Hmm?

[01:23:30.0000] <Ms2ger>
Ports usage in https://critic.hoppipolla.co.uk/r/5723

[01:24:54.0000] <jgraham>
Yeah, you have to specify a port, but it could be [0] there

[01:35:20.0000] <zcorpan>
jgraham: but [1] is not a problem, is it?

[01:35:47.0000] <jgraham>
No, there should always be a port [1]

[01:35:58.0000] <jgraham>
Except on https, perhaps

[01:36:13.0000] <zcorpan>
jgraham: the wptserve docs doesn't give such great confidence there will be another port :-)

[01:38:08.0000] <jgraham>
It seems like the wptserve docs shouldn't describe the details of the wpt setup since the server could be used in other contexts

[01:39:14.0000] <zcorpan>
i suppose

[01:39:58.0000] <jgraham>
Probably the testtwf docs should be improved

[03:53:06.0000] <annevk>
If anyone has ideas around compensating folks for doing standards work: https://twitter.com/annevk/status/636847756737388544

[05:25:51.0000] <hallvors>
Another quick XHR test review https://critic.hoppipolla.co.uk/r/5758 - hope it's quick anyway :)

[06:08:34.0000] <annevk>
hallvors: r+

[06:08:42.0000] <annevk>
hallvors: also, thank you

[06:08:56.0000] <annevk>
hallvors: if you have ideas btw how to reuse these tests for fetch()... that'd be great

[06:30:00.0000] <annevk>
More evidence why IDL needs internal slots: https://github.com/w3c/mediacapture-main/issues/232#issuecomment-132898987

[06:30:03.0000] <annevk>
heycam: ^^

[06:31:17.0000] <heycam>
annevk: I'm coming around on the idea of internal slots. doing some SVG rewording recently it would've been easier than writing a bunch of prose defining internal values associated with an object

[06:33:07.0000] <annevk>
aah yes, once you start writing proper specs the need is kind of self-evident :-P

[06:33:26.0000] <annevk>
good

[06:38:33.0000] <heycam>
:)

[06:38:57.0000] <heycam>
annevk, however sometimes I also wanted something like internal slots, but not using IDL values. so abstract list types or something.

[06:39:08.0000] <heycam>
which the ES spec does too, but then I'm not sure how well that fits with defining the internal slots in the IDL itself

[06:39:35.0000] <annevk>
heycam: I think in the end IDL has to define the meta-language for all specifications

[06:39:48.0000] <annevk>
heycam: including such constructs

[06:39:53.0000] <heycam>
ok

[06:40:01.0000] <heycam>
maybe we can just reuse the ES ones for those abstract types

[06:40:41.0000] <annevk>
Yeah, with an IDL flavor same as we do with Uint8Array et al

[06:40:57.0000] <heycam>
yeah ok

[06:41:12.0000] <heycam>
/me returns to SVG spec hacking

[07:15:07.0000] <annevk>
I wrote up a proposal for compensating folks to do standards work: https://etherpad.mozilla.org/standards-diversity-grants

[07:15:43.0000] <annevk>
I'm not sure yet whether I can actually convince my employer to do this, mind you

[07:16:30.0000] <wanderview>
annevk: I guess my concern is how real is that work without a browser vendor really behind it willing to do implementation?

[07:16:35.0000] <wanderview>
maybe thats not a valid concern

[07:17:00.0000] <annevk>
I actually worked on URL for a while with a grant

[07:17:19.0000] <wanderview>
or maybe there is a difference between archaeology-type spec work and new-feature-type spec work

[07:17:25.0000] <annevk>
I dunno, fixing open issues and such and writing tests always seems helpful

[07:17:30.0000] <darobin>
agreed

[07:17:35.0000] <darobin>
a grant is a good idea

[07:17:50.0000] <darobin>
I think it would likely work best if it's not "come up with a new standard" but rather work on existing issues and the such

[07:17:55.0000] <darobin>
at least at first

[07:18:03.0000] <annevk>
yeah

[07:18:22.0000] <darobin>
you can't grab someone with no clue about standards and make them write one, it wouldn't be nice to anyone

[07:18:46.0000] <darobin>
but you can get them to learn a lot by fixing specifics; then they become employable and you start having diversity without grants

[07:19:10.0000] <darobin>
you shouldn't make that Mozilla-only

[07:19:19.0000] <darobin>
I would expect other companies could chip in

[07:19:33.0000] <annevk>
my thinking was that it would be easier to start this way

[07:19:52.0000] <annevk>
they can always donate to MoFo and earmark it or some such

[07:20:03.0000] <darobin>
I guess yeah

[07:20:33.0000] <darobin>
it sure is easier to start with just the one person and just the one donor; if it works it'll convince people on its own

[07:22:01.0000] <jgraham>
So there are some issues with the details there. "You must have a GH id" is biasing the pool (people that already wok in Open Source, people that live in countries that have high GH usage, people that aren't shy of publishing their projects, people that don't prefer BitBucket or GitLab or whatever)

[07:22:26.0000] <jgraham>
Positive Discrimination is, at least, a way to generate controversy

[07:22:32.0000] <wanderview>
must be willing to have a GH account?

[07:22:54.0000] <darobin>
I think biasing against people who prefer BitBucker is a feature :)

[07:23:11.0000] <wanderview>
seems GH is required by virtue of us hosting the specs there

[07:23:12.0000] <nox>
Why?

[07:23:45.0000] <jgraham>
GH is required to make contributions, but there's no reason to only accept applicants who already have an account

[07:24:00.0000] <darobin>
I would not list strict requirements on any part, you just want someone who'll do whatever it takes to make something useful

[07:24:02.0000] <annevk>
jgraham: seems like it should be easy to create an account?

[07:24:13.0000] <jgraham>
The implication is that your credibility will be judged on the basis of your GH profile

[07:24:18.0000] <annevk>
I see

[07:24:23.0000] <darobin>
yeah

[07:24:29.0000] <annevk>
jgraham: removed

[07:24:40.0000] <darobin>
I mean if the bar is "you must be able to create a GitHub account" I would say it's pretty low

[07:24:45.0000] <darobin>
:)

[07:24:57.0000] <gsnedders>
darobin: does the Great Firewall not block GH?

[07:24:59.0000] <annevk>
yeah, but indeed then it doesn't make sense to have it as part of the proposal

[07:25:13.0000] <darobin>
gsnedders: sometimes it does, but not regularly

[07:25:32.0000] <jgraham>
Asking people to come up with their own plan and timeline is also probably a source of bias

[07:25:38.0000] <wanderview>
in theory anyone should be able to contribute using git offline and send patches to someone else to push for them

[07:26:10.0000] <annevk>
jgraham: other diversity grants asked for the same thing, but open to suggestions

[07:26:20.0000] <darobin>
part of the problem is that the people who are already able to identify useful work areas they could contribute to are already in the loop

[07:26:27.0000] <darobin>
I'm guessing those aren't he ones you actually want

[07:26:59.0000] <darobin>
given how obscure the world of standards is you might want to ask the candidate to demonstrate a willingness to help the Web platform or something like that

[07:27:22.0000] <darobin>
explain what their vision of the Web is, what they'd expect from Web tech, what they'd like to see that they aren't seeing yet

[07:27:27.0000] <darobin>
problems they've had, etc.

[07:27:45.0000] <jgraham>
Well also I expect that the confidence to write up a proposal is correlated with the probability of being in a group that is already well represented

[07:27:52.0000] <darobin>
pick someone with an interesting vision and the requisite tech background; the rest they'll have to pick up on the job

[07:27:56.0000] <wanderview>
clearly experience in bikeshedding should be on there :-)

[07:28:03.0000] <darobin>
yeah

[07:28:20.0000] <darobin>
1. Explain in 2500 words or more which colour the bike shed should be?

[07:28:44.0000] <darobin>
2. Detail how your coding style is vastly superior to everyone else's.

[07:28:50.0000] <zcorpan>
3. ???

[07:28:53.0000] <zcorpan>
4. Profit!

[07:29:16.0000] <darobin>
3. What is the best way to encode CSS and JSON in an XML syntax?

[07:29:42.0000] <jgraham>
Maybe the entrance exam should just be an argument with TabAtkins about why his indenting preferences are insane

[07:29:53.0000] <TabAtkins>
I'LL FIGHT YOU

[07:30:00.0000] <darobin>
I wasn't aware there was a pattern to them

[07:30:17.0000] <TabAtkins>
tabs for indentation, spaces for alignment

[07:30:20.0000] <TabAtkins>
Like a sane person

[07:30:21.0000] <wanderview>
fixing indentation could be a grant project

[07:30:24.0000] <gsnedders>
darobin: how do you best encode arbitrary semantics?

[07:30:32.0000] <darobin>
gsnedders: ooh that's a good one

[07:30:42.0000] <tobie>
by "underrepresented group," do you mean pretty much anyone that's not an asshole or is this a more traditional definition of the term?

[07:30:56.0000] <darobin>
put differently "Create a serialisation format for RDF."

[07:30:57.0000] <gsnedders>
darobin: (I'll argue that the answer depends on the goal)

[07:31:09.0000] <gsnedders>
darobin: BUT RDF/XML IS GREAT?!

[07:31:13.0000] <jgraham>
annevk: Anyway, I would say that if you want to make this work you should have some preprepared projects that people can apply to

[07:31:19.0000] <darobin>
gsnedders: only if you use XML 1.1!

[07:31:29.0000] <jgraham>
Rather than just saying "make something up"

[07:31:40.0000] <gsnedders>
darobin: i prefer 1.0 5th ed

[07:31:47.0000] <jgraham>
annevk: Also talk to dianeb and Mark Surman, perhaps

[07:31:56.0000] <darobin>
gsnedders: Philistine

[07:32:01.0000] <zcorpan>
/me prefers Unicode 3.0

[07:32:06.0000] <annevk>
jgraham: we could perhaps agree on some keyword to annotate issues with that would be good to tackle for independent contributors?

[07:32:28.0000] <jgraham>
annevk: web-platform-tests has occasionally marked issues with difficulty:easy

[07:32:40.0000] <gsnedders>
darobin: "convert RDF/XML to Turtle"

[07:33:01.0000] <darobin>
gsnedders: "Define a CSS syntax for RDF."

[07:33:04.0000] <jgraham>
annevk: This is not entirely unlike the TestTWF MDN fellowship that Ben Boyle did

[07:33:05.0000] <annevk>
jgraham: not sure it has to be easy, just something you could work on for a month or so

[07:33:08.0000] <gsnedders>
jgraham: BTW, is there any off-the-shelf way to get screenshots for CSS tests?

[07:33:27.0000] <jgraham>
gsnedders: What do you mean? wptrunner supports CSS tests

[07:33:29.0000] <zcorpan>
annevk: difficulty:easy means "good first bug"

[07:33:35.0000] <darobin>
yeah

[07:33:36.0000] <gsnedders>
darobin: "… as this is a vital missing link, having already replaced SQL"

[07:33:43.0000] <darobin>
lol

[07:33:59.0000] <gsnedders>
jgraham: I mean I actually want some way to get the actual screenshots of things that aren't reftests.

[07:34:12.0000] <annevk>
tobie: I basically want to say non-cis white male

[07:34:24.0000] <darobin>
annevk: I think tobie knew that :)

[07:34:26.0000] <annevk>
tobie: but it was suggested to me this is a better way of putting that

[07:34:30.0000] <gsnedders>
annevk: you missed the hetero part

[07:34:44.0000] <tobie>
I was just being an asshole myself. :)

[07:34:49.0000] <darobin>
non-cis doesn't include hetero these days?

[07:34:54.0000] <darobin>
I mean cis

[07:34:59.0000] <wanderview>
annevk: I commented on your gist about mailing list vs gh issues

[07:35:10.0000] <gsnedders>
darobin: cis only refers to gender, afaik

[07:35:22.0000] <jgraham>
gsnedders: You could hack wptrunner to do that perhaps, but it's not off the shelf

[07:35:31.0000] <gsnedders>
jgraham: right, that's what I thought

[07:35:39.0000] <tobie>
annevk: one of the benefits of more diversity is to have a new look at things, if that person gets do to work pre-decided by someone else, that sort of defeats the purpose

[07:35:45.0000] <darobin>
gsnedders: I guess it depends on if you consider gender to include orientation — it's a very old debate :)

[07:35:53.0000] <darobin>
cf Wittig, etc.

[07:35:56.0000] <annevk>
wanderview: is this how GH notifications work these days?

[07:36:12.0000] <tobie>
^ in reaction to jgraham's suggestions to have topics to choose from

[07:36:16.0000] <wanderview>
annevk: I've never received a notification for a gist before... so I didn't think they worked... sorry

[07:36:19.0000] <gsnedders>
darobin: true, though at least insofar as what I mostly hear people meaning by it, it doesn't…

[07:36:22.0000] <gsnedders>
/me hides

[07:36:41.0000] <darobin>
bikeshed all the genders!

[07:38:34.0000] <annevk>
wanderview: they used to, but they got removed at some point

[07:38:42.0000] <annevk>
wanderview: I was just making a joke about that

[07:38:47.0000] <wanderview>
ah

[07:39:18.0000] <wanderview>
annevk: I thought you were asking for feedback on the gist on twitter... but I see now you were just saying that was your thoughts... I should have just tweeted

[07:39:27.0000] <wanderview>
/me gets more coffee

[07:44:39.0000] <wanderview>
annevk: it would be nice if we had some central whatwg document that listed other specs to watch... so I could follow that and then know when to follow new repos

[07:45:28.0000] <annevk>
wanderview: there's https://resources.whatwg.org/biblio.json in https://github.com/whatwg/resources.whatwg.org

[07:46:12.0000] <jgraham>
On a somewhat related topic, in the next couple of days I'm planning to put together a session proposal for mozfest on how the open web is made, teaching about the standards process and how we achieve interop

[07:46:25.0000] <wanderview>
thanks

[07:46:43.0000] <annevk>
wow

[07:46:47.0000] <annevk>
that's great jgraham

[07:46:51.0000] <annevk>
will it be taped?

[07:47:16.0000] <jgraham>
I don't think so, mozfest sessions are supposed to be interactive rather than stand-at-the-front-and-talk

[07:48:23.0000] <jgraham>
I'd like to cover the process from having an idea to implementation in browsers, focusing on how discussions happen, to testing of the implementation, ending with an introduction to TestTWF as something that people can go away and explore more afterwardds

[07:48:53.0000] <jgraham>
So if anyone has any good ideas for fun learning activities to help people understand standardisation, please let me know

[07:49:52.0000] <darobin>
that's really cool jgraham

[07:49:54.0000] <astearns>
make sure when you get to testing the implementation you cover how testing uncovers specification bugs

[07:50:05.0000] <darobin>
maybe you should rope in Marcos, he's written a bunch of stuff about that

[07:50:25.0000] <darobin>
"fun learning activities to help people understand standardisation"

[07:50:36.0000] <darobin>
that sentence works if you drop either the first or the last word

[07:51:10.0000] <jgraham>
darobin: Well I asked and I was told that spending an hour telling people to poke their eyeballs with a fork was unlikely to get accepted

[07:51:33.0000] <darobin>
yeah, plus we're all against forking

[07:51:36.0000] <wanderview>
an hour learning the terminology used in specs

[07:51:40.0000] <darobin>
maybe chopsticks?

[07:51:42.0000] <gsnedders>
speaking of TestTWF, has that essentially died? nothing since Portland last year? nor any talk of anything new?

[07:51:48.0000] <wanderview>
"next we will discuss the difference between a 'flag' and a boolean value"

[07:51:55.0000] <jgraham>
wanderview: haha

[07:52:03.0000] <darobin>
well played wanderview

[07:52:14.0000] <darobin>
jgraham: do you have some notions of French?

[07:52:15.0000] <jgraham>
gsnedders: The series of events does seem to be pining for the fjords, yes

[07:52:28.0000] <darobin>
if so I might be able to unearth some pres I've given about standardisation

[07:52:32.0000] <wanderview>
terminology really is a huge barrier... but I have not way to teach it to someone other than to have them work with the specs for a while

[07:52:44.0000] <darobin>
but it's perhaps more geared towards explaining the concept to completely non-tech people

[07:52:57.0000] <jgraham>
darobin: I have the notion that it's a language principally spoken in Frace. I have very little understanding of it though ;)

[07:53:10.0000] <darobin>
yeah, so probably not helpful :)

[07:53:43.0000] <gsnedders>
jgraham, darobin: I thought that was the language of the Democratic Republic of the Congo?

[07:53:55.0000] <gsnedders>
France seems small in comparison.

[07:55:34.0000] <jgraham>
I was wondering who would point out something like that

[08:08:59.0000] <MikeSmith>
annevk: about https://etherpad.mozilla.org/standards-diversity-grants I would suggest not using the word "standards" but instead "new Web technologies"

[08:09:37.0000] <MikeSmith>
"creating specifications and tests for new Web technologies"

[08:11:30.0000] <MikeSmith>
"creating specifications and tests for new Web technologies (aka 'Web standards') intended to work interoperably in all browsers"

[08:12:02.0000] <MikeSmith>
s/tests/test suites/

[08:16:22.0000] <zcorpan>
hmm, i kinda like the idea of killing <applet> altogether

[09:18:55.0000] <annevk>
MikeSmith: you sound like Ian Jacobs

[09:19:27.0000] <annevk>
MikeSmith: but maybe "Web platform diversity grants" is better

[09:19:32.0000] <annevk>
I dunno

[09:19:56.0000] <annevk>
I should have started with, why would it be better?

[09:20:10.0000] <MikeSmith>
Ian Jacobs sounds pretty good sometimes

[09:20:16.0000] <MikeSmith>
he can play the piano

[09:20:54.0000] <MikeSmith>
I just don't think most non-insane people get excited about the word "standards"

[09:21:12.0000] <MikeSmith>
they want to create stuff

[09:21:37.0000] <MikeSmith>
write stuff

[09:21:51.0000] <MikeSmith>
write specs, write tests

[09:22:22.0000] <MikeSmith>
or at least those at the people we want

[09:22:43.0000] <MikeSmith>
they have to be a little insane to want to write specs and write tests

[09:22:47.0000] <MikeSmith>
admittedly

[09:23:05.0000] <MikeSmith>
anyway, I'm bakeshedding

[09:23:58.0000] <zcorpan>
you have a bakeshed?

[09:26:50.0000] <MikeSmith>
yep, for clambaking

[14:06:57.0000] <annevk>
Not really mentioned through Ian's email, there's now https://github.com/whatwg/html and https://twitter.com/htmlstandard

[15:15:46.0000] <ato>
annevk: \o/


2015-08-28
[18:32:40.0000] <MikeSmith>
anybody have a clue about http://stackoverflow.com/questions/32103768/accessing-reponse-headers-on-cors-request

[18:33:41.0000] <MikeSmith>
I tried the code in question there and get the same result

[18:34:08.0000] <MikeSmith>
doing response.headers.get('Link') returns null despite the fact that if you look at the console, in the response it's getting there is in fact a Link header

[18:35:10.0000] <MikeSmith>
the only headers I can actually see with response.headers.get for the response there are the Content-Type and Cache-Control headers

[19:01:25.0000] <Domenic>
Doesn't CORS block all headers except those allowed by Access-Control-Allow-Headers, MikeSmith?

[19:05:50.0000] <annevk>
Domenic: correct

[19:05:53.0000] <annevk>
/me just replied

[19:30:02.0000] <MikeSmith>
oh

[19:31:37.0000] <MikeSmith>
yeah I'd just not bothered to check Access-Control-Allow-Headers

[19:32:10.0000] <MikeSmith>
annevk: thanks for replying there

[19:33:40.0000] <MikeSmith>
Domenic: ah but annevk's answer is about Access-Control-Expose-Headers

[19:33:55.0000] <Domenic>
Ah didn't even know about that one

[19:34:09.0000] <annevk>
Oh, I just read Expose where Domenic wrote Allow

[19:34:28.0000] <MikeSmith>
but wait I think I don't understand what the conforming behavior is here

[19:34:33.0000] <annevk>
It's a bit too hot to fall asleep here, but clearly I'm not very much awake either

[19:34:49.0000] <MikeSmith>
heh

[19:35:12.0000] <annevk>
hallvors: do we test parsing of CORS headers? https://stackoverflow.com/questions/24514666/why-is-this-cors-request-failing-only-in-firefox suggests Safari/Chrome are sloppy

[19:35:16.0000] <boogyman>
why is the header given if it's not allowed? shouldn't that be truncated at the network before ever being given to the client?

[19:36:01.0000] <annevk>
boogyman: Access-Control-Expose-Headers is defense-in-depth for the server

[19:37:11.0000] <MikeSmith>
/me reads cors

[19:37:13.0000] <MikeSmith>
oofs

[19:37:21.0000] <MikeSmith>
/me reads https://fetch.spec.whatwg.org/#concept-filtered-response-cors

[19:40:38.0000] <boogyman>
annevk: are you assuming that header has been set on said server? Nothing in the op's message implies that to be true

[19:41:41.0000] <annevk>
boogyman: I'm not sure what you're asking

[19:41:47.0000] <boogyman>
I understand that header provides this "defense in depth" concept, but I don't understand it's relevance to the thread

[19:43:19.0000] <MikeSmith>
/me keeps busy voting up the answers annevk is posting on SO right now

[19:44:08.0000] <annevk>
boogyman: if you want to read a Link header value from a cross-origin resource, you need to use that header to get the Link header value exposed to script

[19:46:05.0000] <MikeSmith>
annevk: you should answer fetch/CORS questions on SO more often

[19:50:51.0000] <boogyman>
okay, so the client (in this case the browser) will only allow programmatic access if the key is added to that header (defense in depth)? But what about human eyes? Shouldn't the server never provide that header, regardless of how the client may react; is my understanding incorrect?

[19:55:03.0000] <annevk>
boogyman: it depends on what the server is concerned with

[19:55:36.0000] <annevk>
boogyman: note that web's security model is build around the thesis that the server is not aware it may be leaking sensitive data

[19:56:12.0000] <annevk>
MikeSmith: I tried to search for "fetch" but that is rather useless

[19:56:22.0000] <MikeSmith>
yeah

[19:56:27.0000] <annevk>
MikeSmith: let me know if you find any, happy to help out folks whenever

[19:56:34.0000] <MikeSmith>
will do

[19:57:09.0000] <MikeSmith>
maybe we should try to get somebody to add a "fetch-method" tag, or "fetch-standard"

[19:57:38.0000] <MikeSmith>
(I don't have enough SO reputation to add tags myself or I would)

[19:58:52.0000] <MikeSmith>
maybe Domenic does?

[19:59:23.0000] <boogyman>
re wsm: that's worst case scenario. It would be considered out of specification compliance though, right? The end point should understand the type of response it is expected to provide given the request details (it is allowed to guess at anything else that is not implied by the request eg: no Accept, the server could respond with with any Content-Type)

[20:04:16.0000] <annevk>
There's no specification that requires that a server cannot reveal confidential information when accessed from a certain IP address... Or when accessed behind a firewall (through evil.com).

[20:05:16.0000] <boogyman>
isn't that what the Access-Control headers are exactly for when making a cors request?

[20:08:33.0000] <annevk>
Sure, but we don't want folks putting those headers there and then inadvertently leaking some details they did not expect, that's why there's some additional headers to reveal all the things

[20:10:32.0000] <annevk>
Domenic: so the idea is that we'll use our own copy of the repo to make PRs from and not just use branches?

[20:10:49.0000] <Domenic>
annevk: yeah, that's what philipj seems to prefer

[20:11:55.0000] <annevk>
I guess I can try that out, I always seem to end up with a mess that way, but I can learn

[20:14:19.0000] <Domenic>
Currently trying to get file-issue.js working, woo

[20:14:21.0000] <boogyman>
annevk: but as an author, I take care of the headers I expose, so by the specification allowing that (instead of it being human error in your scenario), I am now unexpectedly able to leak information even though the headers /have/ been explicitly provided

[20:14:55.0000] <annevk>
boogyman: leaking them to whom?

[20:15:08.0000] <boogyman>
whomever is making the request

[20:17:39.0000] <boogyman>
It's good that the client doesn't given access to the key because the key was not provided, yet at the same time I would argue the fact that the server did provide the header is a bad thing.

[20:19:25.0000] <MikeSmith>
annevk: Domenic I'm not sure why philipj prefers that you'd make PRs from forks instead of branches, but I you can convince him otherwise. But IMHO there are better collaborative advantages to using branchesーespecically if the number of people pushing is small (as it is here)ーand not many disadvantages

[20:19:25.0000] <boogyman>
because the header*

[20:20:03.0000] <MikeSmith>
Domenic: I'd be curious to hear what philipj sees as the disadvantages of y'all using branches for PRs

[20:20:16.0000] <Domenic>
MikeSmith: IIRC he says they tend to accumulate

[20:20:20.0000] <MikeSmith>
well

[20:20:25.0000] <MikeSmith>
that's true

[20:20:31.0000] <MikeSmith>
but you just delete them

[20:20:37.0000] <MikeSmith>
hygiene

[20:20:46.0000] <MikeSmith>
and GH has the button which makes it easy

[20:21:07.0000] <MikeSmith>
any time you merge a PR, the "delete this branch" button is right there

[20:21:22.0000] <Domenic>
Yeah that's my experience as well

[20:21:27.0000] <Domenic>
But I don't really care much

[20:21:36.0000] <MikeSmith>
ok

[20:23:59.0000] <MikeSmith>
anway for the wpt case, the biggest advantage we've found in practice is that any pusher can make a change to any PR branch. And sometimes we've used that. e.g., When you're reviewing, for small editorial-type changes, it's sometimes way easier and faster to just make the change in the branch yourself rather than needing to write up a review comment to ask the PR submitter to do that

[20:24:33.0000] <MikeSmith>
I know jgraham very much prefers branches for PRs, and could probably articulate some reasons

[20:24:45.0000] <MikeSmith>
anyway, 'nuff said

[20:28:33.0000] <MikeSmith>
ah whatwg.org/newbug is nice to have

[20:28:34.0000] <Domenic>
Yeah that's a good point, I used that feature the other day with streams

[20:29:05.0000] <MikeSmith>
Domenic: yeah once you're used to using that feature it'd kind of hard to go back

[20:29:06.0000] <Domenic>
Maybe philipj will be persuaded by these arguments when he wakes up :)

[20:29:10.0000] <MikeSmith>
heh

[20:29:17.0000] <MikeSmith>
I hope so

[20:29:37.0000] <MikeSmith>
so shouldn't whatwg.org/newbug be, like, whatwg.org/newbug?spec=html or something?

[20:30:08.0000] <Domenic>
Heh, that would be neato I suppose

[20:31:00.0000] <MikeSmith>
but I guess even that it would make sense to have it go to https://github.com/whatwg/html/issues/new by default (if no query param specified)

[20:33:32.0000] <Domenic>
MikeSmith: can you do a thing where people cannot file new bugs in the HTML component on bugzilla? I have heard of such things being done in the past.

[20:34:26.0000] <MikeSmith>
yes

[20:34:42.0000] <MikeSmith>
I think we should go ahead and do that right now

[20:34:44.0000] <MikeSmith>
agreed?

[20:34:49.0000] <MikeSmith>
or you want to wait?

[20:35:01.0000] <MikeSmith>
annevk: ↑

[20:35:26.0000] <annevk>
/me reads scrollback

[20:36:42.0000] <annevk>
MikeSmith: please do

[20:37:01.0000] <annevk>
MikeSmith: we will only close bugs in HTML from now on

[20:37:32.0000] <annevk>
and for each bug we close, I'm sure two issues will arise, though I hope not

[20:38:03.0000] <boogyman>
annevk: thanks for your time re: cors discussion

[20:38:04.0000] <Domenic>
Any ideas on https://www.w3.org/Bugs/Public/show_bug.cgi?id=28992 ?

[20:38:44.0000] <annevk>
boogyman: I agree with you that it would be better for servers to reveal as little as possible

[20:39:16.0000] <annevk>
boogyman: although the only attacker I can see here is the user and potentially mitm if the server didn't use HTTPS properly

[20:39:41.0000] <annevk>
Domenic: sounds like a validator message submitted as bug

[20:39:46.0000] <annevk>
Domenic: so INVALID

[20:39:52.0000] <annevk>
/me is fixing all typo bugs in one sweep

[20:40:30.0000] <Domenic>
haha oh i was starting on that, good thing you said something :P

[20:42:02.0000] <Domenic>
Oooh a juicy one

[20:42:03.0000] <Domenic>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=28219

[20:45:08.0000] <MikeSmith>
christ, "Bugs: 4005" (for the HTML spec component in bugzilla)

[20:46:01.0000] <MikeSmith>
OK, no more music by the HTML component in W3C bugzilla

[20:46:16.0000] <MikeSmith>
that is, no new bugs can be filed there

[20:46:42.0000] <MikeSmith>
we will just have to get by with the paltry 4005 we already have there

[20:47:14.0000] <Domenic>
Only 400-odd open...

[20:47:50.0000] <MikeSmith>
yeah, that's open-bugs number is seriously not so daunting

[20:51:57.0000] <Domenic>
Some good stuff in https://www.w3.org/Bugs/Public/quips.cgi?action=show

[20:54:05.0000] <MikeSmith>
anyway, I look back with some melancholy on the life of HTML in W3C bugzilla, recalling epic moments in history like when 8 years ago or whenever, when I first put some facts on the ground by setting it up for us to use for the spec when Hixie was still working on it in the HTML WG, then the grand "project convergence" when Hixie cloned all the open bugs over to the WHATWG product, and then the time when

[20:54:11.0000] <MikeSmith>
 I took the component on his first fishing trip at the cottage by the lake, and so on

[20:59:23.0000] <MikeSmith>
botie: inform zcorpan, seems like we should now please consider closing the W3C "HTML - <img>" component to new bugs, and moving to either just using https://github.com/whatwg/html/issues/new (or to https://github.com/ResponsiveImagesCG/picture-element/issues if there's still good reason to do that)

[20:59:23.0000] <botie>
will do

[20:59:33.0000] <annevk>
Domenic: heh, I caused that feature to be added

[21:00:03.0000] <annevk>
botie: inform zcorpan, we should merge <picture> into HTML proper now it can be maintained through PRs

[21:00:03.0000] <botie>
will do

[21:05:22.0000] <MikeSmith>
Domenic: dinnet know "Git tradition is no periods at the end of commit message first-lines."

[21:05:32.0000] <MikeSmith>
/me reads https://github.com/erlang/otp/wiki/Writing-good-commit-messages

[21:06:30.0000] <MikeSmith>
in reviewing patches to the validator code, Henri would sometimes ask if I could add a period to the commit message

[21:06:44.0000] <MikeSmith>
but I always sorta was happier without the period

[21:06:53.0000] <MikeSmith>
now I feel vindicated

[21:07:30.0000] <MikeSmith>
"Don't end the summary line with a period - it's a title and titles don't end with a period." YES

[21:07:48.0000] <annevk>
Domenic: what's the GitHub way of approving a PR?

[21:08:02.0000] <Domenic>
annevk: "LGTM"

[21:08:33.0000] <Domenic>
annevk: why is https://github.com/whatwg/html/pull/7 async instead of defer, i am so confused

[21:08:53.0000] <annevk>
Domenic: because that's what the script says

[21:09:08.0000] <annevk>
Domenic: that script listens for DOMContentLoaded

[21:09:12.0000] <Domenic>
Well, yeah, but I wrote the script :P. And I clearly don't know any better.

[21:09:26.0000] <Domenic>
I guess defer seems in the spirit of "don't interrupt me while i'm loading this giant document"

[21:09:37.0000] <annevk>
Domenic: presumably we could rewrite our scripts at some point to be better about all this

[21:09:42.0000] <annevk>
if we cared enough

[21:09:54.0000] <annevk>
Domenic: well, you copied from zcorpan, he started the trend I think

[21:09:54.0000] <Domenic>
I can change the comment in file-issue.js, just confused.

[21:10:11.0000] <annevk>
Domenic: see https://resources.whatwg.org/file-bug.js

[21:10:32.0000] <Domenic>
Right.

[21:10:36.0000] <Domenic>
That one polls though, crazysauce.

[21:35:46.0000] <Domenic>
annevk: So, fetch everything. Check out your master. Reset it hard to whatwg/html master. Then check out your FrameRequestCallback branch, and rebase it on top of your master. You can then force push to your FrameRequestCallback branch and everything should work.

[21:38:27.0000] <annevk>
Domenic: how do I do the hard reset?

[21:38:39.0000] <philipj>
annevk, Domenic, MikeSmith: I'm about to head to the train, today is a day off

[21:38:47.0000] <annevk>
philipj: enjoy

[21:39:05.0000] <philipj>
About branches in the "production" repo, those seem to accumulate, but if you have a way to not make them accumulate, fine by me

[21:39:09.0000] <philipj>
/me is gone

[21:40:26.0000] <Domenic>
annevk: git reset --hard upstream/master or whatever you called it

[21:41:30.0000] <annevk>
ta

[21:45:39.0000] <MikeSmith>
well, I do have ways to make branches not accumulate. The easiest way is simply for whoever merges a PR to just take a half-second to push the "delete branch" button (and for anybody else to at any time just delete any got-left-behind already-merged branches that they notice)

[21:53:10.0000] <Domenic>
Oops, build hook was not pointing to the right domain. Fixed.

[21:53:35.0000] <annevk>
So I can't do the git push for some reason since I can't authenticate from the command line

[21:53:59.0000] <annevk>
I use 2FA, but GitHub also has my SSH key so I've no idea what's going on

[21:54:33.0000] <annevk>
I've been happily using the GitHub client for Mac staying ignorant of all this

[21:55:40.0000] <MikeSmith>
2FA doesn't affect the command-line behavior afaik

[21:56:16.0000] <Domenic>
2FA means you need special passwords

[21:56:56.0000] <MikeSmith>
annevk: if you do "ssh -T github.com" what happens?

[21:56:57.0000] <Domenic>
annevk: you can generate such passwords at https://github.com/settings/tokens

[21:57:05.0000] <annevk>
MikeSmith: that works

[21:57:19.0000] <Domenic>
GitHub for Mac might have set up the remote as HTTPS instead of SSH

[21:57:34.0000] <Domenic>
you could change that and things would probably work fine

[21:58:34.0000] <Domenic>
git remote set-url whateveryounamedyourannevkremote git⊙gc:annevk/html.git

[21:58:40.0000] <MikeSmith>
Domenic: I have 2FA set up for github and I don't need special passwords; git push to the ssh repo URL from the command line just works as expected

[21:58:48.0000] <annevk>
Domenic: that did work

[21:58:56.0000] <annevk>
Domenic: with the token password

[21:58:58.0000] <Domenic>
MikeSmith: yeah if you're set up using SSH no need

[21:59:06.0000] <Domenic>
MikeSmith: but if you're using HTTPS you need a token password

[21:59:10.0000] <MikeSmith>
ah

[22:00:09.0000] <MikeSmith>
shouldn't y'all be using the git⊙gc:whatwg/html.git URL?

[22:00:11.0000] <MikeSmith>
ah

[22:00:26.0000] <MikeSmith>
this annevk pushing to his fork, I see

[22:07:41.0000] <annevk>
MikeSmith: Domenic: so now I made some changes to a branch, how do commit those into the previous commit?

[22:07:56.0000] <Domenic>
git commit --amend

[22:13:30.0000] <annevk>
I think I did it

[22:13:40.0000] <annevk>
But geez this is hard

[22:15:11.0000] <Domenic>
You get used to it :)

[22:16:35.0000] <Domenic>
Oh how embarassing, GitHub thinks that the spec's .inc files are PHP.

[22:16:53.0000] <MikeSmith>
hah

[22:17:15.0000] <Hixie>
Domenic: what's your e-mail address?

[22:17:47.0000] <MikeSmith>
hola Hixie

[22:18:51.0000] <annevk>
Domenic: seems like you still have better merge techniques

[22:18:57.0000] <Hixie>
hey MikeSmith

[22:19:06.0000] <annevk>
Domenic: I believe I use your pr bash but it never closes automatically...

[22:20:47.0000] <annevk>
Hixie: msg'd you Domenic's email, he might be asleep

[22:21:00.0000] <Domenic>
annevk: the auto-closing is only if you are very obsessive like me and force-push your final version up on to the PR branch. That ensures your commit shas are the same on master and on the PR branch and thus it happens.

[22:21:09.0000] <Domenic>
I really *should* sleep

[22:21:11.0000] <Hixie>
he posted here like literally 500ms ago, but i guess he could be asleep typing...

[22:21:18.0000] <Hixie>
:_P

[22:21:58.0000] <annevk>
Domenic: I see, I might not worry about that just yet

[22:22:12.0000] <Hixie>
sent mail about pdf

[22:23:49.0000] <Domenic>
\o/

[22:23:52.0000] <Domenic>
actually sleeping now

[22:25:50.0000] <Hixie>
ditto

[00:08:45.0000] <zcorpan>
Domenic: wanna close https://www.w3.org/Bugs/Public/show_bug.cgi?id=23039 ?

[00:14:08.0000] <MikeSmith>
annevk: https://www.w3.org/Bugs/Public/show_bug.cgi?id=20701 seems like a priority, since it's a case where the spec is behind implementation(s), and there seems to be agreement already that the spec will be updated to match what already got implemented

[00:14:59.0000] <MikeSmith>
annevk: so not sure anybody other than Hixie is brave/foolhardy/patient enough to want to tackle it

[00:15:15.0000] <annevk>
Been a fair bit of spam in that bug too

[00:15:56.0000] <MikeSmith>
annevk: yeah, weird spam

[00:16:06.0000] <MikeSmith>
sorry for not having caught that when it was happening

[00:16:31.0000] <Ms2ger>
Also, <ruby>

[00:16:40.0000] <MikeSmith>
zcorpan: looks like Ms2ger did just now close that

[00:16:58.0000] <MikeSmith>
Ms2ger: what specifically about <ruby>?

[00:17:15.0000] <MikeSmith>
oh, matching implementations

[00:17:18.0000] <Ms2ger>
The parsing changes from the w3c fork never made it back, did they?

[00:17:24.0000] <MikeSmith>
right

[00:17:29.0000] <MikeSmith>
no, they didn't yet

[00:18:14.0000] <Ms2ger>
On another note, having the generated spec in a git repo somewhere would be nice for my offline use

[00:19:02.0000] <Ms2ger>
Though I guess I don't need that often anymore

[00:21:08.0000] <annevk>
So it basically comes down to defining https://etherpad.mozilla.org/html5-cross-origin-objects

[00:21:51.0000] <MikeSmith>
Ms2ger: fwiw I've been adding "spec_lags_implementation" in the Whiteboard field, for cases that are such (well, I've only done it for two bugs so far, but it's a start)

[00:23:02.0000] <MikeSmith>
annevk: you pasted that in from somewhere else? (you didn't write all that up just now..)

[00:23:15.0000] <annevk>
MikeSmith: that's from that bug

[00:23:22.0000] <MikeSmith>
/me reads

[00:23:31.0000] <Ms2ger>
I was going to suggest adding a 100-columns lint, but there's about 9000 lines that cross it :)

[00:23:32.0000] <MikeSmith>
ah those are Hixie's notes

[00:23:40.0000] <MikeSmith>
Ms2ger: haha

[00:25:00.0000] <MikeSmith>
/me for the first time he can remember, set tw=100 in his vim today when writing a patch

[00:25:02.0000] <Ms2ger>
annevk, I guess the IDEAS section at the end would be better in an issue

[00:27:38.0000] <annevk>
Ms2ger: feel free

[00:27:56.0000] <Ms2ger>
It's a brave new world

[00:29:20.0000] <MikeSmith>
heh

[00:30:09.0000] <MikeSmith>
so incidentally looking at https://github.com/whatwg/html/pull/14#commitcomment-12941721 I didn't know GH could thread comments like that

[00:30:53.0000] <TabAtkins>
Bluh at columns limit, but since most people don't understand how to linebreak properly, I guess wtv

[00:30:59.0000] <MikeSmith>
ah I see, those are comments from the diff, nm

[00:40:41.0000] <annevk>
Ms2ger: thank you. I'll leave it open for now to see what Domenic thinks

[00:40:49.0000] <Ms2ger>
wfm

[00:47:40.0000] <MikeSmith>
can anybody think of why the <li> element should not be classified as "palpable content"?

[00:47:57.0000] <MikeSmith>
because the spec currently doesn't classify it as such

[00:48:02.0000] <MikeSmith>
seems like an oversight

[00:51:23.0000] <zcorpan>
MikeSmith: why would it be? you can't put it in elements that want palpable content?

[00:52:10.0000] <MikeSmith>
zcorpan: this gets back to https://www.w3.org/Bugs/Public/show_bug.cgi?id=28728

[00:52:26.0000] <MikeSmith>
the spec doesn't actually define "elements that want palpable content"

[00:53:09.0000] <zcorpan>
MikeSmith: "As a general rule, elements whose content model allows any flow content or phrasing content should have at least one node in its contents that is palpable content and that does not have the hidden attribute specified."

[00:53:10.0000] <MikeSmith>
instead it defines such elements themselves as "palpable content"

[00:54:06.0000] <MikeSmith>
zcorpan: "The following elements are palpable content"

[00:54:50.0000] <zcorpan>
MikeSmith: yes? and any element whose content model allows flow or phrasing wants a palpable child

[00:56:05.0000] <MikeSmith>
ok yeah

[00:56:24.0000] <MikeSmith>
will try to make wording for a note to help clarify this

[00:57:23.0000] <MikeSmith>
because it's not clear now

[01:04:38.0000] <annevk>
zcorpan: did you see the suggestion to merge <picture> into HTML now that we have a distributed editing model?

[01:05:06.0000] <annevk>
zcorpan: actually doing it might be a little involved since it requires updating the build script I think, but should be okay

[01:05:35.0000] <zcorpan>
annevk: yeah, that's fine with me. i think the picture repo contains the entire history of html, so that will need some massaging

[01:06:53.0000] <zcorpan>
and i'm not competent enough with git to pull that off (i.e. to get a sane history)

[01:08:22.0000] <annevk>
zcorpan: ooh that does sound tricky

[01:08:35.0000] <annevk>
zcorpan: I wonder if philipj can help out when he's back

[01:30:51.0000] <zcorpan>
should we write something on the whatwg blog?

[01:35:06.0000] <annevk>
zcorpan: we didn't want to make a big deal about it for now

[01:37:38.0000] <zcorpan>
k

[01:54:06.0000] <annevk>
Anyone suggestions for how to reword the whatwg/html README about the 100 character wide columns?

[01:58:19.0000] <MikeSmith>
zcorpan: please take a look at https://github.com/whatwg/html/pull/24 and add comments if you have any

[04:21:01.0000] <zcorpan>
Domenic: so i wanted the bug-filer link to be available ASAP so the user doesn't have to wait for the document to finish loading before s/he can report a bug

[04:22:12.0000] <TabAtkins>
zcorpan: And so they can report the spec being slow as a bug?

[04:23:24.0000] <zcorpan>
sure

[05:09:59.0000] <MikeSmith>
annevk: will try to think of some good wording

[05:11:18.0000] <MikeSmith>
annevk: I guess for going forward right now I would be more worried about ending up getting bunches of patches submitted from people who don't actually understand the spec

[05:12:05.0000] <MikeSmith>
annevk: e.g., the comment at https://github.com/whatwg/html/pull/24#issuecomment-135694902

[05:12:21.0000] <MikeSmith>
「Why is "Text" capitalized?」

[05:14:31.0000] <MikeSmith>
so I think the README will eventually need to have wording saying something like, Your patch will have to be rejected if it's not consistent with the technical conventions used in the language in the spec.

[05:16:17.0000] <MikeSmith>
e.g., "Terms like Text are capitalized and linked to <dfn>s etc. for a reason; you need to read the spec and understand the reasons why it's written the way it is, and why it's necessary for any patch you submit to be written in the same way."

[05:16:18.0000] <Domenic>
 Dammit annevk got all the easy ones I bookmarked last night

[05:16:24.0000] <MikeSmith>
heh

[05:17:50.0000] <MikeSmith>
"If the spec words something in certain way, or marks up something in a certain way, always assume it was written that way very intentionally and carefully for a specific purpose."

[05:17:53.0000] <MikeSmith>
etc.

[05:23:58.0000] <nox>
annevk: I've noticed some spaces went away in DOM, is that known?

[05:24:52.0000] <astearns>
does DOM use bikshed? https://github.com/tabatkins/bikeshed/issues/467

[05:24:59.0000] <Ms2ger>
Yes

[05:27:49.0000] <ato>
annevk: Has an “absolute path relative url” been renamed to something else?

[05:38:51.0000] <Krinkle>
Hm.. how far are source maps on the standards track? I'm trying to figure out whether it's a bug or gap in specification that //# sourceURL in Chrome treats //foo.com/bar.js as relative to (no domain), instead of expanding to http:// or using something like that

[05:38:57.0000] <tantek>
/me notes 4y+2d anniversary of http://tantek.com/2011/238/b1/many-ways-slice-url-name-pieces

[05:39:05.0000] <Krinkle>
especially since it does support absolute urls.

[05:40:03.0000] <Krinkle>
In the generic handling for it, would be nice not to have to do string manipulation on href values before passing to eval.

[05:50:01.0000] <Domenic>
Krinkle: last I saw their spec was a google doc that seemed kind of iffy

[05:50:08.0000] <Krinkle>
yeah

[05:50:14.0000] <Krinkle>
is that still the state of things?

[05:50:32.0000] <Krinkle>
Looks like something that's quite widely used now. Time for a spec.

[05:51:01.0000] <Krinkle>
Though I suppose it's hard to claim because it's not strictly of use within the DOM or HTML categoriers.

[05:51:16.0000] <Krinkle>
similar how console.log isn't standardised (or did I miss that one?)

[05:51:57.0000] <Krinkle>
but we could at least put it up somewhere using spec-like formatting, maybe on github pages somewhere as a vendor-maintained spec.

[05:52:08.0000] <Krinkle>
google doc isn't a good issue tracker :P

[05:56:50.0000] <smaug____>
I thought there is some draft for console.log

[05:56:53.0000] <Domenic>
Krinkle: would you like a whatwg/source-maps repo all of your own?

[05:57:05.0000] <Domenic>
And yeah, we have a couple console spec repos that never got finished

[05:57:21.0000] <Krinkle>
Aha, that'd be amazing

[05:57:44.0000] <Krinkle>
i'll have no excuse to finally give in and learn about how to use bikeshed

[05:57:46.0000] <Domenic>
Sweet :). GitHub username?

[05:57:58.0000] <Krinkle>
Krinkle

[05:58:36.0000] <Krinkle>
http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/

[05:58:36.0000] <Krinkle>
https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?hl=en_US&pli=1&pli=1

[05:59:18.0000] <Krinkle>
CC BY-SA so that's doable.

[05:59:41.0000] <Krinkle>
Though we usually use cc0, right?

[06:00:02.0000] <Domenic>
Yeah

[06:00:22.0000] <Domenic>
That's a pretty restrictive license actually

[06:00:25.0000] <Domenic>
Interesting

[06:00:30.0000] <Krinkle>
I'll create an issue asking the authors to re-license

[06:00:31.0000] <Domenic>
Depends on how much text you're reusing directly

[06:00:33.0000] <Krinkle>
In the new repo?

[06:00:40.0000] <Domenic>
Yeah seems good

[06:01:42.0000] <Krinkle>
I don't have massive plans for the spec, so at this point, I do intend to import most of the writing as-is

[06:01:53.0000] <Ms2ger>
smaug____, yeah, I've seen one or two

[06:01:54.0000] <Domenic>
Gotcha

[06:01:57.0000] <Krinkle>
at least to make any changes more explicit as follow-up commits

[06:02:35.0000] <Krinkle>
Domenic: Can you close the wiki?

[06:02:41.0000] <Domenic>
For general setup, the easiest thing to do for now will be to work on gh-pages and check in both index.bs source, and index.html output. You can also do fun things with build scripts running on Travis, but that might be yakshaving.

[06:02:52.0000] <Krinkle>
Yeah

[06:02:55.0000] <Domenic>
Done.

[06:02:56.0000] <Krinkle>
And make gh-pages the default branch

[06:03:02.0000] <Krinkle>
If not already, I don't know

[06:03:11.0000] <Ms2ger>
There's http://sideshowbarker.github.io/console-spec/ but also something else...

[06:03:18.0000] <Krinkle>
https://github.com/whatwg/dom is a good example to draw from structure wise?

[06:03:28.0000] <Domenic>
Krinkle: it appears you need to actually push a gh-pages commit before I can do that

[06:03:35.0000] <Krinkle>
Ah, okay

[06:03:37.0000] <Domenic>
And yeah it is

[06:03:56.0000] <MikeSmith>
Ms2ger: I think terinjokes was working on a real console spec

[06:04:41.0000] <Ms2ger>
https://github.com/terinjokes/console-spec

[06:04:47.0000] <Ms2ger>
You should link it

[06:11:14.0000] <MikeSmith>
I should just redirect it I guess

[06:11:55.0000] <MikeSmith>
Ms2ger: except I don't see where it's actually published

[06:12:09.0000] <MikeSmith>
which I remember now is why I didn't link to it already

[06:12:16.0000] <MikeSmith>
and I don't want to just link the repo

[06:12:27.0000] <Ms2ger>
The latest rendered version can be viewed at https://terinjokes.github.io/console-spec.

[06:12:55.0000] <MikeSmith>
/me looks

[06:13:22.0000] <MikeSmith>
so yeah now I also remember there's still almost nothing there

[06:14:47.0000] <MikeSmith>
so I'd rather really not (re)waste any more time futzing around with linking/redirecting to it until it would actually be useful/rewarding for anybody to spend time doing that

[06:14:55.0000] <Krinkle>
Hm.. I guess I have to name it index.bs so that it creates index.html

[06:15:12.0000] <MikeSmith>
in the mean time, http://getfirebug.com/wiki/index.php/Console_API is still a lot more useful to people

[06:16:19.0000] <MikeSmith>
annevk: see my PR about the 100-character thing, which is the best wording I can manage to come up with

[06:16:40.0000] <Domenic>
Yeah until we have one console spec to rule them all, let a thousand console specs bloom

[06:22:49.0000] <MikeSmith>
Domenic: I guess I should actually take time to read through all of https://github.com/erlang/otp/wiki/Writing-good-commit-messages

[06:23:14.0000] <MikeSmith>
the statements of rationale in that are great

[06:23:34.0000] <Ms2ger>
FTR, I disagree with no-period-at-end-of-first-sentence

[06:26:39.0000] <jgraham>
FTR I think that kind of thing is pointless bikeshedding

[06:27:02.0000] <Ms2ger>
Pointless

[06:27:06.0000] <Ms2ger>
I see what you did there

[06:27:51.0000] <jgraham>
It seems that periodically I can make an unintentional pun ;)

[06:28:14.0000] <Ms2ger>
Ooh, you're on a roll

[06:33:39.0000] <smaug____>
/me thinks long commit messages are just adding extra noise, and short description + link to the bug is better

[06:48:30.0000] <Krinkle>
Domenic: Hm.. before I go much further in converting the google doc into markdown/bikeshed, you reckon it'll gain traction? I mean, right now it's managed by Mozilla mostly via the google mailinglist. I could ask there first.

[06:50:01.0000] <Domenic>
Krinkle: yeah, that is probably a good idea... especially if you aren't planning on investing too much time beyond just converting the doc. If it's just a format change that's not so valuable.

[06:50:17.0000] <wanderview>
hmm... I guess the html spec repo might be higher traffic than the other repos I watch

[06:50:18.0000] <Krinkle>
Yeah, they have no obligation to use github forward

[06:50:37.0000] <Krinkle>
Domenic: But it is something whatwg would want to cover under its umbrella?

[06:50:49.0000] <Krinkle>
I don't know what authority decides what whatwg/* covers :)

[06:51:13.0000] <Domenic>
Krinkle: definitely. If we have an active editor :)

[06:53:31.0000] <Domenic>
Krinkle: but yeah getting buy in from the people currently maintaining it is probably a pretty important step.

[06:53:52.0000] <Krinkle>
Domenic: Yeah, and we can invite the current editors to become active editors here, right?

[06:54:16.0000] <Domenic>
Krinkle: for sure!

[06:54:28.0000] <Krinkle>
Maybe some of them have already participated in whatwg conversations in the past.

[06:57:04.0000] <Krinkle>
Hm.. seems they prefer "Source Map" as opposed to Source Maps

[06:57:07.0000] <Krinkle>
makes sense I suppose

[06:57:46.0000] <Domenic>
Want a rename?

[06:57:50.0000] <Krinkle>
Yeah

[06:58:12.0000] <Domenic>
Done

[06:58:16.0000] <Krinkle>
Thx

[07:06:51.0000] <Krinkle>
Domenic: Sent, bcc-ed you

[07:12:52.0000] <nox>
There is no way to distinguish adding an attribute from removing an attribute through mutation records, right?

[07:13:06.0000] <MikeSmith>
jgraham: given the 50-character-summary git convention, I think using consistent language conventions for the summary is not pointless if the end result is that the commit summaries are consistently shorter rather than consistently longer (e.g., it typically make thems 3-4 characters shorter, by dropping the -ed with one other character before it, along with the period)

[07:13:21.0000] <smaug____>
nox: how so

[07:13:41.0000] <nox>
smaug____: Sorry, changing an attribute vs removing an attribute.

[07:13:42.0000] <smaug____>
nox: if you observe the old value,  adding an attribute has null old valu

[07:13:43.0000] <jgraham>
MikeSmith: The 50 character summary convention is also not all that

[07:13:46.0000] <nox>
smaug____: Change: smaug____: 'Queue a mutation record of "attributes" for element with name attribute’s local name, namespace attribute’s namespace, and oldValue attribute’s value.'

[07:13:56.0000] <nox>
Remove: 'Queue a mutation record of "attributes" for element with name attribute’s local name, namespace attribute’s namespace, and oldValue attribute’s value.'

[07:14:00.0000] <MikeSmith>
jgraham: yeah I know, but it's there

[07:14:02.0000] <smaug____>
nox: if you remove attribute, you can check .getAttribute what is the new value

[07:14:22.0000] <smaug____>
and it is null if there is no attribute anymore

[07:15:18.0000] <jgraham>
MikeSmith: "there" in the sense that some people suggest it and GitHub is annoying at some length that isn't 50 characters (and annoying in a dumb way too; it will replace one character over the limit with three periods)

[07:15:34.0000] <jgraham>
I tend to agree that the first line should be reasonably short

[07:15:42.0000] <jgraham>
I don't think you should kill yourself

[07:16:05.0000] <Ms2ger>
It's actually a unicode ellipsis now

[07:17:37.0000] <MikeSmith>
jgraham: agreed about "I don't think you should kill yourself". Especially when futzing with the commit summary makes it less clear, or more klunkly

[07:17:53.0000] <MikeSmith>
we should all just write commit summaries in Chinese

[07:18:11.0000] <MikeSmith>
you can write an entire book in 50 characters in Chinese

[07:20:26.0000] <Ms2ger>
I recently learned the Chinese character for "get married"

[07:20:49.0000] <Ms2ger>
In utf-16, it's 0x5A5A

[07:21:03.0000] <Ms2ger>
Which happens to be what we use to fill freed memory

[07:22:16.0000] <nox>
smaug____: That could have changed by the time the mutation record is handled.

[07:22:27.0000] <nox>
smaug____: In the case of children changes, you still have all the information, even if it changed.

[07:22:36.0000] <nox>
In the case of attributes, not so much.

[07:23:04.0000] <smaug____>
nox: when you handle mutation records, you may need to check the latest mutation records

[07:23:34.0000] <smaug____>
and if you need to be very careful, use takeRecords()

[07:24:30.0000] <zcorpan>
is botie not working?

[07:24:50.0000] <jgraham>
botie: Are you broken?

[07:24:51.0000] <botie>
i don't know, jgraham

[07:25:01.0000] <nox>
smaug____: Meh, I still find that inconsistent.

[07:25:02.0000] <jgraham>
zcorpan: Signs are inconclusive

[07:25:36.0000] <smaug____>
nox: you have all the information with attributes

[07:25:37.0000] <zcorpan>
it didn't inform me of things it was told afaict

[07:25:43.0000] <zcorpan>
botie: you're fired

[07:25:44.0000] <botie>
zcorpan: excuse me?

[07:25:49.0000] <nox>
smaug____: You couldn't write some sort of "mutation logger" that accurately reflects whatever happened on the tree even if the records aren't handled immediately.

[07:25:49.0000] <smaug____>
just like you have with children changes

[07:26:10.0000] <smaug____>
nox: Google has mutation logger

[07:26:14.0000] <smaug____>
using mutation observer

[07:26:15.0000] <nox>
No, in children changes, even if removed children are added back to the same parent, you still know they were removed at that point,

[07:26:28.0000] <smaug____>
oh, you mean that

[07:26:29.0000] <nox>
with attributes, you may lose the fact that they were removed.

[07:26:44.0000] <smaug____>
nox: no

[07:26:46.0000] <nox>
If you remove and add it back, the two mutation records are the same.

[07:26:55.0000] <smaug____>
nox: the next time attribute is added, the old value is null

[07:27:10.0000] <nox>
Oh right. So you have to look at all the later records, right?

[07:28:46.0000] <smaug____>
right

[07:38:49.0000] <annevk>
ato: yeah, https://url.spec.whatwg.org/#syntax-url-path-absolute

[07:39:00.0000] <ato>
annevk: Perfect, thank you!

[07:39:10.0000] <annevk>
nox: Bikeshed changed serialization

[07:44:06.0000] <annevk>
Domenic: sorry about that, at some point I stopped fixing IDL stuff philipj had filed figuring he might as well fix it itself

[07:44:41.0000] <annevk>
MikeSmith: thanks for adding that, I think we need to reword the first paragraph now at some point so it makes more sense together, but this is probably good enough for now

[07:50:25.0000] <TabAtkins>
annevk: Nearly done fixing that!

[07:50:38.0000] <TabAtkins>
Doing this fiddly crap while in the middle of CSSWG f2f has been way slow

[07:50:49.0000] <TabAtkins>
Should have taken just, like, a single 2-hour session or something.

[08:03:14.0000] <annevk>
heh

[08:06:56.0000] <TabAtkins>
Done now, finally, just cleaning up before commit.

[08:07:07.0000] <TabAtkins>
Debugging serialization of whitespace is amazingly annoying.

[08:10:23.0000] <ato>
So is it fine to reference the Annotated ECMAScript reference (es5.github.io) or should I (try to) link directly to ECMA-262?

[08:11:25.0000] <jgraham>
ato: My suggestion is to link to the most convenient one and let someone else challenge you later if they think it's an actual issue

[08:11:49.0000] <MikeSmith>
ato: why not reference the HTML version of the ES6 spec?

[08:11:51.0000] <JonathanNeal>
I saw that <hgroup> was formally removed from w3c’s spec. Is there any movement on an element or markup pattern for subheading elements that do not trigger sectioning?

[08:12:02.0000] <ato>
jgraham: Makes sense.

[08:12:24.0000] <ato>
MikeSmith: Is that a thing now?

[08:12:26.0000] <Ms2ger>
JonathanNeal, it was still in the canonical spec last time I checked

[08:12:45.0000] <JonathanNeal>
Ms2ger: http://www.w3.org/TR/html5/obsolete.html ?

[08:13:04.0000] <Ms2ger>
That document is particularly dry science fiction

[08:13:22.0000] <Ms2ger>
https://html.spec.whatwg.org/multipage/#the-hgroup-element

[08:13:26.0000] <MikeSmith>
ato: http://www.ecma-international.org/ecma-262/6.0/index.html

[08:13:44.0000] <MikeSmith>
jorendorff produced that

[08:14:27.0000] <ato>
MikeSmith: So we’re still referencing 5.1 but we should probably upgrade to 6.0.

[08:14:42.0000] <jorendorff>
yes for sure.

[08:15:02.0000] <MikeSmith>
JonathanNeal: no there is not any such movement, nor would I guess there is likely to ever be much. Few people care about it very much, and for the ones that do, they can still safely just just <hgroup>

[08:15:43.0000] <JonathanNeal>
Sad times at Ridgemont High. :|

[08:16:35.0000] <MikeSmith>
to me on the sadness scale, lack of a perfect way to mark up subheading doesn't even register

[08:16:53.0000] <darobin>
that's... sad

[08:17:01.0000] <MikeSmith>
heh

[08:17:28.0000] <MikeSmith>
lots of bigger fish to fry

[08:18:02.0000] <MikeSmith>
like when jesus made all those fishes

[08:18:18.0000] <Ms2ger>
darobin, the w3c fork? Yeah ;)

[08:18:22.0000] <MikeSmith>
except the web platform has a jesus that doesn't stop making fishes

[08:18:24.0000] <darobin>
lol :)

[08:18:55.0000] <MikeSmith>
we have a jesus who's like the sorcerer's apprentice of fish-making

[08:19:30.0000] <JonathanNeal>
and subheadings apparently do not inherit the kingdom.

[08:19:42.0000] <MikeSmith>
bingo

[08:20:06.0000] <MikeSmith>
JonathanNeal the Baptist, voice crying in the wilderness

[08:20:23.0000] <MikeSmith>
eating grasshoppers and hallucinating

[08:21:45.0000] <annevk>
ato: do you need to reference JavaScript?

[08:21:55.0000] <annevk>
ato: often standards just need to reference IDL

[08:22:44.0000] <jgraham>
annevk: WebDriver isn't defining IDL interfaces

[08:23:00.0000] <jgraham>
It wants to actually inject and execute js

[08:23:04.0000] <annevk>
Ah, I was wondering if it was the same standard you were working on

[08:23:05.0000] <ato>
annevk: WebDriver is creating an execution environment for scripts to allow an out-of-process program to inject code into the content space.

[08:23:30.0000] <ato>
jgraham: We have one IDL!

[08:23:51.0000] <annevk>
Though that does very much sound like a callback-based system which IDL does support

[08:24:00.0000] <annevk>
Coupled with queueing tasks et al

[08:25:40.0000] <annevk>
Woohoo, <400 legacy open bugs

[08:25:41.0000] <jgraham>
If it is describable using IDL it isn't obvious to me at least

[08:25:51.0000] <JonathanNeal>
MikeSmith: Or I could go the other direction. http://i.imgur.com/JQkHbHV.png

[08:27:21.0000] <jgraham>
annevk: https://w3c.github.io/webdriver/webdriver-spec.html#dfn-execute-a-function-body and surrounding parts, if you want to look

[08:28:44.0000] <annevk>
jgraham: that looks fairly similar to what setTimeout needs to do

[08:28:49.0000] <MikeSmith>
JonathanNeal: heh

[08:29:24.0000] <annevk>
jgraham: but admittedly all of the callback-based stuff has some holes and could use tightening

[08:34:18.0000] <miketaylr>
zcorpan: hey, yeah so compat standard. the plan is for gecko to implement and match (for the most part) what edge has implemented as well

[08:34:28.0000] <jgraham>
annevk: setTimeout seems to reference ECMA262 directly as well

[08:34:44.0000] <jgraham>
Generally I copied these parts from setTimeout and event handlers in HTML

[08:35:07.0000] <zcorpan>
miketaylr: ok. i didn't know edge had implemented WebKitMatrix etc

[08:35:13.0000] <miketaylr>
zcorpan: yeah

[08:35:41.0000] <miketaylr>
zcorpan: there's a gdoc linked from https://bugzilla.mozilla.org/show_bug.cgi?id=1170774#c0 that jacob rossi sent me

[08:35:44.0000] <zcorpan>
possibly we can fold it into the geometry spec at some point

[08:35:48.0000] <miketaylr>
webkit things that edge implements

[08:36:03.0000] <miketaylr>
sgtm

[08:37:39.0000] <zcorpan>
miketaylr: so WebKitPoint was removed from blink

[08:38:11.0000] <miketaylr>
good to know zcorpan

[08:38:30.0000] <miketaylr>
we haven't found any sites that break for us related to WebKitPoint

[08:38:33.0000] <miketaylr>
so it's not a priority for us

[08:38:46.0000] <miketaylr>
(which doesn't mean they don't exist)

[08:39:29.0000] <zcorpan>
https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/pIbpN_8Lqpg/tp9f71GsslIJ

[08:39:38.0000] <miketaylr>
zcorpan: https://wiki.mozilla.org/Compatibility/Mobile/Non_Standard_Compatibility is a better roadmap for what the compat spec will have, rather than that gdoc

[08:39:46.0000] <miketaylr>
at least, to begin with

[08:40:13.0000] <miketaylr>
/me needs to re-subscribe to blink-dev

[08:40:27.0000] <zcorpan>
miketaylr: can you link to that in the spec's introduction or so?

[08:40:54.0000] <miketaylr>
zcorpan: yeah, planning on spending a few hours editing this afternoon

[08:41:01.0000] <zcorpan>
k cool

[09:07:04.0000] <TabAtkins>
All right, Houdini is switching over to using GH exclusively for discussion.

[09:07:29.0000] <annevk>
MikeSmith: about hgroup, what about https://www.w3.org/Bugs/Public/show_bug.cgi?id=28077?

[09:07:50.0000] <annevk>
TabAtkins: no more F2F?

[09:09:13.0000] <Krinkle>
/me fears the days of mailing lists are over.

[09:09:14.0000] <Krinkle>
:O

[09:09:40.0000] <TabAtkins>
annevk: Hahaha, still f2f

[09:09:54.0000] <TabAtkins>
but mailling list is reserved just for pinging everyone for a wide review or something

[09:10:18.0000] <TabAtkins>
If this works reasonably well, we'll switch CSS over to it, too.

[09:12:23.0000] <Ms2ger>
Uhuh

[09:25:51.0000] <MikeSmith>
annevk: I think that bug should probably just be closed as wontfix, because there's no spec bug and IMHO not even any note needed

[09:26:09.0000] <annevk>
MikeSmith: does the validator complain about hgroup?

[09:26:55.0000] <MikeSmith>
The default validator code doesn't emit any error for hgroup. Only the W3C instance of the checker does

[09:27:22.0000] <MikeSmith>
if soembody else downloads the checker and runs it, they will not get errors about hgroup

[09:28:13.0000] <annevk>
MikeSmith: okay, resolved WONTFIX per your advice

[09:28:18.0000] <MikeSmith>
k

[09:28:36.0000] <annevk>
forgot to include ™ :-/

[09:29:19.0000] <MikeSmith>
contributor⊙wo always have the option of re-opening the bug if not satisfied with the resolution, so no worries there!

[09:30:22.0000] <ccardona_work>
Top of tha morning/afternoon/evening WHATWG crew o/

[09:30:49.0000] <MikeSmith>
hey ccardona_work

[09:31:04.0000] <ccardona_work>
hey MikeSmith ✌🏽

[09:31:06.0000] <MikeSmith>
oh shit just got real, annevk pushed "Deprecate <keygen> and appcache"

[09:34:02.0000] <ccardona_work>
MikeSmith: Out of curiosity how long have you lived in Japan (if you don’t mind me asking)

[09:34:11.0000] <ccardona_work>
were you ever in the bay area?

[09:35:44.0000] <annevk>
TabAtkins: could you evaluate https://www.w3.org/Bugs/Public/show_bug.cgi?id=17632 please?

[09:36:20.0000] <MikeSmith>
ccardona_work: I've been in Japan for 14 years. Before that the closest I lived to the bay area was one year in Santa Cruz

[09:37:17.0000] <MikeSmith>
ccardona_work: I lived near the "other" South Bay, in LA county, for quite a few years (Torrance, Hawthorne, how of the Beach Boys)

[09:38:19.0000] <MikeSmith>
ccardona_work: I lived in Santa Barbara for year as well (added for the sake of completeness in cataloging my California experiences)

[09:40:25.0000] <jgraham>
ccardona_work: MikeSmith is actually Brian Wilson in disguise

[09:41:03.0000] <jgraham>
The person making the public appearance as "Brian Wilson" is actually a not-very-convincing automaton

[09:41:58.0000] <MikeSmith>
heh. I'm trying to get as much psychedelics as he did. I still have a ways to go to catch up

[09:42:18.0000] <MikeSmith>
annevk: https://www.w3.org/Bugs/Public/show_bug.cgi?id=28197#c2 should be resolved I think

[09:44:18.0000] <annevk>
MikeSmith: ta, done

[09:44:46.0000] <ccardona_work>
MikeSmith: wow 14 years in Japan. That’s epic. Yes I lived in Santa Cruz as well. That’s where my son was born 7 years ago. I also spent 3 months there about 5 months ago as I took a mini break from SF when transitioning out of a relationship w/ my ex-wife.

[09:45:14.0000] <ccardona_work>
pretty funny regarding the psycadelics. ha 😲

[10:05:00.0000] <annevk>
MikeSmith: going forward, please resolve as you see fit and let this channel know

[10:05:14.0000] <annevk>
MikeSmith: that seems like it would get sufficient peer review

[10:05:46.0000] <MikeSmith>
annevk: OK

[10:05:50.0000] <MikeSmith>
will do so

[10:06:01.0000] <annevk>
seems easier and I'll get less email

[10:06:08.0000] <MikeSmith>
indeed

[10:10:00.0000] <frewsxcv>
should Object.getOwnPropertyNames ever iterate through the 'supported property names'? (as defined here: https://heycam.github.io/webidl/#dfn-supported-property-names)

[10:10:25.0000] <Ms2ger>
Why wouldn't it?

[10:10:47.0000] <frewsxcv>
well, i think it does, but i'm wondering where that is defined in the spec

[10:11:02.0000] <Ms2ger>
https://heycam.github.io/webidl/#property-enumeration I guess

[10:11:09.0000] <Ms2ger>
We need to upgrade idl to es6

[10:11:31.0000] <Ms2ger>
Now if heycam could just push it under the whatwg umbrella... :)

[10:12:08.0000] <frewsxcv>
like, I understand the ECMAScript spec specifies the getOwnPropertyNames function and the [[OwnPropertyKeys]] trap, I'm just wondering if those are referenced somewhere in a w3c or whatwg spec somewhere to iterate through the 'supported property names'

[10:13:21.0000] <frewsxcv>
the webidl spec hosted on heycam's github doesn't even mention [[OwnPropertyKeys]]

[10:13:39.0000] <annevk>
/me has a case of deja vu

[10:13:44.0000] <frewsxcv>
/me is just sanity checking

[10:13:44.0000] <Ms2ger>
Indeed, and it should

[10:30:03.0000] <annevk>
Ms2ger: if he did, would you fix all the bugs?

[10:36:04.0000] <Ms2ger>
I would fix some of the rhings

[10:36:06.0000] <Ms2ger>
things

[10:40:56.0000] <MikeSmith>
wontfixed https://www.w3.org/Bugs/Public/show_bug.cgi?id=28296 (a minor editorial clarification thing that's not needed, and OP didn't understand the parsing behavior and DOM for the case)

[10:45:37.0000] <Domenic>
MikeSmith: wrong link I think

[10:46:11.0000] <MikeSmith>
oofs yeah

[10:46:14.0000] <MikeSmith>
hang on

[10:46:36.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=28323 is the one I had meant to cite

[10:48:47.0000] <Domenic>
MikeSmith: can I get bugmail for all HTML bugs? Can't find a preference that easily.

[10:52:13.0000] <MikeSmith>
Domenic: I think you can't, but short of that you can add a watch for Hixie, and that will get you them (as well as some WebApps bugs too though)

[10:52:38.0000] <Domenic>
MikeSmith: I'll give that a shot, should be fine. I think I'll start getting 3 mails per webapps bug then...

[10:53:06.0000] <MikeSmith>
yeah I gets dupes for a lot of bugs

[10:53:35.0000] <MikeSmith>
will be glad to cut down on that some after we close the existing HTML ones

[10:54:06.0000] <MikeSmith>
...and replace it with a flood of GH issue notifications!

[11:22:21.0000] <MikeSmith>
Domenic: about Text vs text, it seems to me that the spec does actually use capital <code>Text</code> references throughout consistently when it's referring to the concept of text nodes

[11:22:54.0000] <MikeSmith>
that case you cite seems like an exception that maybe oughtta be changed

[11:23:23.0000] <Domenic>
MikeSmith: right. Text = https://html.spec.whatwg.org/#text; text = https://html.spec.whatwg.org/#text-content

[11:23:26.0000] <MikeSmith>
but if you think I should lowercase it here, I will

[11:23:26.0000] <Domenic>
I don't think so

[11:23:39.0000] <MikeSmith>
ah

[11:23:40.0000] <Domenic>
"text" lowercase is about the content model, which I think is what you're talking about

[11:23:53.0000] <MikeSmith>
/me re-looks

[11:24:22.0000] <MikeSmith>
ah yeah

[11:24:43.0000] <MikeSmith>
I missed the distinction

[11:24:49.0000] <MikeSmith>
will change it

[11:44:05.0000] <Domenic>
Still pretty surprised that the build system is holding up tbh :P

[11:44:13.0000] <Domenic>
So many moving parts...

[12:35:19.0000] <MikeSmith>
speak of the devil

[12:35:42.0000] <MikeSmith>
I am just now checking out the build tools

[12:36:36.0000] <Domenic>
watti needs a readme

[12:36:46.0000] <Domenic>
I'll do that

[12:45:20.0000] <Domenic>
Done https://github.com/whatwg/wattsi

[12:45:25.0000] <MikeSmith>
/me reads

[12:46:20.0000] <MikeSmith>
nice

[12:47:17.0000] <MikeSmith>
I was having problems trying to run the wattsi build with fpc v2.6

[12:47:38.0000] <MikeSmith>
/me grabs v3

[12:51:32.0000] <MikeSmith>
https://nondante.files.wordpress.com/2011/08/larsonhellaccordian.png

[12:52:12.0000] <MikeSmith>
except in the bottom part, it's Hixie saying, Welcome to the WHATWG, here's your Free Pascal

[13:02:14.0000] <MikeSmith>
"htmlparser.pas(336,42) Error: Data element too large" 😢

[13:09:17.0000] <Domenic>
hmm I haven't seen that one...

[13:38:39.0000] <MikeSmith>
this is on OSX

[13:39:04.0000] <MikeSmith>
think I will just switch to trying in my linux server instead


2015-08-29
[20:11:48.0000] <Domenic>
<3 cvrebert

[21:16:26.0000] <MikeSmith>
The Prolific Mr. Rebert

[21:17:21.0000] <MikeSmith>
I'm sad in part because I first came to know cvrebert from PRs and issues he raised against the HTML Checker

[21:17:45.0000] <MikeSmith>
from his work on his extremely-clever https://github.com/cvrebert/lmvtfy tool

[21:18:08.0000] <MikeSmith>
but he raiseth no HTML Checker PRs or issues lately

[21:18:29.0000] <MikeSmith>
so I feel a bit neglected 😢

[21:19:49.0000] <MikeSmith>
s/raiseth no/raiseth nigh a/

[21:57:55.0000] <Domenic>
one of the best s//s I've seen in recent memory

[22:00:08.0000] <annevk>
So my thinking with https://html5.org/tools/web-apps-tracker is that we redirect if the URL is exactly that to https://github.com/whatwg/html/commits

[22:00:29.0000] <annevk>
Coupled with the Twitter account also pointing there I think that's sufficient

[22:00:50.0000] <annevk>
If anyone wants to write a script that redirects links such as https://html5.org/r/8891 as well be my guest

[22:01:10.0000] <annevk>
Domenic: so one concern with our commit conventions is that the tweets end up rather big

[22:01:29.0000] <Domenic>
annevk: they seem fine to me?

[22:01:38.0000] <annevk>
Domenic: you don't mind the double newline?

[22:01:49.0000] <annevk>
Takes up so much space

[22:01:59.0000] <Domenic>
Not at all... great to separate "this is definitely worth reading" from "the rest of this is details that will probably be cut off anyway"

[22:02:31.0000] <Domenic>
We could try to (get someone with knowledge of Ruby to) add an option to the twitter thingy to cut off anything after the double-newline if you want

[22:03:27.0000] <annevk>
That might be of interest, usually the links placed there are wrong anyway

[22:03:56.0000] <annevk>
I would prefer the tweets to be a bit less obtrusive

[22:04:02.0000] <annevk>
And that would certainly make them so

[22:05:25.0000] <Domenic>
The double newlines are actually because of a recent instance of me getting someone to fix a bug that omitted them

[22:05:47.0000] <Domenic>
https://github.com/github/github-services/issues/959 https://github.com/github/github-services/pull/1075

[22:05:53.0000] <Domenic>
I wanted the separation for streams where I do the same thing

[22:06:16.0000] <Domenic>
Through the latter link you can also learn about a bizarre behavior of Ruby's string.split(" ")

[22:24:22.0000] <MikeSmith>
about the idea of redirecting links such as https://html5.org/r/8891 it seems not worth the hassle

[22:24:38.0000] <MikeSmith>
because "ain't broke don't fix it"

[22:27:10.0000] <MikeSmith>
in other news by my count, 50 of the open W3C bugzilla bugs were closed out yesterday (out of the 428 open bugs the day started out with)

[22:27:51.0000] <MikeSmith>
but unfortunately it seems pretty much all the low-hanging fruit has now been picked there

[22:28:36.0000] <MikeSmith>
and the remaining open bugs are all mostly things that will actually require some work

[22:31:36.0000] <MikeSmith>
I guess I could try to start a TODO list of stuff that needs to be done, if that would be worthwhile

[22:32:54.0000] <MikeSmith>
my own personal TODO list is to actually finish getting my build environment set up and working

[22:33:38.0000] <MikeSmith>
but first, time to take a walk to Shinjuku station and eat a hamburger

[22:36:56.0000] <annevk>
Domenic: hah, it sounds like you're my Twitter hook enemy :-P

[22:37:38.0000] <annevk>
MikeSmith: jaleous

[22:38:27.0000] <annevk>
MikeSmith: I think a high-level TODO thing might be worthwhile since a lot of bugs are related

[22:38:52.0000] <annevk>
MikeSmith: also, there's a bunch of easy bugs left but they're all filed by philipj so I don't want to start fixing them for him

[22:53:57.0000] <annevk>
TabAtkins: is https://drafts.csswg.org/mediaqueries/#scripting being implemented?

[22:54:55.0000] <TabAtkins>
annevk: It will be, yes. Approved as part of Houdini.

[22:56:03.0000] <annevk>
TabAtkins: so https://github.com/whatwg/html/pull/25/files makes sense?

[22:56:48.0000] <TabAtkins>
Oh, wrong feature, that's not a Houdini thing. Still yeah, should be implemented, and yes, makes sense at first glance.

[22:57:10.0000] <TabAtkins>
You can simplify that to just (scripting) btw

[22:59:19.0000] <annevk>
Ah shit

[23:03:11.0000] <annevk>
Okay, addressed in a follow up commit

[23:03:12.0000] <annevk>
Thank you

[23:03:34.0000] <annevk>
MikeSmith: Domenic: btw, I'm not exactly locally building the specification

[23:03:54.0000] <annevk>
MikeSmith: Domenic: currently relying on making simple changes, but I guess I should change that...

[23:08:34.0000] <annevk>
Loading https://github.com/whatwg/html/graphs/contributors seems impossible

[23:27:29.0000] <cvrebert>
MikeSmith: Perhaps all the issues+PRs on https://github.com/w3c/css-validator-fork should be closed since it's dead?

[23:42:57.0000] <MikeSmith>
cvrebert: Yeah, will do so later

[23:46:08.0000] <MikeSmith>
actually I think I may just transfer ownership of it to Alex. Because it's his fork really (never actually been a w3c thing), and nobody other than him actually cares at all about it

[23:46:37.0000] <MikeSmith>
fuglied up as it is with scala/sbt junk

[00:22:59.0000] <cvrebert>
Am I missing any straightforward reason why these two "tables" shouldn't render the same?: http://jsfiddle.net/cvrebert/2xk62L2x/

[00:25:04.0000] <TabAtkins>
cvrebert: <fieldset> has magical rendering behavior.

[00:27:18.0000] <cvrebert>
TabAtkins: Aside from <legend>-related stuff, https://html.spec.whatwg.org/multipage/rendering.html#the-fieldset-and-legend-elements does not seem to mention anything magical.

[00:33:49.0000] <annevk>
cvrebert: regarding https://www.w3.org/Bugs/Public/show_bug.cgi?id=28954 I'm not sure it's worth clarifying since browsers haven't implemented their current set of rendering rules based on that section

[00:34:06.0000] <annevk>
cvrebert: the Rendering section is mostly reflecting what is implemented, sometimes tightening up things that were not defined

[00:34:17.0000] <annevk>
cvrebert: so it's kind of reasonable that there's a couple of mismatches

[00:36:44.0000] <annevk>
mkwst: woohoo, I think you added the first feature since GitHub

[00:50:41.0000] <zcorpan_>
is https://html5.org/tools/web-apps-tracker supposed to work? (broken because of the rename?)

[00:51:56.0000] <annevk>
zcorpan_: no, I want to redirect it, see logs

[00:52:08.0000] <zcorpan_>
oh, ok

[00:52:10.0000] <annevk>
zcorpan_: Twitter account no longer uses it

[00:52:19.0000] <annevk>
zcorpan_: if you're willing to provide patches :-)

[00:54:32.0000] <zcorpan_>
is the green button OK if there's just one commit in a PR?

[00:56:11.0000] <Ms2ger>
No

[00:59:49.0000] <MikeSmith>
The green button still causes multiple commits

[01:01:05.0000] <zcorpan_>
ok

[01:01:28.0000] <cvrebert>
See https://github.com/isaacs/github/issues/2 , https://github.com/isaacs/github/issues/5

[01:08:10.0000] <cvrebert>
TabAtkins: Is the "is expected to establish a new BFC" sentence sufficient to explain that, or is there further magic?

[01:16:06.0000] <zcorpan_>
should i do what github's "command line instructions" says or something else, to merge a pr?

[01:17:14.0000] <Ms2ger>
rebase the branch, confirm with git log, and push

[01:17:49.0000] <cvrebert>
drop the "--no-ff". my particular PR is already freshly rebased.

[01:24:25.0000] <MikeSmith>
zcorpan_: unfortunately the github "command line instructions" also cause multiple commits, I think

[01:24:40.0000] <zcorpan_>
MikeSmith: yeah i noticed

[01:26:10.0000] <MikeSmith>
an alternative to what Ms2ger suggested is, just cherrypick the commit from that branch

[01:26:25.0000] <MikeSmith>
to me, that's the easiest

[01:27:03.0000] <Ms2ger>
Yeah, I guess that would work

[01:28:19.0000] <MikeSmith>
it doesn't have any downside that I can think of

[01:31:03.0000] <cvrebert>
well, the PR won't show as merged even though it's already been rebased atop master, but whatever

[01:31:58.0000] <MikeSmith>
cvrebert: that's true I guess, yeah

[01:33:02.0000] <MikeSmith>
But I think for this repo/project, that's not a problem

[01:33:11.0000] <MikeSmith>
Anyway it's idiotic that we have to repeatedly have these discussions

[01:33:32.0000] <MikeSmith>
git is the complete opposite of elegance

[01:33:56.0000] <MikeSmith>
it gets in your way constantly

[01:35:00.0000] <zcorpan_>
i did what cvrebert said

[01:38:17.0000] <TabAtkins>
MikeSmith: It's not git's fault, it's github's.  Rebase is the better option most of the time, but GH strongly favors merge, and makes it hard to do anything else.

[01:39:05.0000] <MikeSmith>
true yeah

[01:39:55.0000] <MikeSmith>
github is very slow about fixing broken stuff like this, too

[04:28:38.0000] <roc>
every single project I work on rebases commits to master

[04:28:51.0000] <roc>
so github PRs basically never show as merged

[04:29:29.0000] <roc>
yet github wins

[04:29:42.0000] <roc>
another triumph of network effects over common sense

[04:33:38.0000] <Ms2ger>
See also: git

[04:46:54.0000] <TabAtkins>
roc: One downside doesn't necessarily wreck a solution. ^_^

[04:47:08.0000] <TabAtkins>
Also, I'm lazy, and just merge things into Bikeshed.

[04:47:51.0000] <Ms2ger>
Exactly

[04:51:46.0000] <Ms2ger>
annevk, fixed https://github.com/whatwg/html/pull/21

[04:53:05.0000] <roc>
TabAtkins: sure, github's not completely useless, or network effects wouldn't be enough to overcome its defects

[04:55:42.0000] <Ms2ger>
Sadly

[05:13:36.0000] <nox>
Ms2ger: Made me laugh.

[08:50:58.0000] <annevk>
Ms2ger: you should check that parsedURL is not failure, no?

[08:51:11.0000] <annevk>
Ms2ger: "is not successful" seems wrong

[08:54:29.0000] <Ms2ger>
resolve-a-url says "abort these steps with an error"

[08:54:45.0000] <Ms2ger>
Might be better to make that "return failure" or something

[08:55:04.0000] <annevk>
oh okay, it's the wrapper

[08:55:10.0000] <annevk>
hopefully we can remove that at some point

[08:55:15.0000] <annevk>
I guess for now this is okayish then

[08:55:53.0000] <Ms2ger>
Yeah, wasn't too happy about that part either

[08:57:05.0000] <annevk>
I like how the HTML commit log has lots of different icons

[08:57:15.0000] <annevk>
Hopefully that'll go on like that

[15:57:38.0000] <Domenic>
annevk: you might be interested in https://github.com/git-up/GitUp/blob/master/README.md


2015-08-30
[17:08:40.0000] <zewt>
well, as predicted the option to stop chrome from wasting a ton of tab space to tell me my name no longer works

[17:09:03.0000] <zewt>
why does everything gradually turn to crap?

[20:36:47.0000] <roc>
2nd law of thermodynamics

[22:51:19.0000] <annevk>
Domenic: thank you, but I think I should just slowly learn how it actually works rather than doing things one layer of abstraction away

[00:38:50.0000] <MikeSmith>
annevk: so after getting my environment set up to build the spec, I now wonder why we don't just move the html-build tools directly into the html repo

[00:39:30.0000] <MikeSmith>
having them in a separate repo results in needing to do some klunky stuff to be able to make it work

[00:40:06.0000] <MikeSmith>
e.g., in my case I just made symlinks to ../html/source and ../html/images etc

[00:40:50.0000] <MikeSmith>
because I don't want to do what the readme says and actually copy the files over

[01:18:12.0000] <annevk>
MikeSmith: I suspect Domenic has it setup like that because it made sense to do it that to run the whole thing on the server

[01:24:14.0000] <MikeSmith>
annevk: OK

[01:24:24.0000] <MikeSmith>
it doesn't cause me any real heartburn

[01:25:16.0000] <MikeSmith>
but that said, if more people start using it I reckon they might run into problems/confusion and post questions asking how to fix/troubleshoot it

[01:25:32.0000] <MikeSmith>
would be nice to try to preempt that if possible

[01:25:40.0000] <annevk>
MikeSmith: yeah, I recommend sorting it through with Domenic

[01:25:44.0000] <MikeSmith>
hai

[01:25:47.0000] <annevk>
MikeSmith: I haven't really taken the time to look into it yet

[01:27:03.0000] <MikeSmith>
k

[01:32:53.0000] <annevk>
Heh, https://wiki.whatwg.org/wiki/GitHub seems due for an update

[01:33:09.0000] <annevk>
I was wondering where to document the commit message and merge guidelines

[01:37:53.0000] <MikeSmith>
annevk: for now, could flip on the wiki for https://github.com/whatwg/html

[01:38:35.0000] <MikeSmith>
if there's some reason to put that stuff anywhere other than in .md file in the repo root

[01:39:42.0000] <annevk>
MikeSmith: I don't really want to start using GitHub wikis

[01:51:06.0000] <MikeSmith>
annevk: good

[01:53:14.0000] <MikeSmith>
so maybe just a separate file called HOWTO.md or USING_GIT.md

[01:53:26.0000] <MikeSmith>
(if not in the main readme)

[03:20:48.0000] <annevk>
MikeSmith: seems like it should be in a CONTRIBUTING.md file as you mentioned elsewhere and per https://github.com/blog/1184-contributing-guidelines

[03:21:00.0000] <annevk>
MikeSmith: though it's kind of a pain to keep that up-to-date across various repositories

[04:04:00.0000] <MikeSmith>
ah yeah, I didn't understand that you wanted to have it for all the repos

[04:04:13.0000] <MikeSmith>
had only been thinking about HTML

[04:48:07.0000] <MikeSmith>
annevk: I posted http://stackoverflow.com/questions/32296220/sharing-a-contributing-md-file-across-multiple-github-repos to see if SO produces any good ideas

[06:01:11.0000] <annevk>
MikeSmith: ah, nice

[08:27:51.0000] <frewsxcv>
I wonder if git allows soft links to point to a file within a git submodule

[09:26:34.0000] <Domenic>
MikeSmith: see the bottom todo line in HTML-build repo

[09:27:14.0000] <Domenic>
Also, I think we don't want to be just moving issues to GitHub without resolving them, as that creates a lot of unnecessary email for everyone,

[09:54:54.0000] <deltab>
frewsxcv: symlinks? I don't think git cares where they point

[15:52:49.0000] <MikeSmith>
Domenic: OK (about moving issues)

[15:53:36.0000] <MikeSmith>
Domenic: the two or so I moved I did so because I think we can get more visibility at Github for them can we can just keeping them in W3C bugzilla

[15:54:38.0000] <MikeSmith>
and those two are sorta explicitly soliciting help from any contributors willing to spend some time writing a script to generate the indexes

[15:57:20.0000] <MikeSmith>
so my thinking was that we're more likely to get somebody volunteering if there's an issue at GitHub for it

[15:57:33.0000] <MikeSmith>
or maybe you were

[15:58:29.0000] <MikeSmith>
*you were just saying that we should also keep the W3C bug open until something actually lands for it

[16:00:15.0000] <MikeSmith>
anyway, as I said, there are no other W3C bugs that I was thinking should just be moved other than the ones I moved already

[16:06:08.0000] <MikeSmith>
Domenic: about the "Don't require throwing everything into one directory before doing the build..." thing, thanksーI'll write up a patch to review and raise a PR for it


2015-08-31
[23:01:37.0000] <annevk>
MikeSmith: someone downvoted your SO question...

[23:01:51.0000] <annevk>
/me added an upvote to put it back at 0

[23:15:02.0000] <MikeSmith>
hahah

[23:15:47.0000] <MikeSmith>
ah, my SO reputation has increaed now! I guess that was you

[23:15:51.0000] <MikeSmith>
(high five)

[23:16:05.0000] <MikeSmith>
I may put a "bounty" on that question

[23:16:14.0000] <MikeSmith>
never done that on SO before

[23:16:57.0000] <MikeSmith>
I think the way it works, I have to "pay" some points, but I kinda care fuck all how much points I have, so that would still be all win

[23:20:31.0000] <annevk>
MikeSmith: I think some of those index issues are mentioned in either wattsi or html-build

[23:28:31.0000] <MikeSmith>
annevk: ah ok

[23:28:38.0000] <MikeSmith>
I will take a look at that

[23:28:58.0000] <MikeSmith>
there is some really clever stuff in those tools

[23:29:21.0000] <MikeSmith>
I mean Hixie's spec-production tools

[23:29:50.0000] <MikeSmith>
others could learn a lot from them *cough*Bikeshed*cought*

[23:30:59.0000] <MikeSmith>
like, that thing I accidentally discovered yesterday, which Hixie has in there to look for places where the source has "a" where it should have "an" (and vice versa)

[23:32:24.0000] <annevk>
Kind of cool that it discovered that even for stuff wrapped in markup

[23:41:40.0000] <MikeSmith>
indeed

[23:41:43.0000] <MikeSmith>
Hixie++

[23:41:53.0000] <MikeSmith>
annevk: btw, speaking of SO bounties, http://stackoverflow.com/questions/32137010/how-to-allow-webworker-to-call-https-url/32296750?noredirect=1#32137010

[23:42:07.0000] <MikeSmith>
or just http://stackoverflow.com/questions/32137010/how-to-allow-webworker-to-call-https-url/32296750

[23:43:15.0000] <MikeSmith>
dunno if there's a good answer to that question but at least it seems like that OP hasn't gotten a good one yet

[23:44:16.0000] <annevk>
/me discovers https://www.w3.org/Bugs/Public/show_bug.cgi?id=27869

[23:44:30.0000] <annevk>
The IETF actually changed the WebSocket specification to be incompatible with the API

[23:45:33.0000] <MikeSmith>
eh?

[23:45:59.0000] <MikeSmith>
/me reads

[23:46:18.0000] <MikeSmith>
"Could we just have the IETF spec fixed instead?"

[23:46:35.0000] <MikeSmith>
indeed

[23:46:40.0000] <annevk>
There's no way to actively invoke the IETF algorithm with a set of headers even

[23:47:08.0000] <MikeSmith>
I thought they had quit touching that stuff a long time ago

[23:47:33.0000] <MikeSmith>
somebody has still been fiddling with the protocol spec?

[23:47:36.0000] <MikeSmith>
kinda ironic

[23:49:00.0000] <MikeSmith>
given that most IETF specs are written and then never changed, and when you *want* somebody to make a change to an IETF spec, the responsible parties usually just shrug their shoulders and explain why it's not gonna happen

[23:50:17.0000] <MikeSmith>
hmm but looking at the link that Takeshi cites, that change was made a long time ago https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10

[23:50:31.0000] <annevk>
MikeSmith: that SO question is a bit vague, might just be that Safari has a bug

[23:50:39.0000] <MikeSmith>
I had thought he was saying they changed it after it went to RFC

[23:51:09.0000] <MikeSmith>
annevk: OK, well if it's not clear to what the problem is, then I reckon it's not a general problem

[23:51:18.0000] <MikeSmith>
maybe there's a Safari bug open for it

[23:52:20.0000] <MikeSmith>
hmm, yeah, now that I think of it, I have seen reports of other weird https-related issues that only seem to be reproducible in Safari

[00:01:42.0000] <annevk>
"Your message to hybi awaits moderator approval"

[00:01:43.0000] <annevk>
ugh

[00:44:10.0000] <annevk>
grep -ni 'and/or' source | perl -lpe 'print "\nOccurrences of making Ms2ger unhappy and/or annoyed:" if $. == 1'

[00:44:34.0000] <Ms2ger>
Ha

[00:48:33.0000] <mkwst>
annevk, MikeSmith: Thanks for going through the nonce patch with me. :)

[00:48:47.0000] <mkwst>
I'll have more for you, I'm sure.

[00:48:58.0000] <Ms2ger>
mkwst, wanna merge CSP into Fetch?

[00:49:41.0000] <mkwst>
Ms2ger: I want to give Fetch some hooks into CSP. Like http://mikewest.github.io/webappsec/specs/content-security-policy/#algorithms-fetch

[00:50:01.0000] <mkwst>
But CSP isn't exclusive to Fetch. See the `nonce` thing I just mentioned. :)

[00:52:38.0000] <MikeSmith>
mkwst: thanks for taking time to write up that patch. It hits the sweet spot (as far as having something that provides enough to make it wortwhile to add, without waiting to have anything at all in the HTML spec until the other bits (from your TODO editorial note) are also added)

[00:53:18.0000] <mkwst>
MikeSmith: I want to get rid of my monkey patches. *shrug*

[00:53:28.0000] <MikeSmith>
yeah

[00:53:44.0000] <MikeSmith>
anything that first at least just gets rid of monkey patch is a win

[00:54:00.0000] <mkwst>
MikeSmith: Of course, that means I need to get the patches into W3C's HTML as well.

[00:54:11.0000] <mkwst>
MikeSmith: Which looks like it's going to be a huge mess, honestly. :)

[00:54:49.0000] <gsnedders>
Is anyone planning on getting all the ruby stuff everyone implements into HTML?

[00:55:37.0000] <MikeSmith>
mkwst: also fwiw (and not to make you blush) I also admire your sense of judgment as an editor. You have a somewhat rare combination of being highly prolific while at the same time consistently hitting the right targets

[00:56:09.0000] <mkwst>
MikeSmith: Aw shucks... Thank you. :)

[00:56:13.0000] <MikeSmith>
heh

[00:56:22.0000] <mkwst>
MikeSmith: I'm working on too much at the moment. Not enough is actually getting done. :/

[00:56:51.0000] <mkwst>
I'm good at starting things, but not yet good at finishing them. This credential management api quagmire, for example.

[00:57:55.0000] <MikeSmith>
mkwst: ah yeah the credential-management thing seems like something I'd like to stay way away from :)

[00:58:27.0000] <MikeSmith>
mkwst: but by my reckoning you and Brad have been handling that well (and patiently)

[00:58:36.0000] <annevk>
gsnedders: if you want to give it a go, it's yours

[00:58:57.0000] <mkwst>
MikeSmith: well, yes and no. It's taking too long for not enough benefit (either for me or the credentials CG).

[00:59:07.0000] <annevk>
mkwst: W3C HTML is not really a thing implementors use

[00:59:13.0000] <mkwst>
We're talking in circles, and I need to just suck it up and cut the knot.

[00:59:31.0000] <mkwst>
annevk: 1. I know. 2. It doesn't matter.

[00:59:36.0000] <gsnedders>
annevk: I don't massively want to. Rewriting all the spec text that berjon wrote doesn't seem worthwhile. It's just really awkward not having the parser as implemented defined anywhere.

[01:00:04.0000] <MikeSmith>
mkwst: about "Not enough is actually getting done." I guess it should be about quality and not quantity. One person can only do so much. We need more people writing security-related specs. More hands make light work, and all that.

[01:00:06.0000] <mkwst>
I only care about the W3C HTML spec insofar as I need to advance specs to REC due to patent idiocy.

[01:00:23.0000] <mkwst>
MikeSmith: Hey! I have some specs you could write!

[01:00:28.0000] <MikeSmith>
hahah

[01:00:46.0000] <MikeSmith>
mkwst: oh, speaking of that, I have something for you to please review

[01:00:51.0000] <MikeSmith>
not a spec, sadly

[01:00:53.0000] <mkwst>
sure

[01:00:58.0000] <MikeSmith>
but less work

[01:01:05.0000] <mkwst>
I like less work.

[01:01:56.0000] <MikeSmith>
hah. I would like to have a T-shirt that says that.

[01:02:02.0000] <MikeSmith>
mkwst: https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity

[01:02:57.0000] <mkwst>
MikeSmith: Probably better to get one of the SRI editors to review that. It's the only spec I've been able to successfully delegate out. :)

[01:03:01.0000] <mkwst>
But I'll skim it.

[01:04:27.0000] <MikeSmith>
thanks yeah I was thinking about asking the editors, but... I've never communicated with any of them before. But anyway, I'm being lazy, I'll ping them too

[01:05:21.0000] <MikeSmith>
mkwst: when you skim it, feel free to just make any changes directly if you want. Or if you prefer just lemme know what if anything I should change (or add)

[01:05:55.0000] <mkwst>
Sure. I just sent Joel an email (CC'd you). He can loop in other folks if he wants.

[01:06:02.0000] <MikeSmith>
super

[01:06:03.0000] <MikeSmith>
thanks

[01:06:08.0000] <mkwst>
(Or you could just tweet at them, which is fairly low overhead. :) )

[01:06:20.0000] <MikeSmith>
ah yeah that too

[01:07:10.0000] <mkwst>
Here: "@metromoxie @fmarier @frgx @freddyb: Hey! Mind taking a look at some SRI documentation I put on MDN? https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity"

[01:07:17.0000] <mkwst>
;P

[01:07:31.0000] <MikeSmith>
gsnedders: about the ruby stuff maybe Robin can write up a patch himself. If there are issues with it as far not being up to snuff with the norms for the HTML spec itself, then people can make review comments and he can make fixes.

[01:08:33.0000] <gsnedders>
MikeSmith: yeah, probably more worthwhile

[01:08:55.0000] <gsnedders>
MikeSmith: it's just that I think all the arguments that have been made about it before don't stand when everyone implements it and the WHATWG spec is fiction.

[01:09:16.0000] <MikeSmith>
Robin has sorta been the one who cared most about getting it specced and implemented (I didn't) and he's the one who did the work of communicating with the implementors and seeing things through to getting the browser patches landed and all that

[01:09:32.0000] <gsnedders>
i know

[01:09:43.0000] <gsnedders>
but he isn't on IRC :P

[01:09:48.0000] <gsnedders>
and therefore isn't a real person

[01:10:00.0000] <MikeSmith>
gsnedders: I don't think anybody disagrees with that (what you said about the arguments). Not at this point at least.

[01:10:46.0000] <MikeSmith>
and it's far from being the worst thing that's ever been added to the platform. And some smart people in Japan really think it's good.

[01:11:17.0000] <MikeSmith>
Masuyuki (from Mozilla) tore into me pretty seriously when I criticized it

[01:12:10.0000] <annevk>
darobin hangs out here from time to time

[01:12:45.0000] <annevk>
gsnedders: it would help me if you could identify the patch against W3C HTML that added these elements and corresponding links into W3C HTML where these elements are defined

[01:13:10.0000] <annevk>
gsnedders: given that I might be able to give it a go soonish since the mismatches should be sort of a priority

[01:13:28.0000] <annevk>
gsnedders: I still need to get the build system running locally though

[01:14:43.0000] <MikeSmith>
gsnedders: s/Masuyuki/Masatoshi/ https://lists.mozilla.org/pipermail/dev-platform/2014-December/008136.html

[01:15:10.0000] <MikeSmith>
I think Robin is in another timezone now, btw

[01:16:24.0000] <MikeSmith>
annevk: I am working on a patch for the build system (or rather I'm really not yet but I should be and will try to get the patch written up today and PR'ed for review)

[01:20:53.0000] <annevk>
MikeSmith: for Mac, which of ftp://freepascal.stack.nl/pub/fpc/beta/3.0.0-rc1/i386-macosx/ should I get?

[01:21:16.0000] <annevk>
ftp://freepascal.stack.nl/pub/fpc/beta/3.0.0-rc1/i386-macosx/fpc-3.0.0rc1.intel-macosx.dmg ?

[01:22:19.0000] <annevk>
It seems Free Pascal will be one of the first to fall when mkwst removes ftp URL access

[01:23:52.0000] <MikeSmith>
annevk: not fpc-3.0.0rc1.intel-macosx.dmg

[01:24:01.0000] <MikeSmith>
oh

[01:24:08.0000] <MikeSmith>
no, actually, yeah, that one

[01:24:43.0000] <MikeSmith>
that's the same I grabbed for my macbook and it works

[01:25:07.0000] <MikeSmith>
hahahah :) > It seems Free Pascal will be one of the first to fall when mkwst removes ftp URL access

[01:26:03.0000] <annevk>
MikeSmith: so if we update the DEFINES in the build.sh it would fail on other platforms I guess?

[01:28:58.0000] <MikeSmith>
annevk: dunno

[01:29:02.0000] <MikeSmith>
you'd need to ask Hixie

[01:29:11.0000] <MikeSmith>
he's the one who told me it was Mac-specific

[01:29:16.0000] <annevk>
hmm I get complaints about Xcode

[01:29:34.0000] <MikeSmith>
you might have to update your XCode command-line tools

[01:29:43.0000] <MikeSmith>
gimme a minute to find the docs

[01:31:02.0000] <annevk>
Yeah, but Xcode claims I only have outstanding documentation updates

[01:31:03.0000] <MikeSmith>
annevk: just "xcode-select --install" I guess

[01:31:21.0000] <MikeSmith>
annevk: the command-line tools are separate thing, right?

[01:31:32.0000] <MikeSmith>
separate update

[01:31:33.0000] <annevk>
oh

[01:31:43.0000] <MikeSmith>
(why they do it that way I dunno)

[01:33:52.0000] <annevk>
MikeSmith: you said you made some changes to html-build too write that made things easier?

[01:34:11.0000] <MikeSmith>
I just made symlinks

[01:34:25.0000] <MikeSmith>
to everything in the html dir

[01:34:33.0000] <annevk>
MikeSmith: how do I go about that?

[01:34:53.0000] <MikeSmith>
ln ../html/source .

[01:35:02.0000] <MikeSmith>
in the html-build dir

[01:35:15.0000] <MikeSmith>
and same for other files

[01:35:37.0000] <MikeSmith>
or really if you want to do it quick and dirty, use wildcards

[01:35:45.0000] <MikeSmith>
ln ../html/* .

[01:35:52.0000] <MikeSmith>
and

[01:35:54.0000] <MikeSmith>
ln ../html/.* .

[01:37:13.0000] <MikeSmith>
or maybe just ../html/.multipage-404 is all you need (as far as the dot files)

[01:37:36.0000] <MikeSmith>
actually I guess you don't strictly even need that

[01:37:54.0000] <mkwst>
annevk: I won't be terribly sad. If you want to FTP, use the FTP app we'll make available in the Chrome Web Store. And lock youself into our platform forever. Muwahaha. /me destroys the web

[01:38:17.0000] <MikeSmith>
annevk: there's also a .htaccess file there but I don't think you need that (unless you want to test in Apache locally)

[01:40:25.0000] <annevk>
So the wattsi repo should maybe have a .gitignore file for bin/?

[01:46:31.0000] <annevk>
Hah, I don't have wget

[01:46:43.0000] <annevk>
Not sure if that was the only thing that made this fall apart but it's certainly part of it

[01:58:45.0000] <MikeSmith>
annevk: yeah probably there should be a .gitignore for bin/

[01:59:13.0000] <annevk>
And html-build needs .gitignore .cldr-data

[01:59:19.0000] <MikeSmith>
yeah

[01:59:20.0000] <mkwst>
Can we simply integrate the three repositories? Is there a good reason for keeping the build scripts separate from the only source file that will ever use them?

[02:00:00.0000] <annevk>
We run the build scripts on the server

[02:00:12.0000] <annevk>
And wattsi is separate since it's fairly standalone

[02:00:39.0000] <mkwst>
But I assume you update the scripts from the repo before you run them, right? And you update the source file as well. Why call `git pull` twice when you could just call it once?

[02:00:42.0000] <MikeSmith>
yeah to that (about wattsi)

[02:00:51.0000] <mkwst>
wattsi as submodule?

[02:01:09.0000] <MikeSmith>
I hope we don't need to do submodules

[02:01:21.0000] <mkwst>
well, i hope we don't have to symlink or copy. :)

[02:01:24.0000] <annevk>
mkwst: file a bug against html-build?

[02:01:43.0000] <annevk>
mkwst: best to discuss it asynchronously since Domenic needs to partake

[02:01:47.0000] <mkwst>
oh.. is IRC not the bug-filing mechanism? :)

[02:01:58.0000] <MikeSmith>
for wattsi we should just make binaries available, really. I'm pretty sure that's what Domenic would like and what he wrote up somewhere already

[02:02:44.0000] <annevk>
mkwst: "depends"

[02:02:45.0000] <MikeSmith>
distribute three binaries: one linux binary, one mac binary, one windows

[02:03:08.0000] <annevk>
Yeah that would be nice

[02:03:37.0000] <MikeSmith>
mkwst: I do think we should consider moving the html-build contents to the html repo, at least

[02:04:28.0000] <MikeSmith>
yeah, distributing the binaries would not be hard to do. one person one time builds the mac binary, etc.

[02:04:45.0000] <MikeSmith>
it's not like we're going to be updating the wattsi sources all the time

[02:05:53.0000] <MikeSmith>
we could actually have the html-build just automatically download the appropriate wattsi binary

[02:06:45.0000] <MikeSmith>
the html-build already requires a network connection, and it downloads a shitload of... what? I don't know actually. (data from caniuse  maybe?)

[02:07:33.0000] <mkwst>
MikeSmith: Yeah. It would be nice to separate "update dependencies" from "generate the spec".

[02:07:59.0000] <mkwst>
The build script would be better split into component steps, rather than the monolithic "do everything" it is today.

[02:10:37.0000] <mkwst>
https://github.com/whatwg/html-build/issues/5

[02:10:37.0000] <annevk>
I think what Domenic wants to do is that when you submit a PR for "source", some script does the building for you and supplies debugging information on GitHub

[02:11:03.0000] <mkwst>
annevk: yeah. integrating with Travis seems like a clear win.

[02:11:18.0000] <annevk>
We should probably still simplify building locally though for if you want to make bigger changes

[02:11:18.0000] <MikeSmith>
yeah

[02:11:42.0000] <MikeSmith>
I'm sure that's the plan (full automatation via Travis)

[02:11:46.0000] <MikeSmith>
annevk: right

[02:11:58.0000] <MikeSmith>
we still need to be able to build locally as well

[02:12:17.0000] <MikeSmith>
you want to be able to check something before you push

[02:12:34.0000] <mkwst>
annevk: They go hand in hand, right? I don't think the current setup is going to be easy to get running on Travis in anything like a performant fashion.

[02:12:50.0000] <mkwst>
improving things for local builds is the same as improving things for Travis.

[02:13:15.0000] <MikeSmith>
aslo when reviewing, you want to be able to check the rendered output from code somebody's PR branch

[02:13:34.0000] <mkwst>
(as a side note, I'm so happy that this move has happened... submitting PRs is significantly simpler for me than sending an email into a black hole)

[02:14:15.0000] <MikeSmith>
hear hear

[02:14:54.0000] <darobin>
+1

[02:15:05.0000] <MikeSmith>
hey darobin!

[02:15:52.0000] <MikeSmith>
darobin: gsnedders wants to talk with you about ruby (since for some reason he actually wants to have a spec to check tests against, or something)

[02:16:05.0000] <darobin>
that's madness

[02:16:35.0000] <MikeSmith>
heh

[02:16:42.0000] <darobin>
I'm going to be in and out of IRC this week; prepping last details for the trip and all

[02:16:52.0000] <gsnedders>
darobin: plz help merge the ruby stuff into the WHATWG spec

[02:16:56.0000] <darobin>
so email might work best

[02:17:10.0000] <MikeSmith>
darobin: well, I already volunteered you to (re)write a patch. so set all that other trip stuff aside for now

[02:17:22.0000] <darobin>
gsnedders: have you looked at the stuff and hit a bump, or are you just asking for the merge?

[02:17:27.0000] <darobin>
ah ok

[02:17:28.0000] <darobin>
I can do that

[02:17:34.0000] <darobin>
but it might have to wait until I'm in NY

[02:17:37.0000] <darobin>
lol

[02:17:44.0000] <MikeSmith>
darobin: http://krijnhoetmer.nl/irc-logs/whatwg/20150831#l-256 for the context

[02:17:50.0000] <gsnedders>
darobin: the big problem is the fact that it's W3C licensed so it can't just be merged into WHATWG, AFAIK

[02:18:10.0000] <MikeSmith>
darobin retains copyright on what he authored

[02:18:21.0000] <MikeSmith>
anyway, let's please not get into that, I think

[02:18:24.0000] <MikeSmith>
not right now

[02:18:33.0000] <darobin>
gsnedders: don't ask questions you don't want the response to

[02:18:38.0000] <MikeSmith>
heh

[02:18:51.0000] <darobin>
under French law I cannot cede my copyright to anyone, actually

[02:19:00.0000] <darobin>
so I can do whatever I want with the text I wrote

[02:19:00.0000] <MikeSmith>
you'll be in NYC

[02:19:06.0000] <MikeSmith>
you can get a gun!

[02:19:11.0000] <darobin>
hahaha

[02:19:17.0000] <darobin>
don't give me bad ideas :)

[02:19:18.0000] <MikeSmith>
"enforce" your copyright

[02:19:20.0000] <MikeSmith>
heh

[02:19:37.0000] <gsnedders>
yes, /you/ retain copyright, but the only license I can get what you wrote under is the one provided by the W3C

[02:19:51.0000] <darobin>
gsnedders: not to mention the fact that the ruby text was produced CC-BY

[02:20:12.0000] <MikeSmith>
darobin: seriously I don't think there's any rush on this. Except that after neglecting use for a long time, gsnedders is back and just wants everything his way from now on

[02:20:30.0000] <MikeSmith>
*us/me

[02:20:32.0000] <darobin>
gsnedders: honestly, don't worry your pretty head about copyright

[02:20:49.0000] <darobin>
I'll move the text; if there's a problem it'll all be my fault

[02:20:55.0000] <darobin>
we'll cross that bridge when we get there

[02:21:04.0000] <darobin>
(and I live within walking distance of a gun shop)

[02:21:28.0000] <darobin>
MikeSmith: yeah, I doubt there's a rush but I would still really like to get to a complete defork

[02:21:39.0000] <darobin>
ruby's one big chunk of that

[02:21:58.0000] <gsnedders>
yeah, I basically want everything done my way now I'm starting to pick all this stuff up again after years :P

[02:22:04.0000] <darobin>
good, good

[02:22:06.0000] <darobin>
I support that

[02:23:25.0000] <hsivonen>
/me wonders if non-UTF-8 encoders in browser need to be fast

[02:24:11.0000] <gsnedders>
hsivonen: encoders? for stuff like forms?

[02:27:26.0000] <hsivonen>
gsnedders: yes. also URLs

[02:28:10.0000] <hsivonen>
gsnedders: hmm. does XHR support non-UTF encoders still, too?

[02:28:54.0000] <hsivonen>
supporting serializing XML to anything other than UTF-8 is a really bad, but sadly common, idea

[02:30:35.0000] <hsivonen>
example: https://issues.apache.org/jira/browse/XALANJ-2419 Xalan's UTF-8 output is broken thanks to its attempt to support non-UTF-8 output

[02:30:43.0000] <hsivonen>
I filed that bug in January 2008

[02:30:47.0000] <hsivonen>
still not fixed

[02:31:04.0000] <hsivonen>
meanwhile, I've written my own UTF-8-only XML serializer and moved on

[02:35:59.0000] <darobin>
hsivonen: is it still done a lot even in browsers?

[02:36:11.0000] <darobin>
it's been a while since I've seen that in any code tbh

[02:38:09.0000] <annevk>
hsivonen: only URLs and <form>, not XMLHttpRequest

[02:39:17.0000] <MikeSmith>
https://twitter.com/UzEE/status/638282373235384320 "Its 2015 and its sad that @w3c still hasn't come up with a standard way to allow #localStorage to be shared across domains/sub-domains." That could be read as saying, "...and it's good that they haven't"

[02:41:40.0000] <annevk>
hsivonen: parsing XML without the Encoding Standard is actually undefined territory since a lot of legacy encodings don't define errors... I mentioned this once to the XML folks, but they didn't care much

[02:41:56.0000] <philipj>
MikeSmith: regarding merge commits, I don't mind them, but I don't have the context of the discussion you were having

[02:47:33.0000] <hsivonen>
darobin: looking at the Gecko source, it seems that our XHR always uses UTF-8. Hooray.

[02:47:50.0000] <hsivonen>
/me has a vague recollection it wasn't always this way

[02:48:14.0000] <gsnedders>
Do we have any spec defining stuff around the DOM and XSLT? AFAICT not?

[02:48:17.0000] <darobin>
yeah, ISTR encoding issues with XHR but from a *long* time ago

[02:48:32.0000] <darobin>
gsnedders: there's a bug for that :)

[02:48:42.0000] <darobin>
but no, no one did the work for XSLT

[02:49:27.0000] <gsnedders>
This is, of course, hardly surprising. It's XSLT. :)

[02:51:14.0000] <annevk>
hsivonen: correct, we used to use inputEncoding or some such for serializing documents

[02:51:27.0000] <annevk>
hsivonen: I think per some research from hallvors we opted to remove that

[02:51:35.0000] <hsivonen>
annevk: cool

[02:51:48.0000] <hsivonen>
annevk: well, for now, I'll assume that encode needs to be fast

[02:52:07.0000] <hsivonen>
annevk: if we later find that it's OK for encode to be slower, we can rewrite code

[02:52:30.0000] <annevk>
hsivonen: I think it's okay for non-utf-8-encode to be slow personally

[02:52:38.0000] <annevk>
hsivonen: we already flag such pages in the console

[02:52:55.0000] <annevk>
hsivonen: and it'll only hit them for certain URLs and whenever they use <form>

[02:57:35.0000] <MikeSmith>
philipj: I wasn't advocating for merge commits. But anyway we already have a prohibition on doing them for this repo, so I think we're good.

[02:58:15.0000] <MikeSmith>
philipj: also, please review my preload patch ;)

[03:00:16.0000] <philipj>
MikeSmith: preload, huh?

[03:00:28.0000] <philipj>
I'll see if I can get to that tomorrow

[03:02:09.0000] <MikeSmith>
philipj: k

[03:03:03.0000] <MikeSmith>
(it's a minor change; shouldn't take much time to review, but no rush)

[03:04:13.0000] <hsivonen>
annevk: hmm. maybe I should save space after all, then

[03:04:15.0000] <philipj>
MikeSmith: ah, that fix

[03:04:19.0000] <philipj>
MikeSmith: I'll take a look now

[03:05:36.0000] <annevk>
philipj: are you planning on PR'ing all your own bugs?

[03:07:06.0000] <philipj>
annevk: I plan to spend some time looking at open bugs, sure, but my feelings will not be hurt if someone else fixes bugs I've filed

[03:07:32.0000] <philipj>
and at most I could probably spend an hour or two per day

[03:08:35.0000] <annevk>
Domenic: I use your merge script, but it's rather weird as sometimes it does the cleanest merge possible: https://github.com/whatwg/html/commit/882803c4cc8fba2fa5472b76f628d95cc82c421d and sometimes it does this: https://github.com/whatwg/html/commit/bbccfc976754def0c187ac8ce5891d2fb20dfc15

[03:08:49.0000] <annevk>
Domenic: I committed both...

[03:12:16.0000] <annevk>
Domenic: I filed https://github.com/github/github-services/issues/1086 on shorter tweets

[03:17:27.0000] <hsivonen>
annevk: regarding https://encoding.spec.whatwg.org/#index-big5-pointer, are there other duplicate entries where the encoder should pick the *first* entry?

[03:17:45.0000] <annevk>
hsivonen: 4 others

[03:17:52.0000] <annevk>
iirc

[03:18:12.0000] <hsivonen>
annevk: ok. It would be nice to add a note that there are other duplicates where you want the first entry

[03:18:31.0000] <hsivonen>
annevk: to avoid an implementor just searching everything backwards

[03:20:33.0000] <annevk>
hsivonen: I was hoping the implication that it was special was obvious due to nothing else having this special case, but I'll add a note

[03:21:41.0000] <MikeSmith>
philipj: Thanks (for the review and push)

[03:22:56.0000] <hsivonen>
annevk: thanks

[03:23:44.0000] <annevk>
https://github.com/whatwg/encoding/commit/ce4e83d0df5b5efec0697fc76e66699737e033a3

[03:31:56.0000] <annevk>
Domenic: oh, perhaps it only happens when the commit is based on the current master...

[03:41:57.0000] <annevk>
MikeSmith: when I ln source and then run ./build.sh it seems source ends up being copied somehow?

[03:44:17.0000] <annevk>
Now I get Parse Error: (61067,67) unexpected end tag

[03:44:23.0000] <annevk>
So something went wrong...

[03:44:56.0000] <MikeSmith>
annevk: maybe, but I'm on from my mobile atm, and can check when I get back home in ~45 minutes

[03:47:27.0000] <annevk>
I found it, mkwst made a typo somewhere

[03:47:37.0000] <mkwst>
Impossible!

[03:47:49.0000] <annevk>
And I didn't catch it because I wasn't yet building

[03:48:01.0000] <mkwst>
I'm still not building. So, my fault.

[03:50:52.0000] <MikeSmith>
that typo... doesn't sound like our mkwst

[03:51:08.0000] <MikeSmith>
this one must be an imposter

[03:51:15.0000] <mkwst>
no, I typo all the time. vim's spellchecker is horrible so I don't use it.

[03:51:17.0000] <MikeSmith>
check his gpg key

[03:51:31.0000] <mkwst>
If you get a GPG key, you _know_ it's not me.

[03:51:55.0000] <MikeSmith>
there's a way to hook in better spell checking in vim

[03:51:59.0000] <MikeSmith>
heh

[03:52:52.0000] <MikeSmith>
I'm pretty sure I got my vim set up with decent spell checking

[03:53:00.0000] <MikeSmith>
z= zg

[03:53:52.0000] <MikeSmith>
The suggestions I get from z= are usually ok

[03:54:17.0000] <MikeSmith>
and I don't get tons of false positives

[03:54:56.0000] <annevk>
Both PRs contained a typo

[03:55:48.0000] <mkwst>
annevk: Sorry. :/

[03:56:08.0000] <annevk>
No worries, glad I found out now

[03:56:33.0000] <annevk>
And it's my fault since I merged them

[03:57:29.0000] <MikeSmith>
yup

[03:57:50.0000] <mkwst>
CC me on the PR? Just so I know what I broke?

[03:59:22.0000] <annevk>
mkwst: sure, I'll clean it up in an hour

[03:59:27.0000] <annevk>
/me has to go for a bit

[03:59:43.0000] <mkwst>
ok. tell me what I broke, I'll send you a PR?

[03:59:44.0000] <botie>
will do

[04:11:16.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/32309156/activate-browser-tab-using-html5-notification

[04:11:27.0000] <MikeSmith>
beverloo: http://stackoverflow.com/questions/32309156/activate-browser-tab-using-html5-notification

[04:35:42.0000] <annevk>
MikeSmith: mentioned something, haven't actually tested it through

[04:35:46.0000] <annevk>
though*

[04:37:45.0000] <smaug____>
has there be any work on standardizing popup blocking

[04:37:58.0000] <smaug____>
like, when can one open a new window and so

[04:38:02.0000] <annevk>
smaug____: yeah

[04:41:49.0000] <smaug____>
s/be/been/

[04:44:56.0000] <MikeSmith>
annevk: thanks

[04:45:34.0000] <annevk>
smaug____: you want https://html.spec.whatwg.org/multipage/#allowed-to-show-a-popup

[04:46:02.0000] <MikeSmith>
annevk: I'm back home now, and can help you with build problems if you're still having anyy

[04:46:44.0000] <annevk>
MikeSmith: if I create a ln to another file, it seems after running the build script it's no longer an ln, but an actual file

[04:47:09.0000] <annevk>
MikeSmith: that's somewhat annoying since then I can't run the script multiple times without first removing the file and creating a new link

[04:47:29.0000] <MikeSmith>
/me looks in his own working directory

[04:47:45.0000] <smaug____>
ah, thanks

[04:49:20.0000] <MikeSmith>
annevk: I don't see that behavior in my environment. I have symlinks set up and they don't get overwritten no matter how many times I build

[04:49:42.0000] <MikeSmith>
anyway I will write up a patch for this tonight hopefully

[04:50:03.0000] <MikeSmith>
then you can please help test that

[04:51:40.0000] <annevk>
https://github.com/whatwg/html-build/issues/6 issue with caniuse integration

[04:52:04.0000] <annevk>
it seems the downloaded caniuse.json is input for wattsi, so maybe I should have filed the bug there...

[04:52:46.0000] <annevk>
MikeSmith: where you talking about palpable elements the other day?

[04:52:53.0000] <MikeSmith>
yeah

[04:53:01.0000] <annevk>
/me just found <!-- XXX this index doesn't list the palpable elements -->

[04:53:04.0000] <MikeSmith>
wrote a minor patch to add info to the spec

[04:53:08.0000] <MikeSmith>
yeah, saw that

[04:53:11.0000] <MikeSmith>
too

[04:54:00.0000] <MikeSmith>
I can add whatever's needed there, I guess (or try; I haven't looked yet at what it needs)

[05:21:03.0000] <annevk>
MikeSmith: does your html-build patch move the output elsewhere?

[05:21:19.0000] <annevk>
MikeSmith: or should I add unicode.xml, caniuse.json, cldr.inc, etc. to .gitignore too?

[05:24:05.0000] <MikeSmith>
annevk: I could make a patch that moves the output elsewhere, but I wasn't planning to move it. Was planning to just keep it where it is now

[05:24:15.0000] <annevk>
seems fine to me

[05:24:23.0000] <annevk>
I'll add more stuff to .gitignore

[05:24:28.0000] <MikeSmith>
yup

[05:24:31.0000] <MikeSmith>
sounds good

[05:24:56.0000] <zcorpan>
annevk: Domenic: philipj: is it intentional that your emails are not listed in html's acks?

[05:25:12.0000] <annevk>
zcorpan: dunno, ask Hixie

[05:25:24.0000] <philipj>
Domenic: I don't think it's intentional

[05:26:01.0000] <philipj>
It doesn't matter to me if it listed or not, but I also noticed the difference

[05:37:40.0000] <zcorpan>
Domenic: is d⊙dm your preferred email? and do you object to it being in the spec's acks?

[05:41:46.0000] <annevk>
zcorpan: see https://streams.spec.whatwg.org/#acks

[05:44:03.0000] <zcorpan>
thx. i'll just push this change without a PR

[06:05:38.0000] <mkwst>
Also, since I'm adding things to HTML: how do y'all feel about https://mikewest.github.io/credentialmanagement/writeonly/#examples-signin?

[06:05:45.0000] <mkwst>
Or is the answer "File a bug"? :)

[06:08:26.0000] <annevk>
mkwst: still not entirely clear to me whether that's worth the complexity, but yes, we can triage bugs

[06:09:06.0000] <mkwst>
annevk: I'm adding opaque FormData elements to CREDENTIAL based on the discussion at https://github.com/w3c/webappsec/issues/241. Seems like a short hop to writeonly fields. *shrug* I'll file a bug.

[06:09:49.0000] <annevk>
mkwst: perhaps I'm not understanding you

[06:09:56.0000] <annevk>
mkwst: what would be the alternative to an issue?

[06:11:00.0000] <mkwst>
Now I'm not understanding you. "alternative to an issue"? I'm happy to file a bug, that's a totally reasonable way to reboot the discussion.

[06:12:11.0000] <annevk>
mkwst: I wasn't sure what other answer you might be expecting

[06:12:40.0000] <mkwst>
annevk: "Yes! It's such a good idea, I'll grab the spec you wrote and backport the monkey patches myself right now!"?

[06:12:50.0000] <annevk>
mkwst: I see, hah

[06:16:05.0000] <mkwst>
So... that's not what you're saying, I guess? :)

[06:17:34.0000] <annevk>
mkwst: I think the main problem with the credential management API is lack of interest from other vendors, coupled with it not really solving federation well

[06:17:58.0000] <annevk>
mkwst: note that I'm not sure how to address either of those :-(

[06:18:36.0000] <mkwst>
annevk: Vendor interest will work itself out, one way or another. Federation is a hard problem.

[06:19:23.0000] <mkwst>
annevk: I don't know how to solve it completely and well. I do know how to solve a small piece of it that seems like it would have real value in terms of allowing users to avoid the "NASCAR"-style choosers on pages.

[06:19:37.0000] <mkwst>
annevk: But folks don't seem to like that proposal.

[06:20:13.0000] <mkwst>
annevk: Or, the three people who are engaging on the list don't like it. Not sure how well that scales to everyone; I know random folks on Google's identity team are standing on my neck about it. :)

[06:20:32.0000] <annevk>
I guess it would be a little bit more compelling if we had some content teams chime in

[06:20:59.0000] <annevk>
E.g., GitHub seems to say it doesn't work for them, but maybe Stack Exchange would adopt this immediately?

[06:21:32.0000] <annevk>
Also, do we have stats now on how often the cookie clearing happens affecting such scenarios?

[06:33:21.0000] <MikeSmith>
mkwst: your latest e-mail summarizes it all aptly

[06:33:38.0000] <MikeSmith>
will be interesting to see what responses you get to that

[06:34:07.0000] <mkwst>
annevk: I know that ~11% of Chrome users that opted into metrics clear cookies on a weekly basis.

[06:34:32.0000] <mkwst>
annevk: as I noted on the other thread, I don't have any more detail than that. Nor do I really know how I'd get it...

[06:35:04.0000] <MikeSmith>
~11% is a relatively huge number

[06:36:14.0000] <mkwst>
11.8% last week.

[06:36:53.0000] <mkwst>
I wonder if I can get historical information on this... my recollection is that it's been pretty constant. If users have learned anything at all about privacy on the web, it's "Clear cookies! All the time! Twice, even, just to be  sure!"

[06:38:38.0000] <mkwst>
All I have is a raw counter. It's interesting, though: the counter is 5x the number of users. So this set of users is really clearing cookies _often_.

[06:40:18.0000] <mkwst>
MikeSmith: Dunno. I just want to ship the pieces that solve the problems I care about. I feel like doing that in an iterative fashion is reasonable. It's just not clear to me what the MVP actually is.

[06:40:51.0000] <annevk>
mkwst: I guess the other number that's interesting is how many have stored passwords and how often those are cleared (if ever)

[06:41:50.0000] <mkwst>
3.04% of users check the "passwords" box when clearing browsing data.

[06:42:11.0000] <mkwst>
or, more accurately, 3.04% of users cleared passwords in the last week.

[06:42:25.0000] <mkwst>
(where "users" === "users who have opted into sharing statistics", etc)

[06:42:26.0000] <annevk>
so this is a feature for the remaining 8%?

[06:42:58.0000] <annevk>
I wonder what the numbers of Firefox are

[06:43:05.0000] <mkwst>
Cookies are fragile. *shrug* We lose them for all sorts of reasons unrelated to user intention.

[06:44:09.0000] <annevk>
Really?

[06:45:23.0000] <mkwst>
The login team has some numbers I don't actually remember about how often users log in without explicitly logging out. It was higher than I expected.

[07:33:07.0000] <Domenic>
MikeSmith: mkwst: Travis is a no-go because we need to maintain local caches/built copies of stuff

[07:33:22.0000] <Domenic>
/me is still reading scrollback

[07:34:19.0000] <mkwst>
Hrm? Travis can pull things down to do a clean build, right?

[07:36:45.0000] <wanderview>
mkwst: maybe they have the setting to clear cookies on browser close?

[07:37:23.0000] <mkwst>
wanderview: I think that's probably included in the counter, sure. But I'd be surprised if that was a significant percentage.

[07:37:30.0000] <mkwst>
wanderview: I wonder if we track that. Give me a minute.

[07:37:46.0000] <wanderview>
it was just a thought... or an addon to clear cookies on a regular interval

[07:41:19.0000] <wanderview>
I wish there was a way to follow significant changes to the html spec and easily hide smaller editorial changes

[07:41:44.0000] <wanderview>
it seems people have been waiting to change the html spec for a while

[07:42:17.0000] <mkwst>
wanderview: Something like 0.3% of users have the "session only" setting toggled. So it's probably a contributing factor, but not a huge one.

[07:42:30.0000] <Domenic>
mkwst: yes. That's the problem. It would do a clean build (~45 minutes) each time

[07:42:49.0000] <mkwst>
Domenic: ...

[07:42:51.0000] <Domenic>
mkwst: after we get the separate-directories thing straightened out complete builds should be ~2 minutes

[07:42:57.0000] <Domenic>
but it's incremental

[07:43:01.0000] <mkwst>
Domenic: I'd say that a ~45 minute build is the problem.

[07:43:06.0000] <Domenic>
it reuses caches and checkouts from the previous commits

[07:43:14.0000] <mkwst>
I'd say that a ~2 minute build is a problem. :)

[07:43:23.0000] <Domenic>
yes, well, it's 8 MB source

[07:43:30.0000] <Domenic>
maybe it's faster on a Z620

[07:43:53.0000] <mkwst>
Chrome is a bit more than 8 MB, and it builds in a half hour on my mac mini at home. :)

[07:44:05.0000] <annevk>
Domenic: it only takes 5min to run the build script here

[07:44:09.0000] <mkwst>
maybe 45m.

[07:44:15.0000] <annevk>
Domenic: actually, prolly less

[07:44:28.0000] <Domenic>
annevk: right, that's an incremental build. No need to svn checkout, rebuild all the caches, etc.

[07:44:34.0000] <annevk>
Domenic: ah

[07:44:42.0000] <Domenic>
Also the demo CURLing has spiked the time a bit

[07:44:58.0000] <Domenic>
https://github.com/whatwg/html/issues/30

[07:45:26.0000] <mkwst>
Domenic: have you considered caching some of the dependencies directly in the repo? I mean, caniuse doesn't change that often, right?

[07:45:35.0000] <Sebmaster>
annevk: is url's path reset somewhere when the parser encounters a windows drive letter?

[07:45:39.0000] <mkwst>
Ah, yeah. Same as that bug. :)

[07:46:15.0000] <Domenic>
mkwst: caniuse changes surprisingly often I think. But yeah I think for people besides the official build server we should have more cache type things

[07:46:23.0000] <annevk>
Sebmaster: for override you mean?

[07:46:24.0000] <Domenic>
mkwst: part of your "don't do everything every time" issue in some ways

[07:46:28.0000] <annevk>
Sebmaster: that might not be covered

[07:46:47.0000] <annevk>
Sebmaster: never mind, it is

[07:47:08.0000] <Sebmaster>
annevk: no i mean if you have if you have a file:C:\test parsing against a base of file:///tmp/var/

[07:47:24.0000] <annevk>
Sebmaster: it should simply not copy base's path

[07:47:29.0000] <Sebmaster>
ah i see

[07:47:35.0000] <Sebmaster>
I'll need to find where i do that then

[07:57:52.0000] <Sebmaster>
sweet, got it, thanks annevk

[08:05:52.0000] <Domenic>
OK, caught up on email, time to eat breakfast... then a day to spend on the build script.

[08:25:50.0000] <wanderview>
annevk_: is it reasonable for a 404 html response page to register a service worker?

[08:27:00.0000] <annevk>
wanderview: yeah

[08:27:08.0000] <wanderview>
interesting, ok

[08:51:31.0000] <zcorpan>
annevk: so the spec changes that were done in ResponsiveImagesCG is cc0. the comment in the source saying so is not preserved

[08:52:33.0000] <annevk>
zcorpan: I'm not sure how you could tell what are changes and what are not

[08:53:26.0000] <zcorpan>
annevk: yeah dunno

[08:53:44.0000] <annevk>
zcorpan: that would be helped by the commit log

[08:54:15.0000] <annevk>
zcorpan: we should maybe address that in the Acknowledgments section?

[08:54:36.0000] <annevk>
zcorpan: that might also be a better place for the history of that section

[08:56:35.0000] <zcorpan>
annevk: yeah. we can work on that as a separate change

[08:58:08.0000] <annevk>
speaking of which, it would be nice if any new contributions to the HTML Standard were CC0

[09:26:23.0000] <annevk>
Domenic: apparently you can also turn an issue into a PR

[09:26:38.0000] <annevk>
Domenic: but you need GitHub command line tools for that

[09:26:52.0000] <Domenic>
annevk: yeah, I find that a bit meh too; I like having PRs close issues. *shrug*

[09:27:02.0000] <annevk>
I see

[09:27:19.0000] <annevk>
I thought it was rather cool when someone did that to me

[09:27:23.0000] <Domenic>
heh

[09:27:29.0000] <Domenic>
OK so I'm going to try the picture stuff

[09:27:55.0000] <annevk>
Domenic: zcorpan is trying to merge

[09:28:04.0000] <Domenic>
oh ok then

[09:28:12.0000] <Domenic>
let me know when it's time ot update the build script

[09:28:16.0000] <annevk>
Domenic: he hasn't done the clean merging yet so seems like a good opportunity

[09:28:17.0000] <zcorpan>
yeah i've only push left to do, assuming i got the rest right

[09:28:26.0000] <annevk>
Domenic: apparently git push upstream doesn't work

[09:28:31.0000] <annevk>
Domenic: should that just be "git push"

[09:28:57.0000] <Domenic>
annevk: it depends what you named your remote. Mike named his upstream I think

[09:29:18.0000] <zcorpan>
i'm doing this from whatwg/html, not from a fork

[09:29:31.0000] <Domenic>
then yeah git push === git push origin should work

[09:29:36.0000] <zcorpan>
k

[09:29:38.0000] <Domenic>
(origin is the default remote name)

[09:29:50.0000] <annevk>
Domenic: you merge on your remote? interesting

[09:29:57.0000] <annevk>
so much to learn

[09:30:10.0000] <Domenic>
oh no i just push to it

[09:30:13.0000] <Domenic>
I think

[09:30:24.0000] <zcorpan>
there we are

[09:30:30.0000] <Domenic>
I pretty extensively use a GUI to visualize the tree tbh

[09:30:42.0000] <Domenic>
nice zcorpan

[09:30:55.0000] <Domenic>
I'll do the build merge

[09:31:03.0000] <annevk>
it seems it did lose the PR connection

[09:31:07.0000] <zcorpan>
thanks for the pr thing Domenic

[09:31:42.0000] <Domenic>
annevk: yeah gotta force-push to the appropriate branch after the rebase. Which is actually kind of hairy when someone else created the branch so you don't have a local copy yet. Probably not worth the trouble.

[09:32:11.0000] <tantek>
^^^ lol git

[09:32:20.0000] <zcorpan>
-_-

[09:32:40.0000] <Domenic>
just read the man pages http://git-man-page-generator.lokaltog.net/

[09:32:50.0000] <tantek>
"just" :)

[09:32:59.0000] <Domenic>
tantek: click the link. and refresh a few times ;)

[09:33:06.0000] <zcorpan>
i'll go running instead. that i know how to do

[09:33:16.0000] <tantek>
zcorpan++ I'm right there with you.

[09:33:44.0000] <tantek>
Domenic: ah, a js;dr page I see ;)

[09:34:06.0000] <Domenic>
tantek: stop trying to make js;dr happen. it's not going to happen.

[09:34:07.0000] <tantek>
ok that's pretty amazing

[09:37:33.0000] <tantek>
zcorpan: next f2f meeting, bring your running shoes and come running with Rossen and me.

[09:38:14.0000] <zcorpan>
tantek: sure. if i forget the shoes i can run barefoot :-)

[09:40:20.0000] <zcorpan>
i've run 10k on tarmac/gravel on 52 mins (but my feet needed some recovery after that)

[09:41:36.0000] <tantek>
ouch. you must have some serious callouses!

[09:41:48.0000] <Domenic>
annevk: going to just merge https://github.com/whatwg/html/pull/7 mk?

[09:41:55.0000] <tantek>
you'll be good competition for Rossen then, I'll catch up eventually.

[09:42:03.0000] <Domenic>
I think we should prioritize load time over issue filing.

[09:42:33.0000] <annevk>
Domenic: you mean the other way around?

[09:42:42.0000] <Domenic>
annevk: defer prioritizes load time

[09:42:48.0000] <Domenic>
annevk: and I think we should keep it that way

[09:43:07.0000] <Domenic>
Relatedly, we should do this https://www.w3.org/Bugs/Public/show_bug.cgi?id=25943

[09:43:17.0000] <annevk>
Domenic: anyway, it's fine

[09:43:18.0000] <zcorpan>
tantek: i have thick skin from walking barefoot on gravel on a daily basis

[09:43:35.0000] <annevk>
Domenic: I'd like to audit our scripts at some point, but this is not the time

[09:43:45.0000] <Domenic>
annevk: agreed

[09:44:17.0000] <Domenic>
Oh, I need to set up the PDF stuff today

[09:44:52.0000] <annevk>
Ah yeah, would be good to reply to them

[09:45:30.0000] <Domenic>
I am glad we're keeping number of open PRs low

[09:45:39.0000] <Domenic>
I think a good goal for any project is zero open PRs even if many open issues.

[09:47:15.0000] <Domenic>
Hmm https://html.spec.whatwg.org/#dependencies-2 seems kind of out of place

[09:48:11.0000] <annevk>
Domenic: yeah, <picture> is not done

[09:48:20.0000] <annevk>
Domenic: that first commit was just doing what the build script does

[09:48:32.0000] <Domenic>
Maybe add a checklist to https://github.com/whatwg/html/issues/52

[09:48:38.0000] <annevk>
Domenic: or did I miss something the build script does?

[09:48:42.0000] <annevk>
sure

[09:48:50.0000] <Domenic>
annevk: nah I think that was it

[09:49:55.0000] <MikeSmith>
Domenic: fwiw after reading https://github.com/whatwg/html/pull/58#issuecomment-136397127 I agree with you completely

[09:50:15.0000] <Domenic>
cool :)

[09:50:16.0000] <MikeSmith>
until I read that, I just didn't know that's what y'all had been doing

[12:59:50.0000] <Domenic>
annevk: thanks for catching me on acks. I will try to do better in the future!

[13:07:35.0000] <annevk>
Domenic: no problem

[13:08:00.0000] <annevk>
Domenic: any reason we can't start using utf-8 in the source? I guess Hixie had some reason for keeping it ASCII-clean

[13:08:11.0000] <Domenic>
annevk: yeah no idea, I just stuck with existing convention

[13:08:51.0000] <gsnedders>
annevk: dev.w3.org at least used to be a problem, and getting it to reliably send any charset was hard

[13:09:03.0000] <gsnedders>
annevk: that's the reason why it stayed ASCII-onyl

[13:09:21.0000] <annevk>
hmm, if that's the only reason we can move, but we should maybe ask Hixie to be sure

[13:14:08.0000] <zcorpan>
i just realized that it was about 10 years ago i sent my first email to whatwg. https://lists.w3.org/Archives/Public/public-whatwg-archive/2005Jun/0099.html

[13:25:36.0000] <zcorpan>
next 10 years, guys!

[13:34:28.0000] <gsnedders>
annevk: certainly in my days developing Anolis that was it

[13:39:23.0000] <jamesr___>
zcorpan: https://lists.w3.org/Archives/Public/public-whatwg-archive/2005Jun/0109.html is a pretty good idea

[13:40:04.0000] <zcorpan>
jamesr___: one part of the proposal was adopted :-)

[13:41:40.0000] <jamesr___>
the better part

[16:25:09.0000] <Jasper>
Do any browsers implement the XHTML syntax as specified in the HTML spec?

[16:42:11.0000] <MikeSmith>
Jasper: yes

[16:42:23.0000] <Jasper>
Hm.

[16:42:50.0000] <Jasper>
When I tried locally here, Chromium and Firefox both allowed document.write(); in XHTML documents, even though the spec said that was disallowed.

[16:43:27.0000] <MikeSmith>
well if you mean do all browsers completely conform to the spec requirements, then the answer is, probably not

[16:44:14.0000] <MikeSmith>
Jasper: to be clear, by "XHTML syntax", you mean the document is served with a XML media type, right?

[16:44:29.0000] <MikeSmith>
instead of as text/html

[16:44:52.0000] <Jasper>
MikeSmith, yes.

[16:45:10.0000] <Jasper>
MikeSmith, application/html+xml, I believe it is

[16:45:14.0000] <Jasper>
Although https://html.spec.whatwg.org/multipage/xhtml.html does not exactly say.

[16:45:30.0000] <Jasper>
I do like the wording of "At the time of writing, no such rules actually exist."

[16:45:36.0000] <MikeSmith>
yeah, because it doesn't have to stricly be application/html+xml

[16:45:58.0000] <MikeSmith>
there is lots of great wording in the spec like that

[16:46:32.0000] <MikeSmith>
anyway, for one thing, I'd suggest you submit some actual test cases

[16:46:43.0000] <MikeSmith>
to https://github.com/w3c/web-platform-tests

[16:46:57.0000] <MikeSmith>
or check there and see if there are already some test cases

[16:47:12.0000] <MikeSmith>
under https://github.com/w3c/web-platform-tests/tree/master/html

[16:47:32.0000] <MikeSmith>
the subdirs there correspond to sections in the spec

[16:47:47.0000] <MikeSmith>
and the subdirs of those, to subsections, etc.

[16:48:13.0000] <MikeSmith>
and you can run the tests in browsers from http://w3c-test.org/html/

[16:48:34.0000] <MikeSmith>
that's just a mirror of the current state of that github repo

[16:49:41.0000] <MikeSmith>
as far as the spec goes, if tests show that UAs don't conform on this, then that might merit putting a note or annotation in the spec so that people can know that

[16:49:55.0000] <Jasper>
MikeSmith, I'm more curious because I thought the WHATWG gave up on XHTML, and was surprised to see a half-finished spec about it.

[16:50:06.0000] <MikeSmith>
or it might even merit changing the requirements in teh spec to match what most UAs do

[16:50:18.0000] <MikeSmith>
it's not a half-finished spec

[16:50:23.0000] <MikeSmith>
for XHTML

[16:50:26.0000] <Jasper>
I'm part of a team that wants to perhaps use schemas and XSLT and such to verify and transform XHTML, and when I mentioned it was dead, they pointed me there.

[16:50:38.0000] <MikeSmith>
well

[16:51:31.0000] <MikeSmith>
the HTML spec is not something that any reasonable person would see as being strong support somehow for using schemas and XSLT

[16:52:01.0000] <MikeSmith>
and if you're in a team that wants to use schemas and (client-side?) XSLT then you have my sympathy

[16:52:11.0000] <MikeSmith>
because that will probably end badly

[16:52:54.0000] <MikeSmith>
and I say that as somebody who has done a lot of work in XSLT, and knows quite a lot about schemas and still does a lot of work in schemas

[16:52:56.0000] <Jasper>
MikeSmith, I agreed.

[16:53:06.0000] <MikeSmith>
OK

[16:53:25.0000] <Jasper>
MikeSmith, we hired a ~*~ contractor ~*~ who loves XML and XSLT and recommended buying an enterprise XSLT server license.

[16:53:38.0000] <MikeSmith>
anyway, the spec is in this regard mostly just documenting what's actually implemented in UAs

[16:53:42.0000] <Jasper>
It's not client-side XSLT -- it's going to be server-side.

[16:53:42.0000] <Jasper>
OK.

[16:53:46.0000] <MikeSmith>
christ

[16:53:54.0000] <MikeSmith>
so get rid of that contracter

[16:54:00.0000] <Jasper>
I'm pushing back as hard as I can.

[16:54:08.0000] <MikeSmith>
yeah you should

[16:54:20.0000] <Jasper>
We already have a contingency plan to get rid of XSLT, since we already believe they'll deliver us something completely unmanageable.

[16:54:43.0000] <MikeSmith>
well I don't think server-side XSLT is the worst thing in the world

[16:54:55.0000] <MikeSmith>
it's just that there are many better things

[16:55:07.0000] <Jasper>
OK, fair enough. I don't have any experience with XSLT.

[16:55:28.0000] <Jasper>
Currently we're using manual DOM manipulations, which isn't great either. If you have any recommendations, please let me know.

[16:55:46.0000] <MikeSmith>
ok, hire me as a consultant :-)

[16:56:15.0000] <Jasper>
MikeSmith, what are your rates?

[16:57:00.0000] <Jasper>
MikeSmith, it would be nice to know what you think about HTML, XML, transformations, and such -- we're far from experts on the stuff, we just have half-baked opinions based on what we've written.

[16:57:18.0000] <Jasper>
But this channel probably isn't the time or place for it.

[16:58:36.0000] <MikeSmith>
let's see, last time I did consulting full-time I think my employer billed 1800 USD per day for my time. And that was a few years go. So something in that range.

[16:59:16.0000] <MikeSmith>
Jasper: yeah I don't know where would be the best place to ask

[16:59:56.0000] <Jasper>
Do you mind if we talk a bit in PM? Don't want to mooch or anything.

