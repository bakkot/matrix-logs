2014-03-01
[16:00:27.0000] <zewt>
oh god it has its own clippy

[16:00:37.0000] <Hixie>
?

[16:00:41.0000] <zewt>
"pegman" heh

[16:00:50.0000] <Hixie>
old maps had pegman too... how is it like clippy?

[16:01:19.0000] <zewt>
corniness? heh

[16:02:40.0000] <Hixie>
?

[16:02:48.0000] <Hixie>
it's just a ui widget to drop you into street view

[16:02:51.0000] <Hixie>
how is it corny?

[16:02:56.0000] <SamB>
/me wonders why browsers don't have a "find an anchor to link to" feature ...

[16:03:14.0000] <Hixie>
zewt: (i'm not arguing it isn't, i just don't understand what you mean)

[16:03:59.0000] <zewt>
a goofy character suddenly introducing itself seems corny to me, heh

[16:04:01.0000] <SamB>
anyway, um, http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html#non-conforming-features provides some VEEERY terse recommendations

[16:04:26.0000] <Hixie>
zewt: he introduced himself? interesting, i haven't seen that

[16:04:35.0000] <Hixie>
i wonder if they added the introduction after i'd been using it already

[16:04:36.0000] <zewt>
"hey, I'm pegman" or something like that (dismissed it already)

[16:04:53.0000] <Hixie>
agreed that that's corny. or cute, you know, whatever floats your boat :-P

[16:05:10.0000] <Hixie>
SamB: happy to add more... file bugs with suggested text

[16:05:16.0000] <zewt>
at least it didn't slowly animate on screen, and then when told to go away, slowly animate off

[16:06:48.0000] <Hixie>
i think the thing that made clippy "clippyesque" isn't so much the animation, or the cuteness, or even the slowness of the interaction, it's that it just wasn't that useful, so it would interrupt you in ways that were just annoying.

[16:08:47.0000] <astearns__>
I have no idea whether the new pegman intro is useful, since I reflexively dismissed it as soon as it appeared

[16:09:54.0000] <astearns__>
in general, I think one should avoid modal things that pop up to show you how to use new studd

[16:09:59.0000] <astearns__>
s/studd/stuff/

[16:10:05.0000] <SamB>
Hixie: well, I suspect that more detailed recommendations would be more approriate in some of the linked sections; probably this one should just explain how to tell which link(s) will provide such details

[16:10:50.0000] <Hixie>
SamB: that works too. basically whatever it is you want, file a bug saying what it is :-)

[16:11:00.0000] <zewt>
astearns__: yeah, the "learn new maps!!!" dialog that popped up at first was bad like that

[16:11:34.0000] <zewt>
since when I first turn it on I just want to poke around first (so I dismiss it), and of course now I don't know how to get it back if I wanted to look at it now (not that I really want to)

[16:13:38.0000] <TabAtkins>
zewt: That *precise* feedback was just echoed by some in internal Plus today.

[16:13:54.0000] <TabAtkins>
"Warm welcome" tutorials are often worthless for that reason.

[16:14:09.0000] <SamB>
/me goes to look up the checkout directions ...

[16:14:48.0000] <zewt>
itym "get out of the way, damn it" tutorials

[16:15:19.0000] <zewt>
at least maps's did (some are very insistant)

[16:17:42.0000] <SamB>
so basically, such tutorials should start like this:  1. To re-open this tutorial, [...]  2. To close this tutorial, [...]

[16:23:03.0000] <SamB>
/me wonders where he can find an <applet> tag in use ...

[17:13:01.0000] <SamB>
/me is kind of freaked out to see that Mozilla still loads Java DLLs in-process ... though thinking about it for a bit, he does remember hearing about Mozilla having some very special APIs basically just for the Java "plugin" ...

[17:15:49.0000] <zewt>
/me tries not to speak in the third person

[17:16:36.0000] <SamB>
/me finds that ACTION tends to look funny otherwise

[17:17:45.0000] <zewt>
/me prefers PRIVMSG

[17:20:31.0000] <SamB>
it *is* a PRIVMSG; it just has some funky stuff in it that ...

[17:34:41.0000] <SamB>
/me sees that zewt is familiar with the concept :-)

[21:43:26.0000] <AlexBones>
zewt: Why the fuck are you sending a bunch of CTCP shit?

[21:43:42.0000] <zewt>
to personally irritate you

[21:43:56.0000] <zewt>
mission: success

[21:46:59.0000] <AlexBones>
zewt!*@* added to ignore list.

[21:47:28.0000] <AlexBones>
That kind of fucktard reply would have resulted in a permanent ban and k-line if sane people were running this shit.

[21:47:59.0000] <zewt>
good to know teenagers still inhabit IRC.

[22:07:28.0000] <SamB>
/me thinks the w3c validator should perhaps use validator.nu for more stuff ...

[22:24:47.0000] <SamB>
AlexBones: hmm, your sarcasm-o-meter seems busted

[22:42:21.0000] <AlexBones>
Just tired of all the obnoxious people.

[22:47:19.0000] <MikeSmith>
SamB: what more should the w3c validator be using validator.nu for?

[22:49:04.0000] <SamB>
/me thinks its HTML 4 schemas are a bit more precise than the DTDs that onsgmls uses ...

[22:50:02.0000] <MikeSmith>
ah

[22:50:39.0000] <MikeSmith>
I was exposing HTML4 checking as an option at http://validator.w3.org/nu/ but I've since remove it

[22:50:48.0000] <MikeSmith>
*removed

[22:52:02.0000] <MikeSmith>
I removed the whole Presets menu actually

[22:52:49.0000] <MikeSmith>
so it just chooses a schema based on the MIME type of the document and doesn't provide an option in the UI to override that

[22:54:10.0000] <MikeSmith>
so by default it now does validation against the latest HTML spec (aka HTML5), even for documents that have a HTML4 doctype

[22:56:05.0000] <MikeSmith>
validator.nu also always does that by default now too, even for documents with HTML4 doctypes. It just still also provides the Presets option to allow users to override that behavior if they want

[22:58:51.0000] <MikeSmith>
anyway I was maintaining the validator.nu HTML4 schema for a while and responding to bug reports and requests about it but I'm no longer interested in putting any time into it

[23:00:33.0000] <MikeSmith>
I'm not sure why anybody should want to do HTML4 validation other than just out of curiosity -- to see, e.g., what was an error in HTML4 but not in HTML now, or whatever

[00:17:25.0000] <SamB>
hmm, what license are the WHATWG logos under?

[07:48:59.0000] <zewt>
(yeah, nothing obnoxious at all about calling someone a "fucktard")

[11:58:45.0000] <JonathanNeal>
Thoughts? A this-is-responsive style page about a11y http://jonathantneal.github.io/this-is-a11y/

[13:08:42.0000] <SamB>
hmm, I think http://resources.whatwg.org/ needs a COPYING file. Also, the FAQ doesn't seem to contain anything about licensing ...

[15:33:07.0000] <gsnedders>
SGML/XML used by linguists is uniformally horrifying. It makes me want to cry all the time. :(


2014-03-02
[16:23:17.0000] <JonathanNeal>
gsnedders: I find all sgml documents to be rather frustrating.

[16:24:22.0000] <JonathanNeal>
I would dig a future of native slim-lang parsing http://slim-lang.com/

[18:55:05.0000] <SamB>
/me finds the typical DSSSL stylesheet to be refreshingly straightforward

[18:55:35.0000] <SamB>
(note: they usually don't have any actual tags in them)

[08:46:05.0000] <JonathanNeal>
I’m writing a short article to describe the differences between the Content-Language header and the lang attribute. Is it accurate so far? https://gist.github.com/jonathantneal/9309367

[10:42:23.0000] <SimonSapin>
JonathanNeal: http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#language is based on lang attributes, but when that’s missing it uses Content-Language as the final fallback

[10:53:26.0000] <SimonSapin>
I don’t know if the difference means anything in practice

[10:53:51.0000] <SimonSapin>
such as, any tool interpreting them differently

[10:57:29.0000] <Ms2ger>
:lang?

[11:06:23.0000] <SimonSapin>
:lang() treats them the same, other than priority

[11:09:56.0000] <JonathanNeal>
SimonSapin, do you know if the lang attribute supports multiple languages?

[11:10:07.0000] <SimonSapin>
It doesn’t

[11:10:34.0000] <SimonSapin>
but when falling back to Content-Language, "the language of an element" doesn’t either

[11:11:02.0000] <SimonSapin>
see link above

[11:12:27.0000] <JonathanNeal>
I believe Content-Language supports multiple attributes http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.12

[11:12:37.0000] <SimonSapin>
yes

[11:13:09.0000] <SimonSapin>
but not when it’s used as the fallback for the language of an element, per the HTML spec

[11:13:29.0000] <SimonSapin>
maybe search engines use Content-Language

[11:15:52.0000] <SimonSapin>
my point is that "Don’t do this because it’s Wrong" isn’t very helpful if it doesn’t make any difference in practice.

[11:17:25.0000] <JonathanNeal>
Oh, do you think I suggesting something like that in my post?

[11:18:45.0000] <SimonSapin>
not really

[11:19:46.0000] <SimonSapin>
but "This also means a document intending to teach French to English readers would use Content-Language: en", what happens if I use Content-Language: fr in this case?

[11:20:20.0000] <Ms2ger>
More angels would dance on the head of a pin

[11:22:51.0000] <JonathanNeal>
SimonSapin, in that case, a translation service might recommend translating the french portions into English, despite the intent to keep them?

[11:23:23.0000] <SimonSapin>
JonathanNeal: than that’s what the article should say

[11:24:35.0000] <SimonSapin>
all the better if you have example of existing translation services that do behave that way

[11:26:15.0000] <JonathanNeal>
Great.

[11:29:13.0000] <zewt>
if there are no web-compat reasons to do otherwise (which there may be), content-language and <html @lang> should be the same thing

[11:29:52.0000] <zewt>
it's hard enough to get people to tag languages in the first place, without having multiple different ways with different nuances, and some in HTML headers and others inline

[11:41:10.0000] <SimonSapin>
+1

[11:42:45.0000] <SimonSapin>
though for HTML’s purposes they’re already the same, and CSS only uses them through HTML’s definition

[11:52:05.0000] <JonathanNeal>
zewt, SimonSapin, thanks for the input. I’ve made some changed based on our conversation. Do you think this reads more accurately? https://gist.github.com/jonathantneal/9309367

[11:53:38.0000] <SimonSapin>
JonathanNeal: don’t link to HTML 4

[11:57:02.0000] <SimonSapin>
JonathanNeal: "Google determines ...", is that Search or Translate? The blog post you link to seems to be about Search

[12:06:43.0000] <JonathanNeal>
SimonSapin: Thanks, I will do some research and clarify that.

[13:01:20.0000] <MikeSmith>
JonathanNeal: SimonSapin is right that you shouldn't reference HTML4

[13:02:04.0000] <MikeSmith>
that spec should not be trusted as anything reflecting reality

[13:02:25.0000] <MikeSmith>
I guess you should just use http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-26#section-3.1.3.2 instead

[13:03:00.0000] <MikeSmith>
there's supposed to be an updated RFC  of the HTTP spec published soon

[13:03:21.0000] <MikeSmith>
I think -26 is the final editor's draft

[13:04:18.0000] <MikeSmith>
JonathanNeal: or instead maybe best to just use https://www.w3.org/International/questions/qa-html-language-declarations

[13:04:49.0000] <JonathanNeal>
MikeSmith: Thanks. I'm using that document currently to reference more of what I'm writing.

[13:05:17.0000] <MikeSmith>
https://www.w3.org/International/questions/qa-html-language-declarations#metadata

[13:05:31.0000] <MikeSmith>
JonathanNeal: ok

[13:06:31.0000] <MikeSmith>
btw the stuff under https://www.w3.org/International/ is generally trustworthy

[13:07:19.0000] <MikeSmith>
since Richard Ishida knows whereof he speaks, and he keeps that content up to date

[13:09:19.0000] <JonathanNeal>
Basically - English is the default language of the web. The lang attribute describes the language of actual content. It falls back on content-header. Content-header describes the language of the intended audience. It can describe multiple languages, but in practice, keep pages monolingual.

[13:09:37.0000] <MikeSmith>
https://www.w3.org/International/questions/qa-http-and-lang seems good too

[13:09:40.0000] <JonathanNeal>
content-language header

[13:25:24.0000] <SamB>
/me wonders again what license applies to the stuff on http://resources.whatwg.org/ ...

[13:28:39.0000] <Ms2ger>
That's a good question

[13:30:13.0000] <Ms2ger>
I don't think anyone took the time to slap a license on it

[13:31:42.0000] <Ms2ger>
Probably look up who contributed to https://github.com/whatwg/resources.whatwg.org and send them email cc www-archive to see if they agree to relicensing

[13:36:16.0000] <SamB>
/me was just going to report a bug against HTML even though it's not really HTML-related ... but I guess that would also work

[13:38:25.0000] <SamB>
my first inclination was to file in issue against the github repository, but it has issues disabled :-(

[13:39:15.0000] <SamB>
/me wonders if these logos are trademarks

[13:40:16.0000] <Ms2ger>
The XHR one may be somewhat problematic

[13:45:43.0000] <ZiNC>
Hey.

[13:48:16.0000] <ZiNC>
Is there a WebMUX implementation anywhere?

[14:06:06.0000] <MikeSmith>
never heard of it

[14:07:18.0000] <ZiNC>
Last draft seems to be from 1999.

[14:07:27.0000] <ZiNC>
Also called w3mux sometimes, or SMUX originally.

[14:14:09.0000] <SamB>
is that related to SPDY at all?

[14:15:10.0000] <ZiNC>
Some multiplexing ideas might be similar, but I think that's about it.

[14:16:12.0000] <ZiNC>
I think the implementation is part of the ILU. Also from 99.

[14:20:23.0000] <ZiNC>
Hmm, that doesn't look like a generally usable implementation. Tied to the ILU, whatever that does.

[14:24:26.0000] <ZiNC>
Is anyone aware of any simple, implemented, multiplexing protocols?

[14:30:29.0000] <JonathanNeal>
are any of you opinionated between public domain and MIT?

[14:34:43.0000] <ZiNC>
Jonathan: Copyright notice shown?

[14:36:31.0000] <JonathanNeal>
In general, in picking a license. I have committed projects to the public domain, and I haven’t had any problems. On the other hand, I’ve had some issues with MIT licensed stuff because of opinions on how attribution should be made.

[14:37:53.0000] <ZiNC>
I can't say I've dwelt much on licenses.

[14:38:24.0000] <ZiNC>
How's attribution different to any other license with a similar clause?

[14:56:54.0000] <zewt>
JonathanNeal: not personally; some people say they prefer MIT for the warranty disclaimer, but I don't know how that's better than just putting a warranty disclaimer in by itself

[14:58:02.0000] <ZiNC>
What warranty is there to public domain?

[14:59:07.0000] <JonathanNeal>
Public domain is my way of not dealing with any of that, and ensuring that other’s don’t complicate it either.

[14:59:26.0000] <gsnedders>
ZiNC: Depends on what country you're in

[15:00:05.0000] <ZiNC>
Source or target? :) Just seems odd there'd be any warranty to random code you release for free.

[15:00:59.0000] <gsnedders>
ZiNC: Most of the implied warranties in most juristictions apply only to sales.

[15:01:32.0000] <ZiNC>
That's what I'd expect.

[15:01:50.0000] <JonathanNeal>
I had an issue with MIT attribution. Someone worried folks might be technically breaking the license every time they forked the project. And then there’s another infamous story I’d rather not get into where people were acting rather threatening toward me when I changed the language of a forked project.

[15:02:23.0000] <gsnedders>
JonathanNeal: I'll also point out wrt public domain that not all juristictions allow one to put something into the public domain.

[15:03:11.0000] <JonathanNeal>
gsnedders: I did not know that! Anything in particular I should know about that? I apply a lot of JS to public domain.

[15:03:14.0000] <ZiNC>
How can that be?

[15:04:46.0000] <gsnedders>
In quite a few juristictions "public domain" only exists as a state that works pass into after author's life + 70 (or more) years.

[15:05:32.0000] <gsnedders>
And there's no concept of disowning copyright of a work

[15:05:53.0000] <ZiNC>
You can always release anonymously. :)

[15:06:37.0000] <gsnedders>
But you still own copyright.

[15:07:16.0000] <gsnedders>
Ability to release anonymously or pseudononymously is one of the irrevoccable moral rights granting to the author by the Berne Convention.

[15:07:27.0000] <gsnedders>
JonathanNeal: If you're concerned about it, see CC0.

[15:08:44.0000] <gsnedders>
(IANAL, etc.)

[15:12:53.0000] <JonathanNeal>
SimonSapin, MikeSmith, thanks again. I’ve updated https://gist.github.com/jonathantneal/9309367 to reflect some of the information and links you gave me.

[15:13:16.0000] <SamB>
yeah, CC0 is a public domain dedication with failover to a simple permissive license, which is about the best that can be done

[15:14:24.0000] <SamB>
modulo the details of constructing the license so that it will be considered legal everywhere but still provide as much freedom as possible

[15:25:52.0000] <SamB>
anyway, I just reported <https://www.w3.org/Bugs/Public/show_bug.cgi?id=24893> ...


2014-03-03
[19:27:42.0000] <Hixie>
SamB: what do you want to do with the resources?

[19:31:06.0000] <SamB>
Well, logo.svg would look nice on the WHATWG article, obviously, though I guess it could be done as "fair use" on en.wp ...

[19:36:44.0000] <SamB>
(note that commons doesn't seem to require any trademark-related rituals)

[19:41:05.0000] <SamB>
of all the pointless ...

[19:41:09.0000] <SamB>
<link rel="shortcut icon" href="/favicon.ico" />

[19:44:26.0000] <Hixie>
pretty sure that would just be fair use regardless of copyright

[19:48:03.0000] <SamB>
but that's only actually allowed on the English wikipedia

[20:20:48.0000] <SamB>
hmm, you guys haven't been keeping the PNGs up to date ...

[20:56:55.0000] <zewt>
well, "fair use" isn't something that exists everywhere

[20:57:02.0000] <zewt>
as I (incompletely) understand things

[21:02:10.0000] <SamB>
zewt: yes, that would be why it's not allowed on the other wikipedias. even though they're all hosted in the US.

[21:03:13.0000] <zewt>
shouldn't be allowed on any of them

[21:05:53.0000] <SamB>
well, it's not FUN on any of them

[22:30:25.0000] <SamB>
its's too bad PNG only supports up to 256-entry palettes ...

[23:41:55.0000] <SamB>
hmm, rsvg does not grok logo-xhr.png ...

[02:11:58.0000] <MikeSmith>
foolip: could you review a MediaSource test?

[02:57:36.0000] <foolip>
MikeSmith: I could try

[02:58:38.0000] <MikeSmith>
foolip: cool, gimme a minute I'll get you the critic URL

[02:59:13.0000] <MikeSmith>
foolip: https://critic.hoppipolla.co.uk/r/911

[02:59:29.0000] <MikeSmith>
actual PR is https://github.com/w3c/web-platform-tests/pull/708

[03:01:46.0000] <foolip>
MikeSmith: oh look, you're the author

[03:07:35.0000] <MikeSmith>
heh

[03:07:50.0000] <MikeSmith>
foolip: yeah should I have disclosed that first?

[03:21:54.0000] <foolip>
MikeSmith: not really, I just assumed things :)

[03:22:25.0000] <MikeSmith>
:-)

[03:28:42.0000] <foolip>
MikeSmith: you should ask Ms2ger for review as well

[03:29:47.0000] <Ms2ger>
No you shouldn't ;)

[03:29:52.0000] <Ms2ger>
/me lunches

[03:33:21.0000] <foolip>
MikeSmith: you have some issues to look at now anyway :)

[03:34:58.0000] <MikeSmith>
foolip: cool -- thanks much

[04:00:15.0000] <Ms2ger>
MikeSmith, see html/dom/interfaces.html, fwiw

[04:01:54.0000] <MikeSmith>
Ms2ger: yeah I've looked at it before

[04:02:04.0000] <MikeSmith>
I will look at it more

[04:53:25.0000] <MikeSmith>
foolip: Thanks -- from your review comments I realize I can simplify the test quite a bit (since after all it really only needs to test the IDL support). So I'll make the change you suggested about putting all of the setup in an async test and running the IDL tests after that's done. (And push a change later for re-review but I think that next review won't cost much time.)

[08:28:30.0000] <SamB>
gah, I meant to say rsvg doesn't like logo-xhr.svg obviously

[09:12:06.0000] <dglazkov>
good morning, Whatwg!

[12:40:31.0000] <Ms2ger>
<doctype !html>

[13:04:31.0000] <SamB>
where do I report a bug in <http://www.w3.org/TR/SVGMobile12/paths.html#PathData> ...

[13:05:01.0000] <heycam>
SamB, please report bugs to www-svg⊙wo but note that nobody really looks at /TR/SVGMobile2 -- check http://svgwg.org/svg2-draft/paths.html instead

[13:05:13.0000] <SamB>
heycam: ah

[13:12:06.0000] <SamB>
anyway, it seems to refer to both "instructions" and "commands" without making it clear what, if anything, is the difference between them

[13:15:46.0000] <arunranga>
Hi Ms2ger, are you around?

[13:16:04.0000] <Ms2ger>
Briefly

[13:16:13.0000] <heycam>
SamB, (without looking) no difference

[13:16:38.0000] <heycam>
I wonder: are there any specs that define !important UA style sheet rules?

[13:16:50.0000] <arunranga>
You recently closed https://bugzilla.mozilla.org/show_bug.cgi?id=978924 but even your test case shows inconsistencies in event firing across browsers. I've changed the spec., but I think the bug still stands.

[13:17:15.0000] <arunranga>
I think your test case should be added to it.

[13:19:23.0000] <Ms2ger>
arunranga, yeah, Chrome is wrong, it dispatches async

[13:21:19.0000] <arunranga>
/me hmmm… you're right that abort() is synchronous…

[13:57:28.0000] <Domenic_>
Hixie: http://esdiscuss.org/topic/es6-tasks-and-taskqueues#content-3

[13:58:08.0000] <Hixie>
microtasks only have one queue per event loop, btw

[13:59:02.0000] <Hixie>
as far as HTML goes, i have no desire to pretend it's distinct from ES... my goal was to hook in the ES spec into the HTML spec

[13:59:13.0000] <Hixie>
by making use of hooks provided by the ES spec

[14:00:25.0000] <Domenic_>
oh i thought there were several microtasks queues last i looked ... custom elements, then table sorting, then mutation observers, etc.

[14:00:51.0000] <Hixie>
they're all getting collapsed into one

[14:00:52.0000] <Domenic_>
i feel like that order is a bit strange given how underspecified ES is

[14:00:56.0000] <Domenic_>
ah cool

[14:01:11.0000] <Hixie>
i'm waiting for mutation observers to jump onte the train before doing table sorting

[14:01:41.0000] <Domenic_>
has anyone even announced intent to implement table sorting? :( :( :(

[14:02:08.0000] <Hixie>
no :-(

[14:02:13.0000] <Hixie>
tons of author demand, though

[14:04:42.0000] <Domenic_>
siiigh

[14:48:56.0000] <rafaelw>
Domenic_: ping.

[14:49:05.0000] <rafaelw>
(about es6 task vs microtask issue)

[14:58:08.0000] <SamB>
oh, I figured out why logo-xhr was so troublesome ;-)

[15:15:24.0000] <Domenic_>
rafaelw: pong

[15:19:37.0000] <rafaelw>
do you understand how modules work?

[15:19:56.0000] <rafaelw>
I just skimmed the spec, but I'm still pretty fuzzy on the actual mechanics.

[15:20:16.0000] <rafaelw>
I might have naively expected modules to need to enqueue Task work (as opposed to Microtask work)

[15:20:21.0000] <rafaelw>
but maybe they don't.

[15:20:23.0000] <rafaelw>
any idea?

[15:29:33.0000] <jsbell>
rafaelw: from my attempt to understand/model module loading and skimming the spec and pawing through https://github.com/jorendorff/js-loaders the behavior is described in terms of Promises, so it should only be microtasks, but I'm equally curious in an authoritative answer.

[15:29:54.0000] <Domenic_>
rafaelw: my understanding is they delegate everything to promises, yeah.

[15:30:23.0000] <Domenic_>
jorendorff was quite pleased when he realized he wouldn't have to do any of the event loop stuff himself :P

[15:30:34.0000] <rafaelw>
but presumably, Task work is taking place, right? IOW, when some bytes actually load off the network, something gets queue to handle the bytes being loaded and continue the loading pipeline?

[15:30:48.0000] <rafaelw>
gets queued

[15:31:00.0000] <jorendorff>
Domenic_: it was a miracle

[15:31:06.0000] <jorendorff>
Domenic_: and not because i'm lazy although i am

[15:31:30.0000] <jorendorff>
Domenic_: but because instead of specifying details of behavior, i could lean on the conventions baked into the Promise design

[15:38:09.0000] <Domenic_>
rafaelw: yes, if I am understanding correctly. When the bytes arrive you call EnqueueTask("PromiseTasks", ...stuff that causes the bytes to be used...)

[15:39:09.0000] <rafaelw>
Hmm. ok, so maybe the es6 can leave the outer event loop as an implicit concept.

[15:40:27.0000] <rafaelw>
And what is the "Script Evaluation Tasks" task queue used for?

[15:41:07.0000] <Domenic_>
I haven't seen that one...


2014-03-04
[16:52:08.0000] <MikeSmith>
Hixie: what can I do to convince you to add an element.createOutline() to the spec

[16:52:35.0000] <MikeSmith>
for generating just a static Outline object

[16:52:55.0000] <MikeSmith>
(I mean with not live nodes)

[16:55:08.0000] <othermaciej>
what is it for?

[17:26:41.0000] <MikeSmith>
hey othermaciej

[17:26:46.0000] <othermaciej>
hi MikeSmith

[17:27:37.0000] <MikeSmith>
element.createOutline would be for using the outline algorithm to generate and Outline that can could then be used to, say, add a TOC to a document

[17:28:32.0000] <MikeSmith>
the actuall adding-the-TOC part would be application-specific to the code of whatever Web application

[17:28:53.0000] <MikeSmith>
that is, Web authors would have to roll their own for that

[17:29:20.0000] <MikeSmith>
but at least they'd have a built-in native way to get the Outline to work with

[17:29:52.0000] <MikeSmith>
instead of N different Web authors needing to write their own implementations of the outline algorithm in their own JS

[18:01:30.0000] <Hixie>
MikeSmith: convince me a couple of UAs would implement it :-)

[18:02:44.0000] <MikeSmith>
othermaciej: please tell me and Hixie you would implement createOutline

[18:03:17.0000] <othermaciej>
why is dynamically creating a TOC at runtime useful?

[18:04:24.0000] <othermaciej>
I would tend to think doing a pass over the whole document when the page is loaded is not a great thing to do, perf-wise

[18:04:49.0000] <othermaciej>
better to have your document already include a TOC

[18:05:04.0000] <MikeSmith>
sure

[18:05:22.0000] <MikeSmith>
but I think the same could be said for a lot of things you can do on the client side

[18:05:27.0000] <othermaciej>
if you don't care for that, and somehow really need to dynamically create a TOC (maybe you are a word processing app), you can implement the Outline algorithm or similar algorithm of choice in JS

[18:05:33.0000] <Hixie>
othermaciej: well, the method could do it on demand

[18:05:39.0000] <MikeSmith>
right

[18:05:59.0000] <othermaciej>
perf is not a good argument to make it built in, because it's bad for perf anyway (compared to precomputing your TOC)

[18:06:15.0000] <othermaciej>
convenience might be an argument if there was huge demand for this specific functionality

[18:06:42.0000] <othermaciej>
there's nothing corresponding in popular native APIs so a priori I would assume it's not a necessary part of a good platform

[18:06:53.0000] <othermaciej>
but to be fair, the Web has more things that blur the lines between app and document

[18:07:25.0000] <Hixie>
the web is the only scriptable platform that has scripting in any serious sense, isn't it?

[18:07:31.0000] <Hixie>
s/scriptable/document/, sorry

[18:07:51.0000] <othermaciej>
I have not previously heard of demand for this particular functionality though so I can't say it would be a high priority

[18:09:47.0000] <MikeSmith>
yeah I guess I should try to find some JS libraries that are providing something similar already

[18:10:32.0000] <MikeSmith>
"TOC is a jQuery plugin that will automatically generate a table of contents for your page"

[18:10:36.0000] <MikeSmith>
http://projects.jga.me/toc/

[18:10:56.0000] <MikeSmith>
https://github.com/jgallen23/toc

[18:11:22.0000] <MikeSmith>
actually it seems like there are at least half a dozen jQuery TOC plugins

[18:12:11.0000] <MikeSmith>
so at least for anybody actually using those already, the perf issue's already there

[18:13:00.0000] <SamB>
/me wonders why entirely non-normative sections get the implementation status in those boxes, instead of just bug boxes ...

[18:13:03.0000] <MikeSmith>
wow even a Drupal jQuery TOC plugin

[18:13:50.0000] <MikeSmith>
SamB: because the annotation mechanism doesn't distinguish between normative and non-normative sections

[18:15:24.0000] <SamB>
I suppose that is the most likely explanation, yes

[18:16:28.0000] <SamB>
but that leaves me wondering how some sections have opted out, which leaves me looking for my login info ...

[18:17:03.0000] <MikeSmith>
opted out? no sections have annotations by default

[18:17:31.0000] <MikeSmith>
the only way for an annotation gets added it by somebody taking time to manually add one

[18:20:17.0000] <JosephSilber>
How come it's 2014 and we still can't use proper HTTP verbs in HTML?

[18:22:06.0000] <SamB>
JosephSilber: why should HTML be using HTTP verbs in the first place?

[18:22:37.0000] <JosephSilber>
SamB: Don't you want to use a form to update a record?

[18:23:02.0000] <SamB>
do you mean verbs like BREW or somesuch?

[18:23:16.0000] <JosephSilber>
PUT/PATCH/DELETE

[18:24:33.0000] <SamB>
those are rather exotic verbs, why would you expect javascript to be trusted with them?

[18:24:56.0000] <JosephSilber>
SamB: JavaScript already is. Was talking about HTML.

[18:31:28.0000] <Hixie>
HTTP verbs are so last century

[18:31:43.0000] <JosephSilber>
Can't tell whether you're serious.

[18:32:11.0000] <JosephSilber>
Hixie: sarcasm doen't come across well in writing.

[18:33:10.0000] <Hixie>
more seriously, HTTP should just have two verbs, GET and POST. Endpoints should be scripts. URIs for APIs, not resources.

[18:33:41.0000] <Hixie>
resources are too abstract to be given URLs in a practical world.

[18:34:49.0000] <JosephSilber>
Hixie: So I take it you aren't a fan of the RESTful mindset?

[18:35:40.0000] <Hixie>
you could say that.

[18:35:58.0000] <Hixie>
REST has caused thousands of web authors to waste time on a dead-end idea.

[18:36:26.0000] <JosephSilber>
Then what's the difference between GET and POST.

[18:36:30.0000] <JosephSilber>
caching?

[18:36:43.0000] <JosephSilber>
bigger payload?

[18:36:54.0000] <SamB>
Hixie: I kind of think HEAD is useful too

[18:38:03.0000] <zewt>
the APIs i design tend to be a single URL (let "URI" die already, everything's a URL), posted JSON, with the whole body of the command in the JSON

[18:38:12.0000] <Hixie>
JosephSilber: GET is idempotent and thus (more) cachable.

[18:38:20.0000] <SamB>
zewt: there ARE a few URNs in use

[18:38:41.0000] <Hixie>
SamB: HEAD, in practice, too often returns bogus data to be valid.

[18:38:42.0000] <SamB>
they work pretty well for namespace URIs

[18:38:44.0000] <JosephSilber>
Can we at least get POST on anchor tags?

[18:38:45.0000] <zewt>
puts the whole body of the request in a single vocabulary (a JSON dictionary), which is so much simpler than some of it being in a request body, some of it in the URL, some of it in the HTTP request type...

[18:39:22.0000] <zewt>
Hixie: i've had webkit in iOS cache POST :(

[18:39:29.0000] <zewt>
"surprise!"

[18:39:35.0000] <SamB>
/me would love an ISBN URL scheme

[18:39:54.0000] <Hixie>
JosephSilber: POST is an action, links are supposed to be safe to click.

[18:40:04.0000] <Hixie>
JosephSilber: another way of describing GET and POST is GET is a link, POST is a button.

[18:40:24.0000] <JosephSilber>
Hixie: theoretically, but in practice you can style it however you like.

[18:40:38.0000] <JosephSilber>
e.g. a delete button shouldn't need a hidden form behind it.

[18:40:47.0000] <Hixie>
well sure, you can also make a link look like a text field...

[18:40:56.0000] <Hixie>
buttons don't need <form>s anymore

[18:41:17.0000] <JosephSilber>
How would you delete a record without a form (and no js)

[18:41:18.0000] <JosephSilber>
?

[18:41:22.0000] <zewt>
Hixie: well, ever since it's been possible to attach scripts to clicking things that look like links, that's sort of gone out the window

[18:42:07.0000] <zewt>
(not that "looks like a link" itself means much these days; google search is apparently removing the link styling from result headers, which drives me nuts)

[18:43:21.0000] <SamB>
google has a lot of nerve making bad changes as well as good changes ;-P

[18:43:29.0000] <Hixie>
JosephSilber: <button formaction="delete?record=foo" formmethod"POST" ...>

[18:43:34.0000] <zewt>
JosephSilber: idempotence is part of it, but I think equally or maybe more important is that POST has a request body (which means you can't copy-link-location and everything surrounding with that) and GET doesn't

[18:43:53.0000] <Hixie>
if i remember the attribute names correctly

[18:44:43.0000] <JosephSilber>
Hixie: hmmmm... Bever seen that before. Where's it supported? Where's it documented?

[18:44:50.0000] <JosephSilber>
never*

[18:45:15.0000] <SamB>
Hixie: are you sure that's not cheating?

[18:45:47.0000] <zewt>
(the fact that "has a request body or not" and "is idempotent or not" are both major differences between GET and POST, despite the two being totally orthogonal, is one of those things that make me groan at HTTP)

[18:46:01.0000] <Hixie>
JosephSilber: http://whatwg.org/html/association-of-controls-and-forms.html#form-submission-0

[18:46:08.0000] <Hixie>
JosephSilber: haven't tested it recently to see if anyone implements it

[18:46:11.0000] <Hixie>
SamB: cheating?

[18:47:12.0000] <SamB>
well, I mean, not that I haven't seen forms before that split stuff between the query parameter and the POST body ...

[18:47:18.0000] <JosephSilber>
While we're at it, is there any way to prevent a bob-submit buttion from sumbitting a form, without js?

[18:47:26.0000] <zewt>
who's bob

[18:47:57.0000] <JosephSilber>
non-submit*

[18:47:58.0000] <JosephSilber>
heh

[18:48:05.0000] <zewt>
poor bob :(

[18:48:15.0000] <JosephSilber>
I really wish I could type :(

[18:48:36.0000] <zewt>
if you have a submit button doing something other than submitting the form, don't you need JS to do that other action anyway?

[18:48:40.0000] <Hixie>
JosephSilber: (correction to what i said earlier -- you do actually need a <form> element somewhere, either in the hierarchy, or pointed to from a form="" attribute on the <button>. But that form doesn't need any fields.)

[18:48:45.0000] <Hixie>
JosephSilber: does seem to work in chrome, at least

[18:49:06.0000] <zewt>
i wonder if the "hidden submit button" catastrophe has improved since i looked at it last

[18:49:07.0000] <Hixie>
JosephSilber: (and the form doesn't need action="" or method="")

[18:49:26.0000] <Hixie>
JosephSilber: non-submit buttons don't ever submit forms, do they?

[18:49:30.0000] <JosephSilber>
Which brings me back to my original question: why can't we just get method=POST on an anchor?

[18:49:32.0000] <zewt>
where implicit submit behavior depends on whether submit inputs are hidden and how many of them there are

[18:49:45.0000] <Hixie>
JosephSilber: because links are for GET, we went through this

[18:50:01.0000] <JosephSilber>
Hixie: correct me if I'm wrong, but iirc any <button> in a form submits it.

[18:50:14.0000] <Hixie>
pretty sure you're wrong :-)

[18:50:20.0000] <JosephSilber>
"links are for GET" is really a pre-css mentality.

[18:50:21.0000] <zewt>
JosephSilber: i don't think having POST on an anchor makes sense, because clicking an anchor (assuming no script) means you navigate to that URL, and a POST resource needs more data than just a URL (the request body)

[18:51:00.0000] <JosephSilber>
zewt: You can pass those in the query string. What I'm really after is delete though, which doesn't need a payload.

[18:51:16.0000] <zewt>
not following; pass the POST data in the query string?

[18:51:54.0000] <Hixie>
JosephSilber: Yes, it is a pre-CSS mentality... CSS is optional. We shouldn't be designing HTML to do things that only make sense with CSS

[18:52:19.0000] <Hixie>
zewt: the example i gave above didn't have a useful body, all the data was in the submit url

[18:52:24.0000] <zewt>
you can pass data for a POST in the query string (like any other request), but in my mind (at least) the thing that differentiates POST from GET is the request body

[18:53:39.0000] <Hixie>
if you want it in a request body you'd have to do: <form id="empty-form"></form>  <button type=submit formaction="delete" formmethod=POST name=record value=1987414>Delete</button>

[18:53:48.0000] <Hixie>
oops, missed an attribute

[18:53:58.0000] <Hixie>
<form id="empty-form"></form>  <button type=submit form="empty-form" formaction="delete" formmethod=POST name=record value=1987414>Delete</button>

[18:54:18.0000] <JosephSilber>
Hixie: http://jsfiddle.net/k3nvR/

[18:54:40.0000] <Hixie>
JosephSilber: that has type=submit

[18:54:52.0000] <Hixie>
JosephSilber: you want it to be type=button to not submit

[18:55:15.0000] <JosephSilber>
Oh. So it defaults to submit.

[18:55:20.0000] <Hixie>
(see http://whatwg.org/html#attr-button-type )

[18:55:50.0000] <JosephSilber>
that settles it.

[18:56:33.0000] <JosephSilber>
Why do we need an empty form around the button?

[18:56:59.0000] <Hixie>
doesn't have to be around, you can point to it using form="". but there has to be one, because form submission is actually done by the <form>, not the <button>.

[18:57:14.0000] <Hixie>
so if you don't have one, the type=submit button looks for a form to submit, and comes up empty, and just gives up.

[18:57:36.0000] <Hixie>
(or to put it another way... form submission involves firing a 'submit' event at a form. but if there's no form...)

[18:58:08.0000] <JosephSilber>
I get that it's designed that way. The question is why? Seems like an implementation detail leaking into the api.

[18:58:52.0000] <Hixie>
it is

[18:58:54.0000] <Hixie>
:-)

[18:59:00.0000] <JosephSilber>
I'd go for :(

[18:59:14.0000] <Hixie>
before, <form> was where the action="" and method="" attributes had to be

[18:59:47.0000] <Hixie>
much later, at which point we were quite heavily constrained, we tried to add the ability for buttons to control those

[19:00:12.0000] <Hixie>
and we did that by just making the <Form>'s algorithm check the submit <button> element's attributes

[19:01:03.0000] <JosephSilber>
I guess you settle for what you get.

[19:01:08.0000] <JosephSilber>
Thanks :)

[19:01:19.0000] <zewt>
common theme of the web

[19:01:35.0000] <Hixie>
yeah... see /topic :-/

[19:17:18.0000] <MikeSmith>
Hixie: just fyi http://patches.freeiz.com/alpine/release/index.html see the part about "Experimental extended support of recognition of UTF-8 in urls based on information from http://url.spec.whatwg.org"

[19:17:48.0000] <MikeSmith>
kind of cool to see that mention of the URL standard there, of all places

[20:19:22.0000] <Hixie>
nice

[21:29:19.0000] <GPHemsley>
Hixie: Shouldn't the events specified by DOM Events be listed in the Events index?

[21:32:48.0000] <GPHemsley>
(There should be a single place to go to to find possible values for X in 'onX')

[21:52:58.0000] <SamB>
/me suddenly groans at http://resources.whatwg.org/logo-xhr.svg ...

[23:13:30.0000] <ondras>
re

[23:13:31.0000] <ondras>
http://jsfiddle.net/MAeLA/

[23:13:36.0000] <ondras>
gives "true" in firefox

[23:13:39.0000] <ondras>
is that correct?

[23:13:53.0000] <ondras>
(gives "false" after being appended to the document)

[00:36:30.0000] <Ms2ger>
ondras, interesting

[00:36:58.0000] <Ms2ger>
Could you file a bug on Fx?

[00:47:36.0000] <ondras>
Ms2ger: I found that already reported (and voted for that bug)

[00:48:00.0000] <Ms2ger>
Number?

[00:48:51.0000] <ondras>
sec

[00:49:04.0000] <ondras>
https://bugzilla.mozilla.org/show_bug.cgi?id=951887

[01:04:16.0000] <Ms2ger>
Thanks

[03:04:23.0000] <mike5w3c1>
🍺

[03:04:46.0000] <mike5w3c1>
so tmux displays beer correctly

[03:04:53.0000] <mike5w3c1>
unlike screen

[03:04:59.0000] <mike5w3c1>
tmux wins

[03:08:00.0000] <ondras>
hm

[03:08:05.0000] <ondras>
no beer here in my tmux

[03:08:16.0000] <ondras>
due to the missing glyph, I suppose

[03:08:32.0000] <ondras>
'cause I see a rectangular box with "01f37a" in it

[03:09:53.0000] <mike5w3c1>
ondras: oh OK

[03:10:25.0000] <mike5w3c1>
will I see the glyph as expected in tmux but not in screen

[03:10:38.0000] <mike5w3c1>
screen has other unicode shortcomings

[03:10:51.0000] <mike5w3c1>
so that alone is a good enough reason to switch I guess

[03:10:55.0000] <mike5w3c1>
for me at least

[03:10:57.0000] <ondras>
/me +1

[03:19:36.0000] <jgraham>
Anyone want to do a super-quick review? https://critic.hoppipolla.co.uk/r/926

[03:19:58.0000] <MikeSmith>
jgraham: I will try

[03:22:58.0000] <MikeSmith>
jgraham: r+ from me at least

[03:23:18.0000] <MikeSmith>
if that's good enough for you I can do the thing in critic to resolve it

[03:33:44.0000] <arminrosu>
hello all

[03:34:04.0000] <jgraham>
MikeSmith: Good enough for me

[03:34:06.0000] <arminrosu>
is this the right "forum" to talk about an idea regarding html

[03:34:07.0000] <arminrosu>
?

[03:34:22.0000] <jgraham>
arminrosu: Yes

[03:34:34.0000] <arminrosu>
jgraham: thanks

[03:35:11.0000] <arminrosu>
here's a frequent issue of mine (with a proposed solution afterwards):

[03:35:27.0000] <arminrosu>
vector backgrounds and sprites

[03:35:57.0000] <arminrosu>
specifically, having a vector icon, which needs to change color

[03:36:13.0000] <arminrosu>
currently i use fonticons for that, but it only works for monochrome icons

[03:36:22.0000] <gsnedders>
How does SVG not fulfil this?

[03:36:34.0000] <arminrosu>
it does, i want an extension

[03:36:48.0000] <arminrosu>
it's a 3-step issue

[03:37:10.0000] <arminrosu>
i might be wrong (i hope)

[03:37:40.0000] <arminrosu>
so, fonticons are cool, don't work if you want it as a background style

[03:38:02.0000] <arminrosu>
setting a svg as background, removes my ability to change the color (fill, stroke properties)

[03:38:36.0000] <arminrosu>
this is an issue for me, since i need to create an element for the sole purpose of style

[03:38:44.0000] <arminrosu>
(shocker, right?!)

[03:39:03.0000] <arminrosu>
so here's my idea: assets

[03:39:16.0000] <arminrosu>
i would define a list of assets in e.g. the head

[03:39:40.0000] <arminrosu>
these could be links or inline svg or data-uri

[03:40:12.0000] <arminrosu>
and I would just reference them like <img src="@asset(logo)" />

[03:40:38.0000] <arminrosu>
let's say logo is an inline svg

[03:41:10.0000] <arminrosu>
i would be able to do this in css: #logo {fill: red}, #logo:hover {fill: blue}

[03:41:21.0000] <arminrosu>
^ #logo would be an asset ID

[03:41:39.0000] <gsnedders>
(Before you continue, I'll make mention that it's more important to communicate your problem clearly than your idea of a solution; an understanding of the problem is needed to evaluate possible solutions, yours included)

[03:41:53.0000] <arminrosu>
i'm done with my point :)

[03:42:10.0000] <arminrosu>
my problem was with not being able to style svg once they are set as a background

[03:42:22.0000] <gsnedders>
So the problem, if I understand it correctly, is that backgrounds are static?

[03:42:28.0000] <arminrosu>
yup

[03:42:56.0000] <arminrosu>
my thinking is, background-size is a property which arrived from this need

[03:43:11.0000] <arminrosu>
similarly, think of using sprites as backgrounds

[03:43:43.0000] <gsnedders>
Are we interested in pseudo-selectors like :hover, or general self initiated animations (imagine a spinning cube, say)?

[03:44:11.0000] <arminrosu>
my issue is strictly with pseudo-selectors

[03:45:01.0000] <arminrosu>
regarding manipulating background-image properties

[03:46:27.0000] <arminrosu>
and sprites, sometimes I would like to be able to say, take x,y,w,h from a sprite (which is solved by image fragments)

[04:00:06.0000] <arminrosu>
here is an article by nicholas galagher detailing further needs to manipulate background images, solved using pseudo elements

[04:00:07.0000] <arminrosu>
http://nicolasgallagher.com/css-background-image-hacks/

[04:21:37.0000] <arminrosu>
gsnedders: what do you think?

[04:52:49.0000] <gsnedders>
arminrosu: I'm otherwise occupied at the moment; note there's been plenty of discussions about interactivity of backgrounds before.

[09:15:31.0000] <MikeSmith>
foolip: thanks very much for the review

[09:15:38.0000] <MikeSmith>
and for solving the endOfStream() mystery

[11:30:36.0000] <Hixie>
GPHemsley: maybe?

[12:18:50.0000] <Hixie>
i really would love input from some other people on the autofill fields thread

[12:19:03.0000] <Hixie>
which of the proposals makes most sense to you?

[12:19:09.0000] <Hixie>
are there any others we're missing?

[14:21:58.0000] <KevinMarks_>
1 in 9 americans thinks HTML is a sexually transmitted disease: http://www.latimes.com/business/technology/la-fi-tn-1-10-americans-html-std-study-finds-20140304,0,1188415.story

[14:24:18.0000] <jensnockert_>
I'm not convinced that it isn't a sexually transmitted disease.

[14:36:57.0000] <nessy>
intercourse between WHATWG and W3C ???

[14:38:45.0000] <TabAtkins>
jensnockert_: That assumes people who use HTML have sex. ^_^

[14:39:44.0000] <jensnockert_>
How would it otherwise spread?

[14:39:55.0000] <jensnockert_>
Dirty needles?

[14:40:10.0000] <TabAtkins>
Seems reasonable, yeah.

[14:40:16.0000] <jensnockert_>
Hm… that would make sense, cutting yourself on JS is too easy these days.

[15:05:59.0000] <Hixie>
KevinMarks_: given the other examples on that page, that's actually a really low percentage

[15:36:15.0000] <SamB>
/me would have thought JPEG more likely as a sexually transmitted disease ...

[15:37:22.0000] <jensnockert_>
ECMAscript sounds like a skin disease.


2014-03-05
[18:29:04.0000] <MikeSmith>
/me is suprised nobody mentioned "divitis" during this meeting of the minds, nor "tag abuse"

[18:29:38.0000] <MikeSmith>
Hixie: you use tmux? or just screen?

[18:29:59.0000] <MikeSmith>
I started using tmux and it seems real nice

[18:31:53.0000] <MikeSmith>
can display 🍺  and all other higher unicode while screen can't

[18:32:18.0000] <MikeSmith>
(as long as the glyphs are around of course)

[18:32:30.0000] <Hixie>
screen

[18:32:45.0000] <zewt>
my irc client can't display that, so i'll just assume it's PILE OF POO

[18:32:55.0000] <Hixie>
i've only recently gotten to a world that's beyond ASCII, so...

[18:33:26.0000] <zewt>
(well, it does display it as a single missing character, so it's probably just a font thing)

[18:34:36.0000] <MikeSmith>
zewt: it's U+1F37A BEER MUG

[18:37:25.0000] <MikeSmith>
Hixie: tmux is definitely worth a try. The only problem I ran into with it so far is not really a problem at all but it's that it uses C-b as its prefix key instead of C-a screen thing but my fingers are so trained to the screen C-a that when I want to go back to the beginning of a line I still keep hitting "C-a a" instead of just C-a (and so I get an extra "a" at the beginning of the line that I think have to backspace over)

[18:37:48.0000] <Hixie>
i configure screen to use C-p. I use C-a to go to the start of the line.

[18:38:14.0000] <zewt>
MikeSmith: if you can't even reconfigure that, that would DQ it for me :P

[18:38:51.0000] <MikeSmith>
Hixie: yeah I probably should have done it that way from the beginning so that my fingers didn't end up having C-a burned into memory

[18:39:01.0000] <zewt>
mostly screen is "good enough" that i haven't really bothered trying other things

[18:39:11.0000] <MikeSmith>
zewt: nah you can reconfigure it in tmux too

[18:39:12.0000] <Hixie>
is tmux the one that uses UDP?

[18:39:33.0000] <MikeSmith>
Hixie: dunno if it does or not

[18:40:01.0000] <Hixie>
there's some alternative to screen that uses UDP and predictive magic and local echo to make it seem to have radically lower latency

[18:40:10.0000] <zewt>
ew

[18:40:18.0000] <MikeSmith>
zewt: yeah screen is great. Honestly the only reason I switched was because of the unicode thing

[18:40:25.0000] <Hixie>
so i figure i'm good with screen until i can switch to that

[18:40:46.0000] <zewt>
i'd expect that if there was enough latency to need it, any mispredictions would be worse than the gain

[18:40:48.0000] <MikeSmith>
Hixie: maybe you're thinking of mosh? (alternative to ssh)

[18:41:12.0000] <MikeSmith>
at least that sounds like what mosh does

[18:41:12.0000] <Hixie>
ah yeah, maybe that's it

[18:41:15.0000] <MikeSmith>
yeah

[18:41:34.0000] <MikeSmith>
well I started using mosh recently and it's really great actually

[18:42:19.0000] <MikeSmith>
the other thing about mosh is is that even if your wifi connection drops in and out or your IP address changes, the mosh session just persists

[18:42:42.0000] <MikeSmith>
crappy hotel wifi or whatever

[18:42:43.0000] <zewt>
that's nice i guess, though i wish the ip changing thing could be fixed infrastructurally

[18:42:54.0000] <MikeSmith>
zewt: yeah

[18:42:59.0000] <zewt>
it's excessively lame that all of my connections drop when I unplug my laptop from ethernet

[18:43:34.0000] <zewt>
(and then there's a period of laptop going "huh what wait up I'm confused")

[18:44:14.0000] <zewt>
most of my terminals are in windows with putty, and I just have them all have a startup command of "screen -rd", so I just connect and it goes

[18:44:34.0000] <zewt>
though I need to figure out how to say "connect if there's already a screen running, otherwise start a new one"

[18:44:43.0000] <MikeSmith>
yeah if you have mosh sessions and you unplug that won't happen. At some point mosh will say, "No response for server for NN seconds." where the NN keeps increasing until it gets some network connection behind the session again

[18:45:02.0000] <zewt>
exponential fallback -1

[18:45:13.0000] <Hixie>
i have ssh set up to autostart in terminal, and my .bash_profile autostarts screen, so reconnecting for me is just a matter of restarting terminal

[18:45:16.0000] <zewt>
(yeah you didn't say exponential I know heh)

[18:45:19.0000] <Hixie>
but i really should move to mosh at some point

[18:46:14.0000] <zewt>
(but generally increasing fallback makes sense if you're talking to a big central server, not so much for terminals where you're usually talking to a small personal server with no thundering herd problem to worry about)

[18:46:30.0000] <MikeSmith>
the only downside I've run into with mosh is (surprise) a unicode issue -- but it's not due to a problem in mosh, it's due to a problem with OS X using some old libc instead of glibc

[18:46:45.0000] <zewt>
heh one of the big things osx needs: gnu tools

[18:47:01.0000] <zewt>
drives me crazy when I type "ls /foo", then hit up and add "ls /foo -l"

[18:47:07.0000] <MikeSmith>
yeah

[18:47:09.0000] <zewt>
and osx looks at me funny, instead of just working

[18:48:17.0000] <MikeSmith>
I just used the g* versions of everything on osx, installed from port (e.g., greadlink, gdate)

[18:49:15.0000] <MikeSmith>
anyway, the osx unicode issue causes mosh client on osx to not display U+1F37A, etc., as expected

[18:49:43.0000] <zewt>
guess I've never hit anything to make me care about non-BMP unicode

[18:49:49.0000] <MikeSmith>
https://github.com/keithw/mosh/issues/478 and https://github.com/Homebrew/homebrew/issues/26370 have the details

[18:49:52.0000] <zewt>
other than in principle (utf-16 needs to die)

[18:50:06.0000] <MikeSmith>
yeah for me it's more the principle I guess

[18:51:37.0000] <zewt>
utf-16 is fantastic because: it combines the downsides of UCS-4 (non-byte encoding so it's completely incompatible with multibyte encodings), *and* the downsides of UTF-8 (compared to UTF-32, eg. no random access by index)

[18:51:44.0000] <zewt>
worst of both worlds. thanks for that

[18:52:07.0000] <zewt>
(not that the latter is a big downside ... it's just the *only* benefit of raw UCS-4, really)

[20:49:10.0000] <MikeSmith>
heads-up: some time later today I'm going to break all URLs under http://dev.w3.org/csswg/ again

[20:50:05.0000] <MikeSmith>
we are flipping the DNS over on the host those are getting rewritten to, and I'll need to change a rewrite directive to point to a different port on that host

[20:50:22.0000] <MikeSmith>
but I can't do that until after the DNS if flipped

[20:59:34.0000] <SamB>
/me thinks it's remarkable how many of the WHATWG logos are bad visual puns ...

[21:27:20.0000] <Domenic_>
<3 the WHATWG logos

[21:27:35.0000] <Domenic_>
My favorite is encoding

[21:27:56.0000] <Hixie>
i must admit to not understanding the xhr one

[21:28:58.0000] <Domenic_>
yeah... apparently from http://en.wikipedia.org/wiki/AFC_Ajax

[21:30:00.0000] <Hixie>
aah

[21:30:23.0000] <zewt>
i can't say that i've ever consciously noticed that a whatwg logo of any sort exists

[21:30:37.0000] <Hixie>
it's, like, plastered all over the site

[21:30:57.0000] <zewt>
i probably just tune logos out without noticing it

[22:24:55.0000] <SamB>
Domenic_: yes, encoding is great but I had a nice delayed groan with the XHR one when I finally figured out who the guy in the picture had to be :-)

[22:27:34.0000] <SamB>
had no idea there was a football team involved though

[22:30:15.0000] <SamB>
so, is "our" usage of this Ajax based on the "right to parody", or?

[22:33:01.0000] <TabAtkins>
MikeSmith: The URL breakage is temporary, right?

[22:33:10.0000] <MikeSmith>
TabAtkins: yeah

[22:33:16.0000] <TabAtkins>
All right, no problem then. ^_^

[22:33:43.0000] <MikeSmith>
actually right now I'm trying to set it up so there will not even be any temporary breakage

[22:34:26.0000] <SamB>
huh, why am I surprised that google is so confident as to the identity of this greek dude in logo-xhr.png that it fills in the words "ajax amsterdam logo" in the search box when I search by that image?

[22:51:10.0000] <MikeSmith>
TabAtkins: OK I think I've got the ports and apache config set up the right way now and we'll be flipping the DNS soon

[22:51:21.0000] <MikeSmith>
but it'll take a few hours to propogate

[22:51:31.0000] <MikeSmith>
so I reckon you'll be asleep by then

[22:51:43.0000] <TabAtkins>
yeah

[22:51:50.0000] <MikeSmith>
but when you get online tomorrow if you find any problems lemme know

[22:52:16.0000] <SamB>
/me isn't sure why we the logo for the URL standard is based on a colon ...

[23:02:14.0000] <SamB>
oh, right ...

[23:02:38.0000] <SamB>
/me remembers that a lot of URL schemes don't do anything special with /

[02:05:02.0000] <mathiasbynens>
hsivonen: your feedback on https://codereview.chromium.org/183893021 (see comments) would be appreciated

[02:35:39.0000] <jgraham>
Philip`_: For informational purposes, is your old OCaml implementation of the HTML tokenizer/parser around?

[04:29:57.0000] <MikeSmith>
jgraham: about the wptserve code change we need for w3c-test.org (option to not restrict access to localhost), you want me to write a PR or have you been working on it already?

[04:32:09.0000] <jgraham>
MikeSmith: I haven't worked on it yet

[04:32:32.0000] <jgraham>
MikeSmith: So feel free

[04:33:55.0000] <MikeSmith>
ok I will

[04:37:49.0000] <MikeSmith>
jgraham: btw how we get the github remote w-p-t repo "resources" submodule updated to the latest upstream testharness.js?

[04:37:49.0000] <jgraham>
Thanks

[04:38:17.0000] <MikeSmith>
to include, e.g., the change from foolip_ that removed the media/ subdir

[04:38:41.0000] <jgraham>
MikeSmith: cd resources; git pull; cd ..; git add resources; git commit -m "Update to latest testharness.js"; git push

[04:38:46.0000] <jgraham>
Or something

[04:39:00.0000] <MikeSmith>
ok

[04:39:27.0000] <MikeSmith>
so I'll go ahead and push that, thanks

[04:43:19.0000] <odinho>
It's probably detached HEAD, so you ofc need to make sure you are standing on the correct commit (e.g. by checkout out origin/master)

[04:43:59.0000] <jgraham>
Oh, that could be the case yeah

[04:45:45.0000] <MikeSmith>
indeed yeah

[04:45:52.0000] <MikeSmith>
had to checkout master first

[04:45:58.0000] <MikeSmith>
anyway, done now

[04:47:29.0000] <odinho>
(working daily with submodules at Opera, watching new people screw up the the same things many times, has some benefits :) )

[04:49:15.0000] <jgraham>
/me takes responsibility for suggesting using git pull rather than git fetch

[04:49:26.0000] <odinho>
:]

[04:49:47.0000] <odinho>
(if suggesting git pull, I always write as    git pull --ff-only)

[04:49:49.0000] <Ms2ger>
Boo, submodules

[04:49:53.0000] <MikeSmith>
I just use "git pull -r" any time I see "git pull"

[04:50:05.0000] <MikeSmith>
except for critic review branches

[04:50:37.0000] <Ms2ger>
I just use a pull.sh I wrote a long time ago

[04:50:40.0000] <MikeSmith>
yeah crazy assed submodule voodoo

[04:52:09.0000] <MikeSmith>
anyway I don't like merge

[04:53:19.0000] <MikeSmith>
if a rebase messes up I just get an error message and then after that I run rebase --abort

[04:54:36.0000] <MikeSmith>
I don't know of any merge --abort and even if there was one I won't use it because why would you since you can always just use rebase

[04:55:37.0000] <MikeSmith>
hmm odinho is there some config setting that will cause "--ff-only" to always be used with merge?

[04:56:33.0000] <MikeSmith>
nm

[04:56:39.0000] <MikeSmith>
/me finds ff = no

[04:56:41.0000] <odinho>
:)

[04:57:48.0000] <davve`>
But you want 'git config merge.ff only', right?

[04:58:48.0000] <MikeSmith>
davve`: yeah

[04:58:52.0000] <MikeSmith>
--global

[04:59:13.0000] <MikeSmith>
fking git

[04:59:27.0000] <MikeSmith>
they need to make this stuff way more complicated

[04:59:40.0000] <MikeSmith>
it's all just too clear and easy right now

[05:01:28.0000] <jgraham>
MikeSmith: It might be worse. It might be mercurial.

[05:01:30.0000] <jgraham>
:)

[05:02:36.0000] <Ms2ger>
/me whacks jgraham 

[05:04:06.0000] <jgraham>
Yes, trying to use bookmarks makes me want to resort to violence too

[05:04:14.0000] <MikeSmith>
jgraham: Ms2ger is whacking you so that you'll sustain a head injury so that your IQ will decrease and you'll then become a mercurial advocate

[05:05:01.0000] <Ms2ger>
MikeSmith, I'd better not try to decrease yours any further ;)

[05:05:32.0000] <MikeSmith>
hehah

[05:05:42.0000] <MikeSmith>
that's probably not possible

[05:06:02.0000] <Ms2ger>
Well, you never know

[05:06:07.0000] <Ms2ger>
Might hit an underflow :)

[05:06:21.0000] <MikeSmith>
hah

[05:13:26.0000] <hsivonen>
mathiasbynens: I sent some feedback.

[06:46:57.0000] <mathiasbynens>
hsivonen: much appreciated

[07:07:12.0000] <MikeSmith>
hsivonen: OK with you if I go ahead and change vnu build.py to pull from github instead of bitbucket? (after syncing up the github repos to the latest bitbucket sources)

[07:07:50.0000] <hsivonen>
MikeSmith: OK.

[07:08:15.0000] <MikeSmith>
hsivonen: thanks

[07:09:48.0000] <MikeSmith>
how about jing-trang? I have a mirror of that at github too already. OK to use that? (so we can eliminate the svn dependency) Or would you rather we keep pulling from the upstream svn repo for that?

[07:13:43.0000] <MikeSmith>
hsivonen: ↑

[07:16:13.0000] <hsivonen>
MikeSmith: let's pull from github

[07:16:23.0000] <hsivonen>
MikeSmith: what happens with the htmlparser repo?

[07:18:08.0000] <MikeSmith>
hsivonen: I have a github mirror of that too

[07:18:41.0000] <MikeSmith>
and I'll just manually update that by pulling from the mozilla hg repo

[07:18:50.0000] <MikeSmith>
and pushing to the github repo

[07:19:00.0000] <MikeSmith>
whenever there are changes

[07:19:05.0000] <MikeSmith>
if that's OK for you

[07:19:42.0000] <MikeSmith>
alternatively we can keep pulling from the upstream hg repo directly fo that

[08:32:03.0000] <Ms2ger>
Postel tarpit (n.) - A system that has tried so hard to accept all possible input that any change becomes backwards-incompatible

[08:32:08.0000] <Ms2ger>
Aka "the Web"

[09:58:07.0000] <SimonSapin>
MikeSmith: http://dev.w3.org/csswg seems stuck in January

[09:59:02.0000] <jgraham>
The CSS WG are now officially stuck in the past?

[10:00:14.0000] <SimonSapin>
well, https://dvcs.w3.org/hg/csswg/ is fine

[10:00:22.0000] <ltilve>
hi

[10:00:55.0000] <ltilve>
I have been doing a patch related with <select> elements not dispatching input events

[10:00:58.0000] <ltilve>
http://code.google.com/p/chromium/issues/detail?id=349472

[10:01:46.0000] <Ms2ger>
SimonSapin, I saw something come by about that breaking due to dns changes

[10:02:15.0000] <ltilve>
I guess that the comments here https://www.w3.org/Bugs/Public/show_bug.cgi?id=22467 are still valid, aren't they?

[10:03:38.0000] <ltilve>
(I ended at the link to http://www.whatwg.org/specs/web-forms/current-work/#the-change from the equivalent WK bug https://bugs.webkit.org/show_bug.cgi?id=117526)

[10:06:11.0000] <MikeSmith>
SimonSapin: it's probably related to the fact I moved the rewrite for http://dev.w3.org/csswg to a different host today

[10:06:26.0000] <Ms2ger>
ltilve, whoa whoa whoa

[10:06:59.0000] <Ms2ger>
ltilve, please scroll to the top of http://www.whatwg.org/specs/web-forms/current-work/#the-change

[10:07:16.0000] <SimonSapin>
MikeSmith: is the mercurial push hook still syncing to the old host?

[10:07:37.0000] <MikeSmith>
SimonSapin: is contents of http://dev.w3.org/csswg same as http://128.30.54.131/csswg/ ?

[10:07:45.0000] <MikeSmith>
SimonSapin: maybe

[10:07:50.0000] <MikeSmith>
dunno

[10:07:52.0000] <MikeSmith>
I'll look

[10:08:07.0000] <Ms2ger>
ltilve, and if you want a serious answer to a bug, you should file it in the whatwg component, not the html wg one

[10:08:21.0000] <MikeSmith>
SimonSapin: but frankly I really rather not have to keep dealing with this rewrite

[10:09:37.0000] <Ms2ger>
Hixie, can you make the banner on http://www.whatwg.org/specs/web-forms/current-work/#the-change position:fixed?

[10:11:32.0000] <SimonSapin>
MikeSmith: they’re not the same for me, http://128.30.54.131/csswg/ is fine

[10:11:52.0000] <MikeSmith>
SimonSapin: yeah it seems I have to re-setup some useless crap on the new host just for the csswg case

[10:12:01.0000] <MikeSmith>
this is nuts really

[10:12:37.0000] <SimonSapin>
Is 128.30.54.131 the old host?

[10:12:46.0000] <MikeSmith>
yeah

[10:13:10.0000] <SimonSapin>
how do other things work?

[10:13:28.0000] <MikeSmith>
I want Peter to figure out some alternative that doesn't involve me

[10:13:36.0000] <MikeSmith>
other things work by not using mercurial

[10:13:55.0000] <MikeSmith>
and by not rewriting URLs from dev.w3.org to w3c-test.org

[10:14:15.0000] <ltilve>
thanks Ms2ger, I hadn't scrolled top :p

[10:14:43.0000] <Ms2ger>
ltilve, it's clearly not huge enough :)

[10:14:58.0000] <ltilve>
"anchors happen"

[10:15:14.0000] <paxcoder>
hola

[10:15:18.0000] <ltilve>
it was big indeed :)

[10:16:05.0000] <MikeSmith>
SimonSapin: I'll e-mail Peter. I have zero enthusiasm for spending any more time dealing with this than the hours I've wasted on it already in the past at his request

[10:16:33.0000] <MikeSmith>
you guys really need to find something sane

[10:17:15.0000] <MikeSmith>
instead of this convoluted way

[10:17:36.0000] <MikeSmith>
it's all totally unnecessary, this stuff that Peter has set up

[10:18:06.0000] <MikeSmith>
or rather that Peter talked me through setting up for him

[10:18:50.0000] <MikeSmith>
"Make sure to cut the *green* wire, not the red one"

[10:19:12.0000] <jgraham>
Ms2ger: Obviously the whole page should be display:none except that warning until you click a button marked "I am only reading this out of historical interest and will not use the document for any purpose related to implementing web browsers or authoring web content"

[10:19:43.0000] <MikeSmith>
SimonSapin: sorry I broke it but http://128.30.54.131/csswg/ should have the latest until I can figure out something else

[10:19:58.0000] <Ms2ger>
jgraham, can I leave the warning out?

[10:21:07.0000] <SimonSapin>
thanks MikeSmith. Apparently Peter’s plan is to have dev.csswg.org/csswg proxy to drafts.csswg.org. Does that sound more sane?

[10:21:47.0000] <MikeSmith>
SimonSapin: yes

[10:21:49.0000] <MikeSmith>
please

[10:22:12.0000] <MikeSmith>
he can make that change himself at http://dev.w3.org/cvsweb/csswg/.htaccess?rev=1.21

[10:22:21.0000] <MikeSmith>
as far as I know

[10:31:59.0000] <MikeSmith>
SimonSapin: OK I just e-mailed Peter about it directly as well

[10:32:07.0000] <MikeSmith>
SimonSapin: again, sorry

[10:32:14.0000] <SimonSapin>
no problem, thanks

[10:32:46.0000] <MikeSmith>
SimonSapin: thanks for the heads-up about it and sorry for ranting

[10:33:46.0000] <SimonSapin>
to be fair the little I know about the old setup does sound, hum, hairy

[11:14:40.0000] <Hixie>
Ms2ger: done

[11:14:59.0000] <Hixie>
does any browser support 'filter: grayscale()' yet? i want to desaturate the images at the same time

[11:15:16.0000] <Hixie>
but i can't work out how to do it short of lots of prefixed properties and some svg

[11:15:19.0000] <Hixie>
which seems a bit excessive

[11:15:39.0000] <Ms2ger>
Thanks

[11:16:34.0000] <jgraham>
Hixie: The text doesn't seem to be gray anymore

[11:16:59.0000] <Hixie>
oops

[11:17:00.0000] <Hixie>
try again

[11:17:19.0000] <Hixie>
(what browser?)

[11:17:32.0000] <krit_>
MikeSmith: the link to CSS Compositing is broken http://dev.w3.org/fxtf/compositing-1/

[11:17:45.0000] <krit_>
MikeSmith: gives me {"error": {"message": "", "code": 404}}

[11:17:45.0000] <jgraham>
Hixie: Firefox

[11:17:53.0000] <jgraham>
Hixie: Now the warning is gray :)

[11:18:30.0000] <Hixie>
already fixed that

[11:18:31.0000] <Ms2ger>
krit_, you should join #css on w3 :)

[11:18:44.0000] <Hixie>
i was a bit overzealous with my filters

[11:19:00.0000] <Hixie>
(the text not being gray was because firefox supports scoped="", nice!)

[11:19:08.0000] <krit_>
Ms2ger: just searched a channel with MikeSmith. This was the first I found :P

[11:19:22.0000] <jgraham>
Hixie: Works now

[11:19:35.0000] <Ms2ger>
http://dev.w3.org/csswg/css2/ is rumoured to work

[11:19:43.0000] <SamB>
/me thought filters WERE an SVG thing

[11:20:09.0000] <Ms2ger>
Only took 15 years

[11:20:13.0000] <krit_>
Ms2ger: that is a different repository, but the FX rep works in general as well

[11:20:17.0000] <SamB>
/me wonders how crazy allowing SVG filters on everything would be ...

[11:20:33.0000] <krit_>
SamB: we are just that crazy and do that!

[11:20:48.0000] <SamB>
(without actually having to use that foreignOjbect thing)

[11:20:53.0000] <krit_>
SamB: you can try kind of in WebKit/Blink and soon in Firefox

[11:21:23.0000] <krit_>
SamB: sorry, it works in Firefox, the filter functions will work in FF soon

[11:21:24.0000] <SamB>
it certainly seems a lot less crazy than NIHing a filter language of similar expressiveness in CSS, yes

[11:24:56.0000] <SamB>
hmm, I probably asked about this before, but where is the "shadow DOM" idea from XBL being worked on? MDN is still linking to a long-abandoned "XBL 2" effort ...

[11:29:13.0000] <Hixie>
ok i've gone and added the same position:fixed warning and gray styling to all the snapshots of wf2 and wa1/html5 that we have

[11:29:48.0000] <TabAtkins>
Ooooh, grayscaling obsolete stuff sounds awesome.

[11:29:58.0000] <TabAtkins>
/me goes to update Bikeshed's obsoleting styles.

[11:29:59.0000] <MikeSmith>
krit_: talk to fantasai or Peter or Bert

[11:30:14.0000] <SamB>
/me wonders how hard Sepia would be

[11:30:32.0000] <Domenic_>
Hixie: sample link, out of curiosity?

[11:30:36.0000] <krit_>
SamB: filter: sepia(0.5)

[11:30:44.0000] <MikeSmith>
krit_: fantasi updated the dev.w3.org/csswg rewrite to point to http://drafts.csswg.org

[11:30:50.0000] <MikeSmith>
http://dev.w3.org/cvsweb/csswg/.htaccess?rev=1.23

[11:30:54.0000] <SamB>
krit_: okay now that is just cheating

[11:31:18.0000] <Hixie>
Domenic_: http://www.whatwg.org/specs/web-apps/2009-10-27/multipage/content-models.html#interactive-content-0 or http://www.whatwg.org/specs/web-forms/2005-09-01/

[11:31:39.0000] <MikeSmith>
krit_: so if

[11:31:47.0000] <Domenic_>
Hixie: nice

[11:31:52.0000] <krit_>
MikeSmith: hm, the FX repository is not maintained by you anymore?

[11:31:55.0000] <SamB>
/me was expecting the need for, like, color('sepia')*monochrome or so ...

[11:32:19.0000] <Hixie>
this is some svg filter i found on stackoverflow, mostly

[11:32:23.0000] <Hixie>
seems css filters are still not quite there

[11:32:50.0000] <MikeSmith>
krit_: ah FX. fantasai needs to update the rewrite for that one too I guess

[11:33:38.0000] <krit_>
Hixie: well, if you use filters, you should use -webkit-filter: grayscale() for webkit/blink and filter: url(#svgFilter) for Firefox... no way to filter HTML elements in IE

[11:33:50.0000] <MikeSmith>
krit_: and no I have nothing to do with the FX repo or any of this tuff any more. I have exited the business

[11:33:51.0000] <krit_>
Hixie: for performance reason mainly

[11:34:05.0000] <Hixie>
krit_: right, like i said, css filters aren't really there yet :-)

[11:34:17.0000] <Hixie>
krit_: i mean, what i _want_ is "filter: grayscale and sepia" or something

[11:34:26.0000] <krit_>
Hixie: got you

[11:35:48.0000] <SimonSapin>
".obsolete { border: double thick red ! important;" that should be in ALL CAPS, to give it more weight

[11:36:31.0000] <Hixie>
heh

[11:37:02.0000] <Hixie>
wtf, the 'filter' property affects the z-index?

[11:37:04.0000] <Hixie>
what kind of crap is this

[11:37:29.0000] <Domenic_>
everything affects z-index

[11:37:37.0000] <Domenic_>
z-index is a landmine waiting to destroy you and eat your soul

[11:37:55.0000] <Hixie>
/me adds some z-index values to the position:fixed element

[11:37:57.0000] <Domenic_>
(by "everything" i mean "random features")

[11:39:38.0000] <SamB>
okay I am confused by this bullet in the FAQ: "* Bug fixing: when bugs are found in the spec or implementations, they have to be maintained"

[11:40:05.0000] <SamB>
if this is actually talking about maintaining the bugs themselves, then I think that needs more explanation of the reason for it

[11:40:28.0000] <SamB>
otherwise, I could probably reword it for you ...

[11:40:53.0000] <Ms2ger>
they = the spec or implementations

[11:41:03.0000] <Hixie>
source?

[11:41:30.0000] <SamB>
oh, I guess they = features

[11:42:10.0000] <SamB>
/me grumbles about the missing "copy link to this anchor" command in browsers ...

[11:42:31.0000] <Hixie>
oh, from the faq

[11:42:32.0000] <SamB>
Hixie: http://wiki.whatwg.org/wiki/FAQ#Where.27s_the_harm_in_adding.E2.80.94

[11:43:35.0000] <Hixie>
updated

[11:46:18.0000] <Philip`_>
jgraham: It is

[11:47:32.0000] <Ms2ger>
Philip`_, where?

[11:47:53.0000] <Philip`_>
Ms2ger: That's a harder question :-(

[11:48:30.0000] <Philip`_>
jgraham: I think http://canvex.lazyilluminati.com/svn/tokeniser/ may be the latest version

[11:49:07.0000] <Philip`_>
("latest" being over 5 years ago)

[11:51:20.0000] <SamB>
hmm, it never occurred to me to wonder how the w3c got w3.org before ...

[11:52:16.0000] <SamB>
but I just typed "www.3.org" and now I do

[11:53:12.0000] <Hixie>
as opposed to what?

[11:56:44.0000] <SamB>
I guess they got in before there were rules and/or squatters

[12:03:08.0000] <Domenic_>
I am making an argument to corporate peoples that ASCII is not enough for names. Any reasonably-famous people I can cite with non-ASCII characters in their names? /cc mathiasbynens

[12:03:52.0000] <Ms2ger>
Er...

[12:03:57.0000] <Ms2ger>
All of China?

[12:04:25.0000] <Domenic_>
that helps i suppose.

[12:06:20.0000] <SimonSapin>
Domenic_: famous to whom?

[12:06:45.0000] <Domenic_>
SimonSapin: either "everybody" or "developers" sounds good.

[12:07:13.0000] <Hixie>
Domenic_: Влади́мир Пу́тин is pretty famous

[12:07:40.0000] <SimonSapin>
http://people.opera.com/howcome/ maybe?

[12:08:01.0000] <Hixie>
Domenic_: 毛泽东 was also pretty famous

[12:08:16.0000] <Domenic_>
SimonSapin: yup that was my first example actually :)

[12:08:45.0000] <Domenic_>
Hixie: yeah, but I kind of feel like their argument would be "he should just type Mao Zedong"

[12:09:25.0000] <Hixie>
Ἰησοῦς, also known as ישוע, is also pretty famous

[12:09:43.0000] <Domenic_>
heh

[12:10:00.0000] <Hixie>
Domenic_: well, if people are willing to just randomly rename people for the sake of their database, you're not going to convince them...

[12:10:17.0000] <Ms2ger>
Domenic_, what's next, won't allow numbers in names?

[12:11:00.0000] <Domenic_>
Ms2ger: somewhat ironically, the current regex is: ^[-A-Za-z0-9.,' ]{0,64}$

[12:12:08.0000] <Hixie>
and the artist formerly known as "the artist formerly known as Prince" used to have a name that even Unicode can't describe

[12:12:32.0000] <Hixie>
afk, lunch

[12:12:46.0000] <SimonSapin>
Domenic_: http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/ sounds relevant

[12:12:57.0000] <Domenic_>
SimonSapin: yup, was going to close with that...

[12:15:07.0000] <SimonSapin>
although not to take it too seriously

[12:15:39.0000] <SimonSapin>
restricting names handled in software to all of Unicode sounds reasonable

[12:44:47.0000] <TabAtkins>
Domenic_: Fucking most of Europe?

[12:45:00.0000] <TabAtkins>
áéóåöç etc

[12:45:28.0000] <TabAtkins>
Not to mention things like the Turkish i situation.

[13:09:20.0000] <mathiasbynens>
Domenic_: https://jonaswesterlund.se/invalid-form-validation.html may also be of reference

[13:14:24.0000] <mathiasbynens>
Domenic_: more ‘famous’ (to us) people with non-ASCII names: Geir Ivarsøy, Faruk Ateş, Юрий Зайцев (aka. kangax), Cãtãlin Mariş, etc.

[13:14:50.0000] <Domenic_>
mathiasbynens: good stuff, thanks

[13:14:50.0000] <TabAtkins>
Tantek Çelik

[13:14:56.0000] <mathiasbynens>
Domenic_: fun fact: Sindre Sørhus changed his name to Sindre Sorhus because of this

[13:14:58.0000] <Ms2ger>
Eh, tantek :)

[13:15:04.0000] <TabAtkins>
(And that i is a turkish lowercase dotted i, not an ASCII dotted i.)

[13:15:07.0000] <Domenic_>
mathiasbynens: oh wow did not know

[13:15:28.0000] <mathiasbynens>
like, legally. pretty sad story

[13:15:31.0000] <Domenic_>
TabAtkins: oh wow, he must have a bad time with that i.

[13:15:55.0000] <TabAtkins>
Domenic_: Heh, yeah.  I suppose most people with Turkish names learn to live with it.

[13:16:10.0000] <TabAtkins>
And accept that, when uppercased, their name will look wrong.

[13:16:23.0000] <Hixie>
the turkish lowercase dotted i actualy is the ASCII dotted i

[13:16:49.0000] <TabAtkins>
As it's actually written in HTML when he does so, it's a turkish undotted i with a combining dot.

[13:16:52.0000] <Hixie>
it's just that the ASCII dotted i has different capitalisation rules (and the I different lowercasing rules) in the turkish locale.

[13:16:57.0000] <TabAtkins>
So it uppercases correctly.

[13:17:02.0000] <Hixie>
yeah, but that's a hack

[13:17:10.0000] <TabAtkins>
A hack that actually works, though.

[13:17:11.0000] <Hixie>
the character is correctly the ASCII "i".

[13:17:40.0000] <Hixie>
it's a good example of why this stuff is hard, though :-)

[13:17:49.0000] <TabAtkins>
I cant' understand how the Turkish i's got folded into ASCII when so many other scripts have identical letters separated.

[13:17:51.0000] <TabAtkins>
Yay Unicode.

[13:17:56.0000] <Hixie>
yeah, beats me

[13:18:11.0000] <Ms2ger>
TabAtkins, hey, cjk ;)

[13:18:20.0000] <TabAtkins>
Indeed.

[13:18:21.0000] <Hixie>
that too

[13:28:32.0000] <jgraham>
Interestingly I noticed that in the winter olympics, all the on-screen information was ascii-only even though that clearly wasn't sufficient

[13:29:14.0000] <jgraham>
So they did things like transliterate Swedish ö to o

[13:29:19.0000] <jgraham>
Which is just wrong

[13:31:14.0000] <jgraham>
Philip`: Thanks

[13:31:31.0000] <Hixie>
anyone know what http://zzyzwicz.w3.org/resources.whatwg.org/ is about?

[13:31:53.0000] <gsnedders>
jgraham: I presume they just had a generic codepoint to ASCII codepoint mapping.

[13:32:12.0000] <jgraham>
gsnedders: Well it's hard to know what they did

[13:32:47.0000] <jgraham>
I think it's somewhat reasonable that British people wouldn't deal with non-latin characters

[13:33:05.0000] <Ms2ger>
Hixie, I think someone scraping w3c-test?

[13:33:14.0000] <Ms2ger>
Oh, w3.org

[13:33:20.0000] <Ms2ger>
MikeSmith?

[13:36:05.0000] <Hixie>
anyone here know anything about ruders.org?

[13:36:42.0000] <gsnedders>
jgraham: Okay, so it was a Vizrt system (somewhat unsurprisingly, they're who everyone use for OSD), and they're based in Bergen, so I'd be surprised if it was really ASCII-only

[13:37:47.0000] <jgraham>
gsnedders: The backend might not have been

[13:37:58.0000] <jgraham>
But I'm prety sure what we saw was

[13:38:05.0000] <gsnedders>
Yeah, indeed. But the OSD certainly should've supported it.

[13:38:13.0000] <gsnedders>
Where the data was coming from is a separate matter again.

[13:38:15.0000] <gsnedders>
As is data entry.

[13:38:30.0000] <tantek>
/me scrolls up

[13:38:35.0000] <gsnedders>
I wouldn't be at all surprised if it was in data entry where it all went wrong :)

[13:38:45.0000] <jgraham>
I think it was probably intentional

[13:39:01.0000] <jgraham>
I don't know *why*

[13:39:28.0000] <tantek>
Hixie is correct about the dotted lowercase i

[13:39:47.0000] <tantek>
/me goes back to #ab in irc.w3.org

[13:40:09.0000] <gsnedders>
is dotted lowercase i in NFC?

[13:40:25.0000] <TabAtkins>
Man, turning ö to o is just *super* wrong.  The accepted ASCII mapping is to "oe".

[13:40:34.0000] <gsnedders>
TabAtkins: For some languages.

[13:40:43.0000] <TabAtkins>
Hm, I guess so.  Definitely for german.

[13:40:46.0000] <jgraham>
I guess it could have been to oe, but that's just as wrong for Swedish

[13:40:56.0000] <TabAtkins>
and I think Björn is Nordic?

[13:41:15.0000] <jgraham>
Yeah, in German it seems to be acceptable to replace umlauts with es

[13:42:09.0000] <gsnedders>
jgraham: Well, it's how you do it *if you have to do it*.

[13:42:21.0000] <gsnedders>
jgraham: So in a sense it's /less/ wrong

[13:42:59.0000] <gsnedders>
TabAtkins: But in French you certainly just drop the diacritic

[13:43:09.0000] <jgraham>
I'm pretty sure I remember foolip saying that he wouldn't transliterate ä to ae

[13:44:15.0000] <jgraham>
(but I might be wrong)

[13:47:21.0000] <TabAtkins>
gsnedders: Yeah, I know about dropping the diacritic when it's just a grave accent.

[13:49:06.0000] <gsnedders>
TabAtkins: It applies for all diacritics in French, not just graves.

[13:49:38.0000] <TabAtkins>
Ah, kk.

[13:49:50.0000] <TabAtkins>
Yeah, that makes sense, François to Francois, etc.

[13:49:52.0000] <gsnedders>
Again, locale dependent.

[13:50:24.0000] <gsnedders>
jgraham: Certainly å to aa is relatively common, though far more recent addition to alphabet.

[13:51:24.0000] <gsnedders>
(Which is kinda odd. Seems to have gone from á -> aa -> å)

[13:53:12.0000] <TabAtkins>
I thought å went to "ow".

[13:54:34.0000] <gsnedders>
It's a long a

[13:54:49.0000] <gsnedders>
(acute is used in Old Norse as a length marker, hence á)

[13:55:37.0000] <gsnedders>
There again, I find it horrific placing vowels in the vowel space. :)

[13:55:38.0000] <TabAtkins>
Then explain "howcome", smarty-pants.

[13:55:48.0000] <TabAtkins>
^_^

[13:56:03.0000] <TabAtkins>
/me is aware of what it sounds like, and how "howcome" is a joke.

[13:56:33.0000] <gsnedders>
It's amusingly close, though :)

[13:57:06.0000] <gsnedders>
Esp. giving linking phenomena softening the "ow"

[13:57:55.0000] <gsnedders>
Oh god, I just looking up all the various terms for various phonetic linking phenomena.

[13:58:39.0000] <gsnedders>
/me goes back to avoiding phonetics

[14:05:31.0000] <Hixie>
(i dunno about hte languages y'all are talking about, but in norwegian, the letters with diacritics are actually just different letters, so replacing them with other letters wouldn't make sense, as i understand it)

[14:08:33.0000] <jgraham>
Hixie: Yeah, Swedish is the same

[14:08:40.0000] <jgraham>
German less so aiui

[14:08:44.0000] <Hixie>
yeah

[14:09:14.0000] <SimonSapin>
Dropping accents in French is not uncommon, but still wrong

[14:09:28.0000] <SimonSapin>
it can be ambiguous

[14:12:26.0000] <Hixie>
MikeSmith: you around?

[15:35:00.0000] <Hixie>
Michael Dyck rocks

[15:35:29.0000] <Hixie>
SamB: not sure what i should do with https://www.w3.org/Bugs/Public/show_bug.cgi?id=24893

[15:36:50.0000] <TabAtkins>
Hixie: Who's Michael Dyck?

[15:37:25.0000] <Hixie>
dunno but he files a ton of bugs on typos and stuff

[15:37:46.0000] <SamB>
Hixie: hmm, well, am I correct that what Matthew Raymond gave you was a 256x256 raster (presumably in PNG format)?

[15:38:03.0000] <Hixie>
i think so? not sure.

[15:38:10.0000] <Hixie>
i couldn't actually track down the original e-mail.

[15:38:13.0000] <Hixie>
i found lots of e-mails around it.

[15:38:16.0000] <Hixie>
but not the actual one.

[15:38:17.0000] <Hixie>
:-/

[15:38:44.0000] <SamB>
yeah, it looked like there were one or two images that were missing from the list archives

[15:38:50.0000] <SamB>
er. s/images/emails/

[15:39:02.0000] <Hixie>
i couldn't even find them in my own private mail archives

[15:39:57.0000] <SamB>
anyway, from the sound of things he wasn't even using his own question mark

[15:41:48.0000] <smaug____>
Hixie: by any chance, do you recall spec changes affecting https://bugzilla.mozilla.org/show_bug.cgi?id=951887

[15:43:03.0000] <SamB>
so now I'm wondering if there's some way I can find out what font the question mark might be from ...

[15:43:38.0000] <SamB>
Hixie: oh, and that still leaves the .js files without copyright/license headers


2014-03-06
[16:15:27.0000] <Hixie>
SamB: the other files aren't mind as far as i know

[16:15:39.0000] <Hixie>
smaug____: recently?

[16:16:30.0000] <SamB>
/me wonders if annevk mader them?

[16:16:42.0000] <Hixie>
probably

[16:16:49.0000] <Hixie>
smaug____: i don't recall anything on this one way or the other, but looking...

[16:17:05.0000] <smaug____>
not very recently

[16:17:59.0000] <smaug____>
after Aug 18 20:30:41 2010

[16:21:09.0000] <Hixie>
i can't find anything that would affect that that is different between then and now

[16:21:27.0000] <smaug____>
ok, thanks

[16:21:40.0000] <Hixie>
(looked through today's spec, and r5372)

[16:22:00.0000] <Hixie>
i could well be missing something though

[16:22:06.0000] <Hixie>
my apologies in advance if so!

[17:22:48.0000] <MikeSmith>
Hixie: here now

[17:26:32.0000] <MikeSmith>
Hixie: btw http://zzyzwicz.w3.org/ is the old w3c-test.org host

[17:36:58.0000] <MikeSmith>
krit_: http://dev.w3.org/FXTF/ is working again

[17:37:00.0000] <MikeSmith>
for now

[17:38:09.0000] <MikeSmith>
due to http://dev.w3.org/cvsweb/FXTF/.htaccess.diff?r1=1.1;r2=1.2;f=h

[17:38:31.0000] <MikeSmith>
but I'm not going to be able to get that there forever

[17:39:00.0000] <MikeSmith>
that host is slated for retirement

[17:40:29.0000] <MikeSmith>
but anyway it should be enough until Peter gets it set up at drafts.csswg.org somewhere

[23:26:04.0000] <foolip_>
TabAtkins, jgraham, if I get to pick I just drop the two dots in my last name to make it Jagenstedt

[23:27:11.0000] <foolip_>
TabAtkins, jgraham, however, I don't think ä to ae is actually wrong per any official rules

[23:28:13.0000] <foolip_>
just not mangling names seems like a good option :)

[07:33:55.0000] <qFox>
is there any safe way to detect whether document.write is currently "blocked"? (like when you write a blocking tag with external resource, the next writes are blocked)

[07:34:31.0000] <qFox>
i was thinking of writing a proxy script tag to invoke an actual docwrite, but that would break partial docwrites :/

[07:38:26.0000] <krijn>
Rtfm!

[08:34:36.0000] <SamB>
qFox: document.write? really?

[08:35:14.0000] <qFox>
i hope krijn is still logging this channel

[08:35:42.0000] <qFox>
can we pleaaaase get over the whole "really" thing quick? i'm not using it, i have to emulate it.

[08:36:04.0000] <SamB>
qFox: oh, that's okay then

[08:36:46.0000] <SamB>
I mean, it still sucks, but it seems a decent excuse

[08:37:34.0000] <qFox>
:)

[08:38:19.0000] <qFox>
it's really bad because there's no way to cleanly determine insertion point, and there's this blocking thing which is really fubar. and then there are partial docwrites. and ugh.

[08:38:52.0000] <qFox>
we've come a long way in our support, but some of the ad network edge cases are slowly catching up to us. this partial thread blocking is one of them.

[08:39:21.0000] <qFox>
just for context; if you do a docwrite that writes a blocking tag that's loading something external, it will _only_ block future docwrites but not the main thread

[08:39:46.0000] <qFox>
i kind of need to know whether document.write is blocked or not. explaining why will take a long monologue so i'm hoping to skip that :)

[08:41:23.0000] <jgraham>
qFox: I have literally no idea what you are trying to achieve, but have you read http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#document.write%28%29 ?

[08:41:51.0000] <odinho>
finn.no also seem to be doing some ad cleaning these days.

[08:42:29.0000] <jgraham>
There isn't an easy web-exposed way to do what you want, I don't think, but perhaps you can reverse-engineer what you need from the algorithm

[08:43:15.0000] <jgraham>
(note that most of the state is set elsewhere, notably in the HTML parser and script loader)

[08:43:33.0000] <SamB>
/me would go for something like "block adscripts that use document.write" ...

[08:44:22.0000] <jgraham>
Well fundementally you either put ads in an iframe on a seperate domain or you entirely trust them

[08:45:09.0000] <jgraham>
The fact that people don't trust them, but place them inline in their markup is upsetting

[08:47:34.0000] <qFox>
i think they dont have a choice right now

[08:48:00.0000] <qFox>
but tbh my requirement is more generic. I'd say it's slightly below that of a browser vendor.

[09:36:57.0000] <qFox>
fwiw, this is my problem: http://jsbin.com/coviyuyo/2 (convoluted example of a real world case). and to repeat, i dont write this crap myself, i need to support it.

[09:38:05.0000] <qFox>
i'm going to solve it by checking the written content (we already parse it anyways) for such blocking tags. if so, mark entire docwrite as "blocked" for the remainder of the page load. defer any write calls and execute them "onload". or well, that's what i'm going to try.

[09:38:59.0000] <qFox>
the only thing i need to check is whether writing an external script will block the html parser _after_ the current script finishes. if that's not the case, the above should be sound generically. otherwise there is still an edge case left, but we'll cross that bridge...

[11:00:16.0000] <SamB>
/me pokes around looking for an op ...

[11:00:35.0000] <Ms2ger>
You called?

[11:02:02.0000] <SamB>
what's the channel policy for cases like taijeen, who is getting "ping timeout" every few minutes or so?

[11:02:20.0000] <SamB>
though maybe his connection is better now?

[11:03:37.0000] <Ms2ger>
Yeah, it was <1 minute before

[11:06:40.0000] <SamB>
/me had such a thing happen to him not so many months ago, and he got banned from a number of channels just as a practical matter

[11:09:08.0000] <Ms2ger>
I'm happy to do temporary bans if need be, fwiw

[11:10:29.0000] <SamB>
/me toys with the idea of a new IRC connection protocol that could avoid all that join/part noise by smoothing over short disconnections somehow for a few minutes

[11:16:47.0000] <TabAtkins>
SamB: That already exists; it's called "IRCCloud".

[11:19:36.0000] <SamB>
The fact that I'm not familiar with, or using, that would seem to indicate that I was right in thinking to myself that it would be at the very least a LOONG time before it would replace the old protocol

[11:21:49.0000] <SamB>
/me wishes there was something like the CSS "snapshots" for IRC ...

[11:29:33.0000] <TabAtkins>
SamB: IRCCloud is just a webapp that does IRC for you.  It keeps you in the room all the time and maintains history across windows.

[11:29:42.0000] <TabAtkins>
My response was somewhat snarky.

[11:29:45.0000] <SamB>
ah

[11:30:02.0000] <jgraham>
It's also very funny

[11:30:07.0000] <SamB>
so it's sort of like mibbit

[11:30:09.0000] <jgraham>
When IRCCloud loses connectivity

[11:30:16.0000] <jgraham>
and all of Google disappear

[11:31:45.0000] <SamB>
I was thinking some sort of protocol that the actual IRC servers would speak.  Of course, this wouldn't help with netsplits, and you'd probably need to reconnect to the same server as last time ...

[11:36:45.0000] <Hixie>
Ms2ger, SamB: unless it's actually interrupting conversations, we should just let them be

[11:41:09.0000] <SamB>
Hixie: Yes, obviously only ban people if it's actually causing trouble.  (Which gets a bit trickier to define in a publicly-logged channel, I guess.)  I was thinking about saying something to qFox when I mentioned it, and it wasn't clear that the problem was gone yet ...

[11:42:16.0000] <Hixie>
yeah

[11:42:35.0000] <qFox>
fwiw, the problem isn't gone. i'm just going to work around it best i can. unless somebody has a great insight :)

[11:43:01.0000] <qFox>
or would like to propose exposing these properties ;)

[11:43:03.0000] <SamB>
qFox: not that problem, the repeated "ping timeout" parts/joins

[11:43:19.0000] <SamB>
your problem is indeed clearly not gone :-(

[11:43:34.0000] <qFox>
> I was thinking about saying something to qFox <-- then i dont get that?

[11:43:55.0000] <SamB>
qFox: I got distracted thinking about IRC, sorry

[11:44:01.0000] <qFox>
haha ok

[11:44:02.0000] <Hixie>
qFox: fwiw, i feel your pain with respect to emulating document.write(). it's probably the most complicated aspect of the platform. not sure i have anything to help you though.

[11:44:37.0000] <qFox>
i think i have to agree. eval and with were a breezer compared to insertion point

[11:44:44.0000] <SamB>
is it important that the emulation ever use real document.write() ?

[11:44:53.0000] <Hixie>
(well, the AAA might be slightly worse. but only slightly, and it's more self-contained.)

[11:45:01.0000] <SamB>
AAA ?

[11:45:03.0000] <qFox>
Hixie: what's the AAA?

[11:45:07.0000] <TabAtkins>
Adoption Agency Algorithm.

[11:45:11.0000] <Hixie>
part of the parser

[11:45:11.0000] <SamB>
oh

[11:45:13.0000] <qFox>
ah

[11:45:17.0000] <TabAtkins>
What reparents things nested incorrectly in th emiddle of a <table>

[11:45:20.0000] <Hixie>
handles misnested formatting elements

[11:45:27.0000] <Hixie>
TabAtkins: that's foster parenting

[11:45:29.0000] <TabAtkins>
Oh, right, it's that one.

[11:45:32.0000] <Hixie>
TabAtkins: that's a lot less complicated :-)

[11:45:34.0000] <qFox>
actually, from our point of view, AAA is part of the docwrite problem

[11:45:42.0000] <qFox>
because that determines insertion point as well

[11:45:47.0000] <SamB>
hmm

[11:45:53.0000] <qFox>
though the term is different, i recognize that

[11:46:03.0000] <Hixie>
the AAA should be relatively self-contained, how does it affect d.w()?

[11:46:44.0000] <qFox>
Hixie: we have a heuristic to "guess" the insertion point of a docwrite. but if you write a <p> while inside a <p>, that affects this point

[11:47:08.0000] <SamB>
d.w("<table>"); d.w("<hr>"); // ?

[11:47:21.0000] <qFox>
so for us the problem is double; we dont know whether a tag is closed (can't just go for .lastChild) and we have to be conscious about contextual insertion

[11:48:06.0000] <Hixie>
qFox: why would d.w() care what the DOM is? i'm confused. the insertion point isn't in the DOM, it's in the input stream to the parser.

[11:48:07.0000] <qFox>
SamB: our current/old approach was to serialize and sanitize stuff using the DOM, rather than a parser. stuff like TR disappeared :/

[11:48:38.0000] <qFox>
Hixie: ok I'm clearly mixing up terminology too much.

[11:48:55.0000] <qFox>
Hixie: we have to know exactly where new content is introduced when somebody docwrites

[11:49:23.0000] <qFox>
for us, that's the insertion point. how should i call it?

[11:49:38.0000] <Hixie>
there's no one point

[11:49:41.0000] <Hixie>
it depends what you're inserting

[11:49:50.0000] <Hixie>
but "current node" is probably the closest to what you mean

[11:49:55.0000] <qFox>
ok sure

[11:50:40.0000] <Hixie>
e.g. <table><script>document.write('<br><tr>');</script> will insert a <br> before the "table" element, in the "body" element, and a "tbody" in the "table" element, after the "script" element.

[11:50:50.0000] <Hixie>
(and then a "tr" inside the "tbody")

[11:50:50.0000] <qFox>
and the current node, for us, depends on the AAA and the insertion point. actually, i'm not sure if there's any other big things that might affect it.

[11:51:00.0000] <SamB>
qFox: was the reason you have to emulate d.w() rather than using the actual thing the long story you wanted to avoid telling?

[11:51:25.0000] <qFox>
Hixie: do you know/remember the rationale for the "async docwrite" behavior when docwriting an external script tag?

[11:51:28.0000] <Hixie>
The current node shouldn't depend on the AAA or the insertion point. The current node is just the last node added to the stack of open elements.

[11:51:35.0000] <qFox>
SamB: kind of :) see surfly.com, see if that answers some questions

[11:51:45.0000] <Hixie>
qFox: "it's what browsers do" is the rationale to almost all of the d.w() stuff.

[11:51:58.0000] <qFox>
yeah but there's always a reason :)

[11:52:08.0000] <SamB>
qFox: some moron made it work that way?

[11:52:22.0000] <Hixie>
lost in the mists of time from back when Netscape and IE were fighting the first browser war

[11:52:33.0000] <qFox>
Hixie: the current node depends on AAA because of stuff like writing a p in another p, or a TR outside of a table scope. it changes where the content is put

[11:52:40.0000] <SamB>
or, well, someone who was merely unable to predict the consequences of their actions

[11:52:49.0000] <Hixie>
the AAA has nothing to do with <p> in another <p> or <tr> outside a <table>?

[11:52:53.0000] <qFox>
Hixie: and it depends on insertion point because, well, partial docwrites.

[11:52:59.0000] <Hixie>
<tr> outside a <table> just does nothing

[11:53:08.0000] <SamB>
qFox: so what is it that you want to do here?

[11:53:10.0000] <Hixie>
and <p><p> just causes a </p> to be implied

[11:53:17.0000] <Hixie>
it's the same as <p></p><p>

[11:53:53.0000] <qFox>
ah jeez. AAA is about moving nodes between docs :/

[11:53:54.0000] <qFox>
ugh it's been a long day.

[11:54:17.0000] <qFox>
yeah

[11:54:30.0000] <qFox>
those rules, whatever it's named, also affect the current node for us

[11:54:44.0000] <SamB>
TabAtkins seems to have gotten us confused about the naming ;-)

[11:54:57.0000] <Hixie>
AAA is about things like <code><em></code>

[11:55:01.0000] <qFox>
SamB: basically, we'll still do a docwrite, but we want to know where into what node it'll be inserted because we'll sync it as an insertAdjacentHTML call. basically...

[11:55:16.0000] <Hixie>
foster parenting is about <table><br> and stuff

[11:55:48.0000] <Hixie>
qFox: i think the short answer is that you have no way to know what the parser would do without being hte parser

[11:55:53.0000] <Hixie>
qFox: unless you control all the script

[11:56:13.0000] <SamB>
so, basically there are two things that you can do

[11:56:16.0000] <Hixie>
qFox: because nothing stops a page from taking the current element and grafting it into another document, say, and then document.write() would actuallly be inserting nodes into that other doc.

[11:56:22.0000] <SamB>
(1) re-implement the HTML5 parser

[11:56:35.0000] <Ms2ger>
If you're interested in that...

[11:56:44.0000] <Ms2ger>
Want to come and work on Servo?

[11:56:54.0000] <SamB>
(2) picket vendors and the WHATWG to give you ways to interrogate the browser's parser

[11:56:56.0000] <qFox>
Hixie: ehhh. oh. meh.

[11:56:57.0000] <qFox>
then i suppose i dont care about it so much in this context :)

[11:56:57.0000] <qFox>
but just to be sure; there's no way of knowing whether a tag has been closed or not. right?

[11:57:04.0000] <qFox>
wow, irc the slow?

[11:57:52.0000] <Hixie>
there's no way i can think of, in general, to know if a particular element is on the stack of open elements (which i guess is what you mean by "has been closed or not")

[11:58:01.0000] <qFox>
Hixie: let's say we do control the whole page? how would it be possible then? short of xhr'ing the entire html and parsing it manually of course

[11:58:10.0000] <Hixie>
(you can kind of tell with some elements, e.g. <video> and <object>, maybe)

[11:58:24.0000] <SamB>
Hixie: that seems like a pretty reasonable way to define "closed", yes

[11:58:29.0000] <Hixie>
if you control the whole page, you can dramatically simplify your life by just limiting what's possible

[11:58:32.0000] <SamB>
i.e. as "not open"

[11:58:36.0000] <Hixie>
for example, by preventing anyone from ever calling document.write()

[11:58:37.0000] <Hixie>
:-)

[11:58:57.0000] <Hixie>
SamB: you'd be surprised how many definitions one could come up with

[11:59:06.0000] <Hixie>
SamB: (and how many are actually useful)

[11:59:19.0000] <Hixie>
SamB: (e.g.  <div><em></div> - is the <em> open? it's not on the stack.)

[11:59:47.0000] <Hixie>
SamB: (but if you do <div><em></div>A, it turns into the same as <div><em></em></div><em>A</em>, so maybe it _is_ open? or its clone is? or something?)

[12:00:11.0000] <SamB>
Hixie: okay, yes, I see what you mean

[12:00:19.0000] <SamB>
what is "the element"?

[12:01:16.0000] <SamB>
is it the tag-soup range in the actual document, or a DOM node

[12:01:30.0000] <qFox>
Hixie: yeah that's what I mean. ok.

[12:01:33.0000] <Hixie>
yeah. the HTML parser is one of those few things that i've concluded can only be discussed in real terms, without simplification, unfortunately.

[12:01:45.0000] <Hixie>
most things you can abstract things out and talk about in general terms quite successfully.

[12:02:28.0000] <SamB>
so perhaps we need terms for each applicable idea of "element"?

[12:02:55.0000] <Hixie>
well, here what matters is that the <em> is no longer on the stack but is on the "list of formatting elements"

[12:03:09.0000] <Hixie>
list of active formatting elements?

[12:03:11.0000] <Hixie>
whatever i called it

[12:03:14.0000] <Hixie>
bbiab, lunch

[12:03:27.0000] <qFox>
ok, inception case here, but what if you docwrite an external script. does it block the html parser _after_ the current script completes?

[12:03:27.0000] <qFox>
basically, can somebody reliably do this? <script>docwrite(<script src=foo>); docwrite(important stuff);</script><script>refer to important stuff</script>

[12:03:28.0000] <qFox>
i'm sensing freenode will split soon :/

[12:03:37.0000] <SamB>
so a "formatting element" is the tag soupy thing, then?

[12:04:09.0000] <SamB>
qFox: what might the nature of "important stuff" be?

[12:04:48.0000] <qFox>
Hixie: the thing is we want to generically render a site as original, so limiting is not an option :)

[12:06:20.0000] <qFox>
fwiw, I would say an element is "closed" if there's no way for me to docwrite into it anymore :) But that definition might be too closely bound to my current use case for it.

[12:06:44.0000] <SamB>
qFox: okay, this explains why you want to support nasty ad networks pretty well

[12:06:48.0000] <qFox>
If I can't docwrite into it, it can't be the future parent of the content that's being written and I won't have to care about it.

[12:07:26.0000] <qFox>
SamB: well. we just want to be generic. ad networks are just nasty and do pretty much anything that one might consider "edge case". so we can't really slack here.

[12:07:46.0000] <SamB>
qFox: so, you don't care that another element node might later arise due to a particular tag that has already produced an element node?

[12:08:13.0000] <qFox>
SamB: not sure what you mean there?

[12:08:16.0000] <SamB>
qFox: well, yes, I mean it explains why you can't just decide that ad networks have to shape up if they want to work with your thing

[12:08:38.0000] <SamB>
qFox: well, like that <div><em></div> example

[12:09:08.0000] <qFox>
ah. well no. if i docwrite, and the start of the content ends up inside the <em>, that's all i care about.

[12:09:41.0000] <qFox>
in the end, the insertAdjacentHTML approach will have to be fixed I guess since it can't cover node boundary breaking writes properly. but one step at a time :)

[12:09:41.0000] <SamB>
do you care that another <em> element might crop up later without any intervening <em> tag? it sounds like the answer is "no".

[12:10:02.0000] <qFox>
actually, tbh, i think it matters.

[12:10:20.0000] <qFox>
the whole principle is to try and sync the two doms in virtually every way

[12:10:36.0000] <SamB>
can't you notice the new node when it happens?

[12:11:06.0000] <qFox>
well there's mutation obs. but that's not reliably supported for us. how else would you?

[12:12:37.0000] <SamB>
well, how do you normally see what nodes d.w() has added to the DOM?

[12:13:51.0000] <qFox>
we hook into _everything_. all the node affecting api's, we know about them

[12:14:33.0000] <Ms2ger>
Anybody have a synonym for optional that doesn't sound like "option"?

[12:14:42.0000] <qFox>
conditional

[12:14:49.0000] <SamB>
Ms2ger: what's the context?

[12:15:05.0000] <qFox>
SamB: docwrite is one of the few where you cant really predict what's gonna happen in terms of DOM mutations.

[12:15:48.0000] <Ms2ger>
SamB, optional arguments in Rust, where Option is already taken for nullability

[12:15:57.0000] <qFox>
SamB: innerhtml is also one, but that's mainly just an expensive operation for us. it's containable otherwise. I suppose, worst case, so is a document write. but we don't really want to go that far.

[12:16:11.0000] <SamB>
Ms2ger: you mean like defaulted arguments?

[12:16:20.0000] <Domenic_>
Ms2ger: defaultable

[12:16:34.0000] <SamB>
or otherwise couldn't just use Option arguments

[12:16:36.0000] <SamB>
+you

[12:16:47.0000] <Ms2ger>
This is explicitly for the case where you don't have a default in IDL, though

[12:17:26.0000] <qFox>
NoDef

[12:17:49.0000] <SamB>
Ms2ger: isn't that what Option is *for*?

[12:18:24.0000] <Ms2ger>
SamB, sorta, but it idiomatically means "nullable", which I want to distinguish it from

[12:18:58.0000] <Ms2ger>
So really what I'm saying is that the language took my lunch money :)

[12:19:51.0000] <SamB>
so does this mean that "Option Option Foo bar" or whatever is sensless? that seems like you should have just used the word "nullable" in the first place ...

[12:20:16.0000] <SamB>
that's the royal "you", I guess

[12:20:37.0000] <SamB>
or, well, plural

[12:21:18.0000] <Ms2ger>
I prefer "they" :)

[12:21:41.0000] <Ms2ger>
Option Option works, but is not exactly obvious

[12:22:39.0000] <SamB>
Ms2ger: if it doesn't do the same thing as Option, I don't see why using regular Option on the Rust side would be bad here?

[12:22:56.0000] <Ms2ger>
Readability :)

[12:23:14.0000] <Ms2ger>
Anyway, I'll stick with that for now

[12:25:13.0000] <qFox>
<qFox> basically, can somebody reliably do this? <script>docwrite(<script src=foo>); docwrite(important stuff);</script><script>refer to important stuff</script>

[12:26:21.0000] <qFox>
what should be the answer here? because if it's "no", then I'm fairly safe for parsing the docwrite content, recognizing blocking content, and setting a flag that write is blocked for this doc. i'll stash all writes and defer them to onload.

[12:26:39.0000] <qFox>
i'm not sure about a backtoback write that causes a block yet, but one step at a time

[12:26:54.0000] <Ms2ger>
Hmm

[12:31:02.0000] <jgraham>
Ms2ger: Defined(foo) | Undefined might be nice

[12:31:14.0000] <jgraham>
Not sure what to call the type though

[12:31:21.0000] <Ms2ger>
That's the main issue :)

[12:31:43.0000] <jgraham>
"Maybe"? Confuse all the Haskellers ;)

[12:31:59.0000] <Ms2ger>
Evil... I like it: )

[12:32:01.0000] <SamB>
that's what I would have called the first one ;-P

[12:32:29.0000] <jgraham>
Ommitable?

[12:44:34.0000] <GPHemsley>
globbot GPHemsley

[12:44:35.0000] <globbot>
GPHemsley, found more than 20 results, showing 3

[12:44:35.0000] <globbot>
Mar  4 19:30 <Hixie> GPHemsley: maybe?

[12:44:35.0000] <globbot>
Feb 20 2014 <zcorpan> GPHemsley: http://mimesniff.spec.whatwg.org/#parse-a-mime-type compares bytes to code points

[12:44:35.0000] <globbot>
Feb 13 2014 <jgraham> GPHemsley: First expand it to Msmsger

[12:44:42.0000] <GPHemsley>
TIL

[12:45:09.0000] <Ms2ger>
Wat

[12:45:13.0000] <Hixie>
we have a bot! how long have we had a bot!

[12:47:00.0000] <Ms2ger>
It's glob's logbot

[12:47:21.0000] <Ms2ger>
It was added to the topic nearly two years ago

[12:49:22.0000] <Hixie>
/me pokes globbot 

[12:49:51.0000] <Hixie>
globbot globbot

[12:49:52.0000] <globbot>
Hixie, found 3 results

[12:49:52.0000] <globbot>
Mar  6 20:49 * Hixie pokes globbot 

[12:49:52.0000] <globbot>
Mar  6 20:44 <GPHemsley> globbot GPHemsley

[12:49:52.0000] <globbot>
Aug 10 2012 <krijn> The globbot thing looks handier

[12:50:07.0000] <Hixie>
/me feels better

[12:50:21.0000] <GPHemsley>
heh

[12:50:35.0000] <GPHemsley>
Ms2ger was pretty spot-on with that date

[12:51:27.0000] <Ms2ger>
Sometimes it's nice to have a static topic :)

[12:54:04.0000] <GPHemsley>
The topic hasn't changed in 2 years?

[12:54:10.0000] <GPHemsley>
/me cires

[12:56:26.0000] <SamB>
globbot: topic

[12:56:27.0000] <globbot>
SamB, found more than 20 results, showing 3

[12:56:27.0000] <globbot>
Mar  6 20:54 <GPHemsley> The topic hasn't changed in 2 years?

[12:56:27.0000] <globbot>
Mar  6 20:51 <Ms2ger> Sometimes it's nice to have a static topic :)

[12:56:27.0000] <globbot>
Mar  6 20:47 <Ms2ger> It was added to the topic nearly two years ago

[12:56:42.0000] <GPHemsley>
globbot: 10 topic

[12:56:43.0000] <globbot>
GPHemsley, found 0 results

[12:56:50.0000] <GPHemsley>
globbot: topic 10

[12:56:51.0000] <globbot>
GPHemsley, found 0 results

[12:56:58.0000] <GPHemsley>
hmph

[12:57:22.0000] <GPHemsley>
globbot: W3C

[12:57:23.0000] <globbot>
GPHemsley, found more than 20 results, showing 3

[12:57:23.0000] <globbot>
Mar  6 01:26 <MikeSmith> Hixie: btw http://zzyzwicz.w3.org/ is the old w3c-test.org host

[12:57:23.0000] <globbot>
Mar  5 21:33 <Ms2ger> Hixie, I think someone scraping w3c-test?

[12:57:23.0000] <globbot>
Mar  5 19:51 <SamB> hmm, it never occurred to me to wonder how the w3c got w3.org before ...

[12:57:47.0000] <Ms2ger>
Srsly

[12:58:02.0000] <Ms2ger>
This is the second time today a channel has started playing with logbot

[12:58:08.0000] <Hixie>
heh

[12:58:25.0000] <GPHemsley>
Well, I just learned that it existed because we had one added to a Mozilla channel

[12:58:33.0000] <GPHemsley>
so they may be related

[12:58:44.0000] <Ms2ger>
Was it #intellego?

[12:58:51.0000] <GPHemsley>
Yeah

[12:59:26.0000] <Ms2ger>
It was the people who came looking for it the last time, yes

[12:59:39.0000] <GPHemsley>
What was the other channel?

[13:00:01.0000] <Ms2ger>
#introduction

[13:00:17.0000] <GPHemsley>
ah

[13:48:16.0000] <Domenic_>
DOMString[] in WebIDL means "JavaScript array of strings"? Or is that sequence<DOMString>?

[13:48:27.0000] <heycam>
Domenic_, DOMString[] will go away

[13:48:46.0000] <heycam>
it means "host object that behaves similarly to an array but isn't a JS Array object"

[13:48:50.0000] <heycam>
sequence<> is the one that means array object

[13:48:58.0000] <Domenic_>
Ah OK, thanks.

[13:49:18.0000] <heycam>
/me remembers he needs to email you and some others about sicking's array proposals

[13:49:30.0000] <Domenic_>
Apparently various places in Gecko that use DOMStringList are currently specced to use DOMString[]

[13:49:53.0000] <Domenic_>
Curious whether we can replace them with real arrays or if there's web code depending on contains() or item()

[13:50:15.0000] <heycam>
yeah we would like to replace them with real JS Arrays

[13:50:38.0000] <sicking>
Domenic_: it's somewhat unknown. The only "important" difference is that DOMStringList has a .item(number) function

[13:50:47.0000] <Domenic_>
well also contains()

[13:50:47.0000] <sicking>
Domenic_: but it might not be used enough to matter

[13:50:48.0000] <heycam>
the difficulty, and the reason that the DOMString[] thing was introduced, was (a) checking and throwing when you interact with the array incorrectly, and (b) having the DOM object watch for changes to the array

[13:50:49.0000] <Domenic_>
http://esdiscuss.org/topic/array-prototype-contains#content-69

[13:51:20.0000] <sicking>
Domenic_: ooooh. I had missed that :(

[13:51:29.0000] <sicking>
Domenic_: i forgot that DOMStringList has .contains

[13:51:35.0000] <sicking>
Domenic_: so silly that Array doesn't :(

[13:51:52.0000] <Domenic_>
sicking: well there's talk of adding .contains(). But IMO adding .has() would be more consistent with Set, Map, etc.

[13:52:07.0000] <sicking>
Domenic_: makes sense

[13:52:47.0000] <sicking>
Domenic_: crap :( this makes me worried we can't deprecate DOMStringList :(

[13:53:10.0000] <Domenic_>
sicking: really? Boris's email made it sound like there was no interoperable usage of it

[13:53:25.0000] <sicking>
Domenic_: not even IDB?

[13:53:26.0000] <Domenic_>
i guess IndexedDB

[13:55:41.0000] <sicking>
Domenic_: how quickly do you think we could get .has added to Array? In spec that is

[13:56:10.0000] <sicking>
Domenic_: it *might* be easier to get rid of .contains if there's an alternative we can point people to

[13:56:32.0000] <Domenic_>
sicking: if there was serious DOM pressure, might be able to squeak it into ES6. If someone writes the actual spec text for Allen to copy and paste. Which I volunteer for. (rwaldron also is good at doing such things.)

[13:57:00.0000] <Domenic_>
Alternately it could be on the ES7 train as an accepted proposal, so as to avoid piling onto the ES6 train

[13:57:12.0000] <Ms2ger>
sicking, I guess we could also try to kill contains() from DOMStringList?

[13:57:16.0000] <sicking>
Domenic_: i'm not sure that the IDB usage amounts to "serious" pressure.

[13:57:35.0000] <sicking>
Domenic_: worst case we just leave DOMStringList in IDB and nowhere else

[13:57:48.0000] <Domenic_>
It's also not the end of the world to have contains() on array instead of has()

[13:58:00.0000] <Domenic_>
you can kind of make an argument that you should be consistent with String instead of with Map/Set.

[13:58:08.0000] <Domenic_>
since string also has zero-indexed properties

[13:58:31.0000] <sicking>
Domenic_: true

[13:59:45.0000] <sicking>
Domenic_: any idea when the first ES7 train would ship? My understanding is that there will be regular releases past ES6? (though details still being debated i'm sure)

[14:01:23.0000] <Domenic_>
I think either end of 2014 for spec-text complete, plus a half-year for editing before Ecma approval, or maybe it's mid-2015 with a shorter Ecma approval cycle this time.

[14:01:36.0000] <sicking>
ok

[14:02:00.0000] <sicking>
Ms2ger: we could try renaming .contains() to .has()

[14:02:01.0000] <Domenic_>
rafaelw I think would know the details on that plan

[14:02:09.0000] <sicking>
Domenic_: ok

[14:02:17.0000] <sicking>
Ms2ger: or have both but warn for .contains()

[14:02:29.0000] <sicking>
Ms2ger: if you write a patch I'll r+

[14:02:40.0000] <Ms2ger>
sicking, (I'm not sure if has is really better than contains, but I don't feel like bikeshedding on this :))

[14:02:59.0000] <sicking>
Ms2ger: i'll defer to Domenic_ and TC39

[14:03:12.0000] <sicking>
Ms2ger: consistency with Set and Map is nice

[14:03:21.0000] <Ms2ger>
/me avoids snarky comments by saying nothing

[14:03:59.0000] <sicking>
Ms2ger: something we should deinitely do is to remove item

[14:04:19.0000] <Ms2ger>
You could file a bug on me and hope I get to it :)

[14:04:48.0000] <sicking>
Domenic_: so, "has" or "contains"? If you get to choose?

[14:05:24.0000] <Domenic_>
sicking: if I get to choose, "has".

[14:05:35.0000] <sicking>
Domenic_: cool

[15:28:46.0000] <SamB>
/me wonders what it means to get a 301 with "Vary: User-Agent,Accept-Language, Accept-Encoding"

[15:29:09.0000] <SamB>
(is it really "permanent" if it depends on those things?)

[15:29:23.0000] <SamB>
/me just did "curl --head www.mozilla.org"

[15:46:29.0000] <Hixie>
SamB: it means it's permanent for that combination of values :-)

[15:47:22.0000] <SamB>
hmm, so I know who I should complain to if a link checker sees that ands says "change your links"

[15:55:45.0000] <Hixie>
SamB: the link checker vendor?

[15:55:54.0000] <SamB>
precisely


2014-03-07
[17:02:21.0000] <bholley>
Hixie: ping

[01:34:56.0000] <ondras>
Ms2ger: ?

[01:35:05.0000] <Ms2ger>
?

[01:38:03.0000] <ondras>
Ms2ger: can you please have a look at https://bugzilla.mozilla.org/show_bug.cgi?id=980825 and confirm it?

[03:15:37.0000] <qFox>
lol ok. an external stylesheet (static) blocks future script tags. if you docwrite the stylesheet, it blocks future static script tags, but not the executing script thread. it also doesn't block future docwritten script tags. wut?

[03:15:50.0000] <qFox>
i'm tumbling down a rabbot hole, aren't i

[03:17:42.0000] <qFox>
are there any other elements besides external script tags and external stylesheets that might block the parser, the script thread, or even just the rendering thread?

[03:17:55.0000] <jgraham>
qFox: http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#interactions-of-styling-and-scripting

[03:20:11.0000] <qFox>
ok so inline style with external refs will probably exhibit the same behavior. but i've read that for example @font-face won't block

[03:20:23.0000] <qFox>
wont block script thread, only the rendering thread

[03:22:38.0000] <qFox>
jgraham: so do you know of any other elements that might block any of the threads?

[03:22:45.0000] <qFox>
apart from style, script, and link?

[03:25:21.0000] <jgraham>
I think parsing can only be blocked on style or on script. Although I don't know if the HTML Imports people are going to change that

[03:25:36.0000] <jgraham>
Mind you I think they were using <link>

[03:26:18.0000] <qFox>
docwrite+link can block in the weird way described above. i havent checked @import yet but it should be the same (whether external or inline)

[03:27:17.0000] <jgraham>
I think the spec about exactly when CSS blocks is wrong

[03:27:20.0000] <jgraham>
Or was wrong

[03:27:33.0000] <jgraham>
Now I think it might let CSS define it and CSS might not bother

[03:27:57.0000] <qFox>
without docwrite, it behaves as advertised afaics.

[03:29:14.0000] <qFox>
hm what about app cache manifest

[03:32:50.0000] <jgraham>
http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html#concept-appcache-init - that happens in the background

[03:33:39.0000] <qFox>
i was reading that, but 6.7.4 1.4 is confusing to me

[03:34:15.0000] <qFox>
namely the synchronous flag. but perhaps that means something else than important in this context

[03:39:11.0000] <jgraham>
It means that it's synchronous with respect to that algorithm. But that algorithm is already asynchronous with respect to everything else

[03:39:23.0000] <qFox>
yeah ok

[03:39:48.0000] <jgraham>
I thik

[03:39:51.0000] <jgraham>
*think

[05:59:30.0000] <JakeA>
jgraham: I don't think CSS can block parsing

[06:00:15.0000] <JakeA>
they only block rendering (although I'm not sure if that's specced or just what browsers do)

[06:01:03.0000] <zewt>
is it observable to script?

[06:01:30.0000] <JakeA>
Non async scripts block parsing until they execute, but script executing is blocked on previous CSS executing

[06:01:43.0000] <JakeA>
HTML Imports are set to behave the same as CSS :((

[06:01:45.0000] <zewt>
(blocking rendering, that is)

[06:02:33.0000] <JakeA>
zewt: An async script may see elements with default stying

[06:02:39.0000] <JakeA>
if it asks for computed styles

[06:03:24.0000] <jgraham>
Hmm, a script can be blocked on a stylesheet

[06:03:31.0000] <jgraham>
A script can also block the parser

[06:03:38.0000] <JakeA>
yeh

[06:03:49.0000] <jgraham>
So unless I am missing something a stylesheet can block the parser

[06:03:51.0000] <JakeA>
The problem with HTML imports is the .import property is a sync getter

[06:04:20.0000] <JakeA>
jgraham: Well, technically that's the script blocking, but the script is blocked on the CSS. CSS cannot block the parser without the script

[06:04:48.0000] <jgraham>
OK, I guess you could look at it like that

[06:05:30.0000] <JakeA>
.import should return a promise imo

[06:34:45.0000] <smaug____>
MikeSmith: something wrong with w3 bugzilla?

[06:34:48.0000] <smaug____>
super slow

[07:20:46.0000] <MikeSmith>
high packet loss on the network coming into MIT

[07:21:02.0000] <MikeSmith>
apparently

[09:19:02.0000] <bholley>
Hixie: ping

[09:25:30.0000] <SamB>
hmm, the WHATWG wiki seems to have some gadgets cloned from Wikipedia without changing the local links in descriptions to interwikis :-(

[09:28:20.0000] <TabAtkins>
JakeA: Report that?

[10:01:27.0000] <Hixie>
bholley: sup

[10:01:59.0000] <bholley>
Hixie: where does the spec forbid cross-origin event dispatch?

[10:02:34.0000] <bholley>
Hixie: only implicitly via .dispatchEvent not being reachable on anything cross-origin?

[10:02:40.0000] <Hixie>
which spec?

[10:02:51.0000] <Hixie>
i don't think html says anything about that one way or the other.

[10:03:12.0000] <Ms2ger>
I'd be surprised if DOM said anything either

[10:03:45.0000] <bholley>
Hixie: well, it _does_ imply that it needs to be the case in 9.4.2.2

[10:03:55.0000] <bholley>
http://www.whatwg.org/specs/web-apps/current-work/#user-agents

[10:04:44.0000] <Hixie>
yeah that's just referring to the fact that you can't call dispatchEvent() on a cross-origin object

[10:28:42.0000] <SamB>
hmm, the really truly original version of the current WHATWG logo should be in somethign with "Message-ID: <410D2802.2010006⊙en>". strangely, gmane seems to recognize the ID well enough to know what group it would be in, but not what article???

[10:54:52.0000] <Hixie>
SamB: Yeah it's really odd how that article has vanished from all the archives i've tried it in

[10:55:23.0000] <SamB>
it's almost like someone sent a DMCA notice or something ...

[10:55:46.0000] <Hixie>
pretty sure a dmca notice couldn't reach into my personal mail archive backups

[10:56:13.0000] <Hixie>
i have the mail that's my reply, In-Reply-To: <410D2802.2010006⊙en>, which starts "The second one, the question-mark-in-circle, is pretty good", in my archive

[10:56:26.0000] <Hixie>
oh no, wait, i do have that one

[10:56:33.0000] <Hixie>
it doesn't have the license though

[10:56:49.0000] <Hixie>
it just says "Would one of the attached logos be appropriate?" and has some attachments

[10:57:47.0000] <Hixie>
http://damowmow.com/temp/410D2802.2010006⊙en

[10:58:02.0000] <Hixie>
it's the e-mail where he gives the license terms i can't find

[10:58:17.0000] <Hixie>
i know what the e-mail says (essentially, whatwg can use it for logo purposes), but can't find it anywhere

[10:58:35.0000] <Hixie>
i think someone posted a link to it in #whatwg within the last year, though

[11:23:23.0000] <Domenic_>
woahhhh did not know http://blogs.msdn.com/b/ieinternals/archive/2014/03/06/browser-arcana-ipv4-ipv6-literal-urls-dotted-va-dotless.aspx

[11:46:01.0000] <TabAtkins>
Domenic_: Holy shit, that's a terrible idea.

[11:46:08.0000] <TabAtkins>
Especially the octal form, wtf.

[11:48:49.0000] <Domenic_>
"Chrome and Opera appear to match Internet Explorer’s behavior here, while Firefox 27 leaves the undotted decimal in the address bar and in the request sent to the network"

[11:48:54.0000] <Domenic_>
seems like a job for the URL Standard...

[12:13:35.0000] <lars_t_h>
I have a question about read only nodes and the DOM (Level 3). Where can  find a list of which nodes are read-only in a DOM tree? So far i had found out that if a parent node is read only, then it's child nodes are also read only nodes.

[12:15:03.0000] <Ms2ger>
Ignore DOM level 3

[12:15:16.0000] <lars_t_h>
Ms2ger, why?

[12:15:19.0000] <Ms2ger>
It tricked you into believing that concept exists

[12:15:22.0000] <Ms2ger>
It doesn't

[12:16:27.0000] <Domenic_>
lars_t_h: you would be looking for http://dom.spec.whatwg.org/

[12:16:40.0000] <lars_t_h>
Ms2ger, ok thanks

[12:17:55.0000] <lars_t_h>
Domenic_, I'm doing a DOM implementation in the Go programming language, should i use the DOM spec at whatwg.org (your link)?

[12:18:04.0000] <Domenic_>
lars_t_h: yes, definitely.

[12:19:54.0000] <lars_t_h>
Domenic_, ok then next question is: What about the Web IDL error - thing. It is there the JavaScript Array should be defined instead.

[12:22:26.0000] <Domenic_>
lars_t_h: I don't understand "the Web IDL error - thing."

[12:22:56.0000] <lars_t_h>
Domenic_, finding a link

[12:24:23.0000] <lars_t_h>
Domenic_, got it: http://dom.spec.whatwg.org/#elements

[12:24:57.0000] <Domenic_>
ok, so what's the question about Elements.

[12:26:14.0000] <lars_t_h>
Domenic_, i have to copy ES6 method defenitions of the Array into Elements? Yes?

[12:26:51.0000] <lars_t_h>
*s/the Array/Array

[12:27:07.0000] <Domenic_>
lars_t_h: I'm not really sure what your goal would be with a Go implementation, but in JS it just means subclassing Array. Maybe in Go you would subclass Go arrays? If they are subclassable?

[12:27:20.0000] <TabAtkins>
lars_t_h: Elements inherits from Array, and so automatically gets most of the methods correct.

[12:28:49.0000] <lars_t_h>
Domenic_, they are called slices and is a part of the language spec, so No, but it can be implemented in a struct type.

[12:32:11.0000] <lars_t_h>
TabAtkins, , Domenic_ Thanks. I think all the information i nedd to contine. I will implement the DOM spec at dom.spec.whatwg.org in Go.

[12:32:28.0000] <lars_t_h>
*I think I have ...

[12:33:19.0000] <Hixie>
that ought to be interesting, since Go has no inheritance and the DOM is largely based on inheritance :-)

[12:36:04.0000] <lars_t_h>
Hixie, hint: Heavy usage of interfaces in the Go implementation. I have pointer to a type TNode, which implements most of the DOM methods. The interface types defines which DOM methods that are visible to client code using the DOM implementation.

[12:36:43.0000] <jgraham>
Servo currently implements the DOM without inheritane

[12:37:02.0000] <jgraham>
Although rust will probably grow single inheritane to make this less insane

[12:37:35.0000] <Ms2ger>
It's... painful, though

[12:38:28.0000] <Hixie>
lars_t_h: good luck

[12:38:38.0000] <Yuhong>
From https://news.ycombinator.com/item?id=7248742

[12:38:47.0000] <Yuhong>
"Having to rely on the DOM to do that is a horrible hack."

[12:38:56.0000] <Hixie>
the lack of true classes in Go are one of the big things that have led me away from it, i must admit

[12:39:36.0000] <lars_t_h>
Hixie, thanks

[12:41:43.0000] <jgraham>
I haven't used Go. But my very limited experience with Rust is that it's fine as long as you aren't trying to implement a system that is explicitly designed around Java-style classes

[12:45:13.0000] <Hixie>
jgraham: there's a lot of classes of problems that i find fit very neatly into a type hierarchy

[12:46:14.0000] <jgraham>
It doesn't mean that's the only or even best way to solve them though

[12:46:14.0000] <Hixie>
(though i certainly miss composition in languages that don't have it, too)

[12:46:30.0000] <Hixie>
sure. lots of ways to crack a nut.

[12:46:34.0000] <Yuhong>
"that's the single most important thing to have in any language,how to properly import external files."

[12:47:02.0000] <Hixie>
but sometimes you have a nail, and you bemoan your toolbox's opinion that hammers aren't the only way to drive nails.

[12:47:36.0000] <Hixie>
i mean, sure, a big spanner works ok... maybe a rock... i guess you could use the side of the power drill... :-P

[12:50:16.0000] <jgraham>
And sometimes you have so many tools in the toolbox that every time you try to reach for one of them, you cut your hand on one of the other tools that got in the way (*cough* C++ *cough*)

[12:51:03.0000] <Hixie>
hehe

[12:51:25.0000] <Hixie>
http://ian.hixie.ch/programming/

[12:52:03.0000] <astearns>
that's an eerily accurate description of my actual toolbox at home

[12:52:26.0000] <Hixie>
my actual toolbox at home oddly has almost nothing in it that can actually cut anything

[12:52:30.0000] <Hixie>
not sure what to read into that

[12:52:47.0000] <Hixie>
lots of screwdrivers, spanners, drills, and so on... no saws, knives, etc

[12:53:10.0000] <Ms2ger>
Is orientated a word?

[12:53:12.0000] <SamB>
Hixie: what languages don't have composition? do you mean something strange by the term?

[12:53:24.0000] <astearns>
I've cut myself on screwdrivers and drill bits, but perhaps I'm just talented

[12:54:16.0000] <Hixie>
SamB: most popular languages don't have it. I mean the ability to say "this object has these interfaces, and they are implemented by that, that, and that" rather than "this object has this interface, here is its implementation"

[12:54:37.0000] <SamB>
orientated is not (afaict) a proper word; it is the kind of word I use if I want to sound silly

[12:54:44.0000] <Hixie>
SamB: (go does have it, javascript also to some extent though it's pretty verbose to use since you have to import each method individually)

[12:54:51.0000] <SamB>
Hixie: ah

[12:55:01.0000] <Hixie>
(though go's implementation is a bit weird)

[12:55:01.0000] <SamB>
Hixie: so some kind of delegation of interfaces?

[12:55:05.0000] <Hixie>
yeah basically

[12:55:18.0000] <Hixie>
bonus points if it's dynamic

[12:55:22.0000] <jgraham>
Do you mean something like typeclasses?

[12:55:56.0000] <SamB>
jgraham: the closest thing in the realm of typeclasses is that "newtyped deriving" thing, I think

[12:56:29.0000] <Hixie>
like, i have this object, now i want to graft on this new ability. e.g. you made a rocket, and you want to graft on weapons. suddenly it should start being true for "isa" weapon-capable-object, and should know how to .fireWeapons() or whatever.

[12:57:35.0000] <Hixie>
in languages like C++ you tend to do this with "tearoffs", if I'm not mixing my terminology fatally.

[12:58:10.0000] <Hixie>
by which i mean your object has a method that takes a subinterface ID, and returns a different object that implements that interface for the object

[12:58:46.0000] <Hixie>
but it'd be nice to have built-in language support for this rather than having to fake it all the time, since faking it is quite error-prone

[12:59:05.0000] <othermaciej>
what you just described is COM

[12:59:06.0000] <Hixie>
Go does this ok for static combinations

[12:59:17.0000] <othermaciej>
(specifically the QueryInterface aspect thereof)

[12:59:18.0000] <Hixie>
yeah, COM is basically what i'm describing, though not native to the language

[13:00:41.0000] <Hixie>
one problem with approaches like COM is that really you don't have one object, you have a whole series of objects that as a team act as one

[13:00:54.0000] <Hixie>
so things like comparing pointers get really messy

[13:01:25.0000] <othermaciej>
forwarding kind of defeats the point of composition IMO

[13:01:41.0000] <othermaciej>
if you want to fully re-export the interface, just export access to the sub-object

[13:02:02.0000] <Hixie>
yeah

[13:02:06.0000] <othermaciej>
saying train.engine.accelerate() instead of train.accelerate() is not the worst

[13:02:18.0000] <Hixie>
if it composes that way, yeah

[13:02:47.0000] <othermaciej>
and that is super easy to do in most dynamic languages

[13:02:57.0000] <Hixie>
even most non-dynamic ones

[13:03:01.0000] <othermaciej>
it's also the only sane way to have a has-a relationship to more than one of the same kind of thing

[13:04:02.0000] <Hixie>
one time i run into this is when I have a class A with methods M1 and M2 from which I want to have three descendants: an A with M1 replaced with M1', A with M2 replaced with M2', and A with M1 and M2 replaced with M1' and M2'.

[13:04:52.0000] <othermaciej>
that doesn't sound like all one class to me

[13:05:26.0000] <Hixie>
a specific case of this:

[13:05:58.0000] <othermaciej>
it sounds like a base class with three subclasses

[13:06:54.0000] <Hixie>
TLocation is a room in a MUD. It inherits from all the core stuff and has dozens of methods. TNamedLocation is a TLocation that implements the half-dozen name-related methods to return fixed strings set during construction. TSlaveLocation is a TLocation that implements those methods by deferring to another object also set during constructions.

[13:07:43.0000] <Hixie>
TSurfaceNamedLocation is a TNamedLocation that has a surface (like the ground), by default it doesn't have one. It overrides the surface-related methods to return the right surface object.

[13:07:53.0000] <Hixie>
TSurfaceSlavedLocation is the same but inherits from TSlavedLocation.

[13:08:02.0000] <Hixie>
the last two duplicate code.

[13:08:25.0000] <othermaciej>
name and surface sound like things that could be has-a relationships instead of is-a

[13:08:36.0000] <othermaciej>
location.name, possibly null could have the name stuff

[13:08:47.0000] <othermaciej>
location.surface could handle the surface parts

[13:08:49.0000] <Hixie>
yeah, they are. but there's code in the main class to instantiate the right child object.

[13:09:05.0000] <Hixie>
(the last two in my specific case are implemented as a macro that i instantiate with the right superclasses twice: http://software.hixie.ch/fun/cuddlyworld/src/surfacelocations.inc )

[13:09:43.0000] <othermaciej>
in languages that can do multiple inheritance you could alternately multiple-inerit (but dealing with inheritance diamonds is no fun)

[13:10:13.0000] <Hixie>
the constructor for TNamedLocation takes (Name, DefiniteName, IndefiniteName, Description), the constructor for TSlavedLocation takes (Master, Position), the constructor for TSurfaceNamedLocation takes (Name, DefiniteName, IndefiniteName, Description, Ground), and the constructor for TSurfaceSlavedLocation take (Master, Position, Ground)

[13:10:16.0000] <othermaciej>
if the only behavior difference for the Named and Surface subclasses is at construction time, maybe you just need a constructor with lots of optional parameters that can instantiate the sub-objects

[13:10:47.0000] <othermaciej>
like a dictionary parameter to the constructor

[13:10:49.0000] <Hixie>
there's several constructors. One with the argumes, another that knows how to read the data from a file, etc.

[13:11:23.0000] <Hixie>
the problem is that this doesn't scale, whether to a flexible one-class constructor or to multiple classes with narrow constructors.

[13:11:45.0000] <Hixie>
what i really want to do is just have the language let me say "there's these various combinations of these methods, make it work"

[13:11:53.0000] <Hixie>
anyway

[13:15:13.0000] <TabAtkins>
Anything with multiple inheritance allows that.

[13:15:20.0000] <TabAtkins>
CLOS is an example.

[13:15:41.0000] <jgraham>
Yeah, but on the other hand you have to use multiple inheritance

[13:15:47.0000] <TabAtkins>
...and?

[13:15:55.0000] <jgraham>
It's no fun

[13:16:04.0000] <TabAtkins>
Multiple inheritance is just single inheritance with the possibility of name conflicts.

[13:16:28.0000] <jgraham>
And with a much harder job to track down what methods a class implements and where they come from

[13:18:56.0000] <Hixie>
multiple inheritance doesn't work for the case i described unless you do diamond inheritance, and then you introduce all kinds of crazy edge cases and dubious semantics.

[13:19:34.0000] <hober>
Dylan handled diamond inheritance rather well IIRC

[13:20:15.0000] <Ms2ger>
Who's Dylan?

[13:20:27.0000] <jgraham>
Famous singler

[13:20:32.0000] <jgraham>
*singer

[13:29:55.0000] <TabAtkins>
Hixie: Yes, I thought diamond inheritance was implied by "multiple inheritance".

[13:29:59.0000] <TabAtkins>
Anything else is too weak.

[13:48:49.0000] <paxcoder>
Hey, did anyone pick up the work on Undo history yet?

[13:53:28.0000] <jgraham>
paxcoder: No

[13:54:55.0000] <paxcoder>
jgraham, ah too bad, thanks.

[14:11:15.0000] <paxcoder>
jgraham, does anyone know what the requirements and the goals of the API are?


2014-03-08
[16:04:46.0000] <GPHemsley>
http://test.csswg.org/suites/css3-text/nightly-unstable/html/text-transform-fullwidth-001.htm uses HTML4 and doesn't seem to detect as the right encoding

[01:48:58.0000] <Ms2ger>
Sounds like we're getting another implementation of the HTML parser

[01:50:46.0000] <MikeSmith>
oh?

[01:51:03.0000] <MikeSmith>
Ms2ger: who's implementing it?

[01:51:15.0000] <Ms2ger>
Servo

[01:51:34.0000] <Ms2ger>
Turns out it's pretty different from Java/C++ after all

[01:52:06.0000] <Ms2ger>
s/it/Rust/

[01:54:04.0000] <MikeSmith>
I bet

[01:54:22.0000] <MikeSmith>
you imply somebody thought it wasn't?

[01:54:23.0000] <MikeSmith>
oh

[01:54:46.0000] <MikeSmith>
yeah, they wanted Henri to machine generate it from his Java sources

[01:55:34.0000] <Ms2ger>
Yeah

[09:18:39.0000] <zewt>
hooray z-index wars

[09:18:53.0000] <zewt>
"why isn't my z-index: 999 on top? oh, somebody has a z-index: 10000. guess i'll make mine z-index: 100000000"

[09:20:45.0000] <SamB>
zewt: where are you seeing such stuff?

[09:24:15.0000] <zewt>
at the moment? greasemonkeying a site and trying to show an overlay in-page (and having random bits of the page poking through)

[09:54:21.0000] <zewt>
hmm--is there no event corresponding to img.naturalWidth/naturalHeight becoming available?

[09:54:31.0000] <zewt>
no onprogress events get fired for images...

[10:16:47.0000] <qFox>
there's no event that fires between loading a script and executing it, right? or am i missing a readystatechange event that i might hook into?

[10:43:16.0000] <p4>
Hello! :-)

[12:46:36.0000] <qFox>
Ok. I wrote my findings on deferred docwrite at http://qfox.nl/weblog/314 though you may not want to spoil your Saturday with that ;)

[13:04:55.0000] <ondras>
qFox: there is a typo in the first example

[13:04:59.0000] <ondras>
qFox: console.log("c") is missing

[13:14:52.0000] <qFox>
thanks :)

[13:16:22.0000] <ondras>
qFox: the same applies to one of the later examples

[13:16:33.0000] <ondras>
the first one with "ACB" outcome

[13:16:44.0000] <qFox>
got it, thanks :)

[13:17:01.0000] <ondras>
qFox: I am currently also fighting document.write, although on a different level

[13:17:12.0000] <ondras>
qFox: I would like to provide a safe async version of document.write

[13:17:20.0000] <ondras>
(basically an impossible task)

[13:17:32.0000] <qFox>
nah. just write an external resource. done.

[13:17:35.0000] <qFox>
:p

[13:17:51.0000] <ondras>
:>


2014-03-09
[16:22:44.0000] <SamB>
... data URLs have fragment identifiers now?

[16:23:37.0000] <SamB>
/me is looking at the filter property on the logo img on http://www.whatwg.org/specs/web-forms/current-work/ ...

[16:24:18.0000] <Hixie>
"now"?

[16:27:46.0000] <qFox>
mmm in that doc, "Ian Hickson, Google, ian⊙hc" followed by "© Copyright 2004, 2005 Apple Computer, Inc., Mozilla Foundation, and Opera Software ASA.", looks kind of weird :)

[19:23:37.0000] <SamB>
/me wonders what the old browsers do with new tags ...

[19:58:17.0000] <Hixie>
SamB: depends on the element

[19:59:42.0000] <SamB>
Hixie: how would they know the difference between <foo> and <bar> (which is pretty much the way it would see elements with names it never heard of, isn't it?)

[20:00:03.0000] <Hixie>
some of the "new" elements aren't actually so new

[20:00:09.0000] <SamB>
ah

[20:00:43.0000] <Hixie>
and some of the "new" elements are void, which means that while they get treated the same as non-void in legacy UAs, there are bigger concerns for people using them now

[20:00:53.0000] <Hixie>
same with any elements which we've added to <head> or in other places

[20:00:57.0000] <Hixie>
like <template>

[20:01:23.0000] <SamB>
well, as it happens I was thinking of stuff like <article> and <header> and <footer>

[20:01:40.0000] <Hixie>
those all more or less get treated like <span> in legacy UAs

[20:03:19.0000] <SamB>
hmm, not quite as nice as if it were <div> but it doesn't sound terrible either

[20:04:16.0000] <SamB>
and it's good for things like <time> that it is the way it is, I guess

[20:29:38.0000] <Hixie>
it's kind of academic since we can't change what it is. it just is what it is.

[20:29:52.0000] <SamB>
true

[09:04:18.0000] <MikeSmith>
smola_: can you remind me where I can get a jar of v0.0.2 of galimatias?

[09:08:55.0000] <MikeSmith>
ah maven

[11:26:27.0000] <sicking>
Hixie: what's the use case for the inert attribute?

[14:01:37.0000] <Hixie>
sicking: makes it possible to "gray out" parts of the page and make them non-interactive. A lot of pages do that, e.g. as part of doing dialog-like things.

[14:02:37.0000] <sicking>
Hixie: i can't think of any cases where i've seen someone gray out a subsection of a page. The only thing I can think of is graying out everything exception a subsection of a page

[14:02:44.0000] <sicking>
Hixie: do you have examples?

[14:02:59.0000] <Hixie>
it's possible that all the practical use cases are just handled by <dialog>, true

[14:03:37.0000] <Hixie>
though iirc there were some use cases for inert="" without <dialog>

[14:03:56.0000] <Hixie>
i can look into it in more detail on monday if you like - file a bug? http://whatwg.org/newbug

[14:04:06.0000] <sicking>
Hixie: that's certainly my gut reaction (that <dialog> solves all use cases), but that's why I asked

[14:04:10.0000] <sicking>
i can file a bug

[14:05:11.0000] <Hixie>
thanks

[14:05:26.0000] <Hixie>
i'll look into it and if i can't find why it was added i'll remove the attribute

[14:05:41.0000] <Hixie>
(the attribute doesn't do much, it just hooks into the logic that exists anyway for dialogs)

[14:06:28.0000] <sicking>
implementation-wise I suspect that they are quite different

[14:06:33.0000] <sicking>
at least in Gecko

[14:10:02.0000] <Hixie>
really?

[14:10:03.0000] <Hixie>
why?

[14:10:16.0000] <Hixie>
i guess <dialog> can be implemented more efficiently?

[14:11:45.0000] <sicking>
first of all I think we could disable any checking if we don't have a <dialog> up

[14:12:09.0000] <sicking>
also, things like making find-as-you-type only search a subsection is easier than seach anything that isn't inert

[14:12:26.0000] <Hixie>
makes sense

[14:58:01.0000] <SamB>
so, the difference between inert= and disabled= was what again?

[14:58:21.0000] <SamB>
/me knows disabled doesn't DTRT, FYI

[15:16:59.0000] <NoodlesNZ>
Anyone here involved with the w3c github account? Seems a bunch of repos have disappeared over the weekend


2014-03-10
[19:37:36.0000] <MikeSmith>
smola_: java -cp /opt/workspace/checker/dependencies/galimatias-0.0.2.jar io.mola.galimatias.cli.CLI "foo" -> "Error: Missing scheme"

[19:38:02.0000] <MikeSmith>
smola_: why doesn't it just handle that as a relative URL?

[19:39:56.0000] <MikeSmith>
oh I guess it has not base URL in scope

[19:41:21.0000] <MikeSmith>
it seems like in the case of examining a URL in isolation, it shouldn't require a base URL

[19:55:21.0000] <MikeSmith>
hmm per the URL spec "foo bar" (with a base URL in scope) and "http://example.com/foo bar" are not parse errors?

[20:14:46.0000] <MikeSmith>
nm

[20:15:41.0000] <MikeSmith>
/me found io.mola.galimatias.StrictErrorHandler

[22:04:47.0000] <SamB>
hmm, do you have an actual motto and/or slogan?

[02:53:27.0000] <MikeSmith>
smola_: you around? when you have time I wanted to chat with you about handling of relative URLs in galimatias

[03:52:10.0000] <davve>
https://github.com/w3c/web-platform-tests mentions references to http://w3c-test.org/... under Publication but the links seem to be stale. Is there a replacement or something?

[03:52:41.0000] <davve>
I'm particulary interested in https://w3c-test.org/web-platform-tests/submissions/

[03:54:10.0000] <Ms2ger>
Why?

[03:54:22.0000] <Ms2ger>
https://w3c-test.org/web-platform-tests/submissions/ is only to aid reviews

[03:54:34.0000] <davve>
Yes, I have a review I'd like to demo.

[03:54:47.0000] <Ms2ger>
And your PR isn't on there?

[03:55:36.0000] <davve>
Hm, I can't connect to it.

[03:56:09.0000] <jgraham>
davve: w3c-test.org is migrating to wptserve

[03:56:18.0000] <Ms2ger>
Oh, that's now?

[03:56:21.0000] <jgraham>
http://w3c-test.org/submissions has some submissions

[03:57:18.0000] <davve>
Not mine though. (r/938)

[03:57:39.0000] <jgraham>
I think you will have to talk to denis/MikeSmith

[03:57:51.0000] <jgraham>
Try #testing on irc.w3.org

[03:58:07.0000] <davve>
Thanks.

[04:09:44.0000] <MikeSmith>
davve: yeah let's deal with it on #testing. though I'm away from my PC for the next two hours

[04:10:14.0000] <deniak>
davve, what's the number of your PR?

[04:11:01.0000] <deniak>
I got it

[04:11:44.0000] <deniak>
http://w3c-test.org/submissions/718/

[04:13:13.0000] <MikeSmith>
deniak: thanks. davve should probably be added so he can do wc-test:mirror himself next time. he works for opera

[04:16:14.0000] <darobin>
we can certainly add davve, though if we add him he normally won't need to do w3c-test:mirror since he'll be in the admins list :)

[04:17:44.0000] <darobin>
davve: your PR should be automatically mirrored from now on

[04:53:31.0000] <davve>
Thanks all!

[05:02:49.0000] <wirepair>
x-frame-options, CORS, x-xss-protection, strict-transport-security, public-key-pins, content-security-policy, x-content-type-options am i missing any other security related headers? (draft specs OK)

[05:05:30.0000] <wirepair>
er minus Authorization from that list

[06:38:01.0000] <MikeSmith>
does the URL spec really require that parsing "foo" results in a failure instead of a URL?

[06:39:21.0000] <SimonSapin>
MikeSmith: without a base URL, I think it does

[06:39:50.0000] <SimonSapin>
the idea being that the result of parsing is always an absolute URL

[06:40:10.0000] <MikeSmith>
SimonSapin: ok

[06:40:17.0000] <SimonSapin>
but maybe there is a use case for parsing relative URLs independently of a base, and change the spec

[06:41:11.0000] <MikeSmith>
I guess there's not, in that a relative URL has to have something to be relative against

[06:42:23.0000] <MikeSmith>
and I think in practice all non-absolute URLs are used in some context where they're relative to something

[06:42:34.0000] <MikeSmith>
otherwise they don't really mean anything

[06:45:37.0000] <SimonSapin>
I think they do, in the browsers

[06:46:44.0000] <SimonSapin>
In other contexts maybe not. Should an HTTP server use the URL parser to parse the request?

[06:48:22.0000] <MikeSmith>
true that's a different case

[07:36:39.0000] <SimonSapin>
actually in that case we just need to provide a separate thing to parse abs_path, not any relative URL http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2

[10:03:02.0000] <TabAtkins>
The only reason to parse something to a relative url is so that you can get some work done "eagerly", and then canonicalize it against a base url later when you actually want to use it.  Relative urls aren't actually useful for anything, as far as I can tell, by themselves.

[10:15:41.0000] <Hixie>
MikeSmith: without a base url, you can't know what "foo" means. Consider if the base URL is "http://example.com/" vs if it's "about:blank".

[10:19:20.0000] <Hixie>
sicking: looks like inert="" was added just so you could do <dialog> without <dialog>.

[10:19:30.0000] <Hixie>
sicking: i guess i'll drop it for now

[10:19:59.0000] <sicking>
Hixie: cool, thanks

[10:21:15.0000] <sicking>
Hixie: is there some way to use <dialog> such that you get a centered window on a desktop browser, but a fullscreen window on a small-screen device like mobile?

[10:21:29.0000] <Hixie>
hopefully that would be the default behaviour

[10:21:33.0000] <Hixie>
at lease for showModal()

[10:21:47.0000] <Hixie>
but i don't have per-device default CSS currently

[10:22:37.0000] <Hixie>
sicking: what would you have happen on a tablet?

[10:22:48.0000] <Hixie>
sicking: i.e. is it a dimension-based decision?

[10:22:56.0000] <Hixie>
sicking: what should happen if you make a desktop window narrower?

[10:23:06.0000] <TabAtkins>
Ugh, dropping a piece of <dialog> functionality is bad.  <dialog> is not the primitive, it's just a convenient package for several things all together.

[10:23:22.0000] <sicking>
Hixie: yes, i think it's a screen-size thing

[10:23:44.0000] <Hixie>
TabAtkins: having to implement inert="" as it was specced would be a performance drag

[10:24:01.0000] <sicking>
TabAtkins: the primitivies for <dialog> is already there. Just use CSS and JS

[10:24:03.0000] <Hixie>
TabAtkins: we can always introduce an API that just makes a subtree non-inert without <dialog> if there's a use case for that

[10:24:19.0000] <TabAtkins>
sicking: Except for the inertness of the rest of the document.

[10:24:30.0000] <Hixie>
sicking: k. i can add an @media rule to the default style sheet. What should the cut-off be?

[10:24:36.0000] <TabAtkins>
Hixie: That's fine, I just don't like excessively magical things.

[10:24:38.0000] <sicking>
Hixie: no idea

[10:24:58.0000] <Hixie>
TabAtkins: nothing magical here, it's all specced :-)

[10:25:04.0000] <sicking>
TabAtkins: true, the find-as-you-type inertness is magical still

[10:25:17.0000] <TabAtkins>
Hixie: You know that's not the definition of "magic" I'm using. ^_^

[10:25:18.0000] <sicking>
TabAtkins: the "supress mouse/touch events" isn't really magical though

[10:25:27.0000] <Hixie>
TabAtkins: not really sure what you mean by "magic" then

[10:26:10.0000] <Hixie>
sicking: (dialog also stops tab from moving focus into the inert section, fwiw)

[10:26:34.0000] <TabAtkins>
Probably best understood as an analogy to axioms.  You try to make your axioms as simple as possible, and build on top of them.  The axioms are ultimately unexplained and taken as Truth within your system, but everything else is explainable with them.

[10:26:55.0000] <sicking>
Hixie: true

[10:26:55.0000] <Hixie>
the spec explains it all.

[10:27:18.0000] <TabAtkins>
You're misinterpreting still.

[10:27:38.0000] <TabAtkins>
This is an analogy. ^_^

[10:27:40.0000] <Hixie>
yeah. i don't understand this whole "explain things" thing

[10:27:49.0000] <Hixie>
the more i try to understand it the less i get it

[10:27:55.0000] <Hixie>
i like the "use cases" approach much more

[10:27:56.0000] <TabAtkins>
Here, being "unexplained" means "being able to do something that you can't otherwise do".

[10:28:08.0000] <Hixie>
it's the "can't otherwise" part i have a problem with

[10:28:09.0000] <TabAtkins>
An unreproducible ability is an axiom.

[10:28:15.0000] <Hixie>
how do you "explain" the javascript "if" statement?

[10:28:25.0000] <TabAtkins>
You don't - "if" is a primitive.

[10:28:27.0000] <Hixie>
how do you "explain" the screen?

[10:28:43.0000] <Hixie>
how do you "explain" tab focus?

[10:28:53.0000] <TabAtkins>
Chill for a sec, you're jumping way ahead.

[10:28:57.0000] <Hixie>
we have zillions of primitives. Why are some "magic" and some "not"?

[10:29:08.0000] <Hixie>
i just don't get it

[10:29:13.0000] <Hixie>
it seems completely arbitary

[10:29:13.0000] <TabAtkins>
All primitives are magic, that's the point.  The two words are synomyms for this purpose.

[10:29:21.0000] <Hixie>
ok. Then magic is good?

[10:29:45.0000] <Hixie>
i think abstractions are good. they make platforms simpler to use.

[10:29:47.0000] <TabAtkins>
No.  Small magic is good.  Orthogonal magic is good.  Giant chunks of interrelated magic that solves a narrow use-case is bad.

[10:29:54.0000] <Hixie>
ok

[10:29:57.0000] <Hixie>
then what's the problem?

[10:30:01.0000] <TabAtkins>
At least, those giant chunks are bad *when they're irreducible*.

[10:30:02.0000] <Hixie>
dialog is hardly narrow.

[10:30:16.0000] <TabAtkins>
The things that dialog can do are useful elsewhere.

[10:30:27.0000] <Hixie>
like where? if there's a use case, then we can support them.

[10:30:39.0000] <TabAtkins>
We've learned *so many times* that when you design an irreducible system, you can only design in so much flexibility.

[10:31:02.0000] <TabAtkins>
As soon as an author needs to stretch it a little bit further than what you've designed in, they're screwed, and have to rebuild the entire thing from the ground up.

[10:31:15.0000] <Hixie>
we've learnt *so many times* that when you design without strictly looking at use cases, you get horribly unusable platforms

[10:31:21.0000] <TabAtkins>
The smaller the primitives are, the more reducible to base concepts everything is, the less levels you have to move down.

[10:31:29.0000] <TabAtkins>
Yes, these two facts are not in conflict.

[10:31:45.0000] <Hixie>
the smaller the primtives are, the harder it is to implement anything, and the less likely any specific use case is to be well supported.

[10:32:17.0000] <TabAtkins>
Which is why you find good use-cases, figure out how to solve them, then carve up the solution into separable pieces.

[10:32:29.0000] <Hixie>
ok

[10:32:31.0000] <Hixie>
that's what we did here

[10:32:36.0000] <Hixie>
at least, what we did once i dropped inert

[10:32:46.0000] <Hixie>
before that we had done it, then had inert hanging on the side for no good reason

[10:32:47.0000] <TabAtkins>
No, you're still left with <dialog> as the smallest piece.

[10:32:52.0000] <Hixie>
right

[10:32:55.0000] <TabAtkins>
Which is a pretty fucking big piece.

[10:33:08.0000] <Hixie>
we "find good use-cases, figure out how to solve them, then carve up the solution into separable pieces"

[10:33:26.0000] <TabAtkins>
You're stuck on step 2 - <dialog> is a good solution to a common use-case.

[10:33:29.0000] <Hixie>
and we end up with <dialog>, <form method=dialog>, the top layer, focus, etc.

[10:33:46.0000] <Hixie>
what concretely do you think should be done here?

[10:33:49.0000] <TabAtkins>
You haven't carved it up sufficiently yet.  Too much of the ability is still tied to the tagname.

[10:34:06.0000] <Hixie>
how do i know when it's carved up sufficiently?

[10:35:17.0000] <Hixie>
i think i've finally figured out why i dislike this "explain it" approach rather than the "use case" approach. The "explain it" approach feels like too much has to be done on faith. It isn't an actionable design strategy. With the use case approach, I collect the use cases, then I design, and I know I'm done when all the use cases are handled.

[10:35:18.0000] <TabAtkins>
It's hard to tell, but a good rule of thumb is when someone can, without heroic efforts, create something equivalent while using a <div>.

[10:35:38.0000] <Hixie>
so "if" isn't sufficiently carved up because you can't build it with a <div>?

[10:35:47.0000] <TabAtkins>
Dude, really?

[10:35:52.0000] <TabAtkins>
I'm clearly talking about HTML here.

[10:35:54.0000] <Hixie>
well then give me an actionable answer!

[10:35:58.0000] <Hixie>
not a language-specific one

[10:36:06.0000] <TabAtkins>
I gave you a rule-of-thumb.

[10:36:10.0000] <Hixie>
it sucks

[10:36:18.0000] <Hixie>
you can't do lang="" with <div> either

[10:36:30.0000] <Hixie>
is lang="" not sufficiently carved up?

[10:36:30.0000] <TabAtkins>
Sigh.

[10:36:45.0000] <Hixie>
right now i have a design philosophy that's easy to follow and works in all spaces.

[10:36:46.0000] <TabAtkins>
Let me be more specific.  My rule-of-thumb is talking about *HTML elements*.

[10:36:51.0000] <Hixie>
this "explain" thing doesn't.

[10:36:59.0000] <TabAtkins>
It doesn't work ina ll spaces, is the thing.

[10:37:13.0000] <Hixie>
so unless you have a way to define this "Explain" thing in generic terms that works for any language, i'm gonna stick with use cases.

[10:37:18.0000] <TabAtkins>
It works well sometimes, when your answer happens to land on something small and factorable.  It fails badly when your answer ends up being something large.

[10:37:33.0000] <Hixie>
what's the failure with <dialog>?

[10:37:37.0000] <TabAtkins>
Like AppCache, which works fine for the cases it was designed for, but can't be used outside of those, without severe distortion.

[10:38:08.0000] <Hixie>
yep, appcache is a good example of how you have to collect use cases. but "explain it" with the exact same use cases wouldn't have done any better.

[10:38:21.0000] <TabAtkins>
We haven't hit an obvious failure yet, but <dialog> is a bundle of seperable powers.  The moment someone is designing something and could use one of those powers, but doesn't need or want the rest of the <dialog> suite, that's a failure.

[10:38:23.0000] <sicking>
TabAtkins: fwiw, inert wasn't really the primitive that really let you build <dialog>. Since <dialog> made the parent chain of the <dialog> element inert too. It also seems like inert was a bit of a magical thing on its own

[10:38:42.0000] <TabAtkins>
Hixie: "Explain it" is what's driving Service Worker.

[10:38:48.0000] <TabAtkins>
sicking: Sure, not disputing that.

[10:38:54.0000] <Hixie>
TabAtkins: yeah, how well is that going again?

[10:39:00.0000] <TabAtkins>
Hixie: Well?

[10:39:08.0000] <Hixie>
where's the spec?

[10:39:13.0000] <TabAtkins>
Over in github?

[10:39:14.0000] <Hixie>
what other vendors are on board?

[10:39:29.0000] <Hixie>
TabAtkins: (and actually, service worker isn't just based on "explain it", it's based on additional use cases too.)

[10:40:18.0000] <TabAtkins>
Um, of course it's based on use-cases.  The point is that it's attempting to address those use-cases by designing smaller interlocking pieces, so that when someone has a *new* use-case, it's likely they can repurpose one of the existing pieces.

[10:40:38.0000] <TabAtkins>
Rather than having to reinvent everything themselves.

[10:41:07.0000] <Hixie>
there's no more chance that it'll fit new use cases than appcache will.

[10:41:11.0000] <Hixie>
appcache fits some new use cases fine.

[10:41:16.0000] <Hixie>
and others it fails utterly.

[10:41:41.0000] <TabAtkins>
That's an interesting hypothesis you have, but one that I'm very confident will be wrong.

[10:42:04.0000] <Hixie>
the "explain it" approach is basically "i'm going to make something that fits those use cases and happens to fit my preferred aesthetic for language design"

[10:42:53.0000] <TabAtkins>
"Big" solutions fail, because they're inflexible.  "Small" solutions suck, because they're too fiddly to work with.  You have to hit somewhere in the middle, and you have an unfortunate tendency to swerve toward the "big" side of things, and then not understand anyone's arguments for shrinking them down a bit.

[10:43:12.0000] <Hixie>
(there's not really any core primitives in service workers, btw, as far as i can tell. It's just as much a "Big" solution. It just happens to be a different one, one similar to something I suggest we extend appcache to do.)

[10:43:45.0000] <Hixie>
"big" is another word for "simple" in this context

[10:43:53.0000] <Hixie>
to which i say: guilty as charged :-)

[10:44:08.0000] <Hixie>
it's not "unfortuate", it's "the whole point"

[10:44:25.0000] <TabAtkins>
Simple for the things it was designed to do, yes.  And as soon as you step outside the circle that it's carved out, there's nothing underneath you.  You have to rebuild from a very low level.

[10:44:46.0000] <Hixie>
yeah... that's just nonsense.

[10:44:51.0000] <TabAtkins>
The ideal thing exists in layers, with small primitives at the bottom, larger things built out of those, and still larger things built out of *those*.

[10:45:02.0000] <Hixie>
you're describing <dialog> here.

[10:45:03.0000] <TabAtkins>
That way, if something isn't doing it for you, you can just skip one layer down and build back up.

[10:45:11.0000] <Hixie>
but you're not describing service workers.

[10:45:31.0000] <TabAtkins>
No, dialog is "give your tag a particular name, and it gains this suite of interconnected powers".

[10:45:35.0000] <TabAtkins>
That's a high-level object.

[10:45:42.0000] <Hixie>
<dialog> is layered on a focus model, a rendering model, a form submission model.

[10:45:55.0000] <Hixie>
what is service workers layered on?

[10:45:56.0000] <TabAtkins>
We're getting somewhere!

[10:46:05.0000] <Hixie>
i've been here the whole time dude

[10:46:30.0000] <TabAtkins>
All of those models exist in specs, and can't be easily interacted with by authors.  The hooks that <dialog> gets for interacting with them *are the types of things I'm talking about when I say "magic"*.

[10:47:00.0000] <Hixie>
if authors ever need to interact with them, then we can provide targetted small APIs to deal with those use cases.

[10:47:21.0000] <Hixie>
we don't randomly go about adding APIs that make the platform harder to extend, harder to implement, harder to refactor, etc, just in case

[10:47:31.0000] <Hixie>
that's irresponsible platform design

[10:47:47.0000] <TabAtkins>
The problem is that I know you're going to be resistant to adding those, because you'll point to <dialog> and say it can already be done.

[10:47:56.0000] <Hixie>
i am offended

[10:48:03.0000] <Hixie>
given a use case, i am trivial to convince

[10:48:21.0000] <TabAtkins>
And when you do propose some API, it wont' be something that'll work with <dialog> - you wont' be able to tweak <dialog>'s own interaction.

[10:48:23.0000] <Hixie>
what i resist, is adding unnecessary cruft

[10:48:34.0000] <Hixie>
what _are_ you talking about

[10:48:43.0000] <Hixie>
there's lots of APIs in HTML that tweak existing features.

[10:48:49.0000] <Hixie>
look at the forms API extensions!

[10:48:50.0000] <TabAtkins>
I'd be super happy to be convinced otherwise, but you've pushed against things like this for years. :/

[10:48:59.0000] <Hixie>
pushing against things is a spec writer's job

[10:49:21.0000] <Hixie>
if as a spec writer you don't push against things, you just end up with a messy spec with zillions of messy interconnected features.

[10:49:36.0000] <TabAtkins>
I'm aware of this.

[10:49:59.0000] <Hixie>
then why ":/" instead of ":-)" ?

[10:50:04.0000] <TabAtkins>
As much as I'm casting you into an unfair light, you're casting me in one too, implying that I just want to put a bunch of useless/messy stuff into a spec.

[10:50:20.0000] <Hixie>
i'm just arguing against what you're saying, not what you're doing

[10:51:05.0000] <TabAtkins>
Maybe me too?

[10:51:22.0000] <Hixie>
no, you're calling out things i've done by name.

[10:51:27.0000] <Hixie>
"you've pushed against things like this for years"

[10:51:40.0000] <Hixie>
"you'll point to <dialog> and say it can already be done"

[10:51:45.0000] <Hixie>
"you wont' be able to tweak <dialog>'s own interaction"

[10:51:55.0000] <Hixie>
"dialog is ..."

[10:51:59.0000] <TabAtkins>
You have done that.  You continue to claim that <dialog> is a reasonable primitive.

[10:52:11.0000] <Hixie>
"there's nothing underneath you"

[10:52:20.0000] <TabAtkins>
That one wasn't addressing you.

[10:52:29.0000] <TabAtkins>
It was the generic "you".

[10:53:10.0000] <Hixie>
it was in the context of me saying i designed simple APIs, and you said "Simple for the things it was designed to do, yes.  And as soon as you step outside the circle that it's carved out, there's nothing underneath you" (yes, the "you" is not me, it's the user of my APIs)

[10:53:30.0000] <TabAtkins>
Yes.

[10:53:41.0000] <Hixie>
(but saying there's nothing under my APIs for my users to fall back to seems like a specific statement of my actions, not my words)

[10:54:20.0000] <Hixie>
in what sense is <dialog> _not_ a reasonable primitive? My argument is "here are the use cases: [...]. <dialog> handles the use cases." Your argument is "<dialog> isn't <div>".

[10:54:59.0000] <TabAtkins>
More precisely, "<dialog> isn't <div>+ some CSS/JS abilities, wrapped up in a convenient package".

[10:55:20.0000] <TabAtkins>
<dialog> has magical positioning rules that only it gets to use, by virtue of having a particular tagname.

[10:55:34.0000] <TabAtkins>
<dialog> has magical form interaction that only it gets to use, by virtue of ahving a particular tagname.

[10:55:40.0000] <TabAtkins>
Focus interaction, etc.

[10:55:41.0000] <Hixie>
my point is that i don't understand what design philosophy is leading to age".

[10:55:45.0000] <Hixie>
uh

[10:56:07.0000] <Hixie>
my point is that i don't understand what design philosophy is leading to "<dialog> isn't <div>+ some CSS/JS abilities, wrapped up in a convenient package" being even considered a target.

[10:56:18.0000] <TabAtkins>
I just pointed it out.

[10:56:35.0000] <TabAtkins>
If I want to make an element that gets positioned in a way similar to <dialog>, but I dont' want the rest of <dialog>'s stuff, I can't do it.

[10:56:44.0000] <Hixie>
"<dialog> has magical positioning rules that only it gets to use, by virtue of having a particular tagname" is a statement of fact, but it doesn't have any explanation as to why that is bad.

[10:56:45.0000] <TabAtkins>
Same with form interaction, focus interaction, etc.

[10:56:51.0000] <Hixie>
why would you _want_ to do that?

[10:57:03.0000] <Hixie>
you can't make <em> out of <div> either, so what?

[10:57:28.0000] <TabAtkins>
Because we've never designed a positioning scheme in the past that hasn't been used for a remarkable variety of crazy things we never anticipated, and I don't expect <dialog>'s positioning rules to be any different.

[10:57:45.0000] <Hixie>
you mean the alignment scheme?

[10:57:55.0000] <TabAtkins>
Flip it around - why do *you* think that no one will ever design anything that wants to be positioned like <dialog> is?

[10:58:10.0000] <Hixie>
the alignment scheme is specifically designed to be reusable. I'm just waiting for hte CSSWG to take it over. There's even a note in the spec about it.

[10:58:34.0000] <Hixie>
i don't think "no one will ever design anything that wants to be positioned like <dialog> is". That's why I made the scheme reusable.

[10:59:14.0000] <TabAtkins>
I distinctly recall bug conversations in which you found it acceptable for the CSS positioning algorithms to have a branch where they ask if the thing being positioned is a <dialog>.

[10:59:33.0000] <Hixie>
i have a theory as to the difference in our approaches. I design things so that they have lots of extension points, but I don't expose them until they are needed. You think every extension point should be exposed immediately. Is that right?

[11:00:06.0000] <Hixie>
i'm not really sure what precise positioning logic you mean. There's at least three separate things going on with <dialog> and positioning/CSS.

[11:00:43.0000] <Hixie>
if you mean 'align-point', it's designed to be reusable. If you mean the top layer, it's designed to be reusable. The rest is mostly just glue.

[11:01:08.0000] <Hixie>
sorry, 'anchor-point', not 'align-point'.

[11:01:19.0000] <TabAtkins>
Not necessarily immediately, but definitely way sooner than you do.  Standards are slow enough that by the time you notice, address, and implement something that's "needed", it's already several years after the point someone first needed it.

[11:01:31.0000] <Hixie>
How do you know what to expose?

[11:02:06.0000] <TabAtkins>
Historical supposition, mostly.  And when you don't know, you seek out preliminary data and carve things up as soon as you've got a good enough idea.

[11:02:10.0000] <Hixie>
<dialog> has dozens of potential extension points, by design. Which should I expose, and more importantly, for each one, why that one and not another?

[11:02:27.0000] <TabAtkins>
I can't list those off the top of my head right now. ^_^

[11:02:50.0000] <Hixie>
i can. and i have already exposed those i think make sense, and for the rest, i'm waiting for author experience with <dialog>.

[11:03:14.0000] <Hixie>
just like with appcache, once it was shipped, i started designing alternatives (though alex took over, so i didn't bother going on my own path with it)

[11:03:19.0000] <TabAtkins>
But the couple of CSS bits are definitely one.  I recall you having to be convinced about them being separable things, rather than <dialog>-specific things.

[11:03:21.0000] <Hixie>
s/alternatives/extensions/

[11:03:33.0000] <Hixie>
you recall incorrectly.

[11:03:46.0000] <Hixie>
anchor-point and the top layer were both extensible from the start.

[11:04:09.0000] <Hixie>
s/designing/exposing/, i guess would be a better change.

[11:04:16.0000] <TabAtkins>
It's possible I misinterpreted the conversations, or that you had a more subtle point in the arguments than I could tell.

[11:04:37.0000] <Hixie>
(though i have to say, service workers really doesn't strike me as something that exposes extensions at all. It seems like exactly like everything you're arguing against.)

[11:05:27.0000] <Hixie>
i wonder if it's just that i'm not vocal about the extension points i design into my systems, so you somehow _think_ that they're designed in a hermetically inseparable way, rather than seeing them as groups of separable solutions.

[11:05:39.0000] <Hixie>
in which case, you really should just give me more credit. I _have_ been doing this for like 15 years now.

[11:05:50.0000] <TabAtkins>
Well, if you don't tell us anything, how are we supposed to know?

[11:05:55.0000] <Hixie>
read the spec? :-)

[11:06:08.0000] <TabAtkins>
And length of experience is hardly an argument for good design, as I'm sure you know. ^_^

[11:06:32.0000] <Hixie>
i'm not saying my length of experience is an argument for good design, just that it's an argument for not assuming bad design, and checking first instead. :-)

[11:08:57.0000] <TabAtkins>
I'm just asking for the same courtesty - I and some others on our team have been designing APIs for many years as well, and have a good intuition for when something is going to be useful as a separable ability, even if we don't have convincingly articulated use-cases yet.

[11:09:48.0000] <Hixie>
you're not "just asking" for that. You're asking for changes to specific things in the HTML spec. This all started from "Ugh, dropping a piece of <dialog> functionality is bad".

[11:09:56.0000] <Hixie>
I haven't said anything one way or the other about anything you've designed.

[11:10:19.0000] <Hixie>
because I _do_ extend you that courtesy.

[11:10:54.0000] <TabAtkins>
My reaction was that I know inertness is a usefully seperable ability, and "inert" was a way to get that.  It might not be a very *good* way to separate it, and that's fine, but having *some* way to do it is useful.

[11:11:08.0000] <TabAtkins>
And your reaction that there isn't a need for it is why I pushed back.

[11:11:37.0000] <Hixie>
you could definitely convey that in a more productive fashion than "ugh" and "trust me, I have been designing APIs for many years, and have a good intuition for when something is going to be useful as a separable ability"

[11:12:27.0000] <Hixie>
lots of people say "trust me, i need this". And the way that I know who to trust, is that I trust the ones who can articulate a convincing use case.

[11:12:58.0000] <TabAtkins>
Sorry that I made an off-the-cuff comment, and a statement that mirrored your own justification of your design skills. ^_^

[11:13:22.0000] <Hixie>
apology accepted :-)

[11:13:40.0000] <TabAtkins>
Nope, retracted now.

[11:14:46.0000] <Hixie>
now, since i _do_ trust your judgement, maybe you can help me with something I was going to ask sicking (but looks like we scared him off). Do you think, on mobile, we should make all <dialog>s full-screen, or just modal ones?

[11:15:16.0000] <TabAtkins>
Good question, and I'm not quite sure.

[11:15:44.0000] <TabAtkins>
I'd probably want to think about some specific examples of <dialog>s in a mobile environment.

[11:16:03.0000] <TabAtkins>
And how ones designed only for the desktop worked.

[11:16:24.0000] <Hixie>
the only native non-modal dialog i can think of in a mobile environment would be a speedometer app i have that overlays a window on top of other apps

[11:16:27.0000] <TabAtkins>
Actually, it might come down to how the positioning model works with the virtual viewport.

[11:18:35.0000] <jgraham>
Don't <select>s work kinda like non-fullsceen dialogs on mobile?

[11:18:36.0000] <Hixie>
does @media max-width give you the width of the fake viewport, on mobile? or of the device?

[11:18:53.0000] <Hixie>
the fake viewport, right?

[11:19:35.0000] <TabAtkins>
Which one are you calling fake?

[11:19:43.0000] <TabAtkins>
It gives you the viewport that the page lays out in.

[11:19:51.0000] <Hixie>
right

[11:19:53.0000] <TabAtkins>
The device-* queries are based on the screen.

[11:20:02.0000] <Hixie>
the "real" viewport is the one that is physically visible

[11:20:09.0000] <Hixie>
the one that changes during pinch-zoom

[11:20:36.0000] <wilhelm>
Fake, in that case.

[11:20:40.0000] <Hixie>
k

[11:20:42.0000] <Hixie>
thanks

[11:22:08.0000] <TabAtkins>
jgraham's argument is somewhat convincing - <dialog> *is* something like the <select> popup.

[11:22:32.0000] <TabAtkins>
On the other hand, we dont' know how to interact with it, unlike <select> with its very restricted content model.

[11:22:39.0000] <Hixie>
ok. filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=24991 on this, if anyone has any opinions.

[11:23:04.0000] <TabAtkins>
And making it full-screen means you can't use non-modal <dialog> for small, less-important things.

[11:23:32.0000] <TabAtkins>
So, since non-model dialogs can be relatively unimportant on desktop, we should allow them the same ability on mobile, and not fullscreen them.

[11:24:34.0000] <Hixie>
agreed

[12:35:11.0000] <esprehn>
Hixie: I ran into an issue of needing a toplayer API just this weekend. I want to show an info bar at the top of the screen outside the <dialog>, but the ::backdrop is always on top and <dialog> is positioned absolute so I can't get out without negative positioning which is awful. I need to be able to do document.toplayer.add(infobar) just like <dialog> does

[12:35:11.0000] <esprehn>
internally

[12:35:55.0000] <Hixie>
why isn't position:absolute inside the dialog enough?

[12:36:11.0000] <esprehn>
because the dialog is also position: absolute, so my position is relative to it

[12:36:20.0000] <Hixie>
position:fixed?

[12:36:30.0000] <esprehn>
I don't want fixed, it shouldn't scroll with the page

[12:36:40.0000] <Hixie>
oh you want it at the top of the page, no the screen?

[12:36:43.0000] <Hixie>
interesting

[12:36:44.0000] <esprehn>
yes

[12:36:54.0000] <esprehn>
Gmail does this, the little yellow bar with info.

[12:37:04.0000] <Hixie>
that goes under dialogs though doesn't it?

[12:37:13.0000] <esprehn>
not if the infobar is related to the dialog

[12:37:28.0000] <Hixie>
i thought the infobars related to the dialogs went inside the dialogs

[12:37:38.0000] <esprehn>
that's a design choice

[12:37:45.0000] <esprehn>
I should be able to put it at the top of the screen

[12:37:52.0000] <esprehn>
(document really)

[12:38:17.0000] <Hixie>
kinda weird design choice, but granted.

[12:38:24.0000] <Hixie>
file a bug on anne i guess

[12:38:29.0000] <esprehn>
:)

[12:39:47.0000] <Hixie>
(what i think would be the way to fix this would be to add a way in css to position:absolute but set the containing block to something else than the default)

[12:40:08.0000] <Hixie>
(that way you could put the butter bar info inside the dialog in question, but have it positioned properly)

[12:41:12.0000] <Hixie>
(so maybe file a bug on the CSS side rather than on the top layer)

[12:42:20.0000] <Domenic_>
+1 to that idea Hixie!

[12:53:28.0000] <TabAtkins>
Been on my radar for a while too - plan to do something about that in Positioning.

[13:26:08.0000] <esprehn>
That's not something we can easily do

[13:26:50.0000] <esprehn>
the containing block is the thing that handles your layout, we can't have you be in one place and do layout with another without a bunch of system changes

[13:27:30.0000] <esprehn>
it's much simpler to just add toplayer.add() which both explains <dialog> and gives you the same power as other platforms (ex. android lets you put whatever you want on top)

[13:28:35.0000] <esprehn>
(we can do the positioning thing someday perhaps too)

[13:29:45.0000] <Hixie>
author needs really have to come ahead of implementor needs :-)

[13:30:03.0000] <Hixie>
if we designed features around what would be easy to implement, authors would have a heck of a time using them

[13:30:29.0000] <Hixie>
the problem here isn't that you can't put things on top -- you can. If it's in the dialog, it's on top.

[13:30:33.0000] <Hixie>
it's that you can't position it.

[13:30:41.0000] <Hixie>
I'm sure Android lets you position things too :-)

[13:31:06.0000] <Hixie>
after all, how do we explain positioning if you can't set the containing block?

[14:45:22.0000] <zewt>
aaaand now google has made search results completely unreadable

[14:45:41.0000] <zewt>
it's pretty neat how google can single-handedly make the internet worse at a whim, and there's nothing anyone can do about it

[14:46:39.0000] <TabAtkins>
zewt: What's wrong with them today?

[14:48:02.0000] <esprehn>
Hixie: Breaking a fundamental invariant in layout that the thing that sizes you and the thing you're positioned relative to are the same is different than explaining what already happens

[14:48:23.0000] <esprehn>
We probably should have an onlayout and expose setRect() / setClip() etc. so you can implement a layout algorithm yourself

[14:48:44.0000] <TabAtkins>
+1 to something like that.

[14:49:18.0000] <esprehn>
and in terms of the author, I the author, want a single global info bar that's always on top. It shouldn't be inside the <dialog>.

[14:49:36.0000] <TabAtkins>
I think we need to (1) expose a simple constraint-based layout engine to CSS, and (2) expose some more fundamental layout/painting primitives to JS directly.  (1) will let you do a lot of customized layouts on your own pretty easily, and (2) is the escape hatch for when everything else fails.

[14:49:46.0000] <esprehn>
eah

[14:49:50.0000] <esprehn>
yeah

[14:50:47.0000] <zewt>
https://zewt.org/~glenn/ugly%20google.png

[14:51:13.0000] <zewt>
removed the underlining from the link in each result, so now it's a floaty, undelimited mess

[14:51:15.0000] <esprehn>
I'm not sure it would be too difficult to expose such a layout hook, we have to figure out how it interacts with the existing layout though since you have a cycle (script wants layout info, and layout algorithm wants script's layout rects)

[14:51:57.0000] <esprehn>
the CSS algorithms are designed to avoid the cycle, but they hooking your stuff that way would mean running script inside our C++ layout logic :/

[15:02:23.0000] <TabAtkins>
zewt: The link is the big blue text.  I'm not sure how that's unreadable.

[15:02:33.0000] <TabAtkins>
There's no other text that big or that blue.

[15:02:42.0000] <TabAtkins>
Also: first text below each gap.

[15:03:11.0000] <TabAtkins>
esprehn: Android addresses this - it gives you stale data during the before-paint callback.

[15:04:02.0000] <zewt>
i know, but that isn't a delimiter to my mental parser

[15:04:28.0000] <esprehn>
TabAtkins: interesting. The problem there is we don't definite when layout (or how much of it) we really do. So different browsers would give different stale results

[15:04:42.0000] <TabAtkins>
esprehn: Yeah, it'd require more parsing.

[15:04:46.0000] <TabAtkins>
I mean, more speccing.

[15:05:36.0000] <zewt>
exposing when layout happens sounds ... hairy

[15:06:15.0000] <zewt>
(but then I'm not that familiar with that part of the platform)

[15:06:26.0000] <TabAtkins>
It is somewhat hairy, but not intractable.

[15:06:41.0000] <TabAtkins>
And required, in the end, if we want to give authors real ability to design their own layout systems.

[15:06:59.0000] <TabAtkins>
Fun part is exposing it in a way that doesn't harm efforts to do parallel layout.

[15:07:23.0000] <Hixie>
esprehn: i wasn't suggesting uncoupling the sizing and positioned-relative-to aspects

[15:07:54.0000] <TabAtkins>
Yeah, literally breaking the element out of its container to attach it to something else, in the layout tree, is more tractable.

[15:07:56.0000] <zewt>
someone jog my memory--what's the entry point to get the currently-selected radio box (without iterating over inputs by hand)

[15:07:57.0000] <Hixie>
esprehn: i was suggesting just changing the containing block to something other than the weird one you're forced to have via 'position'

[15:08:19.0000] <esprehn>
ah okay, that seems reasonable

[15:15:15.0000] <zewt>
(am I imagining that that existed)

[15:15:42.0000] <Hixie>
wtf is the origin of a blob: url?

[15:16:08.0000] <Hixie>
the spec says "This scheme should have an origin policy and a lifetime stipulation, to allow safe access to binary data from web applications" but I can't find anywhere where they actually define it??


2014-03-11
[19:15:42.0000] <MikeSmith>
zewt: fwiw, about the problem you mentioned the other day about the validator reporting errors about URLs with non-default ports -- the underlying problem will be going away soon, because I'm switching the URL checker in the validator away from the old Jena IRI checker we were usin

[19:16:34.0000] <MikeSmith>
switching to using smola_'s Galimatias instead https://github.com/smola/galimatias

[19:16:45.0000] <MikeSmith>
which implementes the whatwg URL spec

[19:17:53.0000] <MikeSmith>
so if you have objections to any of the error messages after that, you can blame either smola_ for his code or AnneVK for his spec :-)

[00:20:03.0000] <MikeSmith>
is anybody other than anne familiar with https://raw.github.com/w3c/web-platform-tests/master/url/urltestdata.txt?

[00:20:31.0000] <MikeSmith>
oh that came from webkit

[01:23:58.0000] <MikeSmith>
hmm is the fragment part of a URL allowed to contain spaces?

[01:27:07.0000] <MikeSmith>
not allowed but it appears that the parsing algorithm results in the fragment of the parsed URL retain ingthe space as-is

[01:28:30.0000] <MikeSmith>
or maybe not, and smola_ parse has a bug[D[D[D[D[D[D[D[D[D[Dr

[01:45:11.0000] <MikeSmith>
ok, http://url.spec.whatwg.org/#fragment-state : "3. utf-8 percent encode c using the simple encode set, and append the result to url's fragment.", where "The simple encode set are all code points less than U+0020 (i.e. excluding U+0020) and all code points greater than U+007E.", which doesn't include U+0032 SPACE so that behavior is expected

[01:48:33.0000] <Ms2ger>
Nono

[01:48:45.0000] <Ms2ger>
Space is 32 decimal, so U+0020

[01:49:02.0000] <Ms2ger>
/me poofs

[01:49:07.0000] <MikeSmith>
oh

[01:49:35.0000] <MikeSmith>
weird then

[01:49:43.0000] <MikeSmith>
/me looks back at smola_ code

[02:20:12.0000] <MikeSmith>
nm

[03:16:16.0000] <jgraham>
MikeSmith: I think anne subsumed urltestdata.txt into his tests

[09:54:44.0000] <sicking>
abarth: ping

[09:54:52.0000] <abarth>
hi

[09:55:17.0000] <sicking>
abarth: saw your comment about deprecating "bigger" features in the showModalDialog thread

[09:55:27.0000] <sicking>
abarth: something we're unsurprisingly interested in too :)

[09:55:36.0000] <abarth>
that's mostly a reference to XSLT

[09:55:39.0000] <sicking>
abarth: by "bigger", do you mean "used more often"?

[09:55:47.0000] <sicking>
abarth: hah

[09:55:53.0000] <abarth>
the current approach we're pursuing for XSLT is to make a JS polyfill using asm.js

[09:55:55.0000] <sicking>
XSLT was my baby

[09:56:02.0000] <abarth>
oh, sorry :(

[09:56:11.0000] <sicking>
it's ok, she had a good run

[09:56:35.0000] <abarth>
in principle, the polyfill should work in Firefox too

[09:56:37.0000] <sicking>
"it seemed like a good idea at the time"

[09:56:46.0000] <abarth>
yeah, it made sense in the past when JavaScript was slow

[09:57:11.0000] <sicking>
yeah

[09:57:38.0000] <sicking>
why polyfill with asm.js? Would you compile all of libxml?

[09:57:41.0000] <abarth>
are there specific things you're interested in deprecating?  these sorts of thing are more likely to stick if we coordinate

[09:57:45.0000] <abarth>
yes

[09:57:50.0000] <abarth>
libxml + libxslt

[09:57:53.0000] <sicking>
wow!

[09:58:00.0000] <abarth>
then an extension to expose the API to web pages

[09:58:03.0000] <sicking>
why not just use the DOM?

[09:58:20.0000] <sicking>
and do a DOM->DOM transformation

[09:58:20.0000] <abarth>
I don't want to re-implement XSLT in JavaScript

[09:58:27.0000] <sicking>
ok

[09:58:29.0000] <abarth>
there are several people who've tried that

[09:58:36.0000] <abarth>
and their things sort of, kind of work

[09:58:48.0000] <abarth>
I also tried a Java one

[09:58:53.0000] <abarth>
compiled it to JS using GWT

[09:58:55.0000] <sicking>
disable-output-escaping is the big thing you'd lose

[09:59:01.0000] <abarth>
and that worked for about half the sites

[09:59:12.0000] <abarth>
but it had some bugs

[09:59:21.0000] <abarth>
i fixed some of the bugs, but there were more bugs

[09:59:30.0000] <abarth>
so I got sad and decided we needed to use the libxslt implementation

[09:59:36.0000] <sicking>
heh

[09:59:40.0000] <sicking>
makes sense

[10:00:19.0000] <sicking>
abarth: showModalDialog is definitely the big one that would be exiting to get rid of. XSLT is an interesting one too, though if we polyfill it's not really "getting rid of"

[10:00:40.0000] <abarth>
the idea is that we would put the polyfill in the extension gallery

[10:00:46.0000] <abarth>
and not ship it with the browser

[10:00:52.0000] <sicking>
(also, my heart does cry a little getting rid of XSLT)

[10:01:00.0000] <abarth>
if people wanted to use it, they could install the extension

[10:01:12.0000] <abarth>
also, people who were passionate about XSLT could fork our version and improve it

[10:01:17.0000] <jgraham>
Hmm

[10:01:22.0000] <sicking>
i see

[10:01:26.0000] <sicking>
interesting

[10:01:38.0000] <jgraham>
I thought there was enough of the public internet using XSLT that wasn't viable

[10:02:07.0000] <abarth>
i'm hopeful we can solve that problem by making the extension discoverable

[10:02:09.0000] <sicking>
jgraham: the numbers that chrome is collecting looks really low

[10:02:20.0000] <sicking>
jgraham: much lower than showmodaldialog

[10:02:32.0000] <jgraham>
A few years ago it was enough that Opera felt the need to implement it at least

[10:02:40.0000] <abarth>
e.g., an infobar that says "this page is using an old API, click here to install a compatibility shim"

[10:02:41.0000] <jgraham>
Maybe usage has declined

[10:02:48.0000] <sicking>
don't know

[10:02:59.0000] <sicking>
i'd definitely want to get Gecko specific stats

[10:03:01.0000] <sicking>
anyhow

[10:03:19.0000] <sicking>
abarth: there's a lot of interesting APIs on the Chrome usage stats page

[10:03:20.0000] <abarth>
http://www.chromestatus.com/metrics/feature/timeline/popularity/79

[10:03:25.0000] <abarth>
http://www.chromestatus.com/metrics/feature/timeline/popularity/78

[10:03:43.0000] <abarth>
the XSLT thing is a bit of a dream still.  we're still working on the technical part

[10:03:58.0000] <abarth>
sicking: those are just whatever people happened to add metrics for

[10:04:04.0000] <abarth>
sicking: I wouldn't read into it too much

[10:04:05.0000] <sicking>
abarth: <isindex> for example. And document.all()

[10:04:12.0000] <abarth>
we've removed <isindex>

[10:04:37.0000] <sicking>
abarth: oh? Also <input name=isindex>?

[10:05:02.0000] <abarth>
data:text/html,<input name=isindex>

[10:05:03.0000] <abarth>
yep

[10:06:17.0000] <sicking>
abarth: neat

[10:06:56.0000] <sicking>
abarth: when you say "don't read too much into it", does that mean you don't think the numbers are accurate?

[10:07:16.0000] <sicking>
abarth: or does it mean that there's many more things that might have low usage but you don't gather stats on it

[10:07:32.0000] <sicking>
I expected the latter, not the former

[10:08:08.0000] <abarth>
the latter

[10:08:12.0000] <sicking>
ok

[10:08:14.0000] <sicking>
cool

[10:08:58.0000] <sicking>
abarth: other things that I'd love to see stats on (we're building the same thing for gecko, so i can get it myself soon) is document.domain-setter and namespaced attributes (modulo the SVG ones)

[10:10:15.0000] <abarth>
yeah, those would be interesting

[10:11:34.0000] <sicking>
in part, getting rid of document.domain setting could allow a more narrow process infrastructure

[10:11:47.0000] <sicking>
i.e. process-per-origin rather than process-per-eTLD+1

[10:12:42.0000] <sicking>
process separation in particular is something we have to figure out to make webapps happen I think

[10:12:48.0000] <jgraham>
Pretty sure that document.domain setting is used every-f—ing-where

[10:13:23.0000] <abarth>
jgraham: it used to be used by facebook.  not sure if they still use it

[10:13:24.0000] <sicking>
yeah

[10:13:30.0000] <jgraham>
Also Yahoo

[10:17:35.0000] <sicking>
if it's just a couple of sites that use it a lot, then that gives some hope of getting rid of it

[10:17:49.0000] <sicking>
by evangelizing said sites

[10:18:02.0000] <jgraham>
That is a very optimistic view

[10:18:03.0000] <sicking>
or even by whitelisting them and removing it elsewhere, then evangelizing

[10:18:04.0000] <jgraham>
:)

[10:18:16.0000] <sicking>
i try to be :)

[10:19:30.0000] <sicking>
wow, SVG is used on over 9 percent of the web

[10:19:34.0000] <sicking>
that's amazing

[10:20:16.0000] <sicking>
hmm.. though "SVGSVGElementInDocument" says only 0.1%. I'm not sure what that means

[10:20:38.0000] <Ms2ger>
Maybe inline vs <img>?

[10:21:35.0000] <sicking>
ooh

[10:22:04.0000] <sicking>
both inline and <img> counts as "in document". But Modernizr (presumably feature detection) doesn't

[10:22:23.0000] <abarth>
sicking: yes, we've tried a couple times to quantify SVG usage

[10:22:37.0000] <abarth>
i think modernizr was causing tricking us a few times

[10:22:50.0000] <sicking>
so i guess pages use libraries that check if svg is supported, but then never actually use svg in any form?

[10:23:06.0000] <abarth>
yes

[10:23:11.0000] <sicking>
makes sense

[10:23:21.0000] <abarth>
we can check with pdr to be sure

[10:23:37.0000] <abarth>
we had the same trouble with webkitNotifications

[10:23:50.0000] <abarth>
where people would touch the property but not actually use it

[10:25:34.0000] <sicking>
abarth: i'm surprised that some of the properties see such big changes in use of such short period of time. Makes me worried about trusting the data

[10:25:49.0000] <sicking>
for example http://www.chromestatus.com/metrics/feature/timeline/popularity/211

[10:25:53.0000] <abarth>
which properties?

[10:26:05.0000] <sicking>
http://www.chromestatus.com/metrics/feature/timeline/popularity/211

[10:26:12.0000] <abarth>
that's probably the metric rolling out into the stable channel

[10:26:18.0000] <sicking>
aah

[10:26:33.0000] <abarth>
the graphics aren't well normalized

[10:26:59.0000] <abarth>
we have more detailed graphics internally that slice and dice by version and platform

[10:27:11.0000] <abarth>
if you have specific questions, I can dig into those for you

[10:28:07.0000] <sicking>
does those internal graphs allow you to get stats per website?

[10:28:19.0000] <sicking>
i.e. could you see if document.domain is only used by facebook/yahoo for example?

[10:28:35.0000] <sicking>
(i'm not really hoping that we can get rid of document.domain anytime soon)

[10:29:17.0000] <abarth>
no, we don't have per-site data

[10:29:43.0000] <abarth>
its aggregated by page views

[10:30:05.0000] <sicking>
ok

[10:31:00.0000] <sicking>
another thing that would be lovely to get rid of is GlobalScopePolluter. But I think we'd only have a chance to do so on non-quirks pages. Or in ES6 strict mode or some such

[10:32:55.0000] <Ms2ger>
Remember how we only supported it in quirks and Chrome's demos pushed us to enable it everywhere?

[10:35:01.0000] <Domenic_>
that was IE's demos right?

[10:35:21.0000] <sicking>
Ms2ger: Right, that was MS's demos. And it wasn't intentional I bet

[10:35:36.0000] <Domenic_>
it seemed intentional... trying to create something that failed in other browsers...

[10:36:02.0000] <sicking>
Domenic_: i don't think it was. They just didn't care about testing in other browsers

[10:36:21.0000] <sicking>
which arguably is equivalent to making it not work in other browsers

[10:36:35.0000] <sicking>
but I don't think they were intentional about breaking in other browsers

[10:36:54.0000] <sicking>
anyhow, that's just guessing

[10:37:45.0000] <Domenic_>
it was a sad time, i am still somewhat bitter

[10:37:54.0000] <sicking>
Ms2ger: and just because we couldn't get consensus to do something good about GlobalScopePolluter back then, doesn't mean that we can't get it now

[10:38:06.0000] <Ms2ger>
Oh, sure

[10:38:31.0000] <sicking>
Domenic_: actually, since I have you here...

[10:38:42.0000] <sicking>
Domenic_: I had one more thought on binary Streams

[10:39:38.0000] <Domenic_>
sicking: yes?

[10:39:39.0000] <sicking>
Domenic_: have you thought about performance around Streams that shuffle lots of data? In particular about how many times an implementation will have to copy data between buffers?

[10:39:49.0000] <Domenic_>
sicking: that is our primary concern :P

[10:40:12.0000] <Domenic_>
there should be no copying in any in-process use cases

[10:40:35.0000] <sicking>
Domenic_: I don't think that is possible in the current API

[10:40:51.0000] <Domenic_>
sicking: it is possible, as shown by the implementation that does so

[10:40:51.0000] <sicking>
hmm...

[10:41:57.0000] <Domenic_>
the buffers can be implemented as queues (i.e. with pointers)

[10:42:25.0000] <Domenic_>
so the location of the data chunks (e.g. ArrayBuffer backing stores) can stay the same all the time

[10:42:28.0000] <sicking>
Domenic_: So say that I have a Stream representing reading from a file

[10:43:30.0000] <sicking>
Domenic_: well.. if you just keep pointers to ArrayBuffers, then that means that you'll end up with an array of ArrayBuffers when the data is asked for. Not a single ArrayBuffer

[10:43:57.0000] <Domenic_>
yes

[10:44:00.0000] <Domenic_>
you ask for one chunk at a time

[10:44:15.0000] <Domenic_>
read() returns a single chunk, in whatever format---object, arraybuffer, string, etc.

[10:44:29.0000] <Domenic_>
(whatever the stream wants to give you)

[10:45:00.0000] <Domenic_>
if you want to concatenate them for some reason (you should never need to do this really...) then you'd do so yourself, and pay the cost.

[10:45:21.0000] <sicking>
Domenic_: So read() doesn't return all data read so far? It just returns the first buffer of all data read so far (API-wise that's the same, but implementation and performance-wise they are different)

[10:45:39.0000] <Domenic_>
while the stream is readable, read() returns the oldest unread chunk

[10:45:50.0000] <Domenic_>
you call read() repeatedly until the stream is no longer readable

[10:46:16.0000] <sicking>
Domenic_: so that's a "yes"?

[10:46:35.0000] <Domenic_>
sicking: I don't know what "first buffer" means, but "probably"?

[10:47:15.0000] <Domenic_>
sicking: https://github.com/whatwg/streams/blob/master/Examples.md#usage

[10:48:11.0000] <sicking>
Domenic_: well.. if I have a Stream that represents reading from a file. The way I'd probably implement that is by having some background thread allocate buffers, then issue a read() call into that buffer and then send the buffer to the JS thread. And then do that in a loop until I've read the whole file.

[10:48:29.0000] <sicking>
Domenic_: how fast I'd be sending buffers is a function of the OS IO performance at the time

[10:48:49.0000] <sicking>
Domenic_: i.e. i might be creating buffers faster than JS is consuming them

[10:48:51.0000] <Domenic_>
sicking: ok, by buffers here you mean "ArrayBuffers" (or their C++ backing stores), not "stream buffers". I guess that's confusing.

[10:49:10.0000] <sicking>
Domenic_: I mean their C++ backing stores

[10:49:23.0000] <sicking>
Domenic_: which is essentially the same as an ArrayBuffer yes

[10:49:25.0000] <Domenic_>
streams each have a single buffer containing the chunks available for reading, so that's the confusion

[10:49:35.0000] <Domenic_>
but ok makes sense

[10:50:06.0000] <sicking>
Domenic_: so when the call comes to read(), I might be sitting on a long list of ArrayBuffers

[10:50:21.0000] <Domenic_>
you shouldn't be, if you are respecting the backpressure

[10:51:02.0000] <Domenic_>
the stream asks the underlying source (i.e. your C++) for a certain number of bytes

[10:51:06.0000] <Domenic_>
up to a high water mark

[10:51:10.0000] <Domenic_>
e.g. 16 KB

[10:51:28.0000] <Domenic_>
so that is supposed to be the maximum stored in memory at any given time

[10:51:45.0000] <sicking>
Domenic_: We want to enable paralell IO and processing, no?

[10:51:46.0000] <Domenic_>
then it waits for the consumer to start draining that before asking you to fill back up to the HWM

[10:52:00.0000] <Domenic_>
sure, but the point of streams is to limit the memory used

[10:52:10.0000] <Domenic_>
so say 16 KB at a time

[10:52:18.0000] <sicking>
Domenic_: sure, I'm not saying that we'd consume unlimited amounts of space.

[10:52:22.0000] <Domenic_>
ok

[10:52:40.0000] <Hixie>
abarth: didn't realise you'd gotten rid of name=isindex, on the thread it was only the parser thing that people were talking about

[10:52:49.0000] <sicking>
Domenic_: but reading 16KB into a single buffer, and then stop IO until that buffer has been requested by the page doesn't seem good performance-wise

[10:53:01.0000] <abarth>
Hixie: maybe I don't understand what name=isindex does

[10:53:08.0000] <abarth>
Hixie: i think we only changed the parser

[10:53:09.0000] <Domenic_>
sicking: i was told the most natural (backing-)buffer size for most OSes was 1KB

[10:53:23.0000] <sicking>
abarth: no, looks like you got rod of more than the parser

[10:53:24.0000] <Hixie>
abarth: does look like name=isindex is gone too

[10:53:42.0000] <abarth>
ok, i didn't review the actual code change

[10:53:51.0000] <Domenic_>
sicking: well, what if you are uploading that to a server over a slow connection?

[10:53:54.0000] <sicking>
Domenic_: that might be true

[10:54:12.0000] <Domenic_>
sicking: maybe in browsers a higher default HWM makes sense. In node by default each stream should take only 16 KB max of memory

[10:54:29.0000] <Domenic_>
sicking: but maybe in browsers we anticipate fewer streams open at a given time so it should be higher

[10:54:35.0000] <sicking>
Domenic_: i agree that backpressure is an important topic. But it also seems important to support reading from a file at maximum speed, no?

[10:54:52.0000] <Domenic_>
sicking: you should read from the file exactly as fast as the consumer is able to process data

[10:55:05.0000] <sicking>
Domenic_: that's impossible

[10:55:08.0000] <Domenic_>
sicking: if the consumer processes data synchronously, then there will be no difference between a HWM of 16KB and a HWM of 0 KB

[10:55:17.0000] <Domenic_>
because in both cases the data never accumulates

[10:55:26.0000] <Domenic_>
so the limit is never hit

[10:55:35.0000] <Hixie>
abarth: hey while you're here, quick TLS question unrelated to HTML. If I have two servers who talk to each other over TLS, can the "client" authenticate with a server certificate to prove its host name to the "server"?

[10:55:49.0000] <sicking>
Domenic_: i'm still not understanding how you envison an implementation should work

[10:55:57.0000] <Domenic_>
sicking: exactly like the one we already have does work :)

[10:56:12.0000] <abarth>
Hixie: I think the client and server certs are different, but I'm not sure

[10:56:15.0000] <sicking>
Domenic_: then I don't understand how the one you already has does work

[10:56:31.0000] <Hixie>
abarth: ah, bummer

[10:56:35.0000] <Domenic_>
sicking: OK, I will find the source code for you

[10:56:51.0000] <abarth>
Hixie: you should check with someone who is sure though

[10:57:03.0000] <Hixie>
abarth: who would know better than you?

[10:57:07.0000] <abarth>
I'd ask agl

[10:57:10.0000] <sicking>
Domenic_: do you know how it works?

[10:57:14.0000] <Hixie>
abarth: k, thanks

[10:57:20.0000] <Domenic_>
sicking: yes, but it's easier to point to code

[10:57:32.0000] <Domenic_>
sicking: https://github.com/joyent/node/blob/master/lib/fs.js#L1518

[10:57:43.0000] <Domenic_>
when the consumer asks for data, you read it and give it back to them

[10:58:56.0000] <Domenic_>
_read is called by the stream implementation when the stream's buffer is below the HWM.

[10:59:07.0000] <sicking>
Domenic_: so you don't issue a filesystem read until someone calls read()?

[10:59:09.0000] <Domenic_>
so this ensures the stream's buffer is always full up to the HWM

[10:59:34.0000] <Domenic_>
sicking: you preemtively fill the buffer up to the HWM, but once the HWM is reached you stop filling until they call read() to make space in the buffer.

[11:00:05.0000] <sicking>
Domenic_: so when you issue a filesystem read, you issue it for the full HWM size?

[11:01:11.0000] <Domenic_>
sicking: you should issue it for the amount of space in the buffer. Initially that will be full HWM size; after a single read() it will be [full HWM size - size of returned chunk]

[11:01:30.0000] <Domenic_>
after five reads it will be [full HWM size - 5 * size of returned chunk]

[11:01:45.0000] <sicking>
Domenic_: why wouldn't you return the full chunk?

[11:02:02.0000] <sicking>
Domenic_: wait

[11:02:13.0000] <Domenic_>
let's say the buffer has room for 16 chunks before hitting HWM

[11:02:16.0000] <sicking>
Domenic_: before we go further, lets be more explicit about what buffers we are talking about

[11:02:24.0000] <Domenic_>
yes, i am talking about the stream's buffer

[11:02:33.0000] <Domenic_>
which has room for e.g. 16 KB of data

[11:02:35.0000] <sicking>
is a "buffer" a continuous piece of memory?

[11:02:47.0000] <Domenic_>
i use "chunk" for a 1 KB chunk of data from the file

[11:03:09.0000] <sicking>
is a "chunk" a continuous piece of memory?

[11:03:12.0000] <Domenic_>
yes

[11:03:24.0000] <sicking>
so chunk is continous but buffer is not?

[11:03:40.0000] <Domenic_>
the stream's buffer is just a queue

[11:03:40.0000] <sicking>
a buffer is an array of up to 16 chunks?

[11:03:44.0000] <Domenic_>
yeah

[11:03:46.0000] <Domenic_>
conceptually

[11:03:49.0000] <sicking>
ok, cool

[11:04:03.0000] <Domenic_>
in node it looks like they use a contiguous chunk as a "pool" for the stream's buffer

[11:04:57.0000] <sicking>
ok, so the first thing you do is that you issue a 1KB read to the OS to read into the first chunk

[11:05:07.0000] <sicking>
and then you do that in a loop until you have 16 chunks

[11:05:13.0000] <Domenic_>
if i am understanding my sources correctly, yes :)

[11:05:20.0000] <Domenic_>
these sources who tell me reading 1 KB at a time is best

[11:05:26.0000] <sicking>
meanwhile, if read() is called, you return the first chunk and the first chunk only

[11:06:04.0000] <Domenic_>
yup

[11:06:05.0000] <sicking>
?

[11:06:48.0000] <sicking>
ok, so that's what I was asking for earlier. No matter how many chunks (sorry, i used "buffer" earlier) has been read, you just return the first one

[11:07:07.0000] <Domenic_>
ok, heh, sorry it took us so long to get there

[11:07:13.0000] <Domenic_>
yeah the buffer thing is confusing...

[11:07:28.0000] <Domenic_>
it's about "buffering" data, so i'm hesitant to rename it to "queue," but that might be less confusing...

[11:08:09.0000] <sicking>
often times "memory buffer" is used to describe a continuous block of memory that has been allocated

[11:08:16.0000] <sicking>
which is what got me confused

[11:08:23.0000] <sicking>
obviously there are many other types of buffers though

[11:09:15.0000] <Domenic_>
i will open an issue, if other people agree that it is confusing i am happy to rename

[11:09:42.0000] <sicking>
i don't really care, just explaining the terminology i'm used to

[11:10:05.0000] <sicking>
if these terms appear in the spec, then it'd be good to explain them

[11:11:00.0000] <Domenic_>
For sure

[11:11:09.0000] <sicking>
ok, i'll have to chat up some other people that know IO performance better than me to know if this is a good strategy

[11:11:53.0000] <Domenic_>
sounds good! feel free to put them in touch or open issues or whatnot.

[11:12:35.0000] <sicking>
one thing that is not possible in the current API, but that I think might be too non-JSy to worry about, is being able to reuse ArrayBuffer objects

[11:12:44.0000] <sicking>
so you end up with a bunch of churn

[11:12:53.0000] <sicking>
allocator churn

[11:12:58.0000] <sicking>
but i suspect that's fine

[11:13:33.0000] <sicking>
s/ArrayBuffer objects/Arraybuffer backing store objects/

[11:13:39.0000] <Domenic_>
hmm yeah i had requests for that from a node person actually

[11:13:45.0000] <Domenic_>
.readInto(ab)

[11:14:38.0000] <sicking>
the tricky part is that you don't want to allow the page to have a reference to an ArrayBuffer that you are writing into on a background thread

[11:14:57.0000] <sicking>
so you have to mess around with transferring ArrayBuffers back and forth

[11:15:03.0000] <sicking>
which is messy

[11:15:34.0000] <Domenic_>
ah yeah makes sense

[11:15:40.0000] <Domenic_>
cf. web audio api?

[11:15:48.0000] <sicking>
But the API might be as simple as Stream.releaseBuffer(ab) after you're done with it

[11:16:21.0000] <sicking>
i haven't looked at webaudio

[11:16:28.0000] <sicking>
not sure what they do

[11:17:03.0000] <Domenic_>
well there was a whole issue with data races

[11:17:16.0000] <Domenic_>
which iirc was exactly that "writing into it on a background thread" thing

[11:17:33.0000] <sicking>
ah, right

[11:18:01.0000] <sicking>
ok, gotta head into office

[11:18:26.0000] <sicking>
i'll try to get some perf guys to look at this. Not sure if i'll be able to, but i'll try

[11:19:19.0000] <Domenic_>
awesome, thank you

[11:19:56.0000] <sicking>
Domenic_: oooh, now i see what I was looking for. Is it expected that readBytes() will cause memory copying?

[11:20:09.0000] <sicking>
if so, that makes sense

[11:22:28.0000] <Domenic_>
sicking: er, i think you are looking at the wrong spec?

[11:22:44.0000] <Domenic_>
sicking: https://github.com/whatwg/streams

[11:43:10.0000] <sicking>
Domenic_: oooh! This looks so much better!

[11:43:24.0000] <Domenic_>
sicking: ahaha yay! :D

[11:44:03.0000] <sicking>
Domenic_: does read() return a promise?

[11:44:12.0000] <Domenic_>
sicking: nope, it's synchronous

[11:44:38.0000] <sicking>
Domenic_: how do you know if you can read from it?

[11:44:49.0000] <sicking>
.state?

[11:44:56.0000] <Domenic_>
yeah exactly, state === "readable"

[11:45:11.0000] <sicking>
do you got a callback when state changes?

[11:45:18.0000] <sicking>
oh, wait()?

[11:45:20.0000] <Domenic_>
yeah, exactly

[11:45:49.0000] <sicking>
so you do while(state === readable) process(read()) ?

[11:45:53.0000] <Domenic_>
i bet with this in hand the examples at https://github.com/whatwg/streams/blob/master/Examples.md#readable-streams make more sense

[11:46:25.0000] <sicking>
man, i'm so happy all the encoding stuff is dropped

[11:46:31.0000] <Domenic_>
hahaha me too man

[11:46:39.0000] <sicking>
i wasn't looking forward to having that argument :)

[11:52:03.0000] <sicking>
Domenic_: so it feels like you need a lot of boilerplate to implement streamToConsole. I.e. something that essentially pipes the stream into a process() function

[11:54:38.0000] <Domenic_>
sicking: somewhat agreed. the idea is it's a lower-level primitive and there will be lots of user-land stream-utils packages, or writable streams

[11:54:55.0000] <Domenic_>
interestingly in node it's not popular to simply stream something to a process function

[11:55:03.0000] <Domenic_>
normally it would be a writable or transform stream

[11:55:27.0000] <sicking>
Domenic_: interesting

[11:56:27.0000] <sicking>
Domenic_: a TransformStream which pipes all data through a mapping function might address the use cases

[11:57:00.0000] <Domenic_>
yeah, I think it's part of the non-minimal subset to have easy ways of creating properly-behaved transform streams.

[11:57:39.0000] <sicking>
Domenic_: though honesly, the cases I've needed the most are simply piping the data to disk or to a network connection

[11:57:46.0000] <sicking>
so no processing needed

[11:57:47.0000] <Domenic_>
right, in that case, writable streams :)

[11:57:53.0000] <sicking>
right

[11:58:22.0000] <sicking>
or simply allowing XHR.send() to take a ReadableStream

[12:00:26.0000] <sicking>
Domenic_: any thoughts on putBack(ab)? It's something that we've somewhat needed internally in Gecko

[12:00:37.0000] <Domenic_>
sicking: I am almost sure it is needed actually.

[12:00:54.0000] <Domenic_>
i was trying to get away with not needing it but it seems likely.

[12:02:04.0000] <Domenic_>
https://github.com/whatwg/streams/issues/3 the minimalists are arguing "do it yourself" but I think giving you the ability to push onto the stream's buffer, instead of maintaining your own, is much better.

[12:02:14.0000] <Domenic_>
More unclear is https://github.com/whatwg/streams/issues/74

[12:02:19.0000] <sicking>
the case we had was wanting to peek at the beginning of a stream and decide what to do with it (display or save-to-disk). Once we had determined that we wanted to do either, it was really annoying to have to deal with sending a <data we've pulled out of stream to peek, remaining stream> tuple to the chosen consumer, rather than just a simple stream

[12:02:20.0000] <Domenic_>
(which is related)

[12:02:44.0000] <sicking>
yeah, "do it yourself" has performance implications

[12:02:55.0000] <Domenic_>
i wonder about putBack vs. peek

[12:03:02.0000] <sicking>
that i don't know though

[12:03:09.0000] <sicking>
either might work

[12:03:40.0000] <sicking>
the tricky thing with peek is how to deal with a consumer that doesn't know how many bytes it needs to peek

[12:04:04.0000] <sicking>
you don't want it to have to do peek(10), then if that wasn't enough data peek(20) etc

[12:04:30.0000] <sicking>
but how do you create an API that allows you to "peek a little more, on top of what i previously peeked"

[12:04:37.0000] <Domenic_>
hmm yeah

[12:04:40.0000] <sicking>
potentially you could use a tee

[12:04:41.0000] <Domenic_>
is putBack better in that regard?

[12:05:14.0000] <sicking>
putback would let you do read() until you've got enough data, then do a putBack(array-of-all-data-I-read)

[12:05:31.0000] <Domenic_>
ah ok i see

[12:05:46.0000] <Domenic_>
that's a fairly solid argument

[12:06:06.0000] <sicking>
but potentially you could also do a tee, and then read from the tee

[12:06:13.0000] <sicking>
that leaves the original stream unchanged

[12:06:22.0000] <sicking>
i.e. you'd implement peek by tee-ing the stream

[12:06:56.0000] <sicking>
a tee might have performance overhead though. Depending on how it handles chunks and buffers

[12:07:38.0000] <sicking>
arbuably, read-then-putback is also going to affect buffers to some extent

[12:08:06.0000] <Domenic_>
i am tempted to avoid tees if possible; they seem annoying and complex

[12:08:17.0000] <Domenic_>
(but of course necessary in some cases)

[12:08:38.0000] <sicking>
yeah

[12:09:26.0000] <sicking>
btw, if you go the putBack route, then it'd be great if you could transfer buffers into the stream when putting them back. Otherwise the stream has to copy them

[12:09:48.0000] <Domenic_>
why would it have to copy them?

[12:10:06.0000] <Domenic_>
it wouldn't need to modify them after they're put back

[12:10:13.0000] <Domenic_>
it would just keep it around for the next read() call

[12:10:27.0000] <sicking>
since ArrayBuffers are mutable. And you don't want whoever putBack the data to be able to mutate the data once it's semantically "in the stream"

[12:10:38.0000] <Domenic_>
mmm :-/

[12:11:00.0000] <Domenic_>
well but streams are not just ArrayBuffers. This is a general issue with any mutable objects you put back in the stream

[12:11:13.0000] <sicking>
yup

[12:11:18.0000] <sicking>
this is also an issue for peek

[12:11:47.0000] <sicking>
you don't want to enable someone to peek the start of the stream and then mutate the contents of the un-read() data

[12:12:26.0000] <sicking>
it's arguably (though yehuda might not agree) somewhat different with ArrayBuffers

[12:12:40.0000] <sicking>
I don't think of a Stream as a objectstream of ArrayBuffer objects

[12:12:44.0000] <sicking>
I think of it as a stream of bytes

[12:12:58.0000] <sicking>
it seems surprising that you could mutate those bytes inside the stream

[12:13:14.0000] <sicking>
with a stream of objects you can't mutate which objects the stream if containing

[12:13:22.0000] <sicking>
but you can mutate the objects

[12:13:24.0000] <Domenic_>
it seems pretty awkward to think of it as a stream of bytes

[12:13:35.0000] <sicking>
really?

[12:13:43.0000] <Domenic_>
read() would then return a single byte

[12:13:54.0000] <sicking>
well, we do chunks for performance

[12:14:09.0000] <sicking>
but really what we're semantically representing is a stream of bytes

[12:14:22.0000] <Domenic_>
but that's not what the API is communicating :-S

[12:14:53.0000] <Domenic_>
besides, why bytes and not words or bits or disk sectors? :P

[12:16:11.0000] <sicking>
well.. there's the whole platform endianness debacle

[12:16:32.0000] <sicking>
but if we agree that it's unfortunate that ArrayBufferViews expose CPU endianness

[12:16:32.0000] <sicking>
then an ArrayBuffer contains bytes and not words

[12:16:49.0000] <sicking>
but yes, you can think of it as a stream of bits too

[12:16:55.0000] <sicking>
a stream of bits and a stream of bytes seem equivalent

[12:17:28.0000] <Domenic_>
i guess i am more concerned about how consumers interact with the API than what is semantically being represented

[12:18:00.0000] <sicking>
sure, but it'll affect API behavior

[12:19:18.0000] <sicking>
if you create a WritableStream/ReadableStream pair (can you?), would you expect that object identity of ArrayBuffer objects would remain?

[12:20:21.0000] <Domenic_>
what do you mean by a pair in this case?

[12:21:03.0000] <sicking>
can you create a WriableStream/ReadableStream pair such that anything that's written into the WriableStream appears in the ReadableStream?

[12:21:17.0000] <Domenic_>
sure, that's an identity transform stream

[12:22:39.0000] <sicking>
do you have to write JS code which pumps data between the two? Or can you create a pair of platform objects where that happens automatically?

[12:24:39.0000] <Domenic_>
you could create platform objects implement in JS... but the JS code to pump data between the two would just be something like `new TransformStream(function (in) { return this.addToOutput(in); })` (non-final API)

[12:26:15.0000] <sicking>
is a TransformStream both a readablestream and a writablestream in one object?

[12:26:32.0000] <Domenic_>
it is an { input: WritableStream, output: WritableStream } object literal

[12:26:57.0000] <Domenic_>
not nominally type-checked, of course

[12:27:18.0000] <sicking>
do you mean { input: WritableStream, output: ReadableStream }?

[12:27:39.0000] <Domenic_>
yes, sorry

[12:28:00.0000] <sicking>
wait, i stil don't get it. What does the 'this' map to in your code example?

[12:28:07.0000] <sicking>
not that object literal obviously

[12:29:14.0000] <Domenic_>
nah, it was a perhaps overly-simplified example. the idea is that the TransformStream helper produces such objects. Perhaps a better constructor would be `new SyncTransformStream(function (in) { return in; })` or `new AsyncTransformStream(function (in, push, done) { push(in); push(in); done(); })` or something

[12:29:25.0000] <Domenic_>
this area is largely under-developed

[12:29:57.0000] <Domenic_>
as long as SyncTransformStream and AsyncTransformStream objects have { input, output } properties everything will work.

[12:30:41.0000] <sicking>
ok, let me ask the question this way then. If I have a ReadableStream, that I got from say XHR, can I pass that to Worker?

[12:31:01.0000] <Domenic_>
that goes outside my area of expertise... doesn't that have to be transferrable then?

[12:31:39.0000] <sicking>
transferrable or structured-clonable. For streams transferrable is indeed what you likely want

[12:32:08.0000] <Domenic_>
i assume that would have to apply to all objects it holds a reference too

[12:32:12.0000] <sicking>
otherwise you have to tee the stream

[12:32:18.0000] <Domenic_>
which would include arbitrary objects in general

[12:32:23.0000] <Domenic_>
since you can create a stream of arbitrary objects

[12:32:35.0000] <sicking>
this is a stream i got from an XHR

[12:32:48.0000] <sicking>
...if that makes a difference

[12:33:07.0000] <Domenic_>
ok

[12:33:17.0000] <sicking>
so can you transfer that to a worker?

[12:33:19.0000] <Domenic_>
so i think i see what you're getting at

[12:33:31.0000] <Domenic_>
you would like certain platform-created streams to only hold references to transferable objects

[12:33:35.0000] <Domenic_>
so that they could be tranfserred to workers

[12:33:38.0000] <Domenic_>
but putBack would defeat this

[12:33:48.0000] <sicking>
not neccesarily

[12:34:09.0000] <sicking>
and i don't think i just want it for "certain platform created streams"

[12:34:33.0000] <Domenic_>
well user-created streams can be streams of functions, which IIRC are not transferable

[12:34:45.0000] <Domenic_>
or streams where most of the time it's a string and then every 1000th element is a function

[12:34:52.0000] <sicking>
right

[12:35:32.0000] <sicking>
so my qustion remains. Do you think you should be able to take a stream that comes from an XHR and pass that to a worker?

[12:36:04.0000] <sicking>
*I* want that to be possible, but I realize that might not be something that everyone thinks is a priority

[12:36:19.0000] <Domenic_>
i don't know enough about use cases to answer decisively. my gut is that the worker itself should have input and output streams you can pipe through

[12:36:53.0000] <Domenic_>
it would be nice if piping arraybuffers or other transferables into a worker did a transfer instead of a copy

[12:37:09.0000] <sicking>
similarly, should you be able to take a ReadableStream and write it to disk using the filesystem API?

[12:37:32.0000] <Domenic_>
i feel like these are all use cases streams were meant to obsolete

[12:37:42.0000] <Domenic_>
you pipe a readable stream to the disk

[12:37:50.0000] <Domenic_>
you don't store the stream itself on the disk

[12:38:01.0000] <Domenic_>
you pipe a stream to a web worker

[12:38:06.0000] <sicking>
sure, s/write/pipe/

[12:38:11.0000] <Domenic_>
you don't transfer  the stream itself to the web worker

[12:38:11.0000] <Domenic_>
ok

[12:38:17.0000] <Domenic_>
but in that case the disk is a writable stream

[12:38:23.0000] <Domenic_>
and you're just piping the readable stream to it

[12:38:28.0000] <Domenic_>
which operates through the well-known public API

[12:38:35.0000] <sicking>
well

[12:39:10.0000] <sicking>
if I get a readable stream from an XHR, and then pipe that to a writablestream that goes to disk, I don't think we want to hit the main thread for each chunk of data, right?

[12:39:21.0000] <Domenic_>
fair, but that's an optimization

[12:39:47.0000] <Domenic_>
you can e.g. only make that optimization if nobody's done `diskStream.write = function (chunk) { console.log(chunk); oldDiskStreamWrite.apply(this, arguments); }`

[12:39:56.0000] <sicking>
is that an optimization that's possible if we always go through the public API?

[12:40:06.0000] <Domenic_>
the optimization would be skipping the public API where possible

[12:40:48.0000] <sicking>
i'm not sure if that's a good idea. I've never thought about it that way

[12:41:02.0000] <sicking>
seems like it potentially is a big performance hit

[12:41:07.0000] <Domenic_>
hmm. from what i understand many JS engine optimizations work that way

[12:41:41.0000] <sicking>
what happens if no-one had touched diskStream.write, but after 2 minutes they suddenly set diskStream.write?

[12:41:44.0000] <Domenic_>
like if you do Object.defineProperty(Array.prototype, "0", { set: function () { console.log("haha!"); }) you skip the fast-path on setting array elements in memory

[12:41:50.0000] <Domenic_>
hmm

[12:41:54.0000] <sicking>
should we detect that and reroute the traffic at that point?

[12:42:04.0000] <Domenic_>
we could spec pipe to cache the value of the write function at the time the pipe initiates

[12:42:12.0000] <sicking>
it's not impossible. But it likely will mean we won't do it for a long time

[12:43:29.0000] <sicking>
i'm not sure what the right fix is. But I think it needs to be relatively easily possible for an implementation to not have to go through any thread that the data has been piped through at some point

[12:43:38.0000] <Domenic_>
i agree that should be a high high priority

[12:43:46.0000] <Domenic_>
probably the highest

[12:44:12.0000] <sicking>
cool

[12:45:02.0000] <sicking>
the way we do this in the DOM is that we don't operate through the public API at all times. Rather we usually operate through internal operations. Which I realize might break use cases that you have in mind

[12:45:22.0000] <sicking>
so not saying this as a recommendation, but rather as a "that's how we solve it elsewhere"

[12:46:19.0000] <sicking>
caching write (and any function it calls, if any?) might actually work too

[12:48:10.0000] <sicking>
and I do think that we need to be able to hand off consuming a stream from one thread to another. If that means "pass to worker" or "pipe to worker" I'm not sure. But I don't know what "pipe to worker" would look like.

[12:48:11.0000] <Domenic_>
yeah, it is generally better to have fewer internal ops if possible, to allow users the same level of power and access as the platform. So if we can do that without hurting perf that's ideal. But obviously a large part of the point of streams is perf, so we have to be extra careful not to hurt ourselves in that way.

[12:48:30.0000] <Domenic_>
I am hoping pipe to worker looks like `myStream.pipeTo(myWorker.input)`

[12:48:40.0000] <sicking>
what's myworker.input?

[12:48:55.0000] <Domenic_>
a WritableStream

[12:49:12.0000] <sicking>
where does the data go?

[12:49:21.0000] <Domenic_>
which probably manifests as self....something... inside the worker

[12:49:33.0000] <Domenic_>
where ...something... is a readable stream

[12:49:49.0000] <sicking>
so you can only pipe one stream to a worker ever?

[12:49:50.0000] <Domenic_>
node has this in its child process API, but granted that's processes, not heavyweight threads

[12:49:57.0000] <Domenic_>
nah, you can always multiplex

[12:50:05.0000] <Domenic_>
or we could do messageport-style ports

[12:50:57.0000] <Domenic_>
MessageChannel I mean. I suppose the fact that MessageChannel exists in the face of postMessage implies people want easy multiplexing

[12:51:33.0000] <sicking>
yeah, Gecko's lack of MessageChannel has been a thorn in yehuda's side

[12:54:07.0000] <sicking>
so would each messageport have a .input (ReadableStream) and a .output (WritableStream) property?

[12:56:18.0000] <Domenic_>
other way around, you write to inputs and and read from outputs, but yes

[12:56:32.0000] <hober>
"thorn in yehuda's side" was the name of *whose* high school band?

[12:56:42.0000] <Ms2ger>
Mine

[12:56:49.0000] <sicking>
hober: haha

[12:58:15.0000] <sicking>
Domenic_: seems like a somewhat clunky way to get a stream transferred to a worker. You first have to create a message channel, then transfer one of the ports to the worker, then pipe your readablestream into the other port's input

[13:00:04.0000] <Domenic_>
sicking: is that how message channels work now? wow that is clunky

[13:00:39.0000] <Domenic_>
better APIs welcome certainly

[13:01:05.0000] <sicking>
Domenic_: only when you want to establish a new channel. If you already have a channel open then you can just postMessage

[13:01:55.0000] <sicking>
Domenic_: but if you have a channel open and you want to tell it "here, process this stream", then you need a way to do that. For other things we just transfer them

[13:02:31.0000] <sicking>
Domenic_: but if you can't transfer streams then a simple postMessage doesn't work

[13:02:36.0000] <Domenic_>
ok, but if you already have the channel open, then it's just stream.pipeTo(channel.input). Seems similar effort to postMessage

[13:03:33.0000] <sicking>
Domenic_: but you can only do that once. If you later want to say "here, process this stream too" then you'd have to multiplex over the same channel

[13:03:41.0000] <sicking>
err.. over the same stream

[13:03:47.0000] <Domenic_>
ah, i see

[13:04:08.0000] <Domenic_>
i guess i am assuming you would want multiple streams just as often as you would want multiple channels

[13:04:13.0000] <Domenic_>
what do people open multiple channels for anyway?

[13:07:26.0000] <sicking>
Domenic_: i'm not entirely sure. Ask Yehuda.

[13:07:36.0000] <Domenic_>
sicking: will do!

[13:07:44.0000] <sicking>
Domenic_: but here it's more "multiple work items" rather than "multiple channels"

[13:07:55.0000] <sicking>
i.e. a stream can represent a work item

[13:08:03.0000] <sicking>
anyhow, gotta join a call, sorry

[13:09:38.0000] <Domenic_>
np, i should probably do my day job

[13:16:18.0000] <Rahul21>
hello everyone

[13:17:01.0000] <Rahul21>
is it possible to customize the <audio> tag, to set cue points in the seekbar?

[13:18:27.0000] <TabAtkins>
Nope.

[13:18:51.0000] <Rahul21>
TabAtkins: http://imgur.com/onhyHYR

[13:19:14.0000] <Rahul21>
TabAtkins: something like that, any alternatives to do it?

[13:19:23.0000] <TabAtkins>
Not with the <audio> tag, no.

[13:35:50.0000] <SimonSapin>
Rahul21: what you can do is have an invisible <audio> element (without controls) and implement your own controls based on the JS API

[13:36:02.0000] <SimonSapin>
… maybe

[13:36:12.0000] <SimonSapin>
(I haven’t actually tried anything like this)

[13:38:33.0000] <Rahul21>
SimonSapin: any demos or links would be very helpful

[13:38:42.0000] <Rahul21>
resources anything

[13:39:21.0000] <SimonSapin>
I don’t any right now, sorry

[16:00:00.0000] <Hixie>
anyone know that status of cross-origin font loading in the various browsers?

[16:00:30.0000] <TabAtkins>
Firefox blocks, Webkit doesn't, Blink doesn't but is considering switching to blocking, IE I dunno.

[16:01:59.0000] <Hixie>
thanks


2014-03-12
[18:43:08.0000] <GPHemsley>
What's the current best practice for writing CSS tests?

[19:03:08.0000] <astearns>
GPHemsley: reftests for anything testing display results. testharness for parsing

[19:03:52.0000] <GPHemsley>
URL(s)?

[19:04:06.0000] <astearns>
http://testthewebforward.org/docs/reftests.html

[19:04:18.0000] <astearns>
http://testthewebforward.org/docs/testharness-tutorial.html

[19:04:54.0000] <astearns>
and please send feedback for improving those pages

[20:26:29.0000] <MikeSmith>
is anybody familiar with the background on http://web-platform.test/url/urltestdata.txt ?

[20:27:10.0000] <MikeSmith>
oops make that https://github.com/w3c/web-platform-tests/blob/master/url/urltestdata.txt

[20:28:06.0000] <SamB>
hmm, didn't someone recently say it came from webkit?

[20:29:46.0000] <MikeSmith>
yeah jgraham did

[20:30:39.0000] <MikeSmith>
anyway it seems to be assuming a base URL of http://example.org/foo/bar

[20:31:00.0000] <MikeSmith>
which testing it a more just now, I guess it is, consistently

[20:31:17.0000] <MikeSmith>
I had thought in some cases it was not but I guess I was mistaken

[20:47:12.0000] <SamB>
well, it looks like I was right and the WHATWG logo itself is not copyrightable: https://commons.wikimedia.org/wiki/Commons:Deletion_requests/File:WHATWG_logo_(Matthew_Raymond).png

[01:43:51.0000] <Ms2ger>
https://pbs.twimg.com/media/BiflGFdCcAERBtM.png:large

[01:46:42.0000] <ondras>
hurts.

[05:53:58.0000] <GPHemsley>
astearns (or anyone else): What's the policy on using examples from the spec as tests?

[05:54:50.0000] <Ms2ger>
If the spec isn't under some stupid copyright, it's clearly allowed

[05:57:33.0000] <GPHemsley>
"Copyright © 2014 W3C® (MIT, ERCIM, Keio, Beihang), All Rights Reserved. W3C liability, trademark and document use rules apply. "

[05:57:40.0000] <GPHemsley>
/me is not clear where that falls

[05:58:24.0000] <jgraham>
Examples from the spec probably aren't good tests

[05:59:02.0000] <jgraham>
Or at least they are such small subsets of good testsuites that just rewriting something using the same feature for the case that the example covers is easier than worrying about it

[06:03:45.0000] <Ms2ger>
GPHemsley, "dumb"

[06:04:06.0000] <GPHemsley>
:)

[06:16:33.0000] <smaug____>
any comments on having deltaX/Y and/or offset in scroll events?

[07:14:57.0000] <darobin>
GPHemsley: as indicated, examples are unlikely to be really good tests but they clearly fall under fair use so you're safe

[07:15:18.0000] <darobin>
technically, I think that as software they would be under the software license anyway, which is OSI

[07:28:51.0000] <gsnedders>
darobin: fall under fair use in some juristictions

[07:29:06.0000] <gsnedders>
(there exist juristictions with no concept of fair-use)

[07:29:20.0000] <darobin>
gsnedders: the W3C is judge of whether it's a problem or not, and it's clearly fair use under that jurisdiction :)

[07:30:19.0000] <gsnedders>
darobin: Assuming in all juristictions it is the W3C that has to file suit (I dunno if that's the case).

[07:30:58.0000] <darobin>
gsnedders: I don't know of a single jurisdiction in which IP issues are brought forth by the state rather than the wronged party

[07:31:03.0000] <darobin>
but I'm no expert

[07:31:07.0000] <darobin>
it seems unlikely

[07:31:28.0000] <darobin>
(even considering how fucked up IP legislation generally is)

[07:31:47.0000] <gsnedders>
darobin: copyright in the UK is a criminal matter, and certainly under English and Scottish law criminal cases aren't brought by the wronged party.

[07:32:01.0000] <darobin>
of course, you can claim (justly) that there is no guarantee that W3C will retain a sane policy forever — which is why the push for open licensing needs to continue

[07:32:43.0000] <darobin>
gsnedders: aren't there degrees? I forget, there's a name for the doctrine deciding how cases are brought about by the state

[07:33:18.0000] <darobin>
that said, I'm fairly sure that code examples actually fall under the software license

[07:34:00.0000] <gsnedders>
darobin: All criminal cases are brought to court by the CPS in English, and Procurator Fiscal in Scotland. I don't have the time to look into what copyright cases are criminal and what are not.

[07:45:15.0000] <gsnedders>
Okay, copyright is essentially just counterfeit goods and piracy.

[07:46:21.0000] <gsnedders>
(in the criminal sense)

[08:06:25.0000] <jgraham>
https://www.usenix.org/system/files/1403_02-08_mickens.pdf

[08:09:06.0000] <MikeSmith>
yeah that last third of so of that it pretty good

[08:09:58.0000] <MikeSmith>
he should have cut about half the jokes in their and it would have been a lot funnier

[08:10:05.0000] <MikeSmith>
maybe he got paid by the word

[08:29:45.0000] <gsnedders>
In the web case, there's nothing gained by impersonating a client in a TLS connection, as the client isn't authenticated, right?

[10:31:41.0000] <Hixie>
darobin: by and large, teh jurisdictions that have fair use are the same jurisdictions where fair use includes things required for interop, which would make all specs non-copyrightable :-P

[10:32:00.0000] <Hixie>
but don't tell jeff or rigo

[10:32:02.0000] <darobin>
Hixie: that is also my reading :)

[10:33:52.0000] <jgraham>
Presumably at most the normative sections

[10:34:03.0000] <jgraham>
So it would exclude examples

[10:35:51.0000] <darobin>
jgraham: I can think of quite a few specs in which the examples make the only part that enables interop :)

[10:37:41.0000] <jgraham>
"Your honor, this spec is a stinking pile of horse excrement and as-such doesn't actually allow interop without the examples" are words I want to hear in a courtroom drama

[10:47:41.0000] <JonathanNeal>
How do we markup svgs for screen readers?

[10:48:25.0000] <TabAtkins>
smaug____: +1 to deltaX/Y on scroll events.  (Rough blink position, I think.)

[10:49:05.0000] <JonathanNeal>
SteveF: http://blog.paciellogroup.com/2011/08/html5-accessibility-chops-interactive-image-example/ any developments since this?

[10:50:16.0000] <JonathanNeal>
Is there a whatwg spec for this? I see http://www.w3.org/TR/SVG-access/

[10:50:31.0000] <Hixie>
no

[10:51:19.0000] <JonathanNeal>
Bummer. Sorry for going off-topic then.

[10:56:10.0000] <jcgregorio>
Hixie: FYI https://codereview.chromium.org/178673002/ renames Path -> Path2D in canvas

[10:56:20.0000] <Hixie>
cool

[10:56:35.0000] <jcgregorio>
still hidden behind a flag though

[10:56:39.0000] <Hixie>
does it also make Path2D actually do what the spec says though? :-)

[10:56:43.0000] <Hixie>
unlike Safari's Path? :-)

[10:56:56.0000] <jcgregorio>
yes, it works like the spec says :-)

[11:00:44.0000] <jcgregorio>
doesn't implement addPathByStrokingPath or any of the add*Text methods

[11:02:45.0000] <Hixie>
cabanier: did you paste the right URL? I don't see anything from roc on that thread.

[11:02:56.0000] <Hixie>
jcgregorio: cool

[11:03:30.0000] <Hixie>
esprehn: btw the <dialog> focus stuff has landed in the spec. (not commenting on the blink-dev thread because every time i comment on it i seem to derail the intent-to-ship!)

[11:04:02.0000] <esprehn>
Hixie: I'll have to read it over, in the short term I'd rather we ship what we have and deal with the new stuff later

[11:04:09.0000] <Hixie>
yeah totally

[11:04:24.0000] <esprehn>
:)

[11:05:26.0000] <cabanier>
Hixie: sorry. copied the wrong line: https://groups.google.com/forum/#!topic/mozilla.dev.platform/5i8H-xKGtEg

[11:06:22.0000] <cabanier>
Hixie: I should update the wk implementation for Path

[11:06:57.0000] <cabanier>
Hixie: my patch for mozilla should also match the spec (except for not adding any of the add* methods)

[11:08:20.0000] <cabanier>
emails crossed :-)

[11:09:04.0000] <Hixie>
btw do you know what's the status of all the various canvas worker proposals?

[11:09:38.0000] <Hixie>
what's in the spec clearly isn't what people want, but i don't want to remove it then add something else later, that's twice the work of just adjusting it to be what people implement

[11:15:29.0000] <cabanier>
Hixie: No, I don't. Last I saw was roc's proposal and it sounded like someone was going to prototype it

[11:16:11.0000] <cabanier>
Hixie: but I didn't see anything land. I think it's fine to leave it in

[11:21:59.0000] <Hixie>
bummer

[11:22:07.0000] <Hixie>
we really need canvas in worker

[11:22:23.0000] <Hixie>
and i was really hoping someone would take care of it for me :-)

[11:24:34.0000] <cabanier>
yeah

[11:31:46.0000] <SamB>
Hixie: so what are you going to do, surround it with yellow tape and "dangerous bend" signs?

[11:32:02.0000] <Hixie>
which? the canvas in worker thing?

[11:32:06.0000] <SamB>
yeah that

[11:34:50.0000] <Hixie>
heh

[11:34:54.0000] <Hixie>
i dunno what to do

[11:35:02.0000] <Hixie>
what i'd like is to find something the vendors want to implement

[11:35:06.0000] <Hixie>
zcorpan: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=24835

[11:53:51.0000] <SamB>
/me wonders if wikimedia commons will delete logo-xhr.svg if he uploads it ...

[11:54:16.0000] <SteveF>
JonathanNeal: http://blog.paciellogroup.com/2013/12/using-aria-enhance-svg-accessibility/

[11:55:16.0000] <SteveF>
JonathanNeal:bottom line SVG accessibility will continue to be flaky until SVG 2 is implemented

[12:57:49.0000] <SamB>
you know what would be cool? if link targets would get highlighted when you just hover the link, not only after you follow them ...

[12:58:08.0000] <SamB>
would save time for those links that only go down a line or a paragraph or so

[13:05:56.0000] <Hixie>
interesting idea

[13:05:58.0000] <Hixie>
wonder how to do it

[13:06:44.0000] <SamB>
surely the CSS WG can figure out a way

[13:08:16.0000] <Ms2ger>
Ha

[13:10:39.0000] <JonathanNeal>
SteveF: I wish I could have found this earlier, doh.

[13:10:45.0000] <JonathanNeal>
But it was good of me to test too.

[13:14:23.0000] <SamB>
"I will *make* it legal" and all that, you know?

[13:56:14.0000] <TabAtkins>
SamB: Yeah, that's possible.  I'd probably like to hold off on that until we have customizable combinators, and then just let people do that.

[13:56:45.0000] <TabAtkins>
a /_target/ * { box-shadow: 2px 2px black; }

[13:56:53.0000] <TabAtkins>
Where /_target/ is defined in JS.

[13:57:03.0000] <SamB>
hmm.

[13:57:21.0000] <SamB>
that would certainly be a *useful* thing to be able to do

[13:57:51.0000] <SamB>
though, working out a decent API to do this efficiently will be fun I bet

[13:58:37.0000] <SamB>
in particular, so that the CSS engine doesn't have to be calling the JS constantly

[14:00:24.0000] <TabAtkins>
Yeah, that's the rub.

[14:00:34.0000] <TabAtkins>
But I'm pretty sure it's solveable.

[14:00:57.0000] <Hixie>
// ftw

[14:01:13.0000] <Hixie>
though i didn't think of throwing JS into there

[14:01:16.0000] <Hixie>
that's an interesting idea

[14:01:47.0000] <TabAtkins>
 /foo/ is the new "named combinator" syntax, which means it's now possible to plug JS in reasonably.

[14:02:04.0000] <SamB>
presumably, you'd want the JS code to be able to provide information about what it uses to do the computation

[14:02:12.0000] <TabAtkins>
The CSSWG accepted us adding in @selector-alias; to Selectors, and to pursue JS-driven version as well.

[14:02:32.0000] <TabAtkins>
That's a customizable pseudo-class, not combinator, but the problem space is basically identical.

[14:02:40.0000] <SamB>
so that it'd only need to do it again when some of that information changed

[14:02:55.0000] <TabAtkins>
Yup, there are various things we can do.

[14:03:53.0000] <TabAtkins>
Probably it'll come down to some fairly simple ways to say "don't call me unless [something] changes", where [something] is expressible as a Selector or some way to filter Object.observe records.

[14:12:07.0000] <SamB>
TabAtkins: so, like, a:hover[href] or so for this purpose?

[14:12:17.0000] <TabAtkins>
Yeah, something like that.

[14:13:23.0000] <SamB>
hmm, though of course if something mutated the href attribute that'd also change things ...

[14:15:29.0000] <SamB>
or messed around with id attributes such that the target element was a different element ...

[14:49:08.0000] <BS-Harou>
Can you think of any way to add feed from Opera 15+ extension to "Opera Mail" ?

[15:13:07.0000] <SimonSapin>
When does "&" actually need to be escaped in attribute values? (Context: http://www.databasesandlife.com/multilinelabelwithclickablelinks/ )

[15:16:59.0000] <TabAtkins>
Whenever it looks like an escape.

[15:17:00.0000] <Hixie>
SimonSapin: for your sanity, escape it always

[15:17:06.0000] <TabAtkins>
So yes, always.

[15:17:12.0000] <Hixie>
SimonSapin: but yeah, in practice there's some complicated cases where it's ok not to escape it

[15:17:19.0000] <TabAtkins>
<div title="front&center"> == oops

[15:17:37.0000] <Hixie>
e.g. href="?a=b&c=d" should be safe and won't trigger an error iirc

[15:17:42.0000] <Hixie>
but you're better off just always escaping it

[15:17:50.0000] <SimonSapin>
ok, thanks

[15:17:59.0000] <TabAtkins>
<div title="front¢er">

[15:18:11.0000] <TabAtkins>
Hixie: That's safe?

[15:19:15.0000] <Hixie>
&center isn't safe, no, that one would be a conformance error

[15:19:47.0000] <TabAtkins>
Oh, it sounds like you said <a href="?front=foo&center=bar"> would be safe.

[15:19:59.0000] <TabAtkins>
Were those a/b/c/d not metavars?

[15:20:33.0000] <Hixie>
i meant what i wrote literally, right

[15:20:46.0000] <TabAtkins>
Ah, kk.  Gotta indicate that, it definitely looks like metavars. ^_^

[15:20:48.0000] <Hixie>
that's why it's just simpler to always escape

[15:20:53.0000] <TabAtkins>
Yeah.

[15:20:56.0000] <Hixie>
i say what i mean and i mean what i say :-)

[15:21:06.0000] <TabAtkins>
The rule "it's safe to escape when you're not including anything that needs escaping".

[15:21:21.0000] <TabAtkins>
s/safe to escape/safe to not escape/

[15:21:43.0000] <Hixie>
more or less

[15:22:06.0000] <Hixie>
the problem is that the definition of "anything that needs escaping" requires knowing a list of several thousand words :-)

[15:22:40.0000] <TabAtkins>
Yup yup, which is why it's a terrible rule.

[15:24:00.0000] <Hixie>
the reason for the rule is to avoid spurious error messages on pages that are fine in practice

[15:24:22.0000] <Hixie>
(it still catches cases that are likely broken because you aren't allowed to omit the semicolon in attributes)


2014-03-13
[18:31:26.0000] <zewt>
hard to take people seriously who say "HTML5.1" with a straight face

[18:31:55.0000] <smaug____>
that w3 bug?

[18:32:22.0000] <zewt>
yeah, heh

[21:15:22.0000] <cabanier>
Hixie: path = new Path(paths [, fillRule ] ) ?

[01:39:45.0000] <SteveF>
zewt: "HTML5.1" yeah idjits, it's "HTML 5.1"

[03:11:11.0000] <qFox>
is there any way for an element in the HEAD to be "promoted" to the BODY due to a document write inside of that (or any other) element? besides writing directly into the HEAD itself...

[03:12:01.0000] <qFox>
hmmm actually, I suppose writing any kind of non-HEAD tag inside it would do so. *writes more tests*

[03:16:31.0000] <qFox>
otoh, only script style and title actually have content. script and style will just interpret any content semantically theirs, not html. title... dunno, cant force it to become body

[03:17:37.0000] <qFox>
and it seems title also accepts any content, even <, as literal for the title

[03:30:24.0000] <Ms2ger>
Does anybody except Gecko support document.load?

[03:36:31.0000] <MikeSmith>
Ms2ger: I think not

[03:36:44.0000] <MikeSmith>
was just talking about that with darobin_ and deniak

[03:37:15.0000] <Ms2ger>
I thought it was claimed that IE also supported it, but I haven't managed to make it show that

[03:48:27.0000] <darobin_>
I'd try to confirm, but Win8 is being its usual piece of horseshit by forgetting which password it wants me to use

[03:50:10.0000] <MikeSmith>
/me can't be assed to fire up a VM

[03:53:46.0000] <darobin>
Ms2ger, MikeSmith: yeah, no XMLDocument.load in IE11

[03:54:25.0000] <darobin>
IE11's actually a nice browser, shame it only runs on such a horrendous excuse for an OS

[04:01:44.0000] <MikeSmith>
I actually like the Win8 UI

[04:01:49.0000] <MikeSmith>
quite a lot

[04:02:00.0000] <MikeSmith>
it just pretty much requires a touch screen

[04:02:40.0000] <MikeSmith>
and all windows laptops have touchscreens

[04:02:46.0000] <MikeSmith>
even the cheap ones

[04:03:49.0000] <MikeSmith>
I predict that some year wheneven apple gets around to shipping macbooks with touchscreens, it will be hailed as a great revolutionary innovation from apple

[04:37:41.0000] <Ms2ger>
Filed https://bugzilla.mozilla.org/show_bug.cgi?id=983090 to remove it from Gecko

[05:56:23.0000] <GPHemsley>
Hmm... should &lte; really be parsed as "<e;"?

[05:59:07.0000] <GPHemsley>
(nevermind that that's not the correct character reference for what I'm looking for)

[05:59:52.0000] <jgraham>
GPHemsley: Yes

[06:00:16.0000] <GPHemsley>
that's unfortunate

[06:00:56.0000] <GPHemsley>
unexpected, from a naïve perspective

[06:18:28.0000] <MikeSmith>
fyi http://www.w3.org/Consortium/Recruitment/#web-dev

[06:19:58.0000] <MikeSmith>
W3C Japan is looking to hire a web developer with JavaScript/front-end skills to work on the W3C systems team

[06:20:13.0000] <MikeSmith>
at Keio SFC

[06:33:15.0000] <wilhelm_>
MikeSmith: Which way does the position lean the most? Towards UX/HTML/CSS or backend development?

[06:37:30.0000] <MikeSmith>
wilhelm_: UX/HTML/CSS

[06:38:03.0000] <MikeSmith>
the systems team has a lot of people with strong backend-dev skills already

[06:38:30.0000] <MikeSmith>
so in part hoping to balance things out a bit more

[06:38:31.0000] <wilhelm_>
I have a designer-who-can-code candidate in mind, based in Tokyo.

[06:38:55.0000] <MikeSmith>
definitely point them my way

[06:39:09.0000] <MikeSmith>
I'd like to find somebody sooner rather than later

[06:39:23.0000] <MikeSmith>
at least get interviewed soon

[06:39:54.0000] <wilhelm_>
I'll prod her. (c:

[06:40:17.0000] <MikeSmith>
cool

[06:56:29.0000] <karlcow>
MikeSmith: http://twitter.com/karlpro/status/444109571389288449

[06:57:31.0000] <MikeSmith>
ah cool

[06:57:33.0000] <MikeSmith>
thanks karlcow

[06:58:09.0000] <MikeSmith>
I'll tweet something in the morning as well

[06:58:28.0000] <MikeSmith>
for now -> 銭湯

[08:57:20.0000] <dglazkov>
good morning, Whatwg!

[11:52:46.0000] <Domenic_>
Looking for an example site that triggers mixed content warnings...

[11:58:08.0000] <miketaylr>
Domenic_: https://www.samsung.com/us/ is one

[11:59:40.0000] <Domenic_>
miketaylr: perfect, thanks

[12:29:10.0000] <gsnedders>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2885 — anyone able to run that in IE11 (or just look and check that the expectation is correct?)

[12:31:52.0000] <miketaylr>
gsnedders: i get "FAIL (creation failed; event did not fire)" in my IE11 VM

[12:32:15.0000] <gsnedders>
Okay, can someone tell me what's correct? I don't see anything in any spec justifying it failing.

[12:32:22.0000] <gsnedders>
But if it fails the event should definitely fire

[12:32:33.0000] <gsnedders>
(Passes Firefox, fails Chrome IE11)

[12:34:02.0000] <gsnedders>
Though I don't see anyway for "create a drawing buffer" to fail?

[12:54:51.0000] <gsnedders>
wat. the IE Feedback allows .xml file uploads, but not .html?

[12:57:31.0000] <[bjoern]>
XHTML renders all exploits innert.

[14:36:09.0000] <[bjoern]>
https://twitter.com/annevk/status/444126322390863872 -- That would make public-webcrypto the first W3C discussion list I am subscribed to but cannot post to; it seems more likely that http://lists.w3.org/Archives/Public/public-webcrypto/ just says so on the packaging.

[14:38:31.0000] <arunranga>
Hixie, would you prefer a switch from the origin of the invoking script to the origin of the resource (re: W3C Bug 24998)? It seems wrong to leave something that you think doesn't really work.

[14:54:01.0000] <Hixie>
arunranga: how is the origin of the resource defined?

[14:55:15.0000] <arunranga>
The origin of the Blob.

[14:55:41.0000] <arunranga>
Which could be the origin of the script which coined it, but that seems no better than the origin of the script that called URL.create*

[14:56:13.0000] <arunranga>
Origin-less scripts shouldn't be used to tack origin

[14:59:32.0000] <Hixie>
scripts don't have origins

[15:00:25.0000] <Hixie>
arunranga: you probably mean the effective origin specified by the incumbent script settings object

[15:00:30.0000] <Hixie>
arunranga: at the time of the method call

[15:00:46.0000] <Hixie>
arunranga: anyway, i don't care what it is, so long as it is defined :-)

[15:01:11.0000] <arunranga>
Hixie, you're right. I'm probably using ad-hoc terminology. I mean what you just said :)

[15:01:31.0000] <arunranga>
Hixie, so I'll update that. I'll scour the spec, but pointers helpful.

[15:03:33.0000] <Hixie>
just do a search for "the effective script origin specified by the incumbent settings object"

[15:03:46.0000] <Hixie>
in the html standard

[15:04:07.0000] <Hixie>
to see how it's done

[15:04:11.0000] <Hixie>
hth


2014-03-14
[05:08:51.0000] <JakeA>
Bit off topic, but can anyone confirm what System.import('./normal-script.js') does differently to <script src="normal-script.js" async>?

[05:10:09.0000] <JakeA>
In regards to execution behavior, rather than preloading

[05:18:07.0000] <JakeA>
I'm guessing the difference is it runs in a private scope?

[05:57:30.0000] <smaug____>
uh, another misuse of Promises https://rawgithub.com/ClaesNilsson/raw-sockets/gh-pages/index.html#interface-tcpsocket

[05:57:46.0000] <smaug____>
you really want events for stream-like things

[06:51:25.0000] <zewt>
(also for non-stream-like things)

[07:31:49.0000] <Domenic_>
nope, you want streams for stream-like things, which is exactly what Claes is doing.

[07:32:37.0000] <Domenic_>
JakeA: also allows the use of different keywords. `module`, `import`, and `export` are syntax errors with <script>

[08:51:19.0000] <dglazkov>
good morning, Whatwg!

[12:11:06.0000] <jgraham>
Hixie: FWIW I heard a complaint that the HTML spec gets the wrong charset when loaded over file://

[12:44:06.0000] <Hixie>
jgraham: odd

[12:44:17.0000] <Hixie>
jgraham: the source file is US-ASCII :-)

[12:44:30.0000] <Ms2ger>
I don't think they loaded the source

[12:52:08.0000] <Hixie>
Ms2ger: yeah, my point was more that i really should fix my pipeline to maintain that invariant

[12:52:15.0000] <Hixie>
Ms2ger: it would solve a bunch of other problems too

[12:52:20.0000] <Hixie>
but anyway

[12:52:20.0000] <Ms2ger>
Fair

[12:52:28.0000] <Hixie>
i've no idea what encoding the file is coming out as

[12:52:41.0000] <Hixie>
i have some long-term plans to fix this class of problems though

[16:18:17.0000] <Hixie>
hey, Touch objects have no constructor

[16:18:20.0000] <Hixie>
odd

[16:18:34.0000] <Hixie>
oh TouchEvents don't either!

[16:18:44.0000] <Hixie>
i wonder if that's intentional


2014-03-15
[09:39:18.0000] <smaug____>
annevk: welcome back

[09:39:44.0000] <annevk>
smaug____: thanks!

[09:40:06.0000] <smaug____>
/me tries to now remember what all should be fixed in Anne's specs

[09:40:44.0000] <smaug____>
probably nothing

[09:41:07.0000] <smaug____>
but need to discuss about MutationObserver stuff next week or so

[09:46:56.0000] <annevk>
yeah I got all the time next week :-)


2014-03-16
[18:38:46.0000] <GPHemsley>
annevk: Does Chrome handle # in data: URLs differently from Firefox?

[18:38:56.0000] <GPHemsley>
(In particular, when used in <style>)

[22:18:56.0000] <mithro>
Hi! It looks like your list of "autoconfirmed" users list is broken - http://wiki.whatwg.org/wiki/Special:ListUsers%26group%3Dautoconfirmed (linked from the "To request an account, ask an autoconfirmed user on IRC (such as one of these permanent autoconfirmed members)" in the header.

[22:23:19.0000] <annevk>
GPHemsley: Chrome has a bug in data URL handling of fragments, yes

[22:24:02.0000] <annevk>
mithro: I can get you an account if you pm me a desired username and password and optionally your real name

[22:24:28.0000] <annevk>
mithro: s/password/email/

[22:24:34.0000] <annevk>
/me keeps making that mistake...

[22:24:48.0000] <annevk>
/me blames jetlag

[22:25:57.0000] <GPHemsley>
annevk: It seems some people see it as a feature.

[22:26:19.0000] <GPHemsley>
annevk: In particular, wrt styling using IDs.

[22:26:25.0000] <annevk>
GPHemsley: use %23

[22:26:55.0000] <GPHemsley>
annevk: I know what to do. I'm saying other people don't know that, or don't want to know that.

[22:28:01.0000] <GPHemsley>
https://bugzilla.mozilla.org/show_bug.cgi?id=984005

[22:28:07.0000] <GPHemsley>
annevk: ^

[22:29:36.0000] <annevk>
GPHemsley: yeah Chrome should fix their bug

[02:54:52.0000] <Ms2ger>
Found annevk's car: https://pbs.twimg.com/media/Bi0JWMjCcAAHzFY.jpg:large

[04:20:26.0000] <annevk>
Ms2ger: :-)

[11:34:26.0000] <chertog>
hello


2014-03-17
[17:23:01.0000] <Hixie>
GPHemsley: see mithro's comment

[17:34:46.0000] <mithro>
Hixie / GPHemsley: annevk hooked me up with an account, thanks! Probably a good idea to either change the link in the header or fix the page at http://wiki.whatwg.org/wiki/Special:ListUsers%26group%3Dautoconfirmed

[18:18:12.0000] <Hixie>
did we ever determine the average number of attributes per start tag on the web?

[23:44:22.0000] <zcorpan>
Hixie: http://canvex.lazyilluminati.com/misc/stats/attrcounts.png

[23:45:10.0000] <zcorpan>
Hixie: though i think that's both old and a very small sample

[01:41:36.0000] <jgraham>
http://xkcd.com/1343/ - reminds me of http://www.whatwg.org/specs/web-apps/current-work/multipage/introduction.html#how-to-read-this-specification :)

[02:07:29.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=23822 so should we change XHR to not use utf-8?

[03:45:49.0000] <annevk>
Can someone explain to me why you'd check Attr.specified?

[03:51:47.0000] <zcorpan>
annevk: you'd check it to filter out attributes that shouldn't exist per today's rules?

[03:52:10.0000] <darobin>
annevk: the Sizzle source code says "Use getAttributeNode to fetch booleans when getAttribute lies" and uses that with .specified

[03:53:43.0000] <darobin>
it seems to be related to the fact that in some cases the browser gives a value for an attribute that wasn't there

[03:55:02.0000] <zcorpan>
yeah the old dom spec required that an Attr be there if the DTD gives a default value, with .specified = false

[03:55:26.0000] <zcorpan>
and some browsers actually did, iirc old presto at least

[03:55:35.0000] <darobin>
the comments says IE<9

[04:07:47.0000] <annevk>
zcorpan: o_O

[04:10:41.0000] <foolip_>
annevk: is there anything about Attr that doesn't make you o_O?

[04:11:25.0000] <darobin>
foolip_: good point

[04:11:33.0000] <foolip_>
/me found out about the child text node thing recently and was amused

[04:11:46.0000] <foolip_>
or horrified, really

[04:11:48.0000] <darobin>
foolip_: oh you can have more than one child node

[04:13:06.0000] <foolip_>
sure

[04:13:20.0000] <foolip_>
who designed this API, and did it seem good at the time?

[04:14:42.0000] <annevk>
The child text node thing is because they also add Entity as a node and the DOM was also creating documents...

[04:14:51.0000] <annevk>
It was all kind of bad

[04:26:23.0000] <darobin>
foolip_: the DOM never seemed good to anyone that I know of

[04:26:41.0000] <darobin>
they were trying to cater to too many use cases at the same time, with too little experience of what was needed

[04:27:15.0000] <darobin>
notably, it was thought it could be used for authoring tools, which was a pretty bad idea

[04:38:49.0000] <Ms2ger>
Don't tell glazou

[04:39:33.0000] <annevk>
I don't get http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Nov/0204.html

[04:39:45.0000] <annevk>
The 2D suffix is inconsistent with most bits of the <canvas> API

[04:40:04.0000] <annevk>
darobin: also Java

[04:40:25.0000] <Ms2ger>
CanvasRenderingContext2D?

[04:40:36.0000] <darobin>
annevk: well yeah, that didn't help either

[04:40:59.0000] <Ms2ger>
Also XML, DTDs...

[05:39:54.0000] <GPHemsley>
mithro: Fixed, thanks.

[07:15:57.0000] <annevk>
I like that Aryeh Gregor has been back, I hope he sticks around

[07:24:32.0000] <Ms2ger>
He said that he wouldn't be, pretty much

[07:24:43.0000] <Ms2ger>
But he does check email occasionally

[08:06:59.0000] <annevk>
Ms2ger: why did you not use [TreatNullAs=EmptyString] for nodeValue?

[08:07:36.0000] <Ms2ger>
Hmm

[08:08:05.0000] <Ms2ger>
I think I was mirroring textContens

[08:08:07.0000] <Ms2ger>
nt*

[08:09:45.0000] <Ms2ger>
I guess they can both use [TreatNullAs=EmptyString]

[08:10:02.0000] <Ms2ger>
Or not...

[08:10:18.0000] <Ms2ger>
 The [TreatNullAs] extended attribute MUST NOT be specified on an operation argument, attribute or operation return value whose type is not DOMString.

[08:10:26.0000] <Ms2ger>
And it's 'DOMString?'

[08:10:28.0000] <Ms2ger>
annevk, ^

[08:11:14.0000] <annevk>
Oh, because it returns null? Meh

[08:11:25.0000] <annevk>
I wish we had separate getter and setter types already

[08:23:35.0000] <annevk>
I forgot how getAttributeNode() worked

[08:28:56.0000] <annevk>
foolip_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25016

[09:18:33.0000] <dglazkov>
good morning, Whatwg!

[09:57:37.0000] <Ms2ger>
"I like XSL-FO's..."

[09:57:42.0000] <Ms2ger>
/me backs away

[11:05:52.0000] <Hixie>
zcorpan: thanks

[11:36:09.0000] <annevk>
Just use utf-8 in 2014 is still not trivially accepted: https://www.w3.org/Bugs/Public/show_bug.cgi?id=21275#c17

[11:36:23.0000] <annevk>
Also before comment 17 for what it's worth

[11:40:49.0000] <annevk>
I like http://lists.w3.org/Archives/Public/www-archive/2014Mar/0005.html

[13:03:09.0000] <Hixie>
it's annoying that there's no way to tell if the author is writing <canvas> fallback content for when the canvas is disabled vs for when the canvas is interactive but the user has an AT

[13:03:50.0000] <Hixie>
(i kinda want different content models for those two cases)

[13:04:40.0000] <Hixie>
(e.g. it'd be helpful to catch the case of an author accidentally putting an <img> in an interactive canvas's AT tree, but obviously in the disabled-canvas fallback case it's highly likely that an image or image map would be useful)

[13:15:54.0000] <Hixie>
zcorpan: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=24892

[14:20:06.0000] <jamesr_>
annevk, smaug____: in case you haven't seen it, we've pushed back the showModalDialog deletion by 6 weeks in blink

[14:20:14.0000] <Ms2ger>
Aww

[14:20:15.0000] <jamesr_>
eta to removal hitting stable is late july

[14:20:21.0000] <smaug____>
jamesr_: noticed

[14:20:51.0000] <Hixie>
so is anyone running a pool on when showModalDialog() will actually drop from chrome stable? :-)

[14:21:14.0000] <Hixie>
or maybe when it will drop from firefox would be an even better pool :-)

[14:22:17.0000] <smaug____>
I think I'm happy to let Chrome take some more of the breakage-hit

[14:22:43.0000] <Hixie>
i'll put ten chips on it being removed from chrome for more than 12 weeks by 2017, removed from firefox by 2021. :-)

[14:23:18.0000] <smaug____>
hmm, Firefox 31 would be end of July

[14:23:21.0000] <smaug____>
that is possible

[14:23:33.0000] <smaug____>
which one is the next esr

[14:23:38.0000] <Ms2ger>
31

[14:24:08.0000] <smaug____>
ok, 32 sounds then better target for the removal

[14:24:19.0000] <smaug____>
beginning of September

[14:24:21.0000] <jamesr_>
~when would that be?

[14:24:23.0000] <jamesr_>
ok

[14:29:20.0000] <smaug____>
jamesr_: hey, long ago you asked about having deltas in scroll event?

[14:29:59.0000] <smaug____>
any plans to implement such thing in Blink?

[14:30:38.0000] <smaug____>
since there is a patch for Gecko, but need to get the thing spec'ed ... assuming there is interest for it

[14:35:48.0000] <jamesr_>
that sounds like a useful thing to me. i'm not seeing any open bugs on this

[14:36:16.0000] <jamesr_>
where can we usefully spec new things on events?

[14:36:21.0000] <smaug____>
jamesr_: I think you asked about deltas around 2011-05-06

[14:36:32.0000] <smaug____>
jamesr_: probably webapps

[14:37:35.0000] <jamesr_>
i think it'd be great. we also need to figure out how to get off of integers for these things

[14:38:04.0000] <jamesr_>
the number of machines for which integers can represent something useful keeps declining at a rapid rate


2014-03-18
[02:46:46.0000] <annevk>
Anyone here understand compound microtasks? https://www.w3.org/Bugs/Public/show_bug.cgi?id=24810

[02:47:07.0000] <annevk>
/me was hoping to align mutation observers with the new world order

[02:51:19.0000] <annevk>
Oh beautiful

[02:51:20.0000] <annevk>
var x = document.createAttribute("test:test", "test"); w(x.localName)

[02:54:22.0000] <annevk>
Ooh, createAttribute does not take a second argument, what the actual fuck?

[03:05:25.0000] <annevk>
Teehee, x = XMLHttpRequest() now throws in Nightly

[03:16:16.0000] <annevk>
If you read http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-887236154 what would you expect to be returned when an attribute replaces itself?

[03:26:54.0000] <annevk>
foolip_: does my plan make sense to you?

[03:27:36.0000] <annevk>
foolip_: if you feel like we could get rid of createAttribute() / setAttributeNode() I could leave those out for now, but it seems like a lost cause

[05:55:31.0000] <zcorpan_>
<details> and <summary> aren't especially searchable names

[06:10:33.0000] <GPHemsley>
annevk, dglazkov_: Can you clarify for me what HTML Imports are intended to be used for?

[06:11:32.0000] <annevk>
Importing HTML fragments without the overhead of a browsing context

[06:12:21.0000] <smaug____>
xinclude ;)

[06:12:52.0000] <wilhelm_>
Is this in any browsers yet?

[06:13:08.0000] <GPHemsley>
annevk: To answer your unrelated question from earlier: Given "Replacing an attribute node by itself has no effect." and "If the newAttr attribute replaces an existing attribute, the replaced Attr node is returned, otherwise null is returned.", I would expect null to be returned.

[06:14:18.0000] <GPHemsley>
annevk, smaug____: How does one use it? (The one example in the spec doesn't really show the results.)

[06:14:30.0000] <smaug____>
(and no, it is not xinclude. But similar ideas come and go.... Shadow DOM ~ XBL1)

[06:15:51.0000] <GPHemsley>
Is it only accessible via scripting?

[06:29:19.0000] <GPHemsley>
annevk: Alright, well, I've given my preliminary assessment; feel free to correct any misunderstandings I may have.

[06:46:29.0000] <zcorpan_>
Hixie: "For example "</video>" causes the video element to start fetching video content" https://www.w3.org/Bugs/Public/show_bug.cgi?id=24798 - that is not true iirc. fetching can start earlier. but playback is blocked because there might be <track>s that should block

[06:49:27.0000] <annevk>
GPHemsley: null is what I expected as well, but of course browsers do the other thing (consistently though, so there's that)

[06:50:05.0000] <annevk>
GPHemsley: you'd use HTML imports through scripting, yes

[07:58:20.0000] <GPHemsley>
annevk: I suppose the other behavior is also a possible interpretation of those quotes. I guess "replacing" is a cause, not an effect, so the replacement does actually happen, returning the new Attr node (which is the same as the old Attr node).

[07:58:56.0000] <GPHemsley>
annevk: Seems like the wording to be improved to clarify what "no effect" means (because apparently returning the Attr node instead of null is not an effect).

[08:28:42.0000] <dglazkov>
good morning, Whatwg!

[08:32:42.0000] <annevk>
GPHemsley: well that spec is dead :-)

[08:33:03.0000] <annevk>
the new one will have a crystal clear algorithm

[09:17:27.0000] <GPHemsley>
alrighty

[09:26:51.0000] <SamB>
/me wonders why http://www.w3.org/Style/CSS/Test/Fonts/Ahem/Ahem.ps is in the old Mac format, or, heck, has a .ps extension ...

[09:28:25.0000] <tantek>
perhaps ask Todd Fahrner?

[10:12:35.0000] <SamB>
tantek: meh, don't care that much ...

[10:13:22.0000] <annevk>
SamB: prolly because it was created back then

[10:46:32.0000] <annevk>
foolip_: sorry about that

[10:46:49.0000] <annevk>
foolip_: really thought ownerElement was widely deployed

[10:47:00.0000] <annevk>
/me wonders if foolip_ actually ever checks IRC

[11:00:45.0000] <Hixie>
annevk: can you elaborate on https://www.w3.org/Bugs/Public/show_bug.cgi?id=25089 ?

[11:00:51.0000] <Hixie>
(microtasks in workers question)

[11:01:15.0000] <Hixie>
why would workers have microtasks?

[11:01:31.0000] <Hixie>
i thought all microtask things were dom-based right now

[11:01:41.0000] <Hixie>
table sorting, mutation observers, web components, etc

[11:02:44.0000] <Hixie>
i guess it could be made more generic

[11:02:45.0000] <Ms2ger>
Object.observe?

[11:05:59.0000] <Hixie>
Object.observe interfaces with HTML's event loop?

[11:06:17.0000] <Hixie>
i have yet to hear anything form TC39 about anything i'm supposed to do about their event loop thing

[11:06:20.0000] <Hixie>
from

[11:10:09.0000] <annevk>
Hixie: promises and Object.observe() are microtasks

[11:10:27.0000] <annevk>
Hixie: ES6 calls them "tasks" at the moment, confusingly enough, they're considering changing the name

[11:10:29.0000] <Domenic___>
despite allen's insistence that ES tasks are different :(

[11:10:37.0000] <Hixie>
i've updated the spec to make microtasks happen on workers too

[11:10:40.0000] <Domenic___>
wow how do i keep growing underscores on my name

[11:10:58.0000] <Hixie>
right now though, ES thingies, whatever they are called, aren't invoked by HTML's microtasks logic.

[11:11:08.0000] <Hixie>
so they ain't microtasks yet.

[11:11:21.0000] <annevk>
Hixie: fair enough, at some point we need to study the "host integration" I guess

[11:11:32.0000] <annevk>
Hixie: hopefully Allen fixes the bug around global != this too

[11:11:42.0000] <annevk>
Hixie: I filed that a while ago now...

[11:11:43.0000] <Hixie>
that'd be nice

[11:34:35.0000] <annevk>
web-apps-tracker keeps breaking down :(

[12:07:16.0000] <annevk>
Might be a DreamHost issue, I filed a ticket

[12:08:15.0000] <annevk>
It seems https://github.com/whatwg/html-mirror/commits can be used meanwhile although it lags a little bit

[12:11:36.0000] <Domenic_>
TabAtkins: how's the CSS variables thread going

[12:31:31.0000] <TabAtkins>
Domenic_: OH GOD SAVE ME

[12:31:43.0000] <TabAtkins>
In other words, it's done.  We'll discuss tomorrow and make a decision.

[12:31:54.0000] <TabAtkins>
Nothing going on in the thread is worth anything anymore.

[12:32:05.0000] <Domenic_>
yeah, that's what i figured. (yet you keep replying... :P)

[12:32:17.0000] <TabAtkins>
I'm a bit of a masochist in some realms.

[12:32:23.0000] <Domenic_>
where are people standing, generally?

[12:33:11.0000] <TabAtkins>
Looks like the use of -- as a prefix will work out well.  It's a small parser change.

[12:33:21.0000] <Domenic_>
interesting!

[12:33:37.0000] <Domenic_>
nice, that seems like a win. and you think it can be extended to other custom thingies?

[12:33:50.0000] <TabAtkins>
Yup, I'll just change over the current proposal from a _ prefix to a -- prefix.

[12:33:57.0000] <Domenic_>
that's awesome

[12:43:34.0000] <annevk>
what's wrong with _?

[12:45:04.0000] <TabAtkins>
It's ugly.

[12:46:08.0000] <Ms2ger>
Like --

[12:46:18.0000] <Domenic_>
LIKE YOUR FACE

[12:47:33.0000] <TabAtkins>
People seem to consider dashes less ugly than underscores, shrug.

[12:51:26.0000] <jamesr_>
my shift key thanks you

[12:52:13.0000] <TabAtkins>
That's probably at least partially the reason, yes.

[12:52:50.0000] <TabAtkins>
(That's one of the reasons I like Lisp better than most languages - I can just use "-" rather than having to hit Shift to get _ or camelCase.)

[12:57:30.0000] <hober>
yeah, when i suggested prefix--foo i was thinking of the emacs lisp convention for package-private symbols

[13:16:37.0000] <TabAtkins>
Ah.  Well, people can always use more -- on the inside, if they want.

[13:43:54.0000] <Ms2ger>
annevk, getAttributeNode() is coming back?

[13:44:05.0000] <annevk>
Ms2ger, yeah it might

[13:57:32.0000] <SamB>
one actual problem I've had with underscores is that sometimes they get buried in link underlines ...

[14:05:10.0000] <Ms2ger>
TabAtkins, so you're just doing Formal Day now?

[14:05:36.0000] <TabAtkins>
Just trying to class it up more regularly.  Still only doing full suits on Friday.

[14:06:02.0000] <TabAtkins>
Also, I just bought a sweater, so I wanted to try it out.

[14:07:00.0000] <Ms2ger>
... Slowly moving into management

[14:07:20.0000] <TabAtkins>
I am, technically, a manager at the moment, since I'm employing the CSSWG scribe.

[14:07:27.0000] <TabAtkins>
...also, I'm now paying fantasai.

[14:07:43.0000] <Ms2ger>
Ha

[14:10:37.0000] <TabAtkins>
Though I do dress better than 90% of Google management (at least) on my classy days.

[14:14:13.0000] <Hixie>
TabAtkins: you confused me when i ran into you earlier, because it wasn't friday

[14:14:19.0000] <TabAtkins>
Hahahaha

[14:14:33.0000] <Hixie>
TabAtkins: i was busy trying to do two things at once on my phone and listen to a podcast and then there's this guy in a suit waving at me and i'm like "aaah, what's going on"

[14:14:45.0000] <Hixie>
"it's not friday!"

[14:17:45.0000] <TabAtkins>
I'm not even close to being in a suit.

[14:17:59.0000] <TabAtkins>
Jeans and bare feet, I'm just wearing a nice shirt, a sweater, and a tie.

[14:18:23.0000] <Ms2ger>
That sounds like an interesting combination

[14:18:40.0000] <Ms2ger>
Like something a news anchor could wear if he's behind a desk

[14:18:58.0000] <TabAtkins>
They just don't wear pants at all.

[14:19:08.0000] <Hixie>
TabAtkins: well i dunno, i wasn't looking where i was going, let alone what you were wearing :-)

[14:21:18.0000] <Hixie>
as far as i'm concerned, if you're wearing a tie, it's asuit

[14:21:27.0000] <Hixie>
even if it's printed on a t-shirt, that's probably close enough

[14:21:31.0000] <TabAtkins>
Oh god.

[14:21:36.0000] <Hixie>
:-P

[14:21:37.0000] <TabAtkins>
That's terrible.

[14:21:58.0000] <TabAtkins>
Does anyone know what the offset is for the hours in Gavin's stats? They kind look like west coast times.

[14:22:17.0000] <TabAtkins>
Since I have no blue at all, which would correspond to roughly midnight-6am.

[14:22:52.0000] <Ms2ger>
Sounds right

[14:23:05.0000] <TabAtkins>
Tangentially related, I like that Divya holds both first and second place for most all-caps messages.

[14:23:14.0000] <TabAtkins>
Or rather, highest percentage.


2014-03-19
[17:07:17.0000] <Hixie>
wtf

[17:07:36.0000] <Hixie>
json encodes astral characters as their UTF-16 surrogates encoded in ASCII???

[17:07:54.0000] <JosephSilber>
I think I found a bug in Chrome: http://codepen.io/JosephSilber/pen/dFgxo/

[17:08:39.0000] <JosephSilber>
Toggling the "absolute" class there doesn't affect the parent's width.

[17:08:55.0000] <Hixie>
crbug.com/new

[17:08:57.0000] <JosephSilber>
Adding the "absolute" class directly in the HTML does work: http://codepen.io/JosephSilber/pen/LiCKA/

[17:09:26.0000] <JosephSilber>
Hixie: Yeah. Just checking here first if I'm misunderstanding expected behavior.

[17:09:58.0000] <Hixie>
i don't understand what's going on in that test

[17:10:14.0000] <Hixie>
there's three files?

[17:10:39.0000] <JosephSilber>
Hixie: there are two flex containers, nested.

[17:10:54.0000] <JosephSilber>
The inner container should collapse to its content's width.

[17:11:11.0000] <SimonSapin>
Hixie: yes. The J in JSON is JavaScript, 16bit strings and all

[17:11:31.0000] <JosephSilber>
Setting one of its children's position to absolute should collpase the container's width.

[17:11:42.0000] <SimonSapin>
at least, that’s if you want to backslash-escape such characters. I think just having them literally in UTF-8 should also work

[17:11:48.0000] <JosephSilber>
Work well in Firefox, and also works well in Chrome when not doing it dynamically.

[17:13:52.0000] <Hixie>
JosephSilber: is http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2893 equivalent to your test?

[17:14:58.0000] <JosephSilber>
Hixie: yes. Shouldn't .inner's width collpase? Like it does here: http://codepen.io/JosephSilber/pen/LiCKA/

[17:14:58.0000] <Hixie>
JosephSilber: it seems to work to me... when you set the attribute, the element becomes abs pos and the right thing moves under it. am i missing something?

[17:15:19.0000] <JosephSilber>
Hixie: check it out in ff

[17:15:24.0000] <Hixie>
oh i see, the width is on the inner ones, not the outer ones

[17:15:27.0000] <Hixie>
yup, looks like a bug

[17:15:34.0000] <JosephSilber>
k. will report

[17:16:13.0000] <Hixie>
(btw when making a test case you really want to use as little as possible. so e.g. all the styles on the button are extraneous here and should be dropped in the test. having a separate <script> block is extraneous if you can just do it inline. etc.)

[17:16:24.0000] <Hixie>
(i thought the rgba() thing was especially amusing :-) )

[17:16:58.0000] <JosephSilber>
It's scss

[17:19:20.0000] <Hixie>
scss?

[17:19:34.0000] <Hixie>
in a test? :-)

[17:22:30.0000] <JosephSilber>
ha

[17:23:59.0000] <TabAtkins>
JosephSilber: Yeah, that's a bug.

[17:24:14.0000] <JosephSilber>
reporting

[17:26:38.0000] <SamB>
SimonSapin: raw UTF-8, huh? well, as long as we aren't applying "UTF-8" to the UTF-16 ...

[17:26:45.0000] <SamB>
(which is actually called something else)

[17:27:15.0000] <SimonSapin>
wait, what?

[17:27:59.0000] <SimonSapin>
no, it’s not CESU-8

[17:29:33.0000] <JosephSilber>
https://code.google.com/p/chromium/issues/detail?id=353837&thanks=353837&ts=1395188953

[18:00:26.0000] <MikeSmith>
tantek: are all of the rel values in the POSH table of the link-relations page meant to be considered conforming/valid?

[18:01:50.0000] <tantek>
no

[18:02:00.0000] <tantek>
they're just random author extensions, HTML4 style

[18:02:52.0000] <tantek>
basically, they're stuff someone has found in the wild

[18:04:06.0000] <MikeSmith>
ok

[18:04:43.0000] <MikeSmith>
rel=publisher semms to be used quite a lot

[18:05:54.0000] <tantek>
if there's a spec for rel=publisher, and you think it's a useful value, go ahead and add it to http://microformats.org/wiki/existing-rel-values#HTML5_link_type_extensions

[18:06:10.0000] <tantek>
I haven't found a use for it myself so I've ignored it

[18:06:34.0000] <tantek>
I figure it someone cares about it enough, they'll do the minimal step of "registering" it by editing the wiki

[18:15:13.0000] <MikeSmith>
tantek: yeah you're right. I'll wait to see if anybody registers it.

[19:24:32.0000] <Hixie>
wow, a phishing attempt with the subject line "full specification"

[19:24:39.0000] <Hixie>
that's a bit more targetted than i expected!

[20:16:27.0000] <Hixie>
am i missing something, or does the JSON specification not say what the root of the grammar is

[20:19:32.0000] <Hixie>
rfc4627 does, so i guess i'll use that

[20:19:44.0000] <Hixie>
(how many specs does one format need, anyway)

[20:24:26.0000] <estellevw>
Question as to whether something is a bug or feature:

[20:24:52.0000] <estellevw>
when a min and max are both set on <input type="number"> chrome makes the input as narrow as needed for the width of the maximum value -- so when max is not set, the input is much wider. I can see that the #shadow-root <div id=inner-editor> is getting a width set, but I don't see where it is getting that width set.

[20:25:11.0000] <estellevw>
http://codepen.io/estelle/pen/rIlFv/ is the test case

[20:25:33.0000] <estellevw>
FF on the other hand has them all the same width

[20:25:50.0000] <Hixie>
if the question is "can a user agent vary the width of a type=number field based on the allowed range", the answer is yes. it can also vary the colour. it can also vary the width based on the time of day.

[20:26:26.0000] <Hixie>
it can also replace the text field with a button that pops up a dialog that asks the user for the number in roman numerals input via ASL recognised by webcam

[20:28:01.0000] <estellevw>
it isn't expected behavior though in the minds of most developers

[20:28:32.0000] <Hixie>
unfortunately, that is true

[20:28:55.0000] <estellevw>
it forces developers to include css width for input types because default width is no longer rational

[20:28:58.0000] <Hixie>
but most developers seem to forget that HTML is not primarily (let alone exclusively) a visual page description language

[20:29:06.0000] <estellevw>
ok, thanks

[20:29:20.0000] <estellevw>
so, feature, not bug. thanks

[20:29:20.0000] <Hixie>
i mean, there's nothing about HTML that says that the CSS will even be looked at

[20:29:27.0000] <Hixie>
or that the page won't be rendered by speaking it out loud

[20:29:30.0000] <Hixie>
or in braille

[20:29:41.0000] <Hixie>
on a dynamic braille display

[20:31:30.0000] <Hixie>
in other news, wtf, https://www.ietf.org/rfc/rfc4627.txt actually CONTRADICTS the json.org description

[20:33:08.0000] <Krinkle>
In what way?

[20:33:38.0000] <Hixie>
the rfc (and ecma 404) say that whitespace can be before or after tokens, the page says whitespace can only be between tokens.

[20:35:34.0000] <SimonSapin>
yay for competing specs

[20:36:23.0000] <zewt>
not really surprising that a description of a format based on unreadable state diagrams is imprecise

[20:36:36.0000] <Hixie>
the diagrams are actually very precise

[20:36:40.0000] <Hixie>
it's the stuff around them that's confusing

[20:36:51.0000] <zewt>
reminds me of sqlite's documentation: used to be readable, then at some point changed to that style of diagram, which made them completely worthless and unreadable

[20:37:06.0000] <Hixie>
you don't like railroad diagrams? why not?

[20:37:11.0000] <Hixie>
they're really nice and simple to understand

[20:37:16.0000] <zewt>
because they're hard to read

[20:37:27.0000] <Hixie>
if HTML's syntax wasn't such a mess, i'd totally use them to specify everything in HTML too

[20:37:39.0000] <Hixie>
i find them really easy to read

[20:37:46.0000] <Hixie>
you just start on one end and follow the paths

[20:38:02.0000] <zewt>
for documentation, at least (eg. user-facing)

[20:38:30.0000] <zewt>
given http://www.postgresql.org/docs/9.0/static/sql-select.html vs. https://www.sqlite.org/lang_select.html, sqlite's are utterly useless and opaque to me as a user

[20:39:30.0000] <Hixie>
oh man, i couldn't disagree more

[20:39:40.0000] <Hixie>
the postgre one there is the unreadable one

[20:39:59.0000] <zewt>
i can skim and understand postgresql's at a glance; i have to stare and squint at sqlite's

[20:40:00.0000] <Hixie>
the mysql docs use the postgre style too and i have to twease them apart each time to work out what they mean

[20:40:16.0000] <Hixie>
the sqlite one is just a matter of following the line, so much easier for me

[20:40:43.0000] <Hixie>
(the sqlite ones are even better than the json ones, since they have arrows)

[20:41:20.0000] <zewt>
maybe for a spec where i was writing a parser, but as a user writing SQL queries postgres's lets me see the command much more naturally

[20:42:00.0000] <Hixie>
oh hey, look at that. nothing in ecma 404 says that the keys in a json object must be unique, and the RFC only makes uniqueness a SHOULD.

[20:42:20.0000] <Krinkle>
Well, the rfc says "Insignificant whitespace is allowed before or after any of the six structural characters"

[20:42:22.0000] <Hixie>
zewt: i have found the opposite, personally

[20:42:25.0000] <Krinkle>
whereas ecma 404 says before or after any value

[20:42:26.0000] <zewt>
without a parser algorithm, a "must" would be pretty meaningless anyway

[20:42:40.0000] <Hixie>
Krinkle: right, those two agree. but json.org says "between".

[20:42:45.0000] <Krinkle>
so that still leaves a different regarding whitespace before e.g. a non-object as root

[20:42:48.0000] <zewt>
at least as far as parsers go

[20:42:59.0000] <Hixie>
Krinkle: well that too

[20:43:07.0000] <Krinkle>
even those two don't agree imho

[20:43:12.0000] <Krinkle>
e.g. ` "foo" `

[20:43:13.0000] <Hixie>
Krinkle: but the rfc is clear that only object and array are allowed as root

[20:43:18.0000] <Krinkle>
as the sole json packet

[20:43:20.0000] <zewt>
or some rule that says "if there are illegal duplicated keys, parsing fails"

[20:43:24.0000] <Hixie>
Krinkle: 404 and json.org don't actually say what the root of a json file is (!)

[20:43:32.0000] <Hixie>
Krinkle: (i was complaining about that earlier)

[20:43:50.0000] <zewt>
from my use of JSON, any type can be the root; "10" is valid JSON

[20:44:01.0000] <zewt>
(but I know there are parsers that expect the root to be a dictionary)

[20:44:02.0000] <Krinkle>
Yes, any JSON value (which is specified)

[20:44:18.0000] <Krinkle>
I don't think it should have to declare a root, you're encoding or decoding values as JSON values.

[20:44:26.0000] <Krinkle>
that should be sufficient

[20:44:33.0000] <Hixie>
the RFC disagrees

[20:44:55.0000] <zewt>
Krinkle: well, "value" should be the root (using json.org's terminology)

[20:45:09.0000] <zewt>
that should definitely be specified, if json.org is meant to be used as a spec (don't really know if it is)

[20:45:18.0000] <Hixie>
/me decides that for his purposes, JSON objects are gonna have to have unique keys

[20:45:26.0000] <Krinkle>
Where does the RFC say that root can only be array or object?

[20:45:40.0000] <Hixie>
section 2 paragraph 2:    A JSON text is a serialized object or array.

[20:45:41.0000] <Hixie>
      JSON-text = object / array

[20:45:52.0000] <Krinkle>
Right

[20:46:39.0000] <zewt>
seems like the main important thing is defining which key is used if there's a duplicate (first or last, presumably)

[20:47:05.0000] <Hixie>
zewt: given that these specs all agree that parsers can "support a superset" of json... (!)

[20:47:18.0000] <Krinkle>
So does this actually cause a problem in practice? Or just pointing out an oversight? I think all parsers I've seen just treat 'JSON-text = value' that's the easiest

[20:47:21.0000] <zewt>
i've written JSON parsers and I couldn't even say which behavior my parsers use (but they're only used in controlled environments, where it doesn't matter)

[20:47:54.0000] <Hixie>
Krinkle: i'm implementing a parser and have no idea what i'm supposed to be doing, either about whitespace, about the root, or about keys in objects.

[20:47:55.0000] <zewt>
(most likely the last)

[20:48:21.0000] <Hixie>
man, the lack of comments in json is a pain in teh ass

[20:48:43.0000] <Krinkle>
ignore whitespace, use your 'value' argorythem from the root (don't special case the root, just go straight into parsing the value),

[20:48:49.0000] <Krinkle>
what about keys in objects?

[20:49:03.0000] <zewt>
FWIW, both Chrome and Firefox's JSON.parse("10") return 10, so on that one I'd have to say the RFC (from what you've described) is wrong

[20:49:24.0000] <zewt>
(a data point which I'm sure you already know, heh)

[20:49:26.0000] <Hixie>
the "value" thing directly contradicts the RFC, and the others are entirely vague about this, so I'm not convinced about that.

[20:49:44.0000] <Krinkle>
it doesn't contradict it, it just supports a compatible superset.

[20:49:53.0000] <Krinkle>
one that is quite common

[20:49:57.0000] <zewt>
both of those also return 10 for " 10"

[20:50:13.0000] <Krinkle>
and "10" for ' "10" '

[20:50:19.0000] <zewt>
Krinkle: of course, if the real definition of JSON is some mysterious superset of what those "specs" say, they're pretty worthless as specs

[20:50:46.0000] <Krinkle>
common sense and simple/lazy implementation

[20:51:20.0000] <Krinkle>
and I'm sure there's a wide scale of test cases of existing implementations you can plug in to make sure you did it right

[20:51:23.0000] <zewt>
if the specs say whitespace can only lie between tokens and don't allow a newline at the end, that'll break tons of inputs

[20:51:34.0000] <zewt>
(i always output a \n at the end of JSON, so curl output isn't stupid)

[20:51:49.0000] <Hixie>
Krinkle: keys in objects, as in, duplicate keys

[20:52:07.0000] <zewt>
if you have to apply liberal common sense and compare against existing implementations to implement JSON because the JSON specs aren't enough, those JSON specs are broken.

[20:52:11.0000] <Krinkle>
as being the parser, it wouldn't break anything. You'd tolerate more than others if anything, more likely you'd be tolerating what everybody else tolerates.

[20:52:24.0000] <Krinkle>
being the encoder is slightly more difficult indeed.

[20:52:26.0000] <Hixie>
zewt: the json specs being broken is more or less the thesis of my rant tonight, yes.

[20:53:09.0000] <zewt>
JSON.parse('{"a": 1, "a": 2}').a returns 2 in both chrome and firefox, which is also what I'd expect (parse a key, write it to the dictionary, if it happens to already be in the dictionary overwrite it)

[20:53:24.0000] <SimonSapin>
Krinkle: if you need common sense and guessing to fill the holes in a spec, it’s a bad spec

[20:54:18.0000] <Krinkle>
I'm not saying it's a good spec (I think it's better than most specs and a hell of a lot easier to implement as such), just saying it seems a moot point to doubt over. I think it's interesting to talk about, but if you're unsure what to do in the actual encoding/parser writing, I'd know better.

[20:55:06.0000] <Krinkle>
the safest route would be to encode as minimal as possible (no whitespace of any kind, and assuming your implementation program language doesn't support dupe keys, that input isn't a problem).

[20:55:11.0000] <zewt>
hardly moot: if the specs are ambiguous or wrong, then they should either be fixed (if whoever's maintaining the spec is willing to fix them, which RFCs seem to have a poor record of) or replaced

[20:57:21.0000] <Krinkle>
and in the parser, if you encounter a dupe key you can blame the input, garbage in garbage out. throw an error, or silently keep the first or last encounter. Shouldn't matter in practice as I'd consider it invalid input.

[20:57:35.0000] <zewt>
json.org seems more like a description of the file format and not really a spec--it says what the file format looks like, but nothing in precise terms about what to *do* with it. that in mind, the main error seems to be the whitespace issue

[20:57:40.0000] <Krinkle>
Hm.. the spec doesnt' say keys have to be unique. interesting.

[20:57:59.0000] <zewt>
web specs always have to precisely define how "invalid input" is handled

[20:58:28.0000] <Krinkle>
None of the languages listed support that, so it's obviously an oversight (no ambiguity as what the intent was). That should be fixed indeed.

[20:58:31.0000] <zewt>
json.org doesn't (but it doesn't seem to be attempting to be a real spec, so that's probably not a bug)

[21:06:50.0000] <SimonSapin>
I like CSS Syntax’s approach of having non-normative railroad diagrams to get a idea of what the syntax looks like, and precise normative text for implementers

[21:12:54.0000] <Hixie>
Krinkle: the RFC says "SHOULD", which means it wasn't even an oversight there

[21:13:46.0000] <Hixie>
another bug... looks like there's nothing saying that lone surrogates are illegal

[21:13:55.0000] <Hixie>
(in escapes, i mean)

[21:15:36.0000] <Hixie>
interesting, leading zeros in numbers aren't allowed

[21:15:59.0000] <Hixie>
pity about the lack of trailing commas

[21:16:03.0000] <Hixie>
(in objects or arrays)

[21:16:22.0000] <zewt>
they don't seem to be illegal according to chrome/firefox's implementations (but I expect basically zero non-web implementations will, since if you output to UTF-8...)

[21:17:05.0000] <zewt>
also, whoever's responsible for infecting JSON with UTF-16 needs to be exposed and publically shamed

[21:18:12.0000] <Hixie>
zewt: that's just from its JS heritage, i guess

[21:19:56.0000] <Hixie>
ok. for my purposes, the root can be any value, whitespace is allowed anywhere outside a leaf token, duplicate keys are fatal error invalid, and lone surrogate escapes are fatal error invalid.

[21:21:31.0000] <zewt>
don't know your context, but for general parsing i think duplicate keys shouldn't be a fatal error; take the last seen value

[21:23:09.0000] <zewt>
that seems to be what most implementations land on, intentionally or not (json.loads in Python does the same)

[21:23:34.0000] <Hixie>
that seems like a recipe for a security bug

[21:26:31.0000] <zewt>
only if someone has other behavior (like picking the first-seen value), right?

[21:26:41.0000] <Hixie>
right

[21:26:57.0000] <Hixie>
in particular, if a validator does

[21:27:07.0000] <Hixie>
or a serialiser

[21:33:32.0000] <zewt>
i guess i could see a streaming parser doing something different (but a streaming parser couldn't enforce unique keys anyway) ... minor since JSON is rarely streamed, but worth mentioning i guess

[21:41:07.0000] <Hixie>
huh, no range on numbers, either

[21:42:55.0000] <zewt>
json.loads('9'*100000) gives an exact result in python, heh

[23:07:48.0000] <MikeSmith>
nashorn wtf

[01:38:19.0000] <zcorpan>
Hixie: the last 3 commit emails have an error message

[02:32:54.0000] <annevk>
ooh, maybe the problem is with svn.whatwg.org and not my server

[02:35:12.0000] <jgraham>
 /win 4

[03:19:19.0000] <annevk>
Hixie: the JSON thing is being fixed

[03:20:21.0000] <annevk>
Although I wonder what the difference is between http://tools.ietf.org/html/rfc7158 and http://tools.ietf.org/html/rfc7159

[03:24:03.0000] <annevk>
It seems they fixed the date and removed Tim Bray's email address in a <meta> element

[03:24:37.0000] <annevk>
In any event, that RFC matches 404 much closer: http://tools.ietf.org/html/rfc7159#section-2

[03:28:28.0000] <Ms2ger>
As for the SQL definitions in the backscroll: I find neither particularly readable, but then again, I don't know SQL

[03:44:59.0000] <annevk>
Is Jeff basically saying power is for sale? https://twitter.com/jeff_jaffe/status/446072553820278785

[03:50:48.0000] <darobin>
annevk: I don't think it's clear what he's saying

[03:51:32.0000] <darobin>
I think that the problem he's looking at is how much team involvement a given individual member may require

[03:51:37.0000] <darobin>
if it's too high, that would drive the price up

[03:52:02.0000] <darobin>
I'm not sure that's really related to power; I reckon "power" is 1) ill-defined in this case and 2) largely orthogonal

[03:53:07.0000] <darobin>
I wonder if there could be an "Individual College"

[03:53:24.0000] <darobin>
for every N individual members, there is one seat added to the AC

[03:53:35.0000] <darobin>
and individual members elect representatives to those seats

[03:53:41.0000] <darobin>
I'm not sure that would be of any use, though

[03:53:51.0000] <darobin>
maybe I should join that webizen thing

[03:54:34.0000] <darobin>
/me sighs

[04:11:58.0000] <MikeSmith>
there should be a thing where, if you pay extra, you're guaranteed nobody from the team will interfere with your work

[04:12:45.0000] <Ms2ger>
Like, Ian Jacobs won't change my specs behind my back?

[04:17:13.0000] <jgraham>
Well we have that

[04:17:23.0000] <jgraham>
Except instead of paying extra you pay less

[04:17:29.0000] <jgraham>
It's called "WHATWG"

[04:17:32.0000] <Ms2ger>
Zing

[04:24:17.0000] <MikeSmith>
/me readies drm.spec.whatwg.org for non-interference-guaranteed work at whatwg

[04:35:49.0000] <annevk>
whatwg.org/C is out of date again :-(

[05:40:14.0000] <foolip_>
MikeSmith: what's that spec supposed to be?

[05:40:20.0000] <foolip_>
april fools?

[05:42:05.0000] <MikeSmith>
foolip_: hadn't thought it through yet

[06:33:23.0000] <zcorpan>
jgraham: does wpt-serve support range requests?

[06:34:18.0000] <jgraham>
zcorpan: In theory, yes

[06:35:41.0000] <jgraham>
I don't know if it works more than the testsuite though

[06:36:21.0000] <jgraham>
(that is, there are tests for it but I wouldn't bet my life on the tests or the implementation being correct)

[06:37:35.0000] <zcorpan>
do you know off-hand of such a test?

[06:39:58.0000] <jgraham>
I mean tests in the wptserve testsuite

[06:40:22.0000] <jgraham>
Although I think I implemented it because some test was implementing a half-assed version of Range in PHP

[06:49:08.0000] <jgraham>
All I remember was that it was written by Payman/Joāo

[07:00:25.0000] <zewt>
"HTTP is now defined by 6, not 2 specs" :|

[07:02:11.0000] <annevk>
If that isn't Progress I don't know what is

[07:02:47.0000] <zewt>
nothing like splitting one thing into seventy to make it "easy" to find stuff

[07:03:22.0000] <jgraham>
6>2?

[07:07:14.0000] <zewt>
last i checked

[07:14:12.0000] <Domenic_>
Hixie: the JSON RFC is basically a fork of 404; I would not use it.

[07:20:36.0000] <Domenic_>
It looks like Jeff Jaffe signed up for twitter just to reply to that tweet?

[07:28:44.0000] <annevk>
Domenic_: that was my impression

[07:29:23.0000] <annevk>
jgraham: that's not how that joke works

[07:34:59.0000] <zcorpan>
Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24860#c12

[08:19:10.0000] <dglazkov>
good morning, Whatwg!

[09:30:50.0000] <Hixie>
wow there really is no difference between 7158 and 7159. weird.

[09:31:23.0000] <annevk>
Hixie: they just fixed the date

[09:32:04.0000] <Hixie>
"fixed"?

[09:33:27.0000] <Hixie>
there's literally no difference between them, except the second one has errata apparently.

[09:33:30.0000] <Hixie>
so let me get this right.

[09:33:45.0000] <Hixie>
they'll publish an entirely new rfc just to update the date, but they won't publish an entirely new rfc to fix errors in the content?

[09:35:07.0000] <Hixie>
i mean it doesn't even really "fix" the date, since there's still an rfc with the wrong date out there now.

[09:35:31.0000] <annevk>
correct

[09:36:04.0000] <Hixie>
and this new version still doesn't fix the mess around whether values should be unique

[09:36:08.0000] <Hixie>
in fact it makes it even more muddled

[09:36:58.0000] <annevk>
it's up to the implementation, JavaScript's JSON has last wins iirc

[09:37:45.0000] <jgraham>
Gotta love a format specifically designed for interchange where "it's up to the implementation"

[09:46:08.0000] <gsnedders>
The RFC was to fix editorial issues, not to make any changes to the format (and making something defined would be a change).

[09:46:40.0000] <Hixie>
it did change the format

[09:46:51.0000] <Hixie>
quite radically, actually, from the first RFC

[09:50:24.0000] <annevk>
It aligned with ES5 after I and others asked them to do that

[09:50:46.0000] <Hixie>
ES6 just defers to 404

[09:50:51.0000] <Hixie>
which isn't as well-defined as the RFC

[09:51:00.0000] <Hixie>
(e.g. it doesn't define the root value, as we were discussing last night)

[09:51:13.0000] <annevk>
Yeah, Ecma 404 is what ES5 has

[09:51:29.0000] <annevk>
Anything can be root

[09:51:36.0000] <Hixie>
it doesn't say that

[09:51:46.0000] <Hixie>
it actually literally doesn't define the format in the most basic sense

[09:51:55.0000] <Hixie>
as far as i can tell

[09:53:21.0000] <annevk>
Hixie: it says that JSON text is a sequence of code points that conforms to the grammar

[09:53:31.0000] <Hixie>
right

[09:53:35.0000] <Hixie>
and it doesn't give "the grammar"

[09:54:01.0000] <annevk>
"JSON text is a sequence of tokens formed from Unicode code points that conforms to the JSON value grammar"

[09:54:04.0000] <Hixie>
oh, it says "the JSON Value grammar"

[09:54:05.0000] <Hixie>
interesting

[09:54:19.0000] <annevk>
seems clear enough

[09:54:23.0000] <Hixie>
how did i miss that like 15 times

[09:54:26.0000] <Hixie>
weird

[09:56:23.0000] <jgraham>
Possibly because it has some weirdness about "Conforming JSON text" vs "JSON Text"

[09:56:38.0000] <jgraham>
I actually can't tell if they are supposed to be different

[09:57:00.0000] <jgraham>
It looks like maybe "JSON Text" is a superset of "Conforming JSON Text"

[09:57:39.0000] <jgraham>
But "Conforming JSON Text" has to "strictly" match "the JSON grammar", which is undefined

[09:58:41.0000] <jgraham>
("JSON Text" merely has to "conform to" (not "strictly") "The JSON Value grammar")

[09:59:35.0000] <jgraham>
(but it's hard to tell if "conforming" vs "strictly conforming" is suspposed to be a substantive difference)

[10:18:37.0000] <annevk>
It isn't really hard to tell, but you could file some bugs for improvement

[10:18:38.0000] <annevk>
TabAtkins: you around?

[10:19:41.0000] <jgraham>
It's hard to tell in the sense that from the ECMA spec I guenuinely don't know

[10:20:42.0000] <jgraham>
*genuinely

[10:28:10.0000] <gsnedders>
The aim of ECMA 404 was to define grammar, not semantics. Which is odd.

[10:29:01.0000] <annevk>
That's always been the goal of JSON though

[10:29:28.0000] <jgraham>
Not really

[10:29:31.0000] <jgraham>
I mean

[10:29:44.0000] <annevk>
Implementations do things like rounding on the numbers and such too, which isn't really forbidden either

[10:30:23.0000] <annevk>
It was the goal of its creator, unless he changed his mind on the goal midway through

[10:30:53.0000] <annevk>
For a while he didn't even want to define the alphabet in use, until we told him that was a bad idea

[10:31:13.0000] <jgraham>
it clearly does define some semantics

[10:31:32.0000] <jgraham>
It more or less defines how the numbers work

[10:31:39.0000] <zcorpan>
in my json parser, [] is an elephant

[10:31:45.0000] <zcorpan>
a real one

[10:32:13.0000] <jgraham>
You would be hard pushed to argue that 10e17 in JSON could be interpreted as 27 or something

[10:32:35.0000] <jgraham>
Although it doesn't define what + or - means

[10:32:52.0000] <annevk>
jgraham: sure, but if you don't use decimal storage, are you non-conforming?

[10:33:33.0000] <jgraham>
Basically istm that Crockford isn't to be trusted with this kind of thing and that JSON has succeeded in spite of him rather than because of him

[10:33:57.0000] <jgraham>
So saying "well the creator wanted X" doesn't seem like a great argument

[10:34:30.0000] <annevk>
I was talking about goals

[10:34:49.0000] <annevk>
In any event, this doesn't seem like a great use of my time

[10:35:16.0000] <jgraham>
I highly doubt it was his goal to create a format that couldn't actually be used for interchange reliably

[10:35:27.0000] <jgraham>
and if it was his goal seems like one that no one should share

[10:35:37.0000] <jgraham>
So either way it seems quite irrelevant

[10:37:07.0000] <annevk>
I think it actually makes sense. It breaks down a bit with generic parsers. But lots of things will be decided at the application layer anyway.

[10:38:37.0000] <Hixie>
json succeeded for the same reason xml succeeded (and did better than xml because it is a simpler format than xml)

[10:38:50.0000] <Hixie>
the reason is, people have an irrational fear of defining custom core syntaxes

[10:39:09.0000] <jgraham>
No

[10:39:23.0000] <Hixie>
people think that if you define a vocabulary on top of a core syntax, it's better than defining a vocabulary and a core syntax together

[10:39:35.0000] <Hixie>
which confuses me greatly, especially when the formats they use don't really fit the problem space

[10:39:53.0000] <jgraham>
It's because having a simple to work with format that has prewritten, predebugged parsers in a range of langauges is a huge win over custom-everything

[10:40:24.0000] <jgraham>
It means that you don't have to keep learning people's half-baked formats

[10:40:37.0000] <jgraham>
And makes interop simpler

[10:40:53.0000] <Hixie>
yeah instead you have to write custom vocabulary interpreters for half-baked vocabularies that you keep having to learn

[10:41:09.0000] <Hixie>
and interop fails because neither the syntax nor the vocabulary define error handling

[10:41:19.0000] <jgraham>
Which is a much easier problem, it turns out, and one that you would have to solve anyway

[10:41:30.0000] <Hixie>
how is it easier? it's the same.

[10:41:58.0000] <Hixie>
you just change your lexical space from unicode characters to different tokens

[10:42:25.0000] <jgraham>
Not at all. If I want to interop with, say, the github API I just have to use an off-the-shelf json lib that I have used hundreds of times before and write some simple code to extract the data I care about

[10:43:09.0000] <jgraham>
If they had invented GitHub-ON for the purpose I would have to either write a parser or learn their library that I had never used before

[10:43:10.0000] <Hixie>
that fails in the same way that people using "simple code to extract the data" they care about from HTML fails

[10:43:23.0000] <jgraham>
and still write the code to extract the data from the file

[10:43:35.0000] <jgraham>
It actually doesn't

[10:43:46.0000] <jgraham>
That's why the format has been a success

[10:44:01.0000] <jgraham>
In spite of the fact that it's horribly flawed in several ways

[10:44:31.0000] <jgraham>
and the people speccing it have managed to make a complete clusterfuck of something that could have been rather straightforward

[10:45:17.0000] <zcorpan>
i saw somewhere someone was working on a "JSON5" which supported more things like comments and unquoted keys

[10:45:30.0000] <zcorpan>
and trailing commas

[11:18:21.0000] <SamB>
... personally I think JSON+C is exactly the right thing. Except that stupid UTF-16 stuff.

[11:18:39.0000] <SamB>
(But that's what you get for basing it on JS syntax ...)

[11:18:49.0000] <TabAtkins>
annevk: I'm around now.

[11:19:13.0000] <annevk>
TabAtkins: any interest in tackling my Selectors questions?

[11:19:21.0000] <TabAtkins>
Point me to them?

[11:19:23.0000] <annevk>
TabAtkins: emailed www-style

[11:19:30.0000] <TabAtkins>
Ah, kk.  I'll respond.

[11:19:38.0000] <TabAtkins>
/me hasn't checked his email yet this morning.

[11:19:56.0000] <annevk>
Basically wondering if I'm invoking the correct hooks and what hooks to use for matches()

[11:20:46.0000] <SamB>
Hixie: I think it drastically reduces the number of sharp edge cases that need to be dealt with, or at least localizes them a lot better ...

[11:21:13.0000] <Hixie>
that's jgraham's position too, i think

[11:21:18.0000] <Hixie>
i think it just hides them more

[11:21:23.0000] <Hixie>
which makes them less likely to be handled

[11:22:24.0000] <SamB>
replicating someone else's buggy parser in another language is not most people's idea of fun

[11:22:49.0000] <Hixie>
but replacting someone else's buggy vocabulary interpreter in another language is?

[11:22:54.0000] <Hixie>
replicating

[11:23:08.0000] <SamB>
well, many programs don't need to understand the whole vocabulary

[11:23:31.0000] <Hixie>
that's the same logic that leads to people writing parsers that don't need to handle the whole syntax

[11:23:45.0000] <SamB>
that's often not possible

[11:24:19.0000] <SamB>
what I mean is that if you are handed a data structure, you don't have to *look* in every nook and cranny; you only need to look in the places relevant to the task at hand

[11:24:58.0000] <Hixie>
assuming those places exist. and are the right type. and aren't out of range. and...

[11:25:19.0000] <SamB>
okay, yes, true

[11:26:43.0000] <SamB>
but given that many of these people aren't going to be doing proper error checking ANYWAY ...

[11:26:44.0000] <Hixie>
in other news, i've just realised that in json, numbers are special in that they're the one token whose end is determined by look-ahead.

[11:26:58.0000] <Hixie>
how annoying.

[11:27:14.0000] <SamB>
what, no lexer?

[11:27:52.0000] <Hixie>
?

[11:28:29.0000] <SamB>
... why is this a problem? Are you writing the lexer by hand?

[11:28:38.0000] <annevk>
Hixie: in what environment are you implementing your own JSON parser?

[11:28:42.0000] <Hixie>
SamB: yeah

[11:29:10.0000] <SamB>
do you not have a *lex you could use?

[11:29:18.0000] <Hixie>
annevk: freepascal. there's lots of existing ones, i just figured it would be fun.

[11:29:35.0000] <annevk>
Hixie: I see

[11:29:43.0000] <annevk>
Hixie: are you adding comment support? :-)

[11:29:50.0000] <SamB>
Hixie: please tell me you're actually implementing JSON+C, yes

[11:30:09.0000] <Hixie>
SamB: i could use a lexer. i happen to chose not to this time. :-)

[11:30:24.0000] <Hixie>
SamB: i'm implementing whatever is needed to parse the tokeniser tests in html5lib's test suite :-)

[11:31:09.0000] <annevk>
Oh my

[11:31:16.0000] <SamB>
so why is it that you're using Object Pascal?

[11:31:19.0000] <gsnedders>
We do touch a fair few bits of edge-cases. :)

[11:31:24.0000] <Hixie>
gsnedders: hehe

[11:31:26.0000] <annevk>
This new version of Anolis is going to be built on primitives you implemented yourself Hixie? :-P

[11:31:35.0000] <Hixie>
SamB: is best language.

[11:31:35.0000] <gsnedders>
:)

[11:31:42.0000] <Hixie>
annevk: yep :-)

[11:32:04.0000] <Hixie>
including my own utf-8 decoder :-)

[11:32:53.0000] <annevk>
Hixie: please make it somewhat clean this time so we can see the source code

[11:33:09.0000] <Hixie>
hah

[11:33:12.0000] <Hixie>
i make no promises

[11:33:22.0000] <SamB>
/me wonders why Object Pascal is so little heard of

[11:33:43.0000] <Hixie>
SamB: it was pretty popular on windows for a while (under the name Delphi)

[11:33:46.0000] <SamB>
possibly it has had too many names and too few implementations?

[11:34:02.0000] <Hixie>
but yeah, i dunno why it's not more popular

[11:34:12.0000] <SamB>
Hixie: yes, I know, and it's still used there

[11:37:47.0000] <Hixie>
hahaha, json's silly surrogate escape thing triggered my utf-8 system's "surrogates aren't allowed" assertion

[11:38:10.0000] <gsnedders>
:)

[11:38:14.0000] <SamB>
Hixie: what did you do to cause that?

[11:38:21.0000] <gsnedders>
Yup, we have lone surrogates in the html5lib tokenizer JSON.

[11:38:27.0000] <gsnedders>
They're perfectly allowed in JSON :)

[11:38:39.0000] <Hixie>
uh

[11:38:43.0000] <SamB>
I mean why is this getting into UTF-8

[11:38:51.0000] <SamB>
gsnedders: eww

[11:38:56.0000] <Hixie>
SamB: i use utf-8 as my internal representation

[11:39:03.0000] <Hixie>
gsnedders: huh

[11:39:06.0000] <gsnedders>
SamB: We need to test lone surrogates are handled correctly!

[11:39:09.0000] <gsnedders>
Hixie: huh at wha?

[11:39:16.0000] <SamB>
/me goes to read the spec ...

[11:39:16.0000] <Hixie>
gsnedders: how do you get lone surrogates out of the html parser?

[11:39:34.0000] <Hixie>
SamB: the json spec is pretty messed up when it comes to surrogates

[11:39:38.0000] <gsnedders>
Hixie: Out of it? We don't. But we have them in the input stream.

[11:39:45.0000] <Hixie>
gsnedders: ahhh...

[11:39:46.0000] <Hixie>
interesting

[11:40:01.0000] <Hixie>
well, my input stream can't support lone surrogates

[11:40:13.0000] <Hixie>
so i'm probably ok just skipping those tests

[11:40:14.0000] <SamB>
is there a reason why JSON is ECMA 404?

[11:40:27.0000] <Hixie>
i guess i'll turn lone surrogates into FFFD

[11:40:38.0000] <Hixie>
(in the json parser)

[11:42:18.0000] <SamB>
/me wants a font where U+FFFD is represented by logo-encoding.svg -- colors and all!

[11:42:18.0000] <Hixie>
hm well that makes unicode escapes into another thing that needs lookahead

[11:47:46.0000] <TabAtkins>
Hixie: Why are you using utf-8 as the internal representation?  That's an encoding, it's weird to use that internally.  Just use arrays of codepoints.

[11:48:08.0000] <dglazkov>
what should this show? http://jsbin.com/bubot/1/edit

[11:48:28.0000] <gsnedders>
TabAtkins: Why would you use arrays of codepoints? That's massively wasteful, esp. if it's mostly ASCII.

[11:48:39.0000] <TabAtkins>
dglazkov: What do you *think* it should show?

[11:48:58.0000] <TabAtkins>
gsnedders: Because it's simpler?  Or use a unicode string, if your language provides that.

[11:49:21.0000] <dglazkov>
ARIAL in arial, INITIAL in times new roman or whatever UA's initial value is?

[11:49:55.0000] <TabAtkins>
Ah, I missed that the initial value is generally a serif font.

[11:51:02.0000] <TabAtkins>
http://jsbin.com/zugojoxa/1/edit?html,output

[11:51:15.0000] <TabAtkins>
This shows the problem a little more clearly - the two "INITIAL"s should be the same font.

[11:51:52.0000] <TabAtkins>
annevk: Just to make sure - these are hooks you need for .query() and .matches()?

[11:52:39.0000] <dglazkov>
TabAtkins: I wonder what mozilla/ie do here?

[11:53:16.0000] <TabAtkins>
I'm on ChromeOS, so I can't tell.

[11:53:59.0000] <dglazkov>
me too :-\

[11:55:20.0000] <dglazkov>
TabAtkins: but this is a bug, right?

[11:55:50.0000] <TabAtkins>
Yes.

[11:56:22.0000] <SamB>
I'm confused: https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url1=rfc7158&url2=rfc7159

[11:56:42.0000] <Hixie>
TabAtkins: because arrays of codepoints take 8 bytes per character and require that the entire input be copied, rather than the input taking 1 byte per character and the data not needing to be copied?

[11:57:38.0000] <SamB>
it doesn't seem like there were any changes other than the change in RFC number and in the "Obsoletes:" line ...

[11:57:39.0000] <TabAtkins>
Then you have to accept encoding limitations, like the fact that you can't encode a lone surrogate in valid utf-8.

[11:57:45.0000] <TabAtkins>
SamB: Yeah, looks like it.

[11:57:47.0000] <Hixie>
yup

[11:57:55.0000] <Hixie>
i am very happy to accept that limitation :-)

[11:57:57.0000] <SamB>
and the year

[11:58:44.0000] <dglazkov>
TabAtkins: gecko gets it right

[11:59:03.0000] <TabAtkins>
It's probably something to do with our bizarre parsing of 'font'.

[11:59:41.0000] <TabAtkins>
Well, hm, never mind, that still doesn't make sense.

[12:00:15.0000] <Hixie>
woot, my json parser found a bug in my test rather than the other way around

[12:00:17.0000] <dglazkov>
TabAtkins: nah. I found this by code inspection. We just don't do anything sensible there. And I wondered if this was intentional

[12:00:25.0000] <TabAtkins>
(I was wondering if it was parsing as a font named "inherit", but that wouldn't help - it would just do fallback, which should produce the default font.)

[12:01:08.0000] <dglazkov>
TabAtkins: we get right to the point where we need to apply property "initial", and then we just go "weeee" and leave

[12:01:17.0000] <TabAtkins>
Fun.

[12:02:51.0000] <SamB>
ouch! http://timelessrepo.com/json-isnt-a-javascript-subset

[12:09:18.0000] <SamB>
oh fun, if I pass difftype=--help to the rfcdiff page, it outputs plaintext as HTML ...

[12:09:32.0000] <SamB>
I mean as text/html

[12:12:20.0000] <SamB>
oh, and otherwise it produces what looks like it's intended to be XHTML labeled as text/html ...

[12:22:08.0000] <annevk>
TabAtkins: I need hooks for querySelector, query, and matches

[12:22:24.0000] <annevk>
TabAtkins: querySelector and matches both take an absolute selector afaict

[12:22:30.0000] <annevk>
TabAtkins: query takes a relative

[12:22:52.0000] <TabAtkins>
querySelector is an absolute scope-filtered, possibly with a reference set.

[12:23:23.0000] <TabAtkins>
query is relative, definitely with a reference set.

[12:23:34.0000] <TabAtkins>
matches is absolute, definitely with a reference set.

[12:24:07.0000] <TabAtkins>
(The only effect of having a reference set is giving meaning to :scope.)

[12:25:03.0000] <annevk>
Oh, I thought scoping root was for that

[12:25:24.0000] <TabAtkins>
Nope, that's only if you're scoping.

[12:25:42.0000] <TabAtkins>
Sorry for the confusing wording, but :scope got named before anything else.

[12:26:00.0000] <TabAtkins>
And the scoping root is the default reference set, if you don't specify anything else.

[12:26:41.0000] <TabAtkins>
You generally don't want to scope.  querySelector() does, but really only because it didn't have relative selectors at the time.

[12:26:48.0000] <TabAtkins>
<style scoped> is the only other thing that uses scoping.

[12:26:59.0000] <TabAtkins>
/me is off to lunch for a bit, will answer any further questions in an hour or so.

[12:27:13.0000] <annevk>
Oh okay. So querySelector using a scoping root is fine.

[12:27:37.0000] <annevk>
However, matches should use a reference set so no scoping is done

[12:28:20.0000] <SamB>
relative selectors?

[12:30:30.0000] <SamB>
hmm, well, ECMA 404 doesn't say you can have unpaired surrogates in your JSON

[12:30:43.0000] <annevk>
Okay, I should look at this again tomorrow, thanks for the pointers so far TabAtkins

[12:31:15.0000] <annevk>
TabAtkins: I do find it a bit odd that you have API hooks for selectors separate from the general selector matching (where is the algorithm for that? and why is it not linked from the API hooks section?)

[12:33:53.0000] <SamB>
/me wonders what Haskell does if you have surrogates in your Strings masquerading as Chars

[12:36:18.0000] <gsnedders>
Is there any sane way to find a font that contains a given Unicode codepoint on OS X?

[12:36:30.0000] <gsnedders>
Like, I blatantly have one as it manages to font-switch in places for it.

[12:36:37.0000] <gsnedders>
But I can't tell what font it comes from

[13:23:45.0000] <gsnedders>
SamB: It'll allow them, because Char is just an integral type, of range 0–0x10FFFF

[13:33:07.0000] <Hixie>
yeah that's basically what i did too, except that i have an operator overload for assignment that checks for surrogates :-)

[13:33:15.0000] <Hixie>
(and i allow -1 to mean eof)

[13:33:28.0000] <TabAtkins>
SamB: http://dev.w3.org/csswg/selectors/#relative

[13:34:21.0000] <gsnedders>
You need a type system with dependent types to allow only matched surrogates

[13:34:35.0000] <Hixie>
uh no, i want no surrogates :-)

[13:35:59.0000] <gsnedders>
That's easy :P

[13:39:07.0000] <Hixie>
annevk: is there anything in particular i need to do on https://www.w3.org/Bugs/Public/show_bug.cgi?id=24810 or did you reassign to me just so i could look it over? (it looks good)

[13:39:37.0000] <annevk>
Hixie: I assigned it to you so you could remove the bits in HTML

[13:40:01.0000] <annevk>
Hixie: e.g. scripting environment is no longer a thing DOM has now or needs HTML to define so you can remove that

[13:40:20.0000] <annevk>
Hixie: and under microtask checkpoint there's a bit of cleanup you can do

[13:40:38.0000] <Hixie>
aaah right

[13:40:39.0000] <Hixie>
cool

[13:40:40.0000] <Hixie>
thanks

[14:22:36.0000] <SamB>
gsnedders: Char is not *quite* an integral type, but yeah, I guess it has allow them given the way Enum works ...

[14:22:55.0000] <SamB>
and Bounded

[14:26:50.0000] <gsnedders>
SamB: Okay, it's not an integral type, but it has a 1:1 mapping to one

[14:28:24.0000] <SamB>
back to JSON, RFC 715[89] also doesn't permit unpaired surrogates, but in section 8.2 warns that they have been seen in the wild and that the behaviour of software encountering them is unpredictable

[14:28:57.0000] <SamB>
https://tools.ietf.org/html/rfc7159#section-8.2

[14:29:35.0000] <gsnedders>
Oooh! That's a change!

[15:12:43.0000] <jgraham>
Hmm, that section says that it does permit unpaired surrogates

[15:13:15.0000] <jgraham>
It just says that the behaviour of unpaired surrogates is undefined

[15:14:31.0000] <zewt>
i'd sooner have it defined as outputting FFFE than being a parse error

[15:15:29.0000] <jgraham>
The whole thing is pretty woeful

[15:15:35.0000] <zewt>
so if some API client inputs a string from a user in a UTF-16 env, and the user pastes in a string with a broken surrogate, it doesn't become a server-side error later

[15:15:48.0000] <jgraham>
You are kind of expected to guess how string escapes work

[15:16:15.0000] <zewt>
eg. i'd rather there be no possible invalid user inputs as a string, even if it means some (invalid surrogates) not round-tripping through some paths

[15:16:57.0000] <jgraham>
zewt: AFAICT the spec simply fails to define how strings are interpreted at all

[15:17:09.0000] <zewt>
sure, i'm just saying how i'd prefer it

[15:17:34.0000] <jgraham>
I agree that fatal errors aren't great

[15:17:52.0000] <zewt>
in practice that may be unlikely: most JSON encoders I've used just output UTF-8 for everything and never use \u escapes anyway

[15:18:38.0000] <zewt>
(or in the case of JS, outputs UTF-16 codepoints that get encoded to UTF-8 later)

[15:31:56.0000] <SamB>
gsnedders: well, I mean, the ABNF doesn't rule them out, but there are no semantics given for them in the prose

[15:35:01.0000] <SamB>
what was that April 1 RFC with the, er, disillusioned definitions for keywords?

[15:37:49.0000] <gsnedders>
jgraham: What do you want to do with serializer tests for html5lib, BTW?

[15:38:20.0000] <gsnedders>
jgraham: Given they depend upon so many serialization options, and there are infinitely many valid serializations…

[16:04:29.0000] <jgraham>
gsnedders: I don't think I have a strong opinion. It makes sense to have *some* tests for html5lib itself

[16:04:45.0000] <jgraham>
I'm not sure that they are worth sharing with other projects though

[16:10:21.0000] <SimonSapin>
SamB: 6919

[16:11:17.0000] <SimonSapin>
jgraham: could you test round-tripping rather than exact serializations?

[16:15:19.0000] <gsnedders>
SimonSapin: Yes, though obviously some tests must test exact serializations

[16:15:31.0000] <Hixie>
does anyone here know anything about MSE?

[16:15:37.0000] <Hixie>
(https://dvcs.w3.org/hg/html-media/raw-file/tip/media-source/media-source.html)

[16:16:33.0000] <gsnedders>
SimonSapin: Also note not everything round-trips

[16:16:43.0000] <SimonSapin>
gsnedders: why, and why?

[16:17:21.0000] <gsnedders>
SimonSapin: e.g., We need to make sure serialization of attribute values doesn't expose XSS bugs in old IE

[16:17:33.0000] <gsnedders>
SimonSapin: and e.g., (XML) <table><tr><td>foo

[16:17:44.0000] <gsnedders>
SimonSapin: (a tree with no tbody)

[16:18:18.0000] <SimonSapin>
gsnedders: but parse+serialize+parse should still be the same as parse, right?

[16:19:19.0000] <gsnedders>
SimonSapin: No. Well, there is obviously *a* serialization, but some parse errors create odd trees.

[16:19:28.0000] <gsnedders>
SimonSapin: Like foster parenting can cause odd things

[16:19:47.0000] <SimonSapin>
isn’t serialize+parse idempotent?

[16:20:09.0000] <SimonSapin>
(*not* parse+serialize)

[16:20:20.0000] <gsnedders>
SimonSapin: Given parse+serialize+parse, "<p><table><p>" is hard to handle.

[16:20:33.0000] <gsnedders>
SimonSapin: Because it's serialization isn't at all obvious from the tree it produces.

[16:20:38.0000] <gsnedders>
*its

[16:20:50.0000] <SimonSapin>
I don’t see the problem

[16:21:29.0000] <gsnedders>
At the moment we only try to serialize trees that a conforming input can create. i.e., not ones like that

[16:21:31.0000] <SamB>
hmm, you would certainly think that given a just-parsed document, serialize|parse would be idempotent

[16:21:51.0000] <SimonSapin>
SamB: yes, that’s what I mean

[16:21:57.0000] <SimonSapin>
is that not the case for HTML?

[16:22:01.0000] <gsnedders>
It is.

[16:22:11.0000] <gsnedders>
It's just the serialize case gets exceptionally hard if you want to make it complete.

[16:22:51.0000] <gsnedders>
Like, for <p><table><p> you have to go from an XML infoset like <p><p/><table/></p> to having the second p appear within the table.

[16:23:18.0000] <gsnedders>
Because you can't serialize that tree as <p><p><table></table></p></p> in HTML.

[16:23:24.0000] <SimonSapin>
gsnedders: do you mean that only testing idempotency it not that useful because you can make a serializer that’s idempotent bug wrong? (e.g always return the empty string)

[16:23:45.0000] <SamB>
SimonSapin: that wouldn't make serialize|parse idempotent

[16:23:48.0000] <gsnedders>
SimonSapin: No, I mean it's impractically hard to do.

[16:24:19.0000] <gsnedders>
SimonSapin: Because a serializer that's idempotent is really complex to handle cases like (XML) <p><p/><table/></p>

[16:25:05.0000] <gsnedders>
SimonSapin: I played about with taking all parser tests and checking serializerparser

[16:25:25.0000] <SamB>
so what was the goal again?

[16:25:59.0000] <gsnedders>
The goal is to improve the current testing situation of html5lib's serializer. Which current relies on shared tests in html5lib-tests dependent upon serialization choice.

[16:33:53.0000] <gsnedders>
https://gist.github.com/gsnedders/9653913 is what currently fails to roundtrip with html5lib. Some (e.g., the script stuff) are obviously bugs.

[16:34:53.0000] <gsnedders>
<p><b><i><u></p>\n<p>X is gonna be very hard to serialize correctly

[16:35:09.0000] <Hixie>
why?

[16:37:36.0000] <gsnedders>
Well, "<p><b><i><u></u></i></b></p><b><i><u>\n<p>X</u></i></b>" doesn't correspond to the same thing, despite being the obvious serialization of the tree

[16:38:20.0000] <gsnedders>
Or rather, the logic for when you omit the p closing tag is complicated.

[16:38:26.0000] <Hixie>
oh

[16:38:36.0000] <gsnedders>
Okay, maybe that isn't as bad.

[16:38:38.0000] <Hixie>
i would just never omit closing tags

[16:38:44.0000] <Hixie>
:-D

[16:38:57.0000] <gsnedders>
I thought that was the weird case where AAA stuff made it horrible.

[16:38:58.0000] <gsnedders>
idk.

[16:39:01.0000] <gsnedders>
I don't have time for this.

[16:39:01.0000] <gsnedders>
:)

[16:39:08.0000] <gsnedders>
This isn't my dissertation. :)

[16:41:49.0000] <gsnedders>
Hixie: Though that does mean the informative description of when p end tags can be omitted in the spec is wrong :)

[16:42:18.0000] <gsnedders>
Or is Writing HTML Documents normative?

[16:42:37.0000] <gsnedders>
It appears to be normative for documents, authoring tools, and markup generators.

[16:42:46.0000] <gsnedders>
In which case the normative description is wrong :)

[16:52:57.0000] <Hixie>
gsnedders: it's not wrong. it just doesn't handle non-conforming cases since those cases are already non-conforming.

[16:53:22.0000] <Hixie>
gsnedders: if a tool outputs <b><p> then it's bogus regardless of where it closes the </b>

[16:53:35.0000] <gsnedders>
Bah!

[16:53:49.0000] <Hixie>
i'm just sayin'

[16:54:04.0000] <gsnedders>
See, this is what makes serialize|parse idempotency hard!

[16:54:21.0000] <gsnedders>
Like, sure, yeah, obviously any tree the parser creates *can* be serialized.

[16:54:28.0000] <Hixie>
should just reguse to serialise anything that's non-conforming

[16:54:29.0000] <Hixie>
refuse

[16:54:46.0000] <gsnedders>
To what degree on non-conformity?

[16:54:49.0000] <gsnedders>
*of

[16:54:53.0000] <Hixie>
human-checked!

[16:54:54.0000] <Hixie>
:-D

[16:54:57.0000] <gsnedders>
:)

[16:55:12.0000] <gsnedders>
Do we allow unknown elements? Because their parse-model could change!

[16:55:25.0000] <Hixie>
(or, document your tool as requiring conforming input, and if it's given non-conforming input, say that the output could be garbage.)

[16:55:51.0000] <gsnedders>
Yeah, that's the sensible approach. :)

[16:56:23.0000] <gsnedders>
I originally did this just because I wanted to see how hard it'd be to guarantee serializer||parser idempotency given a tree from the parser. Because if it was easy then we could trivially get way more tests. :)

[16:57:08.0000] <gsnedders>
There's no schema representing all the content model restrictions, is there?


2014-03-20
[17:02:33.0000] <Domenic_>
heycam|away: ping https://github.com/w3ctag/promises-guide/issues/15#issuecomment-37483172

[17:54:18.0000] <heycam>
Domenic_, will reply today

[18:16:23.0000] <SamB>
does anything actually use meta description anymore?

[18:19:26.0000] <TabAtkins>
Yeah, it's used by Google for the site description, if there's no better signals.

[18:19:46.0000] <SamB>
you mean the blurb in the results?

[18:20:01.0000] <SamB>
or actual search matching?

[18:46:58.0000] <gsnedders>
I'd presume it's used for search matching if it's used as the blurb

[18:59:12.0000] <TabAtkins>
The blurb.

[18:59:24.0000] <TabAtkins>
I think it does indeed contribute to search matching, as well, but I have no real insight into that.

[00:44:09.0000] <zcorpan>
mathiasbynens: hmm now i need to look into making that up to date again

[01:20:25.0000] <zcorpan>
annevk: https://critic.hoppipolla.co.uk/r/924

[01:27:52.0000] <zcorpan>
jgraham: does things get confused if a reftest includes testharness.js?

[01:34:01.0000] <zcorpan>
how do reftests work, when is the screenshot snapped? onload? xhr doesn't delay onload, does it? is there a way to delay the snapshot? (this is on web-platform-tests)

[01:34:14.0000] <zcorpan>
Ms2ger: jgraham: ^

[02:33:06.0000] <Ms2ger>
zcorpan, I know Gecko has something... class=reftest-wait on the root?

[02:33:19.0000] <Ms2ger>
Not sure if wpt has something

[02:42:41.0000] <jgraham>
zcorpan: Yes, they get confused if you include testharness.js

[02:42:55.0000] <zcorpan>
jgraham: ok

[02:43:02.0000] <jgraham>
At least in an obvious way

[02:43:29.0000] <jgraham>
If you really need it in some way you can include it at runtime

[02:43:34.0000] <jgraham>
We don

[02:43:48.0000] <jgraham>
't have a reftest-wait equivalent at the moment

[02:44:48.0000] <jgraham>
But we probably need one (unless we can convince all browsers to implement something like Presto

[02:45:10.0000] <jgraham>
had to determine when the event queue was empty)

[02:45:23.0000] <jgraham>
(which we can't)

[02:46:09.0000] <zcorpan>
yeah personally i prefer a class on the root

[02:50:03.0000] <zcorpan>
jgraham: "This pipe can also be enabled by using a filename *.sub.ext, e.g. the file above could be called xhr.sub.js." does that sound good to add to pipes.rst ?

[02:50:04.0000] <jgraham>
Well despite my skepticism the Presto solution worked rather well

[02:50:28.0000] <jgraham>
But it isn't at all portable

[02:50:34.0000] <jgraham>
zcorpan: Yeah

[02:51:34.0000] <zcorpan>
jgraham: ok then i'll commit it. i thought i was going to be given a "create PR" button but it was "commit changes" so...

[02:52:01.0000] <zcorpan>
maybe i should create a new github user that is not an owner of anything

[02:52:11.0000] <zcorpan>
or whine to github to give me two buttons

[02:56:19.0000] <zcorpan>
wonder where to file a bug about github

[02:56:58.0000] <annevk>
zcorpan: somewhere in https://github.com/github/ I suspect

[03:01:01.0000] <zcorpan>
annevk: thanks... so which repo? :-P

[03:01:13.0000] <annevk>
zcorpan: "somewhere" :-P

[03:01:36.0000] <MikeSmith>
annevk: I still got a couple open PRs for changes to URL tests

[03:01:45.0000] <MikeSmith>
one's pretty easy https://github.com/w3c/web-platform-tests/pull/768

[03:01:59.0000] <MikeSmith>
https://github.com/w3c/web-platform-tests/commit/3a6bf6d2023053ad42c6a02c80ea4b1313becfaa

[03:02:28.0000] <MikeSmith>
the other one is just a port of more webkit URL tests https://github.com/w3c/web-platform-tests/pull/771

[03:02:40.0000] <MikeSmith>
for host canonicalization

[03:02:54.0000] <MikeSmith>
by way of smola

[03:04:17.0000] <annevk>
MikeSmith: looks good, be aware that some of this may change

[03:04:45.0000] <annevk>
but I guess it's better to have tests to compare the changes against than nothing at all

[03:05:26.0000] <annevk>
MikeSmith: reviewed through critic

[03:05:31.0000] <MikeSmith>
thanks

[03:06:07.0000] <zcorpan>
annevk: i used the contact form instead

[04:24:28.0000] <mathiasbynens>
zcorpan: support⊙gc or contact form is The Right Way™

[04:25:03.0000] <zcorpan>
mathiasbynens: excellent

[04:25:28.0000] <zcorpan>
mathiasbynens: i got a gold star so maybe i did something right

[04:26:46.0000] <zcorpan>
i guess "FUUUUUUUUUUUUUUUUUUUUUUUUUU U SUCK" was less than 140 chars

[04:28:53.0000] <annevk>
We should offer such stars to Kyle Simpson on the mailing list

[04:46:55.0000] <jgraham>
But with "Less than 140 thousand words"?

[05:32:54.0000] <zcorpan>
are wpt PRs still mirrored on w3c-test.org somewhere?

[05:34:11.0000] <MikeSmith>
zcorpan: yeah

[05:34:14.0000] <jgraham>
Yeah, under submissions/

[05:34:46.0000] <zcorpan>
ah there, thx

[06:34:23.0000] <MikeSmith>
about exceptions, I see the label "Legacy code exception field value" used in the DOM spec, can I assume that I shouldn't use those in current code?

[06:34:37.0000] <MikeSmith>
I mean http://dom.spec.whatwg.org/#error-names-0

[06:35:04.0000] <MikeSmith>
so I should use SyntaxError instead of SYNTAX_ERR

[06:35:31.0000] <jgraham>
Yeah

[06:35:39.0000] <MikeSmith>
this is in the context of what I should use with assert_throws

[06:35:42.0000] <MikeSmith>
jgraham: OK

[06:36:25.0000] <MikeSmith>
is there somewhere this it more explicitly stated?

[06:37:07.0000] <MikeSmith>
I mean where it's stated that the name should be used rather than the "Legacy code exception field value"

[06:38:28.0000] <Ms2ger>
It may be in the th.js docs?

[06:39:14.0000] <MikeSmith>
ok

[06:39:20.0000] <MikeSmith>
/me reads

[06:40:44.0000] <MikeSmith>
the thrown exception must be a DOMException with the given * name, e.g., "TimeoutError" (for compatibility with existing * tests, a constant is also supported, e.g., "TIMEOUT_ERR")

[09:15:21.0000] <dglazkov>
good morning, Whatwg!

[10:08:09.0000] <Hixie>
annevk: is there a way to get tracker to show more lines on its home page?

[10:08:50.0000] <annevk>
Hixie: ?limit=

[10:08:53.0000] <Hixie>
thanks

[10:09:01.0000] <annevk>
Hixie: use -1 with caution ;-)

[10:09:29.0000] <Hixie>
oh i misunderstood what it did and set it to 7000 :-)

[10:10:39.0000] <Hixie>
in other news, anyone got a good example of a simple table i could add to the spec that demonstrates sortable=""?

[10:11:05.0000] <Hixie>
i need some data that has maybe six lines with multiple numeric columns that aren't all in order and aren't all the same

[10:12:25.0000] <annevk>
Hixie: http://annevankesteren.nl/2007/09/tmb-overview

[10:12:54.0000] <annevk>
although that's not a great example

[10:57:27.0000] <marcosc>
Domenic_: WebIDL says "When a specification says to perform some steps once a promise is settled, the following steps MUST be followed:"

[10:57:45.0000] <marcosc>
however, the promises guide doesn't speak of "settling a promise"

[10:58:48.0000] <Domenic_>
marcosc: yeah, WebIDL kind of swooped in and started incorporating some of the stuff I envisioned the promises guide doing

[10:59:10.0000] <Domenic_>
promises guide's "upon fulfillment"/"upon rejection" <-> WebIDL's "once a promise is settled"

[10:59:23.0000] <marcosc>
:(

[10:59:50.0000] <marcosc>
the WebIDL is really impenetrable with regards to Promises :(

[11:00:23.0000] <marcosc>
Domenic_: not blaming you, obviously

[11:00:44.0000] <Ms2ger>
/me blames marcosc 

[11:00:52.0000] <marcosc>
I also often blame myself

[11:01:14.0000] <marcosc>
if only I had not been dropped so much as a baby...

[11:01:35.0000] <Ms2ger>
You'd blame yourself a lot more?

[11:02:15.0000] <marcosc>
probably... it's like in one of those TV shows where someone gets hit on the head and they suddenly become much smarter

[11:02:28.0000] <marcosc>
go on, Ms2ger, try it!

[12:40:32.0000] <Domenic_>
sicking: glad someone said what i was thinking about push apis

[12:40:46.0000] <sicking>
Domenic_: :)

[12:41:27.0000] <sicking>
Domenic_: actually, glad you pinged. I talked to our perf guys yesterday about IO perf

[12:42:16.0000] <sicking>
Domenic_: His first reaction was "Use node.js streams, those guys understood perf".

[12:42:25.0000] <Domenic_>
hah! :D

[12:42:40.0000] <Domenic_>
that is basically what we are doing

[12:42:48.0000] <sicking>
Domenic_: though he was actually a bit sceptical to the whole idea of using streams to do disk IO

[12:42:49.0000] <Domenic_>
interestingly i think node streams are just starting to deal with the out-of-main-thread idea

[12:43:15.0000] <Domenic_>
or at least not-pass-through-the-C++/JS-barrier, which might be equivalent

[12:43:26.0000] <Domenic_>
hmm i wonder why

[12:44:02.0000] <sicking>
his argument was that often time when people stream, rather than read the whole file and then process, was that the "read small chunks at a time" adds so much overhead that it's a net perf loss

[12:44:58.0000] <sicking>
i.e. he was saying that if you are reading a file that's in the order of < 50MB, then reading that in 1K chunks adds so much overhead to the individual read calls, that the read calls turns into a bottleneck

[12:45:25.0000] <Domenic_>
hmm. my impression from node people is that the threshold is much less than 50 MB.

[12:45:56.0000] <sicking>
this does seem to vary from OS to OS. OSX is particularly bad apparently

[12:46:10.0000] <Domenic_>
there's also issues like how long it takes to parse 1 MB of JSON vs. incremental work on 100 1K chunks of JSON

[12:46:13.0000] <sicking>
(though i would have thought that windows was worse, but we didn't spend too much time on it)

[12:46:38.0000] <sicking>
right

[12:46:55.0000] <sicking>
though he was also saying that if you read in 32-64kB chunks this is less of an issue

[12:47:06.0000] <Domenic_>
well, yeah, optimal chunk size is up to the implementation

[12:47:25.0000] <sicking>
so it's possible that simply increasing the default chunk (is that right word?) size that would help a bunch

[12:47:50.0000] <Domenic_>
so it's up to each individual stream to decide how big the chunks they want to vend are

[12:48:07.0000] <Domenic_>
so if browser/firefox OS streams want to vend 32 kB chunks, that is totally cool

[12:48:12.0000] <sicking>
but if your files was large enough, then switching to something like a 2MB chunk size was needed for good perf

[12:48:20.0000] <Domenic_>
that works too

[12:48:40.0000] <Domenic_>
it's not part of the streams spec; the streams spec just says "here is how you queue up data; and here is how people can get data out of that queue"

[12:48:51.0000] <Domenic_>
but how big the data chunks are that you queue up is up to the individual stream

[12:49:13.0000] <sicking>
yeah, so maybe we can make the current API work

[12:49:14.0000] <Domenic_>
it'd make perfect sense for FS streams to be specified, either loosely to let implementations choose, or with some kind of algorithm like you're describing

[12:49:50.0000] <sicking>
the other thing he was saying was that reusing chunks, rather than always allocating new ones, also makes a big difference perf-wise

[12:50:20.0000] <Domenic_>
hmm what does that mean...

[12:50:34.0000] <Domenic_>
(api-wise)

[12:50:56.0000] <sicking>
arg, crap, gotta get food before next meeting

[12:51:12.0000] <sicking>
i have two proposals for how that can be done, but i'll have to get back to you

[12:51:20.0000] <Domenic_>
sweet

[12:51:21.0000] <sicking>
i'm free after 4pm

[12:51:25.0000] <sicking>
pacific

[12:51:29.0000] <sicking>
what timezone are you in btw?

[12:51:45.0000] <Domenic_>
eastern. but tonight i gotta speak at a meetup

[14:29:41.0000] <TabAtkins>
annevk-cloud: Can you do something about deprecating Selectors API 2, now that it's all been swallowed into DOM?

[14:52:21.0000] <jgraham>
So it totally seems possible that authors will rely on the size of chunks that they get back from streams

[14:52:55.0000] <jgraham>
(assuming it's detectable by the author, which I guess it must be)

[14:53:12.0000] <jgraham>
So if it's implementation defined that seems like a problem

[14:53:15.0000] <jgraham>
Domenic_: ^

[14:54:10.0000] <Domenic_>
jgraham: yeah, I agree it's a concern.

[14:54:22.0000] <Domenic_>
but then again, do authors depend on how much they get back from "streaming" XHR?

[14:56:46.0000] <jgraham>
I'm not sure. Is that as "reliable" as this (in the sense that a single implementation is always likely to return data in the same sized blocks)?

[14:57:10.0000] <Domenic_>
i'm not sure either.

[14:57:20.0000] <Domenic_>
although it sounds like it could vary here, even per-platform perhaps

[14:57:22.0000] <Domenic_>
e.g. macs vs. pcs

[14:57:53.0000] <Domenic_>
or big files vs. small files

[15:00:21.0000] <jgraham>
I'm not sure that makes it better. If it was *always* different people probably wouldn't rely on it. But if people expected 1kB from testing on WebKit/Mac they might well get unexpected breakage if IE/Windows returned 1Mb. Or if they got 1kB consistently for small test data and suddenly got 64kB for larger files in production.

[15:32:51.0000] <zewt>
jgraham: i seem to recall pointing out at some point that if we have a stream API, it should be based on requesting blocks of data with a given size and getting a callback when that amount is available, to ensure that block sizes of the implementation are never exposed

[15:34:55.0000] <zewt>
can't recall where (not that it matters)

[15:36:52.0000] <zewt>
seems like an obvious interop requirement though

[15:40:16.0000] <zewt>
might have been talking about streaming out (eg. streaming JS to the browser), which is also a problem (exposing the number of bytes the implementation requests at a time, etc. could cause interop issues), but a different one


2014-03-21
[17:04:52.0000] <TabAtkins>
Alternately, we just build randomness in, but nobody ever seriously considers that. :/

[17:05:43.0000] <zewt>
not sure how you could do that in the general case

[17:06:44.0000] <zewt>
without making things worse in some cases

[17:08:29.0000] <zewt>
i guess a minimal "randomness", without going all the way, could have the wanted effect, like occasionally breaking a push of 1000 bytes into two callbacks of 300 and 700 bytes, just to exercise the "this isn't always 1000 bytes at a time" code path

[17:10:02.0000] <zewt>
(which is probably a real case--if you're sending 1000 bytes, and you're on a 1500 MTU network, and you're only testing with a local server, you might never see your 1000-byte-data-chunks get split up)

[17:18:22.0000] <roc>
TabAtkins: http://robert.ocallahan.org/2014/03/introducing-chaos-mode.html

[17:19:18.0000] <roc>
TabAtkins: it would be nice to make randomness mandatory. The problem is it makes debugging harder for everyone.

[17:19:33.0000] <TabAtkins>
Yeah, I know. :/

[17:19:53.0000] <TabAtkins>
But an occasional thin, like zewt said, might work sufficiently.

[17:21:05.0000] <roc>
Sooner or later we'll have the record-and-replay technology we need to make the debugging easy.

[17:55:14.0000] <zewt>
well, there's a certain level of randomness in real-world networking anyway, so in a sense simulating it in the browser so that randomness is *always* there makes some sorts of testing/debugging easier

[17:56:03.0000] <zewt>
(of course, it doesn't have to be mandatory to fulfill that part)

[18:48:41.0000] <roc>
gah

[18:48:55.0000] <roc>
Chrome still doesn't support the unprefixed "transform" property?

[18:52:33.0000] <JosephSilber>
gah indeed

[20:17:50.0000] <foolip_>
roc: it's happening finally: https://codereview.chromium.org/98663004/

[20:18:42.0000] <roc>
created 2 months ago

[20:18:43.0000] <roc>
?

[20:19:30.0000] <roc>
but, that's great

[20:45:08.0000] <foolip>
roc: I guess he worked on it for a while, the blink-dev thread is only a few days old

[22:00:56.0000] <cabanier>
foolip: it's still to early to remove theprefix

[23:19:55.0000] <krit>
cabanier: roc: foolip: smfr and I worked on a proposal to make 3D transforms interoperable. smfr published the early spec text as a google doc in one of his mails to www-style. This will require smaller to bigger changes in all Implementatuons. But I do believe it is going into the right direction and is more logical. That said, I think Blink should wait

[23:19:55.0000] <krit>
before unprefixing and add the chanes first.

[00:53:29.0000] <niloy>
is there any api to communicate between open tabs/windows?

[00:53:47.0000] <foolip>
cabanier: ok, you should tell blink-dev

[00:54:06.0000] <ondras>
niloy: postMessage would work

[00:54:45.0000] <niloy>
postMessage requires handle to the other window, I want to broadcast to all open windows

[00:55:50.0000] <ondras>
tough luck I guess. People are doing this by abusing localStorage events, IIRC

[00:56:52.0000] <niloy>
ok thanks, I would do that too

[01:41:56.0000] <krit>
foolip: Rik and I did previously... just responded again

[02:04:18.0000] <zcorpan>
Hixie: why does <dialog>.close() throw (instead of being no-op)?

[02:05:46.0000] <zcorpan>
niloy: http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts (i guess it's not implemented yet though)

[02:12:52.0000] <MikeSmith>
per the DOM spec is there any case in which when a UA fires an event, it doesn't initialize the isTrusted attribute to "true"?

[02:13:09.0000] <MikeSmith>
any case in which that's conforming

[02:13:29.0000] <Ms2ger>
I don't think so

[02:13:58.0000] <MikeSmith>
OK, specifically, blink fires the "focus" and "blur" events without isTrusted=true

[02:14:06.0000] <MikeSmith>
so that's non conforming, right?

[02:16:32.0000] <Ms2ger>
Mmm

[02:16:39.0000] <Ms2ger>
I suspect it would be

[02:17:11.0000] <MikeSmith>
ok

[02:17:59.0000] <zcorpan>
there's no proper spec for focus/blur i think, but it's certainly wrong

[02:19:07.0000] <zcorpan>
hmm http://www.w3.org/TR/DOM-Level-3-Events/#trusted-events actually says something about it

[02:19:27.0000] <zcorpan>
(sorry for TR/)

[02:19:54.0000] <zcorpan>
https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3-Events.html#trusted-events

[02:21:44.0000] <zcorpan>
"Most untrusted events should not trigger default actions, with the exception of click or DOMActivate events." ... "All other untrusted events must behave as if the Event.preventDefault() method had been called on that event."

[02:21:55.0000] <zcorpan>
so is that SHOULD NOT or MUST?

[02:21:59.0000] <MikeSmith>
/me looks

[02:22:36.0000] <MikeSmith>
zcorpan: the HTML spec itself put requirements on focus/blur

[02:22:47.0000] <zcorpan>
MikeSmith: oh

[02:23:26.0000] <MikeSmith>
http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#focus-update-steps

[02:23:41.0000] <zcorpan>
well then

[02:26:16.0000] <MikeSmith>
zcorpan: but gecko makes both of them cancelable, and in blink both are isTrusted=undefined

[02:34:18.0000] <zcorpan>
undefined? looks like it's not supported on any event?

[02:38:05.0000] <zcorpan>
wonder what should happen with HTMLDialogElement.prototype.returnValue = { set:function(v) { alert(v); } }; <dialog open>.close('x');

[02:51:43.0000] <darobin>
heh, evil zcorpan

[03:00:55.0000] <jgraham>
QA zcorpan only has one setting

[03:09:41.0000] <zcorpan>
:-)

[05:38:38.0000] <ondras>
so, a question re. <template> element

[05:38:43.0000] <ondras>
who is the best person for this?

[05:42:38.0000] <Ms2ger>
dglazkov

[05:42:55.0000] <ondras>
dglazkov: ?

[05:43:30.0000] <ondras>
dglazkov: do I understand correctly that template.content has a different ownerDocument than the document containing the <template> itself?

[06:26:09.0000] <annevk>
ondras: test it

[06:26:18.0000] <annevk>
ondras: but I believe that's true, yes

[07:01:11.0000] <abarth>
ondras: I think they all share a common document that's different from the active document

[07:02:02.0000] <ondras>
and yet, it looks like one can append template.content (or template.content.cloneNode()) into the current document

[07:02:15.0000] <ondras>
which is normally not true, IIRC

[07:02:23.0000] <ondras>
(that's why importNode exists, right?)

[07:02:27.0000] <abarth>
doesn't appendChild adopt automatically these days?

[07:02:36.0000] <ondras>
hmmh, that would explain it

[07:02:42.0000] <abarth>
I think annevk changed that a year or so ago

[07:02:59.0000] <annevk>
yes, implicit adopt is the norm

[07:03:15.0000] <annevk>
in fact, I don't think there's anything that does not do implicit adopt these days

[07:03:20.0000] <annevk>
too convenient

[07:03:27.0000] <ondras>
annevk: I tried in one browser and the ownerDocument differed, yes

[07:03:45.0000] <ondras>
annevk: but this stuff is still pretty raw, so I wanted to make sure it adhers to the spec

[07:04:02.0000] <annevk>
ondras: just read the spec, it's per spec

[07:04:27.0000] <annevk>
ondras: http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#template-contents is quite easy to follow

[07:05:51.0000] <ondras>
annevk: I saw the spec, but the fact that I can append template.content to a different document made me unsure

[07:06:06.0000] <ondras>
annevk: cause automatic adoption is something new to me

[07:09:25.0000] <ondras>
also; <script> nodes in <template> are ignored until appended, but <script> nodes in <link rel="import"> are executed immediately?

[07:09:36.0000] <ondras>
even if the latter case also has a different ownerDocument?

[07:13:16.0000] <abarth>
ondras: that's correct

[07:13:33.0000] <abarth>
script elements in template documents are just like script nodes in documents created via createDocument

[07:13:52.0000] <abarth>
imported documents are different in that they execute

[07:13:58.0000] <abarth>
(otherwise they'd be kind of useless)

[07:14:44.0000] <ondras>
abarth: okay, thanks for explanation. I am considering the best layout of features (html, js, imports, ...) for a "web components" overview talk + sample realization

[07:15:07.0000] <abarth>
neat

[07:15:14.0000] <ondras>
abarth: so typically a custom element is defined within an imported document; furthermore, its dom is specified in a <template> local to that import?

[07:17:10.0000] <annevk>
abarth: if HTML imports become DocumentFragment, they'd no longer execute I guess, might need tweaks for that...

[07:17:32.0000] <abarth>
ondras: correct

[07:18:16.0000] <ondras>
abarth: and the <template> is generally not accidentaly accessible from within the host page

[07:18:31.0000] <ondras>
abarth: one would need to do link.import.querySelector(...) to reach it

[07:24:46.0000] <abarth>
ondras: that I'm not sure how best to answer

[07:25:12.0000] <abarth>
you're right that the contents of the template aren't part of the document and so aren't accidentially accessible via querySelector

[07:26:01.0000] <ondras>
abarth: I understand that typically the host is not going to access the template

[07:26:07.0000] <ondras>
because it contradicts the best practices

[07:26:10.0000] <ondras>
or does it?

[07:26:59.0000] <abarth>
someone needs to access the template, but typically you'll use a templating library that does that work for you

[07:27:06.0000] <ondras>
that is what I am somewhat missing. The specs are available, introductory articles as well. But "recommended practices" along with relevant argumentation...

[07:27:14.0000] <ondras>
abarth: I was expecting a script inside the import to access it

[07:27:17.0000] <abarth>
e.g., you'll have {{ ...  }} in your template that the library will fill in

[07:27:25.0000] <ondras>
and to use it as a shadowRoot for a customElement

[07:27:34.0000] <abarth>
there are different layers to the system

[07:27:44.0000] <abarth>
layers like <template> don't have much of an opinion

[07:27:50.0000] <ondras>
let's assume I want to use only existing standards

[07:27:53.0000] <ondras>
so no library code

[07:28:09.0000] <abarth>
in that case, you'll need to form your own opinion about how best to use these tools

[07:28:27.0000] <abarth>
<template> is a way of building a DOM "off to the side"

[07:28:39.0000] <abarth>
which is useful for making a template system

[07:29:13.0000] <abarth>
but it doesn't itself provide a syntax or mechanism for filling in the template and generating the DOM to display

[07:29:30.0000] <abarth>
that's left open for JavaScript libraries to decide

[07:29:40.0000] <ondras>
hmm

[07:29:50.0000] <Domenic_>
<template> is just <script type="text/x-my-template"> but with some preparsing advantages

[07:29:50.0000] <ondras>
I thought custom elements / shadow dom is a natural way to do so

[07:30:17.0000] <abarth>
yes, these tools are designed to work well together

[07:30:25.0000] <abarth>
but they don't force you to combine them in any specific way

[07:30:31.0000] <ondras>
Domenic_: well it is not suggested to put a valid HTML markup inside a <template> ?

[07:30:49.0000] <Domenic_>
ondras: i don't understand the question

[07:30:51.0000] <ondras>
Domenic_: because some people put unholy shit into <script type="my-own-template-system">

[07:30:51.0000] <abarth>
you can put HTML markup inside <template>

[07:31:05.0000] <abarth>
the script approach defers parsing

[07:31:06.0000] <ondras>
yes, I know I can. and I thought I *should*

[07:31:11.0000] <abarth>
it just contains a sequence of characters

[07:31:20.0000] <abarth>
<template> does the parsing at the same time as everything else

[07:31:28.0000] <abarth>
so it produces a DOM tree outside of the main document

[07:31:34.0000] <ondras>
yeah, but <template> implies a valid DOM inside of it

[07:31:41.0000] <Domenic_>
nope

[07:31:45.0000] <ondras>
which is not the case for <script type="custom">

[07:31:51.0000] <ondras>
nope? hm.

[07:31:53.0000] <Domenic_>
or, well, yes, but pretty much everything is a valid dom

[07:33:27.0000] <Domenic_>
i guess what i mean is "parseable" not "valid"

[07:33:43.0000] <ondras>
okay

[07:33:45.0000] <ondras>
I see your point

[07:34:08.0000] <ondras>
people should put whatever they want into <template> and make sure they fill it with data accordingly

[07:34:41.0000] <ondras>
so my question probably is, what is the recommended way of passing the filled-with-data template to the host document

[07:35:37.0000] <ondras>
Failed to execute 'write' on 'Document': It isn't possible to write into a document from an asynchronously-loaded external script unless it is explicitly opened.

[07:35:40.0000] <ondras>
darn!

[07:35:52.0000] <ondras>
(doc.write inside of an import)

[07:36:01.0000] <ondras>
so this api will need an async way of loading.

[07:36:28.0000] <abarth>
ondras: there isn't a recommend way

[07:36:36.0000] <abarth>
ondras: that's up to library authors to decide

[07:36:55.0000] <ondras>
ok

[07:37:06.0000] <abarth>
ondras: I can give you some links to libraries that have opinions on that topic, but they all do things differently

[07:37:26.0000] <abarth>
ondras: <template> is a hammer.  What you build with it is up to you.

[07:37:48.0000] <ondras>
abarth: I will try a non-library approach and see what comes out. Thanks anyway.

[07:38:01.0000] <abarth>
a simple thing you can try

[07:38:07.0000] <abarth>
is cloning the contents of the template

[07:38:12.0000] <abarth>
and appending them to the DOM

[07:38:18.0000] <ondras>
obviously

[07:38:23.0000] <ondras>
(and that works fine, yes)

[07:38:30.0000] <Domenic_>
it's a pretty cool hammer though. e.g. consider how annoying it was to change <img src="{{src}}"> to <img src="real-src.gif"> with just <script type="text/my-template">.

[07:38:35.0000] <ondras>
but what part of the host-import duet shall do that?

[07:39:25.0000] <ondras>
Domenic_: how exactly would you re-word this example using a <template>?

[07:39:41.0000] <Domenic_>
ondras: which example?

[07:39:48.0000] <ondras>
715:38 < Domenic_> it's a pretty cool hammer though. e.g. consider how annoying it was to change <img src="{{src}}"> to <img src="real-src.gif"> with just <script type="text/my-template">.

[07:40:08.0000] <Domenic_>
sure. with <script> you had to do string manipulation. with <template> you can just access the inert DOM inside the template

[07:40:14.0000] <ondras>
ah, ok

[07:40:33.0000] <ondras>
I thought the <script> version could leverage some DOM manipulation as well

[07:40:43.0000] <Domenic_>
nah, cuz it's just a blob of unparsed text

[07:40:54.0000] <ondras>
Domenic_: well one can put it inside a <div> or so...

[07:41:08.0000] <Domenic_>
then you get a 404 for {{src}}

[07:41:12.0000] <ondras>
true.

[07:41:19.0000] <Domenic_>
<template> gives you the inertness

[07:41:33.0000] <ondras>
which is cool, indeed

[07:41:53.0000] <ondras>
but probably not the best tool for my current use case of an interactive map

[07:42:09.0000] <ondras>
which does not have any relevant templatable content, I guess

[07:42:35.0000] <Domenic_>
yeah, if you're not looking for "a better <script type="text/my-template">," you probably don't want <template>.

[07:42:44.0000] <ondras>
I am not

[07:42:52.0000] <ondras>
15:14 < ondras> abarth: okay, thanks for explanation. I am considering the best layout of features (html, js, imports, ...) for a "web components" overview talk + sample realization

[07:43:26.0000] <ondras>
my company is offering a mapping JS API (similar to gmaps api), so it would be natural to demo web components using <our-own-map> or so

[07:43:58.0000] <Domenic_>
yeah, just custom elements, maybe shadow DOM, are probably what you want here

[07:44:01.0000] <abarth>
ondras: yep

[07:44:20.0000] <abarth>
ondras: when your custom element gets created, you might have a template to instantiate

[07:44:36.0000] <abarth>
ondras: and you can put the instance in the shadow

[07:44:44.0000] <abarth>
ondras: that's the general idea :

[07:44:46.0000] <abarth>
:)

[07:44:46.0000] <ondras>
that is what I see in many examples

[07:44:51.0000] <ondras>
but not very suitable for a map

[07:45:22.0000] <ondras>
custom elements, shadowdom, imports

[07:45:30.0000] <ondras>
sounds like a useful combo for my case.

[07:45:39.0000] <ondras>
template will be demoed elsewhere

[07:46:54.0000] <abarth>
it still might be useful...  consider the case where there are many our-own-map elements

[07:47:09.0000] <abarth>
you might want to parse the DOM for the inside of the element once

[07:47:13.0000] <abarth>
and then just clone it for each instance

[07:47:33.0000] <abarth>
maybe for a map you don't expect many instances per page

[07:47:34.0000] <ondras>
the DOM for the inside is built by the JS API script

[07:47:48.0000] <ondras>
which loads all the map layer tiles, draws controls etc

[07:47:54.0000] <abarth>
that works too

[07:51:32.0000] <ondras>
one more question

[07:51:33.0000] <ondras>
http://w3c.github.io/webcomponents/explainer/

[07:51:50.0000] <ondras>
the this._root property name. chosen arbitrarily, or is the "_root" some pre-defined reserved name?

[07:52:16.0000] <abarth>
it's just arbitrary

[07:52:28.0000] <abarth>
could be anything you like

[07:52:47.0000] <ondras>
okay

[07:53:12.0000] <abarth>
the idea is that you don't want to lose track of the shadow root

[07:53:22.0000] <abarth>
because it's your window into the hidden part of the element

[08:10:56.0000] <ondras>
abarth: so now my custom element is lacking a display:block declaration, although it extends HTMLDivElement.prototype

[08:11:14.0000] <ondras>
abarth: I wonder what am I doing wrong

[08:11:24.0000] <abarth>
ondras: yep.  extending HTMLDivElement.prototype doesn't make you a block

[08:11:30.0000] <abarth>
you need to use CSS for that

[08:11:41.0000] <ondras>
interesting

[08:11:58.0000] <abarth>
<style>my-map { display: block; }</style>

[08:12:04.0000] <abarth>
if you're in shadow dom:

[08:12:18.0000] <abarth>
<style>:host { display: block; }</style>

[08:12:26.0000] <abarth>
lets you avoid repeating the name of your element

[08:12:31.0000] <ondras>
neat

[08:13:08.0000] <abarth>
that's just because unknown elements are display: inline in browsers

[08:13:29.0000] <ondras>
now these styles

[08:13:40.0000] <ondras>
shall be inside of my <template> I guess

[08:13:48.0000] <ondras>
the only reason for its existence!

[08:13:52.0000] <ondras>
also, <style scoped>, right?

[08:14:06.0000] <abarth>
styles are automatically scoped to their shadow tree

[08:14:25.0000] <abarth>
if you're using JS to build the test of your dom, you can just add the style element with JS too

[08:15:07.0000] <ondras>
I will be using <template> in the end, for two reasons

[08:15:23.0000] <ondras>
first, to provide a <style> node for that :host declaration

[08:15:30.0000] <ondras>
second, the map needs a container to build itself in

[08:15:38.0000] <ondras>
and the shadow root is not a suitable container itself.

[08:16:07.0000] <ondras>
so my template will be like <template> <style> :host { display:block; } div { width:100%;height:100%; }</style> <div></div></template>

[08:16:57.0000] <abarth>
you can give you div an ID if you like

[08:17:13.0000] <abarth>
as long as you put the instance in the shadow, it won't collide with any ids used by the host document

[08:17:17.0000] <ondras>
ok

[08:17:31.0000] <abarth>
the shadow root has a getElementById

[08:17:31.0000] <ondras>
well that is not necessary, querySelector("div") will retrieve it anyway

[08:17:37.0000] <abarth>
that looks inside the shadow

[08:17:47.0000] <abarth>
that's true

[08:19:29.0000] <ondras>
abarth: the attributeChangedCallback does not apply when a width changes, for instance?

[08:32:08.0000] <TabAtkins>
abarth: :host does more than just allow you to avoid repeating the name of your element - you actually *can't* select the host element by its tagname from within the shadow DOM.

[08:32:19.0000] <TabAtkins>
The only thing that matches the host element is :host.

[08:37:30.0000] <Hixie>
zcorpan: dunno, maybe we should changhe it

[09:23:45.0000] <dglazkov>
good morning, Whatwg!

[09:27:19.0000] <SamB>
hmm, what do people think of abusing web fonts for icons (when those icons lack standardized Unicode codepoints)?

[09:28:10.0000] <SamB>
the fallback story seems pretty terrible ...

[09:29:16.0000] <wilhelm_>
I use them all the time, together with text. It's great.

[09:29:23.0000] <wilhelm_>
On their own, I agree, they're tricky.

[09:29:48.0000] <SamB>
I mean, what about user-agents that can't handle web fonts?

[09:30:52.0000] <wilhelm_>
They see nothing, in the same way as browsers that don't support border-radius don't see rounded corners. What's the problem with that?

[09:33:37.0000] <wilhelm_>
For real-world use, you're down to Android 2.* and Opera Mini lacking proper web font support. They can live with minor cosmetic flaws.

[09:34:26.0000] <wilhelm_>
(I'm assuming you are using icons in addition to text, not as a replacement.)

[09:40:30.0000] <SamB>
wilhelm_: er, how would you arrange that they see nothing, rather than seeing at best a U+FFFD ?

[09:45:37.0000] <wilhelm_>
SamB: s/nothing/U+FFFD

[09:45:58.0000] <wilhelm_>
But retesting this in Android 2.2, my icons are visible...

[10:00:53.0000] <SamB>
I guess it probably doesn't matter as much on sites that demand JavaScript, though I don't know what screenreaders do with such icons ...

[10:02:07.0000] <SamB>
or rather, what you can do with such icons to get screenreaders to leave them alone

[10:03:49.0000] <SamB>
I suppose it's probably fairly safe to use :before rules to add them? (Does anyone support :before but not web fonts?)

[10:05:50.0000] <SamB>
but, anyway, if such icons are present in the HTML as, say, some CJK character, that's going to look VERY bad in elinks, w3m, or any of the Emacs-based browsers ...

[10:06:49.0000] <SamB>
/me imagines a new font-family keyword "none" ...

[10:07:15.0000] <SamB>
(which would be used to end lists)

[11:15:05.0000] <Hixie>
is there a way these days (maybe with flex) to format "label text: [input element]" such that the input element takes up the remaining room on the line?

[11:20:58.0000] <Domenic_>
flex seems like the right tool for that...

[11:26:49.0000] <SamB>
Hixie: takes it up how?

[11:27:05.0000] <Hixie>
like,   if the page is like this:

[11:27:17.0000] <Hixie>
| left edge...               ... right edge |

[11:27:33.0000] <Hixie>
| my label: [my control                   ] |

[11:27:42.0000] <SamB>
oh

[11:27:49.0000] <Hixie>
| my other label: [my other control       ] |

[11:28:00.0000] <SamB>
/me may have been mixing up <input> with <sample> or whatever ...

[11:29:20.0000] <SamB>
/me kind of likes tabular forms sometimes

[11:31:26.0000] <Hixie>
hey, why does firefox not support HTMLInputElement.labels

[11:31:30.0000] <Hixie>
boo

[11:55:22.0000] <gsnedders>
/me is having one of those days where his life would be simpler if the spec's tokenizer was finite state

[11:55:58.0000] <gsnedders>
(it's not, the temporary buffer has an unbounded finite length, so there are infinitely many possible values it can hold, thus the whole machine is infinite state)

[11:57:11.0000] <gsnedders>
Also CDATA sections (through depending on the stack of open elements) makes it infinite state.

[12:20:08.0000] <SamB>
gsnedders: hmm.

[12:20:20.0000] <SamB>
can you say "denial of service"?

[12:20:39.0000] <SamB>
though I guess just a big DOM does the same ...

[12:46:43.0000] <gsnedders>
SamB: It's linear in the input size, so it's no worse than any other long input.

[12:47:06.0000] <SamB>
yeah

[12:47:25.0000] <gsnedders>
It's not a problem, it's just annoying to model, because finite state models are easier to work with :)

[12:48:10.0000] <SamB>
you mean like modeling it in coq or something?

[12:48:38.0000] <gsnedders>
Well, in a model checker and not a theorem prover, but yes.

[12:49:01.0000] <SamB>
hmm, I guess I don't know what a model checker actually is ...

[12:49:59.0000] <gsnedders>
Model checking is essentially checking that a proper holds given a model of a system.

[12:50:02.0000] <gsnedders>
*property

[12:50:19.0000] <gsnedders>
Theorem proving is essentially proving an arbitrary theorem. :)

[12:51:03.0000] <SamB>
so ... a sort of specialized theorem prover then?

[12:51:13.0000] <gsnedders>
Essentially, yes

[13:10:10.0000] <Hixie>
TabAtkins: yt?

[13:10:40.0000] <Hixie>
TabAtkins: i'm trying to use flex with some <input> elements. Does the fact that inputs always have a non-auto 'width' mess up my ability to make them stretch?

[15:31:23.0000] <erlehmann>
gsnedders

[15:31:29.0000] <erlehmann>
gsnedders http://gsnedders.html5.org/outliner/process.py?url=file:///etc/passwd

[15:31:47.0000] <gsnedders>
Um…

[15:31:49.0000] <gsnedders>
That's not good.

[15:31:50.0000] <erlehmann>
http://gsnedders.html5.org/outliner/process.py?url=file:///dev/urandom

[15:31:51.0000] <erlehmann>
:DDDDDDDD

[15:32:00.0000] <erlehmann>
I AM SO CLEVER

[15:32:20.0000] <gsnedders>
Well done, you've found a bug in html5lib.

[15:32:23.0000] <gsnedders>
From /dev/urandom.

[15:33:04.0000] <erlehmann>
gsnedders lol

[15:33:29.0000] <gsnedders>
urllib2.urlopen supports file://!??

[15:33:41.0000] <erlehmann>
snibedi snab

[15:34:06.0000] <erlehmann>
in before i have to change some of my code as well

[15:34:07.0000] <erlehmann>
lel

[15:34:17.0000] <erlehmann>
gsnedders let me look it up what it does open

[15:34:18.0000] <gsnedders>
erlehmann: fixed

[15:34:34.0000] <erlehmann>
gsnedders the bug in html5lib? ;)

[15:34:44.0000] <gsnedders>
erlehmann: nah, that it supported file

[15:35:06.0000] <gsnedders>
Apparently also supported ftp ;P

[15:35:10.0000] <gsnedders>
Now limited to http

[15:36:05.0000] <erlehmann>
gsnedders it is literally the first sentence in the documentation http://docs.python.org/2/library/urllib.html#urllib.urlopen

[15:36:06.0000] <erlehmann>
okay the second

[15:36:08.0000] <erlehmann>
> Open a network object denoted by a URL for reading. If the URL does not have a scheme identifier, or if it has file: as its scheme identifier, this opens a local file (without universal newlines); otherwise it opens a socket to a server somewhere on the network.

[15:36:17.0000] <gsnedders>
I know.

[15:36:17.0000] <gsnedders>
:)

[15:36:24.0000] <gsnedders>
Why would I read the manual? ;P

[15:36:35.0000] <Hixie>
man, that's a frightening default

[15:36:51.0000] <erlehmann>
Hixie why?

[15:37:13.0000] <erlehmann>
it opens arbitrary urls

[15:37:17.0000] <erlehmann>
just as it says

[15:37:25.0000] <Hixie>
because people like gsnedders will write software like process.py and let themselves get owned

[15:37:34.0000] <Hixie>
(and people like me)

[15:37:38.0000] <erlehmann>
well gsnedders should have used requests

[15:37:41.0000] <erlehmann>
but i use urllib as well

[15:37:51.0000] <erlehmann>
so i have an application that goes over a gigabyte dataset

[15:37:54.0000] <gsnedders>
erlehmann: Dude, the whole outliner is just a hack :P

[15:38:08.0000] <erlehmann>
gsnedders don't worry, i just used it to teach a friend the concept of outlines

[15:38:15.0000] <erlehmann>
but i am prone to breaking things

[15:38:24.0000] <gsnedders>
erlehmann: Also, I didn't use requests because it didn't exist until two years after I wrote the outliner

[15:38:33.0000] <erlehmann>
my web hoster even sent me a mail that their new setup has explicitly considered stuff that broke when i tried things in the past

[15:38:38.0000] <erlehmann>
gsnedders you win!

[15:38:45.0000] <erlehmann>
gsnedders the outliner is nice

[15:38:51.0000] <erlehmann>
it helps people to grok outlines

[15:38:56.0000] <erlehmann>
:)

[15:38:59.0000] <gsnedders>
I was going to claim it was because I didn't know about it then. Turns out it didn't exist.

[15:38:59.0000] <erlehmann>
thank you for it

[15:39:12.0000] <erlehmann>
good defense!

[15:39:14.0000] <erlehmann>
best defense

[15:39:32.0000] <gsnedders>
(For the curious, I implemented the algo for the sake of generating TOCs in Anolis. Then people asked me to make it standalone. So I did.)

[15:39:36.0000] <erlehmann>
Hixie i do think the frightening default is thinking „url = http“

[15:39:39.0000] <gsnedders>
(Thus why it's a bit of a hack.)

[15:39:42.0000] <erlehmann>
gsnedders what is anolis?

[15:39:45.0000] <zewt>
Hixie: that's nothing, python's https stuff silently doesn't check server certificates by default

[15:39:57.0000] <erlehmann>
yeah, or imaplib

[15:40:05.0000] <zewt>
i guess they're both insane

[15:40:06.0000] <erlehmann>
offlineimap has this fun thing in the man page

[15:40:15.0000] <gsnedders>
erlehmann: I wouldn't consider file a URL. HTTP, FTP, sure…

[15:40:33.0000] <erlehmann>
       Unfortunately, by default we will not verify the certificate of an IMAP

[15:40:34.0000] <erlehmann>
       TLS/SSL  server  we  connect  to,  so connecting by SSL is no guarantee

[15:40:34.0000] <erlehmann>
       against man-in-the-middle attacks.

[15:40:43.0000] <erlehmann>
gsnedders o.0

[15:40:56.0000] <zewt>
file://foo is a url, of course

[15:41:00.0000] <gsnedders>
erlehmann: file is magic in more ways than one, like javascript

[15:41:13.0000] <zewt>
everything on the web is magic

[15:41:17.0000] <gsnedders>
Well, right. It's a URL, obviously. But it's totally unlike every other URL.

[15:41:27.0000] <Hixie>
javascript: is actually more or less dead as a url scheme!

[15:41:35.0000] <Hixie>
it's limited to special processing during navigation

[15:42:15.0000] <zewt>
seems like lots of urls are totally unlike every other url, heh

[15:42:16.0000] <erlehmann>
gsnedders you are right yes

[15:42:24.0000] <erlehmann>
javascript is the stupidest thing.

[15:42:33.0000] <erlehmann>
zewt yes and i hate it.

[15:42:46.0000] <erlehmann>
blob URLs are magic as well

[15:42:59.0000] <erlehmann>
and i never understood why they were needed. optimization efforts?

[15:43:26.0000] <zewt>
they're the only sensible way to load big blobs into APIs that expect URLs

[15:43:58.0000] <zewt>
(... that we have today, of course)

[15:44:11.0000] <erlehmann>
so it is like „our implementation cannot handle data uri so large“ ?

[15:44:15.0000] <gsnedders>
https://github.com/gsnedders/outliner in case anything else wants to check stuff out

[15:44:19.0000] <zewt>
i guess you could call not using 50 MB data: urls "optimization", i call it not being insane

[15:44:45.0000] <erlehmann>
zewt optimization can always happen behind the scenes.

[15:44:59.0000] <erlehmann>
zewt think lisp machines

[15:45:03.0000] <zewt>
every api that accepts URLs shouldn't have to be optimized to handle being passed a 2 GB string as a URL

[15:45:06.0000] <gsnedders>
erlehmann: How? By somehow magically detecting foo.src = x.url or something?

[15:45:28.0000] <gsnedders>
https://github.com/gsnedders/outliner has the outliner on it

[15:48:09.0000] <erlehmann>
gsnedders i have no idea. let me take my ritalin and look at some use cases.

[15:50:59.0000] <erlehmann>
gsnedders you know the application i wrote could upload arbitrary sound or video files to wikimedia commons!

[15:51:03.0000] <erlehmann>
from the users system

[15:51:07.0000] <erlehmann>
not that it is a bad thing

[15:51:21.0000] <erlehmann>
but similar to your case of having the „outline“ of /etc/passwd, there is nothing tooo bad

[15:51:30.0000] <erlehmann>
unless … /etc/passwd could have triggered a bug in html5lib

[15:51:33.0000] <erlehmann>
like /dev/random

[15:51:35.0000] <erlehmann>
so …

[15:51:50.0000] <erlehmann>
the stack trace would probably have included it

[15:51:53.0000] <gsnedders>
the html5lib bug is harmless

[15:52:04.0000] <gsnedders>
And will get fixed at some point :P

[15:55:02.0000] <erlehmann>
gsnedders MAYBE I FIND A HARMFUL ONE :3

[15:57:15.0000] <gsnedders>
erlehmann: I'm more disconcerted about the fact the default Python version there appears to be 2.6.6!

[15:58:58.0000] <erlehmann>
gsnedders what does that imply?

[15:58:59.0000] <zewt>
2.6 dead long live 2.7

[16:00:41.0000] <erlehmann>
OH LOL

[16:00:47.0000] <erlehmann>
gsnedders wait

[16:00:47.0000] <erlehmann>
this is funny

[16:00:49.0000] <erlehmann>
don't upgrade!

[16:01:07.0000] <gsnedders>
It's not my server! :P

[16:01:13.0000] <erlehmann>
gsnedders okay.

[16:01:15.0000] <erlehmann>
then you CANNOT :D

[16:01:28.0000] <zewt>
"hey this has python 2.6" "it's not mine, baby"

[16:01:29.0000] <erlehmann>
let me confirm some suspicion

[16:05:48.0000] <erlehmann>
gsnedders http://gsnedders.html5.org/outliner/process.py?url=http%3A%2F%2Fdaten.dieweltistgarnichtso.net%2Ftmp%2Fetc_passwd

[16:06:06.0000] <erlehmann>
; curl -sI http://daten.dieweltistgarnichtso.net/tmp/etc_passwd | grep Location

[16:06:06.0000] <erlehmann>
Location: file:///etc/passwd

[16:06:10.0000] <erlehmann>
not my fault urllib2 is so bad!

[16:06:17.0000] <gsnedders>
oh ffs

[16:07:01.0000] <erlehmann>
this is probably like 1% of how homakov must feel every day!

[16:07:06.0000] <erlehmann>
:D

[16:08:34.0000] <erlehmann>
that reminds me of that one time i „audited“ (as in: inserted crap into) a friend's startup web site. i actually got bored of all the XSS.

[16:08:58.0000] <erlehmann>
gsnedders i wonder how to fix that, btw.

[16:09:05.0000] <erlehmann>
like, with still using urllib.

[16:09:42.0000] <Hixie>
(you also have to prevent http:// urls to your intranet)

[16:09:56.0000] <gsnedders>
Hixie: Bah, that's annevk's problem! His server!

[16:10:17.0000] <Hixie>
i jsut mean in general

[16:10:51.0000] <Hixie>
in other news, why is it that every time i want to do a multi-table select, i have to relearn joins from scratch

[16:10:54.0000] <gsnedders>
Did anything except Presto warn at redirects across network boundaries?

[16:11:00.0000] <Hixie>
you'd think it would eventually stick

[16:11:06.0000] <erlehmann>
„Hou also have to prevent http:// urls“ – Ian Hickson, CEO of HTML

[16:11:08.0000] <Hixie>
gsnedders: old IE did

[16:11:22.0000] <Hixie>
/me would be happy to be quoted saying that

[16:11:26.0000] <Hixie>
(https:// everywhere!)

[16:12:12.0000] <erlehmann>
hehe

[16:12:20.0000] <gsnedders>
Hixie: Just prod Xiven, that (was) my normal approach. :P

[16:12:29.0000] <erlehmann>
presto is dead

[16:12:32.0000] <erlehmann>
;_;

[16:13:04.0000] <gsnedders>
Now can I get back to watching TV shows and not worrying about security bugs?

[16:13:19.0000] <gsnedders>
I'm not too worried, it's not like I have anything on there anyway ;)

[16:13:39.0000] <erlehmann>
dunno

[16:14:19.0000] <erlehmann>
TO THE MOON

[16:14:55.0000] <erlehmann>
i think that /etc/passwd trick could be funny

[16:15:03.0000] <gsnedders>
Yeah, totally.

[16:15:15.0000] <gsnedders>
But in this case not that useful unless it thinks it is in a section heading :P

[16:16:12.0000] <erlehmann>
i don't know

[16:16:34.0000] <erlehmann>
i once did do a timing attack on a home grown blog software that used „if input == password“

[16:16:48.0000] <erlehmann>
i could measure it over a high latency umts connection

[16:16:52.0000] <erlehmann>
when having enough trials

[16:16:56.0000] <erlehmann>
(like, hundreds)

[16:17:09.0000] <erlehmann>
just let me think of something.

[16:17:13.0000] <gsnedders>
Is there any JS library anywhere for iterating over the whole document (or a subset thereof) in document order, even in old browsers with non-tree DOMs?

[16:19:32.0000] <Hixie>
gsnedders: you mean even in old IE, or do you really mean even in Netscape 4?

[16:19:50.0000] <Hixie>
or 3 or whatever predates the DOM but still had document.images etc

[16:19:59.0000] <zewt>
not like any system puts passwords in /etc/passwd, heh

[16:20:03.0000] <gsnedders>
Hixie: IE >= 6 mostly

[16:20:11.0000] <Hixie>
you can just walk the DOM in IE6

[16:20:22.0000] <Hixie>
you just have to be careful to not do it via the nextSibling links et al

[16:20:33.0000] <gsnedders>
Just do it based on childNodes?

[16:21:10.0000] <Hixie>
something like that

[16:21:15.0000] <Hixie>
i have a script on hixie.ch that does it

[16:22:21.0000] <gsnedders>
If you can drop me a link to it (doesn't have to be now), would appreciate it

[16:22:53.0000] <Hixie>
http://hixie.ch/tests/adhoc/html/parsing/compat/viewer.html

[16:23:12.0000] <Hixie>
seems to be bitrotted

[16:23:16.0000] <Hixie>
maybe i'm thinking of something else

[16:23:32.0000] <Hixie>
anyway it's not too hard

[16:23:47.0000] <gsnedders>
         if ((navigator.appVersion.indexOf("MSIE") != -1) &&

[16:23:47.0000] <gsnedders>
             (navigator.appVersion.indexOf("Mac") == -1)) {

[16:23:48.0000] <gsnedders>
           // sweet mother of god *whimper*

[16:23:49.0000] <gsnedders>
:)

[16:24:12.0000] <erlehmann>
lel

[16:24:14.0000] <gsnedders>
Thankfully, I don't care about Tasman.

[16:24:45.0000] <gsnedders>
> badmouths Tasman

[16:24:49.0000] <gsnedders>
> tantek instantly leaves

[16:24:54.0000] <Hixie>
that's specifically not tasman

[16:25:22.0000] <erlehmann>
such cases

[16:25:30.0000] <erlehmann>
reminds me to read HTML5 Super Friends

[16:25:34.0000] <erlehmann>
i have not read it in a long time

[16:25:50.0000] <erlehmann>
but recently i started moving my MH folder to the maildir and the whatwg is cause of slow imap access!

[16:25:55.0000] <gsnedders>
Hixie: bah!

[16:25:58.0000] <gsnedders>
Hixie: Like I can read

[16:26:13.0000] <gsnedders>
Hixie: I'm suffering from what I'm calling "dissertation mush" :)

[16:30:37.0000] <TabAtkins>
Hixie: Here now. <input>s should work just fine with flexing.  More details?

[16:31:10.0000] <Hixie>
TabAtkins: i couldn't get it to work. hold on, let me make a live-dom-viewer thing showing the problem

[16:31:14.0000] <TabAtkins>
kk

[16:32:35.0000] <Hixie>
well ok so it worked fine when trying to create a test just now -_-

[16:32:48.0000] <Hixie>
wtf

[16:33:25.0000] <TabAtkins>
Haha

[16:34:30.0000] <Hixie>
TabAtkins: http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2898 is what i was trying to do. dunno what i was doing wrong before.

[16:34:57.0000] <Hixie>
does firefox do flex yet? maybe i was testing in a non-supporting browser?

[16:35:21.0000] <TabAtkins>
Yeah, it does.

[16:40:54.0000] <kbrosnan>
28 for multi

[16:41:00.0000] <kbrosnan>
https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes

[16:42:10.0000] <TabAtkins>
kbrosnan: Yeah, but Hixie's example doesn't use multi-line.


2014-03-22
[05:40:41.0000] <MikeSmith>
☞ /topic WHATWG: http://www.whatwg.org/ -- logs: http://krijnhoetmer.nl/irc-logs/ & http://logbot.glob.com.au/ -- stats: http://gavinsharp.com/irc/whatwg.html -- Please leave your sense of logic at the door, thanks!

[07:55:13.0000] <smaug____>
/me wonders what small 'a' means in the "customize" button of Chrome

[08:33:55.0000] <zewt>
don't suppose there's any way to open a firefox console window for a chrome (browser ui) window

[08:34:14.0000] <gsnedders>
You have to flip some pref, but yes

[08:34:27.0000] <gsnedders>
(I can't remember what pref or how.)

[08:34:31.0000] <zewt>
trying to fix an extension that exploded when I upgraded, and the only way I know to poke at chrome DOM is DOM Explorer, which is pretty bad nowadays

[08:35:23.0000] <zewt>
it's impossible to search for things related to firefox browser chrome, due to that other browser with a terrible choice of name

[08:38:08.0000] <zewt>
found https://bugzilla.mozilla.org/show_bug.cgi?id=860672, but that only gives me the javascript console tab, not the whole console window (inspector, etc)

[08:57:46.0000] <zewt>
had to look to the source to find it, but it's enabling all of devtools.debugger.remote-enabled, devtools.debugger.chrome-enabled and devtools.chrome.enabled, then launching with -jsdebugger

[09:07:58.0000] <zewt>
... but it doesn't show anonymous content

[11:19:40.0000] <abarth>
zewt: it means that it's an "aura" build

[11:19:50.0000] <abarth>
zewt: you're probably on linux

[11:20:01.0000] <abarth>
we're switching the underlying toolkit to aura

[11:23:57.0000] <zewt>
windows, ff28

[11:24:37.0000] <zewt>
looks like https://bugzilla.mozilla.org/show_bug.cgi?id=777674

[11:26:15.0000] <abarth>
oh, sorry, i meant to direct those messages to smaug____ :)

[11:49:12.0000] <smaug____>
abarth: ahaa

[12:42:17.0000] <Ablu>
not sure if this is the right place to ask (if not, please tell me where it is :)): How can i style something out of a <style> tag inside of a shadow dom depending on an hosts attribute?

[12:42:45.0000] <Ablu>
i tried stuff like :host[open] but that does not seem to work

[12:48:27.0000] <Ablu>
hm. i should read better:  That is, in this context the shadow host has no tagname, ID, classes, or attributes, and the only additional information is has is that the :host pseudo-class matches it. (source: http://dev.w3.org/csswg/css-scoping/#host-element)

[12:48:33.0000] <Ablu>
so i guess it is simply not possible

[12:54:37.0000] <Ablu>
well if anyone knows elegant alternatives please let me know :)

[16:23:19.0000] <TabAtkins>
Ablu: :host([open])


2014-03-23
[01:02:21.0000] <Ablu>
TabAtkins: thx. that works

[08:02:41.0000] <zewt>
the "too slow" thing on the spec seems to take forever to disappear now

[08:09:39.0000] <zewt>
sad to remember that typed arrays have two nearly-identical constructors, one of which is a deep copy and the other a shallow copy

[09:38:44.0000] <Hixie>
zewt: i don't think i changed the too slow thing... is your browser slower :-)

[12:50:53.0000] <zewt>
dunno. heh


2014-03-24
[19:47:54.0000] <roc>
anyone have any idea why Safari doesn't supported IndexedDB?

[21:25:30.0000] <MikeSmith>
the definition of "absolute URL" at http://url.spec.whatwg.org/#concept-absolute-url disallows absolute URLs from having a fragment

[23:48:49.0000] <MikeSmith>
http://www.scribd.com/doc/213628421/Exhibit-1871 is pretty interesting

[23:49:24.0000] <MikeSmith>
(by way of roc's blog http://robert.ocallahan.org/2014/03/mozilla-and-silicon-valley-cartel.html)

[00:01:01.0000] <a-ja>
MikeSmith: you do work on validator.nu ?

[00:01:13.0000] <MikeSmith>
a-ja: yup

[00:02:00.0000] <a-ja>
found an inconsistancy between it and w3c's

[00:02:32.0000] <a-ja>
header content on summary element not allowed yet

[00:04:47.0000] <a-ja>
whatwg spec allows it now....fairly recent change (and html5.1 ??? iirc)

[00:14:57.0000] <MikeSmith>
a-ja: I work on the shared backend for validator.nu and the W3C Nu validator but not on the actual http://validator.nu/ or http://html5.validator.nu/ services

[00:16:09.0000] <MikeSmith>
I push changes to http://validator.w3.org/nu/ at least once a week or so but these days http://validator.nu/ and http://html5.validator.nu/ don't get updated with the changes quite as often

[00:23:59.0000] <a-ja>
MikeSmith: related question...if you recall, we chatted a bit about summary role=button and details role=group failing.  so removed both, and validator then complained about missing roles (but didn't say which roles they should be).  help me out?!  :)

[00:37:48.0000] <MikeSmith>
a-ja: if you give me an document or URL I can check

[00:38:09.0000] <a-ja>
MikeSmith: <details id="toc-details" role="group" aria-labelledby="toc-summary" open="open"><summary id="toc-summary" role="button" aria-controls="toc-details" aria-expanded="true" tabindex="0">

[00:38:51.0000] <a-ja>
MikeSmith: vs just: <details id="toc-details" aria-labelledby="toc-summary" open="open"><summary id="toc-summary" aria-controls="toc-details" aria-expanded="true" tabindex="0">

[00:39:11.0000] <MikeSmith>
yeah

[00:40:20.0000] <MikeSmith>
a-ja: so I guess if you use other aria-* attributes on those elements, it's going to say you need the role attribute

[00:40:47.0000] <a-ja>
MikeSmith: perhaps so

[00:40:48.0000] <MikeSmith>
because those particular aria- attributes are only valid for certain roles

[00:41:02.0000] <MikeSmith>
I can't easily fix the error message there

[00:41:53.0000] <MikeSmith>
I wish I could but the fact is the whole aria stuff is so completely baroque and overengineered that we're lucky to have any validator support for it at all

[00:42:19.0000] <MikeSmith>
what's there now has easily cost me more time to work on than any other part of the validator

[00:43:48.0000] <MikeSmith>
and I didn't even do most of the development of the aria support in the validator. hsivonen did. I just worked on top of what he had developed, and it still cost me days and days of time

[00:44:27.0000] <MikeSmith>
so I guess I'll just add role=group to details

[00:44:39.0000] <MikeSmith>
do I need to add role=button to summary also?

[00:44:44.0000] <MikeSmith>
/me checks the spec

[00:45:30.0000] <a-ja1>
not sure either of those match spec right now

[00:46:18.0000] <MikeSmith>
role=summary is a role that supports aria-expanded, so it matches the spec close enough

[00:46:25.0000] <a-ja1>
think it probably just got overlooked at the time

[00:46:27.0000] <a-ja1>
yep

[00:47:01.0000] <MikeSmith>
but

[00:47:16.0000] <MikeSmith>
role is not allowed for summary at all

[00:47:23.0000] <MikeSmith>
explicitly

[00:47:55.0000] <MikeSmith>
http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#concept-role-none

[00:48:05.0000] <MikeSmith>
"The entry "no role", when used as a strong native semantic, means that no role other than presentation can be used."

[00:48:39.0000] <MikeSmith>
if you think that's misguided then you need to file a spec bug

[00:48:50.0000] <MikeSmith>
I can't have the validator violate that constraint

[00:49:44.0000] <MikeSmith>
w3c spec says the same thing:

[00:49:45.0000] <MikeSmith>
http://www.w3.org/html/wg/drafts/html/master/dom.html#concept-role-none

[00:55:13.0000] <a-ja1>
yeah...maybe the answer is "do it in script" rather than in the html

[00:55:54.0000] <MikeSmith>
yeah that's a general solution for getting around aria validation problems

[00:55:57.0000] <a-ja1>
polyfills forever!   :\

[00:56:09.0000] <MikeSmith>
the other solution is to just ignore the errors

[00:56:31.0000] <a-ja1>
mm hmm

[00:56:37.0000] <MikeSmith>
or filter them out at http://validator.w3.org/nu/ with the message filtering option

[01:04:41.0000] <a-ja1>
i have sympathy for the "fix ARIA, the a11y API's, and the screen readers, and stop messing with clean HTML" argument

[01:06:45.0000] <MikeSmith>
yeah

[04:17:07.0000] <mathiasbynens>
what kinds of security vulnerabilities does `showModalDialog`’s “pause JS execution” behavior cause?

[04:26:55.0000] <annevk>
mathiasbynens: its nested event loop behavior is the only one in the platform, which makes for some tricky coding elsewhere, which might lead to exploits

[04:35:31.0000] <mathiasbynens>
annevk: gotcha, thanks

[05:17:58.0000] <annevk>
"I'm not why why Anne thinks an email from February reflects the current thinking of Mozillians on this topic."

[05:18:23.0000] <annevk>
Well, if you're gonna ask one of us in private what the status quo is and that person is not even implementing, you're gonna have a bad time...

[05:19:14.0000] <annevk>
"but recently selectors were renamed again" :-)

[06:16:54.0000] <MikeSmith>
cool, google came up with a way we don't need cookies any more https://code.google.com/p/chromium/issues/detail?id=355541

[06:38:15.0000] <SteveF>
a-ja1: role=button now allowed on <summary> thanks for the heads up it was something I had meant to fix previously https://www.w3.org/Bugs/Public/show_bug.cgi?id=25135

[06:39:17.0000] <SteveF>
a-ja1: have spoken with mike smith, he will update http://validator.w3.org/nu/

[07:02:43.0000] <Jasper>
I remember a little while ago there were meeting notes saying that :before / :after were mistakes.

[07:02:57.0000] <Ms2ger>
As opposed to ::before?

[07:03:06.0000] <Jasper>
erm, I meant ::before / ::after.

[07:03:19.0000] <Jasper>
I believe they were for Adobe's proposal for having multiple ::before / ::after psuedoelements?

[07:04:18.0000] <astearns>
Jasper: that opinion did come up in that discussion, yes

[07:05:53.0000] <Jasper>
It seems like multiple ::before / ::after elements will probably never happen for those reasons.

[07:06:20.0000] <Jasper>
Would anybody be able to find the meeting notes for me?

[07:06:59.0000] <astearns>
Jasper: the current multiple before/after proposal was dead on arrival

[07:07:08.0000] <Jasper>
Hm

[07:07:20.0000] <astearns>
but more ways of creating boxes in CSS keeps coming up as a need

[07:07:36.0000] <astearns>
so something in that area may eventually happen

[07:08:04.0000] <Jasper>
I remember the issue being mostly related to accessibility, scriptability and poor devtools support.

[07:09:46.0000] <astearns>
IMO, the main issue is scriptability - pseudo-elements will be inadequate until/unless we have better script support for them

[07:11:11.0000] <Jasper>
Aha, found it! http://lists.w3.org/Archives/Public/www-style/2012Aug/0771.html

[08:05:00.0000] <annevk>
https://twitter.com/thijs/status/448064463498133504 o_O

[08:07:13.0000] <annevk>
Oh I'm late to the party

[08:16:25.0000] <ondras>
but it is amusing anyway.

[08:20:26.0000] <annevk>
WHATWG list is pretty close to a <canvas> list these days

[08:24:07.0000] <jcgregorio>
canvas \o/ :-)

[08:37:07.0000] <dglazkov>
good morning, Whatwg!

[08:44:22.0000] <Hixie>
MikeSmith: btw, changing things in scripts silences the validator, but doesn't make them any more valid

[08:45:13.0000] <Hixie>
(why would <summary> get role=button? it's not interactive. am i missing something?)

[08:46:30.0000] <wilhelm>
Toggling its parent is interactive, presumably.

[08:47:53.0000] <Hixie>
well the interactive part of the <details> should be interactive, sure, but it's not in the DOM, so...

[08:48:31.0000] <gsnedders>
/me sighs

[08:48:59.0000] <gsnedders>
I feel like I could've saved myself months by showing everything I managed about the tokenizer through a proof by exhaustion...

[08:49:07.0000] <Hixie>
heh

[08:49:52.0000] <Ms2ger>
gsnedders, so, what have you learned? :)

[08:49:58.0000] <Ms2ger>
Why the AAA works?

[08:50:08.0000] <gsnedders>
hah! like I managed to model the tree constructor.

[08:50:09.0000] <gsnedders>
/me cries

[08:50:19.0000] <jgraham>
So you are saying that your decision not to use proof by exhaustion led to exhaustion?

[08:50:28.0000] <gsnedders>
Yes, yes entirely.

[08:51:49.0000] <gsnedders>
Does anyone want to try and prove that the tree constructor cannot be implemented by a pushdown automaton?

[08:52:13.0000] <Ms2ger>
No

[08:52:19.0000] <jgraham>
gsnedders: You?

[08:52:23.0000] <Ms2ger>
I would love to see a proof that it can be

[08:52:37.0000] <gsnedders>
I don't have time to before the deadline, sadly.

[09:03:29.0000] <gsnedders>
Ms2ger: I simultaneously suspect it is and that it is not. :(

[09:06:07.0000] <Ms2ger>
gsnedders, so your belief is in a state of superposition?

[09:06:42.0000] <gsnedders>
Actually, does the parsing of <p><table><p> not show that HTML cannot be context-free?

[09:14:51.0000] <SteveF>
hixie: implementations appear to disagree with you e.g. in blink summary is focusable control

[09:15:06.0000] <Hixie>
yeah, that's a known bug in blink

[09:15:52.0000] <SteveF>
bug number?

[09:16:18.0000] <Hixie>
no idea

[09:30:38.0000] <annevk>
Hixie: if an exception is thrown from a compound microtask subtask, do you handle that? or should I be catching exceptions?

[09:31:16.0000] <annevk>
gsnedders: what does context-free mean?

[09:31:32.0000] <Hixie>
interesting question

[09:32:05.0000] <Hixie>
a subtask is just a set of steps

[09:32:11.0000] <Hixie>
so i guess it depends on how you're invoking the script

[09:32:11.0000] <annevk>
I was looking at https://www.w3.org/Bugs/Public/show_bug.cgi?id=17713#c16 and wondering if what bz said under 11) is still the case

[09:32:47.0000] <annevk>
I just say "invoke callback with x and y"

[09:33:28.0000] <Hixie>
how does webidl define "invoke callback"?

[09:34:39.0000] <annevk>
Hixie: http://heycam.github.io/webidl/#es-invoking-callback-functions it just propagates

[09:34:49.0000] <annevk>
Hixie: unless it's part of a promise returning thing

[09:38:01.0000] <annevk>
Hixie: is http://www.whatwg.org/specs/web-apps/current-work/#report-the-error what I should be invoking?

[09:39:12.0000] <Hixie>
we should just have a single function that invokes a callback, catches exceptions and reports them

[09:39:17.0000] <Hixie>
but yes, i think so

[09:39:46.0000] <annevk>
hmm yeah, if you could provide that shorthand...

[09:40:33.0000] <annevk>
Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25138

[09:47:47.0000] <Hixie>
annevk: will do

[09:48:20.0000] <Hixie>
(i'm mostly afk this week btw, won't be getting much done; sorry)

[09:48:45.0000] <Hixie>
annevk: should i wait for that bug to be assigned to me once heycam has seen it?

[09:49:28.0000] <annevk>
Hixie: either way I guess, I'd still like a <dfn> in IDL

[09:49:33.0000] <annevk>
Hixie: I could file a separate one on you

[09:50:16.0000] <Hixie>
either way. i commented on that idl bug.

[09:52:26.0000] <TabAtkins>
annevk: https://en.wikipedia.org/wiki/Context-free_grammar

[09:52:39.0000] <TabAtkins>
annevk: A grammar that doesn't take the surrounding context into account when expanding things.

[09:52:39.0000] <annevk>
Hixie: ta

[10:49:08.0000] <Hixie>
i can't believe how inefficient mediawiki and wordpress are

[10:49:46.0000] <Hixie>
i host literally dozens of sites on this one machine, including multiple long-lived websocket servers and so on, and all the cpu and ram goes to the php scripts running wiki.whatwg.org and blog.whatwg.org.

[10:50:08.0000] <Ms2ger>
Blame php :)

[10:51:28.0000] <annevk>
Hixie: oooh, so me hammering svn.whatwg.org is fine? :p

[10:51:46.0000] <annevk>
Hixie: I tried to get foolip to rewrite the setup, he put on his list of things to do before he dies

[10:58:50.0000] <foolip>
Hixie: is there any particular reason you haven't switched to git, other than not having a particular reason to do it?

[10:59:02.0000] <Ms2ger>
Eww, git

[10:59:08.0000] <Hixie>
not having any reason to do it is the main reason i don't do most things :-)

[10:59:16.0000] <Ms2ger>
Why would you ever use git if you weren't forced to?

[10:59:17.0000] <foolip>
:)

[11:00:04.0000] <Hixie>
annevk: svn stuff seems to all fall under apache, so i've no way to tell if it's svn or just regular web traffic

[11:00:06.0000] <jgraham>
I mainly use it to wind up Ms2ger

[11:00:24.0000] <Ms2ger>
:D

[11:00:42.0000] <Hixie>
annevk: (apache usage is highish, but i expect that on a machine with 60+ domains hosted)

[11:00:45.0000] <foolip>
Ms2ger: I use Git wherever possible, like if I need to diff two files I add them to git to get the pretty colors :)

[11:00:50.0000] <Hixie>
(it's nowhere near as high as i'd expect, really)

[11:01:10.0000] <Hixie>
foolip: i use emacs to get pretty colours

[11:01:43.0000] <foolip>
Hixie: I suspected you used Emacs from the way the  source is wrapped :)

[11:02:15.0000] <tantek>
Hixie, is it PHP or is it MySQL?

[11:02:19.0000] <Ablu>
foolip: you do not need to add files to diff them

[11:02:21.0000] <Hixie>
foolip: the first line wasn't a giveaway? (-*- mode: Text; fill-column: 100 -*-)

[11:02:25.0000] <Ablu>
git diff <file1> <file2> works

[11:02:28.0000] <Hixie>
tantek: php

[11:02:29.0000] <Ablu>
even if they are not in git

[11:02:34.0000] <Hixie>
tantek: the mysql stuff is on a different box entirely

[11:02:40.0000] <foolip>
Hixie: well, and the comment about emacs lines in the WebVTT spec

[11:02:50.0000] <Hixie>
heh

[11:03:04.0000] <Hixie>
i have "f6" in emacs bound to "open the html spec" :-)

[11:03:05.0000] <foolip>
Ablu: cool, I didn't know that :)

[11:03:26.0000] <foolip>
but I'll probably keep using Git where not needed to spite Ms2ger

[11:04:18.0000] <Ms2ger>
foolip, that's probably a better reason than most to use git

[11:04:36.0000] <foolip>
Ms2ger: dare I ask what you would rather use?

[11:04:57.0000] <Ms2ger>
Take a guess

[11:04:59.0000] <Hixie>
git seems reasonable to use if you're working on a colaborative distributed project, like linux

[11:05:00.0000] <foolip>
hg

[11:05:13.0000] <Hixie>
if you're one person editing one file, git seems kinda pointless.

[11:05:25.0000] <Ms2ger>
Correct

[11:05:30.0000] <jgraham>
Hixie: It seems significantly better than svn for either case

[11:05:52.0000] <Hixie>
how is it better than svn for solo use?

[11:05:55.0000] <Ms2ger>
Hixie, actually, I found one person editing to be the only reasonable way to use git :)

[11:06:06.0000] <foolip>
Hixie: I guess, unless you're already used to Git for all other projects

[11:06:18.0000] <Hixie>
well sure, if you're already used to it

[11:06:40.0000] <Hixie>
in my case, when i had to pick a version control system, all i had experienced so far was cvs

[11:06:43.0000] <Ablu>
why not to use git: http://vimeo.com/74377782

[11:06:45.0000] <Hixie>
and git didn't exist

[11:07:11.0000] <TabAtkins>
I definitely vastly prefer git over svn for personal projects as well.

[11:07:16.0000] <Ms2ger>
/me gets off Hixie's lawn

[11:07:21.0000] <jgraham>
Ah, hg, the vcs that's so broken it needs a whole different system to allow you to work locally. A system that itself is so broken it requires a whole second repository to make it not astonishingly likely to lose your work

[11:07:29.0000] <TabAtkins>
The distributed-ness of it is nice for multi-user projects, sure, but most of the benefits are in personal use.

[11:08:02.0000] <Hixie>
i'm open to being convinced, but i'm failing to see anything that i need from a version control system that i don't already have :-)

[11:08:07.0000] <Hixie>
mostly i want commit, and blame.

[11:08:08.0000] <Ms2ger>
jgraham, hey, you were already winding me up :)

[11:08:15.0000] <Hixie>
and diff

[11:08:26.0000] <Hixie>
and monotonically increasing version numbers

[11:08:31.0000] <Hixie>
svn gives me all that

[11:08:38.0000] <foolip>
Hixie: I asked mostly to find out if it was because of dependencies like web-apps-tracker, in which case I would have prioritized fixing that, but if you're happy the way things are then all is well

[11:08:42.0000] <Ms2ger>
git gives... blame, I guess

[11:08:49.0000] <Hixie>
oh and also the ability to quickly graft different parts of a repo into my directory tree

[11:08:55.0000] <Hixie>
svn supports that too, luckily

[11:09:57.0000] <Hixie>
foolip: oh, no. my build system already supports committing to multiple repos anyway, so it wouldn't be an issue for me to change the canonical one.

[11:10:10.0000] <Hixie>
foolip: without breaking back compat.

[11:10:34.0000] <foolip>
oh, ok

[11:11:33.0000] <foolip>
well, the mirror works for me, except when annevk makes commits and it broke :)

[11:11:45.0000] <foolip>
(fixed now)

[11:11:54.0000] <Hixie>
anne committed to the mirror? o_O

[11:12:21.0000] <foolip>
no, r8556 and r8557 in your repo was some test commits

[11:12:46.0000] <foolip>
my script broke because it only had an entry in AUTHORS for you

[11:13:25.0000] <Hixie>
oh hey

[11:13:30.0000] <Hixie>
i didn't even know anne had access to do that!

[11:14:33.0000] <foolip>
well, he broke your 8 year streak of commits :)

[11:15:25.0000] <Hixie>
hey look at that, hsivonen has access too

[11:15:29.0000] <Hixie>
i wonder when i gave them access :-)

[11:16:25.0000] <SamB>
hmm, the spoiler tag in http://codegolf.stackexchange.com/questions/24401/so-obviously-p-np acts a bit funny WRT the hyperlink :-)

[11:17:04.0000] <Hixie>
looks like it was just two empty commits

[11:17:30.0000] <foolip>
a test.txt was added and removed. no commit message though

[11:18:04.0000] <Hixie>
weird

[11:18:09.0000] <Hixie>
says something about dreamhost tech support

[11:18:19.0000] <Hixie>
annevk: any idea what the story is with the test.txt file?

[11:21:08.0000] <TabAtkins>
SamB: <blockquote class="spoiler"> does a 'color' transition to/from transparent over .5s.  But hyperlinks already have a transition rule for 'color' going over .2s, intended for a more subtle color shift when hovering.  So the blockquote's 'color' rule overrides, but the a's transition wins, and you get the weird extra-fast transition.

[11:22:24.0000] <SamB>
oh, bonus, an explanation

[11:22:34.0000] <Hixie>
foolip: (did your script get invoked?)

[11:25:42.0000] <TabAtkins>
SamB: That's why you should do silly tricks like a color transition to 'transparent'.  Use 'opacity' on the block element, like God intended, even if it means you need a wrapper element inside the spoiler element.

[11:26:00.0000] <TabAtkins>
s/you should/you shouldn't/

[11:26:42.0000] <foolip>
Hixie: not by your ping, the last one was 2014-03-19T22:02:24.506Z

[11:27:05.0000] <foolip>
but I also have it as a daily cron job in case of network failures or whatever

[11:40:40.0000] <SamB>
TabAtkins: sigh, wrapper elements :-(

[11:42:25.0000] <SamB>
/me didn't even style this site, actually

[11:43:10.0000] <annevk-cloud>
Hixie: DH support

[11:56:57.0000] <Hixie>
foolip: ah, ok

[11:57:06.0000] <Hixie>
annevk-cloud: ?

[12:08:03.0000] <gsnedders>
annevk-cloud: Importantly, pushdown automata and context-free grammars are equivilient.

[12:09:03.0000] <gsnedders>
annevk-cloud: So if you can show no context-free grammar can express the language, it is implied there is no pushdown automaton

[12:11:04.0000] <SamB>
hmm, U+231B HOURGLASS is nice

[12:14:15.0000] <annevk>
Hixie: I contacted DreamHost support about svn timing out, I assume they ran a test...

[12:14:27.0000] <Hixie>
ah

[12:14:29.0000] <annevk>
Hixie: not timing out, not having enough space allocated to calculate a diff or some such

[12:14:43.0000] <Hixie>
ah, yeah, i'd already told them /tmp was full

[12:14:54.0000] <annevk>
Hixie: k

[12:19:06.0000] <SamB>
what do you have: a vhost, or a full VM?

[12:22:01.0000] <annevk>
Hixie: seems weird that I have commit access btw, you might want to revoke that

[12:22:15.0000] <annevk>
Hixie: I have no idea how DH got hold of say, the credentials...

[12:22:32.0000] <Hixie>
yeah...

[12:23:31.0000] <Hixie>
k, i revoked your account. let me know if you find a reason you had it, so i can add it back.

[12:36:42.0000] <annevk>
cool

[14:28:36.0000] <SamB>
what was the original motivation for this behaviour: http://updates.html5rocks.com/2012/09/Stacking-Changes-Coming-to-position-fixed-elements

[14:35:01.0000] <SamB>
/me mumbles about no decent anchors for e.g. text/plain ...

[14:54:04.0000] <TabAtkins>
SamB: Motivation is that fixpos is crazytimes, and allowing things in the page to sandwich between descendants of a fixpos is even more crazytimes.

[14:54:36.0000] <TabAtkins>
Particularly on mobile, where (a) fixpos is *extra* crazy, due to the virtual viewport, and (b) gpu resources are smaller.

[14:54:50.0000] <SamB>
ah, yeah, virtual viewport, right

[14:55:06.0000] <TabAtkins>
(b) is important, because we put fixpos things on their own gpu layer so we can scroll decently, and if things can sandwich between, we have to split the fixpos into 2 or more layers.

[14:55:15.0000] <SamB>
I was kind of expecting an efficiency-related answer

[14:55:17.0000] <TabAtkins>
Making it always a stackign context lets us always use a single layer.

[14:55:33.0000] <SamB>
like "saves rendering resources"

[14:55:41.0000] <TabAtkins>
Yup, that's basically it.

[14:55:55.0000] <SamB>
wasn't quite sure if that was going to be time or space though

[14:56:21.0000] <SamB>
same reason I don't like those background images that don't scroll

[14:56:29.0000] <SamB>
I want to kill them dead

[14:57:33.0000] <SamB>
they literally tear

[15:04:37.0000] <Hixie>
isn't fix pos always a stacking context per CSS2.1:E ?

[15:06:07.0000] <TabAtkins>
Hixie: Nope, not if z-index:auto

[15:06:56.0000] <Hixie>
huh

[15:07:27.0000] <Hixie>
well we should fix that

[16:07:12.0000] <cabanier>
TabAtkins: stacking context does not always create a gpu layer

[16:27:52.0000] <TabAtkins>
cabanier: No, but fixposes do.

[16:28:01.0000] <TabAtkins>
Hixie: It is fixed, now.


2014-03-25
[17:33:25.0000] <Hixie>
TabAtkins: cool

[17:33:55.0000] <Hixie>
TabAtkins: (where? i thought E was still the canonical source for that stuff... 2.1 isn't "living" anymore is it?)

[17:34:15.0000] <TabAtkins>
Not really. We *sometimes* update 2.1, but not always.

[17:34:36.0000] <TabAtkins>
Also: the update for this goes in the Positioning spec, which is semi-dead at the moment.  (Rossen from IE is picking it back up now.)

[17:43:39.0000] <MikeSmith>
Hixie: about the inject-ARIA-by-script-instead thing, yeah sure I realize that doesn't make the documents an less invalid if the result has conformance errors. I just wish we had a different culture around validation, where people did have "I must eliminate all errors and get a 'You passed!'" as a goal of using the validator

[17:44:31.0000] <MikeSmith>
http://validator.w3.org/nu/ no longer emits a message saying whether a document is valid or not

[17:44:50.0000] <MikeSmith>
it just emits no errors

[17:45:07.0000] <MikeSmith>
and then says "Document checking completed."

[17:45:50.0000] <MikeSmith>
and if it's not valid, it emits the errors and then at the end still just says, "Document checking completed."

[17:46:24.0000] <MikeSmith>
(valid or invalidate as far as the subset of requirements it's actually checking)

[17:47:12.0000] <a-ja>
MikeSmith: <aside>fwiw, noticed that w3c validator doesn't give link for validating css unless there's no errors in html</aside>

[17:47:27.0000] <MikeSmith>
does anybody know if I can have the microformats wiki e-mail me a notification any time a page on my watchlist is changes?

[17:47:51.0000] <MikeSmith>
a-ja: I dunno what you mean by "give link for validating css"

[17:48:08.0000] <MikeSmith>
I don't work on the main w3c validator anyway

[17:48:15.0000] <MikeSmith>
nobody does any longer

[17:48:22.0000] <MikeSmith>
it's essentially unmaintained

[17:48:44.0000] <MikeSmith>
I only work on the validator.nu backend and http://validator.w3.org/nu/

[17:49:18.0000] <a-ja>
MikeSmith: on no errors, results page gives you a link to validate your css, too

[17:49:35.0000] <MikeSmith>
I see

[17:49:50.0000] <MikeSmith>
a-ja: anyway you really shouldn't be using http://validator.w3.org/

[17:49:59.0000] <MikeSmith>
I wish you wouldn't

[17:50:14.0000] <MikeSmith>
please just http://validator.w3.org/nu/ instead

[17:50:43.0000] <MikeSmith>
there's no good reason to use http://validator.w3.org/, ever

[17:51:25.0000] <a-ja>
only use at all cuz it's easy from "referrer" links

[17:57:01.0000] <a-ja>
MikeSmith: btw, as of sometime today, w3c's no longer gives errors on details role=group and summary role=button

[17:57:55.0000] <a-ja>
just the warning about details not being ready for primetime yet

[17:58:55.0000] <a-ja>
so _someone_ must be doing _some_ maintenance

[17:59:44.0000] <MikeSmith>
a-ja: I made those changes

[17:59:50.0000] <a-ja>
ah :)

[18:00:23.0000] <MikeSmith>
for HTML5 validation http://validator.w3.org/ uses the same backend from http://validator.w3.org/nu/

[18:00:38.0000] <MikeSmith>
poorly

[18:04:32.0000] <Hixie>
MikeSmith: yeah... i'm just saying that if the goal is no validation errors, then moving stuff to script does nothing useful, and if the goal is no validator messages, then there's a much simpler way of doing it.

[18:05:12.0000] <MikeSmith>
Hixie: sure

[18:07:06.0000] <Hixie>
we really should find some way to do live validatior checking in these debugging tools

[18:07:48.0000] <a-ja>
i'd note that some org's have "no errors from a validator" requirement for WCAG compliance

[18:08:01.0000] <a-ja>
mostly govt

[18:08:07.0000] <MikeSmith>
a-ja: those orgs are broken

[18:08:54.0000] <MikeSmith>
a-ja: see http://validator.w3.org/nu/about.html

[18:09:24.0000] <Hixie>
"e broken

[18:09:26.0000] <Hixie>
uh

[18:09:36.0000] <MikeSmith>
ーThe Nu Markup Checker should not be used as a means to attempt to unilaterally enforce pass/fail conformance of documents to any particular specifications; it is intended solely as a checker, not as a pass/fail certification mechanism.

[18:10:31.0000] <Hixie>
a-ja: what i was trying to say is, if "no errors from a validator" means "document is conformant", then ok. if it means "this random software doesn't detect our many errors", then it's idiotic.

[18:10:42.0000] <Hixie>
so i tend to assume it means "has no errors"

[18:10:57.0000] <Hixie>
if people are interpreting it the other way, they are misinterpreting it

[18:11:31.0000] <SamB>
a-ja: what's an error?

[18:16:49.0000] <a-ja>
SamB: good question

[18:17:35.0000] <a-ja>
i just seem to recall validated conformance being a requirement for AAA

[18:19:29.0000] <a-ja>
i know of no orgs, even govt, that require AAA, though many require AA or better cuz of govt contracts

[18:24:27.0000] <SamB>
I guess most orgs don't drive?

[18:38:21.0000] <a-ja>
marginally related question -- where is style scoped intended to be allowed?

[18:39:15.0000] <MikeSmith>
a-ja: where the spec says it's allowed?

[18:39:27.0000] <a-ja>
asking cuz <details><style scoped><summary> is/was choked on

[18:39:59.0000] <MikeSmith>
a-ja: btw dunno if you're aware but blink is removing their style@scoped implementation

[18:40:04.0000] <Hixie>
http://www.whatwg.org/specs/web-apps/current-work/#the-style-element explains it pretty clearly:

[18:40:13.0000] <Hixie>
"If the scoped attribute is present: where flow content is expected, but before any other flow content other than inter-element whitespace and style elements, and not as the child of an element whose content model is transparent."

[18:40:23.0000] <SamB>
/me really doesn't much like @global, it seems to contravene half the point of <style scoped> ...

[18:40:24.0000] <a-ja>
complained about summary having to be 1st child of details

[18:40:28.0000] <Hixie>
MikeSmith: technically they only removed their incomplete unreleased implementation

[18:40:30.0000] <MikeSmith>
if the spec allows <details><style scoped><summary> but the validator doesn't then please file a validator but

[18:40:33.0000] <MikeSmith>
*bug

[18:40:40.0000] <MikeSmith>
Hixie: ok

[18:40:53.0000] <Hixie>
validator seems correct per that quote

[18:41:22.0000] <MikeSmith>
a-ja: yeah that's not a specific problem with style@scoped, it's exactly what it says it is, as far as I can see

[18:41:33.0000] <MikeSmith>
you need to read the spec

[18:41:43.0000] <MikeSmith>
in general

[18:42:01.0000] <a-ja>
i have...didn't know whether i'd missed it somewhere though

[18:42:48.0000] <a-ja>
easily worked around with a wrapper of some sort

[18:42:56.0000] <MikeSmith>
a-ja: you missed the part where the spec says the content model of <details> is "One summary element followed by flow content"

[18:43:06.0000] <MikeSmith>
?

[18:43:30.0000] <a-ja>
nah...saw that

[18:44:16.0000] <a-ja>
wasn't sure there wasn't insistancy with scoped though

[18:45:17.0000] <Hixie>
the spec is just what the spec says, so if the spec says "One summary element followed by flow content" for <details> and says <style scoped> is expected "where flow content is expected, but before any other flow content", then that's all it is, no hidden magic

[18:45:34.0000] <a-ja>
know asking might even be premature, as css styled spec is still new

[18:50:53.0000] <a-ja>
<details><summary><style scoped>      seems this wouldn't affect the details element, hence need for wrapper around details

[18:51:17.0000] <a-ja>
might make a good example in spec

[19:18:52.0000] <Hixie>
a-ja: why wouldn't it style the <details>?

[19:20:10.0000] <a-ja>
styles it's parent, i.e. <summary>

[19:21:07.0000] <a-ja>
right?

[19:24:23.0000] <Hixie>
oh i thought you meant <details><summary></summary><style scoped></style>...</details> sorry

[19:24:28.0000] <Hixie>
why would you put it in the <summary>??

[19:24:45.0000] <Hixie>
it's not allowed in <summary>...

[19:24:52.0000] <Hixie>
since <summary> doesn't accept flow content

[19:25:29.0000] <a-ja>
maybe details could be altered to allow a style scope before summary....so as not to require wrapper to style details

[19:26:28.0000] <Hixie>
why do you need a wrapped

[19:26:32.0000] <Hixie>
just put it in the <details>

[19:26:34.0000] <Hixie>
like the spec says

[19:26:41.0000] <Hixie>
/me doesn't understand the confusion here

[19:27:23.0000] <a-ja>
details content model says summary followed by flow

[19:27:29.0000] <Hixie>
right...

[19:28:10.0000] <a-ja>
details doesn't allow scope style before summary

[19:28:25.0000] <Hixie>
i don't understand why that matters

[19:28:48.0000] <Hixie>
how do you get from "details content model says summary followed by flow" to there being a problem with style not being before summary?

[19:28:53.0000] <a-ja>
matters if you want to style the details element

[19:29:10.0000] <Hixie>
you still put the style element as a child of the details

[19:29:15.0000] <Hixie>
you just put it where it's valid

[19:29:30.0000] <Hixie>
instead of before the summary, where it's not valid...

[19:29:47.0000] <a-ja>
doh

[19:29:59.0000] <a-ja>
/me was putting it inside summary

[19:30:57.0000] <a-ja>
no first-child requirement for scope style, i take it

[19:31:24.0000] <Hixie>
you don't have to assume

[19:31:25.0000] <Hixie>
read the spec

[19:31:27.0000] <Hixie>
"If the scoped attribute is present and the element has a parent element, then the style element must precede any flow content in its parent element other than inter-element whitespace and other style elements, and the parent element's content model must not have a transparent component."

[19:34:12.0000] <a-ja>
and summary is phrasing or heading....not flow.    ok

[19:36:06.0000] <a-ja>
guess now i fear polyfills toggling style element's display...heh

[19:37:35.0000] <a-ja>
i'll test a few and file bugs on em if a prob

[03:02:27.0000] <asmodai>
Behaviour-wise I am not sure I understand something wrt JavaScript. Is there a reason why a global map is undefined in an event handler, whereas a global array isn't?

[03:04:57.0000] <anchnk>
asmodai ###javascript

[03:05:03.0000] <anchnk>
oups #javascript

[03:08:17.0000] <jgraham>
asmodai: Got an example?

[03:10:48.0000] <jgraham>
Uh, what happened to the /topic

[03:16:14.0000] <Ms2ger>
Huh

[03:17:07.0000] <asmodai>
jgraham: would need to distill it, just something at work we encountered.

[03:20:41.0000] <asmodai>
jgraham: Guess topic might have been wiped due to netsplits/netjoins.

[03:24:59.0000] <annevk>
I cannot set the topic...

[03:25:03.0000] <annevk>
http://www.whatwg.org/ — logs: http://krijnhoetmer.nl/irc-logs/ & http://logbot.glob.com.au/ — stats: http://gavinsharp.com/irc/whatwg.html — Please leave your sense of logic at the door, thanks!

[03:25:06.0000] <annevk>
is what it should be, fwiw

[03:26:15.0000] <Ms2ger>
Dammit ChanServ

[03:40:17.0000] <annevk>
Ms2ger: can you give me +o so I can fix it?

[03:41:48.0000] <Ms2ger>
The topic is fixed, I just can't give everyone access to change it

[03:45:07.0000] <jgraham>
(isn't the convention that you de-op at this point)

[03:45:37.0000] <annevk>
Ms2ger: it's not using proper dashes

[03:46:00.0000] <Ms2ger>
I copied yours!

[03:46:08.0000] <annevk>
Ms2ger: your IRC client is broken it seems

[03:46:14.0000] <Ms2ger>
Plausible

[03:46:23.0000] <Ms2ger>
Huh

[03:47:29.0000] <Ms2ger>
You try? :)

[03:47:36.0000] <annevk>
/me wins

[03:48:19.0000] <Ms2ger>
Yep, looks better, thanks

[03:48:26.0000] <annevk>
topic finally uses Unicode em dash rather than hyphens :-)

[03:49:34.0000] <a-ja>
em dash and spaces?

[03:49:37.0000] <a-ja>
tsk tsk

[03:50:11.0000] <annevk>
a-ja: hah, yes!

[03:50:29.0000] <a-ja>
not in *my* styleguide

[03:51:23.0000] <Ms2ger>
Not in mine either!

[03:51:26.0000] <a-ja>
spaces around en dash, but not around em dash

[03:52:43.0000] <jgraham>
Well in this case it's not being used as a parenthetical—like this—but as a seperator. OTOH, I also think that looks silly without spaces

[04:23:05.0000] <annevk>
mathiasbynens: yo

[04:23:07.0000] <annevk>
mathiasbynens: see http://unicode.org/repository/*checkout*/draft/trunk/reports/tr46/tr46.html#ToASCII

[04:23:20.0000] <annevk>
mathiasbynens: given those definitions, what do you want the methods to do?

[04:23:48.0000] <annevk>
mathiasbynens: I feel like we should also add domainToUI() and maybe urlToUnicode() and urlToUI()

[04:31:01.0000] <mathiasbynens>
what does `ToUI` mean?

[04:31:20.0000] <annevk>
User Interface

[04:32:54.0000] <mathiasbynens>
i know what UI means but I still don’t get it

[04:33:06.0000] <mathiasbynens>
what would it do?

[04:33:42.0000] <annevk>
It would match the algorithm UAs have for whether they show Unicode or Punycode

[04:33:55.0000] <mathiasbynens>
ah, weird

[04:34:10.0000] <mathiasbynens>
didn’t we all agree Safari showing Unicode in the address bar at all times is a security issue?

[04:34:28.0000] <annevk>
See links from http://wiki.whatwg.org/wiki/URL#UI

[04:34:47.0000] <annevk>
mathiasbynens: that's why you want toUI

[04:35:02.0000] <annevk>
mathiasbynens: it's up to the UA to decide what it returns

[04:36:27.0000] <smaug____>
haha, those Attr.specified comments in blink-dev are fun.

[04:36:52.0000] <smaug____>
jQuery is really missing some testing there

[04:37:36.0000] <annevk>
yes

[04:38:39.0000] <jgraham>
smaug____: Internet thought police detected offence "dissing jQuery" you will be deported to MySpace forthwith

[04:41:14.0000] <smaug____>
oh dear, I must have lived in MySpace for a long time then

[04:45:28.0000] <jgraham>
Although I guess that MySpace isn't a good analouge for a prison in that it failed because it made it too easy for people to leave. Which kind of suggests that the right analogy is some MySpace successors that are heavily focused on lock-in

[04:46:01.0000] <mathiasbynens>
annevk: what use cases did you have in mind?

[04:46:46.0000] <smaug____>
jgraham: Facebook?

[04:46:47.0000] <annevk>
mathiasbynens: e.g. search results

[04:47:22.0000] <smaug____>
ahaa, acid3 required certain .specified handling, https://bugzilla.mozilla.org/show_bug.cgi?id=199959#c6

[04:53:51.0000] <annevk>
smaug____: did you review https://dvcs.w3.org/hg/innerhtml/raw-file/tip/index.html#dfn-concept-serialize-xml

[04:54:48.0000] <Ms2ger>
I reviewed parts of it

[05:00:09.0000] <annevk>
It seems if namespace is '"' that algorithm might produce garbage

[05:00:42.0000] <Ms2ger>
Plausible

[05:00:56.0000] <annevk>
Oh, data:text/xml,<s xmlns='"'/> is a parse error in Chrome but not Firefox

[05:02:31.0000] <annevk>
Same for data:text/xml,<s xmlns="&lt;"/>

[05:03:28.0000] <smaug____>
I didn't review that, if that is the thing travis changed recently

[05:39:22.0000] <JakeA>
annevk: Any reasons XHR send() couldn't return a promise?

[05:40:26.0000] <Ms2ger>
Legacy?

[05:41:22.0000] <jgraham>
Depends on whether anyone depends on it returning undefined

[05:41:30.0000] <jgraham>
Stranger things have happened

[05:59:31.0000] <JakeA>
Is there any precedent here? Has switching from return undefined to return obj been an issue before?

[06:20:34.0000] <Ms2ger>
JakeA, the precedent is that any change that's been made has caused issues :)

[06:23:00.0000] <JakeA>
Anything particular to undefined returns becoming objects?

[06:24:22.0000] <Ms2ger>
I don't remember a case

[06:25:08.0000] <JakeA>
The alternative is adding an extra .ready() method on there, of course. But legacy aside, .send() is the right place for it

[06:26:51.0000] <Ms2ger>
Legacy aside, XHR is crap :)

[06:27:32.0000] <JakeA>
This is why ServiceWorker has fetch()

[06:36:41.0000] <annevk>
JakeA: I don't understand why we'd give XHR a promise if we're going to have fetch()

[06:37:43.0000] <JakeA>
That's fair

[06:39:54.0000] <annevk>
Having said that, I have added other features to XMLHttpRequest recently

[06:49:55.0000] <annevk>
JakeA: so what is the state of things?

[06:50:17.0000] <annevk>
JakeA: you and Jungkee are writing the spec?

[06:50:39.0000] <JakeA>
& slightlyoff, yeah

[06:50:44.0000] <annevk>
JakeA: does it have a nice URL yet?

[06:51:29.0000] <JakeA>
annevk: Nope https://github.com/slightlyoff/ServiceWorker/issues/197

[06:51:50.0000] <JakeA>
I've been working in the ts file & https://github.com/slightlyoff/ServiceWorker/blob/master/spec/service_worker/algorithms.md

[06:52:16.0000] <annevk>
JakeA: is there's an output file somewhere?

[06:52:55.0000] <JakeA>
annevk: Lifecycle is almost there. I've taken a swing at caching. It's been declared "not insane" by some Chromium cache guys, but I want us to look at it in detail at our next meetup

[06:53:18.0000] <annevk>
JakeA: is 7-8 still on? I have booked flights fwiw

[06:53:30.0000] <JakeA>
annevk: The spec is at https://github.com/slightlyoff/ServiceWorker/blob/master/spec/service_worker/index.html - Jungkee has been doing that, but I want it moved to gh-pages

[06:53:49.0000] <JakeA>
annevk: Yeah, 7-8 is go

[06:53:55.0000] <annevk>
JakeA: great

[06:54:14.0000] <annevk>
JakeA: marcosc might be joining us as I understand things

[06:54:22.0000] <JakeA>
annevk: Cool!

[06:54:45.0000] <JakeA>
annevk: I want to take the opportunity to look at HTML imports render-blocking too

[06:54:48.0000] <annevk>
JakeA: also, I starting around then I should have time to help out with the specification

[06:54:57.0000] <JakeA>
annevk: Maybe not on 7-8 though

[06:55:08.0000] <JakeA>
annevk: Oh brilliant!

[06:55:42.0000] <Ms2ger>
annevk, really? We're not giving you enough to do? :)

[06:55:44.0000] <JakeA>
annevk: Any idea if Mozilla plans to make HTML imports render-blocking?

[06:57:30.0000] <annevk>
Ms2ger: well, we want this to happen

[06:57:49.0000] <annevk>
JakeA: no, forgot who is implementing that too...

[06:58:17.0000] <annevk>
/me registered for BlinkOn 2

[08:04:04.0000] <annevk>
SimonSapin: http://ln.hixie.ch/?start=1140242962&count=1

[08:47:25.0000] <dglazkov>
good morning, Whatwg!

[08:51:52.0000] <SamB>
so, whose idea was it to name an engine after the dumbest tag ever anyway?

[08:58:35.0000] <jgraham>
Hahaha

[08:58:48.0000] <jgraham>
If you think <blink> is the worst HTML tag you need to get out more

[08:59:04.0000] <jgraham>
Or stay in more

[08:59:09.0000] <jgraham>
Probably the latter

[08:59:20.0000] <SamB>
I didn't say "worst"

[08:59:31.0000] <jgraham>
Well

[08:59:47.0000] <jgraham>
<span> is the dumbest tag ever since it doesn't do or mean anything

[08:59:54.0000] <SamB>
hehehe

[09:00:21.0000] <SamB>
you mean, sort of like how git is "the stupid content tracker"?

[09:02:39.0000] <SamB>
/me guesses he's just still bitter about how <blink> renders the contents invisible for so long at a time

[09:03:36.0000] <jgraham>
That's accidentially good because it means it's far outside the range that triggers photosensitive epilepsy

[09:04:01.0000] <SamB>
I gues I would have preferred if it blinked between different colors instead or something

[09:34:18.0000] <annevk>
SimonSapin: it seems the only somewhat complicated rewinding case to rewrite to prepend would be utf-16

[09:34:34.0000] <annevk>
SimonSapin: when you hit an unpaired surrogate

[09:34:58.0000] <SimonSapin>
annevk: don’t you keep the first surrogate around?

[09:35:12.0000] <annevk>
SimonSapin: yeah, complicated as in that you have to convert it back to bytes

[09:35:48.0000] <annevk>
SimonSapin: although I guess I can just use http://encoding.spec.whatwg.org/#convert-a-code-unit-to-bytes

[09:35:55.0000] <annevk>
SimonSapin: not too hard after all...

[09:36:39.0000] <SimonSapin>
I was gonna say something like that, but if you already have a hook for it it’s even easier

[09:40:25.0000] <annevk>
So public-webapps reached agreement it would be great to split a specification without actually having an editor for anything?

[09:40:34.0000] <annevk>
Are all these people managers?

[09:41:58.0000] <jgraham>
Well none of them are editors

[09:42:00.0000] <jgraham>
Clearly

[09:47:37.0000] <Domenic_>
i kind of tuned out after they said the only purpose of this split was to advance it through the w3c process

[09:54:48.0000] <Hixie>
which spec?

[09:55:37.0000] <Hixie>
selection?

[09:55:45.0000] <Hixie>
isn't that just part of aryeh's spec?

[09:57:48.0000] <jgraham>
Hixie: Hence "to split a specification"

[09:58:24.0000] <Hixie>
well if splitting it gets it an editor, i guess that's a win?

[09:58:32.0000] <Hixie>
at least they're not forking an actively maintained spec for once

[09:58:54.0000] <hober>
my impression was that rniwa was volunteering to edit the selection spec

[09:59:12.0000] <SamB>
yay for selections

[10:02:52.0000] <Hixie>
yeah looks like rniwa and aryeh are talking, so i'm happy

[10:02:54.0000] <SamB>
oh darn, opacity affects the selection :-(

[10:04:38.0000] <annevk>
Hixie: I missed rniwa volunteering

[10:04:53.0000] <annevk>
Sorry for the noise everyone :/

[10:31:52.0000] <SamB>
darn

[10:32:11.0000] <SamB>
I hit the "submit" button and then notice I screwed up the terminology ...

[10:42:43.0000] <SamB>
so, um, I just reported <https://www.w3.org/Bugs/Public/show_bug.cgi?id=25145> and I'm wondering where, say, :active's semantics are assigned ...

[10:43:48.0000] <TabAtkins>
A combination of HTML and Selectors.

[10:45:59.0000] <SamB>
yes, that much I see on https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

[10:46:16.0000] <SamB>
oh, hmm, I guess I could go to the MDN page for it ...

[10:47:09.0000] <SamB>
... but that doesn't mention HTML5 or the Living Standard at all

[10:47:49.0000] <Hixie>
it's a wiki :-)

[10:48:11.0000] <SamB>
well I guess I could try googling ...

[10:50:31.0000] <SamB>
gah, punctuation blindness strikes again :-(

[11:12:12.0000] <SamB>
there isn't a pseudo-class for things that are (at least partially) selected, is there?

[11:14:03.0000] <TabAtkins>
No.

[11:17:38.0000] <annevk>
::selection is dead?

[11:17:45.0000] <annevk>
I guess it is

[11:17:58.0000] <annevk>
Note that the hit testing part of :active is undefined

[11:20:12.0000] <TabAtkins>
annevk: Yup, dead.  We'll revive, but we still haven't settled on what it actually *means*.  dbaron had a decent model, at least 3 years ago, but hasn't written anything down. :/

[11:38:36.0000] <dbaron>
annevk, TabAtkins, my post was http://lists.w3.org/Archives/Public/www-style/2008Oct/0268.html -- not so much a model as a list of things to consider when making one

[12:27:44.0000] <SamB>
annevk: ::selection doesn't do what I want, anyway; I want something more like :hover/:active, that would select existing nodes that contain some part of the selection (including all of the parent elements)

[12:28:27.0000] <SamB>
mostly to cancel an "opacity: 0" so that it's possible to SEE the selection

[12:30:05.0000] <TabAtkins>
SamB: If you're trying to do a spoiler element, just use <details>. It's what it's for.

[12:31:06.0000] <SamB>
/me thinks he'd have a tough time marketing that to Stack Exchange ...

[12:34:23.0000] <TabAtkins>
Why?

[12:39:25.0000] <SamB>
/me may simply be ignorant of <details>' vintage

[12:41:36.0000] <TabAtkins>
I don't understand.

[12:43:59.0000] <TabAtkins>
Hm, I thought you could use unicode in JS variable names.  Am I wrong?

[12:55:45.0000] <jgraham>
TabAtkins: Define "unicode" :)

[12:56:17.0000] <jgraham>
(I think it should be possible, excluding certain character classes for an implementation-defined version of unicode. But I may have misremembered)

[12:56:26.0000] <TabAtkins>
Right. Well, you can definitely use "non-ASCII" in variable names, because fóó is valid.  But f💩 isn't.

[12:56:41.0000] <TabAtkins>
Nor are things like f©

[13:00:23.0000] <jgraham>
TabAtkins: http://www.ecma-international.org/ecma-262/5.1/#sec-7.6

[13:01:11.0000] <TabAtkins>
Ah, cool.  Thanks.

[13:06:38.0000] <mathiasbynens>
TabAtkins, jgraham: or http://mathiasbynens.be/notes/javascript-identifiers

[13:06:51.0000] <mathiasbynens>
…and http://mothereff.in/js-variables

[13:07:59.0000] <mathiasbynens>
…and http://mathiasbynens.be/demo/javascript-identifier-regex and https://gist.github.com/mathiasbynens/6334847

[15:16:49.0000] <SamB_>
/me goes to check http://catb.org/~esr/writings/taoup/html/modularitychapter.html in validator.nu ...


2014-03-26
[17:40:34.0000] <MikeSmith>
Hixie: requests to wiki.whatwg.org hanging for a long time waiting for response

[17:40:46.0000] <Hixie>
yeah i noticed that myself a few minutes ago

[17:41:02.0000] <MikeSmith>
where long is like 10s or more

[17:41:08.0000] <Hixie>
load average is really high on the machine

[17:41:09.0000] <Hixie>
no idea why

[17:41:27.0000] <MikeSmith>
maybe getting hit by a crawler

[17:42:46.0000] <Hixie>
some weird process running as root

[17:43:10.0000] <Hixie>
i'm either being attacked or dreamhost is checking for attacks, maybe

[17:47:05.0000] <MikeSmith>
oh wow

[17:47:13.0000] <MikeSmith>
well I hope it's dreamhost

[17:47:24.0000] <Hixie>
yeah, i think it is

[17:49:15.0000] <Hixie>
looks like a huge grep command looking for infected php files

[17:54:42.0000] <MikeSmith>
ah

[17:56:33.0000] <Hixie>
here's a sample command line:

[17:56:35.0000] <Hixie>
grep -Zl coder by Orlenok.do.am\|ru-otveti1.cc\|mail.ru-0tveti.com\|mail.ru-otveti2.cc\|ru-0tveti1.com\|com-app-view.cc\|homeincometds.ru\|workathome55.ru\|workathomejournal..

[18:01:36.0000] <Hixie>
yeah it has to be dreamhost. the process is running as a subprocess of ssh, so if it was an attacker, they wouldn't need to grep for anything, they could just run their malware.

[18:07:54.0000] <zewt>
who needs the internet to dos a server, when the provider is doing it for them

[18:36:51.0000] <MikeSmith>
hahah

[18:37:04.0000] <MikeSmith>
indeed

[18:44:44.0000] <MikeSmith>
I guess some would argue you're dos'ing yourself by running php-based services at all

[18:45:15.0000] <MikeSmith>
could be even worse I guess, could be running wordpress too

[18:47:03.0000] <MikeSmith>
tantek: Is there a way I can have the microformats.org e-mail me a notification whenever a page I'm watching is changed?

[18:47:17.0000] <MikeSmith>
* microformats.org wiki

[18:48:05.0000] <MikeSmith>
or a feed I can subscribe to?

[18:48:22.0000] <tantek>
MikeSmith - not that I know of - but there is a feed of recent changes, that you could filter through for changes to the page

[18:48:30.0000] <MikeSmith>
naomi ok

[18:48:35.0000] <MikeSmith>
oops

[18:48:50.0000] <MikeSmith>
tantek: ok I'll try the recent-changes feed

[19:11:23.0000] <Hixie>
MikeSmith: we run both wordpress and mediawiki :-|

[19:21:23.0000] <MikeSmith>
Hixie: way to live dangerously man

[19:36:56.0000] <tantek>
MikeSmith - it's a common pattern :) we setup the same thing on microformats.org

[19:37:09.0000] <tantek>
though with indiewebcamp we ditched wordpress

[19:37:20.0000] <tantek>
because of course, everyone should just blog on their own domain ;)

[19:37:46.0000] <MikeSmith>
yeah I'm just trolling

[19:38:35.0000] <MikeSmith>
but I am looking forward to the day when better Web software stacks are more common and easier to deploy and maintain

[19:38:54.0000] <tantek>
MikeSmith - you're welcome to lurk in #indiewebcamp and watch us develop multiple such stacks ;)

[19:39:33.0000] <MikeSmith>
tantek: I will drop by

[19:42:00.0000] <Hixie>
MikeSmith: did you hear about facebook's "Hack"?

[19:42:14.0000] <MikeSmith>
Hixie: no

[19:42:44.0000] <MikeSmith>
programming language?

[19:42:47.0000] <Hixie>
http://code.facebook.com/posts/264544830379293/hack-a-new-programming-language-for-hhvm/

[19:42:52.0000] <Hixie>
it's... php.

[19:43:41.0000] <tantek>
hey - I hear that's Tim Bray's favorite ;)

[19:43:59.0000] <MikeSmith>
wow it really is still just PHP basically

[19:44:14.0000] <Hixie>
yeah.

[19:44:30.0000] <MikeSmith>
https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-ash3/t39.2365-6/851566_537609726356988_1715700065_n.jpg

[19:45:01.0000] <MikeSmith>
way to break new ground!

[19:45:28.0000] <Hixie>
also what's with people being unable to come up with good programming language names

[19:45:32.0000] <Hixie>
"go", "hack"

[19:45:45.0000] <Hixie>
have you any idea how unsearchable those terms are

[19:46:05.0000] <tantek>
Hixie: cassis.js :)

[19:46:11.0000] <MikeSmith>
yeah really dumb name choices

[19:46:15.0000] <Hixie>
[programming language hack] is not going to help anyone

[19:46:34.0000] <MikeSmith>
yeah what's another word for "sunk cost"?

[19:46:56.0000] <MikeSmith>
or "keep throwing good money after bad"

[19:47:47.0000] <Hixie>
i actually can't decide if "go" is a worse name or "hack". go is basically a stop word. "hack" is a word used for every programming language exploit.

[19:47:57.0000] <MikeSmith>
seriously there is some term for this, where you're deeply invested in some bad software choice that you can't replace it

[19:49:26.0000] <MikeSmith>
Erlang is the best language name

[19:49:50.0000] <MikeSmith>
as far as languages that are actually intended to be used

[19:50:11.0000] <MikeSmith>
hey somebody should name a language "Kerrang!"

[19:50:53.0000] <zewt>
fca87fee-6c22-4533-8001-8ab6d8630f13++

[19:52:01.0000] <MikeSmith>
INTERCAL's a pretty good name too, because it sounds like other older lanaguge names, and sounds like it's legitimately intended to be useful

[19:52:06.0000] <zewt>
or the nonsensically named git product named "stash"

[19:52:19.0000] <zewt>
why not call it "commit" while you're at it

[19:52:33.0000] <MikeSmith>
heh

[20:10:22.0000] <Hixie>
MikeSmith: "ada", "pascal", "fortran", "cobol" are all pretty googleable names

[20:10:27.0000] <Hixie>
"perl" too

[20:10:34.0000] <Hixie>
and "python", in context

[20:15:14.0000] <MikeSmith>
Hixie: yeah but all those names lack expressiveness

[20:15:22.0000] <Hixie>
heh

[20:15:35.0000] <MikeSmith>
a highly expressive language should have a highly expressive name

[20:15:49.0000] <MikeSmith>
like "Khaaaaaaaan!"

[20:40:24.0000] <MikeSmith>
Hixie: in other news I'm trying to figure out how to implement the spec requirements for "shorcut icon" without resorting to a regexp

[20:41:33.0000] <MikeSmith>
ーIf the "shortcut" keyword is present, it must be come immediately before the icon keyword and the two keywords must be separated by only a single U+0020 SPACE character.

[20:41:42.0000] <MikeSmith>
I mean that part

[20:42:57.0000] <MikeSmith>
hmm

[20:44:17.0000] <MikeSmith>
I guess it's easy enough if I just save the value of the previous token for each time I check the next one

[20:52:13.0000] <MikeSmith>
it hurts when the solution is "create yet another string"

[20:53:15.0000] <Hixie>
MikeSmith: do you know the offset of the start of the keyword?

[20:53:24.0000] <Hixie>
MikeSmith: if so, you can just do a substring search and a previous-keyword search

[20:54:35.0000] <MikeSmith>
Hixie: yeah I can determine the offset

[20:54:44.0000] <MikeSmith>
maybe that way would be better

[20:54:53.0000] <Hixie>
(but that's a weird requirement. maybe it should just be a keyword immediately before)

[20:56:52.0000] <MikeSmith>
Hixie: ah yeah

[20:57:01.0000] <MikeSmith>
that would definitely be better

[20:57:09.0000] <Hixie>
(file a bug if you want that, i'm kinda afk this week)

[20:57:28.0000] <MikeSmith>
I realize now that's actually what had been preventing me from implementing a check for this

[20:57:33.0000] <MikeSmith>
k

[20:57:39.0000] <Hixie>
i'd want to check why i had written it like that before

[20:57:47.0000] <MikeSmith>
yeah sure

[20:57:53.0000] <Hixie>
seems like a really weird requirement, not the kind of thing i'm likely to put in on a whim

[20:58:28.0000] <MikeSmith>
hmm yeah maybe IE doesn't actually recognize it if there are multiple spaces or a newline or tab there

[20:58:35.0000] <Hixie>
maybe, i dunno

[20:58:44.0000] <Hixie>
though maybe we no longer care if it's old IE?

[20:58:45.0000] <Hixie>
who knows

[20:59:24.0000] <MikeSmith>
yup anyway I'll get the bug raised so  we don't forget

[22:02:11.0000] <SamB>
Hixie: are you not allowed to explain stuff like that somewhere in the spec itself for some reason?

[22:03:59.0000] <Hixie>
i try not to include too much rationale in the spec because otherwise it gets out of control and makes the spec unreadable

[22:04:03.0000] <Hixie>
i sometimes leave it in comments

[02:45:57.0000] <zcorpan>
Hixie: MikeSmith: "shortcut icon" is for ie compat

[02:46:16.0000] <MikeSmith>
yeah I know

[02:46:31.0000] <zcorpan>
http://web.archiveorange.com/archive/v/IJ6c3Cpqf8c6cE1xi7N3

[02:46:46.0000] <MikeSmith>
question Hixie and I have is, does IE really require that there be only a single space there

[02:47:07.0000] <MikeSmith>
will it work if it's multipel spaces or tabs or newline

[02:47:14.0000] <MikeSmith>
other whitespace

[02:47:30.0000] <zcorpan>
see above

[02:47:31.0000] <MikeSmith>
if so then it's a lot easier for me to implement a check for it in the validator

[02:47:34.0000] <MikeSmith>
ah OK

[02:47:37.0000] <MikeSmith>
/me reads

[02:49:29.0000] <MikeSmith>
zcorpan: doesn't seem to be a definitive answer there about whether IE still works as expected with e.g. rel="shortcut     icon" or whatever

[02:50:11.0000] <zcorpan>
MikeSmith: i guess newer IEs haven't been tested

[02:50:26.0000] <MikeSmith>
hsivonen demos at http://hsivonen.com/test/moz/shortcut-icon/ don't seem to be checking for the multiple/other whitespace case either

[02:51:10.0000] <MikeSmith>
zcorpan: blog post from JonathanNeal seems to indicate that at least IE10 still requires "shortcut icon" as opposed to just "icon"

[02:51:29.0000] <zcorpan>
rel="shortcut   icon" with multiple spaces between "shortcut" and "icon" is not IE-compatible.) said hsivonen

[02:51:37.0000] <MikeSmith>
http://www.jonathantneal.com/blog/understand-the-favicon/

[02:51:43.0000] <MikeSmith>
ah OK

[02:51:47.0000] <MikeSmith>
well shit

[02:52:17.0000] <MikeSmith>
I guess I'll just give up an use a negative forward lookup regexp then

[02:52:56.0000] <zcorpan>
i think it makes most sense to check for "shortcut icon" exactly (but ascii-case insensitive), but i guess that doesn't match the current spec

[02:53:07.0000] <zcorpan>
but we could change the spec to say that :-)

[02:53:42.0000] <MikeSmith>
yeah but for the validator case that wouldn't win us much

[02:54:21.0000] <MikeSmith>
we're just tokeninizing the whole value before doing anything else with it

[02:54:57.0000] <zcorpan>
if (keyword.toAsciiLower() == 'shortcut') assert(originalValue.toAsciiLower() == 'shortcut icon')

[02:55:15.0000] <MikeSmith>
oh

[02:55:19.0000] <MikeSmith>
yeah

[02:55:23.0000] <MikeSmith>
that'd be better

[02:55:32.0000] <MikeSmith>
sorry I didn't know what you meant

[02:55:44.0000] <MikeSmith>
yeah really that's what the requirement should be

[02:56:04.0000] <MikeSmith>
though apparently it doesn't need to be lowercase

[02:56:23.0000] <zcorpan>
that's why the code is lowercasing it before comparison :-)

[02:56:26.0000] <MikeSmith>
rel="SHORTCUT ICON" is what the IE does recommend

[02:56:28.0000] <MikeSmith>
ah OK

[02:56:31.0000] <MikeSmith>
yeah

[02:56:49.0000] <MikeSmith>
ok I'll file another bug

[02:56:53.0000] <MikeSmith>
spec bug

[02:57:27.0000] <MikeSmith>
actually I'll just change the one I already filed

[03:03:44.0000] <MikeSmith>
zcorpan: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25151

[03:19:50.0000] <MikeSmith>
damn is there really no simple way to find any associated bugs in a chrome code review

[03:22:22.0000] <zcorpan>
/me wonders what's up with r8556

[03:23:44.0000] <MikeSmith>
http://html5.org/tools/web-apps-tracker doesn't show an r8556..

[03:24:22.0000] <MikeSmith>
oh

[03:24:44.0000] <MikeSmith>
there was some discussion about that here a couple days ago I htink

[03:27:47.0000] <MikeSmith>
ーRe-investigate performance regression of moving DOM attributes to prototype chains and try to re-re-re-re-re-reland the CL.

[03:28:20.0000] <MikeSmith>
groundhog day

[03:51:03.0000] <MikeSmith>
hsivonen: so bugzilla.validator.nu is still setting a cookie sometimes with ".bugzilla.validator.nu

[03:51:16.0000] <MikeSmith>
... as the domain

[03:51:21.0000] <MikeSmith>
with the leading dot

[03:51:45.0000] <MikeSmith>
even after I deleted all my bugzilla.validator.nu cookies

[03:53:02.0000] <MikeSmith>
it's not a big deal -- I just re-delete them again after I notice it starts causing me login problems again

[03:53:08.0000] <MikeSmith>
just wanted to let you know

[03:55:48.0000] <MikeSmith>
the problem is that it sets duplicate cookies, one with the domain with that leading dot and one without it

[03:56:14.0000] <MikeSmith>
if it were setting it once just with the leading dot I guess it would work fine

[04:15:19.0000] <annevk>
MikeSmith: web-apps-tracker only shows commits to source fwiw

[04:32:17.0000] <MikeSmith>
ok

[04:47:00.0000] <nickstenn>
Hi all. I'm doing a bit of research about user(-agent) control over the DOM, and am looking for interesting things to read.

[04:47:40.0000] <nickstenn>
Specifically, if rollout of CSP is going to kill bookmarklets which load remote resources, what options are available to authors other than vendor-specific browser extensions?

[04:51:45.0000] <nickstenn>
I guess, to rephrase, the question is as follows -- we are, for good reason, trying to make sure that page authors have more control about what code runs on their pages. At the moment, the only mechanism that users have to run their code on a page (that I know of) is vendor-specific, in the form of a browser extension.

[04:52:26.0000] <nickstenn>
Does anyone know of proposals to allow user-trusted code to run in the DOM in a standard way?

[04:53:37.0000] <annevk>
nickstenn: nope

[04:53:51.0000] <nickstenn>
annevk: yeah, that's kind of the conclusion I'd drawn

[06:41:52.0000] <ondras>
so, resetStyleInheritance vs. applyAuthorStyles

[06:42:10.0000] <ondras>
are both still in the spec? which spec is relevant? I am apparently unable to locate the correct one

[06:47:54.0000] <annevk>
/me has never seen those APIs

[06:49:22.0000] <ondras>
wow.

[06:49:41.0000] <ondras>
annevk: they are supposed to forbid page CSS to interfere with shadow dom's styling

[07:18:55.0000] <annevk>
I'm surprised TextDecoder() always eats the BOM

[07:19:04.0000] <annevk>
That seems completely inappropriate for a number of cases

[07:19:20.0000] <annevk>
We should add a flag for that

[07:20:02.0000] <ondras>
annevk: are you aware of any other API to solve the host-css-in-shadow-dom use case?

[07:20:45.0000] <annevk>
Not really

[08:45:38.0000] <annevk>
Does IDL have hooks yet for ArrayBuffer handling and such?

[08:58:56.0000] <TabAtkins>
ondras: Both of those are gone.

[08:59:38.0000] <TabAtkins>
ondras: Outside CSS just never affects shadow DOM, unless you explicitly reach into the shadow with the ::shadow pseudo-element.

[09:00:06.0000] <TabAtkins>
Inheritance *does* still work though, unless you explicitly reset it yourself (such as by using "all:initial;" or something).

[09:04:16.0000] <dglazkov>
good morning, Whatwg!

[10:15:37.0000] <Domenic_>
TabAtkins: what does "inheritance" mean?

[10:28:09.0000] <dglazkov>
Domenic_: I think he meant CSS inheritance

[10:29:06.0000] <Domenic_>
dglazkov: what is CSS inheritance though, and how is it different from outside CSS affecting shadow DOM...

[10:30:08.0000] <dglazkov>
Domenic_: http://www.w3.org/TR/css3-cascade/#inheriting

[10:30:39.0000] <Domenic_>
ah ok, so e.g. fonts will affect the shadow DOM

[10:30:44.0000] <Domenic_>
makes sense

[10:59:03.0000] <annevk>
Except <input> and such override it :-(

[11:47:52.0000] <annevk>
People, I rewrote most of Encoding to make a little bit more sense

[11:48:42.0000] <annevk>
So if you find strange bugs, it's highly likely I just introduced them

[11:49:09.0000] <annevk>
And if so, please tell me so I can get it back to its former rather polished state

[11:53:54.0000] <ondras>
TabAtkins: nice, thanks! This kinda makes all available ShadowDOM articles/tutorials obsolete I guess :)

[12:23:32.0000] <SamB>
/me goes in search of the current "shadow DOM"-related spec for those not writing Mozilla Chrome

[12:23:37.0000] <SamB>
er.

[12:23:40.0000] <SamB>
S/Chrome/chrome/

[12:24:57.0000] <SamB>
or specs ...

[12:26:09.0000] <SamB>
TabAtkins: is it just me or shouldn't there be a link to the Shadow DOM spec from http://dev.w3.org/csswg/css-scoping/ ?

[12:55:29.0000] <TabAtkins>
Domenic_: Values will trickle through the tree via inheritance, but selectors can't reach in unless they do so on purpose.

[12:56:24.0000] <TabAtkins>
SamB: Yeah, there should be, but I didn't want to hunt down a link when I was writing it.

[12:57:06.0000] <TabAtkins>
ondras: Yeah, that's the peril of writing tutorials for something which is still super-experimental.

[12:58:21.0000] <SamB>
TabAtkins: maybe http://w3c.github.io/webcomponents/spec/shadow/ or http://www.w3.org/TR/shadow-dom/ would be handy then?

[12:58:50.0000] <TabAtkins>
dglazkov: Which link should I use?

[12:59:07.0000] <jsbell>
annevk: I haven't spotted any other glitches in Encoding. Nice refactor.

[13:02:46.0000] <Domenic_>
No TRs :P

[13:04:50.0000] <jsbell>
Did Firefox eliminate new-less constructors recently, or was I dreaming?

[13:05:24.0000] <SamB>
jsbell: in their javascript code, you mean?

[13:07:38.0000] <jsbell>
SamB: Yeah. Support for calling DOM constructors like functions instead of w/ new operator. Last I checked FF/IE supported that, Safari/Chrome did not.

[13:08:02.0000] <jsbell>
I thought I saw something fly by on twitter about it, but literally may have dreamt it.

[13:08:15.0000] <SamB>
jsbell: oh, I thought maybe you meant internal coding style

[13:09:54.0000] <jsbell>
Ah, found it... https://bugzilla.mozilla.org/show_bug.cgi?id=980945

[13:15:00.0000] <SamB>
jsbell: only for typed arrays, then?

[13:16:39.0000] <jsbell>
SamB: https://twitter.com/annevk/statuses/445864332187168768 and replies made it sound more broad

[13:16:55.0000] <ondras>
so, the image onload event. is there some way to make sure that actually all the image file data has been transfered?

[13:17:11.0000] <ondras>
I mean, the browser can fire onload once the image is retrieved and can be displayed

[13:17:22.0000] <ondras>
but that does not 100% imply that all data has been transfered, right?

[13:17:23.0000] <jsbell>
SamB: but I see no change in aurora yet, so waiting to see

[13:17:48.0000] <SamB>
ondras: are you worried it might have loaded only, say, half of the image and then gotten interrupted

[13:18:13.0000] <ondras>
SamB: no, I am worried that some exif metadata might be located at the end of the file

[13:18:22.0000] <ondras>
SamB: and I plan on measuring bandwidth by downloading images

[13:18:38.0000] <ondras>
SamB: so I want to make sure that an X kilobyte file was completely transferred

[13:19:47.0000] <SamB>
jsbell: I don't see a patch on that bug, anyway, only to fix the in-tree JS

[13:24:07.0000] <SamB>
ondras: well, the step that sets the state to "completely available" is only supposed to run once the resource has been fetched

[13:24:30.0000] <SamB>
which is also what sends the load and loadend events

[13:25:29.0000] <SamB>
well, I mean, same sequence of steps, all after the resource has been fetched

[13:26:20.0000] <SamB>
but it seems like this WOULD happen for an interrupted transfer too

[13:28:50.0000] <SamB>
/me wonders if it he has what it takes to make the full cross-referencing functionality work in multipage ... he'd presumably need to learn [more?] JavaScript ...

[13:56:24.0000] <ondras>
SamB: well the interrupted transfer is not really my case. I am troubled by an jpg image that has (a lot of) exif metadata located after image data.

[14:25:39.0000] <SamB>
ondras: maybe you should use other test images?

[14:26:16.0000] <SamB>
ondras: but really I don't think the wording in the standard allows the user-agent to take the shortcut you're worried about

[14:27:13.0000] <SamB>
(also I kind of doubt they're doing much to optimize specifically for huge EXIF)

[16:12:15.0000] <SamB>
/me wonders what rel="bookmark" means

[16:15:53.0000] <SamB>
(see <http://gpl-violations.org>)

[16:46:44.0000] <Gege>
hi


2014-03-27
[00:30:26.0000] <ondras>
SamB: my plan was to actually aim for jpegs with large EXIFs; EXIFs padded with arbitrary data to match an exact target file size

[00:40:24.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25136 -> http://www.xkcd.com/1172/

[01:02:07.0000] <zcorpan>
jgraham: hmm, maybe t.add_cleanup(function() { throw 1 }) should just silently ignore the exception

[01:46:06.0000] <Ms2ger>
jsbell, if you read the logs: https://bugzilla.mozilla.org/show_bug.cgi?id=916644

[01:50:08.0000] <ondras>
just out of curiosity, why shall be these ctors disabled?

[01:50:29.0000] <Ms2ger>
No good reason afaict

[01:50:57.0000] <ondras>
'cause there are those "new" shiny Event constructors, right?

[01:51:17.0000] <Ms2ger>
It's "new Event()" vs "Event()"

[01:51:48.0000] <ondras>
aha

[01:51:57.0000] <ondras>
so it is not document.createElement vs. new HTMLDivElement ?

[01:52:11.0000] <Ms2ger>
No

[01:52:15.0000] <ondras>
okay then

[04:12:53.0000] <jgraham>
zcorpan: You win the "I crashed jgraham's computer" award for crashing my computer (kinda)

[04:13:28.0000] <zcorpan>
jgraham: how did i do that?

[04:13:38.0000] <zcorpan>
jgraham: evil test again?

[04:14:08.0000] <jgraham>
(one of your tests has while(true) {postMessage(1)} in a worker and when I edited the test but accidentially forgot to call worker.terminate, everything froze until the OOM killer started taking out random processes)

[04:14:15.0000] <jgraham>
(I think)

[04:14:39.0000] <zcorpan>
interesting

[04:15:32.0000] <jgraham>
(I didn't actually check that the OOM killer was involved but otherwise I don't know why Chrome and the networking stack both died)

[04:15:53.0000] <zcorpan>
i think i didn't quite get those tests to do what i wanted them to do, not sure if everyone has a bug or they're fundamentally bogus

[04:16:47.0000] <jgraham>
Is the idea that worker.terminate is supposed to be sync so that after you call that no more messages are processed even if they are already in the queue?

[04:17:21.0000] <jgraham>
/me isn't sure he is suppsoed to guess what the spec says by reading the tests ;)

[04:18:34.0000] <jgraham>
It kinda seems like steps 2 and 3 in the terminate a worker algorithm should be swapped around

[04:33:46.0000] <gsnedders>
Having glaziers replacing window is mostly unsurprisingly full of loud bangs.

[04:51:44.0000] <jgraham>
gsnedders: What about having glazou replace Windows?

[04:52:26.0000] <gsnedders>
:)

[04:56:10.0000] <zcorpan>
jgraham: i don't recall how that stuff works exactly

[05:28:11.0000] <annevk>
Hixie: on http://www.whatwg.org/specs/ "the relevant FAQ entry" is a dead link

[05:28:31.0000] <annevk>
Hixie: should we put Twitter accounts and GitHub repositories there too?

[06:59:45.0000] <jgraham>
!summon Ms2ger

[06:59:50.0000] <jgraham>
As Ms2ger would say

[07:01:00.0000] <ondras>
nice, does he grant wishes once summoned?

[07:02:09.0000] <jgraham>
ondras: That's what I'm hoping at least

[07:02:26.0000] <ondras>
:)

[07:47:52.0000] <annevk>
Hixie: I recommend skimming through https://speakerdeck.com/dherman/status-report-es6-modules

[08:11:48.0000] <annevk>
mathiasbynens: suggestion for http://dev.opera.com/articles/view/showmodaldialog/

[08:12:20.0000] <annevk>
mathiasbynens: add a bit on how something in a standard can still be deemed broken and removed at a future date of compatibility analysis changes

[08:12:35.0000] <annevk>
mathiasbynens: now on the standards side we should probably better identify those cases

[08:22:25.0000] <mathiasbynens>
annevk: sounds good. will do

[08:35:01.0000] <SamB>
ondras: annevk I assume s/date of/date if/ ?

[08:35:14.0000] <SamB>
er.

[08:35:16.0000] <SamB>
darn it

[08:35:23.0000] <SamB>
that was for annevk

[08:35:34.0000] <annevk>
yes

[08:35:53.0000] <annevk>
btw, did we sort out the logo situation?

[08:36:07.0000] <annevk>
SamB: should I just commit a CONTRIBUTORS and LICENSE file as per that bug?

[08:37:03.0000] <SamB>
well, Wikimedia Commons thinks that the WHATWG logo itself (and rasters of it) is too simple to be copyrighted

[08:37:51.0000] <TabAtkins>
SamB: That's... probably incorrect.

[08:37:53.0000] <SamB>
which would basically leave the only potentially copyrighted thing in logo.svg being the path for the question mark

[08:38:41.0000] <SamB>
TabAtkins: oh?

[08:39:54.0000] <TabAtkins>
Actually, I'm not sure about copyright.  It's certainly fine to be trademarked.

[08:40:00.0000] <SamB>
sure, sure

[08:40:10.0000] <TabAtkins>
But copyright can apply to very small pieces of text.

[08:40:48.0000] <TabAtkins>
And I don't think that the art application would exclude something like the WHATWG logo, which has specific design/color/etc choices that would distinguish it from other similar things.

[08:43:39.0000] <SamB>
that sounds trademarky to me

[08:46:34.0000] <TabAtkins>
It's possible.  I'm not a copyright lawyer. Just sounds fishy to me, is all.

[08:47:44.0000] <SamB>
anyway, Matthew Raymond would presumably not get to claim copyright based on the choice of color, and the current logo doesn't even use the same question mark, does it?

[08:48:11.0000] <SamB>
(Hixie is the one who said that it should be that color)

[08:48:12.0000] <TabAtkins>
No clue.

[08:49:21.0000] <SamB>
/me wants an "onionshell" tool for any two image URLs ...

[08:53:30.0000] <zcorpan>
does anyone know what the implications of http://www.whatwg.org/specs/web-apps/current-work/multipage/rendering.html#bidi-rendering are to review https://critic.hoppipolla.co.uk/4a7a86f8?review=886 ?

[08:54:26.0000] <annevk>
SamB: added a README.md with the necessary info

[08:57:47.0000] <SamB>
TabAtkins: anyway, I uploaded the original PNG to https://commons.wikimedia.org/wiki/File:WHATWG_logo_(Matthew_Raymond).png and then proposed that it be deleted; https://commons.wikimedia.org/wiki/Commons:Deletion_requests/File:WHATWG_logo_(Matthew_Raymond).png is the resulting discussion

[09:00:23.0000] <annevk>
SamB: btw, I used http://www.fileformat.info/convert/image/svg2raster.htm to create the PNG images, it is apparently terrible at it

[09:01:29.0000] <SamB>
annevk: at least it parsed logo-xhr.svg correctly

[09:07:37.0000] <SamB>
annevk: unlike inkscape and rsvg both

[09:07:48.0000] <annevk>
yeah that was weird

[09:11:28.0000] <SamB>
ah, so that uses batik?

[09:12:33.0000] <SamB>
/me goes to compare that with inkscape ...

[09:14:22.0000] <SamB>
hmm, does that not have a CLI tool?

[09:20:18.0000] <dglazkov>
good morning, Whatwg!

[09:32:26.0000] <SamB>
so it looks like batik does ship a command-line rasterizer as /usr/bin/rasterizer :-(

[16:32:05.0000] <MikeSmith>
https://twitter.com/pcwalton/status/449299846873108480 👈 pretty cool


2014-03-28
[17:41:55.0000] <Hixie>
uh... was whoever is behind https://speakerdeck.com/dherman/status-report-es6-modules planning on talking to us about changing HTML any time soon?

[17:42:03.0000] <Hixie>
cos <module> is a non-starter...

[17:42:52.0000] <TabAtkins>
That would be David Herman.

[17:43:50.0000] <TabAtkins>
And I've talked to him about this before - he says that there will definitely be a transitional <script type="whatever/module"> as well, with the same effect.

[17:44:18.0000] <Hixie>
so... why not just end with that

[17:44:46.0000] <Hixie>
<module> would mean major parser changes, and for something this security-sensitive, that would be a vewy vwey scawy

[17:45:23.0000] <Hixie>
anyway, make sure he posts to the whatwg list sooner rather than later (like, last october would be a good time)

[17:45:57.0000] <Hixie>
in unrelated news, why is Map not yet supported on chrome stable

[17:46:15.0000] <TabAtkins>
It's currently behind a flag.

[17:46:16.0000] <Hixie>
isn't Map pretty old hat by now?

[17:46:25.0000] <Hixie>
i remember people talking about it like a year ago

[17:46:27.0000] <TabAtkins>
And V8 was slow to support Map/Set.

[17:46:40.0000] <Hixie>
/me wonders what to use instead

[17:46:53.0000] <zewt>
maps are bleeding edge tech

[17:47:00.0000] <TabAtkins>
Are you making something for others to consume?

[17:47:10.0000] <TabAtkins>
Or just yourself/

[17:47:16.0000] <Hixie>
others

[17:47:35.0000] <TabAtkins>
Ah, then you're screwed.

[17:51:00.0000] <Hixie>
bummo

[17:51:14.0000] <Hixie>
i guess i'll shim it with a search, for now

[17:52:30.0000] <TabAtkins>
Or create a method for hashcoding your objects (generating a string that will uniquely and stably identify an object).

[17:55:21.0000] <gsnedders>
Hixie: V8 is instantly concervative with unflagging stuff

[17:55:21.0000] <Hixie>
well i've got all this code that expects set and get methods, so... :-)

[17:55:39.0000] <Hixie>
"instantly concervative"? i don't think that means anything.

[17:55:49.0000] <TabAtkins>
"insanely conservative"

[17:56:06.0000] <Hixie>
oh.

[17:56:13.0000] <TabAtkins>
Hixie: Still do hashcoding.  Just make get/set use those to store/retrieve your stuff from a normal object with string keys.

[17:56:29.0000] <Hixie>
how do i hash an element?

[17:56:38.0000] <Hixie>
i mean i can add a fake ID on it or something

[17:56:41.0000] <Hixie>
but that's lame

[17:57:00.0000] <TabAtkins>
That's up to you.  Figure out some way to generate a string that'll stably identify the object, so that if you're handed the same object again later, you'll generate the same hashcode.

[17:57:14.0000] <TabAtkins>
Adding expandos to an Element works, for example.

[17:57:21.0000] <Hixie>
i don't see any way to do that that doesn't involve mutating the node

[17:57:37.0000] <Hixie>
and mutating the node isn't hashing the node, it's just hanging an ID on it

[17:57:48.0000] <TabAtkins>
Same deal, really.

[17:58:20.0000] <TabAtkins>
It's not ideal, but it accomplishes your goal. Shrug.

[17:58:53.0000] <Hixie>
so does just walking a list :-)

[17:59:13.0000] <TabAtkins>
Yeah, but walking a list is linear-time, while hashcoding (/mutating) is constant-time.

[17:59:21.0000] <TabAtkins>
That might not be important to you.

[17:59:36.0000] <Hixie>
yeah in this case i'm hashing touch targets, so it's not a big deal

[17:59:55.0000] <TabAtkins>
Ah, kk.  Yeah, just search a list then.

[18:02:28.0000] <Hixie>
my god touch event latency on android chrome is bad

[18:02:41.0000] <zewt>
does it do the horrible forced-delay-after-every-touch thing

[18:03:19.0000] <zewt>
ios does that, and i've spent so much time jumping hoops basically reimplementing click to get around it

[18:03:36.0000] <Hixie>
no, i've disabled that already

[18:04:09.0000] <zewt>
ios safari doesn't let you, heh

[04:33:55.0000] <annevk>
mathiasbynens: trying to sort out your bug

[04:34:15.0000] <annevk>
mathiasbynens: oops, https://www.w3.org/Bugs/Public/show_bug.cgi?id=24104

[04:34:23.0000] <annevk>
lone surrogates, we meet again

[04:38:25.0000] <Ms2ger>
You know, all this kerfuffle about brendan... It's the string encoding we should be reviling him for

[04:42:14.0000] <mathiasbynens>
Ms2ger++

[04:44:20.0000] <mathiasbynens>
only surrogates should be allowed to pair!

[05:04:16.0000] <annevk>
oh my

[05:04:42.0000] <jgraham>
Lions and tigers and bears?

[05:05:29.0000] <jgraham>
annevk: https://www.youtube.com/watch?v=Etx-nDCZzLo

[06:09:09.0000] <gsnedders>
I remember a diagram somewhere of the web stack going all the way down to the Unicode layer. Not the one in the complete spec, but one prettier. Any ideas?

[06:09:21.0000] <gsnedders>
Googling quickly juts shows stuff going down to the HTML layer and not below.

[06:19:40.0000] <zcorpan>
annevk: oh, you asked a different Simon, heh

[06:25:32.0000] <zcorpan>
gsnedders: https://hsivonen.fi/web-stack/ ?

[06:27:57.0000] <gsnedders>
zcorpan: yeah, thanks

[06:35:29.0000] <zcorpan>
wonder what happened to JD

[06:36:37.0000] <annevk>
JD?

[06:50:36.0000] <zcorpan>
jd/adobe

[06:51:22.0000] <zcorpan>
web-stack brought me back to 2009 for a moment

[07:01:02.0000] <annevk>
Flash is gonna take over the world any day

[07:01:04.0000] <annevk>
now

[07:12:17.0000] <gsnedders>
zcorpan: On the other hand, best diagram I can think of :(I

[07:12:19.0000] <gsnedders>
* :(

[07:12:55.0000] <gsnedders>
hsivonen: Any chance of putting https://hsivonen.fi/web-stack/ under a license allowing it be used elsewhere?

[08:24:05.0000] <annevk>
SimonSapin: btw, did you guys discuss what to do with surrogates in servo for the encoders?

[08:24:13.0000] <annevk>
SimonSapin: I guess I basically want you to look at that bug :p

[08:24:27.0000] <SimonSapin>
which bug?

[08:25:28.0000] <gsnedders>
"that" one.

[08:25:45.0000] <SimonSapin>
I don’t know of a specific discussion, but Rust’s char explicitly type disallows surrogates

[08:26:04.0000] <SimonSapin>
(The str type does by being UTF-8.)

[08:28:10.0000] <jgraham>
Ms2ger started a UCS2 branch I think?

[08:28:20.0000] <SimonSapin>
As to Servo when dealing with JS strings, I’m pretty sure we haven’t discussed it

[08:28:30.0000] <Ms2ger>
Yeah

[08:29:24.0000] <SimonSapin>
Ms2ger: when converting from UCS2, unpaired surrogates are transformed into U+FFFD by the UTF-16 decoder, right?

[08:29:35.0000] <Ms2ger>
Dunno

[08:29:46.0000] <annevk>
SimonSapin: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24104

[08:29:49.0000] <Ms2ger>
You did the encodings stuff :)

[08:29:54.0000] <SimonSapin>
there’s std::str::from_utf16_lossy doing this now, but it’s fairly new

[08:30:33.0000] <SimonSapin>
annevk: let me finish this and I’ll look at encodings next

[08:45:05.0000] <annevk>
Mah

[08:45:25.0000] <annevk>
Unicode does not seem to say much on the matter, they don't really define these as algorithms

[08:47:21.0000] <annevk>
Oh actually, http://www.unicode.org/faq/utf_bom.html#gen2 seems pretty clear

[09:02:18.0000] <SimonSapin>
seems like the only sane answer

[09:08:27.0000] <annevk>
Well, it would mean Chrome has to change their implementation

[09:08:50.0000] <annevk>
While they do it for Unicode, they don't for windows-1252

[09:09:09.0000] <SimonSapin>
don’t do what?

[09:09:09.0000] <jgraham>
Anyone know how fast marquee is supposed to be?

[09:09:18.0000] <jgraham>
I can't tell if it's specified

[09:09:44.0000] <annevk>
SimonSapin: see my comment in that bug

[09:09:58.0000] <jgraham>
In particular if you have something like <marquee id="test2" loop="2" width="100">Whatever</marquee> can you tell how long it will take to run?

[09:12:52.0000] <annevk>
I wish there was a better term for Unicode scalar value

[09:13:12.0000] <annevk>
"unicode point" and "code point" anyone?

[09:13:33.0000] <SimonSapin>
Go back in time and un-invent UTF-16. Done.

[09:15:06.0000] <jgraham>
Hmm it looks like it might be 6px / 85ms

[09:16:44.0000] <annevk>
SimonSapin: to uninvent utf-16, one has to first uninvent Unicode

[09:16:55.0000] <Ms2ger>
And the universe?

[09:17:30.0000] <annevk>
Yes, as well as the other ones that are copying us

[09:33:12.0000] <annevk>
I guess I'll update the specification and start using "Unicode scalar value", so terrible

[09:34:22.0000] <SimonSapin>
annevk: call it "rune"?

[09:34:30.0000] <SimonSapin>
:)

[10:17:35.0000] <smaug____>
jgraham: oh, do you happen to know if we could kill marquee

[10:18:33.0000] <smaug____>
hmm, 0.3% says googles statistics

[10:23:28.0000] <jgraham>
smaug____: Yeah I always heard it was one of those "Big in Japan" things. Although in this case "Japan" was actually China

[10:54:03.0000] <TabAtkins>
smaug____: We determined in Blink that we couldn't kill <marquee>, but we did successfully kill the CSS Marquee stuff.

[10:54:30.0000] <Ms2ger>
You implemented the css marquee stuff?

[10:54:40.0000] <TabAtkins>
"implemented", yeah.

[11:08:40.0000] <annevk>
SimonSapin: is that what Rust calls it now?

[11:09:13.0000] <annevk>
SimonSapin: or are you trying to proxy your bikeshed?

[11:11:16.0000] <TabAtkins>
annevk: I think SimonSapin was making up a name off the top of his head.

[11:14:25.0000] <annevk>
TabAtkins: there's an ongoing bikeshed for Rust about how to rename char

[11:14:30.0000] <SimonSapin>
TabAtkins: nope http://golang.org/pkg/builtin/#rune

[11:14:35.0000] <TabAtkins>
Ah, kk.

[11:14:57.0000] <TabAtkins>
So we get char, glyph, and rune?

[11:15:09.0000] <TabAtkins>
+code point and code unit

[11:15:58.0000] <annevk>
Unicode scalar value is so full of fail

[11:16:05.0000] <annevk>
nobody uses it because it's too long

[11:16:13.0000] <TabAtkins>
Yeah.

[11:16:30.0000] <TabAtkins>
I'm just making sure of the terms we have in use. No negative connotation intended.

[11:17:46.0000] <annevk>
so Hixie uses "character" to mean code point and "Unicode character" to mean "Unicode scalar value" in HTML

[11:26:45.0000] <annevk>
we could adopt that across the board

[11:26:50.0000] <annevk>
is CSS aligned with that?

[11:27:14.0000] <SimonSapin>
CSS Syntax uses "code point"

[11:27:38.0000] <SimonSapin>
we avoided "character" because CSS Text uses that for "grapheme cluster"

[11:28:48.0000] <TabAtkins>
Yeah, "character" meaning "grapheme cluster" seems closer to what people mean in practice when they use the word casually.

[11:29:04.0000] <TabAtkins>
á is a character, regardless of whether it's composed or not.

[11:30:38.0000] <SimonSapin>
yeah, this is why I’m in favor of renaming Rust’s "char" type. It’s a Unicode scalar value, that name is just awful. So one idea was to use "rune" instead.

[11:31:46.0000] <jgraham>
Uh, yeah rune seems more awful

[11:32:28.0000] <jgraham>
A rune is a letter from a specific alphabet

[11:32:50.0000] <jgraham>
It would be like calling it "ideogram" or something

[11:34:36.0000] <jsbell>
rune also sounds more like glyph which is even more "the thing you see" than character.

[11:35:36.0000] <jgraham>
Yeah I think the precise meaning of rune is wrong and the vauge notion people have of rune is misleading

[11:35:51.0000] <jgraham>
It seems like a terrible choice

[11:36:15.0000] <gsnedders>
/me returns from the world of dissertation land, wishing he hadn't been ill and hadn't as a result run out of time :(

[11:36:52.0000] <gsnedders>
jgraham: *a specific type of alphabet

[11:36:59.0000] <gsnedders>
There are multiple runic scripts!

[11:38:12.0000] <jgraham>
Obviously we should rename it to "Carakan", which we could abbreviate "cara" so we'd have "char" and "cara"

[11:38:25.0000] <jgraham>
Which should maximise confusion :)

[11:38:53.0000] <gsnedders>
Bah, Carakan (as a word) is only five letters! :P

[14:40:43.0000] <Hixie>
i used character like i did in HTML because i have no use for "grapheme cluster" in HTML, and it seemed like it would be confusing to not use the word "character" at all.

[14:41:23.0000] <Hixie>
(i mean, e.g., calling them "Unicode code point encodings" is confusing as heck)

[14:41:53.0000] <Hixie>
(and people understand "space characters" better than "space code points" or "space scalar values")

[14:54:28.0000] <TabAtkins>
gsnedders: Do the runic languages actually use an alphabet?

[15:11:43.0000] <smaug____>
/me needs to join #rust and propose s/rune/tengwa/

[15:12:40.0000] <TabAtkins>
aksara, clearly. http://www.unicode.org/glossary/#aksara

[15:14:08.0000] <tantek>
Hixie, but people love new techno-jargon ;)

[15:15:17.0000] <TabAtkins>
gsnedders: (As opposed to an abjad or something.)

[15:15:19.0000] <Hixie>
"love" :-)

[15:22:49.0000] <Hixie>
tantek: we only just got ourselves back to "URL" :-P

[15:34:05.0000] <SamB>
still can has URN, though, right?

[15:34:22.0000] <SamB>
for those hard-to-resolve URLs

[15:47:41.0000] <tantek>
Hixie I know!

[15:47:55.0000] <tantek>
I had to debate myself and then argue with people over Twitter about it

[16:48:34.0000] <gsnedders>
TabAtkins: an abjad implies only consonents are written, right?

[16:49:14.0000] <gsnedders>
TabAtkins: But no, at least Futhark is definitely an alphabet, Futhorc almost certainly is therefore as well

[16:51:20.0000] <gsnedders>
TabAtkins: Note that both Futhark and Futhorc have direct transliterations into the Latin alphabet

[16:55:45.0000] <Hixie>
SamB: no idea what a URN really is

[16:56:25.0000] <zewt>
aren't we past the pretending they're different things thing

[16:56:37.0000] <zewt>
(no, apparently not)

[16:57:44.0000] <SamB>
well, I don't know how to download anything from the URL scheme defined here: http://tools.ietf.org/html/rfc3187.txt

[16:58:13.0000] <zewt>
so?

[16:58:45.0000] <gsnedders>
That's true of plenty of URI schemes.

[16:59:05.0000] <zewt>
i feel like gsnedders is baiting me :P

[16:59:32.0000] <zewt>
nothing says first-world like spending your friday night debating "url" vs. "uri" vs. "urn"


2014-03-29
[17:00:22.0000] <SamB>
I tend to think of the schemes that I can't get resources from as URNs. mailto: excepted, for some reason.

[17:01:51.0000] <zewt>
i call them all "URLs", because I don't find the distinction useful, and trying to distinguish them seems like trying to divide things artificially

[17:05:37.0000] <zewt>
i guess things like XML namespaces make it feel particularly silly, where you have strings that look exactly like URLs to HTTP websites, but are really meaningless identifiers that don't point to any resource

[17:06:24.0000] <zewt>
(not that XML namespaces are anything to draw much information from; using URLs as opaque identifiers is a terrible idea)

[17:12:07.0000] <gsnedders>
zewt: I dunno. I've just never got out of the habit. :P

[17:13:39.0000] <SamB>
zewt: well, that's pretty much the ISBN scheme in a nutshell (opaque identifiers, I mean, not so much the terrible idea part)

[17:15:35.0000] <SamB>
/me eagerly awaits a proper URL implementation of that scheme

[17:22:28.0000] <Hixie>
SamB: URLs that don't point to a specific resource or software action are kinda pointless imho.

[17:22:43.0000] <Hixie>
SamB: (this correlates well to the total lack of usage of such URLs)

[17:23:16.0000] <SamB>
I think they get used in bibliographic data

[17:23:47.0000] <SamB>
though granted URLs that can be resolved seem preferred

[17:48:02.0000] <esprehn>
the MediaQueryList API is really silly, it reinvents event listeners :/

[18:00:20.0000] <TabAtkins>
gsnedders: Yes, and so that does indeed imply that Futhark is an alphabet. Cool.

[18:00:26.0000] <TabAtkins>
esprehn: Agreed. :/

[18:20:02.0000] <gsnedders>
 TabAtkins As is Futhorc, FWIW. They're *relatively* similar.

[18:20:21.0000] <gsnedders>
TabAtkins: phonetically Old Norse and Old English were mutually comprehensible, at least to some extent

[18:21:12.0000] <gsnedders>
TabAtkins: The alphabets are probably similar enough to be understandable though not quite as far

[18:21:24.0000] <TabAtkins>
Yeah.

[18:25:07.0000] <gsnedders>
(The differences in verb forms would be especially noticable written, and not quite as much phonetically)

[18:49:06.0000] <Hixie>
SamB: find me users that click on links that do nothing, and i'll be impressed :-)

[18:49:22.0000] <Hixie>
SamB: (i've nothing against e.g. isbn: links, since they do do something if you have appropriate software.)

[19:21:10.0000] <gsnedders>
Hixie: a tel: link doesn't really do the same thing as any other link when clicked on, as an example

[19:21:18.0000] <gsnedders>
(On a phone, say.)

[19:21:23.0000] <Hixie>
tel: is like mailto:

[19:21:23.0000] <gsnedders>
(Which you wouldn't know about. :))

[19:21:28.0000] <Hixie>
a simple URL

[19:21:32.0000] <Hixie>
to an action

[19:22:19.0000] <zewt>
tel: and mailto: are just like any other url (they tend to load other apps, but so can ftp or anything else)

[19:22:55.0000] <gsnedders>
I'd argue it's not a location, and hence tel/mailto are different to ftp/http

[19:23:02.0000] <gsnedders>
but, eh, idk really

[19:23:11.0000] <gsnedders>
Well, care more than know

[19:23:28.0000] <zewt>
it's not the same as http in that it indicates an action (make a phone call) rather than a resource location, but i think that's completely uninteresting as far as the "what is a url" question goes

[19:26:11.0000] <zewt>
how about we just go with a url is like porn: hard to define, but i know it when i see it

[19:36:49.0000] <SamB>
I imagine tel: would actually have worked on the Windows 95 box I used to use ... if there was a phone plugged into the modem

[19:37:17.0000] <SamB>
anyway I want software that has all the books

[19:37:45.0000] <SamB>
though some books seem to predate ISBNs, so it'd need to support more schemes than just that

[19:38:15.0000] <SamB>
oh, and then there's periodicals

[20:33:52.0000] <Hixie>
zewt: my point is that a url is easy to define, it's whatever has the form foo:bar... like in url.spec.whatwg.org

[07:05:14.0000] <smaug____>
Domenic_: what is the status with stream APIs

[07:05:58.0000] <smaug____>
there is still the w3c draft and then there is your draft

[07:27:44.0000] <smaug____>
though, I guess http://anolis.hoppipolla.co.uk/aquarium.py/output?uri=http%3A%2F%2Frawgithub.com%2Fwhatwg%2Fstreams%2Fofficial-lookin%2Findex.html&process_filter=on&process_toc=on&process_xref=on&process_sub=on&process_annotate=on&filter=&annotation=&newline_char=LF&tab_char=SPACE&min_depth=2&max_depth=6&w3c_compat_xref_a_placement=on&parser=lxml.html&serializer=html5lib&output_encoding=ascii is n

[07:27:45.0000] <smaug____>
ot even a real draft yet

[07:29:10.0000] <smaug____>
I guess the readme isn't just converted to a spec format yet

[09:21:38.0000] <vmatva_>
Hi everybody. I'm reading WHATWG Encoding standard. And there is a 'encode' algorithm (http://encoding.spec.whatwg.org/#encode) . It says "Let output be a code point stream." That seems wrong to me, because result of encoding is a byte stream. Not a code point stream. Am I right? Or I misunderstood something?

[09:41:20.0000] <smaug____>
vmatva_: better to ask annevk about that spec

[09:42:39.0000] <sarsky11-hi>
/me is now away - Reason : Auto-Away after 30 minutes

[09:47:25.0000] <smaug____>
MikeSmith: Didn't you start spec'ing Console API ?

[10:20:46.0000] <SamB>
vmatva_: that does sound wrong, yes

[12:15:44.0000] <Domenic_>
smaug____: drafts are merging, using whatwg/streams as the base. Some of the stuff, e.g. Object URLs, may get ported over from the W3C draft, but the core primitives are the ones from whatwg/streams.

[12:34:33.0000] <SimonSapin>
Hixie: http://whatwg.org/C#input-stream "Any character that is a not a Unicode character, i.e. any isolated surrogate, is a parse error. (These can only find their way into the input stream via script APIs such as document.write().)"

[12:34:59.0000] <SimonSapin>
It’s a parse errors, but UA still have to process it and can end up with surrogates in any string in the resulting tree?

[12:36:51.0000] <zewt>
well, can you write a surrogate pair with two document.write() calls and have it work?

[12:37:21.0000] <zewt>
(haven't tried but would guess yes)

[12:38:00.0000] <SimonSapin>
zewt: I think yes, but I’m not interested in unpaired surrogates

[12:38:14.0000] <SimonSapin>
s/not/more/, sorry

[12:38:31.0000] <zewt>
i mean, you'd have a lone surrogate, but only temporarily

[12:38:43.0000] <SimonSapin>
what does temporarily mean?

[12:39:35.0000] <zewt>
document.write("\ud800"); document.write("\udc00"); would give you a lone surrogate for the period between the two calls

[12:39:51.0000] <SimonSapin>
data:text/html,<script>document.write("a\uD800b")</script>

[12:40:20.0000] <SimonSapin>
In firefox, I see D800 in a box, ie. "missing glyph"

[12:40:38.0000] <zewt>
that's what i'd expect

[12:40:46.0000] <zewt>
chrome gives just "a"

[12:40:55.0000] <SimonSapin>
so the surrogate made its way all the way up to the fonts subsystem

[12:41:35.0000] <zewt>
chrome's behavior is pretty surprising to me

[12:44:07.0000] <zewt>
more specifically: the whole string is in the DOM, but rendering stops (the "b" isn't rendered)

[12:45:20.0000] <zewt>
(which means that writing UTF-16 codepoints one at a time still works)

[12:47:52.0000] <SimonSapin>
Firefox is fine with it anywhere in the tree

[12:47:54.0000] <SimonSapin>
data:text/html,<script>document.write("<a\uD800b>");document.write(document.body.firstChild.tagName)</script>

[12:47:58.0000] <SimonSapin>
data:text/html,<script>document.write("<a a\uD800b>");document.write(document.body.firstChild.attributes[0].localName)</script>

[12:50:33.0000] <SimonSapin>
For context: in Servo we’re considering having the HTML tokenizer work on UTF-8 input rather than UTF-16. But UTF-8 can not encode surrogates.

[12:50:49.0000] <zewt>
i think chrome and firefox are doing the same thing during parsing, firefox's renderer is just better at coping with it

[12:51:07.0000] <SimonSapin>
I’m trying to determine if we can get away with decoding surrogates to U+FFFD, or if we’re constrained by web compat

[12:51:28.0000] <SimonSapin>
I have a hard time imagining real content relying on this, but this is the web

[12:51:44.0000] <SimonSapin>
hsivonen: any opinion?

[12:51:49.0000] <zewt>
i couldn't say, but i'd suspect there are people for some reason doing things like (equivalent to) for(i=0;i<s.length;++i) document.write(s.charAt(i));

[12:52:33.0000] <zewt>
or writing blocks of 1024 codepoints, or things that would otherwise split surrogates into two writes

[12:54:17.0000] <SimonSapin>
so, surrogate pairs in separate d.write calls. Yes, that seems plausible

[12:55:56.0000] <gsnedders>
SimonSapin: Yes, lone surrogates can be introduced from document.write, so it is an issue

[12:56:12.0000] <gsnedders>
I tried to convince Hixie to change this before to forbid lone surrogates to no avail, fwiw

[12:57:57.0000] <zewt>
trying to think of a real-life case where the above might happen, but it's hard to even think of legitimate uses for document.write itself...

[12:58:49.0000] <SimonSapin>
gsnedders: forbid as in replace them with U+FFFD?

[13:00:38.0000] <gsnedders>
SimonSapin: aye

[13:01:01.0000] <SimonSapin>
I’d be in favor

[13:01:11.0000] <zewt>
it's pretty weird that document.write allows it and (eg) createElement doesn't, since it means document.createElement(otherElement.tagName) can fail

[13:01:22.0000] <zewt>
(at least in Chrome, didn't check the spec for that)

[13:01:25.0000] <gsnedders>
zewt: There are plenty of cases that can fail though

[13:01:48.0000] <Domenic_>
yeah createElement has a lot of restrictions that HTML parsing doesn't

[13:01:56.0000] <Domenic_>
which is IMO quite weird.

[13:02:08.0000] <gsnedders>
It has to match the Name production in XML 1.04e in every browser

[13:03:14.0000] <zewt>
so you can create another element with the same tag via cloneNode, but not createElement

[13:05:31.0000] <zewt>
weird, but I guess I can't think of any case where it's harmful, and assuming document.write's leniency is web compat, I guess it's not necessarily better to make other APIs extra lenient just to be consistent with that

[13:07:10.0000] <jgraham>
SimonSapin: That sounds like a bad idea (trying to pretend that the input stream is UTF8)

[13:07:27.0000] <SimonSapin>
jgraham: explain?

[13:07:45.0000] <zewt>
i'd be worried that it would result in different layering

[13:07:48.0000] <jgraham>
SimonSapin: Well it isn't so…

[13:08:14.0000] <zewt>
eg. different encodings (and therefore different error cases and representable concepts) at each place in the pipeline

[13:08:28.0000] <jgraham>
SimonSapin: Specifically it seems like the kind of assumption that would be embedded quite deeply in the code

[13:08:36.0000] <jgraham>
Then later we would find web compat issues

[13:08:52.0000] <jgraham>
'and then it would be impossible to change without rewriting lots of things

[13:11:37.0000] <SimonSapin>
jgraham: existing implementations could keep using UTF-16 and still decode lone surrogates to U+FFFD

[13:12:39.0000] <gsnedders>
Indeed, the spec used to require this

[13:12:48.0000] <gsnedders>
And it wasn't compat reasons that changed it

[13:13:17.0000] <jgraham>
gsnedders: If the implementations don't do it we have no idea what the compat restrictions are

[13:13:20.0000] <SimonSapin>
gsnedders: what was the reason?

[13:13:25.0000] <gsnedders>
jgraham: Implementations did for a while.

[13:13:32.0000] <jgraham>
gsnedders: Citation needed

[13:13:46.0000] <gsnedders>
SimonSapin: IIRC it was an accidental change in an editorial change that nobody noticed for about two years

[13:13:59.0000] <gsnedders>
Or at least nobody questioned for that long

[13:15:17.0000] <gsnedders>
(I think html5lib-tests still requires lone surrogates get replaced by U+FFFD!)

[13:16:33.0000] <jgraham>
(also doing UCS2 to UTF8 conversion in every document.write / innerHTML call seems rather performance-suboptimal)

[13:16:51.0000] <jgraham>
(especially for innerHTML which is tragically often in tight loops)

[13:17:06.0000] <zewt>
(UTF-16)

[13:17:25.0000] <gsnedders>
zewt: No, UTF-16+lone-surrogates-passthrough

[13:25:53.0000] <zewt>
firefox still allows pasting lone surrogates into input fields, heh

[13:26:39.0000] <zewt>
looks like chrome does too (with the same rendering issues as elsewhere)

[13:28:19.0000] <zewt>
firefox will copy it out to the clipboard, chrome copies FFFD

[13:28:30.0000] <gsnedders>
Man, running `git annotate` on the spec takes… a while.

[13:28:45.0000] <zewt>
it's one of the slower git things in my experience

[13:29:17.0000] <gsnedders>
Well, right. It's obviously slow. But doing it on a 6MB file is really horrible.

[13:30:09.0000] <zewt>
probably more to do with the number of revisions visible

[13:30:23.0000] <zewt>
or how many revisions it has to go back or something, don't know how it's implemented

[13:31:03.0000] <gsnedders>
Yeah, number of revisions and number of lines.

[13:31:16.0000] <gsnedders>
It's number of lines that really kills it though

[13:33:36.0000] <gsnedders>
(The fact it's almost entirely CPU bound and not IO bound should be telling)

[13:33:51.0000] <vmatva_>
SamB: thank you. I submitted a bug. Just needed any confirmation.

[15:04:45.0000] <SimonSapin>
gsnedders: does html5lib-tests have tests for document.write()?

[15:05:46.0000] <gsnedders>
SimonSapin: No. But it does have tests for the tokenizer given a specific input, which I think is where these things are.

[15:05:59.0000] <gsnedders>
SimonSapin: i.e., the input stream prior to pre-processing

[15:06:53.0000] <SimonSapin>
gsnedders: Right. But normally that’s the output of the character encoding decoders, which never emit surrogates

[15:07:50.0000] <gsnedders>
SimonSapin: Indeed

[15:12:09.0000] <gsnedders>
SimonSapin: There's three justifications for having it there: a) in implementations with scripting support have to cope with this case (as the input stream can through the second entry to the input stream); b) bugs in the encoding layer leading to it; c) the fact these tests were written before there was any definition about the encoding layer in general

[15:12:37.0000] <SimonSapin>
makes sense

[15:14:20.0000] <gsnedders>
(wrt a, if the impl doesn't have scripting support they can just detect lone surrogates in the test and ignore that test)

[15:15:19.0000] <gsnedders>
SimonSapin: Do you, in webencodings, work around issue8271?

[15:16:21.0000] <SimonSapin>
gsnedders: no. The actual codecs are Python’s

[15:16:29.0000] <gsnedders>
SimonSapin: This is what I thought

[15:16:42.0000] <gsnedders>
Hence html5lib-python has to deal with the fact it supports Python versions with broken encodings :)

[15:16:57.0000] <SimonSapin>
python-webencodings is not doing much besides aliases

[15:19:18.0000] <gsnedders>
So it technically doesn't impl the spec :P

[15:41:19.0000] <SimonSapin>
uh, Presto fails at data:text/html,<script>document.write("\uD83D");document.write("\uDCA9")</script>

[15:41:27.0000] <SimonSapin>
(not that it’s very relevant anymore)

[15:45:47.0000] <gsnedders>
What does it do?

[15:57:14.0000] <SimonSapin>
Presto gives two empty rectangles (which seem to be the glyph for "did not find a glyph")

[15:59:22.0000] <zewt>
data:text/html,<script>document.write("\uD83D"); document.write("\uDCA9"); document.write(document.body.innerText.charCodeAt(0).toString(16));</script>


2014-03-30
[08:08:34.0000] <gsnedders>
Is there any way to do a media query based on device pixels and not CSS pixels?

[08:09:09.0000] <gsnedders>
resolution?

[09:01:25.0000] <gsnedders>
SimonSapin: https://github.com/html5lib/html5lib-tests/issues/19#issuecomment-39029223

[09:02:56.0000] <gsnedders>
SimonSapin: The important part here is https://www.w3.org/Bugs/Public/show_bug.cgi?id=11298

[09:08:18.0000] <SimonSapin>
thanks gsnedders


2014-03-31
[23:51:56.0000] <ondras>
so I understand that the attributeChanged callback is executed only when the custom element's own attribute chanegs

[23:52:00.0000] <ondras>
*changes

[23:52:22.0000] <ondras>
what if my custom element need to know when its size changes?

[00:18:07.0000] <cdan>
good morning

[02:02:30.0000] <zcorpan>
ondras: size as in rendered size?

[02:11:59.0000] <ondras>
zcorpan: yes

[02:12:09.0000] <ondras>
zcorpan: my use case is an interactive map

[02:12:20.0000] <ondras>
zcorpan: the underlying JS api needs to be notified when the viewport size changes

[02:12:39.0000] <zcorpan>
ondras: use window.onresize

[02:14:20.0000] <ondras>
zcorpan: what if the size of my element changes due to interaction with other elements in page?

[02:14:56.0000] <zcorpan>
ondras: is the map you want to be notified about a <canvas>?

[02:15:09.0000] <ondras>
zcorpan: no, but it behaves similarly

[02:15:14.0000] <ondras>
zcorpan: think of a google maps api

[02:15:43.0000] <ondras>
zcorpan: so its container might have width:50%, but can be situated within other element whose size might change independently...

[02:33:03.0000] <ondras>
11:15 < ondras> zcorpan: no, but it behaves similarly

[02:33:04.0000] <ondras>
11:15 < ondras> zcorpan: think of a google maps api

[02:33:04.0000] <ondras>
11:15 < ondras> zcorpan: so its container might have width:50%, but can be situated within other element whose size might change independently...

[02:33:35.0000] <zcorpan>
ondras: can you point to a page that does that?

[02:33:39.0000] <zcorpan>
ondras: i can think of ways to hack around it, e.g. use an iframe and onresize. or if you control the other things whose size might change, let them send a notification when they change their size

[02:34:11.0000] <zcorpan>
(sorry for dropping off, i'm on the train)

[02:36:23.0000] <ondras>
zcorpan: well have a look at http://api4.mapy.cz/

[02:36:32.0000] <ondras>
zcorpan: I want to implement the map as a custom element

[02:36:45.0000] <ondras>
zcorpan: but I have no explicit control on its size and placement

[02:37:00.0000] <ondras>
zcorpan: so a user might want to put it in a sidebar with variable width or so

[02:37:17.0000] <ondras>
zcorpan: and the underlying mapping JS absolutely needs to know when its "viewport" size changes

[02:39:02.0000] <zcorpan>
ondras: ok, thanks

[02:39:08.0000] <zcorpan>
/me 101 switching trains

[03:03:43.0000] <zcorpan>
ondras: it's not clear to me if this is something that's specific to custom elements or if we should provide it for elements in general

[03:04:33.0000] <ondras>
zcorpan: agreed.

[03:04:46.0000] <zcorpan>
ondras: also, is it OK if it's just an event that's queued after the fact, or does the JS need to be notified before the new layout actually happens?

[03:04:52.0000] <ondras>
zcorpan: anyway, without a custom element, the situation is more explicit

[03:05:03.0000] <ondras>
zcorpan: people are used to call JS API "syncSize" or so when situation changes

[03:05:10.0000] <ondras>
but when the map becomes a declarative element

[03:05:17.0000] <ondras>
as in <our-map x=... y=... />

[03:05:29.0000] <zcorpan>
yeah

[03:05:30.0000] <ondras>
people might want to evade any further JS interaction at all

[03:05:52.0000] <ondras>
zcorpan: queued after the fact, it can be delayed

[03:06:07.0000] <ondras>
zcorpan: the JS API needs to fetch additional map tiles to fill in the viewport as it resizes

[03:06:48.0000] <zcorpan>
ok

[03:08:20.0000] <zcorpan>
ondras: i'd say bring up the use case to the custom element people. if it's something that should work for ordinary elements also then [cssom-view] on www-style

[03:09:29.0000] <ondras>
zcorpan: okay, can you please point me to some directions? is this irc channel not sufficient?

[03:38:24.0000] <zcorpan>
ondras: see "Participate" at the top of http://w3c.github.io/webcomponents/spec/custom/

[03:41:09.0000] <ondras>
okay, thanks

[04:07:17.0000] <smaug____>
which one is the current promise spec

[04:08:32.0000] <smaug____>
maybe http://promises-aplus.github.io/promises-spec/ ?

[04:11:35.0000] <smaug____>
but that doesn't define clearly how it all integrates with the event loop

[05:11:50.0000] <IZh>
benschwarz: Hi.

[05:13:50.0000] <zcorpan>
smaug____: https://people.mozilla.org/~jorendorff/es6-draft.html maybe?

[05:29:26.0000] <IZh>
Is it possible to get PDF-version of HTML5? :-)

[05:30:10.0000] <IZh>
I want to read it from my smartphone in offline. But I can't find actual offline-version or PDF.

[05:45:32.0000] <jorendorff>
promises spec will be better in a month, i'm told

[05:45:37.0000] <jorendorff>
kind of a disaster right now

[05:48:48.0000] <zcorpan>
IZh: there was for a while but is no longer because it took too much resources on the server or something. ask Hixie if you want to set up a web service he can run in the build process

[05:48:53.0000] <odinho_>
IZh: There was, -- but the generators kept crashing when it was created. This was way back though, I haven't had an urge to read spec any other place than web these days.

[05:51:02.0000] <zcorpan>
also see https://hsivonen.fi/printing-wa10/ (this was earlier still)

[05:52:10.0000] <IZh>
zcorpan: Thanks. I will ask him.

[05:54:16.0000] <IZh>
odinho: I have most of the spare time on the road in train or subway where there is no Internet. :-) I tried to use single-page from W3C but it is too heavy for mobile devices. And it has an annoying banner on the left and more annoying button on top of the text.

[05:55:43.0000] <IZh>
Also I tried to download developers.whatwg.org and tried to build it. It doesn't work offline.

[05:56:48.0000] <jgraham>
IZh: You should try getting Hixie to add offline support for the multipage spec :)

[05:57:10.0000] <IZh>
jgraham: I think, yes. :-)

[05:57:17.0000] <IZh>
Hixie: Hi.

[05:57:47.0000] <jgraham>
IZh: (it is before 6am Hixie time)

[05:58:39.0000] <IZh>
By the way, http://archive.germanforblack.com/articles/html5-for-web-developers states: It features find-as-you-type search, offline access, beautiful typography, technical references pulled inline, and alternate styles for handheld devices or low resolution displays.

[05:58:56.0000] <IZh>
Where is promised offline access? ;-)

[05:59:40.0000] <jgraham>
That version, which isn't the whole spec, does seem to have offline access

[06:00:17.0000] <IZh>
jgraham: I can't find it.

[06:00:28.0000] <IZh>
I mean, how to make it work offline?

[06:01:26.0000] <jgraham>
IZh: At least on Desktop Firefox it does an offline sync when you first load it and then transparently keeps working when you put the browser in offline mode

[06:01:35.0000] <jgraham>
YOu don't have to "do" anything

[06:02:43.0000] <IZh>
jgraham: Ahh... That offline... I used wget -r -p ;-)

[06:04:36.0000] <jgraham>
Yeah, the one targeted at people who, when confronted with a problem, don't think "I know, I'll use wget" ;)

[06:05:59.0000] <IZh>
I thought about "total offline" where I will have static version on my disk, and could open it by any local browser.

[06:08:15.0000] <sangwhan>
does anyone know if http://test.csswg.org/harness/suite/css-multicol-1_dev is still in use? tests are 404

[06:09:23.0000] <IZh>
By the way, it there any document describing difference between W3C's and WHATWG's HTML5?

[06:09:48.0000] <sangwhan>
IZh: http://www.w3.org/html/landscape/

[06:10:58.0000] <zcorpan>
sangwhan: http://hg.csswg.org/test/file/ccd08e6ef255/approved/css3-multicol/src ?

[06:11:46.0000] <IZh>
sangwhan: Thank you. Both standards says that there is no such document. :-)

[06:12:05.0000] <zcorpan>
there is no spoon

[06:12:31.0000] <sangwhan>
zcorpan: thanks, so the suite i was looking at earlier is dead now?

[06:12:52.0000] <sangwhan>
/me knows nothing about css-wg or processes there, it seems quite different from the other groups

[06:12:53.0000] <zcorpan>
sangwhan: no idea. ask in #css or #testing on irc.w3.org

[06:13:19.0000] <sangwhan>
zcorpan: ok, gotcha

[06:16:47.0000] <Ms2ger>
sangwhan, the csswg likes Process. A lot.

[06:17:08.0000] <sangwhan>
Ms2ger: process with a capital P?

[06:18:10.0000] <Ms2ger>
Yep

[06:20:12.0000] <jgraham>
Although not with a capital PR, sadly

[06:20:42.0000] <zcorpan>
PROcess

[06:20:47.0000] <zcorpan>
for the pros

[06:22:08.0000] <jgraham>
You have to have a recognised qualification in bureaucracy to get entry?

[08:23:41.0000] <dglazkov>
good morning, Whatwg!

[09:48:57.0000] <TabAtkins>
Replacing lone surrogates with U+FFFD wouldn't corrupt much, if any, I'd think.

[09:51:15.0000] <TabAtkins>
gsnedders: There is no way to MQ based on device pixels directly.  'resolution' is based on the device-pixel-to-px ratio, if that's helpful.

[09:56:59.0000] <gsnedders>
TabAtkins: But then I have the fact there's no image-resolution supported, right? :(

[09:57:10.0000] <TabAtkins>
Yes. What are you trying to do?

[09:57:40.0000] <gsnedders>
Just have a header image that's high quality, and not always loading the full DPI one

[09:57:48.0000] <gsnedders>
s/DPI/resolution/

[09:57:49.0000] <gsnedders>
bleh

[09:58:07.0000] <TabAtkins>
In CSS or HTML?

[09:58:11.0000] <TabAtkins>
Sounds like CSS.

[09:58:13.0000] <gsnedders>
CSS really.

[09:58:14.0000] <TabAtkins>
Use -webkit-image-set().

[09:58:23.0000] <gsnedders>
What about other browsers? :(

[09:58:33.0000] <TabAtkins>
File bugs for them to implement image-set(). It's in Images 4.

[09:59:29.0000] <gsnedders>
Does image-set not still render stuff at the CSS 96dpi-apparent?

[10:00:02.0000] <TabAtkins>
I don't know what you're asking.  But it believes you when you tell it what resolution the image is, and renders appropriately.

[10:00:05.0000] <wilhelm>
I didn't see your original question, but *-device-pixel-ratio plus a background-size property usually gets the job done.

[10:00:55.0000] <TabAtkins>
Yeah, manual sizing works too.  Browsers'll downscale the high-DPI image to the size you specify, which is basically the same thing.

[10:01:44.0000] <gsnedders>
/me wonders if he even has any high DPI hardware to test this on…

[10:01:44.0000] <gsnedders>
:P

[10:02:04.0000] <TabAtkins>
I recommend not doing anything at all if you don't have the ability to test it.

[10:02:08.0000] <gsnedders>
Oh, my tablet does. Okay.

[10:02:14.0000] <Hixie>
sangwhan: note that that landscape document is woefully incomplete (e.g. misses all the editorial changes, and a number of (unintentional?) normative changes

[10:02:35.0000] <gsnedders>
TabAtkins: Oh, I can borrow stuff to test, just slower turn-around town. :)

[10:02:35.0000] <SamB>
/me wonders how much overlap there is between "high resolution hardware" and (say) "200% zoom"

[10:02:52.0000] <gsnedders>
s/town/time/

[10:02:55.0000] <gsnedders>
What am I even thinking.

[10:03:12.0000] <wilhelm>
gsnedders: I use manual sizing and queries on the banner with a person on it here: https://kreftforeningen.no/

[10:03:29.0000] <sangwhan>
Hixie: it's better than nothing...

[10:03:31.0000] <TabAtkins>
SamB: Ideally, a 2x device and a 1x device on 200% zoom should be treated identically by all the things that care about resolution.

[10:03:51.0000] <SamB>
TabAtkins: exactly my thoughts

[10:04:02.0000] <Hixie>
sangwhan: sure, just making sure people don't have the wrong expectations :-)

[10:05:24.0000] <sangwhan>
Hixie: point

[10:06:06.0000] <wilhelm>
gsnedders: (Actually, on that banner I have a ton of different images. I have a 1-column, 2-column and 3-column version of the image, depending on your screen width. Double that for 1x and 2x resolution of each. And then there's 7 different people it rotates between. :D )

[10:08:54.0000] <Hixie>
i really wish i could work out what people are doing ot accidentially file copy-and-paste content as bugs

[10:10:55.0000] <SamB>
against html?

[10:11:49.0000] <SamB>
perhaps they use devices on which it is easy to accidentally paste?

[10:12:19.0000] <TabAtkins>
I dont' think those devices exist.

[10:12:43.0000] <SamB>
so you don't think pocket-drag-and-drop is likely?

[10:13:04.0000] <TabAtkins>
I don't, no. ^_^

[10:13:26.0000] <gsnedders>
wilhelm: Well ooooh, aren't you fancy. :P

[10:13:28.0000] <wilhelm>
Unix middle click? (c:

[10:14:04.0000] <SamB>
Hixie: do you have user-agent data?

[10:14:05.0000] <wilhelm>
gsnedders: Responsive photography is fun, mmkay.

[10:14:31.0000] <SamB>
I guess that goes into the bugs, doesn't it

[10:14:34.0000] <gsnedders>
wilhelm: :)

[10:15:25.0000] <gsnedders>
I know I'm not going to get this done in the week I have before exam panic time :(

[10:15:43.0000] <wilhelm>
You're procastina-hacking?

[10:16:10.0000] <gsnedders>
Nah, I put aside this week to do stuff *I* want to do and don't have external deadlines for.

[10:16:11.0000] <Hixie>
SamB: yeah

[10:16:21.0000] <gsnedders>
Except dealing with taxes. Have external deadline for that.

[10:16:35.0000] <gsnedders>
And I have to file taxes *on paper*. Ergh.

[10:17:22.0000] <gsnedders>
Pretty sure that's cruel or unusual punishment.

[10:17:39.0000] <wilhelm>
Is your government from the past?

[10:18:11.0000] <gsnedders>
It can be done: a) online (except if 1, 2, or 3 apply); b) using third-party commerical software; c) on paper.

[10:18:29.0000] <gsnedders>
I refuse to pay for the third-party software, and I'm in one of the categories forbidden from online, so…

[10:26:47.0000] <Hixie>
hey, i found a bug in the tokeniser tests

[10:27:09.0000] <Hixie>
"Bad named entity: Abreve without a semi-colon" doesn't have a "ParserError"

[10:28:33.0000] <gsnedders>
file a bug

[10:28:41.0000] <gsnedders>
To quote your normal retort :)

[10:29:17.0000] <Hixie>
i have a patch

[10:29:19.0000] <Hixie>
what do i do with it?

[10:30:03.0000] <Hixie>
(also, are none of you actually checking the parser errors in the tokeniser tests? how was this not caught earlier?)

[10:30:06.0000] <SimonSapin>
zcorpan: CSSOM doesn’t say anything about surrogate code point. Does that mean they’re valid in any input and end up untouched in selectors, property values, etc?

[10:30:07.0000] <gsnedders>
The same as you did for the last contribution you made to html5lib! Create a pull request on it.

[10:30:50.0000] <gsnedders>
Hixie: html5lib definitely doesn't check parse errors, I think Nolan's Obj-C parser does, but I don't know if he uses the tokenizer tests

[10:31:04.0000] <gsnedders>
The tokenizer tests are somewhat dead, everybody just uses the tree-construction tests.

[10:31:22.0000] <Hixie>
gsnedders: do the tree-construction tests subsume all the tokeniser tests?

[10:31:29.0000] <Hixie>
(would be good to put that in the README if it's true)

[10:31:44.0000] <gsnedders>
Not quite. jgraham had a programmatic conversion to tree constructor tests which I believe is public somewhere.

[10:31:47.0000] <Hixie>
(how the heck do i do a pull thingy. the google isn't helping me.)

[10:32:28.0000] <Hixie>
well right now my tokeniser is just entity parsing, so i'll keep using them for now and see how bad they are

[10:32:36.0000] <Hixie>
if they're actually useless, i'll propose killing them entirely.

[10:32:55.0000] <jgraham>
They shouldn't be useless

[10:33:28.0000] <gsnedders>
There's also the difficulty that different impls rely on different amounts of feedback from the tree constructor

[10:33:36.0000] <Hixie>
git commit, git push?

[10:33:46.0000] <gsnedders>
(i.e., some make transitions defined in the tree construction in the tokenizer)

[10:33:55.0000] <gsnedders>
Hixie: Yeah, then go onto GH and create a PR.

[10:33:57.0000] <Hixie>
yeah i never really understood why we had tokeniser tests at all, but since we have them i figured i'd use them

[10:33:58.0000] <jgraham>
Hixie: On a branch

[10:34:04.0000] <gsnedders>
Hixie: but if jgraham's around he can help

[10:34:08.0000] <gsnedders>
Because I need to go :)

[10:34:18.0000] <jgraham>
I'm not, really

[10:34:19.0000] <Hixie>
i miss the good old days where submitting a patch was just svn diff | email

[10:34:41.0000] <jgraham>
/me doesn't :p

[10:35:15.0000] <Hixie>
jesus, you have to git add first

[10:35:37.0000] <jgraham>
(this is a good thing)

[10:35:43.0000] <Hixie>
if you say so

[10:35:50.0000] <Hixie>
what username is git push asking me for?

[10:36:17.0000] <jgraham>
You need to set up ssh keys for github

[10:37:02.0000] <Hixie>
to _submit a patch_ i need an _ssh key_?!

[10:37:08.0000] <jgraham>
Yes

[10:37:27.0000] <Hixie>
ok forget that

[10:37:38.0000] <Hixie>
i'll just send gsnedders a diff when i'm done

[10:38:47.0000] <Ms2ger>
Hixie, I think you can push over https with your password

[10:38:55.0000] <SamB>
Hixie: yes, it'd be better if you could just submit merge requests by email like you used to be able to do with bzr

[10:40:01.0000] <Hixie>
hm, actually, this whole patch is wrong anyway. turns out "&Abreve" alone isn't a parse error, since it's not a valid entity and there's no trailing semicolon

[10:40:21.0000] <SamB>
what is a "parse error"

[10:42:00.0000] <Hixie>
SamB: http://www.whatwg.org/specs/web-apps/current-work/#parse-error

[10:42:40.0000] <SamB>
I guess I should have checked for that before saying that

[10:44:15.0000] <gsnedders>
Hixie: I think html5lib-python tests *number* of parse errors (but not order), so I think the number /should/ be right

[10:44:32.0000] <Hixie>
yeah, i just misread the test

[10:44:48.0000] <Hixie>
my implementation had a big "XXX need to only fire parse error in certain cases" thing where my bug was

[10:44:58.0000] <Hixie>
i didn't expect that to be one of the first things i'd run into

[10:45:14.0000] <SamB>
FR: source code should be in color

[10:45:33.0000] <SamB>
so it could be a big *red* XXX

[10:45:57.0000] <gsnedders>
As the top of source shows, Hixie is a fan of text-mode

[10:45:58.0000] <SamB>
hmm, actually that's not a very good joke, since you can actually do that ...

[10:46:24.0000] <Hixie>
actually i'm using delphi-mode here.

[10:46:32.0000] <Hixie>
though it really doesn't colour much

[10:46:58.0000] <SamB>
can't you add more patterns like usual?

[10:50:52.0000] <Hixie>
SamB: that would involve figuring out elisp...

[11:03:15.0000] <hober>
/me <3 elisp

[11:04:47.0000] <Ms2ger>
Hixie, you don't do elisp? What kind of emacs user are you? :)

[11:04:58.0000] <Hixie>
a busy one? :-)

[11:28:41.0000] <TabAtkins>
Hixie: Github wants your login if you're submitting a patch.  It prefers if you've set up ssh keys for identity, but you can do un/pw if necessary.  You have to swap what url you're pushing to, though.

[11:29:06.0000] <TabAtkins>
If you want to pretend that git add doesn't exist, just always commit with the -a flag as well, like `git commit -am "foo"`.

[11:29:25.0000] <TabAtkins>
(This won't catch new files that get added - you still have to manually add them - but it'll catch all your edits.)

[11:32:49.0000] <Hixie>
good to know

[11:40:44.0000] <Hixie>
load average: 37.79, 27.83, 16.00

[11:40:56.0000] <Hixie>
that explains why i was getting high latency...

[11:41:16.0000] <Hixie>
all seems to be blog traffic

[11:41:24.0000] <Hixie>
lots of lines of:

[11:41:28.0000] <Hixie>
10372 25923 lhunt      1:19.59  1.3  265m  39m  2.6 ?         php53.cgi

[11:47:53.0000] <Hixie>
looks like lots and lots of traffic from 50.56.236.169

[12:15:17.0000] <jochen__>
Domenic_: around?

[12:17:30.0000] <aklein>
jochen__: https://www.w3.org/Bugs/Public/show_bug.cgi?id=22296 has lots of background here but as Hixie said it didn't exactly land at a complete conclusion

[12:18:42.0000] <aklein>
jochen__: some thoughts from Domenic_ in particular at https://www.w3.org/Bugs/Public/show_bug.cgi?id=22296#c36

[12:21:42.0000] <jochen__>
i wonder how the spec sets up the execution context

[12:24:21.0000] <Domenic_>
jochen__: for a bit yeah

[12:24:26.0000] <jochen__>
cool

[12:25:06.0000] <jochen__>
Domenic_: so my question is, in https://code.google.com/p/chromium/issues/detail?id=346167 you say that chrome violates the es spec

[12:25:16.0000] <jochen__>
but I fail to understand which part

[12:25:28.0000] <aklein>
jochen__: "A new execution context is created whenever control is transferred from the executable code associated with the currently running execution context to executable code that is not associated with that execution context."

[12:25:37.0000] <Domenic_>
jochen__: I believe that was fixed looking at the code recently; I haven't re-run the tests yet though.

[12:25:51.0000] <jochen__>
as the spec allows the embedder to schedule whatever other tasks it feels like

[12:26:03.0000] <Domenic_>
jochen__: oh we are talking about the scheduler, not chrome's nonstandard tests, sorry.

[12:26:09.0000] <Domenic_>
s/tests/methods

[12:26:28.0000] <jochen__>
right

[12:26:46.0000] <jochen__>
the spec says the embedder might mix in arbitrary other tasks as long as the js tasks are executed FIFO

[12:26:51.0000] <aklein>
jochen__: and [[Call]] creates one too: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-built-in-function-objects-call-thisargument-argumentslist

[12:28:08.0000] <jochen__>
aklein: yes, I meant, are there any guarntess about the context

[12:29:44.0000] <Domenic_>
jochen__: you may be right. but i am not sure an entire event loop turn is allowed to pass.

[12:30:22.0000] <jochen__>
does the es spec talk about event loops at all?

[12:30:32.0000] <Domenic_>
No

[12:30:47.0000] <Domenic_>
I guess if you pretended the entire rendering-etc-cycle was one Task

[12:30:51.0000] <Domenic_>
so that the ES task queue never emptied

[12:31:10.0000] <Domenic_>
then you could interleave rendering between promise Tasks

[12:32:21.0000] <jochen__>
maybe we shouldn't have mutation observers, but use object.observe on the javascript objects representing the dom nodes

[12:32:34.0000] <jochen__>
then all tasks are speced by ES

[12:32:58.0000] <aklein>
jochen__: heh

[12:32:59.0000] <Domenic_>
i think there are backcompat restrictions on mutation observer firing order that make any FIFO model fail

[12:33:02.0000] <SamB>
jochen__: does that work nicely with different objectspaces seeing the same DOM?

[12:33:27.0000] <aklein>
jochen__: actually the more I read the more it seems like we need a SetAutorunMicrotasks(false) for the ES6 spec just like rafaelw added for V8

[12:33:37.0000] <SamB>
i.e. in "content scripts"

[12:33:55.0000] <aklein>
jochen__: and then HTML would say how to treat the queues in ES

[12:34:13.0000] <Domenic_>
i generally think the fact that ES and HTML are both speccing this is a disgrace

[12:34:22.0000] <aklein>
as it is ES is trying to defer to HTML but isn't being specific enough

[12:34:53.0000] <Hixie>
i'm happy to integrate or provide hooks or whatever is needed

[12:34:57.0000] <SamB>
so, maybe HTML people need to rewrite that attempt to defer and send in the patch?

[12:34:58.0000] <jochen__>
aklein: sure, if the es guys are ok with saying "there's no guarantee about the tasks at all other that then the ones that get eventually executed are run in fifo order"

[12:34:59.0000] <aklein>
Domenic_: I don't see how that's avoidable given the existence of non-browser embedders

[12:35:27.0000] <aklein>
Hixie: have you read the task queues stuff that's in the ES6 draft?

[12:35:29.0000] <SamB>
aklein: well, it would be nice to reduce the duplication as much as possible

[12:35:34.0000] <Domenic_>
aklein: i guess. do browser embedders actually act significantly different from the HTML spec?

[12:35:39.0000] <Domenic_>
er, non-browser embedders

[12:36:19.0000] <aklein>
Domenic_: I guess you could just have ES say nothing about running tasks, just queueing them

[12:36:25.0000] <Hixie>
aklein: i read it at some point. i was hoping to get contacted by whoever was writing it.

[12:36:27.0000] <aklein>
but that would be kinda funny

[12:36:48.0000] <Domenic_>
Hixie: I would hope that too :(. Allen seems pretty set on "I'm just going to spec a general model, I don't need to collaborate"

[12:36:56.0000] <jochen__>
an alternative is that ES requires the tasks to run before any other embedder event

[12:37:22.0000] <Ms2ger>
Domenic_, sounds like Allen

[12:37:51.0000] <aklein>
jochen__: amusingly that's what we had implemented while object.observe was behind a flag

[12:38:03.0000] <aklein>
just because it was convenient

[12:38:10.0000] <jochen__>
why did you change it?

[12:39:27.0000] <smaug____>
/me wonders how stable object.observe is

[12:40:16.0000] <aklein>
jochen__: see wycats__ asking for basically that behavior in https://www.w3.org/Bugs/Public/show_bug.cgi?id=22296#c16, and Rafael's response

[12:42:58.0000] <jochen__>
ok

[12:43:04.0000] <jochen__>
but I disagree with that statement

[12:43:14.0000] <jochen__>
fifo requires to run a nasty message loop at the end of each event

[12:43:19.0000] <jochen__>
and appears to be hard to spec

[12:43:20.0000] <Hixie>
(woot, i pass namedEntities.test!)

[12:43:23.0000] <jochen__>
thus hard to explain

[12:43:38.0000] <jochen__>
= error prone

[12:43:40.0000] <jochen__>
:)

[12:45:21.0000] <smaug____>
sounds odd if ES tasks had higher priority

[12:45:31.0000] <aklein>
jochen__: it sounds like you're arguing for something that's simpler to spec/simpler to implement and disregarding how weird the actual behavior is?

[12:46:30.0000] <jochen__>
hum, i think it's also less weird

[12:46:44.0000] <jochen__>
like, now, in what context are the promise tasks executed?

[12:46:58.0000] <jochen__>
a mutation observer could just do document.write()

[12:47:03.0000] <aklein>
jochen__: as I said in my email, I think that's colored because you're one of like 20 people on the planet who have a very secure grasp of what's "javascript" and what's "embedder"

[12:47:06.0000] <jochen__>
and so the promise task gets an entirely different world

[12:47:24.0000] <aklein>
so could a promise task, though

[12:47:32.0000] <jochen__>
right

[12:47:41.0000] <aklein>
maybe you're arguing that Promises should just go first?

[12:47:41.0000] <jochen__>
but then it's a defined series of updates to the context

[12:47:48.0000] <jochen__>
(defined as in pure ES defined)

[12:48:05.0000] <jochen__>
yes, that's what i meant to say

[12:48:54.0000] <aklein>
what about Object.observe callbacks?

[12:49:23.0000] <jochen__>
all ES tasks should go in FIFO order

[12:49:43.0000] <jochen__>
(basically using the microtasks autorun = true mode in v8)

[12:50:03.0000] <SamB>
that sounds a bit overconstrained ...

[12:50:51.0000] <aklein>
jochen__: so my argument there is, what's special about ES tasks?

[12:50:56.0000] <SamB>
or I guess you mean tasks that are unblocked?

[12:51:16.0000] <aklein>
as smaug____ said above, it seems sort of odd just to choose ES tasks

[12:52:02.0000] <jochen__>
why is it odd?

[12:52:18.0000] <aklein>
how are they different than embedder tasks?

[12:52:19.0000] <jochen__>
or more odd to prefer es tasks and mutation observers over postMessage()

[12:52:41.0000] <jochen__>
(i think postMessage is a better example than setTimeout because the latter is a delayed task)

[12:52:43.0000] <aklein>
jochen__: so there's a whole argument about why observers want to go before postMessage

[12:52:47.0000] <Domenic_>
es tasks (= promises, object.observe) + mutation observers are microtasks

[12:52:51.0000] <Domenic_>
postMessage() is macrotask

[12:52:54.0000] <SamB>
/me sort of suspects that HTML would have some nasty cases which the rules ES would come up with wouldn't handle compatibly ...

[12:53:13.0000] <aklein>
which I was hoping rafaelw would provide on the email thread since he's good at stating it

[12:53:18.0000] <aklein>
but it really goes back to the birth of MutationObservers

[12:53:25.0000] <aklein>
which were designed as a replacement for Mutation Events

[12:53:36.0000] <SamB>
so nobody already wrote up the argument somewhere?

[12:53:47.0000] <jochen__>
i know

[12:53:48.0000] <aklein>
we wanted them to run asynchronously (to avoid the performance and security problems of Mutation Events)

[12:54:06.0000] <aklein>
but not so asynchronously that there'd be a paint before they ran

[12:54:16.0000] <aklein>
(so they can be used, e.g., to polyfill custom elements)

[12:54:38.0000] <SamB>
eww

[12:54:51.0000] <SamB>
I hope you mean "new elements"?

[12:54:51.0000] <Domenic_>
microtasks are a Good Thing

[12:54:59.0000] <smaug____>
!

[12:55:01.0000] <Domenic_>
they are one of the innovations of the web platform IMO

[12:55:05.0000] <aklein>
SamB: sure: polyfill DOM features

[12:55:19.0000] <Domenic_>
traditional async data binding frameworks suffer badly from having only macrotasks

[12:55:27.0000] <jochen__>
but you realize that this is not possible, right?

[12:55:45.0000] <jochen__>
if I modify a polyfilled element and immediately query it, the polyfill didn't have a chance to run yet

[12:55:59.0000] <SamB>
jochen__: I was just thinking that ...

[12:56:46.0000] <smaug____>
also giving separate view of world for event listeners played part in microtask design

[12:57:12.0000] <aklein>
jochen__: sure, there are some things you lose by not acting synchrously

[12:58:04.0000] <smaug____>
mutation events have shown that doing stuff synchronously isn't just workable solution for everything. And we need good performance

[12:58:39.0000] <smaug____>
in Gecko MutationObservers were even initially 7x faster way to observer changes in DOM than Mutation Events

[12:58:48.0000] <smaug____>
(and should be better now )

[12:59:40.0000] <jochen__>
i guess in the end, i'd just like this behavior to be specified

[13:00:21.0000] <SamB>
/me wonders if there are any attempts to standardize the treatment of "content scripts" which have their own javascript objects, but which nevertheless interact with the same DOM tree

[13:00:23.0000] <aklein>
jochen__: indeed, that I can totally agree with, it sounds like we need to get Hixie and Allen in a room together

[13:00:30.0000] <Domenic_>
IMO someone (whether HTML or ES or heck a third spec why not) should spec out something that matches all existing implementations. Which will be closer to HTML than what ES has.

[13:00:44.0000] <Domenic_>
Then both HTML and ES delegate to that

[13:01:19.0000] <jochen__>
SamB: i don't think so

[13:01:34.0000] <Domenic_>
http://esdiscuss.org/topic/es6-tasks-and-taskqueues#content-3 if you guys haven't seen Allen's response

[13:01:58.0000] <smaug____>
SamB: what is the context here?

[13:02:35.0000] <smaug____>
(In Gecko content script is a privileged script which has access to the top level window object)

[13:03:37.0000] <SamB>
yeah, I know that there are some big differences between how Gecko and Chromium treat such scripts

[13:04:02.0000] <SamB>
or, mmm, maybe you mean a different top level

[13:04:15.0000] <SamB>
smaug____: anyway, the Grease-style scripts for starters

[13:04:16.0000] <smaug____>
I don't know what is "content script" in blink

[13:04:19.0000] <smaug____>
ah

[13:04:37.0000] <aklein>
jochen__: I have to run, sorry (I realize it's much later for you :)

[13:05:04.0000] <SamB>
er, +Monkey

[13:07:27.0000] <SamB>
smaug____: anyway, https://developer.chrome.com/extensions/content_scripts describes them as they apply to Chrome extensions

[13:08:08.0000] <smaug____>
oh, but they get totally different view from page's scripts, right?

[13:08:48.0000] <SamB>
yeah, as do GreaseMonkey scripts now

[13:09:32.0000] <SamB>
though with GreaseMonkey the scripts *can* actually mess with the page's objects too

[13:09:39.0000] <smaug____>
yes

[13:09:49.0000] <smaug____>
gecko background shows up there, I guess

[13:16:01.0000] <SamB>
Okay, some people are just crazy. Naming a browser "Web"? For real?

[13:21:17.0000] <SamB>
my, what lovely documentation Chrome has for userscripts: http://www.chromium.org/developers/design-documents/user-scripts/

[13:40:08.0000] <zcorpan>
anyone know where aryeh's innerText spec went? and tests? http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2011-February/030179.html

[13:40:29.0000] <smaug____>
Ms2ger: ^

[13:41:04.0000] <Ms2ger>
I think he put it up somewhere and then nobody implemented it

[13:41:40.0000] <Ms2ger>
Looks like it was at http://aryeh.name/spec/innertext/innertext.html

[13:42:19.0000] <Ms2ger>
I don't think I have a copy

[13:44:29.0000] <Ms2ger>
Wayback has it at http://web.archive.org/web/20121127212525/http://aryeh.name/spec/innertext/innertext.html

[13:46:40.0000] <Ms2ger>
I'll email him

[13:47:10.0000] <jochen__>
is somebody here involved with MediaQueryListListeners?

[13:47:32.0000] <jochen__>
i wonder why MediaQueryList doesn't simple define an onchanged event or something

[13:47:37.0000] <Ms2ger>
TabAtkins, by default, I guess

[13:47:48.0000] <jochen__>
but instead defines it's on kind of event that's completely different from the rest

[13:48:00.0000] <TabAtkins>
Probably because MQL is dumb and stupid.

[13:48:11.0000] <jochen__>
can we update the spec

[13:48:14.0000] <jochen__>
pretty please

[13:48:17.0000] <TabAtkins>
Mail www-style?

[13:48:17.0000] <jochen__>
with sugar on top

[13:48:52.0000] <jochen__>
will do

[13:51:24.0000] <jochen__>
done

[13:54:24.0000] <Hixie>
Domenic_: re your exception "proximate cause" thing, what we could do is have each place that fires an exception get a unique ID (maybe even a real GUID, though that would be a bit overlong, maybe something shorter)

[13:59:05.0000] <TabAtkins>
Where is MQL defined?

[14:06:01.0000] <TabAtkins>
Ah, OM View

[14:08:56.0000] <jochen__>
TabAtkins: so what would be the process to make that change happen?

[14:09:25.0000] <TabAtkins>
I just responded. We figure out what to do, edit the spec accordingly, file bugs, done.

[14:09:34.0000] <jochen__>
cool

[14:11:37.0000] <zcorpan>
SimonSapin: my thinking was to let them pass through as in the dom. but it's not explicit. also see https://www.w3.org/Bugs/Public/show_bug.cgi?id=25110

[14:13:11.0000] <SimonSapin>
well CSS backslash-escapes explicitly decode surrogates to U+FFFD

[14:13:40.0000] <SimonSapin>
but yeah, they otherwise pass through implicitly

[14:13:46.0000] <SimonSapin>
I wish we could change that

[14:13:58.0000] <zcorpan>
SimonSapin: that's a JS-escape, not a CSS escape

[14:14:26.0000] <SimonSapin>
zcorpan: quoting from the bug: "CSS.escape('\uD800')"

[14:14:36.0000] <zcorpan>
SimonSapin: yep. JS escape

[14:14:56.0000] <SimonSapin>
ok, yes, \uD800 is a JS escape

[14:15:06.0000] <SimonSapin>
but CSS.escape() just lets it though

[14:15:11.0000] <zcorpan>
yeah

[14:15:22.0000] <SimonSapin>
encoding it as \D800 would not work

[14:15:29.0000] <zcorpan>
right

[14:15:57.0000] <zcorpan>
but we could change it i guess

[14:16:13.0000] <zcorpan>
but i don't see the point if it's not possible to change in the dom

[14:16:29.0000] <zcorpan>
is it?

[14:17:06.0000] <SimonSapin>
document.write() and innerHTML might be more constrained

[14:17:26.0000] <SimonSapin>
but still, I’d prefer rust-cssparser to work with UTF-8 input rather than UCS-2

[14:23:06.0000] <zcorpan>
SimonSapin: you have to do better than that :-P

[14:23:36.0000] <SimonSapin>
surrogates are evil and we should limit the spread of the infection as much as possible

[14:25:39.0000] <zcorpan>
now you're not making sense. evil is not a diseases

[14:25:48.0000] <zcorpan>
s/s//

[14:26:09.0000] <SimonSapin>
not making ense?

[14:26:14.0000] <zcorpan>
that's right

[14:39:50.0000] <TabAtkins>
"now you're not making ene. evil i not a dieae"

[14:44:10.0000] <SimonSapin>
well he didn’t use a s/s//g

[14:46:27.0000] <zcorpan>
s/// on irc always has dwim flags implied

[14:48:20.0000] <SimonSapin>
dwim?

[14:50:31.0000] <zcorpan>
do what i mean

[14:56:27.0000] <Hixie>
lol

[14:56:46.0000] <Hixie>
i refactored my code, changing hundreds of lines, using a different approach, etc.

[14:57:02.0000] <Hixie>
it fixed my test! U+0000 numeric character references now parse ok!

[14:57:06.0000] <Hixie>
next bug: U+0001.

[14:57:07.0000] <Hixie>
-_-

[15:01:26.0000] <Domenic_>
Hixie: sounds good re: exception IDs

[15:03:40.0000] <Hixie>
do you think anyone would go for it?

[15:05:15.0000] <Domenic_>
I guess we haven't shown very compelling use cases yet. Although it's clearly better than the current "name" stuff.

[15:05:50.0000] <Hixie>
well, it's interesting for loggin

[15:05:51.0000] <Hixie>
g

[15:05:55.0000] <Domenic_>
I think blink-dev discussed doing something similar for app cache errors?

[15:06:09.0000] <Hixie>
(though i wonder if the messages aren't good enough in practice)

[15:06:12.0000] <Hixie>
yeah

[15:07:53.0000] <Domenic_>
I think the relying-on-messages argument you made is a strong incentive to do something better.

[15:08:43.0000] <Hixie>
i'd be worried about how effective it would be. We have enough trouble getting people to just fire the right exception in the first place, let alone the right exception with the right unique code.

[15:10:35.0000] <Domenic_>
that's true, hmm. perhaps because "the right exception" gives only incremental benefits so not worth the effort? the question is, would this be worth the effort.

[15:11:12.0000] <Domenic_>
Blink has recently done a major exception message cleanup so at least their thoughts are with developers on these issues…

[15:18:31.0000] <Domenic_>
Wait so innerText is not cross-browser yet?

[15:20:48.0000] <Hixie>
innerText is a disaster

[15:20:53.0000] <Hixie>
it depends on CSS, e.g.

[15:21:31.0000] <TabAtkins>
Do you mean .textContent, Domenic_ ?

[15:22:48.0000] <Domenic_>
Nope I meant innerText. Didn't know it was a disaster…

[15:23:02.0000] <TabAtkins>
Yup, total disaster.

[15:23:36.0000] <jsbell>
re: exception IDs + proximate cause: as long as we realize that the developer workflow is not "see exception X, search the spec for X, gain enlightenment, fix bug". Rather, it's  "see exception X, google X, find the stackoverflow article, copy/paste the fix" :)

[15:23:52.0000] <jsbell>
Either case benefits from a reasonably unique X, though.

[15:24:52.0000] <Domenic_>
jsbell: yeah that's a good point to keep in mind. I was in particular thinking about more advanced use cases trying to recover from specific errors and let others bubble.

[15:26:28.0000] <wilhelm>
WebDriver specs how to get readable text from an element: https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html#rendering-text

[15:26:41.0000] <wilhelm>
It's not pretty.

[15:28:13.0000] <Hixie>
jsbell: i think the workflow for which this matters is more "script catches unexpected exception x, logs it to server, author looks at aggregate data regarding exceptions to figure out what to fix next"

[15:30:04.0000] <TabAtkins>
I think a guid would be fine for this.  Why not do a full guid?

[15:30:12.0000] <SamB>
ewww

[15:30:24.0000] <TabAtkins>
SamB: It's just for identification purposes.

[15:30:43.0000] <Hixie>
TabAtkins: full guid is a bit excessively verbose in a log and would make specs look ugly

[15:30:52.0000] <Hixie>
TabAtkins: we probably only need a fraction of the digits

[15:31:04.0000] <TabAtkins>
Ok, I guess so.

[15:31:21.0000] <TabAtkins>
Just want it large enough that I can randomly-generate it and still be assured that it's unique.

[15:31:40.0000] <Hixie>
as an anecdotal data point, the freepascal compiler guys use YYYYMMDDNN for their internal errors.

[15:31:53.0000] <Hixie>
i don't think we should use that because we have less coordination

[15:31:59.0000] <TabAtkins>
That doesn't help multiple specs, yeah.

[15:32:09.0000] <Hixie>
but it's the kind of size identifier that i think would make sense

[15:32:37.0000] <TabAtkins>
You can get much smaller if you can coordinate.  You need more than 10 digits for randomness to work.

[15:32:48.0000] <Hixie>
might be better for the IDs to be [spec author][whatever] where [spec author] is two digits and [whatever] is, well, whatever.

[15:33:03.0000] <TabAtkins>
Still need coordination for that.

[15:33:15.0000] <Hixie>
well some minimal coordination is fine

[15:33:17.0000] <SamB>
yeah, two digits should be enough for everyone

[15:33:23.0000] <Hixie>
(i mean, we have that today for exceptions)

[15:33:44.0000] <TabAtkins>
Hixie: We have massive overlap today for exceptions, which is what we're trying to avoid.

[15:33:58.0000] <Hixie>
we are?

[15:34:01.0000] <TabAtkins>
SamB: let "digit" be alphnum.

[15:34:06.0000] <TabAtkins>
I thought that was the point, yes.

[15:34:18.0000] <Hixie>
not sure what you mean by "avoid overlap"

[15:34:37.0000] <Hixie>
i thought the goal here was just to provide uniquely identifiable IDs per exception throw site

[15:34:46.0000] <TabAtkins>
Today, the "coordination" is "fire one of the errors from this list".

[15:35:00.0000] <Hixie>
by coordination, i mean that today if you want a new exception you just ask anne to addi t

[15:35:02.0000] <TabAtkins>
This list does not get extended by people. It's short and more or less static.

[15:35:05.0000] <SamB>
clearly sha1:file:line:column

[15:35:18.0000] <Domenic_>
TabAtkins: not great for discriminatory catching

[15:35:32.0000] <TabAtkins>
Domenic_: I'm not sure what you're replying to.

[15:35:34.0000] <Hixie>
SamB: i do like the idea of hashing the final result somehow so that the spec author part is not derivable

[15:35:43.0000] <SamB>
I was kidding

[15:35:53.0000] <Domenic_>
Sorry got offline for a bit, replying to guid idea

[15:35:56.0000] <SamB>
I mean what is a "throw site"

[15:35:58.0000] <TabAtkins>
Hixie: That's why you choose enough digits that the ID can be randomly generated without fear of collision.

[15:36:28.0000] <TabAtkins>
Domenic_: I thought the idea was to be able to tell better what place the exception came from.  A guid identifying each place that can throw an error does that, no?

[15:36:39.0000] <TabAtkins>
SamB: A line in the spec that throws something.

[15:36:51.0000] <Hixie>
another option is we just make a web service for ourselves that vends unique IDs

[15:36:56.0000] <Hixie>
then it could trivially avoid duplicates

[15:37:13.0000] <SamB>
and without coordination, people *will* end up seeing values without being able to find out any indication of their meaning ...

[15:37:21.0000] <TabAtkins>
Yeah, that would let you be smaller without collision fear.

[15:38:43.0000] <Domenic_>
TabAtkins: my use case is being able to write catch clauses that only catch a specific expected error and let others bubble or hit window.onerror.

[15:38:45.0000] <SamB>
(don't tell me you've never had a GUID for which you couldn't find any corresponding name ...)

[15:40:15.0000] <Domenic_>
So human readable, yet unique, names would give more readable catch code.

[15:41:46.0000] <Hixie>
are we thinking integers here, or strings?

[15:41:58.0000] <Domenic_>
I was thinking strings

[15:42:07.0000] <Domenic_>
Integers for IDs seems bad in general

[15:48:06.0000] <aretecode>
I love to learn, feel free to teach me what you are the most passionate about :)

[15:54:12.0000] <zcorpan>
the id generator could take 4 random words from this channel from the past 48h. then make sure that google brings up no results for that identifier, and that it hasn't been generated before.

[15:55:53.0000] <zcorpan>
choosecatchesalthoughpolyfill

[16:01:56.0000] <SamB>
zcorpan: that doesn't help the reader to make any sense of anything

[16:02:44.0000] <zcorpan>
SamB: i didn't see that as a requirement above

[16:03:20.0000] <zcorpan>
SamB: i guess it will make the reader go "wtf" and then google it and find relevant information, though

[16:09:15.0000] <Hixie>
SamB: the .message is the way the reader makes sense of something

[16:09:30.0000] <Hixie>
zcorpan: that's a bit long, ideally these should be short so the don't make specs unreadable

[16:10:02.0000] <jsbell>
(Guru meditation number: 1314c98d-8667-4599-a4ac-ffc56420d7ba)

[16:10:03.0000] <SamB>
Hixie: point ...

[16:10:14.0000] <Hixie>
jsbell: yeah. but shorter. :-)

[16:11:09.0000] <SamB>
so, how to keep the search results from being flooded with people asking about the exceptions rather than what one might actually want to find?

[16:11:37.0000] <TabAtkins>
A stack overflow link about it would be fine

[16:12:29.0000] <zcorpan>
we set up google alerts for the ids and give useful answers on stackoverflow

[16:13:43.0000] <zcorpan>
Hixie: the generator could just try fewer words or other words until it finds an id shorter than X characters

[16:42:19.0000] <Hixie>
http://software.hixie.ch/utilities/cgi/exception-id-generator/

[16:42:52.0000] <Hixie>
all up to y'all now if we actually want to do this

[16:43:16.0000] <Hixie>
i checked and that won't generate any duplicates for at least the next 100,000 IDs.

[16:43:30.0000] <Hixie>
(after 100,000 it started getting a little crazy to check for duplicates the way i was doing it)

[16:44:07.0000] <zewt>
Hixie: ... what

[16:44:20.0000] <zewt>
is it april 1 in your time, heh

[16:44:48.0000] <Hixie>
hm?

[16:44:55.0000] <zewt>
re: link looks like joke

[16:45:01.0000] <Hixie>
why?

[16:45:11.0000] <zewt>
how does it not look like joke. heh

[16:45:34.0000] <Hixie>
well it's not very funny to start with? :-)

[16:45:35.0000] <zewt>
re: if an API expects me to use opaque strings in my source code as exception identifiers, API will be shot directly into sun

[16:45:42.0000] <zewt>
no april 1 "jokes" are funny

[16:46:04.0000] <Hixie>
sounds like you missed the earlier conversation

[16:46:52.0000] <zewt>
whatever it was, this result seems catastrophic enough to make me dubious of its conclusion :P

[16:47:02.0000] <TabAtkins>
Hixie - Bikeshed style: The user agent must throw an <code>SyntaxError</code> exception with ID "<dfn exception-code>3d7geaa26h</dfn>".

[16:47:04.0000] <zewt>
but I will happily scroll back

[16:49:02.0000] <Hixie>
TabAtkins: thanks, added

[16:51:01.0000] <Hixie>
uh

[16:51:12.0000] <Hixie>
/me fixes the error in the bikeshed one where he'd hardcoded the code TabAtkins gave

[16:51:19.0000] <TabAtkins>
hahaha

[16:55:00.0000] <Hixie>
ok i generated 1,575,472 codes in the order it's going to generate them, and still no dupes

[16:55:14.0000] <Hixie>
so i'm pretty confident that this will work out ok, dupe-wise

[16:55:39.0000] <zewt>
it sounds like the core problem it's trying to solve is "it's hard to find where the unexpected thing you're seeing is defined in a spec somewhere, so google for this magic thing"

[16:56:17.0000] <zewt>
that sort of sounds like an ineffective whack-a-mole, though; exceptions are one extremely tiny subset of "can't find this thing in a spec" (or on stackoverflow, or whatever)

[16:56:21.0000] <TabAtkins>
Hixie: Yeah, you have to gen about 60M before you should expect the first dupe.

[16:56:42.0000] <TabAtkins>
zewt: That's one reason, not all.

[16:56:56.0000] <TabAtkins>
It's not even Domenic_'s primary reason.

[16:57:01.0000] <zewt>
what i suspect would be the actual result (to describe my initial reaction) is that people would start using them in code as part of exception handlers, which would be completely horrible since they're not human-readable

[16:57:02.0000] <Hixie>
zewt: the main reason is that right now, InvalidStateErr is fired from zillions of places

[16:57:12.0000] <Hixie>
zewt: and you don't know which is the proximate cause of a particular one you're holding onto

[16:57:30.0000] <Hixie>
not really clear what better way to solve this

[16:57:32.0000] <TabAtkins>
Especially if you grab it from window.error or the like.

[16:57:35.0000] <Hixie>
yeah

[16:58:34.0000] <Hixie>
TabAtkins: it's been my experience that if i don't actually check it, there'll be some error in my logic and the dupes will abound, so i felt better actually checking it :-)

[16:59:01.0000] <Hixie>
/me closes all his related tabs and windows until Domenic_ manages to convince anyone else to use this

[16:59:05.0000] <zewt>
i always just log a stack trace to the server (we really need better stack trace support) and moving on, since at least with the way I write things, if an exception gets to window (unless it's an event delegation thing, which it isn't for onerror), that's not the place where I'm going to examine the exception and try to recover from it

[16:59:05.0000] <TabAtkins>
Hixie: Certainly, just letting you know what your expected range will be.

[16:59:28.0000] <zewt>
(some interesting half-edits in that run-on sentence)

