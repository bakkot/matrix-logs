2015-05-01
[18:35:50.0000] <JakeA>
terinjokes: which tweet?

[22:02:48.0000] <annevk>
TabAtkins: for stuff like Encoding it still says "16 September 2014. CR."

[22:25:48.0000] <rniwa>
annevk: hi annevk!

[22:25:53.0000] <rniwa>
annevk: back in London?

[22:26:06.0000] <annevk>
rniwa: I'm based in Switzerland these days, but yeah :-)

[22:26:24.0000] <annevk>
rniwa: haven't read the latest batch of emails yet

[22:28:56.0000] <annevk>
rniwa: re superclass/subclass list, it seems only 3 has API implications

[22:29:13.0000] <annevk>
rniwa: well, 1/2 need some consideration as well, e.g. how to replace the shadow tree

[22:34:09.0000] <rniwa>
annevk: ah, okay.

[22:34:09.0000] <botie>
ah, okay. is there a spec out for it, or has it just been discussed?

[22:34:55.0000] <annevk>
rniwa: hmm and seems the other thread didn't progress much

[22:34:56.0000] <rniwa>
annevk: so i think replacing an existing shadow root is probably best done by attaching a new shadow root.

[22:35:07.0000] <rniwa>
annevk: yeah..

[22:35:16.0000] <rniwa>
annevk: I'm meeting with dglazkov tomorrow to discuss it

[22:35:24.0000] <annevk>
rniwa: and not forwarding anything?

[22:35:32.0000] <rniwa>
annevk: right

[22:35:44.0000] <rniwa>
annevk: i think the simplest one is to simply detach the old one

[22:36:05.0000] <annevk>
sure, if you can detach and add that works too

[22:36:11.0000] <rniwa>
annevk: but that may have some weird implications like offsetTop, etc... being broken inside superclasss

[22:36:32.0000] <annevk>
though it's a bit unclear how that works with closed/isolated

[22:36:38.0000] <rniwa>
annevk: right.

[22:36:56.0000] <rniwa>
annevk: I'm not certain if it makes sense to support inheritance in isolated case though

[22:37:08.0000] <rniwa>
annevk: I can't think of a use case in which you want to do an inhertiance between mutually distrusting parties

[22:37:08.0000] <annevk>
rniwa: I think the only reasonable option for the API btw is my gist + nanotask mutation observers, unless we come up with something completely novel

[22:37:32.0000] <rniwa>
annevk: well, i think there are different trade offs as i outlined in the md/thread

[22:37:48.0000] <rniwa>
annevk: btw, https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Imperative-API-for-Node-Distribution-in-Shadow-DOM.md

[22:37:55.0000] <annevk>
rniwa: that md is quite confusing

[22:38:08.0000] <rniwa>
annevk: what i'm saying that there are two basic approaches to the problem

[22:38:16.0000] <rniwa>
one is what you described in your gist

[22:38:21.0000] <rniwa>
which is what we discussed at dinner

[22:38:31.0000] <rniwa>
annevk: we natively support redistributions

[22:38:54.0000] <rniwa>
annevk: what I then realized is that we don't really have a need for *selective* redistributions in nested shadow DOM case

[22:39:09.0000] <annevk>
if you don't it starts mattering where you put your host element though, right?

[22:39:26.0000] <rniwa>
annevk: what do you mean by that?

[22:39:48.0000] <annevk>
if redistribution is not a feature, your component may not work if someone put it inside a shadow tree

[22:40:01.0000] <rniwa>
annevk: it'll work just fine

[22:40:28.0000] <rniwa>
annevk: only thing we can't do is selecting distributed nodes using a different criteria than the one insertion point used

[22:40:37.0000] <annevk>
rniwa: hmm, I need some IDL for that proposal

[22:40:53.0000] <rniwa>
annevk: say you have <content select="blah"> in your shadow DOM

[22:41:28.0000] <rniwa>
annevk: we need redistribution only if you wanted to re-distribute a strict subset that's not identically equal to the set of nodes distributed to that content eleemnt

[22:41:56.0000] <rniwa>
annevk: if you either always redistribute everything <content select="blah"> got or none, then we don't need redistribution mechanism

[22:42:06.0000] <rniwa>
annevk: you just redistribute the entire content element or don't do it at all.

[22:44:35.0000] <rniwa>
(now i do see that we might be digging a rabbit hole if we went with more sync API that doesn't natively support redistribution because it's like we're re-introducing mutation events in some way, and some frameworks might decide to implement the full redistribution algorithm anyway, which will be horrific. furthermore, requiring sync redistribution might be an anti-pattern to begin with... it's like interleaving offsetLeft access with DOM mutations...)

[22:45:13.0000] <annevk>
I think distribution will have to be sync either way

[22:45:28.0000] <rniwa>
annevk: you mean propagating redistributions?

[22:47:42.0000] <annevk>
So in #1 you'd just observe the children of the host element, enumerate them and then distribute them

[22:48:27.0000] <annevk>
I just don't see how you don't always need to observe the <content> element...

[22:49:12.0000] <annevk>
E.g. if in your shadow tree you have <host><content select="header, content, footer"/></host> or some such

[22:49:39.0000] <annevk>
I guess you could split up the <content> elements, but then we'd be dictating API

[22:50:02.0000] <rniwa>
annevk: right, i think the way you'd do it is to split content elements.

[22:50:16.0000] <rniwa>
annevk: in the world of named slots, that's what you'd do

[22:50:29.0000] <rniwa>
annevk: and libraries/frameworks could add a sugar on top of it

[22:50:53.0000] <rniwa>
annevk: if we didn't need redistributions, it dramatically simplifies a lot of things.

[22:51:05.0000] <rniwa>
annevk: it's worth considering it.

[22:52:37.0000] <annevk>
well I'm not quite sure why we don't need it

[22:52:47.0000] <annevk>
how do we know what <content> element to pick?

[22:53:36.0000] <annevk>
that is, how does "redistribute everything" work, as you call it

[22:53:54.0000] <rniwa>
annevk: you pick whichever content element that fits your criteria

[22:54:02.0000] <rniwa>
annevk: in the case of <host><content select="header, content, footer"/></host>

[22:54:17.0000] <rniwa>
you know that <host> needs header, content, and footer, so you just define those

[22:54:18.0000] <rniwa>
e.g.

[22:54:42.0000] <rniwa>
<host><content class="header" select=".header header"/><content class="content" select=".content content"/><content class="footer" select=". footer footer"/></host>

[22:55:11.0000] <rniwa>
annevk: conceptually, <host> grabs header, content, footer, right?

[22:55:30.0000] <rniwa>
annevk: so in order to use that element, you have to supply those elements.

[22:55:47.0000] <rniwa>
annevk: it doesn't matter whether what you have is a content element or a regular element

[22:56:13.0000] <annevk>
hmm

[22:56:39.0000] <rniwa>
i certainly wouldn't argue this is more developer friendly but there's a lot of appeal for the simplicity

[22:57:18.0000] <rniwa>
it's deadly clear what one has to do to use an element

[22:58:05.0000] <annevk>
Does this also mean <content> elements no longer have to be descendants?

[22:58:17.0000] <annevk>
I guess there never was that restriction

[22:58:29.0000] <rniwa>
annevk: what do you mean by that?

[22:58:35.0000] <annevk>
Never mind, I was confused

[22:58:58.0000] <rniwa>
annevk: so the nice thing about this model is that we no longer need to propagate anything from one shadow DOM to another

[22:59:07.0000] <rniwa>
you just distribute per shadow DOM and done!

[22:59:43.0000] <annevk>
And authors will have to monitor DOM + <content> and distribute based on that?

[23:00:41.0000] <annevk>
What's also somewhat worse about this is that there's no explicit opt-in so the switch to purely declarative has to be different

[23:02:39.0000] <rniwa>
annevk: why would you monitor content element?

[23:02:56.0000] <annevk>
for redistribution?

[23:03:07.0000] <rniwa>
annevk: but why would you need redistribution for?

[23:03:40.0000] <rniwa>
annevk: if you did <host><content class="header" select=".header header"/><content class="content" select=".content content"/><content class="footer" select=". footer footer"/></host>

[23:04:18.0000] <rniwa>
it'll distribute just as well as <host><header>~</header><main class="content"></main><footer></footer></host>

[23:04:39.0000] <annevk>
<host><'shadow'> text <div><content/></div> <host2><content/></host2> </'shadow'></host>

[23:04:39.0000] <rniwa>
annevk: so you don't need to inspect content element at all. just distribute a content element like any other element and you'll be fine

[23:05:02.0000] <annevk>
<host2>'s shadow will have to monitor changes to <host2>'s <content> child

[23:05:28.0000] <rniwa>
annevk: how does host2 distribute nodes?

[23:05:42.0000] <rniwa>
annevk: i.e. what are insertion points and their criteria for selecting nodes?

[23:05:48.0000] <annevk>
rniwa: that's up to <host2>

[23:06:11.0000] <rniwa>
annevk: well, we need to know in order for this model to work.

[23:06:36.0000] <rniwa>
annevk: in the world without redistributions, you need to be deadly aware of what gets used by each custom element

[23:06:42.0000] <rniwa>
annevk: and supply those explicitly

[23:07:03.0000] <rniwa>
annevk: so if host2 needs a header and footer, then you have to define content elements yourself and supply those

[23:07:30.0000] <annevk>
and the browser magically knows what nodes are linked?

[23:07:38.0000] <rniwa>
annevk: we don't have to

[23:07:56.0000] <rniwa>
annevk: author will create <content> elements as needed for host2

[23:08:12.0000] <rniwa>
annevk: so all we need to do in the first shadow DOM is to grab contents into each content element

[23:08:15.0000] <annevk>
how will those elements end up correctly within host2's shadow though?

[23:08:22.0000] <rniwa>
annevk: host2 then come in and grab those content elements in turn

[23:08:35.0000] <annevk>
doesn't it have to monitor changes for that?

[23:08:40.0000] <rniwa>
annevk: because content elements in host1 will themselves be distributed into insertion points inside host2

[23:09:02.0000] <rniwa>
annevk: not really, it just needs to monitor direct children of <host2> which are <content> elements

[23:09:23.0000] <rniwa>
annevk: <host2> will grab each <content> element into its own insertion points as they fit their criteria

[23:10:17.0000] <annevk>
rniwa: I don't really follow how this actually works I think

[23:10:21.0000] <rniwa>
annevk: okay

[23:10:23.0000] <annevk>
rniwa: how does it grab, based on what?

[23:10:35.0000] <annevk>
rniwa: and what does the browser need to monitor?

[23:10:51.0000] <rniwa>
annevk: the browser only monitors direct child of <host1> and <host2>

[23:10:55.0000] <annevk>
rniwa: it seems like the md could use some additional text to explain this

[23:11:03.0000] <rniwa>
annevk: yeah... indeed

[23:11:12.0000] <rniwa>
i guess this idea isn't clear as it is to me...

[23:12:02.0000] <rniwa>
annevk: first, <host1> decides to distribute nodes into its own insertion points including ones that are under <host2>

[23:12:30.0000] <rniwa>
annevk: <host2> some time later or earlier will distribute its direct children into its own insertion points

[23:12:34.0000] <annevk>
right, all <content> in <host1>'s shadow are its insertion point

[23:12:47.0000] <rniwa>
it just so happens that <host2>'s direct children are <content> of <host1>

[23:13:11.0000] <annevk>
oh right

[23:13:23.0000] <rniwa>
annevk: because <host2> distributed <content> elements in <host1>'s shadow DOM into its insertion points

[23:13:25.0000] <annevk>
you don't distribute children of <content>, you distribute <content>

[23:13:30.0000] <annevk>
okay I see now

[23:13:32.0000] <rniwa>
annevk: right!

[23:14:11.0000] <rniwa>
sorry, i'm not great at explaining these things :(

[23:14:28.0000] <annevk>
I wonder if that's problematic for components that are almost the entire page

[23:14:49.0000] <annevk>
You might get to a point where there's too much <content> elements, but I guess it's worth studying what is out there

[23:15:30.0000] <rniwa>
annevk: yeah, that's one problem I can see as well

[23:15:38.0000] <rniwa>
annevk: but the model is so much simpler it's quite appealing.

[23:15:54.0000] <rniwa>
annevk: if anything, frameworks can (or we can) add some sugars to make things easier.

[23:16:22.0000] <annevk>
we have those components in Firefox OS

[23:16:33.0000] <rniwa>
annevk: ?

[23:17:05.0000] <rniwa>
annevk: it would certainly be useful if you can point to a use case in which this model breaks down.

[23:19:08.0000] <annevk>
rniwa: would have to ask Wilson, I'm not super familiar

[23:19:22.0000] <rniwa>
annevk: okay

[23:19:37.0000] <annevk>
rniwa: but now I understand it that'll be easier

[23:19:45.0000] <rniwa>
annevk: okay

[23:19:57.0000] <rniwa>
annevk: please feel free to edit / add comment to markdown file

[23:20:09.0000] <rniwa>
annevk: i'm sure you can do a better job of explaining it at this point.

[23:20:20.0000] <rniwa>
or at least point out parts that are confusing

[23:37:07.0000] <annevk>
rniwa: yeah, I'll try to provide a PR

[23:37:31.0000] <annevk>
I want to update #2 too

[23:37:46.0000] <rniwa>
annevk: ok

[23:43:02.0000] <annevk>
/me wonders if anyone knows the full name of https://github.com/davidsgrogan

[23:46:08.0000] <rniwa>
annevk: you mean his IRC nick?

[23:46:36.0000] <annevk>
rniwa: I need to add him to the Acknowledgments section

[23:46:49.0000] <rniwa>
annevk: David Grogan

[23:46:54.0000] <annevk>
thanks

[23:48:39.0000] <annevk>
rniwa: btw, with respect to extensions to custom elements

[23:49:10.0000] <annevk>
rniwa: I think my preference would be "nanotask" mutation observers; mutation observers that fire after a method has returned

[23:49:48.0000] <annevk>
rniwa: e.g. appendChild(obj); /* fire mutation observers for appending (and potentially removing if obj was elsewhere in the tree) */

[23:50:26.0000] <annevk>
rniwa: but as a general extension to mutation observers rather than something specific for custom elements

[23:50:46.0000] <rniwa>
annevk: oh i see

[23:51:14.0000] <rniwa>
annevk: yeah, i think extending mutation observers will be better than adding an ad-hoc custom only callback mechanism

[23:52:38.0000] <annevk>
rniwa: I guess I can add that as alternative too

[23:52:48.0000] <annevk>
if we want to keep all proposals in this md

[23:52:56.0000] <rniwa>
annevk: there's a section about adding a callback

[23:53:06.0000] <rniwa>
annevk: to custom elements so you probably want to add there

[23:53:29.0000] <annevk>
yeah there's Extention to Custom Elements for Consistency with 1/2

[23:53:35.0000] <rniwa>
annevk: right

[23:53:38.0000] <annevk>
but this is really an alternative to that whole section

[23:53:50.0000] <annevk>
but I could rename the section and make it work

[23:54:17.0000] <rniwa>
annevk: whichever you'd prefer

[00:09:13.0000] <annevk>
rniwa: still awake?

[00:09:25.0000] <annevk>
rniwa: rewriting now... what did you mean with "of the shadow host of the ancestor shadow root of containt or if index is larger than the length of distributedNodes"?

[00:09:27.0000] <rniwa>
annevk: yeah, debugging some editing bug as we speak

[00:09:39.0000] <annevk>
rniwa: containt -> content?

[00:09:50.0000] <rniwa>
annevk: yeah, right.

[00:10:13.0000] <rniwa>
annevk: what I meant is that a node can only be distributed to an insertion point which exists in a shadow DOM of its ancestor

[00:10:31.0000] <annevk>
not parent?

[00:10:33.0000] <rniwa>
annevk: or shadow DOMs inside of them

[00:11:17.0000] <annevk>
"of the shadow host of the ancestor shadow root" should that be /or/ the ancestor...?

[00:11:17.0000] <rniwa>
annevk: oh, i wanted to be permissive because there was a use case like table-chart element where being able to distribute non-direct child is desirable

[00:12:21.0000] <rniwa>
annevk: well, things need to be backwards in this case

[00:13:05.0000] <rniwa>
annevk: for a given node to be distributable to a an insertion point

[00:13:42.0000] <rniwa>
the shadow root of that insertion point needs to be an ancestor of the node to be distributed

[00:13:51.0000] <rniwa>
annevk: maybe you can just remove that whole sentence and rewrite it

[00:14:11.0000] <rniwa>
annevk: it's probably better to say just that instead of what's in the md

[00:40:58.0000] <annevk>
rniwa: https://github.com/w3c/webcomponents/pull/45

[00:41:47.0000] <annevk>
rniwa: you can view it at https://github.com/annevk/webcomponents/blob/patch-1/proposals/Imperative-API-for-Node-Distribution-in-Shadow-DOM.md for now

[00:43:28.0000] <annevk>
dglazkov: if you're still awake ^^

[00:47:38.0000] <rniwa>
annevk: thanks!

[00:48:01.0000] <rniwa>
annevk: dglazkov is a morning person as far as I know.

[00:48:26.0000] <annevk>
having kids does that to you

[00:48:28.0000] <rniwa>
/me is definitely not a morning person

[00:48:43.0000] <rniwa>
annevk: that might be reason for me not to have kids..

[00:49:29.0000] <rniwa>
annevk: merged!

[00:50:59.0000] <rniwa>
annevk: wow, what happened to the table-chart example

[00:51:21.0000] <annevk>
rniwa: that was already like that

[00:51:26.0000] <rniwa>
:(

[00:51:28.0000] <rniwa>
/me fixes

[00:51:36.0000] <annevk>
rniwa: something happened to the Unicode when you copied it...

[00:54:39.0000] <rniwa>
annevk: https://github.com/w3c/webcomponents/pull/46

[00:55:32.0000] <annevk>
rniwa: looks good but I can't merge

[00:57:04.0000] <annevk>
TabAtkins: I guess I should do that internal links thing... using spec=html makes origin point to concept-url-origin, which is really a term from URL that HTML happens to import

[00:57:51.0000] <rniwa>
annevk: oh you don't have write access?

[00:57:55.0000] <annevk>
rniwa: nope

[00:59:11.0000] <rniwa>
MikeSmith: could you add annevk to https://github.com/orgs/w3c/teams/webapps ?

[01:20:56.0000] <MikeSmith>
rniwa: yeah will do right now

[01:22:28.0000] <MikeSmith>
できた rniwa

[01:25:13.0000] <rniwa>
MikeSmith: thanks

[01:25:25.0000] <rniwa>
annevk: ^

[01:29:06.0000] <rniwa>
sorry, gtg sleep now :(

[01:29:13.0000] <rniwa>
ttyl guys all!

[02:25:55.0000] <annevk>
nn

[02:26:00.0000] <annevk>
thanks MikeSmith

[02:26:19.0000] <MikeSmith>
cheers

[03:57:51.0000] <annevk>
https://storage.spec.whatwg.org/

[04:00:42.0000] <annevk>
It seems I need to read the Bikeshed docs another time to figure out linking from IDL to definitions...

[04:01:09.0000] <annevk>
philipj: while setting that up I was reminded that mediasession probably wants a Twitter account too

[07:35:25.0000] <annevk_>
TabAtkins: you around?

[07:35:32.0000] <annevk>
TabAtkins: I get "No 'functionish' refs found for 'stringification behavior'."

[07:36:07.0000] <annevk>
TabAtkins: which seems to be due to <a dfn for=Range lt="stringification behavior">toString()</a> which is due to the () at the end of toString which seems weird as it uses lt=""

[07:36:17.0000] <annevk>
TabAtkins: what is happening?

[07:37:13.0000] <wanderview>
Domenic: so, first glance result from this system benchmark is that async-read is roughly equivalent to sync-read+ready-promise... except when the browser is under memory pressure... then the sync-read+ready-promise pulls away... I'm not sure how I feel about that yet

[07:43:42.0000] <TabAtkins>
annevk: I fixed that in Bikeshed.

[07:43:59.0000] <TabAtkins>
annevk: Before sending you the PR. ^_^

[07:44:43.0000] <annevk>
TabAtkins: I see

[07:45:13.0000] <TabAtkins>
(In one particular place, it was accidentally falling through to doing text-based link-type identification, so it was trying to interpret that link as a functionish type, but still linking with "stringification behavior".

[07:45:15.0000] <TabAtkins>
)

[07:46:05.0000] <TabAtkins>
annevk: Oh, yeah, about origin, use <pre class=anchors> to point the term "origin" to the url spec.

[07:46:28.0000] <annevk>
no I want HTML's origin

[07:46:43.0000] <annevk>
but not HTML's reference to URL's origin

[07:47:23.0000] <TabAtkins>
Then use <pre class=anchors> to point the term "origin" to the html spec.

[07:48:01.0000] <TabAtkins>
HTML is hell to link to at the moment, and that's... probably not going to get much better.  At least, as I said yesterday, I'm going to add a way to fix common terms from it.

[07:48:22.0000] <annevk>
TabAtkins: I updated Bikeshed and I still get that error

[07:49:07.0000] <TabAtkins>
...goddammit, I didn't push last night.  Sorry, the fix is still on my work comp.  I'll push in an hour or two when I get into the office.

[07:49:12.0000] <TabAtkins>
That's dumb of me, sorry.

[07:49:52.0000] <TabAtkins>
The error isn't serious, you can force-generate for now.  That particular link won't autolink until you get the fix, is all, but it's just a thing from the DOM2 changes section.

[07:50:39.0000] <annevk>
TabAtkins: bikeshed -f says there's too few arguments

[07:50:51.0000] <annevk>
same for --force

[07:51:02.0000] <annevk>
or --force-generate

[07:51:02.0000] <TabAtkins>
Yup, need to specify the command if you're using flags, because argparse is dumb and I hate it.

[07:51:07.0000] <TabAtkins>
`bikeshed -f spec`

[07:51:19.0000] <annevk>
I have no words

[07:51:24.0000] <TabAtkins>
I do a cheaty hack around argparse's refusal to support a default command.

[07:51:30.0000] <TabAtkins>
But it doesn't work if you pass any flags.

[07:51:58.0000] <TabAtkins>
You should see argparse's bug if you pass a flag with a space in its value!

[07:52:21.0000] <TabAtkins>
(It assumes that you're giving the first positional argument instead; in this case, the input filename.)

[07:53:43.0000] <TabAtkins>
In case it isn't clear, `spec` is the literal command, not a variable I'm asking you to fill in.  Bikeshed's `spec` command is the one that actually generates a spec.

[07:54:23.0000] <annevk>
Thanks TabAtkins

[07:55:38.0000] <TabAtkins>
And thank you for bearing with the rocky introduction of whatwg specs into Bikeshed. Every new spec finds bugs no previous spec poked at, and as WHATWG specs get bikeshedded and put into Shepherd, Bikeshedding them will be easier (because all the autolinks will work).

[07:56:12.0000] <annevk>
Yeah, looking forward to that

[07:56:25.0000] <annevk>
I noticed WebIDL does not link to HTTPS

[07:56:31.0000] <annevk>
which I thought was something we fixed

[07:56:49.0000] <TabAtkins>
That's all SpecRef bugs. :/

[08:01:10.0000] <annevk>
TabAtkins: the duplicate selectors4 / selectors-4 is too?

[08:01:30.0000] <TabAtkins>
Yeah, but I'll be fixing that today or Monday. Got a PR almost ready to go.

[08:01:56.0000] <TabAtkins>
Went through and put together a bunch of aliases for all the CSS specs that aren't already named correctly.

[08:20:24.0000] <annevk>
Alright, sounds good

[08:20:46.0000] <annevk>
TabAtkins: I wrote https://storage.spec.whatwg.org/ in Bikeshed without too much effort

[08:20:53.0000] <annevk>
TabAtkins: first thing I wrote from scratch

[08:21:12.0000] <annevk>
TabAtkins: I got the IDL stuff wrong, but otherwise it mostly seems okay

[08:37:25.0000] <TabAtkins>
What'd you get wrong? I desperately need to improve the docs/help around IDL stuff, and would like to know your errors.

[08:54:55.0000] <annevk>
TabAtkins: I thought it would just automatically pick up that I was defining something from the IDL

[08:55:06.0000] <annevk>
TabAtkins: but instead it created two definitions

[09:03:19.0000] <TabAtkins>
annevk: How'd you initially mark up the second definition?  It does automatically pick it up if you give it enough information for it to know you're defining the term elsewhere.

[09:03:38.0000] <annevk>
TabAtkins: <dfn><code>requestPersistent()</code></dfn>

[09:04:22.0000] <TabAtkins>
Yeah, you need to tell it it's a method, and of what interface.

[09:05:23.0000] <TabAtkins>
Writing this down, though, for a possible helpful warning in the future.

[09:06:53.0000] <TabAtkins>
(In general, definitions need to be given a type; the default type is "dfn", which is for general terms and such.)

[09:09:13.0000] <TabAtkins>
I also need to put together a "10 things you need to know to use Bikeshed effectively" thing, so you don't have to read the whole docs to get the basic usage info.

[09:10:29.0000] <annevk>
TabAtkins: the other thing I noticed was that while I like to link to /multipage/, Bikeshed's IDL autolinking prefers / for html.spec.whatwg.org

[09:10:35.0000] <annevk>
TabAtkins: same for SpecRef

[09:11:14.0000] <TabAtkins>
annevk: For SpecRef you can just give a PR to change the reference.

[09:11:23.0000] <annevk>
TabAtkins: / seems hostile to everyone on a slow computer or on slow bandwidth

[09:11:25.0000] <annevk>
okay

[09:11:44.0000] <TabAtkins>
For Bikeshed, that's an artifact of Shepherd; I'm not sure how to handle a spec spread across multiple pages. I'll talk to plinss about it, see if we can fix things.

[09:11:50.0000] <TabAtkins>
And yes, single-page is very hostile.

[09:12:10.0000] <TabAtkins>
I only load it when I need to ctrl-F for something, and I can't just guess the ID.

[09:23:05.0000] <annevk>
TabAtkins: https://github.com/tobie/specref/pull/183

[09:24:05.0000] <TabAtkins>
Nice.

[09:26:11.0000] <TabAtkins>
annevk: Oh yeah, and I pushed the Bikeshed fixes from last night, so you should build clean now.

[09:26:29.0000] <dglazkov>
arrow functions are so cute

[09:27:04.0000] <annevk>
dglazkov: agreed, I like how they make complex things a lot easier to grasp

[09:29:28.0000] <dglazkov>
maybe this whole Javascript thing has legs after all

[09:29:49.0000] <annevk>
dglazkov: don't tell Lars

[09:30:19.0000] <dglazkov>
:-P

[09:32:55.0000] <annevk>
/me is trying to parse https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0473.html by rniwa and not succeeding

[09:34:31.0000] <philipj>
TabAtkins: I noticed some differences in references when building locally with Bikeshed and using https://api.csswg.org/bikeshed/

[09:35:17.0000] <philipj>
Would that be because Bikeshed itself was at different versions, or is there a separate step to update the SpecRef database?

[09:38:59.0000] <annevk>
philipj: you need to run bikeshed update

[09:39:13.0000] <annevk>
philipj: that should update the databases locally

[09:41:18.0000] <Ms2ger>
"ExtendableEvent"?

[09:41:36.0000] <wanderview>
Ms2ger: from ServiceWorker spec

[09:41:50.0000] <annevk>
not the greatest name in the world

[09:41:59.0000] <wanderview>
https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#extendable-event

[09:42:04.0000] <wanderview>
basically a waitUntil() method

[09:43:02.0000] <philipj>
annevk: ok, thanks :)

[09:43:34.0000] <philipj>
annevk: unfortunately @mediasession is already taken on twitter

[09:46:57.0000] <Ms2ger>
Wow, those headers are way too big

[09:47:33.0000] <Ms2ger>
... And now they're not

[09:48:08.0000] <annevk>
Ms2ger: I think that page uses Polymer, it's rather flaky

[09:48:23.0000] <annevk>
philipj: mediasessionapi too long?

[09:48:27.0000] <Ms2ger>
Well that's insane

[09:48:37.0000] <Domenic>
@mediasessions

[09:50:05.0000] <philipj>
annevk: would work, but the spec doesn't have an API yet :)

[09:50:38.0000] <philipj>
I guess I'll wait to discuss it with rich, since it's so half-baked that we don't really want to attract attention yet

[09:51:10.0000] <annevk>
philipj: btw, did you notice that on iOS if you play a podcast from Safari, it doesn't stop when you quit Safari?

[09:51:35.0000] <annevk>
philipj: browsers could do a lot here by just improving their default heuristics

[09:52:40.0000] <philipj>
annevk: yeah, we've looked a lot at the existing behavior in various browsers, and in fact step one of our roadmap is to improve the default behavior without adding anything Web-exposed

[09:53:26.0000] <philipj>
this particular aspect is "does playback stop when the page is not visible" (due to tab or app change)

[09:54:27.0000] <annevk>
yeah, this is also what I hate about browsers-inside-apps, they suck at all this

[09:54:29.0000] <philipj>
since the current default behavior for audio elements is to keep playing in this situation, pages that don't want this could use the page visibility API to change it

[09:54:57.0000] <philipj>
but it's not out of the question to make it a setting on media sessions

[09:55:15.0000] <philipj>
for example rich thinks we really should pause by default and require apps to opt in to the current behavior

[09:55:33.0000] <TabAtkins>
philipj: The API Bikeshed is always at ToT and has the most up-to-date refs. If you ever differ, update Bikeshed (`git pull --rebase` from within Bikeshed's folder) and/or update its local databases (`bikeshed update` from anywhere).

[09:56:02.0000] <annevk>
philipj: tab switching causing a pause would be annoying to most users I think

[09:56:37.0000] <annevk>
philipj: has rich never attended a YouTube party? :-P

[09:57:18.0000] <philipj>
annevk: that would be desktop, and as much as I'd like it making the default behavior the same on desktop and mobile does not look promising

[09:57:46.0000] <philipj>
annevk: on Android where tabs show up in the app switcher, having a different behavior for tab switching and app switching might be strange

[09:57:48.0000] <annevk>
I guess mobile has some memory issues?

[10:00:11.0000] <philipj>
I suppose initially bandwidth and battery might have been a reason for some differences, but at this point I think it's really about the risk of users expecting and relying on the complete lack of coordination on desktop, which would make it hard to do much useful by default

[10:01:19.0000] <philipj>
otherwise, I think having only one tab play at any one time would be a nice default

[10:02:55.0000] <philipj>
whatever changes to the defaults we can make, I hope to express them in terms of media sessions, so that it can be changed with an API

[10:04:24.0000] <TabAtkins>
philipj: I kinda agree - even on desktop, having multiple tabs playing at the same tab is usually just a frustrating accident, unless one of them is playing music.  If music and such could mark themselves as being okay to play in the background, *and* users could mark or unmark players that way by themselves (an option in the right-click menu), it'd be cool.

[10:26:32.0000] <Ms2ger>
MikeSmith, ... a baby? :)

[10:28:53.0000] <MikeSmith>
Ms2ger: yup

[10:29:01.0000] <MikeSmith>
due in mid-October

[10:29:13.0000] <Ms2ger>
Sleep while you can :)

[10:29:20.0000] <MikeSmith>
haha

[10:29:22.0000] <MikeSmith>
yeah

[10:49:13.0000] <smaug____>
does any browser vendor have data about marquee usage?

[11:02:19.0000] <Ms2ger>
Anecdotally very popular in China

[11:08:44.0000] <smaug____>
sure, but does anyone actually have any data?

[11:09:05.0000] <smaug____>
like, was <marquee> popular 3 years ago, but not anymore ?

[11:09:58.0000] <smaug____>
(marquee is certainly in my remove-from-the-platform list)

[11:12:33.0000] <MikeSmith>
https://esdiscuss.org/topic/please-volunteer-to-maintain-the-html-version-of-the-spec

[11:15:14.0000] <MikeSmith>
jorendorff: hope somebody picks up the ball there but it seems absurd that in 2015 the source of the spec is still a Word document

[11:17:12.0000] <MikeSmith>
given that there are thousands of people who use the HTML version of the spec get work done and pretty much not even 1 person who reads the Word version (rather than writing it)

[11:29:13.0000] <dglazkov>
TabAtkins: how do I get a custom property value from in JS?

[11:36:25.0000] <jorendorff>
I think Domenic and bterlson are going to do it

[11:36:35.0000] <jorendorff>
It is truly absurd

[11:37:11.0000] <jorendorff>
I lose half a day to rage every time I think about it, so I won't elaborate

[11:50:32.0000] <philipj>
smaug____: https://www.chromestatus.com/metrics/feature/timeline/popularity/53 shows <marquee> usage is pretty high still

[11:56:35.0000] <smaug____>
ah, there

[11:56:53.0000] <smaug____>
somehow I missed that when looking at chromestatus

[15:00:17.0000] <MikeSmith>
http://lauren.vortex.com/archive/001099.html

[15:01:47.0000] <caitp->
well they sound happy

[15:04:02.0000] <MikeSmith>
heh


2015-05-02
[18:34:03.0000] <TabAtkins>
dglazkov: You need to use getPropertyValue()

[18:39:50.0000] <TabAtkins>
annevk: Theoretically, a bikeshed update will make the HTML links go to multipage now.

[01:29:01.0000] <annevk_>
TabAtkins: when "bikeshed update" says it's downloading data, is that over HTTPS?

[01:30:31.0000] <annevk>
TabAtkins: it still turns "toString()" into "toString"

[01:30:53.0000] <annevk>
TabAtkins: so it mangles the content, that would be part of the undesired magic

[01:49:15.0000] <annevk>
TabAtkins: oh and Document linking to HTML is somewhat problematic

[01:49:36.0000] <annevk>
TabAtkins: happy to help out getting that resolved if you have any ideas

[04:52:43.0000] <roc>
too bad Lauren Weinstein didn't read the actual proposal, which says nothing about making sites inaccessible

[05:23:37.0000] <MikeSmith>
roc: too bad the people involved haven't done a much better job of making it more clear what the actual plans are

[05:24:09.0000] <MikeSmith>
Lauren is far from the only person who's made the mistake of reading more into than what's actually there

[05:24:53.0000] <MikeSmith>
given the zealotry that comes across in of a lot of rhetoric being tossed around, it shouldn't be a surprise

[05:25:07.0000] <roc>
It's totally clear in the first message of the dev-platform thread, which links to this: https://docs.google.com/document/d/1IGYl_rxnqEvzmdAP9AJQYY2i2Uy_sW-cg9QI9ICe-ww/edit?usp=sharing

[05:25:19.0000] <roc>
and it's clear in the official blog post: https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/

[05:26:19.0000] <MikeSmith>
roc: so why do you think many people have reacted so strongly to the announcements the way they have?

[05:27:15.0000] <roc>
because people are sinners. Why do *you* think?

[05:28:50.0000] <roc>
I mean, I'm as guilty as anyone of diving into a controversy without checking the original sources, but whoever does it, that's on them.

[05:29:43.0000] <MikeSmith>
I see. So the people responsible for getting the message out about this properly are faultless

[05:30:20.0000] <roc>
In this particular issue, yeah, pretty much.

[05:30:43.0000] <roc>
I don't see how they could have made it more clear that we're not going to start blocking HTTP sites.

[05:31:21.0000] <roc>
At some point, someone --- Lauren, or someone he read --- just made that up. And that's not Richard Barnes' fault.

[05:34:09.0000] <MikeSmith>
here's an idea: they could have written once sentence at the top of the blog post and the actual proposal: "We are not going to start blocking HTTP sites."

[05:35:10.0000] <MikeSmith>
communicating with other people about things like this requires make an effort to understand how people might (mis)interpret your message

[05:35:50.0000] <roc>
I've tried writing blog posts where you explicitly deny every misconception you think someone's going to make

[05:36:27.0000] <roc>
it makes the message unintelligible and people ignore your denials

[05:37:02.0000] <MikeSmith>
well in this case a laundry list of possible misconceptions isn't needed

[05:37:49.0000] <roc>
it's easy to say that in hindsight

[05:38:00.0000] <MikeSmith>
sure

[05:38:11.0000] <roc>
even so, there are more misconceptions than that one in play

[05:38:13.0000] <MikeSmith>
but I really do think that here, one prominent sentence would have helped immensely

[05:38:18.0000] <MikeSmith>
true, agree

[05:38:51.0000] <roc>
frankly, I doubt Lauren read the source documents, so I don't think your sentence would have had any effect.

[05:39:12.0000] <MikeSmith>
maybe you're right, I dunno

[05:39:22.0000] <MikeSmith>
and to be clear I say all this as somebody who agrees completely with the actual plans

[05:39:57.0000] <MikeSmith>
I just think the way this was handled has damaged the ability for those plans to move forward, rather than easing them

[05:42:29.0000] <roc>
actually I think it's been good. There's been a lot of support, and a lot of objections have been voiced and ignorance corrected. Sure, haters gonna hate, but I think a lot of people learned things like "there really isn't any traffic that doesn't need to be encrypted"

[05:44:24.0000] <roc>
I'm a bit grumpy tonight, so maybe I'll look back on the logs and regret this conversation tomorrow :-)

[05:53:13.0000] <MikeSmith>
roc: no, I appreciate you calling it out

[05:53:28.0000] <MikeSmith>
I'm probably being too critical

[06:50:03.0000] <jgraham>
MikeSmith: I think sometimes denying something makes people assume that it's actualy going to be true. I mean we're all used to politicians or whatever categorically denying things that subsequently turn out to be the case. So I think putting in that kind of upfront denial just draws attention to whatever the thing is and makes people assume that it actually is something you're considering

[06:57:34.0000] <TabAtkins>
annevk: Turning "toString()" into "toString" isn't expected. That's not magic, it's a bug. ^_^

[06:59:32.0000] <TabAtkins>
annevk: For Document, you need to do a slightly clumsy workaround for that fact that Bikeshed knows about a Document definition already.  Put `force="Document"` on the <pre class=idl>, and it should work.

[07:00:17.0000] <TabAtkins>
I should auto-detect that you're doing a definition there, and at least log a warning (saying that you should either be doing `force`, or writing a partial interface).  I'll log that as an issue for improvement, thanks!

[07:15:44.0000] <TabAtkins>
MikeSmith: I'd personally put a lot of fault on the people assuming Firefox will start blocking http, because *that's a ridiculously stupid idea and they should be ashamed for assuming it*.  We're not talking about politics here; the people involved usually don't announce broad initiatives that are so wrong-headed a five-year-old could have understood what

[07:15:44.0000] <TabAtkins>
was wrong.

[07:17:40.0000] <TabAtkins>
annevk: Bikeshed was mostly downloading over https. There were two http urls (both for biblio data), but I just updated them to be https as well.

[11:07:52.0000] <gsnedders>
hmm, seems like html5lib broke relative URLs in the sanitizer… has me wondering if we ever should've let relative URLs through the sanitizer

[11:07:57.0000] <gsnedders>
I guess there's not really any risk


2015-05-03
[22:31:42.0000] <MikeSmith>
seems we're having some routing issues or something at MIT that's effecting availability of w3.org services

[07:43:48.0000] <BigPants>
A question about the HTML Editing APIs... will it be possible to somehow override the range used by execCommand()? Or otherwise extend the API with custom commands?


2015-05-04
[23:44:36.0000] <annevk_>
TabAtkins: for Document there's this note in the source '"Document" isn't properly defining itself, and the force switch isn't working.'

[23:44:45.0000] <annevk>
TabAtkins: is there a bug on file for that in Bikeshed?

[23:44:55.0000] <annevk>
TabAtkins: also, I noticed addEventListener also links to the HTML specification...

[23:45:04.0000] <annevk>
TabAtkins: it seems we should blacklist some terms for HTML

[00:01:23.0000] <annevk>
TabAtkins: filed https://github.com/tabatkins/bikeshed/issues/403

[01:28:34.0000] <Ms2ger>
annevk, your latest DOM commit isn't necessary

[01:28:40.0000] <Ms2ger>
https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name already lowercases

[01:34:22.0000] <rcombs>
How do I patch KDE2 under FreeBSD?

[01:41:41.0000] <Domenic>
Ms2ger: it is necessary; otherwise setAttribute("ALIGN", "left") + getAttribute("align") doesn't work

[01:41:57.0000] <Ms2ger>
Domenic, no, it isn't

[01:42:03.0000] <Ms2ger>
Wait

[01:42:19.0000] <Ms2ger>
Oh, hmm

[01:42:30.0000] <Ms2ger>
Okay, it's half necessary :)

[01:42:50.0000] <Domenic>
If it helps, I have an implementation of the 8-hours-ago spec that fails related web-platform-tests :)

[01:43:43.0000] <Ms2ger>
We'll lowercase twice now, so that kinda sucks

[01:44:36.0000] <Domenic>
How are case-insensitive maps normally done? I would think you'd need to lowercase on both set and get

[01:45:04.0000] <Domenic>
I guess you could do case-insensitive comparison on get

[01:45:24.0000] <Domenic>
not sure if that's implementable any faster

[01:50:01.0000] <annevk>
Ms2ger: I agree it's not great

[01:50:14.0000] <annevk>
Ms2ger: but I couldn't see a better abstraction immediately

[01:50:24.0000] <annevk>
Ms2ger: and I figured it would be better to fix this bug and refactor later

[01:50:46.0000] <Ms2ger>
Yeah, makes sense

[01:52:27.0000] <annevk>
Domenic: normally you want a canonical form so you can store atoms internally

[01:56:36.0000] <annevk>
Anyone have a good logo for the Storage Standard?

[01:58:55.0000] <Domenic>
boxes ... something windows 95ey...

[01:59:00.0000] <Domenic>
database cylinders...

[01:59:25.0000] <Domenic>
database cyclinders are popular https://www.google.de/search?q=storage+icon

[02:00:03.0000] <annevk>
Heh, or a cloud I guess

[02:00:25.0000] <Domenic>
gotta save that for the cloud standard

[02:00:58.0000] <Domenic>
floppy disk icon

[02:00:59.0000] <annevk>
Fair, I'm game with cyliners, I wonder if zcorpan has some cycles to whip up some SVG

[02:01:09.0000] <annevk>
Floppy disk would also be great

[02:01:23.0000] <Domenic>
zcorpan usually is the best at this

[02:01:48.0000] <Domenic>
i like floppy disk a lot too now

[02:02:14.0000] <annevk>
/me finds http://commons.wikimedia.org/wiki/File:Floppy_icon.svg in the public domain

[02:02:54.0000] <annevk>
Adopting the original one with less detail in some way might be good, maybe I'll take a stab once I have done some actual work

[02:03:42.0000] <Domenic>
always a balance with these things between making the pretties and doing real work

[02:03:58.0000] <Domenic>
i still want to spruce up the mobile stylesheets for the specs and add some kind of floating TOC sidebar for the desktop ones

[06:50:49.0000] <annevk>
MikeSmith: https://twitter.com/azu_re/status/595212022314217472 Translate gives "Of the of" as translation for the first couple of symbols, is there anything more to it?

[06:51:42.0000] <wanderview>
Domenic: so I spoke with someone at a node meetup last week who is using streams to pass js objects and is using multiple readers from the same stream

[06:51:58.0000] <wanderview>
Domenic: this seems somewhat reasonable to me... what do you think?

[06:52:10.0000] <annevk>
tobie: [[ENCODING]] is also a bit weird, listing what the W3C considers to be the editors

[06:52:34.0000] <annevk>
tobie: perhaps we should just support duplicate metadata for certain entries?

[06:52:40.0000] <Domenic>
wanderview: seems like a good case for a tee or two

[06:53:03.0000] <Domenic>
wanderview: or just a single reader that calls multiple functions

[06:53:10.0000] <wanderview>
Domenic: the problem with tee is that you now have multiple readers consuming the same object... not the same as multiple readers from the same stream

[06:53:11.0000] <annevk>
I wish I could tee my tea

[06:53:20.0000] <Domenic>
wanderview: you mean, alternating?

[06:53:39.0000] <Domenic>
wanderview: in that case yeah, a single reader alternating between the functions it calls

[06:53:47.0000] <Domenic>
wanderview: they can just hand out the reader object to multiple people

[06:54:02.0000] <wanderview>
Domenic: yea... or lock and unlock on each read

[06:54:13.0000] <Domenic>
meh just handing out the object seems simpler

[06:54:26.0000] <Domenic>
The object is the capability; if you want to give it out widely, no problem with doing so.

[06:54:29.0000] <wanderview>
Domenic: use case I can think of is where each reader represents a remote server to do the real work... and you are distributing the incoming load to them

[06:55:16.0000] <wanderview>
Domenic: or (harder to implement now), somehow attach N Worker threads to read from the same stream

[06:55:41.0000] <wanderview>
classic queue-with-threadpool model

[06:56:10.0000] <wanderview>
it would be kind of nice to give devs the ability to build a threadpool in some way

[06:56:45.0000] <Domenic>
seems totally doable

[06:57:05.0000] <Domenic>
.read().then(result => dispatchTo(workers[i], result))

[06:58:58.0000] <wanderview>
Domenic: thats not the same... the workers should pull when they are done with previous work... what you wrote could cause values to backup behind a worker stuck on a lot of slow work

[06:59:12.0000] <Domenic>
fair

[06:59:13.0000] <Domenic>
still not hard

[06:59:44.0000] <wanderview>
yea, it can be built in a library... just a lot of extra messaging for js to manage

[07:00:07.0000] <Domenic>
especially easy if workers get to expose writable streams and writable streams get more fine-grained flow control (desiredSize)

[07:00:59.0000] <Domenic>
.read().then(result => findMinBy(workers, w => w.writable.desiredSize).writable.write(result.value)) // eliding done handling

[07:02:06.0000] <Domenic>
err findMaxBy

[07:34:07.0000] <wanderview>
Domenic: yea, that seems like a possible way to fix it as well

[07:44:09.0000] <annevk>
Is w3c-test.org offline?

[08:37:16.0000] <annevk>
https://resources.whatwg.org/logo-storage.svg

[08:40:59.0000] <Domenic>
might need some top and bottom borders, can't tell until i see it in a circle i guess

[08:46:02.0000] <TabAtkins>
Same. Like the idea, but possible needs borders.

[08:53:44.0000] <caitp->
there are probably people working in tech today who have never seen a floppy disk in their life

[08:54:00.0000] <caitp->
and yet it's still the universal "save/storage" symbol

[08:54:54.0000] <TabAtkins>
Yeah, but that's how iconography works.

[08:55:56.0000] <caitp->
but we did move away from representing it with a 5 1/4" floppy

[08:57:11.0000] <TabAtkins>
Yeah, but the 3 1/2" inch was the last real hard disk (zip disks don't count, nobody cared about them) so there was nothing to update to afterwards.

[08:57:44.0000] <TabAtkins>
And consumer CDs were mostly readonly at first; so they couldn't take over.

[08:58:38.0000] <TabAtkins>
Plus hard drives were large enough by then that people rarely saved to an external thing anyway. So the icon froze.

[08:59:50.0000] <caitp->
could always be a mashup google/amazon/apple/adobe/cloud logo

[09:01:00.0000] <annevk>
Domenic: hmm I guess I can make a border around it

[09:01:20.0000] <annevk>
I kind of liked it this way

[09:09:01.0000] <Domenic>
as i said, could work well once i see it with a circle around it

[09:12:18.0000] <annevk>
Not all logos have a circle

[09:13:22.0000] <Domenic>
hmm did not realize to what extent that was true

[09:13:27.0000] <Domenic>
i guess it would be better here not to

[09:13:28.0000] <Domenic>
hmm

[09:13:35.0000] <Domenic>
/me notices the quirks mode logo ... amazing...

[09:15:37.0000] <Domenic>
I got un-lazy and used inspector to edit storage.spec.whatwg.org and show the logo in place (no circle). I think the giant gap at the bottom where it bleeds into the page is too much :-/

[09:19:42.0000] <annevk>
hmm yeah

[09:27:16.0000] <TabAtkins>
annevk: It might be fine with a circle around it! I'm not sure. I just *suspect*, without seeing it in full, that the open space at the top and bottom will look weird. But maybe it's fine.

[09:35:56.0000] <annevk>
Further patches/bug reports to the storage logo welcome in the resources.whatwg.org repo

[14:04:35.0000] <wanderview>
jsbell: review ping on this last PR... https://critic.hoppipolla.co.uk/r/4825

[14:07:22.0000] <jsbell>
wanderview: oops, forgot to submit...

[14:08:51.0000] <wanderview>
jsbell: the fetch-with-streams really does not drain the Response on .text()? that seems... really wrong

[14:10:46.0000] <jsbell>
wanderview: there was a recent change in chromium to align with that by the spec author, so I guess so. I have not absorbed streams or fetch-with-streams enough to argue. But I agree it seems weird.

[14:11:13.0000] <wanderview>
jsbell: well, I've objected to that proposal... I'll follow-up on that... and last I heard from annevk this was not being merged into fetch yet

[14:11:24.0000] <wanderview>
jsbell: seems premature to include this in wpt upstream

[14:19:26.0000] <wanderview>
jsbell: with this behavior it seems it forces the browser to keep the contents of the stream in memory....

[14:23:12.0000] <wanderview>
jsbell: thanks... for being obstinate

[14:23:19.0000] <jsbell>
:)

[14:24:15.0000] <jsbell>
wanderview: not waiting on anything else from me, correct?

[14:24:28.0000] <wanderview>
jsbell: correct, thank you very much for reviewing all those!

[14:25:12.0000] <wanderview>
I wrote a new issue for the bodyUsed thing: https://github.com/yutakahirano/fetch-with-streams/issues/37

[14:25:37.0000] <jsbell>
wanderview: np; we'll "downstream" them into Blink soon (I have a minion now...)

[14:26:55.0000] <jgraham>
wanderview: Oh, so is everything you are waiting for in wpt now merged?

[14:27:15.0000] <wanderview>
jgraham: I have to address a nit in that last PR

[14:27:21.0000] <wanderview>
and then I will ask you to merge

[14:27:35.0000] <jgraham>
Oh, OK

[14:27:55.0000] <jgraham>
/me requests that people use Issue for things that actually have to be fixed

[14:28:13.0000] <jgraham>
Even nits, if they have to be fixed

[14:29:46.0000] <wanderview>
jgraham: I wish there was an easy way to run a PR to wpt upstream against the browser

[14:29:54.0000] <wanderview>
to make sure I don't make a stupid typo

[14:30:27.0000] <jgraham>
wanderview: Like starting the webserver on your local machine and running the test? Because that's very possible

[14:30:48.0000] <jgraham>
./serve in the wpt checkout root, although you probably need to configure your hosts file

[14:31:21.0000] <wanderview>
jgraham: how do I get the tools dir?

[14:31:43.0000] <jgraham>
git submodule update --recursive --init

[14:31:45.0000] <jgraham>
https://github.com/w3c/web-platform-tests/blob/master/README.md#running-the-tests

[14:33:40.0000] <wanderview>
jgraham: sadly, that doesn't work too well on my headless linux machine

[14:33:46.0000] <wanderview>
if it only listens on localhost

[14:35:24.0000] <jgraham>
wanderview: You can actually change that in the config file

[14:36:11.0000] <jgraham>
Create a config.json with the bits of https://github.com/w3c/web-platform-tests/blob/master/config.default.json that you want to override

[14:37:22.0000] <wanderview>
I'm just cloning it on my laptop

[14:37:27.0000] <wanderview>
I have about 3 minutes before I have to leave

[14:39:30.0000] <wanderview>
jgraham: sorry... it didn't work and I don't have time to investigate more... if you want me to retest before merging I can do it tomorrow

[14:44:23.0000] <jgraham>
wanderview: Well it still needs to be reviewed anyway

[14:45:05.0000] <jgraham>
So I guess if jsbell tests and reviews it then I will merge it, but it does seem like tomorrow is more likely


2015-05-05
[22:45:08.0000] <annevk>
Mark: The IETF is generally enthusiastic about Opportunistic Security

[22:45:09.0000] <annevk>
Mark: The W3C is much less excited about Opportunistic Security

[22:45:15.0000] <annevk>
/me is reading https://github.com/w3ctag/meetings/blob/gh-pages/2015/04-sfo/04-21-minutes.md

[23:09:02.0000] <annevk>
/me gets to the part where slightlyoff is upset with sortable tables

[23:09:18.0000] <annevk>
/me wouldn't really consider that representative of anything

[23:46:39.0000] <annevk>
"If your website is a bank, and you see a wildcard CORS header, it's probably really bad."

[23:46:49.0000] <annevk>
not true :-(

[23:51:29.0000] <smaug____>
is w3.org down

[23:55:34.0000] <annevk>
http://downforeveryoneorjustme.com/w3.org

[23:55:41.0000] <annevk>
I can't access it either though

[00:13:07.0000] <MikeSmith>
sorry we having haproxy problems I think

[00:13:11.0000] <MikeSmith>
it may be while

[00:13:41.0000] <MikeSmith>
oh maybe it's back already now

[00:14:21.0000] <annevk>
Domenic: where was that new URL implementation located again?

[00:14:37.0000] <annevk>
/me finds https://www.npmjs.com/package/url-standard and https://www.npmjs.com/package/urlsearchparams but they are different

[00:15:22.0000] <annevk>
https://www.npmjs.com/search?q=whatwg is pretty cool

[00:15:56.0000] <annevk>
Domenic: https://github.com/cofounders/urlutils ?

[00:16:09.0000] <annevk>
hmm that is a year old

[00:16:13.0000] <annevk>
Sebmaster: ?

[00:22:54.0000] <annevk>
ah

[00:22:54.0000] <annevk>
https://github.com/jsdom/whatwg-url

[00:23:28.0000] <annevk>
Whenever I search for jsdom I end up at https://github.com/tmpvar/jsdom so I didn't realize it was also an organization

[00:55:12.0000] <Domenic>
yeah maybe we should move it

[01:09:51.0000] <annevk>
TabAtkins: when I regen URL it now points to #utf_8-decoder rather than #utf-8-decoder due to a change in linking practices?

[01:10:13.0000] <annevk>
TabAtkins: I'm not sure how I can prevent that from happening

[01:15:31.0000] <annevk>
Whoever wants underscores?!

[01:15:44.0000] <annevk>
I found a workaround, but this makes things way more verbose...

[01:44:25.0000] <Domenic>
annevk_: explain no longer defaulting to about:blank?

[01:44:54.0000] <annevk>
Domenic: apparently #foo against about:blank will at some point yield about:blank#foo

[01:44:58.0000] <annevk>
Domenic: or might already in UAs

[01:45:11.0000] <Domenic>
sure. Why is that a problem?

[01:45:24.0000] <annevk>
Domenic: because the intention was that the default was equivalent to no base URL

[01:45:34.0000] <Domenic>
this is about new URL() only, or...?

[01:45:39.0000] <annevk>
yes

[01:45:42.0000] <Domenic>
ah ok

[01:45:57.0000] <annevk>
yeah other specs still need to use about:blank

[01:46:03.0000] <annevk>
e.g. new Document()

[01:46:15.0000] <Domenic>
so given an arbitrary string with no context, "parse this as a URL" i.e. "parse this as an absolute URL" should still be done relative to about:blank

[01:46:16.0000] <Domenic>
yeah

[01:46:41.0000] <Domenic>
document.URL seems fine for new URL I guess

[01:47:13.0000] <Domenic>
"#foo" should only work if "../../foo.html" works IMO

[01:47:13.0000] <annevk>
I want new URL to be able to fail on non-absolute URLs

[01:47:18.0000] <annevk>
right

[01:48:04.0000] <Domenic>
Maybe new URL() accepts relative and URL.absolute() fails on relative

[01:48:17.0000] <Domenic>
.fromAbsolute? I dunno.

[01:48:43.0000] <annevk>
it seems new URL() should support all forms and .statics should support subsets

[01:49:09.0000] <annevk>
a null base URL is more low-level

[01:49:12.0000] <Domenic>
I think that agrees with what I said :)

[01:49:31.0000] <annevk>
it might :-)

[01:52:02.0000] <annevk>
Domenic: do we still use tenXer?

[01:52:11.0000] <annevk>
Domenic: for whatwg/url it is triggering failures

[01:52:25.0000] <Domenic>
annevk: no :( it's some kind of viral thing that spread to all my repos, I have since revoked it

[01:52:51.0000] <annevk>
Okay, deleted

[01:56:50.0000] <annevk>
<script defer>, that means wait for DOMContentLoaded, right?

[02:02:21.0000] <Domenic>
Also something about ordering

[02:02:35.0000] <Domenic>
I kind of was under the impression <script defer async> was optimal but I dunno it's a mess out there

[02:04:07.0000] <annevk>
Yeah I was wondering whether I could move the dfn.js scripts to be earlier in the source if I added defer

[02:04:20.0000] <Ms2ger>
defer async just means "async", but "defer" if that isn't supported

[02:04:35.0000] <annevk>
(dfn.js requires the DOM to be complete-ish)

[02:04:48.0000] <Ms2ger>
defer would work for that

[02:04:49.0000] <gsnedders>
@defer means after DOMContentLoaded you execute script elements in document order

[02:05:49.0000] <gsnedders>
except in IE<10 when it doesn't have the ordering semantic

[02:07:27.0000] <Domenic>
sounds like defer async has additional semantics on top of just async then?

[02:08:52.0000] <gsnedders>
I can't remember how they combine

[02:09:06.0000] <gsnedders>
Because they have contradictory semantics then

[02:09:25.0000] <gsnedders>
Also I'm on a slow café wifi connection that doesn't help loading the spec

[02:11:24.0000] <gsnedders>
Domenic: "async defer" is equiv. to "async"

[02:11:30.0000] <gsnedders>
as Ms2ger said

[02:11:43.0000] <Domenic>
I see

[02:11:49.0000] <Domenic>
So it just ignores the defer part of the semantics

[02:12:13.0000] <annevk>
http://www.levelofindirection.com/journal/2015/5/1/naming-is-hard-or-is-it.html the "Why?" section here has an interesting insight on naming that I hadn't considered

[02:12:16.0000] <Ms2ger>
Except in browsers that don't support async

[02:12:32.0000] <Domenic>
Yeah but who cares about those while writing specs

[02:12:33.0000] <annevk>
Shorter names is about readability, not typing speed

[02:13:09.0000] <Domenic>
http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html

[02:13:23.0000] <Domenic>
seems like maybe we should be using <script defer> instead of <script async> for specs

[02:13:35.0000] <gsnedders>
I'm never entirely sure about async from a perf view; they delay the HTML being parser and then surely have a bigger effect on when the complete document is rendered first

[02:14:09.0000] <Domenic>
yeah blocking the parser seems like a sin

[02:14:36.0000] <annevk>
Yeah, perhaps <script> at top, and use defer="" since complete document/render is more important than the script

[02:15:04.0000] <annevk>
And for the common scripts we don't care about ordering...

[02:15:15.0000] <annevk>
So IE9 is not really a concern either way

[02:16:15.0000] <gsnedders>
what we really want is something which delays execution until DOMContentLoaded but doesn't care about ordering, surely?

[02:17:23.0000] <annevk>
Well, I guess we want better dependency management in general

[02:17:41.0000] <annevk>
See Hixie's efforts in that area

[02:56:36.0000] <greves>
how do i put query params in fetch(), and why is it not in the docs anywhere?

[03:02:36.0000] <annevk>
greves: which docs?

[03:02:55.0000] <annevk>
greves: and if you want to manipulate the URL, just manipulate the URL?

[03:03:05.0000] <greves>
https://github.com/whatwg/fetch

[03:03:42.0000] <greves>
annevk, yeah but its quite messy doing all of the ?a=foo&b=bar stuff on my urls manually... would be much nicer to do {a: foo, b: bar} and pass that in some how

[03:04:00.0000] <annevk>
greves: use https://url.spec.whatwg.org/#urlsearchparams

[03:04:58.0000] <greves>
how do i pass that into my call to fetch then?

[03:05:19.0000] <greves>
fetch(url, {headers: headers, body: body})

[03:39:47.0000] <Domenic>
url.toString()

[05:12:37.0000] <annevk>
No need to invoke toString() explicitly...

[05:13:02.0000] <annevk>
It's surprising how much <form> has confused the thinking about query params

[05:39:54.0000] <Sebmaster>
annevk_: why'd you need the repo?

[05:40:12.0000] <Sebmaster>
*why did

[05:43:23.0000] <annevk_>
Sebmaster: wanted to point to it from an email to whatwg⊙wo

[05:43:35.0000] <annevk>
Sebmaster: https://lists.w3.org/Archives/Public/public-whatwg-archive/2015May/0007.html

[05:43:52.0000] <annevk>
zcorpan: header of https://html-differences.whatwg.org/ could do with some spring cleaning

[05:44:03.0000] <Sebmaster>
oh, i see, thanks

[05:45:41.0000] <Sebmaster>
annevk: i didnt mind the state based implementation too much, although i've no idea how a function based one would look, so i guess i cant really compare them

[05:46:44.0000] <annevk>
Sebmaster: https://github.com/servo/rust-url/blob/master/src/parser.rs#L94 and onwards, basically, but that's in Rust, not JavaScript

[05:49:10.0000] <Sebmaster>
annevk: ah, i was thinking that'd be much better at first because due to JITs not optimizing big functions

[05:49:27.0000] <Sebmaster>
I had a big switch statement in the beginning like here: https://github.com/jsdom/whatwg-url/blob/a7cfb037e36c6b07f884b25d59737d3d9b05986e/lib/url.js

[05:49:59.0000] <Sebmaster>
but with the class which saves the state and methods for each state it's not a big deal now I think

[05:52:58.0000] <annevk>
Sebmaster: see also https://github.com/annevk/url/ for such an implementation (though out of date)

[05:53:20.0000] <Sebmaster>
yeah i got a few tips where i missed stuff from the spec from there :p

[05:53:36.0000] <annevk>
Sebmaster: anyway, I don't have time for big rewrites at the moment

[06:23:36.0000] <annevk>
jgraham: it seems https://critic.hoppipolla.co.uk/r/4825 is already being acted on by wanderview and jsbell?

[06:24:24.0000] <jgraham>
annevk: Yeah. If you feel happy r-ing the fixup there then that saves a few hours of waiting for jsbell to wake up

[06:27:19.0000] <annevk>
jgraham: done

[06:28:36.0000] <jgraham>
annevk: Thanks!

[06:39:38.0000] <wanderview>
annevk: thanks

[06:39:43.0000] <wanderview>
jgraham: what is w3c-test-mirror?

[06:40:20.0000] <jgraham>
wanderview: It gets the thing mirrored on w3c-test.org

[06:40:22.0000] <jgraham>
https://w3c-test.org/submissions/1782/service-workers/cache-storage/window/cache-put.https.html

[06:40:36.0000] <jgraham>
Since you weren't 100% sure it worked I thought I should check

[06:41:01.0000] <jgraham>
(only project members can request mirroring, for obvious reasons)

[06:41:02.0000] <wanderview>
nice!  looks like it passed

[06:41:27.0000] <jgraham>
I just started an update into the gecko tree

[06:41:44.0000] <Ms2ger>
Oh, does the mirroring work again?

[06:41:54.0000] <wanderview>
jgraham: ok... I'm still trying to fix the intermittents in the wpt tests on windows

[06:42:45.0000] <jgraham>
Ms2ger: Everything works again!

[06:42:49.0000] <jgraham>
(perhaps)

[06:43:40.0000] <wanderview>
jgraham: did you merge that last PR?  I didn't get email about it

[06:44:00.0000] <wanderview>
looks like it still needs to be merged

[06:45:08.0000] <jgraham>
Wow, that's quite some fail

[06:48:13.0000] <Ms2ger>
Anyone want to check what IE does on https://w3c-test.org/submissions/1763/workers/baseurl/alpha/?

[06:49:04.0000] <wanderview>
Ms2ger: gives a directory listing

[06:49:10.0000] <Ms2ger>
Yeah

[06:49:18.0000] <Ms2ger>
There's four tests in there

[06:49:38.0000] <wanderview>
importScripts: TypeError: Unable to get property 'split' of undefined or null reference

[06:49:50.0000] <wanderview>
shared worker: TypeError: Unable to get property 'split' of undefined or null reference

[06:49:58.0000] <Ms2ger>
/me blinks

[06:50:03.0000] <wanderview>
they all hit that error

[06:50:21.0000] <Ms2ger>
Oh, gah

[06:50:30.0000] <Ms2ger>
Have we not merged IE's stack PR?

[06:50:33.0000] <wanderview>
Ms2ger: https://pastebin.mozilla.org/8832473

[06:54:35.0000] <Ms2ger>
wanderview, want to try again?

[06:55:18.0000] <wanderview>
importScripts: https://pastebin.mozilla.org/8832475

[06:55:31.0000] <wanderview>
shared worker: assert_unreached: Got error event Reached unreachable code

[06:55:50.0000] <wanderview>
base url in worker got the same error as importScripts

[06:56:08.0000] <wanderview>
xhr got slight variant on that error: assert_equals: expected "gamma\n" but got "beta\n"

[06:56:19.0000] <wanderview>
Ms2ger: ^^^

[06:56:39.0000] <Ms2ger>
Dammit

[07:21:43.0000] <wanderview>
jgraham: were you able to fix the path encoding issue I ran into on windows?  just wondering since you're running a gecko update

[07:26:06.0000] <jgraham>
wanderview: Uh, yes, I have a patch for that somewhere :)

[07:29:10.0000] <annevk>
caitp-: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25684

[07:41:17.0000] <annevk>
caitp-: interesting, so Chrome just does it for POST/PUT/HEAD

[07:41:28.0000] <annevk>
caitp-: that seems rather arbitrary

[07:42:27.0000] <caitp>
it is, but the reasoning makes sense

[09:04:01.0000] <annevk>
caitp: so I thought that was going to be an easy fix, but turns out I haven't really sorted the whole uploading part yet

[09:04:08.0000] <annevk>
caitp: and streams are going to change this too...

[09:22:26.0000] <annevk>
caitp: shit, forgot to add you to the ack section, how would you like to appear there?

[09:23:30.0000] <annevk>
/me finds name in /whois

[09:34:35.0000] <caitp->
for fetch? sure

[09:35:12.0000] <annevk>
caitp-: https://t.co/mXRm2wbp8T

[09:49:39.0000] <annevk>
everyone, we're now maintaining https://resources.whatwg.org/biblio.json

[09:50:02.0000] <annevk>
Hixie: you might want to use that to generate spec.whatwg.org from at some point, we could add summaries and such

[09:54:09.0000] <Ms2ger>
Håkon?

[09:56:20.0000] <annevk>
hmm, need to force utf-8

[09:59:04.0000] <annevk>
AddDefaultCharset failed bah

[10:02:15.0000] <annevk>
fixed

[10:07:29.0000] <annevk>
I also added DOMPARSING to the list

[10:29:32.0000] <TabAtkins>
annevk_: You can manually set your id, and Bikeshed won't autogen one.  It intentionally downcases a hyphen into an underscore, so you don't get "duplicate ID" warnings when you define two terms that are identical save for their hyphenation.  (It came up in one of mikewest's specs.)

[10:31:13.0000] <annevk_>
TabAtkins: it regressed a bunch of my stuff

[10:31:40.0000] <TabAtkins>
What changed, and what should it have been?

[10:32:44.0000] <TabAtkins>
Also: what is biblio.json for?  Can you just put those in SpecRef?  It's silly, if those are useful references, for them to be used only by one group, rather than shared by everyone using a preprocessor.

[10:33:00.0000] <annevk>
TabAtkins: tobie will import them automatically

[10:33:07.0000] <TabAtkins>
Ah, ok.

[10:33:20.0000] <annevk>
TabAtkins: it's WHATWG's version of what the W3C publishes as RDF...

[10:33:39.0000] <TabAtkins>
Cool.

[10:33:45.0000] <Ms2ger>
Why not microdata?

[10:33:57.0000] <TabAtkins>
Ms2ger: Don't troll. ^_^

[10:34:04.0000] <annevk>
TabAtkins: in URL a bunch of utf-8 links were made utf_8

[10:34:17.0000] <TabAtkins>
Yeah, that's due to what I indicated above.

[10:34:17.0000] <annevk>
TabAtkins: I solved  it by adding explicit url entries next to text, but it was cumbersome

[10:34:40.0000] <annevk>
TabAtkins: and unless I'm mistaken in some specifications the IDs regressed

[10:35:02.0000] <TabAtkins>
Wait, I don't understand what you mean by "adding explicit url entries next to text".

[10:35:03.0000] <annevk>
I might be wrong about that part

[10:35:46.0000] <annevk>
TabAtkins: https://github.com/whatwg/url/commit/c2980ee398de9621b0c313e5cc522895227db24c#diff-03b21320f26423640f89c447968191e5L2921

[10:36:06.0000] <TabAtkins>
It's possible that Bikeshed ID-autogen is different from Anolis auto-gen, yes.  That's why I did a big s/title=/id=/ in DOM, to keep the IDs stable.

[10:37:58.0000] <TabAtkins>
Oh, I see.  Yeah, Bikeshed uses its own ID-autogen rules to figure out the anchor, if you don't specify one yourself in the anchor data.  Obviously, if a spec uses an ID that doesn't match Bikeshed's autogen rules, you'll have to specify the anchor yourself.

[10:38:28.0000] <TabAtkins>
(This can gradually be fixed by moving more specs into Shepherd's database, so you don't need to put them in an anchors block at all.)

[10:39:20.0000] <annevk>
Ah, I might have a look at Shepherd tomorrow

[10:39:28.0000] <annevk>
This whole anchor business is driving me nuts

[10:39:52.0000] <TabAtkins>
Yeah, partially because your Anolis specs all had the terrible title practice.

[10:40:04.0000] <Ms2ger>
Excellent practice*

[10:40:06.0000] <TabAtkins>
So you're actively fighting Bikeshed right now.

[10:40:25.0000] <TabAtkins>
Ms2ger: It was a hack around not having types attached to your definitions. ^_^

[10:41:39.0000] <TabAtkins>
annevk: You're currently in the same position as when Hixie was trying to learn Git, and trying desperately to just push a file to the repo. ^_^

[10:57:29.0000] <Domenic>
The difference here being, breaking external links is bad?

[10:58:25.0000] <TabAtkins>
There's nothing wrong with links.  Where you previously specified title="concept-foo", you switch to id="concept-foo" (and let Bikeshed detect the linking text itself, unless you actually do need to override it).

[10:58:49.0000] <TabAtkins>
This works for all Anolis-based <dfn>s.

[10:59:21.0000] <TabAtkins>
Then you can, almost all of the time, delete title entirely from the links, and let the autolinking process hook things up automatically.

[10:59:41.0000] <TabAtkins>
I removed at least 99% of the title attributes in DOM's source.

[11:03:40.0000] <TabAtkins>
The Anolis practice was just to use title='' on <dfn> as a replacement for id='', and then use title='' on <a> as a replacement for href='' (that would cross-link if the ID was in the Anolis db).

[12:04:43.0000] <hsivonen>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=1130533#c14

[12:05:28.0000] <annevk>
hsivonen: sigh

[12:05:32.0000] <annevk>
hsivonen: tomorrow

[14:50:50.0000] <esprehn>
Hixie: why does script run when adding a node, but not when removing or changing the type...

[14:51:10.0000] <esprehn>
that seems super weird, you have to change the type and then append a whitespace node to run your script


2015-05-06
[22:00:59.0000] <annevk>
I wonder what https://github.com/w3c/webstorage-2nd-edition is. Is that localStorage?

[22:48:43.0000] <annevk_>
hsivonen: I looked at his issues and I'm not really sure what to say there

[22:49:13.0000] <annevk>
hsivonen: the space issues seem bs, but I can't really comment on email defaults...

[00:15:12.0000] <annevk_>
How can we be sure this tenXer stuff does not return?

[00:15:27.0000] <annevk>
It was in every repository...

[00:20:33.0000] <MikeSmith>
annevk: what tenXer stuff? something happened in the last couple days?

[00:20:48.0000] <MikeSmith>
/me has been traveling

[00:20:58.0000] <annevk>
MikeSmith: I think at some point somebody added it to a few repositories for statistics or some such

[00:21:21.0000] <annevk>
MikeSmith: but somehow it ended up "installed" everywhere including the private repository used for passwords

[00:21:23.0000] <MikeSmith>
Oh

[00:21:59.0000] <annevk>
Might want to check under Settings -> Webhooks & Services

[00:49:17.0000] <annevk>
terinjokes: Domenic: GitHub's pages is mostly about some legacy content

[00:49:41.0000] <terinjokes>
annevk: doesn't make me any less :(

[00:50:17.0000] <Domenic>
annevk: would be nice to have HSTS for e.g. http://domenic.github.io/streams-demo

[00:51:21.0000] <terinjokes>
Domenic: since it last came up, we now have a button to turn on HSTS headers

[00:51:33.0000] <Domenic>
terinjokes: oooh awesome let me go do that

[00:51:39.0000] <annevk>
terinjokes: Domenic: https://twitter.com/mikewest/status/553576868562362368

[00:51:42.0000] <terinjokes>
but obviously requires a domain (or subdomain) going through our network

[00:52:40.0000] <Domenic>
replies there are heartening

[00:53:04.0000] <terinjokes>
Domenic: we're also beta testing x-content-type-options

[00:54:29.0000] <Domenic>
I don't really remember why I want that

[00:54:58.0000] <terinjokes>
tweet is correct, it's just a header and a 302

[00:56:32.0000] <Domenic>
max-age 6 months seems low

[00:56:55.0000] <Domenic>
wow nice that it automatically does the preload flow for me

[01:00:15.0000] <Domenic>
when are we getting http2 tho

[03:05:07.0000] <timoxley>
https://fetch.spec.whatwg.org/#bodies "A body is a byte stream."

[03:05:16.0000] <timoxley>
what is a "byte stream"

[03:10:01.0000] <darobin>
honey, this here body is a lot more than a byte stream

[03:25:06.0000] <annevk>
timoxley: a stream of bytes?

[03:25:31.0000] <annevk>
timoxley: though see https://github.com/yutakahirano/fetch-with-streams/ (and in particular the open issues) about refactoring that to make it more concrete

[03:26:34.0000] <timoxley>
annevk: that's what I was looking for, thanks.

[03:26:48.0000] <jgraham>
To be fair "byte stream" should link to something since it's an abstract concept

[03:29:41.0000] <annevk>
jgraham: it could be https://encoding.spec.whatwg.org/#concept-stream I guess, but waiting for streams and layering everything on top of that seems more fruitful

[03:31:50.0000] <jgraham>
Sure

[03:38:27.0000] <timoxley>
"since it's an abstract concept" yeah I was expecting to see some kind of byte stream api

[03:39:19.0000] <timoxley>
considering "Let stream be an empty byte stream."

[03:39:32.0000] <timoxley>
https://fetch.spec.whatwg.org/#body-mixin

[05:31:26.0000] <annevk>
timoxley: oh, yeah, there'll be an API, that's that repository but also https://streams.spec.whatwg.org/

[05:31:32.0000] <annevk>
timoxley: somewhat work in progress still

[05:52:41.0000] <wanderview>
jgraham: can you review this? https://critic.hoppipolla.co.uk/r/4918

[05:54:05.0000] <jgraham>
wanderview: I can!

[05:54:52.0000] <wanderview>
jgraham: thanks!  and this?  https://bugzilla.mozilla.org/page.cgi?id=splinter.html&bug=1161759&attachment=8601835

[05:54:59.0000] <wanderview>
just trying to get this stuff sorted before going on PTO tomorrow

[05:55:22.0000] <jgraham>
wanderview: r+ on that if it doesn't land before the timeout increases

[05:55:41.0000] <jgraham>
I can kick off a wpt upgrade right away; should be trivial since I just did one

[05:55:55.0000] <wanderview>
jgraham: ok, just let me know when to go ahead

[05:56:09.0000] <wanderview>
thanks

[06:00:04.0000] <annevk>
wanderview++ for caring about wpt

[06:00:52.0000] <wanderview>
annevk: they really are great for highlighting ambiguity in the spec...

[06:01:03.0000] <wanderview>
I think the blink and gecko Cache APIs are better aligned because of wpt

[06:50:04.0000] <smaug____>
/me is now lost with annevk's shadow dom v1 and v2

[06:50:18.0000] <smaug____>
er, s/v1/1)/

[06:50:25.0000] <smaug____>
er, s/v2/2)/

[06:51:05.0000] <annevk>
smaug____: equivalent to 1/2 in https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Imperative-API-for-Node-Distribution-in-Shadow-DOM.md

[06:51:16.0000] <annevk>
smaug____: if that helps :-(

[06:53:16.0000] <smaug____>
I see

[06:53:45.0000] <smaug____>
annevk: it is the word "flattening" which I don't or didn't quite get in this context

[06:57:15.0000] <annevk>
smaug____: it's somewhat similar to promises in my mind

[06:57:53.0000] <annevk>
smaug____: one proposal keeps <content> intact, the other recursively unwraps <content> until there's only no-<content> nodes

[06:59:40.0000] <smaug____>
conceptually

[07:00:17.0000] <smaug____>
but ok, still feel like 2) is the way to go

[07:00:42.0000] <annevk>
yeah, I wonder if rniwa's perf concerns are valid

[07:00:50.0000] <smaug____>
feels just most natural... but I should have better arguments

[07:00:57.0000] <annevk>
seems like it's still a fairly trivial traversal algorithm

[07:01:50.0000] <annevk>
yeah my instincts say 2, definitely after seeing <content select> implemented in 1

[07:01:59.0000] <annevk>
and 3 doesn't seem DOM-like

[07:03:09.0000] <smaug____>
3 sounds very complicated

[07:03:31.0000] <annevk>
that too

[07:03:50.0000] <annevk>
I wonder if it would run at the same times as that proposed compositor worker or whether it would be the same thing

[07:03:54.0000] <smaug____>
if we did that, we should just do isolation and somehow use the same global for isolation and distribution

[07:03:57.0000] <annevk>
Hard to judge without a concrete proposal

[07:04:14.0000] <smaug____>
right

[07:04:33.0000] <annevk>
Yeah, and the fact that then for each custom element you create you need to have a separate script somewhere else just seems painful

[07:04:51.0000] <annevk>
With full isolation something like that is not really a problem maybe...

[07:30:45.0000] <hsivonen>
annevk: the locale attitude re: KOI8-R is terribly hostile to software devs and QA

[07:31:00.0000] <hsivonen>
annevk: but yeah, dunno about the true situation about the mail defaults

[07:42:40.0000] <SteveF_>
annevk: feedback on is= and way forward looks sane ;-)

[08:04:38.0000] <annevk>
ta

[08:15:25.0000] <dglazkov>
annevk, smaug____: are you not worried about the compounding factor of running distributions at the nanotask time? If there are X elements in doc that have distribution callbacks registered, every DOM operation that mutates the tree will need to run X callbacks at the end of it.

[08:15:40.0000] <dglazkov>
that seems scary

[08:16:11.0000] <dglazkov>
unless there's a way to determine and limit the scope of callbacks somehow?

[08:20:03.0000] <annevk>
dglazkov: only for childList changes, no?

[08:21:17.0000] <annevk>
dglazkov: I haven't fully considered the nanotask implications since it's a recent proposal

[08:21:38.0000] <annevk>
dglazkov: moving away from synchronous layout APIs still seems preferable

[08:22:26.0000] <smaug____>
yeah, only if childlist changes

[08:26:03.0000] <smaug____>
and web apps wanting to have better performance can start to rely on microtasks for distribution

[08:26:28.0000] <smaug____>
I see the nanotask part only something required for backwards compatibility

[08:56:59.0000] <dglazkov>
the "don't break the web" type of backward compatibility :)

[08:57:20.0000] <dglazkov>
childList changes only... interesting

[08:57:33.0000] <dglazkov>
what if I want to build a distribution algo that relies on attribute changes?

[09:02:09.0000] <dglazkov>
I do want to measure the impact of potential breakage we would cause by going to microtask timing. Working on it..

[09:02:26.0000] <dglazkov>
if the impact seems small, then I am all for it

[09:29:34.0000] <Krinkle>
/me got buzzed for "timo" :)

[09:32:17.0000] <annevk>
dglazkov: the impact might be largish now, but once the CSS WG starts defining proper async APIs or you only use requestAnimationFrame() for layout stuff life might get better?

[09:32:48.0000] <annevk>
dglazkov: for attribute changes I guess you'd observe attribute changes of the childList too?

[09:37:13.0000] <dglazkov>
annevk: no disagreement that pain is temporary. Just the worry about the timeline of this pain being alleviated. My list of would-be-breakages keeps growing: https://github.com/dglazkov/nope-js/blob/master/nope.js#L12

[09:43:30.0000] <annevk>
oh great, the new scrollingElement is one too?

[09:43:53.0000] <annevk>
how about we actually define style/layout triggers in CSSOM so people are more conscious about it

[09:44:14.0000] <annevk>
surprising that "the TAG" would approve of more sync layout

[09:45:34.0000] <TabAtkins>
Hm, why is scrollingElement on that? Is it because you can theoretically put a shadow tree on <html>?

[10:13:31.0000] <dglazkov>
TabAtkins: it's just a list of all of them

[10:15:08.0000] <zcorpan>
annevk: TabAtkins: it's really only in quirks mode, because the <body> can itself be independently scrollable, and then the APIs scroll the body element itself instead of the viewport

[10:15:19.0000] <annevk>
zcorpan: you should take that nope.js file and add annotations all over CSSOM

[10:15:46.0000] <zcorpan>
annevk: dunno what nope.js is

[10:15:56.0000] <annevk>
zcorpan: it should not be cheap to define properties that cause synchronous style/layout

[10:16:06.0000] <annevk>
zcorpan: https://github.com/dglazkov/nope-js/blob/master/nope.js#L12

[10:16:29.0000] <annevk>
zcorpan: basically the list of getter/setter/methods that trigger synchronous stuff in CSS land

[10:16:52.0000] <zcorpan>
annevk: can you file a bug?

[10:16:56.0000] <annevk>
zcorpan: I'd like the spec for those getter/setter/methods to look suitably bad

[10:17:09.0000] <annevk>
zcorpan: can I file it against CSSOM and you'll sort out the rest?

[10:17:18.0000] <zcorpan>
annevk: sure

[11:02:25.0000] <dglazkov>
smaug____: is this your land? https://bugzilla.mozilla.org/show_bug.cgi?id=1162013

[11:04:18.0000] <smaug____>
looking

[11:05:17.0000] <smaug____>
someone else has been dealing with Promises stuff

[11:05:47.0000] <smaug____>
sounds like a dup of some other bug...

[11:09:08.0000] <annevk>
dglazkov: basically, https://www.w3.org/Bugs/Public/show_bug.cgi?id=25981 is why we haven't sorted that yet

[11:09:22.0000] <annevk>
dglazkov: there's no normative specification for promise timing

[11:09:27.0000] <smaug____>
indeed

[11:11:34.0000] <annevk>
I actually cannot find a duplicate

[11:26:51.0000] <dglazkov>
thanks!

[14:02:50.0000] <terinjokes>
Domenic: (and possibly others) any recommendations on a Windows Phone for Mobile IE testing?

[14:03:06.0000] <terinjokes>
happy to take discussion somewhere else if needed

[14:41:25.0000] <TabAtkins>
annevk: Fetch kills javascript: urls from working, right?

[14:44:35.0000] <caitp->
"Otherwise: Return a network error."

[14:45:40.0000] <TabAtkins>
caitp-: Sweet.

[15:58:25.0000] <nathanjosiah>
With the recent addition of rebeccapurple, it got me thinking. What is the possibility of adding satangrey for #666?

[16:06:38.0000] <hober>
nathanjosiah: not gonna happen

[16:09:09.0000] <nathanjosiah>
What about MarkOfTheBeastGrey?

[16:10:08.0000] <TabAtkins>
nathanjosiah: We added rebeccapurple as a service for one of the most important people in CSS's history. We're not actually interested in adding more named colors.

[16:10:20.0000] <TabAtkins>
Also, #666 is incredibly unsatanic anyway.

[16:10:52.0000] <TabAtkins>
(It expands to #666666 anyway, which is technically known as "double satan")

[16:11:04.0000] <tantek>
|m|

[16:11:22.0000] <TabAtkins>
|m| o |m|

[16:12:18.0000] <nathanjosiah>
So "doublesatangrey" then?

[16:12:27.0000] <TabAtkins>
No.

[16:12:34.0000] <nathanjosiah>
Ok...

[16:12:58.0000] <TabAtkins>
"We're not actually interested in adding more named colors."

[16:13:13.0000] <TabAtkins>
(I'm the editor of the Color spec, so you can take this as definitive. ^_^)

[16:13:45.0000] <nathanjosiah>
It just seems like a missed opportunity :)

[16:14:12.0000] <TabAtkins>
The missed opportunity was putting together a named color system that wasn't incredibly shitty.  But we missed that opportunity over a decade ago.

[16:14:27.0000] <tantek>
X11 FTW!

[16:15:28.0000] <TabAtkins>
nathanjosiah: https://www.youtube.com/watch?v=HmStJQzclHc

[16:15:42.0000] <TabAtkins>
Wash your mouth out with soap, tantek.

[16:19:56.0000] <nathanjosiah>
TabAtkins: I would have to agree that the naming got a bit unwieldy.


2015-05-07
[19:48:02.0000] <TabAtkins>
annevk: Could you email me the URL source file that generated that error? I have no idea how you're getting that. ^_^

[20:00:44.0000] <TabAtkins>
Hm, I actually like "flow" for the inline stuff.

[20:01:04.0000] <TabAtkins>
So "display:inline" is "inline-level flow" and "display:block" is "block-level flow".

[20:01:43.0000] <TabAtkins>
(Shamelessly stolen from the Box Module.)

[21:18:00.0000] <TabAtkins>
Whoops, last several lines posted to the wrong room.

[21:22:07.0000] <annevk>
TabAtkins: which error again?

[21:22:22.0000] <annevk>
TabAtkins: the one for URL?

[21:22:34.0000] <annevk>
TabAtkins: I just put {{Node/baseURI}} where I currently referenced baseURI

[21:23:08.0000] <TabAtkins>
annevk: Right, but you've clearly got something weird going on in the rest of the document to cause that.  {{Foo/bar}} is used in *tons* of specs, and it's never caused that weird error.

[21:23:19.0000] <TabAtkins>
So I need the whole source document, so I can figure out what you've done that's causing the error

[21:23:39.0000] <TabAtkins>
Or what I've somehow done, in such a way that no one else has ever triggered the error despite it being latent in the code.

[21:23:50.0000] <annevk>
TabAtkins: it's just https://github.com/whatwg/url with that modification

[21:23:54.0000] <TabAtkins>
kk

[21:24:02.0000] <TabAtkins>
I'll look into it tomorrow, thanks.

[21:24:06.0000] <annevk>
cool

[21:24:15.0000] <annevk>
appreciate it

[21:25:02.0000] <TabAtkins>
I don't like my users getting strange errors. ^_^

[01:35:57.0000] <annevk>
/me learns the meaning of the word conjugation

[02:17:24.0000] <MikeSmith>
annevk: FYI http://www.w3.org/2015/Talks/ac-licensing/?full#8

[02:18:23.0000] <MikeSmith>
annevk: https://www.w3.org/Consortium/Legal/2015/04-invited-expert.html

[02:26:07.0000] <annevk>
MikeSmith: still seems awfully conservative, but I guess good for them

[02:28:25.0000] <MikeSmith>
annevk: yeah but I think despite suboptimal wording still, it effectively makes it clear that it's not placing any restrictions on what invited experts can or can't do with their own work that they've authored

[02:28:36.0000] <MikeSmith>
anyway, specifically, good on Wendy

[02:28:49.0000] <annevk>
MikeSmith: ah yeah, the IE stuff is good

[02:29:05.0000] <annevk>
MikeSmith: the awfully conservative was about the rest of those slides

[02:29:18.0000] <MikeSmith>
ah ok

[02:32:30.0000] <tantek>
annevk: yes, conservative for a largely conservative audience. Wendy tailored it appropriately IMO.

[02:32:48.0000] <tantek>
and yes, I'm pretty happy with the IE stuff - hoping you are too.

[02:33:05.0000] <tantek>
(have been pushing on all this, IE agreement, licensing, A LOT in the AB)

[02:33:35.0000] <annevk>
Still a far cry from what the WHATWG does

[02:35:45.0000] <annevk>
tantek: it's fine, it doesn't matter much to me anymore

[02:36:10.0000] <annevk>
tantek: maybe it would've helped in 2012 when I was still dabbling between W3C and WHATWG

[02:53:54.0000] <MikeSmith>
annevk: Michiel Leenaars was here yesterday

[02:54:06.0000] <MikeSmith>
from NLnet

[02:54:22.0000] <annevk>
oh cool

[02:55:23.0000] <MikeSmith>
yeah was good to see him

[03:18:55.0000] <annevk>
It's amazing how much the Web Applications Security WG wants to break security

[03:19:13.0000] <annevk>
And continues to be ignorant about SOP and CORS

[03:19:31.0000] <tantek>
annevk: [meme with citation needed]

[03:19:35.0000] <gsnedders>
What are they doing now?

[03:20:15.0000] <annevk>
https://lists.w3.org/Archives/Public/public-webappsec/2015May/thread.html#msg23

[03:20:36.0000] <annevk>
I should probably stop replying though, that was my bad

[03:24:39.0000] <annevk>
I have this idea for headers of standards I author:

[03:25:19.0000] <annevk>
Contribute: GitHub links; Discuss: IRC and mailing list; Commits: GitHub commits and Twitter

[03:25:46.0000] <annevk>
bz pointed out that omitting the mailing list goes a bit far as some high-level discussion is oftentimes still warranted

[03:26:01.0000] <annevk>
Feedback appreciated

[03:26:10.0000] <Domenic>
Discussion should be on GitHub

[04:07:09.0000] <roc>
ugh

[04:31:29.0000] <annevk>
roc?

[04:59:53.0000] <annevk>
TabAtkins: I still want a new named color... "whatwggreen" as it's impossible to remember

[05:01:09.0000] <darobin>
hahaha

[05:01:22.0000] <darobin>
or maybe change the green?

[05:01:23.0000] <tantek>
annvek what's the hex?

[05:01:39.0000] <darobin>
"what the hex" was pretty much my reaction too

[05:01:59.0000] <tantek>
"Who cares about specs, what color shall we paint the WHATWG?"

[05:02:06.0000] <darobin>
well duh

[05:02:38.0000] <annevk>
/me views source on https://resources.whatwg.org/logo-encoding.svg and finds #3c790a

[05:02:55.0000] <annevk>
(that's pretty much the process I repeat whenever I need it)

[05:03:16.0000] <annevk>
Oooh

[05:03:26.0000] <annevk>
W3C AC still partying like it's 2004: https://twitter.com/fabien_gandon/status/596229047476170753

[05:03:31.0000] <darobin>
maybe add a shortcut to your text editor?

[05:03:48.0000] <tantek>
annevk - lololol yeah that moment was pretty hilarious

[05:04:28.0000] <tantek>
I think I actually LOLed when the speaker said that.

[05:04:43.0000] <annevk>
darobin: heh, I wonder if OS X supports those shortcuts the iPhone does

[05:04:44.0000] <jgraham>
It's not 2004‽

[05:04:55.0000] <annevk>
darobin: could make whatwggreen convert automatically

[05:05:14.0000] <annevk>
darobin: so when I type whatwgreen, all you see is #3c790a

[05:05:26.0000] <tantek>
annevk: CSS Variables?

[05:05:40.0000] <annevk>
no OS-bound variables

[05:05:59.0000] <darobin>
the second hit (and many subsequent) for that colour are actually WHATWG https://duckduckgo.com/?q=3c790a&ia=answer

[05:06:03.0000] <annevk>
might be useful for passwords too, type "password" get ****

[05:06:06.0000] <darobin>
it's pretty distinctive

[05:06:10.0000] <darobin>
or maybe ugly distinctive

[05:06:15.0000] <annevk>
distinctive enough for a named color?

[05:06:24.0000] <annevk>
why yes

[05:06:41.0000] <darobin>
annevk: that think with passwords works

[05:07:00.0000] <darobin>
annevk: I mean if I type ********** you'll only see **********, even though I typed **********

[05:07:13.0000] <annevk>
All I see is hunter2

[05:07:17.0000] <darobin>
:)

[05:09:14.0000] <darobin>
annevk: I don't think it's very different from #360, which is the closest web safe colour

[05:09:52.0000] <darobin>
(and is easy to remember)

[05:10:14.0000] <annevk>
data:text/html,<body style=background:%23360>

[05:10:17.0000] <annevk>
data:text/html,<body style=background:%233c790a>

[05:10:27.0000] <annevk>
360 is quite a lot darker here

[05:11:51.0000] <darobin>
annevk: it is darker, but I find it to be not too much darker (especially if not a background)

[05:12:12.0000] <darobin>
but, *shrug*, it's just a quick and dirty solution that doesn't require a standard :)

[05:13:10.0000] <jgraham>
Oh, web safe colours, I remember those

[05:17:00.0000] <tantek>
annevk: #471 looks pretty close

[05:17:59.0000] <annevk>
tantek: seems like a productive meeting :-P

[05:18:16.0000] <annevk>
I don't think we'll change the color at this point

[06:54:30.0000] <oyiptong>
howdy, i was wondering if someone knows Fred Andrews <fredandw⊙lc>

[06:54:55.0000] <oyiptong>
i'm trying to contact him because i'd like to know more about Private Script Context

[06:54:59.0000] <oyiptong>
http://www.w3.org/community/pua/wiki/Private_Script_Context

[06:55:02.0000] <oyiptong>
i know the initiative is dead

[06:55:07.0000] <oyiptong>
but i'm trying to contact the author

[06:58:30.0000] <MikeSmith>
oyiptong: this is probably the last place in the world you're likely to find somebody who's in contact with him

[07:03:03.0000] <tantek>
why is there a PUA (pick-up artist?!?) community in W3C?

[07:04:56.0000] <jgraham>
/me hopes they are only trying to score codepoints

[07:05:24.0000] <miketaylr>
MikeSmith: i made the bogus suggestion to oyiptong -- i saw that fred had authored something on the whatwg wiki at some point

[07:05:33.0000] <MikeSmith>
ah ok

[07:05:41.0000] <miketaylr>
man of mystery

[07:05:45.0000] <MikeSmith>
yeah

[07:06:03.0000] <MikeSmith>
he sort of disappeared from discussions a while back

[07:06:13.0000] <MikeSmith>
after the EME/DRM dust-ups

[07:06:15.0000] <miketaylr>
yeah, haven't seen his name on lists in a few years it seems

[07:06:20.0000] <MikeSmith>
yeah

[07:06:28.0000] <MikeSmith>
not missed, honestly

[07:06:36.0000] <MikeSmith>
except for the entertainment value

[07:06:57.0000] <miketaylr>
probably got a nicer brand of tinfoil that blocks email as well as government mind reading

[07:07:03.0000] <MikeSmith>
hahah

[07:07:14.0000] <miketaylr>
i should get some too

[07:07:27.0000] <MikeSmith>
I could share some of mine with you

[07:10:30.0000] <oyiptong>
tantek: i thought the name was very unfortunate too!

[07:24:11.0000] <oyiptong>
hmm indeed. the tinfoil is strong in this one

[07:24:19.0000] <oyiptong>
that would explain his untraceability

[07:25:51.0000] <oyiptong>
i'm coming at it from a privacy perspective. what if we exposed some apis into the user's private data, but that data would only be accessible via a private context

[13:03:29.0000] <BigPants>
has there been any discussion on exposing the dirty flag for input elements?

[13:04:37.0000] <caitp->
oh, i can think of some applications and frameworks that would love to make use of that

[13:08:05.0000] <BigPants>
from a development perspective it seems a shame not to expose it, since it's there anyway


2015-05-08
[04:05:27.0000] <annevk>
TabAtkins: is there a reason for not marking up definitions of IDL members with <code>?

[05:04:09.0000] <GPHemsley>
annevk_: Is there a term for host + port?

[05:13:25.0000] <jgraham>
http://tantek.com/2011/238/b1/many-ways-slice-url-name-pieces

[05:27:36.0000] <yhirano_>
annevk: ping

[05:47:42.0000] <yhirano_>
annevk_: ping

[06:38:02.0000] <annevk_>
yhirano_: hi

[06:38:16.0000] <annevk>
GPHemsley: not in the spec

[06:48:20.0000] <annevk>
To this day I have trouble spelling Docs, thanks Opera

[06:48:34.0000] <annevk>
Or I guess, thanks Stig

[07:11:40.0000] <TabAtkins>
annevk: Since I wrap IDL *links* in <code>, no, it just looks like an oversight on my part. File an issue on me.

[07:31:22.0000] <annevk>
TabAtkins: do you think we should have a way to do it automatically?

[07:31:50.0000] <annevk>
TabAtkins: e.g. perhaps <dfn>{{Node/baseURI}}</dfn> should be a thing

[07:31:52.0000] <TabAtkins>
Yeah, makes sense to me. I can just check that it's not already in a <code> and wrap it.

[07:31:59.0000] <annevk>
TabAtkins: or that could be {{{Node/baseURI}}} :p

[07:32:11.0000] <TabAtkins>
Oh, yeah, there's an issue on me to figure that out, too.

[07:32:20.0000] <annevk>
I guess I can wait for that

[07:32:48.0000] <TabAtkins>
Why wait? Just file the issue. Wrapping a <code> is easier than figuring out what syntax I want for definitions.

[07:36:34.0000] <annevk>
done

[07:38:04.0000] <TabAtkins>
Thanks. ^_^

[08:15:44.0000] <yhirano_>
annevk: I'd like to talk a bit about bodyUsed.

[08:16:09.0000] <yhirano_>
annevk: let res be a non-empty response.

[08:16:58.0000] <yhirano_>
annevk: var stream = res.body; assert_false(res.bodyUsed); is that OK?

[08:19:31.0000] <yhirano_>
oh, anne is away.

[08:27:56.0000] <Domenic>
timezones :(

[08:33:52.0000] <TabAtkins>
circular earth :(

[08:34:26.0000] <Ms2ger>
It's not like it's better on Discworld

[08:34:44.0000] <jgraham>
TabAtkins: Feeling flat today?

[08:35:25.0000] <TabAtkins>
I'm just saying, if there sun shined from a skybox at infinite distance, we wouldn't have these problems.

[08:38:05.0000] <jgraham>
I don't know what a skybox is, but a sun at infinite distance would have problems of its own

[08:39:10.0000] <TabAtkins>
Nah, you just have light move at infinite speed. Easy.

[08:40:21.0000] <annevk>
"Getting DOM to REC: last interop issues" lol

[08:41:03.0000] <TabAtkins>
A skybox is a programming technique.  Easiest to talk about with raytracing - whenever a ray fails to hit anything and just goes off toward infinity, the skybox defines the color of that point-at-infinity.

[08:41:27.0000] <Ms2ger>
Ha

[08:42:53.0000] <annevk>
yhirano_: sorry, we've been having some connection issues

[08:43:17.0000] <annevk>
yhirano_: wanderview will be back from vacation next week or so I'm told and hopefully he can sort that through

[08:43:33.0000] <annevk>
yhirano_: I have to say I'm not super committed to any particular model, as long as it makes sense...

[08:43:51.0000] <Domenic>
I too have stopped having strong feelings about bodyUsed

[08:44:21.0000] <yhirano_>
ok, thanks.

[08:51:09.0000] <annevk>
yhirano_: I agree with you that if body is null, it would make sense for text() et al to not set it and always succeed

[08:51:25.0000] <annevk>
yhirano_: note that body being null is different from it being empty

[08:51:36.0000] <annevk>
(I said as much on the issue)

[08:57:49.0000] <Ms2ger>
TabAtkins, we'll be expecting you in #rust :)

[09:02:25.0000] <yhirano_>
annevk: interesting. I don't understand the difference between null body and empty body (and I merged them in my draft). can you tell me?

[09:02:36.0000] <TabAtkins>
Ms2ger: Get SimonSapin_ to pull the HTML parser + selector engine out of Servo, and we'll talk.

[09:02:46.0000] <jgraham>
TabAtkins: Done

[09:03:11.0000] <Ms2ger>
TabAtkins, that is done indeed

[09:03:14.0000] <SimonSapin>
kind of

[09:03:18.0000] <TabAtkins>
WHY DIDN'T SIMON TELL ME

[09:03:20.0000] <TabAtkins>
oh ok

[09:03:22.0000] <TabAtkins>
phew

[09:03:26.0000] <Ms2ger>
Well, they're not integrated

[09:03:29.0000] <SimonSapin>
We still need a nice tree API and plugging everything together

[09:03:35.0000] <Ms2ger>
But html5ever and rust-selectors exist

[09:03:36.0000] <jgraham>
https://github.com/kmcallister/html5ever https://github.com/SimonSapin/cssselect/issues/48

[09:03:49.0000] <jgraham>
Er, not issue 48 specifically

[09:03:53.0000] <TabAtkins>
Bikeshed is just an HTML parser, a selector engine, and then some other random code.

[09:03:54.0000] <jgraham>
Silly search

[09:04:48.0000] <gsnedders>
TabAtkins: it's like why Anolis is so slow — looping over stuff is just too slow, silly Python

[09:04:50.0000] <jgraham>
Oh, not that project al all even

[09:04:57.0000] <jgraham>
Anyway, it's somewhere

[09:05:51.0000] <SimonSapin>
I have some experiments at https://github.com/SimonSapin/kuchiki , but it’d need someone to take the lead and make a proper library and maintain it

[09:08:03.0000] <SimonSapin>
TabAtkins: wanna make a tree library in Rust? :)

[09:08:09.0000] <TabAtkins>
Probably not!

[09:09:17.0000] <gsnedders>
Totally unrelated: is there any serialisation format that can serialise all DOMs? Like, can serialise both <!-- -- --> and stuff with arbitrary namespaces?

[09:10:15.0000] <SimonSapin>
Probably, somewhere in the infinity of all possible serialization formats

[09:15:25.0000] <TabAtkins>
Actually, a tree library sounds like an interesting learning project, with all the ownership semantics.  Maybe.

[09:16:59.0000] <jgraham>
Certainly you are going to learn all the hard things rather fast if you make a tree with parent references

[09:17:50.0000] <gsnedders>
I tried doing that once. Then decided I was getting in too deep.

[09:19:21.0000] <TabAtkins>
Well, I know Bikeshed's tree-library needs, and they include walking up the ancestor list.

[09:19:37.0000] <annevk>
yhirano_: the difference is what happens with Content-Length

[09:19:40.0000] <annevk>
yhirano_: mostly

[09:19:51.0000] <annevk>
yhirano_: if there's no body, there's no Content-Length

[09:21:42.0000] <annevk>
gsnedders: didn't we develop a format like that once?

[09:21:46.0000] <yhirano_>
annevk: thanks. I will fix the draft.

[09:21:46.0000] <annevk>
gsnedders: for testing?

[09:23:28.0000] <TabAtkins>
annevk: Opinion - if SVG explicitly embraces a looser format for standalone, should we just use HTML (special-case when the first tag is <svg> to make it an SVG document rather than HTML) or use your XML5 or something similar?

[09:23:34.0000] <TabAtkins>
We dont' actually give a shit about namespaces.

[09:23:59.0000] <annevk>
TabAtkins: my opinion is that if we keep XML in browsers we should make it "XML5"

[09:24:13.0000] <annevk>
TabAtkins: and we can make namespaces nice

[09:24:16.0000] <Ms2ger>
There's even a rust implementation with tests

[09:24:28.0000] <annevk>
TabAtkins: e.g. <svg xmlns=svg> or some such

[09:24:44.0000] <annevk>
that autoexpands to the actual namespace

[09:24:45.0000] <TabAtkins>
Is XML5 as easy to use as svg-in-html?  Similar affordances?

[09:24:53.0000] <gsnedders>
annevk: can't quite deal with arbtirary namespaces

[09:25:06.0000] <annevk>
TabAtkins: yeah, you can even use </> to close an open tag

[09:25:18.0000] <annevk>
gsnedders: XML5 can

[09:25:20.0000] <Ms2ger>
What is this, sgml?

[09:25:32.0000] <TabAtkins>
Nah, that's just use /

[09:25:37.0000] <annevk>
Ms2ger: you're too young to be making that joke :p

[09:25:38.0000] <TabAtkins>
s/that'd/

[09:25:52.0000] <Ms2ger>
Get off my lawn

[09:26:05.0000] <Ms2ger>
And onto that beautiful mountain of yours

[09:26:14.0000] <gsnedders>
TabAtkins: SGML allows both depending on configurations for the application; HTML<5 per spec allows both NET (a/bar/) and whatever-it's-called-syntax (<a>foo</>)

[09:26:15.0000] <annevk>
I was about to say, get off my mountain

[09:26:34.0000] <gsnedders>
Wait, I'm younger than Ms2ger. Shit.

[09:26:53.0000] <TabAtkins>
Hahaha, all you babies!

[09:27:03.0000] <TabAtkins>
/me studiously hides that he's not 30 yet either.

[09:27:20.0000] <Ms2ger>
gsnedders, :D

[09:27:40.0000] <gsnedders>
/me hopes he isn't still the youngest guy active in this IRC channel

[09:27:46.0000] <gsnedders>
Because, like, I've been here almost a decade.

[09:28:07.0000] <gsnedders>
And that just leads to disturbing questions

[09:28:13.0000] <jgraham>
Well, if you will kill off all the newbies

[09:28:28.0000] <gsnedders>
Hey, I never killed anyone!

[09:56:43.0000] <caitp->
...but (and here's the key shock), to ever have a hope of doing that, we need to accept and embrace: we have to break the old broken web. <standing ovation from browser vendors and users who shed happy tears upon hearing this speech>

[09:58:43.0000] <TabAtkins>
caitp-: Why would *users* shed happy tears? They're the whole reason we can't break the old web in the first place.

[09:58:56.0000] <TabAtkins>
Authors don't care; they've abandoned the pages we want to break.

[10:00:32.0000] <caitp->
oh, it's sarcasm

[10:00:55.0000] <TabAtkins>
Oh, ok. You quoting that from somewhere?

[10:01:10.0000] <caitp->
kyle simpson

[10:07:58.0000] <TabAtkins>
Ah, getify. Ok.

[10:34:01.0000] <TabAtkins>
I can't tell if this "You update XMLHttpRequest has a bug" thread is spambot, or just a very confused and non-native English speaker.

[11:54:00.0000] <Ms2ger>
TabAtkins, I guessed "confused" :)

[12:00:28.0000] <caitp->
but it makes his web music lose voice

[12:00:31.0000] <caitp->
that's just terrible


2015-05-09
[19:00:50.0000] <wanderview_PTO>
yhirano_, annevk: I replied in the issue... I'll be checking mail and stuff in the evenings

[19:08:22.0000] <wanderview_PTO>
/me goes back to being away...

[00:44:14.0000] <Ms2ger>
https://brson.github.io/images/servo-deps.svg

[07:04:47.0000] <GPHemsley>
jgraham: Looks like tantek needs to update that post with info from the URL spec

[07:10:40.0000] <GPHemsley>
Ms2ger: Aaah! That is scary!

[08:56:05.0000] <annevk>
MikeSmith: spam https://www.w3.org/Bugs/Public/show_bug.cgi?id=28620

[08:56:48.0000] <annevk>
GPHemsley: I tried to login to https://twitter.com/mimesniff to update the link to use HTTPS but that failed because I had to confirm some email address of yours

[08:56:53.0000] <annevk>
GPHemsley: could you do it?

[08:57:17.0000] <GPHemsley>
annevk: Yeah, I got a notification e-mail about that. I'll go ahead.

[08:59:43.0000] <GPHemsley>
Twitter likes to take over URLs, but done

[09:22:10.0000] <annevk>
GPHemsley: ta

[10:11:30.0000] <smaug____>
annevk: just trying to understand why the backwards incompatible change

[10:11:52.0000] <smaug____>
without apparently any real good reason

[10:12:21.0000] <annevk>
smaug____: I think sicking things we can still make it, it would make this multimap consistent with URLSearchParams and Headers, and it would help make new APIs around <input type=file> more consistent

[10:13:36.0000] <smaug____>
ahaa, that is the background

[10:13:53.0000] <smaug____>
but it takes out a useful feature from the API

[10:13:57.0000] <smaug____>
blob + filename

[10:14:40.0000] <annevk>
smaug____: you should use new File for that

[10:14:45.0000] <smaug____>
(or one is then forced to use file+blob)

[10:15:11.0000] <annevk>
note that blob + filename changes object identity to file in the old API

[10:15:42.0000] <smaug____>
object identity?

[10:15:47.0000] <smaug____>
how so

[10:15:55.0000] <smaug____>
the blob is still blob

[10:16:17.0000] <annevk>
but FormData holds a File

[10:16:51.0000] <smaug____>
oh, it didn't hold blob+filename

[10:16:56.0000] <annevk>
right

[10:16:56.0000] <smaug____>
the old API

[10:17:00.0000] <annevk>
right

[10:17:17.0000] <smaug____>
that sounds like a bug in the API

[10:17:40.0000] <smaug____>
but probably doesn't matter much

[10:17:46.0000] <annevk>
yeah, that's why we killed it

[10:18:23.0000] <smaug____>
well, killing it would mean storing blob + filename

[10:18:48.0000] <smaug____>
but now passing blob + filename isn't possible anymore

[10:19:13.0000] <annevk>
right, if you want a filename, use File


2015-05-10
[12:54:54.0000] <smaug____>
jgraham: remind me where the wpt tests are in github

[12:55:15.0000] <smaug____>
(the ones for canvas especially )

[13:03:32.0000] <smaug____>
https://github.com/w3c/web-platform-tests/ it is, I think


2015-05-11
[08:57:49.0000] <Domenic>
JakeA: wanderview_PTO: Bluebird put up their 3.0 cancelation docs. https://petkaantonov.github.io/bluebird/web/docs/api-reference.html#cancellation

[08:59:42.0000] <JakeA>
Domenic: any info on why they went for "don't care" rather than abort?

[09:00:08.0000] <Domenic>
JakeA: the usual reason, errors are annoying. You can still see it with .finally though. It's basically exactly what you/we were planning.

[09:00:45.0000] <JakeA>
Domenic: holy shit, even down to onCancel taking a function, this is unbelievably close

[09:01:01.0000] <Domenic>
Heh yeah

[09:01:08.0000] <Domenic>
Still not a big fan of that, but shrug

[09:02:05.0000] <JakeA>
Your idea of returning a function was fine too, I don't have strong feelings either way

[09:02:23.0000] <Domenic>
I gotta get back to working on that soon i guess

[09:02:33.0000] <JakeA>
Curious to find out how they deal with resolved but not settled promises too

[09:02:49.0000] <Domenic>
You should open an issue asking the exact question

[09:03:01.0000] <Domenic>
I don't recall enough of the details to relay it

[09:03:13.0000] <JakeA>
I'll do that now

[09:03:39.0000] <JakeA>
Domenic: I promised anne something by mid-June, I'm hoping to get untangled with I/O video work by the end of this week, so I can actually do some proper work after that

[09:13:14.0000] <JakeA>
Domenic: https://groups.google.com/forum/#!topic/bluebird-js/Pc7TCuEo3B4

[13:26:15.0000] <JonathanNeal>
Is there a specific document for ADA compliance of web sites that differs from, say, Section 508?

[13:27:40.0000] <caitp->
seems like it would be hard to regulate without documentation :x

[15:01:32.0000] <Domenic>
rniwa: if we said custom elements could define their own constructor, are you willing to run those author-defined constructors during parsing, or...?

[15:01:39.0000] <Domenic>
(also during cloning)

[15:21:49.0000] <rniwa>
Domenic: we have to, right?

[15:22:10.0000] <rniwa>
Domenic: even in Dimitry's design of having a constructor having a callback

[15:22:17.0000] <rniwa>
Domenic: we'd still have to run it during parsing

[15:22:22.0000] <rniwa>
Domenic: i don't think there's a way around it

[15:22:32.0000] <Domenic>
rniwa: no, not in Dmitry's design. In Dmitry's design you just run the HTMLElement constructor like you currently are.

[15:22:48.0000] <rniwa>
Domenic: yeah but then you'd have to call user defined callback right after that

[15:22:59.0000] <Domenic>
Right, after parsing, but before returning control to the user

[15:23:10.0000] <rniwa>
Domenic: I don't think that makes sense.

[15:23:19.0000] <Domenic>
It's the same as createdCallback is today

[15:23:24.0000] <rniwa>
Domenic: that exposes "uninitialized" elements

[15:23:43.0000] <Domenic>
It does indeed expose elements that have not had their createdCallback run

[15:23:48.0000] <rniwa>
Domenic: because all those custom element callbacks would see other elements that have not been initialized

[15:24:01.0000] <rniwa>
Domenic: that's precisely why createdCallback is broken.

[15:24:07.0000] <Domenic>
If we don't allow that then we have to run constructors sync during parsing, before the parser continues creating more elements

[15:24:21.0000] <Domenic>
It seems fine. Don't mess with your siblings while you're being created.

[15:24:26.0000] <Domenic>
But I understand if you disagree.

[15:24:35.0000] <Domenic>
It just seems like the better solution than introducing author code into the parser.

[15:24:54.0000] <rniwa>
Domenic: I just don't understand what the problem of introducing author code into the parser is

[15:25:00.0000] <rniwa>
Domenic: we already do this for sync script elements

[15:25:12.0000] <rniwa>
Domenic: what's so difficult about running script there?

[15:25:22.0000] <rniwa>
Domenic: I do see that cloning case is hard

[15:25:32.0000] <Domenic>
Hmm why is cloning different than parsing

[15:25:33.0000] <rniwa>
but I don't think invoking script during normal parsing is hard at all

[15:25:45.0000] <rniwa>
Domenic: because there's a bunch of UA internal code that clones nodes internally

[15:25:47.0000] <rniwa>
Domenic: e.g. editing

[15:25:52.0000] <rniwa>
Domenic: and a bunch of Range methods

[15:25:55.0000] <rniwa>
and a few other places

[15:26:04.0000] <rniwa>
Domenic: Gecko for examples clones the document for priting

[15:26:05.0000] <Domenic>
sure, but there's a bunch of UA internal code that parses too, right?

[15:26:07.0000] <Domenic>
hmm

[15:26:14.0000] <rniwa>
Domenic: I don't think so.

[15:26:19.0000] <rniwa>
Domenic: if you're talking about innerHTML, sure

[15:26:34.0000] <rniwa>
Domenic: or copy/paste

[15:26:44.0000] <rniwa>
Domenic: but those things can already run scripts anyway so there's nothing new

[15:27:13.0000] <Domenic>
Well if WebKit is OK running author code during parse and cloning then that's good to know.

[15:27:29.0000] <Domenic>
I got the impression Gecko wasn't, but I'm not sure.

[15:29:28.0000] <rniwa>
Domenic: they're not okay with running the code during cloning

[15:29:44.0000] <Domenic>
Welp.

[15:30:15.0000] <Domenic>
During, or in reaction to?

[15:30:29.0000] <Domenic>
I guess they must be OK with in reaction to since they propose clonedCallback

[15:33:02.0000] <rniwa>
Domenic: during cloning

[15:33:10.0000] <rniwa>
Domenic: I'm not sure if they want to add clonedCallback anymore

[15:33:15.0000] <rniwa>
Domenic: at least in v1

[15:33:20.0000] <Domenic>
Yeah it's listed as v2

[15:33:34.0000] <Domenic>
It's pretty obvious though, gotta have it to emulate native elements

[15:34:58.0000] <smaug____>
Domenic: webkit is ok to run random scripts during cloning?

[15:35:24.0000] <Domenic>
That was my interpretation of rniwa above, but I might be reading too much into it.

[15:35:41.0000] <rniwa>
smaug____: I need look into it

[15:35:53.0000] <rniwa>
smaug____: we might just need to punt cloning in v1 and say it'll be broken once cloned

[15:36:03.0000] <smaug____>
right

[15:36:14.0000] <smaug____>
cloning is really hard

[15:36:36.0000] <Domenic>
i don't think that's feasible

[15:36:37.0000] <smaug____>
anything can happen when a script runs

[15:36:46.0000] <rniwa>
Domenic: what is not feasible?

[15:36:56.0000] <Domenic>
cloning is fundamental to the core issues of custom elements; punting on cloning is like punting on constructors.

[15:37:15.0000] <Domenic>
(which, y'know, Chrome did, but I'm not happy about.)

[15:37:34.0000] <smaug____>
node (the original or clone) gets adopted to another document, window is closed, node is moved to another place in the document, etc..

[15:42:06.0000] <aklein>
punting cloning would also punt users of <template>

[15:42:21.0000] <aklein>
I think that'd be undesireable

[16:03:15.0000] <hober>
if "punting cloning" means "behaves like <canvas> when cloned," i don't think it's all that bad.

[16:15:05.0000] <aklein>
hober: you'd have to ask rniwa what he meant, but I assumed it meant "don't run the element's constructor when it's cloned", which is not what happens to <canvas>


2015-05-12
[17:05:32.0000] <rniwa>
aklein, smaug____, Domenic: indeed, it's hard but i'm hoping that we'll be able to find a way.

[17:05:57.0000] <rniwa>
it would really suck if custom element's contract was different from builtin such that you could never use custom element API to implement a builtin element for example

[03:49:08.0000] <hsivonen>
contemplating replying to Shane on public-html about EPUB and RDFa

[04:11:22.0000] <Ms2ger>
That does not sound like a good idea

[04:15:11.0000] <SteveF_>
Ms2ger: it's a resonable idea to provide counter arguments to ARIA is a good vehicle to allow RDFa EVERYWHERE in HTML

[04:16:15.0000] <SteveF_>
Domenic: Annevk: thoughts on https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0622.html ?

[05:58:34.0000] <Domenic>
SteveF_: probably change it from role="button" to behavior="button" to get past the compat hurdle. Then, spend a lot of time speccing exactly what that means, cross-platform. Doing that will be 80% of the way to exposing the individual primitives (since you've now specced them); ideally then do the extra 20%, but that's optional I guess.

[06:02:20.0000] <SteveF_>
Domenic: sounds like something beyond my technical capabilities, I was looking for a relatively simple way to extend current label behaviour to custom buttons etc. on a somewhat related note this may be of interest if you haven't seen https://wiki.mozilla.org/Accessibility/WebAccessibilityAPI

[06:02:45.0000] <SteveF_>
stuff being worked on by surkov from mozilla

[06:03:42.0000] <Domenic>
Haven't seen; very interesting.

[06:03:50.0000] <SteveF_>
some discussion of above on Google browser acc list https://groups.google.com/d/msg/browser-accessibility-dev/7M9fUOQmkc4/Ix2x-7m8EZsJ


2015-05-13
[08:09:24.0000] <Ms2ger>
Who knows about CORS?

[08:16:38.0000] <jgraham_>
odin and annevk (neither are here)

[10:24:19.0000] <Ms2ger>
So dbaron is on tag, huh

[14:26:34.0000] <Domenic>
Yessss xml:base is removable in Blink

[14:27:01.0000] <jamesr___>
we think it's removable

[14:27:16.0000] <jamesr___>
whether it actually is remains in a quantum state for some time :)

[14:28:00.0000] <Domenic>
Did you see the latest post?

[14:28:17.0000] <Domenic>
0 on the use counter, for a month

[14:28:33.0000] <aklein>
it didn't do very much in Blink, I'm not surprised it went unused

[16:36:42.0000] <rniwa>
weinig: the patch is nice!

[16:36:52.0000] <rniwa>
weinig: modernized code is much easier to read & more fun to hack on


2015-05-14
[05:30:16.0000] <Ms2ger>
"XML Interfaces to the Internet of Things with XForms"

[06:26:17.0000] <TabAtkins>
Ms2ger: Why you gotta tease us like that?

[06:28:17.0000] <gsnedders>
TabAtkins: Ms2ger just knows what you like to hear first thing in the mornin'

[06:29:02.0000] <TabAtkins>
Well, he's not wrong.

[06:30:41.0000] <gsnedders>
He's sufficiently advanced AI, of course he's not wrong.

[06:31:13.0000] <TabAtkins>
I've seen him, and I don't think it was a skinvelope (unlike bz's remote-operated body).

[06:31:33.0000] <TabAtkins>
Wait, is bz or bzed bzbarsky?

[06:32:24.0000] <jgraham>
bz

[06:33:55.0000] <gsnedders>
Pretty sure people having "seen" either Ms2ger or bz is just a conspiracy to make people believe they're human.

[06:34:04.0000] <gsnedders>
Ms2ger doesn't even have a real name!

[06:34:54.0000] <BigPants>
Hey guys, I asked this a few days back but I don't think a lot of people were around... what do you think of exposing the dirty flag on input fields? Is that something that's been discussed before?

[06:36:30.0000] <BigPants>
Maybe there's a better place to ask?

[06:39:22.0000] <gsnedders>
BigPants: here and the mailing list are probably the best places; I don't think it's been discussed before, but it needs though as to whether there are any subtle implications of doing so. What's the use-case for exposing it?

[06:45:52.0000] <BigPants>
gsnedders: It would be a lot easier to make use of something like that than to hack together your own dirty checking in javascript (or use a library that does it for you) if you want to submit only the fields in a form that's been changed. Big forms where users change only minor details benefit quite a lot from only sending dirty fields

[07:44:53.0000] <wanderview>
Domenic: ping

[07:49:30.0000] <wanderview>
Domenic: is there a solution for the chained resolved promises causing excessive memory pressure?

[07:50:12.0000] <wanderview>
Domenic: I am now seeing about a 10% penalty promise returning read() vs sync read()... but I changed my test to chain promises together

[07:55:50.0000] <wanderview>
Domenic: actually, I added an unchained path to compare, and I see the 10% penalty regardless... hmm

[08:16:47.0000] <Domenic>
wanderview: one of the Bugzilla patches you linked me to was a mitigation, I am pretty sure ... Chrome also has a mitigation I believe, although a less spec-compliant one :-/

[08:17:16.0000] <wanderview>
Domenic: well, it seems unrelated to the chaining... let me push the code to repo and let you look at it

[08:17:53.0000] <wanderview>
Domenic: sample output I am seeing on my desktop here: https://pastebin.mozilla.org/8833452

[08:18:13.0000] <wanderview>
async cases have lower throughput and about a 10ms latency penalty there

[08:18:17.0000] <wanderview>
I haven't tried with bluebird yet

[08:19:36.0000] <wanderview>
Domenic: look at the various Pump classes in here and tell me if I'm doing something stupid:  https://github.com/wanderview/streams-time-echo/blob/master/client.js

[08:21:30.0000] <Domenic>
Probably doesn't matter much but while (chunk) isn't exactly reflective of how the sync API would have to work... it'd have to be a while (self._parser.state === "readable"), with state being a getter

[08:23:31.0000] <Domenic>
Similarly async is using falsy/truthy chunks instead of { value, done }

[08:24:14.0000] <Domenic>
although actually async isn't testing truthiness of the chunks; the asymmetry there is confusing to me.

[08:25:11.0000] <wanderview>
Domenic: the truthiness test was just for backpressure signal... which the async gets via the promise...

[08:25:14.0000] <Domenic>
executeTestList is broken, you can't return from inside `new Promise`

[08:25:35.0000] <Domenic>
wanderview: ah ok I thought it was done-ness signal

[08:25:45.0000] <Domenic>
wanderview: but you need to allow falsy chunks anyway, so you need a separate .state property

[08:25:47.0000] <wanderview>
Domenic: I'm using the web socket state for close signal

[08:26:39.0000] <wanderview>
hmm, let me fix executeTestList

[08:27:00.0000] <Domenic>
not sure why it's promise-returning at all honestly

[08:29:16.0000] <wanderview>
yea, it doesn't need to be

[08:30:57.0000] <wanderview>
Domenic: I seem to get bimodal results... I wonder if the lower mode is just hitting that pathological stream chunking I saw before

[08:37:29.0000] <wanderview>
Domenic: ok... things seem more equivalent now on my desktop... let me test on mobile

[08:37:37.0000] <wanderview>
I assume there is a canary for android?

[08:38:34.0000] <Domenic>
wanderview: no, but there's a dev, which will be just a week behind at most

[08:39:42.0000] <wanderview>
Domenic: got it... I'll have to sort out the IPs on my network to connect my mobile to the test server

[08:39:57.0000] <Domenic>
Can you push the code changes?

[08:40:10.0000] <wanderview>
Domenic: sure... I only fixed the executeTestList() thing

[08:40:17.0000] <Domenic>
Ah OK

[08:40:34.0000] <Domenic>
Is that what changed the results you think?

[08:40:45.0000] <wanderview>
I don't know... its possible

[08:41:03.0000] <wanderview>
it seems very sensitive

[08:41:09.0000] <wanderview>
I also added a bluebird.html

[08:41:22.0000] <Domenic>
Oh nice

[08:41:41.0000] <wanderview>
Domenic: but even with native promises I don't see much difference: https://pastebin.mozilla.org/8833455

[08:42:16.0000] <wanderview>
Domenic: I'm going to re-run the tests on a more idle machine without a VM, etc... could be noise from other stuff on my desktop

[08:42:21.0000] <wanderview>
will do all that after lunch

[08:43:05.0000] <wanderview>
Domenic: one difference is now I'm running with devtools closed... maybe it was enabling some debugging in promises that was penalizing things

[08:43:41.0000] <Domenic>
Oh yeah it probably was

[08:44:08.0000] <Domenic>
I don't know the details but I do know devtools has a lot of hooks into promises and I assume that they're smart enough to turn those off when devtools is closed

[08:44:16.0000] <Domenic>
or at least some of them

[09:02:38.0000] <Ms2ger>
So node.deleteData(2, -1) crashes Servo \o/

[09:03:07.0000] <jgraham>
Ms2ger: Which kind of crashes?

[09:24:56.0000] <Ms2ger>
Overflow

[09:25:03.0000] <jgraham>
Ah

[09:25:15.0000] <Ms2ger>
Which is all hardware limitations, clearly :)

[09:25:37.0000] <jgraham>
I was just checkin it wasn't something more untoward :)

[09:34:56.0000] <gsnedders>
Ms2ger: what overflows? the -1?

[09:35:30.0000] <gsnedders>
oh you're talking about this in #servo

[09:35:33.0000] <Ms2ger>
Yeah

[09:35:52.0000] <Ms2ger>
-1 is wrapped to 2**32-1, and then the sum overflows

[13:12:00.0000] <smaug____>
dglazkov: sorry, forgot to answer to custom elements doodle

[13:12:19.0000] <smaug____>
(in theory july 21 should be ok)

[13:20:49.0000] <dglazkov>
smaug____: \o/

[13:21:32.0000] <wanderview>
Domenic: I think whatever bug was causing huge memory issues in chrome with your streams demo is causing similar havoc with my time echo benchmark... it basically blows up with an OOM on my mac laptop

[13:21:39.0000] <wanderview>
runs fine on my windows desktop

[13:24:44.0000] <Domenic>
O_o

[13:25:09.0000] <Domenic>
You're not even using Chrome streams, right?

[13:25:15.0000] <Domenic>
Just web sockets?

[13:25:19.0000] <wanderview>
Domenic: remember the chained promise bug where they said it only blew up memory on mac... I seem to be getting the same problem

[13:25:34.0000] <Domenic>
I ... I guess ....

[13:25:39.0000] <wanderview>
Domenic: I am using chrome streams to read from the Response... I only use web sockets to upload back to the node.js server

[13:25:56.0000] <wanderview>
or I am doing something stupid

[13:26:04.0000] <Domenic>
Ah OK I missed that

[13:26:16.0000] <Domenic>
Maybe ... maybe the GC is bad on mac?

[13:26:30.0000] <wanderview>
I don't know... I'm going to skip mac and just try my android device

[13:26:30.0000] <Domenic>
Or the streams I guess... so strange.

[13:26:54.0000] <wanderview>
it could also be a bug in my server... what I ctrl-z the server and memory keeps climbing in chrome... its very weird

[13:27:05.0000] <wanderview>
sampling the process shows a bunch of string operations being done

[13:30:54.0000] <wanderview>
Domenic: I don't understand what could be different on mac... GC and stuff seems like it should be the same... maybe some IPC problem specific to streams and mac?

[13:31:36.0000] <Domenic>
Yeah ... Tokyo should be waking up in a few hours... I guess this might be worth filing a crbug for?

[13:31:42.0000] <Domenic>
String operations ... strange ...

[13:32:05.0000] <wanderview>
I didn't look at the sample long...

[13:34:34.0000] <jsbell>
Domenic: Are transform streams to the point where we should discuss how to bolt them onto TextEncoder/Decoder ?

[13:35:30.0000] <Domenic>
jsbell: no :(. they are still languishing somewhat unloved. I gotta kick the tires on writable and transform...

[13:35:42.0000] <Domenic>
I should try to find some Chrome feature that requires writable so we can whip them into shape

[13:37:58.0000] <jsbell>
Domenic: no worries; ping me if the status changes (and/or I'll continue to low frequency poll)

[13:41:55.0000] <Domenic>
for sure

[14:10:53.0000] <wanderview>
Domenic: I see a penalty for promise read() on my nexus5 with native promises... but its pretty equivalent with bluebird

[14:12:57.0000] <wanderview>
its hard to make this benchmark reliable with the body stream without back pressure... I have to implement my own back pressure mechanism, but I risk deadlock then if chrome decides to buffer things right as I'm doing backpressure

[14:25:10.0000] <wanderview>
gah.. or not...  these tests are so sensitive

[14:33:40.0000] <wanderview>
Domenic: I ran some more tests and it looks like a 5% penalty for promise read vs sync read... I'll post data in the github issue later... I'm not sure if that is a big enough difference to worry about

[14:33:50.0000] <wanderview>
/me runs to dinner...

[14:35:41.0000] <Domenic>
wanderview: thanks for all the work!!

[14:35:56.0000] <wanderview>
oh... and that penalty only shows for mobile... desktop is fast enough you can't see it with this test

[15:28:14.0000] <jsbell>
The IndexedDB spec is so old it cites "geocities.com" as an example. (Will definitely leave that in for v2 because nostalgia)


2015-05-15
[00:56:27.0000] <Ms2ger>
I like how https://lists.w3.org/Archives/Public/public-review-announce/2015May/0001.html contains JS

[06:51:28.0000] <smaug____>
has there been a proposal to add an option to requestAnimationFrame to call callbacks async after the animation frame

[06:52:08.0000] <smaug____>
so, requestionAnimationFrame(function() { /* do something after painting*/}, { runCallback: "afterAnimationFrame"} )

[06:53:01.0000] <smaug____>
/me files a bug

[06:55:18.0000] <caitp->
but wouldn't the api be so much more elegant if requestAnimationFrame returned a promise that let you add post-animation-frame behaviour to /* and the promise-y nightmare-bikeshed-discussionpocalypse begins :p */

[06:58:36.0000] <smaug____>
/me suggesting using Promise for anything...

[06:58:41.0000] <smaug____>
the world hasn't ended yet

[06:59:27.0000] <smaug____>
anyhow, I certainly don't want to make existing function to start to return Promise

[07:00:07.0000] <smaug____>
and requestAnimationFrame already returns the identifier

[07:01:57.0000] <caitp->
hah

[07:02:24.0000] <caitp->
yeah I know, but it sounds like the kind of thing that will probably come up

[07:02:37.0000] <caitp->
for better or for worse

[07:04:06.0000] <smaug____>
well, that is kind of separate thing anyhow

[07:05:02.0000] <smaug____>
I guess it is possible that there will be requestAnimationFrame which returns a Promise which is resolved right before browser updates the graphics stuff

[07:14:09.0000] <smaug____>
Ms2ger: do you recall where you saw someone talking about mozPressure

[08:42:26.0000] <Ms2ger>
smaug____, https://twitter.com/jlongster/status/599030823388610560

[08:44:51.0000] <smaug____>
ah, that

[08:45:36.0000] <smaug____>
Ms2ger: I think .pressure should work there

[08:45:44.0000] <smaug____>
if it doesn't work, we should fix that

[08:45:57.0000] <Ms2ger>
Yeah, I didn't know about .pressure

[09:42:20.0000] <gsnedders>
Does anyone have good stats for SCTP connectivity?

[11:41:47.0000] <TabAtkins>
Hmm, Ms2ger isn't around, for once.

[11:42:16.0000] <TabAtkins>
Well anyway, Ms2ger, I reported the public-review-announce bug to plh (it's his tool that sends those mails) and he fixed it apparently.

[13:12:35.0000] <wanderview>
Domenic: posted my benchmarking results: https://github.com/whatwg/streams/issues/320#issuecomment-102513812

[13:16:56.0000] <wanderview>
trevnorris: ^^^

[13:19:28.0000] <trevnorris>
wanderview: thanks. mind if I add a basic callback style benchmark that does the same thing for comparison?

[13:20:06.0000] <trevnorris>
also, what does MBP stand for?

[13:20:28.0000] <wanderview>
trevnorris: your looking at the wrong tab... the new benchmark is on the second tab

[13:20:31.0000] <wanderview>
MBP is macbook pro

[13:20:42.0000] <trevnorris>
heh. thanks. :)

[13:20:54.0000] <wanderview>
I did not use my mac there because chrome fetch body stream seems to have trouble on mac for some reason

[13:21:24.0000] <wanderview>
trevnorris: happy to accept pull requests.... I put the test repo in the tab at the bottom

[13:21:53.0000] <wanderview>
note that trying to do a callback itnerface in user space is hard without hitting the setTimeout() throttling... I guess you can use postMessage() in some browsers, though

[13:22:03.0000] <trevnorris>
awesome. thanks.

[13:28:17.0000] <trevnorris>
wanderview: do I run those by starting the server and then just viewing index.html?

[13:28:55.0000] <wanderview>
trevnorris: yes... and then you should start getting results about 10 seconds later... although sometimes the test stalls out

[13:29:03.0000] <wanderview>
its not the most stable test

[13:29:30.0000] <wanderview>
trevnorris: and you have to use chrome canary or dev edition to get fetch body stream

[13:35:39.0000] <trevnorris>
wanderview: okay. so to clarify, none of the tests run w/o canary?

[13:36:25.0000] <wanderview>
trevnorris: the second tab in the google doc that are the result of this repo require google canary or dev channel: https://github.com/wanderview/streams-time-echo

[13:36:34.0000] <wanderview>
because it uses Response.body.getReader()

[13:37:14.0000] <trevnorris>
okay. I just keep getting a 503 when I point it to localhost:5000/

[13:38:14.0000] <trevnorris>
"Cannot read property 'getReader' of undefined "

[13:40:19.0000] <trevnorris>
eh? "Chrome Canary is currently not available on the linux platform." well that bites.

[13:41:38.0000] <paul_irish>
yah.. :/ https://download-chromium.appspot.com/ will get you a build that's ~an hour old, though it won't auto-update.

[13:44:01.0000] <trevnorris>
paul_irish: just tried. segfaults on startup.

[13:44:27.0000] <trevnorris>
"[18985:18985:0515/144128:FATAL:browser_main_loop.cc(178)] Running without the SUID sandbox!"

[13:45:46.0000] <wanderview>
trevnorris: is there a beta or dev channel build for linux?

[13:45:50.0000] <wanderview>
those might work

[13:50:10.0000] <trevnorris>
trying them now

[13:59:23.0000] <trevnorris>
wanderview: good idea. running the dev release now. though still getting a 503 from the server.

[13:59:47.0000] <wanderview>
trevnorris: the server only lets one test run at a time... if it tried to start before and you errored out you probably need to restart the server

[13:59:57.0000] <trevnorris>
ah. okay

[14:00:06.0000] <wanderview>
its not very robust

[14:00:56.0000] <trevnorris>
awesome. seems to be working. you said about 10 seconds?

[14:02:13.0000] <trevnorris>
must have ran the tests. cpu spun up and everything. though it never gets past "Starting..."

[14:02:57.0000] <wanderview>
trevnorris: it may have stalled out... I've just been restarting the server

[14:03:02.0000] <wanderview>
and retrying when that happens

[14:03:03.0000] <wanderview>
it sucks

[14:03:16.0000] <trevnorris>
heh. okay.

[14:03:20.0000] <wanderview>
but this is a throw-away thing so I didn't spend a long time tracking it down

[14:04:08.0000] <trevnorris>
sure. makes total sense.


2015-05-18
[20:28:33.0000] <annevk>
Domenic: executing script while parsing is okay, re custom elements

[20:28:40.0000] <annevk>
Domenic: the problem is executing script while cloning

[07:44:42.0000] <JakeA>
In specs, if I invoke https://html.spec.whatwg.org/multipage/browsers.html#navigate, how can I capture the error thrown at https://html.spec.whatwg.org/multipage/browsers.html#exceptions-enabled and turn it into a promise rejection?

[08:40:48.0000] <Sarunas>
Hello ^^

[08:42:19.0000] <Sarunas>
Can anyone suggest me somewhere to learn DOM ? In javascript, i am thinking about reading https://dom.spec.whatwg.org/ not sure if it will be enough though.

[08:43:39.0000] <JakeA>
Sarunas: https://developers.google.com/web/fundamentals/ and https://developer.mozilla.org/en-US/ are more developer friendly

[08:45:55.0000] <Sarunas>
JakeA: Thanks! I am reading a book about JS, and as it covered chapter about DOM, i realised it didn't quite got everything, and it is very important part of developing with JS (I know that DOM isn't a JS standard haha ), but it's still very important. So i decided to reach out for help .

[08:51:37.0000] <caitp>
the various DOM specs, and the WebIDL spec, are very good to read, but probably not very helpful for beginners

[08:51:55.0000] <caitp>
still if you can read IDL, you can pretty much figure out how it's supposed to work

[08:52:06.0000] <caitp>
IDL is very self-documenting, except for all the crazy bits =)

[08:53:14.0000] <Sarunas>
caitp: IDL specs ?are you talking about w3.org ? I am quite new to these things, so I am not sure haha

[08:54:21.0000] <caitp>
IDL is a language for defining interfaces, they're informative about what the API is, and partially explains behaviour

[08:55:29.0000] <caitp>
"interfaces" being, for example, a DOM node, or XMLHttpRequest, or similar

[08:57:13.0000] <caitp>
anyways, they're certainly helpful for the basics of "what does this method take, what is the return value, what operations can I perform on this type" etc

[08:57:25.0000] <Sarunas>
Oh, now i think I get it! I will look into it ! Thank you!

[13:11:03.0000] <encryptd_fractal>
purpl

[13:39:49.0000] <wanderview>
JakeA: I'm really enjoying the trained to thrill photos today

[14:53:50.0000] <JakeA>
wanderview: huh, it's appearing broken for me in Chrome, will check it out

[15:05:45.0000] <Domenic>
oh snap, does trained to thrill only work in firefox now!? the tables have turned!!!

[16:34:18.0000] <wanderview>
Domenic: JakeA: I had to patch firefox nightly to support skipWaiting()... but it seemed to work after that... I just liked the graffiti pictures that were showing :-)

[16:34:42.0000] <wanderview>
(and enabled serviceWorkers again as we have it temp disabled in nightly)

[16:41:13.0000] <JakeA>
wanderview: i haven't checked it out yet, what's the debugging story?

[16:41:39.0000] <wanderview>
JakeA: for trained to thrill?  the only error I saw was we didn't support skipWaiting()

[16:41:49.0000] <wanderview>
JakeA: it won't load at all for you?

[16:42:15.0000] <JakeA>
wanderview: oh, haven't looked yet, just asking what the state of devtools + SW is in Firefox

[16:42:31.0000] <JakeA>
As in, are console messages piped through, can I set breakpoints? Etc etc

[16:42:36.0000] <wanderview>
JakeA: oh.... still less than we would like unfortunately :-(

[16:42:54.0000] <wanderview>
JakeA: we have console messages going to the browser console (shared with all windows)

[16:43:01.0000] <wanderview>
JakeA: and we have an about:serviceworkers page

[16:43:37.0000] <wanderview>
JakeA: but our js debugger for workers (not just SW) is still in development... its quite a task to move it from main thread only to support workers I guess

[16:45:24.0000] <wanderview>
JakeA: this is the debugger issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1003097

[16:45:25.0000] <JakeA>
wanderview: well, console support goes a long way. Dev tools are perpetually less than we would like

[16:45:34.0000] <JakeA>
Until they can write everything for us

[16:45:39.0000] <wanderview>
JakeA: we also have work in progress to support Cache API in our storage explorer thing

[16:45:48.0000] <JakeA>
Ohh cool

[16:45:56.0000] <wanderview>
not sure how close that is

[16:46:05.0000] <wanderview>
JakeA: are you blogging about this stuff again?

[16:48:48.0000] <JakeA>
wanderview: I don't have anything planned yet, got a few other things in my "queue". Although, if we were to do a joint post with Mozilla, who'd be best to speak to?

[16:48:55.0000] <wanderview>
I think someone on our team was going to write a blog about our dev tools

[16:49:21.0000] <wanderview>
JakeA: uh... let me ask at our wednesday meeting... I can't remember who took that

[16:50:15.0000] <JakeA>
No rush, Google I/O is in between me & doing anything of value

[16:51:16.0000] <wanderview>
I'll let you know what I hear... have fun with the conf

[16:51:22.0000] <wanderview>
/me goes to watch Arrow...


2015-05-19
[17:09:07.0000] <Domenic>
Arrow was pretty good :D

[18:14:00.0000] <eik>
Hi, In http://www.w3.org/TR/html5/embedded-content-0.html#update-the-image-data talks about update the image data algorithm. I have several questions regarding it - How is this algorithm invoked? Does UI task source enqueue a task to invoke the algorithm? - In step 8 it says that asynchronously await a stable state. What is a stable state in this case? Why can not run the algorithm till step 13 and say run the remaining steps asynchrono

[06:33:13.0000] <wanderview>
Domenic: we're still on season 1

[09:15:39.0000] <Domenic>
wanderview: why is it OK to store an empty body in the cache but not to store a body that's been read-to-the-end?

[09:17:13.0000] <wanderview>
Domenic: maybe a question for JakeA or annevk, but IMO a drained Response is not the same as a Response with no body... the drained Response does not conceptually capture the true network response any more

[09:18:03.0000] <Domenic>
Hmm, that fits very poorly with streams.

[09:20:52.0000] <wanderview>
Domenic: I don't follow... why do you say that?

[09:21:21.0000] <Domenic>
wanderview: because of what I wrote in the bug ... " If I give you a stream I've read all the chunks from (and thus happens to be closed), that should be the same as some random stream that was never read from but is also closed (because nothing was ever enqueued into it). They behave the same in every respect so there's no point in introducing something new

[09:21:21.0000] <Domenic>
to differentiate them."

[09:21:41.0000] <wanderview>
Domenic: without the "don't set used flag if the stream is empty" optimization its all very easy... Cache API looks to see if the stream is closed... if it is, then its "used"

[09:22:03.0000] <Domenic>
wanderview: right. That's why I was wondering if we could reject for empty bodies.

[09:22:06.0000] <wanderview>
Domenic: the complexity only comes in trying to special case the "stream is closed, but it doesn't matter because it was empty anyway" condition

[09:22:13.0000] <Domenic>
Exactly.

[09:22:38.0000] <wanderview>
Domenic: which unfortunately is already out there in fetch and seems like something reasonably needed for API ergonomics

[09:22:44.0000] <Domenic>
I don't understand why

[09:22:57.0000] <wanderview>
why it improves ergonomics?

[09:23:05.0000] <Domenic>
Is it expected to be common to say res.text() then cache.put(res) but only if res.text() returned ""?

[09:24:19.0000] <wanderview>
Domenic: the ergonomics mainly come from being able to reuse Request objects... so var req = new Request(url); fetch(req); fetch(req); cache.add(req);

[09:24:33.0000] <wanderview>
you can reuse the same request for multiple calls that consume if there are no bodies

[09:24:39.0000] <wanderview>
if there is no body

[09:24:45.0000] <Domenic>
wanderview: how can you tell there's no body.

[09:25:05.0000] <wanderview>
without this optimization then you would need:  var req = new Request(url); fetch(req.clone()); fetch(req.clone()); cache.add(req.clone());

[09:25:15.0000] <wanderview>
Domenic: if its a GET request, there is no body

[09:25:19.0000] <wanderview>
for example

[09:25:29.0000] <Domenic>
i see

[09:25:31.0000] <wanderview>
but I agree, there is no easy way to inspect it

[09:25:36.0000] <wanderview>
.body.empty :-)

[09:25:40.0000] <Domenic>
maybe null body vs. empty body makes more sense for GET requests

[09:25:43.0000] <Domenic>
.body === null

[09:25:57.0000] <wanderview>
Domenic: I don't think that would be very nice for .body.getReader()

[09:26:03.0000] <Domenic>
I think it would

[09:26:11.0000] <wanderview>
now .body.getReader() always needs a if (.body) check first to avoid throwing?

[09:26:14.0000] <wanderview>
ugh

[09:26:15.0000] <Domenic>
Yes

[09:26:18.0000] <Domenic>
Same as fetch()

[09:26:28.0000] <Domenic>
You're saying people will do multiple fetch()s because they know there's no body

[09:26:36.0000] <wanderview>
I thought we were trying to unify null/empty concepts... not make it even harder to work with

[09:26:37.0000] <Domenic>
I'm saying people will not do .body if they know there's no body

[09:27:13.0000] <Domenic>
It's the same argument

[09:28:21.0000] <wanderview>
Domenic: what does .body evaluate to if new Request(url, { body: '' })?

[09:28:40.0000] <Domenic>
wanderview: an empty stream. IMO that should not be multi-fetchable().

[09:29:03.0000] <wanderview>
Domenic: I'm not sure what the current spec does with that... might not be multi-fetchable

[09:29:57.0000] <wanderview>
Domenic: I'm ok with this suggestion... but it seems tyoshino does not like approach

[09:30:06.0000] <wanderview>
from previous github comments

[09:31:26.0000] <Domenic>
I will try to outline...

[09:35:22.0000] <wanderview>
Domenic: thanks, I have to run to lunch but will be back later

[09:50:54.0000] <yhirano_>
Domenic, in the past discussion you wanted to allow calling text() on a partially consumed response. Is it still your strong preference?

[09:52:07.0000] <Domenic>
yhirano_: if it can simplify things a lot I could give it up. But I think my proposal in https://github.com/yutakahirano/fetch-with-streams/issues/37#issuecomment-103584177 lets us keep that and is still sane.

[09:54:04.0000] <terinjokes>
hrm, packaging-on-the-web might be annoying to prollyfil, since each part can have a different content-encoding, so one would have to ship all of iconv

[09:54:10.0000] <terinjokes>
at least, from my reading

[09:55:58.0000] <Domenic>
terinjokes: only support utf8

[09:56:00.0000] <yhirano_>
Sorry I don't understand. Won't fetch(new Request(url, body: '')) fail with your proposal?

[09:56:35.0000] <Domenic>
yhirano_: hmm yes, it will as written. that seems bad. i meant it to work once but not twice.

[10:55:41.0000] <wanderview>
Domenic: why will that one fail?

[10:56:22.0000] <Domenic>
wanderview: haven't read the 11 responses since I got back, but, off the bad body will be a closed stream, and in my proposal fetch()ing a closed stream will fail.

[10:56:29.0000] <Domenic>
s/bad/bat

[10:56:53.0000] <wanderview>
Domenic: I thought I read in a previous comment there was an initial "readable" state and it only went truly closed on first read()

[10:56:58.0000] <wanderview>
/me goes to look at the spec again

[10:57:43.0000] <wanderview>
Domenic: oh... I was thinking of the state attribute... I guess that went away when we switched to Promise-returning read()

[10:57:59.0000] <Domenic>
wanderview: even before, once the controller of the stream calls close(), the stream is closed.

[10:58:43.0000] <wanderview>
Domenic: so there is no way to use .body.getReader().closed here somehow?

[10:59:43.0000] <Domenic>
wanderview: no, empty body will be immediately closed.

[11:00:00.0000] <Domenic>
an empty closed stream is the same as a drained closed stream.

[11:00:21.0000] <Domenic>
streams don't retain knowledge of how they've been interacted with; they just have a current state.

[11:00:48.0000] <wanderview>
Domenic: well... new Request(url, { body: '' }) could just set body to null as a special case... not sure that works with the other body constructor options, though

[11:01:01.0000] <Domenic>
yeah I was thinking that...

[11:03:25.0000] <wanderview>
Domenic: what about creating a wrapper ReadableStream for Request/Response that handles this extra logic

[11:10:04.0000] <Domenic>
wanderview: seems plausible, although annoying... I am losing sight of what we're gaining for all this complexity ... I think it is the ability to fetch() some requests multiple times but not others?

[11:11:21.0000] <wanderview>
Domenic: well... this behavior has been released in fetch for some time now... even if we don't like it, not sure we can get rid of it

[11:11:51.0000] <Domenic>
I kind of wish it was a .body() function now so we could say the moment you call it we switch into sane mode...

[11:12:08.0000] <wanderview>
Domenic: its not too late for that

[11:12:22.0000] <wanderview>
but I don't think extra modes would be a good thing

[11:13:40.0000] <wanderview>
Domenic: as a side note... I do think it would be nice to have a synchronous way to get the stream state... it seems right now everything is async through .read() or .closed promise... right?

[11:14:03.0000] <Domenic>
wanderview: yes, that is intentional because otherwise it causes GC observability issues, IIRC.

[11:14:33.0000] <wanderview>
Domenic: hmm... not sure I follow

[11:14:52.0000] <Domenic>
I don't remember the details... probably somewhere in that big GC thread...

[11:15:36.0000] <wanderview>
Domenic: I can see GC observability for a callback of some kind... but a sync attribute can't be accessed if the objects it on is GC'd...

[11:15:48.0000] <Domenic>
hmm that's true

[12:01:59.0000] <wanderview>
Domenic: how does giving up .text() on partially read streams help here?

[12:02:13.0000] <Domenic>
wanderview: no idea, but yhirano_ was asking about it, so I thought I'd put it on record.

[12:02:38.0000] <wanderview>
Domenic: I guess we could have the .body getter set bodyUsed... but thats a little overeager!

[12:02:58.0000] <Domenic>
wanderview: that was kind of what I was thinking with sane-mode... would rather it be a function in that case.

[12:03:30.0000] <Domenic>
Although 43 shipped today so I can't imagine Chrome would be happy with that change

[12:04:10.0000] <Domenic>
(hmm, I should probably be celebrating, now that I think about it...)

[12:04:36.0000] <wanderview>
seems someone should be able to do var reader = s.body.getReader(); reader.closed.then(itsclosedjim); reader.releaseLock(); without forcing bodyUsed to true

[12:04:53.0000] <wanderview>
/me wonders why .closed promise is on the reader instead of the stream...

[12:04:54.0000] <Domenic>
hmm

[12:05:03.0000] <Domenic>
*that* was for GC reasons, I am 100% sure

[12:05:09.0000] <wanderview>
ok

[12:05:36.0000] <wanderview>
does the .closed promise not resolve if you .releaseLock()?

[12:05:51.0000] <Domenic>
it is already resolved the moment the reader came into existence.

[12:06:07.0000] <wanderview>
Domenic: for a stream with actual content?

[12:06:13.0000] <Domenic>
no, sorry

[12:06:23.0000] <Domenic>
it will immediately resolve when you releaseLock()

[12:06:32.0000] <Domenic>
inactive readers act like closed streams

[12:07:04.0000] <Domenic>
still stuck thinking about " seems someone should be able to do"

[12:07:24.0000] <wanderview>
Domenic: so if I want to observe when the stream consumption is complete I need to do something like s.pipeTo(sink).getReader().closed.then(foo)?

[12:07:31.0000] <Domenic>
what if ... bodyUsed was set to true for empty streams (as well as drained ones). But, putting GET requests didn't care about bodyUsed?

[12:07:44.0000] <Domenic>
wanderview: s.pipeTo(sink).then(foo)

[12:08:13.0000] <wanderview>
Domenic: I guess I'm trying to see how the .closed promise is useful if you can only use it when you are the sole reader...

[12:08:53.0000] <Domenic>
that's true

[12:08:58.0000] <Domenic>
it might be vestigial at this point :-S

[12:09:18.0000] <Domenic>
well, not quite

[12:09:25.0000] <wanderview>
Domenic: the other problem I see with setting bodyUsed in .body getter or a .body()... now you can't check for body null without triggering bodyUsed

[12:09:33.0000] <Domenic>
even if you are the sole reader it is quite useful for getting consolidated error notifications for example

[12:10:01.0000] <wanderview>
yea... some use... just not what I expected when I saw it in the API

[12:10:09.0000] <wanderview>
I thought it was an external observer

[12:10:27.0000] <Domenic>
it was but then GC concerns forced it into hte background. we reasoned we could add it back later.

[12:10:51.0000] <Domenic>
s/into hte background/solely into the reader/

[12:10:52.0000] <wanderview>
it can also be manually added with a Transform that you pipeThrough()

[12:11:01.0000] <wanderview>
an ObserverTransform

[12:11:04.0000] <wanderview>
or whatever

[12:11:40.0000] <Domenic>
true

[12:11:50.0000] <Domenic>
and if that's author-space it shouldn't have GC issues

[12:11:53.0000] <Domenic>
maybe we can add it back

[12:12:29.0000] <Domenic>
OK what if we modified my proposal from https://github.com/yutakahirano/fetch-with-streams/issues/37#issuecomment-103584177 to not error for GETs

[12:13:03.0000] <wanderview>
well... HEAD OR GET

[12:13:05.0000] <Domenic>
so that would mean fetch(new Request(url, { body: "", method: "POST" })) fails, hmm. seems not great

[12:13:06.0000] <Domenic>
yeah

[12:13:18.0000] <wanderview>
but can't other methods optionally have bodies or not?

[12:13:21.0000] <wanderview>
like PUT and POST

[12:13:25.0000] <Domenic>
yeah.

[12:13:36.0000] <wanderview>
I think I prefer the wrapper

[12:13:37.0000] <Domenic>
I guess we could do the thing you were suggesting and translate empty body to null body

[12:13:45.0000] <Domenic>
wrapper sounds so heavyweight, but, maybe it is ok.

[12:13:55.0000] <Domenic>
i still think the overall story here is bizarre

[12:14:01.0000] <Domenic>
i.e. what we tell developers

[12:14:29.0000] <Domenic>
"sometimes you can multi-fetch, sometimes not. if you read the body to the end you cannot multi-fetch, but if the body was empty in the first place you can." etc.

[12:14:42.0000] <wanderview>
Domenic: the problem with special casing "" is that it won't work if a ReadableStream is passed directly as the body:  new Request(url, { body: streamThatMaybeHasData });

[12:15:21.0000] <Domenic>
ah right

[12:15:24.0000] <wanderview>
Domenic: I agree its a bit awkward... its a consequence of us not wanting to do implicit clone

[12:16:11.0000] <wanderview>
Domenic: what do you think of a just wrapping the inner source?  fetch inserts an inner source wrapper into the body stream... once it gets its "a byte was read" state info then it removes its wrapper from the chain

[12:16:22.0000] <wanderview>
removing itself could be an implementation optimization

[12:16:23.0000] <Domenic>
code?

[12:17:04.0000] <wanderview>
Domenic: it would have to work on the inner concepts of the stream... is there a way to refer to the inner source in code currently?

[12:17:13.0000] <wanderview>
this would not be something we would let normal script do, I think

[12:17:43.0000] <Domenic>
wanderview: no, there is not... it's the same kind of layering violation I currently see in Blink I guess, is what you're suggesting.

[12:17:50.0000] <wanderview>
Domenic: to be honest, in gecko I would probably just stick a boolean "ever got data" into a private stream slot and let the DOM code inspect it

[12:18:23.0000] <wanderview>
I think thats the cheapest, simplest solution

[12:19:06.0000] <Domenic>
this is making me sad

[12:19:39.0000] <Domenic>
"it won't work if a ReadableStream is passed directly as the body" what if we say that always errors

[12:19:49.0000] <Domenic>
(if the ReadableStream is closed)

[12:19:58.0000] <Domenic>
we could let "" error too

[12:20:04.0000] <Domenic>
only null bodies work for multi-fetch

[12:20:20.0000] <Domenic>
seems conceptually closer to how things actually work

[12:20:26.0000] <Domenic>
you can only multi-fetch when you truly have no body

[12:20:35.0000] <Domenic>
is what we're trying to enforce here

[12:20:43.0000] <Domenic>
we shouldn't have a loophole for empty bodies

[12:20:49.0000] <wanderview>
Domenic: I think that creates a bit of the quantum streams problem for a pipe passed as the body... for example, if you consume the stream before pipe writer end is closed, then it works... but if the pipe writer end decides its done and no data was ever written, then now the body can't be used

[12:21:24.0000] <wanderview>
Domenic: I like that, except for the problem were passing "" errors without ever being usable

[12:21:38.0000] <Domenic>
"" erroring seems OK

[12:21:48.0000] <Domenic>
don't use body: "", use body: null.

[12:22:02.0000] <Domenic>
*or*, just clone defensively, if you're unsure.

[12:22:08.0000] <wanderview>
it would break backward compat... I guess we would have to special case "" for all the previously existing body initializers

[12:22:50.0000] <Domenic>
Let me try to write this up in a bit more detail so we can tear it down more comprehensively.

[12:23:12.0000] <wanderview>
Domenic: can "" be expressed for FormData or URLSearchParams?

[12:23:26.0000] <wanderview>
Blob has .size

[12:23:34.0000] <wanderview>
I think BufferSource has .length

[12:24:11.0000] <wanderview>
I guess for FormData and URLSearchParams we can just take the size of the resulting encoded value... they both run serializers... if the encoded value is length 0 then set body to null

[12:24:50.0000] <Domenic>
Is breaking back-compat there an option? How many people are doing multi-fetch with an empty FormData?

[12:30:24.0000] <wanderview>
Domenic: I think we can special case all of those to set a null body when empty

[12:30:57.0000] <wanderview>
Domenic: and the new ReadableStream body functions with the closed-is-drained semantics

[12:31:18.0000] <wanderview>
Domenic: I think that works for most cases... pipe might get a bit ugly as I mentioned above

[12:31:34.0000] <Domenic>
hold on, I appear to be reinventing the bodyUsed flag...

[12:31:44.0000] <Domenic>
/me goes to re-read the thread

[12:33:05.0000] <Domenic>
yes, I have begun re-inventing plan(X), as it is called. Nevermind...

[12:34:02.0000] <wanderview>
Domenic: I don't think thats the same as plan(X)...  I don't think plan(X) equated stream closed with bodyUsed

[12:34:24.0000] <Domenic>
yeah, I was trying to do a different version that allowed you to fetch() once.

[12:34:27.0000] <wanderview>
basically we want to define bodyUsed as `.body && .body is closed`

[12:34:33.0000] <wanderview>
oh, ok

[12:36:01.0000] <wanderview>
Domenic: wait a minute... how can Response or Request tell if .body is closed initially?  do they have to do a .read() and keep track to see if done:true is returned from the first .read()?

[12:36:08.0000] <Domenic>
yes

[12:36:18.0000] <Domenic>
that seems problematic for .bodyUsed

[12:36:25.0000] <Domenic>
Not problematic for actual consumption code

[12:36:29.0000] <Domenic>
but problematic for .bodyUsed.

[12:36:40.0000] <wanderview>
Domenic: what if its not closed... and it gets a chunk back... it can't push it back...

[12:36:47.0000] <wanderview>
I think we need a sync attribute to tell if closed or not

[12:36:50.0000] <Domenic>
then it continues consuming

[12:37:03.0000] <Domenic>
no need to push it back

[12:37:38.0000] <wanderview>
Domenic: well, I mean for for .bodyUsed which is itself not a consumer

[12:37:48.0000] <Domenic>
yes, .bodyUsed is problematic.

[12:38:05.0000] <Domenic>
I think it would need a sync getter, you are right

[12:38:30.0000] <Domenic>
why is this so hard -_-. doesn't feel like it should be.

[12:38:36.0000] <wanderview>
I think it would be useful anyway for devs to be able to inspect the state without potentially modifying the stream

[12:38:47.0000] <wanderview>
which was one of the reasons we added .bodyUsed

[12:39:00.0000] <Domenic>
i like how all access is gated on the reader and on being async

[12:39:08.0000] <Domenic>
but it's not essential i guess

[12:39:09.0000] <wanderview>
Domenic: this sort of thing would probably take an order magnitude less time if we were all in the same room with a whiteboard

[12:39:11.0000] <Domenic>
just seems nice

[12:39:16.0000] <Domenic>
heh, that's fair.

[12:40:50.0000] <wanderview>
Domenic: you could make it .body.getReader().state or whatever... so still gated on the lock

[12:40:57.0000] <Domenic>
sure

[12:41:39.0000] <Domenic>
i guess part of the mismatch here is that streams expects trying to consume a consumed stream to be a no-op

[12:41:49.0000] <Domenic>
whereas serviceworker and friends expect it to throw

[12:42:04.0000] <Domenic>
or reject i guess

[12:42:46.0000] <Domenic>
streams is not necessarily better when I put it that way

[12:44:02.0000] <Domenic>
right. and service worker has the sync "will this fail" getter in bodyUsed

[12:44:27.0000] <Domenic>
so if we want to translate between the streams model (or even if we were to change the streams model to also be a fail) we'd need a "will this no-op" getter on streams.

[12:45:09.0000] <Domenic>
i guess the motivation is higher in service worker land because failing is something you want to avoid more actively than no-oping

[12:45:19.0000] <Domenic>
so a bodyUsed getter is more important than a closed getter.

[12:45:37.0000] <Domenic>
(ugh, boolean adjective getters vs. past-tense promise getters... English is screwing us.)

[12:46:12.0000] <Domenic>
(I guess it'd be a state getter so crisis averted)

[12:46:20.0000] <wanderview>
Domenic: I guess I would propose a .state getter vs calling it .closed

[12:46:26.0000] <wanderview>
yesa

[12:46:28.0000] <wanderview>
yea

[12:47:24.0000] <Domenic>
ok i remember now why it's a no-op for streams instead of an error. because you never know if the next read() is going to be "oh actually i have no more chunks for you."

[12:47:39.0000] <Domenic>
So .read() cannot reject on stream end because it's non-exceptional

[12:47:53.0000] <Domenic>
But I can understand why readToEnd(stream) rejecting on stream being empty might be exceptional

[12:48:05.0000] <Domenic>
i'm feeling a bit better as i talk myself through this, hope you don't mind :)

[12:48:39.0000] <wanderview>
np

[12:55:40.0000] <wanderview>
Domenic: you see this? https://twitter.com/yaypie/status/600738702038409216

[12:58:08.0000] <Domenic>
no, no idea what that's about.

[12:58:26.0000] <Domenic>
i'm tempted to blame user error until he gives more details; we have plenty of tests for concatenated minified JS.

[12:59:01.0000] <caitp->
in 2015 bugs get filed on twitter instead of where people can find them

[12:59:39.0000] <Domenic>
wanderview: posted new proposal based on our discussions. i imagine it will need a few more tweaks...

[13:00:10.0000] <wanderview>
thanks, I'll take a look

[13:01:01.0000] <wanderview>
wow... I opened the email notification in gmail... and the github page was smart enough to take the (1) notification thing out of its tab name

[13:01:56.0000] <Domenic>
O_O

[13:03:46.0000] <TabAtkins>
Tracking images, yo.

[13:07:51.0000] <wanderview>
Domenic: I know you don't like my "quantum streams", but I think part of the mismatch we get between SW "fail on consumed streams" and the streams closed concept is that "consumed" implies that someone did something to the stream...  I think its weird conceptually for a stream to become consumed on its own spontaneously (from initially empty or the writer

[13:07:52.0000] <wanderview>
end of a pipe being closed, etc)

[13:08:51.0000] <Domenic>
Yes. I don't understand that part of SW honestly, which is what this new thing is trying to fix. Why would a respones the server made empty be any different from one the developer made empty?

[13:10:26.0000] <wanderview>
not sure I understand what you mean by server/developer in this case

[13:11:31.0000] <wanderview>
to me "consumed" conceptually requires a consumer to take an action on the stream... even if it ends up a no-op

[13:12:12.0000] <Domenic>
I don't think consumed is a coherent concept

[13:12:18.0000] <Domenic>
It causes global coordination problems

[13:12:37.0000] <wanderview>
Domenic: can you elaborate on those problems?

[13:12:45.0000] <Domenic>
I give you an empty string from one part of the program. Have I consumed it yet, or not?

[13:12:56.0000] <wanderview>
to be clear, I don't think "consumed" is a replacement for "closed"

[13:13:43.0000] <Domenic>
It implies people should take different paths depending on what's happened in the past, instead of just working with what they're given in their part of the program

[13:13:54.0000] <TabAtkins>
Can there be something like iterator's "done" flag?  An iterator might be empty at any point, and may or may not have indicated it yet, but once it's emitted "done", it's absolutely done.

[13:14:26.0000] <wanderview>
TabAtkins: yea... thats the kind of semantics I was expecting

[13:14:28.0000] <Domenic>
TabAtkins: we have that, it's closed. But service worker wants something different.

[13:14:43.0000] <wanderview>
or not

[13:14:56.0000] <Domenic>
Service worker wants "has anyone ever iterated over this iterator"

[13:15:06.0000] <Domenic>
which I maintain is a very strange way of programming

[13:15:25.0000] <Domenic>
You should work with the thing you're given, and its current state. Who cares how it got that way.

[13:17:57.0000] <TabAtkins>
Domenic: Oh yeah, they just want an exclusive stream.

[13:18:08.0000] <TabAtkins>
I mean, single consumer makes sense.

[13:18:35.0000] <Domenic>
they have that... they want to be sure nobody ever read it to the end and then decided they were ready to release access to its dead husk

[13:18:40.0000] <Domenic>
They don't like dead husks

[13:19:08.0000] <Domenic>
Hmm we could get rid of auto-release-on-close... and in fact not allow release of closed streams??

[13:19:19.0000] <Domenic>
then no dead husks should be accessible

[13:19:33.0000] <TabAtkins>
Unless, like, you tee it and hand off one of the copies.

[13:23:34.0000] <wanderview>
Domenic: in fairness, the proposed spec explicitly did the "release access to its dead husk" in the .text()/etc methods

[13:28:35.0000] <wanderview>
Domenic: what is the use case for releasing the lock anyway?

[13:29:08.0000] <Domenic>
wanderview: once the stream is closed? not too much of one. You can contrive some ideas though.

[13:29:29.0000] <wanderview>
Domenic: I meant ever all unlocking... even while the stream is open

[13:29:48.0000] <Domenic>
wanderview: allowing multiple consumers access to different parts of the stream, e.g. headers, body, trailers

[13:30:25.0000] <Domenic>
readHeaders(stream).then(headers => readBody(stream).then(body => [headers, body]))

[13:30:32.0000] <Domenic>
readHeaders acquires and releases a lock

[13:31:47.0000] <wanderview>
Domenic: and what would this case do if there were headers and no body... the stream closed and left the lock in place... what would readBody() do?

[13:31:53.0000] <wanderview>
with your proposal

[13:32:23.0000] <Domenic>
wanderview: yeah I think it would have to check .locked first... or .state === "closed"??

[13:32:58.0000] <Domenic>
failing though seems like a reasonable default tbh

[13:33:05.0000] <Domenic>
that code seems to expect a body

[13:34:15.0000] <wanderview>
Domenic: so an initially-empty stream would start in the state === 'closed' state, but not be locked... then someone could do getReader().read(), which would return done:true and leave the stream locked

[13:34:31.0000] <Domenic>
yeah i think that's the gist of it...

[13:34:46.0000] <wanderview>
Domenic: so bodyUsed would be `body !== null && body.state !== 'readable' && body.locked`

[13:35:08.0000] <Domenic>
sounds right

[13:35:10.0000] <wanderview>
Domenic: this brings us back to the original proposal modulo the "can't unlock a consumed stream" thing

[13:35:50.0000] <Domenic>
the difference being .locked reflects the current state of the stream instead of historical information about how the current state arose.

[13:40:00.0000] <wanderview>
Domenic: I think you can infer a lot by looking at state === 'closed' and locked attribute... if its closed, but not locked, then it was initially empty

[13:40:35.0000] <Domenic>
currently not true; currently state === 'closed' => locked === false always, because it auto-unlocks on close.

[13:41:51.0000] <wanderview>
Domenic: right, I meant with your proposal

[13:45:16.0000] <Domenic>
yeah

[14:03:56.0000] <roc>
philipj, Domenic: I tried filing a Chromium bug to get caretPositionFromPoint implemented (instead of nonstandard caretRangeFromPoint) but it didn't work out too well: https://code.google.com/p/chromium/issues/detail?id=388976

[14:04:23.0000] <roc>
is there a better path?

[14:05:25.0000] <Domenic>
oof, that looks like some triage went wrong. I am not a veteran of the best procedures for such things but will ask around... philipj probably is such a veteran.

[14:07:26.0000] <roc>
thanks

[14:14:16.0000] <TabAtkins>
I'm trying to log into my chromium.org account, but it's fine to just put that back as Available.

[14:14:31.0000] <TabAtkins>
That's def the worst triage I've ever seen. roc, plz ping if you ever get service that bad.

[14:14:58.0000] <roc>
oh, I've seen worse :-). Thanks

[14:15:06.0000] <Domenic>
chromium.org accounts. the worst.

[14:15:16.0000] <roc>
are they volunteers?

[14:15:39.0000] <Domenic>
no I just meant having separate google accounts to use for chromium is the worst. I dunno about the triagers.

[14:50:57.0000] <philipj>
roc: is Gecko the only engine to implement caretPositionFromPoint so far?

[14:51:25.0000] <philipj>
looks like IE doesn't implement caretPositionFromPoint or caretRangeFromPoint, and WebKit/Blink only the latter

[15:25:59.0000] <roc>
philipj: I guess so

[15:26:24.0000] <roc>
philipj: I suppose we could revert the spec to caretRangeFromPoint if you think that's best. You should talk to zcorpan about it

[15:27:35.0000] <philipj>
roc: I suppose you don't have any metrics for how often caretPositionFromPoint is used?

[15:28:08.0000] <roc>
if we're the only browser with it, I'm guessing it's unused

[15:28:14.0000] <roc>
could be wrong

[15:28:30.0000] <roc>
so yeah, no data

[15:28:32.0000] <philipj>
caretPositionFromPoint is a less strange API, I can see why it was changed

[15:31:23.0000] <caitp->
good job whoever fixed qSA + camelcased elements/attributes :d

[15:31:26.0000] <philipj>
I'll start a search in httparchive to see how caretRangeFromPoint is actually used

[15:44:03.0000] <Domenic>
TabAtkins: where's that spec where you were writing things in JS? colors maybe?

[15:45:15.0000] <TabAtkins>
Domenic: Yeah, color 4

[15:45:20.0000] <Domenic>
Found it.

[15:45:28.0000] <Domenic>
V8 extras candidate \o/

[16:04:36.0000] <TabAtkins>
Domenic: ???

[16:05:11.0000] <Domenic>
TabAtkins: https://groups.google.com/forum/#!topic/v8-users/D6FmTwlvCgk people asking for a design doc, I'm writing one, was looking for examples of where V8 extras would be a good strategy, color API is definitely one.

[16:06:36.0000] <TabAtkins>
Ah, cool.


2015-05-20
[17:46:05.0000] <themihai>
Hi guys! I'm wondering where I could make a proposal for a new "html5" API. The api should allow the developers to provide labels for the "back" (and perhaps forward too) buttons.

[17:50:22.0000] <themihai>
I think this would improve the user experience on mobile a lot if the UAs implement it. https://www.dropbox.com/s/1yy82juk0dldupi/ua.png?dl=0

[17:56:09.0000] <caitp->
that sounds neat! maybe, I didn't really read it i've had a few glasses of wine. but, you should file a bug about it and hope really hard

[17:56:19.0000] <caitp->
and who knows, maybe it would catch on

[17:56:41.0000] <caitp->
but then you'd have like security concerns and mobile browsers would be like "wat" and like

[17:56:45.0000] <caitp->
idk localization issues

[17:56:59.0000] <caitp->
i'm not sure if vendors would want it, but you know, you could give it a try

[17:57:01.0000] <caitp->
file a bug

[17:58:23.0000] <themihai>
Where should I file the bug ?

[17:58:48.0000] <caitp->
if you go to um

[17:58:57.0000] <themihai>
On mozilla , ff, ch or somewhere on wg  ?

[17:59:06.0000] <caitp->
https://html.spec.whatwg.org/multipage/

[17:59:21.0000] <caitp->
there should be a bar on the bottom with a thing for filing a new bug

[17:59:37.0000] <caitp->
or something like taht

[17:59:47.0000] <themihai>
Found it! Thanks!

[18:59:17.0000] <deltab>
themihai: you could try it in action with a browser extension; it could use heuristics to work out a suitable label from the page title or other metadata

[03:46:58.0000] <beverloo_>
MikeSmith, thanks for the detailed mail! :)

[03:53:06.0000] <MikeSmith>
beverloo_: cheers

[03:53:20.0000] <MikeSmith>
sorry for not having been more communicative about it earlier

[03:54:13.0000] <MikeSmith>
but the last couple weeks I've actually been spending most of my time with annevk instead of working :-)

[03:55:10.0000] <beverloo_>
Don't worry, I appreciate the time you took. I'll craft a reply later today.

[03:55:17.0000] <beverloo_>
Are you in Switzerland or is he in Japan? :)

[03:55:40.0000] <jgraham>
/me wonders what this mail is about :)

[03:55:58.0000] <MikeSmith>
beverloo_: anne is here in Japan atm

[03:56:14.0000] <MikeSmith>
jgraham: the Notifications spec

[03:56:16.0000] <beverloo_>
jgraham, https://lists.w3.org/Archives/Public/public-web-notification/2015May/0004.html


2015-05-21
[12:40:23.0000] <Ms2ger>
"Become Verified in HTML5 by W3C!"

[12:41:21.0000] <Domenic>
Hixie should get that badge

[12:52:04.0000] <jgraham>
Wait, what?


2015-05-22
[17:30:35.0000] <KiChjang>
i don't understand step 7 of this spec https://fetch.spec.whatwg.org/#concept-main-fetch

[17:31:11.0000] <KiChjang>
when it says run the remaining steps in parallel, does it mean each and every subsequent steps should be ran in a separate thread?

[17:51:21.0000] <KiChjang>
anyone?

[17:53:28.0000] <caitp->
it's hard to make heads or tails out of it, but it doesn't seem to mean what "in parallel" normally means

[17:54:35.0000] <caitp->
https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel << pretty clearly is not saying "new thread for each subsequent step" though

[17:56:48.0000] <KiChjang>
caitp-: yes that's why i was confused

[17:57:23.0000] <caitp->
yes, probably worth filing a bug on the language used =p

[17:57:41.0000] <KiChjang>
what's the link for reporting bugs?

[17:58:44.0000] <caitp->
you should see one if you fling the mouse around the spec, it pops up at the top or bottom

[17:59:46.0000] <caitp->
oh, you don't even have to fling the cursor around, it's just floating at the bottom

[18:01:15.0000] <caitp->
TabAtkins, just because we don't all have high S2N ratios doesn't mean we're trolls, I'm sure L2L or whatever his name is means well

[18:01:52.0000] <KiChjang>
ok i found it

[18:02:16.0000] <roc>
without judging L2L specifically --- sufficiently advanced incompetence is indistinguishable from malice

[18:04:04.0000] <caitp->
this is about asking for labeled block statements in ecmascript

[18:04:25.0000] <caitp->
which is a perfectly fine thing to propose when talking about language design

[18:14:15.0000] <TabAtkins>
caitp-: Nah, L2L's s/n ratio is basically zero. I flipped the bozo bit on him when he was doing stuff in www-style.

[18:14:52.0000] <TabAtkins>
You don't need a *high* ratio, just one distinguishable from gibberish.

[18:15:41.0000] <TabAtkins>
/me is about to take off.

[18:16:11.0000] <caitp->
if it was anyone else asking for goto in js would you still be talking about banning them

[18:18:57.0000] <caitp->
you don't have to explain why vms don't really want to have to implement it, or why most authors don't want to read or write it, but it's certainly not off the table for discussion on language design

[20:04:09.0000] <roc>
my laptop just crashed

[20:04:11.0000] <roc>
oos

[22:48:38.0000] <ek_>
hello

[22:48:43.0000] <ek_>
i have a question

[22:48:53.0000] <ek_>
In HTML5 spec it talks about stable state (in http://www.w3.org/TR/html5/single-page.html#await-a-stable-state). Can you explain what is a stable state and what does it exactly mean to await a stable state? I can not get the explanation in the spec. A simple example will be helpful

[02:57:27.0000] <hsivonen>
hmm. annevk isn't here.

[02:57:50.0000] <hsivonen>
Does anyone have test cases for the Big5 decoder as defined in the Encoding Standard?

[03:23:03.0000] <SimonSapin>
Hixie: What is a "globally unique identifier" in https://html.spec.whatwg.org/multipage/browsers.html#origin ? Is it the same as "opaque identifier" ?

[03:25:10.0000] <Ms2ger>
Yeah

[03:28:33.0000] <SimonSapin>
Shouldn’t that be defined in the spec?

[03:34:35.0000] <Ms2ger>
I guess it should say "globally unique opaque identifier"

[04:19:30.0000] <philipj>
hsivonen: It's possible that libicu would have test cases, jshin⊙co has done some work. I kind of doubt there's a from-scratch implementation based on the spec algorithm with test cases for its specific way of doing error handling, however.

[04:20:18.0000] <hsivonen>
philipj: thanks

[04:20:21.0000] <Ms2ger>
SimonSapin, ^

[04:20:39.0000] <hsivonen>
philipj: I guess I'll do some manual math to at least get a couple of smoke tests written

[04:21:07.0000] <hsivonen>
but first, it turns out that I should replace my placeholder for a data table with an actual data table!

[04:21:30.0000] <philipj>
hsivonen: I really hope the new Big5 bits work out, I put quite a lot of research into some of the tiny details :)

[04:21:46.0000] <philipj>
but if it doesn't, we'll learn something from the failure at least

[04:22:26.0000] <hsivonen>
philipj: first thing I've learned: the lowest valid pointer in the index does not exist according to the OpenJDK notion of "Big5", so I probably shouldn't check my test cases against the JDK decoder

[04:23:28.0000] <philipj>
hsivonen: I think on average the Big5-HKSCS decoder from other implementations would be the closest to the spec

[04:23:44.0000] <philipj>
not sure if the low indexes are where Big5-HKSCS has its additions though

[04:24:58.0000] <hsivonen>
philipj: makes sense

[04:28:09.0000] <hsivonen>
does Python have syntactic sugar for a flavor of xrange that takes a pair of integers instead of two integer arguments?

[04:28:49.0000] <hsivonen>
I guess I'll just have to take the integers out of the pair myself :-(

[04:29:13.0000] <hsivonen>
except I already did so. doh

[04:29:59.0000] <Ms2ger>
range(*(2, 3))

[04:31:11.0000] <hsivonen>
Ms2ger: thanks

[04:31:17.0000] <Ms2ger>
Np

[04:31:58.0000] <hsivonen>
/me writes Python to generate Java with the plan to then repurpose the Python program to generate C++

[04:32:12.0000] <hsivonen>
(because it makes no sense to write either directly)

[04:33:38.0000] <Ms2ger>
hsivonen, btw, Kannan was looking for someone to ask about nsScriptLoader; I believe he said he'd send you email

[04:35:08.0000] <hsivonen>
Ms2ger: I've replied, but by then smaug had already replied more usefully

[04:35:28.0000] <Ms2ger>
Alright, great :)

[04:39:47.0000] <hsivonen>
aargh. I keep doing things that collide with magic limits of either the Java class format or HotSpot

[04:40:14.0000] <hsivonen>
this time, I tried to pack data in a string literal that's too long for the class file format

[04:51:00.0000] <SimonSapin>
16 bit length?

[04:56:41.0000] <hsivonen>
SimonSapin: yes

[04:56:57.0000] <hsivonen>
SimonSapin: counted on Java-modiefied UTF-8 bytes

[04:57:00.0000] <hsivonen>
apparently

[05:13:00.0000] <Ms2ger>
"Postel tarpit (n.) - A system that has tried so hard to accept all possible input that any change becomes backwards-incompatible"

[05:28:52.0000] <hsivonen>
hooray. my Big5 decoder isn't obviously broken

[05:29:09.0000] <hsivonen>
(unobvious test cases are harder, of course)

[05:38:55.0000] <hsivonen>
oh, great. the error reporting design of the Java NIO decoding API is more broken than I thought

[05:40:37.0000] <hsivonen>
hmm...

[05:41:00.0000] <hsivonen>
and even more broken than I thought

[05:41:03.0000] <hsivonen>
quite sad really

[05:46:42.0000] <hsivonen>
so assume you have a big5 input buffer that ends with 0xFE. then your next input buffer starts with 0x39.

[05:48:08.0000] <hsivonen>
I don't see how the Java API allows the decoder to signal the error to the caller such that the caller constructs U+FFFD followed by U+0039 and not just U+FFFD

[05:48:11.0000] <hsivonen>
boo

[05:49:07.0000] <hsivonen>
if there is a way, it sure is an undocumented abuse of the API

[05:49:31.0000] <hsivonen>
let's see if my caller-side code that I wrote years ago has an answer to how the JDK decoders deal

[05:50:22.0000] <hsivonen>
kids, don't try to design a streaming decoder API that allows the caller simultaneously to learn which bytes turn into U+FFFD and to continue decoding

[05:50:44.0000] <hsivonen>
seems to be too hard a problem even for profession drivers on closed road

[05:52:52.0000] <hsivonen>
OK, my old calling code, for which I blackbox reverse engineered how the API actually works, shows how the undocumented part works

[05:53:15.0000] <hsivonen>
you claim you need more input but you leave some input unconsumed

[05:53:35.0000] <hsivonen>
and the caller in, undocumentedly, supposed to copy the unconsumed bytes to the start of the next buffer

[05:54:03.0000] <hsivonen>
sucks to be the caller if the unconsumed bytes are more numerous that the size of your buffer

[05:54:06.0000] <hsivonen>
boo boo boo

[05:59:12.0000] <hsivonen>
except how does what I just said work if 0xFE is the last byte before EOF?

[05:59:13.0000] <hsivonen>
aargh

[06:16:39.0000] <hsivonen>
wow. this API design sucks

[06:17:46.0000] <MikeSmith>
hsivonen: you writing this in Python?

[06:17:50.0000] <MikeSmith>
which API

[06:21:47.0000] <hsivonen>
MikeSmith: I'm writing the code generation in Python

[06:21:56.0000] <hsivonen>
MikeSmith: the actual code is Java (C++ inthe future)

[06:22:11.0000] <hsivonen>
MikeSmith: the bad API is java.nio.charset.CharsetDecoder

[06:22:39.0000] <MikeSmith>
aha

[06:24:54.0000] <hsivonen>
fun fact, if your input buffer is one byte long (edge case that's not prohibited!), the API doesn't work on the REPORT mode

[06:25:11.0000] <hsivonen>
i.e. if you try to feed the decoder one byte at a time

[06:25:58.0000] <hsivonen>
I guess if I had unlimited time, I could write a blog post about how even the API that's supposed to be right is wrong

[06:29:08.0000] <MikeSmith>
hsivonen: good thing it's not very widely used :-)

[06:29:25.0000] <hsivonen>
MikeSmith: few people need to use the API directly

[06:29:32.0000] <hsivonen>
from either side

[06:30:26.0000] <hsivonen>
anyway, if anyone wants to review: https://hg.mozilla.org/projects/htmlparser/rev/b426b2e8f47a

[06:30:45.0000] <hsivonen>
oh, and I just noticed that implFlush is wrong

[06:33:06.0000] <hsivonen>
for those who are interested, search for "undocumented" in the above changeset

[06:48:45.0000] <MikeSmith>
/me looks now

[06:51:21.0000] <MikeSmith>
I think a good rule if you're reading hsivonen code and there's a commment that's any longer than two lines, it's most likely there to point out something that's broken


2015-05-23
[13:41:03.0000] <ek_>
hello

[14:44:10.0000] <zewt>
firefox 3d view is amusing with facebook like buttons: they're a little skyscraper above everything else


2015-05-24
[18:18:03.0000] <SimonSapin>
TabAtkins: So, I have a Rust tree wired up with HTML parsing/serialization and Selector matching, but the API is not pretty: https://github.com/SimonSapin/kuchiki/blob/master/src/tests.rs

[10:41:07.0000] <caitp>
the history API never actually makes requests to new urls right?

[10:51:31.0000] <caitp>
just not sure what the train of thought was to disable the history API in chrome platform apps

[10:52:06.0000] <caitp>
I'm sure the gaia/b2g stuff doesn't cripple the api _that_ badly o_o

[15:03:57.0000] <MikeSmith>
the history API makes no requests to new URLs

[15:04:18.0000] <MikeSmith>
though maybe their implementation did somehow, I dunno

[15:05:22.0000] <MikeSmith>
caitp: anyway I don't know of any reason in the architecture of the API itself that would motivate disabiling it in some particular runtime

[15:06:36.0000] <MikeSmith>
I don't know what chroms platofrm apps are but I assume they're non-Web apps? I mean that don't use the Web security model and don't run in a normal Web context

[16:37:09.0000] <caitp->
MikeSmith, platform apps like "packaged apps" on mobile

[16:37:44.0000] <caitp->
manifest file et all

[16:38:27.0000] <caitp->
i guess they're deprecated though

[16:44:25.0000] <caitp->
hm, they're still not allowed in "new" chrome apps though, apparently for security reasons. just not sure what the security reason could possibly be

[16:45:19.0000] <caitp->
i'm not very creative coming up with these threat models, but it seems like a pretty cosmetic feature

[16:49:25.0000] <caitp->
i mean I guess you could pretend to navigate to somesitewithsensitivedataforloggingauthdetails.com or something, but the history api doesn't let you do that so?

[16:49:48.0000] <caitp->
shrug


2015-05-25
[05:36:39.0000] <Manishearth>
hey, is the status bar behavior for mousing over links specced"

[05:36:41.0000] <Manishearth>
* ?

[05:37:02.0000] <Manishearth>
I suspect it's a chrome thing and doesn't fall under the speccable "jurisdiction", but I want to be sure

[06:07:04.0000] <smaug____>
Manishearth: what part of that would be spec'ed?

[06:09:03.0000] <Manishearth>
smaug____: any part ... when to show it, when not to show it, what string to show, etc

[06:09:12.0000] <Manishearth>
I doubt any of this is speccable though

[06:09:20.0000] <Manishearth>
but zmike was asking and I wanted to be sure

[14:24:10.0000] <definitelynotzoo>
ff


2015-05-26
[06:36:52.0000] <zappl>
Smashing Magazine recommend in their book HTML Essentials to include IE8.js for better backwards compatibility,

[06:36:53.0000] <zappl>
is that still recommended since there are newer version? (latest version is IE9.js - last updated 2010)

[07:44:47.0000] <zewt>
can only expect that including a script that hasn't been updated in half a decade can only be bad for compatibility

[09:07:03.0000] <smaug____>
anyone seen zcorpan?

[09:20:59.0000] <jgraham>
smaug____: He's on vacation

[09:21:16.0000] <jgraham>
I don't remember when he's back, but it's a long time

[09:24:56.0000] <smaug____>
I see

[09:25:15.0000] <smaug____>
/me thinks resize event scheduling in the spec might not be quite right

[09:25:41.0000] <smaug____>
well, we have the issue that when animation frames are about to run, there is too much other stuff happening too

[09:25:52.0000] <smaug____>
resize events and other events ...

[09:26:31.0000] <smaug____>
and handling the events may take time which slows down graphics updates


2015-05-27
[23:05:11.0000] <MikeSmith>
nice to see progress being made on Upgrade Insecure Requests in gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1139297

[10:06:42.0000] <smaug____>
dglazkov: just random question. How do blink folks do code reviews? will some people end up doing lots of them or is the time to get a review occasionally too long

[10:07:20.0000] <smaug____>
/me wonders how other open source projects (than Mozilla)  do reviews

[10:19:57.0000] <jarek>
Hi

[10:20:18.0000] <jarek>
there seem to be two ways to get styling property or attribute value:

[10:20:24.0000] <jarek>
element.attributes.id.value vs element.getAttribute("id")

[10:20:24.0000] <jarek>
element.style.fontSize vs element.getPropertyValue("font-size")

[10:20:59.0000] <jarek>
are there any plans to deprecate the getter/setter API?

[10:21:46.0000] <jarek>
I mean element.style.getPropertyValue("font-size")

[10:26:20.0000] <jarek>
Also, how element.dataset.size is different from element.attributes["data-size"]?

[10:30:01.0000] <gsnedders>
deprecating it is kinda pointless, because practically they'll never get removed

[10:31:58.0000] <jarek>
gsnedders: by deprecating I mean discouraging their use

[10:32:23.0000] <jarek>
though I'm not really sure whether the getter/setter API is worse

[10:32:49.0000] <jarek>
what I don't like is the inconsistency

[10:57:12.0000] <dglazkov>
smaug____: there's definitely an occasional review lag. It's also a good idea to point the code review at someone who would be suitable for review (the git cl upload tool will suggest the reviewers).

[10:58:11.0000] <dglazkov>
smaug____: we have OWNERs that helps a bit with some parts of the code, and watchlists that will cc the potentially interested folks

[10:58:38.0000] <smaug____>
ok, OWNERs is like peers in Gecko

[10:58:47.0000] <smaug____>
(well, we have module owners and then peers)

[10:59:21.0000] <smaug____>
dglazkov: is it a problem that some people end up doing lots of reviewing?

[10:59:46.0000] <smaug____>
or do you have some tools to split reviews somehow evenly to potential reviewers

[10:59:53.0000] <jgraham>
smaug____: I have *no idea* why you might be asking that ;)

[11:00:17.0000] <dglazkov>
it's expected for a senior engineer to do more reviews

[11:00:18.0000] <smaug____>
:p

[11:00:24.0000] <jgraham>
/me understands that smaug____ spends about 26 hours a day reviewing

[11:00:25.0000] <smaug____>
right

[11:01:28.0000] <jgraham>
smaug____: FWIW the Opera/Critic solution is to assign the reviews automatically to people based on user-defined filters

[11:01:45.0000] <smaug____>
meaning what?

[11:03:16.0000] <jgraham>
smaug____: You add a filter for the bits of the code you are allowed to review (and a "watching" filter for bits of the code that you are interested in but can't sign off on). Then when patches come in all the people with filters matching parts of the review are assigned those parts. It's up to them to sort out who takes each review.

[11:03:57.0000] <jgraham>
This also allows reviews to be done collaboratively, where that makes sense

[11:04:02.0000] <smaug____>
so review request ends up to some generic queue

[11:05:34.0000] <jgraham>
if you like, but the point is that it becomes an organisational problem to distribute the reviews in the most efficient way rather than making the requestee pick a reviewer with no context

[11:06:30.0000] <jgraham>
c.f. the way that bz deletes the string "bz" from his bugzilla handle when he is overloaded or going to be away

[11:06:58.0000] <jgraham>
That's pretty clear evidence that "submitter picks a reviewer" doesn't work

[11:07:26.0000] <smaug____>
usually it works quite well

[11:07:45.0000] <smaug____>
I wonder whether the generic queue approach makes then certain people to do even more reviewing

[11:07:58.0000] <smaug____>
do you recall if that was an issue at Opera?

[11:08:41.0000] <jgraham>
Well, I recall that some people did a lot of reviewing, but I couldn't tell you if they considered it a problem of the approach, or something that was worse with that approach than other approaches

[11:09:02.0000] <jgraham>
I believe that the overwhelming majority of people liked the review tool overall

[11:09:16.0000] <jgraham>
so I guess that suggests they weren't totally overloaded

[11:19:36.0000] <smaug____>
(reviewing is usually fun, but I'm always interested in to improve the process)

[13:15:13.0000] <jamesr___>
SimonSapin: wtf8 is brilliant

[13:15:56.0000] <SimonSapin>
the idea is not new, but it was a bit hand-wavy before

[13:16:36.0000] <jamesr___>
yeah, but could be pretty useful in a browser engine that needs to support DOMString everywhere but doesn't want to have half null bytes

[13:17:54.0000] <jamesr___>
blink detects and uses a bit for 8 bit strings

[13:17:55.0000] <SimonSapin>
that was the original motivation indeed (in Servo)

[13:17:59.0000] <jamesr___>
i think some VMs do too

[13:18:05.0000] <jamesr___>
does ***monkey?

[13:18:08.0000] <SimonSapin>
yes

[13:18:22.0000] <jamesr___>
i think the dart vm uses either 1, 2, or 4 bytes per character for a string

[13:18:32.0000] <jamesr___>
and a particular string is one or the other

[13:18:38.0000] <jamesr___>
(or at least that was a plan, not sure if it's implemented)

[13:18:39.0000] <SimonSapin>
so does python 3.3+

[13:18:44.0000] <jamesr___>
so indexing in a particular string is always constant time

[13:18:56.0000] <jamesr___>
but a big string with one surrogate pair is 3/4ths 0x00

[13:19:03.0000] <SimonSapin>
in SpiderMonkey: https://blog.mozilla.org/javascript/2014/07/21/slimmer-and-faster-javascript-strings-in-firefox/

[13:19:05.0000] <jamesr___>
what does servo use now?

[13:19:25.0000] <jamesr___>
ah yeah, looks about the same as blink

[13:19:33.0000] <jamesr___>
assuming there's a bit in the string header for which it is?

[13:19:50.0000] <SimonSapin>
I think Servo uses UTF-8 (Rust’s native string type), so unpaired surrogates in the DOM are replaced with U+FFFD

[13:20:01.0000] <SimonSapin>
it’s unclear if this is a real web compat issue

[13:20:08.0000] <jamesr___>
yeah that's going to be a problem

[13:20:31.0000] <jamesr___>
people store all sorts of crazy shit in storage apis through DOMStrings

[13:20:32.0000] <SimonSapin>
and if it is, we’re undecided between WTF-8 and ill-formed UTF-16

[13:20:58.0000] <jamesr___>
i can't remember the details but we've broken several web properties by accidentally doing unicode conversions at different parts of our storage systems over the years

[13:21:07.0000] <SimonSapin>
but Rust ships with WTF-8 for OS strings on Windows in the standard library

[13:21:10.0000] <jamesr___>
where somebody assumed that a DOMString could be round-tripped to a unicode string (typically utf8)

[13:22:43.0000] <jamesr___>
filesystem APIs on non-windows have all sorts of crazy crap too

[13:29:39.0000] <hemanth>
can't let rest = await fetch(url);  let data = await resp.json(); be reduced to a single statement ?

[13:49:15.0000] <TabAtkins>
jarek: For CSS, at least, the getter/setter pair mean you don't need to worry about the handful of randomly-renamed properties ("float" vs "cssFloat", due to ES3-era propery name restrictions).  They're also required for any properties that don't propertly convert from snake-case to camelCase, like all custom properties.

[13:52:14.0000] <TabAtkins>
SimonSapin: Like jamesr___ said, using utf-8 for JS strings is *definitely* not web-compatible.  A bunch of different tools rely on the fact that strings are effectively u16 arrays to encode arbitrary binary data into them.

[13:53:19.0000] <TabAtkins>
SimonSapin: Also, thanks for the Rust tree/parser/selector stuff! Will look it over eventually.

[13:54:10.0000] <SimonSapin>
for JS strings yes, agreed

[13:54:23.0000] <SimonSapin>
but for text in the DOM tree?

[13:55:00.0000] <jamesr___>
well depends on what you mean by 'in the DOM tree'

[13:55:07.0000] <jamesr___>
a lot of web APIs are specified in DOMString which is list of u16

[13:55:21.0000] <jamesr___>
you'll need to hook those up to something in servo

[13:56:31.0000] <SimonSapin>
I mean the data of Text nodes, for example

[13:57:39.0000] <smaug____>
for Text nodes Gecko stores the strings using either 8 or 16 bits strings

[13:58:51.0000] <SimonSapin>
smaug____: the question is, is preserving unpaired surrogates there necessary for web compat?

[13:59:22.0000] <SimonSapin>
hsivonen was suggesting that maybe not

[13:59:52.0000] <jamesr___>
i would recommend testing that theory with telemetry data

[14:00:14.0000] <smaug____>
SimonSapin: I'd assume it is necessary

[14:00:28.0000] <SimonSapin>
yes, telemetry would be interesting

[14:00:33.0000] <jamesr___>
not all encodings web pages use are unicode too, remember

[14:01:03.0000] <SimonSapin>
jamesr___: do browser support encodings that don’t map to Unicode somehow?

[14:11:32.0000] <jamesr___>
that's a good question

[14:11:53.0000] <jamesr___>
even if browsers don't support it (i.e. don't render the text as expected) script in the page might expect data contents to round-trip

[14:40:09.0000] <gsnedders>
jamesr___: I remember some talk about flags for 8-bit strings being done on the leaves of the rope, so that a big string with one surrogate pair doesn't pay a huge price

[14:40:17.0000] <gsnedders>
jamesr___: idk if that ever happened though

[14:42:16.0000] <gsnedders>
TabAtkins: can we have style.float work nowadays? IIRC the spec says it should work now?

[14:44:24.0000] <TabAtkins>
gsnedders: We *can* have it work, yes; those naming restrictions were dropped in ES5. The spec does indeed say that el.style.float *should* be usable.

[14:44:29.0000] <TabAtkins>
Doesn't help custom properties, tho.

[14:44:48.0000] <gsnedders>
TabAtkins: I mean "may we have" :P

[14:44:56.0000] <gsnedders>
TabAtkins: I'm well aware ES5 dropped all this

[14:46:24.0000] <JoWie>
heh i added support for style.float in jsdom last week

[14:46:36.0000] <JoWie>
all browsers implement it now yes

[14:46:52.0000] <gsnedders>
yay!

[14:49:18.0000] <JoWie>
cssFloat is synced up with float

[14:51:44.0000] <JoWie>
just like the fontSize and ['font-size'] stuff

[14:51:51.0000] <gsnedders>
Yeah, indeed.

[15:03:55.0000] <gsnedders>
data:text/html,<script>document.write(location.href);</script> cross-browser returns a long string consisting of "data:text/html," repeatedly. how weird.

[15:04:37.0000] <JoWie>
that's because you're doing weird things :p

[15:09:15.0000] <jgraham>
gsnedders: hah. But also, really? That seems surpising because you would have thought that the url was set before the document was sent to the parser

[15:09:29.0000] <jgraham>
Oh

[15:09:49.0000] <espadrine>
so, according to standards, what should the number of data: thingies be?

[15:09:49.0000] <jgraham>
Yeah, no that's not surprising

[15:10:42.0000] <espadrine>
> An unbalanced tree was written using document.write() causing data from the network to be reparsed.

[15:11:45.0000] <gsnedders>
jgraham: ?

[15:19:15.0000] <SimonSapin>
gsnedders: I’m surprised that it’s not infinite

[15:19:48.0000] <SimonSapin>
there must be some kind of recursion limit to executing <script> from document.write

[15:20:21.0000] <gsnedders>
how's that the recursion?

[15:23:18.0000] <jgraham>
gsnedders: ?

[15:25:31.0000] <jgraham>
You load the page. It parses to after the </script> and then runs a script which document.writes the text "data:text/html,<script>document.write(location.href);</script>", which is parsed until after the </script>, which runs a script that document.writes "data:text/html,<script>document.write(location.href);</script>", which…

[15:26:04.0000] <gsnedders>
that was the guess I had… I didn't realise that caused a redirect…

[15:27:18.0000] <jgraham>
redirect?

[15:27:37.0000] <gsnedders>
ohhhhh

[15:27:38.0000] <gsnedders>
duh

[16:48:39.0000] <zewt>
http://stackoverflow.com/questions/12575572 so why exactly do people do this obfuscation where they pass a global into a function instead of just assigning to a local

[16:48:48.0000] <zewt>
i see it a lot and it always seems to do nothing but make code harder to follow


2015-05-28
[17:02:07.0000] <gsnedders>
zewt: IIRC because it minifies better

[17:02:26.0000] <zewt>
that's pretty disgusting

[17:02:32.0000] <zewt>
obfuscate code so that it obfuscates better

[17:20:50.0000] <TabAtkins>
Also: it shortens the scope chain between the code and the global in question, which provides questionable tiny perf benefits.

[17:21:50.0000] <gsnedders>
uh, an argument is in the same place as a local variable

[17:21:55.0000] <gsnedders>
at least in most JS VMs

[17:22:08.0000] <gsnedders>
oh, you mean when it's assigned

[17:22:33.0000] <gsnedders>
um, in the typical case JS VMs go straight to the global scope, and don't look at intermediatry scopes.

[17:22:51.0000] <gsnedders>
so there's no scope walking

[17:25:57.0000] <TabAtkins>
gsnedders: Yeah, thus the "questionable" part.

[17:26:26.0000] <TabAtkins>
jQuery was an early popularizer of the technique, so I bet a lot is cargo-culting.

[17:26:32.0000] <gsnedders>
well, it's not questionable unless you're using eval/with in an intermediatry scope

[17:26:43.0000] <gsnedders>
and if you are you deserve to burn in hell ;P

[17:26:44.0000] <zewt>
also the call-an-anonymous-function paradigm is usually one-off calls during initialization and not inner loops

[17:26:47.0000] <gsnedders>
direct eval, that is

[19:39:46.0000] <MikeSmith>
"using simple components that we understand and avoiding prematurely solving problems that aren't yet problems"

[19:39:51.0000] <MikeSmith>
http://githubengineering.com/rearchitecting-github-pages/

[19:49:57.0000] <zewt>
re: https://twitter.com/ID_AA_Carmack/status/515873591515049984

[22:47:40.0000] <MikeSmith>
has there been any more progress on annevk's iframe[ansyc] idea

[00:26:14.0000] <tobie>
As promises and now streams are moving from the DOM directly into ES, are there plans to do the same with events?

[00:28:00.0000] <tobie>
Context: I'm working on the sensor API, the first draft of which inherits from EventTarget, which makes is unsuitable for implementation outside of the browser (e.g.: in node/io).

[01:03:48.0000] <hsivonen>
SimonSapin: I think we should get telemetry on the surrogate thing sooner than later. It seems improbable to me that it would be a compat problem to the point of making users reject the browser

[02:30:18.0000] <jgraham>
Who is this optimist and what have they done with the real hsivonen?

[06:20:43.0000] <wilsonpage>
hayato ping

[06:21:49.0000] <wilsonpage>
hayato do you know of any reference material for custom pseudo selectors? (or are they called 'name parts'?)

[12:13:04.0000] <gentguyman>
http://secure.hostgator.com/~affiliat/cgi-bin/affiliates/clickthru.cgi?id=jimi13 great webserver deal

[12:13:09.0000] <gentguyman>
whisper me for the link

[12:43:26.0000] <caitp->
what a deal

[13:54:33.0000] <JoWie>
the whisper command is not working


2015-05-29
[22:49:35.0000] <MikeSmith>
We have a winner: https://lists.w3.org/Archives/Public/html-tidy/2015AprJun/0013.html 🏆

[23:12:24.0000] <a-ja>
MikeSmith: was that from shark or snark?

[23:23:39.0000] <MikeSmith>
heh

[05:22:54.0000] <IZh>
Hi. I read about one-time possible privacy attack allowing to discover, what sites user visited. The idea is to measure time of loading favucon.ico from various sites. If it is in a cache, it will load sifnificantly faster. What you think?

[05:24:54.0000] <IZh>
And the time could be compared with favicon.ico?someRandomValue

[06:06:40.0000] <gsnedders>
IZh: such things have been vaguely plausible for years, and somewhat known of

[16:10:05.0000] <Ancient>
Has an abort method been decided upon for the fetch API yet?

[16:10:51.0000] <Ancient>
All I can seem to find is arguing I'm not sure if any progress has actually been made or where to follow news on progress (minus arguments).

[16:21:56.0000] <caitp->
but the arguments are what makes it entertaining


2015-05-31
[11:45:37.0000] <erlehmann>
Hixie look at query or email

[11:45:48.0000] <erlehmann>
pls its urgent

[11:46:21.0000] <erlehmann>
a cgi script on your page is not so well-behaved

