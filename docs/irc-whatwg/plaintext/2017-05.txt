2017-05-01
[09:25:13.0000] <jyasskin>
https://w3ctag.github.io/design-principles/#casing-rules recommends "public-key" for an enumeration value, right?

[09:25:34.0000] <jyasskin>
(Context: https://github.com/w3c/webauthn/pull/432/files#diff-ec9cfa5f3f35ec1f84feb2e59686c34dR419)

[09:54:08.0000] <jyasskin>
One counter-argument in favor of using "publickey" for both the dictionary member and enum value is that then devs don't need to remember which is which.

[10:06:12.0000] <Domenic>
jyasskin: well, if it's two words, then the dictionary member should be publicKey

[10:06:28.0000] <Domenic>
(and "public-key" for the enumeration, yes)

[12:11:03.0000] <Domenic>
Hmm it's a holiday in Europe?

[12:11:35.0000] <Domenic>
Ah yes Labour Day apparently

[12:13:12.0000] <gsnedders>
Domenic: most of the world, AFAIK

[12:56:36.0000] <nox>
Yes.

[12:56:51.0000] <nox>
Workers Day

[12:57:18.0000] <nox>
Though I guess on this IRC channel that better name is ambiguous.

[13:24:06.0000] <jyasskin>
Worklet's Day is just the morning of May 1.

[13:26:04.0000] <jsbell>
*groan*

[13:39:14.0000] <bret>
whats the status of http://tabatkins.github.io/specs/css-nesting/ ?  Any way to tell how far along the standards process that spec is?

[15:03:28.0000] <Domenic>
bret: as far as I can tell it's just an idea, no implementer interest yet. Not sure on the CSSWG's feelings on it though; maybe search their minutes?

[15:11:54.0000] <bret>
ok ill dig around

[16:41:51.0000] <TabAtkins>
Yeah, Stage 0 in tc39 terms


2017-05-02
[05:34:33.0000] <JakeA>
Domenic: It seems a little surprising that moduleMap keys on URL and not URL + credentials. Or am I thinking about this wrongly?

[05:36:38.0000] <JakeA>
Domenic: Eg, if I'm deliberately trying to fetch a module with credentials, I may end up getting a non-credentialed version because some unrelated script imported it earlier without credentials

[05:48:46.0000] <annevk>
JakeA: it doesn't seem overly problematic

[05:49:05.0000] <annevk>
JakeA: and it's unclear whether the added complexity of the alternative is worth it

[05:50:17.0000] <JakeA>
annevk: Well, it just caught me out when I was creating a demo of script modules, but maybe it won't happen in the real world.

[05:51:31.0000] <annevk>
JakeA: did you want both separately?

[05:52:41.0000] <JakeA>
annevk: Yeah, but I was creating a demo where one script didn't have credentials and the next one did, so it isn't a real world example

[05:53:03.0000] <JakeA>
Surprised me though

[05:53:56.0000] <annevk>
JakeA: we also do this for SharedWorker, even across non-module/module boundaries

[05:54:15.0000] <annevk>
JakeA: it's a little surprising, but I'm not sure it's worth making the key more complicated

[05:55:16.0000] <JakeA>
annevk: I guess I expected it to work like the <img> cache

[05:55:51.0000] <JakeA>
In terms of using creds as part of the key anyway

[06:09:46.0000] <wanderview>
annevk: does a VARY header effect the moduleMap?

[06:11:44.0000] <annevk>
wanderview: nope

[06:14:25.0000] <wanderview>
I guess module map is not long lived?

[06:20:12.0000] <annevk>
wanderview: indeed, lifetime of the thing it's attached to

[07:37:42.0000] <tobie>
foolip: considering being a total jerk and manually overriding the webrtc url in Specref. :D

[08:08:18.0000] <jugglinmike>
annevk: I think I finally understand response filtering in Fetch, but it took me a while. It also threw a couple implementors for a loop, so I'm trying to see if we can make it any more clear

[08:08:57.0000] <jugglinmike>
but I recognize that it's actually a kind of complicated behavior, so I don't know if I'll really be able to improve on what we have already

[08:09:27.0000] <annevk>
jugglinmike: if you can that'd be great

[08:09:48.0000] <wanderview>
jugglinmike: annevk: did you guys come to a conclusion about the desired behavior?

[08:10:06.0000] <jugglinmike>
ah, no, wanderview--I didn't raise this with annevk

[08:10:33.0000] <annevk>
I gotta go and I haven't seen an issue...

[08:10:40.0000] <jugglinmike>
annevk: this is the test that wanderview, Mek, and I all agreed was "correct" on Friday https://github.com/w3c/web-platform-tests/compare/master...bocoup:sw-resp-tainting

[08:10:43.0000] <annevk>
I might be able to reply later today, but no guarantees

[08:10:50.0000] <jugglinmike>
ohh, okay

[08:11:21.0000] <annevk>
jugglinmike: oh right, I did look at that, and it looked reasonable, but a description of what I'm looking at would've helped

[08:11:47.0000] <wanderview>
annevk: I think the issue is that the spec actually might say the opposite of what we all thought was correct

[08:11:52.0000] <jugglinmike>
I haven't been able to write a coherent issue because I'm not so confident that anything is wrong here... Just a little confusing

[08:12:41.0000] <jugglinmike>
Yeah, wanderview's point was that a "basic filtered" response shouldn't be considered a "filtered response" at all

[08:12:52.0000] <wanderview>
or rather, that was surprising to me

[08:13:15.0000] <wanderview>
I would expect step 14 of main fetch to increase the tainting level if the request tainting is greater than the response tainting

[08:13:21.0000] <wanderview>
anyway, we should probably put this all in an issue

[08:14:21.0000] <annevk>
Hmm, yeah, does a synthetic response have any filter applied to it?

[08:14:28.0000] <annevk>
Anyway, issue would be good I guess

[08:14:43.0000] <jugglinmike>
Ahh, wanderview that's the ticket. There may be a problem where the outer fetch needs *more* filtering

[08:14:54.0000] <jugglinmike>
Okay, that's the insight I needed to write something coherent

[08:14:58.0000] <jugglinmike>
I'll get on that now

[08:15:41.0000] <wanderview>
jugglinmike: thats essentially the way I wrote it in gecko... https://dxr.mozilla.org/mozilla-central/source/dom/fetch/InternalRequest.h#363

[08:16:09.0000] <wanderview>
and in the synthesized case it gets used here: https://dxr.mozilla.org/mozilla-central/source/dom/workers/ServiceWorkerEvents.cpp#232

[08:22:49.0000] <wanderview>
jugglinmike: thanks for working through this

[08:23:09.0000] <jugglinmike>
My pleasure (as unlikely as that may sound)

[11:26:21.0000] <aklein>
Domenic: can't remember if you were part of this conversation...are <script type=module>s supposed to work in XHTML?

[11:27:27.0000] <Domenic>
aklein: yeah, just like <script>

[12:50:19.0000] <Krinkle>
igrigorik: JakeA: annevk: FYI, I've filed an issue for the question from the other day- https://github.com/w3c/preload/issues/92

[13:12:33.0000] <aklein>
Domenic: I worry that Object.prototype.toString is too performance-sensitive for a usecounter

[13:12:43.0000] <aklein>
Domenic: I know Angular hammers it pretty hard

[13:12:45.0000] <Domenic>
aklein: yeah, that's fair

[13:13:21.0000] <aklein>
but I definitely share the intuition that passing around the builtin prototype objects should be rare

[13:13:29.0000] <aklein>
how would one even get a handle on one?

[13:13:35.0000] <aklein>
I mean, by accident

[13:13:54.0000] <aklein>
do you know more about the [LenientThis] thing bz was talking about?

[15:37:52.0000] <jyasskin>
Have Service Workers run into trouble yet where a browser changes its Accept header, and all cached responses with "Vary: accept" get invalidated?


2017-05-03
[17:22:17.0000] <wanderview>
jyasskin: can you elaborate?

[17:22:34.0000] <wanderview>
"browser changes its Accept header" means the service worker manipulates Accept?

[22:16:58.0000] <jyasskin>
wanderview: When a page requests an image, say, it sets an Accept header of `image/png,image/svg+xml`. The SW uses cache.get(request) to cache it, and the server returns a Vary:Accept header. Then, a later browser version updates its Accept header to `image/webp,image/png,image/svg+xml`, and https://w3c.github.io/ServiceWorker/#query-cache-algorithm skips

[22:16:59.0000] <jyasskin>
the cache entry in the "For each f in varyHeaders" loop.

[22:17:53.0000] <jyasskin>
I'm not sure if there's a way to get there for entries that are cached in the 'install' step, without explicitly setting the Accept header.

[22:18:28.0000] <jyasskin>
s/cache.get/cache.add/

[00:19:34.0000] <hsivonen>
annevk: checking just in case: Was it a deliberate decision to go with Blink and Presto (and presumably WebKit; can someone check?) and not with IE/Edge and Gecko for bogus Shift_JIS byte sequences? https://hsivonen.com/test/moz/bogus_shift_jis.htm

[00:21:56.0000] <hsivonen>
Indeed Edge still has the alleged IE6 behavior. I didn't bother testing with IE6, because my https setup is XP-incompatible and I no longer have a plain-http place for test cases. (Oops.)

[00:24:37.0000] <annevk>
hsivonen: yes, that was deliberate

[00:24:46.0000] <hsivonen>
annevk: OK.

[00:24:48.0000] <annevk>
hsivonen: I can dig up a bug number if you want

[00:24:59.0000] <annevk>
hsivonen: Encoding used to define the Gecko/IE behavior

[00:25:23.0000] <hsivonen>
annevk: I'd be curious to see if emk commented on the bug

[00:25:59.0000] <annevk>
Hmm, change was made in https://github.com/whatwg/encoding/commit/651f672ee988702da03f56ad8bdfda00b51a21ea

[00:26:13.0000] <annevk>
Going to require some more digging to find corresponding discussion

[00:28:42.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=747762 was after-the-fact discussion

[00:35:45.0000] <hsivonen>
annevk: thanks. commented there.

[00:36:11.0000] <annevk>
hsivonen: I can't find the original discussion, but it seems emk agreed in part and later I added EUDC handling back

[00:37:10.0000] <annevk>
hsivonen: adding that back happened in https://www.w3.org/Bugs/Public/show_bug.cgi?id=24130

[00:38:17.0000] <hsivonen>
I take it that since emk filed a counter-bug only for point #3, points #1 and #2 were indeed ok enough

[00:42:48.0000] <hsivonen>
This is probably the riskiest change in behavior arising from encoding_rs so far

[00:48:06.0000] <annevk>
I tried searching a bit more, but I can't find anything that lead to the original removal of the quirks

[00:50:55.0000] <annevk>
Maybe it was based on something at Opera

[00:51:21.0000] <annevk>
I do remember Opera's encoding engineer not liking PUA so much

[00:51:37.0000] <foolip>
tobie: thanks for commenting on that issue

[00:51:50.0000] <annevk>
I wonder what Peter's up to now

[00:52:56.0000] <tobie>
foolip: np.

[00:53:05.0000] <hsivonen>
I take it that CYRILLIC SMALL LETTER SHORT U has taken the place of a box drawing character in koi8-u after Web Platform Tests were made

[00:53:33.0000] <hsivonen>
rather unusual to have to edit a Web Platform Test for this stuff instead of just deleting the failure expectations :-)

[00:55:31.0000] <annevk>
hsivonen: almost time for https://i.imgur.com/7drHiqrh.jpg?

[01:06:32.0000] <hsivonen>
annevk: unfortunately, we need some kind of meme for "No" arising from key Rust features being nightly-only

[01:49:05.0000] <zcorpan>
So how do I go about making new DOMMatrix("matrix(1,0,0,1,0,0)") throw in workers? annevk Domenic

[01:49:34.0000] <zcorpan>
check if current global object is not the primary global interface?

[01:50:13.0000] <annevk>
zcorpan: "If current global object is not a Window object and init is a string, then throw a TypeError."

[01:50:25.0000] <zcorpan>
thanks

[01:50:32.0000] <nox>
Out of curiosity, why is this forbidden?

[01:53:51.0000] <zcorpan>
nox: https://github.com/w3c/fxtf-drafts/issues/122

[01:55:10.0000] <nox>
Fun.

[01:55:24.0000] <nox>
zcorpan: Will constructors forever be specified by extended attributes btw?

[01:55:42.0000] <nox>
zcorpan: You need prose only because extended attributes can't themselves have extended attributes, right?

[01:56:27.0000] <zcorpan>
nox: yeah, webidl doesn't support this case with syntax

[01:56:49.0000] <nox>
zcorpan: Are there plans to make constructors not rely on extended attributes anymore?

[01:57:10.0000] <nox>
Just curious because in Servo I would like to be able to mark some of them as non-throwing, and I can't do that currently.

[01:58:11.0000] <zcorpan>
nox: there has been talk about more or less radically changing webidl sytnax, but not much progress on that lately. i guess there's a big cost to doing that

[01:58:46.0000] <nox>
Ok, thanks.

[01:59:08.0000] <nox>
hsivonen: "Key Rust features?"

[01:59:58.0000] <annevk>
nox: that sounds like something you should file an issue for against IDL

[02:00:11.0000] <nox>
annevk: Why?

[02:00:20.0000] <annevk>
nox: I hadn't considered the argument that since constructor is an extended attribute we can't have nice things

[02:00:23.0000] <nox>
annevk: IDL has no notion of whether things throw or not.

[02:00:26.0000] <annevk>
nox: others might not have either

[02:00:31.0000] <nox>
Ah.

[02:00:34.0000] <nox>
Will do then

[02:01:01.0000] <annevk>
nox: IDL should maybe have a notion about throwing at some point I think, it's nice to be able to assert things like that

[02:01:22.0000] <nox>
annevk: Did we ever consider having [Abstract] too btw?

[02:01:32.0000] <nox>
E.g. on Node, which doesn't exist on its own.

[02:02:00.0000] <annevk>
nox: probably worth filing an issue for if there are use cases, even if just codegen use cases

[02:02:17.0000] <nox>
Ok.

[02:02:18.0000] <annevk>
nox: I don't recall a discussion myself, just with you here

[02:02:25.0000] <nox>
I guess I'll do some filing today,

[02:02:37.0000] <nox>
when grid-template-areas parsing make me too miserable. :P

[02:03:33.0000] <annevk>
No small feat for a parser to do that given you worked on one for HTML

[02:04:46.0000] <nox>
Ah ah, true.

[02:05:17.0000] <nox>
Just complaining because I was having fun and short compile times in Servo's network code, until I got abducted by stylo's team.

[02:59:10.0000] <annevk>
Where is the last discussion on whether <link> should work like a hyperlink? https://github.com/whatwg/html/issues/2617

[03:04:54.0000] <hsivonen>
nox: SIMD

[03:05:48.0000] <annevk>
hsivonen: so encoding_rs cannot ride the trains because it relies on Rust SIMD?

[03:06:11.0000] <hsivonen>
annevk: not unless we change policy, no

[03:07:01.0000] <annevk>
hsivonen: where did we decide on this policy? Searching for Rust SIMD yields very few emails

[03:07:07.0000] <hsivonen>
(I intend to propose a policy change, but I want to have concrete numbers when I do so)

[03:07:33.0000] <hsivonen>
annevk: the relevant policy is that Firefox uses release-channel rustc

[03:07:59.0000] <hsivonen>
annevk: I don't recall if it was a publicly-recorded discussion

[03:08:15.0000] <annevk>
Oh, SIMD is relatively new to Rust new?

[03:08:54.0000] <MikeSmith>
annevk: Peter at http://www.bridgetech.tv/ still maybe

[03:09:07.0000] <hsivonen>
annevk: no, but the person who was developing it left to Google and then the feature got limboed. The person working on it now isn't doing it as a day job.

[03:09:09.0000] <annevk>
MikeSmith: yeah I think so

[03:10:03.0000] <MikeSmith>
guess he hasn’t worked on encoding-related stuff in a long time and probably doesn’t miss it :)

[03:10:49.0000] <annevk>
TIL Palantir contributes to Rust

[03:11:06.0000] <nox>
hsivonen: I'm -1 on requiring nightly.

[03:11:19.0000] <nox>
We should instead push harder for simd stabilisation.

[03:11:23.0000] <annevk>
MikeSmith: he was a big Unicode fan, but maybe

[03:11:27.0000] <nox>
annevk: And serde too.

[03:12:37.0000] <hsivonen>
being a Unicode fan doesn't imply that on misses encodings. esp. ones other than UTF-8 :-)

[03:13:11.0000] <annevk>
MikeSmith: I wish Mozilla would hire him to make a Rust version of ICU

[03:13:42.0000] <nox>
hsivonen: Do you mean that the simd crate original author left for Google?

[03:14:00.0000] <hsivonen>
nox: that's my understanding. Have I understood incorrectly_

[03:14:16.0000] <nox>
AFAIK you can leave for Google and still have a FOSS life, if you mean huonw he was appled away.

[03:14:35.0000] <hsivonen>
nox: I was mistaken, then.

[03:14:50.0000] <nox>
hsivonen: Just a big corp away. :)

[03:15:55.0000] <nox>
hsivonen: What's the relation between encoding_rs and whatwg btw?

[03:16:46.0000] <hsivonen>
nox: encoding_rs implements a WHATWG spec and the developer of encoding_rs has a GitHub badge when commenting on WHATWG specs.

[03:17:08.0000] <nox>
Ah ah ok.

[03:17:24.0000] <nox>
Was just curious why you people were discussing about it here.

[03:17:45.0000] <nox>
hsivonen: Any clue what's the status for simd in Rust currently? I stopped following this discussion a while ago.

[03:18:32.0000] <hsivonen>
nox: my understanding is that there was enough agreement for BurntSushi to start implementing what was discussed, and he is working on it alone

[03:19:20.0000] <nox>
Ok.

[03:19:26.0000] <hsivonen>
nox: the discussion was here, because I asked about the spec not having a particular pair of IE/Gecko quirks

[03:19:48.0000] <nox>
Quirks, always missing quirks.

[05:06:06.0000] <KiChjang>
what does "non-conforming" mean in the HTML spec?

[05:10:04.0000] <MikeSmith>
KiChjang: it generally means a document-conformance requirement

[05:10:31.0000] <KiChjang>
what does it mean for a document to conform?

[05:12:42.0000] <MikeSmith>
it means the document does not violate any requirements in the spec

[05:13:41.0000] <MikeSmith>
the document-conformance requirements are stated in order to prevent documents from using certain markup cases that have unintended bad effects

[05:14:10.0000] <MikeSmith>
see https://validator.w3.org/nu/about.html#why-validate for a short version

[05:15:39.0000] <MikeSmith>
see https://html.spec.whatwg.org/multipage/introduction.html#syntax-errors for a longer explanation

[05:15:43.0000] <MikeSmith>
and https://html.spec.whatwg.org/multipage/introduction.html#restrictions-on-content-models-and-on-attribute-values for yet more details

[05:17:54.0000] <MikeSmith>
but the shortest answer is:

[05:17:56.0000] <MikeSmith>
> There are some markup cases defined as errors because they are potential problems for accessibility, usability, interoperability, security, or maintainability—or because they can result in poor performance, or that might cause your scripts to fail in ways that are hard to troubleshoot.

[05:18:13.0000] <MikeSmith>
> Along with those, some markup cases are defined as errors because they can cause you to run into potential problems in HTML parsing and error-handling behavior—so that, say, you’d end up with some unintuitive, unexpected result in the DOM.

[05:42:02.0000] <annevk>
zcorpan: you closed https://github.com/whatwg/html/issues/2443 but as far as I can tell the specification doesn't do case-insensitive matching

[05:42:25.0000] <annevk>
zcorpan: I'm reworking the choosing a browsing context algorithm and it seems to just do string comparison

[05:46:17.0000] <zcorpan>
annevk: https://html.spec.whatwg.org/multipage/browsers.html#valid-browsing-context-name-or-keyword allows case-insensitive. I guess I didn't look closely at "The rules for choosing a browsing context given a browsing context name"

[05:47:23.0000] <annevk>
Okay, I'm going to reopen that issue and address it in my patch then

[05:48:34.0000] <zcorpan>
sounds good. thanks!

[06:21:18.0000] <wanderview>
jyasskin: yea, I guess the service worker script would have to be smart enough to re-cache in that case

[07:00:22.0000] <annevk>
Whoa, rewriting those rules took long

[09:26:22.0000] <nox>
I'm just being curious but,

[09:26:39.0000] <nox>
TabAtkins: any clue was grid-template-areas uses strings instead of separating each row by `/` or something?

[09:26:43.0000] <nox>
s/was/why/

[09:28:08.0000] <TabAtkins>
Largely a historical artifact.

[09:31:16.0000] <nox>
TabAtkins: Curiosity satisfied, thanks.

[09:32:11.0000] <wanderview>
JakeA: our plan to do a different useCache setting for importScripts... is that easily applied to dependent module records?  or will module workers still only check the top level script?

[09:34:20.0000] <tobie>
Does the HTML standard address what happens to focus when the user agent looses focus?

[09:37:50.0000] <tobie>
Trying to mitigate password skimming using motion sensors. Turns out that some browsers still consider you're focused in the top-level browsing context when you're actually typing your 1password code. :(

[09:39:35.0000] <tobie>
visibility state doesn't seem to help here either (page is still visible).

[09:39:45.0000] <tobie>
Is there something else I should be looking at?

[09:40:09.0000] <wanderview>
tobie: IntersectionObserver?

[09:40:36.0000] <wanderview>
or maybe that doesn't help either

[09:41:32.0000] <tobie>
wanderview: that tells you whether an element is in the viewport or not, right?

[09:41:43.0000] <wanderview>
yea, I got confused about your use case

[09:42:20.0000] <tobie>
wanderview: yeah, I assumed visibility state was good enough, but it's not. :(

[09:43:41.0000] <annevk>
Domenic: sorry, I think I'm a little tired

[09:49:12.0000] <annevk>
Domenic: are there no <script type=module> web-platform-tests atm?

[09:49:47.0000] <Domenic>
annevk: there's a decent amount, from an initial Microsoft import. There are some bugs we're discovering, both in the tests and the spec; we are trying to upstream as we implement in Chrome.

[09:50:29.0000] <annevk>
Domenic: interesting, I'll note that in https://bugzilla.mozilla.org/show_bug.cgi?id=1330900 as it seems our implementation didn't trigger any change in results

[09:51:05.0000] <Domenic>
annevk: from https://bugzilla.mozilla.org/show_bug.cgi?id=1330900#c5 it seems like they are not being run because modules are preffed off?

[09:51:44.0000] <annevk>
/me blames being tired

[09:52:02.0000] <wanderview>
Domenic: well, we can flip prefs when running WPT tests

[09:52:31.0000] <wanderview>
although I don't see that bug doing it

[09:53:38.0000] <Domenic>
Get some sleep annevk :). Sorry for my late-shifted schedule these days.

[10:04:59.0000] <JakeA>
wanderview: I'm having trouble bending my brain round your message… sorry if this doesn't answer your question: I expect module script static imports to behave like importScripts in regards to cache usage & byte checking

[10:05:48.0000] <wanderview>
JakeA: ok... I just didn't know how easy that was to do with the module spec, etc... I noticed there are different paths in SW spec for classic vs module

[10:07:03.0000] <JakeA>
wanderview: Yeah, it's going to take some work with the html spec I think. https://github.com/w3c/ServiceWorker/issues/908 is kinda related

[10:07:19.0000] <wanderview>
ah, ok

[13:23:57.0000] <smaug>
hmm, since pages seem to misuse Promises, somehow thinking that they are asynchronous, I wonder if there was some way to start to paint between microtasks

[13:24:06.0000] <smaug>
that would be quite evil, sure

[14:49:09.0000] <jyasskin>
I'm surprised to see that https://w3c.github.io/mediacapture-main/#overconstrainederror-object is defining a new Error subclass instead of a DOMException. Should other specs consider doing that too?

[14:50:34.0000] <Domenic>
jyasskin: no. The issue is they need more information fields than just name/message, apparently.

[14:50:51.0000] <Domenic>
We'd like to make that easier in IDL (e.g. `exception Foo : DOMException { ... }` or something) but haven't so far.

[14:51:12.0000] <jyasskin>
Ah, I see.


2017-05-04
[00:58:04.0000] <annevk>
I think I understand browsing contexts now

[01:32:34.0000] <tobie>
^ ...

[01:33:21.0000] <tobie>
annevk: it's reassuring to hear from people so knowledgeable about the platform how complex it really is.

[01:33:34.0000] <tobie>
annevk: you should do this at least weekly.

[01:33:41.0000] <tobie>
annevk: it would boost morale.

[01:33:48.0000] <tobie>
;)

[01:34:47.0000] <annevk>
It is really complex

[01:36:05.0000] <annevk>
The main way I seem to learn is to dive into something. Get stuck. Do other things for six months. Get back to it and maybe understand or get stuck again. Repeat until it's understood.

[01:37:11.0000] <annevk>
It's not entirely clear what happens in those six months (or longer), but somehow being away for a while makes it easier to tackle it next time around. Noticed this happening a few times now, but maybe confirmation bias.

[01:39:12.0000] <annevk>
tobie: a large part of the problem is also that browsers and standards are sometimes out-of-sync and that standards describe things in a rather unclear way, often with bugs

[01:39:41.0000] <annevk>
(or there simply is no standard)

[01:40:20.0000] <tobie>
annevk: I'm totally with you on the background processing of this stuff.

[01:54:22.0000] <tobie>
annevk: Pragmatic Thinking and Learning by Andy Hunt talks about this quite a bit iirc.

[03:19:26.0000] <JakeA>
Domenic: http://output.jsbin.com/hiwokuy/quiet - I've been playing with FileReader vs Response for reading large 900mb files from disk. Turns out response + streams is way more efficient. So, I guess we're all doing something right.

[03:19:47.0000] <JakeA>
Domenic: http://jsbin.com/hiwokuy/edit?js,console,output is probably a better view

[03:25:14.0000] <annevk>
JakeA: it's great that we're more efficient, but I'd love to know why and if that's true across browsers

[03:25:34.0000] <annevk>
JakeA: because in principle it seems like it should be fairly close

[03:26:22.0000] <JakeA>
annevk: Yeah, it might be highlighting an issue with FileReader in Chrome more than anything. It seems to get slower as it goes on

[03:28:27.0000] <JakeA>
I wonder if it's rebuilding .result on every progress event or something

[03:29:26.0000] <JakeA>
The spec is kinda hand-wavey when it comes to allocation of memory

[03:30:31.0000] <annevk>
JakeA: oh yeah, it seems like result just keeps getting bigger

[03:30:42.0000] <annevk>
JakeA: which means new object each time given that it's either a string or buffer

[03:31:11.0000] <annevk>
JakeA: wow, can't believe they just copied that from XMLHttpRequest's responseText

[03:31:16.0000] <annevk>
JakeA: really hope that isn't true

[03:35:05.0000] <JakeA>
agreed, espeically as size is known

[04:27:12.0000] <annevk>
smaug: how does about:blank work?

[04:27:26.0000] <annevk>
smaug: can I navigate an about:blank document to about:blank?

[04:27:47.0000] <annevk>
smaug: if I navigate an initial about:blank document to about:blank, is it still initial?

[04:29:00.0000] <smaug>
hmm hmm

[04:29:21.0000] <smaug>
if you navigate initial about:blank to anything, the latter document won't be initial anymore

[04:29:45.0000] <smaug>
but does navigating about:blank to about:blank work

[04:30:04.0000] <smaug>
it probably does with iframes

[04:30:14.0000] <smaug>
hsivonen should know all about about:blank :)

[04:30:52.0000] <annevk>
I think hsivonen gave up and started working on encoding_rs instead

[04:32:38.0000] <annevk>
smaug: different question, is session history tied to the tab group in Gecko?

[04:33:55.0000] <mkwst>
annevk: Judging from the explosion in my github inbox, I apparently owe you some responses about link targeting.

[04:34:22.0000] <smaug>
annevk: session history and tab group? no

[04:34:26.0000] <smaug>
quite different concepts

[04:34:27.0000] <mkwst>
annevk: Is there a central question I can answer, or do I need to sit down and read through threads to page context back in? :)

[04:34:29.0000] <annevk>
mkwst: yeah, that would help, though I also encounter lots of legacy pings to you that went unanswered

[04:34:40.0000] <smaug>
I mean, tab group may contain several top level browsing contexts

[04:34:47.0000] <annevk>
mkwst: there's no central question, there's lots of questions

[04:34:48.0000] <smaug>
session history is per top level browsing context

[04:34:53.0000] <mkwst>
annevk: Yup. Which is why I'm trying to follow up on them now.

[04:35:20.0000] <annevk>
mkwst: the browsing context name is probably the most interesting

[04:35:42.0000] <annevk>
smaug: okay

[04:35:55.0000] <mkwst>
Ok. None of this has been top-of-mind recently, but I'll try to give you reasonable feedback quickly.

[05:26:33.0000] <hsivonen>
annevk: https://searchfox.org/mozilla-central/source/testing/web-platform/tests/encoding/iso-2022-jp-encoder.html#16 thinks that U+FF90 encodes in the JIS X 0208 state of ISO-2022-JP, and Gecko with uconv passes

[05:26:41.0000] <hsivonen>
annevk: the spec disagrees

[05:26:49.0000] <hsivonen>
annevk: what might the story be here?

[05:27:17.0000] <hsivonen>
fun times that the test writer calls this "basics"

[05:30:54.0000] <hsivonen>
oops. I take back the part about uconv passing

[05:31:04.0000] <hsivonen>
still, what's the deal with that test case?

[05:32:13.0000] <annevk>
hsivonen: possibly fallout of https://www.w3.org/Bugs/Public/show_bug.cgi?id=27256?

[05:34:24.0000] <annevk>
hsivonen: I'm somewhat surprised this hasn't come up until now

[05:35:11.0000] <annevk>
hsivonen: it does seem like https://github.com/whatwg/encoding/commit/19b0ebf0e48c3a607ab7623b5b272642dd59d6e7 ended up removing Katakana support from the encoder and I'm not sure if that was intentional

[05:36:28.0000] <annevk>
hsivonen: how does FF90 encode inside jis0208 though?

[05:45:09.0000] <JakeA>
annevk: hah, https://bugs.chromium.org/p/chromium/issues/detail?id=674903 FileReader.readAsArrayBuffer() - Reading large files causes memory leak

[05:52:34.0000] <annevk>
JakeA: no idea how we prioritize those kind of bugs in Firefox, but those are the kind of reasons folks go native

[05:53:06.0000] <annevk>
JakeA: not being able to process 10 GiB in a browser in 2017, who'd have thought

[05:53:50.0000] <annevk>
JakeA: I'm really glad the memory-conservative approach for fetch() won out now though

[05:53:51.0000] <wanderview>
annevk: we prioritize memory leaks pretty high

[05:54:22.0000] <JakeA>
annevk: As in stream consuming? Yeah, it seems silly that we considered anything else

[05:54:41.0000] <annevk>
JakeA: yeah, requiring explicit clones

[05:59:24.0000] <wanderview>
annevk: alex scolded me about requiring explicit clones on twitter recently... https://twitter.com/slightlylate/status/850819777022967808

[05:59:46.0000] <wanderview>
or maybe it was more about the form of clone

[06:00:03.0000] <wanderview>
I dunno, he seems unhappy with the current state

[06:00:53.0000] <annevk>
wanderview: yeah, I think he's wrong

[06:00:59.0000] <annevk>
wanderview: he did indeed argue against it

[06:10:22.0000] <JakeA>
I'm pretty certain we made the right choice

[06:12:35.0000] <JakeA>
annevk: fwiw, the filereader route in Firefox is fast, but reader.result is null during progress events which seems wrong http://output.jsbin.com/yazetoy/quiet

[06:13:01.0000] <annevk>
JakeA: ah okay, it seems better than a giant memory hole though

[06:13:16.0000] <wanderview>
JakeA: I'll file a bug and CC baku

[06:13:24.0000] <annevk>
JakeA: because if you want to return intermediate results, there's no way to do that with the current API and not have a giant memory hole

[06:13:37.0000] <annevk>
JakeA: I think I'd argue we should align the world with Firefox

[06:13:48.0000] <JakeA>
annevk: oh yeah, if we're playing top browser trumps then Firefox is winning

[06:14:28.0000] <JakeA>
annevk: hmm, I wonder if Chrome is creating a new buffer per progress… testing

[06:15:22.0000] <annevk>
JakeA: you have to, they're immutable just like strings

[06:15:42.0000] <wanderview>
annevk: well, you have to make a new wrapper... the underlying memory could be a fixed buffer, no?

[06:15:53.0000] <annevk>
JakeA: could be the same backing data, but that'd be a pretty unique implementation strategy for ArrayBuffer just for FileReader

[06:15:57.0000] <annevk>
wanderview: ^

[06:16:23.0000] <JakeA>
annevk: I thought the best course would be to allocate a buffer for the blob's size, then update the buffer during progress events

[06:16:26.0000] <annevk>
wanderview: I basically don't think anyone has done that work

[06:16:54.0000] <JakeA>
annevk: So the array buffer would be the total size in the first progress event, but only .loaded bytes would be written to it

[06:17:04.0000] <annevk>
JakeA: interesting, could work

[06:17:14.0000] <annevk>
JakeA: doesn't work for the string version though

[06:17:27.0000] <JakeA>
oh yeah the string version is screwed

[06:17:41.0000] <annevk>
(though for strings JavaScript engines do have many types to chose from, so optimizations might be possible)

[06:18:02.0000] <Domenic>
It'd have to be copy on write if you did distinct wrappers with same underlying memory.

[06:18:25.0000] <annevk>
Good point

[06:18:41.0000] <annevk>
And all your fast access optimizations are gone

[06:18:45.0000] <annevk>
Gets complicated fast

[06:19:01.0000] <JakeA>
Yeah, Chrome creates a new buffer per progress

[06:19:32.0000] <annevk>
JakeA: given it's a largely legacy API I'd recommend updating the spec to align with Firefox

[06:19:51.0000] <JakeA>
Domenic: I'm not sure what that means… wouldn't I be able to new Uint8Array(buffer, 0, progressEvent.loaded) without slowing things down?

[06:20:21.0000] <annevk>
JakeA: Domenic was replying to wanderview's suggestion

[06:20:28.0000] <JakeA>
ah soz

[06:20:50.0000] <Domenic>
I'm not sure it's legacy until we have a good replacement

[06:21:06.0000] <Domenic>
blob.stream() FTW

[06:21:13.0000] <JakeA>
Domenic: new Response(file) works today

[06:21:36.0000] <annevk>
new Request(file).body works tomorrow

[06:21:37.0000] <wanderview>
JakeA: which conveniently removes the progress events

[06:21:40.0000] <Domenic>
Ah right it's coming back to me now

[06:21:58.0000] <JakeA>
wanderview: well, you can use streams for that

[06:22:22.0000] <wanderview>
I live in a world without streams

[06:22:25.0000] <JakeA>
:D

[06:23:32.0000] <JakeA>
I'd like blob to take on .body and .json, .text, maybe some of the others

[06:23:39.0000] <JakeA>
Like fetch

[06:23:48.0000] <JakeA>
But I'd settle for stream()

[06:26:29.0000] <annevk>
Yeah, .body and .json() would make slightly more sense to me

[06:26:48.0000] <wanderview>
JakeA: can you make your jsbin into a WPT test?  I don't see anything that does progress+result: https://github.com/w3c/web-platform-tests/tree/master/FileAPI

[06:26:52.0000] <annevk>
Although maybe it's a little different since you can consume it multiple times

[06:27:38.0000] <wanderview>
I dunno... seems like it would be nicer to expose blob.stream and then have StreamToJSON(), StreamToText(), etc helpers

[06:27:53.0000] <JakeA>
wanderview: I'll put it on my TODO list, but I should be getting back to I/O slides. I'm totally procrastinating. I wish there was a jsbin style way to submit web platform tests :D

[06:28:05.0000] <JakeA>
I reckon we'd get way more contributions if there was

[06:28:37.0000] <wanderview>
JakeA: I'll write a gecko bug for now (I stopped before when annevk said he liked firefox)

[06:28:51.0000] <JakeA>
fwiw the spec isn't clear how progress events should work. And Chome's interpretation is causes major problems

[06:29:11.0000] <wanderview>
ok, maybe a spec issue thne

[06:29:11.0000] <JakeA>
wanderview: well, I agree with annevk, I don't think it's clear that Firefox is in the wrong

[06:29:16.0000] <annevk>
I'd just file an issue against File API

[06:29:26.0000] <annevk>
and have them deal with it

[06:29:29.0000] <wanderview>
I like that solution ^^^ especially since I don't have to do anything

[06:29:39.0000] <annevk>
I can do it I guess

[06:29:55.0000] <wanderview>
oh, I misread "I'd" as "I'll"

[06:30:10.0000] <JakeA>
I'll do it

[06:30:20.0000] <wanderview>
I need Domenic's extension to find the correct File API spec for me...

[06:30:22.0000] <JakeA>
I'm writing a Chrome bug anyway

[06:30:50.0000] <annevk>
JakeA: wanderview: https://github.com/w3c/FileAPI/issues/79

[06:30:55.0000] <wanderview>
JakeA: doesn't google have some kind of mechanical turk way of turning jsbin's into WPT tests via interns?

[06:30:56.0000] <tobie>
JakeA: a tool to simplify test submission by devs was already in discussion in the test the  web forward days

[06:31:04.0000] <tobie>
JakeA: still think it's a great idea

[06:32:04.0000] <wanderview>
having spec changes paired with WPT tests has been a huge benefit, IMO

[06:32:06.0000] <JakeA>
tobie: Yeah, a jsbin type thing but supports the serverside stuff too. Then a button to convert it into a PR

[06:32:08.0000] <wanderview>
moar WPT tests

[06:32:43.0000] <annevk>
hsivonen: let me know if you want me to investigate that iso-2022-jp thing; I can file an issue against whatwg/encoding

[06:32:49.0000] <tobie>
yup. PR conversion is actually rather easy to do for simple cases.

[06:34:22.0000] <annevk>
hsivonen: I wrote that test btw

[06:34:45.0000] <annevk>
hsivonen: per https://github.com/w3c/web-platform-tests/commits/master/encoding/iso-2022-jp-encoder.html

[06:44:40.0000] <annevk>
Hmm, I wanted to get to error documents today

[06:44:51.0000] <annevk>
But about:blank research won

[07:32:49.0000] <jugglinmike>
Domenic: I'm trying to find justification for a Chromium test: https://chromium.googlesource.com/chromium/src/+/master/third_party/WebKit/LayoutTests/http/tests/serviceworker/immutable-prototype-serviceworker.html

[07:33:03.0000] <jugglinmike>
which uses https://chromium.googlesource.com/chromium/src/+/master/third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/immutable-prototype-serviceworker.js

[07:33:26.0000] <jugglinmike>
I thought this might fall under WebIDL, but I can't see anything there

[07:33:58.0000] <jugglinmike>
for instance, there's this line: "Unless otherwise specified, the [[Extensible]] internal property of objects defined in this section has the value true."

[07:34:05.0000] <Domenic>
jugglinmike: https://heycam.github.io/webidl/#interface-prototype-object second to last sentence

[07:34:14.0000] <Domenic>
And https://heycam.github.io/webidl/#platform-object-setprototypeof

[07:35:07.0000] <jugglinmike>
oh geez

[07:35:25.0000] <jugglinmike>
Forgive me--that's so obvious. My problem is that I've been looking at this document https://www.w3.org/TR/WebIDL-1/#interface-prototype-object

[07:35:34.0000] <jugglinmike>
where [[SetPrototypeOf]] is not referenced

[07:36:13.0000] <wanderview>
jugglinmike: someone once told me "TR" stands for trash... best to look at the editors drafts

[07:36:30.0000] <jugglinmike>
haha, noted

[07:38:55.0000] <Domenic>
More points in favor of my extension

[07:39:25.0000] <Domenic>
(my not-yet-existing extension: https://twitter.com/domenic/status/859235099187040257 )

[07:40:04.0000] <wanderview>
Domenic: its been 2.5 days... no extension yet?

[10:50:51.0000] <annevk>
rbyers: https://github.com/whatwg/html/issues/1826

[11:12:56.0000] <rbyers>
annevk: Damn, sorry I missed that.

[11:15:21.0000] <jochen__>
any advice how I'd best write tests for https://github.com/whatwg/html/pull/2623 ?

[11:15:36.0000] <jochen__>
specifically, what's the standard way for wpt to check that a download was succesful

[12:31:16.0000] <annevk>
jochen__: manual tests I guess

[12:31:38.0000] <annevk>
jochen__: prolly worth filing a wpt issue to ask for automation

[12:31:59.0000] <annevk>
jochen__: hopefully webdriver support will come eventually

[15:04:28.0000] <zcorpan>
TabAtkins: could https://rawgit.com/tabatkins/bikeshed/master/docs/index.html#metadata-default-highlight apply only to <pre> and <xmp>, but not <code>?

[15:05:11.0000] <zcorpan>
TabAtkins: I tried using this in Geometry APIs but it is applied to <dfn><code>... which is not what I want

[15:38:06.0000] <TabAtkins>
Sure, file an issue.

[15:39:29.0000] <TabAtkins>
Btw, you can access the docs at tabatkins.github.io/bikeshed/


2017-05-05
[23:19:29.0000] <XhmikosR>
MikeSmith: I see a lot of unused gif images in https://github.com/w3c/markup-validator/. Any reason you keep them?

[23:35:16.0000] <MikeSmith>
XhmikosR: no idea, I don’t really maintain that code

[23:35:47.0000] <MikeSmith>
if I had my way we would have just killed that validator long ago and replaced it with the HTML checker

[23:36:42.0000] <MikeSmith>
but if you think the gif images should be yanked lemme know

[23:36:57.0000] <MikeSmith>
or raise a PR and I’ll review it asap

[23:37:29.0000] <XhmikosR>
MikeSmith: I've found some that are certainly unused. But I see some others which are being referenced without the extention and they have a PNG equivalent too

[23:37:47.0000] <XhmikosR>
for example valid-css.gif and valid-css.png

[23:41:03.0000] <MikeSmith>
OK if you’ve already investigated it then I’d suggest just raising a PR with a patch that deletes whatever unused ones you found

[23:42:14.0000] <XhmikosR>
all right

[00:36:41.0000] <annevk>
smaug: outstanding ping in https://github.com/whatwg/html/issues/2615

[00:37:54.0000] <smaug>
annevk: connected to any document?

[00:38:07.0000] <annevk>
smaug: a document that's fully active

[00:38:15.0000] <annevk>
only those

[00:38:19.0000] <smaug>
ok, from a browsing context document

[00:38:32.0000] <annevk>
yeah, and one that's not navigated away or some such

[00:39:33.0000] <smaug>
annevk: just a sec, I need to fix burning tree

[00:49:46.0000] <smaug>
annevk: so conceptually I'd prefer links to be connected

[00:50:40.0000] <annevk>
smaug: I can ask Chrome to gather data

[00:50:50.0000] <annevk>
smaug: it's blocking some other work I want to do in HTML, but I'll manage

[01:38:08.0000] <JakeA>
tobie: thinking about that testing site again… I wonder if the w3 would pay someone like Remy Sharp to set it up

[01:39:09.0000] <tobie>
JakeA: the W3C has never given me a cent for any of the infra I built for it, so short answer is no.

[01:39:20.0000] <JakeA>
bleh

[01:40:58.0000] <tobie>
JakeA: and the tendency to attribute credit to itself for it is sort of astounding, e.g.: https://twitter.com/wseltzer/status/860234933985529857

[01:41:25.0000] <JakeA>
*longest sigh*

[01:41:57.0000] <tobie>
JakeA: that said, you work for a company with deep pockets

[01:42:21.0000] <JakeA>
tobie: true. I'll float the idea when I'm out in SF

[01:44:56.0000] <MikeSmith>
plh still has channels to get testing stuff funded

[01:45:52.0000] <MikeSmith>
and at the risk of pointing out the obvious and coming across as defensive: the W3C is not some monolithic abstraction that does things

[01:45:58.0000] <MikeSmith>
that tweet is from a person

[01:46:03.0000] <MikeSmith>
one person

[01:49:51.0000] <hsivonen>
annevk: I made https://hsivonen.com/test/moz/iso-2022-jp-encoder.htm

[01:50:19.0000] <hsivonen>
it shows that Gecko, Blink and Presto encode half-width Katakana without NCR

[01:50:42.0000] <hsivonen>
didn't test WebKit, because I'm too lazy to switch cables around

[01:50:42.0000] <tobie>
MikeSmith: sure, at some point it's a structural issue, though.

[01:51:01.0000] <hsivonen>
the test harness doesn't work right in Microsoft browsers

[01:51:23.0000] <hsivonen>
do I need to submit a form and echo back the results from a server to test encoders in IE and Edge?

[01:51:29.0000] <hsivonen>
or is there a client-side way?

[01:52:09.0000] <annevk>
hsivonen: dunno

[01:52:58.0000] <hsivonen>
anyway, so far, this is already a strong indication of a spec bug

[01:53:22.0000] <annevk>
hsivonen: with ﾐ in Safari TP I get the same results as in Firefox

[01:53:48.0000] <annevk>
hsivonen: agreed

[01:54:41.0000] <hsivonen>
I'll file

[01:55:02.0000] <annevk>
hsivonen: if you already know how to fix it that'd be appreciated, but I can make time for this

[01:57:23.0000] <hsivonen>
https://github.com/whatwg/encoding/issues/105

[01:57:34.0000] <hsivonen>
annevk: I don't yet know how to fix

[01:57:54.0000] <hsivonen>
I'll probably take a look at other oranges before I come back to this

[01:58:45.0000] <annevk>
hsivonen: sounds good, I'll investigate later today

[02:25:08.0000] <MikeSmith>
JakeA: if you have a few minutes, think you might be able to give a good explanation at https://stackoverflow.com/questions/43800998/why-do-fetch-errors-not-have-a-stacktrace-in-my-single-page-application

[02:25:42.0000] <MikeSmith>
or a pointer to somewhere you’ve previously explained it

[02:25:55.0000] <hsivonen>
hmm. privacy badger's presence is visible in the Live DOM Viewer

[02:26:07.0000] <hsivonen>
that seems bad for at least two reasons

[02:26:40.0000] <hsivonen>
1) Unexpected DOM shape might break scripts' expectations and 2) you don't want sites to detect privacy badger too easily

[02:44:17.0000] <hsivonen>
annevk: https://github.com/w3c/web-platform-tests/blob/25c529dc883227d6417ab25cd167c135cba72541/encoding/iso-2022-jp-decoder.html wants an escape to ASCII at the start of the stream to be an error even though it doesn't want useless non-empty ASCII-to-ASCII transitions to be errors later

[02:44:54.0000] <hsivonen>
annevk: I take it that it's intentional that an initial transition to ASCII is no longer an error?

[02:47:40.0000] <annevk>
hsivonen: I probably decided to simplify that

[03:16:41.0000] <annevk>
You'd think it would be easier to find a halfwidth to fullwidth algorithm

[03:27:48.0000] <annevk>
And it's not as easy as just subtracting a number

[04:11:26.0000] <annevk>
hsivonen: I posted a fix now

[04:29:10.0000] <annevk>
hsivonen: https://github.com/whatwg/encoding/pull/103 is also still awaiting feedback from you

[04:56:47.0000] <JakeA>
MikeSmith: http://stackoverflow.com/a/43804340/123395 cheers!

[04:58:12.0000] <MikeSmith>
JakeA: superーcheers

[05:22:31.0000] <mikeecb>
hi all, i know that initEvent(type, bubbles, cancelable) is a web standard (but redundant) as i see it on w3c. is new Event(type [, eventInitDict]) a web standard? it isn't supported by IE and i don't see it in the IDL Definition on w3c?

[05:22:41.0000] <mikeecb>
https://www.w3.org/TR/DOM-Level-2-Events/events.html

[05:23:02.0000] <annevk>
mikeecb: you want https://dom.spec.whatwg.org/

[05:23:09.0000] <hsivonen>
annevk: wait, what? iso-2022-jp encoder doesn't do just a Katakana by code point offset but other normalization, too?

[05:23:33.0000] <mikeecb>
annevk: i was looking at that too - how does whatwg that related to w3c?

[05:23:55.0000] <mikeecb>
i see "new Event(type [, eventInitDict])" on https://dom.spec.whatwg.org/ but not https://www.w3.org/TR/DOM-Level-2-Events/events.html

[05:24:38.0000] <annevk>
hsivonen: http://searchfox.org/mozilla-central/source/intl/icu/source/common/ucnv2022.cpp#1597 is an alternative way to implement NFKC for that range of code points

[05:24:48.0000] <annevk>
hsivonen: or did you mean something else?

[05:25:23.0000] <annevk>
mikeecb: WHATWG is its own thing, that produces standards implemented by browsers and other software

[05:25:32.0000] <annevk>
mikeecb: W3C sometimes copies our work, see https://wiki.whatwg.org/wiki/Fork_tracking

[05:26:40.0000] <hsivonen>
annevk: wow. I had thought half-width to full-width Katakana was a matter of subtracting a constant from code point value, but it's actually more complicated. Also the four punctuation marks.

[05:27:18.0000] <annevk>
hsivonen: yeah, that was the complaining from me earlier in this channel

[05:28:03.0000] <hsivonen>
oh. I missed that part earier

[05:28:46.0000] <annevk>
NFKC seems like the best solution since adding an extra table just creates more opportunities for bugs

[05:29:13.0000] <hsivonen>
/me goes back to adding unrelated ISO-2022-JP-only special-casing to encoding_rs

[05:29:45.0000] <mikeecb>
annevk: thanks! - what does w3c do that whatwg doesn't? it sounds like browsers (not ie) use whatwg as a source-of-truth instead of w3c, can you confirm this

[05:30:41.0000] <annevk>
mikeecb: W3C publishes many more standards than https://spec.whatwg.org/ such as CSS and WebRTC

[05:31:06.0000] <annevk>
mikeecb: Microsoft also uses WHATWG as a source-of-truth in my experience, but they won't publicly admit to this

[05:31:34.0000] <hsivonen>
mikeecb: the W3C adds patent non-aggression commitments from Members

[05:32:00.0000] <annevk>
/me -> lunch

[05:32:25.0000] <mikeecb>
annevk: thanks!

[05:33:01.0000] <mikeecb>
hsivonen: what's that? (in layman's)

[05:35:55.0000] <hsivonen>
(there may be more subtlety when it comes to being able to relatiate but) the Members who where in a WG at the time a spec got to REC, if they didn't explicitly say they don't let some of their patents to be practiced allow the implementations of the spec to practice their patents royalty-free

[05:36:07.0000] <annevk>
MikeSmith: if you could look into Travis for whatwg/encoding that'd be good

[05:36:11.0000] <hsivonen>
s/relatiate/retaliate/

[05:36:26.0000] <annevk>
MikeSmith: I think we basically need to check less or not use the "curl" version of the checker as it times out a lot

[05:36:47.0000] <MikeSmith>
oh

[05:37:01.0000] <MikeSmith>
I guess we need to move the checker to another server

[05:37:45.0000] <mikeecb>
hsivonen: interesting, thanks!

[05:39:01.0000] <MikeSmith>
annevk: my server has only 1GB of RAM and limited CPU so I think it may not be able to handle the load it is getting now from the checker

[05:39:30.0000] <MikeSmith>
anyway I will look into what else we can do

[05:40:04.0000] <MikeSmith>
could always go back to downloading vnu.jar and using that

[05:40:22.0000] <MikeSmith>
or fall back to that if times out

[05:55:35.0000] <annevk>
MikeSmith: only validating the HTML resources that change would do a lot

[05:56:19.0000] <annevk>
MikeSmith: anyway, the main problem I have right now is that it's unclear whether I can land things

[05:56:58.0000] <MikeSmith>
in the case of the Encoding spec, I am not sure how do I determine which HTML resources have changed

[05:57:14.0000] <MikeSmith>
because they’re not under version control, those files

[05:57:24.0000] <MikeSmith>
they are just generated by the build, right?

[05:57:47.0000] <annevk>
MikeSmith: yeah, I guess you'd only validate those if the Python script is changed

[05:57:56.0000] <MikeSmith>
yeah

[05:58:21.0000] <MikeSmith>
anyway for now I guess I can just file it back to using the vnu.jar file to check

[05:59:09.0000] <MikeSmith>
that should be more reliable

[05:59:39.0000] <MikeSmith>
and maybe curl has some way to automatically retry a request

[05:59:46.0000] <MikeSmith>
I kinda thought it did

[06:00:00.0000] <MikeSmith>
if it times out

[06:05:30.0000] <annevk>
MikeSmith: I guess you mean I should just revert the last commit?

[06:05:44.0000] <MikeSmith>
annevk: yeah, for now

[06:06:04.0000] <MikeSmith>
I can fix it right this weekend

[06:07:40.0000] <MikeSmith>
would first like to get a patch written up for making multipage dfn actually work

[06:08:51.0000] <annevk>
kk

[06:34:37.0000] <JonathanNeal>
What was the resolution for a shorthand for the top/left/bottom/right properties? Was there one?

[08:28:22.0000] <jugglinmike1>
Mek: wanderview I had an idea for Service Workers test structuring yesterday--wondering what you folks think

[08:28:37.0000] <jugglinmike1>
Would it be valid to call `registration.unregister` as part of the test set up logic?

[08:28:50.0000] <jugglinmike1>
Instead of jumping through hoops to defer that invocation until the test is complete?

[08:30:01.0000] <jugglinmike1>
Given that the current client won't actually unregister until unload, anyway

[08:30:42.0000] <wanderview>
jugglinmike1: most of the tests do have an unregister_and_register call

[08:32:25.0000] <jugglinmike1>
wanderview: yes, but I think they *also* need a final `unregister` call

[08:32:42.0000] <wanderview>
jugglinmike1: I think its good practice to try to do a final unregister, yes

[08:32:45.0000] <jugglinmike1>
because otherwise a subsequent run will use an old version

[08:33:33.0000] <jugglinmike1>
Agreed. The reason I'm bugging you now, though, is that I'm wondering if we can change what we mean by "a final unregister"

[08:34:15.0000] <jugglinmike1>
basically, if instead of a structure like: (1) unregister_and_register, (2) test body, (3) unregister

[08:34:18.0000] <jugglinmike1>
we do

[08:34:31.0000] <jugglinmike1>
(1) unregister_and_register_and_unregister, (2) test body

[08:35:59.0000] <jugglinmike1>
as I understand it, that second version will guarantee that every test run has some associated service worker, and that that worker will be unregistered when unload occurs

[08:36:26.0000] <jugglinmike1>
in other words, it's not necessary to try to defer the call to `unregister` to the end of the test, because it doesn

[08:36:42.0000] <wanderview>
jugglinmike1: I think that would be testing a weird state... and could have unexpected behavior if you transition a test state where there are no controlled clients (and some tests don't have any controlled clients)

[08:36:44.0000] <jugglinmike1>
t effect the current execution anyway

[08:41:16.0000] <jugglinmike1>
wanderview: What do you mean by "transition a test state"? Navigate to a distinct test? Or do something within the test that used unregister_and_register_and_unregister ?

[08:42:22.0000] <wanderview>
jugglinmike1: I mean if you immediately unregister immediately, and there are no controleld clients, then the service worker will go away

[08:42:30.0000] <wanderview>
jugglinmike1: and not all tests keep a controlled client throughout the test

[08:43:53.0000] <jugglinmike1>
oh, maybe I'm missing something about "controlled clients"

[08:44:22.0000] <wanderview>
jugglinmike1: the test registering the service worker is not immediately a controlled client... you need to load a frame covered by the scope, etc

[08:44:54.0000] <jugglinmike1>
This non-normative note is difficult for me to interpret: "It is important to note that the currently controlled service worker client's active service worker’s containing service worker registration is effective until all the service worker clients (including itself) using this service worker registration unload. "

[08:45:43.0000] <wanderview>
jugglinmike1: the spec defines "using the the registration" and it doesn't mean having a reference to the DOM ServiceWorkerRegsitration object... it means being controlled by the SW

[08:46:07.0000] <jugglinmike1>
ah, right. And to your point about iframes

[08:46:25.0000] <jugglinmike1>
that's a common pattern for tests--register, create an iframe, then do things within the iframe

[08:46:49.0000] <jugglinmike1>
and this cockemamy unregister_and_register_and_unregister would break that completely

[08:48:02.0000] <jugglinmike1>
okay, I'm satisfied. Thanks for walking me through that, wanderview

[08:48:12.0000] <wanderview>
np

[08:48:21.0000] <wanderview>
testing service workers is annoying :-\

[08:49:21.0000] <jugglinmike1>
Definitely! I am always looking for ways to make it less annoying

[08:50:14.0000] <jugglinmike1>
wanderview: to that end, you might have something to say about this: https://github.com/bocoup/web-platform-tests/commit/f6775c1991db37973b162d7698f04f2bf4eba80d

[08:50:47.0000] <jugglinmike1>
What I'm trying to do there is allow WPT to recognize files whose name match the pattern "*.service-worker.js"

[08:51:11.0000] <jugglinmike1>
and produce a corresponding document that will run that in a service worker

[08:52:34.0000] <jugglinmike1>
This could make some kinds of service worker tests easier to manage (fewer files), and would hopefully reduce the amount of duplicated (or worse, slightly-different) logic written

[08:53:37.0000] <jugglinmike1>
but it would also let us hook in to the current "*.any.js" convention (which currently produces tests that run in document scope and in a Dedicated Worker scope)

[08:55:06.0000] <jugglinmike1>
that last part was requested in November of last year: https://github.com/w3c/web-platform-tests/issues/4210

[08:56:32.0000] <wanderview>
jugglinmike1: sorry, not sure I am familiar enough with WPT framework to really comment

[08:57:12.0000] <jugglinmike1>
Understood. Probably should have asked before over-sharing like that :P

[08:57:36.0000] <wanderview>
no, its fine

[08:57:52.0000] <wanderview>
sorry, just in the middle of something so I can't look deeply

[08:57:54.0000] <jgraham>
jugglinmike1: Whereas I don't know enough about service workers to comment :)

[08:58:36.0000] <jugglinmike1>
In that case, I'm the expert and everything I write should be merged without hesitatioin

[09:00:28.0000] <jgraham>
Hehe.

[09:01:06.0000] <jgraham>
But when you have a compelte patch I'm happy to try to learn enough about SW to review it (or at least ask someone who knows). I think the idea in principle is sound.

[09:02:52.0000] <jugglinmike1>
thanks!

[13:35:22.0000] <JonathanNeal>
Hello again. What was the (or was there a) resolution for a shorthand for the top/left/bottom/right properties?


2017-05-06
[22:29:30.0000] <MikeSmith>
JonathanNeal: I guess TabAtkins would know

[22:30:05.0000] <TabAtkins>
Not yet, no

[22:40:18.0000] <annevk>
TabAtkins: do you keep track of all your GitHub pings?

[22:40:46.0000] <TabAtkins>
Yes

[22:41:11.0000] <annevk>
Cool, I'll wait then

[22:42:20.0000] <MikeSmith>
by the way, has anybody else noticed over the last month or so that you seem to not always be getting github e-mail notifications for some mentions and review requests?

[22:42:53.0000] <MikeSmith>
because I’m pretty sure some of mine have not been getting to me

[22:43:08.0000] <annevk>
GitHub only ever emails me after I report someone for spam (and I asked them to stop doing that, but that's hard apparently)

[22:43:23.0000] <MikeSmith>
eh?

[22:43:41.0000] <annevk>
MikeSmith: https://github.com/notifications is my inbox

[22:43:45.0000] <MikeSmith>
ah

[22:44:18.0000] <MikeSmith>
yeah well I think that will not work for me, given the number of repos I’m watching

[22:44:21.0000] <annevk>
I appreciate the deduplication of lots of messages in a single issue to one line a lot

[22:44:28.0000] <MikeSmith>
ah yeah

[22:44:34.0000] <MikeSmith>
that is a pluc

[22:44:38.0000] <MikeSmith>
*plus

[22:44:52.0000] <MikeSmith>
but my e-mail client also deals with that pretty well

[22:44:56.0000] <annevk>
And yeah, I stopped watching stuff, just like I unsubscribed from lists

[22:46:20.0000] <MikeSmith>
well I have always for years had a huge volume of e-mail notifications, from bugzilla long before github

[22:46:34.0000] <MikeSmith>
and still also from other bugilla, b.m.o and webkit

[22:47:06.0000] <MikeSmith>
I have a way of managing it OK in my e-mail client

[22:47:21.0000] <MikeSmith>
but it sorta breaks down when I don’t actually get the expected notifications

[22:48:08.0000] <MikeSmith>
not sure if the reason I’m not getting them is because of github failing to send them to me for some reason, or instead my e-mail server filtering them out as spam

[22:48:20.0000] <MikeSmith>
I kinda really doubt it'

[22:48:38.0000] <MikeSmith>
*kinda really doubt it’s my e-mail server doing it

[22:50:16.0000] <MikeSmith>
anyway I’ve fallen back to manually checking https://github.com/pulls/review-requested and https://github.com/pulls/mentioned etc periodically.. though I don’t always remember to do it every day

[22:51:22.0000] <MikeSmith>
annevk: anyway in other news, I have a patch ready for multipage dfn.js

[22:51:29.0000] <MikeSmith>
will raise a PR for it shortly

[22:51:39.0000] <annevk>
Oh cool

[22:52:20.0000] <MikeSmith>
yeah though in the process I realize we can’t merge it at resources.whatwg.org

[22:53:08.0000] <MikeSmith>
since I guess other specs are using dfn.js, and this patch changes it to rely on the JSON data file from wattsi

[22:53:24.0000] <MikeSmith>
even for dfn handline in single-page

[22:53:30.0000] <MikeSmith>
*handling

[22:54:15.0000] <MikeSmith>
because I assume for HTML we don’t want to maintain two separate mechanisms for single-page vs multipage

[22:55:30.0000] <MikeSmith>
so if we don’t want the multipage-enabled dfn.js at https://resources.whatwg.org/dfn.js I’m not sure where else it should god

[22:55:33.0000] <MikeSmith>
*go

[22:55:42.0000] <MikeSmith>
but I guess in html-build

[22:56:03.0000] <annevk>
We could I suppose have a different dfn.js for multipage

[22:56:17.0000] <annevk>
Until some other spec needs it (hopefully never)

[22:56:30.0000] <MikeSmith>
OK

[22:56:47.0000] <MikeSmith>
well for now I will just PR it as patch against the existing dfn.js

[22:57:01.0000] <MikeSmith>
that way we can review it as a diff

[22:57:17.0000] <MikeSmith>
it’s really not the big of a change as far as that code goes

[06:03:44.0000] <hsivonen>
annevk: apparently half-width Katakana is still enough of a thing for https://gemmarx.github.io/unicode-jp-rs/doc/kana/index.html to exist

[06:04:19.0000] <hsivonen>
use case says "terminal"

[06:05:35.0000] <annevk>
hsivonen: heh

[06:06:59.0000] <annevk>
hsivonen: shall I just update the patch and assume jungshik will be okay with it?

[06:36:46.0000] <annevk>
hsivonen: I just went ahead, wasn't that hard

[08:41:35.0000] <MikeSmith>
PSA: https://sideshowbarker.net/html/multipage/ has cross-multipage dfn.js enabled, for anybody interested in helping test it

[08:42:29.0000] <MikeSmith>
https://sideshowbarker.net/html/ has single-page using the cross-multipage dfn.js code


2017-05-07
[20:28:37.0000] <MikeSmith>
annevk: so, about running the checker from travis, have tried a few things with my server but now coming the the conclusion that trying to run it on my server VM is not going to work

[20:28:52.0000] <MikeSmith>
problem is, running out of Java heap space

[20:29:29.0000] <MikeSmith>
it is also maxing out the CPU for extended periods of time

[20:29:47.0000] <MikeSmith>
so, need to move it to another server

[20:30:27.0000] <MikeSmith>
and once I get it set up you can update the CNAME and I think we will find it works fine

[20:32:15.0000] <MikeSmith>
am setting up an instance on a machine with 4 cores and 8GB of RAM (5GB of which is free most of the time)

[02:35:55.0000] <annevk>
MikeSmith: okay, seems that currently it's still falling over on something, but sounds promising

[03:31:43.0000] <MikeSmith>
annevk: yeah it was falling over because of java running out of heap space

[03:32:31.0000] <MikeSmith>
I had been trying to run it with only 256MB of heap but it basically seems to need at least 512MB

[03:33:26.0000] <MikeSmith>
so I upped it to that and for now I think that’ll be fine but the real fix is to just move it

[03:33:49.0000] <MikeSmith>
also I think it won’t require you to make any change to the CNAME record

[03:34:42.0000] <MikeSmith>
because I can keep doing the TLS termination at my server but just have nginx proxy it to the new one

[03:40:11.0000] <MikeSmith>
annevk: but also for the case of the Encoding spec I guess we should change the deploy script to not check the generated HTML each time but instead only if the python script has changed

[03:40:45.0000] <MikeSmith>
since it’s wasteful to run it when there isn '

[03:41:03.0000] <MikeSmith>
*isn’t anything that would have changed the output

[03:44:11.0000] <MikeSmith>
plus of course if there’s a problem with the checker then it screws up your workflow

[03:46:00.0000] <annevk>
MikeSmith: aside: "katakana" without capital k is fine?

[03:46:33.0000] <annevk>
MikeSmith: yeah, if that's easy to change that sounds good

[03:47:00.0000] <annevk>
MikeSmith: wasting a bunch of bandwidth and CPU seems sad

[04:03:53.0000] <MikeSmith>
annevk: yeah "katakana" without capital k is fine

[05:15:55.0000] <annevk>
Ta

[07:10:07.0000] <MikeSmith>
annevk: OK, checker.html5.org now moved to a much beefier server

[07:10:39.0000] <MikeSmith>
so, no more memory problems, no more timeouts

[07:11:35.0000] <MikeSmith>
later will work on making the change for Encoding to only run the checker if the python script changes

[07:11:45.0000] <MikeSmith>
though may not get to it til next weekend

[08:14:14.0000] <annevk>
MikeSmith: no rush, thanks for taking the time

[09:16:36.0000] <Alystair>
howdy all is there a way to tell if a computer is capable of playing audio or if sound is currently muted, and if not - where would I go to suggest this for future implimentation in web spec?

[09:21:31.0000] <Alystair>
I feel this could be used in situations to have fall backs in case a site requires audio but the computer either has no hardware available or is actively muted outside of the scope of the frame


2017-05-08
[00:09:32.0000] <hsivonen>
TIL: Edge encodes the Yen sign as ASCII-state backslash instead of using the Roman state of ISO-2022-JP

[00:12:23.0000] <annevk>
hsivonen: do other browsers do that?

[00:14:28.0000] <hsivonen>
annevk: Chromium and Gecko use the Roman state like the spec says

[00:14:48.0000] <annevk>
hsivonen: that seems more sensible

[00:15:02.0000] <hsivonen>
annevk: when encountering Pile of Poo in the Roman state, Chromium behaves per spec (stays in the Roman state) and Gecko switches to the ASCII state for the NCR

[00:15:31.0000] <hsivonen>
Edge encodes overline as an NCR instead of switching to the Roman state

[00:16:03.0000] <hsivonen>
additionally, searching Duckduckgo for the overline character gives Emmanuel Macron as a related topic

[00:17:04.0000] <annevk>
Machine learning is a great thing

[00:22:17.0000] <hsivonen>
Well, I guess I'm not going to complain about the spec, since it matches Chromium. (Not switching from Roman to ASCII as part of encoder internals is quite a footgun, though, is someone wants to write replacement with \u escapes)

[00:22:30.0000] <hsivonen>
s/is someone/if someone/

[00:22:41.0000] <hsivonen>
I guess I'm going to put that in documentation

[00:22:54.0000] <hsivonen>
encoding to non-UTF-8 is a bad idea anyway

[00:39:13.0000] <annevk>
hsivonen: I'd consider changing that if you think it's worth it

[00:40:52.0000] <annevk>
hsivonen: although it's not immediately obvious me how to change that around, might be non-trivial

[01:05:15.0000] <hsivonen>
annevk: let's not try to polish ISO-2022-JP for the benefit of people writing CSS/JS serializers for non-UTF-8

[01:05:47.0000] <annevk>
hsivonen: will you review my patch today?

[01:05:58.0000] <hsivonen>
annevk: the ISO-2022-JP one?

[01:06:09.0000] <annevk>
hsivonen: yup

[01:06:23.0000] <hsivonen>
annevk: Implementing it right now. Will comment after implementation experience.

[01:06:33.0000] <annevk>
sg

[01:58:51.0000] <hsivonen>
I wonder what the history of the code point order for half-width katakana is.

[01:59:23.0000] <hsivonen>
like how did one of the sound marks not get grouped together with the other two

[01:59:42.0000] <hsivonen>
it's not combining, for one

[01:59:52.0000] <hsivonen>
/me knows nothing about the expected sort order

[02:05:46.0000] <annevk>
If only Unicode was developed in HTML and in version control

[02:05:52.0000] <annevk>
Would be much easier to answer those questions

[02:06:55.0000] <annevk>
hsivonen: do you mind if I change the ID for <dfn>index</dfn> btw?

[02:07:19.0000] <annevk>
If anyone depends on that working...

[02:07:39.0000] <hsivonen>
annevk: I don't recall having dependencies on that

[02:08:14.0000] <hsivonen>
annevk: the half-width order is older than Unicode

[02:08:27.0000] <hsivonen>
(full-width order, too)

[02:08:56.0000] <annevk>
Unicode could have changed the order though, no?

[02:09:20.0000] <annevk>
Or did you just import whole character sets wholesale, preserving order?

[02:09:57.0000] <annevk>
I don't actually know, though I always imagined the reason we have all these conversion tables is because they fiddled with things

[02:10:32.0000] <hsivonen>
annevk: it looks like Unicode imported ancient half-width katakana wholesale and then imported full-width katakana in the JIS X 0208 order

[02:16:13.0000] <hsivonen>
the annoying part about ordering is that Unicode, JIS X 0208 and GB 2312 all have sections that are supposed to be sorted first by radical and then by stroke count, but the Unicode order doesn't agree with the JIS X 0208 or GB 2312 orders for those bits anyway

[03:49:57.0000] <annevk>
Domenic: FWIW, I'm no longer convinced Window object tearoff objects are a good idea

[03:50:39.0000] <annevk>
Domenic: coupling everything to the Document object which isn't reused between different origins seems a lot safer

[05:10:03.0000] <Domenic>
annevk: it's crucial for customElements since it is intimately tied the per-Window prototypes/constructors.

[05:10:28.0000] <Domenic>
Maybe can change for others, although it seems strange.

[05:11:09.0000] <annevk>
It seems really weird that we'd reuse the same Window object across two origins

[05:11:19.0000] <Domenic>
I.e. It's unclear why window.history should change when window.History stays the same

[05:11:24.0000] <annevk>
I'm probably missing something

[05:12:18.0000] <Domenic>
Yeah I'm not thinking about it too hard today, on a vacation (and traveling tomorrow)

[06:46:38.0000] <wanderview>
Domenic: you are responding to github quickly for being on vacation :-)

[11:42:45.0000] <KP->
does Ben Millard come here often?

[12:01:12.0000] <TabAtkins>
Don't know who that is, so... maybe?

[12:08:04.0000] <KP->
https://projectcerbera.com/me/

[12:08:23.0000] <KP->
> BenMillard in Freenode

[12:08:23.0000] <KP->
#whatwg

[12:26:14.0000] <hsivonen>
KP-: I don't recall seeing BenMillard here in the recent years. Not in the last 8 years, I'd estimate.

[12:29:52.0000] <KP->
:O

[12:45:05.0000] <gsnedders>
Probably longer, I think.

[16:15:56.0000] <reggna>
How do you unset the src of an img, video, iframe, whatever?

[16:16:22.0000] <reggna>
x = new Image(); x.src = "foo" ; delete x.src ; x.src

[16:16:39.0000] <reggna>
Ah, x.removeAttribute("src") maybe..

[16:19:59.0000] <reggna>
That seems to work.

[16:21:07.0000] <reggna>
x = new Image(); x.src = "foo" ; x.removeAttribute("src") ; x.src

[16:24:34.0000] <reggna>
That would have been an interesting #HTMLQuiz.

[16:27:46.0000] <reggna>
I'll do it in a few years when we've all forgotten the answer.

[16:55:22.0000] <jyasskin>
I'd like to have a set of guidelines for github issue metadata like labels, milestones, and projects. https://w3c.github.io/spec-labels.html had a start, so I've sent https://github.com/w3c/w3c.github.io/pull/27 to add milestones and projects. Do folks here have opinions? e.g. tobie, TabAtkins


2017-05-09
[17:07:18.0000] <reggna>
Also interesting: Removing the src attribute will reset an img, but won't reset a video.

[17:08:49.0000] <reggna>
currentSrc doesn't change.

[00:53:11.0000] <annevk>
Domenic: "browsing context environment settings object" introduced in https://github.com/whatwg/html/commit/cf0355d7e0e229b98f7fbd51b8c7608010c787f5 should really be "window environment settings object", right?

[00:54:28.0000] <annevk>
Domenic: it also seems that at various points we invoke "set up a browsing context environment settings object" before we've created a document

[00:54:50.0000] <annevk>
Domenic: which results in null pointer exceptions

[00:55:33.0000] <Domenic>
annevk: seems better, but can't really look today I'm afraid; happy to follow up more tomorrow.

[00:56:05.0000] <annevk>
Domenic: just wanted to quickly check, safe travels

[01:04:43.0000] <foolip>
reggna: for media elements, if you really want to unload it, you should set srcObject to null, remove the src attribute, all <source> children and then call load()

[01:05:18.0000] <foolip>
reggna: actually no, don't need to call load(), setting srcObject will implicitly do that (the other two things won't though)

[01:36:50.0000] <annevk>
Domenic: if you're not in the air, can https://www.w3.org/Bugs/Public/show_bug.cgi?id=28920 be closed?

[01:52:02.0000] <Domenic>
I recall that still needing investigation but happy to trust your judgement

[01:52:55.0000] <annevk>
I'll leave it then, not a 100% sure

[05:25:37.0000] <ondras>
hm, is this supposed to work?

[05:25:39.0000] <ondras>
https://jsfiddle.net/b1hdjzwz/1/

[05:25:44.0000] <ondras>
firefox is not applying the rotation

[05:25:59.0000] <ondras>
calc inside a transform? 45 * 1deg inside of a calc?

[05:26:03.0000] <ondras>
what exactly is incorrect?

[05:32:09.0000] <topaxi>
it's not supported by ff yet

[05:32:29.0000] <topaxi>
but it should work (afaik)

[05:32:59.0000] <ondras>
topaxi: and what exactly is the problematic feature? calc()ing degrees or calc()ing transforms?

[05:33:10.0000] <topaxi>
calc in some transforms

[05:33:23.0000] <ondras>
ok

[05:33:33.0000] <ondras>
would an indirection (custom prop) fix this?

[05:33:59.0000] <ondras>
https://jsfiddle.net/b1hdjzwz/2/

[05:34:01.0000] <ondras>
no :/

[05:35:32.0000] <topaxi>
oh maybe it is a problem with some units, not the transforms

[05:35:32.0000] <topaxi>
https://bugzilla.mozilla.org/show_bug.cgi?id=956573

[05:38:04.0000] <ondras>
that looks exactly like my case

[05:38:12.0000] <ondras>
topaxi: okay, thanks for the link

[05:39:21.0000] <topaxi>
transforms are affected too, even if the unit doesn't matter: https://bugzilla.mozilla.org/show_bug.cgi?id=1308785

[05:39:37.0000] <topaxi>
so i guess its both

[05:43:31.0000] <nox>
Fun times, I just filed https://bugzilla.mozilla.org/show_bug.cgi?id=956573 too.

[05:43:55.0000] <nox>
Err, https://bugzilla.mozilla.org/show_bug.cgi?id=1363350

[05:44:17.0000] <ondras>
:)

[06:20:38.0000] <reggna>
10:04:44 < foolip> reggna: for media elements, if you really want to unload it, you should set  srcObject to null, remove the src attribute, all <source> children

[06:21:26.0000] <foolip>
reggna: yes? :)

[06:22:11.0000] <reggna>
foolip: The only reason that "unloads" it, is because setting srcObject to null will be interpreted as a relative URL so the WebMediaPlayer will actually get a new load call with http(s)://domain/null

[06:22:34.0000] <reggna>
Oh, no.  Hmm.

[06:22:49.0000] <reggna>
Now it actually worked.

[06:23:20.0000] <foolip>
reggna: that sounds weird, srcObject is an object, not a URL

[06:23:36.0000] <foolip>
reggna: did you set video.src = null by any chance?

[06:25:40.0000] <reggna>
Last time I did, and then I set srcObject to null as well and that just reloaded the video.

[06:26:15.0000] <reggna>
This time I didn't, and it just reloaded the video with the currentSrc.

[06:26:27.0000] <foolip>
reggna: what resource was loaded before you did the thing? was it from currentSrc, src, or a source element?

[06:26:42.0000] <foolip>
s/currentSrc/srcObject/

[06:26:42.0000] <reggna>
foolip: Source element.

[06:26:54.0000] <foolip>
ok, so then you'd have to remove the source elements as well

[06:27:07.0000] <foolip>
or, I dunno, just remove the video element from the DOM and start with a new one :)

[06:27:17.0000] <reggna>
Yes, and you have to do that before setting srcObject to null.

[06:27:32.0000] <foolip>
the order shouldn't matter, if it does there's a bug somewhere

[06:27:48.0000] <foolip>
as long as you do all the things before returning back to the event loop, that is

[06:27:54.0000] <reggna>
Well, no, the order does matter.

[06:28:15.0000] <reggna>
If you set srcObject to null while it still has source elements, it will just reload one of them.

[06:28:48.0000] <reggna>
So you have to remove the source elements first (and remove src if you have one) and then set srcObject to null.

[06:28:51.0000] <foolip>
even if you remove the source element right after setting srcObject to null?

[06:29:16.0000] <foolip>
that would mean that a new resource is selected synchronously in the srcObject setter, which isn't impossible, but then a bug

[06:30:05.0000] <reggna>
I was just trying in devtools, but no, it shouldn't be synchronous (at least it wasn't a few years ago when I actually knew this code).

[06:30:43.0000] <foolip>
ah, well in devtools there will be time between the calls, that would explain it

[07:27:59.0000] <annevk>
Sigh, improving navigation and lifetime of objects is such a time sink

[07:28:27.0000] <annevk>
So I wanted to make "create a new browsing context" a little better by making the creator argument explicit

[07:28:50.0000] <annevk>
Not even something ambitious like allocating a unit of related browsing contexts or something like that, just adding a creator argument

[07:29:27.0000] <annevk>
Going through the various callers I find myself cleaning up frame/iframe algorithms that really need more consolidation

[07:29:37.0000] <annevk>
I encounter the broken state of <embed> and <object>

[07:30:13.0000] <annevk>
I remove the bits from "creator browsing context" that are no longer needed and look into what it would take to remove the remaining bits, since they don't make much sense

[07:30:41.0000] <annevk>
So now I'm writing tests for base URL handling in XMLHttpRequest response Document objects

[07:31:45.0000] <annevk>
And to do this properly that's only the start. I need to write tests for base URL handling of all kinds of Document objects. Then rewrite how base URLs work in HTML. And maybe then I can get back to "create a new browsing context" and get sucked into consolidating frame/iframe again

[08:11:09.0000] <foolip>
annevk: sounds like you're going depth first :)

[08:11:24.0000] <foolip>
I keep doing that as well, so hard to resist

[09:22:12.0000] <annevk>
foolip: seems hard to fix it otherwise

[09:22:22.0000] <tobie>
JakeA: just DMed you

[09:22:45.0000] <annevk>
foolip: cannot improve the broken higher layer if the fundamentals are all wrong

[09:23:11.0000] <annevk>
foolip: I do try to ignore the iframe and embed stuff though

[09:23:38.0000] <annevk>
foolip: although it's hard

[09:49:12.0000] <TabAtkins>
Just in case anyone is around who can tell me how bad a thing I just did: I came in today to my computer swapping like crazy. top shows an objfs process using up 87% of RAM. Couldn't figure out what's doing it, so I just killed the process.

[09:49:54.0000] <TabAtkins>
(The meta question of why my computer was swapping like crazy when it still had half a gig of ram available will be left to the software engineering segment of your syllabus.)

[09:50:30.0000] <TabAtkins>
None of my programs seem to have fallen over yet, so...?

[09:52:59.0000] <jgraham>
/me doesn't even know what objfs is

[09:53:07.0000] <jgraham>
Unless you are running Solaris

[09:53:26.0000] <jgraham>
/me wonders if this was the intended channel

[09:54:18.0000] <TabAtkins>
I had no better channel to ask about it.

[09:55:00.0000] <jgraham>
Ah well since I couldn't work out what objfs was I wondered if it was some Google thing

[09:55:20.0000] <jgraham>
If search goes down, we'll blame you :)

[09:55:37.0000] <TabAtkins>
And no, a modded Ubuntu. So The terminology could be reinforced with a new figure in the spec, showing the keyframes, the frames, and the steps as different parts of the timing function graph.

[09:55:45.0000] <TabAtkins>
lolwut

[09:55:51.0000] <TabAtkins>
sorry, copypaste fail

[09:56:00.0000] <TabAtkins>
meant to be a ¯\_(ツ)_/¯

[11:28:25.0000] <nox>
TabAtkins: Just a link to the decision without any further explanation would be enough, I'm just being curious at that point, and I assume this was already bikeshedded to the infinite so I wouldn't mind.

[11:28:47.0000] <TabAtkins>
I'd have to hunt down the meeting minutes.

[11:28:57.0000] <TabAtkins>
But I can explain the reasoning easily.

[11:29:45.0000] <TabAtkins>
The 3-value syntax makes <position> *way* harder to intermix with other <length>s, but it's very rarely used (and quite weird).

[11:32:15.0000] <nox>
Are there that many <position>s followed by <length>s?

[11:45:23.0000] <TabAtkins>
There's effectively zero today, because you *can't* produce the grammar unambiguously.

[11:45:31.0000] <TabAtkins>
There are places we'd *like* to have such a thing.

[12:31:36.0000] <tobie>
So back at doing some WebIDL work (finally).

[12:32:22.0000] <tobie>
I'm trying to finish the [Default] toJSON() work and struggling with consequential interfaces.

[12:33:25.0000] <tobie>
Anyone familiar with using a limited version of those that would be more similar to mixins?

[12:33:55.0000] <tobie>
That is, B and B's inherited interfaces in `A implements B;`


2017-05-10
[01:12:13.0000] <foolip>
annevk: in https://github.com/whatwg/fullscreen/pull/79 do you want me to remove the "type:dfn; for:list; text:for each" default and use for attributes everywhere?

[01:12:39.0000] <annevk>
foolip: oh I didn't spot that

[01:12:56.0000] <annevk>
foolip: I somewhat prefer not relying on that feature if it's not needed

[01:13:14.0000] <annevk>
foolip: but I'm okay with you ignoring those comments

[01:13:23.0000] <annevk>
foolip: since you're doing a bunch of the work now

[01:13:43.0000] <foolip>
annevk: it does somewhat increase the likelihood that the wrong this is used by mistake, but there's just one "for each" right?

[01:14:05.0000] <annevk>
foolip: it's also there for sets and we might get it for strings and such

[01:14:30.0000] <foolip>
oh, actually #map-iterate exists as well

[01:14:42.0000] <annevk>
for=set and for=list prolly point to the same dfn though

[01:14:48.0000] <foolip>
yes, they are

[01:15:04.0000] <annevk>
but still seems good to keep the types correct if we ever get tooling

[01:15:47.0000] <foolip>
I'll remove that final list, and then the spec will have just ordered sets, and can use "type:dfn; for:set; text:for each", or would you prefer to spell it out anyway?

[01:16:40.0000] <annevk>
foolip: you should do your preference since you're mostly editing these days

[01:17:01.0000] <foolip>
ok, will do

[01:18:33.0000] <foolip>
annevk: regarding wording, is there another spec that extensively uses infra that I can cargo cult? Now I'm wondering if "Let x be an empty ordered set" or "new ordered set" is the coolest phrasing.

[01:23:42.0000] <annevk>
foolip: I use a "a new set" personally

[01:23:54.0000] <annevk>
foolip: nothing uses it as much as they should yet

[01:23:55.0000] <foolip>
/me wants to be like annevk

[01:36:01.0000] <foolip>
annevk: actually, "To remove an element from a top layer, remove element from top layer." is very silly even if not circular due to the links. WDYT, should HTML just operate on it as an ordered set directly?

[01:36:47.0000] <annevk>
foolip: yeah, if there are no side effects

[01:37:06.0000] <annevk>
foolip: it seems weird that there would be nothing to update though, maybe there's an XXX step in there to do layout?

[01:37:23.0000] <foolip>
annevk: as implemented there actually are, there are flags set on the element so that it can later be quickly tested for "is in top layer"

[01:37:44.0000] <annevk>
foolip: optimizations aren't worth defining

[01:37:58.0000] <annevk>
but layout would be observable possibly

[01:38:27.0000] <foolip>
right, but it does mean that both for adding and removing, we're going through an extra layer

[01:38:47.0000] <foolip>
well, the layout could just as well iterate the top layer and just be slower, so it's an optimization

[01:40:13.0000] <annevk>
yeah true, layout wouldn't be done there, that would be done when someone asks for it (or you hit an animation frame)

[01:40:23.0000] <annevk>
okay, I'm convinced we can just remove it

[01:43:11.0000] <foolip>
annevk: I'll prepare the HTML PR then

[01:54:40.0000] <foolip>
annevk: done, and is there anything else in infra that fullscreen can/should use?

[01:55:37.0000] <annevk>
foolip: probably... I haven't studied it closely

[01:56:43.0000] <foolip>
Looking now, I see while/continue/break, will do those too then

[01:59:43.0000] <foolip>
OK, done, sorry for the quick churn

[02:05:34.0000] <annevk>
foolip: landed both, tweaked commit messages a bit

[02:06:01.0000] <foolip>
annevk: thanks!

[02:06:13.0000] <foolip>
Oh right, forgot Meta on HTML :)

[02:06:43.0000] <foolip>
Oh, am I confused about Editorial: and Meta: still?

[02:07:13.0000] <annevk>
foolip: it seemed more than Meta since it's actually changing text

[02:07:35.0000] <foolip>
Yeah, it did end up bigger than it started out as

[02:07:43.0000] <annevk>
Meta is no-op as far as content goes imo

[02:34:41.0000] <tobie>
Curious if TabAtkins was able to organize markup for arguments names of abstract ops in Bikeshed.

[02:37:12.0000] <tobie>
I've got a recursive algorithm and I'm writing stuff like, "invoke [=operation=], passing it the child of |P| as |P| and |I| as |I|", which I don't think reads very well. :(

[06:47:26.0000] <Domenic>
I still don't name my arguments, just "passing the child of |P| and |I|"

[06:52:27.0000] <annevk>
So navigate goes async at some point, and then uses two tasks to get back in sync

[06:52:35.0000] <annevk>
That is probably bogus?

[06:53:45.0000] <annevk>
Given 1. Dispatch event. 2. Go async. 3. Queue task. | Does that mean that if in 1 I do setTimeout 0 it runs before 3? Must, right?

[06:54:08.0000] <annevk>
So setTimeout during beforeunload will run before unload

[06:55:47.0000] <annevk>
(For those following along. I ended up having to change base URLs yesterday. But in order to change base URLs one has to change how documents are allocated. So that's where we are... Pretty much full circle, but not quite.)

[07:13:20.0000] <tobie>
Domenic: well, the problem is both |P| and |I| are interfaces, so you just distinguish them by order?

[07:14:35.0000] <tobie>
Domenic: this is sort of a dumb question with an obvious answer, so sorry. :)

[07:17:33.0000] <annevk>
Domenic: yes, order!

[07:17:41.0000] <annevk>
Oops, meant that for tobie

[07:17:56.0000] <annevk>
Order all the things

[07:20:32.0000] <tobie>
annevk: thanks, it's just painful to read. I'm descending the inheritance tree and so I have to keep a hold of both the current place in the tree and the end node.

[07:21:02.0000] <tobie>
Inside of a recursive algorithm.

[07:21:29.0000] <tobie>
I'll finish the thing and ask for feedback. I'm sure there's a simpler way to do this.

[07:21:47.0000] <annevk>
tobie: you could try Invoke X with P's child and I.

[07:21:54.0000] <annevk>
tobie: which reads fairly okay to me

[07:22:25.0000] <tobie>
I'll give that a try

[08:58:24.0000] <frivoal_>
present+ Florian

[08:59:53.0000] <frivoal_>
/me rossen seems barely audible to me

[09:00:20.0000] <frivoal_>
/me much better

[09:00:58.0000] <tantek>
/me frivoal_ wrong channel :)

[09:01:08.0000] <frivoal_>
/me thanks!

[09:01:32.0000] <frivoal_>
/me sorry everyone for the noise

[09:20:58.0000] <vandenoever>
CSS selectors can match on namespaces, e.g. svg|g. Should Element.matches support that? An element has local prefix/namespace mappings.

[09:22:13.0000] <vandenoever>
I see that dom.spec.whatwg.org says 'Support for namespaces within selectors is not planned and will not be added. ' Is there a rationale for that?

[09:30:47.0000] <annevk>
vandenoever: not enough namespaces to go around

[09:56:02.0000] <vandenoever>
annevk: what do you mean? There are plenty of namespaces. In WebODF the namespaces are very important to make it work.

[09:57:37.0000] <annevk>
vandenoever: in terms of what browsers expose there's just SVG and HTML, and MathML if you're lucky

[09:57:53.0000] <annevk>
vandenoever: I'm not familiar with WebODF

[10:00:12.0000] <annevk>
vandenoever: but also, I gotta go, I recommend filing an issue at https://github.com/whatwg/dom/issues/new describing your use case (and if that's WebODF, please explain the basic setup, since unless you're actually serving XML documents to the browser and render those with CSS somehow (and do something weird for links and images and such) it's not really

[10:00:12.0000] <annevk>
clear to me how it's applicable

[13:10:05.0000] <Domenic>
annevk: any reason you assigned mkwst to https://github.com/whatwg/html/pull/2588 ? Seems pretty quick

[14:16:55.0000] <TabAtkins>
annevk: You might wanna actually read over the https://github.com/heycam/webidl/issues/345 thread and try commenting again; right now it looks like you only bothered to read my last comment and threw an offhand rejection, which is pretty rude to me and bz.

[15:32:42.0000] <jugglinmike>
TabAtkins: I'm looking through the Bikeshed docs for a way to label algorithm steps and then link to them elsewhere. Does it have this feature?

[15:33:31.0000] <TabAtkins>
Not yet, but https://github.com/tabatkins/bikeshed/issues/796 is open to track it.  If you give them an ID, they'll generate a permalink thing.

[15:35:48.0000] <jugglinmike>
Got it. Thanks!


2017-05-11
[21:19:24.0000] <annevk>
Domenic: CSP implications

[21:41:46.0000] <MikeSmith>
I guess github needs a way to add a comment when assigning a review

[21:42:12.0000] <MikeSmith>
though I guess we can always just manually add a separate comment

[22:31:12.0000] <gsnedders>
So, how dead is TPAC going to be if nobody from Europe or the Middle East shows up? I imagine it'll still be pretty busy given the number of local people…

[23:19:30.0000] <hsivonen>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=563283 says that other browsers supported the precombining the sound marks when encoding half-width Katakana to ISO-2022-JP

[23:20:05.0000] <hsivonen>
annevk: so other browsers changed, too, in the last 7 years?

[00:00:25.0000] <annevk>
hsivonen: I think it might be that he was seeing something else

[00:00:35.0000] <hsivonen>
annevk: ok

[00:00:37.0000] <annevk>
hsivonen: Safari performs some flavor of Unicode normalization

[00:00:42.0000] <annevk>
hsivonen: for form submission

[00:00:53.0000] <annevk>
hsivonen: I think Chrome removed that post-fork, but not immediately

[00:01:37.0000] <hsivonen>
it would be interesting to know if HFS+ is to blame for Safari doing that

[00:01:59.0000] <hsivonen>
i.e. to protect the non-Mac world from copied and pasted HFS+ file names

[00:02:11.0000] <gsnedders>
or the OS doing that to all text fields?

[00:02:45.0000] <annevk>
hsivonen: https://bugs.webkit.org/show_bug.cgi?id=159891 has information on it

[00:02:49.0000] <hsivonen>
there was a bad time in 2003, 2004 or so when Preview was exporting decomposed text to the clipboard for a while

[00:03:25.0000] <annevk>
hsivonen: does NFC do the same thing that bug is talking about?

[00:03:37.0000] <annevk>
hsivonen: if not, I don't know what's going on

[00:06:11.0000] <hsivonen>
not sure. I guess it's time to test

[00:08:39.0000] <hsivonen>
annevk: NFKC roughly does

[00:08:51.0000] <hsivonen>
but not NFC

[00:09:03.0000] <hsivonen>
hmm. let's have another look at the test case

[00:10:32.0000] <hsivonen>
the Mozilla test case tests input that needs NFKC, not NFC, to combine the sound marks

[00:11:32.0000] <annevk>
Hmm, maybe ap was wrong

[00:27:01.0000] <hsivonen>
annevk: IE10 on Windows 7 does the NFKC thing for half-width Katakana

[00:29:32.0000] <annevk>
hsivonen: so Edge has a different encoder? Or different test from mine?

[00:30:18.0000] <hsivonen>
annevk: Edge (Anniversary Update) also does the NFKC thing

[00:31:02.0000] <hsivonen>
I tested https://hsivonen.com/test/moz/iso-2022-jp-form-submission.htm with U+FF76 U+FF9E

[00:32:33.0000] <annevk>
hsivonen: what about https://dump.testsuite.org/encoding/iso-2022-jp/encode.html?

[00:32:39.0000] <hsivonen>
I didn't test what happens with decomposed full-width Katakana

[00:32:43.0000] <hsivonen>
let's see

[00:35:06.0000] <hsivonen>
I get a mangled query string in Edge

[00:36:48.0000] <hsivonen>
mangled query in IE11 on Windows 7, too

[00:38:02.0000] <hsivonen>
but if I look at what the query should be if it hadn't lost its escape characters, it seems like it didn't to the NFKC thing

[00:38:16.0000] <hsivonen>
so, yeah, difference in MS browsers between form and query

[00:38:21.0000] <hsivonen>
hooray

[00:38:42.0000] <hsivonen>
let's test full-width katakana then

[00:41:01.0000] <hsivonen>
no NFKC for full-width in IE11 for Windows 7

[00:41:31.0000] <hsivonen>
so, uconv wasn't alone but really matches Microsoft for form submission

[00:43:03.0000] <hsivonen>
now I feel bad about regressing this

[00:43:24.0000] <hsivonen>
although it annoys me that all this time goes into the least useful (on the Web) encoder

[00:46:32.0000] <hsivonen>
so: Microsoft and uconv both precombine the sound marks to their bases as in NFKC but map lone sound marks to their non-combining versions (unlike NFKC)

[00:56:00.0000] <tobie>
gsnedders: I'm kind of surprised you draw the line at "can't use my laptop on the flight."

[01:40:48.0000] <nox>
Isn't the expansion of radial-gradient() wrong in https://drafts.csswg.org/css-images-3/#radial-gradients?

[01:41:42.0000] <nox>
AFAICT, the expansion says that everything before colour stops can be omitted, that doesn't seem to reflect the rest of the spec.

[01:42:41.0000] <annevk>
hsivonen: it's still unclear to me how this changed in Chrome and Safari

[01:42:57.0000] <annevk>
hsivonen: was ap wrong and are they actually doing NFKC or NFKD or some such?

[01:43:19.0000] <annevk>
hsivonen: I guess I can try to test Safari TP with your form thingy

[01:46:46.0000] <annevk>
hsivonen: with your test and "ｶﾞ" as input I still get 4 bytes in Chrome and Safari and 2 bytes in Firefox

[01:47:04.0000] <annevk>
hsivonen: so it's not clear we really regressed much

[01:51:50.0000] <hsivonen>
annevk: so Safari doesn't combine them. OK.

[01:52:42.0000] <annevk>
hsivonen: just to be totally safe, the output I get is QUERY_STRING = q=%1B%24B%25%2B%21%2B%1B%28B

[01:53:12.0000] <annevk>
From which I determined %25%2B%21%2B to be the four relevant bytes

[01:53:39.0000] <hsivonen>
ok

[01:55:04.0000] <hsivonen>
is the way the gb18030 decoder emits an ASCII character for the second byte in a 4-byte GB18030 sequence that decodes to a null code point a new thing in the spec or a pre-existing browser behavior

[01:55:58.0000] <hsivonen>
in a stream of bytes that could by their values be part of multiple 4-byte sequences, it changes how the 4-byte sequences align to bytes

[01:59:28.0000] <annevk>
hsivonen: you mean it should maybe emit ASCII U+FFFD ASCII instead?

[02:00:05.0000] <annevk>
hsivonen: I think that might be new, it's part of making sure you cannot mask ASCII characters used in parser operations

[02:00:29.0000] <hsivonen>
annevk: if it's new, it might have undesirable side effects

[02:00:32.0000] <annevk>
(at least sound like it, it's too long ago that I actually know for sure)

[02:00:43.0000] <hsivonen>
I guess it's time for cross-browser testing

[02:13:36.0000] <hsivonen>
I'm going to consider this a spec bug

[02:15:36.0000] <annevk>
/me hopes it's easy to fix

[02:32:32.0000] <hsivonen>
annevk: I proposed an easy fix that masks an ASCII byte but only when it is known to be surrounded by non-ASCII bytes: https://github.com/whatwg/encoding/issues/110

[02:34:07.0000] <annevk>
hsivonen: but if N is non-ASCII then attribute="i amN"Nbroken"

[02:34:34.0000] <annevk>
hsivonen: maybe not a problem here because the ASCII range is rather limited, iirc, but still

[02:35:14.0000] <hsivonen>
the ASCII bytes are always ASCII digits

[02:36:18.0000] <hsivonen>
well, I suppose if you emit two errors at a time, I can build some more state into the decoder and make the error emission happen separately

[02:36:57.0000] <hsivonen>
in any case, it seems that the decoder getting misaligned in a way that doesn't happen in current impls is bad

[02:38:03.0000] <annevk>
hsivonen: yeah, not matching impls is bad; masking ASCII digits makes me a little uncomfortable since it's an exception to a rule, but probably okay...

[03:10:20.0000] <hsivonen>
so, it looks like the euc-kr decoder in uconv composes Hangul Compatibility Jamo into Hangul Syllables

[03:10:27.0000] <hsivonen>
does any other browser do *that*

[03:11:16.0000] <annevk>
hsivonen: is https://hsivonen.com/test/moz/gb18030-alignment.htm 8 bytes?

[03:11:48.0000] <annevk>
hsivonen: or 16?

[03:11:56.0000] <hsivonen>
annevk: 16

[03:12:08.0000] <annevk>
hsivonen: so browsers just eat all ASCII digits atm

[03:12:15.0000] <hsivonen>
right

[03:13:31.0000] <annevk>
hsivonen: did you test ASCII but not ASCII digit in the fourth place there?

[03:13:39.0000] <hsivonen>
annevk: I didn't

[03:13:45.0000] <hsivonen>
seems indeed relevant to test

[03:16:30.0000] <hsivonen>
uconv seems to bake \u3164\u3131\u314f\u3138 into \uAC07, but NFKC says \u1160\uac00\u1104

[03:18:46.0000] <annevk>
hsivonen: I'll create a test for that then

[03:28:46.0000] <annevk>
hsivonen: seems that's interoperable at least

[03:29:31.0000] <annevk>
hsivonen: if you're not worried about consuming ASCII digits I'd suggest we just consume them all

[03:37:48.0000] <hsivonen>
annevk: works for me

[03:38:18.0000] <hsivonen>
annevk: https://hsivonen.com/test/moz/compatibility-jamo.htm Firefox differs from IE and Chromium. What does Safari do?

[03:38:56.0000] <annevk>
Output is 갇 and ㅤㄱㅏㄷ

[03:39:01.0000] <hsivonen>
annevk: thanks

[03:39:07.0000] <hsivonen>
so same as Chromium and IE

[03:39:30.0000] <annevk>
Rendering is different between Safari and IRCCloud running in Firefox though

[03:39:42.0000] <nox>
Is <positive-integer> defined in any CSS spec?

[03:41:11.0000] <hsivonen>
annevk: do you mean Safari renders the compatibility jamo as a syllable block?

[03:41:53.0000] <annevk>
https://irccloud.mozilla.com/file/RII3aZeG/Safari%20TP.png

[03:42:04.0000] <annevk>
hsivonen: ^

[03:42:22.0000] <hsivonen>
annevk: wow. what's that first glyph on the last row?

[03:42:42.0000] <hsivonen>
anyway, it seems that the spec is fine here and uconv has unnecessary complexity

[03:43:03.0000] <annevk>
hsivonen: right, that's the one that was bugging me

[03:44:06.0000] <hsivonen>
IE, Chromium, Firefox and irssi render the first code point as a space

[03:45:00.0000] <annevk>
hsivonen: it's U+3164 HANGUL FILLER

[03:45:03.0000] <hsivonen>
Unicode.org doesn't provide a glyph for it

[03:45:19.0000] <annevk>
hsivonen: in Safari's DOM inspector it doesn't render either

[03:45:26.0000] <hsivonen>
annevk: yes. it's a control for marking the start of a syllable block

[03:46:43.0000] <hsivonen>
the glyph resembles HANGUL LETTER SSANGHIEUH

[03:47:01.0000] <hsivonen>
anyway, probably not something I need to care about

[04:10:07.0000] <hsivonen>
TIL: https://www.iana.org/assignments/charset-reg/CP50220

[04:11:03.0000] <hsivonen>
references the whatwg wiki!

[04:13:48.0000] <annevk>
hsivonen: I think that happened back when I was trying to turn IANA into The Thing

[04:16:05.0000] <annevk>
hsivonen: realized there's another interesting case

[04:16:18.0000] <annevk>
hsivonen: the fourth byte is neither a digit nor ascii

[04:16:42.0000] <annevk>
hsivonen: Firefox ends up with an extra U+FFFD, Chrome and Safari do not

[04:18:23.0000] <annevk>
hsivonen: although it's not entirely clear to me how Firefox does it like that, hmm

[04:18:55.0000] <annevk>
oh maybe that has more to do with Firefox's two byte error handling

[05:09:13.0000] <hsivonen>
trivia: previously, the maximal length of a byte sequence corresponding to a single U+FFFD was 3 bytes. this spec change makes it 4 bytes

[05:09:25.0000] <hsivonen>
(previously per spec that is)

[05:11:00.0000] <annevk>
hsivonen: even in UTF-8?

[05:11:26.0000] <annevk>
I guess so

[05:12:01.0000] <annevk>
Good question for a pub quiz

[05:13:04.0000] <hsivonen>
annevk: even in UTF-8, indeed

[05:14:08.0000] <hsivonen>
/me updates documentation in 4 places where this fact is stated

[05:16:34.0000] <annevk>
hsivonen: I suspect I'll land the fix Monday to give everyone some time to comment in case we overlooked something

[05:24:10.0000] <hsivonen>
annevk: ok

[05:37:32.0000] <zcorpan_>
Domenic: I'm happy that I managed to use serialize/deserialize correctly. It seemed intimidating at first but was actually pretty straight-forward

[06:14:42.0000] <Domenic>
Now I kind of want to put that testimonial in the spec

[06:16:21.0000] <Domenic>
Good times https://github.com/w3c/webrtc-pc/pull/1108#issuecomment-300694559

[06:19:55.0000] <annevk>
o_O

[06:20:09.0000] <tobie>
:D

[06:22:03.0000] <annevk>
Domenic: you should open an issue against them on behalf of Chrome, saying you can't both implement their requirements and say, SharedArrayBuffer, as you don't know what the intersection looks like

[06:23:45.0000] <Domenic>
Commented at https://github.com/w3c/webrtc-pc/pull/1171

[07:14:15.0000] <tobie>
Domenic: comments on merged pulls are easy to ignore.

[07:22:01.0000] <annevk>
Domenic: with out-of-process iframe elements (and therefore distinct event loops), how does Chrome prevent duplicate alert()s?

[07:35:32.0000] <Domenic>
annevk: no real idea... @avidrissman on GitHub knows I am sure, as he's overhauling Chrome's alert() handling

[09:17:49.0000] <gsnedders>
tobie: risk of theft/damage is way more of a concern than using a laptop in flight imo

[09:17:50.0000] <annevk>
Domenic: I would love @whatwg/navigate with all the relevant engineers, but maybe too many problems right now to bother lots of people with

[09:18:04.0000] <gsnedders>
tobie: I had previously basically agreed to continue to go to meetings arranged prior to November

[10:00:47.0000] <TabAtkins>
nox: It's not in https://drafts.csswg.org/indexes/#types so I guess not.  What spec did you find it in?

[10:01:27.0000] <TabAtkins>
nox: No, the r-g() grammar is right. What makes you think the initial part can't be omitted?

[10:58:04.0000] <nox>
TabAtkins: The previous grammar in the spec.

[10:58:32.0000] <nox>
Err, no, I'm saying it can't, but the expanded grammar says it does.

[10:58:42.0000] <nox>
https://drafts.csswg.org/css-images-3/#radial-gradients

[10:58:50.0000] <nox>
"[ <ending-shape> || <size> ]? [ at <position> ]? ,"

[10:58:58.0000] <TabAtkins>
Yeah, both parts are optional.

[10:59:00.0000] <nox>
becomes in note below:

[10:59:04.0000] <nox>
https://irccloud.mozilla.com/pastebin/t05NdVBb/

[10:59:22.0000] <nox>
TabAtkins: If both parts are optional, why is there a mandatory comma?

[11:00:05.0000] <TabAtkins>
There's not - https://drafts.csswg.org/css-values/#comb-comma

[11:00:30.0000] <nox>
:O TIL

[11:00:36.0000] <nox>
TabAtkins: Thanks.

[11:00:44.0000] <TabAtkins>
np

[11:00:50.0000] <TabAtkins>
What about the <positive-integer> thing?

[11:24:00.0000] <TabAtkins>
(The optional-comma thing in CSS grammars isn't well-known, and it's only about 2 years old anyway, but by golly does it make certain types of grammars much simpler to write.)

[11:24:29.0000] <TabAtkins>
(I find that the occasional confusion from someone not knowing about it is well worth the simplification and increased comprehensibility of the resulting grammars.)

[11:48:49.0000] <Domenic>
Has anyone else had trouble testing shared workers, where it seems like the request to the worker file is just not being made?

[11:49:12.0000] <Domenic>
I guess I should ask the testing channel


2017-05-12
[18:30:03.0000] <weinig>
annevk: is there anyway for a non-persistent notiification to know which of its actions, if any, was clicked? Or is that functionality only avaliable for persistent notifications via NotificationEvent?

[18:39:22.0000] <MikeSmith>
beverloo_: ⬆

[20:06:30.0000] <annevk>
weinig: might have been an oversight, best file an issue

[20:06:43.0000] <weinig>
annevk: ok, will do

[20:06:47.0000] <weinig>
thanks

[20:49:22.0000] <annevk>
Domenic: you'll file the remainder of the worker name bugs, right?

[20:49:45.0000] <Domenic>
annevk: Oh shoot, my plan was to wait until we had implementer commitments before merging...

[20:50:12.0000] <Domenic>
I guess filing bugs is the way to go now though :-/

[20:50:17.0000] <annevk>
Domenic: yeah, I was a little surprised you merged it

[20:50:20.0000] <Domenic>
That's what I get for working before going to sleep

[20:50:53.0000] <annevk>
Domenic: maybe mention in the bugs that a "late" objection is reasonable

[20:51:04.0000] <Domenic>
sg

[21:36:07.0000] <annevk>
Domenic: do you know more on https://stackoverflow.com/questions/40939857/fetch-with-readablestream/41222366?

[23:03:26.0000] <MikeSmith>
botie, inform zcorpan please look at https://bugzilla.mozilla.org/show_bug.cgi?id=1364281. <!DOCTYPE html<title>test</title><template><td>fdsa</template> Should we update the spec to say that the </td> closing tag must not be omitted when the td element is a child of a template element? And same for the tr element. And maybe for some other elements? I mean because in the template context, parsing does

[23:03:32.0000] <MikeSmith>
not result in an implicit </td> being seen there

[04:55:34.0000] <tobie>
What are the examples, if any, of requesting a trusted event to use an API on the platform?

[04:56:53.0000] <annevk>
tobie: <input type=file>

[04:57:02.0000] <tobie>
annevk: ta

[04:57:20.0000] <annevk>
tobie: https://html.spec.whatwg.org/multipage/interaction.html#triggered-by-user-activation

[04:57:45.0000] <tobie>
annevk: beautiful!

[06:04:45.0000] <jochen__>
annevk: any idea about https://github.com/whatwg/html/issues/2622#issuecomment-301061744 ?

[06:05:11.0000] <annevk>
jochen__: no, I haven't been involved much with download

[06:33:57.0000] <annevk>
So close, but no sigar: https://github.com/whatwg/html/pull/2671

[07:32:14.0000] <beverloo_>
MikeSmith, annevk, weinig - I'll reply to an issue too, but the reason that actions aren't supported on non-persistent notifications is that defining their behaviour when the page goes away is hard

[07:32:49.0000] <beverloo_>
clicking on a non-persistent notification that doesn't have attached event handlers anymore just opens the page again, but that likely won't make sense for buttons

[07:33:05.0000] <beverloo_>
the page also has no way of knowing which button (if any) the user clicked on

[07:34:37.0000] <MikeSmith>
beverloo_: I see yeah that makes sense

[08:20:23.0000] <annevk>
beverloo_: we could close the non-persistent navigations once the document is unloaded though

[08:20:34.0000] <annevk>
beverloo_: perhaps silently so

[08:21:46.0000] <beverloo_>
that'd break Google Calendar

[08:21:51.0000] <beverloo_>
and presumably other apps too

[08:23:16.0000] <annevk>
Domenic: re https://github.com/WebAssembly/design/issues/1048 presumably non-enumerable was intentional by TC39 so folks designing new classes might want to have that too (such as you did with Streams)

[08:23:35.0000] <annevk>
Domenic: taking reasons away to avoid IDL can eventually lead to a lot more sharing of code I think

[08:24:00.0000] <annevk>
beverloo_: I was thinking only for actions, but it's a little icky

[08:24:51.0000] <beverloo_>
annevk, that's a bit hard to reason about though

[08:24:56.0000] <beverloo_>
from a developer point of view

[08:25:08.0000] <annevk>
beverloo_: yeah

[08:32:13.0000] <Domenic>
annevk: it's not really intentional in the wasm case though

[08:32:47.0000] <annevk>
Domenic: it seemed like a nice testcase, but I'm fine with letting it go

[08:33:05.0000] <annevk>
One day

[08:33:12.0000] <Domenic>
For TC39... it's important that Array and Object properties not be enumerable, but for everything else it's meh...

[08:33:28.0000] <Domenic>
We're stuck between consistency with the web platform (enumerable) and Array/Object (non-enumerable)

[08:33:54.0000] <Domenic>
And there are enough people on the committee who don't care about the web platform that I doubt we'll change for future classes

[08:41:40.0000] <annevk>
Domenic: right, but the web can change for new classes too

[08:51:35.0000] <annevk>
I'm really happy with https://github.com/whatwg/html/issues/2671

[08:52:50.0000] <annevk>
There's still issues of course, but once that lands it will be possible to solve them

[08:53:05.0000] <annevk>
Domenic: if you can review the above today and ignore the XXX segment that'd be good

[08:55:42.0000] <annevk>
Domenic: the document.open/write/writeln refactor too, though that's less pressing navigation-wise, it just bothers me what poor state that whole thing was in

[09:05:19.0000] <Domenic>
annevk: can do! I've been seeing the emails go by and it seemed kind of depressing, so I'm glad you're feeling like it's going well.

[09:06:16.0000] <annevk>
Domenic: it's not been an easy week, but I learned a lot and made progress (and I documented most issues I came across this time)

[09:07:29.0000] <annevk>
Domenic: the main issue is that each time you see something you want to fix, there's something else you have to fix first, and on it goes

[09:37:59.0000] <annevk>
Domenic: btw, I've got about 8 more working days until I'm gone so if we need to do abort controllers Monday would be a good time to start

[09:38:17.0000] <Domenic>
annevk: eek, ok, sounds like a plan

[09:38:53.0000] <annevk>
Domenic: I can go through what needs to be done in DOM still

[09:39:32.0000] <annevk>
Domenic: Fetch is going to wait until July

[09:39:46.0000] <annevk>
Domenic: btw, do you know when ReadableStream for requests happens?

[09:40:12.0000] <Domenic>
annevk: implementation? yhirano__ is working on some refactoring to make it possible, but it's high priority from what i understand

[09:40:39.0000] <annevk>
Domenic: looking forward to it

[09:41:24.0000] <annevk>
I really hope that by the end of the summer unit of related browsing contexts is created imperatively

[09:41:48.0000] <annevk>
Stretch goal would be doing the same for agent / agent clusters

[09:42:46.0000] <annevk>
Btw, Domenic, I'm hoping you still want to do History at some point, I'm only touching that when necessary

[09:43:12.0000] <annevk>
/me -> weekend

[09:45:13.0000] <Domenic>
Yeah, at some point... keep getting dragged into more urgent things, SAB and now modules


2017-05-13
[06:04:38.0000] <caitp>
I'm looking at WebIDL and DOM looking for an explanation about the difference between Chrome and FF when it comes to enumerable-ness of indexed properties (particularly in NodeList.childNodes), to justify either behaviour, but I'm having trouble finding support for either behaviour

[06:37:03.0000] <annevk>
caitp: NodeList.prototype.childNodes is not a thing, afaik

[06:37:25.0000] <caitp>
right, you know what I mean

[06:37:32.0000] <caitp>
the NodeList returned by thing.childNodes

[06:44:08.0000] <annevk>
oh

[06:46:17.0000] <annevk>
caitp: can't really find anything quickly other than https://heycam.github.io/webidl/#legacy-platform-object-property-enumeration which doesn't really address the question

[06:50:22.0000] <caitp>
I'm not sure which one is correct, if any

[06:50:54.0000] <caitp>
related to https://twitter.com/ziyunfei/status/863347908929769472

[06:51:03.0000] <caitp>
anyways, will look at that on monday I guess

[06:54:51.0000] <annevk>
caitp: is this about the iterable<> declaration or about enumerable properties?

[06:55:04.0000] <annevk>
I guess I don't really know what Object.values does

[07:03:18.0000] <caitp>
its like Object.keys, returns values of all own enumerable properties

[07:03:51.0000] <caitp>
non-Symbol-keyed properties*

[07:04:37.0000] <caitp>
ff reports the indexed properties as enumerable, chrome doesnt

[07:05:18.0000] <annevk>
caitp: pretty sure Firefox is correct since bz did most of that stuff

[07:05:44.0000] <annevk>
caitp: and platform objects always tend to have everything enumerable, afaik

[07:05:58.0000] <caitp>
maybe he can explain the choice

[07:07:34.0000] <annevk>
caitp: https://heycam.github.io/webidl/#LegacyPlatformObjectGetOwnProperty defines it

[07:08:05.0000] <caitp>
yes, but that attribute doesnt apply to NodeList afaict

[07:08:17.0000] <annevk>
caitp: why not?

[07:08:43.0000] <annevk>
caitp: nodelist has a getter and is therefore a legacy platform object

[07:09:11.0000] <caitp>
hmm, alright

[07:09:50.0000] <caitp>
so, blink bindings bug, mystery solved. thanks for taking the time

[14:43:41.0000] <zewt>
hooray turning https off on a site because browsers are stupid and refuse to load mixed-content iframes

[14:44:10.0000] <zewt>
forcing people to not use https sure is a great security feature


2017-05-15
[00:53:26.0000] <zcorpan>
MikeSmith: I suppose template should have been parsed like foreignObject

[00:54:09.0000] <annevk>
I think all that was considered at the time

[00:54:27.0000] <annevk>
But too long ago to remember the specifics :/

[00:54:58.0000] <zcorpan>
Or like foreignObject doesn't solve that, hmm

[00:55:05.0000] <MikeSmith>
ok

[00:56:12.0000] <MikeSmith>
well if we don’t want to change the parsing at this point, or can’t, then I guess we should at least change the document-conformance requirements as far as the end-tag omission rules

[00:56:16.0000] <MikeSmith>
right?

[00:57:11.0000] <MikeSmith>
I mean specifically to say that the </td> and </tr> end tags can’t be omitted if for a td or tr element that’s a child of a template element

[01:07:08.0000] <zcorpan>
Right

[01:15:33.0000] <MikeSmith>
OK

[01:15:38.0000] <MikeSmith>
will raise a PR for that then

[01:15:44.0000] <MikeSmith>
thanks

[01:49:06.0000] <hsivonen>
/me is currently very annoyed by http://www.unicode.org/L2/L2017/17168-utf-8-recommend.pdf

[01:49:22.0000] <hsivonen>
I wonder how to formulate polite and well-reasoned feedback

[01:49:35.0000] <hsivonen>
I don't feel polite at all about that at the moment

[01:51:53.0000] <hsivonen>
I guess I'm going to argue that we know UTF-16 is bad, so we should optimize UTF-8 decode to software that uses UTF-8 internally and, therefore, we should optimize for UTF-8 *validation*

[01:55:09.0000] <annevk>
hsivonen: can't we just argue on the basis that changing something widely deployed is bad if there's no concrete benefit?

[01:55:45.0000] <annevk>
hsivonen: I guess I'm glad you know where to even go raise this, Unicode is rather opaque to me

[01:58:03.0000] <hsivonen>
annevk: arguing from deployment isn't a great point when the argument for change involves standardizing ICU's spec violation

[01:58:46.0000] <hsivonen>
I want to argue though that Unicode now owning ICU is hazardous to the credibility of spec text if ICU bugs, not spec text, rules

[01:59:26.0000] <annevk>
I had forgotten the bit about ICU, sigh

[02:00:23.0000] <annevk>
JavaScript folks building APIs directly on top of ICU is also rather worrisome

[02:00:36.0000] <annevk>
But I haven't been able to convince littledan and others of that I think

[02:02:10.0000] <littledan>
hey, now's a great time to have this conversation; Mozilla just started contracting with Igalia to work on Intl features (Zibi's been my contact), so I'll have more time to take things in whatever direction is appropriate

[02:02:51.0000] <littledan>
question 1: Do you think a normative reference to, not ICU but CLDR would be bad?

[02:03:27.0000] <annevk>
CLDR dependency seems more okay, there's some precedent for that I think

[02:04:21.0000] <annevk>
That's standardized data, basically, not a standardized implementation

[02:04:40.0000] <littledan>
question 2: If new APIs should differ from ICU, how should they? Obviously we won't replicate warts like calling something Normalizer2, but there are some basic patterns that have been copied so far, like using using a factory that holds locale data, and keeping the names when they seem reasonable

[02:04:46.0000] <littledan>
are these bad ideas?

[02:05:51.0000] <littledan>
question 3: How should we deal with OS default settings--should it somehow be serialized in a locale object (similar to current patterns), or should it just be threaded through as a complicated default, possibly in conjunction with new options that explicitly opt into it (Zibi's been suggesting this; apparently the suggestion came from MS)

[02:07:36.0000] <annevk>
I think in terms of API design it's always good to check how various systems solve it, but ultimately you want something that looks familiar to JavaScript developers; if what ICU does matches that it doesn't necessarily seem problematic to copy patterns

[02:08:09.0000] <annevk>
As for that last question, OS defaults are typically exposed on the Navigator object somehow

[02:08:52.0000] <littledan>
question 4: Should we add CLDR pattern strings for datetime and number formatting? Should we add parsing? We've been leaving these out so far, in order to avoid being too ICU-like

[02:09:15.0000] <littledan>
the claim is that, without pattern strings, there's no realistic way to expose the OS defaults on the navigator

[02:11:13.0000] <annevk>
littledan: does Microsoft participate actively?

[02:11:34.0000] <littledan>
not at the moment; they're too tied up in investigating switching to ICU

[02:11:37.0000] <annevk>
littledan: so far they have the only non-ICU implementation that's somewhat competitive in terms of features

[02:11:41.0000] <annevk>
oh my

[02:12:02.0000] <littledan>
OTOH we have community members who are building various polyfills based on CLDR and not ICU

[02:12:11.0000] <annevk>
I wish Mozilla had more resources so we could write an impl in Rust

[02:12:18.0000] <littledan>
like Mathias Bynens and the Intl.js folks

[02:13:25.0000] <littledan>
well, I was just invited to the Mozilla all-hands for this Intl work, and then un-invited since it's not Quantum; maybe if a Rust rewrite were added into the picture, Intl would suddenly be Quantum and everyone would get resources...

[02:14:29.0000] <littledan>
currently Zibi's working on using ICU *more* rather than Mozilla's legacy stuff for things were functionality overlaps; Jungshik Shin is doing the same within V8

[02:14:41.0000] <littledan>
since the non-ICU stuff tends to be a worse implementation

[02:15:40.0000] <annevk>
Well, hsivonen just wrote a new encoding library in Rust that seems to be better than what ICU offers, which is what prompted my thing above

[02:15:58.0000] <littledan>
anyway, FWIW V8 doesn't use ICU's UTF-8 decoder and isn't looking at switching

[02:16:13.0000] <annevk>
But we didn't use ICU before, we used iconv

[02:16:24.0000] <annevk>
Well, plus patches

[02:16:40.0000] <littledan>
anyway, that thread is sad

[02:17:34.0000] <annevk>
littledan: anyway, I guess we are mostly on the same page, I just hope that everyone using ICU underneath won't make future refactorings extremely hard

[02:18:14.0000] <littledan>
I hope so too. The Intl spec tries to be sufficiently detailed so it should be possible. Do you think it meets that goal?

[02:18:37.0000] <littledan>
(actually, IMO the Intl spec is too detailed now, tying down some things to a wrong default that implementations should be allowed to get right)

[02:26:45.0000] <annevk>
littledan: I haven't reviewed it in enough detail to say, I probably should one day

[03:25:44.0000] <hsivonen>
hmm. my email doesn't show up at http://unicode.org/pipermail/unicode/2017-May/date.html

[03:26:07.0000] <hsivonen>
maybe stuck in human moderation or achive view slow to update

[03:26:43.0000] <hsivonen>
annevk: argument from deployment works, actually, since Blink and WebKit don't use the ICU UTF-8 decoder

[03:28:10.0000] <hsivonen>
annevk: uconv isn't iconv plus patches

[03:29:54.0000] <hsivonen>
annevk: we use iconv only for non-Android, non-Mac *nix filenames

[03:30:32.0000] <MikeSmith>
JakeA: when you have time, please see https://stackoverflow.com/questions/43974704/service-workers-fetch-event-listener-what-does-it-catch and consider posting an answer

[03:32:08.0000] <MikeSmith>
I tried myself http://stackoverflow.com/a/43976229/441757 but that’s basically just repeating what’s already explained at MDN and the OP seems to indicate they’re seeing some behavior that doesn’t conform to the requirements

[03:32:41.0000] <MikeSmith>
but they’re seeing it in both Firefox and Chrome so maybe there’s something I’m misunderstanding

[03:32:49.0000] <MikeSmith>
annevk:

[03:32:55.0000] <MikeSmith>
annevk: ⬆

[03:47:18.0000] <annevk>
hsivonen: oh, uconv is its own thing, ta

[03:49:35.0000] <annevk>
MikeSmith: added an answer

[03:49:46.0000] <MikeSmith>
annevk: thanks

[03:49:50.0000] <MikeSmith>
/me takes a look

[03:50:25.0000] <MikeSmith>
ah, d'oh navigations

[03:50:29.0000] <MikeSmith>
annevk: thanks

[03:52:05.0000] <annevk>
mkwst: potentially with Origin policy we could do the "request with me without credentials always" thing, but bleh

[03:52:47.0000] <mkwst>
annevk: *shrug* It would be nice if the problem statement was a bit crisper. It's not clear what folks want.

[03:53:50.0000] <annevk>
mkwst: timbl doesn't like varying on credentials; he thinks the input should be just a URL, nothing else

[03:54:11.0000] <hsivonen>
I now I got notification that my email got stuck in moderation

[03:54:20.0000] <annevk>
mkwst: and the TAG apparently doesn't just tell me no so now there's this debate-by-proxy

[03:54:30.0000] <annevk>
s/me/him/ oops

[03:56:06.0000] <mkwst>
annevk: *shrug* Like I said on the bug, I don't think something like `Access-Control-Allow-Origin: omg-its-totally-public-did-you-make-sure-this-is-sane?` is out of the question.

[03:56:37.0000] <mkwst>
But I'm reluctant to add it without something more compelling than "Tim doesn't want to add options to `fetch()`."

[03:58:07.0000] <annevk>
mkwst: I'd actually like that implementers pick up on existing extensions first

[03:59:20.0000] <mkwst>
By "extension" do you mean "redirect behavior"?

[03:59:39.0000] <annevk>
mkwst: that and also allowing * for more headers

[03:59:42.0000] <mkwst>
I know some folks on our loading team wanted to look at that.

[04:00:00.0000] <mkwst>
Hrm. Which headers? That should be a small change.

[04:00:35.0000] <annevk>
mkwst: Expose-Headers, Allow-Headers, Allow-Methods (as long as no credentials are in play and with the exception of Authorization)

[04:01:03.0000] <annevk>
mkwst: I filed bugs and there's tests too

[04:01:14.0000] <mkwst>
I see. I'll follow up.

[04:16:41.0000] <mkwst>
annevk: Does Gecko support these wildcards? I'm trying to run the tests you added from `w3c-test.org`, but it's too slow to execute.

[04:16:56.0000] <annevk>
mkwst: I don't think it does yet

[04:17:14.0000] <annevk>
mkwst: using https:// sometimes ends up being faster on w3c-test.org

[04:17:24.0000] <annevk>
mkwst: not sure what is going on with that server, it's rather useless

[04:17:39.0000] <mkwst>
Huh. HTTPS is faster.

[04:18:51.0000] <mkwst>
Ok. I'll poke our loading folks to see if they can get this on a roadmap.

[04:33:45.0000] <hsivonen>
I take it that moderation of the unicode list doesn't happen at European business hours

[05:05:23.0000] <annevk>
hsivonen: Mark Davis lives in Europe, but I suppose he wouldn't do the moderation

[05:06:01.0000] <annevk>
(I tried to find if he has a GitHub ID so I could copy him on that issue, but no luck.)

[05:53:32.0000] <zcorpan>
MDN and caniuse claim IE10/11 support WebKitCSSMatrix. Per browserstack testing http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5168 that seems false... Anyone know which version (of Edge) it was added?

[07:30:32.0000] <smaug>
var l = document.createElement("label"); l.innerHTML = "<input>"; l.firstChild.labels.length

[07:30:37.0000] <smaug>
why would that be 0?

[07:32:04.0000] <annevk>
smaug: sounds like a bug

[07:35:03.0000] <smaug>
that is what I think too

[07:36:35.0000] <nox>
What kind of music would the band "Pseudo-classing Pseudo-elements" play?

[07:37:50.0000] <annevk>
Ambient

[07:48:28.0000] <nox>
annevk++

[09:15:09.0000] <jyasskin>
hsivonen: Markus works for Google, so if a direct line would help, I can help set one up.

[09:23:43.0000] <jyasskin>
hsivonen: Your message didn't really make clear to me what operation the new spec would make difficult. Is it ingesting external "claimed-UTF-8" into internal "definitely-UTF-8"? Markus's team has written that operation, so he'll have some context for it.

[10:18:44.0000] <annevk>
jyasskin: yes, when you need to U+FFFD input

[11:21:20.0000] <hsivonen>
jyasskin: the proposed spec change requires not just an UTF-8 validation state machine but also the states for skipping over the original UTF-8 forms that were made illegal for UTF-16 compat

[11:22:00.0000] <hsivonen>
jyasskin: so it requires a larger state machine and the rationale is really flimsy: "feels right" in the context of an UTF-16-oriented implementation

[11:23:07.0000] <hsivonen>
jyasskin: currently, you only need the validation state machine states, since you fall out of the state machine to output U+FFFD as soon as invalidity is detected

[11:28:34.0000] <jyasskin>
hsivonen: Mhmm. FWIW, even ignoring UTF-16, transforming up to 6 bytes of data matching the "n 1's followed by n-1 bytes" form into a single U+FFFD seems reasonable. But if it makes the optimal UTF-8 validator larger, that seems like a good argument against it.

[11:30:02.0000] <jyasskin>
It's the sort of thing that might convince Markus, especially if you have code size or speed measurements to explain the impact.

[11:36:51.0000] <hsivonen>
jyasskin: I think the current spec text is technically better due to the state machine size issue, but procedurally, I think a proposal to change something like this should be argued way better than "feels right"

[11:37:21.0000] <jugglinmike>
JakeA: I've been trying to verify the validity of a service workers test in WPT. I could use your help, though. Would you mind weighing in on https://codereview.chromium.org/2873373004/ ?

[11:39:28.0000] <jyasskin>
hsivonen: The choice of how many U+FFFDs to include initially seemed like a matter of taste to me, in which case "feels right" is perhaps the only way to decide. However, you've introduced a technical reason that one of the options is easier to implement, which starts meaning the technical reason should win.

[11:57:10.0000] <JakeA>
jugglinmike: looking into it now…

[12:06:34.0000] <JakeA>
jugglinmike: I agree with your analysis. That condition shouldn't happen. I'm not sure why the test is broken down into wait_for_install and wait_for_activate – isn't wait_for_activate enough?

[12:09:45.0000] <jugglinmike>
JakeA: Seems that way

[12:11:22.0000] <jugglinmike>
JakeA: I was going to say that, from the perspective of the person who thought these extra conditions were necessary, the split would also be necessary

[12:12:05.0000] <jugglinmike>
but knowing the history of the test (specifically the commit that Matt found https://hg.mozilla.org/mozilla-central/rev/1ea2ebce35fe ), this was originally written in such a way as to not need that

[12:12:55.0000] <jugglinmike>
I'm glad to get your confirmation here. I've spent the better part of today going back and forth between the spec, the test, and your post https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/

[12:44:47.0000] <annevk>
jyasskin: maybe initially a matter of taste, but a decade in it should not be a matter of taste to change it

[12:45:12.0000] <jyasskin>
annevk: Fair enough.

[12:52:17.0000] <jugglinmike>
JakeA: Would you mind taking a look at another one? https://codereview.chromium.org/2880823002/diff/1/third_party/WebKit/LayoutTests/external/wpt/service-workers/service-worker/ready.https.html#newcode61

[13:03:27.0000] <JakeA>
jugglinmike: glad the event loop post was useful. Looking at that other issue now…

[13:05:52.0000] <JakeA>
jugglinmike: is it specifically line 61+ that you're wanting me to look at, or the test as a whole?

[13:09:06.0000] <jugglinmike>
JakeA: actually, it's falken's request and my response to his request

[13:09:28.0000] <JakeA>
Ahh the equality thing. Gotcha

[15:26:12.0000] <tobie>
What does setting [SecureContext] on a partial interface actually do?

[15:26:51.0000] <tobie>
See https://github.com/heycam/webidl/issues/119

[15:31:05.0000] <Domenic>
tobie: not really sure, but maybe nothing, since the main interface already has it...

[15:31:54.0000] <tobie>
Domenic: seems like we should disallow them altogether, if that's the case.

[15:33:03.0000] <Domenic>
Well, or that issue is suggesting mandating them, but yeah....

[15:33:31.0000] <tobie>
Well, the mandate is decorative.

[15:34:22.0000] <tobie>
you can't have a constructor on a partial interface. You shouldn't have [SC] either.

[15:36:31.0000] <jyasskin>
tobie: Is it a shorthand for putting [SecureContext] on all the bits added by that partial part of the interface?

[15:37:07.0000] <tobie>
jyasskin: I don't think so. But I might be wrong.

[15:37:29.0000] <tobie>
jyasskin: I'm having a hard time parsing sentences like "The interface or namespace is not available only in secure contexts." tbh

[15:38:20.0000] <jyasskin>
I interpret "The interface member is available only in secure contexts if and only if the interface or partial interface the member is declared on is." to say that methods within a [SecureContext] partial interface are themselves [SecureContext].

[15:38:39.0000] <jyasskin>
I wouldn't object to saying that you should just say [SecureContext] on all the members you intend it for.

[15:41:45.0000] <jyasskin>
tobie: I think [SecureContext] on a partial interface does nothing to the actual interface object, since https://heycam.github.io/webidl/#dfn-exposed doesn't care whether *partial* interfaces are available only in secure contexts.

[15:42:29.0000] <jyasskin>
s/wouldn't object to/would support/

[15:42:54.0000] <tobie>
jyasskin: so [SecureContext] on a partial interface whose's non partial interface doesn't have [SecureContext] is shorthand for marking each members of that partial interface with [SecureContext]?

[15:43:10.0000] <jyasskin>
That's how I read the current wording, yes.

[15:44:50.0000] <tobie>
Whereas [SecureContext] on a non partial interface makes the whole interface unavailable, not just its members right?

[15:44:58.0000] <jyasskin>
Right.

[15:45:51.0000] <tobie>
I think it would be a lot simpler to spec, and a lot clearer to read and understand if that was simplified.

[15:46:51.0000] <jyasskin>
I agree. :)

[15:57:47.0000] <jyasskin>
tobie: Oh great, you're citing me as if I actually know things instead of just guessing them based on some words in a spec. ;-)

[16:01:35.0000] <tobie>
jyasskin: As far as I'm concerned, anybody willing to comment here understands this better than I do at present. :D

[16:18:42.0000] <tobie>
So predictably bz has a point

[16:25:44.0000] <Domenic>
tobie: I don't understand the question about 'How would you handle the "on |O| if |O| is not null" part keeping it in WebIDL, though?'

[16:25:55.0000] <Domenic>
Why not just put "on |O| if |O| is not null" into those steps?

[16:26:01.0000] <Domenic>
Like you did?

[16:26:44.0000] <tobie>
I guess it's the "on" part that bothers me.

[16:27:15.0000] <Domenic>
Hmm, seems fine to me...

[16:30:45.0000] <tobie>
Domenic: OK, I was thinking about putting that right after the ¶ were https://heycam.github.io/webidl/#dfn-regular-attribute is defined.

[16:32:10.0000] <Domenic>
tobie: seems good. I edited my most recent comment as I realized I forgot the "O" bits.

[16:32:38.0000] <tobie>
I was about to ask. :)

[16:33:04.0000] <tobie>
Alright I'll fix that tomorrow

[16:33:08.0000] <tobie>
ty


2017-05-16
[17:13:13.0000] <jsbell>
Does "... and abort these steps" add anything useful after "return" or "throw"? HTML uses "return foo and abort these steps" which I assume is just old-and-crufty style, but maybe people like it... ?

[17:14:02.0000] <TabAtkins>
jsbell: I find it makes it *extremely* clear that the sync part ends there. Definitely superfluous, but still helpful imo.

[17:15:14.0000] <Domenic>
jsbell: we've stopped using it as of the Infra Era, which formally defines return/throw to terminate the algorithm

[17:15:44.0000] <Domenic>
As with most things in Infra, HTML is gradually updating to use them as we refactor various algorithms, so it'll be a mismash for a while.

[17:16:03.0000] <Domenic>
https://infra.spec.whatwg.org/#algorithm-control-flow

[17:23:58.0000] <jsbell>
Thanks. "use judiciously when it improves readability" is a possible take-away, balancing the risk of making its absence confusing.

[17:30:15.0000] <tobie>
jsbell: it's fine until you have nested steps at which point it increases confusion

[21:24:29.0000] <MikeSmith>
annevk: the problems with instability of w3c-test.org are basically just that wptserve isn’t really suitable for being run as a persistent process. w3c-test.org is the only place where it’s run persistently with any kind fo load; everybody else just runs it locally with insignificant load

[21:25:54.0000] <MikeSmith>
annevk: the problem is that if wptserve running persistently under load leaks memory. Lots of it, til it eventually consumes 4GB+ of RAM. And it also starts to do other weird things

[21:26:33.0000] <MikeSmith>
annevk: so anyway I've now made a cron job that just restarts it every 1 hour

[23:07:00.0000] <jgraham>
As per the other channel, running a few thousand test files in CI doesn't seem like obviously insignificant load

[23:07:25.0000] <MikeSmith>
yeah

[23:07:28.0000] <jgraham>
So I wonder if there's something more specific that's problematic (e.g. specific tests that cause leaks)

[23:07:36.0000] <MikeSmith>
dunno

[23:07:41.0000] <MikeSmith>
very hard to troubleshoot

[23:10:57.0000] <jgraham>
I can maybe write a special patch to generate some memory logs

[23:11:05.0000] <jgraham>
See if we can figure out what's goign on

[23:12:07.0000] <MikeSmith>
that would be good

[23:14:04.0000] <MikeSmith>
when I restarted it today, on the w3c-test.org which has 7.8GB of RAM and normally has about 5.8GB of that sitting free, there was instead only 1.7GB free

[23:14:23.0000] <MikeSmith>
so hey on the bright side, it hadn’t yet consumed all of the free RAM

[00:21:14.0000] <annevk>
rbyers: I lost Chromium issue privileges so I can no longer add labels and such

[00:21:17.0000] <annevk>
rbyers: intentional?

[00:21:47.0000] <annevk>
rbyers: https://bugs.chromium.org/p/chromium/issues/detail?id=722737 will be the kind of issues you get from now

[01:20:49.0000] <jochen__>
sorry about that, I'll ping internally to restore your privs

[02:16:34.0000] <smaug>
annevk: https://html.spec.whatwg.org/#attr-label-for

[02:16:49.0000] <smaug>
"same tree"

[02:17:04.0000] <smaug>
but that doesn't care about in-document or anything

[02:23:11.0000] <smaug>
filed https://github.com/whatwg/html/issues/2686

[02:29:27.0000] <Younder>
smaug, What is the reason for the current instability in the released blink implementation?

[02:29:40.0000] <smaug>
?

[02:29:59.0000] <smaug>
/me doesn't know too much about blink

[02:30:57.0000] <smaug>
Last time I hacked webkit (pre-blink) was after all 11+ years ago :p

[03:55:04.0000] <annevk>
jochen__: do you think you could describe what document.open() does exactly in https://github.com/whatwg/html/issues/1698?

[03:55:13.0000] <annevk>
jochen__: I guess I can start writing some tests

[04:01:11.0000] <jochen__>
I can try, however, it's very different from what the spec says or Firefox does :/

[04:05:21.0000] <rbyers>
annevk: Sorry, no of course it's not intentional 😉.  I'll investigate.

[04:10:18.0000] <jochen__>
rbyers: i've sent an email to committers@

[04:16:57.0000] <annevk>
jochen__: what Fx and the spec do is overly complicated so I'd rather not go there

[04:33:07.0000] <annevk>
nox: you said that WebKit doesn't implement document.open() with three arguments, but afaict it does

[04:33:10.0000] <annevk>
nox: in https://github.com/whatwg/html/issues/1698

[04:33:42.0000] <annevk>
nox: at least document.open("","","") opens a new window in Safari TP

[04:40:52.0000] <nox>
annevk: Yeah that part was wrong

[04:41:42.0000] <annevk>
nox: would you mind if I remove the comment?

[04:41:57.0000] <nox>
annevk: Nope.

[04:42:29.0000] <annevk>
ta

[04:42:29.0000] <nox>
annevk: Is the spec going to align to WebKit behaviour?

[04:55:32.0000] <jochen__>
i hope not, unless WK meanwhile implements the origin check :)

[04:57:52.0000] <annevk>
nox: something that doesn't create a new global ideally

[05:02:55.0000] <nox>
annevk: WOOOO

[05:03:06.0000] <nox>
jochen__: What?

[05:09:42.0000] <annevk>
nox: it's probably gonna take a while longer, but I've made some progress

[05:38:14.0000] <jochen__>
nox, afaik WK hasn't implemented https://github.com/whatwg/html/pull/583 yet

[05:44:44.0000] <nox>
jochen__: Oh.

[05:44:55.0000] <nox>
jochen__: I meant the part where WK doesn't create a new Window.

[07:29:27.0000] <jochen__>
annevk: I tried to summarize what blink does... at places, it's not quite clear to me how our code translates to spec text and vice versa

[07:30:39.0000] <annevk>
jochen__: ta, I'll have a look tomorrow or maybe later today, time to do some parenting

[07:34:42.0000] <jochen__>
enjoy

[12:53:54.0000] <Yuhong>
It would be funny if W3C was to version HTML based on the WHATWG web developer edition.

[12:54:08.0000] <Yuhong>
Similar to what they did with HTML 3.2.

[14:33:46.0000] <zcorpan>
cdumez is quick with fixing bugs <3 https://bugs.webkit.org/show_bug.cgi?id=172114

[14:43:21.0000] <zcorpan>
in related news https://bugs.webkit.org/show_bug.cgi?id=110001 - yay!


2017-05-17
[18:41:17.0000] <knownanon>
i need a friend(s)

[23:54:54.0000] <XhmikosR>
MikeSmith: https://github.com/w3c/markup-validator/compare/master...XhmikosR:master?w=1

[23:55:11.0000] <MikeSmith>
/me looks

[23:55:58.0000] <MikeSmith>
dang that’s a long changelog

[23:56:14.0000] <XhmikosR>
it's the whitespace changes hence ?w=1

[23:57:01.0000] <MikeSmith>
OK

[23:57:18.0000] <XhmikosR>
should I keep tabs for indentation?

[23:57:27.0000] <XhmikosR>
it seems this repo is using tabs

[23:57:34.0000] <MikeSmith>
no don’t bother

[23:57:47.0000] <MikeSmith>
well if you have time

[23:57:56.0000] <MikeSmith>
I guess it is better to be consistent

[23:58:14.0000] <MikeSmith>
but that said, all this code it legacy stuff anyway

[23:58:27.0000] <MikeSmith>
so why do the PNGs show up in the CL?

[23:58:38.0000] <MikeSmith>
> htdocs/images/markup_validation_service.png

[23:58:45.0000] <MikeSmith>
> Diff not rendered.

[23:59:05.0000] <XhmikosR>
yeah the web interface doesn't load everything

[23:59:15.0000] <XhmikosR>
MikeSmith: only dupe gif/png is v15445

[23:59:21.0000] <XhmikosR>
how does the badge work?

[23:59:42.0000] <XhmikosR>
    URI       = http://validator.w3.org/images/v15445

[23:59:43.0000] <XhmikosR>
    Local URI = images/v15445

[23:59:46.0000] <MikeSmith>
no clue

[23:59:48.0000] <XhmikosR>
doesn't specify the extension

[23:59:48.0000] <MikeSmith>
/me looks

[00:00:00.0000] <MikeSmith>
oh

[00:00:11.0000] <MikeSmith>
well W3C server use conneg

[00:00:33.0000] <MikeSmith>
*servers

[00:00:58.0000] <XhmikosR>
correction: there's also images/valid_icons which have both gif and png

[00:01:22.0000] <MikeSmith>
ah “Losslessly compress PNG files.” is why the PNGs changed

[00:01:31.0000] <XhmikosR>
I guess it should be left like that otherwise we'd need to redirect

[00:01:41.0000] <MikeSmith>
yeah I suppose so

[00:03:47.0000] <MikeSmith>
OK LGTM

[00:04:17.0000] <MikeSmith>
untested but not sure how to test it anyway

[00:04:45.0000] <XhmikosR>
I'll revert to tabs for indentation

[00:04:56.0000] <XhmikosR>
extra noise and it's not consistent for the repo

[00:08:31.0000] <MikeSmith>
OK

[00:08:41.0000] <MikeSmith>
yeah that would be good

[00:09:18.0000] <MikeSmith>
anyway if you raise an actual PR for it I will review it and merge it and push it out to production

[00:09:47.0000] <MikeSmith>
with help from somebody on the W3C systems team to kick teh W3C Varnish caches

[00:10:01.0000] <XhmikosR>
and to verify we don't break anything with the gif images removal :)

[00:10:20.0000] <MikeSmith>
yeah

[00:10:28.0000] <annevk>
zcorpan: how much of the ?wss variant tests of websockets/ actually work?

[00:12:07.0000] <zcorpan>
annevk: i think secure websocket doesn't work at all with wptserve (yet). But we used to run ?wss in Spartan

[00:16:24.0000] <annevk>
zcorpan: but constants.js doesn't use the secure port because secure sockets doesn't work, but then the tests still don't actually work

[00:16:41.0000] <annevk>
I dunno, seems annoying

[00:18:16.0000] <annevk>
zcorpan: are there any cross-origin tests?

[00:22:07.0000] <zcorpan>
annevk: no

[00:23:04.0000] <annevk>
zcorpan: would they be hard to make?

[00:23:12.0000] <annevk>
zcorpan: I haven't really figured out the setup

[00:23:44.0000] <annevk>
zcorpan: I need something like opening-handshake/003.html but then to an IDNA subdomain

[00:23:57.0000] <annevk>
zcorpan: so I can test the origin field of the events (which doesn't appear to be tested at all)

[00:27:55.0000] <zcorpan>
annevk: seems like it shouldn't be hard. Changing constants.js to SCHEME_DOMAIN_PORT = 'ws://{{domains[www1]}}:' + PORT; seems like it successfully opens a websocket

[00:28:29.0000] <annevk>
zcorpan: it failed for IDNA

[00:29:07.0000] <XhmikosR>
MikeSmith: I split the patches for easier reviewing. Feel free to squash and merge those after proper reviewing, especially for the removed files

[00:29:20.0000] <annevk>
zcorpan: I did new WebSocket(url.replace("://", "://IDNA."))

[00:33:00.0000] <zcorpan>
annevk:   SCHEME_DOMAIN_PORT = 'ws://xn--n8j6ds53lwwkrqhv28a.web-platform.test:' + PORT;  seems to work for me

[00:33:46.0000] <annevk>
zcorpan: does it also work with non-ASCII input?

[00:34:02.0000] <annevk>
I wonder what's going on

[00:35:33.0000] <zcorpan>
annevk: Failed to construct 'WebSocket': The URL 'ws://å¤©æ°—ã®è‰¯ã„æ—¥.web-platform.test:50591/origin' is invalid.

[00:35:46.0000] <zcorpan>
annevk: I suppose the test needs to declare encoding

[00:36:02.0000] <annevk>
zcorpan: yeah, add that and it'll still fail (at least in my experience)

[00:36:20.0000] <annevk>
zcorpan: but in a different way

[00:38:02.0000] <zcorpan>
annevk: with <meta charset=utf-8> in opening-handshake/003.html it passes in chrome and firefox, if I comment out `assert_equals(e.wasClean, true);` (which is not relevant to whether open handshake was successful)

[00:38:22.0000] <zcorpan>
annevk: what fails for you?

[00:39:38.0000] <annevk>
zcorpan: okay if I get back to you in a bit?

[00:39:47.0000] <zcorpan>
sure

[00:47:21.0000] <annevk>
For BroadcastChannel Fx already did ASCII weirdly enough

[00:48:28.0000] <annevk>
Okay, back to WebSocket

[00:50:23.0000] <annevk>
zcorpan: it works for me too now

[00:51:13.0000] <annevk>
zcorpan: I suspect I had ?wss there still or some such

[00:51:43.0000] <zcorpan>
annevk: ok, great!

[00:52:35.0000] <MikeSmith>
XhmikosR: thanks will take a look

[01:21:19.0000] <MikeSmith>
XhmikosR: thanksーdeployed to production

[01:21:55.0000] <XhmikosR>
MikeSmith: did you regenerate the minified files?

[01:22:01.0000] <MikeSmith>
no

[01:22:13.0000] <MikeSmith>
dunno how

[01:22:23.0000] <XhmikosR>
there's a makefile

[01:22:24.0000] <MikeSmith>
is there are target for that in the makefile?

[01:22:26.0000] <MikeSmith>
ah

[01:22:30.0000] <XhmikosR>
I skipped this because I thought you guys do it

[01:22:35.0000] <MikeSmith>
yeah

[01:30:15.0000] <MikeSmith>
XhmikosR: OK did that too

[01:31:18.0000] <XhmikosR>
MikeSmith: all seems to be ok

[01:31:32.0000] <XhmikosR>
one thing I couldn't change due to the way things are done is this

[01:31:33.0000] <XhmikosR>
    <style type="text/css" media="all">

[01:31:34.0000] <XhmikosR>
      @import "./style/base";

[01:31:34.0000] <XhmikosR>
    </style>

[01:31:40.0000] <XhmikosR>
this should be a link

[01:31:59.0000] <MikeSmith>
hmm yeah dunno why it is that way

[01:32:14.0000] <XhmikosR>
and perhaps add the favicon to the repo so that it's not served from w3.org

[01:32:30.0000] <MikeSmith>
oh

[01:32:36.0000] <MikeSmith>
that would be good yeah

[01:34:28.0000] <XhmikosR>
I'm not familiar with the src in order to make these changes myself

[01:35:48.0000] <MikeSmith>
I’m not either

[01:35:57.0000] <MikeSmith>
nobody else around now is either

[01:35:58.0000] <XhmikosR>
also are you sure the assets are being flushed?

[01:36:11.0000] <XhmikosR>
for js combined I see last modified Tue, 14 Jul 2015 10:45:55 GMT

[01:36:23.0000] <XhmikosR>
and for the css

[01:36:24.0000] <MikeSmith>
oh

[01:36:36.0000] <XhmikosR>
basically all assets

[01:36:55.0000] <MikeSmith>
yeah I need systems team to do the Varnish thing

[01:37:34.0000] <XhmikosR>
oh ok then what we see live is the old stuff

[01:38:55.0000] <MikeSmith>
yeah

[01:39:20.0000] <MikeSmith>
there is some mechanism that I can supposedly use myself to purge teh caches

[01:39:40.0000] <MikeSmith>
but every time I’ve tried it it seems to have no effect

[01:40:30.0000] <MikeSmith>
so I just wait til somebody who has perms can do it however they do

[01:45:42.0000] <MikeSmith>
XhmikosR: check again later and if they haven’t been updated by tomorrow lemme know

[01:46:17.0000] <MikeSmith>
during May some people are off or only partially around

[01:48:04.0000] <XhmikosR>
cool, I'll see if I can drop @import

[01:51:39.0000] <MikeSmith>
k

[01:52:03.0000] <XhmikosR>
maybe some of the branches could be removed if merged?

[01:53:44.0000] <XhmikosR>
MikeSmith: https://github.com/w3c/markup-validator/compare/master...XhmikosR:master but it's totally untested

[01:58:54.0000] <MikeSmith>
/me looks

[02:00:38.0000] <XhmikosR>
are there any tests we could run to verify we don't break anything?

[02:01:14.0000] <XhmikosR>
in theory my changes shouldn't break anything but I'd feel more confident if we could verify it

[02:02:52.0000] <MikeSmith>
if tehre were tests I guess there would be targets in the makefile

[02:04:50.0000] <XhmikosR>
test:

[02:04:50.0000] <XhmikosR>
	misc/testsuite/harness.py --validator_uri=$(VALIDATOR_URI) run

[02:05:41.0000] <MikeSmith>
> AttributeError: 'ValidatorTestCase' object has no attribute '_cleanups'

[02:05:51.0000] <MikeSmith>
> Makefile:43: recipe for target 'test' failed

[02:06:31.0000] <XhmikosR>
the src is a mess :/

[02:06:50.0000] <MikeSmith>
yup

[02:07:09.0000] <MikeSmith>
this is the reason I never look at it

[02:07:34.0000] <MikeSmith>
anyway https://github.com/w3c/markup-validator/compare/master...XhmikosR:master LGTM

[02:07:47.0000] <MikeSmith>
I have no reason to expect it would not work as expected ni production

[02:09:09.0000] <XhmikosR>
me neither

[02:09:33.0000] <XhmikosR>
I have one more patch: switched to https for all http://validator.w3.org/ refs

[02:09:52.0000] <MikeSmith>
ah good yes please

[02:10:09.0000] <XhmikosR>
verifying we don't break anything

[02:10:12.0000] <XhmikosR>
total mess

[02:10:19.0000] <XhmikosR>
for example

[02:10:19.0000] <XhmikosR>
<xsl:param name="host" select="'validator.w3.org'"/>

[02:10:19.0000] <XhmikosR>
<xsl:param name="self" select="concat('http://', $host, '/whatsnew.atom')"/>

[02:10:24.0000] <XhmikosR>
this would break

[02:11:41.0000] <MikeSmith>
oh man xsl

[02:14:33.0000] <XhmikosR>
and would probably break some tests

[02:14:44.0000] <XhmikosR>
with referer and stuff

[02:15:56.0000] <XhmikosR>
on the other hand it should fix some things like the favelet over https

[02:16:29.0000] <XhmikosR>
hmm scratch that since there is a redirect anyway

[02:17:23.0000] <XhmikosR>
MikeSmith: https://github.com/w3c/markup-validator/compare/master...XhmikosR:master

[02:17:43.0000] <XhmikosR>
if you still feel confident and take the resposibility, I can make a PR :)

[02:18:08.0000] <MikeSmith>
/me looks

[02:19:12.0000] <XhmikosR>
I also changed any URI encoded instances to https

[02:21:40.0000] <XhmikosR>
hmm why is htdocs\dev\tests\trailing-nul.html

[02:21:40.0000] <XhmikosR>
 marked as binary in the diff?

[02:22:14.0000] <XhmikosR>
something isn't right

[02:22:26.0000] <XhmikosR>
hmm unless that's what it tests :)

[02:25:56.0000] <MikeSmith>
dunno but LGTM overall

[02:26:03.0000] <MikeSmith>
so please do PR it

[02:30:32.0000] <tobie>
What's the difference between the ECMAScript global object and the Primary Global Object if any?

[02:31:44.0000] <annevk>
tobie: Primary is the Window object, abstractly defined

[02:32:24.0000] <annevk>
tobie: I think we should get rid of the PrimaryGlobal extended attribute personally and require Exposed to always be used

[02:33:00.0000] <annevk>
tobie: that might be relatively easy cleanup if you want to do it, though will require lots of downstream changes, but those won't be hard

[02:33:12.0000] <annevk>
(and I'm happy to help out with downstream)

[02:33:32.0000] <tobie>
annevk: is there an open issue for this?

[02:34:08.0000] <tobie>
annevk: sorry: do you know of the top of your head if there's an issue open for this?

[02:34:55.0000] <annevk>
tobie: no

[02:34:58.0000] <annevk>
tobie: to the latter

[02:35:10.0000] <annevk>
tobie: I might have filed one though

[02:37:37.0000] <tobie>
https://github.com/heycam/webidl/issues/365

[02:40:43.0000] <annevk>
tobie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26425

[04:37:15.0000] <XhmikosR>
on a side note MikeSmith, the CSS and JS files don't have cache busting of any kind

[04:38:01.0000] <XhmikosR>
also, it doesn't seem you guys redirect to https

[04:38:03.0000] <XhmikosR>
C:\Users\XhmikosR\Desktop>curl -ILl http://validator.w3.org/

[04:38:04.0000] <XhmikosR>
HTTP/1.1 200 OK

[05:02:22.0000] <MikeSmith>
XhmikosR: I think that might be intentional but I dunno

[05:04:23.0000] <MikeSmith>
XhmikosR: if anybody uses http://validator.w3.org/ to check a document with a non-obsolete doctype I have long ago made it redirect to https://validator.w3.org/nu/ anyway

[05:05:07.0000] <XhmikosR>
MikeSmith: so those changes are not in httpd.conf in the repo

[05:06:27.0000] <XhmikosR>
I'm using for years https://github.com/h5bp/html5-boilerplate/blob/master/dist/.htaccess with some minor adaptations. I believe we should use this here too

[05:06:49.0000] <XhmikosR>
but since I don't know how you maintain this thing, it's just a suggestion

[05:21:42.0000] <smaug>
I wonder, given that Promises are an easy way to write jank-y web pages

[05:21:53.0000] <smaug>
should there be some way to schedule Promises in a different way

[05:22:06.0000] <smaug>
something like IdlePromise

[05:22:11.0000] <smaug>
or AsyncPromise

[05:23:46.0000] <annevk>
smaug: how did you arrive at that premise?

[05:24:13.0000] <smaug>
profiling Firefox devtools

[05:24:21.0000] <smaug>
and it shows up quite often

[05:24:43.0000] <smaug>
long promise chains

[05:25:00.0000] <smaug>
all resolved at the end of a microtask

[05:25:10.0000] <smaug>
which looks like async operation to JS

[05:25:16.0000] <smaug>
but from UA point of view is sync

[05:28:13.0000] <annevk>
smaug: are microtasks costly then?

[05:28:41.0000] <smaug>
annevk: that is not the point

[05:28:49.0000] <smaug>
point is running too much JS during a task

[05:29:12.0000] <smaug>
which means no user input can be processed, nor do painting etc

[05:29:51.0000] <annevk>
If you didn't want that presumably you'd use setTimeout(..., 0)

[05:30:52.0000] <smaug>
annevk: well, that complicates the code a bit

[05:30:57.0000] <smaug>
since one can't use the then() stuff

[05:33:23.0000] <annevk>
smaug: as I understand it a lot of libraries wanted to microtask-timing for their stuff so it would happen before paint, but I guess it's getting abused then

[05:33:44.0000] <smaug>
I can totally see reasons for the current scheduling

[05:33:49.0000] <annevk>
smaug: we could add more promise-based APIs though, for timers or run in next task, but it's unclear if those would see adoption

[05:33:57.0000] <smaug>
but I can also see reasons to have different kind of scheduling

[05:35:01.0000] <ondras>
Domenic: is it possible that jsdom's XHR would fail when sending ArrayBufferView instances? (works with .buffer though)

[05:35:32.0000] <annevk>
smaug: filing a bug against HTML seems reasonable if you want to further explore it

[05:36:52.0000] <annevk>
smaug: it seems you keep running into this, https://github.com/whatwg/html/issues/512 has similar suggestions (something that doesn't block paint, but runs asap)

[06:50:08.0000] <MikeSmith>
XhmikosR: caches purged

[07:20:52.0000] <annevk>
hsivonen: pretty good thread you got going there: http://unicode.org/pipermail/unicode/2017-May/thread.html#5389

[07:27:55.0000] <annevk>
Even includes a couple of asides on file systems

[07:28:44.0000] <nox>
annevk: Is the tone always like that on this ml?

[07:29:18.0000] <annevk>
nox: I don't know, I don't read it often

[07:29:29.0000] <nox>
annevk: Good life choice I assume.

[07:30:29.0000] <annevk>
nox: I kinda would like to be more involved with Unicode at times, but the current process is just so closed it's not really worth investing time in

[07:31:27.0000] <nox>
annevk: If I ever get involved, it will only be to make Fitzpatrick modifiers apply on the baguette emoji to indicate how baked it is.

[07:31:36.0000] <annevk>
nox: Unicode also raises the "cannot publish as HTML flag", which makes me less interested

[07:31:54.0000] <nox>
annevk: You mean the dozens of PDFs?

[07:32:00.0000] <annevk>
nox: yes

[07:32:04.0000] <nox>
Yeah that's sad.

[07:32:10.0000] <annevk>
nox: with terrible xref etc.

[07:32:29.0000] <nox>
annevk: If only we had a plain text format with a precise definition of hyperlinks. :(

[07:32:58.0000] <annevk>
JavaScript switched recently and it's been so much better for collaboration

[07:33:45.0000] <annevk>
But JavaScript has the advance-by-in-person-meeting flag raised, which is also sad

[07:39:31.0000] <gsnedders>
foolip: how did you manage to repro the Edge flakiness on Edge 15? I can't get it to reproduce there at all?

[07:39:57.0000] <foolip>
gsnedders: I just reloaded in BrowserStack over and over

[07:40:06.0000] <gsnedders>
hmm, ok

[07:40:09.0000] <foolip>
It only took 5 or so tries to see it

[07:40:27.0000] <gsnedders>
foolip: I'm 99% sure this is a JIT bug with typeof HTMLAllCollection, FWIW

[07:42:01.0000] <gsnedders>
foolip: I couldn't get it to repro on BrowserStack

[07:42:23.0000] <foolip>
gsnedders: do you mean that there's some fast path where they forgot about the special behavior?

[07:42:24.0000] <gsnedders>
foolip: but it being a JIT bug dependent on previous executions make it unsurprising it went away trying to reduce it

[07:42:48.0000] <gsnedders>
foolip: well, in some sense, yes

[07:43:13.0000] <gsnedders>
foolip: though obviously the JIT compiler may not have such a fast-path explicitly there

[07:44:15.0000] <gsnedders>
foolip: I expect it type-specialises and then fails if it then sees some new document object it hadn't seen before?

[07:45:08.0000] <foolip>
gsnedders: your expectations are better than mine I think :)

[07:45:22.0000] <foolip>
gsnedders: did you reduce many of those for farre perhaps?

[07:45:28.0000] <gsnedders>
and jl, etc. :)

[07:45:36.0000] <foolip>
hej farre!

[07:46:13.0000] <gsnedders>
it's reliably failing on Edge 15 on browserstack for me

[07:46:17.0000] <farre>
hej foolip!

[07:46:38.0000] <foolip>
farre: waddayu working on?

[07:46:52.0000] <gsnedders>
(hej farre!)

[07:47:58.0000] <gsnedders>
foolip: completely consistent on 15, completely random on 14 unless devtools are open (which apparently disables JIT)

[07:48:38.0000] <farre>
foolip: currently timeout and/or requestIdleCallback stuff

[07:49:29.0000] <farre>
foolip: you?

[07:49:34.0000] <farre>
(hej gsnedders!)

[07:49:41.0000] <foolip>
farre: mmm, I guess requestIdleCallback is one where basically no shared tests can be written

[07:50:05.0000] <farre>
foolip: we have some in wpt

[07:50:27.0000] <foolip>
farre: Fullscreen, and generally web-platform-tests infrastructure, like the 2-way sync we have now.

[07:50:57.0000] <farre>
foolip: https://github.com/w3c/web-platform-tests/tree/master/html/webappapis/idle-callbacks

[07:51:25.0000] <foolip>
farre: oh, much more than I would have guessed

[07:53:07.0000] <foolip>
farre: looks like callback-suspended.html is failing for us, I suppose that's not the most important of the lot?

[07:53:37.0000] <farre>
foolip: could be that I've written a crappy test

[07:53:54.0000] <foolip>
farre: unpossible

[07:53:58.0000] <farre>
foolip: I've had a hard time getting wpt running with chrome.

[07:55:48.0000] <farre>
foolip: for all browsers without some kind of bfcache, navigation should reload and have the test pass, but that might not be working

[07:56:20.0000] <foolip>
farre: I was looking at our imported tests that run in content_shell, not a full Chrome. differences are possible

[07:57:23.0000] <jgraham>
farre: I'm working on making that easier fwiw

[07:57:33.0000] <jgraham>
SHould be able to expose it through mach soon

[07:57:36.0000] <farre>
hej jgraham!

[07:57:45.0000] <farre>
jgraham: and that would be awesome

[07:58:05.0000] <gsnedders>
oh wait, Edge does its compilation off-thread, IIRC, so a JIT bug might appear even more randomly depending on whether it JITs the code before the broken call happens

[07:58:29.0000] <foolip>
gsnedders: trying to minimize?

[07:58:44.0000] <gsnedders>
foolip: trying to understand why I can't observe any randomness in 15

[07:58:57.0000] <gsnedders>
foolip: I can't really minimize until I can repro it :\

[08:00:54.0000] <gsnedders>
also we should really be using assert_in_array instead of assert_true(foo || bar)

[08:02:50.0000] <gsnedders>
I'm seeing it about 50/50 in Edge 14, and never in 15.

[08:05:25.0000] <gsnedders>
oh, no, finally seen it repro

[08:22:53.0000] <XhmikosR>
MikeSmith: something isn't right

[08:25:11.0000] <XhmikosR>
MikeSmith: scripts/combined is broken

[08:25:36.0000] <XhmikosR>
styles/base is fine

[09:23:52.0000] <annevk>
jgraham: you should email dev-platform once done, if not already planned

[09:31:47.0000] <Domenic>
Anyone want to tl;dr the Unicode thread for those of us who are only slightly morbidly curious?

[09:34:03.0000] <annevk>
Domenic: folks seem okay with changing UTF-8 error handling, some don't think it matters how you error, and some are upset like I am

[10:21:33.0000] <jgraham>
annevk: I will

[11:14:11.0000] <ondras>
Domenic: after looking into jsdom's xhr::send, I conclude that it indeed fails when sending ArrayBufferViews. I would send a PR, but am not sure how to actually *detect* an ArrayBufferView subtype... what would you suggest?

[11:14:35.0000] <Domenic>
ondras: maybe a better conversation for the jsdom issue tracker or the #jsdom channel

[11:14:43.0000] <Domenic>
But anyway, ArrayBuffer.isView

[11:14:56.0000] <ondras>
ah, thanks a lot.

[12:00:52.0000] <jugglinmike>
JakeA: Do you have a moment to confirm my reading of the service workers spec?

[12:21:07.0000] <wanderview>
jugglinmike: he's at google I/O I think

[12:24:27.0000] <jugglinmike>
wanderview: ah, got it. I found help from Marijn over in #chromium

[12:24:40.0000] <wanderview>
I should probably lurk in that channel

[12:24:51.0000] <jugglinmike>
so many channels

[12:26:22.0000] <wanderview>
jugglinmike: there is a #blink too...

[12:31:23.0000] <jugglinmike>
oh boy

[12:40:41.0000] <gsnedders>
#blink is dead now, AFAIK

[12:40:52.0000] <gsnedders>
I mean it probably still has people in it

[12:40:59.0000] <gsnedders>
But I think officially it's dead

[14:35:44.0000] <AutomatedTester>
TabAtkins: was /deep/ dropped from CSS selectors ?

[14:36:51.0000] <TabAtkins>
Kicked over to https://drafts.csswg.org/css-scoping/#deep-combinator and spelled differently

[14:37:12.0000] <TabAtkins>
Note that it's still only in the static profile, which means usable in querySelector() in related APIs, not in CSS stylesheets.

[14:37:49.0000] <AutomatedTester>
 TabAtkins I am interested in querySelector cases

[14:37:59.0000] <AutomatedTester>
/me goes to read

[14:38:03.0000] <AutomatedTester>
TabAtkins: thank you!

[15:07:15.0000] <Domenic>
Firefox got a name option for workers already; that was fast! :D

[15:51:36.0000] <wanderview>
Domenic: yea, baku jumped right on that

[15:52:34.0000] <Domenic>
It makes me happy when a vendor can file an issue, go through a relatively-fast standardization process, and have multiple vendors start implementing their idea within a month or so

[15:53:42.0000] <wanderview>
Domenic: I think having the tests helps a lot... with something like this writing the test takes longer than the impl

[15:53:58.0000] <Domenic>
:D

[15:54:10.0000] <wanderview>
anyway, hooray for the process working!


2017-05-18
[22:06:51.0000] <MikeSmith>
Domenic: https://stackoverflow.com/questions/44038877/using-fetch-with-es2015-modules-in-canary

[23:22:57.0000] <hsivonen>
annevk: http://unicode.org/pipermail/unicode/2017-May/005457.html

[23:24:43.0000] <hsivonen>
nox: not sure about the normal tone for the unicode list. I regret the tone I started with. I was and continue to be extremely irritated at changing a long-standing and widely-implemented spec provision with a proposal that argues from "feels right" what should and ICU behavior only on what is

[23:27:33.0000] <annevk>
hsivonen: ffs

[23:29:28.0000] <annevk>
hsivonen: we can still not follow it of course as it is rather misguided

[23:30:10.0000] <hsivonen>
annevk: I would hope that the Encoding Standard continue to align with what browsers do instead of changing just because Unicode thought ICU felt right

[23:30:51.0000] <annevk>
hsivonen: problem is that browsers use ICU sometimes

[23:31:15.0000] <hsivonen>
annevk: major ones don't for UTF-8

[23:31:28.0000] <hsivonen>
annevk: I regret that I momentarily forgot that when I started the thread

[23:32:23.0000] <hsivonen>
annevk: I should have made an argument from implementation consensus to begin with, but I momentarily forget that Chrome and Safari don't contribute to the deployment of ICU's UTF-8 decoder

[23:32:31.0000] <hsivonen>
s/forget/forgot/

[23:32:37.0000] <annevk>
hsivonen: okay, but this will continue to come up and we have to be vigilant about not changing existing handling and keep it the same in new places such as WebAssembly

[23:33:20.0000] <hsivonen>
yeah. the change on the Unicode side is really uncool

[23:33:41.0000] <hsivonen>
I guess I'm annoyed enough to go test even more programming language standard libraries

[23:33:59.0000] <annevk>
hsivonen: I think we should maybe try something to get them to revert the decision

[23:34:11.0000] <hsivonen>
yes

[23:34:34.0000] <annevk>
I saw Martin chime in with Ruby results

[23:35:23.0000] <hsivonen>
well, so far no one has chimed in with any non-ICU results agreeing with the proposal

[23:35:33.0000] <annevk>
hsivonen: XML 5th edition

[23:36:24.0000] <hsivonen>
Gecko, Blink, Edge, OpenJDK, Ruby and Python 3 all side with the current spec (for the cases tested). Python 2 is obviously incompliant in any case.

[23:57:27.0000] <annevk>
hsivonen: so I pinged Mark Davis and he told me that there's about 9 months to appeal this as it would be for Unicode 11

[23:57:57.0000] <annevk>
hsivonen: he also mentioned it's a guideline, not requirement, and that it would be another option to use, not the only option

[23:58:26.0000] <annevk>
hsivonen: most of that seems like good news

[00:06:01.0000] <hsivonen>
annevk: I'm aware that it's a guideline, but it being a mere guideline is a reason not to change it instead of a reason to change it

[00:06:32.0000] <hsivonen>
because it should be ICU and not everyone except ICU who deals with questions "why don't you follow the best practice?"

[00:09:21.0000] <annevk>
yeah

[00:09:49.0000] <hsivonen>
also: test suites

[00:11:06.0000] <hsivonen>
formulating a "best practice" and then saying "you can just not follow it" undermines the credibility of the best practice. It makes no sense to do that.

[05:05:30.0000] <tobie>
zcorpan: latest LegacyWindowAliases LGTM. There's a few nits, though. Would you prefer I fix them directly or add comments?

[05:06:51.0000] <tobie>
zcorpan: If it's the former, I don't think you've enabled access to the branch you're working from.

[05:10:37.0000] <MikeSmith>
annevk: so about https://github.com/whatwg/html/pull/2682, the “End tag template seen, but there were open elements” thing, maybe we should instead make the spec not require a parse error for that case

[05:16:45.0000] <MikeSmith>
annevk: I guess this would be the requirement at https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead:current-node-5

[05:16:54.0000] <MikeSmith>
> If the current node is not a template element, then this is a parse error.

[05:18:00.0000] <MikeSmith>
hmm or maybe it’s instead just that case the the Nu HTML parser is not conforming to the spec on the previous step

[05:18:10.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead:generate-all-implied-end-tags-thoroughly

[05:22:37.0000] <zcorpan>
tobie: now checked the checkbox. (I thought it was enabled by default before?)

[05:23:12.0000] <tobie>
zcorpan: it's weird. Same thing happened to me with the toJSON stuff I accidentally blocked Domenic from editing. He had to send me a patch instead.

[05:23:31.0000] <tobie>
zcorpan: might have to do with owner repo vs. org repo.

[05:47:54.0000] <annevk>
If only I could reproduce it reliably

[05:48:31.0000] <annevk>
I want GitHub to fix it since that checkbox ends up unchecked rather often

[05:49:02.0000] <annevk>
Also sometimes after being explicitly checked

[05:51:46.0000] <annevk>
MikeSmith: ah, so my instinct was correct?

[05:51:55.0000] <annevk>
MikeSmith: I should have actually read the spec

[05:52:07.0000] <MikeSmith>
hah

[05:52:08.0000] <MikeSmith>
yup

[05:52:39.0000] <MikeSmith>
yeah it is clear to me now no spec change is needed for this

[05:52:56.0000] <MikeSmith>
instead the Nu parser just has a bug in that it doesn’t actually implement “generate all implied end tags thoroughly”

[05:53:02.0000] <MikeSmith>
https://html.spec.whatwg.org/#generate-all-implied-end-tags-thoroughly

[05:53:23.0000] <MikeSmith>
which is only used when hitting a </template> end tag

[05:54:06.0000] <MikeSmith>
there the Nu parser is instead incorrectly just doing “generate implied end tags”

[05:54:13.0000] <MikeSmith>
https://html.spec.whatwg.org/#generate-implied-end-tags

[05:54:17.0000] <annevk>
MikeSmith: I suspect that's because <template> was implemented by someone else, with the motivation of making the browser parse it

[05:54:30.0000] <MikeSmith>
yeah probably so

[05:55:04.0000] <MikeSmith>
will raise a bmo bug for it

[05:55:27.0000] <MikeSmith>
but will fix in the checker sources first

[05:55:57.0000] <MikeSmith>
and will close out the HTML spec PR with a link to the parser PR

[07:52:04.0000] <MikeSmith>
hsivonen: I guess there’s still not yet any git version of https://hg.mozilla.org/projects/htmlparser/

[08:31:14.0000] <jgraham>
MikeSmith: YOu could use cinnabar, depending on what you need

[08:31:35.0000] <jgraham>
https://github.com/glandium/git-cinnabar

[09:47:48.0000] <domfarolino>
A commit from over a year ago in whatwg/console has the message "Tweaks for the move to WHATWG"...just curious, anyone know where it was before? Was it a w3c spec or something?

[10:17:19.0000] <annevk>
domfarolino: private effort afaik

[10:25:39.0000] <domfarolino>
gotcha

[13:02:46.0000] <tobie>
annevk: you were also complaining about this, right? https://github.com/heycam/webidl/pull/323#issuecomment-302521924

[14:42:31.0000] <SimonSapin>
Domenic: re https://github.com/whatwg/html/issues/2694 , is there mentoring for new contributors writing WPT tests? I’m considering opening a "good first bug" in servo’s tracker for this

[14:43:49.0000] <Domenic>
SimonSapin: I'm not sure about anything formal, but if the person says it's their first contribution hopefully reviewers will be nice.

[14:44:21.0000] <gsnedders>
SimonSapin: we had some stuff before

[14:44:30.0000] <gsnedders>
SimonSapin: but then nobody ever did anything

[14:44:33.0000] <gsnedders>
SimonSapin: so it kinda died

[14:45:18.0000] <SimonSapin>
ok

[14:45:38.0000] <SimonSapin>
I suppose you need mentors spending time, to make this effective

[14:46:45.0000] <gsnedders>
in general I'm happy to help, but I'm a bit all over the place, especially when it comes to when I'm around for long

[14:46:54.0000] <gsnedders>
which means it's hard to rely on me

[16:42:24.0000] <MikeSmith>
hsivonen: I merged latest changes from https://hg.mozilla.org/projects/htmlparser/ to https://github.com/validator/htmlparser/tree/master but now it is failing to build to this:

[16:42:27.0000] <MikeSmith>
./htmlparser/src/nu/validator/htmlparser/impl/ElementName.java:30: error: cannot find symbol

[16:42:31.0000] <MikeSmith>
import nu.validator.htmlparser.annotation.Unsigned;

[16:44:57.0000] <MikeSmith>
hsivonen: and when I look through the upstream sources in https://hg.mozilla.org/projects/htmlparser/file/tip/src/nu/validator/htmlparser/annotation there is no Unsigned class there nor in https://hg.mozilla.org/mozilla-central/file/tip/parser/html/javasrc either


2017-05-19
[21:49:02.0000] <annevk>
tobie: yes, I can revive my old email thread with GitHub support and copy you all

[21:49:42.0000] <annevk>
tobie: maybe we can finally get it fixed then; will do once I'm behind my desktop

[22:57:11.0000] <hsivonen>
MikeSmith: hmm. maybe I've forgotten an hg add

[23:08:55.0000] <hsivonen>
MikeSmith: fixed: https://hg.mozilla.org/projects/htmlparser/rev/6a026284239e

[23:09:27.0000] <hsivonen>
MikeSmith: still no git version

[23:16:46.0000] <MikeSmith>
hsivonen: cool thanks

[23:33:59.0000] <MikeSmith>
hsivonen: so there’s a bug in template error-reporting that will need to fixed in the gecko sources too

[23:34:02.0000] <MikeSmith>
https://github.com/validator/htmlparser/commit/e6582f563751d2fd3f28d4e9c1b08c9f7494b372

[23:34:17.0000] <MikeSmith>
I’ll raise a bmo bug for it for now

[23:35:06.0000] <MikeSmith>
and after that will make time later to write a gecko patch for it unless somebody else beats me to it

[00:23:01.0000] <annevk>
tobie: I copied you and Domenic on my GitHub support thread

[00:58:01.0000] <tobie>
annevk: ty

[00:58:14.0000] <tobie>
annevk: apparently zcorpan had similar issues yesterday

[00:58:37.0000] <annevk>
ah good

[00:58:46.0000] <annevk>
Maybe that means it'll finally get fixed

[00:59:10.0000] <annevk>
tobie: btw, when it works, do you have a better approach than cloning the whole repo?

[00:59:35.0000] <annevk>
tobie: jgraham once tried to teach me a trick of just adding that branch, but I never got that to work

[00:59:54.0000] <tobie>
annevk: sorry what?

[01:00:39.0000] <tobie>
annevk: oh, to "include" someone else's repo inside yours?

[01:00:44.0000] <tobie>
yes:

[01:01:04.0000] <annevk>
tobie: A forks repo R and creates a PR with branch B that the owner of R can push to because of this feature

[01:01:23.0000] <annevk>
tobie: does the owner of R need to clone the fork or can they do something with just B

[01:01:48.0000] <zcorpan>
annevk: I think whatwg/html checkout-pr script does this?

[01:05:08.0000] <annevk>
zcorpan: well, you also need to then push to B

[01:05:08.0000] <tobie>
https://www.irccloud.com/pastebin/BwBYvyNp/

[01:05:22.0000] <annevk>
zcorpan: that's not possible with the checkout-pr thing afaik

[01:05:30.0000] <tobie>
annevk: ^

[01:06:18.0000] <annevk>
tobie: interesting, I should maybe wrap that in a function and maybe document it in whatwg/meta

[01:06:50.0000] <zcorpan>
annevk: it is possible if the checkbox is checked

[01:07:29.0000] <tobie>
annevk: s/webidl/[REPO-NAME]/ obv.

[01:07:51.0000] <annevk>
zcorpan: oh yeah, https://github.com/whatwg/meta/blob/master/TEAM.md looks remarkably similar to what tobie pasted

[01:08:00.0000] <zcorpan>
annevk: what tobie wrote is essentially the same as checkout-pr... right :-)

[01:08:25.0000] <annevk>
I wish I had known this earlier

[01:08:37.0000] <annevk>
Although given how flaky the feature is maybe it's alright

[01:09:52.0000] <tobie>
annevk: what's wild is it seems to be the UI that's causing the flakiness.

[01:11:20.0000] <annevk>
tobie: yeah, would be nice if we could just outlaw that UI to begin with

[01:11:40.0000] <annevk>
tobie: "are you sure you want to PR this repo? they require to be able to push to your branch"

[01:17:13.0000] <tobie>
annevk: that's interesting.

[01:17:56.0000] <tobie>
annevk: sort of rubs me the wrong way, though.

[01:18:49.0000] <annevk>
tobie: collaborate or bust

[01:19:43.0000] <tobie>
annevk: the ownership model is inside out, though.

[01:19:55.0000] <annevk>
tobie: the other thing I think should be possible is for anyone to create a branch without a whole fork

[01:20:20.0000] <annevk>
tobie: might not layer well on top of Git, but for GitHub it'd make perfect sense

[01:21:36.0000] <annevk>
It'd be much easier to work on changes if you can just work on the main repo in your namespaced branches rather than keeping a fork up-to-date

[01:21:49.0000] <tobie>
annevk: totally agree. I can see branches emerging as some form of lighter weight thing people coalesce around.

[01:22:33.0000] <tobie>
annevk: well, namespaced-branches would require a different permission model for that to work

[02:36:27.0000] <hsivonen>
should never reboot a server except early in the morning on a day that can be used for dealing with it not actually booting cleanly...

[06:29:18.0000] <wanderview>
/me turns to IRC for entertainment while twitter is down...

[10:40:30.0000] <annevk>
rbyers: it would be good to know who in Blink have bz-level knowledge of navigation / document objects / browsing contexts/ etc.

[10:40:50.0000] <annevk>
rbyers: I want to create some kind of @whatwg/navigate team on GitHub to ping on these kind of issues

[10:41:03.0000] <annevk>
rbyers: going on vacation soon, but I plan to continue tackling it when I get back

[10:43:46.0000] <rbyers>
annevk: That's an easy question.  Nobody has "bz-level knowledge" of this stuff ;-)

[10:44:16.0000] <rbyers>
.. but perhaps the question is, who are the people responsible for owning this space on blink (and continuing to build up towards bz-level knowledge).

[10:44:16.0000] <jyasskin>
rbyers: Navigation would maybe be one of the site-isolation folks?

[10:44:18.0000] <annevk>
No easy wins in navigation

[10:45:00.0000] <annevk>
jyasskin: yeah maybe, though it was somewhat suspect that the answer to what needs changing in the HTML Standard was "nothing"

[10:45:00.0000] <rbyers>
jyasskin: Yeah we certainly have a number of experts in various pieces

[10:45:57.0000] <annevk>
(I think I asked on Twitter, but it's down...)

[10:46:00.0000] <jyasskin>
annevk: They did a lot of work to make their changes invisible. But it's true that they're not spec folks.

[10:48:49.0000] <rbyers>
annevk: It would help me if you could collect a list of related spec issues which don't seem to have clear ownership from the Chrome team.  We're rapidly filling in a lot of the gaps in our team structure, but still have a lot of work to do to ensure every API / algorithm is officially owned by some team.

[10:49:22.0000] <annevk>
There's quite a large series of interop issues undermining this quest of refactoring navigation (not even thinking about all the stuff folks are doing on top with service workers and such); such as: what is the scope of browsing context names, when do load events dispatch, how does about:blank work, when do beforeunload / unload dispatch, how do Document

[10:49:22.0000] <annevk>
objects inherit state, which WindowProxy objects can access each other, etc.

[10:49:32.0000] <annevk>
rbyers: ^^

[10:50:08.0000] <annevk>
rbyers: https://github.com/whatwg/html/issues?q=is%3Aissue+is%3Aopen+label%3A%22topic%3A+navigation%22 has 50+ issues relating to this

[10:50:59.0000] <annevk>
rbyers: also things like what can you do and not do during beforeunload and unload and how is that governed

[10:51:26.0000] <wanderview>
basically all the parts of the spec/web people try to avoid

[10:51:46.0000] <annevk>
Gotta go relax a bit, hope that helps looking around

[10:51:49.0000] <annevk>
wanderview: hah

[10:52:11.0000] <rbyers>
annevk: That's really helpful, thank you!

[10:52:53.0000] <wanderview>
/me thinks annevk is asking who on the blink team rbyers doesn't like and would like to punish...

[10:53:35.0000] <rbyers>
FWIW some of our "site isolation" people (like lucasgadani@ who I see filed at least one of those bugs) are on my team and are currently moving to other projects.  Perhaps there's something I can do within my own team here...

[10:54:04.0000] <rbyers>
wanderview: Hah, what do you mean?  Working on interop on my team is one of the most glamorous, well-recognized, enjoyable things you can do ;-)

[10:54:29.0000] <wanderview>
thats good

[10:54:45.0000] <rbyers>
I'm half joking.  But only half... ;-)


2017-05-21
[20:38:56.0000] <domfarolino>
Why exactly are module scripts requested with CORS? This comment https://github.com/whatwg/html/pull/443#r48677306 indicates it's necessary for security but I don't quite get "introduce new ways to leak data from existing file types" /cc annevk

[20:41:32.0000] <not-an-aardvark>
There was additional discussion about it at https://github.com/whatwg/html/issues/1888

[20:42:04.0000] <domfarolino>
not-an-aardvark: thank you, will read

[04:31:18.0000] <annevk>
domfarolino: that has all my points in it too

[10:18:07.0000] <domfarolino>
HTML standard (among other places) indicates a benefit to loading classic scripts via CORS is so that rich error information can be exposed to the client. I'm having trouble simulating this though...

[10:19:07.0000] <domfarolino>
The document I'm running locally can be found here https://gist.github.com/domfarolino/62ad3d9ccdcc160c62ec99b0b52d033b and basically I don't see a difference in logged errors with either script tag in that gist..am I doing something wrong?

[10:39:13.0000] <domfarolino>
Ah ok. It seems that it's the error information specifically exposed to window.onerror (like message, url, line, column, error) that is obfuscated..not the uncaught error's stacktrace which still shows up in console

[10:47:48.0000] <domfarolino>
Hmm however it doesn't seem that Firefox's window.onerror has this same obfuscation...is this not standardized behavior?

[15:23:02.0000] <MikeSmith>
domfarolino: not exposing it to frontend JavaScript code is required by the Fetch spec, right?

[15:24:49.0000] <domfarolino>
MikeSmith: not sure I can check when I get home. If so then I guess that's an FF bug unless I'm missing something, bc iirc I got all the info passed to window.onerror

[15:25:48.0000] <MikeSmith>
if https://demo1426415.mockable.io/errorjs is served with no Access-Control-Allow-Origin then Fetch requires that no part of the response be accessible to frontend JavaScript

[15:26:11.0000] <MikeSmith>
the detailed error information is part of the response

[15:26:31.0000] <domfarolino>
I wasn't fetching it, was using it as the src attr on script tag

[15:26:40.0000] <MikeSmith>
ah yeah

[15:27:14.0000] <MikeSmith>
but in that case the Fetch is done with no-cors I think

[15:27:41.0000] <MikeSmith>
which means the response is not exposed to frontend JS no matter what

[15:28:40.0000] <MikeSmith>
opaque response

[15:29:55.0000] <MikeSmith>
anyway annevk would be the best person to ask and get an explanation from, when he’s not away

[16:25:52.0000] <domfarolino>
MikeSmith hmm,  using <script src="//example.com/script.js"></script>, the response should still be avail in developer tools right? Either way, Issue with this is people say the data passed to window.onerror is obfuscated when window.onerror gets an error from script.js

[16:28:23.0000] <domfarolino>
This gist: https://gist.github.com/domfarolino/28725582270679b9e17fa74922cbfd65 produces this output in Chrome: https://image.ibb.co/gSgWyF/Screen_Shot_2017_05_21_at_4_27_06_PM.png

[16:28:59.0000] <domfarolino>
However in FF we don't get the "Script error" 0 0 thing...we just straight up get the real data

[16:47:13.0000] <MikeSmith>
domfarolino: yeah the response will always be available in devtools

[16:47:35.0000] <domfarolino>
right, wanted to make sure we were on the same page

[16:48:22.0000] <MikeSmith>
as far as why there’s a difference between Firefox and Chrome in what you get from window.onerror I dunno

[16:48:49.0000] <MikeSmith>
it could be a bug in Firefox that it’s not conforming to the Fetch spec on this

[16:49:02.0000] <MikeSmith>
or I could just not be understanding

[16:49:13.0000] <MikeSmith>
but annevk will be able to give you a clear answer

[16:53:03.0000] <domfarolino>
MikeSmith could you help find the section in the fetch spec you are referring to? I know that HTML refers to the `crossorigin` attribute and how it helps expose more specific error data (https://html.spec.whatwg.org/multipage/scripting.html#attr-script-crossorigin) but don't know where this sort of thing is in fetch


2017-05-22
[17:29:31.0000] <MikeSmith>
domfarolino: I think what the Fetch spec requires browsers to expose in this case is an “opaque filtered response” https://fetch.spec.whatwg.org/#concept-filtered-response-opaque

[17:29:39.0000] <MikeSmith>
> An opaque filtered response is a filtered response whose type is "opaque", url list is the empty list, status is 0, status message is the empty byte sequence, header list is empty, body is null, and trailer is empty.

[17:31:36.0000] <MikeSmith>
because the “response tainting” is "opaque" https://fetch.spec.whatwg.org/#concept-request-response-tainting

[17:32:34.0000] <MikeSmith>
and the response tainting is "opaque" because the mode is "no-cors"

[17:33:27.0000] <MikeSmith>
and the mode is "no-cors" because that is the default unless some other part of the fetch algorithm sets it to something else

[17:33:33.0000] <MikeSmith>
https://fetch.spec.whatwg.org/#concept-request-mode

[17:34:06.0000] <MikeSmith>
the possible modes are "same-origin", "cors", "no-cors", "navigate", or "websocket"

[17:35:15.0000] <MikeSmith>
and since this is not a same-origin fetch, nor a navigation, nor a websocket fetch, nor a CORS-enabled fetch, the mode remains set at the default "no-cors"

[17:44:48.0000] <domfarolino>
MikeSmith ok so does all that apply even though im using a script tag for the loading and not making a request with fetch?

[17:46:24.0000] <domfarolino>
Even if so, not sure why it would be opaque? It is a CORS-enabled request (since I'm using crossorigin attr on script tag)

[17:52:09.0000] <MikeSmith>
the Fetch spec defines the primitives for all fetches, regardless of whether they '

[17:53:22.0000] <MikeSmith>
*regardless of whether they’re done usin the fetch() method or if instead the UA is initiating the fetch (instead of it being initiated from JS)

[17:54:40.0000] <MikeSmith>
for <script src> fetches the HTML spec references the fetch algorithm with certain settings for each of the hooks

[17:54:55.0000] <MikeSmith>
but yeah if you’re setting the crossorigin attribute then it is not doing a no-cors request

[17:55:31.0000] <MikeSmith>
and then there’s a different part of the spec that defines what kind of response gets returned

[17:55:35.0000] <MikeSmith>
gimme a minute to find it

[17:59:26.0000] <MikeSmith>
if the response is considered a “network error” as defined by the Fetch spec, then:

[17:59:38.0000] <MikeSmith>
> A response whose type is "error" is known as a network error.

[17:59:38.0000] <MikeSmith>
A network error is a response whose status is always 0, status message is always the empty byte sequence, header list is always empty, body is always null, and trailer is always empty.

[17:59:48.0000] <MikeSmith>
https://fetch.spec.whatwg.org/#concept-network-error

[18:00:53.0000] <MikeSmith>
...which is essentially (or maybe exactly) the same response characteristics as an “opaque filtered response”

[18:40:59.0000] <domfarolino>
hmm ok

[18:46:41.0000] <domfarolino>
Only thing is, the kind of error I'm talking about is like a scripting error, after fetching has been complete (throw new Error()...) so the way the DOM handles JS errors kind of depends on how it was fetched, no matter how long after it was fetched. With that being said, I can't tell if the only elaboration on the connection between the way a script was

[18:46:42.0000] <domfarolino>
fetched and how the DOM handles its errors is in the `crossorigin` section of the HTML spec or if there is more elsewhere. cc Domenic

[18:48:26.0000] <domfarolino>
I guess if it is not elaborated on elsewhere, that could explain the differences I see in the Chrome and FF outputs

[18:48:59.0000] <domfarolino>
thanks for the info MikeSmith !

[19:15:58.0000] <MikeSmith>
cheers

[21:25:02.0000] <Domenic>
domfarolino: this is governed by https://html.spec.whatwg.org/#report-the-error; see especially "muted errors"

[21:25:41.0000] <domfarolino>
oh no...should've gone multipage lol

[21:25:54.0000] <Domenic>
Whether a script has "muted errors" set does end up being determined whether the response is CORS-cross-origin

[21:26:07.0000] <Domenic>
i.e., whether the response's type is "opaque" or "opaqueredirect"

[21:32:17.0000] <domfarolino>
Domenic: ok I think I get that. So a script fetched with crossorigin attribute (via CORS) has an opaque (or opaqueredirect) response type?

[21:33:53.0000] <Domenic>
domfarolino: the opposite, I believe. A script fetched with the crossorigin attribute will have a response type "cors"

[21:34:29.0000] <Domenic>
so it'll be CORS-same-origin, so the muted errors flag will be unset

[21:37:27.0000] <domfarolino>
Oh ok...so omitting the crossorigin attribute is where we get opaque and opaqueredirect response types?...and hence a script with muted errors?

[21:38:01.0000] <Domenic>
Yep

[21:38:16.0000] <Domenic>
(But, if you add the crossorigin attribute, your script needs to have the appropriate CORS headers when it's cross-origin)

[21:42:41.0000] <domfarolino>
Right. So I always understood (without really digging in admittedly) opaque responses to be ones in which the actual meat of the response is invisible to the user. In fact, just quickly looking at the fetch spec now it says that an opaque filtered response has body=null, empty header list, etc...but how is this so, if I can see all of this in the network

[21:42:42.0000] <domfarolino>
tab?

[21:43:30.0000] <domfarolino>
"this", being all the data of a logged network request triggered from <script src="example.com/app.js"></script> (no crossorigin attr, so opaque response right?)

[21:43:59.0000] <domfarolino>
Domenic: source: https://fetch.spec.whatwg.org/#concept-filtered-response-opaque

[21:44:24.0000] <Domenic>
Oh, that's easy. Dev tools have special powers.

[21:44:36.0000] <Domenic>
The important thing is you can't write code in your web page to read the contents.

[21:44:48.0000] <domfarolino>
Haha alright....yes! that second message is what I was about to say

[21:47:13.0000] <domfarolino>
Domenic: Sorry one more thing! So I couldn't get FF to show me an error message of "Script error" via running the following gist locally https://gist.github.com/domfarolino/28725582270679b9e17fa74922cbfd65 whereas Chrome was properly muting errors.

[21:47:42.0000] <Domenic>
Yeah, I'm not sure what's up with that; Firefox may be going against the spec.

[21:48:33.0000] <domfarolino>
Gotcha..didn't know if my reproduction was bogus or not..Alright I may look into filing a bug I guess

[21:48:53.0000] <Domenic>
I assume errorjs.js is adding a window.onerror handler?

[21:49:37.0000] <domfarolino>
errorjs.js has the exact same contents as the script loaded above it actually

[21:49:56.0000] <domfarolino>
so I guess I'm adding the handler twice...which I didn't think about

[21:50:26.0000] <Domenic>
Interesting...

[21:50:32.0000] <Domenic>
I guess it should override it

[21:50:38.0000] <Domenic>
So it should still be muted

[21:51:02.0000] <Domenic>
although hmm the function redeclarations for a/b/c might confuse things...

[21:51:50.0000] <domfarolino>
Ah true. I should change it up then. Maybe add the handler inline, and rename all functions. Regardless, Chrome gives me two different outputs in window.onerror...one muted, one not. FF gives both unmuted

[21:52:25.0000] <Domenic>
Yeah, presumably there's some interop bug here, although it's a bit harder to determine who's wrong.

[21:52:32.0000] <Domenic>
Anyway, bedtime for me :)

[21:52:54.0000] <domfarolino>
Thanks for the info. gn

[23:22:33.0000] <MikeSmith>
domfarolino: thinking about the was CORS works, the fact you can always see a response in devtools is expected

[23:23:04.0000] <MikeSmith>
because the browser is what enforces cross-origin restrictions, not servers

[23:24:29.0000] <MikeSmith>
generally if you can get a response from a server using any other client, curl or whatever, then the browser is going to get a response too

[23:24:41.0000] <domfarolino>
Right, I just didn't know how far that obfuscation reach was. As in...is both the user of the browser AND the site code that does not have access to opaque responses OR JUST the site code (meaning devtools can see all). But this was a naive thought anyways

[23:24:53.0000] <domfarolino>
Yes the curl is a good examp

[23:25:26.0000] <MikeSmith>
yeah just the site code can’t see it

[23:25:26.0000] <MikeSmith>
but it’s not a naive thought

[23:26:05.0000] <MikeSmith>
because I think the CORS protocol is kind of non-intuitive

[23:27:05.0000] <MikeSmith>
I think most people are surprised to find out they can see a response in devtools but their code can’t get to it

[23:27:25.0000] <domfarolino>
It is certainly kind of odd. Always struck me as odd that the browser was the one managing the security, not the server (prized resource)...but then I learned about preflighting which makes more sense.

[23:27:32.0000] <domfarolino>
Yeah that makes sense

[23:27:35.0000] <MikeSmith>
right

[23:28:41.0000] <MikeSmith>
anyway the web runtime is always the oddball

[23:28:49.0000] <MikeSmith>
see the channel /topic and all that

[23:29:54.0000] <domfarolino>
So moral of the story, any state-changing server endpoints that can be accessed via CORS should be written in such a way (seemingly accepting POST is sufficient) that requests to it will def be preflighted

[23:29:58.0000] <domfarolino>
Yeah haha trueee

[23:34:57.0000] <domfarolino>
Question: is it possible to programmatically get the response to a script requested with CORS (not using fetch). Like If I were to programmatically insert a script whose crossorigin attr was set, and I insert it into say the head..can I, even then, get at its response? Should be no prob from a websec standpoint, but is there a mechanism to do this?

[23:38:31.0000] <MikeSmith>
domfarolino: no mechanism do that as far as I know

[23:39:08.0000] <MikeSmith>
you’d instead need to initiate the request using fetch() or XHR rather than script element

[23:40:37.0000] <domfarolino>
✔

[03:14:54.0000] <zcorpan>
mkwst: https://github.com/whatwg/fetch/issues/546 - NSFW results when doing compat analysis is a bit annoying (for me); possibly worse than annoying for others. (I can cope fine with "regular" porn sites, though I didn't want to see animal porn...) Wonder if something can/should be done about this

[03:32:32.0000] <mkwst>
zcorpan: Sorry. I didn't actually visit all the sites, just `view-source:[site]`. I only pulled up the site when the hit wasn't in the actual body of the page.

[03:32:42.0000] <mkwst>
Which site should I have flagged?

[03:33:03.0000] <mkwst>
(Really, sorry. I didn't mean to send to you horribleness.)

[03:33:57.0000] <zcorpan>
mkwst: I didn't look at these results, just noted you marked some as NSFW. The animal porn was from earlier analysis I did a while back, unrelated to this. Sorry for being unclear!

[03:34:14.0000] <mkwst>
Oh, good. :)

[03:35:40.0000] <mkwst>
I was going through `javascript:` URL navigation hits on Friday, and that seemed pretty bad, which lead me to the `view-source:` method today.

[03:36:01.0000] <mkwst>
It works pretty well. I only had to actually visit ~8 or so sites today.

[03:36:42.0000] <zcorpan>
yeah I also opt for view-source: unless I want to see what's broken visually. Faster to load as well

[03:39:17.0000] <gsnedders>
zcorpan: also, FWIW, there are places like the UK where the legal status of visiting such sites is dubious (i.e., visiting them *is* illegal, though unknowingly clicking on a link to them is legal, but it means that one probably doesn't want to spend time clicking around)

[03:43:14.0000] <zcorpan>
I added a bullet point to https://docs.google.com/document/d/1cpjWFoXBiuFYI4zb9I7wHs7uYZ0ntbOgLwH-mgqXdEM/edit#

[03:49:09.0000] <nox>
Why is drafts.csswg.org often damn slow?

[03:52:09.0000] <MikeSmith>
nox: if it’s slower than normal the best person to give a heads-up to is plinss

[03:52:55.0000] <nox>
MikeSmith: Meh, fast Internet probably spolied me.

[03:52:58.0000] <nox>
spoiled*

[03:53:16.0000] <MikeSmith>
OK

[06:43:08.0000] <yoav_>
annevk: Getting back to https://github.com/whatwg/fetch/pull/442#discussion_r103624566 (finally)

[06:43:46.0000] <yoav>
should the potential destination be linked to a specific request, or should it be a detached concept that translates to destination?

[06:45:06.0000] <annevk>
yoav: I would say detached

[06:45:20.0000] <annevk>
yoav: just like you can normalize a method without a request

[06:45:34.0000] <yoav>
OK, makes sense

[07:28:37.0000] <zcorpan>
Anyone want to review https://github.com/w3c/fxtf-drafts/pull/169 ? (non-normative, should be pretty quick, but blocks me sending an email proposing a WD)

[07:32:27.0000] <zcorpan>
Domenic? ^

[07:32:37.0000] <Domenic>
sure

[07:32:48.0000] <zcorpan>
❤️

[07:36:20.0000] <Domenic>
Hmm, it seems a bit unfortunate it's new DOMPoint(x, y, z, w) but new DOMMatrix([m11, ...]), i.e. you need extra []s for DOMMatrix

[07:36:28.0000] <yoav>
annevk: one more Q. Would you like the elimination of empty potential-destination happen at the caller, or as part of the translation into a destination?

[07:36:49.0000] <yoav>
If it's the latter, I'd love some guidance as to how to define it

[07:37:32.0000] <zcorpan>
Domenic: yeah...

[07:38:41.0000] <zcorpan>
Domenic: could maybe change it, but extra churn, and another incompatible change from what gecko has shipped for a few years

[07:39:03.0000] <Domenic>
Yeah, probably not worth it.

[07:44:44.0000] <zcorpan>
Domenic: I guess remove "Changed <code>fromString()</code> static method to overloaded constructor." since that didn't exist in the previous WD

[07:46:47.0000] <Domenic>
Oh, yeah, I'm not up to date on my WDs :P

[07:47:18.0000] <zcorpan>
Domenic: ok PTAL

[07:48:05.0000] <zcorpan>
Domenic: you mean you didn't read the previous WD cover-to-cover, multiple times, then backwards at least once?!

[07:48:23.0000] <Domenic>
zcorpan: gotta go afk for ~30 mins, sorry! But feel free to merge.

[07:48:33.0000] <yoav>
annevk: nm. I think I figured it out

[07:48:35.0000] <zcorpan>
ok. thx

[08:29:50.0000] <annevk>
yoav: the caller would invoke this before creating a request, I'd think

[08:30:07.0000] <annevk>
yoav: until we have some kind of lowercase-request creator algorithm

[08:34:04.0000] <annevk>
Domenic: https://tools.ietf.org/html/rfc8174

[08:34:15.0000] <annevk>
Domenic: guess we need to fork 2119

[08:34:18.0000] <Domenic>
Oh boy

[08:35:27.0000] <Domenic>
"2.  Clarifying Capitalization of Key Words" "NEW" text seems rather IETF-specific and verbose.

[08:35:51.0000] <Domenic>
Oh I see the portion other specs are supposed to use is smaller

[08:36:06.0000] <Domenic>
I guess we should indirect everything through Infra and then Infra can say something about ignoring RFC 8174.

[08:36:50.0000] <Domenic>
Maybe we can move "willful violation" to Infra too hrm

[08:42:25.0000] <jugglinmike>
Domenic: when should I expect this definition to be available through Bikeshed?

[08:43:15.0000] <Domenic>
jugglinmike: usually less than 24 hours; my understanding is the ingestion process happens at some set time every day. (TabAtkins may know exactly when.) After it is then you need to do bikeshed update, or use the web service.

[08:43:40.0000] <jugglinmike>
got it. Thanks!

[08:51:25.0000] <annevk>
Domenic: sgtm

[08:52:51.0000] <Domenic>
Will file an issue so I don't forget, maybe a PR later


2017-05-23
[19:19:33.0000] <domfarolino>
Domenic: briefly revisiting last night's conversation...since scripts "optionally" have a muted errors field (https://html.spec.whatwg.org/#muted-errors), does that mean that there really is no interop bug after all, because it isn't a "requirement" for browsers to mute errors from x-o scripts?

[20:22:50.0000] <annevk>
domfarolino: it is a req

[20:23:44.0000] <annevk>
domfarolino: I think that just means it is not always set, could be clearer

[20:31:39.0000] <domfarolino>
Ok I see thanks annevk

[20:35:09.0000] <domfarolino>
Would you consider a PR that either moves the word "optionally" down to the description as opposed to the title, or removes it altogether?

[20:36:01.0000] <domfarolino>
I'm wondering if "A flag which, if set, means" covers the "optionally" aspect of setting that flag, while preserving its requirement of existing nevertheless

[00:08:18.0000] <ondras>
hm

[00:08:20.0000] <ondras>
https://jsfiddle.net/3vx88jtj/1/

[00:08:29.0000] <ondras>
is this behavior standardized somewhere?

[00:08:48.0000] <ondras>
i.e. how canvas font sizes <1 are supposed to work with transforms?

[00:12:42.0000] <annevk>
domfarolino: yeah, a rewrite to a flag of sorts would make sense

[00:13:01.0000] <annevk>
domfarolino: sorry for the late reply, missed your follow-up

[00:14:52.0000] <TabAtkins>
ondras: Browsers are, in general, allowed to apply a minimum font size. See https://jsfiddle.net/3vx88jtj/2/

[00:15:09.0000] <TabAtkins>
(Mine applies a min of 12px.)

[00:16:52.0000] <ondras>
TabAtkins: based on my current experience (ff, chrome), the behavior is weird and inconsistent.

[00:17:18.0000] <ondras>
for instance, the resulting height is ~always the same, ff+chrome

[00:17:23.0000] <ondras>
for the whole input range of your fiddle

[00:17:33.0000] <ondras>
but the letter spacing jumps rapidly

[00:18:14.0000] <ondras>
and chrome fixes the ctx.font value on a minimum of "2px" for the rightmost 1/3 of the slider

[00:18:28.0000] <ondras>
while still maintaining the proper size of the rendered result

[00:19:19.0000] <ondras>
=> chrome's .font getter returns different values than those that are actually applied

[00:19:59.0000] <ondras>
anyway, apparently rendering text to a (highly) scaled canvas seems to be a large amount of pain

[00:20:02.0000] <ondras>
damn.

[00:20:25.0000] <TabAtkins>
Ah, you might not have a meaningful min; mine blows up pretty quickly as soon as you start moving the slider to the right.

[00:21:03.0000] <ondras>
my height is constant, the width/letterspacing jumps in an unusable fashion

[00:21:43.0000] <TabAtkins>
Yeah, font renderers don't really work on arbitrary floats; they all round to various precisions at various spots.

[00:21:54.0000] <ondras>
okay

[00:22:12.0000] <ondras>
sounds like I will have to cancel the transform for font rendering and compute it myself

[00:33:38.0000] <yoav>
annevk: when defining a method, is there an equivalent to ASSERT_UNREACHED()? Should I throw in cases that should not happen? (e.g. because callers should collapse potential-destination values to known values before they call the translation method)

[00:43:44.0000] <annevk>
yoav: see Infra, you can use Assert:

[00:48:09.0000] <yoav>
cool, thx!

[00:49:00.0000] <yoav>
so something like "Assert: this should never be reached."?

[00:55:22.0000] <annevk>
yoav: prolly better to assert before the branch

[00:55:41.0000] <yoav>
ok, makes sense

[00:55:50.0000] <TabAtkins>
Yeah, assert your preconditions.  Failling the assert is a spec error, not a runtime error.

[00:55:52.0000] <annevk>
yoav: Assert: destination is not fetch or some such

[00:56:27.0000] <TabAtkins>
If it's a runtime error, then you do indeed need to throw; asserts might be useful afterwards to remind the spec reader what values are left over.

[01:01:36.0000] <annevk>
Asserts won't "run" after throw; throw terminates

[01:07:03.0000] <TabAtkins>
Right, I mean like "1. If |x| is a weird value, throw a TypeError. 2. Assert: |x| is a FooEnum value. 3. More stuff..."

[01:09:21.0000] <annevk>
Ah

[01:12:11.0000] <yoav>
annevk: https://github.com/whatwg/fetch/pull/547

[01:12:59.0000] <MikeSmith>
annevk: so getting back to HTML checking for the Encoding files, we want to run the checker if any .text files change or if the visualize.py file changes?

[01:13:20.0000] <yoav>
It's getting bikeshed errors regarding the linking of "preload destination". I'm not sure if it real errors or a bikeshed issue related to having a space as part of the linked term (there are other errors with space in them)

[01:15:36.0000] <TabAtkins>
There's definitely nothign wrong with ahving spaces in a term.

[01:15:53.0000] <annevk>
MikeSmith: .bs or visualize.py I suppose

[01:16:16.0000] <TabAtkins>
yoav: That said, I don't see "preload destination" in the ref database.

[01:16:18.0000] <annevk>
MikeSmith: hmm yeah, also addition of txt I guess

[01:17:02.0000] <MikeSmith>
or changes to the .txt files? I notice a recent commit that makes changes to them

[01:17:11.0000] <yoav>
TabAtkins: that's probably because I just made it up and didn't know I should also add it to a ref database :)

[01:17:37.0000] <yoav>
also s/preload destination/potential destination/

[01:17:55.0000] <TabAtkins>
Oh! Jeez, no wonder I was confused when reading the PR. ^_^

[01:18:11.0000] <annevk>
yoav: I can review later today, but I'd have the steps in opposite order; early return for fetch, then assert it's a destination, then return input

[01:18:31.0000] <yoav>
annevk: OK, I'll reverse them

[01:18:36.0000] <TabAtkins>
In the PR, you'll get a linking error because you're not defining a "potential destination" term; you're defining "potential-destination".

[01:18:49.0000] <annevk>
MikeSmith: yeah I suppose

[01:18:58.0000] <yoav>
TabAtkins: doh!

[01:19:52.0000] <yoav>
TabAtkins: Still getting the error after deleting the "-"

[01:20:11.0000] <TabAtkins>
...and replacing it with a space?

[01:20:19.0000] <yoav>
yeah

[01:21:11.0000] <TabAtkins>
Push the change; you shouldn't be having any trouble.

[01:21:31.0000] <annevk>
yoav: I don't think it's worth having a dfn for that

[01:22:35.0000] <annevk>
yoav: if you wanted to define such a term you'd define it as a superset of destination

[01:22:36.0000] <yoav>
annevk: OK, I'll remove it then

[01:23:18.0000] <TabAtkins>
Can replace it with just a |var| if you want the styling.

[01:23:51.0000] <yoav>
annevk: but we do need HTML to link to it later on. Can we do that without a dfn?

[01:24:19.0000] <TabAtkins>
No.

[01:25:17.0000] <yoav>
TabAtkins: pushed the change in the mean time. I still see the error (but I'm sure I'm holding it wrong :D)

[01:31:27.0000] <TabAtkins>
I'm extremely confused by what's going on here.

[01:32:34.0000] <yoav>
TabAtkins: confused by my patch, or by the error?

[01:34:12.0000] <annevk>
yoav: then you need to define it as a distinct type

[01:34:36.0000] <TabAtkins>
The error.

[01:35:27.0000] <TabAtkins>
I'll check more on this before bed, in heading to dinner now.

[01:37:08.0000] <yoav>
TabAtkins: Thanks :)

[01:37:31.0000] <yoav>
annevk: pointers to an example of defining as a distinct type?

[01:40:29.0000] <annevk>
yoav: see eg dfn of method

[01:40:52.0000] <annevk>
yoav: X is "fetch" or a destination

[01:41:11.0000] <annevk>
yoav: on mobile due to sick kid btw

[01:41:34.0000] <annevk>
Hence poor latency

[01:43:26.0000] <yoav>
annevk: looking, and no worries RE latency. I know what it's like

[01:49:57.0000] <yoav>
TabAtkins: Split out the definition. Now I'm longer seeing the error

[01:50:31.0000] <yoav>
annevk: uploaded. Let me know what you think (when you have time)

[02:03:25.0000] <TabAtkins>
Oh shoot, I realize what's up with the error now.

[02:04:47.0000] <TabAtkins>
Looks like I don't special-case for=/ on a dfn to mean "no for value". So it was registering it with a for of /, which you can't actually specify on a link.

[02:06:08.0000] <TabAtkins>
When you split out the definition, you also just removed the for attribute from the dfn, which resolved the issue.

[02:06:26.0000] <TabAtkins>
This is a Bikeshed bug, tho.

[02:17:12.0000] <yoav>
TabAtkins: OK, cool. Happy to find bikeshed bugs by doing things you normally wouldn't :D

[03:00:13.0000] <jochen__>
does the fetch spec say something about what should happen when the promise returned by fetch is resolved, but there is no scheduled work on the event loop (and so technically, we don't enter a microtask checkpoint)?

[03:01:37.0000] <annevk>
jochen__: HTML would say something about that, but that can't really happen, since fetch resolves the promise from a task

[03:35:33.0000] <annevk>
jochen__: in fact, promises never resolve without a task being involved

[03:54:27.0000] <jochen__>
ah, found it

[07:32:47.0000] <tobie>
TabAtkins: while you're around and fixing BS bugs…

[07:33:08.0000] <tobie>
TabAtkins: I'm having an issue where BS seems to rewrite an inline SVG

[07:33:55.0000] <tobie>
TabAtkins: removing the namespace in the process, which then gets rejected by echidna's HTML validator.

[07:35:23.0000] <MikeSmith>
if that is about the xlink:href vs href I fixed that in the HTML checker at the end of last week

[07:35:43.0000] <MikeSmith>
if it’s about some other error I can fix that too

[07:36:18.0000] <tobie>
MikeSmith: how do you know this?

[07:36:30.0000] <MikeSmith>
assuming it’s another case where the SVG changed the doc-confoormaces requirements in SVG2

[07:37:14.0000] <tobie>
MikeSmith: I have no idea. This thing displays is the limit of my understanding of namespaces in SVG

[07:37:36.0000] <tobie>
MikeSmith: can I point you to the error, BS source and output?

[07:37:43.0000] <MikeSmith>
well as far as SVG checking I can make the checker do whatever creates the least problems for people trying to get real work done

[07:37:46.0000] <MikeSmith>
tobie: sure

[07:37:59.0000] <tobie>
MikeSmith: source: https://github.com/w3c/sensors/blob/9335c1fa027fe309a3fd13b98914b7d479968252/index.bs#L735-L800

[07:38:36.0000] <MikeSmith>
no version of the SVG spec has ever clearly stated actual doc-conformance requirements consistently anyway

[07:38:39.0000] <MikeSmith>
/me looks

[07:38:53.0000] <tobie>
MikeSmith: echidna error: https://labs.w3.org/echidna/api/status?id=916cf371-4630-491c-abd6-c663b65e6bbd

[07:39:20.0000] <MikeSmith>
/me looks again

[07:39:22.0000] <tobie>
MikeSmith: validator error: https://validator.w3.org/nu/?doc=http://owl.w3.org//916cf371-4630-491c-abd6-c663b65e6bbd/Overview.html

[07:40:34.0000] <tobie>
MikeSmith: Bikeshed output of SVG: https://gist.github.com/tobie/d4a0e43cc7781fec2daa933674d099f5

[07:40:58.0000] <MikeSmith>
ah I think that is a bikeshed bug

[07:41:13.0000] <MikeSmith>
 <svg height="79pt" viewBox="0.00 0.00 351.00 78.51" width="351pt" xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg">

[07:41:25.0000] <tobie>
Yup: the namespaces are all gone

[07:41:40.0000] <MikeSmith>
I guess that should be xmlns:xlink="http://www.w3.org/1999/xlink"

[07:42:03.0000] <MikeSmith>
so yeah I can'

[07:42:16.0000] <MikeSmith>
*I can’t really fix that in the checker

[07:42:46.0000] <MikeSmith>
because there is no “xlink” attribute defined anywhere

[07:44:33.0000] <tobie>
Filing an issue against BS. Thanks for the help!

[07:45:04.0000] <MikeSmith>
cheers

[07:53:48.0000] <tobie>
TabAtkins/MikeSmith: for reference: https://github.com/tabatkins/bikeshed/issues/1029

[08:19:12.0000] <tobie>
@jyasskin, @mounir, others: what are your thoughts on using "user triggered activation" as "information about the user’s intent" to determine whether to prompt or grant permission?

[08:33:46.0000] <tobie>
Maybe @annevk also ^

[08:35:17.0000] <tobie>
Here's the PR on this topic: https://github.com/w3c/sensors/pull/207

[08:48:28.0000] <annevk>
tobie: what other information do you have?

[08:57:29.0000] <tobie>
annevk: that's a good question.

[09:04:20.0000] <jyasskin>
tobie: It's very easy to trick a user into providing activation, so it's not a reliable way to infer intent. I like demanding it for permission prompts because it helps avoid a popup-by-surprise and possibly clickjacking, but even that's gotten objections for the case where the entire point of a URL is to use a certain permission.

[09:06:18.0000] <jyasskin>
tobie: I'm having trouble following the English in that PR. Is it just saying that some readings are only very slightly sensitive, so we don't need actual user consent to give them out, just evidence that the user has noticed the page?

[09:08:49.0000] <jyasskin>
Ojan has been looking at some of that sort of feature for interventions. e.g. https://groups.google.com/a/chromium.org/d/topic/blink-dev/MRWIaGY4Txg/discussion for beforeunload and https://groups.google.com/a/chromium.org/d/topic/blink-dev/51WbTwn0M_Y/discussion for autoplaying audio

[09:24:28.0000] <annevk>
jyasskin: I think the objection was more involved than that

[09:25:12.0000] <annevk>
jyasskin: the objection was that if you don't persist the permission, the UX becomes really bad if the permission prompt effectively requires two interactions

[09:25:43.0000] <annevk>
jyasskin: so by requiring user interaction, you effectively require persisting the permission

[09:25:53.0000] <jyasskin>
annevk: Was there an example of that badness for pages that weren't requesting on load?

[09:27:02.0000] <jyasskin>
e.g. it's probably a good thing to make foonews.com wait to ask for your location until after you've interacted.

[09:27:04.0000] <tobie>
jyasskin: so the sensitiveness of the readings is highly debatable AND depends on the kind of sensors

[09:27:37.0000] <annevk>
jyasskin: not sure, I wasn't too closely involved

[09:29:20.0000] <jyasskin>
tobie: I think it'd be totally reasonable for some sensors to decide that they lie in that intermediate-sensitivity region, but I'm uncomfortable saying that the activation conveys user intent.

[09:29:56.0000] <jyasskin>
Or, I suppose, uncomfortable saying that it conveys intent to grant that particular sensor. It's intent to interact with the page.

[09:30:25.0000] <jyasskin>
tobie: I'll comment.

[09:30:37.0000] <tobie>
jyasskin: thank you

[09:31:56.0000] <tobie>
annevk: to answer your previous question, I don't think we have much info to determine user intent.

[09:32:43.0000] <tobie>
annevk: I'm especially concerned about malicious use of motion sensors on drive-by sites.

[09:34:14.0000] <annevk>
tobie: you might have noticed that we're removing these sensors from Fx

[09:34:31.0000] <tobie>
annevk, jyasskin: I would considered tying sensor access to PWA installed status or similar. The use cases really involve app status, not drive-by websites.

[09:34:43.0000] <annevk>
tobie: it's unclear if we'll add them back at this point, given that asking the user about them seems like a hard problem

[09:34:45.0000] <tobie>
annevk: the ambient light stuff.

[09:35:04.0000] <tobie>
annevk: but are you going to remove also the motion sensors?

[09:35:27.0000] <jyasskin>
tobie: Installation definitely indicates user intent.

[09:35:35.0000] <annevk>
I don't know

[09:35:36.0000] <tobie>
jyasskin: I agree.

[09:35:54.0000] <tobie>
annevk: they have similar issues but much more interesting use cases (indoor navigation, gaming, WebVR, etc.)

[09:35:58.0000] <annevk>
I'm not a big fan of the whole PWA thing, it's not very webby

[09:36:47.0000] <tobie>
annevk: well, it's much more webby than any of the previous iteration we've seen.

[09:43:54.0000] <MikeSmith>
annevk: when you have time please check https://stackoverflow.com/questions/44121783/fetch-api-default-cross-origin-behavior/44125919#44125919 and comment/correct/answer

[09:44:08.0000] <tobie>
jyasskin: filed https://github.com/w3c/sensors/issues/211

[09:54:35.0000] <jyasskin>
annevk: FWIW, an installed PWA is a bookmark with better UI. We couldn't infer intent from bookmarks because users tended to accumulate them indefinitely, but we think there's some pressure to "uninstall" PWAs that you're not using, since they clutter your launch screen, so we're more willing to infer intent from them.


2017-05-24
[19:27:47.0000] <MikeSmith>
about github webhoooks, does anybody here know if there is some way to get github to retry a webhook it if times out or fails?

[19:37:26.0000] <karlcow>
MikeSmith: I don't think it's possible. (I assume you meant when the POST from gitHub to your server has failed, because your server had a broken leg)

[19:39:39.0000] <karlcow>
payloads have also a max size of 5 MB. Above that the webhook will not happen.

[19:39:46.0000] <karlcow>
https://developer.github.com/webhooks/

[19:42:59.0000] <karlcow>
Oh let me fix one thing

[19:43:06.0000] <karlcow>
There is a manual retrigger

[19:43:30.0000] <MikeSmith>
karlcow: thanks

[19:43:42.0000] <MikeSmith>
yeah I can manually re-run it from the github UI

[19:43:45.0000] <karlcow>
https://github.com/[owner_name]/[repo_name]/settings/hooks/unique_id

[19:44:00.0000] <karlcow>
under Recent Deliveries

[19:44:04.0000] <MikeSmith>
yeah

[19:44:11.0000] <MikeSmith>
that is what I use

[19:44:17.0000] <MikeSmith>
every day

[19:44:23.0000] <karlcow>
ouch

[19:44:27.0000] <MikeSmith>
for https://github.com/w3c/web-platform-tests/

[19:44:59.0000] <MikeSmith>
yeah the thing is, for web-platform-tests it generates a *ton* of webhook requests every day

[19:45:08.0000] <MikeSmith>
dozens every day

[19:45:21.0000] <karlcow>
You are listening to "*" or specific events.

[19:45:57.0000] <MikeSmith>
well one thing is, github unfortunately does not give much granularity on what you can listen for

[19:46:05.0000] <karlcow>
on github.com/webcompat/web-bugs. We probably only generate 100 issues event a day.

[19:46:30.0000] <MikeSmith>
yeah most of the events are useless and you never want to do anything for them

[19:47:01.0000] <MikeSmith>
but for pull requests the important ones are “opened” and “closed” and “syncronized”

[19:47:08.0000] <karlcow>
For us it helps us to do labelling automagically depending on a couple of criteria

[19:47:15.0000] <MikeSmith>
right

[19:47:33.0000] <MikeSmith>
but we are using it to mirror the PR branches

[19:47:52.0000] <MikeSmith>
so for that all we care about is opened/closed/syncronized

[19:48:02.0000] <karlcow>
gotcha

[19:48:17.0000] <MikeSmith>
and not things like “edited” or “review requested” etc etc

[19:48:29.0000] <MikeSmith>
so if those fail I don’t care

[19:48:42.0000] <MikeSmith>
but if an opened/closed/syncronized fails I care a lot

[19:49:14.0000] <MikeSmith>
so what I do is, I have some bookmarklets I wrote to filter out all the noise from the Recent Deliveries logs

[19:49:25.0000] <MikeSmith>
so I can find just the opened/closed/syncronized fails

[19:49:33.0000] <karlcow>
:(

[19:49:41.0000] <MikeSmith>
yeah :(

[19:50:02.0000] <MikeSmith>
I have to just manually click the Redeliver button for those

[19:50:27.0000] <karlcow>
Maybe a good bug report for GitHub on having a URI with a list of all recent fails with a JSON format and a way to retrigger those.

[19:50:30.0000] <MikeSmith>
so... would much rather that Github just retried them some number of times if they fail

[19:50:34.0000] <MikeSmith>
yeah

[19:52:01.0000] <MikeSmith>
anyway it’s not a huge hardship

[19:52:04.0000] <MikeSmith>
just annoying

[19:53:41.0000] <karlcow>
add another point of failure by automating with webdriver api and selenium :)

[19:55:53.0000] <MikeSmith>
haha

[19:56:47.0000] <MikeSmith>
yeah but since I don’t know how to automate with webdriver I would ask somebody else to set it up and so they after that they would be responsible for dealing with the failures instead of me

[19:56:54.0000] <MikeSmith>
in other words, great plan

[19:57:10.0000] <MikeSmith>
good brainstorming!

[19:58:50.0000] <karlcow>
;)

[23:37:28.0000] <annevk>
mathiasbynens: 🍰🎉

[00:21:14.0000] <annevk>
hsivonen: does XUL require external DTDs?

[00:25:14.0000] <hsivonen>
annevk: yes :-(

[00:25:33.0000] <hsivonen>
annevk: that's the whole point. the DTD varies by localization, so the DTDs come from the language pack

[00:26:43.0000] <annevk>
hsivonen: I'm on board with parsing the internal subset, I don't know how much the external subset varies from that, it might be that an implementation could reuse quite a bit of code and we'd just never expose it to the web

[00:27:03.0000] <annevk>
hsivonen: but it sounds like there's not a real interest in addressing that issue

[00:27:14.0000] <annevk>
hsivonen: addressing XML5, I mean

[00:32:48.0000] <hsivonen>
annevk: it seems like this isn't the time for XML5. I can sympathize with not wishing to take on the scope creep of switching to XML5 if the goal is just to get memory-safety for XML 1.0 4th ed.

[00:34:22.0000] <TabAtkins>
WebIDL style opinion: I have a set of subclasses that all share an attribute. *One* of them wants to treat the attribute as readonly; the rest treat it as mutable.  Should I do the technically-correct thing, and mark it as "readonly attribute" on the superclass, then "inherit attribute" on all but one of the subclasses; or do the easy thing and just put

[00:34:23.0000] <TabAtkins>
"attribute" on the superclass, then describe in prose that the one subclass ignores writes?

[00:34:31.0000] <annevk>
hsivonen: yeah, makes sense

[00:34:44.0000] <annevk>
hsivonen: given https://bugzilla.mozilla.org/show_bug.cgi?id=501837 I think we should consider XML 1.0 5th though

[00:34:48.0000] <annevk>
hsivonen: but meh

[00:35:24.0000] <annevk>
hsivonen: did you ever discuss with the JavaScript folks changing the JavaScript String type to be UTF-8 or UCS-2?

[00:35:47.0000] <annevk>
hsivonen: I mean, supporting a UTF-8 string type

[00:37:20.0000] <annevk>
hsivonen: I tried to convince Waldo he should give it a shot or at least strongly consider it, but not much luck thus far

[01:21:02.0000] <hsivonen>
annevk: changing JS string internals to UTF-8 was discussed at one point

[01:21:31.0000] <hsivonen>
annevk: quite a while ago

[01:21:57.0000] <hsivonen>
annevk: but in good news, script parsing directly from UTF-8 seems to be going ahead

[01:22:03.0000] <annevk>
hsivonen: so I don't really mean breaking the API contract with the web, just to have an additional internal string type (or replace the ASCII-only one)

[01:22:18.0000] <hsivonen>
annevk: it's not ASCII-only, it's Latin-1

[01:22:23.0000] <hsivonen>
but yeah

[01:22:32.0000] <annevk>
ok

[01:22:36.0000] <hsivonen>
I didn't mean breaking the Web-visible API, either

[01:23:11.0000] <annevk>
Ah, parsing from UTF-8 sounds nice, hopefully we don't have the V8 bottleneck then if you hit an emoji in a comment

[01:23:23.0000] <yoav>
annevk: Thanks for reviewing https://github.com/whatwg/fetch/pull/547 Test-wise, I think the best way to go is to use potential destination as part of https://github.com/whatwg/html/pull/2588 and then land it alongside a Chrome CL with the right tests

[01:23:38.0000] <hsivonen>
annevk: see also https://bugzilla.mozilla.org/show_bug.cgi?id=1355106

[01:24:03.0000] <hsivonen>
annevk: I've been trying to promote not repeating that V8 design

[01:24:03.0000] <annevk>
yoav: that's reasonable, I forgot this requires changes to the HTML Standard, that should ensure the relevant bugs get filed at least

[01:24:28.0000] <annevk>
hsivonen: great, I wasn't aware you were on top of all that

[01:24:31.0000] <hsivonen>
annevk: AFAICT, we aren't headed towards that V8 design

[01:26:30.0000] <yoav>
Domenic: would you be interested in adding the "potential destination" bits to your PR? Or would you like me to do it?

[01:28:56.0000] <nox>
annevk: "we don't have the V8 bottleneck then if you hit an emoji in a comment"

[01:29:03.0000] <nox>
What a time to be alive!

[01:38:19.0000] <gsnedders>
do I want to ask what the V8 bottleneck is? does it convert everything to utf-16 codeunits when it hits a non-ASCII/latin1 byte?

[01:39:32.0000] <annevk>
Emojis are so great at making people that otherwise wouldn't care put up the right i18n infrastructure

[01:40:01.0000] <annevk>
gsnedders: I think that's basically it, though I don't think it has to redo everything

[01:40:36.0000] <annevk>
gsnedders: but it's a Unicode performance cliff effectively

[02:12:31.0000] <mounir>
tobie: _requiring_ a user activation for permission prompt might be a bit agressive but I know there are some experiment in this direction in Chrome

[02:12:51.0000] <mounir>
tobie: if other browsers are okay with this, it might work

[02:38:51.0000] <yoav>
annevk/Domenic: Related tests and Chrome CL at https://codereview.chromium.org/2903653005

[02:39:28.0000] <yoav>
I need to writeup an Intent to ship for this, as this modifies shipped behavior

[02:40:18.0000] <yoav>
It'll also require some HTTPArchive digging to see that there aren't many sites already using the "onerror" fallback

[02:40:51.0000] <annevk>
yoav: yay

[02:41:06.0000] <annevk>
yoav: I suspect you know but Domenic isn't usually around until quite a bit later

[02:41:37.0000] <yoav>
yeah, I'm assuming he'll catch up later, as he's logged in

[03:09:16.0000] <nox>
Is drafts.fxtf.org down?

[03:09:50.0000] <annevk>
nox: loads here

[03:10:02.0000] <nox>
Ah it works again here.

[03:14:41.0000] <tobie>
mounir: thanks feel free to comment on the PR (https://github.com/w3c/sensors/pull/207), the issue (https://github.com/w3c/sensors/issues/196) and loop the relevant people in, if necessary.

[04:47:03.0000] <annevk>
Is it a problem that request headers such as * and _ end up as HTTP__ in CGI and that if you use both you get only a single HTTP__ for the last header transmitted?

[04:47:17.0000] <annevk>
Seems there's at least some information loss

[06:23:48.0000] <Domenic>
I mean, I am not super surprised about CGI being a lossy translation of HTTP semantics

[06:26:01.0000] <gsnedders>
does CGI not pass everything through as envrionment variables?

[06:26:13.0000] <gsnedders>
any hence is limited by what's a valid env?

[06:26:20.0000] <jgraham>
Yes

[07:42:04.0000] <annevk>
So I looked around and there is a document describing CGI but it doesn't cover this case: https://tools.ietf.org/html/rfc3875#section-4.1.18

[07:57:32.0000] <zcorpan>
I'm pretty much behind in github notifications. If something needs my attention, please @mention me or drop a link here

[08:14:09.0000] <Domenic>
zcorpan: there's a parser open issue, besides the mega PR... https://github.com/whatwg/html/issues/2704

[08:24:01.0000] <zcorpan>
Domenic: thanks

[08:26:59.0000] <annevk>
hsivonen: I tried to do some more digging on the namespaces front, https://lists.w3.org/Archives/Member/w3c-xml-wg/1997Aug/0088.html seems to suggest RDF was important enough to consider a special case for, without necessarily solving it generically

[08:30:26.0000] <jugglinmike>
annevk: We'll see if anyone thinks this is important.. https://github.com/httpwg/http11bis/issues/26

[08:33:17.0000] <annevk>
jugglinmike++

[08:33:29.0000] <jugglinmike>
:)

[08:50:50.0000] <hsivonen>
annevk: https://archive.mozilla.org/pub/firefox/try-builds/hsivonen⊙mc/ has builds for Windows and Mac in case you are interested in trying a browser with Encoding Standard-compliant converters

[08:51:18.0000] <hsivonen>
(not 100% compliant integration, though. some old BOM and EOF handling bugs remain and need follow-ups to fix)

[08:53:57.0000] <hsivonen>
annevk: in any case, RDF has had the most committed to the "identifiers are URIs" meme and has been since before XMLNS and RDF/XML were final

[08:56:32.0000] <zcorpan>
MikeSmith: hsivonen: https://github.com/validator/validator/blob/3530d33b339a64fb3dd76673257d1fb7b930b9ea/schema/svg11/svg-datatypes.rnc#L73 is sadness (and means <circle r=5/> doesn't get an error for the attribute value)

[08:57:57.0000] <hsivonen>
zcorpan: indeed, those datatypes could use a custom library

[10:50:00.0000] <Mek>
random thought: should the processing model section in the html spec somehow normatively suggest that user agents should not starve particular task queues? (case in hand, chrome currently has arguably a bug where posting messages to a messageport in the right way can cause chrome to starve all other task queues, which arguably is perfectly fine according to the spec...)

[11:13:57.0000] <ben_thatmustbeme>
had a question come up in microformats parsing, what is the textContent of a self-closing tag

[11:14:05.0000] <ben_thatmustbeme>
https://dom.spec.whatwg.org/#dom-node-textcontent says for Elements textCotent must be The concatenation of data of all the Text node descendants of the context object, in tree order.

[11:14:20.0000] <ben_thatmustbeme>
but is it Null or "" if there are no text node descendants

[11:28:39.0000] <ben_thatmustbeme>
full breakdown of what i am hitting is here https://github.com/indieweb/microformats-ruby/issues/72

[11:29:56.0000] <Domenic>
ben_thatmustbeme: empty string

[11:30:24.0000] <ben_thatmustbeme>
thanks

[11:32:20.0000] <ben_thatmustbeme>
is there anywhere that is clear about that?

[11:32:42.0000] <ben_thatmustbeme>
i feel like that should be more clear, just don't know if i'm missing something

[11:33:21.0000] <Domenic>
ben_thatmustbeme: in general it's understood that the concatenation of an empty set of strings is the empty string; I guess we could eventually define that explicitly, but it's generally true in programming.

[11:38:06.0000] <ben_thatmustbeme>
guess i never thought about it.  both ruby and php agree on that

[12:27:39.0000] <annevk>
Mek: I'm not sure what you mean by starve

[12:27:53.0000] <annevk>
Mek: maybe file a bug since I won't be able to follow-up properly for a while

[12:29:27.0000] <Mek>
annevk: starve is the language the example used (" The user agent could then give [...] events preference over other tasks [...], keeping the interface responsive but not starving other task queues,"), but basically make sure that all task queues will eventually make progress

[12:32:55.0000] <annevk>
Mek: as long as there are tasks on one task source, not handling the others is acceptable, but yeah, maybe it should not be, but not sure what you could require there meaningfully

[12:33:13.0000] <annevk>
Mek: not all user agents implement the same task sources either

[12:33:39.0000] <annevk>
Mek: and a lot of UI events seem to move from task sources to the "animation frame moment"

[12:34:18.0000] <annevk>
Mek: so nothing there really seems stable enough to me to clean up and figure out an ideal model

[12:34:35.0000] <Mek>
yeah, it definitely doesn't seem like something that can have strong requirements

[12:35:33.0000] <Mek>
it just "feels" wrong that posting the "right" messages from an onmessage event can cause chrome to never get to any other tasks... but maybe that's just a quality-of-implementation thing

[13:44:10.0000] <jugglinmike>
JakeA annevk as far as I can tell, service workers should intercept synchronous XHR requests in the same way they intercept asynchronous XHR requests. Is that correct?

[13:51:56.0000] <JakeA>
jugglinmike: yes, but we don't in Chrome right now. It created a sort of deadlock.

[13:55:41.0000] <jugglinmike>
JakeA: I'll have to research a bit more. Chromium has a test for this, but I don't think it's correct

[13:56:03.0000] <wanderview>
not sure we have tested it, but i think sync xhr interception should work in FF

[13:56:27.0000] <wanderview>
our sync xhr spins the event loop, so I don't think we will deadlock... but who knows

[13:56:50.0000] <annevk>
That's a bug in Fx though

[13:57:18.0000] <wanderview>
annevk: why? we're not running javascript on the main thread here

[13:57:25.0000] <annevk>
But would be fun to test interaction with postMessage() and friends and such

[13:57:40.0000] <annevk>
wanderview: UI event handlers run iirc

[13:57:42.0000] <jugglinmike>
Here's the test

[13:57:45.0000] <jugglinmike>
https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/LayoutTests/http/tests/serviceworker/sync-xhr-doesnt-deadlock.html

[13:58:03.0000] <jugglinmike>
and https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/sync-xhr-doesnt-deadlock-iframe.html

[13:58:16.0000] <jugglinmike>
and https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/sync-xhr-doesnt-deadlock.js

[13:58:23.0000] <jugglinmike>
and finally https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/sync-xhr-doesnt-deadlock.data

[13:59:21.0000] <jugglinmike>
Currently, Chrome passes this test because the Service Worker doesn't intercept the request, and the `.data` file is retrieved from the server directly

[13:59:35.0000] <jugglinmike>
but I'm migrating this test to WPT, and Firefox fails it

[14:00:24.0000] <jugglinmike>
because in Firefox, the worker correctly intercepts the request and response with the result of fetching "404resource"

[14:01:23.0000] <jugglinmike>
So I'm removing the `.data` file, and having the worker respond to requests for it with a `new Response`

[14:01:59.0000] <jugglinmike>
that way, Chrome fails the test (because the worker doesn't intercept the request), and Firefox passes (because the work does intercept, and the frame does not deadlock)

[14:02:23.0000] <wanderview>
I guess that works

[14:02:36.0000] <wanderview>
I wouldn't lose much sleep if we just said sync XHR wasn't intercepted, thoguh

[14:03:04.0000] <jugglinmike>
Neither would I, but I can't submit a test like that without a spec change

[14:03:41.0000] <jugglinmike>
Now normally, when modifying a test like this, I would persist some alternate Chromium version in order to maintain test coverage

[14:04:15.0000] <jugglinmike>
but in this case, I don't think there is anything meaningful to maintain. As written, Chromium's version isn't really doing anything


2017-05-25
[21:44:11.0000] <Domenic>
I wonder who thought making <object> a full-fleged form element was a good idea

[21:44:38.0000] <Domenic>
It has the 6 validity APIs, and a form attribute

[21:45:42.0000] <Domenic>
I guess in Web Apps 1.0 people still thought <object> might be a good thing, unifying iframe/img/applet/embed? Or maybe not, since they created audio/video?

[21:57:56.0000] <annevk>
Domenic: I think it already was and Hixie didn't want to make things inconsistent

[21:58:11.0000] <Domenic>
Huh OK

[21:58:41.0000] <Domenic>
I wonder how that worked, back in the brief period where people were excited about implementing object

[21:58:47.0000] <Domenic>
Maybe some plugin actually created form data or something

[21:58:52.0000] <annevk>
Domenic: there might have been some more love for <object> early on too, until the complexity was more unearthed

[21:59:22.0000] <annevk>
Domenic: yeah, maybe, I don't know

[23:07:50.0000] <annevk>
MikeSmith: spam: https://www.w3.org/Bugs/Public/show_bug.cgi?id=30114

[23:08:43.0000] <MikeSmith>
annevk: thanks yeah saw that and banned them already

[23:09:08.0000] <annevk>
MikeSmith++

[23:11:23.0000] <MikeSmith>
wish I could lock our old components there against changes from new users

[23:13:37.0000] <MikeSmith>
annevk: btw I am still not confident about my own understanding of “Main fetch” as far there being any default for the request mode when stepping through that algorithm

[23:13:56.0000] <annevk>
MikeSmith: there's no default for request mode

[23:14:07.0000] <MikeSmith>
what I wrote in https://stackoverflow.com/questions/44121783/fetch-api-default-cross-origin-behavior/44125919#44125919 I’m not sure myself that’s correct

[23:14:13.0000] <annevk>
MikeSmith: fetch() has a default though

[23:14:18.0000] <MikeSmith>
oh

[23:14:48.0000] <MikeSmith>
well see the part of that spec cited in that question:

[23:14:50.0000] <MikeSmith>
> A request has an associated mode, which is "same-origin", "cors", "no-cors", "navigate", or "websocket". Unless stated otherwise, it is "no-cors".

[23:15:05.0000] <MikeSmith>
that is what confused the OP

[23:15:09.0000] <MikeSmith>
and me, really

[23:15:19.0000] <annevk>
MikeSmith: ah, the default is different for fetch()

[23:15:41.0000] <MikeSmith>
OK I figured so but I could not find where the spec expicitly says that

[23:15:47.0000] <annevk>
MikeSmith: it might be worth removing the default for requests though that would require going through all downstream invocations

[23:16:09.0000] <MikeSmith>
well I think that we should not change

[23:16:16.0000] <annevk>
MikeSmith: https://fetch.spec.whatwg.org/#dom-request 5.5

[23:17:06.0000] <annevk>
MikeSmith: folks continue to think (justifiably) that fetch() is fetch

[23:17:13.0000] <MikeSmith>
yeah

[23:17:48.0000] <MikeSmith>
but I think it is (relatively) clear and good, that when, e.g., the HTML invokes the fetch algorithm for, say, <script src> that gets called with mode: no-cors

[23:17:51.0000] <MikeSmith>
right?

[23:17:58.0000] <MikeSmith>
if so that I think we should not change

[23:18:22.0000] <MikeSmith>
/me looks at https://fetch.spec.whatwg.org/#dom-request step 5.5.

[23:18:25.0000] <MikeSmith>
ah yes

[23:18:37.0000] <MikeSmith>
> Set fallbackMode to "cors".

[23:18:55.0000] <MikeSmith>
so yeah I remember now I assumed that is what was being hit

[23:19:45.0000] <MikeSmith>
wil update that SO answer

[23:20:45.0000] <annevk>
MikeSmith: for <script src> it should be "no-cors" yes, but we could also note that explicitly in HTML if we wanted to

[23:21:06.0000] <MikeSmith>
OK yeah I may create a PR for that then

[23:24:15.0000] <annevk>
MikeSmith: we'd have to find all call sites first

[23:24:28.0000] <MikeSmith>
have done that before :)

[23:25:57.0000] <MikeSmith>
but still dunno.. not sure it would be worth the time, if implementors don’t find it ambiguous or confusing

[23:26:43.0000] <annevk>
MikeSmith: we could also add a note under request's mode that the effective default for fetch() and Request is "cors"

[23:27:14.0000] <annevk>
MikeSmith: or maybe there's a better place to explain that the API and underlying abstraction are separate...

[23:28:59.0000] <MikeSmith>
I guess for HTML if we were to explain it, it should be at point of use and the points in the spec that define things that case fetches

[23:29:09.0000] <MikeSmith>
I think that would be the most helpful to authors

[23:29:48.0000] <MikeSmith>
and it seems like authors are the ones that would benefit from have it clarified, not implementors

[23:30:17.0000] <MikeSmith>
anyway, not a high priority so maybe for now I will just raise an issue

[01:31:25.0000] <hsivonen>
I'm behind the times on Promises. What should I read to learn how to create my own Promises to return from a .then() processing a fetch-provided promise?

[01:36:15.0000] <annevk>
hsivonen: mdn? new Promise takes an init function that is passed a resolve and reject function, which you can use to fulfill the promise is the tl;dr

[01:39:21.0000] <hsivonen>
yeah, the part I have trouble with, even after reading MDN, is: I do a bit of processing in then(), but what should I return to return and always-succeeding promise to continue the chain?

[01:40:26.0000] <hsivonen>
examples tend to focus on doing something with an API that returns a promise and not on how to continue the promise chain after the processing you wrote yourself

[01:40:44.0000] <hsivonen>
(of course, I missing something *very* basic, but what?)

[01:42:46.0000] <hsivonen>
maybe what I want is learning async/await right away and skipping over how things were like before them

[01:42:52.0000] <TabAtkins>
hsivonen: If you just want the resulting promise to contain a value you obtain from doing stuff in the .then() callback, just return that value; it implicitly gets wrapped in a fresh Promise.

[01:43:55.0000] <TabAtkins>
If you the "stuff" you're doing ends up with you holding another Promise, and you want the result of the .then() to contain what's inside of your "other Promise", again just return it - it automatically chains the internal value.

[01:44:39.0000] <hsivonen>
TabAtkins: ooh. so magical.

[01:45:02.0000] <TabAtkins>
The only time you ever have to create a new promise manually is if you're not currently in a promise and want to start one.  (Or you're using a legacy async api that doesn't return a promise, and want it to interoperate with a promise chain.)

[01:45:13.0000] <TabAtkins>
hsivonen: It's just a functor/monad. ^_^

[01:45:14.0000] <hsivonen>
TabAtkins: So I just "return;" from a .then() callback to return a promise than simply resolves?

[01:45:18.0000] <TabAtkins>
Yup.

[01:45:27.0000] <hsivonen>
TabAtkins: thanks

[01:45:51.0000] <TabAtkins>
If you just "return;" like that, then the resulting promise will resolve to undefined (your return value), but it will definitely resolve successfully.

[01:46:10.0000] <TabAtkins>
aka:

[01:46:54.0000] <TabAtkins>
let x = fetch(...).then(res=>doSomeWork()); => x is a promise holding the result of doSomeWork().

[01:47:16.0000] <hsivonen>
TabAtkins: thanks. that was what I was missing

[01:47:27.0000] <TabAtkins>
let x = fetch(...).then(res=>doSomeAsyncWork()); => x is a promise that will resolve when doSomeAsyncWork()'s promise resolves, to the same value.

[01:48:28.0000] <TabAtkins>
And if doSomeWork() throws, or the promise returned by doSomeAsyncWork() rejects, then x will reject as well.

[05:37:04.0000] <Domenic>
annevk: are you going to be unreachable for two (?) months, or just not working? Also, when exactly are you getting back?

[07:22:58.0000] <annevk>
Domenic: July 4, though week before that I should be available during Mozilla week

[07:23:54.0000] <annevk>
Domenic: vacation, will likely drop in from time to time from past experience

[07:24:27.0000] <wanderview>
/me should take a long vacation

[07:24:38.0000] <wanderview>
it takes me like 2 weeks to forget about work

[07:25:48.0000] <Domenic>
annevk: OK, thanks. So for your specs, I was thinking to merge things that I think you'd accept, without waiting for explicit approval, while pinging you for things I'm unsure on. WDYT?

[07:26:17.0000] <Domenic>
Mostly I am thinking of in-flight PRs you have mostly accepted but are still going through editorial turns or discussions

[07:26:18.0000] <wanderview>
all commit message should contain "while the cats away..."

[07:26:20.0000] <annevk>
Domenic: sgtm

[07:26:26.0000] <annevk>
Hah

[07:58:26.0000] <aleray>
hi, using HTML5lib python, how can I set the value of a tag attribute (let say href attribute of <a> tag) in a filter without HTML5lib escaping it?

[08:01:05.0000] <aleray>
gsnedders, ^^

[08:06:46.0000] <aleray>
wip: http://dpaste.com/18JF8PD

[08:27:59.0000] <gsnedders>
aleray: there's no way to do that

[08:29:34.0000] <gsnedders>
aleray: essentially, all the escaping is done by the serializer, and the filters can merely alter the contents of the tokens

[08:38:04.0000] <jgraham>
jugglinmike: Ask jdm

[08:38:09.0000] <jgraham>
Erm

[08:41:34.0000] <aleray>
gsnedders, how could I do then? Working directly on the tree?

[08:41:39.0000] <jugglinmike>
nox: are you in today?

[08:41:57.0000] <nox>
In?

[08:42:51.0000] <jugglinmike>
put differently: are you available to talk today (since jgraham tells me that it is a French holiday, and I assume that means you must be in France)?

[08:45:33.0000] <jugglinmike>
I'm working on the `testharness.js` library in the Web Platform Tests project. I'd like to use Promises in that code, and jgraham has previously been reluctant about that. He suggested that this may interfere with Servo's ability to use WPT, so I wanted to learn more before committing any more time to that work

[08:46:07.0000] <jugglinmike>
but if you are celebrating, then by all means enjoy. This can certainly wait

[08:46:33.0000] <jgraham>
jugglinmike: (I can't rememeber if this is related to this question, but it isn't possible to make async_test serial by default. You could maybe make it opt-in)

[08:47:18.0000] <jugglinmike>
jgraham: nope, that's unrelated. This is about honoring promises returned from functions passed to `Test#add_cleanup`

[08:47:42.0000] <jgraham>
Oh, right

[08:49:47.0000] <jugglinmike>
I still don't know exactly what the problem is, but my guess is that we don't want all tests to suddenly start requiring the global Promise constructor. That way, consumers that don't define it could still run tests that don't technically need Promises

[08:50:11.0000] <jugglinmike>
but it's to be expected that they would continue to fail those tests that do

[08:50:26.0000] <jyasskin>
jugglinmike: Which consumers still don't have Promises?

[08:51:14.0000] <jugglinmike>
I don't know. If that is actually the issue that jgraham has in mind when he mentioned Servo, then I would assume Servo

[08:51:37.0000] <jgraham>
jyasskin: I don't know if servo managed to integrate promises yet

[08:51:51.0000] <jyasskin>
https://github.com/servo/servo/issues/4282 is closed, indicating they have.

[08:52:25.0000] <tobie>
jugglinmike: my understanding is the goal of testharness is to be backwards compatible with older browsers whenever possible

[08:52:31.0000] <jugglinmike>
Actually, I do think that the general concern may still be relevant. I'm usually

[08:52:46.0000] <jugglinmike>
tobie: yeah, that's the point I was just about to make ^

[08:53:11.0000] <jyasskin>
There are also polyfills that older browsers could stick in their testharnessreport.js.

[08:53:13.0000] <jgraham>
If it will work in Servo I don't have any specific objections fwiw

[08:53:36.0000] <jugglinmike>
Practically speaking, though, there's nothing testharness.js can do to make tests that depend on Promises work in older browsers (short of including a polyfill)

[08:53:42.0000] <jugglinmike>
which is not to say we shouldn't be careful

[08:53:57.0000] <gsnedders>
/me points out we fixed IE6 support only a year ago in testharness.js

[08:54:09.0000] <jugglinmike>
because there's still value for older browsers to blacklist tests that truly depend on un-implemented features

[08:54:19.0000] <jyasskin>
I'd argue that you shouldn't be slowed down by worrying about a lack of Promises in particular.

[08:54:23.0000] <jgraham>
I don't consider testing N-1 level  browsers to be particularly interesting, but I do care about keeping servo's main testsuite working in servo (and same for latest Chrome, Firefox, Safari, Edge)

[08:55:06.0000] <jugglinmike>
but that use case would be precluded if testharness.js assumed Promise as a matter of course

[08:55:08.0000] <jgraham>
gsnedders: I think we did that because it happened to be trivial

[08:55:17.0000] <gsnedders>
jgraham: right

[08:55:33.0000] <jgraham>
Anyway, I think there's an engineering tradeoff here

[08:55:43.0000] <gsnedders>
in general I'm against making changes that break testharness.js in old browsers unless the gain is notable

[08:55:44.0000] <jgraham>
It depends on the value of this feature vs the cost

[08:56:07.0000] <jgraham>
So to assess that we also need to know the value of the feature, not just the cost

[08:58:05.0000] <jugglinmike>
The feature in question is extending `Test#add_callback` to honor promises returned by the provided function

[08:58:21.0000] <jgraham>
jugglinmike: Right, but what's the use case?

[08:59:05.0000] <jugglinmike>
It's important for Service Worker tests, where the cleanup logic typically includes an invocation of `ServiceWorkerRegistration#unregisiter`

[08:59:57.0000] <jyasskin>
jugglinmike: You can probably do that without mentioning the window.Promise object. Just check for and use the .then() method of whatever the provided function returns.

[08:59:59.0000] <jugglinmike>
I'll say that lack of support here hasn't been an issue so far practically, but that lack of support makes a race condition of those tests

[09:00:15.0000] <jyasskin>
It's easier to do using Promise, but possible without it.

[09:00:30.0000] <jugglinmike>
yeah, I've been thinking about that, too

[09:01:03.0000] <jugglinmike>
I think the heavy lifting would come down to a custom Promise.all implementation, but that's not a difficult thing to implement

[09:01:25.0000] <jugglinmike>
Although I'm not sure. It's been a while since I looked at my patch. I'm happy to try that

[09:01:31.0000] <jgraham>
OK

[09:12:17.0000] <aleray>
gsnedders, what do you advise then?

[11:22:55.0000] <Yuhong>
It is unfortunate EdgeHTML was not based on Tasman but I guess by the time they realized they need it it was too late.

[11:23:29.0000] <Yuhong>
In the meantime they keep adding new "modes" on Trident with each new version of IE.


2017-05-26
[00:45:48.0000] <hsivonen>
I take it that postMessage() to self in order not to block the event loop without waiting on a timeout is obsolete with promises

[00:48:54.0000] <hsivonen>
or is it? what's the right way to return a promise that does nothing but let the event loop turn and then resolve?

[00:49:13.0000] <Methodist>
Hey

[00:50:03.0000] <hsivonen>
oh, it's always on microtask queue

[01:29:58.0000] <hsivonen>
is there a good blackbox function in JS that just returns its argument but that the compiler is guaranteed not to optimize out?

[01:30:22.0000] <hsivonen>
i.e. something that can force the lack of optimizing out operations being benchmarked

[02:10:26.0000] <MikeSmith>
hsivonen: caitp might have a good answer to that, if she’s around

[02:50:08.0000] <jpdevries>
Does anyone know if we may see <datalist> support <optgroup>? My understand of the spec is it doesn't really say if it should either way.

[02:51:26.0000] <jpdevries>
Nevermind. Found something promising 🤞https://www.w3.org/TR/html5/forms.html#the-option-element

[02:51:52.0000] <jpdevries>
 

[02:55:09.0000] <jpdevries>
/me read that wrong, mistook option section for optgroup section 😢

[05:00:11.0000] <tobie>
can someone enlighten me on the relationship between event firing and task sources?

[05:01:07.0000] <tobie>
looking for something as basic as: "they're completely orthogonal" or "one implies the other"

[05:05:19.0000] <jgraham>
When you queue an event to be fired it is put into a task source. At some point the event loop spins, the event is grabbed from the task source, and it is dispatched

[05:06:25.0000] <caitp>
hsivonen: in v8, the legacy pipeline was very happy to not opt or inline anything if all kinds of stuff was used

[05:09:36.0000] <caitp>
the new pipeline will skip some but not all optimizations if you do certain things, so probably the best you can do is %NeverOptimizeFunction(func)

[05:10:19.0000] <caitp>
there might be some better

[05:12:31.0000] <tobie>
jgraham: right. But can you just fire an event without queueing it?

[05:13:33.0000] <tobie>
jgraham: if so, what's the distinction between these two things and when should you choose one over the other?

[05:18:28.0000] <jgraham>
tobie: Yeah, but that means it dispatches synchronously so if you have (pseduocode) <script>fooRan = false; addEventListener("foo", () fooRan = true); fireEvent("foo"); /* now foo handlers run */ assert(fooRan, true)</script>

[05:19:18.0000] <tobie>
jgraham: right. How do we decide what behavior to go for?

[05:19:30.0000] <jgraham>
tobie: Firing synchronous events is very rare

[05:21:03.0000] <tobie>
jgraham: is there a document that explains which one should be used when

[05:21:29.0000] <jgraham>
I think it's async always except if there's some legacy

[05:21:36.0000] <tobie>
jgraham: oh

[05:21:56.0000] <jgraham>
But idk if that's written down somewhere, and I could be wrong in some case I haven't thought of

[05:22:23.0000] <tobie>
jgraham: it's about firing event when a new sensor reading is received.

[05:23:14.0000] <smaug>
hmm, firing sync events rare? click(), and focus() etc cause various sync events. Mutation Events are sync... But yes, legacy mostly

[05:23:49.0000] <smaug>
tobie: if that receiving is already async, then dispatching event sync is probably ok

[05:24:19.0000] <tobie>
smaug: it is async, yes. It's a shared memory buffer that's updated

[05:24:31.0000] <jgraham>
As part of a task?

[05:24:43.0000] <smaug>
but better to do the sync dispatch at the end of some algorithm, since event handling may change the state of the world

[05:24:52.0000] <jgraham>
Like if there's already a task on the stack then you can fire events sync

[05:25:10.0000] <jgraham>
But otherwise one typically queues a task specifically to fire them

[05:26:26.0000] <tobie>
So the part where the buffer is updated is totally hand-wavy in the spec for now

[05:26:51.0000] <tobie>
So it isn't clearly specified as happening within a task.

[05:27:47.0000] <tobie>
Is what you're saying that this happens within a task whether or not I've specifically written it down?

[05:28:33.0000] <tobie>
(This is probably a stupid question but I'm not familiar with how to spec things that happen at the boundary with the underlying C++ code)

[05:28:41.0000] <tobie>
^ smaug, jgraham

[05:35:26.0000] <smaug>
hmm, that is unclear in the specs

[05:35:28.0000] <smaug>
I'd say

[05:35:34.0000] <smaug>
when data is coming from outside

[05:35:53.0000] <smaug>
but implicitly it needs to be in some task source

[05:42:26.0000] <tobie>
smaug: maybe I should rephrase this differently. Is there anything that can happen outside of a task source?

[05:42:33.0000] <jgraham>
tobie: Sure

[05:42:41.0000] <jgraham>
But it's bad :)

[05:43:32.0000] <jgraham>
Like if you update data in the background then in theory something like (very pseudoCode) <script>getSensorData("foo") == getSensorData("foo")</script> doesn't hold

[05:45:34.0000] <jgraham>
Typically the platform tries to expose consistent state to each script, but that isn't always the case.

[05:48:19.0000] <tobie>
ok. I think that makes sense.

[05:48:27.0000] <tobie>
Thanks.

[05:51:34.0000] <tobie>
smaug, jgraham: would either of you have pointers of other specs doing something similar and that would have gotten this right so I could copy it?

[05:52:10.0000] <tobie>
(off the top of your head)

[05:53:10.0000] <jgraham>
Not off the top of my head

[06:12:22.0000] <tobie>
alright thanks for the explanation, folks.

[11:45:17.0000] <Domenic>
tobie: not sure i fully understand the scenario but i would imagine sensor reading happens off-main-thread. in which case you must queue a task to go back to the main thread in order to fire the event

[11:45:28.0000] <Domenic>
You can't fire an event from off-main-thread (i.e. from "in parallel" sections)

[11:49:58.0000] <tobie>
Domenic: so what happens is that the underlying layer updates a shared memory buffer whenever there's a new sensor reading.

[11:52:35.0000] <tobie>
Domenic: on the JS side this causes an event to be fired. and the sensor.value attribute getter now return the value from that shared buffer (or a copy of it stored in a private var, this is still in flux)

[11:54:17.0000] <Domenic>
"causes an event to be fired" how?

[11:54:30.0000] <Domenic>
Does the spec actually speak in terms of shared memory buffers?

[11:55:10.0000] <tobie>
Domenic: no. It's a infra map

[11:55:16.0000] <tobie>
*an

[11:55:36.0000] <Domenic>
OK. But the updating happens "in parallel" I'd assume

[11:55:47.0000] <tobie>
Domenic: yes.

[11:55:56.0000] <Domenic>
Great. So then yeah, you need to queue a task to fire the event.

[11:57:01.0000] <tobie>
So: in parallel, set map[value] to x, then queue a task to fire an event.

[11:57:58.0000] <Domenic>
sounds perfect :)

[11:58:49.0000] <tobie>
Domenic: thanks a bunch, it the "in parallel, update the map" bit I was missing to make sense of it all.

[11:58:57.0000] <tobie>
*it's

[11:59:52.0000] <tobie>
Domenic: if the map is updated in parallel, an instances have a getter to the map value, doesn't that still risk to cause concurrency issues?

[12:00:26.0000] <Domenic>
It does tingle my danger sense... Not sure about if there's a concrete problem though...

[12:00:42.0000] <Domenic>
Not sure I understand the dangers there very well myself, to be honest

[12:01:03.0000] <Domenic>
I think it might be OK if it's hidden behind a getter?

[12:01:15.0000] <Domenic>
Because the worst that can happen is that x.value !== x.value

[12:01:30.0000] <Domenic>
But that's explainable in terms of .value being a getter

[12:01:35.0000] <Domenic>
I guess it's still unexpected

[12:01:53.0000] <Domenic>
If you want to avoid that you can update the map in the queued task too

[12:02:08.0000] <Domenic>
So it's like: in parallel, wait for a change. When the change happens, queue a task to update the map and fire an event

[12:02:21.0000] <tobie>
Domenic: ^ this.

[12:02:40.0000] <tobie>
Awesome.

[12:13:08.0000] <tobie>
Domenic: one last question. The spec was designed with it's own sensor queue that could be disabled for security reasons (e.g. when focus was lost). Does that make sense, and if so, do we need a queue per instance, per browsing context? per what?

[12:13:14.0000] <tobie>
* its

[12:15:37.0000] <jyasskin>
tobie: This doesn't answer your question, but do you have a good reference for "when focus is lost"? NFC and WebAuthn want it, and I think it doesn't exist yet in HTML.

[12:16:41.0000] <jyasskin>
tobie: To answer your question, https://webbluetoothcg.github.io/web-bluetooth/#notification-events may be a similar situation?

[12:17:19.0000] <tobie>
jyasskin: putting the kids to bed. But yeah that seems what I'm looking for.

[12:31:09.0000] <Domenic>
tobie: I am pretty sure event queues are per event loop

[12:33:32.0000] <tobie>
Domenic: maybe it makes more sense to have a per browsing context global flag for stopping the events for security reasons rather than piggy-backing on top of the event loop.

[12:34:59.0000] <Domenic>
Hmm yeah

[12:35:17.0000] <jyasskin>
i.e. you'd post a task that says "if the flag is set, return", right?

[12:37:01.0000] <Domenic>
It depends on if you want ignore-when-unfocused or add-to-backlog-when-unfocused behavior... the latter seems tricky.

[12:40:38.0000] <jyasskin>
Yeah, "if the flag is set, do the right thing. Otherwise the other right thing."

[12:43:18.0000] <tobie>
Domenic: ignore-when-unfocused

[12:43:37.0000] <Domenic>
Then yeah jyasskin's version sounds perfect

[12:43:51.0000] <tobie>
jyasskin: cool.

[12:45:56.0000] <tobie>
jyasskin: so yes, this seems like a very similar situation https://webbluetoothcg.github.io/web-bluetooth/#notification-events

[12:46:35.0000] <tobie>
jyasskin: wrt "when focus is lost event" do you know of an open issue against HTML?

[12:51:41.0000] <tobie>
jyasskin: I couldn't find anything after a cursory look. Could you point me to where in WebBluetooth this is needed? Also if you already have an open issue in your repo on this? Like that I can file a bug an reference all the things

[13:12:39.0000] <annevk>
Do not update state without a task

[14:10:09.0000] <tobie>
annevk: well, that probably should be printed on a whatwg t-shirt?

[15:26:53.0000] <jyasskin>
tobie: Sorry, had to go home to watch Max. I don't know of an existing issue against HTML. NFC tries to use it in https://w3c.github.io/web-nfc/#handling-window-visibility-and-focus, and WebAuthn has an issue for it in https://github.com/w3c/webauthn/issues/316

[15:28:36.0000] <tobie>
jyasskin: looks like you just found the issue. :)


2017-05-27
[07:34:17.0000] <gbee>
https://domparsing.spec.whatwg.org << Inaccessible because certificate has expired

[07:55:36.0000] <MikeSmith>
gbee: thanks for the heads-up

[08:02:27.0000] <MikeSmith>
gbee: the spec is not there anyway

[08:02:36.0000] <MikeSmith>
that is just a redirect to https://w3c.github.io/DOM-Parsing/

[08:08:18.0000] <gbee>
thanks, that just happened to be the link I was following from elsewhere

[08:15:33.0000] <gbee>
sadly nothing proposed on the schema for parsing errors, a standard root node and then apparently whatever the implementor choses as far as the rest of the error document content

[09:56:21.0000] <MikeSmith>
gbee: yeah that spec has been neglected for a while now

[09:56:28.0000] <MikeSmith>
it needs an active editor


2017-05-28
[23:10:01.0000] <Jake__>
hi

[12:55:50.0000] <crissov>
Hi everyone! I'm still considering to volunteer as an editor for a PNG or APNG Living Standard at WhatWG

[12:55:52.0000] <crissov>
https://lists.w3.org/Archives/Public/public-whatwg-archive/2016Dec/0027.html

[12:56:16.0000] <crissov>
What exactly would I need to do to move this forward?


2017-05-29
[22:28:49.0000] <hsivonen>
caitp: Thanks. It looks like the benchmark I did was not optimized away despite not using V8-specific black box. I guess neither V8 nor SpiderMonkey knows that TextDecoder and TextEncoder don't have side effects

[23:15:47.0000] <annevk>
crissov: prolly start drafting and maybe also figure out a testing strategy

[01:54:42.0000] <annevk>
crissov: maybe email Domenic and Hixie (email addresses should be at the bottom of the HTML Standard) if you need more advice

[01:57:52.0000] <annevk>
hsivonen: do you know if Fx copies the buffer passed to TextDecoder? We should maybe stop doing that if so

[02:06:25.0000] <yoav>
annevk: no rush, but would appreciate a review on https://github.com/whatwg/fetch/pull/549 when you have time :)

[02:06:50.0000] <annevk>
yoav: eta 4/5 weeks from now

[02:29:58.0000] <jochen__>
annevk: how would you feel about including firefox's concept of origin attributes in the HTML spec?

[02:30:25.0000] <jochen__>
annevk: as a generic point where other specs that want to modify SOP can hook in (such as suborigins or isolate-me)?

[03:42:23.0000] <annevk>
jochen__: not sure, if it makes sense architecturally to do it that way

[04:04:36.0000] <jochen__>
mind elaborating?

[04:20:53.0000] <annevk>
jochen__: it's not immediately clear to me origin attributes provide the right boundary for both

[04:23:52.0000] <annevk>
jochen__: I'd rather abstract after we figure out all the requirements

[04:24:32.0000] <jochen__>
well, clearly we'll never figure out all the requirements :)

[04:24:43.0000] <annevk>
jochen__: I'd also rather avoid a comparison like that in case there need to be differences

[04:24:51.0000] <jochen__>
so how do we go about figuring out a sufficient set of requirements

[04:25:48.0000] <annevk>
jochen__: I think by going through all the places that talk about origins and working through the implications

[04:26:07.0000] <annevk>
jochen__: no easy shortcuts

[04:26:25.0000] <jochen__>
that's basically the motivation for using origin attributes

[04:26:29.0000] <jochen__>
because they already did that

[04:28:03.0000] <annevk>
But origin attributes affect permissions

[04:28:20.0000] <annevk>
So not really the same

[04:28:51.0000] <annevk>
And they are not standardized, so I'm not sure what using them means

[04:29:12.0000] <annevk>
Either way we need to update all the standards

[05:29:42.0000] <zcorpan>
Domenic: annevk: Infra says "An ASCII whitespace is...", should that be s/An // ?

[05:36:07.0000] <ondras>
is there some spec and/or browser agreement for progressive jpegs vs. the "load" event?

[06:41:18.0000] <zcorpan>
MikeSmith: https://checker.html5.org/ gives me a 502

[06:43:45.0000] <zcorpan>
ondras: see "If the resource type and data corresponds to a supported image format, as described below" in html

[06:46:50.0000] <ondras>
zcorpan: thanks

[06:49:55.0000] <ondras>
zcorpan: so apparently there is no way to detect the "the first lower-quality representation is available/visible" part of fetching the resource

[06:50:44.0000] <zcorpan>
ondras: correct

[06:51:21.0000] <zcorpan>
ondras: we could add progress events

[06:52:16.0000] <ondras>
no problem

[06:52:23.0000] <ondras>
I just wanted to understand the status quo.

[06:53:11.0000] <zcorpan>
it's a bit weird when there are 2 ongoing requests, but there's an idea to expose that in some way also

[06:54:36.0000] <zcorpan>
also see https://github.com/whatwg/html/pull/2332

[06:54:39.0000] <MikeSmith>
zcorpan: thanks for the heads-up, https://checker.html5.org/ is back now

[06:55:04.0000] <zcorpan>
MikeSmith: 👌

[08:55:46.0000] <zcorpan>
yoav: is the issue that as=fetch doesn't work yet, or would stop working with the change to ignore as=""?

[08:56:02.0000] <zcorpan>
(re blink-dev)

[09:12:18.0000] <yoav>
zcorpan: it doesn't work yet

[09:13:25.0000] <yoav>
the change would make it work instead of `as=""`

[09:58:00.0000] <zcorpan>
yoav: so maybe I'm still missing something. Why is the recommended replacement XHR/fetch(), rather than <link rel=preload as=fetch>?

[10:10:33.0000] <yoav>
zcorpan: because I totally missed it? :D

[10:10:49.0000] <yoav>
you're right, as=fetch is the answer

[10:11:08.0000] <zcorpan>
yoav: or I suppose the recommended replacement could be something like <link rel=preload as=fetch href=foo onerror="this.as = ''"> to make it work for both new and legacy

[10:12:26.0000] <zcorpan>
(or two <link>s if one doesn't want to rely on script at all)

[10:12:31.0000] <yoav>
yup, even though I'm not sure legacy is a big issue (but I'm sure you have more data than me on auto-updating rates)

[10:15:09.0000] <zcorpan>
yoav: I don't think it's a big issue, but, this would void the concern raised I believe

[10:15:36.0000] <yoav>
cool.

[10:16:32.0000] <yoav>
want to comment on the thread or should I? (while linking here and attributing you with the "new & legacy" solution)

[10:17:10.0000] <zcorpan>
please go ahead, I need to leave to the gym for a bit

[10:17:20.0000] <zcorpan>
no credit necessary ^_^

[11:20:01.0000] <Domenic>
crissov: very exciting! Yeah, to second annevk, an initial draft and a testing strategy sounds like the right way to go. If it's shaping up into something that looks like a spec we can easily move it to WHATWG. Happy to help with the logistics of creating a spec document (using Bikeshed etc.)

[11:22:45.0000] <gsnedders>
Domenic: what's that in response to?

[11:22:59.0000] <Domenic>
15:55:52 <crissov> Hi everyone! I'm still considering to volunteer as an editor for a PNG or APNG Living Standard at WhatWG

[11:23:00.0000] <Domenic>
15:55:54 <crissov> https://lists.w3.org/Archives/Public/public-whatwg-archive/2016Dec/0027.html

[11:23:00.0000] <Domenic>
15:56:18 <crissov> What exactly would I need to do to move this forward?

[11:23:27.0000] <gsnedders>
Domenic: thx

[11:23:35.0000] <gsnedders>
/me failed to find it scrolling up quickly

[11:30:33.0000] <yoav>
Does a living standard make sense for things like image formats?

[11:39:33.0000] <Domenic>
For sure, image formats get bug fixes all the time

[11:40:00.0000] <Domenic>
And PNG, it sounds like, gets new features even

[11:52:04.0000] <yoav>
Domenic: I know that at least for webp, support for "webp" mean very little due to old and busted androids

[11:53:23.0000] <yoav>
I guess that a living standard does make sense, but frozen snapshots serving as versions (and codified in MIME types) are also required

[11:54:07.0000] <yoav>
to make sure the ecosystem can survive changes (as feature detection is not an option, and browsers are not the only players)

[11:54:56.0000] <yoav>
Domenic: unrelated - RE https://github.com/whatwg/html/pull/2588 do you want me to add the required "potential destination" plumbing?

[12:10:05.0000] <Domenic>
yoav: yeah, either of us can do it; today is a holiday for me, and i have a cold so not sure i'll be recovered by tomorrow, but was planning on getting to it this week some time if you don't

[12:10:34.0000] <yoav>
ok, sounds good

[12:46:46.0000] <zcorpan>
yoav: for future reference, hit "Update" in the logs to get a date in the URL other than "today" :-)

[12:47:05.0000] <yoav>
oops!


2017-05-30
[19:58:18.0000] <weinig>
Domenic: question for you, would you expect window.EventListener to exist given the definition of EventListener https://dom.spec.whatwg.org/#callbackdef-eventlistener and https://heycam.github.io/webidl/#interface-object ?

[19:58:42.0000] <weinig>
Domenic: Firefox and Safari don'

[19:58:51.0000] <weinig>
don’t seem to have window.EventListener

[19:59:46.0000] <weinig>
Domenic: and I can’t figure out a great reason for it to exist, given that it doesn’t have any constants, like say NodeFilter (https://dom.spec.whatwg.org/#interface-nodefilter)

[20:47:05.0000] <Domenic>
weinig: no, a callback interface is not an interface

[20:47:34.0000] <Domenic>
Or, maybe that wasn't the intended distinction, but "The interface object for a given non-callback interface I" makes pretty clear.

[01:26:12.0000] <foolip>
annevk: are you OOO for a while? would like to get https://github.com/whatwg/fullscreen/pull/90 merged

[04:28:41.0000] <mkwst>
foolip: I think he said above that he's mostly on vacation through July.

[06:32:11.0000] <tobie>
So I'm struggling quite a bit with focus. Trying to stop sensors from running when a browsing context looses focus. Is there a way to spec that?

[06:33:08.0000] <tobie>
More specifically when a top-level browsing context looses focus.

[06:33:37.0000] <tobie>
I'm not even looking for something I could hook on as I was the last time I mentioned this here.

[06:34:24.0000] <tobie>
Just normative language to say: "when focus is on another top-level browsing context, stop the sensors."

[07:46:02.0000] <tobie>
Answering my own question for the sake of others: https://html.spec.whatwg.org/#has-focus-steps

[08:03:50.0000] <smaug>
does anyone know if it is possibly to disable support for custom elements in Chrome?

[08:59:22.0000] <tobie>
https://www.irccloud.com/pastebin/HnC4oguM/

[08:59:30.0000] <tobie>
^ 1, 2, or 3?

[09:38:31.0000] <GPHemsley>
so, uh... https://wiki.whatwg.org/wiki/Specs/style vs. https://wiki.whatwg.org/wiki/Style vs. https://infra.spec.whatwg.org/

[10:40:20.0000] <TabAtkins>
tobie: #2 for simple things like that; #1 if the clause is more complicated and explicitly invoking an if/then/else structure helps with comprehensibility.

[10:40:29.0000] <TabAtkins>
Never ever #3, imo.

[10:50:44.0000] <jyasskin>
tobie: I think the "has focus steps" don't do what we want: what's "the" top-level browsing context? I think every tab has one, even non-focused tabs, and tabs in minimized windows.

[10:51:27.0000] <tobie>
TabAtkins: thanks

[10:52:03.0000] <jyasskin>
+1 for Tab's ", return" preference.

[10:52:47.0000] <TabAtkins>
Always make your grammar as simple as you can, but no simpler. ^_^

[10:53:59.0000] <jyasskin>
"Check if |foo|. If |foo| was true, continue executing the following steps. Otherwise, return and do not continue executing the following steps."

[10:54:28.0000] <TabAtkins>
Perfect.

[10:56:30.0000] <TabAtkins>
fantasai and I go to pretty extensive lengths to make sure we're using grammar well and simply; in particular, we focus heavily on using parallel structure to help highlight similarities between branches of an algorithm, so the differences stand out more strongly.

[10:59:29.0000] <tobie>
jyasskin: not sure what you mean re has focus steps. Why isn't it a right fit?

[11:02:14.0000] <tobie>
jyasskin: oh shoot. How did I miss that? How is this algorithm even correct? Arg!!!

[11:03:34.0000] <jyasskin>
tobie: It *might* be correct for the ways it's used, but yeah, it's dubious.

[11:04:00.0000] <tobie>
So it's called from document.hasFocus() and that works as expected

[11:04:24.0000] <tobie>
Try running setTimeout(function() { console.log(document.hasFocus()) }, 5000) in your console

[11:04:55.0000] <tobie>
Both while keeping focus on your console and on the main browsing context.

[11:05:04.0000] <tobie>
jyasskin:

[11:05:07.0000] <tobie>
^

[11:06:35.0000] <tobie>
It should probably read: Let candidate be the Document of the *current* top-level browsing context.

[11:06:52.0000] <tobie>
Or something like that.

[11:09:20.0000] <jyasskin>
Yep, so the spec just doesn't match implementations? I think there should be some notion of a focused top-level browsing context. There might not be any, when a non-browser application is focused. I prefer "focused" instead of "current" because we could have more notions of "current".

[11:37:17.0000] <tobie>
jyasskin: no, I think the spec lacks clarity: if you read step 1 as: Let candidate be the Document of the CURRENTLY FOCUSED top-level browsing context, then in step 2, candidate is NOT target, and thus you end up at the last line: Otherwise, return false and abort these steps.

[11:43:15.0000] <jyasskin>
It's still wrong to assume that a currently focused top-level browsing context exists. ... I think https://html.spec.whatwg.org/multipage/interaction.html#focus needs to describe the concept.

[12:23:13.0000] <Domenic>
I am recovering from a week of hosting TC39 + a weekend-plus of being sick, so if there are things I've missed that should jump to the front of the queue, let me know.

[12:30:05.0000] <annevk>
foolip: if xidorn reviewed just merge

[12:30:35.0000] <annevk>
foolip: someone else reviewing is fine too, just at least one

[13:17:02.0000] <jugglinmike>
TabAtkins: What makes something an "attribute" in terms of the HTML spec?

[13:18:27.0000] <jugglinmike>
I'm wondering if https://html.spec.whatwg.org/multipage/workers.html#dom-workerglobalscope-closing actually is an attribute, or if the markup needs to be changed to make it a "dfn" (which seems imprecise, according to the Bikeshed documentation)

[13:21:29.0000] <tobie>
jugglinmike: that looks like an internal slot to me.

[13:22:53.0000] <tobie>
jyasskin: It's still wrong to assume that a currently focused top-level browsing context exists. ... I think <-- this is related: https://github.com/whatwg/html/issues/2716.

[13:23:23.0000] <jugglinmike>
tobie: in that case, I guess it's type ought to be "dfn"

[13:23:53.0000] <tobie>
jugglinmike: that's sort of spec-specific for now.

[13:24:01.0000] <tobie>
jugglinmike: afaik

[13:25:33.0000] <tobie>
jugglinmike: TabAtkins recommended I used <dfn attribute for=[INTERFACE]>\[[SLOT_NAME]]</dfn>

[13:25:53.0000] <tobie>
jugglinmike: but you should follow the conventions in the spec you're editing

[13:27:09.0000] <tobie>
jyasskin: I think HTML doesn't have a clear concept of one focused browsing-context per user agent (though has focus steps is close) and one focused app per operating system.

[13:27:26.0000] <tobie>
jyasskin: both need fixing. Along with the hooks of when this stuff happens

[13:35:22.0000] <jyasskin>
+1

[14:40:27.0000] <TabAtkins>
Yeah, it's an internal slot, which is *typed* as an attribute, but with double-square-brackets around its name.

[14:40:53.0000] <TabAtkins>
Or it can be just be a dfn attached to the interface, in which case you just add an explicit data-dfn-type=dfn to it.

[14:41:00.0000] <TabAtkins>
Either works, match convention as tobie says.

[14:41:06.0000] <TabAtkins>
jugglinmike: ^^^

[14:50:14.0000] <jugglinmike>
thanks TabAtkins. I've submitted a patch for the latter

[14:50:40.0000] <jugglinmike>
ah, but you know that by now :P

[14:50:44.0000] <TabAtkins>
Heh, yup.

[15:24:20.0000] <tobie>
How do you all specify initial values of internal slots?

[15:24:34.0000] <tobie>
Actually set it in the constructor?

[15:25:13.0000] <tobie>
Or just have a bit of text that says: the initial value of foo is bar?

[15:25:35.0000] <tobie>
Or: "foo is bar unless specified otherwise"?

[15:25:45.0000] <TabAtkins>
I set it in the constructor.

[15:25:57.0000] <TabAtkins>
I treat internal slots exactly as attributes that just happen to only be available in spec-ese.

[15:26:04.0000] <tobie>
TabAtkins: do you queue a task to set it?

[15:26:09.0000] <TabAtkins>
No?

[15:26:15.0000] <TabAtkins>
brb

[16:04:05.0000] <tobie>
Do we have examples of specs that go remove tasks from the task queue?

[16:05:29.0000] <tobie>
Context is a new sensor reading has been received and a task has been queued to update an internal slot and fire an event…

[16:06:54.0000] <tobie>
But then the browsing context looses focus (before the task has been completed) and we want to stop transmitting readings

[16:09:41.0000] <Domenic>
Didn't we decide the idea was the task should check if it still has focus, and if not, just return early?

[16:09:48.0000] <Domenic>
tobie: ^

[16:12:06.0000] <tobie>
Domenic: Mmm. That's a good point.

[16:18:05.0000] <tobie>
Domenic: I've had a long day trying to convince people that it wasn't because the spec said to check for focus (and visibility status) before each reading that implementations weren't able to optimize this.

[16:18:24.0000] <Domenic>
Oh fun times

[16:19:10.0000] <tobie>
yeah :-/


2017-05-31
[00:19:33.0000] <tobie>
Mmm. Still confused about when to queue a task to do something vs. just doing something.

[00:20:59.0000] <tobie>
The other day, annevk wrote: "Do not update state without a task" but that doesn't really work for example for an object's state.

[00:21:49.0000] <tobie>
For example, in https://w3c.github.io/sensors/#sensor-start

[00:22:44.0000] <annevk>
tobie: it's fine to update state in response to method calls too

[00:22:50.0000] <tobie>
If you sensor.start() is called twice in the same event turn, and sensor.[[state]] is changed in a task, than the guard it's supposed to provide no longer works.

[00:23:40.0000] <tobie>
annevk: Ah!

[00:23:45.0000] <annevk>
tobie: use a task was meant for "async" changes

[00:24:04.0000] <tobie>
async as "in parallel"

[00:24:45.0000] <annevk>
tobie: yeah, or later point in time

[00:25:55.0000] <tobie>
annevk: ok, so basically the idea is to protect JS's single-threaded nature when faced with external interactions, right?

[00:26:32.0000] <annevk>
tobie: yeah, ensure obj.x === obj.x

[00:26:39.0000] <tobie>
annevk: cool

[00:27:29.0000] <tobie>
annevk: what about the "queue a task" to fire an event. I'm seeing it used in places, but there's no consistency

[00:42:20.0000] <annevk>
tobie: generally good, depends on the trigger though

[00:46:45.0000] <tobie>
annevk: well, they're either coming from such an async event

[00:47:05.0000] <tobie>
(so they're effectively already happening from within a queued task)

[00:48:13.0000] <tobie>
annevk: or from other platform hooks (e.g. asynchronously checking for the permission state in the permission API)

[00:51:01.0000] <tobie>
annevk: I guess a subsidiary question is: what if the event isn't queue and its handler throws? Will that affect the rest of my algorithm?

[01:36:38.0000] <foolip>
annevk: thanks, I'll not block on your feedback for fullscreen changes until you're back and recovered from inbox hangover then

[03:07:40.0000] <annevk>
tobie: no

[05:21:50.0000] <hsivonen>
relevant to this channel in reference to the U+FFFD discussion the other day: https://hsivonen.fi/broken-utf-8/

[05:25:05.0000] <hsivonen>
annevk: AFAICT, TextDecoder doesn't make a copy of the input. The binding layer probably copies the output. TextEncoding makes a copy of the output. The binding layer probably copies the input.

[05:25:41.0000] <hsivonen>
annevk: do you have an example of a performance-sensitive real-world use of either?

[07:48:05.0000] <yoav>
Domenic: if you're around I'd love your opinion on the best way to tackle https://github.com/whatwg/html/pull/2588#issuecomment-305017268

[07:54:08.0000] <yoav>
also, as annevk is OOO, I'd love to land https://github.com/whatwg/fetch/pull/549 before he returns, so maybe you could review?

[09:12:25.0000] <Domenic>
yoav: still catching up on backlog, will hopefully get to those today or tomorrow

[09:13:11.0000] <yoav>
ok, thanks! :)

[09:13:35.0000] <Domenic>
hsivonen: we have some internal Google person emailing us about TextEncoder/TextDecoder not being fast enough in Chrome for some large web site, let me see if they've commented anywhere publicly...

[09:14:38.0000] <Domenic>
Not a lot of detail on the actual use case, but they filed https://bugs.chromium.org/p/chromium/issues/detail?id=689753

[10:52:42.0000] <Domenic>
Edge has started implementing the Encoding API: https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6558040-support-the-encoding-api?tracking_code=b4e7100132add183f16a703b4d089525 /cc annevk

[10:56:57.0000] <Domenic>
Can anyone confirm whether or not Safari 10.1 ships it? The internet is not helpful.

[11:11:39.0000] <hsivonen>
annevk, Domenic: IIRC, in Gecko, the overhead from testing encoding_rs within TextDecoder was very large compared to testing it in a non-browser test harness without any binding layers involved

[11:21:55.0000] <annevk>
Domenic: retweeted from @encodings

[14:04:14.0000] <GPHemsley>
If url’s scheme is a special scheme and buffer is not, then return.

[14:04:15.0000] <GPHemsley>
If url’s scheme is not a special scheme and buffer is, then return.

[14:04:20.0000] <GPHemsley>
(from URL)

[14:04:34.0000] <GPHemsley>
is that checking whether buffer is a special scheme?

[14:15:03.0000] <Domenic>
GPHemsley: pretty sure yes... let's see...

[14:15:25.0000] <Domenic>
GPHemsley: yeah, pretty sure. That's not super-clear though.

[14:15:32.0000] <GPHemsley>
cool, thanks

[14:15:38.0000] <GPHemsley>
I'll file an issue

[14:19:54.0000] <GPHemsley>
https://github.com/whatwg/url/issues/315

[15:13:24.0000] <weinig>
tobie: Do you happen to know why the legacy platform object [[Set]] algorithm (https://heycam.github.io/webidl/#legacy-platform-object-set) in step 1.2 stipulates that “P is not an array index property name”

[15:14:09.0000] <weinig>
tobie: my reading of it, and I very well may be missing something here, is that means that an object with a named property getter, but no indexed property getter will not support indexed properties

[15:14:29.0000] <weinig>
e.g window.localStorage[7] = “foo”

[15:15:17.0000] <tobie>
weinig: I remember stumbling on exactly the same issue a while back

[15:15:36.0000] <tobie>
weinig: and figuring out how/why I was reading the algo wrong.

[15:15:42.0000] <weinig>
heh

[15:16:36.0000] <weinig>
tobie: does it have something to do with the “If O and Receiver are the same object” part, cause that I have not looked into yet

[15:19:02.0000] <weinig>
tobie: if you remember what you figured out, let me know ;)

[15:21:16.0000] <tobie>
weinig: I think it just means that if your interface supports both indexed and named props, then, indexed props take precedence

[15:21:50.0000] <Domenic>
Hmm... it seems to be saying if you support named properties, "1" does not count as a named property

[15:22:14.0000] <Domenic>
which is believable

[15:22:59.0000] <tobie>
Yeah that's another way of looking at it.

[15:25:01.0000] <tobie>
Basically that if you support both, than [[Set]]ing "1" will invoke the indexed prop setter and not both the indexed prop and the named prop setter as it would if the "P is not an array index property name" was missing from step 1.2

[15:25:27.0000] <tobie>
*then

[15:25:37.0000] <tobie>
(sorry for the horrendous grammar)

[15:27:52.0000] <weinig>
I think that means localStorage, as currently spec’d, doesn’t support [[Set]]ing “1”, but browsers seem to allow that

[15:29:04.0000] <weinig>
e.g window.localStorage[7] = “foo”

[15:29:27.0000] <Domenic>
Oooh OK, that's not great

[15:30:18.0000] <weinig>
https://html.spec.whatwg.org/multipage/webstorage.html#the-storage-interface (for reference)

[15:30:19.0000] <Domenic>
weinig: can you file a bug so we can get bz to check that we're not missing something? Otherwise yeah we should fix this.

[15:30:28.0000] <weinig>
yup

[15:30:52.0000] <Domenic>
Wow who knew... localStorage.key(2)

[15:31:16.0000] <Domenic>
What a weird interface, it's clearly trying to be indexed, but not quite

[15:36:41.0000] <tobie>
Domenic: mmm. Do we just want to change 1.2 to (P is not an array index property name or O does not supports indexed properties)?

[15:37:09.0000] <tobie>
Or am I misunderstanding the issue?

[15:37:27.0000] <Domenic>
tobie: I think we just want to remove "P is not an array index property name" from 1.2

[15:40:23.0000] <weinig>
for the record, that is what makes sense to me too

[15:40:52.0000] <weinig>
and it’s closer to what [[DefineOwnProperty]] does

[15:41:13.0000] <weinig>
though [[DefineOwnProperty]] also has a unforgeables check

[15:41:14.0000] <KiChjang>
omg, i did not know that the HTML spec had time travel laid out for us

[15:41:38.0000] <weinig>
and differs based on [OverrideBuiltins]

[15:42:24.0000] <weinig>
I feel like I’m missing something in this [[set]] business

[15:42:53.0000] <tobie>
Domenic: well, we'd set the prop twice in those cases.

[15:43:14.0000] <Domenic>
tobie: Nah, `return true` in 1.1.2, right?

[15:44:07.0000] <weinig>
While I have your attention, should window.EventListener exist as per (https://dom.spec.whatwg.org/#callbackdef-eventlistener)

[15:44:31.0000] <tobie>
Domenic: you're right.

[15:45:01.0000] <tobie>
So yeah, that seems redundant and broken.

[15:45:08.0000] <Domenic>
weinig: right, I answered that after you left. No, per https://heycam.github.io/webidl/#interface-object "The interface object for a given ******non-callback***** interface I with..."

[15:45:35.0000] <Domenic>
tobie: I mean, the current spec seems somewhat reasonable, e.g. if could be an attempt to allow adding indexed setters later without breaking code. But it sounds like it's not what people implemented.

[15:45:39.0000] <Domenic>
Unless we are missing something

[15:46:16.0000] <tobie>
Oh, hadn't thought of this future proof option.

[15:46:34.0000] <weinig>
Domenic: then what’s the deal with https://dom.spec.whatwg.org/#interface-nodefilter

[15:47:09.0000] <Domenic>
What is the deal indeed... I used to know this...

[15:47:21.0000] <tobie>
weinig: it's the only one of the lot with constants, no?

[15:47:25.0000] <Domenic>
Ah yes: https://heycam.github.io/webidl/#legacy-callback-interface-object

[15:47:39.0000] <Domenic>
"and on which constants are defined"

[15:47:51.0000] <weinig>
“ on which constants are defined, a corresponding property must exist on the ECMAScript environment’s global object"

[15:47:53.0000] <weinig>
!!

[15:47:55.0000] <weinig>
boom, thanks

[15:48:04.0000] <weinig>
mystery solved :)

[15:48:51.0000] <weinig>
back to [[Set]], I’m betting the way this works, it expects to go into OrdinarySet which will end up calling [[DefineOwnProperty]]

[15:48:55.0000] <weinig>
but I don’t know how

[15:49:23.0000] <Domenic>
Oh, I see...

[15:50:18.0000] <weinig>
I do like that it says “steps 3-11 of the default [[Set]] internal method”, but the default [[Set]] internal method only has 1 step :)

[15:50:20.0000] <Domenic>
weinig: Oh, I think that's how it works

[15:50:28.0000] <Domenic>
lol yes that is error prone

[15:50:35.0000] <Domenic>
we should refactor ES to fix that somehow

[15:51:11.0000] <Domenic>
But yes, I think [[Set]] will fall through to calling [[DefineOwnProperty]] which will go to https://heycam.github.io/webidl/#legacy-platform-object-defineownproperty step 2.2.2

[15:52:11.0000] <Domenic>
So why do these shortcut steps exist in [[Set]] at all? I guess I could think up edge cases where it would matter, bleh.

[15:52:17.0000] <weinig>
Domenic: I’m un clear on what step 1 is for then, but I don’t really know what the Receiver is, so I will go bother some JSC folks into telling me instead of looking it up

[15:52:22.0000] <weinig>
Domenic: exactly

[15:52:38.0000] <weinig>
anyway, thanks!

[15:52:41.0000] <Domenic>
So O and the receiver will not be the same when a proxy is involved

[15:53:30.0000] <weinig>
Domenic: ah

[15:53:31.0000] <tobie>
weinig: can you file issues for both these things (weird [[Set]] behavior for "1", and algo referring now-removed steps) so they don't fall through the cracks?

[15:53:45.0000] <weinig>
tobie: sure, I did the first already

[15:54:06.0000] <tobie>
weinig: thanks!

[15:54:41.0000] <tobie>
/me is hitting the sack. It's late here.

[15:55:10.0000] <Domenic>
tobie: weinig: I think the removed-steps one is https://github.com/heycam/webidl/issues/201

[15:55:32.0000] <weinig>
Domenic: indeed

[15:55:47.0000] <weinig>
/me enjoys that tobie filed it

[15:55:58.0000] <weinig>
I’m off too

[15:56:55.0000] <tobie>
Arg!!

[15:59:43.0000] <tobie>
The funniest part is there was this little voice at the back of my head saying: "this sounds vaguely familiar, we must have done it already in another part of the spec. Great I'll just need to look it up to see how we fixed this. This is going to be easy."

