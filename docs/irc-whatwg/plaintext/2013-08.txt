2013-08-01
[17:16:33.0000] <gsnedders>
Hixie: okay, tell me when done then I'll touch html5lib

[18:28:36.0000] <t3oss>
ambiguous ampersand is called string for writing unicode characters with their unicode codes?

[18:28:45.0000] <t3oss>
from "&#x003c;   -- "&#x" and ";" is called ambiguous ampersand?

[18:35:58.0000] <Hixie>
gsnedders: i don't know what the eta on that would be

[19:32:02.0000] <gsnedders>
Hixie: I'm finally hacking on the stuff I've wanted to work on for ages. Try and learn something over the summer. So, well, not too fussed about html5lib. It mostly works.

[01:44:22.0000] <Ms2ger>
"We accounted for some tests around algorithms but believe that many algorithm steps, especially intermediate steps, do not require separate tests."

[01:45:28.0000] <annevk>
URL?

[01:45:55.0000] <Ms2ger>
http://www.w3.org/mid/E557E34E53296846B3E3EDF9A8640B1923664DCC⊙Ecc

[01:55:42.0000] <Ms2ger>
/me wonders where darobin is nowadays

[02:12:10.0000] <Ms2ger>
annevk, and happy birthday and stuff

[02:12:48.0000] <t3oss>
I am making web site about web design, it will have reference to html css javascript php mysql nginx apache etc. Before I put it online I think it will be very nice if someone of the officials here have little time to check it fast, check articles to see if they are 'ok', because I want to give best information to the public without any errors

[02:13:24.0000] <t3oss>
all the articles are made from html specification

[02:37:46.0000] <ondras>
question:

[02:37:49.0000] <ondras>
iframe.contentDocument

[02:37:51.0000] <SimonSapin>
t3oss: documenting all of this (and maintaining it as new stuff comes up) seems like a lot of duplicated work :(

[02:37:58.0000] <ondras>
is there any spec stating *when* is this available?

[02:38:07.0000] <ondras>
e.g. "immediately after setting src"

[02:38:12.0000] <ondras>
or "after onload"

[02:38:13.0000] <ondras>
or so?

[02:39:56.0000] <t3oss>
I think there are some things lacking on the WEB right now and I want to make them but I in order to do so I must have full control so making my own website is only way to go

[02:41:34.0000] <t3oss>
I believe new web devs will find hard to begin learning directly from HTML spec, even in the spec it says they should read some books or tutorials so there is need to guide them through the spec and describe some intermediate things they might lack that can confuse them

[02:49:18.0000] <wilhelm>
t3oss: http://www.webplatform.org/

[02:49:32.0000] <jgraham>
Argh cross posting

[02:49:59.0000] <jgraham>
Now I don't know what to do

[02:50:15.0000] <jgraham>
annevk: also happy birthday if it is indeed your birthday

[02:54:41.0000] <t3oss>
Does HTML allow text to be written outside of element directly in the body element?

[02:57:35.0000] <SimonSapin>
t3oss: of course documentation is needed. But it’s a lot of work and thus takes a lot of people. Trying to do it all yourself will just fail. Why do you want full control over this?

[02:58:13.0000] <t3oss>
also character reference is &lt; and &#x003c; is code point?

[02:58:44.0000] <t3oss>
SimonSapin, because I disagree with people most of the time on some things :))

[03:00:56.0000] <SimonSapin>
yeah, what could go wrong

[03:07:35.0000] <t3oss>
also can I write all Unicode characters on the html or just these that are written here? http://www.w3.org/html/wg/drafts/html/master/syntax.html#named-character-references

[04:19:11.0000] <annevk>
jgornick: ta

[04:19:26.0000] <annevk>
oops, jgraham / Ms2ger ta

[04:19:37.0000] <annevk>
didn't realize we had a new jg

[04:25:22.0000] <annevk>
odinho: haven't really planned visiting Oslo yet

[04:25:28.0000] <annevk>
odinho: I should soonish I guess

[04:36:19.0000] <odinho>
annevk: Yeah man <3

[06:22:55.0000] <annevk>
transient registered observers, I hate you

[06:51:27.0000] <annevk>
https://github.com/whatwg/dom/commit/df0f8f510445533697840087262e0724d601eb08 ...

[06:54:05.0000] <t3oss>
what is going on? http://www.w3.org/html/wg/drafts/html/master/

[06:54:07.0000] <t3oss>
I can't open links

[06:54:52.0000] <annevk>
t3oss: use http://whatwg.org/C

[06:57:33.0000] <t3oss>
because web dev edition doesn't have info on it

[06:57:45.0000] <annevk>
you're confused

[06:58:23.0000] <annevk>
I didn't point you to http://developers.whatwg.org/

[08:33:10.0000] <annevk>
Hixie: there's part of a thread in es-discuss addressed to ianh ("Realm, schmealm!"); basically others finding out about what bz has been raising for a bit and bz explaining it (including the bit where it will take other browsers to adopt Gecko's model for the specification to change the security model with regards to multiple globals and different origins)

[10:13:49.0000] <GPHemsley>
Hixie: Is there an error in the presentation hints for quotes when it comes to en/en-AU/en-GB? Shouldn't some of those be 'test "test" test' ?

[10:24:01.0000] <TabAtkins>
GPHemsley: Why would they be?  (I think you're asserting that the order of double vs single should be reversed?)

[10:24:42.0000] <GPHemsley>
TabAtkins: It is my understanding that certain varieties of English use the inverted order (double inside single) instead of the listed order.

[10:24:55.0000] <GPHemsley>
en-US uses single inside double

[10:25:05.0000] <GPHemsley>
which is not listed

[10:25:16.0000] <TabAtkins>
Ah, I didn't realize that was even a thing.

[10:25:30.0000] <TabAtkins>
Arent' dialog conventions the same across them, though?

[10:25:33.0000] <GPHemsley>
en-AU and en-GB are listed even though they don't differ from en (as written)

[10:26:18.0000] <GPHemsley>
Amy said, "Bob said, 'I speak English.'"

[10:26:24.0000] <GPHemsley>
en-US ^

[10:26:29.0000] <TabAtkins>
Right.

[10:26:49.0000] <GPHemsley>
en-GB (I think): Amy said, 'Bob said, "I speak English."'

[10:27:14.0000] <TabAtkins>
Huh.  Well, I don't see that in books I read from Britain, unless they've been converted for an american audience.

[10:27:19.0000] <zewt>
「quotes suck」

[10:28:16.0000] <jgraham>
GPHemsley: Really?

[10:28:29.0000] <jgraham>
[citation-needed] on eb-GB

[10:28:31.0000] <GPHemsley>
"Double quotes are preferred in the United States, and also tend to be preferred in Canada, Australia and New Zealand. Single quotes are more usual in the United Kingdom and South Africa, though double quotes are also common there.["

[10:28:37.0000] <GPHemsley>
https://en.wikipedia.org/wiki/Quotation_mark

[10:28:55.0000] <GPHemsley>
The Penguin Guide to Punctuation, R. L. Trask, p. 94.

[10:28:59.0000] <GPHemsley>
;)

[10:29:09.0000] <jgraham>
Yeah, that doesn't match my experience

[10:29:17.0000] <jgraham>
Or I have never noticed

[10:29:27.0000] <zewt>
<- user styles away superscripts on wikipedia (was: re: hard to read)

[10:30:09.0000] <GPHemsley>
either way, as it stands, the specific rules for en-AU and en-GB are useless, because they duplicate en and there aren't any other en-* styles

[10:31:01.0000] <GPHemsley>
http://www.whatwg.org/specs/web-apps/current-work/#quotes

[10:31:12.0000] <GPHemsley>
:root:lang(en),       :not(:lang(en)) > :lang(en)             { quotes: '\201c' '\201d' '\2018' '\2019' } /* “ ” ‘ ’ */

[10:31:13.0000] <GPHemsley>
:root:lang(en-AU),    :not(:lang(en-AU)) > :lang(en-AU)       { quotes: '\201c' '\201d' '\2018' '\2019' } /* “ ” ‘ ’ */

[10:31:13.0000] <GPHemsley>
:root:lang(en-GB),    :not(:lang(en-GB)) > :lang(en-GB)       { quotes: '\201c' '\201d' '\2018' '\2019' } /* “ ” ‘ ’ */

[10:31:23.0000] <jgraham>
"Use double quotes at the start and end of a quoted section, with single quotes for quoted words within that section." - Guardian style guide

[10:31:31.0000] <TabAtkins>
Right, given their current definition, we can just drop the two specific lines.

[10:32:07.0000] <jgraham>
http://www.theguardian.com/styleguide/q

[10:32:56.0000] <GPHemsley>
Yeah, perhaps the inverted order is on its way out

[10:33:06.0000] <GPHemsley>
someone should check on South Africa

[10:33:20.0000] <GPHemsley>
(en-ZA)

[10:36:52.0000] <jgraham>
"quotation marks: use double quotes except in heads, captions or crossheads. Quotes within quotes are single; quotes within quotes within quotes are double"

[10:37:05.0000] <jgraham>
From The Telegraph

[10:38:57.0000] <Hixie>
GPHemsley: i autogenerate those parts of the spec from the Unicode CLDR

[10:39:06.0000] <Hixie>
should be at most a few days behind

[10:39:23.0000] <GPHemsley>
then perhaps someone should ping the CLDR

[10:40:50.0000] <jgraham>
And now I wonder why "order of magnitude" is a banned term in The Telegraph

[10:53:41.0000] <TabAtkins>
Maybe it's unclear what it means? It does have different multiplies in different fields.

[10:54:06.0000] <TabAtkins>
*2 in comp sci, *10 in physics, often roughly *1000 in common parlance

[11:14:14.0000] <Hixie>
rafaelw: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=22400

[11:55:32.0000] <aklein>
Hixie: pong (on behalf of rafaelw), see my last comment

[11:55:57.0000] <aklein>
Hixie: it logs 1 for me in Chrome and 2 in Firefox

[11:56:56.0000] <aklein>
(the presence of the <template> has no effect on Chrome's output)

[12:34:16.0000] <Hixie>
aklein: i see the same as you

[12:41:27.0000] <aklein>
Hixie: so which spec are you saying chrome doesn't follow? the spec as-is, or the spec with but 22400 fixed?

[12:41:35.0000] <Hixie>
the spec as is

[12:42:08.0000] <Hixie>
chrome acts as if the bug was fixed. firefox acts per the spec now.

[12:43:03.0000] <aklein>
ah, yes: we had to land a fix for this bug to avoid crashes

[12:43:35.0000] <Hixie>
crashes?

[12:43:36.0000] <Hixie>
weird

[12:43:40.0000] <Hixie>
why would this cause crashes?

[12:45:05.0000] <Hixie>
heycam|away: ok, incumbent stuff is in

[12:46:44.0000] <aklein>
Hixie: the association between the <form> and the <input> would under some circumstances (in Blink and WebKit, anyway) live longer than the <input> itself, so we'd end up with a use-after-free

[12:47:00.0000] <Hixie>
interesting

[12:47:10.0000] <Hixie>
can't you get those same problems without template?

[12:47:45.0000] <aklein>
I am indeed curious whether the test case you just sent might cause crashes after a GC :)

[12:49:01.0000] <aklein>
I'm sure it's quite possible to fix those crashes in some other way, but given that they needed to be fixed anyway, it didn't make much semantic sense to us for forms to be associated with elements inside templates

[12:49:23.0000] <aklein>
if you and the Firefox folks feel differently we'd be open to changing back

[12:49:36.0000] <aklein>
(and finding another way to fix the crashes)

[12:51:49.0000] <Hixie>
oh i think the bug is valid

[12:51:56.0000] <Hixie>
but we should fix the spec, not just the implementation :-P

[12:52:13.0000] <Hixie>
anyway, if the bug should be fixed, please reassign it to me

[12:52:20.0000] <Hixie>
right now it's in rafaelw's bucket

[12:53:59.0000] <aklein>
Hixie: ah, ok, I don't think rafaelw knew you were waiting for him. reassigned

[12:54:06.0000] <Hixie>
k, thanks

[12:55:05.0000] <aklein>
Hixie: fyi, your test case crashes chrome

[12:55:12.0000] <Hixie>
hah

[12:56:36.0000] <Ms2ger>
aklein, I guess that's better than reading uninitialized memory in IE

[12:56:39.0000] <Ms2ger>
/me did that once

[12:58:54.0000] <aklein>
Ms2ger: it might be exactly as bad, luckily Chrome has some hardening against trying to wrap deleted memory in JS objects

[12:59:09.0000] <aklein>
and now I go off to fix Blink

[12:59:09.0000] <Ms2ger>
Heh

[13:06:56.0000] <Hixie>
/me wonders how exactly to block this

[13:07:51.0000] <Hixie>
hm, there's a template stack, isn't there

[13:08:00.0000] <Hixie>
maybe i just don't do the form thing if we're in a template

[13:12:10.0000] <aklein>
Hixie: for parser-associated form controls like the one in your test case, will it forever be associated with the form?

[13:12:43.0000] <Hixie>
aklein: until the "reset the form owner" algorithm is run

[13:12:50.0000] <Hixie>
which could happen whenever or never

[13:14:59.0000] <aklein>
and in this case, where we never touch the <input> again, it's supposed to stick around forever

[13:15:00.0000] <aklein>
hmm

[13:16:00.0000] <aklein>
it seems WebKit and Blink don't follow this very well

[13:17:02.0000] <jgraham>
Hmm, I wonder if we ever wrote tests for this stuff

[13:17:20.0000] <jgraham>
I remember going through it with bratell for Presto

[13:17:50.0000] <Hixie>
aklein: you "just" need a strong reference from the <form> to all its elements, right?

[13:19:35.0000] <jgraham>
Not with <template>, obviously

[13:19:59.0000] <jgraham>
(that was a reply to myself)

[13:22:35.0000] <t3oss>
I am very confused, I have one h1 and more h2 elements and p elements in one section, h2 element has bigger font size then h1 why?

[13:29:31.0000] <aklein>
Hixie: indeed, but I'm not at all sure that wouldn't create leaks in the Blink implementation. need to go talk to some more folks who know this code better than I.

[13:31:31.0000] <Ms2ger>
Because h1s look at ancestor sections for their font size and h2 doesn't

[13:35:39.0000] <t3oss>
why

[13:36:14.0000] <Hixie>
basically there's two models for headers in the spec

[13:36:17.0000] <t3oss>
I have this outline <section><h1></h1><h2></h2><p></p><h2></h2><p></p></section>

[13:36:28.0000] <Hixie>
either you use <h1>-<h6> throughout, or you use <h1> only.

[13:36:39.0000] <Hixie>
if you mix these (which you're allowed to do), you have to manually style them.

[13:37:00.0000] <t3oss>
h1 got from any(article,aside,nav,section) h1 { font-size: 1.17em; and h2 from: h2 { display: block;  font-size: 1.5em;

[13:37:32.0000] <t3oss>
Hixie, so you say I must use all h1-h6 headings not just h1 and h2?

[13:37:55.0000] <Hixie>
well, you have to pick one of these three, basically:

[13:38:22.0000] <Hixie>
1. use only <h1>, as in: <section> <h1>...</h1> <section> <h1>...</h1> <p></p> </section> <section> <h1>...</h1> <p></p> </section> </section>

[13:39:15.0000] <Hixie>
2. use <h1>-<h6>, as in: <section> <h2>...</h2> <h3>...</h3> <p></p> <h3>...</h3> <p>...</p> </section> (the <h1> would be the page header, not shown here)

[13:39:29.0000] <Hixie>
3. do what you're doing now, but manually style all the <h1>-<h6> headers to be as you wish them to be

[13:40:10.0000] <t3oss>
Hixie I read on the web I should use only 1 h1 element on a web page

[13:40:21.0000] <Hixie>
that is no longer true with HTML today

[13:40:50.0000] <t3oss>
aham

[13:40:51.0000] <Hixie>
it's true if you use model 2 above, but in that case the <h1> would be outside the <Section>, since it would be the title of the <Body>.

[13:40:55.0000] <t3oss>
ok I think I got it

[13:41:33.0000] <t3oss>
so valid would be <section><h1></h1><section><h2></h2><p></p></section></section> ? I guess :)

[13:41:49.0000] <TabAtkins>
Technically valid, but weird.  Don't mix your models like that.

[13:42:07.0000] <TabAtkins>
Either use <section> and just <h1>, or use all the <hn> tags and just let the sections be implicit.

[13:42:12.0000] <t3oss>
Hixie, in 2nd case h1 must be directly in the body? not nested in any element like section or mine example is valid above?

[13:42:46.0000] <t3oss>
but where to put the h1 element? directly in the body? why my outline is weird?

[13:43:18.0000] <Hixie>
<section> is a subsection

[13:43:23.0000] <Hixie>
so it has a parent section

[13:43:25.0000] <Hixie>
typically the <body>

[13:43:30.0000] <Hixie>
that presumably has a heading, right?

[13:43:42.0000] <Hixie>
so if you're using h1-h6, the h1 would be the heading of that master section, the page, the <body>

[13:44:14.0000] <t3oss>
ok so h1 I guess goes directly in body not nested if I use it

[13:45:05.0000] <t3oss>
ok I got it finally thanks Hixie  and TabAtkins  Ms2ger  all thanks a lot

[13:45:27.0000] <Ms2ger>
Np

[13:46:38.0000] <t3oss>
one more question and I am off can I use second model Hixie told but avoid using h1 element is that valid?

[13:47:14.0000] <Ms2ger>
Hixie, did you make it valid?

[13:47:31.0000] <Hixie>
what?

[13:47:35.0000] <t3oss>
so <body><sectioon><h2></h2><p></p><h3></h3><p></p><h2></h2><p></p></section></body>

[13:47:57.0000] <Hixie>
with two <h2>s?

[13:48:04.0000] <t3oss>
is this valid if I don't use h1 just h2 and h3

[13:48:09.0000] <t3oss>
yes Hixie

[13:48:12.0000] <Hixie>
it's not invalid, i mean, the spec defines that that means, but it's probably not what you want

[13:48:42.0000] <t3oss>
hm

[13:51:13.0000] <Hixie>
it would mean the same as: <body><section><h1></h1><p></p><section><h1></h1><p></p></section></section><section><h1></h1><p></p></section></body>

[13:51:29.0000] <Hixie>
(notice that that's two top-level sections)

[13:51:45.0000] <Hixie>
(well, subsections of the body)

[13:54:15.0000] <t3oss>
ok Hixie thanks

[13:54:33.0000] <t3oss>
for clarifying things that bothered me for some time now

[13:55:50.0000] <Hixie>
gsnedders: i am no longer aware of open non-editorial parser issues

[14:07:42.0000] <Hixie>
TabAtkins: ping

[14:07:47.0000] <TabAtkins>
pong

[14:07:56.0000] <Hixie>
TabAtkins: you made any progress on a scoped CSS spec?

[14:08:12.0000] <Hixie>
i've got an e-mail here from you saying you were looking at that earlier this year

[14:08:29.0000] <Hixie>
/me would love to off-load the scoped="" processing model

[14:08:31.0000] <TabAtkins>
The Cascade and Selectors spec together define how scoped styles work.

[14:08:57.0000] <Hixie>
does it define @global or whatever replaced that, as well?

[14:08:58.0000] <TabAtkins>
There's no in-CSS definition of how global-name-defining at-rules work in a scoped context yet, though.

[14:09:07.0000] <TabAtkins>
No, that's waiting for me to write something.

[14:09:18.0000] <Hixie>
k

[14:09:32.0000] <Hixie>
but i can remove the following?:

[14:09:34.0000] <Hixie>
# For scoped CSS resources, the effect of other @-rules must be scoped to either the scoped sheet and its subresources or to the subtree rooted at the style element's parent (if any), even if the @-rule in question would ordinarily apply to all style sheets that affect the Document, or to all nodes in the Document. Any '@page' rules in scoped CSS resources must be ignored.

[14:09:54.0000] <Hixie>
(and defer to your spec?)

[14:10:44.0000] <Hixie>
(mmm, "cascade" is nice to type on a qwerty keyboard)

[14:16:42.0000] <Hixie>
TabAtkins: what do i have to say to make @import scope properly?

[14:17:02.0000] <TabAtkins>
Sorry, I'd flipped away. ^^_

[14:17:04.0000] <Hixie>
looks like the only hook you provide is for declarations

[14:17:16.0000] <Hixie>
currently i am replacing the above with:

[14:17:16.0000] <Hixie>
  <p>For the purposes of the CSS Cascade model, any declaration in a <code>style</code> element that

[14:17:20.0000] <Hixie>
  has a <code title="attr-style-scoped">scoped</code> attribute and has a parent node that is an

[14:17:23.0000] <Hixie>
  element is <i>scoped</i>, with the <i>scoping element</i> being the <code>style</code> element's

[14:17:26.0000] <Hixie>
  parent element.</p>

[14:17:28.0000] <Hixie>
but that doesn't handle @-rules at all, including @import

[14:18:55.0000] <TabAtkins>
Right, in the absence of the actual Scoping spec, we're just solving the specific things needed for Cascade (scoped declarations interaction with the cascade) and Selectors.

[14:19:43.0000] <TabAtkins>
Ah, hm.  You know, we don't actually define what @import does, at all, in Cascade.

[14:20:11.0000] <TabAtkins>
Let me define that real quick, so that at least @import will be auto-handled by the fact that the stylesheet is scoped.

[14:20:14.0000] <Hixie>
hehe

[14:25:28.0000] <GPHemsley>
/me needs to learn how to use a mail client application

[14:25:37.0000] <Hixie>
yeah, me too

[14:25:43.0000] <Hixie>
i've screwed up three posts in a row today

[14:25:46.0000] <Hixie>
to es-discuss

[14:30:40.0000] <TabAtkins>
Hixie: Okay, the actual effect of @import is now defined, so you don't have to mention anything about @import and scoping.

[14:30:49.0000] <Hixie>
what do i have to say?

[14:30:51.0000] <TabAtkins>
But what other at-rules do inside of scoped rules is still not defined, until I write the spec.

[14:30:55.0000] <TabAtkins>
Nothing.

[14:31:14.0000] <Hixie>
i mean, what do i say to make the sheet scoped

[14:31:30.0000] <Hixie>
or do @import rules could as "declarations"?

[14:31:32.0000] <Hixie>
count

[14:31:35.0000] <TabAtkins>
Oh, just say the stylesheet becomes scoped.  That's a dangling reference, but I'll pick it up later.

[14:31:39.0000] <Hixie>
ah ok

[14:31:40.0000] <Hixie>
thanks

[14:31:52.0000] <TabAtkins>
They don't.  at-rules in general aren't defined yet in scoped stylesheets, until I write the spec.

[14:32:41.0000] <Hixie>
and i define "the style sheet's scoping element"?

[14:32:49.0000] <TabAtkins>
Yeah.

[14:33:32.0000] <Hixie>
as in:

[14:33:32.0000] <Hixie>
  <p>For the purposes of the CSS Cascade model, a style sheet declared by a <code>style</code>

[14:33:36.0000] <Hixie>
  element that has a <code title="attr-style-scoped">scoped</code> attribute and has a parent node

[14:33:39.0000] <Hixie>
  that is an element is <i>scoped</i>, with the <i>scoping element</i> being the <code>style</code>

[14:33:42.0000] <Hixie>
  element's parent element.</p>

[14:33:44.0000] <Hixie>
...?

[14:34:02.0000] <TabAtkins>
Yes, that works.

[14:34:32.0000] <TabAtkins>
You don't need the prelude, I guess (about it being for the purposes of the Cascade model).

[14:34:39.0000] <TabAtkins>
Since scoping affects more than Cascade.

[14:34:42.0000] <Hixie>
k

[14:34:59.0000] <Hixie>
  <p>A style sheet declared by a <code>style</code> element that has a <code

[14:34:59.0000] <Hixie>
  title="attr-style-scoped">scoped</code> attribute and has a parent node that is an element is

[14:35:02.0000] <Hixie>
  <i>scoped</i>, with the <i>scoping element</i> being the <code>style</code> element's parent

[14:35:05.0000] <Hixie>
  element. <a href="#refsCSSSCOPED">[CSSSCOPED]</a></p>

[14:35:08.0000] <Hixie>
with that ref being "XXX"

[14:35:18.0000] <TabAtkins>
Yeah, golden.

[14:36:18.0000] <Hixie>
   <dt id="refsCSSSCOPED">[CSSSCOPED]</dt>

[14:36:18.0000] <Hixie>
   <dd><cite>CSS Scoped Style Sheets</cite>, T. Atkins. Your Imagination.</dd>

[14:43:50.0000] <TabAtkins>
Hahaha

[14:51:20.0000] <odinho>
congrats annevk

[14:52:10.0000] <jgraham>
The achievement being making it through one more year without dying in some madcap adventure?

[14:52:30.0000] <odinho>
Yes. Still alive.

[16:17:59.0000] <jacobolus>
hey guys. sorry, super dodgy wifi and had to move around a bit

[16:18:05.0000] <jacobolus>
er, whoops

[16:18:07.0000] <jacobolus>
wrong channel


2013-08-02
[17:03:35.0000] <t3oss>
on w3c websites tables are used for layout :S

[17:03:39.0000] <t3oss>
you know?

[17:10:36.0000] <zewt>
ffff why does chrome have pdf support with form support that doesn't work, so I fill out a form and then have to ... save as and do it all again

[17:11:19.0000] <zewt>
bonus points for not being able to copy text from text fields

[04:25:15.0000] <annevk>
Hah, I thought http://tools.ietf.org/html/draft-nottingham-uri-get-off-my-lawn was about the URL standard initially. But it's about standards not tampering with the URL value space, which makes perfect sense.

[04:33:38.0000] <SimonSapin>
annevk: do you mean like having /robot.txt in a standard is bad?

[04:33:56.0000] <annevk>
I forgot about those.

[04:34:34.0000] <SimonSapin>
or /.well-known/browserid

[09:17:53.0000] <dglazkov>
good morning, Whatwg!

[11:43:31.0000] <bholley>
Hixie: yt?

[11:43:38.0000] <Hixie>
yo

[11:44:17.0000] <bholley>
Hixie: is there ever a situation in which the spec requires us to know the exact entry script, or is it really just tracking the entry global?

[11:44:30.0000] <bholley>
Hixie: I'm looking into implementing a proper script entry point stack in Gecko

[11:44:37.0000] <bholley>
Hixie: and it looks easier to just to keep a stack of globals

[11:44:41.0000] <bholley>
Hixie: rather than script objects

[11:44:49.0000] <Hixie>
global meaning the Window object?

[11:44:50.0000] <bholley>
Hixie: for ownership reasons

[11:44:53.0000] <bholley>
Hixie: yes

[11:45:05.0000] <Hixie>
you have to know the base URL of the entry script sometimes

[11:45:23.0000] <Hixie>
and the referrer source

[11:45:25.0000] <bholley>
Hixie: and that can be different from the document?

[11:45:39.0000] <Hixie>
interesting question

[11:46:20.0000] <bholley>
Hixie: if the script comes from jquery.com, do you need to know jquery.com's base URI, or the document's base URI?

[11:46:57.0000] <Hixie>
hmmmm

[11:47:09.0000] <bholley>
/me would guess the latter

[11:47:13.0000] <Hixie>
i think if i'm reading the spec right the base URL for an event handler could be different if that element has an xml:base?

[11:47:17.0000] <Hixie>
but i've no idea if that's realistic or not

[11:47:38.0000] <bholley>
/me doesn't know a darn thing about xml

[11:47:38.0000] <Hixie>
oh, no, nevermind

[11:47:45.0000] <Hixie>
xml:base isn't xml

[11:47:50.0000] <Hixie>
it's <base> on a per-element basis

[11:48:26.0000] <bholley>
"The xml:base attribute (XML only)"

[11:48:28.0000] <Hixie>
i think you're probably safe to use the global, and the global's document

[11:48:43.0000] <Hixie>
"XML only" there only refers to authoring conformance criteria

[11:48:49.0000] <bholley>
ah

[11:48:58.0000] <bholley>
Hixie: ok. In that case, do you think it makes sense to update the spec to talk about entry Windows?

[11:49:07.0000] <bholley>
Hixie: bz would like it to be the case if that's what we implement

[11:49:37.0000] <Hixie>
well, it's more complicated than that due to workers

[11:49:58.0000] <Hixie>
but it would make sense to have "script's base URL" and so forth defined relative to a single object

[11:50:06.0000] <Hixie>
rather than relative to each script

[11:50:31.0000] <Hixie>
wouldn't be a high priority for me to change, though, given the risk level, since it would be purely editorial

[11:50:36.0000] <bholley>
Hixie: because workers don't have a Window?

[11:50:41.0000] <Hixie>
yeah

[11:50:49.0000] <bholley>
Hixie: what about "entry global"?

[11:51:15.0000] <Hixie>
well, you have to worry about what the "script's document" is sometimes

[11:51:30.0000] <Hixie>
which gets especially tricky with dedicated workers created from shared workers, etc

[11:52:25.0000] <Hixie>
let's see

[11:52:36.0000] <bholley>
Hixie: I'm happy to file a spec bug, implement it with globals in Gecko, and let you know how it goes, assuming you're eventually open to changing the spec

[11:52:37.0000] <Hixie>
all these things are always set via the "Create a script" algorithm, i think

[11:52:42.0000] <Hixie>
bholley: lgtm

[11:52:53.0000] <bholley>
great

[11:53:01.0000] <bholley>
Hixie: do you have a good name in mind?

[11:53:08.0000] <bholley>
Hixie: so that I can use that in our implementation?

[11:53:14.0000] <bholley>
Hixie: maybe just "EntryPoint"

[11:53:22.0000] <Hixie>
well

[11:53:30.0000] <Hixie>
did you see the recent change to entry script?

[11:53:38.0000] <bholley>
probably not

[11:53:45.0000] <Hixie>
did it yesterday, iirc

[11:53:50.0000] <bholley>
Hixie: oh, the incumbent script stuff

[11:53:55.0000] <Hixie>
part of the redefinition of incumbent script, yeah

[11:53:57.0000] <bholley>
or is this different?

[11:54:24.0000] <Hixie>
entry script is now just the first script in the stack of incumbent scripts, and the incumbent script is the last one

[11:54:27.0000] <Hixie>
so

[11:54:36.0000] <bholley>
ahhh

[11:54:37.0000] <bholley>
interesting

[11:54:41.0000] <bholley>
so they're implemented together

[11:54:51.0000] <Hixie>
i think in the spec i'd probably keep the idea of using "script", but what i would do is redefine everything in terms of the script's something or other

[11:55:07.0000] <Hixie>
document? window/workerglobal? something

[11:56:39.0000] <bholley>
Hixie: wait, I'm confused by these changes

[11:57:12.0000] <Hixie>
(hmm... "create a script" is called by: create an impotent script, create a script from a node, timers, and importScripts(). and workers also create scripts.)

[11:57:16.0000] <bholley>
Hixie: previously, entry points were a stack

[11:57:25.0000] <bholley>
Hixie: now the entry point is always the bottom of the stack

[11:57:31.0000] <bholley>
Hixie: isn't that a pretty big behavioral change?

[11:57:44.0000] <Hixie>
bholley: huh

[11:57:47.0000] <Hixie>
bholley: interesting point

[11:58:18.0000] <Hixie>
bholley: ok, disregard recent changes.

[11:58:26.0000] <bholley>
ok

[11:58:49.0000] <Hixie>
so wait

[11:59:00.0000] <Hixie>
why do we ever care about the entry script rather than the incumbent script

[11:59:22.0000] <bholley>
because of the places in the spec where it's required?

[11:59:40.0000] <bholley>
IIUC, the entry script stuff is baked into the web platform, as a result of some funny Gecko implementation details back in the day

[12:00:12.0000] <bholley>
where the entry script is sometimes observable but different from the incumbent script

[12:00:15.0000] <Hixie>
i guess when script in window X dispatches and event that is handled by script in window A which calls script in window B which calls an API, some APIs use A and some use B, for no apparent reason?

[12:00:27.0000] <Hixie>
ok

[12:00:36.0000] <bholley>
Hixie: right. This has to do with how JSContexts historically worked in Gecko, I think

[12:00:54.0000] <Hixie>
yeah ok let me fix this thing with how i broke entry script, first

[12:01:04.0000] <bholley>
ok, great

[12:01:52.0000] <Hixie>
entry script should be the most recently pushed incumbent script that was pushed by the "jump to entry point" algorithm, right

[12:03:15.0000] <Hixie>
(having network issues, may have to fix this after lunch)

[12:03:33.0000] <Hixie>
anyway what i was saying earlier

[12:04:02.0000] <Hixie>
is that what we might want to do is hang all this stuff off the globals, like you suggested

[12:04:24.0000] <Hixie>
like, have each global have a "global object script settings" conceptual object

[12:04:27.0000] <bholley>
yeah, I'm pretty sure that every entry script is also an incumbent script

[12:04:29.0000] <Hixie>
and then use that stack

[12:04:38.0000] <bholley>
Hixie: right, that sounds perfect

[12:04:39.0000] <Hixie>
use that on the stack, i mean

[12:04:51.0000] <Hixie>
and define all the script settings in terms of that object

[12:04:59.0000] <bholley>
Hixie: so they might be able to be the same stack, which some of them being specially-annotated as entry points

[12:04:59.0000] <Hixie>
instead of right now, where those settings are on the scripts themselves

[12:05:19.0000] <bholley>
Hixie: that seems cleaner (and conveniently Gecko-like)

[12:05:30.0000] <Hixie>
ok, i think we're on the same page for both of these things

[12:05:37.0000] <Hixie>
this would actually clean up the spec quite a bit

[12:05:45.0000] <Hixie>
so maybe it's worth doing now despite the risk

[12:05:57.0000] <Hixie>
it would make it easier to tell if there was some reason we couldn't do that, certainly

[12:06:08.0000] <bholley>
Hixie: ok. I'll file a spec bug after lunch?

[12:06:16.0000] <Hixie>
i can file a bug

[12:06:19.0000] <bholley>
Hixie: ok

[12:06:49.0000] <Hixie>
dunno what's up with my server. it's responding fine over http and icmp, but over ssh i'm getting multi-minute lag.

[12:10:43.0000] <Hixie>
bholley: filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=22863 and https://www.w3.org/Bugs/Public/show_bug.cgi?id=22862

[12:11:56.0000] <bholley>
Hixie: \o/

[12:12:10.0000] <Hixie>
hopefully i can edit the spec once i have eaten

[12:12:28.0000] <Hixie>
dunno wtf is up with my server

[12:12:31.0000] <Hixie>
bbl

[12:51:33.0000] <aklein>
Hixie: so I've been shopping around your <form><div><script>/*remove div*/</script><input> test case and everyone thinks we should just change the parser

[12:51:43.0000] <aklein>
that is, of the four or five people on WebKit and Blink I asked

[12:52:21.0000] <aklein>
do you happen to know if that behavior is a webcompat thing, or just fallout from the other <form> craziness?

[12:58:17.0000] <aklein>
it would be nice to tighten the <form> association rules so that the form and the associated element be in the same tree

[13:17:15.0000] <Hixie>
aklein: beats me, but if IE already doesn't do it, or if you can convince them to change, then it would be worth considering, certainly

[13:30:02.0000] <aklein>
Hixie: IE 9 does not associate in this case: http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2428

[13:30:14.0000] <Hixie>
IE 9 didn't implement the parser

[13:30:19.0000] <Hixie>
you have to test IE 10 or IE 11, i think

[13:30:35.0000] <aklein>
yeah, that was next up

[13:30:43.0000] <aklein>
(don't have those as handy, amusingly)

[13:30:48.0000] <Hixie>
yeah me either

[13:31:05.0000] <Hixie>
/me was considering actually buying a windows tablet just to have a way to test IE

[13:31:09.0000] <Hixie>
but i haven't gotten around to it yet

[13:31:43.0000] <Hixie>
/me has a shortage of round tuits currently

[14:22:49.0000] <Hixie>
hsivonen_, MikeSmith: you guys didn't implement a #line pragma analogue in the validator while i wasn't looking by any chance, did you?

[14:37:03.0000] <aklein>
Hixie: sigh, returns 1 on a Windows Phone

[14:37:29.0000] <Hixie>
why sigh! that means we have four-way interop! that's awesome! :-D

[14:37:49.0000] <Hixie>
/me declares victory

[14:37:51.0000] <aklein>
:)

[14:49:53.0000] <t3oss>
how Aleca count visits?

[14:49:57.0000] <t3oss>
Alexa*


2013-08-03
[02:54:00.0000] <Yuhong>
Hixie: BTW, IE11 developer preview has been released for Win7: http://blogs.msdn.com/b/ie/archive/2013/07/25/ie11-developer-preview-for-windows-7-enabling-next-generation-sites-and-apps-faster.aspx

[02:56:01.0000] <t3oss>
should I refer to WHATWG website if I take small parts of text from WHATWG website to put on my website?

[07:20:05.0000] <Hixie>
heycam|away|away: away away, huh. ok.

[10:26:36.0000] <MikeSmith>
Hixie: I dunno what a "#line pragma analogue" is

[10:32:36.0000] <MikeSmith>
Hixie: at that

[10:32:42.0000] <MikeSmith>
have not added that yet

[12:59:10.0000] <Yuhong>
MS's attempt at fixing http://iedataleak.spider.io/demo is causing problems with onbeforeunload: http://connect.microsoft.com/IE/feedback/details/794228/kb2846071-breaks-event-clientx-and-event-clienty-properties-in-onbeforeunload-event-handlers-in-ie9-and-10

[13:21:15.0000] <zewt>
microsoft apparently thinks the content of a page goes entirely in the URL, so bugs in a browser seem to be expected

[13:40:37.0000] <Yuhong>
zewt: Huh?

[13:44:52.0000] <Yuhong>
About IE support lifecycle: https://twitter.com/yuhong2/status/363440616299962368

[15:11:15.0000] <Hixie>
MikeSmith: k


2013-08-04
[18:07:27.0000] <heycam>
Hixie, my irc bouncer sometimes loses track of whether it has marked me away when I disconnect from it abnormally

[18:07:56.0000] <Hixie>
hehe

[18:08:40.0000] <Hixie>
heycam: for the incumbent script thing

[18:09:26.0000] <Hixie>
heycam: i'd like this algorithm to be invoked when you call a callback: http://whatwg.org/html#jump-to-a-code-entry-point

[18:09:40.0000] <heycam>
/me looks

[18:09:47.0000] <Hixie>
heycam: it handles things like script getting disabled, the document no longer being active, and marking the entry script

[18:09:54.0000] <Hixie>
heycam: and invoking microtasks, etc

[18:10:18.0000] <Hixie>
heycam: you got any ideas on how to hook this up?

[18:10:41.0000] <heycam>
Hixie, ah so you'll handle all the pushing and popping to the stack

[18:12:23.0000] <heycam>
Hixie, so I don't really understand the relationship between the Function object that I have in my callback invoking algorithm and the "code entry-point"

[18:13:03.0000] <Hixie>
yeah, there's no relationship (any more, i broke that yesterday when i realised i never invoked callbacks, before realising you did and we needed this still)

[18:13:16.0000] <Hixie>
but we can fix that by renaming the algorithm or something

[18:13:28.0000] <heycam>
Hixie, actually, do you want Web IDL to push/pop the incumbent script stack or not?

[18:13:45.0000] <Hixie>
heycam: well, you still have to push when you're invoking things that aren't script

[18:13:58.0000] <Hixie>
e.g. in setTimeout(window.alert, 100, s)

[18:14:03.0000] <Hixie>
when you call window.alert

[18:14:15.0000] <heycam>
I see

[18:14:43.0000] <heycam>
but I think I need to push/pop even for Function objects that come from a script, because Web IDL has the stashed away script to push/pop

[18:14:56.0000] <heycam>
can't just call in to "jump to a code entry-point", unless I pass that script in to that algorithm

[18:15:10.0000] <heycam>
or is that what "for a script" means

[18:15:18.0000] <heycam>
in "When a user agent is to jump to a code entry-point for a script, ..."

[18:16:34.0000] <Hixie>
yeah, this will need some work on both ends

[18:16:55.0000] <Hixie>
(i'm not actually able to work right now, just wanted to give you a brain dump since you were online)

[18:17:04.0000] <heycam>
ok

[18:17:34.0000] <heycam>
so if I can just pass in to you the Function object, the arguments to pass to it (and the this value to use), and the script I've stashed away, that should work

[18:18:04.0000] <Hixie>
sounds good to me. pass it to a new algorithm and i'll hook it all up on monday.

[18:19:06.0000] <heycam>
then I can remove the pushing/popping that I do

[18:35:20.0000] <Hixie>
heycam: just make sure you still do it when the thing you're calling is a host thingy and not a script

[18:36:20.0000] <heycam>
Hixie, ok. the two shouldn't be handled differently in Web IDL currently.

[18:46:50.0000] <Hixie>
heycam: i mean, still do it on your side (not call into the html algorithm)

[18:47:37.0000] <heycam>
Hixie, oh ok. so in that case I should be the one invoking [[Call]]?  but for Function objects from a script, your algorithm will invoke [[Call]]?

[18:48:10.0000] <Hixie>
well my algorithm has no idea how to handle "call window.alert()", as in the setTimeout(window.alert, 100, s) case, where the callback is a host thing

[18:49:01.0000] <heycam>
hmm

[18:49:33.0000] <heycam>
what's the difference? does the step 4 you've currently got there do anything special?

[18:49:55.0000] <Hixie>
well there's no script

[18:50:15.0000] <Hixie>
i guess that's what you meant by you have a script and an entry point, though, hm

[18:50:32.0000] <heycam>
but does step 4 just mean "invoke [[Call]]"?

[18:50:38.0000] <Hixie>
yeah i guess if you force feed me the info i need, that works

[18:50:45.0000] <Hixie>
i've no idea what step 4 really means

[18:50:48.0000] <heycam>
heh

[18:50:50.0000] <Hixie>
it's trying to vaguely be language-agnostic

[18:50:53.0000] <heycam>
ah

[18:51:04.0000] <Hixie>
though that may be a lost cause

[18:51:15.0000] <Hixie>
i think we're likely to see a return to people caring about that shortly, though

[18:51:18.0000] <Hixie>
like, in the coming years

[18:51:24.0000] <Hixie>
with asm.js and so forth

[18:51:29.0000] <heycam>
we'll see I guess

[18:51:53.0000] <heycam>
ok I'll write some text and I'll send you an email

[18:52:05.0000] <heycam>
oh one thing

[18:52:26.0000] <heycam>
this algorithm can abort in certain situations where it can't call the function

[18:52:55.0000] <heycam>
on the Web IDL side, I'm expecting to return a value of a particular Web IDL type. for example if it's a callback function with a particular return type

[18:53:30.0000] <heycam>
so in that situation I can't just return nothing. feels like I should be throwing an exception in that case.

[18:54:16.0000] <heycam>
though not sure what exception it should be

[18:54:20.0000] <Hixie>
only if the script is disabled, right?

[18:54:28.0000] <Hixie>
what would you do with the exception?

[18:54:35.0000] <heycam>
propagate it out?

[18:54:54.0000] <Hixie>
to what? if script is disabled...

[18:55:11.0000] <heycam>
is script being disabled the only situation where you don't invoke callbacks like this?

[18:55:20.0000] <Hixie>
the document not being active

[18:55:25.0000] <Hixie>
i think that's it, no?

[18:55:31.0000] <Hixie>
i'd just treat the return value as "void"

[18:55:44.0000] <Hixie>
and pretend it ran a no-op

[18:56:39.0000] <heycam>
if my callback is a `callback Something = Node ();`

[18:57:07.0000] <heycam>
I guess I could pretend the function returned undefined, try to convert that, and throw as a result

[18:57:12.0000] <heycam>
but as you say this might not be user visible anyway

[18:57:44.0000] <Hixie>
i would treat it as if the script had been   function () { }

[18:57:54.0000] <heycam>
ok

[18:59:04.0000] <heycam>
so when you do these preparatory steps of checking if scripting is disabled for the script's browsing context, is that not for the script that's currently on the top of the stack, but the script the Function object actually comes from?

[18:59:37.0000] <heycam>
does it make sense if you do `setTimeout(window.alert, …)` to look at the incumbent script that was associated with window.alert, when you passed it in as a callback?

[18:59:38.0000] <Hixie>
it's for the script you're about to run

[19:00:03.0000] <Hixie>
in that particular case, i doubt it matters exactly who you're checking

[19:00:08.0000] <heycam>
hmm

[19:00:11.0000] <Hixie>
oh, it should matter actually

[19:00:20.0000] <Hixie>
it should be the script that called window.setTimeout()

[19:00:27.0000] <heycam>
aha

[19:01:39.0000] <Hixie>
though i think for timeout we actually already have mechanisms in place to stall them if the window is not active

[19:01:42.0000] <Hixie>
so it doesn't much matter

[19:02:42.0000] <heycam>
would that be ok in general though? do these preparatory steps on the script that's on top of the stack, if it's a host object thing, and the actual script the Function object is from if it's a user thing?

[19:14:22.0000] <Hixie>
i guess?

[19:14:30.0000] <Hixie>
maybe we don't even do them for host things

[19:17:42.0000] <heycam>
the step 3 where we push on to the incumbent script stack, is it right that we push the actual script the Function object came from, if it is a user thing, but we need to push the "whatever was at the top of the stack at the time we passed in the callback" script for a host thing?

[19:17:53.0000] <heycam>
I think I got that bit wrong with my initial edits

[19:23:02.0000] <Hixie>
i'm not sure

[19:23:20.0000] <Hixie>
i do know that if it's not an author script, we don't want to be setting the candidate entry script flag thing

[19:23:30.0000] <Hixie>
though it may not matter...

[19:23:31.0000] <Hixie>
i don't know

[19:23:38.0000] <Hixie>
sorry dude, not awake right now :-)

[19:23:58.0000] <heycam>
heh fair enough ;)

[19:24:21.0000] <heycam>
/me has no idea what candidate entry script flag is for

[19:24:28.0000] <heycam>
anyway, I'll write something up and you can look at it later

[19:25:08.0000] <Hixie>
it sets the entry script, which is used for security

[22:35:27.0000] <treehau55>
e

[02:28:28.0000] <MikeSmith>
Hixie: what's the rationale for the http://html5.org/r/8109 change?

[02:29:11.0000] <heycam>
(it's also got a typo)

[02:30:54.0000] <Ms2ger>
MikeSmith, "Requiring the Encoding Standard preferred name is too strict for no good reason" thread on whatwg?

[02:31:12.0000] <MikeSmith>
Ms2ger: oh thanks

[02:31:22.0000] <Ms2ger>
(And the aone typo is fixed)

[02:31:30.0000] <MikeSmith>
oK

[02:31:47.0000] <MikeSmith>
/me is way behind on reading list mail

[02:32:50.0000] <MikeSmith>
in other news http://html5.org/r/8108 is a pretty significant implementation change

[02:33:13.0000] <MikeSmith>
would be good to hear what hsivonen_ thinks of it

[02:33:47.0000] <MikeSmith>
Ms2ger: think I should open a mozilla bug for that one?

[02:34:02.0000] <MikeSmith>
against the HTML parse

[02:34:05.0000] <MikeSmith>
*parser

[02:34:44.0000] <Ms2ger>
MikeSmith, that would probably be good

[02:37:08.0000] <MikeSmith>
ok

[02:37:49.0000] <Ms2ger>
Though I believe there's a bunch of other parser changes too

[02:40:38.0000] <MikeSmith>
oh?

[02:40:57.0000] <MikeSmith>
ah yeah

[02:44:29.0000] <MikeSmith>
Ms2ger: just raised https://bugzilla.mozilla.org/show_bug.cgi?id=901319 for the AAA change

[02:44:47.0000] <Ms2ger>
Thanks

[08:10:09.0000] <zewt>
okay this is like the third site i've seen that tries to keep me from pasting my email address in

[08:10:45.0000] <zewt>
i don't know why but i'm still surprised by the imaginative ways people are complete idiots

[09:18:03.0000] <zewt>
there's a fascinating one: submitting a form on a website broke because I had a newline in a textarea, with a "JSON.parse: bad control character in string literal" error

[09:18:32.0000] <zewt>
so I can only guess that somebody out there is actually constructing JSON by going '"' + text + '"'

[09:28:28.0000] <gsnedders>
Surprise level: 0.

[09:29:53.0000] <zewt>
yep. heh

[12:15:59.0000] <teoss>
there must be space between doctype and html element?

[12:20:13.0000] <gsnedders>
teoss: No, there's no need. But note that the DOCTYPE is the whole string, "<!doctype html>"; any html start tag must follow that.

[12:21:23.0000] <teoss>
yep thanks gsnedders  but here I think it says I must put white space? http://www.w3.org/html/wg/drafts/html/master/syntax.html#syntax-doctype

[12:23:07.0000] <gsnedders>
teoss: No, it says nothing about what comes after the DOCTYPE, just the syntax of the DOCTYPE itself.

[12:28:40.0000] <teoss>
yes sorry gsnedders I ment affter html in doctype there must be space? like this: <!doctype html > or it can like this> <!doctype html> ?

[12:29:48.0000] <gsnedders>
teoss: As I said, there's no html element there. And the spec says "Zero or more space characters" after the "html", so zero space characters is fine.

[12:30:21.0000] <teoss>
ah yes zero or more lol

[12:30:25.0000] <teoss>
ok thanks and sorry

[12:30:35.0000] <teoss>
gsnedders, can I put paragraph in paragraph?

[12:33:15.0000] <gsnedders>
teoss: Only in XHTML, though why do you want to?

[16:01:13.0000] <teoss>
web page is valid without head and body elements?


2013-08-05
[00:20:46.0000] <zcorpan>
TabAtkins: any update on https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/bWgRZOZKmbk ?

[00:33:49.0000] <zcorpan>
jgraham: https://critic.hoppipolla.co.uk/r/203 this always sets onerror to a function, so i can't use the harness to test for the initial value of onerror (unless i do something ugly like store the value of onerror before i load the harness)

[00:34:45.0000] <zcorpan>
but i guess that's an ok tradeoff

[00:52:57.0000] <zcorpan>
TabAtkins: also, any update on <http://www.w3.org/mid/CAAWBYDCTnFbx-VQYF4Oq904p-=5dtpCkvTuZSLPA3DX_cT92Qw⊙mgc> ?

[01:53:37.0000] <annevk>
hmm, 60 unread in fora/bug

[01:54:07.0000] <annevk>
Looks like heycam had a work-related weekend

[02:27:07.0000] <annevk>
http://www.chromium.org/developers/design-documents/per-page-suborigins

[02:28:39.0000] <zcorpan>
serializing css declarations is hard

[02:29:35.0000] <SimonSapin>
zcorpan: how?

[02:29:54.0000] <zcorpan>
shorthands complicate things

[02:33:12.0000] <zcorpan>
i might give up trying to write it as an algorithm and instead write a set of constraints

[02:38:02.0000] <zcorpan>
e.g. how should this be serialized? border:1px solid lime; border-top-width:0;

[02:38:12.0000] <zcorpan>
or border:1px solid lime; border-top-width:inherit;

[02:41:53.0000] <annevk>
Do implementations vary all over?

[02:42:43.0000] <zcorpan>
gecko and webkit vary

[02:42:48.0000] <zcorpan>
haven't tested ie

[02:49:17.0000] <SimonSapin>
zcorpan: when serializing a whole rule? Is it not acceptable to just serialize the longhands?

[02:51:31.0000] <zcorpan>
SimonSapin: yeah. that would be the easiest. but people don't want a gazillion longhands

[02:53:45.0000] <zcorpan>
knowing when to serialize as a shorthand means special knowledge for each shorthand. e.g. background has specific rules about background-size i think

[03:22:33.0000] <annevk>
So what you want to have written down somewhere is the internal model border:1px solid lime; border-top-width:0 creates.

[03:23:08.0000] <annevk>
Then for each set of related properties that has a shared shorthand you'd have some kind of function that outputs whether or not a shorthand can be created for the internal model.

[03:23:28.0000] <annevk>
That serialization algorithm is ideally defined where the shorthand is defined.

[03:34:24.0000] <SimonSapin>
annevk: the internal model is a bunch of longhands

[03:35:14.0000] <zcorpan>
yeah. cssom has the model OK (except it doesn't say what happens for duplicate declarations, but i have that fixed locally)

[03:36:56.0000] <zcorpan>
even so, border:1px solid lime; border-top-width:0 can be serialized in multiple ways, either border-top/border-right/border-bottom/borderl-left or as border-width/border-style/border-color

[03:39:21.0000] <annevk>
Yeah, so whoever defines the properties need to decide there.

[04:11:27.0000] <t3oss>
will webpage function without body and head elements?

[04:11:45.0000] <t3oss>
I mean, will it be valid?

[04:13:34.0000] <annevk>
are you talking actual elements or tags?

[04:13:45.0000] <annevk>
without those elements it won't be valid HTML

[04:14:08.0000] <annevk>
but you can get those elements without corresponding tags

[04:15:53.0000] <zcorpan>
t3oss: you can check with http://validator.nu/

[04:16:48.0000] <zcorpan>
t3oss: but as annevk says, the elements are there even if you omit the tags (e.g. you can access head/body with script and css)

[04:17:30.0000] <zcorpan>
t3oss: check with http://software.hixie.ch/utilities/js/live-dom-viewer/ to see the parsed tree

[04:18:10.0000] <t3oss>
annevk, elements

[04:18:39.0000] <t3oss>
annevk, but HTML specification says document must have DOCTYPE and HTML root element

[04:18:48.0000] <t3oss>
so I am confused

[04:19:26.0000] <t3oss>
aha I see, so if I don't write the elements they will be there like tbody

[04:19:46.0000] <t3oss>
ok thanks guys annevk zcorpan

[04:19:46.0000] <annevk>
you write tags

[04:19:51.0000] <annevk>
you get elements

[04:20:07.0000] <MikeSmith>
hsivonen: W3C has a GSOC contributor doing some work related to the validator code, and in his changes he's used a couple of Java7isms. One is a minor one -- use of the "diamond operator" syntax, which could easily be changes to just explicitly stating the types -- but another one is use of Strings in switch statements.

[04:20:13.0000] <t3oss>
annevk, yeah annevk  but without tags head and body are there? ok thanks

[04:20:53.0000] <annevk>
t3oss: yeah, when the parser turns tags into elements it adds a couple if you omitted certain tags

[04:20:57.0000] <MikeSmith>
hsivonen: it seems to me too early to move to Java7 as a build requirement, but I'd like to know what you think

[04:21:17.0000] <t3oss>
ok thanks again annevk

[04:22:22.0000] <MikeSmith>
hsivonen: Among other reasons I think OSX is still just on Java6

[04:24:07.0000] <t3oss>
one more thing, charset is required attribute?

[04:25:00.0000] <annevk>
not sure what the spec says, but it should be

[04:25:33.0000] <annevk>
MikeSmith: Apple Java is, but isn't Apple removing it completely?

[04:30:01.0000] <MikeSmith>
annevk: I vaguely remember hearing something about removing it, yeah

[04:30:53.0000] <MikeSmith>
annevk: but wait I think that's just for applet

[04:30:57.0000] <MikeSmith>
for browsers, right?

[04:31:16.0000] <annevk>
I don't know

[04:33:19.0000] <MikeSmith>
annevk: on another subject, have you get any implementor feedback yet on the changes you made in June to http://notifications.spec.whatwg.org/ ?

[04:33:46.0000] <annevk>
in July?

[04:33:50.0000] <t3oss>
annevk,  I am not sure why spec says doctype html is enough when validator doesn't validate page without title element in the head

[04:34:02.0000] <annevk>
t3oss: which spec?

[04:34:07.0000] <t3oss>
w3c

[04:34:14.0000] <t3oss>
html5.0

[04:34:15.0000] <annevk>
t3oss: pointer?

[04:34:23.0000] <MikeSmith>
annevk: ah yeah I meant in July

[04:35:01.0000] <MikeSmith>
t3oss: the spec says the title element is required

[04:35:09.0000] <MikeSmith>
and it can't be empty

[04:35:14.0000] <annevk>
MikeSmith: did discuss it, but it's not been implemented yet anywhere

[04:35:19.0000] <MikeSmith>
annevk: OK

[04:35:32.0000] <t3oss>
http://www.w3.org/html/wg/drafts/html/master/syntax.html#syntax

[04:35:45.0000] <annevk>
got another request too for putting some kind of state object in a notification

[04:35:49.0000] <t3oss>
MikeSmith,  no read

[04:35:50.0000] <annevk>
similar to pushState()

[04:35:59.0000] <annevk>
haven't really gotten around to that yet

[04:36:38.0000] <MikeSmith>
annevk: dunno how much you care but the Notifications WG is going to need to move to LC soon, and then to CR before long

[04:36:58.0000] <annevk>
t3oss: there's both syntax and semantic requirements, you have to read both

[04:37:23.0000] <annevk>
MikeSmith: dunno how much I care either :)

[04:37:48.0000] <annevk>
MikeSmith: the whole LC / CR stuff is budged

[04:38:06.0000] <t3oss>
thanks annevk

[04:38:24.0000] <MikeSmith>
t3oss: see http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#the-head-element and http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#the-title-element

[04:39:11.0000] <MikeSmith>
annevk: yeah which is why I was just mentioning it as an FYI

[04:39:17.0000] <t3oss>
MikeSmith,  yeag that link says title element is not required but validator won't validate web page without title element

[04:39:30.0000] <MikeSmith>
t3oss: no it doesn't say that

[04:39:53.0000] <MikeSmith>
the validator conforms to the spec here

[04:40:04.0000] <MikeSmith>
if you can't see that you need to read more carefuly

[04:40:35.0000] <t3oss>
MikeSmith,  man spec for head and title says title can be ommited

[04:40:46.0000] <t3oss>
in some situations.. but in most is required

[04:40:55.0000] <t3oss>
If it's reasonable for the Document to have no title, then the title element is probably not required. See the head element's content model for a description of when the element is required.

[04:41:36.0000] <t3oss>
so I guess this goes for emals with html code in them

[04:41:52.0000] <t3oss>
The title element is a required child in most situations, but when a higher-level protocol provides title information, e.g. in the Subject line of an e-mail when HTML is used as an e-mail authoring format, the title element can be omitted.

[04:42:00.0000] <t3oss>
MikeSmith,  see?

[04:42:13.0000] <MikeSmith>
t3oss: yeah you've just taught me something

[04:42:26.0000] <MikeSmith>
I guess you must be feeding e-mail messages to the validator

[04:42:33.0000] <MikeSmith>
sorry I didn't realize that before now

[04:46:38.0000] <t3oss>
:D

[04:47:14.0000] <t3oss>
so this validator is for web page only ?

[04:47:29.0000] <t3oss>
MikeSmith, cmon don't be rude :)

[04:57:33.0000] <t3oss>
MikeSmith, sorry if I insulted you in some way

[05:00:41.0000] <MikeSmith>
t3oss: I'm not insulted and would be glad to try to help you if I understand what problem you're trying to solve

[05:01:22.0000] <MikeSmith>
if you think the validator shouldn't report a missing title as an error, then file a bug at http://bugzilla.validator.nu/ or https://www.w3.org/Bugs/Public/enter_bug.cgi?product=Validator%20(Nu) or at

[05:01:36.0000] <t3oss>
MikeSmith,  I got confused with validator I guess, I didn't knew validator validates only code for web pages thanks anyway

[05:03:49.0000] <MikeSmith>
t3oss: if you're pasting content into the textarea part of the validator we have no way of knowing what the context is and the sanest assumption is that you're trying to validate content that you intend to put up on the Web

[05:06:03.0000] <t3oss>
MikeSmith, when browser parse html file which kind of content it understands? Except elements text and comments is there soemthing else?

[05:06:48.0000] <t3oss>
and js and css code I forgot that

[06:03:51.0000] <MikeSmith>
slightlyoff moved?

[06:17:31.0000] <annevk>
MikeSmith: yeah

[06:18:14.0000] <MikeSmith>
annevk: was looking forward to seeing him when I visited London

[06:18:27.0000] <annevk>
you'll have to visit SF instead

[06:18:35.0000] <MikeSmith>
do now I guess I'll have to visit him wherever he moved to

[06:18:38.0000] <annevk>
your princess is another castle

[06:18:46.0000] <MikeSmith>
aha

[06:18:55.0000] <annevk>
when are you here?

[06:19:29.0000] <MikeSmith>
dunno but would like to go before the end of the year

[06:19:53.0000] <MikeSmith>
Nao doesn't mind the cold

[06:22:15.0000] <darobin>
MikeSmith: don't hesitate to drop by Paris on the way there :)

[06:22:40.0000] <MikeSmith>
darobin: would love to

[06:22:48.0000] <MikeSmith>
Nao's never been there either

[06:22:54.0000] <darobin>
we have a guest room

[06:23:11.0000] <darobin>
assuming you don't mind overhearing a baby crying in the night and that sort of stuff

[06:23:14.0000] <MikeSmith>
oh boy, if you're offering we will take you up on that for sure

[06:23:20.0000] <darobin>
sure thing

[06:23:24.0000] <MikeSmith>
Nao loves babies

[06:23:38.0000] <darobin>
just ping me in advance to make sure it's not taken and all

[06:23:50.0000] <MikeSmith>
I definitely will

[06:24:18.0000] <darobin>
well if she loves them to the point of getting up to take care of them in the night then you're welcome to actually move in for a while :)

[06:25:08.0000] <MikeSmith>
hahah :)

[06:26:23.0000] <annevk>
hah, can't beat that

[06:26:47.0000] <annevk>
/me reads ECMAScript and learns Date() (without new) produces a string.

[06:30:29.0000] <t3oss>
guys why stepSon is behaving like this? http://jsfiddle.net/pFVn8/1/

[06:30:36.0000] <t3oss>
why it is so low?

[06:45:29.0000] <matjas>
when a CSS module spec refers to “whitespace”, which characters are those exactly? same as http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#space-character?

[06:47:38.0000] <matjas>
doesn’t seem to be explicitly defined anywhere

[06:48:46.0000] <zcorpan>
matjas: probably http://www.w3.org/TR/CSS2/syndata.html#whitespace

[06:49:16.0000] <matjas>
zcorpan: thanks! strange the separate module specs don’t refer to that

[06:49:25.0000] <matjas>
annevk: try `new Date('1 Octopus 2013')` in Chrome

[06:50:39.0000] <annevk>
matjas: seems to substr on "Oct" (case-insensitive)

[06:51:08.0000] <annevk>
e.g. octave does the same

[06:51:12.0000] <zcorpan>
matjas: which mudule spec(s)?

[06:51:15.0000] <matjas>
yeah

[06:51:35.0000] <zewt>
annevk: well, prefix

[06:51:38.0000] <matjas>
zcorpan: http://www.w3.org/TR/css-fonts-3/

[06:53:39.0000] <zcorpan>
matjas: i see "whitespace" and "white space" in that module, both of which are discussing whitespace between tokens in the syntax, which is not normative in that module and is more properly defined in css-syntax now

[06:54:22.0000] <zcorpan>
matjas: but it could of course include a reference anyway

[06:54:58.0000] <matjas>
that would definitely be less confusing for n00bs like me :)

[06:55:57.0000] <zcorpan>
or maybe it's not non-normative, but it would be a layering violation for a module to come up with a different definition of whitespace in the syntax :-)

[06:59:08.0000] <zcorpan>
matjas: pls file a bug or send email

[06:59:31.0000] <matjas>
zcorpan: will do

[07:00:53.0000] <MikeSmith>
annevk: I wonder if when you say that Promises are asyncronous values you should more specifically say they're asyncronous return values

[07:01:16.0000] <annevk>
MikeSmith: soon we'll have APIs that take them as argument

[07:01:20.0000] <zcorpan>
(whitespace for the purpose of the white-space property is a different kind of whitespace than css-syntax whitespace)

[07:01:58.0000] <MikeSmith>
annevk: oh

[07:02:00.0000] <annevk>
MikeSmith: and in fact, things like Promise.every() take promises as arguments

[07:02:05.0000] <MikeSmith>
ok

[07:11:51.0000] <SimonSapin>
zcorpan, matjas: you could say that "whitespace" in that context means "whitespace token" rather than "whitespace character"

[07:13:44.0000] <zcorpan>
SimonSapin: although it's not so clear in "To avoid mistakes in escaping, it is recommended to quote font family names that contain white space..." since there it's discussing font family name which has nothing to do with css syntax

[07:13:56.0000] <t3oss>
do you want to see th website I am making? :)

[07:14:16.0000] <SimonSapin>
zcorpan: oh, yeah. In that case it’s characters

[07:14:33.0000] <t3oss>
sorry that I am annoying but I make website and I want to put accurate information there, so please eexplain to me shortly do you guys together with w3c peopel make html spec or just you and they take it?

[07:14:38.0000] <SimonSapin>
but I’d say anything "recommended" is not normative

[07:14:41.0000] <t3oss>
and change it little and put on the w3c website

[07:15:12.0000] <zcorpan>
t3oss: sure! (re your website)

[07:15:51.0000] <zcorpan>
t3oss: see http://wiki.whatwg.org/wiki/FAQ#How_does_the_WHATWG_work.3F

[07:18:24.0000] <zcorpan>
there's probably a document somewhere discussing what the html wg does but i can't find anything right now

[07:18:41.0000] <zcorpan>
/me summons stevef

[07:19:32.0000] <t3oss>
zcorpan, I still don't know if w3c peopel are involved in making html or just whatwg then they take it and change it

[07:19:54.0000] <t3oss>
ok zcorpan thanks for the link its quite big I will read it after shopping thanks man

[07:20:15.0000] <zcorpan>
t3oss: http://html5doctor.com/interview-steve-faulkner-html5-editor-new-doctor/ might also be interesting

[07:21:24.0000] <t3oss>
appreciate and please link to me anything you think can be in use of for my website :) it will be quite good I promise that :) people can learn from there a lot and easy, I translate spec to simplify things as much as possible to keep consistency and giving a lot of examples and also guiding people a little :) I have firm and do web dev lessons :)

[10:28:30.0000] <TabAtkins>
zcorpan: I haven't taken the time to add any of the use-counters I want. ;_;

[10:39:28.0000] <teoss>
in html I can write any unicode character?

[10:56:51.0000] <Hixie>
so some months ago, one of the w3c html spec editors asked me for a list of bugs that they could work on, because they didn't want to conflict with changes i was making

[10:56:54.0000] <Hixie>
which seemed reasonable

[10:57:04.0000] <Hixie>
so i gave them a list of six bugs i wasn't going to touch for a few months

[10:57:31.0000] <Hixie>
i've since fixed 3 of the 6. one of the 6 was the <template> thing that robin did do, but then i had to redo.

[10:57:34.0000] <Hixie>
https://www.w3.org/Bugs/Public/buglist.cgi?status_whiteboard_type=allwordssubstr&query_format=advanced&status_whiteboard=exclusion

[11:23:27.0000] <annevk>
:/ the others don't seem particularly high priority though

[11:29:02.0000] <tantek>
welcome jgraham to Mozilla!

[11:29:11.0000] <smaug____>
jgraham: welcome

[11:29:24.0000] <annevk>
has he been sighted?

[11:30:38.0000] <smaug____>
apparently in MV

[11:31:12.0000] <TabAtkins>
jgraham: You've in MV for a bit?

[11:31:31.0000] <TabAtkins>
s/ve/re/

[11:45:40.0000] <ajf>
Hey... This is almost certainly the wrong place to ask, but shouldn't there be an option for <input type=text> elements that wrapping? Something like <input type=text wrap>? A lot of sites use <textarea> for this with JavaScript to prevent newlines, but it seems like the wrong control.

[11:46:03.0000] <felipeduardo>
/me test

[11:53:57.0000] <annevk>
there's <textarea wrap>

[12:01:35.0000] <zcorpan>
hsivonen: is livedom.validator.nu kept up-to-date?

[12:29:03.0000] <zcorpan>
about atob/btoa with typed arrays, is there a reason to support btoa with an arbitrary typed array, instead of saying "i want a typed array" and get a typed array as return value?

[12:30:34.0000] <zcorpan>
i mean atob

[12:36:53.0000] <annevk>
We could maybe instead support API-only labels/encodings in the Encoding specification.

[12:41:36.0000] <Ms2ger>
TabAtkins, Sunnyvale

[12:43:19.0000] <gsnedders>
Ms2ger: How are you spying on jgraham?

[12:43:50.0000] <Ms2ger>
I have my ways

[12:44:18.0000] <gsnedders>
:o

[13:09:14.0000] <zcorpan>
annevk: could you give an example of how that would be used, in both directions?

[13:10:11.0000] <annevk>
zcorpan: where will serialization end up? In CSS or CSSOM?

[13:11:08.0000] <zcorpan>
annevk: i took a mental break and read email instead (just back from vacation)

[13:12:04.0000] <annevk>
zcorpan: I guess something needs to define which properties belong to a group. And then something needs to define how to serialize that group.

[13:12:52.0000] <annevk>
zcorpan: That could be in the same place.

[13:13:22.0000] <zcorpan>
yeah, seems reasonable for the spec defining a shorthand to define how to serialize it

[13:13:55.0000] <annevk>
zcorpan: then you need to define something with respect to order I suppose

[13:14:32.0000] <annevk>
zcorpan: in the end it would make the most sense if CSSOM was just a thin layer on top of the internal API

[13:14:38.0000] <annevk>
zcorpan: or internal model

[13:14:47.0000] <annevk>
zcorpan: which is not very explicit today in CSS, but could b

[13:14:48.0000] <annevk>
e

[13:15:18.0000] <zcorpan>
yeah, i've got the order in which the longhands are stored covered, then i just need to say that they're serialized in that order with the position of shorthands being the same as the first property of that shorthand

[13:15:26.0000] <zcorpan>
if that makes sense

[13:16:23.0000] <annevk>
yeah, and you need to account for "nested" longhands somehow (as with border)

[13:16:43.0000] <zcorpan>
indeed

[14:11:30.0000] <zcorpan>
"The Timed Text Working Group made several editorial improvements to the specification."

[14:14:37.0000] <zcorpan>
the changelog actually claims that there is one normative change

[14:15:23.0000] <Hixie>
over how long a period?

[14:16:23.0000] <zcorpan>
no wait, i was looking at the wrong place in the changelog

[14:18:09.0000] <zcorpan>
no, it was right

[14:18:15.0000] <zcorpan>
https://dvcs.w3.org/hg/ttml/raw-file/default/ttml10/spec/ttml-changes.html#change-history-rec-to-2e-per

[14:19:58.0000] <zcorpan>
time span being 20101118 to 09 July 2013

[14:22:30.0000] <Hixie>
one normative change in 3 years?

[14:22:36.0000] <Hixie>
that's an amazingly good spec

[14:24:16.0000] <annevk>
is that how we measure things these days?

[14:25:21.0000] <Hixie>
:-P

[14:28:27.0000] <TabAtkins>
zcorpan: Regarding serialization, you planning on defining serialization of the basic types, or do you want Syntax to take care of that?

[14:29:07.0000] <zcorpan>
TabAtkins: basic types being values?

[14:29:17.0000] <TabAtkins>
Numbers, strings, etc.

[14:29:26.0000] <TabAtkins>
For example, which quoting character to use for strings.

[14:29:29.0000] <TabAtkins>
We're inconsistent in Blink.

[14:29:33.0000] <zcorpan>
i think that's already covered

[14:29:37.0000] <TabAtkins>
(And flat-out wrong in some places.)

[14:30:39.0000] <zcorpan>
what i'm focusing on now is style.cssText and how it should decide on shorthands

[14:31:54.0000] <Hixie>
abarth: do you know if anything is expected from the html spec as far as CSP and Workers go?

[14:41:40.0000] <annevk>
TabAtkins: basic types Hixie covered years ago, and it survived

[14:41:50.0000] <annevk>
implemented, not so much

[14:42:17.0000] <TabAtkins>
Ah, duh.  Sorry.

[14:42:24.0000] <TabAtkins>
Yeah, our implementation is definitely terrible.

[14:43:03.0000] <TabAtkins>
Internally, we represent strings and idents identically, with only context to tell them apart.  This fails, of course, when a property accepts both, like 'content' (and we have bugs in serializing 'content' because of this).

[15:19:06.0000] <zcorpan>
another bug in blink http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2429

[15:20:57.0000] <TabAtkins>
yaaaay

[15:40:26.0000] <TabAtkins>
zcorpan: You filing that, or should I?

[15:48:46.0000] <SimonSapin>
TabAtkins, zcorpan: serialization might exist outside of CSSOM, it makes sense in Syntax IMO

[15:49:34.0000] <zcorpan>
TabAtkins: please file it, i'm about to go to bed :-)

[15:49:39.0000] <TabAtkins>
kk!

[15:50:16.0000] <Hixie>
TabAtkins: how does internal code distinguish them then?

[15:50:21.0000] <Hixie>
TabAtkins: (strings and idents)

[15:51:50.0000] <TabAtkins>
Hixie: I think I was wrong - if we're doing things right, it should be distinguishable.

[15:54:54.0000] <Hixie>
k

[15:55:02.0000] <Hixie>
i can certainly see it being easy to mix them up

[15:55:10.0000] <Hixie>
i mean, i do that all the time in my own code in similar situations

[15:55:27.0000] <Hixie>
token structs/unions that represent "identifier" and "string" in very similar ways

[15:58:11.0000] <Hixie>
(though i'd imagine in browser code if you're dealing with keywords you'd atomise them)

[16:01:19.0000] <TabAtkins>
We usually do, but in some cases you have user-defined idents, so we can't.

[16:17:49.0000] <jgraham>
zcorpan: So I vaugely recall that some browser has a problem with addEventListener("error", function(){}), but maybe I am wrong?

[16:17:55.0000] <jgraham>
smaug____: Thanks

[16:26:08.0000] <Hixie>
TabAtkins: ah, right

[16:26:26.0000] <Hixie>
jgraham: sounds plausible, the spec changed very recently on this

[16:26:58.0000] <zewt>
surely nothing related to adding a no-op event listener

[16:46:08.0000] <jgraham>
zewt: The no-op part was misleading


2013-08-06
[18:28:43.0000] <zewt>
"from the c++ side" ... leaving this thread to others

[23:22:42.0000] <Yuhong>
Here is another effect of Mariner cancellation: Remember getElementById also including the name attribute?

[23:24:05.0000] <Yuhong>
Well, the cancellation of Mariner made IE the only common implementation of DOM Level 1 initially.

[00:52:37.0000] <zcorpan_>
/me doesn't follow yucca's argument in 'XML data islands related question'

[00:53:19.0000] <zcorpan_>
he argues against XHR because it needs a HTTP connection, but still wants <script src>?

[01:56:56.0000] <zcorpan_>
TabAtkins: does your preprocessor support the same cross-spec cross-references as anolis+xref?

[02:14:18.0000] <zcorpan_>
jgraham: presto doesn't support addEventListener('error', ...) (since it wasn't in the spec when we implemented it), and i think older IE don't support it. not sure about newer IE

[02:14:56.0000] <zcorpan_>
jgraham: but i don't mind using onerror there since it's really just a single test case that will need to have a workaround for it

[02:48:27.0000] <smaug____>
remind me, what is the current name for Future-Promises

[02:48:47.0000] <smaug____>
hmm, based on the spec, Promise

[02:51:03.0000] <gsnedders>
SimonSapin: Does WeasyPrint support XHTML? Docs sounds like it doesn't?

[02:56:25.0000] <annevk>
smaug____: it's promises and will remain promises

[04:00:17.0000] <darobin>
/me wasn't even aware someone had asked Hixie for a list of bugs over which not to conflict...

[04:02:41.0000] <hsivonen>
zcorpan_: livedom.validator.nu is not up-to-date :-(

[04:02:50.0000] <hsivonen>
so much stuff I should get done

[04:03:24.0000] <annevk>
hsivonen: I recommend putting more on GitHub so you can ask for pull requests rather than doing them yourself

[04:04:28.0000] <hsivonen>
annevk: yeah, using hg/bitbucket was betting on the wrong horse. should have gone with git/github

[04:04:48.0000] <hsivonen>
need to make MikeSmith's github mirror the source of truth at some point

[04:06:13.0000] <annevk>
It's quite easy to move HG repos to GH. I've done that for a couple of specifications without much hassle.

[04:07:30.0000] <hsivonen>
Also, as a person trying to keep a proper "paper" trail for a MIT-licensed project, I'm slightly envious of the "Not a Contribution" thing in the Apache License

[04:07:52.0000] <hsivonen>
which is one reason I put the one project I do have on github under the Apache License

[04:31:31.0000] <zcorpan_>
hsivonen: OK. i noticed somebody was using it as a reference for implementing his parser

[04:33:09.0000] <zcorpan_>
hsivonen: i guess livedom.validator.nu isn't as useful now as it was before gecko had teh html5 parser

[04:34:58.0000] <zcorpan_>
does anyone have opinions on https://www.w3.org/Bugs/Public/show_bug.cgi?id=22528 ? TabAtkins?

[05:01:29.0000] <annevk>
Moderat released a new album? The fuck. I thought they were done.

[05:02:15.0000] <annevk>
zcorpan_: we discussed that here a while back. I think fantasai and TabAtkins were going to do some LC renaming...

[05:02:26.0000] <zcorpan_>
heh

[05:02:53.0000] <SimonSapin>
gsnedders: it doesn’t directly, but you can give it a parsed lxml tree

[05:05:23.0000] <zcorpan_>
annevk: can't find 'computedstyle' being discussed here recently

[05:05:39.0000] <gsnedders>
SimonSapin: Okay, so what I said isn\t bullshit. :)

[05:05:49.0000] <gsnedders>
zcorpan_: Who? (Where?)

[05:06:40.0000] <SimonSapin>
gsnedders: Do you need XHTML for some reason?

[05:07:13.0000] <zcorpan_>
gsnedders: wat?

[05:07:38.0000] <gsnedders>
zcorpan_: Who is implementing the parser?

[05:07:40.0000] <zcorpan_>
gsnedders: oh

[05:07:58.0000] <annevk>
zcorpan_: http://krijnhoetmer.nl/irc-logs/whatwg/20130701#l-308 and onwards

[05:08:01.0000] <gsnedders>
SimonSapin: No, just using it as an example on test-infra as something which doesn't support XHTML and HTML

[05:08:20.0000] <SimonSapin>
hum, ok

[05:08:22.0000] <SimonSapin>
fair enough

[05:08:49.0000] <SimonSapin>
gsnedders: mostly it’s that I don’t care about XHTML, and no-one really asked for it yet

[05:09:34.0000] <zcorpan_>
gsnedders: http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2013-August/040355.html

[05:09:41.0000] <zcorpan_>
annevk: thanks

[05:18:35.0000] <zcorpan_>
i don't mind calling it rawComputedStyle

[05:20:15.0000] <annevk>
Where are the attributes defined of http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.2.3.2 (Object.getPrototypeOf())?

[05:20:31.0000] <SimonSapin>
gsnedders: running W3C tests could be a reason to support XHTML in WeasyPrint, it’s easy enough to add

[05:22:18.0000] <gsnedders>
SimonSapin: Eh, I was more just coming up with examples.

[05:22:36.0000] <gsnedders>
annevk: What attributes?

[05:22:45.0000] <annevk>
gsnedders: property attributes

[05:23:14.0000] <gsnedders>
annevk: Oh, you mean of Object.prototypeOf?

[05:23:15.0000] <annevk>
Domenic_: why is it okay for Object.create() to do a null-check?

[05:23:31.0000] <annevk>
gsnedders: I was trying to ask that, yes :)

[05:24:14.0000] <gsnedders>
annevk: "Every other data property described in this clause has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified." — start of section 15

[05:25:29.0000] <annevk>
gsnedders: ta!

[07:51:11.0000] <annevk>
String.prototype.normalize o_O

[07:54:57.0000] <gsnedders>
Which does what?

[07:58:12.0000] <Domenic_>
annevk: assuming we are talking about the same thing: `null` is a valid prototype. It isn't used to signal default arguments at all.

[08:01:32.0000] <annevk>
Domenic_: ah right, doh

[08:40:07.0000] <jgraham>
Not really sure what to think about the whole CSS build system

[08:40:41.0000] <Ms2ger>
How about the part where it depends on an ancient fork of html5lib?

[08:47:08.0000] <jgraham>
Well the implementation obviously has issues :)

[08:47:25.0000] <jgraham>
But I meant the theory

[08:47:57.0000] <jgraham>
I get the impression that the CSS people are more interested in testing CSS, whereas everyone else is more interested in testing the platform as a whole

[08:48:17.0000] <Ms2ger>
I'm not sure what the CSS people are interested in

[08:48:25.0000] <Ms2ger>
It seems to be mostly "process"

[08:48:31.0000] <jgraham>
So, for example, depending on HTML in a test for a web api is fine

[08:48:43.0000] <jgraham>
Because we only really care if it works in browsers

[08:49:10.0000] <jgraham>
Not if it also works in java, or whatever

[08:49:39.0000] <jgraham>
But the CSS people want to maintain some seperation with the rest of the platform

[08:49:47.0000] <jgraham>
So they invent all this extra complexity

[08:51:06.0000] <Ms2ger>
The idea of testing in html/xml both seems somewhat interesting

[08:51:13.0000] <Ms2ger>
But nobody ever did that

[08:55:17.0000] <jgraham>
I guess it is interesting. It would be more interesting to know how many bugs have been found in CSS that occured in one but not the other. It seems quite unlikely at that level

[08:57:10.0000] <darobin_>
I think that CSS's obsession with testing in XHTML borders on madness :)

[09:08:59.0000] <MikeSmith>
css-wg-wtf.tumblr.com

[09:09:25.0000] <MikeSmith>
subtitle: "An embarrassment of riches"

[09:09:47.0000] <MikeSmith>
enough to keep somebody busy full time maintaining it

[09:46:32.0000] <jgraham>
odinho: Did you mean to mark https://critic.hoppipolla.co.uk/r/206 as reviewed?

[11:45:24.0000] <jgraham>
Ms2ger: do you remember if Aryeh's thing allows testing things that only reflect on setting?

[11:45:38.0000] <Ms2ger>
I'm pretty sure that's not supported

[11:47:34.0000] <jgraham>
TODO it is then :)

[11:52:31.0000] <Ms2ger>
I'll get back to it, promise

[11:52:36.0000] <Ms2ger>
Some time

[12:16:59.0000] <jgraham>
Ms2ger: Well I think it is done now apart from the a2b stuff that seems unrelated

[12:17:06.0000] <jgraham>
But I'm not sure :)

[12:17:20.0000] <jgraham>
So it just needs a little review

[12:37:53.0000] <jgraham>
What's "the MOP"?

[12:38:48.0000] <Ms2ger>
meta object protocol?

[12:42:26.0000] <Hixie>
how in the !@#$% did this page's encoding get _this_ messed up http://allworldcars.com/wordpress/?p=9815

[13:00:22.0000] <jgraham>
So I suppose the obvious followup is "what's a meta object protocol?"

[13:03:33.0000] <jgraham>
Oh, it's to do with being able to customise property access and things

[13:04:03.0000] <jgraham>
(I understand that isn't a definition of a protocol, before someone points it out)

[13:31:44.0000] <Hixie>
is FontLoader dead, or did it move somewhere?

[13:31:59.0000] <SimonSapin>
Hixie: moved

[13:32:16.0000] <SimonSapin>
http://dev.w3.org/csswg/css-font-load-events/

[13:38:47.0000] <hober>
MikeSmith: I am so sad that tumblr doesn't actually exist.

[13:44:07.0000] <Hixie>
SimonSapin: thanks

[13:59:37.0000] <tantek>
http://www.alu.org/mop/index.html ?


2013-08-07
[02:34:58.0000] <zcorpan>
is http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2433 an improvement on the readability of the diff? (click "rendered view", compare with http://html5.org/tools/web-apps-tracker?from=8035&to=8036 )

[02:36:25.0000] <Ms2ger>
Interesting

[02:37:46.0000] <hasather>
zcorpan: yea, that's a big improvement

[02:38:44.0000] <zcorpan>
now i wonder if it's good enough to implement it with a simple regex

[02:39:17.0000] <zcorpan>
simple regex will break with e.g. commented out tags

[02:39:55.0000] <zcorpan>
more complex regex can deal with that case but will still break with something else

[02:43:28.0000] <zcorpan>
tags wrapping lines probably just won't work

[02:44:06.0000] <zcorpan>
unless somebody comes up with something clever

[02:47:23.0000] <zcorpan>
consider e.g. a diff like http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2434

[02:50:11.0000] <annevk>
zcorpan: could you add a button to remove the elements for highlighting?

[02:50:56.0000] <annevk>
zcorpan: writing a simple tokenizer might be better

[02:51:38.0000] <zcorpan>
annevk: yeah.  and forget the state when switching from a removed line to another type of line

[02:51:42.0000] <annevk>
zcorpan: and then we could remove the tags by default, maybe, that might look best

[02:52:18.0000] <annevk>
people have been asking for a no-tags-view

[02:52:35.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2435

[02:53:37.0000] <annevk>
pretty cool

[02:53:57.0000] <annevk>
tokenizer would fix the <code \n title= issues

[03:29:33.0000] <MikeSmith>
zcorpan: nice

[03:39:05.0000] <MikeSmith>
Ms2ger: do you have an instance of https://bitbucket.org/ms2ger/test-runner on the Web somewhere?

[03:39:17.0000] <MikeSmith>
or does anybody else

[03:43:41.0000] <Ms2ger>
I think the webappsec people have a fork

[03:55:00.0000] <MikeSmith>
ok

[04:09:37.0000] <annevk>
So ArrayBuffer() and new ArrayBuffer() are identical.

[04:09:59.0000] <annevk>
I wonder if they did that because of compatibility or some other reason.

[04:11:38.0000] <gsnedders>
Even setting [[Prototype]]?

[04:14:14.0000] <zcorpan>
annevk: isn't it usual for constructors to have identical result when called without new?

[04:14:46.0000] <annevk>
zcorpan: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=22808 (I just emailed es-discuss about it)

[04:15:19.0000] <gsnedders>
zcorpan: If the [[Call]] returns an object, yes.

[04:16:16.0000] <zcorpan>
XMLHttpRequest() is the same as new XMLHttpRequest()

[04:16:51.0000] <annevk>
zcorpan: not in Chrome

[04:17:31.0000] <zcorpan>
oh. interesting. i thought everyone did that

[04:27:39.0000] <matjas>
https://media.blackhat.com/us-13/US-13-Stone-Pixel-Perfect-Timing-Attacks-with-HTML5-WP.pdf

[04:36:54.0000] <Ms2ger>
annevk, Chrome bug :)

[04:37:09.0000] <annevk>
Ms2ger: that depends on what we think is best

[04:37:42.0000] <Ms2ger>
Making them equivalent :)

[04:39:48.0000] <annevk>
false

[05:00:35.0000] <JakeA>
annevk: Where is XmlHttpRequest defined for worker scopes?

[05:01:01.0000] <annevk>
JakeA: http://xhr.spec.whatwg.org/ defines it for both simultaneously

[05:02:00.0000] <annevk>
JakeA: see http://lists.w3.org/Archives/Public/www-dom/2013JulSep/0101.html for some general issues about making it clearer what happens in workers (though for XMLHttpRequest I think it's pretty clearly outlined in the specification already, although not in the best possible way yet)

[05:03:00.0000] <JakeA>
hah, that answers my second question

[05:05:19.0000] <JakeA>
annevk: I can't actually find the definition, was expecting to see "partial interface WorkerGlobalScope" somewhere

[05:05:49.0000] <JakeA>
the xhr spec talks about workers, but can't find the bit where the interface is defined

[05:06:03.0000] <annevk>
JakeA: the interface is shared basically

[05:06:18.0000] <annevk>
JakeA: IDL puts them on the global

[05:12:31.0000] <JakeA>
I think my inexperience with IDL is showing. I see the definition of the XMLHttpRequest constructor, but I don't see the bit that says this constructor should be a property of Window instances (or WorkerGlobalScope instances)

[05:18:21.0000] <JakeA>
annevk: I see "If the JavaScript global environment is a worker environment, implementations must act as if Document and Document? in the above IDL were not exposed." - is that implicitly mandating that XMLHttpRequest should exist on WorkerGlobalScope?

[05:43:41.0000] <annevk>
JakeA: no, that bit is defined by IDL

[05:44:36.0000] <annevk>
JakeA: see http://dev.w3.org/2006/webapi/WebIDL/#es-platform-objects

[05:45:33.0000] <annevk>
JakeA: the bit that's currently missing is being explicit about the globals, hopefully that'll get fixed soonish

[06:10:47.0000] <JakeA>
annevk: got ya

[06:12:27.0000] <JakeA>
annevk: does that mean that HTMLDivElement should exist in a worker?

[06:12:57.0000] <annevk>
JakeA: everything Node is banned

[06:13:17.0000] <annevk>
JakeA: but again that's currently not as crystal clear as it could be

[06:13:42.0000] <annevk>
JakeA: see the email I pointed to and the bug report, once that's fixed the specifications will be better

[06:13:57.0000] <JakeA>
ahh ok

[06:14:26.0000] <JakeA>
annevk: So, it looks like Promise doesn't currently exist in workers in Chrome, how would I explain in a ticket that it should be there?

[06:14:37.0000] <JakeA>
Trying to work out how this stuff is defined

[06:15:01.0000] <annevk>
JakeA: it sounds like you haven't read that email yet ;)

[06:15:27.0000] <annevk>
JakeA: note also that it was in reply to a guy from Google who is probably implementing promises in Chrome at the moment

[06:16:42.0000] <JakeA>
annevk: I wasn't clear if there was nothing in the spec to say they should be in workers, or whether _something_ is there but it isn't clear

[06:16:57.0000] <annevk>
JakeA: fair

[06:17:12.0000] <JakeA>
annevk: Is it simply undefined at the moment, aside from that email?

[06:17:38.0000] <annevk>
JakeA: yes

[06:18:17.0000] <annevk>
I think we'll end up with something like [Global=Window|Workers] or some such annotation

[06:23:56.0000] <JakeA>
annevk: makes sense, cheers!

[06:50:40.0000] <annevk>
I tried to figure out a way to make zip URLs work after yet more private requests, but I couldn't: https://gist.github.com/annevk/6174119

[06:51:40.0000] <Ms2ger>
/me wonders why people would want to break new-less constructors

[06:52:05.0000] <annevk>
Ms2ger: some type of subclassing I don't fully grok yet

[07:16:44.0000] <Domenic_>
annevk: Ms2ger: I found https://github.com/slightlyoff/Promises/issues/71. It assumes you understand the @@create/constructor separation though and why that's necessary for subclassing.

[07:17:41.0000] <Domenic_>
annevk: very curious to hear a response to your thread though, I do wonder why ArrayBuffer behaves as it does.

[07:18:17.0000] <annevk>
Maybe because Array does the same. It seems quite a few built-ins have already spoiled the non-new well...

[07:18:54.0000] <Domenic_>
yeah, i would have preferred a consistent story there

[07:19:34.0000] <Domenic_>
if they end up saying "oh it's OK for ArrayBuffer because X," I look forward to finding out why X doesn't apply to everything else.

[07:19:42.0000] <Ms2ger>
You're about a decade late, I guess

[07:20:06.0000] <annevk>
Domenic_: yup

[07:20:15.0000] <zewt>
the tagline of web api development

[07:22:19.0000] <Ms2ger>
All too true :/

[07:31:40.0000] <annevk>
Domenic_: so playing with jQuery, it seems collection.find() basically runs the selector against each element in collection and returns the union of matched elements, in tree order

[07:32:10.0000] <annevk>
Domenic_: seems reasonable for find/findAll

[07:32:30.0000] <Domenic_>
annevk: yeah. I think that is what Elements#findAll does right now?

[07:32:48.0000] <annevk>
Domenic_: there's no Elements and there's no definition of that anywhere

[07:33:03.0000] <annevk>
Domenic_: there's only your gist, and I don't think it defines behavior

[07:33:10.0000] <Domenic_>
annevk: what does it not define?

[07:33:50.0000] <annevk>
Domenic_: oh wait

[07:34:56.0000] <annevk>
Domenic_: so your thing will fail on HTMLElement.prototype :/

[07:35:23.0000] <annevk>
Domenic_: can fix that in prose of course, but having no proper branding for elements sucks

[07:36:26.0000] <Domenic_>
annevk: I'm not sure it will *fail* exactly... what does calling HTMLElement.prototype.querySelectorAll(...) return?

[07:36:40.0000] <Domenic_>
yeah ok that doesn't work

[07:37:02.0000] <Domenic_>
(in Firefox at least)

[07:37:33.0000] <zewt>
annevk: does it not work to just pass through the base URL and origin to the "nested" URL? eg. so <img src=zip:/i!pony.gif> would parse out "/i" and "!pony.gif", then parse "/i" as a URL with the same base as the zip: was given

[07:37:45.0000] <zewt>
(guessing you've thought of this, trying to understand the problem)

[07:38:20.0000] <darobin>
/me finds out about peer dependencies, kiss Domenic_

[07:38:22.0000] <annevk>
zewt: that's the processing model proposed

[07:39:39.0000] <Domenic_>
darobin: :)

[07:40:34.0000] <zewt>
i guess the trickiness in the iframe case is if you expect to be able to serve a whole iframe and its resources from a ZIP, where the relative urls inside the iframe would be relative to the zip

[07:40:46.0000] <zewt>
allowing that sort of seems nasty

[07:41:16.0000] <Domenic_>
annevk: yeah this branding stuff is annoying, hmm. I guess Allen's answer here would be to just check for the existence of querySelectorAll. But that creates more issues. Still, I'd hate to add X.isX to everything just to avoid the X.prototype case.

[07:41:18.0000] <zewt>
i guess the same thing would happen if you expect to be able to enter a ZIP URL into the address bar and load a whole website out of it

[07:43:11.0000] <zewt>
don't know if that's something people really want (most cases that come to mine for me are zips of icons to get rid of sprite sheets, or zips of JS to avoid having to coalesce scripts)

[07:43:45.0000] <zewt>
(... mind)

[07:44:32.0000] <annevk>
Even in the case of only allowing fetching you have to special case zip to extract the correct origin out of the URL.

[07:45:37.0000] <annevk>
We could definitely make it fetch-only and the navigate algorithm would simply do something else.

[07:47:24.0000] <annevk>
Domenic_: that's not an answer actually

[07:47:35.0000] <annevk>
Domenic_: not if you want to explain the whole platform in terms of JavaScript

[07:47:40.0000] <zewt>
this really wants to be something like http://foo/bar!path; curse you, web-compatibility (another tagline)

[07:47:51.0000] <Domenic_>
annevk: it's not a good answer, but why wouldn't it be an answer?

[07:47:56.0000] <annevk>
Domenic_: the amount of instance checks the platform makes is enormous

[07:48:05.0000] <Domenic_>
annevk: ah i see what you mean

[07:48:23.0000] <annevk>
You want to solve this for the general case, not this specific case

[07:48:31.0000] <Domenic_>
annevk: that's a pretty compelling argument I guess.

[07:49:20.0000] <annevk>
Also, it seems querySelector is on HTMLElement.prototype

[07:49:52.0000] <annevk>
And it'll give you "TypeError: 'querySelector' called on an object that does not implement interface Element." of course.

[07:50:10.0000] <Domenic_>
Oh interesting, it's on Element.prototype in Firefox

[07:50:38.0000] <Domenic_>
oh but yes that's not the point you were making, i get it

[07:51:06.0000] <annevk>
Oh right. I meant you can invoke it from there.

[07:51:14.0000] <annevk>
Well, try to.

[07:59:59.0000] <annevk>
Domenic_: duck-typing btw also seems very bad

[08:02:24.0000] <Domenic_>
annevk: i am unsure either way on that.

[08:19:18.0000] <annevk>
zewt: yeah, if only we didn't allow everything single code point in paths...

[08:20:13.0000] <zewt>
tried to think of some weird codepoint that nobody is actually using, but hard to prove and would be a really nasty hack anyway...

[08:21:02.0000] <zewt>
i just thought of perhaps the nastiest hack in a while: use an unpaired surrogate! D:

[08:21:10.0000] <annevk>
U+0000 ...

[08:21:21.0000] <annevk>
that'd only work through script

[08:26:12.0000] <Ms2ger>
TabAtkins, yeah, if you could just convince Allen...

[08:28:52.0000] <annevk>
Ms2ger: context?

[08:29:02.0000] <Ms2ger>
The Word tweet

[08:31:52.0000] <Domenic_>
it's an Ecma requirement actually

[08:31:59.0000] <Domenic_>
Allen hates it quite a lot too

[08:32:28.0000] <Ms2ger>
That's FUD, afaict

[08:32:35.0000] <Domenic_>
(Although this Anolis HTML format thing seems kinda crazy to me, personally.)

[08:32:53.0000] <Ms2ger>
Why's thatN

[08:32:54.0000] <Ms2ger>
?

[08:33:11.0000] <Ms2ger>
Of course, any crazy parts are Bert's fault

[08:37:33.0000] <darobin>
/me smiles

[08:38:41.0000] <Domenic_>
I dunno, I'm sure it's all there for a good reason. But from the outside all these different random wrapper tags seem strange. <var title> vs. <code> vs. <a> vs. <span>, and they get translated between each other during a translation process... And, it's hard to see what it gains vs. markdown, in terms of real tangible gains. It loses readability and

[08:38:41.0000] <Domenic_>
authorability of the source pretty hard (having to know which esoteric wrapper tag you need for which type of term).

[08:39:23.0000] <Domenic_>
The only way I was able to submit pull requests was by copying and pasting similar paragraphs and tweaking wording.

[08:39:31.0000] <Domenic_>
(pull requests to the DOM spec)

[08:46:21.0000] <annevk>
Hold on. Hold on. HTML is an order of magnitude better than Word. Period.

[08:47:05.0000] <annevk>
If we can make Anolis better, I'm all for it, but lets not try to compare the two.

[08:47:53.0000] <annevk>
(AFAICT ECMA will do whatever TC39 wants so if Allen actually hates it (and I've anecdotal evidence to the contrary) it'd have changed I think.)

[08:52:46.0000] <Domenic_>
haha yes, HTML >>> Word definitely, Anolis comments were just an aside.

[08:53:10.0000] <Domenic_>
Didn't know that about Ecma, interesting.

[08:56:54.0000] <annevk>
Ecma seems to exist mostly around TC39. It's kinda weird.

[08:59:38.0000] <Ms2ger>
Domenic_, so var/code/a/span get linked, and then spans are dropped, because they're pointless

[09:00:00.0000] <Ms2ger>
get linked, that is, unless there's nothing to link to, which you can make explicit with title=""

[09:08:09.0000] <GPHemsley>
document.write() is frowned upon, right?

[09:08:29.0000] <Ms2ger>
Yeah

[09:15:36.0000] <annevk>
Hmm, should the signature of .find() be changed to find(relativeSelectors, referenceElements...)?

[09:17:35.0000] <Domenic_>
why wouldn't you just do referenceElements.find(relativeSelectors)

[09:18:21.0000] <Domenic_>
in jQuery you generally either do $(relativeSelector, referenceElement) or $(referenceElement).find(relativeSelector)

[09:19:01.0000] <annevk>
So shouldn't we provide both?

[09:19:22.0000] <Domenic_>
so you mean like window.find(relativeSelector, referenceElement)?

[09:19:46.0000] <annevk>
parentNode.find()

[09:20:18.0000] <Domenic_>
i don't see the utility. the reason jQuery has the two-argument form is because it's global and short

[09:20:36.0000] <Domenic_>
having to select a parent node and then use two arguments (for a total of three entities involved) is not a savings

[09:21:10.0000] <annevk>
well parent can be document

[09:21:14.0000] <annevk>
or a document fragment

[09:21:57.0000] <Domenic_>
i think it's easier to just do referenceElement.find(relativeSelector)

[09:22:26.0000] <Domenic_>
i am missing the use case that this does not cover

[09:24:34.0000] <annevk>
Yeah so I was reading this based on Selectors API 2, but that does seem kind of weird

[09:25:39.0000] <Domenic_>
ah right

[09:25:55.0000] <annevk>
?

[09:26:26.0000] <Domenic_>
as in, i forgot about selectors 2, but now i see where you're coming from

[09:26:52.0000] <Domenic_>
it is weird though, i don't see any reason why selectors 2 does that

[09:31:56.0000] <TabAtkins>
zcorpan: I dunno, but I'm willing to support that.

[09:32:08.0000] <TabAtkins>
zcorpan: (Read "I dunno" as "no".)

[09:36:03.0000] <annevk>
Domenic_: sounds good to me

[09:36:38.0000] <annevk>
Now I just need to figure out how to write down "Elements"

[09:42:12.0000] <Domenic_>
annevk: how will these things be created anyway? Element.find() returns an Element, but Element.findAll() returns an Elements?

[09:42:45.0000] <annevk>
well instances of Element would, yes, also instances of Document / DocumentFragment

[09:43:30.0000] <Domenic_>
right ok. so basically what selectors level 2 does, but a bit better.

[09:44:15.0000] <Domenic_>
and the reason for document having this is because document.documentElement.find is too long to type compared to document.find?

[09:44:35.0000] <Domenic_>
i guess the former wouldn't find "html", nevermind

[09:48:04.0000] <TabAtkins>
Hixie: I'm rewriting some of the font-load-events stuff this week, since jdaggett doesn't have time to rewrite to reflect the consensus from last f2f.

[09:51:10.0000] <annevk>
Also need to have @@unscopeable for find/findAll

[09:51:50.0000] <Domenic_>
because of the inline-event-handlers-implicitly-do-`with` thing?

[09:52:32.0000] <annevk>
No they do something weirder than that

[10:01:13.0000] <TabAtkins>
No, they're explainable with `with`, just three (I think) nested `with`s.

[10:03:01.0000] <jgraham>
...

[10:03:13.0000] <Domenic_>
:O

[10:04:12.0000] <TabAtkins>
Yes.

[10:06:57.0000] <annevk>
TabAtkins: that's weirder than implicit-with dude :p

[10:07:32.0000] <TabAtkins>
Bah, only by a linear factor.

[10:08:53.0000] <annevk>
Domenic_: http://www.whatwg.org/specs/web-apps/current-work/#event-handler-content-attributes step 6

[10:14:20.0000] <Domenic_>
annevk: cool thanks. different topic: what do you think of "modular" specs? whatwg has a lot, and it seems cool, but slightlyoff expressed skepticism on twitter the other day and i can see both sides.

[10:15:32.0000] <annevk>
Domenic_: It doesn't make much sense to me to put URL and Encoding in the same document. I'd love to hear the argument for that.

[10:15:44.0000] <Ms2ger>
"It's all part of the web"

[10:15:46.0000] <annevk>
Domenic_: HTML has a lot in the same document though, so not all of our stuff is modular.

[10:16:11.0000] <Domenic_>
sure, but pieces of html seem to keep breaking off.

[10:16:20.0000] <smaug____>
whatwg has a lot ?

[10:16:21.0000] <smaug____>
whatwg doesn't have too many specs

[10:16:40.0000] <Domenic_>
smaug____: https://github.com/whatwg/ seems like a lot to me

[10:16:53.0000] <Ms2ger>
Do you know how many the CSSWG publishes?

[10:16:54.0000] <annevk>
Domenic_: http://the-pastry-box-project.net/anne-van-kesteren/2013-may-7/ seems still relevant.

[10:17:01.0000] <Ms2ger>
And they cover a lot less

[10:17:13.0000] <annevk>
Domenic_: if that's a lot you haven't seen many W3C drafts I'm afraid. :/

[10:17:26.0000] <Domenic_>
hmm i guess so

[10:17:48.0000] <Ms2ger>
But I think HTML could benefit from being split up somewhat

[10:18:03.0000] <Ms2ger>
Though it's all intertwined, unfortunately

[10:18:36.0000] <smaug____>
yes, splitting HTML might improve readability

[10:19:01.0000] <Domenic_>
annevk: oh cool hadn't seen that link

[10:19:13.0000] <annevk>
Domenic_: I think the way to address slightlyoff's concern is by ensuring you know most of what's going on and ensuring some kind of consistency.

[10:23:46.0000] <annevk>
Hixie would prefer having most things in one document. But then taking over editing of the DOM specification is something he's not interested in, so...

[10:24:51.0000] <Ms2ger>
It would be interesting to generate a merged document, perhaps

[10:24:55.0000] <Ms2ger>
/me doesn't volunteer

[10:25:22.0000] <TabAtkins>
Hah, that spec list is *nothing* before the might of the CSSWG!

[10:25:27.0000] <annevk>
But to properly merge it you want to do more than just having it as a chapter.

[10:25:37.0000] <Ms2ger>
Right

[10:25:49.0000] <Ms2ger>
Hixie's build system doesn't help :)

[10:28:29.0000] <annevk>
Domenic_: also, I'll take slightlyoff's arguments here more seriously once he writes a couple of specs

[10:28:43.0000] <Domenic_>
oooh burnnn

[10:32:21.0000] <MikeSmith>
./topic I'll take slightlyoff's arguments here more seriously once he writes a couple of specs

[10:33:31.0000] <TabAtkins>
Hm, what's the special meaning of span/code/i/abbr/var in Anolis xrefs?

[10:33:55.0000] <Ms2ger>
TabAtkins, they're xreffed

[10:34:12.0000] <TabAtkins>
Well, yeah, but Domenic said that they have particular uses?  It's not recorded in the docs.

[10:34:40.0000] <Ms2ger>
Not really, no

[12:00:26.0000] <Domenic_>
annevk: ah damn, conflicting with Array.prototype.find, how did we miss that.

[12:15:15.0000] <annevk>
Domenic_: when was Array.prototype.find added?

[12:15:49.0000] <annevk>
https://gist.github.com/rwldrn/5079436 is from five months ago

[12:16:38.0000] <annevk>
Yours is about a month old and Selectors API 2 is way older... And jQuery uses find(). Seems pretty obvious why that was missed :)

[12:16:51.0000] <Domenic_>
annevk: yeah i think it was around then, es-discuss email maybe a month prior => TC39 meeting agreement => that gist

[12:17:09.0000] <Domenic_>
well, can't believe *I* missed that, I guess.

[12:18:22.0000] <Domenic_>
maybe query()

[12:18:29.0000] <annevk>
So Allen's position makes sense, but is completely out-of-sync with most of the platform. It might still work though.

[12:18:37.0000] <Domenic_>
right, yeah.

[12:18:55.0000] <Domenic_>
i think my followup email outlines something more concrete

[12:18:58.0000] <annevk>
select/selectAll

[12:19:06.0000] <Domenic_>
oh duh that's very nice

[12:19:13.0000] <Domenic_>
changing gist

[12:19:30.0000] <annevk>
The names might be taken unfortunately.

[12:19:33.0000] <Domenic_>
but yeah we still want to use native QSA, probably not triggering any old querySelectorAll method, for optimization reasons if nothing else.

[12:20:19.0000] <annevk>
Also, querySelector takes selectorList whereas this would take relativeSelectorList

[12:20:54.0000] <Domenic_>
selectorList?

[12:20:57.0000] <gsnedders>
What's the justification for the noscript parsing depending on the scripting enabled flag? It seems like it could easily result in different parse trees.

[12:21:12.0000] <annevk>
Domenic_: "img, p"

[12:21:39.0000] <annevk>
gsnedders: that's how <noscript> works

[12:21:42.0000] <Domenic_>
annevk: hmm ok. So you're saying just prepending `":scope "` doesn't do the trick.

[12:21:57.0000] <jgraham>
fwiw I think "select" is a better name than "find"

[12:22:08.0000] <Ms2ger>
gsnedders, isn't that the point?

[12:22:26.0000] <Domenic_>
jgraham: agreed, `select` is excellent.

[12:22:33.0000] <annevk>
Domenic_: you need to absolutize: http://dev.w3.org/csswg/selectors/#absolutizing

[12:23:07.0000] <gsnedders>
Ms2ger: I dunno. It just seems evil.

[12:23:09.0000] <annevk>
For once CSS has defined all the primitives we need.

[12:23:17.0000] <annevk>
Oh wait, it's not CSS, it's Selectors!

[12:23:27.0000] <gsnedders>
jgraham, annevk: why does html5lib impl the scripting enabled case?

[12:23:44.0000] <Domenic_>
what am i doing looking at selectors level 2 when we've got a level 4 hanging around!?!

[12:23:45.0000] <zcorpan>
anyone feel like implementing the hide-tags thing in web-apps-tracker?

[12:23:50.0000] <Domenic_>
:P

[12:23:57.0000] <annevk>
gsnedders: I think we wanted to closely align with browsers

[12:23:57.0000] <Ms2ger>
Domenic_, selectors level 4, selectors api level 2

[12:24:05.0000] <Ms2ger>
Domenic_, in case that was serious

[12:24:17.0000] <Domenic_>
Ms2ger: hah ok, yeah assumed it was something like that

[12:24:45.0000] <gsnedders>
annevk: Except it doesn't, because if they parse with scripting enabled they'll do stuff with document.write, and if they parse with it disabled they again won't match us.

[12:25:07.0000] <annevk>
gsnedders: sure sure, more closely

[12:25:38.0000] <annevk>
Selectors API 2 will be eaten by DOM. Then there'll be one Selectors left.

[12:25:41.0000] <zcorpan>
gsnedders: maybe html5lib should have it configurable

[12:25:55.0000] <annevk>
gsnedders: I'm not saying I still agree with that btw

[12:25:58.0000] <gsnedders>
zcorpan: Oh, it should.

[12:26:14.0000] <jgraham>
gsnedders: Because realistically people scraping websites expect that

[12:26:15.0000] <gsnedders>
zcorpan: Just nobody has bothered to do it. :)

[12:26:26.0000] <Domenic_>
i wonder if prototyping this in jsdom would be useful.

[12:26:43.0000] <TabAtkins>
Domenic_: The algorithm to absolutize a relative selector is in Selectors 4.

[12:26:49.0000] <gsnedders>
jgraham: Do they really get better resulting frm scripting enabled?

[12:27:15.0000] <jgraham>
Well it depends if you think that any websites use <noscript> in a useful way

[12:27:18.0000] <jgraham>
I doubt that

[12:27:37.0000] <Domenic_>
apparently discourse (codinghorror's new forum thing) is using it for seo

[12:27:41.0000] <gsnedders>
On the face of it, if we want to match browsers, we should be scripting disable.

[12:27:44.0000] <gsnedders>
*disabled

[12:27:51.0000] <Domenic_>
http://eviltrout.com/2013/06/19/adding-support-for-search-engines-to-your-javascript-applications.html

[12:27:56.0000] <jgraham>
Well I don't think it's that important

[12:28:04.0000] <Ms2ger>
So is the stuff that I didn't want in DOM in selectors?

[12:28:10.0000] <Ms2ger>
I guess I should rereview, then

[12:28:22.0000] <annevk>
TabAtkins: yeah just pointed to it. You guys are awesome for having done that already.

[12:28:22.0000] <Ms2ger>
And/or Lachy should rewrite his PR

[12:28:33.0000] <TabAtkins>
Ah, I see.

[12:28:49.0000] <TabAtkins>
Yeah, we defined it for Lachy, and sent him an email detailing what things he can change/remove from his spec.

[12:28:53.0000] <annevk>
Ms2ger: Given that he seems to be mostly MIA I'll have a go at it.

[12:29:08.0000] <Ms2ger>
Great

[12:29:38.0000] <annevk>
Ms2ger: I think I'll start with the non-controversial stuff. querySelector / querySelectorAll / matches. And then figure out how to do the other two and the new collection API.

[12:29:58.0000] <Ms2ger>
annevk, sounds like a sensible approach

[12:29:58.0000] <Lachy>
TabAtkins, yes, I need to deal with that

[12:30:06.0000] <Ms2ger>
Ah, there's Lachy

[12:30:43.0000] <annevk>
Whoa, a wild Lachy appears!

[12:31:04.0000] <gsnedders>
Only L3, though :(

[12:31:30.0000] <annevk>
Maybe Lachy is like http://en.wikipedia.org/wiki/Beetlejuice

[12:32:21.0000] <TabAtkins>
annevk: No, we only mentioned his name twice.

[12:33:29.0000] <Lachy>
TabAtkins, basicaly the reason I didn't update the selectors api spec is that Ive been intending for it to be superseded by DOM, which I need to finish incorporating it into.

[12:34:13.0000] <TabAtkins>
Lachy: kk, no problem

[12:35:06.0000] <annevk>
Ah, I just said "him"

[12:40:00.0000] <zcorpan>
TabAtkins: abbr/i/var aren't xreffed anymore (unless you turn on some flag)

[12:40:16.0000] <TabAtkins>
zcorpan: Oh, then the docs need to be updated.

[12:40:29.0000] <zcorpan>
likely :-(

[12:40:43.0000] <TabAtkins>
So what's still xreffed? <a>, <span>, <code>?

[12:40:44.0000] <Lachy>
annevk, I can do it.  Ive just been on extended holiday. But now that I have a new job, I can start getting back into spec work.

[12:41:02.0000] <zcorpan>
TabAtkins: <span> and <code>. <a> is TODO

[12:41:12.0000] <TabAtkins>
Heh.

[12:42:38.0000] <TabAtkins>
Do you just take any <code>/<span>, or is there some explicit flag marking it as an attempted ref?

[12:43:27.0000] <zcorpan>
oh i implemented <a> but Ms2ger hasn't merged yet. https://bitbucket.org/ms2ger/anolis/pull-request/11/enable-usage-of-instead-of-for-xrefs-also/diff

[12:43:56.0000] <Ms2ger>
Hrm, why didn't I?

[12:44:08.0000] <TabAtkins>
I can recognize anolis xrefs; they're not hard.

[12:44:09.0000] <zcorpan>
TabAtkins: any that doesn't have empty title attribute

[12:44:15.0000] <TabAtkins>
zcorpan: Okay.

[12:44:27.0000] <TabAtkins>
I'd probably want to trigger it via a command-line option, then.

[12:44:35.0000] <Ms2ger>
zcorpan, any reason not to merge it?

[12:44:38.0000] <TabAtkins>
Like --anolis-compat or something.

[12:45:15.0000] <zcorpan>
Ms2ger: i think i tested it, but pls look it over in case i did something utterly stupid

[12:45:44.0000] <Ms2ger>
On first sight, no, but the code is horrible

[12:46:10.0000] <zcorpan>
well yeah

[12:47:19.0000] <zcorpan>
TabAtkins: anolis also supports data-anolis-xref="" or some such but i think nobody uses it because it's just more verbose compared to title

[12:47:34.0000] <Ms2ger>
The anolis documentation uses it

[12:47:44.0000] <TabAtkins>
annevk: Yo, in http://example.com/foo and http://example.com/foo/, the two are identical except that the second has a second, empty path segment, right?

[12:48:00.0000] <annevk>
TabAtkins: yes

[12:48:06.0000] <TabAtkins>
annevk: Ok.

[12:48:28.0000] <Ms2ger>
zcorpan, anyway, merged it; I'll hear if it breaks anything

[12:49:07.0000] <annevk>
Lachy: where do you work now?

[12:49:10.0000] <zcorpan>
Ms2ger: thanks

[13:04:11.0000] <Lachy>
annevk, it's a company called Aspiro TV. They provide media streaming services and applications for their clients.

[13:05:00.0000] <Lachy>
I'm doing front end development for an application built as a hybrid web app/native app for devices

[13:10:33.0000] <zcorpan>
is firefox going to disallow <iframe src=viewsource:...> given the pixel perfect timing attack thing?

[13:10:57.0000] <JonathanNeal>
zcorpan: could always use viewsource.in :)

[13:11:54.0000] <zcorpan>
JonathanNeal: the user wouldn't be logged in via that service

[13:19:37.0000] <JonathanNeal>
gotcha

[13:24:20.0000] <GPHemsley>
Ms2ger: Did you ever turn on attribute sorting?

[13:24:55.0000] <Ms2ger>
I don't recall

[13:26:23.0000] <GPHemsley>
I don't think you did

[13:29:00.0000] <TabAtkins>
Okay, so if I add an --anolis-compat flag, that's just a matter of recognizing <code> as a maybe-link (I already recognize <i> as such), and recognizing data-anolis-xref as an alternative for title.

[13:29:10.0000] <TabAtkins>
And then doing the cross-spec stuff that you do differently.

[13:29:23.0000] <TabAtkins>
(My cross-spec stuff is based on data parsed by Shepherd.)

[13:29:56.0000] <TabAtkins>
Alternately, just ignoring that and getting Shepherd to parse more specs.

[13:30:13.0000] <TabAtkins>
Hm, Anolis doesn't type any definitions/links, right?  Every definition lives in a global namespace?

[13:30:40.0000] <annevk>
TabAtkins: cross-spec references are per spec

[13:30:53.0000] <TabAtkins>
Ah, bleh.

[13:31:09.0000] <annevk>
There's a public database

[13:31:18.0000] <annevk>
TabAtkins: https://github.com/whatwg/xref/

[13:32:05.0000] <TabAtkins>
Okay, so you just use PRs to amend the set of cross-refs?

[13:32:25.0000] <Ms2ger>
Pretty much everyone who uses it has push access, I think

[14:16:37.0000] <zcorpan>
funny when i file a bug and later it digs into issues that go over my head (https://www.w3.org/Bugs/Public/show_bug.cgi?id=18242 )

[14:24:31.0000] <Hixie>
zcorpan: not as funny as when you file a bug on a spec i edit and it goes over _my_ head (https://www.w3.org/Bugs/Public/show_bug.cgi?id=18242) :-P

[14:25:19.0000] <zcorpan>
heh

[14:26:00.0000] <Hixie>
in other news, i need a term that doesn't really mean anything, but expresses the property of A being something relative to B, without implying a mutual relationship, and that brings to mind the idea of control or authority

[14:26:19.0000] <Hixie>
to replace the term "A is friends with B" in the spec, which unfortunately does imply a mutual relationship

[14:26:37.0000] <Hixie>
/me hands out paint brushes and waits

[14:29:12.0000] <jgraham>
/me wonders what a non-mutual relationship is

[14:30:50.0000] <zcorpan>
jgraham: e.g. stalking maybe?

[14:31:02.0000] <jgraham>
Yeah, that was exactly the example I just came up with

[14:31:13.0000] <jgraham>
So there we go

[14:31:20.0000] <jgraham>
"A stalks B"

[14:33:58.0000] <Philip`>
"A is in unrequited love with B"

[14:34:32.0000] <zcorpan>
"A is boss over B"

[14:34:56.0000] <Philip`>
"A is secretly wiretapping B"

[14:37:19.0000] <zcorpan>
"A is twisting B's nipples"

[14:38:59.0000] <jgraham>
zcorpan: "boss over" has the inverse "employee of"

[14:39:41.0000] <zcorpan>
jgraham: ok, strike that one

[14:42:42.0000] <zcorpan>
Hixie: there, you have several to choose from :-)

[14:43:52.0000] <zcorpan>
"A is spying on B"

[14:45:38.0000] <jgraham>
"A is hiding from B"

[14:57:01.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=22625 - should the bugfiler do something smart with <sub>/<sup>? (or other elements?)

[15:00:25.0000] <TabAtkins>
Anyone know the progress of the "async image" stuff, where some attribute on the <img> would make it not fire the request until the browser thought it was about to display?

[15:02:35.0000] <zcorpan>
there's a bug filed about that at least

[15:03:22.0000] <MikeSmith>
TabAtkins: it that not the thing that somebody in the Web Performance group was speccing out?

[15:04:00.0000] <MikeSmith>
after scope-creeping it into an attribute for script and other elements

[15:04:24.0000] <zcorpan>
ah yeah

[15:06:21.0000] <MikeSmith>
TabAtkins: https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/ResourcePriorities/Overview.html

[15:08:20.0000] <TabAtkins>
MikeSmith: Yeah, that's what I'm looking for.  Cool.

[15:12:36.0000] <jgraham>
I'm surprised they didn't turn it into loadpriority=integer

[15:12:45.0000] <jgraham>
Over-engineer all the things

[15:14:50.0000] <annevk>
that's what we got requested for XHR

[15:14:54.0000] <annevk>
it may very well return

[15:15:36.0000] <annevk>
although talking to our HTTP guys a couple of weeks ago it seems that'd be pretty premature optimization, though lazyload might be good

[15:15:48.0000] <annevk>
even better would be to load the images the user is looking at first

[15:16:06.0000] <jgraham>
Yeah, I don't at all trust that authors are better at resource prioritization than browsers

[15:16:58.0000] <jgraham>
Well there's no reason you can't prioritise images that would be visible, if you are a browser

[15:17:22.0000] <jgraham>
It's not architecturally pure since it couples networking and layout, but that happens already, so...

[15:23:24.0000] <MikeSmith>
A is a classmate of B

[15:24:59.0000] <MikeSmith>
B is at risk of random bullying from A

[15:26:58.0000] <jgraham>
Oh, I guess just "A is at risk from B" works

[15:27:11.0000] <jgraham>
/me doesn't think Hixie will like these suggestions :)

[15:27:32.0000] <MikeSmith>
annevk: slightlyoff doesn't need to write specs; he just thinks of stuff and people implement it

[15:27:42.0000] <miketaylr>
"A is a kidney donor for B"

[15:27:49.0000] <MikeSmith>
heh

[15:29:05.0000] <slightlyoff>
damn, y'all

[15:30:56.0000] <annevk>
slightlyoff, thoughts on specification modularization in long form might work ;) I might not even disagree, it's just, you know, easier said than done

[15:31:39.0000] <slightlyoff>
annevk: sure

[15:32:11.0000] <slightlyoff>
but I warn you that my long form is LOOOOONG

[15:34:57.0000] <annevk>
slightlyoff: you're gonna write a spec to rule them all? ;)

[15:37:43.0000] <annevk>
/me -> zzz

[15:42:45.0000] <slightlyoff>
annevk: nah, but I'll make a nuanced case for an "integration phase"

[15:42:49.0000] <slightlyoff>
= )

[15:43:29.0000] <Hixie>
"A is in unrequited love with B" is good, but unfortunately implies a negative reverse relationship. "is boss over" is similar. "is at risk of random bullying from" is actually the best so far...

[15:43:42.0000] <annevk>
I can see XMLHttpRequest ending up in Fetch eventually. Dunno about URL and Encoding et al. Seem pretty unrelated.

[15:44:03.0000] <nimbu>
slightlyoff: WELCOME TO SFFFFFFFFFFFF

[15:44:14.0000] <slightlyoff>
thanks!

[15:45:31.0000] <annevk>
where the parties are full of minor internet celebrities and the streets full of hobos

[15:45:57.0000] <jgraham>
Hixie: "is scared of"?

[15:46:23.0000] <jgraham>
/me doesn't actually think that's a good idea but wants to know if that's the right kind of relationship

[15:48:21.0000] <Philip`>
"idolises"?

[15:48:55.0000] <annevk>
Hixie: tangentially?

[15:52:20.0000] <Hixie>
jgraham: yeah, that would work

[15:52:39.0000] <Hixie>
though it's more "is not scared of" that has the connotations i'm looking for

[15:52:45.0000] <Hixie>
"likes", maybe

[15:52:57.0000] <Hixie>
"is a fan of"

[15:53:13.0000] <Hixie>
"is familiar with"

[15:53:17.0000] <Hixie>
that one might work best so far

[16:11:50.0000] <Hixie>
i wish there was a "last person to touch this bug" field in bugzilla

[16:12:01.0000] <Hixie>
it would make a lot of my workflows easier

[16:51:25.0000] <TabAtkins>
"is threatened by"?


2013-08-08
[00:00:35.0000] <Ms2ger>
Is krijn_ down?

[00:31:43.0000] <krijn_>
Am I?

[00:31:43.0000] <krijn_>
Meh

[00:40:41.0000] <krijn_>
I'll let someone in the IT department know!

[00:45:26.0000] <matjas>
hmm, http://www.whatwg.org/specs/web-apps/current-work/multipage/entities.json is not in https://github.com/whatwg/html-mirror?

[00:46:06.0000] <matjas>
btw I disabled issues + pull requests on that repository, since it’s meant as a mirror only

[00:55:13.0000] <Ms2ger>
Is it in svn?

[01:05:12.0000] <zcorpan>
aw, i was hoping the nipple twister would end up in the spec :-(

[01:09:02.0000] <krijnh>
Someone needed a nipple twister?

[01:15:48.0000] <Ms2ger>
Those Dutchies...

[02:04:10.0000] <zcorpan>
MikeSmith: can we change default assignee in bugzilla for cssom specs?

[02:20:27.0000] <matjas>
Ms2ger: no, those files are not in SVN either

[02:20:56.0000] <matjas>
seems weird these files are not under version control

[02:24:40.0000] <annevk>
GAP IN THE LOGS!!1

[02:30:40.0000] <zcorpan>
annevk: good thing there's also logbot

[02:32:54.0000] <annevk>
matjas: entities.json is imported I think from http://www.w3.org/TR/xml-entity-names/

[02:33:02.0000] <annevk>
zcorpan: !

[02:34:56.0000] <annevk>
I wish Hixie put a day or so into cleaning up his scripts and open sourcing the whole thing. Would make things a bit more hackable.

[02:38:11.0000] <gsnedders>
Or just open source them as the mess they are and let others do the tidying.

[02:41:10.0000] <annevk>
Yeah either way. He'd need to refactor the bits where he puts his password directly in the file though.

[02:43:48.0000] <matjas>
annevk: +1

[02:43:55.0000] <gsnedders>
Or just open source it with [my_password_here] :)

[02:44:03.0000] <matjas>
gsnedders: +2

[02:45:00.0000] <aleray>
hi, I'm interested by the new audio possibilities in HTML5. I've seen some ways to load audio data using XHR. While it works for small files (like 1Mb), chromium always crashes on big files (like 50 Mb).

[02:45:29.0000] <gsnedders>
aleray: How are you trying to read the file from XHR?

[02:45:31.0000] <aleray>
is this XHR loading method appropriate for big files?

[02:46:14.0000] <aleray>
gsnedders, basically what is described at: http://www.html5rocks.com/en/tutorials/webaudio/intro/

[02:47:39.0000] <gsnedders>
aleray: Try setting xhr.responseType = "arraybuffer", you'll get a typed array back — might work better?

[02:47:52.0000] <gsnedders>
Oh, that tutorial already does.

[02:48:19.0000] <annevk>
aleray: our bad, we haven't figured out how to describe an IO Stream yet and therefore XMLHttpRequest does not expose one

[02:48:41.0000] <annevk>
aleray: although crashing is never an appropriate response so you might want to file a bug on Chrome

[02:49:54.0000] <aleray>
gsnedders, in the example i'm trying to follow 'arraybuffer' is indeed the specified response type

[02:50:27.0000] <aleray>
annevk, ok I will. SO it means that the audio api isn't mature enough yet to be used with large files?

[02:50:38.0000] <aleray>
oups s/SO/So/

[02:51:07.0000] <annevk>
aleray: did you try in Firefox? We might do better...

[02:51:30.0000] <annevk>
/me has not played with Web Audio, but knows why XMLHttpRequest doesn't support streaming data yet

[02:51:59.0000] <aleray>
maybe I can describe what I'm trying to achieve so you can give me some guidance if you don't mind

[02:52:06.0000] <gsnedders>
/me is surprised that a 50MB file doesn't work fine

[02:53:33.0000] <aleray>
basically I'm trying to do a two tracks audio editor. I have seven source files of about 50Mb each and I'd like the website editor to be able to place fragments of those files on the two audio tracks to create compositions.

[02:54:08.0000] <darobin>
who made https://github.com/whatwg/html-mirror ?

[02:55:36.0000] <annevk>
darobin: foolip

[02:56:48.0000] <annevk>
aleray: I don't know enough about this, but maybe segmenting the files would make it work better, i.e. implement the streaming yourself

[02:57:04.0000] <aleray>
gsnedders, annevk does it sound duable for you? My approach at the moment is to play media fragments (like file.ogg#t=10,20) one after the other (not yet a composition, more like a playlist actually).

[02:58:03.0000] <darobin>
annevk: ta

[02:58:05.0000] <aleray>
annevk, so cutting the files server side? and still using XHR to load the hard-cutted fragments?

[02:58:05.0000] <annevk>
aleray: it sounds fine, but honestly I don't know what the memory limits are these days

[02:58:18.0000] <annevk>
aleray: yeah, I guess, just so you have smaller files

[02:58:50.0000] <annevk>
aleray: you could also try to experiment a bit to see what the limit is in various browsers

[02:59:03.0000] <annevk>
aleray: e.g. if you only load one 50MB file, does that work?

[02:59:23.0000] <aleray>
annevk, thanks. I will try this!

[03:15:53.0000] <annevk>
smaug____: yo, can you look at the public-webapps thread regarding custom element callbacks?

[04:02:23.0000] <karlcow>
<Hixie> in other news, i need a term that doesn't really mean anything, but expresses the property of A being something relative to B, without implying a mutual relationship, and that brings to mind the idea of control or authority

[04:05:42.0000] <karlcow>
A is the teacher of B, A is the father of B, A is the boss of B, A is the captain of B (boat), A is the mountain guide of B, …

[04:47:44.0000] <zcorpan>
karlcow: teacher means B is student of A; similarly for the others

[04:47:54.0000] <zcorpan>
karlcow: the spec now has "is familiar with"

[04:52:43.0000] <karlcow>
zcorpan: agreed. Not sure about the context but "is a teacher" != "is a professor"  not bijective.

[04:52:56.0000] <Ms2ger>
pupil?

[04:53:08.0000] <karlcow>
ooops

[04:53:22.0000] <karlcow>
still too early…

[04:53:30.0000] <karlcow>
Ms2ger: yes :)

[05:17:57.0000] <Ancil>
annevk: hi

[05:18:48.0000] <Ancil>
annevk: I have question regarding XMLHTTPRequest and force preflight

[05:23:41.0000] <Ancil>
annevk: is it required to make preflight request for synchronous XHR with upload event listeners like onloadstart registered

[05:24:29.0000] <Ancil>
annevk: does a preflight request for both sync and async XHR when upload event listeners are registered

[05:24:40.0000] <Ancil>
annevk: but Chrome doesn't

[05:25:41.0000] <Ancil>
annevk: which is the right behavior?

[05:27:08.0000] <Ancil>
annevk:  *Firefox  does prefilight for both sync and async XHR with upload listeners

[05:28:59.0000] <annevk>
Ancil: Chrome never does a preflight for those?

[05:29:20.0000] <annevk>
Ancil: I think the specification requires one, but I keep forgetting why it does :/

[05:29:34.0000] <Ancil>
annevk: Chrome does preflight only for async XHR

[05:29:49.0000] <GPHemsley>
/me wonders if "A trusts B" is not already taken

[05:29:53.0000] <annevk>
Ancil: might be an oversight in Chrome then...

[05:30:06.0000] <annevk>
/me looks in spec

[05:30:49.0000] <annevk>
Ancil: ooh, so yeah, that seems like a Gecko bug

[05:31:00.0000] <annevk>
Ancil: the reason it's not required for sync is because the events won't dispatch anyway

[05:31:06.0000] <Ancil>
annevk: as per my understanding the spec says the "If the synchronous flag is unset and one or more event listeners are registered on the XMLHttpRequestUpload object, set the upload events flag. " and set force preflight when upload events flag is set

[05:31:11.0000] <Ancil>
yeah

[05:32:07.0000] <annevk>
Ancil: https://bugzilla.mozilla.org/enter_bug.cgi?product=Core pretty please

[05:33:14.0000] <Ancil>
annevk:  So the chrome behavior is the right one.

[05:33:20.0000] <annevk>
Ancil: yeah

[05:33:25.0000] <Ancil>
annevk: ok, I will log a bug

[05:33:30.0000] <annevk>
Ancil: ta

[05:33:39.0000] <Ancil>
annevk: thanks

[06:29:07.0000] <annevk>
MikeSmith: why are you reassigning resolved bugs?

[06:29:19.0000] <MikeSmith>
annevk: I'm just pushing buttons

[06:29:27.0000] <MikeSmith>
it was easier to do it that way

[06:29:34.0000] <MikeSmith>
the CSSOM bugs

[06:29:45.0000] <MikeSmith>
changed the default assignee

[06:30:03.0000] <MikeSmith>
and figured while I'm doing it to change the open ones too

[06:30:13.0000] <annevk>
It makes the history harder to trace and also spams me

[06:30:26.0000] <annevk>
Oh well

[06:30:32.0000] <MikeSmith>
sorry, didn't realize to after I pushed the button

[06:31:02.0000] <MikeSmith>
I can try to change them back if you want

[06:31:10.0000] <annevk>
nah leave it

[06:31:16.0000] <MikeSmith>
k

[06:31:18.0000] <Ms2ger>
They were probably wrong anyway

[06:50:12.0000] <annevk>
Couple of my Shadow DOM bugs were resolved with https://dvcs.w3.org/hg/webcomponents/rev/dbf47f602628 as pointer...

[06:51:12.0000] <annevk>
Thousands of lines of Apple plist disaster...

[06:51:55.0000] <Ms2ger>
Wow, that's pretty crappy

[06:52:55.0000] <annevk>
I guess I should just leave it and review again at some point in the future... Trying to figure out what changed seems like a non-starter. Even looking at just the HTML...

[06:53:57.0000] <Ms2ger>
"Refactor"

[06:54:01.0000] <Ms2ger>
"Deprecate"

[07:06:49.0000] <zcorpan>
good news, everyone, http://www.w3.org/TR/html/ now points to HTML5 instead of XHTML 1.0

[07:07:57.0000] <darobin_>
it only took... nah, I don't want to know how long it took in fact :)

[07:27:48.0000] <gsnedders>
/me wonders whether he should do as Bachelor's project something like proving various assertions in the HTML parser

[07:31:14.0000] <gsnedders>
(Things like whether you can ever end up in foreign content while not being)

[07:32:00.0000] <gsnedders>
(That all the fragment case parentheticals can only happen in the fragment case.)

[07:56:41.0000] <darobin>
gsnedders: or you could prove that the parser is Turing complete

[07:57:40.0000] <gsnedders>
That's trivial

[07:58:11.0000] <gsnedders>
Oh, wait, complete.

[07:58:12.0000] <gsnedders>
Duh.

[07:59:06.0000] <gsnedders>
You need a Turing machine is implement the parser, that's clear.

[08:04:54.0000] <gsnedders>
If you restrict the input to the parser to be finite, I'm fairly certain you don't need a TM to run it.

[08:05:50.0000] <gsnedders>
And I think you should be able to derive a proof based on that that the language itself is not Turing complete.

[08:08:20.0000] <darobin>
yes, if you can prove that you don't need a TM to process it (ie turn it into a DOM), then you can prove that it's not TC

[08:08:55.0000] <darobin>
but I wouldn't be shocked if there were nasty tricks you could do with adoption and such that would actually be universal

[08:11:27.0000] <gsnedders>
In general, you need a TM to process it because you need the infinite memory to deal with an infinite input stream.

[08:12:29.0000] <gsnedders>
Adoption is deliberately capped to avoid making it run-away powerful, but its cloning at all might be enough to be able to implement a TM on.

[08:12:30.0000] <darobin>
mmmm

[08:12:46.0000] <darobin>
I don't see why infinite memory means you need a TM

[08:12:56.0000] <darobin>
anything else can have an infinite memory

[08:13:44.0000] <Ms2ger>
FSMs can't

[08:19:57.0000] <darobin>
well, not absolutely everything :)

[08:20:14.0000] <darobin>
but pushdown automata can for instance

[08:21:03.0000] <Ms2ger>
Well, sure

[08:21:11.0000] <Ms2ger>
Those are almost Turing machines

[08:22:02.0000] <darobin>
almost doesn't count

[08:22:18.0000] <Ms2ger>
All you need is a queue instead of a stack

[08:23:14.0000] <gsnedders>
Do PDAs not have a finite input, though?

[08:24:01.0000] <ricea>
P is almost NP :-P

[08:24:11.0000] <Ms2ger>
That may be the case

[08:24:35.0000] <Ms2ger>
/me doesn't remember much attention given to infinite inputs

[08:27:05.0000] <gsnedders>
Sure, a PDA can use theoretically infinite stack and infinite states, but the input must be finite.

[08:27:24.0000] <gsnedders>
I believe only a unrestricted grammar allows infinite inputs, and hence a TM is needed on that basis.

[08:28:54.0000] <Ms2ger>
Infinite states too?

[08:29:44.0000] <gsnedders>
I believe so?

[08:29:58.0000] <Ms2ger>
My definition only allows a finite set of states

[08:30:34.0000] <Ms2ger>
(Rich, "Automata, Computability, and Complexity", p. 249)

[08:30:53.0000] <gsnedders>
No, you must need a TM to parse HTML, due to the multiple stacks, surely?

[08:31:06.0000] <Ms2ger>
Most likely, yes

[08:31:11.0000] <Ms2ger>
But that's not a proof :)

[08:31:18.0000] <gsnedders>
No, it's not. :)

[08:31:42.0000] <Ms2ger>
/me wonders if HTML contradicts the pumping lemma

[08:31:59.0000] <gsnedders>
Need to prove you cannot reduce to one stack. Which I think should be trivial to give an example of.

[08:32:09.0000] <gsnedders>
Once you've done that, then the proof is easy.

[08:34:23.0000] <gsnedders>
Ms2ger: It doesn't, if it is (like I think!) an unrestricted grammar.

[08:37:38.0000] <gsnedders>
(The pumping lemma obviously always holds true for unrestricted grammars.)

[08:38:50.0000] <gsnedders>
(More interesting, IMO, is whether *conforming* HTML is context-free)

[08:40:17.0000] <Ms2ger>
Mmm

[08:40:44.0000] <gsnedders>
*interesting question

[08:40:57.0000] <MikeSmith>
I would think it should be, as a goal of defining the conformance rules

[08:41:40.0000] <MikeSmith>
that is, make it a requirement that determines what the conformance rules are

[08:43:23.0000] <MikeSmith>
rather than what we have now, where the rationale for some of the conformance rules are just arbitrary (which is fine a long as they don't break the must-be-a-content-free-grammar requirement)

[08:47:33.0000] <MikeSmith>
in other news, nice to see discussions of fine points of implementation realities like http://lists.w3.org/Archives/Public/www-tag/2013Aug/0053.html (from Marcus) taking place on the TAG list. Massive contrast to where the TAG was at only a few months back.a

[08:47:53.0000] <gsnedders>
MikeSmith: What's the justification for requiring it to be context-free?

[08:48:33.0000] <gsnedders>
Heh, Marcus has been playing around with audio stuff for ages, mostly doing stuff like data URIs and the audio element.

[08:49:38.0000] <MikeSmith>
gsnedders: for one thing I guess it makes it expressable in some common formalisms that it otherwise wouldn't be expressible in

[08:50:45.0000] <MikeSmith>
I don't mean a formalism for expressing parsing rules

[08:51:11.0000] <MikeSmith>
but instead a formalism for expressing what a conforming document looks like

[10:50:20.0000] <TabAtkins>
So hey, fun proposals here from heycam about how to make the SVG DOM suck less: http://dev.w3.org/SVG/proposals/improving-svg-dom/

[10:50:30.0000] <TabAtkins>
Opinions desired on www-svg

[10:50:35.0000] <TabAtkins>
Or here, whatever.

[10:53:48.0000] <GPHemsley>
is there wide support for the 'let' keyword yet?

[10:54:00.0000] <TabAtkins>
GPHemsley: Supported in FF only right now, I believe.

[10:54:11.0000] <GPHemsley>
ah, that's what I thought

[10:54:12.0000] <GPHemsley>
thanks

[10:54:12.0000] <TabAtkins>
And you have to opt in via some incantation in type=''

[10:54:19.0000] <GPHemsley>
right

[10:54:22.0000] <GPHemsley>
var it is

[10:54:29.0000] <TabAtkins>
I recently switched my hobby hacking to FF just so I could get some of those sweet new features.

[10:54:55.0000] <Ms2ger>
Fx, you mean?

[10:55:00.0000] <GPHemsley>
yeah, they're pretty awesome

[10:55:03.0000] <TabAtkins>
Screw that.

[10:55:16.0000] <GPHemsley>
Ms2ger: I find that even official text often says "FF" or "Ff"

[10:55:32.0000] <Ms2ger>
They're wrong :)

[10:55:33.0000] <TabAtkins>
Quit trying to make Fx happen. It's not going to happen.

[10:55:35.0000] <zewt>
firefox = ff

[10:55:44.0000] <zewt>
sorry, that's the reality :P

[10:56:55.0000] <zewt>
(also, who the heck would think "fx" would be a good abbreviation for firefox? it's terrible)

[10:57:21.0000] <Ms2ger>
f5x

[10:57:26.0000] <TabAtkins>
f5x, *maybe*, due to existing precedent.

[10:57:33.0000] <TabAtkins>
Dammit, Ms2ger, you scooped me.

[10:59:51.0000] <Domenic_>
svg thing looks very cool

[10:59:52.0000] <zewt>
TabAtkins Ice Cream(r)

[11:18:06.0000] <zcorpan>
TabAtkins: hmm, i don't like the no-namespace proposal

[11:18:20.0000] <TabAtkins>
zcorpan: Yeah, me neither.  Just put them in the HTML namespace and be done with it.

[11:18:46.0000] <TabAtkins>
I'll be writing up my own feedback on the proposal, and it's part of what I'm responding with.

[11:18:55.0000] <zcorpan>
it's also wrong about createElement which always uses HTML namespace (per spec at least)

[11:19:30.0000] <TabAtkins>
Ah, that's probably why heycam|away did the null namespace thing.

[11:22:08.0000] <zcorpan>
i also see little reason to have both graphics and viewport compared to just graphics

[11:22:37.0000] <TabAtkins>
The main reason, I think, is that there are some attributes that make sense on the root viewport but not nested, and vice versa.

[11:22:47.0000] <TabAtkins>
So it's weird to reuse the same thing for both.

[11:26:36.0000] <zcorpan>
*shrug*

[11:29:56.0000] <Hixie>
heycam|away: http://dev.w3.org/SVG/proposals/improving-svg-dom/ is only an improvement if we remove the old stuff. If we don't, then we're just doubling the complexity.

[11:30:44.0000] <zcorpan>
yeah, i was about to say, i'm not sure i like the new namespace idea at all

[12:06:06.0000] <Ms2ger>
Hixie, so, an object that supports indexed or named getters needs to be proxy-like

[12:06:29.0000] <Ms2ger>
Hixie, so if Window has a indexed getter, it needs to be proxy-like as well

[12:06:42.0000] <Ms2ger>
(Ignore the named getter, because it ends up in the gps)

[12:06:44.0000] <Ms2ger>
gsp

[12:26:37.0000] <TabAtkins>
Hixie: We obviously can't remove the old stuff yet, but the plan is to eventually kill it, yes.

[12:26:55.0000] <TabAtkins>
By dangling irresistible carrots in the form of not-totally-fucked-up APIs.

[12:58:55.0000] <gsnedders>
MikeSmith: Why is that a use case? Hixie wouldn't accept that.

[12:59:19.0000] <Ms2ger>
Hixie doesn't accept a lot

[13:39:39.0000] <zcorpan>
TabAtkins: when has carrots enabled us to remove anything?

[13:40:14.0000] <gsnedders>
Ms2ger: Indeed, so MikeSmith need justify himself better.

[13:40:14.0000] <TabAtkins>
We kill prefixes, for example.  Not every time, but often enough.

[13:40:59.0000] <Ms2ger>
Well, yes

[13:41:16.0000] <Ms2ger>
Because everyone writes their code expecting the non-prefixed version

[13:41:30.0000] <Ms2ger>
And usually also all the possible prefixed ones

[13:44:12.0000] <gsnedders>
-I-will-prefix-your-face: true;

[13:48:44.0000] <Hixie>
ms2ger: maybe "proxylike" doesn't mean what i think it means? I mean "like WindowProxy".

[13:48:50.0000] <TabAtkins>
We're killing XSLT, for example.

[13:49:02.0000] <Hixie>
let's not count that chicken quite yet.

[13:49:07.0000] <TabAtkins>
Things do die from misuse, as least enough for them to be removed.

[13:49:14.0000] <TabAtkins>
Hixie: Yeah, sure.

[13:49:25.0000] <TabAtkins>
s/misuse/lack of use/

[13:50:41.0000] <gsnedders>
/me has doubts about whether XSLT will so easily die

[13:51:21.0000] <TabAtkins>
Even if it never does, though, I think the argument that you shouldn't ever duplicate functionality is wrong-headed.

[13:53:17.0000] <gsnedders>
Cut one off and two appear in its place… The web platform is a Hydra…

[13:54:15.0000] <TabAtkins>
True. ^_^^

[13:54:36.0000] <TabAtkins>
...I'm gonna pretend the third eye was intentional, and a commentary on gsnedder's quote.

[13:55:19.0000] <zewt>
*poke* _^^

[14:00:07.0000] <Hixie>
TabAtkins: generally i am strongly against duplicating the slightest thing, though i would obviously be open to arguments on a case-by-case basis. but this is a whole different scale of duplication.

[14:00:53.0000] <TabAtkins>
I know you are, and we've discussed this before, and I think you're really wrong.  It puts the potential confusion of authors having to look at two syntaxes over the persistent pain of authors having to use a single, terrible syntax.

[14:01:38.0000] <TabAtkins>
The SVG DOM can't be defended on *any* pragmatic grounds.  Its sole good point is that it already exists.

[14:05:08.0000] <TabAtkins>
In 5 years, there will be the SVG subset of HTML which works nice and makes people happy, and the weird legacy syntax that nobody likes and is only used by legacy pages.

[14:07:54.0000] <zcorpan>
if we do this, it should behind a pref for a few years so we can get it right instead of duplicating everything once a year

[14:08:20.0000] <Hixie>
the problem is that "is only used by legacy pages" is just not how it'll turn out

[14:08:35.0000] <Hixie>
because "legacy pages" are copied and pasted, are part of templates, are maintained for decades, etc

[14:08:47.0000] <Hixie>
in practice all it does is mean that authors have to know both languages

[14:09:01.0000] <Hixie>
and we have to define how they interact, because different templates end up in the same page using both features

[14:09:04.0000] <Hixie>
etc

[14:10:16.0000] <TabAtkins>
zcorpan: Yeah, definitely.

[14:10:50.0000] <TabAtkins>
Hixie: Transition pain is a worthwhile cost sometimes.

[14:29:27.0000] <Hixie>
TabAtkins: sometimes.

[14:29:40.0000] <TabAtkins>
That's what I said. ^_^

[14:29:47.0000] <Hixie>
i was agreeing :-)

[14:30:13.0000] <Hixie>
TabAtkins: a lot of the time, when people suggest replacing (duplicating) an api, though, they tend to overestimate the cost of the existing api, overestimate the worth of the new api in comparison, and underestimate the cost of the transition

[14:30:52.0000] <Hixie>
in part because they forget that the new api will never be as perfect as the design, due to the attrition experienced during initial implementation and deployment

[14:30:55.0000] <TabAtkins>
It's hard to overestimate the terribleness of the SVG DOM.

[14:32:29.0000] <zcorpan>
but the new API isn't awesome compared to just using DOM Core

[14:33:07.0000] <Hixie>
honestly i think the biggest pain of the SVG DOM is really that the whole approach of elements for graphics isn't particularly wieldy

[14:33:14.0000] <Hixie>
i don't know how much is just api decisions

[14:33:26.0000] <Hixie>
mathml suffers from a similar, but more obvious, problem

[14:36:53.0000] <zcorpan>
how much are people using the SVG DOM?

[14:37:44.0000] <TabAtkins>
zcorpan: Most of the new API is removing baseVal/animVal, and some of the more ridiculously overwrought mistakes, like .numberOfItems

[14:38:10.0000] <zcorpan>
TabAtkins: that doesn't answer my question :-P

[14:38:26.0000] <TabAtkins>
zcorpan: Sorry, wasn't answering that question.  ^_^

[14:38:35.0000] <TabAtkins>
zcorpan: Probably enough that we can't just drop it immediately.

[14:38:35.0000] <zcorpan>
oh, ok, heh

[14:38:45.0000] <TabAtkins>
If we could, then yay! Let's just do it.

[14:39:02.0000] <zcorpan>
let's find out before jumping through hoops we don't know we have to jump through

[14:40:39.0000] <Domenic_>
isn't d3 using the svg dom?

[14:40:54.0000] <Domenic_>
that's used by a ton of people, we've built like 5 apps for large banks just in the last 6 months

[14:42:32.0000] <TabAtkins>
Yeah, the modern untick in popularity, and attendant libraries, are the big thing that would prevent us from doing it, I think.

[14:43:02.0000] <zcorpan>
/me sees https://github.com/mbostock/d3/blob/master/d3.js#L5209

[14:44:58.0000] <pdr>
notice d3 doesn't use animValue and instead rolls it by hand

[14:49:07.0000] <zcorpan>
Hixie: i think non-configurable is the new term for ReadOnly

[14:49:43.0000] <zcorpan>
new as of ES5 or so

[14:49:56.0000] <Hixie>
/me mumbles something about this being a perfect example of duplication being confusing :-P

[14:50:05.0000] <heycam>
zcorpan, doesn't createElement() put an element into no namespace when you're in an XML document?

[14:50:12.0000] <heycam>
that was the main reason I allowed for both in the proposal

[14:50:41.0000] <zcorpan>
heycam: nope. http://dom.spec.whatwg.org/#dom-document-createelement

[14:51:10.0000] <zcorpan>
some browsers might still do that, i guess

[14:51:16.0000] <heycam>
zcorpan, huh!

[14:51:28.0000] <heycam>
yeah I think I just tested in Gecko and assumed that must be the standard behaviour

[14:51:53.0000] <zcorpan>
in gecko it depends on the mime type, iirc

[14:52:25.0000] <heycam>
mime type, and not "is an XML document" flag?

[14:52:41.0000] <heycam>
(maybe it's the same thing)

[14:52:41.0000] <zcorpan>
right

[14:52:57.0000] <Domenic_>
non-writable is the new ReadOnly

[14:53:03.0000] <Domenic_>
non-configurable is the new DontDelete

[14:53:26.0000] <zcorpan>
application/xhtml+xml -> HTML namespace, image/svg+xml -> SVG namespace, application/xml -> no namespace

[14:53:36.0000] <zcorpan>
Domenic_: oh, right

[14:54:16.0000] <heycam>
createElement() in an image/svg+xml document puts things in the SVG namespace? I don't think that's true is it?

[14:54:26.0000] <zcorpan>
maybe not :-)

[14:54:34.0000] <zcorpan>
might just be xhtml+xml

[14:54:41.0000] <heycam>
might be

[14:55:03.0000] <zcorpan>
i'm saying this from memory. might be all lies :-P

[14:55:04.0000] <heycam>
/me finds coffee

[14:55:09.0000] <zcorpan>
/me finds a bed

[14:55:12.0000] <gsnedders>
Per the DOM spec it always does HTML NS.

[14:55:40.0000] <zcorpan>
yes, that was established

[14:56:15.0000] <gsnedders>
I can't read, okay!

[14:56:24.0000] <zcorpan>
we were just making up what we think gecko does instead of testing what gecko does

[14:56:33.0000] <zcorpan>
because we lack coffee and sleep

[14:56:38.0000] <zcorpan>
anyway

[14:57:00.0000] <gsnedders>
Seem legit.

[15:01:36.0000] <smaug____>
heycam|away: implementations do something and specs say something else. It is not clear what is the right createElement behavior

[15:13:49.0000] <TabAtkins>
I forget - is there anything super terrible about subclassing DOMString so you can augment it with better stuff, but still have it look like a string?

[15:19:04.0000] <TabAtkins>
(Context: thinking about the CSSOM Values API again, and just turning it on by default by switching el.style.foo from returning a DOMString to returning this new DOMString subclass.

[15:19:05.0000] <TabAtkins>
)

[15:20:53.0000] <heycam>
TabAtkins, just that that's not really possible

[15:21:05.0000] <TabAtkins>
Heh, "just".  Why not?

[15:21:12.0000] <heycam>
otherwise I think that would have been a good plan for doing much of the SVG DOM improvements

[15:21:21.0000] <heycam>
it's not clear what you mean by "subclassing DOMString", really

[15:21:34.0000] <heycam>
DOMString is meant to represent a JS String value

[15:21:36.0000] <heycam>
not an object

[15:22:12.0000] <TabAtkins>
Yeah, can we just return something with String on its prototype chain?  Or maybe just has toString set, and the attributes have [PutForward]

[15:22:56.0000] <heycam>
my spidey sense is telling me this is a bad idea :)

[15:23:03.0000] <heycam>
nobody really uses String objects etc.

[15:23:28.0000] <TabAtkins>
The only difference between it and a string would be the typeof/instanceof behavior (probably not actually exercised in real code), and the fact that it can't be falsey (but do we ever return empty strings)?

[15:23:45.0000] <heycam>
and that you can't compare to String objects for equality with ==

[15:24:06.0000] <heycam>
since that checks for object identity

[15:24:16.0000] <TabAtkins>
You mean ===

[15:24:18.0000] <TabAtkins>
But yeah.

[15:24:21.0000] <TabAtkins>
But == works.

[15:24:25.0000] <heycam>
no...

[15:24:39.0000] <heycam>
== also checks for object identity if the two things are objects

[15:24:45.0000] <TabAtkins>
Oh, yeah.

[15:24:55.0000] <gsnedders>
String *objects* v. string *primitives*

[15:25:03.0000] <TabAtkins>
I thought you were talkinga bout things like "if(el.x == '5')"

[15:25:05.0000] <heycam>
ah

[15:25:08.0000] <heycam>
that would work

[15:25:15.0000] <gsnedders>
And you never /ever/ want to touch a String object.

[15:25:26.0000] <gsnedders>
So you never ever want to have String.prototype on a prototype chain.

[15:25:27.0000] <heycam>
but yeah, the falsey issue and equality checking were the reasons we discounted doing something similar for SVGAnimatedLength

[15:25:31.0000] <gsnedders>
Because string objects are evil.

[15:25:52.0000] <heycam>
there is that!

[15:26:00.0000] <TabAtkins>
gsnedders: Hrm, but I want something that acts like a string, but with more stuff.

[15:26:27.0000] <TabAtkins>
We could always have it just expose all the string methods manually, and have indexed properties for the characters in its string representation. ^_^

[15:27:16.0000] <heycam>
still, I wouldn't think it's out of the question for someone to do:  if (el.style.color == el.style.backgroundColor)

[15:27:21.0000] <heycam>
or something like that

[15:27:56.0000] <gsnedders>
TabAtkins: No you don't.

[15:28:09.0000] <TabAtkins>
heycam: True.

[15:28:14.0000] <TabAtkins>
gsnedders: I don't?

[15:28:54.0000] <gsnedders>
TabAtkins: No, you don't.

[15:29:05.0000] <TabAtkins>
I wasn't asking for a repeat. ^_^

[15:30:01.0000] <gsnedders>
I didn't!

[15:30:04.0000] <gsnedders>
I added a comma!

[15:30:12.0000] <TabAtkins>
Anyway, why don't I?

[15:31:39.0000] <gsnedders>
What's your use-case?

[15:32:06.0000] <gsnedders>
(You don't want to use string objects because they appear to be like string primitives, which people are used to, but then aren't in a few subtle ways.)

[15:32:37.0000] <TabAtkins>
Magically upgrade el.style.foo into a more full-featured object.

[15:32:51.0000] <gsnedders>
More seriously, how the hell did it get this late?

[15:32:56.0000] <TabAtkins>
Hahaha

[15:33:06.0000] <gsnedders>
I need to sleep, man.

[15:34:50.0000] <gsnedders>
TabAtkins: FWIW, I'd be tempted to try something with making it a new object with a valueOf that returned a string.

[15:35:07.0000] <gsnedders>
But idk, I haven't thought about it, and I need sleep.

[15:42:05.0000] <Hixie>
TabAtkins: you don't subclass DOMString, you make a new object for hte attribute, with a PutForwards on the attribute and a serializer on the object

[15:42:15.0000] <Hixie>
TabAtkins: it's controversial, but i like it. :-)

[15:42:24.0000] <TabAtkins>
That's fine with me, assuming it works.

[15:42:38.0000] <TabAtkins>
But it does mean that, for example, el.style.foo.slice(5, 10) doesn't work.

[15:42:45.0000] <TabAtkins>
While it did work back when you had a string.

[15:44:35.0000] <TabAtkins>
And I guess that "el.style.color == el.style.backgroundColor" stops working.

[15:44:43.0000] <TabAtkins>
But it does work if you compare it with a string literal.

[15:48:19.0000] <heycam>
I wonder if anybody ever gets trapped by `window.location == otherWindow.location` not doing what they expect

[15:50:19.0000] <TabAtkins>
I could certainly see myself falling into that, but I suppose I shouldn't admit that if that's what I'm wanting to do. ^_^

[16:14:34.0000] <TabAtkins>
Hmm... if we manually add the String operations to CSSValue, and add indexed properties for the characters of the string representation, then we'd avoid one of the big possible compat pitfalls.

[16:14:46.0000] <TabAtkins>
We wouldn't actually be a String subclass, but we'd act like it.

[16:20:33.0000] <TabAtkins>
heycam: ^^^ Maybe a [StringClass] attribute to automate the "I'm a fake string!" process? ^_^

[16:20:55.0000] <annevk>
TabAtkins: I think we went through this once before

[16:21:02.0000] <TabAtkins>
annevk: There you are!

[16:21:11.0000] <TabAtkins>
Yes, I was wanting a refresher on the problems.

[16:21:12.0000] <annevk>
I'm not really here

[16:21:32.0000] <annevk>
http://lists.w3.org/Archives/Public/public-script-coord/2010JanMar/thread.html#msg21

[16:21:35.0000] <TabAtkins>
d'oh

[16:21:40.0000] <heycam>
I don't think I'd be happy with fake strings, unless there were proper support for them in JS itself, so that == etc. could work

[16:21:52.0000] <TabAtkins>
Ah, excellent.

[16:22:03.0000] <TabAtkins>
heycam: Clearly we just need to wait for ES to do the operator-overloading thing.

[16:22:09.0000] <heycam>
maybe!

[16:22:12.0000] <TabAtkins>
Which is much closer to happening now.

[16:22:25.0000] <heycam>
do you have a pointer to any preliminary work on that?

[16:23:35.0000] <annevk>
Brendan did a presentation at the last TC39 meeting

[16:24:04.0000] <annevk>
http://esdiscuss.org/topic/typeof-extensibility-building-on-my-value-objects-slides-from-thursday-s-tc39-meeting has the details

[16:24:12.0000] <heycam>
thanks

[16:24:42.0000] <annevk>
Yeah, seems like that's what might work for something coolish here. Makes == work anyway.

[16:25:56.0000] <heycam>
so not being able to do anything useful with rectElement.x etc. was most of the reason for thinking about the "big switch" new SVG DOM

[16:26:10.0000] <heycam>
if we will be able to treat .x as a string and an object in some sane way, then maybe it's unnecessary

[16:29:55.0000] <TabAtkins>
rect.x already isn't a string, right?  It's an AnimatedLength.

[16:30:36.0000] <heycam>
right

[16:30:40.0000] <heycam>
but we want to make it a string

[16:34:14.0000] <TabAtkins>
I think a combination of stringifier + [PutForwards] may be enough.

[16:35:03.0000] <TabAtkins>
And it can just have multiple accessors: rect.x.px, rect.x.em, rect.x.string, etc.

[16:35:08.0000] <TabAtkins>
getters/setters, that is.

[16:36:16.0000] <annevk>
I feel like I wanted to bug heycam about something, and now I can't remember

[16:37:03.0000] <heycam>
TabAtkins, I dunno, I feel like I've considered that approach many times but felt it just didn't quite make it, due to ==

[16:37:17.0000] <heycam>
we've actually got the .px stuff in the spec at the moment, though nobody's implemented it yet

[16:37:21.0000] <TabAtkins>
Yeah, depending on value objects progress, that may not be good.

[16:37:42.0000] <TabAtkins>
heycam: I just want us to match CSSOM Values API.

[16:37:46.0000] <heycam>
sure

[16:38:00.0000] <heycam>
the answer then is not to define the CSSOM Values API like that ;)

[16:38:33.0000] <TabAtkins>
Heh.

[16:38:54.0000] <heycam>
are you working on that btw?

[16:39:04.0000] <TabAtkins>
Still, some lessons need to be taken from the Values API, like how to handle list-valued properties in a way that's consistent between always-been-a-list and turned-into-a-list-later.

[16:39:06.0000] <TabAtkins>
Kinda.

[16:39:20.0000] <TabAtkins>
It's been on my list for a while, but I'm bumping it up to help with SVG. ^_^

[16:39:26.0000] <heycam>
ok cool

[16:43:48.0000] <TabAtkins>
As far as I can tell (ignoring the CSS part for a bit, so we just have an SVG clean slate), the only reason to have it as a string is to allow for immediate string operations on the value.  Right?

[16:44:09.0000] <heycam>
yes

[16:44:19.0000] <heycam>
and for consistency with HTML attribute reflections

[16:44:36.0000] <TabAtkins>
Hm, okay.

[16:46:47.0000] <TabAtkins>
Hm, what about, in concert with CSSStyleDeclaration gaining a .values property that returns a new map of property names to the magical objects rather than strings, SVG elements also gain a .values property that returns a new map of attribute names to the magical objects.

[16:47:28.0000] <heycam>
something like that would be acceptable. better than xAsLength, yAsLength, etc.

[16:47:46.0000] <TabAtkins>
Yeah, definitely.

[16:47:55.0000] <TabAtkins>
And we could later do the same thing with HTML, if necessary.

[16:48:10.0000] <shepazu>
heycam, had you talked with anyone else (at moz or other implementers) about your proposal, and what did they say?

[16:48:30.0000] <TabAtkins>
(We're already hiding .values from the with(){} of event handlers, so this would catch that too.)

[16:48:40.0000] <heycam>
no. well I sent it to brian for get some initial comments, but that's all.

[16:48:49.0000] <shepazu>
just curious

[16:49:01.0000] <heycam>
and Tab, but he didn't reply quickly enough :)

[16:50:54.0000] <TabAtkins>
Yeah, sorry, I was slow in replying. :/

[16:52:51.0000] <heycam>
/me often has that problem, so doesn't blame anyone else for doing so

[16:53:04.0000] <heycam>
biab

[16:55:35.0000] <TabAtkins>
Oh, huh, I thought that images rotated along with the text in vertical writing modes.

[16:55:45.0000] <TabAtkins>
Let's see if FF has the same behavior as Chrome...

[16:59:05.0000] <TabAtkins>
Oh, FF doesn't do writing mode yet.  Wonderful.


2013-08-09
[02:09:55.0000] <annevk>
Domenic_: that's a pretty go

[02:10:01.0000] <annevk>
Domenic_: oops, compelling reply

[02:10:20.0000] <annevk>
Domenic_: thanks!

[03:38:06.0000] <annevk>
Woohoo, found more browser differences...

[03:38:19.0000] <annevk>
baseURI is apparently cloned in Gecko, not in Chrome.

[03:39:19.0000] <annevk>
Whoa, IE doesn't even support baseURI

[03:41:32.0000] <annevk>
I wonder if IE supports xml:base...

[03:52:42.0000] <annevk>
So, none of Chrome/Safari/IE support xml:base!

[04:14:16.0000] <MikeSmith>
annevk: crazy

[04:15:26.0000] <annevk>
Since xml:base is kinda crazy, I'd like to call this one an opportunity.

[04:15:34.0000] <zcorpan>
apparently my fingers think that </var> is an appropriate way to close any element

[04:16:52.0000] <zcorpan>
i guess killing xml:base also means complexity is reduced quite a bit

[04:18:08.0000] <SimonSapin>
So can we just remove that last test and move on? http://test.csswg.org/suites/css-style-attr/nightly-unstable/report/results.html

[04:20:05.0000] <zcorpan>
ok i've defined how declaration blocks are serialized, with shorthands. anyone want to review the diff before i commit?

[04:23:53.0000] <annevk>
Filed https://bugzilla.mozilla.org/show_bug.cgi?id=903372 on removing xml:base from Gecko

[04:24:10.0000] <zcorpan>
http://pastebin.com/3LRZVbLP

[04:24:58.0000] <annevk>
zcorpan: I don't think it make sense to talk about syntax

[04:25:13.0000] <annevk>
"If a property is specified more than once" is a syntax thing, it's not a model thing

[04:26:12.0000] <zcorpan>
annevk: yeah, i should probably hook into the cascade there in some way

[04:27:21.0000] <annevk>
zcorpan: some complexity can be removed I suppose, but <base> is still there

[04:52:12.0000] <gsnedders>
annevk: FWIW, xml:base is required in stuff like RSS/Atom

[05:15:02.0000] <zcorpan>
it could be made an RSS/Atom-specific attribute

[05:19:29.0000] <zcorpan>
TabAtkins: is there something in css-cascade that i can hook into for the purpose of saying which declarations go in to the CSSOM? it seems to talk about the processing going from an element and matching against it, but for CSSOM that's not what i need

[05:28:10.0000] <zcorpan>
TabAtkins: see the top of http://pastebin.com/3LRZVbLP for context

[05:50:12.0000] <annevk>
gsnedders: could care less

[05:51:58.0000] <zcorpan>
annevk: you mean couldn't?

[05:52:54.0000] <annevk>
zcorpan: oops

[05:55:15.0000] <gsnedders>
annevk: Does Firefox, at least on Android, not inc. a feed reader?

[05:56:33.0000] <annevk>
gsnedders: support for xml:base we need there is way different and less complex

[05:56:42.0000] <annevk>
gsnedders: can just be done at the application layer

[08:45:44.0000] <MikeSmith>
win 17

[08:52:36.0000] <sangwhan>
Has someone been crazy enough to polyfill CSS exclusions? :)

[08:52:50.0000] <sangwhan>
/me assumes not

[09:11:50.0000] <annevk>
So I wanted to put URL tests into some kind of universal format. But JSON doesn't allow comments. Suggestions?

[09:15:47.0000] <SimonSapin>
annevk: for CSS parsing tests I went with JSON + a readme

[09:37:09.0000] <Domenic_>
annevk: compelling reply to what?

[10:39:02.0000] <TabAtkins>
zcorpan: Actually, that's a lack in Syntax - I'm adding a paragraph now stating that style rules need to ignore duplicate declarations.

[10:39:16.0000] <TabAtkins>
zcorpan: Do you need a more abstract hook?

[10:40:17.0000] <TabAtkins>
Hm, though, you *do* need something more abstract I think, because Syntax probably doesn't want to do shorthand expansion.

[10:40:59.0000] <TabAtkins>
Since the actual list of properties that CSSOM will see should include shorthands (so it can serialize).

[10:42:36.0000] <TabAtkins>
zcorpan: Just let me know what you need and I can hook you up.

[13:49:11.0000] <Hixie>
did we decide we were going to use IDL for deciding what was visible in workers?

[14:40:29.0000] <Hixie>
heycam|away: any opinions on https://www.w3.org/Bugs/Public/show_bug.cgi?id=22646 ?

[15:26:31.0000] <Hixie>
fyi, whatwg.org will probably be offline for an hour around 11am-1pm August 14th, PST

[15:26:43.0000] <Hixie>
i doubt we'll be able to distinguish this from the times it's offline just randomly, but that's another story

[15:44:55.0000] <eXhumed_>
hi! I'm working on a web app that plays multiple <audio> elements in sync. I can do all sorts of operations (play, pause, stop, seek) and they will stay in sync. However, when I add another <audio> element with a local resource as its source, it does stay in sync with the others if I play them from the beginning, but when I seek (change .currentTime) the "local" <audio> element breaks the sync.

[15:46:54.0000] <eXhumed_>
(and by "local" I mean having an array with samples, encoding them into a wav file and setting it as the element's .src)


2013-08-10
[22:03:16.0000] <zewt>
yuck, why does canvas lineWidth ignore 0

[05:40:58.0000] <nginxuser>
which character web browsers uses for new line?

[06:02:01.0000] <GPHemsley>
Hixie: Any word on why?

[06:18:11.0000] <papercut>
anyone awake with experience in the depths of HTML5 <audio> elements?

[07:27:50.0000] <Ms2ger>
gsnedders, forever, eh?

[07:40:51.0000] <zewt>
holy shit what

[07:41:01.0000] <zewt>
i update firefox and "Firefox automatically sends some data to Mozilla"

[07:41:14.0000] <zewt>
... so they've gone from "can we do this?" to "we're just going to do it"

[07:41:49.0000] <zewt>
a fucking disgrace

[07:41:50.0000] <GPHemsley>
Math people: When would you use a^2 + b^2 + c^2 = d^2 ?

[07:44:23.0000] <GPHemsley>
ah, a cuboid

[07:45:06.0000] <Philip`>
GPHemsley: That sounds like the definition of a sphere

[07:45:59.0000] <GPHemsley>
Philip`: It's the Pythagorean theorem for finding the hypotenuse of a rectangular cuboid

[07:46:20.0000] <GPHemsley>
right rectangular prism

[07:46:36.0000] <GPHemsley>
it's a 3-dimensional triangle or something

[07:47:03.0000] <GPHemsley>
/me was reading the ES6 spec for Math.hypot()

[08:29:28.0000] <Philip`>
GPHemsley: Yeah, it's finding the straight-line 3D distance from (0,0,0) to (a,b,c)

[08:30:02.0000] <Philip`>
(so if you set the distance to be a constant, then (a,b,c) describe a sphere)

[08:55:05.0000] <gsnedders>
Ms2ger: Well, I'd be surprised otherwise. For plenty of reasons, plenty of which are personal.

[09:46:56.0000] <Ms2ger>
gsnedders, I see. I assume you're always welcome with us ;)

[10:17:18.0000] <jgraham>
Now you made me read gsnedders' twitter feed. And I feel compelled to point out that Carakan was 6, not 5. Unless I miscounted.

[10:19:17.0000] <Ms2ger>
Yay, http2

[10:28:17.0000] <gsnedders>
jgraham: Did I miscount?

[10:28:23.0000] <gsnedders>
One of us did.

[10:38:51.0000] <gsnedders>
Ms2ger: Well, as I said, studying in the immediate term.


2013-08-11
[03:17:33.0000] <heycam>
Hixie, yes I think tying it to [Global] makes sense. how about you use Anne's suggested syntax there, and I'll follow up with the Web IDL changes soon.

[03:20:10.0000] <Ms2ger>
heycam, did you fix that ToString thing we talked about a while back?

[03:20:25.0000] <heycam>
Ms2ger, no. I filed a bug tho

[06:06:32.0000] <jgraham>
gsnedders: jl, farre, danielsp, sof, you, me

[06:14:17.0000] <Ms2ger>
zcorpan: resolve your issues on https://critic.hoppipolla.co.uk/r/5?

[06:14:36.0000] <jgraham>
I was going to say that :)

[06:17:14.0000] <jgraham>
Ms2ger: thanks

[06:18:36.0000] <Ms2ger>
Np

[06:18:44.0000] <Ms2ger>
Needed something to do while compiling

[08:14:59.0000] <Hixie>
GPHemsley: underlying server is being updated

[08:15:03.0000] <Hixie>
heycam|away: k, thanks

[08:16:14.0000] <Hixie>
heycam|away: (i assume you mean my suggested syntax?) (bug 22646)

[12:49:30.0000] <Igor^>
should I use a element with display block directly in main section or should I put the a element isnside another section element?

[12:50:23.0000] <Hixie>
depends what you're doing

[12:50:30.0000] <Hixie>
but see whatwg.org's front page for maybe an answer

[12:50:38.0000] <Igor^>
ok thanks Hixie

[12:50:54.0000] <Igor^>
Hixie, you met Steve Jobs in live?

[14:00:09.0000] <heycam>
Hixie, (yep)


2013-08-12
[22:27:20.0000] <zcorpan>
Ms2ger: jgraham: done

[22:33:44.0000] <zcorpan>
TabAtkins: i thought implementations didn't store shorthands anywhere

[22:34:35.0000] <zcorpan>
TabAtkins: i'm not sure storing the shorthands helps much given that the values can be changed later and then you need to decide how to serialize anyway

[22:35:47.0000] <zcorpan>
TabAtkins: but yeah, if syntax eats the duplicates, and maybe i can point to css-cascade for the expansion of shorthands (since it has a paragraph about that already), maybe that works

[23:12:42.0000] <SimonSapin>
TabAtkins, zcorpan: Re Syntax eats the duplicate, it’s actually not that simple when you have !important

[23:13:08.0000] <zcorpan>
SimonSapin: oh right

[23:13:49.0000] <zcorpan>
so cascade is still the right place to say which decl should go in

[23:14:00.0000] <SimonSapin>
maybe

[23:15:59.0000] <SimonSapin>
zcorpan: well, that would be easiest: within valid declarations for the same longhand property (after shorhand expansion) in the same style rule, with one with the greatest Cascade precedence is kept

[23:16:10.0000] <SimonSapin>
that is, !important then source order

[23:28:41.0000] <SimonSapin>
zcorpan: I just wrote http://lists.w3.org/Archives/Public/www-style/2013Aug/0137.html

[23:39:20.0000] <zcorpan>
SimonSapin: thanks

[23:40:00.0000] <SimonSapin>
zcorpan: I’ll update Syntax one I figure out if Tab’s new processor does cross-spec linking to sections

[23:41:58.0000] <zcorpan>
why do you need sections?

[00:33:07.0000] <zcorpan>
/me ponders whether he should go to tpac

[00:51:41.0000] <SimonSapin>
zcorpan: linking to http://dev.w3.org/csswg/css-cascade/#cascading

[00:52:12.0000] <SimonSapin>
or linking to 'cascade' might work

[00:52:49.0000] <zcorpan>
i was going to say... :-)

[01:16:22.0000] <zcorpan>
were there other use cases for defaultStyle other than toggling display:none?

[02:11:43.0000] <jgraham>
zcorpan: Yay!

[02:12:19.0000] <zcorpan>
/me computes context, guesses the review

[02:13:49.0000] <jgraham>
Indeed

[02:13:57.0000] <jgraham>
Although also, you should go to TPAC

[02:14:15.0000] <Ms2ger>
Why?

[02:15:30.0000] <jgraham>
Ms2ger: Because it will increase the number of useful people there, making it more worth my while going :)

[02:15:53.0000] <Ms2ger>
You could not go yourself ;)

[02:16:42.0000] <jgraham>
So, I plan to sqaush that review before committing it because really there is no need for dozens of little bugfixes

[02:16:46.0000] <jgraham>
Anyone object?

[02:17:11.0000] <jgraham>
I guess that it means that Aryeh will be listed as the sole author and get all the credit/blame

[02:17:16.0000] <Ms2ger>
Sure

[02:39:40.0000] <jgraham>
OK, pull request #1 is no more

[02:39:50.0000] <jgraham>
Unles I screwed something up

[02:39:55.0000] <jgraham>
Which is possible

[03:18:15.0000] <zcorpan>
hmm, i need to remember to test both quirks and non-quirks before drawing conclusions

[03:19:13.0000] <zcorpan>
(i specced clientWidth as depending on whether it's top-level browsing context or not, but actually it depends on quirks mode)

[03:47:35.0000] <SimonSapin>
annevk: data:text/html,<style>body:before{content:"\d834\dd1e

[04:00:09.0000] <zcorpan>
TabAtkins: i understand that your preprocessor is optimized for css specs. how well would it work for dom specs?

[04:00:09.0000] <gsnedders>
jgraham: I was considering Carakan until shipping.

[04:01:14.0000] <jgraham>
gsnedders: sof worked on it before shipping

[04:01:28.0000] <gsnedders>
jgraham: Then so did Lachy, so you're still wrong.

[04:01:48.0000] <jgraham>
I think sof was on the project for longer

[04:02:21.0000] <jgraham>
Or he fixed even more bugs/unit time than I remember

[04:02:35.0000] <gsnedders>
(Disconcerting: I still know the Carakan bug number off by heart.)

[04:03:21.0000] <gsnedders>
jgraham: If you believe BTS, 2009-10-19 was Lachy, 2010-02-01 was sof.

[04:03:42.0000] <zcorpan>
jgraham: btw if there's anything else in critic that needs my attention, just ping me, i haven't caught up with that at all

[04:03:50.0000] <jgraham>
gsnedders: Oh

[04:03:58.0000] <gsnedders>
jgraham: I remembered them both being late Jan.

[04:04:01.0000] <jgraham>
zcorpan: I can't think of anything, but sure, will do

[04:04:16.0000] <zcorpan>
if there isn't, maybe i can mark all as read :-)

[04:04:33.0000] <gsnedders>
jgraham: I think Lachy really started slightly later, and sof slightly earlier. But still definitely Lachy first.

[04:04:40.0000] <jgraham>
gsnedders: I guess this is just more evidence that sof is an awesome bug killing machine

[04:04:52.0000] <gsnedders>
jgraham: Yes. Except when he introduces code-deleting bugs.

[04:05:01.0000] <jgraham>
s/awesome/awe-inspiring/, perhaps

[04:05:12.0000] <Lachy>
yeah, I didn't really start actively working on carakan for a while after that. I'm not sure when, and I can't remember what I was doing.

[04:05:47.0000] <gsnedders>
Lachy: Reducing sites and JS libraries. This was… about all we all did.

[04:06:22.0000] <Lachy>
yeah, I remember what I did when I really worked on carakan, but I can't remember what I was doing in the last few months of 2009 before I actually started work on carakan.

[04:06:34.0000] <zcorpan>
iirc i was officially carakan qa for a few days or so, but didn't actually do anything (or rather i was doing something else)

[04:06:37.0000] <jgraham>
(kilsmo also worked on it a bit earlier, mostly doing QAish bits. So the average number of people on the project was probably around 6)

[04:06:56.0000] <gsnedders>
jgraham: I thought kilsmo stopped more or less when I started, thus I averaged it out

[04:07:21.0000] <gsnedders>
(Per BTS he was working on it /far/ longer than is true.)

[04:07:33.0000] <jgraham>
Yeah, that could be true

[04:07:37.0000] <jgraham>
So maybe 5.5

[04:07:44.0000] <zcorpan>
i was supposed to write a testing framework, but kilsmo beat me to it (dunno if his version got used later or not)

[04:07:52.0000] <gsnedders>
zcorpan: Yes, it did.

[04:09:52.0000] <hsivonen>
I go outside network reach and the HTML parsing algorithm changes.

[04:10:04.0000] <gsnedders>
https://github.com/nolanw/HTMLReader — Obj-C + Cocoa HTML parser

[04:12:14.0000] <hsivonen>
hmm. "in foreign" rules in the spec don't have an entry for the end-of-file token...

[04:13:28.0000] <jgraham>
hsivonen: Well probably if you were in network range you would have objected to the change ;)

[04:15:09.0000] <hsivonen>
annevk: how do I ask http://html5.org/tools/web-apps-tracker to show a larger number of recent changes?

[04:15:34.0000] <zcorpan>
hsivonen: ?limit=1000

[04:15:37.0000] <annevk>
hsivonen: ?limit=1000 or if you feel like having fun, -1

[04:15:46.0000] <hsivonen>
zcorpan, annevk: thanks

[04:17:40.0000] <smaug____>
argh, I had forgotten to log out from gmail

[04:18:04.0000] <smaug____>
I should just delete the account

[04:20:06.0000] <hsivonen>
Am I failing to see something obvious? Where is the behavior of EOF in foreign content specced?

[04:20:47.0000] <Ms2ger>
Writing testing frameworks seems like something Opera likes a lot

[04:21:16.0000] <Ms2ger>
/me wonders why

[04:21:35.0000] <gsnedders>
/me remembers jgraham going home for the weekend and being like, "I'll write a test framework this weekend", and thus testharness.js was born.

[04:23:21.0000] <hsivonen>
there must be someone here who has already looked at EOF in foreign content

[04:24:50.0000] <Ms2ger>
Not sure what makes you think that

[04:28:14.0000] <zcorpan>
Ms2ger: maybe because we write tests a lot

[04:28:44.0000] <Ms2ger>
I guess people who write tests are more inclined to write test harnesses

[04:28:50.0000] <Ms2ger>
^full time

[04:29:15.0000] <hsivonen>
hah. the parsing algorithm now has inserting "in the appropriate place" as a defined concept

[04:29:52.0000] <hsivonen>
"do the appropriate thing" makes a lot of sense for a spec

[04:29:59.0000] <jgraham>
Well carakan needed a test harness because it had to run tests in the shell rather than in the browser

[04:30:48.0000] <gsnedders>
estest-futhark, jsunit, lots of custom one-offs, and testharness.js, I think basically accounts for all the test suites, ignoring opjsunit.

[04:30:56.0000] <jgraham>
Opera needed testharness.js because the thing we had before that dated to Hixie and had several deficiencies

[04:31:04.0000] <jgraham>
Like it discouraged writing tests

[04:32:24.0000] <Ms2ger>
jsframework.js?

[04:32:53.0000] <zcorpan>
that was jgraham's first attempt

[04:33:00.0000] <jgraham>
Oh, that was an earlier attempt to fix things

[04:33:56.0000] <Ms2ger>
I'm glad you came up with a better assert_throws for th.js :)

[04:37:12.0000] <jgraham>
I wish I had come up with a better way of composing assertions

[04:37:43.0000] <jgraham>
Like assert_false = invert(assert_true)

[04:39:17.0000] <gsnedders>
Did one of us not write something that did that?

[04:41:01.0000] <zcorpan>
jgraham: what would invert do? my guess that it just flips the condition seems wrong for a strict "false" check

[04:41:49.0000] <zcorpan>
e.g. 0 should fail both assert_true and assert_false

[04:42:37.0000] <gsnedders>
Equally an exception should fail both.

[04:45:14.0000] <jgraham>
Yeah, I guess it's not trivial

[04:45:31.0000] <gsnedders>
I remember hitting this problem before…

[04:45:39.0000] <jgraham>
But having to manually write an inverse for each assert is annoying

[04:45:50.0000] <gsnedders>
Maybe it was opjsunit I tried to do this with?

[04:46:02.0000] <jgraham>
gsnedders: Well it is easy to do not quite right

[04:46:18.0000] <gsnedders>
jgraham: Right. Which is why I suspected we tried.

[04:46:20.0000] <jgraham>
Maybe it isn't possible to do it right

[04:47:12.0000] <gsnedders>
I think you just need the actual assertion composed of smaller things.

[04:57:31.0000] <jgraham>
Have a server than can serve text files at least ;)

[05:01:57.0000] <Igor^>
we browsers  use utf8 decode characters and they display character references literally?

[05:07:05.0000] <zcorpan>
Igor^: what?

[05:07:31.0000] <Igor^>
unicode code point is saved on the hard disk using utf8 utf16 or ucs2 encodings for example?

[05:07:57.0000] <Igor^>
I am not sure if I use character reference in html file how it is saved on hard disk and how it is decoded with web browser then?

[05:37:39.0000] <hsivonen>
so we aren't supporting frames in templates anymore?

[05:38:09.0000] <hsivonen>
but now we are supporting <title>?

[05:38:19.0000] <hsivonen>
is there any logic to this?

[05:39:33.0000] <hsivonen>
<title> is conforming but <frame> isn't?

[05:42:49.0000] <gsnedders>
What has Hixie been smoking?

[05:47:26.0000] <Igor^>
can you answer me one question?

[05:47:48.0000] <Igor^>
If I use character reference in html file to represent a character and web server sends the file on browser request, how the browser will decode the character reference?

[05:47:48.0000] <Igor^>
My Nginx web server is configured to not send character encoding in the header I have set character encoding in the meta tag on page level to utf8.

[05:49:28.0000] <Igor^>
and what is this? http://html6spec.com/ :D

[06:03:48.0000] <zcorpan>
Igorrrrr: character references in HTML are parsed the same regardless of hte set encoding

[06:04:15.0000] <Igorrrrr>
zcorpan, please explain this to me noone can and I can't find such ino on the web :S

[06:04:28.0000] <Igorrrrr>
zcorpan, how you mean they are parsed same

[06:05:05.0000] <Igorrrrr>
ok so when I write character reference - &lt; in html file and save that file with html editor using utf8 encding how the character reference is saved on the hard disk?

[06:05:59.0000] <zcorpan>
there usually isn't any saving on the hard disk when loading a page in a browser (unless the user saves it to disk)

[06:07:09.0000] <zcorpan>
or do you mean just the step that you saved a file to disk from your editor?

[06:07:41.0000] <zcorpan>
in either case, &lt; is still &lt;

[06:08:20.0000] <zcorpan>
also, this channel probably isn't appropriate for this kind of question

[06:09:29.0000] <zcorpan>
or at least people here might not respond helpfully for this kind of question :-)

[06:17:56.0000] <Igorrrrr>
zcorpan, no I mean when I save the file on the server hard disk

[06:18:21.0000] <hsivonen>
yay spec bugs: https://bugzilla.mozilla.org/show_bug.cgi?id=884795

[06:18:46.0000] <zcorpan>
Igorrrrr: why not inspect the file with a hex editor and see for yourself

[06:19:32.0000] <Igorrrrr>
zcorpan, becasue I don;t have hex editor and I am not sure how to do it never done it

[06:21:33.0000] <zcorpan>
Igorrrrr: &lt; as utf-8 is the following bytes: 26 6C 74 3B

[06:25:02.0000] <Igorrrrr>
so zcorpan &lt; will be saved using utf8?

[06:25:30.0000] <zcorpan>
Igorrrrr: yes. if you save as utf-8...

[06:25:44.0000] <Igorrrrr>
ok thanks zcorpan

[06:25:53.0000] <Igorrrrr>
the web browser then when see character reference will represent literally the character instead of its meaning?

[06:27:09.0000] <zcorpan>
the browser represents it as <

[06:28:11.0000] <Igorrrrr>
zcorpan, literally not what it means

[06:28:16.0000] <Igorrrrr>
or as a string escaped

[06:32:35.0000] <Igorrrrr>
ok zcorpan care to answer 1 more question?

[06:32:38.0000] <Igorrrrr>
in &#x003C; how is "#x003C" part called without the ambiguous ampersand

[06:33:02.0000] <Lachy>
Igorrrrr, what do you mean by "ambiguous ampersand"?

[06:33:03.0000] <Igorrrrr>
we are finding definition on the #web ^^

[06:33:17.0000] <Igorrrrr>
just "#x003C" part

[06:33:23.0000] <Igorrrrr>
without "&;"

[06:33:26.0000] <Igorrrrr>
how it is called?

[06:33:37.0000] <hsivonen>
Igorrrrr: I think there isn't a specific term for that

[06:33:39.0000] <Igorrrrr>
html hexadecimal entity or? what is it's definition?

[06:33:59.0000] <Lachy>
that part doesn't have a name on its own. &#x003C; is a numeric character reference

[06:34:43.0000] <Igorrrrr>
so "lt" how is called?

[06:34:52.0000] <Igorrrrr>
ok then I guess they don;t have specific name ok

[06:34:56.0000] <hsivonen>
hexadecimal numeric character reference, rather

[06:35:02.0000] <Igorrrrr>
and "&;" is ambiguous ampersand?

[06:35:11.0000] <zcorpan>
no

[06:35:19.0000] <Lachy>
Igorrrrr, see the spec http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#character-references

[06:35:20.0000] <Igorrrrr>
no? -_- I though yes :(

[06:35:36.0000] <Igorrrrr>
I am Lachy but as I understood &; is ambiguous ampersand :S

[06:35:41.0000] <hsivonen>
Igorrrrr: & is an ampersand. whether it's ambiguous depends on context

[06:36:01.0000] <Igorrrrr>
see An ambiguous ampersand is a U+0026 AMPERSAND character (&) that is followed by one or more alphanumeric ASCII characters, followed by a U+003B SEMICOLON character (;), where these characters do not match any of the names given in the named character references section.

[06:36:10.0000] <Igorrrrr>
this is said in the spec so I guess I am right zcorpan ?

[06:36:34.0000] <zcorpan>
Igorrrrr: ...one or more alphanumeric ASCII characters...

[06:36:58.0000] <zcorpan>
"&;" doesn't have that

[06:37:36.0000] <zcorpan>
&lol; would have an ambiguous ampersand

[06:37:53.0000] <Lachy>
Igorrrrr, in case it's unclear, alphanumeric means A-Z a-z or 0-9. &#x3C; is followed by a #, not an alphanumeric character.

[06:39:17.0000] <Igorrrrr>
yeah sorry my fault

[06:39:32.0000] <Igorrrrr>
yeye my fault ok thank you all thanks

[06:39:43.0000] <Igorrrrr>
and sorry for offtopic discussion but I wanted to hear from the makers ^^

[06:39:47.0000] <Igorrrrr>
keep up the good work

[06:41:06.0000] <zcorpan>
np

[06:52:02.0000] <zcorpan>
"Copyright (c) 2013 Nolan Waite. All rights reserved." https://github.com/nolanw/HTMLReader

[06:56:58.0000] <jgraham>
zcorpan: It's iOS, he probably wants to chage you $0.99 to use it

[06:57:45.0000] <jgraham>
Although it also says public-domain

[06:58:05.0000] <gsnedders>
Where does it say that?

[06:58:15.0000] <gsnedders>
Oh, in podspec.

[06:58:44.0000] <gsnedders>
Someone should file an issue on that. I vote zcorpan or jgraham, as they noticed the contradiction.

[06:58:57.0000] <zcorpan>
i'll file

[07:00:49.0000] <zcorpan>
there

[07:01:06.0000] <gsnedders>
hsivonen: Also, now you're back from no-internet-land, you might be interested in all the various changes to html5lib-tests

[07:01:39.0000] <hsivonen>
gsnedders: ok

[07:01:59.0000] <gsnedders>
hsivonen: (Mainly in case you think I've accepted any pull request I shouldn't have)

[07:02:34.0000] <hsivonen>
/me is now working through bugzilla needinfos

[07:07:14.0000] <hsivonen>
annevk: so charset menu non-using sessions account for somewhere between 99.98% and 99.99% of Firefox sessions

[07:11:09.0000] <annevk>
hsivonen: wow

[07:11:49.0000] <annevk>
so .015 * .5B

[07:12:38.0000] <annevk>
that's still a lot of sessions, although the stats are a bit off I'm sure

[07:15:32.0000] <annevk>
jgraham: so there's input, base, canonical, and then up to nine components

[07:15:42.0000] <annevk>
jgraham: with maybe more components in the future, depending on how we do this

[07:16:02.0000] <jgraham>
annevk: Can you make the components optional somehow?

[07:16:20.0000] <jgraham>
Or perhaps they are deterministic once you have canonical?

[07:18:26.0000] <annevk>
Maybe if I write down the actual components and not what's exposed to JavaScript and then do the normalization later on...

[07:18:50.0000] <annevk>
The JavaScript components don't expose all the details. E.g. /html? and /html both have .search as ""

[07:19:52.0000] <annevk>
Maybe it could be something like input{space}base{space}[u:{username}][p:{password] etc.

[07:20:21.0000] <annevk>
And if you want a space, use \s or some such?

[07:20:49.0000] <annevk>
And \r, \n, \t should be there I guess and maybe some generic escape

[07:33:28.0000] <annevk>
I guess I could even optimize by making the base the same as the line before if you just use two spaces

[07:51:20.0000] <hsivonen>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=865916#c55

[07:53:03.0000] <annevk>
That's pretty interesting. I guess it means it's less and less needed to have this menu...

[07:56:23.0000] <hsivonen>
too bad I didn't include code to test for Ruby's Postulate

[08:17:11.0000] <zcorpan>
/me notices tpac TAG meetings are Member Confidential http://www.w3.org/2013/11/TPAC/

[08:18:13.0000] <hsivonen>
where's the reform?!?!

[08:18:56.0000] <zcorpan>
annevk: i'm very much dissappoint!!

[08:26:11.0000] <annevk>
I'll ask. I didn't even know.

[08:26:29.0000] <annevk>
You're all welcome though. The chairs can fix that error.

[09:14:26.0000] <annevk>
So I got this format now:

[09:14:30.0000] <annevk>
http://example\t.\norg http://example.org/foo/bar s:http  h:example.org p:/

[09:14:30.0000] <annevk>
http://user:pass@foo:21/bar;par?b#c  s:http u:user pass:pass h:foo port:21 p:/bar;par q:?b f:#c

[09:14:30.0000] <annevk>
http:foo.com  s:http  h:example.org p:/foo/foo.com

[09:15:39.0000] <annevk>
I guess I should just go with that for now and ask for wider input later...

[09:16:28.0000] <SimonSapin>
annevk: what if the path contains " q:"?

[09:16:43.0000] <annevk>
SimonSapin: what about it?

[09:17:02.0000] <annevk>
SimonSapin: ooh, that would become \sq:

[09:17:04.0000] <SimonSapin>
isn’t that syntax ambiguous?

[09:17:11.0000] <SimonSapin>
oh

[09:17:41.0000] <annevk>
I guess I could make it tab-separated as that's more conventional. I'm not a big fan of tabs

[09:19:08.0000] <jgraham>
No, tab seperated is bas

[09:19:10.0000] <jgraham>
*bad

[09:19:22.0000] <jgraham>
I would rather just escape spaces in some way

[09:19:30.0000] <jgraham>
So the \s thing seems fine

[09:19:41.0000] <annevk>
Why is it bad?

[09:20:38.0000] <jgraham>
Because literal tab characters are hard to enter in many editors

[09:20:52.0000] <jgraham>
And it's easy to accidentially add spaces rather than tabs

[09:21:38.0000] <annevk>
Yeah makes sense, that's why I preferred spaces too

[09:28:54.0000] <annevk>
And I guess I'll go with "#{anything}" lines are ignored and " #{anything}" at the end of line are ignored too for comments

[10:40:17.0000] <TabAtkins>
zcorpan, SimonSapin: Yeah, on further review, I think the squashing of duplicates goes in Cascade, not Syntax.  I'll rejigger things.

[10:41:23.0000] <TabAtkins>
zcorpan: It should work fine, I guess.  It just uses a bunch of Bert's preprocessor shortcuts, which Anolis also uses.  You'd just need to write your own boilerplate files (the stuff in the /include dir). (Feel free to PR me with them if you do so.)

[10:47:49.0000] <TabAtkins>
zcorpan: Note that Shepherd already parses non-CSS specs to look for anchors: http://test.csswg.org/shepherd/api/spec

[10:48:04.0000] <TabAtkins>
zcorpan: You can just ask plinss if you want more to show up in that list.

[10:49:13.0000] <zcorpan>
TabAtkins: ok. i'll look into moving over cssom at some point

[10:49:28.0000] <TabAtkins>
zcorpan: Cool.  I can play with it first if you'd like.

[10:49:48.0000] <TabAtkins>
Also: name suggestions for my processor?

[10:57:57.0000] <zcorpan>
some online name generator suggests Dead Fist

[10:58:38.0000] <TabAtkins>
zcorpan: SOLD

[11:06:05.0000] <zcorpan>
quick search for 'dead fist' gives http://en.wikipedia.org/wiki/Neil_Burke and http://www.fanfiction.net/s/7800685/1/Dead-Fist

[11:07:16.0000] <TabAtkins>
Both of these seem appropriate to link to my processor.

[11:09:39.0000] <zcorpan>
annevk: what is this url syntax thing for?

[11:10:02.0000] <annevk>
zcorpan: portable test format

[11:10:07.0000] <zcorpan>
ah

[11:10:47.0000] <annevk>
need something that supports lone surrogates and is fairly easy to write and supports comments

[11:10:53.0000] <annevk>
and since writing parsers is easy...

[11:13:12.0000] <zcorpan>
so you support character escapes for lone surrogates?

[11:13:33.0000] <annevk>
haven't really figured out exactly whether I want code units or code point escapes

[11:14:05.0000] <annevk>
I suspect \u{SIX HEX DIGITS} so e.g. \u00FFFD will be the format

[11:14:16.0000] <annevk>
well, unless code units, in which case \uFFFD

[11:14:54.0000] <annevk>
code units might be fine

[11:15:13.0000] <zcorpan>
i think code units seems saner if you want to represent surrogates

[11:15:40.0000] <annevk>
Unicode does both, but then maybe Unicode is insane

[11:18:01.0000] <zcorpan>
i guess more of an historical quirk

[11:21:47.0000] <TabAtkins>
Yeah, surrogates are a quirk.  UTF-16 is the weird insane encoding.

[11:23:14.0000] <TabAtkins>
annevk: What's the best way to invoke Encoding to ensure that CSS doesn't receive unpaired surrogates?

[11:23:30.0000] <TabAtkins>
annevk: None of the encodings allow them - you can only get them via setting manually-created strings in JS.

[11:23:37.0000] <annevk>
TabAtkins: you'll get surrogates through JS

[11:23:45.0000] <annevk>
TabAtkins: that's right

[11:24:16.0000] <TabAtkins>
Can we just say to parse JS strings as UTF-16, so those surrogates turn into fffd?

[11:25:44.0000] <annevk>
TabAtkins: You can have all the API interactions make use of http://dev.w3.org/2006/webapi/WebIDL/#dfn-obtain-unicode currently [EnsureUTF16] in IDL, however, it's not entirely clear what that buys us

[11:25:51.0000] <annevk>
TabAtkins: except for worse perf

[11:26:25.0000] <annevk>
I had this discussion with SimonSapin earlier

[11:26:31.0000] <TabAtkins>
Ah, kk. ^_^

[11:27:25.0000] <annevk>
We've been talking a lot about strings lately. Need to figure out the story for Servo too... My feeling at the moment is that we're rather stuck with the 16-bit integers

[11:27:33.0000] <SimonSapin>
JS strings are insane

[11:27:54.0000] <annevk>
Hmm, could be worse, like Python :p

[11:28:08.0000] <SimonSapin>
come on :p

[11:28:20.0000] <SimonSapin>
there are no accidental lone surrogate in python

[11:28:21.0000] <TabAtkins>
It's true, Python's strings are worse than JS.

[11:28:32.0000] <TabAtkins>
No, there's accidental encoding errors FUCKING EVERYWHERE.

[11:29:06.0000] <Domenic_>
ES6 supports \u{123456}

[11:29:11.0000] <SimonSapin>
TabAtkins: embrace the Unicode Sandwich: http://nedbatchelder.com/text/unipain.html#h_Pain_relief

[11:29:52.0000] <SimonSapin>
TabAtkins: JS doesn’t even have bytes, so sure you don’t get errors for byte/text conversions

[11:30:44.0000] <Domenic_>
Unicode in ES6 http://www.slideshare.net/domenicdenicola/es6-is-nigh/40 + http://www.slideshare.net/domenicdenicola/es6-is-nigh/41

[11:31:47.0000] <SimonSapin>
TabAtkins: also you could do yourself a favor and switch to Python 3

[11:33:34.0000] <TabAtkins>
Yeah, prolly should.

[11:33:39.0000] <SimonSapin>
TabAtkins: I doubt implementers will agree to do character decoding on JS strings

[11:34:07.0000] <zcorpan>
TabAtkins: just let the lone surrogates through, i'd say

[11:34:31.0000] <SimonSapin>
close you eyes and pretend you haven’t seen them

[11:34:36.0000] <zcorpan>
TabAtkins: like document.write and the DOM API

[11:35:00.0000] <SimonSapin>
also, "Unicode scalar values" is just ridiculous

[11:35:54.0000] <zcorpan>
put it on the band names wiki page

[11:35:56.0000] <annevk>
Domenic_: yeah, as a syntax feature that makes sense

[11:36:22.0000] <annevk>
Domenic_: haven't seen that iterator in the draft yet though

[11:37:32.0000] <Domenic_>
annevk: good point, i wonder if it was just forgotten or if consensus has changed since i put those slides together

[11:37:52.0000] <annevk>
I vaguely recall now it'll go in a module of sorts

[11:38:32.0000] <annevk>
Found out the other day ES6 has already been taking close to 4 years and the draft still has many holes...

[11:40:09.0000] <Ms2ger>
Ah, versioned standards

[11:43:46.0000] <zcorpan>
SimonSapin: fwiw getDefaultComputedStyle exists in gecko. whether it's expensive or not i dunno

[11:58:56.0000] <SimonSapin>
zcorpan: what does it do?

[11:59:28.0000] <zcorpan>
SimonSapin: basically the same as .defaultStyle in CSSOM

[12:00:00.0000] <zcorpan>
SimonSapin: returns cascaded style without author styles

[12:06:56.0000] <zcorpan>
or computed style

[12:07:32.0000] <zcorpan>
i guess i should remove defaultStyle

[12:08:10.0000] <zcorpan>
and being even more anal about use cases in the future

[13:02:37.0000] <zcorpan>
hmm, seems http://www.w3.org/2009/07/webidl-check doesn't check for errors in extended attributes

[13:02:47.0000] <zcorpan>
maybe that's intentional

[13:03:13.0000] <zcorpan>
but not good for spec-writing

[13:03:22.0000] <Ms2ger>
Extended attributes are for distributed extensibility

[13:04:28.0000] <Hixie>
hsivonen: can you elaborate on your question about <template> and <title>? I don't recall doing anything special for <title> when merging <template> in

[13:04:58.0000] <Hixie>
hsivonen: support for <frame> was dropped because as specified before it was quite broken, and actually making it work seemed like a lot of effort for something that has been deprecated for like 15 years

[13:05:19.0000] <zcorpan>
Ms2ger: then webidl shouldn't use them for its own features

[13:05:59.0000] <Ms2ger>
That's probably fair

[13:09:26.0000] <jsbell>
We could prefix (etc) the ones used by browser implementations to control code generation, if we can agree on a syntax. For blink we just have a doc that marks them as as non-standard or links to the standard clause.

[13:10:25.0000] <Ms2ger>
Well, the idea is that specs can extend it too

[13:10:33.0000] <Ms2ger>
I believe webgl even does that

[13:11:33.0000] <zcorpan>
nice, i'll replace all my spec prose with a custom extended attribute

[13:12:06.0000] <zcorpan>
the meaning of which i define in an appendix

[13:12:54.0000] <Hixie>
oooh, good idea

[13:13:05.0000] <Hixie>
we can replace all our specs with one spec that has one IDL block

[13:13:10.0000] <Hixie>
[Browser]

[13:13:25.0000] <Hixie>
[Browser] means "follow these specs..."

[13:13:52.0000] <Ms2ger>
"...and don't follow these"

[13:18:08.0000] <nimbu>
zcorpan: https://www.w3.org/Bugs/Public/show_bug.cgi?id=17518 most browsers dont obey that

[13:18:23.0000] <nimbu>
so i guess i would have to file browser bugsssss :||||||

[13:18:29.0000] <nimbu>
and i dont even remember or have the code.

[13:20:50.0000] <Hixie>
how the heck is this happening: https://bugzilla.mozilla.org/show_bug.cgi?id=884795

[13:20:57.0000] <Hixie>
happens in both chrome and firefox

[13:21:00.0000] <Hixie>
but i can't work out why

[13:21:28.0000] <Hixie>
there's no furthest block, so the AAA should just go 1-9 and stop, no?

[13:21:54.0000] <zcorpan>
Hixie: my testing suggests that blink and gecko do follow that. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2445

[13:22:11.0000] <zcorpan>
er

[13:22:22.0000] <zcorpan>
s/Hixie/numbu/

[13:24:19.0000] <Hixie>
http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2446

[13:24:34.0000] <Hixie>
removing the attribute fixes it

[13:24:35.0000] <Hixie>
wtf

[13:25:06.0000] <Hixie>
oh.... http://www.whatwg.org/specs/web-apps/current-work/#push-onto-the-list-of-active-formatting-elements

[13:25:30.0000] <Hixie>
the Noah's Ark clause

[13:26:49.0000] <Hixie>
but wait, no, that should still not matter

[13:32:31.0000] <Hixie>
ohhh, i get it

[13:33:52.0000] <zcorpan>
Hixie: "If formatting element is not the current node, this is a parse error. (But do not abort these steps.)" doesn't explain the behavior but still seems relevant

[13:34:00.0000] <zcorpan>
step 7 or AAA

[13:34:11.0000] <Hixie>
what's going on is this:

[13:34:23.0000] <Hixie>
after <code a> <code> <code><code><code>

[13:34:38.0000] <Hixie>
there's four <code>s on the formatting list

[13:34:43.0000] <Hixie>
and five on the stack

[13:34:55.0000] <Hixie>
and the ones on the list are given precedence for some reason

[13:35:12.0000] <Hixie>
so then the last three get closed and you see the next </code>

[13:35:29.0000] <Hixie>
and it closes the first one (<code a>) rather than the second one, because the first is on the list and the second isn't

[13:36:50.0000] <zcorpan>
so it should look at the stack of open elements and not leave the list of formatting elements alone if it's not in that list?

[13:37:37.0000] <zcorpan>
and step 7 should probably also just look at the stack of open elements

[13:39:09.0000] <Hixie>
I think the solution is to make the AAA check the stack first and only do its stuff if the current node isn't a matching formatting element, yeah.

[13:41:30.0000] <Hixie>
/me files a spec bug

[13:41:34.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=22926

[16:29:13.0000] <Igor^>
can I send mail from html with a element?

[16:32:46.0000] <Hixie>
you can use <form> to prompt the user's e-mail client to be prefilled with an e-mail

[16:32:58.0000] <Hixie>
but you can't send mail directly (it would be used for spam)

[16:36:25.0000] <Igor^>
ok thanks Hixie


2013-08-13
[17:29:30.0000] <Igor^>
what means sandbox attribute with value of ?

[18:11:24.0000] <Domenic_>
man we still haven't figured out html parsing? I thought that was the grand triumph of the 00s!

[18:17:51.0000] <Igor^^^>
some browsers does not have user agent?

[21:49:04.0000] <accessPoint>
external css reduce page open time?

[22:05:41.0000] <TabAtkins>
Man, why are we suddenly getting so many people asking basic webdev questions lately?

[22:10:11.0000] <tantek>
TabAtkins - insufficiently googleable FAQs? E.g. on wikis?

[22:10:33.0000] <TabAtkins>
tantek: A lot of these are things you can look up or learn yourself.

[22:10:41.0000] <tantek>
like LMGTFY style?

[22:11:00.0000] <tantek>
maybe this channel is advertised as a support forum somewhere ;)

[22:11:35.0000] <TabAtkins>
That actually seems halfway likely - several of the people that have showed up seem to have similar varieties of poor English.

[23:00:22.0000] <hsivonen>
Hixie: maybe you didn't do anything special for title, but the patch that was written to bring Gecko up to spec had new code for <title>

[23:01:01.0000] <Hixie>
odd

[23:01:06.0000] <Hixie>
i wonder why

[23:01:09.0000] <hsivonen>
Hixie: I'm not in any way objecting to not supporting <frame>, FWIW

[23:01:15.0000] <Hixie>
ok good :-)

[23:01:35.0000] <hsivonen>
Hixie: well, <title> is special

[23:01:50.0000] <Hixie>
i don't recall it being particularly special for <template> purposes, though

[23:02:25.0000] <hsivonen>
Hixie: parses like in "in head", so you at least have to notice and do the "in head" stuff

[23:04:48.0000] <Hixie>
is there new code for all the other in-head elements too?

[00:35:35.0000] <hsivonen>
Hixie: the other "in head" elements were already covered

[01:20:10.0000] <zcorpan>
http://lists.w3.org/Archives/Public/www-style/2013Aug/0168.html is this something that css filters can do?

[01:33:29.0000] <matjas>
annevk: re: surrogates, anything in particular you’re working on?

[01:35:27.0000] <annevk>
matjas: we've been having some office debates about Servo and Rust, strings in CSS, how Unicode 2.0 fucked it all up, and then JavaScript some more by copying Java and not fixing it in time

[01:36:13.0000] <annevk>
Basically, I don't see a way out of the array of sixteen-bit integers madness...

[01:36:22.0000] <matjas>
:(

[01:36:41.0000] <matjas>
/me has horrible http://mathiasbynens.be/notes/css-escapes#other flashbacks

[01:38:19.0000] <annevk>
matjas: yeah, SimonSapin will fix that, presumably by not letting in surrogates via escapes, but you can still get them in CSS via JavaScript, so CSS' backend will have the sixteen-bit integers regardless

[01:38:55.0000] <annevk>
(And having a different backend for CSS and its DOM doesn't seem all that beneficial anyway, so just as well.)

[01:58:34.0000] <SimonSapin>
matjas: "Since there is currently no way to escape non-BMP symbols in a cross-browser fashion…" this is also fixed now

[01:59:07.0000] <SimonSapin>
now that webkit supports a single hex number above FFFF

[02:00:38.0000] <SimonSapin>
annevk: you can always encode codepoints (not scalar values) in whatever way

[02:13:10.0000] <annevk>
SimonSapin: anything else seems unlikely to have good perf

[02:13:24.0000] <annevk>
SimonSapin: also, code points*

[02:44:14.0000] <matjas>
SimonSapin: I know, I was the one who discovered and filed that bug

[02:44:31.0000] <matjas>
SimonSapin: point is, on mobile a lot of older WebKits are in use, which still have the issue

[02:54:33.0000] <annevk>
Hmm, I wonder how hard https://bugzilla.mozilla.org/show_bug.cgi?id=888093 would be to implement. They'd be extremely useful.

[03:03:42.0000] <jgraham>
Depends how intrinsically difficult they are, I guess. There seems to be a fair amount of accidential complexity in fromCharCode, but not an unmanageable amount

[03:07:49.0000] <matjas>
annevk: there are already polyfills for these written in ES5

[03:08:02.0000] <annevk>
matjas: sure

[03:08:10.0000] <annevk>
matjas: not a fan of polyfills

[04:07:26.0000] <jgraham>
Ms2ger: I thought I reviewed some file api tests?

[04:07:48.0000] <Ms2ger>
Oh, right

[04:07:59.0000] <Ms2ger>
Someone needs to fix your comments

[04:08:05.0000] <jgraham>
Yeah

[04:08:16.0000] <Ms2ger>
Which I guess means me

[04:08:28.0000] <jgraham>
Well for the Moz. submission at least

[04:08:46.0000] <jgraham>
And the ms2ger submission

[04:09:08.0000] <jgraham>
Maybe zcorpan has time to fix https://critic.hoppipolla.co.uk/r/32 ?

[04:09:18.0000] <jgraham>
I don't think there's anything big there

[04:10:17.0000] <annevk>
hmm, writing a parser for this URL test format is more complicated than anticipated

[04:10:35.0000] <jgraham>
https://critic.hoppipolla.co.uk/r/238 still needs review though

[04:10:35.0000] <annevk>
maybe I should've taken more shortcuts

[04:10:46.0000] <jgraham>
annevk: Which language?

[04:10:54.0000] <jgraham>
Javascript?

[04:10:56.0000] <annevk>
yeah

[04:12:49.0000] <zcorpan>
annevk: what's complicating?

[04:12:59.0000] <jgraham>
Well if you have specific questions, I am happy to help

[04:13:19.0000] <annevk>
it's gonna be fine, it's just more work than I thought it'd be

[04:13:20.0000] <jgraham>
Not that I will necessarily be much help :)

[04:13:50.0000] <zcorpan>
/me was mostly curious

[04:14:46.0000] <annevk>
zcorpan: just the sheer number of states needed to do it on a per-character basis

[04:14:55.0000] <annevk>
zcorpan: and thinking of all the implications

[04:15:55.0000] <jgraham>
Hmm, isn't it relatively simple?

[04:16:28.0000] <jgraham>
You split on whitespace

[04:16:46.0000] <annevk>
that's cheating :)

[04:16:49.0000] <jgraham>
Then for each token containing a ":", split on that

[04:16:55.0000] <jgraham>
Then replace escapes

[04:17:02.0000] <annevk>
but okay, maybe I should do that

[04:17:09.0000] <jgraham>
Then pass the resulting tokens to a parser

[04:17:21.0000] <annevk>
I was trying to write something that didn't do double or triple passes

[04:17:44.0000] <jgraham>
Well you could do it one character at a time ofc, but I think in real life people usually reach for regexps for tokenisation

[04:17:58.0000] <annevk>
dude what is this?

[04:18:18.0000] <jgraham>
Unreal life?

[04:18:19.0000] <annevk>
Mario Kart?

[04:18:24.0000] <annevk>
I see

[04:18:32.0000] <hsivonen>
trololol: "XML 1.1 may have issues, but it's definitely not DOA."

[04:19:04.0000] <jgraham>
Well I mean your local neighborhood js engine probably has a fancy hand-written parser that works one character at a time

[04:19:10.0000] <zcorpan>
is it DBA? :-)

[04:19:14.0000] <jgraham>
and HTML requires it

[04:19:22.0000] <jgraham>
But lots of other things don't and don't

[04:19:36.0000] <annevk>
hsivonen: dude that bug... I don't even

[04:19:57.0000] <annevk>
Fortunately dbaron was there to save the day

[04:20:07.0000] <jgraham>
I think DOA might imply that it ever A

[04:30:19.0000] <hsivonen>
annevk: I succumbed into 386 and explained why 5th ed doesn't make sense

[04:57:38.0000] <annevk>
I ran across https://blog.mozilla.org/dherman/2011/12/01/now-thats-a-nice-stache/

[04:57:42.0000] <annevk>
Is that still happening?

[04:59:35.0000] <Ms2ger>
nsid?

[04:59:39.0000] <Ms2ger>
Oh

[05:00:10.0000] <annevk>
Looks like it might obsolete the whole "return this" drive...

[05:00:11.0000] <Ms2ger>
Probably not harmonious

[05:00:33.0000] <annevk>
What is nsid?

[05:01:08.0000] <Ms2ger>
Nvm that :)

[05:34:22.0000] <zcorpan>
hsivonen: congrats on killing the old parser

[05:36:41.0000] <jgraham>
I thought it still did about:blank

[05:37:24.0000] <hsivonen>
zcorpan: thanks, but mrbkap wrote the latest patch

[05:37:29.0000] <hsivonen>
jgraham: it still does

[05:37:34.0000] <hsivonen>
jgraham: now with less code

[05:38:55.0000] <annevk>
jgraham: so yeah, this is not very fast

[05:39:20.0000] <annevk>
and I'm only splitting at this point

[05:42:41.0000] <zcorpan>
hsivonen: oh, so it's not completely dead yet?

[05:43:42.0000] <hsivonen>
zcorpan: not completely dead. like a zombie.

[05:44:54.0000] <hsivonen>
I don't think I like the idea of page-defined JSON.parse getting used by XHR

[05:51:05.0000] <annevk>
hsivonen: that's not the intent

[05:51:11.0000] <annevk>
hsivonen: there's an open bug on this

[05:51:24.0000] <hsivonen>
annevk: yeah

[06:05:02.0000] <annevk>
When iterating over a string in JavaScript. Is there an easier way to do this:

[06:05:03.0000] <annevk>
String.fromCharCode(Number.parseInt([input[++i], input[++i], input[++i], input[++i]].join(""), 16))

[06:05:40.0000] <Ms2ger>
input[++i] + input[++i] + input[++i] + input[++i]? :)

[06:06:12.0000] <Ms2ger>
/me wonders if we should reference XML 4th ed explicitly in specs

[06:08:16.0000] <annevk>
XML is kinda like IDNA. Nobody really wants to make a decision...

[06:08:57.0000] <annevk>
Ms2ger: good point, not sure why I did the array thing

[06:10:01.0000] <Ms2ger>
Seems like hsivonen does want to make a decision :)

[06:15:04.0000] <jgraham>
Hmm, those lines look different to me

[06:15:10.0000] <jgraham>
What am I missing?

[06:15:56.0000] <jgraham>
annevk: I have a hard time imagining that str.split(" ") is slow

[06:23:10.0000] <accessPoint>
is it ok to put aside inside section and give it float right?

[06:25:17.0000] <Lachy>
accessPoint, yes. Why wouldn't it be?

[06:29:23.0000] <Lachy>
annevk, is the input variable in your code a string or an array? Surely, you could use input.substr(i, 4) if it's a string, or input.slice(i, i+4) if input is an array

[06:31:36.0000] <annevk>
fair enough

[06:31:38.0000] <annevk>
made it

[06:31:39.0000] <annevk>
String.fromCharCode(Number.parseInt(input.substr(++i, i += 3), 16))

[06:32:10.0000] <Ms2ger>
But why...

[06:32:16.0000] <accessPoint>
thanks

[06:32:30.0000] <annevk>
Ms2ger: slightly shorter line and presumably faster?

[06:32:52.0000] <Ms2ger>
Don't presume before profiling :)

[06:33:00.0000] <Ms2ger>
Also somewhat less readable

[06:33:03.0000] <jgraham>
I wouldn't assume that's faster

[06:33:17.0000] <jgraham>
But I think it's more readable :p

[06:34:07.0000] <Ms2ger>
jgraham, compared to String.fromCharCode(Number.parseInt(input.substr(i, i + 4), 16)); i += 4?

[06:34:33.0000] <annevk>
that's not the same

[06:35:05.0000] <annevk>
it's pre-increment, not post

[06:35:07.0000] <Ms2ger>
Yet another reason to write it out

[06:35:11.0000] <annevk>
nah

[06:35:31.0000] <Ms2ger>
Well, it's your code, but don't expect me to read it :)

[06:37:01.0000] <Lachy>
using Ms2ger's method, it has to increment i, lookup the character at the index of the array, a new string and repeat 3 more times, and then finally concatenate each of the 4 strings into one. That seems far less efficient and less readable than simply using the native substr() method and incrementing i twice.

[06:39:25.0000] <Lachy>
also, annevk note that substr takes a (start, length) as parameters, not (indexA, indexB), so your i+=3 will grow larger depending on what i is. If you want to do it that way, use substring()

[06:39:51.0000] <annevk>
ooh

[06:40:03.0000] <annevk>
I wonder how that even worked for me then

[06:40:29.0000] <annevk>
ooh, because parseInt() is presumably silly

[06:47:28.0000] <jgraham>
Lachy: Looking up the method could be slow, or calling could be slow, depending on the implementation. Incrementing is fast, so the tradeoff is possible method call overhead vs possible extra allocations

[06:48:38.0000] <jgraham>
I agree the allocations might lose, but I would profile before I asserted it with confidence

[06:49:58.0000] <zcorpan>
heycam|away: why can't [NewObject] be used on attributes? is it bad API design? CSSOM does that for element.usedStyle et al

[06:50:13.0000] <annevk>
zcorpan: yes it is

[06:50:45.0000] <annevk>
zcorpan: you don't want obj.prop != obj.prop

[06:50:57.0000] <zcorpan>
ok

[06:53:32.0000] <annevk>
hmm, had to write

[06:53:33.0000] <annevk>
output += String.fromCharCode(Number.parseInt(input.substring(++i, (i += 3) + 1), 16))

[06:53:39.0000] <annevk>
it becomes less readable by the minute

[06:54:00.0000] <annevk>
I'll go back to what I had before :)

[06:56:02.0000] <Ms2ger>
Clearly you need a wrapper around your strings

[06:56:22.0000] <Ms2ger>
String.fromCharCode(Number.parseInt(input.pop(4)))

[06:57:12.0000] <jgraham>
You need a wrapper around your wrapper input.pop(4).int_to_string()

[06:57:25.0000] <jgraham>
s/int/hex/

[06:57:32.0000] <jgraham>
;)

[07:06:12.0000] <annevk>
no

[07:07:53.0000] <zcorpan>
you need a wrapper factory factory

[07:17:11.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=22939 - opinions on naming of the methods? can they be the same? element.usedStyle()

[07:36:01.0000] <annevk>
zcorpan: isn't CSSStyleDeclaration live? Or are you introducing a static variant?

[07:36:46.0000] <zcorpan>
annevk: it's not live for getComputedStyle or the GetStyleUtils variants

[07:36:54.0000] <zcorpan>
annevk: it's live for element.style

[07:37:05.0000] <annevk>
ah yeah

[07:37:28.0000] <annevk>
HTML typically uses get*

[07:39:29.0000] <zcorpan>
getRawComputedStyle is a bit long

[07:41:05.0000] <Ms2ger>
jgraham, want to merge https://github.com/w3c/web-platform-tests/pull/133 ?

[07:41:54.0000] <jgraham>
Done

[07:42:10.0000] <jgraham>
I always mis it when people review stuff on github

[07:42:13.0000] <Ms2ger>
Thanks

[07:50:56.0000] <matjas>
annevk: when iterating over the string, do you need UTF-16 code units, or code points?

[07:51:13.0000] <annevk>
matjas: former, it's input to JavaScript

[07:55:21.0000] <annevk>
matjas: that is, we hand these tests to <a>.href, <area>.href, new URL, etc.

[07:55:29.0000] <annevk>
once I've written all that out :-)

[08:11:11.0000] <JakeA>
Quick parsing question: When a <!-- is encountered within a <script>, are the "<!--" chars consumed as script content or does exit the script block & become an html comment?

[08:11:27.0000] <JakeA>
or does it exit*

[08:12:16.0000] <jgraham>
the behaviour of <!-- in script is... complex

[08:14:37.0000] <JakeA>
yeah, I couldn't get my head around the tokenizer

[08:16:56.0000] <jgraham>
Essentially it's not a HTML comment

[08:17:11.0000] <jgraham>
But <!-- acts like a line comment in ECMAScript

[08:17:37.0000] <annevk>
For HTML it has a special purpose in that it makes </script> not exit <script>, right?

[08:17:46.0000] <jgraham>
But there is some extra sublety I have apparently erased from my memory

[08:17:56.0000] <annevk>
/me is not sure that's up-to-date

[08:19:04.0000] <annevk>
JakeA: test e.g. <script><!--<script></script>--></script> in http://software.hixie.ch/utilities/js/live-dom-viewer/

[08:19:33.0000] <jgraham>
Ah, right

[08:20:16.0000] <annevk>
The --> is not required though... I should read the parser again...

[08:20:25.0000] <jgraham>
iirc, the problem was that people would document.write("<!--<script></script>") or something

[08:21:05.0000] <JakeA>
The live DOM viewer is what the browser does though, right, not what the spec says

[08:21:12.0000] <JakeA>
or does it use its own parser?

[08:21:27.0000] <Ms2ger>
What the browser does

[08:21:39.0000] <Ms2ger>
But browsers are pretty close to the spec

[08:21:58.0000] <Ms2ger>
(If you find discrepancies, file bugs :))

[08:24:28.0000] <JakeA>
Found a difference, but it looks like it's down to the resource scanner rather than the actual parser. No worries.

[08:24:53.0000] <annevk>
holy shit there's many script data states

[08:25:02.0000] <Ms2ger>
There'd better be

[08:27:26.0000] <annevk>
I'm not gonna study that

[08:50:41.0000] <annevk>
jgraham: so uh... according to my performance.now() comparison, running the URLTestParser only takes up to 7ms...

[08:51:07.0000] <jgraham>
Doesn't sound very slow :)

[08:51:08.0000] <annevk>
maybe I should test it again with substring

[08:51:14.0000] <annevk>
but it feels like a second

[08:51:22.0000] <jgraham>
Maybe the js console is slow

[08:51:23.0000] <annevk>
maybe it's the rest of Gecko that's lagging behind

[08:53:16.0000] <Hixie>
annevk: when nobody else is making a decision, just make one and see what happens :-)

[08:53:17.0000] <annevk>
not seeing the difference with substring(), not really surprising I guess given how fast it goes overall

[08:54:45.0000] <annevk>
Hixie: I've sort of made one, IDNA 2003 is the way to go I think (changing from that is not compatible), but registrars are not doing that (they are breaking compat sometimes, and sometimes just do something)

[08:55:24.0000] <annevk>
registrars are likely to follow the IETF, which broke compat as well (although they have various interesting ways of claiming they didn't)

[08:55:48.0000] <annevk>
->FUCKED<-

[09:06:09.0000] <Hixie>
annevk: well people aren't going to buy names that don't work, so i wouldn't worry about the registrars so much

[09:13:50.0000] <annevk>
Guess I can do that after this test suite stuff is sorted

[09:14:49.0000] <annevk>
seems like something that'd need solving anyway for a fresh implementation (I've been thinking of writing the URL parser for Servo)

[09:15:56.0000] <Ms2ger>
/me would suggest getting it into rust-the-language directly

[09:17:25.0000] <annevk>
Ms2ger: you mean standard library?

[09:17:30.0000] <Ms2ger>
Yeah

[09:17:36.0000] <jgraham>
Sounds reasonable

[09:17:57.0000] <Ms2ger>
I mentioned it in passing in #rust a while back and there didn't seem strong objections at the time

[09:18:22.0000] <annevk>
mkay, I guess I'll try sort that out when I get to it

[09:18:52.0000] <annevk>
heycam|away: Hixie: hmm so yeah, should it be [Global=Window,Worker] or [Exposed=Window]

[09:19:27.0000] <annevk>
heycam|away: Hixie: maybe having both makes the most sense, [Global] for use by global objects and setting names you can use to refer to them and [Exposed] for non-global objects that are exposed on them

[09:19:37.0000] <Ms2ger>
[Global=Window,Worker] seems rather confusing with [Global] meaning "this is a global object"

[09:20:28.0000] <annevk>
heycam|away: Hixie: so e.g. [Global=Worker,SharedWorker] interface SharedWorkerGlobalScope {} or some such

[09:20:57.0000] <annevk>
heycam|away: Hixie: and [Global=Worker,DedicatedWorker] for the other one

[09:21:13.0000] <annevk>
Ms2ger: yeah

[09:21:56.0000] <TabAtkins>
annevk: Doing assignments inside of a function's arguments is the devil.

[09:22:37.0000] <annevk>
TabAtkins: heh, I was just toying around with the language

[10:17:10.0000] <Ms2ger>
"I'm working on exposing Chrome's paint events to the DOM so that sites can report visual metrics back as part of their RUM.  I know there is a lot of controversy around paint events but it would be great if we could at least define how they could be exposed should a browser vendor decide to expose them."

[10:20:44.0000] <jgraham>
 /sigh

[10:22:55.0000] <Hixie>
heycam|away: annevk: I'm fine with just [Global] on the global interface and naming them by interface name on the other objects, fwiw

[10:33:38.0000] <jwalden>
Ms2ger: is that for srs?

[10:34:15.0000] <jgraham>
jwalden: Yes

[10:34:25.0000] <jwalden>
egad

[10:34:43.0000] <jwalden>
/me idly wonders what RUM means

[10:35:07.0000] <jgraham>
http://lists.w3.org/Archives/Public/public-web-perf/2013Aug/0040.html

[10:35:47.0000] <jgraham>
Runtime U-something Metrics, perhaps

[10:35:52.0000] <jgraham>
UA?

[10:59:30.0000] <jsbell>
Ms2ger: With the caveat that I know nothing about that particular effort, I can sympathize. For IndexedDB there are lots of questions we want to ask about performance and behavior. We can get aggregated, anonymized stats via opt-in mechanisms, but we know site developers who use dev tools to get fine grained detail like event timing want to get that same sort of data en masse from "the field", even though it's not data we should expose via an

[10:59:30.0000] <jsbell>
y APIs. We're brainstorming how without exposing any web surface area (optional site-specific extension, maybe?)

[11:00:39.0000] <jsbell>
Ms2ger: maybe point whoever was talking about those paint events my way?

[11:06:06.0000] <jwalden>
seems like devtools in the browser should serve the need just as well, to me

[11:06:55.0000] <accessPoint>
how can I align img to center without using align attribute and without text-align center?

[11:07:48.0000] <Ms2ger>
Abspos?

[11:07:51.0000] <Ms2ger>
Flexbox?

[11:11:10.0000] <paul_irish>
jwalden: RUM is real user metrics.. so it's all about collecting data from the field, where things are a bit more wild than in a CI setup using some devtools APIs

[11:12:32.0000] <paul_irish>
that said, i don't think that exposing individual paint events may be useful for RUM. some of the metrics like what's exposed in https://twitter.com/ChromiumDev/status/357914389132746752/photo/1 may be better

[11:31:35.0000] <accessPoint>
where can I put html comments and where I can't - this isn't written in the w3c html spec

[11:54:09.0000] <Hixie>
accessPoint: in the whatwg spec, it's in the syntax section near the end

[11:54:23.0000] <Hixie>
accessPoint: basic answer is that you can put them between other elements

[11:54:41.0000] <Hixie>
accessPoint: with exceptions for elements that only accept text like <textarea>, <title>, <script>, <style>

[12:01:49.0000] <accessPoint>
Hixie, can I put it inside elements and before doctype and before html element and in the head element and in the title element?

[12:02:04.0000] <accessPoint>
wait I will check the WHATWG spec

[12:02:16.0000] <accessPoint>
sorry for annoying I was reading W3C nighty spec

[12:10:33.0000] <accessPoint>
Hixie, there isn't answer in the web dev spec edition :S

[12:10:49.0000] <accessPoint>
can you or someone answer me please I didn't got help elsewhere I think noone knows for sure

[12:13:10.0000] <zcorpan>
uh, getComputedStyle *is* live

[12:31:48.0000] <zcorpan>
accessPoint: http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#writing

[12:33:09.0000] <zcorpan>
accessPoint: http://developers.whatwg.org/syntax.html#syntax has that also

[12:36:09.0000] <zcorpan>
accessPoint: so, inside elements: depends on the element, before doctype: yes, before html: yes, in the head: yes, in the title: no

[12:36:26.0000] <Hixie>
accessPoint: sorry, was out to lunch

[12:36:30.0000] <Hixie>
accessPoint: what zcorpan said

[12:43:09.0000] <accessPoint>
zcorpan, thanks Hixie no problem man thank yo utoo thank you guys keep up the good work appreciate everything!

[12:44:24.0000] <zcorpan>
accessPoint: <title><!----></title> isn't invalid, but it doesn't contain a comment, it just contains text. similarly to how it works in <script>

[12:45:21.0000] <accessPoint>
ok thanks zcorpan

[12:45:50.0000] <zcorpan>
np

[13:26:58.0000] <zcorpan>
Hixie: do we need to differentiate between dedicated and shared workers for [Exposed]?

[13:30:58.0000] <Hixie>
only rarely

[13:30:59.0000] <Hixie>
but yes

[13:31:09.0000] <Hixie>
e.g. you can't get a DedicatedWorkerGlobalScope in a shared worker

[13:46:33.0000] <zcorpan>
Hixie: but DedicatedWorkerGlobalScope is the global, so it doesn't make sense for it to use [Exposed] i think

[13:46:38.0000] <Ms2ger>
https://www.webkit.org/blog/2910/improved-support-for-high-resolution-displays-with-the-srcset-image-attribute/

[13:47:09.0000] <Hixie>
zcorpan: oh you're saying anything with [Global] should just not be exposed unless it's the global? lgtm

[13:47:16.0000] <Hixie>
zcorpan: in that case yeah, we should have Global name its kind

[13:48:56.0000] <zcorpan>
Hixie: i didn't say that :-) i'm wondering if it makes sense for an API not defined in the Worker spec itself to expose something only in dedicated workers or only in shared workers

[13:49:22.0000] <Hixie>
i don't know of any so far, off-hand

[13:51:19.0000] <zcorpan>
ok. so then we probably don't need to provide that ability in the idl syntax

[13:53:12.0000] <Hixie>
i can't believe i didn't provide an event for <details> and nobody has made a case for adding one

[13:53:19.0000] <Hixie>
onopen/onclose event, i mean

[13:53:47.0000] <Hixie>
(onclick is useless since it fires before it opens, so you don't know the state)

[13:56:36.0000] <Hixie>
also, firefox doesn't yet support <details>?!

[13:57:59.0000] <zcorpan>
so if [Global] uses the name of the interface, and we put it on WorkerGlobalScope and Window, specs can use [Exposed=Window,WorkerGlobalScope]. which is longer than [Exposed=Window,Worker]. so it might be worth it to use [Global=Worker] on WorkerGlobalScope instead

[14:02:01.0000] <zcorpan>
Hixie: iirc, there were various things about <details> that made it hard to implement in a sane way, at least in presto, so it was punted. i'm not sure what the situation is for gecko. but maybe we should look into the issues and possibly change the spec

[14:02:36.0000] <zcorpan>
i wasn't involved in that myself so i'm not sure what the issues were exactly

[14:03:08.0000] <zcorpan>
Lachy: ^

[14:04:55.0000] <zcorpan>
what's the difference between w3c-srcset and whatwg-srcset?

[14:07:07.0000] <zcorpan>
"This is an automated redaction of the relevant portions of that document." http://www.w3.org/html/wg/drafts/srcset/w3c-srcset/ says

[14:10:40.0000] <Hixie>
whatwg-srcset is one step closer to what has been proofread.

[14:11:09.0000] <Hixie>
wouldn't the [Global] go on SharedWorkerGlobalScope and DedicatedWorkerGlobalScope?

[14:30:19.0000] <GPHemsley>
busy busy busy

[14:32:31.0000] <zcorpan>
Hixie: why?

[14:32:50.0000] <Hixie>
because they're the globals

[14:33:51.0000] <zcorpan>
they inherit from WorkerGlobalScope

[14:59:55.0000] <Hixie>
HTMLElement.prototype instanceof Node == true? o_O

[15:04:01.0000] <Hixie>
that entire thread is baffling

[15:23:25.0000] <Domenic_>
That's pretty standard... HTMLElement.prototype = Object.create(Element.prototype); Element.prototype = Object.create(Node.prototype); ... that's how JS inheritance works...

[15:39:29.0000] <TabAtkins>
Yeah, your prototype won't be instanceof your leaf class, but it should be instanceof any superclasses.

[16:11:30.0000] <Hixie>
interesting definition of "instanceof"

[16:13:19.0000] <TabAtkins>
The definition is "take the prototype of the RHS, then walk the prototype chain of the LHS until you either find a match or hit null/cycle"

[16:13:46.0000] <TabAtkins>
Prototypal inheritance is different from classical inheritance.

[16:22:35.0000] <Hixie>
i would expect "instanceof" to tell me if something is an instance of something, and it's not clear to me that a prototype of an element is an instance of Node

[16:39:06.0000] <TabAtkins>
That's because you don't intuitively understand what prototypal inheritance does.  It's very natural that your prototype is an instance of your superclass.

[16:40:07.0000] <TabAtkins>
The two basic patterns are very similar - one's the "examplar" pattern, where the prototype is some "typical" instance of the superclass.

[16:40:27.0000] <TabAtkins>
The other is where the prototype chains are actually separate objects from the instances, and so don't have any per-instance state.

[16:40:58.0000] <TabAtkins>
But regardless, yes, you are instanceof your class, your prototype is instanceof your superclass, etc.

[16:42:06.0000] <TabAtkins>
(Domenic's example was the second type - using Object.create to just make fresh objects with the right prototype, rather than going through the constructor to achieve the same thing and possibly getting per-instance state added to you.)

[16:43:22.0000] <TabAtkins>
You really *shouldn't* be type-checking your prototypes (it doesn't make sense if you're not using examplars, and even then doesn't make very much sense), but if you do, that's the answer you get.


2013-08-14
[17:04:01.0000] <rniwa>
sicking: yt?

[17:04:50.0000] <rniwa>
does anyone from Mozilla here knows about Attr node?

[17:24:33.0000] <Hixie>
TabAtkins: might be "natural", but it's hardly useful :-)

[17:25:02.0000] <Hixie>
TabAtkins: i don't understand how the Element prototype can be said to be an instance of a Node, though

[17:25:09.0000] <Hixie>
TabAtkins: i understand that it's instanceof

[17:25:17.0000] <Hixie>
but it's not an instance of

[17:25:20.0000] <Hixie>
in any useful sense

[20:16:48.0000] <TabAtkins>
Hixie: If DOM used the "examplar" pattern, then the Element prototype would be a "typical" node, whatever that meant.

[20:17:31.0000] <Hixie>
if it was an actual Node I wouldn't mind it being called instanceof Node

[21:00:39.0000] <heycam>
the typical node would be <img src=cat.jpg>

[23:55:28.0000] <Ms2ger>
rniwa, you called?

[01:55:04.0000] <Ms2ger>
Hrm, http://html5.org/tools/web-apps-tracker?from=8142&to=8143  seems empty

[02:08:08.0000] <Lachy>
zcorpan, Hixie, re comments about details http://krijnhoetmer.nl/irc-logs/whatwg/20130813#l-794 the difficulties in Opera were related to the fact that Opera didn't implement XBL or shadow DOM and we were trying to find a way to ensure authors could still apply styles in a sane way. I did mail whatwg about this at the time.

[02:09:15.0000] <zcorpan>
Lachy: ok, so assuming shadow DOM is supported, there's no inherent problem with the spec that should be fixed?

[02:09:55.0000] <annevk>
Ms2ger: looks like svn.whatwg.org is timing out and therefore something got cached wrongly...

[02:10:10.0000] <Lachy>
I think even with a shadow dom, there were issues that were difficult to solve. I'll look up my original mail about it all.

[02:10:34.0000] <zcorpan>
Ms2ger: i think that happens when it gets loaded by someone before it exists (e.g. by clicking the 'Next' link). it caches an empty result

[02:12:17.0000] <Lachy>
http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2011-April/031132.html

[02:12:51.0000] <zcorpan>
getDiff should probably check if the diff is empty before caching it

[02:21:55.0000] <annevk>
or like, not cache anything at all...

[02:35:07.0000] <zcorpan>
isn't the cache there for a reason?

[02:39:45.0000] <jgraham>
I think it's worse that webkit did implement <details> than that gecko didn't

[02:40:06.0000] <jgraham>
At least the implementation seemed quite broken at one time

[02:44:07.0000] <annevk>
http://src.chromium.org/viewvc/blink?view=revision&revision=155513 the URLs cited here are just scary...

[02:52:09.0000] <jgraham>
Yeah, that should be a r- for not reading the right specs

[02:58:54.0000] <jgraham>
https://github.com/google/gumbo-parser

[03:02:53.0000] <annevk>
and "DOM4"? lol

[03:05:21.0000] <annevk>
Ms2ger: fixed diff

[03:05:27.0000] <annevk>
/me looks into fixing the actual issue

[03:06:59.0000] <annevk>
zcorpan: getDiff already does the empty check

[03:07:18.0000] <zcorpan>
annevk: oh

[03:07:21.0000] <annevk>
zcorpan: I guess these days maybe something is returned that's not entirely empty

[03:10:14.0000] <annevk>
meh

[03:10:26.0000] <annevk>
should really rewrite the tool some day

[03:13:17.0000] <jgraham>
Use the git backend. That should make things easier as long as you have enough space to store the whole checkou

[03:13:31.0000] <jgraham>
And, if it's on github, set up a hook for the updates

[03:14:39.0000] <annevk>
go for it

[03:22:10.0000] <smaug____>
odinho: I disagree. (EventSource and utf-8)

[03:22:40.0000] <odinho>
:)

[03:22:41.0000] <smaug____>
but it clearly is a bug in the spec, at least

[03:22:50.0000] <smaug____>
if we can't agree what the spec says

[03:22:51.0000] <odinho>
Sure

[03:23:31.0000] <annevk>
?

[03:23:35.0000] <annevk>
/me is missing context

[03:23:47.0000] <odinho>
https://bugzilla.mozilla.org/show_bug.cgi?id=869878

[03:23:52.0000] <odinho>
[eventsource] When encoding charset=windows-1252, Firefox goes to onmessage() but not onerror().

[03:25:57.0000] <jgraham>
I think the spec is clear

[03:26:06.0000] <jgraham>
You decode the data as UTF-8 regardless

[03:26:48.0000] <jgraham>
I sort of assumed that was what the test was checking

[03:26:56.0000] <jgraham>
If it isn't, it needs to be fixed

[03:29:36.0000] <odinho>
Yes, it can clearly be seen that way. I might have been too hung up on trying to force authors to do no stupid.

[03:30:02.0000] <odinho>
If they say windows-1252 they might mean it. And thinks everything will be okay.

[03:30:12.0000] <odinho>
Then they will WTF that the browser is decoding in a weird way.

[03:30:24.0000] <odinho>
And blame the browser. Because they're giving correct infoz.

[03:30:27.0000] <jgraham>
Well sure

[03:30:34.0000] <jgraham>
Or they might not mean it

[03:31:04.0000] <odinho>
If the browser complained, and didn't work at the windows-1252, it's much more understandable (from the beginning), that they have to fix it.

[03:31:15.0000] <jgraham>
In any case the spec says what it does. You could argue that it ought to say something different

[03:31:34.0000] <jgraham>
however if all browsers agree, it doesn't seem like much of a sharp edge

[03:31:50.0000] <odinho>
And it can also complain in the error log.

[03:33:11.0000] <annevk>
I remember EventSource saying something silly about charset

[03:34:01.0000] <annevk>
It no longer does

[03:38:22.0000] <annevk>
odinho: I don't see how you can read the spec in any other way

[03:38:29.0000] <annevk>
odinho: it's extremely clear

[03:38:43.0000] <annevk>
odinho: "HTTP 200 OK responses with a Content-Type header specifying the type text/event-stream, ignoring any MIME type parameters, must be processed line by line as described below."

[03:38:51.0000] <annevk>
odinho: "as described below" is a link

[03:39:07.0000] <annevk>
odinho: "Streams must be decoded using the UTF-8 decode algorithm."

[03:39:12.0000] <annevk>
odinho: done

[04:07:44.0000] <odinho>
It is extremely clear.  I took a shortcut. :)

[04:08:10.0000] <odinho>
:/  Better go look at some kitten pictures.

[04:44:25.0000] <annevk>
Why is there no convenient way to define getters and setters within an object constructor in JavaScript?

[04:46:22.0000] <Ms2ger>
{ get foo() { }, set foo(v) { } }

[04:46:38.0000] <Ms2ger>
?

[05:27:25.0000] <hsivonen>
Yucca is on StackOverflow http://stackoverflow.com/users/1084437/jukka-k-korpela

[05:27:32.0000] <hsivonen>
/me was not aware

[05:45:51.0000] <annevk>
Ms2ger: that's an object literal, constructor is more like function X(x) { this.blah = x }

[05:46:28.0000] <Ms2ger>
Object.defineProperty, then, I guess

[05:46:40.0000] <Ms2ger>
Somewhat sucky

[05:48:21.0000] <annevk>
hsivonen: found http://unicode.org/mail-arch/unicode-ml/y2005-m11/0060.html via that, kinda want to start using ⊎1F4A9 in specifications now...

[05:48:32.0000] <annevk>
Ms2ger: right

[05:55:07.0000] <hsivonen>
/me makes a mental note of MULTISET UNION

[05:56:49.0000] <annevk>
the kind of thing to impress the manager with :p

[05:59:49.0000] <annevk>
https://github.com/google/gumbo-parser#readme why is perf a non-goal?

[06:04:20.0000] <hsivonen>
Must. look. away. from. the. StackOverflow. utf-16. tag.

[06:04:53.0000] <hsivonen>
also, tags surrogate-pair and utf-32

[06:06:17.0000] <hsivonen>
so much opportunity for 386

[06:06:25.0000] <annevk>
they're empty for me

[06:07:29.0000] <hsivonen>
good for you

[06:08:12.0000] <annevk>
hah

[06:17:38.0000] <annevk>
It seems I keep rediscovering I need Object.defineProperties and I keep hating it

[06:18:15.0000] <jgraham>
annevk: Presumably because it makes it easier to finish the project if your goal is "correctness" rather than "correctness and perf"

[06:19:02.0000] <jgraham>
(you might choose to do things that are non-optimal from a perf point of view to handle very deeply nested documents, for example)

[06:25:57.0000] <hsivonen>
1.1 > 1.0 and 2000 > "": https://bugzilla.mozilla.org/show_bug.cgi?id=233154#c21

[06:29:32.0000] <annevk>
hsivonen: in his duplicate "Severity: normal → blocker"

[06:30:22.0000] <Ms2ger>
/me tends to ignore such comments

[06:31:09.0000] <annevk>
I kinda feel like posting: "Dude, XML 1.1 is not well established. It was a compromise for IBM mainframes and later thought of as unnecessary. Just ask the W3C XML Core WG."

[06:31:38.0000] <Ms2ger>
Do you think that would help?

[06:31:55.0000] <annevk>
maybe?

[06:31:56.0000] <darobin_>
help who being the question

[06:32:06.0000] <jgraham>
I presume annevk would be labelled as "disturbed"

[06:32:52.0000] <annevk>
jgraham: that doesn't seem entirely without reason

[06:35:20.0000] <jgraham>
I wonder how long before we need to support for HTTP/2 or SPDY for testing

[06:35:54.0000] <annevk>
is there an FTP server yet which we can fiddle with?

[06:36:44.0000] <annevk>
that's one legacy protocol that has browser support to some extent but is not very well tested in conjunction with other stuff

[06:37:13.0000] <jgraham>
I know chrome has one somewhere in the repo.

[06:57:25.0000] <GPHemsley>
Hixie: Your e-mail client tags your messages as en-GB-hixie instead of en-GB-x-hixie

[06:58:39.0000] <GPHemsley>
What's the best way to filter mail from a mailing list?

[06:58:45.0000] <GPHemsley>
(e.g. the whatwg one)

[06:58:55.0000] <annevk>
Gmail

[07:01:01.0000] <GPHemsley>
I was looking more for an answer that contained an e-mail header

[07:03:27.0000] <Ms2ger>
There's one, no?

[07:03:49.0000] <annevk>
List-Id: Public mailing list for the WHAT working group <whatwg-whatwg.org> ?

[07:03:56.0000] <annevk>
just look at a random message

[07:03:58.0000] <jgraham>
GPHemsley: To or CC?

[07:04:43.0000] <GPHemsley>
/me was hoping for an answer from someone who had already done it

[07:06:22.0000] <jgraham>
Well I use filter on To or CC in Thunderbird

[07:06:49.0000] <jgraham>
So I have done it and gave you the answer that I use

[07:07:14.0000] <jgraham>
Of course I can't prove that it's the "best" way to do it

[07:07:53.0000] <annevk>
I gave you the answer Gmail uses...

[07:08:26.0000] <annevk>
(Or well, I'm pretty sure they use that... Plus some other magic I guess.)

[07:12:14.0000] <GPHemsley>
alright, thanks

[07:42:59.0000] <annevk>
Landed the URL work... That feels better, it being all on GH now. Now testharness.js integration I suppose.

[07:46:51.0000] <jgraham>
URL?

[07:58:36.0000] <annevk>
https://github.com/annevk/url/

[07:59:17.0000] <annevk>
I guess at this point I should also rename the polyfill from URL to jURL

[08:04:02.0000] <zewt>
heh another bug i reported to firefox countless years ago suddenly closed as "worksforme", even though it still happens identically

[08:04:18.0000] <zewt>
the "ignore tickets for years then close it for a bogus reason, hoping the reporter isn't paying attention any more" strategy

[08:04:24.0000] <hsivonen>
zewt: URL?

[08:04:52.0000] <zewt>
https://bugzilla.mozilla.org/show_bug.cgi?id=518012

[08:07:01.0000] <hsivonen>
zewt: comment 3 is not cool. Sorry about that.

[08:07:10.0000] <zewt>
i mean, closing it with "wontfix: we're okay with this behavior" then sure, but that's not what happened

[08:07:32.0000] <hsivonen>
I'm always annoyed then the Ubuntu folks do this to me over at Launchpad

[08:07:55.0000] <hsivonen>
I don't really report Ubuntu bugs anymore

[08:10:49.0000] <hsivonen>
I like it how Hallvord investigates open evang bugs even if they were opened in 2004

[08:11:28.0000] <zewt>
same with debian, though it's probably hard to generalize there (since reporting a bug to debian will go to one of probably thousands of people at this point)

[08:11:53.0000] <zewt>
(usually with packages I'll just go to upstream, though)

[08:12:52.0000] <jgraham>
I guess it is mildly better than the "your bug got closed by a bot because we didn't even look at it" thing

[08:13:01.0000] <jgraham>
But yeah, that wasn't the right response

[08:14:21.0000] <zewt>
i've had the "go repro this bug and reply or we'll auto-close this ticket" bot thing, which was the start of my giving up on FF bugs

[08:14:43.0000] <jgraham>
Firefox does that too? I thought it was a Google thing

[08:14:49.0000] <zewt>
("we've ignored this for too long, so we need you to do more work to allow us to continue ignoring it")

[08:15:05.0000] <zewt>
i thought it was a firefox one, though it was a long time ago now, maybe it was stopped?

[08:15:07.0000] <hsivonen>
jgraham: depends on module

[08:15:20.0000] <Ms2ger>
There's some people who do that

[08:15:55.0000] <Domenic_>
annevk: sweet, if the polyfill is mature maybe we can integrate it into Node in some form to fix a few of their URL-parsing bugs.

[08:16:10.0000] <jgraham>
Oh, that's sad

[08:17:53.0000] <svl>
Happened twice, afair; though lots of module owners opted out of it for their modules

[08:18:09.0000] <zewt>
i mean, i sort of understand the problem, when it's a major product receiving more tickets than they can handle (bug numbers in the 700000s are no joke), but...

[08:18:18.0000] <Ms2ger>
900000s

[08:18:42.0000] <zewt>
but if they can't handle it, that's just another thing discouraging reporting

[08:18:56.0000] <zewt>
(i don't know firefox development, so I don't actually know if that's a major factor)

[08:19:52.0000] <svl>
Anything rendering-related tends to be fine; it's mostly just UI bugs which overwhelm the capacity of triagers

[08:20:09.0000] <zewt>
yeah i suppose it'll be very different based on component

[08:20:27.0000] <Ms2ger>
Once you get into Core, you're probably fine

[08:20:34.0000] <hsivonen>
svl: also anything rendering related filed under Firefox rather than Core

[08:20:40.0000] <jgraham>
Mass cleanups sometimes seem less problematic than auto-closing all bugs that haven't been touched for a few months. But still not ideal for real bugs

[08:20:46.0000] <svl>
yeah, true

[08:21:15.0000] <Ms2ger>
Most engineers seem to not like mass cleanups, in my experience

[08:21:33.0000] <hsivonen>
I find non-Core bugs pretty frustrating, too, and am somewhat discouraged from filing them

[08:21:34.0000] <Ms2ger>
But they also can't do all the triage while still doing their own job

[08:25:37.0000] <zewt>
oh, the one I'm thinking of was a "repro this or it'll close automatically", but doesn't appear to be a bot

[08:27:04.0000] <zewt>
and it was a case where I'd spent a fairly long time digging in trying to find a performance regression (439268)

[08:27:37.0000] <zewt>
oh well, i'll stop bitching now

[08:46:42.0000] <annevk>
Domenic_: the main thing that's lacking I just remembered is IDNA support

[08:47:04.0000] <annevk>
Domenic_: I think matjas might have something for that to some extent, but it needs more specification work

[08:47:17.0000] <annevk>
(and integration into jURL)

[08:47:29.0000] <Domenic_>
annevk: https://github.com/joyent/node/blob/master/lib/url.js#L252-L265

[08:47:45.0000] <Domenic_>
annevk: uses matjas

[08:47:48.0000] <Domenic_>
's URL thing

[08:47:57.0000] <Domenic_>
punycode thing, rather

[08:48:59.0000] <annevk>
Domenic_: it seems to not just matjas' splitting function

[08:49:06.0000] <annevk>
Domenic_: splitting on "." to get domain labels is a bug

[08:49:16.0000] <annevk>
there's four different type of dots

[08:49:28.0000] <annevk>
but I guess that's not the only bug in that library

[08:56:38.0000] <matjas>
Domenic_: afaict, replacing these lines https://github.com/joyent/node/blob/d2b80b8a60bf1e966a4091e62bb603fb825a6ada/lib/url.js#L257-L264 with `this.hostname = punycode.toASCII(this.hostname);` would do the trick

[08:57:16.0000] <Domenic_>
matjas: nice. hopefully annevk can use that in jURL and then we can just shove jURL into node

[08:57:57.0000] <annevk>
not quite, IDNA is more complicated :/

[08:59:03.0000] <annevk>
zewt: I found that if I don't want quality bug reports to go to waste I have to cc someone relevant

[08:59:09.0000] <annevk>
zewt: not ideal, but not too bad either

[08:59:52.0000] <Ms2ger>
annevk, or get them into the right component :)

[09:04:28.0000] <JonathanNeal>
"feminist restaurant chain hooters"

[09:06:11.0000] <JonathanNeal>
"richard dawkin's evangelical bible study"

[09:08:50.0000] <JonathanNeal>
"0 day torrent seeder recording industry association of america"

[09:09:32.0000] <Ms2ger>
Hmm?

[09:10:05.0000] <JonathanNeal>
bustle

[09:18:57.0000] <jgraham>
I think JonathanNeal left his sense of logic at the door

[09:19:31.0000] <JonathanNeal>
jgraham: the headline on bustle was "feminist restaurant chain hooters".

[09:21:45.0000] <JonathanNeal>
Oh, but I thought I was talking in another channel. Ohhwwwwwhhhoooooops.

[09:58:40.0000] <annevk_>
Oops, accidentally relied on Number.parseInt to work

[10:03:25.0000] <TabAtkins>
One of the classic blunders!

[10:04:10.0000] <TabAtkins>
Fun times: try and predict what [10, 10, 10, 10].map(parseInt) will return.

[10:06:20.0000] <Ms2ger>
I guessed something like what it does

[10:09:53.0000] <jgraham>
I know this! (fwiw I think you could also argue that the surprise is a problem with map providing multiple arguments)

[10:12:46.0000] <annevk>
TabAtkins: it works in Gecko, broke down in Chrome

[10:13:02.0000] <annevk>
I think it's new in ES6 to have it exposed there, but I don't really know the rationale

[10:13:08.0000] <TabAtkins>
jgraham: Yes, that's the surprise.

[10:13:17.0000] <annevk>
Maybe new global objects won't expose it or some such?

[10:18:30.0000] <jgraham>
TabAtkins: I sort of thought people thought it was a problem with parseInt

[10:18:37.0000] <jgraham>
But maybe I am wrong

[10:19:07.0000] <TabAtkins>
jgraham: No, the base argument to parseInt is a good thing.  The bad was the pre-ES5 behavior of magically intuiting octal if the base is unspecified and the string starts with "0".

[10:19:27.0000] <TabAtkins>
It's also weird that setting base to 1 produces NaN, but setting it to 0 just ignores the base.

[10:43:43.0000] <gsnedders>
jgraham, annevk, hsivonen: was html5lib or validator.nu's parser first?

[10:45:16.0000] <annevk>
gsnedders: I think we started December 2006, looks like hsivonen might have started before that given http://hsivonen.iki.fi/thesis/html5-conformance-checker.xhtml

[10:45:41.0000] <gsnedders>
Yeah, Dec '06 was html5lib, can't find any history prior to 2007 for validator.nu's parser?

[10:46:15.0000] <annevk>
Oh, hsivonen wrote a speculative algorithm before the specification was published

[10:46:32.0000] <annevk>
"I implemented an experimental HTML parser to enable checking of text/html with XML tools. I developed the parser speculatively before the HTML5 parsing algorithm was published."

[10:46:46.0000] <annevk>
So I guess html5lib was first in terms of a parser implementing the specification

[10:47:30.0000] <annevk>
Well, not counting Hixie's Sawzall's implementations here of which we got the tests

[10:47:37.0000] <annevk>
implementation*

[10:47:58.0000] <gsnedders>
The tests were from Hixie's Sawzall's impl?

[10:48:05.0000] <gsnedders>
Oh. I thought they were written by you lot.

[10:51:02.0000] <annevk>
Not all of them, but I think the initial bunch might have been, as well as the format

[10:57:06.0000] <gsnedders>
We seem to have lost history moving from svn to hg of this :(

[11:12:20.0000] <annevk>
gsnedders: I found http://www.ohloh.net/p/html5lib/commits?page=5&sort=oldest

[11:12:36.0000] <annevk>
gsnedders: in particular http://www.ohloh.net/p/html5lib/commits/254913074

[11:12:42.0000] <annevk>
/me -> food

[11:19:06.0000] <zewt>
deep fried annevk

[11:19:54.0000] <cwilso>
grilled might be more appropriate.  :)

[12:16:06.0000] <Hixie>
GPHemsley: yeah, i configured it before they invented this -x- thing

[12:16:22.0000] <GPHemsley>
riiight

[12:17:32.0000] <Ms2ger>
That might well be true

[12:20:39.0000] <GPHemsley>
/me is pretty sure x- has been around since the beginning

[12:20:41.0000] <GPHemsley>
but ok

[14:01:28.0000] <zewt>
TabAtkins: heh, i had a bug recently due to sscanf("%i") (vs. %d) assuming octal for 0*, which caused code to break ... in August

[14:01:54.0000] <zewt>
pox upon whoever decided having %i and %d be the same with printf, but different with scanf

[14:35:59.0000] <ball999>
in for loop I need boolean for second argument right? and while the boolean is true the loop will run?

[14:36:05.0000] <ball999>
ups wrong chat


2013-08-15
[02:55:11.0000] <annevk>
Chrome also opens data:text/xml,<?xml version="1.9"?><script xmlns="http://www.w3.org/1999/xhtml">alert(1)</script> so whether it supports XML 1.1 or XML 1.0 5th Edition is a bit unclear

[02:56:23.0000] <jgraham>
Maybe it jsut doesn't care that much since XML is a minor use case

[02:57:03.0000] <annevk>
No it fails on 2.0

[02:58:30.0000] <annevk>
If I do data:text/xml,<?xml version="1.1"?><script%85xmlns="http://www.w3.org/1999/xhtml">alert(1)</script> however I get "warning on line 1 at column 19: Unsupported version '1.1'"

[03:47:25.0000] <SimonSapin>
annevk: https://github.com/lifthrasiir/rust-encoding

[03:47:52.0000] <annevk>
lucky you

[03:48:05.0000] <SimonSapin>
no "streaming" api though

[03:48:30.0000] <annevk>
oh really?

[03:48:35.0000] <annevk>
that's kinda essential

[03:48:53.0000] <SimonSapin>
yeah

[03:59:32.0000] <annevk>
Apparently Dan Connolly considers XML 1.1 to be killed: http://visitmix.com/opinions/web-standards-gone-wild Too bad they didn't mark it as such so we get still harassed about it in bug reports.

[04:12:22.0000] <famicom`>
does anyone know whwere i can find an authoritative spec of html5

[04:12:37.0000] <famicom`>
normative only please

[04:13:35.0000] <annevk>
famicom`: http://whatwg.org/C

[04:14:54.0000] <famicom`>
is there something without all the samples

[04:15:25.0000] <annevk>
famicom`: no, but you could execute some script or use CSS that hides them pretty easily...

[04:15:45.0000] <famicom`>
what element rules should i apply then

[04:15:47.0000] <famicom`>
good call btw

[04:16:52.0000] <famicom`>
i found an xsd for html5 by MSFT but it lists put as a html method

[04:16:57.0000] <famicom`>
is this valid for form submission?

[04:18:16.0000] <SimonSapin>
http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#attr-fs-method says no

[04:19:57.0000] <annevk>
famicom`: .example { display:none } .note { display:none }

[04:20:07.0000] <annevk>
famicom`: would go a long way

[04:20:28.0000] <famicom`>
thanks :)

[04:26:01.0000] <famicom`>
are there any differences with the dom interface and the html5 spec?

[04:30:52.0000] <annevk>
famicom`: what do you mean?

[04:31:21.0000] <famicom`>
honestly, i need a clear and concise spec

[04:31:22.0000] <famicom`>
http://www.w3.org/TR/html4/strict.dtd

[04:31:25.0000] <famicom`>
i miss those "(

[04:33:05.0000] <annevk>
famicom`: that's from a time when we didn't really explain what was going on

[04:33:07.0000] <Ms2ger>
Their incompleteness and inaccuracy?

[04:33:39.0000] <famicom`>
no, their what's the term

[04:34:00.0000] <famicom`>
conciseness?

[04:34:28.0000] <annevk>
famicom`: they were concise because they were incomplete and inaccurate and full of holes

[04:34:50.0000] <annevk>
famicom`: if you prefer that, it's better to not read a standard, but a tutorial of sorts

[04:35:01.0000] <famicom`>
and you are?

[04:35:15.0000] <annevk>
Anne?

[04:35:19.0000] <famicom`>
of?

[04:35:33.0000] <annevk>
of?

[04:35:57.0000] <famicom`>
im not following you, what is wrong with a dtd or xsd schema definitinon for that matter

[04:36:05.0000] <famicom`>
i understand that html is an evolving language

[04:36:34.0000] <famicom`>
but we have no guidelines of what is "correct"

[04:36:47.0000] <famicom`>
apart from implementation

[04:37:14.0000] <annevk>
famicom`: reading http://hsivonen.iki.fi/thesis/html5-conformance-checker.xhtml might give you an idea of issues with schema languages

[04:37:28.0000] <annevk>
famicom`: actually we do, the specification covers what is correct, in English

[04:37:44.0000] <famicom`>
sorry

[04:38:56.0000] <jgraham>
I believe annevk is Anne of Kestern

[04:38:58.0000] <famicom`>
so there isnt a single machine parsable deifinition around

[04:39:18.0000] <famicom`>
hyey anne

[04:39:20.0000] <famicom`>
nederlander?

[04:40:09.0000] <famicom`>
ah ik zie het nu

[04:40:18.0000] <famicom`>
respect \o/

[04:40:22.0000] <famicom`>
i read this guys blogs before

[04:43:40.0000] <famicom`>
anne is your main focuss purely markup languages?

[05:39:26.0000] <annevk>
famicom`: currently URLs and platform APIs

[05:40:58.0000] <jgraham>
odinho: thanks

[06:17:07.0000] <annevk>
Are there places in the platform that take domain names but not "[IPv6]" notation?

[06:36:06.0000] <matjas>
var dummy = document.createElement('iframe'); dummy.src = 'http://google.com/©'; console.log(dummy.src);

[06:36:14.0000] <matjas>
"http://google.com/%C2%A9" in Blink

[06:38:00.0000] <annevk>
Found another bug in https://tools.ietf.org/html/rfc6454 Apparently it uses IDNA 2008.

[06:38:10.0000] <matjas>
oh no, bad example

[06:38:23.0000] <annevk>
matjas: not sure what you mean by that :)

[06:38:40.0000] <matjas>
annevk: i was talking about something else, but gave a bad example

[06:39:09.0000] <matjas>
in some browsers, a special symbol in the TLD part of the hostname gets normalized to its URL-encoded equivalent

[06:39:14.0000] <matjas>
in Firefox that is not the case

[06:40:29.0000] <annevk>
TLD is not special per any spec

[06:41:11.0000] <matjas>
var dummy = document.createElement('iframe'); dummy.src = 'http://google.com℁'; console.log(dummy.src);

[06:41:20.0000] <matjas>
→ "http://google.coma/s" in WebKit/Blink

[06:41:47.0000] <matjas>
no wait, just in WebKit

[06:41:52.0000] <matjas>
in Blink it’s "http://google.coma%2Fs/"

[06:42:12.0000] <matjas>
Firefox acts as WebKit

[06:43:22.0000] <annevk>
That makes a surprising amount of sense, but is actually bad...

[06:43:46.0000] <matjas>
what behavior makes the most sense?

[06:44:09.0000] <matjas>
btw in old Opera 12 it’s option 3: "http://google.xn--com-cg1a/"

[06:45:23.0000] <annevk>
WebKit / Gecko only apply Unicode normalization. I guess Chrome then filters out certain bad code points via percent escaping. But since percent escaping doesn't make sense anymore at that point, it might be better to fail parsing the URL...

[06:45:35.0000] <matjas>
yeah, pretty weird

[06:46:00.0000] <annevk>
The normalization is what IDNA 2003 requires. But I suspect this code point is not from Unicode 3.2

[06:46:32.0000] <matjas>
http://codepoints.net/U+2101 added in Unicode v1.1

[06:46:55.0000] <Ms2ger>
"We present JSCert, a mechanised specification of ECMAScript 5 in the Coq proof assistant, and JSRef, a reference interpreter for JavaScript extracted from Coq to OCaml."

[06:48:45.0000] <annevk>
matjas: okay, then maybe the mapping is not from Unicode 3.2

[06:49:05.0000] <matjas>
ah, gotcha

[06:49:06.0000] <annevk>
matjas: cannot find 2101 in http://tools.ietf.org/html/rfc3454

[06:54:56.0000] <annevk>
Should I be scared by http://lxr.mozilla.org/mozilla-central/source/netwerk/dns/nsIIDNService.idl#19 citing https://tools.ietf.org/html/draft-ietf-idn-idna-06 rather than a final specification?

[06:55:11.0000] <Domenic_>
those draft URLs are the worst

[06:55:26.0000] <Domenic_>
i had people filing bugs on my oauth2 library based on multi-year-old drafts

[06:57:43.0000] <annevk>
Seems http://lxr.mozilla.org/mozilla-central/source/netwerk/dns/nsIDNService.cpp cites final (2003) RFCs it seems. Guess nobody updated the .idl...

[07:21:26.0000] <SimonSapin>
annevk: https://github.com/lifthrasiir/rust-encoding actually does have a streaming API, just not in the readme

[07:21:50.0000] <matjas>
for the record, I filed https://code.google.com/p/chromium/issues/detail?id=273712

[07:22:02.0000] <SimonSapin>
It also tries to mimic the spec’s TextEncoder and TextDecoder APIs, which I think is not a great idea for non-JavaScript

[07:22:26.0000] <annevk>
SimonSapin: yeah, seems bad

[07:22:34.0000] <annevk>
SimonSapin: also seems bad to add extensions such as "ascii"

[07:23:22.0000] <SimonSapin>
well, it’s implemented, but not associated with any string label

[07:23:37.0000] <annevk>
matjas: fwiw, I'm not entirely sure what the correct behavior is, but what Gecko does is bad too as when you'd serialize and then parse the URL again you'd get a different result

[07:26:51.0000] <aleray>
hi, I would like to implement typogrify/smartypants like filters using html5lib. I don't really like their approach with regex and I would like to implement more rules (for french typography). I was thinking about taking the existing htmlserializer and adding my own filters in there. DO you think it is a good idea? Any advices regarding this?

[07:27:13.0000] <jgraham>
That sounds quite reasonable

[07:27:22.0000] <jgraham>
Although I don't really know what those other things do

[07:33:54.0000] <aleray>
jgraham, should I modify directly the htmlserializer? Or should it be a "Filter"?

[07:36:48.0000] <annevk>
matjas: it seems like 2101 changed between http://www.unicode.org/Public/3.2-Update/DerivedNormalizationProps-3.2.0.txt and http://www.unicode.org/Public/UNIDATA/DerivedNormalizationProps.txt :/

[07:38:59.0000] <jgraham>
aleray: Making a filter seems to be more sensible

[07:39:23.0000] <aleray>
jgraham, nice thanks. I will try this

[08:00:58.0000] <aleray>
jgraham, trying this simple example: http://dpaste.com/1344361/ I get an error: TypeError: unhashable type

[08:01:01.0000] <aleray>
any idea?

[08:03:11.0000] <jgraham>
aleray: I haven't looked at the code for too long to answer off the top of my head. Can you paste the full tb?

[08:03:29.0000] <aleray>
jgraham, yes

[08:03:57.0000] <aleray>
jgraham, http://dpaste.com/1344363/

[08:07:44.0000] <jgraham>
It appears to be getting something other than a string for an attribute name

[08:09:20.0000] <jgraham>
But I don't know why it should see an attribute at all

[08:16:01.0000] <aleray>
jgraham, the value of token is "{u'namespace': u'http://www.w3.org/1999/xhtml', u'type': u'StartTag', u'name': u'p', u'data': {}}"

[08:16:08.0000] <aleray>
if it helps

[08:22:05.0000] <jgraham>
aleray: Oh

[08:22:22.0000] <jgraham>
It looks like the sanitiser is expecting the attributes to be a list

[08:22:40.0000] <jgraham>
I wonder if this ever worked or if gsnedders changed it recently

[08:23:55.0000] <aleray>
jgraham, in my case it what just to test out the filter thing... I don't plan to use the sanitizer filter.

[08:24:18.0000] <aleray>
but I guess it might be useful for other people

[08:24:23.0000] <gsnedders>
jgraham: Ages ago.

[08:24:47.0000] <gsnedders>
aleray: That is https://github.com/html5lib/html5lib-python/issues/72 no?

[08:25:05.0000] <gsnedders>
Or rather it is caused by that.

[08:25:42.0000] <gsnedders>
aleray: Look at any other filter. :)

[08:25:48.0000] <gsnedders>
aleray: The rest work, AFAIK.

[08:27:03.0000] <aleray>
OK, so another question: I have written the following: http://dpaste.com/1344381/. It works, but the & of "&hellip;" get escaped when I serialize. so it become "&amp;hellip;"

[08:27:09.0000] <aleray>
can I avoid it?

[08:27:53.0000] <gsnedders>
aleray: You want to use the Unicode character \u2026

[08:28:04.0000] <aleray>
gsnedders, thanks

[08:28:14.0000] <gsnedders>
aleray: Instead of using the character reference. The serializer will deal with escaping things as character references as needed.

[08:28:36.0000] <aleray>
gsnedders, euh?

[08:28:40.0000] <aleray>
didn't get it

[08:29:14.0000] <jgraham>
/me wonders what the objection to dropping the tokenizer sanitizer mixin was

[08:29:32.0000] <jgraham>
(I was possibly the one that objected)

[08:29:42.0000] <jgraham>
(apart from the fact that people are using it)

[08:30:19.0000] <gsnedders>
aleray: The filters have no concept of character references like &hellip;. They merely have runs of characters. The serializer will convert the characters to character references if needed.

[08:30:28.0000] <gsnedders>
jgraham: It's going for 1.0.

[08:30:45.0000] <gsnedders>
jgraham: And the tokenizer-parser distinction is becoming an internal API.

[08:31:25.0000] <jgraham>
Like it was in the beginning you mean :)

[08:31:39.0000] <aleray>
thank you both, I need to look further at it but your advices were useful

[08:31:44.0000] <jgraham>
I think that's quite sensible

[08:32:18.0000] <gsnedders>
jgraham: Also, pip now installs 0.95 again, because it now ignores pre-release versions by default.

[08:33:06.0000] <jgraham>
calling it 1.0b was probably a mistake

[08:33:11.0000] <jgraham>
It could have been 0.99

[08:33:24.0000] <jgraham>
(I would support re-releasing it as 0.99)

[08:33:41.0000] <jgraham>
And just keep adding 9s :)

[08:36:23.0000] <gsnedders>
:)

[08:38:32.0000] <gsnedders>
jgraham: https://github.com/html5lib/html5lib-python/pull/93 is the only API change I want to make for 1.0

[08:39:03.0000] <gsnedders>
jgraham: And then fix saniziter and then I think we can call it 1.0

[08:39:25.0000] <Ms2ger>
But it's not finished!

[08:39:41.0000] <gsnedders>
It never will be.

[08:39:56.0000] <jgraham>
gsnedders: I think "remove the tokenizer sanitizer" counts as an API change :)

[08:56:50.0000] <jgraham>
Oh happy span time, github is down again

[08:56:53.0000] <jgraham>
*spam

[08:56:55.0000] <SimonSapin>
yay centralization. status.github.com "Major service outage."

[08:57:13.0000] <jgraham>
Although happy span time seems almost on-topic for the channel

[09:03:36.0000] <annevk>
Hmm. File.lastModifiedDate is a Date object too

[09:22:21.0000] <annevk>
RFC3454 is beautiful... Section 5 states that remaining subsections are non-normative. Section 6 states "The characters in section 5.8 MUST be prohibited."

[09:30:03.0000] <zewt>
heh i implemented some stringprep profile at some point ... typical rfc nightmare

[09:33:02.0000] <annevk>
So yeah... I'm wondering what to do here. Just reference IDNA 2003 and override the Unicode version... Or define loads of it locally...

[09:48:37.0000] <dglazkov>
good morning, Whatwg!

[10:03:53.0000] <Ms2ger>
/me found https://twitter.com/t/status/368053711794634752 funny

[10:11:20.0000] <tantek>
Ms2ger did you get that today is the 227th day of the year?

[10:11:31.0000] <Ms2ger>
Yeah, I know you use that format

[10:11:56.0000] <Ms2ger>
I found the juxtaposition with the comic denouncing it funny

[10:43:45.0000] <Hixie>
famicom`: a machine-readable version of the spec would just be the source code for a browser

[10:50:21.0000] <Domenic_>
So where does one get Anolis these days

[10:50:34.0000] <Ms2ger>
bitbucket

[10:50:50.0000] <Domenic_>
so i have to install hg, fun times

[10:51:23.0000] <Domenic_>
the setup instructions at http://hg.gsnedders.com/anolis/raw-file/1.0/README.html are accurate still, despite the new repo location?

[10:53:36.0000] <Ms2ger>
Should be pretty much the same, yes

[10:53:48.0000] <Ms2ger>
Or http://pythonhosted.org/anolis/

[10:54:13.0000] <Ms2ger>
Oh, you can probably also use pip or whatever

[12:51:02.0000] <zcorpan>
<base href=about:blank> isn't something i've considered before

[12:52:22.0000] <zcorpan>
seems it's ignored in blink

[12:53:35.0000] <zcorpan>
not ignored in gecko but gecko doesn't like resolving to about:blank, or something, at least clicking the link here does nothing http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2461

[13:13:01.0000] <zcorpan>
i wonder if we can change setProperty(value) without the priority argument to just change the value and not the priority

[13:14:02.0000] <zcorpan>
it seems a bit unexpected that it unsets !important

[13:22:31.0000] <TabAtkins>
zcorpan: I'll bet we could.

[13:22:50.0000] <TabAtkins>
zcorpan: I'm betting most applications don't realize they're unsetting !important, and that for nearly all, it doesn't actually matter.

[13:23:37.0000] <zcorpan>
yeah. and when it does matter, it means that the new value doesn't get applied, which seems like a bug in the code

[13:24:07.0000] <TabAtkins>
Right.

[13:25:04.0000] <zcorpan>
suggested that on the list

[13:25:27.0000] <zcorpan>
i'm not supposed to be working today :-P

[13:32:15.0000] <Domenic_>
darobin: respec.js is *so good*

[13:48:02.0000] <Hixie>
man, i really should fix the stack of open elements to not grow downwards

[13:48:05.0000] <Hixie>
that's such a dumb thing

[13:57:57.0000] <TabAtkins>
Heh.

[14:07:04.0000] <darobin>
Domenic_: glad you like it :) It needs a good overhaul though. I'll probably be giving it a good scrubbing at the end of the month (notably IDL and docs)

[14:07:51.0000] <Domenic_>
darobin: ya docs would be the most helpful, i discovered most things i needed by looking through the source and the templates

[14:08:08.0000] <darobin>
ouch, sorry to hear that

[14:08:12.0000] <Domenic_>
darobin: so far the undocumented features i used include class="issue" and overrideCopyright

[14:08:18.0000] <darobin>
there's http://dev.w3.org/2009/dap/ReSpec.js/documentation.html but it's outdated

[14:08:32.0000] <darobin>
I have a week cordoned off just to work on the docs

[14:09:16.0000] <darobin>
I'm off to bed now, but if you have suggestions feel free to file issues, I'll be happy to take them

[14:09:30.0000] <Domenic_>
awesome, will do!

[15:12:04.0000] <heycam>
TabAtkins, Chrome implements CSS Variables, right?

[15:12:16.0000] <heycam>
TabAtkins, I can't seem to find how to turn it on or get it to work

[15:12:18.0000] <TabAtkins>
Yes, but prefixed and behind a flag. ;_;

[15:12:26.0000] <TabAtkins>
I think it's in "Experimental CSS Features"

[15:13:09.0000] <heycam>
TabAtkins, mayb e Enable experimental Web Platform features?

[15:13:15.0000] <TabAtkins>
Sure, maybe.

[15:13:17.0000] <heycam>
can't find Experimental CSS Features in about:flags

[15:13:50.0000] <heycam>
TabAtkins, that did it, thanks :)

[15:14:52.0000] <heycam>
(works without a prefix though, so that's good)

[15:15:09.0000] <TabAtkins>
Oh, we changed it! Nice!

[15:28:36.0000] <zcorpan>
hmm, webkit/blink impl of setProperty(prop, val, '') doesn't unset !important, instead it does nothing if prop is currently important

[15:30:43.0000] <zcorpan>
you have to call removeProperty first if you want to remove the important

[15:33:45.0000] <zcorpan>
IE10 does that as well

[15:42:42.0000] <Hixie>
man, nsAttrAndChildArray is not deeply documented

[15:42:53.0000] <Hixie>
at least, not as far as i can find

[15:52:51.0000] <TabAtkins>
zcorpan: "Does nothing" meaning the call is silently ignored?

[15:53:08.0000] <zcorpan>
TabAtkins: yes

[15:53:13.0000] <TabAtkins>
Interesting.

[15:53:53.0000] <zcorpan>
TabAtkins: i guess conceptually like a declarative not-important decl

[15:54:33.0000] <zcorpan>
which might be desirable

[15:54:57.0000] <TabAtkins>
I can't think of a way in which it would be desirable. ^_^

[15:56:41.0000] <zcorpan>
let's say you write your css and you want something to *not* change style because of some js library that changes styles of things, so you put !important

[16:33:54.0000] <annevk>
If people could reply to my IDNA email (you know who), that'd be great... I think for now I'll go with referencing IDNA 2003 and overriding the Unicode version as well as making it crystal clear IDNA 2008 did not obsolete IDNA 2003 for the purposes of the URL Standard...


2013-08-16
[17:06:21.0000] <heycam>
TabAtkins++ for calling your spec generator Bikeshed

[17:06:37.0000] <TabAtkins>
Heh, thank François for the suggestion.

[17:06:42.0000] <TabAtkins>
Remy, that is.

[18:45:58.0000] <zewt>
i sure hope "screen orientation" apis are only "lock the current orientation" and never "only allow landscape/portrait", which would be terrible

[19:35:46.0000] <zewt>
the fact that i can hover over a link and see a url, right click the link and see the same url, then click "copy link location" and get a totally different url: very not okay

[23:08:53.0000] <Hixie>
zewt: it's trivial for a web app to rotate itself, once the orientation is fixed

[23:09:04.0000] <Hixie>
zewt: so there's no practical difference to the user

[00:00:55.0000] <Ms2ger>
Hixie, nsAttrAndChildArray is... interesting

[00:04:21.0000] <Ms2ger>
It's basically an array of void*s where some of the void*s are actually used to store attributes rather than pointers

[04:09:34.0000] <annevk>
Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=22496 lacks a reply

[04:14:31.0000] <annevk>
http://dev.w3.org/cvsweb/2006/webapi/WebIDL/Overview.xml.diff?r1=1.642;r2=1.643;f=h Does getElementsByTagName() always return a new object? I thought we stopped doing that...

[04:30:19.0000] <zcorpan>
annevk: no, and it was pointed out and fixed in webidl, i think

[04:30:57.0000] <annevk>
ah I see

[04:31:07.0000] <annevk>
teaches me reading diffs rather than drafts

[05:41:40.0000] <hsivonen>
Oh great. Discussion about deprecating <blockquote> on public-html.

[05:42:29.0000] <odinho>
*shrug

[05:42:51.0000] <Ms2ger>
Oh great. public-html.

[05:45:17.0000] <hsivonen>
/me hopes that Robin makes it go away

[05:49:43.0000] <Ms2ger>
I'd rather keep it for the unhelpful people

[05:50:04.0000] <hsivonen>
oh. I meant making the proposal go away

[05:50:17.0000] <hsivonen>
making <blockquote> go away won't fly

[05:50:23.0000] <hsivonen>
/me got trolled into replying

[05:50:49.0000] <hsivonen>
I wonder how long it's been since my previous public-html post

[05:51:39.0000] <Ms2ger>
Sunday, 10 March 2013

[05:51:59.0000] <hsivonen>
shorter time than I thought

[05:52:41.0000] <Ms2ger>
/me wonders if he ever posted there

[05:53:07.0000] <Ms2ger>
Doesn't appear that way

[05:53:22.0000] <hsivonen>
Ms2ger: congratulations

[05:53:38.0000] <Ms2ger>
Thanks :)

[06:02:54.0000] <jgraham>
Oh that was public-html

[06:02:57.0000] <jgraham>
makes sense I guess

[06:03:10.0000] <jgraham>
I should really setup up mail filters again

[06:11:43.0000] <SteveF>
hsivonen: how did you get trolled into replying?

[06:13:00.0000] <SteveF>
hsivonen: "hopes that Robin makes it go away" from the current discussion i don't see it happening, but do see possible changes in cite and blockquote definitions

[06:19:05.0000] <jgraham>
SteveF: That's an obviously silly thread

[06:20:21.0000] <SteveF>
jgraham: why?

[06:21:15.0000] <jgraham>
SteveF: Mostly for the reasons hsivonen already gave

[06:24:16.0000] <SteveF>
jgraham: the idea of obsoleting blockquote is a non starter but other stuff arising from the discussion is not

[06:29:01.0000] <jgraham>
I'm pretty sure I have seen all the same discussions before. I'm entirely sure that no change you make to the spec here will noticably improve the experience for consumers of HTML, since it won't be used or will at best be used sporadically

[06:30:05.0000] <SteveF>
jgraham: maybe

[06:31:26.0000] <SteveF>
jgraham: authors may benefit

[06:33:10.0000] <hsivonen>
SteveF: I read the initial post to the thread and replied even though I knew I shouldn't

[06:34:11.0000] <SteveF>
hsivonen: i don't think the people on the thread are trolls but hey thats just me

[06:35:00.0000] <hsivonen>
SteveF: oh, I'm not suggesting it got intentionally trolled

[06:35:18.0000] <SteveF>
hsivonen: ok

[06:36:12.0000] <hsivonen>
is there a term for involuntary trolling that has an effect similar to intentional trolling?

[06:37:09.0000] <hsivonen>
as in posting something that's from outside the Overton Window without intending to troll

[06:38:07.0000] <hsivonen>
SteveF: I'm glad we agree that obsoleting the element is a non-starter

[06:38:54.0000] <hsivonen>
I'll try to use expressions like "succumb to 386" in order to avoid the offense of "getting trolled"

[06:39:11.0000] <SteveF>
hsivonen: sure

[06:40:07.0000] <annevk>
hsivonen: it happens when you encounter people who missed a decade of debate, as with the XML 1.1 guy

[06:40:15.0000] <SteveF>
hsivonen: poeple can propose anything they like, but there are lots of hoops to jump through before stuff may happen

[06:40:20.0000] <Ms2ger>
"detractor performant"

[06:42:30.0000] <hsivonen>
Ms2ger: I believe "detractor performant" refers to suspected-intentional trolls without the word "troll"

[07:16:12.0000] <GPHemsley>
/me just closed a 13-year-old Mozilla bug reported by Hixie as WFM.

[07:17:11.0000] <Lachy>
GPHemsley, which bug?

[07:17:27.0000] <GPHemsley>
https://bugzilla.mozilla.org/show_bug.cgi?id=34822

[07:18:03.0000] <GPHemsley>
And then there's this bug, which annevk said he would get to back in 2004: https://bugzilla.mozilla.org/show_bug.cgi?id=74263

[07:20:34.0000] <GPHemsley>
resolved that WFM, too

[07:20:42.0000] <zewt>
Hixie: having a way for apps to say "landscape only" is going to mean lots of pages randomly doing that (in the same way that pages once resized windows to 640x480), which will be a horrible UX

[07:22:04.0000] <zewt>
i suspect people might be thinking of that as if it's analogous to mobile apps locking one orientation, but it's very different (having your orientation change out from underneath you normally only happens when you explicitly change apps; this would happen merely from browsing, and even hitting back a few times could spin back and forth between different orientations for each page you go through)

[07:25:51.0000] <zewt>
re "trivial to rotate itself: rotating the page itself isn't the same as forcing an orientation, since the browser and OS UIs won't be affected, which makes it much less intrusive (it's also not at all what you want, if you really *do* want that orientation)

[07:34:39.0000] <zewt>
gar @ pages that intercept f5 to try to keep you from refreshing

[08:20:45.0000] <annevk>
GPHemsley: only if people wanted it ;)

[08:20:53.0000] <GPHemsley>
;)

[08:23:19.0000] <jgraham>
GPHemsley: trying to eliminate all the 5 digit bugs?

[08:23:41.0000] <GPHemsley>
Not exactly, though that might be worthwhile.

[08:23:59.0000] <GPHemsley>
I was just going through the list of open bugs that hadn't been touched in 5 years.

[08:24:10.0000] <GPHemsley>
And a few jumped out at me as being clearly obsolete.

[08:24:26.0000] <GPHemsley>
(And/or something that I had to the knowledge to assess.)

[08:27:09.0000] <GPHemsley>
jgraham: Incidentally, there are actually still a handful of open 4-digit bugs

[08:27:21.0000] <GPHemsley>
opened in 1999

[08:28:04.0000] <GPHemsley>
but I don't think I'm qualified to assess any of them

[08:29:51.0000] <GPHemsley>
Oh, here's a good one: https://bugzilla.mozilla.org/show_bug.cgi?id=7954

[08:29:56.0000] <GPHemsley>
"outstanding issues for full HTML 4.01 support"

[08:30:14.0000] <GPHemsley>
(though that one still gets updated every so often)

[08:32:50.0000] <GPHemsley>
oh, and 3 3-digit bugs

[08:33:10.0000] <GPHemsley>
two are on Bugzilla

[08:33:14.0000] <GPHemsley>
but the third is "implement inheritance of alignment attributes from columns (align, valign, char, charoff, (lang, dir)?) "

[08:33:47.0000] <Ms2ger>
Oh, 915

[08:33:55.0000] <GPHemsley>
yeah, the infamous 915

[08:34:04.0000] <Ms2ger>
It doesn't close easy

[08:35:29.0000] <GPHemsley>
no it doesn't

[08:36:08.0000] <GPHemsley>
the first attempt was 2 days after it was file, back in 1998

[08:36:12.0000] <GPHemsley>
+d

[08:37:49.0000] <Ms2ger>
Should have a party next month

[08:38:01.0000] <Ms2ger>
Not many bugs make it to their 15th birthday

[08:39:03.0000] <GPHemsley>
heh

[08:39:28.0000] <GPHemsley>
540 and 554 will get there first

[08:40:16.0000] <GPHemsley>
though it's possible 540 won't make it

[08:40:37.0000] <GPHemsley>
"I will create a new patch for this very soon." – dkl back in June

[08:47:55.0000] <gsnedders>
Well, Opera's CORE-1 got fixed a couple of years back.

[08:48:47.0000] <Ms2ger>
Our first bug got wontfixed

[08:49:11.0000] <jgraham>
Did DSK-1 ever get fixed?

[08:49:19.0000] <jgraham>
I don't know what it was

[08:49:36.0000] <gsnedders>
DSK-1 was "test"

[08:49:42.0000] <jgraham>
Oh

[08:49:48.0000] <gsnedders>
Not sure what status it is in.

[08:50:40.0000] <gsnedders>
No, sorry, it was "Test Test Test", a feature request, rejected.

[08:51:41.0000] <gsnedders>
DSK-2 is "test", resolved invalid.

[08:51:50.0000] <gsnedders>
AndDSK-3 is "TEST".

[08:51:54.0000] <gsnedders>
(also invalid)

[09:04:38.0000] <GPHemsley>
hmm... http://dev.w3.org/csswg/css-text/ is a 401

[09:05:51.0000] <annevk>
wfm

[09:07:51.0000] <SimonSapin>
GPHemsley: it’s a pre-processor fail. The actual file contains the error message: https://dvcs.w3.org/hg/csswg/file/f7456b5a5ed0/css-text/Overview.html

[09:08:19.0000] <GPHemsley>
interesting

[09:10:32.0000] <SimonSapin>
GPHemsley: fixed

[09:10:38.0000] <GPHemsley>
thanks

[09:19:50.0000] <Ms2ger>
gsnedders, ah, those DSK people...

[09:22:13.0000] <annevk>
TIL: browsers don't care about empty domain labels

[09:37:05.0000] <Ms2ger>
Lachy: I must recommend a FxOS phone ;)

[09:46:39.0000] <jgraham>
/me thinks the temptation to call a class TestRunnerRunner might indicate something went wrong somewhere

[09:47:21.0000] <Ms2ger>
TestRunnerRunnerFactory?

[09:47:49.0000] <gsnedders>
jgraham: You approved a review of html5lib stuff with moduleFactoryFactory!

[09:48:14.0000] <jgraham>
Yeah well

[09:50:26.0000] <jgraham>
In this case TestRunners want to live in their own process and if they are forcibly killed it must be by the owner process. So I have a TestRunnerRunner that starts the TestRunners and kills them if they become unresponsive. But it doens't feel good, so I guess something should change

[09:52:49.0000] <gsnedders>
That seems sane.

[09:53:08.0000] <Ms2ger>
TestRunnerManager

[09:54:31.0000] <jgraham>
"manager" makes it sound better already

[09:54:47.0000] <Ms2ger>
TestManagerRunner

[09:55:03.0000] <jgraham>
Worse again :p

[09:55:36.0000] <Ms2ger>
/me switches some glasses around

[09:55:38.0000] <Ms2ger>
This?

[09:55:41.0000] <Ms2ger>
/me switches more

[09:55:43.0000] <Ms2ger>
Or this?

[09:59:14.0000] <Ms2ger>
/me finds http://hg.hoppipolla.co.uk/hgwebdir.cgi/domharness/

[10:11:43.0000] <tobie>
jgraham: not sure what you're working on, but the runner and server prob need to be two different projects.

[10:14:25.0000] <Ms2ger>
tobie, he's got a job now ;)

[10:16:12.0000] <jgraham>
tobie: I am working on all the things that Mozilla need to run the tests

[10:16:27.0000] <jgraham>
Not neccessarily sequentially

[10:18:05.0000] <tobie>
:)

[10:33:24.0000] <Hixie>
zewt: i agree

[10:35:18.0000] <Hixie>
hsivonen: why are you even reading that list, sheesh

[10:43:15.0000] <annevk>
I checked in IDNA support for the host parser. I didn't do anything I wanted to do today though: https://www.w3.org/Bugs/Public/show_bug.cgi?id=22986

[10:44:29.0000] <annevk>
Hmm, I meant everything there... but just as well

[10:54:08.0000] <annevk>
Hixie: replied

[10:54:33.0000] <Hixie>
url?

[10:56:21.0000] <annevk>
Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=22496

[11:29:49.0000] <GPHemsley>
There is a legitimate bug entitled "Flour missing from pancake recipe"

[11:34:32.0000] <GPHemsley>
/me 's head explodes

[11:34:54.0000] <GPHemsley>
recursive definitions don't work well in plain English

[11:36:38.0000] <GPHemsley>
an inclusive ancestor can either be host-including or non-hosting including?

[11:36:41.0000] <GPHemsley>
+-

[11:36:52.0000] <GPHemsley>
an inclusive ancestor can either be host-including or non-hosting-including?

[11:36:56.0000] <GPHemsley>
argh

[11:37:00.0000] <GPHemsley>
an inclusive ancestor can either be host-including or non-host-including?

[11:38:46.0000] <GPHemsley>
meh, that's the wrong question to ask anyway

[11:42:06.0000] <GPHemsley>
yeah, I think adding "of an object's root's host" after "an inclusive ancestor" might clarify things a little bit

[11:42:13.0000] <GPHemsley>
/me just realized annevk isn't even here

[13:36:45.0000] <TabAtkins>
gsnedders: Yo, html5lib is throwing "Coercing non-XML name" warnings, but not telling me anything about the error.  No line number, no name, nothing.

[13:36:54.0000] <annevk>
Hixie: I don't follow, recursive terminology around trees has been in standards since at least CSS 2.1

[13:43:01.0000] <gsnedders>
TabAtkins: You want useful error messages?

[13:43:11.0000] <TabAtkins>
gsnedders: Yes.

[13:43:15.0000] <gsnedders>
Bah!

[13:43:21.0000] <gsnedders>
TabAtkins: GitHub issue, plz.

[13:43:29.0000] <TabAtkins>
kk

[13:47:20.0000] <Hixie>
annevk: responded

[14:00:48.0000] <annevk>
ta, will look later

[14:01:12.0000] <annevk>
I mean, that comment looks useful, will look into using it later

[14:05:13.0000] <Hixie>
heh k

[15:31:40.0000] <MikeSmith>
Hixie: question about document conformance and "script-supporting elements", per wording of the hgroup content model "One or more h1, h2, h3, h4, h5, h6, and script-supporting elements.", is <hgroup><script>...</script></hgroup> meant to be valid?

[15:32:13.0000] <Hixie>
yeah, the idea being that you might use the <script> to document.write() the h1 or whatever

[15:32:32.0000] <Hixie>
there's a lot of things where it's not clear exactly where the line should be drawn, that's one of them

[15:32:32.0000] <MikeSmith>
OK

[15:33:58.0000] <MikeSmith>
and same for dl, right? I can have <dl><dt>foo<script>..</script></dl> without <dd>, right?

[15:35:09.0000] <MikeSmith>
but not <dl><dt>foo</dl>

[15:48:40.0000] <Hixie>
MikeSmith: hm, let me check, i remember that <dl> was hard

[15:49:09.0000] <MikeSmith>
ok

[15:49:13.0000] <Hixie>
"Zero or more groups each consisting of one or more dt elements followed by one or more dd elements, optionally intermixed with script-supporting elements."

[15:49:38.0000] <Hixie>
so no, if you have a <dt> you have to have a <dd>

[15:49:48.0000] <Hixie>
but you can have <Script> and <template>s all over the place

[15:50:02.0000] <MikeSmith>
OK

[15:51:21.0000] <MikeSmith>
Hixie: that seems inconsistent with the <hgroup> case, where the <script> or <template> can essentially be used in place of an <h1>-<h6>

[15:51:34.0000] <Hixie>
<dl><script></script></dl> is fine

[15:52:58.0000] <MikeSmith>
OK

[16:00:04.0000] <MikeSmith>
Hixie: but I note that's a different model than what you had before you made the http://html5.org/r/8022 change, "Make <script> be accepted in most places <template> is now accepted"

[16:00:12.0000] <MikeSmith>
https://github.com/w3c/html/commit/e92161bbeb11d2ed1a2e3f5f45e63171f4102d83#L2L19501

[16:01:38.0000] <MikeSmith>
prior to that, <dl><dt>foo</dt><template></template></dl> and <dl><template></template><dd></dd></dl> were valid

[16:03:28.0000] <Hixie>
MikeSmith: yeah, that was a conscious change

[16:03:53.0000] <MikeSmith>
ok, thanks, that's what I wanted to confirm

[16:04:10.0000] <MikeSmith>
I'll update the validator

[16:04:39.0000] <TabAtkins>
Hixie: What was the conscious behind that change?

[16:07:38.0000] <Hixie>
i basically ended up in a state where i was getting rid of any checks at all in <dl>

[16:07:48.0000] <Hixie>
and i didn't think that was useful to authors

[16:08:09.0000] <Hixie>
given the number of times i accidentally type <dd> instead of <dt> and so on

[16:11:55.0000] <TabAtkins>
Not any checks at all, just any checks *while there's a script or template around*.

[16:12:04.0000] <TabAtkins>
Because you could output anything from them.

[16:14:41.0000] <Hixie>
the <Script> doesn't have to be inside the <dl> for that argument to work

[16:15:01.0000] <Hixie>
so i settled on a compromise, whereby the validator checks for matching groups

[16:15:34.0000] <Hixie>
like i said above, there's a lot of things where it's not clear exactly where the line should be drawn

[16:17:59.0000] <TabAtkins>
The script does have to be in the <dl> for that argument to work *during parsing*.

[16:38:03.0000] <GPHemsley>
Hixie: Maybe my new comment makes it clearer?

[16:38:15.0000] <GPHemsley>
/me hopes he understands correctly

[16:40:30.0000] <GPHemsley>
d'oh

[16:40:39.0000] <GPHemsley>
I keep typing "ancestory" instead of "ancestor"


2013-08-17
[19:59:21.0000] <Hixie>
GPHemsley: check now? https://www.w3.org/Bugs/Public/show_bug.cgi?id=22496

[23:10:36.0000] <Yuhong>
Hixie: bug 915 makes me wonder what was happening in 1997 between the HTML WG and the CSS WG.

[05:04:11.0000] <zcorpan>
Hixie: i'd expect to be able to remove a <script> element and have the document still be valid (re <hgroup><script>)

[05:25:31.0000] <GPHemsley>
Hixie: That does seem a little better, but I'd like to hear what annevk has to say on the subject.

[05:25:56.0000] <GPHemsley>
Hixie: (I'd also prefer to have as few possessives as possible.)

[14:19:22.0000] <ball999_>
does it matter which kind of elements I am using on the page  for the opening speed of a page?


2013-08-18
[17:55:15.0000] <MikeSmith>
http://www.youtube.com/watch?v=hZw8t-GVCB4 is a must-see

[17:55:26.0000] <MikeSmith>
from John A. Bilicki III, the world's first Web 3.0 Professional Web Designer

[00:43:13.0000] <Ms2ger>
Lovely, more FileAPI tests

[01:35:09.0000] <tobie>
:)

[01:38:09.0000] <Ms2ger>
Now all I need to do is figure out how they overlap with the existing tests

[12:25:47.0000] <rtc>
is it ok if I omit paragraph end tags?

[12:26:34.0000] <Ms2ger>
Sure

[12:27:24.0000] <rtc>
my code will function 100% of the time on all user agents? the re is no difference?

[13:04:06.0000] <zcorpan>
rtc: the rules for when it's OK to omit </p> are here http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags "A p element's end tag may be omitted if ..."

[13:04:46.0000] <zcorpan>
/me wonders if the list of elements in that section are kept up-to-date

[13:05:13.0000] <zcorpan>
<main> is there at least

[13:05:32.0000] <zcorpan>
did we introduce new "block" elements since main?

[13:07:37.0000] <zcorpan>
details isn't in the list

[13:08:27.0000] <zcorpan>
wonder why dir is in the list but not center

[13:21:56.0000] <zcorpan>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=22999

[13:23:56.0000] <zcorpan>
is this handled the way we want? http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2464

[13:24:39.0000] <zcorpan>
normally elements that can be in head are hoisted to head when they appear after </head> but before body

[13:51:16.0000] <matjas>
http://mathiasbynens.be/demo/javascript-identifier-regex was a lot of fun to write


2013-08-19
[22:45:07.0000] <kochi1>
MikeSmith: ping

[22:57:25.0000] <MikeSmith>
kochi1: away from my PC. will be back in 2 hours

[22:57:56.0000] <kochi1>
Okay.  I just wanted to check what's it going to be like next week.

[22:58:05.0000] <kochi1>
will send you a mail about it.

[22:58:19.0000] <kochi1>
thanks!

[23:09:29.0000] <MikeSmith>
kochi1: ok

[00:23:24.0000] <zcorpan>
heycam|away: is this correct? if it is, is it because window is special?   window.hasOwnProperty("length");  // Evaluates to true.

[00:23:32.0000] <zcorpan>
(from an example in webidl)

[00:24:50.0000] <Ms2ger>
Yes and yes

[00:25:16.0000] <Ms2ger>
http://dev.w3.org/2006/webapi/WebIDL/#Global

[00:35:19.0000] <zcorpan>
thanks. so 'length' attributes on other objects are on prototype

[00:39:49.0000] <heycam>
zcorpan, yup

[00:39:59.0000] <heycam>
a recent change, but one that has been waiting to be made for a while

[00:40:10.0000] <heycam>
(otherwise 'var length;` breaks)

[00:40:23.0000] <zcorpan>
yeah

[00:41:49.0000] <zcorpan>
i was reviewing a test that expected length on FileList instance to be an own property

[00:42:15.0000] <heycam>
r-

[00:43:48.0000] <Ms2ger>
People always seem to do that at testtwf

[00:45:31.0000] <Ms2ger>
Hmm, Chrome seems to match the argument to createEvent case-sensitively

[00:46:15.0000] <Ms2ger>
r? https://github.com/w3c/web-platform-tests/pull/295

[00:48:00.0000] <heycam>
/me gets all this githubmail about web-platform-tests now ;_;

[00:48:43.0000] <Ms2ger>
I unwatched it

[00:49:02.0000] <Ms2ger>
Critic sends enough email for me

[00:51:30.0000] <heycam>
/me must look into this "unwatching" thing

[00:53:02.0000] <zcorpan>
Ms2ger: can you add a test about the case sensitivity thing? maybe also with turkish i's?

[00:53:15.0000] <Ms2ger>
That's already tested further below

[00:53:22.0000] <Ms2ger>
Including the Turkish i :)

[00:53:48.0000] <zcorpan>
ah

[00:55:44.0000] <zcorpan>
is it useful to test the other turkish i (lowercase dotless)?

[00:56:23.0000] <zcorpan>
i guess an impl could use toUpperCase()

[01:05:10.0000] <Ms2ger>
Probably somewhat useful, yes

[01:05:20.0000] <Ms2ger>
Same pull request?

[01:08:18.0000] <zcorpan>
sure, i added an issue about it there

[01:11:26.0000] <Ms2ger>
Done

[01:13:38.0000] <MikeSmith>
kochi1: you still around?

[01:14:32.0000] <zcorpan>
Ms2ger: reviewed

[01:46:43.0000] <zcorpan>
if i want to make changes to https://github.com/w3c/web-platform-tests/pull/55 i just clone web-platform-tests and push to that branch, right?

[01:48:12.0000] <zcorpan>
ah it even says so on that page :-)

[01:50:36.0000] <Ms2ger>
Yep

[02:13:36.0000] <zcorpan>
where is toNativeLineEndings() defined? it's not in FileAPI editor's draft

[02:13:39.0000] <zcorpan>
or was it dropped?

[02:14:02.0000] <annevk>
it was dropped

[02:21:18.0000] <zcorpan>
why?

[02:22:49.0000] <zcorpan>
/me found http://dev.w3.org/cvsweb/2006/webapi/FileAPI/Overview.html.diff?r1=1.181;r2=1.182;f=h

[02:26:04.0000] <zcorpan>
/me found <http://www.w3.org/mid/CA+c2ei_ZLffRr=T-KWAOSGFqO3avtf=nrVoiini=f168fNm5ZQ⊙mgc>

[02:33:23.0000] <jgraham>
zcorpan: Be happy it makes things easier to test :)

[02:33:46.0000] <jgraham>
Otherwise you are straight into "test passes on platform A but fails on platform B" territory

[02:34:37.0000] <zcorpan>
jgraham: yeah. though i still have to make sure that the 'endings' thing does nothing in the Blob constructor

[02:35:59.0000] <jgraham>
Indeed

[02:36:20.0000] <jgraham>
I recall lots of tests for it doing nothing, although I don't remember if they were in the constructor specifically

[02:46:07.0000] <zcorpan>
can i do 'git push' or do i need to say something more complicated like git push origin localbranch:origin/remotebranch or whatever?

[02:47:17.0000] <jgraham>
zcorpan: It depends :)

[02:47:35.0000] <Ms2ger>
The way I would do it is:

[02:47:37.0000] <Ms2ger>
git push

[02:47:41.0000] <Ms2ger>
(crap, that doesn't work)

[02:47:47.0000] <Ms2ger>
git push <branch-name>

[02:47:49.0000] <jgraham>
If the local branch is tracking the remote, and you configured git push to work in a sane way then git push will work

[02:47:49.0000] <Ms2ger>
(crap, that doesn't work either)

[02:47:53.0000] <Ms2ger>
git push origin <branch-name>

[02:48:07.0000] <Ms2ger>
(maybe this works? if not, ask jgraham)

[02:48:19.0000] <jgraham>
But "git push origin local:remote" will always work (no need for origin/)

[02:48:58.0000] <Ms2ger>
Unless there's something wrong with your origin :)

[02:49:12.0000] <zcorpan>
what i've done so far is: git fetch origin; git checkout -b submission/fileapi-opera origin/submission/fileapi-opera

[02:49:24.0000] <jgraham>
git branch -vv will tell you what local branches track

[02:49:54.0000] <zcorpan>
* submission/fileapi-opera 19b27d8 [origin/submission/fileapi-opera: ahead 1] Test for non-support for endings and toNativeLineEndings

[02:50:37.0000] <jgraham>
(or git rev-parse --abbrev-ref @{u}, but that's a bit more advanced)

[02:50:54.0000] <jgraham>
zcorpan: Plain git push ought to work

[02:51:27.0000] <zcorpan>
thanks. it worked

[02:51:38.0000] <annevk>
matjas: so I'm thinking about introducing URL.domainToASCII / URL.domainToUnicode, should they return arrays or strings? I'm guessing strings, but I could go either way

[02:52:58.0000] <matjas>
annevk: why would you want to return an array? to get each label separately?

[02:53:32.0000] <matjas>
strings++ imho

[02:53:37.0000] <annevk>
matjas: that's how I represent domains internally

[02:54:03.0000] <annevk>
matjas: btw, polyfills for those would be cool, but quite a bit of work :/

[02:54:50.0000] <matjas>
should be trivial with punycode.js, no? well, depending on how you spec it exactly

[02:55:08.0000] <matjas>
URL.domainToASCII = punycode.toASCII; URL.domainToUnicode = punycode.toUnicode;

[02:57:46.0000] <matjas>
(more or less)

[02:57:52.0000] <annevk>
I told you this before, IDNA is way more than punycode

[02:58:49.0000] <matjas>
i intend to implement IDNA in punycode.js as soon as you figure out what’s the best way to spec it

[02:59:01.0000] <matjas>
has the IDNA problem been solved yet?

[02:59:32.0000] <annevk>
I decided to align with what browsers implemented. The parsing bit is in the specificaiton already, but I need to fill some holes.

[03:00:46.0000] <matjas>
oh, cool! nice work

[03:00:48.0000] <annevk>
In particular http://tools.ietf.org/html/rfc3454 combined with its IDNA profile http://tools.ietf.org/html/rfc3491 is what's all the complication.

[03:02:22.0000] <annevk>
I might write a post explaining IDNA 2003 at some point

[03:21:04.0000] <MikeSmith>
annevk: TR46 is not viable?

[03:21:20.0000] <annevk>
MikeSmith: it's not implemented

[03:21:20.0000] <MikeSmith>
what Mark Davis proposed as an alternative

[03:21:31.0000] <MikeSmith>
is it implementable?

[03:21:47.0000] <MikeSmith>
more implementable than IDNA 2008 I mean

[03:21:52.0000] <annevk>
maybe, but I don't see anyone moving in that direction

[03:21:57.0000] <MikeSmith>
ok

[03:22:23.0000] <annevk>
I suspect back to the drawing board would come first...

[03:26:04.0000] <matjas>
annevk: “I might write a post explaining IDNA 2003 at some point” → please do

[03:30:31.0000] <annevk>
matjas: also, domainToASCII can fail, throw?

[03:30:57.0000] <annevk>
matjas: or return original input

[03:31:13.0000] <annevk>
not sure what other alternatives there are

[03:59:53.0000] <annevk>
decided to return the original input, as that's how it works for <a href=...> too

[03:59:59.0000] <annevk>
although I just realized new URL throws

[04:00:00.0000] <annevk>
hmm

[04:00:24.0000] <annevk>
well new URL can't really do anything else

[04:01:17.0000] <annevk>
I guess I should also still deal with the case you presented, what to do with code points in the output that would affect reparsing

[04:10:58.0000] <zcorpan>
is {"0": "foo", "length":1} as "user object" per webidl?

[04:11:13.0000] <Ms2ger>
Yes

[04:11:37.0000] <Ms2ger>
Hrm

[04:12:09.0000] <Ms2ger>
"an object can be described as being a platform object, a user object, or neither"

[04:12:19.0000] <Ms2ger>
heycam|away, what kind of object is neither?

[04:12:59.0000] <zcorpan>
/me goes with 'object with properties "0" and "length"'

[04:13:22.0000] <zcorpan>
Ms2ger: maybe a Date?

[04:15:25.0000] <matjas>
interesting — NGPC prohibits the use of dotless domains: http://www.icann.org/en/groups/board/documents/resolutions-new-gtld-13aug13-en.htm#1.a

[04:16:25.0000] <matjas>
zcorpan: sounds like an array with a single element "foo"

[04:16:53.0000] <zcorpan>
matjas: not sure it's called that in webidl

[04:45:06.0000] <zcorpan>
annevk: what are the use cases for domainToASCII?

[04:49:32.0000] <zcorpan>
https://critic.hoppipolla.co.uk/a07afafa?review=262 looks like it makes sense, but i'm not familiar with that code

[05:15:46.0000] <annevk>
zcorpan: seemed like a primitive that ought to be exposed, given how libraries have implemented it as well

[05:15:59.0000] <rtc65>
any idea when I am putting input field in a form it isn't shown? Also in the for I have 3 inline-block sections they are displayed in reverse order than they are in the source code like 3 2 1, in jsfiddle my same scenaqrio looks ok - http://jsfiddle.net/rgRX3/5/  If I delete form tags everything is ok

[05:17:08.0000] <zcorpan>
annevk: i was pondering abuot the right behavior for + <li><p>If <var title>asciiDomain</var> is failure, return <var title>domain</var>.

[05:17:28.0000] <annevk>
yeah I figured

[05:18:44.0000] <zcorpan>
which libraries have this feature?

[05:20:42.0000] <annevk>
zcorpan: http://medialize.github.io/URI.js/docs.html normalizeHostname()

[05:21:02.0000] <annevk>
(though new URL() does that by default)

[05:22:42.0000] <annevk>
it just seems that given how complex those operations are exposing them will be useful

[05:23:19.0000] <annevk>
see also how often matjas' punycode is copied all over (even though it doesn't do IDNA 2003, people assume it's equivalent)

[05:29:49.0000] <zcorpan>
annevk: i'm not saying it shouldn't be added. i just want to know how it's used so i can evaluate whether the specced behavior is sane or not (maybe it should throw instead?)

[05:31:41.0000] <annevk>
It seems encodeURI / decodeURI do throw

[05:35:21.0000] <annevk>
zcorpan: emailed public-script-coord

[06:16:23.0000] <GPHemsley>
/me grumbles some more about how the new Gmail reply interface is still unusable.

[06:34:11.0000] <jgraham>
If I have a handle to a window object and navigate it, is there any easy way to tell if the navigation succeeded?

[06:34:52.0000] <jgraham>
By which I think I mean "got status 200

[06:35:00.0000] <jgraham>
"

[06:35:50.0000] <annevk>
matjas: http://annevankesteren.nl/2013/08/idna2003

[06:36:21.0000] <annevk>
jgraham: no, navigation to 404 is just as successful

[06:36:24.0000] <matjas>
annevk: ♥

[06:37:50.0000] <jgraham>
Well in this case I think the server died so I didn't get an HTTP response at all

[06:38:24.0000] <annevk>
jgraham: you should get error for network errors

[06:38:40.0000] <jgraham>
"get error"?

[06:38:51.0000] <jgraham>
win.location = "http://foo"

[06:39:03.0000] <annevk>
jgraham: oh a window object... hmm, can you get hold of its container?

[06:39:29.0000] <jgraham>
This one was window.opened() so it is a tlbc

[06:39:41.0000] <jgraham>
window.open()ed I guess

[06:39:54.0000] <annevk>
doubt it then

[06:39:59.0000] <Ms2ger>
window.open(ed)

[06:40:38.0000] <jgraham>
OK, well I guess I can set a timer and wait for a message

[06:41:02.0000] <jgraham>
Although that won't work for other cases

[06:41:13.0000] <matjas>
annevk: maybe link to http://unicode.org/reports/tr15/ for “Unicode normalization”

[06:41:26.0000] <jgraham>
I could set a timer and poke at the DOM I guess

[06:41:53.0000] <zcorpan>
jgraham: what are you trying to test?

[06:41:59.0000] <annevk>
matjas: sure

[06:44:34.0000] <annevk>
matjas: that particular bit you might be able to implement using a one-liner if you wait long enough ;)

[06:44:55.0000] <annevk>
matjas: or you could decide to write an ES6 polyfill for Unicode normalization...

[06:45:08.0000] <jgraham>
zcorpan: Well I think my server died when I was trying to run some tests. If it happens again I would like the test runner to handle it more gracefully, rather than keeping trying to load more and more tests that all fail

[06:46:24.0000] <zcorpan>
jgraham: ah. ok. so it needs to be a top-level browsing context, and you presumably don't want to load the resource twice

[06:46:47.0000] <zcorpan>
(e.g. <object> and XHR could tell you about 404)

[06:47:12.0000] <jgraham>
Right

[06:47:22.0000] <zcorpan>
the tests are all testharness.js tests?

[06:47:46.0000] <jgraham>
At the moment yes. So I can wait for the start event for a bit and fail if I don't get it

[06:47:57.0000] <jgraham>
But I think this ought to handle reftests later too

[06:49:11.0000] <zcorpan>
did you actually get a 404 response or no http response at all?

[06:49:25.0000] <zcorpan>
oh you said that earlier

[06:49:26.0000] <jgraham>
I think it was no response at all

[06:49:43.0000] <jgraham>
A 404 would be a different kind of bad

[06:50:08.0000] <zcorpan>
then a custom 404 page that signals failure doesn't help (but might be a good idea to do also)

[06:50:09.0000] <matjas>
annevk: yeah, planning to. there’s https://github.com/walling/unorm/issues/6 but not sure how correct the output of that project really is

[06:50:24.0000] <matjas>
and then write a JS lib that performs stringprep

[06:50:30.0000] <matjas>
then nameprep

[06:50:40.0000] <matjas>
and only then, idna

[06:50:57.0000] <annevk>
oh cool

[06:51:33.0000] <matjas>
/me wishes he could work on that kind of stuff full-time

[06:55:04.0000] <zcorpan>
jgraham: poking at the DOM might work if tests are normally same-origin. but i guess some tests test document.domain and so won't be same-origin. chrome/firefox give a security exception when trying to access an error page

[06:59:33.0000] <zcorpan>
jgraham: or have the framework periodically check if the server is still alive in some out-of-band fasion

[07:00:02.0000] <GPHemsley>
/me giggles about @tribute

[07:00:31.0000] <annevk>
matjas: that would be nice

[07:00:38.0000] <jgraham>
zcorpan: Yeah, so I was hoping that the runner could only check the server if there is an indication of trouble

[07:00:51.0000] <annevk>
matjas: can't one of your many dev friends set you up?

[07:00:59.0000] <annevk>
matjas: (at large companies, that is)

[07:01:31.0000] <zcorpan>
jgraham: so poke at the DOM for each test, if it throws, check if the server is alive out-of-band

[07:02:12.0000] <jgraham>
zcorpan: Yep, it sounds like something like that could work. Thanks

[07:02:59.0000] <zcorpan>
i noticed that blink-opera doesn't throw in that case but 'document' is undefined

[07:03:09.0000] <zcorpan>
i guess that's a bug

[07:05:20.0000] <matjas>
annevk: i’m a bit of an asshole in that i really don’t want to relocate, which is a problem for most large companies

[07:09:27.0000] <ttepasse>
annevk, I'm curious since it wasn't mentioned in detail in your blog posting: is there new information, that browser developers won't implement IDNA 2008 and if so on what grounds?

[07:09:49.0000] <annevk>
ttepasse, no, nothing changed

[07:10:23.0000] <annevk>
ttepasse, it isn't really clear anyway how IDNA2008 (no space) would be implemented as it doesn't address things to the level of detail IDNA2003 did

[07:11:26.0000] <ttepasse>
And escalating to a better IDNA algorithm is out of the question I fear?

[07:12:28.0000] <annevk>
ttepasse: maybe, not entirely clear what there is to gain

[07:12:30.0000] <ttepasse>
Sorry for needling you, by the way. It's just a pet peeve of mine since years, given that I've got an &szlig; in my last name. ;)

[07:12:48.0000] <annevk>
I see

[07:13:00.0000] <annevk>
not normalizing that to "ss" is a security problem

[07:13:23.0000] <annevk>
unless registrars would always couple registrations for both, which they don't

[07:13:52.0000] <ttepasse>
I'd hoped the longer sunrise periods would see to that.

[07:13:54.0000] <annevk>
ttepasse: search for bank in http://unicode.org/reports/tr46/

[07:15:57.0000] <annevk>
(it seems that particular example is no longer problematic)

[07:21:04.0000] <ttepasse>
Meh. It's always the tools a the edges. Thanks anyway.

[07:22:04.0000] <ttepasse>
(Uhm. That sounds more offensive than I intended. Thanks for your time and effort, I meant.)

[07:27:04.0000] <annevk>
ttepasse: I'm not particularly happy either, but I had to make a decision of sorts and given all the data and lack of interest in doing something else this seems the best

[07:27:20.0000] <annevk>
ttepasse: if there was more interest maybe something like UTR #46 could be done

[07:34:49.0000] <ttepasse>
Hm. I fear there are even less people interested in the greek final sigma than those interested in my funny little ligature/charakter. That is not a great base of generating interest.

[07:43:34.0000] <annevk>
ttepasse: maybe at some point we can tackle it differently

[07:44:12.0000] <annevk>
ttepasse: physical location remains the same, but there's some DNS-setting to have it presented differently

[07:44:58.0000] <annevk>
So you'd have timtepasse.example shown as timtepaße.example...

[07:46:08.0000] <ttepasse>
That sounds like an even more open doof for spoofing.

[07:46:12.0000] <ttepasse>
*door

[07:46:38.0000] <annevk>
well, with IDNA2003 they cannot resolve differently so dunno

[07:53:10.0000] <ttepasse>
Hm. � is also a candidate for normalisation, if I remember correctly. bestmantarays.com vs. bes�antarays.com. With a more spoofiger example, of course.

[09:02:12.0000] <annevk>
matjas: so handling of U+2101 seems fully conforming per IDNA2003

[09:02:19.0000] <annevk>
matjas: it does seem problematic however

[09:15:49.0000] <matjas>
hah, using uncommon IDNA2003 separators to bypass Twitter’s URL shortening: https://twitter.com/mikko/status/369487818013163521

[09:16:24.0000] <matjas>
seemed relevant

[09:19:23.0000] <annevk>
given how good Twitter is with Unicode they might just fix that

[09:26:03.0000] <SimonSapin>
annevk: Is NFKC that bad?

[09:26:14.0000] <annevk>
SimonSapin: no it's fine

[09:26:32.0000] <SimonSapin>
so what is “Die, heretic scum!” about?

[09:26:43.0000] <annevk>
SimonSapin: it's an obscure reference

[09:34:57.0000] <jgraham>
SimonSapin: mpilgrim

[09:57:35.0000] <JonathanNeal>
What good would catching an error in a Promise init be? How would it forward the error to the reject method if .then or .catch had not yet been executed? http://dom.spec.whatwg.org/#promises

[10:04:27.0000] <Domenic_>
JonathanNeal: you can call `.then` or `.catch` later.

[10:05:12.0000] <Domenic_>
JonathanNeal: promises represent asynchronous values. if an error was encountered setting the asyncrhonous value, then that error should be reflected in the promise's state, so the promise should become rejected.

[10:07:10.0000] <JonathanNeal>
Domenic_: If my promise's "init" function had something like "var request = new AudioContext()" and this threw an error (because there was no window.AudioContext) then would .then or .catch file when I attached them later?

[10:07:57.0000] <Domenic_>
JonathanNeal: yes.

[10:08:24.0000] <Domenic_>
JonathanNeal: the promise's state would be rejected, so .then/catch would fire any onRejected handlers passed in to them.

[10:08:51.0000] <JonathanNeal>
e.g. var promise = new Promise(function () { var request = new AudioContext(); /* error thrown */ }); promise.catch(function (error) { console.log(error); }); promise.catch(function (error) { console.log(error); }); so both of these catches would be called?

[10:09:01.0000] <Domenic_>
JonathanNeal: yes.

[10:10:16.0000] <JonathanNeal>
I see. Okay! Thanks.

[10:10:24.0000] <Domenic_>
np! :)

[10:13:12.0000] <JonathanNeal>
I want to be extra clear on something related. Once a promise is resolved, any pending "success" functions will fire. Then, any "success" functions fired after resolution will (effectively) fire immediately?

[10:13:36.0000] <JonathanNeal>
Then, any "success" functions *attached*

[10:13:53.0000] <TabAtkins>
JonathanNeal: Not "immediately" - in the next tick (or microtask, whatever) after they're attached.

[10:14:20.0000] <TabAtkins>
You can't distinguish between a promise that is already fulfilled and one that got fulfilled between the time you registered and the first moment the callback could have been called.

[10:14:29.0000] <JonathanNeal>
As if I called setTimeout(onsuccess, 0) ?

[10:14:33.0000] <TabAtkins>
Yeah.

[10:15:41.0000] <JonathanNeal>
Oh, thanks for that clarification. Promise is very asynchronous.

[10:15:55.0000] <TabAtkins>
Yup.

[10:16:09.0000] <JonathanNeal>
Does a Promise init run instantly, or also in a new setTimeout'ish thread?

[10:16:18.0000] <TabAtkins>
The possibility of "excessive" asynchrony is why there's discussion about switching promises over to using microtasks.

[10:16:22.0000] <TabAtkins>
The init runs instantly.

[10:17:03.0000] <TabAtkins>
So you can easily extract resolver functions from a new promise by just setting up closure variables outside of it, and assigning to them inside the init.

[10:17:20.0000] <JonathanNeal>
Why is there a PromiseResolver object, which seems to be a kind of restricted version of the Promise object?

[10:18:02.0000] <jsbell>
The Promise is what an API returns to consumers of the promise. The Resolver is what the API uses to actually deliver the result. You don't want the consumer of a promise to have that control.

[10:18:25.0000] <JonathanNeal>
new Promise(function (resolver) { this; /* the promise */ resolver; /* the promise without those extra methods */ });

[10:18:26.0000] <TabAtkins>
PromiseResolver is not related to Promise at all (that is, not realted in an API way).

[10:18:43.0000] <TabAtkins>
The PromiseResolver *controls* the promise.

[10:18:45.0000] <JonathanNeal>
Oh, I must misunderstand them.

[10:18:52.0000] <TabAtkins>
It is nothing like the promise - you dont' register callbacks on it.

[10:19:02.0000] <TabAtkins>
You're probably misinterpreting the names of the resolver functions.

[10:19:15.0000] <TabAtkins>
Those dont' take callbacks, they take *values*, and they set the promise's state accordingly.

[10:19:34.0000] <JonathanNeal>
var promise = new Promise(); promise.resolve(); /* doesn't do the same thing as the promise resolver's .resolve()? */

[10:19:46.0000] <TabAtkins>
No, promise.resolve() doesnt' exist.

[10:19:57.0000] <TabAtkins>
The resolver functions aren't put on the promise itself, for good reason.

[10:20:04.0000] <JonathanNeal>
There's the disconnect. Thanks TabAtkins. The spec confused me.

[10:20:15.0000] <TabAtkins>
So you can safely pass promises around without stupid/malicious code fucking with the state.

[10:20:22.0000] <JonathanNeal>
"interface Promise { ... static Promise resolve(any value); // same as any(value)"

[10:20:28.0000] <jsbell>
Yeah, the spec has two distinct sections - the model and the API.

[10:20:42.0000] <JonathanNeal>
I was looking at the API.

[10:21:02.0000] <JonathanNeal>
You should see what I was misunderstanding here http://dom.spec.whatwg.org/#promises-api

[10:21:25.0000] <jsbell>
Oh, that's a constructor

[10:21:49.0000] <jsbell>
Promise.resolve("5") gives you a new Promise that's already resolved to "5"

[10:22:08.0000] <JonathanNeal>
Yea, I misunderstood it.

[10:22:10.0000] <TabAtkins>
Ah yeah, similarly-named methods to the resolver functions exist on the Promise *interface*.

[10:22:32.0000] <JonathanNeal>
What's the difference between .fulfill and .resolve?

[10:22:35.0000] <jsbell>
So you don't have to bother writing new Promise(function(resolver){resolver.resolve("5")})  (give or take my memory of the API)

[10:22:35.0000] <TabAtkins>
Promise.resolve(5) === new Promise(function(r){r.resolve(5);})

[10:22:53.0000] <TabAtkins>
JonathanNeal: fulfill just takes its argument and sets the promise to that value.

[10:23:18.0000] <TabAtkins>
resolve looks at the argument first - if it's a promise as well, it instead waits for *that* promise to fulfill, and then fulfills with *that* value.

[10:23:24.0000] <TabAtkins>
If "flattens" promises, as it were.

[10:23:32.0000] <TabAtkins>
s/If/It/

[10:24:09.0000] <TabAtkins>
So you can "resolve" a promise to the result of an XHR (once we have a promise-returning fetch() function), without having to bend over backwards to wait for the XHR's promise to resolve as well.

[10:24:39.0000] <JonathanNeal>
resolver.fulfill(5); resolver.resolve(); // so what happens here?

[10:25:04.0000] <TabAtkins>
It fulfills to 5, and neuters the promise, so the .resolve() call silently fails.

[10:25:16.0000] <TabAtkins>
Once a promise reaches an end-state, it ignores any further resolver calls.

[10:25:42.0000] <JonathanNeal>
I am so bummed I don't get the difference between fulfill and resolve. They both fulfill?

[10:26:03.0000] <TabAtkins>
Here's the difference:

[10:27:06.0000] <TabAtkins>
x = Promise.fulfill(5);  y = Promise.fulfill(x);  y.then(function(val) { print(val); }); // prints <Object Promise> or whatever.

[10:27:18.0000] <TabAtkins>
x = Promise.fulfill(5);  y = Promise.resolve(x);  y.then(function(val) { print(val); }); // prints 5

[10:27:38.0000] <TabAtkins>
fulfill doesn't look at its argument, it just immediately fulfills its promise with it.

[10:27:51.0000] <Domenic_>
But this will change; then will soon do full unwrapping and you will need `flatMap` to get at the wrapped value.

[10:27:57.0000] <TabAtkins>
resolve does look at its argument, and if it's a promise, it "flattens" it so that you only see the value.

[10:28:06.0000] <JonathanNeal>
absorbing

[10:28:34.0000] <TabAtkins>
Yes.  Soon there will be *no real difference* between fulfill and resolve for promises *if you use .then() to listen to them*.

[10:28:47.0000] <TabAtkins>
(You'll be able to use .flatMap() to listen to them as well, which'll retain the distinction.)

[10:29:41.0000] <Domenic_>
if you want to be forward-compatible you should use resolve()

[10:30:08.0000] <TabAtkins>
Domenic_: Remind me again what the right verbs to use for the different things you can do to a promise are?

[10:30:37.0000] <Domenic_>
TabAtkins: you can resolve or fulfill or reject a promise. A promise's state is either pending or fulfilled or rejected. We say "settled" to mean "either fulfilled or rejected."

[10:30:46.0000] <TabAtkins>
Thanks.

[10:31:01.0000] <Domenic_>
TabAtkins: I don't quite understand the "accept" vs "resolve" thing Mark and you worked out, or at least, don't understand it well enough to explain it to anyone.

[10:31:13.0000] <TabAtkins>
It's fulfill/resolve, that's all.

[10:31:25.0000] <TabAtkins>
DOM Promises previously used "accept" as the verb.

[10:31:47.0000] <Domenic_>
But from what I understand Mark (and you?) purported to repurpose accept to mean some weird state only distinguishable by using flatMap.

[10:32:14.0000] <TabAtkins>
No, there's been some misunderstanding.  ^_^

[10:32:36.0000] <TabAtkins>
Or, hm, maybe that is the terminology Mark was using.  I guess that's fine.

[10:32:36.0000] <Domenic_>
Footnote [1] here http://esdiscuss.org/topic/promises-consensus#content-8

[10:32:43.0000] <TabAtkins>
Running with that...

[10:33:51.0000] <TabAtkins>
"accepted" means that the promises fulfill or resolve functions have been called, and it's ready to call its flatMap() callbacks.

[10:34:08.0000] <TabAtkins>
"fulfilled" means it's completely settled, and is ready to call its then() callbacks.

[10:34:14.0000] <Domenic_>
I think what I need is an example of a promise that's not resolved, but is accepted.

[10:34:48.0000] <TabAtkins>
x = new Promise(); y = Promise.fulfill(x);  // y is accepted, but wont' be resolved until x settles.

[10:35:23.0000] <TabAtkins>
s/wont' be resolved/won't be fulfilled/

[10:35:40.0000] <TabAtkins>
Gah, terminology that uses close english words to draw important technical distinctions is hard.

[10:35:48.0000] <Domenic_>
I think I see. As opposed to x = new Promise(); y = Promise.resolve(x);, which won't call any flatMap callbacks

[10:36:13.0000] <JonathanNeal>
so .resolve is like .fulfill, except that it acts differently when it is passed a promise?

[10:36:26.0000] <TabAtkins>
Right, not until y settles.  Because you explicitly said, by calling .resolve(), that you want y's value to be the settled value of x.

[10:36:30.0000] <TabAtkins>
JonathanNeal: Yes.

[10:36:30.0000] <Domenic_>
JonathanNeal: yes. resolve() matches the behavior of returning something inside the promise.

[10:36:43.0000] <Domenic_>
s/inside the promise/inside the onFulfilled/onRejected handlers

[10:37:41.0000] <JonathanNeal>
so basically, just use fulfill if you plan to take advantage of chaining promises

[10:37:47.0000] <JonathanNeal>
*if you ever plan*

[10:38:14.0000] <TabAtkins>
JonathanNeal: It doesn't really matter as long as you use .then() (once the spec switches to the new semantics we agreed on).

[10:38:16.0000] <TabAtkins>
So shrug.

[10:38:17.0000] <Domenic_>
JonathanNeal: I don't think that's right, or at least it misuses "chaining promises"

[10:38:38.0000] <JonathanNeal>
Domenic_: what word would better describe it than "chaining"?

[10:38:46.0000] <Domenic_>
JonathanNeal: the only reason to use fulfill is if you see a legitimate need for "promises for promises," which I don't and never have (but disagree with TabAtkins on)

[10:38:55.0000] <TabAtkins>
JonathanNeal: If you think that .resolve() interferes with "chaining", you're still a little confused. :/

[10:39:22.0000] <Domenic_>
"promises for promises" = "an asynchronous value representing an asynchronous value representing X", ugh. </end rant>

[10:39:37.0000] <JonathanNeal>
Yea, I think of that as asychronous chaining

[10:40:12.0000] <TabAtkins>
"arrays for arrays" = "a non-deterministic value representing non-deterministic values", ugh. </end rant>

[10:40:35.0000] <Domenic_>
JonathanNeal: usually chaining with promises refers to things like `doXHR().then(result => { return processResult(result); /* returns a promise*/ }).then(processed => { ... })`

[10:41:12.0000] <JonathanNeal>
Domenic_: ah, that's because I didn't know the return value of then did something.

[10:41:33.0000] <TabAtkins>
Technically, it doesn't, but you can think of it as doing something, yes.

[10:41:59.0000] <TabAtkins>
(Technically, it's the .then() call itself that does the "something" that lets you return a promise and then listen to it's value in the next .then() call.)

[10:42:11.0000] <TabAtkins>
But let's not get caught up in semantics.

[10:43:50.0000] <JonathanNeal>
var foo = somepromise.then(function () { return 5; }); /* foo = 5 ? */

[10:44:38.0000] <JonathanNeal>
or rather ... .then(function () { return 5; }).then(function (value) { print(value); /* prints 5 */ });

[10:45:00.0000] <JonathanNeal>
or rather ... return Promise.resolve(5);

[10:46:36.0000] <Domenic_>
JonathanNeal: both return 5 and return Promise.resolve(5) will work

[10:46:59.0000] <TabAtkins>
In the first line, foo is set to a promise which'll eventually fulfill to 5.

[10:47:10.0000] <TabAtkins>
But it's not 5 itself, because promises are asynchronous.

[10:47:34.0000] <JonathanNeal>
Right, so var foo = new Promise(); var bar = foo.then(function () {}); foo === bar

[10:47:34.0000] <TabAtkins>
In the second line, yes, it'll print 5.  Also the third line.

[10:47:49.0000] <TabAtkins>
No, they're !==, because they're different promise objects.

[10:48:06.0000] <TabAtkins>
bar is a brand new promise which resolves after foo does.

[10:48:20.0000] <JonathanNeal>
Good to know.

[10:49:21.0000] <TabAtkins>
I actually think we could kill resolve now, under the new semantics.  It doesn't really *do* anything.

[10:49:37.0000] <TabAtkins>
Promise.fulfill() and Promise.resolve() are identical under .then() semantics.

[10:49:47.0000] <TabAtkins>
They're distinguishable under .flatMap() semantics, but in a confusing way.

[10:51:25.0000] <TabAtkins>
It expresses the flat/nested distinction on the value side, rather than the read side.

[10:51:43.0000] <JonathanNeal>
So, the return value of .then() is a promise no matter what

[10:52:35.0000] <TabAtkins>
Yes.

[10:52:52.0000] <Domenic_>
TabAtkins: I find the fact that fulfill() doesn't create a fulfilled promies horrible

[10:53:14.0000] <TabAtkins>
Domenic_: Yeah, I'm writing up a blog post just now about the terminology, and I find it confusing as well.

[10:53:28.0000] <Domenic_>
TabAtkins: we should keep resolve, and rename fulfill to something more monadey

[10:53:30.0000] <TabAtkins>
Let's just throw away .fulfill then and use .resolve(0.

[10:53:39.0000] <JonathanNeal>
Thanks for breaking it down for me. I was very confused, admittedly by the helper methods on the Promise constructor.

[10:53:48.0000] <TabAtkins>
Nonono, keep resolve() and just give it the current fulfill() semantics.

[10:54:00.0000] <TabAtkins>
No need for a flattener on the value side.

[10:54:13.0000] <TabAtkins>
(Plus, eagerly flattening is always going to be hostile to lazy promises.)

[10:54:26.0000] <TabAtkins>
JonathanNeal: The spec doesn't help, definitely.

[10:54:29.0000] <Domenic_>
TabAtkins: i guess, i don't care since i will only consume with .then.

[10:54:36.0000] <Domenic_>
JonathanNeal: yeah a lot of people seem to get tripped up on that, missing the "static" before those methods.

[10:54:37.0000] <JonathanNeal>
"I actually think we could kill resolve now" ... "Let's just throw away .fulfill then and use .resolve"

[10:54:55.0000] <JonathanNeal>
Which one are you gonna kill?

[10:55:26.0000] <TabAtkins>
I changed my mind between those two.  ^_^

[10:55:44.0000] <TabAtkins>
Kill the .fulfill method, because the "fulfilled" state is already taken and means something different.

[10:55:51.0000] <Domenic_>
+1

[10:56:07.0000] <TabAtkins>
Domenic_: Or... accept()?

[10:56:19.0000] <TabAtkins>
Or we can change the name of the flatMap()-ready state to "resolved".

[10:56:36.0000] <Domenic_>
TabAtkins: no, resolve is what the promise community uses for "has been locked in to follow a single value"

[10:56:44.0000] <TabAtkins>
Okay, that's fine.

[10:56:51.0000] <Domenic_>
TabAtkins: yes I think that's it. from my POV it just means killing the accepted state

[10:57:01.0000] <TabAtkins>
Sure.

[10:57:56.0000] <JonathanNeal>
So, which word is it, resolve?

[10:58:00.0000] <TabAtkins>
Okay, so the functions are resolve() and reject().

[10:58:21.0000] <JonathanNeal>
Okay, that's easy to remember, the ones that start with the same two letters.

[10:58:44.0000] <TabAtkins>
The states are "accepted" (ready for flatMap(), no special behavior if the value is a promise) and "fulfilled" (ready for .then(), if the value is a promise it resolves to its value).

[10:58:49.0000] <TabAtkins>
Hey, that's right.

[11:02:40.0000] <JonathanNeal>
No "pending"?

[11:02:51.0000] <TabAtkins>
Oh no, ther'es still pending and rejected.

[11:02:54.0000] <TabAtkins>
Those are the easy states. ^_^

[11:04:18.0000] <Domenic_>
TabAtkins: no the "fates" are "resolved" and "unresolved"; the states are "fulfilled", "rejected", and "pending"

[11:04:30.0000] <TabAtkins>
Haha, sure.

[11:04:34.0000] <Domenic_>
:)

[11:04:53.0000] <Domenic_>
Drafting es-discuss email now

[11:05:44.0000] <TabAtkins>
Okay, so .flatMap() callbacks are called as soon as you enter the fulfilled state, and .then() callbacks are called when you reach the eventual "resolved fate"?  (Which may happen at the same time, if you originally resolved to a non-promise value.)

[11:05:58.0000] <Domenic_>
no i don't think so

[11:06:11.0000] <TabAtkins>
I wasn't sure how you were intending fates to rule over states.

[11:06:20.0000] <Domenic_>
they are somewhat orthogonal

[11:06:26.0000] <Domenic_>
Promise.resolve(foreverPending) produces a promise that is pending, but resolved

[11:06:36.0000] <Domenic_>
since it is resolved, flatMap can use it

[11:06:45.0000] <TabAtkins>
Oh, gotcha.

[11:07:00.0000] <Domenic_>
then() only operates on states

[11:07:43.0000] <Domenic_>
flatMap() only takes one callback now I think

[11:07:47.0000] <TabAtkins>
See, the reason I preferred the terminology the other way around (.flatMap uses states, .then uses fates) is that .flatMap works on local information, stuff the promise knows by itself.

[11:07:49.0000] <Domenic_>
(more monadic!)

[11:08:04.0000] <TabAtkins>
No, flatMap() still takes two.

[11:08:17.0000] <Domenic_>
how do you produce a promise that flatMap will call the second callback on

[11:08:20.0000] <TabAtkins>
There's nothing *preventing* the monad operation from taking more arguments.

[11:08:38.0000] <Domenic_>
remember: there is nothing different between Promise.reject(x) and Promise.resolve(Promise.reject(x))

[11:08:43.0000] <TabAtkins>
Promise.reject(5).flatMap(null, console.log) will log 5.

[11:08:50.0000] <TabAtkins>
There is!

[11:09:07.0000] <Domenic_>
ok i guess that doesn't matter

[11:09:11.0000] <Domenic_>
(to me)

[11:35:24.0000] <JonathanNeal>
Do I want t know how to use flatMap?

[11:40:40.0000] <TabAtkins>
Ignore it for now.  It's useful if you have multiple operations which return promises with different semantics, and you need to distinguish between them.

[11:43:25.0000] <JonathanNeal>
What are all of the prototype methods on promise; then and catch?

[11:51:56.0000] <TabAtkins>
then/catch/flatMap

[11:57:12.0000] <zcorpan>
TabAtkins: we want to suggest removing navigator.vendor from blink. should i just file a bug or email blink-dev?

[12:02:43.0000] <JonathanNeal>
How will I know who Google, Inc. is?

[12:10:08.0000] <GPHemsley>
TabAtkins: Are you left-handed, by any chance?

[12:30:46.0000] <hober>
GPHemsley: he's a bit sinister if that's what you're getting at :)

[12:31:18.0000] <GPHemsley>
hober: Never! Just investigating a hypothesis.

[12:32:28.0000] <gsnedders>
GPHemsley: I believe he is, FWIW

[12:32:49.0000] <GPHemsley>
intersting

[12:33:20.0000] <GPHemsley>
+e

[12:33:40.0000] <GPHemsley>
intersting: the one that gets you in between

[12:33:53.0000] <GPHemsley>
""

[12:38:44.0000] <zcorpan>
oh are the speculative parsers ruining the <image xlink:href src> thing?

[12:41:13.0000] <zcorpan>
http://css-tricks.com/svg-fallbacks/ ("In IE 9, you can see both images turn up in the Network timeline.")

[12:46:19.0000] <zcorpan>
wonder if it's possible to use some syntax that ie's speculative parser doesn't understand, like <image/src ...>

[13:06:11.0000] <JakeA>
 zcorpan: IE10 & 11 have the same issue

[13:06:26.0000] <zcorpan>
yeah

[13:20:57.0000] <TabAtkins>
zcorpan: Blink-dev?

[13:21:02.0000] <TabAtkins>
GPHemsley: Right-handed.  Why?

[13:21:15.0000] <TabAtkins>
zcorpan: That wasn't asking what blink-dev was, just suggesting blink-dev with an uncertain tone.

[13:21:53.0000] <zcorpan>
TabAtkins: man i was totally going to explain what it was :-)

[13:22:00.0000] <TabAtkins>
zcorpan: Hahaha

[13:22:27.0000] <zcorpan>
ok

[13:22:31.0000] <TabAtkins>
zcorpan: Ooh, <image/src=foo xlink:href=bar> sounds like horrifying but wonderful hackery.

[13:39:12.0000] <zcorpan>
do i need to subscribe to blink-dev to post to it? also, can i subscribe by sending an email to blink-dev+subscribe@ or some such?

[13:39:27.0000] <TabAtkins>
No clue.  I was auto-migrated when it started.

[14:01:26.0000] <zewt>
boggle @ cancelling mouseup not stopping click from being dispatched

[14:10:00.0000] <odinho>
zcorpan: it's a google group, so you can do the web browser thing to get there.

[14:44:01.0000] <TabAtkins>
GPHemsley: Hey!  What did you want to know my handedness for?

[14:45:14.0000] <zcorpan>
TabAtkins: is your index finger longer than your ring finger?

[14:45:16.0000] <Hixie_>
all the better to impersonate you?

[14:45:23.0000] <TabAtkins>
zcorpan: no

[14:46:04.0000] <TabAtkins>
Hixie_: I've seen GPHemsley - he can't impersonate me that well.

[14:46:32.0000] <TabAtkins>
Hixie_: Also! Any chance you could review the scoped rules section of Cascade http://dev.w3.org/csswg/css-cascade/ and make sure it's sane to you?

[14:47:52.0000] <Hixie_>
what's the rfc2119 status of this spec? should i be ignoring sentences that don't say "is" or "must", should i assume one overarching "must fit this model", something else?

[14:49:38.0000] <TabAtkins>
2119 keywords should always mean what they say, but as usual, "is" implies "must".

[14:49:49.0000] <TabAtkins>
If there's anything weird from that, let me know.

[14:50:05.0000] <Hixie_>
ok

[14:50:18.0000] <Hixie_>
in section 6, Cascading:

[14:50:20.0000] <zcorpan>
TabAtkins: apparently the ratio between those fingers correlates with a number of things, including lefthandedness and gayness and respond-to-trainingness

[14:50:44.0000] <Hixie_>
i don't see formal definitions for "wins", "are considered to be". first paragraph of "Scope" appears to not have normative weight.

[14:50:49.0000] <TabAtkins>
Yeah, the ratio of testosterone to estrogen in the fetal environment affects it.

[14:51:06.0000] <TabAtkins>
That's defining sorting, so we figured "wins" was clear in its english definition.

[14:52:03.0000] <Hixie_>
do declarations here have an implied selector? i thought a declaration was just "property:value[!important]"

[14:52:46.0000] <Hixie_>
the order is descending, so it's not clear to me if "wins" means "has most priority" (comes first) or "has least priority" (comes last)

[14:53:13.0000] <Hixie_>
if it was ascending order i would assume it meant "had greatest value / comes last"

[14:53:37.0000] <TabAtkins>
There's only one relevant direction.  This isn't *really* sorting, it's just finding the winner for each element/property combo.  Using sorting terminology makes it clearer.

[14:54:09.0000] <Hixie_>
(this is one of these things where honestly i sometimes wonder whether to bother defining it, since anyone who implements it wrong but tries to argue they're right is just being a pedant and their code won't work in such an obviously broken fashion that it's a lost cause)

[14:54:23.0000] <Hixie_>
(but pedantically, i think it should be defined. your call, obviously.)

[14:54:40.0000] <TabAtkins>
Where are you seeing declarations having selectors?  The "Specificity" section mentions something like that, but is specific about "the same specificity as the style rule it appears in".

[14:55:36.0000] <Hixie_>
oh, nevermind, i misread what the Scope section was saying\

[14:55:43.0000] <Hixie_>
sorry, i'm 0lrhavign to fight my cat to read my screen her

[14:55:58.0000] <TabAtkins>
heh

[14:57:04.0000] <Hixie_>
so this is just talking about the precedence, not the matching, right?

[14:57:15.0000] <TabAtkins>
Yeah, matching is done by Selectors.

[14:57:19.0000] <Hixie_>
ok. lgtm.

[14:57:24.0000] <TabAtkins>
cool

[14:57:35.0000] <Hixie_>
(modulo the comments above that i haven't retracted)

[14:57:48.0000] <TabAtkins>
(there's some glue code at the top of cascade defining how to say that a declaration attaches to an element, using selectors, but that's trivial)

[15:01:08.0000] <TabAtkins>
Also, just in case you ever need to define something in the HTML stylesheet as returning to the initial behavior, Cascade has the 'unset' keyword that's 'initial' or 'inherit', depending on the property.

[15:01:47.0000] <TabAtkins>
Also, the 'all' shorthand (shorthand for all properties, only takes the global values) omits 'direction' and 'unicode-bidi' from being reset by it, because authors should be using HTML for those features rather than CSS.

[15:01:55.0000] <Hixie_>
in the UA stylesheet? hopefully i should never need that, but noted. thanks.

[15:01:58.0000] <TabAtkins>
(They exist only for arbitrary XML, since xml:dir doesn't exist.)

[15:02:37.0000] <Hixie_>
"all: unset" ? you trying to put the reset.css people out of business?

[15:02:44.0000] <TabAtkins>
Yes.

[15:02:55.0000] <Hixie_>
jolly good, carry on

[15:03:09.0000] <Hixie_>
afk, bbiab

[15:03:38.0000] <JonathanNeal>
can someone give me a brief example of a .then().then() ?

[15:05:28.0000] <TabAtkins>
Hixie_: Btw, the HTML spec can probably be revised to at least point at Cascade and Selectors for their parts of the definitions of scoped styles, at least until we write the Scoped Styles spec that'll be a clearinghouse for this thing.

[15:06:34.0000] <TabAtkins>
JonathanNeal: Easily.  Start with a promise for a filesystem entry.  When you get it, fire off an XHR based on what you found, in the first then.  The second then gets the result of the XHR.

[15:07:14.0000] <JonathanNeal>
How can I attach the .resolve in the first then to fire the second?

[15:07:20.0000] <JonathanNeal>
in the first .then

[15:09:21.0000] <TabAtkins>
You just return the XHR's promise.

[15:09:32.0000] <TabAtkins>
The .then() function automatically assimilates the return value of your callback.

[15:14:26.0000] <JonathanNeal>
.then(function () { var promise = new Promise( /* xhr stuff with a resolve */); return promise; } ?

[15:14:41.0000] <JonathanNeal>
Followed by ).then(/* etc */)

[15:15:01.0000] <TabAtkins>
yes

[15:15:16.0000] <TabAtkins>
Or, more likely:

[15:15:28.0000] <TabAtkins>
.then(function() { return XHRFetch(...); })

[15:15:58.0000] <TabAtkins>
You shouldn't be creating promises manually unless you're doing something special that needs to be asynchronous.  Most usage will be implicit, using promises returned by the dom or generated by .then() calls.

[15:29:17.0000] <JonathanNeal>
Can .resolve() take multiple arguments .e.g .resolve(5, 10), or should it only accept one?

[15:29:27.0000] <TabAtkins>
No, it only takes one - the value the promise will resolve to.

[15:30:00.0000] <JonathanNeal>
Nifty. I look forward to this being in a browser.

[15:31:32.0000] <TabAtkins>
I think they're in nightly firefoxes, and soon to show up in chrome canary.

[16:29:51.0000] <zewt>
"file api v2"? sigh


2013-08-20
[17:10:19.0000] <gsnedders>
jgraham: Can you touch <https://github.com/html5lib/html5lib-python/issues/85> yet? :P

[17:10:36.0000] <gsnedders>
jgraham: Or still too busy with this whole new-country thing?

[17:19:47.0000] <zewt>
wanted: firefox plugin to keep pages from being able to break password autocomplete

[17:59:48.0000] <Domenic_>
zewt: I use LastPass for that.

[18:03:42.0000] <MikeSmith>
IE supports IDNA2008 + TR46? http://lists.w3.org/Archives/Public/www-tag/2013Aug/0083.html

[18:20:47.0000] <JonathanNeal>
Does a rejection in a promise's .then() impact the next chained promise's .then()?

[18:37:50.0000] <Domenic_>
JonathanNeal: it is not entirely clear what you're asking, but I believe the answer is yes.

[18:38:00.0000] <Domenic_>
JonathanNeal: you can test all this behavior with any existing Promises/A+ library, by the way.

[18:38:25.0000] <Domenic_>
JonathanNeal: https://github.com/promises-aplus/promises-spec/blob/master/implementations.md

[18:39:17.0000] <MikeSmith>
kochi1: IME API is listed under http://www.w3.org/TR/#tr_Javascript_APIs

[18:40:15.0000] <kochi1>
MikeSmith: aha, Okay!  I coundn't find it...

[18:41:30.0000] <MikeSmith>
yeah the usability of that page is not so great

[18:42:26.0000] <kochi1>
yeah, someone has to implement incremental search on the page!

[18:43:22.0000] <kochi1>
btw, "IME" matches many substrings like "Time" "Primer" "Multimedia" and so on

[18:43:46.0000] <kochi1>
we should choose more outstanding spec name :)

[18:44:25.0000] <MikeSmith>
ah yeah

[18:44:38.0000] <kochi1>
0000IME API

[18:44:46.0000] <MikeSmith>
heh

[18:45:57.0000] <kochi1>
seriously, someone may argue "IME" is a microsoft term, and more generally it could be "input method" or "text input"

[18:46:29.0000] <kochi1>
e.g. OSX has a class NSTextInputClient

[18:47:29.0000] <kochi1>
MikeSmith: what is the moderation style in the meeting next week?

[18:50:17.0000] <MikeSmith>
kochi1: relatively informal

[18:50:28.0000] <MikeSmith>
I got your e-mail message

[18:50:51.0000] <MikeSmith>
you don't really need to be concerned much about the format

[18:51:11.0000] <MikeSmith>
15 minutes is a pretty short time

[18:51:34.0000] <kochi1>
MikeSmith: ok, thanks.  I'll prepare some 10-minute material and take some time for questions.

[18:51:41.0000] <MikeSmith>
I think it's sufficient to first just explain what problems we are trying to solve with the IM API

[18:51:44.0000] <MikeSmith>
kochi1: yup

[18:53:05.0000] <kochi1>
MikeSmith: agreed, thanks for the suggestion.

[02:16:24.0000] <jgraham>
TabAtkins: You know promises would make more sense if a) flatMap wasn't a silly word and b) flatMap wasn't the thing that doesn't flatten

[02:16:52.0000] <jgraham>
gsnedders: I'm not sure why you think that error messages shouldn't, in principle, be localisable

[02:17:13.0000] <jgraham>
But I also think that no one has ever shown any inclination to use the feature

[02:38:07.0000] <jgraham>
Hmm, I think if I am considering using metaclasses to solve a problem, I might be overengineering things

[02:38:41.0000] <Ms2ger>
https://twitter.com/davidbaron/status/369610549799026688

[03:37:46.0000] <annevk>
Hmm, promises, IDNA, or encodings

[03:44:18.0000] <Ms2ger>
annevk, I assume you saw the rust encoding issue?

[03:47:55.0000] <annevk>
Ms2ger, no

[03:48:30.0000] <annevk>
Ms2ger: pointer?

[03:48:38.0000] <Ms2ger>
https://github.com/lifthrasiir/rust-encoding/issues/3

[03:53:06.0000] <annevk>
Ms2ger: doesn't really look like a Rust issue

[03:54:10.0000] <Ms2ger>
Yeah, more like "implementation issue", I guess

[03:54:17.0000] <annevk>
Ms2ger: although maybe we should change the way encoder and decoder errors are written in the specification. At least this implementation seems suboptimal...

[03:54:34.0000] <annevk>
Ms2ger: "spec is hard"

[03:54:44.0000] <annevk>
lets do something simpler that comes close

[03:54:52.0000] <Ms2ger>
Encoding are hard, let's go shopping

[03:56:07.0000] <annevk>
I should actually do that one of these days. At least get a bicycle...

[04:36:25.0000] <zcorpan>
jgraham: is there something wrong here? critic has fewer commits looks like. https://github.com/w3c/web-platform-tests/pull/262 https://critic.hoppipolla.co.uk/r/238

[04:43:58.0000] <jgraham>
zcorpan: It looks like it stopped tracking because the author did some kind of merge/rebase that critic didn't like

[04:45:33.0000] <jgraham>
In theory it should be possible to recover from this, but it seems to be broken. I don't know if it's a fixed bug, or an unknown bug, or something else

[04:45:42.0000] <jgraham>
Maybe I should try upgrading

[05:06:50.0000] <zcorpan>
jgraham: ouch :-/ i'll leave it to you and belem to sort out

[05:39:50.0000] <annevk>
I need someone to proofread my emails... Especially when replying to people who made up this internet thing. http://lists.w3.org/Archives/Public/www-tag/2013Aug/0085.html :/

[05:41:19.0000] <GPHemsley>
TabAtkins: I was merely investigating what would have been a cool hypothesis if you had been left-handed. But if you're right-handed, it's far from being cool.

[05:41:32.0000] <GPHemsley>
TabAtkins: Nothing sinister, I promise.

[05:45:52.0000] <annevk>
http://people.mozilla.com/~roc/animated-SVG-glyphs.webm hah

[05:45:55.0000] <annevk>
jgraham: ^^

[05:49:23.0000] <jgraham>
annevk: I hate you

[05:49:58.0000] <annevk>
jgraham: don't shoot the messenger, man

[05:50:14.0000] <Lachy>
jgraham, why? what's not to like about animated glyphs?

[05:51:30.0000] <wilhelm>
What is this I don't even.

[05:51:38.0000] <Lachy>
I can't wait for someone to make an animated, wiggly version of Comic Sans. That'd be awesome.

[05:53:06.0000] <SimonSapin>
animated glyphs seem like such a terrible idea

[05:53:45.0000] <jgraham>
annevk: roc is too far away to shoot

[06:02:00.0000] <annevk>
Animated glyphs seem great. I hope we can soon create glyphs that mask videos...

[06:02:56.0000] <jgraham>
annevk: Now you can't use your "only the messanger" defence

[06:03:22.0000] <annevk>
jgraham: as long as you keep staring at your screen I think I'm safe

[06:10:52.0000] <GPHemsley>
Ms2ger: " Do you have a FfOS Mobile Device? "

[06:25:57.0000] <Ms2ger>
GPHemsley, "No"

[06:26:23.0000] <GPHemsley>
Ms2ger: Note it says FfOS, not FxOS

[06:29:51.0000] <SimonSapin>
annevk: "iso-8859-8 and iso-8859-8-i are distinct encoding names, because iso-8859-8 has influence on the layout direction." What does this mean?

[06:30:42.0000] <annevk>
SimonSapin: what do you think it means?

[06:31:41.0000] <SimonSapin>
Is this about CSS writing modes? I think there should be a link there

[06:32:25.0000] <SimonSapin>
or is it in HTML?

[06:33:04.0000] <annevk>
Once someone has defined it I might add a link I guess

[06:33:09.0000] <annevk>
There's a bug somewhere

[06:33:28.0000] <annevk>
It's mentioned in the source: https://www.w3.org/Bugs/Public/show_bug.cgi?id=19505

[06:35:18.0000] <SimonSapin>
annevk: I think it’s bad to have valuable info hidden in HTML comments. <p class=note> or <p class=issue> would be better

[06:36:14.0000] <annevk>
Yeah, nowadays I usually do that

[07:09:40.0000] <gsnedders>
jgraham: I'd argue they're developer-facing messages, which others often don't localize.

[07:13:33.0000] <jgraham>
gsnedders: What kind of developers?

[07:14:07.0000] <jgraham>
gsnedders: If, for example, you wanted to write a python-based validator with html5lib as the parser layer, you might well want to localise these messages

[07:31:58.0000] <gsnedders>
jgraham: Does any validator do this or have any intension of every doing this?

[07:32:41.0000] <jgraham>
Localised error messages or use html5lib?

[07:33:02.0000] <gsnedders>
The former.

[07:34:24.0000] <jgraham>
http://www.w3.org/wiki/CssValidator/Localization

[07:46:39.0000] <annevk>
Hixie_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=22496#c11

[07:46:51.0000] <annevk>
Hixie_: and you were right, my bad :/

[08:05:02.0000] <annevk>
Hixie_: might also want to review https://www.w3.org/Bugs/Public/show_bug.cgi?id=21976#c6 as it seems the single host concept might be obsolete soon

[08:07:33.0000] <MikeSmith>
win 27

[08:12:06.0000] <annevk>
I wonder to what extent people have reviewed this HTML imports stuff...

[08:13:50.0000] <annevk>
Seems https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html should just be folded into HTML

[08:18:38.0000] <Domenic_>
what is the use case of html imports again? :-/

[08:20:19.0000] <annevk>
External templates, afaict

[08:20:50.0000] <Domenic_>
hmm. most people seem to do that via require('./myTemplate.html') at least in my circles.

[08:20:54.0000] <annevk>
Domenic_: it seems return in then()'s callbacks doesn't need to do anything either and can just call resolve()

[08:21:29.0000] <Domenic_>
annevk: yup. step 7 at https://github.com/promises-aplus/promises-spec#the-then-method

[08:21:33.0000] <annevk>
Domenic_: at which point the question is what kind of checks then() does

[08:21:47.0000] <Domenic_>
annevk: resolve(), you mean?

[08:22:04.0000] <annevk>
Domenic_: I thought we were going to spec the model where then() does unwrapping

[08:22:46.0000] <Domenic_>
annevk: yes, so what exactly resolve() does is different in that model, but the fact that return <-> resolve (and throw <-> reject) stays the same

[08:23:45.0000] <annevk>
Domenic_: afaict in that model resolve() just sets promise's value

[08:24:28.0000] <Domenic_>
annevk: oh I see, yeah you're right, it's then()s initial behavior that becomes the new question.

[08:28:23.0000] <annevk>
this model seems kinda weird, in that the promise has a value that's a promise... and then if you do .then() it needs to be chained all the way through

[08:29:05.0000] <Domenic_>
well, it's not the promise's value, it's the promise's resolution... but yes, the fact that value/reason/state are all now emergent makes it a bit trippy.

[08:29:31.0000] <Domenic_>
Mark and I are planning to nail down an exact algorithm later tonight-ish. The plan is to leave what "isPromiseLike" means exactly unspecified for now, to be argued about after we have a solid algorithm in place. Like http://esdiscuss.org/topic/promises-consensus-with-a-terminology but with more detail.

[08:32:18.0000] <annevk>
thanks

[08:51:48.0000] <annevk>
TabAtkins: I referenced the "earlier X" quite explicitly

[09:54:24.0000] <JonathanNeal>
Promises, Promises.

[09:54:41.0000] <Ms2ger>
Futures.

[09:55:13.0000] <JonathanNeal>
Is futures a more accurate term, just less aesthetic to me?

[10:06:28.0000] <Domenic_>
it is what some other languages use

[10:06:51.0000] <Domenic_>
mostly i hear java people using it

[10:31:12.0000] <Hixie_>
hsivonen: re https://www.w3.org/Bugs/Public/show_bug.cgi?id=12400 - what do you think is wrong in the specs, exactly?

[10:40:53.0000] <Hixie_>
i'm amused that all the people who wanted their changes done to the whatwg html spec 5+ years ago, like having cite allow people's names, having blockquote ambiguously allow citations to be inlined, etc, are now just asking the htmlwg to make the changes instead

[10:58:01.0000] <zcorpan>
TabAtkins: pls see https://www.w3.org/Bugs/Public/show_bug.cgi?id=22500

[11:21:04.0000] <Hixie_>
if you want a constructor that takes arguments and does something special to them, and you have several of these, is NamedConstructor the preferred solution or are factory methods preferred?

[11:22:20.0000] <Hixie_>
e.g. something like (but obviously not actually this):  new IntegerByAddition(1,2,3) => an Integer representing 6;  new IntegerByConcatenation(1,2,3) => an Integer representing 123

[11:22:37.0000] <Hixie_>
vs createIntegerByAddition(1,2,3) and createIntegerByConcatenation(1,2,3)

[11:26:15.0000] <jsbell>
I can think of examples of the latter, but not the former, assuming the resulting objects are indistinguishable

[11:31:18.0000] <jsbell>
FWIW, I only find two NamedConstructor examples in blink's IDLs, and they are one per interface (Option for HTMLOptionElement and Audio for HTMLAudioElement), not even multiple per interface let alone different names

[11:31:31.0000] <Hixie_>
there should also be one for Image

[11:31:45.0000] <Hixie_>
which has three

[11:31:48.0000] <Hixie_>
but they're all just Image

[11:31:59.0000] <Hixie_>
certainly right now i'm not aware of anyone doing the named constructor thing

[11:32:10.0000] <Hixie_>
but people hate factory methods

[11:32:14.0000] <Hixie_>
so i don't know which is preferred

[11:35:46.0000] <jsbell>
Yeah, looks like Blink's HTMLImageElement constructor has custom code rather than being expressed through IDL; may be crufty code that can be updated, dunno. (And why not Video, for symmetry?)

[11:38:16.0000] <jsbell>
The third alternative is new Integer({add: [1, 2, 3]}) vs. new Integer({concat: [1,2,3]}). With argument destructuring that might be considered more ES6-ish

[11:40:58.0000] <jsbell>
i.e. as an implementer in ES6 you can write |let {add, concat} = options;| and decide what to do from there; supposedly that will be the new hotness; since they're exclusive it's icky, though

[11:50:56.0000] <annevk>
Hixie_: Integer.create(...) is what ES uses these days

[11:53:22.0000] <TabAtkins>
jgraham: flatMap *does* flatten.  It flattens *once* - when you return a promise from the callback, rather than making a promise for a promise, it flattens it.

[11:53:49.0000] <TabAtkins>
jgraham: The name comes from the fact that it's identical to a .map() method, except it adds the flattening at the end.

[11:54:09.0000] <TabAtkins>
jgraham: I think it's from Scala, and it's at least better than .bind() (or >>=).

[11:55:43.0000] <TabAtkins>
annevk: What do you mean by "Integer.create() is what ES uses"?

[11:56:04.0000] <TabAtkins>
Oh, didn't see the context.  You meant when there are multiple constructors.

[11:56:24.0000] <hsivonen>
Hixie_: maybe there isn't anything wrong with the specs. Basically, if browsers don't support marking up combining marks separately, it should be an authoring error to do so

[11:56:50.0000] <hsivonen>
Hixie_: requiring each text node to be in NFC takes care of this, AFAICT

[12:24:37.0000] <annevk>
hsivonen: roc at one point touted this as a feature

[15:14:12.0000] <Hixie_>
jsbell: Audio used to be a non-element object, the Audio constructor was added to <audio> when we made <audio> and removed that object.

[15:14:42.0000] <Hixie_>
hsivonen: does NFC require no leading combining characters?

[15:15:05.0000] <Hixie_>
hsivonen: and do we require NFC?

[15:17:48.0000] <Hixie_>
hsivonen: (see in particular https://www.w3.org/Bugs/Public/show_bug.cgi?id=13502#c22)

[15:49:49.0000] <MikeSmith>
Hixie_: I'm pretty sure that neither the HTML spec nor any of its depedencies require NFC. That's why I changed the validator (a couple years or so ago) to emit warnings about NFC problems, instead of errors

[15:50:09.0000] <Hixie_>
yeah, that was my conclusion too

[15:52:13.0000] <MikeSmith>
I think http://www.w3.org/TR/charmod-norm/ was the only document that said anything about NFC, and HTML doesn't reference that

[15:57:31.0000] <Hixie_>
MikeSmith: yeah, there's even a comment in the source saying i should do something to allow isolated combining characters if we ever _do_ reference that

[15:59:27.0000] <MikeSmith>
Hixie_: ah oK


2013-08-21
[18:27:42.0000] <gsnedders>
Hixie_, TabAtkins: So I'm kicking about San Jose with nothing to do Sep 3/4. Am wondering about popping up in the middle of your domain and sitting around in the café all day and trying to see as many of you Google people as possible.

[18:28:43.0000] <Hixie_>
if you want to maximise your seeing people, your best bet is to sit on the shoreline/101 bridge and watch the freeway and shoreline during rush hour

[18:29:06.0000] <Hixie_>
happy to do lunch or something though either of those days

[18:29:57.0000] <gsnedders>
Hixie_: Pedant. :)

[18:31:06.0000] <gsnedders>
Also, while you're here, I seem to have agreed to do a bachelor's thesis on model checking the HTML parser. At least initially aiming for stuff like "(fragment case.)" genuinely only being fragment case.

[18:31:33.0000] <gsnedders>
May try, if it goes well, and prove termination.

[18:35:45.0000] <Hixie_>
if you manage to prove that in a script-capable browser, you'll have earnt a nobel prize. or would have, if they did math ones.

[18:36:17.0000] <gsnedders>
Well, yes. But it's trivial to prove that in the script-enabled case it may never terminate.

[18:36:26.0000] <Hixie_>
note that i may drop the "fragment case" stuff, due to it being so inconsistently done

[18:41:40.0000] <gsnedders>
Eh, at least what's currently in the spec is a starting point.

[18:58:42.0000] <gsnedders>
Hixie_: Equally, if there's anything you think that'd be useful, say!

[19:04:05.0000] <gsnedders>
Basic plan is fragment case, no popping from an empty stack, that foreign content/not insertion modes are only used when appropriate, and that there are no unhandled tokens.

[19:04:11.0000] <gsnedders>
In no particular order.

[19:16:21.0000] <Hixie_>
gsnedders: not really sure what would be useful, but we can talk about it at lunch :-)

[19:25:59.0000] <GPHemsley>
Hixie_: "anticlockwise" is not en-US

[19:26:24.0000] <Hixie_>
witness my horror

[19:26:46.0000] <GPHemsley>
easy now

[19:26:53.0000] <GPHemsley>
don't overexert yourself

[19:27:03.0000] <Hixie_>
:-)

[19:28:04.0000] <GPHemsley>
FTR, the en-US equivalent is "counterclockwise"

[19:28:56.0000] <Hixie_>
yeah, i know

[19:29:06.0000] <Hixie_>
not sure if it was my fault or not that the spec uses anticlockwise

[19:29:10.0000] <Hixie_>
could be apple's fault though

[19:29:23.0000] <Hixie_>
since i think arc() dates back to their canvas doc

[19:29:36.0000] <GPHemsley>
ah, ok

[19:29:47.0000] <GPHemsley>
I'd much prefer to blame Apple ;)

[19:29:53.0000] <Hixie_>
either way, i'm happy to ignore it :-)

[19:29:54.0000] <GPHemsley>
though I suppose that means you can't change it

[19:30:07.0000] <Hixie_>
it's an argument, i don't think it has any normative value actually

[19:30:10.0000] <GPHemsley>
/me shrugs

[19:30:29.0000] <Hixie_>
(argument name, that is)

[19:30:35.0000] <GPHemsley>
just doing my job as the en-US police ;)

[19:32:05.0000] <Hixie_>
i miss the days where the spec was en-GB

[19:32:08.0000] <Hixie_>
before the w3c got involved

[19:32:16.0000] <Hixie_>
it strikes me i could change it back...

[19:33:56.0000] <GPHemsley>
heh

[23:56:37.0000] <zcorpan>
how should we represent the margin at-rules in @page in CSSOM? a common interface for all of them and a property that exposes the name? or one interface each?

[23:57:27.0000] <zcorpan>
http://dev.w3.org/csswg/css-page/#margin-boxes - there are 16 of them

[00:13:06.0000] <zcorpan>
i'm tempted to go with a common interface but i don't know what to call the property that exposes the name. hmm, maybe just "name" might work

[00:13:23.0000] <zcorpan>
selectorText seems wrong

[00:13:50.0000] <zcorpan>
maybe i should have "name" on all rules

[00:15:22.0000] <zcorpan>
or all at-rules

[00:24:56.0000] <hsivonen>
Hixie_: I think http://www.w3.org/TR/charmod-norm/ makes sense, but the group that wrote the doc has disowned it

[00:25:12.0000] <hsivonen>
the validator implements it anyway

[00:25:36.0000] <hsivonen>
so in that sense "we" "require" NFC

[00:27:43.0000] <hsivonen>
Hixie_: the ban on combining character as the first character of a text node comes from http://www.w3.org/TR/charmod-norm/#sec-FullyNormalized

[00:28:24.0000] <zcorpan>
hsivonen: maybe we should put the necessary requirements in the html spec?

[00:29:25.0000] <hsivonen>
zcorpan: perhaps it would be good to find out what the i18n group thinks is wrong with charmod-norm first

[00:30:05.0000] <hsivonen>
anyway, as a pratical matter, stuff breaks in some UAs if you don't have each text node in NFC and not starting with a combining char

[00:31:49.0000] <zcorpan>
isn't it better long-term to fix the UAs to not break?

[00:33:49.0000] <hsivonen>
zcorpan: considering effort vs. use case payoff, maybe not

[00:34:17.0000] <hsivonen>
dunno. roc or jfkthame would be better positioned to say

[00:34:49.0000] <hsivonen>
/me finds http://annevankesteren.nl/2003/07/updates-follow interesting

[00:35:10.0000] <hsivonen>
I used to believe in XML, too, but not in XML Schema

[00:49:59.0000] <SimonSapin>
zcorpan: http://lists.w3.org/Archives/Public/www-style/2013May/0777.html

[00:50:17.0000] <SimonSapin>
re page-margin rules

[00:50:34.0000] <zcorpan>
SimonSapin: thanks

[00:51:15.0000] <zcorpan>
SimonSapin: any opinion on whether we should expose .name on all at-rules?

[00:51:39.0000] <SimonSapin>
zcorpan: but I was just thinking it could also work to *not* make it a grouping rules and just have 16 accessors on CSSPageRule

[00:52:52.0000] <SimonSapin>
zcorpan: .name would be redundant with .type, except in special cases like this one

[00:53:25.0000] <zcorpan>
with .type you have to have your own mapping if you actually want the name

[00:53:50.0000] <SimonSapin>
16 accessors would expose a partial result of the cascade rather than really the structure of the stylesheet, but we already do that for CSSStyleDeclaration anyway…

[00:54:08.0000] <SimonSapin>
well, do you want the name?

[00:54:24.0000] <zcorpan>
dunno :-)

[00:55:09.0000] <SimonSapin>
let’s not add it before anyone asks for it

[00:55:19.0000] <zcorpan>
i'm not sure i like the accessors thing. it might get ugly if it gets extended with a bazillion new things

[00:55:44.0000] <zcorpan>
like we considered accessors for @page but then realized there were lots of properties that apply now

[00:56:29.0000] <zcorpan>
so i think using .cssRules and .style is better even if there are currently just a "few" things

[00:56:47.0000] <SimonSapin>
yeah, declarations in @page are really more like a style rule, I agree with using .style

[00:57:34.0000] <zcorpan>
it also means developers don't have to look it up each time if the stuff is exposed as accessors or cssRules/style if we're consistent

[00:57:50.0000] <SimonSapin>
but I don’t see css-page being extended to have 128 pre-defined margin boxes, that’s just not a good design

[00:58:06.0000] <SimonSapin>
rather, I expect css-page-4 to take a new direction

[00:58:07.0000] <zcorpan>
might not be margin boxes

[00:58:37.0000] <zcorpan>
might be other at-rules for something we haven't thought of yet

[00:58:38.0000] <zcorpan>
anyway

[00:58:47.0000] <SimonSapin>
oh you’re right, you’d still have at-rules in @page, then .cssRules makes sense

[00:59:53.0000] <zcorpan>
ok i'm just exposing .name on margin rules

[01:00:30.0000] <zcorpan>
i'll also use the constant 9

[01:02:18.0000] <SimonSapin>
I don’t know what "reserved constant" really means

[01:06:08.0000] <zcorpan>
i think it just means it's not allocated yet and it's not allowed to be used for vendor-specific stuff

[01:06:29.0000] <SimonSapin>
ok

[01:06:42.0000] <SimonSapin>
I’s say mention it on www-style, but it should be fine

[01:06:58.0000] <zcorpan>
yeah

[01:35:34.0000] <zcorpan>
so, next thing to consider is whether we should update CSSFontFaceRule to use this approach also

[01:36:11.0000] <zcorpan>
i guess i'll send an email about that

[01:36:32.0000] <zcorpan>
or maybe i should wait a bit

[01:36:50.0000] <SimonSapin>
which approach?

[01:37:38.0000] <zcorpan>
http://lists.w3.org/Archives/Public/www-style/2013Jun/0668.html

[01:38:36.0000] <SimonSapin>
I’m less sure about that

[01:39:03.0000] <SimonSapin>
@page really contains properties, but not @font-face

[01:43:30.0000] <SimonSapin>
and CSSFontFaceRule might be harder to change if it’s already shipped

[01:43:43.0000] <zcorpan>
@font-face contains descriptors. pretty similar. the CSSDeclaration machinery makes sense for descriptors also afaict

[01:43:46.0000] <zcorpan>
it's not shipped

[01:44:16.0000] <zcorpan>
or .style with CSSStyleDeclaration is shipped, i.e. the old definition, which doesn't make sense for @font-face

[01:44:41.0000] <zcorpan>
but .style with CSSFontFaceDescriptors (or Declaration) would make sense

[01:46:21.0000] <zcorpan>
but i'll wait for feedback on the @page thing before opening the @font-face can on the list, i think

[01:48:19.0000] <SimonSapin>
I don’t think CSSStyleDeclaration is a good model that we should reproduce

[01:50:02.0000] <SimonSapin>
It’s halfway between an AST (which would be an ordered list with duplicates) and the results of the cascade (an unordered map)

[01:51:05.0000] <zcorpan>
well if you think we should use a third approach instead, please propose it on the list :-)

[02:03:49.0000] <MikeSmith>
hsivonen: so this week I learned that the ARIA spec permits the value of the role attribute to be a space-separated list of tokens, and that role="foo dialog" is supposed to be handled as valid, as far as document conformance -- if at least one token in the list is the name of a non-abstract role defined in the ARIA 1.0 spec (and as far as HTML validation goes, if that role value is actually allowed for the element the role attribute is used with)

[02:04:47.0000] <MikeSmith>
the requirement seems to be that the first valid abstract role name found in the list is the role value that should be used, and the rest of the tokens are ignored

[02:07:19.0000] <MikeSmith>
so anyway, the only practical way I can think of to implement support for this in the validator is to add a filter that examines the role values and changes them into single role names before the document is checked against any schema by jing

[02:07:57.0000] <MikeSmith>
similar to the way that data-* attributes are handled

[02:08:17.0000] <MikeSmith>
so that's what I'm implementing right now

[02:08:40.0000] <MikeSmith>
but if you think that's a  bad idea, let me know

[02:12:34.0000] <MikeSmith>
I already sent a comment to the PFWG saying that what they should do instead is not have the multiple-token-role-value mechanism at all, and require that the value contain only a single role name, but I would guess that they're not likely to ever actually agree to that

[02:23:19.0000] <smartgloves>
sup

[02:49:51.0000] <zcorpan>
MikeSmith: iirc hsivonen commented on the document conformance rules when they were made up that it doesn't make sense to allow in for document conformance until the ARIA 2.0 bridge is crossed

[02:50:21.0000] <zcorpan>
MikeSmith: which i tend to agree with

[02:51:07.0000] <zcorpan>
MikeSmith: i made up the rules back in 2006 to convince the group to go with that extensibility model instead of something more insane that was in place before it (don't remember what it was)

[02:51:38.0000] <zcorpan>
or 2007 or whenever

[02:53:13.0000] <jgraham>
TabAtkins: Well .flatMap is still quite ugly — although I grant that .bind isn't much better — and, unless I have totally failed to follow something is very confusing for promises since it does less flattening than the .then method. That seems like a road to confusion.

[02:53:32.0000] <zcorpan>
MikeSmith: the UA processing makes sense and allows for future extensions

[03:02:03.0000] <MikeSmith>
zcorpan: yeah I can understand how it makes sense for UA processing

[03:02:41.0000] <MikeSmith>
zcorpan: but wait you're saying you're the one who originally proposed this design?

[03:02:52.0000] <zcorpan>
MikeSmith: yes

[03:02:59.0000] <MikeSmith>
ok

[03:03:16.0000] <MikeSmith>
well that makes it seem slightly less bad to me

[03:03:29.0000] <zcorpan>
http://simon.html5.org/specs/aria-proposal

[03:04:01.0000] <MikeSmith>
by itself it's not really a design that's bad for validation purposes

[03:04:02.0000] <hsivonen>
MikeSmith: ignoring unknown tokens makes sense for UA processing model but not for validation, IMO

[03:04:03.0000] <MikeSmith>
/me reads

[03:04:40.0000] <hsivonen>
MikeSmith: if it made sense for validation, we'd make all unknown attribute names valid, too

[03:04:53.0000] <MikeSmith>
hsivonen: I can have the filter emit an error for each unknown token

[03:05:03.0000] <hsivonen>
MikeSmith: OK

[03:05:13.0000] <MikeSmith>
/me reads zcorpan proposal

[03:06:59.0000] <MikeSmith>
the real problem for ARIA validation is the massive baroqueness of the requirements for which aria-* states and properties can be used with which roles, and then which roles can be used with which HTML elements

[03:07:21.0000] <zcorpan>
MikeSmith: giving errors for unknown tokens is basically a more complicated way to just check the whole value as one token, since it makes little sense to provide several known tokens

[03:07:53.0000] <hsivonen>
/me sees "CURIE" in zcorpan's doc

[03:08:18.0000] <MikeSmith>
zcorpan: yeah I suppose that's true

[03:09:04.0000] <zcorpan>
hsivonen: yeah, i guess i had to bend over backwards to please the XML-drinking accessibility guys :-)

[03:09:37.0000] <MikeSmith>
heh

[03:09:47.0000] <hsivonen>
I thought XML was smoked rather than drunk

[03:11:12.0000] <zcorpan>
maybe so. what's being drunk?

[03:11:25.0000] <hsivonen>
kool aid

[03:11:38.0000] <hsivonen>
so I suppose XML can be both smoked and drunk

[03:12:06.0000] <hsivonen>
it's a floor wax and a dessert topping

[03:13:43.0000] <jgraham>
Oh, I thought XML kool aid was administered in an enema

[03:15:24.0000] <zcorpan>
it goes in from all directions, and goes out through the ears?

[03:18:55.0000] <zcorpan>
MikeSmith: my proposal has an issue "What authors are allowed to do should probably be constrained"

[03:19:32.0000] <MikeSmith>
zcorpan: about checking the whole value as one token, I suppose so, except that if the value has at least one token that's a known role name, then I can pass on that value to the rest of the validation pipeline for further checking, while dropping all the rest

[03:20:21.0000] <MikeSmith>
maybe the error message should explicitly say, "Dropping invalid token "foo" from role value."

[03:20:22.0000] <zcorpan>
MikeSmith: true

[03:21:18.0000] <zcorpan>
yeah

[03:22:04.0000] <MikeSmith>
ok, I can implement it that way for now and tweak it later if needed

[03:22:29.0000] <zcorpan>
jgraham: did you look on the filelist review issue?

[03:23:42.0000] <jgraham>
zcorpan: No, but I can do it now (or in a few minutes)

[03:23:53.0000] <jgraham>
If you have the review open can you paste the link?

[03:24:03.0000] <zcorpan>
https://critic.hoppipolla.co.uk/r/238

[03:49:06.0000] <jgraham>
zcorpan: OK, tracking is restored

[03:49:28.0000] <jgraham>
Unfortunately it seems all the changes ended up in a merge commit from critic's point of view

[03:49:38.0000] <zcorpan>
jgraham: thanks!

[03:49:48.0000] <zcorpan>
good enough

[04:33:46.0000] <zcorpan>
sigh htmlwg has a gazillion components

[04:34:18.0000] <zcorpan>
maybe i should just pick one at random

[04:38:29.0000] <Ms2ger>
File in WHATWG instead? :)

[04:42:28.0000] <zcorpan>
Ms2ger: https://www.w3.org/Bugs/Public/show_bug.cgi?id=23002#c7

[04:43:27.0000] <zcorpan>
hsivonen: do you have an opinion on the above bug?

[04:46:21.0000] <hsivonen>
zcorpan: I don't care much either way, but it's weird not to be consistent with <script>. might be good to check with wchen.

[04:48:14.0000] <zcorpan>
seems unlikely anyone will have a strong opinion on this :-P

[04:49:04.0000] <jgraham>
I think "just do it" is the right approach. It doesn't seem like it should need explicit buy in from lots of people since it's such a small thing

[04:49:15.0000] <zcorpan>
yeah

[04:50:58.0000] <zcorpan>
commented

[05:33:59.0000] <odinho>
OH MY. I really hate hate hate that NodeList and all the other stupid *List's don't have Array in their prototype chain! GRRR.

[05:34:58.0000] <odinho>
It makes programming so frustrating. Those small cuts. I can't do   document.querySelectorAll('bla').forEach(function() { this.bla })

[05:35:57.0000] <Ms2ger>
Push for Chromium to ship it again? :)

[05:36:51.0000] <odinho>
<3

[05:40:25.0000] <wilhelm>
Yes, please.

[05:40:34.0000] <wilhelm>
/me needed that.. yesterday.

[07:23:56.0000] <jgraham>
zcorpan: You also need to mark the "conflicts" part in that review

[07:24:11.0000] <zcorpan>
jgraham: yeah i noticed

[07:24:30.0000] <jgraham>
I think it is the same as the diff against parent 1, so should just be mechanical (in this case)

[07:25:18.0000] <jgraham>
Nice!

[07:25:39.0000] <zcorpan>
ok should i close and merge also?

[07:26:16.0000] <jgraham>
I beat you to it

[07:26:28.0000] <zcorpan>
ah, thanks

[07:27:05.0000] <jgraham>
Although I am not happy

[07:27:18.0000] <jgraham>
I think I need to fix things up

[07:35:02.0000] <annevk>
Is media fragments implemented? How does it work with XMLHttpRequest and drawImage()?

[07:35:24.0000] <jgraham>
OK, I don't know how to fix things up

[07:42:53.0000] <zcorpan>
jgraham: :-( what's the problem?

[07:46:14.0000] <jgraham>
zcorpan: Well nothing serious enough to actually worry about, I think

[07:47:33.0000] <jgraham>
The author did something like merged their branch with some other non-master branch, or rebased master on top of their branch, or something, that had the net effect of adding commits that were already in master but with different SHA1s

[08:00:36.0000] <zcorpan>
jgraham: please point out to belem that he messed up and say what he should do instead in the future

[08:00:55.0000] <jgraham>
zcorpan: Already on it :)

[08:01:05.0000] <zcorpan>
k :-)

[08:24:15.0000] <annevk>
http://www.w3.org/TR/media-frags/#processing-media-fragment-uri :/

[08:24:18.0000] <annevk>
Is that implemented?

[08:24:28.0000] <annevk>
"If either name or value are not valid UTF-8 strings, then remove the name-value pair from the list." ...

[08:27:49.0000] <annevk>
<!DOCTYPE html><img src=image#xywh=0,0,40,40>

[08:27:52.0000] <annevk>
Should that work?

[08:27:57.0000] <annevk>
Because it doesn't

[08:32:23.0000] <annevk>
/me asks in https://bugzilla.mozilla.org/show_bug.cgi?id=790640

[08:37:24.0000] <matjas>
MikeSmith: would you mind enabling the issue tracker on https://bitbucket.org/validator/validator/src since http://bugzilla.validator.nu/ has been down for a few weeks now?

[08:47:37.0000] <Ms2ger>
annevk, http://mxr.mozilla.org/mozilla-central/source/netwerk/base/src/nsMediaFragmentURIParser.h#15

[08:48:39.0000] <annevk>
Ms2ger: how does the temporal stuff work?

[08:48:44.0000] <Ms2ger>
No idea

[08:48:52.0000] <Ms2ger>
matjas, seems up

[08:49:08.0000] <TabAtkins>
gsnedders: that sounds good - I'm free that week.

[08:50:41.0000] <annevk>
Seems the specification doesn't detail much at all. Man...

[08:51:10.0000] <annevk>
How can you write that much text with a group of people and not consider the basic processing model?

[08:51:40.0000] <TabAtkins>
zcorpan: While I support adding a property to rules that contains their name, I currently have CSSCounterRule specced to have a name attribute.

[08:51:52.0000] <TabAtkins>
zcorpan: Though, I suppose we're switching to a consistent .style for that.

[08:55:04.0000] <matjas>
Ms2ger: I just get timeouts, like 90% of the time

[08:55:48.0000] <Ms2ger>
matjas, mm, I loaded once and it seemed to appear

[09:13:17.0000] <gsnedders>
annevk: AFAIK it's only really implemented for video/audio

[09:18:22.0000] <annevk>
Thinking about it some more, https://gist.github.com/annevk/6295844 could probably make use of the same syntax as media resources. We'd just claim "path="...

[10:20:37.0000] <TabAtkins>
annevk: Yeah, I think we need to spec that "foo=..." in the hash is reserved.

[10:23:05.0000] <TabAtkins>
So, I want Bikeshed to automatically add ids to issues in the spec (and a permalink icon, like headings now get), so they're easy to link to.  But I also want the ids to be stable across modifications elsewhere in the draft.

[10:23:23.0000] <TabAtkins>
I'm thinking of just hashing the textContent of the issue and using that in the id.  Thoughts?

[10:25:02.0000] <jgraham>
Hashing works great if you are a machine and/or misathropist

[10:25:16.0000] <jgraham>
+n

[10:25:26.0000] <TabAtkins>
No one's trying to guess the ids, just link to them.

[10:25:48.0000] <jgraham>
Yes, but it makes them impossible to understand or remember

[10:25:49.0000] <TabAtkins>
Also: anyone got a suggestion for a hash algo that's (a) standard in Python, and (b) generates a short output string?

[10:26:06.0000] <TabAtkins>
jgraham: Yeah, but the understandable auto-genned ones aren't stable.

[10:26:12.0000] <TabAtkins>
You can always add an id yourself.

[10:26:56.0000] <jgraham>
hashlib.sha1(text).hexdigest()[:8]

[10:27:22.0000] <TabAtkins>
Sure.  And I already have dedup functionality, so I dont' need to worry about collisions.

[10:29:49.0000] <SimonSapin>
TabAtkins: so the id changes as soon as you reword / change anything in the issue?

[10:30:11.0000] <TabAtkins>
SimonSapin: Yes.  They're stable against changes *elsewhere* in the doc, but not to changes within the issue.  Better suggestions are welcome.

[10:30:55.0000] <SimonSapin>
yell at editors that don’t specify IDs? ;)

[10:31:30.0000] <TabAtkins>
I'm already adding a warning when you don't specify an id for the heading.

[10:31:44.0000] <TabAtkins>
Maybe I could autogen the id, but also warn?

[10:31:56.0000] <TabAtkins>
But coming up with issue ids is annoying. :/

[10:35:22.0000] <SimonSapin>
TabAtkins: parsed declarations in a stylesheet have cascaded values, which are intial, inherit, unset or a specified value. Does that sound right?

[10:35:50.0000] <weinig>
TabAtkins: you don't happen to know if there are any tests for the DOM spec Promises stuff do you?

[10:36:11.0000] <TabAtkins>
weinig: Ask annevk

[10:36:20.0000] <weinig>
he no here :(

[10:36:29.0000] <weinig>
TabAtkins: I'll give him an email

[10:36:43.0000] <TabAtkins>
SimonSapin: No, they have declared value.  Cascaded values are the result of the cascade, and belong to element/property combos.

[10:36:59.0000] <TabAtkins>
http://dev.w3.org/csswg/css-cascade/#value-stages

[10:37:56.0000] <SimonSapin>
so how do I call a declared value that is not a CSS-wide keyword?

[10:38:14.0000] <TabAtkins>
What's your need?

[10:38:50.0000] <SimonSapin>
in Servo’s style system, the value of each CSS property is represented by a different data type

[10:39:07.0000] <SimonSapin>
I don’t want to deal with initial/inherit/unset in each of them, but make it generic

[10:39:15.0000] <TabAtkins>
Yeah.

[10:39:42.0000] <SimonSapin>
So I have a type like this: enum DeclaredValue<T> { Initial, Inherit, Unset, XXXValue(T) }

[10:39:59.0000] <SimonSapin>
Rust enums are what C calls tagged unions

[10:40:18.0000] <SimonSapin>
I’m looking for a name for XXXValue

[10:40:55.0000] <TabAtkins>
When we need to distinguish in specs, we just say "not a global keyword" or something and link to the section in Values or Cascade. :/

[10:41:23.0000] <SimonSapin>
isn’t that "specified value"?

[10:41:44.0000] <TabAtkins>
Nope, specified value is the cascaded value after resolving the global keywords away.

[10:41:51.0000] <SimonSapin>
in terms of what the possible, well, values, are.

[10:41:57.0000] <TabAtkins>
It's not a name for a class of values, but rather a part of the value computation stage.

[10:42:08.0000] <TabAtkins>
But sure, you could use it for that.

[10:42:13.0000] <TabAtkins>
It wouldn't be ambiguous.

[10:42:23.0000] <TabAtkins>
And, hm, I guess we do use the words like that in specs.  So yes.

[10:42:31.0000] <SimonSapin>
I see

[10:42:34.0000] <jgraham>
weinig: If there are any I haven't seen them

[10:42:43.0000] <SimonSapin>
that stage of the cascade will also use the same type

[10:43:21.0000] <jgraham>
weinig: But it is possible that someone didn't get the memo and wrote implentation-specific tests

[10:43:29.0000] <SimonSapin>
close enough I guess

[10:45:34.0000] <TabAtkins>
SimonSapin: Yeah, now that I think about it, we do use the term to mean the set of values that exist in that stage.

[10:45:44.0000] <TabAtkins>
So it's valid to use SpecifiedValue(T) in that enum.

[10:46:08.0000] <jgraham>
weinig: http://dxr.mozilla.org/mozilla-central/source/dom/promise/tests

[10:50:31.0000] <weinig>
jgraham: thanks!

[12:29:48.0000] <zcorpan>
Hixie_: switching the spec to en-GB seems like it would give the html wg editors more grief :-P

[12:31:43.0000] <Ms2ger>
/me had been wondering if that was part of the motivation

[12:33:53.0000] <Hixie_>
no, the motivation would be my sanity. i go crazy trying to remember what's american and what's british and keep getting it wrong.

[12:34:42.0000] <Hixie_>
to be honest i don't pay much attention to downstream use by the htmlwg, since the _entire point_ of my not editing that spec any more was that editing that spec was too much work

[12:34:57.0000] <Hixie_>
because of exactly this kind of thing

[12:35:25.0000] <Hixie_>
so if i thought it was worth my time to worry abotu that, i wouldn't have stopped editing that spec :-)

[13:25:43.0000] <zcorpan>
ok i think i'm done with https://bugzilla.mozilla.org/show_bug.cgi?id=725646 now

[13:27:33.0000] <zcorpan>
Ms2ger: was there a bug about dropping it from the spec?

[13:27:46.0000] <esprehn>
Hixie_: when should an autofocus element become focused wrt the onload event firing?

[13:27:57.0000] <Ms2ger>
zcorpan, I don't recall

[13:28:03.0000] <Ms2ger>
zcorpan, does the spec have it?

[13:28:09.0000] <zcorpan>
yep

[13:28:11.0000] <zcorpan>
i'll file one

[13:28:24.0000] <Ms2ger>
Okay, thanks

[13:28:40.0000] <esprehn>
Hixie_: the spec says to "Queue a task that checks to see if the element is focusable," when the element is inserted, but I don't see any ordering requirement for onload

[13:58:02.0000] <zcorpan>
TabAtkins: Counter Styles -- my brain first read that as Counter Strike

[14:01:04.0000] <TabAtkins>
zcorpan: That's basically what it is.

[14:02:22.0000] <zcorpan>
TabAtkins: it would be a fun easter egg to embed the game in the spec

[14:02:31.0000] <TabAtkins>
Probably detectable in the load time.

[14:03:29.0000] <zcorpan>
you can delay loading it until some gesture is made

[14:12:19.0000] <TabAtkins>
I presume it's already been enscriptened?

[14:20:16.0000] <zcorpan>
no idea

[14:20:33.0000] <zcorpan>
haven't seen it in a browser

[14:46:17.0000] <MikeSmith>
matjas: I've enabled the gh issue tracker for https://bitbucket.org/validator/validator/src so feel free to use it if that works better for you but if http://bugzilla.validator.nu/ availability contintues to be a problem I'd personaly prefer you use https://www.w3.org/Bugs/Public/enter_bug.cgi?product=Validator%20(Nu) as an alternative instead of the gh issue tracker

[14:47:14.0000] <MikeSmith>
s/gh/bitbucket/

[14:50:12.0000] <MikeSmith>
anyway, among other reasons why I'd suggest https://www.w3.org/Bugs/Public/enter_bug.cgi?product=Validator%20(Nu) as a better alternative is that the since the validator sources are in 7 different bitbucket repos, using bitbucket for issue tracking would mean enabling the issue-tracking feature in multiple other repos there

[14:50:24.0000] <MikeSmith>
e.g., https://bitbucket.org/validator/syntax/src

[14:53:57.0000] <jwalden>
Hixie_: I am a little behind on scrollback ;-) but in the very unlikely chance you never found a better possibility, "is informed by" or (with less control/authority connotation) "is aware of" might work for the A-B non-symmetric relationship phrase you were looking for

[14:54:58.0000] <TabAtkins>
zcorpan: On more thought, I'm not sure I'm comfortable with the @page OM change.  I'm fine with the idea of it, but we really need a model that reflects the relative ordering of at-rules and declarations.  It's not relevant for @page, but it will be in the future for style rules if we do @mixin or something.

[14:55:41.0000] <TabAtkins>
zcorpan: So it may be worthwhile to actually innovate here, and design something that can be copied over to style rules later.

[15:09:56.0000] <zcorpan>
TabAtkins: why do we need the order for @mixin?

[15:10:21.0000] <TabAtkins>
Because @mixin is basically a variable holding declarations, so it matters whether *other* declarations appeared before or after it.

[15:11:14.0000] <gsnedders>
Woah. What's happened to Bugzilla!?

[15:14:25.0000] <zcorpan>
TabAtkins: ok. sleep time now. take it on the list :-)

[16:34:04.0000] <Hixie_>
esprehn: is it the same task source as the load event?

[16:34:19.0000] <Hixie_>
jwalden: wow, that _is_ behind on scrollback. :-P We went with "is familiar with" for now.

[16:36:25.0000] <jwalden>
:-)


2013-08-22
[17:42:55.0000] <MikeSmith>
I see that the locus of EME debate seems to have now shifted away from W3C forums and on to blink-dev

[17:43:01.0000] <MikeSmith>
that's progress

[17:47:39.0000] <MikeSmith>
in other news, now that the HTML spec requires the title element to have non-whitespace content, we'll need to choose some stock value for the title attribute to use in the minimal boilerplate HTML document  in the text-field input feature of the validator

[17:47:55.0000] <MikeSmith>
anybody have suggestions?

[17:49:33.0000] <jamesr__>
anyone here familiar with the charset attribute on Document?

[17:49:50.0000] <jamesr__>
it's in blink with a comment "// IE extensions" as an attribute DOMString

[17:49:55.0000] <jamesr__>
notable, not readonly

[17:50:34.0000] <jamesr__>
we appear to "support" (for some definition of that word) writing a value to the attribute

[17:50:40.0000] <jamesr__>
i don't know what it actually does

[17:51:00.0000] <jamesr__>
i can't find references on MDN, but maybe i just suck at it

[17:52:38.0000] <jamesr__>
mozilla doesn't appear to have it (according to http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/core/nsIDOMDocument.idl)

[17:59:04.0000] <jamesr__>
in blink they date back from when the property was defined in a file called khtml/ecma/kjs_dom.cpp

[18:08:30.0000] <esprehn>
Hixie_: it's not clear, it puts it in the DOM Manipulation Task Source, but the onload is just handled by the "delays the load event" logic

[18:08:44.0000] <esprehn>
Hixie_: Do things in the DOM Manipulation Task Source delays the load event ?

[18:12:13.0000] <esprehn>
I see, they are the same task source

[18:12:32.0000] <esprehn>
it'd be nice if the spec made this more clear, there's just a sentence in each section that mentions the task source

[18:14:47.0000] <esprehn>
Hixie_: it's unfortunate that autofocus is speced like this, it means there has to be a recalculate style before the onload event can fire, since we need to know the style to decide if something is focusable.

[18:18:26.0000] <esprehn>
I suppose developers should listen for DOMContentLoaded instead since onload is doomed to slowness

[20:36:24.0000] <MikeSmith>
damn can you devs at google please quit using the term "drive-by web" already

[20:36:56.0000] <MikeSmith>
I don't see any signs that anybody else is buying into that term

[21:29:23.0000] <matjas>
MikeSmith: how about <title>Test</title>?

[21:30:56.0000] <MikeSmith>
matjas: sounds good

[21:30:59.0000] <MikeSmith>
I will make it so

[21:39:26.0000] <MikeSmith>
matjas: pushed https://bitbucket.org/validator/validator/commits/4f4c6243d2da0b596304c830d9c642802c4d15cb

[21:39:33.0000] <MikeSmith>
thanks

[21:40:37.0000] <matjas>
MikeSmith: yay! good point about the other bugzilla tracker btw, i had forgotten about it

[21:42:27.0000] <MikeSmith>
matjas: yeah, until hsivonen has time to deal with load issues for the bugzilla.validator.nu server, that's probably the best place

[21:43:13.0000] <MikeSmith>
matjas: btw, about table@sortable, nobody implements that yet right?

[21:43:23.0000] <MikeSmith>
are there any polyfills for it yet?

[21:44:36.0000] <MikeSmith>
and about <data> it's implemented in the validator sources but not yet pushed to http://html5.validator.nu/ or http://validator.nu/ yet

[21:53:02.0000] <matjas>
MikeSmith: i don't think so, no. But note that it also errors on <data> in that context

[21:56:44.0000] <MikeSmith>
matjas: the <data> part should work at least at http://validator.w3.org/nu/ (which is running the current sources from the repo)

[22:00:30.0000] <Hixie_>
MikeSmith: <title>Page Title Here &mdash; Site Title Here</title> maybe?

[22:00:40.0000] <Hixie_>
esprehn: hm, it wasn't my intent to make that bad, but let me look...

[22:01:32.0000] <MikeSmith>
Hixie_: that'd work too I guess

[22:02:35.0000] <Hixie_>
esprehn: hm, i guess if you're so quick to finish loading the doc that you can fire 'load' almost immediately, you could end up with it sitting behind the many tasks that want to resolve style to figure out what can be focused

[22:02:48.0000] <Hixie_>
esprehn: note that DOMContentLoaded is on the same task source, so it would also be delayed

[22:03:12.0000] <Hixie_>
esprehn: also, technically, you are already required to resolve style before firing 'load' since you (per spec, anyway) are supposed to render between each task

[22:03:37.0000] <Hixie_>
esprehn: so you'd resolve style and layout and render between the parser task that stopped parsing, and the DOMContentLoaded/load tasks

[22:05:06.0000] <esprehn>
Hixie_: that's definitely not how browsers work, we're not going to resolve style or layout between tasks

[22:06:45.0000] <Hixie_>
esprehn: yeah, well, so long as it _looks_ like you do :-)

[22:07:01.0000] <Hixie_>
esprehn: for the autofocus thing, i can use another task source

[22:07:17.0000] <Hixie_>
not sure which exactly

[22:07:34.0000] <Hixie_>
user interaction task source maybe

[22:07:54.0000] <esprehn>
Hixie_: The sad thing is if you had <input autofocus> and then onload = function() { doSomethingThatInvalidatesStyle(); } the current spec means we calculate the style twice

[22:08:21.0000] <Hixie_>
oh i'm convinced of the badness here, don't worry

[22:08:47.0000] <esprehn>
:)

[22:09:15.0000] <Hixie_>
interesting, there is _some_ precedence for using the user interaction task source for non-user interaction tasks

[22:09:22.0000] <Hixie_>
calling input.select() does it

[22:09:39.0000] <Hixie_>
i guess that makes sense

[22:09:48.0000] <esprehn>
webkit and (old) opera both do autofocus inside "layout"

[22:10:05.0000] <esprehn>
ex. appendChild(input with autofocus); input.offsetTop; // focus happened inside this

[22:10:13.0000] <Hixie_>
woah

[22:10:21.0000] <Hixie_>
that's... special

[22:10:33.0000] <esprehn>
Firefox appears buggy, it frequently seems to not do autofocus at all

[22:11:01.0000] <Hixie_>
well, you're allowed to not focus

[22:11:20.0000] <Hixie_>
so you can get a synchronous 'focus' event during the call to offsetTop?

[22:11:33.0000] <esprehn>
yes

[22:11:42.0000] <Hixie_>
that's definitely pretty special

[22:11:47.0000] <esprehn>
webkit/blink and old opera all do it

[22:12:20.0000] <esprehn>
autofocus is handled at the time when the render tree is constructed

[22:12:29.0000] <Hixie_>
what happens if the dom is manipulated as this happens?

[22:12:48.0000] <esprehn>
same thing as mutation events

[22:12:58.0000] <Hixie_>
_mutation events_ happen during layout?!

[22:13:07.0000] <esprehn>
oh no :)

[22:15:26.0000] <Hixie_>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2470

[22:15:33.0000] <Hixie_>
i don't understand why chrome can't find the node

[22:15:40.0000] <Hixie_>
does it calculate layout before running inline <script>?

[22:15:57.0000] <Hixie_>
does querySelector() calculate layout?

[22:16:06.0000] <Hixie_>
(change autofocus to autofocusx and it works)

[22:16:07.0000] <esprehn>
offsetTop calculates style (1) and then does layout (2), in between those two steps we fire the focus event handler

[22:16:47.0000] <Hixie_>
so if the focus handler moves the node in the DOM, the layout is what? using the old cascade?

[22:16:52.0000] <Hixie_>
but the new location?

[22:17:13.0000] <esprehn>
using the new location

[22:17:31.0000] <Hixie_>
but what style?

[22:17:45.0000] <esprehn>
focus causes another recalc style, so you end up with recalc style  (1) -> focus event -> recalc style (2) -> layout -> return offset value

[22:18:07.0000] <Hixie_>
oh you check if the event changed things, and start over if it did?

[22:18:12.0000] <esprehn>
yup

[22:18:20.0000] <Hixie_>
what if the focus event added a new element with an autofocus attribute?

[22:18:25.0000] <esprehn>
that's why I was talking about mutation events

[22:19:37.0000] <esprehn>
I think we'll do it all over again, if you continued adding autofocus things we'll hang

[22:19:44.0000] <Hixie_>
i can't get chrome to operate as you describe. it seems to evaluate style earlier than when i call offsetTop.

[22:20:05.0000] <esprehn>
yeah, right now we do it inside the parser...

[22:20:12.0000] <esprehn>
I'm working on fixing that

[22:20:32.0000] <esprehn>
autofocus happens the second the parser inserts the child right now, there's no "posting a task"

[22:20:34.0000] <Hixie_>
wow, autofocus right now does a synchronous during-parse style recalc and layout? :-)

[22:20:50.0000] <esprehn>
no layout :)

[22:21:00.0000] <Hixie_>
well, still

[22:21:01.0000] <Hixie_>
wow

[22:21:02.0000] <Hixie_>
ok

[22:21:03.0000] <Hixie_>
well anyway

[22:21:07.0000] <esprehn>
blink and webkit right now calculate the style of every element as the parser inserts them

[22:21:07.0000] <Hixie_>
i suggest just doing it on a task

[22:21:26.0000] <Hixie_>
a task that's on the same task source as click events, etc

[22:21:36.0000] <Hixie_>
since you can't process those without a layout either

[22:23:03.0000] <esprehn>
yeah, I'll look into if we can do that

[22:23:50.0000] <Hixie_>
k, i'll update the spec accordingly. keep me posted.

[22:27:10.0000] <esprehn>
Hixie_: http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2471

[22:28:01.0000] <Hixie_>
ah, i see

[22:31:10.0000] <hsivonen>
whoa. Mark Pilgrim spotted on blink-dev

[23:15:21.0000] <MikeSmith>
hsivonen: EME discussions bring out the best

[00:33:51.0000] <MikeSmith>
hsivonen: about validation of role values with multiple tokens, I went ahead and pushed the code to the repo

[00:34:09.0000] <MikeSmith>
I'll send you the patches by e-mail for sanity checking when you ahve time

[00:34:20.0000] <MikeSmith>
for now, http://validator.w3.org/nu/?doc=http://w3c-test.org/vnu/syntax/relaxng/tests/html/attributes/role/001.notvalid.html

[01:45:46.0000] <Ms2ger>
Seagull umlaut?

[01:49:38.0000] <MikeSmith>
wha?

[01:50:13.0000] <Ms2ger>
https://twitter.com/hsivonen/status/370241051182637056

[01:53:31.0000] <MikeSmith>
{:

[01:55:37.0000] <MikeSmith>
I like the mustachioed umlaut }:

[02:01:07.0000] <annevk>
I wonder if there's other bad features we should block inside a sandboxed <iframe>

[02:22:53.0000] <annevk>
GPHemsley: yt?

[02:27:45.0000] <annevk>
Updated my zip fragments gist: https://gist.github.com/annevk/6295844

[02:28:14.0000] <annevk>
jamesr__: yo, .charset should be removed

[02:28:47.0000] <annevk>
jamesr__: we considered it for DOM and decided the web could most likely do without it

[02:28:59.0000] <annevk>
jamesr__: if that's not true... let us know

[02:44:57.0000] <zcorpan>
matjas: what license do you have on your contribution to v.nu, "<title>Test</title>" ?

[02:45:38.0000] <matjas>
zcorpan: hah, WTFPL

[02:46:09.0000] <matjas>
MikeSmith: while you’re at it, maybe you could review my pull request? https://bitbucket.org/validator/validator/pull-request/4/use-a-monospaced-font-for-some-form-fields

[02:46:16.0000] <zcorpan>
matjas: k :-)

[02:55:32.0000] <zcorpan>
MikeSmith: the role="" checking looks nice. (haven't QAed it though, just looked at your link)

[02:56:24.0000] <matjas>
MikeSmith: \o/ thanks

[02:56:57.0000] <MikeSmith>
matjas: yup (sorry I had forgot about & thinks for reminding me)

[02:57:03.0000] <MikeSmith>
zcorpan: cool

[02:58:37.0000] <zcorpan>
MikeSmith: can you point to the diff that implements the role filter?

[02:59:19.0000] <MikeSmith>
zcorpan: sure gimme a minute

[03:00:00.0000] <MikeSmith>
it's mostly new code

[03:00:02.0000] <MikeSmith>
new files

[03:00:04.0000] <MikeSmith>
https://bitbucket.org/validator/util/commits/859eabdaa10ad477ff55666b22ce1bb0ce9bcafe

[03:00:11.0000] <MikeSmith>
that's the first part

[03:01:20.0000] <MikeSmith>
zcorpan: main part of interest is https://bitbucket.org/validator/util/commits/859eabdaa10ad477ff55666b22ce1bb0ce9bcafe#Lsrc/nu/validator/xml/roleattributes/RoleAttributeFilteringContentHandlerWrapper.javaT178

[03:03:02.0000] <MikeSmith>
zcorpan: code for integration into the servlet is simple https://bitbucket.org/validator/validator/commits/edb7fe0890f24ee764481e90db771d6f98af2e07

[03:03:53.0000] <zcorpan>
MikeSmith: thx

[03:19:06.0000] <zcorpan>
MikeSmith: LGTM. didn't find any bugs from testing a few things ad hoc :-)

[03:19:18.0000] <MikeSmith>
super

[03:19:29.0000] <MikeSmith>
zcorpan: thanks for taking time to check it

[05:20:35.0000] <annevk>
idna-update keeps blocking my emails...

[05:20:40.0000] <annevk>
oh well, they'll get to www-tag

[05:22:52.0000] <SimonSapin>
annevk: did they black-list you? ;)

[05:23:17.0000] <annevk>
too many email addresses or some such

[05:23:43.0000] <annevk>
I think someone actually white-listed me because I couldn't post to the list at all before and wasn't interested in subscribing

[05:24:57.0000] <annevk>
SimonSapin: what does Servo do for IDNA?

[05:25:03.0000] <SimonSapin>
haha

[05:25:23.0000] <SimonSapin>
is this a real question?

[05:27:03.0000] <jgraham>
Sero priorities: a) Implement getElementById, b) Implement a whole web browser c) Implement IDNA

[05:27:08.0000] <jgraham>
*Servo

[05:27:32.0000] <annevk>
SimonSapin: well, since it has URL processing...

[05:28:10.0000] <SimonSapin>
I would be surprised if it’s supported at all

[05:28:57.0000] <SimonSapin>
right now HTTP is disabled because of recent changes in Rust’s IO

[06:05:12.0000] <gsnedders>
Servo: the web browser without HTTP support.

[06:06:06.0000] <SimonSapin>
who needs HTTP anyway

[06:06:15.0000] <gsnedders>
I hear SPDY is the future.

[06:07:02.0000] <Ms2ger>
HTTPbis

[06:07:42.0000] <jgraham>
Have to start with HTTP/0.9 only

[06:09:10.0000] <gsnedders>
jgraham: But then you also need to start off with content-type sniffing.

[06:10:34.0000] <jgraham>
gsnedders: Of course! But everyone knows that you implement specs one at a time in order and get full conformance to older specs before starting on newer ones.

[06:10:51.0000] <jgraham>
I particularly look forward to the HTML+ support

[06:12:06.0000] <gsnedders>
Personally I'm just waiting for HTML 3.0, so I can then file bugs to remove it. Because that's my hobby.

[06:21:22.0000] <GPHemsley>
annevk: Here now

[07:52:00.0000] <annevk>
GPHemsley: so the situation is this...

[07:52:07.0000] <annevk>
GPHemsley: we're gonna have to do some sniffing at the Fetch level

[07:52:20.0000] <annevk>
GPHemsley: to determine if the response is a ZIP thingie

[07:52:40.0000] <annevk>
GPHemsley: https://gist.github.com/annevk/6295844 has a high-level sketch of this feature

[07:53:06.0000] <annevk>
Hmm, HTTP... gotta spec that too someday

[08:04:01.0000] <GPHemsley>
annevk: Alright; one of the problems I ran into with ZIP was that a lot of various office suite file formats use it as a basis.

[08:04:20.0000] <GPHemsley>
annevk: What do you need me to do?

[08:04:51.0000] <GPHemsley>
Ms2ger: Did you ever implement the attribute sorting in anolis?

[08:05:59.0000] <annevk>
GPHemsley: I'd like you to think about how that makes sense architecturally or if we just need to accept sniffing at various layers...

[08:08:47.0000] <GPHemsley>
annevk: Is the old zip: proposal still in the running, or are you committed to media fragments?

[08:12:38.0000] <GPHemsley>
annevk: Also, doesn't fragment evaluation occur after the resource is loaded?

[08:12:50.0000] <Ms2ger>
GPHemsley, no, don't think so

[08:12:57.0000] <annevk>
I'm pretty sure nested URL schemes is not going to be a thing.

[08:13:21.0000] <GPHemsley>
annevk: Thus, load resource -> sniff type -> evaluate fragment -> navigate to fragment location

[08:13:52.0000] <annevk>
GPHemsley: at which point you might "load" a subresource and sniff type again

[08:14:10.0000] <GPHemsley>
annevk: Sgtm; is that a problem?

[08:14:52.0000] <annevk>
Normally fetch returns a resource which is sniffed. Now fetch retrieves a resource, sniffs it, and returns a subresource.

[08:15:16.0000] <GPHemsley>
That's the reality of the situation. I'm not sure you can get around it.

[08:15:17.0000] <annevk>
This changes where sniffing happens. It also changes where certain fragments are handled.

[08:15:25.0000] <GPHemsley>
You are indeed loading two different resources.

[08:15:57.0000] <annevk>
Yeah, that was my conclusion too. Was wondering whether there was another way.

[08:16:36.0000] <GPHemsley>
There may be, but I'm not seeing any problem with the obvious way.

[08:17:15.0000] <GPHemsley>
Other than the one raised by sicking about the nested fragments

[08:17:41.0000] <GPHemsley>
but that's not necessarily part of the network stack

[08:17:50.0000] <GPHemsley>
more a URL syntax issue

[08:18:36.0000] <GPHemsley>
what if you had #path=#anchor ?

[08:19:56.0000] <GPHemsley>
as in <a href="#path=subdir/file.html#subheader">

[08:20:17.0000] <GPHemsley>
or perhaps use a different symbol or percent-encoding for the embedded fragment ID

[08:20:20.0000] <GPHemsley>
-ID

[08:20:44.0000] <GPHemsley>
hmm

[08:20:49.0000] <GPHemsley>
that part needs more thought

[08:20:54.0000] <GPHemsley>
but I think the sniffing issue is fine

[08:20:55.0000] <annevk>
#path=x&id=test exists. However, it's not entirely clear to me we want to support it in browsing contexts just yet. There's more complication there.

[08:21:17.0000] <GPHemsley>
one step at a time, I suppose

[08:21:24.0000] <annevk>
Just resource loads should be sufficient for the use cases that have come up thus far.

[08:21:30.0000] <GPHemsley>
but is there a reason you can't do file.zip/subdir/file.html ?

[08:21:45.0000] <GPHemsley>
or will that not work on the server side?

[08:22:04.0000] <annevk>
GPHemsley: The request to the server will be for /file.zip/subdir/file.html ...

[08:22:09.0000] <GPHemsley>
right

[08:22:10.0000] <GPHemsley>
hmm

[08:23:58.0000] <GPHemsley>
oh well

[08:25:02.0000] <GPHemsley>
but yeah, load resource -> sniff type -> evaluate fragment -> load subresource from path -> sniff type -> display

[08:25:38.0000] <GPHemsley>
it's probably OK to treat resources inside ZIPs as sandboxed in such a way that there is decreased functionality

[08:25:39.0000] <SimonSapin>
GPHemsley: is this recursive? :]

[08:25:44.0000] <SimonSapin>
a zip in zip

[08:26:14.0000] <GPHemsley>
SimonSapin: That's a good question

[08:26:21.0000] <SimonSapin>
http://en.wikipedia.org/wiki/Zip_bomb

[08:26:37.0000] <GPHemsley>
and it probably falls into the same boat as the regular (HTML) page fragments

[08:27:43.0000] <annevk>
SimonSapin: I don't think we'll support recursion

[08:28:06.0000] <GPHemsley>
What about file.zip?path=

[08:28:20.0000] <SimonSapin>
annevk: yeah, it sounds not very useful and potentially dangerous

[08:30:14.0000] <GPHemsley>
Another way is to treat the zip file as if it's an embedded domain

[08:30:30.0000] <GPHemsley>
as in, relative links inside the ZIP can't get out of the ZIP

[08:31:05.0000] <GPHemsley>
such that <a href="#anchor"> gets turned into file.zip?path=subdir/file.html&id=anchor

[08:31:31.0000] <GPHemsley>
or something

[08:31:33.0000] <GPHemsley>
/me shrugs

[08:32:01.0000] <GPHemsley>
oh, s/?/#/

[08:32:11.0000] <GPHemsley>
force of habit

[08:32:39.0000] <GPHemsley>
but then if you have an embedded fragment for image dimensions, you'd need to deal with that

[08:33:49.0000] <GPHemsley>
so <a href="#xywh=160,120,320,240"> inside /package.zip#path=image.jpg would get navigated to /package.zip#path=image.jpg&xywh=160,120,320,240

[08:34:59.0000] <GPHemsley>
given that media fragments seems to allow multiple name-value pairs with the same name, you might be able to get away with #path=image.zip&path=embedded.html

[08:35:45.0000] <GPHemsley>
but this is me trying to solve problems you didn't really ask me about :)

[08:37:09.0000] <GPHemsley>
annevk: Would this proposal be a generic one that could possibly be extended to all archive types?

[08:58:28.0000] <annevk>
GPHemsley: it's not clear to me we want to support all archive types

[09:42:38.0000] <Domenic_>
is someone working on making svg support css gradients? (is that already specced?) because dropping back to markup to declare these gradients is just feeling silly.

[09:43:31.0000] <annevk>
Domenic_: TabAtkins would know, can also check public-fx for that I think

[09:43:50.0000] <annevk>
Domenic_: it's the CSS/SVG coordination group; given that such coordination is happening, I suspect they're on it

[09:45:14.0000] <Domenic_>
annevk: neat, thanks.

[09:57:50.0000] <Ms2ger>
"Three RDFa Recommendations Published"

[09:57:57.0000] <Ms2ger>
(Offered without comment)

[10:12:06.0000] <weinig>
annevk: hello

[10:12:13.0000] <JonathanNeal>
I am writing an article on schemes and how to use them, common and proprietary, and I would love feedback, even if it's extremely critical. https://gist.github.com/jonathantneal/6301455

[10:12:26.0000] <annevk>
weinig: hey hey

[10:12:45.0000] <annevk>
weinig: how are things? keeping hober in check on this b-day?

[10:13:25.0000] <weinig>
annevk: he's left me to "celebrate"

[10:13:29.0000] <annevk>
aah

[10:14:16.0000] <weinig>
annevk: I have a question about the dom spec promises,

[10:15:06.0000] <annevk>
weinig: k

[10:15:34.0000] <weinig>
annevk: there are quite a few places that state to run the resolver's resolve, and I am curious if one should ever set the resolved flag out side of the 3 real js functions exposed on the resolver itself

[10:15:49.0000] <annevk>
weinig: the long and short of it is that Domenic_ is working on something that matches better what TC39 wants

[10:16:00.0000] <weinig>
annevk: heh, ok

[10:16:04.0000] <annevk>
weinig: https://github.com/domenic/promises-unwrapping

[10:16:15.0000] <weinig>
annevk: 404 :(

[10:16:18.0000] <annevk>
weinig: yeah, the resolved flag is kinda broken

[10:16:28.0000] <annevk>
weinig: oh, didn't know Domenic_ made it private

[10:16:39.0000] <weinig>
maybe if I log in it will work

[10:17:00.0000] <Domenic_>
i can make it public i guess

[10:17:20.0000] <Ms2ger>
Yay, more design-in-back-rooms

[10:17:28.0000] <weinig>
Domenic_: thanks

[10:18:17.0000] <weinig>
annevk: I have most of it implemented already (just missing Promise.some and Promise.every)

[10:18:18.0000] <annevk>
weinig: gotta go, Domenic_ should be able to help out with further questions, we're pretty much in sync I think

[10:18:22.0000] <weinig>
annevk: I hope it doesn't change too muh

[10:18:27.0000] <weinig>
annevk: excellend

[10:18:28.0000] <weinig>
annevk: excellent

[10:18:32.0000] <weinig>
annevk: have a good night

[10:18:49.0000] <annevk>
weinig: so I think we might subset and remove fulfill() for now; details around scheduling might change

[10:19:02.0000] <Domenic_>
weinig: Ms2ger: annevk: public.

[10:19:04.0000] <annevk>
weinig: and the unwrapping might move entirely to the then() method; but by and large...

[10:19:06.0000] <weinig>
fair enough

[10:19:08.0000] <annevk>
thanks Domenic_

[10:30:49.0000] <TabAtkins>
Domenic_: Yes, the idea is that fill/stroke will support the CSS <image> type as well.

[10:30:56.0000] <TabAtkins>
(And vice versa.)

[10:31:12.0000] <TabAtkins>
That is, SVG paint servers will work as <image> type in CSS.

[10:31:37.0000] <Domenic_>
TabAtkins: thank goodness. How's progress on that front? Distant-future, or living-spec-as-soon-as-someone-implements-it?

[10:32:17.0000] <TabAtkins>
The SVG-in-CSS part is roughly living spec, in Images 4 (check out element()).  The CSS-in-SVG part is expected, but hasn't been written yet.

[10:33:42.0000] <Domenic_>
awww

[10:33:52.0000] <Domenic_>
(but yes, element() is great stuff.)

[11:21:34.0000] <zcorpan>
anyone want to finish reviewing https://critic.hoppipolla.co.uk/r/32 ?

[11:23:07.0000] <jamesr__>
annevk: i would tend to agree. i'm adding instrumentation to Blink for document.charset and document.defaultCharset to confirm

[11:23:54.0000] <jamesr__>
annevk: if it turns out those things do appear to be needed, i'll let whatwg know. if it turns out they aren't (which is hopefully the case) i'll let WebKit know they can probably remove them too

[12:18:22.0000] <zcorpan>
something that would be fun to do: subscribe to annevk's blog but with the posts from 10 years ago

[12:19:56.0000] <zcorpan>
so today is http://annevankesteren.nl/2003/08/object

[12:44:05.0000] <Domenic_>
oh woah i never noticed that "SVG sucks" changed to "URLs suck", haha

[12:55:37.0000] <TabAtkins>
Whatever he's currently play with sucks.

[13:04:25.0000] <Domenic_>
i feel like it was SVG for years.

[13:07:39.0000] <zcorpan>
it was svg since jan 2009

[13:07:48.0000] <zcorpan>
dunno when it changed to urls

[13:08:24.0000] <zcorpan>
or what it was before svg

[13:08:31.0000] <nimbu>
annevk: ^^

[13:08:38.0000] <nimbu>
inquiring minds want to know

[13:10:11.0000] <jarek>
I haven't seen anybody notable to say that SVG sucks

[13:10:18.0000] <jarek>
maybe except Alex Russel

[13:10:31.0000] <zcorpan>
/me just knows the svg date because he made the svg version and still has it at http://simon.html5.org/dump/

[13:10:42.0000] <jarek>
CSS3 definitely sucks more with the prefix hell

[13:12:40.0000] <Hixie_>
saying svg "sucks" is an oversimplification

[13:12:53.0000] <Hixie_>
but it certainly has some serious issues

[13:13:03.0000] <Hixie_>
(the wg has done some work to mitigate those over time)

[13:58:38.0000] <aklein>
Hixie_: hi there. http://www.whatwg.org/specs/web-apps/current-work/multipage/urls.html#dynamic-changes-to-base-urls seems to suggest that moving an <img> between document's shouldn't cause it to re-fetch any resources (and to simply keep displaying whatever it was displaying before), but quick tests suggests this isn't the case in either Blink or Gecko

[13:58:38.0000] <aklein>
(both re-resolve). Am I misreading the spec, or is there a bug somewhere?

[14:00:59.0000] <aklein>
(trying to figure out how URL resolution plays with <link rel=import>

[14:42:16.0000] <Hixie_>
aklein: probably a bug in the spec, the cross-document stuff isn't well documented

[15:28:12.0000] <Yuhong>
http://www.reddit.com/r/web_design/comments/1kw8yw/firefox_is_automatically_fixing_bad_html_making/

[15:28:23.0000] <Yuhong>
"Firefox is automatically fixing bad html making it impossible for me to debug. Can I disable it?

[15:28:44.0000] <Yuhong>
"Firefox is automatically fixing bad html making it impossible for me to debug. Can I disable it?"

[15:51:28.0000] <MikeSmith>
for blink is there an OWP bug yet for NavigationController?

[15:52:29.0000] <MikeSmith>
hmm not even listed on http://www.chromestatus.com/features yet

[15:53:46.0000] <MikeSmith>
https://bugzilla.mozilla.org/show_bug.cgi?id=navigationcontroller for gecko


2013-08-23
[17:19:34.0000] <heycam>
how do you mark up constructor definitions with respec?

[17:19:47.0000] <heycam>
("asking for a friend")

[17:23:45.0000] <zewt>
("it's not mine, baby")

[17:23:50.0000] <heycam>
is http://dev.w3.org/2009/dap/ReSpec.js/ actually the latest version of respec?

[17:24:01.0000] <heycam>
because I've found a copy that does support <dt>Constructor()</dt>, but that one's not it

[17:32:28.0000] <TabAtkins>
heycam: No, clearly that version is from 2009.

[17:32:36.0000] <TabAtkins>
Use the github version, I believe.

[17:32:37.0000] <heycam>
heh "clearly" :)

[17:32:42.0000] <heycam>
oh

[17:32:55.0000] <heycam>
I duck duck went "respec github" but didn't find anything

[17:33:11.0000] <TabAtkins>
There's your problem, clearly that's not googling.

[17:33:42.0000] <heycam>
(I use DDG primarily so I can smirk while I type "duck duck went", obviously)

[17:33:55.0000] <heycam>
/me finds https://github.com/darobin/respec

[17:34:29.0000] <TabAtkins>
There you go.

[17:37:18.0000] <heycam>
/me gives up and does the minimal work required to make the output of this old respec pass pubrules :\

[17:45:42.0000] <TabAtkins>
zcorpan: Why does the ScrollOptions dict in http://dev.w3.org/csswg/cssom-view/#extensions-to-the-window-interface have an x and y member?

[19:30:32.0000] <Domenic_>
Any ideas why step 8 does not come after step 11 here? Hixie_? http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html#dom-window-postmessage

[19:44:59.0000] <Hixie_>
Domenic_: interesting question

[19:45:11.0000] <Hixie_>
Domenic_: i would guess it relates to something the algorithm used to do but wasn't changed

[19:45:21.0000] <Hixie_>
was changed and doesn't do any more, that is

[23:18:04.0000] <zcorpan>
TabAtkins: for element.scrollTop and scrollLeft

[01:30:41.0000] <kochi1>
MikeSmith: ping?

[01:31:06.0000] <MikeSmith>
kochi1: hey

[01:31:12.0000] <kochi1>
hi

[01:31:28.0000] <kochi1>
MikeSmith: is it okay to present in Japanese (both speech and screen)?

[01:31:35.0000] <MikeSmith>
kochi1: yup

[01:31:39.0000] <kochi1>
or English is preferred?

[01:32:44.0000] <MikeSmith>
kochi1: no, Japanese is preferred

[01:32:56.0000] <kochi1>
MikeSmith: ah, ok, thanks!

[01:33:17.0000] <MikeSmith>
cheers

[01:33:29.0000] <kochi1>
MikeSmith: I sent you my slide deck a while ago. if you have anything, please let me know.

[01:34:00.0000] <MikeSmith>
kochi1: yep, got it. Will do

[01:34:25.0000] <kochi1>
MikeSmith: thanks!

[01:54:05.0000] <zcorpan>
TabAtkins: did you read the comments in the clonee? https://www.w3.org/Bugs/Public/show_bug.cgi?id=23032

[01:55:44.0000] <zcorpan>
TabAtkins: the bug is *not* about hosing to head when template is found *in* body

[01:56:09.0000] <zcorpan>
TabAtkins: it's about hoisting to head when found *between* </head> and <body>

[02:25:18.0000] <jgraham>
zcorpan: Reviewed and merged

[02:25:26.0000] <zcorpan>
jgraham: thanks

[02:25:37.0000] <jgraham>
Thanks for doing the work :)

[02:26:29.0000] <jgraham>
zcorpan: BTW, as a person that writes tests, do you have any opinion on a requirement to put non-test-files in a subdirectory called "resources/"?

[02:26:51.0000] <zcorpan>
jgraham: that doesn't always work

[02:27:12.0000] <zcorpan>
jgraham: works as a guideline though

[02:27:35.0000] <jgraham>
zcorpan: An example of where it fails would be nice :)

[02:27:53.0000] <zcorpan>
jgraham: e.g. i recall testing new Worker(null) which requires a "null" file in the same directory

[02:28:23.0000] <jgraham>
Nice example

[02:28:36.0000] <jgraham>
I think when it fails you can work around it using window.open() and writing the whole test in a different window

[02:28:50.0000] <jgraham>
My feeling is that it's a bit silly

[02:29:14.0000] <zcorpan>
what part is silly?

[02:31:25.0000] <jgraham>
requiring a resources/ subdirectory

[02:32:01.0000] <jgraham>
The purported reason is to make it easier to tell what is a test and what isn't

[02:32:05.0000] <annevk>
jamesr__: excellent, thanks!

[02:32:29.0000] <jgraham>
But you still have to parse the files to get metadata out, so that doesn't seem like a big win

[02:33:41.0000] <zcorpan>
ok. yeah. it might be useful to be able to identify which files are tests (and maybe also what kind of test), but that could be done by a naming conversion of the test files or something

[02:35:55.0000] <jgraham>
Well

[02:36:58.0000] <jgraham>
My feeling is that actually running the tests in automation is going to require a manifest to be produced at some stage, and that putting all the manifest data into a filename is a non-starter (e.g. the ref for reftests, the timeout)

[02:37:38.0000] <jgraham>
So I'm not sure it's a big enough win to require that all testharness tests end with -test or something to make it worth the hassle

[02:37:47.0000] <zcorpan>
true

[02:38:27.0000] <zcorpan>
so require the appropriate metadata in the tests instead?

[02:40:15.0000] <jgraham>
Yeah, I think that's the way this is going

[02:48:49.0000] <annevk>
zcorpan: I don't get http://dev.w3.org/csswg/cssom-view/#dom-window-scroll

[02:49:27.0000] <zcorpan>
annevk: which part?

[02:49:38.0000] <annevk>
zcorpan: where are the dictionary x/y unpacked

[02:49:59.0000] <annevk>
zcorpan: and if you are going to accept a dictionary, why not just make it the first argument and only argument

[02:50:19.0000] <annevk>
zcorpan: and support x/y/deltaX/deltaY or some such

[02:50:27.0000] <zcorpan>
annevk: the dictionary x/y aren't used for that method

[02:51:10.0000] <zcorpan>
annevk: dict as only argument would have worse backcompat

[02:51:33.0000] <zcorpan>
but it appears you're not the first being confused by ScrollOptions

[02:51:39.0000] <annevk>
Oh, I see, you should add a comment there

[02:51:50.0000] <annevk>
Or maybe just use different dictionaries

[02:51:56.0000] <zcorpan>
maybe i should use different dicts, yeah

[02:52:51.0000] <zcorpan>
dicts can inherit, right?

[02:52:57.0000] <annevk>
yeah

[02:53:03.0000] <annevk>
events use that all over

[02:53:14.0000] <zcorpan>
ah yeah

[02:56:27.0000] <zcorpan>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=23048

[03:02:52.0000] <zcorpan>
how can something be "hundreds of times smaller"? http://www.heydonworks.com/article/font-hacking

[03:03:32.0000] <zcorpan>
100% smaller means a size of 0, no?

[03:05:42.0000] <annevk>
If X is hundreds of times smaller than Y, I think it means that Y &times; hundreds = X

[03:06:08.0000] <jgraham>
zcorpan: So it seems that there's a bug in the submitted version of the html5lib tests, and they should probably be updated anyway. Are you able to dig up the scripts to generate them from t/ and submit them?

[03:06:21.0000] <annevk>
Wait, X &times; hundreds = Y

[03:06:27.0000] <annevk>
clearly I needed more sleep

[03:09:08.0000] <zcorpan>
jgraham: /core/standards/html-parsing/html5lib_harness/ ?

[03:09:23.0000] <jgraham>
zcorpan: Sounnds right

[03:10:42.0000] <zcorpan>
jgraham: PR into https://github.com/w3c/web-platform-tests/tree/master/html/syntax/parsing ?

[03:11:35.0000] <jgraham>
zcorpan: I think the python bits should maybe go into tools/scripts

[03:11:42.0000] <jgraham>
I'm not really sure though

[03:13:28.0000] <zcorpan>
doesn't that just make it harder to find? :-)

[03:16:29.0000] <jgraham>
Probably

[03:42:35.0000] <SimonSapin>
annevk: https://www.w3.org/Bugs/Public/show_bug.cgi?id=20599#c6 says that ISO-2022-JP is not ASCII compatible?

[03:42:59.0000] <annevk>
SimonSapin: it's ASCII-compatible enough, but it's really bad

[03:43:19.0000] <SimonSapin>
annevk: what does "enough" mean?

[03:43:44.0000] <annevk>
SimonSapin: that unless you use the escape sequence, you'll be in ASCII-land

[04:23:32.0000] <jgraham>
gsnedders: Yay!

[04:24:44.0000] <jgraham>
/me can't review those, really

[04:45:56.0000] <zcorpan>
the legal analysis in http://www.heydonworks.com/article/font-hacking seems dubious, it's still a derivative work of arial bold

[04:50:38.0000] <jgraham>
At least in the US I think that the actual letter outlines can't be protected by copyright

[04:50:54.0000] <jgraham>
The font file itself can be though

[04:51:33.0000] <jgraham>
So taking a letter, tweaking it a bit, and generating a whole new font file (without copying the extra data like kerning and so on) seems fine

[04:51:43.0000] <jgraham>
(I guess that is not what is happening there)

[04:52:11.0000] <Ms2ger>
Well, "fine"

[04:52:15.0000] <Ms2ger>
It's still Arial

[05:05:04.0000] <zcorpan>
one fun application would be to swap two glyphs and use for comment fields so that commenters think they're typo-ing over and over

[05:09:37.0000] <foolip>
zcorpan, brilliant :D

[05:09:53.0000] <foolip>
plus a hidden cam/screencast please

[05:12:12.0000] <odinho>
annevk: do you see actual &times; or just the symbol ·?

[05:12:33.0000] <Ms2ger>
&times; is �

[05:13:06.0000] <zcorpan>
annevk has an HTML parser in his brain so he sees ×

[05:31:59.0000] <odinho>
× ·  yeah true dat.  We used · in norway at school.

[05:35:09.0000] <zcorpan>
we used vertical tilde to mess with matjas years later

[05:37:18.0000] <Ms2ger>
We start using � about when me move from calculating to mathematics here

[05:39:08.0000] <matjas>
:(

[05:39:49.0000] <Ms2ger>
(Vertical tilde?)

[05:40:07.0000] <matjas>
Ms2ger: https://mail.mozilla.org/pipermail/es-discuss/2013-August/032715.html

[05:40:44.0000] <matjas>
zcorpan: re: glyph swapping, there is actually an scriptless XSS-like attack that makes use of this

[05:41:27.0000] <Ms2ger>
Scriptless cross-site-scripting?

[05:41:28.0000] <zcorpan>
jgraham: trying to run update.py i get ImportError: No module named killableprocess. maybe i have an old python. but maybe i can just submit the scripts without updating myself?

[05:41:40.0000] <matjas>
Ms2ger: yup, see http://www.slideshare.net/x00mario/stealing-the-pie/9

[05:42:02.0000] <matjas>
i.e. using <input type=password> with a custom font that swaps the glyphs

[05:42:12.0000] <matjas>
then tricking the user into thinking it’s a captcha

[05:42:18.0000] <Ms2ger>
Heh

[05:42:48.0000] <matjas>
all it takes it for an attacker to be able to inject CSS on a login page, and boom

[05:44:23.0000] <zcorpan>
matjas: the font doesn't get applied for me in opera/chrome/firefox

[05:44:48.0000] <matjas>
zcorpan: used to work in Opera 12 iirc

[05:45:32.0000] <zcorpan>
matjas: is the attack using password autofill?

[05:45:44.0000] <matjas>
zcorpan: yeah

[05:46:39.0000] <zcorpan>
matjas: why would it prefill on the attacker's page?

[05:46:54.0000] <matjas>
zcorpan: the idea is that it is not the attacker’s page

[05:47:00.0000] <matjas>
but a page where an attacker can inject css

[05:47:22.0000] <matjas>
and then later make the result submit to his own server using some other trick from that slide deck

[05:47:36.0000] <matjas>
very edge-casey, but also pretty scary

[05:50:00.0000] <zcorpan>
i don't see the trick to submit to the attacker's server

[05:52:32.0000] <matjas>
hmm, me neither

[05:52:34.0000] <matjas>
/me watches http://www.youtube.com/watch?v=6dxsTFwFqf4

[05:54:50.0000] <zcorpan>
/me sees http://html5sec.org/keylogger/ but that's not css-only

[05:56:13.0000] <matjas>
/me shrugs ¯_(ツ)_/¯

[05:59:24.0000] <zcorpan>
/me can't figure out what the attack with dirname is about, the demo link doesn't seem to work

[06:00:55.0000] <jgraham>
zcorpan: Oh, killableprocess should be kicking about somewhere. With opjsunit if nowhere else

[06:01:35.0000] <gsnedders>
in opjsunit/harness/killableprocess.py

[06:02:07.0000] <jgraham>
zcorpan: But it is fine to just submit the scripts; I can do the update

[06:02:10.0000] <jgraham>
If needed

[06:02:26.0000] <jgraham>
(I also have to fix some bug, so it's probably easier if I do it)

[06:06:26.0000] <zcorpan>
ok

[06:06:48.0000] <zcorpan>
should i put killableprocess.py in the html5lib_harness dir?

[06:07:58.0000] <annevk>
Domenic_: http://annevankesteren.nl/2013/08/promises

[06:09:27.0000] <annevk>
/me edits a bit

[06:14:28.0000] <jgraham>
zcorpan: Sure

[06:14:31.0000] <jgraham>
Or yes

[06:14:47.0000] <jgraham>
I think what I mean is "if you do that and it's wrong, I can sort it out" :)

[06:22:56.0000] <hsivonen>
The SVG keylogger is interesting. Which browsers "support" it?

[06:29:25.0000] <zcorpan>
jgraham: do you want all the files in html5lib_harness?

[06:31:31.0000] <jgraham>
zcorpan: I don't remember what all the files are :)

[06:46:35.0000] <annevk>
GPHemsley: why is /s/ not reset after 7 in http://mimesniff.spec.whatwg.org/#pattern-matching-algorithm

[06:47:30.0000] <annevk>
GPHemsley: I also don't really understand what the masking thing does

[06:48:06.0000] <annevk>
GPHemsley: if I want ZIP it seems I should just sniff for "50 4B 03 04" and then go with it, no?

[07:01:18.0000] <zcorpan>
annevk: the mask is if you want case-insensitive on some parts or have some bytes be ignored

[07:01:48.0000] <zcorpan>
annevk: if you want literal match the mask should be just FFs

[07:08:10.0000] <annevk>
k

[07:08:57.0000] <zcorpan>
jgraham: https://github.com/zcorpan/web-platform-tests/commit/b008dd48548f7b76732e2f8968ad6c267ba62e4c

[07:09:39.0000] <jgraham>
zcorpan: Great, thanks

[07:13:35.0000] <zcorpan>
np

[07:24:13.0000] <Domenic_>
annevk: awesome. also really cool blink-dev thread! it would be very nice to move promises from blink to v8.

[07:35:27.0000] <mpt>
Does anyone know of sites already using <input type="datetime"> or <input type="datetime-local"> for non-demo purposes?

[07:51:42.0000] <zcorpan>
mpt: $ grep -Eir "<input\s[^>]*type\s*=\s*[\"']datetime" . for http://webdevdata.org latest data set 18/06/2013 gives 0 matches

[07:52:33.0000] <zcorpan>
hmm, forgot to make the quote optional

[07:55:49.0000] <zcorpan>
this data set has just front pages which i guess usually don't have date inputs

[07:58:01.0000] <zcorpan>
mpt: still no datetimes, but i see a few date inputs

[08:00:00.0000] <zcorpan>
48 to be exact

[08:01:30.0000] <zcorpan>
http://pastebin.com/ZPRQPGCB

[08:02:46.0000] <zcorpan>
/me *poof*

[08:08:59.0000] <mpt>
gah

[08:51:09.0000] <GPHemsley>
annevk: The pattern matching algorithm loops through the bytes one by one; /s/ is the position in the sequence. Loop 7 loops through the bytes to be ignored; loop 8 loops through the bytes to be matched.

[08:52:11.0000] <GPHemsley>
annevk: If you're matching the ZIP pattern, you would exit loop 7 at step 2 during the first iteration.

[08:52:23.0000] <Ms2ger>
Did I just see darobin suggesting to parse HTML with a regexp?

[08:52:47.0000] <darobin>
FEAR MY REGEXP SKILZ!

[08:54:28.0000] <Ms2ger>
/me locks darobin up

[08:54:50.0000] <darobin>
s/locks?//g # haha!

[09:02:17.0000] <Ms2ger>
/me darobin up

[09:44:27.0000] <TabAtkins>
zcorpan: Can you explain how the x/y arguments in the dict actually do anything?  They're not mentioned in any part of the scroll() algorithm.

[09:45:29.0000] <Ms2ger>
TabAtkins, are they used in another method that takes the same dictionary as an argument?

[09:45:39.0000] <TabAtkins>
zcorpan: Yeah, now that you've changed the title I get that.  I read the comments, but must have skimmed over the relevant bit in Comment 3 or wahtever.

[09:46:35.0000] <TabAtkins>
Ms2ger: Ah, thanks, that's it.

[09:46:45.0000] <TabAtkins>
Now I understand what he meant by "scrollTop".

[09:47:49.0000] <Ms2ger>
Np

[10:23:17.0000] <annevk>
GPHemsley: I'll take your word for it :)

[10:28:12.0000] <TabAtkins>
annevk: Btw, thanks for all the Promise work.  Sorry I've still been poking at things, but I've been trying my best to keep the Promises/A+ side of it unchanged.

[10:29:33.0000] <annevk>
Thank Domenic_, really

[10:30:44.0000] <TabAtkins>
Yes, he deserves a lot of praise too. ^_^

[10:30:53.0000] <TabAtkins>
Hugs and kisses, Domenic_ !

[10:31:01.0000] <Domenic_>
^_^

[10:31:09.0000] <lecuyer>
hey TabAtkins, has there ever been any discussion of an :all-children-match() type pseudo-class in the selectors spec?

[10:31:18.0000] <TabAtkins>
What does this do?

[10:31:44.0000] <lecuyer>
it matches only if all children match :) example:

[10:32:35.0000] <lecuyer>
ul:all-children-match(li > img:only-child) whould match a UL, every child of which contains *only* an img

[10:33:10.0000] <TabAtkins>
No, nothing like this has been discussed.

[10:33:12.0000] <lecuyer>
the primary usecase is if you're generating html from markdown and you have a list of images that you'd like to display as a gallery

[10:33:24.0000] <TabAtkins>
And, interestingly, it can't be done with the subject indicator.

[10:34:09.0000] <TabAtkins>
But still, this'll probably land in the "complete" profile, which means "usable in querySelector, but not in CSS".

[10:34:15.0000] <Domenic_>
subject indicator is my favorite indicator!!!!!

[10:35:41.0000] <lecuyer>
I've been kicking this around in my head for a little while, but I'll write up something more complete after I vet it out a bit

[10:37:02.0000] <TabAtkins>
Seems kinda niche, but potentially interesting.

[10:37:32.0000] <GPHemsley>
annevk: Well, if you think that's not the case, perhaps I need to tweak the wording. Feedback welcome. ;)

[10:37:42.0000] <TabAtkins>
We really need to add custom pseudo-classes so these kinds of things can be added without us having to worry about slowing down the whole language.

[10:49:01.0000] <Domenic_>
+1

[12:10:09.0000] <zcorpan>
TabAtkins: let me know if the spec is less confusing now that i've split the dict into several

[12:18:49.0000] <TabAtkins>
zcorpan: Yeah, that's clearer.  I wonder if it's best to keep it as it is, or move the *Hor/Vert ones to the Element IDL block, where they're actually used?

[12:19:24.0000] <zcorpan>
TabAtkins: i thought about that also. i can move them if you think that's better

[12:19:51.0000] <TabAtkins>
I usually find it nice to see things defined where they're used, rather than having to puzzle about why the definition exists.

[12:25:06.0000] <zcorpan>
ok done, thanks

[12:25:31.0000] <TabAtkins>
No, thank you!

[12:28:45.0000] <zcorpan>
on a separate note, i wonder if it would be good to get some more people (relevant developers from non-gecko browsers) give their opinion about how setProperty should work

[12:29:07.0000] <TabAtkins>
Probably.

[12:30:51.0000] <zcorpan>
maybe i should file a bug about it and summarize the issue first

[12:33:26.0000] <zcorpan>
but not today

[12:38:38.0000] <zcorpan>
Hixie_: for https://www.w3.org/Bugs/Public/show_bug.cgi?id=22452 can't this be fixed by adding 'or <?xml-stylesheet?> PI' to http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#has-a-style-sheet-that-is-blocking-scripts

[12:38:50.0000] <zcorpan>
Hixie_: (ignoring Link: )

[12:38:59.0000] <Hixie_>
how would that help <?xml-stylesheet> in SVG?

[12:40:20.0000] <zcorpan>
does the SVG spec say to block on <script>?

[12:40:39.0000] <Hixie_>
no idea what it says

[12:41:38.0000] <zcorpan>
http://www.w3.org/TR/SVG2/script.html#ScriptElement

[12:41:59.0000] <zcorpan>
the annotations suggest they want to do whatever HTML does

[12:42:09.0000] <zcorpan>
so that's how it helps SVG :-)

[12:42:28.0000] <Hixie_>
if it was up to me we'd drop <?xml-stylesheet> entirely

[12:42:56.0000] <Hixie_>
but my point is it shouldn't be defined in two places

[12:43:00.0000] <zcorpan>
yeah, we'll see if it flies for XSLT

[12:43:00.0000] <Hixie_>
it should be defined in one place

[12:43:08.0000] <zcorpan>
if it does we could remove it for CSS also

[12:43:15.0000] <Hixie_>
if it was up to me we'd drop xslt entirely

[12:43:40.0000] <zcorpan>
that's what abarth is trying to do :-)

[12:43:46.0000] <Hixie_>
that's what i've heard

[12:49:48.0000] <Hixie_>
sweet kittens there's over 3000 lines of non-quoted material to read on this script preloading thread

[12:50:26.0000] <Hixie_>
78 pages if i print it!

[12:50:43.0000] <Hixie_>
http://damowmow.com/temp/script-preloading-thread-2013

[12:51:37.0000] <TabAtkins>
Yes, SVG wants to just do whatever HTML is doing.

[12:51:45.0000] <Hixie_>
2500 lines not counting blank lines

[12:52:08.0000] <Hixie_>
that's a small novel i gotta read on this

[12:52:23.0000] <Ms2ger>
Hixie_, might be impossible, but things that are impossible just take longer

[12:52:28.0000] <TabAtkins>
Please, novella at best.

[12:52:33.0000] <Hixie_>
definitely not impossible

[12:52:38.0000] <Hixie_>
TabAtkins: that's what a "small novel" is :-P

[12:52:49.0000] <TabAtkins>
Bah.

[12:53:07.0000] <Hixie_>
/me resists the temptation to just play Papers Please instead

[12:53:47.0000] <Hixie_>
wow, according to google only one person has ever written "It seems that people want something that:" on the Internet (me)

[12:53:56.0000] <Hixie_>
crazy

[12:54:40.0000] <Ms2ger>
http://forums.elementalgame.com/435414/page/2/#3263997 ?

[12:55:22.0000] <Hixie_>
Ms2ger: that's not quite the same (lower case "it", since it's not the start of a sentence)

[12:58:03.0000] <Philip`>
(Glory to Arstotzka!)

[13:01:00.0000] <zcorpan>
Hixie_: just use the test minimization procedure. remove half of the lines, see if the spec bug reproduces

[13:05:32.0000] <annevk>
Hixie_: did you look at HTML imports?

[13:06:45.0000] <Hixie_>
Philip`++

[13:07:06.0000] <annevk>
zcorpan: should really get rid of Link

[13:07:25.0000] <Hixie_>
zcorpan: half of the lines of the e-mails, or of the spec? cos i don't think either will work :-P

[13:07:29.0000] <Hixie_>
annevk: no

[13:08:06.0000] <annevk>
Hixie_: it seems to be happening, I recommend skimming through https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html at least

[13:08:19.0000] <Hixie_>
k

[13:08:23.0000] <zcorpan>
Hixie_: of the e-mails was my thinking :-)

[13:08:34.0000] <zcorpan>
annevk: get it removed in gecko

[13:08:39.0000] <Hixie_>
zcorpan: the spec bug occurs even with all the lines removed :-)

[13:08:52.0000] <zcorpan>
Hixie_: snap

[13:09:07.0000] <annevk>
Is Zip already exposed in the platform btw? I wonder what version of Zip we should require...

[13:09:45.0000] <zcorpan>
what do browsers support for extensions etc?

[13:10:40.0000] <annevk>
dunno

[13:10:51.0000] <annevk>
which reminds me, we also need a JavaScript API to go along with this

[13:11:04.0000] <annevk>
I'm thinking something that operates on a Blob...

[13:11:28.0000] <annevk>
new Zip(blob).get(filename).then(...)

[13:11:48.0000] <annevk>
new Zip(blob).getIndex().then(...)

[13:14:49.0000] <MikeSmith>
wha where did Link come from?

[13:14:54.0000] <MikeSmith>
old IE?

[13:20:07.0000] <annevk>
IETF

[13:20:22.0000] <annevk>
/me isn't actually sure

[13:20:26.0000] <MikeSmith>
ok

[13:21:37.0000] <zcorpan>
IE doesn't support it last i checked (dunno about newer IEs)

[13:22:40.0000] <zcorpan>
/me considers adding all the things François is asking for

[13:23:34.0000] <SimonSapin>
zcorpan: are implementers on board?

[13:24:09.0000] <zcorpan>
SimonSapin: nobody has commented one way or the other, i think

[13:25:15.0000] <zcorpan>
but it's trivial things that make sense to expose, really

[13:26:00.0000] <MikeSmith>
about zip, looked at some existing js libs to see how people do it now, and came across http://gildas-lormeau.github.io/zip.js/core-api.html, which looks interesting and good for what it is. API doesn't use promises but it does use workers and the File API.

[13:26:42.0000] <zcorpan>
it's just that the use case stated so far is polyfill and i'm not so comfortable adding new stuff to help with just polyfilling

[13:27:08.0000] <Domenic_>
people want zip badly

[13:27:18.0000] <Domenic_>
writing git in the browser is one use case iirc.

[13:27:23.0000] <Domenic_>
i will ask what the others were

[13:27:36.0000] <SimonSapin>
Domenic_: does git use zip files?

[13:28:29.0000] <Domenic_>
SimonSapin: I think so, perhaps inflate

[13:28:44.0000] <Domenic_>
16:28:14 <Raynos> Domenic_: ws.pipe(zip()).pipe(app).pipe(unzip()).pipe(ws)

[13:28:44.0000] <Domenic_>
16:28:21 <jesusabdullah> Domenic_: Because in my app I want to be able to download a zipball, crank that puppy open in-memory, let my app's users modify it, and then repackage it and ship it back up ^__^

[13:29:05.0000] <Domenic_>
16:28:49 <jesusabdullah> Domenic_: lots of native apps use zipballs as a sort of ad-hoc custom filetype

[13:29:14.0000] <Domenic_>
^ that's a big one, word document readers in the browser or whatnot.

[13:29:44.0000] <SimonSapin>
I agree zip is useful, but I believe not for implementing git

[13:29:59.0000] <Domenic_>
SimonSapin: I believe creationix is already using it

[13:31:28.0000] <SimonSapin>
the git protocol might use gzip

[13:32:01.0000] <Domenic_>
maybe it is just for downloading zipballs from github that he is using it, but i am 80% certain he is using a zip implementation.

[13:32:44.0000] <Domenic_>
http://git-scm.com/book/en/Git-Internals-Packfiles

[13:34:40.0000] <SimonSapin>
Domenic_: that’s gzip

[13:34:56.0000] <Domenic_>
SimonSapin: yeah probably. Or rather, zlib, of some sort.

[13:35:36.0000] <SimonSapin>
zip and gzip have in common the use of deflate compression, but gzip only applies to a stream of bytes while zip contains files and directories

[13:35:49.0000] <Domenic_>
I see

[13:36:23.0000] <Domenic_>
Well I think what people mostly want is gzip then; zipballs would be a nice convenience, but they are willing to parse out the zip format if necessary.

[13:36:40.0000] <Domenic_>
But the actual compression is what they want most, since it'll be faster natively.

[13:38:11.0000] <SimonSapin>
my understanding of what annevk is working on is to have URLs extract files from zip. eg <img src=foo.zip#path=image.png> (syntax still undecided)

[13:38:38.0000] <SimonSapin>
and secondarily expose a JS API, because why not

[13:38:43.0000] <Domenic_>
I see

[13:39:38.0000] <Philip`>
Domenic_: Sounds like people would actually want zlib, not gzip

[13:39:50.0000] <Philip`>
(gzip adds it own file headers which you normally don't want)

[13:40:21.0000] <Domenic_>
16:39:51 <dlmanning> A mobile webapp wants to compress a generated file for upload over limited bandwidth?

[13:40:27.0000] <annevk>
I suppose we could expose DEFLATE

[13:40:29.0000] <Domenic_>
Philip`: hmm, probably!

[13:40:56.0000] <annevk>
new Zip could even be explained in terms of that maybe... layers

[13:41:00.0000] <Philip`>
/me wonders if anyone has measured the performance of the inflate algorithm in JS

[13:41:13.0000] <Philip`>
(compared to a native implementation)

[13:41:24.0000] <SimonSapin>
sounds like something asm.js would be good at

[13:41:42.0000] <annevk>
Philip`: I think lack of that comparison is why we haven't shipped a native thingie yet

[13:53:25.0000] <Hixie_>
annevk: Link came from me getting plinss to implement it back in 1999~2000 or so :-(  https://bugzilla.mozilla.org/show_bug.cgi?id=3248 is the closest bug i could find

[13:53:47.0000] <Hixie_>
(actually, looks like plinss was gone by the time Link got implemented)

[13:54:28.0000] <Hixie_>
Link: for CSS is actually a pretty useful feature, since it lets you set a stylesheet site-wide without editing the pages involved

[14:16:17.0000] <annevk>
It's the only way to style a .txt

[14:16:25.0000] <annevk>
Or a .jpg, etc.

[14:16:38.0000] <annevk>
Thanks to the magic that is loading something in a browsing context...

[14:17:10.0000] <Ms2ger>
annevk, how about poking at the DOM of an iframe?

[14:17:26.0000] <annevk>
top-level browsing context*

[14:17:56.0000] <Ms2ger>
Better :)

[14:25:32.0000] <Domenic_>
style a .txt O_o

[14:25:43.0000] <Domenic_>
I guess I could see it.

[14:50:00.0000] <annevk>
Domenic_: http://annevankesteren.com/robots.txt

[14:50:22.0000] <annevk>
Domenic_: http://annevankesteren.com/favicon.ico is an image that's styled

[14:51:31.0000] <Domenic_>
annevk: nice :D. Firefox doesn't seem to like the .ico, but the robots.txt is ingenious.

[14:55:29.0000] <MikeSmith>
Hixie_: interesting (just read that bug about Link)

[14:58:55.0000] <annevk>
Domenic_: oh I forgot it's also recursive because of this: http://annevankesteren.com/dark.css

[14:59:26.0000] <annevk>
that's prolly the most fun example

[14:59:35.0000] <annevk>
CSS inception

[14:59:45.0000] <Hixie_>
the most fun i've had doing that was importing XBL with a Link:ed sheet

[14:59:56.0000] <Hixie_>
so you could make text/plain files interactive, e.g.

[15:00:38.0000] <annevk>
hehe, I doubt that's ever coming back given security, but yeah, that's pretty neat

[15:57:35.0000] <Hixie_>
is there documentation anywhere on module loading in JS?

[16:02:42.0000] <MikeSmith>
so (bikeshed alert/opportunity), I'd like to have more tests for the validator (mainly, more document-conformance test coverage of the HTML spec itself as opposed to SVG or whatever document-conformance tests ) and it seems like maintaining them in https://github.com/w3c/web-platform-tests would be a good way to help get that. But I'm wondering where. basically, either web-platform-tests/validation/html vs web-platform-tests/html/validation? (and so fo

[16:03:16.0000] <MikeSmith>
and maybe some word other than "validation", since that's used for other things too

[16:04:18.0000] <MikeSmith>
web-platform-tests/doc-conformance/html

[16:04:55.0000] <MikeSmith>
web-platform-tests/validator/html

[16:11:57.0000] <Hixie_>
MikeSmith: i'd use "conf-checkers", "conformance-checkers", or "validators", or something, probably. the point being to make it plural, to avoid confusion with other uses of the term "valid" in this context.

[16:12:40.0000] <MikeSmith>
Hixie_: ok yeah, good point

[16:14:26.0000] <MikeSmith>
I'll go with "conformance-checkers" since that's the exact term the spec uses

[16:14:27.0000] <TabAtkins>
Woo, Servo passes Acid 1! https://twitter.com/metajack/status/371041675633647616

[16:14:35.0000] <TabAtkins>
Just some text-rendering differences from the reference.

[16:14:53.0000] <Hixie_>
yeah i heard about that

[16:14:55.0000] <Hixie_>
impressive

[16:15:04.0000] <Hixie_>
only 15 more years of work to do :-)

[16:15:16.0000] <TabAtkins>
Yeah, but compressed. ^_^

[16:15:29.0000] <MikeSmith>
heh

[16:15:55.0000] <Hixie_>
actually there's more than just text-rendering differences

[16:16:01.0000] <Hixie_>
it also doesn't seem to have rendered the radio buttons...

[16:16:11.0000] <Hixie_>
that's less impressive

[16:16:19.0000] <gsnedders>
TabAtkins: And really it's the whole site compat issue that's the challenge.

[16:16:36.0000] <gsnedders>
There are known parts of the platform that are incompatible as spec'd.

[16:16:41.0000] <gsnedders>
(Document loading, for example)

[16:16:50.0000] <Hixie_>
gsnedders: that should be a lot less of a problem than it was 10 years ago

[16:16:57.0000] <Hixie_>
still big, but not as big

[16:17:01.0000] <gsnedders>
Hixie_: Well, yes.

[16:17:35.0000] <gsnedders>
Hixie_: But the pace of development of the platform is far quicker than a decade ago, so managing to sort out site compat issues while keeping up with competition is far harder.

[16:17:44.0000] <Hixie_>
fair enough

[16:18:01.0000] <Hixie_>
do you think we'll have teh specs sorted out before or after servo catches up to that? :-)

[16:18:21.0000] <gsnedders>
We'll sort them out because of Servo hitting incompatibilies with the specs.

[16:18:46.0000] <gsnedders>
I really, really want to see Servo succeed, as it would be the proof that all this work in getting specs to match reality has actually worked.

[16:19:03.0000] <TabAtkins>
And when Servo starts seriously doing table rendering, FOR GODS SAKES HAVE SOMEONE WRITE THE TABLE RENDERING SPEC BASED ON YOUR EXPERIENCES.

[16:19:22.0000] <Hixie_>
gsnedders++

[16:19:29.0000] <Hixie_>
TabAtkins: hah

[16:19:30.0000] <TabAtkins>
We missed having MS do that when they rewrote their table code for IE8, and it's not going to happen until another browser does a rewrite.

[16:19:32.0000] <gsnedders>
Hixie_: I presume you dealt with all of jgraham's feedback on the document loading stuff from Zombie-Presto?

[16:19:41.0000] <MikeSmith>
Shiki Okasaka seems to have managed to implement a lot without running into huge spec-incompatibility issues

[16:19:50.0000] <Hixie_>
gsnedders: it's either dealt with or in the queue

[16:19:59.0000] <gsnedders>
Hixie_: I could've guessed that!

[16:20:15.0000] <Hixie_>
i don't know which were jgraham's and which where bz's

[16:20:18.0000] <Hixie_>
bz filed a bunch too

[16:20:19.0000] <gsnedders>
:)

[16:20:24.0000] <Hixie_>
some are definitely not yet resolved

[16:20:31.0000] <Hixie_>
i moved from bugs to e-mail before finishing them

[16:21:05.0000] <gsnedders>
jgraham filed a lot when we were rewriting the document loading code based on that. It obviously didn't work with real sites, and in the end never got far enough to ship before Presto-Death.

[16:21:59.0000] <MikeSmith>
"At this point, Escort web browser implements CSS 2.1 specification relatively well and passes the Acid2 test. It also passes about 90% of the tests in the CSS2.1 Conformance Test Suite." https://code.google.com/p/es-operating-system/wiki/UsingEscort

[16:22:13.0000] <gsnedders>
(In other news, why am I bothering arguing with people on Reddit saying the British railways should be renationalized?)

[16:22:27.0000] <Hixie_>
gsnedders: i don't recall the problems being that severe. there were issues, certainly, but it wasn't like it needed a complete rewrite.

[16:22:27.0000] <gsnedders>
MikeSmith: But how does it do given, say, the long tail of websites?

[16:22:42.0000] <Hixie_>
gsnedders: rail or rolling stock?

[16:22:50.0000] <gsnedders>
Hixie_: Severe enough it was totally unshippable.

[16:22:51.0000] <MikeSmith>
gsnedders: dunno

[16:22:55.0000] <gsnedders>
Hixie_: TOCs

[16:23:22.0000] <Hixie_>
gsnedders: so rolling stock?

[16:23:22.0000] <gsnedders>
Hixie_: And ROSCOs

[16:23:52.0000] <gsnedders>
Hixie_: (rolling stock is owned by a different set of companies (ROSCOs) than those that run the services (TOCs))

[16:24:03.0000] <Hixie_>
that's messed up

[16:24:18.0000] <MikeSmith>
(https://github.com/esrille/escudo/tree/master/src/css for the curious)

[16:24:46.0000] <Hixie_>
the track being publicly owned makes sense, but the rest, meh, let them compete in the open market

[16:25:05.0000] <MikeSmith>
(he's working now on implementing media queries - https://github.com/esrille/escudo/commits/master/src/css)

[16:25:27.0000] <Hixie_>
(not much point have the track be publicly owned if e.g. water and fiber isn't, though. either have public utilities or private ones, why mess around with half-and-half.)

[16:25:58.0000] <gsnedders>
Hixie_: The big problem in the UK is the absolute lack of competition between the private companies — they have state-given monopolies for a decade at a time. That's what kills the whole thing.

[16:26:11.0000] <Hixie_>
monopolies are dumb.

[16:26:14.0000] <gsnedders>
The train operating companies (TOCs).

[16:26:23.0000] <Hixie_>
state-supported ones, i mean.

[16:26:30.0000] <gsnedders>
Hence it was better under a state-owned monopoly as there was less interest in profits.

[16:26:38.0000] <Hixie_>
making competition illegal is just silly.

[16:26:48.0000] <Hixie_>
yeah.

[16:26:50.0000] <TabAtkins>
You mean "lucrative".

[16:26:57.0000] <gsnedders>
It's not.

[16:27:00.0000] <TabAtkins>
And "a valid patriotic business practice"

[16:27:07.0000] <gsnedders>
They pay foot-and-leg for the franschies.

[16:27:21.0000] <Hixie_>
better than paying arm-and-leg, i guess

[16:27:31.0000] <Hixie_>
since with arm-and-leg pricing, your foot ain't much use anymore anyway

[16:27:33.0000] <gsnedders>
That's the right expression, dangnamit!

[16:28:41.0000] <gsnedders>
I think, but am not sure, that the whole passenger stock being owned by separate companies is part of one of the EU railway directives.

[16:28:53.0000] <gsnedders>
In theory to make it easier for companies to start running services.

[16:29:07.0000] <gsnedders>
Of course, in the British case, as enacted, they have monopolies so it doesn't make it easier.

[16:30:23.0000] <Hixie_>
wait, so, Virgin doesn't own the rolling stock that uses their trade mark?

[16:30:40.0000] <Hixie_>
who owns the rolling stock for freight transport?

[16:31:41.0000] <gsnedders>
Hixie_: No, they don't. I'm not sure of the exact contracts between the TOCs and the RSOCOs, though. As far as I can tell, each franchise has a dedicated stock allocated to it, that will therefore change from one TOC to another if the franchise changes hand.

[16:32:02.0000] <Hixie_>
that's absurd

[16:32:24.0000] <gsnedders>
The franchises vary from, say, West Coast, East Coast, Cross-Country, Midland Mainline, Scotland, South Western…

[16:32:37.0000] <gsnedders>
The freight rolling stock is mostly owned by the frieght operators.

[16:32:47.0000] <Hixie_>
so why the difference between freight and passengers?

[16:32:51.0000] <gsnedders>
Which nowadays is in large part DB Schenker

[16:32:56.0000] <gsnedders>
(sp?)

[16:32:58.0000] <Hixie_>
freight's more interesting anyway.

[16:33:21.0000] <gsnedders>
Honestly, I don't know.

[16:33:49.0000] <Hixie_>
i really want to get http://www.maerklin.de/produkte/frontend/index.php?artikel_nr=37794&anzeigen_y=1&sCountryCode=en

[16:33:57.0000] <Hixie_>
which is admittedly a passenger train

[16:34:05.0000] <gsnedders>
DB Schenker has expanding massively since the liberialization of the European freight market.

[16:34:10.0000] <gsnedders>
*expanded

[16:34:13.0000] <Hixie_>
but while it would look cool, it's just not as fun as operating freight

[16:34:48.0000] <gsnedders>
Heh. I'm somewhat tempted to try and build something along the lines of LGV Est given the space.

[16:34:59.0000] <Hixie_>
good luck

[16:35:09.0000] <gsnedders>
(Is your stuff still in Oslo, or finally moved it? :))

[16:35:13.0000] <Hixie_>
it's ridiculous how much space you need to do something semi-realistic

[16:35:20.0000] <Hixie_>
my stuff moved with me when i left

[16:35:27.0000] <Hixie_>
but it's finally out on a table :-)

[16:35:40.0000] <gsnedders>
Oh. I had some memory of it being stuck behind somewhere. :)

[16:44:29.0000] <Hixie_>
bbiab


2013-08-24
[01:54:22.0000] <annevk>
Hixie_: missed your modules question last night

[01:54:47.0000] <annevk>
Hixie_: http://wiki.ecmascript.org/doku.php?id=harmony:modules

[05:47:26.0000] <annevk>
Lets try this again. If we put Zip in the browser, what subset? Anyone know a good place to start asking this question?

[07:18:32.0000] <zewt>
annevk: as one limitation, i'd suggest random access mode only, not streaming--zip supports both, but they tend to want very different APIs

[07:23:38.0000] <zewt>
probably limit to store and deflate, ignoring legacy compressors (implode) and less widely supported ones

[07:27:14.0000] <annevk>
Requiring Zip64 seems like a good idea too. It probably depends on how this is going to be implemented. From scratch or using an existing library of sorts.

[07:27:20.0000] <zewt>
yeah i was going to say that

[07:27:25.0000] <zewt>
(zip64)

[07:27:38.0000] <zewt>
i don't think existing libraries matter

[07:27:47.0000] <zewt>
except for the deflate part

[07:28:17.0000] <zewt>
(which everyone has already anyway)

[07:30:57.0000] <zewt>
hmm, encoding for filenames is a tricky one

[07:32:03.0000] <zewt>
i don't think there's any standardization or anything in the file format whatsoever, which might mean having to say "must be utf-8, even though that dosen't match major clients"

[07:32:04.0000] <zewt>
(though i think that's what you happen-to-get with zip tools in *nix)

[07:32:35.0000] <zewt>
winrar assumes filenames are the local codepage, at least

[07:33:49.0000] <zewt>
7-zip figures out utf-8 filenames in existing zips (probably heuristic) but encodes to the codepage

[07:34:25.0000] <zewt>
(heuristic since it seems to work with both utf-8 and codepage zips, in a quick test)

[07:36:00.0000] <zewt>
would somebody be writing a modern spec for the file format? the zip "appinfo" is actually really good for its time, but it doesn't define error handling, or end of central record searching

[07:37:20.0000] <Philip`>
http://www.w3.org/TR/widgets/#interoperability-considerations mentions some fun things about zips

[07:38:05.0000] <zewt>
oh there's an encoding flag? cool, wasn't aware of that

[07:38:37.0000] <zewt>
(not sure if it really helps, if other implementations don't use it)

[07:39:36.0000] <zewt>
i don't buy the "forbidden characters" thing, i think the whole "file names" section is bogus

[07:40:07.0000] <zewt>
if you have those characters then you can't extract them to native files in windows, that's all

[07:40:51.0000] <Ms2ger>
Oh, yes, unicode isn't exactly obvious with zips, I guess

[07:41:00.0000] <Ms2ger>
/me repressed that

[07:42:57.0000] <Ms2ger>
annevk, istr that omni.ja uses not-so-widely-supported features, might want to see what that all's about

[07:43:52.0000] <zewt>
crc checking is unobvious

[07:44:20.0000] <zewt>
it's tricky to fit into apis, since you only know if it's failed after you've read the whole file; maybe better to just explicitly ignore it

[07:45:19.0000] <zewt>
(otherwise an otherwise simple "blob = zip.getFile('foo')" API becomes weird)

[07:49:24.0000] <zewt>
annevk: are you thinking a ZIP API, or still trying to find a way to make zip URLs work?

[08:43:57.0000] <MikeSmith>
Ms2ger: I'm thinking of creating https://github.com/w3c/web-platform-tests/conformance-checkers for managing documents to test the validator

[08:44:03.0000] <MikeSmith>
good idea? bad idea?

[08:45:26.0000] <Ms2ger>
MikeSmith, doesn't it make more sense to put them under html/? (the ones for requirements in html, at least)

[08:46:35.0000] <MikeSmith>
yah but alternately makes sense to do conformance-checkers/html, conformance-checkers/svg etc.

[08:47:24.0000] <MikeSmith>
and that way we have all of them under one "conformance-checkers" root

[08:47:55.0000] <MikeSmith>
since they are different kinds of the tests than the browsers tests that are in the other dirs

[08:48:42.0000] <MikeSmith>
but I don't mind it either way

[08:49:06.0000] <Ms2ger>
I was thinking "what doesn't fit in this line: dom html IndexedDB navigation-timing conformance-checkers"

[08:49:21.0000] <Ms2ger>
But I guess that works too

[08:49:38.0000] <Ms2ger>
Maybe jgraham will suggest a filename convention

[08:50:52.0000] <MikeSmith>
yeah he does like his filename conventions

[08:51:19.0000] <MikeSmith>
I have one simple one already: foo.notvalid.html for tests that are intentionally invalid

[08:52:22.0000] <Ms2ger>
(I would suggest a manifest, of course)

[09:15:47.0000] <annevk>
zewt: format is relevant for both, and I think we want both

[09:17:53.0000] <annevk>
zewt: I'd like to avoid defining a format, but if we have to...

[09:46:42.0000] <gsnedders>
MikeSmith: +1 for a conformance-checkers root

[09:50:15.0000] <MikeSmith>
gsnedders: k

[09:51:16.0000] <gsnedders>
(Why? Because it keeps it out of the way for the more common use-case)

[09:53:54.0000] <MikeSmith>
right, that's part of what I was thinking too


2013-08-25
[17:03:06.0000] <Domenic_>
annevk: the way I see it you want raw deflate algorithm operating on ArrayBuffers, and then a nice convenience zip API on top of it that can make assumptions about formats and modes.

[17:03:59.0000] <Domenic_>
annevk: the convenience API should be able to open common renamed-zip formats like .docx; not sure what zip variant they use, but I imagine it provides a good outer limit on reasonable-things-to-support.

[17:04:51.0000] <annevk>
Yeah, should probably look into that...

[17:09:23.0000] <Domenic_>
getting deflate out the door fast though would bring many smiles to the world

[17:36:52.0000] <Domenic_>
annevk: why does https://github.com/annevk/url have issues turned off?

[17:37:24.0000] <annevk>
not sure

[17:38:10.0000] <annevk>
will have a look tomorrow, way tired

[17:38:27.0000] <Domenic_>
annevk: ok, will email you failing test case then?

[17:38:43.0000] <annevk>
sure

[20:06:35.0000] <heycam>
TabAtkins, did you switch Variables to your new spec generator? the "«token»"s show now as "<<token>>".

[02:52:54.0000] <Ms2ger>
krijn, logs seem to be stuck?

[03:28:26.0000] <krijn>
Ms2ger: on it!

[03:28:39.0000] <Ms2ger>
Thanks

[03:31:38.0000] <krijn>
Thanks for noticing

[03:33:11.0000] <Ms2ger>
Np

[05:46:04.0000] <annevk>
matijs: I recommend finding the answers to questions in specifications, not mailing lists ;)

[05:46:18.0000] <annevk>
matjas: ^^

[05:46:38.0000] <annevk>
your nicks are confusingly similar

[05:47:25.0000] <matjas>
annevk: what mail in particularare you referring to?

[05:47:44.0000] <annevk>
matjas: latest tweet

[05:48:31.0000] <matjas>
annevk: ah, good point, as always :)

[05:49:50.0000] <annevk>
matjas: if you use a BOM, which is kinda icky, your JS would be fully portable. If you use utf-8 all the time (including in your HTML), it's portable within your set of sites

[05:50:21.0000] <annevk>
matjas: otherwise you need to involve either <script charset> (eww) or HTTP (annoying)

[05:50:43.0000] <matjas>
i know

[05:50:53.0000] <matjas>
my point was that JS library authors have no way of knowing in which environments their code will end up

[05:51:14.0000] <matjas>
so going ASCII-only is probably the safest bet

[05:52:14.0000] <annevk>
It seems JavaScript could introduce a "utf-8" directive as the first thing in the file

[05:52:25.0000] <matjas>
like, d3.js (a popular dataviz library) has `var π = Math.PI` in its source, and every few weeks someone complains about “encoding issues” in their issue tracker

[05:52:32.0000] <annevk>
for easier editing than the utf-8 BOM

[05:52:55.0000] <annevk>
it's somewhat backwards compatible in that it doesn't throw and would definitely improve matters going forward

[05:53:05.0000] <matjas>
directives suck, though

[05:53:21.0000] <annevk>
what's the problem?

[05:53:55.0000] <matjas>
2008: // nothing

[05:54:01.0000] <matjas>
2009 (ES5): 'use strict'

[05:54:13.0000] <matjas>
2014: 'use strict'; 'use utf-8';

[05:54:29.0000] <annevk>
I think "use strict" is regarded as a mistake

[05:54:59.0000] <annevk>
and "utf-8" is not really like "use strict", it's more how to decode the source, like @charset

[05:55:25.0000] <matjas>
would’ve been cool if 'use strict' implied utf-8, though

[05:55:27.0000] <annevk>
anyway, I guess it hasn't really been needed thus far, might not be worth it

[05:55:33.0000] <matjas>
but too late for that i guess

[05:55:49.0000] <annevk>
yeah, workers imply utf-8

[05:55:55.0000] <annevk>
but not use strict

[05:56:05.0000] <matjas>
xhr.responseType='json' too

[05:56:09.0000] <annevk>
we should make modules imply utf-8

[05:56:11.0000] <matjas>
which is pretty awesome

[05:56:16.0000] <annevk>
yes

[05:56:18.0000] <matjas>
yeah!

[05:56:27.0000] <annevk>
I force utf-8 everywhere

[05:56:42.0000] <annevk>
it's like a side mission in Zelda

[05:57:04.0000] <matjas>
out of curiosity, has no one complained about not supporting other encodings for `responseType='json'` since you specced it in 2011?

[05:57:36.0000] <matjas>
would be surprising, as there is no reason at all to not use UTF-8

[05:58:19.0000] <annevk>
haven't had complaints yet

[05:58:31.0000] <annevk>
note that XHR send() also forces utf-8

[05:59:56.0000] <annevk>
bbl

[11:09:56.0000] <TabAtkins>
heycam: Yes, I did, but I last bikeshedded it before I had syntax support for token references.

[11:35:50.0000] <TabAtkins>
heycam|away: All fixed up now, and your bugs in the list fixed as well.

[15:52:47.0000] <heycam>
TabAtkins, cool

[15:53:59.0000] <heycam>
(I got my quote style wrong yesterday in irc)


2013-08-26
[21:58:12.0000] <MikeSmith>
kochi1: I only just now finally had a chance to looks at your slides

[21:58:16.0000] <MikeSmith>
they look great

[21:58:26.0000] <MikeSmith>
the screenshots are great

[21:58:33.0000] <MikeSmith>
I think you'll be fine

[22:02:47.0000] <TabAtkins>
heycam: Yeah, but the token characters are just single guillemets, so you were close enough. ^_^

[22:03:08.0000] <heycam>
all these different angle-looking brackets to get confused betwee :)

[22:03:10.0000] <heycam>
*between

[02:31:51.0000] <annevk>
ah shit, missed heycam

[05:12:57.0000] <Ms2ger>
zcorpan, if you ever are looking for something to test, I'd love to see what you'd come up with for the named getter on form / form.elements

[05:13:46.0000] <zcorpan>
Ms2ger: i've probably written tests for named getters on document and window, but maybe not on form

[05:36:42.0000] <Ms2ger>
Anyone with IE?

[05:37:18.0000] <Ms2ger>
Would be interested in its behaviour on http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2484

[05:40:52.0000] <gsnedders>
Are there really no tests for document.cookie?

[05:45:17.0000] <Ms2ger>
Hrm, didn't I create a PR for https://github.com/Ms2ger/web-platform-tests/compare/form-named-item ?

[05:46:15.0000] <Ms2ger>
Or did I

[05:46:50.0000] <Ms2ger>
https://github.com/w3c/web-platform-tests/pull/111

[05:47:07.0000] <Ms2ger>
So, r? zcorpan gsnedders jgraham :)

[05:47:31.0000] <gsnedders>
If you tell me whether or not there are really no document.cookie tests?

[05:47:41.0000] <Ms2ger>
Where?

[05:47:50.0000] <gsnedders>
On web-platofmr-tests

[05:48:27.0000] <Ms2ger>
I see some

[05:48:34.0000] <gsnedders>
There are a few, but only indirectly

[05:48:59.0000] <Ms2ger>
Some about sandboxed iframes

[05:49:11.0000] <gsnedders>
And otherwise mostly used for the sake of implementing the tests.

[05:49:19.0000] <Ms2ger>
Some for websockets and eventsource

[05:50:46.0000] <Ms2ger>
./XMLHttpRequest/responsexml-document-properties.htm

[05:51:03.0000] <Ms2ger>
./old-tests/submission/W3C/domhtml/HTMLDocument12.html

[05:51:11.0000] <Ms2ger>
And that's about it

[05:57:33.0000] <gsnedders>
Someone should write some.

[05:58:28.0000] <Ms2ger>
Yeah, someone

[05:58:35.0000] <zcorpan>
get on it already, someone!

[05:58:56.0000] <gsnedders>
Someone is such a slacker.

[05:59:20.0000] <Ms2ger>
gsnedders, so I told you ;)

[05:59:34.0000] <zcorpan>
watcha waitin watcha waitin watcha waitin watcha waitin watcha waitin watcha waitin foooor?!

[05:59:48.0000] <gsnedders>
Ms2ger: I didn't say I would straight away. ;)

[06:01:09.0000] <zcorpan>
Ms2ger: critic link?

[06:01:32.0000] <Ms2ger>
/me tries to get one

[06:02:03.0000] <Ms2ger>
Ah, https://critic.hoppipolla.co.uk/r/116

[06:02:13.0000] <Ms2ger>
Oh, jgraham reviewed it

[06:02:34.0000] <Ms2ger>
/me looks at his comments

[06:09:17.0000] <Ms2ger>
jgraham, addressed your comments

[06:19:52.0000] <zcorpan>
ok, in css spirit, please bikeshed https://www.w3.org/Bugs/Public/show_bug.cgi?id=23066

[06:29:52.0000] <hsivonen>
Ms2ger: I find it amusing that https://bugzilla.mozilla.org/show_bug.cgi?id=909188 was about the daily WTF

[06:31:17.0000] <Ms2ger>
Ha

[06:31:24.0000] <Ms2ger>
I hadn't even noticed that

[06:31:53.0000] <Ms2ger>
zcorpan, contrary to popular belief, bz and dbaron are different people

[06:34:41.0000] <zcorpan>
Ms2ger: yeah. i wonder if i have misattributed earlier without noticing. i seem to store them in the same bucket in my head. :-/

[06:34:55.0000] <Ms2ger>
How about roc?

[06:35:07.0000] <zcorpan>
no he has a bucket of his own

[06:41:21.0000] <Ms2ger>
Oh, I guess the Brits take today off for some reason

[06:58:44.0000] <matjas>
hsivonen: re: http://mathiasbynens.be/notes/etago#comment-8, as long as the string literal is closed correctly, is `<!--` really harmful?

[06:59:26.0000] <matjas>
i.e. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2485 seems safe

[06:59:41.0000] <matjas>
as long as the closing `"` is there

[07:15:42.0000] <gsnedders>
Ms2ger: s/Brits/English/

[07:15:57.0000] <gsnedders>
Ms2ger: "Summer Bank Holiday (Not Scotland)"

[07:15:57.0000] <Ms2ger>
gsnedders, apologies

[07:16:09.0000] <gsnedders>
So actually s/Brits/English, Welsh, and Northern Irish/

[07:16:44.0000] <Ms2ger>
/me is left wondering if the republicans in NI can take the day off

[07:21:37.0000] <gsnedders>
They probably use it to protest or something

[08:00:52.0000] <baku>
question about MessagePort: there are 2 flags: shipped and messagePortEnabled. shipped is set to true when the port is cloned. messagePortEnabled is set to true when start() is called. It's not clear to me what happens when: shipped=true and messagePortEnabled=false, shipped=false and messagePortEnabled=true, shipped=false and messagePortEnabled=false

[08:11:17.0000] <annevk>
zcorpan: ^^

[08:12:47.0000] <zcorpan>
baku: shipped is only relevant for determining which task source to use

[08:13:23.0000] <baku>
zcorpan, so in which queue stores the task. is it?

[08:13:43.0000] <baku>
s/stores/to store/

[08:13:56.0000] <zcorpan>
baku: e.g. if you create several MessageChannels in a document and post lots of messages on them, they all use the same task source so they are processed in the same order as posted

[08:14:22.0000] <zcorpan>
baku: but if you pass on the ports to other documents they use separate task sources so order is not guaranteed

[08:16:21.0000] <zcorpan>
matjas: your test case doesn't demonstrate the problem. also, behavior differs in pre-HTML5-parser browsers

[08:17:54.0000] <baku>
zcorpan, so, if a MessagePort is shipped (==cloned) the messages are enqueued to its port message queue.

[08:18:00.0000] <zcorpan>
matjas: it has nothing to do with the "

[08:18:13.0000] <baku>
zcorpan, otherwise we have to use this unshipped port message queue that is per event loop.

[08:18:49.0000] <zcorpan>
baku: yeah. although it's not quite 'per event loop'

[08:19:35.0000] <baku>
well.. this is what the spec says :) 'Each event loop has a task source called the unshipped port message queue'

[08:20:19.0000] <zcorpan>
oh. maybe you're right then :-)

[08:20:28.0000] <baku>
zcorpan, but I don't understand the porpoise ofthis unshipped port message queue and when it should be used.

[08:20:55.0000] <baku>
zcorpan, I mean, I understand when elements are appended, but it's not clear when I should use its content.

[08:22:41.0000] <zcorpan>
baku: before the spec used separate task sources for all ports, but then people started using lots of MessageChannels within a single document as a poor man's setImmediate(), and so the spec had a problem that the order was not guaranteed

[08:26:09.0000] <zcorpan>
matjas: e.g. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2486

[08:26:39.0000] <matjas>
zcorpan: yeah, but at that point it’s not part of a string literal anymore

[08:27:09.0000] <zcorpan>
matjas: not relevant. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2487

[08:27:52.0000] <matjas>
zcorpan: but http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2489 is safe

[08:28:22.0000] <matjas>
so, it seems that as long as </script> is escaped as <\/script> (or similar), there’s no need to escape <!-- if it’s to be injected as part of a string literal

[08:28:32.0000] <zcorpan>
matjas: only in browsers with html5 parser

[08:28:49.0000] <matjas>
zcorpan: ah, so _that_’s the gotcha

[08:28:58.0000] <matjas>
thanks!

[08:29:29.0000] <zcorpan>
matjas: e.g. http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2490 would make old browsers treat the whole thing as a big script

[08:29:45.0000] <zcorpan>
(if the last script end tag is missing they reparse)

[08:31:00.0000] <matjas>
confirmed, http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2489 displays the alert in e.g. Firefox 2

[08:31:06.0000] <zcorpan>
matjas: since it's easy to get a confusing result even in html5-parser browsers, the html spec makes unmatched <!-- an error

[08:32:03.0000] <zcorpan>
which v.nu checks

[08:32:52.0000] <matjas>
cool

[09:39:27.0000] <dglazkov>
good morning, Whatwg!

[09:39:52.0000] <Ms2ger>
Good evening

[09:43:25.0000] <jannis_1>
Good evening!

[09:45:10.0000] <TabAtkins>
heycam|away: The confusion is why there's a markup shortcut for tokens if you use bikeshed - <<<foo>>> generates a token link with the appropriate brackets.

[10:44:20.0000] <smaug____>
so how is "unshipped port message queue" supposed to work

[10:45:59.0000] <smaug____>
say there are two channels A and B, and ports a1, a2, b1, b2. Then one does a1.postMessage(...), b2.onmessage = function() {}; b2.postMessage(...);

[10:46:08.0000] <smaug____>
er, b1.postMessage()

[10:46:24.0000] <smaug____>
so b2 should get the message

[10:46:44.0000] <smaug____>
but what ends up to the "unshipped port message queue" ?

[10:47:16.0000] <smaug____>
what happens to the message posted to a1?

[10:47:19.0000] <smaug____>
Hixie_: ^

[10:48:05.0000] <Hixie_>
what's the relationship between a and b?

[10:48:13.0000] <Hixie_>
like, why does b affect a at all?

[10:49:03.0000] <Hixie_>
all the unshipped port message queue does is make sure that messages on channels that haven't been sent through channels are delivered in relative order

[10:49:13.0000] <smaug____>
Hixie_: well, the spec says "Each event loop has a task source called the unshipped port message queue. "

[10:49:47.0000] <smaug____>
relative to what?

[10:50:06.0000] <Hixie_>
to other things in that queue

[10:50:38.0000] <smaug____>
Hixie_: so, if there is just one document/browsing context, there is one unshipped port message queue

[10:50:49.0000] <smaug____>
when does something end up to that queue?

[10:50:57.0000] <Hixie_>
right

[10:51:11.0000] <Hixie_>
it means that when you do a1.postMessage(); b1.postMessage();, you first fire a message at a2, and then you fire a message at b2. you never fire on b2 before a2.

[10:51:28.0000] <Hixie_>
this isn't guaranteed once you have shipped, say, b2 across a1 to a2.

[10:51:31.0000] <smaug____>
ahaa, so if a2 is never started, b2

[10:51:36.0000] <smaug____>
never gets the message

[10:51:41.0000] <Hixie_>
what? no

[10:52:09.0000] <smaug____>
I'm trying to understand why not

[10:52:35.0000] <smaug____>
(note, I care only about the case when nothing is shipped)

[10:53:03.0000] <Hixie_>
looks like the spec is buggy in the case of unstarted ports

[10:53:14.0000] <baku>
another unclear stuff is what about if the port is sent to the same window: window.postMessage(a.port1); do we consider it as shipped?

[10:53:15.0000] <smaug____>
baku: ^

[10:53:27.0000] <baku>
because we are still in the same document/browsing context.

[10:53:44.0000] <Hixie_>
baku: "shipped" is clearly defined -- you only consider something shipped once you run a step that says "Set new port's has been shipped flag to true"

[10:56:01.0000] <baku>
Hixie_, right. but what is not clear to me is that: the unshipped port message queue is used to keep messages in order when they are 'dispatched' in the same event loop/browser context. shipped flag is set to true when the port is cloned.

[10:56:16.0000] <Hixie_>
smaug____: ok, fixed. the unshipped port message queue ignores disabled port message queues.

[10:56:29.0000] <smaug____>
ok, thanks

[10:56:30.0000] <baku>
so it means that, cloning a port changes the queue for the messages also when the event loop/browser context doesn't change.

[10:56:42.0000] <Hixie_>
smaug____: good catch, thank _you_!

[10:56:49.0000] <Hixie_>
baku: yes

[10:57:03.0000] <Hixie_>
baku: the idea is that you don't know if the message channel you're sending the port through goes to the same event loop or not

[10:57:20.0000] <Hixie_>
baku: so you should be ready for the order to get unreliable either way

[10:57:36.0000] <baku>
Hixie_, ok

[10:57:45.0000] <Hixie_>
baku: in particular, some implementations turn all channels that have ever gone through another channel into a channel to a different "grand central station" thread

[10:57:52.0000] <Hixie_>
baku: so they actually can't guarantee order at that point anyway

[10:58:13.0000] <Hixie_>
(once you can cross threads, managing the messages when the end-points are flying around as well becomes kind of tricky)

[10:58:38.0000] <Hixie_>
(you either want a central dispatch thread to manage it, or you need to start setting up redirects to catch late messages)

[10:58:49.0000] <baku>
Hixie_, sure

[10:59:58.0000] <Hixie_>
note that once a message port's queue gets enabled, the relative order of messages does come back into play

[11:00:26.0000] <Hixie_>
so e.g.  b2.start(); a1.postMessage(); b1.postMessage(); a2.start(); delivers a's message before b's.

[11:00:43.0000] <Hixie_>
you just silently ignore the disabled ones until it's started

[11:03:41.0000] <Hixie_>
smaug____: also moved some paragraphs around to try to make that area clearer.

[11:03:52.0000] <smaug____>
k

[11:04:00.0000] <smaug____>
will, re-read when reviewing the patch

[13:02:17.0000] <MikeSmith>
anybody have a clue why the following document would be causing a fatal parse error in the validator?

[13:02:21.0000] <MikeSmith>
http://w3c-test.org/web-platform-tests/master/html/semantics/forms/the-form-element/form-elements-nameditem-02.html

[13:03:05.0000] <MikeSmith>
http://validator.w3.org/nu/?doc=http://w3c-test.org/web-platform-tests/master/html/semantics/forms/the-form-element/form-elements-nameditem-02.htmla

[13:03:20.0000] <MikeSmith>
http://validator.w3.org/nu/?doc=http://w3c-test.org/web-platform-tests/master/html/semantics/forms/the-form-element/form-elements-nameditem-02.html

[13:03:49.0000] <Ms2ger>
Heh, I know that test

[13:04:18.0000] <Ms2ger>
Streaming

[13:05:27.0000] <Ms2ger>
MikeSmith, try <table><input></table>

[13:08:05.0000] <MikeSmith>
Ms2ger: ok

[13:08:27.0000] <MikeSmith>
the validator fails on it without indicating what the cause was

[13:08:48.0000] <Ms2ger>
The DOM you need is <input><table></table>

[13:09:18.0000] <Ms2ger>
But once you streamed the start of the table, you can't do that anymore

[13:09:48.0000] <MikeSmith>
I see

[13:18:13.0000] <zcorpan>
yeah, v.nu's parser is configured to fatal error on errors that require doing stuff that are already streamed

[13:19:10.0000] <zcorpan>
e.g. </head><!----><link> or <body><body foo> or <table>x

[13:19:43.0000] <zcorpan>
(i guess the comment isn't required)

[13:32:53.0000] <Hixie_>
wycats: yt?

[13:39:17.0000] <Hixie_>
anyone have a pointer to the latest thinking on ES6 modules?

[13:59:09.0000] <Hixie_>
does anyone know how es6 module loading interacts with synchronous reentrant script execution?

[14:03:12.0000] <wycats>
Hixie: I'm here

[14:03:19.0000] <Hixie_>
wycats: hey

[14:03:38.0000] <Hixie_>
wycats: originally i was going to say "please don't call ondemand that, it sounds like an event handler"

[14:03:50.0000] <Hixie_>
wycats: but now i have so many more questions about es6 modules and module loading

[14:03:57.0000] <wycats>
ES6 module imports are always async (except during sync eval, when they must be importing modules that are already in the registry)

[14:04:20.0000] <wycats>
And we're not going to call it on demand; it's an intentionally absurd name so we fix it before shipping

[14:04:35.0000] <Hixie_>
wycats: so what happens if you document.appendChild() an inline script that attempts to import something that's not loaded?

[14:04:45.0000] <wycats>
Syntax error

[14:05:24.0000] <Hixie_>
where would that be defined? do i have to say something in HTML to the effect of "this kind of script load is not allowed to be async", or do you automatically figure it out from the way there's JS on the stack?

[14:05:35.0000] <Hixie_>
i mean, at the spec level

[14:05:49.0000] <wycats>
the loader hooks are eval and evalAsync

[14:06:18.0000] <wycats>
So you'd want to decide which of those hooks to use from any given place in HTML

[14:06:27.0000] <Hixie_>
oh, i'm supposed to be invoking those from the html spec somehow?

[14:06:31.0000] <Hixie_>
interesting

[14:07:02.0000] <wycats>
The spec language for this is coming shortly

[14:07:09.0000] <Hixie_>
how about the fetching, is the interaction with HTTP done straight from JS, or will there be a hook i can use to say "use fetch.spec.whatwg.org" ?

[14:07:19.0000] <wycats>
The loader API really tightens up the semantics

[14:07:56.0000] <wycats>
The browser loader will define what its fetch hook does

[14:08:06.0000] <wycats>
The ES spec just calls into the fetch hook

[14:08:11.0000] <wycats>
Which is user overridable

[14:08:13.0000] <Hixie_>
ah, excellent

[14:08:18.0000] <wycats>
So theoretically you could use XHR

[14:08:46.0000] <wycats>
all the hooks but normalize are async

[14:09:27.0000] <Hixie_>
so the background here is that i'm trying to define some sort of better script loading mechanism in html

[14:09:39.0000] <Hixie_>
but i want to make sure it works with modules

[14:10:18.0000] <Hixie_>
is there some way i can prefill es6's notion of what modules are available, without having to fetch them all? e.g. we could have <script module="jquery" src="http://cdn.example.com/jquery.js"> ?

[14:10:26.0000] <wycats>
Yep

[14:10:32.0000] <wycats>
There's an exposed registry

[14:10:48.0000] <wycats>
Module names are simple strings

[14:11:08.0000] <wycats>
So you can put in "web/dom"

[14:11:37.0000] <Ms2ger>
r? http://critic.hoppipolla.co.uk/r/286

[14:12:14.0000] <Hixie_>
wycats: "web/dom"?

[14:12:44.0000] <wycats>
An example module name

[14:12:48.0000] <Hixie_>
oh ok

[14:12:55.0000] <wycats>
import { document } from "web/Dom"

[14:13:06.0000] <wycats>
document.getElementById etc

[14:13:13.0000] <Hixie_>
let's not confuse matters by having examples that sound like web apis :-)

[14:13:23.0000] <wycats>
Your hook for prepopulation is the registry

[14:13:29.0000] <wycats>
Oh I was intentionally using a web api

[14:13:34.0000] <Hixie_>
i'm confused

[14:13:39.0000] <Hixie_>
i meant a page that has many scripts

[14:13:54.0000] <Hixie_>
would maybe want this registry populated with those scripts, right?

[14:13:58.0000] <Hixie_>
rather than wait until they are parsed

[14:14:19.0000] <wycats>
Scripts aren't modules :/

[14:14:37.0000] <Hixie_>
oh? what's the difference

[14:14:52.0000] <wycats>
You're saying you want to populate the registry with module strings but not trigger an eager parse?

[14:15:08.0000] <Hixie_>
suppose the page has five scripts from CDNs

[14:15:12.0000] <Hixie_>
and they haven't arrived yet

[14:15:13.0000] <wycats>
Scripts are just top level programs. Modules are scoped

[14:15:21.0000] <Hixie_>
oh i mean <script>s

[14:15:34.0000] <Hixie_>
they could be modules

[14:15:36.0000] <Hixie_>
assume they are modules

[14:15:51.0000] <Hixie_>
anyway, there's also an inline <script> that says to import jquery or whatever

[14:16:12.0000] <Hixie_>
without some mechanism in the markup, the browser has no idea which of the five CDN-hosted files has jquery

[14:16:29.0000] <Hixie_>
since it won't even hear back from the CDN for another 200ms

[14:16:51.0000] <wycats>
I'm on my phone ATM... There are specific things to discuss here but they're hard to type on a phone

[14:16:52.0000] <wycats>
Tonight?

[14:17:28.0000] <Hixie_>
sure

[14:17:30.0000] <Hixie_>
ping me whenever

[14:18:56.0000] <wycats>
tl;dr there are thoughts on bundling that are related to what you're doing

[15:06:57.0000] <arv>
annevk, smaug____ What was the reason to copy the encoding when we clone document nodes?

[15:09:07.0000] <annevk>
arv: reason? I dunno. I thought we just wanted to define what Gecko did...

[15:09:40.0000] <annevk>
arv: there's observable effects for URLs and <form> though

[15:10:28.0000] <annevk>
holy backlog

[15:10:29.0000] <arv>
annevk: Ah... thanks, that answers my question.


2013-08-27
[17:23:10.0000] <Hixie_>
"as soon as possible" is commonly written "asap". is there an equivalent for running something as late as possible, at the last minute?

[17:23:49.0000] <TabAtkins>
"at the last possible moment [before X]"

[17:23:56.0000] <TabAtkins>
"immediately before X"

[17:24:22.0000] <Hixie_>
nothing nice and short like "asap"? this is something i'm considering for an attribute value.

[17:24:48.0000] <Hixie_>
i'm not beyond making "at the last possible moment" the value, but people will hate me for it.

[17:28:09.0000] <heycam>
just in time?

[17:28:16.0000] <Hixie_>
jit

[17:28:22.0000] <Hixie_>
hm, yeah, that might work

[17:28:25.0000] <Hixie_>
asap and jit

[17:38:32.0000] <jannis_>
is there somewhere to get only notified on changes interesting for web developers (new attributes, changed definitions, …)?

[17:42:31.0000] <jannis_>
or changes to the developers.whatwg.org part of the spec?

[17:42:55.0000] <Hixie_>
not really sure what's interesting to whom

[17:43:08.0000] <Hixie_>
you can register to be notified for changes to various subparts of the HTML spec, have you looked at that?

[17:45:18.0000] <jannis_>
I’m mainly interested in newly added elements and attributes, changes in the meaning of elements or attributes and dropped elements or attributes

[17:46:56.0000] <jannis_>
e.g. the table border attribute, which still was in the spec a year ago or two and is dropped now

[17:47:34.0000] <Hixie_>
oh you mean things that affect conformance criteria?

[17:47:39.0000] <Hixie_>
in theory, i mark all those checkins with "c"

[17:48:15.0000] <Hixie_>
which makes them appear with a little yellow doc with a checkmark on http://html5.org/tools/web-apps-tracker

[17:48:19.0000] <Hixie_>
e.g. r8109

[17:49:12.0000] <TabAtkins>
Hixie_: What attribute value might this be?

[17:49:30.0000] <Hixie_>
dunno yet, still trying to figure out a proposal. scripts loading stuff.

[17:49:42.0000] <jannis_>
great, thanks!

[17:49:52.0000] <jannis_>
is there some sort of filter for those checkins?

[17:49:57.0000] <Hixie_>
jannis_: i warn you, i'm not very good at marking them :_(

[17:50:16.0000] <Hixie_>
jannis_: there was some filter, dunno about now

[17:50:31.0000] <Hixie_>
should be easy enough to hack one up if you want to though

[17:50:35.0000] <Hixie_>
the format is fixed

[17:50:41.0000] <Hixie_>
it's in the commit messages

[17:50:47.0000] <Hixie_>
should be trivial to parse

[17:58:19.0000] <jannis_>
yep, that seems to be what I was looking for

[17:59:01.0000] <jannis_>
now if you only mark them accordingly … ;-)

[18:11:45.0000] <jannis_>
another question: why is <a><p></p></a> fine but <ul><a><li></li></a></ul> isn’t?

[18:34:13.0000] <Hixie_>
jannis_: because the latter makes walking the list items very non-trivial

[18:39:43.0000] <jannis_>
I see :-)

[19:36:02.0000] <Hixie_>
wtf english

[19:37:22.0000] <Hixie_>
"A is a dependency of B" and "A's dependency on B" mean the same thing, but are opposite meanings of the word "dependency"

[20:33:44.0000] <zewt>
they mean the opposite thing to me: "b requires a" and "a requires b" ("foo.c is a dependency of foo.exe" <-> "foo.exe's dependency on foo.c", not "foo.c's dependency on foo.exe")

[20:48:09.0000] <Hixie_>
zewt: a "dependency" is a country that belongs to (depends on) another. it's also something that someone depends on.

[20:48:28.0000] <Hixie_>
i.e. it has both opposite meanings

[01:08:34.0000] <zcorpan>
am i the only one having trouble following https://www.w3.org/Bugs/Public/show_bug.cgi?id=22772 ?

[01:19:14.0000] <smaug____>
hmm, removing microdata

[01:21:55.0000] <Ms2ger>
Sounds like the rdfa people had their way

[02:39:34.0000] <mpt>
zcorpan, thank you for that datetime data last week. The reason I was asking is that I was designing combo date+time pickers for the Ubuntu Phone browser, and I was asked how needed they were. I guess the answer is, not much. <https://wiki.ubuntu.com/TimeAndDatePickers#datetime-local>

[03:33:41.0000] <annevk>
Okay, seems IDNA thread is dead until people get back from vacation... Still unclear what needs to happen :/

[03:34:04.0000] <annevk>
Seems Domenic_ is solving promises.

[03:37:33.0000] <zcorpan>
mpt: np. though, as i said, the data is only of front pages, so not really representative of the long tail web etc

[05:04:41.0000] <zcorpan>
heycam|away: is 'double screenX = 0;' bogus webidl dictionary member? (i don't see it being invalid, but maybe it should be)

[05:07:09.0000] <Ms2ger>
Why?

[05:07:35.0000] <zcorpan>
0 is integer

[05:08:35.0000] <Ms2ger>
Doesn't seem like a problem to me

[05:09:22.0000] <Ms2ger>
Does anyone support select.selectedOptions?

[05:09:28.0000] <zcorpan>
maybe not. but what about 'double screenX = "";' should that be invalid webidl?

[05:09:56.0000] <Ms2ger>
Yes

[05:11:36.0000] <Ms2ger>
Doesn't seem to be

[05:15:28.0000] <zcorpan>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=23077

[05:35:52.0000] <annevk>
So it seems for Zip we need a file extension -> Content-Type mapping. Kinda ugly, but seems fine.

[05:39:11.0000] <zcorpan>
does widgets spec have that?

[05:43:46.0000] <annevk>
zcorpan: yes

[05:44:10.0000] <annevk>
zcorpan: it does content-type sniffing too, which seems kinda ugly

[05:46:29.0000] <gsnedders>
jgraham: I used closing to be proper, under the assumption people will just copy/paste the code.

[05:46:41.0000] <annevk>
And file names are byte sequences. Anything else is luck.

[05:47:21.0000] <jgraham>
gsnedders: Well it's a note because I didn't think it was worth arguing over, but I do think it makes the example less clear

[05:47:24.0000] <annevk>
So supporting nested Zips requires some kind of escaping. E.g. #path=nested.zip!image.jpg

[05:47:31.0000] <gsnedders>
jgraham: Would try/finally make it clearer?

[05:47:39.0000] <annevk>
But then if your file was named that way you'd write #path=nested.zip\!image.jpg

[05:47:59.0000] <annevk>
And if your file was named that way you'd write #path=nested.zip\\\!image.jpg

[05:48:34.0000] <jgraham>
gsnedders: Yes

[05:48:41.0000] <gsnedders>
jgraham: Will change, then

[05:48:48.0000] <jgraham>
gsnedders: OK

[05:49:26.0000] <annevk>
Not sure if any other \ should cause a network error...

[05:51:49.0000] <hsivonen>
annevk: what kind of zip files are you dealing with?

[05:52:06.0000] <SimonSapin>
annevk: do we really want to do nested zip files?

[05:52:17.0000] <hsivonen>
annevk: fwiw, EPUB invented a manifest for this even though their supported file types are heuristically detectable.

[05:52:22.0000] <hsivonen>
magic numbers FTW

[05:52:39.0000] <annevk>
hsivonen: any kind of zip file really

[05:52:39.0000] <gsnedders>
hsivonen: There's a hard-coded list of formats in EPUB?

[05:52:59.0000] <hsivonen>
gsnedders: for the ones that are required to support.

[05:53:02.0000] <hsivonen>
gsnedders: i.e. useful

[05:53:12.0000] <annevk>
hsivonen: using XMLHttpRequest you could override the type you get back though

[05:53:26.0000] <annevk>
SimonSapin: yes

[05:53:50.0000] <hsivonen>
Images have magic numbers

[05:53:56.0000] <hsivonen>
so do media files

[05:54:16.0000] <hsivonen>
the content files in EPUB are known to be XHTML or SVG, so you may assume an XML parser

[05:54:33.0000] <annevk>
Yeah so the way this would work is that you have the extension -> Content-Type mapping. That makes CSS and such work

[05:54:37.0000] <hsivonen>
CSS files are always referenced from a context where you know that you want CSS file

[05:54:48.0000] <annevk>
And then even though .gif will get image/gif the loader will sniff it anyway

[05:54:50.0000] <hsivonen>
in the EPUB case, that is.

[05:55:17.0000] <annevk>
hsivonen: not sure I'd like that kind of magic on the web

[05:55:23.0000] <gsnedders>
jgraham: Eh, all the advise I can find people giving from the past five years uses closing.

[05:55:49.0000] <annevk>
hsivonen: context is https://gist.github.com/annevk/6295844

[05:55:54.0000] <gsnedders>
jgraham: So I'm just going to run with it. Looking closely, you need nested try blocks, which just gets ugly.

[05:56:46.0000] <hsivonen>
annevk: Why are you doing this as fragment identifiers instead of using the jar:  scheme?

[05:57:02.0000] <hsivonen>
Because Architecture does not recognize nested schemes?

[05:57:06.0000] <SimonSapin>
annevk: shouldn’t nested zips work like nested anything? foo.zip#path=bar.zip#path=image.png#xywh=160,120,320,240

[05:57:43.0000] <annevk>
hsivonen: kinda, nested schemes also creates a whole sleuth of problems with origin determination and such

[05:57:45.0000] <hsivonen>
annevk: What's the use case for this stuff?

[05:57:50.0000] <SimonSapin>
and %23 of you need # in a path

[05:57:51.0000] <jgraham>
gsnedders: OK

[05:57:52.0000] <annevk>
hsivonen: basically you'd need to special case more stuff

[05:57:55.0000] <annevk>
SimonSapin: no

[05:58:02.0000] <SimonSapin>
why not?

[05:58:41.0000] <hsivonen>
annevk: any reason not to use ! for path inside zip and # for regular fragment id?

[05:58:52.0000] <annevk>
hsivonen: distributing resources in a Zip basically. People want it for ES6 modules, sets of images, games, etc.

[05:59:08.0000] <hsivonen>
annevk: so why not ! ?

[05:59:26.0000] <annevk>
hsivonen: how do you know it's not part of the path?

[05:59:28.0000] <hsivonen>
like http://example.com/package.zip!dir/foo.html#heading

[05:59:35.0000] <annevk>
hsivonen: also, fragment is designed for this

[05:59:48.0000] <SimonSapin>
hsivonen: this would require server-side support

[05:59:52.0000] <hsivonen>
annevk: I think saying that it's "designed for this" is stretching it

[06:00:01.0000] <annevk>
SimonSapin: you only have one fragment identifier

[06:00:16.0000] <annevk>
hsivonen: fragment identifiers are for client-side resource-specific processing

[06:00:21.0000] <hsivonen>
ah right. can't make ! special without a new scheme

[06:00:41.0000] <annevk>
hsivonen: Zips fit that perfectly

[06:00:48.0000] <hsivonen>
annevk: fair enough

[06:01:16.0000] <SimonSapin>
annevk: can’t we define that a fragment for a zip file is a stuff (including path) followed by #frag for the inner resource?

[06:01:30.0000] <gsnedders>
You just define what the fragment identifier means for Zip files and that's it. Possibly with a # within the fragment identifier.

[06:01:41.0000] <gsnedders>
SimonSapin: +1

[06:02:03.0000] <SimonSapin>
# is legal inside framgents, right?

[06:02:09.0000] <annevk>
Why not just use media fragments which already addresses this?

[06:02:11.0000] <gsnedders>
From an opaque URL parsing POV, there's only one. But the Zip fragment id-handling is up to whatever you define.

[06:02:14.0000] <gsnedders>
SimonSapin: Yes.

[06:02:35.0000] <SimonSapin>
annevk: because you want nesting

[06:03:05.0000] <gsnedders>
annevk: It's far more obvious to users, IMO

[06:03:11.0000] <annevk>
So # is not allowed inside a fragment.

[06:03:14.0000] <SimonSapin>
annevk: how do you link to an anchor/ID in an HTML file in a zip file?

[06:03:17.0000] <gsnedders>
annevk: Who are used to just throwing #foo on the end of a URL.

[06:03:35.0000] <annevk>
It's unlikely we'll have this supported for navigation

[06:03:39.0000] <annevk>
At least initially

[06:03:54.0000] <SimonSapin>
why not?

[06:04:04.0000] <hsivonen>
annevk: You may want to check out the EPUB prior art. I expect you end up doing something different, so be prepared for the EPUB folks yelling at you.

[06:04:06.0000] <annevk>
SimonSapin: complexity

[06:05:01.0000] <annevk>
hsivonen: I guess I should read http://www.idpf.org/epub/30/spec/epub30-ocf.html

[06:05:14.0000] <hsivonen>
annevk: http://www.idpf.org/epub/linking/cfi/epub-cfi.html

[06:05:26.0000] <annevk>
Oh, interesting

[06:05:32.0000] <SimonSapin>
so would it look like this? foo.zip#xywh=160,120,320,240&path=bar.zip!baz.png

[06:06:54.0000] <annevk>
SimonSapin: yeah

[06:07:03.0000] <SimonSapin>
looks backwards

[06:07:25.0000] <annevk>
then reorder -_-

[06:08:03.0000] <SimonSapin>
I picked the order on purpose, but I dislike that it’s possible to make it backwards

[06:08:13.0000] <gsnedders>
Not a problem, IMO

[06:08:26.0000] <annevk>
hsivonen: so yeah, it would not be compatible with that at all

[06:13:32.0000] <SimonSapin>
# in fragment seems to work fine: data:text/html,<script>document.write(window.location.hash)</script>#a#b

[06:15:16.0000] <gsnedders>
It works fine but is against spec.

[06:16:44.0000] <annevk>
Also, media fragments pioneered this already. Not really sure why we'd need yet another mechanism.

[06:18:10.0000] <SimonSapin>
arbitrary nesting instead of declaring media fragments are the one and only thing you want to do with URL fragments

[06:18:31.0000] <annevk>
I don't follow.

[06:20:02.0000] <SimonSapin>
if zip files have fragments like #<path>#<fragment for the inner resource>, the inner fragment doesn't have to be Media Fragments

[06:20:21.0000] <SimonSapin>
it could be EPUB’s thing, a bare anchor name, or anything

[06:28:48.0000] <annevk>
The problem with that is you'd need to type %23 and it's not very clear what the advantages are.

[06:28:58.0000] <annevk>
And you lose extensibility.

[06:30:54.0000] <annevk>
And you'd need an escape for %23 as it could occur in a file name.

[06:32:11.0000] <SimonSapin>
why not change the spec to allow # in fragments?

[06:32:30.0000] <SimonSapin>
implementations seem to be doing this already

[06:33:03.0000] <SimonSapin>
and it’s not ambiguous AFAIU

[06:33:47.0000] <annevk>
Even if you replace %23 with # in my arguments above I don't think there's much of a change

[06:36:33.0000] <SimonSapin>
well, # for "start of the nested fragment" and %23 for "path that contains #", just like in the actual path of an URL

[06:38:48.0000] <SimonSapin>
could be #path=foo.png#xywh=… if you want Media Fragment-style extensibility

[06:40:00.0000] <annevk>
ew

[06:44:36.0000] <zcorpan>
annevk: so how would you do this? not support it? zip#path=foo.html#toc

[06:44:56.0000] <annevk>
zcorpan: id= is a thing

[06:45:05.0000] <zcorpan>
ok

[06:45:19.0000] <annevk>
zcorpan: but as I said earlier, there's a bunch of complexity with supporting navigation so that wouldn't work at the start

[06:50:37.0000] <zcorpan>
http://w3c-test.org/web-platform-tests/master/html/semantics/forms/the-form-element/form-elements-nameditem-02.html - wonder if testharness.js should omit the end tag in the message

[06:51:41.0000] <jgraham>
zcorpan: ?

[06:52:09.0000] <zcorpan>
jgraham: it says "expected Element node <input type="radio" name="radio0" id="r0" value="0"></input>"

[06:52:32.0000] <zewt>
SimonSapin: #path=foo.png&xywh=whatever

[06:52:39.0000] <zewt>
not multiple #'s, that's weird

[06:52:45.0000] <jgraham>
Oh, it passes in gecko, so I didn't see that. Duh.

[06:52:54.0000] <jgraham>
(btw the Mozilla bug I cc'd you on is about testing in workers, in case you didn't realise that. I seem to recall that you had some thoughts on this)

[06:54:30.0000] <zewt>
(still catching up...)

[06:54:37.0000] <zcorpan>
jgraham: which bug?

[06:54:44.0000] <annevk>
I guess the \! thing is not needed. Can just use ! and it's percent-encoded variant

[06:55:06.0000] <jgraham>
zcorpan: https://bugzilla.mozilla.org/show_bug.cgi?id=909726

[06:55:34.0000] <SimonSapin>
annevk: yes, please do not add yet one more escaping mechanism

[06:55:54.0000] <annevk>
Actually, that may not work

[06:56:20.0000] <annevk>
Not given the generic media fragment processing anyway

[06:56:39.0000] <SimonSapin>
how about this? #path=foo.zip&path=nested.png

[06:57:12.0000] <zcorpan>
jgraham: (seems i had disabled emails for when only cc changes. fixed that now)

[06:57:17.0000] <zewt>
annevk: so, is the basic hope that the restriction of not supporting navigation (which is needed anyway) will essentially avoid web-compat issues with using the fragment?

[06:57:32.0000] <annevk>
zewt: no

[06:58:09.0000] <SimonSapin>
http://www.w3.org/TR/media-frags/#processing-name-value-components has an example of repeated name

[06:58:13.0000] <jgraham>
zcorpan: Oh, that might be the default. Possibly quite sensible

[06:58:31.0000] <zewt>
(sitting here hoping for better than a two-letter response...)

[06:58:35.0000] <jgraham>
Although you would have thought that getting an email when someone adds you as a cc would be a good idea

[06:59:56.0000] <annevk>
SimonSapin: seems somewhat awkward

[07:00:11.0000] <zcorpan>
jgraham: yeah. i've ticked the box that makes cc changes notify me if i'm cc-ed. i guess that means i'll be notified when others add themselves to cc if i'm also cc-ed, but there doesn't seem to be a way to get notified only if i'm newly cc-ed...

[07:00:35.0000] <zewt>
well if there are web-compat issues with using fragments then I guess this is a pointless discussion, then

[07:00:37.0000] <annevk>
SimonSapin: also looks like generic media fragment processing cannot be done because we cannot use utf-8 necessarily so maybe that's fine

[07:00:37.0000] <zewt>
heh

[07:00:59.0000] <annevk>
zewt: what kind of web-compat issues?

[07:01:07.0000] <SimonSapin>
annevk: what do you mean?

[07:01:36.0000] <zewt>
uh, well the whole reason for not using fragments in the first place is because fragments are used all over the place, so some weirdo escaping or something would be needed

[07:02:05.0000] <annevk>
SimonSapin: we can probably make #path=s!s work

[07:02:14.0000] <annevk>
zewt: at the end of Zip files?

[07:02:42.0000] <SimonSapin>
annevk: because zip paths are bytes rather than unicode?

[07:02:48.0000] <zewt>
at the end of urls, you don't know if a url points to a zip at parse time

[07:02:54.0000] <zcorpan>
jgraham: speaking of workers https://critic.hoppipolla.co.uk/r/56

[07:03:10.0000] <annevk>
SimonSapin: yeah

[07:03:18.0000] <annevk>
zewt: huh?

[07:03:38.0000] <annevk>
zewt: you fetch before you start looking at the fragment...

[07:04:40.0000] <zcorpan>
jgraham: or maybe "I'm added to or removed from this capacity" does that

[07:07:17.0000] <SimonSapin>
oh. http://marcosc.com/2008/12/zip-files-and-encoding-i-hate-you/

[07:10:48.0000] <zewt>
so having to look at the fragment within the fetch algorithm? i guess, does anything do that now?

[07:11:07.0000] <zewt>
SimonSapin: zips theoretically have a flag for utf-8, but nothing uses it, so it's not much help...

[07:12:08.0000] <annevk>
zewt: yes, no

[07:12:15.0000] <smaug____>
hmm, I should figure out how to submit tests to w3c/web-platform-tests

[07:12:20.0000] <zewt>
i think my take on encodings for zips is to just pretend they're all utf-8 and accept the mojibake and hope clients catch up

[07:12:34.0000] <smaug____>
do I need a github account for that?

[07:13:01.0000] <annevk>
zewt: my plan was to support byte sequences, so you can open old stuff too

[07:13:59.0000] <zewt>
:|

[07:14:23.0000] <SimonSapin>
zewt: there is no display of zip filenames here afaik, but we need to extract one file given some part of the URL fragment

[07:14:34.0000] <zewt>
i guess it matters more for urls than js apis, since it's "can't open it at all" vs. mojibake

[07:15:21.0000] <SimonSapin>
oh, yes there could be mojibake with the api

[07:16:22.0000] <jgraham>
zcorpan: Yeah, I wonder if I can delegate that review

[07:19:02.0000] <annevk>
Not entirely sure what the best API would be given the byte sequence mess

[07:20:34.0000] <annevk>
Maybe getRawFileNames(); getDisplayFileNames(); (looks at encoding of zip, falls back to windows-1252 or so; otherwise uses utf-8, falling back to windows-1252 for invalid sequences)

[07:21:22.0000] <annevk>
And getFile((ArrayBuffer or DOMString)) (does same encoding trick?)

[07:21:25.0000] <annevk>
seems real ikcy

[07:26:32.0000] <SimonSapin>
or http://xkcd.com/927/ the zip format

[07:29:14.0000] <annevk>
that's not really an option if you want to support opening existing stuff like .docx or .epub

[07:30:12.0000] <annevk>
I think the API could have ArrayBuffer and String, and the latter would only go to utf-8

[07:30:46.0000] <annevk>
plus list of ArrayBuffer names and list of ArrayBuffer decoded as utf-8 names

[07:31:27.0000] <SimonSapin>
ah, jokes taken literally :)

[07:32:39.0000] <annevk>
why? zip file resource names are bytes

[07:34:13.0000] <SimonSapin>
the suggestion to make a new archive format was a joke

[07:34:29.0000] <annevk>
Yeah I'm asking where I took it literally

[07:34:44.0000] <SimonSapin>
"not really an option…"

[07:34:55.0000] <annevk>
oh like that

[07:35:03.0000] <annevk>
/me needs sleep

[07:41:16.0000] <gsnedders>
annevk: It should fall back to the current locale, not necessarily windows-1252.

[07:41:43.0000] <annevk>
gsnedders: see the revised proposal a bit lower

[07:41:54.0000] <annevk>
gsnedders: less magic, more pain if you didn't use utf-8

[07:41:56.0000] <gsnedders>
Also plenty of ZIP files are broken when it comes to file names.

[07:42:13.0000] <gsnedders>
Like, the directory index often has totally bogus stuff in it.

[07:42:21.0000] <gsnedders>
EPUBs especially.

[07:42:59.0000] <annevk>
I guess eventually we'll end up defining the parser and doing a variant of 927...

[07:44:29.0000] <gsnedders>
AFAIK most impls just ignore the dictionary at the end entirely.

[07:45:05.0000] <zewt>
err, no...

[07:45:23.0000] <zewt>
most implementations treat the central directory as authoritative

[07:45:29.0000] <zewt>
(in my experience)

[07:45:37.0000] <zewt>
otherwise you have to scan the entire file to get a directory listing

[07:46:07.0000] <gsnedders>
And then ignore filenames like \xFA\x23\xA2?

[07:46:16.0000] <zewt>
they don't ignore them, they just mojibake them

[07:46:44.0000] <gsnedders>
Last time I looked into this (with broken epub zip files) they seemed to just get ignored

[07:47:00.0000] <zewt>
parsers for specific formats may do things differently

[07:47:13.0000] <zewt>
general-purpose clients in my experience skip right to the end and read the central record

[07:47:49.0000] <gsnedders>
I was looking at general-purpose ones.

[07:48:29.0000] <gsnedders>
UnZip 6.00 seems to treat central over local filename.

[07:49:37.0000] <annevk>
I was just told Gecko looks at the end

[07:49:42.0000] <zewt>
you really need to use the central record for remote fetches, since otherwise you have to do a zillion tiny fetches to read the local headers

[07:50:03.0000] <gsnedders>
Yeah, indeed.

[07:50:46.0000] <gsnedders>
A lot of epub ZIPs have broken central dictionaries for whatever reason, though. Which is fun. zip -FF recreates it from scanning through, which suddenly makes them work everywhere.

[07:52:16.0000] <zewt>
yeah, the "fix zip" thing in zip clients just rewrites central from local records

[07:52:42.0000] <zewt>
(and maybe recalculates crcs and whatever)

[07:53:12.0000] <gsnedders>
Zip 3.0 at least explicitly does not recalculate CRC

[07:55:35.0000] <gsnedders>
explorer.exe I believe just goes through local records

[07:56:41.0000] <gsnedders>
Ergh, all the sanitizer tests need rewritten.

[07:57:32.0000] <annevk>
https://etherpad.mozilla.org/zipurls

[07:58:35.0000] <gsnedders>
jgraham: Thoughts on moving serializer/htmlserializer.py to serializer.py

[08:03:16.0000] <gsnedders>
Does removing the CDATA section state from the tokenizer have any effect on expressibility of the parser?

[08:20:55.0000] <smaug____>
annevk: ping

[08:23:07.0000] <smaug____>
or Ms2ger

[08:24:31.0000] <annevk>
smaug____: yo

[08:24:59.0000] <smaug____>
annevk: about tokenlist serialization

[08:25:23.0000] <Ms2ger>
Here

[08:25:24.0000] <smaug____>
it uses set serializer

[08:25:34.0000] <smaug____>
so what guarantees the order

[08:25:57.0000] <annevk>
I should probably rename those to ordered set parser and ordered set serializer

[08:26:11.0000] <smaug____>
but the idea is that it is ordered

[08:26:34.0000] <annevk>
yeah

[08:26:45.0000] <annevk>
that's why the set parser uses append and not set

[08:27:37.0000] <smaug____>
then "list of tokens"

[08:27:41.0000] <smaug____>
where is that defined

[08:28:01.0000] <smaug____>
if I look at http://dom.spec.whatwg.org/#dom-domtokenlist-add for example

[08:28:22.0000] <annevk>
"A DOMTokenList object has an associated list of unique tokens, which is initially empty."

[08:28:39.0000] <smaug____>
k

[08:28:53.0000] <annevk>
I guess I could make that ordered set of tokens and xref tokens

[08:29:12.0000] <annevk>
I'll make some clarifications in a bit

[08:29:34.0000] <SimonSapin>
is that tokens of the HTML parser?

[08:34:13.0000] <Ms2ger>
No

[08:34:22.0000] <Ms2ger>
Tokens in the class attribute

[08:35:16.0000] <smaug____>
annevk: what about the initial list. where is it defined how it is parsed?

[08:38:07.0000] <annevk>
smaug____: somewhat below http://dom.spec.whatwg.org/#concept-class

[08:40:59.0000] <smaug____>
hmm, per HTML spec the value is not updated when class is set to empty string

[08:42:14.0000] <smaug____>
"...when an element's class attribute is set to a value other than the empty string, set the element's classes to the new value, parsed."

[08:42:26.0000] <smaug____>
"When an element's class attribute is removed, set the element's classes to the empty list. "

[08:42:39.0000] <smaug____>
but what about empty string as value

[08:42:46.0000] <Ms2ger>
That seems like a bug

[08:43:06.0000] <smaug____>
Hixie_: ^

[08:49:39.0000] <annevk>
smaug____: once browsers implement class="" for all elements, the HTML spec is obsolete...

[08:50:21.0000] <annevk>
smaug____: landed a patch in DOM around token usage btw

[08:50:28.0000] <annevk>
smaug____: and ordered sets

[08:52:53.0000] <smaug____>
annevk: thanks

[08:53:36.0000] <smaug____>
annevk: well, DOM spec will need to then define how the initial classList is constructed

[08:53:56.0000] <annevk>
smaug____: I just pointed you to where it does that

[08:55:35.0000] <smaug____>
(again an example how a feature has been implemented at least once, yet the specs are unclear what to implement. Specs tend to become less buggy only after 2-3 implementations. )

[08:55:55.0000] <smaug____>
(which is why it is sad there isn't Presto anymore)

[08:57:42.0000] <smaug____>
annevk: oops, sorry, I thought that was in HTML spec :)

[08:58:09.0000] <annevk>
oh, so I should remove empty string?

[08:58:24.0000] <smaug____>
yeah

[08:58:48.0000] <annevk>
I wonder why we had that

[08:59:04.0000] <annevk>
ooh, maybe copypasta from the ID case

[09:01:07.0000] <annevk>
smaug____: fixed

[09:01:42.0000] <smaug____>
kiitos

[09:39:09.0000] <Hixie_>
smaug____: file a bug

[09:41:03.0000] <smaug____>
Hixie_: nm, I was confused. It was a bug in DOM spec and annevk fixed it

[09:42:01.0000] <Hixie_>
k

[09:42:29.0000] <GPHemsley>
/me still thinks it would be useful to allow multiple IDs point to a single element using space-separated @id

[09:45:37.0000] <annevk>
GPHemsley: where?

[09:49:14.0000] <GPHemsley>
annevk: In HTML, at least.

[09:49:28.0000] <GPHemsley>
But that's just a thought with no understanding of any possible implications.

[09:53:33.0000] <annevk>
I see...

[10:02:06.0000] <gavinc>
GPHemsley: well, other then breaking the heck out of element.id? ;)

[10:02:07.0000] <matjas>
my interpretation of the spec for the `hidden` attribute is that it should not be used for content that will _never_ become visible

[10:02:11.0000] <matjas>
is that correct? (http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#the-hidden-attribute)

[10:02:34.0000] <GPHemsley>
gavinc: It may indeed break the heck out of a lot of things.

[10:02:48.0000] <annevk>
matjas: it might never become visible for any given user

[10:03:26.0000] <matjas>
“When specified on an element, it indicates that the element is not yet, or is no longer, directly relevant to the page’s current state, or that it is being used to declare content to be reused by other parts of the page as opposed to being directly accessed by the user.”

[10:03:52.0000] <matjas>
i.e. there exists a situation in which the `hidden` state is removed

[10:04:45.0000] <matjas>
but if i just want to hide something in the document, for everyone, in all cases, doesn’t that mean i shouldn’t use `hidden`?

[10:04:56.0000] <matjas>
since it’s _never_ “directly relevant to the page’s current state”

[10:05:55.0000] <matjas>
sounds to me like it does, but maybe i’m wrong

[10:11:04.0000] <Hixie_>
matjas: if you want to hide something in the document, for everyone, in all cases, just don't put it in?

[10:19:08.0000] <matjas>
Hixie_: here’s the use case http://mathiasbynens.be/notes/json-dom-csp#hidden-element

[10:19:36.0000] <Hixie_>
why would CSP not be satisfied with inlined JSON?

[10:20:09.0000] <Hixie_>
<script> is the appropriate element to use here

[10:20:24.0000] <Hixie_>
hidden="" is wrong. display:none is even more wrong.

[10:20:26.0000] <matjas>
CSP blocks inline <script>s

[10:20:32.0000] <Hixie_>
"blocks" how?

[10:20:44.0000] <matjas>
doesn’t execute its contents

[10:20:53.0000] <Hixie_>
it's JSON, you're not supposed to execute it?

[10:21:03.0000] <Hixie_>
<script type="application/json"> ... </script>

[10:21:10.0000] <matjas>
you want to assign it to a variable or something like that so you can use it in JS

[10:21:16.0000] <matjas>
so you’d use <script type=application/json> (also mentioned on that page)

[10:21:20.0000] <matjas>
k got it

[10:21:22.0000] <Hixie_>
yeah

[10:21:24.0000] <Hixie_>
(just got there)

[10:21:39.0000] <Hixie_>
that's the way to include data blobs in html

[10:22:28.0000] <matjas>
i asked about this a few weeks back and the suggested solution was to use a custom data-* attribute

[10:22:38.0000] <matjas>
(here in #whatwg, i mean)

[10:22:56.0000] <Hixie_>
well it depends what you're doing

[10:23:10.0000] <Hixie_>
if you have a big blob, not associated with an element, then <script> data blocks are the way to go

[10:23:16.0000] <Hixie_>
if you have data associated with an element, data-* is good

[10:23:57.0000] <matjas>
would you mind leaving a comment there saying just that? thanks

[10:24:18.0000] <Hixie_>
can't right now but feel free to copy/paste commentsa bove

[10:26:11.0000] <annevk>
Anyone with shorter names for getFileNames and getRawFileNames?

[10:27:29.0000] <annevk>
(assume I just lowercased the "N" per established convention)

[10:27:46.0000] <gsnedders>
jgraham: Do you understand the sanitizer at all?

[10:29:35.0000] <jgraham>
gsnedders: Yes. But the bar for not understanding something "at all" is rather high.

[10:32:44.0000] <gsnedders>
jgraham: Explain how disallowed_token doesn't break everything?

[10:38:48.0000] <jgraham>
Wow, that's terrible code

[10:39:02.0000] <jgraham>
But I'm not clear that it necessarily has to break everything

[10:39:15.0000] <jgraham>
I'mm not clear that it doesn't either

[10:39:18.0000] <jgraham>
Like I said

[10:39:46.0000] <jgraham>
Oh, right

[10:39:54.0000] <jgraham>
It shouldn't break everything

[10:40:09.0000] <jgraham>
It is trying to convert all disallowed tokens to character tokens

[10:41:07.0000] <gsnedders>
Yeah, I eventually worked that out just before you said that.

[10:41:18.0000] <gsnedders>
Big problem: attribute/element lists are namespace unaware.

[10:41:33.0000] <gsnedders>
Do I deal with this by post-processing the lists, or do I change the lists?

[10:42:07.0000] <jgraham>
Well

[10:42:31.0000] <jgraham>
I would say that you could use a syntax like svg:foo and post-process that

[10:44:12.0000] <gsnedders>
Yeah, indeed.

[10:44:14.0000] <gsnedders>
That's what I meant.

[10:44:18.0000] <gsnedders>
That's what it currently does.

[10:44:24.0000] <gsnedders>
Without the post-processing.

[10:45:03.0000] <jgraham>
Oh

[10:47:36.0000] <gsnedders>
Oh, this is really quite the mess.

[11:02:48.0000] <jwalden>
Hixie_: Link: foo.xbl to style plaintext is one of the scariest things I've ever heard of here

[11:17:16.0000] <Hixie_>
jwalden: why is it scary?

[11:18:10.0000] <jwalden>
Hixie_: XBL, mutating random content, the usual scary

[11:18:20.0000] <Hixie_>
pah

[11:18:22.0000] <Hixie_>
:-)

[11:18:37.0000] <jwalden>
/me shakes fist at QA ;-)

[11:36:30.0000] <annevk>
During dinner I decided on getNames() / getRawNames()

[11:36:52.0000] <annevk>
Rough overview of the entire thing is at https://etherpad.mozilla.org/zipurls

[11:37:32.0000] <annevk>
Will add it to Fetch in due course. Constructing Zip files isn't added yet. Starting conservatively.

[11:38:12.0000] <annevk>
Domenic_: for zlib APIs... Any ideas as to how those should look?

[11:40:49.0000] <Domenic_>
annevk: probably http://nodejs.org/api/zlib.html#zlib_convenience_methods but with ArrayBuffer instead of Node's custom Buffer and promises instead of callbacks. Streaming versions would be nice once we figure out streams.

[11:44:16.0000] <annevk>
Domenic_: so it seems kinda bad to expose the name zlib like that, given that it's a specific implementation

[11:44:52.0000] <annevk>
Domenic_: but okay, deflate(any) -> promise makes sense

[11:45:12.0000] <Domenic_>
annevk: sure, it doesn't have to be `zlib.`. Ideally it would be `import { unzip, deflate } from "@web/compress"` or similar.

[11:46:26.0000] <annevk>
It'll be interesting to see when the module thing happens...

[11:47:33.0000] <Domenic_>
sigh, yes.

[12:51:28.0000] <zcorpan>
is there a webkit or blink browser that supports switching style sheet sets?

[12:51:50.0000] <Hixie_>
using ui?

[12:52:00.0000] <zcorpan>
yeah

[12:52:05.0000] <Hixie_>
not to my knowledge :-(

[12:55:00.0000] <zcorpan>
it seems webkit/blink don't support switching with JS either, unless i'm missing something

[12:56:08.0000] <Hixie_>
i thought there was some api

[12:56:11.0000] <Hixie_>
that webkit implemented

[12:56:17.0000] <Hixie_>
as hyatt

[12:56:21.0000] <Hixie_>
er, ask hyatt, rather

[13:04:27.0000] <zcorpan>
hmm, i see selectedStylesheetSet but the spec has selectedStyleSheetSet. and setting it doesn't switch stylesheets

[13:06:27.0000] <Hixie_>
i think the name may have been changed in the spec to avoid clashing when the semantics were changed?

[13:12:27.0000] <zcorpan>
annevk: ^

[13:17:33.0000] <annevk>
zcorpan: that's when Hixie_ changed the semantics, not I

[13:17:50.0000] <annevk>
zcorpan: that API is kinda hopeless, nobody is really interested

[13:18:09.0000] <gsnedders>
jgraham: #110 may be on interest. Gets the tokenizer working roughly as a treewalker

[13:18:09.0000] <Hixie_>
yeah, alternative style sheets in general have rather failed

[13:18:19.0000] <zcorpan>
maybe we should drop it

[13:18:32.0000] <Hixie_>
as much as it would pain me to agree, yeah

[13:18:36.0000] <annevk>
There's a lot of potential simplicity gain there

[13:18:50.0000] <Hixie_>
yeah

[13:18:56.0000] <Hixie_>
should see if mozilla would drop it

[13:19:17.0000] <Hixie_>
i think it's very sad that we'd remove it, but it is a lot of complexity for something that virtually nobody uses

[13:19:21.0000] <annevk>
We accept bug reports / patches :)

[13:19:44.0000] <gsnedders>
jgraham: Nothing's been done about getting tests running yet, though

[13:19:50.0000] <Hixie_>
annevk: i don't believe in pushing my agenda in bug reports and even less in patches

[13:20:59.0000] <annevk>
More visible than G+ :p

[13:21:37.0000] <Hixie_>
visible how?

[13:22:02.0000] <Hixie_>
i have like 10,000 people following me on g+ :-P

[13:23:49.0000] <annevk>
I do file bug reports, mostly to get a sense of what people think about a particular issue... Why don't you believe in them?

[13:33:00.0000] <Hixie_>
i don't want to make people do things without them thinking they're a good idea, and i'm worried that if i file a bug saying "do X", some browser vendors will do it without thinking about whether i'm wrong or not

[13:33:28.0000] <Hixie_>
i figure if i'm right, someone else will agree enough to file a bug

[13:33:37.0000] <Hixie_>
and if nobody can be bothered, i'm probably not right

[13:34:17.0000] <jgraham>
DODo

[13:34:23.0000] <jgraham>
oops

[13:34:27.0000] <jgraham>
Bad connection

[13:34:40.0000] <Hixie_>
you using irssi?

[13:34:45.0000] <jgraham>
File a bug saying "do X iff bz think's it's a good idea"

[13:34:47.0000] <jgraham>
Yeah

[13:35:06.0000] <Hixie_>
can you understand wtf is up with irssi acting weird when the connection is bad?

[13:35:09.0000] <Hixie_>
i don't understand how it's possible

[13:35:15.0000] <Hixie_>
ssh runs over tcp

[13:35:27.0000] <Hixie_>
surely that means that there should be no way to tell when the connection is bad

[13:36:40.0000] <jgraham>
Well I think what just happened wasn't an irssi problem, more that I thought the connection was dead and tried to escape ssh, but irssi eventually sent some of the characters

[13:37:27.0000] <Hixie_>
ah

[13:37:40.0000] <Hixie_>
i find that when i get a lot of packet loss, i start seeing ansi sequences in my irssi input

[13:37:49.0000] <Hixie_>
from pressing arrow keys, etc

[13:37:58.0000] <Hixie_>
and i have zero understanding of how that is possible

[13:38:25.0000] <Hixie_>
(running ssh in a mac Terminal, to a machine running screen with irssi in a buffer)

[13:44:03.0000] <gsnedders>
Anyone here understand regexp engines here?

[13:44:14.0000] <gsnedders>
s/here\?/?/

[13:44:46.0000] <Ms2ger>
You

[13:45:49.0000] <jgraham>
gsnedders: Just ask your question :p

[13:48:50.0000] <gsnedders>
Given a string like "aaabaaabaaad" and a regexp like /a+ba+d/, if you match that as a DFA you get to the second "b" in the input string before you reject the string from the DFA. How do you know where in the input string to start matching again? Can you avoid doing the naïve one starting offset at a time?

[14:03:02.0000] <gsnedders>
http://swtch.com/~rsc/regexp/regexp3.html deals with this, actually

[14:14:39.0000] <Hixie_>
how am i supposed to know from script when the html parser has finished parsing an element? o_O

[14:28:01.0000] <rillian>
Hixie_: is there a reason not to write some trivial display rules for TextTrackCue and give it a plain-text constructor?

[14:28:18.0000] <rillian>
I mostly say this because I don't approve of all the positional stuff in WebVTT

[14:29:22.0000] <Hixie_>
rillian: why wouldn't we just fix webvtt instead?

[14:40:17.0000] <jannis_>
When I have <pre><img></pre>, is the alt="" subject to pre?

[14:44:11.0000] <rillian>
Hixie_: didn't you resign as editor because no one wanted to fix WebVTT?

[14:44:33.0000] <Hixie_>
no, i handed WebVTT to Silvia because I was trying to offload work and she volunteered

[14:44:45.0000] <Hixie_>
(that, and implementors didn't want to do what i wanted)

[14:44:51.0000] <rillian>
heh

[14:45:08.0000] <Hixie_>
jannis_: yes

[14:45:16.0000] <rillian>
I did like your idea to standardizing a file format for the legacy CC streams

[14:45:40.0000] <rillian>
that seemed the only way to meet implementor concerns without adding all these features to webvtt

[14:46:03.0000] <jannis_>
Hixie_: thx

[14:48:09.0000] <jannis_>
but there is no way (and no way intended) to use html elements in the img’s alternate content, is it?

[14:54:54.0000] <Hixie_>
jannis_: yeah, just use <object> instead of <img>

[14:55:27.0000] <Hixie_>
script preloading proposal on the list

[14:55:29.0000] <jannis_>
oh, does that work?

[14:55:34.0000] <Hixie_>
jannis_: should do

[14:55:39.0000] <jannis_>
great :)

[15:24:05.0000] <TabAtkins>
Hixie_: How do you match the urls in your needs='' attribute?  Split on spaces, fully resolve, then compare url-wise?

[15:24:37.0000] <TabAtkins>
Ah, I see, yes, that's exactly it.

[15:39:14.0000] <Hixie_>
TabAtkins: yeah

[15:39:26.0000] <Hixie_>
i realised after posting that i should also fire an event if the script doesn't run

[15:49:23.0000] <heycam>
zcorpan, I think 'double screenX = 0;' is not bogus, due to the "The type of an integer token is the same as the type of the constant, dictionary member or optional argument it is being used as the value of." sentence


2013-08-28
[17:27:54.0000] <MikeSmith>
oh man the whole Tracking Protection dark comedy just got even more tragic/comic

[17:29:29.0000] <MikeSmith>
http://lists.w3.org/Archives/Public/public-tracking/2013Aug/0024.html

[17:30:36.0000] <miketaylr>
oh vey

[17:31:19.0000] <MikeSmith>
Peter Swire stepping down as co-chair in order to join the "Review Group on Intelligence and Communications Technology" thing that President Obama set up to whitewash all the legal violations he and the NSA have been doing

[17:31:47.0000] <miketaylr>
[insert THANKS OBAMA meme here]

[17:31:54.0000] <MikeSmith>
heh

[17:57:43.0000] <jamesr__>
very preliminary data suggests that accesses to "document.charset" are really common

[17:57:53.0000] <jamesr__>
i think some common JS is trying to sniff IE by bool-checking that

[17:58:01.0000] <jamesr__>
which is sad since webkit/blink have also exposed it forever

[20:41:08.0000] <zewt>
var ie = (Math.random() < 0.5) // web-compat this, mo-fos

[20:41:30.0000] <miketaylr>
D:

[20:52:26.0000] <rsc33>
why on linux chromium when  I type <aa in the html it dispalys as text on the web page but on windows on chrome it doesn't display, in a fact it deletes whole row of text?

[00:02:34.0000] <zcorpan>
jamesr__: that seems like an argument to drop it from webkit/blink

[00:03:34.0000] <zcorpan>
unless they have that code path mean "IE and WebKit" i guess

[00:29:35.0000] <zcorpan>
Hixie_: looks like you didn't finish this sentence:

[00:29:40.0000] <zcorpan>
If

[00:29:40.0000] <zcorpan>
  decDependencies() is called and it reduces the number to zero,

[01:18:03.0000] <zcorpan>
does anyone know if IE supports alternative stylesheets? (JS or UI or both?)

[01:18:58.0000] <zcorpan>
what's the log output of  http://software.hixie.ch/utilities/js/live-dom-viewer/saved/2497

[01:27:39.0000] <zcorpan>
heycam|away: TabAtkins: The CSSOM spec is probably wrong when it comes to how to deal with variables.

[01:38:37.0000] <Ms2ger>
Maybe not only there ;)

[02:32:37.0000] <Ms2ger>
http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#dom-texttrack-mode

[02:32:47.0000] <Ms2ger>
Isn't the first dl there backwards?

[02:40:40.0000] <zcorpan>
Ms2ger: backwards as in the text in dt should be in dd instead?

[02:40:51.0000] <Ms2ger>
Yeah

[02:41:31.0000] <zcorpan>
i guess

[02:44:28.0000] <Ms2ger>
/me takes some paper to interpret the ORA

[02:53:00.0000] <Ms2ger>
In step 12.3 at http://dev.w3.org/2006/webapi/WebIDL/#dfn-overload-resolution-algorithm, is the definition of V missing?

[02:57:48.0000] <SimonSapin>
hsivonen: I don’t understand https://twitter.com/hsivonen/status/372656748928053249 , what’s a fallback encoding in this case?

[02:58:37.0000] <hsivonen>
SimonSapin: the encoding that's used for HTML if there's no declared encoding and nothing to inherit

[02:59:04.0000] <SimonSapin>
hsivonen: that’s based on the user’s locale?

[02:59:21.0000] <hsivonen>
SimonSapin: yes (unfortunately!)

[02:59:25.0000] <SimonSapin>
ew

[02:59:30.0000] <hsivonen>
indeed

[03:00:13.0000] <SimonSapin>
I’m gonna pretend I don’t know about this for now.

[03:01:01.0000] <Ms2ger>
Fun, isn't it

[03:01:19.0000] <SimonSapin>
for some values of "fun"

[03:01:25.0000] <zcorpan>
looks like Default-Style <meta> is a working way to switch stylesheet sets in Blink in JS

[03:02:19.0000] <Ms2ger>
zcorpan, review comments! ;)

[03:02:49.0000] <jgraham>
hsivonen: I would be concerned about the small sample size there

[03:02:56.0000] <zcorpan>
Ms2ger: hmm?

[03:03:35.0000] <Ms2ger>
https://critic.hoppipolla.co.uk/r/74

[03:04:09.0000] <zcorpan>
Ms2ger: nice!

[03:04:11.0000] <hsivonen>
jgraham: why when the Esperanto result confirms expectations?

[03:04:57.0000] <SimonSapin>
what’s the sample size, by the way?

[03:05:09.0000] <SimonSapin>
maybe in absolute number of sessions

[03:05:36.0000] <hsivonen>
SimonSapin: varies by locale but, IIRC, > 600 for Esperanto

[03:06:19.0000] <jgraham>
hsivonen: I'm not saying I don't believe the results. But that's only because it confirms my bias, not because I know that the data is trustworthy

[03:06:30.0000] <hsivonen>
and yes, even pure 100% vs. 0% results were possible with thousands of datapoints, e.g. Finnish Fennec

[04:47:18.0000] <john____>
hi

[04:48:28.0000] <john____>
all alone?

[04:50:04.0000] <john____>
He "Finnish"

[04:51:56.0000] <john____>
OK, will just put a question and see if anyone bites

[04:52:25.0000] <john____>
Have added specs for meta names for a search script

[04:52:47.0000] <john____>
there are comment tags that have errors in w3.validator

[04:52:51.0000] <john____>
Element name fdse:robots cannot be represented as XML 1.0.  <FDSE:ROBOTS value="none">

[04:53:26.0000] <john____>
Any ideas how to fix this?

[04:53:50.0000] <john____>
The tag goes within html not in the header

[04:54:36.0000] <john____>
Nice it lets you madk off areas of text so the search scrip only sees the code you want

[04:55:02.0000] <john____>
like <nav></nav> could work

[04:55:42.0000] <john____>
mask off areas

[04:57:59.0000] <john____>
- sulk -

[04:58:48.0000] <john____>
OK, have emailed Hixie_

[04:59:16.0000] <john____>
see yah grizzly dudes

[05:01:03.0000] <Ms2ger>
Bye.

[05:25:41.0000] <annevk>
fifteen minutes for a reply? wow

[06:38:44.0000] <Ms2ger>
new Blob(new String("abc"))

[06:38:45.0000] <annevk>
Aight, zip archive stuff: http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Aug/0278.html

[06:38:49.0000] <Ms2ger>
What should that do?

[06:39:07.0000] <annevk>
Ms2ger: I'd expect a blob consisting of three bytes

[06:39:29.0000] <Ms2ger>
But the first argument to the constructor is a sequence

[06:40:21.0000] <annevk>
oh my god

[06:40:24.0000] <annevk>
who designed that?!

[06:40:41.0000] <annevk>
/me sheds a tear

[06:40:53.0000] <zcorpan_>
changing style sheet set with Default-Style in webkit doesn't seem to add the new stylesheet to document.styleSheets. and the old stylesheet's cssRules gets emptied.

[06:40:53.0000] <zcorpan_>
or blink is what i'm testing, but i guess it's the same

[06:41:11.0000] <gsnedders>
Ms2ger: You're using a string object, you're doing it wrong.

[06:41:22.0000] <annevk>
If we remove alternate style sheets, default-style can go too

[06:41:42.0000] <Ms2ger>
gsnedders, no, I explicitly want to test a String object

[06:46:16.0000] <freddyb>
I just read the zip proposal email. very interesting :)

[06:46:47.0000] <freddyb>
I found it worthwhile mentioning that something similar to the sub-scheme example already works in firefox jar:http://html5sec.org/test.jar!/test.html

[06:47:41.0000] <freddyb>
(jar files are zips, considering that manifest files are optional)

[06:47:45.0000] <gsnedders>
Why is the state of MTP on Linux so bad the easiest way to copy stuff to my tablet is over wifi, slowly?

[06:51:10.0000] <freddyb>
I'm a bit worried about all three approaches for the zip idea..the first would introduce just another URL scheme for with deriving an origin could be harder than it seems

[06:51:18.0000] <annevk>
freddyb: yeah I know, although I haven't played with them recently

[06:51:45.0000] <annevk>
freddyb: so, if we put it on the URL object as sub-scheme, the origin would still be computed in the same way

[06:51:56.0000] <annevk>
freddyb: but sub-scheme seems really icky

[06:52:11.0000] <freddyb>
I find them all icky :P

[06:52:38.0000] <annevk>
I like fragments. But they're kinda incompatible with supporting them in <iframe> and such.

[06:52:38.0000] <freddyb>
the media fragment looks so capable of being misunderstood

[06:53:13.0000] <annevk>
And might require a bunch more infrastructure changes than changing the URL parser as sicking pointed out repeatedly to me.

[06:53:17.0000] <SimonSapin>
annevk: Firefox supports view-source: in <iframe>

[06:53:30.0000] <freddyb>
because it suddenly has a completely different meaning depending on the resource being returned (espeically without a file name extension), where one program might think it's a portion of an HTML document and others agree it's a file within a zip

[06:53:31.0000] <annevk>
Fragments are however the only way of using URLs as designed

[06:53:42.0000] <annevk>
SimonSapin: yeah we should nuke that

[06:54:08.0000] <freddyb>
yeah, I really hope the view-source/iframe thing gets nuked. there's already a bug: https://bugzilla.mozilla.org/show_bug.cgi?id=624883

[06:54:25.0000] <freddyb>
annevk: that's true! but it is really ambigous, isnt it?

[06:55:54.0000] <SimonSapin>
annevk: zip-relative URLs that start with '%!'. Is this a bad idea?

[06:56:12.0000] <freddyb>
:)

[06:56:45.0000] <freddyb>
why not use a character that doesnt have a meaning yet? like $ ;)

[06:57:23.0000] <annevk>
SimonSapin: you'd have to elaborate

[06:57:35.0000] <annevk>
freddyb: $ is used in URLs on the web

[06:58:45.0000] <freddyb>
really? I didn't know. but let's not bikeshed on this. a different character would make more sense to me.

[06:58:48.0000] <SimonSapin>
annevk: do you think it is a good or bad idea to support <img src="%!foo.png"> which is zip-relative just like <img src="/foo.png"> is host-relative.

[06:59:15.0000] <annevk>
SimonSapin: I don't think any relative URLs should be able to get out of the zip

[07:00:58.0000] <SimonSapin>
why not? But this is not the case here: src="%!foo.png" only makes sense if the base URL is in a zip as well, eg. http://example.net/zip%!a/b/c.html

[07:00:59.0000] <annevk>
We could make it %/ I suppose.

[07:01:54.0000] <annevk>
SimonSapin: if the idea is that it's a self-contained package, being able to refer to other files on the same server using a relative URL seems very strange

[07:02:01.0000] <annevk>
SimonSapin: and more likely an error

[07:02:06.0000] <annevk>
SimonSapin: or worse, exploit

[07:03:04.0000] <GPHemsley>
Was a question-mark-prefixed character combo already considered and rejected?

[07:04:53.0000] <annevk>
GPHemsley: question-mark is already used...

[07:05:13.0000] <GPHemsley>
annevk: So is percent-sign...

[07:05:22.0000] <annevk>
GPHemsley: did you read my email?

[07:05:28.0000] <GPHemsley>
Yes

[07:05:38.0000] <annevk>
It points out why percent-sign in this way works.

[07:05:54.0000] <GPHemsley>
Yes, but that wasn't my question

[07:06:04.0000] <annevk>
So you want %? ?

[07:06:23.0000] <GPHemsley>
I was thinking something more like ?/

[07:06:36.0000] <GPHemsley>
but that's why I'm asking

[07:06:39.0000] <annevk>
That works today in all user agents...

[07:06:48.0000] <annevk>
% doesn't as I pointed out...

[07:07:12.0000] <GPHemsley>
so it's a necessity that the URL not work in any current UA?

[07:10:34.0000] <hsivonen>
annevk: %! looks less scary to me than using #

[07:13:14.0000] <GPHemsley>
annevk: What happens if your zip file is created using page.php?file=test.zip ?

[07:15:10.0000] <annevk>
GPHemsley: ? is part of the normal path so that would work

[07:15:36.0000] <SimonSapin>
annevk: isn’t it the query string?

[07:15:46.0000] <annevk>
SimonSapin: query string is part of the path

[07:16:03.0000] <GPHemsley>
annevk: url_test.php?file=test.zip&spacer=1%!example.png wouldn't work

[07:16:04.0000] <annevk>
SimonSapin: in the HTTP sense

[07:16:18.0000] <GPHemsley>
at least, not as currently parsed by PHP

[07:16:18.0000] <annevk>
GPHemsley: why not?

[07:16:33.0000] <SimonSapin>
but in the URL model sense?

[07:16:36.0000] <annevk>
GPHemsley: you realize %!image.png would not go to the server right

[07:16:47.0000] <GPHemsley>
because it sets $_GET['spacer'] = 1%!example.png

[07:16:47.0000] <SimonSapin>
annevk: I think you need to clarify that

[07:17:01.0000] <annevk>
SimonSapin: that's at the end of the email?

[07:17:43.0000] <GPHemsley>
annevk: The %! part currently does get sent to the server, and would in any legacy URL parser, I think.

[07:17:51.0000] <annevk>
GPHemsley: sure

[07:18:10.0000] <annevk>
GPHemsley: actually, legacy parsers ought to reject that

[07:18:22.0000] <GPHemsley>
well, Gecko doesn't

[07:18:52.0000] <annevk>
yeah, in the query string it's a bit more tricky I suppose

[07:18:52.0000] <GPHemsley>
nor does Chrome

[07:18:52.0000] <SimonSapin>
annevk: clarify that %! works in the query string as well as in the path (in URL spec sense)

[07:19:01.0000] <annevk>
SimonSapin: clarify where?

[07:19:07.0000] <annevk>
SimonSapin: nothing of this is defined dude...

[07:19:10.0000] <annevk>
relax

[07:19:35.0000] <SimonSapin>
yeah, I just assumed that this didn’t work but you seemed to assume that it does

[07:19:37.0000] <GPHemsley>
annevk: Is there a reason you can't overload # to be used multiple times?

[07:19:51.0000] <GPHemsley>
e.g. #page_id#/file/path.html

[07:20:51.0000] <annevk>
explained in the email

[07:23:58.0000] <zcorpan>
which browsers treat %! as network error?

[07:27:06.0000] <annevk>
zcorpan: I thought Safari and IE did

[07:27:13.0000] <annevk>
zcorpan: can't reproduce in Safari though

[07:27:29.0000] <annevk>
/me looks in IE

[07:27:49.0000] <zcorpan>
ok

[07:29:15.0000] <annevk>
IE throws for .open("GET", "%") in XHR

[07:35:52.0000] <annevk>
"but adding complexity doesn't" goes on to advocate for the most complex of three variants

[07:37:09.0000] <GPHemsley>
annevk: I've responded to your e-mail. Let me know what you think of my idea. (Caveat: I haven't actually read the media fragments spec to see if it's compatible with my idea.)

[07:37:27.0000] <annevk>
I'm pretty sure media fragments are out

[07:37:33.0000] <annevk>
or fragments in general

[07:41:03.0000] <SimonSapin>
GPHemsley: what would #! be standardized to?

[08:05:22.0000] <jgraham>
GPHemsley: Since there is nothing that depends on this feature so far it seems possible to make it come before the query part. I guess that's kind of ugly though

[08:05:58.0000] <jgraham>
(i.e. http://example.com/foo.php%!path/in/foo?file=test.zip

[08:06:06.0000] <jgraham>
)

[08:06:18.0000] <jgraham>
(means you can't have a ? in the filename)

[08:06:53.0000] <SimonSapin>
jgraham: so the server would have GET /foo.php?file=test.zip  ?

[08:08:07.0000] <jgraham>
Yeah

[08:08:12.0000] <jgraham>
Did I mention ugly?

[08:08:41.0000] <jgraham>
(also, it doesn't solve bz's concern with data: urls)

[08:09:25.0000] <annevk>
jgraham: if you did it that way for data URLs that'd be massively confusing :)

[08:09:27.0000] <SimonSapin>
jgraham: what about data: urls?

[08:10:35.0000] <jgraham>
Right, I think data urls might sink the whole idea?

[08:10:42.0000] <SimonSapin>
is it really useful to extract files from data:application/zip,… ?

[08:11:38.0000] <annevk>
jgraham: No, %! is illegal in data URLs too

[08:11:48.0000] <jgraham>
SimonSapin: Probably someone will want to for some reason. But it also makes things more confusing in general if there are different rules that you have to learn for different special cases

[08:11:59.0000] <annevk>
jgraham: Gecko's current architecture might sink it for Gecko, though...

[08:12:06.0000] <jgraham>
annevk: "illegal", but does it work?

[08:12:37.0000] <annevk>
jgraham: I suspect it wouldn't in IE, but I can't be bothered to open the VM again

[08:12:41.0000] <jgraham>
/me guesses the Blink/WebKit people won't be delighted by non-string origins, but might be wrong

[08:14:50.0000] <annevk>
jgraham: what do you mean?

[08:16:26.0000] <gavinc>
Hrm, anyone know if there was any more thought/action on http://www.w3.org/community/cssselfrags/ ?

[08:17:30.0000] <GPHemsley>
SimonSapin: No idea; perhaps just reserve #-prefixed combos for future use (and define #! using some vague language that corresponds to its usage now)?

[08:18:01.0000] <SimonSapin>
GPHemsley: given everyone is doing their own thing, I don’t now what there is to standardize

[08:18:21.0000] <GPHemsley>
SimonSapin: Don't they all vaguely revolve around AJAXy things?

[08:19:18.0000] <GPHemsley>
jgraham: Yeah, that is ugly, in that it doesn't make logical hierarchical sense.

[08:19:25.0000] <SimonSapin>
yes, vaguely

[08:19:57.0000] <GPHemsley>
SimonSapin: So that might be enough. #-prefix is reserved, #! is AJAKy stuff, #/ is subpath stuff

[08:20:16.0000] <GPHemsley>
then you have an extension vector beyond ZIP

[08:20:26.0000] <GPHemsley>
for packages

[08:20:35.0000] <jgraham>
GPHemsley: Fortunately URLs don't make logical hierachical sense, so that's not a problem

[08:20:53.0000] <SimonSapin>
#foo is already used for anchors

[08:20:54.0000] <GPHemsley>
jgraham: They don't? (Other than domain vs. path direction)

[08:21:04.0000] <jgraham>
…

[08:21:19.0000] <jgraham>
Well other than the cases they don't, they do, sure.

[08:21:36.0000] <GPHemsley>
well besides that one (which IMO is fairly simple), what others are there?

[08:24:00.0000] <GPHemsley>
jgraham: ^

[08:24:16.0000] <zewt>
GPHemsley: i regularly use #arbitrary-junk

[08:24:38.0000] <GPHemsley>
zewt: As in, a non-existent anchor?

[08:25:04.0000] <zewt>
yes

[08:25:27.0000] <zewt>
eg. http://foo.com/app?server=query#client/path?client=query

[08:26:12.0000] <GPHemsley>
oh

[08:26:19.0000] <GPHemsley>
hmm

[08:26:34.0000] <GPHemsley>
my guess is that's frowned upon

[08:26:39.0000] <GPHemsley>
but what do I know

[08:26:52.0000] <SimonSapin>
is it?

[08:27:09.0000] <zewt>
*shrug* nothing wrong with it

[08:27:32.0000] <zewt>
for that matter, gmail does it

[08:27:48.0000] <zewt>
(just happened to glance over at my gmail window, heh)

[08:28:16.0000] <zewt>
anyway, just saying it's too late to try to "reserve" #stuff

[08:28:24.0000] <GPHemsley>
ah, so they do

[08:28:44.0000] <GPHemsley>
well, that's why this spec might be useful :P

[08:28:52.0000] <GPHemsley>
standardize on a single one

[08:29:19.0000] <GPHemsley>
although I suppose Gmail's usage isn't strictly bad

[08:29:25.0000] <GPHemsley>
since it can be considered an ID

[08:29:37.0000] <zewt>
well, any path might be considered an ID

[08:29:46.0000] <GPHemsley>
perhaps

[08:29:57.0000] <GPHemsley>
but they seem to be #<mailbox>/<hash>

[08:30:02.0000] <zewt>
settings uses things like "#settings/general"

[08:31:18.0000] <GPHemsley>
fine, #<page>[/<hash>]?

[08:32:02.0000] <zewt>
it's just a magic-client-encoded-thing-that-looks-like-a-path, i don't know all the cases they use of course

[08:32:18.0000] <GPHemsley>
the beauty of having a reserved #/ for a path is that you can define how to parse it

[08:32:36.0000] <GPHemsley>
and then suddenly everyone can use it interoperably

[08:32:47.0000] <zewt>
there's "#label/label name/thread id" if you're viewing a thread while in a label view

[08:33:01.0000] <zewt>
you can treat #foo as a path and parse it, with or without a leading /

[08:33:29.0000] <zewt>
(as long as it won't explode violently if people put weirdo things in there)

[08:33:39.0000] <GPHemsley>
yes, you can

[08:33:50.0000] <GPHemsley>
the prefix would indicate that it is definitely a path, though

[08:33:59.0000] <GPHemsley>
as opposed to just an opaque ID

[08:34:27.0000] <zewt>
well, "most likely a path"

[08:35:20.0000] <zewt>
but i mean, you can expose an API that says "return data from the start of the fragment to the first ?", which would give any path-like part of the fragment, and if you're not using the fragment like that, you just don't use that function

[08:35:40.0000] <GPHemsley>
sure

[08:52:19.0000] <annevk>
You don't need to be confident as fragments for zip archives have no meaning. However, fragments for zip archives don't work because of relative URLs.

[08:52:48.0000] <annevk>
I'd personally be fine with not supporting that case, but other people aren't.

[08:53:59.0000] <SimonSapin>
why wouldn’t it work to special-case relative URLs in zip?

[08:54:17.0000] <zewt>
i don't follow--none of the proposals would work for relative urls without extra work

[08:54:51.0000] <zewt>
personally I suspect supporting zips for navigation is a massively bad idea...

[08:55:43.0000] <jgraham>
People seem to want to package up whole apps/bundles of resources in a single HTTP request

[08:55:44.0000] <zewt>
doesn't seem to justify the complexity

[08:55:58.0000] <jgraham>
This use case keeps coming up

[08:56:07.0000] <zewt>
as hixie would say, that's not a use case

[08:56:32.0000] <jgraham>
Well sure. I'm the wrong person to defend this

[08:56:48.0000] <zewt>
the only use case i can see is "distribute a website as a single file that can be loaded directly"

[08:56:54.0000] <jgraham>
But I think there are actual use cases being mentioned

[09:00:15.0000] <annevk>
zewt: e.g. a game you want to distribute to a bunch of sites in an <iframe>, or probably more common, an ad

[09:00:29.0000] <annevk>
zewt: people use Flash for it today, because of the convenient container format

[09:00:53.0000] <zewt>
i don't see why that needs to be bundled in one file

[09:02:05.0000] <jgraham>
I'm not sure what a use case that *required* everything to be bundled in a single file would look like. But doing so can have advaantages e.g. fewer round trips to load, easier to embed, etc.

[09:02:31.0000] <annevk>
That's how existing infrastructure deals with these things. Everything can be changed of course, but that's the XHTML2 approach. Re-architect the things you have and you'll be fine.

[09:03:06.0000] <zewt>
bundling resources to reduce fetches is one thing (when you have 100 16x16 icons), but that doesn't argue for reducing to *1* fetch

[09:03:55.0000] <zewt>
so the web should optimize for infrastructure built specifically for Flash? uh okay

[09:04:05.0000] <jgraham>
Hmm?

[09:04:13.0000] <jgraham>
It's not infrastructure built for flash

[09:04:31.0000] <jgraham>
The flash example is "people are working around the lack of this today by using a non-web technology"

[09:04:46.0000] <zewt>
then what are we talking about? clearly not infrastructure built for the web, since we're talking about something the web can't do

[09:05:12.0000] <jgraham>
Flash is a non-web technology

[09:05:35.0000] <jgraham>
Today people bundle resources in flash files and include them on web pages as opaque blobs

[09:05:55.0000] <zewt>
sorry, you've lost me--I said "instrastructure for Flash", you say "not flash", I say "then what?" and you reply "flash" :)

[09:06:18.0000] <jgraham>
I said not infrastructure built for flash

[09:06:27.0000] <jgraham>
I don't even know what that is

[09:11:47.0000] <annevk>
Hixie_: why does "Too many recipients to the message" require moderator approval on whatwg⊙wo?

[09:11:52.0000] <annevk>
Hixie_: that seems annoying

[09:36:14.0000] <GPHemsley>
annevk: Probably a spam protection

[09:36:29.0000] <GPHemsley>
but it would be good if subscribers were exempt from that

[09:39:38.0000] <GPHemsley>
annevk: Fragments for zip archives work even with relative URLs if you allow multiple uses of # (i.e. #/path#id)

[09:39:58.0000] <GPHemsley>
(and the path fragment comes before the ID fragment)

[09:40:35.0000] <annevk>
GPHemsley: there's too many infrastructure changes required for fragment identifiers

[09:40:55.0000] <GPHemsley>
annevk: Examples?

[09:41:03.0000] <annevk>
GPHemsley: fragment identifier changes don't roundtrip through fetch so you'd need all kinds of special casing

[09:41:12.0000] <annevk>
GPHemsley: as explained in my email...

[09:42:04.0000] <annevk>
I should probably just have left it out as suggestion altogether...

[09:42:12.0000] <GPHemsley>
I've read your e-mail. So please either point me to a specific paragraph where you think you explained it already, or please answer my question directly.

[09:49:00.0000] <annevk>
Dude, I just explained it

[09:50:34.0000] <GPHemsley>
annevk: Special casing where?

[09:52:03.0000] <annevk>
Where you specify the URL? E.g. <img>, <a>, <script>, etc.

[09:55:53.0000] <Hixie_>
annevk: it's a common source of spam.

[09:57:01.0000] <annevk>
zewt: the directory is at the end of zip archives

[09:57:06.0000] <annevk>
zewt: Eric is right

[09:57:45.0000] <Hixie_>
annevk: also really it usually means that you're annoying people (how often do all those people really need to be cc'ed?)

[09:58:03.0000] <annevk>
Hixie_: they asked

[09:58:22.0000] <Hixie_>
i said "usually", not always :-)

[09:58:33.0000] <annevk>
hah

[10:00:53.0000] <annevk>
https://twitter.com/stevelosh/status/372740571749572610 is pretty good

[10:00:55.0000] <GPHemsley>
annevk: Are you saying that you'd have to special-case the ZIP URL in each of the definitions for <img>, <a>, <script>, etc.?

[10:01:27.0000] <annevk>
GPHemsley: you'd special-case the Document as being derived from zip, and then whenever you have fragment references you need to do special handling

[10:02:03.0000] <zewt>
annevk: i know they're at the end of zip archives (i've implemented zip clients like four times), you read the end of the file first

[10:03:17.0000] <annevk>
zewt: you don't get the end of the file first over HTTP...

[10:04:25.0000] <zewt>
that's why you use range requests

[10:04:30.0000] <annevk>
o_O

[10:04:40.0000] <zewt>
...

[10:05:12.0000] <annevk>
That's not at all streaming as commonly understood

[10:05:27.0000] <zewt>
we're not talking about streaming at all

[10:05:36.0000] <annevk>
Oh yes we were.

[10:05:39.0000] <zewt>
(this isn't a streaming feature at all)

[10:05:41.0000] <zewt>
no, we're not.

[10:05:45.0000] <annevk>
Well whatever then.

[10:05:59.0000] <zewt>
why are you so obnoxiously snarky lately? it's very tiresome

[10:07:13.0000] <annevk>
Because Eric said "it's not a great format because it's not streamable" and you say it's not about streaming.

[10:09:14.0000] <zewt>
streaming is "read the start of a file and take data as it comes in"; this isn't a streaming feature at all, it's a random access feature

[10:09:14.0000] <zewt>
and zips support both

[10:09:14.0000] <zewt>
eric misused the word "streaming", and I explained in my email that what this feature wants is random access, not streaming (and how it supports both).

[10:10:35.0000] <annevk>
Even random access is poor because it's at the end of the zip archive

[10:11:59.0000] <annevk>
In any event, I gave up because we don't really have to agree on this

[11:07:35.0000] <TabAtkins>
Do we generally dislike putting things on navigator, or are there good reasons to do so sometimes?

[11:08:18.0000] <Ms2ger>
If they're todo with the navigator, I guess

[11:08:28.0000] <TabAtkins>
"network service discovery"?

[11:08:38.0000] <Ms2ger>
Doesn't sound like it

[11:10:04.0000] <TabAtkins>
"To enable Web pages to connect and communicate with Local-networked Services provided over HTTP..."

[11:11:54.0000] <Domenic_>
what is a navigator anyway

[11:12:00.0000] <Domenic_>
does it navigate the netscape?

[11:12:01.0000] <TabAtkins>
The thing that navigates.

[11:12:04.0000] <TabAtkins>
Yes.

[11:12:14.0000] <TabAtkins>
It's the salty sea-captain of your browser.

[11:12:20.0000] <Hixie_>
i'd put things on navigator if they're abotu the browser specifically

[11:18:19.0000] <wycats>
Hixie_: I'm around finally

[11:19:02.0000] <wycats>
the tl;dr is that modules aren't part of <script>s; they're separate files that are loaded through the loader

[11:19:50.0000] <wycats>
there are several approaches we're considering for bundling... zip URLs are one of them, and annevk is helping with that

[11:20:21.0000] <wycats>
but modules are always name->exports

[11:20:44.0000] <wycats>
when you import { something } from "name", the Loader goes through a bunch of user/browser specified hooks that end up with a fetched source

[11:21:03.0000] <wycats>
which is then processed for exports

[11:21:47.0000] <wycats>
if the source is an ES6 module, the system will do the processing, but an author can also override the link hook to process foreign modules (AMD/CommonJS/etc) as long as they can produce an immutable set of exports

[11:24:28.0000] <wycats>
Hixie_: is that any clearer?

[11:27:00.0000] <miketaylr>
TabAtkins: i know rwaldron gets upset about adding things to navigator, but I think it's fine if it is somehow related to device (or browser as proxy for device)

[11:39:16.0000] <rwaldron>
miketaylr: doesn't matter, the navigator object is already the new garbage dump, so it's lost cause to care.

[11:39:58.0000] <miketaylr>
/me shrugs

[11:41:09.0000] <rwaldron>
Anyway, I agree with the positions stated above, ie. "<Hixie_> i'd put things on navigator if they're abotu the browser specifically" and "<Ms2ger> If they're todo with the navigator, I guess"

[11:41:45.0000] <Hixie_>
wycats: why couldn't you declare a module with <script>?

[11:41:46.0000] <rwaldron>
getUserMedia? vibrate? contacts?

[11:42:01.0000] <rwaldron>
those are not browser related and yet... there they are.

[11:42:09.0000] <Hixie_>
wycats: i mean, if we added the logic to do that

[11:42:31.0000] <wycats>
Hixie_: we could have <script module="name">...</script>

[11:42:39.0000] <wycats>
that would work, and be up to the browser to manage

[11:42:46.0000] <Hixie_>
wycats: that's what i proposed in the script preloading e-mail yesterday, fwiw

[11:43:32.0000] <wycats>
From the perspective of ES6, the browser loader is just managing the storage for the "name" module

[11:43:41.0000] <Hixie_>
right

[11:44:13.0000] <Domenic_>
yeah that would just be (optimizable) sugar for <script>Loader.load("name");</script>

[11:44:18.0000] <wycats>
it's potentially slightly confusing from a terminology perspective

[11:44:27.0000] <wycats>
<module name="foo">...</module> might be better

[11:44:35.0000] <wycats>
since the contents of the script tag isn't a JS script

[11:44:37.0000] <Domenic_>
<link rel="js-module">?

[11:44:41.0000] <Hixie_>
Domenic_: it has other advantages, e.g. it lets you make other scripts wait until this one is downloaded before they try to run

[11:44:43.0000] <wycats>
links don't close

[11:45:01.0000] <Hixie_>
<module> has a very poor back-compat story and <link> wouldn't let you do inline modules

[11:45:05.0000] <Domenic_>
Hixie_: ah right, that whole microsyntax that was developing.

[11:45:29.0000] <wycats>
Hixie_: <script type="module"> :P

[11:45:45.0000] <Hixie_>
wycats: well that's what module="" would do, the type is still js

[11:46:02.0000] <wycats>
you probably want it to not be parsed in old browsers so it could be polyfilled

[11:46:05.0000] <wycats>
via a transpiler

[11:46:07.0000] <Hixie_>
wycats: does running a script that contains nothing but a module declaration throw a SyntaxError? or does it do something else?

[11:46:17.0000] <wycats>
Hixie_: there is no such thing as a module declaration

[11:46:19.0000] <wycats>
(anymore)

[11:46:22.0000] <Hixie_>
oh

[11:46:29.0000] <Hixie_>
so you can't distinguish a module from a program at a syntax level?

[11:46:50.0000] <wycats>
Hixie_: exactly

[11:46:52.0000] <Hixie_>
interesting

[11:46:55.0000] <Domenic_>
wycats: oh??

[11:46:57.0000] <wycats>
except for the existence of import/export

[11:47:05.0000] <Domenic_>
woah, things have changed

[11:47:14.0000] <wycats>
Domenic_: we're going to lean on network-level bundling (SPDY, HTTP2, zip URLs, etc.) for bundling

[11:47:21.0000] <Hixie_>
import/export would fail in legacy browsers?

[11:47:28.0000] <Domenic_>
wycats: +1 from me, just thought that was a non-starter for consensus

[11:47:29.0000] <wycats>
Hixie_: yep

[11:47:39.0000] <Hixie_>
ok then polyfilling is easy, since the script would fail

[11:47:42.0000] <wycats>
which is why I was suggesting <script type="module" module="foo">

[11:47:45.0000] <Hixie_>
no need to do anything more explicit

[11:48:00.0000] <wycats>
it's theoretically possible to have a module with no import/export

[11:48:25.0000] <Hixie_>
would such a module be able to detect it was being run as a module vs a program?

[11:48:29.0000] <Domenic_>
^ fairly common for shim modules

[11:48:38.0000] <wycats>
Hixie_: yes, modules opt into strict mode, for one thing

[11:48:43.0000] <wycats>
they also have different scope

[11:48:51.0000] <Hixie_>
ok so it could just do its own fallback handling

[11:48:53.0000] <wycats>
var foo = 1 doesn't pollute the global scope in modules

[11:49:01.0000] <Hixie_>
"ok, i'm a program, let's do this..." vs "ok, i'm a module, let's do that..."

[11:49:49.0000] <wycats>
Hixie_: it would be nicer to stop modules from loading at all in old browsers

[11:50:10.0000] <Hixie_>
just stick an import declaration

[11:50:16.0000] <Hixie_>
it'll fail early

[11:50:19.0000] <wycats>
would <script type="text/javascript; module"> be parsed as JS

[11:50:20.0000] <Hixie_>
or export

[11:50:22.0000] <Hixie_>
or whatever

[11:50:27.0000] <wycats>
Hixie_: perhaps

[11:50:40.0000] <Hixie_>
you don't want to require type=module, since it'll be a cost you have to pay for all time

[11:50:41.0000] <wycats>
I'm unsure what the consequences of gratuitous exceptions might be

[11:50:53.0000] <wycats>
type=module could be optional

[11:50:55.0000] <wycats>
just to aid polyfills

[11:51:03.0000] <Hixie_>
well they can do that regardless

[11:51:05.0000] <wycats>
it's just a type that new browsers treat as JS

[11:51:09.0000] <Hixie_>
type=text/plain or whatever

[11:51:14.0000] <Hixie_>
oh, i see

[11:51:17.0000] <wycats>
no... if they do it it will block new browsers from parsing as JS

[11:51:24.0000] <wycats>
c

[11:51:25.0000] <Hixie_>
/me shrugs

[11:51:26.0000] <wycats>
(confirm)

[11:51:42.0000] <wycats>
Hixie_: it's a pretty simple back-compat hack without long-term consequences

[11:51:58.0000] <Hixie_>
unless there's a big problem here it seems simpler to not do anything

[11:52:13.0000] <Hixie_>
anyway. how much are we really expecting authors to bother with modules and try to be backwards-compatible?

[11:52:21.0000] <Hixie_>
i'd expect authors to wait a few years before trying to use this

[11:52:29.0000] <Hixie_>
doesn't seem worth the pain

[11:52:46.0000] <wycats>
I plan to use modules within months for Ember

[11:52:50.0000] <wycats>
via polyfills

[11:52:53.0000] <wycats>
and transpilers

[11:53:16.0000] <wycats>
https://github.com/square/es6-module-transpiler

[11:53:23.0000] <Hixie_>
sure but you're not going to use <script module> to do it, you didn't even know it was an option :-P

[11:53:44.0000] <wycats>
for now, I can tell people to do <script type="text/x-module">

[11:53:49.0000] <wycats>
and not worry about future breakage

[11:53:59.0000] <wycats>
but it would be nice if there was something that would "just work" in the future

[11:54:16.0000] <wycats>
so eventually the polyfill could be retired

[11:54:24.0000] <wycats>
or only loaded in old browsers

[11:54:56.0000] <Hixie_>
in the future, there won't be old browsers

[11:54:57.0000] <Hixie_>
:-)

[11:55:06.0000] <wycats>
in the far future, there won't be old browsers

[12:01:38.0000] <Hixie_>
bbiab, food

[14:46:40.0000] <gavinc>
/me cries at url handling

[14:46:55.0000] <gavinc>
 Fish%20&amp%3B%20Richardson gee thanks for turning the URL into HTML

[15:07:52.0000] <annevk>
whoa, seems a couple of people replied to my email

[15:08:14.0000] <annevk>
oh no, it's mostly fine

[15:22:35.0000] <annevk>
gavinc: that looks some other layer got in between, that's not typical URL handling, unless you're messing with the wrong encodings... but then you wouldn't get that exactly either

[15:24:39.0000] <MikeSmith>
annevk: last week when you were talking about this zip and URL stuff I hadn't realized where you were headed with it. This is pretty cool (now that I understand)

[15:24:54.0000] <MikeSmith>
I hope it gets some interest and support

[15:27:20.0000] <annevk>
It's getting a bit more concrete

[15:27:37.0000] <annevk>
There's some notes about other details here btw: https://etherpad.mozilla.org/zipurls

[15:31:25.0000] <MikeSmith>
/me reads

[15:32:41.0000] <MikeSmith>
nice simple API

[15:35:38.0000] <annevk>
I'm fearing it might get more complicated if people want to support creation client-side

[15:35:59.0000] <Hixie_>
so does nobody have an opinion on the script preloading thing other than kyle? (kyle promised to write me some e-mails this weekend)

[15:36:26.0000] <annevk>
"some emails"? *braces for impact*

[15:36:38.0000] <annevk>
I suspect JakeA will review

[15:37:01.0000] <Hixie_>
he said he'd take some time to make them shorter, so there's hope :-)

[15:37:11.0000] <annevk>
/me has been working on zip archives

[15:42:40.0000] <zewt>
Hixie: i seem to recall having one, but it's been too long

[15:42:51.0000] <zewt>
i may have got out-bandwidthed on that discussion

[15:45:01.0000] <gavinc>
annevk: Yeah, a few things went wrong to get that result. Javascript bug, apache rewrite bug, template language bug. All combined for awesome.

[15:47:43.0000] <JakeA>
annevk: Hixie_: I'll look through it all tomorrow. It's possible he has a point, I just haven't seen it yet. I'll need to sharpen my cruft scythe to cut through all the word-fern

[16:26:15.0000] <Hixie_>
zewt, JakeA: in my last e-mail there was a proposal that should address most use cases. i'm particualrly interested in feedback on that proposal (whether i missed use cases that it fails, whether some use cases should be abandoned and thus the proposal simplified, or whether there's another way to address those use cases)


2013-08-29
[18:04:12.0000] <Hixie_>
man, i hate twitter. not even enough room for "thanks!" in my last tweet.

[18:20:51.0000] <tantek>
Hixie_ perhaps you should start tweeting from your own site instead. #indiewebcamp ;)

[18:21:06.0000] <Hixie_>
how would that reach the people on twitter?

[18:21:31.0000] <Hixie_>
i only tweet when i have to respond to something there

[18:21:46.0000] <tantek>
Hixie_ I've been tweeting from my own site since 2010-01-01

[18:22:14.0000] <tantek>
"how would that reach the people on twitter?" in short, POSSE

[18:22:54.0000] <tantek>
longer explanation: http://indiewebcamp.com/POSSE

[18:23:23.0000] <tantek>
specifically for responding to something on Twitter: http://indiewebcamp.com/Twitter#POSSE_Replies_to_Tweets

[18:25:20.0000] <Hixie_>
so... that's exactly what i did

[18:25:40.0000] <Hixie_>
i posted to "my own site", the whatwg mailing list, then responded to a comment on twitter by linking to that.

[18:27:19.0000] <tantek>
ah, a manual POSSE ok

[18:28:18.0000] <Hixie_>
(btw, automated syndication to third-party sites is terrible. it makes interaction with the syndicators on those sites horrible.)

[18:28:51.0000] <Hixie_>
i love how many people have reforwarded paul_irish's tweet and my tweet vs how many have actually given any feedback. -_-

[18:29:22.0000] <tantek>
email is hard, let's tweet

[18:30:03.0000] <Hixie_>
btw i was amused the other day

[18:30:18.0000] <Hixie_>
i was reading some indieweb stuff that someone linked to on g+, i think it wa-- oh, he left.

[18:30:21.0000] <Hixie_>
oh well.

[18:42:12.0000] <MikeSmith>
oh "whenneeded"

[18:42:32.0000] <MikeSmith>
that's quite a string a letteres in a row

[18:46:27.0000] <Hixie_>
yeah the attribute name definitely leaves something to be desired

[18:47:32.0000] <MikeSmith>
random thought for an alternative: "earmarked"

[18:48:11.0000] <MikeSmith>
"I encourage you to work on editing." hah yeah

[18:48:42.0000] <MikeSmith>
"Less words please."

[18:50:51.0000] <Hixie_>
earmarked="asap" vs earmarked="jit"? hmm...

[18:51:11.0000] <Hixie_>
the thing about whenneeded="" is that it is thematically consistent with needed="", at least

[18:51:21.0000] <Hixie_>
and markNeeded(), though i've since renamed that execute() in the proposal

[18:52:12.0000] <MikeSmith>
so could just use "earmark" as a noun instead of "earmarked"

[18:52:54.0000] <MikeSmith>
is there any purpose of the dependency count other than knowing whether it's zero or non-zero?

[18:53:35.0000] <MikeSmith>
or you need the actual count  for knowing how many times you need to iterate?

[18:54:16.0000] <Hixie_>
it's just a boolean, but having it be a count means you don't (as an author) need to do the count yourself

[18:54:51.0000] <MikeSmith>
ok

[18:59:37.0000] <zewt>
i haven't had a chance to go over that email in depth, but one early impression: having a set of strings is easier to debug than a refcount (if somebody forgets to decrement a count, or decrements it twice, it's harder to figure out who than if you add and remove a string from a set)

[19:47:24.0000] <MikeSmith>
Hixie_: so how do I get the dependency count? Or I don't need to, I just do decDependencies() til and if it throws, that's all I need to know?

[19:48:05.0000] <MikeSmith>
also, you got an sentence there that you cut off in mid-thought, "If  decDependencies() is called and it reduces the number to zero,

[19:48:09.0000] <MikeSmith>
...

[19:50:58.0000] <Hixie_>
MikeSmith: you shouldn't need the number yourself, i don't think

[19:51:06.0000] <MikeSmith>
ok

[19:51:15.0000] <Hixie_>
MikeSmith: yeah, the sentence should be something like "...zero, you check if you should run the script" or some such

[21:31:46.0000] <MikeSmith>
Hixie_: for the case of <table><input></table> do you think the validator should emit an error message or not?

[21:31:50.0000] <MikeSmith>
ideally I mean

[23:11:07.0000] <MikeSmith>
hsivonen: per spec it seems like <table><input></table> should cause a parse error to be reported before it gets foster-parented

[23:11:43.0000] <MikeSmith>
but in the parser code I find no condition under which it will actually report an error

[23:22:44.0000] <MikeSmith>
specifically, in the TreeBuilder code at http://hg.mozilla.org/projects/htmlparser/file/f5c39b263341/src/nu/validator/htmlparser/impl/TreeBuilder.java#l1875 before it checks for type=hidden (and falls back to IN_BODY) or otherwise proceeds, it seems like it should call errStartTagInTable(name) right away

[23:35:38.0000] <hsivonen>
MikeSmith: OK

[23:36:31.0000] <MikeSmith>
hsivonen: should I raise a bug and make a patch?

[23:46:18.0000] <hsivonen>
MikeSmith: makes senes

[23:46:20.0000] <hsivonen>
sense

[23:46:37.0000] <MikeSmith>
k

[00:42:34.0000] <zcorpan>
annevk: application/xml doesn't work for .svg if you want to be able to embed it in <img>

[00:43:27.0000] <zcorpan>
annevk: also, mapping for .xhtml and .xht are usually application/xhtml+xml

[00:44:45.0000] <zcorpan>
annevk: iirc, the correct type for .ico is image/x-icon (MS don't use image/vnd.microsoft.icon and they didn't register it)

[00:52:00.0000] <zcorpan>
Hixie_: how about when="asap", when="jit"?

[00:52:42.0000] <zcorpan>
or when=needed :-)

[01:09:44.0000] <hsivonen>
annevk: could you retweet https://twitter.com/hsivonen/status/372993894767525888 from @encodings please?

[02:02:44.0000] <jgraham>
I agree with zewt about the refcount sounding hard to debug

[02:59:22.0000] <hsivonen>
Clearly, I don't have enough Twitter followers using the Greek localization of Windows

[03:03:16.0000] <zcorpan>
hsivonen: is there data on how often users switch style sheets in firefox?

[03:04:22.0000] <hsivonen>
zcorpan: I don't know. probably not

[03:04:31.0000] <zcorpan>
ok

[03:04:59.0000] <hsivonen>
zcorpan: why do you want to know?

[03:05:58.0000] <zcorpan>
hsivonen: i'm investigating whether alternative stylesheets can be dropped from the web platform

[03:06:08.0000] <annevk>
zcorpan: good point about SVG, I don't want to do XHTML unless we decide we need MIME type to decide Document type which would be unfortunate

[03:08:14.0000] <annevk>
hsivonen: will do, if you have access to WHATWG GitHub you can do that too though

[03:08:42.0000] <hsivonen>
zcorpan: Would x%  of Firefox sessions involve an alternative stylesheet having been selected at least once during the session be a suitable metric?

[03:09:05.0000] <hsivonen>
annevk:  If I have access, I don't know about it. Thanks.

[03:10:00.0000] <annevk>
hsivonen: do you want to be a member?

[03:10:16.0000] <hsivonen>
annevk: ok

[03:11:10.0000] <annevk>
hsivonen: added

[03:11:25.0000] <hsivonen>
annevk: you retweeted as URL, but close enough :-)

[03:11:28.0000] <hsivonen>
annevk: thanks

[03:11:48.0000] <annevk>
hsivonen: oh lol

[03:11:51.0000] <annevk>
/me fixes

[03:13:27.0000] <zcorpan>
hsivonen: yeah, i guess

[03:14:16.0000] <hsivonen>
zcorpan: ok. that would be pretty easy to do with telemetry

[03:34:07.0000] <annevk>
Modules without module {}; that's kinda neat.

[03:44:07.0000] <zcorpan>
hsivonen: it would also be interesting to know how often stylesheets are switched using javascript. i would expect most users that switch stylesheets use page-provided button rather than the browser's View menu

[03:44:39.0000] <hsivonen>
zcorpan: ah. that might be harder to detect

[03:45:34.0000] <zcorpan>
hsivonen: i think the most common way to switch is toggling .disabled on <link>, but i don't have data on that

[03:46:21.0000] <zcorpan>
(and it doesn't work in webkit/blink (anymore))

[03:55:13.0000] <zcorpan>
hsivonen: blink/webkit have UseCounter to measure API usage. does gecko have something like that?

[04:01:35.0000] <Ms2ger>
/me wonders if Opera had that first

[04:02:10.0000] <jgraham>
zcorpan: Looks like you can do something like that. Although I haven't quite worked out which API one uses for counting things

[04:02:22.0000] <jgraham>
Ms2ger: I don't think so

[04:20:33.0000] <hsivonen>
zcorpan: not in genenic way

[04:20:39.0000] <hsivonen>
generic

[04:21:25.0000] <hsivonen>
aargh. Our Macedonian localization defaults to UTF-8

[04:21:31.0000] <hsivonen>
why not windows-1251?

[04:22:46.0000] <hsivonen>
I think I'm done tilting at the localization windmills and will now endeavor to take this stuff away from localizations.

[04:22:55.0000] <hsivonen>
The files on spec bugs, though.

[04:23:14.0000] <hsivonen>
The spec doesn't cover Belarusian, Kazakh or Macedonian

[04:23:18.0000] <hsivonen>
or Greek

[04:27:17.0000] <annevk>
/me -> lunch

[04:29:05.0000] <SimonSapin>
hsivonen: is there a spec describing all that?

[04:29:52.0000] <hsivonen>
SimonSapin: not all that. I need to file spec bugs to broaden the HTML spec's coverage

[04:32:06.0000] <JakeA>
annevk: If I navigate to a file within a zip, how does the browser know how to render it, given the lack of content-type?

[04:32:15.0000] <JakeA>
(still working through the thread, so sorry if that came up)

[04:42:15.0000] <zcorpan>
has IE always had swapNode()?

[04:43:08.0000] <zcorpan>
document.documentElement.swapNode(document.doctype) works

[05:03:18.0000] <darobin>
haha, sweet

[05:04:54.0000] <darobin>
zcorpan: I have dim memories of using swapNode() from a long time ago; I suspect it's been around for quite a while

[05:04:57.0000] <darobin>
it's nice, too

[05:37:27.0000] <annevk>
JakeA: file extension

[05:37:48.0000] <JakeA>
annevk: Would that be a new thing to add to the platform?

[05:37:57.0000] <annevk>
JakeA: yes

[05:38:10.0000] <JakeA>
gotcha

[05:38:14.0000] <annevk>
JakeA: congrats on being the first to think about this

[05:38:19.0000] <annevk>
JakeA: https://etherpad.mozilla.org/zipurls explains it

[05:38:37.0000] <annevk>
JakeA: might put that text in http://fetch.spec.whatwg.org/ later today so it's more readable

[05:41:10.0000] <annevk>
JakeA: oh, many good points in your email

[05:41:20.0000] <annevk>
JakeA: we'd need to forward some headers indeed

[05:42:41.0000] <JakeA>
/me wonders if index.html would be returned for a zip url for a directory that contained an index.html

[05:44:39.0000] <annevk>
JakeA: you mean if you do html.zip%! ?

[05:44:48.0000] <JakeA>
yeah

[05:44:56.0000] <annevk>
JakeA: we could

[05:45:00.0000] <JakeA>
or whatever.zip%!dir

[05:45:06.0000] <JakeA>
where there was a dir/index.html

[05:45:18.0000] <annevk>
JakeA: that's more magical

[05:45:25.0000] <annevk>
JakeA: because there could be a "dir" too

[05:45:34.0000] <annevk>
although I guess we could go by lack of extension

[05:45:43.0000] <annevk>
or require a trailing /

[05:46:27.0000] <annevk>
I guess in general we could add those kind of things, but it would involve more logic and reinventing even more stuff

[05:46:31.0000] <JakeA>
I was pondering what would break if I took an existing static site and zipped it

[05:46:33.0000] <annevk>
e.g. would it then look for index.xml ?

[05:46:55.0000] <JakeA>
agree it's magic, but perhaps expected

[05:47:42.0000] <JakeA>
tbh, most of the complication here is allowing full pages to load from a zip

[05:49:45.0000] <annevk>
JakeA: that's what pushes you from fragments to sub-scheme / zip-path, agreed

[05:50:04.0000] <annevk>
JakeA: either way complexity is there though

[05:50:49.0000] <JakeA>
annevk: yeah, I thought for a moment the relative-url problem goes away if it was only allowed on resources, but it doesn't (css, svg etc)

[05:51:25.0000] <JakeA>
in fact, having relative urls work feels super important for css

[05:54:14.0000] <annevk>
Yeah, should probably start using CSS as example

[06:10:06.0000] <annevk>
JakeA: replied. Still don't quite a good argument against the "use a fancy server setup" annoyingly enough

[06:10:48.0000] <annevk>
JakeA: I guess it sorta boils down to "don't argue for XHTML2 when we can do this in HTML instead" but it doesn't fit exactly

[06:11:42.0000] <JakeA>
yeah, I know what you mean.

[06:11:59.0000] <jgraham>
FWIW I assume that module syntax could be changed if there was a strong benefit to having multiple modules in a file

[06:12:15.0000] <JakeA>
But we already have concatenation of CSS, JS, image spriting… I don't think there's a benefit combining the different types together

[06:12:37.0000] <JakeA>
If I combine CSS & JS, I'm delaying first-render

[06:12:39.0000] <annevk>
jgraham: It was recently changed to remove it

[06:13:58.0000] <annevk>
JakeA: that depends on request latency vs bandwidth too

[06:14:08.0000] <annevk>
JakeA: with high latency a single request might be good

[06:14:32.0000] <annevk>
JakeA: especially if we improve the zip archive format over time (or introduce a fancy researched alternative)

[06:15:25.0000] <jgraham>
annevk: I know, but that could have been because the use case wasn't discussed, or they didn't consider the problems with zip files or something

[06:15:55.0000] <JakeA>
annevk: If first render requires HTML + CSS (2 requests), then HTML + ZIP{CSS + JS} (2 requests) is going to take longer no matter what the latency is

[06:16:11.0000] <JakeA>
since ZIP{CSS + JS} will be larger than CSS

[06:17:35.0000] <jgraham>
Uh

[06:17:52.0000] <jgraham>
I assume you mean ZIP(CSS+JS) will be larger than ZIP(CSS)

[06:18:49.0000] <jgraham>
But it is also possible that the optimal is HTML(inc. minimal inline CSS) + ZIP(CSS+JS)

[06:18:59.0000] <annevk>
JakeA: I'm saying it might be less long overall and for high latency that might be better

[06:19:32.0000] <JakeA>
jgraham: I was assuming the CSS would be gzipped

[06:19:41.0000] <annevk>
JakeA: if you argue on perf grounds however you clearly want a fully optimized HTTP2 setup that's not going to be in the hands of anyone soon

[06:19:57.0000] <JakeA>
jgraham: and yeah, inline CSS would be faster still

[06:22:24.0000] <wilhelm_>
Is this stuff in any spec yet?

[06:22:30.0000] <JakeA>
annevk: if the use-case here is cutting down http requests for performance reasons, we need a format that allows for streaming, otherwise we're trading time-to-first-render for overall load time, and I think the former is better in most cases

[06:22:53.0000] <JakeA>
Eg, I'd rather look at the core content but missing imagery than a blank screen

[06:23:23.0000] <annevk>
JakeA: I think the use cases are easier management of files and dealing with the myriad of zip archive-based formats out there

[06:26:42.0000] <jgraham>
I think it is inevitable that people will want to use this for performance

[06:27:25.0000] <annevk>
They might, and if it doesn't work they'll switch back. Or Google or Apple or Microsoft will invent a better format with the same properties.

[06:27:44.0000] <JakeA>
I guess it'd be useful for things I explicitly don't want to render progressively, like fonts maybe

[06:28:12.0000] <JakeA>
especially different weights of the same typeface

[06:28:31.0000] <annevk>
Or things you want to have fetched together. Or things you want to distribute on lots of servers without having to worry about files going missing or getting replaced.

[07:14:30.0000] <annevk>
JakeA: more to the point, do you think Chrome would be interested in implementing something like this?

[07:14:42.0000] <GPHemsley>
I was considering adding recommended file extensions to mimesniff before; would that be helpful with zip packages?

[07:16:47.0000] <annevk>
No, and please don't do that

[07:17:41.0000] <GPHemsley>
/me goes back to not caring about things

[07:17:48.0000] <annevk>
Apart from one sad place in plugin loading, the web doesn't do extensions.

[07:19:36.0000] <GPHemsley>
The original intent was for downloading

[07:21:00.0000] <annevk>
Oh, opposite direction...

[07:21:01.0000] <JakeA>
annevk: no idea tbh, Alex Russell has better contacts there. If it's required to sensibly work with ES modules, I guess it'll go in

[08:57:00.0000] <annevk>
heycam|away: so we need actual Array in IDL

[08:57:17.0000] <annevk>
heycam|away: and I'd like to hint in the IDL what developers can expect

[08:57:30.0000] <annevk>
heycam|away: e.g. Promise<Array[DOMString]>

[09:11:34.0000] <jgraham>
Ms2ger: So if the manifest files for w-p-t aren't going to be human-written, shall I just switch to manifestdestiny?

[09:12:19.0000] <Ms2ger>
So what did we end up with?

[09:14:54.0000] <Ms2ger>
Autogenerated manifests in the repo?

[09:15:06.0000] <jgraham>
I think we ended up with -manual suffix indicates a manual test, -ref suffix indicates a ref, markup files containing testharness.js scripts are testharness files and markup files containing whatever the reftest stuff is are ref files. All other files are helper files except a blacklist of files/directories that are nothing

[09:15:35.0000] <jgraham>
And maybe we get override.manifest (which could be a different format)

[09:15:56.0000] <jgraham>
Depending on what happens about tests that want URLs

[09:17:17.0000] <Ms2ger>
I think I'd prefer just having a python script that computes and returns the data

[09:17:25.0000] <Ms2ger>
Rather than that + its output

[09:19:42.0000] <jgraham>
If you do that you can't cache it

[09:19:47.0000] <jgraham>
Which is annoying

[09:20:13.0000] <jgraham>
In particular if you want to parse files rather than use regexps, it's necessary to allow incremental updates

[09:20:32.0000] <jgraham>
Alhtough I guess maybe just dumping JSON would work too

[09:21:10.0000] <jgraham>
In fact that seems far and away the simplest thing

[09:21:13.0000] <jgraham>
I'll do that

[09:21:58.0000] <jgraham>
(also, for Moz. we need to store the expected result of each test somewhere, and I imagine that will also be in the manifest, on a local branch)

[09:22:04.0000] <Ms2ger>
How does updating work anyway? Based on timestamps?

[09:22:12.0000] <jgraham>
Based on git hash

[09:22:22.0000] <jgraham>
I haven't fully thought about this yet

[09:22:39.0000] <Ms2ger>
And a local branch of what?

[09:22:50.0000] <Ms2ger>
For the expected result

[09:23:06.0000] <Ms2ger>
You need to be able to easily update those in an m-c push

[09:23:08.0000] <jgraham>
Well

[09:23:20.0000] <jgraham>
This is the bit I haven't fully thought about yet

[09:23:41.0000] <Ms2ger>
That's a somewhat important bit :)

[09:24:05.0000] <jgraham>
But I figure you have a local clone with a "mozilla" branch

[09:24:11.0000] <Hixie_>
MikeSmith: for the case of <table><input></table> - sure, why would it not be an error? i mean, it's a content model thing if nothing else

[09:24:22.0000] <jgraham>
And Mozilla is origin/master + a commit that adds the manifests

[09:24:25.0000] <Hixie_>
MikeSmith: note that <input type=hidden> doesn't get foster parented

[09:24:36.0000] <Hixie_>
zcorpan: <script when> doesn't really make sense though

[09:24:37.0000] <Ms2ger>
Hixie_, content model how? There's no input in the table in the DOM

[09:24:47.0000] <jgraham>
and when you update origin you rebase onto that branch

[09:24:51.0000] <jgraham>
Uh

[09:25:01.0000] <jgraham>
You rebase that branch onto origin/master

[09:25:04.0000] <Hixie_>
Ms2ger: oh, fair enough

[09:25:13.0000] <Hixie_>
anything that's foster parented should always be a parse error

[09:25:19.0000] <Ms2ger>
Fair

[09:25:27.0000] <jgraham>
So you are always a few commits ahead of origin, but nothing should conflict

[09:25:31.0000] <Hixie_>
and if it's not foster parented (e.g. cos type=hidden) then it's a content model error instead

[09:25:58.0000] <Ms2ger>
jgraham, no idea what you're saying :)

[09:26:02.0000] <jgraham>
and then in m-c you either copy that branch across with all the manifest data, or make the build process pull in a specific revision of that repo (like gaia)

[09:26:13.0000] <jgraham>
Ms2ger: Oh :(

[09:26:31.0000] <Hixie_>
in other news, the updated dfn.js is cool.

[09:26:35.0000] <Ms2ger>
I *really* don't want to touch other repos to fix Gecko bugs

[09:26:40.0000] <Hixie_>
why i didn't do this earlier, i dunno

[09:27:28.0000] <jgraham>
Ms2ger: Well if you want to commit a test to the other repo you kind of have to. But if you want to use it read-only then copying is a reasonable thing to do ofc.

[09:27:39.0000] <jgraham>
I'm not sure which is best overall

[09:27:45.0000] <annevk>
Hixie_: what's new?

[09:27:52.0000] <jgraham>
But I'm sure this is at least a solvable problem

[09:28:11.0000] <Hixie_>
annevk: it moves the box to the bottom right when you click a link, so you can just go through the others without having to go back to the dfn each time

[09:28:23.0000] <jgraham>
What I am even more worried about is how you get a all the expected data up to date automagically

[09:28:35.0000] <jgraham>
It seems like it has to be racy

[09:28:40.0000] <annevk>
Hixie_: wow

[09:29:10.0000] <Hixie_>
it was like 3 lines of new code

[09:29:12.0000] <jgraham>
Hixie_: Oooh! Neat

[09:29:13.0000] <annevk>
Hixie_: that's awesome

[09:29:25.0000] <Hixie_>
brb commute

[09:30:26.0000] <Ms2ger>
jgraham, how about "each m-c revision knows which tests are expected to fail"?

[09:31:45.0000] <jgraham>
Ms2ger: How though? If I import 100 new tests how do I work out which tests are expected to fail?

[09:32:02.0000] <jgraham>
I can run those tests in a specific revision and update the expectations

[09:32:14.0000] <jgraham>
But by the time I do that there will be a new revision

[09:32:22.0000] <jgraham>
of m-c

[09:32:30.0000] <jgraham>
Which might fail different tests

[09:32:33.0000] <Ms2ger>
And then make sure you push the expectations before something lands that changes the expectations

[09:32:54.0000] <jgraham>
That sounds racy…

[09:33:03.0000] <Ms2ger>
Not more so than any change

[09:35:30.0000] <jgraham>
Hmm, maybeI have to think of m-c as a shared resource with some sort of optimistic concurrency

[09:35:32.0000] <Ms2ger>
Or you can close all the trees :)

[09:36:26.0000] <Ms2ger>
Doesn't help if a change that breaks your expectation landed on fx-team while you landed your update to inbound

[09:38:50.0000] <Ms2ger>
Let's say I don't think someone breaking your tests while you're adding them is something you should worry about a lot

[09:38:57.0000] <jgraham>
So the problem I have is that it doesn't obviously feel like it will be low contention. I don't know what the rate of changesets coming in that affect web platform support is

[09:42:52.0000] <Ms2ger>
Depends on how big your imports will be, I guess

[09:43:06.0000] <Ms2ger>
And how diverse

[09:47:38.0000] <jgraham>
Yeah, I guess that's a good point. If the imports are frequent there is less chance of conflicts.

[09:48:00.0000] <jgraham>
I don't control the diversity though if the goal is to run everything (which I think it is)

[09:48:20.0000] <annevk>
Zip archives: http://fetch.spec.whatwg.org/#zip-archives (has infrastructure plus API, but not the URL/Fetch stuff)

[09:59:25.0000] <SimonSapin>
annevk: does the zip format have a spec you can refer to?

[09:59:57.0000] <annevk>
SimonSapin: I think it might be http://www.pkware.com/documents/casestudies/APPNOTE.TXT

[10:04:56.0000] <jgraham>
My understanding is that that's a "spec" more in the tradition of HTML4

[10:05:18.0000] <jgraham>
i.e. it doesn't actually define enough to provide interop

[10:05:29.0000] <SimonSapin>
jgraham: are you suggesting that annevk should rewrite it? :)

[10:05:40.0000] <zewt>
yeah, I wasn't sure if you mean "refer to" as in "look at as a reference to write a spec" or as in "a normative reference"

[10:05:56.0000] <zewt>
but yes, it definitely needs to be rewritten (a much smaller subset of)

[10:06:22.0000] <zewt>
otherwise it'll be an interop nightmare (for example, like we talked about on the list, the local file header vs. central file directory issue)

[10:07:50.0000] <zewt>
and all the usual error handling and parsing details that non-web-specs rarely address

[10:08:04.0000] <zewt>
afk

[10:08:59.0000] <jgraham>
SimonSapin: I'm suggesting that someone has to if we want this to not be a disaster

[10:09:03.0000] <jgraham>
So yes, in short

[10:12:28.0000] <annevk>
That APPNOTE.TXT file seems to suggest that might not be okay with them? It's a bit unclear what the legal situation is to me.

[10:12:52.0000] <annevk>
Which I guess might kill this thing altogether?

[10:18:44.0000] <tantek>
how does HTTP 1.1 reference gzip compression?

[10:23:27.0000] <jgraham>
RFC 1952

[10:49:59.0000] <Hixie_>
annevk: (your zip idl has > where you want <)

[10:50:11.0000] <Hixie_>
annevk: is there a url format for accessing files in zip archives?

[10:50:44.0000] <Hixie_>
annevk: or do you have to get urls to files out of them by script?

[10:50:46.0000] <TabAtkins>
Hixie_: That's what Anne is trying to come up with.

[10:51:39.0000] <Hixie_>
doesn't it have to be a fragment identifier?

[10:51:48.0000] <Hixie_>
i mean, it's semantically logical, no?

[10:52:13.0000] <Hixie_>
http://.../...zip#path/to/file.html#fragmentInHTMLFile

[10:52:43.0000] <Hixie_>
i guess it makes relative urls weird

[11:28:48.0000] <zewt>
Hixie_: i think all of the approaches do something weird with relative urls

[11:29:39.0000] <zewt>
annevk: sorry, suggest that what might not be okay with them?

[11:30:19.0000] <zewt>
the file format needs respeccing no matter what, as for whether it's okay to use that as a reference I don't know...

[12:47:02.0000] <annevk>
Hixie_: fragment identifiers have problems, see the email

[12:47:20.0000] <Hixie_>
"the"?

[12:47:36.0000] <annevk>
Hixie_: OP

[12:47:45.0000] <Hixie_>
http://lists.w3.org/Archives/Public/public-whatwg-archive/2013Aug/0278.html ?

[12:47:53.0000] <annevk>
Hixie_: yeah

[12:48:39.0000] <Hixie_>
if you're going to change the url syntax anyway, you can make fragments work

[12:48:42.0000] <annevk>
zewt: see section 1.4 of http://www.pkware.com/documents/casestudies/APPNOTE.TXT

[12:48:57.0000] <Hixie_>
just redefine how relative urls are resolved when you're in a "zip context"

[12:49:02.0000] <annevk>
Hixie_: except then you also need to change HTML, CSS, etc. to make them aware they're loaded from a zip

[12:49:25.0000] <Hixie_>
why?

[12:49:32.0000] <annevk>
Hixie_: "zip context" ;)

[12:49:48.0000] <Hixie_>
it's a pretty localised change

[12:49:59.0000] <Hixie_>
you'd just have http://.../...zip#path/to/file#subfrag

[12:50:17.0000] <annevk>
What about the links in #path/to/file ?

[12:50:24.0000] <Hixie_>
and you'd say that when you're in a zip file context resolving a url, "foo/bar" resolves relative to the #path/to/file part

[12:50:47.0000] <Hixie_>
i guess you'd actually only have to change the relative url resolver, not the syntax

[12:50:57.0000] <annevk>
And ##foo would cause scrolling?

[12:51:16.0000] <Hixie_>
just #foo would cause scrolling

[12:52:27.0000] <Hixie_>
it'd require careful thought around how Location exposes these urls

[12:52:55.0000] <annevk>
Given that the resolved URL would also still have the fragments and you'd sometimes have to move them over to Fetch and sometimes handle them locally it would all get rather messy...

[12:53:10.0000] <Hixie_>
i think that's a given regardless of the solution...

[12:53:12.0000] <annevk>
Using a sub-scheme or zip-path seems much simpler

[12:53:26.0000] <Hixie_>
well a subscheme doesn't seem to be any cleaner really

[12:53:30.0000] <Hixie_>
you have all the same problems

[12:53:48.0000] <Hixie_>
like, Location's API would be very confused

[12:54:06.0000] <Hixie_>
anyway, i'm not saying teh frag id thing is a better idea

[13:03:56.0000] <annevk>
Your fragment idea is novel, admittedly. Should probably consider it some more.

[13:05:01.0000] <Hixie_>
might be worth looking at how compound e-mails handle relative urls

[13:05:19.0000] <Hixie_>
oh, here's another idea

[13:05:41.0000] <Hixie_>
so you navigate to http://example.com/foo.zip#baz/bar.html

[13:05:49.0000] <Hixie_>
but the actual URL of the file that's loaded isn't that

[13:06:01.0000] <Hixie_>
it's zip:///baz/bar.html

[13:06:16.0000] <Hixie_>
or zip://36573525327537/baz/bar.html

[13:06:47.0000] <Hixie_>
or zip://example.com/36573525327537/baz/bar.html

[13:07:07.0000] <Hixie_>
where 36573525327537 is some unique id for the zip file

[13:07:12.0000] <Hixie_>
much like how blob: urls work

[13:08:01.0000] <annevk>
Yeah, mnot suggested that too

[13:08:06.0000] <Hixie_>
probably need to encode the origin in there somehow

[13:08:31.0000] <annevk>
Then you have an outer and inner URL and need to deal with origin specially.

[13:08:49.0000] <annevk>
The only problem %/ or %! has is that it's not legal URL syntax at the moment...

[13:08:51.0000] <Hixie_>
well we already have lots of logic for dealing with origins like that

[13:09:22.0000] <Hixie_>
what would %/ have Location.path return?

[13:09:32.0000] <annevk>
Your goal is preserving URL syntax to the extent it is ruined already?

[13:10:07.0000] <Hixie_>
my goal is mainly making it possible to take self-contained stuff, stick it in a zip file, and have it work unmodified

[13:10:11.0000] <zewt>
Hixie_: it seems like it would be nice to not have blob's "local magic URL segment" so ZIP urls can always be sent around like any other URL

[13:10:12.0000] <Hixie_>
even if it messes around with locationpath

[13:10:16.0000] <annevk>
Hixie_: the bit up to %/ I think

[13:10:31.0000] <annevk>
Hixie_: we'd have zipPath for the other bit

[13:10:34.0000] <Hixie_>
zewt: you would have two URLs, one that you send around, and one used internally to make relative urls work

[13:10:49.0000] <Hixie_>
annevk: so you'd still have to redefine relative url resolution

[13:11:06.0000] <annevk>
Hixie_: yes, definitely, the idea of %! is to confine changes to URL and Fetch

[13:11:07.0000] <zewt>
(the whole idea of supporting navigation to zip urls makes me nervous, it's the part that makes everything complicated)

[13:11:20.0000] <Hixie_>
annevk: my concern with that is js-implemented url resolution would utterly break

[13:11:26.0000] <annevk>
zewt: no, CSS with subresources has the same issues

[13:12:05.0000] <annevk>
Hixie_: please hop on the new URL() train?

[13:12:11.0000] <Hixie_>
?

[13:12:23.0000] <zewt>
annevk: not familiar with that

[13:12:50.0000] <annevk>
Hixie_: maybe I'm not following your concern

[13:13:03.0000] <Hixie_>
annevk: say you have some script that does path manipulation

[13:13:21.0000] <Hixie_>
like, it concatenates "/subresource/foo.png" to location.path or something

[13:13:36.0000] <Hixie_>
it would break if you took that whole app and packaged it in a zip, if we change how relative urls work

[13:14:00.0000] <annevk>
Hixie_: it seems that's true for using fragments too

[13:14:07.0000] <Hixie_>
yes

[13:14:25.0000] <Hixie_>
only the inner/outer thing would keep that, of the suggestions i've seen so far, i think

[13:16:24.0000] <annevk>
I guess there's some appeal to it, but it seems fairly bad to introduce even more origin-magic. Shit like that goes wrong all the time. :/

[13:16:43.0000] <Hixie_>
oh?

[13:16:48.0000] <Hixie_>
like when?

[13:16:54.0000] <Hixie_>
we use it e.g. for srcdoc:

[13:17:03.0000] <Hixie_>
not to mention about:blank, of course

[13:17:15.0000] <Hixie_>
(srcdoc="", not srcdoc:)

[13:17:24.0000] <annevk>
It's not like data URLs work fine... Gecko had a bunch of problems with jar URLs. Not sure about srcdoc="".

[13:17:53.0000] <Hixie_>
data: URLs work fine, the problem is that there's two different implementations and people disagree about which we should be doing.

[13:18:24.0000] <Hixie_>
(plus some issues around redirects, but we get that kind of issue with other schemes too)

[13:21:30.0000] <annevk>
Introducing inner/outer seems bad too. And will break code that uses e.g. document.location to get the origin...

[13:25:50.0000] <JakeA>
Can the browser render a html response half way through the transfer, without chunked encoding?

[13:26:04.0000] <Hixie_>
yes

[13:26:19.0000] <JakeA>
Even if it's gzipped?

[13:26:26.0000] <Hixie_>
sure

[13:26:42.0000] <Hixie_>
(whether they do or not, i dunno. but they could.)

[13:26:50.0000] <heycam>
annevk, noted (about Array)

[13:27:01.0000] <Hixie_>
annevk: yeah, that's why i was trying to put the origin into the url somehow...

[13:27:04.0000] <JakeA>
Yeah, thought so, in an argument where I'm being told it's not possible. Pfft.

[13:27:14.0000] <Hixie_>
JakeA: why wouldn't it be possible?

[13:27:37.0000] <JakeA>
Hixie_: yep, that's what I'm saying

[13:27:50.0000] <annevk>
I wonder how much people are confusing gzip and zip

[13:28:10.0000] <annevk>
many...

[13:28:38.0000] <annevk>
heycam: so yeah, we should fix the whole array mess and prolly remove []

[13:28:58.0000] <JakeA>
What's the benefit of chunked encoding then? Flushing without knowing the content length?

[13:29:00.0000] <annevk>
heycam: sequence<> seems good, but could just be "... sequence" maybe?

[13:29:31.0000] <Hixie_>
JakeA: there are various advantages, but yeah, one is not having to know the length ahead of time

[13:29:39.0000] <annevk>
heycam: like Constructor(...Blob parts, Options dict)

[13:30:11.0000] <heycam>
I'm not sure "…" is the right semantics if you want to pass an [] object

[13:30:13.0000] <heycam>
/me -> call

[13:30:21.0000] <JakeA>
Hixie_: cheers!

[13:32:27.0000] <annevk>
heycam: I thought sequence was like var freshArr  = [...arrLike] in ES6

[13:32:38.0000] <annevk>
heycam: I think that's what we want it to be anyway

[13:38:17.0000] <annevk>
heycam: ah calls... boring

[13:38:35.0000] <annevk>
heycam: I also wanted to talk about ByteString and [EnsureUTF16]

[13:39:52.0000] <TabAtkins>
annevk: You don't want to use ... in that way.

[13:40:16.0000] <TabAtkins>
foo(...parts, dict) is equivalent to foo(parts[0], parts[1], parts[2], ..., dict) in user code.

[13:40:27.0000] <TabAtkins>
Which is not the same as what you're trying to indicate there.

[13:40:33.0000] <annevk>
Ah yeah, that's how the constructor should have worked.

[13:40:43.0000] <annevk>
So you want [...Blob] parts I guess

[13:40:47.0000] <TabAtkins>
Yeah.

[13:41:00.0000] <TabAtkins>
I guess.

[13:41:25.0000] <annevk>
Doing new-ES-style destructering makes a lot of sense now it exists

[13:42:19.0000] <annevk>
heycam: I'm not really happy with the syntax at the moment, but http://fetch.spec.whatwg.org/#api is something like what should be expressible I guess

[14:57:31.0000] <Domenic_>
heycam: annevk: TabAtkins: I think ideally parameters that can be "sequences" should just use `Array.from` semantics.

[14:57:47.0000] <TabAtkins>
Domenic_: What does that mean?

[14:58:34.0000] <Domenic_>
TabAtkins: works on iterables, array-likes, and true arrays.

[14:58:40.0000] <TabAtkins>
Ah, ok.  Yes.

[14:59:32.0000] <Domenic_>
although, you have to anticipate the possibility of infinite iterators, hrm.

[14:59:46.0000] <Domenic_>
i guess Array.from just loops forever for those

[15:02:21.0000] <TabAtkins>
Yes.

[15:12:44.0000] <heycam>
annevk, for what you put in http://fetch.spec.whatwg.org/#api does Array differ from sequence at all?

[15:12:47.0000] <heycam>
(just more obvious?)

[15:13:03.0000] <heycam>
or is it that it's allowed to return a reference to a not-newly-created object?

[15:33:43.0000] <MikeSmith>
Hixie_: about <table><input></table> Henri's parser wasn't emitting an error for it so I'd been assuming there was some reason for that, that it was intentional -- that the spec didn't require a parse error for it

[15:35:12.0000] <MikeSmith>
then... I actually bothered to read the spec. So I filed https://bugzilla.mozilla.org/show_bug.cgi?id=910588 (log a parse error for <table><input></table>) & I'll send a patch there

[15:36:31.0000] <MikeSmith>
that thing is that when Henri's code isn't doing what I'd expect my first assumption is always that it's because I'm misunderstanding something or doing something wrong

[16:00:42.0000] <Hixie_>
MikeSmith: hehe

[16:00:47.0000] <Hixie_>
MikeSmith: i know the feeling

[16:09:16.0000] <zewt>
gar gmail's ui is stupid

[16:09:31.0000] <zewt>
i can't collapse hixie's 50-page reply without it also hiding the reply I'm writing to it

[16:09:39.0000] <zewt>
2px scrollbar

[16:09:54.0000] <Hixie_>
pine baby

[16:10:02.0000] <zewt>
definitely not pining for pine

[16:11:14.0000] <MikeSmith>
pine is so old school

[16:11:23.0000] <MikeSmith>
mutt is what everybody's using these days

[16:13:34.0000] <hober>
gnus 4 eva

[16:14:27.0000] <Hixie_>
i could never figure gnus out

[16:14:40.0000] <Hixie_>
would make my life way easier given that i do everything else in emacs

[16:17:31.0000] <MikeSmith>
hober and howcome are keeping gnus alive

[16:19:51.0000] <zewt>
what exactly happened to the idea of spammers being blacklisted

[16:20:05.0000] <zewt>
at some point spamming openly became "okay" and nobody asked me

[16:20:43.0000] <MikeSmith>
zewt: sounds like a job for Peter Swire

[16:22:14.0000] <MikeSmith>
Hixie_: if you hit yourself on the head with a brick first, gnus starts to make more sense

[16:22:30.0000] <MikeSmith>
oh wait sorry I guess that's the general strategy for using emacs

[16:22:40.0000] <Hixie_>
zewt: it did?

[16:22:46.0000] <Hixie_>
spamming whom where?

[16:22:59.0000] <zewt>
on the internet

[16:23:25.0000] <Hixie_>
i don't understand what you think changed

[16:24:45.0000] <zewt>
marketing departments somehow convinced the world that "this person gave us his email address for transactional mails in order to complete a purchase" == "we can send commercials to this email address"

[16:28:32.0000] <Hixie_>
you're clearly transacting with the wrong merchants.

[16:29:13.0000] <zewt>
that would be "all merchants" these days :(

[16:29:18.0000] <Hixie_>
not the ones i use...

[16:38:47.0000] <heycam>
TabAtkins, are those section links in the margin css-variables positioned using ems? I wonder if it would look better with a fixed distance from the title of the section

[16:39:02.0000] <TabAtkins>
Yes they are, and yes, I thought that too.  I hadn't gotten around to it yet.

[16:39:08.0000] <heycam>
:)

[16:39:09.0000] <TabAtkins>
Gonna move 'em with rems I guess.

[16:39:14.0000] <heycam>
yeah that's what I was thinking

[16:39:47.0000] <heycam>
the line-height (I guess?) also makes their yellow background look a bit big

[16:39:59.0000] <heycam>
not sure what you can do about that, while keeping them baseline aligned with the text of the section, though

[16:40:07.0000] <heycam>
*text of the section title

[16:40:37.0000] <TabAtkins>
I tried to make the clickable area sufficiently large.  That does make it look a little weird.

[16:40:47.0000] <TabAtkins>
Maybe I can just make the line-height bigger?

[16:40:51.0000] <TabAtkins>
I need to experiment.

[16:40:52.0000] <heycam>
interestingly, the Chinese-style angle quotes used around tokens are shown as full width characters in Chrome, but narrowly in Firefox

[16:41:01.0000] <heycam>
(the latter looks nicer)

[16:41:40.0000] <TabAtkins>
They look very similar to me on Linux.

[16:41:49.0000] <heycam>
wonder if a different font is being selected

[16:41:52.0000] <heycam>
anyway

[16:42:12.0000] <heycam>
now that we have variables, I want a CSS function that can be used to do operations on colours

[16:42:13.0000] <TabAtkins>
Yeah, must be.  I get ugly full-width on one of my machines, in some context.

[16:42:22.0000] <heycam>
so I can hue rotate, desaturate, etc. based on a variable value

[16:42:34.0000] <TabAtkins>
What do you take me for, an amateur? http://tabatkins.github.io/specs/css-color/Overview.html#modifying-colors

[16:42:36.0000] <heycam>
I was thinking we could use the filter function values

[16:42:44.0000] <TabAtkins>
Got approved to go to ED yesterday.

[16:42:45.0000] <heycam>
oh there you go ;)

[16:55:46.0000] <MikeSmith>
TabAtkins: you need approval to make an ED?

[16:56:21.0000] <TabAtkins>
MikeSmith: To actually make a work item for the CSSWG, in the CSSWG's part of the w3 url namespace?  Yes, by convention.

[16:56:31.0000] <TabAtkins>
I put "personal" EDs off in my github due to this.

[16:56:53.0000] <TabAtkins>
This is partially a result of CSS editors always pointing people to look at our ED repo - anything in there is assumed to be "real".

[16:58:53.0000] <MikeSmith>
ok

[16:59:54.0000] <Hixie_>
do we have anything in any spec that prevents scripts in inactive documents from running? e.g. when nodes in inactive documents receive events?


2013-08-30
[17:00:21.0000] <Hixie_>
queued tasks don't fire because tasks get delayed, but that doesn't help with dispatchEvent()...

[17:01:13.0000] <Hixie_>
annevk?

[00:17:47.0000] <MrTango>
hi, i will add new DC-Tags like DC.format and DC.type which are widely used in CMS Plone, can anyone create me an account http://wiki.whatwg.org with the username MrTango please?

[00:22:05.0000] <annevk>
heycam|away: ah yeah, it's just a return value so sequence could work I suppose

[00:22:18.0000] <annevk>
heycam|away: but yeah, I think we should make it more obvious how this works

[00:22:28.0000] <annevk>
heycam|away: because the current situation is too confusing

[00:24:05.0000] <annevk>
Hixie_: not that I know

[00:25:08.0000] <annevk>
Oh you filed a bug

[00:25:29.0000] <annevk>
MrTango: I can help you out I guess

[00:26:42.0000] <annevk>
MrTango: I need an email for that though

[00:27:02.0000] <MrTango>
annevk: md⊙dd

[00:27:41.0000] <annevk>
"A randomly generated password for MrTango has been sent to md⊙dd"

[00:28:48.0000] <MrTango>
annevk: thank you

[01:09:50.0000] <zcorpan>
jgraham: should this review be dropped? https://critic.hoppipolla.co.uk/showcomment?chain=393

[01:12:32.0000] <Ms2ger>
jgraham, how much of a review do you want for the html5lib update?

[01:13:47.0000] <zcorpan>
TabAtkins: "This style sheet could be used by an implementation as part of its default styling of HTML4, XHTML1, XHTML1.1, XHTML Basic, and other XHTML Family documents." http://tabatkins.github.io/specs/css-color/Overview.html#sample

[01:14:21.0000] <zcorpan>
2003 called and wants its XHTML Family members back

[01:16:22.0000] <zcorpan>
TabAtkins: also the stylesheet doesn't match what's in HTML's rendering section. maybe drop that section altogether?

[01:20:12.0000] <zcorpan>
TabAtkins: wonder if we should spec what the system colors map to

[01:25:01.0000] <wilhelm_>
I have just encountered RDF in the Real World for the first time. I expected it to be bad, but, oh, $deity, please get me away from here.

[01:38:16.0000] <hsivonen>
wilhelm_: What was the context?

[01:42:20.0000] <Ms2ger>
People here might be interested in http://mozilla.pettay.fi/workerconsole/ too

[01:44:08.0000] <wilhelm_>
hsivonen: My customer (which is the Norwegian equivalent of Encyclopedica Britannica) is importing a corpus from a different publisher. Our stuff is HTML in an SQL database. Theirs involves RDF, SPARQL and everything else you can think of from that house of horrors.

[01:44:40.0000] <hsivonen>
wilhelm_: nice

[01:53:26.0000] <SimonSapin>
zcorpan, TabAtkins: spec’ing reasonable defaults for system colors: yes please

[01:54:16.0000] <zcorpan>
SimonSapin: has anyone documented what they map to on different systems?

[01:55:05.0000] <SimonSapin>
zcorpan: I think that "current browsers" implement it for real: ask the system for colors from the user’s theme

[01:55:22.0000] <SimonSapin>
but I don’t really want to bother, in Servo

[01:56:16.0000] <zcorpan>
SimonSapin: yes. my question stands :-)

[01:56:41.0000] <SimonSapin>
oh, what they map

[01:56:48.0000] <SimonSapin>
I was thinking of a "name -> color" map

[01:57:24.0000] <jgraham>
zcorpan: I don't know. I think Aryeh should decide if there is anything he wants to salvage

[01:57:31.0000] <jgraham>
Ms2ger: Not too much I think

[01:57:55.0000] <jgraham>
I wouldn't review the generated files (which is why they are in their own commit)

[01:58:09.0000] <annevk>
zcorpan: should be pretty easy to generate this map

[01:58:19.0000] <jgraham>
Feel free to review the update code, but it's pretty ugly and probably not worth spending time on small issues

[01:59:24.0000] <zcorpan>
annevk: yeah, my problem is just that i don't have different systems. but thinking about it there are browser screenshot services to solve that

[02:00:36.0000] <Ms2ger>
jgraham, heh, namespaces

[02:01:19.0000] <Ms2ger>
jgraham, how about you fix the trailing whitespace and I claim I've reviewed it all?

[02:02:13.0000] <annevk>
zcorpan: I can get you Windows (7 I think) and Mac OS X

[02:02:42.0000] <zcorpan>
annevk: i have those

[02:02:47.0000] <annevk>
zcorpan: can also crowdsource if you can figure out some way to communicate back in 140 chars

[02:04:42.0000] <zcorpan>
a color is 24 bits... there are 28 system colors...

[02:04:51.0000] <hsivonen>
annevk: Crowdsourcing hasn't worked for me in the case of trying to find a twitter follower who runs the Greek version of Windows or the Welsh version of Windows. :-(

[02:06:44.0000] <annevk>
zcorpan: you have 140 Unicode scalar values even, seems like it ought to be doable

[02:06:44.0000] <zcorpan>
annevk: 96 ascii chars seems like it could encode the data

[02:07:14.0000] <annevk>
hsivonen: hmm yeah, localization is harder

[02:07:19.0000] <zcorpan>
not printable ascii though

[02:09:14.0000] <SimonSapin>
The thing with system colors is that there is not just one set of them per OS, they also change when the users change the desktop "theme"

[02:10:12.0000] <zcorpan>
SimonSapin: yeah, but if we're going to spec a fixed set of colors, the default themes seems like what we should care about

[02:10:42.0000] <SimonSapin>
zcorpan: or just pick one default set, regardless of OS

[02:11:00.0000] <jgraham>
Ms2ger: Sounds like it could work to me :)

[02:11:13.0000] <SimonSapin>
Tab’s draft suggest white for background-ish system colors, black for the rest

[02:11:32.0000] <SimonSapin>
all that matters is keeping things readable in legacy content

[02:12:22.0000] <zcorpan>
SimonSapin: yes. i'm trying to figure out what the set should be. just black/white seems unnecessarily boring

[02:12:40.0000] <SimonSapin>
fair enough

[02:14:31.0000] <zcorpan>
turns out grepping for system colors in webdevdata is a good way to fill up the hard drive (not from matches but from memory usage)

[02:15:54.0000] <SimonSapin>
gecko’s implementation is in mozilla-central/widget/*/*LookAndFeel*

[02:21:00.0000] <jgraham>
hsivonen: I wouldn't be surprised if the total number of users of the welsh version of windows is in the thousands

[02:21:16.0000] <jgraham>
So you owuld need a big crowd

[02:23:37.0000] <jgraham>
(it seems that there are about half a million Welsh speakers in total, so it could be higher. But very few of those don't also speak English and I imagine there isn't much Welsh-localised software so it is probably easier to have English everywhere than a mix)

[02:34:05.0000] <zcorpan>
SimonSapin: annevk: http://www.browserstack.com/screenshots/67610195dac7cc4cb12206dd2589f08b3d0a7c02

[02:38:54.0000] <annevk>
zcorpan: now all you need is wget plus OCR

[02:39:50.0000] <jgraham>
Ms2ger: Updated

[02:50:03.0000] <zcorpan>
looks like iOS and Android have the same colors

[02:50:25.0000] <zcorpan>
that by itself seems like a reasonable candidate

[03:19:17.0000] <matjas>
annevk, zcorpan: as for crowdsourcing, maybe you could use Browserscope? (see <iframe> here: http://mathiasbynens.be/demo/xhr-responsetype)

[03:19:46.0000] <matjas>
browserscope requires the results to be normalized to numbers, but that’s not a problem in this case :)

[03:20:17.0000] <zcorpan>
matjas: interesting

[03:20:27.0000] <matjas>
just create an HTML page like that, tweet the link, and watch the results flow in

[03:20:42.0000] <zcorpan>
matjas: i think i have enough data already, but feel free to gather more if you like

[03:21:29.0000] <annevk>
if we map locale to a number...

[03:21:44.0000] <annevk>
and encoding too I suppose

[03:21:56.0000] <zcorpan>
matjas: also, does it differentiate OSes or just browser versions?

[03:22:12.0000] <matjas>
just browser versions afaik

[03:23:20.0000] <matjas>
a Browserscope clone that accounts for OS diffs would be neat

[03:29:51.0000] <zcorpan>
sent http://lists.w3.org/Archives/Public/www-style/2013Aug/0667.html

[03:30:57.0000] <annevk>
oh, so that wouldn't even work for what I had in mind

[04:09:09.0000] <annevk>
aah

[04:09:11.0000] <annevk>
"ZIP – a base version of this data compression and archive file format is in the public domain, but newer versions have some patented features[13][14][15]"

[04:12:00.0000] <MikeSmith>
that doesn't sound good

[04:15:44.0000] <annevk>
It seems that's related to encryption, which we won't have.

[04:16:22.0000] <annevk>
In fact, from reading it seems the zip format we care about is in the public domain so we can do whatever we want.

[04:16:38.0000] <annevk>
Not sure I'm keen on defining it though.

[04:19:23.0000] <jgraham>
annevk: Probably should have chosen a different career then :)

[04:21:09.0000] <MikeSmith>
well Tracking Protection WG needs a chair

[04:21:27.0000] <MikeSmith>
that'd be a nice career change

[04:22:32.0000] <MikeSmith>
I can't find an html5lib test for the plain case of <table><input></table>

[04:22:46.0000] <MikeSmith>
that is, without the "hidden" attribute

[04:23:00.0000] <annevk>
MikeSmith: you mean type=hidden?

[04:23:07.0000] <Ms2ger>
MikeSmith, add one!

[04:23:09.0000] <MikeSmith>
ah yeah that I mean

[04:23:09.0000] <annevk>
MikeSmith: also, don't wanna get demoted

[04:23:16.0000] <MikeSmith>
hah

[04:24:14.0000] <MikeSmith>
that job is just a stepping stone man

[04:24:27.0000] <MikeSmith>
nobody takes that job for the job itself

[04:24:42.0000] <MikeSmith>
is the track it provides to other jobs

[04:25:00.0000] <Ms2ger>
The tracking, if you will

[04:25:18.0000] <MikeSmith>
yeah, like that

[04:25:45.0000] <MikeSmith>
you take the job and then who knows your might be moved up to CSS WG chair next

[04:26:23.0000] <MikeSmith>
and then Web Foundation CEO maybe

[04:32:41.0000] <annevk>
Does "utf-8 bomless decode" make sense? Or should it be "utf-8 BOM-less decode"?

[04:32:56.0000] <annevk>
I guess the latter

[04:33:30.0000] <SimonSapin>
annevk: the latter looks better

[04:33:44.0000] <annevk>
Not to me :)

[04:33:57.0000] <annevk>
But we haven't really introduced bom as a noun so I guess...

[04:34:40.0000] <annevk>
On the other hand, you might as well just use the utf-8 encoder directly in that case, that's shorter :)

[04:35:00.0000] <SimonSapin>
annevk: and while you’re at it, it would be nice to avoid similar names like decode vs decoder for different concepts :)

[04:35:37.0000] <annevk>
Not constructive enough for me to care, sorry

[04:39:40.0000] <jgraham>
"the bom" -> sounds like a noun to me

[04:45:26.0000] <SimonSapin>
annevk: uhg. ok. Let’s try more constructive. The "encode" concept does nothing but call an encoding’s encoder, I’m not convinced it’s worth keeping at all. "decode" looks for a BOM, then calls an encoding’decoder. I (and I believe other people) have been confused before by the similarity in the name. Perhaps this could be fixed by renaming "decode" to "BOM-decode" or something more specific, or

[04:45:29.0000] <SimonSapin>
even split the bom detection from the actual decoding.

[05:42:31.0000] <annevk>
SimonSapin: this is that split

[05:42:59.0000] <annevk>
SimonSapin: the idea of this section was to have an API-layer between specs and the encoder/decoders

[05:43:21.0000] <annevk>
SimonSapin: however, it hasn't completely materialized yet what the details of that layer should be

[05:43:21.0000] <SimonSapin>
annevk: I mean having something like "detect the encoding" that return an encoding

[05:43:44.0000] <jgraham>
Any opinions on https://critic.hoppipolla.co.uk/showcomment?chain=424?

[05:44:03.0000] <annevk>
SimonSapin: seems like that would be horrible misunderstood and would also get the precedent order wrong

[05:44:22.0000] <SimonSapin>
yeah, I agree

[05:52:29.0000] <annevk>
jgraham: seems okay given that testing the tokenizer separately is really an implementation-specific thing

[06:11:35.0000] <annevk>
SimonSapin: if you have time at some point we could go through thinking about how to restructure the Encoding Standard

[06:15:18.0000] <SimonSapin>
annevk: later today?

[06:15:25.0000] <annevk>
SimonSapin: sure

[06:16:33.0000] <jgraham>
annevk: Yeah, but in this case the tests would be "treebuilder" tests, just using the html5lib tokenizer tests as a source of "interesting" trees

[06:16:43.0000] <jgraham>
Or interesting inputs, rather

[06:21:08.0000] <annevk>
jgraham: in that case...

[06:21:20.0000] <annevk>
jgraham: can't you convert them to the other format then?

[06:21:23.0000] <annevk>
jgraham: and remove dupes

[06:22:50.0000] <jgraham>
I did at some point. But it rather relies on html5lib as a reference implementation.

[06:23:07.0000] <jgraham>
Seems like the tokenizertotree code still exists, so maybe I should just do it

[06:25:13.0000] <annevk>
I relied on url.js when generating URL tests...

[06:36:43.0000] <annevk>
Domenic_: will you post consensus check or should I?

[06:36:54.0000] <Domenic_>
annevk: I got it

[06:37:01.0000] <annevk>
Domenic_: I'd kinda prefer a cc to public-script-coord and www-dom

[06:37:14.0000] <annevk>
Domenic_: to catch any implementers

[06:37:18.0000] <Domenic_>
annevk: ok, sure. if you'd rather write it up that's fine too

[06:37:55.0000] <annevk>
Domenic_: nah, you should take credit, was just offering in case you were busy

[06:40:55.0000] <annevk>
Domenic_: http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%3Cscript%3Ew%28PromiseResolver%29%3C%2Fscript%3E ...

[06:41:01.0000] <annevk>
Domenic_: but yeah, that can go away

[06:43:53.0000] <Domenic_>
annevk: not sure what i should be seeing there; PromiseResolver is not defined (but I'm only running FF 23)

[06:45:47.0000] <annevk>
Domenic_: ah, gotta run non-beta/non-stable I think

[06:52:32.0000] <annevk>
Domenic_: not sure if I told you, but I also put this proposal on the TC39 agenda; kinda crappy they operate that way, but so be it; hoping it's more or less settled before than though

[06:52:58.0000] <Domenic_>
annevk: yeah i saw that. I think I'll actually be able to make that meeting since it's in Boston.

[06:53:17.0000] <Domenic_>
(I'm in NYC)

[06:53:23.0000] <annevk>
Domenic_: oh that'd be nice

[06:53:27.0000] <annevk>
Domenic_: you gonna be at Edge?

[06:53:40.0000] <Domenic_>
annevk: Don't think so? What's Edge?

[06:53:46.0000] <annevk>
Domenic_: conf in NY

[06:53:50.0000] <annevk>
Domenic_: Monday after TC39

[06:53:59.0000] <annevk>
Domenic_: http://edgeconf.com/

[06:54:21.0000] <annevk>
Domenic_: 100 USD, seems they might have a couple of seats left

[06:54:46.0000] <Domenic_>
annevk: hmm seems fun, might be able to beg another day off work for it.

[06:58:37.0000] <annevk>
Domenic_: thanks for that email

[06:59:38.0000] <Domenic_>
annevk: np

[07:48:12.0000] <Domenic_>
lol mark way to make things way more confusing with your second paragraph haha

[07:51:36.0000] <annevk>
"Note that this turns the common use case on its head." o_O

[07:51:51.0000] <annevk>
Did we email this at the wrong time or something?

[07:55:38.0000] <annevk>
I'm the 1%: https://twitter.com/dontcallmeDOM/status/373444615199682560

[09:05:51.0000] <SimonSapin>
annevk: ping

[10:34:46.0000] <Ms2ger>
r? https://critic.hoppipolla.co.uk/r/294

[11:10:56.0000] <rniwa>
annevk: yt?

[11:11:03.0000] <annevk>
rniwa: for a bit

[11:11:20.0000] <rniwa>
annevk: do you know if xhr's response supposed to keep the same document or not

[11:11:29.0000] <rniwa>
annevk: when the type is a document?

[11:11:29.0000] <annevk>
rniwa: yeah is

[11:11:33.0000] <rniwa>
annevk: okay

[11:11:40.0000] <rniwa>
annevk: which part of the spec says that?

[11:11:46.0000] <annevk>
rniwa: http://xhr.spec.whatwg.org/#document-response-entity-body

[11:12:21.0000] <rniwa>
annevk: it doesn't say to use the same document...

[11:12:37.0000] <annevk>
rniwa: it says to return the response entity body, and only if that has no value are you allowed to create a new one

[11:12:50.0000] <annevk>
document response entity body*

[11:13:52.0000] <rniwa>
annevk: ah, now i see it

[11:13:56.0000] <rniwa>
annevk: thanks

[11:13:57.0000] <annevk>
I should more properly reset it though :/

[11:14:01.0000] <annevk>
I'll file a bug on doing that

[11:15:13.0000] <annevk>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=23102

[11:19:44.0000] <TabAtkins>
Do Event names have to be unique, or just unique to the interfaces that can see them?

[11:20:04.0000] <TabAtkins>
/me is wondering whether Bikeshed needs to consider <dfn event> to be a type that requires a for='' attribute.

[11:22:37.0000] <Ms2ger>
TabAtkins, event types are not constrained

[11:24:08.0000] <TabAtkins>
Ms2ger: What does that mean in the context of my question?

[11:24:17.0000] <Ms2ger>
I'm not sure

[11:24:22.0000] <TabAtkins>
Heh, kk.

[11:24:23.0000] <Ms2ger>
I don't understand your question

[11:24:33.0000] <Ms2ger>
What are Event names?

[11:24:33.0000] <TabAtkins>
Yeah, thought so. Let me rephrase.

[11:25:35.0000] <TabAtkins>
Bikeshed/Shepherd parse specs for definitions, and categorize them across types.  The hope is that, most of the time, just specifying what you want to link to, and what type it is, should be enough to uniquely identify the right link target.

[11:26:23.0000] <TabAtkins>
Some types are roughly a global namespace, so that's good.  Others aren't, like property values, so their definitions additionally get a for='' attribute specifying what they're for (the thing they're for is hopefully global).

[11:26:43.0000] <TabAtkins>
When I'm wrapping an event name in a <dfn>, do I need a for='' or equivalent?

[11:26:51.0000] <Ms2ger>
What is an event name?

[11:27:01.0000] <Ms2ger>
And why do you have a dfn for it?

[11:27:32.0000] <Ms2ger>
If you want to fire an event, you say "fire an event named 'x'"

[11:27:37.0000] <TabAtkins>
Oh wait, duh, I just answered my own question.  Yes, I need a for='', to point to the relevant event interface.  Names are global *when constrained to a relevant interface*.

[11:27:53.0000] <TabAtkins>
Right, but you still want a place where there's a canonical definition of what a given event is *for*.

[11:29:51.0000] <Ms2ger>
jgraham, https://github.com/w3c/web-platform-tests/pull/248 doesn't seem to have a critic review?

[11:30:26.0000] <annevk>
TabAtkins: load is used in incompatible ways, often with the same interface

[11:30:32.0000] <annevk>
TabAtkins: same for readystatechange

[11:30:36.0000] <TabAtkins>
annevk: Oh, hrm.

[11:30:42.0000] <TabAtkins>
Annoying, then.

[11:30:49.0000] <annevk>
TabAtkins: events are not really defined as such though

[11:31:01.0000] <annevk>
TabAtkins: events follow from an algorithm that dispatches them

[11:31:31.0000] <annevk>
TabAtkins: the original DOM series about Events distracted people by making them appear different

[11:32:12.0000] <TabAtkins>
Perhaps they're unique when constrained to a given event target?

[11:32:49.0000] <TabAtkins>
The issue is, Anne, that I want it to be easy to tell the difference between, say, "readystatechange" when fired for different types of algorithms, so you can link to that particular usage.

[11:34:11.0000] <TabAtkins>
At least, I *think* that's a reasonable thing to want to do.  Is it?

[11:35:50.0000] <TabAtkins>
On a related note, should I kill CSSFontFaceLoadEvent, or is that a reasonable thing to do?  What's the current thinking on how to do events?

[11:35:54.0000] <annevk>
Yeah, I think event names are generally unique per target.

[11:37:11.0000] <annevk>
I think events are still okay, we just haven't needed them much for a lot of new stuff... With regards to fonts. It seems people want explicit control over fonts in JavaScript.

[11:37:19.0000] <annevk>
With fonts as first-class primitives.

[11:37:37.0000] <TabAtkins>
Yes, I'm reworking the spec right now, but starting with the load events.

[11:37:46.0000] <TabAtkins>
I need to come up with something that'll work in Workers, though.

[11:39:15.0000] <TabAtkins>
Which probably means coming up with a first-class Font object, yeah.

[11:42:50.0000] <annevk>
I recommend starting with the primitive. And adding the event for "all fonts are here" later. No need to solve all the use cases at once.

[11:47:00.0000] <annevk>
zewt: if you could add why you think APPNOTE.TXT is not an option on http://wiki.whatwg.org/wiki/Zip that'd be nice

[11:47:15.0000] <annevk>
zewt: would be good to have that documented somewhere

[11:47:33.0000] <annevk>
zewt: especially given how many other standards bodies didn't seem to care

[11:50:06.0000] <Ms2ger>
jgraham, r? https://critic.hoppipolla.co.uk/r/216

[11:56:54.0000] <zewt>
annevk: i hope we care

[11:57:35.0000] <zewt>
i didn't even know I had an account on this wiki, but apparently Firefox remembered

[11:57:50.0000] <annevk>
zewt: we'll see, I'm not too interested in working on it

[11:58:04.0000] <zewt>
i don't blame you for that, heh

[12:11:41.0000] <jgraham>
Ms2ger: Don't know what happened there

[12:13:25.0000] <jgraham>
Ms2ger: I will tey to look at the review, but internet access might be spotty

[12:14:11.0000] <Ms2ger>
jgraham, thanks

[14:33:31.0000] <miketaylr>
back

[14:56:03.0000] <TabAtkins>
annevk: I already have strong use-cases for "tell me when X font is loaded", "tell me when all fonts are loaded", "load this font", and "tell me if X font is already loaded".

[15:01:03.0000] <gsnedders>
TabAtkins: Speak to the pdf.js guys, they have a fair few requirements.

[15:01:14.0000] <gsnedders>
And ugly hacks.

[15:01:20.0000] <TabAtkins>
Heh, yeah.

[15:01:37.0000] <TabAtkins>
I'm guessing similar reqs to the Google Docs people, as they're doing similar types of things.

[15:01:51.0000] <TabAtkins>
Though I guess the PDF.js people are loading up fonts from the binaries.

[15:01:56.0000] <gsnedders>
Yup.

[15:03:30.0000] <TabAtkins>
that would be interesting.  Constructor takes a CSSFontFaceRule, or a string-url, or a TypedArray, maybe.

[15:03:37.0000] <tantek>
HTML5 slide frameworks could also use the "tell me when X font is loaded" event

[15:03:45.0000] <TabAtkins>
Well, it'll be a factor function because it needs to be async.

[15:04:05.0000] <tantek>
since modern HTML5 slide framework templates typically use custom/nicer webfonts that are dynamically loaded these days

[15:04:06.0000] <TabAtkins>
tantek: Right, that one's easy to sell.  (Though it's a promise, not an event.)

[15:04:15.0000] <gsnedders>
TabAtkins: Currently they go to a data URI. Obv. would be more efficient to from TypedArray.

[15:04:30.0000] <tantek>
TabAtkins - I submit to the bikeshedding/reframing :)

[15:04:37.0000] <gsnedders>
s/Currently/Back when I looked at this, when I cared about Presto support in pdf.js,/

[15:05:17.0000] <TabAtkins>
Font.create() is the preferred naming for factories, right?

[15:05:29.0000] <gsnedders>
Why a factory, why not new Font?

[15:06:07.0000] <tantek>
/me goes back to the standards factory.

[15:06:16.0000] <TabAtkins>
gsnedders: Need async.

[15:06:45.0000] <TabAtkins>
Though, hm, I'm going to be vending not-yet-completed Font obects anyway.

[15:07:03.0000] <TabAtkins>
So might as well vend one immediately from a constructor, and rely on the .ready() promise.

[16:48:44.0000] <gsnedders>
Where do U+D800 and the like become U+FFFD now?


2013-08-31
[17:06:12.0000] <gsnedders>
I can't find anything, at all?

[17:06:38.0000] <gsnedders>
Did this get dropped with pre-processing the input stream?

[17:08:08.0000] <SimonSapin>
gsnedders: in CSS? It’s in "consume an escaped code point"

[17:08:19.0000] <gsnedders>
SimonSapin: HTML.

[17:08:33.0000] <gsnedders>
I thought this would be assumed given #whatwg :P

[17:08:59.0000] <SimonSapin>
character encodings’ decoders never emit them

[17:10:00.0000] <SimonSapin>
http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference does the rest

[17:11:34.0000] <gsnedders>
SimonSapin: the encoding spec doesn't say that?

[17:12:28.0000] <SimonSapin>
gsnedders: not explicitly, but none of the decoders emit them

[17:12:59.0000] <gsnedders>
UTF-8 appears to be able to?

[17:13:05.0000] <gsnedders>
Unless I'm being blind?

[17:14:02.0000] <gsnedders>
And noncharacteres?

[17:14:20.0000] <gsnedders>
s/noncharacteres/perm. noncharacters/

[17:16:06.0000] <SimonSapin>
"If byte is 0xED, set utf-8 upper boundary to 0x9F. " and the like prevent surrogates

[17:16:27.0000] <gsnedders>
Okay, I'd tried to quickly reason with that in my head but failed. :P

[17:17:17.0000] <SimonSapin>
u'\uD7FF'.encode('utf8') == b'\xed\x9f\xbf'

[17:17:39.0000] <gsnedders>
Well, that's a nice bug.

[17:17:45.0000] <gsnedders>
Given that's never been legal.

[17:17:53.0000] <SimonSapin>
\uD800 would be \xed\xa0\x80

[17:18:08.0000] <gsnedders>
Oh, wait, U+d800 is the first.

[17:18:09.0000] <gsnedders>
Duh.

[17:18:12.0000] <SimonSapin>
which is forbidden by the "boundaries"

[17:18:19.0000] <gsnedders>
This is why I cannot read.

[17:18:26.0000] <gsnedders>
read?

[17:18:27.0000] <gsnedders>
reason.

[17:18:46.0000] <gsnedders>
I'm blaming jetlag for my inability to make sense, despite not really being jetlagged at all. :P

[17:19:06.0000] <SimonSapin>
the decoders emit "scalar values" http://www.unicode.org/glossary/#unicode_scalar_value , which exclude surrogates but not other non-characters

[17:19:21.0000] <gsnedders>
Right.

[17:19:36.0000] <gsnedders>
So the former handling of permament non-characters is gone?

[17:19:46.0000] <SimonSapin>
I don’t know

[17:20:02.0000] <SimonSapin>
it’s not in the Encoding layer at least

[17:20:12.0000] <gsnedders>
Doesn't appear to be in HTML either.

[17:20:32.0000] <gsnedders>
Of that former section only U+0000 still exists, by virtue of it now being handled inline in the parser.

[20:44:39.0000] <gsnedders>
So, the input stream is defined in terms of a series of the HTML speeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeec`.

[20:45:05.0000] <gsnedders>
Um, okay. Something went wrong there, and I couldn't stop that.

[20:48:48.0000] <gsnedders>
s/of .*$/of what the HTML spec defines a "Unicode codepoint" means — do we really want lone surrogates to be valid?/

[20:53:02.0000] <zewt>
valid where?

[20:58:43.0000] <gsnedders>
A valid HTML document.

[21:01:30.0000] <gsnedders>
Or a valid fragment. Say from innerHTML.

[21:02:07.0000] <Hixie_>
"valid" in what sense?

[21:02:57.0000] <gsnedders>
Produces no parse-errors.

[21:03:10.0000] <gsnedders>
Which is a conformance requirement.

[21:03:19.0000] <zewt>
iirc you can't get lone surrogates in an HTML document, since the charset decoders won't emit them

[21:04:40.0000] <gsnedders>
zewt: Yes, you need to be going from an abstract source, like the innerHTML case from the DOM.

[21:05:34.0000] <zewt>
not sure what you're asking; you can insert them with script, but an actual html document won't generate them

[21:09:11.0000] <zewt>
are you saying div.textContent = "\ud800" should throw an exception or something?

[21:09:12.0000] <gsnedders>
Right, but that doesn't exempt you from conformance, merely from conformance-checkers having to check it :P

[21:09:35.0000] <gsnedders>
No, be non-conforming and trigger a parse error.

[21:09:42.0000] <zewt>
"parse error" where?

[21:10:18.0000] <zewt>
i mean, an error in which parser?

[21:14:39.0000] <gsnedders>
zewt: Most browsers can report parse errors to dev tools

[21:14:50.0000] <gsnedders>
From the fragment case from innerHTML.

[21:15:46.0000] <Hixie_>
gsnedders: i don't think it cares about it in the parser, but there's separate conformance errors about there not being lone surrogates

[21:15:55.0000] <gsnedders>
Where?

[21:16:38.0000] <Hixie_>
a fascinating question

[21:16:54.0000] <gsnedders>
There *used* to be in the clause prohibiting perm. noncharacters

[21:18:16.0000] <Hixie_>
"Text nodes and attribute values must consist of Unicode characters, must not contain U+0000 characters, must not contain permanently undefined Unicode characters (noncharacters), and must not contain control characters other than space characters."

[21:18:29.0000] <Hixie_>
+ "The term Unicode character is used to mean a Unicode scalar value (i.e. any Unicode code point that is not a surrogate code point)."

[21:22:59.0000] <gsnedders>
Where's that?

[21:23:11.0000] <gsnedders>
http://www.whatwg.org/specs/web-apps/current-work/multipage/infrastructure.html#unicode-code-point gives the definition of codepoint differently?

[21:23:30.0000] <Hixie_>
what i pasted doesn't use the term "code point"

[21:23:51.0000] <zewt>
(it does a little)

[21:26:01.0000] <gsnedders>
Blarf!

[21:27:43.0000] <gsnedders>
Hixie_: So it's a conformance requirement yet not a parse error?

[21:28:16.0000] <Hixie_>
zewt: not normatively :-)

[21:29:09.0000] <gsnedders>
Hixie_: Although everything else in that list of what they cannot contain is a parse rror?

[21:29:12.0000] <gsnedders>
*error

[21:29:34.0000] <gsnedders>
AFAIK you removed it on grounds that encodings cannot output lone surrogates.

[21:31:20.0000] <Hixie_>
removed from the parser?

[21:32:37.0000] <gsnedders>
From the preprocessing the input stream clause that forbids null, noncharacters, etc.

[02:16:33.0000] <Ms2ger>
Hm, the box at http://www.whatwg.org/specs/web-apps/current-work/multipage/workers.html#WorkerGlobalScope-partial lists a bug that has been closed for months

[02:16:44.0000] <Ms2ger>
/me wonders who maintains that

[03:48:12.0000] <Ms2ger>
Anyone around who understands the parser?

[03:50:16.0000] <Ms2ger>
Maybe zcorpan

[04:28:11.0000] <zcorpan>
Ms2ger: what parser?

[04:30:02.0000] <zcorpan>
/me isn't actually here

[10:04:09.0000] <Ms2ger>
zcorpan-not-here: html

[10:17:55.0000] <jgraham>
I love XHTML. I love the way I can get a parser error in gecko loading a page over a bad connection

[10:18:10.0000] <tantek>
nice

[10:18:20.0000] <tantek>
/me presumes jgraham means "XML" in general

[10:18:48.0000] <Ms2ger>
jgraham, you know a thing or two about the html parser, right?

[10:18:58.0000] <jgraham>
Well I suppose the other alternative is that the connection isn't the problem and the content is broken

[10:19:18.0000] <Ms2ger>
I can't figure out what "If the stack of open elements has a button element in scope, then run these substeps:" means

[10:19:33.0000] <jgraham>
But the fowc (Flash of Working Content) before the YSOD is... irritating

[10:19:41.0000] <Ms2ger>
"has a button element in scope" links to "The stack of open elements is said to have an element in scope when it has an element in the specific scope consisting of the following element types:"

[10:19:53.0000] <jgraham>
Ms2ger: What so you mean "means"?

[10:19:55.0000] <Ms2ger>
Note no reference to the "button" part

[10:20:09.0000] <Ms2ger>
My stack is [html, body]

[10:20:23.0000] <Ms2ger>
Do I have a button element in scope?

[10:22:30.0000] <jgraham>
Ms2ger: No. The spec is confusing here because there are two different things

[10:22:39.0000] <jgraham>
The element that may or may not be in scope

[10:22:54.0000] <jgraham>
and the set of elements that delimit the scopes

[10:23:12.0000] <jgraham>
Having a button element in scope is not the same as having an element in button scope

[10:23:16.0000] <Ms2ger>
Right

[10:23:24.0000] <Ms2ger>
I suspected that was the case

[10:23:29.0000] <jgraham>
http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#has-an-element-in-the-specific-scope

[10:23:42.0000] <Ms2ger>
But I can't find a clear definition of having a button element in scope

[10:24:21.0000] <jgraham>
"target node" in that algorithm is a html:button element

[10:24:27.0000] <Ms2ger>
(I can find a definition of "having an element in button scope", but I don't understand the definition)

[10:24:47.0000] <jgraham>
But I don't think it actually says that explicitly

[10:24:50.0000] <jgraham>
File a bug

[10:25:59.0000] <Ms2ger>
Filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=23119

[10:26:12.0000] <jgraham>
I think instead of talking about "target node" it should be clear that it is an algorithm taking a list and an element name (or an namespace, name pair; I'm not sure)

[10:26:37.0000] <jgraham>
And say "if node is an /element/ element" or something

[10:26:42.0000] <Ms2ger>
This code has been implemented interoperably at least four times, and it still isn't clear \o/

[10:26:54.0000] <jgraham>
I think this part of the spec changed

[10:26:59.0000] <Ms2ger>
Yeah, it might have

[10:27:06.0000] <jgraham>
But the namespace part was never clear

[10:27:15.0000] <Ms2ger>
Okay, that helps

[10:27:29.0000] <Ms2ger>
/me goes back to reviewing this one-line test case

[10:28:00.0000] <jgraham>
In general it would be good if Hixie was explict for each algorithm what the imputs and ouptputs are

[10:28:28.0000] <jgraham>
Even if it meant having some special convention to represent it

[10:28:39.0000] <Ms2ger>
(And I've consumed the first token, yay)

[10:29:40.0000] <Ms2ger>
Also, the order of the switch cases in the parser seems to be random

[10:31:45.0000] <jgraham>
ElementInScope :: Stack Element -> LocalName -> [LocalName] -> Bool

[10:33:00.0000] <Ms2ger>
Or ElementInScope :: Stack Element -> (LocalName, NS) -> [(LocalName, NS)] -> Bool?

[10:33:10.0000] <jgraham>
Right

[10:33:53.0000] <jgraham>
(dunno if tuples can be represented like that in Haskell, but this is at best pseudo-Haskell)

[10:34:01.0000] <Ms2ger>
Yeah, that's fine

[10:34:32.0000] <Ms2ger>
/me wrote some Haskell this year

[10:35:02.0000] <Ms2ger>
(Oh, the list is even explicitly [(LocalName, NS)] now

[10:35:30.0000] <jgraham>
/me should probably learn enough to do something useful

[10:36:06.0000] <Ms2ger>
I dunno

[11:07:07.0000] <Ms2ger>
gsnedders, land https://critic.hoppipolla.co.uk/r/193 already :)

[12:46:13.0000] <Yuhong>
https://news.ycombinator.com/item?id=6307219

[12:46:35.0000] <Yuhong>
Someone wishes that conforming HTML required closing tags.

