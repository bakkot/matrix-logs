2018-11-01
[02:01:20.0000] <annevk>
TimothyGu: I think ffi et al don't happen because they're marked F, which isn't touched for a simple case folding

[02:01:37.0000] <annevk>
TimothyGu: ECMAScript is rather vague about the exact algorithm involved though

[02:03:31.0000] <annevk>
Nah, I guess it's fine

[15:24:32.0000] <MikeSmith>
hmm, https://www.google.co.jp/search?q=foo&oq=foo&aqs=chrome..69i57j69i61j69i60l2j0l2.2320j0j7&sourceid=chrome&ie=UTF-8

[15:24:44.0000] <MikeSmith>
Well, well, well. What do we have here? An Origin Policy violation.

[15:24:44.0000] <MikeSmith>
And what do we not have? A page!

[15:25:22.0000] <MikeSmith>
mkwst: ↑

[16:07:54.0000] <innovati>
Is there any reason why I shouldn't write something like <span class=video-container> as <video-container> instead?

[16:15:43.0000] <TabAtkins>
innovati: That's valid, it's a custom element then. (As long as it has a dash in it.)

[16:37:20.0000] <innovati_>
Thanks :) If I intend to enhance these elements only with CSS to style it how I like, would there be any browser support issues if I used these in IE11 (and newer)?


2018-11-02
[17:52:46.0000] <MikeSmith>
innovati: you’re not going to have any issues with CSS styling. That video-container element will be parsed into that DOM and be styleable just like any other standard element

[18:26:17.0000] <innovati>
thanks :D

[06:22:22.0000] <gsnedders>
Oh fun, we have loads of tests with <link rel=help> pointing at http://www.w3.org/TR/2013/WD-html-templates-20130214/. Metadata in tests is great, because it's never outdated.

[08:19:09.0000] <annevk>
gsnedders: hmm, I can PR that I suppose

[08:19:33.0000] <gsnedders>
I mean, it's not really worth anyone's time IMO

[08:19:49.0000] <gsnedders>
it's just further evidence that adding loads of metadata is pointless because nobody maintains it

[08:21:38.0000] <MikeSmith>
it would be useful if we used other systems that consumed that data and did something valuable with it

[08:21:57.0000] <MikeSmith>
which we don’t

[08:22:40.0000] <MikeSmith>
and in fact the trend seems to be toward doing the opposite thing and linking from the specs to the test cases instead

[08:22:57.0000] <MikeSmith>
e.g., using <wpt> in Bikeshed

[08:23:09.0000] <gsnedders>
but even having other systems doesn't matter, given we see enough cases in CSS where nobody bothers to update stuff

[08:24:19.0000] <MikeSmith>
I didn’t actually know that was the case for CSS ー that even they weren’t keeping that metadata up to date

[08:25:11.0000] <gsnedders>
I mean, people basically care at the time when preparing an IR to advance to PR, and never otherwise.

[08:25:16.0000] <gsnedders>
Which is my experience in general.

[08:25:32.0000] <MikeSmith>
anyway, not surprised that nobody keeps something up to date ー same old thing of, if not keeping it up to date doesn’t break anything, then nobody is ever going to get alerted that it’s gone out of date

[08:25:40.0000] <gsnedders>
Almost all the cases I've seen of metadata in tests around the W3C it's only ever been properly maintained for PR advancement, and never otherwise, even if the tests are.

[08:26:03.0000] <gsnedders>
Because the vast majority of metadata only has much value for PR

[08:26:17.0000] <MikeSmith>
well seems like the tests get neglected after that too

[08:26:34.0000] <MikeSmith>
Mission Accomplished


2018-11-04
[04:18:04.0000] <nox>
What is used to parse and validate WebIDL interfaces in wpt?

[04:36:15.0000] <gsnedders>
nox: webidl2.js

[04:37:02.0000] <gsnedders>
nox: https://github.com/w3c/webidl2.js

[04:59:54.0000] <nox>
gsnedders: Thanks.

[05:00:09.0000] <nox>
gsnedders: But that only parses, right?

[05:03:46.0000] <gsnedders>
nox: yes; depending on what you mean by validate, maybe /resources/idlharness.js?

[05:05:30.0000] <nox>
I mean for example failing if you try to have overloads for an operation in both the interface definition and one of the mixins.

[05:05:56.0000] <gsnedders>
I think that's still done in webidl2.js?

[05:06:05.0000] <gsnedders>
I'm not really too knowledgable about this, really.

[05:07:32.0000] <nox>
Ok!

[05:12:19.0000] <gsnedders>
nox: It has to be in one of the two, though

[05:12:26.0000] <gsnedders>
:)

[06:02:50.0000] <nox>
gsnedders: Context is https://twitter.com/nokusu/status/1058716551543775233 btw :)


2018-11-05
[02:45:15.0000] <yoav>
annevk: regarding https://github.com/w3c/resource-timing/pull/177#discussion_r230353907, I need to get from a request to the relevant global object. Is there a pre-defined way to do that? (from the discussion between you and Boris I understand that there isn't currently)

[02:45:24.0000] <yoav>
(but want to make sure)

[05:07:43.0000] <annevk>
yoav: a request doesn't really have a relevant global, there's a client

[05:09:47.0000] <yoav>
yeah, which is not what we need in case of an iframe...

[05:10:15.0000] <yoav>
so maybe it makes sense to special case iframes here?

[05:18:17.0000] <annevk>
yoav: perhaps I was wrong about iframe

[05:19:50.0000] <yoav>
annevk: ok, I'll put something together and ping you for your opinion

[07:05:47.0000] <wanderview>
yoav: annevk: does the request "associated window" help here? https://fetch.spec.whatwg.org/#concept-request-window

[07:08:25.0000] <yoav>
wanderview: not familiar with it, so not sure how

[07:09:18.0000] <wanderview>
ok, maybe I just don't understand what you are trying to do... sorry for the confusion

[08:06:17.0000] <yoav>
wanderview: don't be sorry :) It seems like the request's client might be the way to go after all

[08:06:34.0000] <yoav>
(potentially with some conditions around it)

[08:34:11.0000] <annevk>
Getting pretty close to defining response Content-Type...


2018-11-06
[20:00:38.0000] <MikeSmith>
for “trailing commas” in JavaScript syntax, is there any specific fragment ID in the EcmaScript spec I can point to?

[20:00:47.0000] <MikeSmith>
see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas for the context

[20:15:19.0000] <MikeSmith>
is that what Elision<sub>opt</sub> indicates?

[20:44:27.0000] <MikeSmith>
when I look at a proposal in https://github.com/tc39/proposal-* space, how can I tell if it’s already been adopted into the current https://tc39.github.io/ecma262/ standard? (short of actually checking the current spec text)

[20:45:11.0000] <MikeSmith>
e.g., looking at https://github.com/tc39/proposal-trailing-function-commas I cannot tell if it’s been adopted or not from just looking at that

[20:45:34.0000] <MikeSmith>
I think it has been, but there’s no statement there to indicate that

[20:50:44.0000] <MikeSmith>
OK looking at https://github.com/tc39/proposals I see it’s not listed there, so I guess the process is that I see a proposal in https://github.com/tc39/proposal-*, I need to check https://github.com/tc39/proposals and see if it’s listed there ー but if it’s not, then I need to assume it’s already been adopted

[20:52:03.0000] <MikeSmith>
ah

[20:52:11.0000] <MikeSmith>
now I find https://github.com/tc39/proposals/blob/master/finished-proposals.md

[21:08:51.0000] <MikeSmith>
filed https://github.com/tc39/proposals/issues/162

[06:16:26.0000] <gsnedders>
so per spec HTMLAllCollection shouldn't have a @@iterator, right?

[06:16:54.0000] <gsnedders>
because it does in FF/Ch, at least

[06:17:03.0000] <gsnedders>
But I can't see any justification for that in the spec.

[06:25:49.0000] <ato>
‘allo ‘allo

[06:26:08.0000] <ato>
I heard there was a discussion about document.all[Symbol.iterator].

[06:26:30.0000] <ato>
Is that a thing that only exists in Gecko?

[06:26:54.0000] <gsnedders>
14:16 < gsnedders> so per spec HTMLAllCollection shouldn't have a @@iterator, right?

[06:26:57.0000] <gsnedders>
14:16 < gsnedders> because it does in FF/Ch, at least

[06:26:59.0000] <gsnedders>
14:17 < gsnedders> But I can't see any justification for that in the spec.

[06:28:56.0000] <ato>
Oh interesting find.

[06:29:54.0000] <gsnedders>
I'm wondering if I've misread the spec here

[06:31:49.0000] <gsnedders>
I've misread WebIDL, I think.

[06:32:24.0000] <gsnedders>
"an indexed property getter and an integer-typed length attribute"

[06:32:31.0000] <gsnedders>
which they do, hence they have a @@iterator

[06:32:34.0000] <gsnedders>
okay, ignore me

[06:50:10.0000] <AutomatedTester>
stupid question about DOM. If we have a document element the assumption is that it includes all the mixins that come with document?

[06:51:57.0000] <gsnedders>
the document has them, the document elmenet is the root element

[06:52:02.0000] <annevk>
AutomatedTester: I don't really understand the question

[06:52:10.0000] <gsnedders>
unless you're not asking what I think you are?

[06:52:27.0000] <AutomatedTester>
I might not be asking it properly...

[06:54:00.0000] <AutomatedTester>
so my question is do I need to explicitly call out document or shadowRoot for knowing where items should start from. E.g. in webdriver we have the start node for finding elements as the document element but if I want to search a shadow dom I need to use the shadowRoot

[06:54:40.0000] <AutomatedTester>
so is having it as the document fine or do I need to explicitly say document or shadowRoot

[06:56:35.0000] <gsnedders>
AutomatedTester: what are you using to find things? I presume you just do it by reference to Selectors or XPath?

[06:56:47.0000] <AutomatedTester>
https://w3c.github.io/webdriver/#find-element step 7 to be exact

[06:56:54.0000] <AutomatedTester>
gsnedders: yes

[06:58:16.0000] <AutomatedTester>
since there is no way to pierce a shadow dom otherwise we break encapsulation we need to set the start node to the shadowRoot and then search which is the equivalent of shadowRoot.querySelector(...)

[07:03:55.0000] <annevk>
AutomatedTester: hmm, doesn't WebDriver have super powers anyway? Why not break encapsulation?

[07:04:41.0000] <AutomatedTester>
annevk: we could but then we need to build our own selectors for starting at the top level and descending into a shadow dom

[07:05:10.0000] <annevk>
AutomatedTester: anyway, if you want to go through shadow trees, you need to say so, and define how

[07:05:17.0000] <annevk>
AutomatedTester: there's no freebies

[07:05:27.0000] <AutomatedTester>
and I am not sure we can guarantee a view into closed shadow dom's

[07:05:47.0000] <AutomatedTester>
annevk: thats what I thought and just wanted to check

[07:06:40.0000] <annevk>
AutomatedTester: WebDriver should be able to do that I think, but it might require the browser to provide ways

[07:10:24.0000] <AutomatedTester>
annevk: what was the plan for testing this for end users or was this "webdriver will solve this... probably"

[07:16:05.0000] <annevk>
AutomatedTester: end users being?

[07:16:26.0000] <AutomatedTester>
annevk: website QA folk

[07:16:55.0000] <annevk>
AutomatedTester: I think the idea there was that WebDriver would indeed provide hooks

[07:17:07.0000] <ato>
gsnedders: I think [...collection] does some magic because for-of doesn’t work.

[07:17:09.0000] <annevk>
AutomatedTester: but there wasn't a lot of discussion about that, for sure

[07:17:22.0000] <ato>
gsnedders: I think reading ECMAScript might reveal some clues.

[07:18:44.0000] <gsnedders>
ato: both should just call the iterator, no?

[07:19:04.0000] <AutomatedTester>
annevk: my worry is that since deep selectors were dropped its going to be non-trivial to allow people to call from the document down into a shadow dom

[07:19:14.0000] <AutomatedTester>
feels like there are a lot of dragons down there

[07:21:10.0000] <gsnedders>
ato: for (let x of document.all) console.log(x);

[07:21:13.0000] <gsnedders>
ato: that wfm?

[07:21:30.0000] <ato>
gsnedders: OK, maybe HTMLAllCollection is not the problematic one here.

[07:21:53.0000] <ato>
https://searchfox.org/mozilla-central/source/testing/web-platform/tests/webdriver/tests/execute_script/collections.py for reference.

[07:23:03.0000] <ato>
HTMLFormControlsCollection works with for-of.

[07:23:36.0000] <ato>
And HTMLOptionsCollection.

[07:23:53.0000] <annevk>
AutomatedTester: I don't really know what folks are looking for, but you could offer things that basically iterate over the document and all its shadow roots and and match the selectors given

[07:24:06.0000] <ato>
And NodeList.

[07:24:17.0000] <annevk>
AutomatedTester: it's just that we don't want to expose those kind of things directly to web pages

[07:24:40.0000] <ato>
And HTMLCollection.

[07:24:47.0000] <AutomatedTester>
annevk: I think people want /deep/

[07:25:33.0000] <annevk>
AutomatedTester: I guess I'm saying is that if they say that, we need to dig a little deeper since a) it doesn't work for closed trees and b) we don't want a different selector parser for WebDriver

[07:25:52.0000] <AutomatedTester>
agreed!

[07:26:23.0000] <AutomatedTester>
if I can offload to the webapi's then I can somewhat guarantee interop

[07:26:36.0000] <annevk>
AutomatedTester: we can offer utilities that do some kind of query on all shadow roots associated with a document and return nodes in some manner, but if we can't move the conversation past /deep/ I'd just let it slide for now...

[07:26:56.0000] <annevk>
(note that this APIs would have to be WebDriver only)

[07:27:03.0000] <annevk>
these*

[07:27:15.0000] <ato>
As does Arguments.

[07:27:26.0000] <AutomatedTester>
at the moment I can get around most cases (excluding closed shadow doms) using document or shadowRoot

[07:27:33.0000] <AutomatedTester>
and then base things off that

[07:28:31.0000] <AutomatedTester>
annevk: if I were to start a conversation about the searchability where is the best place to do that?

[07:28:56.0000] <annevk>
AutomatedTester: the WebDriver repo?

[07:29:13.0000] <annevk>
AutomatedTester: as I said, we don't want these to be web-exposed APIs

[07:29:17.0000] <AutomatedTester>
ok

[07:29:36.0000] <AutomatedTester>
I will just @ the relevant people like you to discuss things further

[07:29:45.0000] <AutomatedTester>
we have a thread there at the moment

[07:29:49.0000] <annevk>
AutomatedTester: it's reasonable to start a WebDriver-specific thread on w3c/webcomponents though to point folks at that

[07:29:56.0000] <ato>
gsnedders: What. Even FileList works with for-of.

[07:30:11.0000] <AutomatedTester>
annevk: thats what more what I was after :)

[07:30:25.0000] <annevk>
AutomatedTester: okay, yeah, please do that

[07:30:30.0000] <AutomatedTester>
will do

[07:30:37.0000] <ato>
gsnedders: OK, so am I right reading that the conclusion here is that it’s OK for the spec to rely on the collection implementing the Iterable interface?

[07:30:57.0000] <ato>
gsnedders: I mean the language I used is clearly wrong, but that we can use the normal iterator protocol?

[07:31:01.0000] <annevk>
ato: it's a feature of IDL

[07:31:27.0000] <annevk>
ato: IDL added it to reduce the amount of specifying we'd have to do to support it all over the place

[07:32:11.0000] <ato>
annevk: Let me point you to the actual bit of spec we’re discussing.

[07:33:13.0000] <ato>
annevk: In https://w3c.github.io/webdriver/#dfn-internal-json-clone-algorithm, under the “a collection” variant we say “For each item of value, …”.

[07:33:38.0000] <ato>
And collection is not quite the same as in DOM/HTML: https://w3c.github.io/webdriver/#dfn-collection

[07:33:49.0000] <ato>
(Here “type” should be “interface” I think.)

[07:34:16.0000] <ato>
But the effect we want to achieve is to rely on the each of these objects’ iterator protocols to run some JSON serialisation steps and add them to a JSON Array.

[07:34:22.0000] <gsnedders>
ato: no, we want something like "instance of" except we need it to work cross-origin

[07:34:31.0000] <gsnedders>
and I can't remember what the right way to define that

[07:34:32.0000] <ato>
gsnedders: Yes, I meant that actually!

[07:34:49.0000] <annevk>
the right way today is what you did

[07:35:03.0000] <annevk>
"is X" is the way to do that until we have [[PlatformBrand]] or equiv

[07:35:40.0000] <annevk>
now actually invoking the iterator protocol I don't know, that has all kinds of potential side effects that I'm not sure you want here?

[07:36:03.0000] <annevk>
in any event, simply saying "for of" doesn't cut it if you want to call JS operations

[07:39:06.0000] <ato>
We don’t particularly care how implementations do it, as long as the result of the algorithm is that you end up with a JSON Array with the objects passed through a serialisation step.

[07:39:38.0000] <ato>
So when you talk about side effects of invoking the iterator protocol and JS operations, I have a hard time understanding exactly what you mean.

[07:40:02.0000] <gsnedders>
iterators can execute arbitrary code

[07:40:07.0000] <gsnedders>
and throw exceptions, etc.

[07:40:36.0000] <ato>
Right, because they are custom?

[07:40:42.0000] <ato>
Or can be if the prototype has been replaced?

[07:41:00.0000] <annevk>
Various things, once you run JavaScript stuff can throw

[07:41:15.0000] <ato>
OK, so I don’t think the intention here is to run JS.

[07:41:18.0000] <annevk>
(and you'll also have to define other things, like what globals are in use and such)

[07:41:35.0000] <ato>
Right, and we do this for the actual script execution.

[07:41:53.0000] <ato>
(Where you receive a script string and inject it into the runtime.)

[07:42:28.0000] <gsnedders>
ato: e.g., if I set document.all[Symbol.iterator], the iterator is no longer the default

[07:42:47.0000] <ato>
gsnedders: Got it.

[07:43:07.0000] <ato>
Words are hard (-:

[07:44:02.0000] <ato>
So when we say “for item of value” here, that doesn’t invoke the JS Symbol.iterator or the iterator protocol. What does it do?

[07:44:38.0000] <ato>
Is it inferred as an exercise for the reader to understand that you want to achieve the effect of looking at a DOM/HTML collections items in sequence without going down the same path as JS?

[07:45:25.0000] <ato>
Not trying to be nitpicky here by the way.  Just trying to understand how this works.

[07:45:27.0000] <annevk>
ato: it's not clear what it does since it's not defined

[07:46:18.0000] <ato>
In the Gecko implementation, what we do specifically is call what I guess is the initial value of the iterator protocol by doing [...collection] in XPCOM.

[07:46:33.0000] <gsnedders>
ato: it does invoke the iterator protocol?

[07:46:48.0000] <ato>
Doesn’t the JS spread operator do that?

[07:47:11.0000] <ato>
https://searchfox.org/mozilla-central/rev/b096dcf0ea226af628fe03f7e7acb56a25853533/testing/marionette/evaluate.js#250-253

[07:47:11.0000] <gsnedders>
yes

[07:47:15.0000] <gsnedders>
both do that

[08:12:06.0000] <Domenic>
ato: I think you want to convert from JS into Infra or Web IDL data structures as soon as possible. Then you can operate without running JS side effects.

[08:13:00.0000] <Domenic>
Although, I guess that conversion will itself have JS side effects

[08:13:07.0000] <Domenic>
So you need to go deeper -_-

[08:13:11.0000] <annevk>
Domenic: so nobody working on Chrome's service worker implementation was considering this or they actively ruled out preloading one already somehow?

[08:13:44.0000] <Domenic>
annevk: from what they've told me there are engineering challenges with first-run service worker that they have no plans on solving

[08:14:07.0000] <annevk>
For Firefox it's only the former as far as I know, the latter is to be seen

[08:14:13.0000] <annevk>
Domenic: are those documented somewhere?

[08:14:29.0000] <Domenic>
Not that I know of

[08:14:40.0000] <annevk>
Domenic: who would I ask?

[08:14:41.0000] <ato>
Domenic: Other implemenations are in Rust and C++, so we don’t want to tie the spec to JS if we can avoid it.

[08:14:42.0000] <Domenic>
But their vibe was that it was kind of common knowledge, so I dunno, maybe?

[08:15:01.0000] <ato>
Domenic: But I don’t really understand what you’re proposing…

[08:16:08.0000] <Domenic>
ato: My best guess so far is something like "for each supported property index (https://heycam.github.io/webidl/#dfn-supported-property-indices), run the algorithm specified for the collection's indexed property getter (https://heycam.github.io/webidl/#dfn-indexed-property-getter)" and collect all those into a list (https://infra.spec.whatwg.org/#lists)

[08:16:37.0000] <Domenic>
annevk: kinuko and matto

[08:17:11.0000] <annevk>
Domenic: thanks

[08:17:51.0000] <Domenic>
ato: for Arrays you're totally screwed though, you'll have to run JS with side effects. E.g if someone does `new Array(3); Object.defineProperty(Array.prototype, "1", { get () { throw new Error("foo"); } })` there's no way to avoid hitting that exception

[08:19:38.0000] <Domenic>
ato: It appears you're also screwed for Arguments objects in a very similar way

[08:20:33.0000] <Domenic>
By "screwed" I mean "you'll run JS", not "unimplementable in Rust and C++"

[08:20:41.0000] <Domenic>
Rust and C++ implementations just need to use the JS API

[08:21:08.0000] <Domenic>
s/JS API/JS engine API

[08:30:07.0000] <ato>
Domenic: Thanks for explaining that, very useful!

[08:30:39.0000] <ato>
Domenic: So we are aware of the pitfalls that we can’t trust the input data to the algorithm, and I don’t think we particularly care that we fail in this case.

[08:31:21.0000] <ato>
Domenic: If a website makes an array throw an error on iteration and you try to return that array using an injected script, you would expect that behaviour.

[08:31:28.0000] <gsnedders>
ato: but we do need to define well the failure case

[08:31:39.0000] <ato>
Yes, that sounds like what is missing here.

[08:31:49.0000] <ato>
Or, I mean, generally throughout the spec.

[08:31:53.0000] <Domenic>
+1. Ideally with tests ;)

[08:32:25.0000] <ato>
For the other commands in the specification, we expect them to work irregardless of prototype overrides.

[08:32:46.0000] <ato>
So it would be funny to see what happens if you inject a script replacing querySelectorAll or whatever and then you try using the Find Elements WebDriver command.

[08:32:59.0000] <ato>
My guess is that hillarity would ensue depending on the implementation.

[08:33:12.0000] <nox>
Domenic: How does jsdom cope with such Array.prototype shenanigans btw?

[08:33:30.0000] <ato>
It’s not entirely clear to me how to define these error scenarios, but I’ll file a bug and we can take it from there.

[08:34:14.0000] <ato>
It sounds like “define error scenarios” is orthogonal from s/type/instance of/ and indeed how to say “for item of value”.

[08:34:27.0000] <Domenic>
nox: it doesn't, yet. We haven't tried to harden it. But it could via the various techniques discussed here: https://github.com/domenic/get-originals/blob/master/Sample%20conversion.md#array-manipulation-analysis . (That doc uses a hypothetical "get originals" API, but jsdom has access to the originals via other means, so that part isn't necessary.)

[08:34:49.0000] <nox>
Domenic: Thanks for the link.

[08:34:50.0000] <Domenic>
ato: I think "define error semantics" is not orthogonal to "for item of value" because how you iterate is what generates or hides errors.

[08:35:14.0000] <ato>
You’re right. But maybe we can do it in steps.

[08:35:24.0000] <ato>
Would you say “for item of value” is the right terminology here?

[08:36:13.0000] <Domenic>
No

[08:36:28.0000] <Domenic>
Because it's not defined

[08:47:59.0000] <ato>
https://github.com/w3c/webdriver/issues/1349

[12:08:47.0000] <nox>
Domenic: For Array, could we wrap them in a Proxy that uses the original Object.defineProperty in its set method?

[12:09:08.0000] <nox>
To be able to still do a[i] = x

[12:16:56.0000] <Domenic>
nox: hmm yeah that seems pretty good, +1

[12:20:59.0000] <nox>
Domenic: And is there any way to use Array.values and Array.of to copy an array avoiding holes and stuff like that?

[12:21:14.0000] <Domenic>
nox: not sure what you mean

[12:21:29.0000] <Domenic>
Is this for the input, i.e. implementing the sequence<> -> list conversion?

[12:21:38.0000] <Domenic>
In that case the per-spec thing is to just use the iterator protocol, for-of

[12:21:38.0000] <nox>
Yeah.

[12:21:49.0000] <nox>
Oh right.

[13:19:03.0000] <nox>
Domenic: With such an Array proxy, couldn't we also allow array method calls with the certainty that we are calling the original ones from Array.prototype?

[13:19:43.0000] <Domenic>
nox: I'm not sure exactly how to write it, but it's definitely true that with a proxy you could make myProxy.map() always do the right thing.

[13:20:23.0000] <nox>
Domenic: I was thinking something way more generic than that, like makeAProxyHandlerThatWillCallExactlyTheCurrentMethodsOfThatGivenPrototype(Array.prototype).

[13:20:40.0000] <Domenic>
Yeah, I mean, that seems doable. Writing proxies is such an art though.

[13:21:07.0000] <Domenic>
Also you'd need to save each method you're interested in, to avoid people deleting Array.prototype.map at runtime and thus messing you up

[13:22:06.0000] <Domenic>
Array methods are not a real big deal though. If you're saving them anyway, you can just do arrayMap(myProxy, mapper) which is almost as nice.

[13:22:11.0000] <nox>
Domenic: Hence why a proxy handler constructed from the prototype.

[15:03:29.0000] <MikeSmith>
I wonder if anybody has any clue why every time I now try to do a Google search in Canary, I only instead get a generated error page from Canary about an Origin Policy violation

[15:03:42.0000] <MikeSmith>
Well, well, well. What do we have here? An Origin Policy violation.

[15:03:42.0000] <MikeSmith>
And what do we not have? A page!

[15:03:42.0000] <MikeSmith>
You're trying to go to: https://www.google.co.jp/search?q=foo&oq=foo&aqs=chrome..69i57j69i60j69i61j69i60j0l2.776j0j9&sourceid=chrome&ie=UTF-8

[15:03:45.0000] <MikeSmith>
The policy applies to: https://www.google.co.jp

[15:25:05.0000] <Domenic>
You must be in some experiment group

[15:25:17.0000] <Domenic>
Or with a flag flipped

[15:25:24.0000] <Domenic>
And google.co.jp implemented something wrong


2018-11-07
[16:21:09.0000] <MikeSmith>
Domenic: OK

[16:32:27.0000] <ato>
/me pictures MikeSmith as an experiment

[16:42:06.0000] <MikeSmith>
heh

[16:42:44.0000] <MikeSmith>
maybe it’s an experiment in increasing Firefox search revenue

[03:58:58.0000] <mkwst>
MikeSmith: If you can reproduce the error, please hop on https://bugs.chromium.org/p/chromium/issues/detail?id=901477.

[03:59:49.0000] <mkwst>
It's a mostly-finished implementation of https://github.com/WICG/origin-policy that's apparently going haywire for you, and two other people. :)

[04:06:03.0000] <MikeSmith>
mkwst: thanks will do

[04:06:15.0000] <MikeSmith>
I can reproduce it 100%..

[04:06:24.0000] <mkwst>
That is both excellent and terrible to hear!

[04:07:09.0000] <MikeSmith>
haha

[04:07:15.0000] <mkwst>
It would be helpful if you could grab a net log.

[04:07:44.0000] <mkwst>
https://www.chromium.org/for-testers/providing-network-details

[04:08:55.0000] <MikeSmith>
/me looks

[07:20:15.0000] <annevk>
I keep finding more Content-Type parsers in browsers

[07:20:17.0000] <annevk>
This cannot be good

[07:26:02.0000] <gsnedders>
This does not surprise me.

[07:39:41.0000] <annevk>
gsnedders: yeah, slowly getting there though in having the answers to how HTTP parses; not sure when we last talked about defining this, been a while

[07:41:19.0000] <gsnedders>
annevk: I don't think anyone has much since I played around a bit with it in about 2008/9.

[08:06:01.0000] <fserb>
hello folks :)

[08:06:41.0000] <ato>
annevk: Is there anything like floor(), max(), min() defined in WHATWG infra?

[08:14:11.0000] <annevk>
ato: we don’t even have numbers 😊

[08:14:32.0000] <annevk>
ato: hopefully soonish though once BigNum is a thing

[08:15:04.0000] <gsnedders>
What's a number? ;P

[08:15:15.0000] <ato>
I wasn’t able to find any good uses in any CSS specs either.

[08:15:22.0000] <annevk>
Very much so gsnedders

[08:15:41.0000] <annevk>
Primitives are fun

[08:16:10.0000] <ato>
For the moment we have borrowed some of the one-line definitions of things like floor() from TC39.

[08:16:22.0000] <ato>
Basically copy-paste.

[08:16:54.0000] <annevk>
ato: seems fine, Encoding has some of this too btw

[08:17:35.0000] <ato>
/me looks

[08:18:03.0000] <ato>
Ah yes, we actually borrowed the logical grouping part from Encoding!

[09:19:46.0000] <jugglinmike>
Where is the Symbol.iterator property of HTMLCollection specified?

[09:20:06.0000] <gsnedders>
WebIDL

[09:20:11.0000] <TimothyGu>
jugglinmike: https://heycam.github.io/webidl/#es-iterator

[09:20:34.0000] <gsnedders>
jugglinmike: https://heycam.github.io/webidl/#es-iterator

[09:20:36.0000] <jugglinmike>
so fast, TimothyGu! Thank you!

[09:20:39.0000] <gsnedders>
oh, TimothyGu beat me

[09:20:55.0000] <jugglinmike>
gsnedders I'll give you partial credit

[09:21:13.0000] <jugglinmike>
Taking it on your word that you didn't just copy and paste TimothyGu's message

[09:21:43.0000] <gsnedders>
Promise I didn't!

[09:21:47.0000] <gsnedders>
Resolve(I didn't)

[09:22:18.0000] <jugglinmike>
Do you know why it's done this way?

[09:22:48.0000] <jugglinmike>
More specifically

[09:22:59.0000] <gsnedders>
I presume it was the easiest way to make it apply to everything?

[09:23:04.0000] <jugglinmike>
Do you know why it's specified externally rather than in the interface definitions themselves

[09:23:11.0000] <gsnedders>
And minimises the amount of work per interface?

[09:23:28.0000] <jugglinmike>
That would be my initial guess, but an optimization like that seems like an implementor's concern

[09:24:23.0000] <jugglinmike>
From a specification authoring standpoint, it seems too indirect

[09:24:55.0000] <gsnedders>
no more indirect than many other things in WebIDL?

[09:25:50.0000] <jugglinmike>
I don't know anything about that, but I'm wondering if maybe it shouldn't be in webIDL in the first place

[09:26:41.0000] <jugglinmike>
but that's a little ignorant

[09:27:55.0000] <gsnedders>
It avoids any inconsistency

[09:27:56.0000] <jugglinmike>
I'll need to figure out the WebIDL/DOM boundary before suggesting improvements like this

[09:28:16.0000] <gsnedders>
Remember that things like Array.prototype.* are spec'd to work based on .length and [n] alone

[09:29:04.0000] <jugglinmike>
That's actually why I'm here :)

[09:29:29.0000] <gsnedders>
(others probably know more about this than me, though!)

[09:33:37.0000] <ato>
Speaking of collections, I wish there was a single list of all of them.

[09:33:44.0000] <ato>
Some are defined in DOM and some in HTML.

[09:34:02.0000] <gsnedders>
I would like to get away from having to list Array-ish things in WebDriver

[09:34:16.0000] <ato>
That’s why I’m saying.

[09:36:54.0000] <jugglinmike>
ato: my silly ideas incoming :)

[09:38:48.0000] <annevk>
jugglinmike: it was done this way to easily migrate existing collections and ensure they all share the same behavior

[09:39:39.0000] <annevk>
jugglinmike: letting IDL do as much heavy lifting as possible is def preferred for consistency and quality

[09:41:12.0000] <jugglinmike>
annevk: got it

[09:43:09.0000] <jugglinmike>
annevk: does that mean that the multi-inheritance supported by DOM interface definitions is out of style? Or are there cases where it still makes sense to be specifying shared behavior with that mechanism?

[09:43:42.0000] <annevk>
jugglinmike: multi-inheritance?

[09:44:24.0000] <jugglinmike>
That's how I think of "[Exposed=Window, LegacyUnenumerableNamedProperties]" in https://dom.spec.whatwg.org/#interface-htmlcollection

[09:45:45.0000] <annevk>
jugglinmike: that’s not inheriting from multiple interfaces though, that just affects enumeration of properties

[09:48:10.0000] <jugglinmike>
ahah

[09:48:33.0000] <annevk>
Sorry for using “just”, it’s indeed all rather weird

[09:55:27.0000] <jugglinmike>
No worries, I took "just" to mean "exclusively"

[10:00:04.0000] <ato>
jugglinmike: I read that and thankfully I’m going for a drink soon.


2018-11-08
[22:08:13.0000] <MikeSmith>
botie, inform mkwst about the Origin Policy bug, added comment at https://bugs.chromium.org/p/chromium/issues/detail?id=901477#c14 with NetLog dump attached

[22:08:13.0000] <botie>
will do

[04:18:02.0000] <FND>
Domenic: your comment at https://github.com/whatwg/html/issues/3035#issuecomment-329003087 last year resulted in some controversial discussions on my end...

[04:18:12.0000] <FND>
.. until we realized we weren't actually sure what you _actually_ meant here: "custom elements are not meant to be arbitrarily powerful; they're meant to give you the same power as the platform has" - is it worth asking for clarification?

[04:20:41.0000] <FND>
in particular, someone argued that strict interpretation would mean Polymer, for example, is non-idiomatic as per your statement

[07:00:11.0000] <bradleymeck>
is there a simple way to "tee" a Response Object

[07:06:43.0000] <bradleymeck>
nm.... missed the .clone()

[07:25:15.0000] <Domenic>
FND: my comment is about the standard.

[08:35:59.0000] <annevk>
Domenic: I could prolly be persuaded that it's still early enough to break early adopters btw, but we can't keep doing that

[08:36:12.0000] <Domenic>
annevk: I just don't think it counts as "break"

[08:36:14.0000] <annevk>
Domenic: so at some point we do have to consider them and work with them in mind

[08:36:34.0000] <annevk>
I see, I guess we disagree then

[08:36:43.0000] <Domenic>
What code is broken?

[08:37:02.0000] <Domenic>
A page author decides to do something a component author didn't expect. Now, their page behaves as desired.

[08:37:07.0000] <Domenic>
Nothing is broken, just weird.

[08:37:36.0000] <Domenic>
I think there are plenty of custom elements out there that don't proactively do `attachShadow({ mode: 'closed' })` to "protect" themselves against breakage

[08:37:48.0000] <Domenic>
They just accept the consequences if page authors want to do something unexpected

[08:38:26.0000] <Domenic>
We've certainly never recommended that every custom element attach a closed shadow root to protect itself. Should we start doing so?

[08:48:49.0000] <annevk>
Domenic: I guess it depends

[08:49:30.0000] <FND>
Domenic: thanks, I'm not sure that'll suffice to quell concerns here, but that's not your issue :)

[08:49:52.0000] <annevk>
Domenic: I’m still not sure attach makes sense btw due to subclassable built-ins

[08:50:08.0000] <Domenic>
annevk: yes, basically no solution works with subclassing.

[08:50:09.0000] <annevk>
Domenic: those have internals already

[08:50:38.0000] <Domenic>
Oh, are you just talking about the name?

[08:50:44.0000] <annevk>
Those have internals already*, so get* makes more sense

[08:51:14.0000] <annevk>
Ugh IRCCloud

[08:51:21.0000] <Domenic>
I don't care about the name. Although I think it's still up in the air whether we want the ElementInternals class to be more like computed style (reading back all internals including ones you set) or more like the style attribute (an overlay on top of any existing internals)

[08:51:21.0000] <annevk>
Yup

[08:52:20.0000] <annevk>
Hmm yeah, less cascade seems nice, but who knows

[08:57:03.0000] <jgraham>
hsivonen: foolip & co pointed out https://staging.wpt.fyi/results/encoding?product=firefox%4076c0092916&product=firefox%407f56040b8f&diff which I assume you are aware of, but I wonder what the reason is

[09:04:48.0000] <annevk>
jgraham: I think AutomatedTester should have a link to a bug

[09:05:20.0000] <AutomatedTester>
one sec please caller

[09:05:35.0000] <annevk>
jgraham: I think it’s also fixed in Nightly?

[09:07:06.0000] <jgraham>
annevk: Oh is this that bug

[09:07:24.0000] <jgraham>
foolip claimed that the regression was still there

[09:07:41.0000] <annevk>
jgraham: it was discussed a while back when this was first announced

[09:08:23.0000] <jgraham>
annevk: Oh you're right https://staging.wpt.fyi/results/encoding?product=firefox%4076c0092916&product=firefox[master]&diff

[09:08:35.0000] <annevk>
jgraham: it was meant to “regress” in a way we thought would be acceptable for release, so could be

[09:08:35.0000] <jgraham>
hsivonen: Sorry to bother you

[09:10:40.0000] <AutomatedTester>
oh I can't find it

[09:11:02.0000] <AutomatedTester>
jgraham: iirc, we were falsely passing those tests

[09:11:19.0000] <AutomatedTester>
and then with the encoding.rs work we started failing properly

[09:11:45.0000] <jgraham>
AutomatedTester: Doesn't matter :)

[09:13:52.0000] <AutomatedTester>
ok

[09:13:57.0000] <AutomatedTester>
it's https://bugzilla.mozilla.org/show_bug.cgi?id=1423877

[09:14:01.0000] <AutomatedTester>
if that is the issue

[09:18:03.0000] <annevk>
Ta!

[09:18:10.0000] <annevk>
Think so


2018-11-09
[00:29:58.0000] <hsivonen>
jgraham: did annevk land changes to the tests on that day to change the expectation of how unmappables are escaped in URLs?

[00:31:23.0000] <hsivonen>
jgraham: it should be fixed on Nighly. This is a case where defaulting to results from release builds is not useful.

[01:29:00.0000] <jgraham>
hsivonen: Yeah, foolip happened to be looking at a graph of release builds. I agree it's misleading here

[02:22:19.0000] <nox>
Domenic: I had an idea!

[02:23:15.0000] <nox>
Domenic: For jsdom,

[02:24:11.0000] <nox>
the Node instance exposed to content could be a proxy around a mostly useless object,

[02:24:42.0000] <nox>
where the proxy handler is the actual Node impl object, with a 'get' method that just returns the handler itself if passed const impl = Symbol("impl").

[02:24:51.0000] <nox>
See what I mean?

[02:41:07.0000] <nox>
Domenic: https://jsfiddle.net/2x0rq31j/

[02:55:45.0000] <nox>
https://jsfiddle.net/2x0rq31j/1/ Ah, you can break it with an additional proxy. :(

[05:03:27.0000] <annevk>
hsivonen: can you look at https://github.com/whatwg/html/issues/3257?

[06:06:40.0000] <Domenic>
nox: it seems like the straightforward thing is to avoid proxies and just switch from symbols to weakmaps, no?

[06:07:28.0000] <nox>
Domenic: I was trying to find a different way that is easier for JITs.

[06:07:47.0000] <nox>
But yeah the WeakMap solution is correct out of the box. Just slow.

[06:07:49.0000] <Domenic>
Heh, I've never heard of people saying proxies were easy for JITs...

[06:07:56.0000] <nox>
True.

[06:08:10.0000] <nox>
That was an assumption on my part and SM people told me it was wrong. :D

[06:08:22.0000] <Domenic>
Well, we're getting proper private state soon in the language. Although it won't support "friend class" use cases which pretty important for DOM.

[06:08:35.0000] <nox>
Oh?

[06:08:49.0000] <nox>
Link please? :)

[06:08:58.0000] <Domenic>
https://github.com/tc39/proposal-class-fields

[06:09:21.0000] <nox>
Domenic: For my pet project I plan to just use the SM-specific slot API.

[06:09:35.0000] <Domenic>
Yeah, makes sense

[06:09:55.0000] <Domenic>
Oh, I remember, there is a hacky way to do friend access

[06:11:30.0000] <nox>
Domenic: Note that I have yet to write a single line of code anyway. :)

[06:11:54.0000] <nox>
Domenic: Oh btw I wanted to suggest a change for webidl2js, for overloads specifically.

[06:11:57.0000] <Domenic>
Something like `class X { #y; static getY(x) { return x.#y; } static setY(x, val) { x.#y = val; } }; const { getY, setY } = X; delete X.getY; delete X.setY; /* now give getY and setY to any friend classes */`

[06:12:20.0000] <Domenic>
I could swear we had an open issue on overloads

[06:12:34.0000] <Domenic>
I really want to switch them to call impl.foo_1(), impl.foo_2()...

[06:12:37.0000] <nox>
Wouldn’t it be better if it dispatched calls to `nameofthemethod{typenameofthedisambiguatingargument}`?

[06:12:47.0000] <nox>
Yeah same but with a better name.

[06:12:56.0000] <Domenic>
Yeah it would be way better

[06:13:03.0000] <Domenic>
That project needs a little bit more love than it currently has

[06:13:12.0000] <nox>
In Servo we tack n _ for the nth overload and it makes me pretty sad. :D

[06:13:18.0000] <Domenic>
TimothyGu did some great work, then got busy with other things

[06:13:57.0000] <Domenic>
https://github.com/jsdom/webidl2js/issues has some pretty good first bugs if you want to dive in ;)

[06:33:07.0000] <Domenic>
annevk: FYI https://whatpr.org/fetch/831.html#concept-header-list-get-decode-split has some markup messups I guess

[06:33:41.0000] <Domenic>
Also "value might be the empty string" should be temporaryValue, I suppose

[06:33:51.0000] <Domenic>
I guess I should really review these things...

[06:34:43.0000] <Domenic>
Also "collecting a sequence of code points" is supposed to take the position variable as an argument

[06:34:58.0000] <Domenic>
Oh nevermind, it's there at the end of the sentence

[06:37:36.0000] <annevk>
Domenic: heh yeah, I was hoping you'd implement this in jsdom, sorry for putting up a somewhat bad PR; I didn't have time to run all the checks and wanted to at least commit this before leaving

[06:37:55.0000] <Domenic>
Unfortunately we have no fetch implementation, so it's not easy to slot in :)

[06:40:17.0000] <annevk>
ah

[06:42:16.0000] <MikeSmith>
https://stackoverflow.com/questions/53227009/set-a-default-for-feature-policy-http-header

[06:49:59.0000] <annevk>
Splitting while caring about quotes though

[06:50:11.0000] <nox>
Domenic: I feel like there is a missing lib between the webidl parser and webidl2js.

[06:50:15.0000] <annevk>
Did not expect the amount of prose I got

[07:59:27.0000] <Domenic>
nox: how so?

[08:01:35.0000] <nox>
Domenic: One that validates the WebIDL, merges the implemented partial interfaces with the main one, merges overloads together, etc.

[08:04:19.0000] <Domenic>
It makes sense that could be separate. Currently it's handled as part of the compilation flow.

[12:14:36.0000] <fserb>
annevk, Domenic: I've just uploaded a summary of the wide gamut changes (https://github.com/whatwg/html/issues/4167)

[12:15:03.0000] <fserb>
Could you help me get some feedback from other browsers? It would unblock the intent to ship on Chrome.

[12:57:38.0000] <Domenic>
fserb: one thing I would suggest for that purpose is removing Chrome-specific IDL from your post

[13:25:35.0000] <fserb>
Domenic: geeez, good point.

[13:26:15.0000] <fserb>
done.


2018-11-10
[22:01:26.0000] <annevk>
fserb: it seems really bad for Chrome to ship without there being a proper standard others can implement

[22:07:52.0000] <annevk>
fserb: I can’t really recommend Mozilla to support this


2018-11-12
[00:19:09.0000] <botie>
mkwst, at 2018-11-08 06:08 UTC, MikeSmith said: the Origin Policy bug, added comment at https://bugs.chromium.org/p/chromium/issues/detail?id=901477#c14 with NetLog dump attached

[01:03:22.0000] <mkwst>
MikeSmith: Thanks for that. It was quite helpful in debugging the issue. There's a patch out to address the problem, just waiting on a review.

[01:11:13.0000] <annevk>
Anyone around that can quickly review https://github.com/whatwg/fetch/pull/828? It's very short

[01:23:51.0000] <annevk>
MikeSmith: ta!

[01:27:05.0000] <MikeSmith>
annevk: cheers

[08:13:56.0000] <fserb>
annevk: but that was the whole point, no?

[08:14:57.0000] <fserb>
annevk: I was trying to lay out all the IDL changes, to see if people would have a problem with that.

[08:15:50.0000] <fserb>
of course, I'm assuming that the non IDL changes are relatively obvious, given the IDL changes.

[08:15:51.0000] <annevk>
fserb: how is anyone supposed to implement from an IDL sketch what Chrome would end up shipping?

[08:15:56.0000] <fserb>
they are not.

[08:16:01.0000] <fserb>
we are doing the spec work anyway

[08:16:06.0000] <fserb>
but if they agree with the IDL changes

[08:16:16.0000] <fserb>
we can move forward with the spec work

[08:16:41.0000] <fserb>
it's more of an OK to the roadmap

[08:16:47.0000] <annevk>
fserb: it sounded like you wanted to ship if they agree to IDL changes, which isn't really something I'm familiar with

[08:17:21.0000] <annevk>
fserb: at least per WHATWG process it's agreement on a concrete a change

[08:17:32.0000] <fserb>
what do you meant by that?

[08:17:50.0000] <annevk>
fserb: https://whatwg.org/working-mode#changes

[08:18:50.0000] <fserb>
I don't see how what I said goes against what's there.

[08:19:13.0000] <fserb>
I putting forward a proposed IDL, followed by a bunch of actual spec changes with tests and implementation bugs.

[08:19:46.0000] <fserb>
it doesn't say anything about shipping does it?

[08:20:16.0000] <fserb>
like

[08:20:40.0000] <fserb>
maybe I'm missing something

[08:20:55.0000] <annevk>
fserb: so some time ago you wrote here "Could you help me get some feedback from other browsers? It would unblock the intent to ship on Chrome."

[08:21:04.0000] <fserb>
yes.

[08:21:21.0000] <annevk>
fserb: perhaps I misunderstood and you elided a bunch of steps in between

[08:21:50.0000] <fserb>
well, I won't stop doing the spec changes.

[08:21:51.0000] <annevk>
fserb: but that came across as if the spec changes wouldn't be done first

[08:22:00.0000] <fserb>
ahn

[08:22:03.0000] <fserb>
gotcha

[08:22:16.0000] <fserb>
so you are saying that you don't want chrome to ship before all the spec changes are landed, is that it?

[08:22:20.0000] <fserb>
but is that a thing?

[08:22:37.0000] <annevk>
fserb: I think normally it's much more concrete what will ship, yes

[08:22:50.0000] <fserb>
I mean, if the chrome API owners are comfortable with the public support around something, why wouldn't that be enough?

[08:22:56.0000] <fserb>
I mean

[08:22:57.0000] <annevk>
fserb: and we try to make that even better over time

[08:23:06.0000] <fserb>
if the spec work is considered trivial;

[08:23:13.0000] <fserb>
I see

[08:23:27.0000] <fserb>
"more concrete" than the IDL changes.

[08:23:29.0000] <fserb>
hmmmmm

[08:23:30.0000] <fserb>
okey

[08:23:56.0000] <annevk>
Yeah, this needs an actual processing model, how the various numbers end up allocated in different color spaces, etc.

[08:23:57.0000] <fserb>
I was under the impression that, for this particular change, if we agree on the IDL changes, the rest is relatively trivial - in the sense that is more "spec work" than actual changing the meaning of something.

[08:24:07.0000] <fserb>
(we are not doing color spaces here, btw)

[08:24:18.0000] <fserb>
(is JUST higher precision backing storages)

[08:24:39.0000] <fserb>
but if that's not the case, then I agree with you

[08:25:12.0000] <annevk>
/me looks again

[08:25:54.0000] <annevk>
fserb: wide gamut isn't different colors?

[08:26:59.0000] <fserb>
kinda, but not really. What we want to spec out is: you can create a backing storage with float16, in which case you are by default in extended SRGB color space.

[08:27:10.0000] <fserb>
Which means: from 0-1.0 behaves exactly like the current SRGB.

[08:27:19.0000] <fserb>
and outside that, well, it behaves like extended SRGB.

[08:27:29.0000] <fserb>
so it does have a different color space

[08:27:35.0000] <fserb>
but it's just a natural extension of the current one.

[08:28:29.0000] <fserb>
eventually we will work on a second step for this, which would be actual color space selection (P3, etc..). But the problem is: the color space selection thing is much more controversial.

[08:28:33.0000] <annevk>
fserb: but ImageData would presumably have a different layout?

[08:28:52.0000] <annevk>
fserb: and you'd have to define what happens if you putImageData from a different layout onto this backing and such

[08:29:07.0000] <fserb>
what do you mean by layout?

[08:29:13.0000] <annevk>
fserb: I'd also think we want to extend the ImageData constructor and not createImageData()

[08:29:24.0000] <annevk>
fserb: u8 vs u16?

[08:29:32.0000] <annevk>
f16

[08:29:48.0000] <fserb>
but we did extend the constructor, no?

[08:29:57.0000] <fserb>
we did both.

[08:30:07.0000] <annevk>
sorry, yes, my bad

[08:30:21.0000] <annevk>
I guess I'm not sure on createImageData(), if we consider that historical at this point

[08:30:31.0000] <fserb>
I'd be fine with that.

[08:31:08.0000] <annevk>
fserb: and CanvasPixelFormat has float16 but there's no such primitive in the web platform (other than IDL maybe)

[08:31:37.0000] <fserb>
yes.

[08:31:58.0000] <fserb>
I'm up to change that too, if we have a better suggestion on how to surface this.

[08:33:02.0000] <fserb>
(I'm updating the bug with some of the answers here)

[08:36:07.0000] <fserb>
(For the ImageData layout, it's sort of what we mean by typedef (Uint8ClampedArray or Uint16Array or Float32Array) ImageDataArray;, right?

[08:36:18.0000] <annevk>
yeah I had missed that, my bad

[08:36:37.0000] <annevk>
what's unclear is how the numbers are filled in, but I suppose you can imagine to some extent

[08:37:00.0000] <fserb>
specially in the non obvious cases (when you ask for something different than the backing storage). yes.

[08:37:38.0000] <annevk>
I guess if things go beyond 255 that's somewhat clear (if that's how wide gamut works), but it's not clear for transparency for instance

[08:44:15.0000] <annevk>
fserb: in general what ends up being important for features in terms of web compat is how they behave in edge cases, so that's why when judging features to impl it helps a lot if those are crystal clear; if not you basically have to reverse engineer to compete, which is no fun (a lot of what WHATWG defines is exactly such reverse engineering to allow engines

[08:44:15.0000] <annevk>
to compete)

[08:46:28.0000] <fserb>
I can see that.

[08:48:31.0000] <fserb>
but I feel like the edge cases are easier to change after an initial release (on Chrome side, at least). And moving forward to ship on chrome would mean, in practice, that if we go forward today it goes to stable in 3 months, right?

[08:48:55.0000] <fserb>
so what I thought was: oh, if we agree on the overall plan, those edge cases I can fix as the come.

[08:50:11.0000] <fserb>
and the reason I try to go this way

[08:50:20.0000] <fserb>
is because I thought it would remove pressure from the whatwg reviews

[08:50:43.0000] <fserb>
but I don't know... if it makes you uncomfortable, it's maybe not worth it

[08:53:39.0000] <fserb>
that said, even if we don't ship right now on Chrome, I think having an overall tracking bug with the roadmap is useful

[09:02:28.0000] <Domenic>
I think the question is really whether, *for other canvas implementers*, it's obvious how to implement from the IDL. For annevk and me, it's not so obvious, so it seems like you're underdefining the feature in a way that makes it hard to evaluate. But maybe for people with their head in the canvas realm, it's clear.

[09:04:01.0000] <annevk>
fserb: yeah, the tracking issue is helpful

[09:04:24.0000] <annevk>
fserb: in general it seems a bit weird to me how canvas features often appear to be discussed elsewhere already

[09:04:32.0000] <annevk>
fserb: but maybe that wasn't the case for this

[09:07:00.0000] <annevk>
Domenic: I'd like to think I know a fair bit about canvas, but maybe not

[09:07:24.0000] <annevk>
Domenic: in other news, I'm on track towards removing most "(ignoring parameters)" in Fetch, maybe even all, but I really need to leave it for today

[09:07:26.0000] <Domenic>
Well, maybe not at the color spaces and backing store level, is what I meant? I certainly don't :)

[09:07:33.0000] <Domenic>
\o/

[09:08:06.0000] <annevk>
Domenic: I've been trying to describe the backing store more formally, but left it unfinished as there was some other stuff blocking it

[09:08:22.0000] <Domenic>
Ah nice OK, I guess just me then


2018-11-13
[04:26:00.0000] <annevk>
mkwst: hey, are you around?

[04:26:11.0000] <annevk>
mkwst: if so, I'm wondering about CORS and navigations a bit

[04:27:03.0000] <annevk>
mkwst: and https://wicg.github.io/cors-rfc1918/ might do some of that I guess

[04:30:57.0000] <annevk>
mkwst: but I'm not entirely convinced it handles enough of the details, esp for navigations

[04:31:19.0000] <annevk>
mkwst: or maybe the plan at this point is to wait for Origin Policy/Manifest, which would make this simpler?

[05:01:33.0000] <mkwst>
Hi. I'm kinda around!

[05:02:06.0000] <mkwst>
I'm 100% sure that that doc doesn't handle all the details. It's old and sketchy and hasn't gotten enough review because we collectively haven't been spending time on it.

[05:02:23.0000] <mkwst>
What details are you interested in, in particular?

[05:02:26.0000] <mkwst>
^^ annevk

[05:04:37.0000] <annevk>
mkwst: I'm wondering how difficult it is to patch navigation to use CORS, in a way that also makes sense for service workers, etc.

[05:05:28.0000] <annevk>
mkwst: and I guess a little bit about what it would mean; it'd definitely not impact WindowProxy security checks for instance, so it's mostly about whether you maybe get to be in the same process

[05:06:05.0000] <annevk>
mkwst: (this might be interesting for Chrome on Android I suspect)

[05:07:03.0000] <annevk>
mkwst: it seems you mostly tried to patch this entirely on Fetch's side, and maybe that works, I guess I should see if that does the right thing for redirects and if it does it's probably okay

[05:07:09.0000] <mkwst>
Hrm. I worry a bit about CORS becoming a gateway to process isolation, because I'm not actually sure it's a good thing for folks to open up cross-origin access to their resources more generally.

[05:08:15.0000] <mkwst>
When I last looked at this in detail (2016?), it made sense to do all the work in Fetch.

[05:08:38.0000] <mkwst>
But the navigation algorithm has evolved since then. Some of the work might need to move to HTML for CORS-RFC1918 in particular.

[05:09:08.0000] <mkwst>
That model might work for process isolation as well, as it's really concerned with passing the _preflight_, not the actual resource response.

[05:09:46.0000] <mkwst>
Which means that the actual response value doesn't have to be opened up cross-origin. The server just needs to grant access to ask for the thing in the way it's being asked for.

[05:10:52.0000] <annevk>
mkwst: yeah, it might be that a simple flag is sufficient, but then the question is whether redirects can taint such a flag or not

[05:11:23.0000] <annevk>
mkwst: I hope redirects properly taint sec-metadata, I haven't really looked at how that works

[05:12:19.0000] <mkwst>
annevk: sec-metadata recalculates the value on each pass through fetch.

[05:12:25.0000] <mkwst>
At least, that's what I remember writing down.

[05:13:08.0000] <annevk>
mkwst: so A -> A' -> B -> A means same-site, cross-site, cross-site?

[05:13:30.0000] <annevk>
And in particular if there's another -> A it remains cross-site?

[05:14:04.0000] <mkwst>
Yes. See https://mikewest.github.io/sec-metadata/#abstract-opdef-set-the-sec-metadata-header-for-a-request and https://mikewest.github.io/sec-metadata/#abstract-opdef-obtain-the-site-value.

[05:14:27.0000] <mkwst>
The latter walks the whole URL list, with the intent of keeping the `cross-site` taint once anything in the redirect chain is cross-site.

[05:15:10.0000] <annevk>
cool

[05:15:22.0000] <mkwst>
I haven't shipped it in Chrome yet mostly because of bugs in that redirect code that I haven't had time to fix.

[05:15:37.0000] <mkwst>
And because it apparently broke Switzerland.

[05:15:40.0000] <annevk>
Anyway, that kind of thing but for response headers is more involved and often done wrong (e.g., see Timing-Allow-Origin)

[05:15:59.0000] <annevk>
I guess it's involved for request headers too then, lol

[05:16:01.0000] <annevk>
Redirects...

[05:16:20.0000] <annevk>
Firefox still has bugs with Origin too around this kind of logic

[05:16:49.0000] <mkwst>
(We have tests (that Chrome's currently failing) at https://wpt.fyi/results/fetch/sec-metadata/redirect?label=experimental)

[05:17:14.0000] <mkwst>
I can imagine that kind of bug being common. It's easy to forget redirects when specifying things like TAO.

[05:17:43.0000] <annevk>
I did try to encourage them to carefully study CORS when doing that, but...

[05:19:14.0000] <annevk>
There's some brokenness in this model too though in that for <iframe> and I think <img> cross-origin -> same-origin does end up meaning same-origin, but for fetch() it doesn't (and I suspect that in particular for <img> the spec might be wrong)

[05:19:55.0000] <annevk>
Anyway, maybe CORS-like stuff for navigations is more doable than I thought


2018-11-14
[23:55:34.0000] <MikeSmith>
anybody have a clue how I can get a URL for whatever the latest version of https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses-04.html is?

[23:55:58.0000] <MikeSmith>
e.g., if I just use https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses it redirects to https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses-04.txt

[23:56:48.0000] <annevk>
MikeSmith: I'd use https://tools.ietf.org/html/draft-yasskin-http-origin-signed-responses, but yeah, it'll redirect

[23:58:19.0000] <MikeSmith>
annevk: thanks yeah but that redirects to the faux-HTML version

[23:58:41.0000] <MikeSmith>
which is better than the plain text version at least

[23:59:29.0000] <MikeSmith>
I think I’ll just use https://wicg.github.io/webpackage/draft-yasskin-http-origin-signed-responses.html and ignore all the IETF versions

[00:00:12.0000] <annevk>
MikeSmith: I think the IETF one is likely better as it'll have forward links if the draft gets adopted by an IETF WG and such

[00:00:21.0000] <annevk>
MikeSmith: unless this moves out of the IETF

[00:02:47.0000] <MikeSmith>
annevk: well https://tools.ietf.org/id/draft-yasskin-http-origin-signed-responses-04.html doesn’t have any forward links

[00:03:04.0000] <MikeSmith>
so I guess you mean it’s best to cite https://tools.ietf.org/html/draft-yasskin-http-origin-signed-responses

[00:03:39.0000] <annevk>
MikeSmith: right

[00:03:55.0000] <MikeSmith>
OK, yeah will do that

[02:49:53.0000] <annevk>
hsivonen: I guess I'm showing my ignorance here, but how would Swift encode U+0000 if strings are terminated by 0x00?

[02:50:12.0000] <annevk>
hsivonen: https://forums.swift.org/t/string-s-abi-and-utf-8/17676 doesn't talk about this

[03:01:33.0000] <Ms2ger>
annevk, I don't know if this is the case, but they may store the length as well, so you could have { length: 3, data: "a\0b\0" }

[03:06:27.0000] <annevk>
Ms2ger: but then it's not a normal C-string is it?

[03:07:03.0000] <Ms2ger>
Did they say that it was?

[03:07:27.0000] <annevk>
Ms2ger: "By maintaining nul-termination in our storage, interoperability with C is basically free: we just use our pointer."

[03:08:28.0000] <Ms2ger>
I don't know that disagrees with my hypothetical implementation, but I know nothing about Swift, so I'm going to stop here :)

[06:24:00.0000] <annevk>
mkwst: https://github.com/whatwg/html/issues/4175 is what I was contemplating yesterday, more concretely

[08:59:49.0000] <hsivonen>
annevk: the way XPCOM strings do it is that if you have U+0000 in the string and try to use C interop, C sees the string only up to the U+0000.

[09:09:23.0000] <annevk>
hsivonen: aka security fun

[15:15:45.0000] <MikeSmith>
annevk: Domenic is there a plan/issue to un-monkey-patch the Feature Policy spec? https://wicg.github.io/feature-policy/#integration-with-html If there’s not already an issue, should I open one?

[15:17:17.0000] <MikeSmith>
oh I now see https://wicg.github.io/feature-policy/#issue-3778ddf4

[15:17:24.0000] <MikeSmith>
>  Monkey-patching! As soon as we know that this is the direction we wish to pursue, upstream all of this.

[15:17:46.0000] <MikeSmith>
... but I don’t find any corresponding github issue

[15:19:24.0000] <Domenic>
MikeSmith: worth opening something. I think a lot of it was already integrated in https://github.com/whatwg/html/pull/3287 , so maybe that section just needs to go away?

[15:38:46.0000] <Domenic>
annevk: ping on https://github.com/whatwg/html/pull/4105


2018-11-15
[18:27:23.0000] <jermw>
Hi everyone.  How can I keep track of the diffs in the HTML Living Standard?  Let's say I want to: see what new features exist from the last time I reviewed it; see what is on the roadmap for inclusion; see what has changed/dropped etc. How would I do that?

[20:43:13.0000] <MikeSmith>
jermw: look through the commit log for the repo, and look through the issue tracker

[20:56:48.0000] <MikeSmith>
Domenic: thanks ーfiled https://github.com/WICG/feature-policy/issues/245

[21:31:13.0000] <rniwa>
jermw: I think there's a way to see the diff between two git hashes

[21:31:24.0000] <rniwa>
I forgot how to do that though

[21:31:28.0000] <rniwa>
maybe MikeSmith would know

[21:35:13.0000] <MikeSmith>
https://blog.github.com/2010-03-01-introducing-github-compare-view/#how-to-customize-the-commit-range

[23:36:45.0000] <annevk>
There is a rendered diff for each PR, but you’d have to locate that

[02:04:34.0000] <jermw>
ok thx everyone

[04:20:32.0000] <hsivonen>
I'm looking for a linkable reliable source that documents that V8 has the optimization of not storing the high half of every UTF-16 code unit if the string is entirely in the Latin1 range. Where should I look?

[08:45:01.0000] <annevk>
hsivonen: https://chromium.googlesource.com/v8/v8/+/master/src/objects/string-inl.h#152

[08:45:07.0000] <annevk>
hsivonen: (though maybe not link to master)

[08:45:28.0000] <annevk>
hsivonen: not the greatest source though, I think there was a post somewhere at some point that explained it, but can't find it

[09:16:45.0000] <hsivonen>
annevk: yeah, I located source that checks for one-byte vs. two-byte but I failed to locate a code comment that says outright what one-byte is

[09:18:57.0000] <annevk>
hsivonen: I did find a SpiderMonkey post which says one of the reasons for not doing UTF-8 is a regexp engine copied from V8 that already handles Latin1… Lost the link, but from 2014 by Jan de Mooi

[09:33:30.0000] <hsivonen>
annevk: Thanks. Not trivially googlable. I think I'll just assert things about V8 without a link.

[09:34:10.0000] <hsivonen>
annevk: I think I know why there are still two failing UTF-32 text/plain test cases on WPT. I'm guessing this hack is to blame: https://bugzilla.mozilla.org/show_bug.cgi?id=631751

[09:34:55.0000] <annevk>
hsivonen: hmm they were all passing for me iirc

[09:35:12.0000] <annevk>
hsivonen: or outside encoding/?

[09:35:33.0000] <hsivonen>
annevk: https://wpt.fyi/results/encoding/unsupported-encodings.any.html?label=experimental

[09:35:55.0000] <hsivonen>
hmm. the worker variant fails too and the HTML parser isn't run on Workers

[09:36:11.0000] <hsivonen>
so maybe my guess is wrong

[09:37:04.0000] <annevk>
How does Chrome suddenly pass?

[09:38:10.0000] <hsivonen>
no, my guess is wrong

[09:38:13.0000] <hsivonen>
the test is wrong, too

[09:38:34.0000] <hsivonen>
the test expects text/plain in XHR to default to windows-1252, but it defaults to UTF-8

[09:40:00.0000] <annevk>
hsivonen: oh this test was not touched I think in that PR

[09:40:34.0000] <annevk>
hsivonen: I can fix this tomorrow if you file something somewhere to remind me

[09:40:40.0000] <hsivonen>
jgraham: thanks for the wpt github invitation.

[09:44:24.0000] <hsivonen>
Filed as https://github.com/web-platform-tests/wpt/issues/14082

[09:45:30.0000] <annevk>
Great!

[11:10:24.0000] <jorendorff>
Domenic: I have a dumb question about Streams. Is it really necessary to pass forAuthorCode everywhere, or is it a function of what kind of reader exists?

[11:10:55.0000] <jorendorff>
i'm wondering if i can implement it as a bit per stream

[11:44:58.0000] <jorendorff>
filed #964


2018-11-16
[02:03:33.0000] <annevk>
TabAtkins: 🧁🎉

[06:52:57.0000] <TabAtkins>
😎

[09:57:54.0000] <smaug____>
Domenic: I guess there aren't tests like https://github.com/web-platform-tests/wpt/blob/master/html/semantics/scripting-1/the-script-element/module/dynamic-import/string-compilation-base-url-inline-module.html dealing with iframes

[09:58:14.0000] <smaug____>
where, say, script in page A calls windowB.setTimeout or so

[10:30:32.0000] <smaug____>
I seem to also miss where the stuff is defined for event handlers


2018-11-19
[08:17:32.0000] <domfarolino>
annevk: RE https://github.com/whatwg/fetch/pull/834#issuecomment-439837919; I understand that the PR will add the opaque filter to A->B->A "no-cors" images. Thus HTML will have to penetrate this to get at it. I'm unclear on your last (sentence) though

[08:18:48.0000] <gsnedders>
I am marginally disappointed that the MDN page for <plaintext> doesn't say it's been obsolete since 1993.

[08:34:42.0000] <gsnedders>
if I have a document <script>location.href = "http://example.com"</script> the load event will never fire, right, but it will get readyState fired for complete just before unload?

[08:42:04.0000] <annevk>
domfarolino: the change would be to not poke through

[08:43:14.0000] <domfarolino>
annevk: But that would be up to HTML right, to poke through or not?

[08:44:12.0000] <domfarolino>
was confused with "change things around __here__ if we wanted"

[08:47:00.0000] <gsnedders>
what valid URL cases end up with identical serialized URL? http://foo.com ends up as http://foo.com/, what else?

[08:47:55.0000] <gsnedders>
oh, plenty of cases, I'm just searching for the wrong things in the spec

[08:54:59.0000] <Domenic>
I just retweeted this but realized maybe it's not correct per spec https://twitter.com/_developit/status/1064548725891231745?s=19 isn't innerText supposed to only require style recalc these days?

[08:56:37.0000] <gsnedders>
Domenic: v. layout? (Twitter isn't loading here for whatever reason.) Yeah, I think that's true.

[08:57:00.0000] <Domenic>
Yeah versus layout

[09:00:03.0000] <domfarolino>
annevk: My understanding is that #834 makes it so that A->B->A "no-cors" <img> responses will be opaque. youennf's WPT asserts this, so do we necessarily want HTML to poke through?

[09:01:05.0000] <domfarolino>
Domenic: I thought it just required style too, but for some reason a lot of things surfacing from a google search indicate people think it requires layout

[09:01:35.0000] <domfarolino>
Inner text collection steps require CSS "computed values", not sure what that requires though entirely

[09:02:25.0000] <Domenic>
I think how this happened is that it required layout in WebKit then when Gecko went to standardize it they made a version that only requires style recalc. Blink is working on aligning with spec. No idea about Edge.

[09:03:04.0000] <gsnedders>
domfarolino: computed values are the output of style, essentially

[09:03:16.0000] <domfarolino>
That's what I figured

[09:03:18.0000] <gsnedders>
domfarolino: yeah, I think that's right

[09:03:27.0000] <gsnedders>
uh, Domenic: ^^

[09:03:42.0000] <gsnedders>
There's also the old Presto approach that just returns Element.textContent :)

[09:03:44.0000] <annevk>
domfarolino: yeah, it would be up to HTML, but I wanna figure that part out too 😊

[09:04:11.0000] <gsnedders>
I think the other thing wrt the tweet is people just not realising layout recalc and style recalc can be done separately?

[09:05:35.0000] <domfarolino>
annevk: Ok that makes sense - is there currently a need right now for HTML to poke through?

[09:10:00.0000] <domfarolino>
(I think as per current spec the "no-cors" image responses are opaque and thus not "poked through")

[09:12:32.0000] <annevk>
domfarolino: perhaps, depends on what browsers wanna do, apparently there’s no interop

[09:17:38.0000] <domfarolino>
annevk: Gotcha. FWIW Chrome is OK with #834's approach, but we want to collect UMAs before impl to see if it might break too much content

[09:30:53.0000] <annevk>
domfarolino: that PR restores the status quo for fetch(), which I think everyone is aligned on, hence leaving the issue open for the HTML side

[09:39:40.0000] <domfarolino>
Makes sense. I’d like to see browsers also align on Safari’s treatment of images

[11:13:20.0000] <domfarolino>
Domenic: This might be a dumb question, but what is the difference between HostResolveImportedModule and ...Dynamically?

[11:14:29.0000] <Domenic>
domfarolino: HostResolveImportedModule translates (specifier, referencingScriptOrModule) pairs into modules synchronously. It's called a lot from various places in the ES spec. HostImportModuleDynamically actually does the fetch. It's only called by import().

[11:14:41.0000] <Domenic>
(and it's async, in a funny way)

[11:19:55.0000] <domfarolino>
Domenic: Ohh that's why FinishDynamicImport calls HostResolveImportedModule, because HostResolveImportedModuleDynamically actually does the fetching, and the fetching algorithms insert the script into the module map for later reuse by HostResolveImportedModule...that makes sense thanks

[11:20:17.0000] <Domenic>
Yeah. Would welcome a PR making the flow a bit clearer.

[11:20:49.0000] <domfarolino>
Thanks a lot for getting to https://github.com/whatwg/html/pull/4181, as I let it slip through the cracks.

[11:21:36.0000] <domfarolino>
Yeah I'm wondering about how that might be done

[11:22:09.0000] <Domenic>
Probably too ambitious, but you could imagine a call graph...

[11:22:39.0000] <domfarolino>
Kinda what I was thinking

[11:24:24.0000] <Domenic>
Like, `<script type=module>` -> fetch a module script graph -> create a module script -> `import` statement parsing -> HostResolveImportedModule -> resolve a module specifier; `import()` expression -> HostImportModuleDynamically -> resolve a module specifier + FinishDynamicImport -> HostResolveImportedModule -> resolve a module specifier. Or something. Probably more things on each level.

[11:56:03.0000] <ocket8888_>
Is there an IRC channel where I can ask about HTTP specs? Having a hard time googling it

[12:12:53.0000] <domfarolino>
Yeah I like the idea of having a graph like that somewhere. Especially for all the script fetching algorithms too (IMSGFP and friends)


2018-11-20
[18:58:25.0000] <annevk>
mkwst: so I think I figured out what this document.domain feature policy needs to do for  actual isolation. Create a new kind of agent that can only be reused by globals whose document also has the bit set. document.domain isn’t the interesting feature, agents and agent clusters are. That would prevent messaging SAB cross-origin but same-site, for

[18:58:25.0000] <annevk>
instance.

[18:59:00.0000] <annevk>
mkwst: that is a lot more involved though

[07:10:45.0000] <yoav>
Hey! I'm revamping the buffering logic and have a question regarding event firing. Current definition says that that the event should fire with its "bubbles" attribute set to true https://w3c.github.io/resource-timing/#dfn-add-a-performanceresourcetiming-entry

[07:11:15.0000] <yoav>
the event is attached to the Performance interface, so I'm not sure what bubbling or capturing would actually mean in this context

[07:11:41.0000] <yoav>
wanted to verify that I'm right and I can simply remove the "bubbles" attribute altogether

[07:13:44.0000] <yoav>
s/buffering logic/resource timing buffering logic/

[07:25:43.0000] <annevk>
yoav: you can, but add a test

[07:26:01.0000] <annevk>
yoav: it's indeed best to use the defaults in the DOM Standard unless there's a specific reason not to

[07:26:31.0000] <yoav>
annevk: what should I be testing? where would an event on `window.performance` bubble? to `window`?

[07:28:20.0000] <annevk>
yoav: on the event object that's dispatched, simply add assert_false(e.bubbles) to an existing test

[07:28:32.0000] <annevk>
sorry, in a listener

[07:28:55.0000] <yoav>
oh, ok


2018-11-21
[23:56:31.0000] <annevk>
hsivonen: FWIW, I kinda think we should reopen the ISO-2022-JP issue to get answers at least at this point

[00:00:17.0000] <hsivonen>
annevk: ok

[01:16:55.0000] <annevk>
Oooh nice, GitHub records force pushes now

[06:24:27.0000] <Ms2ger>
annevk, will try to remember, but the label is certainly safer :)

[06:31:49.0000] <wanderview>
hmm... it seems you can't load a blob URL with query params appended in chrome or edge... is that supposed to work?

[06:49:05.0000] <annevk>
wanderview: per step 4 of https://url.spec.whatwg.org/#concept-url-parser, yes

[06:50:16.0000] <wanderview>
hmm, ok

[06:54:30.0000] <wanderview>
annevk: thanks... and here is the context of the question in case your curious: https://bugs.chromium.org/p/chromium/issues/detail?id=907452

[06:55:23.0000] <annevk>
Ah, not due to a wpt failure

[08:14:43.0000] <annevk>
Domenic: I noticed in Firefox's code that there's also special handling for U+0000 when it comes to these popups

[08:14:51.0000] <annevk>
alert() et al

[08:24:57.0000] <Domenic>
annevk: https://github.com/whatwg/html/issues/4109

[08:26:50.0000] <annevk>
ta

[09:11:33.0000] <Mek>
wanderview/annevk: blob URLs with query parameters are actually not supposed to work, I just somehow never followed up on https://github.com/whatwg/url/pull/371 (i..e the URL spec bits of sorting out the blob URL mess) when I was working on clarifying this last year...

[09:25:18.0000] <annevk>
Mek: why not?

[09:26:00.0000] <annevk>
Anyway, I guess better discussed in an issue

[09:26:26.0000] <Mek>
I don't remember if there was more than "three out of four browsers agree" when I was fixing the specs last year

[09:28:39.0000] <Mek>
also the FileAPI spec has always had the chrome/webkit/edge behavior, at some point it just was made non-normative when URL spec was written in an incompatible way.

[10:06:52.0000] <annevk>
I’d like to at least blame this to see if I considered this and had a reason


2018-11-22
[16:52:36.0000] <smaug____>
Domenic: related to https://bugzilla.mozilla.org/show_bug.cgi?id=1342012#c50 Do you recall by any chance if tests were added to cover also calling setTimeout on different window.

[16:53:05.0000] <smaug____>
last time I was looking at that, I couldn't find such tests, but perhaps I just missed them

[16:56:19.0000] <Domenic>
smaug____: I don't recall, sorry.

[16:56:35.0000] <smaug____>
ok, thanks

[02:25:13.0000] <gsnedders>
whimboo: /win 26

[02:25:18.0000] <gsnedders>
well that worked well

[06:52:53.0000] <MattiasBuelens>
Domenic: I'm seeing some weirdness in the wpt-firefox-nightly-stability logs for https://github.com/web-platform-tests/wpt/pull/14172, see https://tools.taskcluster.net/groups/aFoCroHPQMmeivpCA9Zeyw . There's a whole bunch of logs about "TypeError: The ReadableStream reader was released."

[06:59:01.0000] <MattiasBuelens>
Huh, interesting. This seems to log an error to the console in Firefox (with streams enabled). But it shouldn't, right? https://www.irccloud.com/pastebin/9PDryjl2/

[09:35:47.0000] <Domenic>
MattiasBuelens: I guess the implementation is still in progress? :-/

[12:54:17.0000] <MattiasBuelens>
Domenic: Ah, I see, those errors also showed up in other test runs on Firefox. There were just a lot more occurrences since *all* tests were renamed. 😅

[12:54:36.0000] <MattiasBuelens>
Okay, nothing to worry about then.


2018-11-24
[15:40:42.0000] <domfarolino>
Does one have to do anything special for html-build to detect local Wattsi? I’ve built + added wattsi/bin to my PATH (assuming this is a prereq) however I see “Local Wattsi is not present...”


2018-11-25
[16:22:46.0000] <MikeSmith>
domfarolino: it should just find it in your path

[16:23:03.0000] <MikeSmith>
you may want to do hash -r in the shell

[16:23:08.0000] <MikeSmith>
or open a new shell

[16:23:37.0000] <domfarolino>
Yeah I think I reloaded the shell, but did it all quickly so will try again soon thanks

[16:24:59.0000] <MikeSmith>
OK

[18:39:43.0000] <domfarolino>
MikeSmith: Ok it worked now for some reason \o/ ty

[18:40:01.0000] <domfarolino>
Wow, so much quicker than non-local HTML builds

[19:13:29.0000] <MikeSmith>
domfarolino: glad it’s working

[19:13:56.0000] <MikeSmith>
and yeah it’s blazingly fast

[19:14:16.0000] <MikeSmith>
you can speed it up a bit further by using the -n switch

[19:42:24.0000] <domfarolino>
:)

[14:37:44.0000] <agio>
hi, I was wondering if anyone can explain or link me to documentation on what the  "application" MIME type is? i.e. formal definition of how its used?


2018-11-26
[17:07:57.0000] <MikeSmith>
agio: https://tools.ietf.org/html/rfc2046#section-4.5

[17:08:12.0000] <MikeSmith>
> The "application" media type is to be used for discrete data which do not fit in any of the other categories, and particularly for data to be processed by some type of application program. This is information which must be processed by an application before it is viewable or usable by a user.

[17:08:37.0000] <agio>
thanks, I found that too

[05:26:19.0000] <annevk>
gsnedders: re https://twitter.com/gsnedders/status/1067042972594855936 isn't Map preferable since you cannot get confused by other properties existing, e.g., someone doing __proto__ or some such

[05:30:28.0000] <gsnedders>
annevk: __proto__'s setter is on Object.prototype nowadays, no? So given a null [[Prototype]] there should be no magic?

[05:30:59.0000] <gsnedders>
Like, I'm pretty sure __proto__ isn't special-cased in [[Set]] nowadays

[08:06:34.0000] <annevk>
Domenic: so anywhere else you argue for mostly explicit management of things, and we also have construction and destruction of realms mostly defined, but agents is too far and needs to be circular? (In a way I'm not at all convinced actually works. In fact I'm pretty certain it doesn't.)

[08:07:18.0000] <annevk>
I'd rather have the most basic building blocks rather explicitly defined. If we do our job well there also wouldn't be too much management of them throughout the standards...

[08:07:28.0000] <Domenic>
annevk: You're right in this case, and I'm writing up why. But in general I much prefer simple definitions based on the properties of an object, over manually adding and removing things to a collection

[08:08:08.0000] <Domenic>
Layered != circular

[08:08:21.0000] <annevk>
But this isn't properly layered

[08:08:41.0000] <annevk>
Realms have origins, browsing contexts don't

[08:08:50.0000] <Domenic>
It has bugs, and ones that are unfixable (as I'm writing up). But fundamentally there's no difference between layering agents on top of URSOBCs versus layering URSOBCs on top of agents.

[08:09:32.0000] <annevk>
URSOBC was always meant to be what similar-origin window agent actually is

[08:09:41.0000] <Domenic>
Browsing contexts have active documents which have origins. Having to do bc.activeDoc.origin instead of realm.{activeDoc|singleGlobal}.origin is not any fundamentally worse

[08:10:20.0000] <Domenic>
I don't really have any context for that historical claim so I'm not sure how to engage with it.

[08:10:57.0000] <annevk>
I mean to say that this was always a bit of a hack, an approximation

[08:12:31.0000] <annevk>
Implementations always had collections of documents instead (e.g., doc group in Gecko), and browsing contexts were managed separately (e.g., tab group in Gecko)

[08:13:15.0000] <annevk>
This might be a bit different in user agents that don't have multiple documents per browsing context though (e.g., Chrome does a lot with just _frame)

[08:16:07.0000] <Domenic>
Yeah, thus my latest (just now) ask for an overview.

[08:18:23.0000] <annevk>
Domenic: so I tried to sketch it out in OP; a BC group holds a map for agent clusters, when you navigate around you pick from that map and construct/deconstruct agents and realms in it

[08:18:54.0000] <annevk>
Domenic: and it also holds a set of browsing context trees that belong to the group

[08:20:01.0000] <Domenic>
annevk: what is the key in the map?

[08:20:02.0000] <annevk>
Domenic: the latter is mostly needed for targeting a browsing context via a name and to know which map to use

[08:20:32.0000] <annevk>
Domenic: for agent cluster it's site, but with the Spectre headers it could be ("Spectre, origin)

[08:20:38.0000] <annevk>
sorry, "Spectre" (as a bit)

[08:20:55.0000] <Domenic>
Do we have a definition for "site"? I thought we just had a yes/no predicate

[08:21:41.0000] <annevk>
Domenic: scheme + domain's registrable domain (https://url.spec.whatwg.org/#host-registrable-domain)

[08:21:53.0000] <Domenic>
Got it

[08:22:07.0000] <Domenic>
OK so that gives you an agent cluster... let's se...

[08:22:17.0000] <annevk>
Domenic: we could have a separate map for shared/service workers I think, those could always be origin-bound agent clusters

[08:22:31.0000] <annevk>
Domenic: as they don't have d.domain

[08:23:01.0000] <Domenic>
Are the values of the maps agents or agent clusters?

[08:23:17.0000] <Domenic>
Remember e.g. dedicated worker agents are inside the same agent cluster as their parent window

[08:23:27.0000] <annevk>
Domenic: need to be agent clusters I think for that reason

[08:23:39.0000] <Domenic>
Oh you said "shared/service"

[08:24:00.0000] <annevk>
We'd need a bunch of convenience members around this to manage it all easily

[08:24:10.0000] <Domenic>
How do you know when to create a new agent, in the window case?

[08:24:12.0000] <annevk>
And have something like a similar-origin window agent cluster perhaps

[08:24:44.0000] <Domenic>
I guess top-level versus not

[08:25:28.0000] <annevk>
Domenic: if the map returns nothing for your cluster, you need to create a cluster, if there's a cluster, there's an agent you can use most likely (unless you're the first, but then it would be created as part of creating a similar-origin window agent cluster I think)

[08:25:58.0000] <Domenic>
" if there's a cluster, there's an agent you can use most likely" seems wrong for new top-level windows?

[08:26:21.0000] <annevk>
Domenic: a new top-level is a new browsing context group, which means the map is empty

[08:26:50.0000] <Domenic>
Oh there's a whole new level of hierarchy, I forgot, I thought the map was top-level...

[08:27:01.0000] <annevk>
Domenic: e.g., noopener/noreferrer means new bcg

[08:27:10.0000] <Domenic>
Is there a single top-level BC per BC group?

[08:27:17.0000] <annevk>
yes

[08:27:24.0000] <Domenic>
OK, that wasn't clear from the OP

[08:27:29.0000] <annevk>
and zero or more auxiliary

[08:27:34.0000] <annevk>
though the single top-level could go away

[08:28:46.0000] <annevk>
anyway, glad we arrived here today 😃

[08:28:52.0000] <Domenic>
Yep, thanks for walking me through it...

[08:29:13.0000] <annevk>
I'll try to clarify the design a bit more tomorrow and work out the exact setup we need for this

[08:29:34.0000] <annevk>
I waited a bit with that to see if there were any immediate concerns

[08:30:44.0000] <annevk>
Yeah, sorry it went a little sour, it's sometimes hard to pinpoint how to unstuck a conversation

[08:31:28.0000] <Domenic>
I guess I am more worried about the BroadcastChannel thing now too

[08:31:36.0000] <Domenic>
I wonder if we can get any Chrome multiprocess folks to comment

[08:32:20.0000] <annevk>
Domenic: there's still some problems with MessageChannel reportedly not working for SAB btw, due to being able to post it across threads, but not claim it, effectively leaking the SAB forever

[08:32:50.0000] <Domenic>
I mean that's true for anything in a MessageChannel, right?

[08:32:54.0000] <annevk>
Domenic: at least in the sense that nobody wanted to implement that for MessageChannel, but nobody raised the concern on whatwg/html either

[08:34:39.0000] <annevk>
Domenic: so I agree, but https://bugzilla.mozilla.org/show_bug.cgi?id=1360190#c9

[08:34:47.0000] <annevk>
Domenic: I've asked repeatedly for that to be raised in public, but no luck

[08:34:58.0000] <annevk>
"in public" -> whatwg/html

[08:35:46.0000] <Domenic>
:-/

[08:35:57.0000] <annevk>
Domenic: so yeah, BroadcastChannel is the only messaging thing that goes outside a browsing context group, but storage et al do too...

[08:36:50.0000] <Domenic>
Storage is more static though

[08:36:54.0000] <Domenic>
Seems totally separable

[08:37:02.0000] <Domenic>
Doesn't impact process creation choices

[08:37:44.0000] <annevk>
But cross-BCG BroadcastChannel would simply not support SAB which seems fine

[08:38:04.0000] <annevk>
And even intra-BCG it wouldn't always work due to different clusters existing

[08:38:54.0000] <annevk>
(It's actually an interesting question where shared/service workers get their agent clusters. They should probably not use a BCG, but some kind of global map.)

[08:39:22.0000] <annevk>
(Which has some implications for side channels as folks discovered, e.g., seeing how many shared workers can still be allocated.)

[14:19:56.0000] <Domenic>
annevk: were you planning to check out https://github.com/whatwg/html/pull/4115 ? Seems like the kind of work we should encourage :)


2018-11-27
[16:33:01.0000] <jyasskin>
Does anyone know where we handle the maximum length of a URL?

[16:37:33.0000] <Mek>
is there a maximum length for URLs in general? https://tools.ietf.org/html/rfc7230#section-3.1.1 seems to describe how servers should treat URLs that are too long, and mentions that clients and servers should support at least ~8K

[20:16:33.0000] <jyasskin>
Mek: I think it varies by browser, in practice, but I don't see even permission in Fetch for a browser to reject a too-long URL.

[20:17:07.0000] <Mek>
fetch just seems to leave that part up to the set of http specs?

[20:17:34.0000] <Mek>
but yeah, I have no idea what browsers actually do

[23:30:36.0000] <annevk>
Yeah, some bits of HTTP are being incorporated such as header parsing, so there is room for this. HTTP defining it for all clients is preferable though.

[23:38:30.0000] <annevk>
Domenic: I was hoping someone else would do an initial pass

[23:38:53.0000] <annevk>
Domenic: seems domfarolino might have done so from a quick glance

[23:40:07.0000] <domfarolino>
Yeah I briefly looked earlier when I saw the link. Happy to check it out in more detail though.

[23:42:33.0000] <annevk>
domfarolino: that’d be great

[05:47:49.0000] <annevk>
Domenic: https://gist.github.com/annevk/5c2df7a49db621a2c1cd4f3fb78210af

[05:48:16.0000] <annevk>
Domenic: I was thinking of posting that to the issue, for additional context, but happy to expand on things if it's unclear still

[05:49:14.0000] <Domenic>
annevk: I'd prefer making the top-level BC and auxiliary BC set explicit independent slots, instead of one big set

[05:51:09.0000] <Domenic>
I'm also a bit concerned about doing the worker changes separately leaving us with a hard-to-understand mismash, but wanting to chunk the work is also understandable...

[05:52:01.0000] <annevk>
Domenic: for the worker stuff the current declarative definition doesn't seem entirely problematic

[05:52:28.0000] <Domenic>
Yeah agreed, but having two different styles for very similar things seems like it'd be confusing.

[05:52:37.0000] <annevk>
Domenic: I'm not really sure what independent slots buys us here and it might make things more complicated for various traversal operations

[05:53:06.0000] <Domenic>
Independent slots make the model a lot clearer to me. You don't think there will be a use for getting the single top-level BC?

[05:53:57.0000] <annevk>
I'm afraid folks would use that kind of thing instead of finding the root of their tree, which is what they really need to be doing

[05:54:04.0000] <annevk>
(most of the time)

[05:54:23.0000] <annevk>
Because of the long conflation of top-level and auxiliary to mostly mean the same thing

[05:54:28.0000] <Domenic>
Hmm

[05:54:59.0000] <Domenic>
Well, I guess keep it in mind while writing the algorithms... I suspect it'll be clearer than a big bag that has hidden structure.

[05:55:12.0000] <annevk>
I guess if some state from top-level is important, it'd be better to store that directly on BCG

[05:55:26.0000] <annevk>
Though it's unclear what would happen if the top-level was closed

[05:55:36.0000] <annevk>
(which is another thing I wouldn't expect folks to deal well with)

[05:56:01.0000] <Domenic>
Right... wait, doens't the definition of top-level handle that?

[05:56:32.0000] <Domenic>
Oh, so right now I think all auxiliary BCs are also top-level BCs

[05:56:42.0000] <annevk>
right

[05:56:49.0000] <Domenic>
Let's not change that?

[05:57:15.0000] <Domenic>
E.g. there is a bunch of spec work like https://github.com/w3c/payment-request/pull/811

[05:57:24.0000] <annevk>
Agreed, perhaps I'm stressing the difference I want to point out incorrectly

[05:57:33.0000] <Domenic>
Yeah, probably need new terms

[05:57:40.0000] <annevk>
I guess I could say there's at most one non-auxiliary browsing context

[05:58:06.0000] <Domenic>
"root browsing context"? "original browsing context"?

[05:58:28.0000] <annevk>
root would ideally be equal to top-level if we reuse DOM tree terms

[05:58:43.0000] <Domenic>
This section will benefit from examples that map more directly to tabbed browsers than we usually talk about in the spec

[05:59:09.0000] <Domenic>
Maybe I can work on some diagrams and ask you to write nice text around them :)

[05:59:37.0000] <annevk>
That sounds great

[05:59:38.0000] <Domenic>
I think there's an open clarification issue about diagrams

[06:00:12.0000] <annevk>
Maybe the distinction top-level/auxiliary doesn't even matter as much anymore with BCGs

[06:00:25.0000] <annevk>
Because any important state would be anchored there

[06:00:45.0000] <Domenic>
Well it's not a distinction

[06:00:48.0000] <annevk>
And any BC can be an opener BC

[06:00:59.0000] <annevk>
Domenic: sorry, the non-auxiliary/auxiliary distinction

[06:01:06.0000] <Domenic>
I think specs like https://github.com/w3c/payment-request/pull/811 or feature policy do care about top-level-ness

[06:01:13.0000] <Domenic>
Not sure who if anyone cares about auxiliaryness

[06:01:37.0000] <annevk>
Care about non-auxiliaryness or care about top-levelness?

[06:01:56.0000] <Domenic>
I can't think of anything besides the window.opener spec that cares about auxiliariness

[06:03:20.0000] <Domenic>
Although I guess maybe some of the security stuff gets inherited into auxiliary... but maybe that's better served by BC groups...

[06:03:26.0000] <annevk>
Yeah, we might be able to do away with that term

[06:03:56.0000] <Domenic>
It still seems roughly useful to be able to talk about popup windows in some way, but maybe it's more confusing than helpful, and it's better to just talk about top-level BCs that have an opener versus don't.

[06:04:50.0000] <annevk>
Have an opener is dangerous as you can set it to null, but it might still be too late

[06:05:00.0000] <annevk>
That's why BCGs also help

[06:05:29.0000] <annevk>
(Although not to locate popups, as the initial top-level might be closed.)

[06:05:30.0000] <Domenic>
I guess we'll probably also get to clean that up and have disowning actually set opener to null

[06:05:45.0000] <Domenic>
Right now I think we keep it around so that they stay in the same URSOBCs

[06:05:49.0000] <annevk>
We cannot, because the WindowProxy can be leaked at any point

[06:06:02.0000] <Domenic>
We can set the opener to null and keep them in the same BCG I think

[06:06:04.0000] <annevk>
So they'll have to stay in the same BCG and the same agent cluster

[06:06:08.0000] <annevk>
Ah yes

[06:06:16.0000] <Domenic>
Whereas right now we "disown the opener" but leave the pointer there

[06:06:19.0000] <Domenic>
Which is confusing

[06:06:31.0000] <annevk>
Yeah it's bad

[07:32:51.0000] <smaug____>
/me wonders if anyone has ever considered to merge Referrer Policy into Fetch.

[08:07:48.0000] <annevk>
smaug____: I don’t think that has come up

[08:22:50.0000] <smaug____>
it just might, or might not, make fetch handling easier to read.

[12:08:07.0000] <innovati>
Not quite how to put it - but is it possible for a portion of an HTML page to define and use its own namespace?

[15:56:54.0000] <Domenic>
TabAtkins: does anything define how CSS background images or fonts get fetched? E.g. what referrer URL they send?

[15:57:48.0000] <Domenic>
I guess maybe https://w3c.github.io/webappsec-referrer-policy/#integration-with-css implies the answer is "no", but I can just point to that spec instead...

[15:57:57.0000] <TabAtkins>
There is none, yes.


2018-11-28
[08:18:20.0000] <innovati>
What's the story behind the 'Living' adjective in the name of the spec? I really like it, but I'm wondering where it came from and what it's supposed to mean?

[08:19:54.0000] <nox>
I think annevk wrote a blogpost on that topic.

[08:53:10.0000] <Domenic>
innovati: https://whatwg.org/faq#living-standard

[14:03:05.0000] <innovati>
thanks nox & Domenic <3

[14:56:04.0000] <milkii>
has there ever been talk of having a semantic splitting of <title>? e.g. have sitename and pagename or such tags? for various uses.

[14:56:20.0000] <Domenic>
I think those cases are largely covered by the web app manifest spec

[15:12:26.0000] <milkii>
Domenic: that has web app (site) name and a web app description, but unless i'm missing something on first read, there's no pagetitle, unless <title> will be expected to act specifically? the living standard standard's two head examples use title for "document" then "application".

[15:12:42.0000] <Domenic>
milkii: I guess I don't understand all the terms you're using.

[15:18:43.0000] <milkii>
<title> can be whatever, so there's no reliable way for a user agent to extract/save the site name, seperate from the page name (what might be h1 (if only one h1 is used)).

[15:23:27.0000] <milkii>
if it were possible, one could search just the page names of bookmarks but not match the site name, or have a method to format the document details in whatever way to copy/paste for a reference, etc.

[15:23:35.0000] <Domenic>
You keep using the same terms without explaining them. But I am going to take a stab in the dark and say that you are thinking of something similar to this person: https://github.com/whatwg/html/issues/2468

[15:24:52.0000] <TabAtkins>
Yes, that's what's being referred to

[15:26:52.0000] <milkii>
indeed, spot on.

[15:30:16.0000] <milkii>
well, the basic problem. not sure about the aspects of the proposal there, but the problem is there.

[15:31:11.0000] <milkii>
currently i use the bookmarklet "javascript:%28function%28s%29%7Btry%7Bs=document.selection.createRange%28%29.text%7Dcatch%28_%29%7Bs=document.getSelection%28%29%7Dprompt%28%27MediaWiki Copy%27,%27%2A %5B%27+location+%27 %27+document.title+%27%5d - %27+s+%27%5Cn%27%29%7D%29%28%29" to get a dialog to copy and paste links for MediaWiki

[15:32:30.0000] <milkii>
but today i saw https://cameronlonsdale.com/2018/11/26/whats-in-a-docker-image which has just the site name and tagline in the <title>, and i wondered what had happened to the semantic web

[15:42:47.0000] <milkii>
/me looks at MetaExtensions

[15:49:42.0000] <milkii>
i guess it would take WordPress adding the like of og:title for the like of that to ever begin to get traction? or browsers having an 'advanced' bookmark system that uses meta tags which would encourage sites to use them? or is this chicken and egg?

[15:59:33.0000] <Domenic>
milkii: Indeed this seems to be primarily a browser UX thing. I think browsers would want to see a lot of complaints from their users about the current UX, and then they'd consider various solutions---e.g., better heuristics for improving the UX given existing data, or something that requires every site in the world to add new tags, or something in between.


2018-11-29
[16:01:37.0000] <milkii>
not that I'm proposing Open Graph wins the structured data battle. i think it should be part of HTML5, to get the ball rolling, but I guess you're right, it's the browser makers not the spec makers that change things.

[12:16:04.0000] <eblume>
Hello, I am curious if there is a release schedule for html5lib, in particular if there is any intention to publish a release that includes this deprecation warning fix: https://github.com/html5lib/html5lib-python/commit/4f9235752cea29c5a31721440578b430823a1e69

[12:16:58.0000] <eblume>
No pressure or anything,  I just want to document when that might go out in my warning suppression change, if there is an eta. If not, totally fine.

[12:36:50.0000] <gsnedders>
eblume: oh, I guess 3.7 has shipped now, I guess we should…

[12:37:02.0000] <gsnedders>
eblume: (it's mostly unmaintained)

[12:46:12.0000] <eblume>
Gotcha - thanks, yeah, it's a minor thing but I keep seeing the error in my test output so I decided to suppress it, but that gives me an icky feeling.

[12:46:32.0000] <eblume>
s/error/warning


2018-11-30
[08:22:21.0000] <domfarolino>
Domenic: Do you think https://github.com/whatwg/console/issues/149 should be closed? I feel like it'd be a good extension to like, the reporting API or basically something else that's not console

[09:44:36.0000] <Domenic>
domfarolino: agreed

