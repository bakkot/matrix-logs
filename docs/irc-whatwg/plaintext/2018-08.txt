2018-08-01
[19:43:24.0000] <Domenic>
Sigyn is useless...

[19:44:46.0000] <devsnek>
Domenic: you need to op it lol

[19:45:40.0000] <Domenic>
Pretty sure I did

[19:48:21.0000] <devsnek>
its just listed as a member when i check

[19:48:43.0000] <Domenic>
Yeah but it should be able to op itself like I do with ChanServ

[19:49:07.0000] <Domenic>
Well, I manually made it op, let's see what happens

[19:49:30.0000] <Domenic>
It would be pretty sad if we could have stopped this spam at any time but failed

[20:23:29.0000] <Domenic>
So Sigyn is half-useless

[22:50:07.0000] <zewt>
jumping at the opportunity to employ an IRC ad service that spams a message to the same channel 20 times

[22:50:14.0000] <zewt>
that is an indication of a quality spammer

[05:46:36.0000] <jgraham>
So is there some solution for this channel being 100% spam over the last 12 hours?

[05:48:45.0000] <jgraham>
Or has everyone given up on it anyway?

[05:58:14.0000] <MikeSmith>
jgraham: not given up but some mitigation has been attempted using https://github.com/freenode/Sigyn but clearly it‚Äôs not worked very well

[05:59:09.0000] <MikeSmith>
and the messages aren‚Äôt really spam; they‚Äôre instead some kind of trolling attack against the freenode admins

[06:01:02.0000] <MikeSmith>
...and maybe sent using some kind botnet such that it can‚Äôt be prevented through simple IP-range blocking or whatever

[06:12:21.0000] <wanderview>
another channel I'm in dealt with it by blocking anyone from talking unless the person is on a "voiced" list

[06:18:43.0000] <jgraham>
MikeSmith: I kind of meant the channel in general rather than the spam in particular; historically it's fairly unusual for things to be this quiet for this long

[06:18:51.0000] <jgraham>
MikeSmith: But thanks for the update

[06:50:02.0000] <annevk>
I suspect vacation/backlog as reasons for quietness, but have not seen stats

[06:52:15.0000] <jgraham>
Could be. I started to wonder if everyone had moved to some backchannel on slack or something

[06:58:14.0000] <annevk>
I‚Äôm not aware of any, FWIW

[06:58:42.0000] <jgraham>
Maybe everyone just ran out of things to say :)

[07:16:54.0000] <wanderview>
maybe everyone is saving their best material for tpac

[08:29:49.0000] <Domenic>
annevk: https://github.com/whatwg/html/pull/3811 LGTY?

[08:40:32.0000] <ato>
Ms2ger: Thanks for setting +r.

[08:41:17.0000] <Ms2ger>
Np

[08:51:36.0000] <annevk>
Domenic: reviewed

[08:52:46.0000] <annevk>
Domenic: it's gonna take at least another week before I worked through my backlog; rather busy summer

[08:52:55.0000] <annevk>
have worked*

[08:55:22.0000] <Domenic>
annevk: sure no problem. Feel free to use "LGTM with nits" approval to reduce round trips :)

[09:03:56.0000] <domfarolino>
Domenic: If a window's referrer policy was set to "no-referrer", would top-level module worker requests from this window use that policy, and thus omit a referrer, or use a default policy, and send the window's URL?

[09:04:39.0000] <domfarolino>
https://github.com/web-platform-tests/wpt/blob/master/workers/modules/dedicated-worker-import-referrer.html#L93 has me a little bit confused as I compare it with the spec, but I definitely could be reading something wrong

[09:07:00.0000] <domfarolino>
Spec seems to eventually defer to ‚Äúoutside settings‚Äù referrer, but I think that conflicts with the test case.

[09:08:07.0000] <domfarolino>
s/referrer/referrer policy, in my latest msg

[09:31:17.0000] <Domenic>
domfarolino: hmm yeah those tests seem wrong

[09:31:24.0000] <Domenic>
The ones *inside* should use default referrer policy I think

[09:31:29.0000] <Domenic>
Although fixing that would be nice

[09:31:42.0000] <Domenic>
That's a larger problem space: https://github.com/w3c/webappsec-referrer-policy/issues/111

[09:57:13.0000] <domfarolino>
Domenic: and those *inner* requests that use the default referrer policy, will eventually resolve to using that of fetch client settings object, (which‚Äôll be ‚Äúno-referrer‚Äù in my example) right?

[09:57:37.0000] <Domenic>
Hmm...

[09:57:53.0000] <domfarolino>
Also what you propose in that issue seems reasonable.

[09:58:09.0000] <Domenic>
Yeah just a decent amount of work

[09:58:32.0000] <Domenic>
I guess you're right they would resolve to "no-referrer"

[09:58:35.0000] <domfarolino>
The reason I‚Äôm wondering if it‚Äôll end up being ‚Äúno-referrer‚Äù in that example is because we still use fetch client settings (outer setitjnfs) as the inner request‚Äôs client I think, right?

[09:58:36.0000] <Domenic>
So the tests further down are probably wrong too?

[09:58:39.0000] <domfarolino>
Ah ok

[09:58:41.0000] <domfarolino>
Yeah I think so

[09:58:56.0000] <Domenic>
Worth checking with the test author (probably nhiroki) to make sure I'm not missing anything

[09:59:41.0000] <domfarolino>
Will do. He‚Äôs reviewing some refactoring I‚Äôm doing in that area so will run by him.

[10:04:31.0000] <domfarolino>
I originally though we used ‚Äúinner settings‚Äù as inner request clients but that does not seem to be the case.

[12:44:33.0000] <annevk>
So now Token Binding is mostly gone again‚Ä¶

[13:26:43.0000] <jyasskin>
https://fetch.spec.whatwg.org/#concept-construct-readablestream creates a non-byte ReadableStream, even though Fetch only enqueues Uint8Arrays. Is that optimizable internally, or should it change?

[13:28:20.0000] <Domenic>
Both, I think :).

[14:32:17.0000] <jyasskin>
Domenic: This might be https://github.com/whatwg/fetch/issues/267.


2018-08-02
[23:17:30.0000] <ondras>
Domenic: interested in the `queueMicrotask` -- what is the expected purpose/usecase for this kind of scheduling?

[23:20:37.0000] <annevk>
ondras: https://github.com/w3ctag/design-reviews/issues/294#issuecomment-408258727 might help

[23:22:31.0000] <ondras>
annevk: well that mostly explains why the new api is better than resolve.then

[23:22:39.0000] <ondras>
annevk: but I somewhat fail to see the use case for both

[04:33:07.0000] <annevk>
ondras: https://github.com/whatwg/html/pull/3873 might also help

[04:33:20.0000] <annevk>
(again, might üòä)

[04:35:40.0000] <ondras>
annevk: thanks! this probably has all I need to educate myself :)

[04:37:55.0000] <ondras>
in particular, the second example is something I can relate to. the first one looks pretty weird to me, but whatevs.

[05:47:05.0000] <benjamingr_>
Hey, has there been talk of a setTimeout variant that returns promises? I'm asking for a JavaScript API and I'd just prefer to implement something with a spec than something without.

[05:47:18.0000] <benjamingr_>
(Also, a setInterval that returns async iterators)

[05:47:49.0000] <annevk>
benjamingr_: just talk afaik

[05:48:06.0000] <annevk>
benjamingr_: don't think there's even an issue for it

[05:48:28.0000] <benjamingr_>
Can/should I open one?

[05:48:59.0000] <annevk>
benjamingr_: sure, against whatwg/html

[05:49:02.0000] <wanderview>
`new Promise(r => setTimeout(r, 5000))` is a bit annoying, but pretty short already

[05:49:18.0000] <annevk>
that's also true

[05:49:44.0000] <benjamingr_>
wanderview: one possible con for it is that there is already a way to do it and it wouldn't add a capability, on the other hand you'd be surprised at how wrong people get that simple one liner

[05:50:04.0000] <wanderview>
what would be interesting is if a "modern" timeout API could not only include promise support, but also maybe remove legacy clamping behavior

[05:50:31.0000] <wanderview>
but adding more stuff also makes any proposal more likely to fail

[05:50:38.0000] <wanderview>
maybe I should just drink my coffee

[05:51:25.0000] <benjamingr_>
lol, yeah, I don't think that's something we'll be able to do

[05:51:51.0000] <wanderview>
no?

[05:53:06.0000] <benjamingr_>
By the way and on a completley unrelated note: is there any eta for streaming fetch in firefox wanderview? I saw there is some interesting work involving it and wanted to offer to be a guinea pig since we are pretty heavy consumers of it on chrome.  (And by all means do feel free to tell me that the current ETA is 'sometime' and it's not a priority)

[05:53:45.0000] <benjamingr_>
Re: timeout without clamping - we've discussed it a bunch in Node - I don't think there was enough interest but maybe I'm remembering it wrong.

[05:53:46.0000] <annevk>
benjamingr_: there's dom.streams.enabled but I'm not sure if that covers fetch()

[05:53:47.0000] <wanderview>
benjamingr_: there are prefs you can enable to test today (and for like the last year)

[05:54:10.0000] <annevk>
there's also javascript.options.streams, hmmm

[05:54:35.0000] <wanderview>
benjamingr_: a thorny cross global issue has kept it from shipping, but in theory thats finally being reviewed now'ish

[05:54:40.0000] <benjamingr_>
That does cover `fetch` yeah, I've been testing that - I'm sort of the person in my company who cares about firefox users' UX

[05:54:48.0000] <wanderview>
annevk: yea, you need both those prefs

[05:55:30.0000] <annevk>
benjamingr_: <3

[05:55:32.0000] <benjamingr_>
Yeah, it works for us with those perfs - works pretty well too. Firefox WebRTC has more (and better) connections  than Chrome at the moment but it's losing in UX on our infrastructure without streaming fetch and wins with it - it's more of an office bet than anything.

[05:57:06.0000] <wanderview>
benjamingr_: posting your expected wins in the stream bug may help folks prioritize it

[05:57:24.0000] <wanderview>
or maybe annevk can just relay the information

[05:58:05.0000] <jgraham>
Seeing it from someone developing an actual product seems potentially useful

[05:59:30.0000] <benjamingr_>
Well, we're building a p2p streaming platform on top of WebRTC and hls/mpeg-dash - streaming fetch means we can share segments before we finished downloading them which really improves UX on congested networks - especially in places like southeast Asia and Latin America. We see streaming fetch making the biggest difference there.

[05:59:49.0000] <wanderview>
benjamingr_: this is the bug if you want to chime in with some actual data, etc: https://bugzilla.mozilla.org/show_bug.cgi?id=1389628

[06:01:17.0000] <benjamingr_>
Thanks, I saw that - I'm usually afraid I'll just be annoying in these bugs - I dislike it when people show up and "demand" work on something myself so I usually try not to do it myself. I only bugged you about it now since I saw recent activity and we were already talking.

[06:02:19.0000] <wanderview>
I understand, but I would look at it more as sharing real world data the browser vendor is probably lacking...

[06:05:26.0000] <benjamingr_>
https://github.com/whatwg/html/issues/3875 hope this is appropriate, feel free to tell me to edit/fix it in some way

[07:48:26.0000] <annevk>
Ugh: https://bugzilla.mozilla.org/show_bug.cgi?id=1477286

[07:48:45.0000] <annevk>
I thought we only had synthetic click events and were on track to remove synthetic submit events causing action?

[12:53:34.0000] <Domenic>
Oh no :(

[16:07:34.0000] <rniwa>
Domenic: yt?


2018-08-03
[17:06:25.0000] <KiChjang>
does anyone know of a list of non-spec compliant features in mobile safari?

[17:06:34.0000] <KiChjang>
i'm particularly interested in XHR

[17:40:09.0000] <a-ja>
KiChjang, perhaps implementing Feature-Policy: sync-xhr ?

[17:40:26.0000] <KiChjang>
and fetch?

[17:40:34.0000] <KiChjang>
wait, is that CSP?

[17:40:50.0000] <a-ja>
that would affect fetch

[17:41:06.0000] <a-ja>
FP is newish

[17:42:09.0000] <a-ja>
WebAuthn API

[17:42:40.0000] <KiChjang>
hmm... that doesn't seem to be something i'm interested in knowing

[21:25:55.0000] <annevk>
TimothyGu: sorry, I won't get to event handlers this week

[21:26:08.0000] <annevk>
TimothyGu: forgot about a public holiday

[07:44:22.0000] <TimothyGu>
annevk: No problem

[16:14:32.0000] <jyasskin>
In https://fetch.spec.whatwg.org/#concept-main-fetch, I see "6. If the recursive flag is set, return response." IIUC, the recursive flag is set for any non-navigation redirect, so none of those will do things like set the response's url list. Is that right?

[16:21:24.0000] <Mek>
where would the recursive flag be set? "fetch" (i.e. https://fetch.spec.whatwg.org/#concept-fetch) seems to always call main fetch witohut the flag set

[16:22:13.0000] <Mek>
actually, that is what you said, never mind

[16:23:13.0000] <Mek>
either way it seems like the outer main fetch would still eventually do all those further steps?

[16:24:58.0000] <jyasskin>
Mek: Yeah, I think you're right.

[16:25:04.0000] <jyasskin>
Thanks.


2018-08-04
[19:11:29.0000] <Krinkle>
Hm.. I'm trying to programmatically detect use of an accesskey="" trigger.

[19:11:54.0000] <Krinkle>
Looking at monitorEvents() in Chrome, I found I get two interesting events that differ from other types of button/link triggers

[19:12:06.0000] <Krinkle>
1) A strange key value for the keydown event

[19:12:28.0000] <Krinkle>
2) A click event with e.details = 0, and a non-null inputCapabilities.

[19:14:37.0000] <Krinkle>
But not sure if either of those is limited to accesskey triggers

[19:15:22.0000] <Krinkle>
The strange keydown event is limited to chrome ( key: "‚àÜ"), not in Safari. so that one falls off.

[19:15:42.0000] <Krinkle>
e.details = 0 seems cross-browser, but not sure if it's possible for other ways that can be zero for a non-regular click

[19:16:52.0000] <Krinkle>
sorry, meant a null sourceCapabilities. Normally for click events sourceCapabilities is an input capabiltities object


2018-08-05
[14:10:51.0000] <Domenic>
Found this digging through old tests https://simon.html5.org/specs/web-dom-core

[14:11:30.0000] <Domenic>
via https://lists.w3.org/Archives/Public/www-dom/2009JulSep/0026.html

[14:11:41.0000] <Domenic>
(last paragraph is fun)

[14:38:05.0000] <TimothyGu>
oh jeez RCS format diff

[14:44:38.0000] <TimothyGu>
<getElementById interface="Document" obj="doc" var="testNode" elementId='"Frame1"'/> üò±


2018-08-06
[19:12:32.0000] <gsnedders|ooo>
https://github.com/gsnedders/dom-test-suite has that old DOM testsuite in git, if anyone cares

[19:12:39.0000] <gsnedders|ooo>
/me forgets why he did that now

[21:58:11.0000] <Domenic>
We are still running versions of that suite for jsdom... maybe not necessary anymore... although given that we still can't mark WPT test files as partially passing, we might not be able to use WPT to replace all that coverage just yet.

[05:14:39.0000] <hsivonen>
Is https://w3c.github.io/DOM-Parsing/#the-domparser-interface the correct spec to read for DOMParser?

[05:41:39.0000] <annevk>
hsivonen: yes

[06:13:20.0000] <hsivonen>
annevk: thanks

[06:14:06.0000] <hsivonen>
TIL: Chrome adds the parseerror element as the first child of root in the document returned by DOMParser instead of following the spec

[09:00:31.0000] <jyasskin>
TabAtkins: Is there a good way for me to search Shepherd for uses of https://fetch.spec.whatwg.org/#concept-construct-readablestream?

[09:00:44.0000] <jyasskin>
And if so, is it documented somewhere I should have looked?

[09:02:26.0000] <TabAtkins>
jyasskin: https://tabatkins.github.io/bikeshed/#cli-refs , but I don't have a way to search by URL.

[09:03:52.0000] <jyasskin>
TabAtkins: I believe `bikeshed refs --text="construct a ReadableStream object"` searches for the definition, not the uses.

[09:04:02.0000] <TabAtkins>
Oh, I misread!

[09:04:06.0000] <jyasskin>
:)

[09:04:14.0000] <TabAtkins>
No, don't have that functionality yet, but it's on my shortlist.

[09:05:01.0000] <jyasskin>
I want to change the interface for that definition (https://github.com/whatwg/fetch/pull/781), but I'm worried I'll break uses outside Fetch.

[09:05:14.0000] <jyasskin>
TabAtkins: Would you mind looking it up for me?

[09:05:15.0000] <TabAtkins>
yup, taht's precisely the use-case I want it for.

[09:05:24.0000] <TabAtkins>
I don't have the *data* yet, so no.

[09:05:31.0000] <jyasskin>
Oh, ok. Thanks anyway. :)

[09:05:34.0000] <TabAtkins>
If I did, beleive me, the UI would be there immediately.

[12:56:04.0000] <Domenic>
So it appears document.open() can make the document's URL not equal to the URL of the corresponding session history entry. That's... fun.

[12:56:12.0000] <Domenic>
Can anyone think of other ways those things can get out of sync?

[12:56:25.0000] <Domenic>
smaug____: you may know ^

[13:27:00.0000] <Domenic>
Tentatively TimothyGu and I believe this is very bad and should be fixed. A lot of the spec, and some impl code he dove through, assumes they are the same.

[13:29:36.0000] <rniwa_>
Domenic: what is very bad?

[13:30:54.0000] <Domenic>
rniwa_: document.open() can make the document's URL not equal to the URL of its session history entry

[13:31:06.0000] <rniwa_>
Domenic: oh, fascinating.

[13:31:33.0000] <rniwa_>
Domenic: so history.push(~) and then document.open() can move the URL back to the original URL

[13:31:44.0000] <rniwa_>
Domenic: but without adding a new history entry?

[13:31:52.0000] <Domenic>
Yeah also it breaks (per-spec) fragment navigation

[13:31:58.0000] <rniwa_>
oh snap

[15:02:58.0000] <smaug____>
Domenic: can't recall. (I wouldn't be surprised if something in pushState handling could lead to similar behavior though)


2018-08-07
[02:34:37.0000] <Ms2ger>
Is https://www.w3.org/2001/tag/doc/promises-guide/#resolve-promise the right link to resolve a promise in specese?

[08:27:10.0000] <jyasskin>
Ms2ger: That's the one I use, assuming you created the promise with https://www.w3.org/2001/tag/doc/promises-guide/#a-new-promise. Note that we're playing fast and loose with both Realms and thread-safety there, but I think it's better to call that so we can fix it all up in one place than to try to DTRT yourself.

[08:27:27.0000] <Ms2ger>
Thx

[08:41:14.0000] <Domenic>
jyasskin said what I have been struggling to phrase since I saw this question earlier in the morning.

[08:41:22.0000] <jyasskin>
:)

[09:14:07.0000] <TimothyGu>
annevk: hey, could you review my events pr :)

[09:16:01.0000] <TimothyGu>
let me know when you could get to it

[09:16:05.0000] <annevk>
TimothyGu: I hope Thursday; I've had quite a bit of travel either due to vacation or moving later this month (as well as lots of paperwork) which has increased my backlog a lot and pushed everything back

[09:16:40.0000] <TimothyGu>
üòû

[09:16:43.0000] <annevk>
TimothyGu: I need a full day tomorrow for a meetup and after that I should have time again for full days of reviews

[09:16:58.0000] <TimothyGu>
Good luck then

[09:17:29.0000] <annevk>
TimothyGu: yeah, I'm sorry, it isn't exactly how I thought things would work out either

[09:21:02.0000] <annevk>
TimothyGu: Domenic doesn't feel comfortable reviewing it?

[09:21:16.0000] <Domenic>
annevk: I was hoping for a second opinion

[09:21:37.0000] <Domenic>
But we can merge and have you do a post-merge review

[09:21:39.0000] <Domenic>
It's pretty solid

[09:21:49.0000] <Domenic>
And no need to add to your workload

[09:22:30.0000] <annevk>
I'll read through it quickly now then

[09:28:00.0000] <annevk>
TimothyGu: Domenic: approved

[09:28:08.0000] <TimothyGu>
Thanks!

[09:36:53.0000] <annevk>
https://github.com/whatwg/xhr/issues/217 is rather unclear to me still üòü

[13:32:59.0000] <mchampion>
q+

[13:33:12.0000] <mchampion>
q?

[13:33:40.0000] <mchampion>
q?

[13:34:11.0000] <mchampion>
oops wrong window <blush>


2018-08-08
[23:28:59.0000] <falken>
I just get an error message "There were errors. Stopping." from html-build/build.sh. Is there a way to debug?

[23:30:31.0000] <MikeSmith>
falken: I can help now

[23:30:49.0000] <falken>
Great!

[23:31:11.0000] <MikeSmith>
I think that indicates a parse error

[23:32:17.0000] <domfarolino>
falken: Any output difference when trying verbose?

[23:32:24.0000] <domfarolino>
`-v`, that is

[23:35:29.0000] <MikeSmith>
domfarolino: DMed falken about it but apparently I/we may have recently regressed the error-reporting behavior

[23:35:54.0000] <MikeSmith>
in case of errors, the build should cat the .temp/wattsi-output file

[23:36:14.0000] <MikeSmith>
but it seems it might not be doing that in, at least in some cases

[23:37:33.0000] <domfarolino>
ahh I see. That would be difficult to debug indeed.

[23:37:37.0000] <MikeSmith>
yup

[23:58:11.0000] <annevk>
At the end of this year Web Forms 2.0 will have existed for 15 years...

[23:59:25.0000] <annevk>
September 5 the first draft got shared in private

[00:00:00.0000] <Ms2ger>
Maybe we can try to get it implemented by then

[00:00:36.0000] <annevk>
I initially wrote "Still has bugs" as subsequent sentence, but thought that'd be too negative

[00:00:42.0000] <annevk>
Fortunately there's Ms2ger üòÉ

[00:01:00.0000] <Ms2ger>
/me takes a bow

[00:02:07.0000] <MikeSmith>
heh

[00:04:08.0000] <MikeSmith>
I guess we probably now have some 20-year milestones of interest at https://www.w3.org/html/wg/wiki/History

[00:04:49.0000] <MikeSmith>
doctype sniffing, 1998-07

[00:59:29.0000] <MikeSmith>
falken: I‚Äôve not been able to reproduce the problem you ran into

[00:59:41.0000] <falken>
MikeSmith: hummm

[01:00:18.0000] <MikeSmith>
yeah I get the expected error report emitted to the console

[01:01:08.0000] <falken>
If it matters I'm not using local wattsi: "Local wattsi is not present; trying the build server..."

[01:01:08.0000] <MikeSmith>
but if you‚Äôre still able to reproduce it can file an issue with a test case, I can look

[01:01:38.0000] <MikeSmith>
oh

[01:01:39.0000] <falken>
I also often get "socket.error: [Errno 98] Address already in use" but even after killing the server the same error happened

[01:01:50.0000] <MikeSmith>
ah

[01:02:23.0000] <MikeSmith>
yeah the socket error happens if you ^C kill the build before it completes

[01:02:49.0000] <MikeSmith>
it‚Äôs because of the support for syntax-highlighting that I added recently

[01:03:14.0000] <MikeSmith>
that support relies on the build starting up a local web server

[01:04:08.0000] <MikeSmith>
if you have pkill or such installed, you can do `pkill python; ./build.sh` to kill that web server before you build again

[01:04:46.0000] <falken>
yea.. it didn't seem to matter if the socket error happened or not

[01:04:47.0000] <MikeSmith>
well, assuming you don‚Äôt have any other python process running (because that pkill invocation would kill them all)

[01:04:51.0000] <MikeSmith>
yeah

[01:05:08.0000] <MikeSmith>
yeah so I didn‚Äôt test the remote-wattsi case yet

[01:05:12.0000] <MikeSmith>
I will

[01:55:18.0000] <MikeSmith>
falken: so yeah thanks I can reproduce it with remote wattsi

[02:23:36.0000] <MikeSmith>
falken: https://github.com/whatwg/html-build/pull/181 has the fix

[02:23:49.0000] <MikeSmith>
thanks again for catching that

[08:04:11.0000] <Domenic>
MikeSmith: we should also use tricks to catch ^Cs and kill the server anyway

[09:14:30.0000] <MikeSmith>
Domenic: true

[13:45:43.0000] <rixx>
hi, I noticed that Request.credentials is now (as of https://github.com/whatwg/fetch/commit/811575d6889026c68d55a327f79198dccfea403c in April) supposed to default to "same-origin" instead of "omit". This is not reflected in the living standard document for fetch: https://fetch.spec.whatwg.org/

[13:46:17.0000] <rixx>
The relevant line is https://github.com/whatwg/fetch/blob/master/review-drafts/2018-06.bs#L1057 -- what's the best way forward? Submitting an issue? Direct PR?

[13:54:42.0000] <Domenic>
rixx: why do you say it's not reflected in the living standard? (Also, why are you pointing to the review draft instead of the living standard?)

[13:55:14.0000] <Domenic>
rixx: the change in https://github.com/whatwg/fetch/commit/811575d6889026c68d55a327f79198dccfea403c appears in the living standard at https://fetch.spec.whatwg.org/#dom-request step 6.6.

[13:58:55.0000] <rixx>
it does, but in the standard document it says 'Unless stated otherwise, it is "omit".', which sounds to me like it doesn't match that change

[13:59:14.0000] <Domenic>
But it is stated otherwise, on step 6.6.

[14:03:09.0000] <rixx>
it does say that, thank you for pointing it out. I'd argue finding the valid value for credentials is a bit convoluted, then

[14:03:21.0000] <rixx>
Thank you for clearing that up, sorry for the noise

[14:04:24.0000] <Domenic>
np!

[15:51:47.0000] <MikeSmith>
https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials$compare?from=1403797&to=1403836

[15:52:22.0000] <MikeSmith>
> even though the living standard document currently does not reflect it, same-origin is the default value as of..


2018-08-09
[20:15:31.0000] <MikeSmith>
https://lists.mozilla.org/pipermail/dev-platform/2018-August/022511.html is notable

[20:15:46.0000] <MikeSmith>
Firefox build dependency on Node

[21:18:44.0000] <Hasimir>
oh hell no ...

[22:04:46.0000] <MikeSmith>
Hasimir: next I expect Vim will introduce a dependency on Node..

[22:05:20.0000] <MikeSmith>
..Vim already has dependencies on just about everything else there is

[22:52:22.0000] <Hasimir>
that's just depressing, but at least I don't have to worry about my text editor

[02:20:41.0000] <annevk>
MikeSmith: does the HTML Checker do URL validity?

[02:36:50.0000] <MikeSmith>
annevk: yes but not 100% conforming to the URL spec

[02:36:59.0000] <MikeSmith>
it just relies on galimatias

[02:37:31.0000] <MikeSmith>
..which is no longer maintained and so is not up to date with the current URL spec

[02:38:32.0000] <annevk>
kk

[08:40:35.0000] <TimothyGu>
annevk: btw I responded to your comments in https://github.com/whatwg/html/pull/3893‚Ä¶ thanks for the review!

[08:43:11.0000] <annevk>
TimothyGu: you‚Äôre right that there‚Äôs only one consumer, though Blink at least has two

[08:43:58.0000] <annevk>
And yeah, I guess we should refactor that

[08:45:02.0000] <TimothyGu>
annevk: Hmm, has two of what?

[08:46:17.0000] <annevk>
TimothyGu: remove all listener consumers

[08:46:30.0000] <TimothyGu>
ah

[08:46:36.0000] <annevk>
TimothyGu: during doc teardown iirc

[08:48:16.0000] <Domenic>
annevk: just checking, LGTY with refactoring done? Any thoughts on style of refactoring, e.g. should we have a "remove all listeners and handlers" wrapper, or a "remove all handlers" utility, or...?

[08:55:19.0000] <annevk>
Domenic: I don't think I'd block on refactoring

[08:55:26.0000] <annevk>
/me looks

[08:56:02.0000] <annevk>
For some reason GitHub is really slow

[09:00:44.0000] <annevk>
Maybe my internet is just slow today

[09:42:45.0000] <dtapuska>
annevk: do you prefer hreftranslate or hrefTranslate it wasn't clear in your comments

[09:45:08.0000] <annevk>
dtapuska: oh sorry, I thought hreftranslate made sense given the precedent of hreflang, but on reflecting maybe overall consistency is better than this small local consistency

[09:45:12.0000] <annevk>
reflection*

[09:45:15.0000] <Krinkle>
Hm.. I always thought automatic-semi-colon insertion happens only if normal processing would produce an error. But it seems that it behaves differently for the return statement? In that return\n1+2 will always return undefined.

[09:45:43.0000] <Krinkle>
I'm running into this as result if an odd minifier that tries to break code at the first opportunity after 1000 chars per line.

[09:45:46.0000] <Krinkle>
result of an*

[09:50:34.0000] <dtapuska>
annevk: ya policy is always is not to let one mistake propagate to others.. so I'd say go with hrefTranslate

[09:52:51.0000] <annevk>
dtapuska: wfm

[10:26:54.0000] <TimothyGu>
Krinkle: https://tc39.github.io/ecma262/#prod-ReturnStatement

[10:27:05.0000] <TimothyGu>
return [no LineTerminator here] Expression `;`

[10:31:40.0000] <Krinkle>
TimothyGu: Thanks.


2018-08-10
[02:53:10.0000] <annevk>
Travis cannot reach GitHub?!

[02:53:25.0000] <annevk>
whatwg/xhr refuses to build because it cannot fetch .travis.yml

[02:53:35.0000] <annevk>
https://travis-ci.org/whatwg/xhr/builds/414441341

[02:57:27.0000] <gsnedders>
It happens occasionally.

[02:58:32.0000] <annevk>
I restarted it four times, but it seems it was succeeding in a different build...

[02:58:39.0000] <annevk>
Not sure I fully understand what's going on

[10:50:16.0000] <Domenic>
Hmm definitely some build failures reaching GitHub for HTML too

[10:50:37.0000] <Domenic>
Interesting Travis also failed reaching prince.com. Maybe a Travis-side issue.


2018-08-11
[21:58:17.0000] <domfarolino>
annevk: What is the expected destination of a request coming from `event.respondWith(fetch(event.request))` in a ServiceWorker?

[21:58:43.0000] <domfarolino>
annevk: Should it assume the destination of the input request, or be `""`, which seems to be the destination associated with `fetch()`s

[22:00:51.0000] <domfarolino>
annevk: Given https://fetch.spec.whatwg.org/#dom-request > 13 doesn't copy over "destination" information, I imagine the destination will not be preserved, and thus will always represent fetch()? Or...?

[23:10:07.0000] <annevk>
domfarolino: correct

[23:10:20.0000] <annevk>
domfarolino: otherwise CSP could be misled

[23:11:06.0000] <annevk>
domfarolino: though perhaps for that specific scenario it could be ok

[23:12:14.0000] <domfarolino>
annevk: Yeah, I'm wondering if it would be helpful/non-breaking to copy over destination/initiator (context: https://github.com/whatwg/fetch/pull/785#issuecomment-412253141)

[23:12:24.0000] <domfarolino>
(disclaimer: don't know much about CSP actually)

[23:14:20.0000] <annevk>
It‚Äôs not okay I just remembered

[23:15:11.0000] <annevk>
The service worker would have script access to the response, whereas the CSP policy might only expect it to render as image

[23:19:00.0000] <domfarolino>
Oh interesting. Will take a closer look tomorrow, that seems problematic

[00:30:46.0000] <annevk>
domfarolino: once priority is non-null it won‚Äôt be reset if you preserve it

[00:31:05.0000] <annevk>
domfarolino: so I think your PR comment does not apply

[04:16:54.0000] <annevk>
Hmm, Travis again had trouble reaching GitHub

[04:47:03.0000] <smaug____>
hayato: does blink have some optimization for mouseenter/leave which causes events to not be dispatched if ancestors don't have listeners?

[04:47:16.0000] <smaug____>
and is it possible that there is a bug when dealing with shadow DOM

[04:47:31.0000] <smaug____>
https://bugzilla.mozilla.org/show_bug.cgi?id=1478959 starts to smell like website relying on some bug in Chrome

[06:10:40.0000] <domfarolino>
annevk: oops. Missed that


2018-08-13
[22:36:53.0000] <annevk>
TabAtkins: so CSS Paint having side channels seems like a big problem? I guess it depends a bit on what it gets to paint, but anything sensitive will have this issue

[22:45:12.0000] <TabAtkins>
We don't have anything sensitive exposed to selectors besides :visited, and I opened an issue to solve that part once and for all.

[22:45:37.0000] <TabAtkins>
The side channel is just a timing attack; there are multiple ways to achieve that, Paint is just higher bandwidth

[23:47:30.0000] <annevk>
Well from that issue it seems like there is a communication channel

[23:47:42.0000] <annevk>
With width

[23:48:34.0000] <annevk>
Which would allow fingerprinting of CSS paint impl specifics and such

[23:59:19.0000] <hayato>
smaug____:  It doesn't look: https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/dom/document.h?q=KLoadListener&sq=package:chromium&g=0&l=863

[00:00:52.0000] <hayato>
smaug____: However, maybe I am not aware.  I am aware only the list in document.h.

[02:06:21.0000] <smaug____>
k

[02:06:30.0000] <smaug____>
hayato: thanks. I'll keep debugging that bug

[03:59:00.0000] <zcorpan>
Hello whatwg

[04:53:29.0000] <Ms2ger>
Hello author

[06:57:01.0000] <annevk>
I suppose jyasskin is already on leave? I wonder if https://github.com/whatwg/fetch/issues/784 requires any action on my part at this point; I'm inclined to wait

[07:08:39.0000] <jyasskin>
@annevk: I'm not quite out, although definitely by Wednesday. But #784 doesn't need anything for now, unless you want me to handle the monkeypatches in WICG/webpackage#281 differently. Even that can probably wait until I get back in November.

[07:11:50.0000] <annevk>
jyasskin: thanks, and success juggling both of them!

[07:12:13.0000] <jyasskin>
:)

[10:28:09.0000] <annevk>
foolip: MikeSmith: we should do TLS 1.3

[10:28:11.0000] <annevk>
https://blog.mozilla.org/security/2018/08/13/tls-1-3-published-in-firefox-today/

[10:30:19.0000] <Domenic>
I have a feeling that will require bleeding-edge nginx extensions

[10:31:53.0000] <gsnedders>
yeah there's very little supporting TLS 1.3 at this point

[10:59:28.0000] <foolip>
annevk: if Domenic is right that would require more complicated setup, ot perhaps upgrading Debian

[11:00:35.0000] <jyasskin>
ekr or davidben are likely to know for sure.

[11:09:39.0000] <TimothyGu>
foolip: what debian version are we on right now?

[11:11:20.0000] <TabAtkins>
Domenic: omg, do you have do the the `.X\58X` thing in the stylesheet to avoid it getting blocked by filters?

[11:11:56.0000] <TabAtkins>
(context for others: https://github.com/whatwg/html/pull/3911/files#diff-36cd38f49b9afa08222c0dc9ebfe35ebL87)

[11:12:37.0000] <foolip>
TimothyGu: I'd have to log in to check, but I think stretch

[11:12:47.0000] <TimothyGu>
ah

[11:13:08.0000] <zcorpan>
TabAtkins: i'm not sure what filters you mean, but iirc the html build system complains about "XXX" (so it can be used to mark unfinished work)

[11:13:37.0000] <zcorpan>
that or it was used to track actual issues

[11:13:38.0000] <TabAtkins>
Ah, kk. I'm referring to braindead internet filters that block pages that contain strings that indicate porn or similar.

[11:14:19.0000] <zcorpan>
ah yeah it's not that


2018-08-14
[17:21:23.0000] <falken>
What's the best way to edit a commit description for a pull request that hasn't yet been merged? I recall seeing that just editing the pull request description doesn't help the person doing the merge, and it's preferred that the first commit have a good description.

[17:25:07.0000] <MikeSmith>
falken: `git commit --amend .` on the PR branch?

[17:28:39.0000] <MikeSmith>
TimothyGu: yeah stretch

[17:30:48.0000] <falken>
MikeSmith: Thanks

[17:33:04.0000] <MikeSmith>
TimothyGu: stretch-backports has nginx 1.13, which apparently includes TLS 1.3 support https://ma.ttias.be/enable-tls-1-3-nginx/

[19:50:05.0000] <Domenic>
Yeah I'm not sure the XXX for unfinished work filter is all that useful; we may want to just remove it

[21:56:29.0000] <annevk>
falken: for WHATWG PRs you can also leave a comment with a proposed commit message

[21:57:11.0000] <annevk>
falken: we typically use squash & merge anyway

[22:26:42.0000] <falken>
annevk: thanks

[02:09:15.0000] <smaug____>
hmm, I guess I should start to look at tpac schedule and such

[02:11:37.0000] <annevk>
smaug____: I hope you registered for the discounted rates?

[02:22:46.0000] <smaug____>
I didn't

[04:53:20.0000] <zcorpan>
Fun with different rendering http://software.hixie.ch/utilities/js/live-dom-viewer/saved/6088

[07:07:29.0000] <annevk>
zcorpan: https://docs.google.com/document/d/1JM0YmKNRmhl1nEqcg_M_KlxBg_q7LIz9xgzmbrHp34o/edit seems quite nice if we can make that work

[07:07:46.0000] <annevk>
zcorpan: it roughly matches what I proposed long ago, except mine had display values

[07:08:07.0000] <annevk>
zcorpan: perhaps with an actual draft specification that includes a bunch more details implementations will this time around be compelled to go for it

[07:08:09.0000] <zcorpan>
annevk: yeah. web compat requires most display values to be ignored

[07:08:47.0000] <zcorpan>
i hope so

[07:09:04.0000] <annevk>
zcorpan: one thing we could do for now is to just say these are !important styles in the UA style sheet

[07:09:25.0000] <annevk>
zcorpan: if impls are not willing to make it swappable

[07:09:45.0000] <annevk>
(plus I guess some other magic so you can't use it elsewhere)

[07:10:27.0000] <zcorpan>
annevk: an important property is to be able to turn it off ^_^ i'd specify it differently if it's supposed to match how it's implemented now

[07:14:02.0000] <zcorpan>
I'm trying to identify browser developers who can fix fieldset bugs, not much luck so far

[07:18:17.0000] <annevk>
zcorpan: I wouldn't hold out hope of that all coming together within 30 days

[07:18:59.0000] <zcorpan>
At least I can try :)

[07:19:45.0000] <annevk>
zcorpan: success to me would be something that describes and improves upon the status quo + tests, and various bugs against browsers for the improvements, and being able to close the existing whatwg/html issues

[07:20:10.0000] <annevk>
zcorpan: but yeah, if we could get that too üòä

[07:35:36.0000] <smaug____>
annevk: do you recall anything mouseenter/leave specific event dispatch handling when target is in shadow DOM

[07:39:39.0000] <annevk>
smaug____: no

[07:46:45.0000] <smaug____>
ahaa, this indeed very much smells like a blink bug

[07:46:45.0000] <smaug____>
https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/input/boundary_event_dispatcher.cc?gsn=SendBoundaryEvents&l=76-79

[07:46:49.0000] <smaug____>
hayato: ^

[09:28:35.0000] <dimitarfn>
Hello, I have a question

[09:28:52.0000] <dimitarfn>
Why does the project that aims at building HTML

[09:29:05.0000] <dimitarfn>
... have the worst looking website ever?

[09:29:10.0000] <dimitarfn>
has*

[10:23:07.0000] <annevk>
Not much of a question if you can't wait around for the answer...

[10:28:39.0000] <smaug____>
is there some code indexing tool for webkit?

[10:31:58.0000] <annevk>
smaug____: nothing quite like searchfox

[10:32:33.0000] <annevk>
smaug____: there's https://trac.webkit.org/ but I guess you know about that

[10:32:45.0000] <smaug____>
yeah, that I know about. It isn't really indexing tool

[10:33:00.0000] <annevk>
Yeah, it's slow too

[10:33:41.0000] <annevk>
smaug____: perhaps you can convince Bill to add WebKit to searchfox?

[10:34:53.0000] <smaug____>
would feel a bit odd if Mozilla provided the only useful code indexing tool for webkit :p

[10:35:35.0000] <annevk>
smaug____: it'd be useful though

[10:36:16.0000] <TimothyGu>
I think there was some interest to get it added to cs.chromium.org too (but not enough interest to make it a thing)

[10:37:16.0000] <annevk>
Basically I often want to quickly check how things are implemented to verify assumptions and in practice I end up ignoring WebKit due to it being so bad at this

[10:50:10.0000] <Domenic>
The GitHub mirror is at least better than trac

[10:50:20.0000] <smaug____>
somehow usability of cs.chromium.org is quite far from searchfox

[11:58:45.0000] <annevk>
Domenic: GitHub search does not search commit messages though, right?

[11:59:03.0000] <Domenic>
Yeah I guess not. Does trac?

[11:59:33.0000] <annevk>
I think so, but with trac code search is bad

[13:13:22.0000] <TabAtkins>
If I did, beleive me, the UI would be there immediately.

[13:13:40.0000] <TabAtkins>
Sorry, accidental history re-post.

[15:19:46.0000] <TimothyGu>
annevk: github search does search commit message

[15:20:00.0000] <TimothyGu>
https://github.com/whatwg/html/search?q=empty&type=Commits


2018-08-15
[20:14:15.0000] <Domenic>
It occurs to me that we could replace our homepage motto with https://twitter.com/hsivonen/status/972410642446585856

[22:40:14.0000] <TabAtkins>
Domenic: Do ittttttttt

[23:03:53.0000] <annevk>
TimothyGu: cool

[02:22:23.0000] <annevk>
If someone is still waiting on me for something, please tell me

[02:23:16.0000] <annevk>
(minus a couple HTML PRs I guess, looking at those now)

[03:10:26.0000] <zcorpan>
Can someone with an OS other than macOS test this https://bug474415.bmoattachments.org/attachment.cgi?id=357809

[03:10:29.0000] <zcorpan>
in firefox

[03:10:57.0000] <annevk>
zcorpan: BrowserStack ok?

[03:11:07.0000] <zcorpan>
sure

[03:11:21.0000] <annevk>
I can do Fx 62 beta on Windows 10

[03:11:28.0000] <zcorpan>
want to know if the fieldset has the same vertical alignment as the surrounding text

[03:12:08.0000] <annevk>
zcorpan: renders identically

[03:12:15.0000] <zcorpan>
thanks

[04:28:39.0000] <Ms2ger>
zcorpan, same on linux (though note the markup for the div is broken)

[04:29:07.0000] <zcorpan>
Ms2ger: thanks

[08:11:28.0000] <annevk>
Domenic: hmm, so cancelation in ECMAScript is still ongoing? https://github.com/tc39/proposal-cancellation/issues/22

[08:11:43.0000] <annevk>
Domenic: I was kinda hoping we'd just stick to one concept

[08:12:08.0000] <Domenic>
annevk: meh, we'll see. Some folks want to define a concept like "cancelable" and have AbortSignal be an implementation of that. Similar to iterable and Map/Set/Array/etc.

[08:12:28.0000] <annevk>
I guess we'll see indeed

[08:12:38.0000] <Domenic>
I'm not sure it's really as compelling to have multiple implementations of the cancelation concept like it is for iterable, but they can try to make a case.

[08:26:11.0000] <TimothyGu>
https://html.spec.whatwg.org/#concept-environment-execution-ready-flag doesn't seem to be read anywhere?

[08:26:49.0000] <TimothyGu>
Ah service worker uses it‚Ä¶

[08:27:48.0000] <Ms2ger>
/me grumbles at tc39

[08:30:06.0000] <Domenic>
TimothyGu: yeah most of the "environment" stuff is service worker related

[09:14:32.0000] <annevk>
I guess I'm forever doomed to explain that a) CORS is enabling something, not restricting something and b) we really cannot reset the same-origin policy at this point in time

[09:14:53.0000] <annevk>
But who knows, maybe at some point the transport layer knows what is public and what is not and b) becomes moot

[10:47:11.0000] <Domenic>
Headers are restricted to ASCII strings, right?

[10:47:33.0000] <Domenic>
i.e. should https://github.com/whatwg/html/issues/3924 be ASCII decode or isomorphic decode. /cc jyasskin annevk

[12:37:54.0000] <annevk>
Domenic: they are not, see definition of them in Fetch

[12:38:37.0000] <annevk>
Domenic: maybe header names are, having said that

[12:41:32.0000] <Domenic>
annevk: ok, updated issue to say isomorphic instead, thanks

[12:44:27.0000] <annevk>
üëç

[12:59:23.0000] <zcorpan_>
look a good first issue https://github.com/whatwg/html/issues/3335#issuecomment-413138600

[14:14:15.0000] <Domenic>
Ooh a spreadsheet


2018-08-16
[20:08:08.0000] <devsnek>
Domenic: is there a plan to have ReadableStreamDefaultReader be an async iterable in the future?

[20:58:44.0000] <Domenic>
devsnek: yep, just need to do the work. https://github.com/whatwg/streams/issues/778

[20:59:19.0000] <devsnek>
i've never felt so jaded as seeing a series of promises resolve with { value, done } but not be an iterator lol

[20:59:41.0000] <devsnek>
does this just need spec work?

[21:00:07.0000] <Domenic>
Yeah and tests

[21:00:38.0000] <Domenic>
Happy to mentor if you have the time :)

[21:06:09.0000] <devsnek>
Domenic: sounds fun, just nervous about doing tests

[21:06:12.0000] <devsnek>
i'm not good at tests

[21:07:05.0000] <Domenic>
We can make it work :). Maybe collaborate on a test plan (~ list of tests) first?

[21:07:52.0000] <Domenic>
But, for now, sleep time

[21:08:48.0000] <devsnek>
üëã

[01:13:17.0000] <zcorpan>
Can someone give me editbugs for bugs.webkit.org? hober?

[01:20:31.0000] <zcorpan>
or maybe I have that already

[01:34:51.0000] <annevk>
I lost mine for Chromium somehow

[08:33:39.0000] <Domenic>
Wow great stuff on fieldset, zcorpan. What a mess.

[09:21:38.0000] <Domenic>
Sometimes I feel the single biggest thing we could do to make HTML contribution easier would be an auto-reformatter.

[09:25:55.0000] <annevk>
Yeah, not having to worry about code formatting would be nice

[09:26:52.0000] <devsnek>
can i use abstract ops from ecma262 in whatwg spec

[09:26:56.0000] <devsnek>
like IteratorComplete

[09:27:29.0000] <annevk>
devsnek: yeah, but you gotta declare them ahead of time

[09:27:43.0000] <devsnek>
also how do i build this

[09:28:01.0000] <devsnek>
local-watch just errors that index.bs is missing

[09:28:35.0000] <annevk>
devsnek: which spec?

[09:28:40.0000] <devsnek>
streams

[09:29:09.0000] <annevk>
devsnek: make remote

[09:29:14.0000] <annevk>
devsnek: assuming you have node modules

[09:29:42.0000] <devsnek>
oh hey a makefile

[09:29:43.0000] <annevk>
devsnek: if you have bikeshed installed you can also do make local

[09:29:58.0000] <devsnek>
lol curl: (22) The requested URL returned error: 400 Bad Request

[09:30:06.0000] <devsnek>
is my spec that bad

[09:30:34.0000] <annevk>
devsnek: make deploy might give more detailed feedback

[09:30:56.0000] <devsnek>
nope just 400

[09:31:22.0000] <annevk>
devsnek: really? huh, it should also poke at bikeshed and print errors from bikeshed

[09:31:34.0000] <devsnek>
bikeshed is giving 400

[09:31:51.0000] <devsnek>
here's what i did so far https://www.irccloud.com/pastebin/yssMUcXA/broken.diff

[09:32:09.0000] <Domenic>
devsnek: streams is special

[09:32:12.0000] <devsnek>
:(

[09:32:17.0000] <Domenic>
Let me help

[09:32:22.0000] <Domenic>
It's special in a way that makes things easier

[09:32:35.0000] <devsnek>
easy would be `make` making the spec >.>

[09:32:48.0000] <Domenic>
It does!

[09:33:03.0000] <Domenic>
https://github.com/whatwg/streams/blob/master/Makefile

[09:33:18.0000] <Domenic>
If you use "local" it'll probably give better error messages

[09:33:28.0000] <Domenic>
But my guess from source inspection is that Bikeshed doesn't like "method names" that have brackets in them

[09:33:37.0000] <annevk>
It's weird though that make deploy doesn't give useful error messages

[09:33:44.0000] <annevk>
Since api.csswg.org does seem to be up

[09:33:46.0000] <devsnek>
how do i specify Symbol.asyncIterator

[09:33:57.0000] <Domenic>
devsnek: so I think just remove `method` for now and we can file a Bikeshed bug about this later

[09:34:01.0000] <Domenic>
Assuming that's the fix

[09:34:04.0000] <devsnek>
ok

[09:34:06.0000] <Domenic>
annevk: I think this is a known issue

[09:34:09.0000] <devsnek>
oh i should also do @@ right

[09:34:41.0000] <annevk>
devsnek: also, FWIW, if you're stuck you should feel free to upload a PR

[09:34:46.0000] <devsnek>
ey it built

[09:34:50.0000] <Domenic>
annevk: oh, no, you fixed this in https://github.com/whatwg/whatwg.org/pull/160, hrm

[09:35:21.0000] <annevk>
Domenic: what's still "broken" is that we don't fail on it happening, but you should get console messages

[09:35:22.0000] <Domenic>
\o/

[09:35:23.0000] <benjamingr_>
Hmm, is there anything spec-wise for asking an HTTP server to return the response in reverse?

[09:35:33.0000] <Domenic>
benjamingr_: what does that even mean :)

[09:35:53.0000] <benjamingr_>
I know it sounds weird lol, let's say I have a file that contains "12345", I'd want it to return "54321"

[09:36:02.0000] <annevk>
benjamingr_: if you know the length you can ask it byte for byte using ranges...

[09:36:14.0000] <devsnek>
so reading that issue

[09:36:17.0000] <devsnek>
the one about async iterators

[09:36:19.0000] <annevk>
benjamingr_: otherwise, I don't think so

[09:36:20.0000] <devsnek>
do we still want iterator(options)

[09:36:46.0000] <benjamingr_>
Yeah - though that's a bit quirky compared to it - basically I wanted to know if there is a way to "race" two HTTP servers (with streaming fetch). I didn't guess there was a way but I thought it was worth asking about.

[09:37:17.0000] <benjamingr_>
On another similar note - is there a security-related reason that range requests trigger preflight checks? (If so, can I read about it?)

[09:38:00.0000] <benjamingr_>
devsnek: are you adding `[Symbol.asyncIterator]` to whatwg streams :D ?

[09:38:36.0000] <annevk>
benjamingr_: https://github.com/whatwg/fetch/pull/560

[09:38:45.0000] <annevk>
(and pointers from there)

[09:38:51.0000] <devsnek>
benjamingr_: thats my intention

[09:39:56.0000] <benjamingr_>
devsnek: awesome <3 let me know if you want ergonomics - I use whatwg streams as async iterators at work very often.

[09:40:09.0000] <Domenic>
devsnek: I think it'd be good to add iterator(options), but you could do it as a follow-up. The benefit of doing them together is that they'll probably get implemented together. But if you do them in quick sequence after each other that'll likely also happen.

[09:40:24.0000] <devsnek>
i don't see much of a reason not to do them together

[09:40:24.0000] <benjamingr_>
annevk: thanks, that's very helpful.

[09:40:36.0000] <Domenic>
devsnek: just to save you some work.

[09:40:56.0000] <devsnek>
am i allowed to use Await and Yield in random productions

[09:40:57.0000] <Domenic>
devsnek: also IMO it should auto-close and auto-release, I'll say that on the thread.

[09:41:04.0000] <devsnek>
yeah i agree with that

[09:41:14.0000] <devsnek>
common case will definitely be that

[09:41:22.0000] <benjamingr_>
Can I have a link to the said thread?

[09:41:29.0000] <Domenic>
devsnek: we haven't so far, and I think those are a bit ill-founded. You should be able to get away with just promise stuff.

[09:41:35.0000] <devsnek>
https://github.com/whatwg/streams/issues/778

[09:41:44.0000] <Domenic>
benjamingr_: your thoughts would be much appreciated

[09:51:38.0000] <annevk>
devsnek: really cool you‚Äôre working on this, please consider blogging about it on blog.whatwg.org once done

[09:52:01.0000] <devsnek>
i'll tweet it about it

[09:52:08.0000] <devsnek>
Domenic: whats wrong with yield

[09:52:55.0000] <Domenic>
devsnek: well both Await() and Yield() in specs seem to not cause their containing functions to return the right thing, like they do in JS. But I haven't looked closely.

[09:53:15.0000] <Domenic>
I think it should be possible to just spec them to return the result of ReadableStreamDefaultReaderRead() or whatever though, and not need any of that?

[09:53:32.0000] <devsnek>
wdym return the right thing

[09:54:18.0000] <benjamingr_>
A certain concern with AsyncIterators for streams is how to do BYOB. In my opinion the simplest option is to simply not support it given the alternatives. It's totally doable and I recently explored it but I don't think it's particularly worth it.

[09:57:27.0000] <devsnek>
maybe we can just do what 262 does and say "the algorithm is implementation defined but it should behave like this block of javascript code" üòÜ

[10:04:01.0000] <annevk>
It does that?

[10:07:36.0000] <devsnek>
annevk: https://tc39.github.io/ecma262/#sec-enumerate-object-properties

[10:08:43.0000] <annevk>
That‚Äôs a lil different, but okay

[10:09:10.0000] <devsnek>
no implementation of 262 follows that though so its kinda a moot point

[10:15:20.0000] <devsnek>
Domenic: so instead of doing await/yield should i do like a ReadableStreamDefaultControllerAsyncIteratorPrototype design?

[10:54:14.0000] <zcorpan>
Domenic: thanks :)

[11:19:54.0000] <Domenic>
devsnek: right, that's what I was thinking, a new class

[11:20:13.0000] <Domenic>
devsnek: (sorry to disappear, had a block of meetings)

[11:20:47.0000] <Domenic>
"right thing" = promise or generator. At least for Await(), it's pretty magic in the spec, and you can use it inside just normal sync functions and it'll suspend your execution context, which is tricky.

[11:21:33.0000] <devsnek>
isn't the only difference between functions in the spec the grammar that is allowed

[11:35:38.0000] <Domenic>
I mean depending on how you deifne "only", I suppose so

[12:17:09.0000] <Domenic>
Ugh, embed is non-interoperable. But will anyone actually care about fixing it?

[14:27:50.0000] <Domenic>
Hmm it's a bit sad that if you use shadow DOM fragment navigation breaks. Expected I guess since IDs are not unique any more. Still, I wonder if there's anything we can do...

[14:33:48.0000] <Domenic>
Ah nevermind, as long as you reproject content into the light DOM it's OK. https://plum-earth.glitch.me/

[16:34:01.0000] <Domenic>
annevk: mkwst: have you seen https://github.com/WebAssembly/content-security-policy/blob/master/proposals/CSP.md#proposed-origin-bound-permission  ? This proposal seems a little strange to me, but I'm not sure why. I guess I'm confused as to whether things like CSP and SRI are supposed to protect fetches, or executing, or what.

[16:34:57.0000] <Domenic>
Basically, we have models already for how CSP and SRI affect HTML elements like <script>, and how they affect APIs that execute scripts from URLs like importScripts() or import(), and how they affect APIs that execute scripts from strings like eval() and setTimeout()

[16:35:20.0000] <Domenic>
But WebAssembly.instantiateStreaming/compileStreaming accept neither URLs nor strings; they accept Responses, which are sort of in between.

[16:35:56.0000] <Domenic>
Not sure what the right way to apply the model is, but the proposal seems to be trying to treat them more like URL-accepting APIs I guess, by maintaining the relevant data with the response?


2018-08-17
[18:05:08.0000] <devsnek>
Domenic: whats up with <td> elements not being closed

[18:05:41.0000] <Domenic>
devsnek: why would you close them :)

[18:05:55.0000] <devsnek>
i can't tell if you're kidding or not

[18:08:35.0000] <devsnek>
Domenic: do you see in there what would be causing the remote thing to be 400ing again https://www.irccloud.com/pastebin/QIlVxE8r/thing.diff

[18:11:44.0000] <Domenic>
Hmm I'm disappointed we don't have better errors. Let's see.

[18:12:09.0000] <devsnek>
i'm installing bikeshed now so hopefully i can get better errors

[18:12:40.0000] <Domenic>
devsnek: method name with . in it

[18:13:05.0000] <devsnek>
oh that should just be next()

[18:13:25.0000] <Domenic>
Ya like the other classes

[18:13:28.0000] <devsnek>
what a wild world

[18:16:07.0000] <Domenic>
That's another detail to figure out, class vs. just a prototype, hrm.

[18:19:45.0000] <Domenic>
Ohhh the bad errors are because annevk's fix was only for make deploy, not make remote

[18:20:40.0000] <devsnek>
Domenic: i don't think there's any need for a full class

[18:20:49.0000] <devsnek>
most other places in the spec don't use a full class either

[19:42:20.0000] <Domenic>
devsnek: well in streams they do, IIRC. ES is special in that it does this only-a-prototype thing

[19:43:52.0000] <TimothyGu>
FWIW sync iterator objects in Web IDL are also prototype-only

[19:44:14.0000] <Domenic>
Hmm fair

[21:09:18.0000] <annevk>
Domenic: hmm that wasm stuff sounds wrong depending on the details; I‚Äôve said a few times in issues what I think the way forward is‚Ä¶

[21:33:14.0000] <annevk>
Domenic: oh yeah so coupling origin to these objects is not something we should do

[23:25:37.0000] <annevk>
Woohoo, no more multiple globals per document, thanks TimothyGu!

[23:26:25.0000] <annevk>
Does anyone else have "frankwabe" show up in GitHub notifications as if they participate in an issue, but actually they're not a GitHub user?

[23:26:46.0000] <annevk>
I guess they were a spammer and GitHub forgets to remove all traces?

[23:28:26.0000] <annevk>
/me reports it to GitHub

[23:36:30.0000] <rniwa>
annevk: i hope someone is writing lots of tests

[23:45:50.0000] <annevk>
rniwa: yeah, I wrote a bunch some time ago and TimothyGu is adding loads more now; should all be linked from the various issues

[23:45:59.0000] <rniwa>
annevk: yeah, I just saw that. very nice!

[23:46:30.0000] <rniwa>
annevk: this simplification should eliminate a whole bunch of spec concepts around the global object & document mapping

[23:46:41.0000] <rniwa>
annevk: for the longest time, i wondered why those things are needed LOL

[23:46:53.0000] <annevk>
üòä

[23:47:13.0000] <rniwa>
hm... Olli is not here yet?

[23:48:08.0000] <annevk>
I'd expect smaug____ to be asleep, but you never know

[23:48:32.0000] <rniwa>
annevk: it's 9:48am in Helsinki, right?

[23:48:38.0000] <annevk>
He doesn't have the average European schedule

[23:48:40.0000] <rniwa>
to be fair, i'd never be awake that early

[23:48:55.0000] <annevk>
heh, he's similar

[00:01:59.0000] <rniwa>
annevk: https://github.com/w3c/uievents/issues/208 is an interesting issue

[00:02:18.0000] <rniwa>
annevk: I *think* I understand what Olli is getting at.

[00:18:11.0000] <rniwa>
annevk: fwiw, I think the change you're proposing to expose window.event in the case of the event being composed makes sense to me: https://github.com/whatwg/dom/issues/679

[00:18:50.0000] <rniwa>
/me is about to fix shadow DOM related bugs

[01:20:58.0000] <smaug____>
now it is roughly right time to wake up

[01:22:29.0000] <Ms2ger>
You're up early

[02:11:44.0000] <zcorpan_>
annevk: I think I'll turn the draft proposal to a PR today

[02:12:13.0000] <zcorpan_>
mstensho will work on implementing in chromium

[02:12:40.0000] <annevk>
\o/

[02:13:46.0000] <zcorpan_>
everyone supports -webkit-appearance, nobody supports appearance. good times

[02:14:32.0000] <annevk>
zcorpan_: https://groups.google.com/d/msg/mozilla.dev.platform/Fq6OH5SWeRo/lxHDXFnwCQAJ is prolly of interest

[02:15:26.0000] <zcorpan_>
I guess I'll put -webkit-appearance in the UA stylesheet

[02:17:40.0000] <zcorpan_>
annevk: thx. I've filed https://github.com/w3c/csswg-drafts/issues/3024

[05:12:36.0000] <annevk>
Domenic: so it doesn't seem like anything happened with CSP and Wasm since I last looked; any particular reason why you pinged me?

[05:12:59.0000] <annevk>
Domenic: is Wasm shipping already?

[05:13:12.0000] <annevk>
Hmm it is

[05:13:26.0000] <annevk>
Seems bad that CSP isn't sorted then

[05:18:26.0000] <Ms2ger>
>Enable Shadow DOM in release builds: RESOLVED FIXED in Firefox 63

[05:18:28.0000] <Ms2ger>
Hear hear

[05:53:00.0000] <Domenic>
annevk: I got an email from Ben Titzer that the Wasm CG wants to figure out their CSP story now.

[05:54:07.0000] <annevk>
Domenic: it'd help if they respond to my issues üòä

[05:54:46.0000] <annevk>
I think I've pretty much laid out how it should work, but if they need more detail that can be provided of course

[08:02:31.0000] <Domenic>
annevk: to be clear, by "I'd be happy to land this refactoring as I think it's mostly a net positive" you mean including the normative changes?

[08:04:27.0000] <annevk>
Domenic: yes

[08:04:39.0000] <Domenic>
Great :)

[08:05:10.0000] <Domenic>
Although I'm thinking maybe we should rip out the type-with-no-src option, hmm

[08:05:34.0000] <annevk>
Domenic: that's no longer implemented?

[08:05:46.0000] <Domenic>
I can't imagine any MIME type for which it would be

[08:05:57.0000] <Domenic>
Otherwise we have to add a fallback clause for if it's not handled by any plugin I think

[08:06:30.0000] <annevk>
Might be worth asking qdot first, seems pretty responsive

[08:06:38.0000] <annevk>
Gotta go for a bit

[08:08:49.0000] <Domenic>
I guess maybe just refactoring to make it less duplicative makes that seem less bad

[08:10:26.0000] <Domenic>
I guess it seems kind of implemented

[08:11:37.0000] <Domenic>
Like http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=6120 is different than http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=6121 in Chrome


2018-08-18
[21:57:31.0000] <devsnek>
Domenic: should i have preventCancel and preventRelease

[07:15:58.0000] <smaug____>
hmm, is hixie.ch down?

[07:16:06.0000] <smaug____>
/me would load a testcase from there

[07:16:41.0000] <smaug____>
hmm, some local issue

[07:16:56.0000] <smaug____>
back up

[07:58:26.0000] <Domenic>
devsnek: I don't think preventRelease could possibly be useful, so just preventCancel makes sense to me

[08:17:53.0000] <devsnek>
Domenic: k, also i assume i'll need to update the reference impl as well once tests exist?

[08:18:09.0000] <Domenic>
devsnek: ya, spec and ref impl and tests all in parallel, to validate each other

[08:18:45.0000] <devsnek>
git needs a feature where when you have 30 checkouts of someone split across your harddrive it doesn't duplicate everything

[08:19:03.0000] <devsnek>
something*

[08:19:18.0000] <devsnek>
15gb of my 128gb is v8 checkouts :(

[08:27:08.0000] <devsnek>
Domenic: is it okay that i bumped the eslint to 2018 for `async function*(){}`

[08:31:12.0000] <Domenic>
devsnek: yes in theory but ideally the ref impl should follow the spec exactly so I can't imagine using async function*() {} works. In tests I guess?

[08:31:37.0000] <devsnek>
Domenic: no i need to get %AsyncIteratorPrototype% :D

[08:32:07.0000] <TabAtkins>
devsnek: github has a hacked up version of git that does that, so that forking works reasonably. I think they pushed their stuff upstream?

[08:37:07.0000] <gsnedders>
devsnek: there are various things; git clone --reference and --shared are related to that, also git worktree

[08:37:19.0000] <gsnedders>
though I think all of them duplicate the checkout?


2018-08-19
[05:28:06.0000] <TabAtkins>
Yeah, the working copy is still duplicated, but you can at least avoid duplicating the *rest* of history.

[05:37:55.0000] <nox>
I don't think GH does anything fancy, it just has all forks share a single repository AFAICT.

[05:39:19.0000] <nox>
(For example you can access any upstream commits that are not yet supposed to be in your fork, from the fork's page on GH.)

[14:57:01.0000] <devsnek>
is there any way to entangle an existing readable and writable into a transform

[15:35:33.0000] <TimothyGu>
devsnek: can you give a use case?

[15:38:43.0000] <devsnek>
TimothyGu: i'm working on interop with node streams

[15:38:53.0000] <devsnek>
i have a method to get a readable stream and a method to get a writable stream

[15:38:57.0000] <devsnek>
i'd like to just entangle them

[15:39:18.0000] <devsnek>
the transform stream constructor doesn't let you specify stuff like the pull method of readable etc

[15:40:29.0000] <TimothyGu>
well you have to assign semantics to how they are entangled no?

[15:41:26.0000] <devsnek>
its kinda just readable.read().then(transform).then(writable.write) right?

[15:41:50.0000] <TimothyGu>
oh, isn‚Äôt that pipeTo then?

[15:42:20.0000] <devsnek>
there's no way to pipeThrough without a transform stream

[15:42:28.0000] <devsnek>
i was just trying to describe the semantics of a transform stream

[15:42:49.0000] <TimothyGu>
pipeTo, not pipeThrough

[15:43:45.0000] <TimothyGu>
can you give me an example of what the ‚Äúmethods to return a readable stream and a writable stream‚Äù

[15:43:56.0000] <TimothyGu>
(also on a train so spotty internet)

[15:45:06.0000] <devsnek>
readable https://github.com/nodejs/node/pull/22352/files#diff-ba6a0df0f5212f5cba5ca5179e209a17R991

[15:45:08.0000] <devsnek>
writable https://github.com/nodejs/node/pull/22352/files#diff-1915a7b992a3012b177dd855fa3477e0R594

[15:45:44.0000] <devsnek>
here's my current impl of transform but i think its missing the proper support with node's impl of  backpressure https://github.com/nodejs/node/pull/22352/files#diff-9d52ef7e808de6b37f6f25d758fe99d3R206


2018-08-20
[07:37:01.0000] <Domenic>
devsnek: there is no way to modify the behavior of a writable so that when you write to it it goes into some other readable instead of its original underlying sink. Similarly there is no way to modify the behavior of a readable so that when you read from it it reads from a writable instead of from its original underlying source.

[07:37:53.0000] <Domenic>
So yeah focusing on the use case and some other solution makes more sense to me.

[07:38:10.0000] <devsnek>
cool ok

[07:38:11.0000] <devsnek>
also

[07:38:25.0000] <devsnek>
there was an issue about duplex streams open on whatwg a long time ago

[07:38:34.0000] <devsnek>
it got closed but was seemingly never solved?

[07:44:36.0000] <Domenic>
Any object containing { readable, writable } is a duplex right?

[07:46:00.0000] <devsnek>
Domenic: sure but thats kinda messy

[07:46:10.0000] <Domenic>
Why?

[07:49:28.0000] <devsnek>
Domenic: i think the concept of a stream with data flowing in two directions is primitive enough to warrant a unique type

[07:49:39.0000] <devsnek>
an object where you could getReader and getWriter as an example

[07:49:58.0000] <Domenic>
Nah I think Node's conflating of two separate streams into a single object causes a ton of pain

[07:50:16.0000] <Domenic>
Readable and writable streams as separate objects that never have to occupy the same space is great

[07:50:28.0000] <Domenic>
And then you have this general concept of "two related streams" represented by { readable, writable }

[07:50:42.0000] <Domenic>
That could either be duplex, or transform. The relationship between the two sides is up to the creator of that pair.

[07:50:59.0000] <Domenic>
But pipeThrough() works with anything that conforms to that object signature

[07:51:17.0000] <Domenic>
(As does any userland code that assumes the same pattern)

[07:53:30.0000] <devsnek>
so { readable, writable } is a good pattern to follow?

[08:08:40.0000] <JakeA>
Do we have a webidl way to create async iterators? If not I'll open an issue and propose prose

[08:08:53.0000] <TimothyGu>
I don't think so

[08:09:30.0000] <Domenic>
devsnek: yeah it is

[08:10:26.0000] <Domenic>
I guess we should doc this more

[08:12:06.0000] <devsnek>
i btw i opened https://github.com/whatwg/streams/pull/950

[08:13:25.0000] <Domenic>
Oh right yes I am excited to look at that today

[08:13:46.0000] <Domenic>
But, I specifically put a large block on my calendar starting in 15 minutes to work on the hard thing I've been procrastinating on at work. So, later.

[08:14:00.0000] <devsnek>
üëã

[08:51:23.0000] <JakeA>
TabAtkins: is it possible to export a dictionary? I'm trying to reference https://w3c.github.io/manifest/#dom-imageresource from another spec

[09:13:59.0000] <TabAtkins>
JakeA: yeah def. You're wanting them to mark it up so Bikeshed can target it?

[09:16:02.0000] <TabAtkins>
I think I can just point Shepherd at it, actually - as long as there's an idl block and a dfn, the heuristics should hook them up.

[09:17:49.0000] <TabAtkins>
I've just arrived from Buenos Aires tho, so I'm dead right now

[09:19:32.0000] <gsnedders>
That corpse is typing? disconcerting.

[09:50:50.0000] <JakeA>
TabAtkins: hah, no probs. Get some sleeps.

[11:51:52.0000] <howdoi>
is there a way to add animation to the splash screen that appears via the manifest.json? (does it even makes sense to do so?)

[14:00:32.0000] <gsnedders>
also: ergh, we could really do with someone maintaining CSSOM/CSSOM View

[14:14:31.0000] <TabAtkins>
gsnedders: emilio is the editor now

[14:15:00.0000] <ecobos>
TabAtkins: technically not from cssom-view though. I guess I should, I've been looking at compat issues in the area lately

[14:15:37.0000] <ecobos>
gsnedders: if there's any issue that is particularly urgent let me know and I'll try to get to it ASAP

[14:17:49.0000] <gsnedders>
ecobos: mostly just actually defining terminology btter for other things to hook into, but I think that actually runs into the lack of definition of layout v. visual viewport :(

[14:18:15.0000] <gsnedders>
(about to change trains, will respond more when I get home)

[14:19:02.0000] <ecobos>
k, ttyl

[14:24:29.0000] <gsnedders>
or alternatively that train arrived just when there's a 20 minute gap between local trains :(

[14:30:47.0000] <gsnedders>
basically I want easy to refer to terms of outerWidth (width of the "client window"), innerWidth (width ofthe viewport *including* scrollbars), clientWidth (width of the viewport *excluding* scrollbars)

[14:31:25.0000] <gsnedders>
which is a bit weird given it isn't totally clear whether the viewport actually includes the scrollbar or not in CSS2

[14:31:38.0000] <gsnedders>
(which also affects things like vw)

[14:33:04.0000] <gsnedders>
really all of this is a bit awkward because most of the underlying things are deliberately undefined because we don't want to assume too much about the UA

[14:33:10.0000] <gsnedders>
but these things are all web exposed in one way or the other

[14:33:34.0000] <gsnedders>
c.f. that long discussion about what behaviour should be with disappearing scrollbars in some CSS F2F last year


2018-08-21
[23:35:22.0000] <cluelessperson>
I want to help, not sure I have the skills to

[00:05:57.0000] <annevk>
cluelessperson: welcome, did you look at good first issues on GitHub?

[00:37:30.0000] <cluelessperson>
annevk: will o

[00:37:33.0000] <cluelessperson>
do

[01:41:11.0000] <yoav>
annevk: regarding https://github.com/whatwg/fetch/pull/773#discussion_r209604056 what's the best way to tackle the "code smell" part? should I create a separate definition of "same origin request" and make sure that all places use that instead of defining the algorithm on their own?

[01:41:21.0000] <yoav>
if so, should that be part of that PR or a separate one?

[01:42:10.0000] <annevk>
yoav: it depends on what kind of check we really want there

[01:42:21.0000] <annevk>
yoav: and whether a cross-origin request inbetween "poisons" it somehow

[01:42:48.0000] <yoav>
I don't *think* it does

[01:43:10.0000] <annevk>
yoav: that does allow for some attacks

[01:43:17.0000] <yoav>
we want to control info leakage on requests and make sure that there isn't one unless the site opts-in to one

[01:43:38.0000] <annevk>
yoav: in any event, since this is processing on the response it'd make more sense for it to rely on the existing response filtering setup

[01:46:24.0000] <yoav>
what do you mean "processing on the response"? We're talking about https://whatpr.org/fetch/773.html#concept-fetch step 1.8, right?

[01:50:42.0000] <annevk>
yoav: oh hmm, so another problem with that is that we don't run those steps for redirects

[01:51:35.0000] <annevk>
yoav: these steps are only run once for the entire fetch operation

[01:51:50.0000] <yoav>
so redirects won't get CH? That could be a problem...

[01:52:29.0000] <annevk>
yoav: no, they retain the initial CH, even cross-origin (though depends a bit on safelists and such)

[01:52:49.0000] <yoav>
hmm

[01:53:02.0000] <annevk>
And yeah, that'll be a problem for no-cors cross-origin at least, esp with service workers and the new restrictions on Headers

[01:53:31.0000] <annevk>
yoav: so if there's origin restrictions I guess we need to redo the whole setup of this

[01:53:34.0000] <yoav>
that *might* be fine from a privacy perspective (maybe a redirect would be considered an opt-in), but need to verify that it is

[01:54:16.0000] <yoav>
Is there somewhere else where that logic can hang from that can handle redirects?

[01:54:16.0000] <annevk>
I don't think so, given open redirectors and such

[01:54:25.0000] <annevk>
yoav: main fetch

[01:54:51.0000] <yoav>
ok, I'll take a look

[01:55:02.0000] <annevk>
yoav: though maybe it needs to be even deeper in the stack, near HTTP-network fetch, if it depends on the origin whether or not we'll include the headers

[02:02:23.0000] <annevk>
I'm surprised by this github/fetch issue about making setting URL's query easier having lots of interaction and then nobody escalating that to whatwg/fetch over the past two years to suggest that maybe something should change...

[02:07:40.0000] <yoav>
annevk: what do you mean by "depends on the origin"? It depends on the origin's opt-in

[02:08:01.0000] <yoav>
should the request client-hints set cloning also move somewhere further down?

[02:08:48.0000] <annevk>
yoav: for the second question, I don't think so, the global won't change

[02:09:16.0000] <yoav>
ok

[02:10:04.0000] <annevk>
yoav: hmm, with navigation redirects they might, I suppose;

[02:10:27.0000] <annevk>
well, no

[02:12:28.0000] <yoav>
looking at main fetch, would an extra step on step 2 work for this?

[02:14:11.0000] <annevk>
yoav: yeah, I guess that's where it should go if it needs to affect the request

[02:14:28.0000] <annevk>
(and each subsequent request in case of redirects)

[02:15:31.0000] <yoav>
annevk: and regarding the same origin check, should I keep the current language and then clean up to have a single definition somewhere?

[02:15:44.0000] <yoav>
or clean up before this lands?

[02:16:56.0000] <annevk>
yoav: so wait, I'm not sure if main fetch step 2 is the place

[02:17:04.0000] <yoav>
ok

[02:17:11.0000] <annevk>
yoav: it really depends on the behavior you want in the face of redirects

[02:17:16.0000] <annevk>
yoav: and you haven't clarified that yet

[02:17:39.0000] <annevk>
yoav: it sounds like it vary on a per-origin basis what headers end up being included?

[02:17:44.0000] <annevk>
can vary*

[02:17:52.0000] <yoav>
yeah, it can

[02:18:04.0000] <annevk>
okay, so then headers need to be added at the last possible moment

[02:18:21.0000] <annevk>
because the request, including headers, gets cloned

[02:18:44.0000] <annevk>
however, that'll also affect what the service worker sees

[02:19:05.0000] <yoav>
hmm

[02:19:48.0000] <yoav>
so ideally, I want cross-origin redirects to not get CH headers

[02:20:07.0000] <yoav>
but I do want SW to see the headers (and potentially change behavior based on them)

[02:20:32.0000] <annevk>
that combination means you'd have to remove headers, which is something we managed to avoid having to do thus far

[02:20:46.0000] <annevk>
though we will be adding it for POST -> GET redirects

[02:21:26.0000] <annevk>
it also makes it hard to distinguish between user-set and UA-set headers, but I think CH already had that problem

[02:21:49.0000] <annevk>
(I'm not sure the current text accounts for it much)

[02:22:02.0000] <yoav>
it does not

[02:22:13.0000] <annevk>
e.g., one problem here is that if you decide to remove CH headers, you'll also remove user-set CH headers

[02:22:37.0000] <annevk>
users might expect those headers to survive their cross-origin redirect though, assuming appropriate CORS opt ins along the way

[02:22:46.0000] <annevk>
but this would make that impossible

[02:22:47.0000] <yoav>
yeah...

[02:22:56.0000] <annevk>
so you gotta figure that out

[02:24:14.0000] <yoav>
annevk: is there a subset we can land right now and start a separate discussion for the redirection/SW handling?

[02:24:53.0000] <yoav>
I prefer not to block the pending PRs on figuring this out

[02:25:26.0000] <yoav>
and then we can discuss this and its privacy/ergonomics/use-case implications in isolation and not part of a huge PR

[02:26:45.0000] <annevk>
We could replace all the Client Hints bit with issue markers I suppose?

[02:26:48.0000] <annevk>
bits*

[02:27:33.0000] <annevk>
It's pretty important for implementers to know the answers to all these questions, esp for security and such

[02:28:26.0000] <yoav>
annevk: yeah, I'm not suggesting we'll postpone answering those questions, just that it won't block the pending PRs

[02:29:05.0000] <yoav>
annevk: the currently specified situation is that CH are sent on cross-origin requests

[02:29:17.0000] <yoav>
that's also the currently shipped state in Chromium

[02:29:36.0000] <yoav>
although there's intent to fix it, pending on feature-policy opt in

[02:30:11.0000] <yoav>
so, we could drop that check from the current PR, and start an issue summarizing the trade-offs we discussed here

[02:30:16.0000] <annevk>
Yeah, I think if we can't figure out a complete solution it'd be best to take it out for now or add issue markers

[02:30:50.0000] <yoav>
ok, I'll do that

[03:02:49.0000] <yoav>
annevk: uploaded a new patch to https://github.com/whatwg/fetch/pull/773. Can you take a look?

[03:12:29.0000] <annevk>
done

[03:26:32.0000] <yoav>
annevk: thanks! switched to XXX

[03:28:01.0000] <yoav>
missed the comment about comment message and CORS safelisted headers

[03:28:59.0000] <yoav>
annevk: the headers are added to the CORS safelisted list at https://github.com/whatwg/fetch/pull/725

[03:45:18.0000] <yoav>
annevk: squashed and added a commit message

[05:32:54.0000] <yoav>
annevk: Regarding https://github.com/whatwg/fetch/pull/773#discussion_r211569017 what other integration is required beyond what we discussed above? Or should I just link to the same issue?

[05:33:40.0000] <annevk>
yoav: yeah, I guess the same and maybe the more general one?

[05:33:54.0000] <annevk>
yoav: just to make it clear client hints is half-finished

[05:34:00.0000] <annevk>
yoav: or is it client-hints now?

[05:34:16.0000] <yoav>
half finished in what way?

[05:35:45.0000] <annevk>
yoav: in that there's a lot of open issues?

[05:37:24.0000] <yoav>
I can link to https://github.com/whatwg/fetch/issues/726

[05:37:49.0000] <yoav>
but believe most of what's covered there should be fixed by this PR and the HTML PR that comes with it

[05:39:40.0000] <yoav>
other than the feature policy bits

[05:40:01.0000] <annevk>
And that step 6-7 of fetch is not the place to fix this?

[05:40:14.0000] <annevk>
I also didn't see the secure context restrictions

[05:41:08.0000] <annevk>
yoav: basically, what I'm saying is that non-Chromium cannot implement this from looking at Fetch

[05:41:20.0000] <annevk>
yoav: they'll have to reverse engineer Chromium if they want to ship something today

[05:41:32.0000] <annevk>
yoav: that much should be clear if you read Fetch

[05:41:46.0000] <annevk>
Well, what should be clear is that Fetch is incomplete

[05:42:34.0000] <yoav>
annevk: if you have feedback regarding further things that are missing, I'm happy to take a look

[05:46:45.0000] <annevk>
yoav: apart from the above, I also worry about non-Google commitments, tests, and impact on no-cors

[05:47:47.0000] <annevk>
yoav: and landing incomplete PRs with no guarantees on when the full model will be defined also makes me a bit uncomfortable

[05:48:19.0000] <annevk>
at least in software projects where this is done it's usually the maintainer that ends up taking the hit

[05:49:07.0000] <TimothyGu>
annevk: Have you seen https://github.com/whatwg/html/issues/3885?

[05:49:31.0000] <annevk>
TimothyGu: I guess I should read it again

[05:50:03.0000] <TimothyGu>
Yeah the two options are basically not change the URL, or do what replaceState() does

[05:50:16.0000] <TimothyGu>
I‚Äôm happy to implement the proposed spec in Chrome btw

[05:51:54.0000] <yoav>
annevk: I think tests should be in reasonable shape, given Tarun's latest work (% the redirection case, where we need to better define the behavior first)

[05:52:24.0000] <yoav>
what's the impact on no-cors?

[05:53:01.0000] <annevk>
yoav: I'm not sure, but if an origin opted in and then someone makes a no-cors request to that origin, what would/should happen?

[05:53:52.0000] <annevk>
Domenic: adding operator overloading to JavaScript to avoid a convenience thingy in fetch() strikes me as overkill, but who knows

[05:54:19.0000] <annevk>
Domenic: fetch() also already exposes a bunch of convenience features (e.g., types of bodies it accepts)

[05:54:40.0000] <annevk>
TimothyGu: ah okay, I guess this is good then

[05:55:21.0000] <annevk>
TimothyGu: updated review comment

[05:57:05.0000] <TimothyGu>
annevk: thanks!

[05:59:05.0000] <yoav>
annevk: an origin cannot opt-in to receive the hints when it is a 3rd party. The origin delivering the document can opt-in for future navigation requests

[05:59:47.0000] <yoav>
than the document can opt-in for its subresources

[06:00:06.0000] <yoav>
currently it's all of them, but we need to fix it to be for same-origin subresources

[06:00:38.0000] <yoav>
with cross-origin subresources requiring a specific opt-in for their origin (so Feature Policy)

[06:00:52.0000] <annevk>
yoav: and secure context?

[06:00:58.0000] <yoav>
oh, of course

[06:01:57.0000] <annevk>
yoav: yeah so even with feature policy I wouldn't be comfortable adding these headers to no-cors requests and cors without preflight is also somewhat problematic in hindsight

[06:02:15.0000] <annevk>
yoav: since it's the attacker that determines the feature policy

[06:05:40.0000] <yoav>
annevk: Is there a way to make them safelisted if UA added, but not user added?

[06:06:07.0000] <yoav>
I'd be fine with that, assuming it survives SW fetch events

[06:06:29.0000] <annevk>
yoav: that'd require new infrastructure, including in implementations

[06:06:58.0000] <annevk>
yoav: I doubt anyone wants to go for that though, as you'd need a side table for all your header lists, and make sure it stays accurate, etc.

[06:08:47.0000] <Domenic>
annevk: why would you need operator overloading? Just string conversion

[06:09:24.0000] <Domenic>
annevk: types of bodies isn't a fundamentally new concept, just convenient typing on an existing concept ("body")

[06:12:18.0000] <annevk>
Domenic: with string conversion it's rather fragile if the input URL already contained a query

[06:13:15.0000] <Domenic>
annevk: I doubt that's often what people are dealing with, but if it is, there's URL-based conveniences that would make more sense then, e.g. url.withSearchParams(URLSearchParamsInit) -> URL

[07:41:07.0000] <annevk>
That ends up being a lot more verbose. And apparently this kind of API is also a common offering among libraries so from that perspective it seems worth elevating

[07:41:58.0000] <annevk>
(It ends up being verbose if the url variable in your example is a relative URL string.)

[09:22:43.0000] <nox>
Domenic: Adding new query string parameters is something I did often at my former job.

[09:23:38.0000] <nox>
E.g. adding pagination parameters to an URL with search filters.

[09:27:33.0000] <TabAtkins>
Yeah, me too. (Or adding query params to a URL that already has a hash on it.) Relying on string-concat to work here is no good.

[09:43:59.0000] <annevk>
Perhaps URL.withSearch(url, searchParamsInit) that uses the current global object to find a base URL

[09:44:54.0000] <annevk>
As Krinkle argued on Twitter that'd allow reuse across APIs rather than have something specific for fetch()

[09:45:20.0000] <Krinkle>
(hi)

[09:45:35.0000] <annevk>
It's still hard to hit the sweet spot with that kind of API though as it gets kinda verbose

[09:47:34.0000] <Krinkle>
I think it'd be fine for the method to return URL, but I guess people would prefer it take string, which means it'd have to be static.  That way you'd have fetch(URL.withParams(url, {..})) rather than var x = new URL(url); fetch(x.withParams({..}));.

[09:48:11.0000] <Krinkle>
we'll want to be careful with regards to whether it means merge or replace for search

[09:48:24.0000] <TabAtkins>
Yeah, alternate constructor sounds fine to me.

[10:07:32.0000] <annevk>
Domenic: https://github.com/whatwg/participant-data/pull/7 could use a quick look too

[10:08:13.0000] <annevk>
Domenic: two takeaways there, perhaps we should validate it's an actual user name and perhaps communicate more clearly what string we want to have?

[10:08:22.0000] <Domenic>
annevk: yeah, agreed...

[10:08:57.0000] <annevk>
Domenic: I guess I can file an issue against p.w.o and land this?

[10:09:13.0000] <annevk>
Domenic: would like to unblock the new contributor

[10:09:20.0000] <Domenic>
annevk: yeah I'll file the issues, I have some thoughts.  Please do land though.

[10:09:31.0000] <annevk>
ah great, thanks

[10:09:38.0000] <Domenic>
I guess https://github.com/whatwg/participate.whatwg.org/issues/8 is already open

[10:18:37.0000] <Domenic>
Sent https://github.com/whatwg/participate.whatwg.org/pull/32 as well

[12:43:49.0000] <TabAtkins>
annevk: That link-defaults issue we just ran into this morning is fixed now. Your manual fix isn't wrong tho, so no need to remove it. It'll just work properly in the future.

[13:20:47.0000] <devsnek>
what about throw()

[13:21:27.0000] <TimothyGu>
devsnek: do you need to implement throw?

[13:21:31.0000] <devsnek>
no idea

[13:21:34.0000] <devsnek>
thats why i'm asking lol

[13:21:43.0000] <TimothyGu>
I guess you should

[13:21:58.0000] <Domenic>
Hmm

[13:22:01.0000] <Domenic>
I'm not sure what it gives us

[13:22:31.0000] <Domenic>
I think if you implement it it will just do the same as if it doensn't exist

[13:22:36.0000] <Domenic>
return() is worthwhile since it releases the lock

[13:22:38.0000] <Domenic>
Oh wait

[13:22:41.0000] <Domenic>
Maybe throw() should too?

[13:23:09.0000] <TimothyGu>
yeah

[13:23:13.0000] <Domenic>
Hmm throw() is only used by yield*

[13:23:32.0000] <Domenic>
I'm unsure when throw() would be called in a streams scenario

[13:23:50.0000] <Domenic>
Someone should write some code that would trigger it and we could turn that into a test if it turns out to be useful

[13:27:56.0000] <TimothyGu>
so it seems like yield* in async generator will fallback to return() if throw() doesn't exist

[13:29:23.0000] <Domenic>
Heh right

[13:29:30.0000] <Domenic>
> NOTE: If iterator does not have a throw method, this throw is going to terminate the yield* loop. But first we need to give iterator a chance to clean up.

[13:29:54.0000] <TimothyGu>
throw could be used to revive an async iterator after it has thrown an error

[13:30:13.0000] <Domenic>
but why

[13:30:17.0000] <TimothyGu>
but I assume once stream errors, it errors forever?

[13:30:39.0000] <TimothyGu>
so doesn't seem like `throw()` is necessary after all

[13:30:47.0000] <TimothyGu>
Domenic: weren't you the champion of the proposal

[13:30:59.0000] <devsnek>
lol

[13:31:50.0000] <Domenic>
A lot of the esoteric protocol stuff I just did by analogy

[13:33:55.0000] <TimothyGu>
I feel like we should have a "language feature equality day"

[13:34:24.0000] <TimothyGu>
all language features are created equal and deserves equal usage, rights, and protection

[13:35:58.0000] <Domenic>
Nooooo

[13:36:02.0000] <devsnek>
lol

[13:36:08.0000] <TimothyGu>
e.g., just because the mismatched end tag is historically discriminated against doesn't mean it should continue being such ‚Äì and indeed now the HTML parser treats it as a first-class citizen

[13:36:26.0000] <Domenic>
with, @@species, stop the madness.

[15:59:37.0000] <devsnek>
is this validish? https://gc.gy/2597346.png

[15:59:50.0000] <devsnek>
not quite sure how to make %Promise_reject% link either

[16:01:52.0000] <Domenic>
devsnek: so you should just do what the rest of the doc does and use higher-level stuff like "reject the promise" or "resolve the promise"

[16:02:08.0000] <Domenic>
But, note that next() must return a promise for { value, done }, not a { value: promise, done }

[16:02:35.0000] <devsnek>
actually in an error condition

[16:02:44.0000] <devsnek>
wouldn't it just be a rejected promise with the error

[16:03:12.0000] <Domenic>
So it should just be "If _read_ is an abrupt completion, return a promise rejected with _read_.[[Value]]"

[16:03:15.0000] <devsnek>
ye

[16:03:15.0000] <Domenic>
yeah exactly

[16:03:33.0000] <Domenic>
I think we already have a helper for this?

[16:03:40.0000] <Domenic>
https://streams.spec.whatwg.org/#promise-call

[16:03:52.0000] <Domenic>
No not quite

[16:04:11.0000] <devsnek>
"a promise rejected with x" is used all over the place

[16:04:15.0000] <Domenic>
Yep

[16:04:40.0000] <devsnek>
ReturnRejectedIfAbrupt would be a nice thing to have

[16:04:47.0000] <devsnek>
but oh well

[16:04:50.0000] <Domenic>
Eh, a bit too macro-ey

[16:05:14.0000] <devsnek>
oh and the object literals thing is okay?

[16:05:19.0000] <MikeSmith>
TabAtkins: I‚Äôm wondering, when you thumbs-up a comment like https://github.com/w3c/svgwg/issues/529#issuecomment-414762241 is it because you haven‚Äôt taken time to consider that a comment like that might end up really bumming somebody else out, or is it instead because you just don‚Äôt care

[16:05:42.0000] <Domenic>
Oh, no, it is not. Use https://streams.spec.whatwg.org/#readable-stream-create-read-result

[16:06:29.0000] <devsnek>
i was afraid of that haha

[16:07:17.0000] <TabAtkins>
MikeSmith: I've been vocal in the past with my annoyance for putting the CSS validator in the way of publishing, for exactly the reasons Chris cites.

[16:09:00.0000] <TimothyGu>
devsnek: also nit: put a colon after "If ‚Ä¶, then"

[16:09:24.0000] <devsnek>
i need syntax highlighting for bs

[16:09:33.0000] <TimothyGu>
:set syntax=html

[16:09:49.0000] <devsnek>
that won't highlight the algorithms

[16:09:56.0000] <devsnek>
even if some of it is prose

[16:10:25.0000] <TimothyGu>
TabAtkins: are there syntax highlighters for bikeshed?

[16:11:28.0000] <MikeSmith>
TabAtkins: my question wasn‚Äôt as much about the substance of Chris‚Äôs comment as it was about whether in general you actually take time think about how somebody else might feel when you thumbs-up a comment like that, or make a comment like that yourself

[16:11:50.0000] <MikeSmith>
because you seem like a better person that somebody who would do that wilfully

[16:14:32.0000] <TabAtkins>
I can tell you've taken it far more personally than I expected, and I'm very sorry that I've made you feel like this; that absolutely wasn't my intent and I would have done differently if I'd known. Apologies.

[16:15:33.0000] <TabAtkins>
TimothyGu: In the repo there's a tmLanguage file

[16:15:49.0000] <TabAtkins>
It highlights a couple useful bits; PRs accepted.

[16:15:57.0000] <TimothyGu>
ah, no .vim I assume?

[16:16:08.0000] <TabAtkins>
PRs. Accepted.

[16:16:20.0000] <TimothyGu>
k

[16:25:50.0000] <Domenic>
annevk: tomorrow can you take a look at my counter-review of https://github.com/whatwg/html/pull/3677 and let us know which parts you think are important despite my protestations? Also I know there are some things I didn't disagree with that fserb should still fix. Maybe just thumbs up/down would be fine.


2018-08-22
[19:39:29.0000] <MikeSmith>
I can‚Äôt find that the PromiseRejectionEvent() constructor requirements are specified beyond just what follows from the IDL for the interface at https://html.spec.whatwg.org/multipage/webappapis.html#the-promiserejectionevent-interface

[19:40:13.0000] <TimothyGu>
MikeSmith: https://dom.spec.whatwg.org/#concept-event-constructor

[19:40:31.0000] <MikeSmith>
/me loks

[19:40:37.0000] <MikeSmith>
TimothyGu: thanks

[19:40:40.0000] <TimothyGu>
np

[19:41:15.0000] <MikeSmith>
https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/PromiseRejectionEvent#Parameters says the type argument to the constructor ‚Äúmust be one of "rejectionhandled" or "unhandledrejection".

[19:42:01.0000] <MikeSmith>
... but I can‚Äôt see where that‚Äôs actually specified or what it follows from

[19:43:50.0000] <TimothyGu>
MikeSmith: I think they mean that the event fired by browsers can only be either of them

[19:59:04.0000] <MikeSmith>
TimothyGu: OK, thanks „Éº so to be clear, in fact there‚Äôs nothing that prevents me from giving that constructor any string I want as the first argument, right?

[19:59:11.0000] <MikeSmith>
there‚Äôs nothing specified that says it will throw if the string is something other than "rejectionhandled" or "unhandledrejection"

[19:59:28.0000] <TimothyGu>
MikeSmith: correct

[19:59:56.0000] <MikeSmith>
ok, thanks again

[22:35:10.0000] <TimothyGu>
amazing

[22:35:19.0000] <TimothyGu>
apparently Chrome only fires beforeunload for HTML documents

[22:35:23.0000] <TimothyGu>
not XHTML documents

[00:13:23.0000] <annevk>
Poor XHTML

[00:13:34.0000] <annevk>
I guess in this case it's actually a win for XHTML

[00:13:55.0000] <annevk>
But most other things are stacked against it still

[01:49:33.0000] <yoav>
annevk: FYI https://github.com/w3c/resource-timing/issues/70#issuecomment-414960153

[03:01:00.0000] <annevk>
Sigh

[07:40:55.0000] <DeltaHeavy>
Does HTML5 technically have namespaces as a language? Or does it simply define one for use with XML?

[07:45:41.0000] <zcorpan>
DeltaHeavy: it doesn't provide a means to specify namespace in text/html, but the HTML parser can create elements in the HTML, SVG and MathML namespaces

[07:46:28.0000] <DeltaHeavy>
Thank you!

[10:19:33.0000] <TimothyGu>
‚Ä¶ never mind, Chrome does fire beforeunload on XHTML documents

[10:19:52.0000] <TimothyGu>
however, WPT's /common/dummy.xhtml turns out to not be an actual XHTML document

[10:20:34.0000] <TimothyGu>
as it doesn't have xmlns="http://www.w3.org/1999/xhtml" on the html element

[10:22:34.0000] <TimothyGu>
and Chrome tests for the existence of a body element before trying to fire beforeunload

[10:22:45.0000] <TimothyGu>
o_O

[10:50:13.0000] <Domenic>
AMAZING

[11:10:57.0000] <jugglinmike>
annevk: do you know of any discussion about the trend to define new JavaScript APIs using configurable properties?

[12:42:33.0000] <annevk>
jugglinmike: not aware of a trend

[12:42:55.0000] <annevk>
jugglinmike: IDL/JS defaults mismatch?

[12:46:51.0000] <jugglinmike>
annevk: oh, hm

[12:46:57.0000] <jugglinmike>
I thought it was intentional

[12:47:26.0000] <jugglinmike>
that as a web developer, I can generally write, e.g. `navigator.permissions = myMockPermissionsAPI`

[12:48:51.0000] <Domenic>
That's been true since like 1995

[12:49:11.0000] <Domenic>
Well, I guess you'd have to use Object.defineProperty, since it's a getter


2018-08-23
[01:38:41.0000] <annevk>
JakeA: you around? What's the simplest way to create a ReadableStream that's read from and has released its lock?

[01:38:59.0000] <annevk>
JakeA: my main problem is that read() is forever pending

[01:39:31.0000] <annevk>
JakeA: do I basically have to pass something to the ReadableStream constructor?

[01:42:25.0000] <annevk>
https://irccloud.mozilla.com/pastebin/VQZupKkf/

[01:42:37.0000] <annevk>
I guess I'll go with that for now, it seems to do the trick

[02:37:56.0000] <yoav>
annevk: Anything else blocking https://github.com/whatwg/fetch/pull/773? Do you want to related HTML changes to land at the same time?

[02:40:06.0000] <annevk>
yoav: I'd like to figure out what remains to be done

[02:47:32.0000] <annevk>
hsivonen: it's rather mindboggling how bad C screwed up with locale-dependent functions

[02:48:12.0000] <annevk>
hsivonen: I guess it says something about the programming community's diversity that this still isn't addressed in some way

[03:23:17.0000] <hsivonen>
annevk: it's addressed in two ways: ICU if you are processing natural language and rolling your own ASCII-only functions when dealing with protocol text.

[03:24:33.0000] <hsivonen>
annevk: also, it's sad when committees do things like *look* like i18n is addressed, but the solution is so unreliable that the facility didn't gain suitablity for i18n and also lost suitability for what it worked for before i18n was attempted

[03:25:33.0000] <hsivonen>
annevk: and they aren't just locale-dependent but an UB trap, too. fractally wrong.

[03:26:53.0000] <hsivonen>
annevk: I don't expect the committee to address it. See how passive-aggressive the _s functions in C11 are when they supposedly addressed security.

[03:31:05.0000] <hsivonen>
(instead of introducing new header files with the _s functions, they introduced a preprocessor dance to make the _s functions visible in the old headers)

[03:32:10.0000] <annevk>
UB = undefined behavior, I guess?

[03:33:13.0000] <hsivonen>
annevk: yes

[04:02:43.0000] <JakeA>
annevk: that looks right to me

[04:14:27.0000] <nox>
annevk: Re: Diversity:

[04:14:55.0000] <nox>
annevk: the RFC for non-ASCII identifiers in Rust currently has 593 comments.

[04:15:36.0000] <zcorpan>
TabAtkins: I tried installing bikeshed (macOS). I get "TypeError: unsupported operand type(s) for +: 'dict_values' and 'list'"

[04:17:23.0000] <zcorpan>
hmm, seems like i needed to use pip2

[04:17:47.0000] <zcorpan>
the python situation is terrible

[04:18:02.0000] <nox>
https://twitter.com/nokusu/status/1031252970342674440

[04:28:03.0000] <annevk>
nox: I guess I don't really know the tradeoffs involved for low-level languages, but sounds bad

[04:28:20.0000] <nox>
annevk: Most of them is BUT I DON'T UNDERSTAND CHINESE

[04:32:22.0000] <annevk>
o_O

[04:37:04.0000] <hsivonen>
part of it is "I know Unicode edge cases and want my edge cases to be banned (as opposed to just letting people not do things that don't make sense)"

[04:37:55.0000] <hsivonen>
(contrast with the CSS definition of identifiers)

[04:39:55.0000] <nox>
hsivonen: Oh god CSS identifiers. :D

[04:40:00.0000] <annevk>
I guess you could do what JavaScript does, but seems nicer for parsers to not have to validate too much

[04:40:36.0000] <annevk>
Anyway, with close to 600 comments that thread doesn't need more opinions

[05:11:45.0000] <annevk>
yoav: so I don't know what happened with Client Hints since the last time someone would fix the situation in Fetch was in March

[05:11:54.0000] <annevk>
yoav: it's nearly half a year later now

[05:12:22.0000] <annevk>
yoav: given the state of things I'd rather just add some issue markers and wait for someone to fix it up completely

[05:12:40.0000] <annevk>
yoav: since the updated spec is still not something we could recommend non-Chromium to implement

[05:12:48.0000] <annevk>
yoav: "updated spec" meaning your PR being applied

[05:18:38.0000] <yoav>
annevk: Regarding timelines, https://github.com/whatwg/fetch/issues/726 was filed mid-May with a plan for a fix. https://github.com/whatwg/fetch/pull/773 started at June.

[05:20:44.0000] <annevk>
yoav: my bad

[07:52:41.0000] <nnyby>
Hello, I have a question about <input type=range>. Can I make a range input's value step up and down on click? I couldn't find where the spec defines this before. More details for my question are here on stackoverflow: https://stackoverflow.com/q/51988195/173630

[08:01:58.0000] <zcorpan>
nnyby: added an answer

[08:02:18.0000] <nnyby>
zcorpan: sweet! looks promising.. i'll give it a try.

[08:41:57.0000] <TimothyGu>
annevk: Would you wanna take a look at https://github.com/whatwg/html/pull/3946? If not Domenic and I are planning on merging it later today

[08:55:19.0000] <annevk>
TimothyGu: ah sorry, I have already and sg

[09:11:28.0000] <TimothyGu>
annevk: great, thanks!

[15:23:17.0000] <domfarolino>
Is it me or are most of the links in https://github.com/whatwg/meta/blob/master/LABELS.md mostly broken due to missing end quotes?

[15:29:45.0000] <TabAtkins>
domfarolino: Nope, not just you, that's definitely the problem.

[15:30:09.0000] <domfarolino>
Ah. Will fix

[16:19:00.0000] <TabAtkins>
Domenic: Geez, you're fast. ^_^


2018-08-24
[00:25:04.0000] <annevk>
promise_test + async/await is really quite nice

[00:25:28.0000] <annevk>
I'm still not a 100% confident I do it correctly all the time, but it seems to work...

[00:42:51.0000] <annevk>
TimothyGu: Domenic: I finally created a "topic: document lifecycle" label, feel free to sprinkle it around; I guess it's kinda conflicting with navigation, but navigation doesn't naturally cover unload and such

[04:13:07.0000] <annevk>
We haven't really done memes in a while and I'm not even sure this is correct, but... https://irccloud.mozilla.com/file/fVjttBbv/hodor.jpg

[04:14:08.0000] <annevk>
https://irccloud.mozilla.com/file/3wvdQXda/hodor%20take%202.jpg

[04:14:30.0000] <nox>
annevk: Ah ah ah ah ah.

[04:14:55.0000] <nox>
annevk: Are people trying to change it?

[04:15:04.0000] <annevk>
nox: all the fricking time

[04:15:16.0000] <nox>
TIL, what a wonderful world we live in.

[04:15:25.0000] <annevk>
mostly on edge cases, though recently there was a thread about obsoleting it altogether

[04:16:05.0000] <nox>
Oh, Edge doesn't respect the policy?

[04:16:10.0000] <nox>
/me hides for this overused pun.

[04:17:14.0000] <annevk>
/me withholds a baguette

[04:17:41.0000] <nox>
Nooooooooooooooooooo

[04:19:45.0000] <annevk>
So that's an effective technique? Might be able to get document.open() fixed in Servo after all üòõ

[04:19:53.0000] <nox>
Ah ah ah ah.

[04:20:05.0000] <nox>
annevk: Fortunately, when I implemented it I skipped the whole "let's create a new Window" IIRC.

[04:20:16.0000] <annevk>
smart

[04:20:26.0000] <nox>
So it shouldn't be *that* hard to fix it (famous last words, probs).

[04:27:21.0000] <Ms2ger>
nox, so did the smup land?

[04:27:28.0000] <nox>
Ms2ger: Yes.

[04:27:41.0000] <nox>
Ms2ger: I'm currently looking at my PRs against WPT right now. :)

[04:27:56.0000] <Ms2ger>
When's the next one? 2021?

[04:28:01.0000] <nox>
I like how multiple meanings of "against" fit here.

[04:28:09.0000] <nox>
Literally made it worse for Servo.

[04:35:26.0000] <nox>
Mmh, most of my changes have disappeared already.

[04:36:28.0000] <nox>
Made https://github.com/web-platform-tests/wpt/pull/12672 nonetheless.

[06:52:40.0000] <annevk>
yoav: I'm not sure how to reply to https://github.com/whatwg/fetch/issues/800#issuecomment-415760321

[06:52:53.0000] <annevk>
yoav: my main concern is that I don't understand what model you all want

[06:53:23.0000] <annevk>
yoav: (in that there are multiple somewhat contradictory requirements)

[06:53:56.0000] <annevk>
yoav: I'm also concerned about adding exceptions to the same-origin policy

[06:55:02.0000] <annevk>
yoav: I haven't really considered the privacy leakage aspects enough to have an informed opinion there; I suspect you're probably right that 1P can leak those however (assuming there's no way 1P and 3P would ever get different intel)

[06:55:20.0000] <annevk>
yoav: hope that helps

[06:56:30.0000] <yoav>
OK. From my perspective the SOP concern is not related to this issue, but to https://github.com/whatwg/fetch/pull/725

[06:56:54.0000] <yoav>
annevk: would that be correct? Or are there SOP concerns that are specific to the redirect scenario you mentioned?

[06:58:19.0000] <annevk>
yoav: it's a problem with Client Hints in general, and I regret not pushing harder earlier on; I also note that that PR is blocked on the model not being defined

[06:59:39.0000] <annevk>
yoav: again, it'd help if more implementers are on board here, I don't think we had that requirement when we initially added Client Hints

[07:00:58.0000] <yoav>
annevk: which requirement? to safelist the headers? To not expose CH to 3P unless 1P opts in?

[07:01:07.0000] <annevk>
yoav: to have multiple implementers on board

[07:01:21.0000] <yoav>
annevk: oh, ok

[07:05:27.0000] <annevk>
I guess reading some past discussions Mozilla was halfheartedly on board, though not with all concerns addressed

[07:05:44.0000] <annevk>
But also back then the header exploits were not seen as important

[07:05:53.0000] <annevk>
Sigh

[07:06:40.0000] <annevk>
yoav: I think the SOP concerns can probably be addressed by adequately restricting the value space of the headers (this is already done in prose somewhat, but I doubt it's tested)

[07:07:09.0000] <annevk>
yoav: so I guess I wouldn't focus too much on my SOP concerns

[07:08:04.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=1263446 has all the past Mozilla discussion (also follow the dev.platform link) FWIW

[07:08:26.0000] <annevk>
There's also some talk there of restricting this to H/2 / HTTPS

[07:08:41.0000] <annevk>
Which I think is planned, but not in the spec yet

[07:09:34.0000] <annevk>
(This situation does make me appreciate our new setup of multiple implementers, tests, etc.)

[07:21:51.0000] <nnyby>
Is it possible to differentiate between a range input's knob vs its slider track on the mousedown event? more details here: https://stackoverflow.com/q/52006259/173630

[07:24:11.0000] <Ms2ger>
Since the spec doesn't define what it looks like, I doubt it

[07:24:40.0000] <nnyby>
alright, thanks.

[07:26:34.0000] <zcorpan>
nnyby: what's the use case? why do you want this?

[07:28:46.0000] <nnyby>
zcorpan: heh well, it's actually related to your helpful answer you gave me yesterday. I want to disable your oninput limiter when the user clicks the knob of the slider, so it's freely draggable. and only allow your oninput limiter to take effect when the surrounding slider track is clicked.

[07:30:10.0000] <nnyby>
the more general use case is that this is for some astronomy simulations i'm working on - converting from flash to html/javascript. The astronomer really likes the way the original sliders behave. (flash required: https://cse.unl.edu/~astrodev/flashdev2/transitSimulator/transitSimulator017.html)

[07:30:32.0000] <zcorpan>
nnyby: you can compare the new value to the old value, and do nothing if it's near enough

[07:30:57.0000] <nnyby>
zcorpan: ahh yeah. that would be a good workaround. i'll try that. thanks

[07:31:52.0000] <zcorpan>
it might do the wrong thing if you move fast or if there's a lag, though.

[07:41:13.0000] <nnyby>
ah sweet.. i think I got it. That solution kind of worked, but I'm getting better behavior with just tracking the dragging state with mousedown, mouseup, and mousemove.

[07:58:32.0000] <annevk>
zcorpan: https://github.com/whatwg/html/pull/3914 needs rebasing; presumably due to the padding change

[08:04:39.0000] <annevk>
zcorpan: could you document whatwg/fieldset in https://github.com/whatwg/meta/blob/master/GITHUB-TEAMS.md ?

[08:07:45.0000] <zcorpan>
https://github.com/whatwg/meta/pull/105

[08:23:25.0000] <MikeSmith>
FYI I just set up https://arcane-cove-57093.herokuapp.com/multipage/ for demo‚Äôing/testing sample HTML spec output with MDN annotations/links added

[08:25:40.0000] <MikeSmith>
e.g., scroll down in https://arcane-cove-57093.herokuapp.com/multipage/semantics.html#the-link-element

[08:29:08.0000] <dtapuska>
annevk: Re: https://github.com/whatwg/fullscreen/pull/129#issuecomment-415650122  I think that is the inverse of what we want... ie navigationUI would have to default to true then

[08:33:50.0000] <annevk>
dtapuska: you want to show UI by default?

[08:34:13.0000] <annevk>
dtapuska: I misunderstood in that case

[08:35:13.0000] <annevk>
dtapuska: then disableNavigationBar would make sense, but that does not match existing impl afaik

[08:38:15.0000] <dtapuska>
annevk: I'm fine with that.. what do you mean it doesn't match the current impl?

[08:38:54.0000] <dtapuska>
annevk: requestFullscreen() and webkitRequestFullscreen() behave slightly differently in Chrome in this respect

[08:39:41.0000] <dtapuska>
annevk: we'd like to use unprefixing and providing an option as a catalyst to change this

[08:43:43.0000] <annevk>
dtapuska: to start defaulting to UI enabled? So I‚Äôm a little worried about other implementers. Are they all on board or do we need a tri-state as foolip suggested?

[08:44:29.0000] <dtapuska>
annevk: Samsung browser already does this by default for webkitRequestFullscreen()

[08:44:40.0000] <dtapuska>
annevk: and nobody has raised issues in the past regarding this

[08:47:35.0000] <annevk>
dtapuska: Samsung isn‚Äôt typically tested

[08:48:46.0000] <annevk>
Also for a change like this explicit consent is needed

[08:55:02.0000] <dtapuska>
annevk: explicit consent? The navigation bar appears on some Android devices. Are we actually understanding the same thing?. The back/forward/home buttons at the bottom on some Android devices are overlays... and on some it is always taken as space. This is just asking to hide them if it can but defaulting to not hiding them. A user agent should be free to choose its own default. So perhaps this needs to not be boolean

[08:58:37.0000] <annevk>
dtapuska: I think we are roughly understanding the same thing

[09:03:18.0000] <dtapuska>
annevk: do we need to provide a default value for the dictionary? WebIDL allows this and there is no guidance on https://w3ctag.github.io/design-principles/ regarding this

[09:04:02.0000] <annevk>
dtapuska: not for the dictionary argument (that's always {})

[09:04:28.0000] <annevk>
dtapuska: for the dictionary member it's optional, but if you want to make this an enum I wouldn't allow undefined and just make one of the enum values the default

[09:05:35.0000] <annevk>
dtapuska: the main risk I'm seeing with this API is that developers start assuming some default, so "auto" and "omit" seems clearer to me true/false

[09:05:56.0000] <annevk>
dtapuska: that'd also allow for "include" if at some point all UAs agree that requesting some UI is reasonable

[09:06:04.0000] <dtapuska>
annevk: off the top of your head do you have an example API to model after?

[09:07:06.0000] <annevk>
dtapuska: no, but I can help with the IDL

[09:09:15.0000] <annevk>
dtapuska: dictionary RequestFullscreenInit { FullscreenNavigationUI navigationUI = "auto"; }; enum FullscreenNavigationUI { "auto", "omit" };

[09:09:27.0000] <annevk>
dtapuska: if you meant something else, lmk

[09:11:38.0000] <dtapuska>
annevk: ya that looks ok

[09:25:50.0000] <annevk>
dtapuska: feature testing can be done with requestFullScreen({ get navigationUI() { throw 1 } }) fwiw but does require waiting one microtask

[09:26:08.0000] <annevk>
Seems acceptable though

[09:27:03.0000] <dtapuska>
annevk: there is no downside to always requestFullscreen({});  since it is the first optional dictionary

[09:28:13.0000] <annevk>
dtapuska: you still might wanna know whether a particular feature is supported before calling the method though

[09:28:29.0000] <annevk>
(assuming we're adding more over time)

[09:28:52.0000] <annevk>
(this wouldn't quite work if we ever added "include" unfortunately)

[09:30:58.0000] <dtapuska>
annevk: which I wonder if we should put "include" there  from the start.. also "auto", "show", "hide" are more intuitive to me

[09:35:16.0000] <annevk>
dtapuska: yeah, maybe, I guess it depends on what implementers say

[09:35:34.0000] <annevk>
dtapuska: we need two engines interested

[09:35:42.0000] <annevk>
dtapuska: your names sgtm

[09:56:56.0000] <annevk>
wanderview: so given request URL x and service worker response URL y; shouldn't y win?

[09:57:28.0000] <annevk>
wanderview: I guess we settled on x since that's what I'm seeing? I guess I should read the spec again, but prolly Monday

[10:40:13.0000] <annevk>
wanderview: so per Fetch's main fetch it seems it should be y

[10:40:42.0000] <annevk>
It's rather frustrating this isn't implemented that way still, I wonder at what point it'll be too late

[10:45:07.0000] <wanderview>
annevk: it should be Response url y

[10:45:30.0000] <wanderview>
annevk: and that should be implemented in firefox

[10:56:35.0000] <annevk>
wanderview: at least for https://github.com/web-platform-tests/wpt/pull/12680 I get x

[10:57:02.0000] <annevk>
wanderview: I get resources/test not resources/test.txt

[10:58:31.0000] <annevk>
wanderview: gonna take a break now, but would appreciate feedback on that

[10:58:40.0000] <wanderview>
annevk: is your test using skipWaiting() somewhere to control the current window?  or how is your fetch() being made from a controlled client?

[10:59:01.0000] <wanderview>
I think you need to make an iframe that the service worker controls

[10:59:06.0000] <wanderview>
and do the fetch from there

[12:20:13.0000] <annevk>
wanderview: thanks, sorry about that

[12:21:17.0000] <wanderview>
np

[13:37:22.0000] <TimothyGu>
Anyone knows who're the right people to CC for https://github.com/whatwg/html/pull/3960?


2018-08-25
[20:25:19.0000] <annevk>
TimothyGu: bzbarsky, cdumez, dstorey (not sure if these are the correct IDs)

[20:28:46.0000] <TimothyGu>
okay cool

[20:28:51.0000] <TimothyGu>
annevk: thx

[05:38:25.0000] <MikeSmith>
TabAtkins: I‚Äôm looking for specs that use <wpt>. Are there any yet? Couldn‚Äôt find any from a grep through the csswg-drafts tree..

[05:39:16.0000] <MikeSmith>
planning to add <wpt> support to wattsi https://github.com/whatwg/wattsi/issues/87

[07:16:45.0000] <annevk>
MikeSmith: whatwg/quirks

[07:29:46.0000] <TabAtkins>
MikeSmith: And Flexbox, which suggests something wrong with your grep.

[08:06:11.0000] <MikeSmith>
annevk: TabAtkins thanks, will look

[08:45:58.0000] <MikeSmith>
are Bikeshed metadata keys case-sensitive?


2018-08-26
[04:06:15.0000] <MikeSmith>
TabAtkins: for using <wpt> with the HTML spec, we will need some way to override the WPT Path Prefix per-<wpt>-element

[04:07:25.0000] <MikeSmith>
... because some tests for the HTML spec are not in the wpt /html top-level directory, but are instead in /2dcontext, /custom-elements, etc

[04:07:30.0000] <MikeSmith>
https://github.com/web-platform-tests/wpt/tree/master/html#html

[04:07:44.0000] <MikeSmith>
(has the list)

[04:10:43.0000] <MikeSmith>
in https://github.com/tabatkins/bikeshed/issues/1116#issue-267243756 I see mention of ‚ÄúAdd a test-path-prefix metadata, so you can omit the common parts of your test path. Probably *add an attribute to <test> to let you override that*‚Äù, but I guess that attribute doesn‚Äôt exist yet?

[04:12:19.0000] <MikeSmith>
to be clear, I don‚Äôt need support for it to be implemented in Bikeshed yet „Éºinstead all I would need it some decision about what the name of the attribute should be

[04:14:19.0000] <MikeSmith>
oh bah.. nevermind

[04:14:41.0000] <MikeSmith>
I need to read the docs more carefully..

[04:15:28.0000] <MikeSmith>
I had overlooked https://tabatkins.github.io/bikeshed/#element-attrdef-wpt-pathprefix ‚Äúan explicit pathprefix attribute can also provide the path prefix, and will override the metadata if specified‚Äù

[04:15:34.0000] <MikeSmith>
(sorry for the noise)

[06:57:01.0000] <TabAtkins>
üòÄ

[15:09:28.0000] <devsnek>
Domenic: so if the @@asyncIterator method takes all the options

[15:09:35.0000] <devsnek>
why bother having iterator()

[15:10:00.0000] <Domenic>
devsnek: Seems better to not make people call symbol-named methods manually

[15:10:43.0000] <devsnek>
i see the convenience

[15:10:51.0000] <devsnek>
but do we do this pattern elsewhere

[15:11:28.0000] <Domenic>
Well, we have .values() === [Symbol.iterator]() in various places

[15:11:33.0000] <Domenic>
Or .entries()

[15:12:05.0000] <Domenic>
Seems like the same sort of thing, have a string-named method for real people to call, have a symbol-named method for the for-(await-)of syntax to call

[15:12:16.0000] <devsnek>
rip being a real person

[15:19:37.0000] <TabAtkins>
MikeSmith: Oh, missed this question earlier. No, the metadata keys are ASCII case-insensitive. (And generally the values are too, tho it's possible I've missed some conversions.)

[16:16:26.0000] <MikeSmith>
TabAtkins: ah OK, cool „Éºthanks


2018-08-27
[22:46:55.0000] <ondras>
so, https://bugs.chromium.org/p/chromium/issues/detail?id=763298

[22:47:19.0000] <ondras>
does it make sense to adjust the spec so it allows @page { margin: var(--...) } ?

[00:52:08.0000] <annevk>
ondras: prolly, but best tracked at https://github.com/w3c/csswg-drafts/issues/new

[01:02:08.0000] <MikeSmith>
annevk: about the <wpt> element, what‚Äôs the priority feature of it for you?

[01:03:04.0000] <MikeSmith>
for wattsi I already have a patch for the the display/output part of it ready

[01:03:32.0000] <MikeSmith>
but implementing the checks against the wpt repo is a whole nother things

[01:04:03.0000] <annevk>
MikeSmith: I don't really care for it I think

[01:04:09.0000] <ondras>
annevk: thanks, I wanted to make sure that the idea is not a complete nonsense prior to submitting it to github

[01:04:36.0000] <annevk>
MikeSmith: I also think it's somewhat problematic that it creates a strong mutual link between the two repositories

[01:04:45.0000] <annevk>
MikeSmith: someone landing a new HTML test can break the HTML build

[01:05:01.0000] <annevk>
ondras: it seems reasonable, prolly not done to keep things simple

[01:05:11.0000] <ondras>
annevk: ok

[01:08:23.0000] <MikeSmith>
annevk: yeah that‚Äôs how it seems to me too, as far as HTML

[01:09:11.0000] <MikeSmith>
so unless Simon feels different and has a compelling argument, I guess for HTML we don‚Äôt want to do the checkes

[01:10:33.0000] <MikeSmith>
annevk: but you like having the tests-infor display part of it in the spec output?

[01:10:48.0000] <MikeSmith>
or you don‚Äôt like that part either?

[01:11:52.0000] <annevk>
MikeSmith: I dunno, I haven't really used the system so I'm not the best judge

[01:14:21.0000] <MikeSmith>
ok

[01:15:23.0000] <MikeSmith>
I guess we really would want to get agreement before really doing it for HTML

[01:16:28.0000] <MikeSmith>
because ‚Äúreally doing it‚Äù means somebody going in and adding <wpt> elements for several thousand test files, all throughout the source

[01:39:08.0000] <annevk>
MikeSmith: yeah, we should discuss the tradeoffs there, agreed

[01:39:37.0000] <hsivonen>
Did Chrome remove FTP support already?

[01:40:14.0000] <annevk>
hsivonen: for subresources I think, not in general, but I might be mistaken

[01:40:23.0000] <hsivonen>
annevk: ok.

[01:40:27.0000] <MikeSmith>
annevk: ok, will see what Simon has to say

[01:40:55.0000] <hsivonen>
(I made the mistake of looking at our FTP code. It has comments about VMS.)

[01:43:14.0000] <annevk>
hsivonen: I checked, only found a subresources intent (and one to mark ftp insecure in the address bar)

[01:48:57.0000] <hsivonen>
annevk: thanks

[03:45:02.0000] <annevk>
JakeA: do you have a pattern for running a test in a service worker controlled page?

[03:45:24.0000] <annevk>
JakeA: seutp a service worker, create an iframe with a URL that contains the test, then post the results to the parent?

[03:45:28.0000] <annevk>
JakeA: is that the best we have?

[03:49:20.0000] <JakeA>
annevk: The iframe is same origin, so you don't need to post message, but yes

[03:51:07.0000] <JakeA>
annevk: there's also fetch_tests_from_worker if the tests need to run in the service worker https://github.com/web-platform-tests/wpt/blob/master/fetch/range/sw.https.window.js

[03:51:51.0000] <JakeA>
But otherwise, you just operate on iframe.contentWindow.fetch or whatever, if you want to fetch via a service worker

[03:55:07.0000] <annevk>
JakeA: iframe.contentWindow.fetch fetches outside the service worker in Fx at least

[03:55:25.0000] <annevk>
JakeA: and I think Fx might be correct, given that we consistently refer to the "current global object"

[03:55:37.0000] <annevk>
JakeA: and not "relevant global object"

[03:57:04.0000] <JakeA>
annevk: oh, really? Ah, well, a lot of my tests rely on the other thing, so I guess I'll need to fix them (although, I'd have expected it to have worked)

[03:59:42.0000] <annevk>
JakeA: yeah, afaict

[05:31:47.0000] <annevk>
JakeA: maybe something else is wrong though

[05:37:46.0000] <annevk>
wanderview: https://github.com/web-platform-tests/wpt/pull/12680 now uses an <iframe> but I still get the weird result with Firefox returning the request URL

[05:53:05.0000] <wanderview>
annevk: huh... I would expect that test to get "test.txt" in firefox... the response URL without the fragment

[05:54:14.0000] <wanderview>
annevk: firefox has response URL setting, but it still strips response fragments AFAIK

[05:54:21.0000] <wanderview>
since I think that part is still to be spec'd?

[05:54:51.0000] <annevk>
wanderview: yeah, without fragment is what I get in Chrome, as expected

[05:54:57.0000] <annevk>
wanderview: but Fx gives /test

[05:55:08.0000] <wanderview>
I guess it would be useful to know if your service worker script is actually getting the expected fetch events

[05:57:09.0000] <annevk>
wanderview: I think it does since it does say that /test was transferred via the service worker

[05:58:08.0000] <annevk>
wanderview: and Fx does return the text contents of test.txt when asked

[06:01:31.0000] <wanderview>
annevk: sounds like a bug to me... maybe the fragment on the response URL is making it take an untested path

[06:01:54.0000] <wanderview>
if you put it in a glitch I could play around with it, but I don't have firefox build handy

[06:03:59.0000] <wanderview>
let me see what WPT changes were made with that code change

[06:04:53.0000] <annevk>
Same without a fragment

[06:05:02.0000] <annevk>
I don't really know how glitch works

[06:05:23.0000] <annevk>
Anyway, I guess I'll file bugs, since this being different is a problem either way

[06:05:45.0000] <wanderview>
annevk: for reference, this behavior should have been enabled in firefox in https://bugzilla.mozilla.org/show_bug.cgi?id=1222008

[06:07:19.0000] <wanderview>
I'll put it in a glitch... because I'm curious

[06:14:04.0000] <annevk>
wanderview: do you think it's reasonable btw if I extend the fragment-frame.html resource with more tests, put all the results in an array, and then use parent.reject/parent.resolve to report the results

[06:14:24.0000] <annevk>
wanderview: it's not great, but I'm not really sure what else is available

[06:14:31.0000] <annevk>
JakeA: ^^

[06:14:49.0000] <wanderview>
annevk: I find it easier to use an empty frame and `frame.contentWindow.fetch()` from the parent test

[06:14:53.0000] <wanderview>
but its probably a style thing...

[06:15:11.0000] <annevk>
wanderview: I wasn't sure whether that's actually correct

[06:15:23.0000] <wanderview>
we do it all over the place

[06:15:38.0000] <annevk>
wanderview: since in that case the "current global object" would be the global of the parent, not the frame?

[06:15:53.0000] <wanderview>
annevk: the service worker tests use that pattern a lot

[06:16:01.0000] <annevk>
wanderview: sure, but is it correct?

[06:16:13.0000] <annevk>
wanderview: I don't think it is per spec, unless I missed something

[06:16:29.0000] <wanderview>
annevk: I think it is, but I don't have time to look it up right now

[06:17:03.0000] <JakeA>
What do we generally use in terms of fetching? Eg, what does createElement("img") do if you add a src?

[06:17:36.0000] <annevk>
JakeA: that uses the node document's relevant global object prolly

[06:18:44.0000] <annevk>
https://fetch.spec.whatwg.org/#dom-global-fetch invokes new Request() (unclear from which global, I think there's an issue on that)

[06:19:04.0000] <annevk>
new Request() sets client to the current global object, which would always be parent if you do frame.contentWindow.fetch() I think

[06:19:33.0000] <annevk>
So I think the existing pattern is at odds with the spec

[06:20:48.0000] <annevk>
I'm not trying to defend the spec btw; clearly it wasn't tested properly

[06:20:51.0000] <annevk>
isn't*

[06:24:10.0000] <wanderview>
annevk: here is the glitch version: https://sw-fetch-final-response-url.glitch.me/

[06:24:24.0000] <wanderview>
annevk: and yea, it seems like the final URL replacement is not working for some reason

[06:26:42.0000] <annevk>
wanderview: JakeA: I think https://github.com/whatwg/fetch/issues/777 tracks the realm/global/settings object issue

[06:28:47.0000] <annevk>
wanderview: JakeA: note that even if I could use frame.contentWindow.fetch(), that would still result in overall failure upon the first failure

[06:29:05.0000] <annevk>
wanderview: JakeA: or would you then just make new promise_test wrappers for each scenario?

[06:29:26.0000] <wanderview>
annevk: separate promise_test for each case so that browsers can mark them individually expected pass/fail

[06:29:28.0000] <wanderview>
IMO

[06:30:11.0000] <annevk>
wanderview: but you'd setup the SW in the first test?

[06:30:18.0000] <annevk>
I guess that's okay...

[06:30:56.0000] <wanderview>
annevk: I usually setup/teardown the service worker in each test case... but chromium team has been moving new tests to a "setup" case at the beginning that setups up the SW registration

[06:30:59.0000] <wanderview>
to make the tests faster

[06:32:50.0000] <JakeA>
Interesting. I'd been setting up per test, but I guess one is fine. Is setup able to be async yet?

[06:32:56.0000] <JakeA>
I remember that being a problem

[06:34:41.0000] <wanderview>
folks seem to prefer promise_test to make things sequential

[06:34:43.0000] <annevk>
I was thinking just using promise_test and making the title "setup"

[06:35:06.0000] <JakeA>
annevk: I've done that before too. Works well.

[06:35:36.0000] <annevk>
and maybe nest the other promise_tests inside so cleanup remains working well...

[06:41:22.0000] <wanderview>
annevk: would you like me to file the final response URL bug?

[06:47:42.0000] <annevk>
wanderview: sure

[07:00:42.0000] <wanderview>
annevk: I think this is a problem in fetch() ignoring URL changes for internal redirects

[07:04:12.0000] <wanderview>
annevk: yep, that is the problem: https://searchfox.org/mozilla-central/rev/e126996d9b0a3d7653de205898517f4f5b632e7f/dom/fetch/FetchDriver.cpp#1285

[07:04:35.0000] <wanderview>
annevk: filed here: https://bugzilla.mozilla.org/show_bug.cgi?id=1486445

[07:04:40.0000] <wanderview>
should be an easy fix once you have tests

[09:33:39.0000] <annevk>
wanderview: sorry for the slow turnaround, but I added a couple more tests at https://github.com/web-platform-tests/wpt/pull/12680 now


2018-08-28
[20:31:59.0000] <Domenic>
What are peoples thoughts on adding crossorigin="" to all <link>/<script>/<img> in specs? Per https://github.com/tabatkins/bikeshed/pull/1312/files . Maybe it is good to opt-in to actual-SOP-enforced mode?

[20:33:08.0000] <Domenic>
Maybe there should even be a Bikeshed feature to automatically do that to everything in the spec?

[21:48:39.0000] <annevk>
Domenic: we can‚Äôt do it for stuff referenced by CSS, but otherwise seems ok; should be a no-op assumimg we send out the header already

[05:34:00.0000] <gsnedders>
Random thought: I wonder if we should try and limit storage quotas on insecure origins? Given the more data stored locally, the bigger the risk of a MiTM attack reading (and posting elsewhere) the stored data.

[05:35:36.0000] <annevk>
gsnedders: I like it

[05:40:38.0000] <wanderview>
annevk: I think we need to propagate the request fragment... https://twitter.com/annevk/status/1034409399702487040

[05:41:00.0000] <wanderview>
or at least, when firefox implemented using the response URL, we ran into web compat issues when we did not propagate the fragment

[05:41:22.0000] <wanderview>
specifically, there was a site that was using the fragment to select a particular icon out of an svg file and dropping the fragment broke that

[05:57:46.0000] <annevk>
wanderview: but Firefox doesn't seem to be using the response URL at all per my tests

[05:58:32.0000] <wanderview>
annevk: in the bug I filed I linked to a glitch that shows that it does (if the SW provided response was a followed redirect)

[05:59:02.0000] <annevk>
wanderview: but if that's true and that was for a non-navigation, I guess that means we should do that

[05:59:28.0000] <annevk>
wanderview: so in that scenario the response didn't have a fragment right?

[05:59:35.0000] <wanderview>
correct

[05:59:39.0000] <annevk>
hmm, meeting, but I'll dig up the details later I guess

[05:59:45.0000] <wanderview>
well, the response had no fragment because its stripped today

[06:00:00.0000] <wanderview>
I think the SW was trying to do a pass-through

[06:00:15.0000] <wanderview>
but I think if it was pulling from cache API then it probably would not have a fragment

[06:00:47.0000] <wanderview>
install event probably installs the entire SVG with the bare URL

[06:56:23.0000] <annevk>
wanderview: ah yes, https://github.com/whatwg/fetch/pull/696#issuecomment-365373835

[06:56:35.0000] <annevk>
wanderview: so yeah, we should totally copy it there too, I'll update the PR

[07:33:43.0000] <annevk>
wanderview: reading https://github.com/whatwg/fetch/issues/505#issuecomment-365373835 more carefully I think we do have several options here

[07:34:03.0000] <annevk>
wanderview: including not forwarding the fragment from the request URL

[10:04:21.0000] <devsnek>
since when does html spec have unhandledrejection and rejectionhandled events

[10:06:39.0000] <annevk>
devsnek: Fri Oct 2 15:58:22 2015 -0400

[10:06:56.0000] <devsnek>
really?

[10:07:05.0000] <annevk>
yes

[10:07:09.0000] <devsnek>
weird lol

[10:07:15.0000] <annevk>
perhaps a couple minutes later, it takes some time to build

[10:07:25.0000] <TimothyGu>
lol

[10:07:43.0000] <TimothyGu>
any plans to implement in Fx

[10:07:45.0000] <TimothyGu>
?

[10:08:24.0000] <annevk>
I didn't realize we don't have them. I guess maybe because bz complained about report an exception being underdefined and that being hard to fix?

[10:08:34.0000] <TimothyGu>
ah fair

[10:09:10.0000] <annevk>
Anyway, I don't know, but we'd take a patch for sure

[10:09:31.0000] <TimothyGu>
random question, is null in specs defined anywhere?

[10:09:51.0000] <devsnek>
like the js primitive null?

[10:10:14.0000] <TimothyGu>
no like the spec null

[10:10:33.0000] <TimothyGu>
like how strings are defined in infra

[10:10:49.0000] <devsnek>
https://infra.spec.whatwg.org/#nulls

[10:11:15.0000] <TimothyGu>
oh heh

[10:11:18.0000] <TimothyGu>
thanks

[10:11:21.0000] <devsnek>
lel

[12:28:03.0000] <Domenic>
MikeSmith: so I actually mean "certs" where I wrote "scripts"

[12:28:11.0000] <Domenic>
Do they get generated automatically?

[12:36:54.0000] <MikeSmith>
ah

[12:37:45.0000] <MikeSmith>
yeah they get generated by running one of those scripts

[12:38:17.0000] <MikeSmith>
the 01-certbot script

[12:38:41.0000] <MikeSmith>
which just calls ../common/scripts/certbot DOMAINS

[12:39:00.0000] <MikeSmith>
but that 01-certbot script needs to be run manually

[12:39:06.0000] <Domenic>
ah gotcha

[12:39:34.0000] <MikeSmith>
yeah, basically, any time we make config changes to the environment, we have to re-run all those 0* scripts in order


2018-08-29
[00:23:01.0000] <annevk>
I was thinking of applying to Outreachy again via Mozilla for someone to work on WHATWG standards, but I'm having trouble coming up with suitable projects. Anyone here with good ideas?

[01:48:22.0000] <MikeSmith>
annevk: project to look at test coverage for HTML?

[01:54:54.0000] <annevk>
MikeSmith: I think that's too broad for someone new to all things

[02:07:39.0000] <MikeSmith>
annevk: something more approachable would be looking at MDN coverage of HTML

[02:08:10.0000] <MikeSmith>
using the MDN-annotated version of the HTML spec

[02:08:23.0000] <MikeSmith>
https://arcane-cove-57093.herokuapp.com/multipage/

[02:08:56.0000] <MikeSmith>
though there work there would be work on adding content to MDN rather than to the HTML spec

[02:09:40.0000] <MikeSmith>
could look at places in the spec where there are not MDN annotations yet but where it seems like there should be

[02:10:10.0000] <annevk>
That's an interesting URL

[02:10:35.0000] <MikeSmith>
in some cases the fix might just be that there‚Äôs already a corresponding MDN article but the article just doesn‚Äôt yet have a link back to the HTML spec

[02:11:07.0000] <MikeSmith>
that URL is the kind of URL heroku creates if you don‚Äôt give it an explicit name when you create a heroku app

[02:11:50.0000] <MikeSmith>
other ones are like cryptic-headland-94862, frozen-bastion-22010 etc

[02:14:01.0000] <annevk>
This does seem like a useful project, but I'm not sure if I'm the right mentor for it

[02:14:32.0000] <MikeSmith>
sheppy could be

[02:14:39.0000] <MikeSmith>
or Chris Mills

[02:14:57.0000] <MikeSmith>
I guess I could suggest it to them

[02:15:36.0000] <MikeSmith>
but anyway in general I think for onboarding people to spec-related work, helping them start writing/updating MDN content could be a really good way

[02:19:10.0000] <MikeSmith>
in other news, thanks to Yves the CSS checker now has up-to-date support for CSS Align3

[02:19:13.0000] <MikeSmith>
https://github.com/w3c/css-validator/pull/205

[02:20:15.0000] <MikeSmith>
I think the only remaining big gap the CSS checker has as far as conforming to current CSS specs is lack of support for CSS variables

[02:21:15.0000] <annevk>
\o/

[07:10:44.0000] <devsnek>
Domenic: https://github.com/whatwg/streams/pull/950#issuecomment-416961538

[07:11:03.0000] <devsnek>
why would we want to implicitly acquire a reader

[07:26:40.0000] <Domenic>
devsnek: well it just seems like unnecessary ceremony for no gain to make the consumer do it

[07:27:21.0000] <devsnek>
weird api/10

[07:27:24.0000] <TimothyGu>
I feel like it was the right level of layering to do that on the reader level

[07:27:43.0000] <TimothyGu>
Plus, doing that would allow us to add a separate specialized async iterator for BYOB readers

[07:27:57.0000] <devsnek>
I posted a thing for what asyncIterator on readablestream might look like

[07:28:12.0000] <devsnek>
but tim is right we have to add byob with this thing

[07:28:40.0000] <TimothyGu>
devsnek: the thing you posted LGTM

[07:29:12.0000] <TimothyGu>
BTW writing a long comment for whatwg streams in node.js rn

[07:29:42.0000] <devsnek>
hype

[07:29:59.0000] <devsnek>
I'm not even looking at it anymore lol

[07:30:19.0000] <TimothyGu>
I can understand why

[07:56:24.0000] <MikeSmith>
chrisdav_: sheppy FYI https://freenode.logbot.info/whatwg/20180829#c1682181 conversation between annevk and I about Outreachy project idea for work related to MDN coverage for HTML spec

[07:56:29.0000] <MikeSmith>
oofs

[07:56:48.0000] <MikeSmith>
/me meant that for #mdn on mozilla IRC

[08:36:52.0000] <TimothyGu>
devsnek: Domenic: https://github.com/nodejs/node/pull/22352#issuecomment-416998268 if either of you wanna üëç

[08:37:28.0000] <devsnek>
this isn't a comment its a book

[08:37:39.0000] <TimothyGu>
ur right

[08:37:56.0000] <devsnek>
lol popularity charts

[08:37:59.0000] <devsnek>
timothy i love you

[08:41:26.0000] <TimothyGu>
lol

[08:41:32.0000] <TimothyGu>
yes I'll marry you

[11:05:06.0000] <zcorpan>
TabAtkins: the <wpt> default style... can it be changed to be less obtrusive boxes in the page margin?

[11:05:50.0000] <TabAtkins>
Come up with an alternate styling and I'm happy to figure something out.  Worst case, you can disable Bikeshed's CSS for it and supply your own.

[11:06:04.0000] <TabAtkins>
(In general tho, I can't count on a page margin to exist, so that's a bit problematic.)

[11:06:31.0000] <zcorpan>
TabAtkins: I'm thinking about this in the context of HTML

[11:30:17.0000] <Domenic>
In HTML we should probably use style similar to the caniuse/in-progress MDN links?

[11:38:01.0000] <MikeSmith>
so the width of the caniuse.com annotations is 9em/144px

[11:38:26.0000] <MikeSmith>
but some of the WPT filenames are quite long

[11:38:47.0000] <MikeSmith>
especially, some of the *.serviceworker.* ones

[11:43:51.0000] <MikeSmith>
so I think for the margin case rather than using a 3-column grid as it has now, it would need to <dt><dd> list thing

[11:44:56.0000] <MikeSmith>
where the <dt> is the test filename, and the <dd> is (live test) (source) parts, indented

[12:19:15.0000] <Domenic>
It may also be worth trimming extensions

[12:19:29.0000] <Domenic>
Although I guess then you could have multiple of the same basename


2018-08-30
[06:31:55.0000] <MikeSmith>
zcorpan: Domenic TabAtkins https://gist.githubusercontent.com/sideshowbarker/8284404/raw/c9157d8f597c3b91f7df23e07197c9627e7c4c66/wpt-anno.png

[06:32:13.0000] <MikeSmith>
<wpt> output displayed as annotation in the margin

[06:32:31.0000] <MikeSmith>
like the canisue annotations

[06:32:40.0000] <MikeSmith>
styles are https://github.com/whatwg/wattsi/blob/014ab4dc3bb6ffc53d8e69887fd27cae7db354be/src/wattsi.pas#L2068

[06:33:19.0000] <MikeSmith>
the test filenames have text-overflow: ellipsis, and a title attribute with the testname

[06:34:13.0000] <MikeSmith>
so if the full filename is truncated/elided in the output, you can hover the text to see the title with the full filename

[06:44:54.0000] <zcorpan>
MikeSmith: that looks good

[06:48:23.0000] <MikeSmith>
zcorpan: ok cool

[07:26:07.0000] <Domenic>
MikeSmith: +1, that looks great and fits well with existing margin stuff we have

[07:26:52.0000] <MikeSmith>
good good

[07:26:54.0000] <MikeSmith>
thanks

[07:29:01.0000] <fserb>
annevk, Domenic, you around?

[07:29:11.0000] <Domenic>
/me waves

[07:29:11.0000] <fserb>
maybe we could try a quick chat around https://github.com/whatwg/html/pull/3931 ?

[07:30:27.0000] <fserb>
I feel like we could split the conversation of making the baselines more standard with the current PR.

[07:30:31.0000] <fserb>
To answer anne's question on how we can solve this in the future.

[07:30:55.0000] <fserb>
I feel like we'd have to: 1. come up with some definition of what a hanging/ideo baseline look like when the font file doesn't specify it.

[07:31:13.0000] <fserb>
2. that definition needs to either point to or match a CSS equivalent definition

[07:31:27.0000] <fserb>
I've tried doing this in the past, but it's very complicated topic.

[07:32:32.0000] <fserb>
so basically the current PR could just be self-referential as it is now, and once we fix the bigger issue of spec'ing the baselines, refer to it as: "if the UA returns a hanging baseline, it must follow X"

[07:33:00.0000] <fserb>
one option to address this in the future is have a fallback system:

[07:33:12.0000] <fserb>
1. hanging baseline is the hanging baseline that is provided by the font file

[07:33:28.0000] <fserb>
2. if that is not available and a hanging baseline is needed, run the following algorithm:

[07:34:53.0000] <fserb>
2a. if the current font contains one of the following characters ...(is IRC unicode friendly?) ‡§ï.... then the hanging baseline is the smallest ascent of those characters.

[07:35:29.0000] <fserb>
*ascent = ascend

[07:35:46.0000] <fserb>
2b. the hanging baseline is 80% of the em ascend.

[07:36:57.0000] <fserb>
but again, something like that would make more sense if CSS is also agreeing with it. (They have tried in the past, afaik, to come up with definitions for those baselines but failed to agree)

[08:57:37.0000] <devsnek>
so for @@asyncIterator on ReadableStream

[08:58:13.0000] <devsnek>
that last comment in the PR seems to suggest that BYOB streams will also be using DefaultReader

[08:58:23.0000] <devsnek>
but then why does BYOBReader exist

[08:58:39.0000] <TimothyGu>
iirc there's no such thing as a "BYOB stream"

[08:59:16.0000] <devsnek>
there are streams with mode: byob which use ReadableStreamBYOBReader

[08:59:25.0000] <TimothyGu>
ah

[08:59:34.0000] <devsnek>
i think

[08:59:43.0000] <devsnek>
oh no mode is on getReader

[09:00:29.0000] <devsnek>
ok yeah that makes @@asyncIterator even more annoying

[09:12:45.0000] <Domenic>
I can't think of any way to use @@asyncIterator for BYOB-reading

[09:12:52.0000] <Domenic>
It just doesn't really make sense

[09:13:12.0000] <Domenic>
It's intentional that byte streams can be read either in BYOB mode or default mode

[09:13:30.0000] <Domenic>
I.e. efficient-but-hard-to-code, vs. not-as-efficient easymode

[09:13:41.0000] <Domenic>
Saying that for-await-of always does easymode seems fine

[09:13:59.0000] <Domenic>
If we come up with some magical way to make for-await-of work with BYOB mode that's what we can use .iterator() for.

[09:14:23.0000] <Domenic>
Let me do a more thorough review now; I've been leaning on ricea and TimothyGu too much.

[09:21:35.0000] <annevk>
fserb: hey!

[09:21:40.0000] <annevk>
/me reads

[09:23:00.0000] <annevk>
fserb: that makes sense, but it doesn't resolve textBaseline having seemingly non-baseline values, right?

[09:23:14.0000] <annevk>
fserb: and we'd probably cannot get rid of those?

[09:23:43.0000] <annevk>
fserb: I guess if everyone is okay with that seeming mismatch I'm fine; I wish we got a little more input from other implementers at times

[09:24:04.0000] <annevk>
(other implementers that also have detailed knowledge about these issues, that is)

[09:25:10.0000] <annevk>
fserb: also, I'm very much in favor of trying to find shared primitives between CSS, <canvas>, and SVG

[09:25:10.0000] <annevk>
fserb: I kinda wish we also had one definition for paths, gradients, etc.

[09:33:12.0000] <fserb>
yeah, I agree.

[09:33:28.0000] <fserb>
what do you mean by textBaseline having non-baseline values?

[09:34:45.0000] <annevk>
fserb: top/middle/bottom are based on the em-stuff you said were not baselines

[09:36:42.0000] <fserb>
well, but that's fine.

[09:36:58.0000] <fserb>
ok, let me recap that.

[09:37:12.0000] <fserb>
emAscend emDescent are not baseline, they are just font measurements.

[09:37:32.0000] <fserb>
textBaseline defined top/middle/bottom based on them, which is totally ok.

[09:38:08.0000] <fserb>
There's no explicit need for "getBaseline()" to return top/middle/bottom because they are not usually special properties of a font, and are ALWAYS defined in terms of the em.

[09:38:24.0000] <fserb>
(i.e., one can always calculate what top/middle/bottom is given the info on TextMetric)

[09:39:00.0000] <fserb>
the reason for getBaselines() to exist, is because there are font SPECIFIC baselines, that can't be constructed out of the other metrics.

[09:39:46.0000] <fserb>
which is the case of hanging/ideographic baselines.

[09:39:52.0000] <annevk>
fserb: if it's about fonts, shouldn't it be some other API, since multiple fonts could be used here?

[09:40:54.0000] <fserb>
for the baselines, you mean? Well, in theory yeah. In practice, the fallback font system of the browsers (that defines which font to use for each glyph) behaves like it's a single font.

[09:41:17.0000] <fserb>
so it is useful for the UA to say "if I'm rendering those two characters, in the font that you asked, I'm actually using different fonts but deciding on a common baseline for both of them"

[09:41:39.0000] <fserb>
so yeah, it could be thought as a property of the font itself.

[09:41:52.0000] <fserb>
but in practice, there's value in asking "for this sequence of glyphs, what's the baseline that you used"

[09:42:07.0000] <fserb>
bc the UA can be smart about it and return a meaningful value for multiple fonts together

[09:42:33.0000] <annevk>
ok

[09:42:49.0000] <annevk>
and is the only reason we're turning this into a method because they are optional?

[09:43:05.0000] <annevk>
it seems we could also make them return -1 / null / undefined or some such

[09:43:24.0000] <annevk>
oh wait, I guess that was to match the API style

[09:43:25.0000] <annevk>
ok

[09:44:28.0000] <annevk>
fserb: I'll push some style nits to the PR

[09:44:43.0000] <fserb>
awesome! :)

[09:44:57.0000] <annevk>
fserb: thanks for taking the time to discuss this, I feel a bit more reassured

[09:45:35.0000] <fserb>
no stress. If there are more questions, I'd gladly answer :)

[09:55:29.0000] <devsnek>
Domenic: you gotta tell people before you're gonna push :(

[09:55:34.0000] <devsnek>
merge conflicts aaa

[09:55:38.0000] <Domenic>
I did!

[09:55:54.0000] <Domenic>
" I'll upload a patch fixing all of these as I go, as penance for the long turnaround times so far."

[09:56:14.0000] <devsnek>
oh

[09:56:17.0000] <devsnek>
my bad :P

[09:56:34.0000] <devsnek>
lol did you just fix all of them

[09:56:47.0000] <Domenic>
Yeah the little ones

[09:56:51.0000] <Domenic>
Writing up a comment on what the big things left are

[09:57:13.0000] <annevk>
Fixing nits is Domenic and I's day job now

[09:58:18.0000] <devsnek>
Domenic: the whole point of the AsyncIteratorPrototype inheritance is the @@asyncIterator return this property lol

[09:58:37.0000] <Domenic>
devsnek: ahhh right OK, nice

[09:58:46.0000] <devsnek>
thats actually the only thing it provides

[10:00:50.0000] <devsnek>
Domenic: also was gonna comment about the ObjectCreate thing, we don't do ! anywhere else when we call it

[10:01:23.0000] <Domenic>
Oh hrm

[10:01:31.0000] <Domenic>
We should..

[10:01:35.0000] <devsnek>
262 doesn't prefix it with anything either

[10:01:40.0000] <devsnek>
i don't think there's any situation where it can fail

[10:02:26.0000] <devsnek>
(and while i disagree with the idea that doesn't fail means no prefix, i think consistency wins here)

[10:02:31.0000] <Domenic>
Yeah, I prefer prefixing things like that, and thought we'd done that so far in streams

[10:22:24.0000] <Domenic>
TabAtkins: can you help me figure out why https://github.com/whatwg/streams/blob/5d9498e7526d2f50618432e7aada8582d08745c0/index.bs#L521 works but if I add `attribute` to https://github.com/whatwg/streams/blob/5d9498e7526d2f50618432e7aada8582d08745c0/index.bs#L540 it fails?

[10:27:44.0000] <Domenic>
I guess it has to do with `fillAttributeInfoSpans` in Bikeshed but I can't see what that's useful for

[10:29:07.0000] <annevk>
FYI: I won't be working tomorrow

[10:29:10.0000] <Domenic>
I'll file a bug I guess

[10:29:42.0000] <annevk>
And I guess next week things might be a bit slower than usual as well, but anything urgent can be done

[11:13:31.0000] <TabAtkins>
Domenic: As you probably saw in GH email just now, I opened up https://github.com/tabatkins/bikeshed/issues/1346 to figure out what exactly raw-JS needs for Bikeshed dfn types. Trying to shoehorn raw JS into the IDL types is not going to work (and it's already causing problems even in the limited sense you're currently using it, with two specs both plausibly claiming to be the definition of Stream).

[11:19:12.0000] <Domenic>
TabAtkins: thanks, that'll be good. I think the attribute vs method thing is more limited though...

[11:20:59.0000] <Domenic>
TabAtkins in particular why does method work but attribute fail.

[11:21:11.0000] <Domenic>
TabAtkins in particular why does method work but attribute fail.

[11:30:58.0000] <TabAtkins>
The attribute fails because I'm looking for information that the IDL block would contain. I don't have the same feature for methods.

[11:31:22.0000] <TabAtkins>
So it happens that a JS class and its methods look sufficiently close to IDL interfaces and methods that you can use those types and be mostly okay.

[11:31:35.0000] <TabAtkins>
Until you get to Symbol-named properties, etc., as you found. ^_^

[11:31:49.0000] <Domenic>
Hmm what feature is this for IDL attributes?

[11:39:10.0000] <TabAtkins>
Try it and see. ^_^ It fills in information about the attribute's type, its default value, and whether its' readonly or nullable.

[11:39:19.0000] <TabAtkins>
Does the same for dict-member definitions.

[11:39:52.0000] <Domenic>
Yeah I tried to find a spec that uses it but couldn't

[11:40:13.0000] <TabAtkins>
https://drafts.csswg.org/css-font-loading/#dom-fontface-status

[11:40:26.0000] <TabAtkins>
That's probably because it's, uh, not documented.

[11:40:31.0000] <TabAtkins>
Which I should fix.


2018-08-31
[06:00:58.0000] <gsnedders>
http://web-confluence.appspot.com/#!/catalog?releases=%5B%22Safari_11.1_OSX_10.13.4%22,%22Edge_17.17134_Windows_10.0%22,%22Firefox_61.0_Windows_10.0%22,%22Chrome_68.0.3440.75_Windows_10.0%22%5D&q=%22in:saf11.1%20in:chr68%20notin:edg17%20notin:fir61%22 ‚Äî I wonder if any of that is pre-fork WebKit legacy that is actually de-facto needed on mobile :(

[08:41:25.0000] <MikeSmith>
gsnedders: hmm yeah

[08:42:26.0000] <MikeSmith>
incidentally, I didn‚Äôt know it was possible to do queries like that on web-confluence.appspot. That‚Äôs pretty great

[08:44:36.0000] <jgraham>
gsnedders: Ask miketylr perhaps

[08:46:17.0000] <jgraham>
+a

[08:47:06.0000] <gsnedders>
I think some of it is just things being other places in the prototype chain, and some new things that the two support, but idk what all of it is

[09:13:35.0000] <MikeSmith>
as far as things being other places in the prototype chain, Blink/Chrome seems at least as guilty of that as anybody

[09:14:41.0000] <MikeSmith>
so as far as what web-confluence.appspot is checking, I wonder how many cases there are where Gecko and Edge have it in the right place but Blink and WebKit don‚Äôt

[09:15:29.0000] <MikeSmith>
would hope none, but I assume that thing is checking conformance to the actual spec requirements

[09:15:41.0000] <MikeSmith>
*because I assume

[09:22:57.0000] <gsnedders>
it isn't, it literally just enumerates what's exposed

[09:23:04.0000] <gsnedders>
it has no knowledge of what's in any spec

[09:25:51.0000] <MikeSmith>
ok

[09:26:53.0000] <MikeSmith>
ah yeah looking at it now that makes sense of course

