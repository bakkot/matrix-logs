2015-12-01
[21:21:51.0000] <zcorpan>
Domenic: https://wptserve.readthedocs.org/en/latest/pipes.html#sub

[21:23:10.0000] <zcorpan>
Domenic: simplest is to use .sub.html or .sub.js

[21:24:46.0000] <zcorpan>
<iframe src="http://{{domains[www1]}}:{{ports[http][0]}}/etc"></iframe>

[21:25:54.0000] <zcorpan>
Domenic: also http://testthewebforward.org/docs/

[21:27:50.0000] <zcorpan>
http://testthewebforward.org/docs/test-format-guidelines.html#tests-involving-multiple-origins in particular

[21:28:53.0000] <zcorpan>
Domenic: also please avoid using any external servers like navigating to google.com

[01:28:00.0000] <Ms2ger>
Calling the DOM Living Standard "dom-ls" is... confusing :)

[02:15:34.0000] <jgraham>
Ms2ger: Wait, what? Who's doing that?

[02:15:50.0000] <Ms2ger>
CSS

[02:18:23.0000] <jgraham>
Oh, well then

[02:23:48.0000] <MikeSmit1>
zcorpan: https://github.com/validator/validator/issues/184#issuecomment-160922241

[02:26:01.0000] <MikeSmit1>
about the message that's reported for stray p end tags caused by a p element with an implied end tag getting closed

[02:27:08.0000] <MikeSmit1>
I agree the message reported for that is suboptimal but not sure it's worth adding more complication to the parser error-reporting behavior to deal with it

[02:27:16.0000] <zcorpan>
MikeSmit1: this has been discussed before. iirc, my proposal was to keep track of implicitly closed tags, and give an info or warning about the last start tag with the same name when finding a stray end tag

[02:27:27.0000] <zcorpan>
and fix the message to not be confusing

[02:27:41.0000] <MikeSmit1>
ok yeah I vaguely recall this now

[02:28:57.0000] <zcorpan>
or maybe remember the thing that closed the p, i dunno

[02:30:05.0000] <MikeSmith>
well regardless I'm not gonna try to mess with it much for now but instead will wait to hsivonen lands the other lower-level parser change I think he's been meaning to make

[02:31:09.0000] <zcorpan>
<p><ul></ul></p>: Misnested tags! No open p element found. The last <p> start tag was here, it was closed by <ul> here

[02:31:28.0000] <MikeSmith>
yeah

[02:32:20.0000] <zcorpan>
maybe that sort of message can be useful in general: <div></div></div>

[02:36:27.0000] <MikeSmith>
hmm

[02:36:35.0000] <MikeSmith>
yeah, good point

[07:37:14.0000] <zcorpan>
suddenly, consensus

[07:38:17.0000] <jgraham>
?

[10:51:44.0000] <ato>
Remind me again where I can find the codes available for use in ReSpec references?

[11:07:59.0000] <miketaylr>
ato: http://www.specref.org/?

[11:08:09.0000] <ato>
miketaylr: Merci!

[11:08:13.0000] <miketaylr>
de nada


2015-12-02
[02:32:25.0000] <benjamingr_>
Hey, I'm noticing a browser (Chrome) rendering the contents of a <style> tag (inlined for saving requests) to the page. Is there anything that might cause a browser to do this?

[02:34:17.0000] <yoav>
broken HTML, so the <style> is not parsed as one? Do you see something different for the same HTML in say Firefox?

[02:38:06.0000] <benjamingr_>
It's just a little `<style>`, not 30 lines long, - it doesn't happen in firefox. I'll run the validator again just in case.

[02:39:30.0000] <yoav>
benjamingr_: can you post an example?

[02:39:46.0000] <benjamingr_>
It's at https://tipranks.com  , it looks like this when it's messed up:

[02:39:53.0000] <benjamingr_>
http://i.stack.imgur.com/PSKSi.png

[02:54:05.0000] <Ms2ger>
benjamingr_, does it always happen?

[03:03:07.0000] <benjamingr_>
No, only once in a while.

[03:40:33.0000] <bblfish>
anyone from the streams api here? https://streams.spec.whatwg.org/#model

[03:40:45.0000] <bblfish>
How does one know what type of Chunk one gets back?

[03:42:01.0000] <bblfish>
does one have to write code with a big if (chunk.value type ...) else if (chunk.value hastype ... ) else if (.... )

[04:40:43.0000] <jochen__>
is it currently possible to mark something as exposed on service workers in html?

[04:40:57.0000] <philipj>
where's annevk today?

[04:40:58.0000] <jochen__>
as in Exposed=(Window,Worker,ServiceWorker)

[04:41:02.0000] <jochen__>
hiding :)

[04:41:28.0000] <philipj>
if the new reality is that Worker doesn't mean *Worker, then perhaps that shorthand should be purged from specs so it's always spelled out

[04:44:51.0000] <philipj>
jochen__: it looks like in Blink, Worker exands to CompositorWorker+DedicatedWorker+SharedWorker+ServiceWorker, in v8_utilities.py. That doesn't seem right?

[04:45:35.0000] <jochen__>
let me check

[04:47:22.0000] <jochen__>
seems to be the case

[04:47:58.0000] <philipj>
jochen__: let me see if the generated code is affected...

[04:48:15.0000] <jochen__>
at least the tests still pass

[04:48:27.0000] <jochen__>
and they explicitly run on service workers as well...

[04:49:38.0000] <philipj>
jochen__: and the generated code doesn't change

[04:49:58.0000] <philipj>
in which case everything seems to be sane, just a redundant bit in Blink's IDL


2015-12-03
[10:04:36.0000] <Domenic>
where's botie... where's zcorpan... everyone's missing!

[10:05:47.0000] <miketaylr>
dang, i had a question for zcorpan

[10:05:58.0000] <miketaylr>
guess i can email like a peasant

[10:14:01.0000] <MikeSmith>
Domenic: sorry I had restarted my server but forget to restart botie

[10:14:30.0000] <MikeSmith>
miketaylr: feel free to use botie if you hate email as much as I do :)

[10:15:08.0000] <MikeSmith>
botie, inform zcorpan you're very popular when you're away

[10:15:08.0000] <botie>
will do

[10:15:34.0000] <miketaylr>
MikeSmith: ooo nice

[12:25:24.0000] <botie>
zcorpan, at 2015-12-03 18:15 UTC, MikeSmith said: you're very popular when you're away

[14:28:26.0000] <Domenic>
hehehe https://github.com/servo/servo/pull/8808


2015-12-04
[00:37:01.0000] <Ms2ger>
https://drafts.csswg.org/indexes/

[00:50:01.0000] <Ms2ger>
What's about:unicorn?

[00:58:14.0000] <jgraham>
A joke in the fetch spec

[00:59:10.0000] <jgraham>
https://fetch.spec.whatwg.org/#concept-basic-fetch

[01:02:20.0000] <Ms2ger>
I found that, but why

[02:06:13.0000] <jgraham>
Same reason Excel used to contain a flight simulator I guess

[05:23:31.0000] <bblfish>
I just committed 1200 lines of code to wrap the JS Fetch and Stream API for Scala-JS. https://github.com/scala-js/scala-js-dom/pull/177/files

[05:23:31.0000] <bblfish>
It's an interesting example of how Scala.js essentially just makes the types in the JS APIs explicit. It even allows one to make functions and classes that contain generics explicit.

[05:24:33.0000] <caitp>
you did it

[05:24:36.0000] <caitp>
good job

[05:39:42.0000] <bblfish>
@caitp in a way the above commit just shows that JS is a type language that does not quite know it is :-)

[05:39:57.0000] <bblfish>
s/type/typed/

[05:47:16.0000] <caitp>
oh it knows

[05:47:55.0000] <caitp>
it's still trying to find its place as a typed language

[05:48:18.0000] <caitp>
while also still trying to faciliate the dynamic programming styles at the same time

[05:48:30.0000] <caitp>
tricky balance

[05:49:51.0000] <bblfish>
Actually if one reads up on Homotopy Type Theory ( http://homotopytypetheory.org/ ) then types are a mathematical necessity.

[05:50:52.0000] <bblfish>
mathematical/logical

[05:51:24.0000] <caitp>
but, on the other hand, it's also necessary to not break the web, and to not break peoples expectations

[05:51:42.0000] <caitp>
still, work is being done on that

[05:53:09.0000] <caitp>
pragmatism and idealism have at it regularly

[05:57:07.0000] <bblfish>
There is an american philosopher who is showing how to merge analytic and pragmatic thinking http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-444/

[05:57:19.0000] <bblfish>
Robert Brandom

[05:57:57.0000] <bblfish>
In fact in his book on meaning he shows how one can build more complex/experssive languages out of simpler ones. That's perhaps quite relevant here.

[05:58:42.0000] <bblfish>
"Making It Explicit: Reasoning, Representing, and Discursive Commitment"

[05:59:08.0000] <nox>
JS is a typed language.

[05:59:08.0000] <nox>
With only one type.

[05:59:54.0000] <caitp>
that's not usually what people mean when they talk about making JS a typed language, though =)

[06:00:07.0000] <nox>
caitp: Sure but then it's not JS.

[06:01:03.0000] <bblfish>
nox, actually its an implcitly typed language. Scala-JS just makes the implicit types explicit, and helps with compiler support in veryfing the types

[06:01:11.0000] <nox>
bblfish: No it's not.

[06:01:18.0000] <caitp>
under the hood, you've got maps/hidden classes, and you have values that aren't objects at all (small integers, etc), and those underlying types play a big role in how the compiler works --- but the runtime also cares about these to a degree, and there are efforts to make those types more explicit in the language itself

[06:01:48.0000] <nox>
If you write down the judgment rules etc of JS, you see there is only one type.

[06:02:04.0000] <bblfish>
I agree nox, but pragmatically it is typed

[06:02:12.0000] <bblfish>
just not explicity

[06:02:21.0000] <nox>
No.

[06:02:37.0000] <nox>
It's like saying Ok(_) and Err(_) in Rust's Result enum are two different types.

[06:03:07.0000] <nox>
The only type in JS is a huge enum with one variant for float, one variant for string, one variant for object, etc.

[06:03:18.0000] <caitp>
a type isn't strictly how something is represented in memory

[06:03:25.0000] <nox>
"A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute." There is no syntactic method in JS that automatically checks the absence of certain erroneous behaviours.

[06:03:33.0000] <nox>
I didn't mention anything about memory.

[06:03:54.0000] <caitp>
you seem to be arguing that in JS, everything is one type, but with different values/properties

[06:03:59.0000] <bblfish>
nox I am 100% with you.

[06:04:16.0000] <caitp>
which isn't really related to what a type is

[06:04:22.0000] <bblfish>
I am arguing that in fact you know that well defined functions return certain types of objects

[06:04:38.0000] <nox>
bblfish: All functions take all kind of values.

[06:04:52.0000] <bblfish>
when code is well written such as the Fetch or Streams API you can then make the types explicit

[06:04:53.0000] <jgraham>
ink nox's point of view makes sense

[06:05:02.0000] <nox>
They may crash with an exception, but there is still a judgment rule that means that you can evaluate the code.

[06:05:10.0000] <bblfish>
Here I made the types of the Streams API explicit https://github.com/scala-js/scala-js-dom/blob/master/src/main/scala/org/scalajs/dom/experimental/Stream.scala

[06:05:29.0000] <nox>
No matter how broken the code you write is, there is still a possible evaluation, no syntactic method will reject your code.

[06:05:35.0000] <caitp>
sure, but if you had static rules about what types you could pass to functions, well

[06:05:39.0000] <caitp>
that wouldn't work very well on the web

[06:05:50.0000] <nox>
So? That still doesn't mean JS has multiple types.

[06:05:56.0000] <bblfish>
and furthermore I discovered that Streams are in fact generic classes :-)

[06:06:10.0000] <caitp>
it doesn't have static typing

[06:06:24.0000] <nox>
Every dynamically-typed language is statically-typed.

[06:06:28.0000] <nox>
With a single static type.

[06:06:37.0000] <nox>
"Dynamically-typed" is a misnomer.

[06:06:45.0000] <bblfish>
caitp: it does not have explicit static typing, but pragmatically you could not write code if you were not able to expect certain datastructures

[06:07:17.0000] <nox>
https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/

[06:07:38.0000] <caitp>
when you only look at the static behaviour, you're missing the point

[06:07:55.0000] <caitp>
you can't make static guarantees about something that pulls in new code dynamically

[06:08:05.0000] <nox>
I'm not missing any point, this isn't a criticism of "dynamic" types.

[06:08:16.0000] <caitp>
and you sure as heck can't wait for all the code on every webserver in the universe to be preprocessed and compiled before running anything :p

[06:08:21.0000] <nox>
Both have their uses, but we shouldn't call the things that are in JS "types", IMO.

[06:08:36.0000] <nox>
caitp: I come from Erlang, I have nothing against unityped languages.

[06:08:45.0000] <caitp>
right, but that's not the point

[06:08:57.0000] <caitp>
whether it's static or runtime, types are about guarantees

[06:08:58.0000] <jgraham>
standard js barely even has runtime types

[06:09:24.0000] <nox>
And there are no guarantees in JS.

[06:09:30.0000] <caitp>
there absolutely are

[06:09:32.0000] <nox>
Types are about rejecting 3.length().

[06:09:35.0000] <caitp>
and more all the time

[06:09:42.0000] <bblfish>
Well I program a lot in RDF and that is an interesting example of a datastructure that is fluid yet typed.

[06:09:57.0000] <caitp>
well 3.length() is a syntax error ,but

[06:10:16.0000] <caitp>
there's no intrinsic reason why you can't have 3..length()

[06:10:18.0000] <caitp>
if the type permits it

[06:10:20.0000] <caitp>
which it might!

[06:10:27.0000] <caitp>
but it probably won't be the same length() as something which requires a particular internal slot

[06:10:34.0000] <nox>
Of course the type permits it, because there is only one in JS.

[06:10:57.0000] <nox>
3 and "foo" are of the same enumeration type, with different constructors.

[06:11:12.0000] <caitp>
you can easily have a 3..length() which is specific to floats and smis

[06:11:16.0000] <caitp>
there's nothing forbidding this

[06:11:26.0000] <caitp>
and it could even be encoded in the grammar of the language at some point

[06:11:45.0000] <nox>
You are the one missing my point. Type theory has a massive literature, and never in it you will find types framed as you do in JavaScript.

[06:12:15.0000] <caitp>
the literature is all about guarantees, and guarantees are certainly possible in dynamic languages

[06:12:20.0000] <caitp>
you just can't necessarily have static guarantees

[06:12:35.0000] <nox>
Saying that JS has multiple types is a pet peeve of mine, like "isomorphic" JS,

[06:12:36.0000] <nox>
or Julia claiming it has dependent types.

[06:12:43.0000] <caitp>
but that was a non-starter for scripting from the beginning

[06:12:56.0000] <bblfish>
flexible typing is pretty cool too. RDF is more along those lines: you can merge data structures from around the web, and infer types on the fly. And since every thing has a global identifier URI you avoid the duck-typing problem, that JS still has.

[06:14:18.0000] <caitp>
`for (x of { [Symbol.iterator]() { return null; } });` <<< you have a guarantee which forbids this --- it's a runtime guarantee, but there is still a guarantee

[06:14:18.0000] <nox>
Anyway, the link has posted pretty much explains my stance, I have nothing more to say that Harper didn't already write in it. :)

[06:14:22.0000] <nox>
I posted*

[06:14:29.0000] <caitp>
worrying too much about whether it's static or dynamic is a waste of effort

[06:14:39.0000] <nox>
Type system are a syntactic effort.

[06:14:56.0000] <bblfish>
Ideally you'd have a language that could have such just in time typing... that's what would be needed for a real web language ( RDF is just a datastructure not a programming language )

[06:14:57.0000] <nox>
What is a huge waste of effort is conflating different things under the same monicker, but YMMV.

[06:15:10.0000] <caitp>
the syntactic effort can also arm the runtime and compiler with more information for aggressively making assertions and guarantees

[06:15:32.0000] <caitp>
which leads to the same thing (with not quite as elegant machine code)

[06:15:55.0000] <caitp>
arguably safer machine code, but whatever

[06:16:42.0000] <nox>
Having a syntactic method refusing to attribute any meaning to a piece of invalid code does not lead to the same thing as a unityped language where any function can take values of any shapes.

[06:17:10.0000] <caitp>
they're different things, but they lead to the same thing

[06:17:17.0000] <bblfish>
I agree that there are different notions of types at play. But still, the fact that I can translate Fetch API into Scala.JS typed Fetch.API does say something interesting. :-)

[06:17:32.0000] <nox>
bblfish: Sure.

[06:17:53.0000] <nox>
caitp: To me, that isn't true, cf. above link.

[06:19:08.0000] <caitp>
that's why I think you're missing the point, it doesn't really matter if the guarantees are static or not

[06:19:24.0000] <caitp>
if X will never work, will you still write X?

[06:19:35.0000] <caitp>
you make your own static guarantee

[06:19:42.0000] <caitp>
and if someone sneaks X into your program dynamically, it will fail elegantly

[06:19:47.0000] <nox>
How do you know X will never work?

[06:19:51.0000] <nox>
"Elegantly", hah.

[06:20:08.0000] <nox>
Anyway, I'm out of this conversation since you didn't even read the link.

[06:20:23.0000] <bblfish>
btw on duck typing I once wrote this https://blogs.oracle.com/bblfish/entry/duck_typing_done_right ( image is hidden because of http/https move )

[06:20:23.0000] <bblfish>
Have a look at "Dynamic Languages are Static Languages" https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/

[06:20:37.0000] <bblfish>
s/Have/Having/

[06:20:40.0000] <caitp>
you know X will never work, because you enforce that it never works =)

[06:20:55.0000] <nox>
bblfish: Will read yours.

[06:21:13.0000] <nox>
bblfish: The second is the one I linked. :)

[06:22:43.0000] <bblfish>
nox: you'll find the work by Brandom interesting - if you have a bit of an analytical philosophical bent.

[06:23:00.0000] <nox>
bblfish: Where is that?

[06:23:35.0000] <nox>
bblfish: RDF always kind of interested me, even though I never did anything with it.

[06:24:27.0000] <bblfish>
http://www.pitt.edu/~rbrandom/ his books: http://www.pitt.edu/~rbrandom/publist.html But perhaps most of all "Making it explicit" .

[06:24:53.0000] <nox>
That's one long beard.

[06:25:00.0000] <bblfish>
Or more recently " Between Saying and Doing: Towards an Analytic Pragmatism"

[06:25:14.0000] <nox>
I'm sure he strokes it when he thinks about types.

[06:25:24.0000] <bblfish>
there he even uses a bit of category theory - though I read that before I really knew about those

[06:25:58.0000] <nox>
bblfish: Will try to find the one about explicitness.

[06:26:37.0000] <bblfish>
He's a student of David Lewis https://philosophy.princeton.edu/about/past-faculty/david-k-lewis who also had a long beard.

[06:28:18.0000] <nox>
bblfish: Ah ah.

[08:48:14.0000] <smaug____>
there is convention that interfaces should start with uppercase letter

[08:48:31.0000] <smaug____>
is that documented somewhere

[08:49:16.0000] <Ms2ger>
I doubt it

[11:32:39.0000] <roc>
any research whose title contains the word "Towards" is very likely to be bogus

[11:37:00.0000] <tantek>
roc, how about "Toward", that too?

[11:37:09.0000] <roc>
sure

[11:37:44.0000] <tantek>
ok I'll offer a couple of posts for you to shoot down http://tantek.com/2015/068/b1/security-towards-minimum-viable-web-platform and http://tantek.com/2013/338/b1/people-focused-mobile-communication-experience ;)

[11:37:53.0000] <roc>
actually I should say "is even more likely to be bogus than average"

[11:38:41.0000] <roc>
tantek: ok, I stand by my claim :-)

[11:39:32.0000] <tantek>
I look forward to your thoughtful critiques :)

[11:42:06.0000] <roc>
I think the people-focused thing was a pretty good idea. "Towards" didn't belong in the title :-)

[11:42:42.0000] <tantek>
roc - indeed. it makes me cringe now admittedly

[11:43:28.0000] <miketaylr>
Toward essays considered harmful?

[11:44:06.0000] <roc>
"Toward(s)" is a weasel word

[11:44:06.0000] <tantek>
Towards a Consideration of the Harmfulness of Toward Essays

[11:44:17.0000] <roc>
similar to headlines that end in a question mark

[11:44:29.0000] <tantek>
roc - that's a dilution of "weasel word"

[11:44:55.0000] <tantek>
which is much more specifically about the "Some say", "One could say", "People say", "It is considered" patterns

[11:45:52.0000] <tantek>
https://indiewebcamp.com/it_is_considered

[13:06:31.0000] <TabAtkins>
The maxim is that if a headline ends in a question, the answer is always "no".

[14:22:54.0000] <Domenic>
smaug____: casing rules at https://w3ctag.github.io/design-principles/#casing-rules

[14:25:18.0000] <Domenic>
Is there no way to search the source in https://trac.webkit.org/browser ?

[14:45:03.0000] <smaug____>
Domenic: ok, this came when looking at FIDO U2F where Chrome is shipping something totally proprietary and the spec doesn't properly spec what is the API entry point. It does have an interface with name 'u2f', which feels odd

[14:45:20.0000] <Domenic>
smaug____: whole API seems bad, I am sad about it.

[14:45:27.0000] <smaug____>
yeah, it is horrible

[14:45:45.0000] <smaug____>
there is some new version coming, and that spec looks at least a bit saner

[14:47:29.0000] <smaug____>
/me is rather sad that Chrome ships this kinds of APIs without standardization under some random .chrome prefixes

[14:51:47.0000] <smaug____>
/me wonders if blink folks have considered removing window.chrome

[15:09:18.0000] <miketaylr>
Domenic: i just search https://github.com/WebKit/webkit/

[15:17:37.0000] <jgraham>
It seems unlikely we need to copy the Chrome U2F thing, to me. It's only being used on a handful of sites and they are theoretically capable of moving to a new API that doesn't suck; particularly if Microsoft are only implementing the new version too

[15:17:42.0000] <jgraham>
smaug____: ^

[15:19:10.0000] <smaug____>
jgraham: yeah, hopefully. dev.platform has the discussion

[15:19:24.0000] <smaug____>
apparently the new version is still rather early draft though


2015-12-05
[16:41:04.0000] <roc>
jgraham: it's the "theoretically" part that worries me

[16:45:37.0000] <jgraham>
roc: Sure. But if it's both not *that* widely used and we have others also agreeing to only implement the new thing it seems more sensible to do that first and then go back and implement the old thing if there's an actual problem

[16:45:59.0000] <roc>
sure

[16:46:07.0000] <roc>
but every day Chrome implements this cool API and we don't is a problem

[16:47:10.0000] <roc>
er

[16:47:25.0000] <jgraham>
That's true of everything though. Is the cost of missing this one especially high?

[16:47:26.0000] <roc>
better to say: every day these sites work in Chrome and not Firefox is an actual problem

[16:48:01.0000] <jgraham>
I mean it doesn't actually stop sites working, does it? It just makes for more convenient authentication for a small group of users

[16:48:57.0000] <roc>
every day that feature of those sites works in Chrome and not Firefox is an actual problem

[16:49:52.0000] <roc>
maybe it's not a big deal in practice

[16:49:53.0000] <roc>
maybe it is

[16:51:21.0000] <roc>
we've been burned many times by Webkit or Blink exposing some non-standard API, which gets revised in a shiny standard API, which we implement, but too many sites stick with the non-standard or prefixed stuff and we're twisting in the wind

[16:51:44.0000] <roc>
I'm tired of it

[16:51:56.0000] <TabAtkins>
Yup. :/

[16:57:55.0000] <roc>
jgraham: maybe the right question to ask is: is Chrome willing to commit to implement the new thing *and* remove their nonstandard entry point, and at what date? If we don't like the answers we definitely need to implement the API people are actually using

[16:58:51.0000] <roc>
even if we do like the answers we still have to think how much we trust them :-)

[17:00:13.0000] <roc>
/me has not forgotten the H.264 debacle

[17:03:09.0000] <TabAtkins>
/me was lied to about that, too.

[17:05:10.0000] <jgraham>
roc: So I absolutely don't think they'll remove the nonstandard thing. But the question is oppertunity cost. If we can get away with doing one implementation then the engineers that would have spent the time reverse engineering a second implementaion can instead work on some other feature that's needed to improve Gecko.

[17:05:54.0000] <roc>
fair

[17:47:12.0000] <caitp>
I think webkit and blink developers often feel just as burned by not being able to remove or revise absolute broken crap

[17:56:16.0000] <roc>
yeah but it's not costing them market share

[17:56:17.0000] <roc>
just guilt

[17:56:23.0000] <roc>
and technical debt

[17:56:46.0000] <roc>
so "just as burned", I think not

[18:18:42.0000] <caitp>
I don't know if people pick their mobile phone based on the stock web browser

[18:19:33.0000] <caitp>
but still don't want to break those mobile sites


2015-12-07
[16:23:26.0000] <smaug____>
https://drafts.csswg.org/cssom-view/ has very unusual layout

[16:24:10.0000] <smaug____>
/me wonders if there is some way to get the same layout as every other spec

[16:24:29.0000] <Ms2ger>
You mean the TOC on the left?

[16:25:34.0000] <smaug____>
right

[16:26:14.0000] <smaug____>
it is annoying just because it is different to other specs

[16:26:28.0000] <smaug____>
consistency everywhere!

[18:48:22.0000] <MikeSmith>
smaug____: I think https://drafts.csswg.org/cssom-view/ design is a new stylesheet that fantasai developed this year, and I think the plan is for all new specs to eventually migrate to it

[18:48:55.0000] <MikeSmith>
but I think it's not purely just a stylesheet but requires some changes to the markup

[18:49:39.0000] <MikeSmith>
so I think it might not be possible to retroactively apply the stylesheet to existing specs without them some additional markup changes as well

[18:49:42.0000] <MikeSmith>
but not sure

[18:51:08.0000] <MikeSmith>
smaug____: anyway, if you don't like that TOC you can get rid of it by making you browser window more narrow

[18:51:38.0000] <MikeSmith>
seems like maybe less than 1024 or so

[12:57:56.0000] <annevk>
JakeA: what is the tentative plan for the service workers meetup?

[12:59:20.0000] <JakeA>
annevk: did the web components meeting settle on a date?

[13:00:53.0000] <annevk>
JakeA: it seems they settled on Jan 25

[13:01:05.0000] <annevk>
JakeA: https://lists.w3.org/Archives/Public/public-webapps/2015OctDec/0220.html

[13:01:30.0000] <JakeA>
annevk: cheers, will send an email around tomorrow so we do something at the same time


2015-12-08
[00:55:51.0000] <JakeA>
wanderview: https://code.google.com/p/chromium/issues/detail?id=567615

[02:18:54.0000] <zcorpan>
MikeSmith: why this warning?

[02:18:58.0000] <zcorpan>
Warning: Element dl does not need a role attribute.

[02:18:58.0000] <zcorpan>
From line 4468, column 4; to line 4468, column 32

[02:18:58.0000] <zcorpan>
</pre>↩   <dl class="note" role="note">↩    <

[02:21:33.0000] <zcorpan>
MikeSmith: also i seem to get a 504 Gateway Time-out from validator.nu and html5.validator.nu

[02:36:12.0000] <MikeSmith>
hsivonen: validator.nu and html5.validator.nu trouble

[02:38:25.0000] <MikeSmith>
zcorpan: yeah that's warning for that case seems like a bug

[02:38:49.0000] <MikeSmith>
I think the ARIA in HTML spec actually says no role value is allowed on dl at all

[02:39:01.0000] <MikeSmith>
/me looks at validator sources

[04:32:13.0000] <ondras>
so

[04:32:39.0000] <ondras>
is there some authoritative statement regarding the extension presence in "import x from 'y{.js}'" ?

[04:33:03.0000] <ondras>
babel6 seems to encourage extension-less module names

[04:33:08.0000] <ondras>
babel5 supports both

[04:33:29.0000] <ondras>
and as time goes, I have heard people recommending both variants.

[04:40:28.0000] <hsivonen>
MikeSmith: fixed

[07:47:59.0000] <caitp>
ondras: have you looked at the loader repo?

[07:48:16.0000] <caitp>
haven't really been keeping up with it, but I expect the extension will be required

[07:50:12.0000] <caitp>
or rather, it won't add the ".js" for you

[09:13:44.0000] <JakeA>
annevk: if an API isn't available (private browsing, or missing dependencies), should the API be there but fail, or be absent?

[09:13:58.0000] <JakeA>
I vaguely recall a discussion about this

[10:17:10.0000] <Domenic>
ondras: since you are just using Babel's nonstandard version of modules you should do whatever babel says. It's not real ES6 anyway.

[10:50:18.0000] <jsbell>
Ms2ger: can I get a do-over on https://critic.hoppipolla.co.uk/r/6039 ?

[10:50:28.0000] <Ms2ger>
mtg

[10:50:31.0000] <jsbell>
np

[10:50:40.0000] <Ms2ger>
Also all of this week :)

[10:51:09.0000] <Ms2ger>
But will try to look later, thanks for the fix

[10:51:22.0000] <jsbell>
In unrelated news, for t in $ALL_THE_TOOLS { I hate $t }

[10:51:39.0000] <Ms2ger>
:D

[11:10:46.0000] <wanderview>
JakeA: thanks!

[11:12:31.0000] <annevk>
JakeA: not sure that is standardized

[11:13:27.0000] <annevk>
JakeA: absent seems safe when it does not work, but private browsing has its own considerations

[11:33:15.0000] <JakeA>
Cheers

[11:51:35.0000] <mkwst>
JakeA: Generally, we'd like private/incognito/whatever to look just like "real" mode.

[11:52:13.0000] <mkwst>
Practically, we fall down in a number of places, so Incognito is totally detectable. I see that as a bug, I just haven't really been able to convince folks who know how to fix things to agree with my prioritizations. :)

[11:53:37.0000] <JakeA>
mkwst: in this case we're trying to work out if we expose background sync if the version of play services isn't recent enough

[11:53:50.0000] <JakeA>
Either expose it and it rejects, or not expose it

[12:12:58.0000] <ondras>
caitp: what repo exactly?

[12:13:17.0000] <caitp>
https://github.com/whatwg/loader

[12:13:47.0000] <caitp>
although it looks like the "name resolution" bit still hasn't been figured out

[12:13:47.0000] <ondras>
caitp: thanks for the link, will have a look

[12:13:55.0000] <ondras>
would love to reply do Domenic, but he already left

[12:13:59.0000] <ondras>
will try again tomorrow.

[12:14:06.0000] <Domenic>
OR DID HE

[12:14:06.0000] <caitp>
he's around

[12:14:15.0000] <ondras>
MAGIC

[12:14:24.0000] <ondras>
why did my irssi fail to complete the nick

[12:14:25.0000] <ondras>
mystery.

[12:14:46.0000] <ondras>
Domenic: so please point me to the real ES6 way then

[12:15:05.0000] <ondras>
Domenic: I know how to do stuff with Babel; I am now more interested in what is the real deal going to be

[12:15:06.0000] <Domenic>
ondras: there is no defined way yet. That is why modules are not implemented anywhere.

[12:15:14.0000] <ondras>
right

[12:15:23.0000] <Domenic>
Babel just made something up so they could ship

[12:15:46.0000] <ondras>
Domenic: my point is that perhaps people are converging onto something? or still 50/50?

[12:15:55.0000] <caitp>
Domenic: it's probably likely that the behaviour will be similar to other resources loaded by the browser

[12:16:14.0000] <Domenic>
ondras: I would bet with 80% odds on the .js being required, as caitp says. But there's a substantial amount of uncertainty still.

[12:16:35.0000] <ondras>
Domenic: okay, thanks. Precisely the opinion I was looking for.

[12:16:58.0000] <ondras>
(I submitted this as babel6 bug not long ago, no reply so far...)

[12:17:00.0000] <Domenic>
I prefer not to use things that are unspecified though

[12:17:10.0000] <caitp>
iirc the confusing bit was WRT relative-to-base vs relative-to-module-uri

[12:17:20.0000] <caitp>
or something like that

[12:17:29.0000] <Domenic>
vs. relative-to-module-id

[14:04:09.0000] <smaug____>
mounir: random question came to my mind: is blink going to support BroadcastChannel any time soon?

[14:27:07.0000] <Mek>
smaug____: I don't think anybody is actively working on it, but according to https://www.chromestatus.com/feature/4585496197988352 jsbell might be able to give a more concrete answer

[15:05:26.0000] <jsbell>
smaug____: No concrete answer for me, though I'd love to see it done. Just not a high priority

[15:43:35.0000] <nikkibee>
I'm working on implementing more of the Fetch standard for Servo, and in talking with a previous developer on that, we discovered the Fetch standard had updated since they last worked with it

[15:44:17.0000] <nikkibee>
how often can I expect the Fetch standard to update with new details? is there like a general completeness rating for it?

[15:45:20.0000] <nikkibee>
I'd like knowing more about the development of it, which isn't really apparent from glancing at like git commits


2015-12-09
[16:41:05.0000] <jgraham>
nikkibee: I think it updates whenever there are issues found, but annevk will know more

[18:56:15.0000] <annevk>
What jgraham said is correct nikkibee, coupled with me finding time

[18:57:09.0000] <annevk>
That or someone submitting a PR, though that still requires review

[19:33:40.0000] <annevk>
I wanted to give a super short introduction to some of the platform team tomorrow as to how/why they can get involved in standards: https://html5.org/temp/whatwg.html

[19:34:03.0000] <annevk>
Overnight feedback welcome, I have another 11h minus sleep and breakfast to make adjustments

[19:35:02.0000] <annevk>
I guess I should probably mention the rule of two implementations and tests in there somehow

[19:37:49.0000] <annevk>
Done

[19:40:01.0000] <smaug____>
as someone not doing any development in github, showing just basic reviewing workflow and such might be good

[19:40:58.0000] <nikkibee>
annevk: alright, I did notice that when new updates are made, it's noted in multiple places, so I'll just keep an eye on that. and I can see the additions easily on github

[19:41:25.0000] <annevk>
nikkibee: yeah either subscribe on GitHub or follow https://twitter.com/fetchstandard

[19:41:35.0000] <annevk>
nikkibee: that's the state of the art

[19:41:42.0000] <nikkibee>
yep, I'm following the account

[19:41:44.0000] <annevk>
smaug____: that might be a tad hard within the five minutes I have

[19:41:52.0000] <nikkibee>
I was wondering if there's more meta level discussion available is all

[19:42:01.0000] <annevk>
smaug____: happy to have a longer session at some later point though

[19:42:20.0000] <smaug____>
ah

[19:42:42.0000] <smaug____>
/me just doesn't know if the spec source should follow some coding style rules etc

[19:42:54.0000] <annevk>
nikkibee: not sure what you mean by that, GitHub and sometimes certain mailing lists is all there is

[19:43:12.0000] <annevk>
nikkibee: we've had some in person discussion, but not a whole lot

[19:43:39.0000] <annevk>
smaug____: ah yes, that should be written in most of the README files these days

[19:43:39.0000] <nikkibee>
well I mean like, where I can figure out what changes were made for what reason, and see what's upcoming

[19:43:50.0000] <annevk>
smaug____: though it needs to be improved, we're a software project in the very early stages still :/

[19:44:15.0000] <nikkibee>
like we found that the first fetch entry has two new steps added to the start since the fetch code for servo was last worked on- I'd like knowing where to go to see what went into that

[19:44:27.0000] <annevk>
nikkibee: GitHub issues, mostly, and if you cannot figure it out you might have found a bug

[19:44:56.0000] <nikkibee>
alright, I'll see it as a point to gain more experience with navigating github

[19:46:03.0000] <annevk>
you're also welcome to ask here and I can probably dig it up quite easily though availability is not great this week

[19:46:11.0000] <nikkibee>
thanks!

[19:47:05.0000] <nikkibee>
if I really can't turn anything up on my own I'll ask here, but knowing it's all in the github issues helps a lot. I reckon once I get a handle on searching through it it'll be a lot easier to do again

[20:18:50.0000] <MikeSmith>
fyi https://lists.w3.org/Archives/Public/public-html/2015Dec/0017.html proposes adding a new attribute named "rels"

[20:18:58.0000] <MikeSmith>
「The syntax of the "rels" attribute value is a whitespaceseparated sequence of whitespace separated pairs of link relationsand URL values.」

[20:19:29.0000] <MikeSmith>
example: <a href="software.tar.gz" rels="signature software.tar.gz.sig">software</a>

[20:20:04.0000] <MikeSmith>
Internet-draft from Sean Palmer

[20:23:56.0000] <MikeSmith>
I wonder if he knows about subresource integrity

[20:38:02.0000] <MikeSmith>
ah I see now he sent it to the whatwg list as well

[00:55:16.0000] <mkwst>
MikeSmith: Thanks for forwarding that on to WebAppSec. I expect the use case to be covered by SRI2; we discussed signature-based integrity validation briefly at TPAC, but I don't think any of the SRI editors have done anything concrete about it.

[00:55:40.0000] <mkwst>
I don't think the PGP-based signature that Sean wants is a good idea, but something more generic would indeed be valuable.

[00:58:34.0000] <mkwst>
The notes here are muddled, but you get the idea: http://www.w3.org/2015/10/28-webappsec-minutes#item07

[01:48:19.0000] <yoav>
annevk: if you're around I'd appreciate if you could take a look at https://github.com/whatwg/dom/pull/123

[03:28:44.0000] <annevk>
yoav: can prolly look today, on first glance, supports() needs to be a two step algorithm

[03:29:43.0000] <annevk>
yoav: the first step assigns the return value to a variable and rethrows any exceptions, in line with text elsewhere in the standard

[03:30:10.0000] <annevk>
yoav: the second step would simply return the variable

[04:06:06.0000] <yoav>
annevk: OK, I think I addressed that

[04:34:33.0000] <annevk>
yoav: you want to use "Let" since you're initializing the variable and the second step needs to end with a period

[04:34:53.0000] <yoav>
ok

[04:36:08.0000] <yoav>
fixed

[04:37:56.0000] <annevk>
yoav: seems the "throw TypeError" is also not consistent with throwing a TypeError elsewhere

[04:38:14.0000] <annevk>
yoav: which also makes me suspect the addition to the ignored terms list

[04:39:44.0000] <yoav>
Yeah, zcorpan suggested that this would be the correct way, but I could change that to the way it is done elsewhere if you prefer

[04:39:57.0000] <annevk>
yoav: also, thinking about it more, what has associated supported tokens, the DOMTokenList or the attribute local name?

[04:40:05.0000] <annevk>
yoav: I think it needs to be the DOMTokenList instance

[04:40:37.0000] <annevk>
yoav: I would prefer internal consistency first I think and then maybe a separate follow up

[04:41:04.0000] <annevk>
yoav: is the "correct way" also without "a" inbetween? I wonder if that's defined anywhere

[04:41:29.0000] <Domenic>
Web IDL says to use an "a"

[04:41:40.0000] <yoav>
he was referring to the {{TypeError}} rather than <code>TypeError</code>

[04:41:50.0000] <yoav>
the "a" was my omission

[04:46:39.0000] <yoav>
so should it be "If the associated <a>attribute</a>'s <a for=Attr>DOMTokenList</a> " instead of "If the associated <a>attribute</a>'s <a for=Attr>local name</a> "?

[04:54:33.0000] <MikeSmith>
mkwst: thanks yeah I vaguely recalled hearing there'd been some discussion of signature-based SRI

[04:57:25.0000] <yoav>
annevk: or is the attribute itself the DOMTokenList instance? Any example on how to refer to the instance?

[06:22:09.0000] <annevk>
You should just refer to the DOMTokenList, which is the context object, afaict

[10:24:51.0000] <annevk>
The attribute is not the instance...

[10:25:03.0000] <annevk>
The instance is the "context object"

[10:25:22.0000] <annevk>
I thought I mentioned this, but it seems that was not transmitted or something :/ Downsides of IRCCloud already showing

[12:02:14.0000] <smaug____>
++aklein (for unshipping Object.observe)

[12:38:48.0000] <annevk>
oooh yes

[12:38:54.0000] <annevk>
excellent

[13:15:02.0000] <TabAtkins>
By the by, I consider "-foo-min-bar" to be the correct prefixed variant of the "min-bar" media feature, and think "min--foo-bar" is bizarre and don't understand why anyone would do that.

[14:24:37.0000] <jsbell>
wanderview: https://critic.hoppipolla.co.uk/r/6044 and https://critic.hoppipolla.co.uk/r/6045 may be of interest to you

[14:25:05.0000] <wanderview>
jsbell: thanks!  on a work trip at the moment, but will try to look next week

[14:44:02.0000] <Ms2ger>
annevk, ping

[14:48:44.0000] <annevk>
Ms2ger: yo

[14:49:18.0000] <Ms2ger>
annevk, https://github.com/whatwg/fetch/issues/171 is confusing us over in #servo

[14:49:51.0000] <annevk>
Ms2ger: that looks like a case that wasn't considered

[14:50:14.0000] <Ms2ger>
annevk, weird thing is that it's considered in some steps and not others

[14:50:49.0000] <annevk>
Ms2ger: yeah, I should probably have some macro for this or a better model

[14:51:26.0000] <annevk>
Ms2ger: the filtering seemed pretty great initially but now I need to poke holes here and there it's getting ugly :-(

[15:00:27.0000] <annevk>
Ms2ger: good ideas appreciated btw, but you know that

[15:02:11.0000] <Ms2ger>
annevk, yeah, I never really read the fetch spec entirely, so I have no good mental model at this point, unfortunately


2015-12-10
[01:47:46.0000] <JakeA>
annevk: given https://html.spec.whatwg.org/multipage/comms.html#the-eventsource-interface sets a non-simple header, should it trigger a preflight for cross-origin urls? If not, which part of the fetch spec stops this?

[01:48:14.0000] <JakeA>
annevk: ignore me, sorry

[01:48:16.0000] <JakeA>
fffff

[01:48:28.0000] <JakeA>
misread

[01:57:21.0000] <zcorpan>
should we put something in the bug whiteboard for things like https://www.w3.org/Bugs/Public/show_bug.cgi?id=29329

[02:25:17.0000] <JakeA>
annevk: maybe of interest https://github.com/igrigorik/http-client-hints/issues/68

[02:36:28.0000] <MikeSmith>
zcorpan: in the whiteboard maybe we could put the URL for the PR? either that or the URL for the commit

[02:38:13.0000] <zcorpan>
MikeSmith: actually it's possible to search for /pull/ in comments, so i think it's not necessary to use the whiteboard

[02:39:53.0000] <zcorpan>
https://www.w3.org/Bugs/Public/buglist.cgi?component=HTML5%20spec&list_id=60910&longdesc=%2Fpull%2F&longdesc_type=casesubstring&product=HTML%20WG&query_format=advanced&resolution=---

[02:41:07.0000] <zcorpan>
or rather https://www.w3.org/Bugs/Public/buglist.cgi?component=HTML5%20spec&list_id=60911&longdesc=whatwg%2Fhtml%2Fpull%2F&longdesc_type=casesubstring&product=HTML%20WG&query_format=advanced&resolution=---

[02:48:44.0000] <zcorpan>
but some open bugs are invalid. maybe whiteboard is better anyway, whatwg-resolved

[02:51:06.0000] <MikeSmith>
oh clever

[02:51:33.0000] <MikeSmith>
but yeah maybe whatwg-resolved

[03:03:27.0000] <MikeSmith>
zcorpan: btw I just now notice the git log output for that commit shows you as the committer even though I merged it

[03:03:37.0000] <MikeSmith>
which I kind of like actually

[03:04:08.0000] <MikeSmith>
because the PR itself still records the fact that somebody other than you merged it

[03:04:43.0000] <zcorpan>
yeah. though the commit doesn't have any pointer to the PR, does it?

[03:04:46.0000] <MikeSmith>
but I don't know what I did differently that caused it to end up being logged that way

[03:04:52.0000] <jgraham>
Presumably the merge commit shows that you created/comitted it and the commit itself shows that zcorpan comitted it? Unless you aren't merging

[03:05:09.0000] <MikeSmith>
zcorpan: oh. no it doesn't

[03:05:13.0000] <zcorpan>
jgraham: merge --ff-only

[03:05:34.0000] <MikeSmith>
jgraham: what zcorpan just said

[03:06:08.0000] <MikeSmith>
I wonder if the cause of this is that I already have all branches for all the PRs checked out

[03:06:24.0000] <MikeSmith>
otherwise I don't know what would be different in my local environment

[03:07:03.0000] <MikeSmith>
because I think I use the same process to merge PRs

[03:07:08.0000] <zcorpan>
MikeSmith: i think it's usually like this if the merger doesn't make any changes

[03:07:16.0000] <MikeSmith>
ah OK

[03:07:34.0000] <zcorpan>
MikeSmith: but often we tweak the commit message or fix other things

[03:07:39.0000] <MikeSmith>
aha

[04:57:09.0000] <yoav>
annevk: thoughts on decoupling "supported tokens" redefinition from https://github.com/whatwg/dom/pull/123 ?

[08:48:54.0000] <MikeSmith>
wonder what the status of the Foreign Fetch proposal is at this point

[08:49:25.0000] <MikeSmith>
I know about https://wiki.whatwg.org/wiki/Foreign_Fetch but don't know if it's yet graduated out from there to anywhere else yet

[09:32:06.0000] <calvaris>
Domenic: do you have a moment?

[09:36:30.0000] <nikkibee>
https://fetch.spec.whatwg.org/#http-fetch the "set response's CSP list" link in substep 5 of step 3 leads to a 404

[09:36:44.0000] <nikkibee>
https://w3c.github.io/webappsec-csp/#set-response-csp-list this seems to be the correct url to link to

[09:39:38.0000] <MikeSmith>
nikkibee: yeah I recall finding at least one other broken reference in the Fetch spec a couple months ago, due the CSP anchors having changed

[09:39:55.0000] <gsnedders>
nikkibee: just open a bug/PR at  https://github.com/whatwg/fetch

[09:40:09.0000] <nikkibee>
MikeSmith: that's annoying... although the new url actually matches the phrase, I guess

[09:40:12.0000] <nikkibee>
sure thing gsnedders

[09:41:59.0000] <gsnedders>
nikkibee: assuming the link is actually in overview.src.html

[09:42:39.0000] <nikkibee>
yep, I found it in there

[09:43:17.0000] <nikkibee>
if I make a PR for it should I open a bug for it first?

[09:43:33.0000] <gsnedders>
I don't think you need to?

[09:43:48.0000] <gsnedders>
esp. for something so simple and not any normative change

[09:44:02.0000] <nikkibee>
alright

[09:49:56.0000] <Domenic>
calvaris: at lunch but sure

[09:50:17.0000] <nikkibee>
https://github.com/whatwg/fetch/pull/173 PR made

[09:51:58.0000] <calvaris>
Domenic: https://github.com/whatwg/streams/blob/master/reference-implementation/web-platform-tests/readable-streams/cancel.js#L9

[09:52:10.0000] <calvaris>
if I understand correctly

[09:52:43.0000] <calvaris>
readableStreamToArray begins to read chunks

[09:53:16.0000] <calvaris>
after about 15ms + promise vending the reader is canceled

[09:54:12.0000] <calvaris>
that causes the current read to be vended as done

[09:54:38.0000] <Domenic>
Sounds right

[09:56:36.0000] <calvaris>
that should cause the internal read cascade is vended too

[10:00:03.0000] <calvaris>
meanwhile, the source cancel is called an the cancel promise is created with the timeout to be vended 1s after

[10:00:32.0000] <calvaris>
I don't know if it is normal or not

[10:01:38.0000] <calvaris>
but in WK the cancel timeout runs in some cases before the callback for readableStreamToArray

[10:02:01.0000] <calvaris>
which causes the cancellationFinished to be true

[10:02:30.0000] <calvaris>
I am not sure if that should/can happen or not

[10:03:17.0000] <Domenic>
calvaris: well the test does use timers which means it is prone to such flakes

[10:03:34.0000] <calvaris>
because if I am not wrong, the cascade of reads has to be resolved

[10:03:44.0000] <Domenic>
But it's surprising that your timers for 15 ms  can fire before your timer for 1 ms

[10:03:49.0000] <calvaris>
and that can mess in some cases with the timers

[10:04:12.0000] <calvaris>
no, that does not happen

[10:04:52.0000] <calvaris>
well, it does, but of course because it is the 15ms timeout that causes the 1ms to be set to run

[10:05:15.0000] <Domenic>
Uh, why?

[10:05:33.0000] <Domenic>
Oh I see what you mean

[10:05:39.0000] <calvaris>
the source cancel timeout is set as a result of calling reader.cancel()

[10:05:59.0000] <calvaris>
so that's working as it should

[10:06:35.0000] <Domenic>
Well RandomPushSource should only take 2 ms to give you a chunk

[10:08:04.0000] <calvaris>
that's not the issue, I guess, the issue seems to be the asynchronous stuff happening with promise vending

[10:08:46.0000] <calvaris>
because the reads are vended before and there's a cascade of several reads that have to be vended to be returned by readableStreamToArray

[10:10:12.0000] <calvaris>
and then we have the call to the source, which creates the promise that sets timeout to reset the boolean to true and vends the cancel promise

[10:10:13.0000] <Domenic>
Stepping back, what is actually the problem with the ordering you see. It doesn't cause failure does it?

[10:10:27.0000] <calvaris>
it does cause failure

[10:10:39.0000] <Domenic>
Oh it does because cancelationFinished

[10:10:48.0000] <calvaris>
yep

[10:10:59.0000] <Domenic>
I see

[10:11:20.0000] <Domenic>
OK this is actually something important being tested...

[10:11:42.0000] <Domenic>
Can you file an issue so I am able to write this up better when I get back to my computer?

[10:11:55.0000] <calvaris>
sure

[10:12:24.0000] <calvaris>
and thanks for answering during your lunch

[11:11:08.0000] <frewsxcv>
anyone want to review https://github.com/w3c/csswg-test/pull/969 ?

[11:12:12.0000] <Ms2ger>
jgraham, ^

[12:48:29.0000] <annevk>
rbyers: could you ping me early next week if I haven't started reviewing your work?

[12:48:42.0000] <rbyers>
annevk: Sure, would love to :-)

[12:48:45.0000] <annevk>
rbyers: there's been some vacation and Mozilla week is now so...

[12:49:01.0000] <rbyers>
Figured I had no business bothering you after I disappeared for a month ;-)

[12:49:17.0000] <annevk>
heh, don't worry

[12:50:10.0000] <rbyers>
Thanks though!  We're preceding with implementation under the assumption that it's mostly minor details and editorial left to agree on...  Lots of tough implementation work to do to get the real perf benefit from passive listeners...

[13:05:24.0000] <nikkibee>
annevk: I can't figure out what's wrong with my link in https://github.com/whatwg/fetch/pull/173

[13:05:43.0000] <nikkibee>
the url works for me, and it matches the section named in the text

[13:09:07.0000] <annevk>
nikkibee: there's another broken link

[13:09:19.0000] <annevk>
nikkibee: there's two identical wrong links, you only replaced one, afaict

[13:09:32.0000] <nikkibee>
ohh, I see!

[13:10:00.0000] <nikkibee>
I had not thought of that

[13:10:29.0000] <nox>
nikkibee: Hello here, good luck with Fetch. :)

[13:10:35.0000] <nikkibee>
thanks nox!

[13:11:55.0000] <nikkibee>
annevk: fixed and pushed. would you like me to combine my two commits into one before merging it?

[13:12:16.0000] <annevk>
nikkibee: if you can, that'd be lovely

[13:12:23.0000] <nikkibee>
sure thing

[13:21:24.0000] <nikkibee>
I keep forgetting how to squash my commits... I'm going to have ot just write it down on paper after I dig up my history on it yet again

[13:21:53.0000] <annevk>
nikkibee: so yeah, rebase -i HEAD~{number of commits that need to go together}

[13:22:01.0000] <annevk>
nikkibee: I have to search for it every time

[13:22:11.0000] <annevk>
so annoying

[13:22:18.0000] <nikkibee>
annevk: heh, at least I'm not the only one...

[13:22:21.0000] <gsnedders>
the other thing that's useful is: git rebase -i `git merge-base origin/master HEAD`

[13:22:28.0000] <nikkibee>
I just remember I can never figure out all the steps myself

[13:22:30.0000] <gsnedders>
quite possibly with --autosquash

[13:23:09.0000] <nikkibee>
I'll tr ythat

[13:23:46.0000] <nikkibee>
gsnedders: are those supposed to be two lines? I don't understand how to run that

[13:24:09.0000] <gsnedders>
(--autosquash moves the initial state around if you've used `git commit --fixup= or --squash=` before)

[13:24:24.0000] <gsnedders>
nikkibee: one command. git rebase -i --autosquash `git merge-base origin/master HEAD`

[13:25:06.0000] <nikkibee>
git just tells me my usage options, it doesn't accept that line

[13:25:20.0000] <nikkibee>
I'm using it exactly as you typed it

[13:25:46.0000] <gsnedders>
with the backticks?

[13:26:02.0000] <nikkibee>
yeah

[13:26:20.0000] <gsnedders>
because that /should/ work. what part is it objecting to?

[13:26:37.0000] <gsnedders>
the first line before the help should be the error, IIRC

[13:26:55.0000] <nikkibee>
I get no error

[13:27:26.0000] <nikkibee>
it just goes straight to "usage: git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] [<upstream>]" etc

[13:27:39.0000] <nikkibee>
oh wait, should I be using that --exec flag?

[13:28:00.0000] <gsnedders>
no

[13:28:05.0000] <nikkibee>
okay

[13:28:17.0000] <gsnedders>
no error? that's really weird

[13:28:20.0000] <gsnedders>
what version of git, actually?

[13:28:51.0000] <nikkibee>
git version 1.9.5.msysgit.0

[13:29:02.0000] <nikkibee>
I'm on windows, if that makes any difference

[13:29:33.0000] <caitp>
that is a pretty oldschool git

[13:29:43.0000] <gsnedders>
nikkibee: oh, that won't support --autosquash

[13:29:56.0000] <gsnedders>
sorry, I've not touched git < 2 in a while :)

[13:30:05.0000] <nikkibee>
gsnedders: I got the same result with the first command

[13:30:09.0000] <nikkibee>
git is beyond version 2?

[13:30:17.0000] <gsnedders>
2.6.something now

[13:30:21.0000] <nikkibee>
oh geeze

[13:30:26.0000] <nikkibee>
I didn't know I was so out of date what the heck

[13:30:38.0000] <gsnedders>
I dunno if the Windows port stays up to date nowadays.

[13:30:45.0000] <gsnedders>
I haven't paid attention to that in ages.

[13:30:52.0000] <nikkibee>
it does, it's 2.6 something as well

[13:31:43.0000] <gsnedders>
--fixup and --squash on commit are great features with --autosquash

[13:32:02.0000] <gsnedders>
idk why it's failing without --autosquash, really, but if you're so out of date update first!

[13:32:39.0000] <nikkibee>
ya I'm updating

[13:32:56.0000] <nikkibee>
I don't know how I got such an out of date version... I would have first installed it like 10 months ago on this laptop?

[13:34:31.0000] <nikkibee>
damn, it's still doing this annoying non-error

[13:35:21.0000] <caitp>
what is the annoying non-error?

[13:36:17.0000] <nikkibee>
it just tells me usage options for git rebase

[13:36:20.0000] <nikkibee>
it doesnt' tell me what is wrong

[13:36:53.0000] <caitp>
it doesn't say "error: unknown switch" or something before that?

[13:37:21.0000] <nikkibee>
no, nothing of the sort

[13:38:39.0000] <nikkibee>
I found the old logs from before where I first learned how to do git rebase, I'll just try following that

[13:38:45.0000] <nikkibee>
and then write it down for prosperity, finally

[13:39:08.0000] <nikkibee>
I thoguht I had before but I can't find it

[13:41:26.0000] <nikkibee>
there we go... one commit now on the PR @ annevk!

[13:41:46.0000] <annevk>
oh wow, sorry you went through all that trouble

[13:41:55.0000] <nikkibee>
thanks for the suggestion thoguh gsnedders, I'm used to git on windows being uniquely obtuse

[13:42:04.0000] <nikkibee>
it's okay annevk, figuring it out the first time was much worse!

[13:45:10.0000] <annevk>
nikkibee: congrats on your first commit!

[13:45:23.0000] <nikkibee>
thanks annevk :)

[13:45:47.0000] <nikkibee>
I've contributed to whatwg before though. having contributed to two different standards is pretty nifty though

[13:47:29.0000] <annevk>
next: write a standard :😃

[13:47:35.0000] <nikkibee>
haha

[13:47:57.0000] <nikkibee>
I would, but there's just too many standards

[13:48:03.0000] <nox>
nikkibee: s/on windows/

[13:48:11.0000] <nikkibee>
oh, I should write a standard for writing standards. that'll solve everything! ;)

[13:48:14.0000] <nox>
Git is obtuse, bad, and we all suffer from Stockholm's syndrome.

[13:48:27.0000] <nikkibee>
nox: that seems to be my impression

[13:48:41.0000] <nikkibee>
only on windows tho does it force you to know about CRLF settings

[13:49:52.0000] <nikkibee>
there's a special git error that only comes up on windows I ran into once, git kept saying some files I never edited were changed and wouldn't let me push or pull from this persons repo, even if I downloaded it again. cause it was changing the CRLFs in the files, which shows up as nothing

[13:53:00.0000] <nikkibee>
CRLF is messed up

[14:22:41.0000] <jgraham>
Hmm, git < 2 supports autosquash, windows doesn't support backticks (possibly)

[14:28:24.0000] <gsnedders>
I was about to say what jgraham just said.

[14:28:32.0000] <gsnedders>
Just realising that.

[14:30:17.0000] <Ms2ger>
What's --squash?

[14:32:51.0000] <gsnedders>
Ms2ger: The difference between --squash and --fixup is --squash keeps the commit message, --fixup drops it

[14:33:17.0000] <Ms2ger>
So you end up with fo\n\nbar or something?

[14:34:03.0000] <jgraham>
It's just the same as the options in the rebase UI

[14:34:06.0000] <gsnedders>
Ms2ger: yeah

[14:34:13.0000] <gsnedders>
what jgraham said, too

[14:34:28.0000] <gsnedders>
the use of the flags on git commit is just for the sake of autosquash


2015-12-11
[16:11:25.0000] <MikeSmith>
botie, inform smaug____ I re-subscribed you to public-webapps

[16:11:26.0000] <botie>
will do

[16:12:38.0000] <MikeSmith>
if anybody else got kicked from public-webapps and you want to be re-subscribed, either lemme know or do it on your own through the e-mail interface

[16:15:48.0000] <jgraham>
Oh seems that I did

[16:16:06.0000] <jgraham>
I guess it would have taken a while to notice if I hadn't seen this :|

[16:57:19.0000] <MikeSmith>
jgraham: want me to re-subscribe you?

[16:57:35.0000] <MikeSmith>
and yeah I reckon a lot of people are not going to realize they got kicked

[17:02:18.0000] <jgraham>
MikeSmith: I resubscribed myself

[17:02:27.0000] <MikeSmith>
k

[17:02:27.0000] <jgraham>
But thanks

[17:02:54.0000] <jgraham>
And I guess I wouldn't have noticed because I haven't done enough non-infrastructure work recently :(

[17:06:44.0000] <MikeSmith>
yeah I will try to make sure people here know that they got kicked but otherwise I don't plan to do anything else to mass-migrate everybody who was subscribed before

[17:07:16.0000] <MikeSmith>
I think the only people who got kicked were those who are members of the WG

[17:07:50.0000] <MikeSmith>
there are something like 900 other people subscribed to that list voluntarily who are not affected

[17:09:18.0000] <MikeSmith>
arguably the people who were members of the WG before should re-join the new WG, since it's largely just all the same specs

[17:10:04.0000] <MikeSmith>
but anyway I don't care much except like I said just want people here to have a heads-up

[18:20:39.0000] <Pygy>
Hello guys

[18:24:21.0000] <Pygy>
In the DOM API spec, specifically https://html.spec.whatwg.org/multipage/semantics.html#dom-hyperlink-pathname and the corresponding sections for .search and .hash, nothing is specified about the encoding.

[18:25:02.0000] <Pygy>
Currently, browsers differ: https://gist.github.com/pygy/0dbef90505e42357b997

[18:25:51.0000] <Pygy>
Specifically, some return the string URI encoded, and other not.

[18:26:18.0000] <Pygy>
(except Chrome who does both)

[18:27:19.0000] <Pygy>
Where should this be reported, assuming it has to?

[18:39:27.0000] <MikeSmith>
Pygy: probably https://github.com/whatwg/dom/issues

[18:39:56.0000] <MikeSmith>
I doubt it's an oversight but who knows

[18:40:09.0000] <MikeSmith>
oh

[18:40:36.0000] <MikeSmith>
sorry https://github.com/whatwg/html/issues if it's in the HTML spec

[18:41:59.0000] <MikeSmith>
but maybe https://github.com/whatwg/url/issues actually

[18:46:27.0000] <Pygy>
Great, thanks.

[20:59:31.0000] <botie>
smaug____, at 2015-12-11 00:11 UTC, MikeSmith said: I re-subscribed you to public-webapps

[21:01:00.0000] <smaug____>
MikeSmith: thanks

[21:01:18.0000] <smaug____>
MikeSmith: I guess also plenty of other people were kicked out from the list

[21:01:34.0000] <smaug____>
without notifying that they were being kicked out

[01:32:14.0000] <JakeA>
annevk: do you have a preference for Friday 22nd or Tuesday 26th Jan for the service worker f2f?

[04:08:27.0000] <annevk>
JakeA: 26 is somewhat better if I'll make it; also better for wanderview

[04:10:57.0000] <JakeA>
annevk: cheers!

[04:11:10.0000] <JakeA>
annevk: can Mozilla host?

[04:11:15.0000] <annevk>
MikeSmith: makes me wonder if the Apple folks even saw my email about web components 😟

[04:12:00.0000] <annevk>
JakeA: possibly, how many people?

[04:12:55.0000] <JakeA>
annevk: I imagine <15. Are there other Mozilla folks you'd like there?

[04:14:48.0000] <annevk>
JakeA: don't think so, 15 seems doable, will check room reservation in a bit, SF or MV?

[04:14:59.0000] <JakeA>
annevk: SF

[04:33:27.0000] <annevk>
JakeA: seems like that worked, still not sure whether I can be there, but at least there's a meeting room

[04:34:23.0000] <JakeA>
annevk: cheers. I'll send an email to webplatform, see if anyone else wants to attend (but will stress we'll be working on low-level issues)

[04:34:51.0000] <jgraham>
Something, something, video conference, something, 80% of value 0% of cost, something

[04:35:45.0000] <annevk>
jgraham: bay area is in such a bad timezone for that :/

[04:37:08.0000] <JakeA>
I'd argue 20% of value, but maybe that's just me

[04:37:20.0000] <JakeA>
Especially for a day-long thing

[04:37:41.0000] <gsnedders>
I think it also depends on what /exactly/ you're trying to discuss.

[04:38:37.0000] <jgraham>
annevk: Fair point

[04:39:46.0000] <jgraham>
It just seems ironic that we are trying to build this whole global communication medium thing and the main effect seems to be that everyone involved has to spend half their lives flying to San Fransisco

[05:45:55.0000] <yoav>
annevk: squashed https://github.com/whatwg/dom/pull/123

[05:50:18.0000] <frewsxcv>
https://dom.spec.whatwg.org/#partially-contained

[05:50:41.0000] <frewsxcv>
"A node is partially contained in a range if it is an inclusive ancestor of the range’s start node but not its end node, or vice versa." "There exists a partially contained node if and only if the start node and end node are different. "

[05:50:47.0000] <frewsxcv>
do those statements contradict each other?

[05:51:09.0000] <frewsxcv>
the former seems like 'a && !b', whereas the latter seems like 'a != b'

[06:09:57.0000] <annevk>
the latter is just a statement of fact

[06:14:42.0000] <annevk>
if /node/ is an inclusive ancestor of /start/ but not /end/, that automatically follows; it also follows from /node/ being an inclusive ancestor of /start/ but not /end/, afaict

[06:14:57.0000] <annevk>
yoav: okay, will take a look in a bi

[06:23:09.0000] <nox>
frewsxcv: What are you doing?

[06:38:02.0000] <frewsxcv>
nox: glanced at it in Servo and was confused

[06:38:11.0000] <nox>
frewsxcv: Heh. :)

[08:14:15.0000] <wanderview>
JakeA: is offline cookbook broken?  content seems to terminate at the Cache Only header: https://jakearchibald.com/2014/offline-cookbook/#cache-network-race

[08:17:40.0000] <JakeA>
wanderview: shit, hm, let me see what's going on

[08:32:15.0000] <JakeA>
well, I've brought my whole site down now, so that's progress

[08:32:45.0000] <wanderview>
ouch, sorry

[08:32:52.0000] <JakeA>
nah, s'my fault

[08:35:46.0000] <JakeA>
wanderview: fixed

[08:36:09.0000] <wanderview>
JakeA: thanks!

[08:42:59.0000] <JakeA>
I'm cack at devops

[09:04:05.0000] <wanderview>
JakeA: does that mean "jolly good"?

[10:27:24.0000] <nikkibee>
https://fetch.spec.whatwg.org/#http-network-fetch what does step 1 accomplish? the only time the `credentials` value is used is immediately, in step 2

[10:27:47.0000] <nikkibee>
beyond that, the only time it could come up again is in step 9, which specifically refers to the credentials flag

[10:29:28.0000] <JakeA>
wanderview: hah… ummm… yeahhh

[10:36:38.0000] <annevk>
nikkibee: just turns a flag into a boolean

[10:36:51.0000] <annevk>
nikkibee: in an impl it would just be a boolean without step 1

[10:37:06.0000] <annevk>
nikkibee: perhaps we should just get rid of flags in standards and use booleans throughout

[10:37:13.0000] <nikkibee>
annevk: is a flag a different thing from a boolean? I figured calling it a flag was just a more generic term

[10:37:33.0000] <annevk>
nikkibee: they're identical for all intents and purposes, the prose is just different

[10:37:52.0000] <nikkibee>
gotcha

[10:37:53.0000] <annevk>
nikkibee: which is why step 1 exists since step 2 wants a boolean and not a flag

[10:38:09.0000] <nikkibee>
but the flag already is a boolean?

[10:38:20.0000] <nikkibee>
cause it's true or false

[10:38:25.0000] <annevk>
nikkibee: well, in prose, a flag is set or unset

[10:38:34.0000] <annevk>
nikkibee: it's not true or false

[10:39:04.0000] <annevk>
nikkibee: I've been thinking we should just get rid of flags everywhere

[10:39:06.0000] <nikkibee>
I think replacing 'flags' with 'booleans' would be better... if at least to remove technical redundancy like this

[10:39:35.0000] <annevk>
I'd accept a patch for Fetch

[10:39:40.0000] <nikkibee>
alright

[10:39:50.0000] <annevk>
Perhaps you could file an issue at least to remind me? I can make that change too fairly easily I think

[10:40:08.0000] <annevk>
Bit annoying for dependencies perhaps...

[10:40:33.0000] <nikkibee>
dependencies?

[10:40:46.0000] <annevk>
nikkibee: stuff that builds on Fetch and refers to existing names

[10:40:50.0000] <annevk>
nikkibee: like, HTML

[10:40:56.0000] <nikkibee>
gotcha

[10:41:59.0000] <nikkibee>
I'll file an issue, it might be annoying for dependencies, but I think it'd be a good change all around for clarity

[10:42:20.0000] <nikkibee>
at the least, it won't likely change anywhere without changing somewhere first

[10:46:43.0000] <nikkibee>
annevk: https://github.com/whatwg/fetch/issues/175 issue made :)

[11:16:35.0000] <nikkibee>
https://fetch.spec.whatwg.org/#http-network-fetch step 4 seems like it's got a lot going on for one step. pretty much every paragraph seems like it should be a different step. @ annevk

[11:19:00.0000] <annevk>
nikkibee: yeah... I don't like it either, but the requirements are kinda concurrent, if that makes sense

[11:19:48.0000] <annevk>
nikkibee: ideally the HTTP/TLS specification has some kind of abstraction for this and then the second paragraph and its steps could be a callback for instance, but that's not the case

[11:20:05.0000] <annevk>
nikkibee: so instead we have this slightly patchy landscape

[11:20:15.0000] <nikkibee>
I can see that

[11:20:22.0000] <nikkibee>
when do I run the last set of substeps though?

[11:21:32.0000] <annevk>
nikkibee: those could maybe be moved to become step 10 (with step 10 becoming 11)

[11:22:11.0000] <nikkibee>
that sounds good to me

[11:22:32.0000] <annevk>
nikkibee: still need to run in parallel though since we don't want to block on the stream getting pushed to

[11:22:37.0000] <nikkibee>
actually, in that case it'd be saying "run these after step 11" right?

[11:23:03.0000] <annevk>
nikkibee: well, "in parallel" implies as much

[11:23:27.0000] <nikkibee>
annevk: ah, so it could say "run the following steps in parallel"?

[11:23:37.0000] <annevk>
nikkibee: yeah, as a new step 10

[11:23:42.0000] <nikkibee>
that would be much more clear

[11:23:54.0000] <annevk>
nikkibee: another issue?

[11:24:00.0000] <nikkibee>
sure!

[11:30:29.0000] <nikkibee>
https://github.com/whatwg/fetch/issues/176 done

[11:40:53.0000] <nikkibee>
hey again annevk, https://fetch.spec.whatwg.org/#http-network-fetch in the last substeps for step 4, I'm not sure how to handle 1. If response's body is non-null, set response's body's length to response's body's payload body length.

[11:41:06.0000] <nikkibee>
where do I get the payload body length from? is it the same as the `Content-Length` header?

[11:58:55.0000] <nikkibee>
in step 5, in the conditions, "`Content-Type" appears in each- without a closing ` mark. that must be a typo- I can make a PR to fix it, since it's so tiny

[12:04:37.0000] <nikkibee>
hrm, searching the document says there's 405 (including the two I added) instances of `

[12:05:24.0000] <nikkibee>
I'll see if I can comb through quickly and catch any, it seems there must be at least one other missing ` for there to be an odd number of them

[12:08:02.0000] <annevk>
Content-Length, but might be different in H2?

[12:08:08.0000] <nikkibee>
smarter check: `<code> has 192 results, </code>` has 191 :o

[12:08:16.0000] <nikkibee>
what's H2?

[12:08:32.0000] <annevk>
HTTP2

[12:08:37.0000] <nikkibee>
gotcha

[12:09:07.0000] <nikkibee>
so, it should be in Content-Length, but where can I look up how to deal with it in H2?

[12:10:53.0000] <annevk>
HTTP standards? This is one of the cross-standard issues

[12:11:15.0000] <annevk>
Perhaps we should make a list and ask mnot to make things better

[12:11:51.0000] <nikkibee>
alright, I'll make a note to check that up again when I get to implementation

[12:15:22.0000] <nikkibee>
hrm I couldn't find the missing `, oh well

[12:16:25.0000] <nikkibee>
annevk: should I start my commit message with "Fixes #177"? I noticed you updated my last commit to do so, to link to the PR

[12:18:55.0000] <annevk>
No no need

[12:19:24.0000] <nikkibee>
alright

[12:19:39.0000] <annevk>
Unless you run make as well there are some tweaks needed anyway

[12:19:47.0000] <nikkibee>
gotcha

[12:20:37.0000] <nikkibee>
I hope I run into the third missing backtick... kind of annoying that I can tell it's missing but not where, haha

[12:23:36.0000] <nikkibee>
urk how do I git

[12:23:54.0000] <nikkibee>
I'm comparing changes on github, and it's showing this commit, and my previously accepted commit as changes

[12:24:16.0000] <nikkibee>
I've tried some stuff I was suggested before on updating my repo to the main one, but it's not working :(

[12:54:06.0000] <nikkibee>
annevk: I got it sorted out, and I have advice for preventing that issue in the future :) PR made! https://github.com/whatwg/fetch/pull/177

[12:54:20.0000] <nikkibee>
I wish it was a bigger PR for how much I had to learn about git to do that, haha

[12:55:35.0000] <nikkibee>
I'm going to be heading out now, so if there's any feedback I'll get to that tonight / tomorrow :)

[13:17:02.0000] <annevk>
Next week before the feedback will show up though 😊


2015-12-14
[00:53:24.0000] <MikeSmith>
anybody used letsencrypt yet for a cert for one of your domains?

[00:55:51.0000] <ondras>
yes

[00:55:53.0000] <ondras>
I did

[00:56:03.0000] <ondras>
about a week ago

[01:09:34.0000] <philipj>
MikeSmith: me too, and davve

[01:19:17.0000] <MikeSmith>
ondras, philipj: was the setup as easy as you'd expected? do you know roughly how long it took you?

[01:23:20.0000] <philipj>
MikeSmith: it was more manual than I expected, and I probably spend 4-8 hours on it in total, two evenings I think

[01:23:55.0000] <philipj>
well, getting the certs was pretty quick, but tweaking everything to make https://www.ssllabs.com/ssltest/ happy took more time

[01:24:14.0000] <ondras>
agreed

[01:24:29.0000] <MikeSmith>
ok

[01:24:38.0000] <MikeSmith>
that's kind of what I figured

[01:24:47.0000] <ondras>
getting the cert was easy, using the "certonly" feature

[01:24:53.0000] <MikeSmith>
ok

[01:24:55.0000] <ondras>
it worked OOTB using the git version

[01:25:07.0000] <MikeSmith>
cool

[01:25:12.0000] <philipj>
ondras: were you running an HTTP server on that host at the time?

[01:25:13.0000] <ondras>
but getting an "A" rank (just for teh lulz, probably) meant updating to apache 2.4

[01:25:16.0000] <ondras>
on my old debian box

[01:25:20.0000] <ondras>
philipj: yes, precisely

[01:25:30.0000] <ondras>
and updating apache 2.2 -> 2.4 was a major pita

[01:25:33.0000] <philipj>
I was, and thus I coulnd't use the automatic stuff, had to had some files to make my exsiting server serve the files

[01:25:37.0000] <ondras>
due to poor and old vhost config on that machine

[01:25:52.0000] <philipj>
had to *add* some files, and change the Content-Type too

[01:25:58.0000] <ondras>
well the "certonly" with "--webroot" worked automatically for me

[01:26:11.0000] <ondras>
it placed some files to webroot, used them and removed afterwards

[01:26:32.0000] <ondras>
I think that one empy .someletsencryptstuff dir remained there

[01:26:40.0000] <ondras>
I deleted that manually

[01:26:43.0000] <ondras>
*empty

[01:27:01.0000] <philipj>
oh, I didn't know about --webroot

[01:27:28.0000] <ondras>
MikeSmith: I also had to install some packages to satisfy dependencies, as letsencrypt was not available as a .deb package for my distro

[01:27:41.0000] <ondras>
MikeSmith: but just getting this thing set up and getting the cert was about half an hour of work

[01:27:53.0000] <ondras>
pretty easy even with my lame admin skills

[01:29:40.0000] <MikeSmith>
ondras: good to know. And I'm running Debian testing, so I reckon I shouldn't have a problem with getting the packages

[01:31:12.0000] <MikeSmith>
for the first domain I want to set up I also already have my nginx tweaks in place with my existing cert at a full A+ https://www.ssllabs.com/ssltest/analyze.html?d=sideshowbarker.net

[01:31:38.0000] <MikeSmith>
so I'm hoping I won't need to (re)make those changes

[01:32:18.0000] <MikeSmith>
current cert expires in February so I reckon switching over before then would be good

[01:32:26.0000] <MikeSmith>
nice holiday project

[01:37:17.0000] <ondras>
cool

[01:37:26.0000] <ondras>
shall be straightforward in your case

[01:37:29.0000] <ondras>
good luck :)

[01:41:27.0000] <MikeSmith>
cheers

[01:41:57.0000] <philipj>
ondras: did have trouble with https://github.com/letsencrypt/letsencrypt/issues/1668 ?

[01:42:58.0000] <ondras>
philipj: no. I used "--webroot -d domain.name -w /path/to/webroot"

[01:43:06.0000] <ondras>
not sure if the bug applies in this setup

[02:02:09.0000] <philipj>
ondras: thanks, that worked, now renewing is just a one-liner :)

[02:02:54.0000] <ondras>
exactly :)

[02:50:34.0000] <annevk>
I guess for whatwg.org we'll just wait for DreamHost to roll out Let's Encrypt...

[02:50:50.0000] <annevk>
Unless that doesn't happen by the summer, in which case we might have to do something one way or another

[05:41:58.0000] <annevk>
Domenic: JakeA: what do you think about the suggestion in https://github.com/whatwg/fetch/issues/20#issuecomment-164421065?

[05:57:47.0000] <JakeA>
annevk: why does that need to be an api, given it can be implemented on top of abort() really easily?

[05:58:24.0000] <annevk>
JakeA: I guess folks don't want to wait for abort()

[05:58:31.0000] <annevk>
JakeA: but yeah, you're right

[06:00:56.0000] <JakeA>
annevk: maybe we need to look for an abort solution that doesn't have as many external dependencies as cancellable promises :/

[06:01:42.0000] <JakeA>
Domenic: did I see you post that there'd been discussions on cancellable promises at tc39?

[06:02:12.0000] <annevk>
JakeA: that is an alternative, though none look attractive enough

[06:02:27.0000] <annevk>
JakeA: basically the API would become worse than XHR, afaict

[06:09:46.0000] <Domenic>
JakeA: kind of, basically still waiting on me though.

[06:10:12.0000] <Domenic>
annevk: I definitely don't like providing a halfway abort method

[06:10:40.0000] <Domenic>
annevk: I think waiting is still the right move here tbh. XHR isn't going anywhere for now.

[06:11:10.0000] <Domenic>
annevk: the only feasible thing I can think of is if we say that cancelation/abortion is different from timeout, and timeout is somehow actually an error condition. In which case adding a sugary { timeout: ... } option seems somewhat OK.

[06:13:32.0000] <JakeA>
Domenic: I still think it's better composed in that case

[06:15:49.0000] <JakeA>
A timeout being a time-based reaction, where aborting the request will be one part, but rejecting could be another

[06:18:09.0000] <annevk>
Domenic: XMLHttpRequest is not exposed in service workers, but I guess the latter are still somewhat experimental

[06:22:45.0000] <Domenic>
JakeA: I don't think I understand what you're saying

[06:23:11.0000] <Domenic>
Oh hmm I think I do now

[06:23:30.0000] <JakeA>
Domenic: I could create a promise that aborts a fetch then rejects

[06:23:46.0000] <Domenic>
yeah, makes sense

[06:23:54.0000] <Domenic>
But we could say that { timeout } is sugar for that

[06:24:01.0000] <Domenic>
instead of sugar for just aborting the fetch

[06:55:14.0000] <wanderview>
JakeA: in regards to your comment here, I personally don't like streams for progress notifications https://github.com/whatwg/fetch/issues/20#issuecomment-164457161

[06:56:30.0000] <wanderview>
JakeA: its problematic to get the same "progress based on when bytes are written-to/read-from OS kernel" that we have today with streams that might be piped together through many layers, etc

[06:57:23.0000] <wanderview>
thought I would mention it here, since that issue is not really about progress

[06:58:15.0000] <JakeA>
Domenic: why is sugar for timeout ok, but sugar for failing on a non-success code not ok?

[06:59:21.0000] <JakeA>
wanderview: hmm, does that apply to both uploads and downloads?

[07:00:31.0000] <wanderview>
JakeA: definitely applies to uploads... I'm unsure about the requirements for downloads

[07:00:52.0000] <wanderview>
JakeA: requiring someone to hook the stream seems very heavyweight from an API perspective as well

[07:01:01.0000] <wanderview>
JakeA: I'd rather just have progress events

[07:01:44.0000] <annevk>
ProgressPromise?

[07:02:11.0000] <annevk>
wanderview: is this something that can wait though?

[07:02:38.0000] <annevk>
wanderview: seems like doing some iterations with streams first would be good before we go higher-level again

[07:02:42.0000] <wanderview>
annevk: I only mention it because I see people saying "streams is the primitive for progress everyone should plan on using"

[07:03:01.0000] <wanderview>
annevk: not if it means we have to contort the streams implementation to accomodate these weird "progress-at-the-kernel" requirements

[07:03:09.0000] <annevk>
wanderview: what does the browser use internally for progress events?

[07:03:13.0000] <wanderview>
if we can relax those requirements, then fine by me

[07:03:55.0000] <wanderview>
annevk: for uploads it fires events based on when things write() is called on the socket

[07:04:07.0000] <wanderview>
annevk: not based on when it reads the data out of the upload stream

[07:05:27.0000] <annevk>
I see

[07:06:21.0000] <annevk>
wanderview: you don't think placing progress observers on streams makes sense at all?

[07:07:26.0000] <Domenic>
JakeA: it's not really OK.

[07:07:40.0000] <wanderview>
annevk: sure it does, but I don't think trying to make a streams progress reflect downstream operations (like writing to the kernel) makes sense...

[07:08:03.0000] <wanderview>
annevk: so if people are ok with it not really being at the external interface boundary, I'm fine with it

[07:11:18.0000] <annevk>
wanderview: I'm not sure what that means

[07:11:45.0000] <annevk>
wanderview: what JakeA said in that issue makes sense to me and has been our idea about "progress" for a while

[07:12:17.0000] <annevk>
wanderview: if that is wrong, file an issue against streams? Or maybe against fetch? Though it seems like the streams folks would have to be convinced we need something else

[07:14:11.0000] <wanderview>
annevk: ok... I haven't seen the issue or PR to add this stuff... so its a bit abstract still... I am just thinking back to the debates about WritableStream for Request.body with the goal of trying to get progress at the os kernel layer... I think we backed away from that... I want to make sure we don't end up there again

[07:14:12.0000] <hsivonen>
/me discovers that the ISO-2022-JP decoder in the Encoding Standard can unread two bytes after reading one byte

[07:15:43.0000] <hsivonen>
:-(

[07:16:23.0000] <annevk>
hsivonen: I think you need a buffer of three or so

[07:16:33.0000] <wanderview>
annevk: I guess another way to state my view... I'm fine with a progress monitor on a stream as long as its monitoring the state of that stream instance and not something else in the system

[07:16:40.0000] <hsivonen>
annevk: why three?

[07:17:40.0000] <hsivonen>
I don't want to implement any actual prepending. Unreading the byte that was just read is fine, though. Just moves the pointer backwards in a way that's never out of bounds.

[07:18:28.0000] <hsivonen>
/me tries to work out what'll happen next when the two prepended bytes are processed

[07:19:32.0000] <annevk>
hsivonen: oh, maybe two is sufficient with the prepend rewrite, I was just going from memory and what Joshua told me at some point

[07:21:27.0000] <annevk>
wanderview: that makes sense

[07:21:40.0000] <hsivonen>
looks like I will need to work out what the possible combinations for the fields of the ISO-2022-JP decoder are at the end of the escape state :-(

[07:21:55.0000] <annevk>
wanderview: perhaps it's worth raising an issue on fetch-with-streams then to point out XMLHttpRequest progress events cannot be done on top of streams?

[07:32:12.0000] <annevk>
Domenic: thank you btw for rewriting the way workers work

[07:32:39.0000] <annevk>
Domenic: it bugged me too, but I thought rewriting it would require changing the way MessageChannel works

[07:34:52.0000] <annevk>
Domenic: seems you carefully navigated around that

[07:35:53.0000] <Domenic>
Yeah, that was... fun :)

[07:43:46.0000] <annevk>
Domenic: should we have some compat label for HTML issues? To indicate interop issues and make it easier to track them?

[07:44:18.0000] <Domenic>
annevk: what were you thinking?

[07:45:28.0000] <JakeA>
annevk: wanderview: streams for reading downloads makes sense to me. When I report 50% done I expect to have 50% of the resource in my possession (ignoring lies in content-length). I agree that it might not fit for uploads.

[07:46:14.0000] <JakeA>
Since its possible for my stream to be 100% consumed but none of it sent to the server. Especially as fetch does its own buffering for redirects

[07:46:17.0000] <wanderview>
JakeA: yea... download is less problematic than upload... I guess because download is about "read status", while upload is really about "write status"

[07:46:43.0000] <annevk>
Domenic: a label called "compat" e.g., for https://github.com/whatwg/html/issues/387 which I guess is an addition/proposal, but not really in the same sense

[07:47:16.0000] <Domenic>
Yeah I still think sent to the kernel or TCP ACKed would be ideal, but wanderview doesn't want to implement that :(

[07:47:43.0000] <Domenic>
annevk: seems reasonable, yeah

[07:47:51.0000] <wanderview>
Domenic: I don't mind implementing it (we do it today)... I just don't want a stream created before actually opening the socket to report that status

[07:48:18.0000] <Domenic>
wanderview: hmm I am confused, when was anyone proposing that?

[07:48:49.0000] <wanderview>
Domenic: back when there was the suggestion Request should provide a WritableStream

[07:48:58.0000] <wanderview>
not recently

[07:49:22.0000] <Domenic>
I don't understand. The writable stream proposal was never saying that the write() method on the writable stream should report that status before the socket is opened.

[07:51:20.0000] <wanderview>
Domenic: I'm saying the Request object is time disconnected from the socket write... so is not a good place to report written-to-os-kernel status... but I don't really want to replay the whole debate again

[07:52:09.0000] <Domenic>
wanderview: right, OK. I was thinking of the proposal where we have a separate API for establishing an upload writable stream, not accounting for Request per se.

[07:52:21.0000] <Domenic>
But yeah I remember the time-disconnectedness of Request being a problem.

[07:52:50.0000] <wanderview>
I guess I just want to make sure we know we need something other than stream progress monitor to achieve XHR upload progress events

[07:54:17.0000] <Domenic>
yeah

[07:54:33.0000] <Domenic>
I think my current mental model is that there is a separate establishUploadWritableStream() API

[07:54:55.0000] <Domenic>
and fetch(request) does const ws = establishUploadWritableStream(); request.body.pipeTo(ws)

[07:55:13.0000] <Domenic>
just a mental model though

[08:00:06.0000] <wanderview>
Domenic: implementation will likely be very different from that... javascript runs in the child process while writting the upload stream to the kernel will take place in the parent process

[08:03:37.0000] <annevk>
Domenic: reportedly bz (on vacation now) has a promise implementation of toBlob somewhere in a Mozilla bug

[08:03:49.0000] <annevk>
Domenic: just waiting for a decision on a new name and such

[08:04:31.0000] <Domenic>
annevk: we should decide on a name and let blink-dev know then...

[08:05:20.0000] <annevk>
I'm happy with encode/convert, but would be good to double check with bz in January

[08:05:59.0000] <Domenic>
HTML's use of ES ArrayBuffer vs. IDL ArrayBuffer is pretty confused still hmm what should I do

[08:06:17.0000] <annevk>
Domenic: structured clone biting you?

[08:06:20.0000] <Domenic>
I would use IDL everywhere but the spec likes to talk about "creating ArrayBuffers" which IDL doesn't really deal with

[08:06:36.0000] <annevk>
Domenic: oh <canvas>

[08:07:05.0000] <annevk>
Domenic: in theory IDL should deal with that to some extent, to make sure the object setup is correct

[08:07:22.0000] <annevk>
Domenic: e.g., when we say "a new promise" or "a new XMLHttpRequest object", it has all the same problems

[08:07:26.0000] <Domenic>
Yeah

[08:07:31.0000] <Domenic>
I guess I'll switch to IDL everywhere?

[08:07:54.0000] <annevk>
Domenic: yeah, structured cloning itself should probably move to IDL or be rewritten to some extent

[08:08:16.0000] <annevk>
Domenic: but just creating objects should be fine and IDL needs some language around what "new" means or "create"

[08:08:25.0000] <annevk>
Domenic: similar to how it has language around "throw"

[08:08:35.0000] <annevk>
Domenic: ideally longer term it also defines loops and such

[08:26:35.0000] <annevk>
Domenic: sad that it fall upon you to define globalThis in JavaScript, but glad you did

[08:26:49.0000] <Domenic>
yeah glad to finally knock that out

[08:26:59.0000] <annevk>
Domenic: so that was the other thing I wanted to ask about, should we use "JavaScript" or "ECMAScript" throughout?

[08:27:18.0000] <Domenic>
annevk: the current spec has a note about that somewhere

[08:27:21.0000] <annevk>
Domenic: it seems IDL uses ECMAScript, most WHATWG specs, including the one named javascript, use JavaScript

[08:28:05.0000] <annevk>
I think even (some of) TC39 wants to use JavaScript, but Brendan mentioned some issues with Oracle iirc

[08:28:11.0000] <Domenic>
"The term "JavaScript" is used to refer to ECMA262, rather than the official term ECMAScript, since the term JavaScript is more widely known."

[08:28:12.0000] <gsnedders>
/me waits for Oracle sue

[08:28:19.0000] <Domenic>
I think using JS is pretty good

[08:28:30.0000] <gsnedders>
annevk: there are issues with Oracle because they own the JavaScript trademark

[08:28:36.0000] <annevk>
Okay, I guess we should just stick to that then

[08:28:50.0000] <Domenic>
Hmm I won't bother updating this "lives in a window"/"lives in a worker" thing. It is not as easy in HTML as it is in XHR. We should just kill those sections ASAP.

[08:30:57.0000] <Domenic>
BTW I am having ES take over the stack of scripts basically

[08:31:07.0000] <Domenic>
It will also work with modules

[08:31:15.0000] <Domenic>
(This is not in the current PR, it's upcoming)

[08:31:26.0000] <Domenic>
https://github.com/tc39/ecma262/pull/242

[08:32:23.0000] <annevk>
Domenic: including script settings?

[08:32:40.0000] <annevk>
Domenic: or will those remain HTML things?

[08:33:43.0000] <Domenic>
I think script settings will stay for noe

[08:34:55.0000] <Domenic>
But each ES script/module will have a [[HostDefined]] slot containing the script settings object. And so ES can track the stack of them.

[08:38:01.0000] <annevk>
https://en.wikipedia.org/wiki/JavaScript#Trademark suggests Mozilla has a license for use of the JavaScript trademark, but the link does not really verify that claim

[08:47:13.0000] <annevk>
Domenic: if you instantiate your own Realm don't you get a different kind of global associated with it? But I guess things can be refactored once that actually happens

[08:47:48.0000] <Domenic>
annevk: hmm perhaps true... but yeah.

[08:55:40.0000] <annevk>
Domenic: I made some progress last week btw on figuring out what the setup for Location needs to become and also Window/WindowProxy

[08:55:57.0000] <annevk>
Domenic: it seems like WindowProxy will need to handle all the security checks currently on Window too

[08:56:00.0000] <Domenic>
annevk: good to hear yeah... still not sure how to best handle the IDL vs. not-IDL thing

[08:56:32.0000] <annevk>
Domenic: Location becomes an IDL thing, but IDL will also support redefining internal methods for IDL things

[08:56:43.0000] <Domenic>
Hmm

[08:57:06.0000] <Domenic>
One path I thought might work is to define Window + Location in IDL completely but then define WindowProxy + LocationProxy in ES terms

[08:57:19.0000] <Domenic>
(or, I guess, Window + BackingLocation and WindowProxy + Location)

[08:57:41.0000] <Domenic>
But by now you are much more familiar with the problem space than I.

[08:58:37.0000] <wanderview>
annevk: I guess this is related? https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/bpbq0Rcpauk

[08:58:52.0000] <wanderview>
maybe we don't need that level of granularity any more?

[09:13:11.0000] <annevk>
wanderview: that's not related

[09:13:58.0000] <annevk>
wanderview: that's some legacy stuff, older names for "loaded" and "total" https://xhr.spec.whatwg.org/#interface-progressevent

[10:31:16.0000] <JakeA>
wanderview: been bouncing the idea of transactional cache stuff in my head. Starting to settle on something like cache.transactionUntil(promise) - meaning this instance of cache holds a write-lock until the promise settles

[10:31:33.0000] <JakeA>
(or the instance is GC'd, which could be a sticking point)

[10:32:40.0000] <paxcoder>
annevk: Hello. Months have passed. It's time for me to ask about UndoManager again. What's up with it, what is its problem? Is it missing a consistency model, is that is? Or is there a simpler reason why it's stuck on the 2012 Niwa draft?

[10:33:09.0000] <JakeA>
wanderview: I'm moving away from batching, as it doesn't allow you to read from a cache, then do writes based on what you read

[10:33:18.0000] <annevk>
paxcoder: heh, I'm not sure

[10:34:11.0000] <annevk>
paxcoder: Gecko reportedly has some implementation of which the state is unclear to me; rniwa left Google and joined Apple and at the same time realigned interests I think

[10:34:47.0000] <annevk>
paxcoder: so, there's nobody that's working on it, and nobody is really interested in pursuing it as far as I can tell

[10:35:46.0000] <paxcoder>
That's weird. Esp. with Github's Atom editor and Microsoft's fork.

[10:38:46.0000] <annevk>
Well, what does have some traction is a different more low-level approach to editing

[10:39:08.0000] <paxcoder>
What do you mean?

[10:39:10.0000] <annevk>
So perhaps if that is done UndoManager can be a thing that is implemented by the application more easily

[10:39:39.0000] <annevk>
I haven't really followed what is going on since it's not clear to me it's going well, but https://w3c.github.io/editing/

[10:43:54.0000] <Domenic>
JakeA: you should talk to jsbell; he has ideas around transactions/locking/etc. in general.

[10:44:05.0000] <paxcoder>
annevk: If I'm silent I'm looking into things, doesn't mean I don't appreciate. FYI

[10:46:08.0000] <paxcoder>
annevk: BTW. While I'm reading this, I ran into your voice on... what was it.. The Web Platform Podcast perhaps? Idk. Anyway still refreshing my feeds hoping to scoop up a blog post of yours some time.

[10:47:16.0000] <annevk>
paxcoder: ah yes, I have an idea for a blog post now, so maybe it'll happen :-)

[10:47:50.0000] <annevk>
paxcoder: and I did appear on such a podcast once, so perhaps

[10:48:26.0000] <JakeA>
Domenic: yeah, I know IDB is going with the waitUntil model, but good point about locking. I'd like to get away with write-locking only, but this is where I have less experience.

[10:48:38.0000] <annevk>
paxcoder: and yeah, I think having UndoManager handled by the browser could definitely help out a bunch of folks, but I think in the end it hasn't been fully tackled since it was too hard and editing in the browser still largely sucks

[10:49:11.0000] <annevk>
paxcoder: perhaps you can reach out to rniwa on Twitter or IRC somewhere and get a more complete story

[10:50:39.0000] <paxcoder>
annevk: The looks of these input events remind me of iOS, but iOS has rich string thingies, and the web does not, so I don't see how that helps with syntax highlighting or WYSIWG editors. What will the blog post be about if I may inquire?

[10:55:00.0000] <paxcoder>
annevk: does rniwa come here or did you mean some other channel?

[10:58:22.0000] <paxcoder>
Question for everybody: What do you use instead of caniuse.com?

[10:59:56.0000] <paxcoder>
/me begins to suspect execCommand may have something to do with the missing richstring feature

[11:04:35.0000] <paxcoder>
interesting

[12:02:48.0000] <wanderview>
JakeA: I'd like to know the real world use case driving transactions for Cache

[12:04:56.0000] <wanderview>
JakeA: or another way to ask the question... if some needs the complexity of transactional behavior, can they just use IDB?

[12:14:12.0000] <wanderview>
JakeA: also, I think we already have a transaction mechanism in SW...  the install and activate events

[12:14:52.0000] <wanderview>
maybe thats over stating it, but they fill a similar role


2015-12-15
[18:54:04.0000] <caitp>
so, some colleagues were talking about some security issues they were working on for stands implementation, and one was not convinced there was any need to do things differently from plain user space js

[18:54:56.0000] <caitp>
i tried to explain the threat model of leaking info synchronously, but admittedly, it's hard to come up with something compelling

[18:55:40.0000] <MikeSmith>
caitp: what is "stands"

[18:55:50.0000] <caitp>
streams

[18:55:58.0000] <caitp>
Swype-o

[18:58:38.0000] <MikeSmith>
ah ok

[18:59:59.0000] <MikeSmith>
I wasn't aware there's what new security risks Streams exposes

[19:00:03.0000] <MikeSmith>
/me looks at the spec

[19:00:33.0000] <caitp>
in this case they're talking about [[private field]] vs normal fields, afaik

[19:00:41.0000] <caitp>
properties*

[19:01:01.0000] <MikeSmith>
oh

[19:02:45.0000] <MikeSmith>
I don't remember reading discussion of that yet

[19:03:12.0000] <MikeSmith>
I mean in the github issue trackers discussions for Streams

[19:03:34.0000] <MikeSmith>
but maybe I need to read more carefully

[19:04:04.0000] <caitp>
it was either about implementation in blink or WebKit, probably blink because it sounded like they were using the private symbols thing there

[19:04:14.0000] <caitp>
so not spec specific necessarily

[19:04:15.0000] <MikeSmith>
ok

[19:04:41.0000] <MikeSmith>
incidentally I realize now that it seems like Streams discussion has slowed down a lot recently

[19:05:00.0000] <MikeSmith>
I used to get a lot of issue notifications for it but not much at all lately

[19:05:07.0000] <MikeSmith>
ah OK

[19:06:11.0000] <MikeSmith>
anyway at that level it seems like there are all kinds of gotchas when implementing something like this

[19:06:23.0000] <MikeSmith>
I mean in C++

[19:07:29.0000] <caitp>
there is definitely a potential issue if user space gets control of non user space stuff, but i mean more in general about cross origin communications channels in DOM

[19:08:00.0000] <caitp>
seems like it could be useful for notifying an attacker of some kind of side channel, maybe

[19:08:53.0000] <MikeSmith>
oh

[19:09:01.0000] <MikeSmith>
I see now

[19:10:33.0000] <MikeSmith>
caitp: btw you working on browser-engine code these days?

[19:11:05.0000] <MikeSmith>
still contributing to Angular?

[19:11:14.0000] <caitp>
v8/webkit/blink, from most frequently to least frequently

[19:12:00.0000] <MikeSmith>
ah

[19:12:07.0000] <MikeSmith>
didn't know

[19:13:57.0000] <MikeSmith>
/me peruses some commit logs

[19:14:47.0000] <MikeSmith>
ara

[19:14:58.0000] <MikeSmith>
caitp: you working at Igalia?

[19:15:26.0000] <caitp>
yeeah, joined this summer/fall

[19:16:09.0000] <MikeSmith>
very cool

[19:16:18.0000] <MikeSmith>
massive respect to them

[19:17:09.0000] <MikeSmith>
seems like a very exceptional group of people

[19:17:18.0000] <caitp>
i think at least some of them hang out in here from time to time :p

[19:17:32.0000] <MikeSmith>
didn't know that

[19:18:09.0000] <MikeSmith>
I guess there's probably a few more people working there now than I realize

[19:18:41.0000] <MikeSmith>
I don't actually personally know anybody else who works there so well

[19:18:48.0000] <MikeSmith>
well I know Joanie some

[19:19:14.0000] <MikeSmith>
Joanmarie

[19:19:18.0000] <MikeSmith>
super cool

[19:19:20.0000] <caitp>
yeah, I thought spec editors would probably know her

[19:20:14.0000] <MikeSmith>
yeah, I'm extremely glad she's able to spend time contribuing to spec discussions, especially for accessibility stuff

[19:20:35.0000] <MikeSmith>
I think she's a major asset to the accessibility effort

[19:20:42.0000] <MikeSmith>
and voice of reason, etc.

[00:29:38.0000] <MikeSmith>
zcorpan: will review the build PR today

[00:29:52.0000] <zcorpan>
MikeSmith: ok thx

[00:30:07.0000] <MikeSmith>
(wasn't ignoring it, but just been working on trying to get a new validator release out)

[00:31:10.0000] <MikeSmith>
zcorpan: btw I finally changed the validator behavior to not report errors for ampersand cases that the spec says are not errors

[00:31:32.0000] <zcorpan>
(no worries)

[00:33:15.0000] <zcorpan>
MikeSmith: oh, cool. didn't you want the rules to be simpler there? or is the current spec OK?

[00:38:47.0000] <MikeSmith>
zcorpan: current spec is OK by me

[00:39:10.0000] <MikeSmith>
what I implemented in the parser conforms to the current spec, as far as I can remember

[00:39:27.0000] <zcorpan>
ok

[00:39:58.0000] <MikeSmith>
I'm a little fuzzy on it because I wrote the patch probably a year ago

[00:41:37.0000] <MikeSmith>
and to be the change hasn't been merged into the parser trunk; I'm resorting to checking it into a branch and having the validator use a build from that branch

[00:41:44.0000] <MikeSmith>
*and to be clear,

[01:03:36.0000] <zcorpan>
ok

[01:07:34.0000] <howdoi>
What does the service worker has acess to?

[01:07:45.0000] <howdoi>
I can't access DOM for sure, nor XHR

[01:14:28.0000] <annevk>
howdoi: you can use fetch()

[01:14:48.0000] <annevk>
howdoi: it should have most APIs that are exposed in workers, minus a few

[01:18:26.0000] <howdoi>
annevk: is there any list of which it can access and which it can't ?

[01:18:39.0000] <howdoi>
annevk: I am reading http://www.w3.org/TR/service-workers/

[01:18:52.0000] <annevk>
howdoi: don't really know if anyone keeps a list

[01:19:12.0000] <annevk>
howdoi: read https://slightlyoff.github.io/ServiceWorker/spec/service_worker/ instead

[01:19:24.0000] <annevk>
howdoi: TR/ drafts are almost always the wrong thing to be reading

[01:19:34.0000] <howdoi>
 Working Draft  would be talking about it in bits and pieces

[01:20:33.0000] <annevk>
howdoi: I'm not sure what you mean, but the SW specification would not really talk about what APIs are available from ServiceWorkerGlobalScope, that's mostly up to other specifications

[01:32:27.0000] <howdoi>
annevk: thanks, I shall re-read it

[01:38:20.0000] <yoav>
annevk: friendly ping re https://github.com/whatwg/dom/pull/123 :)

[01:56:39.0000] <annevk>
Thanks, so many GitHub things to look at... Halved the list so far.

[01:57:28.0000] <annevk>
yoav: are you using an older version of bikeshed?

[01:57:37.0000] <yoav>
maybe...

[01:57:45.0000] <yoav>
I'll update and see if it changes things

[01:57:46.0000] <annevk>
yoav: it seems your generated dom.html changes the formatting of a bunch of things

[01:58:01.0000] <annevk>
yoav: I guess I can merge and overwrite that locally

[01:59:20.0000] <yoav>
I'm trying to update and see what it does, but feel free to merge and overwrite if you prefer

[02:02:50.0000] <annevk>
yoav: it seems that might be the problem; I merged this one, I guess now you've updated it'll be fine for the patch that fixes where supported tokens lives

[02:03:20.0000] <yoav>
yeah, the update was the issue :)

[02:52:01.0000] <nox>
annevk: No need to thank me, I introduced that damn typo. :)

[02:52:15.0000] <annevk>
heh

[02:52:28.0000] <annevk>
Well, I reviewed that change...

[02:53:18.0000] <nox>
annevk: Hah, true. :)

[04:29:20.0000] <howdoi>
annevk: jsfeatures.in is a progressive webapp, but the add to home screen banner is not getting triggered even after the bypass flag is enabled, any idea?

[05:15:21.0000] <annevk>
howdoi: nope

[05:21:44.0000] <smaug____>
hmm, I think I'm still missing webapps mailing list emails

[05:22:16.0000] <Domenic>
annevk: is https://github.com/whatwg/html/pull/373 ready to go or still reviewing?

[05:22:43.0000] <smaug____>
MikeSmith: is there some way to know who all are subscribed to webapps mailing list?

[05:23:01.0000] <smaug____>
I wonder if most of the people were kicked out there last week

[05:24:37.0000] <annevk>
Domenic: I think it requires globalThis to land on the other side, no?

[05:24:54.0000] <Domenic>
annevk: oh, that happened already, that's when I removed the "do not merge" label :)

[05:25:42.0000] <Domenic>
execution context tracking (for the script execution PR) is still in progress, but globalThis and InitializeHostDefinedRealm are now in ES

[05:25:54.0000] <annevk>
Domenic: hmm, the ECMAScript PR still has globalThis as an outstanding commit

[05:26:47.0000] <annevk>
Domenic: https://github.com/tc39/ecma262/commit/9474c58c6baf54e8b5347a182c2fa6ee10dab071 but I guess maybe that PR needs rebasing?

[05:27:44.0000] <Domenic>
annevk: the "master es2016-draft-20151210 " in the header of the commit means it's been merged into master and released in a tagged snapshot

[05:28:27.0000] <Domenic>
Ah it's that GitHub UI bug

[05:28:33.0000] <annevk>
Domenic: so I think it's good to merge then, ideally heycam also reviews this but we can ask him to come in after the fact

[05:28:55.0000] <Domenic>
He merged 3/4 commits in the PR, but GitHub doesn't update the PR to show that

[05:29:01.0000] <Domenic>
\o/

[05:29:05.0000] <Domenic>
Yeah IDL needs more updates...

[05:29:14.0000] <Domenic>
IDL doesn't even talk about script settings objects, it talks about "stack of scripts"?

[05:29:56.0000] <Domenic>
This experience has convinced me to move IDL updates up on the priority stack, although they are still below cancelable promises which are below this script/module work.

[05:30:07.0000] <annevk>
I think I convinced heycam last week to do most of my outstanding requests regarding internal slots, more formalized algorithms, this, current realm, etc. but I'm not sure what timeline we're looking at

[05:31:26.0000] <annevk>
Domenic: so will you merge 373 yourself?

[05:31:39.0000] <Domenic>
annevk: yeah I will, when I get to work in a couple hours.

[05:31:59.0000] <annevk>
such great refactoring

[05:32:00.0000] <Domenic>
My biggest requests for IDL are an update for latest ES, and a merger of the two type sections/getting rid of the seperate "ES binding" concept.

[05:32:12.0000] <smaug____>
ahaa, bug in session history algo. "8. If the specified entry is not an entry with persisted user state, but its URL has a fragment identifier, scroll to the fragment identifier." should not happen when coming from bfcache

[05:32:41.0000] <annevk>
smaug____: I guess that wasn't considered since only Firefox has a bfcache :/

[05:33:11.0000] <Domenic>
why is bfcache allowed in the standard? Can't it be a nonstandard Firefox extension if only one browser implements it and it affects interop in these kind of ways?

[05:33:29.0000] <smaug____>
annevk: webkit has it too

[05:33:49.0000] <Domenic>
hmmm

[05:34:07.0000] <annevk>
Domenic: so apparently WebKit has it too, but there's events too and I think someone told me a lot of the same issues come up with preload

[05:34:31.0000] <Domenic>
yeah this seems like the kind of interop situation we try to fix, not codify into the standard as "do either one, it's fine"

[05:34:55.0000] <smaug____>
hmm, perhaps that step 8 is fine if "entry with persisted user state" is interpreted certain way

[05:41:12.0000] <annevk>
Domenic: so I think Chrome is not convinced about the complexity of this feature and believes that typically the network is fast enough so that reloading is fine

[05:41:27.0000] <annevk>
Domenic: whereas other browsers want to retain some representation

[05:41:32.0000] <howdoi>
await is boring with try-catch block

[05:42:26.0000] <annevk>
Domenic: also, this being history and that fundamentally being tied to UI makes it hard to see a fully interoperable future, but perhaps we can get closer in some aspects

[05:54:19.0000] <annevk>
Domenic: so should https://bugs.ecmascript.org/show_bug.cgi?id=1898 be marked fixed?

[05:54:27.0000] <annevk>
Perhaps better to ask that in jslang

[06:00:53.0000] <Ms2ger>
Domenic, annevk: is https://github.com/domenic/window-proxy-spec still worth looking at?

[06:01:07.0000] <annevk>
Ms2ger: for same-origin only

[06:01:14.0000] <Ms2ger>
Right

[06:01:59.0000] <annevk>
Ms2ger: I need to find time to study the discussion from last week and write up something more coherent, but thus far I'm mostly catching up

[06:02:13.0000] <Ms2ger>
Ok

[06:02:18.0000] <annevk>
Ms2ger: and apparently I'm somewhat legally obliged to take more holiday for the remainder of the year starting Friday so...

[06:02:34.0000] <Ms2ger>
/me ponders trying to make nox write it up

[06:03:18.0000] <nox>
I would like some WebIDL stuff to actually support WindowProxy.

[06:03:32.0000] <annevk>
Heh, it's an interesting challenge for sure

[06:03:47.0000] <nox>
Because the current WindowProxy stuff in HTML is laughable.

[06:03:48.0000] <annevk>
nox: what would IDL provide?

[06:04:10.0000] <annevk>
nox: as I understand it all we need is internal methods which IDL doesn't really help with in any meaningful way

[06:04:14.0000] <nox>
No idea, but it seems insane to me that we have WindowProxy in the middle of nowhere, with a very vague definition, etc etc.

[06:04:29.0000] <Ms2ger>
annevk is working on the "vague" part, at least

[06:04:55.0000] <nox>
annevk: Well, ES6 has proxies, WebIDL doesn't, what about "proxy WindowProxy { /* what goes there to be defined */ }"

[06:05:18.0000] <annevk>
What Domenic has written up coupled up with more internal methods overrides and origin checks is roughly what we'll end up with I suspect

[06:05:43.0000] <annevk>
nox: if your IDL "interface" (to be renamed "class" one day) defines getter/setter stuff you'll get a proxy

[06:05:46.0000] <nox>
annevk: Still sounds better than prose with a interface not defined anywhere in actual IDL.

[06:06:40.0000] <MikeSmith>
smaug____: there's no public way to view the set of subscribers to a list afaik. I can see it myself though

[06:06:51.0000] <Domenic>
I think you would need a pretty new language if you wanted to write up WindowProxy in IDL

[06:06:57.0000] <nox>
Domenic: Ah?

[06:07:36.0000] <annevk>
MikeSmith: that API is available to Members too

[06:07:40.0000] <Domenic>
nox: it doesn't correspond to basically any concepts in IDL as it exists today. Extending IDL to give enough power would essentially create a micro-language inside IDL which is entirely composed of features to make WindowProxy work.

[06:07:53.0000] <nox>
I see.

[06:08:57.0000] <annevk>
MikeSmith: w3.org 404s have mixed content

[06:09:28.0000] <MikeSmith>
oh, will try to get those 404 pages fixed

[06:09:39.0000] <annevk>
The only thing WindowProxy needs from IDL is acknowledgment that it exists and can be used in IDL interfaces

[06:09:56.0000] <nox>
annevk: And WebIDL doesn't provide that, right?

[06:10:24.0000] <nox>
annevk, Domenic: What if we had just "proxy WindowProxy;"?

[06:10:29.0000] <MikeSmith>
annevk: actually those will be fixed when they deploy upgrade-insecure-requests, right?

[06:10:35.0000] <Domenic>
sure or "typename WindowProxy"

[06:10:43.0000] <Domenic>
we need the same thing for ReadableStream

[06:10:57.0000] <MikeSmith>
win 35

[06:11:04.0000] <nox>
Gecko does "interface WindowProxy;"

[06:11:06.0000] <annevk>
MikeSmith: I guess

[06:11:09.0000] <nox>
(IIRC).

[06:11:22.0000] <Domenic>
yeah that seems reasonable too

[06:11:22.0000] <annevk>
nox: it's the same problem Uint8Array et al have

[06:11:43.0000] <annevk>
nox: but IDL mentions those already in various places to make things work

[06:11:57.0000] <nox>
annevk, heycam|away: Btw, have you thought a bit more about [[HasInstance]] for NodeFilter?

[06:12:06.0000] <annevk>
perhaps if Domenic's grand flattening plan is executed that problem disappears altogether

[06:12:30.0000] <annevk>
nox: I haven't, was happy for you all to sort it out

[06:12:59.0000] <nox>
Yeah, I was happy this meeting happened too.

[06:13:16.0000] <nox>
The code I had to read was extremely confusing, glad that bz confirmed it was actually mostly dead code.

[06:13:24.0000] <MikeSmith>
smaug____: as annevk reminds me there's member-only access to subscriber lists, so I'll find a URL you can try

[06:13:57.0000] <Ms2ger>
> Worker initialization was refactored extensively, to avoid creating WorkerGlobalScope objects before the corresponding realm was created. (The existing setup had the problem where it was creating a WorkerGlobalScope, derived from Object, in a thread that didn't even exist yet.)

[06:13:58.0000] <Ms2ger>
Woo

[06:14:25.0000] <annevk>
MikeSmith: smaug____: https://www.w3.org/Member/Mail/AuditForm

[06:14:38.0000] <nox>
annevk: Though,

[06:14:45.0000] <MikeSmith>
thanks annevk

[06:14:53.0000] <nox>
I just realised we didn't have any meeting about whichever step in document.write() that confuses me. :(

[06:15:03.0000] <annevk>
MikeSmith: smaug____: https://www.w3.org/services/list-audit/query?queryList=public-webapps in particular

[06:15:05.0000] <Ms2ger>
Oh, did we get a bug filed about the dead code?

[06:15:23.0000] <nox>
Ms2ger: No idea.

[06:15:28.0000] <nox>
Ms2ger: Ask bz.

[06:15:29.0000] <Ms2ger>
I don't think so

[06:15:36.0000] <Ms2ger>
bz is on vacation to NZ

[06:15:41.0000] <nox>
Oh right.

[06:15:49.0000] <nox>
So probably not.

[06:15:50.0000] <annevk>
MikeSmith: smaug____:  the main problem though is that for lists that are partially DB-backed you'll also need to check who is part of the group since those will also have gotten the email and are not listed on that page, aiui

[06:16:21.0000] <Ms2ger>
nox, can you write down what exactly is dead code, so I can file?

[06:16:23.0000] <annevk>
nox: filing GitHub issues is a decent substitute for meetings though

[06:16:42.0000] <nox>
annevk: True.

[06:16:49.0000] <nox>
Ms2ger: Will do that tonight.

[06:17:00.0000] <nox>
I'm still supposed to work on insane PHP code, mind you. :P

[06:17:42.0000] <Ms2ger>
Send me an email?

[06:18:26.0000] <nox>
Ms2ger: Will do.

[06:18:44.0000] <Ms2ger>
Thanks

[07:00:18.0000] <nox>
annevk: Maybe "external interface Foo;" would be better? Bikeshedding though.

[07:02:08.0000] <annevk>
nox: it's not clear to me that we need to use IDL syntax for them

[07:02:54.0000] <annevk>
nox: what we need is something that makes it clear they can be used in IDL using verbiage X coupled perhaps with some restrictions where they can be used (e.g., using WindowProxy in worker APIs would be bad)

[07:03:38.0000] <annevk>
nox: and we need to define what it means to create new instances of them from within IDL algorithms

[07:03:54.0000] <annevk>
nox: there might be some other things

[07:04:08.0000] <nox>
annevk: I see.

[07:04:13.0000] <annevk>
nox: but "bikeshed syntax" doesn't really solve any of those per se

[07:04:21.0000] <nox>
Definitely.

[07:59:29.0000] <smaug____>
MikeSmith: ok, thanks. Looks like some essential people are now missing from the mailing list

[07:59:54.0000] <smaug____>
and Apple isn't currently a member of the wg

[08:03:46.0000] <annevk>
smaug____: per https://www.w3.org/services/list-audit/query?queryList=public-webapps most Apple employees do get emails though

[08:04:54.0000] <smaug____>
annevk: well, not rniwa for example

[08:08:52.0000] <annevk>
smaug____: I see, sigh

[08:13:05.0000] <nox>
annevk: I think proxy … { … } would be the way to go. We could then say that interfaces with special operations get an implicit proxy on which these operations are defined, and we could make something like [Proxy=WindowProxy] on Window or any interface which need a more exotic proxy thing.

[08:13:50.0000] <annevk>
nox: what problem are you trying to solve?

[08:14:34.0000] <nox>
None particularly, I just hate how WindowProxy is specified and would like it to be more WebIDL-friendly.

[08:16:21.0000] <Domenic>
I really don't see a need to put anything in Web IDL for this

[08:21:49.0000] <annevk>
Right, inventing IDL syntax does not solve problems so I'm also at a loss

[08:31:28.0000] <nox>
Domenic, annevk: Disregard me then. :)

[08:36:51.0000] <gsnedders>
http://stackoverflow.com/questions/9675750/if-ie-comments-showing-up-in-ie9 is weird, seems like parsing of conditional comments in old IE can end up with valid comments being treated as text o_O

[08:39:16.0000] <nox>
annevk: Should DOM be updated to use FrozenArray?

[08:39:45.0000] <annevk>
nox: where?

[08:41:14.0000] <nox>
Never mind I thought arrays were used in there somehow.

[08:51:47.0000] <Ms2ger>
Oh, add-topic is dead?

[08:56:05.0000] <annevk>
Ms2ger: what is add-topic?

[08:56:37.0000] <Ms2ger>
<annevk> No need to introduce new ADD-TOPIC or REMOVE-TOPIC syntax. It's no longer used.

[08:57:01.0000] <annevk>
Ms2ger: oh, see, with uppercase it's much clearer

[08:57:08.0000] <annevk>
Ms2ger: yeah, that died with the transition to GitHub

[09:05:50.0000] <Domenic>
what did it do?

[09:32:37.0000] <annevk>
Domenic: it was used for emailing folks when a topic they cared about ended up being changed

[09:32:52.0000] <annevk>
Domenic: we discussed it to some extent when migrating and it wasn't used enough to care

[10:24:56.0000] <annevk>
nikkibee: can I help with the CORS-preflight cache confusion?

[10:25:05.0000] <nikkibee>
annevk: yes, I'd appreciate that!

[10:25:12.0000] <nikkibee>
I'm not sure what it *accomplishes*

[10:25:20.0000] <nikkibee>
like I can see it's doing this stuff but it seems very circular to me

[10:25:29.0000] <nikkibee>
if there's no cache, then make the cache to compare against later?

[10:26:03.0000] <nikkibee>
what I'm thinking is the answer right now is how CORS-preflight Fetch can return a network error

[10:26:06.0000] <annevk>
nikkibee: if there's no cache entry, make this preflight fetch to populate the cache (and make sure the server knows about CORS at the same time)

[10:26:30.0000] <nikkibee>
is that so if something is in the cache, we can be sure it's good? and if it doesn't match the catch, we need to run validation on it again?

[10:26:52.0000] <annevk>
nikkibee: correct

[10:27:10.0000] <nikkibee>
ahh, I get it now! thanks

[10:27:58.0000] <nikkibee>
I mean, "we can be sure it's good" is pretty simple, but I'm sure I'll get a better idea of what validity means as I gain more experience with Fetch :)

[10:28:46.0000] <nikkibee>
would it be accurate to say it checks for CORS security?

[10:29:25.0000] <annevk>
nikkibee: it's basically a check to see the server understands CORS and is happy to handle cross-origin requests that go outside the traditional security model of the web

[10:29:40.0000] <nikkibee>
gotcha, thanks!

[10:30:03.0000] <annevk>
nikkibee: if you can think of places where some extra explanation would help that'd be welcome as issues / PR

[10:30:40.0000] <nikkibee>
annevk: I think more notes in general would be a good thing. whenever a step has a note it usually seems to be giving me the reason for the step

[10:31:19.0000] <nikkibee>
I don't always understand what the note itself means, but I often get that it's relating to something beyond the Fetch spec itself, and that I'd be doing something that'll be used later

[10:31:20.0000] <annevk>
nikkibee: notes are typically included based on PRs/issues or when I find something particularly complicated myself

[10:31:44.0000] <annevk>
I guess they might still be too abstract at times...

[10:31:58.0000] <nikkibee>
well my main thing is like

[10:32:06.0000] <nikkibee>
I've gone through all the steps, but it's not easy to understand the big picture

[10:32:22.0000] <nikkibee>
I don't know what the *point* of each different Fetch function is from the outset

[10:32:57.0000] <nikkibee>
like I kinda get that things enter in Fetch; go to Main Fetch to get sorted to Basic Fetch or HTTP Fetch; and HTTP Fetch covers a lot of different ground

[10:33:55.0000] <nikkibee>
but all the introductions are like "To perform an HTTP-network fetch using request with an optional credentials flag, run these steps:" and I don't know what the *goal* is

[10:34:25.0000] <annevk>
well the goal is representing response = fetch(request)

[10:34:46.0000] <annevk>
things are abstracted into their own algorithm if they are reused or when that is good for clarity

[10:34:55.0000] <nikkibee>
that makes sense

[10:35:06.0000] <nikkibee>
I hadn't thought about the reusing aspect, though I have noted what gets called where

[10:35:51.0000] <annevk>
we could have some more notes with a basic explanation I suppose, but a lot of the algorithms don't mean much by themselves

[10:36:21.0000] <annevk>
and we might change the arrangement I suppose if that becomes necessary at some point

[10:36:25.0000] <nikkibee>
fair enough

[10:36:42.0000] <annevk>
E.g., "main fetch" is a fairly recent addition we didn't need before

[10:36:49.0000] <nikkibee>
I think something could be done for the CORS-preflight cache on pointing out what I eventually concluded

[10:37:02.0000] <nikkibee>
huh, are the steps in main fetch new? or were they elsewhere?

[10:37:26.0000] <annevk>
nikkibee: they used to be in "fetch"

[10:38:23.0000] <annevk>
nikkibee: would that help at the top of CORS-preflight fetch though or in HTTP fetch step 4.1?

[10:38:25.0000] <nikkibee>
that sounds like a good change, if at least so each method is a bit shorter

[10:38:51.0000] <nikkibee>
annevk: both I think. like you would say different things in each place

[10:39:03.0000] <annevk>
nikkibee: we made it because we needed to reinvoke "fetch" from redirects, but wanted to keep some things unchanged

[10:39:11.0000] <nikkibee>
like in HTTP fetch step 4.1 it could be like "if something is in the cache, it's been validated. if it's not, we need to validate it"

[10:39:22.0000] <annevk>
nikkibee: so now redirects reinvoke "main fetch" and whatever is done in "fetch" is left alone

[10:39:29.0000] <nikkibee>
right

[10:40:04.0000] <annevk>
nikkibee: could you comment in the preflightResponse issue to that effect? I'll add some notes tomorrow

[10:41:23.0000] <nikkibee>
sure thing

[10:43:50.0000] <annevk>
philipj: https://www.chromestatus.com/metrics/feature/timeline/popularity/1061 looks excellent, but I guess we need to wait longer

[10:44:18.0000] <annevk>
philipj: btw, going directly to that URL in Firefox doesn't update the <select> correctly

[10:50:42.0000] <philipj>
annevk: what you're seeing is probably https://github.com/GoogleChrome/chromium-dashboard/issues/220

[10:52:24.0000] <philipj>
annevk: and yes, that use counter will be in M49, with an "Estimated Week of Stable" Feb 29th, 2016

[10:53:18.0000] <philipj>
it does look pretty promising compared to some other recent counters, though

[10:53:39.0000] <philipj>
annevk: if there's any hurry, a googler might be able to tell you numbers from the dev channel

[11:05:40.0000] <Domenic>
is importScripts() just sync xhr in disguise?

[11:16:30.0000] <Domenic>
Who wants to add a "never show this again" to the "too slow" checkbox. jeez.

[11:16:49.0000] <Domenic>
s/checkbox/popup/

[11:16:56.0000] <Domenic>
although I guess if it uses cookies it's not going to work on my file:// URL copy

[11:18:12.0000] <annevk>
Domenic: importScripts() is sync, but only for workers

[11:19:46.0000] <Domenic>
yeah i guess we allow workers to jank themselves anyway

[11:40:17.0000] <wanderview>
Domenic: we also do some special things for importScripts() in service workers

[11:40:58.0000] <wanderview>
monkey patching: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#importscripts

[11:41:01.0000] <Domenic>
wanderview: yeah i saw junkees did a nice refactoring a while back to allow ServiceWorkerGlobalScope.importScripts to reuse most of the algorithm

[11:41:43.0000] <Domenic>
That's not monkeypatching :). What was there before was monkeypatching... "do importScripts but instead of step 7, do X, and after step 8, do Y."

[11:42:08.0000] <wanderview>
ok

[11:43:23.0000] <rits>
hello i am starting on this bug https://github.com/whatwg/html/issues/176, needed some starting points for it

[11:46:01.0000] <Domenic>
rits: do you need help with the tooling, or with the contents of the bug? If the latter, annevk is the person to ask. If he's not around in this channel right now you can try asking clarifying questions on the bug thread itself.

[11:48:34.0000] <rits>
Domenic: yeah, according to timezone he is not around now, i will discuss with him for the content part tomorrow, thanks

[12:01:25.0000] <smaug____>
majidvp: about scrollRestoration

[12:02:05.0000] <smaug____>
majidvp: the spec currently hints that history.scrollRestoration = 'manual'; somewhere in a script in head is enough to give manual handling everywhere

[12:02:20.0000] <smaug____>
but #hash handling in session history doesn't get that

[12:02:47.0000] <smaug____>
hmm, I should just file a bug about the example in the spec I guess

[12:02:53.0000] <smaug____>
or perhaps we want to change the spec

[12:05:12.0000] <Domenic>
speaking of which

[12:05:31.0000] <Domenic>
does majidvp or smaug____ want to make a PR for https://github.com/whatwg/html/issues/350#issuecomment-159753715

[12:06:29.0000] <smaug____>
/me should probably try to figure out how to write a pr for the spec

[12:07:26.0000] <smaug____>
but it is github

[12:07:31.0000] <smaug____>
which means hassle to me

[12:08:19.0000] <smaug____>
Domenic: so, which file should I modify?

[12:08:21.0000] <smaug____>
source?

[12:08:55.0000] <Domenic>
smaug____: yep. https://github.com/whatwg/html#pull-requests should give the info needed.

[12:13:56.0000] <majidvp>
smaug: I can make the PR for issue 350 if you don't have the repo  setup.

[12:14:16.0000] <smaug____>
majidvp: thanks

[12:14:33.0000] <smaug____>
majidvp: any feedback to https://github.com/whatwg/html/issues/404

[12:14:39.0000] <smaug____>
great issue number :)

[12:17:58.0000] <majidvp>
smaug____: As for the #hash, my read of the spec is that "history.scrollRestoration=manual" takes precedent over hash. In particular, step 8 says "If the specified entry is not an entry with persisted user state, but its URL has a fragment identifier, scroll to the fragment identifier."

[12:19:07.0000] <majidvp>
smaug____: In other words, if we have any scroll information for the entry (including scrollRestoration='manual') then we should not scroll to hash.

[12:19:15.0000] <smaug____>
majidvp: FYI, chrome does scrolls with #hash

[12:19:20.0000] <smaug____>
s/scroll/scroll/

[12:19:32.0000] <smaug____>
so #hash takes precedence

[12:20:56.0000] <smaug____>
majidvp: also "entry with persisted user state" doesn't mean scrollRestoration state

[12:21:01.0000] <smaug____>
as far as I see

[12:21:13.0000] <smaug____>
since scrollRestoration is an explicitly defined state

[12:25:58.0000] <majidvp>
The Chrome behaviour is that it scrolls to hash on first load (where scrollRestoration = Auto) but it does not on any history traversal if the page has already set scrollRestoration=Manual.

[12:26:04.0000] <majidvp>
https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/fast/history/scroll-restoration/scroll-restoration-fragment-navigation-crossdoc.html&sq=package:chromium&type=cs

[12:29:19.0000] <majidvp>
smaug____: what do you think the right behaviour should be? The spec gives precedent on history scroll restoration over navigation to hash so I think scrollRestoration=Manual should also take precedent over hash.

[12:32:22.0000] <smaug____>
majidvp: the spec gives precedence to fragment navigation

[12:32:24.0000] <smaug____>
but I think that is wrong

[12:32:36.0000] <smaug____>
thouhg

[12:32:38.0000] <smaug____>
thouhg

[12:32:41.0000] <smaug____>
though :)

[12:32:58.0000] <smaug____>
what should happen to the hashchange event?

[12:33:07.0000] <smaug____>
it would still be dispatched, even without scrolling?

[12:34:23.0000] <smaug____>
majidvp: which behavior you want?

[12:39:33.0000] <smaug____>
I guess dispatching hashchange is fine even without scrolling

[12:39:45.0000] <smaug____>
is scrollRestoration is 'manual'

[12:39:50.0000] <smaug____>
s/is/if/

[12:42:40.0000] <majidvp>
smaug____: yes, firing hashchange is independent of scrolling to fragment. It happens even if there is no fragment matching the hash.

[12:44:26.0000] <smaug____>
majidvp: you'll file a blink bug?

[12:44:33.0000] <smaug____>
or should I?

[12:44:49.0000] <Domenic>
I'm pretty excited about killing UTF16 in textencoder

[12:49:21.0000] <majidvp>
 smaug____:I can file a bug. Do you have a repro? Is it on first load, or when traversing back to the page?

[12:50:34.0000] <smaug____>
majidvp: when traversing back at least

[12:50:57.0000] <smaug____>
I just manually tried something with http://mxr.mozilla.org/mozilla-central/source/dom/events/Event.cpp

[12:51:03.0000] <smaug____>
load that, set 'manual'

[12:51:19.0000] <smaug____>
scroll/click 199 on the left

[12:51:26.0000] <smaug____>
then load about:blank

[12:51:29.0000] <smaug____>
and go back

[12:51:40.0000] <smaug____>
the mode is still manual, but page is scrolled

[12:54:18.0000] <smaug____>
majidvp: note, there is also "update the session history with the new page" where steps 4-6 do fragment scrolling

[12:56:38.0000] <majidvp>
That sounds like a bug. I will file it.

[13:06:41.0000] <majidvp>
Hmmm,  my first read suggests that "update the session history with the new page" is only invoked for new entries (i.e., history.scrollRestoration != Manual) which probably means it can be left as is.

[13:15:11.0000] <majidvp>
on closer examination, the algorithm allows UA to spin the event loop for sometime before trying to scroll to fragment in a loop. So it is potentially possible for script to run in mean time and update scroll restoration mode for the entry to Manual. I think, it is more appropriate to leave this as is, i.e., scroll to fragment for new pages is not impacted

[13:15:11.0000] <majidvp>
by scroll restoration mode.

[13:18:38.0000] <smaug____>
"traverse the history" in step 1 calls "navigate", which then calls 7.6.2 which does 'update the session history with the new page'

[13:18:57.0000] <smaug____>
but maybe I'm missing some step in 'navigate' where we'd return early

[13:42:05.0000] <majidvp>
I think you maybe right. I left a comment on the issue.

[14:40:58.0000] <Domenic>
Hmm Chrome regressed typeof document.all to "object" and it didn't break the internet https://code.google.com/p/chromium/issues/detail?id=567998

[14:41:56.0000] <Domenic>
I mean it kind of broke some stuff but not completely

[15:09:53.0000] <miketaylr>
Domenic: oh man, i'd be afraid of how many dhtml menus are suddenly busted

[15:10:03.0000] <miketaylr>
(on sites that nobody visits, probably)

[15:49:40.0000] <gsnedders>
jgraham: critic appears to not have an up-to-date master for html5lib

[15:50:22.0000] <gsnedders>
jgraham: this is quite possibly why it hasn't been creating reviews

[15:53:28.0000] <jgraham>
gsnedders: It appears that you rewrote history on master

[15:53:34.0000] <jgraham>
Well I hope it was you

[15:57:05.0000] <gsnedders>
jgraham: I'm gonna look innocent. Though it seems not entirely implausible.

[15:58:45.0000] <jgraham>
Please tell me you didn't rewrite history to reformat a commit message


2015-12-16
[16:00:30.0000] <gsnedders>
I doubt it.

[16:02:34.0000] <jgraham>
gsnedders: Well, someone did

[16:02:49.0000] <MikeSmith>
when

[16:03:19.0000] <gsnedders>
MikeSmith: April

[16:03:41.0000] <MikeSmith>
gsnedders: you weren't back around yet in April iirc

[16:04:15.0000] <MikeSmith>
oh this is html5lib master? not wpt

[16:04:34.0000] <gsnedders>
MikeSmith: yeah

[16:04:35.0000] <MikeSmith>
hope I'm not the one who did it

[16:04:44.0000] <gsnedders>
jgraham: would appear to be me, WTF

[16:04:58.0000] <gsnedders>
jgraham: that makes literally no sense

[16:12:10.0000] <MikeSmith>
rniwa: please re-subscribe yourself to public-webapps

[16:12:18.0000] <rniwa>
MikeSmith: will do

[16:12:27.0000] <MikeSmith>
thanks

[16:12:43.0000] <MikeSmith>
rniwa: either that or please ask Dave to add you to the new group

[16:13:00.0000] <MikeSmith>
same for others on your team if you can please remind them

[16:13:41.0000] <MikeSmith>
I think annevk sent some web-components feedback to public-webapps recently that you may have missed because of having been dropped from teh list

[16:14:12.0000] <MikeSmith>
ah good I see that Sam is still on the list

[16:14:47.0000] <rniwa>
MikeSmith: https://lists.w3.org/Archives/Public/public-webapps/2015OctDec/thread.html ?

[16:14:48.0000] <MikeSmith>
hober: ⬆

[16:14:59.0000] <MikeSmith>
/me looks

[16:15:33.0000] <MikeSmith>
rniwa: yeah, specifically https://lists.w3.org/Archives/Public/public-webapps/2015OctDec/thread.html#msg179 I guess

[16:15:47.0000] <MikeSmith>
messages from Domenic and annevk

[16:16:19.0000] <MikeSmith>
but maybe check with annevk when he's back around

[16:17:43.0000] <Domenic>
I still need to reply to that...

[16:21:35.0000] <jgraham>
gsnedders: It may be fixed, if my ateempt to edit the database and git refs worked

[18:19:32.0000] <smaug____>
hmm, html  spec open only in 13 tabs

[18:19:44.0000] <smaug____>
perhaps not all of them needed

[20:36:15.0000] <MikeSmith>
reading https://groups.google.com/a/chromium.org/d/msg/blink-dev/2LXKVWYkOus/Si4X-1AhBAAJ

[20:36:39.0000] <MikeSmith>
"We were aware that this change was being planned (thanks for the messages in the console!). However, we did not anticipate that we would have problems with iframes and mismatched origins. This has left our product completely broken, with no easy way to fix."

[20:37:28.0000] <MikeSmith>
seems like we need to do a better job of making it clear to developers what the implications are

[20:40:22.0000] <MikeSmith>
https://github.com/w3c/webpayments/issues/34

[20:40:52.0000] <MikeSmith>
"I'm asserting that we need to consider an API that works for user agents that are not browsers"

[20:41:23.0000] <MikeSmith>
yeah, because doing things that way has always worked out for us really well in the past

[21:39:33.0000] <Domenic>
Someone needs to nip that last one in the bud really fast.

[01:13:07.0000] <jochen___>
annevk: do I read your comment correctly that you're ok with merging https://github.com/w3c/webappsec-referrer-policy/pull/14 ?

[01:14:52.0000] <annevk>
jochen___: yeah

[01:17:21.0000] <jochen___>
cool, thx

[01:54:27.0000] <yoav>
Ms2ger: around?

[01:54:49.0000] <Ms2ger>
I am

[01:59:17.0000] <yoav>
Ms2ger: Hey! I'm looking at https://github.com/w3c/web-platform-tests/blob/master/html/semantics/document-metadata/the-link-element/link-rellist.html

[01:59:32.0000] <yoav>
I don't think it matches the recent spec changes

[01:59:38.0000] <Ms2ger>
Quite possible

[02:00:18.0000] <Ms2ger>
What in particular?

[02:00:22.0000] <yoav>
Do you remember the motivation behind these tests? Why were relList returning true for non string values?

[02:00:56.0000] <Ms2ger>
Because that's how the platform works: ToString is called on the value to convert it to a DOMString

[02:02:01.0000] <Ms2ger>
bbiab

[02:06:35.0000] <yoav>
Ms2ger: I get why they are converted to strings, but these strings are not in the relList, so why is it returning true?

[02:14:24.0000] <annevk>
yoav: assuming recent changes didn't happen, why would they not be in the list?

[02:15:01.0000] <annevk>
yoav: did you see that it's populated from markup?

[02:15:30.0000] <yoav>
annevk: I missed that part

[02:15:49.0000] <yoav>
sorry for the noise

[02:16:07.0000] <yoav>
so, even with recent changes, that test is still correct

[02:16:35.0000] <yoav>
supports will return false on them, but contains should have them in

[02:18:52.0000] <annevk>
yeah I think so

[02:19:31.0000] <annevk>
when we changed what add() did I might have also expected this to be different (though not sure if we updated the specification to that effect yet), but definitely not with the new design

[02:22:24.0000] <yoav>
annevk: yeah, that change would have affected this test, but I agree now these values should be in

[02:28:04.0000] <Ms2ger>
yoav, they are in the rellist

[02:28:26.0000] <yoav>
Ms2ger: Yeah, I misread the test. Sorry for the noise

[02:28:52.0000] <Ms2ger>
Np

[03:24:35.0000] <annevk>
Are there any other (WHATWG) standards with gender issues? Spot checking Fetch/DOM/Encoding suggests HTML might be alone in this, though HTML is also somewhat alone in having examples

[03:28:03.0000] <MikeSmith>
annevk: I think other specs don't have the issue due to the fact you point out that they are not rich in examples like the HTML spec is

[03:28:32.0000] <MikeSmith>
and in the case of HTML it's that they are markup examples, of documents

[03:29:13.0000] <MikeSmith>
so I think even if other specs had lots more examples they still wouldn't run into this issue

[03:29:27.0000] <MikeSmith>
it's somewhat unique to HTML that way

[03:30:21.0000] <MikeSmith>
that said incidentally I think we should have a lot more examples in other specs

[03:49:56.0000] <ondras>
so.

[03:50:12.0000] <ondras>
my JS code runs on three "platforms", electron/nwjs/web

[03:50:24.0000] <ondras>
I have a platform-specific abstration that basically works like this:

[03:50:45.0000] <ondras>
  module.exports = require("electron" | "nwjs" | "web")

[03:50:58.0000] <ondras>
what is the recommended way of doing this pattern with (static) ES6 modules?

[03:52:13.0000] <zcorpan>
seems vtt has 7 male characters and 3 female characters in its examples

[03:56:33.0000] <annevk>
ondras: until Loader is done it doesn't seem super useful to discuss

[03:56:48.0000] <nox>
Gender issues in HTML?

[03:57:46.0000] <zcorpan>
"He-TML", see? :-D

[03:58:15.0000] <zcorpan>
see recent commits https://github.com/whatwg/html/commits/master

[03:59:20.0000] <nox>
So he -> she or they?

[03:59:46.0000] <zcorpan>
basically yeah

[04:00:04.0000] <nox>
Weird (to have both).

[04:00:29.0000] <zcorpan>
annoying that github doesn't have a commit -> PR pointer

[04:00:36.0000] <nox>
They have.

[04:00:41.0000] <zcorpan>
where?

[04:00:42.0000] <nox>
But you people cherry-pick things.

[04:00:47.0000] <nox>
So the commit isn't the PR commit.

[04:01:09.0000] <annevk>
zcorpan: see e.g., https://github.com/whatwg/html/commit/135b63219699cf16299cf8c12b061497aa000464

[04:01:22.0000] <annevk>
zcorpan: next to "master" there's a link to the PR

[04:01:40.0000] <nox>
It's nice to have she and he. Or to have everything be neutral. Having she and neutral is just the same as before to me. Not that I care either way anyway.

[04:02:01.0000] <zcorpan>
annevk: thx

[04:02:13.0000] <nox>
Oh actual stats about how much each is used, nice.

[04:02:21.0000] <annevk>
zcorpan: philipj should have amended the commit message to say "Close #X: ..." for non-rebased commits, imo

[04:02:24.0000] <zcorpan>
nox: there are still a number of he's in there

[04:02:31.0000] <nox>
zcorpan: Yeah, just saw that.

[04:02:37.0000] <ondras>
annevk: well there are other build-time solutions -- preprocessing, symlinking the correct platform file etc

[04:02:54.0000] <ondras>
annevk: I was curious if anyone needs to solve this *now*, without waiting for the programmatic loader

[04:03:12.0000] <annevk>
zcorpan: I guess maybe that is not in TEAM.md and Domenic not really caring about it doesn't help of course

[04:04:17.0000] <MikeSmith>
mkwst: re twitter about TLS deployment yes in fact waiting for that release is what was blocking it

[04:05:14.0000] <MikeSmith>
ah I see Wendy has already replied

[04:06:39.0000] <nox>
zcorpan: Anyway, nobody is yelling about it either way, that's nice.

[04:06:47.0000] <nox>
zcorpan: Maybe because nobody read HTML commits? :P

[04:07:14.0000] <annevk>
ondras: you could try #jslang on Mozilla IRC

[04:07:43.0000] <ondras>
annevk: okay thanks

[04:33:44.0000] <philipj>
annevk, zcorpan, should we always ensure that there's a way to get from commit to PR or issue?

[04:34:38.0000] <philipj>
it's a bit weird for a PR with no issue, where you'd always have to amend to point to the newly created PR :/

[04:35:34.0000] <Ms2ger>
/me unfollows the gendering pr

[04:35:44.0000] <Ms2ger>
Oh, it's a commit

[04:35:49.0000] <Ms2ger>
Dammit chaals

[04:35:56.0000] <philipj>
just found that too :)

[04:37:13.0000] <zcorpan>
philipj: when it's a merge without further changes, github points to the PR. it's just when we tweak things, that is lost, so it would be good to also add "Close #x" in the commit in such cases

[04:38:00.0000] <philipj>
zcorpan: we never merge, so we'll always have to amend the commit message, right?

[04:40:44.0000] <zcorpan>
philipj: http://krijnhoetmer.nl/irc-logs/whatwg/20151216#l-309

[04:42:18.0000] <philipj>
zcorpan: I've seen the link, but it was just luck in that case that no rebase was needed, right? So amend commit messages when rebase is needed?

[04:43:17.0000] <nox>
This is one of the reasons I don't like linearising history.

[04:43:19.0000] <zcorpan>
philipj: yeah. in return, you don't have to manually close the PR :-)

[04:55:28.0000] <philipj>
ok, I'll try to make sure that there will be a path from commit to pr or issue going forward

[04:55:42.0000] <philipj>
I've wanted it myself from time to time

[05:03:50.0000] <Domenic>
I am still against PRs closing themselves.

[05:04:19.0000] <philipj>
Domenic: is there another way of dealing with this problem?

[05:05:13.0000] <Domenic>
I guess adding PR: #123 is OK (instead of Closes #123)

[05:05:40.0000] <philipj>
yeah, self-closing is a bit weird

[05:06:00.0000] <philipj>
it'd be nice if we just had write access to everyone's forks :)

[05:14:34.0000] <nox>
philipj: Ew, that's insane.

[05:15:01.0000] <nox>
It would be nice if amendments could be done by contributors and PRs just be merged.

[05:15:03.0000] <philipj>
nox: I know, and also not something that would ever happen.

[05:15:20.0000] <philipj>
(to the first bit)

[05:15:48.0000] <philipj>
nox: Yes, we know that maintaining a linear history sucks in some ways.

[05:53:09.0000] <Domenic>
It sucks in zero ways. It is amazing and I love it :)

[05:59:49.0000] <philipj>
Zero it is, now I love it too :)

[06:09:17.0000] <annevk>
Domenic: https://github.com/whatwg/encoding/commit/929a3ffec7695b38c1b5529411de52eca6935d61#commitcomment-15013806 I guess it has to be the latter since that matches integer division... ugh

[06:09:37.0000] <annevk>
Domenic: though maybe I should figure out if it matters in practice

[07:13:38.0000] <annevk>
nox: https://github.com/whatwg/dom/issues/129

[07:14:21.0000] <nox>
That's hard to parse.

[07:15:41.0000] <nox>
annevk: Err!

[07:15:59.0000] <nox>
annevk: I completely fumbled the amend you asked me, when you told me that "Otherwise, …" was bad style.

[07:16:12.0000] <annevk>
I see

[07:16:40.0000] <annevk>
I'm glad Arkadiusz sticks around

[07:17:28.0000] <nox>
annevk: Basically, forgot to remove step 13.

[07:18:59.0000] <MikeSmith>
/me is also glad Arkadiusz sticks around

[07:22:24.0000] <nox>
/me doesn't know who Arkadiusz is, but anyone who notices my failures is welcome.

[07:28:55.0000] <nox>
annevk: https://github.com/whatwg/dom/pull/130

[07:52:22.0000] <annevk>
I think I finally understand why the unforgeability of Location objects is a problem. That took a long time to sink in. (The answer is: once a Location object becomes cross-origin due to document.domain it exposes less properties, meaning non-configurable properties have been mutated, violating the ECMAScript MOP (which has a different name today).)

[07:53:04.0000] <annevk>
The solution is saying things are configurable while throwing when you try to configure any IDL-defined member.

[07:53:21.0000] <annevk>
Such a great hack. Mark Miller will be pleased.

[07:56:09.0000] <caitp>
that sounds like a not good solution

[07:56:17.0000] <caitp>
that's not an actual solution to an actual problem is it?

[07:56:58.0000] <annevk>
caitp: it is, unless you have a better one

[07:57:33.0000] <caitp>
internal slots which only the UA can mutate, accessed by non-configurable getters

[07:58:00.0000] <annevk>
caitp: doesn't account for document.domain

[07:58:56.0000] <caitp>
I'm not sure how

[07:59:20.0000] <caitp>
if at runtime the UA decides that X is cross origin, accessor begins operating in a cross-origin capacity

[07:59:39.0000] <caitp>
still non-configurable, and does not lie to userspace about that

[07:59:47.0000] <annevk>
Location objects expose a set of properties, once document.domain is set, the same Location object needs to expose less properties (for the href case it needs to only expose the setter)

[08:00:17.0000] <caitp>
you could also make [[HasProperty]] behave differently or not depending on the cross-origin status

[08:03:01.0000] <caitp>
I guess if you make the DOM do weird things, it wouldn't be the first time, but things like lying about configurability can be a headache for polyfill authors, and is technically violating an invariant

[08:04:01.0000] <annevk>
caitp: how does it violate an invariant?

[08:04:13.0000] <annevk>
caitp: internal methods can throw for any number of reasons

[08:04:38.0000] <caitp>
yeah, I guess it doesn't really

[08:04:42.0000] <annevk>
caitp: it seems it would only violate if you claim non-configurability and then actually change things around

[08:04:44.0000] <caitp>
the invariant is the other way around

[08:04:48.0000] <annevk>
caitp: which is what happens today

[08:04:56.0000] <annevk>
caitp: and we want to get rid of

[08:05:26.0000] <annevk>
the aim here is to make the DOM less weird compared to the status quo

[08:16:05.0000] <jochen___>
hum hum

[08:16:21.0000] <jochen___>
in v8, we can't make some property that claims to be non configurable something else

[08:16:49.0000] <jochen___>
DOM or not

[08:16:56.0000] <jochen___>
i mean, not cheaply

[08:17:04.0000] <annevk>
jochen___: this wouldn't require that

[08:20:46.0000] <robertkowalski>
hi

[08:21:01.0000] <robertkowalski>
i am finally working a bit more on the console spec

[08:21:14.0000] <robertkowalski>
i found an interesting difference in firefox and chrome

[08:21:26.0000] <robertkowalski>
not sure which one to choose :)

[08:22:46.0000] <MikeSmith>
on console I guess I have come around to wondering how important it actually is to have interoperability

[08:22:56.0000] <caitp>
give it to the one that pays more membership dues to your working group

[08:23:09.0000] <caitp>
that is a joke

[08:24:01.0000] <robertkowalski>
so for console.log, "If there are more format specifiers than following arguments..."  -- which is basically console.log("%s %s", "duck") some browsers print: `duck %s` and some print `duck`

[08:24:16.0000] <robertkowalski>
MikeSmith: it is a beginner task i got from Domenic to get more into writing specs

[08:24:48.0000] <caitp>
I didn't even know console.log supported format specifiers, is that true?

[08:24:49.0000] <MikeSmith>
I wonder what other cases we could examine of programming languages for which there are multiple different REPLs available, and what the developer expectations are for having the behavior among those REPLs by exactly the same around things that are secondary to the actual results of executing the code

[08:26:08.0000] <MikeSmith>
robertkowalski: I guess I would choose the one that is doing the thing that's objectively the best for developer-users

[08:26:39.0000] <Domenic>
robertkowalski: that is a great discovery and exactly the kind of thing a spec helps with.

[08:26:42.0000] <annevk>
MikeSmith: exposing "window.console" and its various members is important

[08:26:54.0000] <annevk>
MikeSmith: I'm not sure it matters what each member does, since that's not really web-exposed

[08:26:55.0000] <jgraham>
Presumably they print `duck `

[08:27:06.0000] <annevk>
and what's not web-exposed is far less interesting...

[08:27:06.0000] <MikeSmith>
annevk: exactly

[08:27:08.0000] <jgraham>
printing `duck` would be very strange

[08:27:24.0000] <MikeSmith>
annevk: that's what I was trying to say, in so many (more) words

[08:27:40.0000] <caitp>
annevk: to be fair, there are libraries that wrap the console in debugging helpers, and actually use these in unit tests

[08:27:41.0000] <Domenic>
What's not web-exposed is still useful to get uniform for web developers. Not critical for implementers unless implementers like making web developers happy.

[08:27:50.0000] <caitp>
so, having them work consistently is nice, for them at least =x

[08:28:28.0000] <caitp>
like, printing the format specifier vs empty string is one of the things that would come up there

[08:28:33.0000] <Domenic>
robertkowalski: I would consider investigating Edge/Safari/Node/C's printf for a tiebreaker. Unless you feel there is a clearly "better" answer for developers, as MikeSmith says.

[08:29:28.0000] <caitp>
not all that interesting, but it's not unimaginable that you'd want consistent behaviour across browsers

[08:30:22.0000] <Domenic>
Yeah. For example I believe Edge went through (or is still going through) a console output modernization, to make their dev console more attractive to developers. Having a spec would help them immensely.

[08:30:54.0000] <Domenic>
And Node would like to match browsers, so actually specifying what browsers do is a good thing

[08:32:19.0000] <Ms2ger>
Likewise

[08:59:02.0000] <robertkowalski>
ha, even more fun: console.log("%s %d", "a", null) -> `a NaN` (chrome)  vs.  `a null` (firefox)

[08:59:07.0000] <robertkowalski>
that's fun! :)

[09:03:03.0000] <nox>
Shouldn't that be 0?

[09:05:44.0000] <robertkowalski>
ah right, in firefox it is 0

[09:31:40.0000] <Domenic>
0 seems better; it should be ToNumber(null) (i.e. +null)

[09:53:53.0000] <TabAtkins>
nox: A hypothetical world where every document was she-default would indeed be as bad as our current world.  But taking our current he-default-dominated world and having a small number of she-default documents is an improvement.

[09:54:03.0000] <TabAtkins>
(But they-default would be best.)

[09:54:27.0000] <nox>
I prefer a mix of everything than they everywhere.

[09:54:47.0000] <jgraham>
Do what the Swedes did and invent a new pronoun

[09:55:02.0000] <TabAtkins>
I have a number of nonbinary friends, for which "he" and "she" are equally bad.

[09:55:10.0000] <TabAtkins>
"they" works for everyone no matter what.

[09:55:14.0000] <nox>
TabAtkins: "A mix", include that too.

[09:55:15.0000] <jgraham>
nhe

[09:55:17.0000] <TabAtkins>
jgraham: We did - it's "they".

[09:55:58.0000] <jgraham>
TabAtkins: We didn't, that's suboptimal because of the use as plural.

[09:56:02.0000] <nox>
Include everything instead of just only neutral. That way it's representative, and it isn't saying people can only cope with neutral everywhere.

[09:56:53.0000] <nox>
jgraham: There is iel in French, with no traction. I'm not sure I like it anyway. That being said you are talking with a man with 28 years of grammatical gender usage.

[09:57:42.0000] <nox>
Err, not the right words.

[09:57:58.0000] <nox>
What is a language like French called, where even a table has a gender?

[09:58:35.0000] <TabAtkins>
jgraham: Yes, it's overloaded. Doesn't mean it hasn't been English's choice for centuries. If it's good enough for the Bard, it's good enough for me.

[09:58:35.0000] <jgraham>
https://en.wikipedia.org/wiki/Hen_%28pronoun%29 fwiw

[09:59:10.0000] <nox>
Ah, it seems like it's called grammatical gender after all.

[09:59:15.0000] <TabAtkins>
English's pronoun/case system is all kinds of confusing, since it's a weird collapse from a fully gendered/cased system to one which only *barely* has gender and case.

[09:59:16.0000] <jgraham>
TabAtkins: Well evidently it hasn't been a successful choice since we still use gendered words where it is unecessary to do so

[09:59:38.0000] <TabAtkins>
jgraham: Sure. Is "hen" used literally everywhere a gender isn't strictly required?

[10:00:59.0000] <jgraham>
No, but I'm not claiming centuries of successful precedent

[10:01:37.0000] <TabAtkins>
nox: "include everything" means that someone is left out of any particular use, and requires a conscious attention to the relative usage of each in your document.  "They" is simple and easy.

[10:02:16.0000] <TabAtkins>
When I read boardgame rules, whether they use "he" or "she" it's weird, since I'm usually reading them out loud to myself and my wife.  Either word discomfits one of us slightly.

[10:02:32.0000] <nox>
Mmmh.

[10:02:38.0000] <nox>
The boardgame rules point is a nice one.

[10:02:45.0000] <TabAtkins>
He/she are great to use in 2-party examples, where it helps disambiguate who is doing what, but otherwise it doesn't do much.

[10:02:53.0000] <nox>
TabAtkins: You might be able to use another point when talking to a French person, re: the boardgame rules:

[10:03:20.0000] <nox>
TabAtkins: I absolutely hate it when a platform/action game (usually aimed at children) uses "tu" to address me, instead of "vous".

[10:03:35.0000] <TabAtkins>
What's the distinction?

[10:03:40.0000] <nox>
I usually even end up playing the game in English to avoid it.

[10:03:50.0000] <nox>
TabAtkins: https://en.wikipedia.org/wiki/T–V_distinction

[10:04:02.0000] <nox>
So given I am bothered by that,

[10:04:29.0000] <nox>
shrugging pronoun gendering concerns would be contradictory of me.

[10:04:34.0000] <TabAtkins>
Ah, right, familiar vs polite.

[10:04:39.0000] <TabAtkins>
Heh, good point.

[10:04:52.0000] <TabAtkins>
/me likes being able to draw parallels to obviously similar situations.

[10:05:59.0000] <TabAtkins>
I once read a great essay, written mid-century I think, which was written like one of those ubiquitous "how silly to complain about sexism in language!" essays, but swapped to a world where all the differences were for white/black instead.

[10:06:28.0000] <nox>
TabAtkins: So my point about not using only they was that in a perfect word, the occasional non-neutral pronoun shouldn't bother anyone.

[10:06:35.0000] <TabAtkins>
Wr. Smith for a white person, or Bs./Brs./Bz. for a black person, depending on employment status.

[10:07:03.0000] <nox>
But given I'm implementing Web's insanity, what am I rambling about a perfect world anyway?

[10:07:03.0000] <TabAtkins>
"actor" vs "actoroon", "tomwhite" for a young black child who acts white (but no word for the opposite, of course), etc

[10:09:08.0000] <TabAtkins>
It was really powerful for me, because all the distinctions the essay was defending seemed horrendous, but of course they're direct translations of current English practice for gender.

[10:44:38.0000] <caitp>
when you're talking about an individual, gendered pronouns and honorifics are more colourful and interesting than neutral everywhere

[10:46:39.0000] <TabAtkins>
If it's a real individual and you know their pronoun, yes, use that pronoun.

[10:47:08.0000] <TabAtkins>
If it's a hypothetical person, or a reference to the reader or other "abstract people", neutral ensures you're never wrong.

[10:48:40.0000] <caitp>
never wrong, but usually really boring to listen to also, it just doesn't have that rhythm

[10:48:46.0000] <TabAtkins>
lol ok

[10:48:50.0000] <caitp>
anyways, this seems off topic somehow, how did this happen =)

[10:49:16.0000] <TabAtkins>
I've never heard a particular "rhythm" that "he" has over "they".  They're the same syllable count!

[10:49:48.0000] <caitp>
you'd rather be that neutral deity Isis vs Mighty Goddess Isis!?!?

[10:49:55.0000] <caitp>
even if you get it wrong, it's still more interesting

[10:50:01.0000] <TabAtkins>
Isis is a gendered deity.

[10:50:19.0000] <TabAtkins>
"It's more interesting, who cares if it's wrong" is easy to say for people who rarely get misgendered.

[10:50:26.0000] <gsnedders>
TabAtkins: it wrecks rhymes! :P

[10:50:27.0000] <TabAtkins>
(I don't know your gender, tho.)

[10:50:44.0000] <TabAtkins>
gsnedders: It requires *changes* to rhymes.

[10:50:56.0000] <TabAtkins>
But so does a his/her switch.

[10:51:04.0000] <TabAtkins>
Only he/she maintains rhymes perfectly.

[10:51:10.0000] <gsnedders>
TabAtkins: shush you and your facts!

[10:51:44.0000] <caitp>
Tab, usually people get it right the first time, and then think they're mistaken as soon as I open my mouth, because voices are hard

[10:51:53.0000] <TabAtkins>
caitp: And the vast, vast majority of gender in language is referring to *people*, not hypothetical deities.

[10:52:07.0000] <caitp>
I'd still prefer a gender, even the wrong one, over neutral, in my case :p

[10:52:08.0000] <TabAtkins>
caitp: I've never met or heard you, so I have neither experience so far. ^_^

[10:52:33.0000] <nikkibee>
if somebody said "well it sounded more interesting" as an excuse for misgendering me I'd call them an ass

[10:52:34.0000] <TabAtkins>
I prefer to be referred to as "they" over "she". OUR PREFERENCES CANCEL OUT.

[10:52:55.0000] <caitp>
it's like, there are so many more important things to worry about, like where to get falafel for lunch

[10:53:17.0000] <TabAtkins>
That's what you say when you're defending the status quo, rather than arguing for it.  It's not a real argument.

[10:53:31.0000] <nikkibee>
caitp: sure, if you are not a person who doesn't have to worry about being misgendered on a daily basis

[10:53:31.0000] <TabAtkins>
And jeezus, the "worry about something more important" defense?

[10:54:33.0000] <caitp>
hey, I'm all for calling people what they want to be called, but fussing about making everything neutral and inclusive, ehh --- if you're the type of person to be offended because some example of something in some piece of technical writing makes a point about using a particular kind of person as an example, I just

[10:54:38.0000] <caitp>
I don't even know what to say to that

[10:55:03.0000] <TabAtkins>
"fussing about" is making a mountain out of a molehill.  You just say "they" instead of "he". It's hard for like two weeks while you rewrite your reflexes, then it's the easiest thing in the world.

[10:55:32.0000] <TabAtkins>
caitp: You need to read up on "microagressions" and what effect they have on minority (or perceived minority) populations.

[10:55:52.0000] <nikkibee>
caitp: you don't have to minimize how global an issue it is with making a minor example that's easy for you to disregard

[10:56:16.0000] <gsnedders>
caitp: the problem is it *isn't* hypothetical, that using only "he" has been used to exclude women from things before, regardless of the original authorial intent

[10:56:19.0000] <TabAtkins>
I've used "they" in writing for *years* with no trouble.  I more recently switched my spoken English, which was a little more difficult, but it was just that two weeks or so of issue.

[10:57:07.0000] <caitp>
the problem with including women does not start and end at technical writing using "he" for things instead of "they"

[10:57:14.0000] <TabAtkins>
Correct!

[10:57:25.0000] <TabAtkins>
There's a lot of work to do! This is one part.

[10:57:30.0000] <gsnedders>
I only really find they difficult to use in speech when referring to a specific person.

[10:57:43.0000] <TabAtkins>
Balking at the simplest possible thing to do does not fill one with confidence that you'll be happy to do the rest.

[10:57:55.0000] <TabAtkins>
gsnedders: Yeah, that took the longest.

[10:58:27.0000] <caitp>
I'm all about including as many people as possible, but examples in technical papers --- I mean, if you're offended or discouraged by them, you're a professional victim, basically

[10:58:53.0000] <caitp>
no problem fixing them, but really, it's not the issue

[10:58:58.0000] <TabAtkins>
caitp: Again, really easy to say when you're not misgendered all the fucking time.

[10:59:04.0000] <nikkibee>
"professional victim" lol you're never going to listen

[10:59:08.0000] <nikkibee>
bye

[10:59:16.0000] <TabAtkins>
See previous, where me *reading boardgame instructions* is annoying whether they use "he" or "she".

[10:59:29.0000] <TabAtkins>
Because I'm reading them to myself and my wife, who are of different genders.

[10:59:34.0000] <gsnedders>
caitp: using *either* gender in examples are often merely reinforcing stereotypes and lead to people only considering one gender

[11:01:31.0000] <caitp>
and then our technical writer protagonist moves on to writing extremely bland novels

[11:01:33.0000] <caitp>
and it is sad :(

[11:02:50.0000] <TabAtkins>
Again, lol. Why are you saying that  "And then they stepped outside" is "bland" compared to "And then he stepped outside"?

[11:03:02.0000] <TabAtkins>
Seriously, this is bizarro-world strawman city.

[11:03:32.0000] <TabAtkins>
"If we don't ensure that everyone knows a hypothetical person is definitely a dude or lady, they'll get bored and wander off" ?!?

[11:03:57.0000] <gsnedders>
in fiction the author generally knows the gender of the characters anyway

[11:04:47.0000] <caitp>
it's not like that tab, it's not about that, you just get access to more descriptive and colourful language

[11:04:48.0000] <TabAtkins>
(I'm also currently reading a pretty great scifi novel where the protag and their culture don't care about gender, so every single person is referred to as "she". It's a funny plot point in a few spots when they interact with cultures whose languages are gendered, and unsuccessfully try to avoid giving offense.)

[11:05:03.0000] <TabAtkins>
Like...?

[11:05:19.0000] <nox>
TabAtkins: If I wanted to troll, I would say that "he" or "she" is easier to say for me than "they". :P

[11:05:23.0000] <caitp>
we've got a lot of them passed down from inflectional languages of the roman empire

[11:05:35.0000] <TabAtkins>
And if you start talking about gods again when we're trying to talk about human beings...

[11:05:39.0000] <nox>
But we aren't even speaking and I'm not being serious.

[11:05:53.0000] <caitp>
hey, goddess is a perfectly valid occupation for anyone

[11:06:00.0000] <TabAtkins>
nox: Yeah, they were easier for me, too, until I trained myself out of it.

[11:06:11.0000] <nox>
TabAtkins: No no sorry.

[11:06:15.0000] <nox>
TabAtkins: I mean to *say*.

[11:06:17.0000] <gsnedders>
caitp: …none of the English pronouns or inflectional structures come from Romance languages

[11:06:18.0000] <nox>
TabAtkins: French accent etc.

[11:06:27.0000] <TabAtkins>
Luckily the neutral term for all the "Xess" words is just "X", same as the "male" one. Easy for you!

[11:06:37.0000] <nox>
TabAtkins: I usually use they pretty consistently.

[11:06:38.0000] <TabAtkins>
nox: Ah, kk. ^_^

[11:06:53.0000] <nox>
Last time I missed using it was when addressing a she, obviously.

[11:07:01.0000] <nox>
Because bad luck.

[11:07:29.0000] <nox>
We've been adults about it and I corrected myself and everyone lived happily afterwards.

[11:08:38.0000] <gsnedders>
caitp: all of them come from Germanic languages, and the only ones not originally Proto-Old English are they/them/their from Old Norse

[11:09:14.0000] <TabAtkins>
And we've massively collapsed those old Germanic/Norse ones too, retaining only a tiny bit of gender and casing when the original had a ton.

[11:09:55.0000] <gsnedders>
caitp: and all the cases go all the way back to Proto-Indo-European

[11:10:41.0000] <gsnedders>
Though again, we're now only down to two cases.

[11:11:44.0000] <TabAtkins>
And the second case is only barely there - "fix" for most cases, and "fixes" only for 3rd person singular.

[11:12:02.0000] <gsnedders>
TabAtkins: uh?

[11:12:09.0000] <TabAtkins>
verb case

[11:12:31.0000] <TabAtkins>
I fix, you fix, he/she/it fixes, we fix, they fix.

[11:12:43.0000] <TabAtkins>
We used to conjugate our verbs a lot more.

[11:12:43.0000] <gsnedders>
TabAtkins: wtf is a verb case

[11:12:53.0000] <TabAtkins>
(Sorry if I'm slightly misusing terms.)

[11:13:00.0000] <gsnedders>
TabAtkins: soz

[11:13:11.0000] <gsnedders>
TabAtkins: cases are things that affect nouns and pronouns

[11:13:28.0000] <TabAtkins>
WHATEVS I'M NOT A LINGUIST

[11:13:47.0000] <caitp>
there are some great books on the subject, the story of language is a pretty good and approachable one

[11:14:00.0000] <TabAtkins>
I know, I'm a conlanger. ^_^

[11:14:28.0000] <gsnedders>
TabAtkins: pfffff

[11:14:41.0000] <TabAtkins>
Ō w̆nk, Ō'm ȯ r̈gṅln̆k.

[11:14:49.0000] <gsnedders>
TabAtkins: but yeah, English has one or two grammatical cases depending on whether you view the Genitive case as still existing

[11:15:05.0000] <nox>
gsnedders: He means verb inflections, I think.

[11:15:19.0000] <gsnedders>
TabAtkins: pronouns have more inflexion, obviously (still have cases for subject/object)

[11:15:46.0000] <gsnedders>
TabAtkins: verbs typically have five forms

[11:16:35.0000] <TabAtkins>
Yeah, I know.

[11:16:36.0000] <gsnedders>
TabAtkins: you can argue that quite a few are related (including the past tense, depending on whether it's a weak or strong verb)

[11:25:26.0000] <gsnedders>
I'm still not sure what the right way to solve the imbalance of gender in tech circles is, but it's clear something is /very/ wrong given the very different stats for CS/SE graduates v. under-30 y/os in the industry

[11:26:59.0000] <TabAtkins>
Pronoun use isn't even about the tech industry.  It's just the right thing to do in general.  Hypothetical people are rarely in need of gender, and gendering them makes it harder for people of other genders to identify as that hypothetical person.

[11:27:52.0000] <gsnedders>
/me wonders if "rarely" is really true, given the number of hypothetical people in fiction :)

[11:36:31.0000] <caitp>
do you find it hard to identify as the chef when your cookbook is marketed primarily at women?

[11:36:33.0000] <caitp>
just curious

[11:37:18.0000] <caitp>
to me, it has no impact on how I see myself or how confident I am in doing whatever, so it surprises me that it actually has that effect on anyone

[11:38:04.0000] <caitp>
there are issues, to be sure, but I'm not really sold on the language thing being one of them

[11:38:15.0000] <caitp>
even if it seems like low-hanging fruit

[11:38:38.0000] <gsnedders>
caitp: At least here cookbooks are generally pretty neutral

[11:38:54.0000] <gsnedders>
caitp: besides, cooking is far closer to an even split than most tech circles

[11:39:33.0000] <gsnedders>
caitp: a more obvious example might be something like nursing or teaching (primary esp.) where much implies that those involved are women

[11:40:01.0000] <caitp>
to be sure

[11:40:38.0000] <caitp>
but in those circles, are you more concerned with successfully reviving your patient with CPR, or are you more concerned with the instructions using the word "she" instead of "he"

[11:42:00.0000] <caitp>
it's like, you already are interested in saving your patient's life, or teaching your 1st grader to count, you are probably not worried about what some random piece of instructional text assumes your gender is

[11:42:10.0000] <caitp>
and it's not going to change your mind about doing either of those things

[11:43:41.0000] <caitp>
and if that instructional text does bother you enough that you quit, maybe it wasn't the right job for you in the first place

[11:44:02.0000] <caitp>
that sounds harsh, I know, but like, priorities

[11:45:32.0000] <caitp>
I totally sympathize with people who deal with getting treated in a way they don't want to be treated, that sucks, but fixing every piece of technical writing is probably a non-solution to that problem

[11:45:41.0000] <caitp>
it makes people feel good doing it, but it doesn't really have an impact

[11:46:01.0000] <TabAtkins>
caitp: The implication that "wanting to switch to gender-neutral" is more important or more valued than "successfully teaching" is a somewhat insulting strawman, and an absolutely worthless attempt at argument.

[11:46:26.0000] <caitp>
I think you're misreading me there

[11:46:39.0000] <TabAtkins>
This line of argument always has the implicit assumption that switching pronouns is some ENORMOUS TASK, SO HERCULEAN THAT ONE MUST DEVOTE ALL OF ONE'S MENTAL EFFORT TO IT, to the exclusion of whatever else they're trying to do.

[11:46:43.0000] <caitp>
it's not about whether it's more important or not, it's about where effort is spent

[11:47:11.0000] <caitp>
whether that effort that is spent is effective or not

[11:47:13.0000] <TabAtkins>
And you really think that spending 10 minutes search-and-replacing is hard, and takes away from valuable time that can be spent doing something else?

[11:47:27.0000] <TabAtkins>
Or just learning how to write properly in the first place, so no additional time at all is taken?

[11:47:29.0000] <caitp>
I'm not going to tell people not to fix those pieces of technical writing

[11:47:37.0000] <caitp>
but I don't think it has an impact on the actual problem

[11:47:43.0000] <caitp>
it's unrelated

[11:47:44.0000] <TabAtkins>
Like, which is more important - teaching people CPR, or running a spellchecker?

[11:47:49.0000] <TabAtkins>
That's time taken away from writing.

[11:48:09.0000] <TabAtkins>
And takes a similar amount of time to do (if you're fixing gender after the fact).

[11:48:58.0000] <TabAtkins>
The argument that avoiding "he"-overuse requires significant time taken away from more useful tasks is ridiculous.

[11:49:09.0000] <caitp>
but that's not my argument

[11:49:38.0000] <TabAtkins>
I'm curous what your "but in those circles" question was about, then.

[11:49:59.0000] <gsnedders>
Much of it is more about prototypes of various things, the bias associated with deviating from them. Your patient wants a woman nurse, because you're just a cleaner. How do you reassure them that you're qualified when they're panicking and need urgent attention?

[11:50:25.0000] <caitp>
your decision to do anything, is most likely not going to be influenced by the language choices used in lore around that something

[11:50:41.0000] <caitp>
if it is, I find that strange

[11:50:41.0000] <TabAtkins>
And hell, let's take the question at face value.  What's more important, saving a few minutes of time, or ensuring that the reader isn't constantly slightly distracted by being misgendered, and thus isn't learning quite as well as they could? LIVES HANG IN THE BALANCE.

[11:50:50.0000] <TabAtkins>
caitp: You male?

[11:50:57.0000] <caitp>
that doesn't mean you can't or shouldn't fix these things

[11:51:08.0000] <caitp>
but what it does mean is that it probably doesn't have any real impact

[11:51:38.0000] <caitp>
inclusion starts a long way before it ever gets to technical writing

[11:51:50.0000] <caitp>
and has many greater challenges

[11:52:11.0000] <TabAtkins>
It's not to *you* to decide whether it has impact on other people.  I'm saying it has an effect on me.  TONS OF WOMEN say it has an effect on them.  Why are you asserting that we're all wrong?  By what evidence?

[11:52:20.0000] <caitp>
financial support, social expectations, time

[11:52:27.0000] <caitp>
training from birth

[11:52:29.0000] <TabAtkins>
"There's lots of problems" is not an argument against "we should fix this easy problem"

[11:52:44.0000] <TabAtkins>
This is freaking resistring-social-change 101 level stuff.

[11:53:21.0000] <caitp>
it feels good to fix the low hanging fruit, but the impact is less than measurable

[11:54:50.0000] <caitp>
just like this low hanging fruit wouldn't impact your decision to become a nurse, social expectations would have a much greater impact, financial reward would have a much greater impact

[11:55:10.0000] <caitp>
but if that's what you were intent on doing, the low hanging fruit wouldn't stop you

[11:55:21.0000] <caitp>
this is as it is for technology

[11:55:41.0000] <caitp>
it's a non-issue. it feels good to fix, but it doesn't really matter

[11:55:59.0000] <gsnedders>
there's plenty of evidence that low-hanging fruit mounts up over time and becomes an increasingly large issue over time

[11:58:01.0000] <TabAtkins>
See, your argument *sounds like* "there's lots of problem with inclusiveness, this is just one small one".  Which, YES, we AGREE.  But your conclusion is then "thus, we shouldn't spend any time at all on the easy issues", which is where you go off the rails.

[11:58:13.0000] <caitp>
I didn't say you shouldn't spend any time on it

[11:58:17.0000] <caitp>
I said it doesn't matter if you do or not

[11:58:53.0000] <caitp>
there's no harm in Node.js changing their docs to be more neutral, to be sure

[11:58:57.0000] <caitp>
for example

[11:59:09.0000] <TabAtkins>
And the assertion that "it doesn't matter" is factually false.  It does matter. Gendered expectations are why nursing is female-dominated.  Men disproportionately avoid nursing *because it's coded as female*, not because of compensation or anything - they take plenty of male-coded jobs that need just as much effort for just as little reward.

[11:59:19.0000] <caitp>
there isn't even necessarily any social harm in removing the word "kill" from unix

[11:59:35.0000] <TabAtkins>
And the same obviously applies to all the male-coded professions and women being discouraged from them.

[11:59:37.0000] <caitp>
but does any of this really have an impact on who gets into, and who gets out of tech?

[11:59:39.0000] <caitp>
probably not

[12:00:01.0000] <caitp>
the problem starts a long way before it ever gets to this

[12:00:02.0000] <TabAtkins>
You're talking out your ass right now. *There is plenty of evidence directly contradicting what you're saying*.

[12:00:07.0000] <caitp>
social expectations

[12:00:24.0000] <TabAtkins>
Again, you're moving back to "there's lots of problems, stop caring about this one in particular".

[12:00:37.0000] <caitp>
I'm not saying stop, I'm saying it doesn't matter

[12:00:48.0000] <TabAtkins>
Look up the literature on microagressions. *You are wrong.*

[12:00:55.0000] <caitp>
show me the evidence, lets look at the methodology of these studies

[12:01:06.0000] <TabAtkins>
Go look them up yourself, it's trivial to find.

[12:01:13.0000] <TabAtkins>
Plenty of academic work on the matter.

[12:01:52.0000] <caitp>
microaggressions aren't related to examples in technical writing

[12:02:03.0000] <TabAtkins>
lol ok

[12:02:16.0000] <TabAtkins>
You actually dont' understand what you're talking about.

[12:02:18.0000] <caitp>
it's not a micro-aggression to have some hypothetical character be characterized as something in particular

[12:02:41.0000] <TabAtkins>
It is to have *almost every* character, including ones that you are meant to identify as, coded as not-your-gender.

[12:03:01.0000] <TabAtkins>
A single hypothetical example? Of course not, that's silly.  This is about trends on the societal level.

[12:03:09.0000] <gsnedders>
Also: the fact that people argue so vehemently against microaggressions is itself an aggression and makes the atmosphere feel discernably less inclusive. If people go to long lengths to defend their behaviour and avoiding changing *tiny* things, it makes one seem unwelcome.

[12:03:20.0000] <gsnedders>
That *alone* pushes people away from tech.

[12:03:31.0000] <caitp>
no, it really doesn't

[12:03:40.0000] <caitp>
it's not the text

[12:03:41.0000] <TabAtkins>
Which is why it's "micro"aggression.  Every single individual one is tiny, insignificant, can be shrugged off if it's even noticed.  But when there's a waterfall of them, all around you, it adds up.

[12:03:45.0000] <caitp>
it's everything else around the text

[12:03:49.0000] <TabAtkins>
Again, caitp, you're wrong.

[12:04:01.0000] <TabAtkins>
It's not *just* the text. but the text is one of the (many) problems, and it's one of the easiest to fix.

[12:04:18.0000] <caitp>
sure, and you can fix it

[12:04:21.0000] <TabAtkins>
So we spend a trivial effort to fix, and make the world a tiny bit better, and make it a tiny bit easier to fix the larger problems.

[12:04:28.0000] <gsnedders>
The fact that people /don't/ fix the text and argue against fixing the text is a really problem, because it implies they won't do anything to fix the harder problems.

[12:04:33.0000] <gsnedders>
s/really/real/

[12:04:52.0000] <caitp>
you claiming that I don't get or experience microaggressions is itself a microaggression

[12:05:02.0000] <TabAtkins>
??? Who claimed that?

[12:05:13.0000] <caitp>
I'm not going to leave tech because of that, I'm going to eventually leave tech because it's terrible

[12:05:17.0000] <TabAtkins>
I claim you don't understand it, yeah, because you're proving that you don't, in this very conversation.

[12:05:29.0000] <TabAtkins>
Nobody claimed you don't experience them.

[12:06:20.0000] <caitp>
but when I do, it won't be because of technical writing, or even social expectations, or even pointless discussions on IRC

[12:06:47.0000] <caitp>
because I'm better than that

[12:06:48.0000] <gsnedders>
Yet there's plenty of evidence that those things *do* push people away from tech.

[12:08:19.0000] <caitp>
it won't even be because of claims that I don't understand something I experience frequently

[12:10:14.0000] <TabAtkins>
I'm not saying you don't understand your experiences.  You're generalizing your experiences to me, and to other women, who directly disagree with you, and who have a lot of sociological evidence that, in general, it does affect people.

[12:10:53.0000] <TabAtkins>
If misgendering doesn't affect you, awesome. That's one less thing wearing you down. Stop claiming that your experiences are universal *when tons of people claim a different experience*.

[12:11:07.0000] <caitp>
I'm not saying misgendering someone doesn't affect them

[12:11:29.0000] <caitp>
but gendering a hypothetical character as something that you don't identify as?

[12:11:32.0000] <caitp>
that's a stretch

[12:12:27.0000] <TabAtkins>
Again, if it doesn't affect you, great.  Stop trying to claim that it doesn't affect everyone, because that's wrong.  Plenty of people will tell you it affects them, and plenty of academic literature supports it.

[12:12:41.0000] <caitp>
even if you don't gender or give a race to whatever hypothetical character, someone is bound to be offended

[12:12:45.0000] <caitp>
or upset about it

[12:13:03.0000] <caitp>
you never make everyone happy

[12:13:55.0000] <TabAtkins>
Ugh, I'm done. We've been over this ground already, and you won't stop trying to invalidate other people's documented experience with your personal anecdotes.  Don't block anyone else from doing this work and we can be happy with each other.

[12:14:15.0000] <caitp>
I'm not blocking anyone from doing anything =)

[12:15:10.0000] <caitp>
do as though whilst, but don't pat yourself on the back too hard for it

[12:21:06.0000] <wanderview>
JakeA: is there any way I can verify the file downloaded from here is correct? https://jakearchibald.github.io/ebook-demo/publisher-site/readme/

[12:25:23.0000] <wanderview>
JakeA: ah, this worked:  dd bs=1 skip=1 if=readme.pubarc of=readme.zip

[12:25:28.0000] <wanderview>
and then zipinfo readme.zip

[12:26:17.0000] <wanderview>
the changing timestamps was making me think I had corruption in one version of my download

[12:26:28.0000] <wanderview>
but zip likes both files just fine

[12:36:38.0000] <JakeA>
wanderview: it's correct if it works on https://jakearchibald.github.io/ebook-demo/reader-site/

[12:37:55.0000] <wanderview>
JakeA: thanks... that works too!

[12:40:28.0000] <wanderview>
sorry I missed the link to that on the original page :-

[12:40:30.0000] <wanderview>
:-\

[12:58:23.0000] <caitp>
it's amazing how many tests there are for O.p.toString branding in wpt and in webkit/blink, considering how the feature has never been fully interoperable

[14:19:29.0000] <smaug____>
what does the speaker icon in github subscribe button mean?

[14:45:30.0000] <TabAtkins>
smaug____: Whether it's broadcasting stuff to you (your email) or not.

[15:25:59.0000] <smaug____>
TabAtkins: how do I know what is the current Chrome version number

[15:26:07.0000] <smaug____>
I mean the release stuff, not beta or anything

[15:27:07.0000] <TabAtkins>
smaug____: https://omahaproxy.appspot.com/ (and https://cros-omahaproxy.appspot.com/ for ChromeOS)

[15:28:34.0000] <smaug____>
thanks


2015-12-17
[17:23:02.0000] <MikeSmith>
caitp: would be good to have your perspective as an implementor on https://github.com/whatwg/html/pull/401 which is still open and welcoming comments

[17:23:37.0000] <MikeSmith>
caitp: also https://github.com/whatwg/html/pull/373 which has already been merged but seems like you might want to be aware of

[17:24:11.0000] <MikeSmith>
not sure if you care so much about stuff at this level, so just FYI

[17:25:12.0000] <caitp>
of course I care! thanks for the info

[17:25:45.0000] <caitp>
I'll have to have a look at them at a time when I haven't recently had a glass of wine

[17:55:15.0000] <MikeSmith>
heh

[18:03:32.0000] <smaug____>
annevk: Domenic: I need some spec reading help

[18:03:34.0000] <smaug____>
https://html.spec.whatwg.org/multipage/embedded-content.html#img-environment-changes

[18:03:38.0000] <smaug____>
step 2

[18:03:53.0000] <smaug____>
how is one supposed to interpret that

[18:05:22.0000] <smaug____>
especially, can one read it like "if the img element ....is not in a Document ..., then abort this algorithm"

[18:10:00.0000] <smaug____>
or does "it is not in a Document" refer to img's parent?

[18:16:40.0000] <caitp>
it looks to me like that step enumerates reasons to stop doing anything, and that part in particular refers to the <img> node

[18:17:00.0000] <caitp>
but what do I know, someone else can have a go at interpretting it

[18:18:44.0000] <MikeSmith>
if it's ambiguous then it's a bug and merits smaug____ or somebody taking time to raise an issue for it, IMHO

[18:19:28.0000] <MikeSmith>
because if it's not clear to the both of you then it's not going to be any more clear to other implementors

[18:19:41.0000] <smaug____>
caitp: but does that "it is not in a Document" refer only to <img> elements which don't have srcset?

[18:20:05.0000] <smaug____>
/me files a bug

[18:20:25.0000] <caitp>
it's a run-on sentence, probably written in a hurry, can't be sure

[18:22:12.0000] <caitp>
you can never tell in those cases whether someone is intentionally referring to the original subject, or if they had meant to split it into multiple sentences, or maybe use semicolons instead of commas --- all you can do is ask the author

[18:25:26.0000] <smaug____>
https://github.com/whatwg/html/issues/414 it is

[01:05:38.0000] <zcorpan>
can we rename data-x="" to lt=""? bikeshed habit

[01:07:58.0000] <annevk>
zcorpan: possibly, if you hack the toolchain and stuff

[01:12:03.0000] <zcorpan>
and also switch from <span> to <a> at the same time

[01:13:25.0000] <annevk>
zcorpan: yeah, seems trickier since we use <a> too, but who knows, I haven't looked at wattsi much

[01:13:58.0000] <zcorpan>
not particularly tricky, just leave those with href alone

[01:22:42.0000] <zcorpan>
maybe as a first step i can make wattsi fatal error when it sees href-less <a> or an lt="" attribute, which can catch mistakes now and make sure people upgrade wattsi later when we do switch to <a> and lt=""

[02:57:46.0000] <zcorpan>
MikeSmith: hmm i get an error when trying to build wattsi, even without any changes

[02:57:51.0000] <zcorpan>
Linking ../bin/wattsi

[02:57:51.0000] <zcorpan>
ld: file not found: /usr/lib/crt1.o

[02:57:51.0000] <zcorpan>
An error occurred while linking

[02:57:53.0000] <zcorpan>
wattsi.pas(2283) Error: Error while linking

[02:57:55.0000] <zcorpan>
wattsi.pas(2283) Fatal: There were 1 errors compiling module, stopping

[03:13:24.0000] <zcorpan>
PRed anyway https://github.com/whatwg/wattsi/pull/5

[03:34:11.0000] <smaug____>
zcorpan: "use srcset"

[03:34:16.0000] <smaug____>
/me wonders what that means

[03:34:46.0000] <smaug____>
perhaps 415 will explain that

[03:34:47.0000] <zcorpan>
smaug____: it's <dfn>ed

[03:35:49.0000] <annevk>
smaug____: https://github.com/whatwg/html/pull/406 requires your review

[03:35:59.0000] <zcorpan>
smaug____: https://github.com/whatwg/html/pull/415/files#diff-36cd38f49b9afa08222c0dc9ebfe35ebR24258

[03:36:31.0000] <smaug____>
/me has no idea how to see review queue in github easily

[03:36:37.0000] <smaug____>
zcorpan: ok, I see

[03:37:20.0000] <annevk>
smaug____: https://github.com/pulls/assigned

[03:38:20.0000] <smaug____>
zcorpan: so your interpretation is that if img isn't in document, return early, right?

[03:38:35.0000] <smaug____>
good

[03:38:43.0000] <smaug____>
since that is what I was hoping to see

[03:38:58.0000] <smaug____>
(since it makes fixing a bug easier in Gecko)

[03:38:58.0000] <zcorpan>
smaug____: yes. the in a document check was there before picture existed, i believe

[03:39:19.0000] <smaug____>
but I don't actually understand why in-document affects to srcset handling

[03:41:22.0000] <smaug____>
one can't do something like: var im = new Image(); im.srcset = "..."; canvas.getContext("2d").drawImage(...)

[03:41:26.0000] <smaug____>
but with src it works

[03:41:51.0000] <zcorpan>
smaug____: no you can do that. it just won't load new images when the environment changes

[03:42:42.0000] <smaug____>
well, that is what I meant. You need to manually load each time

[03:43:26.0000] <smaug____>
is there some reason why is-in-document matters for srcset?

[03:44:06.0000] <zcorpan>
ok. i'm not sure why the in-document check is there. if there are use cases maybe we should drop that

[03:44:46.0000] <smaug____>
annevk: so, how do I r+ in github

[03:44:59.0000] <annevk>
smaug____: just write a comment saying LGTM or r+

[03:45:18.0000] <smaug____>
huh

[03:47:30.0000] <smaug____>
can I do that comment in the view where I'm looking at the patch?

[03:49:56.0000] <smaug____>
I guess I can do that...

[03:50:00.0000] <zcorpan>
comment in the "Conversation". if you comment on a commit the comment disappears if the PR is rebased and force-pushed

[03:50:00.0000] <smaug____>
odd tool

[03:50:22.0000] <zcorpan>
or i suppose it doesn't disappear, but it is no longer visible in the PR

[03:51:53.0000] <zcorpan>
reviews in github isn't awesome...

[03:52:11.0000] <smaug____>
or there isn't reviews

[03:52:16.0000] <smaug____>
there are just some random comments

[03:52:58.0000] <annevk>
you can leave feedback on individual lines

[03:53:08.0000] <annevk>
but there isn't really a r+ thing and such

[03:53:13.0000] <annevk>
I'll merge that PR

[04:27:50.0000] <smaug____>
does github issue tool have some kind of dependency tracker?

[04:38:00.0000] <Ms2ger>
smaug____, no, but you can mention #1234 and that will show up in #1234

[04:57:16.0000] <smaug____>
Ms2ger: but if you close then the bug which had #1234 in a comment, #1234 isn't notified about it, right?

[04:58:17.0000] <Ms2ger>
Nope

[05:01:55.0000] <zcorpan>
smaug____: so is https://github.com/whatwg/html/pull/415 clear enough?

[05:05:14.0000] <smaug____>
zcorpan: I think so

[05:05:50.0000] <smaug____>
(I still don't know why srcset handling depends on is-in-document, when normal image loading doesn't.)

[05:06:07.0000] <smaug____>
but I can live with it depending in is-in-document

[05:06:11.0000] <smaug____>
just a minor inconsistency

[05:06:36.0000] <zcorpan>
smaug____: can you file a new issue about that?

[05:07:32.0000] <MikeSmith>
zcorpan: I have never seen that ld: file not found: /usr/lib/crt1.o error before

[05:18:56.0000] <smaug____>
zcorpan: https://github.com/whatwg/html/issues/416

[05:19:53.0000] <zcorpan>
smaug____: thx

[05:23:39.0000] <MikeSmith>
zcorpan: about that error, if you're on OSX, but you don't have XCode installed, maybe that's why

[05:28:21.0000] <zcorpan>
oh right, XCode always stops working whenever it updates, i think

[05:33:16.0000] <jgraham>
You need to accept a license agreement after every update

[05:33:21.0000] <jgraham>
In another example of

[05:33:27.0000] <jgraham>
"apple hate you:

[05:35:21.0000] <zcorpan>
plus xcode-select --install every time to redownload and install command line tools

[06:22:53.0000] <zcorpan>
ok it builds now. but Fail() isn't fatal

[06:30:10.0000] <zcorpan>
MikeSmith: why doesn't html-build show wattsi error messages?

[06:45:24.0000] <Domenic>
zcorpan: is wattsi in your PATH?

[06:46:13.0000] <zcorpan>
Domenic: it runs fine (now), it just doesn't log error messages from Fail() when using html-build/build.sh

[06:46:27.0000] <zcorpan>
Domenic: but it does when i run wattsi directly

[06:46:40.0000] <zcorpan>
Domenic: and we have a bunch of errors that i suppose nobody notices

[07:09:02.0000] <Domenic>
zcorpan: that seems bad, we should fix that asap :(

[07:09:19.0000] <Domenic>
zcorpan: I just thought maybe it was going to the web service which didn't have your local changes

[08:04:01.0000] <MikeSmith>
I wonder why Simon is running wattsi directly rather than using build.sh

[08:04:35.0000] <MikeSmith>
as far as I understand it, wattsi is not intended to be run directly on the raw source file

[08:05:27.0000] <MikeSmith>
if that's what he means by "directly"

[08:07:47.0000] <MikeSmith>
if he's running it without the pre-processing that the build.sh script is doing, then I think it's expected that there would be errors

[08:07:57.0000] <MikeSmith>
anyway I'l wait til he's back around

[08:08:30.0000] <MikeSmith>
botie, inform zcorpan here now if you have time to chat about the build script

[08:08:30.0000] <botie>
will do

[08:36:55.0000] <MikeSmith>
time for me to get back to ironing out the build wrinkles I guess

[08:37:17.0000] <MikeSmith>
/me digs his Builder cap out of the toy box and puts it back on

[08:39:36.0000] <MikeSmith>
two months is too long to be away from it I guess

[08:39:50.0000] <MikeSmith>
it has missed me

[08:39:54.0000] <MikeSmith>
nice to feel wanted

[08:43:17.0000] <Domenic>
yaaaa <3

[08:56:27.0000] <annevk>
Domenic: can you get from a Realm to a settings object?

[08:56:41.0000] <Domenic>
annevk: after my changes yes!

[08:56:41.0000] <annevk>
Domenic: the settings object has an origin

[08:56:52.0000] <annevk>
Domenic: don't think we want to use incumbent

[08:56:58.0000] <Domenic>
wasn't sure

[08:57:12.0000] <Domenic>
"the settings object whose realm execution context's Realm component is _realm_".

[08:57:32.0000] <Domenic>
We could shorten that by defining "a settings object's Realm" like I did for "a settings object's global object"

[08:57:36.0000] <annevk>
the wording of these things makes the checks look bizarro

[08:57:54.0000] <annevk>
yeah, I guess I'll wait until bz gets back from vacation

[08:58:03.0000] <annevk>
and myself

[08:58:19.0000] <annevk>
and then tweak things a bit and start writing a patch for HTML

[08:59:55.0000] <Domenic>
Very exciting to get these kind of long-term confusion issues straightened out

[09:10:57.0000] <rits>
Domenic: when i made the wrap_width changed to 100, now it is showing the changes in the whole paragraph

[09:17:59.0000] <annevk>
rbyers: as a heads up, I'll be away until January 1, seems like this is mostly done, but not done enough to wrap up before the holidays

[09:18:40.0000] <annevk>
rits: if it's the paragraph you're making changes too anyway, that's fine

[09:19:24.0000] <rbyers>
annevk: Ok, no worries.  As long as the fundamental approach (which we're actively implementing now) isn't in question then there's no rush...

[09:20:03.0000] <annevk>
rbyers: I don't think so, though as you can tell I forgot some of the background :/

[09:20:28.0000] <annevk>
(but not the bit where we decided this was the way forward)

[09:20:42.0000] <rits>
annevk: actually i have changed a line from a paragraph, i have tried to make the spaces right without changing other one's, i think it will be fine now

[09:21:01.0000] <rbyers>
annevk: Yeah, that's my fault for dragging the review out <grin>.  But it does seem like we keep coming back to the observibility issue though.  It's good to hash it out because even once it's in the spec, you won't be the last one to be concerned about it ;-)

[09:22:17.0000] <rbyers>
annevk: I think it's a legitimate viewpoint that passive listeners make the observability problem worse in some ways, but also better in other ways (in particular it gives us an incremental path to potentially solving the problem entirely).

[09:23:20.0000] <rbyers>
... and IMHO the ways in which it makes the problem worse are subtle and unlikely to be an issue for developers in practice, and the ways it makes it better are fundamental and can lead to dramatic improvements in the developer experience :-)

[09:23:30.0000] <annevk>
I guess they mostly serve as a reminder that you don't want to design any new event system in a way that would require them

[09:24:25.0000] <annevk>
And by "new event system" I mean a new set of events to expose some functionality not exposed now

[09:24:54.0000] <rbyers>
... Right.  The real problem IMHO is that we've avoided the complexity in the spec by not discussing this in the past (even though it's been the reality since the iPhone release).  In order to fix the problem, we have to describe / expose it, which adds complexity to the spec (in order to document reality)  :-(

[09:25:34.0000] <rbyers>
annevk: Not sure how to best capture all this subtlety in the spec, but happy to keep iterating on it with you until you're happy :-)

[09:27:53.0000] <annevk>
Thanks, I'll see if I can help when I get back. Pretty sure it'll land in (early) January

[10:08:09.0000] <annevk>
rbyers: so technically dictionary members are present or not present per https://heycam.github.io/webidl/#dfn-dictionary

[10:08:13.0000] <annevk>
rbyers: "has" is not really a thing

[10:08:24.0000] <annevk>
rbyers: it perhaps should be though

[10:08:35.0000] <annevk>
rbyers: there's a ton of stuff that could make this easier...

[10:08:43.0000] <annevk>
rbyers: anyway, for January I guess

[10:09:15.0000] <annevk>
rbyers: doesn't seem worth spending too much time on, I might tweak it a bit while merging

[10:09:47.0000] <caitp>
does the pass-by-value thing work in any implementations?

[10:11:01.0000] <rbyers>
annevk: ok, sounds good - thanks!

[10:13:30.0000] <rbyers>
annevk: I could change "If <var>options</var> is a dictionary and has member <code>{{EventListenerOptions/capture}}</code> with value true" to "If <var>options</var> is a dictionary and <code>{{EventListenerOptions/capture}}</code> is present in <var>options</var> with value true"

[10:15:42.0000] <annevk>
rbyers: r+

[10:16:34.0000] <annevk>
/me goes to make some dinner

[10:25:31.0000] <rbyers>
annevk: done

[10:30:46.0000] <MikeSmith>
botie, inform zcorpan when you say you're running wattsi directly, you mean you're manually running "wattsi /opt/workspace/html-build/.temp/source-whatwg-complete /opt/workspace/html-build/.temp/wattsi-output /opt/workspace/html-build/.cache/caniuse.json /opt/workspace/html-build/.cache/w3cbugs.csv" where the stuff is the .temp and .cache dirs is what wattsi expects?

[10:30:46.0000] <botie>
will do

[11:41:44.0000] <MikeSmith>
smaug____: about https://github.com/w3c/push-api/issues/177 if a "URL-safe base64 encoding" were defined, I wonder what spec would define it

[11:41:56.0000] <MikeSmith>
or really, what it would say

[11:42:27.0000] <MikeSmith>
the Push API editors must have some idea in mind of what it actually is supposed to mean

[11:42:59.0000] <smaug____>
MikeSmith: I was reviewing implementation for that code and couldn't know what should happen there, so I filed that bug

[11:43:21.0000] <smaug____>
maybe referring to ... let me find the link

[11:43:26.0000] <MikeSmith>
I see

[11:43:49.0000] <MikeSmith>
I would think they must be assuming that implementors would understand what it means

[11:44:07.0000] <smaug____>
maybe referring to https://tools.ietf.org/html/rfc4648#page-7 or something would be the right thing to do

[11:44:15.0000] <MikeSmith>
/me looks

[11:44:28.0000] <MikeSmith>
aha

[11:45:06.0000] <MikeSmith>
yeah, "Base 64 Encoding with URL and Filename Safe Alphabet"

[11:45:34.0000] <smaug____>
/me is just being a pain-in-the-ass-reviewer and complaining about stuff ;)

[11:45:36.0000] <MikeSmith>
The "URL and Filename safe" Base 64 Alphabet

[11:46:25.0000] <MikeSmith>
well it should be clear it and should use exact precise terms and not synonymns for them

[11:47:05.0000] <smaug____>
if you look at the wikipedia article, it mentions couple of variants of base64url

[11:47:16.0000] <MikeSmith>
/me looks

[11:48:27.0000] <MikeSmith>
「Standard 'base64url' with URL and Filename Safe Alphabet」vs 「Unpadded 'base64url' for "named information" URI's」

[11:48:44.0000] <smaug____>
and = handling

[11:48:54.0000] <smaug____>
" Some libraries ... will encode '=' to '.'."

[11:49:16.0000] <MikeSmith>
oh

[11:49:55.0000] <TabAtkins>
smaug____: That's def not a pain-in-the-ass nitpick.  I had no idea what that was, people need to link to things more obscure than ASCII. ^_^

[12:15:54.0000] <MikeSmith>
Domenic: OK finally made the fixes to https://github.com/whatwg/html-build/pull/29

[12:16:14.0000] <Domenic>
MikeSmith: yay! will review today

[12:16:16.0000] <MikeSmith>
only took me 80 days!

[12:16:23.0000] <MikeSmith>
Domenic: super, thanks

[12:35:10.0000] <botie>
zcorpan, at 2015-12-17 16:08 UTC, MikeSmith said: here now if you have time to chat about the build script and at 2015-12-17 18:30 UTC, MikeSmith said: when you say you're running wattsi directly, you mean you're manually running "wattsi /opt/workspace/html-build/.temp/source-whatwg-complete

[12:35:11.0000] <botie>
/opt/workspace/html-build/.temp/wattsi-output /opt/workspace/html-build/.cache/caniuse.json /opt/workspace/html-build/.cache/w3cbugs.csv" where the stuff is the .temp and .cache dirs is what wattsi expects?

[12:36:20.0000] <zcorpan>
MikeSmith: manually typing such yes

[12:36:51.0000] <MikeSmith>
zcorpan: ok will try that

[12:39:01.0000] <zcorpan>
for example i get Error: Multiple secondary definitions (subdfn) for term "dom-context-2d-settransform" Parent of first says: "context . setTransform(a, b, c, d, e, f)", parent of second says: "context . setTransform(matrix)" plus 40-something similar errors

[12:47:26.0000] <zcorpan>
though i ran it on source directly, maybe that's why there were errors?

[12:49:40.0000] <MikeSmith>
zcorpan: no, when I can reproduce it when running it manually on the pre-processed source as well

[12:49:56.0000] <zcorpan>
have to go now

[12:51:45.0000] <MikeSmith>
k

[12:55:59.0000] <MikeSmith>
so the errors are getting written to .temp/wattsi-output.txt but not echoed after that

[12:57:55.0000] <MikeSmith>
maybe we should just be using tee there to begin with but I think the reason I did it that way was so that we just do that same thing we do for the remote-wattsi case, where the errors are written to a file an the server side (and then we download that file and cat it after the build completes)

[12:58:19.0000] <MikeSmith>
/me will fix it now

[13:05:39.0000] <MikeSmith>
so it seems that wattsi doesn't actually exit non-zero when it hits those errors, and all we're doing it checking for non-zero exit status, and since we don't find it, the script assumes everything's fine and there's nothing to report

[13:06:17.0000] <MikeSmith>
fix would seem to be to make wattsi actually exit non-zero

[13:08:55.0000] <Domenic>
+1

[13:09:10.0000] <Domenic>
Although I guess maybe unix programs are supposed to only exit nonzero when they fail to produce any output?

[13:15:38.0000] <wanderview>
Domenic: I don't think that's the case...

[13:15:47.0000] <wanderview>
or I have never heard of that rule before

[13:22:58.0000] <stakagi>
I want someone to teach the reason for Dimension attributes being not a floating point but integer.

[13:23:08.0000] <stakagi>
html spec. has said that the widthheight attribute of iframe is non negative integer.

[13:24:00.0000] <stakagi>
Firefox and IE actually parse it as integer,  on the contrary, chrome and safari parse it as floating point.

[13:24:09.0000] <stakagi>
On the corresponding property on CSS, these are floating points.

[13:24:28.0000] <stakagi>
https://html.spec.whatwg.org/multipage/embedded-content.html#attr-dim-width

[13:37:15.0000] <TabAtkins>
Presumably because they were invented back in the days when nobody could have dreamed of a 2x display, so supporting floating point was pointless. (sorry)

[13:40:30.0000] <stakagi>
I am verifying the embedded content chapter of svg2 and noticed this.

[13:41:00.0000] <stakagi>
I am putting that note into svg2 wd.

[13:42:59.0000] <caitp>
i I had to guess, i'd say it's probably just because webkit's parseSimpleLengthValue() always results in a double

[13:43:07.0000] <caitp>
and blink probably still inherits that property

[13:43:28.0000] <caitp>
but, just guessing, more css-savvy igalians would know more

[13:44:27.0000] <caitp>
mozilla/msft might just cut corners and avoid going to all that trouble

[14:06:21.0000] <TabAtkins>
Moz/IE aren't cutting corners, they're following the spec. ^^_

[14:09:53.0000] <zcorpan>
MikeSmith: i tried to make wattsi's Fail() write to stderr with Writeln(StdErr, ...) but it seems it didn't make any difference when doing e.g. wattsi ... 2>test.txt

[14:10:40.0000] <zcorpan>
MikeSmith: changing the return value still doesn't print the errors, right?

[14:12:38.0000] <zcorpan>
maybe there's something obvious i don't know about in bash where you can print what wattsi prints here https://github.com/whatwg/html-build/blob/master/build.sh#L182

[14:16:43.0000] <zcorpan>
oh, it's just stdout that's written to that file?

[14:19:04.0000] <MikeSmith>
zcorpan: yeah just stdout

[14:19:25.0000] <MikeSmith>
not stderr

[14:19:39.0000] <MikeSmith>
not sure wattsi ever writes anything to stderr

[14:21:31.0000] <zcorpan>
probably not, i was just experimenting with changing how Fail() writes

[14:21:41.0000] <zcorpan>
so what does https://github.com/whatwg/wattsi/blob/master/src/wattsi.pas#L1556 do?

[14:27:01.0000] <zcorpan>
MikeSmith: is there a problem with not redirecting stdout to a file, and just let it print its stuff?

[14:55:04.0000] <MikeSmith>
zcorpan: the problem is that we can't do that for the remote build

[14:55:24.0000] <MikeSmith>
we need to write it to a file on the server side for the remote case

[14:56:33.0000] <MikeSmith>
and the same code shared for the final error reporting is used after the build is run locally or remotely

[14:56:46.0000] <MikeSmith>
and it's agnostic to where the build ran

[14:56:52.0000] <MikeSmith>
it just cats that file

[14:57:10.0000] <MikeSmith>
and the reason for sharing it is that we have to actually run the build twice

[14:57:20.0000] <MikeSmith>
to get the right line numbers

[14:57:38.0000] <MikeSmith>
if/when there are line numbers to repot

[14:58:07.0000] <MikeSmith>
which is not actually the case always because for some errors wattsi reports no line numbers

[14:58:22.0000] <MikeSmith>
but anyway, that's why we need to delay the error reporting

[14:59:05.0000] <MikeSmith>
we could have it report the errors in real time when it finds them in the local case but then if there are line numbers, the numbers are off by hundreds of lines

[14:59:21.0000] <MikeSmith>
because it;s reporting them against the pre-processed source

[15:01:15.0000] <MikeSmith>
obviously it's an ugly hack the only alernative is that we need to teach wattsi how to calculate the offset so that it reports the correct line numbers even when run just once against the pre-processed source (instead of the original raw source)

[15:02:17.0000] <MikeSmith>
and we should probably do that eventually but it would require substantially more work  laboring in Pascal code

[15:04:03.0000] <MikeSmith>
given all that if you have a better idea of how to handle the error reporting that doesn't require caching it like this is doing, then that would be great

[15:36:22.0000] <zcorpan>
MikeSmith: ok. but can it print the content of that file even on success?


2015-12-18
[19:51:59.0000] <MikeSmith>
Yeah I guess we should just make it always by credit default print out that file

[19:54:05.0000] <MikeSmith>
But if the "quiet" option is set, only print the file out if there are errors

[00:29:44.0000] <zcorpan>
can FrozenArray<DOMString> be used for a live array?

[00:41:07.0000] <MikeSmith>
> zcorpan: MikeSmith: ok. but can it print the content of that file even on success?

[00:41:39.0000] <MikeSmith>
Yeah I guess we should just make it always by credit default print out that file

[00:41:45.0000] <MikeSmith>
But if the "quiet" option is set, only print the file out if there are errors

[00:42:34.0000] <MikeSmith>
zcorpan: also a question for you: do you care much whether wattsi emits its messages to stdout or stderr

[00:43:02.0000] <MikeSmith>
it seems to me that it rightly should be emitting all its messages to stderr

[00:43:25.0000] <MikeSmith>
it seems like you were initially surprised to see that it was sending them to stdout

[00:43:29.0000] <zcorpan>
MikeSmith: sounds good. i tried implementing that this morning but didn't get the logic right :-)

[00:43:49.0000] <MikeSmith>
ok I'll try it today

[00:43:50.0000] <zcorpan>
MikeSmith: i don't really care about stderr vs stdout

[00:43:57.0000] <MikeSmith>
ah ok

[00:44:09.0000] <MikeSmith>
I guess I won't bother changing it then

[00:44:57.0000] <MikeSmith>
zcorpan: but do you think it's important that wattsi exit non-zero if there are errors?

[00:45:26.0000] <zcorpan>
MikeSmith: i only care about seeing the errors :-)

[00:45:43.0000] <MikeSmith>
ok fair enough

[00:46:15.0000] <MikeSmith>
but the if it doesn't exit non-zero for the error case it makes it pretty hard to do any sane CI automation for it

[00:47:02.0000] <zcorpan>
true

[00:47:06.0000] <MikeSmith>
ok

[00:47:21.0000] <MikeSmith>
anyway right now I'll deal with getting the error emitted reliably by the html-build build script

[00:48:03.0000] <zcorpan>
thx

[00:51:00.0000] <MikeSmith>
and sorry for the headaches you've had needing to deal with the build hassles. I had wanted to get this stuff working reliably back in September (which would have been before you were back full-time I think) but life got in the way I and I really haven't touched any of this for more than 2 months until I got to your PRs yesterday along with the PR I'd had left hanging open since the end of September

[00:51:08.0000] <MikeSmith>
anyway, will get it all righted

[00:56:14.0000] <zcorpan>
no worries, html-build has worked fine for me, really

[00:57:03.0000] <zcorpan>
my wattsi build problems were apple's fault

[01:08:34.0000] <zcorpan>
Domenic: can we adopt the "snapshot as of this commit" thing in streams for all our specs? (then we can also make "file an issue" link use the snapshot URL, and maybe clicking a <dfn> can include a stable link)

[01:35:30.0000] <zcorpan>
nice https://drafts.csswg.org/indexes/#properties

[02:04:36.0000] <MikeSmith>
very cool

[02:24:27.0000] <annevk>
zcorpan: an Array is not live

[02:28:02.0000] <MikeSmith>
FYI for folks who care about e-mail archives

[02:28:03.0000] <MikeSmith>
https://github.com/w3c/mailing-list-archives

[02:28:27.0000] <MikeSmith>
https://lists.w3.org/Archives/Public/spec-prod/2015OctDec/0089.html

[02:28:29.0000] <Ms2ger>
Hey, anyone who knows things about canvas2d around?

[02:28:47.0000] <MikeSmith>
"We are planning to modernize the markup and style of our mailinglist archives, to improve readability and usability and todisplay better on a wider variety of devices."

[02:29:18.0000] <MikeSmith>
Ms2ger: Philip` maybe

[02:29:23.0000] <Ms2ger>
Ha

[02:54:16.0000] <annevk>
Can anyone just host files in your repository? https://github.com/whatwg/notifications/issues/57#issuecomment-165652739

[03:19:04.0000] <annevk>
(reported to GitHub)

[06:55:56.0000] <smaug____>
hayato: dglazkov: does blink already have deprecation warnings for the old shadow dom API?

[07:09:58.0000] <rits>
i am compiling  watttsi, but during the build getting this error http://pastebin.com/fFKKAqdb

[07:12:55.0000] <gsnedders>
rits: what version of fps do you have?

[07:12:59.0000] <gsnedders>
*fpc

[07:13:24.0000] <gsnedders>
because that looks like it's confused between 3.0.0 and 2.6.2 for some reason?

[07:13:32.0000] <rits>
gsnedders: 3.0.0

[07:14:37.0000] <rits>
gsnedders: yes, the error seems relate to that but i have installed 3.0.0

[07:19:14.0000] <gsnedders>
rits: can you try pastebinning bash -x ./build.sh (or whatver shell)

[07:20:28.0000] <rits>
gsnedders: yes

[07:20:54.0000] <gsnedders>
/me doesn't really know /that/ much about fpc

[07:21:43.0000] <rits>
gsnedders: this one is a ./build.sh result only http://pastebin.com/fFKKAqdb

[07:22:41.0000] <rits>
me too, there is not much resource on the internet about fpc errors too

[07:24:21.0000] <gsnedders>
As far as I can see, there's nothing passing in any -FM anywhere, so it's coming from within fpc… :\

[07:24:42.0000] <gsnedders>
I presume there's some FreePascal IRC channel, maybe it'd be worthwhile asking there?

[07:25:04.0000] <gsnedders>
Unless MikeSmith can help? (He runs the AWS instance hosting it I think?)

[07:27:05.0000] <rits>
gsnedders: yes, i will try to asking on any FreePascal channel, otherwise will comment there on the issue, might be whenever they are around, will solve it then

[07:31:35.0000] <ondras>
hmh

[07:31:38.0000] <ondras>
flexbox + overflow

[07:31:39.0000] <ondras>
http://stackoverflow.com/questions/14962468/flexbox-and-vertical-scroll-in-a-full-height-app-using-newer-flexbox-api

[07:31:46.0000] <ondras>
can someone please explain *why* this works?

[07:32:03.0000] <ondras>
(i.e. setting arbitrary height on a "flex:1 1 auto" element)

[07:32:59.0000] <Domenic>
Fascinating, bfcache in blink? https://code.google.com/p/chromium/issues/detail?id=511340

[07:33:34.0000] <Domenic>
botie: tell zcorpan that generalizing stream's snapshot system has been a TODO of mine for a while, and I would welcome some help...

[07:33:34.0000] <botie>
will do

[07:37:57.0000] <gsnedders>
rits: let us know what the solution is!

[08:20:32.0000] <rits>
gsnedders: was afk, surely will tell the solution, tried two three but didn't worked, asking on their irc now :)

[09:50:16.0000] <dglazkov>
smaug____: not yet

[10:00:47.0000] <smaug____>
dglazkov: would be perhaps good, so that web devs don't start to rely more and more on deprecated API

[10:03:38.0000] <botie>
zcorpan, at 2015-12-18 15:33 UTC, Domenic said: generalizing stream's snapshot system has been a TODO of mine for a while, and I would welcome some help...

[11:13:29.0000] <TabAtkins>
annevk: I... guess? I'd just delete the thread.

[11:29:42.0000] <smaug____>
hmm, 491 tabs. time to close some of them

[11:32:33.0000] <TabAtkins>
ondras: That's an intentional and encouraged use of flexbox.  The flex container is set to the full height of the page, and the article is the only part that can grow or shrink.

[15:11:21.0000] <MikeSmith>
rits: to compile wattsi, one thing is you need to make sure you're using the development version, not any of the release versions

[15:12:16.0000] <MikeSmith>
it must be the version from ftp://freepascal.stack.nl/pub/fpc/beta/3.0.0-rc1/

[15:13:05.0000] <MikeSmith>
I mean the fpc version

[15:13:43.0000] <MikeSmith>
and you need to make sure you don't have any other existing version of fpc already installed on your system

[15:15:49.0000] <gsnedders>
MikeSmith: like, fpc 3.0.0 (the released version) doesn't work? :(

[15:17:28.0000] <MikeSmith>
gsnedders: I don't know; have never tested it but Hixie has told me as recently as September that it needs to be the version from ftp://freepascal.stack.nl/pub/fpc/beta/3.0.0-rc1/

[15:17:54.0000] <MikeSmith>
it may be that 3.0.0 got released in the mean time works, I dunno

[15:18:06.0000] <MikeSmith>
but ftp://freepascal.stack.nl/pub/fpc/beta/3.0.0-rc1/ is what we're all using

[15:24:23.0000] <MikeSmith>
rits: http://www.lazarusforum.de/viewtopic.php?f=4&t=8344 has discussion of the same error

[15:24:31.0000] <MikeSmith>
(in German)

[15:25:31.0000] <MikeSmith>
but no resolution

[15:26:12.0000] <MikeSmith>
http://lists.lazarus.freepascal.org/pipermail/lazarus/2015-February/090281.html seems to suggest it's caused by the build picking up the wrong ppcx64 binary

[15:27:31.0000] <MikeSmith>
the fpc source distribution has its own ppcx64 binary that must be used instead, and the http://pastebin.com/fFKKAqdb error message indicates it's not using it

[15:27:45.0000] <MikeSmith>
Error: /usr/bin/ppcx64 returned an error exitcode


2015-12-19
[02:25:08.0000] <ondras>
TabAtkins: I am glad to hear that it is an intended use case, as this approcach -- setting "flex:1 0 auto; height:0; overflow:auto" -- solved my particular issue. But I apparently does not understand how flex-basis:auto mixes with height:0 (flex items aligned in column)

[02:25:21.0000] <ondras>
*do no

[02:25:24.0000] <ondras>
t

[02:26:11.0000] <ondras>
TabAtkins: beucase in my understanding, flex-basis and width/height (based on the main axis) were the same... apparently not.

[05:02:48.0000] <MikeSmith>
can somebody think of any existing methods in interfaces defined in the HTML spec where it's the same method name with multiple signatures

[05:02:52.0000] <MikeSmith>
different args

[05:10:23.0000] <MikeSmith>
hmm do we really have no overloaded methods in HTML

[05:11:28.0000] <MikeSmith>
d'oh but this is a JS limitation

[05:14:33.0000] <MikeSmith>
...or not

[05:14:52.0000] <MikeSmith>
context is that I'm trying to resolve a spec build bug introduced by https://github.com/whatwg/html/commit/bb00977fe0f4960f929bb9fa136be2003383d551

[05:15:17.0000] <MikeSmith>
which overloads setTransform()

[06:50:30.0000] <nox>
Did LenientFloat disappeared, or has it never been something in the actual specs?

[06:51:16.0000] <nox>
MikeSmith: What's your problem with overloading?

[06:51:51.0000] <nox>
MikeSmith: https://html.spec.whatwg.org/multipage/webappapis.html#timers:dom-windowtimers-setinterval ?

[15:29:20.0000] <MikeSmith>
nox: it's not a technical problem but instead just a logistical problem with how to mark up the source of the spec with unique IDs for it

[15:29:53.0000] <MikeSmith>
if you look at https://github.com/whatwg/html/commit/bb00977fe0f4960f929bb9fa136be2003383d551#diff-36cd38f49b9afa08222c0dc9ebfe35ebR64382 you'll see it adds a 「subdfn data-x="dom-context-2d-getTransform"]

[15:31:07.0000] <MikeSmith>
because it's adding a setTransform(matrix) method

[15:34:21.0000] <MikeSmith>
but the problem is that since we already have a setTransform(a,b,c,d,e,f) method marked up with 「subdfn data-x="dom-context-2d-getTransform」the spec build fails because that would produce duplicate IDs in the resulting spec output

[15:36:49.0000] <MikeSmith>
in looking for some precedent in the spec about how to handle the markup for it, I've so far found only one other overloaded method in HTML, for setRangeText()

[15:37:42.0000] <MikeSmith>
but in that case the spec defines it as the same method, with one required arg and then some other optional args

[15:38:34.0000] <MikeSmith>
but in the case of setTransform the args are completely different

[15:58:10.0000] <MikeSmith>
/me looks at the source of https://html.spec.whatwg.org/multipage/webappapis.html#timers:dom-windowtimers-setinterval


2015-12-20
[16:01:15.0000] <MikeSmith>
ah OK for setInterval() case, the spec just omits the `subdfn` flag from the markup for the subsequent method descriptions

[16:01:22.0000] <MikeSmith>
so I'll just do that

[21:41:41.0000] <Domenic>
MikeSmith: what does subdfn even do? :-/

[23:57:41.0000] <MikeSmith>
Domenic: I wish I could claim I knew 😆

[06:43:40.0000] <Domenic>
MikeSmith: thanks so much for your help burning down these fixes :D

[06:47:52.0000] <annevk>
I guess I should have known something was up sooner when everything started passing the build script... I sorta assumed everyone was just building before submitting a PR... Though I guess even if they were they wouldn't catch anything either

[06:55:18.0000] <Domenic>
Dang there are a lot of good bugs trapped in https://www.w3.org/Bugs/Public/buglist.cgi?bug_status=__open__&component=HTML5%20spec&list_id=61028&product=HTML%20WG

[06:57:55.0000] <annevk>
Domenic: file an issue maybe so we don't forget? Although it's hard to prioritize relative to all the other bugs we have 😟

[11:36:47.0000] <JosephSilber>
TabAtkins, adding `max-width` to the cross axis of a flex item removes its intrinsic width.

[11:36:48.0000] <JosephSilber>
http://i.imgur.com/DxYzcWR.png

[11:36:53.0000] <JosephSilber>
Any way to get it back?

[11:37:08.0000] <JosephSilber>
Here's a fiddle: http://codepen.io/anon/pen/wMWBgy?editors=110

[12:30:17.0000] <TabAtkins>
ondras: They are the same, except flex-basis: auto means "look at width/height instead". flex-basis: content means the same as width: auto.

[12:30:39.0000] <TabAtkins>
(Don't ask, we made an early mistake and it was too late once we realized to fix it right.)

[12:54:11.0000] <JosephSilber>
TabAtkins, was that supposed to be targeted to me?

[13:03:38.0000] <ondras>
TabAtkins: I see. So perhaps I shall rephrase my question to "why do I need an explicitly set dimension (i.e. height:0) to change the sizing behavior?"

[13:05:22.0000] <TabAtkins>
ondras: You don't.  However, setting a height has some side-effects that happen to be similar to the correct behavior in a lot of simple cases.

[13:06:13.0000] <TabAtkins>
In particular, if you have a column flexbox, and the flex item overflow:visible, the default min-height:auto prevents it from getting smaller than its normal layout height.

[13:07:02.0000] <TabAtkins>
min-height:auto pays attention to an explicit height, tho - setting "height:0" makes "min-height:auto" act like "min-height:0", so you can flex upwards from zero.

[13:07:22.0000] <TabAtkins>
You can also just set "min-height:0" to make it start at its normal height, but allow shrinking.

[13:07:29.0000] <TabAtkins>
(That's the "correct" method.)

[13:07:42.0000] <TabAtkins>
JosephSilber: No, haven't looked into your issue quite yet.

[13:08:13.0000] <TabAtkins>
(Was on my phone earlier.)

[13:08:24.0000] <JosephSilber>
Ok. No pressure. Thanks for looking at it...

[13:09:57.0000] <TabAtkins>
JosephSilber: What do you mean by "removes its intrinsic width"? What do you think should happen in that pen?

[13:11:29.0000] <JosephSilber>
TabAtkins, I want to width of `.content` to only go under 500px if the parent/viewport shrinks.

[13:11:44.0000] <JosephSilber>
Otherwise it should always be its max width.

[13:12:33.0000] <JosephSilber>
Without flexbox, `max-width: 500px; margin: 0 auto` would do the trick I'm looking for.

[13:12:45.0000] <TabAtkins>
And your issue is that it instead is always just the tight width of wrapping around its text?

[13:12:51.0000] <JosephSilber>
Correct.

[13:14:09.0000] <JosephSilber>
Since it's a block-level element, I assumed it'd try to expand as much as it can.

[13:14:24.0000] <JosephSilber>
But somehow `self-align: center` makes it shrink.

[13:16:38.0000] <TabAtkins>
Okay, so the max-width isn't your problem. It does exactly what you think it should.

[13:16:41.0000] <TabAtkins>
The issue is https://drafts.csswg.org/css-flexbox/#algo-cross-item

[13:16:56.0000] <TabAtkins>
Where "auto" in the cross-size property (width, in this case) is treated as "fit-content" (shrinkwrap)

[13:17:11.0000] <TabAtkins>
So things default to wrapping tight, like a float does.

[13:17:24.0000] <TabAtkins>
(If it didn't, center/etc wouldn't be all that useful.)

[13:17:53.0000] <JosephSilber>
What does `flex-basis` mean on the cross axis?

[13:18:29.0000] <ondras>
TabAtkins: thanks for the explanation. I will apparently have to read it several times before I understand how precisely this works, let me switch to min-height:0 in the meantime. Or flex:1, maybe?

[13:19:12.0000] <TabAtkins>
JosephSilber: Nothing. 'flex' and its subproperties only apply in the main axis, controlling flexing.

[13:19:25.0000] <JosephSilber>
Right. I misread that.

[13:19:44.0000] <JosephSilber>
I understand now why it uses `fit-content` by default.

[13:19:50.0000] <JosephSilber>
Is there any way I can change it?

[13:19:52.0000] <TabAtkins>
ondras: The important point to remember is that if you want something vertical to be able to shrink below its normal size, set 'overflow' to something other than the default "visible".

[13:20:01.0000] <TabAtkins>
JosephSilber: Yeah, use width:100%

[13:20:22.0000] <TabAtkins>
(Once the Sizing spec is more fully supported, you can use "width: fill" to explicitly invoke the "grow like a block" behavior.)

[13:20:30.0000] <ondras>
TabAtkins: I am using overflow:auto, yes. But with no height/min-height set, this flexible item never shrinks below its content size, not overflowing at all.

[13:21:23.0000] <TabAtkins>
ondras: That's problematic.  overflow:auto should be fine - it's only overflow:visible that's defined to trigger the "don't shrink below your minimum size".

[13:21:38.0000] <TabAtkins>
There's been some behavior changes over time in this case, tho.

[13:22:58.0000] <JosephSilber>
So the width determines the cross-size, but I can still restrict it with a max-width. Interesting.

[13:23:24.0000] <TabAtkins>
JosephSilber: Just like normal, yeah.

[13:23:33.0000] <TabAtkins>
Literally the only difference from normal is the behavior of "width: auto".

[13:23:45.0000] <JosephSilber>
Yeah. I guess that makes sense.

[13:25:02.0000] <TabAtkins>
And like I said, sorry that it's kinda weird to get back the "fill the width" behavior.  fantasai and I have been gradually fixing and teasing apart the sizing/alignment stuff, and it's taking time for browsers to backfill the keywords.


2015-12-21
[00:41:50.0000] <howdoi>
new to service workers, is there a way to cache the url that we fetch?

[00:42:31.0000] <howdoi>
Say, on click of a button I fetch and img, is there a way to inform SW to cache whatever is fetched ?

[00:42:42.0000] <howdoi>
dynamic caching

[02:41:01.0000] <zcorpan>
MikeSmit1: there's no need to --amend "PR xyz" on our own branches, i believe

[02:41:35.0000] <zcorpan>
MikeSmit1: just others' forks that we fixup

[02:51:46.0000] <Ms2ger>
zcorpan, I guess it's not strictly necessary if you push to the feature branch before master

[02:52:02.0000] <Ms2ger>
zcorpan, still, it's kinda nice to have that data locally

[03:29:29.0000] <rits>
annevk: in this https://github.com/whatwg/html/issues/388 , fully active needs to be conditional on a document when it has no browsing context, i think

[07:10:24.0000] <ondras>
so

[07:10:28.0000] <ondras>
decodeAudioData

[07:10:41.0000] <ondras>
is this supposed to destroy the arrayBuffer passed to it?

[07:11:09.0000] <ondras>
because in Firefox, I do "console.log(buffer); ctx.decodeAudioData(buffer, cb); console.log(buffer)"

[07:11:32.0000] <ondras>
and the first log shows ArrayBuffer { byteLength: 3152545 }

[07:11:38.0000] <ondras>
second log shows ArrayBuffer { byteLength: 0 }

[07:16:07.0000] <Ms2ger>
> Neuter the audioData ArrayBuffer

[07:16:12.0000] <Ms2ger>
Spec says yes

[07:18:20.0000] <ondras>
Ms2ger: thanks. can I somehow clone the arraybuffer then, so I can use its contents for other purposes as well?

[07:19:06.0000] <Ms2ger>
I dunno

[07:19:11.0000] <ondras>
:/

[07:19:12.0000] <ondras>
ok

[07:19:39.0000] <ondras>
for now, I can simply use the buffer and feed it to web audio after I am done, reversing the current operation order

[07:20:03.0000] <Ms2ger>
/me has avoided both audio and typed arrays so far

[07:22:10.0000] <ondras>
ah

[07:22:21.0000] <ondras>
well my app kinda plays music and displays its metadata

[07:22:31.0000] <ondras>
so both web audio and typed arrays are a must

[07:27:28.0000] <annevk>
rits: cannot really investigate, no laptop, but I think when we want fully active we also want a browsing context

[08:21:47.0000] <rits>
annevk:  oh ok, sorry for disturbing you in vacations was just wondering that the changes needs to be done https://html.spec.whatwg.org/#fully-active  here only

[09:38:43.0000] <caitp>
i'm sorry I cannot help you, my private island in the carribean sea deflects all signals from web standards organizations and implementations, and also has a great pool-side bar

[12:13:23.0000] <roc>
ondras: sure, you can easily clone the ArrayBuffer

[12:16:08.0000] <ondras>
roc: via slice()? Was not sure if that actually copies any data or creates a "view" buffer

[12:16:18.0000] <roc>
I think slice() copies

[12:16:49.0000] <roc>
it's obviously more memory-efficient to get the data you need out of it first, then pass it to the decoder


2015-12-22
[16:12:32.0000] <bobbytables2>
someone knows why ParentNode.childElementCount is still a thing?

[16:17:12.0000] <jgraham>
Why not?

[16:18:30.0000] <bobbytables2>
it is redundant with children.length

[16:19:02.0000] <bobbytables2>
there was the intent to remove it, but it didn't happen https://bugzilla.mozilla.org/show_bug.cgi?id=673790

[16:19:15.0000] <bobbytables2>
trying to understand the reason...

[16:39:16.0000] <jsbell>
bobbytables2: almost certainly it proved to be not web-compatible to remove

[16:40:15.0000] <jsbell>
bobbytables2: i.e. there was content out there using it and the attempt to remove it "failed" (i.e. people reported bugs to Moz so they reverted the removal)

[16:47:59.0000] <MikeSmith>
I don't remember ever seeing an intent to remove discussion about ParentNode.childElementCount anywhere

[16:48:13.0000] <MikeSmith>
at least not in recent memory

[16:49:07.0000] <MikeSmith>
kinda surprised it was ever even considered

[16:49:18.0000] <MikeSmith>
/me looks at https://bugzilla.mozilla.org/show_bug.cgi?id=673790

[16:49:39.0000] <MikeSmith>
oh annevk

[16:50:37.0000] <MikeSmith>
I guess his heart was in the right place on that

[20:45:33.0000] <annevk>
I did not introduce it

[20:46:18.0000] <annevk>
Doug Schepers did in something I believe was called Element Traversal

[20:46:55.0000] <annevk>
 Not entirely sure why nobody objected when implementing though

[21:21:14.0000] <Domenic>
 I think in naive implementations at least it will be faster

[21:21:27.0000] <Domenic>
won't have to reify .children

[22:58:32.0000] <MikeSmith>
annevk: yeah didn't mean that you had introduced it but instead that you had tried to get it removed while there was still time

[23:04:31.0000] <annevk>
Seems like most things in DOM we tried to remove failed, but perhaps we overreached

[01:27:23.0000] <nox>
heycam|away: Are interfaces that support indexed properties supposed to always come with a length attribute?

[01:51:54.0000] <annevk>
nox: since I think you're in Europe, might be best to file issues instead

[01:52:28.0000] <nox>
annevk: Just did that. :)

[01:52:30.0000] <nox>
3 of them.

[01:52:44.0000] <nox>
Ms2ger is trying to make an editor. I smiled and went away.

[01:53:45.0000] <annevk>
New but already too smart to fall for that old trick

[01:54:00.0000] <nox>
Ah ah.

[04:49:38.0000] <smaug____>
I have a bad feeling about this... is wpt testInIFrame racy

[04:53:55.0000] <MikeSmith>
http://stackoverflow.com/questions/34409254/are-messages-sent-via-worker-postmessage-queued

[04:58:17.0000] <smaug____>
the answer is yes

[04:58:33.0000] <smaug____>
but IIRC some implementations do have issues with queing

[04:58:41.0000] <smaug____>
at least when dealing with MessagePort

[04:59:06.0000] <smaug____>
(didn't test myself but baku was telling me that)

[08:27:16.0000] <Domenic>
Trivia question: is it possible for relative URL parsing to fail? E.g. can you find a string such that new URL(theString, location.href) throws?

[08:31:48.0000] <Ms2ger`>
jwalden, I think you were asking: http://stackoverflow.com/questions/34395981/dining-philosophers-from-rust-documentation-do-not-eat-concurrently

[08:33:07.0000] <Ms2ger`>
Domenic, var theString = "//[]"

[08:33:47.0000] <jwalden>
interesting

[08:33:50.0000] <Domenic>
Nice

[08:34:06.0000] <jwalden>
you guys gotta change that example to something that schedules less deterministically, IMO :-)

[08:34:31.0000] <Ms2ger`>
jwalden, patches welcome :)

[08:34:47.0000] <jwalden>
:-P

[09:15:38.0000] <MikeSmith>
smaug____: https://bugzilla.mozilla.org/show_bug.cgi?id=1213676

[09:21:47.0000] <smaug____>
thanks

[13:35:07.0000] <zcorpan>
hmmm. can we add a linter that checks for trailing whitespace in source?

[13:42:11.0000] <MikeSmith>
zcorpan: sure we could

[14:36:59.0000] <MikeSmith>
so I notice that https://html.spec.whatwg.org/multipage/indices.html#all-interfaces is currently broken

[14:37:19.0000] <MikeSmith>
anybody know how long it's been like that?

[14:37:53.0000] <MikeSmith>
the spec build isn't emitting any errors about it

[14:38:09.0000] <MikeSmith>
it's just quietly failing to actually generate it

[14:47:28.0000] <Domenic>
MikeSmith: yeah annevk filed an issue about that a while ago :(

[14:47:35.0000] <MikeSmith>
ok

[14:47:39.0000] <Domenic>
https://github.com/whatwg/html-build/issues/37

[14:47:47.0000] <Domenic>
We all felt hopeless in the face of the great wattsi

[14:47:48.0000] <MikeSmith>
/me looks

[14:47:52.0000] <MikeSmith>
hahah

[14:48:36.0000] <MikeSmith>
ah yeah I recall this now

[14:51:31.0000] <MikeSmith>
Domenic: we could replace the script with a static manually-maintained index in the source

[14:51:43.0000] <MikeSmith>
I think it would not be a big deal to keep it up to date

[14:51:47.0000] <Domenic>
Hmm

[14:51:58.0000] <Domenic>
I would really rather move in the direction of more automation...

[14:52:12.0000] <MikeSmith>
well if we wanted to, we could write a script that checks to make sure nothing's missing from it

[14:52:23.0000] <Domenic>
what about a script that generates it :)

[14:52:45.0000] <gsnedders>
MikeSmith: we could replace wattsi with something we understand

[14:53:01.0000] <gsnedders>
:trollface:

[14:53:10.0000] <MikeSmith>
well I guess I could adapt the current perl script to generate it pre-process

[14:53:44.0000] <Domenic>
I guess I wasn't clear why we couldn't just do the preprocessing before wattsi

[14:53:54.0000] <Domenic>
Then wattsi would take care of figuring out the correct URLs

[14:54:15.0000] <Domenic>
I see, "Doing this as a pre-process will likely not work since Wattsi seems to generate the IDs for partial interfaces."

[14:54:39.0000] <Domenic>
Maybe a targeted fix at that problem like adding some placeholder syntax for partial IDs that wattsi (or the script?) has to fill in.

[14:55:25.0000] <MikeSmith>
yeah

[14:55:31.0000] <MikeSmith>
I think that statement about not being able to do it pre-process is wrong

[14:55:45.0000] <MikeSmith>
I am pretty certain I can make it do it

[14:56:10.0000] <MikeSmith>
at the simplest level, we just make the script output, e.g., <code>BroadcastChannel</code> for each interface

[14:56:30.0000] <MikeSmith>
then as you said wattsi will figure out the rest

[14:57:07.0000] <MikeSmith>
anyway, I will try it

[14:57:19.0000] <Domenic>
The partial interfaces problem makes a bit of sense to me

[14:57:27.0000] <Domenic>
but yeah definitely doable

[14:57:31.0000] <Domenic>
thanks for fixing <3

[14:57:48.0000] <Domenic>
or well, thanks for working on it <3. no promises yet i suppose :)

[14:58:31.0000] <MikeSmith>
yeah no promises

[14:58:52.0000] <MikeSmith>
and worst case we split the partial interfaces out to a separate Partial Interfaces section, and maybe maintain the manually for now

[14:59:17.0000] <MikeSmith>
hmm nah that would kinda suck I guess

[14:59:47.0000] <MikeSmith>
anyway I'll mess around with it


2015-12-23
[16:01:21.0000] <robertkowalski>
hmmm

[16:01:51.0000] <robertkowalski>
for lists in <emu-alg> tags -- how are they rendered as lists?

[16:02:51.0000] <gsnedders>
robertkowalski: li elements?

[16:03:16.0000] <gsnedders>
robertkowalski: they have display: list-item on them

[16:06:50.0000] <robertkowalski>
gsnedders: no, those: https://cldup.com/Hf4xq51iRM.png

[16:07:51.0000] <robertkowalski>
gsnedders: https://github.com/whatwg/streams/blob/master/index.bs#L466

[16:13:05.0000] <gsnedders>
robertkowalski: oh, the pre-processer rewrites them into HTML

[16:13:28.0000] <gsnedders>
robertkowalski: https://github.com/tabatkins/bikeshed is the tool

[16:14:53.0000] <Domenic>
robertkowalski: it's a bit more complicated than that, sorry

[16:15:38.0000] <Domenic>
robertkowalski: https://github.com/whatwg/streams/blob/master/ecmarkupify.js + https://github.com/whatwg/streams/blob/master/deploy.sh#L77

[16:19:58.0000] <gsnedders>
Domenic, robertkowalski uh, sorry for being wrong

[16:22:03.0000] <Domenic>
I should factor that out into something reusable... or PR it into Bikeshed or something...

[16:22:37.0000] <gsnedders>
/me wonders how heavily BS relies on lxml

[16:24:26.0000] <robertkowalski>
gsnedders: no worries! :)

[16:24:50.0000] <robertkowalski>
Domenic: hm i tried that by cargo culting but it still does not work for me

[16:28:14.0000] <Domenic>
robertkowalski: show me what you did? in a branch maybe?

[16:31:28.0000] <robertkowalski>
Domenic: https://github.com/terinjokes/console-spec/compare/master...robertkowalski:render-issue

[16:34:25.0000] <Domenic>
robertkowalski: hmm that does look like it should work i will debug

[18:34:37.0000] <MikeSmith>
Domenic: so I think I've got it actually https://github.com/whatwg/html-build/pull/48

[18:34:52.0000] <MikeSmith>
multipage output for the All Interfaces index

[18:36:26.0000] <MikeSmith>
had to harcode special-casing for two partial interface names

[18:36:35.0000] <MikeSmith>
but that seems like a decent tradeoff

[23:52:25.0000] <smaug____>
so github issue tracker send email when someone adds a comment but not when removing ?

[00:13:49.0000] <smaug____>
jst: I wouldn't mind if you still glanced over the patch for https://bugzilla.mozilla.org/show_bug.cgi?id=1233970

[00:13:54.0000] <smaug____>
the bug is so weird

[00:13:59.0000] <smaug____>
or patch

[00:14:02.0000] <smaug____>
or everything there

[00:14:18.0000] <smaug____>
/me continues baking Christmas cakes

[00:21:36.0000] <jst>
smaug____: Looks good to me, though unfortunate that it's that involved...

[00:21:50.0000] <smaug____>
k

[00:21:52.0000] <smaug____>
thanks

[00:22:19.0000] <jst>
smaug____: fortunately it's not something we'd carry along, release branch only

[00:22:36.0000] <smaug____>
sure

[00:22:43.0000] <smaug____>
I wonder how to prevent this to happen again

[00:23:06.0000] <smaug____>
somehow we should get google folks to test their stuff on non-Chrome too

[00:23:08.0000] <jst>
smaug____: if it wasn't for the unfortunate timing wrt the holidays, this would not be a problem

[00:23:18.0000] <jst>
smaug____: indeed

[00:23:20.0000] <smaug____>
(including beta versions)

[00:32:24.0000] <Ms2ger>
Morning jst

[00:32:50.0000] <jst>
Ms2ger: evenin'

[00:32:58.0000] <jst>
Ms2ger: also, happy holidays!

[00:33:39.0000] <smaug____>
happy holidays. Hopefully jst gets some lanttu- and perunalaatikko, and joulutorttu

[00:34:16.0000] <Ms2ger>
And to y'all

[00:35:00.0000] <smaug____>
/me assumes Ms2ger will just eat chocolate for couple of days

[00:35:27.0000] <jst>
smaug____: hard to find lanttu or perunalaatikko or joulutorttu around here :(

[00:35:27.0000] <Ms2ger>
Not far off :)

[00:36:01.0000] <jgraham>
Finnish Christmas dishes?

[00:36:06.0000] <jst>
yeah

[00:36:29.0000] <jst>
smaug____: it's been a few years now since I've had joulutorttu, those I do miss!

[00:36:29.0000] <jgraham>
Exciting :)

[00:38:10.0000] <smaug____>
jgraham: oh, hmm, there was some question about wpt last night

[00:38:15.0000] <jgraham>
Wikipedia claims they have joulutorttu/jultårta in Sweden. How did I miss those?

[00:38:17.0000] <smaug____>
thinking

[00:38:25.0000] <jgraham>
And also do I have time to make them…

[00:38:58.0000] <smaug____>
jgraham: so rick was wondering how to get https://github.com/w3c/web-platform-tests/pull/2299 merged

[00:41:34.0000] <jgraham>
smaug____: I think if he has reviewed them we can just merge. The problem is usually getting someone to review them

[00:41:46.0000] <jgraham>
Has he reviewed them? :)

[00:43:02.0000] <jgraham>
/me comments on the issue

[00:43:06.0000] <smaug____>
ok, thanks

[02:19:46.0000] <nox>
Why is WebIDL not using bikeshed? Should it?

[02:22:04.0000] <nox>
And unrelated, isn't the DOM algorithm to "replace all" very badly defined?

[02:22:25.0000] <nox>
If an exception is thrown during an insertion, no mutation record is queued at all.

[02:22:32.0000] <nox>
annevk: ^

[02:23:38.0000] <nox>
Oh I see, it inserts the node, it doesn't pre-inserts them. Never mind.

[02:41:50.0000] <Ms2ger>
nox, want to move it to bikeshed?

[03:12:58.0000] <nox>
Ms2ger: I knew you would say that.

[04:11:00.0000] <rits>
hello, i am working on this bug https://github.com/whatwg/html/issues/284 , i needed to know about the data-noexport plus a little more explanation to the bug

[09:44:35.0000] <rits>
Domenic: i needed to know about the data-noexport for this bug https://github.com/whatwg/html/issues/284  plus a little more explanation to the issue, if possible

[09:47:40.0000] <Domenic>
rits: I don't understand that bug too well.. annevk or TabAtkins are probably the people who do.

[09:48:46.0000] <rits>
Domenic: okay, thanks!


2015-12-24
[20:43:21.0000] <Joseph__Silber>
TabAtkins, assuming the following flexbox: `flex-direction: column; flex-wrap: wrap`, is it possible to specify on one of the the items that it should be the last in its column, forcing the next element to the next column?

[20:44:42.0000] <Joseph__Silber>
If the flexbox were flowing in a row direction, simply setting an item to `width: 100%` would force it on its own row. But there's obviously no `height: 100%`. So, is it possible any other way?

[20:45:58.0000] <astearns>
There are proposed wrap-before and wrap-after properties that would do what you want.

[20:46:08.0000] <Joseph__Silber>
Yeah. Those are a ways off.

[20:46:14.0000] <astearns>
Yep

[20:46:17.0000] <Joseph__Silber>
Can nothing similar be achieved?

[20:46:38.0000] <Joseph__Silber>
Like with `width: 100%` on row-flowing flexboxes...

[21:07:59.0000] <MikeSmith>
join #fpc

[21:08:03.0000] <MikeSmith>
oofs

[21:11:01.0000] <TabAtkins>
gsnedders: Heavily, unfortunately.  I've mostly abstracted away the operations I use behind a pseudo-DOM API (because the lxml API blows), but I heavily use CSSSelect, which relies on lxml's XPath support.

[21:11:38.0000] <TabAtkins>
nox: WebIDL is the next spec I plan to move to Bikeshed, but it'll be a big annoying job so I've been putting it off. ^_^

[21:13:21.0000] <TabAtkins>
Joseph__Silber: You can use the width:100% trick to say that something should be the *only* thing in its row/column (the flex container has to have a definite height for this to work for column flexboxes, or else the 100% won't resolve to anything useful), but that's it.  The wrap-* properties are the best you can do otherwise, to the best of my knowledge.

[21:13:33.0000] <TabAtkins>
(And they don't exist yet, for the purpose of flexbox.)

[21:13:50.0000] <Joseph__Silber>
Short answer: impossible?

[21:13:58.0000] <Joseph__Silber>
With a variable height flexbox.

[21:14:27.0000] <TabAtkins>
Probably, yeah.

[21:14:36.0000] <TabAtkins>
Tho I've been surprised by people's ingenuity before.

[23:00:13.0000] <astearns>
for keeping a flex item alone in its column, what about a flex-basis of a gazillion pixels and a flex-shrink of 1?

[00:50:48.0000] <annevk>
Domenic: I think that issue is about adding data-noexport="" to some of the mentioned <dfn>s

[00:51:25.0000] <annevk>
Anyway, back to being in hiding

[00:52:35.0000] <nox>
TabAtkins: How is such a move done?

[05:46:18.0000] <TabAtkins>
nox: With a lot of annoying slog manually converting everything.

[06:22:54.0000] <gsnedders>
TabAtkins: I do wonder if at some point it's worthwhile to just fork ElementTree and add more features to it, like parent access

[06:24:53.0000] <TabAtkins>
Do that + support selectors somehow and I can use it. 😀

[06:45:01.0000] <Joseph__Silber>
astearns, The viewport's height can be a gazillion pixels. It can stretch indefinitely. I don't see how using a humongous flex-basis will help.


2015-12-25
[19:46:42.0000] <Joseph__Silber>
TabAtkins, If a flex item is taller than its container, and the container has align-items set to center, the item sticks out at the top.

[19:46:42.0000] <Joseph__Silber>
http://codepen.io/anon/pen/bEwRRV

[19:47:37.0000] <Joseph__Silber>
Is it possible to only center it if it's smaller than the flex parent, but if it's bigger it should scroll down in the parent, put start flush top with the parent?

[19:47:53.0000] <Joseph__Silber>
but* start

[19:49:14.0000] <TabAtkins>
Joseph__Silber: Use margins to center it instead. Auto on both sides.

[19:50:08.0000] <TabAtkins>
When the Alignment spec is fully implemented, you can use 'align-self: center safe' to do it, too

[19:50:12.0000] <Joseph__Silber>
It works vertically in flexbox? Great!

[19:50:28.0000] <Joseph__Silber>
Yeah. Been waiting for that safe for a while.

[19:50:40.0000] <Joseph__Silber>
It's been baking for a while :)

[19:50:47.0000] <TabAtkins>
Yeah, flex and grid make margins work properly

[19:50:48.0000] <Joseph__Silber>
Great work you're doing!

[19:51:24.0000] <TabAtkins>
But margins were intentionally designed to give you "safe" alignment in Flexbox and Grid.

[23:05:30.0000] <annevk>
Happy holidays everyone

[01:27:03.0000] <MikeSmith>
Happy holidays annevk

[15:32:35.0000] <MikeSmith>
http://stackoverflow.com/questions/34466761/html5-srcset-is-1x-mandatory


2015-12-27
[16:01:24.0000] <MikeSmith>
http://stackoverflow.com/questions/33146029/seeing-if-a-request-succeeds-from-within-a-service-worker

[12:27:00.0000] <Domenic>
We should really get around to removing the outline algorithm

[12:31:04.0000] <tantek>
agreed

[13:42:38.0000] <MikeSmith>
Domenic: tantek Why?

[13:43:31.0000] <tantek>
insufficient implementation, having it be in the spec is misleading (affords it implied status that is inaccurate)

[13:53:49.0000] <MikeSmith>
there's actually nothing in the spec for browsers to implement

[13:54:01.0000] <tantek>
the outline algorithm itself presumably

[13:54:03.0000] <MikeSmith>
nothing exposed to web content

[13:54:20.0000] <tantek>
great, then move it to a non-normative appendix

[13:54:35.0000] <tantek>
though I thought it was somehow exposed in the DOM, no?

[13:54:45.0000] <MikeSmith>
nope

[13:55:07.0000] <tantek>
then a non-normative appendix is a good start to moving it out.

[13:55:19.0000] <MikeSmith>
So why not let's actually add a requirement?

[13:55:43.0000] <MikeSmith>
Element.createOutline()

[13:55:53.0000] <tantek>
because no implementer has cared enough to date to ask for it

[13:55:59.0000] <tantek>
features by default should be deleted

[13:56:09.0000] <tantek>
not solutions looking for problems

[13:56:40.0000] <MikeSmith>
or alternately document.createOuline(element)

[13:57:17.0000] <MikeSmith>
implementors are typically not the ones who ask for such features

[13:57:49.0000] <MikeSmith>
And it's not a solution looking for a problem

[13:58:32.0000] <MikeSmith>
The core problem is the fact that we added section and article

[13:58:44.0000] <tantek>
I'm kind of done with those too

[13:59:03.0000] <MikeSmith>
The outline algorithm is a necessary consequences of having done that

[13:59:26.0000] <tantek>
If it were necessary it would have been implemented. So no.

[13:59:37.0000] <MikeSmith>
tantek: well the language is stuck with those elements now

[13:59:56.0000] <tantek>
is it? if no one does anything particularly interesting with them they turn into aliases for div

[14:00:37.0000] <MikeSmith>
sometimes having discussions with you really bums me out man

[14:02:31.0000] <MikeSmith>
 https://github.com/whatwg/html/issues/83#issuecomment-136882847

[14:02:34.0000] <MikeSmith>
Anyway I agree with what Hixie said there

[14:05:47.0000] <gsnedders>
MikeSmith: how do a11y tools get at the outline? do they get it from the DOM tree? from the a11y tree-thing?

[14:05:58.0000] <MikeSmith>
and otherwise in general for 2016 l think literally I'm going to seriously try to adopt a communication mode where I try very hard to project a positive vibe and not unintentionally bum people out

[14:05:59.0000] <gsnedders>
I should really understand how the a11y layers work better.

[14:06:16.0000] <MikeSmith>
They don't do anything with it

[14:06:36.0000] <gsnedders>
I thought most a11y stuff had ways to jump between sections?

[14:06:46.0000] <MikeSmith>
They just do a naive outline based on the headings

[14:06:49.0000] <gsnedders>
Or is that just jump between sections?

[14:07:00.0000] <MikeSmith>
naive headings level

[14:07:26.0000] <MikeSmith>
Yeah they provide jumping

[14:07:49.0000] <gsnedders>
So do they have *any* concept of an outline?

[14:07:51.0000] <MikeSmith>
But they do not understand nested h1

[14:07:58.0000] <gsnedders>
Right, that's not what I'm asking.

[14:08:02.0000] <MikeSmith>
no they do not

[14:08:20.0000] <gsnedders>
I'm asking do they have an outline or do they have "jump to next heading in document order"?

[14:08:31.0000] <MikeSmith>
They treat every h1 as a top level heading

[14:08:43.0000] <gsnedders>
Do they have a concept of levels of heading?

[14:09:05.0000] <gsnedders>
If they do, do we not need a conformance class for accessibility tools?

[14:09:15.0000] <MikeSmith>
They create a naive hierarchy based just on h1 to h6

[14:10:10.0000] <MikeSmith>
So you can navigate to/through all the H2 headings etc

[14:10:17.0000] <gsnedders>
Right. So all we're asking them to change (currently) is how they build their hierarchy. OK.

[14:10:29.0000] <MikeSmith>
yeah

[14:12:30.0000] <MikeSmith>
the way I address this problem in the HTML checker is to emit a warning if an h1 is used in a nested section or article

[14:12:43.0000] <gsnedders>
So again: Do we need a new conformance class for accessiblity tools?

[14:12:47.0000] <MikeSmith>
that is, other than at the top level

[14:12:51.0000] <gsnedders>
Because currently there isn't one that applies for stuff like that.

[14:13:06.0000] <MikeSmith>
We already have that conformance class, I think

[14:13:25.0000] <MikeSmith>
But if not, yeah, we should add it

[14:13:29.0000] <MikeSmith>
definitely

[14:14:06.0000] <gsnedders>
I guess half the problem is the mismatch of things exposed via the accessibility APIs on different platforms

[14:14:24.0000] <gsnedders>
and by different rendering engines

[14:15:28.0000] <MikeSmith>
btw I also tried to address this need in the HTML checker by adding a Show Outline feature. which many people do useー just as many did use the Show Outline feature of the legacy W3C markup validator

[14:15:55.0000] <MikeSmith>
gsnedders: yeah

[14:17:30.0000] <MikeSmith>
Steve Faulkner has been working to try to erase that mismatch and get more interoperability for a11y APIs

[14:17:58.0000] <MikeSmith>
he edits a related spec

[14:20:20.0000] <gsnedders>
I guess some of the problem is that much of that is OS level

[14:25:18.0000] <MikeSmith>
yup

[14:32:40.0000] <MikeSmith>
but IMHO another problem is that the a11y tree is not exposed to Web content

[14:33:18.0000] <MikeSmith>
it's one of the cases where the browser is doing something important and useful but Web developers have no way to observe it or examine it from script

[14:35:51.0000] <MikeSmith>
IMHO we need an a11y abstraction above the platform APIs, that is exposed for scripts to observe

[14:38:04.0000] <MikeSmith>
what I mean is, if you look at http://rawgit.com/w3c/html-api-map/master/index.html#el-article

[14:39:11.0000] <MikeSmith>
it shows that, depending on the platform API, <article> gets mapped to some thing called either ROLE_SYSTEM_GROUPING or ROLE_SYSTEM_DOCUMENT or ATK_ROLE_DOCUMENT_FRAME or AXDocumentArticle

[14:40:20.0000] <MikeSmith>
so we should just have one standard abstract defined thing/name that it gets mapped to, and that should be exposed to scripts

[14:40:54.0000] <MikeSmith>
and the tree of such things that browser engines create should be exposed to scripts

[14:44:35.0000] <MikeSmith>
and anyway I think what this shares with this outline-algorithm issue is that in general when you have specs defining things or stating requirements that normal Web developers have no way to observe and test from there Web application code, we're gonna have problems

[14:48:11.0000] <MikeSmith>
in other news http://stackoverflow.com/questions/34473930/service-worker-caching-requests-for-one-time-urls-without-ignoresearch is interesting

[14:48:57.0000] <MikeSmith>
one-cache-per-file SW caching

[14:49:36.0000] <MikeSmith>
"A few gotchas. With this approach, you’ll need to roll your own cache-expiration logic."

[15:44:28.0000] <Domenic>
MikeSmith: I think the problem is that HTML right now has an abstract notion of author-facing semantics which are actively in conflict with user-facing semantics as implemented by a11y tools

[15:44:35.0000] <Domenic>
I'd like to bring them in line

[15:44:57.0000] <Domenic>
Since a11y tools and browsers have stated they will not change, we should change the author-facing abstract semantics


2015-12-28
[17:22:31.0000] <MikeSmith>
Domenic: I see

[17:23:45.0000] <MikeSmith>
I agree with the sentiment but in the case of the outline algorithm I wonder if that would be possible without disallowing h1 within section etc

[17:24:06.0000] <MikeSmith>
as annevk alludes to in https://github.com/whatwg/html/issues/83#issuecomment-136933409

[17:25:04.0000] <MikeSmith>
I find myself agreeing with most or all of what Hixie and annevk say in that thread

[17:26:11.0000] <MikeSmith>
especially as far as the point that it seems like we can't just remove the outline algorithm without needing to make other changes as a consequence

[17:26:43.0000] <Domenic>
Did you see my latest plan?

[17:26:51.0000] <MikeSmith>
in that thread?

[17:27:05.0000] <Domenic>
Yeah posted today

[17:27:08.0000] <MikeSmith>
https://github.com/whatwg/html/issues/83#issuecomment-167440711 I guess?

[17:27:15.0000] <MikeSmith>
didn't read it yet

[17:27:19.0000] <MikeSmith>
/me looks now

[17:29:27.0000] <MikeSmith>
OK yeah that's something concrete to discuss

[17:30:49.0000] <MikeSmith>
so as far as the "change the authoring guidance" part I think that in part might amount to more than just changing guidance but also signficantly changing the normative document-conformance requirements

[17:31:11.0000] <Domenic>
Yeah

[17:31:47.0000] <Domenic>
So that documents are only conforming if they are usable by disabled users

[17:32:01.0000] <MikeSmith>
OK

[17:32:13.0000] <MikeSmith>
yeah that it is good way to frame it

[17:32:22.0000] <Domenic>
The big thing about that post is that it's different from my original plan of obsolete/remove everything.

[17:32:36.0000] <Domenic>
We can still say section etc. have semantic value

[17:32:42.0000] <MikeSmith>
yeah

[17:33:03.0000] <Domenic>
We just can't define their author-facing semantics such that they break user-facing UI

[17:33:08.0000] <MikeSmith>
yup

[17:33:32.0000] <MikeSmith>
so yeah I strongly agree with the goal

[17:34:58.0000] <MikeSmith>
concretely I think it might amount to requiring/saying that h1-h6 cannot be used in ways differently than they could before <section> and <article> existed

[17:35:12.0000] <MikeSmith>
personally I would like to see the spec say that

[17:35:50.0000] <MikeSmith>
basically that your h1-h6 hierarchy in isolation from the rest of the document must make sense, in isolation

[17:36:28.0000] <MikeSmith>
because that's basically how AT/screen-reader users "see" it, in practice

[17:36:40.0000] <MikeSmith>
it's basically how *all* tools see it

[17:37:01.0000] <MikeSmith>
the only exception are the tiny handful of things that implement the outline algorithm

[17:37:57.0000] <MikeSmith>
all that said, I think the challenge there is a social one, not a technical one, in that we would be rolling back what the spec has previously made valid and even recommended to author-developers

[17:39:09.0000] <MikeSmith>
getting author-developers to quit using h1 nested in <section>, despite years of the spec recommending that they do it

[17:39:16.0000] <Domenic>
Yeah that sounds about right

[17:39:46.0000] <MikeSmith>
OK, well I'm funlly on board with that, if that's where we want to take it

[17:39:52.0000] <Domenic>
Part of that I think is making the outline algorithm produce the same outline ATs use

[17:39:59.0000] <MikeSmith>
yup

[17:42:16.0000] <MikeSmith>
I have actually already implemented part of this in the HTML checker

[17:42:43.0000] <MikeSmith>
in that the checker already emits warnings for cases of non-top-level H1s

[17:43:51.0000] <MikeSmith>
and I would be happy to extend that stuff to experimentally support a new/different outline algorithm, if/when we come up with one

[17:45:05.0000] <MikeSmith>
so that the checker Show Outline feature could show what the document outline looks like to actual AT

[17:45:27.0000] <MikeSmith>
instead of showing what it looks like according to the outline algorithm

[17:45:59.0000] <MikeSmith>
or at least, showing both, so that authors can compare and see the difference for themselves

[17:46:52.0000] <MikeSmith>
and could have the checker would report warnings or errors for anything that doesn't create a usable AT outline algorithm

[17:47:56.0000] <MikeSmith>
as I said I think the checker's already doing some of that, but it could be extended furtherーespecially if I have actual requirements in a spec to work from

[18:35:31.0000] <MikeSmith>
commented https://github.com/whatwg/html/issues/83#issuecomment-167461826

[20:44:18.0000] <tantek>
MikeSmith: I agree more with annevk, specifically, obsolete section, h, hgroup

[20:45:29.0000] <tantek>
MikeSmith: I don't mean to bum you out - sounds like a miscommunication of tone. I'm more looking to simplify and drop things from HTML that don't have obvious benefits to typical, perhaps even "most" web developers.

[20:47:43.0000] <tantek>
I do find it a bit ironic that even a second attempt at the abstract section/h (first being xhtml2) has essentially failed in practice (in live deployment on the web, and in browsers doing anything with it).

[20:49:50.0000] <tantek>
MikeSmith, to rephrase this as a positive, do you use section/h/hgroup on your own personal website?

[20:50:03.0000] <MikeSmith>
tantek: yeah understood, I was kinda directing that "bummed out" comment to myself as much as anything gelse. In that I notice sometimes looking back at stuff I wrote on IRC that I come across kinda more negative than I intend

[20:50:17.0000] <MikeSmith>
tantek: I never use hgroup

[20:50:27.0000] <MikeSmith>
we don't have "h", right?

[20:50:45.0000] <tantek>
h1 inside section acts like h, right?

[20:50:46.0000] <MikeSmith>
that was an XHTML2 thing wasn't it?

[20:50:51.0000] <MikeSmith>
ah yeah

[20:50:57.0000] <MikeSmith>
yeah that I don't use

[20:50:58.0000] <tantek>
right

[20:51:13.0000] <tantek>
I used to use article, but I stopped because I couldn't find any benefit

[20:51:21.0000] <MikeSmith>
I use h1-h6 strictly according to order

[20:51:34.0000] <MikeSmith>
yeah I can't explain any benefit of it to anybody

[20:52:12.0000] <MikeSmith>
tantek: but anyway I agree we should obselete section and hgroup if we could

[20:52:32.0000] <tantek>
that would be a good start

[20:52:45.0000] <MikeSmith>
especially hgroup literally has no purpose at all outside of the outline algorithm

[20:52:50.0000] <tantek>
and to be fair, I was a fan of hgroup originally

[20:53:29.0000] <MikeSmith>
well currently I think its only purpose/effect in practice is to hide/suppress subheadings in the outline algorithm

[20:53:31.0000] <tantek>
used / taught it in the book and everything

[20:53:50.0000] <MikeSmith>
well I think a lot of this is hindsight

[20:54:20.0000] <MikeSmith>
I think most everybody thought this stuff was a good idea at the time

[20:54:31.0000] <tantek>
I wanted to believe and all that.

[20:54:47.0000] <tantek>
Enriching the language to cover more use-cases etc.

[20:54:51.0000] <MikeSmith>
yeah

[20:55:07.0000] <tantek>
Then it turned out many of these use-cases were too edge-case.

[20:55:26.0000] <tantek>
And weren't worth the cognitive cost of added complexity to the core language.

[20:55:52.0000] <MikeSmith>
yeah, and like a lot of other things with the platform, it's turned out to be a lot more complicated than it seemed, and has had bad unintended side effects

[20:56:28.0000] <tantek>
Agreed

[20:57:05.0000] <tantek>
Also I've pretty much given up on sets/pairs of nested tags for special functionality. Too awkward and easy to get wrong.

[20:57:22.0000] <tantek>
And then we end up having to define what should happen when they're misused anyway

[20:57:56.0000] <tantek>
tags work best when they perform single self-standing functions

[20:58:34.0000] <MikeSmith>
I think one good rule of thumb is that when somebody finds themselves repeatedly using an argument in support of something of the form "Vendors should just fix their buggy implementations", they seriously need to consider if they're on the wrong side of the argument (and the wrong side of history)

[20:58:56.0000] <MikeSmith>
tantek: yeah, it's a KISS thing in part

[20:59:17.0000] <tantek>
Yes, that's a good way to interpret the data point(s) of "buggy implementations"

[21:02:27.0000] <tantek>
FWIW it's taken *a lot* of work to figure out good ways to do hierarchical objects of any kind from microformats to microdata/rdfa to microformats2. And we're still finding edge cases to fix in parsers (to handle apparent natural author expectations).

[21:02:31.0000] <MikeSmith>
so as far as getting concrete progress maybe the lowest-hanging fruit is changing the spec so that we no longer have "h1 inside section that acts like XHTML2 h"

[21:02:49.0000] <MikeSmith>
tantek: yeah I can imagine

[21:03:16.0000] <tantek>
MIkeSmith yeah

[21:04:05.0000] <tantek>
the only way we have made any such incremental progress with mf2 is with active live use on the web, implementation in parsers, use of parsers by actual sites consuming and doing stuff with the data, then publishing more of it. a tight real world feedback loop.

[21:04:28.0000] <tantek>
without such real world publishing/implementation feedback loops, any attempt at language iteration is speculative at best, likely to fail at worst.

[21:04:35.0000] <MikeSmith>
yup

[21:04:52.0000] <tantek>
hence I've pretty much given up on anything unimplemented 1yr+ after being spec'd

[21:05:10.0000] <tantek>
or specing at all before at least one prototype implementation

[21:05:35.0000] <MikeSmith>
yeah and that's also why we should always be extremely cautious about adding any new elements

[21:05:55.0000] <MikeSmith>
I think we have been actually

[21:05:59.0000] <tantek>
MikeSmith: at this point we have web components to experiment with new elements

[21:06:02.0000] <tantek>
before we add them

[21:06:06.0000] <MikeSmith>
yeah

[21:06:08.0000] <tantek>
I'm also ok with extension specs

[21:06:18.0000] <tantek>
as a way to discuss ideas for new elements

[21:06:24.0000] <MikeSmith>
yes

[21:06:31.0000] <tantek>
but yeah, I wouldn't add anything to the core until there's some pretty serious critical mass

[21:06:55.0000] <tantek>
and OTOH I'd drop tons of stuff from the core, section/hgroup is just a start

[21:06:58.0000] <MikeSmith>
yeah I think we mostly have agreement about that these days, fortunately

[21:07:39.0000] <MikeSmith>
I mean about the critical-mass thing

[21:08:05.0000] <tantek>
I figured

[21:08:55.0000] <MikeSmith>
btw about h1-that-acts-like-h, for that I've already basically put some facts on the group by having the HTML checker (validator) emit warnings about it. I think I've had it emitting those warnings for almost a year or so now

[21:09:05.0000] <MikeSmith>
and nobody complains about them

[21:09:16.0000] <MikeSmith>
I don't get bug reports about those warnings

[21:09:42.0000] <tantek>
I've been circulating the idea of a drastic subsetting for some time among a few people, and pretty much always gotten a " it's crazy" response.

[21:09:47.0000] <MikeSmith>
so I take that to mean that authors are changing their documents to not have misplaced H1s

[21:09:52.0000] <tantek>
But now that AMP has been proposed, it looks less crazy. :)

[21:09:59.0000] <MikeSmith>
true

[21:10:04.0000] <MikeSmith>
things change

[21:10:18.0000] <tantek>
I tend to be impatient

[21:12:37.0000] <MikeSmith>
well, I think being impatient is a formula for frustration, as far as this platform goes 😆

[21:13:03.0000] <MikeSmith>
that said I'm also impatient

[21:13:11.0000] <MikeSmith>
can't help not being so I guess

[21:15:26.0000] <tantek>
MikeSmith: I've only found one place to direct that impatience with any positive results, my own website.

[21:33:27.0000] <MikeSmith>
tantek: yeah I should work on my own sites more

[21:34:11.0000] <tantek>
MikeSmith: on the theme of being more positive, it really helps

[21:34:20.0000] <MikeSmith>
yeah

[21:34:24.0000] <MikeSmith>
in that spirit I plan to get everything of mine running TLS-only soon

[21:34:51.0000] <MikeSmith>
let's encrypt is something to be really happy about

[21:36:37.0000] <tantek>
yes - it's a good thing

[01:22:46.0000] <MikeSmith>
http://stackoverflow.com/questions/34489810/firefox-push-api-aborterror-error-retrieving-push-subscription

[11:56:09.0000] <Domenic>
MikeSmith: what do you think of having the validator encourage people to use <script>, <script type="module">, or <script type="not-a-js-mimetype-or-module">?

[11:56:20.0000] <Domenic>
Currently it says that the value must be a valid mime type

[11:56:52.0000] <Domenic>
I think it would be a nicer story to say "if you want legacy script, don't include type. If you want module, include type="module". If you want an inert block, use anything without special behavior."

[11:57:43.0000] <Domenic>
But, maybe this would cause annoying warnings for people who are doing <script type="text/javascript">

[13:49:54.0000] <smaug____>
hmm, gstatic.com has been very slow recently

[13:50:11.0000] <smaug____>
I wonder what happens if I just block it

[14:01:20.0000] <smaug____>
any blink folks around?

[14:01:36.0000] <smaug____>
is https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/animation/ElementAnimation.idl&q=getAnimations&sq=package:chromium&type=cs&l=43 enabled by default?

[14:02:09.0000] <smaug____>
hmm, it is at least in dev builds

[14:05:07.0000] <smaug____>
but actually, I'm more interested in release versions

[14:05:21.0000] <smaug____>
/me wonders how to run different versions of chromium

[14:27:50.0000] <MikeSmith>
Domenic: I'm all for making the validator provide the most useful guidance it can; we could experiment with warning about type="text/javascript" and see what kind of reaction it gets

[14:29:41.0000] <Domenic>
MikeSmith: that would be cool. I want to figure out what to change the authoring "must" to and would prefer something like what I described.

[14:30:26.0000] <MikeSmith>
sounds good to me

[14:32:09.0000] <MikeSmith>
about <video> is it possible to completely programatically generate a video from scratch in JS?

[14:32:37.0000] <MikeSmith>
I mean similar to the way you can create a canvas or a audio stream

[14:32:58.0000] <MikeSmith>
I am guessing not, due to the encoding complexity

[14:33:55.0000] <MikeSmith>
and I mean without a JS library of some kind of video encoding

[14:34:11.0000] <Domenic>
I think some of the MSE stuff is aimed at that but I am not sure how low-level it is

[14:34:40.0000] <MikeSmith>
yeah I think MSE is not quite that low-level

[14:34:57.0000] <MikeSmith>
it can't generate the bytes on its own afaik

[14:35:50.0000] <MikeSmith>
anyway the context is http://stackoverflow.com/questions/34488237/can-html5-mediasource-be-used-to-dynamically-generate-a-single-color-video-of-ar

[14:37:03.0000] <MikeSmith>
these days I find SO to be a good source for finding edge cases of people pushing web-platform features to do odd/interesting stuff

[14:38:23.0000] <MikeSmith>
the Unanswered questions part of SO is at least as interesting as the questions that have good answers


2015-12-29
[17:23:49.0000] <tantek>
MikeSmith: something interesting happening with rel-values I figured you might be interested in

[17:23:59.0000] <tantek>
people seem to coming up with library-specific rel-values for "lightbox"

[17:24:59.0000] <MikeSmith>
oh?

[17:25:09.0000] <tantek>
I just had to clear out a bunch of variants of "clearbox" and "prettyPhoto" which were all redundant with "lightbox"

[17:25:12.0000] <MikeSmith>
just recently?

[17:25:25.0000] <tantek>
It seems to be happening more than once

[17:25:55.0000] <tantek>
recent-ish

[17:26:05.0000] <tantek>
earliest additions of "prettyPhoto" date back to 2013

[17:26:30.0000] <tantek>
just found one from 2012

[17:26:54.0000] <MikeSmith>
with the meta name stuff I remember I had seen some odd patterns of multiple similar things coming in at the same time

[17:27:04.0000] <tantek>
I'm wondering if there is some way we can say, "don't use x value which is library specific use the generic value y"

[17:27:22.0000] <tantek>
I mean, someway we can encode that into the tables

[17:27:32.0000] <tantek>
so that the validator could tell authors instead of just "invalid"

[17:27:54.0000] <tantek>
clearly it's a signal when the same thing is added multiple times without addressing previous problems

[17:43:41.0000] <MikeSmith>
tantek: yeah there had been some discussion about that before. it's certainly doable

[17:53:57.0000] <tantek>
MikeSmith - mostly I wanted you to double-check the analysis (rejecting library-specific duplicates of "lightbox") and/or provide counter-perspective (because I know I can trust you to do so :) )

[01:47:17.0000] <roc>
Domenic, MikeSmith: this is possible using a combination of canvas.captureStream() and MediaRecorder

[01:47:20.0000] <roc>
in fact it's easy

[01:47:41.0000] <roc>
in Firefox at least, not in Chrome yet...

[01:56:38.0000] <MikeSmith>
roc: oh cool

[01:57:07.0000] <MikeSmith>
roc: is there an demo/example anywhere?

[01:57:36.0000] <MikeSmith>
or I guess I could just try it

[01:58:16.0000] <MikeSmith>
/me browses https://github.com/mozdevs/mediarecorder

[01:59:42.0000] <roc>
I don't have one on hand

[02:02:04.0000] <MikeSmith>
roc: no worries, I'll mess around and try to make one

[02:02:33.0000] <MikeSmith>
oh

[02:02:42.0000] <MikeSmith>
http://mozdevs.github.io/mediarecorder/canvas-stream.html looks like what you described

[02:02:51.0000] <MikeSmith>
/me looks at the source

[02:04:12.0000] <MikeSmith>
yeah that looks like exactly it

[02:04:20.0000] <MikeSmith>
unless I'm misunderstanding

[02:05:47.0000] <roc>
yes, except that (despite the name) it's not actually doing the recording

[02:05:51.0000] <roc>
just the stream generation

[02:13:58.0000] <MikeSmith>
ok

[02:18:53.0000] <MikeSmith>
roc: I poste a code snippet to SO as a follow-up to your answer

[02:54:40.0000] <MikeSmith>
roc: I can't see where http://mozdevs.github.io/mediarecorder/canvas-stream.html is actually using MediaRecorder

[02:54:43.0000] <MikeSmith>
is it?

[11:23:15.0000] <roc>
it's not

[11:23:27.0000] <roc>
as I said, it's just doing the stream generation, not the recording

[14:44:29.0000] <MikeSmith>
roc: ah, I see now, thanks

[15:07:18.0000] <MikeSmith>
anyway though I had known some about MediaRecorder I hadn't know about canvas.captureStream() til you mentioned it yesterday

[15:07:41.0000] <MikeSmith>
/me hadn't been paying so much attention yet to the Media Capture spec

[15:20:55.0000] <MikeSmith>
s/Media Capture/Media Capture from DOM Elements/

[15:29:35.0000] <MikeSmith>
Domenic: FYI http://w3c.github.io/mediacapture-fromelement/#html-canvas-element-media-capture-extensions


2015-12-30
[17:08:05.0000] <MikeSmith>
raised a WebKit feature bug for implementing video capture from <canvas> https://bugs.webkit.org/show_bug.cgi?id=152591

[17:09:36.0000] <MikeSmith>
also opened an Edge Uservoice proposal https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/11252697-video-capture-from-canvas

[01:17:38.0000] <nox>
Hello here.

[01:17:55.0000] <nox>
annevk: Made a couple of DOM fixes, but you probably saw that already.

[01:37:19.0000] <annevk>
nox: on vacation, any online activity is accidental

[01:37:34.0000] <nox>
annevk: Fair enough. Have a nice end of year. :)

[01:38:11.0000] <nox>
Ah ah.

[01:38:35.0000] <nox>
Ms2ger: No kicks, only reviews. ;)

[01:38:46.0000] <Ms2ger>
/me kicks nox too

[01:38:53.0000] <nox>
Hah.


2015-12-31
[23:38:36.0000] <Domenic>
I forget why mutation observers need this compound microtask thing...

[23:51:13.0000] <Domenic>
Ah it's so that they are delivered in creation time order. I wonder why that was important.

[01:59:19.0000] <nox>
Domenic: You can't be sure the state of the DOM tree otherwise, AFAIK.

[10:40:12.0000] <joebobjoe>
So Microdata is rejected by the W3C? What does that mean for Microdata?

[10:58:08.0000] <tantek>
joebobjoe: it means that no one at W3C cared enough about it to work on it, so it's not a W3C work item or standard in any way any more. abandoned.

[13:33:47.0000] <frewsxcv>
should element.setAttribute work with content attributes in addition to idl attributes?

