2016-10-01
[22:51:04.0000] <Domenic>
jyasskin: that seems correct. In general putting nullable things in dictionaries is very questionable, as they're already optional so using `null` as a signifier is not great.

[00:24:06.0000] <jyasskin>
Domenic: I agree that nullable things in dictionaries is sketchy, but why does that paragraph allow nullable interfaces, enumerations, callback functions and typedefs but disallow just nullable dictionaries? Even stranger, if you typedef the dictionary, you can now make it nullable?

[00:25:01.0000] <jyasskin>
Was there an attempt to constrain WebIDL to only syntactic checks instead of including semantic constraints?

[00:25:40.0000] <jyasskin>
That would match bz's preference to put the OpenDictionary key-type constraints in the grammar.

[08:33:39.0000] <Domenic>
I don't understand how that would be possible, or at least sensible... e.g. what if I do typedefs

[08:33:57.0000] <Domenic>
I guess even the semantic checks disallow typedefs right now as written?

[10:03:58.0000] <Netmo>
can we get HTMLHyperlinkElementUtils.fragment returning '#' when url.href.substr(-1) === '#' and '' when url.href.substr(-1) !== '' ? :P

[10:04:07.0000] <Netmo>
also, hi all

[10:04:32.0000] <Netmo>
* !== '#'

[10:09:21.0000] <Domenic>
Netmo: that seems likely to break a lot of sites, so probably not

[10:10:00.0000] <Netmo>
indeed, asking for an alias that behaves that way, .hash and .fragment would behave the same, except that bit

[10:10:55.0000] <Netmo>
https://xkcd.com/927/

[10:11:58.0000] <Netmo>
or, boolean HTMLHyperlinkElementUtils.isEmptyHash or something

[10:15:55.0000] <Domenic>
It seems pretty easy to write a JavaScript function to take care of this. No need to standardize, get agreement from all browsers, and ship extra code to every web page in the world.

[10:21:16.0000] <Netmo>
makes sense. i see you guys are spending a lot of effort trying to normalize existing stuff, rather than adding more

[10:21:39.0000] <Netmo>
actually makes sense, dom is already full of redundancies

[15:50:59.0000] <Domenic>
There's definitely a place for new stuff, but ideally when it adds genuinely new capabilities to the platform, or drastically increases effectiveness or similar via a better API.


2016-10-02
[07:00:44.0000] <nox>
Is UIEvent supposed to be exposed only on Window?

[07:14:22.0000] <annevk>
nox: seems logical

[14:10:44.0000] <smaug>
esprehn: you might recall why HTML spec has compound microtasks?

[14:12:57.0000] <esprehn>
I'm not familiar with that term

[14:13:49.0000] <smaug>
ah. I'm mostly wondering why MutationObservers and others (well, Promises) get processed differently

[14:14:28.0000] <smaug>
feels like a bug to me, but I'm clearly missing something, since I don't know why we have these special cases

[14:17:27.0000] <esprehn>
smaug: the spec doesn't define the term, this whole section probably needs some love

[14:17:52.0000] <esprehn>
it looks like compound microtask are related to spinning nested event loops if im reading this right

[14:17:55.0000] <smaug>
well, https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask

[14:18:07.0000] <smaug>
and then HTML spec uses that

[14:18:21.0000] <smaug>
but I don't understand why MutationObservers are special here

[14:19:38.0000] <esprehn>
hmm that looks like batching ?

[14:19:55.0000] <esprehn>
the spec needs to define what a compound vs ... microtask is and what they're for

[14:23:20.0000] <smaug>
Why each MO couldn't be notified as a normal microtask?

[14:23:53.0000] <esprehn>
smaug: or not. this actually seems like it's trying to describe the behavior where mutations inside microtasks queue more MutationObserver deliveries

[14:24:30.0000] <esprehn>
that's a good question. I dont think we have any of this special handling in the engine. I'm curious what the spec is trying to do here.

[14:26:28.0000] <smaug>
esprehn: ok. thanks. I'll try hunt the source for this particular spec text tomorrow.

[14:26:33.0000] <esprehn>
our system is based on a scope with a depth counter. when the scope is exited and the depth is zero run microtasks. anything that would queue a microtask while in the process of delivering microtasks prolongs that delivery step.

[14:26:35.0000] <smaug>
maybe Domenic remembers

[14:27:13.0000] <smaug>
in Gecko MT (MutationObserver one, not the buggy Promise stuff) is also based on depth number

[14:27:13.0000] <Domenic>
This was Raf Weinstein's design I believe

[14:27:22.0000] <esprehn>
upon returning to the event loop we always perform a checkpoint as well

[14:27:26.0000] <Domenic>
Something about ensuring that the order of the mutation observers are notified is the same as the order they were subscribed in

[14:27:44.0000] <Domenic>
So you just have a single microtask that then runs through all the mutation observers or something. That's what a compound microtask is, I think.

[14:27:46.0000] <esprehn>
which catches cases like editing or the parser mutating without calling into script

[14:28:03.0000] <Domenic>
(whereas if you used normal microtasks it would just notify in the order that the mutations happened, which is for some reason not desired)

[14:28:37.0000] <esprehn>
Domenic: microtask processing in the spec is pretty confusing. I wish this was more pseudo code like.

[14:28:44.0000] <esprehn>
:)

[14:29:07.0000] <Domenic>
esprehn: concrete suggestions would be helpful; from my perspective it's pretty straightforward and algorithmic, but I'm sure I'm just too deep into it.

[14:29:24.0000] <Domenic>
Anyway yeah tomorrow someone should dig up the old bugs where I'm sure Hixie and raf had a long back and forth designing this system

[14:31:43.0000] <esprehn>
for starters the spec should define what the two types are

[14:32:12.0000] <esprehn>
it just mentions them and the links back are to the mentions, not to descriptions of their purpose

[14:33:07.0000] <Domenic>
ah i see yeah

[14:33:18.0000] <smaug>
oh yeah, I was wondering what "solitary callback microtasks" are couple of days ago.

[14:41:44.0000] <smaug>
the spec doesn't really guarantee ordering of MO. If callback for MO A modifies DOM, MO's after A will get notified first, since callback for MO A will be called only after 'perform a microtask checkpoint' is called the next time

[14:41:46.0000] <smaug>
hmm


2016-10-03
[02:21:37.0000] <annevk>
I wonder how https://github.com/whatwg/html/pull/1842#pullrequestreview-2450763 happened

[02:21:43.0000] <annevk>
The user no longer exists...

[02:24:22.0000] <MikeSmith>
weird

[02:37:12.0000] <annevk>
smaug: https://github.com/whatwg/html/issues/1742

[02:37:59.0000] <smaug>
let me review a patch first

[02:43:29.0000] <annevk>
smaug: I'm trying to figure out the compound microtask thing, but no luck thus far

[02:43:31.0000] <annevk>
smaug: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24810

[02:43:52.0000] <annevk>
smaug: it seems to be mainly about when microtasks run as tasks or some such

[02:44:29.0000] <annevk>
smaug: so maybe when the user performs a "cut" operation and there's a mutation observer?

[02:44:36.0000] <smaug>
is rafaelw still around? Haven't seen comments from him for awhile?

[02:44:51.0000] <MikeSmith>
not around

[02:44:56.0000] <MikeSmith>
for a long time

[02:45:01.0000] <MikeSmith>
as far as I can see

[02:49:55.0000] <annevk>
smaug: I tried an email

[02:51:59.0000] <smaug>
thanks

[02:53:28.0000] <smaug>
github's way to link to comments is a bit annoying. Hard to see from the link which comment is being linked to

[02:54:48.0000] <annevk>
So I did some searching and I think Rafael left Google and formed a company: https://github.com/rafael-atticlabs

[02:55:50.0000] <smaug>
oh, plenty of ex-googlers http://attic.io/

[02:56:14.0000] <annevk>
Yeah, just noticed Aaron Boodman is there too

[02:56:39.0000] <annevk>
Oh wow, Erik Arvidsson

[04:07:46.0000] <nox>
annevk: Seems like the Fetch spec website doesn't get updated anymore.

[04:07:59.0000] <nox>
https://fetch.spec.whatwg.org says 15 September 2016.

[04:08:05.0000] <nox>
annevk: Known problem?

[04:09:05.0000] <annevk>
nox: fixed manually

[04:09:19.0000] <annevk>
nox: will have a look later

[04:09:25.0000] <nox>
annevk: Thanks!

[05:54:13.0000] <annevk>
Ms2ger: finally created https://github.com/servo/servo/issues/13557

[05:54:34.0000] <Ms2ger>
Thanks

[06:42:02.0000] <red-lichtie>
Hi! I have a question about Web Sockets (RFC 6455). Can I use SPNEGO authentication and support SSO while using web sockets?

[07:17:22.0000] <jgraham>
https://jeenalee.github.io/doge-standard/

[07:26:19.0000] <annevk>
That's great

[07:43:30.0000] <Domenic>
The accompanying article is really good too

[07:43:54.0000] <Domenic>
http://jeenalee.com/2016/10/03/implementing-doge-for-servo.html

[07:44:21.0000] <Domenic>
I think I'll write a counterpart article for jsdom, just because it's such a great way of introducing people to contributing and the IDL/impl split and so on.

[08:15:53.0000] <smaug>
annevk: ok, I think https://www.w3.org/Bugs/Public/show_bug.cgi?id=22296#c25 is good enough for me about microtasks. The reasoning isn't super clear though

[08:55:11.0000] <annevk>
smaug: doh, forgot to read the linked bugs 😞

[12:21:47.0000] <smaug>
annevk: Domenic: has it been decided where .cookie should live?

[12:21:51.0000] <smaug>
Document or HTMLDocument?

[12:22:05.0000] <Domenic>
I don't think anything has been decided

[12:22:27.0000] <Domenic>
I still think everything should be on Document and HTMLDocument should be an alias or empty vestige, but nobody seems to agree, so I'm bowing out of that discussion.

[12:24:05.0000] <smaug>
IMO, aliasing is misleading

[12:24:22.0000] <smaug>
empty, perhaps

[12:24:31.0000] <Domenic>
it's just a legacy thing IMO

[12:24:36.0000] <Domenic>
alias necessary for web compat

[12:24:50.0000] <smaug>
but then, open/write/close really don't make sense outside HTML

[13:23:37.0000] <annevk>
smaug: there is an issue with discussion on whatwg/dom

[13:24:08.0000] <annevk>
smaug: I kinda argued to keep things limited to HTMLDocument too

[13:24:38.0000] <annevk>
smaug: one problem is that browsers don't agree on where they use that object

[13:29:27.0000] <smaug>
well, Gecko and webkit are quite similar

[15:18:52.0000] <TabAtkins>
I might have asked this before - both DOM and HTML define "ascii case-insensitive" - which reference should I prefer? annevk domenic

[15:19:21.0000] <Domenic>
Yeah... you did, and I think I answered "we should consolidate and make one point to the other", but annevk wasn't there to weigh in

[15:19:23.0000] <TabAtkins>
And whichever is preferred, can we get the other to un-dfn or at least hide their dfn from Bikeshed?

[15:19:25.0000] <Domenic>
I guess we should file an issue

[15:19:26.0000] <TabAtkins>
Ah, kk

[16:13:12.0000] <smaug>
Hmm, HTML spec has "performing a microtask checkpoint" which really doesn't work in case someone uses showModalDialog

[16:15:01.0000] <smaug>
(not that the spec has showModalDialog anymore)


2016-10-04
[18:18:55.0000] <Domenic>
Yet again implementers are misled by a non-normative note -_-

[20:46:04.0000] <MikeSmith>
Domenic: which note?

[20:46:57.0000] <Domenic>
https://github.com/whatwg/html/issues/1852

[20:52:41.0000] <MikeSmith>
/me looks

[21:16:21.0000] <MikeSmith>
posted a comment just now

[21:16:31.0000] <MikeSmith>
with link to https://github.com/whatwg/html/commit/65216fce862018e2052a7edd24485e41839dae6d

[21:16:56.0000] <MikeSmith>
which is not any more enlightening

[00:15:53.0000] <annevk>
MikeSmith: https://github.com/whatwg/html/pull/1847 is waiting for you

[00:45:55.0000] <MikeSmith>
annevk: yeah will take a look at it shortly

[04:02:38.0000] <zcorpan>
annevk: https://github.com/whatwg/html/pull/1854/files#diff-36cd38f49b9afa08222c0dc9ebfe35ebR78676 have we stopped with "return null and abort these steps" in HTML?

[04:07:26.0000] <jgraham>
zcorpan: https://twitter.com/zcorpan/status/783212065850875905 good point. Someone should write that as a followup

[04:07:46.0000] <jgraham>
idk if someone should be me :)

[04:08:11.0000] <zcorpan>
🙂

[04:45:21.0000] <JakeA>
annevk: I'm speccing navigationPreload.getState() to return an object like {enabled: false, headerValue: "blah"} - would the returned object have its own interface in webidl??

[04:45:30.0000] <JakeA>
hah, too many ?

[04:45:42.0000] <JakeA>
makes it sounds stressy

[04:49:16.0000] <annevk>
JakeA: return a dictionary

[04:49:37.0000] <JakeA>
ta!

[05:08:28.0000] <jgraham>
https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.bte6fur6n

[05:31:22.0000] <smaug>
heh

[05:31:31.0000] <smaug>
and I guess rather true

[05:51:05.0000] <JakeA>
annevk: I'm struggling to find a spec that returns a dictionary, they only seem to be used for arguments. Know anywhere I can cargo-cult from?

[06:03:03.0000] <annevk>
JakeA: maybe RTC somewhere? It exists for sure

[06:03:16.0000] <JakeA>
annevk: will keep digging, cheers!

[06:17:24.0000] <annevk>
JakeA: as for language, just create an IDL dictionary with the right members in prose and return that

[06:58:01.0000] <annevk>
smaug: could you check https://github.com/whatwg/dom/pull/336#issuecomment-251067202 please?

[06:59:02.0000] <annevk>
JakeA: might be better to create a WIP PR next time if you need feedback

[06:59:10.0000] <smaug>
hrm, spec issue being discussed in a pull request

[07:00:04.0000] <JakeA>
annevk: sure. I'll create one when I fix those issues & add the preload response promise

[07:00:15.0000] <JakeA>
annevk: thanks for the feedback

[07:00:53.0000] <annevk>
smaug: seems to just happen

[07:01:14.0000] <annevk>
smaug: recently one happened on a commit, but I steered it towards an issue

[07:01:47.0000] <annevk>
smaug: maybe it's something where if we remind folks enough it doesn't happen anymore at some point?

[10:12:42.0000] <smaug>
are there still some cases when there is nested event loop spinning happening in the spec in such way that there might be JS on stack?

[11:45:45.0000] <tobie>
Would it be helpful to anybody else than me to link to things like ES [[Get]] from the WebIDL spec?

[11:50:34.0000] <annevk>
smaug: not sure, don't think so

[11:50:58.0000] <annevk>
smaug: but bz now and then mentions alert() does not match reality

[11:51:15.0000] <annevk>
smaug: and UAs still mess up sync xhr

[11:51:38.0000] <smaug>
annevk: oh, I know what Gecko does

[11:51:45.0000] <smaug>
but those are special cases

[11:51:56.0000] <smaug>
showModalDialog is/was a bit different

[11:52:07.0000] <smaug>
since the underlying page was still kind of running

[11:53:01.0000] <smaug>
it is just that the spec prevents entering to microtask loop if we're there already

[11:53:23.0000] <annevk>
Hmm okay

[11:53:29.0000] <smaug>
my guess is that it never worked with showModalDialog and it got just fixed by removing showModalDialog

[11:53:48.0000] <TabAtkins>
That matches what I remember, yes.

[11:54:00.0000] <annevk>
I've never really understood the full model

[11:54:23.0000] <annevk>
Close, but there was always something

[12:45:31.0000] <smaug>
is there any way to review spec changes using the generated HTML files? Some tool which shows then in the new page what was added and perhaps in previous version what was removed?

[12:51:59.0000] <Domenic>
tobie: it would be helpful, however, part of the issue is that most places that link to [[Get]] should probably instead be linking to Get()

[12:52:09.0000] <Domenic>
as part of the ES5 -> ES6+ update

[12:52:54.0000] <Domenic>
smaug: there is https://html.spec.whatwg.org/commit-snapshots/ which is currently kind of broken pending https://github.com/whatwg/html/pull/1857

[12:57:11.0000] <tobie>
Domenic: https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver ?

[12:57:41.0000] <Domenic>
tobie: the problem is that's only the definition for ordinary objects

[12:57:49.0000] <Domenic>
it's not applicable to any web platform objects for example

[12:58:54.0000] <tobie>
Domenic: does that mean there's something else applicable in that case, or does that mean we're missing bits here?

[12:59:13.0000] <jyasskin>
tobie: Yes, please link from WebIDL to ES. https://tc39.github.io/ecma262/#sec-get-o-p in this case.

[12:59:37.0000] <Domenic>
So for example, in the modern era, "value is the result of calling the [[Get]] internal method of V passing key and V as arguments." should become "Let value be ? Get (V, key)"

[12:59:55.0000] <Domenic>
With the link going to the thing jyasskin said

[13:00:00.0000] <Domenic>
(for Get(), not for [[Get]])

[13:04:39.0000] <Domenic>
Oh poop, there's no way of getting DataTransfer objects

[13:10:03.0000] <tobie>
Domenic: where is [[Get]] defined for platform objects, tho?

[13:11:06.0000] <Domenic>
tobie: indeed it looks like [[Get]] is one of the few things platform objects don't overwrite; my bad. But it's still incorrect to link to ordinary object [[Get]] in most cases, since e.g. in that dictionary case, we could be handed a proxy.

[13:26:03.0000] <tobie>
Domenic: any idea who we talk to to get better links in the ES spec?

[13:26:19.0000] <Domenic>
tobie: bterlson, preferably by filing an issue.

[14:35:10.0000] <jsbell>
Whelp, rewrite of Blink's UTF-16 decoder landed. What could go wrong...

[15:58:06.0000] <TabAtkins>
annevk I guess?: Yo I stole your caniuse styles for Bikeshed.


2016-10-05
[23:53:45.0000] <annevk>
Domenic: platform objects by default should not require a proxy

[23:54:05.0000] <annevk>
TabAtkins: likely Hixie

[00:37:20.0000] <tobie>
annevk: re-open dictionary, why are we not picking the same processing model for open dictionary than for existing dictionaries?

[00:37:58.0000] <annevk>
tobie: not sure, would make sense if we did

[00:38:47.0000] <annevk>
tobie: maybe currently impls don't, but does not seem like a breaking change

[00:39:32.0000] <tobie>
annevk: not sure what you mean. Open dic isn't implemented anywhere, is it?

[00:47:45.0000] <annevk>
tobie: Fx has MozMap

[00:48:07.0000] <annevk>
tobie: not sure what others do for Headers

[00:48:26.0000] <tobie>
annevk: IS the only use case of MozMap Headers?

[00:48:57.0000] <annevk>
tobie: I think there is some other internal usage

[00:49:22.0000] <tobie>
annevk: I see.

[00:50:52.0000] <tobie>
annevk: if we want open-dictionaries and dictionaries to be variants of the same "type" and want conversion with half-open dictionaries in the not too distant future, then I believe we want the same processing model for both

[00:52:37.0000] <tobie>
annevk: if the only reason for a model change is to map (pardon the pun) MozMap, then it feels like that shouldn't be a huge compat issue

[00:53:24.0000] <tobie>
annevk: if there are other reasons I'm not aware of (e.g. perf?) then the story is different.

[00:53:30.0000] <annevk>
tobie: note that I'm not sure what the reason for the diff is

[00:53:41.0000] <annevk>
tobie: jyasskin might know

[00:54:04.0000] <annevk>
tobie: but seems like something we should get clarified

[00:54:23.0000] <tobie>
annevk: yup--commenting on the issue

[01:05:02.0000] <annevk>
ta

[01:30:12.0000] <kochi>
zcorpan: as I chatted with rniwa about alternative stylesheet handling in shadow dom, I read again https://github.com/w3c/webcomponents/issues/391 and found https://www.w3.org/Bugs/Public/show_bug.cgi?id=29349 is still open. Does it make sense to move the bug to csswg-drafts issue and work on it?

[01:31:47.0000] <annevk>
kochi: submitting a PR to close that bug is fine too

[01:32:10.0000] <annevk>
kochi: that's what we do for legacy bugs for most WHATWG drafts

[01:34:35.0000] <kochi>
annevk: okay, no need to migrate the issue to github.

[01:35:16.0000] <annevk>
kochi: yeah, perhaps only if it needs a lot more discussion that's worth it, since it's easier for folks to use GitHub

[01:35:42.0000] <annevk>
kochi: but moving all the issues from one place to another creates a lot of noise unfortunately

[01:36:26.0000] <kochi>
annevk: i see, probably the discussion is all set for the issue, what is left is to update cssom spec accordingly.

[02:01:35.0000] <annevk>
When is something a trusted event?

[02:01:44.0000] <annevk>
If the ECMAScript stack is empty?

[02:05:15.0000] <Ms2ger>
If the UA dispatches it, generally

[02:06:00.0000] <annevk>
Ms2ger: but click() is dispatched by the UA too

[02:06:46.0000] <Ms2ger>
"generally" :)

[02:07:13.0000] <annevk>
Yeah, so when would ECMAScript stack being empty not be a good condition?

[02:07:46.0000] <Ms2ger>
postMessage? I guess that might run off a task

[02:08:03.0000] <ondras>
annevk: click() dispatches synchronously?

[02:08:32.0000] <annevk>
ondras: yes

[02:09:04.0000] <ondras>
ah

[02:09:50.0000] <annevk>
Ms2ger: it does, but I guess it's an exception therefore, since isTrusted is false

[02:10:10.0000] <Ms2ger>
Oh, it is?

[02:10:18.0000] <Ms2ger>
Maybe smaug has more of this paged in

[02:11:28.0000] <annevk>
I think he might be the only one

[04:04:45.0000] <Ms2ger>
annevk, what's this "trailer" stuff in fetch?

[04:05:16.0000] <annevk>
Ms2ger: feature from HTTP folks wanted to see exposed

[04:05:48.0000] <annevk>
Ms2ger: some subset of implementers of most browsers seemed okay with it, but nobody started implementing afaik

[04:05:56.0000] <Ms2ger>
I see

[04:12:23.0000] <annevk>
smaug: per your comment about postMessage() needing to dispatch trusted events, does that mean it's basically about the JavaScript stack being empty?

[04:12:50.0000] <annevk>
smaug: also, how does that make click() an exception? Since in that case the JavaScript stack wouldn't be empty (and the event is untrusted, or should that be trusted too?)

[04:13:25.0000] <smaug>
annevk: well, mutation events are trusted

[04:13:52.0000] <annevk>
smaug: I see

[04:14:19.0000] <annevk>
smaug: that is a little weird

[04:14:39.0000] <annevk>
smaug: but I guess it depends on what the principles all

[04:14:41.0000] <annevk>
are*

[04:16:55.0000] <smaug>
all the UA dispatched events are trusted,  and click() is a special case since it is just a shorthand to: element.dispatchEvent(new MouseEvent("click"));

[04:17:01.0000] <smaug>
something like that

[04:17:22.0000] <annevk>
I think click() is a little more complicated than that, but okay

[04:17:40.0000] <annevk>
I'm going to open an issue against whatwg/dom to get this settled throughout specifications

[04:19:25.0000] <smaug>
click() does check/set/clear the "is handling click event flag", but other than that, it just dispatches the event

[05:36:21.0000] <tobie>
why is a callback function not distinguishable from a dictionary?

[05:37:44.0000] <tobie>
…or from an object?

[05:41:28.0000] <Ms2ger>
A dictionary is just an object

[05:43:08.0000] <tobie>
write, but a callback function is a function, right?

[05:44:15.0000] <Ms2ger>
And a function is little more than an object :)

[05:45:12.0000] <tobie>
well, it's precisely "little" more (it is callable).

[05:46:40.0000] <Ms2ger>
Sure

[05:47:06.0000] <Ms2ger>
Dunno if the distinguishability check ever looked at IsCallable

[05:47:19.0000] <Domenic>
 tobie: annevk: how could you possibly have the same processing model for them? they're completely different.

[05:47:29.0000] <Domenic>
dictionaries have a set of known keys, open dictionaries need to enumerate all keys.

[05:47:59.0000] <annevk>
Domenic: it's about considering just own props vs also protoprops

[05:48:10.0000] <tobie>
Domenic: that ^

[05:48:19.0000] <annevk>
Domenic: that's one of the differences bz highlighted

[05:48:23.0000] <Domenic>
OK.

[05:48:28.0000] <annevk>
Domenic: tobie: I'm typing a reply to the issue atm

[05:48:39.0000] <Domenic>
I think a JS implementation would probably do Object.keys()

[05:48:55.0000] <Domenic>
in ES we've made a few decisions based on own-enumerable as the "copying protocol"

[05:49:05.0000] <Domenic>
E.g. Object.assign or the upcoming { ...objectSpread }

[05:49:25.0000] <annevk>
Domenic: so that would be different from dictionaries in IDL then

[05:49:44.0000] <Domenic>
Right, because they're very different models...

[05:49:49.0000] <annevk>
Domenic: and wouldn't cater for flattening DOM objects

[05:49:50.0000] <Domenic>
For dictionaries you just do `obj.prop`

[05:50:05.0000] <Domenic>
For open-ended things you enumerate the props

[05:50:22.0000] <Domenic>
At TC39 we discussed this as "classes vs. records"

[05:50:29.0000] <Domenic>
classes have prototype chains, records do not

[05:50:37.0000] <Domenic>
Property access needs to work for both so it uses the prototype chain

[05:50:41.0000] <annevk>
Domenic: you should totally weigh in with this stuff I thikn

[05:50:49.0000] <Domenic>
but things like Object.assign, Object.keys, { ...objectSpread } do not

[05:50:50.0000] <Domenic>
Yeah

[05:50:56.0000] <Domenic>
Just woke up ^_^

[05:50:59.0000] <annevk>
Domenic: esp ...objectSpread, decisions made in TC39/JavaScript so far, etc.

[05:51:02.0000] <annevk>
Domenic: fair

[05:52:51.0000] <tobie>
But for devs, imagine how crazy it'll be if half-open dictionaries allow properties on the proto if those are defined by a  dictionary member but on the object only if they're not.

[05:53:35.0000] <annevk>
tobie: yeah, web animations seems to have that mismatch at the moment, I agree that's weird

[05:53:39.0000] <annevk>
Domenic: ^

[05:53:55.0000] <Domenic>
I think jyasskin's intuition is right and that the difference only matters in obfuscated JS contests

[05:54:10.0000] <Domenic>
For the common case of foo({ bar: x, baz: y }) it does not matter

[05:57:33.0000] <tobie>
Domenic: I can totally imagine creating a base class with shared options, which would work well for those properties defined with member dictionaries but break unexpectedly the minute I add an unspecified property

[05:57:53.0000] <Domenic>
tobie: that's the reason why we distinguish between classes and records.

[05:58:00.0000] <Domenic>
You can't in general use classes for options

[05:58:13.0000] <Domenic>
It'll break many parts of the language (Object.keys, Object.assign, object spread)

[05:58:32.0000] <annevk>
Rereading that thread I notice that I indeed missed jyasskin already pointed out that difference (though no motivation, so asking still seems reasonable)

[05:58:42.0000] <annevk>
But more importantly, bz dropped a StructuredClone bug report in there

[05:59:04.0000] <Domenic>
I really thought we went through StructuredClone with aklein and got everything right, last time :-S

[05:59:50.0000] <tobie>
Domenic: can't we move away dictionaries from fetching stuff on the prototypes, then? OR would that break web-compat?

[06:00:39.0000] <Domenic>
tobie: I don't think that's desirable, since it would mean dictionaries do something more exotic than `foo.bar`. The problem here is with the JS language which hasn't reified the difference between records and class instances.

[06:01:59.0000] <annevk>
Domenic: you mean apart from the serializing/deserializing mess? -_-

[06:02:15.0000] <Domenic>
heh

[06:02:36.0000] <annevk>
tobie: we can't move away from that, e.g., new Request(url, oldRequest) is a thing now

[06:03:25.0000] <tobie>
but oldRequest isn't specified as a dictionary there, is it?

[06:03:52.0000] <tobie>
Domenic: I understand your perspective and I agree that it makes sense from it, but that seems like favoring technical purity over dev experience.

[06:03:54.0000] <annevk>
tobie: it is, the class just happens to match the record layout

[06:04:14.0000] <annevk>
(to use Domenic's terms)

[06:04:30.0000] <tobie>
/me 's head explodes

[06:05:45.0000] <tobie>
maybe half-open dictionaries are a dreadful idea.

[06:06:46.0000] <annevk>
Domenic: seems bz missed that StructuredClone fails on proxies, pfew

[06:07:12.0000] <annevk>
tobie: well, I think web animation shipped

[06:08:38.0000] <Domenic>
I don't think the dev experience will be changed either way

[06:10:19.0000] <tobie>
well, a long time ago I would have argued these weird corner cases are the reasons people hate Web development…

[06:10:28.0000] <tobie>
nowadays we have this: https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f

[06:11:24.0000] <annevk>
tobie: https://twitter.com/steveklabnik/status/783321843793010688

[06:12:37.0000] <annevk>
Corner cases not working across browsers is more problematic I think

[06:12:48.0000] <annevk>
And it's not clear we have good solutions here

[06:13:30.0000] <gsnedders>
annevk: imo that's missing the problem; the big problem with JS-land is we have multiple different package managers which work in different ways, many of which are really designed for server-side JS but we use them for client-side stuff anyway.

[06:14:37.0000] <gsnedders>
also the JS community is so full of fads that come and go so fast; there's so little stability in what's considered good

[06:15:20.0000] <tobie>
annevk: whereby "here" you're referring to the Web in general or half-open dictionaries?

[06:15:32.0000] <tobie>
annevk: sort of lost context

[06:15:52.0000] <annevk>
tobie: heh, half-open dicts

[06:16:01.0000] <annevk>
tobie: though I guess same for web in general?

[06:17:09.0000] <tobie>
annevk: yeah, the latter goes without saying, I could have framed my question more precisely. :)

[06:19:47.0000] <gsnedders>
speaking of web dev today, I find it kinda sad I have little motivation to write in JS or CSS, rather than languages that compile to them

[06:39:02.0000] <Domenic>
there's only one package manager for JS these days, and it's designed for both ecosystems...

[06:41:07.0000] <nox>
gsnedders: Which languages btw?

[06:42:14.0000] <gsnedders>
Domenic: depends whether you consider npm and bower the same, which they probably aren't

[06:45:09.0000] <gsnedders>
nox: TypeScript and SCSS mostly

[06:45:31.0000] <nox>
gsnedders: Nice. I fancy the TS engineering even though I don't use JS nor anything that targets it.

[06:46:39.0000] <caitp>
my experience with TypeScript is that it didn't really solve any real problems and just gave me a bunch of extra crap to do to get anything done, while simultaneously breaking liveedit and debugging

[06:47:22.0000] <caitp>
I'm not sure why anyone feels that's a good thing, but I guess opinions and experiences vary :x

[06:49:29.0000] <annevk>
tobie: jyasskin : Domenic: so maybe the solution is to have record<ByteString, ByteString> and for half-open we could do (record<> or DictionaryName)

[06:49:29.0000] <Domenic>
bower doesn't really exist anymore

[06:49:48.0000] <Domenic>
I guess maybe polymer pretends it does

[06:50:15.0000] <Domenic>
annevk: the union type doesn't work because halfopen wants to grab several fields with type conversions/required/etc. and then enumerate the rest

[06:50:39.0000] <annevk>
Domenic: yeah, I guess that would end up being a little confusing

[06:53:52.0000] <gsnedders>
Domenic: as for why I'll argue npm is really designed for server-side stuff: it doesn't really handle non-JS assets in any decent way. bower is still relied on by a fair few things, for better or for worse.

[06:54:06.0000] <tobie>
well, given Domenic's input on the issue itself, it seems this is essentially a problem with ES itself.

[06:55:16.0000] <gsnedders>
caitp: I definitely have experiences of TS finding bugs that would've been missed otherwise in all likelihood. And given plenty of things rely on build-steps anyway, liveedit is pretty much already dead for better or for worse.

[06:55:26.0000] <Domenic>
gsnedders: I guess this is just ignoring the reality of JS dev as it exists today, which is that people use npm for client side including all non-JS assets with no issues.

[06:55:50.0000] <gsnedders>
Domenic: oh, I'm not saying people *don't* use it for it

[06:56:00.0000] <gsnedders>
Domenic: I'm just saying that it doesn't address those needs well

[06:56:14.0000] <tobie>
gsnedders: it'll eventually do so. it's on their roadmap

[06:56:37.0000] <caitp>
I wouldn't be so offended by the "extra crap it forces you to do" if optional types were an engine feature, and I believe Mozilla is interested in exploring that possibility? At least, that's what "typed objects" sounds like

[06:56:45.0000] <gsnedders>
tobie: I don't doubt it; it's an obvious thing to fix for the front-end side of things.

[06:57:51.0000] <gsnedders>
caitp: I think there's generally an interest in adding gradual typing to ES, but I think there's some hesitancy about it given ES4's gradual typing was certainly a significant downfall

[06:58:51.0000] <annevk>
caitp: aren't typed objects just ArrayBuffer objects with fancy access?

[06:59:16.0000] <caitp>
I have no idea, I'm not familiar with their plan for it

[06:59:20.0000] <gsnedders>
caitp: and, uh, what annevk just said.

[06:59:25.0000] <caitp>
but it sounds similar to v8's experiments

[06:59:31.0000] <caitp>
by title alone

[06:59:58.0000] <gsnedders>
annevk: they aren't necessarily array-like, though

[07:00:42.0000] <annevk>
gsnedders: what I remember sounded like structs, which I'm also not super familiar with, mind you

[07:01:12.0000] <gsnedders>
/me doesn't know quite what the current proposal is, having been out of the TC-39 world for a long while now

[07:02:19.0000] <caitp>
are you thinking like, the "value types" thing?

[07:02:36.0000] <tobie>
annevk: wrt new Request(url, oldRequest), couldn't you redefine the constructor's second argument as (dictionary or Request) or are there weird WebIDL rules that prevent you from doing so?

[07:03:56.0000] <annevk>
tobie: it's possible, though it would be subtly different of course and doesn't address other places that take dictionaries

[07:04:10.0000] <tobie>
annevk: agreed.

[07:04:48.0000] <annevk>
tobie: I guess we need to decide how important half-open is

[07:04:58.0000] <annevk>
tobie: otherwise record<> seems like the way to go for now

[07:05:29.0000] <annevk>
tobie: we could separately discuss if redoing dictionary is worth it, but I suspect not, given that dict.member is kinda intuitive

[07:06:13.0000] <tobie>
annevk: agree. well, not reaching into the proto chain could be explained by the fact we're passing by value.

[07:06:45.0000] <tobie>
annevk: i.e. there's some form of cloning going on (however that's described in the spec)

[07:28:15.0000] <annevk>
beverloo: I can try land that now

[07:29:12.0000] <beverloo>
annevk, thanks! we're looking at one or two more things and then we're going to pause for a while, at least until you or Microsoft catch up

[07:29:14.0000] <annevk>
beverloo: actually, if John could enable contributions from others to that branch I can fix it up and land it

[07:29:40.0000] <annevk>
beverloo: he should have a little checkbox in the sidebar

[07:31:30.0000] <beverloo>
annevk, done

[07:45:04.0000] <annevk>
beverloo: same

[07:45:25.0000] <annevk>
beverloo: please say "thanks John"

[07:45:54.0000] <beverloo>
done :) Thank you!

[08:02:55.0000] <TabAtkins>
annevk: Yeah, "value types" are fancy wrappers around array buffers basically, + some niceties about comparison and possibly operator overloading.

[08:03:56.0000] <TabAtkins>
/me still really wants someone to champion them so we can use them in CSS.

[08:04:21.0000] <Domenic>
value types are different from typed objects

[08:04:31.0000] <Domenic>
i think it's typed objects that are wrappers around array buffers

[08:05:52.0000] <Domenic>
Hmm I guess it all fits together per latest thinking https://github.com/nikomatsakis/typed-objects-explainer

[08:05:53.0000] <TabAtkins>
I was under the impression that value types were still limited in what they could contain to basically be array buffers.

[08:06:07.0000] <TabAtkins>
Yeah, otherwise you don't get value equality.

[08:06:30.0000] <caitp>
"How It Feels to Learn Javascript in 2017" is going to be great with this stuff

[08:07:03.0000] <Domenic>
I liked https://twitter.com/jdalton/status/783348903940718593 on that subject

[08:08:38.0000] <jgraham>
I think that tweet misses the point

[08:09:04.0000] <TabAtkins>
I disagree with all the disagreement to that article. JS really is in a confusing state right now, and has been for a few years. I don't think it's just a normal amoutn of complexity, compared to other languages.

[08:09:40.0000] <caitp>
it is a mess, definitely

[08:09:40.0000] <jgraham>
The criticism of js is that there's a lot of accidential complexity that people deeply embedded in the community don't notice because they learnt each new thing incrementally

[08:09:44.0000] <JakeA>
TabAtkins: In Bikeshed, if I have "Let response be the result of fetching request" and I wanted "fetching" to link to https://fetch.spec.whatwg.org/#concept-fetch, what's the best way to do that?

[08:10:01.0000] <jgraham>
Whereas for someone coming in it's a wall of WTF

[08:10:16.0000] <TabAtkins>
JakeA: That should just work?

[08:10:40.0000] <TabAtkins>
jgraham: Right. And it hasn't been integrated or polished yet so that it's approachable for newcomers.

[08:10:59.0000] <TabAtkins>
JakeA: <a>fetching</a> should work, that is.

[08:11:46.0000] <jgraham>
(and ftr I don't think it's a "js-the-language" criticism so much as a "js-the-ecosystem" criticism)

[08:11:47.0000] <JakeA>
TabAtkins: Bikeshed somehow understands that "<a>fetching</a>" should point to https://fetch.spec.whatwg.org/#concept-fetch? I thought I'd have to add "text: fetching; url: concept-fetch" to the anchors

[08:12:08.0000] <caitp>
I think you could write our own article about js-the-language, tbh, but yes

[08:12:09.0000] <TabAtkins>
JakeA: Oh gosh no. Anchor block is just for specs that aren't in the Bikeshed db; Fetch definitely is.

[08:13:08.0000] <caitp>
the ecosystem is scary, but people feel they have to use that ecosystem instead of just js-the-language, so the two are sort of undistinguishable

[08:13:16.0000] <JakeA>
TabAtkins: ahh, so is "fetching" linked to "fetch" somewhere?

[08:13:30.0000] <JakeA>
Or does it perform magic around <something>ing

[08:13:43.0000] <TabAtkins>
Bikeshed's got some auto-Englishing around "dfn" type autolinks.

[08:13:52.0000] <jgraham>
caitp: I think I agree with that, but my point is that I don't see what language changes you could make to solve the problems

[08:14:01.0000] <TabAtkins>
Most of the standard English word variants will work.

[08:14:28.0000] <JakeA>
ahh ok. Cheers!

[08:14:44.0000] <caitp>
jgraham: they'll add new paragraphs about "use babelXXX preset 2019 to use value types, but note that these are not the same as the support for typed objects by TypeFlowScript v. 29.0.1"

[08:16:33.0000] <Domenic>
http://cube-drone.com/comics/c/how-it-feels-to-learn-javascript-in-2016

[08:17:46.0000] <caitp>
compare it to learning rust or objc

[08:18:36.0000] <caitp>
anyways, time to get back to doing productive things

[08:19:01.0000] <jgraham>
I mean the fact that js seems to get far more feedback of this kind than any other language could mean something. Or you could ignore it and imply that everyone who isn't totally happy with the ecosystem is a caveman, I guess

[08:21:02.0000] <TabAtkins>
I imagine that, for example, Lisp had the same complaints about it before they went and standardized an enormous stdlib. Lots of different OO systems floated around for a while, for instance.

[08:21:48.0000] <Domenic>
jgraham: I think JS gets far more of this feedback because it is used far more.

[08:22:28.0000] <jyasskin>
Domenic: how crazy would it be to have open dictionaries iterate the prototype chain? The spec language is more complicated, but it looks doable.

[08:22:57.0000] <Domenic>
jyasskin: not _crazy_, but I tried to argue this morning for why I think it is a bad idea.

[08:23:29.0000] <jyasskin>
I haven't read the issue yet; I'll go do that.

[08:30:07.0000] <jgraham>
Domenic: That would imply people are ~equally frustrated by ecosystem problems when they try to learn Java, C#, C, Python and PHP (based on various programming language popularity metrics I can find, which are of course not of great reliability)

[08:30:27.0000] <Domenic>
jgraham: that's been my experience, especially in Java and PHP.

[08:30:49.0000] <jgraham>
I'm pretty sure it's not true of Python

[08:31:20.0000] <jgraham>
So if your claim is "js is no worse to use than Java or PHP", I guess that might be true

[08:31:28.0000] <jgraham>
But it's a pretty low standard

[08:32:16.0000] <Domenic>
Well, the metrics I have seen indicate it outstrips those (especially Python) by a lot

[08:32:32.0000] <Domenic>
I don't think this discussion is terribly productive though, so we can just agree to disagree and move on.

[08:32:50.0000] <jgraham>
Sure, all I have are unreliable programming language ranking websites

[08:32:55.0000] <jgraham>
Sure

[09:02:12.0000] <JakeA>
TabAtkins: How do I solve "Multiple possible 'dfn'"? I guess I'm looking for an attribute or something where I can remove the ambiguity

[09:05:23.0000] <TabAtkins>
JakeA: The error message should tell you how to solve that.

[09:05:50.0000] <JakeA>
TabAtkins: Multiple possible 'dfn' local refs for 'type'. Arbitrarily chose the one with type 'dfn' and for 'service worker'.

[09:05:55.0000] <JakeA>
Doesn't seem so

[09:06:07.0000] <TabAtkins>
Oh, multiple locals.

[09:06:11.0000] <JakeA>
I want it to be https://fetch.spec.whatwg.org/#concept-response-type

[10:28:00.0000] <smaug>
Domenic: you should know, what does promise.then(another_promise) do?

[10:29:52.0000] <Domenic>
Smaug: nothing, it's just an error

[10:30:11.0000] <smaug>
aha

[10:30:18.0000] <smaug>
/me was just reading some code

[10:31:49.0000] <smaug>
Domenic: hmm,  so promise.then(another_promise).then(function { console.log("foo")}); won't print foo?

[10:31:56.0000] <smaug>
/me tests

[10:33:21.0000] <Domenic>
I think it will just ignore the first then

[10:33:32.0000] <Domenic>
It's equivalent to passing undefinef

[10:34:47.0000] <smaug>
aha

[10:35:07.0000] <smaug>
confusing

[10:35:18.0000] <smaug>
/me would expect then() to throw in this case

[10:35:50.0000] <smaug>
but ok, thanks

[11:15:56.0000] <TabAtkins>
Domenic: I'd also expect it to throw. Is this "like undefined" behavior due to the thenable-coercion we ended up speccing?

[11:19:28.0000] <caitp>
> Domenic: hmm,  so promise.then(another_promise).then(function { console.log("foo")}); won't print foo? << it should throw, argument to then() must be callable

[11:37:16.0000] <Domenic>
TabAtkins: no, unrelated.

[11:37:28.0000] <Domenic>
caitp: no, if the argument to .then is not callable it's ignored.

[11:37:42.0000] <Domenic>
At the time the only precedent was JSON.stringify/parse which ignored non-callables.

[11:37:59.0000] <caitp>
ah, you're right

[11:40:03.0000] <caitp>
I saw the "If IsCallable(onFulfilled) is False, then..." and assumed the worst :p

[11:47:46.0000] <jgraham>
FWIW I once spent some considerable time tracking down a bug due to promise1.then(promise2) rather than promise1.then(()=>promise2)

[11:48:22.0000] <jgraham>
(it was less obvious than that in real life ofc because the argument to .then was a function call

[11:48:25.0000] <jgraham>
)

[11:48:34.0000] <TabAtkins>
Yeah, I wouldn't be surprised if it's not changeable now, but my experience with the platform would lead me to believe that it would throw, as that's the usual WebIDL behavior when you pass something unsuitable.

[11:48:51.0000] <jgraham>
Yeah, not waying we can change it

[11:49:10.0000] <jgraham>
Just that it's a design choice that caused a difficult-to-diagnose bug

[11:49:18.0000] <jgraham>
*saying

[11:49:43.0000] <Domenic>
IMO browser consoles should warn on it

[11:56:33.0000] <tobie>
A dead horse at this point, but still like Dion's perspective on the topic: https://medium.com/ben-and-dion/i-want-to-go-back-to-the-1950s-of-web-development-fa69d7fe357a

[11:56:38.0000] <caitp>
don't you think that would just incur performance hits that would lead people to just use Bluebird instead?

[11:57:11.0000] <caitp>
I mean, they already use BB instead of native promises because of the performance anyways, but...

[11:59:09.0000] <tobie>
Why does the number of nullable member types of a union type must be 0 or 1? (http://heycam.github.io/webidl/#dfn-number-of-nullable-member-types)

[11:59:25.0000] <jyasskin>
JakeA: Did you ever get an answer for your multiple-dfn error? I think you want `<a for="response">type</a>`.

[12:04:12.0000] <gsnedders>
hi

[12:04:42.0000] <TabAtkins>
Oh shoot yeah, I didn't answer Jake.  Yeah, the `for="whatever"` thing is what you want - just match whatever the <dfn> you want uses.  (Or if the one you want doesn't have a `for` attribute, use `for=/` on the link.)

[12:05:29.0000] <TabAtkins>
tobie: Because otherwise you can't tell, when you recieve a null, which nullable type it was meant for. This is important if you change behavior based on the type you receive.

[12:13:37.0000] <tobie>
TabAtkins: why then do we have an algorithm to count the number of nullable types of a union? http://heycam.github.io/webidl/#dfn-number-of-nullable-member-types

[12:14:30.0000] <TabAtkins>
tobie: For the purpose of restricting you to 0 or 1.

[12:14:37.0000] <tobie>
TabAtkins: :D

[12:14:58.0000] <TabAtkins>
I'm not being sarcastic - follow the uses of the definitions. ^_^

[12:15:53.0000] <tobie>
TabAtkins: I know. That's what's funny, actually.

[12:17:14.0000] <tobie>
TabAtkins: this whole sections seems a lot simpler in practice than how it's specified.

[12:17:23.0000] <TabAtkins>
tobie: Probably!

[12:19:45.0000] <tobie>
TabAtkins: Thanks for the explanation.

[12:27:00.0000] <Domenic>
tobie: so you know which branch of the union null should go to, probably

[12:27:18.0000] <Domenic>
oh tab already answered

[12:27:26.0000] <tobie>
yeah--thanks

[12:33:31.0000] <JakeA>
jyasskin: cheers! Will give that a go

[12:42:16.0000] <jyasskin>
tobie: I think there's a lot in WebIDL that we can simplify.

[12:42:57.0000] <tobie>
Oh, so union types are not associative because of how null types work. `(DOMString? or Node)` is *not* the same as `(DOMString or Node)?`

[12:44:59.0000] <tobie>
Hence (Foo or (DOMString or Node)?) != (Foo or DOMString or Node)?

[12:45:52.0000] <tobie>
jyasskin: I hope you're right

[12:47:38.0000] <jyasskin>
Yes, that sounds right. You get extra "which type" information as you push the ? down. I hope nobody's taking advantage of that.

[12:51:29.0000] <tobie>
jyasskin: well if nobody is, the whole thing can be simplified to making union types associative and making the quality of being nullable bubble.

[12:51:51.0000] <tobie>
*bubble upwards.

[12:52:16.0000] <jyasskin>
That would be awesome. We'd probably have to lead with a Blink/Firefox patch doing it, to see what breaks.

[12:53:49.0000] <tobie>
jyasskin: coming mostly from JS, the whole idea of tying null to a type is sort of forain to me, so I find it hard to picture what this could break, here.

[12:58:12.0000] <jyasskin>
Imagine that a spec has (DOMString? or Node), and then the text says "if a DOMString was passed, do X; otherwise for a Node do Y". By bubbling null, we force the spec to change to treat null explicitly.

[13:00:57.0000] <jyasskin>
We could try to make "DOMString?" an alias of (DOMString or Null), but then we get the restriction that (DOMString? or Node?) is banned right back.

[13:06:41.0000] <tobie>
Well, it's banned for precisely the same reason, right? Not to have to treat null explicitly.

[13:08:05.0000] <tobie>
I'm curious though as to real examples of APIs allowing null but not handling it explicitly.

[13:11:49.0000] <jyasskin>
Me too. I don't have any, but my guess is that because it's possible, it's been done.

[13:12:16.0000] <jyasskin>
Making the change in a browser is probably the best way to find examples.

[13:15:24.0000] <tobie>
Yup and running the output through CI.


2016-10-06
[17:35:08.0000] <MikeSmith>
do we have a list somewhere of features that now require a secure context?

[17:37:33.0000] <MikeSmith>
maybe https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts is closest

[23:45:11.0000] <mkwst>
MikeSmith: I don't think there's a canonical list anywhere. New features will eventually start using the `SecureContext` IDL attribute, so dom's IDL index might be useful in the future.

[23:46:02.0000] <mkwst>
MikeSmith: Looking backwards, it's something of a free-for-all where different browsers have deprecated different things. Chrome's been fairly aggressive. I hope other browsers are doing the same, but I haven't really been following their progress.

[00:24:38.0000] <annevk>
I don't think we've made much progress, if any

[01:19:15.0000] <tobie>
MikeSmith: do you know if anyone is maintaining services.w3.org/htmldiff (or if there's a better service out there)?

[03:28:18.0000] <zcorpan>
annevk: MikeSmith: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4546

[03:31:26.0000] <annevk>
zcorpan: cool, but... maybe a little thicker? http://1.bp.blogspot.com/_RxRHkpoGgAc/TExDs0nvs4I/AAAAAAAAAvk/FjywgVo8TbE/s1600/dog%2Bbone%2BCely.png

[03:33:34.0000] <Ms2ger>
Is that for the doge spec?

[03:33:44.0000] <annevk>
Ms2ger: Fetch

[03:34:01.0000] <Ms2ger>
Oh, clever

[03:34:12.0000] <annevk>
Also need an angle-bracket cat for HTML

[03:39:19.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4547

[03:47:53.0000] <Ms2ger>
A little less thick, please

[03:47:55.0000] <Ms2ger>
/me ducks

[03:51:23.0000] <annevk>
Heh, I think it needs more symmetry; can try some hacking myself though next week

[04:04:04.0000] <zcorpan>
annevk: better? :-) http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4548

[04:31:05.0000] <Ms2ger>
zcorpan, I like that one more

[05:08:21.0000] <MikeSmith>
mkwst: OK thanks

[05:08:47.0000] <MikeSmith>
tobie: dunno about services.w3.org/htmldiff but if anybody would know it would be Dom I think

[05:09:18.0000] <tobie>
MikeSmith: yeah, sorry, bugged him in the meantime and already got my issue fixed. :)

[05:09:34.0000] <MikeSmith>
haha

[05:09:35.0000] <MikeSmith>
OK

[05:10:48.0000] <MikeSmith>
zcorpan: yeah the thicker one is better I think too

[05:14:33.0000] <annevk>
zcorpan: 👍

[05:15:57.0000] <zcorpan>
annevk: https://github.com/whatwg/resources.whatwg.org/pull/19

[05:19:48.0000] <annevk>
I can't update the Twitter account atm

[05:24:12.0000] <MikeSmith>
annevk: https://github.com/w3c/web-platform-tests/pull/3879

[05:24:43.0000] <tobie>
heycam|away|away: anyway you could give me admin privileges to the WebIDL GH repo? I need to setup hooks for a bot on the repository and give it write access.

[05:31:14.0000] <annevk>
MikeSmith: gonna let youenn review

[05:31:23.0000] <MikeSmith>
k

[06:23:35.0000] <zcorpan>
FYI tomorrow and next week i will be on vacation

[07:31:47.0000] <Ms2ger>
zcorpan, have fun

[07:32:09.0000] <zcorpan>
thx, I will :-)

[09:25:34.0000] <jyasskin>
tobie: And turn on the HTTPS option. :)

[13:35:24.0000] <tobie>
jyasskin: planning to get back to you on the open-dictionary issue tomorrow morning.

[13:36:25.0000] <jyasskin>
tobie: Thanks! I'm glad bz hasn't shot any major holes in it. :)

[13:36:48.0000] <tobie>
jyasskin: sorry for having been slow and not as precise as I'd want to be with this—learning as we go.

[13:37:14.0000] <jyasskin>
Pff. You got it into Bikeshed so I could send the patch at all.

[13:37:52.0000] <tobie>
sure. :) still.


2016-10-07
[18:50:28.0000] <heycam>
tobie: I don't think that's possible for a non-org owned repo. let me know what hook url to add and I'll add it. (though I realise you might still want to click that "send a test hook message" button and won't be able to.)

[23:05:42.0000] <jyasskin>
heycam: Would it make sense to transfer the repository to an org?

[00:47:17.0000] <pycat>
Hello World!My name is Katerina.

[00:47:18.0000] <pycat>
I am applying to the Outreachy internship for this program.

[00:47:18.0000] <pycat>
I have strong experience on HTML and am interested on contributing to HTML standard.

[00:47:18.0000] <pycat>
I could work on issue #1429 (https://github.com/whatwg/html/issues/1429) as my first

[00:47:18.0000] <pycat>
contribution.

[00:48:16.0000] <pycat>
I would also like to know what additional programming skills are required :)

[00:48:33.0000] <pycat>
Thanks :)

[00:58:39.0000] <annevk>
pycat: we don't currently participate in Outreachy I believe; where did you read that we were?

[00:59:11.0000] <annevk>
pycat: you're welcome to nevertheless contribute though 😊

[01:05:06.0000] <pycat>
annevk: Yes, just noticed that i was in Outreachy round 12 section, but i am interesting anyway :)

[01:07:09.0000] <pycat>
annevk: could you tell me more about the required skills

[01:10:59.0000] <annevk>
pycat: some knowledge about algorithms and programming, not really any particular language since it's mostly English (unless you want to work on tooling/tests); bit of experience with making web sites would also help

[01:15:37.0000] <pycat>
annevk: great, i have some experience on making custom web sites with python django framework

[01:16:43.0000] <pycat>
annevk: i would like to know some more about tooling/tests

[01:17:47.0000] <annevk>
pycat: and to solve the more involved issues you'll have to figure out what browsers do

[01:18:45.0000] <annevk>
pycat: through some combination of using JavaScript APIs, maybe reading source code, and observing behavior

[01:19:07.0000] <pycat>
annevk: this will be my very fist time contributing to open source so any help and information will be more than welcome :)

[01:20:00.0000] <annevk>
pycat: quite a lot of what we do is document existing JS APIs better, and try to get all browsers to implement them in the same way

[01:27:23.0000] <annevk>
pycat: the other thing I suppose is that you need to learn GitHub a bit

[01:27:46.0000] <annevk>
pycat: how to make a pull request and such

[01:28:30.0000] <annevk>
pycat: I believe README/CONTRIBUTING files have guidance there

[01:30:10.0000] <pycat>
annevk: i already have some experience on git and github, mostly working individually

[01:30:36.0000] <annevk>
pycat: great

[01:31:54.0000] <pycat>
annevek: great, i will proceed on README/CONTRIBUTING. I hope i'l have my first pr soon :)

[01:36:35.0000] <pycat>
annevk: Thanks a lot for the guidance!!!I hope well talk soon!

[02:21:05.0000] <annevk>
pycat: thank you!

[04:16:26.0000] <gsnedders>
slightlyoff: where's the Google document giving the different levels of DRM? My Google-fu isn't good enough, seemingly

[05:34:14.0000] <MikeSmith>
annevk: https://stackoverflow.com/questions/39878142/redirect-failing-on-cors-request if you have time to answer there

[05:45:46.0000] <annevk>
MikeSmith: answered half

[05:46:40.0000] <MikeSmith>
thanks

[05:49:15.0000] <MikeSmith>
I wonder if there are browser bugs open to implement the preflight-redirect change

[05:50:01.0000] <MikeSmith>
in general it seems like we should have more systematic way of getting browser bugs filed for changes like this

[05:57:15.0000] <annevk>
Yeah, maybe I should reopen that issue to get bugs filed and fix tests

[05:58:10.0000] <annevk>
Too tired to get much done atm

[10:29:09.0000] <smaug>
++Domenic

[10:29:41.0000] <Domenic>
because the whatwg⊙wo response?

[10:31:46.0000] <smaug>
yes

[10:31:48.0000] <smaug>
thanks

[10:32:15.0000] <Domenic>
I feel sad for that list :-/. It has a lot of high-powered subscribers but I'm afraid we're just wasting their time.

[10:33:37.0000] <TabAtkins>
It probably makes sense to convert it over to being manually filtered.

[10:33:50.0000] <TabAtkins>
(I think we should do the same to the csswg list.)

[10:34:01.0000] <Domenic>
interesting

[10:36:02.0000] <smaug>
TabAtkins: ah, yes. Given that the mailing list is low-traffic these days, filtering would make sense.

[10:36:12.0000] <smaug>
and shouldn't take too much anyone's time

[10:36:33.0000] <TabAtkins>
Exactly. And it lets you head off these sorts of emails with a quick reply pointing them to the guidelines.

[10:36:53.0000] <Domenic>
You could even apply filtering only for first-time posters

[10:37:15.0000] <TabAtkins>
Domenic is already having his time wasted by these; it wouldn't increase his burden at all, and would save other people. ^_^

[10:37:39.0000] <TabAtkins>
Yeah, that's pretty typical.

[12:18:38.0000] <jyasskin>
tobie: Do you have sample code for Generic Sensors if a page wants to start watching a sensor's changes, but also use its current value as the first of those changes?

[12:28:11.0000] <tobie>
jyasskin: On a spotty mobile connection in a fast train for the foreseeable future.

[12:28:57.0000] <tobie>
jyasskin: yes this is the default behavior

[14:55:17.0000] <TabAtkins>
jyasskin: That's the "ReactiveValue" I talk about in http://www.xanthir.com/b4PV0 if Domenic or whoever would hurry up and standardize Observers. ^_^

[14:57:13.0000] <jyasskin>
TabAtkins: There it is! I knew you'd sent me that link before, but couldn't find it.


2016-10-09
[15:52:23.0000] <slightlyoff>
gsnedders: I can't find link easily either. Will send you a copy, tho


2016-10-10
[17:13:15.0000] <MikeSmith>
rektide: no idea what you mean by https://twitter.com/rektide/status/785210610829168644 “specs assume a 1-of-each principle. Yes, most people only want 1 gyro, 1 compass, 1 ALS, 1 sound card”

[17:16:47.0000] <MikeSmith>
because, e.g., device orientation API and geolocation API assume nothing at all about what kind of sensors on the device expose the orientation information, or how many of them are usedーwhether there’s even a gyro at all vs some other way(s) to determine the orientation, or whether the location info is from a GPS sensor or cell triangulation or some combination of sensors

[17:17:06.0000] <MikeSmith>
also, what is ALS?

[17:27:09.0000] <astearns>
ambient light sensor?

[17:27:52.0000] <astearns>
(unless they're referring to the American Lumber Standard)

[17:58:04.0000] <MikeSmith>
astearns: ah OK

[00:04:03.0000] <Ms2ger>
@media (400px <= min-width <= 700px) { � }

[00:04:08.0000] <Ms2ger>
/me wonders if that's right

[01:44:08.0000] <tobie>
rektide: trying to address all of these issues in the Generic Sensor API (https://w3c.github.io/sensors/)

[01:47:03.0000] <tobie>
rektide: comments welcome.

[02:32:30.0000] <annevk>
MikeSmit1: should maybe give youenn WPT rights? See https://github.com/w3c/web-platform-tests/pull/3592

[02:32:33.0000] <annevk>
I'll merge that for now

[02:46:12.0000] <annevk>
I looked through the worker tests and I cannot really find any that use data URLs, other than some importScripts tests

[02:46:17.0000] <annevk>
Where importScripts gets passed a data URL

[02:59:44.0000] <MikeSmit1>
annevk: Yeah I will add yoenn once I get back to my pc

[05:57:16.0000] <annevk>
Hmm

[05:57:33.0000] <annevk>
Chrome dispatches a string to window.onerror?!

[05:58:26.0000] <annevk>
Oh I don't understand how this works

[06:23:40.0000] <mkwst>
Doesn't window.onerror get something like 5 arguments?

[06:23:45.0000] <mkwst>
It's super-strange.

[06:38:15.0000] <annevk>
It does

[06:38:23.0000] <annevk>
And is

[06:40:00.0000] <jgraham_>
Isn't there some reason the strangeness is good

[06:40:20.0000] <jgraham_>
Like it prevents cross origin leaks

[06:44:15.0000] <annevk>
jgraham_: that is fine, but it not behaving like a normal event handler is not

[06:44:48.0000] <annevk>
jgraham: btw, would appreciate help with https://github.com/w3c/web-platform-tests/pull/3945 if you got some time

[06:46:32.0000] <jgraham>
annevk: What doesn't work?

[06:47:02.0000] <annevk>
jgraham: it seems the harness still trips over the exceptions somehow

[06:48:36.0000] <annevk>
jgraham: in particular, I get "uncaught exception: 2"

[06:48:46.0000] <jgraham>
annevk: Oh, allow_uncaught_exception doesn't play well with file-per-test

[06:49:16.0000] <jgraham>
Because file_is_test is using the exception to track whether the test passed

[06:49:35.0000] <annevk>
That is single page test?

[06:49:43.0000] <jgraham>
Yeah

[06:51:14.0000] <jgraham>
You could just create a single async_test and mark it done. You also wouldn't need explict_done: true that way

[06:55:02.0000] <annevk>
jgraham: ta

[06:55:09.0000] <annevk>
jgraham: pushed updates

[07:25:46.0000] <Ms2ger>
jgraham, can we improve the error message when using file-is-test + allow-uncaught?

[07:29:52.0000] <jgraham>
Ms2ger: We can

[07:30:06.0000] <jgraham>
It could possibly even be made to work if you inspected the exception in that case

[08:11:02.0000] <frewsxcv_>
Given this line "If the element is the HTML body element or does not have any associated CSS layout box return zero and terminate this algorithm." https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsettop what should this code return? https://gist.github.com/frewsxcv/91f13d34665a977164e0971e1c44a251

[08:11:36.0000] <frewsxcv_>
I would have thought 8 and 8, but all browsers I try seem to return 0 and 0

[08:12:00.0000] <frewsxcv_>
Should the spec be updated to match most browsers?

[08:18:30.0000] <annevk>
frewsxcv_: that should return the same as when innerBody is a <div>

[08:19:01.0000] <annevk>
frewsxcv_: "the HTML body element" is a specific body element instance for which innerBody is not a match

[08:20:05.0000] <frewsxcv_>
Right, that was my understand too

[08:20:19.0000] <frewsxcv_>
Though should the spec be changed if no browsers honor such a rule?

[08:21:52.0000] <annevk>
frewsxcv_: if the spec doesn't match browsers it should change, yes

[08:22:17.0000] <annevk>
frewsxcv_: unless all browsers are willing to change within some reasonable timeframe

[08:22:48.0000] <frewsxcv_>
Where's the issue tracker for cssom-view?

[08:23:41.0000] <frewsxcv_>
https://github.com/w3c/csswg-drafts ?

[08:24:37.0000] <annevk>
Think so

[08:26:07.0000] <frewsxcv_>
https://github.com/w3c/csswg-drafts/issues/584

[08:44:33.0000] <Ms2ger>
\o frewsxcv_

[08:45:25.0000] <frewsxcv_>
o/

[10:59:17.0000] <Iarfen>
Hi!

[11:22:10.0000] <TabAtkins>
Ms2ger: Yeah, that's right (per spec; nobody's implemented that syntax yet).

[11:48:11.0000] <Iarfen>
How I have to do the commits in order to collaborate?

[13:21:08.0000] <smaug>
aha, ExtendableMessageEvent is buggy

[13:21:24.0000] <smaug>
the usual, default values for dictionary properties missing

[13:21:28.0000] <smaug>
(or required)

[13:32:16.0000] <jyasskin>
tobie: Nice analysis in https://github.com/heycam/webidl/pull/180#issuecomment-252736486!

[13:32:56.0000] <jyasskin>
tobie: Your examples make me personally lean toward traversing the prototype in record<>s, but I defer to Domenic and the other real experts here.

[13:33:19.0000] <TabAtkins>
Same.

[13:34:09.0000] <jyasskin>
tobie: I am relieved that I said "this only matters in obfuscated-javascript competitions" about the order we call Get(), and not about whether we traverse the prototype. ;)

[13:49:14.0000] <tobie>
Would love a bunch of eyeballs especially from folks with a WebDev background on https://github.com/heycam/webidl/pull/180#issuecomment-252736486 (off the top of my head: JakeA, slightlyoff, marcosc_)

[13:56:08.0000] <smaug>
uh, lots of discussion in github prs

[13:56:15.0000] <smaug>
it all really should go to issues

[13:58:14.0000] <Domenic>
Why? Discussion in PRs makes sense; it's discussion about something concrete.

[14:01:08.0000] <smaug>
github hides some comments in prs

[14:01:28.0000] <smaug>
prs should be about discussion about the pr itself

[14:01:30.0000] <smaug>
like review

[14:02:03.0000] <Domenic>
I disagree.

[14:02:23.0000] <smaug>
it is mostly github's buggy handling of comments in prs which is really bad

[14:02:35.0000] <Domenic>
I haven't seen that issue recently.

[14:02:36.0000] <smaug>
I don't recall in which cases it hides some comments

[14:03:08.0000] <AutomatedTester>
it hides then if someone pushes with -f

[14:03:35.0000] <AutomatedTester>
its got better at showing there were comments on a previous version of the PR

[14:03:52.0000] <AutomatedTester>
but before you used to lose ALL context.

[14:04:15.0000] <smaug>
it has happened that feedback was asked for a spec change, but pretty much all the interesting discussion was hidden

[14:09:51.0000] <tobie>
smaug: afaik, but I could be wrong, this is an issue when discussions happen on comments regarding a specific line of code, not on general comments.

[14:10:12.0000] <tobie>
smaug: best way to check this would be to look at the GH API's output.

[14:24:03.0000] <tobie>
smaug: curl https://api.github.com/repos/heycam/webidl/issues/180/comments and https://api.github.com/repos/heycam/webidl/issues/180/comments?page=2, you'll see the whole top-level comments there.

[14:24:43.0000] <tobie>
smaug: note this is the GH API URL to the issue #180 and not it's related PR.

[14:25:13.0000] <tobie>
smaug: implementation wise, GH treats PR as a special case of issue

[14:27:03.0000] <smaug>
and it is just buggy with prs :)

[14:27:08.0000] <smaug>
no reason to not use issues

[14:28:57.0000] <tobie>
smaug: talking about real code beats talking about abstract things in my book

[14:30:31.0000] <tobie>
smaug: I agree we could do a PR and then open another issue to discuss said PR in that case,

[14:30:35.0000] <smaug>
https://github.com/heycam/webidl/pull/180 as an example is a mix of reviews and proposals and stuff. It would be way easier to follow the discussion if the proposals and such were in an issue and one people agree what should be done, there would be a pr for the spec change

[14:31:18.0000] <tobie>
smaug: well, except sometimes people only really start to understand what's at stake when there's code to review.

[14:31:50.0000] <tobie>
smaug: (code or spec changes)

[14:31:53.0000] <smaug>
That rarely happens with spec stuff

[14:32:34.0000] <smaug>
(partly because it is somewhat harder to review spec changes)

[14:32:55.0000] <tobie>
smaug: well it's a non-issue, then, no? ;)

[14:33:10.0000] <smaug>
reviewing itself is an issue

[14:33:24.0000] <smaug>
but nothing to do with github issues/pr stuff

[14:34:54.0000] <tobie>
smaug: I agree both GH issues and PRs tend to drift and quickly go all over the place.

[14:36:31.0000] <tobie>
smaug: that's why, as editor, I tend to update the main issue with the current state of the conversation, write summaries, or split up an issue into more precise ones, potentially sometimes closing the main issue.

[14:36:48.0000] <tobie>
smaug: Not sure how to best fix that, but I digress.

[14:40:59.0000] <smaug>
I see that spec writing should be similar to writing code

[14:41:33.0000] <smaug>
when you upload a patch (pr) you already should know what kind of change should be done

[14:41:36.0000] <jyasskin>
smaug: The open-dictionary issue (https://www.w3.org/Bugs/Public/show_bug.cgi?id=20158) sat for years until the PR focused people's minds. Folks got stuck discussing iteration order in the issue, but only noticed the prototype question once the spec text was there.

[14:41:49.0000] <smaug>
so, github pr is similar to bugzilla bug in my mind

[14:41:54.0000] <smaug>
and issues for discussion

[14:42:51.0000] <smaug>
(well, W3C bugzilla is used like github issues, I was referring to mozilla's bugzilla )

[14:43:37.0000] <smaug>
I guess I could be happy with PRs only, if it wasn't buggy

[14:49:12.0000] <Iarfen>
How I do to make suggestions? I'm not allowed to do a pull request, what can I do?

[14:52:50.0000] <Domenic>
larfen: have you read https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F ?


2016-10-11
[18:46:23.0000] <a-ja>
can anyone think of a reason why validator should consider require-sri-for in csp header to be an error?

[18:50:03.0000] <MikeSmith>
a-ja: possibly because I haven't updated the validator with the latest spec changes

[18:51:16.0000] <MikeSmith>
actually we mostly just rely on a third-party library for CSP checking, and I have not updated to the latest version of that for many months

[18:52:08.0000] <MikeSmith>
https://github.com/shapesecurity/salvation

[18:53:02.0000] <a-ja>
MikeSmith, ....looking

[18:54:38.0000] <a-ja>
issue 144 fixed 3 months ago, eh?

[18:58:53.0000] <MikeSmith>
Yeah I'm using version 2.0.1, which was released in February

[19:00:02.0000] <MikeSmith>
please file an issue at https://github.com/validator/validator/issues if you have time

[19:00:29.0000] <a-ja>
MikeSmith, think I'll pass that URL on to April King for possible use at observatory.mozilla.org

[19:03:12.0000] <MikeSmith>
Ah yeah I like that Observatory thing

[19:03:35.0000] <a-ja>
MikeSmith, https://github.com/validator/validator/issues/382

[19:03:57.0000] <MikeSmith>
But Observatory already does CSP header checking, right?

[19:04:19.0000] <MikeSmith>
thanks for raising the issue

[19:04:25.0000] <a-ja>
MikeSmith, found a csp parser error with it the other day....which is why i thought of it now

[19:04:36.0000] <MikeSmith>
Ah

[19:04:49.0000] <a-ja>
it's been fixed

[19:05:02.0000] <MikeSmith>
Ok

[19:07:15.0000] <MikeSmith>
I will try to update the validator to the latest Salvation version today

[19:08:27.0000] <MikeSmith>
and hope they did not make any breaking changes to their API that will require me to rewrite my code

[19:10:57.0000] <a-ja>
MikeSmith, sorry....got a call.   sounds good.  tks

[23:48:25.0000] <tobie>
can't agree more with jyasskin. Nothing beats a PR, and new issues show up as you start writing things down.

[00:13:07.0000] <annevk>
That is kinda why we keep discussing things there

[02:51:20.0000] <tobie>
heycam: hey think you could give me admin access to the webidl repo? I need to set up some web hooks for a bot. Happy to relinquish afterwards, just easier to setup that way.

[02:55:59.0000] <heycam>
tobie: I need to move it to an org to be able to do that

[02:56:18.0000] <tobie>
heycam: oh, really? That sucks.

[02:56:23.0000] <heycam>
tobie: yeah :(

[02:56:48.0000] <heycam>
tobie: I can either add a hook now for you, or we can discuss moving again ...

[02:57:46.0000] <tobie>
heycam: I'll look into the hook url and payloads I need.

[02:57:57.0000] <tobie>
heycam: you're still around for a little bit?

[02:57:59.0000] <heycam>
tobie: ok thanks, sorry for the inconvenience

[02:58:07.0000] <heycam>
tobie: no I have to leave the office about now :)

[02:59:01.0000] <tobie>
heycam: ok, will email you later so you get this by tomorrow morning

[02:59:10.0000] <heycam>
tobie: no problem, will add them first thing in the morning

[02:59:22.0000] <tobie>
ty

[04:43:12.0000] <smaug>
could someone explain why there are MessageEvent and ServiceWorkerMessageEvent interfaces?

[04:47:35.0000] <annevk>
smaug: I think primarily because source could be something else

[04:47:42.0000] <annevk>
smaug: I suggested we should just merge those though

[04:48:01.0000] <smaug>
yeah, feels a bit silly to have similar events

[04:48:07.0000] <smaug>
which are now even inconsisten

[04:48:09.0000] <smaug>
t

[04:48:18.0000] <smaug>
one accepting null ports, one doesn't

[04:48:19.0000] <smaug>
etc

[04:49:06.0000] <annevk>
smaug: it seems like Hixie_ blocked it in https://www.w3.org/Bugs/Public/show_bug.cgi?id=28199

[04:49:34.0000] <annevk>
smaug: well, he didn't really

[04:49:50.0000] <annevk>
smaug: it seems nobody studied that in sufficient detail :/

[04:50:00.0000] <annevk>
"studied"

[04:50:27.0000] <smaug>
filed https://github.com/w3c/ServiceWorker/issues/989

[04:51:22.0000] <smaug>
of course there is also https://github.com/w3c/ServiceWorker/issues/988

[04:51:33.0000] <annevk>
smaug: oh, I filed https://github.com/w3c/ServiceWorker/issues/990

[04:52:29.0000] <annevk>
smaug: ok, marked mine as dupe

[04:53:45.0000] <smaug>
I wonder what to implement now

[04:53:53.0000] <smaug>
whether .ports should be nullable or not

[04:54:18.0000] <smaug>
(or in other words, whether I can review+ the patch which makes MessageEvent to follow the latest spec)

[04:58:17.0000] <annevk>
I think so, unless there's some weird reason we can't change ServiceWorkerMessageEvent

[04:58:24.0000] <annevk>
But that seems unlikely

[04:58:36.0000] <smaug>
not sure

[04:58:39.0000] <smaug>
or, hmm

[04:59:09.0000] <smaug>
is the ServiceWorkerMessageEvent.ports always set to some value when UA dispatches those events

[05:01:29.0000] <smaug>
I guess so

[05:01:32.0000] <smaug>
at least to []

[05:45:34.0000] <annevk>
MikeSmith: can https://dvcs.w3.org/hg/xhr/raw-file/default/xhr-1/Overview.html now be a redirect to https://xhr.spec.whatwg.org/?

[05:55:18.0000] <smaug>
this focusin/out is such a nice mess too :)

[05:56:22.0000] <annevk>
smaug: sigh yes

[06:02:00.0000] <smaug>
in blink it is possible to have events for the same target in order: blur, focus, focusin, focusout

[06:02:11.0000] <smaug>
and after that the element is focused

[06:02:34.0000] <smaug>
even though the last even it got was focusout

[06:03:14.0000] <annevk>
This is what you get when UI events refuses to define a processing model for years on end

[06:03:52.0000] <annevk>
rbyers isn't convinced that's the biggest problem for some reason, but there's just so many edge cases that would suddenly be clear if we did that

[06:04:53.0000] <smaug>
well, this isn't even UI events

[06:05:02.0000] <smaug>
this is webkit/blink  implementing something totally random

[06:05:35.0000] <smaug>
against even those vague hints UI events spec have about the behavior

[06:08:10.0000] <annevk>
The other problem with focus is that it's in part defined by HTML

[06:12:01.0000] <annevk>
smaug: pre and post-click-dispatch steps

[06:12:13.0000] <annevk>
smaug: is that basically an extra iteration over event's path?

[06:12:26.0000] <annevk>
smaug: before we call any listeners, and after all listeners are invoked?

[06:12:33.0000] <annevk>
smaug: and we only do after if the canceled flag is still unset?

[06:12:55.0000] <smaug>
so in Gecko "pre" is about creating path

[06:13:03.0000] <smaug>
we may do some other stuff there too

[06:13:15.0000] <smaug>
like that type=checkbox state change

[06:13:40.0000] <annevk>
yeah, that would become part of pre-click-dispatch

[06:13:45.0000] <annevk>
is there anything else?

[06:13:54.0000] <smaug>
and post is using the path, and is a separate iteration after normal dispatch

[06:13:59.0000] <annevk>
I guess it could be combined with creating the path, but it doesn't necessarily have to be

[06:15:03.0000] <smaug>
(In gecko '̈́post' is part of "system group dispatch", which is separate, not-web-visible capture-target-bubble phase after normal c-t-b, and 'post' is part of the system groups bubble phase)

[06:15:28.0000] <rbyers>
Yeah, I'm trying to get us to improve this space is a test-driven way.  We've got a number of inconsistencies between specs and implementations already, I'm skeptical that focusing primarily on improving spec quality will help much on its own.

[06:15:59.0000] <annevk>
rbyers: it's really hard to write comprehensive tests if you don't know the processing model

[06:16:07.0000] <smaug>
rbyers: you can't really have good implementations without specs

[06:16:18.0000] <annevk>
rbyers: considering them each in isolation is somewhat problematic

[06:16:28.0000] <rbyers>
Right we need to do them all together

[06:16:31.0000] <smaug>
(and yes, having good specs require 2-3 implementations at leasts)

[06:16:42.0000] <annevk>
rbyers: and why many efforts fail (e.g., the one around contenteditable which also focused only on tests)

[06:16:59.0000] <rbyers>
We can write tests from the perspective of what developers expect to happen / what sites are relying on today.

[06:17:12.0000] <rbyers>
I agree it would be a mistake to focus only on tests

[06:17:14.0000] <annevk>
that's way too simplistic, imo

[06:17:25.0000] <rbyers>
But in the UI events space tests have been almost entirely neglected.

[06:17:47.0000] <rbyers>
So we have a lot of catch-up to do there before all three can really evolve together

[06:17:47.0000] <annevk>
tests and impls have too

[06:17:53.0000] <annevk>
specs and impls have too*

[06:18:20.0000] <annevk>
nothing there has meaningfully improved for a long time

[06:18:38.0000] <annevk>
I'm extremely skeptical you can write comprehensive tests by studying what websites do

[06:19:12.0000] <rbyers>
Not in isolation, no of course not

[06:19:19.0000] <smaug>
yeah, without some model one will miss tons of edge cases in tests

[06:19:57.0000] <rbyers>
We have some model in the spec today, it's just weak

[06:20:22.0000] <rbyers>
I'm not opposed to someone rewriting the spec to make more sense if one of you is volunteering ;-)

[06:20:23.0000] <annevk>
There's no real model in the spec imo

[06:20:47.0000] <annevk>
I guess at some point someone will have to, since the current approach doesn't seem to be working

[06:21:00.0000] <annevk>
And it's starting to hurt other things

[06:21:33.0000] <rbyers>
(as long as it's done in a forum Microsoft can participate in of course - they have a ton of good web compat experience on input behavior)

[06:21:43.0000] <annevk>
It's a little annoying that all the cleaning up falls to us

[06:22:29.0000] <smaug>
UIEvents doesn't really have model. it has just a list of events basically. List of feature browser is expected to implement, but doesn't tell how the features should work. Quite similar to WebPerfWG's specs.

[06:22:37.0000] <annevk>
rbyers: if it actually falls to me I'll do it somewhere where I'm comfortable

[06:23:17.0000] <rbyers>
It's not true that there haven't been real improvements here BTW

[06:23:32.0000] <rbyers>
mouseover/out/enter/leave behavior used to be completely different between a number of engines

[06:23:46.0000] <rbyers>
and we saw real world bugs as a result

[06:24:08.0000] <rbyers>
the spec got more precise and blink overhauled it's behavior to match.  Now blink, gecko and Edge are at least pretty consistent.

[06:25:59.0000] <rbyers>
We'll keep making incremental progress like this.  Eg. focus behavior is on the blink input team's plans for Q4: https://bugs.chromium.org/p/chromium/issues/detail?id=645988

[06:27:30.0000] <smaug>
rbyers: BTW, as of now my plan is to just go with blink's focusin/out behavior in Gecko (someone else has written the patch). With most of blink's bugs and all.

[06:27:41.0000] <smaug>
I guess we should document somewhere the behavior

[06:27:50.0000] <smaug>
(well, there will be some wpts)

[06:28:02.0000] <rbyers>
ugh

[06:28:35.0000] <rbyers>
Please cc dtapuska on your plans in gecko - he's leading a new engineer in trying to fix our behavior.

[06:28:44.0000] <smaug>
all these events are so regression prone.

[06:29:11.0000] <rbyers>
So if the spec'd behavior isn't web compatible, then it would be good to know that....

[06:29:24.0000] <smaug>
rbyers: but, if you're actively now fixing the bugs and possibly even making focusin/out follow the spec, Gecko would do that too

[06:29:45.0000] <rbyers>
Ah, good.  Yeah it's happening just taking time while some new folks ramp up

[06:30:15.0000] <smaug>
rbyers: I guess only MS might know whether the spec'ed behavior is web compatible

[06:30:25.0000] <smaug>
since they had it something like that in EI

[06:30:35.0000] <smaug>
but switched to closer to webkit/blink model in Edge

[06:33:59.0000] <Ms2ger>
"We're starting on the (hopefully not too convoluted) process of updating the Cookies RFC"

[06:34:00.0000] <Ms2ger>
Lol

[06:36:13.0000] <smaug>
lunch

[07:04:33.0000] <wanderview>
JakeA: are we re-creating cookies for this issue? https://github.com/w3c/ServiceWorker/issues/920#issuecomment-252657496

[07:04:48.0000] <wanderview>
an origin scoped thing that gets set on network requests automatically

[07:05:04.0000] <wanderview>
by "thing" I mean header

[07:05:46.0000] <wanderview>
obviously there are some differences too... but the similarities we striking to me reading through the last few comments there

[07:06:20.0000] <JakeA>
wanderview: yep. I'm a little sad about that. See https://github.com/w3c/ServiceWorker/issues/920#issuecomment-245621515 and the following few comments

[07:07:05.0000] <JakeA>
It certainly makes the API less tidy

[07:07:30.0000] <wanderview>
JakeA:  I wonder if we could split this from the particular use case... origin headers that are applied based on sane rules (as opposed to cookies which I think might have insane rules?)

[07:08:39.0000] <wanderview>
I dunno, just a random though

[07:08:41.0000] <wanderview>
thought

[07:12:01.0000] <JakeA>
wanderview: https://github.com/w3c/ServiceWorker/issues/920#issuecomment-247144874 is Facebook's objection

[07:13:26.0000] <wanderview>
JakeA: well, right... I was saying lets avoid cookies... but pre-specifying a header to apply to all future requests that match X could be a generic thing and not specific to SW preload (or whatever we are calling it these days)

[07:13:37.0000] <annevk>
Domenic: the "initialized" pattern you like so much stems from the lack of internal slots

[07:14:13.0000] <annevk>
Domenic: the idea was to use "initialized" rather than "set" as some language to get to the internal slot, but with nothing formalized it's all somewhat confused of course

[07:14:22.0000] <JakeA>
wanderview: I'm open to that. It's very specific right now though, it's specifically these preload requests

[07:15:24.0000] <annevk>
wanderview: avoid cookies because?

[07:15:47.0000] <wanderview>
annevk: see JakeA's link to FB's objection to cookies

[07:16:10.0000] <JakeA>
annevk: https://github.com/w3c/ServiceWorker/issues/920#issuecomment-247144874 this is what Nate from Facebook was talking about at the F2F

[07:16:25.0000] <annevk>
wanderview: sorry, I meant to ask why you'd like to avoid that

[07:16:33.0000] <wanderview>
my interpretation is "cookies have a lot of baggage and don't worry the same everywhere"... and we don't expose cookies in SW yet

[07:19:13.0000] <wanderview>
JakeA: have we thought about things like size limits on this preload header thing?  Its basically another place for people to store stuff (perhaps synchronously?)

[07:19:51.0000] <JakeA>
wanderview: I hadn't thought much about it. I guess it could count towards origin storage

[07:20:33.0000] <wanderview>
JakeA: less worries about quota and more thinking of people abusing it as synchronous storage... does the API currently sync set and get the header?

[07:20:46.0000] <JakeA>
wanderview: no it's async

[07:20:51.0000] <wanderview>
ok, good

[07:20:52.0000] <wanderview>
thanks

[07:21:13.0000] <wanderview>
/me was thinking of fxos code that stuck pre-rendered HTML for the page in a cookie for fast first load.

[07:21:21.0000] <JakeA>
hah

[07:23:12.0000] <wanderview>
annevk: my impression is cookies had all kinds of weird legacy behavior around paths, limits on number, etc...  that fact that everyone groans when cookies come up made me want to avoid them

[07:23:34.0000] <annevk>
wanderview: I see, but this has none of that

[07:23:46.0000] <annevk>
wanderview: main problem with cookies imo is that they're not origin-bound, which this is

[07:24:03.0000] <wanderview>
ok... I was not saying to use cookies...

[07:24:07.0000] <JakeA>
Also they only want it sent on the preloads

[07:29:37.0000] <wanderview>
JakeA: I think the bit that makes me mention all this is the differences with Cache API... Cache is origin-based and the SW then picks which one to use... this header thing is implicitly to the registration matching logic

[07:29:54.0000] <wanderview>
JakeA: although maybe this is just a consequence of not going whole hog on static routing

[07:30:51.0000] <wanderview>
/me wonders if Europeans understand the phrase "whole hog".

[07:32:02.0000] <wanderview>
oh... it seems its common in Britain as well: https://britishhogroasts.co.uk/go-the-whole-hog/

[07:41:09.0000] <JakeA>
wanderview: since the preload is a service worker thing, it makes sense to tie it to the registration (like push subscriptions)

[07:41:34.0000] <JakeA>
wanderview: I think static routes will end up being tied to the service worker rather than the registration fwiw

[07:41:55.0000] <JakeA>
I wanted preload to be tied to the service worker too, but that doesn't work if you have a header that can be updated at any point

[07:42:44.0000] <wanderview>
JakeA: I think the same could be said about Cache API... but we made it its own thing... just seems similar to me

[07:43:50.0000] <JakeA>
wanderview: we nearly made caches tied to a sw, but it became really ugly when you wanted a cache to last longer

[07:44:24.0000] <JakeA>
wanderview: not against adding an api to tie a cache (or storage box) to a sw. It'd remove the need for that ugly "activate" boilerplate

[07:45:05.0000] <wanderview>
JakeA: you misunderstand me :-)  I was saying we could separate the header API from the SW registration just like we did for Cache API... I don't want to go the other way

[07:46:19.0000] <JakeA>
wanderview: ohhh sorry! But if this header is sent has part of preload, which is inherently a service worker thing, doesn't separating them make it more confusing?

[07:48:27.0000] <wanderview>
JakeA: yea... if we moved it out we would have to have a way to say "apply this to preload requests only"... but in theory this API would have a way to match requests anyway in order which ones to apply the header to

[07:49:27.0000] <wanderview>
JakeA: but this is all just brainstorming... I'm not really objecting to the current API proposal

[07:50:14.0000] <JakeA>
wanderview: I'll have a think about it. I'm a little grumpy about it because the API was *so much* nicer when the header wasn't updatable :D

[07:50:31.0000] <JakeA>
But I suppose there's no point in a nice API if it isn't useful

[07:51:05.0000] <wanderview>
JakeA: I was just thinking if we could make it setable at the origin level, separate from SW, perhaps it would be easier to manage across SW life cycles

[07:51:18.0000] <wanderview>
similar to how you can load Cache objects from window today

[07:51:40.0000] <JakeA>
wanderview: I think that would clash with having multiple registrations on the same origin

[07:52:24.0000] <wanderview>
JakeA: well, the API would need some kind of URL matching... perhaps the same matching algorithm specified by Cache API

[07:53:14.0000] <wanderview>
but maybe the intent is really to glob resources under the scope

[07:53:24.0000] <wanderview>
I dunno... again... just random thoughts

[07:55:32.0000] <JakeA>
wanderview: I'd like this preload thing to be expressible in static routing at some point, so separating the header a little would help there

[07:58:50.0000] <wanderview>
JakeA: I'm thinking something like this: https://gist.github.com/wanderview/d268442914398a66613682957dd2f8ff

[08:00:00.0000] <JakeA>
wanderview: how would that only relate to preload requests?

[08:06:21.0000] <wanderview>
JakeA: let met add that now... someone was at the door

[08:08:32.0000] <wanderview>
JakeA: ok, reload the gist

[08:09:12.0000] <JakeA>
wanderview: ohhh, that's actually pretty neat

[08:09:50.0000] <wanderview>
JakeA: using the http cache matching semantics doesn't really provide scope-like path matching, though

[08:10:11.0000] <wanderview>
but that could be adapted in some way

[08:11:39.0000] <wanderview>
although for Cache API we set substring matching was a de-opt

[08:11:43.0000] <wanderview>
and removed it

[08:11:50.0000] <wanderview>
^set^said

[08:12:10.0000] <JakeA>
Hah, I was just trying to remember what we called that option

[08:13:17.0000] <wanderview>
woah... shots fired at npm https://code.facebook.com/posts/1840075619545360

[08:13:27.0000] <JakeA>
wanderview: anyway, my brain's not working right now (for some reason I didn't sleep last night). Let's pick this up again tomorrow… but I kinda like it.

[08:13:53.0000] <wanderview>
JakeA: np, have a good night!  (I assume you were still thinking about Sunday's debate in the US!)

[08:14:50.0000] <wanderview>
I'll stick the idea in the github issue

[08:56:18.0000] <wanderview>
annevk: was it intentional that when Headers.get() was switched to combine headers that the Cache API Vary matching would begin matching combined headers as well?

[08:56:25.0000] <wanderview>
JakeA: ^^^

[08:57:21.0000] <wanderview>
I'll file an issue to clarify

[09:00:00.0000] <wanderview>
annevk: JakeA: filed this... https://github.com/w3c/ServiceWorker/issues/991

[09:13:08.0000] <annevk>
wanderview: dunno, will study later

[10:23:43.0000] <annevk>
wanderview: sooo, briefly looked at the Cache API algorithms

[10:23:49.0000] <annevk>
wanderview: they appear broken

[10:27:21.0000] <wanderview>
annevk: ok, we'll have to discuss with JakeA tomorrow I guess

[10:27:42.0000] <annevk>
wanderview: yeah, we basically shouldn't be invoking IDL operations

[10:27:56.0000] <annevk>
wanderview: and definitely not from algorithms that run "in parallel"

[10:28:32.0000] <annevk>
wanderview: but I also think HTTP doesn't just look at the first header

[10:28:46.0000] <annevk>
wanderview: for HTTP there's no difference between multiple headers or one header with a comma-separated value

[10:28:56.0000] <annevk>
wanderview: except for cookies (another reason folks dislike them)

[10:29:43.0000] <gsnedders>
how does "Add links to tests from requirements (beta)" work?

[14:04:20.0000] <Domenic>
TabAtkins: where's you and fantasi's old old form control styling proposal?

[14:48:40.0000] <hober>
Domenic: here's my handwavy one from a few years ago https://lists.w3.org/Archives/Public/www-style/2014Feb/0621.html

[14:49:22.0000] <Domenic>
hober: oh cool, thanks!

[14:49:28.0000] <hober>
np


2016-10-12
[23:56:08.0000] <tobie>
heycam: just emailed you the webhook details right now. No hurry, I'm on parental duty today. :)

[23:56:13.0000] <heycam>
tobie: just saw it :)

[23:58:10.0000] <tobie>
heycam: while you're at it, can you check: Enforce HTTPS at the bottom of the settings page?

[23:59:17.0000] <tobie>
heycam: at the bottom of https://github.com/heycam/webidl/settings

[23:59:19.0000] <heycam>
tobie: ok added, it tells me it sent a ping message, for which the hook returned a 502 page whose title is "Heroku | Welcome to your new app!"

[23:59:35.0000] <heycam>
ticked.

[00:01:00.0000] <tobie>
Yeah, need to deploy the bot.

[00:01:22.0000] <tobie>
heycam: which I'll find time for later (hopefully)

[00:01:28.0000] <heycam>
cool cool

[00:03:16.0000] <annevk>
sigh

[00:04:09.0000] <annevk>
johanneswilm keeps at it with premature closing of issues

[00:04:39.0000] <tobie>
heycam: thanks a bunch

[00:04:47.0000] <heycam>
np!

[00:25:22.0000] <MikeSmith>
annevk: which issue?

[00:26:16.0000] <annevk>
MikeSmith: https://github.com/w3c/input-events/issues/38

[01:07:07.0000] <annevk>
"Beyond that, it doesn't really matter what it returns, or whether it differs from implementation to implementation."

[01:07:28.0000] <annevk>
longer sigh

[01:20:51.0000] <annevk>
miketaylr_: seen anything about outerText yet?

[01:21:13.0000] <annevk>
Ms2ger: Gecko not getting a bug report for outerText might not mean which with respect to "mobile web"

[01:21:48.0000] <annevk>
Ms2ger: at this point if it's everyone-but-Gecko it'll only disappear from the web if someone else starts actively removing

[01:22:01.0000] <annevk>
Ms2ger: asking for data and they'll just be like "shrug"

[01:22:31.0000] <Ms2ger>
Don't we have people at Google who like to add use counters now?

[01:24:23.0000] <Ms2ger>
I guess I wouldn't be surprised if the response ended up being "too high, won't remove", but it feels like it's worth checking

[01:27:23.0000] <annevk>
I guess you could ask @foolip

[02:15:50.0000] <annevk>
No overnight feedback on the click event business unfortunately

[05:27:06.0000] <annevk>
Maybe for the best, since I found some mistakes

[05:27:58.0000] <annevk>
smaug: it seems other implementations do not traverse the whole path to run "activation behavior"

[05:28:05.0000] <annevk>
smaug: they only do it for the first instance

[05:28:42.0000] <annevk>
smaug: also, I can't figure out how <label> works

[05:29:35.0000] <smaug>
it depends on the case I think

[05:29:54.0000] <smaug>
Gecko may have a bug with <a> / <input>

[05:30:07.0000] <smaug>
well, basically input

[05:30:20.0000] <annevk>
smaug: I also get different behavior for click() and synthetic events

[05:30:25.0000] <smaug>
to not mark the event handled so that <a> doesn't try to handle it

[05:30:40.0000] <annevk>
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0A...%3Ca%20href%3D%2F%3Ex%3Cinput%20type%3Dcheckbox%3E%3Cdiv%3Ex%3C%2Fdiv%3E%3C%2Fa%3E%0A%3Cscript%3E%0Adocument.querySelector(%22input%22).dispatchEvent(new%20MouseEvent(%22click%22))%0A%3C%2Fscript%3E

[05:30:52.0000] <annevk>
Now replace the dispatchEvent stuff with click()

[05:31:20.0000] <annevk>
From your explanation of how click() should work (just run dispatchEvent()) it seems like there's a bug there?

[05:32:20.0000] <annevk>
Oh, maybe it's because of bubbling?

[05:32:57.0000] <smaug>
/me wonders what bug he is looking at

[05:33:17.0000] <annevk>
smaug: classify bug?

[05:33:18.0000] <smaug>
ah, in chrome there might be a bug it seems

[05:33:27.0000] <smaug>
annevk: you said there is a bug :)

[05:33:36.0000] <annevk>
smaug: there's a lot of different behavior

[05:33:46.0000] <smaug>
bug = "inconsistency" in this case

[05:35:59.0000] <annevk>
smaug: so the other thing seems to indeed be about bubbling

[05:36:20.0000] <annevk>
smaug: but that means that for the pre-click stuff we should also look at bubbling, no?

[05:37:30.0000] <smaug>
I'm lost now what you're talking about

[05:39:02.0000] <annevk>
Compare

[05:39:03.0000] <annevk>
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3Cscript%3E%0Avar%20input%20%3D%20document.createElement(%22input%22)%0Ainput.type%20%3D%20%22checkbox%22%0Ainput.appendChild(new%20Text(%22x%22))%0Ainput.firstChild.dispatchEvent(new%20MouseEvent(%22click%22))%0Aw(input.checked)%0A%3C%2Fscript%3E

[05:39:07.0000] <annevk>
https://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0A%3Ca%20href%3D%2F%3Ex%3C%2Fa%3E%0A%3Cscript%3E%0Adocument.querySelector(%22a%22).firstChild.dispatchEvent(new%20MouseEvent(%22click%22))%0A%3C%2Fscript%3E

[05:39:17.0000] <annevk>
Why does the former check the checkbox, but the latter not follow the link?

[05:43:14.0000] <smaug>
annevk: ah, that. Ok, input checked is changed during pre-handling

[05:43:27.0000] <annevk>
smaug: I know

[05:43:40.0000] <smaug>
and link triggered during post-handling, but we don't bubble from the textnode to <a>

[05:43:54.0000] <smaug>
so yes, bubble needs to be taken account

[05:43:55.0000] <smaug>
as far as I see

[05:44:25.0000] <smaug>
/me tries to find some code in blink which was very unexpected... dealing with some of this stuff

[05:45:30.0000] <annevk>
smaug: but this means that if you cancel that click event the post-handling steps don't run for the input

[05:45:56.0000] <smaug>
Can't find the code in blink now

[05:46:08.0000] <smaug>
but anyhow, looks like they have similar handling for bubbling as gecko: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/events/EventDispatcher.cpp?sq=package:chromium&l=297

[05:46:34.0000] <annevk>
smaug: that is, we change checkedness of the input due to a non-bubbling click on a descendant, but you can't cancel that as you could if it bubbled

[05:46:58.0000] <smaug>
right

[05:47:01.0000] <annevk>
smaug: so logically, it seems you'd want to take bubbling into account for pre-handling too

[05:47:31.0000] <smaug>
annevk: well, this is very edge case. <input type=checkbox> is odd beast, and that element doesn't usually have child nodes

[05:47:46.0000] <annevk>
(not that it matters much in practice, since <input> almost never has children, but it would make the logic better in the spec, since you can determine the "activation element" just once)

[05:48:14.0000] <annevk>
that is, if we determine the activation element just once, we don't have to traverse the path multiple times

[05:52:31.0000] <annevk>
smaug: thoughts on that?

[05:56:18.0000] <smaug>
annevk: if it helps with spec'ing and only change browsers would need to do is change default handling when event is coming from a child node of an <input> element, sounds ok to me. .... are there other cases when pre-handling is used?

[05:56:56.0000] <annevk>
smaug: I only found pre-click handling and post-canceled-click handling in HTML for <input type=checkbox> and <input type=radio>

[06:06:37.0000] <hsivonen>
annevk: fwiw, the Encoding Standard's big5 encoder can produce output that glibc thinks is valid Big5-HKSCS but not valid Big5

[06:07:21.0000] <hsivonen>
annevk: we probably don't care, but still interesting considering that the Encoding Standard is trying to be conservative on the encoder side

[06:07:57.0000] <annevk>
hsivonen: foolip basically designed that encoding; I suspect that he wanted to be mostly conservative, but also not make it too hard on himself

[06:08:11.0000] <annevk>
hsivonen: or effectively, require two tables

[06:08:58.0000] <hsivonen>
let's avoid two tables

[06:10:15.0000] <smaug>
(ah, right, the weird blink case was something about hit testing and when to dispatch click. So, not really about this case)

[07:39:39.0000] <gsnedders>
how does "Add links to tests from requirements (beta)" work?

[07:45:36.0000] <Ms2ger>
In XHR?

[07:45:40.0000] <Ms2ger>
xpath in the tests

[07:46:32.0000] <gsnedders>
ewwww

[07:47:26.0000] <gsnedders>
it just looks /so/ fragile

[07:47:37.0000] <gsnedders>
ids would be so much better :\

[07:47:48.0000] <gsnedders>
maybe I've been in CSS-land too long thinking that it's better

[07:52:34.0000] <annevk>
gsnedders: if you get stable IDs

[07:59:57.0000] <gsnedders>
annevk: sure, but IDs are more likely stable than '"following::dfn[2] following::dfn[3] following::dfn[4] following::dfn[5] following::dfn[6]'

[08:00:10.0000] <gsnedders>
annevk: and it's far easier to make IDs stable

[08:00:32.0000] <annevk>
gsnedders: I'm agreeing with you

[08:01:05.0000] <annevk>
gsnedders: does require adding IDs to places and making them discoverable (inspect element is not liked)

[08:01:05.0000] <gsnedders>
oh, ok :)

[08:01:34.0000] <gsnedders>
well even with inspect element it's more discoverable than the current XPath paths

[08:01:46.0000] <annevk>
That's prolly the main difficulty, bz is asking for a lot more (discoverable) IDs in HTML too

[08:02:19.0000] <annevk>
We could prolly do some through Wattsi, once someone starts hacking on it more seriously, but not sure about per-paragraph and keeping those stable

[08:08:51.0000] <gsnedders>
what's the motivation to stick with wattsi for HTML when nothing else is using it? just the time/effort taken to move away?

[08:09:49.0000] <annevk>
gsnedders: yeah, and likely speed of alternatives

[08:13:49.0000] <jgraham>
Rewrite bikeshed in Rust, obviously

[08:29:52.0000] <nox>
jgraham: You have 2 hours.

[08:35:09.0000] <jgraham>
nox: As fun as that sounds instead I have to work on javascript angular crap

[08:35:23.0000] <nox>
jgraham: Heh.

[08:38:05.0000] <gsnedders>
jgraham: Angular? That's so 2015.

[08:38:23.0000] <jgraham>
gsnedders: Well 2014 in this case I think

[08:38:41.0000] <jgraham>
There seems to be a drive to put some React in our angular

[08:38:44.0000] <gsnedders>
jgraham: you haven't redone the website in *two years*?! WTF. How do you still have customers?

[08:38:48.0000] <jgraham>
For maximum buzzword compliance

[08:38:59.0000] <gsnedders>
jgraham: And I mean you're never going to get VC funding with such an outdated tech stack

[08:38:59.0000] <jgraham>
gsnedders: "captive audience"

[08:39:12.0000] <jgraham>
No VC funding you say?

[08:39:14.0000] <jgraham>
Excellent

[08:39:21.0000] <jgraham>
Fuck that

[08:40:52.0000] <gsnedders>
Don't you care about your valuation!?

[09:06:44.0000] <TabAtkins>
Domenic: https://drafts.csswg.org/css-forms/

[09:07:42.0000] <Domenic>
that was it, thanks!

[09:10:48.0000] <TabAtkins>
gsnedders: Yeah, tho I've recently done some major perf-hacking on HTML-using-Bikeshed, it still takes almost a full minute on my high-powered workstation.

[09:11:34.0000] <TabAtkins>
(Almost all of the time is spent in the initial HTML parse, the final HTML serialization, and evaluating selectors between those two, in roughly equal amounts.)

[09:39:06.0000] <gsnedders>
In Fx/Ch land, does a single build go from Beta -> Stable, or does it have a different version number?

[09:43:03.0000] <annevk>
Not a single build all the way through, but same major version

[09:43:28.0000] <gsnedders>
yeah, I just mean the final move from beta to stable?

[09:43:48.0000] <gsnedders>
or is there no RC-phase where you have essentially the final build in its final config before it lands on stable?

[09:47:43.0000] <annevk>
gsnedders: I think we still land stuff post beta and RC is at the end of stable

[09:48:04.0000] <annevk>
gsnedders: have not really looked into this much though

[09:48:50.0000] <gsnedders>
annevk: I mean really what I want to know is can I take a version number (from the UA string) and tell what channel it's on?

[09:50:53.0000] <annevk>
gsnedders: oh, dunno, maybe

[10:31:22.0000] <annevk>
hsivonen: you'll enjoy reading through https://github.com/whatwg/html/commit/76f88a4015d55273749c34238d250b7bdb1aff62

[10:32:20.0000] <annevk>
(prolly most people here would, but, you know, hsivonen wrote a whole thing about it back in the day: https://hsivonen.fi/vendor-prefixes/ )

[10:41:10.0000] <Domenic>
annevk: wait so is trusted the default?

[10:41:34.0000] <Domenic>
ah i see it is in DOM

[10:41:53.0000] <Domenic>
HTML just doesn't re-state that.

[11:40:57.0000] <annevk>
Domenic: default for spec-dispatched stuff

[11:41:33.0000] <annevk>
Domenic: click(), maybe reset(), are exceptions

[11:41:52.0000] <annevk>
Domenic: hopefully all clear soonish

[11:55:40.0000] <annevk>
Domenic: I was thinking of also defining a special "create" for event classes for specs, that would give them a trusted variant

[11:56:04.0000] <annevk>
Domenic: but click stuff first

[13:02:29.0000] <Savago>
Good morning (UGT: Universal Greeting Time). 2 questions: is there a place used to track compatibility issues between browsers (like https://github.com/whatwg/compat)? Can anyone open issues there?

[13:14:56.0000] <astearns>
Savago: not exactly what you're asking for, but try https://browser-issue-tracker-search.appspot.com/

[13:15:47.0000] <Domenic>
Savago: there is some repo that the Edge and Mozilla folks use a lot to report specific websites that fail due to cross-browser compat problems... I think I've seen paul_irish using it too. Can't remember what it was called...

[13:16:37.0000] <Savago>
astearns, that is a pretty handy site. Thanks. :-)


2016-10-13
[00:10:37.0000] <annevk>
rniwa: could you comment on https://github.com/whatwg/dom/pull/336 please?

[00:31:38.0000] <KiChjang>
oh, this is interesting

[00:31:57.0000] <KiChjang>
i always thought react's virtual DOM is something that they use on the standards

[00:32:50.0000] <KiChjang>
which brings up a question: should web standards support this virtual DOM concept in some way?

[00:33:59.0000] <annevk>
KiChjang: some parts of it might make sense to standardize

[00:34:22.0000] <annevk>
KiChjang: e.g., the patch format: https://github.com/whatwg/dom/issues/270

[00:34:29.0000] <KiChjang>
yeah, that's what i was thinking

[00:34:36.0000] <KiChjang>
the diff thing is quite intriguing

[05:49:07.0000] <annevk>
jgraham_: you need async_test even when the events are sync, right?

[05:50:19.0000] <jgraham_>
annevk: You need async_test when the js stack is reset (whatever the word is), approximately

[05:50:43.0000] <annevk>
it's not reset really, it's just nesting

[05:51:18.0000] <annevk>
but I'm gonna take that as a yes

[05:52:09.0000] <jgraham>
I guess a more precise answer is whenever you want to assert somewhere that won't allow the stack to unwind up to the test() function

[05:52:21.0000] <jgraham>
when an exception is thrown

[05:53:12.0000] <annevk>
right, whenever "report an exception" is used, that makes sense

[06:00:02.0000] <annevk>
ta

[06:07:25.0000] <Domenic>
aghh no rniwa and no botie

[06:09:24.0000] <MikeSmith>
Domenic: hang on will get botie back

[06:10:38.0000] <MikeSmith>
voila

[06:33:09.0000] <Domenic>
\o/

[06:33:41.0000] <Domenic>
botie: tell rniwa did you see my response to https://github.com/w3c/DOM-Parsing/issues/22 ? I'm not sure I got it right and would love your thoughts.

[06:33:41.0000] <botie>
will do

[06:50:05.0000] <Ms2ger>
Is Path2D intentionally still exposed in workers?

[06:54:29.0000] <Domenic>
Probably, given OffscreenCanvas

[06:55:22.0000] <annevk>
I think at the moment it's probably a mistake

[06:55:50.0000] <annevk>
Ms2ger: might be a good question for the OffscreenCanvas patch

[06:56:06.0000] <Domenic>
Yeah I guess maybe it should have been un-exposed during the interim between CanvasProxy and OffscreenCanvas

[06:56:27.0000] <annevk>
CanvasPath is also exposed

[06:57:06.0000] <annevk>
<canvas> IDL would really benefit from mixin annotation

[06:57:19.0000] <annevk>
NoInterfaceObject mess it has today is rather sad

[06:58:37.0000] <Domenic>
I'm a little worried that ES might end up defining mixins differently

[06:58:48.0000] <Domenic>
There's a pattern Dart and Ruby use where mixins create a class hierarchy

[06:59:17.0000] <Domenic>
And if Web IDL uses "mixin" as a word and then later ES uses it for something different, that's not great.

[06:59:28.0000] <Domenic>
On the other hand ES might be constrained since "mixin" is not a keyword currently

[06:59:38.0000] <Domenic>
It might have to use e.g. "mixin class" or something.

[06:59:57.0000] <Domenic>
Alternately Web IDL could use a more esoteric word

[06:59:59.0000] <annevk>
I'm happy to use a different word in IDL

[07:00:09.0000] <Ms2ger>
Maybe ES should look at the DOM in some other way than "our stuff should be as far removed from that as possible", just this once

[07:00:36.0000] <annevk>
IDL could call them "addon"

[07:01:49.0000] <annevk>
Ms2ger: what we have isn't really a language feature or exposed in any way

[07:02:10.0000] <annevk>
Ms2ger: so if they see value in some kind of mixin that is exposed in some way they should feel free to innovate a little bit there I think

[07:02:32.0000] <annevk>
Ms2ger: what we have is rather magical too in that it adds both public and private state to a class

[07:03:14.0000] <Domenic>
Yeah the thing is it's already easy to do the IDL/DOM pattern in ES (modulo magic private state business)

[07:03:23.0000] <Domenic>
Object.assign(X.prototype, Y.prototype)

[07:03:26.0000] <Domenic>
basically

[07:03:27.0000] <annevk>
internal slots \o/

[07:03:29.0000] <Domenic>
No need for a syntactic pattern

[07:03:51.0000] <Domenic>
So if ES is going to have a first-class pattern with syntax, it'd do something more useful than that

[07:04:07.0000] <Domenic>
And Ruby and Dart and others (apparently both are based on an academic paper) have shown one path that people like

[07:04:34.0000] <annevk>
I've been using mixin in prose here and there, but that's easily fixed

[07:06:49.0000] <Domenic>
Yeah it's a good word, I'm kind of loathe to lose it

[07:07:06.0000] <Domenic>
Might be worth having a small discussion at next TC39 about whether they see a potential keyword conflict in the future

[07:07:17.0000] <Domenic>
If ES has "mixin classes" and IDL has "mixins" that'd work OK for me

[07:22:23.0000] <jgraham>
I don't suppose there's some way to just get a tarball of chrom[e|ium] e.g. canary is there?

[07:22:41.0000] <jgraham>
Rather than a deb or whatever

[07:26:25.0000] <MikeSmith>
jgraham: http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html maybe

[07:26:38.0000] <MikeSmith>
though you have to wait for it load, and it loads slow

[07:26:49.0000] <MikeSmith>
http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/

[07:27:20.0000] <MikeSmith>
and you have to scroll to the bottom and the scroll control is conveniently a disappearing one

[07:29:23.0000] <jgraham>
OK, that seems like a thing to experiment with

[07:29:24.0000] <jgraham>
Thanks

[07:30:15.0000] <MikeSmith>
http://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/425016/ seems to be the current latest

[07:32:11.0000] <MikeSmith>
jgraham: it seems the only way to know what subdir/path to get it from is to look in https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2FLAST_CHANGE?generation=1476368813774000&alt=media

[07:36:46.0000] <annevk>
jgraham: https://github.com/w3c/web-platform-tests/pull/1381#issuecomment-222450124

[07:37:48.0000] <jgraham>
annevk: sure, put it somewhere obvious maybe with a README

[07:38:26.0000] <annevk>
jgraham: you mean the current place is no good?

[07:38:32.0000] <annevk>
jgraham: I can add a comment at the top

[07:41:50.0000] <annevk>
/me adds a comment at the top

[07:41:54.0000] <jgraham>
annevk: I guess with a comment I don't have a strong opinion

[07:42:42.0000] <annevk>
almost nearing 2 years that PR

[07:42:45.0000] <annevk>
about time it lands

[10:18:22.0000] <annevk>
wanderview: I think you might be missing that sendBeacon() doesn't take Request objects, but maybe I'm missing something obvious

[10:18:49.0000] <wanderview>
annevk: ok... why are we exposing a keepalive attr on Request then?

[10:19:10.0000] <annevk>
wanderview: so you can do sendBeacon()-like things with fetch() and more?

[10:19:38.0000] <annevk>
wanderview: it's a more powerful replacement, effectively

[10:20:04.0000] <wanderview>
annevk: ok, back up... does "keepalive" mean keeping the Request object alive beyond the JS context?  thats what the title of the PR and spec text changes imply

[10:20:23.0000] <annevk>
wanderview: it means keeping the fetch alive, sure

[10:20:44.0000] <annevk>
wanderview: can't really keep the object around that long if its environment is gone out of the window

[10:20:53.0000] <wanderview>
annevk: what is "the fetch"?  the PR references "Request"... capital R implies the JS object to me

[10:21:46.0000] <annevk>
wanderview: I wouldn't pay attention to the title of the PR

[10:21:50.0000] <wanderview>
annevk: is this really saying don't cancel a fetch when the document goes away?

[10:21:55.0000] <annevk>
wanderview: yes

[10:24:06.0000] <wanderview>
annevk: well, the spec text in the PR also says "This can be used to allow the request to outlive the environment settings object"... which doesn't necessarily mean an ongoing fetch operation... but ok

[10:24:51.0000] <annevk>
wanderview: we could clarify the non-normative text, prolly best to open a new issue for that

[10:25:29.0000] <annevk>
wanderview: though it's also about requests of course, that's one part of a fetch

[10:26:02.0000] <wanderview>
I think tying the cancelation of the operation to the life of the request object is confusing to me

[10:26:15.0000] <wanderview>
and probably what I missed here

[10:26:56.0000] <annevk>
wanderview: the Request object isn't really involved with that, but the request is to some extent

[10:27:30.0000] <annevk>
wanderview: keepalive on Request is just some input  for the eventual request

[10:30:01.0000] <wanderview>
ok, thanks

[10:32:57.0000] <JakeA>
If I'm inserting some JSON.stringified text into a <script>, is there anything else I need to escape, other than </script>?

[10:57:49.0000] <TabAtkins>
JakeA: Jake are you building pages via string concatenation again? Your mother and I raised you better than that, use a real DOM please.

[10:58:05.0000] <JakeA>
:D

[10:58:53.0000] <JakeA>
TabAtkins: I'm wanting to embed some JSON from the server for the JS to pick up when it runs

[10:59:14.0000] <JakeA>
might be safest to stick it in a data-attribute, since HTML escaping is covered

[10:59:38.0000] <TabAtkins>
Yes.


2016-10-14
[20:32:02.0000] <MikeSmith>
about the GlobalSign cert screwup, does anybody have any idea what GlobalSign means by saying that “some browsers incorrectly inferred that the cross-signed root had revoked intermediates”?

[20:32:07.0000] <MikeSmith>
https://www.globalsign.com/en/customer-revocation-error/

[20:33:43.0000] <MikeSmith>
basically they seem to be blaming their problem on browsers not conforming to OCSP or CRL requirements

[20:34:26.0000] <MikeSmith>
but don’t browsers just rely on system CRL libraries to get revocation info?

[21:10:36.0000] <MikeSmith>
caitp: https://chromium.googlesource.com/v8/v8.git/+/canary/ChangeLog seems less useful than it could be

[21:12:18.0000] <caitp>
yeah, no disagreements here

[00:42:57.0000] <annevk>
Does anyone know if you can setup a Gmail filter for X-Autoreply?

[00:43:16.0000] <annevk>
Deleting out-of-office reminders automatically would be great

[00:43:27.0000] <annevk>
Also, I hope they never bring those to instant messaging

[01:10:02.0000] <Ms2ger>
annevk, I'm sorry, I can't reply to your message right now, try again later

[01:14:04.0000] <annevk>
Ms2ger: haha, badly configured out-of-office reminders on IRC would be the worst

[01:14:17.0000] <annevk>
Although, I guess, that's what happens on mailing lists too sometimes

[01:47:33.0000] <Ms2ger>
annevk, hey, I seem to be overlooking where a Response's type is supposed to be set

[01:48:28.0000] <Ms2ger>
Oh, main fetch 13.2?

[01:48:29.0000] <annevk>
Ms2ger: it's basically a result of filtering that it appears different to the outside world

[01:49:32.0000] <annevk>
Ms2ger: yeah, as a result of that step it changes

[01:49:42.0000] <Ms2ger>
Mhmm

[01:50:04.0000] <annevk>
Ms2ger: unless you poke at the internal response, but then all bets are off

[01:50:26.0000] <Ms2ger>
Going to stick my nose in some more code, thanks

[01:51:10.0000] <annevk>
(security bets, not defined bets)

[01:57:12.0000] <Ms2ger>
/me goes for the easy solution... File a bug, move on

[02:13:08.0000] <MikeSmith>
I asked about this over on w3c #testing but maybe others here might be able to enlighten me

[02:13:17.0000] <MikeSmith>
question: how can it be that the commits on a particular branch can be squashed and merged but not rebased and merged?

[02:13:26.0000] <MikeSmith>
and how from the command line in git do you squash without rebasing?

[02:13:44.0000] <MikeSmith>
the context is https://github.com/w3c/web-platform-tests/pull/3328 which (before it was closed) was showing green for “Squash and merge” but if I change the button thingey to be “Rebase and merge” it was telling me, “This branch cannot be rebased due to conflicts”

[02:39:39.0000] <hsivonen>
annevk: FWIW, it also seems that what the Encoding Standard outputs as EUC-KR is valid EUC-KR but not valid windows-949 according to glibc.

[02:39:45.0000] <hsivonen>
not that we care, but weird

[02:41:11.0000] <Ms2ger>
Speaking of encodings, apparently playstation memory card titles are (can be?) stored in some kind of shift-jis

[02:41:21.0000] <foolip>
annevk: here I am

[02:41:37.0000] <annevk>
🎉

[02:44:19.0000] <hsivonen>
maybe, just in case, I should take a look at what byte sequence exacly it is that glibc doesn't like

[02:50:28.0000] <hsivonen>
ah. glibc doesn't know the label windows-949

[02:50:48.0000] <hsivonen>
it knows cp949

[06:46:45.0000] <Domenic>
MikeSmith: I think that could occur if commit A changes things in a way that causes conflicts, and commit B removes the conflict

[06:47:06.0000] <Domenic>
MikeSmith: thus the squashed A+B has no conflicts, but applying A and B individually will cause conflicts when it tries to apply A

[06:47:46.0000] <Domenic>
an easy example is: A modifies something that has since changed in master, and B is a revert of A, so that the squased A+B is a no-op.

[06:49:57.0000] <MikeSmith>
ah

[06:50:31.0000] <MikeSmith>
yeah that sounds like it might have been the state of things with that particular PR

[06:51:04.0000] <MikeSmith>
one of the commits was a bokred branch merge with some massive number of commits

[06:52:10.0000] <MikeSmith>
I guess the right way to deal with that kind of situation is just to abandon the PR branch and start over

[06:52:32.0000] <MikeSmith>
which is what Brian Birtles ended up doing to un-bork it I think

[06:53:45.0000] <annevk>
MikeSmith: you could just fix the branch and force push...

[06:53:53.0000] <annevk>
"just"

[06:53:59.0000] <annevk>
(but it's doable)

[06:54:09.0000] <MikeSmith>
yeah Brian says he tried that

[06:54:19.0000] <MikeSmith>
multiple ways, but none of them worked

[06:54:27.0000] <MikeSmith>
tried locally

[06:56:29.0000] <MikeSmith>
anyway this is also why I am not super enthusiastic about granting push-to-master perms for wpt for more people

[06:56:58.0000] <MikeSmith>
I mean given the craxy stuff I see getting pushed to some PR branches

[07:00:24.0000] <annevk>
MikeSmith: fair

[07:00:48.0000] <annevk>
MikeSmith: maybe if enough people had write access some kind of labeling could be done

[07:01:09.0000] <annevk>
MikeSmith: and then those that do have master access just look for the "alldone" label and land that stuff

[07:01:39.0000] <MikeSmith>
yeah that is good approach

[07:01:52.0000] <annevk>
MikeSmith: or some kind of protocol that makes it clear something is ready to land per reviewer but cannot land due to lack of wide access

[07:02:13.0000] <MikeSmith>
yeah we need to do something a bit more systematic and consistent for wpt

[07:02:28.0000] <MikeSmith>
because right now some people get frustrated waiting

[07:03:22.0000] <MikeSmith>
both waiting for review (which sometimes for some specs they are likely to be waiting forever for unless they provide a reviewer themselves) and then also waiting for stuff to be merged

[07:57:16.0000] <annevk>
Domenic: patching all event callsites is super boring, I might have to spread this out a bit and hope I don't get bitten by merge conflicts

[08:03:54.0000] <Domenic>
annevk: works for me

[08:15:03.0000] <tobie>
MikeSmith: have you given the new GH review a look? https://help.github.com/articles/about-pull-request-reviews/#required-reviews

[08:15:44.0000] <tobie>
MikeSmith: "When required reviews are enabled, anyone with access to the repository can approve changes in a pull request. However, to merge your pull request you need someone who has write or admin permissions in the repository to approve your pull request's changes in their review."

[08:16:13.0000] <jgraham>
I don't think that really helps unless they also provide a dahsboard showing what's waiting on merge

[08:16:24.0000] <jgraham>
also the review tools are "not great"

[08:26:54.0000] <tobie>
jgraham: yeah, I'm puzzled by a bunch of things with them at present.

[09:04:32.0000] <tobie>
jyasskin: I don't know what went wrong with https://github.com/heycam/webidl/pull/180, but it's super hard to figure out what got handled and what didn't. (Trying to recap what's left to do here so we can land this.)

[09:07:35.0000] <jyasskin>
tobie: Threading only works when you comment on a particular line, but bz never did that.

[09:10:24.0000] <tobie>
jyasskin: yeah, but that doesn't seem to be the only issue. Usually comments are hidden when they're addressed by a commit. Doesn't seem the case here.

[09:11:04.0000] <jyasskin>
They seem not to be hidden even when they were addressed.

[09:11:37.0000] <jyasskin>
tobie: Look for "reviewed" comments.

[09:14:53.0000] <jyasskin>
In the past, the thing that hid comments was when the line they were on changed. Now, it looks like "reviews" never hide. Which helps smaug's complaints but broke your workflow.

[09:15:49.0000] <jyasskin>
tobie: Also note that https://github.com/heycam/webidl/pull/183 will make #180 simpler.

[09:22:06.0000] <tobie>
jyasskin: yup.

[09:23:38.0000] <tobie>
jyasskin: have you addressed all of the points in: https://github.com/heycam/webidl/pull/180#issuecomment-250836913 ?

[09:24:41.0000] <tobie>
jyasskin: what about https://github.com/heycam/webidl/pull/180#discussion_r81793858 and https://github.com/heycam/webidl/pull/180#discussion_r81966920 (I think yes)

[09:29:17.0000] <tobie>
jyasskin: trying to recap thing s here: https://github.com/heycam/webidl/pull/180#issuecomment-253851644

[09:46:41.0000] <jyasskin>
tobie: I omitted the HasOwnProperty() check like bz suggested.

[09:48:42.0000] <jyasskin>
tobie: Your recap looks good. I pretty strongly prefer handling half-open dictionaries in a separate PR.

[09:49:13.0000] <jyasskin>
Especially since I'm going to vanish for parental leave soon, so I won't be able to respond to reviews.

[09:57:12.0000] <tobie>
jyasskin: oh, wow, congrats!

[09:57:26.0000] <jyasskin>
tobie: Thanks. :)

[09:58:05.0000] <tobie>
jyasskin: can you give me access to push to you branch if you disappear overnight?

[09:58:26.0000] <jyasskin>
tobie: "Allow edits from maintainers." is checked, so you should have that access.

[09:58:46.0000] <tobie>
jyasskin: right, I thought you had done that but was unsure how to verify it.

[09:58:56.0000] <jyasskin>
I don't know either. :)

[09:59:15.0000] <tobie>
This GH thing needs some UX love

[09:59:46.0000] <tobie>
When are you leaving?

[10:00:43.0000] <tobie>
Or is this pending actual childbirth?

[10:18:20.0000] <Domenic>
annevk: do you have some easy method for pushing to other people's remotes? Or do you just do the git remote add ...

[10:19:56.0000] <KiChjang>
Domenic, git push local:remote seems to be the only way

[10:19:56.0000] <annevk>
Domenic: yeah, I clone

[10:20:31.0000] <annevk>
Domenic: I wish they had automated that some more or made it a magic branch or some such

[10:20:37.0000] <Domenic>
yeah magic branches would be nice

[10:20:38.0000] <KiChjang>
i mean git push remote local_branch:remote_branch

[10:20:52.0000] <KiChjang>
hub may have some magic stuff

[10:21:01.0000] <Domenic>
Oh interesting you just put the remote URL in directly KiChjang?

[10:21:18.0000] <Domenic>
I am thinking a small wrapper shell function that lets me put their GH username instead of their full remote URL would be nice

[10:21:19.0000] <KiChjang>
Domenic, no, i think you still need to add it as a remote?

[10:21:26.0000] <KiChjang>
i haven't tried that before

[10:23:10.0000] <Domenic>
Ah OK

[10:35:09.0000] <tobie>
Domenic: I end up adding folks as remote.

[10:35:40.0000] <smaug>
annevk: sorry, I'm a bit behind some spec-issue needinfos

[10:35:59.0000] <annevk>
smaug: I figured you were busy

[10:36:01.0000] <smaug>
I'll try to get to those early next week at latest

[10:47:25.0000] <annevk>
Domenic: so one worry I have with this "minor/major" cleanup is that I'm now on the hook for cleaning up 150 "fire a simple event" callsites too

[10:47:46.0000] <annevk>
Domenic: I guess I'll clean up stuff that does bubble/cancelable wrong

[10:48:15.0000] <Domenic>
annevk: yeah my main concern was cleaning up bubbles/cancelable/trusted all at once. But as I said it's fine to split it up and just leave the cleanup open.

[10:48:23.0000] <Domenic>
The normative changes are definitely more important.

[10:48:46.0000] <Domenic>
I am hoping that Ctrl+Fing for "does not bubble" and "is not cancelable" returns 0 results basically.

[11:24:52.0000] <Domenic>
Oh I see you're killing "fire a simple event" in favor of just defaulting in "fire an event"

[11:25:05.0000] <Domenic>
That is a nice cleanup and also a lot of work ^_^

[11:27:01.0000] <KiChjang>
oh wow, time to make lots of updates

[11:27:20.0000] <KiChjang>
i kinda liked the simple event because it doesn't require that many parameters

[11:27:59.0000] <KiChjang>
i guess we can still keep it as an internal optimization in the browser, it just doesn't need to be in the spec

[11:29:45.0000] <smaug>
foolip: do you have telemetry data about window.open(, 'noopener') ?

[11:34:11.0000] <jyasskin>
tobie: Pending actual childbirth, so no idea. Probably within 2 weeks.

[11:35:28.0000] <Domenic>
KiChjang: yeah the difference is now "fire an event" also requires only one parameter

[11:35:55.0000] <KiChjang>
Domenic, huh? so there's no option of selecting whether an event bubbles or cancelable?

[11:36:14.0000] <Domenic>
KiChjang: there's an option, but it's not required.

[11:37:19.0000] <KiChjang>
hmm... would like to see how the text reads

[11:38:54.0000] <Domenic>
annevk: looks like master of DOM is not being pushed to dom.spec.whatwg.org??

[11:39:23.0000] <Domenic>
anyway KiChjang see the examples at the bottom of https://rawgit.com/whatwg/dom/master/dom.html#firing-events

[11:39:59.0000] <Domenic>
I guess it omits the simplest possible example which is "fire an event named `change` at _target_"

[11:40:47.0000] <annevk>
Domenic: fixed manually

[11:41:41.0000] <foolip>
smaug: had a look, can't find anything, just for window.open() itself and when the third argument is non-empty:

[11:41:57.0000] <foolip>
https://www.chromestatus.com/metrics/feature/timeline/popularity/475

[11:42:05.0000] <foolip>
https://www.chromestatus.com/metrics/feature/timeline/popularity/476

[11:43:13.0000] <smaug>
foolip: it is just that noopener seems to be rather odd feature, since it forces window to be opened in a new window. (bz noticed)

[11:43:42.0000] <Domenic>
Yeah he just filed the issue

[11:44:00.0000] <Domenic>
(Although when you put it that way... window.open() forces a new window to open!?! NO WAI)

[11:44:25.0000] <smaug>
heh

[11:44:33.0000] <smaug>
well, normally it opens a new tab

[11:46:28.0000] <KiChjang>
Domenic, does the eventConstructor contain fields that tell the algorithm to set the event's bubbling or cancelable attributes to true?

[11:46:44.0000] <KiChjang>
the text right now (especially step 4) is pretty vague

[12:10:54.0000] <Domenic>
KiChjang: see the examples. That's "a description of how IDL attributes are to be initialized"

[12:45:21.0000] <jyasskin>
Domenic: For the gesture/promise integration, I think I have time to add a metric for how many times we merge two gestures. Would that help you?

[12:45:42.0000] <jyasskin>
(https://docs.google.com/document/d/1csmMqHr60zded2tdjczr6HrL18iOPR1PlnM2FqCDLOQ/edit?usp=sharing)

[12:56:10.0000] <Domenic>
jyasskin: that does sound helpful, yeah!

[12:56:23.0000] <jyasskin>
Domenic: 'k, I'll cc you.

[13:43:42.0000] <jyasskin>
I wish ES used something other than a quotation mark to represent Lists. Unicode has plenty of brackets they could have chosen from.

[13:55:46.0000] <Domenic>
I mean these aren't necessarily ES lists

[13:55:51.0000] <Domenic>
We could use anything else

[13:59:00.0000] <jyasskin>
Domenic: I think I value consistent notation with ES over getting the right Unicode characters. Unless there a reason these *shouldn't* be Lists?

[13:59:32.0000] <Domenic>
I mean, it's not formally defined to be one, but I do think there might be value over time in consolidating Web IDL's types into ES's List and Record types

[14:00:32.0000] <jyasskin>
+1

[14:02:43.0000] <Domenic>
It is kind of interesting how both ES and Web IDL end up converging on a value space that is "ES types plus something for abstract vectors and something for abstract maps"

[14:08:43.0000] <jyasskin>
Lists and maps are the fundamental building blocks of programming. Look at Lisp.

[14:10:07.0000] <jyasskin>
WebIDL doesn't even really have the maps, since we have to operate on ES stuff that's fundamentally ordered so often.

[14:32:27.0000] <botie>
rniwa, at 2016-10-13 13:33 UTC, Domenic said: did you see my response to https://github.com/w3c/DOM-Parsing/issues/22 ? I'm not sure I got it right and would love your thoughts.


2016-10-15
[07:56:56.0000] <MikeSmith>
https://bugs.webkit.org/show_bug.cgi?id=162544#c1

[08:02:25.0000] <MikeSmith>
“implement whole DOM binding logic in JIT”

[09:07:12.0000] <nox>
Ain't that just like SpiderMonkey object slots?

[09:08:14.0000] <annevk>
No, see #content on Moz IRC some days ago

[09:14:21.0000] <caitp>
interesting idea

[09:14:58.0000] <nox>
annevk: Ok.

[09:16:48.0000] <nox>
annevk: Oh ok, the JIT in WebKit is now told "first child of a Node is stored at offset X of that Node"?

[09:17:57.0000] <annevk>
nox: I think they basically write custom JIT for "hot" members

[09:18:21.0000] <nox>
I see.

[09:19:42.0000] <annevk>
nox: bz wanted something more declarative if we were to follow

[09:20:15.0000] <nox>
annevk: Yeah it sounds so ad-hoc.

[09:33:48.0000] <Domenic>
https://developer.mozilla.org/en-US/docs/Web/Web_Components could use some major love :-/

[09:38:21.0000] <annevk>
Domenic: suspect that will sort itself out once v1 ships

[09:43:15.0000] <Domenic>
V1 shipped!

[10:04:50.0000] <annevk>
Domenic: I talked a bit with littledan__ about for-of-await today and event listeners

[10:05:02.0000] <annevk>
Domenic: did you consider event cancelation?

[10:11:29.0000] <Domenic>
annevk: not with for await of; events go better with observables since observables are sync

[10:12:11.0000] <annevk>
Domenic: okay, but that would mean you cannot for-of the incoming events

[10:13:09.0000] <Domenic>
Yeah, not if you want to cancel them. Anything with await in it is async and thus gives up the cancelation opportunity.

[10:13:54.0000] <annevk>
Hmm, they are so close though

[10:14:09.0000] <annevk>
But glad this was considered

[12:10:58.0000] <WubTheCaptain>
https://html.spec.whatwg.org/multipage/scripting.html#conversations

[12:11:00.0000] <WubTheCaptain>
Example 4:

[12:11:08.0000] <WubTheCaptain>
<p>Before the accident:

[12:11:10.0000] <WubTheCaptain>
<ul>

[12:11:12.0000] <WubTheCaptain>
 </li>I'm about to fly out, sorry!

[12:11:14.0000] <WubTheCaptain>
 </li>Sorry, I'm just waiting for flight clearance and then I'll be off!

[12:11:16.0000] <WubTheCaptain>
</ul>

[12:11:24.0000] <WubTheCaptain>
Someone probably meant to type <li> here

[12:11:56.0000] <WubTheCaptain>
Or their editor's auto-complete screwed up

[12:13:29.0000] <annevk>
Domenic: dominicc has a point, src=javascript will already have loaded about:blank

[12:13:41.0000] <Domenic>
annevk: that's not the test case under discussion

[12:13:56.0000] <Domenic>
annevk: we load a document, wait for it to finish loading, then do `iframe.src = "javascript:undefined"

[12:13:57.0000] <annevk>
Ok

[12:14:09.0000] <Domenic>
Per spec this does nothing (since navigation sees a 204 and cancels)

[12:14:26.0000] <Domenic>
Per WebKit/Blink this navigates a new empty document

[12:17:20.0000] <WubTheCaptain>
It seems like this error(?) with <li> has been there at least since 2013

[12:17:52.0000] <WubTheCaptain>
44c8b919 (Ian Hickson 2013-03-11 23:43:35 +0000 67402)   &lt;/li>I'm about to fly out, sorry!

[12:17:54.0000] <WubTheCaptain>
44c8b919 (Ian Hickson 2013-03-11 23:43:35 +0000 67403)   &lt;/li>Sorry, I'm just waiting for flight clearance and then I'll be off!

[12:18:03.0000] <WubTheCaptain>
I don't have the patience to find the original

[12:18:36.0000] <annevk>
WubTheCaptain: could you file an issue?

[12:19:08.0000] <WubTheCaptain>
annevk: I cannot.

[12:19:14.0000] <WubTheCaptain>
Hence, why I am here.

[12:19:29.0000] <WubTheCaptain>
I can create you a patch however

[12:19:53.0000] <annevk>
WubTheCaptain: no GitHub account?

[12:20:07.0000] <Domenic>
Does anyone remember any issues with tables of browser behavior? We might want to add something to copy and paste to contributing.md

[12:20:41.0000] <annevk>
WubTheCaptain: I can file one for you I suppose

[12:23:32.0000] <annevk>
WubTheCaptain: https://github.com/whatwg/html/issues/1907 thank you!

[12:26:29.0000] <annevk>
Domenic: I'm not sure what you mean

[12:26:40.0000] <Domenic>
annevk: https://github.com/whatwg/html/issues/1908

[12:27:55.0000] <WubTheCaptain>
annevk: [PATCH 1/1] Fix bogus closing li tags in conversation example https://paste.debian.net/plainh/de7eab43

[12:28:56.0000] <annevk>
Domenic: looks useful, though you can have things differ per version too

[12:29:38.0000] <Domenic>
Yeah, although in the common case you're comparing latest everything

[12:29:56.0000] <annevk>
WubTheCaptain: you okay with your name being added to the spec?

[12:30:09.0000] <WubTheCaptain>
annevk: Yes, and consider my contribution to be in the public domain.

[12:30:20.0000] <WubTheCaptain>
(It would be below the threshold of originality anyway.)

[12:30:30.0000] <annevk>
WubTheCaptain: ta


2016-10-16
[22:36:42.0000] <dominicc>
domenic: Setting the src navigates the iframe, surely? We don't know what javascript:... evaluates to in general without running it—see halting problem—and we usually shouldn't run arbitrary JavaScript in the existing document of the iframe—SOP. So I think setting src=javascript:undefined should navigate once. There is a kind of cancelled navigation

[22:36:42.0000] <dominicc>
there, the second one where undefined, not being a string, turns into 204. (How many times do Chrome et al navigate?)

[01:21:26.0000] <annevk>
dominicc: isn't cross-origin simply blocked?

[01:21:51.0000] <annevk>
dominicc: but I should prolly study this first before chiming in

[01:33:51.0000] <dominicc>
annevk: Yes, cross-origin is blocked. domenic: I need to understand what you think this should be changed to.

[01:35:26.0000] <annevk>
dominicc: FWIW, suspect he's asleep, but whatwg/html has a number of issues and Domenic added a PR around this I saw

[06:28:17.0000] <Domenic>
dominicc: did you see https://github.com/whatwg/html/issues/1896 ?

[06:29:26.0000] <Domenic>
Setting to javascript:undefined should navigate zero times. Or rather, it should invoke the navigation algorithm, which aborts early.

[06:29:47.0000] <Domenic>
In Chrome it aborts early for a href and location.href but not for iframe.src

[06:32:16.0000] <dominicc>
looking

[06:36:13.0000] <dominicc>
domenic: OK, read that. This is not really my area, but I think the spectrum of browser behavior/bugginess is even broader than your table, for example what happens when you assign location in a JavaScript link URL, etc.

[06:37:46.0000] <Domenic>
Hmm yeah it's possible there might be special cases for that that don't just fall under the existing ones.

[06:37:52.0000] <dominicc>
Domenic: When Boris says "a quick check suggests that at least Chrome and Safari seem to convert non-string values to the string "" and then proceed to load that as the response body" I think there's some missing qualifiers there, like <iframe src="javascript:document.write('hi');"> the iframe displays 'hi' and not whatever you get from loading an empty

[06:37:52.0000] <dominicc>
string response body. But maybe you two were talking about JavaScript URLs in links.

[06:39:01.0000] <dominicc>
domenic: re: special cases, for example this: https://bugzilla.mozilla.org/show_bug.cgi?id=1281375

[06:39:13.0000] <Domenic>
I see, yeah, I guess by the existing rules that would not work... Definitely worth testing.

[06:40:26.0000] <Domenic>
Thanks

[06:41:30.0000] <dominicc>
domenic: But I think the characterization that Blinks implementation is a bit whacky is fair. "navigation" is blurry.

[06:44:06.0000] <Domenic>
The web compat constraints are worrying though. Especially since they apparently take 12-18 weeks to discover :/


2016-10-17
[01:19:50.0000] <zcorpan>
hello y'all

[01:21:38.0000] <annevk>
morning zcorpan

[01:23:25.0000] <zcorpan>
did i miss anything interesting last week? :-)

[01:35:08.0000] <annevk>
zcorpan: we might almost be done with synthetic click events

[01:35:29.0000] <annevk>
zcorpan: but it hasn't landed yet, so I guess you didn't miss that

[01:38:30.0000] <zcorpan>
thanks, checking now

[02:57:37.0000] <MikeSmith>
https://github.com/w3c/push-api/issues/211 “ We sort of assume that the browser is at some point going to start enforcing origin isolation, but never really point out the place where that happens.”

[04:44:24.0000] <smaug>
annevk: I think https://github.com/whatwg/dom/pull/342 looks ok.  (I'm still  not too used to review spec changes though).

[04:44:39.0000] <smaug>
It is still a bit unclear to me why we need so much special casing there though.

[04:46:03.0000] <smaug>
I mean when (post) default handling for click isn't really different to other default handling events. It just happens with untrusted events too

[04:47:06.0000] <annevk>
smaug: per spec the handling of non-click events does not happen as part of dispatch

[04:47:13.0000] <smaug>
I know

[04:47:24.0000] <smaug>
and that is casing this special casing with click

[04:47:28.0000] <smaug>
causing

[04:47:36.0000] <smaug>
I think

[04:47:48.0000] <annevk>
Yeah

[05:50:05.0000] <annevk>
Domenic: changing the appcache stuff is feeling really pointless now

[05:50:14.0000] <annevk>
dominicc: all the default action stuff there is about showing UI

[05:50:27.0000] <annevk>
Domenic: something all UAs have removed I believe since it's rather bad

[06:23:32.0000] <annevk>
smaug: so did we decide that click() should set composed?

[06:23:37.0000] <annevk>
smaug: it apparently sets view as well

[06:24:14.0000] <smaug>
not sure if we decided, but I think it should be composed

[06:30:53.0000] <zcorpan>
JakeA: re http://logs.glob.uno/?c=freenode%23whatwg&s=13+Oct+2016&e=13+Oct+2016#c1007958 need to escape <!-- <script> also (or just any < )

[06:31:20.0000] <JakeA>
zcorpan: Cheers! That's what I'm doing now. It's also what the Ember people do

[06:41:23.0000] <zcorpan>
Domenic: re http://logs.glob.uno/?c=freenode%23whatwg&s=12+Oct+2016&e=12+Oct+2016#c1007866 , probably https://webcompat.com/

[08:46:55.0000] <tobie>
Merged jyasskin's open dictionaries (records).

[08:47:04.0000] <jyasskin>
tobie: \o/

[09:12:13.0000] <annevk>
Oooh cool

[09:12:51.0000] <annevk>
Now bikeshed / idlparser need patches and we can start fixing specs

[09:21:09.0000] <gsnedders>
nox: plz file a bug

[09:21:19.0000] <gsnedders>
nox: I have a fever and the odds of my doing anything right now are low :P

[09:28:46.0000] <nox>
gsnedders: Sure!

[09:42:41.0000] <jgraham>
I imagine that hallucinating gsnedders will be an awesome source of code

[09:52:15.0000] <gsnedders>
jgraham: …

[10:08:51.0000] <smaug>
iank___ write the worklet spec?

[10:09:33.0000] <smaug>
/me is trying to understand https://drafts.css-houdini.org/worklets/#dom-worklet-import 6.1.2 of that algorithm

[10:16:57.0000] <smaug>
oh, I see

[10:17:37.0000] <smaug>
this is one of the most complicated piece of spec I've seen for awhile... all this fetch taking a callback function in spec level text

[10:19:33.0000] <annevk>
Yeah, script loading is getting rather complicated

[10:20:09.0000] <annevk>
Maybe there's some way of refactoring it that we haven't thought about, but satisfying workers / shared workers / service workers / worklets is hard

[10:23:41.0000] <smaug>
annevk: but the idea with 'Fetch a module script tree' is that module will be loaded and any dependencies and each fetch will use the callback provided by the caller?

[10:24:33.0000] <annevk>
smaug: think so, Domenic would know for sure

[10:46:32.0000] <Domenic>
smaug: annevk: yep, that's the idea. The callback is optional; there is a reasonable default. But worklets need to maintain their own cache thingy.

[11:15:50.0000] <smaug>
Domenic: why do they need to have their own cache?

[11:19:42.0000] <Domenic>
smaug: I don't remember, but it seemed plausible at the time. iank___ will know. I guess a non-normative note in the spec explaining would be good.

[11:20:06.0000] <Domenic>
Hmm I guess it's kind of outlined in https://drafts.css-houdini.org/worklets/#module-responses-map

[11:20:20.0000] <Domenic>
Without it the modules would be reloaded every time a worklet is re-instantiated

[12:04:22.0000] <annevk>
Domenic: very similar to service workers in that respect

[12:11:47.0000] <Domenic>
Hmm I wonder if we could let them bring their own module map

[12:11:51.0000] <Domenic>
Well, hmm, we kind of already do

[12:12:00.0000] <Domenic>
If their settings object specifies a shared module map, they'd be good to go

[12:17:48.0000] <Domenic>
Filed https://github.com/w3c/css-houdini-drafts/issues/324

[12:18:56.0000] <Domenic>
service workers actually require the hook, e.g. to set the skip service worker flag, redirect mode to error, and so on.

[13:01:33.0000] <jdalton>
for fetching urls that redirect (say site.com/docs/ which 302 redirects to site.com/docs/v1.2.3) the fetch will by default follow but that means the page that loads is site.com/docs/ and it doesn't redirect to site.com/docs/v2.1.3) if I set the fetch to "manual" I can't see where the request was redirected to so I can't replace it with a Response.redirect(). Is there a way to have a fetch redirect without getting the full redirected response (comparing

[13:01:33.0000] <jdalton>
 the uri to fetch vs the response.url and then replacing with a redirect) ?

[13:48:53.0000] <rodneyrehm>
hey there! is there any sensible way to figure out who added a particular section the the spec, since blame via github isn't really an option?

[13:50:31.0000] <jyasskin>
Command-line blame?

[13:51:16.0000] <rodneyrehm>
sure, but that would require cloning the repo

[13:51:55.0000] <rodneyrehm>
particularly I'm looking for insight on https://html.spec.whatwg.org/multipage/interaction.html#focusing-steps - namely if <body> is considered a focusable area

[14:01:37.0000] <iank___>
Domenic & smaug the basic idea is that a user agent can create and destroy worklet global scopes at any time.  But when we do so we want them to be "consistent" with the other contexts. I.e. they have had exactly the same script run in them.

[14:02:06.0000] <smaug>
iank___: and the stays alive forever?

[14:02:10.0000] <smaug>
cache

[14:02:14.0000] <smaug>
the cache

[14:02:42.0000] <iank___>
for the lifetime of the page at least.

[14:03:23.0000] <iank___>
you only really need it if you are planning on killing the contexts or creating new ones at some arbitrary point.

[14:03:28.0000] <darobin>
rodneyrehm: just clone the repo man, it's a great excuse to go do something else while git is churning :)

[14:04:27.0000] <TabAtkins>
It doesn't even take that long, really. ^_^

[14:04:47.0000] <rodneyrehm>
darobin: cloning at 29% ~70KBit/s (Hotel WiFi), while watching Madam Secretary ;)

[14:05:25.0000] <darobin>
TabAtkins: it can if your network isn't all that great

[14:05:28.0000] <darobin>
rodneyrehm: enjoy!

[14:05:39.0000] <TabAtkins>
Yeah, 70kbps is, uh, not exactly great.

[14:08:22.0000] <rodneyrehm>
the only thing missing here is modem dial-up sounds ;)

[14:14:52.0000] <Domenic>
did you do a shallow clone? That helps a lot.

[14:16:17.0000] <rodneyrehm>
unless that's the default, no. googling shallow clone now ;)

[14:16:28.0000] <jgraham>
Not for blame though?

[14:16:40.0000] <jgraham>
Unless git caches that information in some way I am unaware of

[14:17:22.0000] <Domenic>
oh right lol

[14:17:27.0000] <Domenic>
that would in fact defeat the purpose

[14:17:52.0000] <rodneyrehm>
good to know `--depth 1` anyway :)

[15:05:25.0000] <rodneyrehm>
ok, so that probably could've gone quicker… https://github.com/whatwg/html/commit/f96b1997 is the commit I was looking for

[15:17:47.0000] <Domenic>
but now you're equipped for future spelunking!

[15:34:26.0000] <Domenic>
terinjokes: \o/

[15:34:58.0000] <Domenic>
your original whatwg/console issue #3 to make web developers lives better has now almost-fully percolated into the ecosystem :D. Only Edge is the holdout.

[15:45:24.0000] <terinjokes>
\o/

[15:48:30.0000] <Domenic>
TabAtkins: does this index seem correct to you? The duplicate (data), (data...) seems strange to me... https://console.spec.whatwg.org/#index-defined-here

[15:50:24.0000] <TabAtkins>
I think something about the "...data" is confusing it.

[15:51:15.0000] <TabAtkins>
That's not a valid signature, so something's going a little bit wonky and generating two `lt` values, one with "data..." and one with "data". Dunno what the first is about.

[15:53:11.0000] <TabAtkins>
In the middle of some complex edits, so will load that up in a bit; please file an issue so I don't forget.

[15:55:24.0000] <Domenic>
OK cool

[16:00:11.0000] <Domenic>
TabAtkins: I forgot how to make a <h4> that is also a definition. <h4 id="clear" method for="console">clear()</h4> isn't working. Halp?

[16:02:09.0000] <jyasskin>
Domenic: dfn-type

[16:02:33.0000] <jyasskin>
I mean, you probably have to use dfn-type="method" instead of just method.

[16:03:25.0000] <Domenic>
that did it; thanks!

[16:03:54.0000] <TabAtkins>
You really shouldn't have to do that, tho - I'm staring at that code right now.

[16:04:36.0000] <TabAtkins>
It explicitly looks for <dfn> or <hN>, then checks them for attributes with the dfn-type names, and sets data-dfn-type appropriately.

[16:04:59.0000] <TabAtkins>
Domenic: What's the outerHTML you get from the earlier code?

[16:05:51.0000] <Domenic>
TabAtkins: outerHTML looks correct, but the Web IDL autolinker couldn't find it

[16:06:10.0000] <Domenic>
Wait, no, it can

[16:06:18.0000] <Domenic>
I must have messed something else up

[16:06:29.0000] <TabAtkins>
Heh, kk, phew.

[16:41:11.0000] <TabAtkins>
Domenic, annevk: I just pushed what *should* just be an internal rename, affecting only internal stuff and error messages, but if you suddenly get link failures or new messages about statuses, let me know.

[16:41:36.0000] <TabAtkins>
(I switched internal terminology from referring to specs/links as "ED" or "TR" to instead be "current" and "snapshot".)

[16:43:21.0000] <Domenic>
Good to know!

[16:43:44.0000] <TabAtkins>
No tests changed, so fingers crossed that nothing changes in production either.

[16:48:06.0000] <Domenic>
That's the dream :D

[16:50:52.0000] <TabAtkins>
Okay, now that that yak's shaved, time to figure out wtf I'm doing defaulting the requested ref status to the spec's status and not letting link-defaults override that. >_<

[16:54:55.0000] <Domenic>
this sounds relevant to my interests

[16:56:13.0000] <TabAtkins>
Probably not - you only work with current-status specs anyway. But it fucks with people trying to prefer a snapshot link while publishing a current spec.

[16:56:31.0000] <rniwa>
Domenic: fyi, there's another PR for custom elements testing: https://github.com/w3c/web-platform-tests/pull/3968

[16:56:37.0000] <TabAtkins>
But sure, I'm trying to untangle this spaghetti-code mess of an autolinker.

[16:56:48.0000] <TabAtkins>
So it'll eventually be relevant to your interests.

[16:56:58.0000] <Domenic>
TabAtkins: well I was hoping it would fix issues like https://github.com/tabatkins/bikeshed/issues/837

[16:57:14.0000] <TabAtkins>
Probably not!

[16:57:52.0000] <Domenic>
qq


2016-10-18
[22:27:33.0000] <annevk>
rniwa: hayato: are you both around?

[22:27:43.0000] <rniwa>
annevk: I'm around

[22:27:44.0000] <rniwa>
annevk: what's up?

[22:27:55.0000] <annevk>
rniwa: hayato: wondering if I should land the PR first with the isTrusted guard and then file a follow up to remove it or just remove it straight away

[22:28:19.0000] <rniwa>
annevk: yeah, I think that makes sense

[22:28:33.0000] <annevk>
rniwa: hayato: I was also wondering if we agreed that click() should be composed and if there's a bug on that

[22:28:42.0000] <rniwa>
annevk: yeah, I think I'm okay with that

[22:28:50.0000] <rniwa>
annevk: but that needs to be spec'ed somewhere

[22:28:55.0000] <annevk>
rniwa: hayato: I'm fixing all kinds of things around events so would be good to know

[22:28:57.0000] <rniwa>
annevk: probably in the HTML spec where we define click()?

[22:28:59.0000] <rniwa>
annevk: okay

[22:29:04.0000] <annevk>
rniwa: hayato: yeah, it would be in HTML

[22:29:28.0000] <annevk>
rniwa: hayato: contextmenu is another event btw we have to consider that is rather similar to click

[22:29:48.0000] <rniwa>
annevk: there is contextmenu() !?

[22:29:55.0000] <annevk>
rniwa: yeah

[22:30:04.0000] <annevk>
rniwa: without the parenthesis

[22:30:06.0000] <rniwa>
annevk: Wtf... i've never heard of this

[22:30:08.0000] <annevk>
rniwa: it's just an event

[22:30:12.0000] <rniwa>
annevk: oh just an event

[22:30:23.0000] <annevk>
rniwa: but it should probably be composed

[22:30:29.0000] <rniwa>
annevk: probably

[22:30:36.0000] <rniwa>
annevk: since that presuambly fires when a context menu is shown, right?

[22:30:42.0000] <annevk>
rniwa: yup

[22:30:54.0000] <rniwa>
annevk: btw, we really need the event processing model you were talking about: https://github.com/w3c/input-events/issues/42

[22:31:11.0000] <rniwa>
annevk: the entire input events spec is extremely vague and underspeced due to input events processing model not being defined

[22:31:27.0000] <annevk>
rniwa: yeah, I've been complaining for a long time now

[22:31:35.0000] <annevk>
rniwa: and before me Hixie_ was doing the complaining

[22:31:38.0000] <rniwa>
annevk: it might be that we just need a different spec

[22:31:46.0000] <rniwa>
annevk: like event processing model spec

[22:31:58.0000] <rniwa>
annevk: since we don't want to have another mega spec...

[22:32:00.0000] <annevk>
rniwa: I guess, if they're not going to address it someone else will start writing it

[22:32:05.0000] <rniwa>
annevk: yeah...

[22:32:20.0000] <annevk>
rniwa: HTML defines small bits of it currently, such as the contextmenu event

[22:32:24.0000] <annevk>
rniwa: it's super messy

[22:32:25.0000] <rniwa>
annevk: I mean, in terms of what's being spec'ed, ui events spec is pretty good

[22:32:58.0000] <rniwa>
annevk: but we probably need a separate spec that details how each keydown / mousedown / etc... end up causing bunch of side effects and trigger other events

[22:33:34.0000] <annevk>
rniwa: I think if you write that, and also define hit testing and such, you'll find that most of UI events can go away

[22:34:48.0000] <rniwa>
annevk: perhaps

[22:34:54.0000] <rniwa>
annevk: but ui events define properties, etc... pretty well

[22:35:01.0000] <rniwa>
annevk: so I think that's pretty good

[22:35:08.0000] <rniwa>
annevk: but yeah, hit testing is another thing that's not well defined...

[22:35:25.0000] <annevk>
rniwa: it doesn't really, those properties need to be initialized during the action that dispatches the event

[22:35:50.0000] <annevk>
rniwa: they are the result of input from the OS and the result of hit testing and such

[22:36:56.0000] <rniwa>
annevk: well, sure but I think the whole thing doesn't necessary needs to be defined in one place although it could be

[22:37:16.0000] <rniwa>
annevk: ui events is still a very valuable spec. but I do agree a lot more

[22:37:21.0000] <rniwa>
we need* a lot more

[22:37:33.0000] <annevk>
HTML4 was valuable too at some point

[22:37:40.0000] <annevk>
anyway :p

[22:41:25.0000] <rniwa>
annevk: btw, if you could review, I have two more PRs for custom elements: https://github.com/w3c/web-platform-tests/pulls?utf8=✓&q=is%3Apr%20is%3Aopen%20rniwa

[22:42:13.0000] <rniwa>
annevk: it looks like custom elements is almost done now.

[22:42:19.0000] <annevk>
I'll let Domenic/Dominic review

[22:42:27.0000] <annevk>
rniwa: yeah, it's pretty exciting

[22:42:32.0000] <rniwa>
annevk: it's kind of crazy how we keep finding more issues with shadow DOM

[22:42:44.0000] <rniwa>
annevk: it's like digging potatos

[22:42:50.0000] <annevk>
rniwa: it's a pretty big feature

[22:42:59.0000] <rniwa>
annevk: it is. but we've been working on this years.

[22:43:12.0000] <rniwa>
annevk: I would have thought we have figured the list of issues by now...

[22:43:41.0000] <annevk>
rniwa: I think we only started working on some of the integration bits in the last two years or so

[22:44:17.0000] <annevk>
rniwa: in part because the closed mode was never integrated/accepted until then

[22:44:59.0000] <annevk>
rniwa: and the monkey patches for various algorithms were not completely worked out yet

[22:49:44.0000] <rniwa>
annevk: that's a good point

[22:55:43.0000] <annevk>
rniwa: btw, is https://github.com/whatwg/html/pull/1196 something you'd implement in WebKit?

[22:55:53.0000] <annevk>
rniwa: I thought I saw you saying we needed that somewhere

[22:56:43.0000] <rniwa>
annevk: oh, that's for custom elements reporting exceptions

[22:56:54.0000] <rniwa>
annevk: I wasn't saying that we needed that API though

[22:57:02.0000] <rniwa>
annevk: I just just saying that we needed to spec that behavior

[00:45:09.0000] <JakeA>
I'm failing at basic searching. What was the proposal to allow resources to be cached across origins using a hash? I thought it was SRI but can't find a reference to cache-sharing.

[00:47:00.0000] <JakeA>
Ah, it is SRI, just not in the spec. https://github.com/w3c/webappsec-subresource-integrity/issues/22 & https://github.com/w3c/webappsec/issues/504

[01:16:47.0000] <mkwst>
JakeA: There was some non-normative text in an earlier version of the spec that got dropped. Brad wrote something up a few weeks ago that's probably worth skimming: https://hillbrad.github.io/sri-addressable-caching/sri-addressable-caching.html

[01:18:37.0000] <JakeA>
mkwst: cheers!

[01:40:48.0000] <annevk>
mkwst: maybe start using PRs?

[01:41:10.0000] <annevk>
mkwst: "nit picked up in next patch" is rather unclear

[01:41:32.0000] <annevk>
mkwst: esp if nothing has landed anywhere yet

[01:47:05.0000] <mkwst>
annevk: A PR would have been a better approach for this bug, you're right.

[01:47:39.0000] <mkwst>
annevk: In general, I find it hard to do anything useful with comments on specific commits.

[01:48:25.0000] <annevk>
mkwst: I usually file issues, but in this issue you asked for feedback on the commit

[01:56:44.0000] <mkwst>
annevk: I did. That was dumb. I'll PR questions next time.

[02:30:24.0000] <zcorpan>
i'd like for someone(TM) to add necessary tooling to enable coordinated shipping of breaking changes, for changes like https://github.com/whatwg/html/issues/944 or https://bugs.chromium.org/p/chromium/issues/detail?id=530342

[02:31:53.0000] <zcorpan>
any takers? :-)

[02:32:45.0000] <zcorpan>
the current situation of "yeah sure we can try to coordinate shipping" doesn't seem to work

[02:36:14.0000] <annevk>
zcorpan: I don't think that'll ever quite work due to shipping dates being different

[02:36:28.0000] <annevk>
zcorpan: and UAs getting different compat pain due to sniffing

[02:37:29.0000] <zcorpan>
annevk: shipping dates is more difficult for microsoft and apple but seems manageable between mozilla/google/opera

[02:39:02.0000] <zcorpan>
annevk: sniffing was not a problem for the innerHTML thing and doesn't seem like a problem for https://bugs.chromium.org/p/chromium/issues/detail?id=530342 either

[02:40:18.0000] <zcorpan>
note also that greg from microsoft is asking for coordinated shipping in that issue

[02:43:28.0000] <annevk>
He is?

[02:43:32.0000] <annevk>
/me didn't see that

[02:43:53.0000] <annevk>
Anyway, I guess if it can be made to work somehow...

[02:46:03.0000] <zcorpan>
doesn't have to be on the same day, but as close as possible so the vendor who ships first can say "yeah it breaks your site but it also breaks in Beta of all other browsers which will ship in a few weeks" instead of having to revert the change

[02:46:11.0000] <zcorpan>
hmm, maybe not in that issue but in https://lists.w3.org/Archives/Public/www-style/2016Apr/0345.html

[02:47:05.0000] <zcorpan>
https://lists.w3.org/Archives/Public/www-style/2015Sep/0076.html was the first message

[02:51:22.0000] <annevk>
Git question: one branch (1) with many commits post-master; I then branch off (2) from there; then master gets a single commit covering all those commits, perhaps with minor changes, can I then rebase 2 against master and only get my new commits?

[02:52:00.0000] <annevk>
I'd like to start working on the changes needed for synthetic click events in HTML, but they depend on major event cleanup landing first

[02:53:58.0000] <Ms2ger>
Yes, I think

[02:54:15.0000] <Ms2ger>
You may need to remove the old commits manually when doing rebase -i

[02:54:46.0000] <annevk>
That sounds reasonable

[02:56:04.0000] <jgraham>
Yeah, so it will work out that the rebased commits don't add any changes and skip them (non-interactive case) or complain at you and make you write git rebase --skip (interactive case)

[04:26:06.0000] <smaug>
foolip: do you happen to know what might happen with https://github.com/whatwg/html/issues/1882 ?

[04:27:53.0000] <foolip>
smaug: no, I pinged https://github.com/w3c/ServiceWorker/issues/989 though

[04:28:19.0000] <foolip>
smaug: I guess you'd prefer that it's just reverted?

[04:28:41.0000] <smaug>
yes, but there is now a patch for Gecko so I don't care too much

[04:28:48.0000] <smaug>
this may break pages in theory

[04:28:55.0000] <smaug>
and I see no reason for the spec change

[04:32:40.0000] <foolip>
smaug: In hindsight I agree, had I understood that ServiceWorkerMessageEvent exists and that there still can be no [SameObject] I hope I'd have seen it differently.

[04:33:17.0000] <foolip>
smaug: is bakulf the maintainer of this in Gecko?

[04:33:32.0000] <smaug>
he just happened to write the patch for this

[04:33:36.0000] <smaug>
which I just reviewed

[04:35:30.0000] <foolip>
smaug: I took https://github.com/whatwg/html/issues/1882#issuecomment-252685167 as some amount of enthusiasm from a Gecko dev, I guess asking for not just the test but also implementation change to be done before landing the spec change would have caused you to notice earlier.

[04:35:54.0000] <foolip>
Well, maybe, it'd probably have been WebKit first.

[04:36:46.0000] <smaug>
foolip: not sure bakulf really expressed opinion, but just technical comment

[04:36:46.0000] <annevk>
We should figure something out for SW imo, current duplication situation is not great

[04:36:48.0000] <smaug>
oh well

[04:37:22.0000] <smaug>
foolip: anyhow, I'm ok with either approach now, even though making this kind of useless changes feels wrong

[04:37:47.0000] <annevk>
I somewhat prefer not having null when it is meaningless, but I can see the argument for avoiding churn

[04:38:20.0000] <foolip>
smaug: we did have a 3/4 split and a recent 2/2 split, had it been nullable everywhere I don't think we'd have contemplated it

[04:56:57.0000] <littledan__>
to follow up on grapheme breaks: I asked Mark Davis, and he said that the definition of grapheme breaks is currently in some bit of flux when it comes to Indic scripts; he recommended including the locale in any new APIs for grapheme breaks as a future-proofing mechanism

[04:57:56.0000] <foolip>
I have no context here, but to include something in an API that currently does nothing makes it harder to feature detect when it starts doing something later.

[05:00:09.0000] <annevk>
littledan__: was that meant for a different channel?

[05:01:05.0000] <littledan__>
I think rniwa expressed this concern in this channel, that's why I mentioned it here

[05:01:17.0000] <annevk>
Oh, was it about <textarea>?

[05:01:31.0000] <littledan__>
no, this is a TC39 thing

[05:01:41.0000] <annevk>
I guess I also lack context 😊

[05:01:45.0000] <littledan__>
foolip: If behavior changes, it'll be due to locale data changing, which you shouldn't be trying to feature-detect for

[05:02:21.0000] <littledan__>
I am proposing that https://github.com/littledan/Segmenter handle grapheme breaks based on an object that takes a locale as a parameter

[05:02:41.0000] <littledan__>
anyway, I guess rniwa is not on here right now

[05:03:14.0000] <nox>
gsnedders: I brainfarted yesterday btw, was running older h5lib tests.

[05:03:18.0000] <foolip>
littledan__: I imagined something like someAPI({ locale: 'bla' }), where the locale member would truly have no effect until someone figures out something about Indic scripts. If not, please ignore me.

[05:03:56.0000] <littledan__>
foolip: It's like new Intl.Segmenter("en", { type: "grapheme" })

[05:04:14.0000] <littledan__>
you could pass undefined if you felt like it, but the argument may be used to determine some details about grapheme breaking

[05:05:32.0000] <littledan__>
that'll give you an object that'll let you find breaks in strings

[05:07:16.0000] <foolip>
littledan__: ok, I will go away now :)

[05:08:18.0000] <littledan__>
foolip: All these Intl things are really complex, and if you have ideas for how to make it more intuitive for users (which would be great, if we can get applications to use them to a greater extent) then I'm interested

[05:08:25.0000] <annevk>
littledan__: so grapheme clusters will require a locale to work properly going forward?

[05:08:56.0000] <annevk>
littledan__: it seems a little weird to "recommend" an argument to a function

[05:09:13.0000] <foolip>
littledan__: I have no idea, it was just the "future-proofing mechanism" that had me wonder if it was a bit of API that would initially do nothing in implementations

[05:09:22.0000] <littledan__>
annevk: ...possibly. It'll probably work well in the root locale most of them time, though.

[05:09:37.0000] <littledan__>
you definitely need a locale for all other kinds of breaks

[05:10:18.0000] <littledan__>
annevk: ECMA 402 has a consistent convention that, if you use undefined for the locale, then it's whatever locale the user agent selects

[05:10:50.0000] <annevk>
littledan__: ooh, hopefully that's the same as navigator.language or some such, or is this a new fingerprinting vector?

[05:11:01.0000] <annevk>
Oh well, I should probably stick my own issues to sort through

[05:13:21.0000] <littledan__>
https://tc39.github.io/ecma402/#sec-defaultlocale

[05:13:48.0000] <littledan__>
not sure if it's always the same

[05:14:52.0000] <littledan__>
There's a proposal to make more data available than navigator.locale currently exposes, through BCP 47--https://github.com/tc39/ecma402/issues/106 . I hope we don't have to hold this up on fingerprinting concerns!

[05:55:02.0000] <annevk>
littledan__: ideally you would or at least call it out clearly

[05:55:23.0000] <Domenic>
littledan__: that is good to here that grapheme breaks should include locale; that makes the API nice and symmetric in Segmenter. /cc rniwa bterlson

[06:11:41.0000] <foolip>
annevk, Domenic, either of you feel like signing off on https://github.com/whatwg/html/pull/1924 since it does change things where multiple choices might have been sane?

[06:11:43.0000] <littledan__>
annevk: How do other specs do that?

[06:12:23.0000] <annevk>
littledan__: https://html.spec.whatwg.org/#fingerprinting-vector

[06:15:19.0000] <littledan__>
Filed https://github.com/tc39/ecma402/issues/110

[06:17:45.0000] <Domenic>
foolip: I'd feel OK if we got Blink and WebKit signoff; I think this might be a case where we're spec-churning because I think cdumez filed an issue earlier on the same stuff.

[06:24:07.0000] <foolip>
Domenic: I see https://github.com/whatwg/html/pull/29 and https://github.com/whatwg/html/pull/1105

[06:24:20.0000] <foolip>
Domenic: can you find the cdumez one?

[06:24:47.0000] <Domenic>
foolip: nah those are probably it, I was probably misremembering

[06:25:06.0000] <Domenic>
Oh wait

[06:25:07.0000] <Domenic>
foolip: https://github.com/whatwg/html/issues/1519

[06:26:09.0000] <annevk>
That we are still modifying these fairly simple decade-old table methods is... I dunno

[06:26:29.0000] <jgraham>
foolip: I think you probably convinced / trolled me into implementing those things, when I have a minute

[06:27:11.0000] <foolip>
jgraham: sure would be great for testing HTML changes :)

[06:27:57.0000] <jgraham>
Need to fix epic breakage "caused" by a wpt import first

[07:24:48.0000] <crankharder>
Is there some standard that defines when a browser stops processing javascript on the current page as it receives a 302 response?

[07:33:24.0000] <annevk>
crankharder: HTML defines that in theory, but lifecycle is defined somewhat poorly at the edges

[07:46:00.0000] <annevk>
ugh noopener mess :/

[07:46:32.0000] <annevk>
really need to start working on browsing context / global object / document lifecycle drama

[08:06:42.0000] <crankharder>
annevk: is there something i can read on the subject -- or, can you elaborate on the theory?

[08:07:31.0000] <annevk>
crankharder: https://html.spec.whatwg.org/multipage/browsers.html#navigating-across-documents deals with navigation, which is presumably what you're talking about

[08:08:19.0000] <annevk>
crankharder: if you mean something else, you'll have to elaborate a bit

[08:49:46.0000] <nox>
So <isindex> is dead for good,

[08:49:46.0000] <nox>
nice.

[08:52:04.0000] <Domenic>
see, we CAN remove things

[08:55:37.0000] <Ms2ger>
Like outerText? :)

[09:10:23.0000] <annevk>
Ms2ger: like synthetic click events

[09:10:35.0000] <Ms2ger>
Oh yes

[09:10:53.0000] <Domenic>
annevk: rebased and reviewing the "rewrite activation behavior" now

[09:11:00.0000] <Domenic>
I still am sad about the asymmetry in the names

[09:11:53.0000] <annevk>
Domenic: we could put activation behavior in all names

[09:12:12.0000] <Domenic>
hmm interesting

[09:12:14.0000] <annevk>
Domenic: easy to change still

[09:12:19.0000] <Domenic>
legacy pre-activation behavior steps?

[09:12:27.0000] <Domenic>
I guess pre-activation-behavior

[09:12:58.0000] <annevk>
Without steps, with legacy was my thinking

[09:13:16.0000] <Domenic>
that sounds pretty reasonable

[09:13:55.0000] <annevk>
Prolly tomorrow

[09:13:57.0000] <Domenic>
I like the original name better since it's more descriptive, but I care more about the symmetry. Also all my feelings in this area are weak so I'm OK any way :)

[09:19:25.0000] <annevk>
It's just that click is so non-descriptive purpose-wise

[09:23:45.0000] <Domenic>
yeah I guess but it's specifically about "click" MouseEvents

[09:34:47.0000] <annevk>
Domenic: I think historically this name came about to sorta stop DOMActivate from happening, as some kind of "accessible" alternative that would not be used

[09:35:02.0000] <annevk>
Domenic: instead we generalized click further

[09:35:02.0000] <Domenic>
sounds fun

[10:00:47.0000] <nox>
Domenic: Could we remove document.write?

[10:00:59.0000] <nox>
And I'm *absolutely* not saying this because I need to implement it,

[10:01:03.0000] <nox>
*absolutely* not.

[10:01:05.0000] <Domenic>
I think Chrome is doing so in cross-origin iframes

[10:01:26.0000] <Domenic>
(Actually the conditions are more complicated than that...)

[10:01:44.0000] <Domenic>
https://github.com/WICG/interventions/issues/17#issuecomment-238477265

[10:02:05.0000] <Domenic>
OK not even cross-origin iframe related

[10:02:24.0000] <Domenic>
It just doesn't run document.written scripts sometimes

[10:03:00.0000] <nox>
Domenic: The Web is so insane you manage to find a serious answer to the obvious troll I made.

[10:03:39.0000] <Domenic>
Somehow I am actually really proud of this :D

[10:03:42.0000] <nox>
:D

[10:48:15.0000] <annevk>
Domenic: have you heard anything on hit regions?

[10:48:21.0000] <annevk>
Domenic: are we getting rid of them?

[10:48:44.0000] <annevk>
Domenic: the current monkey patching of the "UI mouse click action" is rather worrisome

[10:50:04.0000] <annevk>
Domenic: I guess I should check implementations again and then just drive for removing it from the specification for now and let someone else come up with a replacement

[10:50:10.0000] <annevk>
smaug: ^^

[10:51:21.0000] <smaug>
hmm, why is that UI mouse click action worrisome?

[10:52:15.0000] <smaug>
I thought the issue there was the overengineered hit region stuff, where normal elements could work in practice just fine

[10:53:24.0000] <annevk>
smaug: I mean, the monkey patching of UI mouse click action is for hit regions

[10:53:57.0000] <annevk>
smaug: "canvas MouseEvent rerouting steps"

[10:53:59.0000] <smaug>
annevk: I thought it monkey patches hit testing (which isn't defined anywhere)

[10:54:36.0000] <smaug>
/me reads again

[10:54:43.0000] <annevk>
smaug: ah yeah, I guess it's more general than just the click action

[12:36:20.0000] <smaug>
could anyone interpret https://html.spec.whatwg.org/multipage/forms.html#interactively-validate-the-constraints to me

[12:36:26.0000] <smaug>
"If one of the controls is not being rendered (e.g. it has the hidden attribute set) then user agents may report a script error."

[12:37:19.0000] <smaug>
or in general, what is the expected behavior when elements are hidden

[12:55:22.0000] <smaug>
mounir: ping

[15:12:30.0000] <mounir>
smaug: pong

[15:13:04.0000] <smaug>
mounir: who might know about blink's form validation stuff?

[15:13:26.0000] <mounir>
I would try tkent

[15:13:37.0000] <mounir>
he would be the best point of contacts for forms

[15:13:45.0000] <mounir>
smaug: if it's a quick question, I can read the code :)

[15:15:23.0000] <smaug>
mounir: unfortunately I don't have a good question yet. It seems like blink doesn't always validate type=url, but I don't quite understand the bug yet

[15:15:39.0000] <smaug>
could be just some web site issue too

[15:17:44.0000] <mounir>
can't help much indeed :)

[15:24:02.0000] <mounir>
fwiw, the invalidity check looks very simple


2016-10-19
[18:36:03.0000] <MikeSmith>
rniwa: do you need anything in https://github.com/w3c/web-platform-tests/pull/4016 specfically (re)reviewed?

[18:36:28.0000] <rniwa>
MikeSmith: not really. if you see any typos, etc... I can fix them

[18:36:40.0000] <rniwa>
MikeSmith: but the tests have been reviewed when it got landed into WebKit repo

[18:37:54.0000] <rniwa>
MikeSmith: if you're reviewing that one, I also have https://github.com/w3c/web-platform-tests/pull/3998 and https://github.com/w3c/web-platform-tests/pull/3968

[18:40:28.0000] <MikeSmith>
rniwa: well I was asking just because our policy for wpt is that if tests have been reviewed by a browser project upstream, then we can just merge them

[18:40:50.0000] <MikeSmith>
so I will just merge #4016 now, and look at the others

[18:41:03.0000] <rniwa>
MikeSmith: thanks

[18:41:28.0000] <rniwa>
MikeSmith : https://github.com/w3c/web-platform-tests/pull/3968 is the only one that hasn't been reviewed in WebKit

[18:41:50.0000] <MikeSmith>
OK

[18:43:01.0000] <MikeSmith>
for https://github.com/w3c/web-platform-tests/pull/3998 I guess before merging it we should wait for Domenic to LGTM the changes you made in response to his review comments

[20:57:31.0000] <peaches>
hello

[22:32:52.0000] <annevk>
peaches: morning

[22:54:25.0000] <rniwa>
MikeSmith: maybe you can review https://github.com/w3c/web-platform-tests/pull/4019 ?\

[22:54:28.0000] <rniwa>
annevk: hi annevk!

[22:55:03.0000] <rniwa>
annevk: it's a brand new Wednesday, and we've got a brand new custom elements issue for you ;) https://github.com/w3c/webcomponents/issues/590

[23:00:12.0000] <annevk>
rniwa: hmm, I wonder how we can fix that

[23:00:34.0000] <rniwa>
annevk: I think we need to add another custom element state like "upgrading"

[23:00:35.0000] <annevk>
rniwa: ah, more state

[23:00:41.0000] <rniwa>
annevk: what's weird here is that

[23:00:58.0000] <rniwa>
annevk: if the upgrade then fails, we'd have to clear any such reaction that has been enqueued for that element

[23:01:08.0000] <rniwa>
/me adds more test cases to his todo list

[23:02:03.0000] <rniwa>
I do recall Domenic talking about having to clear the queue so I bet he thought this already works...

[23:05:42.0000] <rniwa>
annevk: oh actually, I might be reading this incorreclty

[23:05:55.0000] <rniwa>
annevk: i think we parse through attributes when we upgrade elements

[23:08:03.0000] <annevk>
rniwa: yeah, seems like this already works

[23:08:16.0000] <annevk>
rniwa: it might be worth adding a note to the clone algorithm though

[23:08:48.0000] <rniwa>
lol at <body/>

[02:06:06.0000] <annevk>
zcorpan: did you have a way to test "salvageable"?

[02:06:15.0000] <annevk>
zcorpan: I'd like to figure out https://github.com/whatwg/html/issues/1900

[02:06:47.0000] <zcorpan>
annevk: there's something in wpt, hold on

[02:09:24.0000] <zcorpan>
annevk: i think http://web-platform.test:8000/websockets/unload-a-document/001.html

[02:16:49.0000] <annevk>
zcorpan: ta, that looks fairly complicated

[02:17:08.0000] <zcorpan>
yeah :-(

[02:21:12.0000] <zcorpan>
effectively if the document was discarded, the script runs again. so the test uses sessionStorage to check if it's run the first time or second time. and a setTimeout for the case where navigating back to a non-discarded document

[02:22:20.0000] <zcorpan>
and it needs to do that in a popup window since testharness.js can't have the test itself be navigated

[02:26:46.0000] <annevk>
thanks, I guess I can use that setup

[02:26:51.0000] <annevk>
zcorpan: so all browsers implement that concept?

[02:26:56.0000] <annevk>
zcorpan: seems to pass in Firefox and Chrome

[02:28:45.0000] <zcorpan>
annevk: this particular test would pass if a browser always discards on navigation. i'm not sure what the current status is

[02:29:47.0000] <zcorpan>
annevk: it seems http://web-platform.test:8000/websockets/unload-a-document/002.html fails in chrome (test expects not-discarded)

[02:30:06.0000] <zcorpan>
but also fails in firefox :-|

[02:34:14.0000] <annevk>
zcorpan: hah, guess we should revisit that then

[02:34:47.0000] <zcorpan>
yeah

[02:42:07.0000] <zcorpan>
filed an issue

[04:38:23.0000] <smaug>
zcorpan: curious, do you know if other browsers will align with innerText spec?

[05:09:07.0000] <zcorpan>
smaug: https://bugs.chromium.org/p/chromium/issues/detail?id=651764 https://bugs.chromium.org/p/chromium/issues/detail?id=573309

[05:14:07.0000] <zcorpan>
smaug: https://bugs.webkit.org/show_bug.cgi?id=160971

[05:14:55.0000] <smaug>
k

[05:17:29.0000] <zcorpan>
i suppose some things are still subject to change in the spec, like throwing for void elements, since the majority do that

[05:58:36.0000] <annevk>
zcorpan: ping https://github.com/whatwg/url/issues/95

[06:05:29.0000] <zcorpan>
annevk: commented

[06:05:43.0000] <zcorpan>
annevk: maybe i can PR that

[06:47:50.0000] <zcorpan>
annevk: hmmm. if the document encoding is utf-16, the spec says to percent-escape the query using utf-16, correct? afaict browsers percent-encode as utf-8 in that case

[06:48:12.0000] <zcorpan>
data:text/html;charset=utf-16,<%00!%00D%00O%00C%00T%00Y%00P%00E%00%%002%000%00h%00t%00m%00l%00>%00<%00a%00%20%00h%00r%00e%00f%00%3D%00"%00h%00t%00t%00p%00%3A%00%2F%00%2F%00e%00x%00a%00m%00p%00l%00e%00.%00o%00r%00g%00%2F%00&%00a%00u%00m%00l%00;%00%3F%00&%00a%00u%00m%00l%00;%00%23%00&%00a%00u%00m%00l%00;%00"%00>%00t%00e%00s%00t%00

[06:48:25.0000] <annevk>
zcorpan: see get the output encoding

[06:48:40.0000] <Ms2ger>
Ah, the curse that keeps on giving

[06:48:52.0000] <zcorpan>
aha

[08:03:01.0000] <annevk>
Domenic: I guess we should figure out https://github.com/whatwg/html/issues/1698 first then

[08:03:25.0000] <annevk>
Domenic: I asked foolip if he could maybe do some code spelunking and explain what happens

[08:04:02.0000] <annevk>
Domenic: if we could remove that it would drastically simplify the model

[08:06:32.0000] <Domenic>
annevk: I mean I think that issue is just another Mozilla-vs.-the-world issue

[08:06:38.0000] <Domenic>
Although I haven't tested Edge

[08:07:37.0000] <annevk>
Domenic: I suspect so, I mostly want to know what happens exactly in the world so it can be defined (or explained why the world is wrong somehow)

[08:08:01.0000] <Domenic>
by "the world" you mean most browsers? Yeah.

[08:08:12.0000] <Domenic>
It would be much nicer if Edge were open source -_-

[08:08:27.0000] <foolip>
I'd like to have their IDL files :)

[08:08:34.0000] <annevk>
Domenic: I was using the world in the same manner as you :p

[08:08:43.0000] <Domenic>
oh right lol

[08:09:15.0000] <Domenic>
foolip: I feel like that is close... they expose a bunch of stuff on their website which is derived from the IDL. A short hop to the IDL itself.

[08:09:22.0000] <Domenic>
I guess probably more legal hurdles since it's part of Edge.

[08:10:06.0000] <foolip>
yeah, extended attributes and comments in there

[08:17:03.0000] <Ms2ger>
foolip, for https://github.com/w3c/web-platform-tests/pull/4001 , is that waiting on the spec PR?

[08:18:47.0000] <foolip>
Ms2ger: I was hoping for signoff from cdumez, see https://github.com/whatwg/html/issues/1519

[08:19:04.0000] <foolip>
Ms2ger: do you want the change?

[08:20:09.0000] <Ms2ger>
foolip, just fighting my way through my inbox, and wasn't sure on the status

[08:21:55.0000] <foolip>
fighting through inbox, sounds vaguely familiar

[08:39:49.0000] <Ms2ger>
Does anyone besides Hixie_ have access to acid3?

[08:45:30.0000] <annevk>
Ms2ger: doubt it

[09:28:27.0000] <smaug>
foolip: outerText alias to innerText o_O

[09:28:38.0000] <smaug>
(getter)

[09:28:52.0000] <zcorpan>
smaug: yep. how would it be different?

[09:29:17.0000] <smaug>
what is the use for outerText?

[09:30:22.0000] <zcorpan>
for setting, replacing an element with some text. e.g. replacing images with their alt text maybe?

[09:30:41.0000] <smaug>
foolip: I would have imagined getter too would behave different related to newlines

[09:30:55.0000] <smaug>
differently

[09:31:44.0000] <smaug>
but ok, odd API, but should be too difficult to implement

[09:31:56.0000] <smaug>
assuming setter isn't too complicated

[10:30:16.0000] <younder>
This lack of MathML in blink is causing me greef.  MathML is  incomplete in WebKit. Nonexistant in blink. Complete in Firefox, but that has a crap unsupported embedded UI.

[11:28:25.0000] <Domenic>
annevk: creating "topic: events". We have a lot.

[11:31:16.0000] <annevk>
Domenic: cool

[11:46:03.0000] <Domenic>
WTF does step 11.1 mean in https://html.spec.whatwg.org/multipage/comms.html#dom-messageport-postmessage

[11:46:49.0000] <Domenic>
has been there forever https://html.spec.whatwg.org/commit-snapshots/c9e804f04d03a0658bfa689cb0f368a4d2e37936#dom-messageport-postmessage

[11:50:09.0000] <annevk>
Domenic: that is the lack of serialization and model to communicate across event loops

[11:51:32.0000] <Domenic>
How can events find themselves in task sources

[11:51:37.0000] <Domenic>
Especially since nobody ever puts them there

[11:52:32.0000] <annevk>
Domenic: the language is bogus too but you can't really fix it without serialization being a thing

[11:53:25.0000] <annevk>
Domenic: hard to explain how the structured cloned object gets created in the correct global too with this language

[11:54:17.0000] <annevk>
Domenic: so I just left it alone so far until we tackle the bigger problem

[11:54:38.0000] <annevk>
Technical debt 🎉

[12:11:39.0000] <younder>
What are you numbasses going to do about MathML? (chromium, safari)

[12:11:57.0000] <younder>
nothing..

[12:14:30.0000] <younder>
Well, I need it. looks like I have to write it myself.

[12:15:17.0000] <younder>
pointers (at least)?

[12:33:30.0000] <Domenic>
What am I missing about BroadcastChannel? http://jsbin.com/ruguhuwika/edit?html,console,output

[12:35:20.0000] <jyasskin>
younder: Insults aren't going to be very effective. But then, nothing individual is likely to be effective at getting MathML implemented. Try https://www.mathjax.org/.

[12:37:24.0000] <jyasskin>
Mek_: Are you the expert on BroadcastChannel?

[12:41:12.0000] <younder>
jyasskin, I am going to implement mathML. I'm not a whiner. I am a member of AMS (American Mathematical Society). I will submitt a branch, and then you can take it or leave ir.

[12:45:55.0000] <jyasskin>
younder: See https://groups.google.com/a/chromium.org/d/topic/chromium-dev/mSQVTZpdQc0/discussion for Chrome. You really would be better off using MathJax.

[12:46:39.0000] <younder>
jyasskin, it just isn't fast enough

[12:47:13.0000] <Domenic>
Sounds like a good open source project then to make Mathjax faster

[12:48:43.0000] <younder>
MathJax is javeScript. I need math in a editor powered by javascript but fast enough to allow interactive editing

[12:48:57.0000] <jyasskin>
younder: e.g. Maybe WebAssembly would speed it up enough.

[12:50:15.0000] <younder>
MathML is not that difficult. I'll just implement it.

[12:50:54.0000] <jyasskin>
Good luck.

[12:50:59.0000] <younder>
thx

[12:57:55.0000] <younder>
My platform for now is the blink engine.

[12:59:30.0000] <jyasskin>
You'll need to ask on blink-dev or chromium-dev for advice on that. I wouldn't expect your patch to get accepted into the main tree, but they might be able to point you toward the right way to start in a private fork.

[13:00:15.0000] <younder>
private fork it is.

[13:02:36.0000] <younder>
I was expecting that. I will only supply a port when it complies with al tests and is effectively merged with the latest version.

[13:03:16.0000] <younder>
al => all

[13:27:17.0000] <TabAtkins>
younder: You might be interested in KaTeX <https://khan.github.io/KaTeX/>, a JS library from Khan Academy that does math rendering much faster than MathJax.

[13:27:32.0000] <TabAtkins>
(Partly because it purposely doesn't implement all of MathJax's functionality, but it's more than enough for most math.)

[13:34:57.0000] <younder>
TabAtkins, So like WebKit,I do string theory. It takes it to a different level. I also like category theory.

[13:35:21.0000] <younder>
I would like category diagrams.

[13:36:03.0000] <younder>
I'll figure it out.

[13:36:35.0000] <TabAtkins>
I would be rather surprised if MathML supports category diagrams?  I'd look for a more dedicated renderer for those things.

[13:36:36.0000] <younder>
Just thought you would like a head start.

[13:37:32.0000] <younder>
TabAtkins, It doesn't

[13:38:40.0000] <jyasskin>
TabAtkins: I've got a patch marking certain sections "unstable" at https://github.com/WebBluetoothCG/web-bluetooth/pull/308. Do you like the rendering? Think it would look better some other way? Want it in bikeshed?

[13:39:57.0000] <TabAtkins>
jyasskin: Feels really distracting to me - I'm having trouble reading the algorithms.

[13:40:10.0000] <jyasskin>
TabAtkins: One problem I've found is that I can't use this technique to mark unstable bits of IDL. I'd need an extended attribute for that, but it's one that would never wind up in implementations.

[13:40:11.0000] <TabAtkins>
Versus effects like https://drafts.fxtf.org/paint/, where the color doesn't distract me.

[13:40:32.0000] <jyasskin>
Hm, ok. I wonder if it's the size, or if gray is just the wrong color.

[13:41:18.0000] <TabAtkins>
I think it's the size - too close to the size of normal text, and skinny serifs, so there's more intersections with the text. Huge chunky text is easier to filter out as a background detail.

[13:42:16.0000] <TabAtkins>
/me considers porting KaTeX to Python for Bikeshed...

[13:42:57.0000] <TabAtkins>
Unexpectedly, it can render headless without using any font information directly, so I really could just output its stuff from Python.

[13:43:33.0000] <TabAtkins>
jyasskin: Have you thought about a side-strip instead of a background, so it's still visible even when elements with backgrounds show up?

[13:43:59.0000] <TabAtkins>
Also, unknown extended attributes are accepted as valid and just left unparsed by widlparser, I believe.

[13:45:35.0000] <jyasskin>
TabAtkins: I'm not sure how to get a side strip to appear at a consistent place on the page regardless of the element I stick the class on.

[13:47:00.0000] <TabAtkins>
Ah, yeah, that's hard.

[13:52:55.0000] <jyasskin>
TabAtkins: Check https://api.csswg.org/bikeshed/?url=https://raw.githubusercontent.com/jyasskin/web-bluetooth-1/at-risk/index.bs#permission-api-integration again.

[13:53:21.0000] <TabAtkins>
I might go a little chunkier still, but *much* better.

[13:53:46.0000] <jyasskin>
I'm thinking of fixing the problem with notes covering the background, by using opacity for their backgrounds, instead of solid light colors.

[13:54:17.0000] <jyasskin>
There is no chunkier unless I pick a particular font.

[13:54:31.0000] <TabAtkins>
Is that not an image?

[13:54:40.0000] <jyasskin>
Nope, it's an inline SVG.

[13:54:59.0000] <TabAtkins>
Ah, yes, I see.

[13:55:49.0000] <jyasskin>
Amazingly, FF, Edge, and Chrome all render it without escaping. :)

[13:56:00.0000] <jyasskin>
(Unless I've broken something since I checked)

[13:56:57.0000] <TabAtkins>
Nothing too amazing; CSS parsing isn't that hard. ^_^


2016-10-20
[17:41:38.0000] <Domenic>
I'd render unstable Web IDL with a // unstable that's bold or red or something similar

[17:41:42.0000] <Domenic>
maybe blinking ;)

[00:23:18.0000] <hsivonen>
I wonder what a typical performance-sensitive case of UTF-16 to UTF-8 conversion in browsers is like

[00:26:13.0000] <annevk>
hsivonen: does UTF-16 include internal representation of most things?

[00:27:46.0000] <annevk>
hsivonen: because then maybe URLs?

[00:33:44.0000] <hsivonen>
annevk: I mean other than URLs and form submessions, which apply to other enodings

[00:33:58.0000] <hsivonen>
annevk: yes, UTF-16 is the internal representation of most things

[00:34:18.0000] <hsivonen>
so serializing stuff for XHR POST would do UTF-16 to UTF-8

[00:34:50.0000] <rniwa>
zcorpan: added more test cases on https://github.com/w3c/web-platform-tests/pull/3968

[00:35:02.0000] <hsivonen>
URLs are almost always ASCII

[00:35:43.0000] <hsivonen>
form submissions in non-Latin scripts are almost entirely non-ASCII

[00:36:33.0000] <hsivonen>
but I wonder if there are real-world cases where mixed ASCII/non-ASCII matters for perf for UTF-16 to UTF-8

[00:37:00.0000] <hsivonen>
I have a pretty good idea what metric I should be optimizing for decode

[00:37:10.0000] <hsivonen>
also for URL use case encode

[00:37:21.0000] <annevk>
hsivonen: maybe it matters more in a world where more is done in UTF-8 or WTF-8 internally, although maybe then UTF-16 would almost never be used

[00:37:48.0000] <hsivonen>
but I don't have a good idea what metric I should be optimizing for UTF-16 to UTF-8 encode

[00:38:24.0000] <hsivonen>
annevk: in a world where the internal representation is Rust-style guaranteed-valid UTF-8, encode takes zero time. :-)

[00:39:02.0000] <annevk>
hsivonen: sure, but I'm not sure Rust-style can be the end game given JavaScript

[00:39:43.0000] <hsivonen>
annevk: we might get away with UTF-8 DOM

[00:40:10.0000] <hsivonen>
annevk: and break pages that expect to be able to put lone surrogates in the DOM and join them later

[00:40:15.0000] <annevk>
hsivonen: anyway, not sure what there is beyond URLs, forms, saving to disk, and perhaps some very cool OS that uses UTF-8 for strings everywhere

[00:40:31.0000] <hsivonen>
annevk: within the JS engine, there needs to be a way to have lone surrogates, sure

[00:40:52.0000] <hsivonen>
annevk: saving to disk is rare and not a worthy perf target

[00:41:06.0000] <annevk>
hsivonen: agreed, was just trying to enumerate targets

[00:41:25.0000] <hsivonen>
annevk: there's XHR POST

[00:41:48.0000] <annevk>
hsivonen: mkay, fetch() and new Blob() too indeed

[00:41:49.0000] <hsivonen>
annevk: and TextEncoder

[00:42:15.0000] <hsivonen>
trouble is, I have no clue what the usage patterns for those are

[00:42:24.0000] <annevk>
hsivonen: WebSocket (though that'll disappear in favor of fetch())

[00:42:40.0000] <hsivonen>
what I'm looking for is a natural interleave of ASCII and non-ASCII

[00:42:53.0000] <annevk>
hsivonen: I doubt that with all these I/O things encoding is going to be the bottleneck

[00:42:59.0000] <annevk>
hsivonen: we'd be in a pretty nice place then

[00:43:20.0000] <annevk>
hsivonen: which is why URLs still seem like the only "real" thing, despite a lot of them being ASCII-only

[00:43:42.0000] <hsivonen>
FWIW, for decode, I took Wikipedia as the natural interleave of ASCII and non-ASCII

[00:43:49.0000] <annevk>
(it also feels a bit morally wrong that we have all these ASCII fast-paths btw)

[00:44:19.0000] <hsivonen>
hey, that's my change to outperform the competition

[00:44:27.0000] <hsivonen>
*chance

[00:45:25.0000] <annevk>
Does the competition have clever parallel decoding/encoding? Although I guess the hardware might not be ubiquitous enough as we discussed earlier

[00:45:26.0000] <hsivonen>
It's not morally wrong for decoders as longs as the bulk of HTML/CSS/JS/URL syntax is ASCII

[00:46:03.0000] <annevk>
That's fair, but it's kinda sad that you get a massive drop in performance if you stick an emoji in your JavaScript resource (happens in Chrome)

[00:46:07.0000] <hsivonen>
annevk: ICU has manually unrolled loops but not manual SIMD at least for single-byte

[00:46:22.0000] <hsivonen>
annevk: Windows has something faster than ICU internally

[00:46:44.0000] <annevk>
Or for that matter, a non-ASCII comment

[00:47:25.0000] <hsivonen>
annevk: The Rust standard lib optimizes ASCII with ALU word-sized operations when the      right. no explicit SIMD

[00:47:50.0000] <annevk>
"the ? right"?

[00:47:58.0000] <hsivonen>
annevk: uconv has SIMD for x86 ASCII and ALU word for ARM but for UTF-8 decode only

[00:48:29.0000] <zcorpan>
rniwa: sweet, looking now

[00:48:36.0000] <rniwa>
zcorpan: thanks!

[00:48:39.0000] <annevk>
Optimizing UTF-8 over others seems totally fair game btw

[00:48:51.0000] <hsivonen>
annevk: those were just repeated spaces. I get repeated characters thanks to a build in another VM making this one deal with the keyboard too slowly

[00:49:06.0000] <hsivonen>
oh. there was a mord missing

[00:49:10.0000] <hsivonen>
word

[00:49:28.0000] <hsivonen>
"when the alignment is right"

[00:49:42.0000] <annevk>
ah

[00:50:17.0000] <hsivonen>
glibc is so slow that I doubt is has any fancy optimizations

[00:51:34.0000] <hsivonen>
for IBM mainframes, it has a fast path for ISO-8859-1 to some EBCDIC flavor, but the stuff we use over here in the non-IBM world is slow

[00:56:45.0000] <hsivonen>
one option is that I test encode with URL and form submission -like workloads

[00:57:13.0000] <hsivonen>
but it really bothers me that I don't know what XHR POST and TextEncoder workloads really look like

[00:57:43.0000] <hsivonen>
FWIW, I've been designing for form submission work loads to be very slow anyway

[00:58:53.0000] <hsivonen>
on the theory that form submission perf (for non-UTF-8 targets) doesn't matter much

[00:59:26.0000] <hsivonen>
interestingly, I discovered that currently in Gecko, EUC-KR *decode* is super-slow

[00:59:40.0000] <hsivonen>
yet, I don't recall anyone noticing it enough to complain

[01:01:39.0000] <hsivonen>
annevk: do you happen to know if the emoji slowness in Chrome is about promoting an ISO-8859-1 target buffer to an UTF-16 target buffer or the emoji just messing up memory alignment afterwards?

[01:04:23.0000] <annevk>
hsivonen: I believe it's the former

[01:04:28.0000] <annevk>
(pretty sure)

[01:09:45.0000] <hsivonen>
maybe I should take a look at what goes over the wire in a Gmail mail composition session and see what the wire format is like

[01:36:06.0000] <hsivonen>
I'm rather surprised that Gmail uses application/x-www-form-urlencoded;charset=utf-8 is its XHR wire format instead of using JSON

[01:36:50.0000] <hsivonen>
s/is/as/

[01:38:14.0000] <annevk>
hsivonen: does Gmail still offer the JS-less version? Might be because of that

[01:48:50.0000] <hsivonen>
annevk: I don't know.

[01:49:32.0000] <younder>
I like yaml, butjson is good too. All is better than the verbosity of XML

[01:50:33.0000] <younder>
The line noise and the st-udder it gets to you

[01:52:10.0000] <younder>
OK. mathML 3 is awful, but it is a standard. And in DOM it starts to make sense

[01:53:17.0000] <younder>
Persona: I am a software developer, educated at University of Oslo

[01:53:58.0000] <younder>
I have worked for Opera software in the core development team

[01:54:40.0000] <annevk>
younder: oh, when?

[01:55:06.0000] <younder>
I am now exploring developing MathML, from scratch, in blink

[01:56:24.0000] <younder>
No faulty WebKit implementation

[01:56:32.0000] <younder>
annevk, 2000

[01:57:43.0000] <annevk>
younder: for a while or only that year?

[01:57:58.0000] <annevk>
/me was there 2005-2012

[01:59:02.0000] <younder>
annevk, 1999-2000

[02:00:06.0000] <annevk>
That was early days still, must have been pretty exciting

[02:00:35.0000] <younder>
annevk, It was we were 40 people in Opera back then.

[02:01:50.0000] <annevk>
heh, I was 251 iirc

[02:06:58.0000] <younder>
I worked under CSS developer Håkon Lie

[02:19:42.0000] <annevk>
jochen__: so why the setSecurityOrigin() call?

[02:20:30.0000] <annevk>
jochen__: that seems to be the thing that might be upsetting to bz, though you said it wasn't needed if you were same-origin anyway

[02:22:46.0000] <annevk>
jochen__: I can also ask in the issue directly if that's preferable

[03:20:37.0000] <hsivonen>
Evernote Web seems to have a chatty GWT-based wire protocol

[03:21:05.0000] <hsivonen>
not particularly interesting in terms of encoder performance: bunch of ASCII, then user-supplied content, then bunch of ASCII

[04:22:39.0000] <younder>
Most implementors of the web speak English. (Even if they are not English)

[04:23:20.0000] <younder>
I am Norwegain...

[04:24:02.0000] <younder>
like  ,I suppose, annevk

[04:50:57.0000] <annevk>
younder: Dutch

[04:52:16.0000] <younder>
sorry... (Opera, Norway et al)

[05:12:18.0000] <annevk>
Hmm, currently downloading a 100 MiB or so just to amend a PR

[05:12:25.0000] <annevk>
Must be a more efficient way to do that GitHub

[05:16:31.0000] <younder>
blink does an incredible 50 000 file compile. Drowns any download concers

[05:17:01.0000] <younder>
1 hr on a 8 core xenon

[05:17:41.0000] <younder>
Firfox get's none in 11 minutes

[05:18:00.0000] <younder>
s/none/done/

[05:18:33.0000] <jochen__>
annevk, I think back then that was required to make the origin an alias

[05:18:40.0000] <jochen__>
annevk, not sure whether that's still a thing?

[05:25:43.0000] <annevk>
jochen__: alias these days is basically a pointer to the same origin object

[05:26:12.0000] <annevk>
jochen__: however, it's unclear to me what the effect would be if you already have a same-origin check preceding it

[05:33:31.0000] <jochen__>
it can be same origin without being the same origin object still, no?

[05:34:23.0000] <annevk>
jochen__: yes

[05:34:30.0000] <annevk>
jochen__: though not for opaque origins

[05:34:49.0000] <annevk>
jochen__: but with opaque origins they'd already have to be the same, so aliasing doesn't make sense

[05:36:24.0000] <annevk>
jochen__: ah, I guess it's observable when they are not aliased, then you do window.open(), then you do document.domain on one side and somehow still get access?

[05:37:04.0000] <annevk>
if they're aliased document.domain would change both origins, if they're not aliased you'd be isolated

[05:37:11.0000] <annevk>
"isolated"

[06:07:59.0000] <annevk>
SimonSapin: you around?

[06:08:14.0000] <annevk>
SimonSapin: can you check the checkbox in https://github.com/whatwg/url/pull/113 that makes your PR mutable?

[06:09:40.0000] <SimonSapin>
annevk: done

[06:09:55.0000] <annevk>
ta

[06:38:35.0000] <nox>
Is <script>document.write('<template>')</script> as insane as I think?

[06:39:26.0000] <zcorpan>
No new notifications. \o/

[06:40:24.0000] <zcorpan>
nox: what's insane about it?

[06:40:52.0000] <jochen__>
annevk, right

[06:41:09.0000] <nox>
zcorpan: That everything following that will end up in the template contents I guess?

[06:42:07.0000] <annevk>
jochen__: I wonder if that's tested in WPT already, but I guess we'll make sure once we make this change

[06:42:35.0000] <zcorpan>
nox: ok, yeah, but nothing new for <template>; that also happens for e.g. <title> or <plaintext> (the latter can't even be closed)

[06:42:58.0000] <nox>
zcorpan: Why can't it be closed? :o

[06:43:11.0000] <zcorpan>
because it's <plaintext> :-D

[06:43:48.0000] <zcorpan>
it's the text/plain of HTTP/0.9

[06:47:38.0000] <jochen__>
no

[06:47:47.0000] <jochen__>
I still have it on my todo list though :-/

[07:00:25.0000] <ondras>
hmm, elements with position:fixed appear somehow buggy during a transition that modifies their parent's transform. both ff+chrome. hard to reduce right now; is this a known thing?

[07:38:37.0000] <annevk>
jochen__: talked a bit with bz, the way he'd like us to proceed is come up with a plan for changes and some number of tests demonstrating they actually match impl and then bring him back into the conversation (he unsubscribed for now, bit of a sensitive topic)

[07:39:03.0000] <annevk>
jochen__: which seems totally reasonable to me

[07:39:58.0000] <annevk>
rbyers: "(and I know there was discussion with Anne somewhere, but I can't find it at the moment)" I think we only had one in person

[08:03:16.0000] <annevk>
Domenic: activation behavior name changes look okay? did you have a look at the commit message I proposed?

[08:03:37.0000] <annevk>
Domenic: I think I'm good with both, but was thinking to wait for you to wake up just in case

[08:03:52.0000] <annevk>
Domenic: (DOM side landed already with review from MikeSmith)

[08:04:42.0000] <Domenic>
annevk: yeah, I'm awake and have read all my emails; I think I had a commit message nit, let me page it back in

[08:05:04.0000] <annevk>
Domenic: https://github.com/whatwg/html/pull/1925#issuecomment-255052832

[08:05:51.0000] <Domenic>
annevk: OK yeah, LGTM.

[08:05:59.0000] <Domenic>
The no-longer-being-conditionally-associated thing is interesting

[08:06:06.0000] <Domenic>
On the face of it it's a normative change

[08:06:18.0000] <Domenic>
But because <input> can never be nested inside <input> it's not

[08:07:09.0000] <annevk>
They can be nested through script, but I don't think that affects anything

[08:07:14.0000] <Domenic>
That is, HTML's old "nearest activatable element" + conditional association vs. DOM's new walk-until-you-find-activation-behavior could in theory be different, but in practice not

[08:07:18.0000] <Domenic>
Yeah

[08:07:45.0000] <Domenic>
Well hmm

[08:07:52.0000] <Domenic>
<button>text <input disabled> </button>

[08:08:17.0000] <annevk>
The conditional association mostly affects other things doing conditional testing on these things

[08:08:20.0000] <Domenic>
https://jsbin.com/zimege/edit?html,console,output

[08:08:39.0000] <Domenic>
I guess this becomes about hit testing

[08:09:18.0000] <Domenic>
which UI events talks about in terms of activation behavior https://w3c.github.io/uievents/#event-flow-activation

[08:09:31.0000] <Domenic>
I don't think this is worth holding up the train for, just interesting

[08:09:50.0000] <annevk>
That is something worth looking into indeed

[08:10:14.0000] <annevk>
So yeah, I guess that should look at things being disabled instead

[08:10:24.0000] <annevk>
Just like click() already does and a number of other things do too

[08:10:52.0000] <Domenic>
I think HTML might need to bring back some concept of "activatable"

[08:10:58.0000] <Domenic>
which is roughly "activation behavior + not disable"

[08:11:00.0000] <annevk>
It's unfortunate we only noticed that now, since the commit message could have enunciated that more

[08:11:13.0000] <Domenic>
:-S

[08:14:05.0000] <annevk>
Domenic: I think the spec actually made a change for the better though

[08:14:07.0000] <annevk>
Domenic: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4594

[08:14:22.0000] <annevk>
Domenic: if you comment out child.disabled = true you'll see only the child getting checked

[08:15:05.0000] <annevk>
Domenic: but either way it doesn't reach the parent, even though the child was disabled and did not have "activation behavior" per the old HTML text (which was therefore wrong)

[08:15:23.0000] <Domenic>
Ah yeah, nice.

[08:19:55.0000] <annevk>
I should add a test for that tomorrow

[08:19:59.0000] <annevk>
Hopefully I remember

[08:30:38.0000] <tobie>
jyasskin: is the long term plan to keep the registry in the permission spec or are you waiting on partial enums to have each power feature include it in its own spec?

[08:35:09.0000] <jyasskin>
tobie: Once we have partial enums, I think we'll have Bikeshed generate an index into the permissions spec, but have each feature spec define its own enum value.

[08:35:52.0000] <tobie>
jyasskin: what do you mean by: "we'll have Bikeshed generate an index into the permissions spec"

[08:37:37.0000] <jyasskin>
TabAtkins has an index element that he's used for CSS, which will let the permissions spec link to all the individual permissions.

[08:38:51.0000] <tobie>
jyasskin: oh. a secret feature? That's awesome.

[08:44:09.0000] <jyasskin>
Yep.

[09:38:39.0000] <TabAtkins>
Secret because I haven't given it a ton of thought yet. But it's probably ready for primetime.

[09:45:19.0000] <TabAtkins>
It's what's used to generate https://drafts.csswg.org/indexes/ right now.

[10:10:42.0000] <annevk>
Domenic: also confirmed with <form onsubmit="w(1); return false"><button type=submit>test <input type=checkbox disabled></button><form> that disabled doesn't influence the activatable target

[10:10:51.0000] <annevk>
Domenic: it does seem that Firefox does strange hit testing for <button>

[10:11:01.0000] <annevk>
Domenic: and basically bypasses any children

[10:11:19.0000] <Domenic>
hmmm

[10:11:38.0000] <annevk>
Domenic: but in Chrome that will not submit the form when you click the checkbox

[10:12:09.0000] <annevk>
Domenic: I think HTML might have some open issues around <button> already and how it should be handled and I think Firefox has an open bug too with respect to hit testing / activation

[10:12:25.0000] <annevk>
Domenic: anyway, will turn these two examples into tests since I have some time now

[10:26:30.0000] <annevk>
Domenic: https://github.com/w3c/web-platform-tests/pull/4043

[12:36:17.0000] <jsbell>
Thanks for the feedback, Domenic!

[13:35:52.0000] <KiChjang>
https://w3c.github.io/charter-html/group-charter.html

[13:36:00.0000] <KiChjang>
does this WG have any relationship with WHATWG?

[13:40:22.0000] <terinjokes>
I'm going to guess the relationship, if one can call it that, is specified in the section labelled "External Groups"

[13:43:18.0000] <gsnedders>
KiChjang: what terinjokes said

[13:44:27.0000] <KiChjang>
it seems unnecessary for another WG to work on the same things as whatwg?

[13:51:30.0000] <Domenic>
KiChjang: sometimes the W3C likes to copy and paste our work and put their logo on it for various reasons. It sucks and is a waste of a ton of peoples' time, but is outside our control.

[13:52:29.0000] <KiChjang>
is there no copyright/patent laws preventing that from happening?

[13:52:34.0000] <KiChjang>
copyleft*

[13:52:54.0000] <Domenic>
Our specs are licensed under liberal licenses

[13:53:47.0000] <gsnedders>
KiChjang: the main reason why those involved in the WHATWG don't kick up an even bigger fuss is the patent protection provided by W3C RECs

[13:54:00.0000] <Domenic>
https://lists.w3.org/Archives/Public/www-archive/2014Apr/0034.html is relevant


2016-10-21
[23:12:01.0000] <annevk>
rbyers: one compat issue where it's been super hard to get feedback from Chrome folks is URLs

[23:12:11.0000] <annevk>
rbyers: I pinged Philip about it, but thought I'd let you know too

[23:21:05.0000] <annevk>
foolip: you had some way to view tests that were checked into a branch, how does that work?

[23:21:34.0000] <annevk>
jgraham: would be nice if a bot for WPT posted a comment with the test URLs for the branch

[00:27:20.0000] <MikeSmith>
annevk: should be easy to tweak the stability checker comments to add that

[00:27:57.0000] <MikeSmith>
you mean links to w3c-test.org/submission/NNNN right?

[00:34:12.0000] <annevk>
MikeSmith: ideally links to all the files that have changed

[00:34:26.0000] <annevk>
MikeSmith: otherwise it's still manual work of putting 2 and 2 together

[00:34:44.0000] <MikeSmith>
yeah

[00:35:00.0000] <MikeSmith>
OK will hack up a PR for it right now

[00:39:40.0000] <tobie>
What's the preferred option when it comes to algorithms with an if -> then -> return structure, e.g.: https://gist.github.com/tobie/56751420a4597ba25a7ed0e9aaac6f6b

[00:41:18.0000] <tobie>
Split the return into it's own substep or keep them both together?

[00:46:15.0000] <annevk>
Is there an easy way to remove local git branches that are not published?

[00:47:09.0000] <annevk>
tobie: that is pretty good, sometimes "Otherwise" is not used when the first clause returns anyway or the clauses are mutually exclusive

[00:47:50.0000] <annevk>
tobie: we should have some norms for this, I used to think they would belong in IDL, but maybe something even higher-level should describe the rules

[00:47:55.0000] <tobie>
git branch -D [BRANCH_NAME]

[00:48:25.0000] <annevk>
tobie: is there a way to do it without names? (there's a lot)

[00:49:25.0000] <tobie>
no idea. :(

[00:50:04.0000] <tobie>
wrt to algorithms, just a set of best practices would be amazing.

[00:50:23.0000] <tobie>
annevk: have you looked at both versions of the algo I linked to?

[01:02:51.0000] <jochen__>
annevk, I think the problem with tests that demonstrate compatible implementations is that they're not compatible

[01:08:40.0000] <MikeSmith>
annevk: about the git thing, to get just a list of those branches, try this:

[01:08:44.0000] <MikeSmith>
git branch -vv | cut -c 3- | awk '$3 !~/\[/ { print $1 }'

[01:13:25.0000] <MikeSmith>
hmm actually I think that may still list branches that do have remotes

[01:14:18.0000] <MikeSmith>
will try something else

[01:15:10.0000] <MikeSmith>
annevk: in the mean time, see the wpt-stability-bot comments in https://github.com/w3c/web-platform-tests/pull/4050

[01:17:00.0000] <MikeSmith>
that uses http://w3c-test.org as the base but since there are some tests that need be run under TLS I guess I should make it emit https://w3c-test.org instead

[02:00:15.0000] <tobie>
MikeSmith: that's pretty cool!

[02:00:29.0000] <tobie>
MikeSmith: I <3 GH bots

[02:05:09.0000] <annevk>
So a lot of the advice in https://github.com/whatwg/html/blob/master/TEAM.md#handling-pull-requests is dated I think given that you can now push to a contributors branch (after cloning their repository)

[02:05:43.0000] <annevk>
That is, the approach MikeSmith added doesn't allow for pushing fixes to those branches, it just gives you something to look at which you can also do online

[02:06:36.0000] <annevk>
But also, I think we should now try to clone those repos (even though they're large) if we want to make fixup commits as that'll lead to purple PRs, which is something contributors like

[02:08:26.0000] <MikeSmith>
agreed

[02:08:44.0000] <MikeSmith>
so I can spend some time updating it

[02:09:01.0000] <MikeSmith>
especially if you can take time to raise an issue

[02:09:44.0000] <annevk>
MikeSmith: oh great, thanks

[02:09:47.0000] <annevk>
MikeSmith: I'll create an issue

[02:09:53.0000] <MikeSmith>
great

[02:10:35.0000] <MikeSmith>
tobie: jgraham points out that some PRs don’t get mirrored to w3c-test.org so those URLs will be 404 in those cases

[02:11:08.0000] <MikeSmith>
tobie: but I think for now it’s not (yet) worth trying to make it smarter about what to output on those cases

[02:11:58.0000] <annevk>
MikeSmith: is that when the PR doesn't use a local branch?

[02:12:22.0000] <annevk>
MikeSmith: if it's easy to detect might be nice to fail gracefully, but something is better than nothing

[02:12:27.0000] <jgraham>
When the submitter is trusted

[02:12:58.0000] <jgraham>
We can detect it, but it's a little bit of work

[02:15:04.0000] <annevk>
tobie: sorry for replying so late, definitely a over b

[02:15:40.0000] <annevk>
jochen__: I think WebKit and Blink will largely be the same (apart from that same-origin check)

[02:15:45.0000] <annevk>
jochen__: dunno about Edge

[02:16:04.0000] <annevk>
jochen__: but proving Edge doesn't create a new global would be good and maybe figuring out some of the other things it does

[02:17:45.0000] <tobie>
annevk: np. I see two tendencies these days wrt to algorithms. One favoring making it look as much as possible like regular prose, the other aiming for near pseudo-code.

[02:18:28.0000] <tobie>
annevk: is there reasoning behind this outside of personal taste?

[02:18:48.0000] <annevk>
tobie: I think I'm definitely in the latter camp, but if it's simple like this I don't see the need for verbosity

[02:19:10.0000] <tobie>
we definitely need a guide for this stuff

[02:19:14.0000] <annevk>
tobie: the verbosity might be needed if what to return is itself conditional or requires some variable allocation and such

[02:19:38.0000] <annevk>
tobie: but when it's just if X, then Y, I don't see the need for a nested list

[02:19:52.0000] <tobie>
annevk: makes sense. thanks

[02:22:04.0000] <annevk>
another pattern I've started using is with "one of X / Y / Z" but X / Y / Z are complicated; slowly been using lists for that where the list is basically part of the paragraph but cannot be nested in it due to silly HTML parsing rules

[02:25:49.0000] <Ms2ger>
Remember when Hixie_ invented <span><ul> for that?

[02:26:13.0000] <annevk>
Oh is that standardized?

[02:26:32.0000] <Ms2ger>
No, it was dropped at some point

[02:26:33.0000] <annevk>
Seems a little icky, but if it works I wouldn't necessarily mind using it

[02:26:38.0000] <annevk>
Oh okay

[02:27:06.0000] <annevk>
I wonder if this new <dl> <div> proposal will suffer the same faith down the line

[02:28:33.0000] <Ms2ger>
/me wonders if anyone's got a mapping {entry, incumbent, current, relevant} -> Gecko concepts

[02:30:10.0000] <annevk>
Ms2ger: I wouldn't quite start implementing those in Servo yet

[02:30:25.0000] <Ms2ger>
Still in flux?

[02:30:28.0000] <annevk>
Ms2ger: WebKit/Chrome don't have incumbent I believe, so this might well change still

[02:30:55.0000] <annevk>
Ms2ger: entry/current/relevant are mostly stable I'd say though

[03:30:30.0000] <MikeSmith>
annevk: if you haven’t already manually removed your local non-published git branches, try this to first get a list of those:

[03:30:34.0000] <MikeSmith>
for branch in $(git branch -vv | cut -c 3- | awk '$3 !~/\[/ { print $1 }'); do if [[ -z "$(git ls-remote --heads origin $branch)" ]]; then echo $branch; fi; done

[03:30:49.0000] <zcorpan>
<p><span><ul> doesn't work; the p is still closed

[03:31:09.0000] <MikeSmith>
annevk: oh maybe make sure ot run "get remote prune origin" before you run that

[03:31:49.0000] <zcorpan>
<p><applet><ul> works though :-D

[03:32:20.0000] <MikeSmith>
annevk: and if that lists the branches you expect it to llist, then replace the "echo $branch" with "git branch -D $branch" and run that

[04:43:53.0000] <smaug>
annevk: uh, I'm missing some news. How will WebSocket be obsolet?

[04:43:57.0000] <smaug>
e

[04:44:20.0000] <annevk>
smaug: you can do the same thing with Fetch + Streams and work over HTTP/2

[04:44:35.0000] <annevk>
smaug: you even get some reduced latency due to lack of handshake

[04:44:48.0000] <smaug>
I didn't know you can write to the stream you get from Fetch

[04:45:08.0000] <annevk>
smaug: I'm not saying we'll ever get rid of WebSocket btw, just that going forward it's not a good idea

[04:45:20.0000] <annevk>
smaug: soonish, not landed just yet

[04:46:29.0000] <smaug>
annevk: so will fetch have somehow two modes, one for read-only, one read-write ?

[04:47:05.0000] <annevk>
smaug: you'd just pass request a readable stream as body

[04:47:40.0000] <annevk>
smaug: the other readable stream would be on the response

[04:48:01.0000] <smaug>
so you keep the connection open as long as what?

[04:48:27.0000] <smaug>
until the request stream is closed?

[04:48:35.0000] <smaug>
and response is closed too?

[04:48:39.0000] <annevk>
smaug: yeah, as long as either stream is open

[04:51:14.0000] <smaug>
annevk: how will progress events like things work with this setup?

[04:51:23.0000] <smaug>
(which fetch doesn't have yet, right?)

[04:53:20.0000] <smaug>
/me wishes he could read Stream spec

[04:53:49.0000] <annevk>
smaug: we don't have a good idea around progress events yet, other than actually using the stream directly (which is more CPU-intensive)

[04:54:14.0000] <annevk>
smaug: part of the discussion takes place here: https://github.com/yutakahirano/fetch-with-streams/issues

[04:55:12.0000] <annevk>
smaug: with the Streams Standard, if you see the [[internalSlots]] things as private C++ fields and the rest as JavaScript accessors around that, is it still hard?

[04:55:23.0000] <annevk>
smaug: it can't be just a lack of IDL that's the problem right?

[04:55:41.0000] <smaug>
idl eases readability a lot

[04:56:01.0000] <smaug>
usually one just needs to see the idl to get the big picture of how the API works

[04:56:04.0000] <annevk>
I don't disagree, but it has sketches that are fairly similar to that

[04:56:08.0000] <smaug>
with Streams...that doesn't happen

[04:56:26.0000] <annevk>
E.g., https://streams.spec.whatwg.org/#rs-class

[04:56:36.0000] <annevk>
What it calls "class definition" is basically IDL

[04:57:07.0000] <smaug>
that doesn't tell what is being returned for example

[04:57:23.0000] <smaug>
which is rather important to understand what happens

[04:57:44.0000] <annevk>
That is a good point

[04:57:45.0000] <smaug>
or what the params are

[04:57:46.0000] <annevk>
Domenic: ^^

[04:58:24.0000] <smaug>
pipeTo. It takes some dest? Is that another stream or some reader or what?

[04:59:01.0000] <smaug>
(just as an example)

[05:04:50.0000] <smaug>
annevk: what does ? mean in "Let typeString be ? ToString(type)."

[05:05:21.0000] <annevk>
smaug: rethrow the exception

[05:06:20.0000] <annevk>
smaug: I tried to express your "class description" concerns in https://github.com/whatwg/streams/issues/45#issuecomment-255363252

[05:07:30.0000] <smaug>
thanks

[05:08:30.0000] <smaug>
that ? stuff is such that webidl nicely hides from the reader, and from spec writer.

[05:08:59.0000] <annevk>
smaug: not really, we mostly have to write "Rethrow the exception" in a bunch of places

[05:09:08.0000] <annevk>
smaug: unless you're only talking about initial argument conversion

[05:09:10.0000] <smaug>
not when passing parameters

[05:09:18.0000] <smaug>
you get the type validation for free from webidl

[05:09:31.0000] <annevk>
sure, but that's not all ? is good for of course

[05:09:57.0000] <smaug>
sure. But how often do we need to explicitly throw stuff elsewhere?

[05:10:16.0000] <smaug>
comparing to how common it is to pass arguments

[05:12:17.0000] <annevk>
smaug: for some good news: https://github.com/whatwg/html/pull/1944

[05:13:07.0000] <smaug>
annevk: btw, I like the idea using fetch for two way communication, but while designing that, please keep the progress tracking in mind

[05:14:49.0000] <smaug>
(I like the approach even if it makes the two way communication less trivial than what WebSocket API has. I guess we create something on top of fetch to make it less annoying to create all the needed objects for reading and writing)

[05:18:19.0000] <annevk>
Someone could literally write WebSocket over Fetch

[05:27:01.0000] <smaug>
well, the API part

[05:27:11.0000] <smaug>
what I'm hoping we provide good APIs in the platform too

[05:27:25.0000] <smaug>
so that one doesn't need to rely on random script libraries to get simple things done easily

[05:27:35.0000] <smaug>
in this case at least

[05:27:51.0000] <smaug>
in general providing low level stuff is ofc the right thing to do

[05:28:39.0000] <annevk>
I think the problem we've had so far is that we exposed seemingly simple things in simple ways and then it turned out folks actually wanted to do complicated things

[05:28:39.0000] <smaug>
(but whatever higher level API might be added, that could happen way later once we know how the fetch is being used)

[05:29:12.0000] <annevk>
So the new approach is to add APIs that enable complicated things and then maybe add simple APIs on top later once we're confident they hit the 80/20 mark

[05:29:40.0000] <annevk>
Although a whole lot of fetch() so far is managing to do both

[05:29:54.0000] <annevk>
Which is kinda nice

[05:33:03.0000] <smaug>
annevk: how will two-way fetch with streams provide messaging style communication?  Or will the web app need to split the data from stream and detect what might form one particular message?

[05:35:59.0000] <annevk>
smaug: the latter

[05:36:28.0000] <annevk>
smaug: we just expose bytes going to the server and bytes coming from the server

[05:37:06.0000] <annevk>
smaug: and the initial set of bytes going to and coming from has some semantic wrapper that we call HTTP headers and are exposed as such

[05:37:38.0000] <annevk>
(ignoring the TLS wrapper here since there's no way we're going to expose that)

[05:51:21.0000] <annevk>
GitHub is less responsive today for anyone else?

[05:52:33.0000] <jgraham>
annevk: DDOS on DynDNS

[05:57:00.0000] <zcorpan>
MikeSmith: https://github.com/whatwg/html/pull/1945 -- i considered rewriting the rules about what to consider part of a group into an algorithm, it seems a bit hard to follow like this with div adding complexity

[06:01:10.0000] <MikeSmith>
/me looks at https://github.com/whatwg/html/pull/1945

[06:06:00.0000] <MikeSmith>
zcorpan: on the one hand it seems to me like for stating document-conformance requirements with authors are the intended reader, we probably want to avoid specifying the requirements in the form of an algorithm

[06:06:40.0000] <MikeSmith>
but this case is maybe exceptional enough that it would actually be appropriate and maybe better

[06:06:58.0000] <zcorpan>
MikeSmith: the rules i'm referring to are not about the content model, but about "getting the name-value groups"

[06:07:13.0000] <MikeSmith>
ah yeah true

[06:07:41.0000] <MikeSmith>
yeah so authors don’t need to care about this anyway, right?

[06:07:50.0000] <MikeSmith>
or do they for CSS reasons or something?

[06:53:51.0000] <zcorpan>
nope, they don't. it's in <div w-nodev>

[06:54:29.0000] <zcorpan>
it's for tools getting the semantic juice out of an html document, should they exist

[06:54:59.0000] <zcorpan>
i'm also happy to leave it as is for now

[07:10:50.0000] <nox>
Would it be an improvement if I manage to express https://html.spec.whatwg.org/multipage/syntax.html#markup-declaration-open-state in terms more similar to the 78 other states?

[07:13:31.0000] <annevk>
nox: yeah, maybe

[07:13:39.0000] <annevk>
nox: hard to say upfront

[07:39:28.0000] <nox>
annevk: I don't like that it seems to be the only state that does some sort of look-ahead reading.

[09:47:57.0000] <rbyers>
annevk, foolip: what is the current status of the URL interop issues you mention.  Do we even know who in blink owns this space?  Is there a crbug?

[09:51:18.0000] <annevk>
rbyers: sleevi is helping some, not sure about Blink side

[09:51:38.0000] <tantek>
so, github

[09:51:43.0000] <annevk>
rbyers: mostly discussion still about what to do

[09:51:51.0000] <annevk>
tantek: yup

[09:53:44.0000] <rbyers>
annevk: Ok.  Is there a github issue to refer to?  I'm just trying to figure out which blink TL this would fall under (or if I need to do another: "this area appears to be unowned" push).  Filing a crbug (eg: "URL is not interoperable" or whatever, with a link to the spec issue) would help because then we have our existing process of "what labels should this

[09:53:44.0000] <rbyers>
have, then what team is accountable for that label" :-)

[09:55:20.0000] <annevk>
rbyers: https://github.com/whatwg/url/issues/150

[09:55:43.0000] <annevk>
rbyers: https://github.com/whatwg/url/issues/148

[09:55:49.0000] <rbyers>
In general, the best way to get anything from the blink project (even if in the end there's no blink code changes necessary) is to file a blink bug.  That invokes all our project management discipline (to the extent we have any anyway <grin>).

[09:56:00.0000] <annevk>
rbyers: and more in that repo

[09:56:39.0000] <annevk>
rbyers: I have filed URL issues before and the result wasn't great

[09:57:16.0000] <rbyers>
annevk: ok, sorry to hear that. point me to those issues and I can follow up internally using them as examples.

[09:58:08.0000] <annevk>
rbyers: will try to remember, supposed to be doing something else now 😊

[09:58:08.0000] <rbyers>
(we're definitely not consistent across teams here yet, but it's now part of my job to try to improve that - eg. via better bug discipline, metrics we're tracking around bugs, etc.)

[09:58:38.0000] <annevk>
rbyers: if you can look up issues filed by me should be easy enough btw

[09:59:01.0000] <rbyers>
Some teams are very good at interop bug discipline already, so for some issues just filing a bug is likely to have the right result :-)

[09:59:05.0000] <rbyers>
Ok, I'll search for URL bugs

[09:59:07.0000] <rbyers>
filed by you

[10:41:55.0000] <Domenic>
OK, so, what work can I do that doesn't require GitHub...

[10:42:23.0000] <annevk>
GitHub works here

[10:42:44.0000] <KiChjang>
the west coast can't access GH

[10:42:49.0000] <annevk>
Heh

[10:43:00.0000] <annevk>
Domenic is east coast though

[10:43:42.0000] <Domenic>
I heard east coast got it worst

[10:43:46.0000] <annevk>
Domenic: DOM snapshots

[10:43:51.0000] <Domenic>
hmmm

[10:43:52.0000] <jgraham>
It was down here not long ago

[10:44:00.0000] <jgraham>
So it seems to be in and out everywhere

[10:44:01.0000] <annevk>
Domenic: not sure if that's feasible without GitHub though

[10:44:17.0000] <Domenic>
Might be. Hmm.

[10:44:32.0000] <tantek>
Domenic, you can review CSS WG editor's drafts especially those going to CR soon ;) https://drafts.csswg.org/

[10:44:52.0000] <KiChjang>
so basically 'murrica is not doing fine

[10:44:55.0000] <KiChjang>
must be those russians

[10:45:06.0000] <annevk>
tantek: not a bad idea for any drafts containing APIs

[10:45:28.0000] <Domenic>
tantek: but where would i file issues

[10:46:07.0000] <annevk>
Domenic: post-its that you fax to TabAtkins

[10:46:17.0000] <tantek>
Domenic, on your own website presumably, with your server auto-POSSEing them to www-style and to github once it comes back up

[10:46:32.0000] <annevk>
Domenic: ooh, print them out marcosc_-style and use a marker

[10:47:11.0000] <TabAtkins>
It took me a while to realize exactly what level the snark that named me was operating on.

[10:47:39.0000] <annevk>
TabAtkins: level 3?

[10:48:19.0000] <annevk>
I guess y'all saw https://twitter.com/bcrypt/status/789510213237895168 already

[10:48:51.0000] <Domenic>
Ah Twitter is working again

[10:49:02.0000] <TabAtkins>
And broken for me again. :(

[10:49:10.0000] <TabAtkins>
goddam nation state attacks

[10:49:41.0000] <tantek>
TabAtkins, that's ok, you have your own website right?

[10:49:54.0000] <TabAtkins>
Doesn't help me *read other people's tweets*.

[10:50:11.0000] <TabAtkins>
Also: I can't tell how many people like my selfies on my own website.

[10:50:25.0000] <tantek>
TabAtkins: if you can't read them, chances are, they can't write them either

[10:50:26.0000] <Domenic>
Ooh interesting 192.30.253.113 http://github.com  151.101.44.133 http://assets-cdn.github.com

[10:50:43.0000] <tantek>
no https?

[10:50:51.0000] <TabAtkins>
I have no idea what point you're trying to make, Tantek.

[10:51:03.0000] <Domenic>
I actually typed github.com but IRCCloud adding the http://

[10:51:18.0000] <Domenic>
Or, hmm, I copied from Twitter which added them.

[10:51:29.0000] <tantek>
TabAtkins, I can help you with that "how many people like my selfies on my own website"

[10:51:30.0000] <annevk>
Oh, exciting https://github.com/blog/2267-introducing-github-community-guidelines

[10:51:52.0000] <Domenic>
Oh but it does seem that those IPs don't match the certificate

[10:52:12.0000] <annevk>
GitHub basically helping out with CoCs to some extent

[10:52:41.0000] <KiChjang>
the raw IP of GH doesn't seem to be doing me any good

[11:03:52.0000] <TabAtkins>
KiChjang: I suspect the GH servers do enough talking between each other using DNS that they can't actually function at the moment.

[11:04:17.0000] <tantek>
TabAtkins the larger point is that we should all be posting such content on our own web sites first, and then syndicating copies to where "audiences" are like Twitter, GitHub etc.

[11:04:55.0000] <TabAtkins>
I know your larger point, I'm just confused about how what you're saying relates to my specific problem, which is that I wanted to read someone's else's tweet and can't right now.

[11:04:59.0000] <tantek>
that way when those silos go down due to Russian attacks, we can keep posting on our own servers, you know, like the internet was designed to be resilient to Russian attacks on silos ;)

[11:06:22.0000] <tantek>
ah, for multiple non-DNS availability of URLs, you'll have to look at archive.org, possibly Google's cache, and DHTs like IPFS if you want the bleeding edge

[11:08:36.0000] <gavinc>
I'm not sure how more servers helps with attacks on DNS infrastructure but otherwise generally agree

[11:14:11.0000] <jgraham>
GH seems to work well enough from here right now for me to create a PR. But not well enough for travis to run.

[12:22:09.0000] <KiChjang>
Domenic, has XHR been rewritten to make use of promises?

[12:22:19.0000] <Domenic>
KiChjang: yes, it's called fetch

[12:22:36.0000] <KiChjang>
oh, the fetch API

[12:23:40.0000] <KiChjang>
if i understand correctly, fetch is still a relatively new thing, and was only limited to the use case of XHR

[12:24:43.0000] <KiChjang>
but i think the idea is to use fetch everywhere in places where a network call is required

[12:25:02.0000] <KiChjang>
e.g. loading images, <script>, <link> and so on

[12:25:07.0000] <KiChjang>
even hyperlinks

[12:25:16.0000] <Domenic>
There's a difference between the the process of fetching and the fetch API

[12:25:36.0000] <Domenic>
loading images, <script>, <link>, XHR, and fetch() (the fetch API) all use the process of fetching

[12:26:22.0000] <KiChjang>
was fetching only spec'd for XHR before though?

[12:26:44.0000] <Domenic>
Not really

[12:26:54.0000] <Domenic>
It was specced for everything, spread throughout various places

[12:27:00.0000] <Domenic>
HTML had something vaguely fetch-like for a while

[12:27:04.0000] <Domenic>
Other places just waved their hands

[12:44:44.0000] <tobie>
Grr. Can't push to GH but navigate to the website. How can I share DNS caches between these?

[12:55:02.0000] <tantek>
hey TabAtkins re *read other people's tweets* - try looking up their URLs on Bing - worked for me with https://twitter.com/bcrypt/status/789510213237895168

[12:55:11.0000] <tantek>
http://www.bing.com/search?q=https%3A%2F%2Ftwitter.com%2Fbcrypt%2Fstatus%2F789510213237895168&go=Submit+Query&qs=ds&form=QBLH

[12:56:50.0000] <KiChjang>
tobie, you might wanna add the IP for github to your hostfile

[12:57:06.0000] <KiChjang>
skip DNS lookup altogether

[12:58:11.0000] <KiChjang>
192.30.253.113 github.com

[12:58:11.0000] <KiChjang>
151.101.4.133 assets-cdn.github.com

[12:58:17.0000] <KiChjang>
but it should be fine by now

[12:58:26.0000] <KiChjang>
as in, the DNS service for GH should be back up

[13:03:20.0000] <tantek>
GH DNS still down here

[13:03:57.0000] <KiChjang>
i hear there's another DDoS attack on the west coast

[13:06:13.0000] <tantek>
we're on at least #3 for the day

[13:09:09.0000] <Domenic>
TabAtkins: do you know if <dfn data-export>auxiliary browsing contexts</dfn> will make it into shepherd as "auxiliary browsing context"? or just "auxiliary browsing contexts" (plural)

[13:10:21.0000] <TabAtkins>
The plural, tho Bikeshed's variation handling will let the singular link to that.  (It doesn't handle the transitive closure of variations, tho, so it won't link "auxiliary browsing context's" to the plural.)

[13:10:47.0000] <Domenic>
so i should probably put data-lt="singular", basically

[13:11:19.0000] <TabAtkins>
Ideally, yes.

[13:11:34.0000] <TabAtkins>
(Or phrase the sentence such that the term appears in its base form.)

[13:19:31.0000] <tobie>
ty KiChjang. Still down here in Switzerland.

[13:22:00.0000] <annevk>
tobie: maybe close to Geneva 😛

[13:22:18.0000] <annevk>
Has been working fine here

[13:22:18.0000] <tobie>
annevk: you're ok?

[13:22:33.0000] <annevk>
Bit slow now and then, mostly okay

[13:22:45.0000] <tobie>
annevk: could it be ISP related?

[13:23:05.0000] <annevk>
No idea

[13:35:17.0000] <tantek>
GH seems up now, here on the West coast at least

[14:19:55.0000] <TabAtkins>
annevk, Domenic: Periodic reminder that both HTML and DOM define case-(in)sensitive, and it would be great if only one of them did.

[14:20:52.0000] <tantek>
TabAtkins: and CSS too right?

[14:21:04.0000] <TabAtkins>
No, CSS now links it.

[14:21:08.0000] <tantek>
to which?

[14:21:31.0000] <TabAtkins>
Whichever one is arbitrarily chosen due to Python's dict ordering.

[14:21:39.0000] <TabAtkins>
At the moment, looks like HTML.

[14:22:39.0000] <tantek>
anyone here have any opinions on http://www.w3.org/TR/presentation-api/ or http://www.w3.org/TR/remote-playback/ ?

[14:23:26.0000] <Domenic>
TabAtkins: did you ever file an issue on that?

[14:23:37.0000] <TabAtkins>
Not yet, I don't think.

[14:32:51.0000] <jyasskin>
tantek: What sort of opinions are you looking for? I might be able to get Mark Foltz to appear.

[14:33:26.0000] <tantek>
jyasskin: very coarse. It seems like the work is proceeding reasonably and is reasonably minimally scoped.

[15:23:08.0000] <gsnedders>
TabAtkins: wait, BS just arbitrarily picks one when multiple definitions of a term exist? that sounds like it could end badly

[15:24:54.0000] <jyasskin>
We shouldn't define terms multiple times.

[15:25:04.0000] <jyasskin>
BS does warn when it finds multiple definitions.

[15:58:42.0000] <gsnedders>
jyasskin: yeah, I agree we shouldn't, but I think it's a touch too easy to accidentally end up with them


2016-10-22
[20:15:38.0000] <rniwa>
Domenic: yt?

[21:09:24.0000] <annevk>
Domenic: TabAtkins: there's a bunch of low-level terms that don't really belong anywhere specifically. I oft wonder if we should create a Terms Standard or some such to collect them and define case-sensitive, ASCII uppercase, etc.

[21:10:29.0000] <annevk>
Also yeah, an issue would help

[06:00:39.0000] <tobie>
annevk: +1 to "terms standard"

[06:01:21.0000] <tobie>
annevk: or whatever it would be called

[06:15:46.0000] <tobie>
is "Return |function|.\[[Call]](|map|, |arguments|)."

[06:15:46.0000] <tobie>
a correct replacement for:

[06:15:46.0000] <tobie>
"Return the result of calling the \[[Call]] internal method of |function| with |map| as |thisArg| and |arguments| as |argumentsList|."

[06:16:58.0000] <tobie>
Last step of: https://heycam.github.io/webidl/#dfn-forwards-to-the-internal-map-object

[06:17:49.0000] <tobie>
^ Domenic

[08:40:04.0000] <Domenic>
tobie: yes, however, these days it's even better to do Call(|function|, |map|, |arguments|) using https://tc39.github.io/ecma262/#sec-call

[08:41:27.0000] <Domenic>
There's a whole slew of these forwarding helpers, Call(), Get(), HasOwnProperty(), etc. which mostly just do minor things like assert preconditions or default arguments for you or similar

[09:28:45.0000] <tobie>
Domenic: cool, thanks.

[10:01:46.0000] <tobie>
When are the ! (return abrupt?) and ? (whatever that one does) constructs useful?

[10:43:43.0000] <annevk>
tobie: ? means that you rethrow

[10:44:06.0000] <annevk>
tobie: ! means that you know it's not gonna throw

[10:50:38.0000] <tobie>
annevk: oh. It looked way more complicated than that on the ES side. :D

[12:28:26.0000] <gsnedders>
does anyone have any stats on scripts in SVG?

[12:31:57.0000] <gsnedders>
like, how common they are, what % of SVGs

[13:06:49.0000] <tobie>
Domenic: wouldn't it be more appropriate to set the [[Extensible]] slot to false and not touch the methods instead?

[13:08:05.0000] <tobie>
Domenic: re https://github.com/heycam/webidl/pull/197

[13:30:44.0000] <Domenic>
tobie: the idea is actually to stop you from setting the extensible slot to false

[13:31:01.0000] <Domenic>
I.e. stop Object.preventExtensions and friends from doing so.

[13:32:54.0000] <tobie>
Yes, this is absolutely obvious in retrospect. Guess I had a brain fart along the way.

[13:36:02.0000] <tobie>
Domenic: So what you want to do is basically turn [[PreventExtensions]] into a noop that returns false (it failed to set [[Extensible]] to false) to trigger the TypeError in SetIntegrityLevel.

[13:37:14.0000] <Domenic>
Yes exactly :)

[13:37:29.0000] <tobie>
Domenic: which is what you've been saying all along, but now I understand why.

[13:37:31.0000] <tobie>
:)

[13:37:39.0000] <Domenic>
(It's gotta return false so callers know that you're refusing to prevent extensions)

[13:39:37.0000] <tobie>
Domenic: I hadn't realized that the return value of [[PreventExtensions]] was whether the operation had succeeded or not.

[13:39:52.0000] <tobie>
Got confused by the sentence that read:

[13:41:07.0000] <tobie>
If [[PreventExtensions]] returns true, all future calls to [[IsExtensible]] on the target must return false and the target is now considered non-extensible.

[13:43:22.0000] <tobie>
it does make sense now that I read it, but anyway.

[14:00:24.0000] <younder>
ok

[14:01:41.0000] <younder>
confusing to me too


2016-10-23
[00:54:47.0000] <tobie>
annevk: sounds like you're around: any idea what |value| in step 3 of https://heycam.github.io/webidl/#invoke-a-callback-function corresponds to?

[00:56:47.0000] <annevk>
tobie: maybe should be callable?

[00:57:00.0000] <annevk>
tobie: also X there seems wrong?

[00:57:40.0000] <annevk>
tobie: seems X should be F

[00:58:52.0000] <tobie>
I'm sort of hesitant to fix this as part of https://github.com/heycam/webidl/pull/198

[00:58:55.0000] <tobie>
Thoughts?

[00:59:02.0000] <tobie>
annevk: ^

[01:00:07.0000] <tobie>
I've done a bunch of small straightforward fixes already, but this one seems a lot more involved.

[01:07:12.0000] <annevk>
tobie: yeah, best as separate PR

[01:07:42.0000] <annevk>
tobie: don't wanna mix editorial refactoring and normative fixes

[01:08:10.0000] <annevk>
tobie: even though that is often tempting 😊

[01:08:16.0000] <tobie>
annevk: agreed. It's a thin line in some instances, though.

[01:08:43.0000] <tobie>
annevk: are https://github.com/heycam/webidl/pull/198/commits/8d188f5b648be8976a36d5586a1468988fdead97

[01:08:57.0000] <tobie>
and https://github.com/heycam/webidl/pull/198/commits/ad0c8fd0a1a15cb68d9ee4b5fff7fea66ef52734 fine?

[01:09:10.0000] <tobie>
annevk: or should I back out of them?

[01:10:20.0000] <annevk>
tobie: alternative is to fix and enumerate in commit message

[01:10:57.0000] <annevk>
tobie: so that it's very clear what you intended to change

[01:11:24.0000] <annevk>
tobie: that will help those doing archeology later

[01:13:02.0000] <tobie>
annevk: squashing will make those small changes suoer hard to find.

[01:13:14.0000] <tobie>
annevk: I'm torned, now.

[01:13:18.0000] <tobie>
*super

[01:17:14.0000] <annevk>
tobie: up to you

[01:17:35.0000] <annevk>
tobie: lots of refactoring will follow due to ES6

[01:18:01.0000] <annevk>
tobie: so might not be worth it too worry about it too much

[01:18:12.0000] <tobie>
ok

[01:21:58.0000] <tobie>
annevk: ta

[05:25:22.0000] <tobie>
In Bikeshed, is there a way to add ignored vars at the algorithm level?

[05:26:05.0000] <tobie>
Ideally this should not be necessary once we have a way to specify inputs

[05:26:21.0000] <tobie>
but in the meantime, it would be quite helpful

[05:26:30.0000] <tobie>
^ TabAtkins

[05:39:33.0000] <smaug____>
/me wonders why we have SecureContext in the way it is spec'ed now. Limited to some features but not others. Like, SharedWorkers are handled but very similar BroadcastChannel isn't. Causes false feeling of some safety.

[06:06:12.0000] <smaug____>
annevk: about two-way fetch and using it for similar to WebSocket. One thing I was thinking is Blob handling. implementations may store the received blob data in temporary files and just pass blob to JS

[06:06:34.0000] <smaug____>
(that is certainly happening with XHR, because it is used to download huge files which can't be kept in memory all the time)

[06:06:46.0000] <smaug____>
annevk: supporting that with fetch could be rather tricky

[08:47:12.0000] <JakeA>
annevk: TabAtkins: I had a bit of a brain-dump about navigation transitions https://github.com/jakearchibald/navigation-transitions

[08:53:46.0000] <annevk>
JakeA: the fact that navigate itself is somewhat non-interoperable still and poorly understood makes me a little nervous

[08:54:28.0000] <JakeA>
annevk: Yeah, that's a blocker for transitions


2016-10-24
[01:04:41.0000] <annevk>
mathiasbynens: did you write a PR for https://github.com/whatwg/encoding/issues/73#issuecomment-255601209?

[01:43:44.0000] <annevk>
Do we need some kind of "bug" label for stuff like https://github.com/whatwg/html/issues/1950?

[01:44:04.0000] <annevk>
For those "normative change" doesn't really seem appropriate

[01:44:11.0000] <annevk>
Although technically it is one

[01:54:20.0000] <annevk>
heycam: ping for https://github.com/whatwg/dom/pull/347

[01:54:20.0000] <botie>
will do

[01:54:30.0000] <heycam>
/me looks

[02:19:20.0000] <annevk>
zcorpan: https://github.com/whatwg/html/pull/1717 is in need of some action

[02:19:29.0000] <annevk>
zcorpan: it's quite old and not marked as "do not merge"

[02:20:00.0000] <annevk>
zcorpan: I guess at this point I'd prefer that we have some tests before landing

[02:20:24.0000] <zcorpan>
annevk: yeah, i wanted to write tests for it

[02:20:42.0000] <zcorpan>
sorry for the delay

[02:21:04.0000] <annevk>
No worries, I thought it might have dropped from your radar

[02:21:30.0000] <annevk>
I also merged a trivial 12-day old PR just now that was seemingly forgotten

[02:29:07.0000] <annevk>
foolip: would be good to get https://github.com/w3c/web-platform-tests/pull/4043 merged as the currently checked in version of the test doesn't run properly in Firefox

[02:29:51.0000] <foolip>
annevk: just needs rubberstamping?

[02:32:31.0000] <annevk>
foolip: yeah, pretty much

[02:34:03.0000] <foolip>
annevk: "pick the first with activation behavior <input type=checkbox>" seems to fail everywhere, is it for a good reason?

[02:38:01.0000] <annevk>
foolip: is that the one about bubbling?

[02:38:44.0000] <foolip>
annevk: oh, wait, it's noe one of the new tests in this PR, nevermind

[02:40:01.0000] <annevk>
foolip: there might be one that fails everywhere where I argued browsers should change

[02:40:07.0000] <foolip>
annevk: but why is the disabled test using nested input elements, is there some significance to that?

[02:40:57.0000] <annevk>
foolip: yeah, to make sure the disabled input is not skipped when finding an element with activation

[02:41:25.0000] <foolip>
annevk: oh, so it could have been any parent with activation behavior

[02:41:44.0000] <annevk>
Yeah

[02:45:44.0000] <foolip>
annevk: should I merge? you have the power, right?

[02:52:23.0000] <annevk>
foolip: I can do it post-break

[04:54:01.0000] <mathiasbynens>
annevk: ah, no I didn’t, sorry

[04:56:34.0000] <annevk>
mathiasbynens: I ended up writing one, it wasn't too hard

[05:36:38.0000] <smaug>
annevk: I can't seem to find in the spec where 'enter' causes a click to be dispatched

[05:37:19.0000] <annevk>
smaug: "An element that has its tabindex focus flag set but does not otherwise have an activation behavior defined has an activation behavior that does nothing."

[05:38:01.0000] <smaug>
annevk: that does say anything about 'enter'

[05:38:06.0000] <smaug>
doesn't

[05:38:39.0000] <annevk>
smaug: there's another section that says

[05:38:41.0000] <smaug>
I mean literally, what somewhere says keyevents for 'enter' should trigger click

[05:38:41.0000] <annevk>
"The user agent should allow the user to manually trigger elements that have an activation behavior, for instance using keyboard or voice input, or through mouse clicks. When the user triggers an element with a defined activation behavior in a manner other than clicking it, the default action of the interaction event must be to fire a click event at the

[05:38:41.0000] <annevk>
element."

[05:39:02.0000] <smaug>
ok, not defined then in this spec

[05:39:17.0000] <annevk>
smaug: both of those quotes are from HTML

[05:40:05.0000] <smaug>
annevk: right. Nothing talks about 'enter'.

[05:43:00.0000] <annevk>
smaug: oh right, that's somewhat up to the user agent, but I don't think Firefox makes it work with any key

[05:43:27.0000] <annevk>
smaug: and "Enter" (or maybe "Space") is a rather obvious choice since it works elsewhere already, like for <a> and <button type=submit>

[05:44:42.0000] <smaug>
for links at least it is 'enter'

[05:45:01.0000] <smaug>
annevk: and if 'enter' is defaultPrevented = true, click won't be dispatched

[05:45:10.0000] <smaug>
stuff to spec somewhere I guess

[05:45:28.0000] <annevk>
That's what the quote already says

[05:45:56.0000] <annevk>
Firing "click" would be the "default action" (so when canceled not fire)

[05:46:14.0000] <annevk>
Of course, "default action" needs to be reworded and indeed, we need an interaction event spec

[05:46:32.0000] <annevk>
I guess the main question here is if we can make this change at all

[05:47:05.0000] <smaug>
annevk: which change?

[05:47:15.0000] <smaug>
you mean browsers following the spec?

[05:47:31.0000] <annevk>
smaug: allow <div tabindex onclick=...> to be triggered through a keyboard

[05:47:41.0000] <smaug>
right

[05:48:16.0000] <smaug>
would need to write some quite complicated telemetry before such change could be done

[05:49:26.0000] <smaug>
and even then the telemetry wouldn't tell anything too accurate

[05:49:57.0000] <nox>
annevk: Shouldn't we put in the spec that 20 nested document.write is the limit?

[05:50:06.0000] <nox>
(AFAIK WebKit and Firefox both do that.)

[05:59:22.0000] <annevk>
nox: I guess we could

[06:02:59.0000] <nox>
annevk: Ok. Filed. https://github.com/whatwg/html/issues/1954

[06:24:51.0000] <smaug>
annevk: is XHR exposed to service workers?

[06:25:04.0000] <annevk>
smaug: no

[06:25:26.0000] <smaug>
though, doesn't matter. Fetch without streaming could use blobs

[06:25:35.0000] <smaug>
in efficient way

[06:53:18.0000] <zcorpan>
annevk: re https://github.com/w3c/web-platform-tests/pull/4043#issuecomment-255387868 arrow functions have an implied return i think

[06:53:53.0000] <zcorpan>
oh Domenic commented on that already

[06:54:20.0000] <annevk>
yeah

[06:57:35.0000] <annevk>
Hmm, an update of macOS requires an update to command-line tools?

[06:57:42.0000] <annevk>
Got a linker error while playing with Pascal

[06:59:49.0000] <Ms2ger>
You might need to agree to the eula again or something

[07:00:27.0000] <annevk>
The amount of boilerplate Hixie's DOM API requires compared to JavaScript seems rather excessive

[07:10:33.0000] <gsnedders>
annevk, nox: IIRC document.write limit is needed for web compat (!)

[07:13:49.0000] <nox>
gsnedders: All the reason more to specify it, right?

[07:31:12.0000] <annevk>
I might have figured out a fix for https://github.com/whatwg/html/issues/46

[07:31:40.0000] <annevk>
Not making me a big fan of Pascal though

[07:32:08.0000] <jgraham>
I'm sure both pascal users will be heartbroken

[07:32:57.0000] <Ms2ger>
/me is

[07:33:15.0000] <annevk>
jgraham: I'm somewhat surprised I actually got it to work

[07:35:13.0000] <annevk>
zcorpan: what's the status on https://github.com/whatwg/wattsi/pull/21? wontfix?

[07:44:11.0000] <Domenic>
annevk: woohoo on https://github.com/whatwg/wattsi/pull/30

[07:45:07.0000] <zcorpan>
annevk: yeah i guess

[07:51:45.0000] <MikeSmit1>
just now opened https://github.com/whatwg/html/pull/1958 for annevk’s https://github.com/whatwg/html/issues/1943 “Meta: update TEAM PR advice”

[07:52:49.0000] <MikeSmit1>
I guess all editors should review that to make sure that in their environment the steps actually work as described

[07:53:26.0000] <MikeSmith>
/me steps away for the next ~2 hours

[08:21:26.0000] <annevk>
MikeSmith: wow, ended up a lot more detailed than I thought

[08:22:03.0000] <Ms2ger>
Domenic, is there any reason to use the incumbent script settings object for importScripts()? It's always going to be the same as the relevant or current one anyway

[08:26:41.0000] <zcorpan>
MikeSmith: FYI https://github.com/whatwg/html/pull/1945#discussion_r84686760

[08:31:39.0000] <Domenic>
Ms2ger: no, we should fix that, nice

[08:32:05.0000] <Ms2ger>
Yay :)

[08:33:13.0000] <Ms2ger>
Domenic, fwiw, I'm trying to audit all the places where Servo sets the "current Realm", so more bugs may be coming :)

[08:34:29.0000] <Domenic>
Ms2ger: woohoo, should be fun!

[08:34:54.0000] <Ms2ger>
Well, I sure am glad I'm paid for it :)

[08:51:14.0000] <Domenic>
I've asked before but I'll try again: anyone know a way to bypass the wizard in Firefox's Bugzilla?

[08:52:19.0000] <jgraham>
Which wizard?

[08:52:49.0000] <Domenic>
The one that makes me say whether it's Firefox or Thunderbird or whatever, then asks for steps to reproduce etc.

[08:53:00.0000] <Domenic>
I just want something like WebKit has with a raw Bugzilla editing interface

[08:53:10.0000] <Domenic>
Right now I am at https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=bugForm%7CCore%7CDOM%3A+Core+%26+HTML

[08:53:28.0000] <jgraham>
It's the URL without format=guided

[08:53:41.0000] <jgraham>
But you might get redirected there unless you have editbugs or something

[08:54:05.0000] <Domenic>
Yeah redirected

[08:54:17.0000] <jgraham>
I think you need editbugs then

[08:55:31.0000] <jgraham>
https://bugzilla.mozilla.org/page.cgi?id=get_permissions.html

[08:55:55.0000] <jgraham>
(I am sort of guessing though; I could just ask someone)

[08:55:55.0000] <Domenic>
Excellent, thank you

[08:56:51.0000] <jgraham>
(I was right)

[08:59:37.0000] <Ms2ger>
Domenic, you want it for d⊙.?

[09:00:19.0000] <Domenic>
Ms2ger: yep!

[09:05:52.0000] <gsnedders>
Ms2ger: if you're giving out editbugs…

[09:06:33.0000] <Ms2ger>
I sent email, which is being held for moderation

[09:06:45.0000] <Ms2ger>
I'll see who answers the call :)

[09:07:04.0000] <Ms2ger>
Domenic, allegedly done

[09:07:13.0000] <Domenic>
Ms2ger: \o/ thank you!

[09:07:33.0000] <Domenic>
yesss no more wizard

[09:07:45.0000] <Ms2ger>
gsnedders, geoffers+mozilla@?

[09:08:49.0000] <gsnedders>
Ms2ger: yeah

[09:11:34.0000] <jgraham>
Domenic: Seems like we will also now get a pref to disable it

[09:12:00.0000] <Ms2ger>
gsnedders, same

[09:20:14.0000] <Domenic>
annevk: DOM did not deploy again :(

[09:22:08.0000] <annevk>
Domenic: fixed manually, I'm not sure how to reproduce, since GitHub claims things are okay and script still functions

[09:22:31.0000] <Domenic>
annevk: yeah. Well I'll hopefully have time to rewrite it all anyway soon to do auto-building and such.

[09:23:42.0000] <annevk>
TabAtkins: Event's constructor and that of all its subclasses need to point to a single dfn. Is that possible?

[09:46:59.0000] <gsnedders>
is it right to say taht an unhandled JS error will either result in a error or unhandledrejection event on the global object?

[09:54:47.0000] <Domenic>
gsnedders: for some definition of unhandled, sounds correct. Although cross-origin we censor error and just don't fire unhandledrejection.

[09:55:45.0000] <gsnedders>
Domenic: right.

[12:14:43.0000] <zcorpan>
Domenic: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9496749/ was cut off right before "<0.0001%" - maybe add a comment with s/</less than/

[13:00:16.0000] <mathiasbynens>
zcorpan: smells like XSS

[13:00:33.0000] <mathiasbynens>
…or an overly crappy XSS filter

[13:00:38.0000] <zcorpan>
right

[13:01:23.0000] <zcorpan>
makes one wonder if they can be actually XSSed though :-P

[13:01:38.0000] <Domenic>
It's just Markdown

[13:01:51.0000] <Domenic>
I kind of forgot what I typed so I figure I'll just let them look at the source code

[13:02:07.0000] <mathiasbynens>
fair enough

[13:03:03.0000] <zcorpan>
i'm not very confident anyone will look at the bug's source code though

[15:12:09.0000] <KiChjang>
how does one submit a change on whatwg/html again?

[15:12:14.0000] <KiChjang>
is it just by editing the source file?

[15:12:35.0000] <KiChjang>
nvm, i got it mixed up with fetch/xhr

[15:12:42.0000] <KiChjang>
there really is only 1 file to edit

[15:13:21.0000] <KiChjang>
when there's a src.html and a .html file in the repo, which one should be edited?

[15:42:21.0000] <mathiasbynens>
KiChjang: the src one

[15:42:54.0000] <KiChjang>
should i regenerate the .html one if i can?

[15:42:59.0000] <KiChjang>
using bikeshed right?

[15:44:11.0000] <mathiasbynens>
KiChjang: no, Anolis

[15:44:20.0000] <mathiasbynens>
KiChjang: but don’t worry about the generated .html; see https://github.com/whatwg/fetch#pull-requests

[16:31:15.0000] <jyasskin>
Tobie, TabAtkins, Domenic, annevk : I'm out for parental leave. See you in January.

[16:31:29.0000] <TabAtkins>
Congrats and see you later!

[16:31:35.0000] <jyasskin>
:)

[16:51:25.0000] <gsnedders>
jyasskin: congrats!


2016-10-25
[17:51:22.0000] <TabAtkins>
tobie: No way to ignore vars at the algo level right now. I can definitely add it, but most of the time a big "stop freaking out about this" switch is all that's needed.

[17:51:30.0000] <TabAtkins>
Gimme an issue if you want something for it.

[18:15:06.0000] <Domenic>
It seems like most of the problems I see with ignored vars are if they appear once in the algorithm and once in the heading

[18:15:40.0000] <Domenic>
I guess maybe you are supposed to wrap the algorithm div around both the heading and the ol. Not sure how that ends up looking after CSS happens.

[21:25:05.0000] <Netmo>
morning folks. quick question: the HTMLDocument interface is gone, right? there is only the partial interface Document specified in the html spec

[21:48:23.0000] <MikeSmith>
Netmo: yeah

[21:48:43.0000] <MikeSmith>
but the spec still defines HTMLDocument somewhere right?

[21:48:56.0000] <MikeSmith>
/me looks

[21:50:06.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/browsers.html#htmldocument

[21:50:14.0000] <MikeSmith>
> For historical reasons, Window objects must also have a writable, configurable, non-enumerable property named HTMLDocument whose value is the Document interface object.

[22:01:07.0000] <Netmo>
thank you! i suppose that's to avoid HTMLDocument extending from both Document (if text/html) and XMLDocument (if served as xml)

[22:03:24.0000] <Netmo>
which is actually a rather strange thing if it's that the actual reason now that i think of it. wouldn't it make more sense to get rid of xmldocument instead?

[22:03:34.0000] <Netmo>
*XMLDocument interface

[22:05:30.0000] <Netmo>
(sorry for the broken english - not my primary language)

[23:04:13.0000] <MikeSmith>
Netmo: I don’t really know the history

[23:05:00.0000] <MikeSmith>
I think it was originally defined as inheriting from Document

[23:06:02.0000] <MikeSmith>
but then the spec changed at some point to saying that it didn’t inherit from anything

[23:06:45.0000] <MikeSmith>
and the members moved to Document anway

[23:06:47.0000] <MikeSmith>
*anyway

[23:07:08.0000] <MikeSmith>
so it became pointless except for backward compatibility

[23:07:14.0000] <MikeSmith>
something like that

[23:25:13.0000] <annevk>
jyasskin: congrats, enjoy!

[01:28:12.0000] <Netmo>
MikeSmith: would be useful to have a log of all the decision taken and their reason :P thanks, though!

[01:29:29.0000] <MikeSmith>
Netmo: yeah that would be useful but we don’t have a good record for the reason in a lot of cases

[01:29:48.0000] <MikeSmith>
and in some of those cases people actually can no longer remember the reason

[01:30:38.0000] <MikeSmith>
dunno about this specific case though

[01:36:47.0000] <Netmo>
MikeSmith: i know right. even people actually taking the decision could forget about it. it happens to me for way simpler things. i often had to completely re-work out things i did in the past because i didn't write down what led me there. it's really bad :P

[01:40:06.0000] <MikeSmith>
Netmo: yup :)

[01:40:46.0000] <MikeSmith>
anyway as far as spec decisions (for DOM, HTML, etc.) getting made these days, GitHub has helped with that

[01:41:30.0000] <MikeSmith>
I mean as far as helping to have a record for the discussion and reasoning behind the spec changes that get made

[01:42:17.0000] <MikeSmith>
and for having the record in one place at GitHub rather than spread out across mailing lists and bugzilla

[01:44:33.0000] <Netmo>
indeed that's something. in fact i'm going through commits history and closed issues hoping to find something in regard. search didn't help, though

[01:46:18.0000] <Netmo>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=22960 and linked pages

[01:47:42.0000] <MikeSmith>
/me looks at https://www.w3.org/Bugs/Public/show_bug.cgi?id=22960

[01:51:05.0000] <MikeSmith>
so yeah https://github.com/whatwg/dom/issues/221 seems to maybe be what you were originally looking for

[01:51:35.0000] <MikeSmith>
as far as your question “the HTMLDocument interface is gone”

[01:52:21.0000] <Netmo>
i don't even know anymore what the question was :P

[01:53:11.0000] <MikeSmith>
heh

[02:03:15.0000] <tobie>
jyasskin: congrats!!

[02:04:24.0000] <Ms2ger>
What he said

[02:06:52.0000] <tobie>
TabAtkins: yeah--I guess I have weird requirements because I'm working on a very large spec *and* it was converted from something else. Seems like an edge use case.

[02:07:41.0000] <tobie>
TabAtkins: also seems like whatever you're cooking for input/outputs will be much more useful.

[02:08:18.0000] <tobie>
TabAtkins: (i.e. in my cases it feels like these vars are hidden inputs)

[02:46:41.0000] <tobie>
annevk: what do you mean by: https://github.com/heycam/webidl/issues/202#issuecomment-255937886

[02:47:28.0000] <annevk>
tobie: whenever you modify internal methods, you're requiring a JavaScript proxy to implement them in JavaScript

[02:48:04.0000] <annevk>
tobie: e.g., WindowProxy / Location require a proxy

[02:49:07.0000] <tobie>
annevk: how were these implemented before proxies? Only in C++, not in JS?

[02:51:26.0000] <annevk>
tobie: they're not implemented through proxies today I think

[02:51:55.0000] <tobie>
annevk: ok

[02:52:13.0000] <annevk>
tobie: sorry, it's a bit convoluted, I'll try to figure out how to explain it

[02:52:49.0000] <annevk>
tobie: browsers-implemented "platform objects" did various things you could not emulate in JavaScript

[02:52:51.0000] <tobie>
annevk: I think I'm getting used to convoluted explanations now that I've started digging into WebIDL. :)

[02:53:04.0000] <annevk>
tobie: such as indexed getters, named getters, etc.

[02:53:15.0000] <tobie>
annevk: yes

[02:53:58.0000] <annevk>
tobie: TC39 did not like that so they added proxies as a way of explaining those objects (and various more esoteric use cases; membranes)

[02:54:34.0000] <tobie>
annevk: yes, membranes, I remember those from the Caja days

[02:54:36.0000] <annevk>
tobie: however, proxies are not great and what browsers did with indexed getters and named getters and so on is still not seen as good practice

[02:54:50.0000] <Ms2ger>
Gecko uses C++-implemented proxies for all that

[02:55:18.0000] <annevk>
tobie: therefore, ideally any new platform objects we define through IDL do not result in something that ends up requiring a proxy (be it in JavaScript or some C++ thingie)

[02:55:30.0000] <tobie>
annevk: ok

[02:55:34.0000] <tobie>
annevk: that makes sense

[03:41:56.0000] <zcorpan>
annevk: do you have browser bugs filed for /dom/events/Event-dispatch-click.html ? wondering if i should file new bugs for "disconnected form should not submit"

[03:42:29.0000] <annevk>
zcorpan: no bugs

[03:42:49.0000] <annevk>
zcorpan: hoping foolip will automate that

[04:41:57.0000] <foolip>
annevk, zcorpan, yeah, without some tooling I think requiring bugs is excessive

[04:43:57.0000] <annevk>
foolip: still wonder if it might be more beneficial than tests in certain cases

[05:39:42.0000] <zcorpan>
MikeSmith: it appears <dl><script></script></dl> fails validation currently

[06:12:10.0000] <foolip>
annevk: In cases where getting a single vendor to change is the whole point, I believe so, yes.

[06:23:00.0000] <zcorpan>
MikeSmith: https://github.com/validator/validator/pull/390

[07:06:58.0000] <MikeSmith>
zcorpan: I’m confused… https://github.com/validator/validator/pull/390 says “Note that <dl><script></script></dl> previously resulted in anerror; now has no errors.” on IRC earlier you said “it appears <dl><script></script></dl> fails validation currently”

[07:07:49.0000] <zcorpan>
MikeSmith: yes, i think those statements are saying the same thing. read again?

[07:08:53.0000] <zcorpan>
"now" is with the patch applied

[07:08:56.0000] <MikeSmith>
ah

[07:09:03.0000] <MikeSmith>
yeah I see

[07:09:04.0000] <MikeSmith>
OK

[07:36:51.0000] <rodneyre_>
https://github.com/medialize/ally.js/blob/docs/mutate-active-element/docs/tutorials/mutating-active-element.md#specifications <- is that simplification correct, or am I off by one or two universes?

[07:39:33.0000] <zcorpan>
rodneyre_: not sure but my knee-jerk reaction is s/HTML5/HTML/ ;-)

[07:39:57.0000] <rodneyre_>
hehe, fair point - no idea why I still add that 5…

[07:54:02.0000] <zcorpan>
rodneyre_: i think the simplification is correct if you don't have <dialog>s or inert focusable areas. based on your test results, maybe the spec should change when the control group is not a <dialog>?

[07:55:29.0000] <zcorpan>
rodneyre_: (i didn't follow how to run the test or where the test is)

[07:55:38.0000] <rodneyre_>
yeah, in this case I'm ignoring dialogs (which are covered by rules 2 and 3, no?)

[07:56:25.0000] <rodneyre_>
you're looking at the raw markdown, the HTML generated from that will have https://jsbin.com/fesexin/ embedded

[07:57:16.0000] <rodneyre_>
(not exactly made for testharness or something like that, sorry)

[07:57:26.0000] <zcorpan>
rodneyre_: https://html.spec.whatwg.org/multipage/interaction.html#focus-processing-model:focus-fixup-rule-one "...or when it was a dialog in a dialog group and stops being part of that dialog group, or when it starts being inert, ..."; step 3 invokes focus fixup rule one

[07:57:50.0000] <zcorpan>
thx

[08:01:25.0000] <zcorpan>
as an end user, i'd be pretty annoyed if focus was moved to the first focus area in the document

[08:01:29.0000] <rodneyre_>
zcorpan: should I open an issue for this?

[08:01:40.0000] <zcorpan>
rodneyre_: yes please

[08:02:04.0000] <rodneyre_>
if you're a keyboard dependent end user, you gave up being annoyed by shitty web apps a loooooooooong time ago

[08:02:20.0000] <rodneyre_>
we really suck at this…

[08:04:38.0000] <zcorpan>
yeah :-|

[08:04:42.0000] <zcorpan>
gotta go

[08:21:01.0000] <annevk>
:matches and :has are still not implemented?

[08:32:01.0000] <annevk>
Ms2ger: seems you were right all along (re TC39)

[08:32:16.0000] <Ms2ger>
/me whistles

[08:33:06.0000] <annevk>
Ms2ger: guess I should not have confused your issue by suggesting that IDL's upcoming ES6 rewrite might resolve it

[08:35:01.0000] <Ms2ger>
\o/ https://bugzilla.mozilla.org/show_bug.cgi?id=909656

[08:37:50.0000] <annevk>
That is exciting

[09:41:50.0000] <nox>
annevk: I keep procrastinating the implementation of :matches in Servo hah.

[09:47:53.0000] <tobie>
Would really appreciate if someone (heycam|away, annevk, bz, Domenic) could have a look at: https://github.com/heycam/webidl/pull/198#issuecomment-256089978 and vet those 4 commits.

[09:52:43.0000] <annevk>
tobie: look fine modulo verbose List-allocation

[09:54:07.0000] <tobie>
annevk: ta. fixing the list stuff. I didn't know that <<args>> construct existed.

[09:54:36.0000] <annevk>
tobie: note that it's not << but rather some Unicode thingie (in case you didn't notice)

[09:54:55.0000] <tobie>
annevk: I've notice, haven't figured out the key strokes yet

[09:55:02.0000] <tobie>
*noticed

[09:55:15.0000] <annevk>
tobie: cmd+c, cmd+v

[09:55:34.0000] <tobie>
annevk: heh

[09:57:11.0000] <rodneyre_>
« is option+q, » is option+shift+q on a german mac keyboard (which won't help you at all, but … ;)

[09:58:25.0000] <Ms2ger>
I'll try to have a look after my meeting

[10:15:04.0000] <annevk>
tobie: I think the other change that might be needed is that Call needs to be preceded by ? when not preceded by !

[10:15:26.0000] <tobie>
annevk: oh.

[10:16:27.0000] <tobie>
annevk: fwiw, we don't do that in the spec as of now

[10:16:39.0000] <annevk>
tobie: follow-up issue maybe?

[10:16:48.0000] <tobie>
/me cries

[10:16:58.0000] <annevk>
tobie: ECMAScript has that all over

[10:17:10.0000] <annevk>
tobie: and unless we use ReturnIfAbrubt we'll need something like that

[10:17:24.0000] <annevk>
tobie: this is all part of the ES6-ification of IDL

[10:17:48.0000] <annevk>
Or ES2016 or whatever

[10:17:59.0000] <tobie>
annevk: was using Call() part of the ES5-ification?

[10:18:15.0000] <annevk>
tobie: not sure when ECMAScript got Call()

[10:18:26.0000] <annevk>
tobie: but ? was ES6

[10:18:31.0000] <tobie>
ok

[10:18:32.0000] <annevk>
tobie: or even post-ES6

[10:18:54.0000] <annevk>
tobie: before that it was all ReturnIfAbrubt making algorithms twice as long

[10:21:29.0000] <annevk>
tobie: anyway, does seem like a follow-up issue since the current prose doesn't deal with it either

[10:21:34.0000] <tobie>
So I added ! instead of "Assert: |result| is not an abrupt completion." is that correct?

[10:21:41.0000] <annevk>
tobie: yes

[10:22:55.0000] <tobie>
annevk: I'm cargo-culting this right now, which I absolutely hate doing.

[10:24:15.0000] <tobie>
annevk: what it describes doesn't seem _that_ complicated, but the description itself is hard to grasp.

[10:25:33.0000] <tobie>
annevk: so your advice is to leave as is for now and file an issue to do error handling for all Call() calls?

[10:25:44.0000] <tobie>
annevk: or would you prefer I handle those fist?

[10:26:00.0000] <tobie>
*first (i.e. as part of this PR)

[10:26:15.0000] <annevk>
tobie: leave as-is, file an issue to figure out which invocations need to be preceded by ? (can throw) and which by ! (can never throw)

[10:26:39.0000] <annevk>
tobie: the ! you added instead of the assert can stay of course

[10:27:01.0000] <tobie>
annevk: of course re the existing !

[10:27:17.0000] <tobie>
annevk: thanks again

[10:27:33.0000] <annevk>
no worries, this is all super exciting refactoring

[10:27:50.0000] <annevk>
even if cargo culted

[10:28:11.0000] <Domenic>
annevk: is https://github.com/whatwg/html/pull/1935 ready to go in your opinion? leaving aside reset for #1912

[10:29:01.0000] <annevk>
Domenic: I'd kinda prefer it if you don't touch the reset() thing at all, but yeah

[10:29:08.0000] <Domenic>
annevk: sure can do

[10:29:37.0000] <annevk>
Domenic: (note that I already tested reset() and it does indeed fire an isTrusted=true event)

[10:29:46.0000] <Domenic>
Ah excellent

[10:30:15.0000] <Domenic>
Sigh I found another one

[10:30:17.0000] <Domenic>
BeforeUnloadEvent

[10:30:27.0000] <annevk>
Domenic: I suspect everywhere where we have it set to false it's basically wrong

[10:30:39.0000] <annevk>
Domenic: minus click()

[10:31:00.0000] <Domenic>
seems likely

[10:31:22.0000] <annevk>
Domenic: for creating an event? I was thinking of going through the concept-event-dispatch results and seeing which don't use that yet

[10:31:38.0000] <Domenic>
yeah probably wise

[10:31:44.0000] <Domenic>
BeforeUnloadEvent should just be fired

[10:32:41.0000] <annevk>
Domenic: is that not the one that later on checks for any event listeners being triggered?

[10:32:57.0000] <Domenic>
Oh, yep, lol

[10:46:36.0000] <Ms2ger>
Domenic, since you're my go-to EcmaScript guy... The [[x]] notation for record fields is explained really late and is pretty damn hard to find

[10:47:59.0000] <Ms2ger>
Domenic, I think half of my team members who looked at prose using that convention got utterly lost :)

[10:48:54.0000] <Domenic>
Ms2ger: hmm not really sure what to say. Any concrete improvement suggestions I'm sure would be appreciated, but to me it's just a matter of knowing the conventions of specs you're reading... "readonly attribute" meaning getter got me totally lost for a long time and is explained pretty far down in Web IDL.

[10:49:46.0000] <Ms2ger>
Yeah, I'm not really sure

[10:50:32.0000] <Ms2ger>
Somewhat relatedly, I think it's weird that "notational conventions" starts out with a long-winded discussion of syntax ebnf stuff

[10:51:19.0000] <Ms2ger>
I would have expected it to cover the [[]] syntax, at least before using it in the definition of the `!` operator

[10:51:56.0000] <Domenic>
That's fair; maybe notational conventions needs some reorg to be readable top to bottom

[10:52:33.0000] <Ms2ger>
If I had a clear solution in mind, I'd already have filed it :)

[10:52:56.0000] <Ms2ger>
But it feels like there should be some opportunities to make it clearer for first-time readers here

[10:53:00.0000] <Ms2ger>
Anyway

[10:53:01.0000] <Ms2ger>
/me poofs

[11:30:49.0000] <annevk>
Domenic: you should prolly write a post on pollyfills

[11:31:09.0000] <Domenic>
Yeah :-S

[11:31:18.0000] <annevk>
Domenic: I suspect many do not realize badness

[11:45:37.0000] <younder>
are not polfyills described in 'the art of SVG' book?

[11:59:34.0000] <IZh>
Hi! There are number of non-existing anchors in the spec referenced by links: #refsSECURE-CONTEXTS, #dom-domstringmap-namedItem, #dom-domstringmap-namedItem, #dom-domstringmap-namedItem, #relevant-everything, #entry-everything. Shouldn't internal validator check for these?

[12:07:45.0000] <IZh>
The other question is can lists be nested in this way? <ol> <li>foo</li> <ol> <li>bar</li>  </ol> </ol>

[12:08:25.0000] <IZh>
Shouldn't the second <ol> be moved inside first <li>?

[12:11:21.0000] <IZh>
This pattern is used in the spec few lines higher than "the new resource is to be handled by displaying some sort of inline content" on the 12 step of the algoruthm description.

[12:11:57.0000] <IZh>
Hixie: ^

[12:49:54.0000] <jsbell>
Chrome is reporting a cert issue with https://dom.spec.whatwg.org - other specs seem fine. Just me?

[12:51:00.0000] <jsbell>
NET::ERR_CERT_AUTHORITY_INVALID specifically,

[12:51:32.0000] <IZh>
jsbell: Old version of the browser?

[12:52:03.0000] <IZh>
MITM? :-)

[12:52:32.0000] <IZh>
But it seems that there is certificate name mismatch.

[12:55:32.0000] <IZh>
https://www.ssllabs.com/ssltest/analyze.html?d=dom.spec.whatwg.org

[13:03:55.0000] <rbyers>
Yeah it looks like the certificate is wrong for me - sni.dreamhost.com ?

[13:04:23.0000] <IZh>
rbyers: Probably because of lot of virtual hosts on the same IP?

[13:04:35.0000] <rbyers>
Dunno.  Firefox is also failing.

[13:13:30.0000] <SimonSapin>
Is the data of https://html.spec.whatwg.org/multipage/indices.html available in a more easily machine-parsable form?

[13:13:39.0000] <SimonSapin>
specifically the names of elements and attributes

[13:20:24.0000] <Domenic>
SimonSapin: no; people have asked for that several times but so far nobody has yet worked on a tool to generate or extract it

[13:22:49.0000] <KiChjang>
would a web scraper do for now?

[13:24:16.0000] <Domenic>
https://www.ssllabs.com/ssltest/analyze.html?d=dom.spec.whatwg.org says A+ for me

[13:24:25.0000] <Domenic>
Hixie says it works for him

[13:24:28.0000] <Domenic>
But it doesn't work for me

[13:26:10.0000] <IZh>
Domenic: nslookup?

[13:26:16.0000] <IZh>
dom.spec.whatwg.org (173.236.182.141)

[13:27:10.0000] <Domenic>
Same here

[13:27:25.0000] <Domenic>
The current hypothesis is that LetsEncrypt is taking a while to propagate?

[13:27:35.0000] <IZh>
Hmm... Says T for me.

[13:27:44.0000] <IZh>
"If trust issues are ignored: A"

[13:28:03.0000] <IZh>
CDN in the middle?

[13:28:50.0000] <Domenic>
I don't know how this could be possible that some people see one cert and others see the right one

[13:29:19.0000] <IZh>
Domenic: More interesting thing is why we see different test results? :-)

[13:29:24.0000] <IZh>
It should be the same.

[13:29:31.0000] <Domenic>
Yeah also bizarre

[13:29:40.0000] <Domenic>
reload?

[13:29:59.0000] <IZh>
Asked the site to retest.

[13:30:11.0000] <Domenic>
Yeah I did that too, still got A+

[13:31:47.0000] <IZh>
Domenic: https://s9.postimg.org/4c5a21w8t/whatwg_cert.png

[13:33:15.0000] <Domenic>
And for me an A+... https://usercontent.irccloud-cdn.com/file/c8Gtnekq/whatwg_cert.png

[13:33:43.0000] <IZh>
Domenic: Note different IP ;-)

[13:33:48.0000] <IZh>
CDN?

[13:34:02.0000] <Domenic>
I don't understand what a CDN would have to do with things

[13:34:36.0000] <IZh>
Domenic: They should fix some configuration. :-)

[13:34:45.0000] <Domenic>
What CDN though

[13:34:55.0000] <IZh>
Domenic: Dreamhost?

[13:35:04.0000] <Domenic>
IZh: that's just a hosting provider, not a CDN

[13:36:04.0000] <IZh>
Then why 2 IPs? :-)

[13:37:37.0000] <Domenic>
Well we did move hosts recently

[13:37:57.0000] <IZh>
Domenic: Some old cached record in DNS?

[13:39:10.0000] <IZh>
Anyway, I can't resolve hostname to old IP -- it's always resolved to new.

[13:39:16.0000] <Domenic>
Yep. Fixed by flushing my local computer's DNS resolver cache

[13:39:24.0000] <Domenic>
ipconfig /flushdns on windows, from an admin command prompt

[13:40:08.0000] <IZh>
Domenic: After another restest, SSL Labs displays correct IP.

[13:40:30.0000] <IZh>
retest

[13:41:10.0000] <IZh>
Now A+.

[13:41:31.0000] <SimonSapin>
Looks like https://api.csswg.org/shepherd/ serves data scrapped from many specs, including "anchors", some of which have "type": "element"


2016-10-26
[18:35:00.0000] <rniwa>
Domenic: it looks like we have another superfluous CEReactions on HTMLTextAreaElement's value

[18:35:22.0000] <Domenic>
rniwa: I think that can wipe out child nodes?

[18:35:34.0000] <rniwa>
Domenic: only defaultValue

[18:35:44.0000] <rniwa>
Domenic: value only touches the "raw value" or whatever

[18:35:55.0000] <Domenic>
Hmm right... hmm. I think I fixed this for input, maybe.

[18:36:18.0000] <rniwa>
Domenic: input doesn't really matter unless you're "customizing" with "is=" attribute but yeah

[18:36:23.0000] <rniwa>
Domenic: the same for input element

[18:36:30.0000] <Domenic>
Oh no input has a mode where it changes the attribute

[18:36:36.0000] <rniwa>
Domenic: .value doesn't mutate attribute

[18:36:41.0000] <Domenic>
It does for input sometimes

[18:36:42.0000] <rniwa>
Domenic: really?

[18:36:49.0000] <rniwa>
that's very strange

[18:37:01.0000] <rniwa>
oh well, it's input element...

[18:37:04.0000] <Domenic>
https://html.spec.whatwg.org/#dom-input-value-default

[18:37:47.0000] <Domenic>
Yeah textArea.value though seems non-CEReactions, I agree.

[18:37:47.0000] <KiChjang>
i think Domenic is trolling by linking people to full page specs

[18:38:22.0000] <KiChjang>
here's the multipage version https://html.spec.whatwg.org/multipage/#dom-input-value-default

[18:38:28.0000] <rniwa>
KiChjang: if you have Safari 10 with 15" MBP, the full spec opens like a charm ;)

[18:39:09.0000] <rniwa>
in fact, html5 spec page happens to be one of our perf tests.

[18:39:23.0000] <Domenic>
Yeah it's only Firefox that has a problem really

[18:39:45.0000] <KiChjang>
it doesn't render quick on chrome, but at least it doesn't freeze the entire browser

[18:40:30.0000] <rniwa>
Domenic: btw, https://github.com/w3c/webcomponents/issues/596 is a bigger issue

[18:40:50.0000] <rniwa>
Domenic: having CEReactions superfluously isn't as bad as missing one

[18:40:56.0000] <Domenic>
Right, for sure.

[18:41:16.0000] <Domenic>
Presumably that's why Chrome has a bug.

[20:19:52.0000] <rniwa>
annevk, Domenic: do you know what happened to CSSValue and CSSPrimitiveValue objects?

[20:20:03.0000] <rniwa>
they seem to be very widely supported (Gecko, Blink, & WebKit)

[20:20:15.0000] <rniwa>
but CSS OM spec seems to entirely ignore them

[20:22:45.0000] <rniwa>
/me oh, I guess blink dropped it a while ago: https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/3VmxWFzcyJc

[20:37:14.0000] <Domenic>
rniwa: we can add them to the list at the bottom of https://html.spec.whatwg.org/#cereactions

[20:37:54.0000] <rniwa>
Domenic: add webkitdropzone to that list... :(

[20:40:50.0000] <rniwa>
I love that document.body has setter but document.head is readonly

[20:40:53.0000] <rniwa>
what a great consistency!

[20:41:52.0000] <Domenic>
rniwa: please file an issue on anything we should add to that list; I gotta head to sleep but will fix all the CEReactions bugs tomorrow

[20:42:00.0000] <rniwa>
Domenic: okay

[20:42:17.0000] <rniwa>
Domenic: I'm going through my IDL files and figuring out things as we go

[20:42:21.0000] <rniwa>
Domenic: one weird thing is about

[20:42:31.0000] <rniwa>
Domenic: a bunch of attributes on Text

[20:42:47.0000] <rniwa>
Domenic: because WebKit still has child nodes on Attr we kind of have to have CEReactions on them

[20:42:56.0000] <rniwa>
not sure if you want to note that or not

[20:43:05.0000] <Domenic>
oh wow that's icky

[20:43:11.0000] <rniwa>
there is a lot of subtitles there.

[20:43:15.0000] <Domenic>
I guess worth noting in the bug and we can think about how to phrase it tomorrow

[20:43:17.0000] <rniwa>
sublities*

[20:43:31.0000] <rniwa>
a lot of subtitles LOL

[20:43:49.0000] <Domenic>
you should just remove child nodes of Attr :)

[20:44:01.0000] <Domenic>
shave all the yaks

[20:44:33.0000] <rniwa>
Domenic: maybe one day

[20:45:02.0000] <rniwa>
Domenic: e.g. I just found some apple products rely on getPropertyCSSValue to exist

[20:45:11.0000] <rniwa>
Domenic: so we can't get rid of that method.

[00:35:54.0000] <nox>
Does that mean that in WebKit, attributes can have children?

[00:37:05.0000] <Ms2ger>
The one Text node, probably

[00:38:01.0000] <nox>
Ms2ger: What Text node? oO

[00:38:57.0000] <Ms2ger>
The spec called for the Attr to have children representing the value of the attribute

[00:39:31.0000] <Ms2ger>
Like if you had foo="a&nbsp;b", that would be [Text(a), EntityReference(nbsp), Text(b)]

[00:40:04.0000] <Ms2ger>
But browsers never implemented EntityReference, so we ended up with Attr always having a single Text child

[00:43:37.0000] <nox>
Ms2ger: I'm disgusted.

[01:02:45.0000] <jgraham>
nox: Well done, you passed the DOM Developer test

[01:03:49.0000] <nox>
jgraham: Ah ah.

[01:08:51.0000] <MikeSmith>
haha

[01:15:28.0000] <nox>
I mean, I was already disgusted by Attr: Node,

[01:15:51.0000] <nox>
but I didn't know it actually has a child.

[01:16:05.0000] <annevk>
mathiasbynens: aaah, while walking this morning I had exactly this as title "Premature Polyfills" for a theoretical blogpost

[01:16:21.0000] <Ms2ger>
nox, I ripped that out from Gecko at some point

[01:16:25.0000] <annevk>
mathiasbynens: guess you'll have to write one now

[01:16:28.0000] <nox>
Ms2ger: Interesting.

[01:17:49.0000] <nox>
jgraham: Don't quote me on this,

[01:17:59.0000] <nox>
jgraham: but document.write should be a matter of weeks at most in Servo. :)

[01:24:39.0000] <annevk>
JakeA: https://twitter.com/jaffathecake/status/791192371954343940 is pretty much Twitter

[01:25:38.0000] <JakeA>
hah, I suppose it is

[01:28:24.0000] <MikeSmith>
annevk: I am curious to hear more about the "Premature Polyfills" thing

[01:28:42.0000] <MikeSmith>
mathiasbynens brought up something earlier

[01:28:44.0000] <MikeSmith>
?

[01:28:50.0000] <Ms2ger>
/me quotes nox 

[01:29:20.0000] <JakeA>
MikeSmith: I was about to ask Domenic to clarify some stuff around that, but just catching up with the thread

[01:29:22.0000] <nox>
Ms2ger: What?

[01:29:25.0000] <nox>
Oh. :)

[01:29:26.0000] <mathiasbynens>
MikeSmith: https://github.com/jonathantneal/document-promises/issues/4

[01:29:44.0000] <MikeSmith>
annevk: I vaguely recall we talked face to face some about problems with polyfills but cannot remember the details..

[01:29:59.0000] <MikeSmith>
mathiasbynens: thanks, looking now

[01:31:04.0000] <mathiasbynens>
MikeSmith: some terminology discussion in replies here https://twitter.com/mathias/status/791003447856394241 TL;DR everyone has their own definition of shim

[01:31:20.0000] <MikeSmith>
/me looks there too

[01:33:14.0000] <MikeSmith>
ah, @WebReflection ..

[01:40:46.0000] <nox>
Holy hell that thread.

[01:42:32.0000] <MikeSmith>
haha

[01:42:39.0000] <nox>
What the hell is a stage-0 transpiler?

[01:42:42.0000] <MikeSmith>
yeah I am still rading through it

[01:43:45.0000] <annevk>
I suspect stages refer to TC39's process

[01:44:36.0000] <MikeSmith>
I have trouble catching a few of @WebReflection’s references

[01:44:48.0000] <MikeSmith>
but I guess I’m not going to let it worry me

[01:45:20.0000] <MikeSmith>
anyway, glad to see Andrew Betts weighing in there

[01:55:29.0000] <JakeA>
nox: eg https://goo.gl/Is18qq

[02:11:11.0000] <jgraham>
nox: I am totally quoting you on that :)

[02:12:12.0000] <annevk>
/me sets calendar reminder

[02:20:20.0000] <zcorpan>
well that's... also a way to parse HTML... https://www.browserstack.com/screenshots/9b8c537e3590fbe42688ed29b3101dab6a2dec52/win7_ie_8.0.png

[02:20:55.0000] <zcorpan>
(edge 13: https://www.browserstack.com/screenshots/9b8c537e3590fbe42688ed29b3101dab6a2dec52/win10_edge_13.0.png )

[02:22:24.0000] <Ms2ger>
So, @font-face

[02:22:39.0000] <Ms2ger>
What's the consensus on whether to sniff or not?

[02:23:46.0000] <zcorpan>
Ms2ger: back when we added that in presto, i think everybody completely ignored content-type (and there was no correct mime type for fonts anyway)

[02:23:53.0000] <zcorpan>
not sure if that has changed since

[02:24:05.0000] <zcorpan>
well now there are official mime types

[02:24:32.0000] <Ms2ger>
https://mimesniff.spec.whatwg.org/#sniffing-in-a-font-context says something about XML types

[02:26:14.0000] <Ms2ger>
GPHemsley, ^

[02:31:25.0000] <zcorpan>
https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/MIMETypeRegistry.cpp?dr=C&sq=package:chromium&rcl=1477451763&l=122 - not sure if that gets called from @font-face though (or just link preload stuff?)

[02:32:08.0000] <mathiasbynens>
nox: https://babeljs.io/docs/plugins/preset-stage-0/

[02:32:20.0000] <Ms2ger>
TextCaseInsensitive, huh

[02:35:41.0000] <zcorpan>
Ms2ger: i suppose that's a bug

[02:36:36.0000] <Ms2ger>
XCTO: nosniff does not seem to apply to fonts in Gecko

[02:41:57.0000] <Ms2ger>
I can't follow the Chrome code

[02:50:43.0000] <annevk>
Ms2ger: I think Chrome might only apply it to script/style and Gecko might do that too at the moment

[02:51:00.0000] <annevk>
Ms2ger: note that MIMESniff doesn't define XCTO

[02:53:29.0000] <Ms2ger>
Fetch does, kinda

[02:53:39.0000] <Ms2ger>
Which I assume you know too :)

[02:53:43.0000] <annevk>
Yeah, Fetch does

[02:54:04.0000] <annevk>
Has one open issue about maybe reducing the scope (no longer letting it apply to images)

[03:05:31.0000] <Ms2ger>
I wonder if it would be easier to move that out of fetch and just have a "don't sniff me" flag on the response

[03:05:36.0000] <Ms2ger>
Easier to miss, I guess

[03:09:15.0000] <annevk>
Ms2ger: wouldn't even work for script/style

[03:09:38.0000] <Ms2ger>
Oh?

[03:10:10.0000] <annevk>
Ms2ger: I guess you could add logic there to start using that

[03:10:44.0000] <annevk>
Ms2ger: but currently neither really sniffs

[03:12:08.0000] <Ms2ger>
It's really "enforce-my-content-type-for-real" more than "nosniff"

[03:13:02.0000] <annevk>
"enforce-my-content-type-for-real-if-you-happen-to-be-a-style-or-script-context

[03:13:04.0000] <annevk>
"

[03:15:15.0000] <Ms2ger>
Uhuh

[03:17:07.0000] <Ms2ger>
There's a reason I wanted a spec before getting another impl...

[04:46:40.0000] <littledan__>
why is the HTML spec seemingly accepting of other, non-JS scripting languages?

[04:47:20.0000] <littledan__>
with wording like, " Scripts (typically in JavaScript)"

[04:47:49.0000] <littledan__>
why not just say, JS is the language here for HTML

[04:55:33.0000] <Ms2ger>
littledan__, if you file an issue, it'll probably be removed

[05:18:13.0000] <littledan__>
Filed at https://github.com/whatwg/html/issues/1978 ; maybe I will make a PR

[05:50:48.0000] <annevk>
foolip_sheriff: I created a word-diff but it's hardly readable

[05:51:14.0000] <annevk>
foolip_sheriff: and a more normal diff isn't much better due to the different wrapping

[06:22:24.0000] <annevk>
TabAtkins: bikeshed/Shepherd still has the old https://w3c.github.io/ServiceWorker/spec/service_worker/ links

[06:50:18.0000] <JonathanNeal>
Well, that was fun. Hope everyone is well.

[07:32:23.0000] <foolip>
annevk: have to run now, but did you not find git diff --word-diff -w readable in the terminal at least?

[09:09:52.0000] <TabAtkins>
tobie: What do you mean by "hidden inputs"? Algorithms should ideally declare all their inputs visibly.

[09:16:06.0000] <tobie>
TabAtkins: agreed. They're semi-globals (i.e. shared between a number of algorithms). I'm planning to refactor them at some point, but it's a significant amount of not super useful work for now.

[09:17:45.0000] <tobie>
TabAtkins: sticking them within in Ignore Vars works for now but has the downsides that:

[09:17:57.0000] <tobie>
TabAtkins: 1) it affects all algorithms

[09:18:19.0000] <tobie>
TabAtkins: 2) it's not clear which algorithm rely on them being in Ignore Vars

[09:18:32.0000] <TabAtkins>
No need to refactor, just call them out with a quick sentence in the algo intro saying "This also depends on the global values |foo| and |bar|"

[09:18:49.0000] <tobie>
TabAtkins: as I said, though, this is somewhat of an edge case (large spec moved to BS)

[09:23:52.0000] <tobie>
TabAtkins: well, except that these variables are used across the spec, outside of algorithms, to mean different things, so you really have to point to the right instance of that (which means adding a hook, etc.)

[09:26:57.0000] <tobie>
TabAtkins: iirc it was the |A| in https://heycam.github.io/webidl/#es-maplike

[09:27:12.0000] <tobie>
TabAtkins: so maybe it's actually pretty trivial to fix your way

[10:21:58.0000] <annevk>
TabAtkins: should I file a bug on Shepherd indexing the wrong Service Workers URL?

[10:22:09.0000] <annevk>
TabAtkins: or is bikeshed simply not synced yet?

[10:41:17.0000] <annevk>
Sigh, did Aryeh close all outstanding WPT PRs again?

[10:43:28.0000] <annevk>
Oh, https://trac.webkit.org/changeset/207162

[13:46:56.0000] <TabAtkins>
annevk: Fixed the Shepherd url.

[14:00:12.0000] <KiChjang>
when should you use XHR and when should you use the Fetch API?>

[14:02:18.0000] <TabAtkins>
fetch() doesn't yet let you cancel your request (waiting on cancelable promises or equivalent). I think that's probably about the only reason you'd want to still use XHR.

[14:06:25.0000] <KiChjang>
so in the future, XHR would be deprecated in favour of fetch?

[14:06:44.0000] <KiChjang>
(when cancelable promises becomes production-ready)

[14:06:57.0000] <KiChjang>
i believe Domenic is working hard on that

[14:11:32.0000] <Domenic>
What does "deprecated" mean to you, KiChjang? :)

[14:11:56.0000] <KiChjang>
Domenic, ah, good point

[14:12:37.0000] <KiChjang>
i was thinking that maybe XHR would be removed from the spec entirely, or just have a stub implementation of fetch

[14:12:49.0000] <Domenic>
that seems bad

[14:12:57.0000] <TabAtkins>
That would break a lot of legacy websites for no real gain

[14:13:01.0000] <KiChjang>
then again, this doesn't happen if implementors don't actually implement it

[14:13:58.0000] <KiChjang>
the web isn't quite receptive to code refactorings :/

[15:08:14.0000] <MikeSmith>
anybody know, is the “new URLParser” in WebKit implemented from the URL spec?

[15:14:18.0000] <MikeSmith>
I guess it must be, from looking at, e.g., https://bugs.webkit.org/show_bug.cgi?id=160811#c10

[15:14:39.0000] <MikeSmith>
which mentions “the spec”

[15:16:57.0000] <MikeSmith>
but since it also says “more standards-compliant URL parser”, curious to know in what ways it doesn’t conform to the spec and why

[15:25:16.0000] <Domenic>
When my Safari testing machine finishes installing the new macOS I can try running the web platform tests

[15:25:28.0000] <Domenic>
I'm like 4 hours in right now, gonna leave it overnight and if that fails then take it to tech support

[15:27:52.0000] <MikeSmith>
wow

[15:29:38.0000] <MikeSmith>
in the past when I had problems with MacOS installs taking that long, it seemed to be due to it tripping over stuff installed by MacPorts

[15:29:47.0000] <MikeSmith>
and maybe homebrew too

[15:29:59.0000] <MikeSmith>
but I no longer have that problem

[15:30:25.0000] <MikeSmith>
or at least didn’t with the Sierra install

[15:30:53.0000] <MikeSmith>
though I no longer have any MacPorts packages installed

[15:31:07.0000] <MikeSmith>
now just have homebrew ones

[15:32:14.0000] <MikeSmith>
anyway about the Webkit URLparser differences, I guess I am more interested in hearing from them in what cases they intentionally made it non-conformant, and why

[15:32:40.0000] <MikeSmith>
pinged hober and sam on twitter to ask

[15:32:43.0000] <Domenic>
There are a couple issues on whatwg/url where they are actively still discussing

[15:32:46.0000] <Domenic>
So presumably those

[15:32:47.0000] <MikeSmith>
ah OK

[15:32:53.0000] <Domenic>
maybe more though, dunno

[15:32:59.0000] <MikeSmith>
/me looks at the issue tracker

[15:33:38.0000] <MikeSmith>
ah I see https://github.com/achristensen07 comments

[15:34:47.0000] <MikeSmith>
only open one I see is https://github.com/whatwg/url/issues/150

[15:34:50.0000] <MikeSmith>
unicode fragments

[16:11:50.0000] <MikeSmith>
ah about URL parsing I see https://github.com/whatwg/url/issues/87#issuecomment-256444393 is open still too and actively in discussion

[16:19:44.0000] <Domenic>
Today I learned I don't understand what document.close() even does

[16:26:21.0000] <MikeSmith>
Domenic: how so?

[16:27:38.0000] <Domenic>
I mean I read the spec steps and I don't really understand what effects they would have

[16:47:02.0000] <KiChjang>
Domenic, are there any JS libraries out there that actually utilizes document.open()?

[16:47:11.0000] <Domenic>
who knows


2016-10-27
[17:57:52.0000] <MikeSmith>
Domenic: about https://github.com/whatwg/html/pull/1958/files/cfb8f34614ec51ac16964d32c9c613e7c2e19b9d..cb322d90333b2362252df305360aa323a94f6e77 we can get the URL for the `origin` remote with just `git config remote.origin.url`

[17:58:01.0000] <MikeSmith>
is there any reason to avoid that?

[17:58:36.0000] <Domenic>
MikeSmith: nope that's way better

[17:59:02.0000] <MikeSmith>
k

[18:10:39.0000] <MikeSmith>
Domenic: another question: about URLs for remotes for PR branches, is there a reason to favor or GH https URL over GH SSH URLs?

[18:11:22.0000] <MikeSmith>
I personally do not have my git environment set up right for auth to work with GH https URLs

[18:11:23.0000] <KiChjang>
MikeSmith, i hear HTTPS is more secure, but i also hear the other way

[18:11:33.0000] <MikeSmith>
KiChjang: OK

[18:11:41.0000] <MikeSmith>
well I just wonder which is more commonly used

[18:12:12.0000] <MikeSmith>
or if we can programatically detect which the user is actually set up for

[18:12:35.0000] <Domenic>
MikeSmith: https://help.github.com/articles/which-remote-url-should-i-use/

[18:12:40.0000] <MikeSmith>
/me looks

[18:12:48.0000] <Domenic>
Also http://stackoverflow.com/questions/11041729/why-does-github-recommend-https-vs-ssh

[18:13:12.0000] <Domenic>
Shouldn't your Git config trick detect what is currently used?

[18:13:28.0000] <MikeSmith>
ah “These URLs work everywhere--even if you are behind a firewall or proxy.”

[18:13:46.0000] <MikeSmith>
Domenic: yeah it will for the origin remote

[18:13:52.0000] <MikeSmith>
ah but I get your point

[18:14:41.0000] <MikeSmith>
so yeah I can have it use for other added remotes whatever the protocol is used for the origin remote

[18:14:49.0000] <MikeSmith>
thanks

[18:51:47.0000] <MikeSmith>
Domenic: one last question on the bash snippet for PR thing: any reason to avoid adding --track to the `git checkout` command?

[18:52:53.0000] <MikeSmith>
if I switch the advice to saying the local branch name should be prefixed with teh author name, then that --track will allow git to know how to map the local branch name o the remote branch name

[18:52:57.0000] <MikeSmith>
for fetching

[18:55:13.0000] <MikeSmith>
or maybe git does that automatically?

[18:55:19.0000] <MikeSmith>
/me tests

[18:56:43.0000] <MikeSmith>
yup nm, I see git does it automatically

[22:36:13.0000] <GPHemsley>
Ms2ger: I'm mostly hands-off on mimesniff now, but I do recall seeing something recently about getting real mime types for fonts. annevk is more up-to-date on things than I am.

[00:51:21.0000] <zcorpan>
i suppose it's time i retrain my fingers to type => and const

[00:52:36.0000] <annevk>
I got => down, but const/let not yet

[00:53:51.0000] <zcorpan>
i guess we need to fork live dom viewer also since a global const is still taken in the next edit, at least in chromium

[00:54:29.0000] <zcorpan>
or global let

[01:02:46.0000] <tobie>
So I need to rebase https://github.com/heycam/webidl/pull/205. Won't that totally ruin the reviews? Is there a better strategy?

[01:05:51.0000] <tobie>
Is merge a better strategy now that we have squash in the GH interface?

[01:10:12.0000] <annevk>
tobie: not really, no, no

[01:10:30.0000] <tobie>
no, no to what?

[01:10:45.0000] <annevk>
tobie: three question marks, three answers

[01:11:01.0000] <tobie>
ok

[01:11:13.0000] <tobie>
annevk: thanks

[01:11:38.0000] <annevk>
tobie: it's worth it though to ask again to make sure the rebase didn't go wrong

[01:12:36.0000] <hsivonen>
anyone have an idea of what the median length of a URL query string is ignoring zero-length query strings?

[01:13:09.0000] <tobie>
annevk: yup

[01:13:48.0000] <annevk>
hsivonen: I don't recall ever seeing those kind of numbers

[01:14:10.0000] <hsivonen>
annevk: thanks.

[01:15:22.0000] <annevk>
tobie: you can't really avoid rebase / force push I think if you also want a linear commit history

[01:16:08.0000] <annevk>
tobie: you can sometimes avoid it due to squashing, if you fix the thing it's breaking on in a new commit, but that's rather hairy

[01:17:32.0000] <hsivonen>
I think I'm going to give up on trying to find representative encoder workloads and am going to to the simplest thing, which is running the decoder workload in reverse

[01:17:51.0000] <hsivonen>
if the workload is arbitrary, that workload qualifies

[01:18:19.0000] <hsivonen>
(the decoder workload being the Wikipedia article for apple, the fruit)

[01:18:58.0000] <tobie>
annevk: I pretty much only rebase, so I don't really know what the common outcome of merging in such cases is. Is it hairy?

[01:20:10.0000] <hsivonen>
(apple, the fruit, was the most cross-culturally-relevant Wikipedia topic that I was able to think of)

[01:20:11.0000] <annevk>
tobie: I'm not super familiar with merging, other than that it always seems to mess up history and create super long sequences of commits

[01:20:23.0000] <hsivonen>
(to find non-stub articles in various languages, that is)

[01:20:40.0000] <tobie>
annevk: oh, that, for sure. But with squashing in the UI, it's no longer an issue.

[01:21:21.0000] <annevk>
tobie: yeah, though it's still a little ugly then as GitHub will create all these links if those other commits that are pulled in linked anywhere

[01:21:48.0000] <annevk>
hsivonen: isn't the goal simply to be as fast or faster than Gecko's implementation for now?

[01:21:59.0000] <tobie>
annevk: oh--that's the part I had no experience with. Makes sense.

[01:22:15.0000] <annevk>
hsivonen: or have you set a higher bar for yourself?

[01:22:40.0000] <zcorpan>
tobie: http://www.bitsnbites.eu/?p=221

[01:23:41.0000] <zcorpan>
hmm maybe that was not relevant to your question

[01:23:58.0000] <hsivonen>
annevk: I think as fast as uconv for decode (except ISO-2022-JP and UTF-16) and for UTF-16-to-UTF-8 encode is the minimum bar

[01:24:31.0000] <hsivonen>
annevk: even faster would be nice, though

[01:25:00.0000] <zcorpan>
tobie: see https://github.com/w3c/webvtt/pull/201

[01:25:34.0000] <hsivonen>
annevk: that is, being faster than ICU and Windows would be good

[01:25:50.0000] <hsivonen>
annevk: since that'd mean being faster than other browsers

[01:26:27.0000] <annevk>
hsivonen: and another reason for folks to consider Rust

[01:26:44.0000] <hsivonen>
annoyingly, the Vietnamese article for apple is rather short

[01:26:48.0000] <hsivonen>
Turkish, too

[01:27:06.0000] <hsivonen>
but those are relevant languages to test, because they are SSE2-unfriendly

[01:27:52.0000] <hsivonen>
(a language is SSE2-unfriendly, if it's a Latin-script language where an accented character occurs every 16 characters or more frequently)

[01:31:22.0000] <zcorpan>
hsivonen: try https://en.wikipedia.org/wiki/World_War_II

[01:34:48.0000] <hsivonen>
zcorpan: I was trying to go for a non-controversial topic. it's rather sad if war is what's globally relevant

[01:35:58.0000] <hsivonen>
zcorpan: but yeah, WWII seems to have inspired longer articles than apple in e.g. various languages of India

[01:38:24.0000] <annevk>
hsivonen: Food is slightly longer in Vietnamese

[01:39:14.0000] <annevk>
But World War II is indeed far more impressive length-wise

[01:39:58.0000] <annevk>
Or you could use some API to download a lot more articles

[01:40:21.0000] <zcorpan>
i tried Love at first but it was short in Vietmanese :-(

[01:46:38.0000] <tobie>
zcorpan: oh, yeah, that's ugly.

[01:49:06.0000] <tobie>
zcorpan: hadn't thought about how that would add all the intermediary commits to the PR.

[01:57:34.0000] <hsivonen>
even basic elements like gold and iron have rather uneven Wikipedia articles

[01:58:07.0000] <hsivonen>
going with WWII seems very sad, but it might be the most even-length topic without putting too much effort into finding one :-(

[01:59:40.0000] <MikeSmith>
hsivonen: if you want big files you can get abstract files in all langs from https://dumps.wikimedia.org/backup-index.html

[02:00:07.0000] <MikeSmith>
the latest ones for each lang are at URLs, e.g., https://dumps.wikimedia.org/zhwiki/latest/zhwiki-latest-abstract.xml

[02:00:29.0000] <MikeSmith>
but those are massive

[02:00:32.0000] <MikeSmith>
that one is 905.4 MB

[02:01:04.0000] <hsivonen>
MikeSmith: I don't want big files. I want a normal Wikipedia article in at least ar, el, en, he, ja, ko, ru, zh-cn, zh-tw, vi, tr, fr, de

[02:01:15.0000] <hsivonen>
MikeSmith: bonus points for th, cs and pl

[02:01:34.0000] <MikeSmith>
Krinkle (who works on Mediawiki) might have some ideas

[02:01:36.0000] <hsivonen>
MikeSmith: in fact, the WWII article may have the downside of being abnormally long

[02:01:41.0000] <MikeSmith>
ah OK

[02:02:13.0000] <hsivonen>
what I'm looking for is a Web-representative interleave of ASCII and non-ASCII

[02:02:19.0000] <MikeSmith>
ah

[02:02:34.0000] <hsivonen>
Wikipedia is an actual top site, suitably licensed and has content in multiple languages

[02:03:00.0000] <hsivonen>
generating test cases using Google Translate doesn't work, because it injects its own markup, which messes up the natural interleave of ASCII and non-ASCII

[02:03:23.0000] <hsivonen>
the declaration of human rights doesn't work, because it has abnormally little markup

[02:03:45.0000] <MikeSmith>
why not use just the home page of each lang?

[02:04:15.0000] <MikeSmith>
or some other stock page that the Wikipedia for each lang is guaranteed to have

[02:04:40.0000] <hsivonen>
MikeSmith: I was thinking an article would have a more representative interleave of ASCII and non-ASCII than the front page

[02:04:49.0000] <hsivonen>
MikeSmith: but I didn't think of policy stock pages

[02:04:56.0000] <MikeSmith>
ok

[03:38:58.0000] <hsivonen>
FWIW, I posted to Wikipedia Village Pump: https://en.wikipedia.org/wiki/Wikipedia:Village_pump_(technical)#Finding_representative_pages_in_various_languages

[03:43:33.0000] <nox>
hsivonen: https://github.com/whatwg/html/issues/1954

[03:45:13.0000] <nox>
hsivonen: What about one of https://en.wikipedia.org/wiki/Wikipedia:Wikipedia_records#Articles

[04:16:00.0000] <hsivonen>
nox: those seem like outliers instead of typical articles. also, it doesn't help with other languages

[04:16:12.0000] <hsivonen>
I commented on github regarding recursion

[04:21:54.0000] <Ms2ger>
I wonder if there's a way to get non-minified sources from google docs

[04:37:38.0000] <tobie>
annevk: re https://github.com/heycam/webidl/pull/211, what about nullable types?

[04:39:06.0000] <annevk>
tobie: I haven't seen [NewObject] used for something that returns either an object or null

[04:39:35.0000] <tobie>
annevk: so (DOMString or DOMException?) wouldn't be an object type

[04:40:09.0000] <annevk>
tobie: I see, hmm, maybe requiring unions to contain object types is simpler for now

[04:40:40.0000] <annevk>
tobie: bz prolly has thought this through already so might be easiest to just wait a little for him to wake up

[04:40:52.0000] <tobie>
annevk: :)

[05:25:07.0000] <nox>
zcorpan: Nice, thank you!

[05:25:23.0000] <zcorpan>
nox: np

[05:26:04.0000] <zcorpan>
i managed to crash the tab while writing that so i had to write it again :-P

[05:26:14.0000] <annevk>
smaug: feedback on https://github.com/whatwg/html/issues/1576 would be appreciated

[05:28:17.0000] <annevk>
zcorpan: Live DOM Viewer uses document.write itself, right?

[05:28:35.0000] <annevk>
zcorpan: might not be the best way to test the limit

[05:28:58.0000] <nox>
zcorpan: Nice. :D

[05:31:28.0000] <nox>
zcorpan: I wonder if it's supposed to be 10 for Edge,

[05:31:35.0000] <nox>
but they have an off by one error that makes it 11.

[05:32:50.0000] <zcorpan>
annevk: it does, yeah

[05:33:59.0000] <zcorpan>
the numbers in my test may be confusing. i think the limit is the given number + 2

[05:57:56.0000] <Ms2ger>
zcorpan, have a minute?

[05:58:03.0000] <zcorpan>
sure

[05:58:33.0000] <Ms2ger>
zcorpan, do you know off-hand if gecko/chrome are correct in this test case: https://github.com/servo/servo/issues/13944 ?

[06:03:09.0000] <zcorpan>
Ms2ger: i believe they are correct. offsetHeight should flush layout (that's not actually defined yet though)

[06:03:37.0000] <zcorpan>
Ms2ger: does Servo behave differently if the 'top' value is different?

[06:12:51.0000] <Ms2ger>
zcorpan, oh, interesting, explicitly adding display: block helps

[06:13:41.0000] <zcorpan>
i guess you found what the bug is then :-)

[06:13:53.0000] <Ms2ger>
I found enough to make it SEP :)

[06:14:20.0000] <Ms2ger>
position: absolute should force a block-level box, should it not?

[06:16:20.0000] <zcorpan>
yes

[06:17:45.0000] <zcorpan>
https://drafts.csswg.org/css-position/#dis-pos-flo

[06:18:55.0000] <zcorpan>
in this case at least; not for inline-table or "others" (not sure which those are)

[06:20:18.0000] <nox>
zcorpan: I took the permalink of your test,

[06:20:33.0000] <nox>
and loaded data:text/html,... instead,

[06:20:39.0000] <nox>
and indeed, it reported one more call.

[06:27:17.0000] <annevk>
heycam|away: can you add a link to the editor's draft at the top of https://github.com/heycam/webidl

[08:02:12.0000] <gsnedders>
do we have any API that parses arbitrary JSON off the network anywhere?

[08:09:30.0000] <Ms2ger>
fetch().then(|x| x.json())?

[08:09:50.0000] <Ms2ger>
I don't suppose that's what lambdas look like in JS

[08:10:50.0000] <caitp>
you can just hear the JS syntax nuts growling as they read this

[08:19:13.0000] <annevk>
there's also an XMLHttpRequest one

[08:19:17.0000] <annevk>
you get to chose

[08:26:07.0000] <gsnedders>
annevk: an XHR one?

[08:26:28.0000] <gsnedders>
annevk: oh, with .response

[08:26:57.0000] <annevk>
responseType = "json"

[08:27:05.0000] <annevk>
used to be pretty cool

[08:29:14.0000] <gsnedders>
and it only supports utf-8

[08:31:09.0000] <annevk>
same for fetch()

[08:32:49.0000] <gsnedders>
is there any way to detect support of <a ping>?

[08:34:28.0000] <Ms2ger>
"ping" in document.createElement("a"), theoretically

[08:36:24.0000] <gsnedders>
what does Fx say with the pref disabled?

[10:29:47.0000] <Domenic>
Anyone have examples of repeated initialisms in APIs? So far we have XMLHttpRequest (inconsistent), HTMLHRElement (consistent), RTCDTMFSender (consistent). I was hoping for some that are properties not just class names.

[10:30:51.0000] <wanderview>
JakeA: shouldn't the throw() in the fetch event promise.catch here trigger an interception failure? https://googlechrome.github.io/samples/service-worker/prefetch/service-worker.js

[10:49:56.0000] <wanderview>
JakeA: I ask, because that service worker in chrome produces a "page not found" error page instead of the "something went wrong" page you normally get for a broken SW interception

[10:50:11.0000] <wanderview>
JakeA: the top level page for the SW is this: https://googlechrome.github.io/samples/service-worker/prefetch/index.html

[11:41:00.0000] <Domenic>
annevk: https://github.com/whatwg/url/commit/f20ad7efa8514ca88ceab0c3daad025ab0beb80e doesn't seem to have deployed :-/

[11:52:19.0000] <annevk>
Domenic: done manually

[11:52:48.0000] <annevk>
I really wonder why this fails so often

[11:52:57.0000] <annevk>
The setup is super basic

[12:14:30.0000] <Domenic>
TabAtkins: given a lt of "becomes connected" can Bikeshed figure out <a>become connected</a>, or should I add alternate lt=""s?

[12:24:10.0000] <tobie>
Domenic: the latter, unfortunately.

[12:24:22.0000] <Domenic>
ah well

[12:31:44.0000] <Domenic>
botie: ask rniwa if he's writing tests for the [CEReactions] on elements/document.close/etc.?

[12:31:44.0000] <botie>
will do

[12:33:40.0000] <tobie>
Does WebIDL specify what happens when you pass to a function an object with properties which aren't members of the dictionary said function expects as argument?

[12:36:01.0000] <tobie>
so namespace Bar { foo(optional Options options); } dictionary Options { DOMString a = "test"; }

[12:36:29.0000] <tobie>
and then: Bar.foo({ a: "test", b: 123 });

[12:37:38.0000] <tobie>
Does this throw, is b ignored, or is this spec-dependant (and if so, are there best practices)?

[12:40:58.0000] <Domenic>
b is ignored

[12:42:20.0000] <Domenic>
tobie: The conversion from ES object to Web IDL dictionary is at https://heycam.github.io/webidl/#es-dictionary; as you can see it loops through the members of the dictionary doing a Get() for each one, but doesn't do any enumeration of the object in general

[12:42:53.0000] <Domenic>
I guess right now it does a [[Get]]; should be Get()

[12:47:28.0000] <tobie>
Domenic: oh right, that's specific to the ES conversion. Makes sense. Thanks.

[12:48:26.0000] <TabAtkins>
Domenic: Yeah, I'm a little afraid of applying the conjugation code to non-final words. Possible, tho.

[12:49:18.0000] <TabAtkins>
It would mean an exponential (in the number of words) explosion in the number of combinations I try for every single autolink.

[12:50:09.0000] <Domenic>
I feel like just the first word would be a sweet spot. But I can see the difficulty yeah.

[12:55:44.0000] <TabAtkins>
I could be convinced by someone gradually accumulating some examples of failed conjugations in an issue.

[12:59:48.0000] <Domenic>
People seem to just create a bunch of link-defaults

[12:59:52.0000] <Domenic>
I think this is mostly HTML's fault

[12:59:59.0000] <Domenic>
Because people are used to creating giant link-default blocks for HTML

[13:00:12.0000] <Domenic>
so they just reach for link-defaults blocks whenever Bikeshed isn't working perfectly

[14:04:09.0000] <Domenic>
For an enum default value meaning "auto", do people have opinions/precedents for whether we'd use `null` or `""`?

[14:06:14.0000] <KiChjang>
missing default value of "auto"?

[14:06:27.0000] <KiChjang>
or invalid default value of "auto"?

[14:14:09.0000] <Domenic>
It's an IDL enum, not a element attribute, so both I guess

[14:16:59.0000] <KiChjang>
it doesn't quite feel right if you use "null" or "" for "auto"

[14:17:28.0000] <KiChjang>
because the syntax is obviously different, so intuitively to me, they mean different things

[14:18:11.0000] <KiChjang>
null means more like a value is missing

[14:18:40.0000] <KiChjang>
"" means this enum variant is the empty string, but the value isn't missing

[14:20:16.0000] <KiChjang>
what the empty string means will vary in different contexts though, so i'm not feeling too great about including it as an enum variant either

[14:38:29.0000] <zcorpan>
Domenic: https://fetch.spec.whatwg.org/#enumdef-requesttype

[14:38:47.0000] <Domenic>
zcorpan: ooh good one, thanks


2016-10-28
[18:09:30.0000] <tobie>
Domenic: you also have the infamous https://html.spec.whatwg.org/#canplaytyperesult

[01:45:41.0000] <JakeA>
wanderview: I would expect a "something went wrong" page if the fetch rejects, yeah

[01:53:16.0000] <annevk>
tobie: really enjoying all the IDL PRs

[01:57:08.0000] <tobie>
annevk: Thanks, and likewise. It's a tad Danaidean, though: new issues come in faster than I make PRs. ;)

[01:59:16.0000] <annevk>
tobie: yeah, HTML has that problem too

[01:59:40.0000] <annevk>
tobie: most specs I think, and browsers as well

[01:59:59.0000] <tobie>
annevk: true

[02:01:04.0000] <annevk>
Encoding almost stabilized, but then folks wanted to track upstream changes to gb18030 and add Streams support

[02:02:05.0000] <annevk>
But even with that I think that might be a small enough problem to actually be done at some point and only requiring refactoring now and then of prose per changing conventions

[02:05:55.0000] <tobie>
annevk: software is hard

[02:05:55.0000] <tobie>
annevk: Last night, I spent three hours figuring out a solution to https://github.com/tobie/specref/issues/184

[02:05:56.0000] <tobie>
annevk: only to figure out it completely broke.

[02:06:33.0000] <annevk>
oh my

[02:07:17.0000] <annevk>
I have been doing some Pascal hacking this week

[02:07:26.0000] <annevk>
Can't say I know what I'm doing, but it compiles

[02:08:57.0000] <tobie>
annevk: oh wow, contemplating a career change?

[02:09:22.0000] <annevk>
tobie: nah, HTML preprocessor

[02:09:56.0000] <tobie>
oh

[02:10:13.0000] <tobie>
annevk: are you planning to move that to Bikeshed at some point?

[02:10:38.0000] <annevk>
tobie: we haven't really decided, bikeshed is super slow

[02:11:34.0000] <tobie>
annevk: so I've been working on the sensor spec again, which is probably 1/10th of the size of WebIDL, and boy is Bikeshed suddenly fast!

[02:12:11.0000] <annevk>
tobie: hmm yeah, bikeshed is pretty slow on DOM too

[02:12:26.0000] <annevk>
tobie: but HTML is like 10x DOM if not more

[02:13:24.0000] <tobie>
annevk: It seemed TabAtkins was looking into perf issues recently

[02:32:33.0000] <tobie>
Should I reuse the OnErrorEventHandler (https://html.spec.whatwg.org/multipage/webappapis.html#onerroreventhandler) for sensor onerror attribute?

[02:33:24.0000] <tobie>
I'm generally super confused about error handling on this platform.

[02:35:05.0000] <zcorpan>
tobie: what's sensor onerror?

[02:36:17.0000] <tobie>
zcorpan: one of: user denied access,  hw is missing, can't read from hw, other?

[02:37:52.0000] <Ms2ger>
tobie, no, that's only for window.onerror

[02:37:59.0000] <zcorpan>
tobie: then i suppose it doesn't make sense to use the ErrorEvent interface for that error event, and so not OnErrorEventHandler

[02:38:21.0000] <tobie>
Ms2ger: that was my assumption too. Thanks.

[02:38:44.0000] <tobie>
/me goes off to close https://github.com/w3c/sensors/issues/137

[02:40:47.0000] <tobie>
Ms2ger: is there a note to that effect somewhere in the spec?

[02:42:23.0000] <Ms2ger>
I don't think so

[02:45:45.0000] <annevk>
rbyers: https://bugs.chromium.org/p/chromium/issues/detail?id=275675 is an issue I filed about the URL Standard that got closed as a non-useful duplicate

[02:46:35.0000] <annevk>
rbyers: https://bugs.chromium.org/p/chromium/issues/detail?id=257354 got closed without Chrome volunteering an alternative solution or trying to drive something that other browsers could adopt

[02:47:20.0000] <annevk>
rbyers: another one was a dupe of a 2012 issue about data URLs that's still open: https://bugs.chromium.org/p/chromium/issues/detail?id=123004

[02:47:54.0000] <annevk>
rbyers: I'm guessing you found these too, any suggested next steps?

[02:48:44.0000] <annevk>
nox: ping https://github.com/whatwg/url/pull/153

[02:57:40.0000] <nox>
annevk: Do we define empty?

[02:58:14.0000] <annevk>
nox: hopefully at one point we actually define that, but thus far not

[02:58:48.0000] <annevk>
nox: I need to write an Infrastructure document that all standards can reuse that also documents Lists/Records etc. and what operations you can perform on them

[02:59:26.0000] <annevk>
nox: I haven't really found the time, but it's slowly going to the top of the priority list

[03:01:07.0000] <nox>
annevk: No need, just appeal to common sense!!1!

[03:01:50.0000] <annevk>
nox: here's an example, please implement the API

[03:02:00.0000] <nox>
:D

[03:02:01.0000] <annevk>
nox: "but how does it work?"

[03:02:04.0000] <annevk>
nox: common sense, doh

[03:02:24.0000] <Ms2ger>
That would be a first on the web

[03:02:58.0000] <annevk>
Ms2ger: sarcasm or too young to remember HTML4?

[03:03:49.0000] <Ms2ger>
The implementations of HTML4 followed common sense?

[03:03:54.0000] <Ms2ger>
I suppose dbaron's desk did :)

[03:05:15.0000] <annevk>
I wonder how long we can keep that reference alive

[03:06:15.0000] <Ms2ger>
Well, what's my life expectancy? :)

[03:57:53.0000] <zcorpan>
so when do we get keyboards where every key has a display? it seems like an obvious thing, i got that idea like 15 years ago (would be cool for games at least)

[04:00:58.0000] <jgraham>
Well that isn't what the new mac thing is, is it?

[04:01:12.0000] <jgraham>
It's a small flat display at the top of the keyboard

[04:01:38.0000] <jgraham>
Making per-key displays for real keys seems like it would be a much harder problem

[04:13:30.0000] <annevk>
Replace keyboard with an iPad?

[04:15:30.0000] <annevk>
Once tactile feedback can be part of the screen and only effect touch targets, maybe an option…

[04:15:46.0000] <annevk>
Affect

[04:25:52.0000] <zcorpan>
annevk: yeah i like keyboards over touchscreens because i can type without looking. so tactile feedback is important; not sure how that would work on a flat screen

[04:26:51.0000] <zcorpan>
jgraham: i know basically nothing about hardware, but what seems hard about it?

[04:29:09.0000] <annevk>
I think it exists already

[04:30:52.0000] <hsivonen>
in reference to the discussion yesterday, I was told that Mars (the planet) is even more featured across Wikipedias that World War II. I'll go with Mars, since a) it's even more featured, b) it's a less violent topic and b) the articles visually look more normal to me in terms of linkified/non-linkified text ratio

[04:32:17.0000] <hsivonen>
/me can't count to c)

[04:33:42.0000] <hsivonen>
(choosing a different topic for each language by median length wasn't feasible in the Wikidata data set)

[04:48:22.0000] <MikeSmith>
hsivonen: I guess I’m now curious why the Mars article has the characteristic of being featured across so mamy Wikipedias

[04:48:28.0000] <MikeSmith>
anyway, interesting

[04:49:01.0000] <MikeSmith>
hope when you are done you have a chance write up something about this selection process

[04:49:20.0000] <MikeSmith>
because it seems like it might be useful to others later

[04:50:38.0000] <hsivonen>
MikeSmith: I'll write something in the README of encoding_bench, but the selection is very unscientific.

[04:51:32.0000] <MikeSmith>
sure

[04:52:07.0000] <MikeSmith>
but I think trial-and-error is a kind of scientific approach

[04:52:31.0000] <annevk>
zcorpan: any reason I should keep https://github.com/whatwg/url/issues/124 open?

[05:00:09.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4621 seems to throw in gecko... but i suppose i don't feel strongly about it, so ok to close

[05:00:40.0000] <annevk>
zcorpan: Gecko doesn't implement relative URLs for non-special schemes

[05:06:07.0000] <zcorpan>
wonder if http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4622 can lead to XSS problems

[05:06:54.0000] <annevk>
zcorpan: that was the demo that caused you to file this issue

[05:07:07.0000] <annevk>
zcorpan: think we've gone full circle now

[05:07:12.0000] <zcorpan>
haha

[05:07:26.0000] <hsivonen>
MikeSmith: How's https://github.com/hsivonen/encoding_bench/#selection-of-test-data ?

[05:07:36.0000] <MikeSmith>
/me looks

[05:10:09.0000] <MikeSmith>
hsivonen: nice writeup yeah

[05:10:12.0000] <MikeSmith>
looks great

[05:10:16.0000] <hsivonen>
thanks

[05:23:19.0000] <hsivonen>
I wish Raspberry Pi 3 had enough memory to link libxul. But no. I guess I'll have to learn to cross-compile Firefox if I want uconv numbers for ARM.

[07:05:28.0000] <wanderview>
JakeA: ok, I guess I should write a chromium issue for that then

[07:26:27.0000] <annevk>
Domenic: sorry, forgot about looking into updating Ruby today

[07:26:57.0000] <annevk>
Domenic: will look into it Monday

[07:29:01.0000] <Domenic>
annevk: I might be able to do it all today, but maybe not; I need to spend a bit more time on streams than I have been.

[07:29:31.0000] <annevk>
Domenic: no rush, it might actually be useful for me to figure out, so I can then set it up for Fetch and Fullscreen too

[07:29:36.0000] <annevk>
Domenic: and URL

[07:29:58.0000] <annevk>
Domenic: btw, Streams is in bikeshed right?

[07:30:07.0000] <Domenic>
annevk: yep

[07:30:08.0000] <annevk>
Domenic: does Streams export all the things?

[07:30:12.0000] <Domenic>
probably not

[07:30:37.0000] <annevk>
Fetch has a large list of stream references, but I haven't figured out if that's necessary yet

[07:30:39.0000] <Domenic>
gonna keep trying to move ServiceWorker to having no link-defaults/anchors block and fixing issues as I find them

[07:30:49.0000] <Domenic>
Then we can tell jungkees to stop adding them :P

[07:31:24.0000] <annevk>
Yeah, I think both jungkees and JakeA are confused by how that works

[07:31:35.0000] <annevk>
And since they're editing that spec...

[07:31:58.0000] <JakeA>
That is probably true

[07:37:35.0000] <astearns>
zcorpan: (every key a display) http://www.artlebedev.com/optimus/popularis/

[07:39:23.0000] <annevk>
astearns: quite ugly

[07:39:47.0000] <annevk>
astearns: and so expensive for something so ugly

[07:42:08.0000] <astearns>
annevk: you're just resisting the inevitable future

[07:43:04.0000] <annevk>
astearns: I'm just going to adopt it at the point where Apple can make it pretty and sell it for less than the price of a laptop

[07:43:47.0000] <astearns>
Apple's version will require one dongle per key

[07:53:59.0000] <wanderview>
JakeA: I filed this: https://bugs.chromium.org/p/chromium/issues/detail?id=660377

[08:23:52.0000] <JakeA>
wanderview: Cheers! Sorry I've not been awfully engaged with service worker for a few weeks, got a big deadline for Chrome Dev Summit. Will be back on it once that's done

[08:24:17.0000] <wanderview>
JakeA: np... I;ve been pretty distrated myself

[08:25:11.0000] <wanderview>
/me wonders how many typos he can get in one line...

[08:56:29.0000] <rbyers>
annevk: Yeah I saw those old bugs.  The org situation has improved a lot since then.

[08:57:20.0000] <rbyers>
.. I went to file some new bugs when we last talked, but that was when GitHub was down :-(.  Just filed a beta bug https://crbug.com/660384, and started a discussion with the network TL to get this on his radar.

[08:58:20.0000] <rbyers>
.. If you can add any examples of real-world developer pain as a result of these interop issues (even cases like sites working correctly only in Chrome), that'll help me boost the priority.

[08:58:55.0000] <rbyers>
.. Obviously there's tons of places we need to invest around spec conformance, we're trying to prioritize based on web developer impact (improving "web platform predictability").

[08:59:07.0000] <rbyers>
s/beta bug/meta bug/

[09:06:36.0000] <rbyers>
annevk: BTW, I believe it IS sleevi's team that owns this, so his involvement on that one issue is a good sign.

[09:07:25.0000] <annevk>
rbyers: thanks, I'm mostly aware of engines being different, though I suppose devs do end up filing bugs as a result

[09:10:47.0000] <rbyers>
Yep.  All engine differences are definitely bad.  Keep your ears open for web-dev anecdotes though (and point to them on that bug I filed).  We know that for each dev gripe there are hundreds suffering in silence :-)

[09:20:39.0000] <rbyers>
Annevk: also, thanks for pinging me about this.  I'm trying (but mostly failing) to keep an eye on interop across the whole platform instead of just the limited areas I've mostly worked in the past...

[09:22:23.0000] <annevk>
rbyers: interested in working on styling form controls? 😛

[09:27:09.0000] <rbyers>
Not personally 😉, but I can try to encourage the DOM team (Dominic Cooney, tkent, etc.) to take a look.  Again, especially if there's evidence or real-world compat problems or confusion.

[09:29:31.0000] <Domenic>
rbyers: FYI, there is evidence of real-world confusion for datalist, so we did https://github.com/whatwg/html/pull/1836. But, not much for Chrome to do, as they already do the thing that users and web developers seem to like, so we just had the spec suggest that.

[09:51:15.0000] <smaug>
are there some recommendations when a spec should use iterable interface and when sequence/FrozenArray ?

[10:07:52.0000] <smaug>
Domenic: which spec bug changed https://bugzilla.mozilla.org/show_bug.cgi?id=869690#c8 ?

[10:08:02.0000] <smaug>
(it feels odd to use value in the UI)

[10:08:44.0000] <smaug>
(so I wonder whether the spec issue got feedback from some ux devs)

[10:10:40.0000] <Domenic>
smaug: https://github.com/whatwg/html/pull/1836

[10:11:18.0000] <Domenic>
Also prefer normal JS arrays if you have an array like data structure, iterable for something specialized like URLSearchParams

[10:25:17.0000] <rbyers>
Domenic: cool, thanks

[13:06:30.0000] <TabAtkins>
tobie: Yeah, unfortunately Bikeshed's perf is approximately 1/3 HTML parse, 1/3 HTML serialize, 1/3 everything else together.

[13:08:22.0000] <tobie>
TabAtkins: this ratio is consistent as file size increases?

[13:08:58.0000] <TabAtkins>
Hmm, let me check actually. That's the ratio for W3C HTML (which also takes ~55s on my hyper-powered work machine).

[13:10:45.0000] <TabAtkins>
No, that is absolutely not consistent.

[13:11:20.0000] <TabAtkins>
On a teensy spec, parsing is about 5% and serializing is about 3%.

[13:23:13.0000] <wanderview>
annevk: is it just me, or does this link to the wrong referrer: https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer

[13:23:21.0000] <wanderview>
annevk: seems like it should link to the fetch spec instead of html spec

[13:29:03.0000] <annevk>
wanderview: not just you

[13:32:56.0000] <tobie>
TabAtkins: oh, those are the ratios for HTML. :(

[13:33:54.0000] <TabAtkins>
annevk, wanderview: The spec explicitly lists the HTML spec as the place to grab "referrer" from. :/

[13:35:52.0000] <TabAtkins>
https://github.com/w3c/webappsec-referrer-policy/blob/master/index.src.html#L43

[13:51:37.0000] <Domenic>
TabAtkins: only with for="meta", right?

[13:52:09.0000] <TabAtkins>
No. I'm going to keep repeating "autolinking is a filter" until it works. ^_^

[13:52:43.0000] <Domenic>
And I'm going to keep telling you "your system is too hard for humans to understand" until you see that ^_^

[13:54:21.0000] <TabAtkins>
And I'll continue pointing to all the places where "no `for` on the autolink means the same as `for=/`" would result in people having to be unnecessarily verbose.

[13:55:15.0000] <TabAtkins>
Lack of a `spec` attribute doesn't mean "only select definitions that don't appear in a spec", it means "I'm not filtering by spec right now". I'm not sure why it's so hard to intuit the exact same thing for `for`.

[13:55:36.0000] <Domenic>
Maybe we need a preprocessor before we feed things into Bikeshed

[14:00:51.0000] <TabAtkins>
In this case (referrer) the problem is that anchor-block things (rightfully) get selected before foreign things, based on the assumption that you if you're putting the anchor in your spec you probably want to link to it, and would get annoyed if it then complained about other anchors and required you to specify a link-defaults to select the thing you just

[14:00:52.0000] <TabAtkins>
wrote in.

[14:01:42.0000] <TabAtkins>
In this case it would be more useful if Fetch was actually in the database, as then they'd get a normal "ambiguous reference" link error.

[14:08:34.0000] <TabAtkins>
Sigh. Inevitable tradeoffs of usability vs specificity. The Anolis "you have to make up an identifier for your term that's globally unique across all specs, and then remember and type it every single time you want to link to it" is never *wrong*, but it's only *slightly* better than just providing a full URL.

[14:08:38.0000] <Domenic>
TabAtkins: I thought Fetch was in the database? It has a bunch of Bikeshed exports, and is recently in Bikeshed.

[14:09:12.0000] <TabAtkins>
Domenic: Oh, indeed it is. Then it's just a case of them overusing anchor blocks.

[14:10:02.0000] <Domenic>
Yeah, I think people are cargo-culting large blocks of link-defaults and anchors around, not realizing Bikeshed is supposed to save you from that

[14:11:16.0000] <Domenic>
I'm trying to fix that by going through specs and deleting them and updating HTML to export anything that Bikeshed still warns about, but I don't want to do that until we have something in place to make <a>browsing context</a> and <a>origin</a> and so on work.

[14:16:10.0000] <botie>
rniwa, at 2016-10-27 19:31 UTC, Domenic said: if he's writing tests for the [CEReactions] on elements/document.close/etc.?

[14:16:34.0000] <Domenic>
rniwa already answered that, botie

[14:16:34.0000] <botie>
Domenic: sorry...

[14:17:37.0000] <rniwa>
Domenic: I'm landing it into WebKit first: https://bugs.webkit.org/show_bug.cgi?id=163969

[14:17:48.0000] <rniwa>
Domenic: since i really want to finish up our impl this week

[14:18:31.0000] <rniwa>
/me needs to have someone review https://github.com/w3c/web-platform-tests/pull/3968

[14:18:32.0000] <Domenic>
rniwa: makes sense, cool!

[14:18:50.0000] <Domenic>
rniwa: that's still waiting on you to fix zcorpan's comment at https://github.com/w3c/web-platform-tests/pull/3968#issuecomment-256330138, right?

[14:18:56.0000] <rniwa>
Domenic: I've fixed that

[14:19:40.0000] <Domenic>
rniwa: hmm it still says "propertyName: 'border-radius'" on GitHub

[14:20:44.0000] <rniwa>
Domenic: oh, that one

[14:20:47.0000] <rniwa>
Domenic: i just replied

[14:21:21.0000] <Domenic>
rniwa: ah OK. LGTM then but we should wait to make sure zcorpan signs off

[14:22:09.0000] <rniwa>
Domenic: ya


2016-10-29
[09:49:27.0000] <gsnedders>
jgraham: can you add me as an admin to https://readthedocs.org/projects/html5lib/

[16:43:20.0000] <tobie>
https://whatwg.org/ seems down to me

[16:43:58.0000] <tobie>
http://www.isup.me/whatwg.org

[16:44:14.0000] <tobie>
Domenic: ^

[16:46:18.0000] <tobie>
annevk: ^


2016-10-30
[17:10:50.0000] <wCPO>
Is whatwq.org only down for me?

[17:21:42.0000] <tobie>
wCPO: here too

[17:23:21.0000] <KiChjang>
uh oh, whatwg.org is down here as well

[18:20:25.0000] <KiChjang>
ugh

[18:20:36.0000] <KiChjang>
i guess i can use the source code version of it...

[18:22:58.0000] <KiChjang>
how do you process the html spec source file into a .html file again?

[18:24:11.0000] <KiChjang>
oh nvm

[18:31:52.0000] <Domenic>
Pinged Hixie, no response yet

[18:34:17.0000] <KiChjang>
interestingly, wattsi server is still ok

[20:17:31.0000] <MikeSmith>
TabAtkins: http://stackoverflow.com/questions/40325236/in-the-css-visual-formatting-model-what-does-the-flow-of-an-element-mean

[20:18:09.0000] <MikeSmith>
somebody trying to make sense of part of https://www.w3.org/TR/CSS2/visuren.html#positioning-scheme

[20:18:26.0000] <MikeSmith>
TabAtkins: wonder what current spec replaces that

[20:24:20.0000] <MikeSmith>
https://drafts.csswg.org/css-position/#pos-sch it seems, but it appears to have the same language

[07:37:57.0000] <Terminus->
hello. what's wrong with whatwg.org? i'm getting connection refused.

[07:40:14.0000] <Zegnat>
Down for me too.

[07:45:05.0000] <Terminus->
yeah, doesn't seem to be just me.

[07:52:04.0000] <annevk>
Problem with the host most likely

[07:52:20.0000] <annevk>
Ticket's been filed a while ago

[07:55:20.0000] <Terminus->
huh. it's hosted by dreamhost.

[08:47:54.0000] <annevk>
Yup

[08:52:49.0000] <younder>
nightmares are eas too ;)

[08:52:59.0000] <younder>
dreams

[09:30:30.0000] <younder>
Cite www.whatwg.org is up again

[10:52:47.0000] <gsnedders>
I have a different-global element, but no immediate reference to its global. What's the easiest way to tell if it's an HTMLTemplateElement?

[10:57:25.0000] <not-an-aardvark>
does Object.prototype.toString.call(element) === '[object HTMLTemplateElement]' work?

[10:58:38.0000] <gsnedders>
not-an-aardvark: yeah, that's the best I could come up with, too.

[10:58:46.0000] <gsnedders>
not-an-aardvark: but, well, it should work at least

[12:24:31.0000] <annevk>
gsnedders: namespace plus local name is more reliable I think


2016-10-31
[01:34:55.0000] <jgraham>
gsnedders: username?

[02:08:37.0000] <annevk>
The concept of <a>term</a> having to be rewritten as <a for=/>term</a> has also caused a ton of issues in Fetch's conversion

[02:08:54.0000] <annevk>
As the person that did the conversion was probably not aware of how that worked

[02:09:10.0000] <annevk>
I didn't really discover it until later unfortunately

[02:23:06.0000] <annevk>
jgraham: moving wpt/cors/ into wpt/fetch/cors, can we do that and avoid breaking external links?

[02:29:32.0000] <annevk>
foolip: https://github.com/whatwg/encoding/issues/75#issuecomment-257148606

[02:36:42.0000] <annevk>
jgraham: how often does Mozilla push?

[02:36:57.0000] <annevk>
jgraham: to wpt? https://github.com/w3c/web-platform-tests/pull/4090 could use a clarifying comment / merge / closure

[02:40:26.0000] <Ms2ger>
Which reminds me, I should do a servo sync

[02:42:30.0000] <annevk>
Ms2ger: if you know the answer please reply there btw

[02:42:52.0000] <Ms2ger>
"When jgraham has time"

[02:43:20.0000] <annevk>
Ms2ger: does it cause jgraham issues if I just merge that one too?

[02:44:06.0000] <Ms2ger>
Some, yes

[02:44:21.0000] <annevk>
Hmm okay, I guess I'll wait for jgraham to come online then

[02:44:24.0000] <Ms2ger>
Maybe wait to see if he answers today

[02:50:56.0000] <jgraham>
Answers what?

[02:51:26.0000] <annevk>
jgraham: see backlog?

[02:51:37.0000] <annevk>
jgraham:  https://github.com/w3c/web-platform-tests/pull/4090  in particular

[02:51:52.0000] <annevk>
jgraham: (though I'm still curious about moving /cors into /fetch/cors at some point too)

[02:52:32.0000] <yoav>
annevk: Hey! I'm trying to see if the concept of "resource type matching" is defined in Fetch, and failing to find it. When I say "resource type matching" I'm talking about the concept of avoid to reuse the same resource when e.g. a request for same URL is initiated by e.g. <img> and <script> (but allowing reuse for <img> and CSS background image). Is that concept defined in Fetch (or elsewhere)?

[02:52:59.0000] <jgraham>
Moving tests has the downside that our sync infrastructure isn't clever enough to automatically move expectation data

[02:53:10.0000] <annevk>
yoav: is that even a thing?

[02:53:20.0000] <jgraham>
So it's OK if all the tests are enabled because it will just be recreated, but if some are disabled it can cause problems

[02:53:34.0000] <yoav>
annevk: It's a thing in Blink's loading code

[02:53:45.0000] <yoav>
I'm hoping it's a thing in other browsers as well

[02:53:59.0000] <annevk>
yoav: for <img> there's a thing defined in HTML

[02:54:06.0000] <annevk>
yoav: I'm not aware of anything for <script>

[02:54:28.0000] <annevk>
yoav: and the thing for <img> likely needs to be generalized in some way and other specifications need to invoke it

[02:54:30.0000] <yoav>
hmm

[02:55:57.0000] <annevk>
yoav: basically someone needs to generalize the <img> loading algorithm and get CSS et al to invoke it

[02:57:08.0000] <annevk>
yoav: the image thing is called "list of available images"

[02:57:21.0000] <annevk>
yoav: it's rather messy and I think needed for compat

[02:59:09.0000] <yoav>
annevk: I agree we need to expand the definition of "list of available images" to more generally define resource reuse inside the renderer (e.g. Blink/WebKit's MemoryCache). I guess that as part of that, we'd need to define the concept of not reusing resources of different types (or different request destination)

[02:59:59.0000] <yoav>
I was hoping something like that is defined (I want to better explain `as` in the preload spec, to ensure compat)

[03:00:20.0000] <annevk>
yoav: if you have some cycles it'd be great to see image loading getting some more refactoring

[03:01:30.0000] <yoav>
I might have some time in a few weeks. I'll see if I can squeeze that in

[03:10:48.0000] <foolip>
annevk: replied

[03:13:34.0000] <annevk>
ta

[03:15:37.0000] <yoav>
mkwst_: I'm looking at https://w3c.github.io/webappsec-csp/#effective-directive-for-a-request and wondering why it's not a simple mapping from destination to directive? (other then question marks)

[03:15:47.0000] <yoav>
Is there a particular reason for that?

[03:17:03.0000] <yoav>
I'm trying to add some language that would tighten what `as` does, and since `as` is a destination value, deriving directive just from destination would make it easier

[03:21:01.0000] <yoav>
I guess I could define it all in terms of fetch and CSP would just derive from that...

[03:29:25.0000] <tobie>
Looking to tighten up the language of the generic sensor spec to make the intervals at which events need to fired more explicit. It the Timer section of the HTML spec a good basis for this? Or are there other things I should be looking at instead?

[03:30:54.0000] <tobie>
*Is

[03:31:30.0000] <tobie>
By "good basis" I mean "good source of inspiration."

[03:56:42.0000] <annevk>
tobie: how do I link to an algorithm?

[03:56:48.0000] <annevk>
tobie: e.g., "convert an ECMAScript value to ByteString"

[03:58:21.0000] <tobie>
TabAtkins: ^ (annevk: afaik you currently cannot)

[03:59:28.0000] <annevk>
I see

[03:59:45.0000] <annevk>
Fetch uses that algorithm somewhere

[04:11:37.0000] <tobie>
annevk: you can add a dfn inside of algorithm and algorithm uses it as its name.

[04:36:51.0000] <tobie>
Mmm. Maybe I can add dfn and export attributes to that div.

[04:38:02.0000] <annevk>
tobie: per bikeshed docs you can only export <hN> and <dfn>

[04:39:25.0000] <tobie>
Yeah.

[05:08:32.0000] <annevk>
Hmm, you can easily deduplicate contacts, but not mark contacts as not duplicatable

[05:44:25.0000] <gsnedders>
jgraham: gsnedders

[05:45:30.0000] <Ms2ger>
gsnedders, jgraham

[05:47:38.0000] <jgraham>
Ms2ger: Ms2ger

[05:48:33.0000] <gsnedders>
Ms2ger: jgraham

[05:53:07.0000] <gsnedders>
jgraham: I meant for readthedocs, if you'd forgotten

[05:58:43.0000] <jgraham>
gsnedders: I had not

[05:59:03.0000] <jgraham>
gsnedders: Done

[09:33:07.0000] <gsnedders>
Seems with new charter everyone has to rejoin the Web Platform WG if interested.

[09:33:46.0000] <gsnedders>
http://www.w3.org/mid/b4b7a03d-3859-8987-d390-2496b5ede2c3⊙wo

[11:02:02.0000] <jsbell_>
TabAtkins: re: Bikeshed: what's the best way for me to define DOMStringList in IndexedDB? Bikeshed now wants the links to be disambiguated, pointing at the dead entry in DOM

[11:02:21.0000] <KiChjang>
any news in whatwg.org?

[11:02:26.0000] <KiChjang>
it's still down for me

[11:02:35.0000] <KiChjang>
oh nvm, my internet was just slow

[11:03:04.0000] <Domenic>
jsbell_: this seems like a case for spec= or link-defaults

[11:03:15.0000] <Domenic>
I guess DOM should get updated though

[11:03:40.0000] <jsbell_>
Domenic: maybe, but this is for spec internal links, i.e. "ignore DOM's entry, use mine"...

[11:03:49.0000] <Domenic>
jsbell_: link-defaults then

[11:04:21.0000] <Domenic>
well, hmm, I don't know how to use link-defaults to point to the spec itself

[11:04:25.0000] <jsbell_>
Domenic: right :)

[11:04:44.0000] <jsbell_>
And I don't want to ignore DOM entirely with pre class='ignored-specs'

[11:05:31.0000] <Domenic>
I think you're supposed to use for=/

[11:05:59.0000] <Domenic>
You can also add `Assume Explicit For: yes` to the metadata block

[11:06:08.0000] <Domenic>
which will make <a>foo</a> ~ <a for=/>foo</a>

[11:16:13.0000] <annevk>
jsbell_: I mean if it's going to be defined I can just remove it from DOM, right?

[11:16:39.0000] <jsbell_>
Domenic: for=/ ends up linking to DOM though.

[11:17:01.0000] <Domenic>
jsbell_: did you update bikeshed to the very very latest? there have been recent changes

[11:17:03.0000] <jsbell_>
annevk: that would also work

[11:17:07.0000] <jsbell_>
Domenic: about an hour ago

[11:17:17.0000] <Domenic>
jsbell_: well then yeah maybe a bikeshed bug/confusion :(

[11:19:03.0000] <jsbell_>
Hard to fault Bikeshed too much here since we shouldn't have it defined in two places. (ODR for specs: undefined behavior!) But this will probably come up again, e.g when experimenting with replacing a spec.

[11:19:27.0000] <Domenic>
I mean it's common for <dfn>s though. For interfaces it's a bug yeah.

[11:20:02.0000] <Domenic>
I was pretty sure this all got straightened out Friday though so I'm surprised it isn't working here

[11:20:37.0000] <Domenic>
I think maybe the oversight is just not knowing how to use link-defaults to default to yourself

[11:32:02.0000] <Domenic>
Anyone want to review this? /cc annevk since it's about trusted events. https://github.com/w3c/web-platform-tests/pull/4025

[11:34:32.0000] <annevk>
jsbell_: so we can't remove DOMStringList?

[11:34:38.0000] <annevk>
jsbell_: should we just define it in DOM then?

[11:35:25.0000] <jsbell_>
annevk: I think we'll be able to replace it with FrozenArrayWithContains<> but no one has spent the time to try doing so yet

[11:35:56.0000] <jsbell_>
annevk: so pending that I went ahead and spec'd reality in the only spec that needs it.

[11:36:07.0000] <Domenic>
Yeah keeping it in IDB seems better than in DOM

[11:41:04.0000] <TabAtkins>
annevk, tobie: All algorithms should have a <dfn> anyway. If that doesn't exist, bug the spec author.

[11:42:13.0000] <TabAtkins>
jsbell_: What's your use-case? You're *writing* IndexedDB, have a definition for something, and want to point to it?  That should work automatically. Or are you writing some *other* spec, and want to point to some non-DOM DOMStringList?

[11:43:32.0000] <annevk>
TabAtkins: DOM has DOMStringList as "obsolete" interface dfn, causes a clash

[11:43:36.0000] <jsbell_>
TabAtkins: I'm writing Indexed DB, have a definition for DOMStringList (standard IDL block, nothing fancy), and am getting ambiguous linking errors; if I use {{/DOMStringList}} it links to DOM's DSL

[11:44:07.0000] <TabAtkins>
That's... weird. Send me latest file so I can debug?

[11:44:25.0000] <TabAtkins>
Interfaces in IDL blocks should always dfn themselves unless they're partial.

[11:44:29.0000] <jsbell_>
TabAtkins: up on https://github.com/w3c/IndexedDB - I pushed anyway

[11:44:35.0000] <TabAtkins>
kk, one sec then

[11:44:51.0000] <jsbell_>
(I cleaned up all the other amb errors, which were legit)

[11:45:27.0000] <annevk>
TabAtkins: I was wondering if there's some way to have legacy IDs for enums and such

[11:45:49.0000] <annevk>
TabAtkins: bikeshed uses enumdef-name, whereas anolis uses just name

[11:46:04.0000] <annevk>
TabAtkins: currently Fetch has some empty <span>'s sprinkled with IDs on them

[11:46:09.0000] <TabAtkins>
annevk: There is - https://tabatkins.github.io/bikeshed/#metadata-translate-ids

[11:46:52.0000] <annevk>
TabAtkins: shit, I wish I had asked before we put this hack in, but I guess it's not too late

[11:47:03.0000] <TabAtkins>
^_^

[11:49:43.0000] <TabAtkins>
jsbell_: Found the problem - you have a markup error. ^_^

[11:49:58.0000] <TabAtkins>
Close your <div dfn-for=request> element.

[11:50:16.0000] <TabAtkins>
/me needs to put more information into that ambiguous-for error.

[11:50:46.0000] <Domenic>
markup errors, the worst

[11:51:43.0000] <TabAtkins>
Confusing linking errors are *often* caused by something accidentally nesting most of the page.

[11:52:13.0000] <TabAtkins>
Luckily easy to spot, since Bikeshed's use of Markdown encourages flat documents.

[11:53:41.0000] <jsbell_>
TabAtkins: whee, checking...

[11:56:11.0000] <TabAtkins>
jsbell_: In the future, use indentation when nesting, to remind you that you need to close something. ^_^

[12:00:03.0000] <annevk>
TabAtkins: https://github.com/whatwg/fetch/commit/a939a20dd93654362c4b95b653ecf8c1d83624ee very clean

[12:00:43.0000] <TabAtkins>
I'll never stop loving "typedefdef"

[12:08:41.0000] <jsbell_>
TabAtkins: yep, that did it; thanks! (brief RL distraction)

[12:16:02.0000] <Domenic>
annevk: the self-links work, woo!

[12:18:07.0000] <annevk>
\o/

[12:46:34.0000] <tobie>
TabAtkins: so what's the non-boolean algorithm for, then?

[12:47:30.0000] <tobie>
TabAtkins: the non-boolean algorithm *attribute*

[12:58:21.0000] <TabAtkins>
tobie: Currently, only making your error messages better.

[12:59:05.0000] <tobie>
TabAtkins: right--my question was more around the fact that you have two competing ways to name the same thing

[12:59:46.0000] <TabAtkins>
Yes, I should probably start requiring that your manually-specified algorithm name be the same as the linking texts of one of the <dfn>s inside the algorithm container.

[13:00:31.0000] <tobie>
TabAtkins: luckily I don't have any of those issues

[13:01:08.0000] <tobie>
TabAtkins: I'm just using the boolean version when a dfn's enclosed.

[13:01:52.0000] <TabAtkins>
Yeah, that's reasonable.

[13:01:56.0000] <tobie>
TabAtkins: would it be possible to use a for attribute to point to an external dfn?

[13:02:22.0000] <TabAtkins>
for attributes aren't checked in any way whatsoever. They're a meaningless opaque string as far as I care.

[13:02:39.0000] <TabAtkins>
At some point I should start caring about that, but not for a while yet. It's expensive and difficult.

[13:03:22.0000] <tobie>
TabAtkins: oh, I meant a for attribute like label has. I forgot you were also using "for" for something else.

[13:04:29.0000] <tobie>
TabAtkins: Basically, I have case where I have <hn dfn export>to foo a bar</hn><div algorithm="to foo a bar">...</div>

[13:05:25.0000] <tobie>
TabAtkins: e.g.: https://heycam.github.io/webidl/#create-sequence-from-iterable

[13:05:27.0000] <TabAtkins>
You can put `algorithm` on a heading!

[13:05:41.0000] <TabAtkins>
Oh wait can you.

[13:05:47.0000] <TabAtkins>
/me goes to check.

[13:14:42.0000] <rniwa>
Domenic: maybe you can merge https://github.com/w3c/web-platform-tests/pull/3968?

[13:14:57.0000] <TabAtkins>
tobie: Anyway, yes you can; it gives the same var-checking benefits as putting it on a container.

[13:15:18.0000] <rniwa>
zcorpan: did you see my reply on https://github.com/w3c/web-platform-tests/pull/3968 ?

[13:15:24.0000] <TabAtkins>
It looks like I never infer an algorithm name from a heading-algo right now. I should infer it from the heading if it's also a definition.

[13:15:26.0000] <tobie>
TabAtkins: for all the content that follows? Neat.

[13:16:10.0000] <TabAtkins>
Yeah, when looking for a var's algorithm, I check "relevant headings" if there's no algo container.

[13:16:32.0000] <tobie>
TabAtkins: Does it wrap it up with the same style it regular algos?

[13:16:36.0000] <TabAtkins>
No.

[13:17:42.0000] <TabAtkins>
Question for anyone using Bikeshed: If I added a "Max ToC Level" metadata (for automatically excluding deeply-nested headings from the ToC), is "just the top-level stuff" level 1 (because first level in the ToC) or level 2 (because <h2>)?

[13:30:37.0000] <tobie>
TabAtkins: well, I really wanted to have both my cake and also eat it.

[13:40:24.0000] <tobie>
TabAtkins: call it Max ToC depth and start numbering with 1

[13:40:49.0000] <TabAtkins>
Brilliant.

[16:02:54.0000] <tobie>
Did I completely dream up the existence of a "fire a simple event" construct?

[16:03:06.0000] <tobie>
I can't seem to find this anywhere.

[16:15:39.0000] <Domenic>
tobie: it was removed in favor of "fire an event"

[16:15:52.0000] <Domenic>
Probably should have been some kind of announcement

[16:17:36.0000] <tobie>
Domenic: at least I'm not making things up.

[16:37:17.0000] <Domenic>
rniwa: any thoughts on https://github.com/whatwg/html/pull/1936 ?

[16:38:12.0000] <rniwa>
Domenic: what is this feature?

[16:38:58.0000] <Domenic>
rniwa: it is a proposal to add promises to the DOM for various one-time events, starting with a few promises on document for common initialization events (interactive, content loaded, and the load event)

[16:39:06.0000] <rniwa>
oh I see

[16:39:27.0000] <rniwa>
Domenic: I'm not sure if adding three new properties on document is a good idea...

[16:39:53.0000] <Domenic>
rniwa: the concern being web compat? We'd made them [Unscopable]

[16:40:25.0000] <rniwa>
Domenic:  How about something like document.whenReady('interactive') ?

[16:40:46.0000] <Domenic>
rniwa: that sounds pretty reasonable, but what is the concern concretely?

[16:41:07.0000] <rniwa>
Domenic: using up more names on document

[16:41:20.0000] <rniwa>
Domenic: e.g. document.interactive seems like something that could be used for something else

[16:41:25.0000] <Domenic>
Hmm :-/

[16:41:28.0000] <rniwa>
like hypothetical "Interactive API"

[16:41:32.0000] <rniwa>
not sure what it would do

[16:41:37.0000] <Domenic>
We'd usually put that on navigator.interactive

[16:41:42.0000] <rniwa>
Domenic: maybe

[16:42:14.0000] <Domenic>
I dunno, I think it'd be a win if we can get a pattern of domNode.simpleStateName.then(...) going

[16:42:19.0000] <Domenic>
e.g. imgEl.loaded.then(...)

[16:42:21.0000] <Domenic>
and so on

[16:42:38.0000] <rniwa>
Domenic: I don't think that's much better than

[16:42:48.0000] <rniwa>
Domenic: image.whenReady('loaded').then(~)

[16:43:03.0000] <rniwa>
Domenic: or even image.when('loaded').then(~)

[16:43:06.0000] <TabAtkins>
That's 11 chars more, plus some shift presses. :/

[16:43:09.0000] <rniwa>
Domenic: then we can add even more types

[16:43:09.0000] <Domenic>
Sure, not too much. But it's a little better, and multiplied by how often we'd expect this to be used...

[16:43:25.0000] <rniwa>
Domenic: e.g. image.when('decoded').then(~)

[16:43:30.0000] <Domenic>
And I think keeping it open-ended is a bit problematic because it kind of implies we're creating this other parallel event system

[16:43:43.0000] <Domenic>
Instead of just special-casing for certain very common one-and-done things

[16:44:07.0000] <rniwa>
Domenic: possibly

[16:44:10.0000] <Domenic>
We have some precedent for these, e.g. stream.closed.then(...) and fontFaceSet.ready.then(...)

[16:44:21.0000] <rniwa>
Domenic: those are on stream & fontFaceSet

[16:44:39.0000] <Domenic>
yeah just saying as part of the web platform we have some precedent for obj.stateName.then(...)

[16:44:40.0000] <rniwa>
Domenic: which are rather "exotic" ojbect

[16:44:46.0000] <rniwa>
Domenic: I know that

[16:44:59.0000] <rniwa>
Domenic: I'm really concerned about document.interative

[16:45:03.0000] <rniwa>
Domenic: document.loaded seems fine

[16:45:10.0000] <rniwa>
Domenic: so is document.contentLoaded

[16:45:24.0000] <rniwa>
Domenic: maybe document.interactiveReady? or document.interactionReady

[16:45:45.0000] <Domenic>
rniwa: hmm OK yeah we can focus on that in particular. The reason for "interactive" was because that's what the readystate changes to

[16:45:53.0000] <Domenic>
But it is a bit of a strange one

[16:46:02.0000] <Domenic>
It's also nice for it to be short since it happens soonest so authors should probably use it more than the others

[16:46:05.0000] <rniwa>
Domenic: yeah.

[16:46:18.0000] <rniwa>
Domenic: document.readyToInteractive.then(~) might be okay too

[16:46:23.0000] <Domenic>
I guess I just wish I knew what we were reserving document.interactive for.

[16:46:35.0000] <rniwa>
Domenic: I can't say

[16:46:43.0000] <Domenic>
It is a nice name, bhis seems like probably the best possible use of it.

[16:46:46.0000] <rniwa>
Domenic: but in general, each name should be as specific as possible

[16:46:49.0000] <Domenic>
s/bhis/but this/

[16:48:07.0000] <rniwa>
Domenic: you may feel that way but are you sure you'll feel the same way in 50 years?

[16:48:12.0000] <rniwa>
that way now*

[16:48:17.0000] <Domenic>
rniwa: pretty sure, yeah :)

[16:48:29.0000] <Domenic>
Insofar as I feel confident about anything I work on lasting 50 years.

[16:48:52.0000] <Domenic>
Well, I'll leave a note on the thread for us to try to brainstorm alternate names. Would you say WebKit supports the other two at least? :)

[16:50:48.0000] <rniwa>
Domenic: well, it depends on what those alternative names for "interactive" would be

[16:51:00.0000] <rniwa>
Domenic: but really, I'm quite indifferent about this API

[16:51:14.0000] <Domenic>
hmm OK fair.

[16:51:22.0000] <rniwa>
Domenic: I don't know what others in the WebKit team feels about it

[16:51:37.0000] <rniwa>
Domenic: but in general, we're a lot more cautious than other vendors when it comes to adding new APIs

[16:51:55.0000] <Domenic>
that's fair. We can try it out in Gecko and Blink first and let you know how it goes.

[16:56:53.0000] <rniwa>
Domenic: anyways, i'm done implementing custom elements in WebKit now

[16:57:02.0000] <Domenic>
rniwa: \o/!

[16:57:12.0000] <rniwa>
Domenic: it should be fully spec compliant and all that in STP17

