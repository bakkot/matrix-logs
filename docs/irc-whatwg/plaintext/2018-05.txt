2018-05-01
[21:29:57.0000] <annevk>
howdoi: Encoding API has no streams support yet


2018-05-02
[02:36:06.0000] <howdoi>
Thank you for the clarification annevk

[04:50:21.0000] <annevk>
jochen__: now that document.open() has a same-origin check, does it need SetSecurityOrigin still?

[04:50:41.0000] <annevk>
jochen__: and what exactly does that too? Shouldn't origins be mostly immutable?

[07:08:45.0000] <annevk>
document.open() is pretty far from interoperable

[07:11:10.0000] <wanderview>
I'm shocked!

[07:12:52.0000] <nox>
Can confirm.

[07:18:33.0000] <Ms2ger>
Shocked as well here

[07:18:48.0000] <Ms2ger>
Nevertheless, thanks for working on it

[07:22:48.0000] <gsnedders>
Noooo? really?!

[07:25:58.0000] <annevk>
It’s really bad people, how do folks even make websites?

[07:28:03.0000] <wanderview>
what do you mean?  the web is so good they are using it to make *paintings* now!

[08:17:28.0000] <zcorpan>
wanderview: do you have a document.open() painting?

[08:18:15.0000] <wanderview>
pretty sure the museum police frown on you opening painting cases

[08:25:51.0000] <Domenic>
annevk: do you have time to do a quick editorial pass on https://github.com/whatwg/html/pull/3639 ? Or I can merge it.

[08:58:56.0000] <annevk>
Domenic: looking

[09:01:54.0000] <annevk>
Domenic: lgtm

[09:41:08.0000] <Domenic>
TabAtkins: I couldn't find anything that has replaced the 300px by 150px part of CSS2: https://www.w3.org/TR/CSS2/visudet.html#inline-replaced-width . Do you know off the top of your head if that's one of the still-in-CSS2 pieces?

[09:42:49.0000] <TabAtkins>
Yes, it is. Only modification is <https://drafts.csswg.org/css-sizing/#intrinsic>, first dt, second bullet point.

[09:44:15.0000] <annevk>
Domenic: I'll add comments about document.close() going forward I guess, but it kinda makes sense from the current spec too

[09:45:37.0000] <Domenic>
Yeah, just not obvious to me...

[09:47:45.0000] <Domenic>
TabAtkins: hmm your encyclopedic knowledge is awesome again. Although it's not immediately clear to me what parts of CSS2 css-sizing is missing; it says 300px by 150px a lot.

[10:08:06.0000] <TabAtkins>
Domenic: Sizing 3 is leaning a lot on layout concepts still only defined in 2.1 at the moment. Note that the dl in that section I linked to is just filling in details in a *particular* case; the more general layout of replaced elements is just defined by shrink-to-fit in the first two paragraphs of the section, which rely on 2.1.

[10:09:34.0000] <TabAtkins>
(This is intentional; we intend to port all that stuff into Sizing in the next level, but didn't want to slow down level 3's advancement by pulling in and rephrasing all the complicated 2.1 stuff.)


2018-05-03
[00:26:36.0000] <yoav>
zcorpan: Hey! Got an `<audio>` question. if I have `<audio><source src=wav type="audio/wav"><source src=mpeg type="audio/mpeg"><source src=ogg type="audio/ogg"><audio>`, which resources would I expect to download?

[00:27:14.0000] <yoav>
(Currently in Chromium it seems like the answer is flakily all of them)

[00:27:41.0000] <annevk>
yoav: I think the first that matches

[00:27:52.0000] <yoav>
that's what I expect

[00:28:04.0000] <yoav>
so in this case, the wav one probably

[00:28:06.0000] <annevk>
I'd have to read the algorithm to be sure though

[02:36:07.0000] <MikeSmith>
Same-site cookie support in Edge just now moved to “working on it” https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/17140412-support-samesite-cookie-option

[02:36:24.0000] <MikeSmith>
mkwst: ⬆

[02:37:48.0000] <zcorpan_>
yoav: I think mpeg because the mime type for wav is audio/wave iirc. What do browsers do?

[02:38:33.0000] <yoav>
from what I see Chromium sometimes download all of them, sometimes leaves one or two out :/

[02:38:48.0000] <yoav>
https://bugs.chromium.org/p/chromium/issues/detail?id=822757&can=2&start=0&num=100&q=owner%3Ame&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified&groupby=&sort=&hotlist_id=

[02:42:38.0000] <zcorpan_>
Or maybe audio/wav is supported. Seems there's no registered type in iana...

[02:43:32.0000] <zcorpan_>
Downloading all of them seems bogus. But maybe that happens if for some reason you can't play anything?

[02:44:34.0000] <zcorpan_>
Audio is still not fetched speculatively right?

[05:11:59.0000] <foolip>
annevk: https://chromium-review.googlesource.com/c/chromium/src/+/986136 has working results now, although I suspect you don't need them

[05:17:10.0000] <annevk>
foolip: still somewhat curious about the locking aspects, but not sure if those are demonstrated there

[05:17:34.0000] <annevk>
foolip: also interested in the SetSecurityOrigin call

[05:17:50.0000] <foolip>
annevk: no, don't think that would be caught there

[05:18:12.0000] <foolip>
annevk: you want to know what tests exercise a particular code path?

[05:20:19.0000] <annevk>
foolip: or how to construct such a test

[06:18:45.0000] <annevk>
yhirano: see https://github.com/w3c/web-platform-tests/pull/10817 for why using the document's URL when reloading is likely wrong

[06:19:06.0000] <annevk>
yhirano: needs to be current entry's URL

[07:24:27.0000] <wanderview>
JakeA: in case you care, I'm going to change one of your abort WPT tests: https://bugzilla.mozilla.org/show_bug.cgi?id=1458805

[09:43:35.0000] <annevk>
Domenic: if you're interested in doing more drive-by reviews, there's quite a few: https://github.com/w3c/web-platform-tests/pulls/annevk

[09:47:34.0000] <Domenic>
Ah well when you put it that way I feel like I should...

[09:48:01.0000] <Domenic>
Wow that is a sad number of open tests :(

[09:53:12.0000] <Domenic>
https://github.com/w3c/web-platform-tests/pull/10548 is a cool test

[09:53:43.0000] <Domenic>
WTF https://github.com/w3c/web-platform-tests/pull/10679/files the web is so weird

[09:54:58.0000] <Domenic>
annevk: so I guess I'm having a hard time doing reviews since I'm not sure what's being tested. E.g. there are no "should" statements in the tests.

[09:55:20.0000] <Domenic>
(for the document.open() tests)

[09:55:26.0000] <Domenic>
So I can't tell what the tests are meant to be testing, and thus I can't check them to see if they're correct

[10:24:06.0000] <annevk>
Domenic: ah yeah, I was more looking for test suggestions and such, they're not quite ready yet as we haven't decided what the spec should be in aggregate

[10:24:52.0000] <Domenic>
Hmm OK

[10:26:03.0000] <annevk>
Domenic: I mean, I sorta know that Chrome is the way to go; maybe I should double down on that in another pass

[12:48:40.0000] <smaug____>
any youtube or polymer folks here? I wonder when Youtube might switch to use webcomponents v1

[12:48:50.0000] <smaug____>
and drop the chrome only API usage


2018-05-04
[23:42:34.0000] <yoav>
A localName of an element is its tag name, right?

[23:42:56.0000] <yoav>
Specifically, HTMLTrackElement's local name is not `texttrack`, right?

[23:43:47.0000] <yoav>
Chromium's resource timing initiatorType implementation says it is, and I want to make sure before changing

[23:47:29.0000] <annevk>
yoav: it's "track"

[23:47:56.0000] <annevk>
(I wouldn't say tag name though, since that's rather ambiguous and incorrect depending on context)

[23:48:26.0000] <annevk>
yoav: having said that, resource timing shouldn't have access to element names

[23:48:32.0000] <annevk>
yoav: that's a pretty big layering violation

[23:48:57.0000] <yoav>
annevk: it's also useless, but this is what current implementations do...

[23:49:47.0000] <annevk>
yoav: I think that basically means we have to pass that information to Fetch too...

[23:49:50.0000] <annevk>
pretty gross

[23:54:14.0000] <yoav>
annevk: we can try to deprecate it, but it's being used and currently there's no alternative

[23:54:51.0000] <yoav>
What the use case really needs is destination + some form of Fetch ID to point at an initiator resource

[23:55:28.0000] <yoav>
the tag name helps no one, other than being a heuristic for the destination

[23:56:43.0000] <yoav>
annevk: I wonder if we could have a simple mapping of destination to some element name that will be compliant enough for this to work without referring to the local name

[23:56:51.0000] <yoav>
s/compliant/compatible/

[23:59:12.0000] <yoav>
tbh, this is what I'm currently doing in the implementation to support the "audio" and "video" initiators (instead of piping the local name through half a dozen abstraction layers)

[00:02:20.0000] <annevk>
yoav: that would be nice

[00:02:28.0000] <annevk>
yoav: could maybe use initiator for the remainder

[00:02:44.0000] <yoav>
yeah

[00:03:51.0000] <yoav>
images would be tricky, as currently they report differently if they were triggered by HTMLImageElement, HTMLInputElement or as CSS background images :/

[00:04:28.0000] <annevk>
Right, so you'd need initiator for that

[00:05:02.0000] <annevk>
Still doable. Most tricky thing with all of that is that image loading isn't properly abstracted yet and CSS doesn't define fetching in any kind of detail...

[00:06:25.0000] <annevk>
We could start tackling some of that though, at least reverse the initators we know we need, add them to the spec, change resource timing around a bit to say what it actually exposes

[00:07:01.0000] <yoav>
yeah...

[00:07:35.0000] <yoav>
I'd be happier if we could avoid all that busy work and just remove initiatorType altogether

[00:08:06.0000] <yoav>
Maybe I'll add a use counter to see how feasible this pipe dream is

[00:15:06.0000] <annevk>
sg

[05:11:35.0000] <smaug____>
a bit annoying the style to put scripts to separate file even in some very small wpt tests

[05:17:32.0000] <annevk>
smaug____: for view source?

[05:17:57.0000] <annevk>
smaug____: I've been wondering if we should improve that for any.js and window.js; it seems that sometimes we could just inline the script instead of referencing it

[05:23:07.0000] <smaug____>
annevk: yeah, for view-source, for debugging

[07:19:56.0000] <JakeA>
wanderview: ah, thanks for catching that

[07:21:26.0000] <wanderview>
JakeA: np... I only mentioned it since I think you said you didn't like the cleanup handler stuff since it doesn't wait for async functions right now... so I wanted to give you a chance to r- it

[07:21:53.0000] <wanderview>
personally I'm happy to use the cleanup handler stuff even without async waiting as long as there is a unique scope

[07:21:58.0000] <JakeA>
wanderview: I think it pushes the need for async cleanup support

[07:22:05.0000] <JakeA>
but yeah, if it works, fiiiine :D

[07:22:38.0000] <wanderview>
JakeA: maybe if you need a break from google io...

[07:37:25.0000] <smaug____>
annevk: ping

[07:38:00.0000] <smaug____>
annevk: https://github.com/w3c/web-platform-tests/blob/master/dom/events/relatedTarget.window.js#L47 why is that right?

[07:38:16.0000] <smaug____>
event is dispatched to body and listener is in shadowchild

[07:38:19.0000] <smaug____>
am I missing something

[07:52:52.0000] <annevk>
smaug____: looks wrong indeed

[07:53:37.0000] <smaug____>
I could fix it while looking this stuff on gecko side

[07:53:45.0000] <smaug____>
just wondering how...

[07:53:57.0000] <smaug____>
add another shadowchild

[07:54:02.0000] <smaug____>
add listener there

[07:54:08.0000] <smaug____>
and dispatch event to that

[07:54:10.0000] <annevk>
smaug____: add listener on body instead?

[07:54:10.0000] <smaug____>
something like that

[07:54:27.0000] <smaug____>
or that

[07:54:33.0000] <smaug____>
with {once: true}

[07:54:52.0000] <annevk>
smaug____: also did we resolve all open questions here? Is only window.event unclear still?

[07:55:06.0000] <smaug____>
well, gecko doesn't have that yet

[07:55:28.0000] <smaug____>
and touch.target handling is still ongoing in impl  (and there are spec issues on touch stuff)

[07:58:27.0000] <annevk>
Yeah, but it seems there's no issues left in DOM

[07:58:39.0000] <annevk>
Well, there's event issues, just not related to dispatch

[07:59:10.0000] <annevk>
smaug____: if you want I can fix these tests too, but would appreciate an issue somewhere

[07:59:44.0000] <smaug____>
annevk: well, perhaps easier if I just fix this minor issue while fixing gecko impl to follow the spec

[07:59:53.0000] <annevk>
k

[08:00:06.0000] <smaug____>
but I can file a testing issue if that is needed for some tracking

[08:00:16.0000] <annevk>
smaug____: it's not

[08:00:52.0000] <annevk>
hayato: kochi: if you're fixing event dispatch in Blink see above and let smaug____ know please

[08:04:30.0000] <smaug____>
ah, that activation behavior is tricky to fix in gecko

[08:04:42.0000] <smaug____>
clearing targets before activation behavior

[08:06:20.0000] <annevk>
I’m glad I put effort into writing that test 😊

[08:38:16.0000] <smaug____>
annevk: ah, another issue with that test with event listener on wrong target

[08:38:29.0000] <smaug____>
relatedTarget is retargeted to host

[08:38:35.0000] <smaug____>
which is not in shadow dom

[08:39:00.0000] <smaug____>
I guess I need to keep the event shadow dom

[08:42:08.0000] <smaug____>
but then the test doesn't test what it is supposed to test

[08:44:14.0000] <smaug____>
but don't know anything better now

[08:46:31.0000] <annevk>
Issue? I also vaguely recall wondering if not clearing when not composed would be better

[14:45:59.0000] <JakeA>
annevk: just seen <!--FETCH--> in the media elements section of the HTML spec. Does this have any kind of special meaning?

[15:35:10.0000] <MikeSmith>
JakeA: that looks like one of the topic markers that Hixie added years ago to enable people to get notified when he made changes to particular part of the spec

[15:35:23.0000] <MikeSmith>
he set up some related tooling back then

[15:35:54.0000] <JakeA>
Gotcha, cheers!


2018-05-05
[21:47:46.0000] <annevk>
JakeA: MikeSmith: I think that one is just a marker to find all places that do some fetching in HTML

[21:48:03.0000] <annevk>
JakeA: MikeSmith: we can probably remove it now that we have concept-fetch to look for (iirc)

[23:10:48.0000] <MikeSmith>
annevk: yeah

[23:11:26.0000] <MikeSmith>
but I reckon there are others of those around still, for various topics

[23:28:21.0000] <annevk>
Yeah I’m slowly removing them; maybe we should do some larger cleanup patches

[10:16:45.0000] <domfarolino>
Domenic: Just a heads up, the countReset PR is only waiting on the WPT which has approval from Victor. I have an implementation ready to be merged in Chrome, and a Node PR bringing theirs up to spec

[15:24:44.0000] <KiChjang>
what is the initial viewport size of an iframe?

[15:51:13.0000] <gsnedders>
KiChjang: same as for all replaced elements, 300x150

[15:51:40.0000] <KiChjang>
gsnedders, that's quite surprising, i was expecting that it would be 0x0 if left unspecified


2018-05-06
[10:53:20.0000] <devsnek>
how is an event target bound to global

[10:57:03.0000] <devsnek>
like the context of it, should i .bind addEventListener,etc to the global object?


2018-05-07
[17:56:38.0000] <Domenic>
devsnek: not sure what you mean. Are you asking how an event listener's thisArg is set?

[18:49:25.0000] <devsnek>
Domenic: like how `window` is an event target but the methods don't appear to be bound

[18:49:50.0000] <devsnek>
you can do `addEventListener(...)` without a receiver and it still has the right arg

[18:50:33.0000] <devsnek>
right now i did `global.addEventListener = EventTarget.prototype.addEventListener.bind(global)` to keep the context object correct

[18:52:58.0000] <devsnek>
if you're curious https://github.com/devsnek/ivan/blob/master/lib/whatwg.js#L31

[19:33:37.0000] <Domenic>
That's just how global properties work

[19:33:56.0000] <Domenic>
Well, no, sorry

[19:34:07.0000] <devsnek>
i'm just a bit confused about how browser does it

[19:34:34.0000] <devsnek>
i see in the spec that the prototype of the global object extends event target but

[19:34:43.0000] <devsnek>
i don't understand how it fixes this receiver issue

[19:34:46.0000] <Domenic>
if (this === undefined) use window instead of this

[19:35:09.0000] <devsnek>
in all cases or just for the event target attached to window

[19:35:36.0000] <Domenic>
https://heycam.github.io/webidl/#dfn-create-operation-function 2.1.2.1

[19:35:40.0000] <Domenic>
In all cases

[19:35:59.0000] <devsnek>
aha

[19:36:00.0000] <Domenic>
Every window method works e.g. open() focus() etc.

[19:36:03.0000] <devsnek>
thank you very much

[20:29:11.0000] <KiChjang>
if an iframe has its width attribute set and also its CSS width value set, which one of them should take precedence?

[23:56:21.0000] <annevk>
JakeA: are you swamped with I/O yet or can you review https://github.com/whatwg/fetch/pull/686?

[08:31:54.0000] <JakeA>
annevk: done. But yeah, not going to get much else done this week.

[08:32:10.0000] <JakeA>
Thanks for the extra review on the range request stuff


2018-05-08
[01:48:03.0000] <hsivonen>
Why does HTMLLinkElement not have a boolean property "disabled" in the spec but has one in Gecko?

[01:53:42.0000] <annevk>
hsivonen: tracked by https://github.com/whatwg/html/issues/1081

[01:53:57.0000] <annevk>
hsivonen: seems nobody was motivated enough to figure out the mismatch thus far

[01:56:21.0000] <hsivonen>
annevk: sigh. seemingly simple stuff is complicated

[01:56:28.0000] <hsivonen>
annevk: thanks

[02:11:12.0000] <annevk>
hsivonen: JakeA: iirc https://github.com/whatwg/html/issues/3672 is of interest to you

[02:11:43.0000] <annevk>
yoav_: same

[08:10:31.0000] <wanderview>
annevk: does From-Origin have any implications for http cache?  I guess if a server provides different From-Origin headers on the same URL at different times they would need to either block caching or use a Vary header?

[08:12:08.0000] <annevk>
wanderview: if we go with my "make it part of CORB" proposal then no

[08:12:23.0000] <annevk>
wanderview: at least not as CORB is currently specified

[08:12:32.0000] <wanderview>
annevk: because it would be blocked before it reaches http cahce?

[08:12:52.0000] <wanderview>
I guess I was thinking CORB and From-Origin checking took place above http cache

[08:13:26.0000] <wanderview>
actually... it seems From-Origin must be checked above http cache since multiple origins share the http cache

[08:15:41.0000] <annevk>
wanderview: as currently proposed it's not above the http cache, but maybe we should change that

[08:16:00.0000] <annevk>
wanderview: it's not entirely clear what the attack angle is though if networking is its own process without scripting

[08:16:09.0000] <wanderview>
annevk: it seems bad if origin A requests a response with From-Origin:A, it goes into http cache, and then later origin B can get it out of the http cache

[08:16:56.0000] <annevk>
wanderview: https://github.com/whatwg/fetch/pull/686#issuecomment-387432176

[08:17:24.0000] <annevk>
wanderview: how would B be able to obtain a non-masked one though?

[08:17:44.0000] <annevk>
wanderview: B would just get an empty response if the response had that header

[08:18:42.0000] <wanderview>
annevk: I'm sorry... what makes it an empty response?

[08:21:14.0000] <wanderview>
I don't understand why it would be an empty response coming out of http cache if the From-Origin check is done below http cache... if it made it to http cache as a full repsonse, what converts it to empty pulling it out of cache?

[08:21:38.0000] <annevk>
wanderview: the CORB processing model if it incorporates From-Origin

[08:22:06.0000] <annevk>
main fetch -> CORB stuff -> service worker / network / cache

[08:23:51.0000] <wanderview>
annevk: surely that is main fetch -> CORB stuff -> service worker -> CORB stuff -> network/cache... right?

[08:25:25.0000] <wanderview>
but ok

[08:27:40.0000] <annevk>
wanderview: if the service worker invokes main fetch again, yeah

[08:28:23.0000] <wanderview>
annevk: ok, that model makes more sense to me

[08:28:38.0000] <wanderview>
and the server can avoid issues with differing headers using Vary

[08:31:44.0000] <annevk>
Domenic: note that I'm not totally opposed to always serialize before processing URLs (some browsers also do it for about:blank), but it does seem a little weird

[08:32:26.0000] <Domenic>
annevk: hmm I don't really get your point. data:, javascript:, and std: are all cases where you want to process "stuff after the scheme"

[08:32:28.0000] <annevk>
Domenic: but we could embrace it and just accept things get a little weird with relative URLs and such

[08:32:54.0000] <Domenic>
URL Standard doesn't have a concept of "stuff after scheme" so you can either serialize + strip leading scheme: or you can try to process path[0] + ? + query + # + fragment

[08:33:12.0000] <Domenic>
I think there are lots of such URLs, not legacy

[08:33:21.0000] <Domenic>
E.g. blob is also like that I think?

[08:33:27.0000] <Domenic>
mailto:

[08:33:28.0000] <Domenic>
etc.

[08:33:46.0000] <annevk>
Domenic: the question is whether javascript://somehost/%0Aalert(1) should work or not; same for these other URLs

[08:34:05.0000] <Domenic>
Hmm I see

[08:34:07.0000] <annevk>
Domenic: and use them as base URL, etc.

[08:34:28.0000] <Domenic>
Well the way I'm doing it now is the same as for data: URLs. You parse, then serialize, then strip leading scheme:

[08:34:29.0000] <annevk>
Domenic: I tend to see that as somewhat problematic that it works

[08:34:53.0000] <Domenic>
It seems reasonable to me; the alternative is treating these as opaque strings where URL decoding doesn't work. Which is weird if we call them URLs.

[08:36:34.0000] <annevk>
I think it goes against the spirit of the RFCs somewhat

[08:36:49.0000] <Ms2ger>
new Promise(resolve => resolve()).then(foo) guarantees that foo is called after the current code has run  to completion, right?

[08:37:03.0000] <annevk>
And it also makes our object-based approach rather convoluted (except we need it for blobs somewhat)

[08:37:17.0000] <annevk>
Ms2ger: yeah, think so

[08:38:16.0000] <annevk>
Ms2ger: Promise.resolve().then(foo) also works fwiw

[08:38:28.0000] <Ms2ger>
Oh, neat

[08:44:14.0000] <Domenic>
annevk: hmm I don't really understand this spirit of the RFCs thing.

[08:44:18.0000] <Domenic>
Also maybe I misunderstood.

[08:44:47.0000] <Domenic>
javascript://somehost/%0Aalert(1) would work if we used URL components (e.g. path[0]). But it wouldn't work if we did serialize-then-strip.

[08:45:06.0000] <Domenic>
And it seems better (more RFC-ey, even) for it to not work?

[08:45:21.0000] <annevk>
It does work with serialize-then-strip

[08:45:28.0000] <Domenic>
how so?

[08:45:31.0000] <Domenic>
Oh becaues of the // lol

[08:45:40.0000] <annevk>
It wouldn't work if we aborted if host was non-null

[08:45:56.0000] <Domenic>
I see

[08:46:30.0000] <Domenic>
I guess this is probably worth a more general issue discussed with a wider community. Plus maybe API affordances if we figure something out. I think I understand enough to open such an issue now.

[08:46:43.0000] <annevk>
That'd be great, I was thinking along similar lines

[08:47:05.0000] <annevk>
We should indeed just enshrine the pattern set by data/javascript and either label it legacy or "this is what we do"

[08:47:38.0000] <annevk>
E.g., it'd make more sense if the serialize had a way to omit the scheme too for this kind of thing

[08:48:14.0000] <Domenic>
Yeah exactly

[08:48:24.0000] <annevk>
Domenic: copy mnot maybe?

[08:48:30.0000] <Domenic>
good idea

[08:48:34.0000] <annevk>
biab

[09:13:28.0000] <Domenic>
Posted https://github.com/whatwg/url/issues/385

[09:35:27.0000] <annevk>
\o/

[15:13:59.0000] <justJanne>
Whenever someone says again that you can’t just deprecate existing APIs in the browser from one day to another...

[15:14:03.0000] <justJanne>
...I’ll link https://arstechnica.com/gaming/2018/05/chromes-autoplay-video-blocker-is-accidentally-killing-web-based-games/

[15:14:27.0000] <justJanne>
specifically, Chrome’s WebAudio autoplay restrictions in recent versions breaking tons of sites

[15:21:11.0000] <laughinghan>
> To get around this, Web-based games now have to actively restart that pre-loaded audio object when the player makes an action to start the game, even if that audio wasn't autoplaying beforehand.

[15:21:42.0000] <laughinghan>
that's an interesting choice. Is there a Chromium ticket with discussion of why they couldn't go with something less disruptive?

[15:23:17.0000] <laughinghan>
e.g. enabling the audio object once the player has made one of the actions they've instrumented without requiring restarting the object?


2018-05-09
[17:05:28.0000] <domfarolino>
JakeA: you around? (Unsure if you're in CA given I/O this week)

[20:20:18.0000] <devsnek>
gg chrome

[20:20:29.0000] <devsnek>
didn't firefox already implement this?

[20:20:34.0000] <devsnek>
like without breaking anything

[20:47:22.0000] <domfarolino>
devsnek: are you referring to the message about preloaded audio object?

[20:47:29.0000] <devsnek>
yea

[20:51:32.0000] <domfarolino>
Ok. I have no info on that, was just curious

[20:59:37.0000] <devsnek>
chrome really locks developers into developing for chrome

[21:00:01.0000] <devsnek>
they had that "made for chrome" badge

[22:53:03.0000] <domfarolino>
devsnek: There's lots of examples for that kinda stuff: https://twitter.com/patrickkettner/status/993897844867186689, https://twitter.com/jaffathecake/status/986341782395863040 for example

[22:53:27.0000] <domfarolino>
wow, didn't think that would take up my _entire_ screen when expanded in IRCCloud

[01:14:34.0000] <annevk>
hsivonen: I'll work on a URL-side fix for that query issue

[01:15:34.0000] <annevk>
justJanne: isn't that proving the point though?

[01:35:36.0000] <hsivonen>
annevk: thanks

[02:11:38.0000] <annevk>
There has to a better way than asciitable.com to lookup hex digits

[02:12:53.0000] <annevk>
Another embarrassing thing I do: data:text/html,&mdash; for an em dash (similar for ellipsis)

[02:14:20.0000] <hsivonen>
I use https://r12a.github.io/app-conversion/ , https://www.binaryhexconverter.com/ and the search "ascii table" on DDG

[02:15:30.0000] <annevk>
I guess I can find solace in that other people reach for URLs too

[02:16:11.0000] <MikeSmith>
annevk: on MacOS you can type an em dash with Shift+Option+-

[02:16:16.0000] <MikeSmith>
hyphen

[05:23:07.0000] <JakeA>
domfarolino: I'm in CA yeah

[05:43:05.0000] <domfarolino>
JakeA: cool, wasn’t sure if you were up since it was late in UK. Do you know if there’s an issue open for FF about <script> </script> being needed after in-body <link>s to render earlier content?

[05:43:14.0000] <domfarolino>
Context: https://github.com/whatwg/html/issues/3672#issuecomment-387414275

[05:57:42.0000] <JakeA>
domfarolino: not that I'm aware of, but the behaviour of link-in-body is undefined so it isn't really a bug

[05:58:39.0000] <domfarolino>
Ok, just wondering. Yeah getting this standardized would be a big win

[06:16:20.0000] <MikeSmith>
Domenic: as far as the WebIDL-less-ness of the Async Local Storage spec, curious if you’ve gotten any feedback from implementors about that

[06:16:55.0000] <Domenic>
MikeSmith: yeah, bholley from Mozilla seemed pretty happy since it means they wouldn't need a Web IDL-to-JS generator. And in Chrome it works better for us for the same reason.

[06:18:00.0000] <MikeSmith>
cool

[06:27:26.0000] <wanderview>
I liked that the layered APIs effectively gives the API a namespace under its import "url"... so in theory something that is broken could be completely rewritten with a new API under a new URL without breaking anything using the old one

[06:34:42.0000] <Domenic>
+1. Not sure it quite makes it worth the other costs of versioning (e.g. dev confusion) but it at least makes it feasible. And you could even no longer ship the old version if it gets low enough usage, but instead lazy-load it from some CDN or something.

[06:35:31.0000] <wanderview>
Domenic: you could even do (perhaps unwise) things like ship 5 versions of the API and see which one people actually use and prefer

[06:35:38.0000] <wanderview>
in the experimentation phase

[06:35:55.0000] <wanderview>
for example, if you're unsure where to draw the line between features/perf in a virtual-list API

[06:36:36.0000] <wanderview>
although I guess that could happen without being in the browser as normal modules on the web

[06:45:32.0000] <Domenic>
Heh yeah fun idea though, might be worth trying

[06:46:42.0000] <domfarolino>
There's not a way to observe the attributes of a script element in which code is executing right?

[06:47:04.0000] <domfarolino>
(from the code that is executing that is)

[06:51:25.0000] <wanderview>
domfarolino: in a window with classic scripts you can use document.currentScript I think

[06:51:31.0000] <wanderview>
no idea how that works with modules

[06:51:38.0000] <wanderview>
and I don't think workers have anything like that

[06:52:33.0000] <wanderview>
/me reads about non-standards document.onafterscriptexecute...

[06:56:27.0000] <domfarolino>
wanderview: oh wow, didn't even know document.currentScript was a thing

[06:59:23.0000] <wanderview>
domfarolino: thats the great thing about the web... there is always more stuff you would not expect to find there

[06:59:32.0000] <domfarolino>
lol, always true

[07:21:01.0000] <domfarolino>
Domenic: Hate to bother you but have you had a chance to look at https://github.com/w3c/web-platform-tests/pull/10722? Looks like we're getting this merged in Chrome very shortly and I'm fixing node's implementation too

[07:21:32.0000] <domfarolino>
s/this/countReset

[07:34:13.0000] <Domenic>
domfarolino: no problem, I thought one review from pwnall would be enough, but happy to also weigh in

[07:34:51.0000] <domfarolino>
Domenic: One review sounds good to me, I just don't have merge access or else I'd prob push it in

[07:35:00.0000] <Domenic>
Oh, we should get you that

[07:35:48.0000] <domfarolino>
That would be awesome :) Does someone just have to extend that access to me?

[07:38:20.0000] <Domenic>
Yeah, although they might delay because they're currently moving to a dedicated web-platform-tests org and are overhauling the permissions structure while doing so

[07:39:14.0000] <domfarolino>
Yeah, I was wondering if it would even be worth it since everything seems to be moving over, which is exciting!

[07:40:59.0000] <domfarolino>
Thanks!!

[07:42:38.0000] <Domenic>
annevk: I don't feel terribly qualified to review https://github.com/w3c/web-platform-tests/pull/10915, as I (and jsdom/whatwg-url in general) have ignored non-UTF-8 URLs, but let me know if you think I'm the best bet for getting it landed and I'll try to figure it out...

[07:47:06.0000] <annevk>
Domenic: I think only you and r12a are somewhat familiar with most of the changed files there

[07:47:19.0000] <Domenic>
Supposedly jsbell too :)

[07:47:44.0000] <annevk>
It's unfortunate those tests were allowed to skip over a lot of the differences by normalizing inputs and outputs

[07:47:55.0000] <annevk>
Otherwise we would have uncovered this issue quite a while ago I think

[07:48:15.0000] <annevk>
There's probably still quite a bit lurking there, but that'll have to wait for another day

[07:48:19.0000] <Domenic>
Yeah I imagine there are more principled ways of writing these tests in general. I just saw a lot of outstanding PRs and wanted to get at least some coverage.

[07:48:31.0000] <Domenic>
But yeah there's a lot of code duplication and such

[07:48:45.0000] <Domenic>
annevk: also FYI I'm going to try to spend an hour today hacking on a new live-url-viewer that is auto-deployed as we update jsdom/whatwg-url. Feature requests welcome. I'll just steal your HTML and CSS?

[07:49:03.0000] <annevk>
More problematic than that is what I'm removing here to some extent, where it removes percent encoding papering over browser differences

[07:49:26.0000] <annevk>
Domenic: I'd love reliable copy-and-paste in the address bar

[07:49:38.0000] <annevk>
Domenic: I suspect base64 or some such is the way to go for that

[07:49:45.0000] <Domenic>
Hmm what do you mean?

[07:50:04.0000] <annevk>
Domenic: so you test a URL and then you want to copy that URL test into another browser to see its outputs

[07:50:21.0000] <Domenic>
Ahhh right OK that makes sense

[07:50:24.0000] <annevk>
Domenic: currently the fragment is mangled, but copy-and-pasting is not reliable due to different escaping techniques

[12:44:39.0000] <domfarolino>
Domenic: There's no reason for line 7 of https://html.spec.whatwg.org/multipage/webappapis.html#fetch-the-descendants-of-a-module-script to have a duplicate "module script's settings object" text right?

[12:44:58.0000] <domfarolino>
Trying to make sure I'm not going crazy here

[12:45:23.0000] <domfarolino>
s/line/step

[12:46:15.0000] <Domenic>
domfarolino: that step looks really broken actually, it's not passing the right arguments at all :(

[12:46:37.0000] <Domenic>
well, the wrong order

[12:46:55.0000] <Domenic>
there are two settings objects in the arguments to ISGMFP

[12:47:02.0000] <Domenic>
but the order is wrong

[12:50:46.0000] <domfarolino>
Domenic: Ok so we're attempting to pass the `module script's settings object` as both the `fetch client settings object` _and_ the `module map's settings object`, but the order is just messed up.

[12:50:53.0000] <Domenic>
yeah

[12:50:55.0000] <domfarolino>
I can take a stab at this in my referrer policy PR

[12:51:03.0000] <domfarolino>
seems minor enough

[12:54:21.0000] <Domenic>
Awesome, thanks for fixing. Separate PR also welcome.

[12:55:58.0000] <jyasskin>
Domenic: Is there a good example of another spec using Streams under the hood? I want to base https://github.com/WICG/webpackage/pull/98 (bundled exchanges) on them and could make something up, but it'd be easier to imitate something you endorse. :)

[12:56:14.0000] <domfarolino>
Yeah, I think I'll actually do a separate one.

[12:57:19.0000] <Domenic>
jyasskin: hmm, "under the hood" doesn't sound like a great match, since streams, like promises, are pretty tied to their public API. Or is this designing an API?

[12:58:08.0000] <jyasskin>
This isn't designing an API, so that's good information.

[12:59:11.0000] <jyasskin>
My idea was that there's a network stream feeding information to a parser, and then that parser exposes a collection of streams for the individual contained exchanges, so I should use those streams in the parser's definition.

[13:17:54.0000] <Domenic>
Hmm, yeah, we've talked about making the concept more disconnected from the API, but it's a pretty hard problem just because of how I wrote myself into a corner to start with.

[13:18:34.0000] <smaug____>
/me wonders if any browser implements "If a listed form-associated element has a form attribute specified, then that attribute's value must be the ID of a form element in the element's tree."

[13:18:41.0000] <smaug____>
that element's tree part in general

[13:18:46.0000] <smaug____>
better to test

[13:18:51.0000] <Domenic>
That sounds like a conformance requirement not related to browser implementations

[13:22:23.0000] <smaug____>
oh, indeed

[13:22:48.0000] <smaug____>
"If element is listed, has a form content attribute, and is connected, then" is more interesting case

[13:23:02.0000] <smaug____>
and that makes this work sanely only with Document and Shadow DOM

[13:23:09.0000] <smaug____>
Domenic: thanks

[13:23:19.0000] <Domenic>
One day we'll try to make the separation clearer...

[14:40:16.0000] <Domenic>
TabAtkins: can I make Bikeshed require a Date for certain document statuses?

[14:42:27.0000] <TabAtkins>
If you add the status to the list of snapshotStatuses https://github.com/tabatkins/bikeshed/blob/master/bikeshed/config/status.py#L80 Date is "recommended", and displays a Warning if you're missing it.

[14:59:53.0000] <Domenic>
Perfect

[15:14:19.0000] <lgrahl>
annevk: Still awake?


2018-05-10
[20:31:13.0000] <MikeSmith>
https://bugs.webkit.org/show_bug.cgi?id=184996 = “Add initial support for 'Cross-Origin-Options' HTTP response header”

[20:31:37.0000] <MikeSmith>
wondering if there’s a spec somewhere

[20:34:57.0000] <MikeSmith>
can’t find anything other than what’s at https://trac.webkit.org/changeset/231622/webkit

[21:32:08.0000] <annevk>
Awake now 😊

[04:45:49.0000] <treora>
Hi all, might anyone have an explanation why <link rel="pingback"> is considered an "external resource" in the whatwg html spec? (see <https://html.spec.whatwg.org/multipage/links.html#link-type-pingback>)

[04:45:49.0000] <treora>
I yet fail to see how pingback servers would qualify as "resources that are to be used to augment the current document"  (from <https://html.spec.whatwg.org/multipage/links.html#introduction-2>)

[07:06:46.0000] <Domenic>
annevk: do you think the live URL viewer should use replaceState instead of pushState so it doesn't generate history entries every time you type something? Or maybe debounced, hmm.

[08:43:16.0000] <wanderview>
ooh, wpt organization now has a cool logo in github

[09:02:22.0000] <annevk>
Domenic: I'd probably not use back, but not sure about a typical user

[09:06:48.0000] <Domenic>
I guess I'll wait for someone to complain

[14:04:44.0000] <TabAtkins>
Debouncing is probably good to do in general.


2018-05-11
[03:22:27.0000] <annevk>
tobie: so I read "I think we need a community group for that." and for a moment there I thought you were serious, then read the rest

[03:24:59.0000] <tobie>
annevk: yeah. This work mode is an important cause of the current situation.

[03:25:23.0000] <tobie>
annevk: it puts the burden of initiating change on those that are victims of the status quo.

[03:27:58.0000] <tobie>
annevk: but then lets those benefiting from the status quo keep the situation as is by refusing to enact change (absence of consensus for change at the AC level).

[03:28:21.0000] <tobie>
annevk: this is how Swirtzerland works, btw.

[03:28:48.0000] <annevk>
Yeah, hence WHATWG, but WHATWG isn't exactly diverse either

[03:29:19.0000] <tobie>
annevk: yes on both counts.

[03:49:59.0000] <smaug____>
Hmm, what is the best way to search through wpt to see if some behavior is being tested

[03:50:06.0000] <smaug____>
perhaps I should just run them all

[03:50:25.0000] <smaug____>
and change implementation to see if anything breaks

[03:50:34.0000] <smaug____>
(or get unexpected pass)

[03:55:02.0000] <jgraham_>
smaug____: We might have useful coverage data these days?

[03:56:28.0000] <smaug____>
jgraham_: hmm

[03:56:50.0000] <smaug____>
this particular case is about form element stuff inside shadow DOM

[03:57:38.0000] <jgraham_>
smaug____: https://github.com/marco-c/code-coverage-reports/blob/master/web-platform-tests.tar.xz has wpt coverage data

[03:57:53.0000] <jgraham_>
From Firefox CI

[06:18:48.0000] <annevk>
smaug____: I tend to resort to grep and digging around in the couple places that might make sense

[07:38:56.0000] <annevk>
frivoal: fyi tobie was sarcastic

[07:48:05.0000] <frivoal>
hehe. That went way over my head. Also, I had heard the same comment made non sarcastically by a couple of people right before, so...

[07:49:00.0000] <frivoal>
either way, this is a real problem, and priviledged people alone are unlikely to be in the best position to get to the bottom of it.

[07:49:30.0000] <frivoal>
(which doesn't mean committees are the best way of out this)

[07:53:00.0000] <annevk>
yeah

[07:53:07.0000] <tobie>
frivoal: oops. see my comments above. The problem with that is we’re basically asking minorities to do the work for free. And then it’ll die at the AC.

[08:23:09.0000] <jyasskin>
tobie: What was the context?

[08:23:39.0000] <jyasskin>
+1 for that being a problem.

[08:24:36.0000] <tobie>
jyasskin: essentially me being a sarcastic jerk on twitter. :-/

[08:28:25.0000] <tobie>
 jyasskin: https://twitter.com/annevk/status/994876132422975489?s=21

[08:29:28.0000] <jyasskin>
Your joke was good.

[08:37:52.0000] <jyasskin>
WHATWG has something of the opposite problem: browser implementers are in a position of power, and folks who don't work for a browser have an uphill battle even if they're right.

[08:43:23.0000] <tobie>
It’s the same problem, really. Creating diversity grants would be a good first step imho.

[09:15:24.0000] <annevk>
Domenic: I'm gonna uppercase those variable names now

[09:15:35.0000] <annevk>
Domenic: for https://github.com/whatwg/whatwg.org/pull/201 that is

[09:15:43.0000] <Domenic>
annevk: ah OK sounds good

[09:16:14.0000] <annevk>
Domenic: shall I also add my review.sh thingie?

[09:16:47.0000] <Domenic>
Yeah please go ahead :). I was prepared to take over since it's getting late for you but if you're still working go for it

[09:31:56.0000] <annevk>
Domenic: should be all in order now

[09:32:20.0000] <annevk>
Domenic: I haven't quite tested the full setup though, only the individual pieces

[09:32:45.0000] <annevk>
Domenic: if I do more work later on I'll ping you here first, but it seems unlikely

[09:32:52.0000] <Domenic>
Yeah, I'll try to give it a try today. It's a bit hard since using curlbikeshed doesn't work until the Bikeshed PR is merged

[09:33:22.0000] <Domenic>
Maybe landing the Bikeshed changes + CSS refactoring + rebuilding all the living standards would be a good first step

[09:33:36.0000] <Domenic>
I'll make gray icons of everything

[09:33:52.0000] <TabAtkins>
Happy to land whenever.

[09:35:53.0000] <Domenic>
Probably Monday

[09:38:00.0000] <annevk>
Domenic: I guess the other thing I might work on later is updating Makefile / .gitignore / README.md for standards

[10:04:44.0000] <annevk>
Did for URL now, as a demo

[10:05:05.0000] <annevk>
I haven't looked at what we need to do for HTML, hopefully it's not too bad

[11:57:53.0000] <TabAtkins>
Domenic, annevk, anyone else with an opinion: Putting together the code for cross-spec backrefs now, so uses of a definition in other specs will show up in the dfn's dfn-panel. Should I just put a single reference to the *spec* that's referencing the term, or should I, when possible, put in all the links to the actual references, like you get with the spec-internal references?

[11:58:39.0000] <TabAtkins>
Possible problem with the latter is that very common types will have *lots* of references - TypeError is referenced by WebIDL alone 70 times, for instance.

[12:00:24.0000] <Domenic>
Oh wow, interesting/awesome...

[12:00:52.0000] <TabAtkins>
Maybe just something like `<a href='link-to-spec'>webidl</a> (70 refs)`

[12:01:46.0000] <TabAtkins>
(Specs that aren't Bikeshedded probably won't have IDs on their refs anyway, so I *can't* link straight to them. But this first run is only going over Bikeshedded specs, so the question still arises.)

[12:01:57.0000] <Domenic>
I'm a bit confused by that example, where would that show up for TypeError? Since TypeError is defined in JS.

[12:02:22.0000] <TabAtkins>
Yeah, it's just the particular thing I'm looking at. Imagine anothe rspec that's actually bikeshedded. ^_^

[12:03:53.0000] <TabAtkins>
Like, Infra's set/append definition is referenced 8 times in WebIDL.

[12:04:27.0000] <TabAtkins>
list-iterate has 12 refs in WebIDL.

[12:04:28.0000] <TabAtkins>
etc.

[12:04:35.0000] <Domenic>
Got it, yeah. I think that would work well, maybe with [WebIDL] as the text

[12:05:11.0000] <Domenic>
You could do the whole thing with <details>, but with a big increase in output file size in many cases, I imagine.

[12:05:21.0000] <TabAtkins>
Yeah, if I go this way I'd just use the same naming code that generates the spec names in the indexes.

[12:05:25.0000] <TabAtkins>
Yeah, exactly.

[12:06:10.0000] <Domenic>
I have a related idea to make that work even better...

[12:06:17.0000] <TabAtkins>
The fact that you can't iterate down the list of refs, like you can internal ones, suggests to me that having the full list wouldn't be that helpful.

[12:06:27.0000] <TabAtkins>
Yeah?

[12:06:41.0000] <Domenic>
If you made the "Terms defined by other specifications" behave like https://html.spec.whatwg.org/multipage/infrastructure.html#dependencies

[12:06:57.0000] <Domenic>
where clicking on the term opens a dfn panel

[12:07:10.0000] <Domenic>
Then you could have "70 refs" link to the entry in "Terms defined by other specifications"

[12:07:32.0000] <Domenic>
So you could jump directly to the usage of the term in the other spec's appendix and see all uses

[12:07:40.0000] <TabAtkins>
Ooooh.

[12:08:22.0000] <TabAtkins>
Hm, I'd have to do some verification that said newly-generated section actually exists, in case you're looking at a spec that hasn't been regenerated recently, or isn't Bikeshed at all...

[12:09:17.0000] <TabAtkins>
But I wanted to do that anyway, to verify that the URL your .bs file claims is where you're published actually contains a document on the other end...  (WebVR, for example, is now lying.)

[12:10:45.0000] <TabAtkins>
(Claims to live at https://immersive-web.github.io/webvr/, was moved to https://immersive-web.github.io/webvr/spec/1.1/, first URL is now a "this spec is abandoned, here's a link to it for legacy purposes" landing page.)

[12:13:57.0000] <annevk>
This sounds quite exciting

[12:13:59.0000] <TabAtkins>
I think my current attempt is probably not great anyway, and I should just be parsing HTML directly and inferring the spec it's referencing via URL. That'll automatically extend to non-Bikeshed things, and won't depend on possibly-legacy linking data.

[12:17:37.0000] <TabAtkins>
I'll do that "dfn-panel for Terms Defined By Reference" thing first, that's more straightforward.

[12:46:20.0000] <jyasskin>
TabAtkins: This sounds great, and I like Domenic's https://html.spec.whatwg.org/multipage/infrastructure.html#dependencies suggestion. Note, though, that it wasn't obvious to me that clicking would open the dfn panel instead of jumping to the definition in the other spec.

[12:46:46.0000] <TabAtkins>
Yeah, it looks like a link there. I won't be styling it like a link.

[12:46:56.0000] <Domenic>
Ah that makes sense

[12:59:37.0000] <Domenic>
Can the Bikeshed web service parse multiple Text-Macro values?

[12:59:55.0000] <Domenic>
And more trickily, how would I pass them with curl?

[13:35:07.0000] <TabAtkins>
https://api.csswg.org/bikeshed/ explains how to pass metadata to bikeshed via the curl api.  It *should* handle multiple Text-Macro values, but you'd have to check.

[15:59:10.0000] <TabAtkins>
All right, Terms Defined By Reference is now dfn-panel'd. Let me know if there's anything you want fixed in https://github.com/tabatkins/bikeshed/issues/1249. I'll give more thought to backreferences next week.


2018-05-12
[20:17:21.0000] <devsnek>
[SameObject] just means that accessing the property should always give the exact same object right?

[20:50:04.0000] <annevk>
devsnek: yeah, though we want to replace it with [Cached] or some such to make it more useful for spec authors

[10:40:02.0000] <luxio>
does whatwg have affiliation/involvement with schema.org

[11:38:25.0000] <domfarolino>
Domenic: when we say “let X be the current state of the ‘crossorigin’ attribute” does this imply that X will definitely be one of the valid CORS Settings Attributes or does anything go?

[11:39:21.0000] <Domenic>
domfarolino: it will definitely be in one of the three states listed in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes (Anonymous, Use Credentials, or No CORS)

[11:39:32.0000] <Domenic>
According to the rules of that table + invalid value default + missing value default

[11:40:17.0000] <Domenic>
Last two paragraphs of https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#enumerated-attribute give the detailed rules

[11:51:30.0000] <domfarolino>
Domenic: Ah perfect, thanks! That’s what I was thinking but “current state” threw me a little; I wasn’t sure if that sort of parsing was taking place implicitly

[11:57:20.0000] <Domenic>
Yeah, maybe "current state" would be best linked to something

[12:00:26.0000] <domfarolino>
Yeah, that or “limited to only known values” similar to the IDL getter but maybe the message is already clear enough hmm


2018-05-14
[23:51:45.0000] <annevk>
FYI: I plan on landing the CORB PR at https://github.com/whatwg/fetch/pull/686 later today or tomorrow

[04:24:44.0000] <annevk>
mkwst: you around?

[04:24:49.0000] <annevk>
mkwst: what's the status on https://www.w3.org/TR/clear-site-data/?

[04:25:18.0000] <annevk>
mkwst: we're interested in implementing, but I recall Chrome had some perf issue and I wonder if that's reflected in the draft yet

[04:25:54.0000] <mkwst>
I am not around. Will be out of meetings around 17:00.

[04:26:27.0000] <mkwst>
We had to turn off `cache` for some period of time because there was some framework that added `clear-site-data: cache` to every response, which crashed Chrome.

[04:26:36.0000] <annevk>
ta

[04:26:59.0000] <mkwst>
AFAIK, it's working again after we did some work to make sure that deletions were not parallelizable.

[04:27:14.0000] <mkwst>
But I'd have to check with my colleague who did that work.

[04:27:45.0000] <annevk>
Okay, so just need to be careful to avoid DOS

[04:28:41.0000] <mkwst>
Right. I think we got into trouble because we were double-, triple-, and quadruple-deleting cache entries, which our implementation turned out not to like.

[04:28:45.0000] <mkwst>
So don't do that.

[04:29:11.0000] <annevk>
baku will try 😃

[06:26:51.0000] <annevk>
Domenic: so sed is reasonably fast to process source, but it's super awkward to deal with the newlines of the large <details> block

[06:26:58.0000] <annevk>
Domenic: it ends up looking rather ugly

[06:27:34.0000] <annevk>
Domenic: and I don't know enough bash to make it look better

[06:27:45.0000] <wanderview>
annevk: perl!

[06:27:46.0000] <Domenic>
Heh. Yeah we could do some research, or switch to Python or Node

[06:28:31.0000] <annevk>
wanderview: I'd like HTML build scripts to no longer rely on Perl (or Pascal)

[06:29:05.0000] <wanderview>
annevk: ok... i was just saying that with the right flags perl is pretty close to a sed drop-in and it supports newlines much better

[06:29:16.0000] <wanderview>
but... whatevs

[06:32:12.0000] <Domenic>
Oh, I thought it was a joke... Person 1: "my code is too ugly"; person 2: "you should use perl!"

[06:35:58.0000] <annevk>
heh

[06:38:09.0000] <gsnedders>
Domenic: hah, Perl is good for some things! :)

[06:52:34.0000] <edent>
I'd like to make a PR to the HTML spec. Is there a guide for how to set up BikeShed (?) so I can see if my changes have worked?

[06:55:18.0000] <gsnedders>
edent: see https://github.com/whatwg/html-build

[06:57:09.0000] <annevk>
edent: and https://github.com/whatwg/html/blob/master/CONTRIBUTING.md

[07:22:36.0000] <edent>
Perfect, thanks!

[09:48:08.0000] <TabAtkins>
devsnek: As annevk said, yes, but currently it's just a flag calling out to implementors and users that it *should* have that behavior; it doesn't actually *do* anything on its own, so the spec author still has to manually write the caching behavior. (Thus annevk's mention of [Cached], which will actually have some semantics.)

[09:49:59.0000] <devsnek>
good to know, thanks

[11:44:30.0000] <smaug____>
has there been any discussion to be able to load custom elements definitions lazily?

[11:44:58.0000] <smaug____>
Basically a notification when a new CE-like element (without definition for it) is created

[11:45:31.0000] <smaug____>
then one could fetch the definition, and upgrade

[11:46:27.0000] <smaug____>
(FWIW, this is something that Firefox UI code seems to need while replacing XBL with CE, but FF UI code can do script loading synchronously in these cases, I think)

[11:48:11.0000] <Domenic>
We briefly discussed that at the last F2F and said people should use MutationObservers, I thought?

[11:48:58.0000] <smaug____>
oh, indeed we did discuss :)

[11:50:03.0000] <smaug____>
but, wasn't there some requirement for localName filtering

[11:50:29.0000] <smaug____>
https://github.com/whatwg/dom/issues/398

[13:16:28.0000] <nox>
annevk: Argh.

[13:17:14.0000] <nox>
annevk: Just realised that `for (let foo in …)` loops in Servo with the old SM are completely broken, and closures in the loop end up sharing the same foo value. :(

[14:50:22.0000] <Domenic>
Servo is a legacy browser, news at 11. (I kid because I love.)

[15:11:53.0000] <gsnedders>
nox: have you considered upgrading SM? ;P


2018-05-15
[00:55:24.0000] <annevk>
mkwst: sec-metadata seems reasonable, but I wouldn't start out with all members from the get go

[00:55:44.0000] <annevk>
mkwst: well, that'll just delay it until we figured out the final shape of initiator I guess

[00:56:12.0000] <mkwst>
Initiator is interesting because it allows us to distinguish downloads. I don't remember any of the other initiators being interesting.

[00:56:19.0000] <mkwst>
But, I'm running to a meeting. Back in 30.

[00:56:28.0000] <annevk>
mkwst: it also seems a little weird to share initiator and destination with the server; as ideally they don't conneg on that

[00:57:12.0000] <annevk>
Downloads still needs to be sorted interoperability-wise

[00:57:58.0000] <nox>
gsnedders, Domenic: Oh yeah, not planning to change that `for (let foo in …)` test in WPT for Servo, just want a pat in the back and be told "it will be ok". :P

[00:58:33.0000] <nox>
ajeffrey_ got some good progress on the SM update front though, props to him.

[05:37:01.0000] <smaug____>
annevk: do you happen to know if https://w3c.github.io/webappsec-clear-site-data/ has got any proper review?

[05:41:36.0000] <mkwst>
smaug____: Dubious review at best. The guy who wrote it has weird ideas, and Chrome's the only implementing browser. I expect bugs to fall out when more folks are paying attention.

[05:43:01.0000] <ajeffrey_>
nox: thanks. Still blocked on [expletive deleted] Windows build, this time link errors in debugmozjs, sigh.

[05:43:29.0000] <ajeffrey_>
Oh well, different errors from last week, so that's progress.

[05:44:53.0000] <smaug____>
mkwst: hehe. Ok, not reviewed.

[05:45:21.0000] <mkwst>
Patches welcome!

[05:51:01.0000] <annevk>
smaug____: I reviewed it a bit, but there's a lot of work outstanding

[05:51:17.0000] <annevk>
smaug____: in particular with cleaning up how this integrates with all the various established things

[05:51:24.0000] <annevk>
smaug____: I think it had TAG review too

[06:03:08.0000] <smaug____>
mkwst: I assume Chrome isn't shipping it yet

[06:07:05.0000] <annevk>
smaug____: https://groups.google.com/a/chromium.org/d/msg/blink-dev/rXxzsXLuZEc/HM17-B75BQAJ suspect they are

[06:18:02.0000] <mkwst>
Since Chrome 61 (Augustish?). Google Photos is the only site I know of using it at scale, so we still have opportunity to shift things around a bit.

[12:10:22.0000] <wanderview>
/me reads about portals...

[12:16:34.0000] <nox>
wanderview: Are you thinking with portals yet?

[12:16:55.0000] <wanderview>
I don't think so...


2018-05-16
[09:27:31.0000] <gsnedders>
am I right in thinking replacing <a name> with <a id> is non-conforming, given it violates the semantics of the a element?

[09:28:14.0000] <Domenic>
That seems reasonable; you should use <span id>

[09:28:43.0000] <gsnedders>
Domenic: that makes it much harder to programmatically replace though

[09:28:50.0000] <gsnedders>
:(

[09:41:31.0000] <TabAtkins>
Replacing an `<a name>` without an href with a `<span id>` seems easy enough; if it has an href then you can leave it as an `<a>` and just swap the attribute.

[10:12:21.0000] <domfarolino>
Domenic: are we thinking just an “example” is required for the referrerpolicy attr PR, to show that the policy is communicated downwards to imports or do we need more normative text too?

[10:12:29.0000] <domfarolino>
I’m thinking just an example

[10:40:59.0000] <Domenic>
domfarolino: Just an example should be fine, yeah

[13:07:00.0000] <Alystair>
Why is counter() limited to content property only? Wouldn't it make sense to allow it to be used for other properties?

[13:08:20.0000] <Alystair>
eg. I want to reverse the z-index of my H2 tags that are position:sticky to the bottom of the viewport

[13:17:08.0000] <TabAtkins>
Alystair: It's not, but it returns a <string>, which is accepted by very few properties.

[13:17:26.0000] <TabAtkins>
(But in practice, browsers might not have support for using counter() in other places that take <string>...)

[16:51:46.0000] <Alystair>
ah right, it's a string because counter can be something other than int... duh

[16:53:55.0000] <Krinkle>
Alystair: Can you show a demo / snippet of the issue? It seems to me that position-sticky use cases are typically siblings, which would normally not be overlapping with the native sticky behaviour. So their dom order (default z-index essentially) wouldn't be an issue.

[16:55:04.0000] <Krinkle>
The example  at MDN / https://css-tricks.com/position-sticky-2/ uses top-aligned items, but the next current item does not overlap the previous current item. instead, they are pushed out of the way.


2018-05-17
[18:02:51.0000] <domfarolino>
Domenic: what is the benefit of having the ‘crossOrigin’ IDL attribute nullable?

[18:13:44.0000] <Domenic>
domfarolino: it allows removing the content attribute by setting the IDL atrribute to nill.

[20:37:25.0000] <devsnek>
does w3c have an irc channel besides the dead irc server

[20:50:48.0000] <joyee>
Domenic: is the "last script tag of WPT are tests" a convention? I am thinking about putting the tests that apply to browsers in a previous script tag, and tests that can be run by Node.js to the last tag, so it will be easier to automate any WPT updates in Node.js

[20:51:29.0000] <Domenic>
joyee: I don't think people would generally accept tests that don't run in browsers into the WPT project

[20:51:56.0000] <joyee>
Domenic: I mean to split the test cases into script tags

[20:52:00.0000] <joyee>
multiple tags

[20:52:19.0000] <joyee>
In general WPT is a superset

[20:52:25.0000] <Domenic>
ah i see

[20:52:51.0000] <joyee>
And we can update the union that can be run in both in the last script tag

[20:53:11.0000] <Domenic>
That should work fine, although it'd need heavy commenting to hopefully prevent people from messing it up over time, since most contributors (including CI) won't be aware of this division

[20:53:45.0000] <Domenic>
Like, most contributors have no idea what works or doesn't work in Node.js

[20:54:15.0000] <joyee>
I think right now only the URL tests are kept somewhat in sync

[20:55:00.0000] <joyee>
I've been told that browsers can automatically upstream their tests into WPT, so I am thinking about doing the same thing in Node.js, but it would be tricky to comment out stuff that don't work in browsers

[20:55:08.0000] <Domenic>
My understanding is right now the URL tests are maintained for browsers but other projects like node or jsdom will do their own stuff with those files

[20:55:17.0000] <Domenic>
Oh interesting

[20:55:48.0000] <joyee>
The blocking part is finding a way to denote the union of two sets

[20:57:26.0000] <Domenic>
I mean separate script tags will work for now I'm just saying that future contributors might not understand the division and put stuff in the "wrong" script tags (since for browsers both script tags will work).

[20:58:23.0000] <Domenic>
If you were able to divide by file and API that'd work better e.g. isolate all URL constructor tests into one file and insist that all future URL constructor tests also go there

[21:01:35.0000] <joyee>
Domenic: isn't that `url-constructor.html` is? Or that name just implies "the the constructor is tested here", not that "all constructor tests go here"

[21:02:35.0000] <Domenic>
I think the former, e.g. failure.html tests the constructor too I believe.

[21:02:56.0000] <Domenic>
I'm curious what file you're looking at right now that is mixed?

[21:04:09.0000] <joyee>
For example, this one https://github.com/w3c/web-platform-tests/blob/master/url/toascii.window.js there is `XMLHttpRequest`

[21:04:32.0000] <joyee>
I was working on a tool to automatically update WPT in Node.js, but I found tests that were commented out

[21:05:29.0000] <joyee>
Technically we can run the tests in a vm with browser globals that are just noops but it may not be enough

[21:07:40.0000] <joyee>
Basically grepping for `//` in `test/parallel/test-whatwg-url-*` would yield the results (with legit comments)

[21:12:11.0000] <joyee>
Domenic: I can work on splitting the tests that can't be run in Node.js into different files in WPT first as well, and focus on automating the process of updating tests that work into Node.js. If any updates come back breaking Node.js, we can just fix it and update again

[21:16:12.0000] <Domenic>
Awesome, sounds pretty reasonable to me! We should also check with annevk, who should be waking up soon I think.

[21:18:04.0000] <joyee>
Great! Yeah now come to think of it, splitting into different files should make things simpler than splitting them into tags

[22:24:26.0000] <annevk>
joyee: wfm

[22:24:45.0000] <annevk>
joyee: note https://github.com/w3c/web-platform-tests/issues/10918 though

[22:30:56.0000] <joyee>
annevk: Thanks for the heads up. I don't think we have the two .js there since they involve `XMLHttpRequest` and `<a>`. The JSON fixtures are now manually being copy-pasted into our own fixtures directory with some comments added, I plan to move all the WPT files into a separate fixtures directory of the same layout in Node.js anyway so it should be fine.

[06:18:10.0000] <JakeA>
annevk: I'm having brain fade. How do I reference https://html.spec.whatwg.org/multipage/links.html#downloading-hyperlinks in Bikeshed? Or is it not exported?

[06:18:32.0000] <JakeA>
The HTML spec's markup always trips me up

[06:20:20.0000] <JakeA>
Hm, it doesn't have data-export, so I guess I'm stuck.

[06:21:21.0000] <annevk>
JakeA: you can add data-export

[06:21:32.0000] <annevk>
JakeA: then it'll be exported tomorrow

[06:21:55.0000] <JakeA>
Ta, I'll do a PR

[06:22:06.0000] <annevk>
JakeA: given that the processing model is a bit broken though I hope it's only for a non-normative dependency

[06:22:39.0000] <annevk>
JakeA: FYI, prefix commit with "Meta:"

[06:22:44.0000] <JakeA>
annevk: yeah, this is listing the types of APIs that make range-requests in a note

[06:22:55.0000] <JakeA>
ta

[06:33:33.0000] <JakeA>
annevk: A couple of parts of the fetch spec encode numbers to use as headers. What's the best way to encode a number for this purpose? https://heycam.github.io/webidl/#es-ByteString seems close, but feels wrong to use something like this in-parallel.

[06:36:27.0000] <annevk>
JakeA: "represented as shortest possible lowercase hexadecimal number" or "shortest possible decimal number" is what URL seems to use

[06:36:55.0000] <annevk>
JakeA: ideally Infra defines this, but that's blocked on the BigInt refactoring of JS

[06:37:38.0000] <annevk>
JakeA: what URL uses doesn't seem quite accurate, as it doesn't really explain what code points/bytes to use

[06:38:11.0000] <annevk>
JakeA: I'd be okay with a TODO and some hand-wavy wording for your Range patch

[06:38:45.0000] <JakeA>
annevk: I'll create the same definition as URL, along with a note

[06:40:18.0000] <wanderview>
JakeA: I wonder how much more broken the UI would get if your download glitch demo also piped through a service worker

[06:41:05.0000] <wanderview>
since the SW layer forces the transfer encoding to be stripped from the stream... maybe it would actually work better

[06:41:51.0000] <JakeA>
wanderview: it might not be any worse. Hah, yeah, probably better.

[06:42:11.0000] <JakeA>
wanderview: unless it gets angry that it gets more data than the content-length

[06:42:25.0000] <JakeA>
but it feels like that would be a problem elsewhere

[06:42:42.0000] <wanderview>
JakeA: yea, we already had to deal with that for normal service worker behavior with encoded resources

[06:42:59.0000] <wanderview>
basically a big shruggy for the content-length

[06:43:24.0000] <wanderview>
JakeA: probably a can of worms to sort out when fetch progress API is added

[07:00:14.0000] <annevk>
Domenic: some review on the WIP PRs against html/html-build/wattsi would be helpful

[07:01:12.0000] <annevk>
Domenic: I think they're almost ready to go, after which HTML would finally have slightly annotated commits

[10:49:46.0000] <Krinkle>
Hm.. does this really not have an outcome today? https://stackoverflow.com/a/34545749/319266

[10:50:05.0000] <Krinkle>
E.g. a safe way to generically escape and embed a JS response in an inline <script> on a HTML5 text/html response

[10:50:43.0000] <Krinkle>
It surprised me that generically html-text escaping a script worked fine for evil event attributes, but not for inline scripts.

[10:51:30.0000] <Krinkle>
e.g. <script>var a = &quot;&quot;</script> is a syntax error but <div onclick="alert(&quot;&quot;)"> is not. I understand why, but still would be very very good, if there was indeed a safe way to embed and escape it.

[10:51:41.0000] <Krinkle>
Preferably a way that doesn't involve CDATA but maybe that's the only way?

[11:38:29.0000] <TabAtkins>
Krinkle: Correct, there's no way to generically escape JS in a <script> tag without doing full JS parsing on your own, so you can find </script subsequences in strings/etc. No one-size-fits-all replacement method exists.

[11:41:41.0000] <TabAtkins>
(Extra-hard mode: the / can come from a regex. The expression `x</script/.exec(...)` is both valid and potentially sensical, but it trigger end-of-<script>-block.

[11:41:42.0000] <TabAtkins>
)

[12:03:18.0000] <jsbell>
eval(atob('YWxlcnQoImhlbGxvIik=')) ... and I would have gotten away with it to except for those pesky kids and their CSP.

[12:03:37.0000] <jsbell>
s/pesky/meddling/, *sigh*

[13:02:14.0000] <TabAtkins>
jsbell: Not trying to prevent XSS here, just be able to splice in a script from server-side without the possibility of it accidentally closing the <script> element partway thru.

[14:51:45.0000] <jugglinmike>
I'm seeing Chrome behaving inconsistently when setting `font-family` to a web font

[14:52:12.0000] <jugglinmike>
Sometimes the change is apparent synchronously, and sometimes not

[14:53:15.0000] <jugglinmike>
I'm trying to find the relevant spec text, but I don't know where to look

[14:53:21.0000] <jugglinmike>
the closest I've come is https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements

[14:53:59.0000] <jugglinmike>
but that's not quite right, since it's not phrased in terms of the JavaScript execution context

[14:55:54.0000] <TabAtkins>
As in, the layout effects of the new font might be async?

[15:07:51.0000] <jugglinmike>
TabAtkins: yeah. They normally are

[15:11:11.0000] <jugglinmike>
Still experimenting, but this may be related to the @font-face definition as well

[16:18:47.0000] <Krinkle>
TabAtkins: Aye, yeah. it's unfortunate, given that in most other areas, HTML escaping does not affect the code's function. E.g. things like attribute values such as for <a href> can redundantly use entities for any characters like &lt; and it gets decoded before being interpreted as URL, but it seems that for <script> that isn't the case.

[16:19:06.0000] <Krinkle>
Although some sources on the web suggest that HTML escaping is supported in <script> if and only if the document is in XML mode.

[16:19:29.0000] <Krinkle>
E.g. that would allow <script>if ( 0 &lt; 5 ) {}</script> to parse without errors;

[16:28:42.0000] <Krinkle>
Ha, indeed. I'm able to get it to work in an isolated test by using 'Content-Type: application/xhtml+xml' although at least in Chrome it only worked if I also added the xmlns attribute to the <html> element. Otherwise it kept interpreting it as HTML.

[16:31:44.0000] <TabAtkins>
Krinkle: Yup, but then you pay the penalty that you *can't* write a bare < in your script without cdata.

[16:34:08.0000] <TabAtkins>
(and if you use cdata, you run into the same difficulty as with avoiding </script)

[16:34:49.0000] <Krinkle>
TabAtkins: Yeah - https://github.com/wikimedia/mediawiki/blob/1.30.0/includes/Html.php#L594-L612

[16:34:57.0000] <Krinkle>
For CSS we somewhat found a workaround for that.

[16:35:00.0000] <Krinkle>
But not for JS really

[16:35:26.0000] <Krinkle>
CDATA syntax is rare enough that it hasn't bitten us yet in the subset of scripts that can end up embedded

[16:36:14.0000] <TabAtkins>
The end glyphs for cdata are even more reasonable to show up in a realistic script, imo. Just a ]]>

[16:36:22.0000] <Krinkle>
XML mode support has been removed from MediaWiki in a previous version. It used to be a site configuration option for admins, but it was too troublesome to guruantee and just in general the idea of supporting two modes. We ended up going with HTML5.

[16:36:39.0000] <TabAtkins>
That's just a double-array access with a comparison.

[16:37:28.0000] <Krinkle>
Right, but that's only a problem in XML mode, right?

[16:40:12.0000] <Krinkle>
From a quick test, having a <script>/*<![CDATA[*/ if ( ''[''[0]]>0 ) {} console.log(1);/*]]>*/</script> seems to work fine

[16:40:14.0000] <Krinkle>
in HTML mode

[16:40:23.0000] <Krinkle>
despite containing a literal ]]>

[16:41:09.0000] <Krinkle>
Not sure why/how that works.


2018-05-18
[18:37:50.0000] <MikeSmith>
TabAtkins: Any current estimate of when you might be able to do the thing of extracting the syntax-highlighting stuff from Bikeshed so that we can use it for the HTML spec?

[19:58:04.0000] <TabAtkins>
MikeSmith: Ah dang, that's like 80% finished, I just dropped it. I'll get it done next week for you.

[20:32:40.0000] <MikeSmith>
TabAtkins: \o/

[20:32:44.0000] <MikeSmith>
thanks!

[00:10:56.0000] <mkwst>
annevk: re:https://github.com/w3c/web-platform-tests/pull/10594#issuecomment-390116038, it would be nice if we could write down what folks think `from-origin` means. The github thread is confusing, and seems to be moving in a direction that doesn't match what's in WebKit at the moment.

[00:11:23.0000] <mkwst>
Is that on your plate? Or Apple's? Or do we need to find a volunteer? :)

[00:11:29.0000] <annevk>
mkwst: so WebKit folks would get back to my suggestion I think

[00:11:53.0000] <annevk>
mkwst: I think making From-Origin the CORB opt-in makes the most sense and would be the easiest to adopt

[00:13:01.0000] <annevk>
mkwst: so I guess it's on Apple's plate and perhaps also on Google and Microsoft's plate to evaluate my input and give their perspective

[00:13:29.0000] <mkwst>
I worry a bit that further narrowing `from-origin`'s impact makes it even less likely that folks would serve it.

[00:13:46.0000] <mkwst>
I also worry about some Google security folks' feedback regarding deployability.

[00:14:10.0000] <annevk>
mkwst: this makes it much easier to deploy as it only affects cross-origin no-cors fetches

[00:14:38.0000] <annevk>
mkwst: it also helps as a long term defense when everyone has site isolation

[00:15:57.0000] <mkwst>
annevk: Less risky, certainly. *shrug* I'm happy for folks to ship implementations of this to see if developers pick it up. My suspicion is that we'll end up seeing more value in approaches with broader scope, but this is small enough that shipping it doesn't cost much.

[00:16:41.0000] <annevk>
Whenever we tightly couple stuff it seems it's less likely to be adopted because it requires changing all the things

[00:17:02.0000] <mkwst>
annevk: When you say that it should be part of CORB, do you mean it would be another way of triggering the blocking behavior? Or that it would influence the heuristics, similarly to `x-content-type-options`?

[00:17:24.0000] <annevk>
mkwst: another way of triggering a block

[00:18:26.0000] <mkwst>
Ok. So, the idea is that you'd compare the resource's origin to the requesting origin (without consideration of embedding contexts, etc), and block if there's no match?

[00:18:33.0000] <mkwst>
(for cross-origin, no-cors requests)

[00:18:53.0000] <annevk>
Yes

[00:19:41.0000] <mkwst>
Ok. I'll try to summarize my understanding of the thing on the thread.

[00:20:42.0000] <annevk>
And now we landed CORB in Fetch this would be a fairly trivial PR. I volunteered doing the work on it

[00:21:47.0000] <Ms2ger>
/me read "CORB in French" and was very confused

[00:23:16.0000] <annevk>
Ms2ger: "Blocage de lecture inter-origine"

[01:16:51.0000] <michael2>
hi all, does whatwg.org have a CSS spec?

[01:17:51.0000] <annevk>
michael2: there's two CSS-related ideas we host, but they're not living standards: https://idea.whatwg.org/

[01:18:00.0000] <annevk>
michael2: they're also not really maintained as far as I'm aware

[01:19:07.0000] <michael2>
so would I need to browse w3c.org to find the CSS spec's? (1,2,3+)

[01:20:59.0000] <annevk>
michael2: I'd use https://drafts.csswg.org/

[01:21:15.0000] <annevk>
michael2: those are also the documents the WHATWG links to

[01:21:50.0000] <annevk>
michael2: they're probably mostly identical to what ends up on w3.org, but might be a bit more recently updated

[01:22:46.0000] <michael2>
annevk: thats really helpful (alot of reading there) thank you :)

[01:53:19.0000] <JakeA>
annevk: is something in particular blocking [Cached] in idl? If so we could instead add something to infra like "Return the cached result of these steps"

[01:54:18.0000] <annevk>
JakeA: IDL is lacking resources

[01:54:29.0000] <annevk>
JakeA: I don't think anything is blocking that work

[01:56:14.0000] <annevk>
JakeA: it could maybe work in Infra; I guess it could create a unique slot on this and store the result of running the steps there if it's empty and otherwise return the value of the unique slot

[01:56:34.0000] <annevk>
JakeA: though I guess creating the unique slot is the problem, but we could hand-wave it perhaps

[01:57:38.0000] <JakeA>
annevk: The context object could have a map, where the key is the steps and the value is the cached value. But I'm not sure how to decide if it'd be better as an idl thing or a prose thing

[02:01:22.0000] <annevk>
JakeA: IDL is somewhat better as just like it can generate the spec code for us, it can generate the impl code too

[02:01:39.0000] <annevk>
JakeA: e.g., Firefox supports a variant of Cached already iirc

[02:01:51.0000] <JakeA>
Gotcha. Yeah that makes sense

[02:32:14.0000] <domfarolino>
annevk: It seems like subresource requests from an <iframe referrerpolicy=xxx></iframe> don't inherit the frame's referrer policy in Chrome/FF. Want to confirm with you that the rp should be inherited, due to steps in Main Fetch that use a request's client's referrer, right?

[02:34:42.0000] <annevk>
domfarolino: looking at it now, I'm not sure there's actually anything that takes that referrerpolicy attribute value and installs it on the loaded document or its global

[02:35:00.0000] <annevk>
domfarolino: it seems to be just used for the load triggered by src=""

[02:36:42.0000] <domfarolino>
annevk: Hmm, but don't we set request's client to a node doc's Window's environment settings object when fetching things like <img> etc?

[02:36:55.0000] <domfarolino>
And since environ settings obj has a referrer policy, Main Fetch should "inherit" it?

[02:37:17.0000] <annevk>
domfarolino: yes

[02:37:37.0000] <annevk>
domfarolino: but the referrer policy of the environment settings object of a thing loaded in an <iframe> is just the default value

[02:38:01.0000] <annevk>
domfarolino: as things stand today (well, unless you set a referrer-policy via a header)

[02:38:16.0000] <annevk>
(or <meta name=referrer>)

[02:38:28.0000] <domfarolino>
annevk: but that's not the case if <iframe referrerpolicy=origin> etc right?

[02:39:28.0000] <annevk>
domfarolino: it is the case is what I'm saying

[02:39:45.0000] <annevk>
domfarolino: again, there's nothing that transfers that value to the environment settings object's referrer policy of the loaded thing

[02:44:06.0000] <domfarolino>
annevk: Ah. So an <img>'s node document's Window's environment settings object's referrer policy is the default, regardless of the surrounding iframe

[02:47:29.0000] <annevk>
domfarolino: let me put it differently

[02:47:53.0000] <annevk>
domfarolino: the referrer policy of the environment settings object can be only be set through <meta name=referrer> or the Referrer-Policy header

[02:48:44.0000] <annevk>
domfarolino: there's on inheritance from ancestors and there's no controlling it with <iframe referrerpolicy> either; again, afaict from the algorithms in the HTML Standard

[02:54:38.0000] <domfarolino>
annevk: Ok that makes sense now, I appreciate it.

[02:55:58.0000] <annevk>
domfarolino: it might make sense to do that though, but it'd be a bit of work and we'd have to figure out various details

[02:57:12.0000] <domfarolino>
I guess when reading https://github.com/whatwg/html/issues/3670#issuecomment-387307670, I was assuming that the "global state" was the environment settings object...and the creation of an <iframe referrerpolicy=xxx> set the "iframe's environment settings object's referrer policy", and this settings object was used as subresource request clients

[02:58:19.0000] <domfarolino>
Bad assumption :( But yes, I kind of like that idea of somehow sharing that around more easily w/ subresources

[03:00:09.0000] <annevk>
domfarolino: well, I was wrong there as I assumed that <iframe referrerpolicy> did the thing you were looking for

[03:00:29.0000] <annevk>
domfarolino: global definitely is 1:1 with settings objects

[03:01:11.0000] <annevk>
domfarolino: so, sorry for causing confusion and not checking how referrerpolicy operated first

[03:06:58.0000] <domfarolino>
annevk: no worries, I made some heavy inferences

[03:08:25.0000] <domfarolino>
annevk: So the client that is a request's client for requests made within an <iframe> will be the <iframe>'s environment settings object though, we just don't set that object's referrer policy with anything but the header and the meta tag

[03:15:43.0000] <yoav>
Hey! I'm looking at nested browsing contexts with iframe srcdoc documents, and where it is defined that they inherit the SW from the parent browsing context

[03:16:22.0000] <yoav>
basically, I want to align Chromium's behavior with https://bugzilla.mozilla.org/show_bug.cgi?id=1426979

[03:16:40.0000] <yoav>
(and testing shows that Safari is the same as Firefox)

[03:18:24.0000] <annevk>
domfarolino: it's the <iframe>'s child browsing context's active document's relevant settings object, or some such

[03:19:07.0000] <annevk>
yoav: I think part of the reason the bug you pinged is still open is because it's not defined

[03:19:13.0000] <annevk>
yoav: the issue you pinged*

[03:20:14.0000] <yoav>
annevk: yeah, it wasn't clear to me if it was defined elsewhere in the meantime

[03:24:12.0000] <yoav>
annevk: so IIUC, in order to define that, I'd need to say that a nested browsing context which has an active document which is an iframe srcdoc document has the same active service worker as the settings object of its parent browsing context?

[03:24:49.0000] <yoav>
(many concepts that I never dove into before, so bare with me if I'm totally off)

[03:28:43.0000] <annevk>
yoav: yeah, though I'm not sure that's good enough for the spec (since you also need to say something about time, unless it always inherits somehow)

[03:29:29.0000] <yoav>
annevk: can you expand on "something about time"? When it inherits it?

[03:29:32.0000] <annevk>
yoav: a big problem here is that part of the HTML spec is full of technical debt; document/global creation is really poorly done, which makes these kind of things hard to define (and probably why they're always causing problems)

[03:30:15.0000] <annevk>
yoav: yeah; e.g. if the parent gained a service worker later on, would that be used?

[03:30:45.0000] <yoav>
ok, got it

[03:30:51.0000] <yoav>
fwiw, I think it should

[03:31:13.0000] <annevk>
yoav: yeah, seems like that's what you'd want

[03:31:26.0000] <annevk>
yoav: this should apply to about:blank too btw; they should be identical imo

[03:32:01.0000] <yoav>
are people embedding about:blank? Or is that a theoretical case?

[03:32:52.0000] <annevk>
yoav: whenever you create an <iframe> you are, so yes

[03:33:02.0000] <annevk>
(and no)

[03:33:13.0000] <yoav>
oh...

[03:33:16.0000] <yoav>
got it

[03:57:27.0000] <annevk>
JakeA: FWIW, I suspect a longer form explanation of why non-HTTPS is a problem and the diff between long and safe would help a lot of people

[03:57:58.0000] <JakeA>
annevk: hah, just in the middle of writing a tweet about that. Yeah, I wish the article had made that clear.

[03:58:17.0000] <annevk>
secure/safe, not long

[04:03:23.0000] <JakeA>
https://twitter.com/jaffathecake/status/997431630011752449

[06:02:39.0000] <annevk>
foolip: I think I found a better way to insert a newline with sed

[07:17:09.0000] <JakeA>
annevk: https://dom.spec.whatwg.org/#context-object - when could the context object be omitted? Trying to think of an example

[07:17:46.0000] <JakeA>
If an object has an associated 'thing', can I just say "Get the associated thing" in a getter?

[07:18:14.0000] <JakeA>
I usually write "Let whatever be the context object's thing"

[07:20:31.0000] <annevk>
JakeA: I prefer always including it these days

[07:20:33.0000] <JakeA>
annevk: Context: I'm looking at https://notifications.spec.whatwg.org/#dom-notification-actions step 2, where it comes up with "in the notification's"

[07:20:42.0000] <JakeA>
Same. Gotcha.

[07:20:54.0000] <annevk>
JakeA: also, this is another thing where IDL needs updating so we can all start using "this" instead

[07:22:24.0000] <JakeA>
Ta

[07:23:18.0000] <annevk>
JakeA: https://github.com/whatwg/dom/pull/647

[07:26:58.0000] <JakeA>
LGTM


2018-05-19
[00:02:06.0000] <zcorpan>
gsnedders: what's your advice re https://github.com/w3c/web-platform-tests/pull/11057#issuecomment-390343029

[10:05:58.0000] <domfarolino>
Domenic: You around?

[10:07:26.0000] <domfarolino>
Wondering if it would be at all reasonable to have a module worker "inherit" it's referencing script's referrer policy. It of course doesn't have the same concept of a referencing script as import() does, but right now https://html.spec.whatwg.org/multipage/webappapis.html#fetch-a-module-worker-script-tree set the fetch options

[10:08:19.0000] <domfarolino>
...'s referrer policy to empty string, and I'm wondering if it's reasonable to get its referrer policy from the equivalent of its "referencing script"

[15:16:04.0000] <Domenic>
domfarolino: no, in general only syntax should change its behavior depending on where it's called; functions should not do "stack trace inspection" to change their behavior.

[15:16:28.0000] <Domenic>
If we wanted to allow customizing the referrer policy for a worker we'd want to add something to WorkerOptions.


2018-05-20
[17:13:01.0000] <domfarolino>
Domenic: Yeah I was thinking definitely WorkerOptions would need modified, but that it could work like import(), in that the policy defaults to the referencing scripts if not explicitly set. I see what you're saying though, is import() "allowed" to work like this because it's not really a "function"?

[17:14:17.0000] <domfarolino>
Because on the surface at least, it seems like https://html.spec.whatwg.org/multipage/webappapis.html#hostimportmoduledynamically(referencingscriptormodule,-specifier,-promisecapability) kinda has this 'stack trace inspection" w/ "referencing script", though I could be looking at it wrong

[19:19:22.0000] <Domenic>
domfarolino: yeah, the idea is that syntactic forms are allowed to change behavior depending on context, since they're not first class. But normal functions can be moved around and it's weird for something that can be moved to change its behavior as you move it.

[19:19:59.0000] <domfarolino>
Domenic: Ahh that makes perfect sense, thanks for info

[14:27:53.0000] <luxio>
pretty quiet around here

[14:28:06.0000] <luxio>
let's talk about stuff

[16:12:06.0000] <domfarolino>
?


2018-05-21
[21:41:03.0000] <luxio>
does whatwg have affiliation/involvement with schema.org?

[23:30:20.0000] <annevk>
luxio: not directly

[23:30:49.0000] <annevk>
luxio: we define Microdata though

[01:58:24.0000] <JakeA>
annevk: none of the header lists in Fetch end with . – want me to fix that?

[01:58:45.0000] <JakeA>
I'd rather fix them all than have just one header list end in .

[06:09:19.0000] <annevk>
JakeA: most don't need to because the sentence continuous afterwards

[06:09:49.0000] <annevk>
JakeA: only the cookie-related one is incorrect afaik (and didn't I note that?)

[06:10:18.0000] <annevk>
(it's a holiday here btw)

[06:10:47.0000] <JakeA>
annevk: ah, I didn't realise that was the reason. Anyway, get back on holiday.

[06:59:32.0000] <nox>
Have anyone got some weird issues with the WebSockets tests recently?

[06:59:37.0000] <nox>
Like, none of them running properly?

[06:59:49.0000] <nox>
Intermittently, not permanently.

[07:04:19.0000] <gsnedders>
nox: failing how?

[07:04:24.0000] <gsnedders>
/me vaguely remembers something recently

[07:05:39.0000] <nox>
gsnedders: Will try to find that, but it seems like an issue with the server part of the tests, given they *all* fail.

[08:23:41.0000] <jugglinmike>
nox: Are the WebSockets tests giving you trouble when running locally?

[08:47:31.0000] <domfarolino>
Hmm, annevk the third test in https://wpt.fyi/fetch/api/request/request-init-003.sub.html is correct right? We still want "same-origin" credentials when when string-initialized?

[08:47:45.0000] <domfarolino>
Surprising to me that everyone is failing this (including Chrome/FF whose impl works for non-string init)

[08:56:53.0000] <domfarolino>
That test might be bogus since I cannot repro


2018-05-22
[23:23:45.0000] <annevk>
domfarolino: I suspect wpt.fyi is outdated

[23:24:05.0000] <domfarolino>
That's my guess too

[23:26:17.0000] <annevk>
It might also use stable browsers or some such

[01:16:05.0000] <zcorpan>
jgraham: dunno if you keep up with github notifications, but I assigned this to you. https://github.com/w3c/web-platform-tests/issues/10799#issuecomment-390902187

[01:16:54.0000] <zcorpan>
Let me know if I should bug someone else about enabling tests in gecko

[01:42:09.0000] <jgraham>
zcorpan: I guess I'm the right person to ask :/

[01:42:22.0000] <jgraham>
And I saw that notification at least :)

[01:42:29.0000] <zcorpan>
Ok☺

[01:53:42.0000] <zcorpan>
jgraham: do you prefer github issue or bugzilla?

[02:31:52.0000] <jgraham>
zcorpan: Well I'm less likely to forget about a needinfo on bugzilla

[02:32:01.0000] <jgraham>
GitHub really needs to copy that model

[04:09:07.0000] <yoav>
annevk: hey! I'm looking at https://github.com/whatwg/fetch/issues/726 and trying to see what the best place would be to define the Accept-CH-Lifetime cache

[04:09:50.0000] <yoav>
is there a previous notion of a persistent cache in Fetch?

[04:10:19.0000] <annevk>
yoav: CORS cache I guess

[04:10:33.0000] <annevk>
yoav: but that's very old so might not be that great an inspiration

[04:11:26.0000] <yoav>
annevk: who owns that cache? Or is it defined as a singleton?

[04:11:51.0000] <annevk>
yoav: that's a thing that's not defined atm, it should probably say that the user agent holds it

[04:12:35.0000] <yoav>
ok

[04:14:22.0000] <smaug____>
anyone want to compare Chrome to Safari on https://jsfiddle.net/wcvncxma/ (I don't have Safari at hand)

[04:15:28.0000] <yoav>
smaug____: the number outputs look the same for me (stable chrome vs. stable safari)

[04:15:40.0000] <smaug____>
ok, thanks

[04:23:29.0000] <annevk>
tobie: how do you generate the HTML Standard for pr-preview?

[04:30:00.0000] <tobie>
annevk: I just POST to https://build.whatwg.org/wattsi

[04:30:59.0000] <tobie>
annevk: see: https://github.com/tobie/pr-preview/blob/2bc932997ebe66aebccb0f089f11d0f9d1840281/lib/wattsi-client.js#L75-L113

[05:01:10.0000] <annevk>
tobie: and then run the html-build scripts somehow?

[05:01:35.0000] <annevk>
tobie: it seems you'd miss a bunch of details otherwise

[05:01:59.0000] <tobie>
annevk: no, the wattsi server returns a zip, I just unpack it.

[05:03:13.0000] <annevk>
tobie: okay, that'll mostly work but get some things wrong

[05:14:45.0000] <JakeA>
If I want to write a WPT that tests a fetch to another origin, how do I do that? The linter is telling me off for using www.web-platform.test

[05:17:56.0000] <annevk>
JakeA: you could use /common/get-host-info.sub.js

[05:18:06.0000] <JakeA>
ahhh, cheers

[05:19:03.0000] <annevk>
JakeA: or https://wptserve.readthedocs.io/en/latest/pipes.html?highlight=domains#built-in-pipes

[05:35:16.0000] <yoav>
annevk: can you take a look at the (still rough) PR at https://github.com/whatwg/fetch/pull/729 and let me know what you think? There are several definitions still missing and some things there are a bit hand-wavy, but wanted to get your opinion on this early draft

[05:41:03.0000] <tobie>
annevk: I only build the multipage version, btw

[05:41:15.0000] <tobie>
annevk: s/build/use/

[05:41:32.0000] <tobie>
annevk: what things would this get wrong?

[05:43:56.0000] <annevk>
tobie: scripts at https://github.com/whatwg/html-build/blob/master/build.sh#L343 are not applied

[05:44:45.0000] <tobie>
annevk: on the server? why not?

[05:46:38.0000] <annevk>
tobie: because the build server is only a replacement for running wattsi itself

[05:46:55.0000] <tobie>
annevk: OK, I get it.

[05:48:33.0000] <annevk>
yoav: what kind of feedback are you looking for?

[05:50:08.0000] <yoav>
annevk: Is this PR a step in the right direction from your perspective? Should the client-hints list hang off the active document or its env settings object?

[05:50:39.0000] <yoav>
anything else you see there where I'm Holding It Wrong™?

[05:51:19.0000] <annevk>
yoav: I guess at a high-level more data types need to be explicit; e.g., is this cache a _list_ of entries?

[05:51:27.0000] <annevk>
yoav: active document seems wrong for workers

[05:51:38.0000] <annevk>
yoav: (and worklets)

[05:52:34.0000] <annevk>
yoav: does Accept-CH needs to be processed for each response or only by navigation responses? (and therefore needs some tie-in with HTML)

[05:54:25.0000] <annevk>
yoav: (the fact that you try to mutate the active document strongly suggests this should be in HTML instead; but it depends a bit on the earlier questions; if it should be in Fetch, modifying it should probably go via some task)

[05:55:26.0000] <annevk>
tobie: we could provide some endpoint for pr-preview that does both btw

[05:55:44.0000] <annevk>
tobie: at that point we could also make it so that it includes the commit snapshot warning

[05:56:02.0000] <annevk>
tobie: I'll file a tracking issue against html-build

[05:56:03.0000] <tobie>
annevk: that would be ideal.

[05:57:23.0000] <yoav>
annevk: which parts should be in HTML? the response header processing? the cache?

[05:58:07.0000] <yoav>
(I'm not sure if there are use-cases to setting Accept-CH{,-Lifetime} on subresource responses)

[05:58:19.0000] <yoav>
(but I suspect there aren't obvious ones)

[05:59:20.0000] <annevk>
tobie: filed https://github.com/whatwg/html-build/issues/156

[06:00:06.0000] <annevk>
yoav: the processing; the cache depends a bit upon who accesses it

[06:02:15.0000] <yoav>
annevk: if processing moves to HTML, the cache will only be accessed by HTML (when setting the client-hint list, and when retrieving it, when initiating the client-hints list of a new env settings object)

[06:02:26.0000] <yoav>
so maybe worth while to move it there

[06:04:06.0000] <annevk>
yeah, if it's only for HTML that seems reasonable

[06:27:03.0000] <yoav>
annevk: any examples of response header processing in HTML?

[06:27:42.0000] <yoav>
https://html.spec.whatwg.org/#processing-link-headers seems the closest, but it's not very specific

[06:32:56.0000] <annevk>
yoav: we might not have much yet

[06:47:41.0000] <yoav>
annevk: Ok, any recommended place I should put the response processing bit in?

[06:53:20.0000] <tobie>
annevk: thanks. I've subscribed to it. Feel free to ping me directly on it so I can implement it.

[06:53:31.0000] <tobie>
annevk: (once it's ready.)

[07:21:33.0000] <annevk>
yoav: navigation I suspect

[10:55:06.0000] <Domenic>
annevk: filed https://github.com/whatwg/meta/issues/92 for review draft/snapshot coordination, maybe check if I missed anything

[10:56:52.0000] <Domenic>
It might be a bit tricky since we were planning on doing this earlyish Tuesday and TabAtkins might not be awake to merge the PR there... but we don't really want to merge it earlier if possible...

[10:57:04.0000] <TabAtkins>
?

[10:57:24.0000] <annevk>
Domenic: we could do HTML first

[10:57:42.0000] <Domenic>
TabAtkins: basically what time will you be awake and able to merge a PR next Tuesday...

[10:57:54.0000] <Domenic>
annevk: the CSS refactoring affects both, but yeah as long as nobody builds a spec in the meantime...

[10:57:55.0000] <TabAtkins>
Next week? I wake up at 7am Pacific time

[10:58:06.0000] <Domenic>
Oh that should do the trick :)

[10:58:56.0000] <annevk>
That's half an hour into the scheduled meeting, that's pretty good :-)

[10:59:26.0000] <annevk>
Domenic: I suspect "Go back and add annoying warning to all previously-produced commit snapshots" may not be possible for whatpr drafts

[10:59:41.0000] <Domenic>
annevk: makes sense for whatpr, I'm more concerned about /commit-snapshots

[10:59:43.0000] <annevk>
Domenic: though maybe, if we really wanted to we could write some kind of script

[10:59:51.0000] <Domenic>
Right, that was my plan

[15:10:56.0000] <MikeSmith>
TabAtkins: friendly reminder about the syntax-highlighting thing (https://github.com/whatwg/wattsi/pull/63 is the PR for the change to the wattsi sources for consuming the output)


2018-05-23
[19:12:03.0000] <thinkxl>
was the search result list put all the way to the right intentionally? https://html.spec.whatwg.org/dev/

[20:07:23.0000] <MikeSmith>
thinkxl: yeah it was I guess

[20:07:40.0000] <MikeSmith>
what would be better?

[20:29:51.0000] <thinkxl>
well, aligned to the search bar, like it was before

[20:41:38.0000] <MikeSmith>
thinkxl: patches welcome :)

[20:42:01.0000] <MikeSmith>
if it regressed from what it had before, I don’t know how or when

[20:42:12.0000] <MikeSmith>
but you may be able to find it in the change history

[20:42:40.0000] <MikeSmith>
myself I’ve never touched the styles for the dev edition

[21:15:51.0000] <Domenic>
thinkxl: I think that's a bug/regression

[21:16:15.0000] <Domenic>
Most likely candidate is https://github.com/whatwg/html/pull/3418

[21:16:20.0000] <Domenic>
Please file an issue, or better yet a PR :)

[21:27:23.0000] <thinkxl>
Domenic: yup, i will file a PR tomorrow :P

[21:27:34.0000] <thinkxl>
cc MikeSmith

[21:31:47.0000] <domfarolino>
Domenic: I can't remember, should editors have write access to the participant-data repo?

[21:37:45.0000] <Domenic>
domfarolino: yeah they should

[21:38:18.0000] <Domenic>
domfarolino: ah I see I added editors but only set them to "read". Fixed now.

[21:38:28.0000] <domfarolino>
Cool thanks!

[10:52:30.0000] <Domenic>
Any standards folks attending JSConf EU?

[16:15:32.0000] <jugglinmike>
TabAtkins: Do you have a moment to review a WPT test? https://github.com/w3c/web-platform-tests/pull/11082


2018-05-24
[18:27:52.0000] <domfarolino>
I really need to attend one of these times...

[21:26:16.0000] <domfarolino>
TabAtkins: you around at all?

[21:27:08.0000] <TabAtkins>
I'm in NYC right now where it's past midnight, so: not really

[21:30:04.0000] <domfarolino>
No worries, question about some bikeshed syntax but very non-important, enjoy NYC

[23:49:29.0000] <annevk>
Domenic: I might

[02:55:03.0000] <annevk>
mathiasbynens: happy b-day!

[05:13:24.0000] <zcorpan>
Having RescueTime extension is annoying when trying to debug in devtools...

[06:55:10.0000] <lgrahl>
o/

[06:56:39.0000] <zcorpan_>
\o

[06:58:37.0000] <lgrahl>
Some weird behaviour I found: I have attached an event handler via addEventListener. The event is being fired and inside of the event handler callback, I'm attaching another event handler, this time assigning it directly (channel.onmessage = handler2). What happens is that handler2 is being called with the same event that has already been handled inside of the event handler. Is that normal behaviour?

[07:00:39.0000] <zcorpan_>
lgrahl: do you have a jsfiddle or something?

[07:02:13.0000] <lgrahl>
In Firefox, I can work around this with setTimeout(..., 0) (but not with Promise.resolve().then(...)). In Safari, I have been unsuccessful to avoid this unless using a timeout of > 1 second.

[07:02:13.0000] <lgrahl>
zcorpan_: Not yet, let me see if I can reproduce this in a short script

[07:17:24.0000] <Ms2ger>
lgrahl, not sure that would necessarily be against the spec

[07:18:13.0000] <gsnedders>
I have a suspicion that adding a new handler for an event while it's being fired is undefined

[07:18:23.0000] <gsnedders>
which is probably bad, given I can easily imagine things relying on it

[07:18:27.0000] <lgrahl>
zcorpan_: Mh, unsuccessful so far. Will continue to investigate this.

[07:18:27.0000] <lgrahl>
As a side question: I assume removeEventListener will also remove handlers that have been added with the { once: true } option?

[07:19:14.0000] <zcorpan_>
gsnedders: i *think* it's well-defined, but haven't checked

[07:19:19.0000] <zcorpan_>
annevk might know

[07:20:41.0000] <jgraham>
I think it is too, but of course it might not work the way you expect

[07:23:07.0000] <gsnedders>
I mean I'm in a pub drinking coffee and working on non-web stuff at the moment, so… :)

[07:32:11.0000] <Ms2ger>
You'd need to look at the weird setup with the singleton event handler for onfoo attributes

[07:40:51.0000] <annevk>
lgrahl: yes (to side question)

[07:41:55.0000] <annevk>
gsnedders: it's well-defined

[07:42:01.0000] <annevk>
lgrahl: sounds like a bug

[07:42:47.0000] <lgrahl>
annevk: I'm currently trying to rule out a bug on my side since I couldn't reproduce it outside of a fairly complex setup so far.

[07:42:48.0000] <annevk>
lgrahl: gsnedders: in particular see step 6 of https://dom.spec.whatwg.org/#concept-event-listener-invoke whereby a clone of current listeners is made

[07:43:14.0000] <annevk>
lgrahl: gsnedders: any added listeners would not be able to participate for the current object

[07:43:22.0000] <zcorpan_>
gsnedders: disconnect and enjoy your coffee. then, when you get back, tell me what's wrong in https://github.com/w3c/web-platform-tests/pull/11092 :-)

[07:44:00.0000] <jgraham>
Alternate plan: disconnect and feel existential dread that ruins your coffee

[07:49:30.0000] <gsnedders>
zcorpan_: but then what do I do to procrastinate from what I'm working on!

[07:49:50.0000] <Ms2ger>
I suspected http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5966 could do it, but it seems not

[07:56:48.0000] <Ms2ger>
I'm starting to think the spec disagrees with browsers here

[07:58:19.0000] <Ms2ger>
Oh, no

[07:58:48.0000] <gsnedders>
zcorpan_: will look in a few mins

[07:59:00.0000] <Ms2ger>
Spec is right: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5967

[07:59:08.0000] <Ms2ger>
lgrahl, ^

[07:59:17.0000] <Ms2ger>
Safari seems to get it wrong, though

[07:59:35.0000] <Ms2ger>
Or epiphany; can someone check actual safari?

[08:36:03.0000] <zcorpan_>
log: 2 in safari tp

[09:41:22.0000] <lgrahl>
Ms2ger: So, what I described is supposed to happen?

[09:42:34.0000] <Ms2ger_>
lgrahl, that is my understanding, yes

[09:48:54.0000] <annevk>
lgrahl: does your code also attach an event handler earlier on, like Ms2ger_'s examples?

[09:49:33.0000] <annevk>
lgrahl: event handlers are rather magical; they only add an event listener the first time; afterwards they just swap out the "body" of the listener they added

[09:53:51.0000] <lgrahl>
annevk: Just changed it to this http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=5968 which somewhat resembles what my code does. In that case, the event is not fired. Even though this puzzles me... I'm fine with it. I guess it's a bug in my code (or in the data channel implementation) then. I will try to investigate this further.

[09:54:07.0000] <lgrahl>
*event is not fired in both handlers

[09:57:12.0000] <annevk>
lgrahl: with that code you should see 2, not 3

[09:58:32.0000] <lgrahl>
annevk: Yes, that's what Firefox does, too. Is there a way to list the event handlers? I have a slight feeling what the problem might be and that would help me.

[10:01:05.0000] <jgraham>
Not except via dev tools

[10:09:23.0000] <gsnedders>
zcorpan: FWIW, on 11092 I still get way more than two failures

[10:09:29.0000] <gsnedders>
zcorpan: plz check you've actually pushed everything ;P

[10:09:50.0000] <zcorpan>
;_;

[10:14:25.0000] <zcorpan_>
gsnedders: ok now

[10:28:21.0000] <zcorpan>
mathiasbynens: gefeliciteerd 🎉

[10:45:12.0000] <jugglinmike>
zcorpan: gesundheit

[10:47:30.0000] <jugglinmike>
TabAtkins: If you have the time, I could use your input on a patch for a WPT test on font loading? https://github.com/w3c/web-platform-tests/pull/11082

[11:49:22.0000] <smaug____>
/me wonders if anyone knows any major website using shadow DOM

[11:49:27.0000] <smaug____>
(v1)

[12:00:58.0000] <zcorpan>
smaug____: doesn't youtube use it?

[12:01:13.0000] <smaug____>
last time I checked, it was still on v0

[12:01:36.0000] <smaug____>
perhaps I should re-check

[12:08:27.0000] <mathiasbynens>
zcorpan: thanks :)

[13:09:30.0000] <smaug____>
/me wonders what to do with https://github.com/whatwg/html/issues/3699

[13:10:25.0000] <smaug____>
perhaps I should propose an algorithm which propagates directionality state through shadow DOM

[13:21:39.0000] <TabAtkins>
MikeSmith: Okay, https://github.com/tabatkins/highlighter should be complete and usable now. Calling instructions are included in the README; the repo is self-contained and requires nothing but Python 2.7 to be run.

[14:00:11.0000] <lgrahl>
What on earth...

[14:02:27.0000] <lgrahl>
What does setting an event handler directly really do? Is ".onsomeevent = ..." equal to "addEventListener('someevent', ...)"?

[14:30:04.0000] <jyasskin>
lgrahl: Nope: Under https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-attributes see "When an event handler H of an EventTarget object T is first set to a non-null value,"

[14:30:52.0000] <jyasskin>
Some neat ComeFrom stuff there, since the setter isn't defined to do that. Be an easy patch to fix that...

[14:32:11.0000] <jugglinmike>
annevk: Do you know why ""Abort a document" reads "Cancel any instances of the fetch algorithm" rather than referencing fetch's "terminated"?

[14:40:08.0000] <lgrahl>
jyasskin: Umm, that's a bit heavy to digest for me right now. But I think I found my bug. If there are code examples on how .onsomeevent and .addEventListener('someevent', ...) interact and possible quirks of using both, I'd be grateful.

[14:42:15.0000] <jyasskin>
lgrahl: The "This example demonstrates the order in which event listeners are invoked." example under there has that kind of code example. I don't know of others.

[14:42:27.0000] <jyasskin>
And there are probably other quirks it doesn't cover.

[14:44:01.0000] <lgrahl>
I'm not worried about the order, I would more be interested in how they differ. For example, IIRC .onsomeevent replaces the former event handler (if any) but how does it interact with event handlers added via .addEventListener? Can .removeEventListener remove an existing handler registered via .onsomeevent = ...? These kinds of questions. :)

[14:45:16.0000] <jyasskin>
I believe the thing wrapping the .onsomeevent value is exactly the same as a listener added by .addEventListener(), except that user code doesn't have its value, so can't pass it to .removeEventListener().

[14:56:53.0000] <MikeSmith>
TabAtkins: w00t

[14:57:02.0000] <MikeSmith>
thanks thanks thanks

[14:57:52.0000] <MikeSmith>
I’ll work today on plugging it into the HTML build

[14:59:54.0000] <TabAtkins>
Cool, let me know if any problems or questions.

[15:14:24.0000] <MikeSmith>
TabAtkins: will do

[15:14:50.0000] <MikeSmith>
you still on US/East today/tomorrow?

[15:38:46.0000] <rniwa>
MikeSmith: yt?

[15:41:32.0000] <rniwa>
smaug____: yt?

[15:41:48.0000] <smaug____>
rniwa: pong

[15:41:51.0000] <rniwa>
smaug____: hi

[15:42:36.0000] <rniwa>
smaug____: do you recall the discussion about the support for detecting the supported values of link rel

[15:43:27.0000] <smaug____>
related to tokenlist?

[15:47:10.0000] <smaug____>
https://github.com/whatwg/dom/pull/123 and such

[15:47:42.0000] <smaug____>
uh, discussion happening in prs, not in issues

[15:47:43.0000] <rniwa>
smaug____: oh interesting

[15:47:53.0000] <rniwa>
smaug____: yeah, i hate that :(

[15:48:03.0000] <rniwa>
smaug____: it's one of the worst thing about Github

[15:48:43.0000] <rniwa>
smaug____: anyway, thanks for the pointer!

[15:48:54.0000] <rniwa>
(should have asked cdumez about this LOL)

[15:49:08.0000] <smaug____>
yeah, it is somewhere there, in couple of issues and prs

[15:53:31.0000] <rniwa>
smaug____: by the way, about your question about lifecycle thing in blink-dev

[15:54:01.0000] <smaug____>
yeah, just wondered if webkit folks have looked at the proposal

[15:54:33.0000] <rniwa>
smaug____: i've already given the feedback that "freeze" event won't work for us because we don't wanna run scripts at that point

[15:56:53.0000] <rniwa>
smaug____: maybe my feedback wasn't communicated well :(

[15:57:49.0000] <MikeSmith>
rniwa: here now

[15:58:04.0000] <rniwa>
MikeSmith: smaug____ answered my question. thanks for the reply!

[15:58:11.0000] <MikeSmith>
hai~

[15:58:34.0000] <smaug____>
I was surprised to see that blink is about to ship the lifecycle thing

[16:00:21.0000] <smaug____>
I mean, it feels like something to go through still couple of design iterations. But perhaps I'm wrong.

[16:03:07.0000] <rniwa>
smaug____: yeah, it doesn't seem ready at all

[16:03:31.0000] <rniwa>
smaug____: but then blink ships a lot of things that i think aren't ready so... there's that


2018-05-25
[20:44:30.0000] <MikeSmith>
TabAtkins: so, without doing an install (but just relying on the relative import), using `import highlighter` and then calling `highlighter.highlight(...)`, I’m getting “AttributeError: module 'highlighter' has no attribute 'highlight'”

[20:46:35.0000] <MikeSmith>
ah nm that, I guess it was because my shell was invoking Python3 instead of Python2.7

[20:47:26.0000] <MikeSmith>
hmm but now I get “ImportError: cannot import name text_type”, so I guess that’s a dependency I don’t have installed yet

[20:49:56.0000] <devsnek>
do any browsers implement worker type: 'module'

[20:50:10.0000] <MikeSmith>
TabAtkins: oh hmm but that’s part of pygments, which I do have installed

[20:53:57.0000] <MikeSmith>
my /usr/local/lib/python2.7/site-packages/pygments/util.py has no text_type

[20:54:14.0000] <MikeSmith>
I guess I need to get a newer version of pygments

[21:05:44.0000] <MikeSmith>
TabAtkins: testing this:

[21:05:46.0000] <MikeSmith>
html, css = highlighter.highlight(sys.stdin.read(), lang="html", output="json")

[21:05:47.0000] <MikeSmith>
print(html)

[21:05:57.0000] <MikeSmith>
...with this input:

[21:06:12.0000] <MikeSmith>
["pre",{"class": "idl extract"},"[Exposed=Window]\ninterface ",["dfn","Example"]," {\n  // this is an IDL definition\n};"]

[21:06:32.0000] <MikeSmith>
...I get only:

[21:06:34.0000] <MikeSmith>
<None></None>

[21:07:13.0000] <MikeSmith>
same thing if I test with the `["p", {"class":"foo"}, "text", ["span", {}, "nested text"]]` example from your README.md

[21:07:48.0000] <MikeSmith>
*correction: above I meant with output="html"

[21:08:13.0000] <MikeSmith>
with output="json" it just gives me back the exact same JSON as the input

[23:07:07.0000] <annevk>
jyasskin: not entirely true, an event handler adds an event listener and retains a pointer to the function that event listener will invoke; setting the event handler again replaces that function

[23:07:29.0000] <annevk>
so the event listener is constant, but the innards are not

[23:40:08.0000] <TabAtkins>
MikeSmith: that ends up not being valid webidl - the {} second argument isn't optional.

[23:40:23.0000] <domfarolino>
Is https://w3c.github.io/webappsec-referrer-policy/ down for anyone?

[23:41:36.0000] <TabAtkins>
And you're calling it with lang="html", too, which won't help - it's all naked text, which won't receive a highlight.

[23:42:17.0000] <TabAtkins>
(the <None></None> thing seems like a bug tho)

[23:48:59.0000] <annevk>
domfarolino: works here

[23:49:23.0000] <domfarolino>
sad face

[23:55:06.0000] <domfarolino>
annevk: By "we" you mean "callers" no? (https://github.com/whatwg/console/issues/57#issuecomment-391958300)

[23:55:39.0000] <annevk>
domfarolino: callers and the algorithm

[23:56:13.0000] <annevk>
domfarolino: I probably meant "us spec writers"

[23:56:25.0000] <annevk>
I should really try to avoid using "we"...

[23:57:26.0000] <domfarolino>
annevk: Right, I figured spec writers (callers) would provide something as generic as what we use in https://console.spec.whatwg.org/#time, and if the provided warning is left out, the algorithm uses something like you said, is generic and for the occasion

[00:00:47.0000] <annevk>
domfarolino: I guess it makes sense to allow something to be specified

[00:01:19.0000] <annevk>
domfarolino: just need to make it clear in the algorithm that a) such a thing is advisory b) might get localized and c) is optional

[00:01:50.0000] <domfarolino>
Makes sense, thanks

[00:16:37.0000] <domfarolino>
annevk: Does parser-inserted basically just mean not-dynamically-inserted (like, by a script)?

[00:17:38.0000] <annevk>
domfarolino: for <script>, yes

[00:17:47.0000] <annevk>
domfarolino: we don't keep such state around for other elements though

[00:17:56.0000] <domfarolino>
does this concept exist for other things/elementss?

[00:18:00.0000] <domfarolino>
Ok

[00:41:07.0000] <mkwst>
annevk: Skimming through https://github.com/whatwg/url/pull/72 again, I recall Ryan being in favor of just pointing to the PSL's algorithm for determining a domain's "public suffix" and/or "registrable domain".

[00:41:37.0000] <mkwst>
annevk: How would you feel about defining the terms in URL, but pointing to PSL for the implementation?

[00:42:30.0000] <mkwst>
annevk: There's more complexity in the PSL than there was when I initially put that patch together (they've added exception rules, for instance), and I'm not sure it's worth the effort to replicate everything in URL.

[00:43:58.0000] <annevk>
mkwst: I think pointing to PSL is fine and I agree we don't want to duplicate their algorithm, although I do have some issues with it

[00:44:19.0000] <mkwst>
annevk: Ok. I'll sketch something out today and send you a PR.

[00:44:32.0000] <annevk>
mkwst: the main thing I'm worried about is how domain names get normalized and what the exact string ends up being

[00:44:51.0000] <annevk>
mkwst: but hand-waving that and pointing to the open issue against PSL as well as what we expect with some examples seems good enough

[00:46:58.0000] <mkwst>
annevk: Ok. That makes sense to me, thanks.

[01:30:43.0000] <MikeSmith>
TabAtkins: I get that same <None></None> output regardles of what input I give it

[01:31:18.0000] <MikeSmith>
TabAtkins: e.g., even if I give it the `["p", {"class":"foo"}, "text", ["span", {}, "nested text"]]` example from the README.md

[01:33:03.0000] <MikeSmith>
$ echo '[ "pre", "&lt;p>This &lt;em>is &lt;strong>correct&lt;/strong>.&lt;/em>&lt;/p>" ]' | python2.7 highlight.py

[01:33:06.0000] <MikeSmith>
<None></None>

[01:33:36.0000] <MikeSmith>
$ cat highlight.py

[01:33:36.0000] <MikeSmith>
#!/usr/bin/python2.7

[01:33:36.0000] <MikeSmith>
import highlighter

[01:33:36.0000] <MikeSmith>
import sys

[01:33:36.0000] <MikeSmith>
html, css = highlighter.highlight(sys.stdin.read(), lang="html", output="html")

[01:33:39.0000] <MikeSmith>
print(html)

[04:11:14.0000] <annevk>
mkwst: are you aware of any Origin-header-outside-of-CORS tests?

[04:11:28.0000] <annevk>
/me wants to test https://github.com/whatwg/fetch/issues/593

[04:25:14.0000] <mkwst>
annevk: I don't know. Let me look in Blink.

[04:25:54.0000] <mkwst>
(That said, I know Blink still has some brokenness around redirects, so I'm not sure our tests will be helpful if we're passing them. :/)

[04:29:29.0000] <annevk>
Okay, I'm looking at writing my own now, but I haven't really dealt with stash before so we'll see how it goes...

[05:47:53.0000] <yoav>
annevk: when you have time I'd appreciate if you could take a look at https://github.com/whatwg/html/pull/3714

[06:05:33.0000] <annevk>
mkwst: it looks like Blink does the correct thing with redirects

[06:05:45.0000] <annevk>
mkwst: it also looks like it's all alone (and I didn't test exhaustively)

[06:30:21.0000] <annevk>
yoav: I think both are important to be clear on, as it matters how implementations will align, right?

[06:30:35.0000] <annevk>
yoav: seems wanderview already gave a helpful example with regards to about:blank

[06:57:04.0000] <yoav>
yeah, it made our conversation from the other day on IRC click

[06:57:17.0000] <yoav>
added handling for about:blank as well

[08:59:39.0000] <domfarolino>
annevk: have you had a chance to peruse https://github.com/whatwg/meta/pull/89 ?

[09:11:09.0000] <annevk>
domfarolino: so who besides MDN will use this?

[09:11:46.0000] <annevk>
domfarolino: anyway, I guess it's fine; will you add it to repositories?

[09:12:34.0000] <annevk>
domfarolino: sorry for the delay

[09:12:39.0000] <domfarolino>
Absolutely no idea, but I figured if anyone did it might make sense to generalize? Though I see value in being specific too...

[09:12:56.0000] <domfarolino>
No worries. I’ll add to repositories (if I have access to do that?)

[09:16:56.0000] <annevk>
domfarolino: gave you access to HTML as a start

[09:17:16.0000] <annevk>
domfarolino: maybe next week I should work on my label script again

[09:25:55.0000] <domfarolino>
Thank you. Oh that’d be nice!

[09:26:25.0000] <domfarolino>
What kind of access to I have that is >= label access but < write access personally I didn’t know that middle-ground existed?

[09:31:06.0000] <annevk>
domfarolino: you have write access, but you cannot commit to master

[09:31:44.0000] <annevk>
domfarolino: it's not quite ideal, as ideally we'd also protect longstanding PRs from mistakes, but can't have it all I guess

[09:32:49.0000] <domfarolino>
Ohh, ok makes sense. Agreed

[10:00:31.0000] <annevk>
/me starts putting all labels into labels.json


2018-05-26
[17:33:58.0000] <MikeSmith>
https://stackoverflow.com/questions/50538290/are-there-w3c-specifications-for-line-wrapping-behavior-in-an-html-textarea

[19:32:10.0000] <domfarolino>
It isn’t required that a contributor add themselves to acks section after contributing right, like they can opt-out?

[20:07:59.0000] <Domenic>
domfarolino: right

[20:08:43.0000] <domfarolino>
👍

[16:22:07.0000] <domfarolino>
Domenic: finally... https://github.com/whatwg/console/issues/27

[16:37:46.0000] <Domenic>
Haha wow, that's been a long time coming. Very nice :D


2018-05-27
[19:16:05.0000] <domfarolino>
The first two WHATWG PRs with the "impacts documentation" label! https://github.com/search?q=org%3Awhatwg+label%3A%22impacts+documentation%22

[22:02:17.0000] <Alystair>
how come typing into a text area doesn't make textarea:empty false?

[22:03:50.0000] <Alystair>
same with the inverse, erasing contents

[22:04:26.0000] <Alystair>
https://jsfiddle.net/vj89o7wL/ example

[22:44:41.0000] <Alystair>
I'm guessing it has something to do with input nots updating value because changes aren't actually reflected in DOM

[23:04:55.0000] <domfarolino>
annevk: You around?

[23:57:11.0000] <annevk>
domfarolino: on and off

[00:03:56.0000] <domfarolino>
annevk: if an event handler string is evaluated in an iframe, adopted by another document, and evaluated again, does the "current settings object" that might be used by code in the handler change due to adoption?

[00:04:41.0000] <domfarolino>
Or would it stay "equal" to that of the document in which the handler was compiled/run? (my guess is it changes, but unsure)

[00:07:41.0000] <annevk>
domfarolino: current settings object is more about the code triggering the handler, no?

[00:08:00.0000] <annevk>
domfarolino: I don't think it should be recompiled as things stand

[00:08:10.0000] <annevk>
domfarolino: but I'm not a 100% on this

[00:10:55.0000] <domfarolino>
annevk: unsure about the “code triggering” part, what if the handler was triggered by a click for example (this question is related to https://github.com/whatwg/html/issues/3295)

[00:12:03.0000] <domfarolino>
Agreed though, I don't think it should be recompiled

[00:16:32.0000] <annevk>
domfarolino: I guess in that case I would assume the current settings object wouldn't have changed, but I'm not sure how it's defined in situations like this

[00:16:41.0000] <annevk>
domfarolino: Domenic and bz have a much better handle on this

[00:16:57.0000] <domfarolino>
annevk: Makes sense, yeah I'm sure they

[00:17:21.0000] <domfarolino>
they'll have some insight on this, thank you


2018-05-28
[00:56:47.0000] <hsivonen>
annevk: what's the status of window.event spec?

[00:57:09.0000] <annevk>
hsivonen: the global question is still undecided

[00:57:32.0000] <annevk>
hsivonen: I wrote tests and such, but nobody is really weighing in on what to do

[01:29:32.0000] <hsivonen>
annevk: ok. thanks

[01:45:53.0000] <yoav>
annevk: I added about:blank handling to https://github.com/whatwg/html/pull/3714 PTAL?

[02:16:25.0000] <foolip>
PSA: web-platform-tests move happening today (2018-05-28)

[02:16:53.0000] <foolip>
https://lists.w3.org/Archives/Public/public-test-infra/2018AprJun/0014.html

[02:19:42.0000] <annevk>
foolip: hmm, but some of the PRs aren't ready yet it seems

[02:19:49.0000] <annevk>
foolip: e.g., https://github.com/tabatkins/bikeshed/issues/1224

[02:20:03.0000] <annevk>
foolip: did you figure out the licensing thing you wanted to sort out? I'm curious to the outcome

[02:20:48.0000] <foolip>
annevk: yep, pretty much: https://github.com/w3c/web-platform-tests/issues/11009#issuecomment-391717229

[02:21:50.0000] <foolip>
annevk: still some question about what to do with CONTRIBUTING.md, but nobody with legal chops suggested there was a blocking problem.

[02:23:23.0000] <foolip>
annevk: I'll chase down "w3c/web-platform-tests" until it's all updated, the Bikeshed one included. Since it requires regenerating to take any effect I didn't prepare it up front

[02:27:43.0000] <annevk>
foolip: left a comment on the license thing

[02:28:12.0000] <annevk>
yoav: done

[02:28:28.0000] <yoav>
annevk: Thanks! :)

[02:28:31.0000] <annevk>
yoav: I'm sorry this is still such a mess

[02:29:02.0000] <annevk>
yoav: I really want to fix the whole doc lifecycle, but I keep hitting walls and it's hard to make a lot of progress given that everyone is always busy

[02:29:49.0000] <foolip>
annevk: I thought I'd leave it to Wendy or PLH to send the PR, but that's presumably a good question there :)

[02:30:32.0000] <yoav>
annevk: can relate :) what's the best place for the about:blank processing? Is there some place central that handles that case for iframes as well as object/embed?

[02:31:02.0000] <yoav>
or I should just add another processing step for them as well?

[02:31:25.0000] <annevk>
yoav: I'm not sure, I'd have to research

[02:31:43.0000] <annevk>
yoav: part of the problem is that we don't have a "create an about:blank document" routine somewhere

[02:32:01.0000] <annevk>
(or even a proper "create a document"...)

[02:34:59.0000] <yoav>
annevk: makes sense. I don't see about:blank handling in embed, only in object

[02:35:34.0000] <annevk>
yoav: hmm yeah, <embed> in spec might be broken, so I guess just fixing it for <object> is acceptable

[02:35:41.0000] <annevk>
s/might be/is/

[02:35:49.0000] <yoav>
ok, cool

[02:36:11.0000] <annevk>
not really 😃

[02:36:35.0000] <yoav>
:)

[04:58:28.0000] <annevk>
JakeA: did you see https://github.com/whatwg/fetch/issues/706?

[05:42:42.0000] <JakeA>
annevk: I didn't, but I'll go through it tomorrow (bank holiday today). Thanks for the nudge

[06:08:34.0000] <annevk>
enjoy

[06:51:59.0000] <gsnedders>
is it defined anywhere what is considered a user-initiated event?

[06:52:27.0000] <annevk>
gsnedders: https://html.spec.whatwg.org/#triggered-by-user-activation

[06:53:43.0000] <gsnedders>
minor feedback: given we normally call it a user initiated event, it'd be nice for that phrase to appear in the spec

[07:03:22.0000] <gsnedders>
if you created a synthetic click event within a trusted click event's event listener, that would be untrusted, right?

[07:06:53.0000] <annevk>
gsnedders: I think that would still be trusted if you dispatch it within that listener callback

[07:08:05.0000] <gsnedders>
annevk: the only text I can see that might justify that is "The task in which the algorithm is running was queued by an algorithm that was triggered by user activation, and the chain of such algorithms started within a user-agent defined timeframe." but isTrusted on the event would presumably be false given nothing would set it to true?

[07:08:53.0000] <annevk>
gsnedders: yes and yes

[07:09:00.0000] <annevk>
gsnedders: there's open issues on formalizing this

[07:09:47.0000] <gsnedders>
But this is implemented everywhere?

[07:10:08.0000] <gsnedders>
issues on whatwg/html?

[07:10:16.0000] <annevk>
gsnedders: Chrome has been playing around with alternatives and I suspect there's differences in the details regardless

[07:10:28.0000] <gsnedders>
yeah, I mean at a high level

[07:10:38.0000] <gsnedders>
I don't doubt there are differences :)

[07:15:50.0000] <gsnedders>
https://github.com/whatwg/html/issues/1903 seems to mostly be it?

[07:25:10.0000] <annevk>
gsnedders: https://github.com/whatwg/html/issues/1983 and https://github.com/whatwg/html/issues/3123 are linked from there and seem relevant

[07:25:23.0000] <annevk>
gsnedders: I thought there were some others too, but maybe they've all been duped

[07:48:43.0000] <domfarolino>
foolip: If there's any work needed to make transition of WPT easier I'm happy to help feel free to lmk

[07:49:53.0000] <annevk>
domfarolino: all WHATWG repos need a PR to fix the README (and other links)

[07:50:00.0000] <annevk>
domfarolino: Bikeshed also needs some template updates

[07:50:27.0000] <annevk>
domfarolino: foolip: maybe we can combine this with the changes needed for Review Drafts since it's fairly minor

[07:50:41.0000] <annevk>
domfarolino: that would reduce the amount of Meta: changes by N

[08:04:54.0000] <domfarolino>
domfarolino: Oh nice, thanks. Combining the BS template changes sgtm btw

[08:53:10.0000] <devsnek>
on non-browser useragents (like node) should timers be able to keep the event loop alive

[08:53:28.0000] <devsnek>
assuming you don't have node's timer.ref/unref api

[10:52:55.0000] <domfarolino>
devsnek: That would make sense to me but I don't think I can provide a very "authoritative" answer

[10:53:57.0000] <devsnek>
rn I'm making them all refed

[10:59:14.0000] <domfarolino>
SGTM

[11:02:25.0000] <devsnek>
refed = Math.random() > 0.5


2018-05-29
[19:23:39.0000] <MikeSmith>
CSP disown-opener is really not supported in any UAs yet?

[19:23:43.0000] <MikeSmith>
https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP#Browser_compatibility

[22:35:22.0000] <annevk>
MikeSmith: didn't that have a lot of issues?

[22:36:02.0000] <annevk>
MikeSmith: maybe just one: https://github.com/w3c/webappsec-csp/issues/194

[22:56:50.0000] <MikeSmith>
annevk: didn’t know ー wasn’t following it so close

[22:56:52.0000] <MikeSmith>
/me looks

[22:58:15.0000] <MikeSmith>
hmm yeah

[22:58:31.0000] <MikeSmith>
so yeah I guess that’s why it’s not been implemented

[02:47:46.0000] <smaug____>
jgraham: who knows about wpt.fyi?

[02:48:06.0000] <smaug____>
would it be possible to get it to run also  Nightly?

[02:48:14.0000] <annevk>
foolip: ^^

[02:53:43.0000] <Ms2ger>
Doesn't it?

[02:55:09.0000] <jgraham>
smaug____: Yeah, it's being worked on

[02:55:24.0000] <smaug____>
great

[02:55:44.0000] <jgraham>
We have the data, but are missing the code to upload the data to the UI

[02:55:56.0000] <smaug____>
oh

[02:56:07.0000] <jgraham>
It's being worked on aiui

[03:02:30.0000] <foolip>
smaug____: https://wpt.fyi/results/?label=experimental

[03:02:47.0000] <foolip>
It's been available for a week or so, just not anncounced

[03:03:08.0000] <smaug____>
NICE

[03:03:13.0000] <smaug____>
er, nice

[03:03:39.0000] <foolip>
jgraham: that's from buildbot. are Taskcluster builds reliable yet so we can start getting the results from there soonish?

[03:04:14.0000] <foolip>
Beware of https://github.com/web-platform-tests/wpt.fyi/issues/188 if copying URLs

[06:50:54.0000] <Domenic>
TabAtkins: you up and ready to merge https://github.com/tabatkins/bikeshed/pull/1239 ?

[07:07:22.0000] <wanderview>
zcorpan: I was looking at this... https://bocoup.github.io/wpt-disabled-tests-report/

[07:07:49.0000] <wanderview>
zcorpan: are you checking that every annotation you parse is actually a real test?  in the mozilla tree we actually have stale annotations for tests that don't exist any more

[07:09:11.0000] <zcorpan>
wanderview: I'm not checking that

[07:10:02.0000] <wanderview>
ok

[07:32:19.0000] <TabAtkins>
Domenic: Aight, merging.

[07:32:31.0000] <Domenic>
Perfect timing :)

[07:32:56.0000] <Domenic>
Thank you!!

[07:33:06.0000] <TabAtkins>
I should have made you a collaborator so you could do this yourself, silly me. Just invited you.

[07:33:29.0000] <TabAtkins>
annevk: You want in, too? That way y'all can merge whatever boilerplate stuff y'all need.

[07:37:51.0000] <annevk>
ah cool

[07:46:31.0000] <MikeSmith>
TabAtkins: about the syntax highlighter, I’ve still not been able to get output from it no matter what I test with ー including very simple HTML snippets and very simple CSS snippets

[07:46:56.0000] <TabAtkins>
Yeah, looking into that now. Very weird, since it definitely works on my end. ^_^

[07:47:32.0000] <MikeSmith>
giving it CSS seems to cause it hit some bug and fail completely:

[07:47:40.0000] <MikeSmith>
  File "/Users/mike/workspace/html-build/highlighter/highlighter/pygments/pygments/lexer.py", line 432, in _process_token

[07:47:43.0000] <MikeSmith>
    'token type must be simple type or callable, not %r' % (token,)

[07:47:46.0000] <MikeSmith>
AssertionError: token type must be simple type or callable, not Token.Comment

[07:48:25.0000] <MikeSmith>
TabAtkins: OK, could well be something broken in my environment

[07:49:03.0000] <MikeSmith>
FYI I have Pygments 2.2.0 installed from pip

[07:49:56.0000] <MikeSmith>
and Python 2.7.15

[07:51:12.0000] <TabAtkins>
I'm using a local Pygments anyway, that doesn't matter.

[07:51:19.0000] <MikeSmith>
k

[07:53:44.0000] <TabAtkins>
MikeSmith: Ah, one problem is that I didn't set this up to be called directly, I wrote it as a module to be used by other Python code. Easy fix. ^_^

[07:54:04.0000] <MikeSmith>
oh

[07:54:19.0000] <MikeSmith>
cool

[07:54:42.0000] <MikeSmith>
annevk: about that wattsi .travis.yml, I added that stub to the master branch because I’ve been putting together a patch for doing an actually-working version, on another branch, and testing it. But as far as I can see, the way that Travis+Github integration is set up, Travis never gets triggered unless you have a .travis.yml on the master branch

[07:55:23.0000] <annevk>
MikeSmith: I don't think that's the case

[07:55:51.0000] <annevk>
MikeSmith: you can flip some switch inside Travis I think that makes it start monitoring the repo

[07:58:23.0000] <MikeSmith>
yeah I tried that and it didn’t seem to work

[07:58:28.0000] <MikeSmith>
I guess I was doing it wrong

[07:58:50.0000] <MikeSmith>
it only started working after I added the .travis.yml on master

[08:00:17.0000] <MikeSmith>
anyway I’m stalled on actually getting it working even on the branch, due to not having a good way to get the fpc binaries. When I have time next, I think I’ll just copy them to my own server so that travis can grab them from there

[08:00:52.0000] <MikeSmith>
over HTTPS

[08:06:19.0000] <Domenic>
MikeSmith: hmm I thought you could get them from apt these days?

[08:06:56.0000] <Domenic>
MikeSmith: at least in debian/docker we successfully do `apt-get update && apt-get install -y ca-certificates curl rsync git unzip fp-compiler default-jre`

[08:10:40.0000] <MikeSmith>
Domenic: when I tried that on Travis it installed fpc 2.6 something ー not the 3.0.x we need

[08:11:29.0000] <Domenic>
Hmm :(. Including the update step? Apparently Travis used to do updates automatically but now requires opt-in

[08:11:52.0000] <MikeSmith>
well I think Travis still only has Ubuntu Trusty as the latest distro version, and the latest version of fpc available for that is 2.6.x

[08:12:16.0000] <Domenic>
Ah I see :(

[08:12:29.0000] <Domenic>
I guess you could get around it with Docker if you wanted to

[08:12:30.0000] <MikeSmith>
or maybe there’s some other magic I need to do (I didn’t try doing the update step)

[08:12:34.0000] <MikeSmith>
yeah

[08:12:41.0000] <Domenic>
But hosting the binaries is also easy

[08:13:06.0000] <MikeSmith>
right, I reckon just hosting the binaries will be the least trouble

[09:30:20.0000] <annevk>
Domenic: I think the snapshot integrity problem is shared by Bikeshed documents

[09:30:52.0000] <annevk>
Domenic: we only copy the .bs resource after all, we don't copy any of the additional inputs

[09:30:55.0000] <Domenic>
annevk: we copy their extra files at least.

[09:31:14.0000] <annevk>
Domenic: only at publication time

[09:31:31.0000] <Domenic>
Sure. What other time would we copy them?

[09:32:06.0000] <annevk>
Domenic: publish RD; modify one of the non-.bs sources on master; modify RD;

[09:32:18.0000] <annevk>
Domenic: modified RD will now incorperate the non-.bs source changes

[09:32:29.0000] <Domenic>
If you right-click an image in a commit snapshot of console, you get taken to a snapshot image, not the living one.

[09:32:44.0000] <Domenic>
Ah, I see.

[09:33:41.0000] <Domenic>
So maybe we need a folder for each review draft, with all the sources inside :/

[09:33:54.0000] <Domenic>
Hopefully this could be done by just modifying review.sh

[09:35:49.0000] <annevk>
It needs some input about which sources it needs to copy

[09:36:01.0000] <annevk>
E.g., visualize.py for the Encoding Standard

[09:36:07.0000] <annevk>
I'm not a 100% sure this is worth it though

[09:36:16.0000] <annevk>
I'd rather just not modify RDs

[12:04:44.0000] <jwalden>
yeesh

[12:05:06.0000] <jwalden>
someone adds me to the wpt repository in some fashion, I come back a day or two later to 157 notifications

[12:17:50.0000] <Domenic>
Yeah, having that happen on a US holiday was a bit rough on my inbox

[12:18:11.0000] <Domenic>
But, at least I got a brief glimpse of zcorpan_ burning down all the disabled tests

[13:27:35.0000] <TabAtkins>
jwalden: "filter messages like these" => "label as wpt" => click on wpt label => archive all ^_^

[13:29:07.0000] <jsbell>
"My inbox is what now? That's more privacy policy updates than I was expecting."


2018-05-30
[19:05:30.0000] <falken>
I would like to add a spec step for "discarding" an environment when the navigation fails (context at https://github.com/w3c/ServiceWorker/pull/1315). Can I just use the English word "discard" as the reverse of "create"? The spec already just says: "Create a new environment" in https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigating-across-documents:process-a-navigate-fetch.  Or does it need to be more formal

[19:05:30.0000] <falken>
somehow: define the term "discard" which actually have steps but allows other specs to "wait for the environment to be discarded".

[19:05:50.0000] <falken>
"which doesn't actually have steps"

[19:59:30.0000] <Domenic>
falken: it seems like there's a particular point in the navigation algorithm you want to insert your steps at? In which case adding such a step, e.g. "X. At this point the environment <var>env</var> is <dfn>discarded</dfn>" or "X. Run the <dfn>discarding steps</dfn> for <var>env</var>" seems ideal, to pinpoint the exact point relative to other steps in the algorithm at which your steps run.

[20:12:10.0000] <falken>
Yes that makes sense

[20:39:54.0000] <falken>
Domenic: sent a PR

[00:14:45.0000] <annevk>
jochen__: heya, if you want to pitch your restricting ports for same site checks idea, now would be good time: https://github.com/whatwg/fetch/issues/687#issuecomment-392722063

[00:15:16.0000] <annevk>
jochen__: the main question is how much it's worth the trouble

[00:33:17.0000] <domfarolino>
annevk: Costly as in for people's privacy (the people that depend on the legacy values right now)?

[00:33:59.0000] <annevk>
domfarolino: mostly getting all impls to change

[00:34:33.0000] <annevk>
domfarolino: and tests, and making sure everyone agrees this should actually go

[00:44:58.0000] <domfarolino>
annevk: Ah, right.

[01:50:17.0000] <yoav>
Hmm, I updated html and html-build and now I'm getting a wattsi error when trying to build

[01:50:21.0000] <yoav>
syntax:: integer expression expected

[01:50:22.0000] <yoav>
wattsi: invalid arguments

[01:50:22.0000] <yoav>
syntax:

[01:50:23.0000] <yoav>
  wattsi [--quiet] <source-file> <output-directory> <caniuse.json> <bugs.csv>

[01:50:31.0000] <yoav>
anyone else seeing the same?

[01:53:40.0000] <annevk>
yoav: did you update wattsi?

[01:54:07.0000] <yoav>
I'm now looking into that, but don't remember how I got the binary in the first place

[01:54:36.0000] <annevk>
yoav: we updated all the things yesterday to prepare for Review Drafts

[01:54:44.0000] <annevk>
yoav: that included changes to wattsi

[01:55:08.0000] <annevk>
yoav: you could remove wattsi from your PATH and then it should get invoked remotely on a build server

[01:55:26.0000] <annevk>
yoav: that should work, though I'm not a 100% sure that the build server is updated

[01:55:34.0000] <yoav>
annevk: that sounds easier than upgrading :)

[01:55:39.0000] <yoav>
I'll give it a try

[01:55:40.0000] <yoav>
thanks!

[01:59:51.0000] <yoav>
@annevk managed to find and update wattsi. Thanks! :)

[02:00:32.0000] <yoav>
/me @s people here for some reason :facepalm:

[02:01:09.0000] <annevk>
Too much proprietary messaging services can really get to you

[02:01:41.0000] <annevk>
I signed up for a corporate Slack account the other day 😕

[02:58:03.0000] <yoav>
annevk: yeah, I blame slack as well...

[04:29:47.0000] <annevk>
JakeA: if you could look at the XXX comment I added in the second commit here https://github.com/whatwg/fetch/pull/736 that'd be cool

[04:30:09.0000] <annevk>
JakeA: if you don't immediately know no need to do the research though; I'll get to it

[04:34:14.0000] <JakeA>
annevk: I wanted to make it so headers.delete('range') worked. It seemed weird that headers.delete('range') would be prevented, but headers.delete('accept') would be allowed, but that would also delete the range header

[04:40:34.0000] <yoav>
foolip: regarding the flakiness at https://github.com/web-platform-tests/wpt/pull/11227

[04:41:30.0000] <foolip>
yoav: yes? :)

[04:41:33.0000] <yoav>
just so that I'd know I understand you correctly: if the test produces the same number of tests at each run in Firefox, but the results for those tests could be passing or failing

[04:41:42.0000] <yoav>
Is that considered flaky?

[04:42:10.0000] <foolip>
That would be flaky, yes.

[04:42:21.0000] <yoav>
that's what I thought...

[04:42:43.0000] <foolip>
Is the test trying to ensure more about the Chromium implementation that the spec actually requires?

[04:43:05.0000] <yoav>
Not really, I suspect the flakiness is the result of Firefox's resource loading implementation

[04:43:10.0000] <yoav>
or RT implementation

[04:43:28.0000] <yoav>
e.g. I see that on some runs, some resources are never reported

[04:43:51.0000] <yoav>
it's not clear yet if they are downloaded and not reported, or never downloaded in the first place

[04:44:03.0000] <foolip>
If a Firefox bug is causing the flakiness, then that's not blocking, but can you file a Gecko bug with a snapshot of the test case, something that won't change over time?

[04:44:46.0000] <yoav>
foolip: I'll make sure that I'm not getting this wrong, and then will file one

[04:44:59.0000] <foolip>
yoav: great, thanks!

[04:49:00.0000] <yoav>
foolip: Is there some way to see a current "flakiness dashboard" for that test before the change? https://wpt.fyi/results/resource-timing/resource_initiator_types.html just shows it's failing

[04:49:36.0000] <yoav>
foolip: if I'm correct, it would've been flaky before the change

[04:49:39.0000] <foolip>
yoav: no, we have no flakiness tracking for wpt.fyi yet. please file an issue, it has more weight when someone other than me requests things :)

[04:49:47.0000] <yoav>
:D

[04:49:53.0000] <foolip>
(I ask for lots of things)

[04:50:53.0000] <yoav>
foolip: Would that fall under https://github.com/web-platform-tests/wpt.fyi/issues/66 or you want a new one?

[04:51:19.0000] <foolip>
yoav: oh look, I've already asked. So chime in with support there then :)

[04:51:25.0000] <yoav>
cool

[04:57:19.0000] <yoav>
foolip: testing locally, the test was flaky before my changes, for the same reasons

[04:58:00.0000] <annevk>
JakeA: oh right, I totally misread what that code would do

[04:58:04.0000] <annevk>
JakeA: thanks

[04:58:56.0000] <foolip>
yoav: sounds like https://github.com/web-platform-tests/wpt/pull/11229, with a preexisting problem. I plan to file a Chromium bug with repro and then merge the PR as is.

[05:06:28.0000] <jochen__>
annevk: thx for the ping

[05:07:54.0000] <yoav>
foolip: wait, there's another possibility. Maybe this test just doesn't wait long enough for some resources to make sure they are loaded...

[05:15:54.0000] <yoav>
nah, that's not it :/

[05:22:17.0000] <yoav>
foolip: Commented on https://bugzilla.mozilla.org/show_bug.cgi?id=1459140

[05:24:32.0000] <zcorpan>
...is scrollPathIntoView() not implemented?

[05:25:26.0000] <MikeSmith>
zcorpan: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scrollPathIntoView#Browser_compatibility

[05:25:53.0000] <MikeSmith>
Blink-only it seems

[05:26:23.0000] <MikeSmith>
under a flag

[05:26:38.0000] <MikeSmith>
ExperimentalCanvasFeatures

[05:33:33.0000] <zcorpan>
experimental web platform fetaures enabled it it seems. thanks MikeSmith

[05:34:03.0000] <MikeSmith>
cheers

[05:43:03.0000] <gsnedders>
/me gets confused by seeing ed listed as an editor (@ Opera Software ASA), then realises he's ended up on /TR/, argh

[08:47:05.0000] <TabAtkins>
gsnedders: Use a browser or extension that lets you add style to a domain, give all /TR specs something obvious like a weird background?

[08:48:16.0000] <gsnedders>
TabAtkins: my preferred solution here is to "get around to writing an extension that redirects from /TR/ to EDs"

[09:17:14.0000] <TabAtkins>
Domenic annevk: Infra says that variables must be "block scoped", but just links to Wikipedia for the definition of that term. It's... not clear what that actually means for HTML. Can you expand the definition to actually say what elements should establish scope, so I can start enforcing that in Bikeshed?

[09:17:36.0000] <Domenic>
TabAtkins: <ol>, basically?

[09:18:17.0000] <TabAtkins>
Does dl count? (Or maybe the <dd>?)

[09:19:42.0000] <annevk>
TabAtkins: <dd> would

[09:19:57.0000] <annevk>
if you let in the opening <p> there or some such it shouldn't escape

[09:20:38.0000] <annevk>
Typically though a <dd> with lets would contain an <ol> directly

[09:39:18.0000] <TabAtkins>
Typically but not always. I'd just like to have that specified in Infra so I have a clear rule to follow, and something to point people towards in the Bikeshed docs. ^_^

[09:40:04.0000] <Domenic>
I mean I don't think Infra will talk about specific HTML elements, but maybe about indentation or similar...

[09:40:18.0000] <TabAtkins>
Curious - why wouldn't it?

[09:40:53.0000] <Domenic>
It seems wrong for Infra to depend on specific spec-writing languages.

[09:41:06.0000] <Domenic>
Like if you wanted to write an RFC you should still be able to use Infra.

[09:41:15.0000] <Domenic>
(Or perhaps more interestingly, if you wanted to use Markdown.)

[09:43:14.0000] <annevk>
Yeah, I agree with that, e.g., Infra talks about steps; not <li> or <p>

[09:43:46.0000] <annevk>
If it's too vague or the mapping to HTML is unclear we should make it more specific I suppose

[10:10:23.0000] <Domenic>
TabAtkins: Bikeshed is now giving me "Missing a 'TR' entry" for WHATWG review drafts :(. I think maybe I didn't test after making RDs into a snapshot status?

[10:12:24.0000] <TabAtkins>
annevk: It's 100% vague at the moment, so yeah, it definitely needs *something* more specific. I currently have *literally zero idea* what "block-scoped" is supposed to mean in terms of HTML.

[10:12:36.0000] <TabAtkins>
Domenic: Ah yeah, it'll want that. Hm.

[10:12:51.0000] <Domenic>
TabAtkins: I have a fix, I'll post it and let you review if you like it

[10:12:55.0000] <TabAtkins>
Domenic: Also, Markdown is just an HTML syntax, so that's fine. Y^_^

[10:12:59.0000] <TabAtkins>
cool

[10:14:48.0000] <Domenic>
https://github.com/tabatkins/bikeshed/pull/1256

[10:15:40.0000] <annevk>
TabAtkins: RFCs aren't quite HTML though

[10:20:56.0000] <TabAtkins>
Sure. But it's easy enough to say "in HTML, this means ..."

[10:33:55.0000] <jyasskin>
RFCs are moving from a situation where `<dt>title<dd>content` is represented as <t hangText="title">content</t> (https://tools.ietf.org/html/rfc7749#section-2.38.2) to representing it like HTML: https://tools.ietf.org/html/rfc7991#section-2.18.

[13:14:48.0000] <devsnek>
how should runtimes that aren't browsers consume wpt

[13:15:05.0000] <devsnek>
I see node just did some intense copy paste but assuming you don't have a team of collabs


2018-05-31
[17:34:11.0000] <gsnedders>
devsnek: the answer is basically "supporting them is an explicit non-goal". Like, if there's small, a-few-line patches that make stuff easier for you and no worse for browsers, go ahead and submit them, but we make no guarantee as a project that that won't regress.

[20:07:36.0000] <devsnek>
gsnedders: if a test doesn't need dom to run though

[20:07:44.0000] <devsnek>
like just testing the url constructor as an example

[20:07:58.0000] <devsnek>
couldn't wpt put the test in a js file instead and call it a day

[20:17:29.0000] <devsnek>
in the interest of standardising the ecosystem it seems like a pretty easy policy to adopt moving forward at least

[20:17:49.0000] <devsnek>
i'm sure plenty of people would be willing to rewrite old tests carefully

[20:17:57.0000] <devsnek>
its just a huge task for one person trying to implement something

[21:08:34.0000] <MikeSmith>
devsnek: seems worth raising an issue for in the wpt repo

[21:09:06.0000] <MikeSmith>
and wider discussion can happen there

[21:09:19.0000] <devsnek>
yeah I just wanted to guage it here first as 700 issues makes me nervous

[21:10:10.0000] <MikeSmith>
yeah

[21:11:21.0000] <MikeSmith>
one thing to keep in mind is that these days a lot tests are upstreamed to wpt from blink and gecko

[21:12:16.0000] <MikeSmith>
so I think we can’t ever expect that the devs writing those will be going out of their way to take non-browser runtimes into consideration

[21:16:21.0000] <devsnek>
I think of it like avoiding needless html

[21:16:39.0000] <devsnek>
good point though

[23:13:09.0000] <annevk>
devsnek: for URL in particular we keep tests in a JSON file precisely to allow reuse

[23:13:19.0000] <annevk>
devsnek: what gsnedders said is incorrect for a lot of stuff I work on

[23:13:46.0000] <annevk>
devsnek: I try to go out of my way to make tests reusable by non-browsers, by having a lot of the input/output expectations encoded in JSON

[03:52:50.0000] <tobie>
annevk: OK, reduced the issue on my side by serializing requests to wattsi.

[03:52:57.0000] <tobie>
annevk:  Root cause seems to be that wattsi doesn't handle concurrent request properly and serves partially empty zip files in such cases.

[03:54:48.0000] <MikeSmith>
tobie: we should also investigate if we can fix that in wattsi then I guess

[03:55:16.0000] <MikeSmith>
if you can file an issue at https://github.com/whatwg/wattsi/issues

[03:55:51.0000] <annevk>
MikeSmith: I suspect that's an issue with the server setup

[03:56:00.0000] <MikeSmith>
oh ok

[03:56:18.0000] <MikeSmith>
oh this is the server wattsi?

[03:56:25.0000] <annevk>
Yeah

[03:56:29.0000] <MikeSmith>
ah OK

[03:56:37.0000] <annevk>
tobie: thanks

[03:56:58.0000] <tobie>
annevk: yes

[03:57:22.0000] <tobie>
annevk: where should I file it, then?

[03:58:01.0000] <MikeSmith>
tobie: https://github.com/whatwg/html-build/issues I reckon

[03:58:06.0000] <tobie>
annevk: do you know what changed that started causing this?

[03:58:19.0000] <annevk>
tobie: https://github.com/domenic/wattsi-server/issues/new

[03:58:46.0000] <tobie>
annevk: because this wasn't an issue before (though I has suspected this might be a problem when looking at how the server was designed last year)

[03:58:57.0000] <tobie>
annevk: thanks

[03:58:57.0000] <annevk>
tobie: not really, https://github.com/domenic/wattsi-server/commit/bb27268e85e9265bc84752742931cdaab99e9698 is the most recent change there

[03:59:08.0000] <annevk>
tobie: before that it hadn't changed for years

[03:59:24.0000] <annevk>
tobie: it could be that wattsi itself takes a little longer to run though so that's why you now notice it

[04:00:14.0000] <tobie>
annevk: yup, or some hardware changes>

[04:00:16.0000] <tobie>
?

[04:00:26.0000] <annevk>
yeah, dunno about that

[04:00:37.0000] <annevk>
seems unlikely, but who knows

[04:00:55.0000] <tobie>
annevk: the issue look like they're about a week old

[04:01:32.0000] <tobie>
annevk: so probably(?) related to the above change.

[04:03:14.0000] <tobie>
annevk: anyway. should be working now. Hopefully the new logging stuff I added to pr-preview will make the next debugging session not take the whole night. :-/

[04:04:49.0000] <annevk>
tobie: ugh, yeah let's hope not; thanks again

[04:19:41.0000] <tobie>
annevk, MikeSmith: issue filed: https://github.com/domenic/wattsi-server/issues/6

[04:57:17.0000] <JakeA>
annevk: help settle a dispute: https://notifications.spec.whatwg.org/#concept-language "which is a DOMString representing either a valid BCP 47 language tag or the empty string". Should it be "an empty string"?

[04:57:52.0000] <Ms2ger>
No, we consistently use "the"

[04:58:05.0000] <JakeA>
whuuuuuut

[04:58:40.0000] <Ms2ger>
There's only one

[04:59:19.0000] <JakeA>
Ms2ger: but, shouldn't it then be linked to where it's defined?

[04:59:54.0000] <JakeA>
Should I be writing "Let whatever be the 42"?

[05:01:05.0000] <Ms2ger>
"the number 42" works, sure

[05:01:17.0000] <Ms2ger>
Much better than "a number 42", in any case

[05:01:38.0000] <JakeA>
But is "Let whatever be 42" wrong?

[05:01:50.0000] <Ms2ger>
No

[05:03:12.0000] <JakeA>
I guess I still don't get why we use "the empty string" unless we're referencing an actual thing defined somewhere

[05:04:51.0000] <zcorpan>
it's no different from the string "foo"; it doesn't need a definition

[05:06:42.0000] <JakeA>
Is this to stress equality, whereas "an empty list" and "an empty list" are not equal?

[05:07:14.0000] <Ms2ger>
Maybe more mutability?

[05:08:37.0000] <JakeA>
So, immutable things are "the" rather than "an" (and "the" is presumed if it's grammatical to omit it)?

[05:09:25.0000] <devsnek>
annevk: true but the rest of the tests are still inside html

[05:09:37.0000] <devsnek>
including the part that uses that html

[05:09:44.0000] <devsnek>
iirc it uses xhr to grab it

[05:09:54.0000] <devsnek>
uses that json*

[05:54:30.0000] <annevk>
devsnek: it should be pretty easy to write your own wrapper, no?

[05:54:58.0000] <annevk>
devsnek: normally the requirements for the wrapper don't change, we just add to the JSON

[05:55:08.0000] <gsnedders>
JakeA: don't you intern the empty string?

[05:56:04.0000] <annevk>
JakeA: we don't have numbers formalized, but I expect let x be 42 will be the answer there

[05:56:22.0000] <annevk>
JakeA: it's the empty string because there's only one empty string

[05:56:40.0000] <devsnek>
annevk: https://github.com/web-platform-tests/wpt/blob/8791bed/url/url-constructor.html

[05:56:45.0000] <annevk>
JakeA: there's multiple strings, but only one that's empty

[05:56:57.0000] <devsnek>
there's a fair amount of not-using-the-json here

[05:57:10.0000] <annevk>
JakeA: a tag or the string "foo" (which we'd shorten to a tag or "foo" in typical usage)

[05:57:22.0000] <annevk>
I see now zcorpan also said this

[05:58:51.0000] <annevk>
devsnek: hmm yeah

[05:59:01.0000] <devsnek>
and I can copy it into another file

[05:59:09.0000] <devsnek>
but then what if there's a bug or something

[05:59:23.0000] <devsnek>
it works if I copy a few tests but that doesn't scale

[05:59:54.0000] <annevk>
devsnek: sure, we could figure out how to make these more reusable

[06:00:11.0000] <devsnek>
anyway I was gonna open an issue about it in a few

[06:00:12.0000] <annevk>
devsnek: did you look at the any.js/window.js format wpt supports? Would that work?

[06:00:26.0000] <annevk>
devsnek: sg

[06:00:30.0000] <devsnek>
I haven't heard of any.js or window.js

[06:00:37.0000] <devsnek>
I'll take a look

[06:01:01.0000] <annevk>
devsnek: https://web-platform-tests.org/writing-tests/testharness.html#auto-generated-test-boilerplate

[06:01:26.0000] <devsnek>
oh those

[06:01:34.0000] <devsnek>
yeah the goal would be to have more of that

[06:02:18.0000] <devsnek>
I wonder how cloudflare tests their workers for spec compliance

[07:48:06.0000] <devsnek>
annevk & MikeSmith & gsnedders https://github.com/web-platform-tests/wpt/issues/11277

[09:00:10.0000] <annevk>
ta

[09:22:52.0000] <devsnek>
annevk: I don't think 11277 is specific to URL, I just listed it as an example

[09:23:21.0000] <devsnek>
for instance EventTarget can be made almost spec compliant without a dom

[09:23:34.0000] <devsnek>
you just always have an empty list for bubbles and event capture

[15:57:16.0000] <TabAtkins>
I forget, was there any appetite for trying to get "async constructors" in WebIDL, so that `new DOMFoo()` can return a `Promise<DOMFoo>`?

[15:57:54.0000] <TabAtkins>
Or is the best practice intended to remain what you have to do currently - define it as having no constructor, and just expose a factory function?

[16:02:44.0000] <MikeSmith>
TabAtkins: about the highlighter, after the we last chatted about it here, I guess I assumed you were gonna be landing some change to the highlighter sources?

[16:02:48.0000] <MikeSmith>
or maybe I misunderstood

[16:03:03.0000] <TabAtkins>
No, I'm fixing it. Mostly done, but on my laptop which I accidentally left at home today. ^_^

[16:03:11.0000] <TabAtkins>
I'll try and push it tonight.

[16:03:59.0000] <MikeSmith>
hah

[16:04:06.0000] <MikeSmith>
thanks :)

[16:04:39.0000] <MikeSmith>
but clearly you need to get into the cloud, man :D

[16:06:20.0000] <MikeSmith>
devsnek: thanks for filing that issue. It seems to have already passed the Ms2ger bar, which is a pretty high bar ー so that’s a very good sign

[16:07:28.0000] <devsnek>
who is that

[16:08:40.0000] <TabAtkins>
A mysterious person in a mask, who appears when they're most needed...

[16:08:47.0000] <MikeSmith>
heh

[16:08:57.0000] <MikeSmith>
yes Ms2ger is many things

[16:09:01.0000] <devsnek>
to me its just one of those people who thinks they're too cool for a github avatar

[16:09:08.0000] <devsnek>
:P

[16:09:11.0000] <MikeSmith>
haha

[16:10:15.0000] <devsnek>
is anyone here pretty familiar with the url spec

[16:10:37.0000] <devsnek>
i have a weird thing with my implementation where it doesn't handle base urls properly if the scheme is file

[16:11:11.0000] <MikeSmith>
devsnek: you probably need annevk

[16:11:22.0000] <MikeSmith>
for that

[16:11:46.0000] <MikeSmith>
though there may be somebody else on teh channel right now who has implemented

[16:12:03.0000] <MikeSmith>
anyway as far as Ms2ger wpt, he is by far one of the most active contributorsーespecially in terms of reviews of PRs and enhancement requests for the infra bits and harness

[16:12:10.0000] <devsnek>
ic

[16:12:12.0000] <devsnek>
good to know

[16:12:29.0000] <devsnek>
the only other implementation of url i've seen is domenic's and i never see him around

[16:12:31.0000] <MikeSmith>
maybe Ms2ger actually wrote the initial testharness.js, can’t remember now

[16:12:39.0000] <MikeSmith>
eh?

[16:12:49.0000] <devsnek>
technically also node's but its written in c++

[16:12:51.0000] <MikeSmith>
Domenic is around here very often

[16:13:07.0000] <devsnek>
i'm not usually around here heh

[16:13:18.0000] <devsnek>
i spend more time in tc39

[16:13:27.0000] <MikeSmith>
Domenic is there too :)

[16:13:38.0000] <devsnek>
yeah i see him pop in every once in a while

[16:15:33.0000] <MikeSmith>
FWIW I maintain a fork of an implementation, for use in the HTML checker

[16:15:34.0000] <MikeSmith>
https://github.com/validator/galimatias

[16:16:00.0000] <MikeSmith>
but I try to touch that as little as possible and unfortunately it’s not in full conformance with the current URL spec

[16:16:03.0000] <devsnek>
mfw java

[16:16:45.0000] <MikeSmith>
:) yeah I know

[16:17:06.0000] <devsnek>
you will never know my pain 😢

[16:17:07.0000] <MikeSmith>
someday I am going to rewrite the entire checker in Rust

[16:17:13.0000] <devsnek>
i respect rust

[16:17:17.0000] <devsnek>
include_str ftw

[16:18:11.0000] <gsnedders>
MikeSmith: jgraham wrote testharness.js

[16:18:34.0000] <MikeSmith>
ah OK

[16:18:34.0000] <gsnedders>
early working names included goth.js

[16:18:52.0000] <MikeSmith>
gsnedders: oh he named it after you?

[16:19:20.0000] <gsnedders>
MikeSmith: so Opera had a department called EMO. myself and jgraham really wanted to call /something/ GOTH.

[16:19:28.0000] <gsnedders>
Y'know, like a Generic Opera/Open Test Harness.

[16:19:48.0000] <TabAtkins>
I like that I came in today with literally 9000 emails from the wpt repo, after the accidental signup. ^_^ It took gmail like ten minutes to archive all of them.

[16:20:07.0000] <gsnedders>
(in the end the rewrite of Opera's CI system became called GOTH)

[16:26:51.0000] <MikeSmith>
TabAtkins: about the #sysreq thing, I just now had github send invites for them to the w3c org

[16:27:30.0000] <TabAtkins>
Cool, thanks.

[16:29:17.0000] <jgraham>
GOTH had the nice property that OTH is Opera Test Harness, so it was easy to backronym a G

[16:30:03.0000] <astearns>
thanks, MikeSmith

[16:30:30.0000] <gsnedders>
MikeSmith: speaking of th.js, the origin story as I remember it is basically coming into work some day and jgraham being like "hey can you review this thing I wrote last night before I send it out to the HTML Testing TF?"

[16:30:42.0000] <jgraham>
But testharness.js is so called despite not being a harness because there was an earlier attempt with the name testrunner.js

[16:30:51.0000] <jgraham>
gsnedders: I don't remember that, but it could be true

[16:31:27.0000] <gsnedders>
jgraham: was testrunner.js zcorpan's thing?

[16:32:11.0000] <jgraham>
Maybe? I thought I wrote at least one version of that

[16:33:08.0000] <gsnedders>
I feel like my response to jgraham writing a new test harness was "*rolleyes*, another one?"

[16:33:15.0000] <gsnedders>
but I could be misremembering

[16:35:53.0000] <jgraham>
I thought that was your response to me writing code in general; "oh no, not again"

[16:37:18.0000] <gsnedders>
Well pretty much

[16:37:25.0000] <gsnedders>
"Did you write tests this time?"

[16:44:54.0000] <KiChjang>
question about window indexed getter https://html.spec.whatwg.org/multipage/window-object.html#windowproxy-getownproperty

[16:45:18.0000] <KiChjang>
does it only go 1-layer deep on the browsing context?

[16:45:41.0000] <KiChjang>
i.e. does it only check the child BCs of the current window and not its grandchildren?

[16:45:53.0000] <gsnedders>
yes, I'm 99% sure

[16:48:01.0000] <KiChjang>
gsnedders: hmm, the spec text doesn't really make this explicit though

[16:48:15.0000] <KiChjang>
that's why i was confused

[16:48:22.0000] <KiChjang>
"Set value to the WindowProxy object of the indexth document-tree child browsing context of document's browsing context, sorted in the order that their browsing context container elements were most recently inserted into document, the WindowProxy object of the most recently inserted browsing context container's nested browsing context being last."

[16:48:48.0000] <KiChjang>
especially on the part where it says "sorted in the order that their BC container elements were most recently inserted"

[16:49:12.0000] <KiChjang>
that makes me believe that it should go something like [child, grandchild, sibling]

[16:49:46.0000] <KiChjang>
since the grandchild is inserted before the the sibling

