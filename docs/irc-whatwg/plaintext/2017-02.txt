2017-02-01
[17:29:15.0000] <MikeSmith>
what spec actually requires that the Origin header be sent for any request that is not a GET or HEAD request?

[17:29:27.0000] <MikeSmith>
I see the Fetch spec says this:

[17:29:40.0000] <MikeSmith>
A CORS request is an HTTP request that includes an Origin header. It cannot be reliably identified as participating in the CORS protocol as the Origin header is also included for all requests whose method is neither GET nor HEAD.

[17:30:30.0000] <MikeSmith>
…but the Fetch spec itself nowhere requires that Origin be sent in any request that is not a GET or HEAD request

[18:04:40.0000] <MikeSmith>
ah nm

[18:04:45.0000] <MikeSmith>
found it

[18:04:52.0000] <MikeSmith>
https://fetch.spec.whatwg.org/#dfnReturnLink-20

[18:04:58.0000] <MikeSmith>
> If the CORS flag is set or httpRequest’s method is neither `GET` nor `HEAD`, then append `Origin`/httpRequest’s origin, serialized and UTF-8 encoded, to httpRequest’s header list.

[01:00:04.0000] <XhmikosR>
does anybody know if there's any downside in using ceche immutable?

[01:00:07.0000] <XhmikosR>
*cache

[01:01:03.0000] <annevk>
XhmikosR: you need to change URLs whenever you update the resource

[01:01:31.0000] <XhmikosR>
annevk: I already need to do that in the time my cache is valid which is too long already :)

[01:01:56.0000] <annevk>
XhmikosR: then you should be fine I think

[01:02:03.0000] <XhmikosR>
so my question should be, if one has cache busting and long cache headers, does immutable have any downsides?

[01:02:54.0000] <XhmikosR>
I see, thanks. I wanted to give immutable a go

[03:17:26.0000] <tobie>
In Bikeshed, How would I link to the Audio named constructor of in HTML spec? {{Audio}} doesn't seem to work.

[03:18:04.0000] <tobie>
s/of in/in the/

[03:23:22.0000] <annevk>
tobie: you'd have to PR HTML to export it appropriately

[03:23:51.0000] <tobie>
annevk: ty

[06:20:12.0000] <Ms2ger>
annevk, rs? https://github.com/w3c/testharness.js/pull/238

[06:22:16.0000] <Ms2ger>
Or foolip ^

[06:23:26.0000] <annevk>
Ms2ger: looks okay, do we really still need ArrayClass to exist at all?

[06:23:38.0000] <annevk>
Ms2ger: I thought we could remove that, or did I forgot about something silly?

[06:24:24.0000] <annevk>
/me can't find any GitHub issues

[06:24:47.0000] <foolip>
Ms2ger, annevk: I merged it

[06:25:00.0000] <Ms2ger>
annevk, cssom still uses it, for better or worse

[06:25:02.0000] <Ms2ger>
Takk

[06:25:12.0000] <annevk>
Ms2ger: can't CSSOM use iterable<>?

[06:25:18.0000] <Ms2ger>
No comment

[06:25:30.0000] <annevk>
I can't find a single issue so I'm just going to raise one against IDL

[06:28:35.0000] <annevk>
Ms2ger: https://github.com/heycam/webidl/issues/291

[06:28:56.0000] <Ms2ger>
Thanks

[09:37:18.0000] <foolip>
No Hixie here? annevk, what is the canonical pronunciation? what wee gee?

[09:38:04.0000] <annevk>
foolip: I use it

[09:38:54.0000] <foolip>
annevk: then I will too. I've alternated between what wig and what double-u gee.

[09:39:40.0000] <foolip>
(and what ve ge in Swedish)

[09:40:00.0000] <foolip>
annevk: working on bit.ly/blinkon7-wpt

[09:42:32.0000] <annevk>
foolip: Domenic uses wig

[09:43:17.0000] <annevk>
foolip: are things recorded? Some talks seem very interesting

[09:43:45.0000] <foolip>
annevk: yes they are, but it seems like videos aren't available immediately after, might take a few days

[09:44:14.0000] <foolip>
I'm going to claim that the goal of standards is roughly "Maximize throughput of interoperably implemented spec text"

[09:44:18.0000] <foolip>
Does that seem sane?

[09:58:57.0000] <Domenic>
foolip: I think also the goal of allowing followers (including late followers like Servo) is important.

[10:00:52.0000] <foolip>
Domenic: absolutely. but if we have 4 interoperable implementations, is it not quite likely that the spec and tests are in good shape for a new entry?

[10:01:31.0000] <foolip>
s/entry/enterer/?

[10:04:10.0000] <annevk>
Yeah, converge impls, enable competition

[10:05:01.0000] <annevk>
Not sure what maximize throughput means exactly, sounds like streams terminology

[10:06:44.0000] <foolip>
heh, it's just the utilitarian in me

[10:07:51.0000] <foolip>
oh, I see what you mean with streams, this is probably confusing phrasing

[10:07:54.0000] <foolip>
/me will tinker

[10:10:40.0000] <Domenic>
bz to the rescue in that confusing origin/domain thread, yay

[10:11:28.0000] <foolip>
/me finds a recent blog post with the wording already tinkered

[10:42:56.0000] <annevk>
Domenic: maybe you can prod some people in person for the <canvas> blogpost

[10:43:24.0000] <Domenic>
Oh yeah

[10:46:20.0000] <annevk>
Domenic: kinda want it to include pretty graphics now, but we probably shouldn't ask for too much

[14:22:01.0000] <Domenic>
rniwa: haven't confirmed myself but we have reports that Safari also fails on emoji custom element names: https://bugs.chromium.org/p/chromium/issues/detail?id=687678


2017-02-02
[19:42:52.0000] <jyasskin>
Hey TabAtkins, could you add https://w3c.github.io/webauthn/ to shepherd?

[20:23:03.0000] <TabAtkins>
jyasskin: Will do tomorrow. File a bikeshed issue to remind me?

[22:40:24.0000] <jyasskin>
TabAtkins: It seems like autolinks to method arguments don't allow omitting the arguments in the method signature. That is, {{Foo/bar()/baz}} doesn't work; I need {{Foo/bar(quux,baz,xyzzy)/baz}}, which is frustratingly long.

[22:40:31.0000] <jyasskin>
TabAtkins: Sure

[22:41:52.0000] <jyasskin>
Ah, that's https://github.com/tabatkins/bikeshed/issues/634

[01:56:30.0000] <zcorpan>
TIL I can use www.software.hixie.ch for testing document.domain. https://github.com/whatwg/html/pull/2288#issuecomment-276913576

[03:25:07.0000] <annevk>
foolip: I think a further interesting policy change would be to put the standard in charge of test maintenance as well

[03:41:31.0000] <Ms2ger>
What does that mean, exactly?

[03:54:35.0000] <annevk>
I was mostly thinking about issues

[03:54:55.0000] <annevk>
So its an issue against the standard if the test suite is broken

[03:55:20.0000] <annevk>
Or an issue against the standard if coverage is lacking

[03:56:28.0000] <annevk>
This would make it clearer how stable a standard, hopefully provide incentives to get those issues cleared, etc

[04:44:51.0000] <annevk>
Getting rid of submodule issues is the thing I hate most about web-platform-tests, followed by finding the documentation

[04:45:22.0000] <annevk>
I sometimes need to run git reset --hard origin/master before running the git submodule thingy

[04:45:26.0000] <annevk>
Ugh

[05:13:59.0000] <zcorpan>
hmm. is it known that url/a-element.html crashes safari tp?

[05:22:24.0000] <zcorpan>
annevk: wpt repo has labels for all specs... maybe an easy first step is to file a single tracker issue for a standard asking to drive down open tests issues

[05:27:12.0000] <jgraham>
annevk: We were discussing adding open test PRs to the top of specs (dunno if that was what you were refering to or not)

[05:34:11.0000] <annevk>
zcorpan: does it do so consistently now? Crash Safari?

[05:34:17.0000] <annevk>
zcorpan: worth filing a bug on

[05:34:22.0000] <annevk>
zcorpan: I noticed it happening once

[05:34:47.0000] <annevk>
jgraham: that sounds interesting too

[05:35:21.0000] <annevk>
zcorpan: yeah, could start doing that for WHATWG I suppose

[05:35:33.0000] <annevk>
zcorpan: I believe I'm mostly on top with stuff I maintain, but who knows

[05:35:40.0000] <annevk>
zcorpan: HTML probably has a bunch

[05:48:05.0000] <zcorpan>
annevk: seems to consistently crash for me with Release 22 (Safari 10.2, WebKit 12604.1.4.2)

[05:49:03.0000] <annevk>
zcorpan: ah yeah, do you want to file a bug?

[05:49:16.0000] <zcorpan>
sure

[05:54:24.0000] <zcorpan>
https://bugs.webkit.org/show_bug.cgi?id=167730

[05:57:13.0000] <annevk>
tobie: how soon do you expect https://github.com/heycam/webidl/issues/188 to be fixed?

[05:57:19.0000] <annevk>
tobie: or should I workaround?

[05:57:58.0000] <tobie>
annevk: I think it's next on my todo list.

[05:58:17.0000] <tobie>
annevk: I think we have a plan for it.

[05:58:24.0000] <tobie>
annevk: must check my notes.

[05:59:39.0000] <tobie>
annevk: got sidetracked by figuring out WebIDL testing this week

[06:01:41.0000] <annevk>
tobie: so bz suggested that since the way forward is defining your own toJSON method, a very simple fix would be to drop the restriction on defining your own toJSON method

[06:01:52.0000] <annevk>
tobie: I could create a PR for that

[06:02:06.0000] <annevk>
tobie: and the the fix for the remainder can be done later

[06:05:15.0000] <annevk>
tobie: btw https://github.com/heycam/webidl/pull/244 has been open for a long time

[06:05:50.0000] <tobie>
annevk: yes, I'm not too sure how to proceed with it.

[06:09:40.0000] <tobie>
 annevk I don't yet have a clear enough vision of what this part of the spec does to know precisely how to reorg things so they make more sense.

[06:10:15.0000] <annevk>
tobie: okay

[06:10:24.0000] <annevk>
tobie: I'm in no rush with that one

[06:10:36.0000] <tobie>
annevk: I wish we had a better understanding of what external stuff might point the different parts of the spec

[06:11:15.0000] <annevk>
tobie: yeah that would be useful now and then

[06:11:48.0000] <annevk>
tobie: would be neat to have tooling...

[06:12:20.0000] <tobie>
annevk: wrt to the toJSON stuff, I think we just need to prevent interfaces which rely on jsonifier to have a parent that specifies a toJSON attribute

[06:20:36.0000] <annevk>
tobie: ah yeah, I didn't try to go that far in my PR

[06:21:37.0000] <tobie>
annevk: well, jsonifier's not specified yet… so I didn't really expect you to. :)

[06:22:05.0000] <annevk>
I just got word bz merged it, so \o/

[06:23:40.0000] <tobie>
annevk: do you guys plot things in the background. ;)

[06:24:17.0000] <annevk>
tobie: I was chatting with bz in #content

[06:24:23.0000] <annevk>
tobie: on Mozilla IRC

[06:25:39.0000] <tobie>
sounds like a fun place to hangout.

[06:38:17.0000] <annevk>
Contrary to what you might have heard on Twitter, the URL Standard feels pretty close to done parser-wise

[06:38:42.0000] <annevk>
The main thing that still needs to be sorted is IDNA and what code points to allow in hosts/domains

[06:57:01.0000] <AutomatedTester>
annevk: stupid question: why isn't file:/// part of local scheme ? https://url.spec.whatwg.org/#local-scheme

[06:58:01.0000] <annevk>
AutomatedTester: I think the way we use local scheme wouldn't want file to be included

[06:58:02.0000] <AutomatedTester>
more, why is it a special scheme?

[06:58:08.0000] <AutomatedTester>
ok

[06:58:39.0000] <annevk>
AutomatedTester: I'm not sure if file still needs to be a special scheme, it's worth looking into whether refactoring it into just being its own category is worthwhile

[06:59:11.0000] <annevk>
AutomatedTester: the URL syntax section already has three categories, mostly

[07:01:20.0000] <AutomatedTester>
annevk: would you like me to raise an issue about file being a special scheme?

[07:03:35.0000] <nox>
Can an URL without a special scheme have an empty hostname?

[07:03:49.0000] <nox>
AFAIK no, so that's why file is special.

[07:38:55.0000] <foolip>
annevk: yes, I think so too. we discussed something similar on Monday, concluding that a good start would be to adding a tests section to the top of the spec, linking to wpt, open issues/PRs with the spec's label, and when we have it perhaps the dashboard too

[07:39:14.0000] <foolip>
annevk: https://wptdashboard.appspot.com/t/dom/events if you haven't seen it

[07:39:20.0000] <foolip>
note that the data is not fresh

[07:39:31.0000] <annevk>
AutomatedTester: yeah, please do that, I should investigate it at least

[07:39:40.0000] <annevk>
nox: but file can have an empty host

[07:39:52.0000] <annevk>
nox: oh wait, you have it reversed

[07:39:57.0000] <nox>
Mmh?

[07:40:03.0000] <annevk>
nox: special schemes require a host name, except for file

[07:40:07.0000] <nox>
Oh.

[07:40:28.0000] <foolip>
annevk: this came up in the context of trying to figure out who's job it is to go through all open PRs in web-platform-tests

[07:41:30.0000] <annevk>
foolip: right, I'm starting to lean towards it being the editor who is finally responsible

[07:42:05.0000] <annevk>
foolip: but delegation seems fine, e.g., I'm not personally an OWNER of any test effort I think

[07:43:20.0000] <annevk>
foolip: hmm, I'm getting contradictory, better think about it some more

[07:43:34.0000] <foolip>
annevk: right, although I think every implementer should feel respsonsible for sheperding any change all the way to interop, ultimately someone needs to be the fallback

[07:44:26.0000] <annevk>
foolip: Mark Pilgrim once wrote a nice article about this, classifying a couple of approaches

[07:44:51.0000] <foolip>
annevk: is that now gone from the interwebs?

[07:45:29.0000] <annevk>
foolip: found a backup: http://www.diveintomark.link/2004/why-specs-matter

[07:46:52.0000] <annevk>
foolip: probably more fun than informative, but still

[07:46:54.0000] <foolip>
haha, classic Pilgrim, I remember this one

[07:48:25.0000] <foolip>
I remember thinking that I certainly would aspire to the angel description and not understanding why it was so implausible to him.

[07:51:06.0000] <foolip>
"and then thoroughly test it against the accompanying test suite before shipping their product" is key, given that those test suites usually don't exist

[07:54:49.0000] <annevk>
I guess a problem is that the standard is often broken, and so are the tests

[07:55:00.0000] <annevk>
And the coverage of the test is low, etc.

[07:58:13.0000] <annevk>
AutomatedTester: actually, never mind, I found the reason

[07:58:33.0000] <annevk>
AutomatedTester: the main reason is the backslash handling

[07:59:41.0000] <annevk>
AutomatedTester: although I guess we could make that a separate group, but not sure if there would be much benefit

[08:53:35.0000] <Domenic>
That article is amazing

[10:38:07.0000] <annevk>
foolip: you around?

[10:38:19.0000] <annevk>
foolip: I'd like to land https://github.com/w3c/web-platform-tests/pull/4658

[10:39:59.0000] <foolip>
annevk: not quite here

[10:40:53.0000] <foolip>
annevk: if you've looked at current behavior and think that it's plausible that we could converge on the spec, then sure

[10:40:57.0000] <foolip>
now I'm gone

[10:44:57.0000] <annevk>
foolip: ta

[11:23:01.0000] <jgraham>
annevk: Why does http://w3c-test.org/html/browsers/history/the-location-interface/location-protocol-setter-non-broken.html use a setTimeout before posting the reply in the data: case? That seems to upset Firefox (not sure why it does, but removing it fixed the problem)

[11:59:33.0000] <AutomatedTester>
annevk: ahh thanks

[12:22:44.0000] <annevk>
jgraham: can look Tuesday

[13:00:39.0000] <rektide>
annevk: (asking about a worker that had DOM)- A) jsdom isn't eaxctly tiny B) the other major issue is debuggability. i've filed https://github.com/tmpvar/jsdom/issues/1719 to ask for Chrome Debugging Protocol Support in jsdom but that's getting super exotic super fast

[13:54:46.0000] <jgraham>
annevk: Anyone else that can look? It's blocking a wpt update


2017-02-03
[18:43:11.0000] <innovati>
Hello all :D

[00:18:54.0000] <annevk>
jgraham: maybe bz, I recall those timers being significant though

[03:00:28.0000] <felixjet>
<figure> can contain:

[03:00:29.0000] <felixjet>
Either: One figcaption element followed by flow content.

[03:00:30.0000] <felixjet>
Or: Flow content followed by one figcaption element.

[03:00:30.0000] <felixjet>
Or: Flow content.

[03:00:43.0000] <felixjet>
but flow content... how many tags?

[03:00:49.0000] <felixjet>
1? 1+?

[03:01:11.0000] <felixjet>
it is ok to put 2 images inside a <figure> ?

[03:23:26.0000] <zcorpan>
felixjet: 0+

[03:23:51.0000] <zcorpan>
text is also flow content

[03:25:05.0000] <zcorpan>
felixjet: you can use https://checker.html5.org/ to check if something is ok

[03:38:04.0000] <zcorpan>
apparently i used 15.38 Tebibytes with BigQuery in january

[03:40:20.0000] <jgraham>
Sounds expensive

[04:23:08.0000] <zcorpan>
jgraham: $71

[04:25:35.0000] <zcorpan>
but most months i'm charged $0.01 since using bigquery is free to some threshold

[07:03:54.0000] <JonathanNeal>
Good morning!


2017-02-04
[16:35:59.0000] <JonathanNeal>
Good evening!

[16:37:25.0000] <gsnedders>
Good afternoon!

[16:51:16.0000] <JonathanNeal>
gsnedders: how have you been?

[16:59:20.0000] <gsnedders>
JonathanNeal: okay, been busy and at meetings/BlinkOn this week on my second trip to the US this year.

[16:59:33.0000] <JonathanNeal>
Once a month now, huh?

[17:01:21.0000] <gsnedders>
well, it's scarcely February!

[17:01:30.0000] <gsnedders>
hopefully no more long-haul till September

[17:01:41.0000] <gsnedders>
But I might have agreed to do one more before then :(

[17:02:14.0000] <JonathanNeal>
What are you working on that keeps bringing you out? Or are these talks?

[17:03:38.0000] <gsnedders>
JonathanNeal: CSS WG F2F at the start of the month, now here for a variety of meetings as well as BlinkOn (some with Google, some cross-vendor)

[17:03:51.0000] <gsnedders>
getting paid by Google to work on test stuff nowadays

[17:05:05.0000] <JonathanNeal>
getting paid by Google is always nice

[17:05:15.0000] <gsnedders>
Yeah, can't say it's a bad hting.

[17:05:17.0000] <gsnedders>
*thing :)

[17:14:44.0000] <a-ja>
fyi for travelers to US...fed judge in wash just issued temporary restraining order immediately halting trump's immigration ban...so customs lines should be shorter for now

[17:15:36.0000] <a-ja>
it'll probably be in 9th circuit appeals court tomorrow, though, so who knows how long it'll last

[17:18:14.0000] <gsnedders>
s/customs/immigration/ I assume, but still, depends on the CBP actually following a court order which hasn't always happened…

[17:20:03.0000] <a-ja>
will be interesting to see whether it gets to a 4-4 supreme court

[17:20:40.0000] <gsnedders>
oh, god, I'd never thought of the fact that there's a vacant position there…

[17:21:48.0000] <gsnedders>
so, uh, what happens in that case?

[17:22:46.0000] <a-ja>
in case of 4-4 ties, appeals court decisions stand


2017-02-05
[17:40:12.0000] <MikeSmith>
XhmikosR: I will need to a new checker release again soon

[17:41:13.0000] <MikeSmith>
XhmikosR: there was a pretty serious memory-leak/bloat problem in the code

[17:42:05.0000] <MikeSmith>
XhmikosR: https://github.com/validator/validator/commit/6bccda0b460bb2a5d29359a02a744d73913d64e0

[17:44:25.0000] <MikeSmith>
XhmikosR: the code creates a buffer to hold the first 34KB of each document it checks (for use with the language detector) but neglected to clear that buffer between documents, so the more documents you check, the bigger that buffer gets

[00:47:17.0000] <XhmikosR>
MikeSmith: all right, just ping me and I'll do it as soon as I'm in front of my dev rig

[08:49:33.0000] <MikeSmith>
1

[08:49:46.0000] <MikeSmith>
oofs

[08:50:03.0000] <MikeSmith>
XhmikosR: 17.2.1 released

[08:58:33.0000] <nox>
MikeSmith: HTML 17.2.1?

[08:58:46.0000] <nox>
Times flies

[08:59:57.0000] <XhmikosR>
MikeSmith: done

[09:03:05.0000] <MikeSmith>
XhmikosR: thanks

[09:54:37.0000] <smaug____>
where would one put tests about canvas element

[09:54:45.0000] <smaug____>
not about context ,but the element itself

[09:55:03.0000] <smaug____>
I would expect somewhere under html/ but can found a nice place

[10:01:20.0000] <smaug____>
huh, there are very very few tests


2017-02-06
[17:01:02.0000] <MikeSmith>
smaug____: yeah html/semantics/embedded-content/the-canvas-element directory

[17:01:15.0000] <MikeSmith>
smaug____: what kind of tests were you expecting there?

[17:01:16.0000] <smaug____>
oh there

[17:01:19.0000] <smaug____>
didn't find that

[17:01:29.0000] <MikeSmith>
well there are not many there either

[17:01:30.0000] <smaug____>
MikeSmith: someone was asking where to add new tests

[17:01:33.0000] <MikeSmith>
OK

[17:02:22.0000] <MikeSmith>
I guess the spec does not have many requirements in that section that are not requirements of the 2dcontext API

[17:02:32.0000] <smaug____>
I suggested html/dom

[17:02:54.0000] <MikeSmith>
ah

[17:03:24.0000] <MikeSmith>
there are no canvas tests under there

[17:04:03.0000] <smaug____>
sure

[17:04:11.0000] <smaug____>
but that doesn't really say much

[17:04:12.0000] <MikeSmith>
well except the HTMLCanvasElement interface

[17:04:38.0000] <MikeSmith>
(assuming that’s what it’s called)

[17:04:41.0000] <smaug____>
but ok, I commented that html/semantics/embedded-content/the-canvas-element could be used

[17:04:47.0000] <smaug____>
thanks

[17:05:00.0000] <MikeSmith>
cheers

[17:06:52.0000] <MikeSmith>
reading https://lists.webkit.org/pipermail/webkit-dev/2017-February/028694.html “Upstreaming Tests from WebKit to Web Platform Tests” from rniwa

[18:50:37.0000] <MikeSmith>
https://www.w3.org/community/httpslocal/

[01:24:16.0000] <MikeSmith>
zcorpan: FYI https://bugzilla.gnome.org/show_bug.cgi?id=778192 (request to have libxslt output <!DOCTYPE html) if <xsl:output method="html" version="5"> (as Saxon already does)

[01:25:23.0000] <MikeSmith>
zcorpan: also I discovered that if you use <xsl:output doctype-system="about:legacy-compat"> with libxslt it will output <!DOCTYPE html>

[01:25:36.0000] <MikeSmith>
due to https://bugzilla.gnome.org/show_bug.cgi?id=747301

[01:26:33.0000] <MikeSmith>
but if you use <xsl:output doctype-system="about:legacy-compat"> with Saxon or other XSL implementations, of course you will get a literal SYSTEM "about:legacy-compat" in the doctype, as you’d expect

[01:27:27.0000] <MikeSmith>
I don’t have much hope that Daniel Veillard will implement my request unless I provide a patch (and maybe not even then)

[01:28:20.0000] <MikeSmith>
But I prefixed the bug title with “Please consider supporting…” so maybe that will help :)

[01:31:04.0000] <zcorpan>
MikeSmith: 👍

[04:33:43.0000] <zcorpan>
https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F looks like steps 7, 8, 9 are kinda backwards now

[07:08:21.0000] <Domenic>
Yeah it'd be good to get that updated

[13:28:35.0000] <TabAtkins>
SimonSapin: Dammit Simon, you ninja'd me by like 30 seconds. I was almost done with a nearly identical response. ^_^

[13:28:43.0000] <SimonSapin>
haha

[13:29:14.0000] <SimonSapin>
TabAtkins: so how do you feel about implementing it?

[13:29:27.0000] <TabAtkins>
Writing up that response now - please god do it.

[13:30:03.0000] <SimonSapin>
TabAtkins: we had a servo PR for this last year, but it was kind wrong in lots of ways and I never got around to fixing it up. Then it got bitrotted enough that we closed it.

[13:30:53.0000] <SimonSapin>
(And it’s not like servo was gonna drive adoption. But now with Stylo it could be another story…)

[13:42:56.0000] <nox>
SimonSapin: Implementing what?

[13:43:06.0000] <SimonSapin>
nox: MQ4 new syntax

[13:43:16.0000] <SimonSapin>
https://lists.w3.org/Archives/Public/www-style/2017Feb/0035.html

[13:43:52.0000] <TabAtkins>
Specifically, adding the relational operators (<, >, <=, >=) to MQ rather than using min-*/max-* prefixes on things.

[13:44:00.0000] <nox>
Nice.

[15:57:35.0000] <smaug>
element's browsing context isn't something defined anywhere, right?


2017-02-07
[16:00:30.0000] <smaug>
/me wonders if intersection observer has any good tests

[16:11:55.0000] <jsbell>
smaug: https://github.com/w3c/web-platform-tests/pull/4384 in theory...

[16:12:58.0000] <smaug>
/me is thinking about cases like moving elements to other documents etc

[16:18:18.0000] <jsbell>
smaug: spec/test author says no. He also says "patches welcome!" :)

[16:18:34.0000] <smaug>
heh

[16:18:46.0000] <jsbell>
(admitting it's a major omission)

[16:20:03.0000] <jyasskin>
smaug: An element's browsing context would be the element's node document's browsing context, right? https://dom.spec.whatwg.org/#concept-node-document to https://html.spec.whatwg.org/#concept-document-bc

[16:25:10.0000] <smaug>
jyasskin: sure, but it isn't defined anywhere what element's browsing context is, right?

[16:25:41.0000] <jyasskin>
Yeah, HTML always says "foo's node document's browsing context" or "iframe element's browsing context".

[16:26:55.0000] <jyasskin>
I believe the second means the nested browsing context, which makes it less straightforward to just define "element's browsing context".

[00:43:38.0000] <annevk>
jyasskin: smaug: we should probably just change it to element's node document's browsing context, unless it's actually element's associated browsing context (the nested browsing context)

[00:43:58.0000] <annevk>
jyasskin: smaug: I'd happily fix instances/take PRs

[01:01:56.0000] <annevk>
zcorpan: do you have a pointer to the Safari TP crash issue?

[01:03:10.0000] <zcorpan>
annevk: https://bugs.webkit.org/show_bug.cgi?id=167730

[01:05:26.0000] <annevk>
zcorpan++ for https://github.com/w3c/web-platform-tests/pull/4690

[01:05:36.0000] <annevk>
/me created that mess

[01:18:58.0000] <zcorpan>
annevk: it was fun to see if my idea would work, which it did. but it's kinda non-obvious. if we need this sort of setup in more places we should think of better ways to do it in testharness

[01:19:48.0000] <annevk>
zcorpan: I don't think we generally need this

[01:19:56.0000] <zcorpan>
yeah

[01:19:58.0000] <annevk>
zcorpan: this is mostly for aligning legacy setups

[01:21:12.0000] <zcorpan>
although "missing" assertions because an early but less important assertion failed is something people find annoying sometimes, i think.

[04:40:09.0000] <smaug>
what does step() mean with async tests? why is that needed, why not just use asserts?

[04:40:34.0000] <smaug>
jgraham: ^

[04:42:20.0000] <smaug>
another question, why does http://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/semantics/embedded-content/the-canvas-element/toBlob.jpeg.html work? http://searchfox.org/mozilla-central/source/testing/web-platform/tests/common/canvas-tests.js#53 seems to call t.done() before the callback to toBlob is called

[04:47:03.0000] <annevk>
smaug: it helps catch the exception

[04:47:37.0000] <smaug>
annevk: step() ? but it isn't needed, right? asserts without step work fine?

[04:48:05.0000] <annevk>
smaug: no they don't work fine, since there's no global exception handler, unless you're creating a standalone test

[04:48:37.0000] <smaug>
annevk: I mean if one has simple test without any possible exceptions

[04:49:11.0000] <annevk>
smaug: if it's a single test you can use http://testthewebforward.org/docs/testharness-library.html#single-page-tests

[04:49:42.0000] <smaug>
and async..

[04:49:53.0000] <annevk>
smaug: yes, you can still use that

[04:50:04.0000] <smaug>
so, step isn't needed

[04:50:11.0000] <smaug>
it can be useful in some cases

[04:50:19.0000] <annevk>
smaug: only if you explicitly call async_test()

[04:50:58.0000] <smaug>
sure, t = async_test(); assert(); t.done()

[04:51:18.0000] <smaug>
/me is still puzzled why asserts work even _after_ calling done();

[04:51:21.0000] <annevk>
smaug: no, that's not okay

[04:51:29.0000] <smaug>
why not?

[04:51:39.0000] <annevk>
smaug: because then it's unclear to what test the assert belongs

[04:55:52.0000] <smaug>
/me assumes if there is just one async tests not-done, asserts would be bound to that

[04:56:05.0000] <smaug>
and based on a patch that works

[04:56:38.0000] <smaug>
and http://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/semantics/embedded-content/the-canvas-element/toBlob.jpeg.html

[04:56:51.0000] <smaug>
that calls assert asynchronously

[04:56:58.0000] <smaug>
certainly outside any step

[04:57:05.0000] <smaug>
(and even after t.done())

[04:58:08.0000] <annevk>
smaug: that it works after t.done() should be enough of an indication that it isn't bound to the test whatsoever...

[04:58:33.0000] <smaug>
what you mean with that

[04:58:49.0000] <annevk>
exactly what I wrote

[04:59:07.0000] <smaug>
harness says the test passed

[04:59:31.0000] <smaug>
testname "toBlob with image/jpeg returns a JPEG Blob" passed

[04:59:57.0000] <Ms2ger>
_addTest does special things

[05:00:30.0000] <annevk>
Oh yeah, that resource doesn't look like a normal assert either

[05:00:43.0000] <annevk>
it uses a*

[05:01:06.0000] <Ms2ger>
smaug, I'm not sure I follow; done() is called after step()

[05:01:21.0000] <smaug>
Ms2ger: done is called before the assert

[05:01:28.0000] <smaug>
in http://searchfox.org/mozilla-central/source/testing/web-platform/tests/html/semantics/embedded-content/the-canvas-element/toBlob.jpeg.html

[05:01:30.0000] <Ms2ger>
No...

[05:01:39.0000] <Ms2ger>
Oh, wait

[05:01:41.0000] <smaug>
I didn't say done is called before step

[05:01:50.0000] <Ms2ger>
Is toBlob sync?

[05:01:54.0000] <smaug>
no

[05:01:58.0000] <Ms2ger>
I guess that would make no sense

[05:03:00.0000] <Ms2ger>
Yeah, that test is wrong

[05:03:40.0000] <Ms2ger>
I should find some time to make those canvas tests make sense

[05:04:16.0000] <smaug>
Ms2ger: so why does the test work?

[05:04:59.0000] <smaug>
in other words, what is the meaning of done() ?

[05:05:01.0000] <Ms2ger>
"work" how?

[05:05:11.0000] <Ms2ger>
I don't think the test checks anything

[05:05:48.0000] <smaug>
oh, hmm

[05:06:04.0000] <smaug>
do we get pass even without any asserts?

[05:06:14.0000] <Ms2ger>
Yes

[05:06:33.0000] <smaug>
aha, that is a bug in framework

[05:06:35.0000] <smaug>
ok, I see

[05:06:48.0000] <smaug>
and asserting after done() should cause failure

[05:09:47.0000] <Ms2ger>
That would mean the test could never finish

[05:09:52.0000] <Ms2ger>
Anyway, I'll go and fix these

[05:10:47.0000] <smaug>
Ms2ger: mochitest does warn if you don't have any asserts, and it does warn if you try to use ok() or such after finish()

[05:14:58.0000] <Ms2ger>
https://github.com/w3c/web-platform-tests/pull/4753

[05:15:23.0000] <nox>
*

[05:15:27.0000] <nox>
focus fail

[05:28:54.0000] <jgraham>
smaug: Warning for assert-after-done is probably possible, but it's not possible to make it affect the test outcome because it would obviously be racy.

[05:29:49.0000] <jgraham>
A test with no asserts seems legit e.g. img.onload = done; img.onerror = () => assert_unreached("image should not have errored");

[05:29:59.0000] <jgraham>
smaug: done() and t.done() and different things

[05:30:02.0000] <jgraham>
*are

[05:30:36.0000] <jgraham>
One says that a particular async test is finsihed, the other says that the entire page is finished (assuming there are no more tests which are not themselves finished)

[05:30:49.0000] <jgraham>
If you have only a single test in a file you can just write bare asserts

[05:31:30.0000] <jgraham>
If you want multiple tests in a file they have to be called inside a specific step otherwise they will simply cause the page to have status ERROR without failing any specific test

[07:54:30.0000] <MikeSmith>
zcorpan: count me a bit amazed but genuinelyhappy https://git.gnome.org/browse/libxslt/commit/?id=5f472f85d074828316ecfa8e5df91e6be4163aeb

[07:56:21.0000] <zcorpan>
MikeSmith: 🎉

[07:56:58.0000] <zcorpan>
time to write some sweet XSLT

[08:01:02.0000] <nox>
zcorpan: My condolences.

[08:01:47.0000] <MikeSmith>
zcorpan: haha 😆

[08:06:56.0000] <smaug>
jgraham: why is test without asserts ok? I would expect img.onload to require something like function() { assert(true); done(); }

[08:09:15.0000] <jgraham>
smaug: Congratulations you are the first person ever to ask for more boilerplate in a wpt :)

[08:09:32.0000] <smaug>
ha

[08:09:47.0000] <smaug>
I'm trying to ask API I could understand and which would be less error prone

[09:18:25.0000] <zcorpan>
smaug: a test passes if no assertions fail. so no assertions means it passes

[09:18:50.0000] <smaug>
no assertions most likely mean buggy tests

[09:19:02.0000] <smaug>
like in toBlob.jpeg.html case

[09:41:57.0000] <annevk>
MikeSmith: so XSLT now depends on non-standardized features?

[09:43:48.0000] <MikeSmith>
I guess XSLT itself doesn’t, but in practice getting the two most-commonly used XSLT engines to output <!DOCTYPE html> does

[09:43:51.0000] <MikeSmith>
now

[09:46:47.0000] <MikeSmith>
anyway XSLT overall is a “doctor it hurts when I do this” thing but a lot people still use it so it seems useful to mitigate bad consequences of it when we can

[09:47:33.0000] <MikeSmith>
I just want people to be able to use <!DOCTYPE html> in their docs without their toolchain getting in teh way

[09:49:07.0000] <MikeSmith>
make fugly <!DOCTYPE html SYSTEM "about:legacy-compat"> the forgottent footnote in history it deserves to be

[09:50:06.0000] <MikeSmith>
and further eliminate the misunderstanding that people continue to have that the doctype means anything or that browser do anything with it other than just using it as signal to not switch into quirks mode

[10:03:28.0000] <gsnedders>
why am I trawling through MO-archive drama?

[10:03:31.0000] <gsnedders>
this isn't productive.

[10:11:13.0000] <annevk>
gsnedders: work on WPT docs 🙌

[10:36:15.0000] <annevk>
MikeSmith: I made a mistake in my shadow tree review

[10:36:18.0000] <annevk>
MikeSmith: you were right

[10:36:26.0000] <annevk>
MikeSmith: a shadow tree has a root that's a shadow root

[10:36:33.0000] <annevk>
MikeSmith: and that is the thing that has a host

[10:36:42.0000] <annevk>
MikeSmith: sorry

[10:39:35.0000] <Domenic>
annevk: this seems like a perfect case for pushing a fixup for him :)

[10:40:09.0000] <annevk>
Domenic: MikeSmith: I'm happy to fix it tomorrow

[10:42:03.0000] <boogyman>
MikeSmith: are you trying to say that about:legacy-compat should be used?

[10:50:51.0000] <annevk>
MikeSmith++

[11:04:36.0000] <MikeSmith>
annevk+++ 👻

[11:04:47.0000] <MikeSmith>
boogyman: saying that it should not be used

[11:05:22.0000] <MikeSmith>
saying we should help it along to death

[11:11:30.0000] <MikeSmith>
right now the spec says, Here’s what a doctype looks like: <!DOCTYPE html>. It’s just that simple!... Oh, except here’s this other crazy-ass bit that literally only 0.1% of you reading this will even understand the purpose of but that we’re gonna just drop it in here anyway

[11:12:35.0000] <annevk>
Domenic: https://github.com/whatwg/fetch/issues/479 could use your input somewhere today

[11:12:42.0000] <annevk>
(your timezone)

[11:22:50.0000] <jyasskin>
annevk: FWIW, I agree with your preference that `{}` empty the header list and `undefined` pass it through, and with bz's preference for having a general rule that absent braced things are equivalent to `{}`, so I'm no help.

[11:25:49.0000] <annevk>
jyasskin: good times

[11:26:12.0000] <annevk>
jyasskin: maybe we need [AllowOmission]

[12:08:55.0000] <jsbell>
Gecko peeps: https://developer.mozilla.org/en-US/Firefox/Releases/51 and MDN claim Storage API's navigator.storage.estimate() is in 51 but I'm not seeing navigator.storage existing. Patch is https://bugzilla.mozilla.org/show_bug.cgi?id=1267941 - am I missing something?

[12:15:14.0000] <jgraham>
jsbell: Secure context only, perhaps?

[12:15:29.0000] <jsbell>
jgraham: was trying it in console from https site, hrm...

[12:16:13.0000] <jgraham>
jsbell: WFM in nightly at least

[14:10:43.0000] <Domenic>
MikeSmith: botie has gone missing, making it hard for me to deal with zcorpan having gone missing :P


2017-02-08
[16:05:41.0000] <MikeSmith>
Domenic: oof will try restarting

[16:11:25.0000] <MikeSmith>
Domenic: botie is alive again

[16:11:31.0000] <Domenic>
\o/

[16:11:44.0000] <Domenic>
In the meantime I have resorted to GitHub pinging

[16:12:01.0000] <Domenic>
(https://github.com/whatwg/html/pull/2332 is the context for the record)

[16:13:10.0000] <MikeSmith>
"predecoding" really rolls off the tongue

[22:29:52.0000] <MikeSmith>
fucking hell the wiki is doing the “A database query error has occurred. This may indicate a bug in the software.” thing to me again

[22:31:27.0000] <MikeSmith>
in any browser so it’s got to be some misguided IP-blocking thing

[23:01:10.0000] <annevk>
MikeSmith: works here, sigh

[23:04:20.0000] <MikeSmith>
annevk: yeah not sure what triggers it but the only solution just seems to be to wait for it to unblock

[23:21:57.0000] <annevk>
MikeSmith: maybe time to move more stuff to whatwg.org and get that autopublished

[23:22:22.0000] <annevk>
MikeSmith: it's ready to go, just need to coordinate with Ian

[23:58:16.0000] <MikeSmith>
annevk: yeah thanks for getting all that prepared, I think it will work out a lot better

[01:04:36.0000] <annevk>
public-webappsec is slowly sliding towards not having any meaningful discourse either

[01:33:48.0000] <zcorpan>
annevk: http://caniuse.com/#feat=url says URL is supported since Edge 12?

[01:33:58.0000] <zcorpan>
re https://github.com/whatwg/url/issues/137#issuecomment-278275342

[01:34:13.0000] <annevk>
Oh my

[01:35:29.0000] <annevk>
zcorpan: it totally is

[01:35:37.0000] <annevk>
zcorpan: filing a bug now

[01:35:46.0000] <zcorpan>
👍

[01:35:53.0000] <mkwst>
annevk: public-webappsec has plenty of meaningful discourse! For instance, just today we're discussing imaginary timelines for "completion" of documents that will likely never actually be complete. Totally useful.

[01:36:14.0000] <annevk>
mkwst: yes

[01:37:04.0000] <zcorpan>
annevk: should URLSearchParams also have toJSON?

[01:38:34.0000] <annevk>
zcorpan: dunno

[01:40:05.0000] <Ms2ger>
mkwst, that must be the only w3c list where that happens

[01:41:19.0000] <mkwst>
Ms2ger: It seems to only happen when groups' charter expires. We make up dates, folks tell us that our made-up dates aren't made-up enough, and we make up new dates. Very worthwhile.

[01:42:10.0000] <annevk>
mkwst: you might enjoy https://github.com/whatwg/url/issues/222

[01:42:40.0000] <annevk>
(brought to you by Amazon's recommendations system)

[01:45:20.0000] <zcorpan>
can't all standards be done already? how hard can it be?

[02:25:55.0000] <Ms2ger>
> The @W3C Web Cryptography Working Group is closed, it produced Web Cryptography API

[02:26:03.0000] <Ms2ger>
zcorpan, clearly that one is done!

[02:26:30.0000] <zcorpan>
there we go

[02:27:17.0000] <annevk>
Hmm, except for the requirement about secure contexts that is being added?

[02:27:21.0000] <Ms2ger>
Time to set it up on whatwg.org for maintenance

[02:29:05.0000] <jgraham>
Seems like Multimodal Interaction's charter expired, so I guess EmotionML is done!

[02:45:49.0000] <annevk>
mkwst: heh, just occurred to me you could block these base elements in CSP too

[02:46:59.0000] <mkwst>
annevk: If you're happy with me bypassing HTML by abusing the hooks you've so generously helped me add, I can do that. ;)

[02:47:25.0000] <zcorpan>
mkwst: or CSP can block relative URLs :-D

[02:48:32.0000] <mkwst>
The web would be so much more secure (and less usable) if I had my way.

[02:48:41.0000] <mkwst>
Thankfully for everyone, I'm not the decider. :)

[02:49:14.0000] <zcorpan>
(and block http: URLs)

[02:51:30.0000] <mkwst>
Obviously. That's step 1.

[02:52:31.0000] <mkwst>
annevk: Regarding this subresources thing, would you accept a patch that changed the definition of `subresource request` and `non-subresource request` to include/exclude requests targeting nested browsing contexts? That might be simpler than burying the distinction in a substep.

[02:52:55.0000] <annevk>
mkwst: that would require coordination with JakeA and jungkees

[02:53:03.0000] <annevk>
mkwst: I think

[02:53:29.0000] <mkwst>
Ok. There's no rush, right? Coordination doesn't seem like a blocker. :)

[02:53:29.0000] <annevk>
mkwst: I would be happy with refactoring things though or introducing new terminology that helps explain this

[02:53:57.0000] <mkwst>
annevk: Even more terminology? Seems like we already have too much. :)

[02:54:31.0000] <annevk>
mkwst: yeah, if only people stopped adding little exceptions to the rules here and there

[02:55:10.0000] <mkwst>
Exceptions are great! They let me break things I don't like without breaking things I do like!

[02:55:35.0000] <mkwst>
(Also: should I reflow entire paragraphs to 100 characters if I touch them?)

[02:55:54.0000] <annevk>
mkwst: (yeah)

[02:56:13.0000] <annevk>
mkwst: you like <base>? You monster!

[02:57:21.0000] <mkwst>
I like developers not storming my castle with pitchforks.

[02:57:40.0000] <mkwst>
Also, Google Cache uses `<base>`, so killing it seems unlikely.

[02:57:48.0000] <mkwst>
(I looked into it)

[03:01:24.0000] <mkwst>
Hrm. Actually, this "subresource"/"non-subresource" distinction doesn't really match the way I think about the terms. Why are workers non-subresources? Also, why does "potential-navigation-or-subresource request" exist?

[03:01:40.0000] <mkwst>
I assume this is used in service workers, given your pointer to relevant folks.

[03:02:42.0000] <annevk>
mkwst: a worker creates its own environment

[03:02:51.0000] <annevk>
mkwst: the potential thing is for <object> and <embed>

[03:03:22.0000] <annevk>
mkwst: and yeah, service workers uses this to some extent

[03:19:28.0000] <annevk>
tobie: I keep accidentally writing IDL patches against master :/

[03:20:11.0000] <tobie>
annevk: only heycam|away can fix this.

[03:20:34.0000] <annevk>
tobie: okay, did we ping him recently?

[03:27:56.0000] <tobie>
annevk: I check for him here daily, but he seems to be marked as away all the time.

[05:14:49.0000] <MikeSmith>
Can anybody please give me wording for a one-sentence definition of the concept of Service Worker scope?

[05:15:27.0000] <MikeSmith>
“The *scope* of a service worker is the...”

[05:15:56.0000] <annevk>
MikeSmith: "... set of URLs that cause the service worker to run (roughly)"

[05:17:05.0000] <MikeSmith>
nice

[05:17:07.0000] <MikeSmith>
annevk: thanks

[05:17:08.0000] <annevk>
MikeSmith: maybe "set of browsing context/environment URLs", to make it clear it's not subresources that matter

[05:17:48.0000] <MikeSmith>
OK

[05:18:16.0000] <MikeSmith>
but hmm in terms of how it’s declared, it’s a single URL

[05:19:27.0000] <MikeSmith>
“...a URL that defines a set of browsing context/environment URLs...” :/

[05:19:29.0000] <annevk>
MikeSmith: maybe say something like "substring" or "URL pattern"

[05:19:46.0000] <annevk>
MikeSmith: there's a matching algorithm

[05:20:10.0000] <MikeSmith>
OK

[05:21:48.0000] <annevk>
So a problem I have with Fetch is that it's hard to get review

[05:22:13.0000] <annevk>
E.g., https://github.com/whatwg/fetch/pull/476 hasn't had much attention thus far

[05:22:50.0000] <annevk>
/me assigns a bunch of people in the hope that'll work

[05:24:53.0000] <MikeSmith>
hah that’s one way to do it

[05:26:25.0000] <annevk>
mkwst: when are we going to tackle https://github.com/whatwg/url/pull/72 again?

[05:26:37.0000] <annevk>
mkwst: what's the current feeling at Google around public suffix?

[05:26:52.0000] <annevk>
mkwst: it seems WebAuthn(sp?) is using it too now

[05:27:58.0000] <annevk>
MikeSmith: I'd appreciate your input on https://github.com/whatwg/url/pull/228

[05:28:20.0000] <MikeSmith>
/me hurries to respond before annevk assigns him

[05:28:26.0000] <annevk>
MikeSmith: in particular since we moved from "validator" to "checker", should we also not use "valid"?

[05:29:12.0000] <annevk>
MikeSmith: Domenic and zcorpan are suggesting that instead of "URL string" we say "valid URL string"

[05:29:23.0000] <MikeSmith>
yes

[05:29:28.0000] <MikeSmith>
I agree

[05:29:35.0000] <MikeSmith>
I like "valid URL string"

[05:29:57.0000] <MikeSmith>
“valid” by itself does not have the baggage that “validator” does

[05:30:17.0000] <MikeSmith>
but I guess it could also be “conforming URL string”

[05:30:32.0000] <MikeSmith>
or “conformant”

[05:30:58.0000] <MikeSmith>
but still in this context “valid” seems fine to me

[05:31:04.0000] <annevk>
Okay

[05:31:10.0000] <nox>
wellformed vs valid?

[05:32:11.0000] <MikeSmith>
nox: seems like we have no wellformed-ness concept in this case

[05:32:21.0000] <MikeSmith>
hmm

[05:32:31.0000] <nox>
"Parser doesn't fail"

[05:32:46.0000] <nox>
vs "Parser doesn't fail and doesn't emit syntax violations"

[05:33:02.0000] <MikeSmith>
OK yeah

[05:33:19.0000] <annevk>
There's also doesn't fail, doesn't emit syntax violations, and URL makes sense

[05:33:32.0000] <annevk>
E.g., mailto://tralala/

[05:33:42.0000] <nox>
annevk: When does it make no sense but there is no syntax violation?

[05:33:45.0000] <annevk>
I don't know how many types we want to distinguish

[05:33:55.0000] <MikeSmith>
well anyway, zcorpan point is that we are using “valid” everywhere else already, so for consistency we should use “valid” for this too

[05:33:55.0000] <nox>
"mailto://tralala" seems perfectly legit to me.

[05:34:05.0000] <annevk>
nox: it's not a valid mailto URL

[05:34:41.0000] <MikeSmith>
if we want to switch to using something other than “valid” then we should change it all globally

[05:34:47.0000] <annevk>
which is closer to the XML distinction between well-formed and valid

[05:35:04.0000] <annevk>
XML uses well-formed for parses into something, and valid for "makes sense per vocab"

[05:35:13.0000] <annevk>
But I don't really care about being analogous to that

[05:35:18.0000] <MikeSmith>
yeah

[05:37:06.0000] <zcorpan>
well-formed seems like it has mental baggage we probably want to avoid

[05:41:03.0000] <MikeSmith>
annevk: “The scope of a service worker is a single URL against which addresses much match in order to cause the service worker to run.”?

[05:42:12.0000] <annevk>
MikeSmith: s/addresses/environment URLs/?

[05:43:24.0000] <MikeSmith>
“environment URL” is a dfn in the spec?

[05:43:30.0000] <MikeSmith>
/me looks

[05:43:59.0000] <MikeSmith>
hmm no

[05:44:24.0000] <MikeSmith>
this is pulling at threads

[05:44:54.0000] <MikeSmith>
hard to define it conceptually without also needing to mint other definitions it can reference

[05:45:59.0000] <MikeSmith>
annevk: “document addresses”?...

[05:46:03.0000] <annevk>
https://html.spec.whatwg.org/#environment exists

[05:46:20.0000] <annevk>
MikeSmith: "address" is not a thing, what's wrong with URL?

[05:46:26.0000] <annevk>
MikeSmith: "document" doesn't capture workers

[05:46:36.0000] <annevk>
MikeSmith: you could do document/worker URLs maybe

[05:48:50.0000] <MikeSmith>
yeah

[05:48:52.0000] <MikeSmith>
https://html.spec.whatwg.org/#navigating-across-documents:concept-environment-creation-url-2

[05:49:04.0000] <MikeSmith>
“The created environment's active service worker is set in the handle fetch algorithm during the fetch if its creation URL matches a service worker registration.”

[05:49:11.0000] <MikeSmith>
that is not bad wording

[05:49:32.0000] <MikeSmith>
“creation URL” is dfn’ed

[05:50:01.0000] <MikeSmith>
meaning “environment URL”

[05:50:53.0000] <MikeSmith>
anyway I guess I will take a break now and go to the sento and meditate on it there

[07:27:59.0000] <wanderview>
JakeA: I seem to recall you told me in irc that you were ok adding a "serviceworker" ClientType.  Am I remembering that right? https://github.com/w3c/ServiceWorker/issues/1036

[07:28:19.0000] <wanderview>
just looking for a head nod in the issue so I can add it to gecko

[07:28:32.0000] <JakeA>
wanderview: I'll nod

[07:28:37.0000] <wanderview>
thanks

[07:28:55.0000] <wanderview>
JakeA: the reserved client thing is trickier than I thought, btw

[07:29:19.0000] <JakeA>
Which bit?

[07:29:53.0000] <wanderview>
JakeA: getting stuff initialized before the network load just breaks existing assumptions in the code

[07:30:04.0000] <wanderview>
maybe it will be easier in blink

[07:30:30.0000] <wanderview>
I've just had to fix a bunch of stuff in our worker implementation to support doing this

[07:30:33.0000] <wanderview>
which is good I suppose

[08:18:26.0000] <tobie>
TabAtkins: any idea why the following returns 400? https://api.csswg.org/bikeshed/?force=1&url=https://raw.githubusercontent.com/tobie/sensors/fd4501a5c2bb7fb727fc2faff7f2c14f14227b74/index.bs

[08:38:19.0000] <TabAtkins>
Ask plinss? (Over in w3c#css)

[08:38:20.0000] <botie>
will do

[08:38:34.0000] <TabAtkins>
tobie: ^^^

[08:38:45.0000] <tobie>
ty

[10:00:26.0000] <MikeSmith>
reading https://webkit.org/blog/7380/next-generation-3d-graphics-on-the-web/

[11:18:28.0000] <smaug>
annevk: why https://github.com/w3c/web-platform-tests/pull/4702 is right?

[11:18:47.0000] <smaug>
or I guess I should ask why the spec is right

[11:19:04.0000] <smaug>
per spec href getter and toJSON return the same value

[11:19:34.0000] <smaug>
but the test hints that value starts with " and ends with "

[11:23:37.0000] <annevk>
smaug: JSON.stringify adds that

[11:24:51.0000] <smaug>
annevk: ok, why do we have toJSON() then?

[11:25:16.0000] <smaug>
oh, I see

[11:25:20.0000] <smaug>
rather silly setup

[11:25:29.0000] <smaug>
but I guess that is what toJSON is

[11:26:16.0000] <smaug>
but url.toJSON() == url.href

[11:32:49.0000] <annevk>
smaug: yeah

[11:33:51.0000] <smaug>
I was just looking at a patch to implement that in Gecko and patch was clearly wrong since it was trying to json-stringify and return that value

[12:13:02.0000] <tobie>
smaug: that's the behavior toJSONString() had (back when it was the first iteration of Crockford's JS library with the funky "don't be evil" license).


2017-02-09
[19:34:40.0000] <GPHemsley>
annevk: I just noticed https://bugzilla.mozilla.org/show_bug.cgi?id=500713 has been waiting on a needinfo from me since last year re mimesniff. You wanna take it?

[00:01:50.0000] <annevk>
GPHemsley: done

[00:02:02.0000] <annevk>
GPHemsley: that is, I replied and cleared the flag for you

[02:15:11.0000] <MikeSmith>
annevk: if you have a minute to look at http://stackoverflow.com/questions/42131714/cors-access-control-max-age-works-for-same-origin-or-just-same-request-url please post a comment if I got anything wrong, or another answer even

[02:15:45.0000] <MikeSmith>
or if you have a place to cite in the spec for that

[02:16:54.0000] <MikeSmith>
I couldn’t see a specific dfn or other anchor to cite, so other than saying “Read through the spec” don’t know what else to point to

[02:18:26.0000] <zcorpan>
hsivonen: can you take a look at https://github.com/whatwg/html/pull/2319 ?

[02:19:17.0000] <annevk>
MikeSmith: that looks good, but it's slightly more complicated

[02:19:36.0000] <annevk>
MikeSmith: it's per-URL and per-originating-origin

[02:20:18.0000] <annevk>
MikeSmith: https://fetch.spec.whatwg.org/#concept-cache-match is the reference

[02:20:23.0000] <annevk>
MikeSmith: again, roughly

[02:34:35.0000] <MikeSmith>
annevk: OK thanks

[03:34:46.0000] <MikeSmith>
nox: https://github.com/whatwg/url/pull/228#issuecomment-278617035

[03:35:21.0000] <MikeSmith>
nox: and https://github.com/whatwg/url/pull/228#discussion_r100102850

[03:35:45.0000] <nox>
I suggest calling a valid URL a crispy dark baguette,

[03:35:58.0000] <nox>
and a non-conforming one underbaked garbage.

[03:36:10.0000] <MikeSmith>
❤️ like

[03:45:57.0000] <annevk>
heh

[04:36:39.0000] <zcorpan>
BenjaminSchaaf: the EOF thing is tested by /webvtt/webvtt-file-format-parsing/webvtt-file-parsing/support/signature-space.vtt at least, correct?

[07:02:28.0000] <Domenic>
zcorpan_: sorry I caused conflicts with your <menuitem> PR

[07:03:38.0000] <zcorpan_>
Domenic: 😡 😆 should be easy enough to resolve

[07:09:58.0000] <zcorpan_>
but i'll wait for hsivonen's review

[07:10:09.0000] <zcorpan_>
then i can squash and then resolve conflicts

[07:14:56.0000] <annevk>
zcorpan_: FWIW, I have a slight preference for doing reviews based on non-conflicted code

[07:15:29.0000] <annevk>
zcorpan_: chance for missing a typo increases if you edit after

[07:15:41.0000] <zcorpan_>
annevk: yeah, true

[07:16:53.0000] <zcorpan_>
annevk: but also becomes harder to review if i squash and then rebase. i suppose i can rebase without squashing though

[07:17:17.0000] <annevk>
zcorpan_: that's what I tend to do, not ideal either of course

[09:12:02.0000] <annevk>
MikeSmith: is there a canonical explanation for why "validator" is wrong?

[09:12:40.0000] <annevk>
MikeSmith: I haven't really internalized the rationale and that seems to be affecting how I name things

[09:18:22.0000] <MikeSmith>
annevk: It is not canonicaly wrong so there canonical explanation. And in other contexts I think there is nothing wrong with it, but in the specific context of checking HTML documents I quit using it because it triggers assumptions from people about what the checker should do for them.

[09:19:17.0000] <MikeSmith>
in the context of checking HTML documents, people see it as meaning, e.g., they should be able to get a badge that says “Your document is valid HTML5”

[09:20:24.0000] <MikeSmith>
that is, it tends to cause people to see the purpose of checking your HTML to be just to get a binary pass/fail

[09:20:42.0000] <MikeSmith>
instead of the purpose of the checker being to help you find unintended mistakes

[09:21:41.0000] <MikeSmith>
and sometimes people intentionally use markup that causes the checker to emit an error or warning, but they know what they are doing and why

[09:22:24.0000] <MikeSmith>
so that’s the reason I added the message-filtering feature, to let people suppress checker errors and warnings they do not find useful

[09:23:09.0000] <MikeSmith>
and if they are using that feature, it is wrong for the checker to emit a message saying, Your document is valid HTML

[09:23:43.0000] <MikeSmith>
so instead I have the checker say, There were no errors or warnings to report.

[09:24:40.0000] <MikeSmith>
that is, to give control back to user about whether the document has errors as far as they are concerned

[09:25:55.0000] <annevk>
MikeSmith: okay, I guess that's reasonable and way more nuanced than things were in my head

[09:26:06.0000] <MikeSmith>
OK

[09:26:08.0000] <annevk>
MikeSmith: thanks for the help thus far

[09:26:19.0000] <MikeSmith>
thank you for caring about this stuff

[09:26:23.0000] <MikeSmith>
words are important

[09:27:30.0000] <MikeSmith>
oh man branch name annevk/url-ß

[09:27:50.0000] <MikeSmith>
that reminds me of something that zcorpan would do

[09:28:01.0000] <annevk>
MikeSmith: I now want to try it everywhere

[09:28:02.0000] <MikeSmith>
intentionally, to see what it would break

[09:28:09.0000] <MikeSmith>
haha yup

[09:30:58.0000] <jgraham>
Yeah, so expecting unix command line environments to have sane unicode setups is a little optimistic

[09:31:37.0000] <MikeSmith>
I think travis does at least

[09:32:28.0000] <MikeSmith>
but if you mean every wpt user having a sane unicode setup I guess these days if they don’t they are gonna run into lots of other problems

[09:33:12.0000] <MikeSmith>
I have long go lost patience with Python2 on this

[09:33:30.0000] <MikeSmith>
I never run into annoying problems with Python except for this unicode thing

[09:34:55.0000] <MikeSmith>
with python I run into few other problemsーthings just workーand when I do run into problems it always otherwise turns out to be my fault

[09:35:12.0000] <MikeSmith>
but this unicode thing is python’s fault

[09:49:16.0000] <jgraham>
MikeSmith: It seems like this might be much easier to debug if you can try to reproduce locally

[09:54:17.0000] <annevk>
jgraham: let me know if your recommendation is to submit again with an ASCII branch

[09:54:25.0000] <annevk>
name

[09:57:42.0000] <annevk>
tobie: PR preview seems to work for whatwg/url

[09:57:45.0000] <annevk>
tobie: pretty nice

[09:58:38.0000] <tobie>
Yeah. Fixed the auth today.

[10:00:26.0000] <annevk>
tobie: what's the diff between "Diff w/ current ED | Diff w/ base"

[10:01:54.0000] <annevk>
tobie: oh I see master vs branch point

[10:02:28.0000] <tobie>
Happy to reword those.

[10:03:29.0000] <annevk>
tobie: Is there a term for branch point?

[10:04:04.0000] <annevk>
tobie: it would be nice if Preview could point to https://url.spec.whatwg.org/branch-snapshots/annevk/concept-relations/ instead

[10:05:04.0000] <annevk>
tobie: I'd name the first "Diff with Standard" and I'm not quite sure what the use of the second is

[10:05:13.0000] <annevk>
tobie: it seems you'd only ever want to review against master

[10:12:11.0000] <annevk>
tobie: the HTML diffing is amazing

[10:12:46.0000] <tobie>
annevk: it's keyboard navigable, btw. :)

[10:12:50.0000] <annevk>
tobie: though I did find that diff with current ED doesn't seem to rebase

[10:13:13.0000] <annevk>
tobie: so it instead acted as if the PR would revert changes made on master

[10:13:32.0000] <annevk>
(I rebased myself locally now so it's no longer visible there)

[10:14:34.0000] <tobie>
19:12 <annevk> tobie: though I did find that diff with current ED doesn't seem to rebase <-- not sure what you mean.

[10:15:05.0000] <annevk>
tobie: on master I had changed "terminate these steps" to "return"

[10:15:23.0000] <annevk>
tobie: the diff for the PR with current ED suggested that would change back to "terminate these steps"

[10:15:57.0000] <annevk>
tobie: which is not what GitHub would actually do for squash/rebase

[10:16:24.0000] <ajeffrey_>
Another question about origin equality...

[10:16:24.0000] <ajeffrey_>
in step 4 of https://html.spec.whatwg.org/multipage/webappapis.html#dom-document-open, which equality is intended?

[10:16:39.0000] <ajeffrey_>
same-origin-domain?

[10:16:50.0000] <annevk>
tobie: so the diff is different from GitHub's diff, basically

[10:17:03.0000] <annevk>
ajeffrey_: there's an open bug on that by jeisinger (also a PR)

[10:17:13.0000] <tobie>
annevk: oh, no. It's because it got stale I guess.

[10:17:30.0000] <ajeffrey_>
annevk: ah (goes and searches)

[10:17:36.0000] <tobie>
That's the issue with caching. :(

[10:18:35.0000] <tobie>
annevk: need to figure out something.

[10:19:10.0000] <ajeffrey_>
annevk: that would be https://github.com/whatwg/html/pull/2288 then?

[10:19:41.0000] <ajeffrey_>
annevk: thanks!

[10:23:35.0000] <smaug>
https://wicg.github.io/IntersectionObserver/#calculate-intersection-rect-algo step 3 doesn't make sense, right? container is a containing block, but intersection root is a node

[10:23:39.0000] <smaug>
or am I missing something here?

[13:39:49.0000] <Mek>
is there something similar to the "unloading document cleanup steps" but for workers? (context: currently as spec'ed blob URLs are revoked when the document that created them is unloaded. but the spec doesn't say anything about blob URLs created by workers...)

[14:18:06.0000] <ajeffrey_>
And yet another dumb question...

[14:18:07.0000] <ajeffrey_>
https://html.spec.whatwg.org/multipage/browsers.html#dom-history-go says "if delta is zero, the user agent must act as if the location.reload()",

[14:18:07.0000] <ajeffrey_>
does that include the same-origin-domain check at https://html.spec.whatwg.org/multipage/browsers.html#dom-location-reload?

[14:40:24.0000] <ajeffrey_>
annevk: ^

[15:43:55.0000] <tobie>
annevk: You should now get the right diffs in pr-preview + link to the branch when it exists.

[15:45:00.0000] <tobie>
annevk: I still need to fix the z-index of the HTML diff so the UI shows up above the warning on WHATWG specs,

[15:45:11.0000] <tobie>
annevk: like this: https://s3.amazonaws.com/pr-preview/heycam/webidl/3834774..tobie:interface-objs:7dfd134.html

[15:45:43.0000] <tobie>
annevk: (bottom right corner and "j" and "k" keys)


2017-02-10
[20:53:33.0000] <MikeSmith>
for using <link> to register a service worker, if it has <link scope=""...> what does the SW’s scope url get set to? the document’s base URL?

[20:53:40.0000] <MikeSmith>
https://w3c.github.io/ServiceWorker/#ref-for-element-attrdef-link-scope-2

[20:53:46.0000] <MikeSmith>
> If the scope attribute is present, set scopeURL to the result of parsing the scope attribute with the link element’s node document’s document base URL.

[20:54:58.0000] <MikeSmith>
so as far as document conformance, should scope="" be allowed?

[20:55:19.0000] <MikeSmith>
and should it be allowed to contained leading/trailing space?

[20:57:22.0000] <MikeSmith>
in other words should it be a >valid URL< or a >valid URL potentially surrounded by spaces< or a >valid non-empty URL< or a >valid non-empty URL potentially surrounded by spaces<

[21:16:31.0000] <Domenic>
MikeSmith: I would base that decision on precedent of other such URLs, e.g. link href=""

[21:16:48.0000] <Domenic>
Off the top of my head I would guess "valid URL" but I don't know when we allow surrounding spaces in general

[21:17:02.0000] <Domenic>
I don't think the empty string should be excluded

[21:17:54.0000] <MikeSmith>
Domenic: thanks

[23:58:46.0000] <annevk>
https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10552455/ \o/

[23:58:55.0000] <annevk>
First Edge bug I filed that is fixed I think

[23:59:12.0000] <annevk>
And if it's actually fixed, that's a rather big one as it changes quite a few things

[23:59:25.0000] <annevk>
But I wonder if they fixed it in depth or just surface

[00:44:34.0000] <yoav>
annevk: Morning! Was https://github.com/whatwg/fetch/issues/486#issuecomment-278880798 directed at me or at Domenic?

[00:45:49.0000] <annevk>
yoav: nobody in particular

[00:46:24.0000] <yoav>
annevk: Did you refer to type handling in option (1) or option (2)?

[00:46:31.0000] <annevk>
yoav: just got curious about it, since <link rel=preload> is just a high-level API in the end and it needs to map to fetch() somehow

[00:46:55.0000] <annevk>
yoav: I guess 2, since 1 doesn't have a type attribute

[00:47:10.0000] <annevk>
yoav: the parenthesis bit was about both though

[00:47:28.0000] <yoav>
OK, I think I understand your question, I'll answer on the issue

[01:08:12.0000] <annevk>
tobie: wow, you fixed all the nits with PR preview

[01:08:27.0000] <annevk>
tobie: and you improved upon my wording too

[01:08:41.0000] <annevk>
tobie: really cool

[01:15:48.0000] <annevk>
yoav: thanks

[01:16:16.0000] <annevk>
yoav: I guess I maintain that Node.js was right, they should have had their own MIME type

[01:16:30.0000] <annevk>
yoav: but I suspect that will never fly with the JavaScript folks

[01:16:43.0000] <annevk>
yoav: ugh, such a mess

[01:17:24.0000] <yoav>
annevk: I'm in favor of them being their own destination

[01:17:47.0000] <annevk>
yoav: given that MIME type is unlikely to be an option here, agreed

[01:18:23.0000] <yoav>
also spent a few hours last week discussing how modules would actually be loaded in browsers, and I agree with your "ugh"

[01:18:55.0000] <annevk>
heh

[01:19:33.0000] <annevk>
yoav: btw, there is an HTML modules outline online, but it's dated perhaps

[01:20:08.0000] <annevk>
yoav: https://github.com/w3c/webcomponents/blob/gh-pages/proposals/HTML-Imports-and-ES-Modules.md

[01:20:10.0000] <yoav>
pointer? "HTML modules" is ungoogleable

[01:20:15.0000] <yoav>
cool, thanks

[01:56:58.0000] <yoav>
annevk: Unrelated, but is there a notion of "supported mime type" that I can link to from a spec?

[02:00:37.0000] <annevk>
yoav: what does that mean?

[02:03:13.0000] <yoav>
e.g. "image/webp" supported in an image destination context in Chrome, but not in WebKit

[02:03:27.0000] <yoav>
I guess it's slightly related

[02:03:47.0000] <yoav>
I'm trying to fix the preload spec to define what `type` currently does

[02:04:52.0000] <yoav>
annevk: I have no trouble defining what `media` does (which was off as well), but not sure where mime types are defined in the platform

[02:04:55.0000] <annevk>
We don't have overarching terminology for that I think

[02:05:06.0000] <yoav>
hmm

[02:05:07.0000] <annevk>
We do have terminology for media in HTML

[02:05:25.0000] <annevk>
MIME types are somewhat defined in https://mimesniff.spec.whatwg.org/ but they're not at all interoperable

[02:05:39.0000] <annevk>
But specific MIME types varies a lot

[02:05:40.0000] <yoav>
OK, I'll take a look

[02:06:00.0000] <annevk>
E.g., image loading ignores MIME types generally, even X-Content-Type-Options doesn't change that

[02:06:09.0000] <annevk>
The only MIME type image loading looks for is image/svg+xml

[02:06:12.0000] <yoav>
https://mimesniff.spec.whatwg.org/#supported-by-the-user-agent

[02:06:35.0000] <yoav>
I don't care about mime types in processing the response

[02:06:39.0000] <annevk>
Interesting, I guess that does do what you want

[02:06:44.0000] <yoav>
just need them in order to avoid sending the request

[02:06:49.0000] <annevk>
But again, I wonder if that's implemented as-is

[02:06:56.0000] <annevk>
But maybe if we just start using it at some point it will be

[02:07:09.0000] <yoav>
yeah.

[02:07:23.0000] <yoav>
It's way better than what I have now in preload, which is nothing...

[02:07:41.0000] <annevk>
heh

[02:08:06.0000] <annevk>
My main problem with that spec is that we don't have active maintenance, solid testsuite, and commitments from implementers

[02:08:45.0000] <annevk>
But some parts of it do, so we can't just scrap it, it does actually define some underpinnings

[02:09:49.0000] <yoav>
yeah, not ideal

[02:10:14.0000] <AutomatedTester>
morning all, in specs, do we need to link to a definition of what a promise is or is it accepted that everyone knows what it is?

[02:10:37.0000] <AutomatedTester>
I noticed Fetch doesnt link to Promises

[02:11:22.0000] <AutomatedTester>
so not sure what i should do in WebDriver.

[02:13:32.0000] <zcorpan>
tobie: how do i propose changes to https://www.w3.org/2016/10/htmldiff-nav.js ?

[02:15:01.0000] <tobie>
zcorpan: oh boy

[02:15:04.0000] <annevk>
AutomatedTester: it's a problem IDL needs to solve at some point

[02:15:11.0000] <annevk>
AutomatedTester: the current solution is to assume everyone knows

[02:15:37.0000] <AutomatedTester>
annevk: ok, I will go with the current solution then :)

[02:15:47.0000] <tobie>
zcorpan: fork https://gist.github.com/tobie/39c068f2b58422b5d20a5e24941c9f17 and the email dom?

[02:16:13.0000] <tobie>
s/the/then/

[02:16:29.0000] <tobie>
what is it you want to change?

[02:16:38.0000] <zcorpan>
tobie: outline instead of border

[02:17:25.0000] <zcorpan>
tobie: there's also ":focus { border: thin red solid}" in the diff stylesheet inserted for the url standard, which seems unnecessary

[02:18:35.0000] <annevk>
zcorpan: you're making the diff thing even better? Hurray

[02:19:18.0000] <annevk>
tobie: I guess diffing for HTML would be hard to provide, right?

[02:19:30.0000] <tobie>
zcorpan: I have some weird spacing around links in the WebIDL spec too.

[02:20:51.0000] <tobie>
zcorpan: e.g.: https://s3.amazonaws.com/pr-preview/heycam/webidl/3834774..tobie:interface-objs:7dfd134.html#dfn-serialization-behavior

[02:21:30.0000] <tobie>
zcorpan: look how the link underlining bleeds.

[02:21:56.0000] <zcorpan>
tobie: that seems like a problem of the differ, not a styling problem

[02:22:31.0000] <tobie>
zcorpan: :(

[02:22:43.0000] <zcorpan>
tobie: it inserts a newline before </ins> or </del>.

[02:23:29.0000] <zcorpan>
and possibly in general lots of newlines

[02:23:34.0000] <tobie>
zcorpan: oh well.

[02:24:52.0000] <tobie>
zcorpan: I can totally live with this. :)

[02:24:58.0000] <zcorpan>
would be better if it inserted newlines right before ">" to avoid messing with the Infoset

[02:25:15.0000] <zcorpan>
where is the source for the differ?

[02:25:39.0000] <tobie>
zcorpan: I think the underlying lib is an old C program.

[02:26:30.0000] <tobie>
zcorpan: it's gnu diff: https://services.w3.org/htmldiff

[02:26:59.0000] <tobie>
annevk: not sure what you mean by diffing for html

[02:27:26.0000] <annevk>
tobie: HTML Standard

[02:27:48.0000] <tobie>
annevk: oh!

[02:28:04.0000] <annevk>
There's only one, so HTML is totally unambiguous, right?

[02:29:11.0000] <tobie>
annevk: yeah, I could special case granted there's a Web service I can use for the build

[02:29:34.0000] <tobie>
annevk: or I can run the software to build it on the heroku platform

[02:30:00.0000] <annevk>
tobie: we do have that, the real nice thing to offer would be multipage diffing, with links only to the multipage files that changed

[02:30:32.0000] <annevk>
Not sure how many stretch goals we want though

[02:31:15.0000] <annevk>
tobie: having this for the smaller specs is already amazing

[02:31:34.0000] <annevk>
tobie: this is a big complaint from folks we ask to review

[02:31:55.0000] <tobie>
annevk: I built it for reviewing WebIDL PRs

[02:32:12.0000] <tobie>
annevk: there was no way I could be effective reviewing stuff otherwise

[02:32:18.0000] <annevk>
tobie: glad you did

[02:32:51.0000] <tobie>
annevk: wrt to HTML, I don't think it would be too hard to build the multipage thing

[02:34:18.0000] <tobie>
annevk: but I don't want to focus on that just now

[02:55:06.0000] <zcorpan>
annevk: i'm pretty sure HTML standard is too big for htmldiff :-(

[02:56:15.0000] <annevk>
zcorpan: multipage HTML wouldn't be?

[02:56:30.0000] <zcorpan>
ah right. yeah multipage would probably work fine

[02:56:34.0000] <annevk>
Anyway, seems like something to tackle later when there's revived interest

[02:57:06.0000] <annevk>
Meanwhile we can add this feature to other WHATWG standards if nobody has issues with the way it works for the URL Standard

[03:07:07.0000] <smaug>
/me finds the most bizarre spec language

[03:07:20.0000] <smaug>
"Every millisecond, as long as the stop timeout flag is unset, queue a microtask to run these subsubsubsteps: "

[03:08:11.0000] <annevk>
smaug: that looks buggy

[03:08:34.0000] <smaug>
using microtask there is wrong

[03:09:05.0000] <tobie>
annevk: if you can wait a bit before you extend to other specs, it would be amazing.

[03:09:09.0000] <annevk>
Doing something every millisecond also seems suspicious

[03:09:22.0000] <annevk>
tobie: sure, ping me whenever

[03:10:41.0000] <smaug>
https://github.com/whatwg/xhr/issues/112

[03:14:17.0000] <annevk>
smaug: heh, I wonder if I wrote that

[03:15:13.0000] <annevk>
zcorpan: what does w3c-test:mirror do? Make the bot upload the PR to WPT?

[03:15:20.0000] <smaug>
that happens. Looking at the blame in Gecko wondering who has written some odd stuff and realizing hey, it was me :)

[03:15:24.0000] <annevk>
zcorpan: to w3c-test.org?

[03:15:27.0000] <zcorpan>
annevk: yes

[03:15:33.0000] <annevk>
zcorpan: cool

[03:16:43.0000] <annevk>
smaug: turns out I wrote it two years ago

[03:18:11.0000] <zcorpan>
"Every full moon, queue a microtask..."

[03:18:57.0000] <annevk>
smaug: so I think the reason it does it that way is to able to check the current value of the timeout attribute

[03:19:38.0000] <annevk>
smaug: but it's indeed rather silly, having said that, I don't immediately know what a good fix would be, defining timers isn't easy

[03:20:47.0000] <smaug>
why is that using microtasks?

[03:21:02.0000] <smaug>
I doubt browsers use microtask there

[03:21:50.0000] <annevk>
smaug: I suspect browsers proxy the other way, message whenever timeout updates

[03:21:59.0000] <annevk>
smaug: instead of polling it every second

[03:22:37.0000] <smaug>
yeah, fire a timeout which queues a task to cancel the fetch

[03:23:09.0000] <annevk>
smaug: so you have a "process" that runs the timer

[03:23:27.0000] <annevk>
smaug: but then whenever the timeout attribute is set, that influences when the timer is done

[03:23:43.0000] <annevk>
smaug: so those two things need to talk to each other in some way

[03:23:52.0000] <smaug>
if timeout attribute is set to a new value, the previous timer is cancelled and new one created

[03:25:00.0000] <annevk>
smaug: wait so if you start with 2000 and then set timeout to 3000 at 1000, you'd effectively allow the request to go for 4000?

[03:25:13.0000] <annevk>
smaug: I thought the idea was 3000

[03:25:46.0000] <smaug>
when doing reset, you do take into account the time already spent after send

[03:26:02.0000] <annevk>
okay

[03:26:40.0000] <annevk>
I guess I should define something more aligned with that model then, seems reasonable and doable

[03:27:09.0000] <smaug>
how does html spec define setTimeout handling... /me reads

[03:31:37.0000] <smaug>
"wait ... timeout milliseconds"

[03:33:00.0000] <annevk>
Yeah, that's probably reasonable, but we'll need to store how many milliseconds have passed when we reset

[03:33:21.0000] <annevk>
Arguably we should define an abstraction that both standards could use, but maybe not for now

[03:54:53.0000] <zcorpan>
who has an iphone and can test http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4882

[03:57:26.0000] <zcorpan>
(interested in whether the native controls have an airplay button for one but not the other)

[04:02:38.0000] <zcorpan>
hmm maybe it should be x-webkit-wirelessvideoplaybackdisabled or disableremoteplayback these days

[04:09:49.0000] <annevk>
zcorpan: big play buttons

[04:10:12.0000] <zcorpan>
annevk: and when you play?

[04:12:04.0000] <zcorpan>
I see now that disableRemotePlayback has already been discussed in https://github.com/whatwg/html/issues/2293 so what I wanted to get to is not really relevant

[04:12:08.0000] <annevk>
zcorpan: only the first goes through Apple TV display wise

[04:12:21.0000] <zcorpan>
annevk: ok, thanks

[04:12:25.0000] <annevk>
zcorpan: both are happy to play sound over it

[04:12:40.0000] <annevk>
https://irccloud.mozilla.com/file/mm8hohrV/IMG_4367.PNG

[04:12:42.0000] <zcorpan>
intredasting

[04:12:59.0000] <annevk>
As you can see rendering is also somewhat different

[04:13:44.0000] <annevk>
Finally a way to listen to hsivonen in the living room

[04:14:50.0000] <Ms2ger>
That's what any home needs

[04:29:13.0000] <MikeSmith>
😆

[04:45:06.0000] <MikeSmith>
hah maybe Henry Story can lobby Trump to sign an Executive Order requiring all browsers to fully implement <keygen> https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/z_qEpmzzKh8/2hkaJdtsCAAJ

[05:09:43.0000] <zcorpan>
annevk: why is https:example.org without base valid?

[05:12:20.0000] <annevk>
zcorpan: it's not

[05:12:58.0000] <zcorpan>
annevk: then https://url.spec.whatwg.org//branch-snapshots/annevk/validity-example/#example-url-parsing is wrong :-)

[05:13:07.0000] <annevk>
yeah

[05:13:22.0000] <annevk>
zcorpan: only that first one, right?

[05:13:24.0000] <annevk>
fixing

[05:14:15.0000] <zcorpan>
annevk: i think so. but haven't tried to verify that the others match the normative text

[05:30:35.0000] <annevk>
zcorpan: thanks for the additional examples, adding them now

[05:52:44.0000] <zcorpan>
lol annevk/url-ß

[05:53:56.0000] <zcorpan>
at least good to see github seems to handle it

[05:54:24.0000] <annevk>
💩 is next, just need a good PR for it

[06:24:25.0000] <MikeSmith>
annevk: other than XHR and fetch() and the crossorigin attribute, are there any other cases where browsers will use the CORS protocol?

[06:24:39.0000] <annevk>
MikeSmith: @font-face

[06:24:45.0000] <MikeSmith>
ah yeah

[06:24:57.0000] <MikeSmith>
OK, that’s the whole list?

[06:25:00.0000] <MikeSmith>
(currently)

[06:25:21.0000] <annevk>
MikeSmith: <script type=module>, new [Shared]Worker(..., { type:"module" })

[06:25:27.0000] <MikeSmith>
ah

[06:25:41.0000] <MikeSmith>
OK

[06:25:53.0000] <annevk>
MikeSmith: sendBeacon() sometimes, maybe, though not sure if implemented

[06:26:16.0000] <annevk>
MikeSmith: there might be more, I haven't been keeping a list

[06:26:32.0000] <MikeSmith>
thanks

[06:26:48.0000] <MikeSmith>
I may actually try to a list together, at MDN I guess

[06:29:38.0000] <annevk>
jgraham: gsnedders: if as per foolip, we just want it branded "web-platform-tests" we should just start using that everywhere

[06:29:46.0000] <annevk>
jgraham: gsnedders: that will make things easier to find too

[06:30:40.0000] <gsnedders>
annevk: ??

[06:33:37.0000] <jgraham>
annevk: I already use web-platform-tests everywhere I think?

[06:33:50.0000] <jgraham>
annevk: I mean testthewebforward is legacy

[06:33:57.0000] <jgraham>
What else did you have in mind?

[06:34:58.0000] <gsnedders>
I have no idea what per foolip this is, nor any other context for this.

[06:35:10.0000] <annevk>
jgraham: README of https://github.com/w3c/web-platform-tests

[06:42:56.0000] <jgraham>
annevk: https://github.com/w3c/web-platform-tests/pull/4796 r?

[06:44:11.0000] <gsnedders>
is there no way to have keyboard accessible drop-down menus without JS? :(

[06:49:08.0000] <zcorpan>
gsnedders: maybe with :focus-within

[06:50:38.0000] <gsnedders>
zcorpan: yeah, that would work, once that ships

[07:04:01.0000] <zcorpan>
make sure https://bugs.chromium.org/p/chromium/issues/detail?id=617371 has >= 32 stars

[07:06:18.0000] <gsnedders>
because stars definitely mean it'll get done :P

[07:16:03.0000] <annevk>
jgraham: r+

[07:16:14.0000] <annevk>
jgraham: are the CSS tests not integrated these days btw?

[07:17:38.0000] <gsnedders>
annevk: in w-p-t? no

[07:29:17.0000] <gsnedders>
http://stackoverflow.com/questions/21058885/align-bullet-points-to-the-right-instead-of-left is marginally scary

[07:46:52.0000] <Domenic>
annevk: how sure are you that the definitions in https://url.spec.whatwg.org/#valid-url-string match the various validation errors sprinkled throughout the parser?

[07:47:03.0000] <Domenic>
It seems fragile to have two entirely separate ways of defining valid URL string

[07:48:03.0000] <annevk>
Domenic: that's what HTML does

[07:48:14.0000] <annevk>
Domenic: I don't disagree, but I don't really see a better way

[07:48:15.0000] <Domenic>
I see

[07:48:35.0000] <Domenic>
I mean you could literally just define valid URL string to be any string on which running the parser produces no failures or validation errors :)

[07:48:37.0000] <annevk>
Domenic: you both want to make it easy for producers, but you also want to make it easy for consumers to flag errors in input

[07:48:56.0000] <annevk>
Domenic: I don't think that would make people happy

[07:49:00.0000] <Domenic>
Probably not

[07:49:04.0000] <Domenic>
I guess this is susceptible to automated testing

[07:49:21.0000] <Domenic>
Implement some "fuzzer" that generates URL strings based on the URL string rules, and run them through the parser

[07:49:44.0000] <Domenic>
Then try to use some algorithm to depart from the rules and check that they always trigger validation errors or failures

[07:49:57.0000] <annevk>
Yeah, sounds reasonable for a "some day" project

[08:27:46.0000] <jgraham>
annevk: gsnedders promises by the end of the month

[08:29:02.0000] <gsnedders>
/me cries

[08:41:10.0000] <annevk>
😊👍

[09:02:36.0000] <tobie>
annevk: wrt to pr-preview, you mentioned you had a (web?) service to build the HTML spec with. Can it return a multipage version? Is it aware which pages have changed?

[09:03:41.0000] <Domenic>
yes and no

[09:03:59.0000] <Domenic>
also at this moment it doesn't actually do the build, just does the wattsi step

[09:04:01.0000] <Domenic>
but that's fixable

[09:32:05.0000] <annevk>
Domenic: did you look at the PR tool already in the URL Standard?

[09:32:12.0000] <Domenic>
Not realy

[09:32:52.0000] <annevk>
Domenic: please take a look, it basically modifies OP of PRs with links

[09:37:16.0000] <annevk>
Domenic: only enabled on URL as a trial, but if we all like it I want it everywhere (I like it a lot)

[09:38:33.0000] <jyasskin>
annevk: Is that the tool tobie's been using on WebIDL too? (e.g. https://github.com/heycam/webidl/pull/304)

[09:38:57.0000] <annevk>
jyasskin: yeah, with slight WHATWG tweaks

[09:39:06.0000] <jyasskin>
I like it.

[09:39:30.0000] <annevk>
😊

[09:44:48.0000] <tobie>
jyasskin: it's the same tool. Cleaned up and turned into a push button install thanks to GH launching integrations in beta.

[10:15:38.0000] <Domenic>
So does anyone have Edge _Insider_?

[10:27:10.0000] <Domenic>
jyasskin: wait, did you ever end up using record<> in any of your specs?

[10:29:27.0000] <jyasskin>
Domenic: I haven't chagned https://webbluetoothcg.github.io/web-bluetooth/#dictdef-bluetoothlescanfilterinit to use it yet, but the two objects should be records.

[10:29:39.0000] <Domenic>
Ah OK :)

[11:17:27.0000] <annevk>
miketaylr: FWIW, I assume returnValue made a comeback due to WebKit/Chromium

[11:18:02.0000] <miketaylr>
annevk: yeah, fair assumption

[11:18:18.0000] <annevk>
miketaylr: doesn't seem worth it to get three browsers to change as it's rather easy for Firefox to adjust there (and likely better for us even if we haven't heard anything)

[11:19:18.0000] <miketaylr>
i don't doubt that there is bustage out there.

[12:34:38.0000] <AutomatedTester>
whats the best way to describe putting an argument in a Promise declaration. e.g. the function in new Promise(function(res, rej) {....})

[12:36:10.0000] <TabAtkins>
AutomatedTester: A callback argument?

[12:36:22.0000] <TabAtkins>
(Not sure what context you're asking from, so I'm unsure what sort of suggestion to give.)

[12:37:49.0000] <AutomatedTester>
TabAtkins: I am trying to spec out https://gist.github.com/AutomatedTester/1405a0036ccb13dc14504a709756c184 essentially

[12:38:17.0000] <AutomatedTester>
TabAtkins: I am not sure if I need to describe the callback

[12:38:23.0000] <AutomatedTester>
or if its just a given..

[12:38:40.0000] <TabAtkins>
Depends on your audience, honestly.

[12:38:52.0000] <AutomatedTester>
browser vendors

[12:39:06.0000] <AutomatedTester>
its for part of webdriver

[12:39:28.0000] <TabAtkins>
Browser vendors don't need to have the basic working of Promises explained, so you can omit that.

[12:39:38.0000] <AutomatedTester>
awesome

[12:39:43.0000] <TabAtkins>
(Note that your code doesn't actually take onSuccess and onFailure as arguments.)

[12:40:17.0000] <AutomatedTester>
I realised it wasnt right but the "gist" of the gist is the right direction

[12:40:22.0000] <AutomatedTester>
if that makes any sense :D

[12:40:29.0000] <TabAtkins>
k ^_^

[12:40:48.0000] <AutomatedTester>
thanks for the help, I appreciate it

[12:51:40.0000] <Domenic>
AutomatedTester: hopefully no new APIs are being specified with callback arguments instead of promise-returning, even in webdriver...

[12:52:07.0000] <AutomatedTester>
Domenic: this is not external facing

[12:52:26.0000] <AutomatedTester>
its making sure that our executeScript API can handle promises properly

[12:52:27.0000] <Domenic>
I guess I am confused why it needs a spec then

[12:53:04.0000] <AutomatedTester>
Domenic: part of it relied on a user passing in a callback, we are now moving it to allow people to pass in a promise

[12:54:28.0000] <Domenic>
Hmm OK, I don't quite understand, but am happy to trust you with the details :)

[13:30:18.0000] <MassDebates>
So uh

[13:30:26.0000] <MassDebates>
Am I supposed to ask here for an account?

[13:32:34.0000] <Domenic>
MassDebates: for the wiki? Sure, what do you want to edit?

[13:37:15.0000] <MassDebates>
I'm not entirely sure. After checking out the history of the two orgs I want to contribute, but I only want to contribute in ways that I best can. I don't think I can provide much help in regards to directly writing spec, but I'm a darned good copy editor. I have a big passion for CSS and I enjoy playing with advanced CSS. I don't see a listing for

[13:37:15.0000] <MassDebates>
 CSS specifically in the specifications developed aside from HTML.

[13:38:31.0000] <kbrosnan>
css largely goes through the w3c

[13:38:33.0000] <MassDebates>
I enjoy doing demos and test cases that involve HTML and CSS, and I'm pretty good with HTML, too.

[13:39:29.0000] <MassDebates>
That being said, I think that I can contribute to HTML and -

[13:40:29.0000] <MassDebates>
kbrosnan:  Yes, I'm aware, which is why I mentioned that I checked out the spec listings to see. When I saw that you guys didn't have it there, I realized that I may not be AS helpful, but I think I still can provide something of value to the org

[13:43:03.0000] <MassDebates>
That being said, I think that I can contribute to HTML and the wiki in general, but I might be mistaken. I don't really need access to an account or anything if there's sensitive material. Just want to help by doing what I enjoy

[13:49:53.0000] <kbrosnan>
i'm not a gatekeeper here. just happen to work on a browser and know several of the active people in this channel

[13:51:20.0000] <MassDebates>
I understand. I'm not treating this like an interview. I want you to know the context of why I came here.

[13:51:46.0000] <MassDebates>
I guess I'm trying to ask what you think I'll be able to help out with.

[13:52:53.0000] <TabAtkins>
MassDebates: Copy-editing of our CSS specs <https://github.com/w3c/csswg-drafts/> in the form of PRs is always appreciated.

[13:53:13.0000] <TabAtkins>
I merge wording fixes as fast as I see them, usually.

[13:55:58.0000] <MassDebates>
Looking now

[13:56:14.0000] <MassDebates>
Okay, sounds good.

[13:56:23.0000] <MassDebates>
Thanks!

[14:16:54.0000] <astearns>
MassDebates: also https://github.com/w3c/fxtf-drafts

[14:19:17.0000] <MassDebates>
Oooh

[14:19:25.0000] <MassDebates>
Now that's much more interesting

[14:19:43.0000] <MassDebates>
I will do both though.

[15:16:12.0000] <Domenic>
MassDebates: sorry I switched away from this tab. Happy to help you get a wiki account, drop me a private message with your email address you want to use. Also feel free to submit PRs to specs; we try to label bugs as such e.g. https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+bug%22+user%3Awhatwg


2017-02-11
[16:06:17.0000] <jyasskin>
AutomatedTester: Are you familiar with https://www.w3.org/2001/tag/doc/promises-guide/? It has terminology for manipulating promises.

[01:06:13.0000] <MikeSmith>
annevk: now wondering under what conditions browsers send Origin: null. I realize for script running from file: origins, and data:, and for <iframe sandbox="allow-same-origin">. Are there other cases?

[01:06:48.0000] <annevk>
MikeSmith: redirects across origins

[01:07:19.0000] <annevk>
MikeSmith: if iframe has allow-same-origin it will not be null

[01:08:22.0000] <annevk>
MikeSmith: effectively when a request was from an opague origin or more than one origin was involved in the request due to redirects

[01:32:11.0000] <MikeSmith>
annevk: oh I guess I meant without allow-same-origin

[01:34:18.0000] <MikeSmith>
so about redirects across origins, to be clear, you mean if a request to, e.g., http://example.com/api redirects to http://api.example.com then the Origin gets set to null?

[01:37:16.0000] <annevk>
MikeSmith: if the request to example.com/api was a cross-origin request to begin with

[01:37:37.0000] <MikeSmith>
yeah that’s the context I meant

[01:37:59.0000] <annevk>
then yes

[01:38:27.0000] <MikeSmith>
oK

[01:38:28.0000] <MikeSmith>
thanks

[01:38:29.0000] <annevk>
MikeSmith: what happens is that request's origin gets set to a new opaque origin, and when that is serialized you get `null`

[01:38:37.0000] <MikeSmith>
yup

[01:39:38.0000] <MikeSmith>
I knew about the opaque origin gets serialized null thing, just didn’t realize it happened for redirects in that context

[01:39:46.0000] <MikeSmith>
this is in the Fetch spec?

[01:43:19.0000] <annevk>
MikeSmith: https://fetch.spec.whatwg.org/#http-redirect-fetch step 10

[01:46:14.0000] <MikeSmith>
annevk: arigatou

[01:47:53.0000] <annevk>
MikeSmith: curious spelling

[01:48:34.0000] <annevk>
hipster Japanese

[01:48:40.0000] <MikeSmith>
hah

[01:49:55.0000] <MikeSmith>
annevk: that’s a actually pretty-traditional way to romanize it. It’s the most literal transliteration of the actual phonetics

[01:50:04.0000] <MikeSmith>
a-ri-ga-to-u

[01:50:24.0000] <MikeSmith>
あ-り-が-と-う

[01:54:30.0000] <annevk>
Oh

[06:37:28.0000] <Domenic>
in this context "ou" is pronounced as a "long o". I enjoy the romanization where they go the extra step for you and use ō, so "arigatō"

[14:10:20.0000] <GPHemsley>
annevk: danke


2017-02-12
[22:10:20.0000] <annevk>
GPHemsley: graag gedaan

[23:47:37.0000] <annevk>
So my theory with all the weird IDNA problems we're seeing is that implementers have some checks reversed

[23:47:54.0000] <annevk>
They only do full ToASCII if there are no ASCII code points

[23:48:11.0000] <annevk>
Otherwise they don't care and just pass it along without much validation

[23:48:38.0000] <annevk>
Whereas UTS 46 does apply a bunch of processing even to plain ASCII input

[23:48:59.0000] <annevk>
I guess I should write some more tests and then raise this somehow

[01:26:04.0000] <annevk>
(If whatwg.org goes down, please ping me.)

[06:49:30.0000] <kiwi_12705>
DOM says "Event listeners key off the event’s `type` attribute value"

[06:49:33.0000] <kiwi_12705>
What does it mean?

[07:40:29.0000] <annevk>
Hmm, maybe we should indicate on the IRC page that it can take a while before you get a reply

[08:01:37.0000] <annevk>
(done)

[08:28:25.0000] <annevk>
JakeA: can you figure out why https://bugs.chromium.org/p/chromium/issues/detail?id=365070 never went anywhere?

[08:28:41.0000] <annevk>
JakeA: is it something Chrome just doesn't want to do, or did the bug never got the attention from the right people?

[08:29:36.0000] <annevk>
(I emailed someone at Mozilla to get an equivalent answer for https://bugzilla.mozilla.org/show_bug.cgi?id=998590.)

[08:30:22.0000] <JakeA>
annevk: I haven't figured that it yet. Trying to work out if it breaks existing sites.

[08:30:29.0000] <JakeA>
that out*

[08:31:25.0000] <annevk>
JakeA: not all existing sites use <h1-6> correctly either, so I doubt the outline is always useful

[08:32:18.0000] <JakeA>
annevk: yeah, it comes down to "does it make things significantly worse vs better"

[08:32:37.0000] <JakeA>
Not sure how to test that other than manually

[08:32:41.0000] <annevk>
JakeA: it's still interesting though why it was never picked up to begin with

[08:33:06.0000] <annevk>
JakeA: since at some point in the past <section> wasn't a thing and wouldn't really be able to impact sites significantly

[08:33:19.0000] <annevk>
JakeA: maybe there's some hidden opposition to the feature?

[08:33:33.0000] <JakeA>
annevk: it might slow things down, but we could have restricted the cost to AT users

[08:33:58.0000] <annevk>
I guess keeping it all work dynamically adds some cost

[08:34:09.0000] <JakeA>
annevk: I'm guess it was just low priority because it's a11y + new

[08:34:11.0000] <annevk>
But it can't be that much

[08:34:15.0000] <JakeA>
Agreed

[09:19:02.0000] <boogyman>
JakeA: where should I report a media playback issue for Chrome Canary?

[09:40:40.0000] <JakeA>
boogyman: crbug.com

[09:44:34.0000] <boogyman>
oh, duh. cheers


2017-02-13
[16:34:21.0000] <xfq>
wiki.whatwg.org seems to be down

[16:34:25.0000] <xfq>
"A database query error has occurred. This may indicate a bug in the software."

[20:35:58.0000] <foolip>
annevk, jgraham, gsnedders, I tend to use "web-platform-test", although as the first part of a title it looks a bit odd. I did it anyway though.

[20:49:35.0000] <MikeSmith>
foolip: I noticed that’s what jgraham normalized it into a recent change the wpt README.md

[20:50:21.0000] <MikeSmith>
oh but you do mean web-platform-tests, right?

[22:04:53.0000] <MikeSmith>
in WebIDL blocks, do we make any attempt to put the members in any kind of order?

[22:05:07.0000] <MikeSmith>
or is it just, whatever

[22:05:49.0000] <MikeSmith>
e.g., looking at https://html.spec.whatwg.org/multipage/semantics.html#htmllinkelement

[22:05:58.0000] <MikeSmith>
is there any discernable order there?

[22:06:54.0000] <MikeSmith>
the members are obviously not alphabetically sorted, but are they sorted in some other logical way?

[22:07:04.0000] <MikeSmith>
do we not care?

[22:08:06.0000] <MikeSmith>
in the case of the HTMLLinkElement interface, is there any good reason *not* to just re-sort them alphabetically?

[22:09:24.0000] <MikeSmith>
it otherwise seems suboptimal to make N different readers have to hunt through that looking for whatever specific member they might have come looking for

[22:15:30.0000] <Domenic>
MikeSmith: the order impacts their web-exposed iteration order

[22:15:36.0000] <Domenic>
So it's largely the historical order they were added in

[22:15:44.0000] <MikeSmith>
aha

[22:15:46.0000] <MikeSmith>
OK

[22:15:53.0000] <Domenic>
We know of at least one case where web content depends on this, for some canvas stuff

[22:15:58.0000] <MikeSmith>
wow

[22:16:17.0000] <MikeSmith>
that seems .. fragile

[22:16:27.0000] <Domenic>
Because of minified code contests that do something like var x = Object.keys(CanvasContext2D.prototype) and then they can use x[5] instead of typing out a "long" method name

[22:16:36.0000] <Domenic>
yeah it's not great...

[22:16:38.0000] <MikeSmith>
ah geez

[22:17:36.0000] <Domenic>
MikeSmith: excited to look at your PR in more depth tomorrow, the one thing I'm worried about is whether the reorganization is consistent with other elements. E.g. in general we keep everything about an attribute together instead of separating authoring and implementer stuff. We'll see though.

[22:18:09.0000] <MikeSmith>
yeah I think that link section may be a very special case

[22:18:18.0000] <annevk>
bz had some ideas on randomizing order of IDL blocks except where it mattered

[22:18:37.0000] <annevk>
Doubt that will ever go anywhere

[22:19:16.0000] <annevk>
This is also a problem with partial interfaces and the unclear order in which they are supplied

[22:19:47.0000] <MikeSmith>
I personally find the current organization of that link section to be sorta random and very hard to read through. It jumps all over the place. I think that’s partly because in adding things over the last year or so, we’ve kinda just dumped stuff in there wherever

[22:20:49.0000] <MikeSmith>
annevk: yeah when I take members from a partial interface in another spec, and I add them to the element interface in the HTML spec, how to do I know where to add them?

[22:21:00.0000] <MikeSmith>
just tack them on the end?

[22:21:18.0000] <annevk>
Sure, but what about multiple partials

[22:21:33.0000] <MikeSmith>
ah

[22:21:49.0000] <annevk>
Nobody has been looking towards solving this

[22:22:47.0000] <annevk>
Along with element attributes and maybe some operations in JavaScript it's one of the few holes we have with regards to ordering

[22:23:51.0000] <MikeSmith>
kinda surprised it hasn’t caused more problems

[22:24:05.0000] <MikeSmith>
anyway I guess for the IDL for something that has been implemented but is not in the HTML spec yet, we may need to look at where it was added in the IDL code for the engine(s) that implemented it?

[22:24:25.0000] <MikeSmith>
I mean especially if they’ve shipped it

[22:25:33.0000] <annevk>
MikeSmith: depends, but that never hurts

[22:25:40.0000] <MikeSmith>
OK

[22:26:38.0000] <MikeSmith>
Domenic: annevk as far as “in general we keep everything about an attribute together instead of separating authoring and implementer stuff” I am starting to wonder if we really want to do it that way because it’s best or instead just because that’s the way it’s always been

[22:27:21.0000] <Domenic>
Yeah, maybe, but I'd rather change all that at once than piecemeal, if we were to do that..

[22:27:26.0000] <MikeSmith>
I think think especially that some of this <span no-dev> stuff in the middle of paragraphs is kind of a red flag

[22:27:51.0000] <MikeSmith>
well I am happy to start going through and looking at it in other places too

[22:28:16.0000] <MikeSmith>
but anyway I think we do have evidence that it confuses implementors sometimes

[22:28:52.0000] <MikeSmith>
IMHO where there are UA requirements in the spec we should be making it as easy as possible for implementors to see them

[22:29:30.0000] <annevk>
MikeSmith: changing it into "Writing" and "Processing" sections would work for me

[22:29:57.0000] <MikeSmith>
yeah that would be a lot of work if we did it globally

[22:30:01.0000] <annevk>
MikeSmith: but we should indeed do it in some principled way with a plan, since it's a bit too much do it piecemeal

[22:30:16.0000] <MikeSmith>
yeah I guess we can start by looking at this link section as a test case

[22:30:49.0000] <annevk>
MikeSmith: or we could see about identifying the distinction more clearly somehow

[22:30:57.0000] <MikeSmith>
yeah

[22:31:43.0000] <MikeSmith>
btw in this case I didn’t patch the link section just because I didn’t like the current aesthetics but instead because I was looking at how to integrate the rel=serviceworker stuff into it

[22:32:46.0000] <MikeSmith>
scope, workertype, usecache

[22:33:21.0000] <MikeSmith>
and once I started trying to add that serviceworker stuff, I found myself .. getting a bit lost/distracted by the current structure

[22:35:31.0000] <Domenic>
wow they added three attributes??

[22:35:33.0000] <MikeSmith>
annevk: I think one relatively easy way for identifying the distinction more clearly is put specific (sub)headings on the UA-requirements stuff

[22:35:43.0000] <MikeSmith>
Domenic: yeah, seems so

[22:36:22.0000] <Domenic>
I see they went with workertype instead of type, that's annoying

[22:37:22.0000] <Domenic>
Wait what

[22:37:23.0000] <Domenic>
"If useCache is not a valid boolean value, queue a task to fire an event named error at the link element, and abort these steps."

[22:37:28.0000] <MikeSmith>
annevk: which is what I did in that link patch (short of adding separate "Writing" and "Processing" sections; because the distinction can be made implicitly somewhat just be adding specific subheadings like that)

[22:37:34.0000] <MikeSmith>
Domenic: yeah

[22:37:36.0000] <Domenic>
So you have to do usecache="true" or usecache="false"???!?

[22:37:37.0000] <MikeSmith>
saw that too

[22:37:39.0000] <Domenic>
Filing bug now...

[22:37:50.0000] <MikeSmith>
yeah I hope that was not the intent

[22:38:05.0000] <MikeSmith>
thanks for saving me the time of filing a bug for that myself :)

[22:38:34.0000] <MikeSmith>
that sentence should just be dropped

[22:38:46.0000] <MikeSmith>
and the one above it should be changed

[22:39:38.0000] <MikeSmith>
just to say, "If the usecache attribute is present, set the use cache to true." Period.

[22:39:41.0000] <MikeSmith>
I think

[22:39:49.0000] <MikeSmith>
because it is false by default iirc

[22:40:19.0000] <MikeSmith>
but regardless the wording should just be about the presence of the attribute

[22:40:40.0000] <Domenic>
https://github.com/w3c/ServiceWorker/issues/1069

[22:40:46.0000] <Domenic>
ok, going to bed now...

[22:40:48.0000] <MikeSmith>
/me looks

[22:41:15.0000] <MikeSmith>
btw, the SW spec also treats "classic" and "module" case-sensitively

[22:41:21.0000] <MikeSmith>
nn

[22:42:25.0000] <annevk>
case-sensitive seems fine

[22:42:26.0000] <Domenic>
Yes, they seem to be following the precedent annevk insists on setting in https://github.com/whatwg/html/issues/1665 but nobody implements...

[22:42:33.0000] <MikeSmith>
haha

[22:42:33.0000] <Domenic>
Really not a fan

[22:42:54.0000] <annevk>
If we make IDL ASCII case-insensitive count me on board

[22:42:54.0000] <MikeSmith>
I yeah didn’t mean to re-open that can o worms

[22:43:15.0000] <annevk>
At some point you want to explain element attributes through IDL enums too

[22:43:32.0000] <annevk>
And their value space mismatch is just bad

[22:43:46.0000] <Domenic>
/me closes the tab and backs away...

[22:43:59.0000] <MikeSmith>
😆

[23:34:04.0000] <foolip>
MikeSmith: yes, I meant web-platform-tests with the s

[01:42:42.0000] <annevk>
How can you enforce a max-width but allow it to go wider for really wide content?

[01:43:17.0000] <annevk>
Something like max-width:max(60em, min-content)

[01:54:51.0000] <zcorpan_>
annevk: would be nice to loop in someone from chromium and edge before merging NonTransitional, no?

[01:55:29.0000] <annevk>
zcorpan_: yeah I suppose that would be better

[01:55:42.0000] <annevk>
zcorpan_: I don't really know who to copy from Edge

[01:56:14.0000] <annevk>
zcorpan_: I guess for Chrome jungshik + sleevi?

[01:58:57.0000] <zcorpan_>
annevk: yeah i guess

[02:06:07.0000] <annevk>
zcorpan_: done

[02:06:14.0000] <annevk>
zcorpan_: I doubt we'll get a reply from Edge, but who knows

[02:07:18.0000] <zcorpan_>
👍

[02:08:01.0000] <annevk>
I'll file bugs on them though

[02:08:41.0000] <annevk>
Probably all of them, since everyone has bugs

[03:40:53.0000] <zcorpan_>
hsivonen or MikeSmith do you want to reply to the DTD email on the mailing list?

[03:56:17.0000] <Ms2ger>
/me would tend to ignore

[04:00:12.0000] <annevk>
zcorpan_: we did discuss it at some point, I was wondering whether it was actually an issue

[04:00:21.0000] <annevk>
zcorpan_: I don't recall if we reached a conclusion though

[04:01:05.0000] <zcorpan_>
annevk: i think we concluded that it's an issue in DTD but not in RELAX NG

[04:09:58.0000] <annevk>
Ms2ger: can you synchronously find out whether a blob URL is revoked?

[04:10:06.0000] <annevk>
Ms2ger: through XHR maybe?

[04:10:15.0000] <annevk>
Ms2ger: or also less "deprecated" APIs?

[04:10:45.0000] <Ms2ger>
I don't know off-hand

[04:11:26.0000] <annevk>
I kinda want to know, but I'm not sure whether I want to write tests since then I get to own it I guess

[04:22:42.0000] <MikeSmith>
zcorpan_: I can reply once I’ve actually read it, which I haven’t yet

[05:21:29.0000] <annevk>
jgraham: ping for https://github.com/w3c/wptserve/issues/112

[05:24:16.0000] <jgraham>
annevk: Noted. Not sure if it will happen today (patches accepted though)

[05:25:12.0000] <annevk>
jgraham: I would write a patch, but there is no contributor documentation making it clear how to approach it

[05:26:06.0000] <annevk>
jgraham: I guess I also don't really know what request_handler actually returns or how to find out, so...

[05:43:59.0000] <annevk>
zcorpan_: perhaps you should ping hsivonen explicitly in https://github.com/whatwg/html/pull/2319 or did you already use email or some such?

[05:44:20.0000] <annevk>
zcorpan_: or does assign to review create a sufficient ping in GitHub already? I don't actually know

[05:45:33.0000] <zcorpan_>
i had pinged him here in irc. but i can fire off an email

[05:47:28.0000] <zcorpan_>
(done)

[05:48:56.0000] <zcorpan_>
/me learns http://www.unicode.org/reports/tr46/#ToUnicode has examples where conversion succeeds but validation fails

[05:50:11.0000] <annevk>
zcorpan_: ToUnicode always succeeds basically

[05:51:05.0000] <zcorpan_>
meant to link to http://www.unicode.org/reports/tr46/#Table_Example_Processing

[05:53:23.0000] <zcorpan_>
but yeah. i found it noteworthy since i didn't see anyone complain about ToUnicode in issue 118

[05:54:34.0000] <annevk>
ToUnicode is actually not currently exposed anywhere

[05:54:44.0000] <annevk>
Oh actually, no, I guess HTML uses it

[05:55:26.0000] <annevk>
But maybe not the parser override, just the conversion algorithm

[05:58:45.0000] <zcorpan_>
annevk: does anything set the Unicode flag for the host parser?

[05:59:08.0000] <annevk>
zcorpan_: domainToUnicode() used to be a thing, but not anymore

[05:59:22.0000] <annevk>
zcorpan_: but also, that could have been defined as host parsing followed by "domain to Unicode"

[05:59:37.0000] <annevk>
zcorpan_: so I think I'm going to remove it and encourage that pattern instead

[05:59:55.0000] <zcorpan_>
annevk: sounds reasonable

[07:27:20.0000] <annevk>
I kinda want to replace e-mail with email

[07:31:03.0000] <Ms2ger>
Not in Dutch, I hope :)

[07:33:35.0000] <annevk>
Ms2ger: my written Dutch is not great and I have no ambitions there I think

[08:36:31.0000] <MikeSmith>
I read the message about the DTD on the mailing list but I don’t really know what I’d say in reply except, If people who are using tools that consume DTDs find it useful to have an HTML DTD, then great

[08:36:39.0000] <MikeSmith>
there are lots of possible formalisms

[08:37:47.0000] <MikeSmith>
I think the devs working on the MDN backend have some kind of JSON representation they are using to define HTML element content models and attribute

[08:38:44.0000] <MikeSmith>
as far as DTDs I guess psgml still exists for Emacs and uses DTDs so if there’s a DTD people can use with that, great

[08:39:14.0000] <MikeSmith>
psgml is a pretty nice way to get element and attribute completion when editing HTML docs in emacs

[08:58:11.0000] <gsnedders>
MikeSmith: I had the impression that they claimed to have represented everything in the DTD, which I thought hsivonen had said was impossible?

[08:58:59.0000] <MikeSmith>
yeah it is impossible of course

[08:59:32.0000] <MikeSmith>
certainly can’t represent data-* attributes

[08:59:47.0000] <MikeSmith>
nor custom elements

[09:00:26.0000] <MikeSmith>
nor handle ARIA role checking when the role value contains multiple tokens

[09:00:50.0000] <MikeSmith>
nor do much of any microsyntax/datatype checking of attribute values at all

[09:00:54.0000] <MikeSmith>
etc etc

[09:03:29.0000] <MikeSmith>
that said if the goal is not validation but instead just having a DTD that can be plugged into editing tools like psgml to enable context-sensitive element and attribute completion/editing, then it may enought of that right to be very useful

[09:03:58.0000] <MikeSmith>
*may get enough of that right

[09:05:05.0000] <gsnedders>
http://sgmljs.net/blog/blog1701.html touches on using it to parse

[10:31:08.0000] <annevk>
I liked the argument that DTDs were more concise

[10:32:10.0000] <annevk>
Only true of course if you define that language first and need it elsewhere, which is a little less clear

[14:10:01.0000] <AutomatedTester>
jyasskin: hey, thanks for the link to promises guide

[14:10:13.0000] <jyasskin>
AutomatedTester: np :)

[14:10:53.0000] <AutomatedTester>
jyasskin: are we supposed to reference that guide for certain things

[14:10:59.0000] <AutomatedTester>
e.g. promise-calling

[14:12:54.0000] <jyasskin>
AutomatedTester: If you use one of the terms defined there, you should cross-reference to it (using, e.g. [=resolve=] in Bikeshed). I haven't found [=promise-calling=] to be all that useful, but I use [=a new promise=] all the time. (cc Domenic)

[14:13:57.0000] <AutomatedTester>
jyasskin: oh, annevk told me new promise was a webidl issue

[14:14:11.0000] <AutomatedTester>
fetch and url dont have new promise linked

[14:14:37.0000] <jyasskin>
Most of the content in promises-guide should move to WebIDL, but it hasn't yet.

[14:15:13.0000] <AutomatedTester>
ok

[14:15:45.0000] <jyasskin>
I think fetch and url are formally incorrect by not linking to promises-guide, but nobody's going to implement the wrong thing as a result, so it doesn't really matter.

[14:16:02.0000] <AutomatedTester>
thats pretty much what annevk said :D

[14:16:09.0000] <jyasskin>
Hah :)

[14:16:57.0000] <jyasskin>
The nice thing about using [==] is that when the terms move, you'll just be able to rebuild your spec, and it'll automatically update the link targets.

[14:17:36.0000] <AutomatedTester>
whats it in respec?

[14:18:10.0000] <AutomatedTester>
/me can't find a link in https://github.com/tobie/specref/blob/master/refs/w3c.json so guessing I should add it...

[14:18:22.0000] <jyasskin>
Respec didn't do cross-links when I was using it. It might have been added since then, but I don't know the syntax if so.

[14:18:24.0000] <TabAtkins>
AutomatedTester: Dont' worry about it, because you shouldn't be using ReSpec. ^_^

[14:18:34.0000] <jyasskin>
Cross-links are why I switched to Bikeshed.

[14:18:38.0000] <TabAtkins>
(But also, yes, ReSpec does not have cross-spec linking.)

[14:18:39.0000] <jyasskin>
Now Tab, you're biased. ;)

[14:18:52.0000] <AutomatedTester>
TabAtkins: I use what I have...

[14:19:06.0000] <AutomatedTester>
not going to bikeshed...oh

[14:19:55.0000] <jyasskin>
AutomatedTester: https://github.com/tobie/specref/blob/cf450e0b903b90e9f903aedcb6b02ed3e104447c/refs/biblio.json#L2856

[14:20:14.0000] <AutomatedTester>
aha

[14:20:16.0000] <AutomatedTester>
awesome

[14:20:18.0000] <AutomatedTester>
<3

[14:21:30.0000] <tobie>
AutomatedTester, jyasskin: http://www.specref.org/?q=promise

[14:22:02.0000] <AutomatedTester>
tobie: I didnt realise that site existed... I always search the json file

[14:22:07.0000] <AutomatedTester>
*facepalm*

[14:22:26.0000] <AutomatedTester>
thanks tobie

[14:22:35.0000] <tobie>
There's also search from within the respec top right menu.

[14:23:44.0000] <AutomatedTester>
TIL


2017-02-14
[16:20:51.0000] <jyasskin>
TabAtkins: Any idea what happened to <xmp> in Bikeshed? https://github.com/tabatkins/bikeshed/pull/933

[16:21:27.0000] <TabAtkins>
I must have accidentally stopped looking at them. Thanks for the reminder, I'll go see what's up.

[16:22:00.0000] <jyasskin>
Thanks!

[16:39:09.0000] <TabAtkins>
jyasskin: Yup, found the offending selector that only mentions <pre> and not <xmp>. Pushed fix, testing against your PR's test now.

[16:39:22.0000] <jyasskin>
\o/

[16:39:31.0000] <TabAtkins>
And looks good.

[17:23:45.0000] <MikeSmith>
TabAtkins: I’m running Bikeshed on source for the Service Workers spec and noticing that formatting of Notes is getting inadvertently changed

[17:23:55.0000] <MikeSmith>
<p class="note" role="note"><span>Note:</span>

[17:24:05.0000] <MikeSmith>
<p class="note" role="note">Note:

[17:24:40.0000] <MikeSmith>
the span around the word “Note:” getting dropped

[17:24:54.0000] <TabAtkins>
That implies you're on an older version

[17:25:19.0000] <TabAtkins>
Pull latest from github

[17:30:00.0000] <MikeSmith>
hai

[17:30:04.0000] <MikeSmith>
/me does that now

[17:30:32.0000] <MikeSmith>
WARNING: Couldn't check the datafile version. Bikeshed may be unstable.

[17:30:33.0000] <MikeSmith>
[Errno 2] No such file or directory: u'/usr/local/lib/python2.7/site-packages/bikeshed/spec-data/readonly/version.txt'

[17:30:38.0000] <MikeSmith>
(but still running)

[17:31:00.0000] <MikeSmith>
(running bikeshed update)

[17:42:37.0000] <MikeSmith>
TabAtkins: thanks! got it working now

[20:03:16.0000] <rniwa>
Domenic: yt?

[20:03:18.0000] <rniwa>
annevk: yt?

[20:03:28.0000] <rniwa>
MikeSmith: yt?

[20:40:46.0000] <MikeSmith>
rniwa: I’m here

[20:41:00.0000] <rniwa>
MikeSmith: thanks for the response

[20:41:29.0000] <rniwa>
MikeSmith: it looks like a bunch of spec's are referring to ABNF: https://tools.ietf.org/html/rfc5234

[20:41:39.0000] <rniwa>
MikeSmith: but they should be referring to https://www.w3.org/Notation.html instead

[20:41:55.0000] <rniwa>
MikeSmith: because they use <1>#<m>element notation for comma separated lists

[20:42:04.0000] <rniwa>
MikeSmith: which isn't defined in RFC5234

[20:42:26.0000] <rniwa>
MikeSmith: alternatively, we can update those specs that use # notation to not use it

[20:47:07.0000] <MikeSmith>
oh wow

[20:47:15.0000] <MikeSmith>
thanks for catching that

[20:47:33.0000] <MikeSmith>
I think nobody has ever noticed that before

[20:48:17.0000] <rniwa>
MikeSmith: thank JoePeck on #webkit for that :)

[20:48:22.0000] <MikeSmith>
heh

[20:48:27.0000] <rniwa>
MikeSmith: he's really good at catching these thigns

[20:48:27.0000] <MikeSmith>
OK will thank him too

[20:48:36.0000] <MikeSmith>
yeah, attention to detail

[20:48:44.0000] <MikeSmith>
I notice that from his wpt tests as well

[20:49:10.0000] <MikeSmith>
anyway I guess there is some mailing list we should send a general “change your references” announcement to

[20:49:10.0000] <rniwa>
MikeSmith: he works on Web Inspector and he's implementing resource timing right now

[20:49:15.0000] <MikeSmith>
ah

[20:49:23.0000] <MikeSmith>
yeah I know he works on Web Inspector

[20:49:35.0000] <MikeSmith>
didn’t know he was working on resource timing

[20:50:00.0000] <MikeSmith>
but I guess we also should raise issues for each spec we notice that uses it

[20:50:24.0000] <rniwa>
MikeSmith: yeah probably

[20:50:37.0000] <MikeSmith>
IMHO the best way to deal with is, Don’t use any form of BNF in a Web API spec to begin

[20:50:47.0000] <MikeSmith>
they are OK for protocol specs maybe

[20:51:03.0000] <rniwa>
MikeSmith: I think BNF is useful for defining syntax

[20:51:10.0000] <MikeSmith>
in some cases

[20:51:14.0000] <MikeSmith>
but in a lot, not

[20:51:25.0000] <MikeSmith>
not if you want to specify error handling

[20:51:27.0000] <rniwa>
MikeSmith: I think fetch & resource timing are both defining the format for HTTP headers so it makes a lot of sense there

[20:51:46.0000] <MikeSmith>
OK

[20:51:52.0000] <MikeSmith>
so that makes more sense

[20:51:57.0000] <MikeSmith>
in that context

[20:52:38.0000] <MikeSmith>
anyway I got to step out for a bit now

[20:52:46.0000] <MikeSmith>
back in ~30 minutes

[20:53:08.0000] <rniwa>
ok, thanks

[21:21:22.0000] <MikeSmith>
/me has just now been chatting with JoePeck on w3c #testing about other stuff

[22:40:44.0000] <MikeSmith>
XhmikosR: at https://github.com/filamentgroup/loadCSS/issues/106#issuecomment-279619616 I guess I’m not understanding what the problem is. What is failing?

[22:42:52.0000] <XhmikosR>
MikeSmith: have you tried if `rel="stylesheet preload"` works currently in Chrome?

[22:43:39.0000] <XhmikosR>
if it works, then there's no backwards incompatibility. I don't use Chrome myself so I haven't tested that yet

[22:45:31.0000] <MikeSmith>
I have not tested it in Chrome no

[22:45:49.0000] <MikeSmith>
but if it doesn’t work then that’s a bug in Chrome

[22:45:56.0000] <XhmikosR>
true

[22:47:25.0000] <XhmikosR>
we could then just use string.includes but since that's for pretty new browsers I guess we should use indexOf

[22:48:52.0000] <XhmikosR>
I'll wait for Scott's reply and see how to proceed. I'll also need to test if Chrome's implementation follows the specs and works with `stylesheet preload`

[22:51:23.0000] <MikeSmith>
OK

[23:15:48.0000] <MikeSmith>
XhmikosR: https://github.com/w3c/webappsec-subresource-integrity/issues/26#issuecomment-279479814

[23:16:02.0000] <MikeSmith>
well not that particular comment

[23:16:17.0000] <MikeSmith>
just https://github.com/w3c/webappsec-subresource-integrity/issues/26

[23:21:05.0000] <XhmikosR>
MikeSmith: chrome doesn't seem to work with `stylesheet preload`

[23:22:40.0000] <MikeSmith>
interesting

[23:22:47.0000] <XhmikosR>
but maybe I'm missing something so I'll wait for Scott. I tested things locally with xampp

[23:23:09.0000] <MikeSmith>
yoav: ⬆

[23:23:11.0000] <XhmikosR>
but the polyfill doesn't seem to work either so I'm probably missing something

[23:24:16.0000] <XhmikosR>
link.rel.indexOf("preload") !== -1 true

[23:24:24.0000] <XhmikosR>
the check works fine

[23:25:26.0000] <annevk>
rniwa: I thought HTTP defined some ABNF extensions, but I should prolly clarify that I use them

[23:25:50.0000] <rniwa>
annevk: maybe.

[23:26:02.0000] <rniwa>
annevk: I think clarifying the reference would be nice

[23:37:01.0000] <annevk>
Yeah

[23:39:51.0000] <yoav>
MikeSmith: yo!

[23:40:48.0000] <zcorpan>
tobie: annevk: <http://www.w3.org/mid/e1060665-17fb-cc4a-aace-49503df5f228⊙wo> 🎉

[23:42:05.0000] <yoav>
XhmikosR: So `<link href=foo rel="stylesheet preload" as=style>` doesn't work in current Chrome impl?

[23:42:51.0000] <yoav>
Not sure what you want it to do tbh, but it should work (in a sense that a resource should be loaded, fetched and applied as a style)

[23:42:54.0000] <XhmikosR>
yoav: from a quick test it doesn't seem so

[23:43:10.0000] <XhmikosR>
yoav: let me paste the test file, you will need php

[23:43:16.0000] <yoav>
XhmikosR: Can you file a bug with a test case and send it my way?

[23:43:18.0000] <XhmikosR>
(not my tests)

[23:43:31.0000] <XhmikosR>
if we verify it doesn't work sure :)

[23:43:37.0000] <yoav>
cool

[23:43:42.0000] <XhmikosR>
would be nice if it didn't require php

[23:43:49.0000] <XhmikosR>
but Scott's test is using it

[23:44:50.0000] <XhmikosR>
let me fork his repo so that things are public

[23:46:01.0000] <XhmikosR>
(freaking tabs for indentation :P)

[23:47:03.0000] <zcorpan>
XhmikosR: seems to work over here... http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4885 (network inspector shows 1 fetch; if i remove `as` it shows 2 fetches)

[23:47:22.0000] <zcorpan>
and style is applied

[23:47:24.0000] <XhmikosR>
sec guys

[23:47:32.0000] <XhmikosR>
might be something with the polyfill

[23:48:39.0000] <zcorpan>
yoav: (has there been progress on not doing a fetch for <link rel=preload> without as?)

[23:49:26.0000] <yoav>
zcorpan: I'm half-way through PRs to get that done (got distracted by travel and shiny objects...)

[23:49:30.0000] <XhmikosR>
https://github.com/XhmikosR/loadCSS/blob/master/test/preload.html

[23:49:34.0000] <zcorpan>
yoav: cool

[23:50:33.0000] <yoav>
XhmikosR: `<link rel="stylesheet preload" href="slow.css.php" as="style">` will be a blocking style

[23:50:46.0000] <yoav>
which I think is counter to what you're trying to do

[23:50:56.0000] <XhmikosR>
hmm

[23:51:02.0000] <XhmikosR>
I see it's blocking

[23:51:29.0000] <zcorpan>
https://github.com/filamentgroup/loadCSS the README suggests using rel="preload" sans stylesheet

[23:51:34.0000] <XhmikosR>
the problem is we can't use integrity unless rel has stylesheet, or I misunderstood the issue?

[23:51:37.0000] <zcorpan>
and then i guess the script adds stylesheet

[23:51:45.0000] <XhmikosR>
zcorpan: I changed the check

[23:52:11.0000] <XhmikosR>
https://github.com/XhmikosR/loadCSS/commit/98c3137ff7811616eec4bb5d993eb5486a09c85f?w=1#diff-68b76c559168de2db8358863b8199f94R22

[23:52:13.0000] <yoav>
you currently cannot use preload with integrity

[23:52:28.0000] <yoav>
adding a rel=style won't help you with that

[23:52:38.0000] <XhmikosR>
ah I see

[23:52:46.0000] <XhmikosR>
that is what I'm trying to solve

[23:53:06.0000] <zcorpan>
that's interesting. i guess we should make that work

[23:53:17.0000] <yoav>
we definitely should

[23:53:17.0000] <zcorpan>
mkwst_: ^

[23:53:31.0000] <yoav>
https://github.com/w3c/webappsec-subresource-integrity/issues/26

[23:53:40.0000] <yoav>
zcorpan: current options are:

[23:54:00.0000] <yoav>
1) add an `integrity` attribute to `<link rel=preload>`

[23:54:50.0000] <yoav>
2) Jump through various implementation hoops that will enable to reuse preloaded resources and perform the integrity check at reuse time

[23:55:32.0000] <yoav>
(as well as letting script preloads through even if `require-sri-for-script` is present)

[23:56:13.0000] <XhmikosR>
I was just looking at the polyfill since I'm a FF user but since Chrome doesn't work we are currently out of luck

[23:56:25.0000] <yoav>
I guess that 2) is the "right" way to solve it, assuming implementation is feasible (I don't own SRI impl so not sure how complex that would be)

[23:56:56.0000] <yoav>
XhmikosR: sorry! :/

[23:56:58.0000] <zcorpan>
i was thinking: 1.a) allow (and honor) integrity for <link rel=preload as=style> and the other as values where integrity applies, but not where it doesn't

[23:57:29.0000] <XhmikosR>
this makes sense ^^

[23:57:44.0000] <yoav>
zcorpan: yeah, but isn't that just throwing the burden on devs rather than solving it internally?

[23:58:22.0000] <zcorpan>
yoav: the burden being having to use integrity attribute on their preload link?

[23:59:05.0000] <zcorpan>
maybe 2 has better developer ergonomics

[23:59:41.0000] <yoav>
yeah

[23:59:46.0000] <yoav>
that's what I'm thinking

[23:59:55.0000] <zcorpan>
but with the loadCSS pattern it doesn't really matter since it uses the same <link> and just appends " stylesheet" to rel when it's ready

[00:00:08.0000] <yoav>
true

[00:01:14.0000] <yoav>
I'll try to ping jww and see if he has an opinion on how complex integrity checks on existing resources would be

[00:01:57.0000] <zcorpan>
so i think it should at least be *allowed* to specify integrity="" for rel=preload. how we then deal with it in implementation is not something i can have an informed opinion on

[00:05:09.0000] <XhmikosR>
irrelevant but if something happens to GitHub we are screwed with almost everything hosted on it :/

[00:05:18.0000] <XhmikosR>
(noticed Python moved to GH too)

[00:08:42.0000] <yoav>
zcorpan: and if integrity on preload mismatches and integrity on the reusing element does?

[00:08:58.0000] <yoav>
we don't use the resource?

[00:12:39.0000] <yoav>
zcorpan: unless you have a use-case that would require applying the integrity check on both the preloaded resource and the reusing element...

[00:13:02.0000] <annevk>
yoav: if it mismatches for the preload it simply wouldn't end up in the preload cache since you got back a network error from Fetch

[00:13:18.0000] <annevk>
yoav: this is all fairly simple and would fall out of properly defining preload...

[00:13:47.0000] <annevk>
so please start looking at that, rather than all the things around it

[00:13:48.0000] <yoav>
does Fetch buffer the resource before returning it?

[00:14:01.0000] <annevk>
yoav: it does if you add integrity, yes

[00:14:05.0000] <yoav>
ok

[00:16:59.0000] <yoav>
annevk: fwiw, this is not about defining preload, but about defining the concept of "memory cache"

[00:17:32.0000] <yoav>
which I agree we need to define, but may be a long(ish) term project

[00:18:16.0000] <yoav>
Browsers currently disagree on behavior in various ways, so I suspect defining it will take time

[00:18:30.0000] <annevk>
for non-Chrome it's basically about defining preload

[00:18:53.0000] <annevk>
if this is used in other places, it might be worth tackling those too, but I'm not sure we should tightly couple them

[00:19:02.0000] <yoav>
WebKit has similar behavior to Chrome in that respect

[00:19:37.0000] <annevk>
Okay, but I don't see why you and igrigorik keep postponing it, since it's obvious that there's many many issues coming out of it not being defined

[00:19:51.0000] <annevk>
And it's been like that for at least a year or so

[00:21:39.0000] <yoav>
annevk: I really want to define it, but need to figure out a way to scope it down, as I don't have the bandwidth to take it on as a huge project

[00:28:54.0000] <annevk>
yoav: how complicated is that code?

[00:29:19.0000] <annevk>
yoav: presumably it takes a URL and returns an ongoing fetch or some such?

[00:29:38.0000] <annevk>
yoav: and I guess fetch() and XHR bypass it?

[00:30:01.0000] <annevk>
yoav: and preload lets things stay in longer or some such? so there's some kind of max timeout

[00:30:24.0000] <annevk>
yoav: it's probably somewhat involved to test it

[00:30:33.0000] <yoav>
annevk: it's fairly complex (we're currently cleaning it up)

[00:31:08.0000] <yoav>
It takes in a URL, gets a past resource from memoryCache and then runs it through a large set of conditions in order to see if it can be reused or not

[00:32:03.0000] <annevk>
it can't just be a resource since <script src=x><script src=x>

[00:32:09.0000] <yoav>
WebKit has a similar set of conditions (not necessarily identical, but very close)

[00:32:36.0000] <annevk>
well, <script async src=x></script><script async src=x></script>, if that ends up with one fetch, it's not a resource that's returned

[00:32:40.0000] <yoav>
Resource is the internal representation of a fetch (which may be in flight)

[00:32:46.0000] <annevk>
right

[00:33:26.0000] <annevk>
it doesn't sound like an awfully big project to add that kind of "fetch cache"

[00:33:55.0000] <yoav>
so writing down what happens in Blink/WebKit during those checks is probably doable

[00:34:22.0000] <yoav>
but I'm not familiar with Firefox's code in that area (and have no visibility into Edge)

[00:36:15.0000] <yoav>
and I suspect each one of those checks will also require a (much needed but lengthy) discussion of "do we really need that?"

[00:38:19.0000] <yoav>
annevk: I can probably start tackling that next week or the week after that, and see how it goes

[00:38:33.0000] <yoav>
starting by documenting the existing implementations

[00:38:56.0000] <yoav>
which will probably require feedback from Mozilla folks

[00:39:01.0000] <annevk>
Yeah I think having a description of Chrome/WebKit's model would be good as reference

[00:39:12.0000] <annevk>
And then we can figure out if others want to implement that too

[00:39:17.0000] <annevk>
For non-preload purposes

[00:39:34.0000] <annevk>
And we can figure out if the Chrome/WebKit model has holes with respect to CSP and such

[00:39:45.0000] <yoav>
yeah

[00:40:09.0000] <yoav>
I suspect it won't, as it tends to err on the side of "reload the resource"

[00:40:25.0000] <annevk>
mkwst_ probably audited the code

[00:40:27.0000] <annevk>
I hope so anyway

[00:40:33.0000] <yoav>
oh yeah

[01:17:14.0000] <annevk>
Can someone look at https://travis-ci.org/w3c/web-platform-tests/builds/201282365 and tell me what is going wrong? jgraham?

[01:43:12.0000] <JakeA>
annevk: all I'm getting internally about the HTML outline is "we think it might break sites" but no evidence as yet

[01:43:25.0000] <JakeA>
annevk: anything from Moz?

[01:43:35.0000] <annevk>
JakeA: basically lack of time

[01:44:03.0000] <JakeA>
annevk: kinda sad that browsers did all of the bits except the a11y bit

[01:44:06.0000] <JakeA>
I guess that's nothing new

[01:44:10.0000] <annevk>
JakeA: the breaking site thing seems super weird to me

[01:44:27.0000] <annevk>
JakeA: we rolled out this feature somewhat poorly

[01:44:46.0000] <JakeA>
annevk: I mean, it'll change the outline of some sites, but I don't know if it'd be "bad"

[01:44:50.0000] <annevk>
JakeA: everyone was keen on getting some new HTML elements, without doing all the work (e.g., as of yet no CSS selectors either that make it easy to style heading levels)

[01:45:31.0000] <JakeA>
annevk: right! And that's what's happening on that w3c thread. Everyone's super excited about the prospect of a ****new tag****

[01:46:00.0000] <annevk>
JakeA: yeah, new features are shiny, fixing infrastructure is not

[01:46:43.0000] <annevk>
JakeA: which reminds me, browsers still haven't removed appcache...

[01:46:55.0000] <JakeA>
*siiiiigh*

[01:47:17.0000] <JakeA>
annevk: there's a vague worry internally that it's being used by intranets, but again, not seen any evidence

[01:47:31.0000] <annevk>
JakeA: can't they do the long term removal for intranets?

[01:47:40.0000] <annevk>
JakeA: with some kind of flag for enterprises

[01:47:51.0000] <annevk>
JakeA: and just let that flag exist for 1.5 years

[01:48:00.0000] <annevk>
JakeA: isn't that how showModalDialog got removed?

[01:48:11.0000] <JakeA>
annevk: yeah, that seems fair

[01:48:43.0000] <annevk>
JakeA: it's long, but it's better than just letting the code rot and be a source of vulnerabilities

[02:16:03.0000] <JakeA>
annevk: I'm not sure what else I need to do to get https://github.com/w3c/web-platform-tests/pull/4518 merged. Travis is barfing, but it isn't clear on what, or if it's related to the PR

[02:17:38.0000] <annevk>
JakeA: it seems the results for Chrome are unstable?

[02:18:14.0000] <annevk>
JakeA: I second the problem with Travis though, the output is not great

[02:20:37.0000] <JakeA>
annevk: yeah, I can't figure out if it's specific to my tests

[02:23:09.0000] <jgraham>
JakeA: That seems pretty clear from the GitHub comment? Chrome timed out on 2 runs out of 8, so the tests are unstable and can't yet land

[02:23:40.0000] <jgraham>
annevk: It looks like for some reason travis thought that branch contained hundreds of commits

[02:23:45.0000] <jgraham>
I'm not sure why

[02:23:56.0000] <JakeA>
maybe because I rebased

[02:24:31.0000] <JakeA>
jgraham: ah, I didn't spot the relevant part in the wall of text

[02:25:16.0000] <zcorpan>
Domenic: "I wonder if we can do it purely through CSS (I doubt it)." - was this intended to trigger a knee-jerk on my part to fix it just to prove you wrong? 🤔😁

[02:25:20.0000] <annevk>
jgraham: I think what's going on is that he's trying to merge into the MicrosoftEdge branch rather than master

[02:25:45.0000] <jgraham>
JakeA: Anything you suggest to make it more obvious? It's at the top in bold. <blink> doesn't work these days…

[02:26:22.0000] <jgraham>
annevk: Oh, that could be it

[02:26:58.0000] <annevk>
jgraham: your comment tipped me off somehow, even though I had seen it trying to apply hundreds of commits

[02:28:06.0000] <jgraham>
annevk: We can probably make that work in the bot, but I don't know why you would do that in general

[02:28:19.0000] <JakeA>
jgraham: :P I guess fold all the passes into a click-to-reveal thing. The "everything's ok" parts of the messages are huge compared to the "here's the actual problem"

[02:28:34.0000] <jgraham>
I hope Microsoft haven't got the idea that they should put all their commits in a MicrosoftEdge branch

[02:28:48.0000] <jgraham>
JakeA: Hmm, does nested <details> work? Could try it

[02:29:01.0000] <JakeA>
jgraham: I dunno :(

[02:29:37.0000] <JakeA>
jgraham: in this case the unstable tests are nothing to do with my PR. Should it block me from merging?

[02:30:08.0000] <annevk>
jgraham: I'm hoping it was just a mistake, we'll hear tomorrow hopefully

[02:30:53.0000] <Ms2ger>
JakeA, is it the rebase or the test-helpers.sub.js change?

[02:31:19.0000] <annevk>
jgraham: nested works

[02:31:51.0000] <MikeSmith>
annevk: if I got anything wrong at https://stackoverflow.com/questions/42222937/using-fetch-api-to-post-xml/42223732#42223732 lemme know or comment/answer there when you got time

[02:32:24.0000] <JakeA>
Ms2ger: hmm, maybe, I'm not sure how it works

[02:33:17.0000] <Ms2ger>
I think it's accurately detecting that your change affected all the things

[02:34:20.0000] <annevk>
MikeSmith: seems accurate enough

[02:34:32.0000] <annevk>
MikeSmith: I suspect he doesn't like CORS and thought fetch() would give a way out

[02:34:45.0000] <Ms2ger>
JakeA, I guess I can merge

[02:35:43.0000] <JakeA>
Ms2ger: I can't see how that change could make other tests unstable, but browsers have surprised me before

[02:36:03.0000] <Ms2ger>
JakeA, it probably just made the checker run a test it hadn't before

[02:39:32.0000] <JakeA>
Thanks for merging!

[02:42:15.0000] <MikeSmith>
annevk: thanksーand yeah I have no clue what he might actually be trying to do. hmm but yeah I guess he saw mode: no-cors and thought that meant no CORS restrictions

[02:42:35.0000] <MikeSmith>
I wonder now how often other people might think that

[02:42:45.0000] <JakeA>
it isn't the first time I've seen it

[02:43:09.0000] <annevk>
naming :-(

[02:43:12.0000] <JakeA>
Seen a few people think it's a "security? Pfft, no thanks" switch

[02:43:31.0000] <annevk>
hah

[02:44:11.0000] <MikeSmith>
I guess we should have some better simple documentation (at MDN) that clearly explains what "no-cors" really means. There doesn’t actually see to be something like that at MDN yet

[02:45:15.0000] <JakeA>
Fetch is poorly understood by developers

[02:45:39.0000] <JakeA>
I can't say I understood it well before service worker

[02:45:49.0000] <annevk>
Presumably understanding was worse before it was written down

[02:45:58.0000] <JakeA>
yeah

[02:46:32.0000] <annevk>
There used to be no answer to what happens for redirects to <script> element fetches

[02:47:10.0000] <MikeSmith>
yeah and IMHO it’s not really the job of specs to make things clear to developers. That’s what MDN etc are much better suited for

[02:47:23.0000] <MikeSmith>
I like the Fetch spec the way it is

[02:48:15.0000] <MikeSmith>
because it’s like playing a kind of puzzle game 😆

[02:48:37.0000] <JakeA>
:D

[02:48:38.0000] <MikeSmith>
...where you have follow clues all over the place to figure things out

[02:48:40.0000] <MikeSmith>
heh

[02:48:52.0000] <JakeA>
There's probably an article in "how fetch works"

[02:48:59.0000] <MikeSmith>
yeah

[02:49:27.0000] <JakeA>
Not many developers know there's such thing as a CORS request. Many think it's just part of the response.

[02:49:40.0000] <MikeSmith>
oh

[02:50:13.0000] <MikeSmith>
ah yeah they don’t understand the browsers enforce the cross-origin request restrictions

[02:50:19.0000] <JakeA>
(at some point we need to get range requests into the spec)

[02:51:46.0000] <MikeSmith>
anyway seriously I think the Fetch spec is good example of the right way to write a spec for implementors, for getting the requirements defined clearly, without digressions stuffed amidst it all

[02:53:09.0000] <MikeSmith>
in contrast I think I’m becoming less and less fond of how the HTML spec intermingles UA requirements with a lot of informational stuff for authors/web-devs

[02:53:41.0000] <MikeSmith>
though I think it’s possible to put both in the same spec well if they are more clearly delineated

[02:53:51.0000] <MikeSmith>
more like what the URL spec does

[02:57:13.0000] <annevk>
MikeSmith: URL was modeled after HTML's syntax section

[02:57:42.0000] <annevk>
MikeSmith: that section of HTML doesn't cause much confusion (though there is some I suppose), but the remainder of the standard doesn't have the clear distinction

[03:30:58.0000] <annevk>
JakeA: what about https://github.com/whatwg/fetch/pull/435#discussion_r92863905

[03:33:50.0000] <annevk>
JakeA: that's the only thing left as far as I can tell apart from a minor thing I just spotted that I can fix when merging

[03:37:24.0000] <JakeA>
annevk: ah yes, will remove that bit now

[03:38:29.0000] <annevk>
I looked around a bit and couldn't find another standard that uses the skip flag, other than Service Workers that is

[03:38:41.0000] <annevk>
So hopefully we don't break anyone

[03:39:25.0000] <JakeA>
happy to make PRs for them if we find any

[03:39:58.0000] <annevk>
sweet, seems unlikely though

[03:52:01.0000] <jgraham>
JakeA, annevk: PRs up for both your issues. Dunno if they work yet though

[03:52:16.0000] <JakeA>
\o/

[03:52:19.0000] <JakeA>
cheers!

[04:33:50.0000] <Ms2ger>
What's up with Steve Faulkner suddenly hating the w3c?

[04:42:11.0000] <zcorpan>
The annoying warning doesn't work well with narrow viewports (it overflows upwards)

[04:44:57.0000] <annevk>
Snapshot warning?

[04:45:13.0000] <annevk>
Also breaks dfn.js when collapsed

[04:45:30.0000] <annevk>
Ms2ger: did he quit w3c/html?

[04:46:14.0000] <Ms2ger>
Dunno, he's whining about drm on twitter

[04:47:14.0000] <annevk>
I saw that

[04:47:38.0000] <annevk>
Whenever things go negative for W3C just blame the members

[04:48:03.0000] <annevk>
But don't let the members near anything positive, that was all W3C

[04:48:20.0000] <annevk>
Such a silly refrain

[04:55:31.0000] <annevk>
JakeA: just need a commit message now, I usually do one between ``` and ``` as a new comment

[04:55:54.0000] <annevk>
JakeA: should indicate the issues fixed, tests and a summary at the top as title

[05:01:43.0000] <JakeA>
done!

[05:11:54.0000] <annevk>
Alright, we can now modify whatwg.org through GitHub

[05:12:02.0000] <annevk>
Setup seems to work

[05:40:16.0000] <Ms2ger>
/me wonders how accurate the address element on the front page is

[05:41:08.0000] <gsnedders>
Ms2ger: front page of what?

[05:41:55.0000] <Ms2ger>
whatwg.org

[05:44:57.0000] <annevk>
Ms2ger: contents are being changed

[05:45:06.0000] <annevk>
Ms2ger: mostly to direct to whatwg/meta or Hixie

[05:45:12.0000] <annevk>
Ms2ger: instead of the mailing list

[05:45:39.0000] <annevk>
Ms2ger: but the frontpage in general has some problems with out-of-date links, if anyone has ideas for an overhaul that doesn't really require us to link to nine things that'd be great

[05:46:07.0000] <xfq>
Related: https://github.com/whatwg/whatwg.org/issues/13

[06:03:27.0000] <annevk>
And fixed

[06:10:50.0000] <annevk>
zcorpan: oh lol, it's actually called "annoying warning"

[06:10:56.0000] <annevk>
zcorpan: in the markup

[06:11:03.0000] <zcorpan>
annevk: yep

[06:11:40.0000] <zcorpan>
annevk: good to keep the right expectations for anyone touching the code :-)

[06:11:56.0000] <annevk>
zcorpan: changes LGTM

[06:12:47.0000] <annevk>
zcorpan: is the markup/style documented standalone someplace? It seems we could use it on whatwg.org for a number of things

[06:14:11.0000] <zcorpan>
annevk: i don't follow the question

[06:14:43.0000] <annevk>
zcorpan: if it's easy to reuse annoying warning elsewhere

[06:17:17.0000] <zcorpan>
annevk: ah. i guess we can reuse it... mostly a matter of moving the CSS out of bikeshed.css I think, maybe into a new annoying-warning.css

[06:17:37.0000] <annevk>
zcorpan: script is embedded in the markup then?

[06:17:52.0000] <MikeSmith>
wanderview: wondering if you have implemented <link rel=serviceworker> support

[06:18:12.0000] <zcorpan>
annevk: i don't think there's any script, it's just a <details>

[06:18:22.0000] <annevk>
zcorpan: oh, with fancy styling, cool

[06:18:56.0000] <wanderview>
MikeSmith: I don't think so

[06:19:04.0000] <MikeSmith>
ok

[06:19:21.0000] <wanderview>
MikeSmith: https://bugzilla.mozilla.org/show_bug.cgi?id=1243404

[06:19:28.0000] <MikeSmith>
/me looks

[06:19:43.0000] <MikeSmith>
wanderview: thank you

[06:19:44.0000] <wanderview>
the header was added for foreign fetch support and we've been putting off working on that feature

[06:20:46.0000] <MikeSmith>
ah

[06:27:09.0000] <annevk>
Thanks wanderview for filing the Gecko bug

[06:27:16.0000] <annevk>
Re https://github.com/whatwg/fetch/issues/303

[06:27:24.0000] <wanderview>
np... I haven't been as good at filing those bugs lately

[06:27:26.0000] <annevk>
JakeA: perhaps you can update that issue with the Chrome bug as well?

[06:28:03.0000] <annevk>
wanderview: I'm trying to take over that task for any new changes, but I forgot about this one since I didn't write the PR

[06:31:10.0000] <JakeA>
Done!

[06:36:29.0000] <annevk>
JakeA: FWIW, in general for each PR we now require tests and also impl bugs, but I tend to forget to ask for the latter

[06:37:00.0000] <JakeA>
Noted for future. Cheers!

[08:27:44.0000] <XhmikosR>
@MikeSmith: can you reply on the loadCSS issue? I don't know the names of the guys here

[08:28:25.0000] <MikeSmith>
XhmikosR: yes I will

[08:28:34.0000] <XhmikosR>
unfortunately for subresource we need `stylesheet preload` but then preload breaks if I understood correctly

[08:30:54.0000] <XhmikosR>
thanks

[08:32:20.0000] <MikeSmith>
yup

[08:46:15.0000] <gsnedders>
is it still the case that web fonts start to load when the browser finds the first use of it?

[09:13:05.0000] <Domenic>
MikeSmith: I do think the things you said in IRC would be good as a reply to the DTD email. They were appropriately diplomatic but also pointing out that it's not the direction we're focused on, for good reasons.

[09:13:13.0000] <Domenic>
zcorpan: I guess I really meant getting it so that *only* the "X" button closes, not the whole `<summary>`.

[09:14:09.0000] <MikeSmith>
Domenic: OK I will make time to reply to them then

[10:32:58.0000] <TabAtkins>
gsnedders: I believe so, yes.

[10:50:57.0000] <annevk>
Domenic: having a larger target area seems fine?

[10:56:07.0000] <Domenic>
annevk: yeah, just to clarify what I meant by probably impossible with CSS

[10:58:34.0000] <annevk>
Ah

[11:04:49.0000] <jyasskin>
What's the best way to put an ascii BufferSource literal into a spec example? So far I've got Uint8Array.from("climb a mountain", c=>c.charCodeAt(0))

[11:17:09.0000] <annevk>
jyasskin: use TextEncoder?

[11:18:00.0000] <jyasskin>
annevk: Good point. I'd ruled it out when I thought I needed to base64-decode the string, but I don't actually need to do that. Thanks.


2017-02-15
[16:08:31.0000] <jugglinmike>
Hello all. I have a question about Service Workers, if anyone here has a moment.

[16:08:50.0000] <jugglinmike>
If I understand correctly, it seems like the allocation of distinct task queues is implementation-defined

[16:09:21.0000] <jugglinmike>
So does that mean that one browser could implement postMessage and fetch tasks on the same queue, but another could define separate task queues for each?

[16:26:14.0000] <Mek>
jugglinmike: the spec defines separate task sources for fetch events and all other events, and additionally allows all those other event types to have their own task source per event type, yes. It is then also up to user agents how to map task sources to task queues (i.e. all events from the same task source end up in the same queue, but different sources might or might not share queues)

[16:55:06.0000] <Mek>
huh, http://output.jsbin.com/gasinavezo  for some reason seems to output "true, false, true" in firefox, while unless I'm crazy and don't understand javascript all three checks should be identical...

[16:56:25.0000] <jugglinmike>
thank you Mek!

[16:59:27.0000] <Mek>
or wait, maybe in my case the problem is that the about:blank iframe hasn't finished loading yet in the first assignment, so my bug rather than soms craziness

[21:05:15.0000] <annevk>
Mek: within an event loop you can have multiple sources, but only one task loop

[21:05:41.0000] <annevk>
Mek: you can just give priority to a source

[23:12:25.0000] <MikeSmith>
annevk: so I spend my entire Stackoverflow time budget today on trying to answer one question:

[23:12:36.0000] <MikeSmith>
http://stackoverflow.com/questions/42239643/when-does-firefox-set-the-origin-header-to-null-in-post-requests/42242802#42242802

[23:13:37.0000] <MikeSmith>
when you have time, as usual if I got anything wrong please either lemme know or comment/answer there

[23:14:27.0000] <MikeSmith>
I wrote all that without answering the one question the OP cares about most, which is I guess, Why Firefox doesn’t send Origin for cross-origin POSTs

[23:15:12.0000] <MikeSmith>
which I don’t know why Firefox does that, but if it does, it’s non-conforming, right?

[23:22:49.0000] <annevk>
Known bug in Fx

[23:23:11.0000] <annevk>
Will look when I get back

[00:10:01.0000] <annevk>
zcorpan: hmm https://bugzilla.mozilla.org/show_bug.cgi?id=1338535

[00:11:38.0000] <zcorpan>
annevk: you get to decide if mozilla is interested in solving this problem? :-)

[00:14:20.0000] <zcorpan>
https://bugs.chromium.org/p/chromium/issues/detail?id=690927 is the issue for chromium

[00:14:27.0000] <annevk>
zcorpan: well, I'm not, not sure about Mozilla

[00:14:44.0000] <annevk>
zcorpan: but yeah, seems like my manager thought that would be a good idea

[00:15:54.0000] <annevk>
zcorpan: disabled does submit right? Why can't disabled be used everywhere?

[00:16:07.0000] <zcorpan>
annevk: it doesn't submit

[00:16:35.0000] <annevk>
zcorpan: oh okay, disabled means you can't copy I guess

[00:16:53.0000] <annevk>
It's been like a decade since I looked at forms closely, I know nothing

[00:17:07.0000] <zcorpan>
annevk: disabled can be used for all controls, but not readonly

[00:18:33.0000] <annevk>
MikeSmith: your answer is slightly wrong

[00:18:50.0000] <annevk>
MikeSmith: we changed when Origin is required to be transmitted recently

[00:19:08.0000] <annevk>
MikeSmith: to be either for cross-origin CORS (not same-origin) or requests whose method is not GET/HEAD

[00:19:25.0000] <annevk>
MikeSmith: so same-origin POST used to be excluded, but is no longer

[00:19:39.0000] <annevk>
MikeSmith: cross-origin POST from a <form> (without CORS) used to be excluded, but is no longer

[00:20:08.0000] <annevk>
MikeSmith: therefore the behavior in Fx is considered a bug

[00:23:53.0000] <MikeSmith>
annevk: OK I thought my answer had the current state of things right at least, but I you mean I should update the answer to indicate that the behavior changed recently? (and note what the previous required behavior was)

[00:24:56.0000] <annevk>
MikeSmith: up to you I suppose, but see https://github.com/whatwg/fetch/commit/eb89fcd54bb39e81b11c569f6ad7ba615883f7b9 for the change

[00:25:47.0000] <MikeSmith>
OK, I guess this is another case where browsers have not caught up with the spec change yet?

[00:32:08.0000] <annevk>
MikeSmith: well, Chrome always implemented that behavior and WebKit too, but it never got into Firefox

[00:32:23.0000] <annevk>
MikeSmith: it's something Adam Barth pushed but it never really got standardized/accepted

[00:32:37.0000] <annevk>
And I kinda dislike it since it no longer makes CORS requests distinct

[00:35:48.0000] <MikeSmith>
yeah

[00:36:19.0000] <MikeSmith>
it’s also more confusing for authors/developers

[00:37:18.0000] <MikeSmith>
anyway I updated my SO answer:

[00:37:26.0000] <othermaciej>
annevk, zcorpan: for non-text controls like checkboxes or radio buttons, it's confusing to have it be read-only but not have the disabled appearance, and is generally not done in native toolkits. So original idea of extending readonly was bad. The submitanyway idea isn't broken u-wise but it seems super marginal, based on the stated use case. It's basically a conenience for something really rare.

[00:37:27.0000] <MikeSmith>
Note: The above describes how the Fetch spec currently defines the requirements, due to a change that was made to the spec on 2016-12-09. Up until then the requirements were different:

[00:37:31.0000] <MikeSmith>
previously no Origin was sent for a same-origin POST

[00:37:33.0000] <MikeSmith>
previously no Origin was sent for cross-origin POST from a <form> (without CORS)

[00:37:36.0000] <MikeSmith>
So I think the Firefox behavior described in the question conforms to what the spec previously required, but not what the spec currently requires.

[00:37:47.0000] <MikeSmith>
hey othermaciej!

[00:38:25.0000] <othermaciej>
Also don't like the guy saying "WHATWG agrees to standardize", that doesn't seem a fair representation of discussion of the issue

[00:38:30.0000] <othermaciej>
Hi MikeSmith!

[00:39:25.0000] <zcorpan>
I would agree to standardize *if* 2+ browsers want to implement.

[00:40:42.0000] <othermaciej>
yeah, I think a conditional statement like that would be justified, but that's not what his bugs say. They make it sound like ~WHATWG has already decided, so get on board~

[00:40:52.0000] <annevk>
othermaciej: thanks, that all sounds reasonable

[00:41:08.0000] <annevk>
othermaciej: in the Bugzilla issue I asked for evidence that the request is widespread, we'll see I suppose

[00:41:38.0000] <annevk>
But I tend to agree that syncing with a hidden input is easy enough

[02:40:02.0000] <jochen__>
how'd I go about getting https://github.com/w3c/wpt-tools/pull/164 merged?

[02:44:55.0000] <annevk>
jochen__: prolly talk to jgraham

[02:49:25.0000] <Ms2ger>
Look at the history for that runner and find someone who uses it?

[02:53:40.0000] <mkwst_>
MikeSmith has the most commits/reviews. But they're mostly from 2014. *cough* :)

[03:05:53.0000] <jgraham>
jochen__: Merged, but really if your workflow involves the runner you should find a better workflow :)

[03:36:00.0000] <zcorpan>
annevk: thanks for fixing snapshots for quirks mode

[03:37:26.0000] <annevk>
Does anyone know if there is a file system where the directory name can be empty?

[03:39:35.0000] <jgraham>
annevk: Sounds implausible

[05:28:27.0000] <jochen__>
annevk: mind looking at the document.open PRs again (html/wpt)?

[05:56:31.0000] <annevk>
jochen__: are we closer to figuring out what the security model should be?

[05:56:46.0000] <annevk>
I'll have a look in a bit

[06:22:05.0000] <annevk>
zcorpan: so there are a lot of people asking about readonly-like semantics and the top answer is a bunch of JavaScript

[06:22:36.0000] <annevk>
zcorpan: top answer having like >300 votes, so maybe it's something worth considering

[06:22:45.0000] <zcorpan>
annevk: got a link?

[06:23:02.0000] <annevk>
http://stackoverflow.com/questions/368813/html-form-readonly-select-tag-input

[06:23:03.0000] <annevk>
http://stackoverflow.com/questions/37762671/how-to-create-readonly-select-box-but-i-will-post-that-value

[06:23:03.0000] <annevk>
http://stackoverflow.com/questions/155291/can-html-checkboxes-be-set-to-readonly

[06:23:03.0000] <annevk>
http://stackoverflow.com/questions/4727974/how-to-post-submit-an-input-checkbox-that-is-disabled

[06:23:29.0000] <annevk>
They're from OP in the Firefox bug

[07:39:46.0000] <jochen__>
annevk: basically we all agree that we disagree with the one that is in the spec :)

[07:40:26.0000] <annevk>
jochen__: if you can guarantee an issue will be filed once you and bz are ready I'll go ahead and merge all the things

[07:41:00.0000] <jochen__>
let's file one immediately

[07:41:11.0000] <annevk>
I guess I'll remember it too since I don't like security mismatches

[07:41:21.0000] <annevk>
Thanks, I'll go merging things then

[07:43:37.0000] <jochen__>
https://github.com/whatwg/html/issues/2360

[07:45:08.0000] <jochen__>
what's the bar for being allowed to merge stuff to wpt btw?

[07:45:53.0000] <jochen__>
or in other words, can I haz access plz?

[07:47:12.0000] <Ms2ger>
Being trusted to review sufficiently well :)

[07:47:24.0000] <Ms2ger>
Have you done reviews?

[07:51:43.0000] <jochen__>
i reviewed the referrer policy stuff

[07:51:54.0000] <jochen__>
(/referrer-policy/)

[07:52:53.0000] <jochen__>
but happy to just review stuff for a bit more and come back later

[08:09:08.0000] <wanderview>
annevk: was there some question about ancestorOrigins sticking around?

[08:09:45.0000] <annevk>
wanderview: there's a question of how it should work

[08:10:35.0000] <annevk>
wanderview: https://github.com/whatwg/html/issues/1918

[08:11:07.0000] <wanderview>
annevk: I guess this blocks Client.ancestorOrigins as well then

[08:11:12.0000] <wanderview>
in service worker pec

[08:11:13.0000] <wanderview>
spec

[08:11:22.0000] <annevk>
wanderview: for us it does, yes

[08:11:31.0000] <annevk>
wanderview: it would be bad to undermine bz

[08:14:27.0000] <annevk>
Domenic: the numbers in https://github.com/w3c/web-platform-tests/issues/3018 seem quite good

[08:14:30.0000] <annevk>
Domenic: tweet?

[08:14:51.0000] <Domenic>
annevk: yeah :)

[08:18:59.0000] <annevk>
Domenic: I think I found a bug just browsing that coverage report

[08:19:31.0000] <Domenic>
Oh neat! In the file stuff I'd guess? The fact there were several uncovered branches there looked suspicious

[08:19:35.0000] <annevk>
Domenic: https://url.spec.whatwg.org/#file-host-state shouldn't have to check for "includes credentials" as that's not possible for file URLs

[08:19:53.0000] <annevk>
Domenic: yeah, that also looked very suspect, guess I'll dive into this tomorrow

[08:20:13.0000] <annevk>
Domenic: tooling is amazing

[08:23:28.0000] <wanderview>
annevk: JakeA: how important is it to provide Client.ancestorOrigins if we remove Client.frameType?

[08:23:51.0000] <wanderview>
do I have to implement .ancestorOrigins when .frameType is removed to avoid breaking a critical use case?

[08:26:06.0000] <Domenic>
MikeSmith: botie is gone again

[08:48:04.0000] <JakeA>
wanderview: it isn't something I've heard a lot of requests for

[08:50:04.0000] <wanderview>
JakeA: I guess there is this: https://github.com/w3c/ServiceWorker/issues/1007

[09:17:16.0000] <zcorpan>
Domenic: can you have another look at the new changes in https://github.com/whatwg/html/pull/2355 (and the test)?

[09:31:52.0000] <tobie>
annevk: do all of the whatwg specs have auto pr branch deploys?

[09:32:17.0000] <annevk>
tobie: pretty much

[09:33:32.0000] <MikeSmith>
Domenic: botie is basic

[09:42:36.0000] <tobie>
annevk: my code is assuming that is the case. So we need to somehow special case it that's not so.

[09:53:55.0000] <annevk>
tobie: I don't understand, we simply only make it work for specs that have that setup

[09:54:07.0000] <annevk>
tobie: in the end all specs should have that setup, those that don't are buggy

[09:54:17.0000] <tobie>
annevk: wfm

[10:01:09.0000] <tobie>
annevk: OK so you be able to go ahead and add repos now

[10:01:43.0000] <tobie>
annevk: if you ping me with the repo name, I can run a script to update all open PRs

[10:02:09.0000] <tobie>
annevk: it's too complicated to automate this for now, due to a GH API issue.

[10:04:40.0000] <annevk>
Domenic: so if you're not tweeting I can

[10:05:00.0000] <annevk>
tobie: let's do it tomorrow, okay?

[10:05:17.0000] <tobie>
annevk: sure

[10:05:23.0000] <tobie>
annevk: ping me

[10:05:27.0000] <annevk>
will do

[10:05:53.0000] <tobie>
annevk:  (might be out of office tomorrow. we'll see)

[10:07:54.0000] <annevk>
tobie: Friday or next Monday is fine too, will ping and we'll see

[10:08:52.0000] <Domenic>
annevk: oh, sure, I thought that was the plan

[10:15:21.0000] <annevk>
Domenic: done

[10:28:16.0000] <smaug>
no zcorpan

[10:28:23.0000] <smaug>
hmm, perhaps foolip knows

[10:28:47.0000] <smaug>
about MouseEvent.offsetX/Y

[10:29:02.0000] <smaug>
webkit based engines seem to cache the value after first getter call

[10:29:13.0000] <smaug>
yet the spec doesn't hint anything like that

[12:26:51.0000] <wanderview>
annevk: if I want to make a PR to service worker spec... is there a build step I need to run?

[12:27:42.0000] <annevk>
wanderview: not per se, but if you have bikeshed you could run that

[12:27:58.0000] <wanderview>
annevk: I modify the .bs file and then run bikeshed?

[12:28:08.0000] <annevk>
wanderview: not really sure what their policies are though

[12:28:15.0000] <annevk>
wanderview: yeah

[12:28:53.0000] <annevk>
wanderview: if they don't have PR instructions that is worthy of an issue

[12:44:20.0000] <wanderview>
annevk: I guess the CONTRIBUTING.md file does mention it in there

[12:58:50.0000] <wanderview>
JakeA: did you forget to re-generate the index.html after you removed the skip-service-worker flag?  when I run bikeshed on the pristine checkout of the repo it seems to make those changes...

[12:59:42.0000] <JakeA>
Hmm, will check

[13:19:16.0000] <wanderview>
JakeA: I guess I get this: LINK ERROR: No 'dfn' refs found for 'skip-service-worker flag'.

[13:19:26.0000] <wanderview>
maybe just the fetch side of the change landed?

[13:46:27.0000] <wanderview>
/me made his first pull request against the ServiceWorker spec.

[15:08:08.0000] <MikeSmith>
wanderview: nice PR

[15:49:23.0000] <foolip>
smaug: is this caching that can be observed?

[15:51:02.0000] <foolip>
smaug: at a glance it looks like it depends on things that can't be changed with any init*Event(), but maybe I'm missing something :)

[15:51:18.0000] <smaug>
foolip: caching can be observed

[15:52:20.0000] <smaug>
foolip: https://bugzilla.mozilla.org/show_bug.cgi?id=1339758#c11

[15:53:46.0000] <foolip>
smaug: oh, so if the layout is invalidated by the event handler, the event's offsetX/Y isn't?

[15:54:10.0000] <smaug>
right, in Webkit and Blink at least

[15:54:22.0000] <smaug>
and Edge too, but it has apparently different behavior

[15:54:49.0000] <smaug>
my interpretation is that Gecko works per spec, but bz thinks Edge might

[15:55:09.0000] <smaug>
but webkit/blink are certainly wrong

[15:55:30.0000] <foolip>
smaug: did offsetX go and disappear spec side? It used to be in https://w3c.github.io/uievents/#interface-MouseEvent I think

[15:55:45.0000] <smaug>
foolip: it is not there

[15:55:47.0000] <smaug>
in CSS OM

[15:56:01.0000] <foolip>
https://drafts.csswg.org/cssom-view/#extensions-to-the-mouseevent-interface it is

[15:57:06.0000] <smaug>
so, do you happen to know the reason for caching? Sounds like no :) And I think we should figure out what actually should happen here

[15:58:07.0000] <smaug>
specing webkit/blink behavior would be sad, since the caching happens rather random time

[15:58:11.0000] <foolip>
smaug: no, this is the first time I've seen it, but presumably because of perf at some point. I would ask dtapuska to investigate and explain

[15:58:20.0000] <smaug>
(whoever happens to access the getter first time)

[15:59:08.0000] <foolip>
what is https://drafts.csswg.org/cssom-view/#dom-mouseevent-offsetx trying to say though? "position where the event occurred" in past tense?


2017-02-16
[16:00:57.0000] <smaug>
I'm not sure that is too vague, but "relative to the origin of the padding edge of the target node"

[16:01:02.0000] <smaug>
when is the calculation done

[16:02:20.0000] <smaug>
my interpretation is that there shouldn't be any caching, so when offset* is accessed, "relative to the origin of the padding edge of the target node" should be recalculated

[17:00:12.0000] <foolip>
yeah, that would make sense

[17:00:38.0000] <foolip>
to require it to be calculated at any specific time would mean that it has to be calculated even if not later used, so that wouldn't be great either

[21:46:42.0000] <MikeSmith>
the upvote/downvote pile-on pattern in https://github.com/gpuweb/admin/issues/1 is.. interesting

[21:49:54.0000] <MikeSmith>
github should add buttons with rage-comics emoji

[21:53:30.0000] <annevk>
Hmm, Chrome decides to communicate now that they don't want to actually implement trailer()

[21:53:39.0000] <annevk>
Thanks for letting me work out all the details fir st I guess

[22:07:30.0000] <foolip>
annevk: what's trailer()?

[22:07:52.0000] <foolip>
https://github.com/whatwg/fetch/issues/34?

[22:13:48.0000] <annevk>
foolip: oops, yeah, an attribute: https://fetch.spec.whatwg.org/#dom-response-trailer

[22:15:00.0000] <annevk>
foolip: I mean, Chrome raised the issue, Google infrastructure folks wants the feature, Chrome devrel (or is igrigorik an engineer?) advocated for the feature, Chrome engineers helped review the feature before it landed in the Fetch standard

[22:15:14.0000] <annevk>
foolip: and now some of the very same folks are suggesting to wontfix it the moment I file the bug report

[22:15:47.0000] <annevk>
I mean, it's fine, it's only a couple days at most of lost work, but still

[22:16:03.0000] <foolip>
igrigorik is on DevRel, yes

[22:17:26.0000] <foolip>
seems like rsleevi was quite clearly opposed all along, but that nobody else on Chrome worked out the situation with him? (just skimming the thread)

[22:18:25.0000] <annevk>
foolip: I would have expected a "we'll never implement" after https://github.com/whatwg/fetch/issues/34#issuecomment-235318684

[22:18:50.0000] <annevk>
foolip: instead three Googlers help review https://github.com/whatwg/fetch/pull/344

[22:22:42.0000] <foolip>
annevk: I've commented on https://bugs.chromium.org/p/chromium/issues/detail?id=691599#c4

[22:24:34.0000] <foolip>
mkwst_: you seem like the perfect person to tell me what I should think about trailers and exposing them to the web. what are my thoughts?

[00:31:04.0000] <annevk>
hsivonen: did you see the issue I filed on the encoding detector in Chrome?

[00:31:20.0000] <annevk>
hsivonen: I'll study it later today and maybe comment

[00:31:30.0000] <annevk>
hsivonen: been some follow-up overnight apparently

[02:02:03.0000] <JakeA>
wanderview: ah, yeah, the SW parts haven't landed yet. I'll chase it

[02:31:12.0000] <zcorpan>
annevk: i checked the stackoverflow threads, and indeed it seems a lot people are running in to this issue, and the workarounds seem pretty messy... the least messy is maybe removing disabled onsubmit and adding it again after, but that results in a flash-of-enabled-controls...

[02:31:49.0000] <annevk>
zcorpan: it's also a rather trivial change to the processing algorithm, just need to decide on how to expose it

[02:32:15.0000] <annevk>
zcorpan: one thing that seemed rather nice to me was disabled="submit", but the API-side of that would be less clean

[02:32:52.0000] <zcorpan>
yeah i think we should have a new attribute

[02:33:01.0000] <zcorpan>
but "anyway" is not clear what it's referring to

[02:33:05.0000] <annevk>
zcorpan: I'm in favor I suppose of moving forward here, specifics hopefully sorted out by someone else

[02:33:12.0000] <zcorpan>
submitdisabled="" maybe

[02:33:33.0000] <annevk>
zcorpan: could also be a flag on <form> potentially

[02:33:48.0000] <zcorpan>
per-control is more flexible

[02:34:44.0000] <annevk>
disabled="submit" could work if you reflect it through disabledState

[02:35:05.0000] <zcorpan>
we also have <fieldset disabled> which is a bit special

[02:35:25.0000] <annevk>
Oh stuff inherits?

[02:35:32.0000] <annevk>
Hmm okay

[02:36:12.0000] <zcorpan>
inherits except into the <legend>

[02:47:21.0000] <zcorpan>
considering <fieldset disabled> i think it should be a separate attribute. you may want to toggle disabled for a whole fieldset, but always submit a specific control inside

[02:50:52.0000] <hsivonen>
annevk: thanks for filing the Chrome bug

[02:56:47.0000] <annevk>
zcorpan: wouldn't that still be possible though?

[02:57:35.0000] <annevk>
zcorpan: anyway, new attribute seems fine

[02:58:31.0000] <zcorpan>
annevk: you'd have to set both disabled on fieldset and disabled=submit on the specific control instead of only setting disabled on fieldset

[02:58:44.0000] <zcorpan>
(when toggling with script)

[02:59:20.0000] <annevk>
zcorpan: disabled on fieldset should be set either way, right?

[02:59:33.0000] <annevk>
zcorpan: and for the control you'll also need to toggle *something* either way

[03:00:37.0000] <zcorpan>
annevk: yes for the first question. i think no for the second question. let me show with markup what i mean so we're talking about the same case

[03:04:36.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4891

[03:07:21.0000] <annevk>
zcorpan: ah okay

[03:07:46.0000] <annevk>
zcorpan: pretty obvious indeed

[03:10:18.0000] <zcorpan>
/me finds 302 matches of '<fieldset(?:s[^>]+)?sdisabledb' in httparchive

[04:43:55.0000] <annevk>
hsivonen: so I think we should add a comment on the Chrome bug indicating what the rough situation in Gecko looks like now

[04:44:17.0000] <annevk>
hsivonen: with respect to Japanese and Cyrillic and what those mean in terms of labels

[04:44:39.0000] <annevk>
hsivonen: and hope that Chrome aligns with that (or a smaller set)

[04:45:04.0000] <annevk>
hsivonen: for Japanese it seems we want to sniff between EUC-JP and Shift_JIS

[04:45:25.0000] <annevk>
hsivonen: I don't recall the Cyrillic situation, but since you do, maybe you can comment?

[05:52:03.0000] <annevk>
hsivonen: I added a comment since I didn't want to forget about it

[10:06:22.0000] <annevk>
Domenic: dherman says you can find out Script vs ModuleScript

[10:06:29.0000] <annevk>
Domenic: or whatever the terminals are called

[10:06:39.0000] <Domenic>
annevk: CONTEXT?

[10:06:39.0000] <botie>
CONTEXT is https://github.com/validator/validator/issues/284

[10:06:49.0000] <Domenic>
(capslock)

[11:41:01.0000] <annevk>
Domenic: context isn't so important, but it seems we could maybe use that instead of trying to change destination types and such

[11:41:47.0000] <Domenic>
annevk: I guess I don't really understand how that is possible; you know how things are to be parsed based on type="module" or not.

[11:42:31.0000] <annevk>
Domenic: hmm, if you run into him at TC39 ask?

[11:42:42.0000] <annevk>
Domenic: I could email too, tomorrow

[11:42:58.0000] <Domenic>
yeah, I won't be at TC39 until May most likely


2017-02-17
[21:08:59.0000] <kochi>
MikeSmith: ping?

[21:09:34.0000] <kochi>
yoichio@ is having trouble getting his first PR merged. https://github.com/w3c/selection-api/pull/81

[21:09:49.0000] <kochi>
Does it require "w3c" membership?

[22:30:29.0000] <annevk>
kochi: seemed rniwa gave some feedback?

[22:31:23.0000] <rniwa>
kochi, annevk: in fact, we don't want to merge that change until Blink makes the behavioral change

[22:31:30.0000] <rniwa>
I think I made that clear in the issue tracker?

[22:33:38.0000] <annevk>
rniwa: yeah, the referenced issue seems pretty clear, but sometimes worth restating the reqs in the PR

[22:33:51.0000] <annevk>
rniwa: tests would be good too btw

[22:34:50.0000] <annevk>
hsivonen: seems the Chrome encoding folks would be game to standardize sniffing

[22:35:10.0000] <annevk>
hsivonen: put it in Encoding?

[22:37:07.0000] <kochi>
annevk, rniwa: I see, I was just helping to resolve the warning that CI tool was complaining.  Yoichi seems aware of it.

[22:57:07.0000] <yoichio>
Hi

[23:55:48.0000] <hsivonen>
annevk: I commented on the Chrome bug. I'd like to explore the necessity of sniffing before deciding whether to standardize and in which spec.

[00:00:40.0000] <annevk>
hsivonen: sg

[00:01:42.0000] <zcorpan>
https://twitter.com/mozilla/status/831983682256769024 ... is mozilla intentionally using single slash in URLs now?

[00:02:48.0000] <zcorpan>
uh... nevermind

[00:38:32.0000] <zcorpan>
Anyone have Edge more recent than 13 to test https://bugs.chromium.org/p/chromium/issues/detail?id=692560#c7

[01:08:30.0000] <MikeSmith>
kochi: looking now

[01:08:46.0000] <kochi>
MikeSmith: thx!

[01:12:25.0000] <MikeSmith>
kochi: so from what I have seen so far the tool that handles the IPR check is just broken

[01:12:39.0000] <kochi>
hmm

[01:12:40.0000] <MikeSmith>
I will ask the team contacts for the WG if they know

[01:12:52.0000] <kochi>
thanks!

[01:14:01.0000] <kochi>
it's Friday, and that PR is not in a hurry.  thanks in any case.

[01:17:11.0000] <MikeSmith>
OK

[01:17:26.0000] <MikeSmith>
will try to get it fixed, anyway

[01:20:00.0000] <kochi>
MikeSmith: if there is anything yoichio@ has to do, please let him know.

[01:22:00.0000] <MikeSmith>
ok

[01:22:40.0000] <MikeSmith>
but I think there here is nothing yoichio can to do resolve it; instead W3C systems team needs to fix the tool I guess

[01:25:23.0000] <annevk>
zcorpan: I can look in Browserstack

[01:25:51.0000] <zcorpan>
annevk: i thought BrowserStack had Edge 13 but not newer?

[01:26:04.0000] <annevk>
zcorpan: mine has 14

[01:26:25.0000] <annevk>
zcorpan: object CSSStyleSheet, 1, loaded

[01:26:33.0000] <zcorpan>
annevk: thanks

[02:15:43.0000] <annevk>
foolip: the chromium-wpt-export-bot creates a lot of noise on the master commit log

[02:16:11.0000] <annevk>
foolip: e.g., the "Do not guess UTF8 encoding" commit is repeated eight or so times

[02:16:23.0000] <Ms2ger>
annevk, yeah, it was turned off

[02:16:24.0000] <annevk>
foolip: master commit log of web-platform-tests

[02:16:32.0000] <annevk>
Okay

[02:16:48.0000] <annevk>
(also, that commit seems wrong, seems better to just remove that test as it's invalid)

[02:16:53.0000] <Ms2ger>
http://logs.glob.uno/?c=w3%23testing#c12509

[03:03:16.0000] <annevk>
mkwst_: I thought I suggested hiding nonces at some point

[03:04:34.0000] <annevk>
mkwst_: https://github.com/w3c/webappsec-csp/issues/65

[03:36:43.0000] <zcorpan>
another anecdote that tests+bugs is working well (also cdumez++) https://bugs.webkit.org/show_bug.cgi?id=168358

[04:38:08.0000] <annevk>
Anyone able to make alert(someWindow.location) return a javascript URL?

[04:56:11.0000] <zcorpan>
annevk: var alert = () => new URL('x:');

[04:56:33.0000] <zcorpan>
:-P

[04:56:54.0000] <zcorpan>
Did not manage to break someWindow.location though

[04:57:50.0000] <annevk>
hah

[05:04:50.0000] <zcorpan>
maybe an attack could be to somehow confuse the script about what someWindow is

[05:05:50.0000] <annevk>
zcorpan: I wasn't really looking for an attack though

[05:06:04.0000] <annevk>
zcorpan: just a scenario where the Location object represents a javascript URL

[05:06:39.0000] <zcorpan>
oh a javascript:"something" URL. not an instance of window.URL

[05:07:53.0000] <annevk>
yeah

[05:08:30.0000] <annevk>
zcorpan: apologies if I just wasted a bunch of time due to a poor question

[05:08:48.0000] <Ms2ger>
I understood the question :)

[05:19:13.0000] <zcorpan>
annevk: this is about the check in .hash getter?

[05:20:38.0000] <annevk>
zcorpan: yeah

[05:27:00.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4896 works in gecko. but seems like a bug per html standard

[15:31:41.0000] <KiChjang>
when reading the specs, i often come across notes that say something like "these (sub)steps are only done when ..."

[15:32:06.0000] <KiChjang>
does the note apply to the text above or below the note?

[15:52:39.0000] <jsbell>
KiChjang: do you have an example? That sounds like a pattern used in older specs, before we started using a more algorithmic style.

[15:53:23.0000] <KiChjang>
yes, one sec

[15:54:05.0000] <KiChjang>
jsbell, https://xhr.spec.whatwg.org/#dom-xmlhttprequest-send

[15:54:06.0000] <KiChjang>
step 10

[15:54:24.0000] <KiChjang>
the part where it says "To process request body..."

[15:57:19.0000] <jsbell>
Ah... well, after staring at that one, that appears to refer to the preceding steps. That's a rather complex algorithm.

[15:58:11.0000] <jsbell>
We tend to have notes like that annotating what's above it.

[15:59:27.0000] <jsbell>
(Usually to decipher some complex normative text into something actually comprehensible.)


2017-02-18
[16:02:21.0000] <KiChjang>
i see, that's my hunch as well

[16:02:24.0000] <KiChjang>
but i couldn't be sure

[16:02:42.0000] <KiChjang>
danke

[06:14:08.0000] <XhmikosR>
I wonder for Referrer-Policy should one use `Header always set` or `Header set`?

[06:35:53.0000] <annevk>
XhmikosR: difference is?

[06:36:57.0000] <XhmikosR>
http://httpd.apache.org/docs/current/mod/mod_headers.html#header

[06:37:12.0000] <XhmikosR>
for example for HSTS I use `always set`

[06:53:33.0000] <annevk>
Still not sure what always means, includes non-2xx responses? I guess that is what you want


2017-02-19
[17:22:23.0000] <kiwi_79460>
DOM says "Event listeners key off the event’s `type` attribute value"

[17:22:24.0000] <kiwi_79460>
What does it mean?

[22:01:24.0000] <annevk>
kiwi_79460: they use that value as a key for matching

[22:02:29.0000] <annevk>
kiwi_79460: so when an event is dispatched, that value is compared against listeners

[22:05:52.0000] <kiwi_79460>
annevk: I see.

[22:06:37.0000] <kiwi_79460>
annevk: "key off" doesn't seem to be a commonly used phrase...

[22:06:41.0000] <kiwi_79460>
annevk: although I'm not a native speaker

[22:06:52.0000] <kiwi_79460>
annevk: arigatou

[22:07:10.0000] <annevk>
kiwi_79460: you can file an issue

[22:07:24.0000] <annevk>
kiwi_79460: happy to adjust the wording

[15:37:27.0000] <gsnedders>
https://savannah.gnu.org/bugs/?50357 *sighs*

[15:43:02.0000] <caitp>
the good news is you can fork xgettext and release your own more better version and market it through your private organization and give 0 attribution to GNU, as the good lord intended


2017-02-20
[18:46:33.0000] <MikeSmith>
expected better than that from Bruno Haible

[18:48:04.0000] <MikeSmith>
side note: I’m trying to imagine how much worse that bug-tracking tool could be in terms of usability

[18:50:19.0000] <MikeSmith>
I gues that’s one more way the GNU Project is contributing to the greater good: Their Web-based systems are so consistently horrible and user-hostile that they make everybody else’s bad systems seem tolerable

[19:39:55.0000] <MikeSmith>
just when you thought there’s no way the “The is="" attribute is confusing? Maybe we should encourage only ES6 class-based extension” issue discussion could get any worse, csuwildcat shows up https://github.com/w3c/webcomponents/issues/509#issuecomment-280864156

[19:40:16.0000] <MikeSmith>
somebody should lock that conversation

[21:57:22.0000] <annevk>
gsnedders: UTR #22 is best ignored though

[22:21:03.0000] <MikeSmith>
annevk: what should be referenced instead of UTR #22?

[22:24:11.0000] <MikeSmith>
https://encoding.spec.whatwg.org/#concept-encoding-get I guess

[22:26:12.0000] <annevk>
MikeSmith: yup

[22:27:23.0000] <annevk>
MikeSmith: treating shift-jis as shift_jis breaks sites for instance

[22:27:59.0000] <MikeSmith>
oh

[22:49:43.0000] <MikeSmith>
gsnedders: point out to Bruno that groff also uses “utf8” https://www.haible.de/bruno/packages-groff-utf8.html

[00:03:09.0000] <annevk>
The reason "utf8" works in Encoding is because we made it a label for "utf-8"

[00:03:24.0000] <annevk>
Not all browsers accepted that though until recently, Edge didn't for instance

[02:04:26.0000] <annevk>
mkwst_: could you comment on https://github.com/whatwg/html/pull/2365?

[02:27:51.0000] <mkwst_>
annevk: Commented, thanks for the ping.

[02:32:00.0000] <annevk>
mkwst_: thanks, I think per that answer I'm going to close your URL PR for this and also resolve the URL legacy bug stating we need to do something here

[02:32:11.0000] <annevk>
mkwst_: providing forward pointers to this PR

[02:32:41.0000] <mkwst_>
That sounds fine. I think we might want to move it in the future, but I'm happy to wait until we have a reason to do so.

[02:53:10.0000] <Ms2ger>
Funny how we had whining about for-const-of for a week, and it was removed within two days

[02:54:12.0000] <gsnedders>
annevk: but then you get into the whole discussion as to whether that is a standard, and UTRs seemed less of a risk for that

[02:54:44.0000] <annevk>
gsnedders: if you want to hand out wrong advice, be my guest

[02:55:21.0000] <annevk>
Ms2ger: not sure I'd qualify it as whining and nothing really got resolved so you'll continue to encounter this

[02:55:48.0000] <gsnedders>
annevk: also there's the question as to whether Encoding will ever get adoption outside of the web space

[02:57:03.0000] <Ms2ger>
Okay, maybe not whining... How do you feel about "being an antisocial jackass"?

[02:57:36.0000] <annevk>
Ms2ger: I think you're pretty close to violating the CoC

[02:58:49.0000] <annevk>
gsnedders: I think Go uses it, but maybe that still counts as web

[02:59:20.0000] <gsnedders>
annevk: success in that sense would be ICU, Win32, macOS's APIs adopting it, IMO

[02:59:31.0000] <gsnedders>
annevk: and I don't think there's been any indication that there's even a vague intention of?

[03:00:10.0000] <annevk>
gsnedders: Chrome might have discussed upstreaming to ICU, but I doubt ICU would start removing stuff, indeed

[03:00:54.0000] <annevk>
gsnedders: those platforms have obvious legacy too, the question is what new platforms will do

[03:07:10.0000] <gsnedders>
annevk: the problem, when almost nothing outside of browsers has any planned intention to support it, is that it's easy to dismiss as a web-specific thing

[03:07:25.0000] <gsnedders>
annevk: hell, non-web stuff may well rely on more encodings and different alias matching

[03:08:20.0000] <annevk>
gsnedders: and different decoding and encoding rules? Could be, but the web is bigger than all those places and more easily leaks into them than the other way around

[03:09:17.0000] <annevk>
gsnedders: actually, as for new platforms, they should probably stick to UTF-8

[03:10:19.0000] <annevk>
gsnedders: any more thoughts on https://github.com/whatwg/url/issues/233 btw while you're here?

[04:25:09.0000] <annevk>
jgraham: created a fairly minimal PR for raw_headers

[04:49:14.0000] <jgraham>
annevk: Thanks!

[05:02:37.0000] <annevk>
jgraham: I want to checkout an old branch on WPT and I get "The following untracked working tree files would be overwritten by checkout"

[05:02:47.0000] <annevk>
jgraham: followed by a bunch of tools/ stuff

[05:04:30.0000] <annevk>
Ah, git checkout -f

[05:20:04.0000] <annevk>
jgraham: when will the new wptserve be used by WPT?

[05:20:38.0000] <jgraham>
annevk: When I update the submodule pointer

[05:20:45.0000] <jgraham>
Just looking at another review first

[05:33:17.0000] <jgraham>
annevk: Done

[07:04:00.0000] <annevk>
I wish I had not neglected WPT for so long and hope somebody else would take care of it 😟

[07:04:08.0000] <annevk>
That strategy never works

[07:04:12.0000] <jgraham>
?

[07:04:32.0000] <annevk>
jgraham: going through various labels of standards I edit and feeling bad

[07:04:43.0000] <annevk>
jgraham: currently cleaning up the XMLHttpRequest backlog

[07:04:51.0000] <jgraham>
Ah, yeah

[07:04:59.0000] <jgraham>
Getting people to review tests is hard

[07:09:26.0000] <JonathanNeal>
What was the motivation behind sectioning roots? And how were the elements defined as sectioning roots determined? https://developers.whatwg.org/sections.html#sectioning-root

[07:36:20.0000] <wanderview>
JakeA: annevk: so, uh... are we moving ahead on the fetch cancelation thing?  what is the next step?

[07:36:37.0000] <JakeA>
wanderview: I guess we need to design the APIs

[07:36:46.0000] <annevk>
wanderview: I'm kinda hoping JakeA will take the lead

[07:36:51.0000] <JakeA>
It's on my TODO list to circle back on that

[07:37:00.0000] <JakeA>
I guess I should give it some priority

[07:37:07.0000] <wanderview>
I feel like its something we should ship in 2017 if we can

[07:37:09.0000] <annevk>
I've mostly been fixing bugs URL/Fetch/XMLHttpRequest and their tests, and also some HTML work

[07:37:15.0000] <JakeA>
Let me spend tomorrow on it

[07:37:35.0000] <wanderview>
/me notes JakeA will solve fetch cancellation tomorrow.

[07:37:39.0000] <wanderview>
/me goes to tweet...

[07:37:40.0000] <JakeA>
haha

[07:37:44.0000] <wanderview>
j/k

[07:37:48.0000] <annevk>
Let's see, two weeks from now I should be able to help out more

[07:38:00.0000] <annevk>
I'd like to get WPT more into shape this week and next week I've some meetings

[07:39:03.0000] <wanderview>
I need to write a WPT test, but can't decide where to put it

[07:39:31.0000] <wanderview>
need to test referrer header on fetch/xhr from worker script when the worker script was redirected

[07:39:50.0000] <wanderview>
does that go in fetch, workers, or some security dir?

[07:42:29.0000] <annevk>
wanderview: fetch/ seems fine

[07:42:37.0000] <annevk>
wanderview: fetch/ has lots of worker tests already

[07:42:52.0000] <wanderview>
well, referrer-policy/generic tests are disabled currently

[07:42:53.0000] <annevk>
wanderview: and some referrer tests as it has referrer features

[07:43:13.0000] <annevk>
wanderview: in fetch/ or in Gecko?

[07:43:21.0000] <wanderview>
claims because of https://github.com/w3c/web-platform-tests/issues/1874

[07:43:29.0000] <wanderview>
which was fixed 1.5 years ago

[07:43:33.0000] <wanderview>
maybe we can turn them back on

[07:43:37.0000] <wanderview>
/me sighs

[07:44:52.0000] <wanderview>
I guess thats just a subset of tests

[08:28:47.0000] <annevk>
Domenic: how does IDB work?

[08:51:13.0000] <zcorpan>
annevk: LOL I tried to review the PR review PR for quirks, and only noticed after merging that the source file is not named quirks.bs

[08:51:31.0000] <zcorpan>
annevk: but maybe we can rename it to that

[08:54:40.0000] <zcorpan>
annevk: does that need a change to .htaccess or something?

[08:55:58.0000] <annevk>
zcorpan: we can change the name in pr-preview too

[08:56:31.0000] <annevk>
zcorpan: not sure why .htaccess needs changes

[08:57:06.0000] <annevk>
zcorpan: tobie can maybe help, bit busy atm

[08:57:33.0000] <zcorpan>
annevk: I thought there was a DirectoryIndex Overview.html

[08:58:41.0000] <zcorpan>
I can look at this again tomorrow.

[08:59:50.0000] <tobie>
zcorpan: that's fine. Just edit the config file.

[09:00:37.0000] <zcorpan>
tobie: thx

[09:02:15.0000] <annevk>
zcorpan: I cleaned that up already

[09:02:38.0000] <annevk>
zcorpan: Travis generates index.html resources

[09:05:16.0000] <gsnedders>
hsivonen: if you're about at all, I'd be curious to hear your opinion on what level HTML sanitizers should work; rubys' (IIRC) Python one in html5lib originally worked by intercepting tokens between the tokenizer and the tree constructor, but that seems fragile. Seems better to post-process the tree, IMO?

[09:07:32.0000] <wanderview>
oh, I guess we fixed the spelling of referer with referrer-policy

[09:11:00.0000] <wanderview>
the referrer-policy tests are kind of hard to understand...

[09:11:39.0000] <gsnedders>
that's confusing

[09:13:07.0000] <annevk>
gsnedders: post-process on tree, how does that work with scripts?

[09:13:42.0000] <gsnedders>
annevk: does any sanitizer execute scripts or do anything but strip them?

[09:14:03.0000] <wanderview>
annevk: if there is a referrer-policy on the top level worker script, but also a different referrer-policy on an importScripts() script... which policy should the worker have at the end?

[09:14:36.0000] <annevk>
gsnedders: dunno, but worth thinking about since people keep asking for browsers to solve

[09:15:20.0000] <annevk>
wanderview: worker has top-level

[09:15:29.0000] <gsnedders>
annevk: if you're sanitizing something, surely you have to treat it as totally untrusted which means you must not execute scripts

[09:15:38.0000] <wanderview>
annevk: meaning only the header on the top level worker script should apply?

[09:15:52.0000] <annevk>
wanderview: yeah

[09:16:07.0000] <wanderview>
annevk: I'll write a test for that... since we don't do that right

[09:16:43.0000] <annevk>
wanderview: you cannot update the global policy through importScripting a resource with diff policy

[09:16:47.0000] <annevk>
wanderview: wow

[09:16:58.0000] <annevk>
And thanks

[09:17:05.0000] <wanderview>
annevk: all of this is a mess

[09:17:08.0000] <wanderview>
in gecko

[09:17:35.0000] <wanderview>
annevk: I regressed referrer on redirected worker scripts because we don't have tests for that... fixing in https://bugzilla.mozilla.org/show_bug.cgi?id=1340652

[09:17:48.0000] <wanderview>
and just noticing other broken referrer stuff in workers

[09:18:07.0000] <annevk>
gsnedders: maybe not nonce scripts, but I was more thinking they might have executed by the time you propose to remove them

[09:18:57.0000] <annevk>
wanderview: appreciate you going down the rabbit hole

[09:19:14.0000] <annevk>
wanderview: try to follow such a policy myself too

[09:21:41.0000] <wanderview>
we have a lot of disabled referrer-policy tests as well: https://dxr.mozilla.org/mozilla-central/search?q=disabled+path%3Aweb-platform%2Fmeta%2Freferrer-policy&redirect=false

[09:38:40.0000] <annevk>
wanderview: stumbled across https://github.com/w3c/web-platform-tests/issues/2618


2017-02-21
[01:08:41.0000] <annevk>
In WPT, how do you change "http://{{host}}:{{ports[http][0]}}/" into something that omits the port when it's the default port?

[01:09:43.0000] <annevk>
gsnedders: why does http://web-platform-tests.org/writing-tests/testharness-api.html host the content in an <iframe>?

[01:11:04.0000] <annevk>
I can never find documentation for that syntax either

[01:12:43.0000] <annevk>
Sigh, this is all so broken

[01:15:37.0000] <annevk>
Put your thoughts in https://github.com/w3c/web-platform-tests/issues/2618 if you're reading this and now how to fix it

[01:32:59.0000] <zcorpan>
annevk: http://wptserve.readthedocs.io/en/latest/pipes.html

[01:33:40.0000] <zcorpan>
annevk: omitting default port is something you'd have to do in javascript I believe. There's no substitution feature for that in wptserve

[01:33:55.0000] <annevk>
Sigh

[01:34:16.0000] <annevk>
You'd think these kind of things would be common enough to be abstracted by now

[01:34:40.0000] <annevk>
There's a bunch of logic in fetch/ somewhere for this and I've seen it in various other places too

[01:34:48.0000] <annevk>
It all looks rather brittle

[01:38:10.0000] <annevk>
jgraham: https://github.com/w3c/web-platform-tests/pull/3451 has gone for six months without review, can I just land it then?

[01:45:10.0000] <zcorpan>
annevk: reviewed and merged

[01:46:54.0000] <annevk>
thanks

[01:47:26.0000] <annevk>
zcorpan: https://github.com/w3c/web-platform-tests/labels/XMLHttpRequest has three more at the top looking for review

[01:54:15.0000] <zcorpan>
annevk: is there an issue or PR where URLSearchParams was added to BodyInit?

[02:11:56.0000] <annevk>
zcorpan: no

[02:12:11.0000] <annevk>
zcorpan: I think it was there in Fetch from the start and then XHR was refactored

[02:12:19.0000] <annevk>
zcorpan: but I might be mistaken

[02:13:51.0000] <annevk>
zcorpan: are you filing browser bugs?

[02:13:59.0000] <zcorpan>
annevk: yes

[02:14:06.0000] <zcorpan>
filed one for chromium

[02:14:14.0000] <zcorpan>
trying to figure out if Edge needs an issue

[02:14:29.0000] <annevk>
zcorpan: it might be that Chrome fails due to not supporting the constructor I used

[02:15:36.0000] <zcorpan>
annevk: no, the constructor works afaict

[02:15:58.0000] <zcorpan>
but URLSearchParams does not exist in Edge 13

[02:21:36.0000] <zcorpan>
per http://caniuse.com/#feat=urlsearchparams does not exist in 14/15 either

[02:38:10.0000] <annevk>
jgraham: I get 'Request' object has no attribute 'raw_headers' and _raw_headers still seem to exist

[02:38:34.0000] <annevk>
jgraham: no submodule mismatch is reported and when I manually go into tools/wptserve/wptserve/ it does say raw_headers without _ prefix

[03:00:14.0000] <jgraham>
annevk: You did |git submodule update --recursive| ?

[03:00:37.0000] <annevk>
jgraham: yes, otherwise I would have outstanding changes

[03:03:21.0000] <jgraham>
annevk: Well it's working here

[03:03:37.0000] <jgraham>
def main(request, response): return [("Content-Type", "text/plain")], str(request.raw_headers)

[03:05:13.0000] <annevk>
jgraham: I get AttributeError: 'Request' object has no attribute 'raw_headers' if I load that file

[03:06:37.0000] <jgraham>
annevk: Which commit are you on?

[03:07:08.0000] <annevk>
jgraham: https://github.com/w3c/web-platform-tests/commit/d19fe427d7670a71ba55206208a6515303590b5b

[03:07:28.0000] <annevk>
jgraham: if I open tools/wptserve/wptserve/request.py it does say raw_headers

[03:07:42.0000] <annevk>
hmm

[03:08:14.0000] <annevk>
jgraham: apologies, forgot to restart the server

[03:08:29.0000] <annevk>
jgraham: I just keep that thing running forever, didn't think about it

[03:10:30.0000] <jgraham>
OK, np :)

[03:24:53.0000] <JakeA>
What tools do people use to validate webidl?

[03:25:31.0000] <annevk>
bz

[03:25:42.0000] <tobie>
:D

[03:25:43.0000] <annevk>
Bikeshed too I suppose

[03:26:32.0000] <tobie>
Yup. Bikeshed won't let you write grammatically incorrect WebIDL.

[03:26:38.0000] <JakeA>
yeah, I'm at an earlier stage than bikeshed :D

[03:26:43.0000] <JakeA>
Actually, maybe that's wrong

[03:26:53.0000] <JakeA>
I should just start specing

[03:27:27.0000] <tobie>
It will however let you write WebIDL that's grammatically correct but otherwise not.

[03:29:15.0000] <annevk>
zcorpan: did you ever conclude URL + encoding bugs/tests?

[03:29:29.0000] <annevk>
zcorpan: I find XMLHttpRequest/open-url-encoding.htm still failing everywhere

[03:35:23.0000] <zcorpan>
annevk: i think i did not report browser bugs

[03:39:47.0000] <zcorpan>
annevk: tests in html/infrastructure/urls/resolving-urls/query-encoding

[03:42:17.0000] <annevk>
zcorpan: running query-encoding/windows-1251.html I get numerous Python errors

[03:42:34.0000] <zcorpan>
annevk: yeah, i just noticed that as well. :-(

[03:42:47.0000] <annevk>
zcorpan: it's also probably too big to reliably run on Chrome's testing servers which seem to have weird limits

[03:46:52.0000] <zcorpan>
annevk: filed https://github.com/w3c/web-platform-tests/issues/4934

[05:33:16.0000] <annevk>
zcorpan: note that Chrome does pass XMLHttpRequest/send-usp.html so I think it's the constructor that's the problem

[05:33:27.0000] <annevk>
(I didn't know that test existed)

[06:26:16.0000] <gsnedders>
annevk: the reason why testharness docs are in an iframe is because they're in a submodule and we can't get them onto the site on GitHub Pages without duplicating the submodule (with the risk of it ending up at a different revision than at /resources). There's a Jekyll bug on this and GitHub are happy to have something that fixes it, but obviously it needs fixed and then released and then gone ...

[06:26:22.0000] <gsnedders>
... live on GitHub Pages before it can be fixed

[06:27:04.0000] <annevk>
We could also not use GitHub Pages?

[06:27:23.0000] <annevk>
Write some kind of build script and push out HTML using rsync?

[06:27:45.0000] <annevk>
Does GitHub Pages have HTTPS for custom domains?

[06:30:16.0000] <gsnedders>
annevk: I was trying to avoid that, as it gets a bit fragile a bit too easily (push two things seconds after one another, whichever website build completes last on Travis goes live)

[06:31:21.0000] <gsnedders>
(we can totally come up with ways to avoid that, but it potentially makes the travis website build jobs slow)

[06:31:39.0000] <annevk>
It hasn't been a problem for any WHATWG Standard

[06:32:45.0000] <gsnedders>
/me guesses none get the same number of pushes per day as wpt

[06:33:09.0000] <jgraham>
annevk: Only https if you use cloudflare, which isn't really

[06:33:13.0000] <annevk>
gsnedders: even so, if you count the number of changes to WPT documentation...

[06:33:19.0000] <annevk>
jgraham: :/

[06:33:41.0000] <jgraham>
I would be happy to use real hosting, but that might mean building a deployment pipeline

[06:34:09.0000] <annevk>
jgraham: https://github.com/whatwg/whatwg.org is what we use for whatwg.org, it's fairly trivial

[06:34:44.0000] <annevk>
jgraham: just need a server you can talk to over SSH and Travis CI

[06:38:04.0000] <gsnedders>
/me thinks the simplicity of the current setup is a feature, esp. given the two big issues (testharness.js docs and HTTPS) will get fixed

[06:38:16.0000] <jgraham>
They will?

[06:38:38.0000] <jgraham>
In any case, for the short term I don't have any time and I would prefer gsnedders work on CSSWG merge

[06:38:47.0000] <annevk>
HTTPS for GitHub Pages has been a problem forever

[06:39:09.0000] <jgraham>
So I guess if someone steps up to do it I'm pretty happy to pay for the hosting or whatever

[06:39:13.0000] <annevk>
Fair, although the current documentation state feels shittier than before

[06:39:45.0000] <jgraham>
Well it's better in that the documentation is easier to find and keep up to date

[06:39:56.0000] <jgraham>
But worse in that it isn't https

[06:40:06.0000] <jgraham>
Overall it seems like a win with a notable regression

[06:40:25.0000] <annevk>
The <iframe> is pretty bad

[06:40:31.0000] <jgraham>
Oh yeah that too

[06:41:00.0000] <jgraham>
But we will monorepo everything, which might help with that

[06:41:02.0000] <annevk>
Links to wptserve documentation have gone missing

[06:41:14.0000] <gsnedders>
annevk: HTTPS on github.io happened eventually, and AIUI custom domains will get HTTPS "soon"

[06:41:24.0000] <annevk>
gsnedders: pointer?

[06:41:36.0000] <gsnedders>
annevk: sadly can't remember where I saw that

[06:43:01.0000] <annevk>
gsnedders: https://github.com/isaacs/github/issues/156 has nothing it seems

[06:43:21.0000] <gsnedders>
annevk: tbf that's an unofficial third-party issue tracker

[06:43:41.0000] <annevk>
sure, but if you saw something I'd imagine it would at least be mentioned there

[07:06:51.0000] <gsnedders>
/me dislikes that cloning wpt requires cloning the entire history of all of the vendored modules

[07:09:24.0000] <jgraham>
annevk: How does one (in specese) create a function body from some text and execute it, these days?

[07:09:47.0000] <jgraham>
Asking for WebDriver, which needs to be updated for recent changes in HTML

[07:09:55.0000] <jgraham>
(where recent is actually quite a long time(

[07:10:10.0000] <jgraham>
gsnedders: Why wouldn't it

[07:10:13.0000] <annevk>
jgraham: best to ask Domenic that question

[07:11:13.0000] <gsnedders>
jgraham: every other Python project I know just uses `pip install -t _vendor` rather than including the entire git history of the project they're depending on, especially given not everything lives in git

[07:15:27.0000] <gsnedders>
(which we do actually do for py already)

[07:17:58.0000] <jgraham>
gsnedders: But we had a no-pip policy and the submodules will go away anyway

[07:18:09.0000] <jgraham>
Domenic: ^

[07:20:24.0000] <gsnedders>
jgraham: no, I mean you commit the output of that

[07:24:12.0000] <annevk>
Submodules are going? 🎉

[07:24:40.0000] <jgraham>
gsnedders: Seems like it would make updating even worse than it already is

[07:39:26.0000] <gsnedders>
Anyone have preferences on <https://github.com/w3c/wpt-tools/pull/37>?

[07:48:55.0000] <Ms2ger>
-1

[08:15:58.0000] <Domenic>
jgraham: is your string like `function (x, y) { ... }` or is it like `...` ? (i.e., full function, or just function body)?

[08:18:06.0000] <jgraham>
Domenic: Just function body

[08:19:27.0000] <jgraham>
(I guess there is a reasonable question about whether that's a good idea given it's supposed to be possible to pass arguments into the function, but I think it would be hard to change at this point)

[08:19:28.0000] <Domenic>
jgraham: I think the easiest way will be CreateDynamicFunction(%Function%, undefined, "normal", << bodyText >>)

[08:19:34.0000] <Domenic>
Using https://tc39.github.io/ecma262/#sec-createdynamicfunction

[08:20:24.0000] <Domenic>
You could also extract out the parts of that that actually do stuff in your no-parameters normal-function case, which will be like 6 steps

[08:20:40.0000] <jgraham>
Domenic: OK. And what does one need to do to arrange for such a function to be executed?

[08:21:01.0000] <Domenic>
Call(func, thisArg, argsList)

[08:21:15.0000] <Domenic>
Using https://tc39.github.io/ecma262/#sec-call

[08:21:58.0000] <JakeA>
annevk: wanderview: I lied about getting to fetch cancelation today. Tomorrow…

[08:22:17.0000] <jgraham>
Domenic: OK. There isn't any HTML-specific part here? It seems like scripts and event handler attributes have some extra boilerplate

[08:23:08.0000] <wanderview>
np

[08:23:53.0000] <Domenic>
jgraham: oh, hmm... well if you need to track incumbent and entry settings objects correctly, which I guess you probably do, then yeah, you need to prepare to run script + prepare to run a callback. But you could make Web IDL do that for you by converting the created function to a  Web IDL callback type (Web IDL's `Function` type should work) then using Web

[08:23:54.0000] <Domenic>
IDL's "invoke a callback function" algorithm.

[08:24:42.0000] <wanderview>
JakeA: I'd just love to have a proposal we can vote on at the April meeting if we can

[08:32:15.0000] <jgraham>
Domenic: OK, thanks, will suggest that

[08:38:51.0000] <annevk>
wanderview: would prefer async agreement

[08:39:27.0000] <wanderview>
annevk: well, I meant async agreement as much as we can, but then with other browser vendors in the room agree we are moving forward if we can

[09:40:43.0000] <Ms2ger>
For people who are interested in script execution stuffs and hadn't seen it yet: https://bugzilla.mozilla.org/show_bug.cgi?id=1340145

[09:46:42.0000] <TabAtkins>
JonathanNeal: The sectioning roots are all elements whose semantics mean that they can reasonably be given a heading.  Versus other elements that are all pieces of text or other info *within* a section.

[09:47:15.0000] <TabAtkins>
JakeA: Yeah, just start writing stuff down right away.  `bikeshed template > index.bs`, and start hacking, it's just the easiest way to record stuff.

[09:48:13.0000] <annevk>
"I understand all that" proceeds with not understanding

[09:49:12.0000] <JakeA>
wanderview: promise to have it by then. Still aiming for tomorrow

[09:49:46.0000] <JakeA>
TabAtkins: i did https://rawgit.com/WICG/background-fetch/master/

[09:50:18.0000] <TabAtkins>
JakeA: Set your github.io branch to be master, stop using rawgit. ^_^

[09:53:33.0000] <JakeA>
TabAtkins: yes, thanks tabsplainer, I don't have permission to do that on the WICG, but I've requested it.

[09:53:45.0000] <JakeA>
😀

[09:53:50.0000] <TabAtkins>
ur welcome

[12:47:01.0000] <felixjet>
when i insert "UI text", like for example: "We are hiring, join us." (and a <a> tag after that with a call to action link), should i put that phrase between <p>? Because i'm using <div> or <span> most of the time, and only using <p> when it's not "UI text"

[12:47:54.0000] <TabAtkins>
Semantically, paragraphs are implicit; <p> just helps mark them up when you have several in succession, and aids in styling.

[13:11:06.0000] <felixjet>
oh

[13:29:57.0000] <zcorpan>
annevk: fyi https://github.com/w3c/webauthn/issues/354

[13:32:39.0000] <gsnedders>
/me wonders if anyone has modelled WebAuthn in ProVerif

[13:33:20.0000] <gsnedders>
Because I really feel like core security stuff that we're baking into browsers at this point should be proven secure to start with.

[13:34:07.0000] <gsnedders>
Yes, that doesn't stop side-channel attacks, and no, it will never be complete because people will discover new attacks.

[13:52:57.0000] <jyasskin>
gsnedders: That seems like a good request to file a github issue about. I tend to trust the security folks who did FIDO, but a formal verification can't hurt.

[13:56:38.0000] <gsnedders>
jyasskin: INRIA did stuff on FIDO, but ofc the Web Authn isn't exactly that

[13:56:51.0000] <gsnedders>
AFAIK INRIA are doing stuff on the W3C stuff

[13:57:02.0000] <gsnedders>
but I'd *love* to see some of this presented as part of the moving to PR stage

[13:57:58.0000] <jyasskin>
+1.


2017-02-22
[23:43:37.0000] <FND>
hi - if I have nested custom elements (`foo-main > foo-sub`, server-rendered HTML), can I rely on a specific order of `connectedCallback`s firing?

[23:43:54.0000] <FND>
empirically, it seems that nested components are initialized first

[23:54:32.0000] <annevk>
FND: I think in-out is defined, yes, but you shouldn't rely on that as the tree can be manipulated at random

[23:55:15.0000] <FND>
yeah, I'm aware of the latter - but in this case, the sub-components are effectively internal, so under my control

[23:55:50.0000] <FND>
I couldn't find anything on that in-out order, but I'll just take your authority for it :)

[23:56:35.0000] <annevk>
I wouldn't, I just recall this being discussed

[23:59:15.0000] <FND>
fair enough - I'll keep searching for an authoritative reference then, thanks though

[00:00:05.0000] <annevk>
FND: it should be defined between https://dom.spec.whatwg.org/ and https://html.spec.whatwg.org/multipage/

[00:00:32.0000] <annevk>
FND: in particular I guess you want to study the parser section of HTML

[00:00:42.0000] <annevk>
(and follow the links from there)

[00:01:15.0000] <FND>
excellent, will do (after I've checked out of my hotel though, so bbl)

[00:03:21.0000] <MikeSmith>
annevk: did anybody get you a solution to that that WPT port thing from yesterday?

[00:04:53.0000] <annevk>
MikeSmith: "use JavaScript" is what I got

[00:05:43.0000] <MikeSmith>
hmm that’s not a terrifically satisfying answer

[00:08:13.0000] <annevk>
MikeSmith: given WPT staff lack of time, I think it's all we got until someone learns more about wptserve and fixes it somehow

[00:08:44.0000] <annevk>
MikeSmith: you basically want something like {{hostport}} that leaves out the port if it happens to be the default

[00:09:05.0000] <annevk>
MikeSmith: and a standardized JavaScript library to deal with cross-origin tests wouldn't be bad to have either

[00:10:16.0000] <MikeSmith>
yeah that cross-origin library thing is more work of course but the port thing would not be a big level of effort

[00:10:34.0000] <MikeSmith>
though I guess once I start saying that somebody will suggest I just implement it then

[00:10:55.0000] <annevk>
wptserve also lacks instructions for how to run it and test it which makes it a little scary

[00:11:08.0000] <MikeSmith>
there is not way to test it

[00:11:23.0000] <MikeSmith>
well, we have not tests at least

[00:11:30.0000] <MikeSmith>
*no tests

[00:11:37.0000] <annevk>
It seems to have some tests when I browsed through the code

[00:11:51.0000] <annevk>
But I didn't add any when I added support for raw_headers and jgraham didn't seem to care either

[00:11:54.0000] <MikeSmith>
oh well then that’s better than I though

[00:12:07.0000] <annevk>
Because it was very much unclear how they'd work

[00:13:15.0000] <MikeSmith>
I’ve never provided tests for changes I make to WPT infrastructure, nor required anybody else to when I review PRs

[00:14:19.0000] <MikeSmith>
which is unfortunate I guess

[00:14:45.0000] <Ms2ger>
Both wptserve and wpt-tools have a bunch

[00:15:16.0000] <annevk>
A bunch?

[00:15:21.0000] <annevk>
I saw like six tests

[00:28:42.0000] <tobie>
Neither testharness nor idlharness have tests either, fwiw.

[00:29:31.0000] <tobie>
I'm not sure that anyone has a clear idea of what the latter precisely tests, tbh.

[00:29:49.0000] <annevk>
idlharness tests a whole bunch

[00:30:06.0000] <annevk>
tobie: see http://w3c-test.org/XMLHttpRequest/interfaces.html for instance

[00:33:13.0000] <tobie>
annevk: a bunch seems to be the unit of measure over here.

[00:33:59.0000] <annevk>
tobie: making sure the object is properly exposed to JavaScript is a good thing to test

[00:34:15.0000] <tobie>
annevk: I gather from your discussion with Ms2ger above that a bunch is > 6

[00:34:58.0000] <annevk>
tobie: I think we're getting 1000s of individual tests from idlharness

[00:35:07.0000] <annevk>
tobie: probably more

[00:35:28.0000] <tobie>
annevk: sounds like my morning humor is falling short.

[00:35:42.0000] <annevk>
tobie: heh

[00:36:23.0000] <tobie>
annevk: dug into idlharness earlier this month.

[00:36:42.0000] <tobie>
annevk: it's very hard to figure out what's going on.

[00:37:21.0000] <tobie>
annevk: and given there are no tests for it, it's very hard to have a sense of what it's trying to achieve and how.

[00:38:20.0000] <tobie>
annevk: for example, how it's dealing with [SecureContext] and [Expose].

[00:38:53.0000] <tobie>
annevk: and how that ties into wpt-serve.

[00:39:51.0000] <annevk>
wptserve is the server component so that's kinda separate

[00:40:49.0000] <annevk>
I don't really know idlharness details though

[00:43:27.0000] <MikeSmith>
I guess the idlharness code it not a great model of clarity

[00:43:56.0000] <tobie>
annevk: well, it's not so separate. You need some communication between the two if you want to test SecureContext (behavior for both https and http) and Expose (ie test within workers and service workers) and wire the whole thing up.

[00:44:02.0000] <MikeSmith>
I’ve only just hacked stuff into it when I needed specific tests to run for IDL parts it did not support yet

[00:44:27.0000] <tobie>
MikeSmith: likewise.

[00:56:26.0000] <MikeSmith>
thing is, we don’t have a real owner for idlharness now

[01:12:50.0000] <annevk>
MikeSmith: https://github.com/w3c/web-platform-tests/pull/4801

[01:45:32.0000] <MikeSmith>
annevk: responded https://github.com/w3c/web-platform-tests/pull/4801#issuecomment-281619610

[02:06:25.0000] <jgraham>
What was the port issue?

[02:06:42.0000] <jgraham>
re: testing testharness.js it would require something like selenium

[02:06:52.0000] <jgraham>
Which is quite high overhead

[02:08:16.0000] <annevk>
jgraham: {{host}}:{{[http][0]}} doesn't work sometimes as it emits the default port (e.g., on w3c-test.org)

[02:08:24.0000] <annevk>
jgraham: so you want something like {{hostport}} instead

[02:08:50.0000] <jgraham>
Well that doesn't quite work either, since there are multiple ports

[02:09:37.0000] <annevk>
jgraham: it would help with https://github.com/w3c/web-platform-tests/issues/2618 at least

[02:10:29.0000] <annevk>
jgraham: I guess I could rewrite the test somehow though

[02:11:00.0000] <annevk>
jgraham: e.g., (new URL("/", location.href)).href would go a long way there

[02:11:16.0000] <jgraham>
My preferred solution at this point is to say that the tests don't work on a default port, because that particular brokenness affects a bunch of tests

[02:11:38.0000] <annevk>
jgraham: but that sucks for preview

[02:12:03.0000] <annevk>
jgraham: I guess then redirect w3c-test:80 to w3c-test:800

[02:12:10.0000] <jgraham>
And even supporting a default port doesn't actually fix the problem where sometimes you want to check default and non-default port behaviour

[02:12:33.0000] <jgraham>
Unless you *require* a default port, which is hard because it requires sudo to start the server

[02:12:51.0000] <jgraham>
annevk: Yeah, I was assuming moving w3c-test.org to serve on port 8000 or wahtever

[02:16:39.0000] <tobie>
jgraham: you could use something like karma (https://karma-runner.github.io/1.0/index.html).

[02:16:52.0000] <jgraham>
But if there's a strong desire to have hostport[http[0]] or similar then it is implementable

[02:18:49.0000] <jgraham>
tobie: I don't know if that's meaningfully different from using WebDriver

[02:19:38.0000] <jgraham>
Except it has a built-in server which might actually be a bad thing for our needs

[02:28:58.0000] <mkwst_>
jgraham: Speaking of default ports, we can't really test things like HSTS or upgrade-insecure-requests when the server isn't running on 80/443.

[02:29:09.0000] <mkwst_>
I don't have an answer, but it's somewhat annoying. :/

[02:32:31.0000] <tobie>
jgraham: I dunno, you mentioned selenium was quite high overhead. Karma's rather simple to setup.

[02:39:03.0000] <jgraham>
tobie: Well it still needs a real browser running (or something like Phantom which is a a real old version of WebKit), and still requires a webserver running, so I'm not sure which part of the complexity it addresses. "pip install selenium" is also pretty easy to set up, ignoring all the other stuff.

[02:39:41.0000] <jgraham>
mkwst_: Yeah. It would be nice if there was a way to override the default default ports in browsers or something, just for testing purposes

[02:40:19.0000] <mkwst_>
I suspect you'll find that that's non-trivial.

[02:40:20.0000] <jgraham>
But maybe that also doesn't work for some reason… maybe eventually we will just have to require root to run the tests. But that seems like it would cause a *lot* of pain

[02:40:29.0000] <mkwst_>
I know we have "80" and "443" hard-coded all over the place.

[02:40:36.0000] <mkwst_>
(In Chrome/Blink)

[02:40:41.0000] <jgraham>
Yeah, makes sense

[02:41:05.0000] <mkwst_>
Maybe worth cleaning up from a theoretical perspective, though!

[02:41:09.0000] <mkwst_>
GoodFirstBug.

[02:42:51.0000] <annevk>
They are hard-coded in standards as well...

[02:49:10.0000] <tobie>
jgraham: Travis lets you run tests on Firefox (maybe others?). Karma just plugs into that.

[02:50:33.0000] <jgraham>
Firefox on travis is very very old iirc

[02:52:21.0000] <Ms2ger>
jgraham, SpiderMonkey people are looking at running th.js tests in the js shell; we could perhaps use that for tests

[02:53:22.0000] <jgraham>
Ms2ger: Workers

[02:53:36.0000] <jgraham>
I assume that they wouldn't work

[02:53:54.0000] <Ms2ger>
Sure

[02:54:08.0000] <Ms2ger>
I guess it depends on what you want to test exactly

[02:54:46.0000] <jgraham>
Well something is better than nothing ofc, but since most of the complexity is around support for multiple globals and so on…

[02:55:28.0000] <jgraham>
Or, not multiple globals, but multiple possible global objects

[02:56:55.0000] <Ms2ger>
I think th.js is still very much in the "anything at all" stage :)

[03:02:23.0000] <tobie>
Likewise.

[03:02:59.0000] <tobie>
I'd just like to write a bunch of basic tests for idlharness just to check my assumptions from reading the program.

[03:23:57.0000] <annevk>
gsnedders: turns out we do hit the problem you mentioned: https://github.com/whatwg/meta/issues/20

[05:30:01.0000] <annevk>
hsivonen_: did you see https://github.com/w3c/web-platform-tests/labels/encoding?

[05:30:19.0000] <annevk>
hsivonen_: there's apparently quite a few encoding tests

[06:14:16.0000] <hsivonen_>
annevk: I saw them last year, but the encoder tests weren't usable in Firefox before I fixed URL query encoding encoder

[06:14:26.0000] <hsivonen_>
annevk: and then I forgot to re-examine the tests

[06:14:52.0000] <hsivonen>
I'll take another look once I have encoding_rs running in Gecko

[06:15:05.0000] <annevk>
hsivonen: sounds good, ping if you want help at that point

[06:15:21.0000] <annevk>
I'll wait until then

[06:16:14.0000] <hsivonen>
annevk: ok

[06:32:03.0000] <JakeA>
annevk: something seems to have broken with the formatting https://fetch.spec.whatwg.org/#fetch-method

[06:32:46.0000] <annevk>
JakeA: thanks, it's missing a leading newline, some weird Bikeshed thing

[06:33:04.0000] <annevk>
JakeA: I'll fix it as part of a PR I'm working on

[06:33:20.0000] <JakeA>
Cheers!

[09:50:18.0000] <wanderview>
JakeA: do you think it make sense to expose an "intercepting" or "synthesizing" values in FetchState?  to represent that the request is being handled by a service worker?

[09:54:07.0000] <JakeA>
wanderview: would that be an alternative to the "requesting" phase?

[09:54:14.0000] <wanderview>
also, I hope we can spec the priority stuff after landing cancelation

[09:54:57.0000] <JakeA>
wanderview: yeah, I think the current plan would allow us to land just cancellation, but not observation & priorities

[09:54:57.0000] <wanderview>
JakeA: well, I thought requesting implied actually opening a connection to the server or hitting the http cache

[09:56:49.0000] <JakeA>
wanderview: I maybe need to work on the naming. I was thinking "requesting" was before headers, and "responding" was until the body was read or connection was closed. My aim here is to allow these values to be used on no-cors without exposing anything new

[10:13:59.0000] <wanderview>
JakeA: right, but there are multiple stages "before headers"

[10:14:29.0000] <wanderview>
JakeA: I guess my question was if it would be useful to expose that level of granularity... both here and in performance timing data

[10:15:55.0000] <JakeA>
wanderview: yeah, not against it. We can just use something less granular for no-cors

[10:17:15.0000] <wanderview>
JakeA: I guess maybe its good to be conservative for now... just something I was thinking about

[10:17:35.0000] <wanderview>
sometimes I want to expose all the things

[10:18:16.0000] <wanderview>
like, I was thinking we could in theory expose something like Client.referrerPolicy or Client.contentSecurityPolicy to inspect those settings on a Client

[10:18:26.0000] <JakeA>
wanderview: I'm just nervous of creating new HEIST stuff

[10:18:38.0000] <wanderview>
but probably doesn't make sense without a use case

[10:18:46.0000] <wanderview>
sure

[10:36:49.0000] <wanderview>
JakeA: thanks for fleshing out the API

[10:41:00.0000] <JakeA>
Cheers! Finally got round to it 😀

[11:51:06.0000] <Domenic>
I guess a signal is what cancelable promises called a token

[12:38:06.0000] <TabAtkins>
Domenic: Yes; "signal" is the async contexts I've seen it is just "a promise, but we only pay attention to when it fulfills, not what it fulfills to".

[12:59:27.0000] <jyasskin>
TabAtkins: Does Shepherd get confused when a data-lt attribute is split across lines, like in https://html.spec.whatwg.org/multipage/browsers.html#is-a-registrable-domain-suffix-of-or-is-equal-to?

[12:59:48.0000] <TabAtkins>
It *shouldn't* - whitespace gets normalized to single spaces.

[12:59:56.0000] <TabAtkins>
But are you experiencing an issue?

[13:00:13.0000] <Domenic>
It might just not have indexed that yet, it was merged this morning IIRC?

[13:00:26.0000] <jyasskin>
'k. `bikeshed refs --text 'is a registrable domain suffix of or is equal to'` isn't returning any results, but it's totally possible the index is just out of date.

[13:06:40.0000] <TabAtkins>
let me go check

[13:07:42.0000] <jyasskin>
Thanks! <3 TabAtkins

[13:11:38.0000] <TabAtkins>
Yeah, def not in the db yet.


2017-02-23
[16:09:13.0000] <Domenic>
botie: ask zcorpan if he has any estimate for the <img> stuff? Maybe I should just work around it, for img.decode()?

[16:09:14.0000] <botie>
will do

[16:48:22.0000] <Domenic>
What a fun discovery https://github.com/whatwg/html/pull/2384

[17:53:15.0000] <JonathanNeal>
TabAtkins: i did not grok that sectioning roots just mean "they can reasonably have headings". What about the non-contributing part of their description? Related: https://github.com/w3c/html/issues/806

[18:02:32.0000] <TabAtkins>
JonathanNeal: That just means they're not appropriate to include into the document outline. That's a separate concept entirely.

[18:03:32.0000] <JonathanNeal>
How does that (separate concept) work? Is it translatable in terms of ATs and heading levels?

[18:27:56.0000] <MikeSmith>
JonathanNeal: FWIW I plan to change this outline implementation in the HTML checker to not treat anything except <body> as a “sectioning root”

[18:28:49.0000] <MikeSmith>
specifically <blockquote>, <details>, <fieldset>, <figure>, <td>

[19:06:37.0000] <MikeSmith>
JonathanNeal: https://github.com/validator/validator/commit/0789dc8b03bee75ba82f12af20b9785a161557bc

[19:06:59.0000] <MikeSmith>
and pushed to https://checker.html5.org and https://validator.w3.org/nu/

[19:08:48.0000] <MikeSmith>
https://checker.html5.org/?showoutline=yes&doc=https://output.jsbin.com/wulimo

[19:19:15.0000] <Domenic>
MikeSmith: this is not the "document outline" feature that is supposed to follow the spec, right? Just the "heading level outline" feature that is supposed to follow ATs?

[19:51:57.0000] <MikeSmith>
Domenic: no, both

[19:52:24.0000] <Domenic>
:/

[19:54:02.0000] <MikeSmith>
well I have not seen a convincing explanation of the rationale for hiding headings in “sectioning roots” in the outline

[19:54:28.0000] <MikeSmith>
nor have I seen any record of it ever having been discussed before it was added to the spec

[19:54:49.0000] <MikeSmith>
it is not intuitive to authors

[19:55:05.0000] <Domenic>
Just seems bad to mismatch the spec and any other outlining tools that are following it

[19:55:19.0000] <MikeSmith>
there is already a mismatch there

[19:55:35.0000] <Domenic>
Might be good to stop linking to the spec's document outline definition and call it Mike's outline instead then

[19:55:44.0000] <MikeSmith>
maybe so

[19:55:50.0000] <MikeSmith>
maybe other tools should do that too

[19:56:16.0000] <MikeSmith>
since nobody has ever implemented a conforming implementation of it

[19:56:46.0000] <MikeSmith>
among other things the other tools do not handle <hgroup> correctly at all

[19:57:08.0000] <MikeSmith>
because of the bad guidance that was in the spec about it all this time

[19:57:49.0000] <MikeSmith>
this is another checker feature that has cost me a lot of time without clear benefit

[19:57:56.0000] <MikeSmith>
and resulted in a lot of user confusion

[19:58:13.0000] <MikeSmith>
due to the lack of spec clarity around it

[19:59:18.0000] <MikeSmith>
I tried in good faith to implement it per spec

[19:59:37.0000] <MikeSmith>
and I also tried to get other implementors of it to fix their broken implementations

[20:00:27.0000] <MikeSmith>
at this point I am fatigued with it

[20:00:57.0000] <MikeSmith>
maybe it would be best if I just yanked it from the checker entirely and just kept the heading outline

[20:01:59.0000] <Domenic>
:(. But yeah, I'm not sure what people would be using it for if not to see what the spec says the semantics of their headings are.

[21:09:00.0000] <JonathanNeal>
JakeA: ^

[21:36:38.0000] <annevk>
MikeSmith: maybe wait a bit for JakeA to finish investigating what our options are?

[21:48:25.0000] <MikeSmith>
annevk: ok

[22:06:54.0000] <JakeA>
MikeSmith: have you seen https://jakearchibald.com/2017/do-we-need-a-new-heading-element/?

[22:47:01.0000] <botie>
zcorpan, at 2017-02-23 00:09 UTC, Domenic said: if he has any estimate for the <img> stuff? Maybe I should just work around it, for img.decode()?

[22:49:48.0000] <zcorpan>
Domenic: sorry, lost track of it. Currently looking into webvtt tests. yeah, can work around it and fixup after.

[00:15:35.0000] <zcorpan>
I realized now that "update the image data" can end up parsing the URL twice. is that a problem?

[00:17:37.0000] <zcorpan>
specifically for: var img = new Image(); img.src = "not-in-cache"; step 5.1, then step 11

[00:35:40.0000] <annevk>
zcorpan: yeah, it breaks blob URLs

[00:36:03.0000] <zcorpan>
annevk: suspected that :-( filing an issue...

[00:41:13.0000] <zcorpan>
annevk: i guess this is an issue for a lot of things? do we need to store the parsed URL everywhere for reuse later?

[00:42:39.0000] <annevk>
zcorpan: yeah, that's the theoretical model, most things are fine I think, but there might be some lurking here and there

[00:43:00.0000] <annevk>
zcorpan: we've been slowly cleaning it up

[01:28:20.0000] <annevk>
zcorpan: ping https://github.com/w3c/web-platform-tests/pull/4911

[01:43:03.0000] <zcorpan>
annevk: reviewed and merged.

[04:26:37.0000] <annevk>
JakeA: your understanding of event listeners, tasks, and state is correct

[04:27:04.0000] <annevk>
JakeA: that's basically how readyState on XMLHttpRequest works

[04:27:09.0000] <annevk>
JakeA: and many other such constructs

[04:29:30.0000] <JakeA>
annevk: service worker state too. Cheers. Will update the proposal.

[05:32:21.0000] <JonathanNeal>
annevk: what options are being investigated?

[05:32:42.0000] <annevk>
JonathanNeal: getting it implemented

[05:33:47.0000] <JonathanNeal>
annevk: and by it we mean the outline algorithm as written whih MikeSmith just removed part of from the validator?

[05:34:01.0000] <JonathanNeal>
s/whih/which

[05:34:09.0000] <annevk>
JonathanNeal: he did? I thought he was going to wait

[05:34:21.0000] <JonathanNeal>
https://github.com/w3c/html/issues/806 https://github.com/validator/validator/commit/0789dc8b03bee75ba82f12af20b9785a161557bc

[05:35:14.0000] <annevk>
JonathanNeal: that commit doesn't remove the outline algorithm

[05:35:26.0000] <JonathanNeal>
> just removed part of

[05:35:30.0000] <JonathanNeal>
the sectioning root part

[05:35:43.0000] <JonathanNeal>
> as written

[06:27:24.0000] <wanderview>
/me wonders if he can fix his SW spec PR while mickey mouse clubhouse plays in the background...

[06:37:12.0000] <wanderview>
hmm... tpac in february? https://twitter.com/kasie/status/834771607801442304

[06:58:52.0000] <wanderview>
JakeA: you around?

[06:59:20.0000] <JakeA>
wanderview: yep!

[06:59:48.0000] <wanderview>
JakeA: so I'm trying to implement the "order Clients.matchAll() by focus order" thing and ran into a couple corner cases

[07:00:16.0000] <wanderview>
JakeA: if a nested iframe is focused, does that also mark the parent window focused in terms of "focus time"?  were they focused at the same time?

[07:00:35.0000] <wanderview>
JakeA: if the parent window was already focused when the nested iframe is focused, does it update the parent window focus time in that case?

[07:00:50.0000] <wanderview>
I can write a github issue for this stuff... just curious if you had any thoughts

[07:01:16.0000] <wanderview>
/me wonders why nothing is ever easy...

[07:02:23.0000] <JakeA>
haha you're right there

[07:02:26.0000] <JakeA>
investigating…

[07:03:38.0000] <wanderview>
JakeA: I am assuming if the nested iframe is focused the .focused attribute should be true for both the frame Client and the parent window Client

[07:03:53.0000] <wanderview>
JakeA: does chrome implement this ordering yet?

[07:04:17.0000] <JakeA>
wanderview: I'm not sure. Digging into how the html spec defines focusing…

[07:04:25.0000] <wanderview>
thanks

[07:08:42.0000] <wanderview>
JakeA: in gecko we map Client.focused attribute to Document.hasFocus()

[07:08:46.0000] <JakeA>
wanderview: is it just me, or does https://html.spec.whatwg.org/multipage/interaction.html#has-focus-steps not account for window visibility?

[07:09:45.0000] <JakeA>
or window focus

[07:09:51.0000] <wanderview>
JakeA: I'm still trying to figure out what a "control group" is

[07:09:51.0000] <JakeA>
I must be missing something

[07:10:27.0000] <JakeA>
wanderview: I'm stuck on step 2

[07:10:53.0000] <JakeA>
wanderview: seems like it returns true if the document is top-level, regardless of focus

[07:11:01.0000] <JakeA>
That's not how Chrome behaves

[07:11:26.0000] <wanderview>
JakeA: yea... that seems like a spec bug

[07:11:30.0000] <wanderview>
annevk: ^^^

[07:11:43.0000] <wanderview>
this is what we do: https://dxr.mozilla.org/mozilla-central/source/dom/base/nsDocument.cpp#3246

[07:11:44.0000] <JakeA>
Isn't how Firefox behaves either. I'll file it

[07:13:54.0000] <JakeA>
wanderview: based on Firefox's code, it should give the ancestors a focus time. Ugh I guess they get the same focus time

[07:14:15.0000] <wanderview>
JakeA: is that what a web dev would expect?

[07:14:52.0000] <wanderview>
setting the same focus time means the parent window will always be first in the list because it was necessarily created first

[07:15:17.0000] <wanderview>
JakeA: oh, but also I filed this: https://github.com/w3c/ServiceWorker/issues/1078

[07:16:05.0000] <wanderview>
so maybe you could create a detached iframe, open a window, then add the iframe to the window?  depends what "creation time" means I guess...

[07:19:39.0000] <wanderview>
I should watch Shrek while working all the time... this is way better

[07:19:49.0000] <JakeA>
wanderview: I think we need to look at this ordering again :/ The goal is to present the most-recently-interacted-with window first. Feels like, if the focus time is the same, it should be creation time descending

[07:21:10.0000] <wanderview>
JakeA: right now its creation time ascending?  (or maybe it doesn't specify ascending or descending right now)

[07:21:43.0000] <wanderview>
JakeA: I'm also happy to make the ordering time just for the specific document focused... not for all ancestors of the focused document

[07:22:40.0000] <JakeA>
wanderview: I would assume ascending if not otherwise stated. But yeah, I'd kinda hope the deepest-focused would appear first.

[07:22:57.0000] <JakeA>
wanderview: I think we should stick with how hasFocus() defines it

[07:23:04.0000] <JakeA>
but that's broken :D

[07:23:52.0000] <wanderview>
JakeA: I'll write a spec issue

[07:24:10.0000] <JakeA>
wanderview: write the service worker one, I'll do the html one

[07:24:16.0000] <JakeA>
~~teamwork~~

[07:24:26.0000] <wanderview>
JakeA: sounds good... I try to avoid html

[07:31:54.0000] <annevk>
wanderview: focus handling has various issues unfortunately

[07:39:32.0000] <wanderview>
JakeA: https://github.com/w3c/ServiceWorker/issues/1080

[07:40:05.0000] <JakeA>
wanderview: and https://github.com/whatwg/html/issues/2391 :D

[07:41:06.0000] <wanderview>
thanks

[10:45:39.0000] <Domenic>
annevk: you may want to look at https://github.com/WebAssembly/design/issues/989

[10:47:44.0000] <annevk>
Domenic: o_O

[10:48:30.0000] <TabAtkins>
YUP

[10:48:38.0000] <Domenic>
TabAtkins appears to be fighting the good fight but I'm kind of confused about this issue...

[10:48:53.0000] <TabAtkins>
Basic summary is: Andreas is being a butt, for stupid reasons.

[10:49:20.0000] <TabAtkins>
I've been getting some backstage support for this, too.

[10:49:42.0000] <Domenic>
Omg I just got to the part where he's saying "we should support diversity, like latin1"

[10:51:05.0000] <TabAtkins>
Note that, while Unicode is codepoint-compatible with Latin1, it's not byte-compatible with the U+80-U+ff range.

[10:51:12.0000] <annevk>
/me adds a modest comment

[10:54:24.0000] <Domenic>
I wonder what non-modern environments have plans to implement wasm.

[10:55:10.0000] <TabAtkins>
IBM mainframes from 1980, obviously.

[10:55:23.0000] <TabAtkins>
And all those embedded EBCDIC mini-linuxes.

[11:04:53.0000] <terinjokes>
i'm sad that Google Chrome doesn't support decoding EBCDIC (even when i set the content-type header)

[11:05:51.0000] <Domenic>
I'm sad that Google Chrome still supports decoding UTF-32

[11:05:53.0000] <TabAtkins>
I'm happy I specifically removed the old EBCDIC support CSS once mandated. ^_^

[11:06:00.0000] <terinjokes>
wat

[11:06:05.0000] <Domenic>
wat

[11:06:17.0000] <TabAtkins>
(At least, it had a table of how to recognize the @charset declaration in various encodings, including ebcdic.)

[11:07:41.0000] <TabAtkins>
https://www.w3.org/TR/CSS2/syndata.html#charset

[11:08:41.0000] <terinjokes>
oh, does CSS still support GSM 7-bit?

[11:08:50.0000] <TabAtkins>
No, it absolutely doesn't. ^_^

[11:09:04.0000] <terinjokes>
so much for "one web"

[11:09:09.0000] <terinjokes>
/me trolls

[11:09:17.0000] <TabAtkins>
https://drafts.csswg.org/css-syntax/#input-byte-stream

[11:09:51.0000] <TabAtkins>
Now it just detects an encoding per the Encoding standard, defaulting to utf-8.

[11:10:58.0000] <terinjokes>
TabAtkins: all my CSS will now be in IBM886

[11:12:18.0000] <TabAtkins>
Have fun with that.

[11:12:22.0000] <terinjokes>
i hear cyrillic is cool

[14:15:28.0000] <wanderview>
JakeA: focus stuff really makes me want to go play video games

[14:15:47.0000] <wanderview>
or anything other than work, tbh

[14:16:05.0000] <JakeA>
wanderview: rocket league!!

[14:16:41.0000] <wanderview>
JakeA: sadly I haven't played that much lately... although my kids like to drive in circles every night

[14:16:54.0000] <wanderview>
well, circles would be an advanced move for them

[14:19:31.0000] <wanderview>
JakeA: trying to write a test for this ordering... discovered we can only programmtically focus() a frame if an ancestor window is already focused...


2017-02-24
[16:57:02.0000] <Jasper>
I'm seeing: Content-Type: image/jpeg;charset=UTF-8

[16:57:04.0000] <Jasper>
in the wild

[16:57:08.0000] <Jasper>
Can someone tell me what this means?

[16:57:34.0000] <Jasper>
In the sense of "do browsers treat this differently from Content-Type: image/jpeg"

[17:53:53.0000] <Domenic>
I don't think browsers use the content-type header for images, Jasper

[17:54:02.0000] <Jasper>
Alright.

[17:54:07.0000] <Domenic>
(They sniff the first few bytes)

[17:54:14.0000] <Jasper>
Oh, wait, really?

[17:54:40.0000] <Jasper>
So you're saying I can send text/plain for images and browsers could still understand it

[17:54:50.0000] <Domenic>
Yep

[17:55:12.0000] <Domenic>
https://mimesniff.spec.whatwg.org/#matching-an-image-type-pattern

[17:55:14.0000] <Jasper>
does that only work in <img> / <picture> / whatever context or would it also work for navigation

[17:56:03.0000] <Domenic>
I think only subresources

[17:56:05.0000] <Jasper>
ah

[17:56:50.0000] <Domenic>
(and not script subresources if they are served with X-Content-Type-Options: nosniff or whatever that header is)

[21:35:16.0000] <annevk>
Navigation too to some extent

[23:00:49.0000] <MikeSmith>
annevk: about the outline feature in the checker, I jus tnow restored it to conformance with the HTML spec

[23:01:27.0000] <MikeSmith>
by changing it back to now showing headings for sectioning roots, as the spec requires

[23:02:20.0000] <MikeSmith>
it shows them in the “Heading-level outline”, which is a different thing that doesn’t intend to conform to the outline algorithm

[23:03:20.0000] <MikeSmith>
but it doesn’t now show them in the “Structural outline”, which is the one intended to show users what the spec says the structure of their document looks like (per the outline algorithm)

[23:04:22.0000] <MikeSmith>
JakeA: I had not read your article til yesterday but after reading it, I agree with everything you wrote there

[23:05:27.0000] <MikeSmith>
it seems like the people advocating for <h> don’t understand (or don’t care) that it’s no going to eliminate the need for the outline algorithm

[23:07:34.0000] <MikeSmith>
instead as far as I can see <h> would pretty much enshrine the outline algorithm (if browsers ever implemented <h>, which I think there is almost no chance of them ever doing)

[23:09:05.0000] <annevk>
Well, I hope so, but Firefox still landed limited longdesc support after a UX developer got harassed

[23:09:30.0000] <MikeSmith>
sure but <h> would not be any solution for the accessiblity problem

[23:10:21.0000] <MikeSmith>
given that problem is due to browsers not having implemented the outline algorithm for exposing the heading to AT the right way

[23:11:25.0000] <MikeSmith>
JakeA points that out in his article pretty clearly, so dunno why others would have a hard time understanding that

[23:12:24.0000] <MikeSmith>
anyway until I read JakeA’s article I didn’t know the checker feature was linked to in it

[23:13:54.0000] <MikeSmith>
but after reading it I can the checker feature is useful for letting people compare the heading outline to the outline-algorithm outline

[23:14:08.0000] <MikeSmith>
especially for a case like https://checker.html5.org/?showoutline=yes&doc=https://output.jsbin.com/wulimo

[23:15:25.0000] <MikeSmith>
so now it’s back to being that

[23:16:04.0000] <annevk>
Hmm, https://api.csswg.org/bikeshed/ is returning a 400 for Travis

[23:16:08.0000] <annevk>
At least for XMLHttpRequest

[23:18:26.0000] <MikeSmith>
annevk: just tried in on a test file locally and it worked fine

[23:18:30.0000] <MikeSmith>
with curl

[23:18:57.0000] <MikeSmith>
curl https://api.csswg.org/bikeshed/ -F file=@./bikeshed/tests/pre001.bs

[23:19:48.0000] <annevk>
MikeSmith: https://travis-ci.org/whatwg/xhr/builds/204867728

[23:20:06.0000] <MikeSmith>
/me looks

[23:20:49.0000] <ondras>
Domenic: I used jsdom for the very first time yesterday. It "just worked" OOTB, including "location" and "XMLHttpRequest" APIs. So "thank you!" :-)

[23:32:04.0000] <annevk>
It's consistently failing it seems, so I guess that means we can't land any standard changes today

[23:32:32.0000] <annevk>
TabAtkins: I guess you're asleep, but if not,  https://api.csswg.org/bikeshed/ is returning 400s when accessed from Travis

[23:35:59.0000] <TabAtkins>
annevk: I'll bug plinss

[23:46:01.0000] <annevk>
TabAtkins: ta

[00:01:48.0000] <JakeA>
MikeSmith: is the intent for the headings inside the section roots to be completely lost? Feels like we need to find out Hixie's intent behind some of this stuff.

[00:02:30.0000] <MikeSmith>
JakeA: I don’t know what the intent was but that is what the spec requires

[00:03:14.0000] <MikeSmith>
specifically, per the outline algorithm, the sectioning-root headings do not get added the (abstract) outline at all

[00:03:23.0000] <MikeSmith>
they just get completely skipped

[00:03:48.0000] <MikeSmith>
I mean, so it’s not just about whether they get shown in some rendered view of the outline

[00:04:28.0000] <MikeSmith>
but as far as figuring out the intent of sectioning roots, it was never documented anywhere that I could find

[00:04:55.0000] <MikeSmith>
it was just added to the spec, with no but cited and no discussion I could find in the mailing-list archives

[00:05:08.0000] <JakeA>
Feels like a bug doesn't it? I'll bug Hixie and see if I can find out what got him there

[00:05:40.0000] <MikeSmith>
yeah it might be worthwhile to ask him

[00:06:38.0000] <MikeSmith>
but I don’t think it’s an unintended bug. It’s by design

[00:06:45.0000] <JakeA>
Naively it feels like the heading level should be +1 the parent section's heading, so it'd be good to know why it's as complicated as it is.

[00:07:13.0000] <MikeSmith>
there are a number of things about that outline algorithm that aren’t intuitive at all

[00:08:15.0000] <MikeSmith>
and in my personal experiences in talking with Ian about it have not been super enlightening for me

[00:08:53.0000] <MikeSmith>
so I kind of gave up on asking

[00:08:55.0000] <MikeSmith>
but maybe you’ll have more luck

[00:10:20.0000] <zcorpan>
isn't the idea that you would run an outline on the sectioning root?

[00:10:48.0000] <MikeSmith>
maybe that was the idea

[00:10:54.0000] <zcorpan>
so if you have a <blockquote>, headings in there are not part of the outer outline. but the <blockquote> can have its own outline

[00:11:29.0000] <MikeSmith>
so what do you do with the blockquote outline, in the context of the document?

[00:12:14.0000] <MikeSmith>
that’s another problem with the spec, it doesn’t say anything about how to expose outlines

[00:12:32.0000] <MikeSmith>
other than the accessibility-related requirements

[00:15:16.0000] <zcorpan>
possibly the concept of sectioning roots and multiple outlines doesn't map well to anything that users interact with

[00:17:56.0000] <MikeSmith>
yeah I think that’s probably the source of some of the confusion

[00:23:58.0000] <JakeA>
I don't really understand the difference (for a11y) between a section and a section root

[00:27:37.0000] <zcorpan>
JakeA: if you expose the "sections", you wouldn't want to include every <blockquote> or <td> there. but if they have headings inside, they are in their own islands to not "mess up" the sections on the outside

[00:30:09.0000] <JakeA>
zcorpan: Ahh, so sectioning elements are sectioning roots + exposure?

[00:31:12.0000] <JakeA>
I haven't seen a lot to suggest that the exposure of sections is valuable. Maybe that's what we're getting stuck on.

[00:32:35.0000] <zcorpan>
JakeA: sectioning elements are treated differently from sectioning roots in the outline also in that an explicit sectioning element closes implied sections, but sectioning roots do not

[00:33:30.0000] <zcorpan>
JakeA: run this is https://checker.html5.org/ with "outline" checked

[00:33:32.0000] <zcorpan>
<!DOCTYPE html><title>Test</title><h1>h1</h1><h2>h2</h2><h3>h3</h3><section><h4>h4</h4></section><h3>h3</h3>

[00:33:36.0000] <zcorpan>
then compare to

[00:33:45.0000] <zcorpan>
<!DOCTYPE html><title>Test</title><h1>h1</h1><h2>h2</h2><h3>h3</h3><blockquote><h4>h4</h4></blockquote><h3>h3</h3>

[00:34:59.0000] <JakeA>
*penny drops*

[00:35:05.0000] <JakeA>
zcorpan: cheers!

[00:35:24.0000] <zcorpan>
np :-)

[02:06:16.0000] <mathiasbynens>
ok, Cloudbleed is my new favorite “HTML parsing is hard” example

[02:07:47.0000] <annevk>
mathiasbynens: do we know the exact bug yet?

[02:07:56.0000] <annevk>
mathiasbynens: they implemented from the HTML Standard I believe...

[02:08:31.0000] <mathiasbynens>
we don’t, but Tavis’s guess sounds reasonable: https://bugs.chromium.org/p/project-zero/issues/detail?id=1139#c5

[02:23:35.0000] <mathiasbynens>
“For the avoidance of doubt: the bug is not in Ragel itself. It is in Cloudflare's use of Ragel. This is our bug and not the fault of Ragel.” — https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/

[02:25:35.0000] <annevk>
Well, good to know it's not a bug in the HTML Standard

[03:25:02.0000] <annevk>
MikeSmith: do you want me to work on https://github.com/w3c/web-platform-tests/pull/4801?

[03:31:21.0000] <jgraham>
Seems like an example of a "writing low level code not in Rust is hard" bug, as much as a "parsing HTML is hard" bug

[03:37:44.0000] <nox>
Domenic: With https://github.com/whatwg/html/pull/2353, if If E's type is beforeunload and but E is *not* a BeforeUnloadEvent object, can return value ever be false in the "Otherwise" block?

[03:40:21.0000] <annevk>
nox: return value is set in step 3 for the first time

[03:41:11.0000] <nox>
annevk: "The event handler IDL attribute's type is OnBeforeUnloadEventHandler, and the return value will therefore have been coerced into either the value null or a DOMString."

[03:41:54.0000] <nox>
annevk: Even if E is not a BeforeUnloadEvent, OnBeforeUnloadEventHandler is still used and thus it means return value is a string, no?

[03:41:58.0000] <nox>
(or null)

[03:43:11.0000] <annevk>
nox: yeah, I guess that's true

[03:43:18.0000] <annevk>
nox: I wonder if that got tested

[03:43:21.0000] <nox>
annevk: Thanks for confirming.

[03:43:30.0000] <nox>
annevk: No idea, implementing it in Servo.

[03:47:49.0000] <annevk>
nox: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4907 suggests the algorithm is correct

[03:47:56.0000] <nox>
annevk: Cool.

[03:58:18.0000] <csarven>
Any "real world" issues w/ using id-attribute starting with 0-9 in XHTML5? Would I be cutting corners if I went for it?

[03:59:21.0000] <tobie>
in `new Promise(r => setTimeout(r, 10)).then(f)`, is f called in the same event turn as r?

[04:05:27.0000] <ondras>
I think that f is called in the next event turn (compared to r)

[04:05:49.0000] <zcorpan>
freenode.org uses cloudflare (see global notice)

[04:09:04.0000] <jyasskin>
JakeA: If you're thinking about how the outlining algorithm affects accessibility, pull in aboxhall.

[04:12:36.0000] <annevk>
csarven: only problem is addressing them through CSS requires escapes

[04:13:05.0000] <zcorpan>
as does mozilla.org but not bugzilla.mozilla.org

[04:17:39.0000] <csarven>
Didn't know about CSS... I thought it was primarily the XML toolchain.

[04:18:12.0000] <csarven>
annevk Escaping as in wrapping the value in quotes?

[04:18:35.0000] <annevk>
csarven: #\39 or some such

[04:18:48.0000] <annevk>
csarven: haven't worked with CSS in a while so I don't quite remember

[04:18:55.0000] <zcorpan>
csarven: https://mothereff.in/css-escapes

[04:19:22.0000] <zcorpan>
[id="1"] works as well but has different specificity

[04:20:37.0000] <tobie>
ondras: are you sure?

[04:20:55.0000] <ondras>
tobie: no. I just think that.

[04:21:36.0000] <tobie>
ondras: not to be confused with: new Promise(r => r()).then(f) where you'd be right (afaik)

[04:21:42.0000] <annevk>
MikeSmith: it seems the problem is specific to XMLHttpRequest somehow

[04:21:50.0000] <annevk>
MikeSmith: I can reproduce by running make deploy locally

[04:21:56.0000] <annevk>
MikeSmith: something with the request is wrong

[04:21:59.0000] <csarven>
"\31 " <-- this is just insanity.

[04:22:22.0000] <annevk>
MikeSmith: but it's weird as the script is identical to that for Fullscreen where things do work

[04:32:08.0000] <mathiasbynens>
csarven: CSS.escape() helps

[04:33:43.0000] <annevk>
MikeSmith: I think the problem is a Bikeshed change

[04:40:27.0000] <annevk>
MikeSmith: https://github.com/tabatkins/bikeshed/issues/936

[04:40:30.0000] <annevk>
TabAtkins: ^^

[04:49:19.0000] <JakeA>
jyasskin: already got a thread going with aboxhall & other a11y folks. May bring it to a more general list though. Trying to figure out why we never implemented.

[04:49:29.0000] <jyasskin>
Cool

[04:50:39.0000] <tobie>
jyasskin: I've been having excessive memory usage issues handling the WG21 ref list for specref

[04:51:07.0000] <tobie>
jyasskin: I haven't precisely identified what the problem is yet,

[04:51:46.0000] <tobie>
jyasskin: but would you possibly be able to provide the data in a format I can more easily stream?

[04:52:05.0000] <jyasskin>
tobie: I haven't been paying a lot of attention to that—it's more jfbastien and wash—but I'll ask them.

[04:52:53.0000] <tobie>
jyasskin: ty

[07:43:02.0000] <TabAtkins>
annevk: Yup, saw it. Will look at in while I'm on the train in a few minutes.

[08:46:50.0000] <tobie>
annevk, Domenic: is there syntax outside of the ES bindings to get at the value of an interface attribute (like there is for infra types and now for dictionaries, records, sequences, etc.)?

[08:48:11.0000] <tobie>
annevk, Domenic: use case is to describe creating a dictionary from the values of an interface for custom JSON serialization in a `toJSON` operation.

[08:49:14.0000] <tobie>
annevk, Domenic: so it feels like this ties into the slots conversation we had late last year.

[08:51:14.0000] <tobie>
annevk, Domenic: context is Im trying to rewrite the serializer examples (https://heycam.github.io/webidl/#example-eaac10fb) in terms of toJSON operations returning a dictionary.

[09:25:46.0000] <Domenic>
tobie: If I understand correctly, what you need to do in that case is get the corresponding internal slot values, or "associated" values, that back each attribute.

[09:28:04.0000] <Domenic>
So you'd introduce something like "Assume each of the attributes (`from`, `to`, `amount`, ...) is backed by an associated value of the same, so that each attribute's getter returns the corresponding associated value."

[09:28:36.0000] <Domenic>
Then you could reference "this `Transaction`'s associated from value"

[09:31:19.0000] <annevk>
Note that this only works if they're actually backed by internal slots. Wouldn't work for innerHTML.

[09:50:04.0000] <tobie>
Domenic: Thanks. That's exactly what I was looking for.

[09:51:00.0000] <tobie>
annevk: agree. Given this is for a made-up example anyway, we can just decide they are.

[10:00:00.0000] <miketaylr>
Domenic: i guess option 1 from your comment is probably the simpest way forward... i still wonder if magic e.returnValue = '' actually solves any real user-facing problems

[10:00:11.0000] <miketaylr>
(or that is, is required for compat)

[10:01:14.0000] <miketaylr>
unfortunately i didn't find much when doing archeology when beforeload was added to gecko

[10:05:22.0000] <Domenic>
miketaylr: yeah, I dunno, I think it kind of depends on how much appetite cdumez has for churn, and everyone else has for the potential back-compat risks of removing window.BeforeUnloadEvent

[10:06:26.0000] <Domenic>
His latest comment does indeed seem to lean toward preserving BeforeUnloadEvent

[10:06:59.0000] <miketaylr>
tbh, i have no personal interest in event.returnValue, but might as well get 'er done

[10:07:51.0000] <miketaylr>
(meaning, i don't know any any single site that breaks in Firefox w/o it)

[12:40:16.0000] <wanderview>
JakeA: after writing this clients.matchAll() focus order test... I think i can say our currently spec'd behavior is weird

[12:47:22.0000] <JasperNL>
Hi :) I've got a question about the javascript "fetch" function

[12:47:56.0000] <JasperNL>
Is it better to use fetch or XMLHttpRequest for now? I don't care about people who use outdated browsers.

[12:48:09.0000] <JakeA>
wanderview: hah, yeah

[12:48:45.0000] <wanderview>
JakeA: look at these test expectations: https://hg.mozilla.org/try/rev/8cedfb066814f8dc7e199efd998e392412f554f5#l2.381

[12:49:09.0000] <wanderview>
I dunno... just felt ridiculous as I wrote out why it was in this strange order

[12:50:29.0000] <wanderview>
JakeA: I also found that since windows tend to get focused when created, the only time creation order really comes into play is with iframes

[12:50:49.0000] <wanderview>
although I suppose in practice the user could have a bunch of tabs restored on browser start, but not focus them

[13:02:19.0000] <Domenic>
JasperNL: fetch()! unless you need to cancel the fetch, which isn't possible yet.

[13:04:47.0000] <JasperNL>
Thought so already :) Thanks

[14:28:07.0000] <wanderview>
JakeA: it may not be possible to write a WPT test for this focus stuff

[14:53:58.0000] <tobie>
TabAtkins: think you could pull in https://wg21.link/specref.json directly into Bikeshed?

[14:54:18.0000] <tobie>
TabAtkins: it's for the C++ folks

[14:54:47.0000] <tobie>
TabAtkins: it currently goes through Specref

[14:54:57.0000] <tobie>
TabAtkins: but there's no point having it there

[14:55:12.0000] <tobie>
TabAtkins: and it's causing plenty of grief


2017-02-25
[22:35:56.0000] <jyasskin>
annevk: Sorry about the @-references in commits. Is it better to mention your name without the @, or does that still spam you?

[22:51:45.0000] <annevk>
jyasskin: that would be fine

[22:52:06.0000] <jyasskin>
'k; I'll rewrite them.

[02:01:41.0000] <tobie>
TabAtkins: filed https://github.com/tabatkins/bikeshed/issues/938

[09:03:03.0000] <annevk>
tobie: is nobody funding the infrastructure?

[09:20:45.0000] <tobie>
annevk: funding what?

[09:59:29.0000] <annevk>
tobie: computing cost, maintenance

[10:00:11.0000] <tobie>
annevk: of what? Specref, wpt-bot, and pr-preview?

[10:00:46.0000] <annevk>
Yeah

[10:01:53.0000] <tobie>
annevk: no.

[10:02:23.0000] <annevk>
At some point we should get that fixed

[10:02:54.0000] <annevk>
Makes no sense for orgs to pay fees to standards bodies and infrastructure getting none

[10:03:06.0000] <tobie>
annevk: well, the real cost is dev + maintenance.

[10:03:17.0000] <tobie>
annevk: computing costs are super-low/free

[10:03:35.0000] <tobie>
annevk: I think I pay USD 7/month for specref hosting

[10:04:14.0000] <tobie>
MSFT helped with the some of the dev costs of Specref.

[10:04:27.0000] <annevk>
Sure, yeah, both ought to be compensated, and if we need more memory that should be doable too

[10:07:37.0000] <tobie>
so did Google with pr-preview (the chunk that related to making it work for WebIDL, not the generalizations to extend its usage to other specs.)

[10:08:37.0000] <tobie>
annevk: the specific issue with more memory in the specref case, is we're outgrowing the available heroku setup

[10:09:32.0000] <tobie>
annevk: so we can't buy more memory, we need to either make the system horizontally scalable (dev costs)

[10:10:01.0000] <tobie>
annevk: or we need to use a different system (config cost + learning cost)

[10:10:43.0000] <tobie>
annevk: hence the logical move seems is to try and lighten the burden on Specref

[10:12:48.0000] <tobie>
annevk: agree 100% that SDOs should spend a larcger chunk of their fees on infra work

[10:13:15.0000] <tobie>
annevk: it's one of the things that really irritates me.

[10:14:26.0000] <tobie>
annevk: that said, some of the stuff pr-preview does is made possible because of underlying infra provided by W3C (the Respec builder and the html differ)


2017-02-26
[21:18:33.0000] <TabAtkins>
That HTML differ is so nice. Best publicly-available example of the functionality I've found.

[21:21:49.0000] <TabAtkins>
Yo, so, I want an array-like interface (to represent lists of CSS transform values).  I *think* we get the correct behavior if we just define an indexed getter/setter and give an `iterable` declaration, right?

[04:33:59.0000] <annevk>
But then you have introduced a new object that requires a proxy

[04:34:24.0000] <annevk>
As far as I know that is still considered bad practice

[06:54:17.0000] <smaug____>
IIRC html spec defines what kind of document a fullpage video should get, but where...


2017-02-27
[20:03:11.0000] <MikeSmith>
yoichio: one thing that might help slightly on https://github.com/w3c/selection-api/pull/81 is if you ask the W3C AC rep for Google, TV Raman, to add you as a member of the Web Platform WG

[20:03:50.0000] <MikeSmith>
ask kochi or somebody for help with that if you need it

[20:03:50.0000] <botie>
will do

[20:04:06.0000] <MikeSmith>
silly botie

[20:05:31.0000] <MikeSmith>
yoichio: I think it’s not strictly necessary for you to be a member of the WG (because Google has already made a blanket RF commitment for the group) but it will help as far as the related (more simple-minded) W3C tools go

[21:28:07.0000] <yoichio>
It seems the merge succeed

[21:48:29.0000] <MikeSmith>
yoichio: yes thanks for the ping

[21:48:56.0000] <MikeSmith>
though by the way whenever you need to my attention about something the best place to reach me is right here

[21:50:13.0000] <MikeSmith>
github notifications for me are mostly just noise. I get way too many of them to be able to keep up with them properly

[21:50:38.0000] <yoichio>
Thank you, too.

[21:51:43.0000] <MikeSmith>
wow https://bugs.webkit.org/show_bug.cgi?id=168774 SVN

[21:53:05.0000] <yoichio>
I see. I was just going to ping to Ryosuke.

[21:59:51.0000] <MikeSmith>
ah OK

[22:00:11.0000] <MikeSmith>
well he’s often around here too, as rniwa

[01:07:02.0000] <FND>
annevk, re `connectedCallback` order with nested custom elements (http://logs.glob.uno/?c=freenode%23whatwg&s=22+Feb+2017):

[01:07:12.0000] <FND>
based on https://developers.google.com/web/fundamentals/getting-started/primers/customelements#upgrades, I gather the correct way would be to use `:defined` and/or `whenDefined`

[01:07:17.0000] <FND>
which I suppose works because elements are upgraded synchronously (i.e. `connectedCallback` fires immediate after the respective `define` invocation)?

[04:57:26.0000] <annevk>
nox: https://github.com/whatwg/html/pull/2398

[12:22:40.0000] <Domenic>
Thoughts welcome on whether we should specify a processing model for <link>'s rel="mask-icon"/color="" or just make it conformant with no processing model. https://github.com/whatwg/html/pull/2230#issuecomment-282396190

[12:23:08.0000] <Domenic>
(Currently leaning toward conformant with no processing model)

[12:39:05.0000] <annevk>
I'd like a processing model at some point

[12:56:18.0000] <Domenic>
Even with only one vendor?

[13:00:47.0000] <annevk>
I guess it makes sense to wait for another

[13:02:02.0000] <Domenic>
Yeah... unsure whether there ever will be one, it's such a specific UI feature

[14:25:26.0000] <annevk>
I sometimes wish we'd call browsing contexts tabs

[14:25:55.0000] <AutomatedTester>
that would be awesome if we did

[14:27:51.0000] <jgraham>
No no no

[14:28:10.0000] <jgraham>
The whole Window-vs-the-UI-element thing already generates much confusion

[14:58:48.0000] <smaug>
hmm, about:blank#foo and session history handling

[15:54:48.0000] <MikeSmith>
Domenic: about the outline-algorithm view  in the checker, dunno if you saw but at the end of last week I reverted the change I had made which caused it to show headings for sectioning roots

[15:55:40.0000] <tantek>
/me pops in and what - outline-algorithm? how is that still a topic of conversation or even in existence? or did I accidentally join a several year old log?

[15:55:41.0000] <MikeSmith>
so it’s back to being conformant representation of the what’s required by the outline algorithm

[15:56:14.0000] <MikeSmith>
tantek: because it’s in the spec and because I implemented it in the HTML checker

[15:57:05.0000] <tantek>
yeah that's probably one of the few parts of the WHATWG HTML that makes it look bad

[15:57:19.0000] <tantek>
talk about a solution looking for a problem

[15:58:39.0000] <annevk>
Hmm all browsers implement something there

[15:59:08.0000] <annevk>
They just did not implement this while they did implement corresponding style changes


2017-02-28
[16:02:18.0000] <MikeSmith>
tantek: the outline algorithm is a consequence of having added <section> and <article> that can be nested to arbitrary depth with <h1> headings

[16:02:54.0000] <MikeSmith>
so some mechanism is needed to determine what actual level and <h1> is at in the hierarchy

[16:03:33.0000] <MikeSmith>
in particular, for screen-reader users

[16:03:36.0000] <tantek>
or nothing actually cares in practice about "what actual level..." so no browser ever bothered to implement it

[16:03:49.0000] <MikeSmith>
screen-reader users care

[16:03:52.0000] <tantek>
and the screen-reader excuse doesn't cut it either

[16:04:18.0000] <tantek>
because experience has shown anything not implemented in browsers, but supposedly implemented / needed by a screen-reader, will be unreliable at best, possibly deceptive

[16:04:21.0000] <tantek>
e.g. longdesc

[16:04:31.0000] <MikeSmith>
well otherwise all those <h1>s get presented to screen-reader users as top-level headings

[16:04:40.0000] <tantek>
also the outline algorithm is classic aspirational design

[16:04:43.0000] <tantek>
doomed to failure

[16:05:06.0000] <tantek>
not sure why anyone is still hanging onto it.

[16:05:17.0000] <tantek>
the claims of needs are all circular

[16:05:46.0000] <MikeSmith>
man the matter-of-fact way you have of stating everything in IRC discussions does not invite enthusiasm about trying to have any kind of online conversation with you

[16:06:09.0000] <MikeSmith>
do you have any idea how annoying it is to be on the receiving end of that?

[16:07:21.0000] <tantek>
MikeSmith, yeah I realize it is not necessarily the most productive

[16:07:26.0000] <tantek>
more ventful for sure

[16:08:08.0000] <tantek>
the problem is that outline algo smells more like appcache than like say, audio or video

[16:08:37.0000] <MikeSmith>
yeah agreed it’s not our finest hour

[16:09:02.0000] <tantek>
and frankly I'd rather not see "us" hang on to it as long as we hung onto appcache

[16:09:03.0000] <MikeSmith>
and it’s something web developers mostly don’t need to care about

[16:09:14.0000] <tantek>
now you sound like you're describing longdesc

[16:09:26.0000] <tantek>
similar behavior flaw of the advocates hanging onto for too long IMO

[16:09:49.0000] <tantek>
we're not very good about admitting when things seem to be failing / have failed, ditch them, and come up with alternatives later (using lessons learned)

[16:10:23.0000] <MikeSmith>
I think the outline algorithm is way different from longdesc to the point that comparison is a non sequitur

[16:10:58.0000] <MikeSmith>
this is not a case of hanging on to something because anybody is advocating for it

[16:11:11.0000] <tantek>
MikeSmith, fair. example: web developers using <section> and <h1> etc. based on the impacts (or lack thereof) in browsers, not caring (not knowing) at all

[16:11:18.0000] <tantek>
about any impacts on the outline algorithm

[16:11:21.0000] <MikeSmith>
right

[16:11:23.0000] <tantek>
= noise into the algo

[16:11:29.0000] <tantek>
that's the analogy to longdesc

[16:11:41.0000] <tantek>
though with longdesc you have to bother to actually type the attribute in

[16:11:54.0000] <tantek>
and then think, oh, long description, sure I'll type a bunch of text here

[16:12:01.0000] <tantek>
and then get it wrong (since it's supposed to be a URL only)

[16:12:09.0000] <MikeSmith>
yeah

[16:12:11.0000] <tantek>
it's a coarse analogy to be sure

[16:12:29.0000] <tantek>
but general category of "web developer does something they have no idea has a specific (side-)effect"

[16:12:37.0000] <MikeSmith>
yeah

[16:12:37.0000] <tantek>
because they don't see the (side-)effect in a browser

[16:12:44.0000] <tantek>
that's the commonality IMO

[16:12:45.0000] <MikeSmith>
that is the case with <section> and <article>

[16:12:54.0000] <tantek>
totally

[16:13:34.0000] <tantek>
I forgot when, but at some point I gave up on those and the weird philosophical debates as to when to use section article div

[16:13:35.0000] <tantek>
seemed like it was just wasting authors's time

[16:13:36.0000] <MikeSmith>
we bought into the complexity and side effects when we added <section> and <article>

[16:13:44.0000] <tantek>
now I'm like, yeah, just div, and class it for your specific semantics

[16:13:50.0000] <tantek>
agreed

[16:13:54.0000] <tantek>
I no longer believe in either

[16:14:12.0000] <tantek>
similarly - browsers don't really do anything AFAIK special with section or article

[16:14:20.0000] <tantek>
so they're similarly a source of confusion / noise

[16:14:54.0000] <tantek>
and by "browser" there I really mean "something the consumes the markup and does something obviously intersting and useful to enough people to make the web developer care"

[16:15:05.0000] <tantek>
e.g. a search engine consuming the markup and doing something would count too. or FB

[16:15:14.0000] <MikeSmith>
browsers expose <section> and <article> to the accessibility tree in a special way

[16:15:27.0000] <MikeSmith>
that is the problem

[16:15:40.0000] <tantek>
that's neither obvious, nor interesting and useful to enough people

[16:16:36.0000] <tantek>
I'm postponing fighting that battle (drop section and article) until we have a few more years of web noise / misuse of them that help the stats demonstrate just how useless (or similar to just "div") they are

[16:17:01.0000] <tantek>
until then I'm advising authors to just use div and pretend section and article don't exist

[16:17:44.0000] <tantek>
I forget who it was that convinced me similarly of hgroup not being useful (enough) or obvious enough to be worth keeping, and basically, kept following that reasoning

[16:17:45.0000] <MikeSmith>
annevk: about https://github.com/w3c/web-platform-tests/pull/4801#issuecomment-281622673 (Adjust XHR CORS test to allow custom Content-Type) if you want to get that fixed soon it would be best not to wait for me. For the last two weeks I’ve had almost no time for WPT stuff, and this week I’m working through a backlog of other stuff that’s accumulated.

[16:18:42.0000] <MikeSmith>
<hgroup> exists just because of the outline algorithm, to prevent subheadings from creating new levels in the outline

[16:22:11.0000] <annevk>
MikeSmith: okay, good to know

[16:22:29.0000] <annevk>
MikeSmith: I really want to do work on more WPT stuff personally, but I'm rather dismayed with the amount of reviews I'm getting

[16:22:35.0000] <tantek>
MikeSmith, right. problem is that "need" ("to prevent ...") does not align in any way with the incentives (or even attention!) of the person who adds or doesn't add hgroup (web author)

[16:22:41.0000] <annevk>
MikeSmith: it doesn't feel super productive

[16:23:01.0000] <tantek>
I need to figure a way of documenting that as a feature design anti-pattern

[16:23:37.0000] <tantek>
when the need for the use (or non-use) of a feature does not align with the incentives of the person expected to use (or not use) the feature, the feature is likely to fail with adoption, or produce noise at best

[16:35:56.0000] <annevk>
tantek: I think you're misinformed

[16:36:19.0000] <tantek>
annevk, could be, there are many things

[16:36:22.0000] <annevk>
tantek: the only problem here is that browsers don't implement the mapping to AT, but implement all other the useful bits

[16:36:32.0000] <tantek>
I didn't realize there were any actual useful bits

[16:36:35.0000] <annevk>
tantek: if they implemented the mapping to AT, the feature would work fine

[16:36:48.0000] <annevk>
tantek: I told you before, styling

[16:36:58.0000] <annevk>
tantek: standard has other examples, such as not having to care about heading levels

[16:37:50.0000] <tantek>
I understand those supposed benefits, and have tried to use them over the years, but haven't found them to actually be any easier (less work and more usefully predictable) in practice

[16:38:09.0000] <tantek>
at this point I expect a lot of <section> / h1..n pollution has occured

[16:38:18.0000] <tantek>
where author intent != outline algo output

[16:38:44.0000] <annevk>
tantek: that's just more speculation

[16:38:51.0000] <tantek>
sure. at some point someone will sample that data and determine some aggregate conclusion as such (as was eventually done with longdesc)

[16:39:12.0000] <tantek>
I'm willing to wait a few more years as I don't think the result will appreciably change

[16:39:13.0000] <annevk>
tantek: although you're the first one to bring up that this would not be useful to have, so that's new

[16:40:06.0000] <tantek>
annevk - I think there has been informal discussion of the near non-existent utility of section / article vs. the cognitive time spent on div vs section vs article

[16:40:11.0000] <tantek>
that's not new

[16:40:55.0000] <annevk>
that's very different from heading levels though

[16:41:07.0000] <annevk>
which is the main practical effect of the outline algorithm

[16:41:10.0000] <tantek>
sorta. outline algo mixes them all together like spagehtti

[16:41:33.0000] <annevk>
not really, they're just equivalent from the outline algo perspective

[16:41:36.0000] <tantek>
hn inside nested divs != hn inside nested sections etc.

[16:41:49.0000] <annevk>
I can agree that having both <article> and <section> is a bit redundant

[16:41:56.0000] <tantek>
yes that's a good start

[16:42:01.0000] <annevk>
Sure, <div> is neutral

[16:42:20.0000] <tantek>
<article> was a left over from the days when HTML5 was trying to emulate automatic Atom output

[16:42:36.0000] <tantek>
(and poorly at that)

[16:49:43.0000] <tantek>
I'd be ok with dropping just <article> for now. That alone would help reduce the discussion / confusion

[16:50:23.0000] <tantek>
also it may lend more critical mass / usage to <section> (optimistically speaking) to give it a better chance of proving its case to web authors

[16:51:33.0000] <tantek>
where dropping <article> == redefine <article> to be a parse-time synonym for <section> for backcompat reasons

[16:51:54.0000] <annevk>
That just shows you're talking about a very different thing than most people have been for the past couple weeks

[16:51:55.0000] <tantek>
and drop any article-specific attributes etc. (like there were some legacy date things that I don't remember if they were kept or not)

[16:52:05.0000] <tantek>
past couple weeks?

[16:52:12.0000] <tantek>
I'm talking in the context of years

[16:52:24.0000] <annevk>
Yeah, there's been some recent activity on header levels

[16:52:55.0000] <annevk>
I left a comment at https://www.w3.org/blog/2017/02/on-eme-in-html5/#comment-94776

[16:53:42.0000] <tantek>
/me is bothered by UTC-presuming datestamps

[16:55:34.0000] <tantek>
/me tries to avoid getting into drawn-out DRM discussions

[16:56:57.0000] <tantek>
FWIW I tried to get EME/DRM/CDM plugins to work on a recent United flight and it didn't work in any browser (despite the United in-flight wifi / portal being clearly engineered to try to work with EME). So as far as I can tell, the current state is that viewing such "protected" content is just more broken and people will give up. Not sure if that was anyone's intent or who that helps.

[16:57:16.0000] <tantek>
(failed in latest FF, Safarei, Chrome)

[16:57:31.0000] <tantek>
and with that data point, I'll leave that discussion

[19:37:29.0000] <Domenic>
MikeSmith: ah very cool, I'm glad :). I hope that'll help inform any future discussions, in whichever direction things go...

[20:17:21.0000] <MikeSmith>
Domenic: yeah thanks for having called me out on that. I shouldn’t have cavalierly broken it that way. One problem is I chose before to use the same code to generate both the outline-algorithm view and the heading outline and it wasn’t pretty code to begin with and it justs gets uglier each time I touch it

[20:57:22.0000] <botie>
kochi, at 2017-02-27 04:03 UTC, MikeSmith said: or somebody for help with that if you need it

[21:00:19.0000] <MikeSmith>
kochi: ignore that, botie was trying to be overly helpful

[23:43:30.0000] <kochi>
botie: thanks for your help. yoichio could get the PR merged, and he's gonna apply for Web Platform WG.

[23:43:30.0000] <botie>
de nada kochi

[23:46:19.0000] <kochi>
gracias

[00:02:34.0000] <XhmikosR>
has anyone tried to run the following in the html repo?

[00:02:35.0000] <XhmikosR>
    git reflog expire --all --expire=now

[00:02:35.0000] <XhmikosR>
    git repack -a -d --depth=250 --window=250

[00:02:35.0000] <XhmikosR>
    git gc --aggressive --prune=now

[00:02:51.0000] <XhmikosR>
I get all my RAM maxed out when I run this

[00:03:34.0000] <XhmikosR>
I was trying to find why on earth the repo is so huge

[00:08:48.0000] <MikeSmith>
XhmikosR: have never tried it but not surprised

[00:09:29.0000] <XhmikosR>
MikeSmith: has anyone pushed binaries in the past? I can't explain otherwise how the repo got so big

[00:10:12.0000] <MikeSmith>
the amount of time it takes to just clone the repo is one clue that it’s exceptional

[00:10:29.0000] <XhmikosR>
yup that is why I tried to run those

[00:10:43.0000] <MikeSmith>
XhmikosR: well we have some reasonable-sized image binaries in there

[00:10:44.0000] <XhmikosR>
although in theory GitHub must clean up the repo frequently

[00:10:53.0000] <MikeSmith>
but I don’t think the images are the problem

[00:11:29.0000] <MikeSmith>
I suspect the problem is that there have been several times when essentially the entire spec was reformatted

[00:11:35.0000] <MikeSmith>
nearly every line

[00:11:38.0000] <XhmikosR>
the images are one potential cause because they are binaries

[00:11:59.0000] <MikeSmith>
well the spec itself is 8MB+ at this point

[00:12:04.0000] <MikeSmith>
or maybe 9MB

[00:12:22.0000] <MikeSmith>
dunno but it was at least 8MB last time I checked

[00:12:22.0000] <XhmikosR>
it's around 6MB here

[00:12:33.0000] <XhmikosR>
still that is text

[00:12:41.0000] <MikeSmith>
OK I guess I am thinking of the rendered spec size

[00:12:47.0000] <MikeSmith>
anyway it it one file

[00:13:03.0000] <MikeSmith>
and it is whatever hundreds of thousands of lines

[00:13:55.0000] <MikeSmith>
and when we have multiple changes where almost all of those hundreds of thousands of lines are touched, I assume that is not something git is designed to optimize for

[00:14:04.0000] <XhmikosR>
I agree but since it's text it shouldn't cause the issue. Images on the other hand can cause this if they have been changed *a lot* of times

[00:14:17.0000] <XhmikosR>
oh well :/

[00:14:32.0000] <MikeSmith>
incidentally it also makes git blame nearly useless for trying to trace changes for the spec

[00:14:37.0000] <XhmikosR>
it's just the only repo I get no RAM left that is why I thought I'd ask

[00:16:47.0000] <MikeSmith>
yeah maybe some time somebody who knows git internals/quirks well can take a look at it and pinpoint what the cause is

[00:17:33.0000] <MikeSmith>
anyway I’ve never personally been fond of the spec being maintained and one gigantic single file

[00:18:36.0000] <MikeSmith>
and even less fond of it now for the last year and half or so that we’ve had it in Github and other people need to work with it like that create PRs

[00:22:24.0000] <MikeSmith>
XhmikosR: about https://github.com/whatwg/html/pull/2230 (Allow <link rel=mask-icon color=… href=…>.), one other thing that Simon had asked about was adding mention that no `color` IDL attribute gets reflected for the `color` content attribute

[00:24:24.0000] <XhmikosR>
MikeSmith: not sure how to phrase that...

[00:24:29.0000] <MikeSmith>
OK

[00:24:39.0000] <XhmikosR>
you guys can push to my fork if you'd like

[00:24:46.0000] <MikeSmith>
OK

[00:25:06.0000] <MikeSmith>
will do that then I think

[00:25:18.0000] <MikeSmith>
if Simon doesn’t first

[00:25:19.0000] <XhmikosR>
thanks

[00:25:49.0000] <MikeSmith>
now that I look back at this I see other places we need to touch

[00:25:57.0000] <XhmikosR>
should we have an issue for the validator too? Also, since I'm not familiar with the tests there aren't any so I'll leave that to someone else too

[00:26:18.0000] <MikeSmith>
I can take care of the validator without an issue being needed

[00:26:50.0000] <MikeSmith>
I don’t open a validator issue for every spec change I implement in it

[00:26:58.0000] <XhmikosR>
all right

[00:27:37.0000] <MikeSmith>
will try to get all this merged and the checker implementation added soon

[00:27:43.0000] <XhmikosR>
thanks

[00:27:55.0000] <MikeSmith>
can do a new release in March for the checker for y’all to use for grunt-html

[00:29:28.0000] <XhmikosR>
sounds good to me

[00:29:57.0000] <XhmikosR>
I wish I could contribute in a more substantial way but your whole workflow is new to me

[00:36:56.0000] <MikeSmith>
XhmikosR: yeah, and it’s a relatively esoteric workflow at that

[00:38:53.0000] <MikeSmith>
and I guess there’s not much advantage to learning the intricacies unless you know you’re going to be contributing more and will have use of the knowledge for the next thing you want to add/change

[03:13:18.0000] <smaug>
fetch() doesn't have yet any reasonable way to get partial results/progress events?

[03:14:12.0000] <annevk>
smaug: streams

[03:14:41.0000] <smaug>
and streams actually provide that? Like there is ProgressStreams or something?

[03:14:42.0000] <annevk>
smaug: no high-level abstraction, though we are considering one

[03:16:14.0000] <smaug>
I guess WebSocket is the best option

[03:37:22.0000] <smaug>
hrm, service worker spec :/

[13:03:31.0000] <TabAtkins>
If a set of strings is closed right now, but I know that in the future it'll be somewhat open-ended (all "valid" strings will be knowable by the browser, but there's a technically infinite number of them), is it best to just spec it as a DOMString, or try to pull of an enum?

[13:27:06.0000] <wanderview>
I love how when I update to the tip of the spec repo and run `bikeshed spec` I get a bunch of changes to the index.html

[13:33:24.0000] <TabAtkins>
That implies different bikeshed versions, is all.

[13:34:10.0000] <wanderview>
TabAtkins: should I include my generated index.html in my PR?

[13:34:34.0000] <TabAtkins>
Maintainers should have that info in their Contributing.md

[13:34:38.0000] <TabAtkins>
If they don't, bug them. ^_^

[13:35:04.0000] <wanderview>
"To make edits to the design, please send pull requests against the Nightly spec on the master branch. We use bikeshed. So, change docs/index.bs and submit it with the corresponding bikesheded index.html."

[13:35:08.0000] <wanderview>
I guess that means include it

[13:35:51.0000] <TabAtkins>
Yes.

[13:36:31.0000] <TabAtkins>
(Ideal set-up is to set up Travis to build for you and commit that somewhere useful, so there's never any such differences.  But not everyone does that...)

[15:25:19.0000] <TabAtkins>
Man, I am just *loving* the algorithm border to cleanly separate long lists of method/attribute definitions.

[15:25:25.0000] <TabAtkins>
*So* much easier to read.

[15:26:17.0000] <Domenic>
Sample?

[15:27:11.0000] <TabAtkins>
Let me push this and you'll see.

[15:28:21.0000] <TabAtkins>
https://drafts.css-houdini.org/css-typed-om/#numeric-value

[15:28:45.0000] <TabAtkins>
Can directly compare it to the methods right below it, which are still using the <dl> pattern.

[15:29:11.0000] <Domenic>
hmm, i guess i could see it

[15:29:19.0000] <Domenic>
better than a <dl> yeah

[15:29:32.0000] <TabAtkins>
Wondering if I want to remove the "when called on a ..." clause and just say `|this|.<dfn>...</dfn> method`

[15:30:01.0000] <Domenic>
The latter seems weird... what we really need to do is just define "this" in Web IDL

[15:30:05.0000] <Domenic>
long-standing issue

[15:30:12.0000] <Domenic>
not too hard, we should just do it

[15:30:15.0000] <TabAtkins>
Yeah.

[15:30:36.0000] <TabAtkins>
And then I have to special-case the |this| var to not complain even if it's only a single reference in the algo. ^_^

[15:30:50.0000] <TabAtkins>
Well, I can do that right now I guess.

[15:30:52.0000] <Domenic>
Not even sure it's a var... we've been using <b> in HTML I think

[15:31:06.0000] <Domenic>
(And <emu-val> in ES specs, heh)

[15:31:12.0000] <TabAtkins>
It's at the same level of value as the argument objects, which we use <var> to mark up normally.

[15:31:37.0000] <Domenic>
I dunno, in JS at least it's not a variable in any sense

[15:31:41.0000] <Domenic>
Just an identifier

[15:32:06.0000] <TabAtkins>
You're talking major spec-ese nerdery.  To normal people it's an auto-bound variable that you get in functions. ^_^

[15:32:15.0000] <Domenic>
yeah perhaps

[15:33:02.0000] <TabAtkins>
It just doesn't seem valuable, especially in these algos, to distinguish it visually from the |value| arg.

[15:33:17.0000] <TabAtkins>
That said, giving it special linking to WebIDL might make it worthwhile.

[15:34:33.0000] <TabAtkins>
That is, I'm okay with it having the normal idl-link styling if I can write {{this}} and have it magically work.

[15:34:50.0000] <TabAtkins>
Dunno what definition type it should even be marked up as, tho.

[15:35:03.0000] <TabAtkins>
I guess [=this=] works fine too.

[15:53:18.0000] <TabAtkins>
Hmm, the only way to represent a Map iterator in WebIDL is with sequence<sequence<(keyType or valueType)>>, right?  And then manually iterating it to verify that each value is a 2-tuple with the first being of the keyType and the second being of the valueType?

[15:54:25.0000] <TabAtkins>
(Context is that I'd like to allow a CSSCalcValue to be constructed by passing it either an object of {px:5, ...} or by passing a map, since it's a Map-like already.

[15:54:26.0000] <Domenic>
I think so, is that what URL does? I bet this was a "wait until two people need it" situation

[15:54:33.0000] <TabAtkins>
)

[15:55:45.0000] <TabAtkins>
Yeah, looks like that's exactly what URL does.

[15:56:00.0000] <TabAtkins>
I'll file a bug on WebIDL asking for, uh, I guess a map-sequence<> type?

