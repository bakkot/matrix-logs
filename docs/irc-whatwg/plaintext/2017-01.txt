2017-01-01
[04:37:29.0000] <annevk>
Happy new year MikeSmith!

[04:38:12.0000] <MikeSmith>
gelukkig nieuwjaar

[04:38:17.0000] <MikeSmith>
annevk

[04:38:22.0000] <annevk>
😊


2017-01-02
[20:37:05.0000] <MikeSmith>
GPHemsley: about the wiki is there any way you can check and confirm that it is actually sending out out mail correctly when we create new account?

[20:38:55.0000] <MikeSmith>
GPHemsley: because see https://wiki.whatwg.org/wiki/Special:Log/newusers I created the TylerDH account on Dec 8 but that user never logged in. Instead they wrote to be directly to say that they never received any login message from the system after the account was created

[20:39:51.0000] <MikeSmith>
GPHemsley: and I just now created the OhReally account, so if that user also never receives a login message then I think there must be some problem we need to fix

[20:41:23.0000] <MikeSmith>
all that said, these days pretty much all new account requests are from people who want to add new meta[name] values to the https://wiki.whatwg.org/wiki/MetaExtensions page

[20:42:34.0000] <MikeSmith>
and I think it is time we quit encouraging people to do that, because for one thing the HTML checker no longer emits errors for unregistered meta[name] values

[20:44:29.0000] <MikeSmith>
because that https://wiki.whatwg.org/wiki/MetaExtensions page just ended up evolving in a massive dumping ground: just overwhelmed with junk/noise of name values that are almost all for private purposes with no general utility to anybody except the people who minted them

[22:17:01.0000] <MikeSmith>
time to drop the meta-name registration requirement from the spec https://github.com/whatwg/html/pull/2229

[23:29:17.0000] <MikeSmith>
2017 and caniuse.com is still insecure http-only 😞

[23:35:45.0000] <MikeSmith>
/me adds a comment to https://github.com/Fyrd/caniuse/issues/885

[06:03:42.0000] <zcorpan>
Ms2ger`: do you know if there's a gecko bug for removing XMLDocument's async?

[06:04:27.0000] <Ms2ger`>
zcorpan, I don't think so

[06:11:50.0000] <zcorpan>
Ms2ger`: ok, filed https://bugzilla.mozilla.org/show_bug.cgi?id=1328138

[06:12:31.0000] <Ms2ger`>
Thanks


2017-01-03
[23:56:32.0000] <XhmikosR>
MikeSmith: are you around?

[01:18:27.0000] <Ms2ger>
>  If ! IsCallable(F) is false:

[01:18:34.0000] <Ms2ger>
/me wonders who invented that syntax

[01:24:56.0000] <annevk>
Ms2ger: TC39

[01:25:18.0000] <annevk>
Ms2ger: they prolly got inspiration from CSS

[01:26:20.0000] <Ms2ger>
/me goes back to trying to find the point of the skip-when-determining-incumbent counter 

[01:27:49.0000] <MikeSmith>
XhmikosR: here now

[02:21:08.0000] <annevk>
zcorpan: what is still broken about the wiki?

[02:21:12.0000] <annevk>
zcorpan: it seems to function here

[02:21:18.0000] <annevk>
zcorpan: both logged in and out

[02:21:49.0000] <annevk>
‎OhReally added by MikeSmith even modified a page

[02:27:01.0000] <zcorpan>
annevk: i did not mean that it is currently broken, but it was recently

[02:27:49.0000] <zcorpan>
MikeSmith: does email from the wiki work now?

[02:28:01.0000] <MikeSmith>
yes

[02:28:15.0000] <zcorpan>
ok great

[04:11:21.0000] <annevk>
Anyone know when mkruisselbrink returns?

[04:11:29.0000] <annevk>
I'd like to get https://github.com/whatwg/url/issues/127 sorted

[04:37:45.0000] <XhmikosR>
MikeSmith: I went ahead and opened https://github.com/whatwg/html/pull/2230 for rel=mask-icon

[04:39:43.0000] <XhmikosR>
but I'm not sure there should be a specification for this at all. I mean it's a proprietary attribute

[04:41:42.0000] <annevk>
XhmikosR: lots of standards start out that way

[04:42:56.0000] <XhmikosR>
annevk: true, but still, personally I simply want it as an exception at this point

[05:16:11.0000] <annevk>
zcorpan: not sure what a "control picture" is

[05:23:01.0000] <zcorpan>
annevk: https://en.wikipedia.org/wiki/Unicode_control_characters#Control_pictures

[05:28:03.0000] <annevk>
zcorpan: ah okay, the stuff I found

[05:28:59.0000] <annevk>
I think I'd prefer something like that as well, I've never really understood why the long form is helpful

[05:31:06.0000] <zcorpan>
i guess the redundancy can help catch mistakes; if the character and the code point aren't the same, the spec editor made a mistake. but that's something the tooling can point out early if we want to provide both when writing a spec

[05:34:00.0000] <zcorpan>
but i'm not sure that's very useful anyway. could as well write "<code>a</code>" (or something simpler still) in the source and have bikeshed generate the desired output

[07:12:47.0000] <MikeSmith>
XhmikosR: thanks for creating that PR. As annevk mentioned, there are already lots of things in the spec that started out as proprietary, that were for better or worse initiated unilaterally by one browser project or another.

[07:17:22.0000] <MikeSmith>
XhmikosR: and I agree with zcorpan that we should just go ahead and define the UA processing. If you have time to help write up the details for that, it would be very welcome. But if your level or interest in this doesn’t merit you putting that much time into, that’s OK too, because as zcorpan says there, we can push further commits to that PR branch to add those details, and land it all together in

[07:17:28.0000] <MikeSmith>
the spec after that’s done.

[08:56:39.0000] <mounir>
bzed, annevk: I see that the notifications api has a readonly attlibute FrozenArray<NotificationAction> but WebIDL says that Dictionaries can't be used as parameters -- is it okay because it is technically a FrozenArray or is this part of the spec changing?

[08:57:39.0000] <Ms2ger>
What

[08:57:52.0000] <mounir>
s/parameters/attributes/

[08:58:18.0000] <Ms2ger>
Well, the type of the attribute is not a dictionary

[08:58:44.0000] <mounir>
isn't this mostly the same?

[08:58:56.0000] <Ms2ger>
So if the rule is "the type of an attribute must not be a dictionary", that API is technically correct

[08:58:57.0000] <mounir>
or maybe I misunderstand why there is this requirement

[08:59:00.0000] <Ms2ger>
(best kind of correct)

[08:59:12.0000] <mounir>
Ms2ger: "Dictionaries must not be used as the type of an attribute or constant."

[08:59:22.0000] <mounir>
so yes, but I'm not fully satisfied :)

[08:59:35.0000] <Ms2ger>
The reason for the rule is to ensure foo.x === foo.x is true

[08:59:50.0000] <Ms2ger>
If the type was a dictionary, those would be two different attributes

[08:59:56.0000] <Ms2ger>
s/attributes/objects/

[09:02:39.0000] <mounir>
Ms2ger: thanks for the background :)

[09:04:54.0000] <XhmikosR>
MikeSmith: I don't mind spending time on it. It's just that I'm not familiar with the whole process. So perhaps it would be better if one more experienced wrote the UA spec

[09:07:47.0000] <MikeSmith>
XhmikosR: well we’re not in any hurry and can help get you familiar with the process if you want to put time into it. They real payoff for you is that the next time you want to get something added to the spec, since you will have had the experience already, you can just sail through it then :)

[09:07:54.0000] <MikeSmith>
and the next time and the next

[09:08:20.0000] <MikeSmith>
til you have contributed a lot of stuff :)

[09:08:46.0000] <XhmikosR>
I doubt I'll need to do it anytime soon but I see your point :p

[09:09:26.0000] <MikeSmith>
yeah you may be surprised how soon something else comes up again that you have an interest in seeing get added or changed in the spec

[09:10:35.0000] <MikeSmith>
once you know it is a real possibility to be able to change the spec, it tends to make you see other things in need of improvement in it

[09:11:08.0000] <MikeSmith>
whereas before then it just seems like something unapproachable that other people toil away at

[09:11:21.0000] <XhmikosR>
MikeSmith: all right, how should I proceed then? Perhaps it might be better to keep the code comments on GH for future reference

[09:12:06.0000] <MikeSmith>
OK well I guess what I would do in this case is look for the most recent time that somebody added something similar to the spec

[09:12:31.0000] <MikeSmith>
which for this is either a standard rel value but maybe also a standard meta name value

[09:12:55.0000] <MikeSmith>
like meta[mame=theme-color]

[09:13:09.0000] <MikeSmith>
because that one like this also has UA requirements

[09:14:18.0000] <MikeSmith>
so I would search git log output to find when that meta[name=theme-color] addition was made and take a look at the diff for that

[09:14:24.0000] <XhmikosR>
it requires some tests too, right?

[09:14:38.0000] <MikeSmith>
yeah but you do not have to write those

[09:15:08.0000] <MikeSmith>
you can if you want and you may find that you have to for yourself in order to be able to spec it

[09:15:39.0000] <XhmikosR>
I'll try to see a previous patch and see how it goes

[09:15:44.0000] <MikeSmith>
OK

[09:17:53.0000] <MikeSmith>
that particular meta[name=theme-color] change might not be the most relevant corollary to rel=mask-icon, I dunno

[09:18:53.0000] <MikeSmith>
but if it’s not, you can ask here or in that github issue to see if anybody else has any better ideas as far as something to look at as a starting point

[09:28:21.0000] <Domenic>
XhmikosR: in this particular case I would try to base the UA processing model off of rel=icon. And looking at that part of the spec, most of it is dealing with sizes (not applicable here) and /favicon.ico fallback (not applicable here). So it's going to be pretty short, just a paragraph or so.

[09:29:03.0000] <annevk>
mounir: I suspect dictionaries will be allowed as attributes values at some point, but who knows

[09:29:25.0000] <XhmikosR>
Domenic: thanks, it's indeed a lot simpler. I'm just trying to set up the build tools locally for testing

[09:29:37.0000] <Domenic>
XhmikosR: ah yeah. Let us know if you need help with that.

[09:30:33.0000] <XhmikosR>
I'm a Windows user but shouldn't be hard since I have MSYS around

[09:33:20.0000] <gsnedders>
Is there any reason why HTML doesn't move to Bikeshed?

[09:33:26.0000] <gsnedders>
Apart from, well, the work involved?

[09:33:45.0000] <bzed>
mounir: I doubt you wanted to ask me that :)

[09:35:04.0000] <annevk>
gsnedders: speed, though perhaps that's less of an issue now

[09:36:15.0000] <XhmikosR>
Domenic: has anyone used the build tools on Windows? I'm getting tons of lint errors

[09:36:33.0000] <XhmikosR>
does the linter check the line endings? If so that would explain it

[09:36:45.0000] <XhmikosR>
bbs

[09:37:43.0000] <Domenic>
XhmikosR: ah yeah it probably does

[09:37:55.0000] <Domenic>
XhmikosR: I thought we set up Git to only use LF via .gitattributes, interesting

[09:38:23.0000] <Domenic>
XhmikosR: I use Windows myself :)

[09:57:09.0000] <XhmikosR>
Domenic: I don't see a .gitattributes file in the repo

[09:57:24.0000] <Domenic>
XhmikosR: there is one in whatwg/html; maybe not in whatwg/html-build

[09:57:37.0000] <XhmikosR>
yeah I mean in html-build

[09:57:39.0000] <Domenic>
XhmikosR: but yeah we haven't set the eol=lf setting anywhere, I guess we should

[09:58:05.0000] <XhmikosR>
Domenic: definitely if the linter expects LF

[09:58:15.0000] <XhmikosR>
BTW this is what I get if I remove the linter from build.sh

[09:58:16.0000] <XhmikosR>
Downloading list of W3C bugzilla bugs...

[09:58:16.0000] <XhmikosR>
Pre-processing the source...

[09:58:16.0000] <XhmikosR>
missed end of <noscript> intro.

[09:58:29.0000] <Domenic>
Yeah I imagine a lot of the toolchain gets thrown off by CRLFs

[09:59:02.0000] <XhmikosR>
also, the gitattributes in html repo isn't enforcing LF either

[09:59:04.0000] <XhmikosR>
source text diff=html linguist-language=HTML

[09:59:14.0000] <Domenic>
yeah, as I said, we should add that

[09:59:23.0000] <Domenic>
But in the meantime you can just do a clone with those settings

[09:59:34.0000] <Domenic>
I still can't believe Git has such a bad default on windows...

[09:59:34.0000] <XhmikosR>
how about having AppVeyor for Windows CI

[09:59:46.0000] <XhmikosR>
I can just add a gitattributes file and make a PR

[09:59:51.0000] <Domenic>
sure

[09:59:52.0000] <Domenic>
bbiab

[10:01:01.0000] <nox>
Domenic: Well, AFAIK notepad doesn't handle LF.

[10:01:11.0000] <nox>
Or did that finally get fixed?

[10:01:22.0000] <XhmikosR>
if one is using notepad for any kind of development, they shouldn't be called devs

[10:05:09.0000] <nox>
That doesn't sound very inclusive.

[10:06:55.0000] <XhmikosR>
nox: it's a fact. It's just a text viewer, nothing more. Doing any development with Windows notepad is asking for trouble

[10:07:33.0000] <nox>
Same as using nano from command line or textedit on OS X, that you shouldn't do it on a day by day basis doesn't mean it's never legit.

[10:08:02.0000] <nox>
Also, VS uses CRLF by default too,

[10:08:13.0000] <nox>
so I don't see how that is a bad default for Git.

[10:11:22.0000] <XhmikosR>
I have no interest in debating this. Use whatever you want yourself

[10:11:29.0000] <XhmikosR>
Domenic: the linter fails with LF too

[10:12:21.0000] <annevk>
XhmikosR: and you made no changes?

[10:15:15.0000] <annevk>
Is it normal for WPT Travis to hang for a long time?

[10:15:27.0000] <annevk>
Been waiting on https://github.com/w3c/web-platform-tests/pull/4413 for an hour now apparently

[10:23:24.0000] <jgraham_>
annevk: So I broke travis, sort of

[10:23:52.0000] <jgraham>
Upstreamed ~100 commits from m-c and that caused many failed travis builds

[10:24:11.0000] <jgraham>
It seems like a problem that could be fixed

[10:28:03.0000] <XhmikosR>
annevk: no changes, only LF for my local repos

[10:28:21.0000] <XhmikosR>
it's this line in lint.sh that fails on Windows https://github.com/whatwg/html-build/blob/master/lint.sh#L17

[10:28:29.0000] <XhmikosR>
I made PRs for you guys to look at

[10:31:44.0000] <Domenic>
XhmikosR: something must still be going wrong; on my Windows it never fails.

[10:31:53.0000] <Domenic>
PR looks pretty good, can merge in a bit after a doctor's appointment

[10:32:06.0000] <XhmikosR>
Domenic: have you set autocrlf to false somewhere?

[10:32:13.0000] <Domenic>
XhmikosR: yes, globally

[10:32:19.0000] <XhmikosR>
that must be why

[10:32:23.0000] <Domenic>
I guess

[10:32:27.0000] <XhmikosR>
I use the default setting

[10:33:00.0000] <XhmikosR>
but since it doesn't clone the html repo it shouldn't matter. My local branch has LF

[10:35:46.0000] <XhmikosR>
so I believe it must be the grep binary. What does `which grep && grep --version` output for you?

[10:35:48.0000] <XhmikosR>
$ which grep && grep --version

[10:35:48.0000] <XhmikosR>
GNU grep 2.5.4

[10:36:00.0000] <XhmikosR>
err

[10:36:09.0000] <XhmikosR>
 $ which grep && grep --version

[10:36:09.0000] <XhmikosR>
 /bin/grep.exe

[10:36:09.0000] <XhmikosR>
 GNU grep 2.5.4

[10:36:38.0000] <Domenic>
 /usr/bin/grep

[10:36:42.0000] <Domenic>
grep (GNU grep) 2.26

[10:37:41.0000] <XhmikosR>
Domenic: is that from msysgit?

[10:38:22.0000] <Domenic>
I think so

[10:38:29.0000] <XhmikosR>
yup I confirmed it

[10:38:54.0000] <XhmikosR>
ok so it's due to the old grep MSYS has

[12:32:42.0000] <XhmikosR>
Domenic: any idea why the output html files have tons of trialing whitespace?

[12:34:06.0000] <Domenic>
XhmikosR: hmm I've never checked, let me see if they do locally...

[12:36:52.0000] <Domenic>
XhmikosR: I don't see any locally just scrolling through... any line numbers I should check out?

[12:37:08.0000] <Domenic>
Ah I see some blank lines with trailing whitespace

[12:37:11.0000] <XhmikosR>
you won't see them in the resulting HTML

[12:37:19.0000] <XhmikosR>
but they are there

[12:37:41.0000] <Domenic>
Right I'm looking at the index.html output

[12:37:51.0000] <XhmikosR>
if your editor has an option to trim trailing spaces just do that

[12:38:03.0000] <Domenic>
Yeah I never edit the index.html directly

[12:38:06.0000] <XhmikosR>
ok so it's in the source expanded files too

[12:38:14.0000] <Domenic>
It's probably some artifact of the build process

[12:38:35.0000] <Domenic>
It is? The `source` file, at least, has none

[12:39:00.0000] <XhmikosR>
yeah `source` has nothing

[12:39:28.0000] <XhmikosR>
so since they are in temp/*preprocessed something in .pre-process-main.pl must do that

[12:44:39.0000] <XhmikosR>
it's 6149 whitespace characters in the all in one index.html file

[12:46:43.0000] <XhmikosR>
one I think is when a block is skipped like `w-nohtml`; that is being replaced with 3 spaces

[12:48:52.0000] <Domenic>
Makes sense. Not really something to be worried about.

[13:09:05.0000] <XhmikosR>
the html.spec.whatwg.org server is slow and the content is just static /

[13:10:36.0000] <XhmikosR>
it takes 0.6 s to load the html file from London

[13:15:34.0000] <XhmikosR>
also, doesn't seem the docs to comply with wcag2aa


2017-01-04
[18:16:33.0000] <rektide>
can someone please merge @domenic's https://github.com/whatwg/loader/tree/impl-status tree (one commit)

[18:17:22.0000] <rektide>
i kind of keep spazzing out thinking module-loader has seen zero progress since June & everyone is doing nothing, and some linkage to https://github.com/tc39/proposal-dynamic-import would help de-consternate the world on this particular point

[18:18:31.0000] <rektide>
specifically there is https://github.com/whatwg/loader/pull/152 for the pR

[18:32:18.0000] <Domenic>
XhmikosR: loading a 4 MB file in 0.6 s is pretty fast

[18:46:22.0000] <Domenic>
I guess it's only 1.4 MiB

[20:26:28.0000] <rektide>
i just filed https://github.com/whatwg/html/issues/2235

[20:27:09.0000] <rektide>
would really like to see HTMLScriptElement have- when it is type="module"- properties  that in some way reflect what the module exports

[20:27:24.0000] <rektide>
seems like a missing link between DOM<-> JS.

[23:27:52.0000] <XhmikosR>
Domenic: I check TTFB etc. Anyway, aparently from USA it's faster so it's just a a matter of location. Still, it could definitely be a lot faster.

[00:27:22.0000] <XhmikosR>
Domenic: is there any interest for this? https://github.com/whatwg/html/compare/master...XhmikosR:xmr-optimize-images  Todat saves should be around 80KB

[00:31:04.0000] <annevk>
XhmikosR: if indeed lossless, yes!

[00:31:47.0000] <XhmikosR>
yeah I used zopfli too for the PNG files for another ~5% save

[00:32:36.0000] <annevk>
XhmikosR: we don't really have any CDN at the moment, I suppose we could look into using one at some point for faster delivery of content

[00:34:01.0000] <XhmikosR>
annevk: still, the server seems slow to me even from USA

[00:34:17.0000] <XhmikosR>
maybe it's poorely configured or something

[00:34:24.0000] <annevk>
XhmikosR: I guess DreamHost isn't the fastest 😟

[00:34:47.0000] <annevk>
For a while HTTPS was pretty poorly configured

[00:34:57.0000] <XhmikosR>
I still think it's a matter of config :/

[00:35:01.0000] <XhmikosR>
https://gtmetrix.com/reports/mpc-hc.org/WsZu4GXS#waterfall

[00:35:09.0000] <XhmikosR>
see how fast is the html load?

[00:35:35.0000] <XhmikosR>
I have disabled .htaccess though and that can make a big diff

[00:37:51.0000] <XhmikosR>
and that server is just a 3 core non SSD based on Amsterdam so nothing fancy :)

[00:38:43.0000] <annevk>
Our current approach to the server setup is rather hands off since nobody really wants to play sysadmin, although MikeSmith has made the occasional noise

[00:39:08.0000] <annevk>
So anything that would require a non-default setup on DreamHost isn't really considered

[00:39:42.0000] <XhmikosR>
have you thought about Cloudflare?

[00:40:11.0000] <XhmikosR>
personally I disagree with their SSL approach but still it's the best free CDN

[00:43:31.0000] <XhmikosR>
annevk: https://github.com/whatwg/html/pull/2236

[00:45:48.0000] <XhmikosR>
also, I could maintain the server if you trust me ofc, since as far as I can tell only basic stuff are needed. For my servers I use Debian 8 with MPM Event and not prefork which was the old default

[00:48:14.0000] <annevk>
I think it's worth considering improving the setup

[00:49:06.0000] <annevk>
Domenic: this is another reason to setup whatwg/meta to have these kind of discussions somewhat coordinated, if you don't object I think I'll go ahead and make it later today

[00:51:51.0000] <XhmikosR>
Domenic: just figured out why the whitespaces are in the output html

[00:52:00.0000] <XhmikosR>
all except for one that is :p

[00:52:31.0000] <XhmikosR>
perl .pre-process-main.pl $($VERBOSE && echo "--verbose") < $HTML_SOURCE/source > $HTML_TEMP/source-expanded-1

[00:52:43.0000] <XhmikosR>
it's due to the spaces before and after the redirection operators

[01:44:23.0000] <annevk>
hsivonen: any thoughts on https://github.com/whatwg/encoding/issues/85?

[01:44:40.0000] <annevk>
hsivonen: oh actually, I guess I still haven't created tests to proof that it is required

[03:10:29.0000] <annevk>
Testing navigation is full of surprises

[04:15:35.0000] <annevk>
igrigorik: let me know when you're around again, want to ask about https://github.com/whatwg/url/issues/26

[04:41:54.0000] <hsivonen>
annevk: encoding_rs already supports "with BOM removal" and "without BOM handling" variants with any encoding, not just UTF-8

[04:42:41.0000] <annevk>
hsivonen: why would you remove the BOM but not honor it?

[04:43:03.0000] <hsivonen>
annevk: the spec requires it for UTF-8 already

[04:43:05.0000] <hsivonen>
let's see

[04:43:32.0000] <hsivonen>
https://encoding.spec.whatwg.org/#utf-8-decode

[04:43:49.0000] <hsivonen>
so whatever external spec uses that hook requires that functionality to be there

[04:43:56.0000] <hsivonen>
XHR with JSON, I think is one

[04:44:07.0000] <annevk>
Well, but that doesn't remove a UTF-16 BOM

[04:44:45.0000] <hsivonen>
annevk: in encoding_rs, if you use decode_with_bom_removal with UTF-16BE/LE, it does

[04:45:20.0000] <hsivonen>
annevk: (no use case at present, just making all the BOM options do something instead of panicing with all encodings)

[04:46:00.0000] <annevk>
Mkay, I rather keep the specification algorithms limited to what is actually needed for the web

[04:46:07.0000] <hsivonen>
annevk: I guess I misunderstood the question about issue 85

[04:59:46.0000] <JakeA>
annevk: I'm thinking of closing the "aborting a fetch" issue and starting a new one, with a summary of the story so far. Any objections?

[05:00:47.0000] <annevk>
JakeA: that's fine, the load time is getting out of hand

[05:02:26.0000] <JakeA>
annevk: heh, yeah. Part of that is down to a GitHub "bug" where it serves us an editor with every comment. Ends up being 5.2mb of HTML

[05:03:12.0000] <JakeA>
annevk: logged out users 'only' get 495k

[08:41:14.0000] <mounir>
annevk: it sounds that Notification.actions does not return a parsed URL for `icon`. Is that correct?

[09:35:32.0000] <annevk>
mounir: that's prolly wrong

[09:35:51.0000] <annevk>
mounir: should be normalized

[09:36:26.0000] <annevk>
mounir: that would make sense anyway

[10:02:15.0000] <annevk>
jgraham: I catched https://github.com/w3c/web-platform-tests/pull/4378 by chance after the fact

[10:02:23.0000] <annevk>
jgraham: is there some kind of plan to ping test creators?

[10:03:19.0000] <annevk>
rbyers: it's unclear to me what the specification motivation was for landing that

[10:33:29.0000] <jgraham>
annevk: No specific plan. What did you have in mind?

[10:55:17.0000] <annevk>
jgraham: include them as reviewer I thought

[10:55:45.0000] <annevk>
jgraham: I guess it might need a way to opt out though, might get tricky

[10:55:46.0000] <jgraham>
Oh, I see what you mean. Yeah that might be possible.

[10:59:28.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/issues/447 is already long again

[10:59:33.0000] <annevk>
JakeA: guess that was to be expected

[10:59:52.0000] <annevk>
JakeA: so the main thing I don't want to get lost is that cancelation is not the only extension we need to add

[11:00:18.0000] <annevk>
JakeA: we also want something for changing priority and observing pushes

[11:01:04.0000] <wanderview>
I don't see why priority wouldn't just be part of the Request like cache control

[11:02:02.0000] <annevk>
wanderview: I mean changing priority after the fact, once the request is already transmitted

[11:02:14.0000] <wanderview>
annevk: what is the use case?

[11:02:18.0000] <wanderview>
and does anyone support that?

[11:02:23.0000] <annevk>
wanderview: H/2 does

[11:03:01.0000] <annevk>
wanderview: I've had several requests for it, don't immediately know the use case, but if it's available at a low-level it seems reasonable it might someday be exposed

[11:04:59.0000] <annevk>
JakeA: wanderview: progress events is another thing that sorta wants to be on an object representing the ongoing fetch

[11:05:18.0000] <annevk>
JakeA: wanderview: the promise object still seems like a fairly natural fit for all these

[11:05:53.0000] <annevk>
URL is back to a single issue page \o/

[11:52:46.0000] <smaug>
what is the role of authoring rules in HTML spec? Does anyone care about them?

[11:59:58.0000] <gsnedders>
smaug: the cult of the validator lives on!

[12:27:43.0000] <tantek>
what is the role of block vs inline markup where some tags are not allowed inside other tags?

[12:35:34.0000] <annevk>
tantek: mostly parser limitations

[12:35:56.0000] <tantek>
based on bad SGML design assumptions

[12:37:25.0000] <zcorpan>
tantek: https://html.spec.whatwg.org/#restrictions-on-content-models-and-on-attribute-values

[15:30:06.0000] <smaug>
does some spec talk about out-of-memory situations?

[15:33:39.0000] <gsnedders>
No. It's just covered in the general "hardware limitations" clause, typically.

[15:33:59.0000] <gsnedders>
I think ES might touch slightly more, esp. with Typed Arrays.


2017-01-05
[18:18:34.0000] <MikeSmith>
botie, inform smaug the role of authoring roles in the HTML spec is to help authors catch mistakes they might have otherwise missed. They are essentially standardized linting/static-analysis checks. See https://checker.html5.org/about.html#why-validate

[18:18:34.0000] <botie>
will do

[18:21:40.0000] <MikeSmith>
botie, inform smaug for making HTML-checking tools useful it is best that we have a common normative set of rules to check. That is what the spec provides. Without that we instead just have makers of checking tools basing the checks on whatever whims or personal preferences they wantーlike what the situation is with some JavaScript linting tools.

[18:21:41.0000] <botie>
will do

[18:23:06.0000] <tantek>
MikeSmith++

[18:36:54.0000] <jwalden>
is "real	2m6.762s" actually unsurprising for the time it takes to |git annotate| around thirty lines of the HTML spec?  :-\

[18:37:33.0000] <jwalden>
'cause that's what I got for |time git annotate -L94793,94827 source| on the spec just now

[18:58:12.0000] <jwalden>
aaaaugh so many restructurings making annotation a long series of manual jumpbacks

[19:55:16.0000] <MikeSmith>
jwalden: fwiw what I do is, I dumped `git log -p` output to file and I just do string searches through the to trace changes

[19:56:20.0000] <MikeSmith>
it is still a PITA even doing it that way, but for me at least less of PITA than trying to use git annotate or any of the wrappers around it for doing recursive blames

[19:57:27.0000] <MikeSmith>
on my machine it takes like 3-4 minutes or so to (re)dump out the full log

[19:57:54.0000] <MikeSmith>
and the log is not so huge, about 90M

[22:35:57.0000] <annevk>
git log --grep ftw

[23:07:13.0000] <hsivonen>
foolip: do you happen to recall why the index for Big5 in the Encoding Standard has duplicate entries instead of using CJK Compatibility Ideographs for what would otherwise be duplicates? (The other CJK indices use CJK Compatibility Ideograph code points for what would logically be duplicates.)

[23:12:11.0000] <hsivonen>
annevk: or do you happen to recall why?

[23:14:52.0000] <annevk>
hsivonen: no, sorry

[23:15:35.0000] <timdream>
hsivonen: what are the examples to your question

[23:21:01.0000] <hsivonen>
timdream: hmm. finding an example is harder than I expected. Maybe that's my answer. Still trying.

[23:24:29.0000] <hsivonen>
hmm. Lunde says there are supposed to be two doubly-mapped characters in Big5, but I see many more in index-big5

[23:27:17.0000] <zcorpan>
can someone with Edge test what it does for https://github.com/whatwg/html/issues/2174#issuecomment-269965310 ?

[23:34:58.0000] <hsivonen>
timdream: so it turns out that the two characters that I infer Lunde refers to are U+FA0C and U+FA0D. and these two do appear in index-big5

[23:35:11.0000] <hsivonen>
but then there are *other* duplicates

[23:35:44.0000] <hsivonen>
now I don't know if the other duplicates arise from the HKSCS merge or if they arise from other reasons

[23:36:25.0000] <hsivonen>
According to Lunde and Unicode, the unextended Big5 is not supposed to have as many duplicates as index-big5 has

[23:36:48.0000] <timdream>
hsivonen: i think so. no idea, might have some if could give me some code points

[23:37:55.0000] <hsivonen>
U+89A6 and U+799B to pick a couple at semi-random

[23:38:16.0000] <timdream>
hsivonen: i was told the big5-to-unicode table should be based on big5-hkscs and unicode-to-big5 is strictly the original CP950

[23:38:17.0000] <hsivonen>
timdream: anythig with a red border in https://hsivonen.fi/encoding-visualization/big5.html

[23:38:54.0000] <timdream>
hsivonen: looking

[23:40:31.0000] <hsivonen>
I spot-checked some of the red-border characters, and they don't seem to have corresponding Compatibility Ideographs defined, so as far as Compatibility Ideographs go, there's nothing amiss after all

[23:42:24.0000] <timdream>
hsivonen: hum, i was wrong, encoding standard (an re-impl in Gecko) removes the asymmetrical mapping of Big5

[23:43:04.0000] <hsivonen>
timdream: there's an asymmetry: pointers below a certain threshold are ignored by the encoder

[23:43:22.0000] <timdream>
hsivonen: ok

[23:43:52.0000] <timdream>
hsivonen: sorry, i still have no idea on your duplication question though.

[23:44:01.0000] <hsivonen>
timdream: ok. thanks

[23:44:53.0000] <timdream>
hsivonen: would it be helpful if i try to find someone that could extract or run the legacy ET3 Chinese DOS system?

[23:45:26.0000] <timdream>
hsivonen: maybe take a screenshot of these "duplicate" glyphs...

[23:45:27.0000] <hsivonen>
timdream: no need. I was just curious. I don't have any real indication of there being an actual problem.

[23:46:49.0000] <timdream>
hsivonen: but that does mean Unicode did not achieve round-trip compatibility with Big5: https://www.wikiwand.com/en/CJK_Compatibility_Ideographs

[23:48:04.0000] <hsivonen>
timdream: It seems to me it did with unextended Big5, but that's not what the Encoding Standard has.

[23:50:06.0000] <timdream>
hsivonen: the community have collected a few mapping table here https://moztw.org/docs/big5/ ... at least in CP950 I don't see U+89A6 being mapped twice

[23:51:25.0000] <timdream>
(yet it got mapped twice in https://moztw.org/docs/big5/table/hkscs2001-b2u.txt )

[23:53:00.0000] <hsivonen>
timdream: OK. chances are that the duplicates come from HKSCS then

[23:54:11.0000] <timdream>
/me (sad face)

[23:57:34.0000] <timdream>
hsivonen: yeah at least from your example I can see that CP950 does not map byte sequence 0x8F 0xCB while HKSCS do

[23:58:18.0000] <hsivonen>
timdream: OK.

[00:18:11.0000] <annevk>
hsivonen: what foolip did is basically a merge between "normal" Big5 and HKSCS, resolving the conflicts between the two somehow and maybe avoiding PUA here and there

[00:18:18.0000] <annevk>
hsivonen: it's described in an email somewhere

[00:27:49.0000] <annevk>
mounir: https://notifications.spec.whatwg.org/#create-a-notification seems to do an eager parse for action icon URLs

[00:28:00.0000] <annevk>
mounir: I hadn't actually looked at the specification yesterday, but it seems that's covered

[00:41:30.0000] <timdream>
annevk: having a link to that e-mail will be a great help allowing me to amend the mentioned docs :)

[00:42:15.0000] <timdream>
annevk: that document still says "a new feature was landed in Mozilla 1.8" for example

[00:42:17.0000] <MikeSmith>
zcorpan: glad to see https://github.com/whatwg/wattsi/pull/39 getting OKed

[00:43:42.0000] <annevk>
timdream: I can have a look

[00:44:19.0000] <zcorpan>
MikeSmith: yep. maybe one day i can try to fix the followup

[00:45:02.0000] <annevk>
timdream: https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Apr/thread.html#msg42

[00:45:25.0000] <timdream>
annevk: 👍

[00:45:41.0000] <MikeSmith>
zcorpan: Yeah if you want I can make time to look into changing it to use Hixie’s Ropes stuff, but given that he says it’s not a problem as-is, it is hard to prioritize that very high

[00:46:04.0000] <annevk>
timdream: https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Mar/thread.html#msg259 also

[00:46:39.0000] <MikeSmith>
zcorpan: but I guess we should at least take time to do some rough benchmarking with and without this change to find out if it actually introduces any measurable slowdown to the build time

[00:46:48.0000] <annevk>
timdream: and https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Apr/thread.html#msg95 which somehow is a separate thread

[00:47:30.0000] <zcorpan>
MikeSmith: my thoughts as well, trying to time generating the spec now :-)

[00:48:09.0000] <MikeSmith>
super

[01:15:26.0000] <zcorpan>
MikeSmith: https://github.com/whatwg/wattsi/issues/40#issuecomment-270597675

[01:16:13.0000] <MikeSmith>
/me looks

[01:18:05.0000] <MikeSmith>
zcorpan: cool!

[01:38:56.0000] <annevk>
jgraham: ever encountered something like https://github.com/w3c/web-platform-tests/pull/4378#issuecomment-270597694 before?

[01:39:32.0000] <annevk>
I'm not really sure what to think of it

[01:45:19.0000] <jgraham>
annevk: There shouldn't be any console logging in tests

[01:45:47.0000] <annevk>
jgraham: there isn't

[01:46:24.0000] <annevk>
jgraham: Chrome prints test results to the console I suspect, but the console can also contain other bits

[01:46:40.0000] <annevk>
jgraham: maybe the problem is their testharness though

[01:55:16.0000] <jgraham>
Yeah, I think that a system where races in log message printing can break your test output is broken by design

[02:04:37.0000] <annevk>
JakeA: in https://github.com/whatwg/fetch/issues/447 you reference the service worker case a few times, but it's not explained

[02:05:15.0000] <annevk>
JakeA: oh I see, it's about whether the page did something

[02:20:49.0000] <JakeA>
annevk: I'll add more detail

[02:21:38.0000] <annevk>
JakeA: it kinda makes sense to expose it on FetchEvent, or maybe make respondWith reject

[02:22:28.0000] <JakeA>
annevk: It seems like we need channels for anything "request modifying". Eg, if I try to change the priority of a request from a page, how do I hear about that in the service worker?

[02:25:59.0000] <annevk>
JakeA: I recommend saying "fetch modifying"

[02:26:14.0000] <annevk>
JakeA: and yeah

[02:28:54.0000] <annevk>
JakeA: becomes more like a ControlToken then or a FetchToken

[02:29:20.0000] <annevk>
JakeA: which you can either propagate or ignore

[02:29:27.0000] <JakeA>
annevk: yeah, if a fetch() gets a controller, a fetch event needs a controller observer

[02:43:19.0000] <annevk>
JakeA: yeah, it wants to observe, but it also wants to propagate to any fetches of its own (and perhaps any cache/db queries)

[02:43:53.0000] <annevk>
JakeA: but maybe just observing is enough and the rest can be a library, but then observing could also be a library (through postMessage)

[02:44:22.0000] <JakeA>
annevk: controllerObserver.pipeTo(controller) kinda thing

[03:18:55.0000] <JakeA>
annevk: what about: const fetch = new Fetch(request); fetch.connected.then(response => …)

[03:19:20.0000] <JakeA>
I'm trying to avoid having to pass the controller back out of a revealing function

[03:23:06.0000] <annevk>
JakeA: that's reasonable, though I believe Domenic doesn't want new constructors with side effects

[03:23:24.0000] <annevk>
JakeA: so you'd need fetch.fetch() or requivalent

[03:23:26.0000] <JakeA>
annevk: controllableFetch() then

[03:23:27.0000] <JakeA>
hah

[03:24:00.0000] <JakeA>
annevk: although that brings me back to just making fetch() return a thennable controller

[03:24:15.0000] <annevk>
yeah, I still like that the best

[03:24:55.0000] <annevk>
otherwise it becomes a third network API...

[03:41:14.0000] <nox>
Why is document.open's spec weirdly written?

[03:41:32.0000] <nox>
And by that I mean that it doesn't piggyback WebIDL as much as the rest of the HTML spec,

[03:41:43.0000] <nox>
saying stuff like "7. Let type be the value of the first argument."

[03:45:08.0000] <annevk>
nox: old

[03:45:15.0000] <nox>
Ok.

[03:45:44.0000] <annevk>
I have a half-hearted patch somewhere

[03:46:04.0000] <annevk>
But it's not complete and I noticed so many problems along the way I just moved on to other things

[03:46:41.0000] <mounir>
annevk: any reason why you didn't leave a comment regarding the freeze question?

[03:47:55.0000] <annevk>
mounir: pointer?

[03:48:03.0000] <annevk>
Probably missed it

[03:48:30.0000] <annevk>
I only get one notification per thread and I didn't read the whole thing

[03:48:53.0000] <mounir>
annevk: https://github.com/WICG/mediasession/pull/162#discussion_r94619550

[03:50:20.0000] <botie>
smaug, at 2017-01-05 02:18 UTC, MikeSmith said: the role of authoring roles in the HTML spec is to help authors catch mistakes they might have otherwise missed. They are essentially standardized linting/static-analysis checks. See https://checker.html5.org/about.html#why-validate and at 2017-01-05 02:21

[03:50:20.0000] <botie>
UTC, MikeSmith said: for making HTML-checking tools useful it is best that we have a common normative set of rules to check. That is what the spec provides. Without that we instead just have makers of checking tools basing the checks on whatever whims or personal preferences they wantーlike what

[03:50:21.0000] <botie>
the situation is with some JavaScript linting tools.

[03:51:21.0000] <smaug>
MikeSmith: but why authoring rules are different to the spec for implementers?

[03:51:27.0000] <smaug>
Couldn't those be the same

[03:52:03.0000] <MikeSmith>
because implementors still have to deal with cases where authors don'

[03:52:12.0000] <MikeSmith>
because implementors still have to deal with cases where authors don’t follow the rules

[03:52:48.0000] <MikeSmith>
anyway I agree it is confusing to implementors to have authoring rules in the spec

[03:53:42.0000] <MikeSmith>
but the only alternative is to move them all out to a separate spec, which also has big downsides

[03:55:26.0000] <smaug>
of course I feel embarrassed when I happened to read authoring rules, but that was the first thing find-in-the-page gave me as result when looking at usemap stuff. I should have looked at that part was in 'authoring'.

[03:57:45.0000] <MikeSmith>
smaug: you are not the first implementor who the spec has confused that way and you won’t be the last

[03:58:59.0000] <MikeSmith>
IMHO in some ways we are getting the worst of both worlds by conflating UA implementation requirements and author requirements into the same spec

[03:59:52.0000] <MikeSmith>
the spec is rightly optimized essentially for that needs of implementors, because that it what functional specs are for, and that’s what the greatest need is

[03:59:58.0000] <smaug>
I don't understand why the rules for authoring can be so different. I mean, in this case at least authoring rules could easily just follow what implementations should do

[04:00:37.0000] <smaug>
the less authoring requirements and implementation requirements differ, the better, I think

[04:00:38.0000] <MikeSmith>
well there are a lot of cases where we make the author rules stricter than what UAs allow

[04:00:47.0000] <smaug>
why?

[04:00:57.0000] <annevk>
smaug: well for one, a couple implementations don't support id attributes

[04:00:59.0000] <MikeSmith>
sure I agree with you ideally that is how it should be

[04:01:13.0000] <smaug>
why authoring rules need to be stricter ?

[04:01:14.0000] <annevk>
smaug: so making developers stick to name will make more stuff work

[04:01:41.0000] <MikeSmith>
smaug: yes, because of https://checker.html5.org/about.html#why-validate

[04:01:44.0000] <annevk>
smaug: and will also be more backwards compatible

[04:01:49.0000] <MikeSmith>
> There are some markup cases defined as errors because they are potential problems for accessibility, usability, interoperability, security, or maintainability—or because they can result in poor performance, or that might cause your scripts to fail in ways that are hard to troubleshoot.

[04:01:51.0000] <mounir>
annevk: thanks :)

[04:02:00.0000] <MikeSmith>
> Along with those, some markup cases are defined as errors because they can cause you to run into potential problems in HTML parsing and error-handling behavior—so that, say, you’d end up with some unintuitive, unexpected result in the DOM.

[04:04:07.0000] <annevk>
JakeA: we can't subclass promise? Or would then() then return the wrong thing?

[04:04:42.0000] <JakeA>
annevk: subclassedPromise.then() creates a new promise using subclassedPromise.constructor

[04:04:57.0000] <annevk>
JakeA: and we cannot override that?

[04:05:18.0000] <JakeA>
annevk: nope. There used to be a @@species thing in the spec to allow you to do that, but it's gone

[04:06:06.0000] <annevk>
JakeA: @@species is still there, but I guess you're saying promises no longer use it?

[04:06:48.0000] <annevk>
JakeA: https://tc39.github.io/ecma262/#sec-get-promise-@@species suggests it's still possible

[04:07:29.0000] <JakeA>
annevk: oh wow. I wonder if it vanished & returned, or if I misunderstood

[04:13:12.0000] <JakeA>
annevk: updated the comment to use @@species

[06:44:45.0000] <Ms2ger>
annevk, has anyone looked at whatwg.org recently?

[06:45:09.0000] <annevk>
Ms2ger: it's known, but no solution

[06:45:18.0000] <Ms2ger>
Okay, thanks

[06:45:44.0000] <annevk>
Ms2ger: apparently foolip setup monitoring software

[06:45:49.0000] <annevk>
Ms2ger: but we don't have repair software

[06:46:24.0000] <foolip>
I shouldn't be that hard to have better uptime than this...

[06:47:11.0000] <annevk>
We have multiple offers for sysadmins now...

[06:47:49.0000] <foolip>
uhum. if not for the wiki, would it be entirely static?

[06:47:57.0000] <foolip>
I guess there's the webhooks too

[06:48:58.0000] <annevk>
The webhooks are slowly being replaced with software that runs on Travis and uses scp to copy files over

[06:50:20.0000] <foolip>
hsivonen: Encoding's Big5 is essentially just the union of what implementations did at the time, I think typically siding with Big5-HKSCS in case of conflict. If there are duplicates, that's probably because implementations of Big5-HKSCS already did, but it's possible things have changed since.

[06:50:59.0000] <foolip>
If I'm not mistaken, the decoder is a superset of Big5-HKSCS, with no or very few (<5) exceptions.

[06:57:31.0000] <jgraham>
/me wonders if foolip's grand plan involves making github pay for whatwg's bandwidth

[06:58:24.0000] <foolip>
jgraham: not really, but for just hosting static content, one doesn't have to do much thinking, just find a provider with high reliability.

[07:18:42.0000] <zcorpan>
any opinions on https://github.com/whatwg/html/pull/2236 ? i'm not a color profile expert but it seems to me that the first iteration with darker colors were more correct (since they matched SVG colors and XhmikosR's comments)

[07:20:14.0000] <Domenic>
foolip: annevk: some of the demos use CGIs, and we use .htaccess a lot

[07:20:40.0000] <foolip>
Domenic: ok, so no quickfix then :)

[07:21:09.0000] <Domenic>
We could lose the CGIs without much sadness, but not sure what the contemporary alternatives to our htaccess funtimes are.

[07:21:18.0000] <Domenic>
E.g. does nginx have an equivalent?

[07:22:47.0000] <annevk>
Yeah, we'd have to do some configuration differently

[07:23:42.0000] <jgraham>
The ngix docs say ".htaccess is horrible for performance, don't use it"

[07:25:15.0000] <gsnedders>
Don't we have enough people from Google working on WHATWG specs? Doesn't someone at Google know something about hosting a site? :)

[07:28:05.0000] <Domenic>
As far as I can tell nginx wants you to use a single config file per server

[07:28:21.0000] <Domenic>
Which is definitely faster but is kind of sad in that we can no longer check them into the repos

[07:28:39.0000] <Domenic>
I guess we could check them into a separate repo

[07:30:09.0000] <boogyman>
You could create a single template and upon startup render the appropriate config

[07:32:46.0000] <wanderview>
annevk: JakeA: what would fetch() look like if we designed it today?  would we return a Fetching object with a Fetching.response promise for what is currently returned by fetch()?

[07:33:10.0000] <wanderview>
if we can agree on what we would like it to look like, maybe we can find the least painful way to backfill to current API

[07:34:10.0000] <JakeA>
wanderview: for me, fetch() would return a fetching object that'd have a .responded (or something) promise that'd resolve with what fetch() resolves with today

[07:34:27.0000] <wanderview>
JakeA: ok, lets just make fetch2() then!

[07:34:29.0000] <JakeA>
wanderview: that's why I'm keen on adding the controller stuff to the promise that fetch() returns

[07:34:32.0000] <JakeA>
haha

[07:35:31.0000] <wanderview>
JakeA: I mean, other than some embarrassment, what are the reasons not to add another function that does what we want?  then we have "simple fetch" and "advanced fetch"

[07:36:25.0000] <wanderview>
JakeA: it feels icky to add stuff onto the promise... seems like it will break with any aggregation with promise tools like Promise.all(), etc

[07:36:47.0000] <wanderview>
I mean, it feels like the "promise type that does what we want" has sailed

[07:37:25.0000] <JakeA>
wanderview: ^ see above where I suggested controlledFetch()

[07:37:50.0000] <JakeA>
wanderview: but the promise subclass thing works find with Promise.all() - you just get a regular promise in that case

[07:37:55.0000] <wanderview>
JakeA: oh... backscroll... I'll look!

[07:38:08.0000] <JakeA>
(there's not much to see)

[07:38:33.0000] <annevk>
Domenic: yeah, we'd put the whole thing in GitHub

[07:38:56.0000] <wanderview>
JakeA: oh, I don't see the controlledFetch() thing

[07:39:05.0000] <annevk>
Domenic: going down that route is an advantage in some way, since we can just switch hosts whenever, since all the config is accounted for

[07:39:33.0000] <JakeA>
wanderview: ah, it was controllableFetch()

[07:40:23.0000] <wanderview>
ah, I see

[07:41:37.0000] <wanderview>
JakeA: oh, so "putting it on the promise" is really just returning a FetchController with a .then() that returns a Response... it could be an alias for FetchController.responded.then()

[07:42:09.0000] <JakeA>
wanderview: yeah, but not sure what the benefit in the alias would be

[07:42:37.0000] <wanderview>
JakeA: it makes me feel better to think about it from it starting as a different type and using Promise .then() compat feature

[07:42:55.0000] <wanderview>
JakeA: instead of having a Promise prototype with extra gunk added on

[07:43:54.0000] <JakeA>
wanderview: that would work (http://jsbin.com/zopaya/edit?js,console), but seems a bigger change as instanceof Promise is no longer true

[07:44:40.0000] <annevk>
wanderview: FetchController could just be a subclass of Promise

[07:45:21.0000] <wanderview>
ok

[07:45:38.0000] <annevk>
wanderview: the reason to avoid a new API is because that has a high cost (lots of additional tests, everyone has to relearn, existing code needs lots of conditionals, etc.)

[07:45:40.0000] <wanderview>
JakeA: I'm not going to comment on the issue because its too long already... but this sound good to me

[07:50:00.0000] <JakeA>
annevk: in terms of the subclass, that'll upset people who didn't like promise.cancel(), as the person they pass the promise to can control the fetch. But they can already control the response so I don't think it's a huge deal.

[07:50:14.0000] <JakeA>
And they're one .then() away from blocking that if they want.

[07:50:31.0000] <annevk>
JakeA: yeah, just give .then() to your consumers

[07:51:10.0000] <JakeA>
annevk: well, seems like we're in agreement. We just have to convince the rest of the world :D

[07:56:05.0000] <annevk>
hah

[07:59:05.0000] <wanderview>
JakeA: annevk: I think we have to accept some people will not be happy no matter what

[07:59:22.0000] <JakeA>
general life advice

[07:59:41.0000] <wanderview>
JakeA: you could go the Trump route and troll them in the process, because why not?

[07:59:57.0000] <wanderview>
(probably not a good idea)

[07:59:59.0000] <JakeA>
hahaha

[08:09:27.0000] <hsivonen>
foolip: thanks

[08:21:43.0000] <mathiasbynens>
wtf, `document.querySelectorAll('a[href^="h')` (note: missing `"]`) works somehow?

[08:23:58.0000] <XhmikosR>
for what is worth, there's no reason to jump to nginx. A properly configured Apache site will be pretty fast nowadays

[08:24:44.0000] <Ms2ger>
/me puts `body { color: green` in mathiasbynens's CSS

[09:58:52.0000] <gsnedders>
mathiasbynens: there's a bug on csswg-drafts raised by me on that, works by design apparently

[09:59:14.0000] <Domenic>
Specs are back, for anyone who was waiting

[09:59:53.0000] <gsnedders>
mathiasbynens: https://github.com/w3c/csswg-drafts/issues/492

[11:09:21.0000] <annevk>
Domenic: https://github.com/w3c/wptserve/issues/80

[11:49:30.0000] <Domenic>
zcorpan: do the optimized images look different on your screen? Now that we've deleted the SVG-to-PNG conversion ones, all that remain look the same to me.

[11:49:57.0000] <zcorpan>
Domenic: they look the same to me in the current state of the PR

[11:50:10.0000] <Domenic>
zcorpan: so we should probably merge then?

[11:50:21.0000] <zcorpan>
Domenic: they looked different in the first iteration, before XhmikosR force-pushed new commits to make them look the same

[11:50:36.0000] <zcorpan>
Domenic: well the point is that the current images appear to be bogus

[11:50:51.0000] <zcorpan>
Domenic: but i don't care strongly either way

[11:51:12.0000] <Domenic>
Oh I see hmm

[11:51:18.0000] <Domenic>
Well I guess that's a separate issue

[12:01:37.0000] <TabAtkins>
mathiasbynens: When you feed that string to a spec-conforming CSS parser, all open constructs get closed by EOF.

[13:48:33.0000] <wanderview>
JakeA: annevk: should we put FetchController as an attribute on the Response in addition to returning it from fetch()?  So that existing code that does an immediate .then() can still get access to it easily after the headers arrive

[14:01:19.0000] <smaug>
jsbell: I'm trying to understand the upgrade transaction

[14:01:32.0000] <smaug>
when is the commit supposed to happen?

[14:01:58.0000] <smaug>
(in general "commit" seems to be quite vaguely defined in the spec)

[14:02:34.0000] <smaug>
is it basically in step 10 in http://w3c.github.io/IndexedDB/#steps-for-running-an-upgrade-transaction

[14:20:09.0000] <jsbell>
smaug: tuning in, give me a second...

[14:20:47.0000] <jsbell>
smaug: implicitly in step 8 - waiting for transaction to finish

[14:21:16.0000] <smaug>
right, so ok, in before step 10

[14:21:25.0000] <jsbell>
yeah.

[14:21:37.0000] <smaug>
jsbell: btw, I just updated https://github.com/w3c/IndexedDB/issues/87#issuecomment-270766086

[14:21:41.0000] <jsbell>
Ah, "immediately" ...

[14:21:53.0000] <smaug>
I don't know how blink behaves with upgrade

[14:22:06.0000] <smaug>
does it still somehow use after-microtask model there?

[14:22:14.0000] <smaug>
(if so, where)

[14:22:28.0000] <jsbell>
upgrades do not use the after-microtask. that's only needed for db.transaction() calls

[14:22:46.0000] <jsbell>
db.transaction()-minted transactions are created active, upgrade transactions are created inactive

[14:23:59.0000] <smaug>
jsbell: ok, good. Gecko has still somehow this after-promise model with upgrade, but I had to remove it to make tests pass when making promises to use microtasks

[14:24:30.0000] <smaug>
so, after-microtask with db.transactions(), but more explicit handling with upgrades

[14:25:20.0000] <jsbell>
and yeah, that step 10 should be rewritten - it's like a monkey patch within the spec. :P Ah well, still better than v1.

[14:28:50.0000] <jsbell>
that step 10 should really be a modification to http://w3c.github.io/IndexedDB/#commit-transaction step 3 and http://w3c.github.io/IndexedDB/#abort-transaction step 5, something like: "#. Queue a task to run the following substeps. 1. If /transaction/ was an upgrade transaction, let /request/ be the request associated with /transaction/ and set /request/'s transaction to null. 2. Dispatch an event at /transaction/...."

[14:30:01.0000] <jsbell>
smaug: I'm curious about what's special about the upgrade transactions vs. microtasks.

[14:31:24.0000] <smaug>
jsbell: well, in which microtask the upgrade transaction would be committed or so

[14:32:41.0000] <smaug>
upgrade transaction somehow implicitly happens asynchronously

[14:32:50.0000] <smaug>
during possibly multiple tasks

[14:33:20.0000] <jsbell>
smaug: Fun. Ah. Shouldn't be different than any other transaction. After dispatching a request's success/error event (which implies running pending microtasks), when setting the transaction to inactive, if the transaction has no more requests then try and commit.

[14:34:32.0000] <jsbell>
That's buried in the prose in http://w3c.github.io/IndexedDB/#transaction-lifetime-concept step 7 (a maze of twisty implications that all look alike.)

[14:35:21.0000] <jsbell>
The exact timing shouldn't matter, since it can't happen while the transaction is active, and once the transaction goes inactive in that state it can implicitly never be active again.

[14:36:20.0000] <jsbell>
... and any result of the commit attempt is a "queue a task..."

[14:44:21.0000] <jsbell>
Uh, swap 1/2 in the substeps I gave above.

[15:03:07.0000] <Mek>
hmm, there is explicitly no synchronization of any kind in (Local)Storage, right? So code like `for (let i = 0; i < localStorage.length; ++i) console.log(localStorage.key(i));` could easily have the storage be modified somewhere in the middle of iterating?

[15:05:37.0000] <TabAtkins>
Correct. The spec originally had basically a global lock, but nobody implemented it, and it was eventually dropped.  localStorage is just as racy as the cookie store.

[15:08:50.0000] <gsnedders>
AFAIK there's a "SHOULD"-level requirement to have a lock, with the expectation that nobody ever will. But, well…

[15:12:04.0000] <Mek>
I'm not sure how a lock would even help with multiple consecutive operations? But yeah, makes sense that it doesn't have any such requirements (although it could have some kind of requirements to expect some consistency between the exposed state and the storage events that have or haven't been fired yet... but I'm glad there isn't such a requirement)

[15:12:38.0000] <TabAtkins>
Mek: I think you get a lock until you return to the event loop (thus maintaining JS's run-to-completion semantics for the data)?

[15:12:50.0000] <TabAtkins>
That is to say, I think I remember that being how the lock worked.

[15:13:48.0000] <Mek>
ah yeah, I suppose that might work (for some deifnition of work)

[15:16:54.0000] <gsnedders>
IIRC Firefox has(? had?) a lock?

[15:17:14.0000] <gsnedders>
but with most JS running in a single thread anyway that's far less of an issue

[15:55:33.0000] <gsnedders>
Do meta redirects in the <body> have an affect?


2017-01-06
[18:24:00.0000] <MikeSmith>
so ShadowRoot.innerHTML is gone?

[18:24:26.0000] <MikeSmith>
I see it is still at https://w3c.github.io/webcomponents/spec/shadow/#the-shadowroot-interface but not at https://dom.spec.whatwg.org/#interface-shadowroot

[18:24:55.0000] <MikeSmith>
hayato: ⬆

[18:27:05.0000] <hayato>
MikeSmith: Section 7 will be replaced with that of DOM Standard. I will work on it.

[18:30:06.0000] <hayato>
I do not remember, but I guess innerHTML is defined in DocumentFragment?

[18:38:57.0000] <MikeSmith>
hayato: ah OK

[18:39:13.0000] <MikeSmith>
I am working on a bit on the related docs at MDN

[18:39:34.0000] <MikeSmith>
and the MDN docs have https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/innerHTML

[18:39:44.0000] <MikeSmith>
so maybe I need to move that

[18:42:32.0000] <Domenic>
It's not on DocumentFragment unfortunately. I wish it were. People have asked for that for a long time.

[18:43:08.0000] <Domenic>
Maybe rniwa and hayato can agree on adding it there and ship it? :)

[18:43:37.0000] <rniwa>
Domenic, MikeSmith: it's on ShadowRoot

[18:44:33.0000] <rniwa>
Domenic, MikeSmith: we shipped it that way, so shadowRoot.innerHTML isn't going away. Or are you talking about adding one on DocumentFragment?

[18:45:01.0000] <rniwa>
for DocumentFragment, there was a discussion about parsing it like template element

[18:45:21.0000] <rniwa>
we don't need to, really

[18:45:53.0000] <MikeSmith>
rniwa: OK thanks for the clarification

[18:46:03.0000] <MikeSmith>
thanks Domenic too

[18:46:12.0000] <hayato>
Ah, I have found that Blink defines innerHTML in ShadowRoot interface. :)

[18:46:21.0000] <MikeSmith>
OK

[18:46:32.0000] <MikeSmith>
so then it seems like the DOM spec needs to be updated to add it

[18:46:47.0000] <MikeSmith>
since it’s not at https://dom.spec.whatwg.org/#interface-shadowroot

[18:47:10.0000] <MikeSmith>
Domenic: should I create a PR?

[18:47:23.0000] <MikeSmith>
or raise an issue at least

[18:48:43.0000] <Domenic>
Yeah but you could move it to DocumentFragment and I and a couple other web devs would become happy :)

[18:48:58.0000] <MikeSmith>
heh

[18:49:02.0000] <Domenic>
Sorry spotty connection

[18:49:08.0000] <hayato>
I recalled the discussion about  innerHTML. innerHTML requires a *host* element in parsing, so we can not define it DocumentFragment, as far as I remember.

[18:49:26.0000] <MikeSmith>
ah right

[18:49:42.0000] <Domenic>
Hmm I see. I guess you could use some implicit template element but yeah not as obvious as I hoped

[18:49:43.0000] <MikeSmith>
there is a note at https://w3c.github.io/webcomponents/spec/shadow/#the-shadowroot-interface saying pretty much exactly that

[18:50:00.0000] <Domenic>
And yeah MikeSmith we should raise an issue for porting

[18:50:21.0000] <MikeSmith>
OK

[18:51:54.0000] <MikeSmith>
glad I instead did not end up having to write code patches for WebKit and Blink!

[18:53:13.0000] <MikeSmith>
meme: bad luck brian tries to be a good guy and get MDN shadow-dom docs synced up with specs / spends the next 6 weeks writing browser patches and tests and getting them all reviewed

[18:59:03.0000] <rniwa>
Domenic, hayato, MikeSmith: moving it to DocumentFragment is fine but someone needs to come up with what it does

[19:00:27.0000] <MikeSmith>
yeah I am not signing up to do that

[19:00:32.0000] <MikeSmith>
not right now at least

[19:03:30.0000] <MikeSmith>
https://github.com/whatwg/dom/issues/393

[19:06:54.0000] <Domenic>
Maybe I will open an issue :)

[23:38:39.0000] <annevk>
wanderview: that seems a little ugly

[23:39:07.0000] <annevk>
wanderview: Request and Response are ideally just data

[23:54:39.0000] <annevk>
Ooh Mek is back

[23:54:56.0000] <annevk>
Mek: please let me know when we can get back to defining the origin of blob URLs

[02:27:22.0000] <annevk>
Context switching between URL parsing and Fetch is not going as well as I'd hoped

[05:55:10.0000] <annevk>
JakeA: I hope Service Workers doesn't have much copy-and-paste algorithms

[05:55:13.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/issues/450 is rather bad

[05:55:45.0000] <annevk>
(the layering there seems bad too, but I'm mostly surprised that when introducing new largely identical code it wasn't abstracted)

[05:56:48.0000] <JakeA>
annevk: hmm yeah. I want us to do a full review of foreign fetch in March. I don't think the API has been properly reviewed either

[05:57:28.0000] <annevk>
If Mek didn't change much from what we agreed on at some point I guess it's probably okayish, but yeah, probably deserves another round

[06:07:57.0000] <wanderview>
JakeA: annevk: fwiw, I think my opinion on foreign fetch has evolved a bit... but I wrote spec issues regarding that I think

[06:14:03.0000] <annevk>
wanderview: didn't I reply to those?

[06:15:16.0000] <wanderview>
annevk: not this one: https://github.com/w3c/ServiceWorker/issues/1024

[06:16:18.0000] <annevk>
wanderview: I see

[06:16:34.0000] <annevk>
wanderview: I guess the big issue with foreign fetch is what we should do with third-party cookies in general

[06:16:46.0000] <wanderview>
annevk: at least in firefox, my position is we would implement foreign fetch event only for credentialed requests at least to start

[06:16:52.0000] <annevk>
wanderview: the reason web fonts are fetched without credentials is mostly because that gives you the simplest variant of CORS

[06:17:06.0000] <annevk>
wanderview: it didn't have much to do with third-party cookies, although I guess that's a nice side effect

[06:17:31.0000] <wanderview>
whatever the reasoning, I don't think we should enabled tracking where its not possible today

[06:17:52.0000] <wanderview>
especially since I think we can achieve the use case with a slightly different solution

[06:17:59.0000] <wanderview>
a different solution we want for other things as well

[06:17:59.0000] <annevk>
I think if we did foreign fetch the way Safari did third-party cookies it'd be okay

[06:18:13.0000] <wanderview>
double-keying?

[06:18:22.0000] <annevk>
Yeah, except for first-party visits

[06:18:57.0000] <wanderview>
you might as well just not intercept them... because the storage won't be shared you won't really get much benefit

[06:19:25.0000] <annevk>
It would be for sites visited first-party

[06:19:40.0000] <annevk>
So you could do the drive.google.com use cases and such

[06:20:09.0000] <annevk>
But yeah, part of the overall question is how much third-party tracking should be allowed anyway

[06:22:20.0000] <wanderview>
well, I like disabling foreign fetch event for non-credentialed requests as it automatically does the right thing if the user disables 3rd-party cookies, etc

[06:22:45.0000] <wanderview>
in either case, we probably won't start working on foreign fetch in firefox until Q3/Q4 2017 at the earliest

[06:22:59.0000] <wanderview>
we are still working on getting our multi-process house in order

[06:25:32.0000] <Domenic>
How's that going, by the way?

[06:26:39.0000] <wanderview>
Domenic: slowly

[06:27:37.0000] <wanderview>
Domenic: its a high priority, though, and we have more people working on SW again

[06:28:30.0000] <wanderview>
Domenic: and I think we have people committed to work streams, although no progress yes AFAIK

[06:29:00.0000] <wanderview>
unfortunately its at a difficult intersection of js engine bits and DOM binding bits... few people who know both really well

[06:31:17.0000] <Domenic>
Yeah till has been asking some questions, seems like he's pretty far along

[06:31:46.0000] <wanderview>
awesome!

[06:32:08.0000] <wanderview>
we have some scheduled to start working on the c++ binding part in next couple weeks as well

[06:33:21.0000] <wanderview>
^some^someone

[06:33:34.0000] <Domenic>
\o/

[06:51:22.0000] <annevk>
wanderview: I think the problem with not figuring out our final goals for third-party cookies and moving ahead with foreign fetch regardless will make it harder to switch to something better later

[06:52:21.0000] <annevk>
Domenic: what does "this" mean in https://github.com/whatwg/url/issues/53#issuecomment-270915763?

[06:52:27.0000] <annevk>
Domenic: the issue in general?

[06:52:53.0000] <Domenic>
annevk: oh, sorry, I meant https://github.com/whatwg/url/issues/53#issuecomment-181528158 in particular; let me edit

[06:55:08.0000] <wanderview>
annevk: you think all browsers will change to implement the same 3rd party cookie policies?

[06:55:24.0000] <annevk>
wanderview: I hope we can get closer over time, yes

[06:55:39.0000] <annevk>
wanderview: seems hard for web developers otherwise to make things work

[06:55:55.0000] <annevk>
wanderview: in particular Safari would never ship the kind of foreign fetch you would be willing to ship

[06:56:46.0000] <wanderview>
annevk: I don't see what they are doing as much different from firefox with "block 3rd party cookies" enabled by default

[06:57:20.0000] <annevk>
wanderview: it is different, because first parties won't become third parties

[06:57:37.0000] <annevk>
wanderview: and also, it's different by virtue of being the default, since most folks don't change settings

[06:59:01.0000] <wanderview>
annevk: first parties effectively become different origins when loaded as a 3rd party... creating a new fake origin for the cookie instead of just not allowing cookies both have the same effect of not using the real origin

[07:00:13.0000] <wanderview>
anyway... I'm just saying what I am comfortable implementing in FF given our current product features around cookies

[07:47:30.0000] <annevk>
igrigorik: could you comment on https://github.com/whatwg/url/issues/26

[07:47:54.0000] <annevk>
wanderview: yeah, that's not how Safari works

[07:48:19.0000] <annevk>
wanderview: and I'm just saying that we should implement something that can work across all browsers

[07:56:26.0000] <wanderview>
annevk: I'm just trying to highlight a problem with the current proposal that I don't think we can implement in firefox... if apple wants to ask for further changes they can do that as well

[07:57:27.0000] <annevk>
You don't think a priori that we should make something that can work for Safari?

[08:01:20.0000] <wanderview>
annevk: I didn't say that... I'm just providing feedback from FF impl point of view... we haven't implemented anything yet so I don't know why you are picking a fight with me here

[08:04:38.0000] <annevk>
wanderview: I feel like you're dismissing my concern that there's a bigger issue

[08:04:47.0000] <annevk>
wanderview: and I don't really understand why

[08:05:39.0000] <wanderview>
sorry, I didn't intend to dismiss your concerns

[08:06:14.0000] <wanderview>
but I'm less interested in guessing what other browser vendors want than having them tell us what they want... since we're not implementing this any time soon I'm happy to wait for apple to tell us what they thing

[08:06:15.0000] <wanderview>
think

[08:06:32.0000] <annevk>
We did talk with Apple at TPAC about this, I guess you weren't there

[08:06:59.0000] <wanderview>
I haven't seen any foreign fetch changes since then... maybe I missed it

[08:07:18.0000] <annevk>
I don't think there were any changes

[08:07:32.0000] <annevk>
But either way the issue stands I think

[08:08:35.0000] <annevk>
Domenic: looking at the document it seems the validation rule is mentioned as issue A

[08:14:04.0000] <Domenic>
annevk: dang, I scrolled right past everything but the annevk/Simon section, nevermind

[08:23:04.0000] <annevk>
Domenic: so for https://github.com/whatwg/fetch/pull/449 I was indeed wondering about throwing getters, but if only Streams makes those objects, it seems like they would never be able to throw?

[08:23:21.0000] <annevk>
Domenic: it wasn't clear to me if those objects could ever be user-supplied

[08:23:26.0000] <Domenic>
annevk: oh hmm good point, this whole thing I just wrote up might be pointless...

[08:23:36.0000] <Domenic>
I think you're right

[08:23:49.0000] <Domenic>
There's no way they can be getters

[08:24:01.0000] <annevk>
Good, then the text in service workers isn't wrong either

[08:24:36.0000] <annevk>
Domenic: shall I go ahead and merge then?

[08:24:46.0000] <Domenic>
Let me push my style tweak

[08:25:26.0000] <Domenic>
annevk: pushed

[08:27:08.0000] <annevk>
ta

[08:30:28.0000] <annevk>
Domenic: I might look into IDNA tests next week

[08:30:44.0000] <annevk>
Domenic: I emailed some folks to see if some kind of framework was available, but no replies thus far

[08:31:08.0000] <annevk>
Domenic: for the host parser test, would you be okay with a dedicated hosts.json resource solely for host tests?

[08:31:41.0000] <annevk>
Domenic: we could also use that for host/hostname setters where there's no difference, rather than duplicating all those tests as I'm currently doing

[08:32:10.0000] <annevk>
Domenic: btw, that's also going to be next week, but it'd be nice to know by Monday

[08:42:13.0000] <annevk>
I created https://github.com/whatwg/meta

[08:42:41.0000] <annevk>
If something is bugging you about the WHATWG community, we now have a much better place to discuss it than the mailing list

[08:43:04.0000] <annevk>
(IRC is still an option of course, but only when everyone is around at the same time)

[09:27:37.0000] <Domenic>
annevk: yeah dedicated JSON file works great

[09:28:24.0000] <Domenic>
It's a little worrying that you're writing tests without being sure how domain to ASCII works? At least that's how I interpreted your reply.

[09:30:29.0000] <annevk>
Domenic: it didn't even occur to me ToASCII would apply and as I found out it didn't

[09:30:50.0000] <Domenic>
Hmm ok

[09:31:10.0000] <annevk>
Domenic: if a browser would have showed signs of ToASCII I would have investigated more of course

[09:31:10.0000] <Domenic>
I guess the bug is in tr46.js then

[09:31:37.0000] <annevk>
Domenic: it seems like you're using punycode.js from mathiasbynens which has known bugs

[09:32:08.0000] <annevk>
Domenic: but I didn't look closely

[09:32:20.0000] <Domenic>
I guess so, I didn't see any signs it was involved in that code path. Will dig in more later.

[09:33:04.0000] <annevk>
Domenic: FWIW, as I said I plan to write more IDNA tests, but those are less of a priority than the basic ASCII boundaries

[09:35:13.0000] <mathiasbynens>
annevk, Domenic: I’m missing some context — link?

[09:37:00.0000] <Domenic>
mathiasbynens: https://github.com/w3c/web-platform-tests/pull/4504#issuecomment-270771165

[09:37:32.0000] <Domenic>
jsdom/whatwg-url is failing some new URL host tests. The problem appears to be in tr46.js https://github.com/Sebmaster/tr46.js which has a punycode.js dependency, not sure if the problem is in tr46.js or punycode.js yet thought

[09:44:48.0000] <mathiasbynens>
seems like punycode shouldn’t be hit per annevk’s analysis, so the problem is in tr46.js

[09:45:48.0000] <mathiasbynens>
ref. https://github.com/mathiasbynens/todo/issues/9

[09:47:09.0000] <Domenic>
https://github.com/Sebmaster/tr46.js/issues/5

[09:48:58.0000] <Domenic>
mathiasbynens: so the punycode spec seems pretty impenetrable, so I can't tell what the intended semantics of punycode.toASCII are. Given ASCII input, is it meant to be a no-op? Or will it always add the xn-- stuff?

[09:48:59.0000] <mathiasbynens>
> It at least seems people are assuming that punycode.toASCII is a no-op on ASCII input.

[09:49:08.0000] <mathiasbynens>
that might be my fault! I’ll fix the docs

[09:50:14.0000] <mathiasbynens>
https://github.com/bestiejs/punycode.js#punycodetoasciiinput says “Only the non-ASCII parts of the input will be converted, i.e. it doesn’t matter if you call it with a domain that’s already in ASCII.” That should be s/ASCII/printable ASCII/ to match the existing behavior.

[09:51:30.0000] <Domenic>
Is the "printable ASCII" behavior specified anywhere?

[09:52:05.0000] <Domenic>
I.e. is punycode.js deciding on that behavior based on a spec, or just arbitrarily? If the latter, a spec based version would be quite nice.

[09:52:19.0000] <mathiasbynens>
Domenic: https://tools.ietf.org/html/rfc3490#section-4.1

[09:52:35.0000] <mathiasbynens>
“ToASCII never alters a sequence of code points that are all in the ASCII range to begin with (although it could fail). Applying the ToASCII operation multiple times has exactly the same effect as applying it just once.”

[09:53:02.0000] <mathiasbynens>
hmm, so I guess my docs are correct, and the implementation should be updated

[09:53:47.0000] <mathiasbynens>
if matching ToASCII is the goal, at least (`punycode.toASCII` is an abstraction)

[09:56:24.0000] <Domenic>
Yeah that would be quite nice

[09:57:31.0000] <Domenic>
Well OK but punycode is step 7

[09:57:55.0000] <Domenic>
So maybe tr46 should be handling this

[09:59:00.0000] <Domenic>
And we should be using punycode.encode

[10:00:48.0000] <mathiasbynens>
step 6

[10:01:17.0000] <mathiasbynens>
but yeah, that makes sense for tr46.js to do

[10:44:17.0000] <annevk>
mathiasbynens: is it your goal to implement ToASCII?

[10:45:16.0000] <Domenic>
It seems like the goal is to implement a few steps of https://tools.ietf.org/html/rfc3490#section-4.1 (but not nameprep I guess). Whereas tr46.js implements http://www.unicode.org/reports/tr46/#ToASCII

[10:46:53.0000] <mathiasbynens>
annevk: somewhat; RFC3490’s `ToASCII` acts on a sequence of code points + the AllowUnassigned flag + the UseSTD3ASCIIRules flag. `punycode.toASCII` just takes a string as input

[10:49:39.0000] <annevk>
mathiasbynens: oh, if you don't implement UTS46 I'm not sure you should advertize that API

[10:49:55.0000] <annevk>
mathiasbynens: the only browser-compatible API (or that comes close to it) is UTS46 ToASCII

[10:53:44.0000] <annevk>
Domenic: no browser fails on http://-/

[10:54:46.0000] <annevk>
Domenic: aah, http://www.unicode.org/reports/tr46/#Validity_Criteria does say something here

[10:54:58.0000] <annevk>
Domenic: "The label must neither begin nor end with a U+002D HYPHEN-MINUS character." it seems browsers don't enforce that

[10:55:17.0000] <annevk>
Domenic: I guess we could try to make them

[10:55:19.0000] <Domenic>
Wait isn't that the problematic thing

[10:55:46.0000] <Domenic>
No not quite

[10:56:02.0000] <annevk>
Domenic: ?

[10:56:03.0000] <Domenic>
validity rule 3 is the known problem

[10:56:09.0000] <Domenic>
errr

[10:56:13.0000] <Domenic>
validity rule 2 is the known problem

[10:56:18.0000] <Domenic>
validity rule 3 is closely related though

[10:56:32.0000] <annevk>
Yeah

[10:56:41.0000] <annevk>
I guess I can add a comment to Mark's document

[10:56:41.0000] <Domenic>
I'll comment on the doc?

[10:56:45.0000] <annevk>
Please do

[10:56:51.0000] <annevk>
Then I'm going to take a break!

[10:57:11.0000] <annevk>
We'll be back Monday for more URL parsing fun

[10:58:20.0000] <Domenic>
\o/


2017-01-07
[05:00:12.0000] <nox>
If I change the contents of a <textarea> Text child, should the textarea reset algorithm be ran?


2017-01-09
[00:40:46.0000] <annevk>
JakeA: in case you forgot about https://github.com/whatwg/fetch/pull/435 here's a friendly reminder (I'm in no hurry though, just noticed it's likely after your break)

[01:35:39.0000] <JakeA>
annevk: cheers. Hadn't forgotten, but yeah, will start this today. Last time I looked Chrome was crashing on the fetch tests, so might end up down a rabbit hole

[01:36:44.0000] <annevk>
Well, as I said, I don't think we're in a particular rush with that refactoring, so up to you

[01:57:45.0000] <annevk>
jgraham: is there any H/2 talk with regards to WPT?

[01:58:00.0000] <annevk>
jgraham: and also, is there a way to enforce H/1 for certain tests?

[02:19:11.0000] <jgraham>
annevk: No and therefore no. I mean everything enforce http/1.1 at the moment; if you aren't running through wptserve it's an unsupported configuration

[02:19:59.0000] <annevk>
jgraham: wptserve is used for WebSocket too?

[02:20:04.0000] <jgraham>
Oh, no

[02:20:08.0000] <annevk>
jgraham: or to ask differently, tracking issues should be filed there?

[02:20:09.0000] <jgraham>
pywebsocket is used then

[02:20:15.0000] <annevk>
I see

[02:20:40.0000] <annevk>
I guess when I end up writing those tests I can say they assume H/1

[02:20:46.0000] <jgraham>
If http/2 is required I guess I should add that to my list of "reasons to spend more time on web-platform-tests this year"

[02:21:09.0000] <jgraham>
That is, if there are things that can't be tested or might work differently with http/2

[02:21:14.0000] <annevk>
jgraham: it would be good for Fetch at least to test H/2 framing and such

[02:21:43.0000] <jgraham>
OK. There is a bug somewhere, right?

[02:22:04.0000] <jgraham>
Can you add a comment if there isn't one already

[02:22:09.0000] <annevk>
jgraham: I don't know, I just got curious

[02:22:25.0000] <annevk>
jgraham: there is a bug about sending responses earlier

[02:22:34.0000] <annevk>
jgraham: should I file a bug against wptserve?

[02:23:07.0000] <jgraham>
annevk: Sure

[02:24:24.0000] <Ms2ger>
annevk, hey, you know a few things about incumbent globals, right?

[02:25:52.0000] <annevk>
Ms2ger: don't use m?

[02:26:21.0000] <annevk>
Ms2ger: the main thing I know about incumbent globals is that they're not a shared concept across all browsers

[02:26:28.0000] <annevk>
Ms2ger: main important thing, that is

[02:28:07.0000] <annevk>
jgraham: filed https://github.com/w3c/wptserve/issues/110

[02:29:14.0000] <annevk>
jgraham: https://github.com/w3c/wptserve/issues/80 is the other issue, with early responses

[02:29:59.0000] <annevk>
jgraham: that would be more interesting to have I think since it enables completely new scenarios and bugs

[02:30:18.0000] <Ms2ger>
It seems like https://html.spec.whatwg.org/multipage/webappapis.html#the-event-handler-processing-algorithm uses `callback` as a WebIDL callback function (which has an incumbent global stored as the "callback context"), but it's created as a JS function, which doesn't have that

[02:30:41.0000] <annevk>
jgraham: basically being able to send a response from the server the moment the server has all the request headers, not necessarily the request body

[02:32:39.0000] <annevk>
Ms2ger: because of step 1?

[02:32:53.0000] <Ms2ger>
Yeah, https://html.spec.whatwg.org/multipage/webappapis.html#getting-the-current-value-of-the-event-handler just does FunctionCreate

[02:33:53.0000] <annevk>
Ms2ger: new issue 😟

[02:34:16.0000] <annevk>
Ms2ger: that should indeed some some kind of IDLFunctionCreate

[02:34:16.0000] <Ms2ger>
On its way

[02:34:38.0000] <Ms2ger>
The annoying thing is that it's called without JS on the stack

[03:53:45.0000] <JakeA>
annevk: I'm getting "updating and loading test manifest; this may take several minutes" on web-platform-tests. It doesn't seem to ever finish

[03:54:00.0000] <JakeA>
I'm also getting a ManifestVersionMismatch error in the console

[03:54:10.0000] <JakeA>
(server console that is)

[03:56:29.0000] <annevk>
JakeA: what are you trying to do?

[03:56:40.0000] <JakeA>
annevk: run the fetch tests

[03:57:01.0000] <JakeA>
annevk: I visit http://web-platform.test:8000/tools/runner/index.html and get that error

[03:57:19.0000] <annevk>
JakeA: I see, you can also go to e.g. http://web-platform.test:8000/fetch/api/headers/headers-errors.html directly

[03:57:24.0000] <annevk>
JakeA: that's what I usually do

[03:57:34.0000] <jgraham>
JakeA: Delete your MANIFEST.json

[03:57:38.0000] <annevk>
JakeA: jgraham might be able to help with questions regarding the runner

[03:57:41.0000] <annevk>
There you go

[03:57:57.0000] <jgraham>
We changed the manifest format and it probably isn't intelligent enough to just regenerate it in the new format

[03:58:06.0000] <annevk>
/me hasn't used the runner

[03:58:25.0000] <jgraham>
Yeah, the runner isn't great

[03:59:30.0000] <JakeA>
jgraham: where's MANIFEST.json?

[03:59:44.0000] <JakeA>
oh top dir

[03:59:48.0000] <JakeA>
sorry

[04:00:37.0000] <JakeA>
jgraham: thanks, that's working now

[04:03:01.0000] <jgraham>
Apologies for the inconvenience

[04:05:10.0000] <MikeSmith>
ah yeah

[04:05:20.0000] <MikeSmith>
Cindy ran into the same problem and pinged me about it

[04:05:25.0000] <MikeSmith>
told her the same thing

[04:05:43.0000] <MikeSmith>
rm MANIFEST.json && ./manifest

[04:06:12.0000] <jgraham>
We can probably make it happen by magic, although if the rebuild takes too long the request might time out

[04:06:22.0000] <MikeSmith>
yeah

[04:41:40.0000] <JakeA>
jgraham: is there a process for running the tests over https?

[05:00:08.0000] <JakeA>
jgraham: figured it out. Filed https://github.com/w3c/web-platform-tests/issues/4514 as a reminder to document it

[05:11:03.0000] <annevk>
Why does wpt-stability-bot report results in seemingly random order?

[05:11:30.0000] <gsnedders>
annevk: Python hash order, maybe?

[05:11:50.0000] <gsnedders>
annevk: feel free to file a bug, tho

[05:12:01.0000] <annevk>
gsnedders: can you point me to the code perhaps?

[05:12:08.0000] <annevk>
gsnedders: maybe I can propose a change

[05:12:32.0000] <gsnedders>
 /check_stability.py, IIRC

[05:12:35.0000] <annevk>
https://github.com/wpt-stability-bot should probably mention where you can patch it

[05:13:09.0000] <gsnedders>
I mean it could also be somewhere in wptrunner

[05:13:27.0000] <gsnedders>
annevk: idk how has access to that, maybe only jgraham

[05:14:36.0000] <gsnedders>
class LogHandler is where it all goes wrong

[05:14:46.0000] <gsnedders>
though replacing those with ordered dicts is harder than I'd like

[05:15:03.0000] <annevk>
Yeah, was just looking at that

[05:15:10.0000] <annevk>
I'm going to file an issue for now and get back to IDNA

[05:36:42.0000] <jochen__>
any suggestions what name to use to refer to an "inline style declaration"

[05:36:47.0000] <jochen__>
as opposed to a stylesheet

[05:37:07.0000] <jochen__>
i want to say something "if an url() is part of an inline style, then do this"

[05:46:50.0000] <annevk>
jochen__: it sounds like that requires a hook in the CSS parser or some such

[05:47:00.0000] <annevk>
jochen__: so probably best to ask the CSS WG for such a hook

[05:47:18.0000] <annevk>
jochen__: unless you're happy with your text not being the long term solution, in which case you can do whatever

[05:47:33.0000] <annevk>
(within reason)

[06:37:14.0000] <jgraham>
MikeSmith, JakeA: I think the manifest version mismatch problem is fixed now

[06:41:31.0000] <MikeSmith>
jgraham: super, thanks

[06:41:39.0000] <MikeSmith>
will let Cindy know too

[06:41:48.0000] <MikeSmith>
annevk: spaces around em dash?

[06:43:10.0000] <annevk>
MikeSmith: seems to be the norm

[06:43:34.0000] <MikeSmith>
really

[06:43:48.0000] <annevk>
I personally think it reads better too, but I know it's sometimes frowned upon too

[06:44:20.0000] <MikeSmith>
it’s not the norm in any style guide I have ever seen, nor in pretty much any print newspaper or magazine or book

[06:45:14.0000] <MikeSmith>
but that said I can live it as long as we do it consistently

[06:46:09.0000] <MikeSmith>
anything is better than continuing to instead do -- forever

[06:47:23.0000] <gsnedders>
two hyphens is normally en-dash

[06:47:47.0000] <gsnedders>
but yeah, I agree with annevk that it reads better IMO, but AFAIK pretty much every style guide ever says no spaces

[06:48:46.0000] <jgraham>
I really will never understand—and believe me I have tried—why style guides think no space is a good idea

[06:49:10.0000] <annevk>
I don't think any WHATWG Standard avoids spaces

[06:50:55.0000] <MikeSmith>
y’all sound like you probably think two spaces after a period reads better too

[06:51:17.0000] <jgraham>
I hope not

[06:51:54.0000] <annevk>
Nooo, those are bad

[06:52:16.0000] <annevk>
And trimmed by CSS unless you use &nbsp; so rather pointless anyway

[06:53:35.0000] <annevk>
If you have a string with that reads "\u1234†" how do you convert the \u1234 to a code point in the easiest way with Python?

[06:53:53.0000] <annevk>
Do I need my own tokenizer of sorts or is there a simple utility?

[06:58:22.0000] <MikeSmith>
now that is something that jgraham and gsnedders definitely know more about than I do

[06:59:04.0000] <jgraham>
You have a literal python escape in a string?

[06:59:35.0000] <jgraham>
In [2]: "\\u1234".decode("unicode-escape")

[06:59:36.0000] <jgraham>
Out[2]: u'\u1234

[07:04:26.0000] <annevk>
jgraham: cool

[07:18:53.0000] <wanderview>
/me considers staying an extra day or two after SW meeting in tokyo...

[07:21:18.0000] <JakeA>
jgraham: cheers!

[07:24:20.0000] <wanderview>
oooh... JakeA is writing WPT tests?

[07:35:57.0000] <annevk>
jgraham: I guess they're not literal Python escapes after all, since they can be up to six digits

[07:43:42.0000] <jgraham>
annevk: Ah, python ones are like "\\U00101234".decode("unicode-escape") for non-BMP

[07:44:08.0000] <jgraham>
Seems like they got scared that someone would sneak in some more codepoints

[08:08:31.0000] <MikeSmith>
gsnedders: the tree at https://validator.w3.org/nu/parsetree/?parser=html5&content=%3C%21DOCTYPE+html%3E%3Cnoscript%3E%3Cimg+src%3Dfoo%3E%3C%2Fnoscript%3E&submit=Print+Tree is not correct, right?

[08:16:42.0000] <MikeSmith>
that is, it parses <!DOCTYPE html><noscript><img src=foo></noscript> into <html><head><noscript></noscript></head><body><img src=foo>...

[08:16:55.0000] <MikeSmith>
but browsers do not seem to do that that

[08:18:39.0000] <MikeSmith>
zcorpan: ⬆

[08:19:11.0000] <zcorpan>
MikeSmith: scripting disabled?

[08:19:30.0000] <MikeSmith>
ah

[08:19:39.0000] <MikeSmith>
yeah I guess that’s the difference

[08:20:00.0000] <MikeSmith>
vnu parser runs in the HTML checker with scripting disabled

[09:07:55.0000] <annevk>
jgraham: turned out they were of the \uXXXX type after all, but that doesn't really work with Python if the string contains those and non-ASCII code points

[09:08:49.0000] <jgraham>
What doesn't work?

[09:10:48.0000] <annevk>
jgraham: it turned a legitimate \u00df into \u00XX\u00XX where those XX were the utf-8 byte sequence for U+00DF

[09:11:35.0000] <annevk>
jgraham: I then tried to run decode("utf-8") first and then run decode("escape-string"), but yielded similar bad results

[09:11:50.0000] <annevk>
A custom method did the trick however...

[09:12:06.0000] <annevk>
I'm guessing I should really be using Python 3.0 to avoid this, but then that doesn't come by default on the OS

[09:12:22.0000] <jgraham>
In [8]: "\\u00df".decode("unicode-escape")

[09:12:23.0000] <jgraham>
Out[8]: u'\xdf'

[09:12:56.0000] <jgraham>
In [9]: "\xdf".decode("unicode-escape")

[09:12:56.0000] <jgraham>
Out[9]: u'\xdf'

[09:14:33.0000] <annevk>
jgraham: but the input is something like "\\u1234 \u00DF" (so escapes and actual code points)

[09:14:51.0000] <annevk>
Anyway, I wrote a custom thing

[09:15:17.0000] <annevk>
jgraham: if you want to review or improve upon my way, it's in https://github.com/w3c/web-platform-tests/pull/4504 as IdnaTest.py

[09:17:03.0000] <jgraham>
annevk: Oh I see. If you already have a unicode string, running .decode() on it will probably cause badness (attempting to encode to ascii first or something)

[09:24:45.0000] <Domenic>
Wait when in the Tokyo service workers meeting?

[09:26:02.0000] <annevk>
Domenic: it's 3-4 April, JakeA can give you the details

[09:26:09.0000] <Domenic>
Hmm OK

[09:26:24.0000] <Domenic>
foolip is out there all of March and I am scheduling my trip to probably overlap with his

[09:26:40.0000] <Domenic>
Maybe I should go for end of March / beginning of April for maximum overlap

[09:27:04.0000] <annevk>
We're likely moving house, so no trips

[10:47:05.0000] <JakeA>
wanderview: I know right! Dangerous times. Hoping to have something to PR tomorrow. Just getting up to speed today & got sidetracked a little

[10:47:21.0000] <JakeA>
But seems like something I should be doing with all spec things

[10:47:58.0000] <JakeA>
Domenic: you're more than welcome to the SW meeting. Happy for streams to be part of that too.


2017-01-10
[17:39:24.0000] <gsnedders>
MikeSmith: noscript in head in kinda weird and awkward

[19:52:07.0000] <NB123>
hi all im looking for a way to implement spellcheck on safari ipad

[19:52:23.0000] <NB123>
on a web textarea

[19:52:51.0000] <NB123>
it seems like all other browser/platform work except Safari Ipad which i need the most

[19:52:59.0000] <NB123>
any hint?\

[20:13:19.0000] <zcorpan>
gsnedders: https://github.com/html5lib/html5lib-tests/pull/86

[00:03:55.0000] <ondras>
hm

[00:04:16.0000] <ondras>
still puzzled by entity parsing

[00:04:17.0000] <ondras>
https://www.w3.org/TR/html5/syntax.html#consume-a-character-reference

[00:04:23.0000] <ondras>
"If the character reference is being consumed as part of an attribute, and the last character matched is not a ";" (U+003B) character, and the next character is either a "=" (U+003D) character or an alphanumeric ASCII character, then, for historical reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be unconsumed, and nothing is returned. However, if this next

[00:04:25.0000] <ondras>
character is in fact a "=" (U+003D) character, then this is a parse error, because some legacy user agents will misinterpret the markup in those cases."

[00:04:36.0000] <ondras>
can someone please show me an example of this rule in action?

[00:05:08.0000] <ondras>
i.e. an attribute value that results in this parse error

[00:06:17.0000] <ondras>
the spec sounds like src="&amp=" would apply to this case?

[00:07:11.0000] <annevk>
ondras: you're quoting a TR/ document, is it the same as the actual document?

[00:08:33.0000] <ondras>
annevk: oops. this would be the proper doc? https://dev.w3.org/html5/spec-preview/tokenization.html#consume-a-character-reference

[00:09:29.0000] <annevk>
ondras: nope

[00:09:34.0000] <ondras>
damn

[00:09:47.0000] <ondras>
how on earth does one orient in this?

[00:09:57.0000] <ondras>
what are my odds of finding the proper document?

[00:10:52.0000] <ondras>
annevk: next try: https://html.spec.whatwg.org/#character-reference-state ?

[00:11:36.0000] <annevk>
ondras: yeah, and apologies for the confusion

[00:11:56.0000] <annevk>
ondras: I kinda assumed you knew since you're here all the time

[00:13:23.0000] <ondras>
annevk: true. sorry for bothering you then; it is worded differently in the actual document and the current wording makes more sense.

[03:06:58.0000] <MikeSmith>
SW meetingin Tokyo?

[05:27:16.0000] <JakeA>
MikeSmith: yep! I posted to the list a few months ago. You interested in joining? April 3rd & 4th

[05:27:57.0000] <MikeSmith>
JakeA: yeah

[05:28:43.0000] <JakeA>
MikeSmith: cool. I've got a TODO-list item to set up a github issue to plan the sessions. I'll post a link to it on the mailing list, but will also ping you directly.

[05:28:54.0000] <MikeSmith>
super

[05:29:02.0000] <MikeSmith>
cheers

[05:30:07.0000] <inoas>
Is there something like ::around or ::wrap, similar to ::after / ::before ?

[05:31:12.0000] <JakeA>
annevk: https://github.com/w3c/web-platform-tests/blob/master/notifications/constructor-basic.html doesn't use -manual btw. But it does use force_timeout & set_status which doesn't appear to work

[05:32:18.0000] <annevk>
Pretty sure it is wrong then

[05:32:44.0000] <inoas>
so that you don't have to do <div class="max-width-container"><div class="row"><article> but can just write <article> and have article::around { display: flex; max-width: 1000px; margin: 0 auto; } and article::around:around { display: block; width: 100% }

[05:33:15.0000] <JakeA>
annevk: feels like a grey area, since a browser flag (or granting permission in advance) means the test can run without manual interaction

[05:33:58.0000] <annevk>
JakeA: yeah, but we don't have syntax/support for indicating such a requirement

[05:34:17.0000] <annevk>
JakeA: once we do manual can be automated

[05:34:56.0000] <annevk>
inoas: shadow trees I suppose

[05:35:10.0000] <JakeA>
annevk: fair, will update the test

[05:35:26.0000] <inoas>
annevk I cannot follow what that has to do with shadow trees - can you point me at where to read there?

[05:35:43.0000] <inoas>
I am more like ::before ::after but just ::around

[05:35:48.0000] <inoas>
it is merely about presentation/rendering

[05:36:08.0000] <inoas>
so that you can create the presentation layer in CSS instead of table... eh div-class-soup

[05:36:36.0000] <inoas>
which will reduce the html sizes and thus the rendering overhead on documents massivly if applied

[05:39:09.0000] <annevk>
inoas: I mean that you could attach a shadow tree to the <article> that contains a bunch of wrapper <div>s for styling and a single <slot> for the contents of the <article> element

[05:39:59.0000] <inoas>
annevk that still requires real dom elements for just rendering purposes

[05:40:17.0000] <inoas>
what I mean is a pseudo element like before/after

[05:41:59.0000] <inoas>
annevk: would that be worth an issue?

[05:57:57.0000] <annevk>
inoas: they're hidden from the DOM though, so you don't get pollution in APIs

[05:58:07.0000] <annevk>
inoas: in any event, I guess you could file an issue

[05:58:11.0000] <inoas>
annevk: I am not about Javascript

[05:58:32.0000] <annevk>
inoas: there used to be a generated content proposal that addressed this and way more, but it was overly ambitious and never went anywhere

[05:58:38.0000] <inoas>
just another exampe. I want to have most minimal markup for my clients to write

[05:58:52.0000] <inoas>
so say <article> and <article class="full-width">

[05:59:04.0000] <inoas>
article:not[class="full-width"]::wrap { width: 100%; } article:not[class="full-width"] { margin: 0 auto; max-width: 900px }

[05:59:13.0000] <inoas>
misses () around :not

[05:59:49.0000] <inoas>
it would only be ::wrap or ::around that behaves exactly like ::before and ::after except that it cannot take a content: property

[06:00:07.0000] <inoas>
and well, the render would need to add the pseudo element "around" not before/after

[07:49:31.0000] <JakeA>
MikeSmith: Domenic: https://github.com/w3c/ServiceWorker/issues/1053 details on the next service worker f2f

[07:50:23.0000] <Domenic>
JakeA: awesome, will try to work out my schedule soon

[07:52:42.0000] <JakeA>
MikeSmith: hmm, I think I lied when I said I'd sent something to public-webapps, sorry!

[07:52:44.0000] <JakeA>
fixing now

[08:07:02.0000] <wanderview>
JakeA:  do we have any limits on how many people can attend?  (room size, etc)

[08:07:21.0000] <wanderview>
we have some folks working in Taipei office on service worker and I'd like to invite them as long as we're not busting the room

[08:08:45.0000] <JakeA>
wanderview: I was thinking the same, especially as most of the Chrome SW effort is in Tokyo. Nate told me it's the "big meeting room", but I'll get numbers

[08:08:55.0000] <JakeA>
wanderview: you're attending right?

[08:09:14.0000] <wanderview>
JakeA: yes, I updated the github issue

[08:09:39.0000] <JakeA>
wanderview: hah, so you did. Cheers!

[08:09:48.0000] <wanderview>
JakeA: btw, can we add a 3rd day where we just hold a rocket league tournament?

[08:11:11.0000] <JakeA>
wanderview: omg yes please

[08:11:29.0000] <wanderview>
I got the game over the weekend... I can sometimes hit the ball!

[08:11:54.0000] <JakeA>
You'll get steadily better. I still miss the ball a ton.

[08:12:58.0000] <wanderview>
I think I've gotten better since I decided never to push the power slide button

[08:13:56.0000] <JakeA>
Played briefly with esprehn. He got scarily good after only 30mins. Like, he was only a further 30mins away from kicking my arse.

[09:03:40.0000] <MikeSmith>
JakeA: thanks

[09:17:26.0000] <esprehn>
JakeA: !!

[09:21:44.0000] <JakeA>
esprehn: (rocket league post-CDS)


2017-01-11
[16:02:06.0000] <esprehn>
JakeA: it was awesome

[18:18:57.0000] <Ascend>
Hello fetch developers

[18:19:13.0000] <Ascend>
Does anybody have an idea when the fetch standard will be set in stone, so that we can use it in production?

[18:26:49.0000] <boogyman>
Ascend: http://caniuse.com/#search=fetch

[18:31:01.0000] <Domenic>
Ascend: set in stone, never. https://wiki.whatwg.org/wiki/FAQ#What_does_.22Living_Standard.22_mean.3F use in production, see http://caniuse.com/#search=fetch

[22:28:54.0000] <annevk>
For anyone with an html5.org ssh account, DreamHost moved servers, so you might get the "this is wrong" message...

[00:23:56.0000] <annevk>
JakeA: btw, I'm not sure I'm the best person to review your service worker / fetch test

[00:24:19.0000] <annevk>
JakeA: maybe jungkees could do it or someone implementing?

[00:24:33.0000] <annevk>
JakeA: ah, Mek?

[00:35:12.0000] <JakeA>
annevk: the PR auto-pinged mek & ehsan

[00:35:23.0000] <annevk>
JakeA: good times

[00:35:45.0000] <JakeA>
(because they're in the owners file)

[00:36:02.0000] <annevk>
JakeA: FWIW, the new WHATWG process is such that we land the spec PR after the test PR lands

[00:36:23.0000] <annevk>
I should probably get foolip_sheriff to document that somewhere

[00:38:08.0000] <ehsan>
JakeA: which PR?

[00:38:26.0000] <JakeA>
annevk: gotcha. I'll be proactive about getting someone to review the test

[00:42:05.0000] <annevk>
ehsan: https://github.com/w3c/web-platform-tests/pull/4518

[01:24:16.0000] <ehsan>
annevk: it's unlikely I'll get to that soon :/

[02:19:02.0000] <foolip_sheriff>
annevk, JakeA: https://github.com/whatwg/html/blob/master/CONTRIBUTING.md#tests and https://github.com/whatwg/html/blob/master/TEAM.md#handling-pull-requests is the current documentation, do we need more?

[02:22:23.0000] <annevk>
foolip_sheriff: one thing we need to do somehow is elevate the requirements to whatwg/*

[02:22:55.0000] <annevk>
foolip_sheriff: perhaps by moving this kind of documentation to whatwg/meta? Although I guess that would make it a little more annoying to get to

[02:41:29.0000] <foolip_sheriff>
annevk: do you think we can declare the experiment a success and "encourage" tests everywhere?

[02:43:44.0000] <annevk>
foolip_sheriff: yeah

[02:44:15.0000] <foolip_sheriff>
annevk: I'm writing a short comment on https://github.com/whatwg/html/issues/1849 to ask how everyone is finding it.

[02:44:19.0000] <annevk>
foolip_sheriff: in particular it would be good if it was part of the PR guidelines

[02:44:59.0000] <annevk>
https://github.com/w3c/dom/issues o_O

[02:45:18.0000] <annevk>
It's really hard to sympathize with what's going on there

[03:00:33.0000] <foolip_sheriff>
annevk: https://github.com/whatwg/html/issues/1849#issuecomment-271840126

[03:01:07.0000] <foolip_sheriff>
annevk: wait, they didn't start from an up-to-date copy of the spec?

[03:02:15.0000] <annevk>
foolip_sheriff: I don't even, somewhat surprised to see rbyers cheering them on, despite it failing massively last time around

[03:02:52.0000] <foolip_sheriff>
annevk: cheering, or just being polite?

[03:03:35.0000] <annevk>
foolip_sheriff: https://github.com/w3c/dom/issues/13

[03:24:50.0000] <MikeSmith>
the responsible party there seems well-intentioned and acting in good faith to carry out the task as it’s been explained to them

[03:25:53.0000] <MikeSmith>
that said, I guess it’s not super encouraging that for something which intends to be seen as a referencable spec for the DOM, the person working on it does not have an accurate understanding of the implementation status of Shadow DOM, nor apparently understand how in general to get an accurate understanding of the implementation status for a feature

[03:27:53.0000] <MikeSmith>
regardless this reminds me that we need to come up with better guidelines for editors, whatever they’re working on

[03:29:22.0000] <MikeSmith>
regardless of what they are working on there are some basic things to know about so they at least don’t end up costing other people time to explain to them

[03:30:56.0000] <MikeSmith>
like, our editor guidelines should say, Do not assume any site anywhere has accurate information about the implementation status of something. If you want to determine implementation status, find test or make test and run them yourself in different UAs to see what the results are.

[03:31:02.0000] <MikeSmith>
etc.

[04:23:32.0000] <rbyers>
Annevk: I wouldn't say I'm cheering them on.  I started by trying to fix the references to W3C Dom in PE: https://github.com/w3c/pointerevents/issues/160

[04:27:25.0000] <annevk>
rbyers: apologies, should have gotten lunch first

[04:27:41.0000] <rbyers>
.. My "always up to date" requirement was something I assumed would never happen.

[04:30:18.0000] <rbyers>
But after reading slightlyoff@'s take on this, I'm trying hard not to be hostile about it.  It sucks and I'm not going to waste any time reading/PRing it.

[04:31:39.0000] <rbyers>
But I'm not going to stand in their way or refuse to file bugs when asked...

[04:38:45.0000] <annevk>
Sounds interesting, but prolly internal?

[04:45:57.0000] <annevk>
foolip_sheriff: FWIW, Fetch and URL have also used the "require tests" policy and it's been working out well, though with Fetch it's trickier sometimes to get good tests (new features)

[04:47:12.0000] <foolip_sheriff>
annevk: awesome, looks like there's a future in this tests thing. new features are indeed tricky, whatever you learn from Fetch would be great to document somehow. I suppose in some cases tests are punted?

[04:47:45.0000] <annevk>
foolip_sheriff: what happens is that we end up with one or a couple trivial tests

[04:48:07.0000] <annevk>
foolip_sheriff: see e.g. https://github.com/whatwg/fetch/pull/425 which really needs hundreds of tests

[04:48:27.0000] <foolip_sheriff>
annevk: is anyone attempting to track what's still missing tests?

[04:48:30.0000] <annevk>
foolip_sheriff: but hopefully those will be written during implementation

[04:48:36.0000] <annevk>
foolip_sheriff: nope

[04:49:22.0000] <foolip_sheriff>
Although it's not at all obvious that trying to be pedantic about maintaining such a "missing tests" list would be the best use of time, it's easy to see it become just a huge list of TODOs, and someone else just starts from scratch ignoring it.

[04:49:35.0000] <annevk>
foolip_sheriff: also, what we found with URL is that having an implementation modified per spec changes and then run the tests is kinda vital to ensuring the new tests and spec changes are good

[04:49:56.0000] <annevk>
foolip_sheriff: it's hard to tell from just new tests and new spec text alone without having an impl

[04:51:39.0000] <foolip_sheriff>
annevk: yeah, I think this all works best with small iterative changes a la HTML or URL, I guess for new things one could leave it just untested until there is an implementation, and then do one big pass of what test coverage is still there. Although it should be a good citizen implementer doing that.

[04:53:55.0000] <annevk>
foolip_sheriff: as for "missing tests", couldn't we use code coverage tooling for that?

[04:55:13.0000] <annevk>
foolip_sheriff: with URL it wasn't new things, it was just existing algorithms that were wrong in some way, but the newly written algorithm wasn't necessarily correct either

[04:55:23.0000] <foolip_sheriff>
annevk: probably for one-off checks that would work, but unless the implementation has the spec algorithms all in one place it might be tricky to see what steps have missing error handling tests and so on

[04:55:54.0000] <foolip>
maybe nobody cares that I'm sheriff today :)

[04:56:06.0000] <foolip>
(it's for #chromium)

[05:09:09.0000] <jgraham>
foolip: I don't know, it was fun to imagine you in a nice hat with a shiny badge

[05:09:43.0000] <foolip>
jgraham: https://sheriff-o-matic.appspot.com/chromium does have a shiny favicon.ico

[05:12:21.0000] <jgraham>
foolip: And a very boring acces denied page :)

[05:12:38.0000] <foolip>
jgraham: oh. well the page itself is boring too.

[05:48:10.0000] <annevk>
If I have promise_test(() => { fetch().then(...) }), why does adding a return statement before fetch() help?

[05:49:04.0000] <annevk>
Because of the { and } it seems?

[05:49:14.0000] <annevk>
I guess I still don't understand how things work

[05:51:05.0000] <Domenic>
annevk: yeah because of the { and }

[05:52:47.0000] <JakeA>
annevk: () => blah(); is shorthand for () => { return blah(); }

[05:54:42.0000] <annevk>
I think I ran into this at least once or twice before, things just no longer stick in memory

[05:55:05.0000] <JakeA>
welcome to getting older

[05:56:34.0000] <JakeA>
"what did I come into this room for?", "where are my pants?", "whose garden is this?" all things to look forward to

[05:56:57.0000] <jgraham>
annevk being old is terrifying

[05:57:14.0000] <jgraham>
Soon gsnedders will be old and then I'll be the one in the corner sobbing

[05:57:26.0000] <annevk>
gsnedders is still a teen, right?

[09:15:27.0000] <gsnedders>
annevk: yeah, I'm twenty-four-teen

[09:16:10.0000] <MikeSmith>
heh

[09:22:22.0000] <Domenic>
Do we have other restriction models? So far I can think of iframe sandboxing, allow* attributes/feature policy, and secure contexts. https://github.com/whatwg/html/issues/2259#issuecomment-271931992

[09:27:01.0000] <JakeA>
Domenic: CSP, x-iframe-options

[09:27:16.0000] <Domenic>
Ooh, good ones

[09:27:25.0000] <JakeA>
Domenic: rel=noopener

[09:27:49.0000] <Domenic>
Everyone loves rel=noopener

[09:31:09.0000] <Domenic>
I feel like this deserves some kind of reference page or blog post or something.

[09:31:35.0000] <Domenic>
I actually realized I don't have a great sense of how CSP works... I just know that if I want to productionize a website I should try to slap as tight of a CSP policy on it as possible.

[09:32:48.0000] <tobie>
CSPs break bookmarklets and that makes me super sad. I get why, but still. :'-(

[09:50:08.0000] <annevk>
Domenic: same-origin policy?

[09:59:03.0000] <annevk>
gsnedders: even if it's not getting fixed, I'm curious to dig for rationale

[09:59:21.0000] <annevk>
gsnedders: having more control over the server in WPT would be great though

[09:59:35.0000] <annevk>
gsnedders: and I'd be happy to see a rewrite that also allows early responses

[10:04:56.0000] <gsnedders>
annevk: essentially, they use RFC2822-like parsing for it

[10:05:41.0000] <gsnedders>
annevk: which I think matches RFC 2616?

[10:06:59.0000] <annevk>
gsnedders: it doesn't afaict

[10:07:13.0000] <annevk>
gsnedders: only HT, CR, LF, and SP count as whitespace in HTTP

[10:08:02.0000] <gsnedders>
it says they do, but then the ABNF disagrees, I think?

[10:08:08.0000] <annevk>
gsnedders: no

[10:08:36.0000] <gsnedders>
"HTTP header fields […] follow the same generic format as that given in Section 3.1 of RFC 822"

[10:09:12.0000] <annevk>
gsnedders: oh, you meant it the other way around

[10:09:19.0000] <jochen__>
annevk: if you have a chance, could you have a look at https://github.com/w3c/webappsec-referrer-policy/issues/89 and the PR I linked to whether this makes sense?

[10:09:39.0000] <gsnedders>
annevk: yeah

[10:09:51.0000] <gsnedders>
"Request (section 5) and Response (section 6) messages use the generic message format of RFC 822"

[10:10:26.0000] <annevk>
gsnedders: I don't see anything in 822 that is special for 0B and 0C though

[10:11:20.0000] <annevk>
gsnedders: uses the exact same productions afaict

[10:12:03.0000] <jgraham>
FWIW it might be possible to rewrite just the header parsing in wptserve by making a class with the same interface as mimetools.Message

[10:12:11.0000] <gsnedders>
yeah, I think it is

[10:12:49.0000] <jgraham>
It's just defined as a class attribute so it's swappable without replacing the entire server class

[10:13:03.0000] <jgraham>
(OTOH that won't give you early responses or so)

[10:13:33.0000] <gsnedders>
I think we probably want to do something that works for HTTP/2 well at the same time

[10:14:02.0000] <jgraham>
Well

[10:14:05.0000] <annevk>
jochen__: it seems that doesn't quite address bz's comment

[10:14:23.0000] <annevk>
jochen__: if presentation attributes turn into some kind of CSS declaration block too that is

[10:14:26.0000] <jgraham>
I think that http/2 might end up using hyper or something to provide the protocol implementation

[10:14:34.0000] <gsnedders>
jgraham: right

[10:14:37.0000] <jgraham>
(the python thing, not the similarly named rust thing)

[10:14:54.0000] <jgraham>
So I don't see how that would affect the HTTP/1 case

[10:15:22.0000] <gsnedders>
annevk: https://github.com/python/cpython/blob/2.7/Lib/email/feedparser.py is the thing used ultimately

[10:15:24.0000] <annevk>
jochen__: my advice is again to ask the CSS WG how the layering works, since I think there's not enough terminology/layering to describe what we need

[10:16:39.0000] <gsnedders>
jgraham: we want the same API to get responses, no?

[10:16:39.0000] <annevk>
gsnedders: maybe the rather sloppy lastvalue = [line[i+1:].lstrip()] is the culprit?

[10:16:48.0000] <gsnedders>
annevk: oh, probably

[10:18:54.0000] <jgraham>
gsnedders: Yeah, that's a reasonable point. I haven't looked into the http2 case enough to figure out if it will require breaking api changes though

[10:19:11.0000] <jgraham>
For the internal API exposed to .py handlers I mean

[10:19:31.0000] <annevk>
jgraham: there's also a small desire to be able to transmit HTTP/1.0 responses, but I think that's possible right?

[10:19:49.0000] <annevk>
jgraham: some stream stuff should fail on HTTP/1.0, but not HTTP/1.1

[10:21:12.0000] <jgraham>
Hmm, I'm not actually sure that you can do that easilly at the moment because it's baked into the server that it's a HTTP 1.1 server. Although you can certainly write a raw response, which is probably fine for the small number of cases that require it

[10:22:23.0000] <annevk>
Yeah, I think that's all we need

[10:22:40.0000] <gsnedders>
equally the 0.9 response case

[10:23:19.0000] <gsnedders>
jgraham: HTTP/2 adds the ability to do duplex stuff so we need API extensions but they should be optional for handlers

[10:23:37.0000] <gsnedders>
jgraham: e.g., so they can push resources

[10:26:25.0000] <gsnedders>
jgraham: we probably just *optionally* let the handler have a new arg, and handle the case when we get a TypeError throwing it?

[10:26:46.0000] <jochen__>
annevk: I'm trying that since a few months, and so did Boris, but we haven't gotten any answer :-/

[10:32:09.0000] <jgraham>
gsnedders: Yeah I'm sure it's possible to design a thing

[10:35:40.0000] <gsnedders>
/me is so sleep deprived, did not sleep well last night ;_;

[10:38:07.0000] <jgraham>
Is it a CSS meeting or something?

[10:40:56.0000] <gsnedders>
yeah

[10:41:32.0000] <Domenic>
Oh dang, new CSSOM became mutable again

[10:41:37.0000] <gsnedders>
/me is going through his red-ink covered copy of the wpt docs

[11:05:54.0000] <annevk>
jochen__: no fast access to TabAtkins for you?

[11:06:07.0000] <annevk>
jochen__: did you file an issue?

[11:25:05.0000] <TabAtkins>
Wait what's up?

[11:26:25.0000] <TabAtkins>
Yeah, I haven't seen this particular issue. :/

[11:26:41.0000] <TabAtkins>
Domenic: Yeah, mutable but not live.

[11:27:14.0000] <TabAtkins>
Was an efficiency issue - you can now create a complex object (like a transform list) and just tweak it and repeatedly re-set it, rather than having to constrantly create new objects.

[11:56:44.0000] <gsnedders>
annevk: so Foo: b\x0bar should result in a Foo header with a value of b\x0bar right?

[11:59:49.0000] <gsnedders>
Which doesn't work per RFC 822 and its sucessors because a field value cannot contain \x0b

[12:01:47.0000] <annevk>
gsnedders: that already works

[12:02:08.0000] <annevk>
gsnedders: leading or trailing is the issue

[12:02:34.0000] <gsnedders>
does it?

[12:02:48.0000] <annevk>
gsnedders: see the test I wrote

[12:02:49.0000] <gsnedders>
then WTF am I seeing happen

[12:03:21.0000] <annevk>
Sleep deprivation? 😜

[12:03:41.0000] <gsnedders>
:)

[12:03:52.0000] <annevk>
I might be missing something though, more time tomorrow

[12:04:24.0000] <gsnedders>
Trying this in the Python command-line has this work fine

[12:05:53.0000] <gsnedders>
oh wait

[12:06:00.0000] <gsnedders>
I'm testing the wrong thing

[12:18:43.0000] <gsnedders>
annevk: okay, so this is fixed in Py3

[12:22:51.0000] <gsnedders>
given, e..g, Access-Control-Allow-Origin, we could try making this out to be a security issue

[14:46:41.0000] <zcorpan>
MikeSmith: There's no body. bug? doesn't happen in firefox in live dom viewer. https://checker.html5.org/parsetree/?parser=html5&content=<%21doctype+html><template><plaintext>a<%2Ftemplate>b&submit=Print+Tree

[15:07:32.0000] <tobie>
Domenic, annevk: in the infra standard, would it make sense to have a dfn for a map entry, list item, etc.?

[15:07:46.0000] <Domenic>
tobie: yeah it probably would

[15:37:46.0000] <tobie>
Domenic: for lists, sets, queues and stacks, it's clearly "item", it's less consistant for maps which use: "key/value pair",  "entry", and "item".

[15:38:45.0000] <Domenic>
Good bug report :). I guess I would pick entry? "Each key/value pair is called an entry"?

[15:39:13.0000] <tobie>
Domenic: likewise


2017-01-12
[16:02:19.0000] <TabAtkins>
+1 to entry

[16:05:02.0000] <tobie>
Domenic: https://github.com/whatwg/infra/pull/53

[17:43:41.0000] <gsnedders>
is there no easy way to get a version of ChromeDriver that works with Canary?

[21:20:40.0000] <MikeSmith>
botie, inform zcorpan the cause of that https://checker.html5.org/parsetree/?parser=html5&content=<%21doctype+html><template><plaintext>a<%2Ftemplate>b&submit=Print+Tree difference is a regression I introduced in the validator htmlparser branch when I fixed a <template>-related bug there https://github.com/validator/htmlparser/commit/140b79631dffaea0f4dfe77144eb86e0b863f3f5

[21:20:40.0000] <botie>
will do

[22:19:36.0000] <annevk>
gsnedders: interesting, so does Python 3 use a more specific strip in that place or was it something else?

[22:21:16.0000] <annevk>
gsnedders: https://github.com/python/cpython/commit/2a05a314547cded33cdf9169dd4a4ced937a64bd

[22:21:21.0000] <annevk>
gsnedders: fixed only very recently it seems

[23:23:31.0000] <gsnedders>
annevk: that's not the bug

[23:23:58.0000] <gsnedders>
annevk: that's it splitting headers on all unicode line breaks

[23:25:17.0000] <gsnedders>
annevk: https://github.com/python/cpython/commit/15a312f0238df6add3ca64e9934ab258e06a5006 is where it was fixed, accidentally

[23:31:06.0000] <annevk>
gsnedders: would all line breaks not include 0C at least?

[23:33:10.0000] <gsnedders>
annevk: oh, that'll be a fix for a Py3-only bug that broke it in a different way

[23:33:11.0000] <gsnedders>
hah

[23:35:50.0000] <annevk>
gsnedders: having looked at that code I'm not sold on it being correct

[00:02:43.0000] <annevk>
Anyone else getting the GitHub Unicorn?

[00:03:03.0000] <annevk>
downforeveryone says it's me

[00:03:13.0000] <tobie>
Yup, me. :(

[00:03:18.0000] <annevk>
but I guess it would say that even if it got the Unicorn

[00:03:26.0000] <annevk>
since that's still up in a way

[00:03:30.0000] <tobie>
yup

[00:04:07.0000] <tobie>
annevk: I was in the process of getting back to you.

[00:04:37.0000] <annevk>
About Infra?

[00:04:42.0000] <tobie>
yes

[00:05:08.0000] <tobie>
annevk: It seemed you were only x-referencing terms once per paragraph.

[00:05:24.0000] <annevk>
tobie: oh okay, ignore that then

[00:05:36.0000] <annevk>
tobie: I'm not sure that was intentional, but it very well might be the case

[00:05:41.0000] <tobie>
alright

[00:05:56.0000] <tobie>
annevk: it looked quite systematic

[00:24:44.0000] <tobie>
annevk: GH is back up for me.

[00:26:25.0000] <annevk>
same

[00:27:36.0000] <tobie>
annevk: the 100 character line limit partially breaks diff highlighting in GH.

[00:27:59.0000] <tobie>
annevk: have you considered what I think TabAtkins refers to as semantic line breaks?

[00:29:00.0000] <annevk>
tobie: nobody really likes them

[00:29:31.0000] <tobie>
annevk: well, outside of Tab and I, I guess. :)

[00:29:53.0000] <annevk>
With nobody I meant the folks working on HTML mostly I suppose

[00:30:05.0000] <annevk>
I don't really care, but I don't want to reformat everything either

[00:30:08.0000] <tobie>
annevk: that said, I prefer 100 character limit and not having to work on CSS.

[00:30:21.0000] <annevk>
And having some consistency within WHATWG is nice for new contributors

[00:31:50.0000] <tobie>
sure

[00:35:41.0000] <tobie>
annevk: alright, well, LMK, if you need anything else from me on this PR.

[00:49:21.0000] <annevk>
tobie: thanks, you weren't in a rush right? going to ping pong back to Domenic

[00:50:16.0000] <tobie>
annevk: yeah, np. Would me nice if I could get them in shepherd tomorrow, though.

[00:50:30.0000] <tobie>
annevk: not sure what the timing for *that* is like

[00:51:08.0000] <annevk>
tobie: if Domenic lands it we should be good for that

[00:51:30.0000] <tobie>
annevk: awesome

[03:40:21.0000] <annevk>
If anyone with Bikeshed chops would know the answer to https://github.com/whatwg/xhr/pull/97#issuecomment-272142369 that'd be great

[03:40:57.0000] <annevk>
I guess converting XMLHttpRequest is blocked another day

[03:53:44.0000] <annevk>
mkwst: ping for https://github.com/whatwg/url/pull/175

[03:53:44.0000] <botie>
will do

[03:54:05.0000] <annevk>
mkwst: also ping for https://github.com/whatwg/fetch/issues/364

[03:54:24.0000] <annevk>
(there's probably more, but I noticed these recently)

[07:27:36.0000] <annevk>
miketaylr: I'm going inline the Compatibility Standard image

[07:27:48.0000] <annevk>
miketaylr: pinging your blog each time someone reads the standard seems a little bad

[07:29:13.0000] <jgraham>
Well not notiably worse than pinging whatwg.org (except from a performance pov I guess)

[07:30:10.0000] <annevk>
And privacy

[07:30:30.0000] <jgraham>
Not really

[07:30:57.0000] <jgraham>
I don't particularly trust you more than miketaylr

[07:31:09.0000] <jgraham>
Or any of the other people who have access to whatwg server logs

[07:31:15.0000] <annevk>
jgraham: but you made a decision to visit WHATWG, not miketaylr

[07:31:42.0000] <annevk>
jgraham: so WHATWG letting miketaylr know about your visits is bad

[07:31:55.0000] <jgraham>
Right, but if I was really concerned about the difference I would block all cross-origin loads

[07:32:14.0000] <annevk>
Why should we put the difficulty on the visitor?

[07:32:31.0000] <annevk>
I really don't understand how this can be controversial, seems like an obvious bad thing

[07:32:43.0000] <jgraham>
So I don't think it's a bad thing to inline it. I just think it doesn't make a realistic increase in privacy

[07:33:41.0000] <jgraham>
Because in reality I have no idea who has access to WHATWG server logs, and if I actually care then the internet is so bad in general I would already be reading sites using curl or something

[07:35:15.0000] <annevk>
I don't understand why you are particularly relevant

[07:35:26.0000] <annevk>
If you already know most folks involved it doesn't really matter

[07:35:49.0000] <annevk>
Anyway, whatever

[07:35:55.0000] <jgraham>
I don't think that's true

[07:39:05.0000] <jgraham>
It just seems unrealistic that someone would be fine with their ISP, dreamhost, and whatever random group of people have access to whatwg log data knowing about their visits, but be super concerend about an externally hosted image

[07:39:45.0000] <jgraham>
I mean I agree that in theory it's a smaller set of people who can track you

[07:39:54.0000] <jgraham>
I'm just not sure the difference is meaningful

[07:56:56.0000] <annevk>
/me wonders where zcorpan is

[07:57:47.0000] <MikeSmith>
annevk: thought he is at CSS WG meeting this week

[07:57:56.0000] <MikeSmith>
so, wehrever that meeting is at I guess

[08:01:28.0000] <Ms2ger>
Seattle

[08:01:55.0000] <MikeSmith>
ok

[08:02:00.0000] <MikeSmith>
so 8am there now

[08:19:29.0000] <annevk>
How long does it generally take for w3c-test.org to be updated?

[08:23:03.0000] <tobie>
Oh, what's up with > 50 characters showing up on GH commits?

[08:23:17.0000] <MikeSmith>
annevk: for a PR?

[08:23:36.0000] <MikeSmith>
to mirror something to submissions ?

[08:23:44.0000] <MikeSmith>
that should only take a few minutes

[08:24:55.0000] <jgraham>
tobie: ?

[08:25:17.0000] <annevk>
MikeSmith: merged PR

[08:25:35.0000] <tobie>
jgraham: yeah, I thought the first line was truncated above 50.

[08:26:07.0000] <tobie>
jgraham: I assume I'm not the only one given the WHATWG recs

[08:26:40.0000] <jgraham>
Oh, idk

[08:27:16.0000] <jgraham>
/me considers 50 character limits to be pointless busywork

[08:28:22.0000] <tobie>
tobie: considers arguing with repo owners about their stylistic preferences to be pointless busywork

[08:28:46.0000] <tobie>
/me is talking to himself.

[08:29:52.0000] <jgraham>
Well I'm not arguing with them

[08:30:14.0000] <jgraham>
I agree they're free to impose whatever unecessary work they like on contributors

[08:30:29.0000] <jgraham>
It just means I don't plan to worry about your problem :)

[08:32:07.0000] <tobie>
jgraham: I wasn't suggesting you should be arguing with them, just that I thought my time was better sent complying with stylistic requests than arguing against them.

[08:32:41.0000] <jgraham>
Agreed :)

[08:33:23.0000] <tobie>
Anyway, I wasn't mentioning this here to start a discussion on the topic. I was just merely surprised by this and was curious if anyone had context on that behavior.

[08:35:28.0000] <annevk>
tobie: I think it's just for readability and making it easier to scan commit titles

[08:35:33.0000] <jgraham>
I think the context is that it wraps at 70 characters

[08:35:37.0000] <annevk>
tobie: provide the context in the body

[08:36:13.0000] <tobie>
jgraham: I thought wrapping was a fifty for the first line, hence the limit.

[08:36:13.0000] <jgraham>
Presumably because people not following the 50 character "rule" would find it super-annoying if it wrapped at 50

[08:36:38.0000] <jgraham>
Yeah, but consider the number of projects that don't follow that

[08:36:46.0000] <tobie>
jgraham: so there's a soft 50 char rules so people don;t get annoyed by a hard 70 char rule?

[08:36:55.0000] <tobie>
jgraham: software development is hard.

[08:37:08.0000] <jgraham>
Well the 70 character rule isn't hard either

[08:37:14.0000] <jgraham>
PR titles can be as long as you want

[08:37:46.0000] <jgraham>
But GitHub will "helpfully" break it after 70 characters

[08:38:07.0000] <tobie>
s/;/'/

[08:39:31.0000] <jgraham>
(ftr I agree that short summaries are good, but disagree that technical limits of old terminals mean that a 51, or even 70, character summary is unacceptable)

[08:39:41.0000] <tobie>
oh, so we have different levels of softness.

[08:41:07.0000] <tobie>
annevk: for context, Domenic changed my commit title from: "Add DFNs for list item & map entry, key, & value" (49)

[08:41:53.0000] <tobie>
annevk: to "Meta: add <dfn>s for list item and map entry, key, and value" (61)

[08:42:10.0000] <Domenic>
I just want to fit in the GitHub UI, so 70 is my limit

[08:42:17.0000] <Domenic>
I guess our documentation says 50 :_/

[08:42:33.0000] <annevk>
Maybe we should stop referencing that document and write our own

[08:42:35.0000] <tobie>
well, what you link to from the doc.

[08:42:58.0000] <Domenic>
Yeah writing our own would be good I think

[08:43:04.0000] <annevk>
Meta: prefix is important though

[08:43:14.0000] <annevk>
Domenic: something for whatwg/meta to host

[08:43:18.0000] <Domenic>
Part of the reason I think for 50 is so that you can use "Revert of "..."" later and still not run over 70

[08:43:20.0000] <tobie>
I knew there was a GH rule + knowing that article led me to believe 50 was a hard rule

[08:43:46.0000] <tobie>
Domenic: oh, that  makes sense (sort of)

[08:43:52.0000] <Domenic>
annevk: I was thinking about that sort of thing (also for a revamped FAQ), but not sure a github.com URL is the best. Ideally something deployed to whatwg.org

[08:44:19.0000] <Domenic>
Yeah, to me allowing a potential "revert of" is not quite worth losing those 20 characters...

[08:45:45.0000] <tobie>
yeah. it's not.

[09:11:00.0000] <botie>
zcorpan, at 2017-01-12 05:20 UTC, MikeSmith said: the cause of that https://checker.html5.org/parsetree/?parser=html5&content=<%21doctype+html><template><plaintext>a<%2Ftemplate>b&submit=Print+Tree difference is a regression I introduced in the validator htmlparser branch when I fixed a <template>-related

[09:11:00.0000] <botie>
bug there https://github.com/validator/htmlparser/commit/140b79631dffaea0f4dfe77144eb86e0b863f3f5

[09:11:30.0000] <MikeSmith>
zcorpan: fixed that already

[09:11:42.0000] <zcorpan>
MikeSmith: sweet

[09:33:05.0000] <annevk>
Domenic: maybe time for a whatwg.org repo or some such

[09:33:24.0000] <annevk>
Domenic: put the website there

[09:44:05.0000] <Domenic>
yeah IMO we really should

[15:17:19.0000] <nox>
zcorpan_: Is it specified in the spec what happens if a script uses document.write() to include a pending parsing blocking script in the document, when the script is executed as part of popping the elements when the end of the parser is reached?

[15:42:26.0000] <zcorpan_>
nox: can you ask the question in the form of a mock test case?

[15:42:46.0000] <nox>
zcorpan_: https://twitter.com/nokusu/status/819685935042412544

[15:43:21.0000] <zcorpan_>
ah. yeah


2017-01-13
[16:55:38.0000] <smaug>
Why allow-same-origin is called allow-same-origin?

[16:55:55.0000] <smaug>
when "same" doesn't really refer to anything

[17:23:38.0000] <zcorpan_>
smaug: it's more "make-same-origin" i guess? but allow- is consistent with the other values

[17:23:59.0000] <smaug>
it doesn't make anything same origin

[17:24:11.0000] <smaug>
it is more like "dont-make-unique-origin"

[17:24:18.0000] <zcorpan_>
yes, right

[17:24:33.0000] <smaug>
or keep-origin

[17:24:55.0000] <zcorpan_>
but this is shipped, so too late to bikeshed the name :-)

[17:30:46.0000] <smaug>
true. just an example of a very confusing name

[21:18:32.0000] <annevk>
So when does w3c-test update relative to when a PR lands? Still not updated it seems…

[21:20:46.0000] <annevk>
I think allow-same-origin makes sense, it's about whether the frame can communicate with its own origin

[21:32:18.0000] <zcorpan>
annevk: maybe the sync is broken? earlier today i added w3c-test:mirror in a PR and didn't see it appear on w3c-test.org. MikeSmith?

[23:51:18.0000] <annevk>
Yeah, I think it must be, unless it's usual for there to be a delay of days

[23:51:29.0000] <annevk>
I don't really use w3c-test.org much

[23:52:43.0000] <jochen__>
annevk: what would the issue be about?

[23:53:08.0000] <jochen__>
annevk: "please spec how resources from css are fetched"?

[23:53:29.0000] <annevk>
jochen__: multiple issues sounds good

[23:53:35.0000] <annevk>
jochen__: one exactly like that

[23:53:54.0000] <annevk>
jochen__: and the other, about them providing a way to talk about the style attribute's styles specifically

[23:54:59.0000] <annevk>
jochen__: it just seems good manners to file issues you have with them, they might not know about their shortcomings

[23:55:34.0000] <jochen__>
fair enough

[23:55:47.0000] <jochen__>
I think I figured out a way to talk about style attributes btw

[23:56:00.0000] <jochen__>
there's CSSATTR, and that also talks about how to resolve base URLs for those styles

[23:56:13.0000] <jochen__>
so it looks like there are stylesheets where the base url is defined

[23:56:39.0000] <jochen__>
and then there are styles that are created via CSSATTR that defines a link to the styled element (and therefore an owner document)

[23:57:13.0000] <jochen__>
and then there are styles that HTML creates for presentation attributes, and there HTML does the URL processing, so it can as well provide the referrer with it

[00:01:09.0000] <annevk>
That depends on how you implement presentation attributes

[00:01:23.0000] <annevk>
An implementation could implement them through CSS extensions

[00:10:56.0000] <jochen__>
https://github.com/w3c/csswg-drafts/issues/904

[00:11:08.0000] <jochen__>
annevk: that wouldn't change the fact that implementation created the styles

[01:28:08.0000] <MikeSmith>
annevk: https://platform.html5.org/ cert invalid?

[01:35:44.0000] <annevk>
MikeSmith: strange

[01:36:15.0000] <MikeSmith>
yeah now got stranger even

[01:36:47.0000] <MikeSmith>
now shows a message from Dreamhost saying Site Not Found

[01:39:57.0000] <annevk>
MikeSmith: I'm not sure what's going on

[01:41:45.0000] <annevk>
MikeSmith: filed a ticket, seems to affect all of html5.org

[01:41:53.0000] <annevk>
MikeSmith: but not any of my other domains

[01:46:43.0000] <MikeSmith>
oh

[01:47:23.0000] <MikeSmith>
ah not https://checker.html5.org/ at least, since that’s different

[01:49:43.0000] <annevk>
MikeSmith: yeah, that's a DNS entry on html5.org, I guess those still work

[01:50:06.0000] <MikeSmith>
yeah

[01:57:06.0000] <MikeSmith>
botie, inform zcorpan yeah the w3c-test.org sync script is failing. Will try to get it fixed today (and get the backlog synced too)

[01:57:06.0000] <botie>
will do

[02:39:26.0000] <miketaylr>
annevk: thanks for inlining the image!

[02:40:02.0000] <miketaylr>
i mean, i guess i have to backdoor the spec some other way now

[02:40:03.0000] <miketaylr>
>:|

[03:20:48.0000] <annevk>
miketaylr: I knew it!

[05:12:04.0000] <nox>
/old-tests/submission/Opera/script_scheduling/096.html seems to be wrong.

[05:12:19.0000] <nox>
It expects defer scripts to not have ran before DOMContentLoaded.

[05:13:47.0000] <annevk>
nox: I guess the original creation date of that resource is long gone, but I would not be surprised if it predates the specification

[05:14:00.0000] <nox>
Yes. :)

[05:14:18.0000] <nox>
annevk: I like the indentation too.

[05:15:44.0000] <nox>
annevk: It's also duplicated, 098.html is the same.

[05:15:46.0000] <nox>
Because why not.

[05:23:05.0000] <annevk>
It's something annoying that a lot of questions about IDL need to be answered in part by the "overload resolution algorithm"

[05:23:28.0000] <annevk>
somewhat

[05:44:02.0000] <nox>
annevk: Is it me, or the spec for <script> doesn't actually specify that when adding a document fragment to a node that is in a document, any scripts in that fragment should be executed *after* all nodes in the document fragment are moved into the document?

[05:46:01.0000] <nox>
annevk: Which seems to be a prerequisite for 147.html to succeed, that is.

[05:48:45.0000] <nox>
Firefox passes 147.html, Safari doesn't.

[05:49:04.0000] <nox>
Chrome does.

[05:49:28.0000] <nox>
Anyone with Edge can test?

[06:17:55.0000] <annevk>
nox: ask jst for a BrowserStack account, but I can run a test for you

[06:17:56.0000] <botie>
will do

[06:18:16.0000] <annevk>
nox: and yes, that's the intent of how DocumentFragment insertion works, did we finally define it?

[06:18:28.0000] <annevk>
nox: I kinda forgot whether that was specified already

[06:18:36.0000] <nox>
annevk: No.

[06:18:49.0000] <nox>
annevk: It just says to call the insertion steps on each inserted node.

[06:19:38.0000] <annevk>
nox: ah, https://github.com/whatwg/html/issues/1127

[06:19:53.0000] <annevk>
I filed it, but didn't really do anything with it yet

[06:20:03.0000] <nox>
Ok.

[06:20:11.0000] <annevk>
nox: link of the test?

[06:20:14.0000] <nox>
annevk: There is something else to take into account to,

[06:20:20.0000] <nox>
annevk: nested scripts in a DocumentFragment.

[06:20:31.0000] <nox>
annevk: I filed https://github.com/whatwg/html/issues/2265 earlier.

[06:20:52.0000] <annevk>
I guess I'll mark that as a duplicate then

[06:20:58.0000] <nox>
The nested thing is covered by 128.html.

[06:21:13.0000] <nox>
https://github.com/w3c/web-platform-tests/blob/master/old-tests/submission/Opera/script_scheduling/128.html#L31

[06:21:19.0000] <nox>
Firefox expects #3 before #2.

[06:22:04.0000] <nox>
annevk: I fixed 128.html in the Servo fork: https://github.com/servo/servo/pull/15011/commits/4593b7c1d61773efe4e1c634190a9f7b72471b9c#diff-30743df3600624bb8b533c45a97cd12b

[06:23:43.0000] <annevk>
nox: Edge throws for 147

[06:24:00.0000] <annevk>
nox: can't get parentNode from null/undefined

[06:24:07.0000] <nox>
annevk: Yeah that's what Safari says too.

[06:35:24.0000] <annevk>
nox: is that what you get if you don't implement some kind of double insertion loop?

[06:36:17.0000] <annevk>
I guess it's considered some kind of safety feature so you can't manipulate the DocumentFragment?

[06:37:00.0000] <nox>
annevk: What do you mean?

[06:37:15.0000] <nox>
annevk: Whether scripts are executed at insertion time or not, they are not in the fragment anymore.

[06:37:29.0000] <nox>
Oh never mind, I got what you mean.

[06:37:38.0000] <nox>
annevk: Yeah I feel like we need two loops.

[06:37:47.0000] <nox>
annevk: Didn't we use to have two loops actually?

[06:37:57.0000] <nox>
I remember doing something like that, but that was probably another part of the spec.

[06:41:19.0000] <annevk>
nox: I don't think I ever defined the hooks necessary in DOM, but HTML might have alluded to it somehow

[06:42:40.0000] <annevk>
nox: you want two loops for safety?

[06:42:52.0000] <nox>
annevk: No, for proper ordering.

[06:43:15.0000] <nox>
annevk: HTML specifies when to prepare a script in a way that seems to want to cover that case but fails at it, at least that's my impression.

[06:45:55.0000] <annevk>
Proper ordering?

[06:46:20.0000] <benjamingr>
Domenic / caitp / bterlson if I could steal 5 minutes from anyone who could help me work on test262 that would be great

[06:46:32.0000] <benjamingr>
working onhttps://github.com/tc39/proposal-async-iteration/issues/69 and I want to make sure I'm in the right track

[06:46:41.0000] <annevk>
benjamingr: you might want to ping in #jslang on Mozilla IRC

[06:46:56.0000] <annevk>
benjamingr: in case anyone else is around that can help

[06:47:06.0000] <benjamingr>
Thanks, that's useful advice

[06:48:11.0000] <nox>
annevk: Proper ordering of operations. To make 147.html correct with regard to the spec.

[06:53:22.0000] <annevk>
nox: well the spec is "wrong" and 147 is way old, so I'm not sure what proper means

[06:53:29.0000] <annevk>
nox: but if it just means what Gecko implements, sure

[06:53:48.0000] <nox>
annevk: Yeah, that's what I meant. :D

[08:51:05.0000] <annevk>
MikeSmith: DreamHost is suggesting html5.org is only down locally somehow

[08:51:24.0000] <annevk>
MikeSmith: that it might be a DNS problem or some such, they can apparently access it fine

[08:52:32.0000] <boogyman>
When trying to access it via chrome canary, i get a message that u

[08:52:43.0000] <boogyman>
"usual or incorrect credentials" are being returned

[08:52:47.0000] <annevk>
MikeSmith: I guess I'll wait a little longer as they suggested

[08:53:31.0000] <annevk>
boogyman: you don't get "Your connection is not private"?

[08:53:58.0000] <boogyman>
I do, and upon expanding for more details, that's the message in the "fine print"

[08:55:45.0000] <annevk>
Ah, yeah, it seems we're getting a wrong certificate

[08:57:01.0000] <annevk>
Oh god, caniuse.com doesn't verify its JSON before publishing so now the HTML Standard refuses to build

[09:03:43.0000] <annevk>
Or maybe the request timed out?

[09:05:50.0000] <annevk>
Yeah that is what's happening

[09:18:36.0000] <botie>
zcorpan, at 2017-01-13 09:57 UTC, MikeSmith said: yeah the w3c-test.org sync script is failing. Will try to get it fixed today (and get the backlog synced too)

[09:20:25.0000] <Domenic>
Yeah GitHub was down for 10 minutes or so

[09:23:58.0000] <annevk>
Good, build is passing again

[09:38:07.0000] <benjamingr>
Domenic: almost done with what we could

[09:39:13.0000] <Domenic>
benjamingr: awesome. How can I best help? It seems like the checklists are still pretty scattered; did anyone ever set up an editable checklist or trello board or similar?

[09:40:54.0000] <benjamingr>
We did all the method tests, and copied what AsyncFunction does in builtins, and added the missing expression/declaration tests.

[09:42:10.0000] <benjamingr>
We don't have a checklist set up

[09:45:47.0000] <benjamingr>
I'll squish so you can take a look at the changes

[10:44:13.0000] <terinjokes>
anyone know the likelihood that SRI will be extended to other resources, such as images?

[11:24:11.0000] <Domenic>
mkwst would know

[15:28:28.0000] <tobie>
Are there examples of web specs which use internal slots and the this.[[slot]] notation beyond streams?

[15:41:15.0000] <Domenic>
web payments has a few

[15:41:21.0000] <Domenic>
web bluetooth and usb i beleive

[15:46:04.0000] <TabAtkins>
Font Loading


2017-01-14
[21:47:42.0000] <annevk>
gsnedders: I may be missing something, but known_hosts doesn't contain the RSA fingerprints

[21:48:30.0000] <annevk>
gsnedders: also, https://docs.travis-ci.com/user/ssh-known-hosts/ suggests you can't modify that directly

[22:14:38.0000] <gsnedders>
annevk: uh, you should be able to

[22:14:47.0000] <annevk>
gsnedders: how?

[22:15:02.0000] <annevk>
gsnedders: my own known_hosts doesn't have them

[22:15:20.0000] <gsnedders>
annevk: just edit the file should work… you can get the key with… ssh-keyscan?

[22:15:24.0000] <gsnedders>
it's been a while since I've done this

[22:16:45.0000] <gsnedders>
it's the public host key itself in the file, not the fingerprint

[22:18:24.0000] <annevk>
gsnedders: so why does everyone recommend to disable the checks?

[22:18:54.0000] <annevk>
I also still don't quite understand how I'd make this work, I'm really surprised they don't host documentation on it

[22:25:38.0000] <gsnedders>
annevk: idk

[22:42:25.0000] <annevk>
gsnedders: trying something based on your feedback: https://github.com/whatwg/url/pull/202

[22:47:59.0000] <annevk>
gsnedders: that attempt hangs and doesn't work

[22:48:22.0000] <annevk>
gsnedders: Travis ends at "Are you sure you want to continue connecting (yes/no)?" and will soon timeout I suppose

[22:49:33.0000] <annevk>
gsnedders: so I guess another way would be something like echo "url.spec... ... key..." >> ~/.ssh/known_hosts?

[23:22:35.0000] <MikeSmith>
annevk: the Dreamhost response about the *.html5.org cert doesn't give me more confidence in their ability to troubleshoot their problems

[23:23:14.0000] <MikeSmith>
between this and their IPv6 setup, which continues to be seriously broken despite their claims otherwise

[00:01:16.0000] <gsnedders>
annevk: did you get it working?

[00:15:18.0000] <annevk>
gsnedders: the PR succeeds now

[00:15:53.0000] <annevk>
MikeSmith: I guess you can open a meta issue on finding alternatives…

[04:02:37.0000] <annevk>
gsnedders: the striking thing is that everyone on the internet suggests disabling this check, including the Travis docs

[04:03:13.0000] <annevk>
gsnedders: which seems super weird for nobody to care about obvious mitm issues

[06:10:17.0000] <nox>
jst: Can I have a BrowserStack account btw?

[10:32:47.0000] <botie>
jst, at 2017-01-13 14:17 UTC, annevk said: for a BrowserStack account, but I can run a test for you

[14:25:38.0000] <gsnedders>
annevk: how many things written on the internet are people trying to get it working based on what they found elsewhere on the internet which is bad advice?

[14:25:44.0000] <gsnedders>
annevk: some of it I think is just bad advice leading to more


2017-01-15
[21:18:40.0000] <annevk>
Domenic: why does whatwg/console not need a known_hosts resource

[21:18:45.0000] <annevk>
Domenic: curious how that works

[21:31:39.0000] <annevk>
Domenic: oh wait, I see now, because of the bogus Travis config

[01:12:30.0000] <tobie>
annevk: flags were a completely new concept when I first started looking at standards. Should they be described in infra?

[01:12:44.0000] <tobie>
annevk: *new concept for me

[01:13:49.0000] <annevk>
tobie: I still would like to replace them with booleans

[01:14:10.0000] <tobie>
annevk: oh, well in that case...

[01:14:19.0000] <annevk>
tobie: but if we keep them, I suppose

[04:08:00.0000] <annevk>
gsnedders: yeah, I kinda want to write a blog post so at least one page calls the whole option out as harmful

[07:11:15.0000] <annevk>
Manishearth: nice article

[07:11:39.0000] <annevk>
Manishearth: we actually have some stuff where we enshrine code units

[07:11:55.0000] <annevk>
Manishearth: for better or worse

[07:13:12.0000] <annevk>
Manishearth: for your next article, write about grapheme clusters?

[07:13:32.0000] <annevk>
Manishearth: like, how stable is their definition, does it depend on language tagging, etc.

[07:14:08.0000] <annevk>
mathiasbynens: does JavaScript offer anything around grapheme clusters these days?

[07:50:47.0000] <mathiasbynens>
annevk: nope

[07:52:17.0000] <mathiasbynens>
annevk: littledan is working on a proposal though https://github.com/tc39/proposal-intl-segmenter

[07:53:37.0000] <annevk>
mathiasbynens: why not on String?

[07:59:35.0000] <mathiasbynens>
annevk: good question

[09:41:17.0000] <annevk>
Domain outage affecting html5.org et al should be fixed

[09:41:50.0000] <annevk>
Apologies for the downtime, it was due to a recent server move

[10:06:50.0000] <Manishearth>
annevk: yeah, JS is broken so we actually have to care about code points in the dom and stuff

[10:07:04.0000] <Manishearth>
well, the code points aren't because its broken

[10:07:34.0000] <Manishearth>
code points are because it's not swift. languages aren't broken because they're not swift :p

[10:07:52.0000] <Manishearth>
it is broken because of the whole deal with a surrogate being a character, paired or not. Screw that :p

[10:48:24.0000] <Manishearth>
annevk: not sure how much more I can write about GCs though. this article sort of was supposed to be about GCs :)

[11:01:48.0000] <annevk>
Manishearth: technical details, but I can look them up

[11:06:18.0000] <annevk>
Manishearth: also, units not points

[12:21:29.0000] <Manishearth>
annevk: yeah, code units


2017-01-16
[22:51:51.0000] <hsivonen>
annevk: if I put the fonts on resources.whatwg.org, should I use * or https://encoding.spec.whatwg.org in Access-Control-Allow-Origin?

[22:52:20.0000] <hsivonen>
annevk: I'm guessing the server doesn't support dynamic headers with rules like "any .whatwg.org"

[22:55:11.0000] <hsivonen>
hmm. is there a particular reason for the WHATWG deployment scripts to use Oracle Java instead of OpenJDK?

[00:15:41.0000] <MikeSmith>
hsivonen: if you mean the part that calls the HTML checker, no reason to use Oracle other than I knew the package name to get it to set the Oracle java as the default

[00:16:03.0000] <hsivonen>
MikeSmith: I see

[00:16:53.0000] <MikeSmith>
but I can figure out the OpenJDK equivalent

[00:17:17.0000] <hsivonen>
I didn't mean to suggest that there was a need to use OpenJDK. I was just curious.

[00:18:31.0000] <MikeSmith>
ok

[00:21:52.0000] <annevk>
hsivonen: just * I suppose

[00:22:35.0000] <annevk>
hsivonen: it's Apache, we could run a script, up to you

[00:25:33.0000] <zcorpan>
should module scripts only be available in secure contexts?

[00:25:50.0000] <annevk>
lol

[00:27:37.0000] <hsivonen>
annevk: ok

[00:29:36.0000] <hsivonen>
one would hope that Apache had a mod_cors by now

[00:30:41.0000] <ondras>
that would be cool

[00:31:22.0000] <zcorpan>
annevk: ?

[00:32:08.0000] <annevk>
zcorpan: just that CORS is already super controversial

[00:34:37.0000] <zcorpan>
annevk: heh yes. we had a discussion last week about requiring secure context for worklets, which had some opposition... but it seems to me the arguments against will be moot in 1-2 years

[00:47:46.0000] <annevk>
zcorpan: just do it

[00:48:23.0000] <annevk>
zcorpan: my main fault here is getting involved in the weekend

[00:48:51.0000] <annevk>
zcorpan: anxiety levels have steadily been rising, though hike through the snow this morning helped

[01:42:50.0000] <annevk>
hsivonen: even if Apache did, DreamHost having it installed would be a whole other thing

[01:47:44.0000] <hsivonen>
annevk: I'm quite hesitant to represent the visual information twice visually. It's cluttered enough as-is. I think I'll go with aria-label.

[01:48:28.0000] <hsivonen>
annevk: I'm now using a color scheme that's supposed to work for different forms of color blindness.

[01:55:22.0000] <annevk>
hsivonen: sweet

[02:43:34.0000] <annevk>
hsivonen: it's rather nice to have a compelling ARIA example

[03:18:06.0000] <hsivonen>
annevk: unclear how compelling this is as an ARIA example. It's unclear to me if the tables are actually useful for screen reader users.

[03:18:36.0000] <annevk>
Fair, I guess we still need to know if it actually works

[03:18:51.0000] <hsivonen>
annevk: so if the HTML files are generated by Travis, I guess we don't need a subdirectory to avoid directory clutter and could instead go for shorter URLs

[03:19:12.0000] <annevk>
hsivonen: okay

[03:19:23.0000] <annevk>
I'm happy with flat

[03:19:33.0000] <hsivonen>
annevk: ok. I submitted a PR with the fonts

[04:15:38.0000] <annevk>
hsivonen: https://bugzilla.mozilla.org/show_bug.cgi?id=1331351 was filed on top-level data URLs

[04:26:40.0000] <hsivonen>
annevk: nice

[04:27:07.0000] <hsivonen>
annevk: thanks for merging the fonts

[04:31:40.0000] <hsivonen>
annevk: how do I tell bikeshed to <link> to an extra css file?

[04:33:55.0000] <annevk>
hsivonen: not sure

[04:34:16.0000] <annevk>
hsivonen: why does the main resource need to link to it?

[04:35:38.0000] <hsivonen>
annevk: to reuse the same CSS for the legend colors so that they don't get out of sync

[04:38:34.0000] <hsivonen>
Using <style>@import for now, but that's sad

[04:40:42.0000] <annevk>
hsivonen: hopefully TabAtkins can help with that

[04:41:31.0000] <annevk>
I don't see anything in https://tabatkins.github.io/bikeshed/ that suggests it's possible

[04:53:28.0000] <tobie>
annevk: should "abort these steps" and "abort these sub-steps" end-up in the Infra standard?

[04:54:54.0000] <tobie>
annevk: the first one is obvious, the latter isn't super explicit as to whether control is returned to the super-steps or to the caller.

[04:55:54.0000] <tobie>
annevk: actually, "abort these steps" used in a sub-step isn't super explicit either.

[04:59:23.0000] <tobie>
annevk: should I file an issue?

[04:59:27.0000] <annevk>
tobie: please

[04:59:36.0000] <annevk>
tobie: or if you want to figure it out and provide a PR...

[04:59:50.0000] <annevk>
tobie: that's all part of the general English-algorithm-control flow question

[05:02:01.0000] <tobie>
annevk: no time for a PR this week. Sorry. :-/

[05:02:36.0000] <annevk>
tobie: no worries, having it tracked is good

[06:50:36.0000] <annevk>
botie: thank zcorpan for the reviews

[06:50:36.0000] <botie>
annevk: what?

[06:51:02.0000] <annevk>
botie: tell zcorpan thanks for the reviews

[06:51:02.0000] <botie>
will do

[07:13:10.0000] <TabAtkins>
hsivonen: Just put the <link> in. Bikeshed will shift it into the head for you automatically.

[07:14:14.0000] <botie>
zcorpan, at 2017-01-16 14:51 UTC, annevk said: thanks for the reviews

[07:28:48.0000] <annevk>
hsivonen: I'll probably review your second PR tomorrow

[07:54:06.0000] <jgraham>
Manishearth: non ascii in irssi you say? That sounds like deep magic.

[08:46:06.0000] <Manishearth>
jgraham: it sometimes works

[08:46:29.0000] <Manishearth>
old setup used to work. now it doesn't again

[09:50:37.0000] <MikeSmith>
jgraham:🕴 🚠  🦑

[09:51:05.0000] <MikeSmith>
irssi

[09:55:27.0000] <jgraham>
MikeSmith: Three question marks in diamonds?

[10:03:50.0000] <MikeSmith>
jgraham: https://gist.githubusercontent.com/sideshowbarker/8284404/raw/2c2bc535919e64fe2023ace0e451ea20f38a619d/irssi.png

[10:03:59.0000] <annevk>
jgraham: 👏

[10:05:55.0000] <jgraham>
MikeSmith: Seems implausible

[10:07:37.0000] <jgraham>
MikeSmith: Is that using screen? How did you get it working?

[10:09:21.0000] <MikeSmith>
tmux

[10:09:28.0000] <MikeSmith>
dunno if it works in screen

[10:11:27.0000] <MikeSmith>
I don’t think I have anything special set in my irssi config

[10:12:32.0000] <MikeSmith>
set -g default-terminal "screen-256color"

[10:12:44.0000] <MikeSmith>
in my tmux config

[10:14:56.0000] <jgraham>
Hmm, OK. nice to know that there is some setup that works

[10:15:04.0000] <jgraham>
Even if it's not the setup I have :(

[10:24:04.0000] <Domenic>
hsivonen: annevk: isn't ACAO: * set on a higher level .htaccess already? Or maybe that's only for *.spec.whatwg.org

[10:24:37.0000] <annevk>
Domenic: could be, yes, file an issue and I'll sort it out

[11:00:02.0000] <annevk>
Manishearth: so yeah, https://github.com/tc39/proposal-intl-segmenter does suggest grapheme clusters depend on language, which doesn't make them ideal as a unit

[11:00:12.0000] <annevk>
Manishearth: I wonder how Swift works around that then

[11:03:39.0000] <Manishearth>
annevk: weeeelll, UAX 29 EGCs do not depend on language

[11:03:53.0000] <Manishearth>
the spec explicitly says that you will want to tailor the algorithm to your use case

[11:04:00.0000] <Manishearth>
in case you need something more specific

[11:04:07.0000] <Manishearth>
annevk: swift implements UAX 29. period

[11:05:04.0000] <Manishearth>
annevk: so for example, consonant clusters in my language are 2 graphemes by UAX 29, even though they're logically one, because depending on the font they may render as two (there are equivalent ways of rendering them, fonts usually render as one). I put in a proposal to change that though.

[11:05:32.0000] <Manishearth>
word segmentation has similar issues, UAX 29 doesn't try to handle Thai

[11:06:12.0000] <gsnedders>
/me would love to see a spec for that

[11:06:23.0000] <Manishearth>
for thai?

[11:06:24.0000] <gsnedders>
y'know, with citations like [thai-dictionary]

[11:06:30.0000] <Manishearth>
yeah

[11:06:44.0000] <gsnedders>
so yeah, for Thai

[11:14:26.0000] <annevk>
Manishearth: makes me wonder what the JS proposal is doing

[11:15:10.0000] <annevk>
Something for tomorrow I suppose, thanks for the answer

[11:40:18.0000] <Manishearth>
annevk: they're trying to support all the tailorings

[11:40:20.0000] <Manishearth>
an interesting idea

[11:40:23.0000] <Manishearth>
this will not end well

[11:40:26.0000] <Manishearth>
but an interesting idea

[11:40:58.0000] <Manishearth>
something I wish we had good libraries for. but it will be hell making those libraries

[11:50:52.0000] <annevk>
Manishearth: maybe you can give them feedback

[11:51:13.0000] <annevk>
Manishearth: happy to help if that gets difficult

[12:16:00.0000] <Manishearth>
annevk: "graphemes" isn't the right word to use there

[12:16:16.0000] <Manishearth>
for granularity

[12:27:39.0000] <Manishearth>
/me will file an issue

[12:32:12.0000] <annevk>
🙌

[12:32:30.0000] <Manishearth>
yes, unicode lego to you too

[12:32:35.0000] <Manishearth>
;p

[13:01:15.0000] <annevk>
Unicode Lego would be great

[13:52:14.0000] <smaug____>
annevk: so URLSearchParams in browsers have ctor taking URLSearchParams as param

[13:52:21.0000] <smaug____>
was that at some point in the spec

[13:52:34.0000] <smaug____>
and is it not needed if URLSearchParams' stringifier is implemented?

[13:53:18.0000] <smaug____>
annevk: feel free to answer in https://bugzilla.mozilla.org/show_bug.cgi?id=1330678

[14:37:50.0000] <tobie>
Is there a shortcut to say that an interface must inherit from A or from an interface that itself inherits from A?

[14:39:51.0000] <tobie>
C must be one of A's inherited interfaces?

[14:40:25.0000] <tobie>
I find that painful to read.

[14:46:16.0000] <tobie>
Obviously, it's the minute I right this down here that I realize I've been reading the definition of inherited interfaces incorrectly all along. :-/

[14:46:30.0000] <tobie>
* I write

[14:46:49.0000] <tobie>
/me needs to hit the sack, apparently.


2017-01-17
[00:08:46.0000] <annevk>
I feel somewhat conflicted with whether to respond to https://github.com/w3c/dom/issues/91

[00:09:03.0000] <annevk>
It seems like publishing a WD that's essentially the same as the broken REC will waste a lot of folks their time looking through it

[02:43:35.0000] <No_se>
Hello! Are you running the Nu Html checker service on w3.org?

[02:44:36.0000] <No_se>
I just created an issue on github and wonder if I got the markup right.

[02:53:40.0000] <Ms2ger>
MikeSmith, ^

[02:58:45.0000] <No_se>
After simply copy pasting from the github issue into the validator: Nvm the markup question. Just worry about the issue ;-)

[03:03:27.0000] <hsivonen>
so hard to write commit messages without a trailing period for the WHATWG when m-c has taught me to use a trailing period

[03:14:05.0000] <zcorpan_>
hsivonen: you can let the merger worry about the commit message :-)

[03:14:59.0000] <hsivonen>
zcorpan_: ok

[03:35:12.0000] <MikeSmith>
No_se: yeah I run the W3C instance of the Nu Html Checker

[03:35:25.0000] <MikeSmith>
No_se: do you mean https://github.com/validator/validator/issues/446?

[03:35:36.0000] <No_se>
yes

[03:36:02.0000] <No_se>
I can give a live URL with the issue, if that's faster than my minimal example

[03:36:48.0000] <No_se>
https://www.videolan.org/vlc/download-ubuntu.html but you do not want to look at that code...

[03:37:14.0000] <MikeSmith>
well regardless the answer is that the checker is behaving as expected

[03:37:47.0000] <MikeSmith>
you can't put a <ul> tag as a child if a <p> tag in your markup

[03:38:04.0000] <MikeSmith>
it will not end up in the DOM that way after parsing

[03:38:13.0000] <No_se>
Sorry fir the noise then. Gonna check the spec again

[03:38:28.0000] <MikeSmith>
well this is not completely obvious from the spec

[03:38:54.0000] <MikeSmith>
it causes confusion regularly

[03:39:12.0000] <MikeSmith>
and the error message from the checker for this case it not very helpful

[03:40:05.0000] <MikeSmith>
but what happens is, the parser closes that <p> element in the DOM before it starts the <ul> element

[03:41:07.0000] <No_se>
So, giving a message at opening the <p> woud be the way to go for the validator?

[03:41:09.0000] <MikeSmith>
so then later when it comes across the closing </p> tag after the <ul> element, it says “No p element in scope but a p end tag seen”

[03:41:45.0000] <MikeSmith>
we can’t easily make the checker emit an additional message in this case

[03:42:08.0000] <MikeSmith>
well we could but it would add unnecessary noise for other normal cases

[03:42:39.0000] <MikeSmith>
because closing </p> tags are not required in many normal cases

[03:42:58.0000] <MikeSmith>
well even a lot of people would consider this <p><ul> a normal case

[03:43:25.0000] <MikeSmith>
they would just not have a closing </p> anywhere in their markup in that case

[03:44:00.0000] <MikeSmith>
arguably you can make your life easier by not using closing </p> tags anywhere

[03:44:18.0000] <MikeSmith>
not closing </li> tags or others that aren’t strictly required

[03:45:03.0000] <No_se>
So consider <p> similar as <br /> and be done with it?

[03:45:09.0000] <MikeSmith>
yup

[03:45:16.0000] <MikeSmith>
that is what I do personally

[03:45:29.0000] <MikeSmith>
that is was <p> was originally when HTML was created

[03:46:04.0000] <AutomatedTester>
what is the state of web components these days?

[03:46:05.0000] <MikeSmith>
it was defined as a “paragraph break” when it was created

[03:46:42.0000] <MikeSmith>
No_se: the notiion of the p element being a container was something bolted on later

[03:47:23.0000] <MikeSmith>
No_se: anyway, others would disagree with me about whether you should use </p> end tags or not

[03:47:50.0000] <MikeSmith>
AutomatedTester: supported quite well in Blink and WebKit

[03:48:09.0000] <AutomatedTester>
MikeSmith: ok, and the spec is "stable" ?

[03:48:15.0000] <MikeSmith>
yes, stable

[03:49:12.0000] <MikeSmith>
Apple and Google have gotten past the previous big disagreements they had, and what is in the spec now represents strong consensus

[03:50:02.0000] <MikeSmith>
modulo normal open issues where discussion is still going on

[03:50:37.0000] <AutomatedTester>
yea, I last heard about the disagreements and wasnt sure if they had been cleared up and if the spec was close to what was agreed

[03:50:39.0000] <MikeSmith>
and Mozilla and Microsoft also supportive of current spec, and actively worked on getting it made

[03:50:39.0000] <AutomatedTester>
MikeSmith: thank you!

[03:50:43.0000] <MikeSmith>
cheers

[04:01:44.0000] <hsivonen>
is "dismiss review" the right UI to use for indicating that all issues in the review have been addressed?

[04:02:04.0000] <hsivonen>
doesn't sound like it but that UI removes the red X

[04:07:14.0000] <Ms2ger>
It's what I use; possibly the intended workflow is that the reviewers does a new review that's marked as approved

[04:11:23.0000] <annevk>
Yeah I think the reviewer can hit approve

[04:11:39.0000] <annevk>
Or dismiss themselves

[04:41:01.0000] <zcorpan>
MikeSmith: the real paragraph break is to always use </p>, never <p> :-D

[04:42:54.0000] <zcorpan>
No_se: not using an initial <p> or a <p> after a list or a table seems like it would give less control or unexpected results with styling

[04:44:01.0000] <zcorpan>
like p { margin: 2em 0 } would not apply the extra spacing to text not in p

[05:51:58.0000] <MikeSmith>
annevk: so I made some changes to the MDN “HTTP access control (CORS)” both to add a note about the WebKit “non-standard” header-values thing and also to fix some other inaccuracies and bring it closer in sync with the current spec

[05:52:21.0000] <annevk>
MikeSmith: cool

[05:55:44.0000] <MikeSmith>
annevk: if you have time to sanity-check the changes, the content is in the https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS?document_saved=true#Simple_requests section and in the https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS?document_saved=true#Preflighted_requests

[05:56:18.0000] <MikeSmith>
and the info is essentially duplicated in those sections

[05:56:21.0000] <annevk>
/me looks

[05:57:13.0000] <MikeSmith>
but that duplication is because, from seeing Stackoverflow questions, some people read one of those sections but not the other

[05:57:23.0000] <annevk>
MikeSmith: I kinda dislike we still call them "preflight requests" although I guess they don't really have a name anymore in Fetch

[05:57:44.0000] <MikeSmith>
well

[05:58:00.0000] <MikeSmith>
Fetch also does not have “simple requests”

[05:58:08.0000] <annevk>
sorry, that's what I meant

[05:58:24.0000] <MikeSmith>
yeah I am reluctant to change that right now at least

[05:58:26.0000] <annevk>
preflight requests are still a thing, it's simple requests that's kinda wrongish

[05:58:32.0000] <MikeSmith>
right

[05:58:45.0000] <MikeSmith>
but that section is linked to in quite a lot of places I think

[05:58:49.0000] <annevk>
conditions look okay from a quick skim

[05:58:53.0000] <MikeSmith>
OK

[05:59:05.0000] <hsivonen>
as seen in zcorpan's review of my PR, Python's narrow vs. wide build distinction is even worse than I thought

[05:59:40.0000] <annevk>
Yeah I ran into that when writing IDNA tests

[06:00:02.0000] <annevk>
Python is rather terrible when it comes to Unicode

[06:04:00.0000] <annevk>
hsivonen: I might be able to look later today again, but might take a little longer today

[06:04:12.0000] <annevk>
hsivonen: kid was unexpectedly sick

[06:04:19.0000] <hsivonen>
no hurry

[06:15:40.0000] <MikeSmith>
annevk: is there actually any equivalent term for “simple request” in the current Fetch spec?

[06:20:53.0000] <MikeSmith>
oh I see you said earlier, “although I guess they don't really have a name anymore in Fetch”

[06:27:46.0000] <Ms2ger>
An interesting find: https://bitbucket.org/prestocore-fan/presto/

[06:28:52.0000] <MikeSmith>
holy god

[06:30:30.0000] <MikeSmith>
/me clones a copy before it disappears

[06:30:52.0000] <MikeSmith>
zcorpan: ⬆

[06:45:23.0000] <zcorpan>
hsivonen: per https://docs.python.org/3/whatsnew/3.3.html#functionality a possibility would be to switch to 3.3

[08:03:37.0000] <wanderview>
annevk: I updated the doodle for the fetch meeting, but unfrotunately my schedule is not very flexible due to taking my kids to school in the monring

[08:03:46.0000] <wanderview>
feel free to schedule without me if that makes sense

[08:27:46.0000] <annevk>
wanderview: the doodle isn't flexible for similar reasons, hopefully it'll work out

[08:28:14.0000] <wanderview>
well, I noticed I am the exact opposite time availability with other people on there :-\

[08:37:47.0000] <annevk>
Oh 😞

[08:38:54.0000] <annevk>
For Chrome bugs, is there a URL to file a new one that puts it in Blink triage? rbyers, maybe you know?

[08:40:31.0000] <Domenic>
annevk: mostly it's a matter of adding appropriate components. Does your UI allow that?

[08:40:39.0000] <Domenic>
If not we should probably add you to some list that does.

[08:42:53.0000] <annevk>
Domenic: I can, but looking to reduce clicks

[08:43:07.0000] <annevk>
Domenic: and not forgetting about it

[08:44:35.0000] <Domenic>
Hmm I see. Maybe there is a URL that pre-fills form fields but that'll always have the disadvantage of requiring an extra round of triage: Blink -> more specific component via human triage -> actual owner

[08:45:04.0000] <Domenic>
Seems ideal if you can figure out the more specific component yourself so it gets routed to the appropriate team immediately instead of going through the first round

[09:03:12.0000] <gsnedders>
MikeSmith: I presume you have no intention to extend validator.nu to check CSS too?

[09:30:45.0000] <annevk>
Oh, someone translated the DOM4 document into Russian

[09:31:02.0000] <annevk>
That's kinda sad as the document is way out of date

[09:48:03.0000] <nox>
annevk: In Russia, DOM outdates you.

[09:49:08.0000] <annevk>
In Russia, W3C DOM is relevant.

[09:49:44.0000] <nox>
Ah ah.

[09:49:55.0000] <annevk>
But really, the translator got duped

[09:50:47.0000] <nox>
Yeah that sucks. :(

[09:53:21.0000] <tantek>
annevk, if you can share with me the links (out of date doc, translation, any apparent context about how/why it happened), I'll document it as another problem W3C TR is causing

[10:00:30.0000] <annevk>
tantek: https://lists.w3.org/Archives/Public/www-dom/2017JanMar/0009.html https://lists.w3.org/Archives/Public/www-dom/2017JanMar/0010.html https://lists.w3.org/Archives/Public/www-dom/2017JanMar/0011.html

[10:01:41.0000] <tantek>
tx

[11:00:48.0000] <Domenic>
I continue to be amused by bugs of the form "when arbitrary script runs inside my page, feature X is no longer secure!"

[11:06:09.0000] <hsivonen>
zcorpan: does Apple ship Python 3?

[11:06:32.0000] <zcorpan>
hsivonen: don't think so

[11:07:39.0000] <hsivonen>
zcorpan: Python 3 in general is a bad idea. It would be better for the project formerly known as Python 2.8 to eliminate the narrow vs. wide variability

[11:22:32.0000] <rbyers>
annevk, domenic: regarding filing blink bugs - non-project-members get sent to the wizard by default (which anyone can reach at http://crbug.com/wizard) which, once you specify it's a developer issue, let's you pick the component which gets it directly to the right team.

[11:23:10.0000] <rbyers>
But for you that's probably a couple more clicks than you'd like.  Do you already have chromium edit-bugs access to set your own labels?  If not, I can give you that.

[11:23:42.0000] <rbyers>
Or I can give you a URL to file bugs with a pre-specified set of labels.  Eg. If it has Component>Blink then it'll be triaged by our (pretty effective IMHO) web platform triage process.

[11:24:23.0000] <rbyers>
(Crap, that reminds me I'm on triage duty today for such bugs - better get working on that!)

[12:03:10.0000] <annevk>
rbyers: I have edit-bugs, would like that link

[12:03:52.0000] <annevk>
rbyers: at some point an API maybe, could be nice coupled with a GitHub bot…

[12:32:52.0000] <tobie>
jyasskin: wondering if you were back

[12:35:20.0000] <tobie>
rbyers: would love one too for WebIDL: https://github.com/heycam/webidl#breaking-changes-should-be-filed-against

[12:36:54.0000] <jyasskin>
tobie: I'm back as of today.

[12:37:21.0000] <tobie>
jyasskin: oh really? wow. well, good luck with those emails. :D

[12:37:31.0000] <jyasskin>
:)

[12:37:49.0000] <tobie>
jyasskin: should I send help?

[12:38:10.0000] <jyasskin>
tobie: I've ordered a shovel, but it's held up in the PDX ice storm.

[12:38:27.0000] <tobie>
jyasskin: darn. poor timing.

[12:39:21.0000] <tobie>
jyasskin: would like to catch up on permissions. Not urgent. But sooner would be better than later.

[12:40:37.0000] <jyasskin>
tobie: Sounds good.

[12:40:48.0000] <tobie>
jyasskin: I'll send you and email with some details and maybe you could spare an hour next week to discuss those?

[12:41:57.0000] <jyasskin>
tobie: I should be able to spare an hour this week. What time zone are you in again? Does tomorrow work?

[12:42:10.0000] <tobie>
GMT + 1

[12:42:45.0000] <tobie>
jyasskin: So 9 hours ahead of you, I suppose.

[12:43:16.0000] <tobie>
Yeah tomorrow would work.

[12:44:11.0000] <tobie>
jyasskin: noon?

[12:44:40.0000] <jyasskin>
My noon, your 9pm? Works for me.

[12:46:03.0000] <tobie>
jyasskin: awesome.


2017-01-18
[16:10:40.0000] <rbyers>
annevk Tobie: chromium bug tracker has an API here: https://chromium.googlesource.com/infra/infra/+/master/appengine/monorail/doc/api.md

[16:11:34.0000] <rbyers>
annevk: documentation on crafting a URL for pre-filling a new bug form is here: https://www.chromium.org/issue-tracking/creating-a-bug-template-url

[16:12:19.0000] <rbyers>
That's what we use on chromestatus.com for filing a bug - really simple to use and just one extra click to confirm the bug submission.

[16:15:51.0000] <rbyers>
Note that you don't need edit-bugs to set arbitrary labels when using the URLs - so you can just auto-generate appropriate links that fill in everything and anyone can click, login with a Google account, and submit.

[22:47:28.0000] <MikeSmith>
gsnedders: I have no objection to extending the checker to add CSS support, if somebody else wanted to do the work. I have no plans to work on it myself.

[00:06:59.0000] <annevk>
Domenic: rbyers: is there a more specific component than Blink for URL API issues? https://bugs.chromium.org/p/chromium/issues/detail?id=682143

[00:07:17.0000] <annevk>
rbyers: thanks btw

[00:10:44.0000] <annevk>
Domenic: rbyers: found Blink>Network, oops

[00:21:29.0000] <hsivonen>
hmm. Travis jobs no longer starting on my pushes to encoding/visualization

[00:22:56.0000] <hsivonen>
TabAtkins: Thanks. should I have found a mention of the magic move of <link> in bikeshed docs?

[00:24:55.0000] <annevk>
hsivonen: looking into Travis

[00:34:10.0000] <annevk>
hsivonen: the narrow Python build stuff is causing massive amount of NFC errors again

[00:34:43.0000] <annevk>
hsivonen: I suspect that might be why Travis gave up

[00:34:51.0000] <annevk>
hsivonen: log got too large or something

[00:40:40.0000] <hsivonen>
annevk: weird. I diffed the output and there wasn't supposed to be a difference

[00:41:18.0000] <annevk>
hsivonen: maybe because Travis uses a different Python?

[00:41:49.0000] <annevk>
I'm surprised I never hit this problem with the Python tools I wrote for the Unicode standard

[00:42:08.0000] <annevk>
Because they also output characters and some of those are > 0xFFFF I think

[00:42:46.0000] <hsivonen>
annevk: which travis logs are you looking at

[00:43:56.0000] <annevk>
hsivonen: https://travis-ci.org/whatwg/encoding/builds/192959422

[00:44:08.0000] <annevk>
hsivonen: but it seems to have passed, since the NFC stuff is only a warning

[00:44:59.0000] <annevk>
hsivonen: it does seem that rebooting Travis here and there made things working again though for whatwg/encoding

[00:46:34.0000] <hsivonen>
annevk: so weird that the change I made interferes in any way with anything other than big5

[00:47:42.0000] <annevk>
hsivonen: it might be that you never fixed the NFC issue since it's not fatal

[00:47:59.0000] <hsivonen>
annevk: good point!

[00:48:19.0000] <annevk>
MikeSmith: I wonder if we should configure the checker for specs to be fatal for warnings

[00:48:42.0000] <annevk>
MikeSmith: perhaps with some flag for opt-out if we have any specs today with "legit" warnings

[00:48:45.0000] <hsivonen>
annevk: well, first we should consider if we *want* this NFC warning to be fatal to this stuff

[00:49:27.0000] <hsivonen>
fwiw, I just tried using the new visualization for encoding_rs development, and they are much nicer to use than the old ones

[00:49:38.0000] <hsivonen>
I so regret not making them this nice earlier

[00:50:41.0000] <annevk>
hsivonen: sure, but in general I wouldn't want non-NFC

[00:51:30.0000] <hsivonen>
I think at this point, it's necessary to figure out what exactly the NFC violations are

[00:53:10.0000] <MikeSmith>
annevk: I guess I would need to add a new option to the command-line checker to make it exit non-zero if there are warnings

[00:54:04.0000] <MikeSmith>
I think right now the way I have it set up it exits non-zero if there are any errors but exits zero if there are only warnings (or no messages at all)

[00:54:11.0000] <MikeSmith>
but it is doable

[00:54:20.0000] <annevk>
We should probably have it for Bikeshed too since I just noticed again with URL that I almost landed something with Bikeshed errors

[00:54:21.0000] <hsivonen>
annevk: the PUA warnings we shouldn't fix by changing the visualizations

[00:54:29.0000] <annevk>
Bikeshed LINK ERRORS that is, which are not fatal

[00:55:08.0000] <hsivonen>
remaining NFC is all CJK

[00:55:29.0000] <hsivonen>
I wonder if it's about compatibility ideographs or something

[00:55:39.0000] <hsivonen>
/me looks up the definition of NFC

[00:55:58.0000] <annevk>
hsivonen: a small worry I have is that some warnings are okay while others are not, but I guess we can check the logs whenever something sensitive is being touched

[01:02:14.0000] <hsivonen>
annevk: so. the first case I happened to look at is the ångström sign...

[01:05:06.0000] <hsivonen>
annevk: the next one is a compatibility ideograph

[01:08:52.0000] <hsivonen>
annevk: so I only solved the non-NFCness of combining characters but not singletons

[01:09:09.0000] <hsivonen>
still trying to find spec text saying that compatibility ideographs are singletons

[01:11:45.0000] <hsivonen>
still failing to find spec text, but Wikipedia and the W3C i18n wiki suggest that compatibility ideographs are singletons

[01:12:25.0000] <hsivonen>
annevk: considering the use cases for these tables, I don't think we should normalize away singleton distinctions for clipboard and search operations

[01:13:15.0000] <hsivonen>
for PUA, there's even the use case of seeing if they match something interesting in system fonts

[01:13:48.0000] <hsivonen>
e.g. on Ubuntu, PUA on the last row of gbk gets radical glyphs, which is an interesting finding

[01:14:24.0000] <hsivonen>
(hmm. should Radical Glyphs be added to WHATWG band names?)

[01:14:57.0000] <annevk>
(yes)

[01:18:40.0000] <hsivonen>
(done)

[01:55:32.0000] <tobie>
Thanks rbyers. tracking here: https://github.com/heycam/webidl/issues/267

[02:43:25.0000] <nox>
jgraham, hsivonen: Around? Have some questions about HTML and script.onerror.

[02:48:06.0000] <jgraham>
nox: I'm here, but I don't know how much I know about this

[02:49:25.0000] <nox>
jgraham: https://github.com/w3c/web-platform-tests/blob/master/html/semantics/scripting-1/the-script-element/script-onerror-insertion-point-2.html

[02:49:39.0000] <nox>
jgraham: I think that test doesn't agree with the spec.

[02:50:48.0000] <nox>
Because at this point, the only way to make .write do nothing is to use https://html.spec.whatwg.org/multipage/webappapis.html#document.write():ignore-destructive-writes-counter and it is not incremented when parsing a script with an invalid src attribute.

[02:53:09.0000] <Ms2ger>
Is the intention of the test that .write() does nothing?

[02:53:30.0000] <Ms2ger>
I thought it was that .write() replaces the page

[02:56:03.0000] <jgraham>
nox: (it seems like bz was involved with the bug, so my prior is strong for the test being correct)

[02:57:02.0000] <jgraham>
write shouldn't do nothing. The only thing that isn't clear to me is whether it's certain that error will fire after the document finishes loading, which seems to be required for the pass condition

[02:57:19.0000] <nox>
Ms2ger: If it replaces the page, then all the elements are removed from the document,

[02:57:35.0000] <nox>
and thus document.write won't write in the parent.

[02:57:46.0000] <jgraham>
It doesn't write in the parent?

[02:58:00.0000] <Ms2ger>
Are we looking at the same test?

[02:58:06.0000] <nox>
Err oh right, misread the support file.

[02:59:03.0000] <nox>
jgraham: It can't be fired after the document finished loading AFAICT.

[02:59:13.0000] <nox>
jgraham: I'm pretty sure this is about the counter I linked.

[03:00:52.0000] <yoav>
annevk: Friendly ping RE https://github.com/whatwg/fetch/pull/442 :)

[03:02:00.0000] <annevk>
yoav: it's blocked on the test

[03:02:08.0000] <annevk>
yoav: tests get merged first

[03:02:11.0000] <jgraham>
nox: So, the pass condition seems to be that the iframe document is entirely replaced by the string "text"

[03:02:50.0000] <nox>
AH

[03:02:55.0000] <nox>
Ok.

[03:03:09.0000] <yoav>
annevk: missed your comment on the test PR. Addressing

[03:04:45.0000] <annevk>
Cool, about to take a break, will have time later I think

[03:04:55.0000] <nox>
jgraham: Ok, next question. :)

[03:05:19.0000] <jgraham>
…

[03:05:33.0000] <nox>
jgraham: What is https://github.com/w3c/web-platform-tests/blob/master/old-tests/submission/Opera/script_scheduling/119.html about? Isn't there a race condition there?

[03:06:23.0000] <nox>
AFAIK the script when included in the document becomes an asap in order script, and there is nothing that forbids these to be executed before DOMContentLoaded is fired, right?

[03:07:56.0000] <jgraham>
nox: I'll read it, but I'm about 98% sure from what you just said that the spec changed after this test was written

[03:08:11.0000] <nox>
jgraham: Ok.

[03:10:41.0000] <jgraham>
(although gecko seems to pass the test reliably)

[03:11:12.0000] <nox>
Yeah.

[03:11:57.0000] <jgraham>
(also Chrome)

[03:12:25.0000] <nox>
Yeah all of them, I just don't understand why it's supposed to work.

[03:15:47.0000] <nox>
jgraham: https://html.spec.whatwg.org/multipage/syntax.html#the-end Is step 5 supposed to wait for step 4 to finish?

[03:16:04.0000] <hsivonen>
nox: I take it that jgraham already covered what you wanted to ask me?

[03:16:10.0000] <nox>
hsivonen: Yep, thanks.

[03:16:29.0000] <nox>
Err, is step 5 supposed to be run after the event is fired, or after a task has been queued to fire the event?

[03:17:21.0000] <jgraham>
nox: After the event is fired

[03:17:27.0000] <nox>
Ok.

[03:17:35.0000] <jgraham>
It doesn't say "queue a task to"

[03:17:48.0000] <nox>
jgraham: "Queue a task to run the following substeps:"

[03:17:59.0000] <jgraham>
Oh, I can't read

[03:18:01.0000] <jgraham>
OK, it does

[03:18:41.0000] <jgraham>
But the reaon this test should pass is that the script takes 1s to load and it's assumed that 1s is enough time to finish parsing the document and dispatch a DOMContentLoaded event

[03:19:01.0000] <jgraham>
If servo doesn't manage that, you probably want to do some perf work :)

[03:19:26.0000] <nox>
Mmmh.

[03:19:30.0000] <nox>
/me compiles in release mode.

[03:20:23.0000] <jgraham>
If you need to increase the delay a bit for the test to be stable in debug mode that's OK, but I think that it's a reasonable test in general

[03:21:42.0000] <nox>
jgraham: Another question,

[03:21:52.0000] <nox>
jgraham: why do we call t.done() in the DOMContentLoaded event handler?

[03:22:30.0000] <jgraham>
hah

[03:22:36.0000] <jgraham>
That is totally broken

[03:22:40.0000] <nox>
Ok. :)

[03:22:47.0000] <nox>
Will reindent and fix that.

[03:22:54.0000] <nox>
The indentation in that file is post-modern art.

[03:24:14.0000] <Ms2ger>
/me blames jgraham 

[03:25:12.0000] <jgraham>
/me blames emacs or hallvord

[03:32:36.0000] <smaug>
foolip: you might know, why blink has different CSS for dialog::backdrop than what the spec has

[03:33:25.0000] <smaug>
https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/css/html.css?q=html.css&sq=package:chromium&dr&l=1090 vs https://html.spec.whatwg.org/#flow-content-3

[03:34:02.0000] <nox>
jgraham: I wonder if the trickle even matters.

[03:34:56.0000] <nox>
jgraham: "the end" should execute just afterwards the </script>, and the parser never gets suspended, so supposedly no event had the opportunity to be processed, right?

[03:37:05.0000] <nox>
Oh but the asap in order script can get executed between the moment DOMContentLoaded is queued and the moment it is fired, I guess.

[03:37:18.0000] <jgraham>
Yeah

[03:38:07.0000] <nox>
jgraham: I guess I have a bigger problem given trickle(d5) didn't help. :)

[03:38:07.0000] <zcorpan>
annevk: what is intended to go into branch-snapshots/ ? with hsivonen's PR it's only visualization/ in that directory, the rest is under commit-snapshots

[03:38:38.0000] <jgraham>
nox: Hurrah, testing worked! :)

[03:40:54.0000] <zcorpan>
annevk: never mind, it makes sense to me now

[04:07:52.0000] <foolip>
smaug: I have noticed this too while working on Fullscreen. It includes some of https://fullscreen.spec.whatwg.org/#user-agent-level-style-sheet-defaults

[04:07:55.0000] <nox>
jgraham: I was just... waiting for asap scripts to process the deferred ones.

[04:08:05.0000] <nox>
Obviously that wasn't going to make that test pass.

[04:08:11.0000] <smaug>
foolip: ah, ok

[04:08:59.0000] <foolip>
smaug: I thought I added a TODO somewhere, but maybe I didn't after determining the difference shouldn't be observable. It is possible that something is still observably wrong here.

[04:09:09.0000] <foolip>
let me know if you find it :)

[04:10:49.0000] <jgraham>
nox: :)

[04:24:31.0000] <zcorpan>
hsivonen: "Private Use, code point follows immediately the code point of previous pointer" and "Four bytes in UTF-8, code point follows immediately the code point of previous pointer" appear to be unused

[04:25:09.0000] <hsivonen>
shouldn't be

[04:25:11.0000] <hsivonen>
/me looks

[04:26:01.0000] <hsivonen>
zcorpan: for the former, see bottom right of https://encoding.spec.whatwg.org/branch-snapshots/visualization/gb18030.html

[04:26:57.0000] <hsivonen>
zcorpan: for the latter, see 5 down and 5 right from the first mapped cell at https://encoding.spec.whatwg.org/branch-snapshots/visualization/big5.html

[04:28:08.0000] <zcorpan>
hsivonen: ah. i grep'ed for the same order of the classes as they were in index.html

[04:31:25.0000] <zcorpan>
hsivonen: did you check color contrast between text and background? "Private Use, code point follows immediately the code point of previous pointer" fails in http://webaim.org/resources/contrastchecker/

[04:31:37.0000] <hsivonen>
zcorpan: I did not

[04:32:10.0000] <hsivonen>
zcorpan: would white text on that bg pass?

[04:32:39.0000] <zcorpan>
hsivonen: passes AA, fails AAA

[04:33:10.0000] <hsivonen>
zcorpan: I'll flip the text color then

[04:34:42.0000] <hsivonen>
zcorpan: done

[04:35:11.0000] <zcorpan>
👍

[05:06:00.0000] <quarky_>
Are any of these users bots?

[05:06:33.0000] <quarky_>
...

[05:06:40.0000] <quarky_>
this is a dead chat isn't it

[05:06:41.0000] <quarky_>
hahahahaha

[05:06:52.0000] <quarky_>
probably not

[05:07:14.0000] <quarky_>
What's really sad is I came to ask a question but now I am talking to myself.

[05:07:21.0000] <No_se>
Just ask

[05:07:28.0000] <quarky_>
no se

[05:07:57.0000] <quarky_>
how many of you ppl here have read the https://html.spec.whatwg.org/print.pdf

[05:09:34.0000] <quarky_>
also

[05:09:59.0000] <No_se>
I am not taking part in user surveys. You probably should go and ask a real question. So what bothers you?

[05:10:05.0000] <quarky_>
is the w3c affiliated in any form with whatwg

[05:10:08.0000] <quarky_>
html

[05:10:13.0000] <quarky_>
its different than i remember it

[05:10:21.0000] <quarky_>
so many more parameters you can use

[05:10:35.0000] <quarky_>
the syntax hasn't change has it?

[05:11:08.0000] <annevk>
quarky_: W3C isn't really affiliated, but there's overlap in the groups of people

[05:11:23.0000] <annevk>
quarky_: syntax has definitely changed due to the addition of new elements (if we're talking relative to HTML4)

[05:11:35.0000] <quarky_>
okay ty @annevk

[07:21:02.0000] <annevk>
jgraham: MikeSmith: for https://github.com/w3c/web-platform-tests/pull/4556 no OWNERS were identified

[07:21:16.0000] <MikeSmith>
/me wakes up

[07:23:31.0000] <gsnedders>
annevk: I presume tobie's bot didn't run for whatever reason

[07:24:19.0000] <MikeSmith>
yeah seems so

[07:24:44.0000] <MikeSmith>
given the fetch/OWNERS file is still there

[07:25:25.0000] <gsnedders>
didn't get any labels either

[07:25:33.0000] <MikeSmith>
ah

[07:25:41.0000] <MikeSmith>
yeah so definitely something borked tehre

[07:26:46.0000] <MikeSmith>
the admin UI at https://github.com/w3c/web-platform-tests/settings/hooks isn’t showing any red

[07:27:23.0000] <MikeSmith>
I wonder is tobie bot https://wpt-ganesh.herokuapp.com/github-hook

[07:27:39.0000] <MikeSmith>
if so there are no indications there of any failures

[07:28:56.0000] <tobie>
what's up?

[07:29:17.0000] <gsnedders>
tobie:  https://github.com/w3c/web-platform-tests/pull/4556

[07:29:26.0000] <gsnedders>
tobie: has no labels, nor owners comment

[07:30:12.0000] <tobie>
looking at the logs

[07:32:23.0000] <tobie>
weird

[07:33:11.0000] <tobie>
gsnedders: https://gist.github.com/tobie/45bf422175a78d536e1ea608b602fd38

[07:35:52.0000] <annevk>
moz://a ugh

[07:36:08.0000] <annevk>
I guess at least with https://github.com/whatwg/url/pull/185 it won't parse into moz://a/

[07:36:16.0000] <annevk>
mozillai

[07:37:04.0000] <annevk>
I suppose I should add a test specifically for that input

[07:37:13.0000] <annevk>
Or example

[07:38:53.0000] <tobie>
gsnedders: something didn't work on that occasion.

[07:39:26.0000] <tobie>
gsnedders: I don't know what as my logging is limited

[07:39:45.0000] <tobie>
gsnedders: can you ping me if you see more issues?

[07:40:30.0000] <gsnedders>
tobie: idk, annevk noticed it aboved, I just passed it on :)

[07:44:27.0000] <tobie>
gsnedders: found it

[07:44:40.0000] <tobie>
https://www.irccloud.com/pastebin/bhDj5y90/

[07:46:30.0000] <jgraham>
annevk: Beautiful, isn't it

[07:46:52.0000] <annevk>
jgraham: very classy

[07:47:51.0000] <annevk>
Oh and all the protocol references. It's just the scheme folks...

[07:52:08.0000] <nox>
annevk: Ah ah.

[07:52:33.0000] <nox>
annevk: The video is self-trolling, in case you didn't see.

[07:53:40.0000] <nox>
annevk: https://twitter.com/IAmNotCyril/status/821714771514900480

[07:53:49.0000] <nox>
"Me in front of the new logo"

[07:55:41.0000] <annevk>
heh

[07:56:04.0000] <annevk>
Oh well, we also landed a search box in <select> today, so I'm still good

[07:56:23.0000] <nox>
annevk: And I refactored script loading without making any more tests fail, woo.

[08:02:00.0000] <TabAtkins>
hsivonen: I mean, link in body works just fine. I only move it for validation purposes.

[08:11:49.0000] <MikeSmith>
the checker allows link in body these days

[08:12:14.0000] <MikeSmith>
well not for all cases but in line with what the spec now allows

[08:12:42.0000] <MikeSmith>
and what the spec allows for link has changed significantly over the last several months

[08:20:16.0000] <JakeA>
Anyone running Windows, have Chrome Canary, & not mind running a test that'll 100% the CPU for up to 10 mins?

[08:20:32.0000] <boogyman>
win 8.1

[08:21:11.0000] <JakeA>
boogyman: that'll do! http://output.jsbin.com/jirinuf/quiet - the results will appear in the console. It's finished when it logs out 10 values

[08:23:50.0000] <boogyman>
only using 15 - 40% cpu

[08:24:10.0000] <JakeA>
probably single thread

[08:29:14.0000] <boogyman>
completed, do you want the output data?

[08:30:37.0000] <MikeSmith>
No_se: is it OK if I close https://github.com/validator/validator/issues/446?

[08:31:10.0000] <JakeA>
boogyman: please! Just the final console log with all the numbers

[08:32:22.0000] <boogyman>
there are two "final" logs, one is an array of arrays (paired numbers), the other is a single log with the second of the paired numbers delimited with new lines

[08:32:41.0000] <boogyman>
delimited by*

[08:32:44.0000] <JakeA>
boogyman: the newline one please!

[08:33:24.0000] <boogyman>
send in msg to avoid clutter here

[08:33:38.0000] <No_se>
MikeSmith: Yes, of course. I was wrong, not the validator.

[08:33:52.0000] <MikeSmith>
well you were not wrong

[08:34:23.0000] <MikeSmith>
I still wish I could improve the checker message for that case, but that is a bigger issue

[08:34:45.0000] <No_se>
I found it in the spec and: Whether I was wrong or not is not part of the github issue :-)

[08:35:06.0000] <MikeSmith>
OK, fair enough

[08:38:07.0000] <No_se>
The other validator linked from whatwg "CSE…" found the issue as well, and even shows a useful hint.

[08:41:21.0000] <No_se>
I don't know how the validator generates the messages, but the mentioned messages shows a possible approach (if performance is not a problem): 'The "ul" element cannot be contained in a "p" element. The end tag for "p" was found on line 289, column 2 (this error may also be caused by a stray or misplaced end tag).'

[08:42:29.0000] <No_se>
So, an extra run searching for closing </p> when implicitly closing it

[09:10:04.0000] <MikeSmith>
hmm yeah that wording is pretty much how we also ideally should be reporting it in the Nu checker

[09:27:26.0000] <MikeSmith>
botie, inform zcorpan, for the style[type] should the checker warn if the value is anything other than text/css? or maybe even warn if style[type] is specified at all, warn: “It is not necessary to specify the type attribute for the style element if the contents of the element are a CSS stylesheet.”?

[09:27:27.0000] <botie>
will do

[09:28:34.0000] <tantek>
I have a historical question about video/audio elements, what were the reasons against (because someone must have proposed it) a media element (in addition or instead), e.g. so you could do <media><source src="...mp4"/><source src="...mp3"/> </media> (actual use-case for music videos where you want to provide an audio-only track as an alternative)

[09:35:13.0000] <annevk>
tantek: we did not want another <object>

[09:36:30.0000] <annevk>
tantek: the UI and API are different, so therefore distinct elements

[09:36:50.0000] <tobie>
gsnedders, annevk: fixed wpt-bot issues

[09:38:34.0000] <MikeSmith>
tantek: https://lists.w3.org/Archives/Public/public-whatwg-archive/2007Feb/thread.html#msg487 may have some elaboration on the rationale

[09:38:47.0000] <MikeSmith>
or other threads in the months before that

[09:39:03.0000] <MikeSmith>
first few months of 2007

[09:39:14.0000] <MikeSmith>
or maybe some at the end of 2006

[09:39:57.0000] <MikeSmith>
hey <video> is nearly 10 years old I guess

[09:43:32.0000] <MikeSmith>
more from Hixie at https://lists.w3.org/Archives/Public/public-whatwg-archive/2007Mar/0587.html

[09:45:26.0000] <MikeSmith>
also https://lists.w3.org/Archives/Public/public-whatwg-archive/2007Mar/0558.html

[09:45:55.0000] <MikeSmith>
ah yeah, that one, https://lists.w3.org/Archives/Public/public-whatwg-archive/2007Mar/0558.html from Hixie

[09:46:11.0000] <MikeSmith>
see the section “ON HANDLING OTHER MEDIA FORMATS”

[09:47:26.0000] <MikeSmith>
and also a bit of earlier feedback from Hixie at https://lists.w3.org/Archives/Public/public-whatwg-archive/2007Mar/0437.html

[09:50:04.0000] <tantek>
thanks MikeSmith annevk

[09:55:20.0000] <MikeSmith>
tantek: fwiw when I want to do archaeology on stuff, I start at https://platform.html5.org/history/ to find out the date when it was added to the spec, then just start looking back through https://lists.w3.org/Archives/Public/public-whatwg-archive/ in the months around that date

[09:55:53.0000] <tantek>
/me cringes at any attempt at email archeology

[09:56:20.0000] <MikeSmith>
haha

[09:56:40.0000] <MikeSmith>
tantek: just pretend the e-mail archives are a different kind of wiki

[09:57:06.0000] <tantek>
MikeSmith: no, they are like badly organized wiki-diffs at best. no "current" page

[09:57:41.0000] <tantek>
MikeSmith, annevk the bit I don't get is that we already have various media API abstractions that both <audio> and <video> support. Almost implies that a generic <media> element could (still) work

[10:07:09.0000] <botie>
zcorpan, at 2017-01-18 17:27 UTC, MikeSmith said: for the style[type] should the checker warn if the value is anything other than text/css? or maybe even warn if style[type] is specified at all, warn: “It is not necessary to specify the type attribute for the style element if the contents of the element

[10:07:09.0000] <botie>
are a CSS stylesheet.”?

[10:09:17.0000] <MikeSmith>
tantek: IMHO from the fact that elements can share common API abstractions it does not follow that the markup mechanism for them should be a single element

[10:09:39.0000] <KevinMarks>
I still want a playlist element

[10:09:54.0000] <tantek>
MikeSmith, hence the caveats "almost" "implies" "could" work

[10:10:14.0000] <MikeSmith>
I think the pattern of subclassing or subtyping elements with a type attribute or whatever is a serious design error with all kinds of bad effects for authors

[10:10:17.0000] <tantek>
MikeSmith, like everything else, to be justified by real world use-cases.

[10:10:22.0000] <annevk>
tantek: they share infrastructure, but eg video forms a box, audio does not

[10:10:22.0000] <MikeSmith>
sure

[10:10:36.0000] <tantek>
annevk <audio controls> forms a box

[10:11:10.0000] <KevinMarks>
I know there are scars with SMIL , but it is a huge use case

[10:11:37.0000] <zcorpan>
the difference is <video> is able to render poster frame and has a place to draw video frames and subtitles

[10:14:05.0000] <tantek>
MikeSmith some of those emails - wow so much history of having to demonstrate how flawed all the old HTML+Time / SMIL stuff was

[10:14:12.0000] <tantek>
(and unadopted)

[10:14:27.0000] <zcorpan>
MikeSmith: i guess warning for not-text/css is useful. not sure about warning for type=text/css (or text/javascript for script)... had we discussed this for script?

[10:14:35.0000] <annevk>
tantek: sure but not for a moving image

[10:15:03.0000] <tantek>
why does that matter?

[10:15:03.0000] <annevk>
tantek: anyway, time to debate was April 2007 or so

[10:15:45.0000] <tantek>
also zcorpan, your poster frame distinction is ironic, given the well established use-case of songs being published to YouTube with nothing but *static* album art as the "video"

[10:15:55.0000] <tantek>
that is essentially, audio with a "poster" as it were

[10:16:13.0000] <zcorpan>
tantek: so use <video>

[10:16:30.0000] <MikeSmith>
tantek: yeah about SMIL in hindsight it seems like it should not have been necessary to explain but I think that was because the SMIL guy objected to creating something new

[10:16:39.0000] <tantek>
zcorpan wait are you saying <video poster="...jpg" src="...mp3" /> would work?!?

[10:17:19.0000] <tantek>
MikeSmith, these kinds of analyses are important to document, because in general, the bias of not creating something new (attempt re-use first) is correct

[10:17:22.0000] <zcorpan>
tantek: hmm ... not sure. but that's not what i said :-)

[10:17:28.0000] <tantek>
however, SMIL essentially failed incubation :P

[10:18:28.0000] <MikeSmith>
zcorpan: about warnings for type values for script I don’t remember having a discussion any time in the last few years at least

[10:18:57.0000] <tantek>
zcorpan, in that case, I think it's worth a test case. I see no reason why it shouldn't work.

[10:21:08.0000] <zcorpan>
tantek: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4816 seems like it works. i thought maybe the poster would disappear when it starts playing, but it doesn't in opera or firefox at least

[10:21:21.0000] <tantek>
that is awesome!

[10:21:25.0000] <tantek>
totally worth a blog post

[10:21:39.0000] <zcorpan>
same in safari tp

[10:23:17.0000] <zcorpan>
MikeSmith: https://github.com/whatwg/html/pull/443#issuecomment-168973862

[10:23:26.0000] <tantek>
zcorpan++ nice choice of music too

[10:24:10.0000] <zcorpan>
tantek: heh, first result for "sample mp3"

[10:24:59.0000] <MikeSmith>
zcorpan: oh https://github.com/whatwg/html/pull/443#issuecomment-168973862 if the spec says “Authors should prefer omitting the attribute” I guess that is sufficient to justify the checker emitting a warning for it then

[10:25:16.0000] <zcorpan>
MikeSmith: yeah

[10:25:57.0000] <MikeSmith>
man, now reading “@sideshowbarker and I discussed this in #whatwg and we decided it's at least worth trying”

[10:25:59.0000] <zcorpan>
MikeSmith: i guess the spec should have consistent advice for <style>

[10:26:07.0000] <MikeSmith>
long term loss of short term memory

[10:26:15.0000] <MikeSmith>
zcorpan: yes

[10:26:20.0000] <tantek>
zcorpan, my #indieweb sources say that works however if you put the src="...mp3" on a <source> element inside it appears to not work

[10:26:21.0000] <MikeSmith>
will raise a PR for it

[10:26:30.0000] <zcorpan>
6 months is not short term memory though :-D

[10:27:01.0000] <zcorpan>
tantek: i seriously doubt it without proof

[10:27:05.0000] <zcorpan>
gotta run though

[10:27:12.0000] <tantek>
zcorpan, yup, bug coming

[10:27:14.0000] <MikeSmith>
zcorpan: true! my memory sucks even worse than I remembered 😂

[10:27:28.0000] <tantek>
also http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=4816 seems useful enough to be added as a test to webplatform tests

[10:27:43.0000] <tantek>
is there a simple pipeline for Live DOM Viewer -> Web Platform Tests ?

[10:29:15.0000] <MikeSmith>
oh wow a spec issue raised by sof https://github.com/whatwg/fetch/issues/459 Don’t seem to see that very often (dunno why)

[10:31:29.0000] <tantek>
correction, works with <source> tag also.

[10:31:44.0000] <tantek>
(amazing what things work when you go to actually file a bug ;) )

[10:32:19.0000] <annevk>
MikeSmith: you have to ask 😛

[10:32:40.0000] <MikeSmith>
hah I knew there was some secret

[10:43:03.0000] <annevk>
JakeA: https://github.com/w3c/web-platform-tests/pull/4505 is there a way to return a network error from a service worker?

[10:45:18.0000] <JakeA>
annevk: I don't think so. Fetch rejects on network error

[10:46:08.0000] <JakeA>
annevk: I guess you could respondWith Response.error() - I've never tried that

[10:47:33.0000] <annevk>
JakeA: ah yes, that is the way

[10:47:39.0000] <JakeA>
annevk: https://fetch.spec.whatwg.org/#http-fetch 3.3.3 handles that

[10:48:34.0000] <annevk>
yeah, ta

[10:48:38.0000] <annevk>
I forgot we defined Response.error()

[10:48:44.0000] <annevk>
Or I did, I guess

[10:53:43.0000] <annevk>
Hmm, didn't get to non-special-URL hosts today nor to revamping whatwg.org

[10:54:21.0000] <annevk>
And several other things it seems

[10:54:43.0000] <annevk>
I was kinda on a streak with completing my daily todo list

[10:57:03.0000] <jyasskin>
The [SameObject] wording appears to ban using it on nullable attributes: "The [SameObject] extended attribute must not be used on anything other than a read only attribute whose type is an interface type or object." Was that intentional?

[10:58:14.0000] <annevk>
jyasskin: I think so, because it had to match [NewObject], but there are open issues about changing [SameObject] into something like [Cached]

[10:58:28.0000] <jyasskin>
annevk: Thx

[10:59:49.0000] <jyasskin>
https://github.com/heycam/webidl/issues/212 ++

[11:48:11.0000] <tobie>
jyasskin: sent notes your way

[12:52:25.0000] <smaug>
/me wonders if it is really expected that dialog.showModal(); dialog.removeAttribute("show"); dialog.showModal(); add the element twice to the stack

[15:57:09.0000] <jyasskin>
Dumb question for Domenic and foolip re https://github.com/WICG/webusb/pull/67: What makes an interface a mixin?

[15:57:27.0000] <tantek>
/me briefly misread webusb as websub

[15:57:38.0000] <Domenic>
jyasskin: right now, convention + militant policing of usage. In the future, dedicated syntax

[15:57:55.0000] <tantek>
https://www.w3.org/TR/websub/

[15:58:33.0000] <Domenic>
jyasskin: i.e., if your interface is marked [NoInterfaceObject] and always appears on the right-hand side of an `implements` statement, it is a mixin.

[15:59:46.0000] <jyasskin>
Domenic: Ah, ok. So only [NoInterfaceObject] things will be able to be `implements`ed, and it'll be impossible to extend the members of something that's implemented. And I guess that ability to extend the members is why not to implement non-mixins?


2017-01-19
[16:00:53.0000] <Domenic>
Yeah, pretty much

[16:01:17.0000] <Domenic>
The plan is to use `mixin` instead of `[NoInterfaceObject] interface` and then say you can only `implements` such `mixin`s

[16:01:26.0000] <Domenic>
Or maybe we'll have `mixes` as `implements` v2

[19:05:36.0000] <MikeSmith>
I wonder how https://bugs.chromium.org/p/chromium/issues/detail?id=682521 fits with the Console spec

[19:07:31.0000] <MikeSmith>
that is, does the spec or other current implementation specify a way to control console verbosityーfor the console to show messages that are not shown by default

[19:08:10.0000] <MikeSmith>
or maybe this is out of scope for the console spec and instead just an implementation-specific thing

[20:02:30.0000] <Domenic>
Yeah I mean it depends on how they plan to expose that

[20:02:44.0000] <Domenic>
E.g. is this only for deprecation warnings

[20:02:51.0000] <Domenic>
Or is this supposed to be web developer exposed

[20:20:19.0000] <karlcow>
MikeSmith: does it relate to the levels of errors? In firefox devtools there are categories: Errors and Warnings

[20:21:35.0000] <karlcow>
… for JS. Error, Warning, Reflow for CSS. Logging has a lot more stuff.

[20:22:20.0000] <karlcow>
all of these you can activate and deactivate them.

[23:20:24.0000] <MikeSmith>
karlcow: I guess that is what the comment at https://bugs.chromium.org/p/chromium/issues/detail?id=568218#c20 refers to

[23:21:10.0000] <MikeSmith>
Domenic: yeah, web-developer exposed

[00:02:17.0000] <annevk>
Oh my, DreamHost's SSH instructions are basically "trust the network"

[00:02:28.0000] <annevk>
They move the server and there's no place to find the new public key securely

[00:02:39.0000] <annevk>
Why is the SSH culture so broken? Does nobody care?

[00:28:15.0000] <MikeSmith>
annevk: biting my tongue here

[00:28:56.0000] <MikeSmith>
don’t want to sound like a broken record but that and other problems would be solved if we fully controlled the environment we’re running things on

[00:29:54.0000] <annevk>
MikeSmith: oh yeah, I'm okay with exploring moving away from DreamHost for whatwg.org et al

[00:30:00.0000] <annevk>
MikeSmith: maybe open a whatwg/meta issue?

[00:30:09.0000] <annevk>
MikeSmith: but this is not specific to DreamHost I think

[00:30:17.0000] <MikeSmith>
true

[00:30:27.0000] <MikeSmith>
I fully agree about the general problem

[00:30:43.0000] <MikeSmith>
accidents waiting to happen

[00:31:29.0000] <MikeSmith>
well not accidents, but people waiting to get pwned and other people inadvertently training them to be ready to get pwned

[00:53:56.0000] <MikeSmith>
annevk: OK https://github.com/whatwg/meta/issues/8 raised

[04:16:26.0000] <rbyers>
MikeSmith: I think Pavel is considering breaking the 1:1 connection between the API and UI.  Eg. "Info" in the UI may become disabled by default, but console.info may still be on by default under the "Log" level in the UI.

[04:18:01.0000] <rbyers>
I'm not sure he wants to add but-yet-another level in the UI below info.  Seems like this is impl defined in the console spec, but feel free to raise an issue against it to discuss and/or comment on the bug with your thoughts.

[06:29:25.0000] <annevk>
yoav: assuming all is okay now I'll be able to squash and merge in a bit

[06:30:01.0000] <annevk>
yoav: kid got sick again so I'm a bit on and off

[06:32:34.0000] <tobie>
jyasskin: fyi landing the syntax for mixins is on my high-priority list.

[06:32:46.0000] <annevk>
tobie: ooh great

[06:33:41.0000] <tobie>
annevk: now that Domenic explained that it's basically sugar around [NoInterfaceObject], I'm much more confortable addressing it. :)

[06:35:09.0000] <annevk>
tobie: yeah, it's basically about removing [NoInterfaceObject]

[06:35:18.0000] <tobie>
annevk: I thought it implied bikesheding  the semantics of mixins

[06:35:36.0000] <tobie>
annevk: so wasn't very keen on getting *that* started.

[06:36:06.0000] <annevk>
I see, I was wondering why it was being postponed, since at TPAC we decided it was important I think

[06:41:53.0000] <tobie>
annevk: well, the learning curve for WebIDL is quite something, tbh.

[06:45:53.0000] <yoav>
annevk: OK, thanks! (absolutely no rush, take good care of the kid :D)

[07:50:32.0000] <No_se>
For html (5) tags, is it recommended (or at least valid) to place a dir="ltr" everywhere? (Except where the language is rtl)

[07:51:23.0000] <No_se>
Well, to be more precise: In the opening html tag itself

[07:59:04.0000] <annevk>
No_se: you can define it there, yes

[08:00:30.0000] <annevk>
No_se: if not specified at all it defaults to ltr, so not really recommended

[08:02:44.0000] <No_se>
My usecase: I want to avoid setting i.e.  float: right and overwrite it (via dir=rtl selector) with float: left

[08:09:46.0000] <Domenic>
Dunno if anyone else has opinions on polyfills not deferring to native implementations given all the pain we've seen caused by that in the past (e.g. custom elements, shadow DOM) but if so feel free to chime in at https://github.com/w3ctag/polyfills/issues/2 . Maybe annevk or mathiasbynens.

[08:51:41.0000] <annevk>
Domenic: I left a reply

[08:52:06.0000] <annevk>
Domenic: I looked into the URL issue and I think it basically requires a redesign of many states

[08:52:42.0000] <annevk>
Domenic: we basically lost the information of "/" by the time we are in the "path state" and we need to preserve it if we are to distinguish between "" and "/" for non-special URL paths

[08:53:26.0000] <annevk>
Domenic: I'm starting to think my earlier suggestion of separating empty paths and non-special hosts makes a lot of sense

[08:56:52.0000] <annevk>
Domenic: https://github.com/whatwg/html/issues/2271 you should probably state you do support the API concept and the naming convention that would go with that

[08:57:25.0000] <annevk>
Domenic: might have been too subtle when you pointed that out the first time

[09:24:47.0000] <Domenic>
annevk: thanks

[09:24:50.0000] <Domenic>
Good luck with the URL stuff...

[09:24:55.0000] <Domenic>
I do think splitting the hostname and path changes might work out well

[09:49:02.0000] <annevk>
Domenic: that polyfill thread is kinda baffling

[09:49:21.0000] <annevk>
oh well

[10:02:05.0000] <annevk>
Domenic: I also noticed that new URL("///y", "foo://x/") doesn't quite do what I think it should do

[10:02:54.0000] <annevk>
Domenic: you end up with foo://y rather than foo:///y (empty host)

[10:02:58.0000] <annevk>
Domenic: which seems like a plain bug

[10:03:13.0000] <Domenic>
Hmm I see

[10:03:14.0000] <annevk>
Domenic: so yeah, I'm going to split them up

[10:03:26.0000] <annevk>
1) fix host handling for non-special URLs

[10:03:42.0000] <annevk>
2) fix path handling for non-special URLs

[10:03:56.0000] <annevk>
And 2 requires  a revamp of path handling in general I suspect

[10:04:22.0000] <annevk>
Hopefully all tomorrow

[10:51:02.0000] <JonathanNeal>
Domenic: re: polyfills, you said “ Defering to native implementations does not provide the desired interop” - polyfills defer to native implementations for performance, no?

[10:52:15.0000] <Domenic>
JonathanNeal: I sure hope not, since native implementations are usually slower

[10:54:48.0000] <JonathanNeal>
Is there a qualifier for “usually”? Is that blanket JS, or specific to some browser or even some field (like DOM)? Like, would using the ES5/6 polyfill for Array methods be faster than native? Or DOM4?

[10:55:53.0000] <JonathanNeal>
s/Or DOM4 … polyfills being faster than native implementations

[11:10:22.0000] <Domenic>
It's especially try that polyfills are usually faster for ES

[11:10:32.0000] <Domenic>
It's also true in many smaller cases in DOM

[11:10:58.0000] <Domenic>
Wide-ranging stuff like custom elements or shadow DOM are where polyfills are slower, but also way less likely to follow the spec.

[11:28:22.0000] <innovati>
eyyy JonathanNeal

[11:29:21.0000] <JonathanNeal>
hiii innovati

[11:29:33.0000] <innovati>
fancy meeting you here ^^

[11:31:29.0000] <JonathanNeal>
CSS, JS, HTML; they’re all part of the web.

[14:48:09.0000] <tobie>
Domenic: had you settled the question around [SameObject] and promise types with Boris?

[14:48:40.0000] <tobie>
Domenic: i.e. can I merge this thing?

[14:49:16.0000] <tobie>
Domenic: for ref, it's this thread I'm talking about: https://github.com/heycam/webidl/pull/217#discussion_r87079498


2017-01-20
[18:12:20.0000] <Domenic>
tobie: I think we have

[00:52:00.0000] <annevk>
tobie: Domenic: maybe IDL should start requiring tests for any changes too and bugs?

[00:52:24.0000] <annevk>
tobie: Domenic: it's at such a low-level of the stack that it seems important to keep it all together

[00:54:13.0000] <tobie>
annevk: I have no idea what the state of the WebIDL test suite is in, nor frankly how to properly test most of what's in the WebIDL spec.

[00:54:43.0000] <annevk>
tobie: we can test many things indirectly through actual APIs defined through the IDL feature

[00:55:33.0000] <tobie>
annevk: so we should keep idlharness in sync?

[00:55:53.0000] <annevk>
tobie: at the very least that seems like a good thing, no?

[00:58:02.0000] <tobie>
annevk: I was doing TDD when pretty much only Rubyist were into it, so you're preaching to the choir here…

[00:59:06.0000] <tobie>
annevk: last time I looked, the internals of idlharness were quite a sight

[01:00:03.0000] <tobie>
annevk: so I'm concerned this could be a pretty significant investment

[01:01:15.0000] <annevk>
tobie: discuss it with Domenic at least? It's really been paying off for WHATWG work

[01:01:15.0000] <Ms2ger>
Yeah :/

[01:02:08.0000] <annevk>
tobie: the main problem is that by not doing it, we hit these very subtle issues down the road because browsers didn't follow a change

[01:02:26.0000] <annevk>
tobie: perhaps at the very least we should make sure each change has corresponding bugs in the four major browsers, or are you doing that already?

[01:02:28.0000] <tobie>
annevk: dude, you're preaching to the choir

[01:02:49.0000] <tobie>
convince Domenic it's a good use of my time.

[01:02:50.0000] <annevk>
tobie: and then maybe the browsers can take care of writing the tests, due to limited resources on the standards side

[01:03:12.0000] <annevk>
tobie: sorry, don't mean to patronize

[01:03:44.0000] <tobie>
annevk: oh, no, no. I'm just saying, I don't need convincing.

[01:04:51.0000] <tobie>
annevk: we are filing bugs against the browsers, but not for all changes.

[01:05:36.0000] <tobie>
annevk: I still have little visibility into what parts of WebIDL are properly implemented by browsers and which parts aren't at this point.

[01:11:48.0000] <tobie>
annevk: , Ms2ger: comments/thoughts welcomed at https://github.com/heycam/webidl/issues/268

[01:26:36.0000] <annevk>
In a single promise test, how can you do the equivalent of three assert_throws?

[03:02:11.0000] <hsivonen>
annevk: thanks for merging

[03:02:37.0000] <hsivonen>
annevk: fwiw, the improvement in EUC-KR encode that's attributable to looking at the visualizations is *massive*

[03:02:38.0000] <annevk>
hsivonen: thanks for writing it all!

[03:03:07.0000] <hsivonen>
annevk: on raspberry pi 3, it removed about 99.5% of the running time of the benchmark!

[03:04:17.0000] <hsivonen>
(that's for the EUC-KR benchmark)

[03:04:36.0000] <hsivonen>
for gb18030 and Japanese encode it was a win, too, but not as massive

[03:04:48.0000] <hsivonen>
the corresponding decode-site perf degradation was modest

[03:06:03.0000] <annevk>
hsivonen: wow, guess you need a new benchmark then

[03:06:11.0000] <annevk>
hsivonen: to find the new hot spots

[08:01:31.0000] <tobie>
Domenic: https://github.com/heycam/webidl/issues/222#issuecomment-274108164

[08:10:36.0000] <annevk>
tobie: I kinda like it

[08:10:49.0000] <annevk>
tobie: might even drop the parenthetical in the second example

[08:11:05.0000] <annevk>
tobie: StructuredClone doesn't have those either

[08:11:16.0000] <tobie>
/me looks

[08:12:42.0000] <annevk>
tobie: you'll soon run into https://github.com/heycam/webidl/issues/97 I think

[08:13:13.0000] <tobie>
annevk: indeed. :D

[08:13:37.0000] <tobie>
annevk: didn't know it was a thing, but was wondering about this minutes ago

[08:13:47.0000] <annevk>
tobie: figures

[08:13:49.0000] <annevk>
tobie: fixing that would be great

[08:14:28.0000] <annevk>
tobie: having a way to say whether something is an Element that is actually grounded in primitives would be a huge improvement

[08:15:27.0000] <tobie>
annevk: yup

[08:16:36.0000] <tobie>
annevk: would you: Let |T| be Type(|V|) at the beginning of algos or not?

[08:17:14.0000] <annevk>
tobie: seems okay, I haven't read enough ECMAScript to know if it has precedent

[08:17:47.0000] <tobie>
Also, any idea why some variables are uppercase and others lowercase?

[08:18:05.0000] <annevk>
tobie: doesn't seem like it (searching for "be type(")

[08:18:10.0000] <annevk>
tobie: hmm examples?

[08:24:29.0000] <tobie>
annevk: https://heycam.github.io/webidl/#dfn-obtain-unicode

[08:27:08.0000] <annevk>
tobie: no idea, prolly mistake?

[08:27:17.0000] <annevk>
tobie: longer variable names wouldn't hurt either

[08:28:33.0000] <tobie>
annevk: heh

[08:39:21.0000] <annevk>
wanderview: re: https://github.com/whatwg/html/issues/2273 I'm pretty sure Chrome has a design where a window.open() could result in a new process, they have it at least for <iframe>

[08:39:34.0000] <annevk>
wanderview: and they proxy things back and worth

[08:39:58.0000] <wanderview>
annevk: has that shipped?  also I thought rel=noopener was needed for window.open()

[08:40:19.0000] <wanderview>
but historically anyway this has prevented separate processes for windows in the same "constellation"

[08:41:18.0000] <annevk>
wanderview: not sure, but they did find a way that if things cannot reach each other (just reach the global/location object) to use different processes

[08:41:59.0000] <annevk>
wanderview: which you can observe it through URL fragment manipulation and timeouts, but maybe nobody uses that anymore

[08:42:50.0000] <wanderview>
dunno... just pointing out in the issue that a multi-process browser can still keep some things in the same process if necessary

[08:43:00.0000] <wanderview>
anyway, I have to go get lunch

[08:45:16.0000] <annevk>
bon appetit

[09:06:17.0000] <annevk>
Domenic: https://github.com/whatwg/url/pull/185 is ready for review again I think

[09:06:32.0000] <annevk>
Domenic: I updated the patch and tests with the aim to just do the host changes

[09:07:11.0000] <annevk>
Domenic: I haven't run a modified whatwg-url to check things, since as I'm still looking for advice on how to run it against different tests

[09:08:54.0000] <annevk>
Domenic: thanks

[09:20:42.0000] <annevk>
Domenic: nice system

[09:20:51.0000] <Domenic>
:)

[09:21:29.0000] <annevk>
Domenic: only remaining failures are setter tests and I'm not really sure what to do there yet

[09:21:32.0000] <annevk>
Domenic: investigating

[09:25:27.0000] <annevk>
tobie: can we stop adding wg-webplatform labels to url tests?

[09:25:43.0000] <annevk>
tobie: although maybe you should first tell me what the label is for before I destroy something

[09:26:58.0000] <tobie>
tobie: iirc Dom was responsible for that code.

[09:27:26.0000] <tobie>
annevk: iirc Dom was responsible for that code.

[09:28:09.0000] <tobie>
annevk: thing it was something to do with letting chairs figure out what PRs needed reviews.

[09:30:47.0000] <tobie>
annevk: let me see if I can fix that in specref

[09:53:08.0000] <tobie>
annevk: that looks easily fixable

[09:53:38.0000] <tobie>
annevk: and also seems to be a proper way to fix aliasing of old W3C specs to WHATWG ones.

[09:54:16.0000] <annevk>
tobie: that PR looks fine, hopefully one day "URL" can be the authoritative term and WHATWG-URL the alt

[09:54:46.0000] <tobie>
annevk: that PR makes it so for all practical purposes

[09:54:59.0000] <annevk>
tobie: coolio

[09:55:15.0000] <tobie>
annevk: both Respec and Bikeshed resolve aliases for you

[09:55:29.0000] <tobie>
annevk: so you can now do [URL]

[09:55:53.0000] <tobie>
annevk: and that'll get you the WhatWG version

[09:55:54.0000] <annevk>
tobie: I think TabAtkins put in some local overwrites already for us so we can

[09:56:07.0000] <annevk>
tobie: but maybe those were not exposed to everyone

[09:56:18.0000] <tobie>
annevk: dunno

[09:56:38.0000] <tobie>
annevk: might as well do the other ones while I'm at it

[09:56:45.0000] <tobie>
annevk: what were they?

[09:57:00.0000] <tobie>
annevk: DOM, FULLSCREEN, what else?

[09:57:04.0000] <TabAtkins>
No, they're global, but the list is relatively short

[09:57:08.0000] <TabAtkins>
One sec

[09:57:30.0000] <annevk>
tobie: https://wiki.whatwg.org/wiki/Fork_tracking has an overview

[09:59:05.0000] <jyasskin>
tobie: Have you looked at all at whether WASM needs any WebIDL changes?

[09:59:14.0000] <TabAtkins>
["notifications", "fullscreen", "dom", "url", "encoding"]

[09:59:23.0000] <tobie>
TabAtkins: thanks

[09:59:43.0000] <TabAtkins>
https://github.com/tabatkins/bikeshed/blob/master/bikeshed/ReferenceManager.py#L583

[10:00:03.0000] <tobie>
jyasskin: my understanding is it'll need completely new bindings at some point.

[10:02:16.0000] <annevk>
yup, I actually think they plan on writing that spec

[10:02:54.0000] <annevk>
though we should probably start coordinating at some point if we're still going to not have distinct IDL and JavaScript types for some things

[10:03:11.0000] <tobie>
jyasskin: but until then, they just call DOM APIs through JS. More here: http://webassembly.org/docs/gc/

[10:04:02.0000] <jyasskin>
tobie: Mhmm, makes sense.

[10:05:05.0000] <tobie>
jyasskin: and in particular: http://webassembly.org/docs/gc/#webidl-integration

[10:07:18.0000] <jyasskin>
Yeah. I don't need it for anything I'm doing, but I wanted to make sure that they'd made contact in the right ways.

[10:28:57.0000] <nox>
Shouldn't the 2 arguments version of document.open be [SameObject]?

[11:22:08.0000] <annevk>
Turns out you can get DreamHost SSH keys out-of-band, at https://panel.dreamhost.com/index.cgi?tree=users.sshkeys, though even that suggests it's safe to ignore the warning

[11:23:09.0000] <annevk>
Anyone know if the dangers of ignoring SSH warnings are outlined anywhere? I feel like maybe I should write a blogpost to point out the obvious

[11:30:03.0000] <Domenic>
I really feel like we must be missing something... maybe writing a blog post will be a good way to find out, as technies descend on us and tell us why we're wrong :)

[11:31:05.0000] <annevk>
Domenic: pretty sure I'm not wrong

[11:32:48.0000] <annevk>
Domenic: there's a reason the ssh program says "Warning" and such

[11:33:14.0000] <annevk>
Domenic: it's just that TOFU used to be acceptable for some reason and no longer is

[11:33:18.0000] <Domenic>
I dunno, maybe it's just old and bogus or defending against an unrealistic threat model or something.

[11:33:45.0000] <Domenic>
You're probably right, but I try to at least keep my mind open that so many people aren't wrong.

[11:34:17.0000] <annevk>
Domenic: for what we do it doesn't matter, we just push public data somewhere, if that somewhere happens to be an attacker, all we lose is that the standard isn't updated

[11:34:27.0000] <annevk>
Domenic: although setting a bad example is bad of course

[11:34:45.0000] <annevk>
oh well, yes, I should write a blog post and we'll find out

[13:10:19.0000] <Domenic>
TabAtkins: ping on https://github.com/tabatkins/bikeshed/issues/900 ?

[13:10:20.0000] <botie>
will do

[13:11:26.0000] <Domenic>
botie no. botie why.

[13:11:26.0000] <botie>
Domenic: sorry...


2017-01-21
[21:57:37.0000] <TabAtkins>
Domenic: Will get that shortly, sorry for the delay. Widlparser did some more edits, and one had an error, so I need to double-check that it's working correctly.

[22:49:58.0000] <XhmikosR>
MikeSmith: I don't suppose you have a Windows machine around?

[23:54:43.0000] <MikeSmith>
XhmikosR: no I don't

[23:55:45.0000] <MikeSmith>
I used to have an Azure remote VM thing when Microsoft were providing those, but they stopped doing that last year

[00:04:25.0000] <XhmikosR>
MikeSmith: I cannot make vnu.jar work from npm script section. Does this work for you? java -jar ./node-modules/vnu-jar/build/dist/vnu.jar --errors-only ./src/index.html

[00:05:28.0000] <XhmikosR>
Error: Unable to access jarfile ./node-modules/vnu-jar/build/dist/vnu.jar

[00:05:46.0000] <XhmikosR>
I tried with backslashes, same thing

[00:07:25.0000] <ondras>
hmm, /me knows only 'node_modules' with underscore

[00:09:14.0000] <MikeSmith>
XhmikosR: lemme try now

[00:11:55.0000] <MikeSmith>
XhmikosR: what ondras said

[00:12:19.0000] <MikeSmith>
I have only a ~/node_modules/ dir

[00:12:22.0000] <MikeSmith>
underscore

[00:13:20.0000] <MikeSmith>
java -jar ./node_modules/vnu-jar/build/dist/vnu.jar --errors-only index.html works

[00:15:40.0000] <XhmikosR>
MikeSmith: ./node_modules/ is when one depends on the vnu-jar npm package and does `npm i` in that dir.

[00:15:58.0000] <MikeSmith>
ok

[00:16:53.0000] <MikeSmith>
so there’s somewhere else I should be looking?

[00:18:07.0000] <XhmikosR>
the problem as far as I can tell is with vnu.jar reference. If I move the jar to the same folder as package.json and adjust the script this works: java -jar vnu.jar --errors-only ./src/index.html

[00:18:25.0000] <XhmikosR>
dammn it :/

[00:18:29.0000] <XhmikosR>
it's a typo

[00:18:33.0000] <MikeSmith>
oh

[00:18:36.0000] <XhmikosR>
node-modules vs node_modules

[00:18:57.0000] <MikeSmith>
hope it’s not my typo

[00:19:07.0000] <XhmikosR>
nope, my type :P

[00:19:10.0000] <XhmikosR>
sorry for the noise

[00:19:14.0000] <MikeSmith>
ok

[00:19:17.0000] <XhmikosR>
it's almost always the simple things

[00:19:22.0000] <MikeSmith>
yup

[00:21:20.0000] <MikeSmith>
XhmikosR: incidentally I guess you noticed by now, but I had to do a 17.1.0 release, because the 17.0.1 vnu.jar doesn’t actually support custom elements

[00:23:00.0000] <MikeSmith>
Domenic caught that because the Streams spec HTML source uses custom elements and we now use vnu.jar in our Travis CI setup to test the HTML sources of all specs

[00:34:12.0000] <XhmikosR>
MikeSmith: yeah, I forgot to release a new grunt-html version :/

[00:34:59.0000] <MikeSmith>
well no rush I guess

[00:35:08.0000] <MikeSmith>
if nobody has reported a problem about it

[00:35:23.0000] <MikeSmith>
though I’m kinda surprised nobody has

[00:35:32.0000] <XhmikosR>
feel free to ping me if I miss a release in the future

[00:36:35.0000] <XhmikosR>
testing now and I'll release 8.3.0 or 8.2.1

[00:36:36.0000] <MikeSmith>
well I would have sent you a reminder when I did this one, but I’ve been away traveling and stuck meetings til today

[00:36:39.0000] <MikeSmith>
OK

[00:36:42.0000] <XhmikosR>
we really need semver

[00:37:19.0000] <MikeSmith>
not sure we do for vnu.jar

[00:37:41.0000] <XhmikosR>
I will do 8.2.1

[00:37:49.0000] <XhmikosR>
just a minor bump

[00:38:15.0000] <MikeSmith>
yeah I think that’s appropriate for the npm version

[00:39:18.0000] <MikeSmith>
for vnu.jar I did it the way I did because 17.0.1 actually lacked one of the two major features the release notes advertised it as having

[00:40:02.0000] <XhmikosR>
released 8.2.1

[00:40:03.0000] <MikeSmith>
so it seemed to merit more than just a rev to 17.0.2 upstream

[00:40:05.0000] <MikeSmith>
thanks

[00:40:52.0000] <XhmikosR>
did you sort your build scripts?

[00:43:42.0000] <MikeSmith>
XhmikosR: yeah

[00:44:03.0000] <MikeSmith>
thanks for nudging me about those

[00:44:20.0000] <MikeSmith>
you were right, about the stuff you pointed out

[00:44:56.0000] <MikeSmith>
“that doesn’t seem like a clever way of doing it” or something like that, you said

[00:45:07.0000] <MikeSmith>
which I thought was a nice way of putting it

[00:46:19.0000] <MikeSmith>
btw dunno if you’re interested in Rust I have a grand plan of starting a complete rewrite of the HTML checker in Rust this year

[00:49:59.0000] <XhmikosR>
MikeSmith: it was just common sense for me :P You just wanted to replace the version string so what you were doing was too much and could break easily, as it did :)

[00:50:14.0000] <MikeSmith>
indeed

[00:51:50.0000] <annevk>
Which specification uses the "inherit attribute" IDL construct?

[00:59:12.0000] <MikeSmith>
annevk: I find AnimationEffectTiming

[01:00:23.0000] <MikeSmith>
https://w3c.github.io/web-animations/#the-animationeffecttiming-interface

[01:00:37.0000] <annevk>
ta

[01:05:41.0000] <MikeSmith>
glad I got home in time to watch the final two nights of the current sumo tournament. Exciting finishーa guy who’s a really well-liked veteran wrestler but who had never actually won a tournament won just now, a few minutes go. He had to turn has face away from the camera because he was crying and didn’t want the cameras to see it. But when he turned back you could still see the tears coming out.

[01:11:51.0000] <XhmikosR>
MikeSmith: so with the latest specs, preloadCSS prolyfill seems to trigger an error?

[01:12:04.0000] <MikeSmith>
oh

[01:12:22.0000] <MikeSmith>
what’s the error?

[01:13:00.0000] <XhmikosR>
hmm sec, it might have been the old version of vnu-jar

[01:13:09.0000] <XhmikosR>
because I see this is passing https://travis-ci.org/mpc-hc/mpc-hc.org/builds/188114185

[01:13:10.0000] <MikeSmith>
ah

[01:13:18.0000] <XhmikosR>
let me double check

[01:13:43.0000] <MikeSmith>
yeah maybe it uses some custom elements

[01:14:11.0000] <XhmikosR>
https://ci.appveyor.com/project/XhmikosR/mpc-hc-org/build/711

[01:14:19.0000] <MikeSmith>
/me looks

[01:14:19.0000] <XhmikosR>
trying with the latest version now

[01:14:54.0000] <MikeSmith>
> A “link” element with an “integrity” attribute must have a “rel” attribute that contains the value “stylesheet”

[01:15:01.0000] <XhmikosR>
I don't use that branch inproduction because I've yet to find a nice way to have nonces with apache

[01:16:09.0000] <MikeSmith>
well as far as that specific error I think this release does relax that, because the spec permits more rel values with the integrity attribute

[01:16:16.0000] <XhmikosR>
yeah now it's passing

[01:16:17.0000] <MikeSmith>
/me checks the git log

[01:16:19.0000] <MikeSmith>
OK

[01:16:29.0000] <XhmikosR>
spoke too soon

[01:16:54.0000] <XhmikosR>
https://ci.appveyor.com/project/XhmikosR/mpc-hc-org/build/714

[01:17:41.0000] <MikeSmith>
oh

[01:17:44.0000] <MikeSmith>
/me looks again

[01:17:57.0000] <XhmikosR>
yeah it's failing here

[01:17:57.0000] <XhmikosR>
<link rel="preload" href="https://cdn.mpc-hc.org/assets/css/pack.131b2455.css" as="style" onload="this.rel='stylesheet'" integrity="sha384-BEMuRBtHBbYZMl3ydzM511MV2l5DmO/MQKV7q+4w3/6hhQeEHW/foGDI8cvgps0X" crossorigin="anonymous">

[01:18:30.0000] <XhmikosR>
ahhh

[01:18:38.0000] <MikeSmith>
OK yeah so that is actually non-conforming I think

[01:18:40.0000] <XhmikosR>
does it need as="stylesheet"

[01:18:41.0000] <MikeSmith>
per current spec

[01:19:09.0000] <MikeSmith>
no, I think needs rel="preload stylesheet"

[01:19:30.0000] <MikeSmith>
instead of just rel="preload"

[01:19:37.0000] <XhmikosR>
the rel preload polyfill had `if( link.rel === "preload" && link.getAttribute( "as" ) === "style" ){`

[01:20:01.0000] <XhmikosR>
let's see if they have a newer version

[01:20:24.0000] <MikeSmith>
yeah I think I do not have the checker checking the as= value yet

[01:21:12.0000] <MikeSmith>
oh, no I do

[01:21:23.0000] <MikeSmith>
it is an enumerated value

[01:21:39.0000] <XhmikosR>
https://github.com/filamentgroup/loadCSS#recommended-usage-pattern

[01:21:50.0000] <XhmikosR>
so they haven't changed anything on their side

[01:21:52.0000] <MikeSmith>
and the permitted values includes "style"

[01:22:05.0000] <MikeSmith>
yeah should be "style" not "stylesheet"

[01:22:17.0000] <XhmikosR>
so a bug? :p

[01:22:42.0000] <MikeSmith>
well that doc is non-conforming because it just has rel="preload"

[01:22:53.0000] <MikeSmith>
they need to change that to rel="preload stylesheet"

[01:23:17.0000] <XhmikosR>
hmm

[01:23:27.0000] <XhmikosR>
ok so they need to change the script

[01:24:38.0000] <XhmikosR>
MikeSmith: do you a link to the specs that say that it needs to be "preload stylesheet" and drops the `as` attribute?

[01:24:45.0000] <MikeSmith>
the only related change I made in this release is that I was accidentally before only do exact matches for rel values in some cases, when I needed to be instead checking the string value just with .contains(...) instead of exact match

[01:24:58.0000] <MikeSmith>
yeah hang on

[01:25:19.0000] <MikeSmith>
well not sure they need to drop the `as` attribute

[01:25:26.0000] <MikeSmith>
but I can get the other reference

[01:25:48.0000] <XhmikosR>
if `as` is still required they just need to change the rel value

[01:26:10.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/semantics.html#attr-link-integrity

[01:26:15.0000] <MikeSmith>
> The integrity attribute represents the integrity metadata for requests which this element is responsible for. The value is text. The attribute must not be specified on link elements that do not have a rel attribute that contains the stylesheet keyword. [SRI]

[01:27:24.0000] <XhmikosR>
ok thanks I'll make an issue

[01:28:17.0000] <MikeSmith>
hai

[01:44:22.0000] <XhmikosR>
not sure what the new check should be though. If I use `rel="stylesheet preload"` FF and Chrome return `stylesheet` only for `link.rel` value

[01:44:53.0000] <XhmikosR>
although Chrome won't be affected since it supports preload natively

[01:46:59.0000] <MikeSmith>
XhmikosR: hmm not sure what to suggest then

[01:47:25.0000] <MikeSmith>
though I know grunt-html has some way to filter out unwanted errors

[01:47:30.0000] <XhmikosR>
I'll CC you there and we'll see what the others have to suggest

[01:47:35.0000] <MikeSmith>
OK

[01:47:43.0000] <XhmikosR>
I mostly care about the script working not the error :)

[01:51:42.0000] <XhmikosR>
I think the script works though, it's just the error showing up

[01:52:02.0000] <XhmikosR>
because in the HTML the link has `onload="this.rel='stylesheet'"`

[02:52:03.0000] <annevk>
MikeSmith: aww (re sumo)

[04:23:29.0000] <MikeSmith>
annevk: see bz comments https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/qS63pYso4P0/7_cMXoKXAwAJ about handling of HTTP/0.9 responses on ports other than 80

[04:24:14.0000] <MikeSmith>
“It really would be a good idea if we (browser vendors) could all coordinated how we handle this stuff instead of each solving it in a different way.”

[04:24:35.0000] <MikeSmith>
dunno where would be the place to specify that

[04:26:42.0000] <MikeSmith>
responses from the legacy Shoutcast server apparently start with “ICY 200 OK” and Blink is going to add some special-case handling to make those work for ports other than port 80 while otherwise disallowing HTTP/0.9 responses from non-80 ports

[04:29:08.0000] <annevk>
MikeSmith: HTTP spec in theory

[04:30:05.0000] <MikeSmith>
well

[04:31:36.0000] <MikeSmith>
as entertaining as it might be to bring the discussion up with some of the members of the HTTP WG, seems clear it wouldn’t be productive

[04:32:41.0000] <MikeSmith>
so if it is something we want interoperability on instead of browsers hacking in things like what Chrome plans to do, seems like it would be good to spec it somewhere

[04:33:02.0000] <MikeSmith>
not volunteering but I don’t even know where to raise it as an issue

[04:37:09.0000] <annevk>
MikeSmith: could add a monkey patch in Fetch

[04:37:34.0000] <annevk>
MikeSmith: there is also a wiki page listing issues with HTTP

[04:37:45.0000] <annevk>
MikeSmith: maybe add it there

[04:45:16.0000] <MikeSmith>
annevk: thanks added at https://wiki.whatwg.org/wiki/HTTP#HTTP_0.9_.28and_Legacy_Shoutcast_support.29

[04:49:28.0000] <annevk>
Cool

[06:08:27.0000] <nox>
annevk: https://dom.spec.whatwg.org/#concept-event-dispatch

[06:08:37.0000] <nox>
"4. If target is relatedTarget and target is not event’s relatedTarget, then return true."

[06:08:51.0000] <nox>
Doesn't that forget to clear the dispatch flag set in step 1?

[06:23:38.0000] <annevk>
nox: yeah I guess so

[06:24:02.0000] <annevk>
nox: could use tests, guess we did not require them yet

[06:41:41.0000] <nox>
annevk: So I had clean all of our event dispatch logic,

[06:41:53.0000] <nox>
annevk: out of curiosity I looked at the spec again, now months later,

[06:41:58.0000] <nox>
and everything changed. ( ._.)

[06:49:40.0000] <annevk>
nox: shadow trees

[06:49:48.0000] <nox>
annevk: Yeah I know.

[07:00:58.0000] <nox>
annevk: Activation events stuff is new too, right?

[07:01:16.0000] <annevk>
nox: yes

[07:01:33.0000] <nox>
annevk: Does it require new stuff from other parts of the spec, or is that a new legacy thing?

[07:01:38.0000] <nox>
I.e. can I implement that in Servo?

[07:02:24.0000] <annevk>
nox: it's a legacy thing mostly used by HTML

[07:02:52.0000] <nox>
Ok.

[07:02:55.0000] <annevk>
nox: there might still be some issues with it, filed against HTML

[07:02:55.0000] <nox>
Looking into it.

[07:03:09.0000] <nox>
annevk: So I'm looking at "prompt to unload",

[07:03:25.0000] <nox>
and suddenly there is a step "if the previous event dispatch triggered any event listener",

[07:03:33.0000] <nox>
and we never had to check that before anywhere in Servo,

[07:03:36.0000] <nox>
makesmesad.

[07:03:43.0000] <annevk>
nox: I haven't studied lifecycle enough

[07:04:00.0000] <annevk>
nox: I did file an issue on investigating that claim

[07:04:04.0000] <nox>
Oh.

[07:04:08.0000] <nox>
Do you remember where?

[07:04:18.0000] <annevk>
nox: against HTML

[07:04:48.0000] <annevk>
nox: also filed one against IDB which wants to know if a listener threw…

[07:04:54.0000] <nox>
Yeah, I remember that.

[07:05:05.0000] <nox>
IDB makes me anxious.

[07:05:18.0000] <annevk>
Did that today so…

[07:05:28.0000] <annevk>
But maybe I filed a duplicate

[07:05:45.0000] <annevk>
There is some service worker funny business going on too

[07:06:18.0000] <annevk>
Software architecture is not really a thing in the web platform

[07:06:24.0000] <nox>
I mean I remember seeing that step in IDB.

[07:06:32.0000] <nox>
And then heavy breathing in a paper bag.

[07:24:22.0000] <nox>
annevk: Does step 9 of https://html.spec.whatwg.org/multipage/browsers.html#prompt-to-unload-a-document means that only one level of descendant browsing contexts is checked?

[07:28:34.0000] <nox>
Or is it just about checking that *this* document shouldn't be prompted to unload while prompting to unload?

[07:29:11.0000] <nox>
But if that's the reason this step exists, doesn't that mean beforeunloadevent can be fired twice on the same window anyway?

[07:38:34.0000] <annevk>
nox: not sure

[09:37:48.0000] <TabAtkins>
annevk: Bikeshed now correctly handles XHR's overloads with different signatures.

[09:38:41.0000] <TabAtkins>
(It previously worked if your <dfn> was a full signature, with types and such. The widlparser update let it handle signatures with just argnames correctly.)


2017-01-22
[22:24:48.0000] <annevk>
Ok, I'll have another look

[02:48:54.0000] <annevk>
And done

[02:49:00.0000] <annevk>
Also snapshots

[02:49:22.0000] <annevk>
Secure snapshots this time around

[05:17:11.0000] <nox>
annevk: What's the idiom for skipping steps?

[05:17:18.0000] <nox>
Should I label the step I want to go to?

[08:33:10.0000] <annevk>
nox: yeah

[08:33:36.0000] <annevk>
nox: see eg IPv6 parser


2017-01-23
[02:31:51.0000] <smaug____>
specs don't have 80 chars per line in source rule?

[02:32:21.0000] <smaug____>
I wonder why, especially given how bad tools github has for reviewing

[02:32:26.0000] <annevk>
smaug____: 100 generally, these days

[02:32:33.0000] <smaug____>
ah

[02:32:38.0000] <annevk>
smaug____: though that's for WHATWG

[02:32:48.0000] <annevk>
no idea what anyone else is doing

[02:33:30.0000] <smaug____>
is it possible to see a raw diff of a commit ?

[02:34:14.0000] <annevk>
smaug____: if you have a GitHub URL you can append ".diff" I think

[02:34:28.0000] <annevk>
smaug____: or maybe ".patch", not sure

[02:34:44.0000] <Ms2ger>
Both work

[02:34:52.0000] <annevk>
hah

[02:35:06.0000] <smaug____>
what kind of url

[02:35:48.0000] <annevk>
smaug____: a commit or PR URL, e.g. https://github.com/whatwg/dom/pull/397.diff

[02:36:10.0000] <smaug____>
oh, after pr

[02:36:20.0000] <smaug____>
after commit didn't seem to work in this case

[02:36:42.0000] <annevk>
smaug____: hmm yeah, weird

[02:37:05.0000] <Ms2ger>
Probably fallout from the new review feature

[02:37:24.0000] <Ms2ger>
Still works on real commit URLs like https://github.com/whatwg/dom/commit/6b7621282c2e3b222ac585650e484abf4c0a416b.diff

[02:39:25.0000] <annevk>
smaug____: notice that if you just want unified, you can also enable that https://github.com/whatwg/dom/pull/397/files?diff=unified

[02:39:45.0000] <annevk>
smaug____: see the "Unified" and "Split" buttons next to "Review changes"

[02:40:48.0000] <smaug____>
I just want wider area to look at the changes

[02:41:08.0000] <annevk>
smaug____: sounds like you should get a bigger monitor

[02:41:38.0000] <smaug____>
annevk: github UI has the changes in middle of the page

[02:41:56.0000] <smaug____>
tons of white space on left and right

[02:42:16.0000] <smaug____>
perhaps the UI has some way to make it look different ?

[03:01:08.0000] <annevk>
smaug: for the "Split" view it seems to take up as much space as it can for me, though I don't have my browser fully maximized

[03:01:14.0000] <annevk>
smaug: "Unified" does indeed seem rather poor

[04:11:50.0000] <tobie>
annevk: familiar with the distinction between named and regular constructor in WebIDL?

[04:12:17.0000] <tobie>
annevk: the former require a [[Call]] prop which seems strange.

[04:12:57.0000] <tobie>
annevk: as for example, `Image()` throws, while `new Image()` doesn't.

[04:14:15.0000] <annevk>
tobie: they are like constructers, but basically are factory methods that require new

[04:15:15.0000] <tobie>
annevk: well why don't they instead have a [[Construct]] prop?

[04:16:17.0000] <tobie>
annevk: the only named constructor I can think of right now is Image.

[04:16:37.0000] <tobie>
annevk: what are examples of other ones?

[04:17:26.0000] <tobie>
annevk: I'm not sure what "factory method that requires new" actually mean.

[04:18:19.0000] <annevk>
tobie: Audio is another one

[04:18:25.0000] <tobie>
annevk: right

[04:19:16.0000] <tobie>
annevk: I'm trying to understand what the differences are between named and non-named constructors beyond their identifier

[04:19:19.0000] <annevk>
tobie: if you used [[Construct]], would they not become Image instances rather than HTMLImageElement?

[04:19:39.0000] <tobie>
annevk: you're asking me? :D

[04:20:18.0000] <annevk>
tobie: that is why I would expect them to be different

[04:20:18.0000] <tobie>
annevk: I'll look it up in the ES spec

[04:20:36.0000] <tobie>
annevk: I think you're right in that's were the critical difference is.

[04:21:18.0000] <tobie>
annevk: I'n not sure [[Call]] works though

[05:08:50.0000] <Ms2ger>
Also Option()

[05:10:26.0000] <tobie>
Ms2ger: oh, right.

[05:11:22.0000] <tobie>
I'm trying to understand what NewTarget is precisely in the ES spec--

[05:11:45.0000] <Ms2ger>
Oh yes, that's weird

[05:11:54.0000] <tobie>
it's a reference to the constructor when using [[Construct]],

[05:12:35.0000] <tobie>
But then it only seems to be used to set the [[Prototype]] of the created object?

[05:12:55.0000] <Ms2ger>
https://tc39.github.io/ecma262/#sec-built-in-function-objects may be useful? Dunno

[05:13:21.0000] <tobie>
well, for some value of useful, certainly

[05:14:02.0000] <tobie>
"the [[Construct]] newTarget parameter provides the NewTarget value."

[05:17:43.0000] <tobie>
^ so now I know.

[05:19:50.0000] <annevk>
I was someone would write a NewTarget explainer. I keep forgetting how it works

[05:19:57.0000] <annevk>
And that it's not passed around as value isn't helping

[05:20:17.0000] <tobie>
don't get me started on that second comment

[05:21:16.0000] <annevk>
jochen__: interested in fixing https://github.com/whatwg/html/issues/2282?

[05:21:54.0000] <annevk>
jochen__: or are you still stuck outside? ☃️

[05:28:35.0000] <jochen__>
no, they let us back in :)

[05:28:46.0000] <jochen__>
sure, can do

[05:29:00.0000] <jochen__>
I also promised ms2ger a test for this :/

[05:29:46.0000] <Ms2ger>
You did?

[05:35:18.0000] <jgraham>
Ms2ger: sssh

[05:36:17.0000] <jochen__>
https://github.com/whatwg/html/pull/583#issuecomment-176751740

[05:36:41.0000] <Ms2ger>
Hah

[05:36:47.0000] <Ms2ger>
Well, where is it? :)

[05:37:23.0000] <jochen__>
good question

[05:39:51.0000] <jochen__>
do we have a cross browser way that would somehow allow for accessing a document cross origin?

[05:40:25.0000] <jochen__>
i thought firefox revokes access to the document if I pass it same origin and then use document.origin to change the current realms origin

[05:40:52.0000] <annevk>
jochen__: through document.domain you can access it

[05:41:23.0000] <annevk>
jochen__: when the documents are same origin-domain, but not same origin

[05:41:38.0000] <jochen__>
oh, so the access won't be revoked?

[05:43:11.0000] <annevk>
jochen__: you're thinking of another scenario, where documents are same origin, but then you revoke access in one of them by setting document.domain

[05:44:42.0000] <tobie>
Domenic: trying to figure out the difference between NamedConstructors and regular ones. LMK if you're around to chat about it later on.

[05:45:10.0000] <tobie>
Domenic: there's also discrepancies as to how the different vendors implement the spec.

[05:46:18.0000] <tobie>
Domenic: e.g. Image.prototype === HTMLImageElement.prototype, which per spec should be true.

[05:46:30.0000] <tobie>
Domenic: and isn't in Blink.

[05:48:22.0000] <annevk>
jochen__: https://dump.testsuite.org/js/documentdomain.htm is the one you're thinking of

[05:56:09.0000] <gsnedders>
I'm having system fonts completely fail to work on Firefox on Linux. New and old profiles. The only things that work are the generic keywords (serif, sans-serif, etc.). Any ideas?

[06:13:55.0000] <jgraham>
gsnedders: This doesn't seem like a channel where people are particularly informed about Firefox Linux fonts

[06:15:15.0000] <gsnedders>
jgraham: no, but it's not obvious where is. the support channels are equally useless, and it's in principle a support request and hence off-topic for the dev channels

[06:16:50.0000] <jgraham>
gsnedders: And yet it's a reasonably technical question that probably only someone who knows something about font lookup will be able to help with

[06:17:11.0000] <jgraham>
I'm going to assume that your reason for caring is to do with CSS tests

[06:17:18.0000] <jgraham>
Therefore it's a dev question

[06:20:50.0000] <gsnedders>
Yes. Though is does coincidentally answer why Firefox has been using different fonts for everything for years. :)

[06:31:15.0000] <JakeA>
annevk: random thought: Has enough time passed, from the bad old IE days, to do something with the return value of event handlers? For instance, service worker events could pass the return value to event.waitUntil, meaning service worker event listeners could be async functions

[06:36:17.0000] <annevk>
JakeA: event handlers already do something with the return value

[06:38:59.0000] <JakeA>
annevk: I still suck at reading specs. https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke is the best I could find in terms of a "call" point for listeners

[06:39:20.0000] <JakeA>
I couldn't see the return value being used

[06:39:22.0000] <annevk>
JakeA: event handlers are not event listeners

[06:39:55.0000] <annevk>
JakeA: an event handler is something like "onclick"

[06:40:08.0000] <annevk>
JakeA: their processing model is defined in HTML

[06:40:53.0000] <tobie>
Anyone can help me locate examples of callback interfaces with constants?

[06:41:18.0000] <JakeA>
annevk: ohhh, wasn't aware that was the difference in terminology! I guess I meant "listener" rather than "handler"

[06:41:32.0000] <annevk>
tobie: NodeFilter

[06:41:36.0000] <tobie>
WebIDL claims all interfaces should have a name prop. Seems dubious for callback interfaces

[06:41:40.0000] <tobie>
annevk: ta

[06:42:18.0000] <tobie>
So maybe not dubious.

[06:42:29.0000] <annevk>
JakeA: so you want onfetch() and addEventListener("fetch", ...) to be different with respect to return values?

[06:42:57.0000] <annevk>
JakeA: I mean, they already are somewhat, but this would really throw that in people's faces

[06:43:56.0000] <annevk>
JakeA: it's also a little weird since you have multiple listeners

[06:44:15.0000] <JakeA>
annevk: yeah, I see the problem. The same could be done for handlers. A little hacky though.

[06:44:18.0000] <annevk>
can have*

[06:44:35.0000] <annevk>
JakeA: handlers already have a return value that maps to preventDefault()

[06:44:53.0000] <JakeA>
annevk: it should be fine for multiple listeners. It wouldn't make sense for respondWith, but waitUntil makes sense

[06:45:17.0000] <JakeA>
annevk: yeah, it would be an exception to that, that's why it's a bit hacky

[06:45:29.0000] <JakeA>
Probably shouldn't try and make it work for onfetch

[06:45:34.0000] <JakeA>
if at all

[06:45:34.0000] <annevk>
JakeA: this is one of the arguments I put forward at some point as to why service workers should maybe not reuse EventTarget, but that got dismissed

[06:46:00.0000] <annevk>
JakeA: everyone was in a rush to ship...

[06:46:38.0000] <JakeA>
annevk: yeah, I saw media sessions used something different, which is a bit odd

[07:15:21.0000] <Domenic>
tobie: named constructors are just weird factory functions

[07:15:42.0000] <annevk>
Domenic: that explanation did not help when I tried it

[07:15:58.0000] <tobie>
Heh

[07:16:05.0000] <Domenic>
They're like... `function Image(x, y) { if (!new.target) { throw new TypeError("you didn't call me with new"); } return useUAMagicToCreateNewImage(x, y); }; Image.prototype = HTMLImageElement.prototpe;`

[07:16:31.0000] <Domenic>
They're pretty unrelated to constructors

[07:16:42.0000] <Domenic>
I'd definitely put them in the legacy bucket

[07:16:55.0000] <tobie>
Oh.

[07:17:29.0000] <annevk>
When are we going to prefix all legacy things with Legacy?

[07:17:36.0000] <Domenic>
It's just so much churn...

[07:17:41.0000] <Domenic>
For all dependent specs

[07:17:48.0000] <Domenic>
Maybe we need a platform-wide IDL index first

[07:17:55.0000] <tobie>
Yes!

[07:17:56.0000] <annevk>
Well this one is only used by HTML

[07:17:58.0000] <Domenic>
Although usually leaning on bz doing a Gecko code search works pretty well

[07:18:03.0000] <Domenic>
Oh really?

[07:18:04.0000] <Domenic>
That's kind of nice

[07:18:06.0000] <annevk>
Named getters is only a couple of specs

[07:18:35.0000] <annevk>
I think the churn is pretty manageable these days because of Gecko code search and GitHub PRs

[07:18:40.0000] <Domenic>
tobie: looking at the spec it seems the new.target check is not in the spec?

[07:18:47.0000] <Domenic>
not sure if that's a spec bug or what

[07:19:17.0000] <Domenic>
Huh I guess Gecko and Blink require new

[07:19:24.0000] <tobie>
Yeah, the whole area needs cleanup, frankly.

[07:19:29.0000] <Domenic>
OK I'll start filing a few bugs

[07:20:33.0000] <Domenic>
What's a platform object constructor that Edge would actually have...

[07:20:58.0000] <Domenic>
events

[07:21:08.0000] <tobie>
I would have hoped we could have one algorithm for construction, not two.

[07:22:06.0000] <Domenic>
One of the bugs i"m about to file is to rename the feature so you don't think that it's related to construction

[07:22:42.0000] <tobie>
Well, you still need to construct the returned object, don't you?

[07:22:48.0000] <Domenic>
No

[07:22:55.0000] <Domenic>
You need to use UA magic to create it

[07:23:09.0000] <Domenic>
i.e. call the algorithm supplied

[07:23:51.0000] <tobie>
...

[07:24:58.0000] <tobie>
The blink implementation is all weird, btw.

[07:25:32.0000] <Ms2ger`>
What'd you expect from a browser? :)

[07:25:33.0000] <tobie>
Image.name returns HTMLImageElement

[07:26:28.0000] <tobie>
Image.prototype === HTMLImageElement returns false.

[07:26:38.0000] <Domenic>
https://github.com/heycam/webidl/issues/276

[07:27:59.0000] <tobie>
Sorry, Image.prototype === HTMLImageElement.prototype returns false.

[07:28:35.0000] <tobie>
Oh, you saw those.

[07:28:52.0000] <Domenic>
Other bugs filed https://github.com/heycam/webidl/issues/275 and https://github.com/heycam/webidl/issues/277

[07:29:01.0000] <tobie>
I'll write the tests.

[07:29:10.0000] <Domenic>
\o/

[07:32:47.0000] <Domenic>
new.target is just "the target of the new operator" BTW. So in `new X()`, `new.target === X`. In `Y()`, `new.target === undefined`.

[07:32:53.0000] <Domenic>
This gets interesting when super-construction is involved

[07:33:09.0000] <Domenic>
so if you do `class X extends SuperX { constructor() { super(); } }`

[07:33:20.0000] <Domenic>
then inside `SuperX`'s constructor, `new.target === X` still

[08:08:02.0000] <annevk>
Domenic: oh, so you can make the Super branch on subclasses? Okay

[08:08:30.0000] <annevk>
Domenic: I think I sorta new this, but I keep forgetting since I haven't written any code with it yet and we don't have actual subclassing in IDL yet

[08:09:08.0000] <annevk>
Domenic: e.g., it  seems feasible to allow subclasses of some IDL-defined classes that don't rely on too much branding, but we haven't really gotten there it seems

[08:09:28.0000] <annevk>
Domenic: I guess we have custom elements

[08:14:30.0000] <tobie>
Domenic, annevk: While, we're at it, we do agree that callback interfaces, when they show up because of constants, should: have a name prop, a length prop of 0, a prototype === Function.prototype,  and throw both when called and constructed?

[08:17:49.0000] <tobie>
Domenic: I'm kind of confused about the relationship between [[Call]], [[Construct]] and NewTarget. I imagined that if NewTarget was not undefined, you'd be calling [[Call]], but from NamedConstructors it seems this isn't the case.

[08:18:15.0000] <tobie>
Domenic: frankly, the ES spec isn't being super helpful here.

[08:18:30.0000] <Domenic>
I don't remember the latest agreement on callback interfaces

[08:18:51.0000] <Domenic>
NewTarget is defined for both [[Call]] and [[Construct]]

[08:19:18.0000] <Domenic>
[[Construct]] almost always just delegates to [[Call]]

[08:19:44.0000] <Domenic>
I think the spec was updated for callback interfaces so probably whatever's there is what was agreed on

[08:21:03.0000] <Domenic>
Hmm I guess [[Construct]] delegating to [[Call]] is not quite right

[08:21:16.0000] <Domenic>
But they use the same algorithm for all built-in functions

[08:21:24.0000] <Domenic>
Just NewTarget is undefined for [[Call]]

[08:21:39.0000] <Domenic>
https://tc39.github.io/ecma262/#sec-built-in-function-objects

[08:22:03.0000] <tobie>
so then how can we only have a [[Call]] on NamedConstructors?

[08:22:58.0000] <tobie>
see: https://github.com/heycam/webidl/issues/275

[08:26:19.0000] <tobie>
Domenic: ^

[08:26:53.0000] <Domenic>
Why do you think we only have [[Call]]?

[08:27:12.0000] <Domenic>
Hmm I see I guess the spec does kind of imply that

[08:27:31.0000] <Domenic>
Will file an issue

[08:28:31.0000] <tobie>
Domenic: Well, we don't even need [[Call]] if calling without NewTarget needs to throw.

[08:29:00.0000] <tobie>
Domenic: we don't have it for regular constructors either, so…

[08:29:20.0000] <Domenic>
You always need [[Call]]

[08:29:23.0000] <Domenic>
Otherwise typeof is not "function"

[08:30:35.0000] <tobie>
oh. So constructors should have one too.

[08:31:35.0000] <tobie>
Domenic: see what I mean. This is all very confusing.

[08:31:37.0000] <tobie>
:)

[08:31:51.0000] <Domenic>
Constructors do have one

[08:31:57.0000] <Domenic>
https://github.com/heycam/webidl/issues/278

[08:32:27.0000] <tobie>
Domenic: implicitely. But they're explicit for NamedConstructors

[08:32:40.0000] <tobie>
Domenic: hence my confusion

[08:33:04.0000] <Domenic>
Yeah

[08:33:13.0000] <Domenic>
It seems to me like constructors were updated and named constructors were not

[08:33:15.0000] <tobie>
Domenic: well "hence" is maybe a bit exaggerated. Let's simply say it didn't help. :)

[08:33:22.0000] <Domenic>
:)

[08:33:35.0000] <tobie>
Domenic: yeah, I'm actually to blame for that. Partially.

[08:37:22.0000] <tobie>
So I was hoping to close webidl#135. The result? #135 is still open, and now I also have: #275, #276, #277, #278 and a headache.

[08:39:08.0000] <Domenic>
heh :-S

[08:39:34.0000] <nox>
tobie: But now you can fall asleep faster,

[08:39:49.0000] <nox>
tobie: "1 WebIDL ticket, 2 WebIDL tickets, 3 WebIDL tickets, ...".

[08:39:58.0000] <tobie>
nox: hehe

[08:48:30.0000] <tobie>
Domenic: why can't we express calling NamedConstructor with: Construct (NamedConstructor, args, InterfaceObject) ?

[08:49:06.0000] <Domenic>
tobie: I don't understand what that means

[08:50:28.0000] <tobie>
Domenic: referring to the Construct abstract operation in ES

[08:50:48.0000] <Domenic>
What does "calling NamedConstructor" mean?

[08:51:03.0000] <tobie>
fair question :)

[08:51:16.0000] <Domenic>
It also seems unlikely to work since e.g. HTMLImageElement just throws when you use Construct() on it

[08:51:45.0000] <Domenic>
Image() and Image(x, y) have an algorithm that uses UA magic to create HTMLImageElement instances

[08:51:46.0000] <tobie>
I meant this: new Image() -> Construct(Image, [], HTMLImageElement)

[08:51:53.0000] <Domenic>
That's circular

[08:52:13.0000] <Domenic>
new Image() *means* Construct(Image, [], Image)

[08:52:47.0000] <Domenic>
Which calls Image.[[Construct]]([], Image)

[08:52:54.0000] <Domenic>
So now we need a definition for Image.[[Construct]]

[08:53:03.0000] <Domenic>
hopefully not one that just calls Image.[[Construct]] again

[08:54:23.0000] <tobie>
What syntax do you even use to do Construct(Foo, [], NotFoo) ?

[08:54:58.0000] <Domenic>
It's impossible

[08:55:23.0000] <Domenic>
Oh no

[08:55:25.0000] <Domenic>
It's super()

[08:55:33.0000] <tobie>
Domenic: Oh! That why

[08:55:39.0000] <tobie>
*That's

[08:55:58.0000] <tobie>
Now I get it.

[08:56:00.0000] <Domenic>
super() <-> Construct(SuperclassConstructor, [], ConstructorNewOperatorWasAppliedTo)

[08:56:00.0000] <tobie>
Thanks

[08:56:03.0000] <Domenic>
\o/

[08:57:21.0000] <tobie>
So that solves a similar problem to the one we have, except not the one we have for which we prefer UA magic.

[08:57:32.0000] <Domenic>
I guess?

[08:58:51.0000] <tobie>
Alright. Thanks. I'll put this to rest and try to come with a coherent whole.

[10:16:41.0000] <tobie>
What's up with the HTML-specific extended attributes?

[10:28:13.0000] <Domenic>
They exist? They're nice?

[11:29:33.0000] <TabAtkins>
gsnedders: Does html5lib emit parse errors at all?

[11:30:28.0000] <TabAtkins>
gsnedders: (Context: https://github.com/tabatkins/bikeshed/issues/905)

[11:34:09.0000] <jgraham>
TabAtkins: It can I think, unless that got removed at some point, but I wouldn't trust them to be correct

[11:57:03.0000] <gsnedders>
TabAtkins: yes. they've not been udpated in forever and we ignore the tests for them.

[11:57:09.0000] <gsnedders>
TabAtkins: parser.errors, IIRC

[12:02:56.0000] <tobie>
Domenic: https://html.spec.whatwg.org/multipage/dom.html#htmlconstructor

[12:04:19.0000] <tobie>
Domenic: https://html.spec.whatwg.org/multipage/scripting.html#cereactions

[12:04:29.0000] <Domenic>
Yes, I know what they are.

[12:04:33.0000] <Domenic>
They exist and are nice.

[12:04:40.0000] <Domenic>
That's what's up with them?

[12:05:33.0000] <Domenic>
We'll probably add [Reflect] at some point so we can stop with the repetitive prose

[12:05:57.0000] <tobie>
Oh, misread your previous comment.

[12:07:12.0000] <tobie>
I was just wondering if there were specific plans with them.

[12:13:59.0000] <Domenic>
Not that I know of; they're working pretty well as-is.

[12:17:55.0000] <tobie>
Domenic: cool

[12:18:23.0000] <tobie>
/me didn't know about them and so was rather surprised.

[12:31:43.0000] <tobie>
Domenic: thoughts about https://github.com/heycam/webidl/issues/279?

[12:32:24.0000] <Domenic>
tobie: matching the majority of browsers seems good yeah

[12:34:12.0000] <Domenic>
Where is the ES binding for callback-interfaces-with-constants defined?

[12:37:41.0000] <tobie>
Domenic: it's sort of scattered

[12:38:24.0000] <Domenic>
They're so gross

[12:38:49.0000] <Domenic>
So far I found https://heycam.github.io/webidl/#es-interfaces but not "name"

[12:38:56.0000] <tobie>
Domenic: last paragraph of https://heycam.github.io/webidl/#es-constructible-interfaces

[12:39:13.0000] <Domenic>
Ugh

[12:39:20.0000] <tobie>
yea

[12:39:31.0000] <Domenic>
I guess that heading is what's confusing

[12:39:42.0000] <Domenic>
"Interface object call/construct behavior" might be more reasonable

[12:39:50.0000] <Domenic>
Or maybe "Interface objects as functions"

[12:40:21.0000] <Domenic>
Wait so all interface objects should have a "length" defined somewhere

[12:40:26.0000] <Domenic>
Not just callback interfaces

[12:40:33.0000] <Domenic>
Oh I see

[12:40:46.0000] <Domenic>
There's an algorithm box around the "non-callback interfaces get a length determined like this" section

[12:42:29.0000] <tobie>
Yeah, I was thinking about refactoring the whole thing

[12:42:44.0000] <tobie>
they all need length, name and proto

[12:45:51.0000] <Domenic>
So the new way to do this is to explicitly create the things and add them to the global object

[12:46:05.0000] <Domenic>
See https://heycam.github.io/webidl/#es-namespaces

[12:46:55.0000] <Domenic>
Or, for how to create functions, see https://heycam.github.io/webidl/#dfn-attribute-getter

[12:49:12.0000] <Domenic>
I guess the "add them to the global object" step is not yet revamped

[12:49:21.0000] <Domenic>
Maybe do that last

[12:49:54.0000] <Domenic>
None of this really seems necessary to solve https://github.com/heycam/webidl/issues/135 though

[12:52:56.0000] <tobie>
yeah?

[12:53:54.0000] <tobie>
Domenic: I wasn't too sure how to go about this

[12:55:14.0000] <tobie>
adding these as Asserts to constructor and NamedConstructor bindings?

[13:00:26.0000] <Domenic>
tobie: oh, no, I was thinking just add a new section (e.g. "creating objects") that states basically what the bug states

[13:01:28.0000] <Domenic>
Maybe it defines "new object" or something

[13:02:46.0000] <Domenic>
Maybe Interface definition language > Interfaces > Creating instances of interfaces ?

[13:03:04.0000] <Domenic>
Oh or maybe just a paragraph or so in https://heycam.github.io/webidl/#idl-objects

[13:04:33.0000] <tobie>
Domenic: got it

[13:57:45.0000] <Domenic>
annevk: I've lost track of what I'm on the hook for for URL reviews. Let me know what's left. It seems like things are still kind of in the negotiation phase?

[14:05:52.0000] <tobie>
TabAtkins: any plans for https://github.com/tabatkins/bikeshed/issues/812?

[14:14:14.0000] <Domenic>
tobie: re https://github.com/tabatkins/bikeshed/issues/812#issuecomment-255341823, I hear XSLT has this thing called processing instructions... ;)

[14:14:26.0000] <TabAtkins>
Boooooooo

[14:15:01.0000] <tobie>
:D

[14:28:55.0000] <smaug>
Why BodyInit uses UVString

[14:29:03.0000] <smaug>
USVString

[14:29:10.0000] <smaug>
that looks like a bug to me

[14:31:00.0000] <smaug>
annevk: still awake?

[14:31:17.0000] <tobie>
smaug: making the prose about when to use UVString is on my todo list: https://github.com/heycam/webidl/issues/84

[14:32:53.0000] <tobie>
smaug: oh, that's in fetch?

[14:32:58.0000] <smaug>
yes

[14:33:04.0000] <smaug>
it didn't use to

[14:33:10.0000] <smaug>
it was taking DOMString

[14:33:15.0000] <tobie>
smaug: don't mind me, then.

[14:33:16.0000] <smaug>
it is after all just random data

[14:34:50.0000] <smaug>
ah, it is converted to utf8 anyhow

[14:35:07.0000] <smaug>
right right, makes sense

[14:35:19.0000] <tobie>
smaug: I guess it just means it'll turn whatever string is thrown its way into an UVString.

[14:35:43.0000] <tobie>
smaug: yeah, what you said above

[14:37:06.0000] <tobie>
smaug: relevant bit in WebIDL is https://heycam.github.io/webidl/#es-USVString


2017-01-24
[16:02:14.0000] <jyasskin>
TabAtkins: I wonder if Bikeshed should automatically insert an "X depends on the Infra Standard" statement into specs it builds. Or have an easy way to produce that statement, since nearly all specs will do so.

[16:02:45.0000] <TabAtkins>
jyasskin: Reffing a term from Infra will insert it into the Index.

[16:02:51.0000] <TabAtkins>
And I think the biblio?

[16:03:27.0000] <jyasskin>
Yeah, but https://infra.spec.whatwg.org/#usage says to add one more sentence. Maybe that's unnecessary though given the references.

[16:07:51.0000] <Domenic>
The idea is that if you insert that sentence then all of https://infra.spec.whatwg.org/#conventions applies

[16:08:08.0000] <Domenic>
So then you don't need your own conformance section for example

[18:11:26.0000] <gsnedders>
UTF-16 pages need either a BOM or an HTTP header to work, right? Or have the undefined heuristics conclude they're UTF-16?

[18:11:54.0000] <Domenic>
<meta charset> seems like it'd work, and it's a more-or-less defined heuristic?

[18:12:05.0000] <gsnedders>
<meta charset> only works for ASCII-superset encodings

[18:12:41.0000] <gsnedders>
the undefined heuristic I meant is the "The user agent may attempt to autodetect the character encoding from applying frequency analysis or other algorithms to the data stream."

[18:15:31.0000] <gsnedders>
Domenic: for one, it'll never find the sequence of ASCII bytes "<meta"!

[18:15:50.0000] <gsnedders>
(well, I suppose it could, but that'd be something weird in UTF-16 :))

[18:18:56.0000] <Domenic>
Ah I see

[18:19:51.0000] <Domenic>
There's also <?xml sniffing but bz didn't want to specify what WebKit/Blink did last time I proposed it and didn't have any ideas for something better to specify. https://github.com/whatwg/html/pull/1752

[18:25:50.0000] <gsnedders>
Oh. Yeah. That.

[18:45:14.0000] <MikeSmith>
mkwst: can’t make this stuff up http://stackoverflow.com/questions/41818474/how-to-link-to-a-css-stylesheet-uploaded-on-a-ftp-server

[18:45:32.0000] <MikeSmith>
(from just today)

[21:58:25.0000] <annevk>
gsnedders: I think there is a default, utf-16 maps to utf-16le or be on the web

[21:59:35.0000] <annevk>
gsnedders: oh declare at all, hmm, yes, in theory, but there is still sniffing here and there

[22:50:12.0000] <rniwa>
annevk, Domenic: where are we adding type=module tests?

[22:55:39.0000] <annevk>
rniwa: I don't know about an agreed upon location

[22:55:54.0000] <annevk>
rniwa: http://w3c-test.org/html/semantics/scripting-1/the-script-element/ would make some sense to me (should at least have a forward pointer if not there)

[22:55:58.0000] <rniwa>
annevk: alright, i'm just add it to html/semantics/scripting-1/the-script-element

[22:56:01.0000] <rniwa>
annevk: ya

[23:23:41.0000] <annevk>
Domenic: Alex is not responding to my questions on the URL issues so I don't know

[23:24:08.0000] <annevk>
Domenic: I guess we have to wait for Alex

[23:25:28.0000] <slightlyoff>
Sorry, what'd I miss?

[23:29:24.0000] <annevk>
slightlyoff: heh, Christensen, not Russell

[23:29:54.0000] <annevk>
slightlyoff: different company too

[23:35:07.0000] <annevk>
rniwa: if you could have a quick look at https://github.com/w3c/web-platform-tests/pull/4541 that'd be great

[23:37:05.0000] <rniwa>
annevk: oh, lots of dup'ed code!

[23:38:05.0000] <annevk>
rniwa: okay, so then we should indeed ask him to rewrite

[23:38:42.0000] <rniwa>
annevk: yeah, it's really silly to duplicate the code to create a test tree for example

[23:38:51.0000] <rniwa>
annevk: that should be clearly shared

[23:38:55.0000] <rniwa>
annevk: i think duplicating assertions is okay

[23:39:13.0000] <rniwa>
annevk: because we don't want expected results to be the result of running some algorithm LOL

[23:39:20.0000] <annevk>
rniwa: add a quick comment?

[23:39:22.0000] <rniwa>
annevk: 'cause then we have to be testing that algorithm

[23:39:23.0000] <rniwa>
annevk: did

[23:39:27.0000] <annevk>
ta

[23:40:08.0000] <annevk>
I do write those sometimes, but the algorithms are somewhat straightforward

[23:52:14.0000] <annevk>
mathiasbynens: could you review https://github.com/whatwg/meta/issues/7#issuecomment-274599778 pretty please?

[23:52:25.0000] <annevk>
mathiasbynens: somehow I think you know all about .gitattributes

[23:52:26.0000] <rniwa>
annevk, Domenic: presumably nomodule should also prevent loading, right?

[23:52:48.0000] <annevk>
rniwa: yeah, there wouldn't be much point in fetching

[23:53:06.0000] <rniwa>
annevk: which part of https://github.com/whatwg/html/pull/2261/files says that?

[23:53:11.0000] <annevk>
rniwa: I guess you can test by setting a cookie and fetching it via some other means and see if the cook is set?

[23:53:16.0000] <annevk>
/me looks

[23:53:27.0000] <rniwa>
annevk: well, I can just check load events

[23:55:52.0000] <annevk>
rniwa: the paragraph at the end that's together with a note modifies "prepare a script" in a place before script fetching happens

[23:56:08.0000] <annevk>
rniwa: so if those conditions are met, no fetching would happen

[23:56:15.0000] <rniwa>
annevk: ah, okay

[00:48:44.0000] <mkwst>
MikeSmith: FWIW, I think it's a use-case worth breaking.

[00:49:30.0000] <mkwst>
annevk: I'm planning on sending you some patches to Fetch. I'm not sure how to write tests for either, since WPT doesn't seem to support either FTP or basic auth.

[00:49:38.0000] <mkwst>
But, you know, I'll work something out.

[00:50:31.0000] <annevk>
mkwst: basic auth you can implement right? there might already be some python scripts that do so

[00:50:58.0000] <annevk>
mkwst: FTP is indeed a rather interesting proposition, best to loop jgraham and gsnedders in on that one

[00:51:01.0000] <mkwst>
Yes, I'm sure I can work that out, I just didn't find anything that implemented it for me (nor is the automation part clear).

[00:51:24.0000] <annevk>
mkwst: did you look in the XMLHttpRequest dir as well?

[00:51:24.0000] <mkwst>
annevk: I did, in #testing. They said ¯\_(ツ)_/¯

[00:51:31.0000] <annevk>
good times

[00:52:38.0000] <annevk>
mkwst: I guess we can just use ftp://example.com/ and make sure the failure is reasonably fast? nearly as fast as rejecting ftp://test:test/ for instance?

[00:53:01.0000] <annevk>
mkwst: little icky of course to rely on timing, but...

[00:53:49.0000] <mkwst>
Point to a real FTP server?

[00:54:19.0000] <mkwst>
If we point to a server that doesn't exist, then the failure mode for the current behavior (network error) is the same as the success mode for the new behavior (network error).

[00:54:22.0000] <mkwst>
It just takes longer.

[00:54:56.0000] <mkwst>
Pointing to a real FTP server is icky. And Blink's test environment actually blocks the bots from making external connections, so.

[00:55:53.0000] <rniwa>
annevk, Domenic: https://github.com/w3c/web-platform-tests/pull/4611

[00:55:55.0000] <Ms2ger>
Same for Gecko

[00:57:20.0000] <annevk>
mkwst: yeah, so if a real server isn't an option, than doing a timing "attack" is a way to go, but icky

[00:57:51.0000] <mkwst>
Ok. *shrug* I'll play with it a bit to see what might make sense.

[01:04:49.0000] <annevk>
rniwa: cool, I'll let Domenic review those since he's more familiar with it

[01:09:00.0000] <rniwa>
annevk: ok

[01:31:43.0000] <mkwst>
Amusingly, it doesn't look like Blink's test server supports FTP either.

[01:32:52.0000] <annevk>
mkwst: that's a good security reason for removal

[01:32:54.0000] <MikeSmith>
mkwst: Yeah agreed about breaking that ftp use case

[01:32:56.0000] <annevk>
mkwst: complete removal, even

[01:34:10.0000] <mkwst>
annevk: Indeed.

[01:36:04.0000] <nox>
annevk: I'm currently looking at https://github.com/whatwg/html/issues/1698,

[01:36:16.0000] <nox>
annevk: does WebKit even prompt to unload, unload and abort the current document?

[01:41:23.0000] <annevk>
nox: sorry, no bandwidth for lifecycle questions

[01:41:31.0000] <nox>
Heh ok. :)

[01:41:51.0000] <annevk>
nox: my recommendation is to write many many tests covering all aspects and then figure out what everyone can agree on to move forward with

[01:46:31.0000] <annevk>
mkwst: btw, the other thing we need for the PRs is some positive noise from other vendors

[01:46:45.0000] <mkwst>
Yup. I'll poke folks.

[01:46:51.0000] <annevk>
mkwst: ta

[01:58:49.0000] <smaug>
https://fetch.spec.whatwg.org/#concept-bodyinit-extract

[01:58:55.0000] <smaug>
BufferSource part

[01:59:26.0000] <smaug>
apparently browsers do use "application/octet-stream" in some cases

[02:02:00.0000] <smaug>
at least with sendBeacond

[02:02:03.0000] <smaug>
Beacon

[02:04:08.0000] <annevk>
smaug: o_O

[02:04:24.0000] <annevk>
smaug: sendBeacon() should really not do more than HTML <form>

[02:04:36.0000] <annevk>
smaug: it violates the same-origin policy otherwise

[02:04:49.0000] <annevk>
smaug: since it doesn't use CORS at all apparently

[02:07:47.0000] <annevk>
smaug: that was fixed in https://github.com/w3c/beacon/commit/8a6fbdca25115aa5a66c32cfc37d4882384b3398 by Ilya

[02:08:02.0000] <annevk>
(not the greatest model, but I suppose it works)

[02:09:32.0000] <smaug>
annevk: it is just that baku is making some cleanups to BodyInit handling and we noticed that currently Gecko does use "application/octet-stream", and so does Blink

[02:09:48.0000] <smaug>
so it is unclear whether following the spec will break something

[02:10:22.0000] <annevk>
smaug: a Blob with an empty type defaults to that or some such?

[02:10:39.0000] <annevk>
smaug: does that result in a CORS preflight?

[02:10:41.0000] <smaug>
don't know about Blob

[02:10:50.0000] <smaug>
this is about ArrayBuffer/ArrayBufferView

[02:11:01.0000] <smaug>
/me tests Blob

[02:11:10.0000] <annevk>
smaug: okay, if that happens without preflight it would be a security issue

[02:11:28.0000] <annevk>
smaug: although maybe enshrined if both Chrome and Gecko do it :/

[02:13:54.0000] <smaug>
Blob sends no contentType

[02:14:14.0000] <smaug>
/me tries some cross-origin case

[02:16:52.0000] <smaug>
cross-origin arraybuffer* works the same way

[02:31:14.0000] <annevk>
I'm somewhat annoyed we let sendBeacon() happen, it didn't work out well

[02:31:23.0000] <annevk>
much churn and low adoption

[02:31:45.0000] <annevk>
and potentially some new holes (I believe Chrome still hasn't fixed some)

[04:25:09.0000] <tobie>
annevk: any idea why function objects exist (https://heycam.github.io/webidl/#dfn-function-object) and what makes them different from functions?

[04:27:06.0000] <annevk>
tobie: not really

[04:27:18.0000] <tobie>
annevk: darn.

[04:27:34.0000] <tobie>
Domenic: ^

[04:28:02.0000] <tobie>
annevk: thanks.

[04:31:37.0000] <nox>
tobie: Isn't it just what ES itself call these?

[04:32:40.0000] <tobie>
nox: maybe? In which case it wouldn't make any sense to define them in the WebIDL spec again.

[04:33:29.0000] <tobie>
nox: I'm actually trying to fix a bug you filed early last year

[04:33:35.0000] <annevk>
tobie: well, IDL duplicates a number of things so you have both an IDL concept thing and an ECMAScript thing, but I'm not sure if this is one of those

[04:33:48.0000] <nox>
tobie: About callback interfaces with an interface object?

[04:33:57.0000] <tobie>
annevk: it shouldn't be, it's in the bindings.

[04:34:05.0000] <nox>
tobie, annevk: https://tc39.github.io/ecma262/#sec-ecmascript-function-objects

[04:35:24.0000] <tobie>
nox: https://github.com/heycam/webidl/issues/78

[04:35:39.0000] <nox>
tobie: Can't believe I guessed that right. :P

[04:36:09.0000] <tobie>
nox: that's a sign you don't file enough bugs against WebIDL :P

[04:36:15.0000] <nox>
Mozlando meeting omg, I wasn't even working for Mozilla back then.

[04:38:30.0000] <tobie>
Oh, neat, irccloud just added how long ago someone was active in the nick autocomplete.

[04:40:29.0000] <tobie>
nox: I'm trying to parse the last 2 paragraphs of https://heycam.github.io/webidl/#interface-object

[04:41:05.0000] <nox>
tobie: What about them?

[04:41:14.0000] <tobie>
sorry, last three.

[04:42:56.0000] <tobie>
nox: non-callback interfaces are function objects

[04:43:04.0000] <nox>
tobie: Yes.

[04:43:27.0000] <nox>
tobie: The ticket you linked is about callback interface objects.

[04:43:44.0000] <tobie>
nox: yes, that's right below

[04:44:04.0000] <tobie>
nox: The internal [[Prototype]] property of an interface object for a callback interface must be the Function.prototype object.

[04:44:26.0000] <nox>
tobie: I think that's new,

[04:44:30.0000] <nox>
and that that was done for my ticket,

[04:44:34.0000] <tobie>
nox: which makes it a function, no?

[04:44:36.0000] <nox>
but my ticket was left open or something.

[04:44:55.0000] <tobie>
nox: but then the note says: Remember that interface objects for callback interfaces only exist if they have constants declared on them; when they do exist, they are not function objects.

[04:45:06.0000] <nox>
Mmh.

[04:45:14.0000] <tobie>
My feeling exactly.

[04:45:54.0000] <tobie>
Also: typeof NodeFilter => "function" in FF & Chrome

[04:47:12.0000] <nox>
tobie: https://github.com/heycam/webidl/commit/6b0eb63d6cba3ff1f90f4ef3e733749ff51751a0

[04:48:15.0000] <tobie>
alright, so I guess we just need to cleanup some of the surrounding notes.

[04:48:21.0000] <tobie>
nox: thanks

[05:03:55.0000] <annevk>
JakeA: should we prepare anything for later today? I'm thinking just saying hi and listening to what folks have to say

[05:04:18.0000] <JakeA>
annevk: I wasn't going to do much more than make sure the thread's in my head

[05:05:32.0000] <JakeA>
annevk: As far as I can tell it's "people who absolutely think the fetch should be externally abortable, else it's a no better than XHR" -vs- "people who think the fetch should only be internally abortable, else it's no better than XHR"

[05:05:56.0000] <JakeA>
Both groups are strongly opinionated, and people are doing to be disappointed with whatever outcome

[05:09:34.0000] <annevk>
JakeA: I'm not sure what those two variants would mean

[05:09:56.0000] <annevk>
JakeA: that's something I'm afraid of, that we don't have enough common language on this subject for people to understand each other

[05:10:29.0000] <JakeA>
annevk: if I pass you the result of fetch(url), should you be able to control its priority & abort it, or do only I get to do that, because I started the fetch?

[05:10:40.0000] <JakeA>
That seems to be one of the fundamental disagreements

[05:11:14.0000] <annevk>
JakeA: okay, that's clear

[05:13:32.0000] <ondras>
what improvement over XHR do I get with a tool that is not externally abortable?

[05:17:11.0000] <annevk>
ondras: you can still hand someone the "internal" abortion tool

[05:17:33.0000] <ondras>
ah

[05:17:37.0000] <ondras>
so just a terminology

[05:18:28.0000] <ondras>
or, well, you do not exactly pass the fetch around

[05:18:41.0000] <ondras>
and the result of fetch() is just a promise

[05:19:09.0000] <ondras>
so there really is no surface for a truly external abortion, imho

[05:19:15.0000] <annevk>
ondras: we could subclass the promise

[05:20:36.0000] <ondras>
would a subclassed promise be externally abortable? sounds very inconsistent with the existing promise resolution policy

[05:22:21.0000] <annevk>
There's no reason it couldn't be

[05:30:09.0000] <ondras>
annevk: consistency reason? offering fulfill/reject only to the creator, but abort to consumer?

[05:32:17.0000] <JakeA>
ondras: that's the argument. Although I don't know if it's all that bad that fetch promises are different

[05:32:31.0000] <JakeA>
I mean, once you've got the request, the consumer can consume it

[05:32:41.0000] <JakeA>
and that's seen by other consumers

[05:40:48.0000] <tobie>
Do we have cases where there is a NamedConstructor but no Constructor?

[05:41:49.0000] <tobie>
Mmm. nm.

[05:42:02.0000] <Ms2ger>
Yes

[05:42:14.0000] <Ms2ger>
All three of them

[05:42:21.0000] <ondras>
JakeA: I am not sure I follow the example/argument with "consumer consumering stuff seen by other consumers"

[05:46:08.0000] <JakeA>
ondras: const p = fetch(url); p.then(r => r.json()); p.then(r => r.json()); The second .json call will fail

[05:52:18.0000] <annevk>
JakeA: do you know what https://github.com/whatwg/fetch/issues/447#issuecomment-273633060 is proposing?

[05:52:34.0000] <annevk>
JakeA: looking at bluebird there's no external cancel/abort API as far as I can see

[05:52:37.0000] <tobie>
Ms2ger: ta

[05:52:40.0000] <annevk>
JakeA: or am I missing something?

[05:53:07.0000] <annevk>
JakeA: I am, http://bluebirdjs.com/docs/api/cancel.html

[05:53:48.0000] <annevk>
JakeA: okay, so Netflix folks would prefer some form of subclassing, jan-ivar and others are leaning more towards controller/observer patterns

[05:54:07.0000] <annevk>
JakeA: I'm personally on the fence

[05:55:26.0000] <JakeA>
annevk: Yep, and both groups are absolutely certain they're right :D

[05:56:34.0000] <tobie>
Can someone running Edge tell me what the result of running NodeFilter.prototype; is?

[05:56:42.0000] <tobie>
Pretty please.

[05:57:26.0000] <JakeA>
annevk: I'm on the fence too. Separating the controller & observer makes sense as you can pass on the observer without giving control. Eg, the service worker should only get the observer.

[05:57:41.0000] <annevk>
tobie: undefined in Edge 13

[05:57:47.0000] <tobie>
annevk: ty

[05:57:50.0000] <ondras>
JakeA: aha, interesting. I would say that both .json() calls shall return the same value.

[05:58:02.0000] <ondras>
but I obviously never tried doing so

[05:58:12.0000] <tobie>
annevk: so only chromium is weird.

[05:58:24.0000] <JakeA>
ondras: that means the value has to be buffered forever, which is a problem if the response is a 1gb video

[05:58:46.0000] <JakeA>
ondras: https://jakearchibald.com/2014/reading-responses/

[05:59:26.0000] <annevk>
tobie: also undefined in Edge 14

[06:00:49.0000] <annevk>
JakeA: do you know Tim O'Ryan btw? I never heard back from them?

[06:01:02.0000] <JakeA>
annevk: I don't :(

[06:03:34.0000] <ondras>
JakeA: okay, I see. but still, the part of the fetch transation whose state is modified by the consumer is the response. And you do not want to abort the response, but the request, right?

[06:03:38.0000] <tobie>
foolip: I'm cleaning up the WebIDL spec for NodeFilter.

[06:03:52.0000] <JakeA>
ondras: correct

[06:04:05.0000] <tobie>
foolip: realized Chromium still has a weird prototype defined on it.

[06:04:52.0000] <tobie>
foolip: all the other browsers have none defined.

[06:05:21.0000] <tobie>
foolip: do you want me to file a bug against this?

[06:06:23.0000] <tobie>
foolip: or is https://bugs.chromium.org/p/chromium/issues/detail?id=591919 where you're tracking it.

[06:06:47.0000] <annevk>
tobie: we also want to turn these into "legacy interface callback" at some point I think

[06:07:05.0000] <tobie>
annevk: yes, I've built that into my PR.

[06:07:40.0000] <annevk>
tobie: will you file downstream issues/PRs too?

[06:08:31.0000] <tobie>
annevk: oh, you want a syntax change too.

[06:09:36.0000] <annevk>
tobie: kinda, but calling it out as legacy is a good first step

[06:09:49.0000] <annevk>
tobie: not having it in the syntax still encourages copy-and-pasting unfortunately

[06:11:04.0000] <tobie>
annevk: how any callback interfaces do we have which don't have constants?

[06:11:10.0000] <annevk>
tobie: the goal is to turn IDL into something where when you ignore things prefixed with legacy, it's likely you'll do the right thing

[06:11:36.0000] <annevk>
tobie: number of callback interfaces - 1

[06:11:53.0000] <annevk>
(I don't really know)

[06:12:55.0000] <tobie>
annevk: OK, I was just wondering if there were going out too at some point, but it appears not, right?

[06:13:40.0000] <annevk>
tobie: I'm not sure what you mean?

[06:14:16.0000] <tobie>
annevk: the only ones we want deprecated are the NodeFilter kind.

[06:14:21.0000] <tobie>
annevk: correct?

[06:14:28.0000] <annevk>
tobie: no all of them

[06:14:38.0000] <tobie>
annevk: oh really?

[06:14:39.0000] <annevk>
tobie: future is plain callbacks or promises

[06:15:07.0000] <tobie>
annevk: good thing I asked. I was assuming otherwise.

[06:27:29.0000] <wanderview>
annevk: I now face the most difficult of challenges... getting google hangouts to work on my machine

[06:27:56.0000] <annevk>
wanderview: oh my, I hope my setup actually works

[06:28:23.0000] <wanderview>
annevk: I can use my laptop which works... but no matter how many times I try to install the plugin on my windows machine it never recognizes

[06:28:25.0000] <annevk>
wanderview: I do remember hitting some issue the last time around, will be a short meeting for me if that happens again

[06:28:59.0000] <Ms2ger>
Don't we have webrtc now?

[06:29:06.0000] <annevk>
Actually, I think my phone is guaranteed to work if there are no network issues, so I should be somewhat good

[06:29:13.0000] <annevk>
Ms2ger: always the troll

[06:38:35.0000] <gsnedders>
anyone happen to know what int type Opera/Presto used for CSS percentages?

[06:45:55.0000] <wanderview>
annevk: is there a document describing the current proposals on the table for the meeting?

[06:46:06.0000] <wanderview>
so I can refresh my memory before joining the call

[06:51:16.0000] <annevk>
wanderview: https://github.com/whatwg/fetch/issues/447

[06:51:17.0000] <botie>
well, https://github.com/whatwg/fetch/issues/447 is already long again

[06:51:44.0000] <wanderview>
annevk: yea... I was hoping for a summary of "latest best ideas"... but its ok

[06:51:52.0000] <wanderview>
I guess JakeA's final posts kind of do that

[06:52:20.0000] <annevk>
wanderview: yeah, I think all ideas floated so far apart from tokens are still possible

[06:53:08.0000] <JakeA>
I'll update the post after the meeting

[06:53:21.0000] <annevk>
let's see if Hangouts works on my laptop

[07:57:29.0000] <JakeA>
annevk: thanks for organising that

[07:59:24.0000] <annevk>
JakeA: thanks for writing the summary :-)

[10:09:12.0000] <annevk>
JakeA: just listened to HTTP 203, guess the meeting was timely considering your Q1 goals

[10:12:07.0000] <JakeA>
annevk: we're recording another on Thursday so will be able to talk about the results

[11:36:53.0000] <annevk>
Domenic: https://github.com/whatwg/dom is back to 99.9% HTML \o/

[11:48:09.0000] <Domenic>
Haha nice

[11:48:54.0000] <Domenic>
Oh shoot I forgot to read this channel this morning

[11:50:19.0000] <tobie>
Domenic: the interface object rabbit hole took me to https://github.com/heycam/webidl/issues/281

[11:50:32.0000] <tobie>
Domenic: Thoughts as to how to fix that?

[11:50:45.0000] <Domenic>
Hold your horses I'm only up to 4am

[11:50:59.0000] <Domenic>
;)

[11:54:20.0000] <Domenic>
tobie: I guess just don't add things to an interface prototype object if there is no interface prototype object?

[11:55:17.0000] <tobie>
Domenic: yeah. Let me rephrase that. Rewriting the interface objects using a more modern style

[11:55:37.0000] <tobie>
Domenic: I was wondering whether I should include setting the constants in them

[11:55:40.0000] <Domenic>
Ah!

[11:56:16.0000] <Domenic>
That sounds great, although, it seems important to be sure that the "spec code" for setting constants is a "function" that you call twice, one for interface and once for interface prototype object (if applicable)

[11:56:57.0000] <Domenic>
https://heycam.github.io/webidl/#es-constants

[11:57:01.0000] <Domenic>
"The location of the property is determined as follows:"

[11:57:07.0000] <Domenic>
I wonder if the two complicated cases even exist on the platform

[11:57:24.0000] <Domenic>
I think for now maybe just preserve them

[11:57:43.0000] <Domenic>
But as a follow-up consider removing them from the spec and adding restrictions (e.g., constants cannot be used on [Global]s or consequential interfaces of [Global]s) to prohibit them

[11:59:10.0000] <Domenic>
Constants are also legacy IMO

[11:59:17.0000] <annevk>
Yup

[11:59:28.0000] <annevk>
String enums

[11:59:31.0000] <annevk>
ftw

[12:00:38.0000] <tobie>
Do we *not* have any on [Global]s or consequential interfaces of [Global] at this point?

[12:01:23.0000] <wanderview>
JakeA: annevk: this github issue makes me sad... maybe we should have an easier way for sites to pre-cache requests so they can be safely used for navigations (redirects causing issue here) https://github.com/GoogleChrome/sw-precache/issues/220

[12:02:29.0000] <annevk>
tobie: EventTarget

[12:03:04.0000] <annevk>
tobie: oh no, hmm

[12:03:33.0000] <annevk>
tobie: there's a chance globals might not have constants

[12:12:11.0000] <tobie>
Domenic: so I had some further questions, but they required me to show you the legacy callback interface object creation algorithm, but I just borked my stash, so that'll have to wait.

[12:12:24.0000] <Domenic>
:(

[12:18:36.0000] <tobie>
Domenic: fixed.

[12:18:41.0000] <tobie>
Domenic: https://gist.github.com/tobie/54473a62c7f6984c3ada862e8cb68c96

[12:19:41.0000] <Domenic>
tobie: looks excellent

[12:21:21.0000] <tobie>
Domenic: so should "create a legacy callback interface object" also set the constants?

[12:22:05.0000] <Domenic>
tobie: yes, in theory. But doing that in a way that factors out constant-creation so all places that create constants use it seems a little tricky. I would do what you have as a first PR.

[12:22:17.0000] <tobie>
Domenic: cool

[12:22:22.0000] <Domenic>
It's not too tricky, but there's no reason to couple it.

[12:22:49.0000] <tobie>
yeah, it's the coupling I wasn't to sure about.

[12:22:56.0000] <tobie>
There's already a lot going here.

[12:23:45.0000] <Domenic>
annevk: tests for https://github.com/whatwg/url/pull/216 are coming at some point I assume?

[12:25:36.0000] <annevk>
Domenic: hmm I think I wrote tests already

[12:26:11.0000] <annevk>
Domenic: maybe I forgot to create a PR, there's a commit linked from the issue

[12:26:12.0000] <annevk>
/me looks

[12:27:24.0000] <annevk>
yup, fixed

[12:29:57.0000] <Domenic>
Hmm whatwg-url already passes them, let's see what the deal is

[13:11:45.0000] <tobie>
Domenic, annevk: what's the best practice for setting variables in algorithm to the result of if..else clauses?

[13:12:14.0000] <Domenic>
Meh, there are lots of options, kind of depends on how long hte computation process is

[13:12:17.0000] <Domenic>
Lemme create a gist

[13:12:52.0000] <tobie>
if: 3 steps otherwise: 1 step

[13:13:19.0000] <tobie>
Domenic: should it go in infra?

[13:13:32.0000] <Domenic>
Not sure...

[13:13:34.0000] <Domenic>
What is the 1 step?

[13:15:13.0000] <Domenic>
Here are the most obvious patterns https://gist.github.com/domenic/b621f2c538ddd1b1dc288ce7a56032e5

[13:16:52.0000] <tobie>
Oh, you do it nicely like that, making sure to define the variable first. Cool.

[13:16:59.0000] <tobie>
Thanks

[14:34:46.0000] <tobie>
Domenic: if feels weird that no [[HasInstance]] is defined for named constructors

[14:35:00.0000] <tobie>
Domenic: am I missing something?

[14:36:27.0000] <tobie>
Domenic: I'm getting both `new Image() instanceof HTMLImageElement` and `new Image() instanceof Image` return `true` in FF and Chrome.

[14:36:51.0000] <tobie>
Domenic: is that because of some kind of UA magic?

[14:42:17.0000] <tobie>
Domenic: filed https://github.com/heycam/webidl/issues/282

[14:52:35.0000] <jsbell>
Just don't try `document createElement('img') instanceof Image`

[14:58:27.0000] <tobie>
jsbell: document createElement('img') instanceof HTMLImageElement is just as bad.

[14:59:10.0000] <tobie>
jsbell: oh no, it isn't

[14:59:28.0000] <tobie>
jsbell: that's mind boggling.

[15:01:11.0000] <tobie>
Domenic: sorry. :-/


2017-01-25
[16:44:52.0000] <jsbell>
/me *shakes fist* at difference in microtask behavior between normal event dispatch and dispatchEvent(). 

[21:55:12.0000] <annevk>
Well, https://annevankesteren.nl/2012/07/passion "making HTML great again" reads awkward today

[23:51:04.0000] <foolip>
tobie: https://bugs.chromium.org/p/chromium/issues/detail?id=591919 covers the weirdness with NodeFilter I think, that is why the prototype is wrong

[23:52:29.0000] <tobie>
foolip: good.

[23:59:25.0000] <tobie>
foolip: you might have some comments to make about https://github.com/heycam/webidl/pull/283

[00:00:45.0000] <foolip>
tobie: so many changes together, are they all co-dependent?

[00:01:39.0000] <tobie>
Arguably the last one isn't. But it's a one liner.

[00:04:14.0000] <foolip>
tobie: made one comment :)

[00:04:29.0000] <tobie>
foolip: I saw. :)

[00:04:40.0000] <foolip>
clairvoyant

[00:05:34.0000] <tobie>
foolip: you're probably better off just looking at the output. It's mostly a complete rewrite of those sections.

[00:06:22.0000] <foolip>
tobie: even so it's a bunch of ES-style algorithms that I don't have much experience in reading. maybe Domenic would do a better job?

[00:12:06.0000] <tobie>
foolip: oh, I wasn't asking for a review. Just making sure you were aware of the upcoming changes and that they matched your expectations.

[00:13:35.0000] <foolip>
tobie: ah, well the summary all makes sense to me

[00:14:16.0000] <foolip>
callback interfaces are silly :)

[00:14:18.0000] <tobie>
Good.

[00:14:26.0000] <tobie>
Indeed.

[02:07:40.0000] <mkwst>
annevk: Regarding the top-level vs. nested navigation request we discussed briefly yesterday: would you prefer an approach that added a new property to requests? Or would you prefer something like splitting the `document` destination into `nested document` and `top-level document`?

[02:09:27.0000] <annevk>
mkwst: dunno, the latter might be tricky given that we already expose "document" I think

[02:09:56.0000] <mkwst>
Oh. Right. I forgot that `destination` is web-exposed.

[02:10:08.0000] <mkwst>
Ok. Scratch that.

[02:43:54.0000] <annevk>
Why would Object.getOwnPropertyDescriptor(location, "valueOf") return undefined?

[02:44:31.0000] <annevk>
Seems like that would be a bug

[02:44:35.0000] <annevk>
Good

[03:08:23.0000] <Ms2ger>
Where does that happen?

[03:20:44.0000] <annevk>
Ms2ger: in Safari TP

[03:20:47.0000] <annevk>
Ms2ger: see my most recent WPT PR

[03:25:02.0000] <Ms2ger>
Fun

[04:54:19.0000] <nox>
tobie: So, is heycam/webidl your new home now?

[04:55:00.0000] <tobie>
nox: mostly splitting my time between it and w3c/sensors (and friends).

[04:55:35.0000] <nox>
Nice.

[04:56:47.0000] <nox>
tobie: Are you changing any syntax?

[04:58:36.0000] <tobie>
nox: I think we have already (jyasskin introduced records, Domenic namespaces). Looking at mixins soonish and deprecating things.

[04:58:44.0000] <nox>
Ok.

[04:59:36.0000] <tobie>
nox: e.g. callback interface {}; -> legacycallback interface {}; or some such.

[04:59:42.0000] <nox>
Oh.

[04:59:53.0000] <nox>
tobie: I'll check whether Gecko's parser got these changes already.

[05:00:41.0000] <tobie>
nox: I'd love to find a simple system to better track those

[05:00:58.0000] <nox>
tobie: Yeah I didn't mean to update Gecko's parser,

[05:01:06.0000] <nox>
tobie: just that we rely on this one in Servo too,

[05:01:12.0000] <tobie>
on?

[05:01:22.0000] <nox>
on Gecko's parser

[05:01:41.0000] <nox>
so when I hear changes are coming I try to check whether Gecko's got updated, and updates it in Servo.

[05:01:55.0000] <tobie>
nox: I see.

[05:15:37.0000] <tobie>
suggestions on how to keep track of implementation status of features, bugs opened against rendering engines, other specs, parsers and test suites are welcome.

[05:35:56.0000] <Ms2ger>
tobie, I've talked for years about creating tooling for that

[05:36:20.0000] <ato>
Has anyone come close to a workable solution?

[05:36:32.0000] <Ms2ger>
No

[05:36:39.0000] <Ms2ger>
I don't know if anyone started

[05:36:48.0000] <ato>
Microsoft worked on a thing but when I looked at it, it didn’t really fit the bill.

[05:38:38.0000] <tobie>
I was thinking of something rather basic like create an issue with a special tag name which references the different issues.

[05:39:35.0000] <tobie>
Ideally, you'd have a small local script that would run it for you (file the issues with the different vendors or specs, collect their URLs, stick them in a GH issue in your repo)

[05:39:39.0000] <ato>
That’s not a bad idea.

[05:40:10.0000] <ato>
tobie: I wrote a small script to automatically file GitHub issues quoting which section for WebDriver: http://w3c.github.io/webdriver/webdriver-spec.html

[05:40:34.0000] <ato>
tobie: It would not be hard to look up the nearest command/definition/whatever and add a label to the issue.

[05:41:20.0000] <tobie>
yeah, I'm actually more concerned about the APIs of the browser vendors trackers

[05:41:30.0000] <tobie>
and old W3C one.

[05:43:09.0000] <ato>
The W3C tracker should be killed with fire.

[07:36:00.0000] <tobie>
What's the best practice for explainer content (outside explainer doc? informative sections? intro?) and why?

[07:37:14.0000] <jyasskin>
Informative sections, because once you have a spec, nobody goes back to look at or update the explainer.

[07:37:36.0000] <jyasskin>
slightlyoff may disagree with me on that.

[07:40:38.0000] <jyasskin>
Re the Hangouts plugin angst from yesterday: https://gsuiteupdates.googleblog.com/2016/09/new-early-adopter-programs-team-drives.html?m=1

[07:41:09.0000] <jyasskin>
Googlers should be able to make meetings use the new thing. Googlers, ask me how.

[07:42:42.0000] <tobie>
jyasskin: it would be nice to have a blueprint for specs as to what questions need to be answered and why.

[07:44:03.0000] <tobie>
jyasskin: I've seen a lot of very good explainers lately, and I suspect that's because there's a good framework around what they're supposed to contain.

[07:46:45.0000] <jyasskin>
Oooh, you mean for the content of explainers, often before there's a spec. I'll look once I get to a computer. At one point it was just "imitate Service Workers."

[07:47:25.0000] <tobie>
jyasskin: well, no. I mean all non-normative content.

[07:48:27.0000] <tobie>
jyasskin: this could include high-level content, scope clarification, goal of the document, use cases, etc.

[09:28:20.0000] <tobie>
I rarely see diagrams in specs while it sometimes helps to better grasp their content.

[09:28:21.0000] <tobie>
For example, I'm still struggling with how the different parts of WebIDL end-up exposed to the Web through their bindings.

[09:28:47.0000] <tobie>
A diagram would really help.

[09:29:06.0000] <tobie>
s/would/could/

[09:29:31.0000] <tobie>
Are we avoiding those because the tooling to make them is terrible?

[09:29:48.0000] <tobie>
s/make/make and update/

[09:38:33.0000] <jyasskin>
TabAtkins: What are the chances of integrating dot into Bikeshed?

[09:39:11.0000] <TabAtkins>
If dot exists in Python, I'm amenable.

[09:39:32.0000] <jyasskin>
https://pypi.python.org/pypi/graphviz

[09:40:33.0000] <jyasskin>
Ah, no, that's just a library to create dot files. It'd be just as easy to subprocess out to dot, for dot written inline in the spec.

[09:44:59.0000] <TabAtkins>
Yeah, subprocessing out to an external library isn't great. It won't work on many systems.

[09:46:27.0000] <gsnedders>
TabAtkins: do you not rely on any extension modules currently, or is it specifically subprocess that's the worry?

[09:46:52.0000] <TabAtkins>
I rely on a few Python modules installable from pip.  Otherwise nothing.

[09:47:22.0000] <gsnedders>
TabAtkins: pure-Python modules?

[09:47:42.0000] <gsnedders>
no, lxml is there

[09:47:54.0000] <gsnedders>
so there's already a depend on an external library

[09:47:55.0000] <TabAtkins>
(And I'm gradually moving toward the idea that I should just bake in all those modules; the pygments version differences are already annoying.)

[09:48:13.0000] <TabAtkins>
gsnedders: Sure, but that's unfortunately a *very core* dependency.

[09:49:21.0000] <TabAtkins>
Yeah, libxslt and libxml are the only external (non-Python) dependencies.

[09:49:48.0000] <TabAtkins>
Because they're dependencies of the lxml python module, which is my treebuilder, which I need because it's what the Selectors engine is built on top of.

[10:00:38.0000] <jochen__>
TabAtkins: any input on https://github.com/w3c/csswg-drafts/issues/904 ?

[10:01:23.0000] <TabAtkins>
jochen__: Official response is: yup, I need to start speccing that stuff. ^_^

[10:02:23.0000] <jochen__>
TabAtkins: i'd also be happy with a PR for referrer policy that addresses https://github.com/w3c/webappsec-referrer-policy/issues/89

[10:02:27.0000] <jochen__>
:D

[10:02:45.0000] <TabAtkins>
Sure, I'll get to this.

[10:03:01.0000] <jochen__>
cool, thx

[10:50:19.0000] <TabAtkins>
jyasskin: Oh wait it looks like graphviz is, itself, a python library https://github.com/ellson/graphviz/

[10:50:38.0000] <TabAtkins>
wait nm it's c

[10:51:19.0000] <jyasskin>
Yeah.

[12:47:13.0000] <tobie>
jyasskin: wrt to permissions, have you 1) considered permission levels (foreground, background, always on), like e.g. iOS has

[12:48:27.0000] <jyasskin>
tobie: So far, we only have foreground permissions, and we'd been thinking of things like geofencing (background location) as just having a separate permission name. But since we haven't done any background permissions, it's not at all clear that that's what we'll settle on.

[12:49:10.0000] <tobie>
jyasskin: 2) timestamps of when permission was granted. I'll want to make sure cached values such as geo coordinates are only provided to the developer if the permission was granted before they were requested

[12:49:53.0000] <tobie>
jyasskin: geofencing is really an "always on" state

[12:50:11.0000] <tobie>
jyasskin: different from background / not top-level

[12:50:16.0000] <jyasskin>
We haven't considered timestamps at all.

[12:50:31.0000] <jyasskin>
tobie: Is "background" "in a tab but not the active one"?

[12:50:59.0000] <tobie>
jyasskin: for the sake of this conversation: not top-level browsing context.

[12:51:35.0000] <tobie>
jyasskin: I guess Feature Policy is the thing for that

[12:51:39.0000] <jyasskin>
Ok, so most permissions are "background" right now, but WebNFC is planning to be foreground-only.

[12:52:03.0000] <tobie>
jyasskin: right but there's no distinction at the permission level

[12:52:11.0000] <jyasskin>
Right.

[12:52:36.0000] <tobie>
jyasskin: it's a non user-flippable thing.

[12:52:41.0000] <jyasskin>
And it would probably make sense to expose that in the shared infrastructure.

[12:54:00.0000] <jyasskin>
Right now it's not user-flippable. It's plausible to let users toggle foreground vs background. Always-on tends to require the API to be designed to support it, but we could let users degrade that to fg or bg.

[12:56:34.0000] <tobie>
jyasskin: right-- this is not to say all of the features necessarily need to be available across all three "states"

[12:58:24.0000] <tobie>
jyasskin: just recognizing they're the same "feature" despite possible API differences and different levels of implied trust and privacy/security risks

[12:58:59.0000] <jyasskin>
Yeah, you've identified something we should figure out in the permissions spec.

[12:59:06.0000] <tobie>
jyasskin: e.g.: It would be dumb to prompt a user of geofencing for geolocation access

[12:59:28.0000] <tobie>
jyasskin: it's implied

[12:59:56.0000] <jyasskin>
At the moment, we'd handle that by saying geofencing is "stronger than" geolocation (https://w3c.github.io/permissions/#permissiondescriptor-stronger-than), but we can do it in a more systematic way.

[13:03:42.0000] <tobie>
jyasskin: wasn't aware of that.

[13:09:15.0000] <Domenic>
JakeA: annevk: a bit sad that this cancelation/observer design marks the end of fetch being platform-agnostic, but such is life. (Even if DOMException "AbortError" doesn't kill that dream, addEventListener definitely does.)

[13:10:30.0000] <tobie>
Domenic: events should be a language feature

[13:11:19.0000] <Domenic>
yeah, well, there are people in Chrome opposed to that too

[13:11:19.0000] <tobie>
Domenic: no idea how to pull it off, but it's the number one thing that breaks platform agnosticism

[13:12:01.0000] <Domenic>
I guess Node could just copy EventTarget

[13:12:10.0000] <tobie>
haha

[13:12:15.0000] <Domenic>
I don't see any other path.

[13:12:40.0000] <jyasskin>
"copy"?

[13:12:53.0000] <Domenic>
Copy the design of, i.e. implement

[13:13:25.0000] <jyasskin>
Oh, yeah. And then I'd be retroactively right to treat EventTarget as a mixin! ;-)

[13:19:53.0000] <JakeA>
Domenic: is it the same Chrome people/persons?

[13:20:36.0000] <Domenic>
An overlapping group

[13:21:12.0000] <tobie>
Node people tend to say: I guess browsers could just copy EventEmitter

[13:21:46.0000] <tobie>
0.5 million modules vs. break the web

[13:59:46.0000] <Domenic>
tobie: yay for your deduplication into ConvertToInt(); it's making this SharedArrayBuffer/types-have-attributes thing I'm working on much easier.

[14:00:19.0000] <tobie>
Domenic: cool. Great to see stuff like that paying off!


2017-01-26
[21:17:30.0000] <annevk>
Domenic: open to alternatives, but suspect that Node.js would not copy CORS and such either, so you would have differences either way

[21:20:47.0000] <Domenic>
fair point, I guess they mostly copy the API shape, not the actual algorithm

[23:48:31.0000] <mkwst>
I'm skimming through HTML and DOMParsing in the hopes of understanding how `<script>` inserted via `innerHTML` is prevented from executing. I _think_ it boils down to the fragment parser generated a disconnected `Document` node

[23:49:09.0000] <mkwst>
(meaning that scripting is disabled, as it doesn't have a browsing context)

[23:49:13.0000] <mkwst>
Is that at all accurate?

[01:26:33.0000] <zcorpan>
how did i not know about Sauce Labs?

[01:40:16.0000] <zcorpan>
hmm only release versions for Edge :-|

[03:01:59.0000] <jgraham>
zcorpan: I imagine doing tech preview builds of edge is a huge pain, since you need a different Windows version for each one (afaik)

[03:03:22.0000] <zcorpan>
jgraham: ah. yeah. more reason to provide the service! :-)

[03:11:55.0000] <jgraham>
Well from our point of view sure :) From their point of view it's probably a lot of hassle for something that isn't too interesting to their core users

[03:34:08.0000] <nox>
annevk: https://html.spec.whatwg.org/multipage/#abort-a-document How does step 2 relate to Fetch termination?

[03:34:33.0000] <nox>
mkwst: Yes.

[03:46:24.0000] <annevk>
nox: open issue iirc

[03:49:05.0000] <nox>
annevk: Remember which?

[03:49:42.0000] <annevk>
nox: sorry, all part of lifecycle fun I am avoiding

[03:50:03.0000] <nox>
annevk: I'm that close to supporting .open() a la WebKit,

[03:50:09.0000] <nox>
annevk: and suddenly, massive blocker. :)

[04:08:40.0000] <Ms2ger>
annevk, is a data url iframe cross-origin now?

[04:09:35.0000] <annevk>
Ms2ger: yes (there's a bug against Gecko)

[04:20:59.0000] <hsivonen>
is blink-dev supposed to support the normal mailing list subscription mechanism? ("subscribe" to blink-dev-request)

[04:24:26.0000] <hsivonen>
I get the feeling that figuring out how to subscribe is some kind of CAPTCHA

[04:25:02.0000] <zcorpan>
mkwst: alternative idea - make <script nonce> in iframe srcdoc never run

[04:25:42.0000] <zcorpan>
but maybe there are use cases for <script nonce> in srcdoc

[04:26:31.0000] <MikeSmith>
hsivonen: blink-dev+subscribe⊙co apparently

[04:26:32.0000] <mkwst>
zcorpan: _I_ don't have any use for it, which is surely representative of the internet at large.

[04:26:48.0000] <MikeSmith>
hsivonen: according to List-Subscribe header in blink-dev messages

[04:26:50.0000] <zcorpan>
mkwst: totally. well then!

[04:29:43.0000] <hsivonen>
MikeSmith: thanks

[04:38:41.0000] <hsivonen>
MikeSmith: hmm. I still wants to subscribe my @gmail.com address instead of my @hsivonen.fi address

[04:38:59.0000] <hsivonen>
maybe I need to log out of google before clicking the subscription confirmation link on something

[04:39:10.0000] <hsivonen>
s/I still/It still/

[04:40:50.0000] <MikeSmith>
or try it with lynx :)

[04:44:05.0000] <hsivonen>
ah, maybe I should reply to the email

[04:46:43.0000] <Domenic>
Woah, if you get up at 7:30am instead of 11:30am the email load is remarkably reduced

[04:47:38.0000] <hsivonen>
today's lesson: confirm google groups subscriptions by replying. Don't click the obvious button.

[04:52:27.0000] <nox>
annevk: Didn't find any issue about unloading a document.

[04:57:23.0000] <Domenic>
I know there are issues about *discarding* a document, not sure about unloading

[05:32:27.0000] <nox>
Domenic: Oh right.

[05:33:36.0000] <nox>
Domenic: Didn't find one that relates to cancelling fetch tasks either. :)

[05:34:12.0000] <annevk>
Domenic: so there's an issue about fetch groups somewhere

[05:34:19.0000] <annevk>
nox: ^^

[05:34:32.0000] <annevk>
nox: and that's basically what needs to be sorted in order to define this

[05:35:01.0000] <annevk>
nox: sorry for the delay, I'm having a bad couple of days

[05:35:16.0000] <nox>
annevk: No problem.

[05:53:29.0000] <Domenic>
nox: the one I remember is https://github.com/whatwg/fetch/issues/416

[06:47:05.0000] <inoas>
Domenic: would you revisit this issue? https://discourse.wicg.io/t/declarative-shadow-dom/1904/6

[06:47:48.0000] <inoas>
A strong decoupling of CSS (no leaks outside, optional leaks inside) could be achieved

[06:48:21.0000] <inoas>
Combined with <link rel="preload"> and/or HTTP2 it would make sense to again write a ton of small css files which then get fetched based on whatever you need, probably already in the cache for further requests, be applied to multiple shadow-doms etc

[09:14:02.0000] <Domenic>
inoas: nothing new has been said on that issue that would make me revisit it

[09:15:12.0000] <inoas>
Domenic: I'd highly value a declarative approach that does not make javascript mandatory

[09:15:25.0000] <inoas>
it would allow soft web components just consisting out of html and css

[09:15:33.0000] <Domenic>
i'm not at all interested in a web without javascript

[09:15:50.0000] <inoas>
you are not interested in choice either?

[09:16:42.0000] <Domenic>
not in that sense, no. when we build features we have to make choices that necessarily close of other choices. I think it's fine to close of bad choices, like artificially restricting what technologies you use to build your pages.

[09:17:04.0000] <inoas>
well the declarative approach opens up things instead of restricting

[09:17:11.0000] <Domenic>
In other words, if you choose to artificially restrict yourself out of JavaScript, you're choosing to remove a lot of features from the platform, and that's fine with me.

[09:17:17.0000] <Domenic>
No. It is strictly less powerful.

[09:17:22.0000] <Domenic>
It is a restriction.

[09:17:40.0000] <inoas>
you see some clients like to restrict javascript - and the primary reason is security

[09:17:56.0000] <Domenic>
That's fine. They then don't get a lot of web features.

[09:17:58.0000] <inoas>
but that aside, have you been around when NN4 has been used?

[09:18:08.0000] <Domenic>
Yes, I coded my first websites against NN2

[09:18:14.0000] <inoas>
now when you disabled javascript, then css would not load

[09:18:42.0000] <inoas>
the conclusion is, if you use shadow-dom-technology to isolate css, then if a client decides to disable javascript, it won't see css

[09:18:50.0000] <Domenic>
yep.

[09:18:59.0000] <inoas>
that is not progressive but restrictive web

[09:19:13.0000] <Domenic>
i disagree, as i've stated before. this isn't going anywhere.

[09:19:29.0000] <inoas>
I am very saddened by the way this is treated

[09:19:46.0000] <Domenic>
yeah, i am saddened too, that people think disabling js is a realistic thing to build future features like shadow DOM on

[09:19:48.0000] <inoas>
There is huge gains if css can be isolated to "modules" or "components"

[09:19:55.0000] <Domenic>
i agree!

[09:20:02.0000] <Domenic>
you just need to use the whole web platform to do that

[09:20:06.0000] <Domenic>
not an artificially restricted subset

[09:20:06.0000] <inoas>
so browser vendors don'T want to double-implement things

[09:20:22.0000] <inoas>
Domenic: that doesn't counter my agrument

[09:20:29.0000] <inoas>
I wish javascript was save but it is mostly not

[09:20:56.0000] <inoas>
and by that reason there is a lot of disabling going on

[09:21:02.0000] <Domenic>
[citation needed]

[09:21:05.0000] <inoas>
making javascript enabled to have css features, why?

[09:21:25.0000] <inoas>
2.29mio users

[09:21:25.0000] <inoas>
https://addons.mozilla.org/de/firefox/addon/noscript/

[09:21:36.0000] <inoas>
and no I don't want to run no-script

[09:21:49.0000] <inoas>
I am okay with single page applications running ELM or ReactJS

[09:21:54.0000] <inoas>
nothing to see without javascript

[09:22:38.0000] <Domenic>
a statistic that represents how much disabling is going on is number of pageviews with javascript disabled, not number of people who have ever downloaded noscript.

[09:22:57.0000] <inoas>
Domenic: so what is more likely: a declarative way to "create" a shadow-dom root node and reusing the encapulation shadow-dom technology already does and thus reinforcing shadow-dom WITH javascript alongside, e.g. SYNERGY

[09:23:11.0000] <inoas>
or a separate html/css based feature that isolates CSS?

[09:23:19.0000] <Domenic>
neither seem likely at all to me

[09:23:42.0000] <inoas>
Domenic: so you don't like users to chose?

[09:23:51.0000] <inoas>
what about future UAs that may depend on another scripting language?

[09:24:00.0000] <inoas>
or none at all because you want static renders like say - epaper?

[09:24:01.0000] <Domenic>
Please don't put words in my mouth.

[09:24:12.0000] <Domenic>
This conversation is going in circles so I'm going to have to go back to work, osrry.

[09:24:23.0000] <inoas>
Then let me rephrase: how would you allow users to chose?

[09:24:38.0000] <inoas>
This is very saddening

[09:26:43.0000] <inoas>
Domenic: I just hope you think about it, neither WhatWG nor W3C are democratic, but industry bodies, still people use the web every day and they rely on technologies that leave people choices. And the web platform has been that opposed to desktop apis or say flash... All the best with your work!

[09:30:05.0000] <amfc>
question: I think there should be a way to have a "single window" app in the web. some api like calling window.handleNewLocationsInThisWindow(urlPrefix) that will make all requests to same domain with speficied urlPrefix just do the equivalent to a local setLocation()

[09:30:38.0000] <amfc>
of course only valid in your own same protocol + domain

[09:31:16.0000] <amfc>
so the question is, is there anything relevant being discussed?

[09:31:22.0000] <Domenic>
amfc: I remember there were talks of that around service worker

[09:31:33.0000] <Domenic>
let me try to find the thread

[09:32:17.0000] <amfc>
i think it quite natural. it's the common case in desktop apps to remain single window. when you port your app to desktop and you follow links you end up with many of them open

[09:34:01.0000] <Domenic>
I'm not a big fan, I feel like the freedom to do multi-instances is a great part of the web so far, but I understand that a lot of app developers want this as part of their transition from working on desktop apps that have such control

[09:34:39.0000] <TabAtkins>
That's literally one of the worst parts of native apps. :(

[09:34:54.0000] <Domenic>
https://github.com/w3c/ServiceWorker/issues/720 and https://github.com/w3c/ServiceWorker/issues/758

[09:35:24.0000] <TabAtkins>
Like I can't go searching for a YT video without interrupting the one I'm currently watching, or open several related videos from a single video (if I watch one and then go back, the list changes).

[09:35:38.0000] <Domenic>
I guess https://github.com/w3c/ServiceWorker/issues/602 too

[09:35:39.0000] <amfc>
Domenic: I would certainly not limit it, but change the default

[09:35:57.0000] <amfc>
something like "open in same window" being a default and open in a new window an alternative

[09:36:12.0000] <Domenic>
isn't that already how it works?

[09:36:13.0000] <TabAtkins>
That's already the default.

[09:36:18.0000] <Domenic>
you need target="_blank" to change the default

[09:36:29.0000] <TabAtkins>
Or a middle-click or Alt+click

[09:36:31.0000] <amfc>
i mean default from other browser tabs

[09:36:42.0000] <TabAtkins>
Still the default.

[09:37:05.0000] <TabAtkins>
Nothing moves to a new tab unless the page author or the user explicitly asks for it to.

[09:37:10.0000] <amfc>
so you click on a link on tab 3 and by default we open the link in tab 1 if it's already open

[09:37:12.0000] <tobie>
Domenic: the use case for that is to avoid having 50+ github window open at the end of the day if you receive updates by email

[09:37:50.0000] <TabAtkins>
tobie: Anti-use-case: Working on one GH issue, take a break to look at email and check on some other GH threads, whoops you just lost the stuff you were first working on.

[09:37:54.0000] <tobie>
amfc: I think you can build this on top of service workers

[09:38:37.0000] <Domenic>
I don't think you can yet, thus the open SW issues

[09:38:38.0000] <tobie>
TabAtkins: yeah, that's trivial to work around provided you understand the sate of your app

[09:38:51.0000] <tobie>
state

[09:39:03.0000] <TabAtkins>
tobie: Tell that to every native app I've ever encountered that consumes URL intents. :(

[09:39:09.0000] <TabAtkins>
Such as the aforementioned YouTube.

[09:39:27.0000] <tobie>
heh

[09:39:28.0000] <amfc>
tobie, you mean open a new window that finds the old window and then closes itself? can it focus it?

[09:39:38.0000] <TabAtkins>
A more direct problem: I can't open two GH issues at the same time to compare things.

[09:39:47.0000] <TabAtkins>
(Under this proposal.)

[09:40:01.0000] <amfc>
TabAtkins, you should be able to open two windows

[09:40:13.0000] <TabAtkins>
(Just like I can't, today, play two YT videos at the same time in the native app, but can easily do it on desktop if I so choose.)

[09:40:25.0000] <TabAtkins>
"Windows" and "Tabs" aren't meaningfully distinct.

[09:41:41.0000] <amfc>
TabAtkins, but being a less common case, it would become a little harder. my idea would only trigger itself on "open from outside" (like an email link) or be the default action on clicking links to a declared single window tab from another one.

[09:42:12.0000] <amfc>
TabAtkins, I would still leave a second option within the context menu (or ALT click) to open it in a new window

[09:42:34.0000] <amfc>
or you could copy the url, open it in another tab and then paste it

[09:42:41.0000] <TabAtkins>
New windows are, themselves, an extremely annoying UI affordance most of the time, and why we invented tabs in the first place. ^_^

[09:43:29.0000] <amfc>
TabAtkins, of course I don't mean that, i mean open it as a new tab

[09:45:08.0000] <amfc>
Domenic, thanks! I can see https://github.com/w3c/ServiceWorker/issues/758 is exactly what I mean

[10:00:23.0000] <smaug>
/me wonders how often people just dump [SecureContext] to webidl by thinking it is then somehow "secure" or that information can't leak to http anymore

[10:04:01.0000] <annevk>
smaug: they don't dump it nearly enough

[10:05:39.0000] <smaug>
annevk: possible, but I still have the gut feeling that there is the assumption that it makes something really safe

[10:06:23.0000] <smaug>
yet there are still rather trivial communication channels between SecureContext and non-SecureContext

[10:06:48.0000] <annevk>
window.open()?

[10:07:02.0000] <smaug>
BroadcastChannel, localStorage...

[10:07:30.0000] <smaug>
(well, and in chromium also bugs like https://bugs.chromium.org/p/chromium/issues/detail?id=649686)

[10:07:42.0000] <annevk>
Oh yeah, if you have two tabs open.

[10:08:05.0000] <annevk>
So we did make shared workers not work like that, but localStorage / BroadcastChannel went too far?

[10:08:17.0000] <annevk>
It's been so long since we discussed all this...

[10:08:33.0000] <annevk>
But I don't think it was ever meant to be perfect, it's just for encouraging HTTPS adoption

[10:08:50.0000] <annevk>
In particular HTTPS in the address bar, rather than just in a proxy <iframe>

[10:10:11.0000] <smaug>
sure, but SecureContext as a name kind of hints about well, secure context :) but then it actually has some open doors to non-secure contexts, and those doors might not be obvious to everyone

[10:11:08.0000] <smaug>
I'm just a tad worried that [SecureContext] is added to specs without understanding what it actually means

[10:11:32.0000] <smaug>
and that might lead to some unexpected behavior

[14:30:45.0000] <zcorpan>
mkwst: no. it's this bit: "If the parser was originally created for the HTML fragment parsing algorithm, then mark the script element as "already started". (fragment case)" in A start tag whose tag name is "script"

[14:32:06.0000] <zcorpan>
mkwst: without that, the script would execute when inserted to the document. (and createContextualFragment unsets it)

[14:50:50.0000] <zcorpan>
Domenic: if you say <meta charset=utf-16> (with no 0x00 bytes), the chosen encoding is utf-8 :-)

[15:10:51.0000] <Domenic>
Well that's pretty great.


2017-01-27
[00:26:18.0000] <annevk>
JakeA: one thought about the naming, we already have MutationObserver

[00:27:23.0000] <annevk>
JakeA: I don't think having FetchObserver would be really problematic, but on the other hand MutationObserver is used more globally and there's been talk about having something similar for Fetch too, so maybe we should try to avoid that name

[00:28:58.0000] <JakeA>
annevk: I thought about that pattern too (also intersection/resize observer). It would be simpler for other platforms to implement than addeventlistener I guess

[00:29:37.0000] <JakeA>
annevk: I keep thinking about the "push" case, which might have side-effects

[00:30:09.0000] <JakeA>
annevk: given that push delivers request/response, we may only want to allow one listener

[00:30:52.0000] <annevk>
JakeA: fair point, though service workers doesn't follow that

[00:31:01.0000] <JakeA>
annevk: I guess the fetch event does too, and that allows multiple listeners. But a single observer may be in two threads

[00:31:07.0000] <JakeA>
Hah snap

[00:31:37.0000] <JakeA>
If you fetch from a page, the observer will be available to the page and the service worker

[00:31:49.0000] <annevk>
Perhaps we should restrict those features to the fetcher?

[00:32:13.0000] <annevk>
Seems hard to share them without cloning and cloning would be bad.

[00:32:25.0000] <annevk>
Perhaps you can opt-in to cloning and then they'd be shared.

[00:32:59.0000] <annevk>
The other thing I was wondering about is whether H2 push is associated with a request-response pair or with a connection

[00:33:09.0000] <annevk>
I think it's the former and then exposing them here makes a lot of sense

[00:33:16.0000] <annevk>
If it's the latter however it wouldn't

[01:03:28.0000] <JakeA>
annevk: push is associated with an existing stream, so it's linked to an initial request

[01:03:51.0000] <JakeA>
annevk: I also agree that push oddly is a better fit on the controller than the observer

[01:10:44.0000] <ondras>
https://tabatkins.github.io/specs/css-nesting/

[01:10:50.0000] <ondras>
is this implemented anywhere?

[01:38:15.0000] <JakeA>
ondras: not that I'm aware of

[01:38:54.0000] <JakeA>
ondras: aside from http://cssnext.io/features/#nesting

[01:39:59.0000] <ondras>
JakeA: yeah, thanks, was interested in native implm

[01:40:03.0000] <ondras>
*impl

[01:44:27.0000] <JakeA>
annevk: there's some discussion of the push stuff already btw https://github.com/whatwg/fetch/issues/447#issuecomment-275178927

[01:46:21.0000] <annevk>
JakeA: only exposing the request is interesting

[01:46:33.0000] <JakeA>
annevk: yeah, just writing something about that now

[06:14:02.0000] <tobie>
Domenic: bringing extension attributes to types is really exciting. Will review early next week

[06:16:14.0000] <wanderview>
/me wishes gmail used rel=noopener when opening multiple account windows.

[09:07:15.0000] <wanderview>
annevk: can an hsts upgrade affect a worker script load?

[09:07:56.0000] <annevk>
wanderview: so https://example.com/ with HSTS loads http://example.com/worker.js?

[09:08:36.0000] <annevk>
wanderview: that should work, but implementations may very still I think

[09:08:51.0000] <annevk>
wanderview: the same-origin check was done before the network fetch at some point

[09:08:54.0000] <wanderview>
annevk: I guess... or could it happen if an http://example.com tries to load the insecure worker script?  can the csp only apply to the worker URL?

[09:09:20.0000] <annevk>
CSP or HSTS?

[09:09:27.0000] <wanderview>
HSTS I guess

[09:09:32.0000] <wanderview>
sorry, I don't know this stuff at all

[09:09:46.0000] <wanderview>
is HSTS scoped by URL or does it apply to an entire origin?

[09:09:49.0000] <annevk>
http://example.com is already insecure

[09:10:10.0000] <annevk>
HSTS applies to an domain, potentially including subdomains

[09:10:18.0000] <annevk>
s/an/a/

[09:10:27.0000] <wanderview>
hmm

[09:15:04.0000] <annevk>
wanderview: happy to help, but I need a little more :-)

[09:15:31.0000] <wanderview>
annevk: I'm just trying to figure out if gecko allows redirects with a changing origin in any case... we have some non-standard stuff unfortunately

[09:16:58.0000] <wanderview>
looks like we do same origin checks before hsts upgrade could occur

[09:19:09.0000] <wanderview>
also, TIL today... Edge has nested workers!

[09:19:18.0000] <annevk>
wanderview: that sounds like old worker code indeed

[09:19:27.0000] <wanderview>
for some reason I thought gecko was the only code base with that complexity penalty

[09:19:27.0000] <annevk>
wanderview: I believe bz noticed that the other day too

[09:19:45.0000] <wanderview>
annevk: which part is old in this case?

[09:19:49.0000] <wanderview>
or sounds old

[09:20:08.0000] <annevk>
wanderview: doing a same-origin check in the constructor rather than as part of fetch

[09:20:30.0000] <wanderview>
annevk: we do it as part of the fetch... but earlier than hsts upgrade can occur

[09:20:52.0000] <wanderview>
I have to run... meeting someone for lunch

[09:20:53.0000] <wanderview>
thanks for the help

[09:21:45.0000] <annevk>
wanderview: oh wow, that would mean everything is affected, hmm

[09:23:54.0000] <annevk>
wanderview: actually Fetch does the same, I thought we didn't for same-origin requests, but it seems like we do it for all of them

[09:24:05.0000] <annevk>
wanderview: so what you're observing is likely just correct

[09:24:53.0000] <annevk>
wanderview: that is, it gets blocked in step 5 of https://fetch.spec.whatwg.org/#concept-main-fetchhttps://fetch.spec.whatwg.org/#concept-main-fetch due to being mixed content, HSTS upgrade only happens in step 9

[09:37:38.0000] <Domenic>
annevk: I found an old link in https://lists.w3.org/Archives/Public/public-whatwg-archive/2010Nov/0074.html that goes to http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface which redirects to domparsing.spec.whatwg.org which is broken. Should probably redirect to actual domparsing.

[09:38:19.0000] <annevk>
Domenic: I think it used to redirect

[09:38:37.0000] <annevk>
Domenic: you probably need to talk to Hixie, I suspect something broke

[09:38:58.0000] <Domenic>
I was kind of hoping we had the keys to html5.org

[09:39:04.0000] <Domenic>
And domparsing these days, ideally.

[09:39:19.0000] <annevk>
Domenic: so domparsing has a .htaccess that redirects

[09:39:38.0000] <annevk>
Domenic: it's just that domparsing doesn't have HTTPS for some reason

[09:40:16.0000] <annevk>
Domenic: I could change the html5.org redirect, but it seems the larger problem is domparsing not being up

[09:40:29.0000] <Domenic>
yes, i think it'd be good to fix both

[09:40:41.0000] <Domenic>
multi-redirects seem less than ideal

[09:41:30.0000] <annevk>
Domenic: commented in the issue

[15:50:33.0000] <tobie>
Domenic: trying to add your deploy script to w3c/sensors. Getting a request for the deploy_key passphrase on travis which times out.

[15:50:42.0000] <tobie>
Domenic: any idea?

[15:50:47.0000] <tobie>
Domenic: https://travis-ci.org/w3c/sensors/jobs/196039411

[15:52:07.0000] <Domenic>
tobie: don't use a passphrase?

[15:52:57.0000] <tobie>
Domenic: It won's ask for it anyway?

[15:53:12.0000] <tobie>
Domenic: I could have checked instead of asked. sorry. :)


2017-01-28
[16:24:20.0000] <tobie>
Domenic: dropping the passphrase helps. :D

[03:44:30.0000] <MikeSmith>
for the fetch API is there an equivalent of the XHR responseURL property?

[03:45:50.0000] <MikeSmith>
specifically, if a request gets redirected to a different URL does the fetch API expose the new URL in some (as XHR does with the responseURL property)?

[03:47:24.0000] <MikeSmith>
hmm is that was Response.url is?

[03:47:52.0000] <MikeSmith>
“A response has an associated url. It is a pointer to the last response URL in response’s url list and null if response’s url list is the empty list.

[03:48:03.0000] <MikeSmith>
so yeah I guess that is it

[03:48:34.0000] <MikeSmith>
given that URLs for redirects get added to the url list for the response

[04:09:51.0000] <annevk>
MikeSmith: yup

[04:26:40.0000] <MikeSmith>
annevk: thanks yeah I sometimes still get stuck in oldthink and forget that the fetch API makes all this stuff a lot easier and more intuitive

[04:27:14.0000] <annevk>
MikeSmith: fetch is dubleplusgood

[08:55:02.0000] <KevinMarks_>
Except that you can't get the intermediate urls

[11:22:54.0000] <annevk>
Can only offer that through opt-in

[12:00:30.0000] <iliakan>
what's the principal difference between dom.spec and html.spec?

[12:00:40.0000] <iliakan>
I see there's a lot of DOM stuff in html.spec.whatwg.org

[12:02:07.0000] <annevk>
iliakan: they are intertwined

[12:02:31.0000] <iliakan>
yeah, but what's the idea of difference?

[12:02:42.0000] <annevk>
iliakan: DOM is lower-level when it comes to node tree fundamentals

[12:02:55.0000] <iliakan>
ummm

[12:03:33.0000] <annevk>
iliakan: DOM defines node trees and events, HTML builds on that?

[12:09:45.0000] <iliakan>
so DOM is only basics about tree and manipulation?

[12:10:04.0000] <iliakan>
and Events

[12:24:35.0000] <annevk>
iliakan: pretty much

[13:16:23.0000] <iliakan>
is DOM spec intended for browsers only?

[13:16:46.0000] <iliakan>
or for any DOM parsers, server-based etc

[13:21:46.0000] <iliakan>
https://www.w3.org/TR/cssom-1/ (CSS objects) are not developed by WhatWG?


2017-01-30
[17:57:25.0000] <MikeSmith>
XhmikosR: in vnu.jar 17.1.0 command-line checking of URLs is broken

[17:58:01.0000] <MikeSmith>
XhmikosR: so just released 17.2.0 with the fix

[22:10:55.0000] <KiChjang>
can someone explain what the relationship is between WHATWG and IETF?

[22:11:26.0000] <boogyman>
complementary

[23:14:24.0000] <MikeSmith>
hsivonen: if you can make a little time to look at https://github.com/validator/validator/issues/456 I would much appreciate it

[23:32:01.0000] <hsivonen>
MikeSmith: looking

[23:37:26.0000] <hsivonen>
time flies. It's been over a decade since I wrote that code.

[23:47:47.0000] <MikeSmith>
hsivonen: wow yeah

[23:53:50.0000] <gsnedders>
wow.

[00:09:08.0000] <zcorpan>
we're all getting *old*

[00:09:24.0000] <tobie>
heycam|away: you around today? Would love to help get you through https://github.com/heycam/webidl/pull/221

[00:09:42.0000] <zcorpan>
including gsnedders

[00:10:07.0000] <tobie>
heycam|away: just installed it for some other repo, can assist to make the process faster

[00:37:49.0000] <XhmikosR>
MikeSmith: thankd, published a new grunt-html version

[00:38:54.0000] <MikeSmith>
XhmikosR: cheers

[00:57:02.0000] <hsivonen>
MikeSmith: my current main suspect is findInsertionPoint() in RowGroup.

[01:04:56.0000] <MikeSmith>
hsivonen: ok looking at that myself too (and hoping something jumps out…)

[01:07:09.0000] <MikeSmith>
so yeah seems like a good place to step through

[01:07:45.0000] <hsivonen>
MikeSmith: yeah. trying to set up debugging for the validator again

[01:09:05.0000] <MikeSmith>
could just drop in some System.out.println too

[01:09:40.0000] <MikeSmith>
anyway will try it myself too

[01:10:18.0000] <hsivonen>
so. many. src. folders. in. jing-trang

[01:11:13.0000] <MikeSmith>
ah yeah, James has some idiosyncratic ways of doing things

[01:12:21.0000] <MikeSmith>
as far at the table-checker code I can’t claim to have ever understood itーbut I never have had to, because I’ve never had to fix any bugs

[01:12:25.0000] <MikeSmith>
in it

[01:13:26.0000] <MikeSmith>
because other than this exception that gets thrown extremely rarely I do not recall there ever have been any bugs in there

[01:13:49.0000] <hsivonen>
afaict, the code that throws the exception is OK.

[01:13:56.0000] <MikeSmith>
sure yeah

[01:14:46.0000] <MikeSmith>
that code itself is pretty simple and intuitive

[01:15:30.0000] <hsivonen>
so I accidentally added the jing-trang src folders. should have added src/main folders

[01:15:37.0000] <MikeSmith>
ah yeah

[01:16:40.0000] <MikeSmith>
(and for the record that exception has been thrown in the W3C service only maybe 5 times since I started persistently logging the exceptionsーfive times out of tens of millions of requests)

[01:24:52.0000] <hsivonen>
MikeSmith: which XSLT engine if any does the W3C instance of V.nu use these days?

[01:25:41.0000] <hsivonen>
MikeSmith: is schematron support even supposed to build anymore?

[01:27:55.0000] <MikeSmith>
hsivonen: the Web UI for the W3C service does not expose anything that would exercise the schematron/XSLT stuff

[01:28:31.0000] <MikeSmith>
I guess the V.nu network API does though, so somebody could trigger it using that

[01:29:02.0000] <MikeSmith>
but anyway whatever is there still builds afaik

[01:29:25.0000] <MikeSmith>
the XSLT engine that gets used is the Saxon9 I think

[01:29:42.0000] <MikeSmith>
from the jar of that in the jing-trang repo

[01:30:03.0000] <hsivonen>
oh. I guess Eclipse's wizard failed to scan for it

[01:30:34.0000] <MikeSmith>
the stock V.nu build still includes that Saxon9 jar in the runtime classpath I think

[01:31:09.0000] <MikeSmith>
ah yeah, I don’t set up my Eclipse to handle the jing-trang sources as project

[01:32:30.0000] <hsivonen>
oh. there's a checked-in .classpath and I wasn't supposed make Eclipse jing-trang-aware

[01:35:48.0000] <MikeSmith>
oh

[01:35:57.0000] <MikeSmith>
that is probably my fault then

[01:37:36.0000] <hsivonen>
Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded

[01:37:42.0000] <hsivonen>
haven't seen that one before

[01:40:28.0000] <MikeSmith>
ah

[01:40:34.0000] <MikeSmith>
yeah I have

[01:41:11.0000] <hsivonen>
looks like my old settings didn't have enough heap

[01:42:25.0000] <MikeSmith>
yep, upped it to 512 in the build script a while back

[01:42:39.0000] <MikeSmith>
but Eclipse doesn’t use that

[01:43:33.0000] <MikeSmith>
I think the language-detector code is what pushed it over the limit

[02:02:25.0000] <hsivonen>
MikeSmith: anyway, now that I'm stepping through this, it's clear that findInsertionPoint() is wrong. Specifically, the second break.

[02:04:47.0000] <MikeSmith>
hsivonen: not clear to me that it’s wrong :)

[02:05:03.0000] <MikeSmith>
but I’ve not been able to concentrate on it seriously yet

[02:05:40.0000] <MikeSmith>
at least from the code standpoint (as opposed to troubleshooting) it does not seem clearly wrong, looking at it

[02:06:01.0000] <MikeSmith>
nad it ou

[02:06:05.0000] <MikeSmith>
oofs

[02:06:55.0000] <MikeSmith>
it does work pretty much all the time, only not in some very rare exceptions

[02:09:08.0000] <hsivonen>
sadly, it seems that the file was moved in the CVS era, so we don't have (easily findable?) history for the introduction of the second break

[02:09:28.0000] <hsivonen>
is the second break a premature optimization or does it serve some deeper purpose?

[02:10:32.0000] <hsivonen>
it looks a whole lot like a mere premature optimization to me

[02:12:56.0000] <hsivonen>
indeed, this whole nextOldCell thing seems to be an optimization

[02:14:00.0000] <hsivonen>
I suppose it's somewhat reasonable try not to get posted on http://accidentallyquadratic.tumblr.com/

[02:14:55.0000] <MikeSmith>
haha

[02:15:56.0000] <hsivonen>
I guess the root cause design bug is trying handle both less than left and greater or equal than right in the same freeSlot() method

[02:16:15.0000] <MikeSmith>
never knew about that site but if there’s ever been a person who deserves to be memorialized there, it’s me

[02:16:38.0000] <MikeSmith>
well some of those are pretty sophisticated flubs

[02:17:43.0000] <MikeSmith>
compared to mine which relative to those are more like produced-by-monkey-banging-away-at-keyboard

[02:18:49.0000] <MikeSmith>
anyway as far as that code, there should be some wise saying that warns us about the dangers of premature optimization

[02:19:24.0000] <MikeSmith>
so we would know ahead of time there was some various kinds of risk from doing that

[02:21:19.0000] <Ms2ger>
/me wishes anyone cared about FileAPI

[02:25:26.0000] <MikeSmith>
I wonder if it’s ironic or instead fitting that “premature optimization is the root of all evil” came from same hand that blessed the world with the creation of null pointers

[02:26:40.0000] <MikeSmith>
hsivonen: about the code trying handle both less than left etc in the same method, yeah, at least that makes it a bit hard to unpack when reading it

[02:28:06.0000] <hsivonen>
MikeSmith: I have a fix. Do we have unit tests these days?

[02:30:33.0000] <hsivonen>
seems so

[02:32:30.0000] <hsivonen>
hmm. it seems that the unit test expectations are not up-to-date

[02:45:57.0000] <hsivonen>
MikeSmith: Travis fails due to submodule issues. I don't know what to do about that. My changeset was not supposed to change submodule config.

[02:56:07.0000] <MikeSmith>
hsivonen: OK I will look at the submodule thing in a bit

[02:56:20.0000] <MikeSmith>
bathtime for my toddler is in the way in the mean time

[02:57:59.0000] <MikeSmith>
as far as tests, those are in the tests/ submodule, and the test runner is in nu/validator/client/TestRunner.java and the test expectations are in tests/messages.json

[03:19:47.0000] <smaug____>
hmm, need to sort our fullscreen events and their prefixes in spec level

[03:42:34.0000] <MikeSmith>
hsivonen: the problem you had with the tests is due to the tablecheck branch not being (re)based against current master

[03:43:07.0000] <MikeSmith>
there are some relatively recent changes on master that the tests are checking

[03:43:26.0000] <MikeSmith>
so the tablecheck branch just needs to be rebased against master

[03:44:23.0000] <hsivonen>
whoa. I thought I was using current master

[03:45:04.0000] <MikeSmith>
yah not sure what happened but looks like you branch from the state of master circa December 15

[03:50:13.0000] <MikeSmith>
hsivonen: anyway I think the only current tests we have that exercise this code are in tests/xhtml/elements/table/

[03:51:58.0000] <MikeSmith>
and your fix doesn’t regress any of those

[03:53:26.0000] <MikeSmith>
and along with fixing the test case in #456 it also fixes the ones in https://github.com/validator/validator/issues/378 for HorizontalCellComparator too

[03:53:40.0000] <MikeSmith>
so I will add those cases to the test suite

[03:54:03.0000] <MikeSmith>
after this fix is merged

[04:39:56.0000] <mathiasbynens>
/me grabs popcorn while reading the responses to https://daniel.haxx.se/blog/2017/01/30/one-url-standard-please/

[04:40:01.0000] <zcorpan>
hsivonen: soooooooooo.... <menuitem> parsing. should we change the spec so it parses like an unknown element?

[04:48:19.0000] <zcorpan>
errata... do we have a stock reply somewhere about why not errata?

[04:52:59.0000] <MikeSmith>
zcorpan: not that I know of

[04:53:07.0000] <MikeSmith>
but yeah we should have one

[04:59:27.0000] <Ms2ger>
mathiasbynens, is there anything else in there than "I want one standard... But not this one"?

[05:00:41.0000] <mathiasbynens>
Ms2ger: there are some entertainingly confusing false arguments as to why the URL Standard would not be sufficient, but yeah — that’s the TL;DR

[05:02:00.0000] <nox>
I like the scare quotes around 'spec'.

[05:03:37.0000] <nox>
I also don't get why we need a new group, when said authors of URL tools don't lurk here.

[05:14:16.0000] <MikeSmith>
hsivonen: thanks very muchーfix merged (along with the tests)

[05:15:10.0000] <MikeSmith>
Ms2ger: mathiasbynens nox context? twitter?

[05:15:22.0000] <nox>
MikeSmith: 13:40 — mathiasbynens grabs popcorn while reading the responses to https://daniel.haxx.se/blog/2017/01/30/one-url-standard-please/

[05:15:23.0000] <Ms2ger>
https://daniel.haxx.se/blog/2017/01/30/one-url-standard-please/

[05:15:38.0000] <MikeSmith>
ah god

[05:15:55.0000] <MikeSmith>
sorry he is still banging away at that drum

[05:16:01.0000] <MikeSmith>
it does not do him credit

[05:18:16.0000] <MikeSmith>
gotta give the guy a pretty massive amount of credit for curl. it is truly great. but he cuts pretty deep into that every time he trots out this anti-URL/anti-browsers hobbyhorse

[05:20:16.0000] <annevk>
jgraham: gsnedders: it seems wptserve normalizes header names, is there a way to get to the actual casing used in the request?

[05:25:46.0000] <MikeSmith>
as far as “I have the feeling that WHATWG people would not like this work to be done within the IETF and vice versa” maybe somebody who knows bagder can fill him on the actual history: The fact we helped get an IETF group chartered to work on updating the IRI spec, and the group went on for years, literallly, without doing any actual work at all, and tried also directly with mnot, etc etc

[05:26:55.0000] <MikeSmith>
“Any year now I think we will see some movement for real trying to fix this.”

[05:27:44.0000] <MikeSmith>
...will be the same year as “The Year of Linux on the Desktop” or whatever

[05:28:17.0000] <nox>
Are you people going to FOSDEM?

[05:28:23.0000] <nox>
If yes, tell that to him IRL. :)

[05:41:38.0000] <Ms2ger>
Possibly, and no :)

[05:44:14.0000] <nox>
Ms2ger: Ah ah.

[06:03:24.0000] <nox>
https://twitter.com/nokusu/status/826060665358020608 I don't get it.

[06:03:39.0000] <nox>
If no one decides to participate to the group, nothing is gonna change.

[06:32:07.0000] <MikeSmith>
nox: thanks for trying at least

[06:32:27.0000] <nox>
MikeSmith: You're welcome, I like arguing too much for my own good.

[06:32:33.0000] <MikeSmith>
haha

[06:32:46.0000] <nox>
MikeSmith: Quite proud of myself for my reply on the Y THOUSANDS SLASHES thread though. :P

[06:33:30.0000] <MikeSmith>
“I channel what I've sensed and heard from others.” seems like a kinda odd thing to say in any context

[06:33:39.0000] <MikeSmith>
nox: Y THOUSANDS SLASHES thread?

[06:33:52.0000] <nox>
MikeSmith: https://github.com/whatwg/url/issues/118#issuecomment-276072218

[06:36:13.0000] <MikeSmith>
nox: nice work but the clear winner in that thread is Domenic https://github.com/whatwg/url/issues/118#issuecomment-217866196

[06:36:52.0000] <MikeSmith>
or as maybe we should call him from now on, Domenic “69 thumbs down” Denicola

[06:36:55.0000] <nox>
MikeSmith: Yeah but that doesn't make the URL standard not seem to focus on browsers. :P

[06:36:59.0000] <nox>
MikeSmith: AH AH

[06:37:05.0000] <nox>
Didn't notice the emojis.

[06:37:11.0000] <nox>
Most passive-aggressive GH feature ever.

[06:37:13.0000] <MikeSmith>
yeah

[06:37:22.0000] <MikeSmith>
and he was even really trying

[06:37:29.0000] <nox>
wasn't*?

[06:37:41.0000] <MikeSmith>
*wasn’t, yeah

[06:38:21.0000] <MikeSmith>
he is like a Zen master as evoking the thumbs-down pile-on without even trying

[06:38:28.0000] <MikeSmith>
very Wu Wei

[06:39:17.0000] <MikeSmith>
god but people do love them some curl

[06:41:21.0000] <MikeSmith>
bagder may have missed his calling, should have been a cult leader instead

[06:42:06.0000] <MikeSmith>
only losers waste their time and talents on software development and creating new Web/Internet technologies

[06:53:07.0000] <nox>
This whole thread sounds like the ultimate bikeshed.

[06:58:18.0000] <jgraham>
annevk: The code looks like it tries to preserve case on output? What are you actually doing that doesn't work?

[06:58:45.0000] <annevk>
jgraham: I did request.headers.iteritems() and got header names lowercased

[07:01:27.0000] <jgraham>
Oh request?

[07:01:32.0000] <jgraham>
I was looking at response

[07:03:09.0000] <jgraham>
annevk: You an look at request._raw_headers

[07:14:33.0000] <annevk>
jgraham: cool

[07:15:08.0000] <annevk>
jgraham: not documented at http://wptserve.readthedocs.io/en/latest/request.html though

[07:18:22.0000] <ato>
Presumably because of the _.

[07:28:16.0000] <jgraham>
annevk: Yeah it's sort of technically an internal api, but if it's needed we can either make it visible or change the real API in some way

[10:46:50.0000] <annevk>
I haven't been able to try it yet, will give it a go tomorrow

[10:47:30.0000] <annevk>
Not really gotten feedback thus far on the various related issues anyway

[11:08:07.0000] <rektide>
i dunno if this was whatwg or other- i seem to recall there having been talk of a worker that had a (non-visible) DOM it could use? anyone know what i'm talking about? is there a name for this?

[12:30:30.0000] <annevk>
rektide: it's not clear what benefits it provides over a small library

[14:15:28.0000] <Mek>
is there any way to find out which reference bikeshed might be giving a link error for? Even the -l option doesn't seem to actually give me any kind of line number info, so no idea how to find out what it might be complaining about...

[14:19:14.0000] <Mek>
hmm, and the link errors I'm getting started somewhere with "update widlparser" (not sure exactly which commit, since of three commits in a row two cause bikeshed to fail even worse)

[14:23:51.0000] <Mek>
TabAtkins: is -l supposed to give line number information for link errors?

[14:24:13.0000] <Mek>
also I'm a bit confused that the link error complains about multiple possible local refs, but then only lists one possibility...

[14:29:57.0000] <Mek>
ah, seems -l only works for links that don't use any kind of shorthand, since line numbers are attached to elements before the shorthand is processed and turned into html elements...

[14:39:37.0000] <jyasskin>
Double-checking: sourcemaps don't affect execution at all, right? Even if you load a malicious sourcemap, the worst that can happen is that you're confused while debugging, not that your site data leaks?

[14:41:23.0000] <jyasskin>
Mek: I've seen bugs with link error reporting in Bikeshed. Might you have both a definition and a link-defaults with the same key?

[14:42:35.0000] <gsnedders>
jyasskin: yes

[14:42:44.0000] <jyasskin>
gsnedders: Thanks.

[14:43:19.0000] <Mek>
jyasskin: it turned out that somehow bikeshed wasn't matching up my <dfn> with the idl generated definition of a method anymore. Which then caused errors when trying to link to that method...

[14:43:52.0000] <jyasskin>
Yeah. Did you get the right entity type?

[14:45:02.0000] <jyasskin>
(https://tabatkins.github.io/bikeshed/#dfn-types)

[14:45:24.0000] <Mek>
yes I did. and this used to work before some widlparser update. Chaning my dfn from <dfn method for=FileReaderSync>readAsText(blob, optional label)</dfn> to <dfn ...>readAsText(blob, label)</dfn> fixed the error...

[14:47:04.0000] <jyasskin>
Fun.

[14:47:14.0000] <Mek>
also would be helpful if bikeshed could at least warn for the duplicate definition for FileReaderSync/readAsText() rather than complain only when trying to refernce it...

[14:47:23.0000] <jyasskin>
+1

[14:47:29.0000] <jyasskin>
File a bug?

[14:56:02.0000] <Mek>
ah, even more interesting, the errors I get are different depending on if the dfn has an explicit id or not.... but yeah, I'll file a bug...

[15:03:08.0000] <Domenic>
jyasskin: it's possible they might affect error.stack, but I'd guess they wouldn't.


2017-01-31
[22:33:43.0000] <hsivonen>
MikeSmith: thanks

[23:33:01.0000] <zcorpan>
mkwst: is http://web-platform.test:8000/html/semantics/embedded-content/the-iframe-element/iframe_sandbox_popups_nonescaping-3.html a valid test? why is the child frame allowed to navigate its popup?

[01:36:49.0000] <nox>
annevk: Did I make sense?

[01:37:05.0000] <annevk>
Yeah, but there's some communication mismatch

[01:37:11.0000] <hsivonen>
zcorpan: yeah, I think we should make <menuitem> parse like <span>. And the same thing for other new elements that browsers already parse like <span>

[01:40:38.0000] <nox>
annevk: I just noticed someone played the business interest card,

[01:40:42.0000] <nox>
I should not even have bothered.

[01:41:02.0000] <hsivonen>
/me wonders what the context is

[01:41:37.0000] <nox>
hsivonen: https://github.com/whatwg/url/issues/118#issuecomment-276072218

[01:42:00.0000] <nox>
hsivonen: This happened yesterday btw: https://github.com/servo/servo/pull/15303

[01:42:07.0000] <nox>
Way too broken for now, but baby steps.

[01:44:09.0000] <hsivonen>
nox: nice (for the latter URL)

[01:44:15.0000] <nox>
"the successful HTML coup"

[02:10:42.0000] <zcorpan>
hsivonen: ok, thanks

[02:20:33.0000] <zcorpan>
hsivonen: to be clear, it should parse like an unknown element, not like <span>, yes? <span> breaks out of <svg>

[02:21:57.0000] <hsivonen>
zcorpan: yeah. good point.

[02:22:24.0000] <hsivonen>
zcorpan: has the initiative to make <video> magic in <svg> been buried yet?

[02:22:58.0000] <zcorpan>
hsivonen: i think the issue is still open, but i haven't seen any implementor interest

[02:26:20.0000] <hsivonen>
zcorpan: do you happen to have the issue URL at hand?

[02:27:18.0000] <zcorpan>
https://github.com/whatwg/html/issues/919

[02:35:07.0000] <zcorpan>
hsivonen: sorry about driving <menuitem> parsing in a direction y'all didn't like, but i didn't really get clear messages earlier.

[02:42:29.0000] <hsivonen>
zcorpan: sorry. I should have been more awake about HTML parsing stuff while working on other stuff

[03:31:11.0000] <nox>
All these random people participating in that issue...

[03:35:12.0000] <Ms2ger>
zcorpan, can you file a chrome bug about its failure in http://w3c-test.org/html/semantics/tabular-data/the-table-element/caption-methods.html ?

[03:35:53.0000] <zcorpan>
Ms2ger: sure

[03:44:18.0000] <hsivonen>
People want BNF. Give people BNF and people are unhappy with BNF.

[03:46:15.0000] <zcorpan>
Ms2ger: https://bugs.chromium.org/p/chromium/issues/detail?id=687116

[03:49:24.0000] <annevk>
jgraham: how do I use _raw_headers?

[03:52:16.0000] <zcorpan>
118 keeps on giving. but on the plus side, i think there's examples in there now we can put in the spec to close the issue

[03:54:27.0000] <annevk>
jgraham: it seems I can str() it to get it to output something

[04:13:45.0000] <annevk>
jgraham: I filed https://github.com/w3c/wptserve/issues/112 on making it an official API

[06:57:07.0000] <annevk>
Domenic: are you around?

[06:57:36.0000] <annevk>
Domenic: <script type=module src=/x> <script type=module src=/x> yields one module fetch, right? Does the same go for module worker fetches?

[07:00:49.0000] <annevk>
Domenic: or is that only if /x is imported?

[07:16:35.0000] <annevk>
Domenic: see https://github.com/WebAssembly/design/issues/972 if you want more fun times

[07:17:07.0000] <annevk>
Domenic: I've decided I know the answers to the above questions to an okayish extent

[07:31:47.0000] <smaug>
foolip: SharedWorkerStart in https://www.chromestatus.com/metrics/feature/timeline/popularity/5 means calling the start() method ?

[07:39:01.0000] <foolip>
smaug: no constructor actually (maybe the counter location was moved)

[07:39:24.0000] <smaug>
foolip: but ok, basically usage

[07:39:52.0000] <foolip>
smaug: yeah, a fair estimate of real usage (counting is before exception handling)

[07:41:21.0000] <annevk>
foolip: would that also count adding a onmessage handler which implicitly calls start?

[07:43:01.0000] <foolip>
annevk: that's MessagePort#start(), right?

[07:43:13.0000] <annevk>
foolip: yeah

[07:43:39.0000] <foolip>
let me see

[07:43:43.0000] <annevk>
foolip: what other start() is there though?

[07:45:55.0000] <foolip>
Probably none, just checking that I was looking at the right thing. At least setting onmessage does call start(), I can confirm, but it doesn't look like start() has any connection to the SharedWorker constructor?

[07:46:22.0000] <foolip>
You have to use the constructor to get to any of these APIs, right?

[07:46:36.0000] <foolip>
(Sorry, I've never tried using SharedWorker)

[07:47:09.0000] <annevk>
SharedWorker has a port which would have start() on it

[07:52:17.0000] <foolip>
right, ok. so the use counter is only for the SharedWorker constructor. https://www.chromestatus.com/metrics/feature/timeline/popularity/782 is for MessagePort#start(), but only for explicit calls. The implicit call by setting onmessage does not seem measured.

[07:52:51.0000] <foolip>
smaug: what are you trying to gague the risk of changing?

[07:54:20.0000] <smaug>
not really. there was just an email thread about SharedWorker usage in Gecko. That measure is per browsing session, I think

[07:55:44.0000] <smaug>
didn't Safari remove SharedWorkers

[07:55:50.0000] <smaug>
yet usage seems to be going up

[08:06:13.0000] <foolip>
They did?

[08:06:36.0000] <foolip>
/me tested and yes they did

[13:44:17.0000] <zcorpan>
something i find annoying with standard.css: i use f.lux, so in the evenings, the unvisited links become almost indistinguishable from surrounding text

[13:44:35.0000] <zcorpan>
i suppose the same thing happens for some classes of color blindness

[13:45:04.0000] <jgraham>
(doesn't the latest OSX have some built in thing like f.lux but less buggy?)

[13:45:25.0000] <zcorpan>
iOS does, dunno about OSX

[13:46:19.0000] <jgraham>
Ah 10.12.4

[13:46:34.0000] <jgraham>
So probably next update

[13:46:53.0000] <zcorpan>
nice

[13:47:14.0000] <zcorpan>
anyway, any great ideas for fixing link styling?

[13:47:42.0000] <jgraham>
Oh, you want helpful suggestions too?

[13:48:19.0000] <jgraham>
I think the short answer is no; I haven't got the colour temperature variation, so it's hard to tell what the problem is

[13:50:09.0000] <zcorpan>
the problem is that the amount of blue light emitted is much less than usual, so blue text becomes dark blue

[13:54:42.0000] <zcorpan>
/me files an issue with pictures

[13:54:49.0000] <jgraham>
Make all the links green to match the rest of the styles?

[14:24:41.0000] <zcorpan>
https://github.com/whatwg/resources.whatwg.org/issues/44

[14:26:31.0000] <zcorpan>
jgraham: i suppose that would help me but would still be annoying for people with green-weak or green-blind color blindness :-) also might not work so well in notes with a green background and surrounding text is green

[15:55:20.0000] <Domenic>
annevk: small ping on https://github.com/whatwg/url/issues/97 just to make sure you didn't forget about it

