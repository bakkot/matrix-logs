2016-08-01
[18:59:47.0000] <MikeSmith>
zewt: used fetch

[19:00:46.0000] <MikeSmith>
tobie++ indeed

[19:00:59.0000] <MikeSmith>
brave man

[20:41:05.0000] <zewt>
mike: shouldn't need to rewrite with a different api for that, no reason it should work with one and not the other

[20:41:53.0000] <zewt>
(sounds like that's just encouraging people to not use https, if they have to rewrite code with a different api to make it work)

[20:59:01.0000] <MikeSmith>
zewt: I meant this is maybe a case where there’s no plan to change/update XHR for this or any other new cases

[20:59:40.0000] <MikeSmith>
cannot just keep going in and updating legacy funky API

[21:06:14.0000] <zewt>
doesn't seem funky to add an "allow mixed" flag to XHR, the fewer barriers discouraging HTTPS the better

[21:07:32.0000] <zewt>
(i still use XHR, it works fine for me so I've never felt like spending time learning a new API, especially one that isn't universal yet)

[21:15:59.0000] <MikeSmith>
zewt: well for better or worse I think the plan of record is that at this point there are no plans to ever update XHR with anything new

[21:16:08.0000] <jyasskin>
And there are fetch() polyfills.

[21:26:25.0000] <boogyman>
Domenic: why is Firefox's rendering a bad thing? The author created invalid markup

[21:26:51.0000] <Domenic>
boogyman: people create invalid markup all the time... you still gotta render something reasonable.

[21:27:21.0000] <boogyman>
and you consider negative numbers unreasonable?

[21:27:35.0000] <Domenic>
Yeah definitely

[21:27:55.0000] <boogyman>
I guess we disagree

[21:28:13.0000] <Domenic>
I mean this needs to be interoperable at the very least.

[21:28:27.0000] <Domenic>
https://github.com/whatwg/html/issues/1617

[21:33:07.0000] <boogyman>
Why is it a bad thing that the UA could be put into quirksmode with invalid syntax like this?

[21:33:44.0000] <Domenic>
I don't think this has anything to do with quirks mode...

[21:34:12.0000] <Domenic>
UAs need to be interoperable not just when authors are well-behaved, but also when they aren't.

[21:34:52.0000] <Domenic>
Authors writing invalid markup is not a license for no longer following specs. (Although in this case the spec is missing details.)

[21:35:26.0000] <boogyman>
the alternative is to try and create notations for every found use-case?

[21:35:32.0000] <boogyman>
is the*

[21:35:39.0000] <Domenic>
Yes, that's what specs do

[21:35:48.0000] <Domenic>
That was the whole HTML4 -> HTML5 revolution

[21:36:06.0000] <Domenic>
That's why we have a HTML parser spec instead of DTDs

[21:36:44.0000] <boogyman>
fair enough

[01:10:02.0000] <Ms2ger>
annevk, happy birthday

[01:22:05.0000] <tobie>
Happy birthday, annevk! (And happy national holiday in your country of adoption:)

[01:22:35.0000] <annevk>
Cheers 😊

[01:23:12.0000] <Ms2ger>
Oh, so that's why you moved there? :)

[02:38:51.0000] <mounir>
smaug____: I've added metrics to measure EventSource usage in Document and Workers in Chromium

[02:39:20.0000] <mounir>
smaug____: it should appear in https://www.chromestatus.com/metrics/feature/popularity as EventSourceDocument and EventSourceWorker but at the moment, the data is only collected on Dev/Canary and will soon be on Beta, give it some time to really have useful data

[02:40:06.0000] <smaug____>
thanks

[03:33:39.0000] <mathiasbynens>
annevk: is `new URLSearchParams('foo=%EF%BF%BF').get('foo')` supposed to perform UTF-8-style URL-decoding? i.e. should it return '\xEF\xBF\xBF' (Chromium) or '\uFFFF' (Firefox)?

[07:22:14.0000] <annevk>
mathiasbynens: suspect Fx is correct

[07:22:43.0000] <mathiasbynens>
annevk: was hoping that was the case, as it’s the more useful behavior (by far)

[07:23:09.0000] <mathiasbynens>
but

[07:23:09.0000] <mathiasbynens>
https://bugs.chromium.org/p/chromium/issues/detail?id=633153#c4

[07:24:10.0000] <annevk>
Will look later this week

[09:23:40.0000] <annevk>
tobie: hope you have a good holiday too btw 😊

[10:03:01.0000] <tobie>
annevk: :)

[11:51:07.0000] <TabAtkins>
tobie: That does work, but the [] aren't part of the definition. Remove those (or shift them outside {{}} braces) and it should link up.

[13:07:52.0000] <tobie>
TabAtkins: So {{TreatNullAs}} yields: <code class="idl"><a data-link-type="idl">TreatNullAs</a></code>

[13:07:52.0000] <tobie>
<a extended-attribute>TreatNullAs</a> yields: <a class="idl-code" data-link-type="extended-attribute">[TreatNullAs]</a>

[13:09:04.0000] <tobie>
TabAtkins: OK, I think this ties to the GH issue I opened.

[13:09:37.0000] <TabAtkins>
tobie: Yes, those are compatible - "idl" is a supertype representing all the IDL types, of which "extended-attribute" is one.

[13:10:29.0000] <tobie>
Aren't we loosing info that could be useful for styling or when parsing the spec to fill-in the shepherd DB?

[13:14:47.0000] <jsbell>
TabAtkins; In https://wicg.github.io/entries-api/ I end up with refs to [File-1] (autogenerated from normative refs) and [FileAPI] (from explicit informative refs), pointing at the same doc. Is that a bikeshed thing or a specref thing?

[13:16:28.0000] <TabAtkins>
jsbell: That's me giving FileAPI a weird shortname; I just updated it to be "fileapi" instead, so I think it'll match up now.

[13:16:45.0000] <TabAtkins>
If it still does [Fileapi-1] vs [FileAPI], file on me.

[13:17:13.0000] <jsbell>
testing...

[13:17:34.0000] <TabAtkins>
tobie: Nobody's losing anything, they're specifying what they need. If they want to be more specific (because they're styling based on class or something), they can do so, but the shorthand purposely covers a large group of things for convenience.

[13:17:51.0000] <TabAtkins>
jsbell: You'll have to `bikeshed update`

[13:19:01.0000] <jsbell>
TabAtkins: yep. Hrm, now getting No 'idl' refs found for 'File'...

[13:23:13.0000] <TabAtkins>
Might be rebuilding right now, or maybe you have some manual declarations that "File" comes from the "file" spec?

[13:24:18.0000] <jsbell>
TabAtkins: No manual declarations for those. I'll try again in a bit. (FYI, 4 errors total. idl/interface/idl-name for File, idl for FileReader)

[14:08:57.0000] <tobie>
TabAtkins: would you have any idea why the following https://github.com/tobie/webidl/blob/bikeshed/index.bs errors with:

[14:08:57.0000] <tobie>
FATAL ERROR: Multiple local 'interface' <dfn>s have the same linking text 'DOMString'.

[14:17:20.0000] <tobie>
TabAtkins: I can search and replace all of the instances of "DOMString" with garbage and keep only this one: <h4 oldids="dom-DOMString" id="idl-DOMString" interface="">DOMString</h4> while still triggering the issue.

[14:21:29.0000] <tobie>
TabAtkins: reduced test case here: https://gist.github.com/tobie/3ff6f07158403cde5d154156e2e535d2

[16:58:43.0000] <TabAtkins>
tobie: Ah, sorry, that's because of my terrible hacks to let people link to some of the webidl things.  Manually specified anchor blocks count as "local" definitions, and DOMString is in Bikeshed's default anchor file.

[16:58:55.0000] <TabAtkins>
So you're colliding with the built-in "DOMString" definition. :/

[16:59:23.0000] <TabAtkins>
I'll remove that as soon as WebIDL can legitimately provide a dfn for the term; for now just suffer thru it.


2016-08-02
[05:23:52.0000] <Ms2ger>
wtf: https://github.com/ylafon/webidl

[05:31:07.0000] <nox>
Ms2ger: What's the problem?

[05:31:40.0000] <Ms2ger>
Some random guy forking the spec with no communication whatsoever

[05:33:13.0000] <nox>
Ms2ger: I didn't realise he is part of W3C;

[05:33:17.0000] <nox>
now I see the problem.

[05:34:31.0000] <smaug____>
remind me, which spec defines how .style.* is mapped to style attribute

[05:34:31.0000] <botie>
will do

[05:38:19.0000] <smaug____>
(could someone finally kill w3schools)

[06:00:51.0000] <ondras>
so I have this strange behavior (so far in Firefox only), when I append a large absolutely positioned element that is translated (css transform) far to the right (out of the screen) and the browser scrolls the documentElement to try to keep this big offscreen thing in the viewport

[06:01:02.0000] <ondras>
is this specced/documented/reported/explained somewhere?

[06:56:19.0000] <howdoi>
Is w3c open for proposals like TC39?

[06:56:28.0000] <howdoi>
if yes, what's the process like?

[06:56:32.0000] <howdoi>
how many stages?

[06:59:27.0000] <howdoi>
have you tired adding an event listener is a promise?

[06:59:45.0000] <howdoi>
new Promise((res, rej) => element.addEventListner('click', () => if(...){resolve()} reject())) // something like

[06:59:53.0000] <howdoi>
Domenic: is that a bad idea?

[07:23:31.0000] <Ms2ger>
The W3C process is based on stubbornness to the point of exhausting anyone with actual work to do

[07:24:14.0000] <Ms2ger>
As for the WHATWG, https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F

[07:26:47.0000] <jgraham>
In general event listeners and promises have an impedance mismatch because promises are resolve-once and event listeners are continuous streams of events

[07:28:07.0000] <howdoi>
jgraham: so it's a no no, it won't work right?

[07:28:25.0000] <howdoi>
Ms2ger: Forget about the particular solution you have in mind! Solution time is later! :D

[07:28:50.0000] <howdoi>
So much of writing to do :(

[07:28:54.0000] <jgraham>
Well you can make something that works if you want a promise to resolve the next time a particular event fires

[07:29:42.0000] <jgraham>
But it generally doesn't seem useful enough to add to the platform; for events that only fire once new APIs are sneakily using promises directly (eg. fetch vs xhr)

[07:56:39.0000] <tobie>
Ms2ger: afaik, there's been communication about it. ylafon is working on a bringing version 1 to Rec. That version would only contain bindings actually implemented by vendors.

[07:57:04.0000] <tobie>
Ms2ger: note I'm offering info about it. Not my opinion on the topic. :)

[08:07:29.0000] <howdoi>
jgraham: try, luck that fetch is a function, we done need to do a new Fetch() heh heh

[08:07:40.0000] <howdoi>
jgraham: does fetch extend promise internally?

[08:07:51.0000] <howdoi>
or just returns a new Promise() ?

[08:21:27.0000] <Ms2ger>
> W3C invites implementations of Mixed Content

[08:21:29.0000] <Ms2ger>
Noooooooooo

[08:25:55.0000] <AutomatedTester>
I thought we were only doing HTTPS these days

[08:26:02.0000] <AutomatedTester>
HTTPS is the new HTTP

[08:35:24.0000] <annevk>
Ms2ger: is that a serious IDL fork? Seems weird…

[08:43:07.0000] <tobie>
annevk: see my comments above

[08:58:10.0000] <annevk>
Ah

[08:58:18.0000] <annevk>
Missed that somehow

[10:14:55.0000] <duper>
Is it possible to represent IPv6 addresses in decimal or octal, similar to how IPv4 addresses can be?

[10:20:05.0000] <TabAtkins>
smaug____: As far as I can tell... it's not defined anywhere.

[10:21:10.0000] <TabAtkins>
Style Attributes just defines that the contents of a style attribute apply to the document as if they were in a stylesheet.

[10:21:11.0000] <smaug____>
TabAtkins: ok. The question I have is that when should setting .style.foo = "some new value" cause a dom attribute set

[10:21:19.0000] <TabAtkins>
And OM doesn't seem to ahve any specific text about this.

[10:23:44.0000] <smaug____>
IMO element.style.width = "10px"; element.style.width = "10px";  should cause two mutation records, to be consistent with element.setAttribute("style", "width: 10px;"); element.setAttribute("style", "width: 10px;");

[10:24:36.0000] <smaug____>
but not all the browsers create the latter record for the .style case

[10:25:20.0000] <TabAtkins>
Yeah, I think that's utterly undefined. A good bug report for CSSOM. Make zcorpan fix it. ^_^

[10:25:54.0000] <TabAtkins>
(I wouldn't be surprised if it does dirty-checking and only writes when there's a change.)

[10:26:57.0000] <Ms2ger>
> Mutating the declarations must set the style content attribute on the context object to the serialization of the declarations. If the style content attribute is set, changed or removed, the declarations must be updated as appropriate.

[10:27:13.0000] <Ms2ger>
So what is "Mutating the declarations"?

[10:27:26.0000] <Ms2ger>
smaug____, file a bug on cssom?

[10:28:00.0000] <smaug____>
reading...

[10:28:04.0000] <smaug____>
perhaps this is speced?

[10:28:49.0000] <smaug____>
hmm, " Mutating the declarations" is indeed too vague


2016-08-03
[21:04:15.0000] <MikeSmith>
you have any advice about how I should preparee fo/win 23

[21:04:18.0000] <MikeSmith>
oofs

[06:14:07.0000] <smaug____>
hmm, I thought I knew how download attribute works with <a>

[06:14:11.0000] <smaug____>
but apparently I don't

[06:19:23.0000] <smaug____>
hmm, or perhaps server can still override the filename?

[06:49:19.0000] <wanderview>
JakeA: a couple times last week you mentioned the idea of returning a promise from respondWith() that would resolve after the browser consumes the response

[06:49:30.0000] <wanderview>
it didn't quite sit well with me and I couldn't figure out why

[06:49:39.0000] <wanderview>
I think I finally figured out what bothers me about it

[06:50:13.0000] <wanderview>
JakeA: wouldn't a promise returned from respondWith() essentially provide a callback exactly when we're no longer holding the service worker alive?  its like a "now its unsafe" callback

[06:50:55.0000] <JakeA>
wanderview: yeah you'd have to do waitUntil( respondWith(stuff).then(…) )

[06:51:12.0000] <JakeA>
Which is a bit :/

[06:51:38.0000] <wanderview>
JakeA: or it gets an implicit extension for a micro-task... but feels difficult to explain with our current primitives

[06:51:42.0000] <wanderview>
or wonky at least

[07:06:51.0000] <JakeA>
We already have an extension for a microtask right?

[07:07:25.0000] <JakeA>
We talked about that so waitUntil( thing.then(() => waitUntil(anotherThing)) ) works

[07:08:06.0000] <JakeA>
hm, my code there is wrong. I mean: thing.then(() => waitUntil(anotherThing)); whatUntil(thing);

[07:08:17.0000] <JakeA>
hah, I mean waitUntil

[07:08:28.0000] <JakeA>
/me falls over

[07:56:59.0000] <JakeA>
wanderview: now I think about it, didn't we decide a separate fetcherror event was a better idea?

[07:57:37.0000] <wanderview>
JakeA: yea... I was just thinking about the respondWith() promise idea this morning

[07:58:09.0000] <wanderview>
JakeA: I guess I was saying "not only are we not doing your idea, Jake, but I don't like it either!!!!"

[07:58:10.0000] <wanderview>
sorry

[07:58:18.0000] <wanderview>
:-)

[07:58:21.0000] <JakeA>
haha

[07:58:54.0000] <JakeA>
Yeah, the event is better, as you can do something with it

[08:03:42.0000] <wanderview>
JakeA: now I'm trying to remember why we wanted FetchErrorEvent instead of just using the normal Worker global onerror... I guess its more explicit and we can provide a better method to "resume the connection" than just preventDefault()

[08:04:24.0000] <JakeA>
wanderview: yeah, preventDefault is really confusing in this case, since it'd make the default thing happen

[08:05:58.0000] <JakeA>
annevk: https://fetch.spec.whatwg.org/#http-fetch 3.3 - does this suggest a new generic network error is created? Devs have complained that Chrome presents a generic error rather than a more specific one. Does there need to be a spec change to allow the actual error to pass through to the navigation handler?

[08:06:50.0000] <annevk>
JakeA: yeah, we'd need to change the spec

[08:07:01.0000] <JakeA>
I'll file an issue

[08:07:06.0000] <annevk>
JakeA: and get security sign off

[08:07:11.0000] <wanderview>
annevk: I think the browser could just stash the specific type on an internal value... its never consumed by anyone but the browser

[08:07:32.0000] <annevk>
JakeA: that is the main reason all errors are the same

[08:07:56.0000] <JakeA>
Yeah, might need some same-origin checks

[08:08:30.0000] <wanderview>
annevk: JakeA: in firefox all network error pages are cross origin.. so i don't think the error type can ever be leaked to content... doesn't seem like a security issue to me... might be an issue for chrome with same-origin error pages

[08:08:51.0000] <annevk>
JakeA: even for that I recall folks not liking it, but there might be APIs exposing that now

[08:09:37.0000] <annevk>
wanderview: I thought we were discussing specific TypeError exceptions

[08:09:51.0000] <JakeA>
Hmm, I can't think of problems, but will make an issue and see if we can get someone security-minded to look at it

[08:10:04.0000] <wanderview>
annevk: not if its the same as the face-to-face meeting discussion... it was just showing the right network error page to the user... not exposing different exception types

[08:10:51.0000] <annevk>
Okay, I guess I'll follow up on the issue then 😊

[08:11:07.0000] <annevk>
Not today, but likely tomorrow

[08:24:34.0000] <smaug____>
who might know about blink's MutationObserver implementation

[12:21:32.0000] <wanderview>
JakeA: how do you BroadcastChannel to a service worker?

[12:21:59.0000] <JakeA>
wanderview: new BroadcastChannel? It'd only work while the instance is alive

[12:22:06.0000] <wanderview>
JakeA: I guess each service worker thread adds an event listener to the BroadcastChannel ?

[12:22:12.0000] <JakeA>
Yeah

[12:22:20.0000] <wanderview>
/me goes to read BroadcastChannel...

[12:22:20.0000] <JakeA>
I don't think it's a problem, just something to think about

[12:22:56.0000] <wanderview>
JakeA: it might be worth pointing out that SharedWorker is either not implemented or not supported as a nested worker in any browser today?

[12:23:07.0000] <wanderview>
but we could make that a pre-req of implementing this?

[12:23:15.0000] <JakeA>
Good point

[12:23:45.0000] <wanderview>
JakeA: maybe pre-req is too strong a word :-)

[12:27:01.0000] <wanderview>
JakeA:  I do kind of like the conceptual difference between SharedWorker and ServiceWorker in this design... ServiceWorker instances are ephemeral and fast... if you want synchronous coordination you pay the price and opt-in to SharedWorker

[12:27:41.0000] <JakeA>
Or IDB (maybe with observers too)

[12:27:52.0000] <wanderview>
JakeA: I guess an opt-in to "single thread always" for service worker could just be implemented as "all service worker instances open a SharedWorker and fire their event there"

[12:28:26.0000] <wanderview>
JakeA: I mean, the browser could implement it that way... no special logic beyond what the content could polyfil themselves

[12:28:38.0000] <wanderview>
JakeA: the browser would just be fixing up the global to connect a few things, etc

[12:28:51.0000] <JakeA>
Hah! Well, if you're talking about doing that on the developer-side, it's tricky due to what can be cloned/transfered

[12:31:20.0000] <wanderview>
JakeA: once ReadableStream transfer gets spec'd, I think Response/Request objects should be transferable as well?

[12:31:35.0000] <JakeA>
Agreed


2016-08-04
[00:05:19.0000] <annevk>
JakeA: thanks for https://github.com/w3c/webappsec-mixed-content/issues/7

[00:05:36.0000] <annevk>
JakeA: was thinking about raising that issue this morning in that exact repository

[00:11:04.0000] <JakeA>
No problem! Still worried about the practicality of it, but I get where you're coming from

[00:18:50.0000] <annevk>
Yeah, well, folks should just move to HTTPS really

[00:19:24.0000] <annevk>
That we present HTTP as more favorable than mixed content is part of the problem, they're sorta the same

[00:21:42.0000] <JakeA>
We may have made that change in Chrome, or we've certainly been moving in that direction

[00:25:02.0000] <annevk>
Hmm, https://github.com/whatwg/dom/commit/9e3ce67c7927d6642646a3d0c84fa6d8f7926cfa no longer points to the correct PR

[00:25:14.0000] <annevk>
So removing the PR annotation might be problematic?

[00:27:46.0000] <Domenic>
Wasn't that in the pre-green-merged-button days?

[00:28:14.0000] <Domenic>
It might also just be a GitHub bug.... no idea why tab's fork took over the pointer

[00:33:05.0000] <annevk>
Yeah could be, though April seems pretty recent

[01:11:15.0000] <annevk>
Domenic: accessible nodes have their own tree as well with focusing and such?

[01:11:29.0000] <annevk>
Domenic: so now we have shadow trees, accessible trees, and normal trees?

[01:11:37.0000] <Domenic>
annevk: apparently. I am not super-jazzed about them having parallel concepts, *especially* event dispatch.

[01:11:41.0000] <annevk>
Domenic: that sounds very complicated

[01:12:07.0000] <Domenic>
annevk: part of the idea, I think, is to allow adding a "virtual" ax tree underneath a canvas

[01:12:21.0000] <Domenic>
It *is* apparently exposing the primitives that browsers already implement

[01:12:41.0000] <annevk>
Domenic: all browsers?

[01:12:58.0000] <annevk>
Domenic: I doubt we have something like that, unless they mean XBL, which is shadow trees

[01:13:06.0000] <Domenic>
annevk: hmm i'm not sure. but i believe all the implementers are involved...

[01:13:45.0000] <annevk>
Domenic: but nobody with a background in API design is on the list of editors

[01:16:12.0000] <Ms2ger>
https://lists.w3.org/Archives/Public/public-w3process/2016Aug/0017.html

[01:18:33.0000] <annevk>
Domenic: also, I thought <canvas> was fine with just having an actual subtree

[01:19:11.0000] <Domenic>
annevk: yeah, that's why they asked for a review...

[01:19:17.0000] <Domenic>
Not sure what's the problem with canvas subtrees

[01:19:37.0000] <Domenic>
Ms2ger: this seems boring, why did you send me a boring thing

[01:20:13.0000] <Ms2ger>
Domenic, maybe this is better: https://www.youtube.com/watch?v=Y6EAWMscDvI

[01:20:45.0000] <Domenic>
awwwww

[01:21:20.0000] <mkwst>
annevk: Do you happen to know whether I need to poke at you, TabAtkins, or tobie to get Fetch into Bikeshed's anchor data list?

[01:21:50.0000] <Ms2ger>
Ah, mkwst, I was looking for you earlier

[01:21:52.0000] <annevk>
Ms2ger: oh joy, more formatting requirements on drafts and charters to get patent protection

[01:21:55.0000] <annevk>
Ms2ger: what could go wrong

[01:22:05.0000] <mkwst>
Is it a data problem with the spec's markup, or a specref/bikeshed issue?

[01:22:13.0000] <annevk>
mkwst: TabAtkins

[01:22:13.0000] <mkwst>
Ms2ger: What can I do for you?

[01:22:27.0000] <annevk>
mkwst: though he might say that I should convert Fetch to bikeshed

[01:22:36.0000] <Ms2ger>
mkwst, https://github.com/whatwg/html/issues/1142

[01:23:14.0000] <Domenic>
specifically https://github.com/whatwg/html/issues/1142#issuecomment-216990289 i would imagine

[01:23:16.0000] <mkwst>
He probably will. *shrug* I'd help if that's the direction you want to do. Having a separate build system just for Fetch is annoying. :)

[01:26:19.0000] <annevk>
mkwst: it's not used just for Fetch and I don't disagree, but conversion is error prone and takes a lot of time

[01:26:35.0000] <mkwst>
annevk: Well, on _my_ computer, it's just Fetch. :)

[01:26:46.0000] <annevk>
It took months to fix regressions in URL and DOM

[01:27:05.0000] <annevk>
And they were only fixed thanks to careful reviewers, of which Fetch doesn't have too many

[01:27:47.0000] <Domenic>
DOM still has lots of formatting regressions, I noticed yesterday :(

[01:27:48.0000] <mkwst>
Fair. I suspect Fetch is contained enough that we'd be able to do it reasonably well, but I would have said the same about URL.

[01:27:58.0000] <Domenic>
Half the methods are defined as bold code, the other half as bold

[01:28:25.0000] <Domenic>
We could do what Tobie's doing for Web IDL and work on an XSLT transform :O

[01:31:19.0000] <Domenic>
ohoho fighting words ^_^ https://github.com/tabatkins/bikeshed/issues/772#issuecomment-237487886

[01:33:20.0000] <Domenic>
Hmm except for scheduling meetings Tokyo is a pretty great timezone. You get to watch the Europe people waking up and answering your issues, then the US people all send you email while you sleep which you can batch-process in the morning.

[01:34:40.0000] <tobie>
I know you're joking, but frankly, XSLT is a pain. The only reason it made sense for webidl is because webidl was already using it to convert from XML and I could hack on a pre-existing sheet.

[01:40:37.0000] <annevk>
Domenic: Europe has similar advantages with London being the best I think, but Tokyo et al is sure nice too

[01:56:57.0000] <tobie>
Basically, any place where you get to batch-process emails coming from the US is good.

[01:58:10.0000] <tobie>
It would be interesting to compare actual output of remote engineers based in the vicinity of their HQ's timezone.

[01:58:58.0000] <tobie>
I'm ready to bet those with very little work hour overlap have an edge.

[01:59:30.0000] <tobie>
On the other, their network is probably poorer, and so they might have less leverage.

[02:20:52.0000] <stennowork>
i don't know if this is the right channel to ask, but is there any sensible explanation why 'contenteditable' is an 'enumerated' attribute and not a boolean attribute?

[02:21:43.0000] <stennowork>
given that its enumerated values are exactly 'true' and 'false'

[02:28:15.0000] <Ms2ger>
Legacy

[02:28:40.0000] <stennowork>
legacy? wasn't it added in html5?

[02:34:09.0000] <stennowork>
hmm i see that html4 doesn't even define a boolean datatype

[02:34:13.0000] <Ms2ger>
It existed long before it had a spec

[02:35:48.0000] <stennowork>
i see, fair

[02:35:54.0000] <stennowork>
thanks for the explanation

[02:36:59.0000] <stennowork>
so i could send a proposal to change it to boolean?

[02:37:28.0000] <Ms2ger>
You could, but it won't be accepted

[02:37:34.0000] <Ms2ger>
That would break existing sites

[02:37:47.0000] <stennowork>
hmm aw

[02:39:03.0000] <Ms2ger>
Also, isn't there an implicit third state "inherit"?

[02:41:34.0000] <stennowork>
hmm thats right

[02:41:42.0000] <stennowork>
i must've overread that

[02:41:44.0000] <stennowork>
my bad

[03:04:14.0000] <botie>
hsivonen, at 2016-07-28 03:02 UTC, MikeSmith said: multiple reports about validator.nu redirecting to hsivonen.fi https://github.com/validator/validator/issues/325

[03:05:27.0000] <annevk>
Domenic: other things to consider if you're still in Tokyo, some kind of PromiseResponse subclass that fetch() returns on which we expose 1xx responses and push promises

[03:05:53.0000] <annevk>
Domenic: both of which are effectively async arrays

[03:06:05.0000] <annevk>
Domenic: if you're still in the office in Tokyo*

[03:34:12.0000] <smaug____>
does anyone know if there is some better code indexing tool for webkit than trac.webkit.org ?

[03:37:45.0000] <beverloo>
I usually look at the GitHub mirror - https://github.com/WebKit/webkit

[03:41:16.0000] <smaug____>
I asked for better tool ;)

[03:41:44.0000] <smaug____>
I wouldn't consider github being good with anything

[03:44:35.0000] <smaug____>
something like searchfox.org or mxr or  dxr or google code search?

[03:49:45.0000] <smaug____>
anyone with webkit?

[03:49:49.0000] <smaug____>
beverloo ?

[03:49:58.0000] <smaug____>
What does data:text/html,<script>document.write("onwebkitTransitionEnd" in document.documentElement); </script> say?

[03:50:17.0000] <smaug____>
and what if that is onwebkittransitionend

[03:51:03.0000] <beverloo>
smaug____, my main use is finding specific bits of code, but I used to be fairly well acquainted with WebKit code anyway. GitHub works fine for that

[03:51:43.0000] <beverloo>
Not sure if there's anything around that really indexes the code

[03:52:18.0000] <smaug____>
/me is so used to mxr and now searchfox.org. searchfox.org particularly has rather good UI for blame.

[03:52:30.0000] <smaug____>
beverloo: right. anyhow, I assume you have webkit there?

[03:52:42.0000] <smaug____>
could you test data:text/html,<script>document.write("onwebkitTransitionEnd" in document.documentElement); </script>

[03:52:59.0000] <smaug____>
and then data:text/html,<script>document.write("onwebkittransitionend" in document.documentElement); </script>

[03:53:01.0000] <beverloo>
No, sorry, I don't

[03:53:06.0000] <smaug____>
ah, k

[04:35:34.0000] <smaug____>
hsivonen: ping

[04:36:22.0000] <smaug____>
hsivonen: ejpbruel in moznet#developers has some questions to you

[04:57:56.0000] <MikeSmith>
smaug____: false in webkit for data:text/html,<script>document.write("onwebkitTransitionEnd" in document.documentElement); </script>

[04:58:14.0000] <MikeSmith>
smaug____: true in webkit for data:text/html,<script>document.write("onwebkittransitionend" in document.documentElement); </script>

[04:58:15.0000] <smaug____>
MikeSmith: thanks (though I got the answer elsewhere)

[04:58:32.0000] <annevk>
I forgot to comment on that bug

[04:58:48.0000] <annevk>
The suggested capitalization of event handlers seemed extremely suspect

[04:59:08.0000] <annevk>
Glad testing reveals WebKit is somewhat reasonable

[04:59:09.0000] <smaug____>
I wish there was some website where one could run scripts in various browser engines

[04:59:29.0000] <smaug____>
I don't need UI usually

[04:59:56.0000] <annevk>
smaug____: browserscope?

[05:00:17.0000] <annevk>
smaug____: it's not ideal I guess for just running scripts, but maybe someone has written something on top...

[05:02:07.0000] <smaug____>
haven't used that for ages

[05:02:19.0000] <smaug____>
it was a bit heavy and wasn't it using Flash

[05:02:24.0000] <smaug____>
but perhaps it has changed

[05:02:50.0000] <annevk>
I don't think I have Flash enabled, but it does require an extension to be installed

[05:04:13.0000] <smaug____>
ahaa

[05:04:25.0000] <smaug____>
and google account to log in

[05:04:35.0000] <smaug____>
/me creates yet another random google account

[05:06:35.0000] <smaug____>
oh, it is very different what it used to be

[05:08:58.0000] <smaug____>
I thought it used to let one to load random url and it showed the UI of the browser

[05:10:19.0000] <annevk>
Nah, you can interact with the browser, it's quite nice

[05:10:27.0000] <annevk>
Although the debugging tools on Edge 14 make it crash

[05:10:36.0000] <annevk>
At least the last time I tried, but Edge 13 works fine

[05:11:04.0000] <smaug____>
hmm, how do I get the UI?

[05:11:10.0000] <smaug____>
I must be missing something

[05:16:16.0000] <annevk>
smaug____: apologies, I meant browserstack

[05:16:21.0000] <smaug____>
ahaa

[05:16:40.0000] <annevk>
smaug____: jst can give you credentials if you don't have any, we have some kind of deal with them

[05:16:50.0000] <smaug____>
right, this is the MS' site

[06:27:40.0000] <annevk>
JakeA: nice summary about the service worker meeting

[06:28:27.0000] <JakeA>
Cheers!

[09:31:18.0000] <benydc>
Hi All

[09:40:42.0000] <benydc>
I have a question about fetch http client

[09:41:37.0000] <benydc>
I want to make repeated requests but without overflowing the memory, how can I close the connections and clear the memory?

[09:50:02.0000] <annevk>
benydc: memory?

[09:51:22.0000] <benydc>
I have screenshot

[11:13:31.0000] <TabAtkins>
mkwst, annevk: While I can put Fetch into Bikeshed, as it's not a Bikeshedded spec and doesn't independently follow Bikeshed's dfn-markup rules, the definitions won't be exposed in any useful manner. They'll all be "dfn" type and unexported.

[11:23:22.0000] <mkwst>
TabAtkins: What's the minimum that needs to happen to make the import useful?

[11:23:34.0000] <TabAtkins>
mkwst: Commenting in the Bikeshed bug that I just saw right now.

[11:23:35.0000] <mkwst>
s/<dfn/<dfn data-export/g ? :)

[11:24:59.0000] <mkwst>
Ok. If you add it to the automatic importing thing, I'll send annevk patches that do whatever you're about to tell me to do. Then it'll Just Work(tm), I'm sure.

[11:25:16.0000] <TabAtkins>
Correct.

[11:25:34.0000] <TabAtkins>
Whenever it gets fetched by Shepherd, which in the worst case is overnight.

[11:32:35.0000] <mkwst>
Wunderbar. I'll poke at that at some point, thanks!

[11:33:01.0000] <mkwst>
I'm sure annevk is going to love a million data attributes cluttering his pristine HTML. :)

[11:33:55.0000] <TabAtkins>
He already handwrites a bunch of stuff that would have been omitted by a decent processor, so he's bringing it on himself. ^_^

[14:07:52.0000] <wanderview>
JakeA: are you awake?

[14:12:44.0000] <wanderview>
JakeA: I wrote my question up as an issue: https://github.com/slightlyoff/ServiceWorker/issues/943

[14:49:54.0000] <JakeA>
wanderview: will read properly tomorrow, but your idea seems right at a glance

[16:01:06.0000] <gsnedders>
where does @apply come frm?


2016-08-05
[23:14:26.0000] <Domenic>
Does anyone know if anything specifies what should happen when the user closes their browser?

[23:14:34.0000] <Domenic>
e.g. should unload handlers run

[23:14:43.0000] <Domenic>
beacons, <a ping>s etc

[23:41:53.0000] <annevk>
Domenic: we only vaguely define that for browsing contexts

[23:42:14.0000] <annevk>
Domenic: lifecycle of documents/windows is terrible though

[23:42:28.0000] <Ms2ger>
Ask hsivonen about it :)

[23:42:28.0000] <botie>
will do

[23:42:32.0000] <Ms2ger>
Oops

[23:49:18.0000] <annevk>
Domenic: about upload streams, https://www.w3.org/Bugs/Public/show_bug.cgi?id=20322 is relevant

[23:49:39.0000] <annevk>
Domenic: it seems browsers are widely inconsistent (and XMLHttpRequest is too) about progress event listeners for uploads

[23:50:35.0000] <annevk>
Domenic: that doesn't really diminish the chunked encoding aspect, but given H2 has different framing perhaps that isn't as much of an issue (although we should still make sure of course)

[23:50:44.0000] <Domenic>
hmm hmm

[23:50:53.0000] <Domenic>
Not really sure what to make of it...

[23:51:24.0000] <Domenic>
This HEIST attack makes me feel like I don't understand the constaints anymore :(

[23:52:38.0000] <annevk>
The constraints are basically anything that isn't possible using <form>, <a>, <img>, <object>, with some exceptions that we've added over the years

[23:53:40.0000] <annevk>
Anyway, happy to help with more specific questions, not sure I can do the whole thing here from first principles

[23:55:14.0000] <Domenic>
Yeah, just unsure how we missed those constraints with fetch (and/or resource timing?)

[23:56:45.0000] <annevk>
Well, there's not a whole lot of people that understand the same-origin policy, and it's also rather complicated

[23:57:15.0000] <annevk>
With fetch() the problem was that we added a feature, "no-cors", and only thought about protecting the response

[23:57:28.0000] <annevk>
But we didn't protect against when we'd reveal there is a response

[23:57:38.0000] <annevk>
So that's rather subtle, but it's arguably a problem

[23:57:46.0000] <constant>
howdy - could I please be invited to the whatwg github org?

[23:58:19.0000] <annevk>
However, if we fix that problem service workers will stream those kind of responses a little slower to the page, potentially delaying the rendering of images and such

[23:58:48.0000] <annevk>
constant: have you contributed in the past or is there a particular reason?

[23:58:57.0000] <constant>
I've contributed in the past

[23:59:13.0000] <variable>
and will likely contribute more in the future

[23:59:19.0000] <variable>
sporadically though :)

[23:59:27.0000] <annevk>
variable: are you https://github.com/constant?

[23:59:34.0000] <variable>
no, I'm 'grimreaper'

[23:59:46.0000] <annevk>
ah okay

[00:01:16.0000] <annevk>
variable: done btw

[00:01:29.0000] <variable>
tyvm

[00:01:55.0000] <variable>
fancy :)

[00:17:36.0000] <annevk>
I wonder if that person knew membership was not a requirement to post

[00:18:02.0000] <Domenic>
They were posting on some threads I think

[00:18:11.0000] <Domenic>
Probably they just wanted the cool GitHub profile badge?

[00:19:00.0000] <annevk>
We do have the coolest badge

[01:04:11.0000] <annevk>
Domenic: https://github.com/whatwg/fetch/issues/355 describes this new attack briefly in the third comment

[01:31:54.0000] <mkwst>
annevk: Building Fetch, I'm getting an xref error for "handle foreign fetch".

[01:32:11.0000] <mkwst>
Is there anything I need to do to update xrefs other than just pulling down the repository?

[01:40:53.0000] <annevk>
mkwst: sorry, committed the latest

[01:41:01.0000] <annevk>
mkwst: git pull on whatwg/xref should do it

[01:41:31.0000] <mkwst>
Easy, thanks!

[01:54:17.0000] <annevk>
mkwst: the @ goes before the name, fwiw

[01:59:46.0000] <mkwst>
Hrm?

[02:00:18.0000] <annevk>
mkwst: you wrote annevk@ on GitHub

[02:00:27.0000] <annevk>
mkwst: and tabatkins@

[02:00:34.0000] <mkwst>
Ah! I just fixed that. ;)

[02:01:11.0000] <annevk>
mkwst: thoughts on https://www.w3.org/Bugs/Public/show_bug.cgi?id=20322 by any chance?

[02:01:19.0000] <mkwst>
I didn't pay much attention to the column width, no. I'll clean that up. I just wanted to see if you would be sad about the patch in general before spending too much time on it.

[02:01:33.0000] <annevk>
mkwst: we should probably sort out what we do there and what we want to do there and then apply it to streams

[02:01:52.0000] <annevk>
mkwst: nah that patch looks fine, will make it easier to transition to bikeshed at some point

[02:02:28.0000] <mkwst>
annevk: Ok. Then I'll clean it up and send you more when I have downtime. It's a nice brainless thing to do while waiting for things to compile and tests to run.

[02:02:39.0000] <mkwst>
Looking at the bug now.

[02:19:37.0000] <mkwst>
annevk: I wouldn't be terribly surprised if Chrome's behavior had shifted in the last few years. :)

[02:19:45.0000] <mkwst>
Let me see what we're doing today.

[02:28:26.0000] <mkwst>
http://w3c-test.org/cors/late-upload-events.htm <-- Firefox and Chrome both agree that the first test passes, and the second fails.

[02:33:54.0000] <mkwst>
same in Edge.

[02:41:51.0000] <annevk>
Yeah, I'm not sure that test is really testing anything though

[02:42:19.0000] <annevk>
See https://bugzilla.mozilla.org/show_bug.cgi?id=1254382#c18

[03:56:25.0000] <smaug____>
Domenic: FWIW, I don't know the context in https://github.com/w3c/webcomponents/issues/537 Like, why is document.write disabled at all there?

[03:57:12.0000] <smaug____>
I assume letting document.write to be called would make parsing algorithm more complicated or something, but not sure.

[04:28:04.0000] <annevk>
JakeA: why do you bring up images in https://github.com/whatwg/fetch/issues/355#issuecomment-237813169?

[04:28:21.0000] <annevk>
JakeA: and what is a "supported image header"?

[04:29:09.0000] <JakeA>
annevk: I thought that was one of the avenues for response end?

[04:29:33.0000] <annevk>
JakeA: also, what do you mean by "Hm, ok, so it does require two requests."? The attack currently doesn't, although they perform multiple to get more accuracy

[04:29:54.0000] <annevk>
JakeA: so is <object> or <iframe>

[04:30:07.0000] <JakeA>
annevk: most image formats can be detected in the first few bytes, so if it isn't a valid image, we can bail early

[04:30:31.0000] <JakeA>
Are object/iframe accurate enough?

[04:30:42.0000] <annevk>
JakeA: I'm not sure why they wouldn't be

[04:31:15.0000] <JakeA>
annevk: I'm struggling to see the attack where you can get header time & body in one fetch()

[04:31:49.0000] <annevk>
JakeA: through response timing

[04:32:11.0000] <annevk>
JakeA: I've said it every other comment or so, it's also in the paper

[04:35:43.0000] <JakeA>
annevk: in didn't realise you'd get response end unless the body was consumed

[04:36:02.0000] <annevk>
JakeA: I don't follow the "unless"

[04:37:16.0000] <JakeA>
annevk: if I do fetch(url), but then don't consume the body of the response, it doesn't seem like response ended

[04:37:28.0000] <JakeA>
Since it was never given to anything that wanted to read it

[04:38:08.0000] <JakeA>
(unless you used it in a service worker and responsed with it, then an img may read it)

[04:38:10.0000] <annevk>
JakeA: resource timing is just concerned with network traffic

[04:38:41.0000] <JakeA>
Giving that data for no-cors seems broken

[04:39:06.0000] <annevk>
Maybe, but such data can already be gotten through other means

[04:39:12.0000] <annevk>
E.g., <object>

[04:39:43.0000] <JakeA>
Right, but in that case it needs to be two requests right?

[04:39:49.0000] <annevk>
What is new is responseStart for no-cors

[04:40:14.0000] <annevk>
Just one request to get responseEnd, just like today

[04:40:17.0000] <JakeA>
Padding onload times for object/iframe/cache add seems doable

[04:40:43.0000] <annevk>
I think the paper said that was unlikely to work, but that's again not solving the root cause

[04:41:15.0000] <annevk>
The root cause is no-cors fetch() being a new capability

[04:41:41.0000] <JakeA>
And we're sure this problem doesn't already exist with cors requests rejecting?

[04:41:46.0000] <annevk>
If we fix symptoms it's likely we'll find ourselves having this discussion again some time from now

[04:42:07.0000] <annevk>
Those requests include an Origin header

[04:42:28.0000] <annevk>
But we should investigate and discuss with the authors of the paper

[04:43:26.0000] <JakeA>
Feels like your proposed fix will have a big impact on service worker performance

[04:43:48.0000] <JakeA>
No more streaming for no-cors

[04:44:58.0000] <annevk>
Yeah, sucks, but this leak is pretty bad

[04:47:51.0000] <JakeA>
annevk: another option is for no-cors to always resolve instantly. Then you lose detecting a fetch failure

[04:48:09.0000] <JakeA>
But keep performance

[04:50:42.0000] <annevk>
JakeA: I'm not sure what that means

[05:07:51.0000] <JakeA>
annevk: I'm typing while walk, sorry, will type up thoughts properly tomorrow morning

[05:09:04.0000] <JakeA>
(thought was fetch() would instantly resolve with an opaque response if no-cors and cross-origin. That opaque response may be an error)

[05:11:42.0000] <annevk>
That doesn't really help, we can already figure out if the resource exists

[05:11:51.0000] <annevk>
We're not defending against that

[05:34:13.0000] <JakeA>
I realise that, but it also defends against knowing when headers arrive, but doesn't prevent response streaming from a service worker

[05:39:01.0000] <annevk>
JakeA: don't we expose url on the response?

[05:39:24.0000] <annevk>
JakeA: and we might expose status

[05:39:38.0000] <annevk>
JakeA: wouldn't work with too early, only late

[05:40:05.0000] <JakeA>
Yeah :(

[05:40:44.0000] <JakeA>
Would have to make breaking changes to make it work

[06:33:19.0000] <wanderview>
annevk: we don't expose url and status on opaque responses, though

[06:34:24.0000] <wanderview>
JakeA: resolving immediately here would require your theorized "isResponseOk()" thing to be async... for detecting something that would cause respondWith() to fail

[06:47:22.0000] <JakeA>
Yep. And I guess that would have to buffer the whole body if the response is ok

[06:49:47.0000] <JakeA>
Static routes wouldn't have this problem :D

[06:59:03.0000] <wanderview>
annevk: JakeA: I think part of the problem with resolving opaque responses immediately is you may not know its opaque until after some network traffic... think a same-origin request.url that is redirected cross-origin... for a no-cors request that gives you opaque

[06:59:19.0000] <wanderview>
if its ok to resolve as soon as we determine it will be opaque, then it could probably work

[06:59:35.0000] <wanderview>
I believe all the consumers of opaque responses are async

[07:00:19.0000] <wanderview>
so opaque responses could contain an internal "response is really available" promise... any async API accepting an opaque response would just do their normal async logic waiting on that internal promise

[07:00:58.0000] <wanderview>
although I guess this issue makes it harder to resolve immediately: https://github.com/whatwg/fetch/issues/357

[07:15:49.0000] <annevk>
wanderview: I thought we did expose url, hmm

[07:16:11.0000] <wanderview>
annevk: thats only on opaqueredirect... opaque exposes nothing

[07:46:57.0000] <tobie>
Anyone can point me to an HTML diff tool that wouldn't choke on custom elements? (I have some <emu-val> in my HTML.)

[07:48:21.0000] <tobie>
Context: I'm trying to clean-up the output of XSLT transform with a custom script and wan't to make I don't modify the HTML by doing so.

[08:03:43.0000] <annevk>
wanderview: not even whether it's redirected?

[08:04:03.0000] <annevk>
wanderview: I thought we did expose that

[08:04:48.0000] <wanderview>
annevk: redirected is based off the URL list... its hidden: https://fetch.spec.whatwg.org/#concept-filtered-response-opaque

[08:05:00.0000] <annevk>
wanderview: yeah, I noticed, but I wonder if that's correct

[08:05:13.0000] <wanderview>
seems consistent to me

[08:05:17.0000] <wanderview>
and its what we are shipping

[08:06:07.0000] <annevk>
wanderview: https://github.com/whatwg/fetch/commit/e54f6bd1e75f46cd4b8202f5ee3bfa68e9ded906 mentions it fixes https://github.com/whatwg/fetch/issues/79 so it was meant to expose redirects for opaque responses

[08:06:18.0000] <annevk>
wanderview: so that seems like a bug in the spec

[08:06:33.0000] <annevk>
wanderview: I'll reopen the issue

[08:07:09.0000] <wanderview>
annevk: we internally still do the check for redirected opaque responses... its just not exposed to script

[08:07:22.0000] <wanderview>
annevk: I don't follow where it says it was supposed to be exposed to script in those links

[08:07:39.0000] <annevk>
wanderview: the issue reads "Add a bit to Opaque Responses to distinguish redirects"

[08:08:07.0000] <wanderview>
annevk: we look at the URL list of the unfiltered internal object to implement that bit... but its *not* exposed to script AFAICT... and I don't see why we would want to

[08:08:34.0000] <annevk>
wanderview: because that issue wants it to be exposed?

[08:09:29.0000] <annevk>
wanderview: and because we determined in that issue that there's no foul in exposing it?

[08:09:39.0000] <annevk>
Anyway, I reopened the issue

[08:12:09.0000] <wanderview>
annevk: I don't think we need to expose this to script... the currently implemented spec blocks the exploit linked to in that issue

[08:12:36.0000] <wanderview>
annevk: and I haven't been able to find anything about why it would need to be exposed to script anyway... we just need to track it internally and check in respondWith()

[08:12:46.0000] <wanderview>
annevk: please don't change this without a good reason

[08:13:10.0000] <annevk>
wanderview: slightlyoff gives several reasons there

[08:13:13.0000] <annevk>
wanderview: you can already determine it

[08:13:54.0000] <annevk>
wanderview: if you want to argue for removing the API since you only need the internal bit, that's fine

[08:14:07.0000] <annevk>
wanderview: and I suggested as much since nobody noticed the original request went unaddressed

[08:14:18.0000] <annevk>
wanderview: but the issue asked about redirected being exposed for opaque responses

[08:14:25.0000] <annevk>
wanderview: what you're talking about is a bit that existed long before that

[08:14:59.0000] <wanderview>
annevk: its nice to have the getter for same-origin and cors... I see no reason to provide an exception to our previous model for opaque

[08:15:24.0000] <annevk>
wanderview: I'm not sure what model you're referring to

[08:15:30.0000] <wanderview>
annevk: and I don't really care what the original request was in the issue... only that the exploit is no longer feasible

[08:15:49.0000] <wanderview>
annevk: the model of "don't expose anything on opaque... make it identical to a network error"

[08:15:57.0000] <wanderview>
we've been consistent in that throughtout

[08:16:13.0000] <annevk>
wanderview: a network error doesn't surface as a response, so that isn't really true anyway

[08:17:09.0000] <wanderview>
annevk: I'm talking about this spec non-normative note: In other words, an opaque filtered response and an opaque-redirect filtered response are nearly indistinguishable from a network error. When introducing new APIs, do not use the internal response for internal specification algorithms as you will leak information.

[08:17:20.0000] <wanderview>
annevk: which is in the spec... I think you know what I mean

[08:19:42.0000] <annevk>
Sure, but I still don't see why we'd have redirected then, you can just compare the response url to the request url for same-origin/cors; the only interesting case is opaque

[08:20:20.0000] <annevk>
And I think we've been okay with making some exceptions to the network error comparison when it's clearly observable

[08:20:23.0000] <wanderview>
annevk: because you may not have the request in the code examining the response?

[08:20:27.0000] <annevk>
E.g. that's why opaque redirects expose the url field

[08:26:53.0000] <wanderview>
annevk: if you want to remove the .redirected I guess I don't mind... I'm just opposed to exposing the actual .redirected value on opaque responses

[08:28:16.0000] <annevk>
wanderview: on the grounds that opaque responses should never have properties that return something meaningful?

[08:28:35.0000] <annevk>
wanderview: it's a little hard to understand the motivation

[08:29:18.0000] <wanderview>
annevk: to be consistent with the principal that we expose no information on opaque responses that we've had since day one...  because we're being defensive and don't fully understand the implications of allowing no-cors fetch

[08:29:39.0000] <wanderview>
annevk: I mean... we're in a condition now where we are trying to remove information (timing) of opaque... I think its not wise to then add more information to opaque

[08:30:48.0000] <annevk>
Yeah, we should certainly first figure out that in depth before turning this around

[08:31:06.0000] <annevk>
Hopefully Chrome implements redirected in the same way

[08:34:18.0000] <wanderview>
anyway, thats my motivation

[09:00:16.0000] <gsnedders>
annevk: am I right in thinking most of the recent security issues around the same-origin policy have been using side-channels?

[09:00:46.0000] <gsnedders>
annevk: like, say, the timing sidechannel of the most recent attack (or is that not the most recent anymore, idk)?

[09:05:32.0000] <annevk>
gsnedders: in a way

[09:06:11.0000] <annevk>
gsnedders: I guess the question is when a sidechannel becomes data

[09:07:12.0000] <gsnedders>
/me would simply call anything outwith the request/response contents a sidechannel


2016-08-06
[07:13:16.0000] <tobie>
Domenic, annevk, heycam: is there a reason to make a distinction between http://heycam.github.io/webidl/#dfn-throw and http://heycam.github.io/webidl/#ecmascript-throw given ES bindings only?

[07:20:28.0000] <annevk>
tobie: convenience for DOMException I suppose

[07:21:13.0000] <annevk>
tobie: but there is potential for simplification throughout IDL by collapsing the binding into the model

[07:21:46.0000] <tobie>
yeah, the more I dig into it, the more this seems obvious.

[07:22:39.0000] <tobie>
annevk: ty


2016-08-07
[14:26:04.0000] <knod>
I'm looking at https://developers.whatwg.org/elements.html#elements and it describes how the hgroup element should be used. Caniuse.com lists hgroup in the obsolete/deprecated set of elements. Is the whatwg page not up to date, or is caniuse wrong about this one?

[14:35:04.0000] <knod>
How are w3c and whatwg related?

[16:43:57.0000] <Domenic>
knod: caniuse is outdated

[16:44:38.0000] <knod>
Domenic: Is it possible they're using the W3C spec?

[16:44:39.0000] <Domenic>
knod: they are separate standards organizations. sometimes the w3c copies our work and rebrands it as their own. See https://wiki.whatwg.org/wiki/FAQ#What_are_the_various_versions_of_the_HTML_spec.3F

[16:45:04.0000] <Domenic>
knod: not sure

[16:45:33.0000] <Domenic>
ah hmm i guess they are. an example of the confusion caused by such copying...

[16:46:32.0000] <knod>
Ok


2016-08-08
[01:25:14.0000] <JakeA>
annevk: samesite cookies in "lax" most stops HEIST today right? Aside from the intranet case of course

[01:33:27.0000] <annevk>
JakeA: you mean if a site only used samesite cookies?

[01:33:37.0000] <annevk>
JakeA: and we imagine all browsers support them?

[01:35:02.0000] <JakeA>
annevk: yes, but that's true for From-Origin too. Both browsers and sites need to add it

[01:35:27.0000] <annevk>
JakeA: the upside with From-Origin is that you don't have to reinvent login

[01:36:11.0000] <annevk>
JakeA: migrating all your cookie usage to new patterns (that have usability downsides) seems much harder than adding a flag

[01:36:49.0000] <annevk>
JakeA: https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site is the latest draft btw

[01:36:52.0000] <annevk>
not 07

[01:38:37.0000] <JakeA>
annevk: fair. Samesite's lax option should keep login simple, but agree it's more effort than a flag

[01:39:13.0000] <JakeA>
Cheers, I was getting a hanging request trying to follow that link earlier.

[01:40:34.0000] <annevk>
mkwst: what is the repo for same-site?

[01:40:39.0000] <annevk>
mkwst: https://github.com/mikewest/internetdrafts doesn't seem to be it

[01:41:01.0000] <annevk>
JakeA: yeah, I think tools.ietf.org has issues

[01:41:06.0000] <annevk>
I had the same anyway

[01:47:30.0000] <mkwst>
annevk: https://github.com/httpwg/http-extensions

[01:50:00.0000] <annevk>
mkwst: https://github.com/httpwg/http-extensions/issues/220

[01:51:08.0000] <annevk>
mkwst: also, more Origin Policy use cases: https://github.com/w3c/resource-timing/issues/64#issuecomment-238170658 \o

[01:51:18.0000] <annevk>
 /

[01:53:27.0000] <mkwst>
annevk: I don't think the origin manifest thing is hurting for use cases. :)

[05:09:56.0000] <Ms2ger>
background-color: rgb(0 128 0)

[05:09:57.0000] <Ms2ger>
Wat

[05:24:41.0000] <ondras>
so, when using html5 dragdrop APIs, is it somehow possible to modify the appearance of the DOM element being dragged (or, rather, its semi-transparent clone)?

[07:41:59.0000] <annevk>
smaug____: FWIW, zcorpan isn't back until tomorrow or day after

[07:42:08.0000] <smaug____>
k

[07:44:24.0000] <smaug____>
annevk: FWIW, I think that change is rather risky but we'll see

[07:44:31.0000] <smaug____>
it would be nice to get it fixed though

[08:12:48.0000] <smaug____>
annevk: hmm, so https://html.spec.whatwg.org/multipage/forms.html#dom-textarea/input-setrangetext . how should that work in case selectionStart and selectionEnd return null?

[08:13:03.0000] <smaug____>
I guess that is a question to zcorpan

[08:13:48.0000] <smaug____>
oh, nm

[08:14:10.0000] <smaug____>
it is defined in totally different place that the method throws

[09:13:15.0000] <annevk>
smaug____: seems like something we should fix

[09:13:27.0000] <annevk>
Action at a distance is bad

[09:14:19.0000] <jgraham>
It's Quantum!

[09:14:31.0000] <jgraham>
Quantum is good, right?

[09:23:27.0000] <nox>
Quantum Leap

[16:00:41.0000] <tobie>
TabAtkins: would love your thoughts on https://github.com/tobie/webidl/issues/8


2016-08-09
[20:09:53.0000] <Domenic>
Wait so what is the relationship between composed events and event retargeting

[20:10:08.0000] <Domenic>
composed = false means the event doesn't make it past the shadow root boundary?

[23:48:33.0000] <MikeSmith>
anybody awake who has written web-platform-test tests and ever run into the error “Cannot read property 'has_extended_attribute' of undefined” when running idlharness.js tests on an interface

[23:54:52.0000] <annevk>
Domenic: correct

[23:55:20.0000] <annevk>
Domenic: well, the shadow root boundary that is the event's target root, if any

[00:18:17.0000] <Ms2ger>
zcorpan, welcome back :)

[00:18:25.0000] <zcorpan>
Ms2ger: thx

[01:12:06.0000] <MikeSmith>
det var länge sedan zcorpan

[01:12:19.0000] <zcorpan>
MikeSmith: o/

[01:12:45.0000] <MikeSmith>
glad you had a nice vacation but also glad you’re back :)

[01:15:03.0000] <zcorpan>
:-)

[01:15:24.0000] <zcorpan>
is there something i should deal with pronto?

[01:17:08.0000] <MikeSmith>
zcorpan: nope, though I reckon I will start recalling various things I’d wanted to ask you about

[01:17:53.0000] <MikeSmith>
zcorpan: dunno if you saw yet but I landed the ignore-template-subtree support in the HTML checker

[01:18:05.0000] <MikeSmith>
and it seems to work as expected

[01:18:39.0000] <MikeSmith>
it was a bit more complicated to implement than I had expected

[01:19:25.0000] <MikeSmith>
oh also you will find some interesting info at https://validator.w3.org/nu/stats.html if you scroll down

[01:20:41.0000] <MikeSmith>
zcorpan: ah one thing I wanted to ask you is please think about anything you think we should have the checker collect statistics on

[01:20:48.0000] <zcorpan>
MikeSmith: yeah i saw, nice

[01:21:02.0000] <MikeSmith>
e.g., I recently added a counter for <style> in body

[01:22:04.0000] <zcorpan>
Manually set character encoding	0 haha

[01:23:18.0000] <zcorpan>
hmm does v.nu still use us-ascii as default for text/xml?

[01:23:44.0000] <hsivonen>
zcorpan: possible

[01:23:44.0000] <botie>
hsivonen, at 2016-08-05 06:42 UTC, Ms2ger said: it :)

[01:23:55.0000] <zcorpan>
where is mozillaquestquest.com when you need it

[01:24:06.0000] <hsivonen>
:-)

[01:24:08.0000] <Ms2ger>
Thank you botie

[01:24:38.0000] <hsivonen>
fun fact: you can show the encoding UI even in the HTML5 UI using a magic URL: https://html5.validator.nu/?charset

[01:24:55.0000] <MikeSmith>
oh

[01:26:05.0000] <annevk>
/me runs git blame source

[01:26:24.0000] <annevk>
Maybe I should go make some tea

[01:27:20.0000] <MikeSmith>
hah

[01:27:53.0000] <MikeSmith>
for the HTML spec I find I have a lot more success just grepping through git log output than using blame

[01:29:13.0000] <MikeSmith>
because often the first blame doesn’t tell me what I want to know and then I have to recurse

[01:30:34.0000] <zcorpan>
MikeSmith: i recall hsivonen collected statistics of most common errors back in the day

[01:30:44.0000] <MikeSmith>
oh yeah?

[01:31:01.0000] <MikeSmith>
I wonder now how

[01:31:15.0000] <hsivonen>
zcorpan: very long ago. I haven't had that logging running in the recent years.

[01:31:57.0000] <annevk>
MikeSmith: grep failed to find it, or I did not know what to search for… 😞

[01:32:04.0000] <MikeSmith>
ah

[01:32:36.0000] <MikeSmith>
annevk: if you have to recurse you might find https://github.com/scottgonzalez/recursive-blame useful

[01:33:13.0000] <MikeSmith>
though it’s broke for me in my environment right now

[01:34:38.0000] <zcorpan>
MikeSmith: https://lists.w3.org/Archives/Public/public-html/2008Jan/0305.html

[01:34:57.0000] <hsivonen>
MikeSmith: https://github.com/validator/validator/blob/cbca37f2a633edcb512395e260e5e5887882b28f/src/nu/validator/messages/MessageEmitterAdapter.java#L745 is the logger than needs to be enabled in the log4j config

[01:35:25.0000] <MikeSmith>
/me looks

[01:35:45.0000] <MikeSmith>
oh wow

[01:36:13.0000] <MikeSmith>
hsivonen: will that just log all the messages? but not count them, right?

[01:36:45.0000] <MikeSmith>
zcorpan: thanks

[01:37:21.0000] <annevk>
zcorpan: gsnedders: do you happen to know where the parser handles duplicate attributes?

[01:38:04.0000] <hsivonen>
MikeSmith: counting was with post-processing using traditional shell tools

[01:38:09.0000] <MikeSmith>
hsivonen: though I realize it would not be hard to just post-process that with some sort+uniq or whatever

[01:38:15.0000] <MikeSmith>
hsivonen: yeah

[01:38:19.0000] <annevk>
Or maybe MikeSmith / hsivonen knows?

[01:38:37.0000] <annevk>
As far as I can tell the tokenizer hands duplicates to the tree builder, but they're not handled there

[01:38:54.0000] <annevk>
We have a patch to fix it there: https://github.com/whatwg/html/pull/1637

[01:39:04.0000] <annevk>
But I wonder whether I'm missing something

[01:39:25.0000] <zcorpan>
"When the user agent leaves the attribute name state (and before emitting the tag token, if appropriate), the complete attribute's name must be compared to the other attributes on the same token; if there is already an attribute on the token with the exact same name, then this is a parse error and the new attribute must be removed from the token."

[01:40:00.0000] <zcorpan>
we should inline that

[01:40:39.0000] <MikeSmith>
annevk: https://github.com/validator/htmlparser/blob/master/src/nu/validator/htmlparser/impl/Tokenizer.java#L1125

[01:40:52.0000] <annevk>
zcorpan: that might make sense

[01:40:58.0000] <hsivonen>
annevk: paragraph at the end of the Attribute name state: https://html.spec.whatwg.org/multipage/syntax.html#attribute-name-state

[01:41:24.0000] <MikeSmith>
code comment in the htmlparser source is the same zcorpan quoted

[01:41:31.0000] <annevk>
zcorpan: where is <html test > <html test=2 x> handled?

[01:41:41.0000] <MikeSmith>
and same hsivonen just cited

[01:43:02.0000] <annevk>
zcorpan: never mind, found it

[01:47:03.0000] <MikeSmith>
zcorpan: OK, I' experiment

[01:47:06.0000] <MikeSmith>
oofs

[01:48:31.0000] <MikeSmith>
zcorpan: OK, for the checker I’ll experiment with turning on logging of all error messages so we can have raw logs to get most-common-errors data from

[01:49:03.0000] <zcorpan>
MikeSmith: ok cool

[01:49:57.0000] <MikeSmith>
not sure how long I can keep it running for the W3C instances given how much they get hit, but I reckon even just 24 hours of logs should give us what we need

[01:50:34.0000] <MikeSmith>
altogether they process about a million document requests every day

[01:51:19.0000] <MikeSmith>
and I reckon each document on average must have a dozen or more errors

[01:51:38.0000] <MikeSmith>
documents with hundreds of errors are not uncommon

[01:52:17.0000] <MikeSmith>
anyway, will need to wait til later this week. Today I have to work on writing tests for the Payment Request API

[01:54:07.0000] <MikeSmith>
hey a somewhat interesting side effect of the language-detection stuff I added is that I also created a specific (n-gram) profile to detect "Lorem ipsum" text

[01:55:35.0000] <MikeSmith>
and it turns out that "Lorem ipsum" documents are one of the top-20 most common “languages” detected

[01:56:30.0000] <MikeSmith>
about 0.3% of all documents checked

[01:58:02.0000] <MikeSmith>
0.3% is more than, e.g., the number of Norwegian documents

[02:23:03.0000] <MikeSmith>
zcorpan: (and all) I notice that the HTML spec never normatively states what html@lang is

[02:23:22.0000] <MikeSmith>
instead it just says, “Authors are encouraged to specify a lang attribute on the root html element, giving the document's language.”

[02:23:28.0000] <MikeSmith>
should we make that normative

[02:24:58.0000] <zcorpan>
MikeSmith: it has normative text for the language of a node

[02:25:53.0000] <zcorpan>
https://html.spec.whatwg.org/multipage/dom.html#language

[02:29:50.0000] <MikeSmith>
ah OK

[02:31:21.0000] <MikeSmith>
so of node=HTMLHtmlElement, then it is the language for the entire document

[03:29:35.0000] <gsnedders>
annevk: the tokenizer does

[03:29:43.0000] <gsnedders>
annevk: gimme a min

[03:29:54.0000] <gsnedders>
annevk: oh, hsivonen already said

[03:30:17.0000] <gsnedders>
/me can't skim read when sleep depreived, obviously

[04:09:29.0000] <annevk>
Supporting the HTTP trailer is actually a whole lot of work

[05:32:48.0000] <smaug____>
/me wonders if one should follow wicg

[05:32:50.0000] <smaug____>
I guess no

[07:00:48.0000] <annevk>
Domenic: I noticed fetch() is using entry setting objects

[07:14:27.0000] <MikeSmith>
is there a way to run chromium third_party/WebKit/LayoutTests from the web?

[07:14:56.0000] <MikeSmith>
just whatever is in the trunk I mean

[07:16:43.0000] <caitp>
doubt it

[07:17:50.0000] <caitp>
since layout tests often depend on special APIs not exposed to the web, it seems like it would be hard to run them from the web

[07:49:42.0000] <MikeSmith>
caitp: ok, makes sense

[13:41:35.0000] <Domenic>
annevk: :(

[14:38:34.0000] <jsbell>
let the record show that boris zbarsky is an awesomely helpful person

[14:40:47.0000] <astearns>
in my understanding, the record is littered with those sentiments

[15:48:36.0000] <smaug____>
could someone explain why https://w3c.github.io/webappsec-mixed-content/#categorize-settings-object works

[15:49:10.0000] <smaug____>
it just goes through from document to subdocument and possibly its descendants

[15:49:40.0000] <smaug____>
but doesn't go through all the subdocuments of the top level doc

[15:49:49.0000] <smaug____>
mkwst: ^

[15:52:07.0000] <smaug____>
maybe I don't understand what "embedding document" means

[15:52:37.0000] <smaug____>
yes, I don't

[15:52:54.0000] <smaug____>
I don't know whether "embedding document" is ancestor or descendant

[15:53:05.0000] <smaug____>
Domenic: you might be awake

[15:54:48.0000] <smaug____>
or annevk

[16:10:21.0000] <jyasskin>
smaug____: It'll be the ancestor. Follow https://w3c.github.io/webappsec-mixed-content/#embedding-document and https://html.spec.whatwg.org/multipage/browsers.html#browsing-context-nested-through

[16:10:41.0000] <smaug____>
yup

[16:11:15.0000] <smaug____>
the language could be a bit simpler to read... or I should not read it at 2am

[16:17:47.0000] <jyasskin>
I think it could use "parent document" by analogy to "parent browsing context" (https://html.spec.whatwg.org/multipage/browsers.html#parent-browsing-context). It gives me a bit of pause that https://www.w3.org/TR/html51/browsers.html#sec-nested-browsing-contexts is quite different from

[16:17:48.0000] <jyasskin>
https://html.spec.whatwg.org/multipage/browsers.html#nested-browsing-contexts.

[16:56:12.0000] <Domenic>
Yeah, webappssec linking to the wrong spec causes a lot of problems for people trying to understand the specs :(

[16:56:41.0000] <Domenic>
Would be better to follow CSSWG policy and link to the fork only for REC snapshots, and leave EDs linking to the HTML Standard.


2016-08-10
[23:23:08.0000] <annevk>
zcorpan: that all image fetching logic needs to be duplicated is...

[23:23:27.0000] <zcorpan>
yeah :-(

[23:26:32.0000] <zcorpan>
filed an issue

[00:43:11.0000] <zcorpan>
are people going to tpac?

[00:43:29.0000] <annevk>
zcorpan: I am

[00:43:55.0000] <annevk>
Might be the last time, we'll see

[00:44:09.0000] <zcorpan>
ok

[00:44:50.0000] <annevk>
I think MikeSmith is also going

[00:44:50.0000] <botie>
okay, annevk.

[00:45:01.0000] <annevk>
botie: yes

[00:45:01.0000] <botie>
annevk: excuse me?

[01:05:15.0000] <zcorpan>
annevk: what are you attending on thursday and friday? :-)

[01:07:19.0000] <zcorpan>
hmm gsnedders got a room for Improving browser interoperability brainstorm

[01:08:24.0000] <annevk>
zcorpan: Web Platform maybe, likely WebAppSec

[01:08:58.0000] <annevk>
maybe Web Performance

[01:09:16.0000] <annevk>
but I also hope that we can figure out some unconf track

[01:19:54.0000] <zcorpan>
i think i'll select "other" on thursday and friday and hang around in gsnedders' room, and maybe pop in some meeting

[01:22:21.0000] <annevk>
maybe I should try bring my PS4 for gsnedders' room

[01:23:08.0000] <annevk>
also, we should take a (half) day somewhere to walk around Lisbon

[01:23:52.0000] <annevk>
if there's going to be a lot of #whatwg folks that'd be a nice way to socialize for a bit

[01:35:17.0000] <zcorpan>
yes certainly

[01:37:09.0000] <zcorpan>
i'll also most likely be running at least once, in case somebody here is reading this and also likes to run

[02:22:04.0000] <MikeSmith>
yeah I’ll be at TPAC for sure

[02:22:26.0000] <MikeSmith>
glad to know zcorpan is going

[03:44:29.0000] <zcorpan>
hehe "... we find the size of the response as 14600 − 529 − 26 − 708 = 13337 bytes." http://papers.mathyvanhoef.com/blackhat2016.pdf

[03:44:46.0000] <jgraham>
I am also going to TPAC for some reason. although maybe the unofficial testing meeting will be useful

[03:44:46.0000] <botie>
okay, jgraham.

[03:45:09.0000] <jgraham>
Did botie suddenly become very sarcastic?

[03:45:22.0000] <zcorpan>
maybe is botie taking notes of who are going to TPAC

[04:26:45.0000] <MikeSmith>
jgraham too

[04:26:54.0000] <MikeSmith>
getting the band back together

[04:29:24.0000] <MikeSmith>
caitp: fun V8 bug that nobody has claimed yet https://bugs.chromium.org/p/chromium/issues/detail?id=627309&desc=2

[04:40:49.0000] <caitp>
MikeSmith: I suggest CCing toon or jochen, I don't have editbugs on the main bug tracker, can't do it myself

[04:41:11.0000] <caitp>
I imagine they would have views on changing the contract of api methods in v8, though

[04:42:16.0000] <MikeSmith>
caitp: I don’t have editbugs either, but jochen__ is around here when online so will see this cc yhirano_

[04:42:29.0000] <caitp>
ah, right

[06:09:43.0000] <zcorpan>
MikeSmith: about https://github.com/whatwg/html/issues/709 my hunch is that it's marginal benefit to be checking these characters, and non-trivial to get it right. should we drop it?

[06:14:43.0000] <MikeSmith>
/me looks

[06:15:06.0000] <MikeSmith>
zcorpan: yes

[06:15:27.0000] <MikeSmith>
I looked at that a lot and talked to Richard and yeah it seems very hard to get right

[06:16:15.0000] <MikeSmith>
and I do not look forward to needing to implement it :)

[06:22:44.0000] <zcorpan>
ok

[06:32:38.0000] <zcorpan>
PR at https://github.com/whatwg/html/pull/1645

[07:00:58.0000] <annevk>
Sebmaster: potential URL parsing bug in whatwg-url: https://github.com/whatwg/url/issues/139

[07:01:11.0000] <annevk>
Sebmaster: either that or I'm missing something

[07:01:13.0000] <Sebmaster>
yeah I saw, he already created an issue in our repo

[07:01:18.0000] <annevk>
which is likely

[07:01:24.0000] <annevk>
okay

[07:01:36.0000] <Sebmaster>
i got a bit of time, ill check it out

[07:07:57.0000] <Sebmaster>
hm, works for me

[09:27:50.0000] <smaug____>
anyone with Edge?

[09:34:05.0000] <smaug____>
nm

[10:35:23.0000] <TabAtkins>
Aaaaaaah we might finally have a path to getting rid of the "try layout without scrollbars, and if it overflows, restart with scrollbars" behavior https://github.com/w3c/csswg-drafts/issues/92#issuecomment-238940665

[10:38:43.0000] <Domenic>
I guess I don't understand why what's being discussed there is different than overflow: scroll

[11:17:06.0000] <wanderview>
Mek: do you know if chrome canary keeps the service worker alive after I close the last tab with a document of that origin?  does it run it in a separate process?

[11:19:17.0000] <wanderview>
Mek: I'm running a test where I repeatedly open a tab, measure its load time, and then close a tab... in chrome release this seems to incur a SW startup penalty... in canary it seems like the SW startup penalty is not there

[11:20:40.0000] <Domenic>
botie: ask rniwa if he has any opinions on https://github.com/w3c/webcomponents/issues/537 ?

[11:20:41.0000] <botie>
will do

[11:43:18.0000] <TabAtkins>
Domenic: overflow:scroll always shows the scrollbar, regardless of whether the content overflows. This is ugly and people don't like it, which is the entire reason overflow:auto exists (and has *way* higher usage).

[11:43:46.0000] <Domenic>
TabAtkins: what would value1 or value2 do differently?

[11:43:59.0000] <TabAtkins>
Domenic: But overflow:auto changes the element's internal geometry based on whether it overflows, which is bad for a bunch of reasons. This proposal is preventing that. You still only *see* a scrollbar when things overflow, but you'll always have that space reserved.

[11:44:19.0000] <TabAtkins>
Domenic: ...exactly what it says? Like, value2 is literally a diff on value1, it describes precisely what its difference is.

[11:44:21.0000] <Domenic>
right, I guess I don't understand the difference between "space reserved" and "shows a scrollbar"

[11:44:40.0000] <Domenic>
reserved for the scrollbar, I assume?

[11:44:44.0000] <TabAtkins>
Yeah.

[11:44:53.0000] <TabAtkins>
You don't paint a scrollbar, but still reserve the geometry for it.

[11:45:01.0000] <Domenic>
What do you paint instead?

[11:45:04.0000] <TabAtkins>
Nothing.

[11:45:19.0000] <TabAtkins>
It's just empty space; you'll see whatever's underneath it.

[11:45:42.0000] <Domenic>
I guess that makes sense

[11:45:59.0000] <TabAtkins>
(Sorry, I'm still really confused about what's confusing you, so I don't know how well I can explain.)

[11:46:10.0000] <Domenic>
I think that was what I was missing

[11:48:28.0000] <Mek>
wanderview: closing all documents is at least nog guaranteed to kill the SW, afaik. Not sure why there would be a difference between stable and canary though.

[11:48:31.0000] <annevk>
Mac-style scrollbars still have this issue?

[11:58:00.0000] <TabAtkins>
annevk: Those are "overlay" scrollbars, and no, they're perfect. But (1) it's an *option* in Mac, and Apple is pretty fervent in maintaining it as such, and strongly opposed to a value that just unilaterally turns on overlay scrollbars.

[11:58:34.0000] <TabAtkins>
And (2) at least on Chrome, internal sentiment is still cool on switching to overlays on non-Mac platforms (especially Windows), as it's a foreign UI affordance.

[11:59:08.0000] <TabAtkins>
So we're trying to get the benefit we want (stable layout size regardless of whether the scrollbar shows up) without necessarily requiring overlay scrollbars.

[12:00:05.0000] <annevk>
I see

[12:00:41.0000] <annevk>
Thanks for the update

[12:00:56.0000] <TabAtkins>
And I'm gonna start some internal conversation about switching our "overflow:auto" behavior to just being the "value1" behavior, as we really hate the complexity of the "jiggle" on our internal code, and it would let us drop a big chunk of complexity from Houdini Layout.

[12:01:35.0000] <TabAtkins>
(Author-facing complexity, as right now they have to always be checking to see if they've overflowed the bounds and need to ask their parent to restart layout for them with scrollbars inserted.)

[15:20:51.0000] <botie>
rniwa, at 2016-08-10 18:20 UTC, Domenic said: if he has any opinions on https://github.com/w3c/webcomponents/issues/537 ?

[15:21:27.0000] <rniwa>
botie: my opinion is that the change is not web compatible

[15:21:28.0000] <botie>
OK, rniwa.

[15:21:39.0000] <rniwa>
botie: so unless someone ships with that change, i don't think we should change the spec

[15:21:40.0000] <botie>
rniwa: huh?

[15:22:11.0000] <rniwa>
botie: oh, sorry, I mistook with another one related to doument.write

[15:22:12.0000] <botie>
rniwa: excuse me?

[15:22:16.0000] <rniwa>
botie: I think throwing is okay

[15:22:16.0000] <botie>
OK, rniwa.

[16:01:38.0000] <Domenic>
Anyone know how to disable Chrome devtools SSL checks while running service worker web platform tests?

[16:43:48.0000] <MikeSmith>
Domenic: --disable-web-security doesn’t do it?

[16:44:11.0000] <Domenic>
MikeSmith: yeah I found the magic incantation in https://bugs.chromium.org/p/chromium/issues/detail?id=561820#c29

[16:44:20.0000] <MikeSmith>
/me looks

[16:44:49.0000] <MikeSmith>
heh

[16:45:04.0000] <MikeSmith>
gotta love that name

[16:45:06.0000] <MikeSmith>
--unsafely-treat-insecure-origin-as-secure

[16:45:28.0000] <Domenic>
I kind of thought this was supposed to work out of the box

[16:45:44.0000] <MikeSmith>
how so?

[16:45:55.0000] <Domenic>
I thought localhost was treated as secure out of the box in Chrome

[16:46:03.0000] <Domenic>
Maybe only for http://localhost:80 instead of https://localhost:80443

[16:46:03.0000] <MikeSmith>
ah

[16:46:12.0000] <MikeSmith>
hmm yeah maybe so

[16:46:13.0000] <Domenic>
*8443

[16:46:32.0000] <MikeSmith>
maybe only only for default ports

[16:47:33.0000] <MikeSmith>
--ignore-certificate-errors should have a better name. The similar flag that hsivonen coined for the HTML checker is called --promiscuous-ssl

[16:48:30.0000] <MikeSmith>
Domenic: nice to see the SW tests rolling into wpt

[16:50:12.0000] <Domenic>
They told me the only way I could continue my anti-entry/incumbent crusade was to write WPTs :P. So I did!!


2016-08-11
[17:44:47.0000] <MikeSmith>
hah :)

[18:36:05.0000] <MikeSmith>
caitp: jochen__ hayato any insight on https://bugs.chromium.org/p/chromium/issues/detail?id=636112

[18:36:32.0000] <MikeSmith>
test failures in blink of the form, class string of PaymentRequest.prototype expected "[object PaymentRequestPrototype]" but got "[object PaymentRequest]"

[18:36:46.0000] <MikeSmith>
for various types

[18:37:52.0000] <MikeSmith>
or see https://bugs.chromium.org/p/chromium/issues/detail?id=635694 because I think my issue there is probably just a duplicate of the (general) problem described tehre

[18:43:13.0000] <MikeSmith>
/me bugs yukishiino over on #chromium

[19:21:50.0000] <Domenic>
MikeSmith: this is an intentional change

[19:21:57.0000] <Domenic>
MikeSmith: there is a Web IDL spec bug open on it

[19:23:19.0000] <rniwa>
Domenic: hi

[19:23:35.0000] <rniwa>
Domenic: so it looks like Chrome doesn't throw when calling customElements.define('a-b', HTMLElement)

[19:23:39.0000] <rniwa>
Domenic: but the indent is to throw in that case, right?

[19:24:07.0000] <rniwa>
(per step 2 of https://html.spec.whatwg.org/#dom-customelementsregistry-define)

[19:24:18.0000] <Domenic>
rniwa: yeah definitely. I thought that was being worked on very recently, maybe it hasn't landed...

[19:24:52.0000] <rniwa>
Domenic: okay, it fails as of 54.0.2825.0

[19:25:12.0000] <Domenic>
rniwa: I'll file the bug if there's not one open already. Thanks.

[19:25:16.0000] <rniwa>
Domenic: it would be really useful for all of us to get gather and make sure our implementation of shadow DOM & custom elements are consistent

[19:25:35.0000] <rniwa>
Domenic: there have been enough moving parts in the spec that I'm afraid one of us is going to miss something

[19:25:44.0000] <Domenic>
rniwa: yeah I know dominiccooney is intending to upstream the tests to WPT format; he's been writing a lot in testharness.js style

[19:25:50.0000] <rniwa>
Domenic: cool

[19:26:05.0000] <rniwa>
Domenic: we also have a dozen or so tests that I'm intending to upstream

[19:28:58.0000] <rniwa>
Domenic: so this step 2 is somewhat problematic & ambiguous

[19:29:01.0000] <Domenic>
:(

[19:29:16.0000] <rniwa>
Domenic: how are we supposed to be checking the inheritance?

[19:29:36.0000] <Domenic>
rniwa: via the inherited interfaces concept defined in Web IDL?

[19:29:39.0000] <rniwa>
Domenic: because it's totally possible for author to override prototype/__proto__ of HTMLInputElement

[19:29:46.0000] <rniwa>
Domenic: and make it a getter, right?

[19:29:53.0000] <Domenic>
Right it's a static relationship

[19:30:02.0000] <rniwa>
Domenic: ah, okay

[19:30:02.0000] <Domenic>
Not instanceof

[19:47:11.0000] <rniwa>
Domenic: so that poses a different challenge that I don't think we have any mechanism to check something like that in our engine

[19:47:29.0000] <rniwa>
Domenic: right now, this isn't an issue because none of subclasses of HTMLElement is constructible but

[19:48:21.0000] <Domenic>
rniwa: right, when I was adding that I tried to ask if it was something implementable. I'm open to other strategies as long as we maintain the invariant that you can't have a HTMLButtonElement with a local name that is not button.

[19:50:01.0000] <rniwa>
Domenic: It seems a bit strange to specifically throw an exception on HTMLElement and its subclasses

[19:50:13.0000] <rniwa>
Domenic: when we don't throw on SVGElement, Text, Range, etc...

[19:51:08.0000] <Domenic>
rniwa: trying to page this back in... I believe the problem is that the others will fail later, whereas HTMLElement and its subclasses will not.

[19:51:42.0000] <Domenic>
rniwa: right, the others will fail at https://dom.spec.whatwg.org/#concept-create-element step 6.1.3

[19:51:42.0000] <rniwa>
Domenic: it can certainly fail if we checked new.target

[19:52:09.0000] <Domenic>
Hmm

[19:53:16.0000] <rniwa>
Domenic: it's fairly easy for us to check that something inherits from HTMLElement and then it's not one of DOM classes

[19:53:29.0000] <rniwa>
Domenic: so we can just do that to throw an exception in that case

[19:53:48.0000] <rniwa>
Domenic: since new.target can't be getter, etc... this is basically unobservable from scripts

[19:53:50.0000] <Domenic>
rniwa: can you open an issue if you think we should change this? I want to be sure I have time to go through all the implications and I'm heading to bed soon. I imagine changing it will be possible but I remember investigating this a few weeks ago and thinking that the current spec was the alternative I liked the most, but not strongly.

[19:54:03.0000] <rniwa>
Domenic: sure

[19:54:19.0000] <rniwa>
Domenic: I'm gonna do that on webcomponents issue tracker for now

[19:54:29.0000] <Domenic>
sounds good

[20:08:44.0000] <MikeSmith>
mkwst: I think https://mikewest.github.io/origin-policy/ is pretty clearly already sufficiently viable enough to merit being moved into https://github.com/wicg if you wanted to

[20:09:24.0000] <MikeSmith>
mkwst: though I don’t really know what the WICG criteria are for accepting new repos

[20:09:58.0000] <MikeSmith>
mkwst: nor am I saying it would be necessarily a win to move it

[21:43:45.0000] <annevk>
mkwst is relaxing, try again next week

[22:05:53.0000] <MikeSmith>
annevk: ah OK

[22:06:49.0000] <MikeSmith>
tobie: for WebIDL please consider prioritizing https://www.w3.org/Bugs/Public/show_bug.cgi?id=28244 for resolution

[00:09:24.0000] <annevk>
Opera hasn't hired a new foolip thus far, email address bounces

[00:09:40.0000] <annevk>
/me did a reply-all to an old Blink thread

[00:23:02.0000] <annevk>
Sebmaster: did you see https://twitter.com/jasnell/status/763479355196596224 btw?

[00:24:20.0000] <annevk>
I wonder if Sam Ruby has been involved with that since they're both at IBM or if that organization is so large it just sorta happened

[00:44:21.0000] <Ms2ger>
annevk, https://bugzilla.mozilla.org/show_bug.cgi?id=1294100

[00:47:34.0000] <annevk>
Ms2ger: sigh

[00:47:53.0000] <annevk>
Ms2ger: I guess we can overload if it gets bad

[00:48:18.0000] <annevk>
Ms2ger: not the end of the world and certainly not the ugliest API, but why do we always try?

[00:49:38.0000] <annevk>
Ms2ger: left a comment

[00:50:03.0000] <Ms2ger>
Thanks

[01:05:26.0000] <Ms2ger>
One more stupid extension gone: https://hg.mozilla.org/mozilla-central/rev/0ca0282fe48b

[01:05:58.0000] <annevk>
Whoa, Thomas is all over the map

[01:25:54.0000] <foolip>
annevk: :) If you have philipj⊙oc in bugs or email threads, please do replace with something not so bouncy

[01:27:59.0000] <tobie>
MikeSmith: mmm.

[01:36:21.0000] <tobie>
MikeSmith: I'm new to this. What's the strategy here? Toss a coin and beat whomever doesn't accept that resolution until they do?

[02:02:52.0000] <MikeSmith>
tobie: dunno, really. Maybe Domenic has some good suggestion

[02:03:43.0000] <MikeSmith>
tobie: if you actually change the spec maybe bz would reconsider

[02:04:16.0000] <MikeSmith>
would be good to get more details from him or others at mozilla about the compat problems he alludes to

[02:06:14.0000] <MikeSmith>
foolip might also have some insight on https://www.w3.org/Bugs/Public/show_bug.cgi?id=28244

[02:17:00.0000] <foolip>
MikeSmith: ugh, not sure what to make of that

[02:20:06.0000] <annevk>
JakeA: https://twitter.com/jaffathecake/status/763662818277265408 is a great sketch

[02:20:18.0000] <annevk>
JakeA: not a fair comparison though 😊

[02:20:43.0000] <JakeA>
It pops into my head loads

[02:22:40.0000] <JakeA>
Just read an article where the UK divers offered their "reckons" about the green water in Rio. "we think maybe a load of ink has run into the pool"

[02:24:40.0000] <MikeSmith>
foolip: yeah me neither I just want to know what expectations to write into the IDL test harness

[02:28:55.0000] <foolip>
MikeSmith: asked for clarification

[02:33:19.0000] <MikeSmith>
thanks will try to find a test for an interface that all browsers actually implement

[02:37:30.0000] <tobie>
Yeah. The only reasonable thing to spec is that this behavior is implementation specific. :p

[02:38:05.0000] <tobie>
MikeSmith: you're working on idlharness? That's awesome!

[02:39:07.0000] <MikeSmith>
foolip: for now you can look at the results of http://w3c-test.org/webstorage/idlharness.html though that obscures what exactly is being called

[02:39:25.0000] <zcorpan>
hmmmm. old apple docs still has <menuitem><menu>. chromium with experimental web platform features enabled now parses like firefox. i suppose i should give up and spec reality :-|

[02:39:31.0000] <MikeSmith>
tobie: I will try to pull out what actual call will cause it

[02:39:49.0000] <MikeSmith>
s/tobie/foolip/

[02:40:38.0000] <MikeSmith>
tobie: not working on it actively but instead just planning to update it to align with any spec changes or any places where it might not conform to the current spec

[02:42:28.0000] <foolip>
wait, do we have any reason do thing that the current non-interoperable state is required for compat? I thought it was just a case of nobody quite being motivated to care in any engine.

[02:47:08.0000] <annevk>
Hmm, Polymer apparently though it was fine to encourage everyone to use document.createElement(string, string)

[02:47:31.0000] <annevk>
Per the bug Ms2ger referenced earlier, so I guess we'll have to support that

[02:54:51.0000] <smaug____>
uh, this toString() handling

[02:55:14.0000] <smaug____>
I wish I understood why blink wants the behavior they have

[02:55:57.0000] <annevk>
smaug____: v0 of custom elements didn't use a dictionary

[02:56:32.0000] <annevk>
smaug____: and v0 appears to be leaking

[02:56:54.0000] <annevk>
smaug____: despite the promise from Google that changes would be possible due to usage of libraries and such

[02:56:57.0000] <MikeSmith>
foolip: actually as far as the test I guess I am just overcomplicating this

[02:57:11.0000] <MikeSmith>
foolip: you just do, e.g., (new Object()).toString.call(StorageEvent.prototype)

[02:57:49.0000] <MikeSmith>
and from Gecko you will see "[object StorageEventPrototype]" but from Blink you will see "[object StorageEvent]"

[02:58:13.0000] <foolip>
annevk: isn't that typeExtension extra argument in some spec?

[02:58:21.0000] <smaug____>
annevk: that is unrelated to my toString() complains

[02:58:50.0000] <annevk>
smaug____: oh sorry

[02:58:58.0000] <annevk>
smaug____: you're talking about the IDL thing

[02:59:03.0000] <smaug____>
annevk: but yes, we had to fix something in Gecko recently because someone was passing 2nd param to createElement

[02:59:04.0000] <smaug____>
annevk: yes

[02:59:10.0000] <smaug____>
was just reading bugmail

[02:59:19.0000] <smaug____>
and testing blink

[02:59:22.0000] <smaug____>
it makes really no sense

[02:59:24.0000] <annevk>
foolip: it's a dictionary these days

[02:59:43.0000] <smaug____>
I don't care too much, but the behavior what blink has now makes no sense

[02:59:52.0000] <foolip>
annevk: oh. I wonder if anyone considered whether changing that in Blink is actually web compatible

[02:59:58.0000] <annevk>
smaug____: for toStringTag you mean?

[02:59:59.0000] <smaug____>
and I don't understand the reasoning

[03:00:09.0000] <smaug____>
well, toString()

[03:00:48.0000] <annevk>
smaug____: I think the reason is that TC39 introduced @@toStringTag or whatever it's called, exposing toString() in some way

[03:01:18.0000] <annevk>
smaug____: so then the question was how that should work for IDL

[03:01:28.0000] <annevk>
Anyway, I don't really care strongly about it either way

[03:02:52.0000] <smaug____>
annevk: and that other thing... where is Polymer encouraging everyone to use createElement(string, string) ?

[03:04:22.0000] <smaug____>
hmm, I don't even know what happens when string is passed as a param which expects dictionary

[03:04:38.0000] <smaug____>
exception

[03:06:09.0000] <annevk>
smaug____: see the link to the polymer documentation

[03:06:17.0000] <annevk>
smaug____: if you scroll down a bit it's there

[03:06:34.0000] <smaug____>
ah, I need to look at the log

[03:11:21.0000] <smaug____>
annevk: ok, so spec should possibly allow string as param, and do nothing with it?

[03:46:09.0000] <Ms2ger>
Yeah

[05:08:35.0000] <Domenic>
foolip: MikeSmith: Blink cares and would prefer to follow the JavaScript pattern of [object Foo] instead of divergent [object Foo] + [object FooPrototype]

[05:09:11.0000] <Ms2ger>
Blink wanna ship it?

[05:09:17.0000] <Domenic>
We already have for like 5 releases

[05:10:33.0000] <Ms2ger>
Even better

[06:11:58.0000] <Sebmaster>
annevk: yes, saw it live even. Apparently they're not sure how to handle spec updates wrt semver yet, so this is going to be very interesting

[06:18:18.0000] <Domenic>
oh fascinating

[06:18:57.0000] <Sebmaster>
Personally I hope they follow properly, I wouldn't want to keep the slower lib maintained if it's not necessary

[06:19:38.0000] <Sebmaster>
But then browsers don't follow it quite either, so it'd be necessary for shims anyways :(

[06:20:06.0000] <annevk>
Yeah, Gecko is slowly getting there

[06:20:18.0000] <annevk>
It's hard to get anyone from Blink engaged

[06:20:29.0000] <annevk>
WebKit might a few minor tweaks, but nothing major

[06:20:40.0000] <annevk>
And I suspect Edge will be the last

[06:21:11.0000] <annevk>
E.g., someone has been implementing IPv4 parsing and canonicalizing in Gecko, which is nice

[06:21:20.0000] <foolip>
annevk: is this about the @@toStringTag thing, or is there another thing where you can't get any Blink reaction

[06:21:44.0000] <annevk>
foolip: this was about URL parsing

[06:22:02.0000] <annevk>
foolip: there's also something about the Origin header I've been waiting 9 months on or so now

[06:22:38.0000] <annevk>
foolip: it's not a continuous effort on my part though and the Blink side may have forgotten about it

[06:22:39.0000] <foolip>
Oh. I guess URL is hard because you need to figure out how to actually transition.

[06:23:15.0000] <foolip>
Also because the code itself doesn't live in Blink I suppose.

[07:10:26.0000] <zcorpan>
annevk: (and others going to tpac), interested in sharing airbnb?

[07:55:12.0000] <Domenic>
Do the fetch() web platform tests all live in service-workers/?

[07:55:22.0000] <Domenic>
nope, I'm just blind

[08:12:40.0000] <Domenic>
annevk: any ideas on how to test a Response's HTTPS state?

[08:16:19.0000] <annevk>
Domenic: hmm not really

[08:16:35.0000] <Domenic>
What is it used for anyway?

[08:16:58.0000] <Domenic>
I just know you and mkwst are very conscious to propagate it everywhere :)

[08:18:43.0000] <annevk>
Domenic: it's used to determine whether you get powerful API access

[08:18:55.0000] <annevk>
Domenic: secure contexts, basically

[08:18:58.0000] <Domenic>
Hmm

[08:19:41.0000] <Domenic>
Yeah not sure how that could be tested... I imagine it would only matter for Responses served from a service worker, which will always have a HTTPS settings object

[08:19:55.0000] <Domenic>
Oh maybe I could importScripts from an insecure origin

[08:19:56.0000] <annevk>
Yeah, think so

[08:20:04.0000] <Domenic>
No wait that doesn't work, still the same global

[08:21:24.0000] <Domenic>
annevk: https://github.com/w3c/web-platform-tests/pull/3452 FYI

[08:58:33.0000] <bradleymeck>
if I am reading https://url.spec.whatwg.org/ right `new URL('file://../..') should not normalize away the 2 `..` segments? https://url.spec.whatwg.org/#path-state 2. (noop due to https://url.spec.whatwg.org/#pop-a-urls-path file exception)

[08:58:38.0000] <bradleymeck>
is that correct?

[09:00:34.0000] <Domenic>
seems right, let's test the reference implementation...

[09:01:11.0000] <Domenic>
https://www.irccloud.com/pastebin/wgD0KlaR/

[09:01:15.0000] <Domenic>
That's not promising...

[09:01:55.0000] <Domenic>
(whatwg-url might have a bug, or the spec might be crazy, but that doesn't seem good in any case)

[09:03:31.0000] <Domenic>
bradleymeck: are you sure the predicate at the top of path state step 1 is true?

[09:04:08.0000] <Domenic>
I'd debug through the whatwg-url implementation to see what's going on

[09:04:58.0000] <bradleymeck>
i think `c is EOF code point or "/"` should be true since it consumes a `/`

[09:05:36.0000] <Domenic>
Hmm

[09:05:46.0000] <Domenic>
I thought c would be . here

[09:06:37.0000] <Domenic>
But yeah I can't really trust myself to get this right at a glance, and don't have time to dig into it in detail, so I dunno. It does seem possible the result is wrong. But as for what's going on I'd debug through whatwg-url to confirm.

[09:07:22.0000] <bradleymeck>
i can take a look because trying to figure out what import of a url would look like for node, thanks

[09:09:06.0000] <Domenic>
Hmm I thought you'd do `new URL(importSpecifier, "file://" + __filename)` for that

[09:16:14.0000] <bradleymeck>
node modules are not directly mapped to files though

[09:16:44.0000] <bradleymeck>
importSpecifier for "module" and "@scope/module" don't work I think

[09:17:45.0000] <Domenic>
Yeah true

[09:18:01.0000] <Domenic>
Anything that doesn't start with ./, ../, or / would be handled specially I think

[09:20:53.0000] <bradleymeck>
trying to figure out the exact mechanics of that but yea

[09:22:18.0000] <bradleymeck>
the idea in #node-dev was to resolve using a `new URL(new URL(importSpecifier, "node://"), "file://" + __filename)` basically

[09:22:53.0000] <bradleymeck>
but saw that importSpecifier was auto-normalizing without any way to turn it off

[09:31:28.0000] <annevk>
I did not know about https://news.ycombinator.com/item?id=11175258

[09:31:41.0000] <annevk>
Seems very exciting if it works out

[09:32:14.0000] <annevk>
Hundreds of FPS is what VR needs

[09:35:40.0000] <annevk>
bradleymeck: I think in HTML the model is that you first do syntax checks on the identifier

[09:35:54.0000] <annevk>
bradleymeck: afterwards you hand it to the parser

[09:36:28.0000] <bradleymeck>
they do prefix checking, which we will need to do

[09:36:36.0000] <bradleymeck>
but after that we are in new territory

[09:37:46.0000] <bradleymeck>
prefix of ./ ../ or / will definitely need to resolve against current script, modules need to use node_modules (suggested node:// scheme)

[09:38:28.0000] <bradleymeck>
but noticed that any non-file url in spec should auto-normalize which is a pretty no-go, so reading spec and saw this maybe bug?

[09:56:53.0000] <Domenic>
annevk: any reason sendBeacon spec does not use Fetch's keep-alive flag?

[10:00:34.0000] <annevk>
Domenic: prolly bug

[10:01:10.0000] <annevk>
bradleymeck: I don't really follow

[10:03:18.0000] <bradleymeck>
Domenic: https://github.com/jsdom/whatwg-url/pull/58 looked like a bug in whatwg-url, but unsure about that test that it makes fail, just gonna hand off here

[10:04:57.0000] <Domenic>
bradleymeck: wow nice find... the definition of "pop" is different than normal, that's awesome :-/

[10:07:03.0000] <annevk>
Domenic: ah, I guess I can replace pop with shorten

[10:07:19.0000] <annevk>
Domenic: it used to match, but then I had to add a special case, but I kept the term

[10:07:45.0000] <Domenic>
that would be nice

[10:08:08.0000] <annevk>
https://github.com/whatwg/url/issues/140

[10:09:34.0000] <annevk>
Domenic: https://aturon.github.io/blog/2016/08/11/futures/ might be of interest

[10:10:10.0000] <annevk>
Domenic: with streams they don't talk about backpressure at all, I wonder if that's a problem

[10:15:49.0000] <annevk>
Pffff https://github.com/Polymer/docs/issues/1705

[16:16:37.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/38907385/should-non-2xx-status-code-responses-include-cors-specific-headers


2016-08-12
[17:17:04.0000] <zewt>
are there any html parsers for python that are actually reliable? been using html5lib but apparently it throws exceptions on some escapes, and the bug has been open for over three years, which tells me i should be looking for a new library...

[17:45:26.0000] <MikeSmith>
zewt: you have a link to that open html5lib issue?

[17:46:01.0000] <MikeSmith>
anyway, why not just use the default lxml html parser?

[17:47:05.0000] <MikeSmith>
it seems to work pretty well, even though it’s not completely conformant to the HTML parsing algorithm (and doesn’t claim to be)

[17:47:36.0000] <MikeSmith>
WebIDL question: does required DOMString foo mean an instance of foo can be the empty string?

[17:50:52.0000] <gsnedders>
zewt: the bug with the lxml treebuilder and non-XML-respresentable trees? I wish it were easier to fix. :(

[17:51:07.0000] <gsnedders>
(the narrow/wide split of Python 2 makes it absolutely horrible to fix…)

[17:51:50.0000] <gsnedders>
(I guess we could just do some really ugly hack for element names on narrow builds, but that doesn't entirely fix the issue)

[17:55:37.0000] <MikeSmith>
is there actually some way in WebIDL to explicitely specify that something must be non-empty?

[17:56:09.0000] <zewt>
https://github.com/html5lib/html5lib-python/issues/96

[17:57:33.0000] <gsnedders>
zewt: yeah, that's the one

[18:00:10.0000] <jyasskin>
MikeSmith: "required" just means it must be present (in JS, "not undefined"). "" is a valid DOMString, so it's allowed in required dictionary elements.

[18:00:56.0000] <MikeSmith>
jyasskin: OK that’s what I thought, thanks

[18:01:12.0000] <jyasskin>
MikeSmith: WebIDL doesn't have a way to express constraints on the valid values in a field. In Bluetooth, I did it with https://webbluetoothcg.github.io/web-bluetooth/#uuids, but I also said what exception to throw in prose everywhere that uses a UUID.

[18:01:41.0000] <jyasskin>
The best fields are "required Type?": you can have null, but undefined is right out! ;-)

[18:02:14.0000] <MikeSmith>
oh

[18:02:43.0000] <MikeSmith>
then I guess that is what we may need to do more of in the Payment Request API spec where needed

[18:03:23.0000] <jyasskin>
But I picked SyntaxError in WebBT, which I think is wrong, so don't copy that part. ;)

[18:03:51.0000] <MikeSmith>
I am looking at https://bugs.chromium.org/p/chromium/issues/detail?id=636723 where Rouslan has “Accept any non-empty string” as the isssue title, but the Payment Request spec says nothing explicitly about it needing to be non-empty

[18:04:00.0000] <MikeSmith>
https://w3c.github.io/browser-payment-api/#paymentcurrencyamount

[18:06:40.0000] <jyasskin>
MikeSmith: I also note "MUST"s being applied to dictionary fields that are passed from user code to interface operations. You can't "MUST" a website; you have to instead say what happens when they do something you disapprove of.

[18:07:14.0000] <jyasskin>
It's possible the spec already does that; the MUSTs just triggered my reflexes.

[18:13:08.0000] <MikeSmith>
jyasskin: yeah me too. Those MUSTs should not be there, and I am actually right now at this moment writing a PR to change them to just (non-normative) “The following fields are required”

[18:13:17.0000] <jyasskin>
Woot

[18:14:53.0000] <MikeSmith>
but there are still some other places in the spec where it does not actually normatively specify what a UA should do with “invalid” instances of something

[18:14:58.0000] <MikeSmith>
see https://github.com/w3c/browser-payment-api/issues/235

[18:15:14.0000] <MikeSmith>
https://w3c.github.io/browser-payment-api/#dfn-value

[18:15:37.0000] <jyasskin>
Indeed. My apologies for assuming you were responsible for the current spec text. :)

[18:15:57.0000] <MikeSmith>
heh

[18:16:11.0000] <MikeSmith>
you can blame Zach Koch :)

[18:16:20.0000] <MikeSmith>
anyway it is a very good spec overall

[18:16:52.0000] <MikeSmith>
I just ran into these misses when reviewing test cases

[18:42:35.0000] <zewt>
don't care about how control characters are parsed (it's junk anyway), just want it to not suddenly throw errors while parsing

[19:26:30.0000] <astearns>
there's a few "authors must" in the CSS specs. I suppose they should change to "authors ought to"

[19:26:49.0000] <zewt>
"wouldn't it be nice if authors would"

[19:27:10.0000] <astearns>
"I'd like imagine that authors would"

[19:28:02.0000] <variable>
astearns: "if people read the spec and cared about what it said, they would"

[19:28:49.0000] <zewt>
why don't we just stop fantasizing and go with "authors don't"

[19:35:35.0000] <MikeSmith>
astearns: there are some “authors must” and even “documents must” requirements in the HTML, but those are not ambiguous because the HTML spec defines an explicit “conforming documents” conformance class

[19:35:51.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/infrastructure.html#conforming-documents

[19:36:42.0000] <MikeSmith>
though we still have cases of implementors reading the spec and thinking those are meant to somehow be requirements for UAs

[19:37:23.0000] <MikeSmith>
I think there is a good argument to be made for not trying to specify both kinds of requirements in the same spec

[19:38:05.0000] <MikeSmith>
in other words, not trying to have a spec that attempts to be both for UA implementors and authors

[19:38:24.0000] <MikeSmith>
because in the end it just ends up being confusing for both implementors and authors

[19:39:48.0000] <MikeSmith>
and really in the case of the HTML spec, it’s a spec friendly for implementors in its style and content and not really friendly to authors

[19:40:04.0000] <MikeSmith>
I think most authors have no business trying to read the HTML spec

[19:40:32.0000] <MikeSmith>
or maybe we have no business continuing to imply that authors should

[19:42:00.0000] <MikeSmith>
I think there is a good argument to be made for a normative spec for document-conformance requirements that is written from the ground up with authors in mind

[19:42:09.0000] <MikeSmith>
a separate spec

[19:42:35.0000] <MikeSmith>
rather than what we have for authors now, which is stuff basically bolted onto the implementor spec

[19:43:31.0000] <variable>
MikeSmith: for the most part authors want tutorial like information, not spec like information, AFAICT

[19:43:33.0000] <MikeSmith>
and that bolted-on stuff is distracting and sometimes confusing to authors

[19:44:02.0000] <MikeSmith>
variable: right but we still need to have the normative requirements for authors defined somewhere

[19:45:10.0000] <caitp>
what if spec text could be both normative and accurate, and also accessible

[19:45:12.0000] <MikeSmith>
I really prefer the way that annevk writes specs, which are spare and clearly written for implementors only, in a way that they can implement from without distraction

[19:45:27.0000] <MikeSmith>
caitp: would that it could

[19:45:33.0000] <MikeSmith>
I think it cannot

[19:46:17.0000] <MikeSmith>
that is why I like annevk’s approach more

[19:46:40.0000] <howdoi>
would you have a div in a section or a section in a div or just use sections?

[19:46:58.0000] <variable>
howdoi: depends on what semantics you want

[19:47:03.0000] <howdoi>
From the spec, Note: The section element is not a generic container element. When an element is needed for styling purposes or as a convenience for scripting, authors are encouraged to use the div element instead. A general rule is that the section element is appropriate only if the element's contents would be listed explicitly in the document's outline.

[19:47:07.0000] <MikeSmith>
to me annevk’s style does not attempt to be particularly accessible to non-implementors, and that is a feature

[19:47:32.0000] <variable>
howdoi: you should use <section> if you care about it from an outlining PoV

[19:47:41.0000] <variable>
tbh outlining is not commonly used

[19:47:47.0000] <MikeSmith>
others who understand the specs can write guides at MDN and places that accessible to authors, and optimized for authors

[19:47:58.0000] <variable>
MikeSmith: I think that is a reasonable approach

[19:48:15.0000] <howdoi>
variable: outlining is a pretty confusing term.

[19:48:25.0000] <MikeSmith>
howdoi: personally I think I would just not use section at all

[19:48:38.0000] <variable>
howdoi: the short version is: if you think it should live in a "table of contents"

[19:48:58.0000] <variable>
but MikeSmith's suggestion is reasonable

[19:48:58.0000] <MikeSmith>
at this point IMHO there are no real benefits in practice to using section, nor article

[19:49:12.0000] <variable>
since outlining is basically dead :(

[19:49:17.0000] <MikeSmith>
yeah

[19:49:50.0000] <howdoi>
just the readability?

[19:50:28.0000] <howdoi>
The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content, typically with a heading. 🤔 😁

[19:50:58.0000] <MikeSmith>
I implemented the outline algorithm in the HTML checker (validator) but I personally think authors are better of ignoring the outline algorithm and just using h1-h6 without section or even without div unless the div is needed for some other reason

[19:51:08.0000] <variable>
howdoi: this is the conversation that MikeSmith and I are basically having: the spec isn't great for people like you, authors

[19:51:41.0000] <howdoi>
variable: collusion of thoughts, it's a small world!

[19:51:55.0000] <variable>
MikeSmith: I wish that assistive devices were capable of using the outlining stuff, and that authors (or more accurately, framework authors) would care about this stuff

[19:52:03.0000] <howdoi>
we must start a session on how to read the spec

[19:52:14.0000] <variable>
but if the semantic web has taught us anything, its that people will not manually do stuff, ever

[19:52:22.0000] <howdoi>
later, how to submit a spec and convince the board :D

[19:52:49.0000] <howdoi>
strongly agree there.

[19:53:38.0000] <howdoi>
/me basically no one give a $hit about semantics, until it's affecting their page rank or something similar :(

[19:53:55.0000] <MikeSmith>
variable: yeah for AT software to use the outline stuff, browsers would first need to implement the requirements in the spec about actually exposing the outline in the right way to a11y APIs. Which browsers don’t, so there’s not much that AT software can do in the mean time

[19:55:05.0000] <MikeSmith>
but that said the JAWS vendor at least never implements anything unless they absolutely have to

[19:55:18.0000] <MikeSmith>
case in point is language detection

[19:55:40.0000] <MikeSmith>
language detection is something cheap and easy to implement

[19:56:02.0000] <howdoi>
maybe off-topic: If you were to do a simple PWA introduction to a crowd, say a workshop, what app would you do?

[19:56:05.0000] <MikeSmith>
and it would be of real benefit for JAWS users to have built-in language-detection support

[19:56:22.0000] <MikeSmith>
but as far as I know, JAWS has no such support

[19:57:14.0000] <MikeSmith>
howdoi: Ilya Grigorik’s O’Reilly book

[19:57:54.0000] <howdoi>
MikeSmith: https://hpbn.co/?

[19:58:23.0000] <MikeSmith>
yeah

[19:58:28.0000] <MikeSmith>
works offline

[19:58:31.0000] <howdoi>
that's already a PWA

[19:58:35.0000] <MikeSmith>
automatically

[19:58:39.0000] <howdoi>
you mean to say, build something like that?

[19:58:44.0000] <MikeSmith>
oh I guess I misunderstood your quesiton

[19:59:03.0000] <howdoi>
Say, you were asked to do a workshop on PWA, what would you build there?

[19:59:09.0000] <MikeSmith>
a book I guess

[19:59:19.0000] <howdoi>
please don't say a weather app :D

[19:59:19.0000] <MikeSmith>
it is the simplest case

[19:59:23.0000] <MikeSmith>
book with images

[19:59:30.0000] <howdoi>
okies, I was planning for flickr images

[19:59:33.0000] <howdoi>
or maybe XKCD

[19:59:37.0000] <howdoi>
and some videos

[19:59:48.0000] <MikeSmith>
yeah

[19:59:50.0000] <howdoi>
not sure if I need to cover push notifications and background sync.

[20:00:03.0000] <MikeSmith>
yeah that would make it a lot more complicated

[20:00:20.0000] <variable>
MikeSmith: reminds of the html fixer

[20:00:25.0000] <howdoi>
okies, will ditch them then, thanks for the feedback :)

[20:00:31.0000] <variable>
it takes arbitrary input and produces valid HTML as output

[20:00:43.0000] <variable>
"rm"

[20:01:57.0000] <MikeSmith>
variable: not http://www.htmlfixer.com/ I guess

[20:02:04.0000] <variable>
MikeSmith: no, its a unix tool

[20:02:06.0000] <variable>
"rm"

[20:03:23.0000] <MikeSmith>
ah I know rm of course but I guess I’m not getting the joke

[20:03:41.0000] <variable>
MikeSmith: the joke is that rm will correctly produce an empty document

[20:03:46.0000] <variable>
which is valid HTML

[20:03:49.0000] <MikeSmith>
ah OK

[20:04:23.0000] <MikeSmith>
seems like that would be more like touch(1)

[20:04:40.0000] <caitp>
usually that would result in a 404, which in your typical user agent would produce results inconsistent with the "document"

[22:21:57.0000] <rniwa>
annevk: hello

[22:41:10.0000] <annevk>
rniwa: heya, how are things?

[22:41:19.0000] <rniwa>
annevk: coming back to custom elements

[22:41:24.0000] <rniwa>
annevk: I have one question for you

[22:41:31.0000] <annevk>
rniwa: hope you left the office

[22:41:33.0000] <rniwa>
annevk: the namespace is supposed to be null

[22:41:41.0000] <rniwa>
annevk: by default, right?

[22:41:43.0000] <rniwa>
annevk: not empty string

[22:41:52.0000] <rniwa>
annevk: this is kind of relevant in terms of attributeChangedCallback

[22:41:58.0000] <annevk>
rniwa: for attributes?

[22:42:02.0000] <rniwa>
annevk: because it adds the namespace URI as the last argument

[22:42:03.0000] <rniwa>
annevk: yeah

[22:43:05.0000] <annevk>
rniwa: hmm I guess, mostly a legacy accident but all other APIs behave that way, right?

[22:43:14.0000] <rniwa>
annevk: https://gist.github.com/rniwa/a2b010863e8e6f111d540f29c7d45086

[22:43:34.0000] <rniwa>
annevk: because attributeChangedCallback puts the namespace URI into an argument

[22:43:49.0000] <rniwa>
annevk: it makes this somewhat internal implementation detail of the spec exposed

[22:43:59.0000] <rniwa>
annevk: all existing APIs such as getAttribute has "?" qualifier

[22:44:25.0000] <rniwa>
annevk: so that makes the null-ness of namespace URI kind of irrelevant but this API would expose it.

[22:44:47.0000] <annevk>
rniwa: it should match mutation observers, can look up in 20 what that is

[22:46:59.0000] <rniwa>
annevk: that's a good point

[22:47:04.0000] <rniwa>
annevk: we DO use null in that case

[22:53:17.0000] <annevk>
rniwa: so yeah, https://dom.spec.whatwg.org/#concept-element-attributes-change does exactly the same for mutation observers and custom elements

[22:53:25.0000] <rniwa>
annevk: yeah

[22:53:26.0000] <rniwa>
annevk: cool

[22:53:34.0000] <rniwa>
annevk: it looks like this is just a bug in Chrome's implementation

[22:53:37.0000] <annevk>
rniwa: and https://dom.spec.whatwg.org/#dom-attr-namespaceuri returns that field literally too so I think we're good

[22:53:46.0000] <rniwa>
annevk: ah, okay

[22:53:51.0000] <annevk>
Oh Chrome does empty string? Geez...

[22:53:57.0000] <rniwa>
annevk: yeah

[22:54:23.0000] <rniwa>
annevk: well, null / empty string different is somewhat subtle due to historical nullability/undefined implicit coercion :(

[22:54:37.0000] <rniwa>
annevk: cdumez has been doing an amazing job updating our impl

[22:54:42.0000] <annevk>
Yeah, this should never have allowed null

[22:54:49.0000] <rniwa>
annevk: but there is a lot of crazy edge cases in WebIDL around that area

[22:55:00.0000] <annevk>
cdumez is great

[22:57:41.0000] <rniwa>
yeah

[23:03:52.0000] <rniwa>
sigh... our impl. of sequence conversion is completely busted :(

[23:04:51.0000] <annevk>
the finer details of sequences are hard due to all the subtle hooks in ECMAScript

[23:05:07.0000] <annevk>
bz explained it to me once and I promptly forgot 😟

[23:06:45.0000] <rniwa>
annevk: it's not as bad as all the things Proxy can do

[23:07:03.0000] <rniwa>
annevk: e.g. you can trap `Get(constructor, "prototype")` with Proxy

[23:07:14.0000] <annevk>
I'm still a bit mystified as to why we have those

[23:07:24.0000] <rniwa>
annevk: and create an infinitely recursive prototype chain :(

[23:07:44.0000] <rniwa>
annevk: the part that sucks most about Proxy is that you can't do it per property

[23:07:52.0000] <rniwa>
annevk: so all bets are off for optimizations :(

[23:08:10.0000] <annevk>
I really hope the only justification wasn't just to explain the hooks a browser is using to implement some HTML features

[23:09:54.0000] <rniwa>
annevk: which is still strictly less worse than https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable

[23:10:14.0000] <rniwa>
one of my colleagues spent one entire month optimizing this feature to not regress the perf in regular case :(

[23:10:50.0000] <rniwa>
I literally can't think of a situation in which one would want to use this feature instead of simply calling push...

[23:17:09.0000] <annevk>
That TC39 doesn't let itself influence by performance concerns is rather frustrating

[23:17:48.0000] <annevk>
But one thing Apple could help with is sending people to those meetings (I know they can be dull) and object to these kind of things

[23:18:13.0000] <rniwa>
annevk: oh i think we've been sending people to every TC39 meeting these days

[23:18:20.0000] <annevk>
Implementers seem somewhat underrepresented at times

[23:18:23.0000] <annevk>
Ah good

[23:18:33.0000] <annevk>
And yeah, this happend a while ago, as did freeze() et al

[23:21:28.0000] <rniwa>
annevk: yeah

[23:21:51.0000] <rniwa>
annevk: ES6 is quite a massive latency regression for us so we had to spend a lot of time optimizing various parts of the engine

[23:42:20.0000] <hsivonen>
I need a demo string that encodes without unmappables into a legacy multibyte encoding. Does anyone happen to know what's used in programming examples in Chinese, Japanese or Korean where "Hello, World!" is used in English?

[23:46:29.0000] <hsivonen>
Wikipedia suggests ハロー・ワールド in Japanese. Unclear if idiomatic.

[23:46:47.0000] <hsivonen>
I suppose that's good enough

[23:49:28.0000] <hsivonen>
oh. it looks like that's a phonetic rendering of English

[00:57:25.0000] <zewt>
hsivonen: phonetic renderings of English seems like exactly what the japanese would use

[01:38:11.0000] <hsivonen>
zewt: ok

[01:50:31.0000] <MikeSmith>
hsivonen: yeah for Japanese what zewt said I think though all examples in https://ja.wikipedia.org/wiki/Hello_worldプログラムの一覧 just use literal latin “Hello world”

[01:51:01.0000] <MikeSmith>
hmm except for https://ja.wikipedia.org/wiki/Hello_worldプログラムの一覧#KQ

[01:52:17.0000] <MikeSmith>
I wonder what KQ is

[01:52:39.0000] <MikeSmith>
oh man

[01:52:42.0000] <MikeSmith>
https://github.com/fumieval/LazyKQ

[01:52:48.0000] <MikeSmith>
that is pretty cool

[01:56:47.0000] <MikeSmith>
man the obnoxious of that is brilliant

[01:57:18.0000] <MikeSmith>
I will never again say that half-width katakana is useless

[01:59:24.0000] <MikeSmith>
botie, inform rniwa hey somebody finally found an appropriate use for half-width katakana https://github.com/fumieval/LazyKQ

[01:59:24.0000] <botie>
will do

[02:19:55.0000] <zewt>
as far as i can tell the main use of halfwidth katakana is to make my IME have an extra state to toggle through

[02:34:03.0000] <MikeSmith>
heh

[02:34:04.0000] <MikeSmith>
yup

[02:34:46.0000] <foolip>
annevk: how do I "sync html" in whatwg/xref?

[02:34:59.0000] <foolip>
the html.py script takes a while and does nothing

[02:35:09.0000] <annevk>
foolip: you need to manually add entries to html.json

[02:35:11.0000] <foolip>
how many specs are still using this? it's not great :)

[02:35:11.0000] <annevk>
foolip: it's sad

[02:35:31.0000] <annevk>
foolip: only anolis, they need to become bikeshed at some point

[02:35:34.0000] <foolip>
I assume you'd be happy to merge a bikeshed PR for fullscreen?

[02:35:55.0000] <annevk>
foolip: I'm mostly putting it off since it's a lot of work and the regressions from last couple of times haven't been great

[02:36:04.0000] <annevk>
foolip: yeah

[02:36:07.0000] <MikeSmith>
zewt: for the iPhone Apple dropped support for halfwidth katakana input in the IME a few years ago but then subsequently had to add it back

[02:36:13.0000] <foolip>
which others are still left on anolis?

[02:36:25.0000] <annevk>
foolip: Fetch, XHR I guess

[02:36:32.0000] <foolip>
mkay

[02:36:35.0000] <foolip>
oh well, not today

[02:36:46.0000] <foolip>
I can just push directly to xref I guess?

[02:37:01.0000] <annevk>
foolip: yeah

[02:38:07.0000] <foolip>
annevk: enjoy https://github.com/w3c/permissions/issues/121

[02:38:18.0000] <foolip>
bah, not that one

[02:38:44.0000] <foolip>
https://github.com/whatwg/fullscreen/pull/46

[02:39:05.0000] <annevk>
ta

[02:39:25.0000] <foolip>
I couldn't figure out the line wrapping rules so I went with inconsistent :)

[02:42:22.0000] <annevk>
Oh, I should have looked at that more carefully, oh well

[02:42:35.0000] <annevk>
We can fix that when we bikeshed it

[02:42:50.0000] <annevk>
Or rather, after

[02:43:03.0000] <annevk>
Best not to change line endings as part of the conversion as it'll make review too hard

[02:47:55.0000] <foolip>
I use git diff --word-diff -w a lot when reviewing spec changes because never changing line wrapping is hard

[02:58:07.0000] <MikeSmith>
oh wow

[02:58:28.0000] <MikeSmith>
I never heard of --word-diff

[02:58:32.0000] <MikeSmith>
this is great

[03:04:00.0000] <annevk>
https://github.com/w3c/webpayments-method-identifiers/issues/9 is all kinds of horrible

[03:04:28.0000] <annevk>
Payments WG is basically in back in the dark ages with nothing learned about anything

[03:07:24.0000] <annevk>
"I'll just fix @annevk"

[03:18:11.0000] <wilsonpage>
Domenic ping

[03:37:39.0000] <smaug____>
interesting. Chrome uses HTMLDocument for svg images

[03:38:32.0000] <smaug____>
but if one uses document.write for example, the document goes into some odd state without element

[03:38:33.0000] <smaug____>
s

[03:49:47.0000] <MikeSmith>
annevk: sorry to have roped you into that payments URL nonsense

[03:50:59.0000] <MikeSmith>
anyway I think the actual browser Payment Request API spec is a quite good spec

[03:51:43.0000] <MikeSmith>
it is the only thing that’s actually implemented at this point so the rest of that stuff is not really affecting anything anyway

[04:55:28.0000] <mathiasbynens>
annevk: can you make javascript.spec.whatwg.org 301 to https://github.com/tc39/ecma262/labels/web%20reality? I can set up a <meta>/JS-based redirect for now, but hey…

[05:20:51.0000] <annevk>
mathiasbynens: done

[05:35:10.0000] <mathiasbynens>
annevk: thanks! and woohoo

[05:40:35.0000] <MikeSmith>
http://stackoverflow.com/questions/38917631/why-is-it-impossible-to-gather-parent-window-location-from-iframe-when-different

[05:44:53.0000] <MikeSmith>
if the WebIDL for some field in a dictionary defines it as DOMString and my script sets it to null or undefined, then per WebIDL, the UA should throw?

[05:45:51.0000] <MikeSmith>
lacking the [TreatNullAsEmpty] annotation (or whatever teh exact name is)

[05:48:15.0000] <annevk>
youennf made really great Fetch tests

[05:48:52.0000] <annevk>
MikeSmith: required DOMString or just DOMString?

[05:49:09.0000] <annevk>
MikeSmith: either way, null should turn into "null" I think

[05:49:10.0000] <MikeSmith>
annevk: required DOMString

[05:49:20.0000] <annevk>
MikeSmith: then undefined should throw

[05:49:41.0000] <MikeSmith>
annevk: OK but then null should not?

[05:49:49.0000] <annevk>
MikeSmith: null should stringify

[05:49:50.0000] <MikeSmith>
or you mean it turns into the string "null"?

[05:49:54.0000] <MikeSmith>
hai

[05:49:59.0000] <annevk>
hai

[05:50:06.0000] <MikeSmith>
thanks

[05:50:18.0000] <annevk>
We use hai here at home all the time, such a great word

[05:50:23.0000] <MikeSmith>
haha

[05:50:31.0000] <MikeSmith>
yeah it’s pretty useful

[05:50:41.0000] <zcorpan>
mathiasbynens: \o/

[06:01:33.0000] <Domenic>
mathiasbynens: you should write a blog post for blog.whatwg.org about sunsetting the JavaScript Standard! It's a fun success story.

[06:02:06.0000] <mathiasbynens>
Domenic: sounds fun, I’ll write something up next week!

[06:06:29.0000] <bradleymeck>
uggg please no more drama

[06:08:35.0000] <annevk>
?

[06:10:19.0000] <bradleymeck>
annevk: was referring to the idea of making a blog post about bugs w/ JS spec

[06:10:23.0000] <Domenic>
???

[06:10:27.0000] <Domenic>
who suggested that?

[06:11:21.0000] <bradleymeck>
"mathiasbynens: you should write a blog post for blog.whatwg.org about sunsetting the JavaScript Standard! It's a fun success story." must have misread?

[06:11:34.0000] <annevk>
Yeah, I think you did

[06:11:54.0000] <bradleymeck>
then I am confused, w/e

[06:13:17.0000] <bradleymeck>
don't see how it could be read diff w/ scrollback though

[06:15:08.0000] <Domenic>
We're talking about https://github.com/whatwg/javascript/issues/29. You appear to be talking about a completely separate topic, bugs in ECMA262?

[06:16:40.0000] <bradleymeck>
yea, diff standard

[06:17:01.0000] <bradleymeck>
thx for the link, was very confused

[06:52:52.0000] <zcorpan>
dang I was for a moment looking forward to some JS drama :-)

[07:29:39.0000] <wanderview>
JakeA: annevk: have we considered exposing self.clients Clients interface on window or other workers?  except for claim() it seems like it would work just as well from those globals

[07:30:52.0000] <JakeA>
"controlled" doesn't make as much sense from a window, but yeah, I think it'd be fine to have in other contexts

[07:31:40.0000] <wanderview>
JakeA: you mean for ClientQueryOptions?

[07:31:49.0000] <JakeA>
wanderview: yeah

[07:32:30.0000] <wanderview>
JakeA: it would be kind of nice if we could get people using Clients.openWindow() instead of window.open()

[07:33:28.0000] <JakeA>
wanderview: although… if you postmessage a client, would it still land on navigator.serviceWorker?

[07:33:46.0000] <wanderview>
JakeA: oh... I forgot about that part... thats kind of icky

[07:37:07.0000] <wanderview>
JakeA: it seems if we did this we would need to move .claim() into a specialization for service worker globals anyway... we could specialize postMessage() the same way

[07:37:39.0000] <JakeA>
Agreed

[07:37:59.0000] <wanderview>
I guess I could write an issue

[07:38:03.0000] <wanderview>
work, work

[07:38:09.0000] <JakeA>
There isn't a way to postmessage to SharedWorkers though

[07:38:21.0000] <JakeA>
other than navigator.serviceWorker

[07:38:32.0000] <JakeA>
self.onmessage doesn't exist

[07:38:53.0000] <wanderview>
JakeA: self.clients.onmessage?

[07:39:30.0000] <wanderview>
I mean.. we could hang it off of there for Client API postMessaging...

[07:39:37.0000] <JakeA>
wanderview: In retrospect, that's a better place for it than navigator.serviceWorker

[07:39:41.0000] <wanderview>
but sometimes it feels like we try to see how many messaging paths we can create

[07:40:17.0000] <wanderview>
JakeA: which reminds me... we talked about BroadcastChannel in service worker... would those messages get our new fangled ExtendableMessageEvent with waitUntil()?

[07:41:12.0000] <JakeA>
wanderview: I don't think so, since you'd need to be in another event to create the channel

[07:41:33.0000] <wanderview>
JakeA: I meant for receiving BroadcastChannel messages from a window, etc

[07:42:01.0000] <wanderview>
but maybe thats what you meant

[07:42:03.0000] <wanderview>
I see

[07:42:05.0000] <JakeA>
wanderview: are you suggesting a new top-level thing like self.onbroadcastchannelmessage?

[07:42:38.0000] <wanderview>
JakeA: no... I was just wondering if BroadcastChannel is easily usable in SW... or if it has problems due to waitUNtil() being missing... but you correctly point out you already need to be in a place with a waitUntil

[07:43:28.0000] <wanderview>
JakeA: I wonder how long until people start putting `self.waitUntil = evt.waitUntil` at the top of all their event handlers

[07:43:45.0000] <wanderview>
I guess we need async waitUntil for that to be more useful

[07:44:19.0000] <wanderview>
/me may not be thinking right today...

[07:44:22.0000] <JakeA>
It'd still fall foul of overall limits right?

[07:44:44.0000] <wanderview>
JakeA: you mean the timeout with a waitUntil() holding things alive too long?

[07:45:02.0000] <JakeA>
yeah

[07:45:13.0000] <wanderview>
JakeA: it should I think

[07:45:41.0000] <wanderview>
JakeA: although if you keep getting functional events then I think the timer woudl be reset, of course

[07:53:49.0000] <wanderview>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/955

[07:54:05.0000] <JakeA>
Cheers!

[08:10:43.0000] <Domenic>
wilsonpage: pong

[08:12:03.0000] <wilsonpage>
Domenic got a tricky situation with my fastdom library regarding multiple versions running on the same page

[08:12:12.0000] <wilsonpage>
annevk pointed me your way :)

[08:12:12.0000] <wilsonpage>
https://github.com/wilsonpage/fastdom/issues/90

[08:12:35.0000] <wilsonpage>
Domenic I imagine the problem has been solved someplace beforebefore

[08:13:12.0000] <Domenic>
Hmm not sure exactly what makes me qualified to help here, but I guess I can weigh in on option A/B/C...

[08:15:07.0000] <wilsonpage>
Domenic that would be a mega help :)

[08:16:24.0000] <Domenic>
Goodness this is a tough one :(

[08:16:32.0000] <Domenic>
Most libraries don't have this kind of coordination problem

[08:17:21.0000] <wilsonpage>
Domenic yeah most the options I came up with are pretty lame

[08:17:25.0000] <wilsonpage>
But I'm all out

[08:40:17.0000] <Domenic>
Today I learned about <meta http-equiv="default-style">. Whyyyy

[08:56:15.0000] <wilsonpage>
Domenic great response, thanks mate!

[10:44:15.0000] <TabAtkins>
astearns: No, "authors must" is intentional and should be kept. It's just a different conformance class that we can't actually test.  ^_^  It still, of course, has zero influence on what the implementors have to do.

[10:52:12.0000] <TabAtkins>
MikeSmith: As an implementor / fellow spec editor, I'm actually not a fan of how extreme Anne takes his "spare, details-only" speccing.  Makes it very difficult to tell what the *intent* is of something, or sometimes what it even *means*.

[10:53:24.0000] <TabAtkins>
Despite the occasional implementor trying to interpret an informative detail as if it had normative consequences, I find it's worthwhile overall to give understandable context (to the point that a clueful web author could understand), as it's caught a lot of algorithm bugs when someone was able to go "huh, that result doesn't seem to match what it claims it

[10:53:25.0000] <TabAtkins>
should be doing...".

[11:05:12.0000] <astearns>
"conformance class that we can't actually test" doesn't make any sense to me. The instances I saw were more like, "If you don't do this, you're gonna have a bad time."

[11:15:46.0000] <smaug____>
igrigorik: what does Math.random()  r  2 - r; mean in requestIdleCallback spec?

[11:17:13.0000] <wanderview>
JakeA: Domenic: unfortunately I have to stop working streams API stuff in firefox for the time being... trying to find someone else to pick it up

[11:17:33.0000] <Domenic>
wanderview: awww sad! You seemed to be making a lot of progress! What happened?

[11:17:41.0000] <Mek>
smaug____: looks like some kind of markdown processing gone bad (replacing * r * with <em>r</em>

[11:18:04.0000] <wanderview>
Domenic: we need to fix a number of service worker issues in order to enable multiple renderer processes in firefox... thats a high priority thing at the moment

[11:18:39.0000] <Domenic>
wanderview: ah well that's pretty understandable.

[11:18:42.0000] <wanderview>
Domenic: also, I was not making very good progress because I don't really know the js engine stuff very well

[11:19:23.0000] <wanderview>
Domenic: but with it shipped in both edge and chrome (and likely coming soon in safari) I think the pressure is on to implement it

[11:19:26.0000] <smaug____>
you see, if it was a normal webidl based spec it would all be easier and understandabe ;)

[11:19:32.0000] <smaug____>
understanable

[11:19:36.0000] <wanderview>
hoping we can get one or two people with better knowledge on it

[11:21:14.0000] <TabAtkins>
Mek: That's precisely why Bikeshed doesn't have inline-markdown support turned on by default. :/

[11:21:25.0000] <wanderview>
Domenic: if not, then I will circle back to it after we have multi-e10s working

[11:43:44.0000] <Domenic>
Anyone remember the bugzilla bug about radio button names and unicode case matching?

[11:52:33.0000] <annevk>
Domenic: https://www.w3.org/Bugs/Public/show_bug.cgi?id=16970

[11:58:15.0000] <zewt>
TabAtkins: think we've had the conversation a few times before, but I disagree on "authors must"; it's just a confusingly poor choice of terminology

[12:00:47.0000] <botie>
rniwa, at 2016-08-12 08:59 UTC, MikeSmith said: hey somebody finally found an appropriate use for half-width katakana https://github.com/fumieval/LazyKQ

[12:04:13.0000] <Domenic>
annevk: thanks!

[12:17:32.0000] <rniwa>
MikeSmith: that's some crazy language.

[13:43:00.0000] <smaug____>
igrigorik: ping

[13:43:51.0000] <smaug____>
igrigorik: what should timeRemaining() return if JS keeps IdleDeadline after the callback?

[13:46:48.0000] <smaug____>
filed a bug


2016-08-13
[19:24:56.0000] <MikeSmith>
TabAtkins: as far “authors must” being a conformance class you can’t actually test, that’s why it is better for such requirements to be stated as “documents must”, which can be tested (and which the HTML checker and CSS do actually check)

[19:27:07.0000] <MikeSmith>
but I think if a spec uses “authors must” it should also make clear what that means

[19:27:17.0000] <MikeSmith>
for example, the HTML says this:

[19:28:29.0000] <MikeSmith>
“Conforming documents are those that comply with all the conformance criteria for documents. For readability, some of these conformance requirements are phrased as conformance requirements on authors; such requirements are implicitly requirements on documents”… “For example, if a requirement states that "authors must not use the foobar element", it would imply that documents are not allowed to

[19:28:36.0000] <MikeSmith>
contain elements named foobar.”

[19:28:46.0000] <MikeSmith>
https://html.spec.whatwg.org/multipage/infrastructure.html#conforming-documents

[19:30:47.0000] <MikeSmith>
astearns: ⬆

[19:40:51.0000] <MikeSmith>
anyway, the HTML spec also does have a few cases of such “authors must” requirements that are not actually machine-checkable/testable, and that’s OK too

[02:58:46.0000] <hsivonen>
MikeSmith: I went with ハロー・ワールド: https://hsivonen.fi/rs/encoding_rs/#examples

[02:59:01.0000] <MikeSmith>
/me looks

[02:59:14.0000] <hsivonen>
the streaming example is hilariously verbose compared to the non-streaming one

[02:59:23.0000] <hsivonen>
streaming is hard

[03:00:24.0000] <MikeSmith>
heh

[03:00:36.0000] <MikeSmith>
I thought Rust made everything better!

[03:00:38.0000] <MikeSmith>
:)

[03:01:05.0000] <hsivonen>
MikeSmith: It does! After this, java.nio.charset feels sad.

[03:01:24.0000] <MikeSmith>
oh well yeah

[03:01:31.0000] <hsivonen>
MikeSmith: though that's partly because this API design is informed by what I perceive as design mistakes in java.nio.charset.

[03:01:32.0000] <MikeSmith>
not sure what else could be much worse

[03:01:37.0000] <MikeSmith>
ok

[03:04:16.0000] <hsivonen>
aside: I'm trying to migrate the backend of Validator.nu to Ubuntu 16.04 and IPv6 connectivity

[03:04:35.0000] <MikeSmith>
oh cool

[03:04:45.0000] <hsivonen>
for some reason, ip6tables doesn't appear to work symmetrically with iptables

[03:05:05.0000] <MikeSmith>
oh? glad I have not had to mess with it too much then

[03:05:16.0000] <hsivonen>
I guess I'll just omit the firewall

[03:05:46.0000] <MikeSmith>
I find that every time I need to use iptables I just have to re-read the docs anyway

[03:06:01.0000] <hsivonen>
I wonder how much the slowness of IPv6 deployment is about stuff being subtly weird compared to IPv4

[03:06:50.0000] <MikeSmith>
a lot I bet

[03:07:03.0000] <MikeSmith>
but there are many things slowing it down I think

[03:07:34.0000] <MikeSmith>
e.g., try accessing anything at *.whatwg.org through IPv6

[03:08:52.0000] <hsivonen>
does dreamhost not offer IPv6 or has whoever owns the whatwg.org server config not gotten around to listening on IPv6?

[03:09:14.0000] <MikeSmith>
Dreamhost apparently claims they have IPv6 working for but all my /etc/hosts on IPv6-environment machines that I want to get to whatwg.org stuff from, I have had to force use of the IPv4 address instead

[03:09:21.0000] <hsivonen>
validator.nu itself has been available over IPv6 for 3 weeks or so now

[03:09:35.0000] <MikeSmith>
ah OK

[03:10:31.0000] <MikeSmith>
the W3C vnu instances are all still running under IPv4 but that is a general issue with lack of support for IPv6 in all MIT CSAIL networks

[03:11:07.0000] <hsivonen>
hmm. I remember reading some IPv6 comments by an MIT network admin

[03:11:18.0000] <MikeSmith>
yeah

[03:11:20.0000] <hsivonen>
it was critital of IPv6, but I thought MIT had deployed it anyway

[03:11:39.0000] <MikeSmith>
they had tried but he had to roll it back

[03:13:29.0000] <MikeSmith>
I think one big problem was with Windows machines, dozens of them end up flooding the network with junk if are running in an IPv6 environment

[04:46:33.0000] <nimai>
I'm front-end developer. How can I contribute to HTML standard? Oh  I read the faqs, but I seem to be lost in details

[07:52:02.0000] <annevk>
nimai: did you look at the GitHub repo?

[07:52:22.0000] <annevk>
nimai: the README has a few suggestions

[07:53:35.0000] <annevk>
nimai: if you remain unsure, a good first step might be to take some time and read through it, or parts of it

[08:22:41.0000] <nimai>
thank you annevk. I hope to find something to work upon after looking into the repo

[08:27:36.0000] <annevk>
nimai: cool, succes

[14:35:28.0000] <caitp>
what do web developers feel is missing from html?


2016-08-15
[21:26:20.0000] <MikeSmith>
mathiasbynens: is the note at https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all still accurate? (“These requirements are a willful violation of the JavaScript specification current at the time of writing…”) cc Domenic

[21:26:30.0000] <Domenic>
yep

[21:27:10.0000] <Domenic>
I wonder if we should bother trying to get ES to allow those things... document.all is such a one-off

[21:28:28.0000] <MikeSmith>
oh hey Domenic

[21:28:43.0000] <MikeSmith>
wasn’t sure you were still awake

[21:29:11.0000] <MikeSmith>
so I guess that requirement was out of scope for the WHATWG JavaScript spec anyway

[21:29:42.0000] <MikeSmith>
anyway yeah I guess it is maybe not worth escalating to ES

[21:29:48.0000] <Domenic>
Yeah I'm unsure myself

[21:29:58.0000] <MikeSmith>
I just noticed it because of https://twitter.com/luke_dot_js/status/764291949863985153

[21:30:09.0000] <MikeSmith>
and https://twitter.com/dazabani/status/764428885081460736

[21:30:09.0000] <Domenic>
I mean if you defined it in ES you'd define some kind of generic concept (e.g. what V8 calls "undetectable object")

[21:30:15.0000] <MikeSmith>
oh

[21:30:28.0000] <Domenic>
but then you'd want people to never use that generic concept, except for document.all

[21:30:38.0000] <MikeSmith>
that is an turn of phrase, "undetectable object

[21:30:45.0000] <MikeSmith>
oh man

[21:32:04.0000] <MikeSmith>
in general the way ES defines things in abstract terms seems really odd to me

[21:32:17.0000] <MikeSmith>
I guess it enables stuff liek that when you need it

[21:32:41.0000] <MikeSmith>
so there is probably a lot of other utility to it that I don not have insight into

[21:33:08.0000] <MikeSmith>
and anyway I have never read specs for other programming languages

[21:33:19.0000] <MikeSmith>
maybe this is how they all do things

[23:12:50.0000] <MikeSmith>
Domenic: does https://github.com/whatwg/html/pull/1516 affect the case of using <style>@import url( '/common-style.css' )</style> inside shadow dom?

[23:12:55.0000] <MikeSmith>
or is it meant to?

[23:18:08.0000] <MikeSmith>
hayato: ⬆

[23:22:08.0000] <hayato>
We have not discussed it yet for  <style>@import url( '/common-style.css' )</style>, I think.

[23:24:34.0000] <hayato>
The issue is https://github.com/w3c/webcomponents/issues/56

[23:30:18.0000] <MikeSmith>
hayato: super, thanks

[23:31:30.0000] <MikeSmith>
ah I see rniwa asked specifically about that case in https://github.com/w3c/webcomponents/issues/56#issuecomment-234480024

[23:33:45.0000] <MikeSmith>
anyway, devs are using <template>…<style>@import url( '/common-style.css' )</style> in the wild now, so if UAs change to not supporting that, it’s gonna break some things

[01:44:10.0000] <MikeSmith>
https://github.com/w3c/webpayments-payment-apps-api/blob/gh-pages/proposals/jsapi.md#invocation

[01:44:20.0000] <MikeSmith>
see the bulleted list

[01:44:41.0000] <MikeSmith>
“A global property can only be set by the user agent or the payment app itself. Therefore, the payment app can be assured that requests it receives originate from the user agent. This ensures that an arbitrary origin is unable to instantiate a payment app and impersonate this API.”

[01:44:55.0000] <MikeSmith>
do we have any precedent for something like that?

[01:45:13.0000] <MikeSmith>
oh maybe http://w3c.github.io/webrtc-pc/#sec.create-identity-proxy

[01:45:38.0000] <MikeSmith>
ah yeah it is pretty much exactly the same as that

[03:39:03.0000] <annevk>
MikeSmith: Domenic: filed https://github.com/tc39/ecma262/issues/668 to see what folks say about document.all today

[10:33:16.0000] <caitp>
how much stuff actually breaks if a browser stopped doing weird things for HTMLAllCollection ?

[10:34:04.0000] <gsnedders>
caitp: like the ToBoolean stuff?

[10:34:20.0000] <caitp>
document.all == undefined, and all the rest

[10:35:04.0000] <Domenic>
Last use counters I saw said something like 2% of all pages

[10:35:43.0000] <gsnedders>
as far as I remember, you basically have to have document.attachEvent among other non-standard APIs if you don't hide document.all

[10:35:47.0000] <caitp>
by use counters, yabut that's presumably measuring use of document.all, not necessarily brokenness of document.all not being all weird?

[10:36:06.0000] <Domenic>
Measuring cases where the weirdness gets triggered

[10:36:18.0000] <gsnedders>
if we added a bunch more duplicate APIs it /might/ not break that much

[10:36:44.0000] <caitp>
but not necessarily a better thing

[10:37:36.0000] <gsnedders>
(at the same time, having those other APIs may throw you down other non-standard codepaths that will break in different ways)

[10:39:22.0000] <caitp>
well, getting rid of it some day is a nice pipedream anyway

[10:39:52.0000] <caitp>
the bit on v8 hidden classes that decides whether an object behaves like document.all or not could be put to better use

[10:46:00.0000] <gsnedders>
are they actually that much in need? (the bits I mean?)

[10:48:49.0000] <caitp>
well you wouldn't want to add another word to those structures when you need more bits

[10:49:18.0000] <caitp>
but reclaiming the bit would only be a small part of cleaning it up

[10:49:48.0000] <caitp>
maybe some day *-*

[10:50:14.0000] <gsnedders>
well, I mean, it's not like it's a bit on every object

[10:50:23.0000] <caitp>
it absolutely is

[10:50:40.0000] <gsnedders>
it is? not just on each class?

[10:51:37.0000] <caitp>
well, depends how much map sharing is going on in a given codebase

[10:53:28.0000] <caitp>
but the bit isn't the big win for getting rid of it, really the win is getting rid of support for some weirdness that only one thing really uses or cares about

[10:55:15.0000] <caitp>
admittedly, it doesn't make that much of a difference, but getting rid of vestigial organs isn't bad or anything

[11:22:11.0000] <nox>
caitp: There has been discussions about document.all recently.

[11:23:26.0000] <nox>
caitp: https://github.com/whatwg/html/issues/775 https://github.com/whatwg/html/pull/780 https://github.com/whatwg/html/issues/1379


2016-08-16
[17:18:44.0000] <MikeSmith>
has anybody looked in detail at the “Identity Provider Proxy” stuff in the WebRTC spec?

[17:18:47.0000] <MikeSmith>
http://w3c.github.io/webrtc-pc/#sec.create-identity-proxy

[17:51:00.0000] <duper>
MikeSmith: not me.. looks like SAML at first glance though

[17:56:36.0000] <MikeSmith>
oh

[17:56:49.0000] <MikeSmith>
duper: I hope it wasn’t inspired by that

[17:58:56.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/38957103/fetch-api-rejects-with-networkerror-when-hosted-on-localhost-firefox-only

[23:40:25.0000] <mathiasbynens>
wait, what https://twitter.com/distobj/status/765286699404591104

[23:59:03.0000] <MikeSmith>
mathiasbynens: trolling

[23:59:14.0000] <MikeSmith>
he just has an axe to gring

[23:59:21.0000] <MikeSmith>
*grind

[00:00:01.0000] <MikeSmith>
hmm disappointed James Clark hearted that but oh well

[00:00:10.0000] <MikeSmith>
everybody has their blind spots

[00:00:21.0000] <MikeSmith>
techno-reactionarism

[00:02:51.0000] <MikeSmith>
if they had to actually implement browser engines they would have a different POV

[00:12:27.0000] <annevk>
I guess it's valid in the sense that JavaScript obsoleted itself by merging into the thing it was patching, but generalizing it is shortsighted

[00:13:14.0000] <annevk>
The Quirks and Compat effort have a similar goal, but most other standards don't

[00:46:16.0000] <MikeSmith>
I think they just get hung up on the word “standard”

[00:48:26.0000] <annevk>
Using "Standard" turns out to be a good litmus test

[01:36:38.0000] <mkwst>
Hey folks! I see a few pings in my IRC history, but scrolling through ~2 weeks of backlog doesn't sound like fun. If y'all need something from me that's still relevant, let me know? :)

[01:36:57.0000] <MikeSmith>
hey mkwst welcome back

[01:37:26.0000] <mkwst>
hey MikeSmith!

[01:37:40.0000] <mkwst>
(I'm out again next week; fair warning. :) )

[01:37:49.0000] <MikeSmith>
heh

[01:38:21.0000] <Ms2ger>
mkwst, http://logs.glob.uno/?a=search&c=freenode%23whatwg&q=mkwst&ss=1+Aug+2016&se=16+Aug+2016

[01:38:24.0000] <MikeSmith>
will try to pile on as much as possible this week then :D

[01:38:49.0000] <mkwst>
Ms2ger: !!! That is super useful!

[01:39:01.0000] <MikeSmith>
oh wow yeah didn’t knwo you could do that

[01:39:43.0000] <MikeSmith>
hsivonen: is there some way I can get a ContentHandler.characters to ignore inter-element whitespace?

[01:41:19.0000] <MikeSmith>
hsivonen: specifically for https://github.com/validator/validator/blob/master/src/nu/validator/xml/LanguageDetectingXMLReaderWrapper.java#L171

[01:41:27.0000] <mkwst>
MikeSmith: with regard to moving origin policy to WICG, I'm fairly agnostic. Probably worth doing from a process perspective, but not worth doing if we end up running with mnot's more header-based suggestion.

[01:42:03.0000] <MikeSmith>
mkwst: SGTM

[01:42:05.0000] <mkwst>
MikeSmith: I _think_ the approach I'm proposing is better, but I might be missing some of the middleware story. I need to chat with Mark. *shrug*

[01:42:17.0000] <MikeSmith>
OK

[01:56:25.0000] <annevk>
foolip: interested in reviewing https://github.com/whatwg/dom/pull/295?

[03:13:18.0000] <zcorpan>
any opinions on where to put the definition of innerText?

[03:14:16.0000] <annevk>
zcorpan: is it for all elements or just HTML elements?

[03:14:41.0000] <annevk>
Also, not really I suppose

[03:14:44.0000] <zcorpan>
annevk: HTMLElement. but we'll also want the same algorithm for Selection

[03:15:03.0000] <annevk>
That is still a goal? Cool

[03:15:09.0000] <annevk>
Is rniwa on board with it?

[03:16:28.0000] <zcorpan>
hmm i don't know, i assumed it was a goal. i might have missed or forgotten some discussion about this

[03:17:13.0000] <annevk>
zcorpan: putting it somewhere in 3.2 seems okay

[03:18:25.0000] <zcorpan>
/me finds https://www.w3.org/Bugs/Public/show_bug.cgi?id=10583

[03:19:33.0000] <zcorpan>
annevk: ok

[03:45:44.0000] <hsivonen>
MikeSmith: the inter-element whitespace stuff in SAX requires DTD processing to decide what's inter-element whitespace

[03:46:15.0000] <MikeSmith>
hsivonen: OK that is what I thought and what I was afraid of

[03:46:26.0000] <hsivonen>
MikeSmith: I'm not sure if you can get that info out of Jing, but my understanding is that RELAX NG is in principle not about augmenting the infoset with this kind of info

[03:46:37.0000] <MikeSmith>
yup I think so

[03:46:49.0000] <MikeSmith>
I think Jing does not expose it either

[03:47:53.0000] <hsivonen>
you could collapse each run of whitespace to a single space. that should be good enough for language detection

[03:48:59.0000] <MikeSmith>
yeah I was hoping not to have to do that, and instead just pass on the whole character array as is

[03:49:30.0000] <MikeSmith>
but I think for this purpose it may be sufficient to just not count whitespace toward the MIN_CHARS total

[03:50:23.0000] <MikeSmith>
I would still have to have to look at it character-by-character but at least I would not have do the additional collapsing

[04:45:12.0000] <annevk>
MikeSmith: any chance I could get some kind of access to https://github.com/w3c/resource-timing that allows me to fixup comments and such?

[04:45:30.0000] <annevk>
MikeSmith: other than my own, that is

[06:09:50.0000] <annevk>
Turning Attr into a Node is harder than I thought

[06:32:28.0000] <nox>
annevk: Noooooooo

[06:32:30.0000] <nox>
:'(

[06:32:49.0000] <nox>
annevk: Sorry, my common sense followed me even though I asked it to stay at home.

[06:33:20.0000] <annevk>
heh

[06:33:36.0000] <annevk>
nox: don't worry, you'll understand when you get older

[06:34:16.0000] <nox>
annevk: Ah ah.

[06:34:37.0000] <nox>
annevk: I don't mind such issues, I just mind that we will have to change Servo. :P

[06:42:34.0000] <zcorpan>
annevk: 30 year crisis? :-)

[06:46:32.0000] <nox>
zcorpan: That's next year for me.

[06:47:43.0000] <annevk>
zcorpan: heh, predetermined deadline for giving up on improvements in this space

[06:48:06.0000] <mkwst>
annevk: Skimming through the XFO RFC, there's not really enough there to hook into.

[06:48:35.0000] <mkwst>
Do you want it defined in HTML, or Fetch, or just link to https://tools.ietf.org/html/rfc7034#section-2.3.2.1 and wash our hands of it? :)

[06:50:23.0000] <annevk>
An entire RFC for something super simple and it can't even be used

[06:50:52.0000] <annevk>
mkwst: I think we should just define it in HTML and forget about the RFC

[06:51:15.0000] <annevk>
mkwst: prolly with a note about our thinking

[06:52:50.0000] <mkwst>
Eh. The RFC is ~fine. It just doesn't wrap its requirements up into anything we can easily point to.

[06:54:15.0000] <mkwst>
Would you be sad if I changed the current stub to something even stubbier? Like "TODO: Implement XFO here." I don't really have time to spell it out right now, but can come back to it in a separate patch in The Future(tm).

[06:54:58.0000] <mkwst>
Or maybe I can get David to do it... :)

[06:55:38.0000] <annevk>
mkwst: I think that's okay

[06:55:50.0000] <annevk>
mkwst: will let Domenic sign off though

[06:56:53.0000] <mkwst>
ok. then I'll double the stub's stubbyness, and squash. thanks!

[06:57:29.0000] <annevk>
mkwst: no need to squash anymore fwiw

[06:57:34.0000] <annevk>
mkwst: GitHub has tools for that now

[06:58:30.0000] <mkwst>
Ah. Nice. :)

[07:03:35.0000] <mkwst>
ok. stubbed and assigned Domenic.

[07:25:50.0000] <zcorpan>
annevk: is there something in DOM that innerText setter should invoke?

[07:28:09.0000] <annevk>
zcorpan: note sure, presumably https://dom.spec.whatwg.org/#concept-node-replace-all once you have created the new Text node and set its node document and such

[07:28:14.0000] <annevk>
s/note/not/

[07:28:49.0000] <zcorpan>
annevk: i looked at that also but it's not just 1 node, it's a list of text nodes and <br>s

[07:29:11.0000] <annevk>
zcorpan: use a DocumentFragment wrapper?

[07:29:30.0000] <zcorpan>
ah ok

[07:29:31.0000] <annevk>
zcorpan: that's how innerHTML works

[07:29:37.0000] <zcorpan>
thanks

[07:29:45.0000] <annevk>
zcorpan: and presumably we don't want multiple mutation records here

[07:37:01.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4383 yep just 1 record in webkit/chromium/gecko

[08:03:07.0000] <annevk>
So that patch took two hours to write and I guess there'll be some follow up

[08:04:17.0000] <annevk>
I guess the lesson here is to specify features if browsers don't drop them within a short amount of time

[08:06:46.0000] <Domenic>
The lesson here is /topic

[08:08:29.0000] <annevk>
Yeah, but we did actually have input from sicking at the time that simplifying this would be worthwhile

[08:08:59.0000] <annevk>
And I think Gecko did make one simplification, no child nodes, that stuck and that was probably all we should have hoped for

[08:10:13.0000] <annevk>
Furthermore, if I recall correctly I didn't quite understand how cheap a prototype object could be and that also drove some of this non-Node-inheritance

[08:13:40.0000] <gsnedders>
Some kid outside just shouted, "ALIENS! OH MY GOSH!"

[08:13:56.0000] <Ms2ger>
Did you stick your head out of the window again?

[08:14:26.0000] <annevk>
So... mutation events?

[08:14:42.0000] <annevk>
Any progress on that front smaug____?

[08:15:14.0000] <gsnedders>
Ms2ger: nah, the window is open

[08:15:19.0000] <annevk>
/me wonders if there's other places where DOM could be updated to match reality besides mutation events since he's not much looking forward to those

[08:15:27.0000] <gsnedders>
Ms2ger: I'd post a photo, but IRC

[08:15:56.0000] <smaug____>
annevk: let me look at the telemetry

[08:18:26.0000] <smaug____>
hmm, do I read this right... has the usage of mutation events gone down significantly

[08:18:32.0000] <smaug____>
/me looks at older data

[08:22:37.0000] <smaug____>
release builds: 39 0.4% of window/node objects had seen mutation event listener somewhere in them, 47 0.22%

[08:23:11.0000] <smaug____>
zcorpan: you're doing something with innerText?

[08:23:28.0000] <smaug____>
there was just a gecko bug, which requires a change to roc's draft

[08:23:53.0000] <annevk>
smaug____: that's still not even close to 0.003% which Blink requires for removal

[08:23:55.0000] <zcorpan>
smaug____: https://github.com/whatwg/html/pull/1678

[08:24:11.0000] <smaug____>
zcorpan: is that based on roc's draft?

[08:24:17.0000] <smaug____>
ah, yes

[08:24:55.0000] <smaug____>
zcorpan: https://github.com/rocallahan/innerText-spec/issues/5

[08:25:12.0000] <zcorpan>
smaug____: ok, thanks

[08:27:31.0000] <smaug____>
hmm,   I'm not getting any warnings about mutation events usage in blink

[08:28:07.0000] <Domenic>
https://www.chromestatus.com/metrics/feature/timeline/popularity/143 https://www.chromestatus.com/metrics/feature/timeline/popularity/148 https://www.chromestatus.com/metrics/feature/timeline/popularity/144 https://www.chromestatus.com/metrics/feature/timeline/popularity/1173

[08:28:43.0000] <smaug____>
Domenic: does blink warn about use of deprecated feature when using mutation events?

[08:28:52.0000] <Domenic>
No, I don't believe so

[08:29:03.0000] <Domenic>
foolip doesn't like warning about things unless we have a concrete removal plan

[08:29:28.0000] <smaug____>
we have concrete plan

[08:29:41.0000] <smaug____>
that is why MutationObserver was designed

[08:29:41.0000] <Domenic>
what version?

[08:29:53.0000] <Domenic>
I mean a concrete version number they'll be removed in

[08:29:54.0000] <smaug____>
oh, you mean plan in blink

[08:29:59.0000] <Domenic>
Yeah

[08:30:12.0000] <smaug____>
odd requirement to have plan for that

[08:30:24.0000] <smaug____>
of course you remove the feature when usage is low enough

[08:30:52.0000] <smaug____>
and hard to get usage low enough, if web devs think using the feature is just fine

[08:31:07.0000] <Domenic>
I tend to agree but I see both sides

[10:13:25.0000] <Wessee>
hello

[10:22:23.0000] <Wessee>
is iframe.contentWindow.Window === Window true or false? and why? or: is the Window (and other classes in DOM) supposed to be shared among all views, or each view has its own class definition? can someone point me to where this is defined?

[10:23:53.0000] <Domenic>
Wessee: false; each JavaScript environment has its own set of globals

[10:24:02.0000] <Domenic>
Digging up spec reference for you in a moment...

[10:24:19.0000] <Wessee>
thank you very much

[10:25:19.0000] <Domenic>
https://html.spec.whatwg.org/#creating-a-new-browsing-context step 2 + https://tc39.github.io/ecma262/#sec-initializehostdefinedrealm step 11

[10:37:48.0000] <Wessee>
why is that, though? i'd have expected them to be the same object

[10:39:35.0000] <Domenic>
Hmm, why? They're completely separate

[10:40:02.0000] <Domenic>
It's important for one window not to be able to mess with another window; that can be a security issue

[10:40:48.0000] <Domenic>
E.g. var window2 = window.open("https://mybank.com"); if window2.Window === window.Window, then I can mess with code on mybank.com.

[10:50:37.0000] <Wessee>
i see. my actual question is, how could i check for, say, an Element instance cross-view. eg the way adoptNode does it

[10:53:36.0000] <Domenic>
.nodeType is pretty good

[10:57:41.0000] <Wessee>
that's not type safe :D but ok, i get it... maybe dom classes could be shared among those views having the same .origin ?

[10:59:31.0000] <Wessee>
nope that won't work, i think

[13:42:25.0000] <zcorpan>
Wessee: type-checking cross-globals doesn't work i believe. :-( you have to do duck typing. see https://github.com/w3c/testharness.js/blob/master/testharness.js#L699

[14:34:45.0000] <Wessee>
yeah it's a bit of a bummer

[15:49:12.0000] <Wessee>
what happened to query() and queryAll() ?

[15:53:43.0000] <caitp>
the demigorgon ._.

[16:28:55.0000] <gsnedders>
does any spec cover loading stylesheets with the cross-origin Content-Type checking fun?

[16:29:17.0000] <gsnedders>
If not, what spec does that even belong in? Probably across multiple.

[16:50:39.0000] <TabAtkins>
gsnedders: https://drafts.csswg.org/css-cascade/#content-type ?

[16:56:14.0000] <gsnedders>
TabAtkins: that's only formally @import, right?

[16:56:25.0000] <gsnedders>
TabAtkins: is that true for <link rel=stylesheet> too?

[16:56:50.0000] <TabAtkins>
Ah, you're right, it's only defining @import

[16:57:16.0000] <TabAtkins>
Not to say it doesn't *intend* to work for <link>, too, but it doesn't *say* it does, and I don't remember the intent.

[16:58:02.0000] <gsnedders>
from memory that behaviour was the eventual interop after the attacks on lax handling for <link>, given AFAIK it's the exact same codepath

[16:59:47.0000] <TabAtkins>
yeah, i think so too


2016-08-17
[17:01:09.0000] <gsnedders>
because, like, if it's spec'd now we get have shared tests for it

[17:01:30.0000] <gsnedders>
YES, I'M JUST CONSPIRING TO GET TESTS FOR EVERYTHING, OKAY?!

[17:01:40.0000] <gsnedders>
I don't actually care about your silly specs! :P

[17:01:42.0000] <TabAtkins>
I mean, good. That's what I'm paying you for. ^_^

[17:01:52.0000] <gsnedders>
Pretty sure that's Rich. ;P

[17:02:00.0000] <TabAtkins>
Not while he's on vacation!

[17:02:00.0000] <gsnedders>
Well, except this motnh.

[17:02:03.0000] <TabAtkins>
*Rick

[17:02:13.0000] <gsnedders>
…I can't type.

[17:06:01.0000] <gsnedders>
TabAtkins: is http://test.csswg.org/suites/css21_dev/nightly-unstable/html4/uri-013.htm wrong/outdated?

[17:06:10.0000] <gsnedders>
TabAtkins: per 2.1? per Syntax?

[17:06:37.0000] <TabAtkins>
ooh, malformed url() parsing. *probably* outdated a little bit, let me check.

[17:06:53.0000] <TabAtkins>
Since Syntax locked down and simplified the rules for url().

[17:08:01.0000] <gsnedders>
do we need errata on 2.1?

[17:08:43.0000] <TabAtkins>
I'm neutral on how much needs to be applied backwards to 2.1, particularly when the changes are difficult to backport (like parsing)

[17:10:19.0000] <TabAtkins>
ah, yup, #3 is definitely outdated. still looking at the rest.

[17:10:39.0000] <TabAtkins>
and #4

[17:13:44.0000] <gsnedders>
the problem with no backporting changes to 2.1 is we end up needing different tests if we actually want to claim we're still testing 2.1

[17:14:21.0000] <TabAtkins>
That's why the correct answer is to start chopping out parts of 2.1 that have been moved to other specs.

[17:14:26.0000] <gsnedders>
I agree.

[17:14:28.0000] <TabAtkins>
But people keep fighting against this for some reason.

[17:14:47.0000] <gsnedders>
I'd be totally fine with errata just making large parts of 2.1 undefined behaviour provided we have a better spec to point at

[17:14:55.0000] <gsnedders>
so we don't actually need to do anything useful

[17:15:07.0000] <TabAtkins>
But anyway, Syntax can't be accurately ported to 2.1 without just copying it over.  2.1 has a totally different parsing definition that can't be modded into precision in the same way.

[17:15:20.0000] <gsnedders>
oh, I'm well aware

[17:15:30.0000] <gsnedders>
I have no idea what a sensible errata would look like

[17:15:46.0000] <gsnedders>
/me wonders if this is a GitHub issue or a www-style issue :)

[17:15:53.0000] <TabAtkins>
GH plz

[17:17:06.0000] <gsnedders>
should I be in some group so I can add labels etc. in csswg-drafts?

[17:17:15.0000] <TabAtkins>
yes

[17:17:16.0000] <gsnedders>
or is that limited to the cool kids?

[17:17:18.0000] <TabAtkins>
#12 is invalid

[17:17:23.0000] <TabAtkins>
you're a wg member

[17:18:27.0000] <TabAtkins>
#13 is valid, but not testing *precisely* what it thinks it's testing anymore. It passes by accident, in other words. (It's making the same legacy assumption that #12 is, just happens to still succeed.)

[17:18:54.0000] <gsnedders>
Still not sure how I managed to wangle my way into the WG. It's not like I'm even that great at CSS. :)

[17:20:24.0000] <TabAtkins>
#14 is invalid

[17:21:03.0000] <gsnedders>
so Fx and Blink are correct?

[17:21:29.0000] <TabAtkins>
blink is, at least. not looking at ff righ tnow

[17:21:46.0000] <gsnedders>
identical to Blink

[17:22:36.0000] <TabAtkins>
#15 and #16 are like #13 - technically valid, but not actually testing exactly what they think they are.

[17:22:51.0000] <TabAtkins>
Oh, and #17, sorry.

[17:25:04.0000] <TabAtkins>
and done

[17:25:18.0000] <TabAtkins>
so yeah, Blink is totally correct - all its failures are test mistakes.

[17:25:45.0000] <TabAtkins>
(Or rather, tests against 2.1 which have had reality changed underneath them.)

[17:26:57.0000] <gsnedders>
unless the latest 2.1 errata deals with this?

[17:27:37.0000] <gsnedders>
I don't think it does?

[17:28:40.0000] <gsnedders>
no, that's all about at-rules

[19:36:38.0000] <MikeSmith>
annevk: added you to https://github.com/w3c/resource-timing with admin access. heads up igrigorik; see http://logs.glob.uno/?c=freenode%23whatwg&s=16+Aug+2016&e=16+Aug+2016#c1002845 for context

[20:00:54.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/38957103/fetch-api-rejects-with-networkerror-when-hosted-on-localhost-firefox-only

[22:24:17.0000] <MikeSmith>
annevk: https://github.com/jsdom/whatwg-url/pull/58#issuecomment-240170242

[22:35:38.0000] <MikeSmith>
hayato: http://stackoverflow.com/questions/38976819/composing-v1-nested-web-components

[23:37:11.0000] <annevk>
MikeSmith: yeah, that jsdom issue is why I have https://github.com/whatwg/url/issues/140

[23:37:38.0000] <annevk>
MikeSmith: folks assume obvious meaning rather than follow the link

[23:39:31.0000] <MikeSmith>
/me looks

[23:39:41.0000] <MikeSmith>
ah yeah OK

[23:54:41.0000] <mkwst>
annevk: I'm adding more bikeshed metadata to Fetch; do you care whether it's multiple commits in a single PR, or multiple PRs? Trying to give it to you in reviewable chunks...

[23:56:12.0000] <annevk>
mkwst: multiple commits in one PR seems fine

[23:56:28.0000] <annevk>
mkwst: then we can add it as a single commit

[23:56:33.0000] <annevk>
(in the end)

[23:56:48.0000] <mkwst>
Ok. Then I'll extend  https://github.com/whatwg/fetch/pull/370 a bit.

[23:58:00.0000] <annevk>
cool

[00:48:28.0000] <mkwst>
annevk: https://github.com/whatwg/fetch/pull/370 has enough for you to chew through, I think. I'll spend another hour on it sometime later.

[00:48:37.0000] <mkwst>
Can I assume you'd accept similar patches to HTML?

[00:58:30.0000] <annevk>
mkwst: yeah, we landed one yesterday that I created

[00:59:30.0000] <mkwst>
annevk: Ok, great. I hope you won't be too sad if I'm opportunistic there and only tag the definitions I need. :)

[00:59:41.0000] <annevk>
mkwst: nope

[01:34:00.0000] <annevk>
mkwst: sorry, I'm commenting on the generated file again :-/

[01:34:29.0000] <mkwst>
annevk: No worries. The line numbers aren't terribly useful anyway; I'm just searching for the text.

[01:34:53.0000] <mkwst>
I'm fiddling with HTML right now, will get to your Fetch feedback in a few minutes.

[01:34:54.0000] <annevk>
mkwst: yeah, but the 100 col comments are likely wrong due to that

[01:35:04.0000] <annevk>
mkwst: I removed the comments

[01:35:07.0000] <mkwst>
Oh, well. *shrug* Whatever. I'll figure it out. :)

[01:35:25.0000] <mkwst>
This is going to make my life a bunch simpler, so I can deal with a little annoyance up front. :)

[01:35:44.0000] <mkwst>
Well, this tiny part of my life, but still. :)

[01:36:18.0000] <annevk>
mkwst: let me know when you consider it ready and I'll give it another go

[01:36:25.0000] <mkwst>
Sure, thanks!

[01:38:58.0000] <mkwst>
(For clarity, HTML breaks on the last whitespace before 100col, regardless of content?

[01:38:59.0000] <mkwst>
)

[01:41:19.0000] <annevk>
mkwst: yeah

[01:41:53.0000] <annevk>
HTML requires \s+ to find terms, Fetch doesn't

[01:47:54.0000] <annevk>
Anyone interested in reviewing Attr's comeback? https://github.com/whatwg/dom/pull/299

[02:39:13.0000] <annevk>
Anyone interested in reviewing improved global object references in DOM? https://github.com/whatwg/dom/pull/296

[02:51:29.0000] <mkwst>
annevk: Took another pass at Fetch, found one more newline issue. I think the rest is taken care of. Mind taking another look when you have a minute?

[02:57:31.0000] <nox>
annevk: Attr as Node, what is the value of prevSibling and nextSibling etc?

[02:57:46.0000] <Ms2ger>
Null

[02:58:11.0000] <nox>
Ok.

[03:04:12.0000] <annevk>
mkwst: later today

[03:04:41.0000] <annevk>
nox: parent is null too

[03:18:31.0000] <smaug____>
anyone here familiar with houdini and worklets?

[03:43:01.0000] <annevk>
smaug____: a bit

[03:44:48.0000] <smaug____>
annevk: just wondering what kinds of objects are expected in worklets

[03:44:57.0000] <smaug____>
looks like Audio spec will use Events there

[03:45:18.0000] <smaug____>
so Gecko implementation will certainly need cycle collector in threads where worklets are run

[03:45:27.0000] <annevk>
smaug____: I see, I don't really know much about that, except that I believe it's nothing by default

[03:45:48.0000] <annevk>
smaug____: and I haven't seen an issue reported against DOM to expose the necessary APIs in worklets either

[03:46:00.0000] <smaug____>
(how events are used in Audio API seems to be all unclear https://github.com/WebAudio/web-audio-api/issues/937 )

[03:57:42.0000] <annevk>
I see

[03:57:54.0000] <annevk>
They should probably figure that out then

[03:58:20.0000] <annevk>
Please make sure they patch DOM somehow if new things need to be exposed in worklets

[05:11:10.0000] <annevk>
smaug____: any thoughts on what we should do with https://www.w3.org/Bugs/Public/show_bug.cgi?id=25002? Edge 14 still has it

[05:17:20.0000] <smaug____>
annevk: if we add that, we probably need to add the rest of the IEism too

[05:17:29.0000] <smaug____>
window.event and src<something>

[05:17:33.0000] <smaug____>
and whatever there is

[05:20:14.0000] <annevk>
Hmm, you think those are tightly coupled?

[05:20:21.0000] <annevk>
There's a different open bug for those

[05:20:28.0000] <annevk>
With lots of compat concerns from bz

[05:20:36.0000] <annevk>
I guess I'm not going to touch that

[05:23:54.0000] <smaug____>
annevk: well, if one is using one IEism, I'd expect also other IEisms being used

[05:24:01.0000] <smaug____>
but this is just a guess of course

[05:50:45.0000] <annevk>
mkwst: could you comment on https://www.w3.org/Bugs/Public/show_bug.cgi?id=25529#c11 perhaps?

[05:51:04.0000] <annevk>
mkwst: cloning of elements allows you to bypass CSP style attribute checks

[05:51:34.0000] <annevk>
mkwst: also, I hope those CSP style attribute checks don't actually prevent the attribute from being set...

[06:12:39.0000] <mkwst>
annevk: Will take a look. The style attribute checks are a mess, honestly. CSSOM even more so.

[06:13:01.0000] <annevk>
Not really surprised

[06:17:12.0000] <JakeA>
Did anyone get a confirmation email when they booked one of the recommended TPAC hotels via http://www.delegatehotels.com/e/w3c2016?

[06:17:32.0000] <JakeA>
I'm pretty sure I booked, but struggling to find myself any proof of that

[06:18:04.0000] <Domenic>
annevk: no comment about how Attr being a Node is a historical artifact that we are all very sad about?

[06:18:08.0000] <Domenic>
(in the spec)

[06:19:46.0000] <MikeSmith>
JakeA: when I booked at Hotel Vila Gale Opera I got a confirmation mail from accommodation⊙bc

[06:20:55.0000] <MikeSmith>
JakeA: if you need confirmation, Alexandra Lacourba <alex⊙wo> might be able to help

[06:21:16.0000] <annevk>
Domenic: should probably be fixed as part of https://github.com/whatwg/dom/issues/205

[06:21:37.0000] <JakeA>
MikeSmith: thanks. Pretty sure I booked, but can't find a confirmation. Maybe I dreamt booking it.

[06:21:39.0000] <annevk>
/me booked via Mozilla's agent

[06:21:42.0000] <Ms2ger>
Domenic, you're nyc-based, are you not?

[06:22:26.0000] <annevk>
Domenic: also, the really sad thing would have been it supporting child nodes, so I think the damage is fairly minor

[06:25:52.0000] <Domenic>
Ms2ger: yep

[06:27:28.0000] <Ms2ger>
Do you have an opinion on a 1h25 layover (international -> domestic) in EWR?

[06:29:39.0000] <Domenic>
Not really, sorry; I haven't been to EWR in a while...

[06:31:02.0000] <Ms2ger>
Np, thanks

[06:35:15.0000] <zcorpan>
annevk: would it help to just say integer item instead of "required line break count"?

[06:37:37.0000] <annevk>
zcorpan: the list can't only contain strings?

[06:38:00.0000] <zcorpan>
annevk: no. strings and integers

[06:38:19.0000] <annevk>
zcorpan: oh I see, it's mentioned in the introduction

[06:39:04.0000] <annevk>
zcorpan: I think it would help to say "or a positive integer (a required line break count)"

[06:39:31.0000] <zcorpan>
ok

[06:40:36.0000] <annevk>
zcorpan: and later on maybe just 2 and 1 and again have that parenthesis for clarity

[06:46:57.0000] <zcorpan>
annevk: ok, PTAL

[07:26:54.0000] <mkwst>
annevk: So, we need to adjust the HTML style rules to "break  on the last whitespace before 100col, regardless of content, unless the content is hard-coded in the preprocessor scripts as being on a single line".  :)

[07:28:55.0000] <annevk>
mkwst: yeah 😞

[07:31:16.0000] <gsnedders>
Ms2ger: you're never gonna make that connection, far as I know

[07:31:58.0000] <gsnedders>
Ms2ger: given you can easily spend the best part of an hour in the immigration queue before you even get to picking up your luggage and checking it in for your next flight, yet alone getting through security and to the gate

[07:32:17.0000] <Ms2ger>
No way I'm checking luggage

[07:33:00.0000] <Ms2ger>
You don't happen to have experience in Montreal?

[07:33:11.0000] <gsnedders>
nah

[07:33:25.0000] <gsnedders>
I presume it'd be international to international then?

[07:33:57.0000] <gsnedders>
I don't think Canada make everyone off an international flight go through immigration, which probably means an equally tight connction is better, but do check.

[07:35:16.0000] <Ms2ger>
Would be intl -> canada, but it's only 1h05

[12:37:11.0000] <JakeA>
MikeSmith: did you pay up front for the hotel (as in, will I see it in my credit card statement if I booked it)

[12:58:39.0000] <JakeA>
Opening that question out to others - when you booked TPAC hotel (via the W3), do you pay up-front?

[13:09:52.0000] <wanderview>
JakeA: last year it was cheaper to book separately from the TPAC conference block of rooms

[13:10:13.0000] <JakeA>
ohhh

[13:10:17.0000] <JakeA>
Cheers

[13:10:35.0000] <wanderview>
JakeA: in theory the conf organizers might be annoyed by that, though

[13:10:50.0000] <wanderview>
/me ascii shrugs

[13:11:04.0000] <wanderview>
/me is too lazy to look up the ascii shrugy

[13:55:08.0000] <TabAtkins>
wanderview: Just google for "shruggie" ¯\_(ツ)_/¯

[13:55:28.0000] <wanderview>
TabAtkins: you underestimate my lazyness

[14:03:03.0000] <zcorpan>
you can set words that expand to other words in os x prefs. but i was now disappointed it doesn't work in Limechat :shrug:

[14:03:30.0000] <zcorpan>
Domenic:

[14:03:31.0000] <botie>
Domenic: is there some private discussion going on?

[14:03:38.0000] <zcorpan>
From https://rocallahan.github.io/innerText-spec/

[14:03:39.0000] <zcorpan>
with the following normative changes:

[14:03:39.0000] <zcorpan>
* Defined behavior for non-CSS UAs.

[14:03:40.0000] <zcorpan>
* The setter is better defined.

[14:03:42.0000] <zcorpan>
* Added [CEReactions, TreatNullAs=EmptyString]

[14:03:44.0000] <zcorpan>
  to the IDL.

[14:03:46.0000] <zcorpan>
Fixes https://github.com/whatwg/html/issues/465.

[14:03:48.0000] <zcorpan>
Remaining issues: #1679

[14:03:59.0000] <Domenic>
zcorpan: looks good!

[14:04:29.0000] <zcorpan>
thanks!

[16:41:58.0000] <MikeSmith>
JakeA: for the TPAC hotel I did not pay up front as far as I recall

[16:42:57.0000] <JakeA>
Cheers!

[16:47:30.0000] <gsnedders>
JakeA: I def didn't

[16:50:01.0000] <JakeA>
Ok so I either booked it like I vaguely remember, but didn't get confirmation, or my brain is just making stuff up.

[16:52:36.0000] <gsnedders>
JakeA: I got an email from accomodation⊙bc FWIW

[16:59:57.0000] <JakeA>
yeah, I don't have one of those. Hmm


2016-08-18
[17:00:40.0000] <gsnedders>
you could try emailing the hotel?

[18:16:07.0000] <JakeA>
Yeah. Emailed w3, but probably quicker to go straight to the hotel.

[21:56:13.0000] <annevk>
https://github.com/w3c/html/issues/550

[21:56:33.0000] <annevk>
Somehow I anticipated censor

[21:56:53.0000] <annevk>
https://irccloud.mozilla.com/file/Rkah5CcD/web-platform-wg-censoring.png

[23:41:42.0000] <mkwst>
annevk: I think Anolis sets a `title` attribute on `<dfn>` tags that matches their ID. Is that something we could change? I think Bikeshed is picking it up as the defined term (/cc TabAtkins, if you're still awake).

[23:43:22.0000] <mkwst>
That is, Fetch's generated HTML for `request` is `<dfn data-export="" id="concept-request" title="concept-request">request</dfn>`. Looking at the `anchors.data` file Bikeshed downloads, `concept-request` is being used as the defined term.

[23:49:33.0000] <annevk>
mkwst: in theory we could patch Anolis to use data-x I suppose and replace title with data-x

[23:52:00.0000] <mkwst>
Hrm. I guess I need to look at the code to understand what it's actually using the title for. If we're going to patch Anolis, I guess we could just teach it to produce some of this metadata (like `data-lt`) itself.

[23:55:12.0000] <annevk>
mkwst: the title is used to link term usage back to its definition

[23:55:42.0000] <annevk>
mkwst: and it's used to create the ID

[23:55:53.0000] <mkwst>
The title on the `<a>`, I understand. The title on the `<dfn>` is strange, given that we have the `id`.

[23:56:13.0000] <annevk>
mkwst: no, the ID is derived from the title

[23:56:30.0000] <annevk>
mkwst: but you could have a different ID if you want from the linking term

[23:58:12.0000] <annevk>
mkwst: I'm not sure what's more work, changing Anolis and the specs that use it, or convert the specs to bikeshed

[23:58:41.0000] <mkwst>
*sigh* This looked like such an easy change. :)

[00:12:50.0000] <Ms2ger>
Hahahaha

[01:00:33.0000] <annevk>
mkwst: you consider https://github.com/whatwg/html/pull/1619 done right?

[01:00:42.0000] <annevk>
/me is about to merge, but thought he'd check

[01:00:56.0000] <mkwst>
annevk: Yeah, if y'all are happy with it, I am too.

[01:01:21.0000] <mkwst>
Thanks for working through these patches with me. It feels like they've taken more iterations than usual, so I appreciate your patience. :)

[01:02:41.0000] <annevk>
No worries, am happy to help

[01:18:04.0000] <zcorpan>
annevk: mkwst: trying to keep Anolis up to date seems more painful to me. we should stop using it imo

[01:19:08.0000] <mkwst>
zcorpan: 1. I agree! 2. Porting things like Fetch over seems like a lot of work. :/

[01:19:30.0000] <zcorpan>
yeah

[01:25:08.0000] <mkwst>
What else uses Anolis? XHR?

[01:25:56.0000] <Ms2ger>
encoding

[01:26:03.0000] <annevk>
fetch

[01:26:07.0000] <Ms2ger>
fullscreen

[01:26:07.0000] <annevk>
fullscreen

[01:26:12.0000] <annevk>
html-differences

[01:26:16.0000] <annevk>
mimesniff

[01:26:19.0000] <annevk>
xhr

[01:26:29.0000] <annevk>
That's all the directories I have with an Anolis Makefile

[01:28:25.0000] <mkwst>
More than I thought.

[01:29:27.0000] <zcorpan>
TabAtkins: would it be possible to develop a script to convert from anolis to bikeshed? ^

[01:32:51.0000] <zcorpan>
anyone with Edge? http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4393

[01:42:48.0000] <annevk>
I created an issue for mutation events: https://github.com/whatwg/dom/issues/305

[01:42:53.0000] <annevk>
zcorpan: sure

[01:43:07.0000] <mkwst>
zcorpan: What is it supposed to do? I can send you a screenshot?

[01:43:29.0000] <zcorpan>
I'm interested in what the log says

[01:43:56.0000] <zcorpan>
screenshot is ok

[01:44:01.0000] <mkwst>
https://www.irccloud.com/pastebin/cOoVRWdw/

[01:44:26.0000] <zcorpan>
thanks!

[01:44:31.0000] <annevk>
so

[01:44:32.0000] <annevk>
fwiw

[01:44:37.0000] <annevk>
my results in Edge 14 are very different

[01:44:54.0000] <annevk>
but I need to take a screenshot since copy-and-paste doesn't work

[01:45:38.0000] <annevk>
https://irccloud.mozilla.com/file/6AvEOBd7/edge14.png

[01:45:47.0000] <annevk>
zcorpan: ^^

[01:46:13.0000] <annevk>
mkwst: do you have Edge 13?

[01:47:43.0000] <zcorpan>
annevk: thanks. that matches the result of IE8..11 also

[01:47:45.0000] <mkwst>
*ahem* It's possible I ran that in Chrome. :(

[01:48:26.0000] <zcorpan>
haha

[01:48:43.0000] <mkwst>
https://www.irccloud.com/pastebin/8OjeXno4/

[01:48:58.0000] <mkwst>
That's what I get in Edge 13. Looks pretty similar to Chrome?

[01:49:49.0000] <zcorpan>
thanks. chrome is different (empty string for most, and act like textContent for option.innerText sometimes)

[01:50:38.0000] <mkwst>
I see. Well, if Chrome is wrong, file a bug and I'll ask people who know things about things to help. :)

[01:50:45.0000] <zcorpan>
it seems IE and Edge behave like Gecko does with their latest fix, and chromium is non-sensical

[01:51:31.0000] <zcorpan>
mkwst: bug is https://bugs.chromium.org/p/chromium/issues/detail?id=636327 (via https://github.com/rocallahan/innerText-spec/issues/5 )

[01:53:28.0000] <mkwst>
Ok. Kent is a good guy; I'm sure he'll be thrilled to take a look at your test.

[04:01:53.0000] <MikeSmith>
annevk: is tel:9052670719 a value URL

[04:03:26.0000] <annevk>
valid? I think so

[04:03:31.0000] <MikeSmith>
Galimatias seems to parse the 9052670719 as a port number

[04:04:07.0000] <annevk>
That seems like a bug

[04:04:27.0000] <annevk>
Maybe add it to wpt

[04:04:38.0000] <MikeSmith>
OK

[04:06:22.0000] <MikeSmith>
filed https://github.com/w3c/web-platform-tests/issues/3480 for now

[04:06:27.0000] <MikeSmith>
will add the test laster

[04:20:36.0000] <MikeSmith>
annevk: so I wi will still add a test for it if we do not have one already, but actually the bug I was seeing was caused by the document I was testing with

[04:21:04.0000] <annevk>
Ok

[04:21:05.0000] <MikeSmith>
which has href="https://tel:9052670719"

[04:21:14.0000] <annevk>
Aaah

[04:21:35.0000] <annevk>
Yeah that would parse it as port

[04:21:40.0000] <MikeSmith>
yeah

[04:22:13.0000] <MikeSmith>
anyway it still was htting a bug in galimatias in that galimatias calls parseInt on that port number part

[04:22:40.0000] <MikeSmith>
but 9052670719 is bigger than 2^32 or whatever the limit it, so java throws

[04:22:58.0000] <MikeSmith>
*limit for an int is

[05:05:23.0000] <Domenic>
zcorpan: here are my Edge 14 results...

[05:05:49.0000] <Domenic>
https://www.irccloud.com/pastebin/wp99E4RY/

[05:06:32.0000] <Domenic>
I thought it was a recent spec change that ports must be < 2^32

[05:06:46.0000] <Domenic>
I think > 2^32 is an invalid URL

[05:06:50.0000] <zcorpan>
Domenic: thanks. are you certain this is not Chrome you tested? :-)

[05:07:14.0000] <Domenic>
zcorpan: yeah quite sure.. it is a bit strange it's different than annevk's

[05:08:12.0000] <annevk>
Weird, I use

[05:08:21.0000] <zcorpan>
http://www.whatsmyua.com/

[05:08:49.0000] <zcorpan>
tkent also got "" for select.innerText in Edge per his comment in the chromium issue

[05:08:50.0000] <annevk>
BrowserStack

[05:08:56.0000] <Domenic>
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393

[05:09:42.0000] <MikeSmith>
Domenic: oh about the port number I guess I need to check the current spec then

[05:10:07.0000] <annevk>
14.14300

[05:10:52.0000] <MikeSmith>
Galimatias seems to not be maintained any longer, and so for the HTML checker I’m using a fork of it with patches I have made for other open issues that have not be fixed upstream

[05:13:20.0000] <MikeSmith>
ah OK 2^16 yeah

[05:13:55.0000] <zcorpan>
annevk: thx

[05:46:48.0000] <zcorpan>
MikeSmith: opinion on "change the content model or rp to "text"?" ? https://github.com/whatwg/html/issues/1679

[05:47:14.0000] <MikeSmith>
/me looks

[05:49:49.0000] <MikeSmith>
zcorpan: yeah I think restricting it text would help authors catch potential markup errors better

[05:50:34.0000] <MikeSmith>
I cannot think of any cases I’ve ever seen where anybody had markup in rp intentionally

[05:52:14.0000] <MikeSmith>
but I would not be surprised if the let’s-overengineer-all-ruby-things partisans have some they’ve dreamed up

[06:23:25.0000] <tobie>
Update on the WebIDL spec Bikeshed conversion for those of you interested by this: https://github.com/heycam/webidl/issues/147

[06:30:18.0000] <annevk>
once ruby is deployed enough <rp> would basically not be used

[06:30:26.0000] <annevk>
I'm surprised it got added at all

[06:34:04.0000] <zcorpan>
maybe innerText can always add ( and ) before and after <rt> and ignore <rp>

[06:38:53.0000] <annevk>
tobie: \o/

[06:39:10.0000] <annevk>
tobie: that is great news

[06:45:49.0000] <tobie>
annevk: yeah, I'm pretty excited to get people's feedback.

[06:52:50.0000] <zcorpan>
tobie: looks awesome

[06:52:56.0000] <annevk>
tobie: it looks great to me too

[06:53:17.0000] <annevk>
tobie: hopefully heycam|away can sign off on it, seems like you did all the legwork for review too by writing tools to compare the output and such

[07:03:07.0000] <tobie>
Thanks!

[07:03:45.0000] <tobie>
I need to change some of the tags so I can do an HTML diff.

[07:07:42.0000] <tobie>
The differ doesn't like <emu-…> that much.

[07:08:54.0000] <nox>
Is <dialog> supported, somewhere?

[07:09:03.0000] <nox>
Spec and WPT disagree.

[07:10:24.0000] <nox>
Spec says that dialog.close() should abort steps if there is no 'open' attribute;

[07:10:42.0000] <nox>
but WPT and Chrome both says it should throw an InvalidStateErr.

[07:10:52.0000] <nox>
So I guess the spec should change?

[07:11:08.0000] <MikeSmith>
I thought gecko supported dialog too

[07:11:10.0000] <MikeSmith>
now

[07:11:25.0000] <MikeSmith>
yay tobie

[07:11:30.0000] <nox>
Let me try on nightly.

[07:11:43.0000] <nox>
MikeSmith: Doesn't seem like it.

[07:11:53.0000] <MikeSmith>
oh

[07:12:35.0000] <MikeSmith>
hmm yeah https://bugzilla.mozilla.org/show_bug.cgi?id=840640

[07:13:51.0000] <nox>
MikeSmith: So should it throw? Why does the spec not throw but WPT and Chrome do?

[07:14:05.0000] <nox>
Independent decision on Chrome side and they are the tests' authors, maybe?

[07:16:18.0000] <Ms2ger>
Doesn't Gecko impl it?

[07:17:11.0000] <MikeSmith>
nox: seems to me it should throw

[07:17:14.0000] <MikeSmith>
rightly I mean

[07:17:36.0000] <MikeSmith>
I dunno why the spec says otherwise or when it might have been changed

[07:18:00.0000] <nox>
Ms2ger: No.

[07:18:21.0000] <MikeSmith>
but if we have a WPT test for that expects it to throw I would think that must have matched the spec at the time the test was written

[07:18:41.0000] <MikeSmith>
/me wonders who wrote the test

[07:19:27.0000] <MikeSmith>
98556c0c715f1406a2f4b5cf332e2fa4e621794a is the spec change

[07:19:28.0000] <Ms2ger>
nox, https://bugzilla.mozilla.org/show_bug.cgi?id=840640

[07:19:48.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25114

[07:19:54.0000] <Ms2ger>
Huh

[07:20:25.0000] <MikeSmith>
zcorpan: ⬆

[07:21:30.0000] <MikeSmith>
so the test needs to be fixed

[07:34:00.0000] <nox>
MikeSmith: Our Servo contributor will do that.

[07:34:21.0000] <MikeSmith>
super

[07:35:04.0000] <zcorpan>
nox: i have a fix locally

[07:35:28.0000] <nox>
zcorpan: Oh.

[07:35:47.0000] <zcorpan>
assuming it's only html/semantics/interactive-elements/the-dialog-element/dialog-close.html

[07:41:20.0000] <nox>
zcorpan: Our contributor fix should be better,

[07:41:31.0000] <nox>
zcorpan: he checked whether return value got altered or nt.

[07:41:32.0000] <nox>
not*

[07:42:11.0000] <zcorpan>
nox: ok, cool. let's close my pr then :-)

[07:42:20.0000] <nox>
:)

[07:44:10.0000] <zcorpan>
nox: do you know if there is a chromium issue filed already?

[07:44:20.0000] <nox>
zcorpan: Absolutely not.

[07:48:15.0000] <zcorpan>
filed https://bugs.chromium.org/p/chromium/issues/detail?id=638943

[08:08:46.0000] <annevk>
Wow: https://bugzilla.mozilla.org/show_bug.cgi?id=1296306

[14:06:32.0000] <zcorpan>
hmmmm. why is imageTag here, or why does it exist at all? https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/html/HTMLElement.cpp?sq=package:chromium&dr=CSs&rcl=1471276009&l=157

[14:31:48.0000] <KevinMarks>
Gah. Why does subresource integrity use base64 encoding, which is full of non url-safe characters?

[14:32:47.0000] <KevinMarks>
If I try to pass the hash via a url I'm in escaping hell.

[14:57:10.0000] <terinjokes>
KevinMarks: it's my favorite thing about the JSON Web Token article on Wikipedia. "The tokens are designed to be compact, URL-safe and usable especially in web browser single sign-on (SSO) context."

[14:57:30.0000] <terinjokes>
except then they use Base 64

[14:59:24.0000] <KevinMarks>
I've standardised on newbase60 for my own things, so was lulled into a false sense of security.

[15:02:22.0000] <KevinMarks>
Looking at https://github.com/hash-uri/hash-uri/blob/master/README.md but that has slashes in too

[15:07:14.0000] <terinjokes>
i saw something recently where they decided to use base50 or something

[15:54:00.0000] <Domenic>
cdumez continues to be the best https://github.com/WebKit/webkit/commit/f203fd07772753d2f73dcce865664a943dc6e4ff

[15:58:01.0000] <KevinMarks>
Also saw x-object-meta-sha1base36: 1d91dx0894wjewukeyxu56os5uhx4ph

[15:58:25.0000] <KevinMarks>
Which is a new one on me


2016-08-19
[22:09:25.0000] <annevk>
Domenic: wow, that is so cool

[22:20:05.0000] <annevk>
zcorpan: I think Chrome might support it outside the parser

[00:11:35.0000] <MikeSmith>
FYI http://csswg-test.org/ exists now

[00:11:44.0000] <MikeSmith>
for people who like such things

[00:12:49.0000] <MikeSmith>
serves tests from https://github.com/w3c/csswg-test/ using wptserve in the same manner as https://w3c-test.org/ does for https://github.com/w3c/web-platform-tests/

[00:14:01.0000] <MikeSmith>
and going forward PR branches for new https://github.com/w3c/csswg-test PRs  will show up in http://csswg-test.org/submissions/

[00:15:06.0000] <MikeSmith>
if you notice any problems tell gsnedders because he is the owner :)

[00:16:11.0000] <MikeSmith>
and to be clear as I understand at least this is a temporary thing until such as the grand merge of the CSS tests into WPT finally happens

[00:20:42.0000] <annevk>
mkwst: so Referrer-Policy doesn't use JSON values afaict

[00:20:57.0000] <mkwst>
annevk: Hrm? The header?

[00:20:59.0000] <annevk>
mkwst: per ABNF accepting something like "origin" as value would be broken

[00:21:02.0000] <annevk>
mkwst: yeah

[00:21:31.0000] <mkwst>
Hrm. That's not what I thought they were doing.

[00:21:56.0000] <annevk>
mkwst: perhaps folks mistake "x" for some kind of quoted string production (which also allows JSON-incompatible values so don't use that either)

[00:22:17.0000] <annevk>
mkwst: so maybe the impl is correct, but the specification is definitely wrong

[00:22:23.0000] <mkwst>
I thought they agreed with the notion that quoting things would be forward compatible with a more robust structure in the future.

[00:22:31.0000] <mkwst>
The examples in the spec are also unquoted. Hrm.

[00:22:33.0000] <annevk>
mkwst: and if the impl is correct and the specification is wrong, then the specification for <meta name=referrer> is also wrong

[00:22:37.0000] <mkwst>
I'll ping Emily when she wakes up. :)

[00:22:49.0000] <annevk>
mkwst: since <meta name=referrer> is defined in terms of the header...

[00:23:09.0000] <annevk>
(I'm not sure why we're doing that)

[00:23:55.0000] <mkwst>
No, looks like Chrome's (experimental) implementation doesn't have quotes.

[00:28:08.0000] <mkwst>
Filed https://github.com/w3c/webappsec-referrer-policy/issues/65

[00:32:15.0000] <annevk>
Not sure I agree with "we seem to be going" but shrug

[02:11:33.0000] <rniwa>
annevk: yt?

[02:12:15.0000] <rniwa>
Domenic: yt?

[02:13:42.0000] <annevk>
rniwa: yup

[02:13:46.0000] <rniwa>
annevk: hi

[02:14:00.0000] <rniwa>
annevk: so I was looking at document.open with respect to custom elements

[02:14:11.0000] <rniwa>
annevk: and I realized that we don't create new window object at all

[02:14:14.0000] <rniwa>
annevk: neither does Chrome

[02:14:32.0000] <rniwa>
annevk: so I'm not sure the whole section about Call the JavaScript InitializeHostDefinedRealm()

[02:14:49.0000] <rniwa>
and then replacing all singleton objects is needed at all for compat

[02:14:57.0000] <annevk>
interesting

[02:15:00.0000] <rniwa>
annevk: https://trac.webkit.org/browser/trunk/Source/WebCore/dom/Document.cpp#L2557

[02:15:02.0000] <annevk>
so what happens instead?

[02:15:08.0000] <rniwa>
annevk: we basically only setup the parser

[02:15:17.0000] <rniwa>
annevk: and don't touch global object at all

[02:15:29.0000] <rniwa>
annevk: we just go ahead & use the same global object

[02:15:38.0000] <annevk>
rniwa: that's worth filing a bug on

[02:15:51.0000] <rniwa>
annevk: in fact, it's possible that some web content outside might be dependent on this behavior

[02:16:00.0000] <annevk>
I don't really recall any discussion about that, but it's mostly been Hixie territory

[02:16:03.0000] <rniwa>
annevk: because all global variables, etc... would go away.

[02:17:44.0000] <annevk>
that looks so much simpler than the spec

[02:18:02.0000] <rniwa>
annevk: it is!

[02:18:18.0000] <rniwa>
annevk: given that we've been shipping it this way for such a long time, it's hard to believe it's not Web compatible

[02:18:26.0000] <annevk>
rniwa: why is implicitOpen() its own function?

[02:18:28.0000] <rniwa>
I mean... I would be really surprised if it weren't

[02:18:41.0000] <annevk>
rniwa: compatible enough anyway

[02:18:45.0000] <rniwa>
annevk: yeah

[02:18:57.0000] <rniwa>
annevk: worse yet, it might be that some content depends on our behavior

[02:19:29.0000] <rniwa>
as in... it's easier to depend on your global being the same than it changing after document.open

[02:20:31.0000] <annevk>
Yeah, it's such a massive simplification too

[02:21:07.0000] <annevk>
This means that a Document is only ever associated with one Window

[02:21:20.0000] <rniwa>
annevk: right, which is much saner model to deal with

[02:21:29.0000] <annevk>
Uhuh

[02:21:41.0000] <annevk>
Please file an issue? I'm curious what bz has to say about it

[02:24:23.0000] <rniwa>
annevk: there's some interesting comment at: https://trac.webkit.org/browser/trunk/Source/WebCore/bindings/js/JSHTMLDocumentCustom.cpp#L171

[02:24:42.0000] <rniwa>
but it's probably still a lot simpler than whatever we're doing in the current spec.

[02:27:09.0000] <rniwa>
annevk: https://github.com/whatwg/html/issues/1698

[02:27:34.0000] <annevk>
ta

[02:27:46.0000] <rniwa>
annevk: changing the spec would make my life much easier

[02:28:07.0000] <rniwa>
there's no way I'm gonna add this crazy feature just to support an edge case in custom elements LOL

[02:28:49.0000] <rniwa>
so it's not like it's gonna make my life any harder

[02:28:50.0000] <rniwa>
but...

[02:29:23.0000] <rniwa>
not having to worry about this case in the future would be nice.

[02:29:40.0000] <annevk>
rniwa: yeah, I wonder what that JSHTMLDocument thing is about

[02:29:46.0000] <annevk>
rniwa: that's a little harder to read

[02:30:27.0000] <annevk>
rniwa: does it create a new wrapper around the global?

[02:31:00.0000] <rniwa>
annevk: it was added by https://trac.webkit.org/changeset/34506

[02:31:26.0000] <rniwa>
annevk: no, I think it's about changing the security origin

[02:32:27.0000] <rniwa>
annevk: so like... we reset the security origin to that of the script which invoked doucment.open/write

[02:32:55.0000] <rniwa>
annevk: even if its security origin initially belonged to some other window of the same origin

[02:32:58.0000] <annevk>
rniwa: ah okay, in the spec that might be a side effect of changing the URL of the document

[02:33:11.0000] <annevk>
(spec is not great...)

[02:33:34.0000] <rniwa>
annevk: yeah, I'm not too familiar with this area of the code to confirm that but that sounds right

[02:34:19.0000] <rniwa>
anyway, I hope we can change it to WebKit/Blink way

[02:34:36.0000] <annevk>
same

[02:36:25.0000] <rniwa>
annevk: somewhat relatedly, I found a hilarious bug in WebKit & Blink: https://bugs.webkit.org/show_bug.cgi?id=160952

[02:36:35.0000] <rniwa>
annevk: because we create wrappers lazily LOL

[02:37:08.0000] <rniwa>
/me should somehow let Blink guys know about this bug

[02:37:29.0000] <annevk>
rniwa: see also the discussion in https://www.w3.org/Bugs/Public/show_bug.cgi?id=20567

[02:38:28.0000] <annevk>
rniwa: WebKit can change the wrapper from one global to another due to GC

[02:38:34.0000] <annevk>
rniwa: which is rather weird

[02:38:58.0000] <rniwa>
annevk: I think we've fixed that

[02:39:05.0000] <annevk>
ah

[02:39:22.0000] <rniwa>
annevk: so I think this is one the last ways by which we can screw things up

[02:39:37.0000] <rniwa>
annevk: although... I was recently checking some stats on how often nodes get adopted

[02:39:46.0000] <annevk>
rniwa: do you end up just leaking the global or do you do the Gecko thing where you change the [[Prototype]]?

[02:39:48.0000] <rniwa>
and the answer was basically that almost never

[02:39:57.0000] <annevk>
huh

[02:40:01.0000] <rniwa>
annevk: no, we just keep the original global

[02:40:22.0000] <annevk>
Bobby claimed something about 2.5 globals being leaked on average based on his stats

[02:40:31.0000] <annevk>
something is wrong

[02:40:35.0000] <zcorpan>
annevk: in a search I only see it used by HTMLTreeBuilder.cpp and HTMLElement.cpp (by innerText), so i suppose it's fine once innerText is fixed to not throw

[02:40:48.0000] <zcorpan>
imageTag that is

[02:41:03.0000] <rniwa>
annevk: that's strange indeed

[02:41:11.0000] <annevk>
zcorpan: oh, maybe part of it already got fixed when I noticed the first time

[02:41:52.0000] <rniwa>
annevk: Gmail which had the highest rate of adoption adopted 1299 nodes out of 19200 nodes for example

[02:42:12.0000] <rniwa>
annevk: the next highest one was CNN, presumably some ads network code, which adopted 40 out of 59200 nodes

[02:42:47.0000] <rniwa>
annevk: no other websites I looked at adopted any node.

[02:42:58.0000] <annevk>
zcorpan: seems that Edge still returns an HTMLImageElement for document.createElement("image")

[02:43:22.0000] <rniwa>
annevk: my research wasn't extensive but it seems like adopting node is not a common occurrence these days.

[02:43:36.0000] <annevk>
rniwa: I guess if Gmail does adoption and CNN and they don't clean up you could have leaks there

[02:43:49.0000] <rniwa>
annevk: they totally can.

[02:43:52.0000] <annevk>
rniwa: which would be avoided by swizzling the prototype

[02:44:01.0000] <rniwa>
annevk: true

[02:44:22.0000] <annevk>
Gmail doing it would definitely explain most users seeing leaks

[02:44:34.0000] <annevk>
(well, they would see leaks if we didn't swizzle)

[02:44:37.0000] <rniwa>
annevk: yeah, especially it's a pinned tab or something

[02:45:10.0000] <rniwa>
annevk: although given WebKit/Blink get away with it, I'd be surprised if they were leaking every document

[02:45:32.0000] <zcorpan>
annevk: ok. no test for it in wpt AFAICT. i can make one and file an issue

[02:45:51.0000] <annevk>
rniwa: yeah, WebKit/Blink not bothering is a rather strong argument for not complicating the standard

[02:46:12.0000] <annevk>
zcorpan: \o/

[02:46:18.0000] <annevk>
/me goes to drink some tea

[02:47:21.0000] <zcorpan>
i just had a cup of first cup of tea this year i believe, incidentally

[02:47:43.0000] <zcorpan>
s/a cup of/my/

[02:48:18.0000] <zcorpan>
or at least first in several months

[03:03:02.0000] <zcorpan>
oh it seems to be tested by html/semantics/interfaces.html

[03:32:58.0000] <zcorpan>
(filed https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8545675/ )

[04:40:29.0000] <annevk>
mkwst: would still appreciate a comment on https://www.w3.org/Bugs/Public/show_bug.cgi?id=25529 about the CSP thing

[04:40:49.0000] <annevk>
mkwst: in particular whether it should maybe run when an element is cloned

[04:41:07.0000] <annevk>
mkwst: or otherwise if we really want to avoid that, we should figure out a way to make that happen in DOM

[04:54:37.0000] <zcorpan>
first time since vacation: No new notifications.

[04:56:33.0000] <zcorpan>
but now i have a few dozen open tabs instead :-)

[04:57:21.0000] <Ms2ger>
Now, to move the dozen tabs to a todo list

[04:58:24.0000] <jgraham>
And the todo list to the bin?

[05:23:47.0000] <zcorpan>
one has roundabout ways to mark all as read

[05:36:16.0000] <annevk>
smaug____: https://www.w3.org/Bugs/Public/show_bug.cgi?id=28097 maybe something you can help with? I'm still a bit lost

[05:36:29.0000] <annevk>
smaug____: that is, range algorithms continue to confuse me at times

[05:36:51.0000] <annevk>
(ayg wrote most/all of that)

[05:39:29.0000] <smaug____>
in middle of something else

[05:39:39.0000] <smaug____>
/me would need to read the old Range spec

[05:42:00.0000] <annevk>
smaug____: the old Range spec has no notion of a DocumentFragment potentially having a host

[05:42:37.0000] <smaug____>
ah, right

[05:42:42.0000] <smaug____>
this was about 'host*

[05:43:43.0000] <smaug____>
yeah, sorry, my mind is in memory management and trying to add hacks to fix leaks which web pages like twitter cause

[05:44:38.0000] <annevk>
hehe

[05:44:46.0000] <annevk>
I can bother you some other time

[05:52:23.0000] <smaug____>
FWIW, iframes in twitter add event listener to the window.parent and then the iframe is removed from dom

[05:52:30.0000] <smaug____>
and event listener isn't used for anything

[05:52:43.0000] <smaug____>
but parent keeps the event listener and the global related to it alive

[05:55:08.0000] <smaug____>
this is as bad leak as what Google reader had

[05:55:38.0000] <smaug____>
though, I think we can optimize this better

[05:57:08.0000] <annevk>
wow

[05:57:24.0000] <annevk>
multiple globals, not even once

[08:39:58.0000] <tobie>
TabAtkins: what's the magic incantation to have syntax highlighting of IDL without the auto-linking stuff and without making the code an example?

[08:40:23.0000] <tobie>
TabAtkins: data-no-idl doesn't seem to be what I'm looking for.

[08:51:46.0000] <tobie>
TabAtkins: follow-up question: the WebIDL spec wants to be able to highlight parts of the IDL. The WebIDL parser removes any inline element within the code blocks. What's my option, here?

[09:09:09.0000] <smaug____>
Domenic: do you happen to know what kind of memory leak hunting blink devs are doing

[09:09:14.0000] <smaug____>
I mean cases where pages are leaking

[09:09:20.0000] <smaug____>
(browser engine leaks are different things. So, not talking about CustomEvent or such which still leak in blink, IIRC)

[09:25:47.0000] <tobie>
TabAtkins: summarized my current issue here: https://github.com/tobie/webidl/issues/27#issuecomment-241064566

[09:26:52.0000] <Domenic>
smaug____: I don't really know, sorry.

[10:44:09.0000] <TabAtkins>
mkwst: That's no longer a behavior of Bikeshed, but is still used by Shepherd for non-Bikeshed documents.  To override it, give a data-lt. - that wins over use of title in the spider.

[10:45:19.0000] <TabAtkins>
zcorpan: Given the number of specs still on Anolis (not many), and the amount of non-trivial work to do to make the spec reasonably idiomatic Bikeshed, I'm not really willing to put effort in.  That time would be better spent just converting the remaining specs by hand.

[10:51:40.0000] <Domenic>
I think we've seen by-hand fail pretty badly so far... I wouldn't be comfortable with it going forward.

[11:16:24.0000] <tobie>
I wonder how much of the JS pipeline I wrote could be refurbished to help with a generic Anolis -> Bikeshed conversion tool.

[11:18:14.0000] <tobie>
And I wonder how much XSLT one would have to write to turn Anolis into something that pipeline could handle.

[14:28:58.0000] <smaug____>
does anyone have a gut feeling whether using eventtarget.onfoo manually is happening commonly. I mean something like window.onclick(new MouseEvent("click"));

[14:29:06.0000] <smaug____>
(and not via dispatchEvent)

[14:34:21.0000] <caitp>
smaug____: I wouldn't be surprised if unit tests relied on it a lot

[14:34:32.0000] <smaug____>
true

[14:34:47.0000] <smaug____>
I'm thinking about the case with another global sets onfoo

[14:34:54.0000] <smaug____>
and then that global is "destroyed"

[14:35:12.0000] <smaug____>
like, iframe's contentWindow setting onfoo in parent

[15:03:23.0000] <Domenic>
wait what

[15:03:25.0000] <Domenic>
you can do that

[15:03:29.0000] <Domenic>
oh i see

[15:29:22.0000] <tobie>
TabAtkins: any idea why the following would fatal Bikeshed's IDL parser:

[15:29:43.0000] <tobie>
https://www.irccloud.com/pastebin/b1ZenycN/

[15:31:53.0000] <TabAtkins>
tobie: It doesn't.

[15:33:53.0000] <tobie>
TabAtkins: !?

[15:34:09.0000] <tobie>
https://www.irccloud.com/pastebin/3ZOGt051/

[15:34:15.0000] <TabAtkins>
You've maybe got something else interfering, because that snippet, pasted into my test file, works fine. ^_^

[15:34:34.0000] <tobie>
TabAtkins: Mind giving the above a run?

[15:34:50.0000] <TabAtkins>
also just fine. What's the error you're getting?

[15:35:06.0000] <tobie>
FATAL ERROR: IDL SYNTAX ERROR LINE: 2 - skipped: "object createColor(double v1, double v2, double v3, optional double alpha)"

[15:35:55.0000] <TabAtkins>
that's weird then. definitely works just fine in my local. :/

[15:36:03.0000] <TabAtkins>
try uploading that to the server versions?

[15:38:57.0000] <tobie>
TabAtkins: works

[15:39:04.0000] <tobie>
TabAtkins: o_O

[15:39:13.0000] <TabAtkins>
Suggests that your bikeshed version is old?

[15:39:41.0000] <TabAtkins>
`git log` and see what the latest patch's date is?

[15:43:00.0000] <tobie>
Must have ran "cmd + x" instead of "cmd + c" on a bikeshed src file and saved the file at some point.

[15:43:09.0000] <tobie>
/me facepalms.

[15:43:46.0000] <tobie>
https://www.irccloud.com/pastebin/NJzEdPsD/

[15:44:40.0000] <tobie>
Glad I only wasted 10 minutes of your time with this and not a whole day of mine.

[15:44:52.0000] <tobie>
TabAtkins: Sorry. :-/

[15:45:12.0000] <TabAtkins>
You didn't waste almost any of my time, no problem. ^_^

[15:50:37.0000] <rniwa>
Domenic: are we invoking custom element callbacks when it's adopted into a template element's "inert" document?

[15:51:06.0000] <jyasskin>
TabAtkins / Domenic: https://html.spec.whatwg.org/multipage/webappapis.html#concept-settings-object-global has a data-dfn-for with a line break in it, which appears to be confusing Shepherd. I'm not sure if that's a bug in HTML or Shepherd.

[15:52:12.0000] <TabAtkins>
Hmm, must be a shepherd bug. What confusion is there? Is it dropping the text after the linebreak or something?

[15:53:01.0000] <jyasskin>
It's finding two different definitions, one with a 'for' of the text before the linebreak, and one with the text after.

[15:53:23.0000] <jyasskin>
`bikeshed refs --text 'global object'` shows it.

[16:04:57.0000] <TabAtkins>
Ah yeah, that's def a shepherd bug. I'll go report it.

[16:18:15.0000] <TabAtkins>
jyasskin: Okay, was a Bikeshed bug actually. Both Shepherd and Bikeshed are going to start normalizing whitespace to avoid this problem in the future.

[16:18:26.0000] <jyasskin>
TabAtkins: Thanks!


2016-08-20
[18:42:18.0000] <Domenic_>
rniwa: we should; it's the same as any other document...

[18:42:52.0000] <rniwa>
Domenic: okay

[18:56:01.0000] <rniwa>
Domenic: btw, we should rename CustomElementsRegistry to CustomElementRegistry

[18:56:16.0000] <rniwa>
Domenic: we don't use plural for the name of a thing in a collection of things

[18:57:02.0000] <rniwa>
Domenic: e.g. NodeList,  StyleSheetList, CSSRuleList, etc...

[19:01:31.0000] <Domenic>
rniwa: seems reasonable; file an issue and i can work on it after the in-flight PRs land

[19:01:41.0000] <rniwa>
Domenic: sure

[05:21:06.0000] <nox>
Is there any WebIDL interface that actually wants a RegExp?

[10:12:10.0000] <Domenic>
no

[10:13:39.0000] <Domenic>
nox: not in Chromium at least https://cs.chromium.org/search/?q=RegExp+file:%5C.idl&sq=package:chromium&type=cs

[10:20:12.0000] <nox>
Domenic: Should we kill it from the WebIDL spec if it's not actually used?

[10:20:25.0000] <Domenic>
nox: I filed an issue to do so and CCed you :)

[10:20:50.0000] <nox>
Domenic: Hah, thanks. :)


2016-08-21
[20:30:05.0000] <MikeSmith>
Krinkle: when I look at *abstract*.xml files in https://dumps.wikimedia.org why do some langs have multiple *abstract*.xml files?

[20:30:32.0000] <MikeSmith>
Krinkle: for example at https://dumps.wikimedia.org/zhwiki/latest/ there are both zhwiki-latest-abstract-zh-cn.xml and zhwiki-latest-abstract-zh-cn1.xml (*2.xml etc)?

[05:53:10.0000] <hsivonen>
I'm again wondering if we should make the sentence "The name of an encoding is also one of its labels, except in the case of the replacement encoding whose name is not one of its labels." unnecessary.

[05:53:25.0000] <hsivonen>
i.e. make "replacement" a label for the replacement encoding.

[06:31:00.0000] <annevk>
hsivonen: could file an issue and see what Chrome folks say

[06:31:21.0000] <annevk>
hsivonen: and WebKit now they implement the labels


2016-08-22
[19:09:14.0000] <DDK>
ILL to jit

[19:10:27.0000] <DDK>
#Syler ready

[19:10:37.0000] <DDK>
Sync now

[23:19:40.0000] <annevk>
hober: happy early b-day 🎂🎉🍻 (still a tad early here for that last one, but you should be alright and prolly are 😊)

[23:31:42.0000] <MikeSmith>
heh

[23:31:58.0000] <terinjokes>
lol

[23:31:58.0000] <MikeSmith>
we need a beer emoji that is a proper pint glass

[23:32:19.0000] <annevk>
Isn't that the other one perhaps? 🍺

[23:33:09.0000] <annevk>
But they all take after the font-size so end up rather small

[23:33:33.0000] <MikeSmith>
hmm that one still has a handle (on MacOS at least)

[23:33:48.0000] <MikeSmith>
don’t need no handle on my beer glass

[23:34:10.0000] <MikeSmith>
that’s training wheels on a bicycle

[23:34:48.0000] <MikeSmith>
if I drop my pint for lack of a handle, then I drop my pint

[23:35:02.0000] <MikeSmith>
and then I get another

[23:35:17.0000] <annevk>
haha

[23:35:24.0000] <terinjokes>
i would say cry me a river, but there's no river emoji

[23:35:29.0000] <annevk>
I found a way to make them bigger

[23:35:31.0000] <annevk>
data:text/html;charset=utf-8,<p style=font-size:15cm>%F0%9F%8D%BA

[23:35:59.0000] <MikeSmith>
oh wow

[23:36:17.0000] <MikeSmith>
good on, Firefox

[23:36:19.0000] <MikeSmith>
at least

[23:36:27.0000] <MikeSmith>
no love for that in Chrome tho

[23:36:38.0000] <annevk>
oh, weird

[23:36:43.0000] <MikeSmith>
anyway happy birthday indeed hober

[23:36:50.0000] <annevk>
works fine in Safari

[23:37:09.0000] <annevk>
lots of pixels to be seen though

[23:37:13.0000] <MikeSmith>
/me plays Forever Young for hober (the original Bob Dylan song)

[23:37:19.0000] <annevk>
and I don't even have a retina 27 inch

[23:38:15.0000] <MikeSmith>
heh

[01:29:34.0000] <zcorpan>
annevk: hober: wat?

[01:30:02.0000] <annevk>
zcorpan: ?

[01:30:21.0000] <zcorpan>
https://github.com/whatwg/dom/commit/f39eecee3d78913f47bf7680f7b36e003290a6c5

[01:30:44.0000] <annevk>
zcorpan: seems like you missed https://twitter.com/hober/status/766746215966838784

[01:32:08.0000] <zcorpan>
thanks

[01:36:53.0000] <zcorpan>
hober: congrats and good luck!

[03:51:09.0000] <smaug____>
oh, forgot to ask

[03:51:14.0000] <smaug____>
anyone going to tpac this year?

[03:52:23.0000] <jgraham>
smaug____: Yeah, seems so

[03:52:31.0000] <jgraham>
hober: Awesome!

[04:38:32.0000] <MikeSmith>
smaug____: lots of us going

[04:38:35.0000] <MikeSmith>
hope you are too

[04:47:50.0000] <annevk>
foolip: we could also list CDATA before Text in switch statements

[04:48:21.0000] <annevk>
foolip: maybe that is good enough until branding is available

[04:48:42.0000] <smaug____>
MikeSmith: yeah, just thinking. Looks like I'll need to be in the Bay area the week before.

[04:48:42.0000] <annevk>
foolip: even with branding you likely need that

[04:48:52.0000] <smaug____>
MikeSmith: but most probably coming

[04:49:00.0000] <smaug____>
or going

[04:49:32.0000] <annevk>
smaug____: yay

[05:09:22.0000] <annevk>
smaug____: I think I'll close the adopt memory leak prevention bug and open an issue for it on GitHub with a summary of the situation and try to get some more input from Safari/Chrome/Edge

[05:10:07.0000] <annevk>
smaug____: but with Edge saying they don't want it, rniwa telling me the other day Safari doesn't want it, and Chrome having said before they don't want it, I'm not too hopeful

[05:22:40.0000] <JakeA>
annevk: if I'm reading the specs correctly, it seems that jakearchibald.github.io would be able to provide a PUSH_PROMISE for a resource on www.github.com

[05:22:47.0000] <JakeA>
Since they use the same certificate

[05:23:45.0000] <JakeA>
I don't have control over the pushes jakearchibald.github.io can do, so it isn't a problem here

[05:24:16.0000] <JakeA>
But it feels surprising in terms of the origin model

[05:26:06.0000] <JakeA>
This could be a problem for *.herokuapp.com

[05:41:42.0000] <annevk>
JakeA: connection coalescing is scary

[05:42:12.0000] <annevk>
JakeA: however, jakearchibald.github.io can also get www.github.com resources cached

[05:42:28.0000] <annevk>
JakeA: it wouldn't surprise me however if connection coalescing leads to a number of attacks

[05:43:04.0000] <annevk>
JakeA: Alt-Svc is similarly tricky

[05:43:25.0000] <annevk>
JakeA: I argued a bit about it in Mozilla's Bugzilla and blink-dev, but nobody cared

[05:43:40.0000] <annevk>
JakeA: "if they share the certificate they already share authority"

[05:43:54.0000] <JakeA>
annevk: take https://jakearchibald.com/. I use cloudflare so I'm using the same cert as http://eurocashmarket.com/ for whatever reason

[05:44:07.0000] <annevk>
JakeA: that doesn't seem true at all, but it's hard to argue with these people

[05:44:42.0000] <annevk>
JakeA: having said that, the PUSH_PROMISE is tied to a request-response stream

[05:44:58.0000] <JakeA>
annevk: does this mean I could (if cloudflare forwarded PUSH_PROMISE) push a request to eurocashmarket.com & a response of my choosing?

[05:45:01.0000] <annevk>
JakeA: wouldn't a simple mitigation there be a same-origin requirement on the PUSH_PROMISE?

[05:45:10.0000] <JakeA>
absolutely

[05:45:42.0000] <JakeA>
I'm still keen on it being linked to the requesting fetch group

[05:45:53.0000] <annevk>
JakeA: yeah maybe that's an attack indeed

[05:46:20.0000] <annevk>
JakeA: the whole idea that same cert means access to the same application is so flawed, but I found it really hard to make that point with mcmanus et al

[05:46:38.0000] <annevk>
JakeA: they just say "well, server fault"

[05:48:22.0000] <JakeA>
annevk: hmm, all it takes is one of these wildcard-certing hosts to enable PUSH_PROMISE without filtering and boom

[05:48:29.0000] <JakeA>
it's probably happening somewhere already

[05:48:49.0000] <annevk>
JakeA: so, write a gist / blogpost and we float it around?

[05:49:56.0000] <JakeA>
annevk: shall do. Already been asked to write a doc on this stuff internally. Will share

[05:50:35.0000] <annevk>
JakeA: sleevi will feel justified since I think he tweeted already that connection coalescing will be trouble

[05:51:03.0000] <annevk>
JakeA: I'm surprised nobody noticed this thus far

[05:51:28.0000] <annevk>
JakeA: but maybe that's because they consider this kind of thing to be fine :/

[05:51:28.0000] <JakeA>
annevk: maybe they did & like you say, thought "meh server's fault"

[05:51:34.0000] <JakeA>
heh

[05:57:07.0000] <annevk>
tyoshino: https://github.com/yutakahirano/fetch-with-streams/issues/66#issuecomment-241393392 is really good

[06:05:35.0000] <JakeA>
annevk: this isn't just a problem with coalescing, as I can give my pushed response some nice max-age headers & it'll be used in other connections

[06:08:00.0000] <annevk>
JakeA: very true, though maybe with the current client architecture that's never a problem?

[06:08:31.0000] <annevk>
JakeA: seems like it would be a big problem though

[06:08:59.0000] <JakeA>
annevk: not sure how. I can push a response for another origin, then I can request it with <img> to get it in the http cache

[06:09:27.0000] <annevk>
JakeA: yeah, putting it in the cache is an attack vector

[06:09:45.0000] <annevk>
JakeA: if it's used for <iframe> you've hit a homerun

[06:10:01.0000] <annevk>
JakeA: executing arbitrary code for an origin of choice

[06:10:26.0000] <JakeA>
annevk: and while matching is totally unspecified, nothing's saying you can't do that

[06:10:32.0000] <JakeA>
The answer is to make this same-origin

[06:11:52.0000] <annevk>
Yeah

[06:11:54.0000] <JakeA>
Or allow pushing for *any* origin, but tie the request/response to the document. Similar to how service worker lets you lie to yourself

[06:12:27.0000] <JakeA>
But that means it can never go in the http cache

[06:14:30.0000] <annevk>
JakeA: last sentence of https://tools.ietf.org/html/rfc7540#section-10.4 does suggest it's tied to connection coalescing

[06:14:45.0000] <annevk>
JakeA: so maybe it was considered after all?

[06:15:48.0000] <annevk>
JakeA: seems very sketchy though

[06:17:35.0000] <JakeA>
annevk: I think I'm missing something. The cert on https://jakearchibald.com/ is also the cert for http://eurocashmarket.com/. That means I could push a response for eurocash, then request it as part of the same connection which would put it in the http cache, since I'm authoritative for eurocash. Then later, in a new connection, eurocash makes a request to

[06:17:36.0000] <JakeA>
its origin, and gets my response from the http cache

[06:18:03.0000] <annevk>
yeah

[06:18:26.0000] <annevk>
what I meant was that the attack of just putting arbitrary stuff for *any* origin is outlawed

[06:18:36.0000] <annevk>
so the attack is limited to connection coalescing

[06:18:55.0000] <annevk>
and arguably the server would violate that 10.4 section

[06:19:34.0000] <JakeA>
ahh I see

[06:19:35.0000] <JakeA>
yeah

[06:20:01.0000] <JakeA>
"that server MUST ensure that tenants are not able to push" - so they'd say it's the server's fault

[08:42:44.0000] <zcorpan>
annevk: hmmm. is there a way to manually update https://resources.whatwg.org/file-issue.js ? it seems it didn't get the latest commit, i still get if (queryParamIndex != -1)) {

[08:47:52.0000] <zcorpan>
annevk: nm, fixed it with another commit :-)

[08:51:14.0000] <annevk>
JakeA: if we ever expose an API around push this is something we need to address

[08:52:01.0000] <annevk>
JakeA: seems Chrome might limit connections to same eTLD+1, too?

[08:52:19.0000] <JakeA>
annevk: this all goes away if we can associate pushes with clients or at least origins

[09:01:49.0000] <annevk>
JakeA: they are associated with a request, so you should have some of that

[09:02:53.0000] <JakeA>
annevk: given that CloudFlare are turning link rel=preloads into PUSH_PROMISE, it'd be great if they behaved somewhat the same

[09:03:04.0000] <JakeA>
and it seems like preload is tied to the lifetime of the document

[09:03:05.0000] <JakeA>
although that's handwaved right now

[09:03:37.0000] <annevk>
JakeA: yeah we should define that, I wish igrigorik could find someone to do it

[09:03:51.0000] <annevk>
I guess otherwise I should 😞

[09:05:30.0000] <JakeA>
annevk: I gave it half a shot at https://github.com/whatwg/fetch/issues/354#issuecomment-237508188

[09:05:33.0000] <JakeA>
Still hand-waving though

[09:05:57.0000] <annevk>
True

[09:06:05.0000] <annevk>
I should review that

[09:57:39.0000] <annevk>
JakeA: yeah, too much hand-waving I guess, though maybe a useful starting point

[09:58:04.0000] <annevk>
JakeA: one thing I should probably resolve first is some ambiguity around the HTTP cache, waiting on mnot for that in part

[09:58:33.0000] <annevk>
JakeA: the other thing missing from that is actually putting things in the preload cache

[09:58:48.0000] <annevk>
JakeA: as for CloudFlare, what they are doing doesn't seem super great

[09:59:07.0000] <annevk>
JakeA: they also did not have numbers whether those pushes were actually helping

[09:59:35.0000] <annevk>
JakeA: and since the browser can't yet inform the server of what it has in the cache, it's likely a lot of those pushes are in vain

[10:00:03.0000] <JakeA>
annevk: the browser can RST_STREAM though

[10:01:13.0000] <annevk>
JakeA: sure, but that's a lot of chattiness for what amounts to nothing

[10:01:39.0000] <annevk>
JakeA: but I guess I haven't seen numbers on how wasteful that would be so maybe it's okay

[10:02:01.0000] <JakeA>
annevk: in terms of storage I had 'On document-insertion <link rel="preload"> creates an entry in the fetch group's "preload cache" containing the request and a promise for the response' - the intent is to make it as unracey as possible

[10:03:34.0000] <annevk>
JakeA: ah okay

[11:04:29.0000] <JakeA>
annevk: I wonder if I could H2 push a CORS preflight response for myself

[11:04:38.0000] <JakeA>
from another origin on the same authority


2016-08-23
[22:03:52.0000] <annevk>
JakeA: I guess… Seems like that might depend on the UA too if it actually reuses the connection and whether the push is bound to the connection lifetime

[01:50:30.0000] <annevk>
TabAtkins: sorry for the continued back-and-forth, but would still appreciate a reply to https://github.com/whatwg/dom/issues/185#issuecomment-240644834

[01:50:33.0000] <annevk>
TabAtkins: ta!

[01:52:46.0000] <JakeA>
https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API lists service worker as "experimental" although it's been in stable releases of two engines for some time now. Can this be removed?

[01:53:53.0000] <annevk>
JakeA: I suspect so

[01:54:11.0000] <annevk>
JakeA: I don't think they have consistent policies regarding that

[01:54:17.0000] <JakeA>
ta

[03:05:59.0000] <smaug____>
lovely, w3c has kicked me out from www-dom

[03:07:24.0000] <gsnedders>
smaug____: because of affiliation change?

[03:07:30.0000] <smaug____>
no

[03:07:42.0000] <gsnedders>
wait no

[03:07:54.0000] <annevk>
smaug____: hmm different email address?

[03:07:55.0000] <gsnedders>
I'm mixing you and Jonas Sicking up for some reason, depsite looking nothing alike.

[03:07:56.0000] <smaug____>
as far as I know I've been with Mozilla well over 10 years ;)

[03:08:16.0000] <gsnedders>
/me blames being ill and slightly feverish

[03:09:16.0000] <smaug____>
annevk: nope. I think this is the same nonsense what kicked me out from webapps mailing list last year

[03:09:29.0000] <smaug____>
annevk: so, I think I haven't got any www-dom emails since last autumn

[03:09:50.0000] <smaug____>
annevk: and I assume all the members of the WG were kicked out around that time

[03:09:59.0000] <smaug____>
MikeSmith: ^

[03:10:12.0000] <smaug____>
er

[03:10:16.0000] <smaug____>
annevk: er, you're right

[03:10:27.0000] <smaug____>
aha, yes, mozilla.com email

[03:10:57.0000] <smaug____>
too many email accounts

[03:12:15.0000] <smaug____>
foolip: do you think you could add deprecation message about mutation events to blink?

[03:14:04.0000] <annevk>
I think Blink has a policy now that they only add those warnings if they can promise a release they'll remove the feature by

[03:14:23.0000] <annevk>
Presumably they no longer believe in long term deprecation

[03:18:37.0000] <smaug____>
sad

[03:19:05.0000] <smaug____>
and Edge folks just do whatever blink folks do

[03:44:33.0000] <MikeSmith>
smaug____: you need me to do something?

[03:45:47.0000] <smaug____>
MikeSmith: carefulness. I was being stupid. :)

[03:45:51.0000] <smaug____>
so, no

[03:45:54.0000] <MikeSmith>
ok

[03:46:16.0000] <MikeSmith>
/me sees the message smaug____ posted to www-dom

[03:46:45.0000] <smaug____>
MikeSmith: yeah, originally I used m.com email address

[03:46:53.0000] <MikeSmith>
ah

[03:47:40.0000] <MikeSmith>
I can add that to the accept list if you awnt

[03:49:16.0000] <smaug____>
MikeSmith: nah, I rarely use @m.com

[03:49:25.0000] <MikeSmith>
k

[04:34:05.0000] <foolip>
smaug____, annevk: there isn't really a policy, but I do think that *just* deprecating and waiting is unlikely to get us where we want

[04:34:39.0000] <smaug____>
foolip: it has worked before, so why wouldn't it work anymore?

[04:34:55.0000] <smaug____>
like, we have removed some old stuff in gecko after warnings

[04:35:15.0000] <foolip>
Interesting, what were those things?

[04:35:27.0000] <smaug____>
foolip: and how would you get usage of mutation events down if no one telling they are deprecated?

[04:35:40.0000] <smaug____>
foolip: some old netscapeisms in Event IIRC

[04:36:24.0000] <foolip>
I've never seen usage really move in response to deprecation, but that's been on timescales of months to a few years, never a decade-long thing like one could argue might work for say sync XHR

[04:37:32.0000] <foolip>
So if I were to tackle mutation events, I'd first try to figure out *why* the usage is high and if there's anything that can be done about those causes.

[04:38:23.0000] <foolip>
If it looks doable and one makes an attempt, then a deprecation message would definitely be appropriate.

[04:39:39.0000] <foolip>
What I'm concerned about is "hopeful" deprecations, where deprecation is all we do and we remove if usage falls and otherwise standardize, because that's potentially wasting a lot of time for the people who take the messages seriously.

[04:39:49.0000] <smaug____>
foolip: sure, I agree that if we can get urls of the pages using mutation events, it might reveal something useful

[04:40:29.0000] <smaug____>
foolip: well, we spent already tons of time to design and implement the  replacement for mutation events

[04:40:58.0000] <smaug____>
if browser vendors aren't after all too interested in to try to remove mutation events, it feels like a bit wasted time

[04:42:22.0000] <foolip>
That's true, and I definitely agree we need to bring this story to some kind of conclusion.

[04:43:10.0000] <foolip>
The "hopeful" kind of deprecation table isn't out of the question even, if we think mutation events are bad enough, and they are pretty bad.

[04:44:00.0000] <foolip>
But someone on Blink needs to invest the time in this for anything to happen, so let's hope that someone materializes.

[04:44:26.0000] <foolip>
(waiting on www-dom thread)

[04:48:44.0000] <foolip>
Overall I think we're pretty bad at dealing with these kind of stalemates.

[05:15:16.0000] <annevk>
Yes, or they get concluded by one vendor and then the others don't follow up

[05:15:26.0000] <annevk>
Sorry, concluded by all, implemented by just one

[05:40:46.0000] <annevk>
smaug____: in http://searchfox.org/mozilla-central/source/dom/base/nsINode.cpp#920 doesn't the chain of parents end up containing the Attr node twice?

[05:41:19.0000] <annevk>
smaug____: never mind

[06:13:04.0000] <zcorpan>
TabAtkins: trying to update bikeshed (git pull; bikeshed update) i get...

[06:13:08.0000] <zcorpan>
FATAL ERROR: This version of the test suite API is no longer supported. Please update Bikeshed.

[06:13:08.0000] <zcorpan>
 ✘  Did not generate, due to fatal errors

[06:13:45.0000] <zcorpan>
hum. bikeshed update-d again and now it worked

[06:13:53.0000] <zcorpan>
very well

[07:19:13.0000] <ShakespeareFan00>
hi.

[07:20:02.0000] <ShakespeareFan00>
Where would be the best place to start a disscusion concerning side-titles?

[07:20:32.0000] <ShakespeareFan00>
https://en.wikisource.org/wiki/Page:Railways_Act_1921_(ukpga_19210055_en).pdf/39 being an example of content that has it..

[07:25:48.0000] <ShakespeareFan00>
Currently I am using a rather hacked together approach of nested DIV's which isn't ideal

[07:30:26.0000] <ShakespeareFan00>
I was advised elsewhere that Aside was a possible soloution but apparently you can't put an aside inside a paragrph.

[07:32:12.0000] <ShakespeareFan00>
What I was therefore needing was a way to mark content within the flow of an element, that's associated with a point in the content of that element but isn't part of that element.

[07:32:54.0000] <ShakespeareFan00>
Such as  a sidenote which is linked to a particular point in the paragraph of a document.

[07:34:16.0000] <ShakespeareFan00>
The user agent could on encountering such an item make an appropriate decision about how to handle it... be it as a footnote at the end, or as a 'styled' block which was moved to the left or right of a document page accordingly.

[10:40:03.0000] <TabAtkins>
annevk: Yeah, I've got that opened in a tab, I've just been overloaded with, well, everything for the past week or so, so I'm slow to reply to things that require architectural thought. Sorry. :(

[10:40:40.0000] <TabAtkins>
zcorpan: I occasionally see that server yield something funky. Updating again usually works, as you found.

[10:40:56.0000] <tantek>
lol TabAtkins when *haven't* you been overloaded in the past (few years) or so? ;)

[10:41:06.0000] <TabAtkins>
tantek: There are *degrees*, man.

[10:41:11.0000] <TabAtkins>
In particular, I'm moving right now.

[10:42:26.0000] <tantek>
TabAtkins: to SF to join the rest of us? ;)

[10:42:32.0000] <TabAtkins>
Oh god no.

[10:42:48.0000] <TabAtkins>
Just moving back to Sunnyvale, because I bought a house. ^_^

[10:46:29.0000] <ShakespeareFan00>
Good Afternoon

[10:46:51.0000] <ShakespeareFan00>
I posted earlier, but as I didn't get a response I assumed you were all busy

[11:15:07.0000] <annevk>
TabAtkins: no rush at all

[11:15:22.0000] <annevk>
TabAtkins: unless SimonSapin_ says otherwise 😊

[11:16:14.0000] <SimonSapin_>
annevk: what is?

[11:17:30.0000] <TabAtkins>
https://github.com/whatwg/dom/issues/185#issuecomment-240644834

[11:18:19.0000] <SimonSapin>
yeah, no hurry. I think we all agree on the intended behavior, we just need to make the specs consistent

[11:53:51.0000] <ShakespeareFan00>
TabAtkins: Good evening

[11:54:43.0000] <TabAtkins>
Footnotes (of which sidenotes are a display variant) have a long and terrible history of attempting to be supported on the web.

[11:55:29.0000] <TabAtkins>
They're not compatible in a simple way with the existing 'display' values - they always need some additional coordination between containers, in a way that can't be expressed via a simple generic relationship.

[11:56:29.0000] <TabAtkins>
It does suck that <aside> can't be used inside of <p>, tho.

[11:57:05.0000] <ShakespeareFan00>
The problem I have is how to tell a browser that an "Element" inside an Element is Associated content, not part of the flow..

[11:57:49.0000] <ShakespeareFan00>
Mediawiki markup has pusdeo tags... and a lot of PHP code i don't fully understand to implement them :(

[11:58:05.0000] <TabAtkins>
Hard to do generically, unfortunately. Can't really use any of the appropriate elements, as they all auto-close <p>.

[11:58:50.0000] <TabAtkins>
But that information wouldn't help you visually anyway; as I said, there's no generic way to accommodate *displaying* sidenotes or footnotes.  At best it would help screenreaders.

[11:59:37.0000] <ShakespeareFan00>
TabAtkins:  As HTML is a 'structural' language,   the display side would be an issue for user agents...

[12:00:19.0000] <TabAtkins>
The display side is *never* something to ignore. Silent metadata that has no visible effect is worthless metadata that will inevitably bitrot and become useless/harmful.

[12:00:37.0000] <ShakespeareFan00>
Okay

[12:00:45.0000] <TabAtkins>
And "it's something for user agents" doesn't excuse us from dealing with that, since we write the spec *for* user agents.

[12:01:20.0000] <ShakespeareFan00>
I have the template I partially wrote for doing a very hacky version of Sidenotes...

[12:02:06.0000] <ShakespeareFan00>
https://en.wikisource.org/wiki/Template:Cl-act-paragraph - This isn't clean HTML though, as it's HTML+some mediawiki markup for passing params...

[12:02:14.0000] <TabAtkins>
Yeah, you can handle it kinda-sort on your own, by explicitly coordinating several elements. At that point, just use <span class=sidenote>. It's not ideal, but it's the best you'll reasonably have.

[12:02:47.0000] <ShakespeareFan00>
TabAtkins:  I wasn't sure you could do "clear:left" with spans...

[12:03:03.0000] <ShakespeareFan00>
Or define a span to behave like a block

[12:03:22.0000] <ShakespeareFan00>
In any case I don't think redefininf what a span is was a good idea

[12:05:26.0000] <ShakespeareFan00>
Another example for a  template for sidenotes in Mediawiki was this https://en.wikisource.org/wiki/Template:Right_sidenote

[12:05:33.0000] <ShakespeareFan00>
Which uses a span

[12:06:23.0000] <ShakespeareFan00>
However if you use a span vs a div (with clear:left) and they can overlap...

[12:06:46.0000] <ShakespeareFan00>
*then the two spans can end up overlapping which looks ugly

[12:08:04.0000] <ShakespeareFan00>
Like here - https://en.wikisource.org/w/index.php?title=Page:Historical_Works_of_Venerable_Bede_vol._2.djvu/121&action=submit

[12:08:37.0000] <ShakespeareFan00>
And whilst mediawiki's approach is nominally browse independent, I have my doubts

[12:08:59.0000] <ShakespeareFan00>
Hence my earlier comments about needing to find a long term soloution.

[12:10:10.0000] <ShakespeareFan00>
I'd love to be able to replace my current nested divs's  with a single  <sidenote> or <aside> and have the browser do the hard work...

[12:11:10.0000] <ShakespeareFan00>
And of course being able to embed Aside inside other elements would be useuful to this....

[12:13:11.0000] <ShakespeareFan00>
Example  <p> Pursant to the Act of 14. Wales c. 21  It was rehearsed that <aside class="sidetitle" break=flow>Rehersal of the Act 14. Wales c. 21</aside> (1) No measures previously enacted would be ....</p>

[12:13:46.0000] <ShakespeareFan00>
Naturally you still shouldn't be able to nest <p> directly inside <p> ffor what should be obvious structural reasons....

[12:14:47.0000] <ShakespeareFan00>
but bweing able to do <p> foo-<aside><p></p></aside>bar</p>  to form a side-note with the main flow reading "for-bar" would be really useful to my use case. :)

[12:15:41.0000] <ShakespeareFan00>
If you read the source code for cl-act-paragraph I also had to do some convolouted things to get it to work over multiple pages

[12:15:47.0000] <ShakespeareFan00>
hence the split param.

[12:15:58.0000] <ShakespeareFan00>
And apologies for the wall of text

[12:16:26.0000] <ShakespeareFan00>
Perhaps my use case is beyond what HTML is capable of?

[12:38:30.0000] <avivr>
hey, is this the place to ask questions regarding the web notifications standard?

[12:38:41.0000] <avivr>
or is there a more specific channel?

[12:39:07.0000] <ShakespeareFan00>
TabAtkins:  I hope my comments will be considered in the next round of spec revisions

[12:39:28.0000] <Domenic>
avivr: we could probably help, yeah

[12:40:13.0000] <Domenic>
ShakespeareFan00: why is it important to you to use a built-in tag name? <article> is not treated any differently by browsers or other technology than <span class="sidenote">

[12:41:24.0000] <avivr>
i wonder if there is a way to specify the screen in which the notification will be shown at? i'm using chrome/mac, and the notifications always shown on the primary screen, even if i have multiple monitors and the browser window is at screen #2 or #3..

[12:42:01.0000] <ShakespeareFan00>
Domenic:  Did you take a look at the link I gave?

[13:23:51.0000] <avivr>
anyone can help? should i open this question as an issue on the github repo?

[13:24:47.0000] <ShakespeareFan00>
Domenic: I could use a span , but in the example I linked, they overlapped...

[13:24:58.0000] <ShakespeareFan00>
https://en.wikisource.org/w/index.php?title=Page:Historical_Works_of_Venerable_Bede_vol._2.djvu/121&action=submit being the example

[13:25:39.0000] <ShakespeareFan00>
Using Aside's would be next choice, but you can't put those inside a <p></p> apparently

[13:25:44.0000] <Domenic>
ShakespeareFan00: right, you need to use two spans then.

[13:25:58.0000] <ShakespeareFan00>
They are two spans

[13:26:06.0000] <Domenic>
ShakespeareFan00: then you're good!

[13:26:23.0000] <ShakespeareFan00>
I'm not sure why they overlpa though

[13:26:33.0000] <ShakespeareFan00>
Structurally I don't see annything wrong..

[13:26:57.0000] <ShakespeareFan00>
MAybe I need to go back and ask #css again?

[13:27:38.0000] <Domenic>
avivr: ah, that's not part of the API. It might be worth asking on the GitHub repo, but I kind of doubt we want to give that kind of control... do you know if native apps give that control?

[13:28:33.0000] <ShakespeareFan00>
Domenic:  Sadly I;m having to conclude on the basis of what people have said that my use case is beyond HTML's capabiloity (other than by hack soloutuons)

[13:28:37.0000] <ShakespeareFan00>
:(

[13:28:50.0000] <ShakespeareFan00>
Back to paying out for Adobe products it is.

[13:28:53.0000] <ShakespeareFan00>
:*

[13:28:55.0000] <ShakespeareFan00>
:(

[13:29:00.0000] <ShakespeareFan00>
/me out

[13:29:04.0000] <Domenic>
ShakespeareFan00: it's kind of hard to figure out what you're asking, but maybe stackoverflow will be able to help. This channel is generally not about solving peoples web pages.

[13:29:24.0000] <ShakespeareFan00>
I camein here to ask about sidenote support in HTML

[13:29:44.0000] <ShakespeareFan00>
I was using the linked pages as examples of how it's  currently done

[13:29:58.0000] <Domenic>
Yeah. I am sure HTML can make it happen with <span>s, but it's hard to tell what you're asking and this isn't the right group to solve your problems.

[13:30:17.0000] <ShakespeareFan00>
Thank you

[13:30:39.0000] <ShakespeareFan00>
Demenic: Thank you making me feel stupid

[13:30:45.0000] <ShakespeareFan00>
Domenic: :(

[13:30:59.0000] <Domenic>
:( that certainly wasn't the intent. I'm just trying to tell you a good place to ask for help.

[13:31:36.0000] <ShakespeareFan00>
I know it wasn't, but I still feel that way when I try to ask for <sidenote> support and can't explain what i mean

[13:32:10.0000] <boogyman>
ShakespeareFan00: maybe create a drawing and upload it, then ask again back over in #css

[13:32:43.0000] <ShakespeareFan00>
Possibly but someone on #css said to ask in here based on my comments there

[13:32:52.0000] <ShakespeareFan00>
(maybe they were in error)

[13:33:09.0000] <boogyman>
I recommended that you mention your use-case here

[13:33:15.0000] <ShakespeareFan00>
I did that

[13:33:18.0000] <Domenic>
You never did explain why it's important to you that you use a built-in HTML tag instead of a <span class="sidenote">

[13:33:45.0000] <ShakespeareFan00>
Domenic:   Because in the linked example , the span cuse overlapped...

[13:33:58.0000] <ShakespeareFan00>
Anyway I'm too tired to continue arguing

[13:34:01.0000] <Domenic>
ShakespeareFan00: right. But creating a new tag, or using <aside>, does not solve that.

[13:34:05.0000] <ShakespeareFan00>
or trying to explain

[13:34:07.0000] <Domenic>
Tag names have nothing to do with overlapping or not.

[13:34:18.0000] <Domenic>
No tag in HTML is able to overlap

[13:34:20.0000] <ShakespeareFan00>
Spans don't behave as blocks

[13:34:29.0000] <Domenic>
They do if you do style="display: block"

[13:34:53.0000] <ShakespeareFan00>
Time to examine what Mediwiki thinks it's doing with the span class then

[13:35:08.0000] <ShakespeareFan00>
And sorry if I was bit brusque earlier...

[13:35:29.0000] <ShakespeareFan00>
And apologies for wasting your time on something that seems not to be an issue you can actually handle...

[13:35:34.0000] <ShakespeareFan00>
/me out

[13:38:14.0000] <avivr>
not sure about native applications, will try to figure out.. the use-case of dual+monitors is quite common, and sometimes the notification can be very far from your working area (website window), so they can be easliy missed.

[13:39:10.0000] <avivr>
maybe the solution is using a sound with the notification, but i always found that to be too anoyying :\

[13:40:45.0000] <avivr>
if I'll find that this is possible with native apps I'll try discussing it on the github repo

[13:40:56.0000] <avivr>
thanks a lot for the help Domenic!

[15:36:47.0000] <TabAtkins>
jyasskin: Okay, that "global object" definition will work correctly now. Whitespace is now normalized in anchors.


2016-08-24
[18:39:53.0000] <MikeSmith>
https://github.com/keeganstreet/compatibility-reporter looks promising

[19:12:43.0000] <jyasskin>
TabAtkins: Awesome, thanks!

[21:47:47.0000] <Guest_84857>
allah is doing

[21:47:47.0000] <botie>
i already had it that way, Guest_84857.

[22:53:25.0000] <MikeSmith>
annevk: please comment if I got anything wrong at https://stackoverflow.com/questions/39109446/cors-preflight-not-sending-credentials-server-wants-to-deny-unauthenticated-use/39113781#39113781

[22:59:23.0000] <annevk>
MikeSmith: you're correct

[23:04:47.0000] <MikeSmith>
super, thanks

[23:34:32.0000] <hsivonen>
would anyone with a Mac and the latest WebKit nightly care to load the two test cases at https://hsivonen.com/test/moz/replacement/ and report if they look different?

[23:35:52.0000] <MikeSmith>
hsivonen: hi will do right now

[23:35:55.0000] <hsivonen>
(Firefox and Chrome comply with the spec on those test cases. Edge does not.)

[23:37:46.0000] <MikeSmith>
https://hsivonen.com/test/moz/replacement/iso-2022-kr.htm shows replacement character

[23:37:49.0000] <MikeSmith>
but https://hsivonen.com/test/moz/replacement/replacement.htm does not

[23:38:02.0000] <MikeSmith>
instead it says, “This is not visible if "replacement" is a label for the replacement encoding.”

[23:38:09.0000] <hsivonen>
MikeSmith: thank you. So WebKit complies, too.

[23:38:20.0000] <MikeSmith>
cool

[23:41:52.0000] <annevk>
I get the same results in Safari Technology Preview

[23:42:36.0000] <annevk>
Safari fails (in the "not supporting it" way)

[23:43:03.0000] <hsivonen>
annevk: i.e. complies with the spec

[23:49:42.0000] <annevk>
hsivonen: yeah

[23:49:51.0000] <annevk>
hsivonen: which is strange since cdumez said something else

[00:19:08.0000] <hsivonen>
annevk: test cases > developer statements

[01:27:21.0000] <MikeSmith>
any of y’all attending TPAC in Lisbon, I’m asked to remind you to please register at https://www.w3.org/2002/09/wbs/35125/TPAC2016/?login

[01:28:19.0000] <annevk>
MikeSmith: I think I did

[01:28:35.0000] <annevk>
MikeSmith: might have even requested observer status

[01:47:34.0000] <MikeSmith>
annevk: yup thanks the system shows you’re registered

[02:21:33.0000] <MikeSmith>
anybody know if we have any spec that defines parsing for a monetary value?

[02:23:22.0000] <MikeSmith>
https://w3c.github.io/browser-payment-api/#dfn-value attempts to specify requirements but fails do actually define processing, including not defining exactly what a UA must do when a value does not match the requirements (e.g., throw something)

[02:27:02.0000] <annevk>
MikeSmith: ECMA-402?

[02:27:12.0000] <MikeSmith>
/me looks

[02:27:42.0000] <MikeSmith>
oh, i18n API

[02:27:46.0000] <MikeSmith>
will look, thanks

[02:38:42.0000] <MikeSmith>
annevk: so in the case we don’t need to support localized currency representations, because this is just for the value of the field for this in the DOM

[02:38:53.0000] <MikeSmith>
well

[02:39:14.0000] <MikeSmith>
not true

[02:39:32.0000] <annevk>
oh

[02:39:41.0000] <MikeSmith>
rather it is about what value the app’s JS can use in the constructor

[02:40:31.0000] <MikeSmith>
but I guess the expectation is that the app (merchant site JS) would need to convert any localized value into the required format

[02:41:23.0000] <MikeSmith>
but hmm maybe the constructor should actually accept localized currency representation, I dunno, will ask Richard

[02:41:33.0000] <annevk>
MikeSmith: I don't think we have a parser for decimal numbers

[02:41:51.0000] <annevk>
MikeSmith: if that is what this is looking for

[02:42:00.0000] <MikeSmith>
well now that I look at it I think we do not need one

[02:42:24.0000] <annevk>
MikeSmith: that note has a "should" requirement

[02:42:26.0000] <MikeSmith>
can we not just make it a valid floating-point number?

[02:42:53.0000] <MikeSmith>
yeah for the regex?

[02:43:19.0000] <MikeSmith>
I think it is nice that it specifies a regex but we don't

[02:43:23.0000] <annevk>
MikeSmith: I think floating points are problematic with rounding and such

[02:43:23.0000] <MikeSmith>
... ned it

[02:43:27.0000] <MikeSmith>
oh

[02:43:39.0000] <annevk>
MikeSmith: and they allow "e" and "E"

[02:43:55.0000] <MikeSmith>
yeah I know but I was thinking that should not be a problem

[02:44:09.0000] <MikeSmith>
I mean nobody is going to input values that way even if we allowed it

[02:44:23.0000] <annevk>
MikeSmith: there's something off with precision with floating points which make them unsuitable for money

[02:44:30.0000] <MikeSmith>
ah OK

[02:44:46.0000] <annevk>
MikeSmith: representing this as a string though is a rather ugly workaround :/

[02:45:18.0000] <MikeSmith>
well I just I am just being lazy, because I could write the parsing algorithm in less time than it has taken me to ask about it…

[02:46:12.0000] <annevk>
I dunno about that, decimal numbers is its whole own world in computer science aiui

[02:47:10.0000] <MikeSmith>
well at least if I limit it to what that regex alllows

[02:48:28.0000] <annevk>
I wonder if https://w3c.github.io/browser-payment-api/#paymentaddress-interface matches equivalent definitions in HTML

[02:50:38.0000] <MikeSmith>
I do not know

[02:51:19.0000] <MikeSmith>
Zach Koch who write it is certainly aware of the HTML defintions and autofill/autocomplete stuff

[02:58:29.0000] <annevk>
HTML does use a valid-floating point number for transaction-amount

[02:58:55.0000] <MikeSmith>
yeah I just saw that

[02:59:22.0000] <MikeSmith>
so now I wonder if we could get by with that too

[02:59:31.0000] <MikeSmith>
for that payment request API I mean

[03:02:50.0000] <annevk>
Worth raising an issue on at least

[03:02:54.0000] <tobie>
MikeSmith: things to watch out for: currency with > 2 decimal points, any kind of math done on anything but cents, localization issues around separators (such as "," being a decimal point in french and a thousands separator in english),  grouping by other things than thousands in certain currencies/localizations.

[03:03:11.0000] <annevk>
If we're going to have a new number primitive that should probably have some broader discussion

[03:04:20.0000] <annevk>
tobie: the main issue is the less-than-cent math

[03:04:51.0000] <annevk>
I suspect, localization doesn't really come into play at the API level, that's just a number formatting problem for the template

[03:06:44.0000] <annevk>
MikeSmith: I'll file the "should" in note issue

[03:06:46.0000] <tobie>
well then, you're relying on developers to do proper conversion between user input and that format. I can see how that's going to work out.

[03:07:04.0000] <tobie>
way to promote TDD. :)

[03:07:24.0000] <MikeSmith>
annevk: thanks

[03:07:38.0000] <MikeSmith>
tobie: yeah I think this needs more work

[03:09:30.0000] <annevk>
tobie: test-driven-development?

[03:09:56.0000] <annevk>
tobie: but anyway, there's no UX component to this API, so they'll indeed leave that up to websites

[03:10:23.0000] <annevk>
tobie: however, mostly those websites already need to deal with that kind of thing I assume in order to display prices and charge credit cards accurately

[03:11:38.0000] <MikeSmith>
right

[03:12:11.0000] <MikeSmith>
but that said the point of this whole feature is to make payments experience on the Web easier for users

[03:12:22.0000] <MikeSmith>
and along with that, easier for merchants too, actually

[03:12:41.0000] <MikeSmith>
in that they should be able to eliminate a lot of custom code

[03:15:01.0000] <tobie>
There must exist some inter bank standardized Ido format for this stuff.

[03:15:48.0000] <tobie>
s/Ido/ISO/

[03:17:16.0000] <MikeSmith>
yeah http://www.iso.org/iso/home/standards/currency_codes.htm

[03:17:31.0000] <MikeSmith>
oh, not that

[03:17:41.0000] <MikeSmith>
that is only for the currency codes I guess

[03:37:01.0000] <MikeSmith>
to me https://twitter.com/thomaswilburn/status/768390017232220161 is an example of the consequences of setting the wrong expectations for non-implementor readers of specs

[03:39:57.0000] <tobie>
MikeSmith: seems currency formats should be in ISO 20022 if anywhere.

[03:40:35.0000] <MikeSmith>
ah yeah

[03:41:11.0000] <tobie>
https://www.iso20022.org/

[03:41:30.0000] <tobie>
/me wishes MikeSmith good luck.

[03:41:49.0000] <MikeSmith>
heh

[03:41:55.0000] <MikeSmith>
yeah ISO 20022 is referenced by other (unimplemented) Payments WG drafts but just not by the Payment Request API spec (which is the only one actually implemented so far)

[03:42:41.0000] <tobie>
referencing ISO 20022 seems to be about as precise as referencing "the Interwebs"

[03:42:46.0000] <MikeSmith>
haha

[03:43:24.0000] <MikeSmith>
yeah plus with anything ISO there is the fact you can only read the specs if you pay

[03:44:01.0000] <tobie>
well, with ISO 20022, you get to see a video with pigs.

[03:44:22.0000] <MikeSmith>
heh

[03:44:42.0000] <MikeSmith>
well that is a genuine plus

[03:44:53.0000] <MikeSmith>
oh hey https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/datatypes/_YX4O9tp-Ed-ak6NoX_4Aeg_-836081793

[03:44:58.0000] <tobie>
/me redacts a bunch of comments he doesn't want logged somewhere.

[03:45:08.0000] <MikeSmith>
The number of fractional digits (or minor unit of currency) must comply with ISO 4217. Note: The decimal separator is a dot.

[03:45:16.0000] <MikeSmith>
(quoting above)

[03:45:42.0000] <MikeSmith>
so I guess http://www.iso.org/iso/home/standards/currency_codes.htm does define the value format

[03:46:40.0000] <tobie>
it's the "exponent" thing, I guess.

[03:48:27.0000] <tobie>
MikeSmith: https://en.wikipedia.org/wiki/ISO_4217#Treatment_of_minor_currency_units_.28the_.22exponent.22.29

[03:48:40.0000] <MikeSmith>
/me reads

[03:49:02.0000] <MikeSmith>
oh christ

[03:49:54.0000] <tobie>
what? Mauritanian khoums?

[03:53:40.0000] <MikeSmith>
Japan’s currency makes the most sense of all

[03:53:55.0000] <MikeSmith>
I realize now

[03:54:20.0000] <MikeSmith>
we can just always use integers

[03:54:46.0000] <MikeSmith>
I think Chinese yuan is like that too

[03:55:54.0000] <tobie>
Well, all you need is massive inflation and you're good.

[03:56:17.0000] <MikeSmith>
hah

[03:57:11.0000] <tantek>
MikeSmith: actually, I'm seeing one yen == one cent today, a dollar makes more cents.

[03:57:53.0000] <MikeSmith>
oh man

[03:58:16.0000] <MikeSmith>
for that kind of pun you get some serious karmic dust

[04:31:09.0000] <smaug____>
who are  @asajeffrey and @connorgbrewster ?

[04:31:19.0000] <smaug____>
/me is reading the bug about session history

[04:31:59.0000] <smaug____>
hmm, did I meet them, or one of them in London

[04:47:07.0000] <nox>
smaug____: Ah ah.

[04:48:48.0000] <nox>
smaug____: They both work on Servo, the former is a MoCo employee, the second a student working with us.

[04:48:57.0000] <smaug____>
right

[04:49:41.0000] <smaug____>
that servo meeting in london lead to that spec bug

[07:20:31.0000] <annevk>
MikeSmith: the "Fetch" component of the "WHATWG" product can now be closed off

[07:20:39.0000] <annevk>
MikeSmith: all bugs are resolved in one way or another

[07:26:24.0000] <tantek>
annevk congrats on reaching CR! ;)

[07:29:12.0000] <annevk>
tantek: CR?

[07:30:10.0000] <tantek>
annevk: hence the ;)

[07:30:24.0000] <annevk>
oh, in reference to Fetch

[07:30:39.0000] <annevk>
I thought the W3C published something

[07:30:57.0000] <tantek>
no

[07:31:16.0000] <tantek>
more seriously, congrats on doing such a good job on Fetch that it's normatively referenced by at least one W3C Recommendation, and at least 2 CRs

[07:31:47.0000] <smaug____>
is speculative loading during parsing part of the spec. I mean, would it be against the spec to not do that?

[07:31:58.0000] <tantek>
(some of us have been working on making that more acceptable (normatively referencing WHATWG specs) here @W3CAB level)

[07:32:04.0000] <annevk>
"I believe @slightlyoff has expressed the thought that having ARIA roles for the complete set of HTML elements would be a good thing."

[07:32:45.0000] <annevk>
smaug____: it's not specced either way

[07:32:52.0000] <smaug____>
ok, thanks

[07:33:02.0000] <smaug____>
I'm thinking some changes to background tabs

[07:33:12.0000] <annevk>
smaug____: which is a known problem, but we don't have folks to help out

[07:35:04.0000] <tantek>
annevk say what?!? "ARIA roles for the complete set of HTML elements would be a good thing"?!?

[07:35:13.0000] <tantek>
uh by what evidence would that be a good thing?

[07:35:32.0000] <annevk>
maybe it is, maybe it isn't

[07:35:46.0000] <annevk>
I was just surprised that the comment only contained that and no actual information

[10:29:09.0000] <Domenic>
It seems like a good thing to me

[10:29:27.0000] <Domenic>
Otherwise you cannot create custom elements that screen readers announce as a ____ where ____ is like a bunch of different things

[10:33:11.0000] <ShakespeareFan00>
Hello again

[10:33:36.0000] <ShakespeareFan00>
The other night I was trying to explain something and failed

[10:34:29.0000] <ShakespeareFan00>
So is there someone here who has some time to assist in communicationg a problemm in a way that CAN be understood more clearly?

[10:34:39.0000] <ShakespeareFan00>
(Namely that you can't do sidenotes in HTML)

[10:35:34.0000] <ShakespeareFan00>
(And that the currently suggested approaches would indicate that a change in the spec maybe required.)

[10:38:36.0000] <nox>
Global interfaces can have static attributes, right?

[10:38:40.0000] <nox>
(And static methods.)

[10:43:51.0000] <ShakespeareFan00>
Apologies can't do "sidenotes" cleanly

[10:44:31.0000] <astearns>
ShakespeareFan00: you might have better luck adding to the discussion here https://discourse.wicg.io/t/explicit-footnote-or-expansion-links/1256 and/or here https://discourse.wicg.io/t/position-an-element-relatively-to-another-element-from-anywhere-in-the-dom/968

[10:45:33.0000] <ShakespeareFan00>
astearrns: Can we take this to private measge?

[10:45:54.0000] <ShakespeareFan00>
The use case was rather specfic, and thus off topic generally here

[10:49:24.0000] <Domenic>
nox: that seems probably true

[10:49:32.0000] <ShakespeareFan00>
hi Doenic

[10:49:36.0000] <ShakespeareFan00>
Sorry about last night

[10:49:47.0000] <ShakespeareFan00>
Domenic: sorry about last night...

[10:50:41.0000] <ShakespeareFan00>
I had a little think about what you said, and will post my own proposal soon.

[10:54:17.0000] <ShakespeareFan00>
asterans: Thanks

[10:54:18.0000] <ShakespeareFan00>
:)

[10:54:52.0000] <ShakespeareFan00>
Also posibly going to suggest something relationg to how transform: get handled

[10:54:54.0000] <ShakespeareFan00>
:)

[11:36:10.0000] <ShakespeareFan00>
https://discourse.wicg.io/t/how-should-sidenotes-inside-inline-content-be-handled/1673 - I'm not expecting a response soon :)

[11:36:13.0000] <ShakespeareFan00>
/me out

[11:50:19.0000] <benjamingr_>
So, dumb question - where does the DOM spec actually define what a 'long' is?

[11:50:25.0000] <benjamingr_>
Or a 'short' ?

[12:06:31.0000] <Domenic>
benjamingr_: that's Web IDL

[12:06:56.0000] <Domenic>
benjamingr_: https://heycam.github.io/webidl/#idl-long + https://heycam.github.io/webidl/#es-long

[12:06:57.0000] <benjamingr_>
Thanks <3

[12:07:09.0000] <Domenic>
I've argued these should link to their definitions, but I think people assume they're very basic.

[12:07:27.0000] <Domenic>
https://github.com/tabatkins/bikeshed/issues/458

[12:34:34.0000] <jyasskin>
http://www.memegen.com/meme/l90r0j

[12:46:40.0000] <gsnedders>
jyasskin: you will be a cross-reference.

[16:34:20.0000] <MikeSmith>
annevk: Fetch component of W3C bugzilla is already disabled for new bugs

[16:34:56.0000] <MikeSmith>
annevk: so I don’t think there is anything more to do


2016-08-25
[18:50:03.0000] <MikeSmith>
how can I quickly get a view of all chromium/blink bugs I’ve filed?

[18:50:19.0000] <MikeSmith>
I see no links at https://bugs.chromium.org/p/chromium/issues/list#

[19:31:50.0000] <Domenic>
MikeSmith: when I go there there's a dropdown where it says "Search: Open and reported by me"

[19:31:57.0000] <Domenic>
This URL might work https://bugs.chromium.org/p/chromium/issues/list?can=4&q=&colspec=ID+Pri+M+Stars+ReleaseBlock+Cr+Status+Owner+Summary+OS+Modified&x=m&y=releaseblock&cells=tiles

[19:34:12.0000] <MikeSmith>
/me looks

[19:35:04.0000] <MikeSmith>
thanks yeah that works

[19:35:20.0000] <MikeSmith>
oh

[19:35:46.0000] <MikeSmith>
d’oh I also now see "Search: Open and reported by me" in that dropdown

[19:36:20.0000] <MikeSmith>
should have looked more carefully but anyway this is not genius UI

[19:38:19.0000] <tantek>
UI is hard, let's go make new APIs.

[23:38:05.0000] <annevk>
MikeSmith: great

[23:39:26.0000] <annevk>
"UI is hard, let's go make new APIs." Dodging the hard questions seems surprisingly common. That's prolly why Apple is still at the top.

[00:53:16.0000] <FND>
question regarding fetch and caching:

[00:53:22.0000] <FND>
fetch("https://example.org/foo", { credentials: "include" }).then(res => { console.log("ETag", res.headers.get("ETag")) })

[00:53:39.0000] <FND>
this does return an ETag - yet repeating the same request does not send an `If-None-Match` header; am I missing anything?

[01:01:14.0000] <annevk>
FND: possibly a bug

[01:08:47.0000] <FND>
annevk: yeah, it seems that way - I'd only tested in Chrome, a colleague just reported it works as expected in Firefox

[01:10:16.0000] <FND>
/me ponders how to create a public test case without setting up a server

[01:15:51.0000] <Ms2ger>
FND, if you feel up for it, you could write it as a PR to https://github.com/w3c/web-platform-tests using https://wptserve.readthedocs.io/en/latest/

[01:17:11.0000] <FND>
I'll take a look (might take a while though)

[02:12:08.0000] <FND>
Ms2ger: I got the Web Platform Tests server running locally - as I understand it, I just need to add some JavaScript tests in the `fetch/api/headers` directory?

[02:12:28.0000] <FND>
do you know whether there's an existing resource that reflects back incoming request headers?

[02:12:55.0000] <Ms2ger>
FND, I think there's probably something under XMLHttpRequest/

[02:13:38.0000] <FND>
roger, I'll take a look (though not right now)

[02:35:13.0000] <tobie>
What could possibly be a grosser waste of resources than designing a WoT flyer for TPAC?

[02:35:59.0000] <tobie>
Oh, I know: having multiple conf calls about it.

[02:37:04.0000] <nox>
If a global has unscopable names,

[02:37:18.0000] <nox>
should @@unscopable live on the interface prototype object or on the global instance?

[02:37:25.0000] <tobie>
s/grosser/more gross/ ?

[03:14:31.0000] <jgraham>
tobie: Surely that time they got someone to build a TPAC mobile app

[03:16:35.0000] <annevk>
And used a flyer to distribute it?

[03:17:02.0000] <annevk>
I wonder if Jeff Jaffe is going to modularize HTML again this year

[03:18:52.0000] <FND>
Ms2ger: if I file a PR on the Web Platform Tests repo, will that catch the attention of Chrome folks or should I file a separate bug for their implementation?

[03:19:26.0000] <Ms2ger>
FND, might be safest filing the bug too

[03:19:55.0000] <FND>
ok, I'll just reference the PR then - thanks

[03:22:02.0000] <MikeSmith>
Please comment at http://stackoverflow.com/questions/39139413/property-getter-object-domstring-name-in-the-document-idl/39142200#39142200 if I got anything wrong there

[03:23:07.0000] <jgraham>
annevk: Modularizing html is clearly critical to the success of the web

[03:24:02.0000] <annevk>
jgraham: it's why apps are winning

[03:25:52.0000] <annevk>
MikeSmith: r+

[03:26:31.0000] <MikeSmith>
super

[04:09:52.0000] <tobie>
jgraham: oh man, that was amazing. But it's something that came for free with the rented conference space. That's different, it's an actual IG/WG spending their time on this.

[05:15:16.0000] <nox>
Can the prototype of the global object be changed?

[05:18:24.0000] <MikeSmith>
for all y’all attending TPAC, I’ve added a “Web Platform Tests” session to the registration form

[05:18:31.0000] <MikeSmith>
https://www.w3.org/2002/09/wbs/35125/TPAC2016/?login#wbsthursday

[05:18:40.0000] <MikeSmith>
for the session that gsnedders will lead

[05:18:50.0000] <MikeSmith>
so even if you have already registered, please re-respond to indicate you will attend

[05:19:00.0000] <MikeSmith>
if you have another meeting at the same time you can just register as an “observer”

[05:19:12.0000] <MikeSmith>
I reckon we are not going to be meeting for that for the whole time for those two days

[05:19:19.0000] <MikeSmith>
I guess it will be up to gsnedders to schedule the actual time

[05:19:30.0000] <MikeSmith>
and for the rest of the time we have the room to use as we please

[05:22:05.0000] <Ms2ger>
annevk, do you know if https://bugzilla.mozilla.org/show_bug.cgi?id=1052139 got specced?

[05:55:06.0000] <nox>
Ms2ger: AFAICT, no.

[06:42:14.0000] <zcorpan>
annevk: closed-shadow-hidden is the opposite semantic of unclosed node, correct?

[07:20:37.0000] <annevk>
zcorpan: iirc, yes

[07:21:36.0000] <annevk>
Ms2ger: not sure, JS got updates, but IDL needs some too?

[07:27:34.0000] <zcorpan>
annevk: thanks. https://github.com/w3c/csswg-drafts/commit/f32b172734bff184dae810e53f0de0d45adb2c39

[07:31:14.0000] <newcomer25>
The whole Law is fulfilled in one statement: ‘You’ll love your neighbour as much as yourself’ - Galatians 5:14

[07:31:15.0000] <newcomer25>
God bless you all and have fun chatting!

[07:31:21.0000] <jgraham>
Is there something that specifies coordinate systems? Like screen, viewport, and the conversion between them?

[07:32:21.0000] <Ms2ger>
Ah, https://github.com/heycam/webidl/pull/133

[07:41:44.0000] <annevk>
jgraham: CSS should

[07:43:52.0000] <annevk>
https://www.w3.org/2016/08/2016-reorg.html

[07:45:31.0000] <annevk>
so MikeSmith, are you the Community Management Lead?

[07:45:59.0000] <MikeSmith>
nope

[07:46:22.0000] <annevk>
says there a "Community Management Lead" is working directly with the WHATWG

[07:46:23.0000] <MikeSmith>
I managed to emerge from it with no additional responsiblities

[07:46:38.0000] <annevk>
ah, "Effective after 26 September 2016."

[07:46:49.0000] <MikeSmith>
hmm yeah maybe this part is aspirational

[07:46:50.0000] <annevk>
guess until that point we have to wait

[07:47:08.0000] <MikeSmith>
yeah

[07:47:20.0000] <annevk>
It's a little unclear to me if this actually fixes anything that was wrong

[07:48:12.0000] <MikeSmith>
I think it will make some things get done better

[07:49:06.0000] <annevk>
both the problems and "ameliorations" are somewhat vague

[07:50:03.0000] <annevk>
"We are not adequately succeeding in getting sufficient participation in Asia." What about Africa or South-America?

[07:51:07.0000] <annevk>
Or "It is getting harder to get participation from Members"

[07:51:08.0000] <MikeSmith>
yeah that is a subjective statement I guess

[07:51:11.0000] <annevk>
I think that's true

[07:51:14.0000] <MikeSmith>
that Asia part

[07:51:23.0000] <annevk>
But it's not really exploring why it's harder

[07:51:43.0000] <annevk>
And therefore the solution to just assign some people to raise problems we already know about, is hard to evaluate

[07:52:00.0000] <MikeSmith>
well they are asking for feedback on it right?

[07:52:07.0000] <annevk>
They are?

[07:52:19.0000] <MikeSmith>
um not sure

[07:52:32.0000] <MikeSmith>
I guess I need to read up on the current status

[07:52:39.0000] <annevk>
There's no suggestion for feedback in that document

[07:52:46.0000] <annevk>
And it says it'll be effective in a month

[07:53:16.0000] <MikeSmith>
well I think it is fair to say there is always room for refinement to it

[07:54:05.0000] <annevk>
I guess we'll see, apart from the WHATWG thing none of it seems to affect me much

[07:55:06.0000] <MikeSmith>
maybe the best people to direct feedback for any parts you think might affect you and people you work with are plh and wendy

[07:55:52.0000] <MikeSmith>
I am pretty sure they are both receptive to getting feedback on it

[07:56:36.0000] <MikeSmith>
and are both people on the team that others at mozilla have some regular interaction with

[07:56:50.0000] <MikeSmith>
e.g., for WebAppSec WG

[07:56:52.0000] <annevk>
Still waiting for a reply to https://github.com/whatwg/fetch/issues/204#issuecomment-194115954

[07:57:01.0000] <MikeSmith>
/me looks

[07:57:50.0000] <annevk>
Anyway, I think I'll wait and maybe discuss it in Lisbon if there's nothing else to do

[07:57:55.0000] <MikeSmith>
yeah

[07:58:20.0000] <MikeSmith>
I did not know that was still hanging open and I do not personally why it is

[07:59:30.0000] <MikeSmith>
but yeah if that is not resolved by TPAC, using the f2f opportunity to escalate it would be good

[08:00:06.0000] <annevk>
I'm assuming timbl is still not pleased with Fetch describing how web security works

[08:00:52.0000] <MikeSmith>
I think he may not have said anything explicitly to that affect any time recently

[08:01:01.0000] <MikeSmith>
at least not that I can remember hearing

[08:01:19.0000] <MikeSmith>
so it is possible he does not feel as strongly about it any more, I dunno

[08:02:06.0000] <annevk>
I was mostly joking

[08:02:11.0000] <MikeSmith>
oh

[08:02:31.0000] <MikeSmith>
ah, I just re-read what you wrote

[08:03:06.0000] <MikeSmith>
/me is more slow on the uptake than usual due to fatigue I guess

[08:04:53.0000] <MikeSmith>
anyway to the point that timbl or others have said it’s not intuitive to web developers I guess I would have to agree

[08:05:22.0000] <MikeSmith>
but I do not know how to make it easier for web developers

[08:05:26.0000] <annevk>
Yeah CORS is terrible

[08:05:27.0000] <MikeSmith>
as far as the spec goes

[08:05:36.0000] <annevk>
But I don't really see an alternative either

[08:06:54.0000] <MikeSmith>
yeah one thing we need is better support in server-side programming environments to make it easier to configure

[08:07:03.0000] <MikeSmith>
but some of them already have quite good support

[08:09:27.0000] <MikeSmith>
anyway as far as the core fetching part of Fetch, given that is just documenting what UAs do already, if anybody has an issue with that, then it is not really a spec issue but instead… an issue with reality

[08:10:05.0000] <MikeSmith>
as far as the fetch API I think web developers really like it and find it very nice to use

[08:10:16.0000] <MikeSmith>
well the ones that understand promises at least

[08:10:29.0000] <annevk>
until they want to cancel it 😛

[08:10:44.0000] <annevk>
gotta go fetch a kid

[08:10:48.0000] <MikeSmith>
hai

[08:18:35.0000] <thinkxl>
web dev here and I think fetch API is amazing, just saying :P

[08:21:37.0000] <FND>
seconded

[08:25:07.0000] <Domenic>
nox: https://github.com/heycam/webidl/pull/133, still waiting

[08:29:38.0000] <jgraham>
annevk: IS that the kind of "should" that means "don't"?

[08:53:12.0000] <FND>
annevk Ms2ger: FWIW, creating a test case on Web Platform Tests proved to not to be too difficult (yay Python)

[08:53:15.0000] <FND>
https://github.com/w3c/web-platform-tests/compare/master...FND:fetch-etag

[08:53:35.0000] <FND>
I'm not entirely sure yet it's actually testing what it's supposed to, but ran out of time for today

[08:53:56.0000] <FND>
ah, Ms2ger isn't here anymore anyway - will check back tomorrow then

[09:24:13.0000] <hsivonen>
does whatwg.org have some per-useragent throttling that tarpits python stdlib but not curl or Firefox?

[12:06:28.0000] <gsnedders>
MikeSmith, et al: we should probably just create a wiki page for agenda items

[12:06:55.0000] <gsnedders>
FND, in case you see this in the logs: Chromium probably won't notice a new failing test currently. Hopefully that changes later this year.

[13:30:47.0000] <Domenic>
Yay Web IDL got namespaces! https://heycam.github.io/webidl/#idl-namespaces

[13:51:10.0000] <gsnedders>
does anyone have telemetry as to how often window.opener is read and has a non-null value?

[13:51:13.0000] <gsnedders>
AFAICT no?

[14:54:00.0000] <zcorpan>
/me subscribes to https://github.com/plinss/widlparser/issues/15

[14:59:07.0000] <zcorpan>
Domenic: namespace members can only be operations? looks like https://drafts.csswg.org/css-images-4/#elementsources uses a readonly attribute (maybe it can be changed, dunno about impl status)

[15:00:30.0000] <zcorpan>
seems not implemented in webkit/chromium/gecko

[15:05:42.0000] <zcorpan>
/me filed https://github.com/w3c/csswg-drafts/issues/428

[15:41:41.0000] <MikeSmith>
hsivonen: about the throttling you’re seeing it sounds like what I see when I try to get to any whatwg.org IPv6 addresses


2016-08-26
[22:23:31.0000] <FND>
gsnedders: I did indeed check the logs - and yeah, I intend to file a separate bug for affected browsers, but referencing this test case should make it easier (I hope?)

[22:56:04.0000] <annevk>
FND: tests help a lot

[22:57:43.0000] <FND>
is Ms2ger the right person to help me verify and, if necessary, clean up my test case?

[23:03:41.0000] <annevk>
FND: yeah, one of a couple

[23:05:34.0000] <FND>
roger, I'll try to catch him later today then

[00:56:27.0000] <MikeSmith>
what spec resticts window.parent.postMessage from working cross domain?

[00:56:42.0000] <MikeSmith>
context is http://stackoverflow.com/questions/39157921/javascript-cross-domain-postmessage-not-working/39158132#39158132

[00:56:53.0000] <annevk>
MikeSmith: hmm

[00:58:34.0000] <annevk>
MikeSmith: none I think

[00:59:55.0000] <MikeSmith>
oh

[01:00:03.0000] <MikeSmith>
so maybe his statement is just wrong

[01:00:29.0000] <annevk>
Code pasted there looks very confusing

[02:03:59.0000] <nox>
zcorpan: That CSS partial interface is wrong anyway, no?

[02:04:30.0000] <nox>
zcorpan: It defines elementSources has an instance attribute, and then the snippet does CSS.elementSources.set('fancy', bg);.

[02:05:34.0000] <zcorpan>
nox: yes, you're right

[02:06:23.0000] <nox>
zcorpan: Commented.

[02:06:35.0000] <zcorpan>
needs a "static"

[03:00:52.0000] <tobie>
Struggling with the following chunk of WebIDL which the spec says is OK, but Bikeshed parser seems to choke on:

[03:01:11.0000] <tobie>
https://www.irccloud.com/pastebin/0qhDcQ7K/

[03:02:28.0000] <tobie>
annevk: ^ does this seem to valid WebIDL to you?

[03:04:28.0000] <annevk>
tobie: yeah, for custom toJSON()

[03:04:48.0000] <annevk>
tobie: haven't seen that used thus far though

[03:05:04.0000] <tobie>
OK, so it seems its a Bikeshed parser shortcoming, then.

[03:05:59.0000] <nox>
tobie: Wrong return type maybe?

[03:06:19.0000] <tobie>
nox: no the parser lenient with that.

[03:06:25.0000] <tobie>
*is

[03:06:58.0000] <tobie>
/me double-checks

[03:07:00.0000] <nox>
Ok. :)

[03:07:24.0000] <tobie>
same issue with void ...

[03:08:10.0000] <annevk>
tobie: oh

[03:08:18.0000] <annevk>
tobie: maybe serializer cannot have a return type

[03:08:34.0000] <annevk>
tobie: that would kinda make sense for toJSON(), since it's always any

[03:09:05.0000] <annevk>
tobie: and might even follow from the IDL grammar, though I'm not great at reading it

[03:10:00.0000] <tobie>
annevk you're absolutely right

[03:10:14.0000] <tobie>
annevk: you're not great at reading it, but better than I. :(

[03:10:53.0000] <tobie>
annevk: ty!

[03:11:31.0000] <tobie>
annevk: that said, I'm a littler concerned that the ability to write WebIDL in the WebIDL spec depends on Bikeshed parser being compatible with it.

[03:11:49.0000] <tobie>
annevk: seems like this is going to be an issue as soon as new grammar constructs are defined.

[03:13:13.0000] <annevk>
tobie: I guess a little bit and it'll make large grammar changes harder as all the specs depending on bikeshed will need to be updated

[03:13:19.0000] <tobie>
annevk: we need to either coordinate Bikeshed IDL parser with WebIDL changes, or make the parser more leninant with grammar issues (i.e. not throw fatal errors)

[03:13:21.0000] <annevk>
tobie: but it's also kinda nice

[03:14:11.0000] <annevk>
tobie: coordinating should be fine I think, there's not too many changes (we should at some point make a bunch to make it more JS-y, but that needs a whole lot of coordination anyway)

[03:14:28.0000] <tobie>
I might be overthinking this. :)

[03:15:23.0000] <tobie>
Granted I spend the better part of Wednesday and Thursday fixing syntax errors in code examples (i.e. adding cruft around WebIDL snippets to make the parser happy)

[03:16:02.0000] <annevk>
That seems like a positive side effect actually

[03:16:08.0000] <tobie>
sort of up

[03:16:22.0000] <annevk>
Gonna get some food over here, ttyl

[03:18:05.0000] <tobie>
it's turning things like: "return-type identifier(arguments…);" in  http://heycam.github.io/webidl/#idl-operations

[03:18:15.0000] <tobie>
into:

[03:19:05.0000] <tobie>
https://www.irccloud.com/pastebin/96248oWO/

[03:19:16.0000] <jgraham>
https://bocoup.com/weblog/test262-is-a-javascript-sideshow is good fun

[03:19:26.0000] <tobie>
annevk I'm not sure it's a net win.

[03:19:40.0000] <jgraham>
Wonder if they want to do the same for some other parts of the platform :)

[03:19:44.0000] <tobie>
annevk: bon appétit!

[03:19:59.0000] <tobie>
jgraham: they'd love to. Just want to get paid for the work, though.

[03:20:06.0000] <tobie>
jgraham: :)

[03:20:32.0000] <tobie>
jgraham: I can do intros for a 15% commission. :D

[03:21:27.0000] <jgraham>
tobie: Yeah, not convinced I could find anyone to pay you agent fees :p

[03:22:30.0000] <jgraham>
But it doesn't seem impossible to find money to pay people to write tests for specific features if we know what we actually want

[03:24:08.0000] <tobie>
jgraham: commission jokes aside, I'll happily discuss this offline with you.

[04:15:49.0000] <annevk>
tobie: https://github.com/heycam/webidl/issues/147#issuecomment-242698431 Shepherd is mostly the external usage I guess, but other specs do use those values to link IDL terms

[04:16:29.0000] <annevk>
tobie: and DOM relies on a number of terms being exported, etc.

[04:36:33.0000] <terinjokes>
for the Preload link headers, can I URL encode the URL?

[04:36:34.0000] <terinjokes>
i assume that should work…

[04:37:50.0000] <tobie>
annevk: ok, I'll double check those. I assumed the only external guaranties were IDs.

[04:38:04.0000] <nox>
Did we specify yet that indexed getters must be accompanied with a 'length' attribute?

[04:38:46.0000] <annevk>
tobie: cool

[04:39:30.0000] <annevk>
nox: hmm, if that's always the case we should just codegen it

[04:39:40.0000] <nox>
annevk: What do you mean?

[04:39:59.0000] <nox>
annevk: https://github.com/heycam/webidl/issues/80

[04:40:02.0000] <annevk>
nox: no reason to declare a length attribute on each interface with an indexed getter

[04:40:17.0000] <nox>
annevk: I like that it makes it explicit.

[04:40:24.0000] <annevk>
nox: interface should just implement the indexed getter protocol and that's that

[04:40:47.0000] <annevk>
nox: a lot around indexed getters is rather implicit

[04:41:32.0000] <nox>
True.

[04:41:37.0000] <nox>
Wtf do the emoji labels mean btw?

[04:41:53.0000] <annevk>
easy now

[04:42:01.0000] <annevk>
I think tobie added those

[04:42:33.0000] <nox>
"easy now"?

[05:00:13.0000] <tobie>
nox: yeah, Marcos already complained. :)

[05:00:30.0000] <nox>
Oh, "easy now" because I said "wtf"?

[05:00:45.0000] <nox>
Yeah not angry, just was making clear I had absolutely no idea what they mean. :)

[05:01:26.0000] <tobie>
I need to either update the README or change those.

[05:01:42.0000] <tobie>
One's difficulty, the other one time.

[05:02:54.0000] <zcorpan>
1. have two cups of coffee. 2. wait. 3. ??? 4. profit!!!

[06:32:34.0000] <SimonSapin>
"Don’t fear the yellow screen of death", they say https://twitter.com/SimonSapin/status/769165462949289984

[06:42:51.0000] <annevk>
SimonSapin: http://codecino.com/2008/10/25/dont-fear-the-yellow-screen-of-death/ loads normally here

[06:43:24.0000] <SimonSapin>
in firefox?

[06:44:01.0000] <SimonSapin>
ah, it does for me too now

[06:44:30.0000] <SimonSapin>
still funny to me

[06:46:00.0000] <annevk>
SimonSapin: was it failing earlier today or some such?

[06:46:06.0000] <annevk>
SimonSapin: site doesn't look maintained

[06:46:26.0000] <SimonSapin>
yeah, this tweet has a screenshot I made a few minutes ago

[06:46:42.0000] <annevk>
weird then

[07:02:22.0000] <Guest25975>
https://github.com/rust-lang/rfcs/blob/master/text/1216-bang-type.md

[07:02:24.0000] <zcorpan>
SimonSapin: i got a parse error on first load. works on second load

[07:03:28.0000] <zcorpan>
seems on second load it's text/html ?

[07:16:21.0000] <FND>
Ms2ger: do you have a few minutes to discuss the WBT fetch test case?

[07:16:34.0000] <FND>
I wanna make sure I get it right before submitting a PR

[07:17:02.0000] <Ms2ger>
FND, don't have much time today; if you submit I can probably comment later

[07:17:45.0000] <FND>
Ms2ger: ok, no worries - will submit as WIP PR, mentioning you (@Ms2ger, I'm assuming?)

[07:19:09.0000] <Ms2ger>
Yep

[07:19:11.0000] <Ms2ger>
Thanks

[07:23:27.0000] <annevk>
There's no way for Travis to not email me?

[07:43:38.0000] <MikeSmith>
annevk: maybe only by configuring it in the .travis.yml https://docs.travis-ci.com/user/notifications/#Email-notifications

[08:52:51.0000] <rbyers>
smaug____: Hey, we're trying to match the spec (and almost Gecko) for firing 'click' only for the primary button

[08:53:45.0000] <rbyers>
But there are a few legitimate use cases for needing an event for middle-button click (overriding the browser built-in behavior) that we really can't just eliminate.  So we're proposing a new niche 'auxclick' event to replace those.  https://navidz.github.io/auxclick/

[08:55:07.0000] <rbyers>
Seem like a reasonable idea to you?  I'm sure there are details still to work out in the spec etc.

[08:59:29.0000] <smaug____>
rbyers: sorry, I haven't read the email thread in blink-dev yet. Kind of on vacation yesterday-today

[09:00:57.0000] <rbyers>
smaug____: No worries, it can wait until next week.

[09:01:10.0000] <smaug____>
rbyers: what are the use cases when web page needs middle-click?

[09:02:30.0000] <rbyers>
smaug____: We've ignored that the spec disagrees with blink, WebKit and Edge for a long time - trying to fix this, but if there's too much controversy than the pragmatic thing is probably to just undo this spec change that was made years ago and give up - saying click is for all buttons.  Bad for the user experience IMHO since developers don't normally think

[09:02:30.0000] <rbyers>
to check buttons (or modifiers)

[09:03:46.0000] <smaug____>
rbyers: but what are the use cases when web page needs to access middle click?

[09:04:06.0000] <smaug____>
and for right click contextmenu event might be usually enough

[09:04:35.0000] <smaug____>
(I haven't thought too much auxclick yet, but share some same worries that Domenic had in the email thread)

[09:06:05.0000] <smaug____>
/me was going to test Chrome and notices one of the biggest sites in Finland has broken layout in Chrome. perhaps some unusual setting in dev build

[09:06:17.0000] <smaug____>
rbyers: what does Chrome do with right clicks?

[09:08:49.0000] <smaug____>
I'm not getting click events for right click, nor middle click

[09:08:52.0000] <smaug____>
testing <a>

[09:32:51.0000] <smaug____>
hmm, is there any data about middle click usage

[09:35:37.0000] <smaug____>
rbyers: after thinking this couple of minutes, I guess auxclick should be fine. Hostile sites can already just not use anything which has default action for click or middle or such, and just manually trigger actions using click listener

[09:36:51.0000] <smaug____>
( rbyers: and FYI, it is http://www.yle.fi/ which is broken in Chrome 54dev)

[10:25:55.0000] <hsivonen>
MikeSmith: thanks. IPv6 being the difference seems plausible.

[10:35:29.0000] <rbyers>
smaug____:  Cool, thanks.  Yeah I don't see any practical way of dealing with "hostile" sites here, but we can greatly improve the accidental case - which I think is quite prevalent.

[10:35:55.0000] <rbyers>
If you wouldn't mind, can you send a quick note on the blink-dev thread saying that the basic idea seems OK to you?

[10:37:10.0000] <rbyers>
Maybe someday in the future we could even go further and say it's "auxclick" (not "click") that fires when modifier keys are down (since developers often make the same mistake there - treating click the same regardless of any modifier)

[10:52:59.0000] <gsnedders>
/me sitll wants to know what the use-cases are

[11:21:36.0000] <rbyers>
gsnedders: for auxclick?  They're pretty niche but do exist - eg. tabbed UIs often implement a "middle click on the tab to close it" UX

[11:23:43.0000] <rbyers>
Or we see some apps that can't (or choose not to) represent their actions with real links - eg. GMail "reply" button.  In those cases they might still want to do something special on middle click (eg. reply in a new window) so they need some sort of event for middle click.

[12:58:10.0000] <ShakespeareFan00>
Nice while it lasted - https://discourse.wicg.io/

[12:58:31.0000] <ShakespeareFan00>
Firfox won't connect :( Was going to talk about various porposals there


2016-08-28
[06:33:41.0000] <Tuipveus>
hi all

[06:36:12.0000] <Tuipveus>
I would like to make following: Draw SVG-graphics to browser according to data coming from server with websockets. So it is kind of like animation, based on the data received from server.

[06:37:40.0000] <Tuipveus>
is this doable with HTML5 + javascript + libwebsockets (running c-program which sends the values) ?

[06:39:25.0000] <Tuipveus>
I would be interested to hear any comments (what websocket to choose) and if there are some ready code or any good urls to check.

[08:54:07.0000] <Philip`>
When the validator says "Comments seen before doctype. Internet Explorer will go into the quirks mode.", which versions of IE does that mean?

[09:20:51.0000] <tantek>
likely all that support quirks vs "standards" mode

[09:21:06.0000] <tantek>
don't know for Edge

[09:44:27.0000] <Domenic>
Did ayg go on a rampage closing and deleting valid web platform test submissions?? He did to mine...

[09:47:17.0000] <annevk>
Yeah I don't understand and am somewhat upset

[10:46:43.0000] <gsnedder1>
Domenic, annevk, from #testing:

[10:46:43.0000] <gsnedder1>
15:01 < aryehgregor> Um, I might have done something wrong by mistake.

[10:46:44.0000] <gsnedder1>
15:01 < aryehgregor> I think I pushed to the wrong repo?

[11:24:27.0000] <Domenic>
gsnedders: any way to get https://github.com/w3c/web-platform-tests/pull/3452 back?

[11:24:47.0000] <Domenic>
And https://github.com/w3c/web-platform-tests/pull/3449

[11:26:39.0000] <annevk>
gsnedders: I will try to restore stuff tomorrow if there is not some backup plan

[11:27:01.0000] <annevk>
gsnedders: but this is a good time to start restricting master

[11:27:20.0000] <Domenic>
I don't even understand how this happened, this wasn't a push to master I don't think. This deleted *other* branches.

[11:35:23.0000] <Domenic>
Ah I found the "restore branch" button

[13:15:03.0000] <gsnedders>
Domenic, annevk: I thought I'd got everything back

[13:22:16.0000] <gsnedders>
Domenic, annevk: okay, definitely *everything* back now

[13:22:27.0000] <gsnedders>
Domenic: git push --mirror without understanding what --mirror does

[13:23:33.0000] <gsnedders>
annevk: we already have master disabling non-FF commits

[13:24:51.0000] <gsnedders>
Domenic: there was an assumption that git fetch --prune && git push --mirror wouldn't touch any existing commits

[13:24:59.0000] <gsnedders>
Domenic: which to me seems like a sensible assumption


2016-08-29
[19:05:39.0000] <MikeSmith>
Philip`: I guess we should change that validator "Comments seen before doctype. Internet Explorer will go into the quirks mode." message to be more specific. If I know for certain what IE versions that is true for, then I will add the info to that message.

[22:07:53.0000] <annevk>
gsnedders: thanks

[23:52:10.0000] <annevk>
I should have learned about git stash and git stash pop a little sooner

[02:41:59.0000] <annevk>
JakeA: I fixed some bikeshed stuff on Service Workers master

[02:42:12.0000] <annevk>
JakeA: I noticed there's still lots of issues left in the source

[02:42:41.0000] <annevk>
JakeA: e.g., each instance of `<a href="#dfn-` is a mistake of some sorts

[02:42:46.0000] <annevk>
JakeA: 702 matches

[02:45:17.0000] <annevk>
JakeA: oh, why is there both master and gh-pages?

[02:54:38.0000] <annevk>
Anyone know what the place is to file issues against Shepherd?

[03:01:04.0000] <JakeA>
annevk: ohh thanks. Agree there should only be one branch

[03:01:54.0000] <annevk>
JakeA: maybe you can fix that? I don't have admin access

[03:03:00.0000] <JakeA>
annevk: I'm on leave this week, but will post an issue

[03:03:37.0000] <annevk>
ah, I'm gonna be in the same boat soonish

[03:03:38.0000] <annevk>
enjoy

[03:05:18.0000] <JakeA>
Seems I don't have admin access anyway

[03:39:55.0000] <zcorpan>
MikeSmith: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/4421 - IE6..9 BackCompat. IE10..11 and Edge CSS1Compat

[03:41:09.0000] <MikeSmith>
zcorpan: thanks

[03:41:30.0000] <MikeSmith>
what is the difference between BackCompat and CSS1Compat?

[03:42:02.0000] <annevk>
MikeSmith: latter is standards mode

[03:42:09.0000] <annevk>
MikeSmith: former is quirks

[03:42:19.0000] <annevk>
MikeSmith: well, latter is no-quirks really

[03:48:30.0000] <annevk>
MikeSmith: thanks for https://github.com/w3c/ServiceWorker/issues/967

[03:48:43.0000] <annevk>
MikeSmith: generally if you see that missing anywhere and you can add it, it's a huge help

[03:56:52.0000] <MikeSmith>
annevk: OK

[03:57:31.0000] <annevk>
I'm not sure why, but I often end up on the GitHub repo trying to find my way to the corresponding spec

[04:52:11.0000] <MikeSmith>
I do too

[04:52:23.0000] <MikeSmith>
so I reckon a lot of other people do also

[06:31:39.0000] <annevk>
TabAtkins: don't really like you closing that issue; not sure you understood the whole thing

[07:25:05.0000] <SimonSapin>
https://en.wikipedia.org/wiki/ISO/IEC_8859-1 says "ISO-8859-1 is the IANA preferred name for this standard when supplemented with the C0 and C1 control codes", but I can’t find a source for that

[07:25:46.0000] <annevk>
SimonSapin: http://www.iana.org/assignments/character-sets/character-sets.xhtml?

[07:26:22.0000] <SimonSapin>
annevk: it lists ISO-8859-1 as ISO_8859-1:1987 and doesn’t seem to make a difference

[07:26:52.0000] <annevk>
SimonSapin: it has a preferred name field however that lists it

[07:27:23.0000] <annevk>
SimonSapin: oh, I guess IANA doesn't really make a judgment about C0/C1 necessarily, but also, don't care

[07:27:30.0000] <SimonSapin>
my understanding is that ISO/IEC 8859-1 leaves some bytes unassigned and ISO-8859-1 assigns controls to them

[07:27:32.0000] <annevk>
IANA is full of holes when it comes to encodings

[07:27:42.0000] <SimonSapin>
except I can’t find that define outside of wikipedia

[07:27:45.0000] <annevk>
I don't think that's correct

[07:28:52.0000] <SimonSapin>
annevk: ok, so taking a step back, is there a name for "convert 0x00...0xFF bytes to U+0000 U+00FF code points of the same value" ?

[07:29:10.0000] <annevk>
SimonSapin: I haven't been able to find a good one

[07:29:48.0000] <SimonSapin>
so wikipedia is wrong?

[07:29:54.0000] <annevk>
SimonSapin: somewhat annoyingly IDL describes it in terms of ISO-8859-1 but that doesn't make sense when the browser offers such a library

[07:30:11.0000] <annevk>
SimonSapin: I don't think there's a definitive answer one way or another there

[07:30:22.0000] <SimonSapin>
ok, thanks

[07:30:30.0000] <annevk>
I should file a bug against IDL

[07:30:43.0000] <SimonSapin>
(this is for documenting a Rust standard library conversion, not a web platform API)

[07:31:26.0000] <annevk>
Oh, IDL stopped doing that already

[07:40:58.0000] <annevk>
SimonSapin: if you think of a good name let me know

[07:41:03.0000] <annevk>
SimonSapin: WTF-latin1?

[07:41:08.0000] <SimonSapin>
hehe

[07:53:31.0000] <SimonSapin>
annevk: ah, found it. The IANA page links to https://tools.ietf.org/html/rfc1345 which despite what I first thought does define "&charset ISO_8859-1:1987" https://tools.ietf.org/html/rfc1345#page-63

[08:01:02.0000] <SimonSapin>
aaaah

[08:01:20.0000] <SimonSapin>
Microsoft defines code page 1252 with some unassigned values

[08:15:53.0000] <annevk>
Yeah, correct

[08:16:10.0000] <annevk>
Their error handling doesn't use FFFD

[08:16:17.0000] <annevk>
So weird

[08:39:03.0000] <SimonSapin>
I ended up writing https://github.com/SimonSapin/rust/blob/f040208d533e1d6d9ee0e0408ee74e26e14d1284/src/libcore/char.rs#L183-L200

[08:39:09.0000] <Tuipveus>
is there any multicast -implementations of websockets or is that even possible ?

[09:28:33.0000] <annevk>
wanderview: not sure what to do with your feedback, still think my PR helps

[09:44:24.0000] <wanderview>
annevk: fetch(newURL, evt.request) will blow up with your PR and current spec once browsers implement the Request window support, no?

[09:44:37.0000] <wanderview>
since evt.request.window will exist

[09:46:10.0000] <annevk>
wanderview: blow up how?

[09:46:36.0000] <wanderview>
annevk: step 10 in https://fetch.spec.whatwg.org/#dom-request

[09:47:35.0000] <annevk>
wanderview: Request has no window getter, so no?

[09:52:04.0000] <wanderview>
annevk: looking at those steps I have to wonder why RequestInit has a window attribute either... how can it ever be used?

[09:53:04.0000] <annevk>
wanderview: you can set it to null

[09:53:59.0000] <wanderview>
annevk: what I don't understand is why I can do new Request(oldRequest, {}) to override almost anything except the URL

[09:56:05.0000] <annevk>
wanderview: because that makes the API weird

[09:56:44.0000] <annevk>
wanderview: and it's not really overriding, it changes a whole lot of things

[09:58:14.0000] <annevk>
wanderview: I wouldn't reject a PR per se, but it seems rather icky

[14:18:08.0000] <rniwa>
Domenic: yt?

[14:18:20.0000] <Domenic>
rniwa: yeah

[14:18:46.0000] <rniwa>
Domenic: so it looks upgrading doesn't enqueue attributeChangedCallback for each attribute in upgrading case

[14:18:46.0000] <rniwa>
Domenic

[14:18:54.0000] <Domenic>
rniwa: it should, let me check...

[14:18:56.0000] <rniwa>
Domenic: and that's an issue

[14:19:16.0000] <rniwa>
Domenic: https://html.spec.whatwg.org/#dom-customelementregistry-define just says "enqueue a custom element upgrade reaction"

[14:19:24.0000] <rniwa>
Domenic: and that doesn't add any attribute changed callback

[14:19:52.0000] <rniwa>
Domenic: oh, https://html.spec.whatwg.org/#concept-upgrade-an-element itself does that

[14:19:55.0000] <Domenic>
rniwa: I think it happens automatically in some other place, same as connectedCallback, let me check

[14:20:05.0000] <Domenic>
Ah yeah there it is

[14:20:44.0000] <rniwa>
Domenic: that makes sense because other upgrade callback could modify attributes on other elements (although they shouldn't be doing that)

[14:21:06.0000] <Domenic>
Right, I remember trying to keep them together and then finding out that doesn't work for subtle reasons

[14:21:27.0000] <rniwa>
Domenic: so I know you guys are eager to ship this thing soon-ish

[14:21:36.0000] <rniwa>
Domenic: so I'm trying to finish up my impl by TPAC

[14:21:58.0000] <rniwa>
Domenic: it would be great if we can make sure we're on the same page by comparing our impl at TPAC

[14:22:27.0000] <Domenic>
rniwa: awesome!! Yeah I think it got approval to ship in Chrome 54. I know Dominic Cooney would love to meet up at TPAC and compare notes.

[14:22:36.0000] <rniwa>
Domenic: cool

[14:22:43.0000] <rniwa>
Domenic: is he coming to TPAC?

[14:22:46.0000] <Domenic>
Yeah

[14:23:03.0000] <Domenic>
Oh and we've been upstreaming the tests, I'm supposed to merge those to WPT, let me do that..

[14:23:24.0000] <rniwa>
Domenic: that's great

[14:23:43.0000] <Domenic>
Hmm I guess there are unaddressed review comments (https://github.com/w3c/web-platform-tests/pull/3477), I'll ping

[14:25:42.0000] <rniwa>
Domenic: we have quite a few tests now: https://trac.webkit.org/browser/trunk/LayoutTests/fast/custom-elements/

[14:25:50.0000] <rniwa>
Domenic: so I want to upstream them as well

[14:26:33.0000] <Domenic>
rniwa: Oh those look lovely, very nice

[14:32:32.0000] <Domenic>
rniwa: do we have an agenda for web components day yet somewhere? I know we'd like to talk about new-and-improved HTML imports/modules, and I think it would be interesting to talk through https://github.com/w3c/webcomponents/issues/468 and https://github.com/w3c/webcomponents/issues/176 and maaaaybe https://github.com/w3c/webcomponents/issues/113


2016-08-30
[01:35:48.0000] <annevk>
git submodule update --init --recursive <3

[01:35:59.0000] <annevk>
/me finally remembers where to find that line

[02:57:13.0000] <zcorpan>
MikeSmith: it appears an IE conditional comment before the doctype does not cause quirks mode. I wonder if the warning is at all helpful anymore

[03:06:38.0000] <zcorpan>
MikeSmith: https://github.com/validator/htmlparser/pull/2

[03:33:04.0000] <zcorpan>
was there a deliberate reason "con" wasn't chosen over "const" in JS? or was that never on the table?

[03:36:15.0000] <annevk>
zcorpan: wasn't that just taken from C?

[03:37:05.0000] <zcorpan>
i don't know the history of JS's const :-)

[03:37:22.0000] <zcorpan>
/me finds PBASIC has a "CON" keyword for constants

[03:40:29.0000] <hasather>
zcorpan: I think they chose it because several engines had already implemented "const" for years

[03:41:21.0000] <zcorpan>
hasather: ok

[03:42:25.0000] <hasather>
zcorpan: https://twitter.com/awbjs/status/699285374737121281

[03:45:20.0000] <zcorpan>
thanks

[04:02:13.0000] <smaug____>
how do I follow some github issue?

[04:02:31.0000] <AutomatedTester>
smaug____: on the right there is a subscribe button

[04:02:49.0000] <smaug____>
aha, thanks

[04:08:24.0000] <jgraham>
con is a really unfortunate name though :)_

[04:44:41.0000] <nox>
zcorpan: "con" is like Rust's "ret" in the beginning: a bad idea. :P

[04:54:36.0000] <zcorpan>
make it "pro" :-)

[05:38:28.0000] <zcorpan>
83769:  <em>can</em> at least be retrofitted for offline use using the <span

[05:38:37.0000] <zcorpan>
is that "retrofit" in en-US? annevk

[05:38:46.0000] <zcorpan>
https://localize.drupal.org/node/420

[05:39:57.0000] <zcorpan>
tick mark -> check mark also

[05:40:16.0000] <annevk>
zcorpan: hmm dunno

[05:41:31.0000] <zcorpan>
(though the spec's "tick mark"s are not check marks)

[06:01:26.0000] <annevk>
compareDocumentPosition() 😟

[09:45:47.0000] <Riddhik11>
Hi

[09:46:26.0000] <Riddhik11>
I am looking for help to start contributing at https://github.com/whatwg/html project

[10:30:08.0000] <Domenic>
Riddhik11: hi, awesome! How can we help?

[10:31:04.0000] <Domenic>
Riddhik11: did you see https://github.com/whatwg/html/labels/good%20first%20bug ? I think https://github.com/whatwg/html/issues/1582 is an especially good one.

[16:10:42.0000] <TabAtkins>
zcorpan, annevk: Per my english, "retrofit" is a standard verb, and conjugates to "retrofitted" in that circumstance.

[16:42:01.0000] <GPHemsley>
TabAtkins: Do you know offhand how many Syntax-compliant CSS parsers there are?

[16:44:20.0000] <GPHemsley>
SimonSapin: Same question to you ^

[16:45:30.0000] <SimonSapin>
GPHemsley: a few are listed at https://github.com/SimonSapin/css-parsing-tests#projects-using-this

[16:45:39.0000] <SimonSapin>
I think TabAtkins has written one in JS

[16:45:54.0000] <GPHemsley>
cool, thanks for already having curated a list :)

[16:45:59.0000] <TabAtkins>
https://github.com/tabatkins/parse-css

[16:46:10.0000] <SimonSapin>
GPHemsley: I have no idea if this is exhaustive of course

[16:46:30.0000] <SimonSapin>
I can’t answer "how many" since it’s quite possible someone has written one and not told me about it

[16:47:13.0000] <GPHemsley>
sure

[16:47:25.0000] <GPHemsley>
that was just the best way I could come up with to phrase the question

[16:47:39.0000] <GPHemsley>
I've gotten the answers I was looking for :)

[16:47:45.0000] <SimonSapin>
:)

[16:49:34.0000] <smaug____>
anyone with webkit?

[16:49:38.0000] <smaug____>
well, Safari I guess

[16:51:12.0000] <smaug____>
what does data:text/html,<script>document.write("onafterprint" in window)</script> say there?


2016-08-31
[17:14:59.0000] <jyasskin>
smaug____: false, on Safari 9.1.2

[21:43:44.0000] <annevk>
Also in Safari Technology Preview (which also claims to be 9.1.2)

[03:42:45.0000] <smaug____>
hmm, what is :focus-within

[03:43:24.0000] <smaug____>
oh, I see

[04:42:42.0000] <Ms2ger>
annevk, could you have a look at https://github.com/w3c/web-platform-tests/pulls?q=is%3Apr+is%3Aopen+label%3Afetch ?

[05:48:45.0000] <jgraham>
brexit is making TPAC expensive :(

[06:52:48.0000] <smaug____>
mounir: ping

[06:55:14.0000] <smaug____>
or who might know about chromecast stuff

[07:14:20.0000] <nox>
Is there any NoInterfaceObject in the platform that is not used as a mixin?

[07:15:21.0000] <Domenic>
nox: I think there are several that are mistakenly that way but we've been trying to stamp them out

[07:15:31.0000] <nox>
Ok thanks.

[10:32:35.0000] <annevk>
https://bugs.webkit.org/show_bug.cgi?id=161364 WebKit is implementing the URL Standard \o/

[10:33:11.0000] <annevk>
New Safari preview had tons of DOM fixes

[10:33:21.0000] <annevk>
Very cool

[10:34:13.0000] <wanderview>
also appears STP 12 has Response.body ReadableStream

[10:34:16.0000] <wanderview>
Domenic: ^^^

[10:47:44.0000] <annevk>
And fetch() by default

[11:01:54.0000] <KiChjang>
which browser currently is the most standards-compliant?

[11:10:29.0000] <annevk>
Could someone maybe get in touch with https://twitter.com/reconbot/status/768453636930297856?

[11:10:55.0000] <annevk>
Seems there's interest in rebooting the serial work…

[11:11:52.0000] <annevk>
KiChjang: not sure there's a good answer to that

[11:13:22.0000] <annevk>
I guess I can reply to the tweet

[11:13:44.0000] <nox>
KiChjang: MOSAIC

[11:45:41.0000] <smaug____>
igrigorik: is preload supposed to be supported in shadow DOM?

[11:50:52.0000] <Domenic>
I wonder what the overlap is between the serial port API and Web USB. jyasskin have you seen https://whatwg.github.io/serial/ ? I guess it's something marcos started a while back that didn't make it past incubation?

[11:53:04.0000] <Domenic>
That is great about WebKit and the URL spec

[12:01:01.0000] <smaug____>
annevk: what does "report"  mean in https://fetch.spec.whatwg.org/#concept-request-destination ?

[12:03:54.0000] <smaug____>
lovely, preload spec misses the main part, how the cache actually should work :) "Add request to preload response cache (TODO). "

[12:04:00.0000] <smaug____>
good that the "spec" is already implemented

[12:04:24.0000] <jyasskin>
Domenic: Yes, serial is a more limited API than WebUSB, but also doesn't have its security feature of requiring the device to opt in.

[12:05:53.0000] <Domenic>
jyasskin: yeah, that was about my guess. I suppose we should probably try to redirect some of that community interest around serial into Web USB... I think people stumbled upon the repo without being aware of the larger picture.

[12:06:44.0000] <jyasskin>
There are also ways to connect serial things over non-USB transports, so it's not exactly replaced by WebUSB.

[12:08:03.0000] <Domenic>
Hmm I see, I wonder if people are using that

[12:08:40.0000] <Domenic>
(I originally was super confused by the word "serial" in all this, five years ago when I first heard about this in the Node.js community. I was like... didn't we get rid of serial ports in the 1990s?)

[12:11:02.0000] <rniwa>
Domenic, annevk: did you see https://github.com/w3c/webcomponents/issues/560 ?

[12:11:26.0000] <Domenic>
rniwa: yeah. Not sure what I think about it yet.

[12:11:36.0000] <rniwa>
Domenic: this is a big blocker for us

[12:11:50.0000] <rniwa>
Domenic: In fact, we probably need to violate this part of the spec if the spec doesn't change

[12:12:47.0000] <Domenic>
rniwa: OK, I can try to prioritize higher. I need to sit down and figure out if I care of if I don't; if the latter then we should just change to make it easier for WebKit, and if the former I'd like to have some discussion first :)

[12:13:08.0000] <rniwa>
Domenic: ok, thanks

[14:23:51.0000] <botond_>
Is there an editor that syntax-highlights Bikeshed (.bs) files?

[14:26:23.0000] <jyasskin>
botond: I use web-mode in emacs.

[14:27:15.0000] <jyasskin>
It doesn't highlight Bikeshed's dedicated syntax, but the HTML's nice.

[14:29:30.0000] <TabAtkins>
botond: Included in the Bikeshed repo is an (out-of-date, but still useful) .tmLanguague file for Bikeshed. A lot of editors can use that.

[14:30:18.0000] <botond>
TabAtkins: do you know of an open-source editor (not Sublime or Textmate) that can use it?

[14:30:48.0000] <TabAtkins>
I only use Sublime, so no, I don't.

[14:31:47.0000] <TabAtkins>
Looks like Ace and Atom have converters for tmLanguage

[14:34:10.0000] <botond>
TabAtkins: i guess it's not the easiest language to highlight, containing as it does snippets of various other languages

[14:34:28.0000] <TabAtkins>
Meh. Depends on how high-fidelity you want.

[14:34:43.0000] <TabAtkins>
Getting basic tag support for HTML is sufficient for me.

[14:35:26.0000] <botond>
TabAtkins: i tried the .tmLanguage file in an evaluation version of sublime, and it does help. thanks!

