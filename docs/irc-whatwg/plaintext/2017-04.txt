2017-04-01
[17:53:12.0000] <MikeSmit1>
Domenic: about rel=canonical, I added use counters to the HTML checker for a bunch more rel values

[17:53:15.0000] <MikeSmit1>
https://validator.w3.org/nu/stats.html

[17:54:15.0000] <MikeSmith>
rel=canonical is tied for 3rd place as most commonly used

[17:54:45.0000] <MikeSmith>
rel=stylesheet found 118918 0.831269

[17:55:05.0000] <MikeSmith>
rel=icon found 82216 0.574712

[17:55:26.0000] <MikeSmith>
rel=canonical found 46503 0.325069

[17:56:07.0000] <MikeSmith>
rel=alternate found 46417 0.324467

[17:57:35.0000] <MikeSmith>
next closest is rel=nofollow

[17:57:48.0000] <MikeSmith>
rel=nofollow found 34354 0.240144

[17:58:27.0000] <MikeSmith>
after that, usage for the rest drops down to under 10% each

[18:53:07.0000] <MikeSmith>
I’ll let it run til some time next week when it reaches a million requests or so, then update the issue with that data then

[19:06:38.0000] <smaug>
anyone around who would know how React is implemented?

[19:08:24.0000] <smaug>
in particular what kinds of connections if has from its JS structures to native DOM

[19:25:20.0000] <Domenic>
MikeSmith: awesome stuff, great to make data-driven spec changes

[19:25:36.0000] <MikeSmith>
yeah

[19:26:08.0000] <MikeSmith>
Domenic: I can put together a PR for adding it

[19:26:29.0000] <MikeSmith>
unless you beat me to it

[19:26:47.0000] <MikeSmith>
though I have a small backlog I need to work through first

[19:27:19.0000] <MikeSmith>
(need to finish responding to the link-section reorg PR you reviewed)

[19:27:50.0000] <MikeSmith>
smaug: stackoverflow?

[19:28:19.0000] <smaug>
hmm, would that really know about React's implementation details?

[19:28:37.0000] <smaug>
/me was hoping some FB folks to be here

[19:32:05.0000] <MikeSmith>
smaug: can’t recall seeing any FB folks around here

[19:32:22.0000] <MikeSmith>
they probably have some Slack channel instead

[19:32:33.0000] <smaug>
--slack

[19:33:10.0000] <MikeSmith>
/me has never ever used Slack

[19:33:17.0000] <MikeSmith>
smaug: https://facebook.github.io/react/community/support.html

[19:33:22.0000] <MikeSmith>
> Many developers also hang out in #reactjs on Freenode.

[19:33:30.0000] <smaug>
oh

[19:33:38.0000] <smaug>
thanks

[19:33:48.0000] <MikeSmith>
also:

[19:33:49.0000] <MikeSmith>
If you need an answer right away, check out the Reactiflux Discord community

[19:34:00.0000] <MikeSmith>
https://discordapp.com/invite/0ZcbPKXt5bZjGY5n

[19:36:04.0000] <smaug>
don't need it right away

[19:36:16.0000] <smaug>
I'm just thinking some browser implementation optimizations

[19:36:22.0000] <smaug>
related to memory management

[19:36:50.0000] <smaug>
and since React is probably the JS framework popular this year, would like to understand how it works

[03:04:14.0000] <mathiasbynens>
/me wipes tear from eye @ https://github.com/w3c/web-platform-tests/pull/5311/files#diff-db925f820865491b0c961d39e127611cR25


2017-04-02
[21:55:35.0000] <domfarolino>
When "fetch"ing cross-origin, a server's set-cookie header will only take effect (cookies getting set) with {credentials: "include"} right? "omit" will neither send cookies NOR set cookies from the server right?

[21:58:27.0000] <annevk>
domfarolino: yup

[21:59:00.0000] <annevk>
domfarolino: for omit also the case same-origin

[21:59:27.0000] <domfarolino>
annevk: right ☑️

[01:02:03.0000] <tobie>
botie, tell smaug to ping tobie for intros to react team members.

[01:02:03.0000] <botie>
will do


2017-04-03
[17:37:49.0000] <JakeA>
Domenic: are you joining us today?

[17:39:00.0000] <Domenic>
JakeA: yep, on my way

[17:39:33.0000] <Domenic>
Was assuming the first hour or so of issue triage wouldn't need me

[17:39:58.0000] <JakeA>
Domenic: we'll save some environment settings object stuff for you

[17:40:18.0000] <Domenic>
Oh goodie :)

[08:23:20.0000] <botie>
smaug, at 2017-04-02 08:02 UTC, tobie said: ping tobie for intros to react team members.


2017-04-04
[00:42:03.0000] <hsivonen>
When XPIDL says an argument is [array, size_is(aLength)] in uint8_t aBytes, is an ArrayBuffer accepted from a JS caller?

[00:42:20.0000] <hsivonen>
oops. wrong channel. sorry.

[08:24:20.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5000 has different results in webkit, chromium, and gecko. :-( do you know if it's tested and reported?

[08:31:09.0000] <annevk>
zcorpan: not sure about ??

[08:32:43.0000] <annevk>
zcorpan: url/setters_tests.json (or some such) should make that clear (the corresponding HTML resource tests <a>, <area>, and URL

[08:36:58.0000] <zcorpan>
annevk: there's "new_value": "??lang=fr",

[08:37:08.0000] <zcorpan>
and "new_value": "?",

[08:37:55.0000] <zcorpan>
which i think covers the buggyness in webkit and chromium

[08:48:54.0000] <zcorpan>
https://bugs.chromium.org/p/chromium/issues/detail?id=682150#c7

[08:58:46.0000] <zcorpan>
https://bugs.webkit.org/show_bug.cgi?id=170452

[09:45:16.0000] <MikeSmith>
TabAtkins: Is there any CSS spec that defines what it means for a UA to “apply styles”?

[09:45:24.0000] <MikeSmith>
the context is https://html.spec.whatwg.org/#attr-style-media

[09:45:32.0000] <MikeSmith>
> The media attribute says which media the styles apply to. The value must be a valid media query list. The user agent must apply the styles when the media attribute's value matches the environment and the other relevant conditions apply, and must not apply them otherwise.

[09:46:26.0000] <MikeSmith>
in “The user agent must apply the styles” the “apply the styles” part does not link to any definition anywhere

[09:47:00.0000] <MikeSmith>
also at https://html.spec.whatwg.org/#interactions-of-styling-and-scripting

[09:47:18.0000] <MikeSmith>
> When a style sheet is ready to be applied, its style sheet ready flag must be set.

[09:47:44.0000] <MikeSmith>
“to be applied” does not link to any definition anywhere

[09:48:19.0000] <MikeSmith>
and within https://html.spec.whatwg.org/#the-link-element

[09:48:36.0000] <MikeSmith>
> The exact behavior for links to external resources depends on the exact relationship, as defined for the relevant link type. Some of the attributes control whether or not the external resource is to be applied (as defined below).

[09:49:06.0000] <MikeSmith>
“the external resource is to be applied” does not link to any definition anywhere

[09:49:33.0000] <TabAtkins>
MikeSmith: Nah, "apply styles" is just English for, uh, applying styles.

[09:49:58.0000] <TabAtkins>
"ready to be applied" should probably get a dfn somewhere, I agree.

[09:50:50.0000] <MikeSmith>
OK

[09:51:29.0000] <MikeSmith>
well as far as that “external resource is to be applied”, I wonder if we actually have any types of external resources other than CSS stylesheets that do get “applied”

[09:52:24.0000] <MikeSmith>
seems like, e.g., rel=icon doesn’t cause anything to be “applied”

[09:52:40.0000] <TabAtkins>
It "applies" the icon to the tab?

[09:53:54.0000] <MikeSmith>
I guess so but that seems like stretching the normal meaning of the word

[09:54:17.0000] <TabAtkins>
eh

[09:54:24.0000] <MikeSmith>
I think that language has been there in the spec that way since the very beginning

[11:19:29.0000] <annevk>
zcorpan++

[13:52:13.0000] <tobie>
I have an interface that has state we don't want expose for now (it'll reside in a slot). What should I use for this?

[13:55:35.0000] <TabAtkins>
tobie: What do you mean?

[13:57:13.0000] <tobie>
TabAtkins: well originally, it was an enum. Now that it's no longer exposed, what should it be turned into?

[13:57:27.0000] <tobie>
TabAtkins: just infra strings?

[13:57:55.0000] <TabAtkins>
Yeah.

[13:58:00.0000] <TabAtkins>
Or, you don't need actual strings.

[13:58:08.0000] <TabAtkins>
Just *handwave* values.

[14:07:35.0000] <tobie>
TabAtkins: do you just turn them into regular dfns in Bikeshed?

[14:08:39.0000] <TabAtkins>
No, slots should be dfn'd as IDL attributes, ideally with `[[...]]` names.

[14:08:47.0000] <TabAtkins>
Then you can ref them like `{{[[foo]]}}`

[14:08:54.0000] <TabAtkins>
Which is an unfortunate level of stacking, but hey.

[14:10:02.0000] <tobie>
what about the values?

[14:10:58.0000] <tobie>
No linking, just ""?

[14:12:09.0000] <TabAtkins>
Depends on if you think they're useful to link or not.  If so, yeah, probably make them "dfn" type, with a `for` to help scope them.

[14:12:31.0000] <tobie>
makes sense. thanks.

[14:17:42.0000] <tobie>
So <dfn interface>\[[state]]</dfn>?

[14:22:33.0000] <TabAtkins>
<dfn attribute for=Foo>\[[state]]</dfn>

[14:23:56.0000] <tobie>
ty

[14:27:25.0000] <KiChjang>
does anyone here know what webkit uses as their javascript engine?

[14:30:59.0000] <TabAtkins>
JavaScriptCore

[14:42:57.0000] <tobie>
Considering three states "idle", "activating" and "activated", which one would you favor?

[14:42:57.0000] <tobie>
a) If |sensor_state| is either "activating" or "activated", then return.

[14:42:57.0000] <tobie>
b) If |sensor_state| is not "idle", then return.

[14:42:57.0000] <tobie>
c) Unless |sensor_state| is "idle", return.

[14:43:17.0000] <KiChjang>
my pick is a)

[14:43:20.0000] <TabAtkins>
a

[14:43:51.0000] <KiChjang>
speaking as an implementor, this is the least confusing statement

[14:44:35.0000] <tobie>
KiChjang: you mean the clearest?

[14:44:40.0000] <tobie>
;)

[14:45:19.0000] <tobie>
Alright a) it is. Thanks!

[14:47:24.0000] <KiChjang>
yes, my other pet peeve when reading a spec like this is that usually the definition of the possible states are elsewhere

[14:48:09.0000] <KiChjang>
and being a live document, it doesn't necessarily have to stay constant through time - we may add more states as necessary in the future

[15:11:18.0000] <TabAtkins>
Yup, that's exactly my reasoning too - the states can change, and (a) is least subject to accidentally changing meaning due to the editor forgetting to update the reference.

[16:37:08.0000] <jyasskin>
tobie: `1. If |sensor_state| is either "activating" or "activated", then return. 2. Assert: |sensor_state| is "idle". 3. …`

[16:38:26.0000] <TabAtkins>
Or "Otherwise, |sensor_state| is "idle": ..."

[16:41:02.0000] <jyasskin>
Bikeshed gives "Assert:" nice styling. ;)

[16:41:08.0000] <jyasskin>
But I don't care much. :)

[16:44:14.0000] <TabAtkins>
Oh yeah, I forgot about that.


2017-04-05
[17:09:39.0000] <MikeSmith>
TabAtkins: https://stackoverflow.com/questions/43215834/what-is-mean-of-participate-in-definition-of-normal-flow-in-w3-spec

[20:57:54.0000] <annevk>
The above very much depends on the new state, might well be that b is more future proof, but in reality you likely have to vet everything

[07:23:39.0000] <tobie>
annevk: related to the houdini thread you @-mentioned me in (https://github.com/w3c/css-houdini-drafts/issues/239), would like your thoughts on https://github.com/heycam/webidl/pull/332

[07:24:48.0000] <annevk>
tobie: I think I'd prefer just moving it as much as possible to its own section, apart from syntax bits and such of course which should be inlined

[07:25:14.0000] <annevk>
tobie: I don't really think we need to then hide that section

[07:26:19.0000] <tobie>
annevk: OK, I'll see if that's doable. iirc the problem is you have legacy stuff both in the language and bindings part

[07:26:55.0000] <tobie>
annevk: which makes the whole thing hard to move

[07:27:05.0000] <tobie>
annevk: will give it a go a report back

[07:27:35.0000] <annevk>
tobie: I see, I guess the other thing I'd note is that this doesn't seem like a huge priority

[07:28:33.0000] <annevk>
tobie: part of the problem with index/named getters is that they're not marked "legacy" so folks still pick them up; I think if we more clearly marked them in syntax they wouldn't be picked up as much

[07:28:40.0000] <annevk>
tobie: at least folks don't pick up the other legacy bits

[07:29:25.0000] <tobie>
Well, it's a frequent point of contention, so heads up in the spec function as social lubricant.

[07:30:52.0000] <annevk>
I think indexed getter is the main one that is still somewhat contentious and that's because TabAtkins never participated in the long debate we've had on it and nobody else seems to really remember it much or maybe nobody wants to talk about it again

[07:31:04.0000] <annevk>
But indexed getter is also not marked legacy

[07:31:05.0000] <botie>
okay, annevk.

[07:31:10.0000] <annevk>
botie: no

[07:31:11.0000] <botie>
annevk: i'm not following you...

[07:33:00.0000] <tobie>
annevk: fwiw, greying out stuff in the spec is faster than renaming everything downstream. As a stopgap measure.

[07:33:06.0000] <TabAtkins>
Man, I remember those debates, don't even play.

[07:33:39.0000] <TabAtkins>
But yeah, it's not marked legacy, and new features are defined to depend on it, so what is a person supposed to think?

[07:34:00.0000] <annevk>
Other than CSSOM no new features that I'm aware of

[07:34:26.0000] <TabAtkins>
I mean in WebIDL - value iterators

[07:35:09.0000] <annevk>
I think we mainly added value iterators for legacy interfaces, but we should have more clearly indicated that

[07:35:27.0000] <annevk>
They were the new ArrayClass for NodeList and such

[07:36:03.0000] <TabAtkins>
No, kv iterators have non-legacy usecases, v iterators have exactly the same.

[07:54:40.0000] <TabAtkins>
Seriously, we're in a bind here. We want array-likes, so we try to reach for the best thing available - indexed getters/setters - and get smacked down for them being bad (but not marked as bad, so how was anyone to know?).

[07:55:14.0000] <TabAtkins>
Then we reach for the second-best thing - value iterator, so people can at least turn the object into an array easily - and whoops that requires us to implement indexed getters again.

[07:56:31.0000] <TabAtkins>
Then I'm like "welp, what if I hack around this by using a kv iterator instead, that doesn't depend on broken legacy-but-not-marked-as-such features" and get yelled at for hacking around a problem.

[07:57:48.0000] <TabAtkins>
I really can't win here. :(

[07:58:18.0000] <annevk>
TabAtkins: I hear you, I wish Domenic could make some time and I really wish arv was still around since he felt pretty strongly about all this

[07:59:23.0000] <TabAtkins>
Easiest path to something useful is to fix value iterators to just be value iterators, not a sneaky backdoor into full Proxies for no reason.

[07:59:43.0000] <TabAtkins>
There's literally no reason for value iterators to be built on top of indexed getters right now, it's all downside and makes the feature more complicated.

[08:01:07.0000] <TabAtkins>
As far as I can tell, the current reason is just "there were some subtle details we couldn't agree on, so instead of answering them, let's just rebase this on top of an existing feature that we presumably are already okay with the details of".

[08:01:26.0000] <annevk>
TabAtkins: I see

[08:01:32.0000] <TabAtkins>
But I answered those subtle details, at least the ones the bz brought up, in the thread - feel free to crib my answers.

[08:01:58.0000] <annevk>
TabAtkins: if value iterators are all we need and Domenic is okay with the overall API shape we should just do that

[08:02:12.0000] <annevk>
TabAtkins: do we have a bug about separating them from getters?

[08:02:23.0000] <TabAtkins>
Yeah. It's not *ideal*, but it lets people do `let arr = [...cssomThing];`

[08:02:35.0000] <TabAtkins>
One of the bugs had me and bz discussing that, let me go track it down.

[08:03:49.0000] <TabAtkins>
Yeah, end of https://github.com/heycam/webidl/issues/291

[08:04:00.0000] <TabAtkins>
The "Remove [LegacyArrayClass]" bug

[08:09:00.0000] <annevk>
TabAtkins: https://github.com/heycam/webidl/issues/338

[08:36:57.0000] <frivoal>
Hi, I'm reviewing a test that seems sensible, but there are 2 non essential parts of it I am not sure which spec justifies. (1) Is there any spec that says that if you make a focused element display:none, it must keep the focus? (2) Is there any spec that says that if you call the .focus() method on a display:none element, it must not get focused?

[08:37:44.0000] <annevk>
frivoal: HTML would define the latter, the former would be implied

[08:38:06.0000] <annevk>
(if nothing says you can lose focus, it won't be lost)

[08:39:39.0000] <frivoal>
annevk: thanks for confirming the former part. For the HTML, do you know it does say that, or do you merely suspect it does? I've tried reading that section, but I got lost trying to follow definitions I did not previously know.

[08:40:05.0000] <frivoal>
I can get to the bottom of it if needed, but if someone already knows the answer that's easier :)

[08:43:59.0000] <annevk>
frivoal: I'll have a look

[08:44:05.0000] <frivoal>
thanks

[08:45:34.0000] <annevk>
frivoal: per step 1 of https://html.spec.whatwg.org/multipage/interaction.html#focusing-steps the element needs to be rendered (unless it meets some special condition which I guess it doesn't meet in this test)

[08:47:17.0000] <frivoal>
isn't that sentence only about dialog elements. am I failing to parse the nesting in that sentence?

[08:48:30.0000] <annevk>
frivoal: I guess you're right, but even then you end up at otherwise since there's no scrollable area

[08:49:42.0000] <annevk>
frivoal: although I guess you can argue it's a focusable area, so yeah, maybe 2 is not defined

[08:50:07.0000] <annevk>
frivoal: it does seem like 2 not being defined would be a bug in HTML (if we indeed don't want focusing for those cases)

[08:50:21.0000] <frivoal>
it seems reasonable and interoperable, but I just had a hard time finding hard backing for it in the spec

[08:50:56.0000] <frivoal>
oh, no, actually I think we get there

[08:51:46.0000] <frivoal>
must be "a focusable area" and definition of "focusable area" includes being rendered

[08:51:49.0000] <frivoal>
so we're good

[08:54:54.0000] <frivoal>
thanks

[08:57:25.0000] <annevk>
Oh, the dfn of the element and its actual definition are a bit apart

[08:57:32.0000] <annevk>
Hmm, don't like that so much

[09:19:34.0000] <zcorpan>
annevk: how about <dfn><var>features</var> separators</dfn>?

[09:20:43.0000] <zcorpan>
or maybe just <dfn>feature separators</dfn>

[09:35:29.0000] <annevk>
zcorpan: I guess that or adding window in front of the others

[09:35:42.0000] <annevk>
zcorpan: I don't care strongly, seems like something Domenic might care about

[11:00:46.0000] <annevk>
TabAtkins: you might want to encourage the CSS WG to do some triage now and then, none of https://github.com/w3c/css-houdini-drafts/pulls has some reason listed why they're not applied

[11:01:10.0000] <annevk>
TabAtkins: and they're all pretty old

[11:05:22.0000] <tantek>
that would be the Houdini TF

[12:10:52.0000] <bterlson>
Interested in TC39 & ECMAScript goings-on? /join #tc39

[12:15:06.0000] <TabAtkins>
f'ing network spammers

[12:15:07.0000] <TabAtkins>
:p

[12:15:54.0000] <bterlson>
They're the worst!!

[13:53:09.0000] <smaug>
rbyers: do you happen to know if it is a known issue that Chrome 59 on up-to-date Fedora 25 has somehow broken high dpi handling

[13:53:16.0000] <smaug>
the UI is super tiny

[13:53:41.0000] <smaug>
it was working fine earlier today, but then I updated Fedora and Chrome

[14:15:46.0000] <rbyers>
smaug: No that's news to me.  I'll look for a bug.  I know high-dpi on Linux hasn't been super-well supported (where Linux is different from ChromeOS anyway).

[14:16:59.0000] <rbyers>
smaug: Don't see one from a quick search.  Please file a bug with details (eg. may be WM-specific or something, like so many Linux-specific UI/events issues)

[14:18:41.0000] <smaug>
ok. will file

[14:18:49.0000] <smaug>
thanks

[15:44:18.0000] <nox>
annevk: Isn't the Fetch spec wrong to not skip all body-related steps when request's mode is "websocket"?


2017-04-06
[19:21:06.0000] <gsnedders>
there are some specs I really wish that gave a simple one or two line description of what a function does, instead of just giving a formal definition

[19:21:26.0000] <gsnedders>
because it's far harder to work out what something does from a hundred lines of prose than two sentences.

[20:10:12.0000] <annevk>
nox: does it matter? If so, maybe

[20:14:32.0000] <domfarolino>
gsnedders: yeah I've found MDN/Web Fundamentals documentation to somewhat provide that, that is a less "precise" layman definition of formal spec language sorta

[20:28:16.0000] <annevk>
gsnedders: file a bug? Usually means an introduction is missing

[21:27:07.0000] <tantek>
yup good point

[21:27:27.0000] <MikeSmith>
well if nobody actually uses it and/or there’s no spec that defines what it means, then it seems like for <a> and <area> we shouldn’t allow rel=canonical maybe?

[21:28:55.0000] <annevk>
MikeSmith: what do the counters say?

[21:29:23.0000] <tantek>
MikeSmith, I'm ok with that - KevinMarks is editing currently and I think only bridged via Slack

[21:29:49.0000] <tantek>
so that means he's likely [KevinMarks] in #microformats (even if you can't "see" him there)

[21:29:55.0000] <tantek>
he's in BST TZ

[21:30:48.0000] <tantek>
from the spec: "Search engines prefer rel=canonical on a <link> element, and will ignore it on an <a> element. "

[21:31:04.0000] <MikeSmith>
oh

[21:31:06.0000] <tantek>
so that seems like a pretty strong statement against allowing it on <a> (and <area>) for that matter

[21:31:12.0000] <MikeSmith>
yes

[21:31:19.0000] <tantek>
even if it is not clear spec-language (separate issue)

[21:31:28.0000] <MikeSmith>
yeah

[21:32:22.0000] <MikeSmith>
annevk: the use counter I added to the checker doesn’t itemize <a rel> and <link rel> usage separately

[21:32:48.0000] <MikeSmith>
I need to look back at data from Simon to see if that does

[01:00:56.0000] <annevk>
So many people are playing Zelda and I don't even know when I'm going to get a console

[01:01:24.0000] <annevk>
Maybe I should start going into actual stores rather than looking around online

[01:07:30.0000] <KiChjang>
annevk: weird, just the other day at my company people were talking about beating zelda as well

[01:12:06.0000] <annevk>
KiChjang: it's not that weird, they just released it and lots of folks managed to get their hand on it, leading to a shortage for everyone who was distracted during the launch, like me

[01:12:41.0000] <KiChjang>
forget about zelda, the web is more interesting

[01:31:09.0000] <KiChjang>
does anyone here happen to know if a StructuredClone value is in anyway managed by a GC?

[01:31:36.0000] <KiChjang>
the spec says they're a Record that is indepdent of any realm, but does that mean it is a browser-native object?

[01:35:22.0000] <Domenic>
KiChjang: not sure what "browser managed object" is but the intention is e.g. it's a bunch of bytes in memory in some browser-specific serialization format

[01:36:29.0000] <KiChjang>
Domenic, what i mean is whether a StructuredClone is a JS value managed by the JS GC

[01:38:30.0000] <annevk>
KiChjang: not observable so up to impl

[02:03:34.0000] <annevk>
Domenic: heya, would reviewing abortable stuff be okay now or still not feeling super happy about it?

[02:03:54.0000] <Domenic>
annevk: PromiseController you mean?

[02:03:56.0000] <annevk>
Domenic: in particular, I'm thinking about the PR against DOM

[02:03:59.0000] <Domenic>
yeah

[02:04:05.0000] <Domenic>
just commented coincidentally enough

[02:04:11.0000] <annevk>
heh

[02:04:30.0000] <annevk>
Domenic: ta

[02:06:15.0000] <annevk>
KiChjang: I pitched making games for the web to a couple of Nintendo employees once, but they were not super convinced

[02:06:43.0000] <annevk>
KiChjang: so until that happens it'll have to be web and Zelda (and some other stuff)

[02:06:44.0000] <KiChjang>
there is a GBA emulator that's being run on the web using JS IIRC

[02:07:01.0000] <KiChjang>
and worry not, wasm is going to change everything

[02:07:33.0000] <annevk>
Wouldn't that be nice

[02:24:25.0000] <nox>
annevk: I don't know if it matters, but it sounds weird at least.

[02:27:04.0000] <annevk>
nox: a websocket upgrade request is not really that different from other requests without a body

[02:27:20.0000] <annevk>
nox: so I'm not sure why we'd need a special path

[02:27:28.0000] <nox>
annevk: It is very different.

[02:27:48.0000] <nox>
annevk: The thing that rejects responses with a status different than 101 is in establishing a websocket connection,

[02:28:10.0000] <nox>
when reaching that rejecting step, other algorithms may have needed to wait for body, queued tasks, and whatnot.

[02:29:04.0000] <nox>
Maybe all these tasks being queued are handwaving and aren't observable though, in which case I guess it doesn't matter.

[02:30:59.0000] <annevk>
nox: but that algorithm is also in charge of any tasks queued

[02:32:01.0000] <annevk>
nox: I guess I'll need a bit more detail and an issue if you think it's problematic

[02:32:37.0000] <nox>
annevk: What is "that algorithm" in what you just said?

[02:36:12.0000] <annevk>
nox: establishing a websocket connection

[02:36:33.0000] <nox>
annevk: Where is it in charge?

[02:36:59.0000] <nox>
It is given an arbitrary client, which is used to create the request, so the client is in charge, right?

[02:37:17.0000] <annevk>
nox: at some point we need to make this more explicit, but only the caller to fetch does something with the tasks

[02:37:29.0000] <nox>
Ok.

[02:38:03.0000] <annevk>
nox: maybe the fetch group does something as well, but that's still super vague and awaiting general lifecycle cleanup in HTML

[02:38:20.0000] <nox>
Ok.

[02:38:32.0000] <nox>
annevk: Yeah that's probably just my gripe, that it is super vague.

[02:39:21.0000] <annevk>
I don't like it either, but there's not many other folks helping chart the waters here so it's basically designing the architecture, new features, and making sure old features keeping working, all at the same time

[02:40:36.0000] <annevk>
I really want to get to the lifecycle stuff at some point, but I'm also dreading it a bunch

[02:41:15.0000] <annevk>
Created super basic ancestorOrigins test, two browsers, two results

[03:05:52.0000] <suds13>
Hi its my first time contributing, so go easy on me.

[03:06:06.0000] <suds13>
I want to fix this issue : https://github.com/whatwg/html/issues/2500

[03:07:36.0000] <suds13>
I forked the repo and in the source file I made this change in the full width latin row: <td> <span data-x="attr-fe-inputmode-state-latin">Latin Prose</span> TO <td> <span data-x="attr-fe-inputmode-state-latin-prose">Latin Prose</span>

[03:08:15.0000] <suds13>
Is this correct ?

[03:27:11.0000] <annevk>
suds13: hey, yes, that looks good

[04:01:57.0000] <suds13>
annevk:  I have created a pull request, thanks.

[04:02:54.0000] <annevk>
suds13: thank you!

[04:04:57.0000] <annevk>
suds13: merged, standard will be updated in a bit

[07:45:09.0000] <zcorpan>
TabAtkins: status on fingerprint thing in bikeshed?

[08:24:18.0000] <zcorpan>
(feel free to reply here while I'm away, i can check the logs. or use botie tell)

[09:11:17.0000] <annevk>
Domenic: so if you make Streams depend on this new canceling concept you're effectively requiring some kind of Host hook I suppose, if we keep Streams on the JS side of the divide

[09:56:27.0000] <jyasskin>
Or we smush cancellation into Streams and sneak it into JS that way.

[09:57:27.0000] <annevk>
jyasskin: I was mostly referring to cancelation (one l, hah) relying on events and maybe DOMException

[09:58:47.0000] <jyasskin>
Yeah, events are really the only tricky part: if canccelation goes into JS, it'd just be a simple exception.

[09:59:28.0000] <jyasskin>
I'm kinda surprised JS doesn't have a native event mechanism yet...

[10:37:46.0000] <TabAtkins>
zcorpan: Sorry, was distracted this week by a bug I thought would be easier (from Domenic), then by a bug that turned out quite hard (TLS >_<) and now I'm sick.

[10:38:12.0000] <TabAtkins>
So, uh, it's top of my prio list, but dunno precisely when I'll be working on Bikeshed again. Might be Monday, we'll see.

[11:27:47.0000] <annevk>
TabAtkins: take care 🍵

[11:33:14.0000] <TabAtkins>
just a head cold, but i'm still taking it easy ^_^

[13:00:46.0000] <zcorpan>
TabAtkins: ok, no worries. there's no rush :-)

[15:07:55.0000] <tobie>
jyasskin: "I'm kinda surprised JS doesn't have a native event mechanism yet...": https://twitter.com/tobie/status/699552694726426624 and yet…

[15:46:45.0000] <domfarolino>
Man, slack message "reactions" can be real distracting; IRC is a lot cleaner

[16:00:32.0000] <smaug>
igrigorik: where is the latest longtask spec?

[16:00:45.0000] <smaug>
the one in WICG from February has "Not Ready For Implementation"

[16:01:03.0000] <smaug>
so rather surprising to see Intent-To-Ship

[16:02:21.0000] <smaug>
perhaps foolip knows the status given that he said LGTM

[16:02:33.0000] <smaug>
or Domenic

[16:04:36.0000] <smaug>
/me assumes it is not a spec one should implement, but blink is about to ship it anyhow


2017-04-07
[20:17:08.0000] <Domenic>
annevk: yeah, my thinking is I tried for something host-agnostic in TC39, it failed, so now streams suffers the consequences. Oh well, nothing we can do.

[22:37:36.0000] <foolip>
smaug is gone, but I asked about that in https://groups.google.com/a/chromium.org/d/msg/blink-dev/Mx9q5WXunSE/2lCq30dtBwAJ and will poke the thread again

[01:59:02.0000] <hsivonen>
annevk: the first two sentences of the "When UNESCO suggests" paragraph of https://www.w3.org/blog/news/archives/6225 do have a good point.

[02:01:13.0000] <annevk>
hsivonen: yeah

[02:04:02.0000] <annevk>
I wonder how the W3C decides what to use <abbr> for

[02:04:19.0000] <annevk>
Only three-letter-abbreviations-minus-W3C-itself?

[02:07:41.0000] <nox>
In https://drafts.csswg.org/css-transforms-2/#funcdef-perspective it says that value must be greater than 0, is that > or ≥?

[02:07:57.0000] <nox>
https://drafts.csswg.org/css-transforms-2/#PerspectiveDefined does -1/d, which should mean >,

[02:08:13.0000] <nox>
but https://drafts.csswg.org/css-transforms-2/#PerspectiveDefined says perspective(0) is just a neutral thing.

[02:08:24.0000] <nox>
Err, https://drafts.csswg.org/css-transforms-2/#neutral-element for last link.

[02:10:05.0000] <annevk>
nox: they haven't really defined depth so I'd just file a bug to say it's vague

[02:10:18.0000] <annevk>
nox: I'm guessing they mean the parameter, but...

[02:11:16.0000] <nox>
annevk: On https://github.com/w3c/csswg-drafts?

[02:11:39.0000] <annevk>
nox: I guess so

[02:11:50.0000] <annevk>
nox: hmm, the document itself points to https://github.com/w3c/fxtf-drafts/labels/css-transforms-1

[02:12:07.0000] <nox>
Oh.

[02:12:14.0000] <annevk>
nox: so maybe there? CSS is

[02:12:25.0000] <annevk>
not the clearest at all this I find

[02:19:28.0000] <nox>
annevk: https://github.com/w3c/fxtf-drafts/issues/126

[04:12:33.0000] <annevk>
JakeA: btw, I'm counting on you to review https://github.com/whatwg/dom/pull/434 as well; do you have that planned?

[04:15:03.0000] <annevk>
tobie: could it be that the PR diff tooling interferes with https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/?

[04:15:36.0000] <annevk>
tobie: e.g., the above referenced whatwg/dom PR from mkwst has a branch I can't push to, even though that should be on by default these days

[04:16:03.0000] <annevk>
tobie: I've noticed this happening more as of late, so I'm wondering if the tooling we have messes this functionality up somehow

[04:16:35.0000] <mkwst>
annevk: I just ticked the box manually, so, tooling aside, you should be able to fix all my mistakes now..

[04:18:04.0000] <annevk>
mkwst: heh, thanks, wasn't actually planning on doing it just yet, but I found some minor nits and was gonna ask you if it were okay to push at some point, and then noticed it was broken again

[04:18:59.0000] <mkwst>
annevk: No worries. I'm happy to fix nits: you're busy.

[04:19:10.0000] <mkwst>
annevk: As long as you're telling me what nits to fix, that is. :)

[04:19:38.0000] <annevk>
mkwst: main bigger things I have: 1) what about this exception? 2) we should probably update the abstract now we do more than events and trees

[04:20:39.0000] <annevk>
mkwst: 3) tests and 4) can/will this be implemented without feature and how do we manage that if not?

[04:21:12.0000] <annevk>
mkwst: I'll wait with the nits until JakeA has reviewed as well, doesn't seem like much else is blocking this

[04:21:32.0000] <annevk>
mkwst: nobody in TC39 is screaming thus far

[04:21:52.0000] <annevk>
(low bar?)

[04:22:20.0000] <tobie>
annevk: it shouldn't. The only thing the tooling does is listen to events and update the content of the original post.

[04:22:31.0000] <mkwst>
1. You tell me. I'm happy to make it a DOMException if you don't care. 2. Sure (though I'm still not sure this is really right for DOM, I don't have a better suggestion).

[04:22:49.0000] <mkwst>
 3. It'll be tough to actually the cancellation callback bits without an API that uses the thing. Everything else should be simple. 4. See #3. I don't think it makes much sense in isolation.

[04:23:17.0000] <mkwst>
5. If TC39 gets involved, I'm going to delegate everything to Jake, because I don't have time to argue about this. :)

[04:26:48.0000] <annevk>
I'm okay with a DOMException as long as it has a unique name. "CancelationError" or some such would be fine. Though I wish ljharb would have answered the justification question other than "it needs to be like arrays"

[04:27:23.0000] <annevk>
I guess even if he proves the need for branding we could still tack that on DOMException...

[04:30:05.0000] <mkwst>
I don't understand what he'd like to protect against.

[04:30:10.0000] <mkwst>
*shrug*

[04:31:47.0000] <annevk>
Maybe the problem is that a problem in the program shouldn't be able to exit through the cancelation path?

[04:32:18.0000] <annevk>
So an attacker can halt something and go undetected?

[04:33:33.0000] <mkwst>
Assuming the attacker is already running script in your origin?

[04:34:15.0000] <mkwst>
Idunno. I'd like to understand the threat it's meant to address. If it's relevant, then I'd prefer to make it a DOMException thing if possible,.

[04:35:18.0000] <mkwst>
If we make it a DOMException, shall I send tobie a patch to add the name to https://heycam.github.io/webidl/#dfn-error-names-table?

[04:36:33.0000] <mkwst>
Or do you want the whole thing defined in DOM?

[04:36:44.0000] <tobie>
mkwst: yes please.

[04:39:00.0000] <annevk>
mkwst: we should add the name there and then reference it

[04:39:24.0000] <annevk>
mkwst: thanks for knowing how all the things work

[04:39:45.0000] <annevk>
mkwst: I guess we might also need to update testharness so it knows about that exception name

[04:40:50.0000] <mkwst>
/me does not know how all the things work :)

[04:41:38.0000] <mkwst>
Ok. If that sounds like a reasonable thing to do, I'll send out patches.

[04:42:24.0000] <annevk>
http://web.mit.edu/jwalden/www/isArray.html is a pretty good read, but all those problems also apply to platform objects!

[04:56:50.0000] <annevk>
Searching for "hasinstance inurl:public-script-coord" and Google gives me "Are you a robot?" while I'm logged in

[04:57:04.0000] <annevk>
And then they dare talk about AI on stage, come on

[04:59:24.0000] <mkwst>
To be fair, you might be a robot.

[05:01:52.0000] <annevk>
Bias!

[05:02:01.0000] <annevk>
/me finds https://lists.w3.org/Archives/Public/public-script-coord/2013JanMar/thread.html#msg1

[05:02:12.0000] <annevk>
(through W3C's search)

[05:09:44.0000] <JakeA>
annevk: yep. Going to fix useCache in the service worker spec. Then review the cancellation thing.

[05:11:20.0000] <annevk>
JakeA: cancelation

[05:11:38.0000] <annevk>
I guess we should add that to the style guide

[05:12:21.0000] <JakeA>
annevk: canceation. The Ls are just causing trouble, let's get rid of all of them.

[05:13:11.0000] <annevk>
JakeA: archibad

[05:13:32.0000] <JakeA>
Hahaha I'll take that

[05:40:45.0000] <MikeSmith>
https://wiki.whatwg.org/index.php?title=Style&diff=next&oldid=10160 😆

[05:42:17.0000] <annevk>
So many variations to get wrong!

[05:44:13.0000] <mkwst>
/me is glad most of his specs are in W3C, where "cancelled" is spelled in a sane way.

[05:44:14.0000] <MikeSmith>
heh

[05:46:16.0000] <annevk>
mkwst: as long as the APIs get it right...

[05:46:36.0000] <mkwst>
s/right/wrong/

[05:46:51.0000] <mkwst>
I'll just make sure not to use controversial words in APIs. :)

[05:46:58.0000] <MikeSmith>
canceỻation

[05:46:59.0000] <annevk>
You're in #whatwg now, but clearly you also left your sense of logic at the door so...

[05:47:10.0000] <mkwst>
`thing.stopIt()`

[05:51:07.0000] <nox>
mkwst: You mean cance//ed?

[06:25:08.0000] <MikeSmith>
Domenic is traveling at the moment I guess?

[06:25:40.0000] <MikeSmith>
wanted to ask him about https://github.com/w3c/ServiceWorker/issues/1073#issue-207922166

[06:27:14.0000] <MikeSmith>
annevk: maybe you can help clue me in. I’m trying to figure out what change to make for the “Either step 8 should be removed (normative change!), or we should update HTML to have an invalid value default state (say "invalid"), which you can then throw an error on.” part of Domenic’s comment

[06:27:21.0000] <MikeSmith>
that step 8 is this:

[06:27:38.0000] <MikeSmith>
> If workerType is not a valid WorkerType value, queue a task to fire an event named error at the link element, and abort these steps.

[06:28:38.0000] <annevk>
MikeSmith: I'll take a look

[06:28:43.0000] <MikeSmith>
thanks

[06:28:57.0000] <MikeSmith>
I talked with Domenic about this earlier this week but am wondering if there’s an existing similar case in the HTML spec I can use as model

[06:29:42.0000] <MikeSmith>
nobody has implemented WorkerType yet I think, so we can spec it out the way we want

[06:31:26.0000] <MikeSmith>
to be clear the specific part I wonder how to spec is “a state which you can then throw an error on”

[06:31:29.0000] <annevk>
MikeSmith: if nobody has implemented this feature I like the idea of the normative change

[06:31:34.0000] <MikeSmith>
oh

[06:31:38.0000] <annevk>
MikeSmith: and just defaulting to "classic"

[06:31:43.0000] <MikeSmith>
OK

[06:32:26.0000] <annevk>
MikeSmith: I think most HTML attributes have a fallback that makes the thing function, a fallback that makes the thing broken would be a little strange

[06:32:48.0000] <MikeSmith>
hmm yeah when you put it that way, true

[06:33:06.0000] <MikeSmith>
OK well I will write up PR for the Service Worker spec with that change

[06:34:11.0000] <MikeSmith>
easy change

[06:34:47.0000] <MikeSmith>
annevk: thanks 🌸

[06:58:18.0000] <wanderview>
JakeA: is there actually a requirement on mime type for importScripts()?

[06:58:54.0000] <wanderview>
I guess there is now

[06:59:52.0000] <JakeA>
wanderview: the spec had that for a while. Although neither Chrome or Firefox do

[07:00:07.0000] <JakeA>
wanderview: I changed it to point to HTML's mime type list, but it was there before

[07:00:13.0000] <wanderview>
JakeA: seems reasonable... thanks for testing it!

[07:00:53.0000] <wanderview>
JakeA: I'm glad I decided to start persisting headers on importScripts() even though there was no reason in our tree before

[07:01:01.0000] <wanderview>
now I can check the mime type a lot easier

[07:01:04.0000] <JakeA>
\o/

[08:23:23.0000] <zcorpan>
mkwst: controversial words like "nonce"? :-P

[08:40:01.0000] <mkwst>
zcorpan: If the UK would just speak proper English, "nonce" wouldn't be a problem. :)

[08:52:03.0000] <gsnedders>
http://stackoverflow.com/questions/280049/javascript-callback-for-knowing-when-an-image-is-loaded#comment70314622_24201249

[08:52:12.0000] <gsnedders>
the answer is no, right, because the event queue doesn't spin?

[08:57:38.0000] <zcorpan>
gsnedders: right. per the current spec you could have the opposite problem that 'loaded' is run twice. but the spec for .complete needs some fixing to not change value while script is executing (probably instead it should change value in the same task that fires the 'load' event)

[08:58:49.0000] <gsnedders>
zcorpan: how is it run twice?

[09:00:02.0000] <zcorpan>
gsnedders: no sorry, missed that the script had an "else"

[09:00:32.0000] <zcorpan>
gsnedders: had the script unconditionally added the listener it could run twice

[09:00:37.0000] <gsnedders>
even without the else how could it run twice without it going from complete to incompletE?

[09:01:16.0000] <zcorpan>
gsnedders: if the script runs after complete is flipped to true but before the load event has been fired

[09:08:41.0000] <gsnedders>
zcorpan: can you reload and check my comment is accurate?

[09:09:43.0000] <zcorpan>
gsnedders: 👍

[09:10:19.0000] <gsnedders>
zcorpan: do we have a bug for the .complete spec?

[09:10:32.0000] <zcorpan>
yeah

[12:17:20.0000] <jsbell>
wanderview: Do you know if the Cache API impl in FF maintains insertion order? My attempted upstreaming of a test is blocked by flakiness: https://travis-ci.org/w3c/web-platform-tests/jobs/219426158 - I didn't spot a bugzilla issue...

[12:25:08.0000] <wanderview>
jsbell: can you define insertion order?

[12:25:30.0000] <wanderview>
jsbell: looks like for cache keys?

[12:25:59.0000] <jsbell>
correct (sorry for being imprecise)

[12:26:12.0000] <wanderview>
jsbell: we do maintain insertion order, but we define that as the time the body completes vs the order cache.put() calls were made

[12:27:01.0000] <wanderview>
so depending on how the keys were inserted, we may get a slightly different order from chrome

[12:27:47.0000] <wanderview>
I think we have agreement in an issue somewhere to use a more transactional approach where cache.put() blocks later cache.put() calls so that you get strict ordering based on the calls

[12:27:57.0000] <wanderview>
not sure if that is spec'd yet and we definitely haven't implemented it yet

[12:28:56.0000] <jsbell>
okay. Wonder what I should do for that test...

[12:29:14.0000] <wanderview>
jsbell: does it put a bunch of stuff in the cache and then check the ordering?

[12:29:58.0000] <jsbell>
wanderview: Yeah. https://cs.chromium.org/chromium/src/third_party/WebKit/LayoutTests/external/wpt/service-workers/cache-storage/script-tests/cache-keys.js?l=50

[12:30:22.0000] <jsbell>
I can make the test ignore the order if we believe it's not required by the spec at the moment

[12:30:55.0000] <wanderview>
jsbell: can we make prepopulated_cache_test() serialize its put() calls?

[12:32:02.0000] <wanderview>
jsbell: I mean, order is defined in the spec for .keys()... but I'm not sure it defines a strict order for overlapping put() calls at the moment: https://dxr.mozilla.org/mozilla-central/source/testing/web-platform/tests/service-workers/cache-storage/resources/test-helpers.js#148

[12:32:14.0000] <jsbell>
wanderview: Yeah, that should work.

[12:32:33.0000] <jsbell>
wanderview: my dev box is offline at the moment but once it's back I'll give that a whirl in FF and see

[12:34:14.0000] <wanderview>
jsbell: thanks!  I think transaction discussion might be in this issue: https://github.com/w3c/ServiceWorker/issues/823

[12:35:44.0000] <wanderview>
yea, loose agreement to "work towards under-the-hood transactions to prevent races on writes", but doesn't seem to have been spec'd yet: work towards under-the-hood transactions to prevent races on write

[12:35:51.0000] <wanderview>
https://github.com/w3c/ServiceWorker/issues/823#issuecomment-175320500

[14:37:53.0000] <felixjet>
can i represent elapsed number of days with <time> tag?

[14:38:07.0000] <felixjet>
<time>6</time>, or even <time>Day 6</time>


2017-04-08
[17:31:25.0000] <MikeSmith>
can anybody remind me what’s the Bikeshed syntax for referencing a term from a different spec?

[17:31:40.0000] <MikeSmith>
TabAtkins: 🦉 ?

[17:32:22.0000] <TabAtkins>
You just link it like a local term

[17:33:57.0000] <MikeSmith>
TabAtkins: OK see https://github.com/w3c/ServiceWorker/blob/master/docs/index.bs#L2277

[17:34:05.0000] <MikeSmith>
[=service-workers mode=]

[17:34:26.0000] <MikeSmith>
that is meant to point to https://fetch.spec.whatwg.org/#request-service-workers-mode

[17:34:55.0000] <MikeSmith>
but it fails to resolve because I guess some hook is missing from the SW spec source

[17:35:22.0000] <MikeSmith>
$ bikeshed spec

[17:35:22.0000] <MikeSmith>
LINK ERROR: No 'dfn' refs found for 'service-workers mode'.

[17:35:23.0000] <MikeSmith>
<a data-link-type="dfn" data-lt="service-workers mode">service-workers mode</a>

[17:36:48.0000] <TabAtkins>
You running this locally or thru the API?

[17:38:01.0000] <MikeSmith>
locally

[17:38:30.0000] <TabAtkins>
Run `bikeshed update`, make sure your dfn database is up to date.

[18:08:53.0000] <MikeSmith>
TabAtkins: oofs yeah I remember now the Bikeshed docs say to do that

[18:13:47.0000] <MikeSmith>
TabAtkins: thanks, no more errors ⛄️

[18:55:25.0000] <TabAtkins>
MikeSmith: You can also run `bikeshed refs` to search the refs database, to make sure the term exists and has the properties you assume it has.

[19:02:11.0000] <MikeSmith>
TabAtkins: coolーthanks, didn’t know about that one

[19:15:51.0000] <TabAtkins>
that's only your local refs, mind. lets you know if you need to update. ^_^

[19:32:09.0000] <MikeSmith>
TabAtkins: ok

[19:34:49.0000] <MikeSmith>
so the Service Workers spec defines requirements for how UAs must process the value of the Link header for the “serviceworker” link type but it doesn’t actually define what syntax a serviceworker Link header is expected to conform to

[19:34:53.0000] <MikeSmith>
https://w3c.github.io/ServiceWorker/#link-header-processing

[19:35:22.0000] <MikeSmith>
so I am now wondering, Do we have other specs that define the syntax of the value of the Link header for some particular link type?

[19:35:30.0000] <MikeSmith>
HTML doesn’t have any

[19:36:23.0000] <MikeSmith>
and I know there are things like the WebAppSec specs that define new headers, like Referrer-Policy

[19:37:11.0000] <MikeSmith>
but this case is about defining the specific syntax of the value of an existing header

[19:40:02.0000] <MikeSmith>
/me looks through https://www.iana.org/assignments/link-relations/link-relations.xhtml

[19:45:29.0000] <MikeSmith>
no luck

[20:11:46.0000] <felixjet>
can i represent elapsed number of days with <time> tag?

[20:11:47.0000] <felixjet>
<time>6</time>, or even <time>Day 6</time>

[21:22:44.0000] <annevk>
felixjet: no, it represents time, not duration

[21:23:21.0000] <annevk>
felixjet: and no relative time either afaik

[21:58:27.0000] <felixjet>
annevk, thanks

[08:21:35.0000] <Lcfvs>
hi here...

[08:23:47.0000] <Lcfvs>
i'm looking about how to make a proposal, please... I would suggest an attribute to indicate a form data is not volatile (which may be usefull for SEO)

[08:28:12.0000] <annevk>
Lcfvs: https://wiki.whatwg.org/wiki/FAQ#Is_there_a_process_for_adding_new_features_to_a_specification.3F

[08:28:40.0000] <annevk>
Lcfvs: once you feel like you've met the bar outlined there, https://github.com/whatwg/html/issues/new would be next

[08:28:54.0000] <Lcfvs>
@annevk thanks :)

[14:06:08.0000] <dmarr>
im trying to figure out the etag/if-none-match dance, when using a proxy layer. i have a GET request to requestb.in using fetch() from my spa - it seemed to get an ETAG at one point, but now i don't see it returned. anyone know how to diagnose that?

[14:19:49.0000] <dmarr>
my sledgehammer approach to avoid stale content in the requests to /api.x was to use cache-control: no-cache in the fetch headers. i wasn't sure how to get the if-none-match header set dynamically


2017-04-09
[22:57:54.0000] <MikeSmith>
annevk: Domenic so for HTML checking of WHATWG specs with Travis I’d like to use a common script, and put it under version control somewhere in github/whatwg

[22:59:34.0000] <MikeSmith>
I guess one way would be a create a new “tools” or “common-tools” (or whatever) repo, and put it in there

[23:00:35.0000] <MikeSmith>
but that seems like overkill unless we anticipate we might need to add other common tools later

[23:03:09.0000] <MikeSmith>
so alternative is, I could just drop it in whatwg/infra

[23:05:23.0000] <MikeSmith>
which yeah, it’s a spec repo of its ownーnot a repo for common build infrastructureーbut seems like there’s nothing wrong with giving it the additional purpose of storing common build infrastructure/tooling

[23:07:18.0000] <MikeSmith>
to be clear, wherever we put it, the idea would be that I just update the various spec .travis.yml files to do “curl https://github.com/whatwg/infra/blob/master/html-check.sh && bash html-check.sh”

[23:09:19.0000] <MikeSmith>
so rather than repeating in N different repo .travis.yml files the same set of commands to call the HTML checker over the network API, I just move the commands into that script

[23:10:32.0000] <MikeSmith>
so then of course if we end up needing to make any changes/refinements to how the HTML checker gets called, we need to make the updates in only one places instead of in N different places

[23:11:24.0000] <MikeSmith>
* “curl -O https://github.com/whatwg/infra/blob/master/html-check.sh && bash html-check.sh”

[23:21:21.0000] <annevk>
MikeSmith: resources.whatwg.org has tools/

[23:21:39.0000] <annevk>
MikeSmith: already used for a shared build script

[23:24:07.0000] <MikeSmith>
oh

[23:24:22.0000] <MikeSmith>
wonder how I forgot that

[23:25:27.0000] <MikeSmith>
ah

[23:25:46.0000] <MikeSmith>
annevk: no github repo backing that, right?

[23:26:28.0000] <annevk>
dmarr: it should get set dynamically by default

[23:26:34.0000] <MikeSmith>
ah

[23:26:38.0000] <annevk>
MikeSmith: there is whatwg/resources.whatwg.org

[23:26:41.0000] <MikeSmith>
found it nm

[23:26:44.0000] <MikeSmith>
yeah

[23:26:51.0000] <annevk>
Zoo time, ttyl

[23:28:12.0000] <MikeSmith>
annevk: enjoy

[05:49:22.0000] <annevk>
JakeA: if you want to make transfering signals work you need some kind of private MessageChannel

[05:49:57.0000] <JakeA>
annevk: I believe Domenic is doing the same for transferring streams

[05:50:02.0000] <annevk>
JakeA: or you need to keep a link back to the controller and fiddle with things there I suppose, but that seems weirder

[05:50:13.0000] <JakeA>
annevk: although, personally, I'd rather we explained message ports on top of streams :D

[05:50:16.0000] <annevk>
JakeA: yeah, streams and promises would need the same kind of feature

[05:50:40.0000] <annevk>
JakeA: I don't see how streams have any ability to cross threads

[05:51:47.0000] <JakeA>
annevk: data must already get from the network to the main thread somehow

[05:52:17.0000] <annevk>
JakeA: sure, we queue tasks with the data

[05:53:18.0000] <JakeA>
annevk: isn't that how message ports work?

[05:54:59.0000] <JakeA>
I think it's just because I find message ports more confusing than streams, so I'm leaning to the thing I understand most. Ignore me.

[05:55:32.0000] <annevk>
JakeA: yup, tasks can cross threads

[08:37:16.0000] <annevk>
JakeA: btw, the reason we cannot do "cancellation" is because of Event.prototype.cancelable

[08:39:07.0000] <annevk>
JakeA: mkwst: other terms we could consider "halt" / "stop"

[08:55:36.0000] <JakeA>
annevk: yeah, understand the legacy. I can put up with .cancel, but why not .abort?

[08:58:14.0000] <annevk>
JakeA: naming them all after abort is fine with me

[09:00:34.0000] <annevk>
JakeA: so with this new system we don't even have a revealing constructor for the object with abort() anymore

[09:00:47.0000] <annevk>
JakeA: you just pass in a signal object

[09:00:52.0000] <annevk>
JakeA: I guess that's fine

[09:01:08.0000] <annevk>
JakeA: oh, I forgot to mention in the Fetch PR, we'll need an example

[09:05:25.0000] <JakeA>
annevk: yeah, I wanted to start with the bits I was unsure of so I could get feedback. I can easily example the hell out of it later

[09:05:36.0000] <JakeA>
Also why are we all working on a Sunday?

[10:07:28.0000] <annevk>
Well, I worked less during the week since the kid couldn't go to daycare fulltime, but I also enjoy this topic 😊

[10:08:20.0000] <annevk>
tobie: as a heads up, used Hangouts on you

[10:30:37.0000] <JakeA>
annevk: I don't think we need a revealing constructor, especially as one signal can feed many fetches

[10:31:07.0000] <JakeA>
annevk: the observer would be in a revealing constructor though

[10:31:34.0000] <annevk>
So controller/signal/observer

[11:08:54.0000] <MikeSmith>
annevk: for the HTML checker I was working today on adding a mechanism to allow filtering out particular errors/warnings based on regex match

[11:09:50.0000] <MikeSmith>
motivated by trying to deal with the “Text run is not in Unicode Normalization Form C” noise for the Encoding spec output files

[11:10:55.0000] <MikeSmith>
I think I actually have it working now locally

[11:11:12.0000] <MikeSmith>
and can push it to the checker tomorrow for testing

[11:11:38.0000] <annevk>
Cool

[11:12:47.0000] <MikeSmith>
so for deploy.sh we might want to provide a way to set ignore patterns per-spec

[11:13:43.0000] <MikeSmith>
is there some way now alreay for deploy.sh to set per-spec environment variables?

[11:15:11.0000] <MikeSmith>
I guess not yet, from looking at the sources

[11:18:09.0000] <MikeSmith>
ah but I see it can just pick up environment variables from .travis.yml

[11:18:32.0000] <MikeSmith>
OK so yeah I think I can make this work

[11:18:34.0000] <MikeSmith>
tomorrow

[11:36:59.0000] <dmarr>
annevk: it does seem to when i make a normal request in the console, but for some reason when calling from a bundled file, its not. maybe something with babel or webpack that is using a polyfilled fetch? im at a loss

[12:07:12.0000] <annevk>
dmarr: I have no experience with those

[12:07:35.0000] <annevk>
MikeSmith: yeah, we use that file for config; sounds nice!


2017-04-10
[20:55:59.0000] <domfarolino>
Anyone happen to know how many concurrent http/1.1 connections the latest versions of firefox/chrome can make? I heard at least one point it was ~6?

[21:47:31.0000] <annevk>
domfarolino: per origin, sounds about right

[21:52:17.0000] <domfarolino>
ah

[00:37:02.0000] <annevk>
JakeA: Domenic: mkwst: did you already consider alternative timing scenarios?

[00:37:14.0000] <mkwst>
alternative to what?

[00:37:20.0000] <annevk>
mkwst: to synchronous

[00:39:25.0000] <mkwst>
How would you expect that to look?

[00:39:37.0000] <annevk>
mkwst: see last comment in the issue

[00:39:52.0000] <annevk>
mkwst: well and second-to-last (why is that called second and not first?)

[00:41:47.0000] <mkwst>
*sigh* I only picked this up because webauthn needed something simple and it looked like folks had already converged on a design, not because I have deep opinions on cancellation (except, of course, about the spelling). I don't think I'm the right guy to define the behavior.

[00:42:15.0000] <mkwst>
The needs I know about are super-simple, so either synchronous or asynchronous mechanisms could easily fit them.

[00:42:35.0000] <annevk>
mkwst: good to know, just thought I'd check

[00:42:54.0000] <mkwst>
I appreciate it! I hope JakeA has more interesting opinions for you!

[00:48:03.0000] <annevk>
mkwst: either way, I think we're pretty close to success

[00:49:15.0000] <mkwst>
I hope so! To be clear, I'm willing to do the work to specify what folks want. I just don't have strong opinions about what that might be, nor have I done the background work to gather context on alternative approaches.

[00:50:25.0000] <annevk>
I somewhat hope Domenic already thought through the timing implications given his long history with promises and will tell us why "asynchronous" isn't important

[01:31:45.0000] <MikeSmith>
annevk: success https://travis-ci.org/whatwg/encoding/builds/220466241

[01:32:21.0000] <MikeSmith>
as far as testing the new checker message-dropping feature

[01:32:59.0000] <MikeSmith>
and just as far as the “Text run is not in Unicode Normalization Form C.”

[01:33:34.0000] <annevk>
MikeSmith: great, that looks more like what I was expecting

[01:33:59.0000] <MikeSmith>
yeah and I’ll deal with the “document appears to be written in Kinyarwanda” upstream

[01:34:15.0000] <annevk>
MikeSmith: I'm happy with excluding that too

[01:34:25.0000] <annevk>
MikeSmith: same for private use, which was also intentional

[01:34:52.0000] <annevk>
Once those two warnings are gone it should succeed I expect

[01:34:58.0000] <MikeSmith>
yeah

[01:35:04.0000] <MikeSmith>
and yeah the private-use one I will add to the filter

[01:35:51.0000] <annevk>
This is really great MikeSmith, much faster turnaround than I could have hoped for

[01:36:43.0000] <MikeSmith>
yeah I’m glad I managed to get it to work

[01:37:53.0000] <MikeSmith>
and the Kinyarwanda error, that is a general problem with the language profile for that language and that I realize now must be affecting other checker users. So upstream in the checker source I should either fix that language profile or drop it

[01:41:28.0000] <MikeSmith>
annevk: btw if you remember anything other issues or PRs you’ve been waiting on me for, lemme know

[01:43:31.0000] <MikeSmith>
over the weekend, tried to respond to all that I could find (where I had mentions or was assigned)

[01:44:09.0000] <annevk>
MikeSmith: I think you managed to hit most, I'll let you know if I spot another

[01:45:01.0000] <MikeSmith>
cheers

[01:46:09.0000] <annevk>
MikeSmith: actually, I was just looking at one: https://github.com/w3c/web-platform-tests/issues/2669

[01:46:16.0000] <MikeSmith>
/me looks

[01:47:22.0000] <MikeSmith>
thanks not sure I got an e-mail notification for that

[01:47:51.0000] <MikeSmith>
seems like e-mail for some of my GitHub notifications is not reaching me lately

[05:13:08.0000] <zcorpan>
https://github.com/whatwg/html/issues/1013 - why not use the javascript: scheme here? :-)

[05:24:57.0000] <annevk>
hehe

[05:54:09.0000] <zcorpan>
TabAtkins: how can i specify caniuse="" for a css property? <dfn caniuse> in <pre class=propdef> is ignored

[05:55:06.0000] <MikeSmith>
annevk: OK finally all green at https://github.com/whatwg/encoding/pull/101

[05:55:19.0000] <MikeSmith>
> Ran for 12 min 41 sec

[05:56:07.0000] <MikeSmith>
but given 103 files to check (twice) with the HTML checker I guess that’s not so bad

[06:14:56.0000] <annevk>
MikeSmith: great!

[06:23:50.0000] <annevk>
MikeSmith: maybe one thing we could do is to only run the HTML checker for the main index file and not any of the generated files

[06:23:58.0000] <annevk>
MikeSmith: as the generated files are only rarely modified

[06:24:12.0000] <annevk>
MikeSmith: of course, that nullifies the need to exclude warnings :/

[06:24:29.0000] <gsnedders>
annevk: you could just try running it on files that have changed in a PR

[06:58:07.0000] <MikeSmith>
annevk: happy to go with whatever you prefer, but I was assuming part of the bigger goal here is to move to having resources.whatwg.org/build/deploy.sh be the common script that each spec/repo uses, and that causes everything under $WEB_ROOT to be checked

[06:59:43.0000] <MikeSmith>
I guess we could always add a hook to allow any spec/repo .travis.yml to override that recursive $WEB_ROOT html checking and instead just check a given list of files

[07:01:00.0000] <gsnedders>
is there any way to somehow compare performance.now() with performance.timing.responseStart?

[07:06:08.0000] <annevk>
MikeSmith: yeah, I guess it's ok, just a bit wasteful

[07:07:49.0000] <gsnedders>
given performance.timing.responseStart returns ms since the unix epoch

[07:08:12.0000] <gsnedders>
(can we really not change the behaviour of performance.timing? I'd have expected most people were just comparing values in a single page-load?)

[07:35:01.0000] <MikeSmith>
annevk: https://stackoverflow.com/questions/43325912/how-to-post-with-application-x-www-form-urlencoded-header-and-urlsearchparams-us

[07:37:33.0000] <annevk>
MikeSmith: added a comment to OP, seems like a bug in the library

[07:45:52.0000] <MikeSmith>
annevk: thanks yeah

[07:46:28.0000] <MikeSmith>
though I think the bug might be in the underlying “github-fetch” code

[07:47:20.0000] <MikeSmith>
that isomorphic-fetch library seems to be just a thin wrapper around “github-fetch”

[07:48:43.0000] <annevk>
Ah, okay

[07:51:02.0000] <annevk>
zcorpan: an interesting thing you might want to test with insertRule is using it on cross-origin stylesheets

[07:51:10.0000] <annevk>
zcorpan: apparently not all browsers throw

[07:51:29.0000] <annevk>
zcorpan: opaque cross-origin, not CORS

[07:55:44.0000] <zcorpan>
annevk: yeah. filed https://github.com/w3c/web-platform-tests/issues/5526

[08:14:12.0000] <annevk>
When I run https://w3c-test.org/service-workers/service-worker/client-navigate.https.html Firefox finds five tests and Chrome three

[08:34:54.0000] <annevk>
Domenic: maybe remove StructuredCloneWithTransfer and add messageerror? Otherwise everyone that uses it needs to update twice

[08:35:54.0000] <wanderview>
annevk: yea, that test is incorrect and timesout in chrome... I'm fixing it

[08:36:25.0000] <wanderview>
although in firefox I see 7 tests?

[08:37:22.0000] <Domenic>
annevk: hmm maybe

[08:38:01.0000] <annevk>
Domenic: if we don't do that it seems best to tightly couple it with together with SAB

[08:38:20.0000] <annevk>
Domenic: so you have SAB + messageerror + removal of StructuredCloneWithTransfer

[08:38:38.0000] <annevk>
Domenic: separate from that we can have 1) rework of worker internals to make agent clusters possible

[08:38:47.0000] <annevk>
Domenic: 2) definition of agent clusters upon reworked internals

[08:38:55.0000] <Domenic>
annevk: asynchronous for cancel signals isn't important. It's forced if you are only using ECMAScript and your only way of doing notification is promises. But if you have an event primitive then you're better of sync. It avoids a lot of headaches, e.g. trying to create composition operators (like "follow" or "race"), which is basically impossible with async.

[08:40:40.0000] <annevk>
Domenic: it's not weird that the cancel signal says cancel and the fetch says TypeError: "invalid URL"?

[08:43:40.0000] <Domenic>
Hmm why would that happen?

[08:44:58.0000] <annevk>
Domenic: fetch("https://test:test/"); controller.abort()

[08:45:21.0000] <annevk>
Domenic: example is outlined in more detail in the whatwg/dom PR

[08:45:25.0000] <Domenic>
Why isn't fetch validating the URL sync?

[08:45:55.0000] <annevk>
Domenic: it is?

[08:46:06.0000] <Domenic>
Ah right

[08:46:25.0000] <Domenic>
Yeah seems fine then

[08:46:34.0000] <Domenic>
It's just like any other case of passing the signal to someone who ignores it

[08:48:34.0000] <Domenic>
even if you did async it'd still be the same errors, just in the other order

[08:49:31.0000] <annevk>
With async we could .then() the promise returned by fetch() and dispatch cancel from there if the exception was cancel

[08:49:44.0000] <Domenic>
Sure, but you can do that with sync too

[08:49:57.0000] <Domenic>
It's pretty unnatural in both cases, IMO

[08:50:12.0000] <annevk>
What is unnatural?

[08:50:33.0000] <Domenic>
To wait instead of just calling controller.cancel() immediately

[08:50:55.0000] <annevk>
That's not what I'm saying?

[08:51:10.0000] <annevk>
I'm saying that you'd delay updating the signal

[08:51:34.0000] <Domenic>
Then I don't understand; are we still using the example code `fetch("https://test:test/", { signal: controller.signal }); controller.abort()` ?

[08:52:03.0000] <annevk>
Domenic: yeah, but also with an event listener on the signal

[08:52:35.0000] <Domenic>
Can you type the example then?

[08:52:58.0000] <annevk>
Domenic: https://github.com/whatwg/dom/pull/434#issuecomment-292869591

[08:53:52.0000] <Domenic>
I'm confused, I thought you were saying that you would .then() the promise before doing controller.abort()

[08:54:24.0000] <annevk>
Domenic: no, I was talking about specification-internals to delay notifying the signal about what happened until we're sure

[08:54:37.0000] <Domenic>
How does the signal/controller know about fetch() promises?

[08:55:00.0000] <annevk>
Domenic: fetch() would have that as part of its signal logic

[08:55:15.0000] <Domenic>
So then it doesn't matter, because by the time fetch() notifies the signal, controller.abort() has already been called

[08:55:57.0000] <annevk>
Domenic: yes, but if the fetch() didn't end up being aborted because of it, signal wouldn't have had its event fire

[08:56:19.0000] <Domenic>
why not? controller.abort() was called...

[08:57:01.0000] <annevk>
Because nothing got aborted

[08:57:43.0000] <Domenic>
how is that possibly true if controller.abort() is called?

[08:58:08.0000] <Domenic>
maybe you can write up the alternate spec for controller.abort() you are envisioining

[08:58:27.0000] <Domenic>
because the spec for it right now is very clear that it would cause the signal to move to the aborted state

[08:58:35.0000] <Domenic>
and even if you introduce a microtask delay before doing so, that wouldn't change anything

[08:59:48.0000] <annevk>
Domenic: basically, you'd put fetch() in charge of changing the state, and fetch() only changes the state if aborting itself ended with an AbortError

[08:59:56.0000] <Domenic>
So you'd remove signal.abort() entirely?

[09:00:02.0000] <Domenic>
*controller.abort()

[09:00:18.0000] <annevk>
Domenic: no, that'd still exist to initiate the whole setup

[09:01:06.0000] <annevk>
controller aborts, fetch aborts, waits for rejection, if it gets a rejection and its an AbortError, changes state of the signal

[09:01:54.0000] <Domenic>
This sounds very unlike the existing PR, so I'd need to see it written up. I can't imagine how that would work without very tight coupling between fetch and these controller/signal objects.

[09:02:00.0000] <annevk>
I dunno though, I was just trying to figure out if there was a way to make less code paths run

[09:02:29.0000] <Domenic>
It may help to re-conceptualize canceled/oncancel as cancelRequested/oncancelrequested

[09:02:51.0000] <Domenic>
it's just setting a boolean/firing an event to let you know a boolean was set

[09:03:07.0000] <annevk>
Yeah, maybe that's good enough

[09:03:09.0000] <Domenic>
then consumers like fetch() can look at that boolean/react to the event and say "ok, i see i was requested to cancel, let me do that"

[09:04:20.0000] <annevk>
Domenic: see, I didn't realize the event was mostly for JavaScript-implemented consumers of signals

[09:04:31.0000] <Domenic>
ah ok :)

[09:04:42.0000] <annevk>
Domenic: I thought the event was for end users of the fetch() API as well

[09:04:58.0000] <Domenic>
Nah, they just use the fetch() return value.

[09:05:13.0000] <annevk>
Domenic: I'm not sure about the comments from rbuckton then

[09:05:27.0000] <annevk>
Domenic: I'll post an update on the issue

[09:43:27.0000] <gsnedders>
hmm, is it possible to detect background-image loads now using the performance APIs?

[09:45:45.0000] <annevk>
gsnedders: yeah, if the stylesheet is CORS-same-origin

[09:48:04.0000] <gsnedders>
I'd totally missed that until now. That's pretty significant.

[09:48:39.0000] <jyasskin>
annevk: FWIW, I'd like to lobby against including "abortion" anywhere in the abort/cancel spec, even in example code. It's too charged, at least in the U.S.

[10:04:56.0000] <dmarr>
i wish i could figure out why fetch isn't sending if-none-match headers. it does when i make a call from the console, but not from my webpack-bundled app

[10:05:26.0000] <annevk>
jyasskin: I thought it might be, hence suggesting "stop" / " halt"

[10:05:45.0000] <annevk>
jyasskin: but those don't work well with the existing "AbortError"

[10:06:05.0000] <jyasskin>
annevk: Yep. Even treating "abort" as a noun would be fine with me.

[10:06:42.0000] <annevk>
jyasskin: having said that, you'd think all the child mutation algorithms would be a little worse

[10:06:58.0000] <jyasskin>
I personally lean toward using CancelError, CancelToken, CancelController, and then using cancel[l]ation in the non-normative bits of the spec, but I'm not that picky.

[10:07:20.0000] <jyasskin>
"mutation" isn't a political issue, unless you're way too deep in the X-men. ;)

[10:09:51.0000] <annevk>
jyasskin: if we're going to use "AbortError" we might as well align all the terms

[10:10:42.0000] <jyasskin>
Yeah, in that case, it should be "an abort", etc.

[10:22:18.0000] <dmarr>
what does it mean when my browser gives me a 200 but its from disk cache

[10:25:55.0000] <annevk>
dmarr: I don't understand the question

[10:26:27.0000] <dmarr>
annevk: like a GET /foo is 200 but being served from disk cache. Shouldn't that be a 304?

[10:26:44.0000] <dmarr>
or I guess what are the cases where something will 200 but be a cached response

[10:27:50.0000] <annevk>
dmarr: unless it was not a 200/304 to begin with, you'll almost always get a 200 through fetch()/XHR

[10:32:14.0000] <dmarr>
annevk: I get a 304 as expected when using the if-none-match header with a value of the current etag from the server

[10:32:53.0000] <dmarr>
but on other requests not using if-none-match i get 200 from disk - I guess thats normal

[10:33:02.0000] <annevk>
dmarr: yeah, there's a few ways to get the 304 back, but by default it's always "flattened" into a 200

[10:43:23.0000] <annevk>
Hmm, so dedicated/shared workers have pointers to 1) one or more documents 2) zero or more child workers 3) a parent (not covered by HTML) 4) a browsing context (for the purpose of checking if script is enabled; does that really live there?)

[10:43:28.0000] <annevk>
Seems so messy

[10:45:15.0000] <wanderview>
annevk: implementation-wise I am thinking of making Workers reference Client objects

[10:45:24.0000] <wanderview>
should be easy for the SharedWorker case

[10:45:35.0000] <wanderview>
less sure about dedicated workers

[10:46:05.0000] <wanderview>
so SharedWorker would have an array of attached Client objects instead of an array of attached documents

[10:47:17.0000] <wanderview>
might need a bit of work-around logic to make it handle the replaced about:blank document case since the Client is the environment instead of the document

[10:49:11.0000] <annevk>
wanderview: hmm, the replaced about:blank document case makes me wonder if it's not global objects already

[10:49:43.0000] <wanderview>
annevk: we could probably make it so... its got relatively low usage and a bit of a corner case

[10:49:57.0000] <annevk>
Guess I should write tests, but not today

[10:58:39.0000] <aklein>
annevk: I'm trying to grok your comment on https://github.com/whatwg/dom/pull/434#issuecomment-292696490 about cancel tokens not meeting the fetch use case. what do you mean by "we need objects that we can extend"?

[11:00:26.0000] <dmarr>
annevk: so the case where no if-none-match is sent in the request and a cached 200 comes back, is there another response header that causes that to happen? My server is sending etag, cache-control, date

[11:53:18.0000] <Domenic>
annevk: I believe bz has commented a few times that the scripting-enabled checks in the spec don't match impls :-/

[12:21:25.0000] <annevk>
dmarr: custom if-none-match?

[12:22:30.0000] <annevk>
aklein: what is the shape of a theoretical cancel token? Can it do events?

[12:23:39.0000] <annevk>
aklein: the signal we have is also going to be able to carry priority data and other such things

[12:24:45.0000] <annevk>
Domenic: did he say what impls do? I guess we need to make it official as long as noscript is around? Could also just remove the concept…

[12:25:10.0000] <jyasskin>
annevk: Dumb question: If we have the ES AbortSignal.register(callback) function, what's the benefit of using events instead?

[12:25:55.0000] <Domenic>
annevk: context?

[12:25:55.0000] <botie>
hmmm... context is https://github.com/validator/validator/issues/284

[12:26:10.0000] <annevk>
jyasskin: you can have a different event for priorities?

[12:26:30.0000] <jyasskin>
aklein: https://github.com/whatwg/fetch/issues/447#issuecomment-281731850 has the FetchController design. It'd want to be a subclass of the AbortController, or have AbortController mixed into it.

[12:27:37.0000] <jyasskin>
annevk: Ah, instead of having multiple signals, you'd have one signal with multiple events.

[12:27:39.0000] <annevk>
Domenic: your statement about scripting-enabled

[12:28:14.0000] <Domenic>
annevk: ah right. Let me dig it up. I think most UAs still have a toggle, someone showed me where Chrome's was recently.

[12:28:20.0000] <annevk>
jyasskin: yes, a FetchSignal tracks a bunch of bits and can then be reused across fetches

[12:28:52.0000] <Domenic>
Yeah and FetchSignal needs EventTarget anyway for other events.

[12:31:58.0000] <Domenic>
Hmm found https://github.com/whatwg/html/issues/1580 so far, not the issue I was thinking of though...

[12:34:42.0000] <jyasskin>
annevk/Domenic: If the ES system gave AbortSignal an onabort(callback) function instead of a register(callback) function (https://github.com/rbuckton/prex/blob/master/docs/cancellation.md#tokenregistercallback), would that be sufficient to let FetchSignal extend it as you want?

[12:34:58.0000] <Domenic>
No

[12:35:06.0000] <Domenic>
Because the inheritance hierarchy wouldn't work

[12:35:23.0000] <Domenic>
We need to inherit from EventTarget, not from ESAbortSignal

[12:35:37.0000] <jyasskin>
Oh, because EventTarget is a base class instead of a mixin. :(

[12:35:39.0000] <Domenic>
And it's a strictly worse experience for our users to have two ways of registering events, anyway

[12:35:51.0000] <Domenic>
Better to just use addEventListener for both abort and the other things

[12:36:18.0000] <Domenic>
There's no benefit to putting this in ES without syntax (e.g. my old third state proposal)

[12:39:33.0000] <jyasskin>
Sharing code with Node would be a benefit, although not to pure web users, and I see that moving away from addEventListener would be painful. aklein, is that convincing to the ES folks?

[12:40:10.0000] <Domenic>
node can share code, just like with fetch, they just need to copy the API over

[12:40:37.0000] <Domenic>
https://github.com/matthew-andrews/isomorphic-fetch/ etc.

[12:41:58.0000] <jyasskin>
Domenic: They'd copy the AbortSignal implementation including the EventTarget implementation, right?

[12:42:18.0000] <Domenic>
Yeah, or they'd make their own using EventEmitter, their choice

[12:44:13.0000] <jyasskin>
Domenic: Thanks.

[12:44:14.0000] <annevk>
Now that observables are gone we could revisit a better EventTarget and maybe get Node on board

[12:44:55.0000] <annevk>
With full compat on our side of course

[12:46:29.0000] <Domenic>
annevk: it's actually on my quarterly goal to write a spec for event-delegation and and event "namespaces" (https://github.com/whatwg/dom/issues/215 and https://github.com/whatwg/dom/issues/208) as first steps in exploring their feasibility and getting that rolling

[12:47:14.0000] <annevk>
Cool cool

[12:47:59.0000] <TabAtkins>
Ugh, observables got dropped?

[12:48:08.0000] <TabAtkins>
Events suck. :(

[12:59:38.0000] <aklein>
annevk: where do you see observables being gone?

[13:28:15.0000] <Domenic>
TabAtkins: thoughts on https://github.com/whatwg/html/pull/2517 ?

[13:30:42.0000] <TabAtkins>
Domenic: You want the attr-value type file:///usr/local/google/home/tabatkins/bikeshed/docs/index.html#dfn-types

[13:30:49.0000] <TabAtkins>
Whoops, one sec for better links

[13:31:06.0000] <TabAtkins>
https://tabatkins.github.io/bikeshed/#dfn-types

[13:33:20.0000] <Domenic>
TabAtkins: ah makes sense, so the for is... for="link/rel"?

[13:33:29.0000] <TabAtkins>
Yup

[13:33:56.0000] <TabAtkins>
Then <{link/rel/serviceworker}>

[13:34:22.0000] <TabAtkins>
I think <{rel/serviceworker}> might work too? I forget how strict I am with that shorthand.

[13:36:50.0000] <Domenic>
Awesome, thanks

[14:03:27.0000] <aklein>
jyasskin: I'm unclear as to why events are now considered a requirement of this API, while they weren't when the plan of record was to wait for whatever TC39 came up with. but I do think I understand annevk's comment about "extending" now

[14:31:26.0000] <wanderview>
annevk: JakeA: that cross-origin referer footgun in new Request() hit mobile twitter :-( https://bugzilla.mozilla.org/show_bug.cgi?id=1352101#c10

[14:31:56.0000] <wanderview>
our fix is in FF54... has chrome started implementing the spec change yet?


2017-04-11
[18:16:48.0000] <MikeSmith>
botie, forget context

[18:16:48.0000] <botie>
MikeSmith: I forgot context

[18:21:47.0000] <MikeSmith>
TabAtkins: Domenic thanks for the tip on <{link/rel/serviceworker}>, will update the https://github.com/whatwg/html/pull/2517#issuecomment-293070580 PR right now

[18:22:25.0000] <MikeSmith>
Bikeshed rocks

[18:24:13.0000] <Domenic>
/me 's entry settings object alarm goes off (re: wanderview's link)

[18:24:50.0000] <wanderview>
Domenic: that error message was written based on old spec text I believe

[18:25:01.0000] <wanderview>
and we haven

[18:25:19.0000] <wanderview>
we haven't implemented the new spec text yet for the multi-global tests you wrote

[21:37:19.0000] <HTH-GG>
有人吗？

[21:37:43.0000] <HTH-GG>
anyone there？

[22:12:53.0000] <annevk>
aklein: we waited for two years on TC39 not looking at the problem much ourselves

[22:13:50.0000] <annevk>
aklein: when we then started looking after third state et al failed we found several things that could be tightly coupled in a rather nice way

[22:14:24.0000] <annevk>
aklein: and would not have been possible with the TC39 proposals

[22:16:05.0000] <annevk>
aklein: and then a subset of that functionality got extracted as a set of base classes since it turned out we did want it in multiple places

[22:16:27.0000] <annevk>
aklein: that last one was rather recent

[22:17:28.0000] <annevk>
wanderview: nothing I can help with right? I believe we removed all the exception "footguns"

[23:39:18.0000] <MikeSmith>
https://github.com/Fyrd/caniuse/issues/885#issuecomment-293136872

[23:40:01.0000] <MikeSmith>
https://caniuse.com/ 🎉

[01:46:12.0000] <annevk>
It seems really slow

[02:03:56.0000] <MikeSmith>
yeah

[02:04:00.0000] <MikeSmith>
same here

[02:04:04.0000] <MikeSmith>
loads slow

[03:48:10.0000] <hsivonen>
MikeSmith: do you still care about the HTML4 validation modes in v.nu code?

[03:50:01.0000] <MikeSmith>
hsivonen: nope

[03:50:13.0000] <hsivonen>
MikeSmith: thanks

[03:50:27.0000] <MikeSmith>
planning to yank them?

[03:50:34.0000] <MikeSmith>
if so, happy to help

[03:50:37.0000] <hsivonen>
MikeSmith: very possibly

[03:50:46.0000] <MikeSmith>
OK

[03:51:09.0000] <hsivonen>
I'm currently trying to make the parser go faster, and I'm wondering if I should keep the HTML4-related flags on the attribute names

[03:51:26.0000] <MikeSmith>
ah

[03:51:47.0000] <MikeSmith>
yeah especially if it would be a performance gain, no reason to keep them

[03:58:19.0000] <hsivonen>
good times. the parser knows about https://msdn.microsoft.com/en-us/library/ms533706(v=vs.85).aspx Can't even remember why.

[04:01:06.0000] <hsivonen>
apparently because HTML 4.01 reserves it for future use!

[04:02:10.0000] <annevk>
dataformatas I always read that as "data formatas", not "data format as"

[04:02:38.0000] <hsivonen>
me too

[04:03:14.0000] <hsivonen>
veryverythickmathspace

[04:39:18.0000] <annevk>
Domenic: your definition of "agent" was wrong too

[04:39:36.0000] <annevk>
Domenic: a user agent is allowed to have one event loop for all its browsing contexts

[04:40:13.0000] <annevk>
Domenic: do we just want to make that disallowed since it cannot be observed if a user agent does that or do we actually want to work around it some other way?

[05:02:07.0000] <annevk>
Domenic: what ECMAScript calls the "executing thread" is what we call the event loop

[06:04:02.0000] <wanderview>
annevk: right, I was just mentioning it hit a relatively large site unfortunately

[06:04:33.0000] <wanderview>
and I guess asking JakeA if they had plans to impl the footgun fixes

[06:06:57.0000] <JakeA>
I'll chase it

[06:08:24.0000] <wanderview>
maybe its fixed in canary?  I only tested in release chrome... although I don't remember seeing a chromium issue for it

[07:04:07.0000] <annevk>
Reminder to self: don't volunteer for seemingly trivial tasks

[07:14:12.0000] <annevk>
JakeA: I have more detailed nits on the Abort stuff I think from a quick skim, but I'll wait a bit for more high-level feedback first

[07:14:59.0000] <annevk>
JakeA: overall though it seems ready enough to me to determine implementation interest and write tests

[07:15:51.0000] <JakeA>
annevk: Cool. I just pushed some more to the fetch branch. Will fix the nits

[07:17:14.0000] <annevk>
JakeA: I guess I would like to have it explained why we normalize to FetchSignal

[07:17:34.0000] <annevk>
JakeA: not in spec, here or in a comment on the PR is fine

[07:18:35.0000] <JakeA>
annevk: I was worried that devs might write code expecting request.signal to be a particular type, and get caught out when it turns out to be another type for a rare code path

[07:19:08.0000] <JakeA>
I guess the signal doesn't have methods though

[07:19:55.0000] <JakeA>
But if they expect .priority to be there & be a number

[07:20:00.0000] <annevk>
JakeA: if they don't pass one in themselves it'll just be null, no?

[07:20:31.0000] <annevk>
JakeA: and if they pass one in themselves it should be somewhat clear what they get

[07:20:39.0000] <JakeA>
annevk: I was thinking of cases where they get the request object from elsewhere

[07:21:24.0000] <annevk>
JakeA: yeah okay, I guess it's okay

[07:21:59.0000] <JakeA>
annevk: should I remove FetchController?

[07:22:05.0000] <JakeA>
I guess we don't need it

[07:22:43.0000] <annevk>
JakeA: you cannot get a FetchSignal otherwise and that would mean you always get an allocation each time you invoke fetch() with a signal

[07:22:44.0000] <JakeA>
Hah, although if we start with FetchSignal without .priority, developers are going to have to test for its existence anyway

[07:22:54.0000] <annevk>
JakeA: good point

[07:23:01.0000] <annevk>
JakeA: maybe just drop it entirely then

[07:23:22.0000] <JakeA>
annevk: agreed, I'll remove the casting

[07:23:34.0000] <JakeA>
pffft wish I'd figured that out early

[07:24:00.0000] <annevk>
Well, you've learned something I'm sure

[07:24:16.0000] <JakeA>
\o/

[07:47:05.0000] <MikeSmith>
the only way Artur Janc could have a cooler name is if his first name were Antti

[09:04:31.0000] <Domenic>
annevk: I think it might be time to disallow that because SABs make it observable

[09:04:49.0000] <Domenic>
It seems related to how I had to delete the sequential consistency guarantee from early in the spec

[09:39:29.0000] <annevk>
Domenic: 1) apparently an Agent is not an event loop, but maybe SAB still makes it observable somehow? If so, that seems bad?

[09:39:39.0000] <Domenic>
I am still pretty sure an agent is an event loop.

[09:39:58.0000] <annevk>
Domenic: I just talked at length with lth in jslang and he told me that was wrong

[09:40:04.0000] <Domenic>
yeah i think he is wrong :)

[09:40:13.0000] <annevk>
sigh

[09:40:21.0000] <Domenic>
i know :-/

[09:40:32.0000] <Domenic>
it was very surprising to wake up to find out the creator of agents thinks they are just redundant with realms

[09:40:43.0000] <annevk>
Domenic: 2) I noticed that JavaScript has consistency requirements for Agent clusters and when I ported that requirement over to HTML WebKit folks blocked it

[09:41:04.0000] <Domenic>
yeah, those were unilaterally added by lth without cross-browser agreement i guess

[09:41:23.0000] <Domenic>
we should probably raise that in tc39

[09:41:25.0000] <annevk>
Domenic: in particular, those agent cluster requirements would apply to when you kill workers and such

[09:41:39.0000] <Domenic>
since i don't think the jsc folks realized what was being put in the spec

[09:41:44.0000] <Domenic>
and they should talk to their webkit teammates

[09:41:48.0000] <annevk>
more sigh

[09:42:11.0000] <annevk>
If someone wants to introduce a new platform feature they should really work it through all the way

[09:42:33.0000] <annevk>
We should try to make that a requirement of sorts, you can't just land something in ecma262 and call it a day

[09:42:48.0000] <annevk>
At least not something with obvious Host implications

[09:47:06.0000] <aklein>
annevk: re: cancellation. hypothetically, had ES shipped some cancellation thing a year ago, would fetch use it? or would you have said "no, we need this to mesh well with events"?

[09:47:41.0000] <annevk>
aklein: I suspect we would have used it

[09:48:09.0000] <annevk>
aklein: but a year ago we also had a pretty poor understanding of what this could look like

[09:48:48.0000] <annevk>
aklein: so we might have just gone down the fastline of adding cancelation since folks are waiting on that (and have been for over two years now)

[09:50:34.0000] <aklein>
annevk: oh, other question from yesterday. you said "observables are gone"...what was that in reference to?

[09:51:51.0000] <annevk>
aklein: I forgot who I got that from, but I got the distinct impression that it didn't have sufficient interest from implementers and the only host consumer might be events, and we could also solve events on our own

[09:52:18.0000] <annevk>
aklein: I got the impression there was not sufficient need to add it as a primitive to the core language

[09:52:40.0000] <annevk>
aklein: and so browsers wouldn't ship it

[09:53:08.0000] <aklein>
annevk: huh, I wonder if that's what you took away from our conversation

[09:53:46.0000] <annevk>
aklein: could be or maybe from Domenic, my memory is not super clear on it so maybe I'm just wrong

[09:54:07.0000] <aklein>
annevk: myself, as an implementer, I'm certainly cautious to add new core things to the language. but I think there is still interest in the committee, including at least one implementer

[09:54:09.0000] <annevk>
(not that memory is ever clear...)

[09:55:51.0000] <annevk>
aklein: okay, I have been blocking a bit on it in DOM as well as earlier indications TC39 might do some event thing (that was long ago though), but nothing materialized thus far and it does seem nice to make the event API a little better soonish

[09:56:02.0000] <annevk>
aklein: we got most of jQuery covered

[09:56:43.0000] <aklein>
annevk: Jafar is the person to talk to about whether it's dead or not. he hasn't been able to make it to the last few meetings, so it keeps getting dropped off the agenda.

[09:57:30.0000] <aklein>
annevk: but this cancellation is indeed an interesting place to re-raise the event question

[10:06:56.0000] <annevk>
aklein: it's somewhat problematic that stuff needs to be actively lobbied through a committee and host concerns are generally not cared much for

[10:09:06.0000] <annevk>
I guess that's too unspecific, but I've noticed this with jobs, SharedArrayBuffer (see what's an agent?), and maybe also things like observables

[10:09:40.0000] <annevk>
You really can only make a case when you're in the room or have someone in the room that knows the full argument

[10:27:31.0000] <annevk>
Domenic: I guess the silver lining is that even though I based things on settings objects, what I wrote down is easily convertible and more accurate in the worker edge cases (I think!)

[10:28:35.0000] <annevk>
Domenic: but with awb's comment I'm becoming somewhat surprised I've led myself be deluded that much, since I was involved in a bunch of the previous discussions

[10:37:01.0000] <Domenic>
annevk: awb's comment seems about right to me. In particular the "The realms in the set are private to the Agent and may not be accessible to any other agent." seems to break the 1:1ness

[10:37:23.0000] <Domenic>
(as I expected)

[10:46:20.0000] <annevk>
Domenic: yeah, I guess I just thought when lth told me that they revamped the whole concept somehow

[10:46:45.0000] <annevk>
Domenic: anyway, glad I filed the bug

[10:47:06.0000] <Domenic>
yeah, agreed

[10:48:18.0000] <annevk>
Domenic: I also like awb's suggestions of actually defining the internals in much more detail

[10:48:35.0000] <Domenic>
yeah honestly i thought at least some of those were already defined but i guess i haven't read the agents spec recently

[10:48:57.0000] <smaug>
it sounds like people have great misunderstanding about passive listeners

[10:49:16.0000] <smaug>
that they somehow magically make performance good everywhere

[10:50:14.0000] <Domenic>
I wonder what the source on https://twitter.com/antimattur/status/851850917662117888 is

[10:53:03.0000] <annevk>
smaug: oh my, not totally unexpected, but still

[10:58:46.0000] <annevk>
Domenic: let me know when you find it

[11:04:26.0000] <aklein>
annevk: I don't think there's any general fix here. cross-cutting concerns are cross-cutting. this comes up in plenty of places other than ES <-> HTML/DOM

[11:52:30.0000] <aklein>
annevk: in this case, I suspect that Lars's "document" just doesn't match your concept of "document". need to go catch up on the thread

[12:52:11.0000] <annevk>
aklein: I recommend reading the jslang backlog, we discussed it in depth

[13:01:20.0000] <aklein>
annevk: yeah, I see that this conversation is split across several media

[13:12:47.0000] <aklein>
annevk: having read all that, still seems like this is a miscommunication, not a fundamental flaw. hopefully the github issue will help sort out the communication issues

[13:13:11.0000] <Domenic>
yes, i am also leaning toward miscommunication

[14:57:46.0000] <Domenic>
TabAtkins or anyone: is there no default "W3C" boilerplate? In particular I am pretty sure CC0/OWFa is not correct when I put "Group: W3C"

[14:57:55.0000] <TabAtkins>
There is not, no.

[14:58:03.0000] <TabAtkins>
So you're just getting the default boilerplate with that group.

[14:58:48.0000] <Domenic>
hmm so if i want to write a spec without a group i need to submit a bikeshed PR for that group adding all the boilerplate? :-/

[14:58:50.0000] <TabAtkins>
(There's no such thing as a generic W3C spec; everything's produced under a group.)

[14:59:07.0000] <Domenic>
s/"without a group"/for a group that isn't in Bikeshed's tree yet

[14:59:08.0000] <TabAtkins>
Nah, you can add the boilerplate locally in your spec folder.

[14:59:26.0000] <Domenic>
Well OK, that's slightly better, but still a lot of yak-shaving

[14:59:43.0000] <Domenic>
I guess I don't have any better suggestion though, just complaints

[14:59:46.0000] <TabAtkins>
It's... the minimum amount to actually publish a valid W3C spec?

[15:00:11.0000] <Domenic>
I guess the issue is I don't want to publish a valid W3C spec at this point, I just want to publish something that isn't under a license that'll get me in trouble.

[15:00:26.0000] <Domenic>
(in trouble when I do want to go through all the work of actually publishing, that is)

[15:00:41.0000] <TabAtkins>
Swap out the copyright.include locally, then. Just put in an "all rights reserved" or something for now.

[15:00:43.0000] <jyasskin>
Domenic: Which group is it in? Can you use WICG?

[15:00:48.0000] <TabAtkins>
Always easy to loosen things.

[15:00:48.0000] <Domenic>
jyasskin: web payments

[15:00:58.0000] <Domenic>
TabAtkins: copyright.include, roger roger.

[15:01:18.0000] <TabAtkins>
Domenic: And you can do that actually inside your spec.

[15:01:28.0000] <TabAtkins>
<div boilerplate=copyright>All rights reserved</div> should work.

[15:07:43.0000] <Domenic>
Seem to be in good shape. Thanks as always for the help.

[15:12:07.0000] <Domenic>
TabAtkins: wasn't there a way to tell Bikeshed how much indentation I plan on using? Can't find it searching for "indent" in the docs

[15:53:57.0000] <TabAtkins>
Domenic: Ah, hm, it's not documented. It's "Indent: <integer>"

[16:06:43.0000] <weinig>
Domenic: have a moment for a question or two about the new extended attributes on types in WebIDL?

[16:06:58.0000] <weinig>
might be the wrong dominic :(

[16:07:23.0000] <weinig>
nope, got it right!

[16:09:38.0000] <weinig>
basically, the question is, int the case of something like

[16:09:57.0000] <weinig>
[Clamp] attribute long foo;

[16:10:36.0000] <weinig>
should the [Clamp] be in annotated type of foo

[16:11:19.0000] <weinig>
The https://heycam.github.io/webidl/#idl-type-extended-attribute-associated-with algorithm stiplilates that is should for union, argument, dictionary and typedef productions, but not for attributes

[16:12:28.0000] <weinig>
tobie: perhaps you know

[16:27:01.0000] <Domenic>
weinig: back from dinner! Let's see

[16:27:09.0000] <weinig>
Domenic: hi there

[16:27:23.0000] <Domenic>
weinig: so the idea is that that is now an error since [Clamp] cannot be used except on types. We need to go update all the specs to do attribute [Clamp] long foo;

[16:27:53.0000] <Domenic>
I'm sorry we didn't do that immediately :(

[16:28:07.0000] <weinig>
Domenic: ok, I’m not sure there are any

[16:28:37.0000] <Domenic>
I think there might be some for [TreatNullAs], but yeah, I guess it is kind of rare in general

[16:28:39.0000] <weinig>
Domenic: I couldn’t immediately find any use like that in real use, only our tests

[16:28:46.0000] <weinig>
/me nods

[16:28:48.0000] <Domenic>
The more common case is [X] optional Y -> optional [X] Y

[16:28:54.0000] <Domenic>
in arguments lists

[16:29:03.0000] <weinig>
yes, is that still allowed?

[16:29:19.0000] <Domenic>
No, optional is an annotation on the type, so it needs to become optional [X] Y

[16:29:37.0000] <tobie>
Domenic was too fast for

[16:29:47.0000] <tobie>
me.

[16:29:56.0000] <tobie>
:)

[16:30:54.0000] <weinig>
Domenic: oh i see, so step 4 of https://heycam.github.io/webidl/#idl-type-extended-attribute-associated-with, is only refereing to the non-optional variant of the argument production

[16:30:57.0000] <weinig>
ok

[16:31:33.0000] <Domenic>
Yeah, I guess "within" is ambiguous between "directly within" and "within after expanding the grammar"

[16:31:50.0000] <weinig>
Domenic: I was a bit confused :)

[16:32:01.0000] <Domenic>
Let me file an issue and fix over the next day or two

[16:32:05.0000] <weinig>
Domenic: thanks

[16:34:33.0000] <Domenic>
https://github.com/heycam/webidl/issues/341

[16:35:08.0000] <weinig>
the other question was what step 3 of that algorithm is trying to do, does it mean that for something like [Clamp] long or DOMString) , the longs annotated type might have [Clamp]?

[16:35:15.0000] <weinig>
or am I reading that totally wrong

[16:36:04.0000] <Domenic>
I think the intention is that [Clamp] (long or double) means that the long has a [Clamp] associated with it

[16:36:16.0000] <weinig>
Domenic: ok,

[16:36:21.0000] <Domenic>
I hope the parens are required when defining union types...

[16:36:25.0000] <weinig>
oh damn, I forgot a (

[16:36:36.0000] <Domenic>
ah yes they are, phew

[16:36:38.0000] <weinig>
Domenic: they are, I just mistyped :(

[16:36:58.0000] <Domenic>
It'd be good to add examples to each of these steps, actaully

[16:37:32.0000] <weinig>
I am unclear how that doesn’t lead to an error case however, since the [Clamp] would get added to double as well, which is not allowed

[16:37:45.0000] <Domenic>
Oh, I forgot where clamp is allowed

[16:38:13.0000] <Domenic>
OK, integer types only, so I guess... there is no good example for clamp at least

[16:38:16.0000] <weinig>
Domenic: just integers

[16:38:29.0000] <Domenic>
Yeah and you can't put two integers in a union I am pretty sure

[16:38:36.0000] <weinig>
right, or two strings

[16:39:13.0000] <Domenic>
so i guess that step is pretty much dead code given the current set of extended attributes applicable to types

[16:39:17.0000] <weinig>
I guess, maybe in the future, there will be an extended attribute useful on all types :)

[16:39:21.0000] <Domenic>
But it will be very important for [AllowShared]

[16:39:31.0000] <Domenic>
Because then [AllowShared] (ArrayBuffer or Uint8Array or ...) will work

[16:39:41.0000] <Domenic>
We will likely typedef that to SharedBufferSource

[16:39:43.0000] <weinig>
cool beans

[16:39:55.0000] <weinig>
thanks, this really helped clarify things

[16:40:20.0000] <Domenic>
Awesome, glad to help. I'll do my best to reflect these things back into the spec ASAP. (And also update specs to use the new syntax.)

[16:54:26.0000] <MikeSmith>
howdy weinig!

[16:55:13.0000] <weinig>
hi MikeSmith!

[16:55:28.0000] <weinig>
MikeSmith: gotta run though :)


2017-04-12
[17:09:38.0000] <othermaciej>
So I just filed this issue but I realized I can't possibly be the first person to raise this: https://github.com/whatwg/streams/issues/732

[17:10:34.0000] <othermaciej>
What is the deal with the pseudo-ECMAScript interface definitions in Streams?

[17:11:55.0000] <MikeSmith>
[trigger sound of can of worms opening]

[17:13:11.0000] <MikeSmith>
ah Domenic already responded there

[17:17:00.0000] <othermaciej>
yep

[18:20:32.0000] <weinig>
Domenic: I thought of one other question :). Why can’t ReturnTypes have extended attributes? I mean, they can, if you use a typedef, but there is no direct syntax to associate an extended attribute with an operation’s return type

[18:21:57.0000] <Domenic>
Hmm, that might just be an oversight...

[18:22:03.0000] <Domenic>
Especially with the typedef thing

[18:22:18.0000] <weinig>
want me to file an issue?

[18:22:34.0000] <Domenic>
Yeah, that'd be great :)

[18:22:37.0000] <weinig>
k, thanks

[18:23:45.0000] <Domenic>
Although, this might be intentional, as bz says in https://github.com/heycam/webidl/pull/286#issuecomment-275307976 " ReturnType definitely shouldn't have attributes. " I don't quite understand why though, and we should if nothing else close the typedef loophole

[20:50:12.0000] <domfarolino>
Domenic: Just a heads up regarding my inactivity on console - lots of exams and school work going on as the semester comes to a close - will be resuming as more time is available

[23:53:17.0000] <KiChjang>
is web.archive.org the only way to get a previous version of a spec?

[00:00:45.0000] <MikeSmith>
annevk: in Fetch terms does a 50x result in a “network error”?

[00:01:18.0000] <MikeSmith>
KiChjang: yes basically, though https://platform.html5.org/history/ has archived copies of some

[00:01:37.0000] <MikeSmith>
but just for the HTML spec

[00:09:17.0000] <annevk>
MikeSmith: what is a 50x result?, is that like a 10x developer?

[00:09:29.0000] <annevk>
MikeSmith: oh wait, it's a status code, no it doesn't

[00:12:33.0000] <MikeSmith>
annevk: yeah specifically meant a 504

[00:13:10.0000] <MikeSmith>
if a server responds to a fetch with a 504 is there any way to get to the response?

[00:13:41.0000] <MikeSmith>
is CORS not relevant in that case?

[00:14:00.0000] <annevk>
MikeSmith: CORS is relevant if we're talking about a cross-origin request

[00:14:20.0000] <MikeSmith>
yeah cross-origin

[00:14:38.0000] <annevk>
MikeSmith: in that case the 504 also needs to include the relevant CORS headers

[00:14:59.0000] <MikeSmith>
OK so if the server sends CORS headers, can you get the status message from teh response?

[00:15:44.0000] <MikeSmith>
doesn’t the fetch hit the .catch()?

[00:15:53.0000] <annevk>
MikeSmith: yes and no

[00:16:18.0000] <annevk>
MikeSmith: it might be tricky to configure the server  to send CORS headers for 5xx though

[00:16:22.0000] <MikeSmith>
OK

[00:17:17.0000] <MikeSmith>
well if it does send CORS headers can you get to the status code/message somehow from JavaScript?

[00:17:45.0000] <MikeSmith>
context is https://stackoverflow.com/questions/43361789/fetch-api-how-to-get-response-body-in-catch/43361959#43361959

[00:18:33.0000] <MikeSmith>
so feel free to answer there, or comment to correct anything

[00:19:37.0000] <MikeSmith>
the OP just has the typical problem of wanting to get specific details from their JavaScript code about why exactly the fetch failed

[00:20:21.0000] <MikeSmith>
(maybe this is already answered well somewhere else at stackoverflow)

[00:21:40.0000] <annevk>
I added an answer

[00:21:40.0000] <MikeSmith>
/me goes back to working on PRs

[00:21:44.0000] <MikeSmith>
ah cool

[00:21:45.0000] <MikeSmith>
thanks

[00:21:51.0000] <MikeSmith>
looking now

[00:27:35.0000] <MikeSmith>
cheers

[00:27:59.0000] <MikeSmith>
restored my answer, which I think is still correct

[00:28:12.0000] <MikeSmith>
but if not lemme know, or comment there

[00:29:50.0000] <annevk>
MikeSmith: yeah, I think you were correct, I decided to leave a new reply since yours became a little confusing with the strike through and comments

[00:30:03.0000] <MikeSmith>
at some point I want to mine some cors/fetch answers out from stackoverflow and use them to update the related MDN docs

[00:30:40.0000] <MikeSmith>
annevk: yeah that’s better, and shorter, and clearer

[00:30:57.0000] <MikeSmith>
I have a hard time writing succinctly

[00:31:24.0000] <MikeSmith>
anyway I 'as long as

[00:31:28.0000] <MikeSmith>
oofs

[00:32:01.0000] <MikeSmith>
anyway I’m happy as long as somebody ends up with an understanding that helps them

[00:32:33.0000] <MikeSmith>
so many people show up on stackoverflow so very confused about CORS and often really frustrated

[00:32:53.0000] <MikeSmith>
and very confused about fetch as well

[00:33:47.0000] <MikeSmith>
they are often accustomed to using jQuery $.ajax or (nowadays) axios or something, and they are confused about why fetch doesn’t work the same way

[00:34:11.0000] <MikeSmith>
confused that fetch is not doing some automatic magic for them

[01:09:47.0000] <annevk>
mkwst: maybe we should add nonce to all elements that might end up using it?

[01:09:58.0000] <annevk>
mkwst: all elements with src/href I guess?

[01:11:49.0000] <mkwst>
annevk: *shrug* I'm fine with that. It would basically move back to the patch against HTML, and just make more elements implement the interface.

[01:12:22.0000] <mkwst>
I'm not sure that's significantly different than putting it on `Element`, but it would reduce the perf overhead for things like `<div>` and `<span>`, which has to be good.

[01:13:41.0000] <annevk>
mkwst: well, yes, that would be the difference; I wouldn't necessarily make all those elements implement the interface though, just the attribute munging

[01:18:08.0000] <mkwst>
Ah. So change their insertion steps?

[01:18:15.0000] <mkwst>
And I guess cloning steps?

[01:18:41.0000] <mkwst>
I mean, at that point they might as well implement the interface.

[01:19:33.0000] <annevk>
mkwst: just insertion steps, they only need the slot and cloning when you'd actually add the feature to them

[01:20:16.0000] <mkwst>
I guess. But Firefox has apparently already added it to some set of elements beyond the spec. I wonder if we should try to support those or punt on it.

[01:20:48.0000] <annevk>
Yeah, that seems a little weird and I wonder how that happened

[01:21:13.0000] <annevk>
Clearly there's still stuff shipping without going through a vetted intent to ship

[01:23:27.0000] <mkwst>
*shrug* I can imagine it was an oversight. I don't know much about mozilla's loading infrastructure, but it might have been easier to pass everything through rather than special-casing scripts.

[01:24:29.0000] <mkwst>
But that's something of a side-concern. I'd be fine with what you're suggesting, I think.

[01:25:06.0000] <mkwst>
It's a lot of copy/paste, and I'm not sure it'll make bz any happier, but I'm happy to spec it if that's what you'd like to see.

[01:28:12.0000] <annevk>
mkwst: alright, I'll make that suggestion on blink-dev and see what bz says later today?

[01:30:25.0000] <mkwst>
Thanks!

[01:56:17.0000] <zcorpan>
jgraham: miketaylr: do you know who at mozilla might have opinions about https://github.com/whatwg/html/issues/2464#issuecomment-290421056

[02:06:28.0000] <smaug>
Budget API is interesting. I don't really understand at all what it is for

[02:06:58.0000] <smaug>
especially the cost part

[02:09:03.0000] <smaug>
beverloo: why does blink want to ship parts of the API which is super vague

[02:18:15.0000] <smaug>
beverloo: why https://wicg.github.io/budget-api/#budgetservice doesn't use SecureContext?

[02:18:55.0000] <smaug>
but explicitly check secure context in the algorithm

[02:20:30.0000] <jgraham>
zcorpan: No idea, sorry

[02:22:53.0000] <zcorpan>
smaug: do you have any opinion ? https://github.com/whatwg/html/issues/2464#issuecomment-290421056

[02:24:32.0000] <smaug>
zcorpan: using toolbar for the noopener case feels like a hack

[02:26:47.0000] <zcorpan>
smaug: i guess. maybe noopener should have been specified in a new argument with a dictionary, but now it's implemented as a "feature"

[02:27:41.0000] <smaug>
zcorpan: why is toolbar special?

[02:27:55.0000] <smaug>
I would expect a new window with toolbar to be shown

[02:28:33.0000] <zcorpan>
smaug: because it's special in firefox (it opens a "full" browser window rather than a minimal-chrome window)

[02:29:06.0000] <smaug>
yes, sounds like FF's behavior is the expected one

[02:30:03.0000] <smaug>
zcorpan: how does one then open a new proper window with toolbar and all?

[02:30:30.0000] <zcorpan>
smaug: ok. in non-firefox browsers that is not possible

[02:30:45.0000] <zcorpan>
smaug: before the recent change in chromium you'd always get a minimal-chrome popup

[02:31:00.0000] <zcorpan>
smaug: in safari/chrome/opera/edge

[02:31:58.0000] <smaug>
what does Edge do?

[02:32:02.0000] <zcorpan>
smaug: and empty or missing features argument opens a tab (but then you can't use noopener if you *want* a tab)

[02:32:09.0000] <smaug>
er, you said edge

[02:32:13.0000] <zcorpan>
right

[02:32:22.0000] <zcorpan>
edge also doesn't support noopener here

[02:32:39.0000] <zcorpan>
afaik (maybe changed in edge15)

[02:33:47.0000] <smaug>
I might like more some new value

[02:34:06.0000] <smaug>
which actually tells to the API user what is probably happening

[02:34:47.0000] <smaug>
zcorpan: does just having 'toolbar' open a tab, even with any other features like size?

[02:35:01.0000] <zcorpan>
smaug: yes

[02:35:16.0000] <smaug>
confusing

[02:37:02.0000] <zcorpan>
smaug: thanks for the feedback. could you also clarify what you would like to see instead?

[02:37:36.0000] <smaug>
zcorpan: so for API users, shouldn't it be something like openInTab

[02:37:39.0000] <smaug>
new feature

[02:38:14.0000] <smaug>
zcorpan: what does Chrome do if you first open a new window (no toolbars) and then open a new window with 'toolbar' ?

[02:39:34.0000] <zcorpan>
smaug: note that all browsers already have ability to open in a new tab from window.open -  http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5007

[02:39:49.0000] <smaug>
sure

[02:40:09.0000] <smaug>
I'm not talking about that

[02:41:58.0000] <zcorpan>
smaug: it first opens a popup and then a tab... http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5008

[02:42:31.0000] <smaug>
zcorpan: you're opening from the same window

[02:42:55.0000] <smaug>
first open without toolbar, and then that one opens with toolbar

[02:42:59.0000] <zcorpan>
oh, i see

[02:46:53.0000] <zcorpan>
smaug: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/5009 it opens a tab in the first window

[02:47:56.0000] <smaug>
huh

[02:48:18.0000] <smaug>
ok, I didn't know blink has this weird behavior

[02:48:48.0000] <zcorpan>
it's pretty new and hasn't shipped yet

[02:50:00.0000] <zcorpan>
CL https://codereview.chromium.org/2773573002

[02:56:28.0000] <smaug>
but why does it open a tab in an existing window

[06:07:42.0000] <annevk>
If anyone is waiting on for something it would be good if you could remind me, since I think I've officially lost track

[06:08:02.0000] <annevk>
(apart from that assert_throws PR zcorpan)

[08:15:07.0000] <MikeSmith>
TabAtkins: curl https://api.csswg.org/bikeshed/ -F url=https://raw.githubusercontent.com/w3c/ServiceWorker/246340fce702bab2cce35b046f090606389b279a/docs/index.bs -F output=err

[08:15:22.0000] <MikeSmith>
LINK ERROR: No 'attr-value' refs found for 'serviceworker'.

[08:15:24.0000] <MikeSmith>
<a data-link-type="attr-value" data-lt="serviceworker" data-link-for="link/rel">serviceworker</a>

[08:16:55.0000] <MikeSmith>
hsivonen: I wonder if maybe it’s time to close https://bugzilla.validator.nu/ to new bugs

[08:18:23.0000] <MikeSmith>
hsivonen: just noticing https://bugzilla.validator.nu/show_bug.cgi?id=1033 from Aaron Leventhal (will comment to ask that he re-raise it in the github tracker)

[08:29:58.0000] <Domenic>
domfarolino: no problem, completely understandable!

[08:30:34.0000] <Domenic>
MikeSmith: re previous versions, we also have /commit-snapshots/

[08:33:45.0000] <Domenic>
MikeSmith: It's supposed to be data-dfn-for and data-dfn-type per https://tabatkins.github.io/bikeshed/#dfn-contract

[08:35:02.0000] <TabAtkins>
That's dfn vs link

[08:35:32.0000] <TabAtkins>
And none of that has to be typed out for a .bs spec

[08:36:32.0000] <TabAtkins>
(I'll check the spec in a sec - are you sure the term is correctly defined already?)

[09:03:35.0000] <Domenic>
Oh I see that's the bikeshed error message containing link-

[09:39:26.0000] <MikeSmith>
TabAtkins: the preprocessed source for the HTML spec has this:

[09:39:28.0000] <MikeSmith>
  <dfn data-dfn-for="link/rel" data-dfn-type="attr-value" data-export=""><code

[09:39:29.0000] <MikeSmith>
  data-x="rel-serviceworker">serviceworker</code></dfn>

[09:39:44.0000] <MikeSmith>
the processed HTML output has this:

[09:39:48.0000] <MikeSmith>
<dfn data-dfn-for="link/rel" data-dfn-type="attr-value" data-export=""><code>serviceworker</code></dfn>

[09:40:29.0000] <MikeSmith>
oh I see that output is exactly the same as the source

[09:40:55.0000] <MikeSmith>
ah not exactly

[09:41:07.0000] <MikeSmith>
the output drops the data-x="rel-serviceworker"

[09:45:29.0000] <TabAtkins>
Which is weird? That's not something Bikeshed removes.

[09:45:42.0000] <TabAtkins>
Oh, that's HTML source.

[09:46:51.0000] <MikeSmith>
yeah

[09:47:23.0000] <MikeSmith>
this is in a heading element btw

[09:47:35.0000] <MikeSmith>
dunno of that throws bikeshed off

[09:48:11.0000] <MikeSmith>
<h5 id="link-type-serviceworker">4.6.6.18 Link type "<dfn data-dfn-for="link/rel" data-dfn-type="attr-value" data-export=""><code>serviceworker</code></dfn>"<a href="#link-type-serviceworker" class="self-link"></a></h5>

[09:49:35.0000] <TabAtkins>
Shouldn't. Checking.

[09:50:02.0000] <MikeSmith>
TabAtkins: btw as far as xrefs to the HTML spec, for adding xrefs to the xref database, Bikeshed processes the HTML-output published spec? Or does it process the source file?

[09:50:27.0000] <TabAtkins>
Always HTML output.  The db-builder is a separate project entirely, that just spiders a bunch of specs.

[09:51:01.0000] <TabAtkins>
(Which is one of the reasons naive ReSpec usage is so terrible - you just get unprocessed source.)

[09:54:57.0000] <MikeSmith>
ah OK

[10:05:55.0000] <TabAtkins>
Ah, I see the problem. The <dfn> doesn't have an ID on it, so it obviously can't be picked up as an anchor.

[10:06:40.0000] <annevk>
I guess we should put it all on the <h5> then

[10:06:41.0000] <TabAtkins>
You can either put an ID there, or move the dfn attributes up to the heading instead (including data-lt, since the text content will no longer be your desired linktext) and remove the <dfn> element.

[10:07:07.0000] <TabAtkins>
Y'all should probably lint for ID-less <dfn> elements.

[10:08:00.0000] <annevk>
I don't think so, they're auto-generated

[10:08:26.0000] <annevk>
It's just that it's slightly different from Bikeshed with headings, so maybe we should lint headings that contain <dfn>

[10:08:36.0000] <MikeSmith>
TabAtkins: OK, thanks

[10:09:15.0000] <TabAtkins>
annevk: Well, it doesn't auto-generate in that case, is the issue.

[10:09:21.0000] <MikeSmith>
yeah

[10:09:38.0000] <MikeSmith>
annevk: I wonder will it work if I put <dfn id=rel-serviceworker>

[10:10:04.0000] <MikeSmith>
in the source

[10:10:45.0000] <MikeSmith>
or I guess the real fix may need some wattsi change

[10:11:02.0000] <MikeSmith>
but I dunno block this serviceworker xref on that

[10:11:18.0000] <MikeSmith>
*don’t want to block

[10:13:37.0000] <annevk>
TabAtkins: it's a feature, since we want links to go to the heading

[10:14:18.0000] <TabAtkins>
annevk: Ah, kk. In that case, yeah, lint for "<dfn>s in headings that people marked up for Bikeshed, accidentally thinking it would get an ID". ^_^

[10:14:24.0000] <annevk>
MikeSmith: I'd prefer exporting from the heading over creating a new ID

[10:14:47.0000] <annevk>
TabAtkins: yeah

[10:16:11.0000] <MikeSmith>
exporting from the heading loses the value of being able to refer to it with just <{link/rel/serviceworker}> in bikeshed, right?

[10:16:31.0000] <MikeSmith>
the problem I want to solve here is just to be able to use <{link/rel/serviceworker}>

[10:16:53.0000] <annevk>
MikeSmith: no, you should still be able to do that

[10:16:53.0000] <TabAtkins>
MikeSmith: No, it's fine - headings can be definition-providers just like <dfn>.

[10:17:04.0000] <MikeSmith>
ah OK

[10:17:28.0000] <MikeSmith>
will raise a PR that does it that way, then

[10:18:39.0000] <MikeSmith>
though I guess the next thing that we are gonna wonder about is, should I change all the other link-relation headings/dfn in the same way

[10:19:02.0000] <MikeSmith>
wait though

[10:19:34.0000] <MikeSmith>
nm

[10:19:43.0000] <MikeSmith>
will just try it for the serviceworker heading from now

[10:24:53.0000] <MikeSmith>
TabAtkins: OK so the following HTML will work as far as what Bikeshed needs?

[10:24:56.0000] <MikeSmith>
<h5 data-dfn-for=link/rel id=link-type-serviceworker data-dfn-type=attr-value data-export="">4.6.6.18 Link type "<dfn><code>serviceworker</code></dfn>"<a href=#link-type-serviceworker class=self-link></a></h5>

[10:25:59.0000] <TabAtkins>
You want data-lt=serviceworker on there (unless you really want the attribute value to be "4.6.6.18 Link Type "serviceworker"").  And you can remove the `<dfn>` element entirely.

[10:26:09.0000] <MikeSmith>
haha

[10:26:11.0000] <MikeSmith>
ah OK yeah

[10:36:59.0000] <MikeSmith>
TabAtkins: annevk Domenic https://github.com/whatwg/html/pull/2524

[11:04:17.0000] <Domenic>
TabAtkins: what is the incantation to link to things that are for-now-not-exported? I thought there was something you could put in link-defaults?

[11:05:05.0000] <TabAtkins>
spec=foo on the link, or a link-defaults line (which includes a spec:foo; entry)

[11:05:36.0000] <Domenic>
Hmm I tried `spec: URL; text: base URL` and it complained at me

[11:06:47.0000] <TabAtkins>
Definitely need at least a "type" in link defaults.

[11:06:57.0000] <TabAtkins>
Did it complain properly, telling you what was missing?

[11:07:01.0000] <TabAtkins>
(If not, that's a Bikeshed bug.)

[11:07:20.0000] <Domenic>
It did say it needed a type, but I am surprised since URL already defines the type (as dfn)

[11:07:37.0000] <TabAtkins>
Yeah, but Bikeshed needs to know what the type is so it can actually match things up.

[11:07:42.0000] <Domenic>
But now I did `spec: URL; type: dfn; text: base URL` and it's complaining `[1;33mLINK ERROR:[0m No 'dfn' refs found for 'base url' that are marked for export.`

[11:07:59.0000] <TabAtkins>
Okay, will check in a sec, in an interview rn.

[11:08:12.0000] <Domenic>
ok!

[12:41:45.0000] <dcheng>
smaug: It's because of the NavigationPolicy we pick

[12:42:01.0000] <dcheng>
smaug: I suppose we could make it always create a new window if it's created from a popup, would that make it less weird?

[12:43:08.0000] <smaug>
yes

[14:04:02.0000] <MikeSmith>
TabAtkins: so https://html.spec.whatwg.org/ now has this:

[14:04:05.0000] <MikeSmith>
  <h5 data-dfn-for=link/rel id=link-type-serviceworker data-dfn-type=attr-value data-lt=serviceworker data-export="">4.6.6.18 Link

[14:04:08.0000] <MikeSmith>
  type "<dfn><code>serviceworker</code></dfn>"<a href=#link-type-serviceworker class=self-link></a></h5>

[14:04:11.0000] <MikeSmith>
yet:

[14:04:22.0000] <MikeSmith>
curl https://api.csswg.org/bikeshed/ -F url=https://raw.githubusercontent.com/w3c/ServiceWorker/246340fce702bab2cce35b046f090606389b279a/docs/index.bs -F output=err

[14:04:48.0000] <MikeSmith>
still gives:

[14:04:51.0000] <MikeSmith>
LINK ERROR: No 'attr-value' refs found for 'serviceworker

[14:07:47.0000] <Domenic>
MikeSmith: it probably will take a day for it to propagate :-/

[14:07:52.0000] <MikeSmith>
aha

[14:07:58.0000] <Domenic>
annevk: UTF-8 decode produces a scalar value string, not a JavaScript string, right?

[14:09:01.0000] <MikeSmith>
never any instant gratification in working on the web runtime 😞

[14:09:39.0000] <TabAtkins>
MikeSmith: kNah, it's already there.

[14:09:59.0000] <TabAtkins>
Just updated a few minutes ago to check, and it's returned by `bikeshed refs --text=serviceworker`

[14:10:14.0000] <MikeSmith>
well wtf then

[14:11:50.0000] <MikeSmith>
I got <{link/rel/serviceworker}> in teh Service Worker source

[14:11:57.0000] <TabAtkins>
Oh, hm, it doesn't have a for value in the db.

[14:12:17.0000] <MikeSmith>
ah yeah the full error is LINK ERROR: No 'attr-value' refs found for 'serviceworker' with for='link/rel'.

[14:12:31.0000] <TabAtkins>
That's weird tho

[14:12:40.0000] <TabAtkins>
Gonna yell at plinss about it.

[14:12:40.0000] <MikeSmith>
it doesn’t recognize data-dfn-for=link/rel ?


2017-04-13
[18:27:54.0000] <annevk>
Domenic: yup

[21:46:23.0000] <Domenic>
Oooh, nightly servo builds now available on Windows

[21:49:06.0000] <Domenic>
Well, all that multithreaded GPU rendering fanciness did jack shit on the singlepage HTML spec ^_^

[21:50:26.0000] <MikeSmith>
haha

[21:51:05.0000] <MikeSmith>
funny benchmark we have

[01:16:02.0000] <hsivonen>
MikeSmith: yeah, closing it is one of the things I naive thought I had time for this spring

[01:16:22.0000] <hsivonen>
MikeSmith: would migrating the open bugs to github be useful or spammy?

[01:19:48.0000] <hsivonen>
MikeSmith: I added a link to GitHub and closed Bugzilla for new bug entry.

[01:20:00.0000] <hsivonen>
s/naive/naively/

[01:48:24.0000] <MikeSmith>
hsivonen: super, thanks

[01:49:08.0000] <MikeSmith>
Yeah I don't think there's much value in migrating the existing open issues

[01:49:35.0000] <MikeSmith>
most are basically just stale at this point, I think

[03:46:43.0000] <hsivonen>
MikeSmith: ok

[03:47:28.0000] <annevk>
MikeSmith: do you still use WPT for conformance tests?

[03:55:21.0000] <MikeSmith>
annevk: yes

[03:55:32.0000] <annevk>
kk

[03:56:01.0000] <annevk>
(asking cause of some seemingly stale url-labeled issues I found, but I'm not bothered by them or anything)

[03:57:34.0000] <MikeSmith>
ah OK

[10:21:11.0000] <MikeSmith>
Domenic: about the deploy.sh find invocation I think we could just add -quit

[10:21:27.0000] <MikeSmith>
hmm but not sure if that’s a GNU-only thing

[10:30:00.0000] <MikeSmith>
just tested and it works on BSD too

[10:30:04.0000] <MikeSmith>
MacOS

[10:30:18.0000] <MikeSmith>
need to add -print too

[10:30:20.0000] <MikeSmith>
find . -name "*.bs" -print -quit

[10:50:04.0000] <Domenic>
MikeSmith: ah cool, makes sense. I get the sense that maybe there's a more targeted tool than find, but find works too

[10:50:42.0000] <TabAtkins>
What you doing with that?

[10:52:18.0000] <MikeSmith>
TabAtkins: the context is https://github.com/whatwg/resources.whatwg.org/pull/52#pullrequestreview-32685441

[10:52:37.0000] <MikeSmith>
common deploy script for whatwg specs

[10:53:01.0000] <MikeSmith>
goal is to find the *.bs file regardles of the basename, and get the title from it

[12:24:35.0000] <Domenic>
zcorpan: smaug: I'm a little confused by https://github.com/whatwg/html/issues/2464. Isn't the question of tab-vs.-window a UI question outside the scope of the spec?

[12:25:48.0000] <smaug>
I don't think so. blink making 'toolbar' somehow special could break other browsers if pages start to rely on that

[12:26:14.0000] <smaug>
but yes, in general the window vs tab is probably out of the scope

[12:39:58.0000] <Domenic>
smaug: how would it break other browsers? what tests could authors write that would succeed in blink and fail elsewhere?

[12:44:08.0000] <smaug>
Say window.open("about:blank", "", "toolbar,width=400,height=400"); Site could start relying on blink's behavior(, which is rather weird given that size is actually provided). The site would feel broken in other browsers

[12:44:34.0000] <smaug>
s/about:blank/<some reasonable url>/

[13:05:24.0000] <Domenic>
smaug: my question is how sites could rely on Blink's behavior. What's detectable about it?

[13:05:54.0000] <smaug>
opening a new tab in a "main window" vs. opening a new window with specified size is quite different

[13:07:46.0000] <smaug>
and detecting that, just check what kind of window was opened

[13:07:56.0000] <smaug>
like check its size

[13:12:56.0000] <Domenic>
ok, size, i see. thanks.

[13:13:14.0000] <Domenic>
although i still am doubtful that web developers could write non-interoperable code based on window sizes being different

[13:13:24.0000] <Domenic>
given that they have no idea what the size of the browser window is anyway

[13:13:33.0000] <Domenic>
s/no idea/no control over/

[13:23:19.0000] <smaug>
they do have control of the size of the opened window

[13:23:23.0000] <smaug>
on desktop

[13:56:32.0000] <Domenic>
But not of any other window


2017-04-14
[21:27:32.0000] <annevk>
Why is the WebAssembly shipping bar so low? Do you know rbyers?

[21:32:55.0000] <MikeSmith>
annevk: not sure but I think the state of things is that it’s already implemented across UAs at some relatively high level of interoperability

[21:33:27.0000] <MikeSmith>
they have common test suite and I think implementors have been working against that and I refining it

[21:34:01.0000] <MikeSmith>
so it seems like the implementations are pretty mature at this point

[21:34:43.0000] <MikeSmith>
that said I’m sure there are some interop issues there still and also spec issues which have not gotten as much outside scrutiny as they should have

[21:35:03.0000] <annevk>
I hope that is true for the JS API too

[21:36:27.0000] <MikeSmith>
well

[21:36:46.0000] <MikeSmith>
not sure it is

[21:36:54.0000] <annevk>
Bit skeptical though, since the design is sketch notes, working that out into an algorithm usually results in more choices to be made

[21:37:01.0000] <MikeSmith>
that I think they may not even have tests for

[21:37:16.0000] <MikeSmith>
the tests they do have are https://github.com/WebAssembly/spec/tree/master/test/core

[22:47:22.0000] <MikeSmith>
TabAtkins: did you hear back from plinss about the problem with the rel=serviceworker dfn?

[22:47:47.0000] <MikeSmith>
I see it’s still failing when I run bikeshed

[22:48:03.0000] <TabAtkins>
He's in Okinawa on vacation right now, but will check on it as soon as he can.

[22:53:01.0000] <MikeSmith>
ah OK

[22:53:15.0000] <MikeSmith>
(lucky him, diving I assume)

[22:54:27.0000] <MikeSmith>
thanks 🐠

[23:04:45.0000] <MikeSmith>
seems like https://caniuse.com/ is loading a lot faster

[23:05:05.0000] <MikeSmith>
maybe he got some help on tweaking the backend

[23:27:57.0000] <MikeSmith>
https://www.ssllabs.com/ssltest/analyze.html?d=caniuse.com = 🄲

[23:29:56.0000] <MikeSmith>
seems he needs to disable SSL3 and enable TLS1.2

[23:30:09.0000] <MikeSmith>
anyway, it’s progress

[02:16:55.0000] <MikeSmith>
annevk: so yeah I see:

[02:17:00.0000] <MikeSmith>
> There is a possible compatibility risk, as while all major browsers have

[02:17:00.0000] <MikeSmith>
implemented WebAssembly, and have agreed in principle and form to the

[02:17:00.0000] <MikeSmith>
proposed API, none of have yet implemented it.

[02:17:00.0000] <MikeSmith>
There is a strong likelihood they will, given the feature is desirable for

[02:17:00.0000] <MikeSmith>
optimum performance when doing streaming compilation of WebAssembly.

[02:17:02.0000] <MikeSmith>
However, there is some risk the feature may change slightly as it is

[02:17:05.0000] <MikeSmith>
standardized more rigorously.

[02:17:07.0000] <MikeSmith>
...

[02:17:32.0000] <MikeSmith>
so it does seem premature to ship, given that

[02:17:41.0000] <MikeSmith>
IMHO

[04:52:27.0000] <annevk>
JakeA: await (await fetch("data:,3")).json() seems to work

[04:53:20.0000] <annevk>
JakeA: having said that, it's a character longer than fetch("data:,3").then(r => r.json())

[04:53:45.0000] <annevk>
JakeA: that's kinda a failure of the await syntax

[04:59:07.0000] <rbyers>
annevk: I haven't been following wasm in great detail but what Mike said matches my big picture understanding.  There is a ton of collaboration and interop testing between the 4 engines. Can you point me at some specific concerns?

[05:00:18.0000] <rbyers>
MikeSmith: Which API are you taking about?  The WebAssembly JS API is implemented and shipped in Chrome and Firefox.

[05:02:11.0000] <annevk>
rbyers: that may be true, but only fairly recently did it get some architectural review and such, let alone detailed review (which isn't really possible given they are API sketches and not formal definitions)

[05:03:03.0000] <JakeA>
annevk: yeah, but await (await fetch("data:,3")).json() reads badly to me. For docs, I tend to split it into two lines. const response = await fetch(url); const data = await response.json()

[05:03:37.0000] <JakeA>
annevk: but in my own code I'd probably just do: await fetch(url).then(r => r.json())

[05:03:46.0000] <annevk>
JakeA: it's probably actually shorter btw, since you'd need a second .then to emulate the await await?

[05:04:11.0000] <annevk>
so no failure after all, just my failure

[05:05:27.0000] <JakeA>
I guess .then is still handy for one-liners, even if there's an await at the start

[05:05:56.0000] <annevk>
I dunno, nested await looks okayish to me

[05:22:11.0000] <JakeA>
Maybe I'm just not used to it

[05:25:43.0000] <rbyers>
annevk: Architectural review definitely could have gone better and earlier.  For my part I screwed up in the intent to ship by not asking about this (eg. I should have at least asked about a TAG review).

[06:29:50.0000] <wanderview>
annevk: you're working on enabling a service worker opening a nested dedicated worker?

[06:30:52.0000] <annevk>
wanderview: I'm mostly working on shared memory integration

[06:31:02.0000] <wanderview>
ok

[06:31:49.0000] <annevk>
wanderview: as a side effect I had to refine worker ownership, which should help with that, and also nested shared workers

[06:32:11.0000] <wanderview>
annevk: ok, I thought of a quirk with nested workers in service workers... I'll just stick it in a github issue

[06:32:22.0000] <annevk>
wanderview: my last comment in that issue summarizes what still needs to be done

[07:25:53.0000] <annevk>
wanderview: for https://github.com/whatwg/html/issues/411#issuecomment-293272882 I filed an issue for 1, 3 we should maybe do separately, so that would leave 2? Not sure there's anything else

[07:27:39.0000] <wanderview>
annevk: based on my comment about stashing a worker reference on the about:blank global... I bet its just nto going to work as expected for about:blank replacement today

[07:30:06.0000] <wanderview>
I think we could write a test, but I guess we should define how we want it to work in that case

[09:09:40.0000] <annevk>
Best to first figure out what happens

[09:21:08.0000] <TabAtkins>
JakeA: Nah, nested await looks bad to me too - non-obvious precisely what the bounds are of each. Gotta spend some time thinking about what's going on before I can tell that it's right.

[14:43:59.0000] <MikeSmith>
Domenic: https://www.shellcheck.net/ is very good

[14:44:27.0000] <TabAtkins>
Does it just report "Error: you're still using a shell language. Switch to Python or something you noob."?

[14:44:42.0000] <MikeSmith>
haha

[14:44:53.0000] <MikeSmith>
would be fun if it did

[14:45:01.0000] <MikeSmith>
though less useful

[14:46:29.0000] <MikeSmith>
anyway had never used it before but been running on it on a few things now and been surprised at how much it finds

[14:46:36.0000] <MikeSmith>
it’s very clever

[14:46:45.0000] <MikeSmith>
and thorough

[14:47:08.0000] <MikeSmith>
now I just want to have it integrated into my vim

[14:47:50.0000] <MikeSmith>
oh and I find https://github.com/koalaman/shellcheck#user-content-in-your-editor *supported as an integrated linter in major editors*

[14:47:52.0000] <Domenic>
MikeSmith: oh cool, glad you're finding it useful. My experience was that it mostly complained about unquoted variables, and a few instances of `` vs. $(); I didn't see any "very clever" and "surprised how much it finds" personally :)

[14:48:07.0000] <Domenic>
I guess the move from cat to < was pretty clever

[14:48:46.0000] <MikeSmith>
yeah it depends on how complicated what you feed to it is

[14:50:16.0000] <MikeSmith>
but when I tried that find . -exec for the HTML checker with it, it really made me think more about the quoting differences and how I was referencing the filename

[14:51:11.0000] <MikeSmith>
specifically in that case, this check:

[14:51:13.0000] <MikeSmith>
https://github.com/koalaman/shellcheck/wiki/SC2156

[14:51:25.0000] <MikeSmith>
doing find . -name '*.mp3' -exec sh -c 'i="{}"; sox "$i" "${i%.mp3}.wav"' \;

[14:51:29.0000] <MikeSmith>
vs

[14:51:34.0000] <MikeSmith>
find . -name '*.mp3' -exec sh -c 'i="$1"; sox "$i" "${i%.mp3}.wav"' _ {} \;

[14:53:25.0000] <MikeSmith>
the way the error messages link to those wiki pages with the details is pretty nice too

[15:23:44.0000] <TabAtkins>
tobie: Am I right that the regex for biblio keys is all alphanumerics, plus "-_+."?

[15:30:08.0000] <TabAtkins>
tobie: In that case, you can significantly simplify the regex to just `[\\w+.-]`.  \w does all alphanumerics and underscore, there's no need to escape the period, and no need to escape the dash if you put it at the end.

[16:41:16.0000] <jyasskin>
For a field in an options dictionary, does https://w3ctag.github.io/design-principles/#casing-rules imply I should propose "public_key" instead of "publickey", "publicKey", or "public-key"?

[16:42:40.0000] <TabAtkins>
Nah, I think that falls in the "attribute" bucket, wanting camelCase.

[16:42:52.0000] <jyasskin>
TabAtkins: Ok, thanks.

[16:42:53.0000] <TabAtkins>
(I'm unclear why the JSON bucket recommends underscores.)


2017-04-15
[18:49:57.0000] <Domenic>
Basically the manifest spec screwed us by setting that precedent so now we follow it

[18:53:22.0000] <Domenic>
Also, why is the stylesheet still not fixed for tables -__

[18:53:27.0000] <Domenic>
-__-, even

[21:43:19.0000] <annevk>
Can't we follow CSP report precedent instead? If that is different?

[23:00:49.0000] <Domenic>
https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP#Sample_violation_report

[23:00:56.0000] <Domenic>
... huh, so it's dash-delimited. That seems... worse.

[23:01:09.0000] <Domenic>
also still map CSP uses "uri"

[23:01:14.0000] <Domenic>
*mad

[01:47:55.0000] <annevk>
Yeah, I complained about that bit already, might be "fixed" by a newer version

[03:48:52.0000] <smaug>
annevk: this agent thing. What defines the concept which BroadcastChannel uses?

[03:50:26.0000] <annevk>
smaug: they are origin-bound, no? Kind of cross-cutting with agents

[03:50:50.0000] <smaug>
ok, perhaps I don't understand what an agent is

[03:51:47.0000] <smaug>
or not perhaps, I just don't :)

[03:52:01.0000] <annevk>
smaug: a dedicated worker is an agent, or a set of windows that are similar-origin and can access each other

[03:52:55.0000] <smaug>
ok, so that window part is like, hmm, DocGroup in Gecko

[03:53:08.0000] <smaug>
is there anything for non-similar-origin?

[03:53:44.0000] <annevk>
smaug: no, we should prolly have terms for that too at some point

[03:53:58.0000] <smaug>
(that would be TabGroup in Gecko)

[04:02:36.0000] <smaug>
and the agent for BroadcastChannel isn't needed because something. ShareArrayBuffer just isn't supported by its postMessage

[04:03:45.0000] <smaug>
Should one be able to pass SharedArrayBuffer cross origin?

[04:03:51.0000] <smaug>
using window.postMessage

[04:04:19.0000] <smaug>
I would expect so, if window.postMessage supports it in same-origin case

[05:18:47.0000] <annevk>
smaug: no, that will fail

[05:19:09.0000] <smaug>
same-origin case?

[05:49:06.0000] <annevk>
No cross fails

[06:40:31.0000] <Domenic>
you can pass cross-origin if the origins could become same-origin-domain via document.domain

[06:40:43.0000] <Domenic>
i.e. you can pass from a.example.com to b.example.com

[06:41:09.0000] <Domenic>
maybe we should add that to the list of examples

[07:01:53.0000] <annevk>
We should also add a note that same-origim can be different agents

[07:02:32.0000] <annevk>
Eg two independently opened same-origin browsing contexts

[07:33:01.0000] <knunger004>
hi, i'm totally out of choice now. This is about XMLHttpRequest(...) , https://paste.ubuntu.com/24387209/

[07:33:48.0000] <knunger004>
the issue i'm facing is regarding 307 url redirection by the proxy server at localhost:8080, when some resource isn't found.

[07:33:58.0000] <knunger004>
locally.

[07:34:38.0000] <knunger004>
i get the following error , "Uncaught NetworkError: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'http://localhost:7860/data.json'

[07:35:01.0000] <knunger004>
However, when the resource is found locally, it works perfectly fine.

[07:36:24.0000] <knunger004>
https://paste.ubuntu.com/24387231/ this is the code that prepare a custom redirect response header.

[07:51:42.0000] <annevk>
knunger004: that is not really sufficient information to know where it goes wrong

[07:52:03.0000] <annevk>
knunger004: also, stackoverflow is prolly a better place

[08:06:28.0000] <knunger004>
annevk, alright

[10:29:45.0000] <Domenic>
annevk: oooh, interesting, i didn't realize URSOBC excluded such cases

[10:30:14.0000] <Domenic>
That might be a reason it's based on browsing contexts instead of realms

[10:46:25.0000] <annevk>
But the whole browsing context angle makes no sense given navigation

[10:47:13.0000] <annevk>
Or I guess you can see it as some kind of snapshot, but still, we can do better eventually

[11:01:19.0000] <Domenic>
I mean, it makes sense if you think of it as a definition, instead of a set that gets statically added to and removed from

[11:01:34.0000] <Domenic>
getCurrentURSOBCs() instead of const ursobcs = []

[11:01:51.0000] <Domenic>
It's a bit confusing conceptually, but I think it all *works*

[11:04:45.0000] <annevk>
We add state to it though

[11:06:41.0000] <annevk>
We should move that state to the corresponding agent over time and then figure out when it gets created; that will make it all go away

[11:07:02.0000] <Domenic>
ah, yeah, we did

[11:07:36.0000] <Domenic>
now i'm wondering if the custom elements reaction stack should be event-loop bound instead of URSOBC-bound

[11:09:44.0000] <annevk>
It should be similar-origin window agent bound

[11:10:19.0000] <annevk>
And some stuff in DOM should be too, I should export these agents

[11:11:10.0000] <Domenic>
it seems more like a task queue-ish thing which makes me think event loop

[11:11:56.0000] <Domenic>
i guess in implementations it's not going to be shared across processes?

[11:12:06.0000] <Domenic>
But neither are event loops, in practice, I think

[11:12:22.0000] <annevk>
Event loops cannot be shared across processes

[11:12:39.0000] <Domenic>
I thought per spec you could have one event loop for all browsing contexts...

[11:13:05.0000] <Domenic>
yeah, there is at most one event loop per URSOBC, but not at least one (like I thought there was until recently)

[11:13:06.0000] <annevk>
Sure, in a single-process impl

[11:13:26.0000] <Domenic>
right ok so the mapping i have wrong is agent <-> process. it's agent <-> theoretically-possible process.

[11:13:56.0000] <annevk>
Domenic: we don't want to export subcluster right?

[11:14:03.0000] <Domenic>
Agreed

[11:14:30.0000] <annevk>
Domenic: agent's realm and agent's global object?

[11:14:56.0000] <Domenic>
annevk: I'd lean toward not exporting them for now, but maybe that's over-conservative.

[11:15:18.0000] <annevk>
seems fine to me, especially since they don't work across all agents

[11:15:23.0000] <Domenic>
Yeah that's what's worrying

[11:15:33.0000] <Domenic>
Maybe they should be renamed "worker agent's realm" etc. Or... "workerish" so worklets are included? I dunno.

[11:15:46.0000] <Domenic>
"single-global agent's global object" is not short enough IMO

[11:16:16.0000] <annevk>
I think it's fine and we should worry about when either someone needs to use them elsewhere or someone gets confused

[11:17:07.0000] <Domenic>
SGTM

[11:30:48.0000] <annevk>
Domenic: with respect to event loop, I'd like that to just become a queue or some such on each agent

[11:31:08.0000] <Domenic>
sure, 1:1 event loop <-> agent would work well for me

[11:31:54.0000] <annevk>
Domenic: and then we'd allow UAs to merge queues of window agents or some such (no need to require those to be concurrent and not observable either)

[11:32:47.0000] <annevk>
Domenic: which brings us back to the status quo, except the formal model is more sensible (and better grounded as event loops are currently located nowhere...)

[11:43:44.0000] <annevk>
Domenic: other question, some of your JS PRs to remove willful violations gained consensus it seems

[11:43:52.0000] <annevk>
Domenic: did you lose track or just waiting for something?

[11:45:46.0000] <Domenic>
annevk: just hasn't gotten to the top of the priority queue unfortunately

[11:45:51.0000] <Domenic>
oh, PRs?

[11:45:57.0000] <Domenic>
I think none of my actual PRs have consensus

[11:46:01.0000] <Domenic>
Unless I lost track

[11:46:33.0000] <annevk>
Domenic: https://github.com/tc39/ecma262/pull/688, but it needs modifications

[11:46:51.0000] <Domenic>
Ah right yeah

[11:47:07.0000] <Domenic>
Yeah doing that work is in a pile with a few others that got consensus

[11:47:28.0000] <Domenic>
bterlson was supposed to do HTMLAllCollection to show me how he envisions HTML integration working per the consensus

[11:47:35.0000] <Domenic>
But he never did, so I should probably do the work myself

[11:47:53.0000] <annevk>
Ah okay, I'd just wait a bit on bterlson then

[11:48:29.0000] <Domenic>
Nah it's been like 7 months, I gotta do it myself

[11:48:31.0000] <Domenic>
https://dl.dropboxusercontent.com/u/20140634/agents/multipage/webappapis.html#integration-with-the-javascript-agent-formalism is updated

[11:48:50.0000] <Domenic>
annevk: should we specify worklet [[CanBlock]] in this PR?

[11:49:11.0000] <annevk>
Domenic: I decided yes, based on flagxor's feedback and nobody objecting

[11:49:34.0000] <Domenic>
CanBlock yes, or yes we should? It seems like it's not in the current PR

[11:49:38.0000] <annevk>
Domenic: but easily changed if we get some feedback

[11:49:49.0000] <Domenic>
annevk: oh nevermind

[11:49:52.0000] <Domenic>
was looking in the wrong place

[11:49:56.0000] <annevk>
kk

[11:51:16.0000] <annevk>
Domenic: seems we already had the same-origin domain iframe example too in your list of examples at the bottom of the PR btw, forgot to reply to that earlier

[11:51:44.0000] <Domenic>
Hmm yeah I guess I did say "could be" and "cannot be"

[11:52:05.0000] <Domenic>
Did you want to add the "two independently opened windows" example?

[11:52:33.0000] <annevk>
Domenic: I think the note I added is good enough

[11:52:51.0000] <Domenic>
Oh I see

[11:53:37.0000] <annevk>
It seems better there, since it might directly conflict with what folks think when they see "similar-origin"

[11:53:46.0000] <annevk>
I couldn't think of a better term though

[11:54:13.0000] <annevk>
The whole confusion with lth came from Gecko calling this a "DocGroup"

[11:54:21.0000] <annevk>
I think

[11:56:43.0000] <annevk>
Domenic: is Vat > Agent Cluster still true? I guess a Vat is the browser?

[11:56:53.0000] <Domenic>
I think vat is supposed to be agent

[11:57:01.0000] <annevk>
Domenic: hmm no, I guess Vat is Agent Cluster or Agent, okay

[11:58:35.0000] <annevk>
I was trying to figure out if there could be something between User agent and Agent Cluster, but that doesn't really seem possible due to BroadcastChannel and storage events

[12:05:55.0000] <Domenic>
Hmm I don't follow the connection, but I do think there's probably not anything between them

[12:23:04.0000] <annevk>
I was imagining that something stronger than an Agent Cluster would not be able to use postMessage() between themselves

[12:25:08.0000] <annevk>
If we call that kind of thing a Super Agent, then the problem is that as soon as you have two Super Agents, and then one of them creates a Window that has the same origin as a Window of the other, you're in trouble, as those need to be able to message each other

[12:25:27.0000] <annevk>
Through BroadcastChannel and storage events

[12:26:57.0000] <annevk>
Oh, and shared workers of course.

[12:27:08.0000] <annevk>
And service workers.

[12:27:22.0000] <annevk>
So many holes.

[12:43:19.0000] <Domenic>
I think if we wanted to restrict sharing SABs to same-origin-domain, not just similar-origin, we would do that in the definition of agent clusters. I prefer being more permissive though.

[13:10:29.0000] <Domenic>
I guess an argument for more restrictive is that it helps us avoid propagating document.domain in the hope that maybe one day we could remove it or limit it to some mode


2017-04-16
[17:52:02.0000] <MikeSmith>
gotta like the term *special agent cluster*

[18:35:00.0000] <tantek>
MikeSmith: sounds like a bad spy parody with Mr. Bean

[20:36:45.0000] <MikeSmith>
tantek: :)

[20:37:01.0000] <MikeSmith>
mkwst: not tests anywhere yet for Credential Management API?

[20:37:09.0000] <MikeSmith>
*no tests

[21:26:33.0000] <annevk>
Domenic: that or there is some kind of security issue

[21:27:21.0000] <annevk>
Domenic: cannot think of anything though, but shared memory is complex

[21:38:16.0000] <annevk>
Domenic: the rationale for not changing the definition of agent/agent clusters btw is that if you change those they're no longer useful as process boundaries, since setting document.domain would end up moving you into a different process

[21:38:45.0000] <Domenic>
yeah, but i think their role as shared memory boundaries is more useful than their role as process boundaries, as the latter is just an implementation detail

[21:39:57.0000] <Domenic>
"An agent cluster is a maximal set of agents that can communicate by operating on shared memory."

[21:40:40.0000] <annevk>
It's not an implementation detail though, it actually matters for document.domain

[21:40:53.0000] <annevk>
But we'll just need a different term for that then...

[21:40:54.0000] <Domenic>
I don't see how agent clusters matter for document.domain.

[21:41:09.0000] <annevk>
Agents, not agent clusters

[21:41:33.0000] <Domenic>
However the definition I found maybe argues for including similar-origin since such agents can operate on shared memory by just sharing reference to an ArrayBuffer.

[21:42:02.0000] <annevk>
Only if document.domain is set though

[21:42:27.0000] <Domenic>
Sure, they can operate on shared memory by e.g. posting a message to each other telling each other to set document.domain

[21:52:35.0000] <annevk>
Domenic: I'm going to squash the commits if that's okay with you

[21:52:43.0000] <Domenic>
sure

[22:09:08.0000] <annevk>
Domenic: in https://github.com/whatwg/html/pull/2521#issuecomment-294333732 you mean "the two globals"

[22:09:47.0000] <Domenic>
annevk: thanks, updated

[03:48:08.0000] <annevk>
Domenic: I wish we had discussed how to define StructuredSerializeForStorage since you're prolly asleep now


2017-04-17
[05:23:40.0000] <MikeSmith>
PSA: the HTML checker now has more options for letting you filter out (drop/ignore/suppress) error messages and warning messages you don’t care about/don’t want to see/don’t consider to be a problem

[05:23:51.0000] <MikeSmith>
https://github.com/validator/validator/wiki/Message-filtering

[05:25:54.0000] <MikeSmith>
the mechanism is just to specify a set of regular expressions, and any error message or warning message that matches any of the specified regexes gets filtered out (dropped/ignored/suppressed)

[09:05:03.0000] <annevk>
Domenic: if you could update https://github.com/whatwg/html/pull/2518 with thoughts today that'd be great

[09:05:33.0000] <annevk>
Oh, you're in the process of going through stuff, guess it'll happen then

[09:12:53.0000] <Domenic>
prioritization pings are always nice :)

[09:16:19.0000] <annevk>
I will have a full eight hours plus again starting tomorrow, so I better have something to do

[09:16:43.0000] <annevk>
Though those WindowProxy issues might keep me busy for a bit

[09:18:44.0000] <Domenic>
I also feel like we kinda dropped https://github.com/whatwg/html/issues/2415 which has multiple confused implementers; I've been meaning to get back to that

[09:22:21.0000] <annevk>
Domenic: and the whole rewrite history and fix lifetime issues?

[09:22:59.0000] <annevk>
That's my main frustration with service workers, we're exposing all these things but we barely know how they work

[09:23:01.0000] <Domenic>
sure, yeah, although those are bigger and mostly hurting servo right now in terms of immediately-actionable implementation work

[09:23:24.0000] <annevk>
I think it's also hurting decisions we make in service workers around navigation and such

[09:23:28.0000] <Domenic>
whereas 2415 is Edge going "we have an interop problem with Chrome because of this spec area" and then Gecko being like "hmm yes, this does not make any sense"

[09:23:33.0000] <annevk>
Not history as much, but lifetime for sure

[09:23:33.0000] <Domenic>
Fair

[09:24:08.0000] <annevk>
So looking at that issue it's mostly a mkwst issue I think

[09:25:44.0000] <annevk>
It also reminds me of https://github.com/whatwg/html/issues/125, which is still blocked on smaug_

[09:25:45.0000] <Domenic>
Maybe, although it seemed to me CSP is just one of many of these fail-to-load cases, and so likely mkwst will be happy with whatever we decide for the larger question

[09:26:00.0000] <annevk>
Ah well, the larger one is the issue I just linked

[09:26:10.0000] <annevk>
I have a plan, I just need answers

[09:26:14.0000] <Domenic>
https://bugs.chromium.org/p/chromium/issues/detail?id=698559 is the original

[09:26:36.0000] <Domenic>
I see

[09:26:59.0000] <annevk>
My plan is that an error page results in an error event and is basically a document with a new opaque origin

[10:17:27.0000] <smaug_>
one day github has some reasonable way to see needinfo queue

[10:41:57.0000] <annevk>
Yeah that is annoying

[13:04:43.0000] <Domenic>
tobie: can we help with https://github.com/heycam/webidl/pull/323 in some way?

[13:05:42.0000] <tobie>
Think it was waiting for your feedback on my last comment.

[13:05:48.0000] <tobie>
Domenic: ^

[13:06:01.0000] <Domenic>
Oh, dang, I was afraid it was something like that

[13:06:22.0000] <tobie>
Domenic: np, it took me long to get back to you on it, so no worries.

[13:06:48.0000] <tobie>
Domenic: should have chased but the sensor work kept me super busy. :-/

[13:09:23.0000] <tobie>
TabAtkins: any idea why the STOD section of WebIDL changed recently? Is that tied to some broader changes somwhere I missed?

[13:09:23.0000] <tobie>
 https://s3.amazonaws.com/pr-preview/heycam/webidl/faaaaa9...tobie:61599aa.html#status

[13:15:08.0000] <Domenic>
tobie: there was a Bikeshed change to stop using mailing lists for WPWG

[13:15:27.0000] <Domenic>
The "put the text webidl in the subject" is pretty inappropriate though

[13:15:30.0000] <Domenic>
I'll file a Bikeshed issue...

[13:15:42.0000] <tobie>
Domenic: ty


2017-04-18
[17:16:29.0000] <Domenic>
Well, I manage to crash chrome when pushState()/replaceState()ing shared array buffers :D

[21:01:40.0000] <annevk>
👍

[21:05:26.0000] <Domenic>
Servo is implementing MathML? O_O

[21:36:58.0000] <annevk>
I suspect it's not Mozilla driving that

[21:37:30.0000] <annevk>
s/suspect/speculate/

[21:37:36.0000] <Domenic>
Manishearth is doing the work

[21:37:57.0000] <Domenic>
Hmm, it's for Stylo, I guess the idea is to not regress if switching Gecko to use Servo components.

[21:38:47.0000] <annevk>
Ooh, that makes sense

[21:39:40.0000] <annevk>
I still like that MathML became a thing of sorts; kinda sad it's still lingering

[21:46:50.0000] <MikeSmith>
r? https://github.com/whatwg/wattsi/pull/43

[21:49:52.0000] <Manishearth>
Domenic: I'm implementing mathml in stylo, yeah :)

[21:50:40.0000] <Manishearth>
we don't want to unship things alongside stylo

[22:19:19.0000] <TabAtkins>
Ugh, I finally found a justification for "record<> as return value".

[22:20:48.0000] <Domenic>
Hmm, I'm curious what its advantage would be over object. I guess if you already have a record<>.

[22:23:39.0000] <TabAtkins>
I mean, same as `object`, whatever. `record<>` is just an `object` that advertises its types better.

[22:23:56.0000] <TabAtkins>
But I mean vs returning an interface object, which I previously always recommended.

[22:24:48.0000] <TabAtkins>
Context here is that some of the TypedOM stuff we decided today will let you reduce a calc() expression into a simple sum of values; we'll return this as an object with units for keys and doubles for values.

[22:31:06.0000] <MikeSmith>
TabAtkins: gentle reminder to please nudge plinss about the <{link/rel/serviceworker}> thing (if he’s there yet)

[22:32:41.0000] <TabAtkins>
Yeah, he's in. We're all in the Houdini meeting right now.

[22:34:19.0000] <MikeSmith>
k

[22:36:34.0000] <annevk>
Domenic: given our discussion yesterday, should we really use Data Block in serialize?

[22:36:59.0000] <annevk>
Domenic: it seems we should serialize that too, otherwise storage becomes kinda weird, keeping the ECMAScript environment alive to support that structure

[23:08:27.0000] <MikeSmith>
Domenic: r? https://github.com/whatwg/wattsi/pull/44

[07:20:29.0000] <Domenic>
annevk: I don't see the problem with Data Block. It's bytes in memory; it isn't associated with the ECMAScript environment as far as I can tell.

[07:22:02.0000] <annevk>
Domenic: yeah, I guess it's just Shared Data Block

[07:22:17.0000] <Domenic>
Is a SDB associated with an ECMAScript environment?

[07:22:35.0000] <annevk>
Domenic: with an agent

[07:22:53.0000] <annevk>
Domenic: or agent cluster rather

[07:23:03.0000] <Domenic>
Right OK

[07:23:08.0000] <Domenic>
I don't think it keeps the agent cluster alive though

[07:23:14.0000] <annevk>
(although I think this is currently not explicit awb-style)

[07:23:26.0000] <Domenic>
I think of it as more having access checks that if the wrong process tries to access its bytes, the browser crashes

[07:23:32.0000] <Domenic>
Not a pointer to an agent cluster

[07:23:39.0000] <Domenic>
Maybe a GUID identifying the agent cluster

[07:28:06.0000] <annevk>
Domenic: will probably fix foolip's comments in https://github.com/whatwg/html/pull/2521 tomorrow; did the US have a holiday yesterday too or is it likely that getting further comments on that PR is going to be hard without more pushing?

[07:28:31.0000] <annevk>
Domenic: or maybe I should reset my expectations and wait a week?

[07:30:28.0000] <Domenic>
annevk: no public holiday; it does seem people are slow. My take is we can wait until we've lined up all the other PRs, including tests, one for service worker, and if we're ambitious the StructuredSerializeForStorage switch-over PRs. If nobody's commented by then we should go ahead.

[07:31:16.0000] <annevk>
Domenic: I guess we could also wait and see if your doom scenario of dropping agent clusters happens

[07:31:48.0000] <Domenic>
I think they're still useful as a memory boundary even if they don't have all the properties lth wants

[07:34:47.0000] <annevk>
Domenic: okay, so I'll fix up the comments and then once all PRs are reviewed again I'll rebase and clean up commit messages (there's some rebasing trouble due to other smaller changes I think)

[07:35:05.0000] <Domenic>
Sounds good. I'll keep working on tests and maybe work on a service worker PR.

[07:35:11.0000] <annevk>
Domenic: I'm happy to do the PR for Notifications and I was also think of switching DOM to using an agent rather than a unit of browsing contexts

[07:35:20.0000] <Domenic>
ah interesting

[07:36:12.0000] <annevk>
The other thing I plan on working on is Location/Navigator, probably with proper slots

[07:36:27.0000] <annevk>
But I need to write some tests first to make sure they're actually associated with the global and not the document

[09:52:40.0000] <annevk>
Domenic: did Apple participate in the WebAssembly call?

[09:52:45.0000] <Domenic>
annevk: yep

[09:52:55.0000] <annevk>
Domenic: did you bring up the concurrency issue?

[09:53:12.0000] <annevk>
Domenic: well, independent worker shutdown

[09:53:37.0000] <Domenic>
annevk: I did; apparently there's internal debate and it's on their radar, which I didn't know before the call

[09:53:50.0000] <annevk>
Domenic: great!

[09:54:04.0000] <annevk>
Domenic: as a small aside, there will always be fixup comments

[09:54:33.0000] <annevk>
Domenic: and in fact, I've already planned a complete rewrite of how we do agents once we figure out where exactly we want to create agent clusters and agents

[09:55:09.0000] <Domenic>
haha, fair

[12:31:59.0000] <annevk>
Domenic: so I run git blame and wait for a long time (old MacBook Air) to find out about these worker algorithms and I get https://github.com/whatwg/html/commit/cece923873b2947a00d542082f0b50af2c85b0bb

[12:32:19.0000] <annevk>
Domenic: so now I'm waiting again

[12:34:13.0000] <Domenic>
I usually search commit messages but it might not work in this case

[12:36:23.0000] <annevk>
Domenic: from https://github.com/whatwg/html/commit/a2cf6570bab4e42fcac0d576d786b7ce389d117a it seems that specific line predates integration into HTML

[12:36:59.0000] <annevk>
I usually use git log --grep=, but that doesn't work for specific steps really

[12:37:18.0000] <annevk>
Though blame is pretty useless too it turns out due to refactoring

[12:40:26.0000] <Domenic>
I think the internet has some recursive blame helper scripts

[12:40:38.0000] <annevk>
Domenic: I found https://lists.w3.org/Archives/Public/public-html-diffs/2008Dec/0048.html

[12:41:01.0000] <annevk>
Domenic: by running svn log https://svn.whatwg.org/webworkers/

[12:41:06.0000] <annevk>
Domenic: and then a Google search

[12:41:32.0000] <annevk>
Domenic: it very much looks like the divergence is not necessarily intentional

[12:41:37.0000] <Domenic>
"who were you ap? what did you see!?!?" https://xkcd.com/979/

[12:41:53.0000] <Domenic>
(Wow IRCCloud has built-in xkcd inlineing O_o)

[12:42:22.0000] <annevk>
Oh, not corporate IRCCloud

[12:42:41.0000] <annevk>
I know who ap is

[12:43:10.0000] <Domenic>
Well, not intentional sounds believable. Let's merge.

[12:43:15.0000] <annevk>
Nick of an Apple WebKit engineer

[12:43:41.0000] <annevk>
Gave lots of XMLHttpRequest feedback in the early days


2017-04-19
[17:03:01.0000] <TabAtkins>
MikeSmith: plinss says the issue is fixed

[17:03:16.0000] <MikeSmith>
TabAtkins: oh cool

[17:03:23.0000] <MikeSmith>
/me takes a look

[17:06:45.0000] <MikeSmith>
TabAtkins: curl https://api.csswg.org/bikeshed/ -F url=https://raw.githubusercontent.com/w3c/ServiceWorker/246340fce702bab2cce35b046f090606389b279a/docs/index.bs -F output=err

[17:07:21.0000] <MikeSmith>
still gives the error:

[17:07:22.0000] <MikeSmith>
LINK ERROR: No 'attr-value' refs found for 'serviceworker' with for='link/rel'.

[17:07:22.0000] <MikeSmith>
<a data-link-type="attr-value" data-lt="serviceworker" data-link-for="link/rel">serviceworker</a>

[17:07:43.0000] <MikeSmith>
I guess there’s some latency in updating?

[17:08:39.0000] <TabAtkins>
Should have been fixed yesterday. :/

[17:10:42.0000] <TabAtkins>
debugging now

[17:11:42.0000] <MikeSmith>
k

[17:23:28.0000] <MikeSmith>
TabAtkins: btw another question: When I ref that was not failing before is failing now, is there same way I can debug that to know what it *used* to resolve to?

[17:23:29.0000] <Krinkle>
annevk: Seems lists.whatwg.org isn't working, forced HTTPS in my browser, but only responds to HTTP. This means confirmation links for moderation, subscribe and unsubscribe don't work.

[17:23:44.0000] <Krinkle>
Tricked clicking the link by curl'ing the url instead.

[17:23:57.0000] <TabAtkins>
MikeSmith: Not really; you need a historical version of the linking database, basically.

[17:24:21.0000] <MikeSmith>
OK yeah I figured but wanted to confirm

[17:24:27.0000] <Krinkle>
(I don't know how maintains this, feel free anyone else to reply :) )

[17:24:33.0000] <MikeSmith>
TabAtkins: the specific failure is this:

[17:24:35.0000] <MikeSmith>
LINK ERROR: No 'dfn' refs found for 'the worker's documents'.

[17:24:36.0000] <MikeSmith>
<a data-link-type="dfn" data-lt="the worker’s Documents">the worker’s Documents</a>

[17:25:16.0000] <MikeSmith>
TabAtkins: pretty sure that used to resolve to something in HTML, but in looking through the HTML changelog I find nothing that has changed it

[17:25:21.0000] <MikeSmith>
anyway, will look some more

[17:25:37.0000] <MikeSmith>
Krinkle: known issue

[17:26:18.0000] <MikeSmith>
Krinkle: cannot remember the details of the cause, but lists.whatwg.org has not worked since we moved to HTTPS, ever

[17:26:40.0000] <MikeSmith>
so links to all the old indexed e-mail messages from those archives are broken

[17:27:06.0000] <MikeSmith>
but we have a mirror at https://lists.w3.org/Archives/Public/public-whatwg-archive/

[17:27:53.0000] <MikeSmith>
ah you’re asking about just the Web-based subscribe  UI

[17:28:30.0000] <MikeSmith>
I have not tried to used that. I wonder if others have been able to, but I would think not, given the underlying issue

[17:43:30.0000] <Krinkle>
MikeSmith: Yeah, the problem is people can't unsubscribe anymore.

[17:43:47.0000] <TabAtkins>
hehehe

[17:46:33.0000] <MikeSmith>
Krinkle: There’s no fix that I’m aware of. Well other than moving the hosting. I think it’s been year or maybe even two since Dreamhost told Ian they would be fixing it soon or something like that

[17:47:06.0000] <MikeSmith>
or however long it’s been it was moved to HTTPS

[17:50:55.0000] <TabAtkins>
MikeSmith: I mean, you can at least remove them manually from the DB?

[17:52:07.0000] <MikeSmith>
subcribers?

[17:52:23.0000] <MikeSmith>
maybe Ian can

[17:52:40.0000] <MikeSmith>
or maybe annevk has admin access to it now, I dunno

[18:52:48.0000] <MikeSmith>
Krinkle: so yeah I’m told the only way to unsubscribe from the list is by e-mail to the unsubscribe-whatwg⊙wo (or whatever) address, which I think is shown in the footer of every messsage

[18:54:03.0000] <Krinkle>
MikeSmith: "whatwg-unsubscribe⊙wo" actually, and not in the footer anymore for some time (config setting in Mailman).

[18:54:14.0000] <Krinkle>
MikeSmith: And then you get a confirmation mail with a link that doesn't work :)

[18:54:25.0000] <Krinkle>
unless you know how to bypass HSTS

[18:54:34.0000] <Krinkle>
(e.g. via curl)

[18:54:35.0000] <MikeSmith>
oh :(

[18:54:50.0000] <Krinkle>
https://whatwg.org/mailing-list#specs

[18:55:23.0000] <Krinkle>
the link is HTTP but Chrome enforces it to HTTPS because whatwg.org has HTSTS with *. subdomains enforced

[18:55:56.0000] <MikeSmith>
Krinkle: what happens if you just reply to the confirmation e-mail?

[18:56:17.0000] <MikeSmith>
that is what those instructions say to do

[18:56:34.0000] <MikeSmith>
oh

[18:56:37.0000] <MikeSmith>
> Please disregard the suggestion that you follow links to a Web site; due to a limitation of our hosting provider, that site is currently unavailable.)

[18:57:06.0000] <MikeSmith>
so the instructions explicitly say to not follow links to the Web site

[18:57:30.0000] <Krinkle>
MikeSmith: https://gist.github.com/Krinkle/ce71cff47fcf2a7fb6b923518c185347

[18:57:52.0000] <Krinkle>
I don't see that instruction.

[18:58:18.0000] <Krinkle>
Ah, on the website for subscribing

[18:58:21.0000] <Krinkle>
yeah good point

[18:58:22.0000] <MikeSmith>
yeah

[18:58:23.0000] <Krinkle>
I didn't see that

[18:58:35.0000] <MikeSmith>
yeah we should put it in bold I guess

[18:58:46.0000] <Krinkle>
Mailmail also has a config option to change the tetx phrasing in these e-mail so we could omit the link in general and say something else there

[18:58:46.0000] <MikeSmith>
I did not notice it either at first

[18:59:02.0000] <Krinkle>
Configurable for each individual email list even

[18:59:28.0000] <MikeSmith>
maybe e-mail Ian about that

[19:00:01.0000] <MikeSmith>
if you can tell him exactly where it can be changed I reckon he would be happy to change it

[19:00:15.0000] <MikeSmith>
and provide some suggested text

[19:05:16.0000] <Krinkle>
k, I'll try to do that later today or tomorrow. Thanks

[19:06:38.0000] <MikeSmith>
cheers

[23:00:01.0000] <zcorpan>
foolip: how does https://html.spec.whatwg.org/#dom-texttrack-inbandmetadatatrackdispatchtype relate to the new <audio> metadata proposal?

[23:13:52.0000] <MikeSmith>
TabAtkins: I see the xref thing got fixed

[23:13:59.0000] <MikeSmith>
https://rawgit.com/w3c/ServiceWorker/fcf2835093c4e4caf213d56e1d28f3c5c06c7aaa/docs/index.html#link-type-serviceworker

[23:14:07.0000] <TabAtkins>
Yeah.

[23:14:17.0000] <TabAtkins>
plinss's fix wasn't spread to all of his parsers. ^_^

[23:14:18.0000] <MikeSmith>
the link at contains the keyword "_serviceworker_"

[23:14:24.0000] <MikeSmith>
ah cool

[23:14:29.0000] <MikeSmith>
thanks much

[23:14:39.0000] <MikeSmith>
and thanks to plinss too

[23:14:56.0000] <MikeSmith>
TabAtkins: btw I wonder if I can attend the CSS WG f2f tomorrow?

[23:15:08.0000] <MikeSmith>
is the room big enough?

[23:15:11.0000] <TabAtkins>
Ask Rossen/astearns.  (They'll say yes.)

[23:15:15.0000] <MikeSmith>
k

[23:15:16.0000] <TabAtkins>
Yes, it is (as an observer)

[23:15:26.0000] <MikeSmith>
which building y’all in?

[23:15:44.0000] <MikeSmith>
East? North?

[23:16:09.0000] <MikeSmith>
Old building? Or newer one?

[23:16:27.0000] <MikeSmith>
astearns: OK if I attend tomorrow?

[23:16:38.0000] <astearns>
yes

[23:16:56.0000] <MikeSmith>
yay

[23:16:56.0000] <astearns>
/me damn, proved tab right

[23:16:57.0000] <MikeSmith>
thanks

[23:16:58.0000] <TabAtkins>
Today is East (6 on the website map), but I know we'll be in a different building at some point; dunno if it's tomorrow or Friday.

[23:17:01.0000] <MikeSmith>
haha

[23:17:25.0000] <MikeSmith>
TabAtkins: ok, thanks

[23:32:49.0000] <astearns>
MikeSmith: tomorrow we're in "Faculty Research Building A and B room"

[23:34:00.0000] <MikeSmith>
astearns: ah OK thanks yeah that building’s close by

[23:34:27.0000] <MikeSmith>
though I can’t remember that we ever had a meeting in that building before

[01:11:32.0000] <smaug>
how stable https://html.spec.whatwg.org/multipage/forms.html#attr-fe-autocomplete-section might be?

[01:13:18.0000] <annevk>
smaug: Chrome implemented it at some point I think

[01:13:32.0000] <annevk>
smaug: we haven't touched it since Ian maintained it

[01:13:41.0000] <smaug>
ok

[01:14:03.0000] <smaug>
section-* feels a bit odd, but ok fine, if it has been implemented

[01:14:58.0000] <annevk>
smaug: oh, I thought you meant autocomplete in general, I don't know for sure about section-, though I suspect it's the same

[01:15:24.0000] <annevk>
/me misread the URL

[01:21:31.0000] <annevk>
SimonSapin: be sure to not use CSSString for things that need to be USVString, such as URLs

[01:22:12.0000] <SimonSapin>
annevk: I think the only URLs in CSSOM are inside url("…") inside CSS syntax

[01:22:28.0000] <annevk>
SimonSapin: there's no API for those?

[01:22:59.0000] <annevk>
SimonSapin: and I'd imagine there's CSSImportRule and some things around CSSStyleSheet that would be affected

[01:23:48.0000] <SimonSapin>
oh right, forgot about that one. CSSImportRule currently has: readonly attribute DOMString href;

[01:24:23.0000] <SimonSapin>
Stylesheet also has href

[01:24:24.0000] <TabAtkins>
We can change that I think.

[01:24:32.0000] <annevk>
It's sorta fine since it's readonly, but better to be specific

[01:24:37.0000] <SimonSapin>
USVString for href?

[01:24:55.0000] <annevk>
(That is to say, you can use any for readonly attribute and it would still be the same.)

[01:25:13.0000] <annevk>
SimonSapin: yes

[01:26:01.0000] <SimonSapin>
stylesheet.insertRule("@import url('\uD800');", 0) can sneak surrogates in there

[01:26:18.0000] <SimonSapin>
same as document.write("<a href='\uD800'>") though

[01:48:46.0000] <zcorpan>
SimonSapin: annevk: are DOMString and USVString https://heycam.github.io/webidl/#dfn-distinguishable ? (or can they be?)

[01:49:11.0000] <annevk>
zcorpan: ah, interesting point, I guess you can't typedef them after all

[01:49:47.0000] <zcorpan>
I guess webidl should have a string-like category there

[01:50:53.0000] <zcorpan>
can typedef to DOMString and say in prose that USVString instead is also conforming

[01:51:07.0000] <TabAtkins>
SimonSapin: *Can* you smuggle that in? Per Syntax, you have to do a "decode"; that'll get rid of the surrogate, no?

[01:52:06.0000] <SimonSapin>
TabAtkins: only in https://drafts.csswg.org/css-syntax/#input-byte-stream when starting with bytes, so not in CSSOM

[01:52:28.0000] <zcorpan>
TabAtkins: syntax parse entry points can be called with a string (for cssom)

[01:53:00.0000] <annevk>
The URL parser expects scalar values so you better remove lone surrogates before you invoke that

[01:53:02.0000] <SimonSapin>
https://drafts.csswg.org/css-syntax/#tokenization says its input is code points

[01:54:41.0000] <TabAtkins>
Yeah, per spec you totes can't call any of the parsing algos with a bytestream.

[01:55:09.0000] <SimonSapin>
annevk: looks like https://drafts.csswg.org/css-values/#urls doesn’t have an imperative algorithm that explicitly invokes the URL parser

[01:55:23.0000] <TabAtkins>
(Yeah, it doesn't yet; I have a 2-year-old issue on me to do that.)

[02:02:31.0000] <SimonSapin>
annevk: so I can’t typedef CSSOMString?

[02:03:43.0000] <annevk>
SimonSapin: nope, I was wrong

[02:04:05.0000] <annevk>
SimonSapin: you can typedef it to DOMString and add some text that implementations can also use USVString

[02:04:28.0000] <TabAtkins>
(Or vice versa - plan for the future.)

[02:04:32.0000] <annevk>
SimonSapin: but you cannot do (DOMString or USVString)

[02:05:17.0000] <annevk>
TabAtkins: yeah, I'm all on board with this UTF-8 Rust train, but it seems like it would be a hit everywhere else unless specifically optimized

[02:06:02.0000] <annevk>
I'm still a little worried about that with the encoder/decoder/URL standards, whether I made the right choice to enforce input to be scalar values, but sufficiently smart implementations can optimize, as hsivonen demonstrated

[03:30:37.0000] <annevk>
MikeSmith: when I use file upload on https://checker.html5.org/ without a file extension it seems to default to XML, though a) it doesn't tell me it's doing this and b) there's no way to override it

[03:35:15.0000] <annevk>
WHATWG's working mode, finally in HTML: https://github.com/whatwg/whatwg.org/pull/25

[04:51:37.0000] <MikeSmith>
annevk: try the checker again now

[04:52:16.0000] <annevk>
foolip: I addressed your agent feedback, I hope

[04:53:01.0000] <annevk>
MikeSmith: cool

[04:53:20.0000] <annevk>
MikeSmith: the other thing I needed but that's rather esoteric I guess is overriding the charset

[04:53:46.0000] <MikeSmith>
annevk: for that there’s a query param

[04:53:52.0000] <MikeSmith>
gimme a second to find the name

[04:54:08.0000] <annevk>
MikeSmith: nah it's fine, I don't need it anymore I think

[04:54:24.0000] <MikeSmith>
OK

[05:59:12.0000] <nox>
annevk: In case you wonder,

[05:59:14.0000] <JakeA>
Domenic: Is the intent for <script type="module"> to omit credentials for same-origin scripts?

[05:59:26.0000] <nox>
that ticket on the URL standard about # in userinfo and whatnot stemmed from https://github.com/servo/rust-url/pull/293#issuecomment-295035947.

[06:01:02.0000] <annevk>
nox: yeah I saw

[06:01:43.0000] <annevk>
nox: I wonder what SimonSapin thought the ambiguity was

[06:01:58.0000] <annevk>
nox: I hope he didn't just try to make it somebody else their problem

[06:02:21.0000] <nox>
/me says nothing.

[06:12:12.0000] <JakeA>
Domenic: seems a bit weird to have to set crossorigin to cause modules to send cookies to my own origin

[06:42:31.0000] <JakeA>
Domenic: Looks like this change happened in https://github.com/whatwg/html/pull/607, but the comment suggests it was a non-normative change

[06:43:00.0000] <JakeA>
fwiw Safari appears to implement this as spec'd

[06:44:57.0000] <annevk>
JakeA: I'm pretty sure it's not changed there and was always like this

[06:45:35.0000] <annevk>
JakeA: Domenic and I did discuss that maybe it should change and I believe dherman still wants crossorigin=use-credentials to not be supported at all, though not sure how strongly he feels about that

[06:45:55.0000] <annevk>
JakeA: that's also how fetch() works by default

[06:47:55.0000] <JakeA>
annevk: You're right, the CORS setting was converted into a credentials mode before that PR

[06:49:35.0000] <JakeA>
annevk: I'm ok with the fetch default (although it catches people out a lot), but it feels weird that crossorigin implies sending cookies to the same origin

[06:50:15.0000] <annevk>
Maybe we should do away with "omit" and just use "same-origin" for credentials all the time

[06:50:28.0000] <annevk>
Unless folks optin to "include" obv

[06:50:39.0000] <JakeA>
<script type="module" src="blah.js"> - no credentials

[06:50:49.0000] <JakeA>
<script type="module" src="blah.js" crossorigin> - with credentials

[06:51:38.0000] <annevk>
JakeA: hmm yeah

[06:51:44.0000] <JakeA>
But I don't want to rock the boat too much. I'd rather have modules than not :D

[06:52:01.0000] <annevk>
JakeA: file an issue? This seems like a fix that can be made post-shipping too

[06:52:13.0000] <JakeA>
Shall do

[06:52:49.0000] <annevk>
JakeA: removing credentials is hard, but adding is okay (opposite of exceptions)

[07:07:18.0000] <JakeA>
annevk: Domenic: https://github.com/whatwg/html/issues/2557

[07:19:42.0000] <wanderview>
JakeA: that module behavior is unlike other tags that have a crossorigin attribute, right?  they all use same-origin credentials mode by default, right?

[07:19:56.0000] <wanderview>
mostly because they existed before fetch spec I guess

[07:20:02.0000] <wanderview>
^mostly^maybe

[07:22:53.0000] <JakeA>
wanderview: most APIs are no-cors with credentials, and crossorigin makes it CORS same-origin credentials, and crossorigin=use-credentials makes it CORS with credentials

[07:23:03.0000] <wanderview>
ah, ok

[07:23:10.0000] <wanderview>
JakeA: thanks, sorry for my confusions

[07:23:13.0000] <wanderview>
confusion

[07:23:24.0000] <JakeA>
it is pretty confusing :D

[07:23:31.0000] <wanderview>
I guess modules are just "different"

[07:31:47.0000] <annevk>
I think it's mostly my fault

[07:32:41.0000] <annevk>
Arguably "omit" is a better default and we had this idea that by default fetch() would be minimal, but we have changed quite a bit of that since then, but not revisited that

[07:33:19.0000] <annevk>
We should probably still expose "omit" for the extra-paranoid, but it shouldn't be the default I think

[07:33:19.0000] <wanderview>
I wonder if it would help or hurt if you could just encode the RequestInit values into attributes on tags

[07:33:32.0000] <wanderview>
then people could just be explicit

[07:34:05.0000] <annevk>
wanderview: there's been proposals for that, main question was how that would work in detail and what all the interactions with existing attributes would be

[07:34:20.0000] <wanderview>
<script type="module" requestinit="{ mode=same-origin credentials=same-origin }">

[07:34:29.0000] <wanderview>
or something

[07:34:57.0000] <wanderview>
I dunno... could also be an admission of "we can't make good defaults, punt it to the web devs to figure out"

[07:35:06.0000] <wanderview>
or interpreted as that

[07:36:02.0000] <annevk>
Hah, they've already got plenty of data for that

[07:54:23.0000] <Domenic>
JakeA: type crossorigin=anonymous, not crossorigin="", and maybe it's clearer

[09:13:04.0000] <annevk>
Domenic: is the latter really non-conforming? Seems like a bug

[09:16:19.0000] <Domenic>
Hmm yeah I might be confused, "The empty string is also a valid keyword"

[10:44:19.0000] <annevk>
Domenic: set theory grmlb

[11:29:39.0000] <annevk>
JakeA: do you know about H/2 header compression?

[11:29:55.0000] <annevk>
JakeA: if the cookie is the same for each request, does it become smaller?

[11:34:39.0000] <JakeA>
annevk: hmm, I don't know. I didn't realise the compression was across requests, but it makes sense

[11:34:57.0000] <annevk>
JakeA: I'm not a 100% sure on this

[11:35:15.0000] <annevk>
JakeA: I haven't studied H/2 as much as I probably should

[11:36:30.0000] <gsnedders>
annevk: it should only be transmitted once, iirc

[12:19:24.0000] <annevk>
Domenic: thoughts on https://github.com/whatwg/html/pull/2521#discussion_r112269700?

[12:36:40.0000] <aklein>
Domenic: speaking of CORS and modules...I'm looking at https://github.com/w3c/web-platform-tests/blob/master/html/semantics/scripting-1/the-script-element/module/crossorigin.html and it doesn't look quite right to me

[12:37:17.0000] <aklein>
Domenic: in particular the "NoCORS"/"WithCORS" bits seem backwards at first glance

[12:37:38.0000] <aklein>
since "NoCORS" is paired with "different", while "WithCORS" is paired with "same"

[12:38:03.0000] <aklein>
I would have expected it to be the other way around, that NoCORS would only work with "same" origin

[12:49:04.0000] <mmn>
annevk: Thanks for merging my wpt. I'd be interested in your thoughts on https://bugzilla.mozilla.org/show_bug.cgi?id=1340477#c8 regarding whether browsers should pretend to do something useful with autocomplete tokens that they don't actually do anything with.

[12:50:35.0000] <mmn>
Supporting feature detection is usually The Right Way™ but my use cases aren't particularly strong

[12:54:23.0000] <annevk>
mmn: you mean not reflect tokens we do not support? Sounds reasonable

[12:54:52.0000] <annevk>
mmn: if something else, needinfo me and I'll get to it tomorrow

[12:55:03.0000] <mmn>
yeah, that's what I mean

[12:55:40.0000] <mmn>
return the default "on" or "off" in those cases (depending on the form's @autocomplete)

[12:56:27.0000] <Domenic>
aklein: will look at the test in a bit, but in general the terminology is a bit confusing. "No CORS" means "don't respect CORS restrictions".

[13:13:34.0000] <Domenic>
aklein: the tests seem OK to me from this perspective

[13:13:43.0000] <Domenic>
although confusingly named

[13:23:53.0000] <aklein>
Domenic: ah, interesting

[13:24:15.0000] <aklein>
Domenic: what do "different" and "same" mean?

[13:24:52.0000] <Domenic>
aklein: also not great... I guess, "CORS-same-origin" and "CORS-different-origin"?

[13:24:59.0000] <aklein>
and actually I didn't understand your first thing. the test description says "Error in CORS-different-origin script"

[13:25:25.0000] <Domenic>
https://html.spec.whatwg.org/#cors-same-origin

[13:25:26.0000] <aklein>
also confusing about this test is that "Error" means "we ran the script"

[13:26:40.0000] <aklein>
"different" == "cross" here?

[13:26:41.0000] <Domenic>
Although I think that response's type should be "error", not "opaque", so CORS-cross-origin isn't accurate (much less CORS-different-origin)

[13:27:57.0000] <Domenic>
I would support editing the test for clarity so that NoCORS/CORS-different-origin -> "missing CORS headers" and WithCORS/CORS-same-origin -> "has correct CORS headers"

[13:28:21.0000] <aklein>
but for the "different" case, shouldn't these be "Blocked script download"?

[13:28:29.0000] <Domenic>
Hmm then what is the difference between "NoCORS" vs. "BlockedMissingHeader" yeah

[13:28:37.0000] <aklein>
that is, tests 1 and 5

[13:30:18.0000] <Domenic>
aklein: yes, these tests seem wrong, OK.

[13:30:42.0000] <Domenic>
From the spec's point of view https://github.com/w3c/web-platform-tests/blob/master/html/semantics/scripting-1/the-script-element/module/crossorigin-root-missingheader.sub.html and https://github.com/w3c/web-platform-tests/blob/master/html/semantics/scripting-1/the-script-element/module/crossorigin-root-different.sub.html should be identical

[13:30:45.0000] <aklein>
confusing _and_ wrong, good

[13:30:55.0000] <aklein>
yeah, that looks right to me

[13:40:26.0000] <aklein>
Domenic: happy to make a PR, do you think we should just remove those cases for now? I'm sorta curious if Edge "passes" this test, though

[13:41:06.0000] <Domenic>
aklein: I think we should change them to fail

[13:41:12.0000] <Domenic>
I am also curious

[13:41:29.0000] <zcorpan>
sad that the output of location.hash doesn't work as input to decodeURIComponent

[13:56:57.0000] <Domenic>
decodeURIComponent is known to be pretty broken

[13:57:16.0000] <Domenic>
I guess the URL API is the answer in theory

[14:49:30.0000] <jyasskin>
annevk: An HTTP2 stream can choose whether to cache or not-cache a header value for future use within that stream. Not-caching is designed to protect against CRIME-like attacks (http://httpwg.org/specs/rfc7541.html#rfc.section.7.1), and cookies in particular might be something we'd want to not-cache because of that. However, I haven't checked whether Chrome

[14:49:31.0000] <jyasskin>
stores cookies into the HPACK dynamic table.


2017-04-20
[22:02:27.0000] <annevk>
jyasskin: ta, wonder if that is something we should offer control over at some point

[23:54:29.0000] <zcorpan>
TabAtkins: i now get a link error in cssom-view that https://w3c.github.io/uievents/#idl-mouseeventinit isn't marked for export, but it looks like it should be?

[00:13:37.0000] <TabAtkins>
zcorpan: Looks good to me with a fresh update?

[00:15:22.0000] <zcorpan>
Simons-MBP:cssom-view zcorpan$ bikeshed

[00:15:23.0000] <zcorpan>
LINK ERROR: No 'dictionary' refs found for 'MouseEventInit' that are marked for export.

[00:15:32.0000] <zcorpan>
TabAtkins: i just updated

[00:34:27.0000] <zcorpan>
wonder what's up with this id:   <p id="date-state-%28type=date%29">When an <code>input</code> element's <code data-x="attr-input-type">type</code> attribute is in

[00:34:34.0000] <zcorpan>
(only id with % in source)

[00:43:19.0000] <annevk>
zcorpan: would ( and ) trip something up?

[00:45:28.0000] <zcorpan>
annevk: a few lines above has   <h6 id="date-state-(type=date)"><dfn data-x="attr-input-type-date">Date</dfn> state (<code data-x="">type=date</code>)</h6>

[00:45:42.0000] <zcorpan>
/me runs a blame

[00:47:40.0000] <annevk>
oh, I wonder if it's a workaround for crappy browsers

[00:50:22.0000] <zcorpan>
b29fb58ce6139a1e297a915e7291e637c3e1b561 added these ids

[00:51:35.0000] <zcorpan>
the link on caniuse is https://html.spec.whatwg.org/multipage/forms.html#date-state-(type=date) - not percent-escaped

[01:44:40.0000] <zcorpan>
TabAtkins: https://drafts.csswg.org/bikeshed/cssom-view/

[01:49:15.0000] <MikeSmith>
do we have branch snapshots for HTML?

[01:50:14.0000] <annevk>
MikeSmith: I don't think so, we should probably start poking at the tooling again a bit and maybe move more of it to Travis

[01:51:07.0000] <MikeSmith>
annevk: OK

[01:51:23.0000] <MikeSmith>
is there a way I can force a snapshot build for a PR?

[01:51:43.0000] <MikeSmith>
that is, by hacking on the .travis.yml on the branch maybe?

[01:51:51.0000] <MikeSmith>
or deploy.sh on the branch?

[01:52:19.0000] <MikeSmith>
/me looks while he’s waiting

[01:53:14.0000] <annevk>
MikeSmith: no, just locally

[01:53:14.0000] <MikeSmith>
oh I see no deploy stuff gets called from Travis for the HTML spec

[01:53:18.0000] <MikeSmith>
OK

[01:53:19.0000] <annevk>
MikeSmith: right

[01:53:59.0000] <annevk>
MikeSmith: it's the only spec we build on the server making it a bit of a liability

[01:54:30.0000] <MikeSmith>
OK

[01:54:59.0000] <MikeSmith>
well for now I just want to be able to generate multipage output with a change for y’all to look at

[01:55:14.0000] <MikeSmith>
I guess I can just scp it to my own server

[02:07:48.0000] <annevk>
Ah yeah, that's what I do

[02:23:14.0000] <MikeSmith>
/me adds a bunch of hashes to his CSP policy for all the inline style elements the HTML spec has

[03:13:17.0000] <MikeSmith>
/me finaally had to resort to 'unsafe-inline" and 'unsafe-eval'

[04:21:05.0000] <timwis>
morning folks. had a thought regarding custom elements.. couldn't i theoretically make my own custom elements via $('my-el-name').html('....') ? and maybe set some css on it to display: inline-block etc.

[04:22:04.0000] <timwis>
i know custom element spec provides more features but for basic stuff like abstracting a complex widget's html, it seems like this is a much lighter solution with a lot of browser support, no?

[04:26:48.0000] <annevk>
timwis: if you don't need complexity then you don't need it...

[04:27:39.0000] <timwis>
annevk: it being custom element spec?

[04:30:15.0000] <annevk>
timwis: yeah, there's always multiple ways to do things, what is best depends on the requirements and use cases

[04:31:49.0000] <timwis>
annevk: i guess my question is whether there's anything bad about using a fake tag. pretty sure that's an HTMLUnknownElement. and just adding functionality to it

[04:32:50.0000] <annevk>
timwis: can't think of much right now

[04:59:52.0000] <timwis>
thanks annevk. Just threw together a proof of concept: https://github.com/timwis/standards-components/tree/unknown-element (demo: http://phl-standards-unknown-elements.surge.sh/)

[05:48:50.0000] <Domenic>
timwis: it's confusing for other developers looking at your code. If you're just using a glorified div, then you should use the div tag.

[05:49:57.0000] <annevk>
That was the one thing I could think of, but I figured it might be fine since the semantics are locally-bound anyway

[05:53:02.0000] <annevk>
web-platform-tests doesn't appear to have tests for Navigator objects...

[05:56:10.0000] <Domenic>
It does

[05:56:33.0000] <Domenic>
annevk: https://github.com/w3c/web-platform-tests/tree/master/html/webappapis/system-state-and-capabilities/the-navigator-object

[05:57:47.0000] <annevk>
Oh right, I somehow skipped right over that in my grep results

[05:57:51.0000] <annevk>
Thanks

[06:16:33.0000] <annevk>
Domenic: so the way we deal with tearoff objects from Window seems really quite bad, they all have their own language and model, some based on document, some on the Window object, but no consistent language

[06:36:46.0000] <Domenic>
annevk: agreed

[06:36:51.0000] <timwis>
Domenic: ah, you mean like <div data-component="phl-button"></div>

[06:37:00.0000] <Domenic>
timwis: sure, or just use class=""

[06:37:07.0000] <Domenic>
or data-button

[06:37:15.0000] <timwis>
is the only downside to using <phl-button> instead that it's less obvious what's going on to people reading the code?

[06:37:51.0000] <Domenic>
There are probably a few other minor ones, including it being non-conformant HTML, but that's the major one.

[06:38:26.0000] <Domenic>
annevk: the one thing I'm on sure on is whether there should be a central location saying "Window has an associated X, Y, and Z" or if each object should define that in its definition.

[06:38:47.0000] <timwis>
Domenic: sorry if this is an obvious answer, but what's wrong with it being non-conformant HTML?

[06:39:44.0000] <annevk>
Domenic: not sure on?

[06:40:06.0000] <annevk>
Domenic: I'm fairly convinced still we want formalized slots and informal slots until that day comes

[06:40:48.0000] <annevk>
Domenic: the current haphazard way of describing relations between objects and state makes that very clear to me

[06:42:31.0000] <Domenic>
annevk: not sure whether WIndow should describe all its slots, or if e.g. Navigator should say "each window has an associated Navigator object"

[06:45:46.0000] <annevk>
Domenic: I think the latter style is confusing

[06:46:06.0000] <annevk>
Domenic: it's acceptable, but not how I'd like things to be

[06:47:23.0000] <annevk>
Domenic: what might work is that IDL takes care of most of it once we have formalized slots as I proposed long ago

[06:47:39.0000] <Domenic>
I'm still unclear on the benefits of formalized ones over informal ones.

[06:47:42.0000] <annevk>
Domenic: so that when a Window object is allocated, IDL allocates a Navigator and Location object as well

[06:47:49.0000] <annevk>
Domenic: in the same global

[06:48:18.0000] <annevk>
Domenic: and then puts them in their respective slots, which navigator and location would end up returning from

[06:48:33.0000] <Domenic>
Hmm, I never realized there was an implicit allocation of slot values implied.

[06:48:46.0000] <annevk>
(most of that could effectively be codegen at that point)

[06:49:05.0000] <annevk>
That's an idea for extending formal slots

[06:49:37.0000] <annevk>
And making things easier to define and more robust by default

[07:10:34.0000] <jyasskin>
Why is it easier to auto-create Navigator and Location into a formal slot than into their readonly attributes?

[07:15:53.0000] <annevk>
jyasskin: the latter doesn't work? That's just a getter

[07:17:26.0000] <jyasskin>
annevk: It seems like the same sort of webidl wording that would auto-create into slots could also specify that readonly attributes, maybe marked by an [ExtendedAttribute], have an instance in an implicit slot by default.

[07:17:52.0000] <annevk>
jyasskin: sure, that's a valid impl of formalized slots

[07:17:59.0000] <jyasskin>
Ah, SG.

[07:18:02.0000] <annevk>
jyasskin: I'm just talking at a higher-level here

[09:04:37.0000] <Domenic>
TabAtkins: what would be a good way to get https://github.com/w3c/web-platform-tests/issues/5625 on the CSSWG's radar? File an issue on https://github.com/w3c/csswg-drafts/issues maybe? Mailing list? Trying to get some broad discussion.

[10:59:35.0000] <jsbell>
annevk: Since it's part of the Blink ship process I filed a TAG spec review request for Storage. Hopefully any feedback given will be useful/constructive.

[11:05:12.0000] <annevk>
jsbell: I thought we already did that once?

[11:05:44.0000] <annevk>
jsbell: https://github.com/w3ctag/spec-reviews/issues/85

[11:05:55.0000] <annevk>
jsbell: nothing really changed since then

[11:06:25.0000] <jsbell>
annevk; Oh! Hrm....

[11:08:34.0000] <jsbell>
annevk: Huh... for some reason I thought I saw a note saying we intentionally hadn't. Maybe I was dreaming. :P Awesome, I'll close, never mind and thx

[14:58:37.0000] <astearns>
Domenic: I'll add 5625 to today's meeting agenda (TabAtkins)


2017-04-21
[17:17:36.0000] <thepickle>
hey... mailing list server seems to be unreachable. problem with MX record

[17:25:18.0000] <MikeSmith>
thepickle: unreachable how?

[17:25:53.0000] <MikeSmith>
trying to post a message to the list and it fails, or..?

[17:26:51.0000] <MikeSmith>
$ telnet lists.whatwg.org 25

[17:26:51.0000] <MikeSmith>
Trying 66.33.216.200...

[17:26:51.0000] <MikeSmith>
Connected to lists.whatwg.org.

[17:26:51.0000] <MikeSmith>
Escape character is '^]'.

[17:26:52.0000] <MikeSmith>
220 zapata.dreamhost.com ESMTP

[17:27:04.0000] <thepickle>
i tried to subscribe and it fails. i get a notice from mailer daemon saying no MX record for lists.whatwg.org

[17:27:44.0000] <MikeSmith>
please forward that message to me

[17:27:48.0000] <MikeSmith>
mike⊙wo

[17:30:08.0000] <thepickle>
ok, i sent it to you

[17:33:09.0000] <MikeSmith>
thanks

[17:33:20.0000] <MikeSmith>
it’s true there is no MX record

[17:33:32.0000] <MikeSmith>
$ dig lists.whatwg.org MX

[17:33:45.0000] <MikeSmith>
;; AUTHORITY SECTION:

[17:33:47.0000] <MikeSmith>
whatwg.org.		10574	IN	SOA	ns1.dreamhost.com. hostmaster.dreamhost.com. 2017041116 21495 1800 1814400 14400

[17:34:58.0000] <MikeSmith>
there are records for whatwg.org itself and I think that’s what it should be using

[17:35:13.0000] <MikeSmith>
dig whatwg.org MX

[17:35:22.0000] <MikeSmith>
;; ANSWER SECTION:

[17:35:23.0000] <MikeSmith>
whatwg.org.		14400	IN	MX	0 mx1.sub5.homie.mail.dreamhost.com.

[17:35:23.0000] <MikeSmith>
whatwg.org.		14400	IN	MX	0 mx2.sub5.homie.mail.dreamhost.com.

[17:36:46.0000] <MikeSmith>
thepickle: haven’t got any message from you yet

[17:38:16.0000] <thepickle>
sorry it is from yahoo, can be slow to go out sometimes

[17:39:19.0000] <MikeSmith>
ok

[01:26:05.0000] <annevk>
apple.com finally switched to HTTPS?

[01:26:13.0000] <annevk>
No HSTS though looks like

[07:58:40.0000] <miketaylr>
annevk: dang, i always used apple.com to kick captive portal stuff

[07:58:45.0000] <miketaylr>
gonna have to unlearn that one

[08:12:56.0000] <zcorpan>
miketaylr: you can use appIe.com

[08:13:14.0000] <miketaylr>
zcorpan: haha

[08:13:26.0000] <miketaylr>
/me burns laptop

[08:14:15.0000] <zcorpan>
sorry ^_^

[09:36:16.0000] <Domenic>
example.com for me

[09:43:06.0000] <kbrosnan>
miketaylr: even if you have the fake apple.com in your history your browser won't autocomplete it unless you are typing Cyrillic

[09:43:43.0000] <kbrosnan>
or just type out the whole thing

[09:44:15.0000] <miketaylr>
don't worry, i don't even know how to change keyboard layouts on this mac

[09:44:22.0000] <miketaylr>
should be good

[10:36:01.0000] <Lounge-testing>
is there a list of URLs to try parsing?

[10:36:24.0000] <Lounge-testing>
to ensure a client/parser is up-to-spec?

[10:39:18.0000] <jsbell>
Lounge-testing: https://github.com/w3c/web-platform-tests/blob/master/url/urltestdata.json perhaps ?

[10:39:37.0000] <Lounge-testing>
went with this https://mathiasbynens.be/demo/url-regex

[10:39:38.0000] <Lounge-testing>
but thanks

[10:39:44.0000] <Lounge-testing>
thats easy to test against though ^^

[11:14:31.0000] <zcorpan>
smaug: https://github.com/whatwg/html/issues/2464#issuecomment-293892654


2017-04-24
[01:16:14.0000] <nox>
Should the quirkiness be preserved when serialising back a quirky length as per https://quirks.spec.whatwg.org/#the-unitless-length-quirk?

[01:17:12.0000] <annevk>
nox: I hope not?

[01:17:23.0000] <nox>
Well I hope so too.

[01:18:19.0000] <annevk>
Anyone want to do a final review of https://github.com/whatwg/whatwg.org/pull/25? Hopefully we can put it live by the end of the day

[03:36:00.0000] <nox>
annevk: Would you mind if I change unitless-length.html to not put all the properties in a single test?

[03:38:11.0000] <annevk>
nox: should prolly ask zcorpan

[03:38:35.0000] <nox>
For once that zcorpan isn't here, hah.

[09:35:25.0000] <TabAtkins>
miketaylr: Use example.com, like Domenic suggested.

[09:36:13.0000] <miketaylr>
ur not the boss of me

[09:38:27.0000] <TabAtkins>
Check your paystub again and get back to me.

[09:39:11.0000] <TabAtkins>
annevk: The conclusion of 5625 was "sounds good, we'll put it on gsnedders' backlog"

[10:30:06.0000] <gsnedders>
TabAtkins: what are you dumping on me? :)

[10:30:29.0000] <TabAtkins>
(Eventually) testing the UA stylesheet via getComputedStyle(). ^_^

[10:30:58.0000] <gsnedders>
TabAtkins: and what am I meant to be doing about this?

[10:31:58.0000] <TabAtkins>
Doing the thing. At some point, when it's worthwhile to point you at testing rather than testing infrastructure.

[10:42:35.0000] <gsnedders>
TabAtkins: and where is this tracked?

[10:42:46.0000] <gsnedders>
TabAtkins: because I don't see any bugs on wpt for this

[10:43:07.0000] <TabAtkins>
We chatted about it during the meeting, and Rick said he's down at some point.

[10:43:42.0000] <gsnedders>
Well that's an effective way to get it on my to-do list

[10:47:48.0000] <gsnedders>
TabAtkins: but seriously, it seems much better to file a bug so that other people know this is something we're missing and can potentially do something about

[10:48:07.0000] <TabAtkins>
Yeah, I get that. Not doing it right this moment.

[12:05:03.0000] <Domenic>
Isn't the bug filed? 5625?

[12:05:32.0000] <Domenic>
https://github.com/w3c/web-platform-tests/issues/5625

[12:47:44.0000] <TabAtkins>
Well there you go then.

[14:49:27.0000] <TabAtkins>
Any particular preference in APIs for takes-an-array vs takes-varargs?

[14:50:06.0000] <TabAtkins>
I'm writing up the proposed changes to TypedOM for calc, where we're switching calc()'s object to be an expression tree, and I need something like `CSSMathValue("+", 1em, 5px)`.

[14:50:55.0000] <TabAtkins>
And I'm wondering whether I should do those last bits as varargs, as in the example, or as `CSSMathValue("+", [1em, 5px])`.

[14:51:19.0000] <TabAtkins>
I think the latter is just excess wrapping for no good reason? Particularly since any browser with CSSMathValue will have the spread operator.

[14:53:21.0000] <Domenic>
I tend toward the array but I'm not sure why...

[14:53:30.0000] <Domenic>
We had some discussion about it for promises...

[14:54:19.0000] <TabAtkins>
In Promise.all there's a reasonable case for [] - the *output* is an array, so having the *input* be an array works, mentally.

[14:54:31.0000] <TabAtkins>
Here I'm just building a tree structure, and the latter arguments are the children for the node.

[14:54:56.0000] <Domenic>
Right, yep, that was it.

[14:55:56.0000] <TabAtkins>
(Also, in data structure terms, Promise.all is just the Traversable `sequence` operation, so having that represented correctly (going from Array<Promise<Foo>> to Promise<Array<Foo>>) is A+.)

[16:23:33.0000] <TabAtkins>
Is it possible to have an Array attribute in WebIDL?

[16:23:45.0000] <TabAtkins>
It *looks* like I can only do FrozenArray, which isn't what I want.

[16:24:07.0000] <TabAtkins>
(Given that I'd like to typecheck it, tho, I think I might need for the Array subclassing thing to resolve.)

[16:30:08.0000] <jsbell>
TabAtkins: You can do 'any' and define it in prose, of course; otherwise: don't think so (intentional restriction on sequence<>)

[16:32:23.0000] <TabAtkins>
kk.

[16:32:33.0000] <TabAtkins>
Given the typechecking, tho, I guess I can't really use Array anyway. :(

[16:32:55.0000] <TabAtkins>
I just replaced my nice typecheckable-at-mutation-time Maplike with something that contains an Array. :(


2017-04-25
[05:43:54.0000] <nox>
Does anyone know if all the tests in unitless-length.html are actually related to the unitless length quirk?

[05:43:59.0000] <nox>
Like, why should -\\31 work?

[10:24:55.0000] <andru255>
Hi everyone

[10:25:21.0000] <andru255>
I need to know how cancel a native fetch in javascript

[10:25:36.0000] <andru255>
Anyone knows how?

[10:25:58.0000] <terinjokes>
andru255: I don't believe you can right now

[10:27:31.0000] <andru255>
thank you terinkjokes, and some alternative o way to cancel? like a ignore o suspended fetch?

[10:33:52.0000] <andru255>
I read this useful link for know fetch https://fetch.spec.whatwg.org/

[10:34:21.0000] <andru255>
but I don't see some way to abort or cancel a fetch :(

[10:35:14.0000] <terinjokes>
andru255: there's a long thread that discusses some of the difficulties on the GitHub

[10:35:19.0000] <terinjokes>
https://github.com/whatwg/fetch/issues/447

[10:38:51.0000] <andru255>
thanks a lot terin again, I see, Would you recommend to use an XHR object by fetch at the time? meanwhile fetch is in draft today

[10:46:42.0000] <terinjokes>
i think that depends on your use case

[10:56:37.0000] <andru255>
mmm, when it's recommend to use fetch?, I think this is a useful method but its still in discussion

[10:56:54.0000] <terinjokes>
you can use it now, and i use it in some places

[10:57:14.0000] <terinjokes>
but if you need to cancel work, because of server resources, then it's probably not a good fit

[11:27:47.0000] <nox>
https://twitter.com/nokusu/status/856937598954201089

[11:47:51.0000] <Domenic>
nox: I don't get it...

[11:49:47.0000] <nox>
Domenic: Sorry, I'm kind of just shitposting, thought of how games are now sold incomplete and then DLCs arrive, and how would that work in the software world. See https://www.giantbomb.com/dlc-season-pass/3015-7186/

[14:42:33.0000] <KiChjang>
nox: sounds like you're talking about Europa Universalis 4


2017-04-26
[21:25:00.0000] <jpdevries>
I have a question about if something has been, or perhaps would be, considered for the Notifications API. I think the implicit accessibility provided by such an API makes it an appealing way for web apps to display notifications for when async actions have succedded or failed without having to go through making an HTML element accessible themselves. Thing is, I just realized that Nofications don't seem to display when users are in "Do Not Dist

[21:25:00.0000] <jpdevries>
but my question is this. Would it make sense for the Notifications API to support some sort of "assertive" option that notifies them anyways? I understand this could be abused, but I think there may be ways to circuvment that (it only works if hte notification was dispatched from something like a "click" event)

[21:47:31.0000] <annevk>
jpdevries: in that case could you not just display something in the app?

[21:49:43.0000] <jpdevries>
Ya certainly, but I think of the Notifications API as being nice for this as it comes with implicit accessibility.

[21:59:22.0000] <jpdevries>
but maybe i'm just being lazy ;)

[22:03:48.0000] <annevk>
Notifications are never going to be a guarantee

[22:04:13.0000] <annevk>
I personally have most of m disabled

[22:05:59.0000] <jpdevries>
that's good to know. for some reason, i expected a notification from an interface i'm interacting with to be more than prominent than like, a news notification. but i see now it makes sense they wouldn't be guaranteed

[00:26:21.0000] <jochen__>
annevk: !

[00:26:28.0000] <jochen__>
annevk: please don't go away from the suborigin discussion

[00:29:05.0000] <annevk>
jochen__: I have the feeling my input is not getting duly considered, if that makes sense

[00:29:27.0000] <annevk>
jochen__: or maybe my questions can only be addressed by mkwst?

[00:30:25.0000] <annevk>
jochen__: there's a lot of activity on the minutia, but high-level design questions just linger

[00:31:28.0000] <jochen__>
annevk: I just took this work over from jww, so I'm still ramping up

[00:31:29.0000] <annevk>
jochen__: one question I've had since the start for instance is how this would deal with permissions and nobody has really given me a concrete answer thus far

[00:32:29.0000] <annevk>
jochen__: say I grant example.com the ability to do notifications, does example.com/suborigin1 get them too? If not, how does it ask for permissions without confusing the user?

[00:33:15.0000] <jochen__>
annevk: from my point of view, I'd like to hide the fact that suborigins are a thing from users, so I'd grant all suborigins the permission if the origin has it

[00:34:05.0000] <annevk>
jochen__: and a suborigin would ask on behalf of the origin too?

[00:34:29.0000] <jochen__>
correct

[00:34:32.0000] <annevk>
jochen__: I think that model makes sense, but mkwst and jww gave different answers at times

[00:35:05.0000] <jochen__>
that's possible :)

[00:35:26.0000] <jochen__>
so, how can we make sure that esp. the platform affecting / security model changes are understood?

[00:36:00.0000] <jochen__>
we've scheduled an update for the next WebAppSec phonecall, and I wanted to sync with devd before

[00:36:14.0000] <annevk>
I think a good first step is to file "Suborigin integration" issues against all standards that are affected

[00:36:32.0000] <jochen__>
maybe it makes sense for you to join the sync as well?

[00:36:35.0000] <annevk>
So more people know this is a thing and can try to think through the implications

[00:36:50.0000] <jochen__>
good point

[00:37:26.0000] <jochen__>
I expect that that's HTML for postMessage / MessageEvent & window.origin & origin definition

[00:37:44.0000] <jochen__>
is CORS handled as part of fetch now?

[00:39:33.0000] <annevk>
jochen__: yes, CORS is in Fetch

[00:40:00.0000] <annevk>
jochen__: I'd rather not join a call, happy to study things async

[00:41:00.0000] <annevk>
jochen__: I'd expect issues against HTML, Fetch, Cookies (no idea where that is tracked though, private mkwst repo?), and maybe URL

[00:41:34.0000] <jochen__>
yeah, for cookies, the idea is to mark a browsing context in a suborigin as cookie-averse

[00:41:43.0000] <jochen__>
that one seems straight forward

[00:41:52.0000] <jochen__>
permissions would also be part of HTML?

[00:42:03.0000] <annevk>
jochen__: what about same-origin cookies?

[00:42:23.0000] <annevk>
jochen__: permissions is https://w3c.github.io/permissions/

[00:42:48.0000] <annevk>
jochen__: presumably you'd want same-suborigin cookies for the same reason we introduced same-origin cookies

[00:43:15.0000] <jochen__>
annevk: the main problem is that on the first request, the browser doesn't know which suborigin to expect

[00:43:19.0000] <annevk>
jochen__: although maybe that isn't possible since the suborigin is not known at the time of request

[00:43:23.0000] <annevk>
heh

[00:43:44.0000] <jochen__>
annevk: so we could either send all cookies (but that's potentially a large list) or none and rerequest the URL after the suborigin header was recevied (but that's slow)

[00:44:02.0000] <jochen__>
annevk: so I think we'll just not have suborigin specific cookies, and document.cookies will not return any cookies for js

[00:44:15.0000] <annevk>
jochen__: if https://wicg.github.io/origin-policy/ is a thing we could make it known ahead of time in theory

[00:44:35.0000] <jochen__>
true

[00:44:54.0000] <jochen__>
my feeling is that we might be able to punt that until there are actually sites that would need that

[00:45:19.0000] <jochen__>
it seems that the cases we have so far would work with monkey patching document.cookie to store stuff in localStorage

[00:46:25.0000] <annevk>
and cookies set by the server would still be transmitted since we don't know about suborigins at time of request

[00:46:39.0000] <jochen__>
right

[00:46:55.0000] <jochen__>
all other storage things, however, would be per suborigin

[00:47:01.0000] <jochen__>
e.g. IDB, localStorage, web database

[00:48:18.0000] <annevk>
Ah, I missed IDB in the list above of needing integration

[00:48:54.0000] <annevk>
Maybe https://storage.spec.whatwg.org/ needs to take this into account somehow too

[00:49:17.0000] <annevk>
Even if you get the persistent permission for an entire origin, applications might want to persist on a per-suborigin basis

[00:51:14.0000] <annevk>
jochen__: I think part of the problem is that a lot of the motivation is upgrading legacy apps, but not moving them to a subdomain; so it's unclear if we're just adding a lot of complexity to the platform for legacy apps, or if there's also forward looking reasons for all this

[00:51:49.0000] <jochen__>
it's not just about legacy apps

[00:52:17.0000] <jochen__>
one reason that folks don't want to move stuff to subdomains is that they don't want to prompt users N times for the same permission

[00:52:29.0000] <jochen__>
but it's a fair point

[00:52:33.0000] <annevk>
dglazkov: if you enable comments on https://docs.google.com/document/d/18qpNBY3Xm2svzBSAgOJk_Kkb_iRJXCsZQO4Oa3wv3n4/edit I might correct some typos

[00:53:57.0000] <annevk>
jochen__: ah permissions, of course; I guess that at least provides sufficient motivation to make this work well and solve all the edge cases too

[00:56:30.0000] <jochen__>
I started a discussion on public-webappsec about introducing a concept of site affiliation

[00:56:36.0000] <jochen__>
maybe via origin policy

[00:56:52.0000] <jochen__>
that would be another option to share permissions with multiple sites

[00:57:15.0000] <jochen__>
the downside is that we didn't ask the user whether to grant a permission for the current origin and all affiliated sites

[00:57:58.0000] <annevk>
I unsubscribed from public-webappsec since it had too many announcement emails

[00:58:19.0000] <jochen__>
so I don't think we could just pass on permissions without re-prompting, and the prompt would probably look odd (including a potentially long list of domains), and what should we do if the list of affiliated sites changes

[00:59:17.0000] <annevk>
In principle a top-level site can already share permissions with anyone it embeds without telling the user

[00:59:53.0000] <annevk>
But only for the duration of that visit

[01:00:12.0000] <annevk>
Yeah, not sure I have any good suggestions there, UX for that would be really tough

[01:00:24.0000] <annevk>
Permissions UX is already impossibly hard to get right

[01:01:22.0000] <jochen__>
so anyways

[01:01:32.0000] <jochen__>
I've noted filing issues on my todo list

[01:01:48.0000] <jochen__>
might not happen this week, as I'm at a conference

[01:02:57.0000] <annevk>
Thanks, and enjoy the conf

[01:40:39.0000] <zcorpan>
nox: I'm here now

[01:40:54.0000] <nox>
zcorpan: I took a decision myself. :)

[01:41:09.0000] <nox>
zcorpan: I am currently splitting the tests in unitless-length.html,

[01:41:16.0000] <nox>
zcorpan: to test per property and per quirky value,

[01:41:25.0000] <nox>
instead of grouping all properties in a single quirky value test.

[01:41:31.0000] <zcorpan>
nox: (╯°□°）╯︵ ┻━┻

[01:41:41.0000] <nox>
You don't like that? :(

[01:41:49.0000] <zcorpan>
nox: just kidding :-)

[01:41:51.0000] <nox>
Ah. :)

[01:42:09.0000] <zcorpan>
sounds good

[01:42:54.0000] <nox>
zcorpan: Surprisingly,

[01:43:08.0000] <nox>
zcorpan: with the quirk in Servo, I expected unrelated tests to pass,

[01:43:17.0000] <nox>
tests that would have been using the quirk syntax by mistake,

[01:43:30.0000] <nox>
turns out they were not, and I should not expect the worst of wpt. :P

[01:43:50.0000] <nox>
there were not*

[01:43:55.0000] <nox>
Too many rebases break my English.

[01:44:20.0000] <zcorpan>
hehe, well good then that there are tests specifically for unitless

[01:46:32.0000] <nox>
zcorpan: Yep, Servo all passes them, except for some top/bottom failures specific to macOS, unrelated to the quirk itself.

[01:46:48.0000] <zcorpan>
nox: so for {input:"-\\31 "}, the test expects it to not be applied, no?

[01:58:19.0000] <nox>
zcorpan: Btw, https://github.com/servo/servo/pull/16609/commits/b60049cbfc2f38aa4d2294a98a61d720df807d63

[01:58:25.0000] <nox>
zcorpan: Yes, these don't parse.

[02:27:14.0000] <Emil>
Hi

[02:31:28.0000] <annevk>
Emil: heya

[02:32:55.0000] <zcorpan>
nox: 👍

[03:09:01.0000] <nox>
zcorpan: Can you confirm that /html/semantics/interactive-elements/the-dialog-element/centering.html is totally unrelated to that quirk?

[03:12:54.0000] <zcorpan>
nox: yes. that doesn't use unitless values and doesn't use quirks mode

[03:18:42.0000] <nox>
zcorpan: Thanks.

[04:45:47.0000] <smaug>
zcorpan: how is https://drafts.csswg.org/cssom-view/#dom-mouseevent-offsetx supposed to work if event is re-dispatched

[04:52:23.0000] <annevk>
smaug: basically that needs to be defined as part of the MouseEvent definition and dispatch itself

[04:52:35.0000] <annevk>
smaug: the current approach doesn't really work

[04:52:37.0000] <smaug>
not necessarily

[04:52:39.0000] <smaug>
sure

[04:52:51.0000] <smaug>
but the second dispatch could also just keep using pageX/Y

[04:55:42.0000] <smaug>
zcorpan: looks like blink doesn't follow the pageX/Y behavior

[05:25:37.0000] <zcorpan>
smaug: hmm. IIRC there's an open bug about the check for the dispatch flag being bogus

[05:26:12.0000] <smaug>
I filed couple of bugs

[05:28:25.0000] <zcorpan>
smaug: ok. i don't have this paged in right now and don't have a particular opinion about how it should work (other than it should be web compatible and interoperable)

[05:28:52.0000] <smaug>
the testcase didn't work in Edge, so don't know yet what it does

[05:37:00.0000] <nox>
zcorpan: I have a question.

[05:37:18.0000] <nox>
zcorpan: Would unitless-length.html still work if it used position:absolute?

[05:37:33.0000] <nox>
Trying to understand why I have intermittent failures in Servo and how to limit them.

[05:40:16.0000] <zcorpan>
nox: yeah i think absolute would work as well. everything still passes in chromium with that change

[05:40:45.0000] <nox>
zcorpan: That being said,

[05:40:55.0000] <nox>
I have intermittents in the color quirk test too, so...

[05:58:00.0000] <annevk>
Domenic: you awake?

[05:58:35.0000] <Domenic>
annevk: reading email in bed, but yeah

[05:59:13.0000] <annevk>
Domenic: do we want to test the various views?

[05:59:31.0000] <annevk>
Domenic: it seems we need to generalize testSharingViaIncrementerScript and then update all callsites

[06:00:21.0000] <annevk>
Domenic: looking at SAB tests

[06:01:03.0000] <Domenic>
annevk: yeah I got a bit lazy on that... It'd be ideal to test one typed array, DataView, and maybe { nested: { view: [ta] } }

[06:01:39.0000] <Domenic>
the shared incrementer would probably be the right way to test, yeah.

[06:05:33.0000] <Emil>
Anyone here experienced with websockets?

[06:06:36.0000] <annevk>
Domenic: there were a couple of places I was surprised you didn't just pass the view to postMessage() as a way to get some variety, though they didn't seem super easy to change either

[06:07:03.0000] <annevk>
Domenic: I'll have a look to see how far I get with adding some at least

[06:07:10.0000] <annevk>
Domenic: I also left a couple of basic questions in the PR

[06:07:50.0000] <Domenic>
annevk: yeah, getting to them now

[06:08:28.0000] <Emil>
I'm experiencing an issue where wss.send("perkele".repeat(9)) from a browser works just fine according to the frame spec as outlined in the rfc, but wss.send("perkele".repeat(10)) results in garbage

[06:12:59.0000] <nox>
zcorpan: Do you see any way to test the quirk without using getComputedStyle?

[06:18:24.0000] <annevk>
Emil: sounds like you hit a bug of sorts

[06:20:07.0000] <annevk>
Emil: might be worth checking bufferedAmount but with such small amounts of data there really shouldn't be a problem

[06:21:10.0000] <nox>
zcorpan: Could we use data: URLs for the iframes contents, instead of using open/write/close?

[06:22:18.0000] <annevk>
nox: not same-origin

[06:22:21.0000] <zcorpan>
nox: that would get an opaque origin so the script couldn't getComputedStyle in it. would need postMessage?

[06:22:24.0000] <nox>
Oh right.

[06:22:32.0000] <annevk>
could use srcdoc maybe?

[06:22:44.0000] <nox>
zcorpan: Seems like our issue is that we reflow problems and we should wait for the iframe's load event.

[06:22:44.0000] <zcorpan>
srcdoc is always standards mode

[06:22:55.0000] <nox>
zcorpan: Do you mind if I patch the tests to do this?

[06:23:18.0000] <zcorpan>
nox: to do what?

[06:23:48.0000] <zcorpan>
oh wait for onload

[06:23:53.0000] <nox>
zcorpan: Run the tests in q.contentWindow.onload or something.

[06:24:05.0000] <zcorpan>
SGTM

[06:24:37.0000] <zcorpan>
could add a separate test for calling getComputedStyle during page load, if that's buggy?

[06:25:49.0000] <Emil>
annevk: my buffer is 4k in size

[06:26:08.0000] <Emil>
which means it shouldn't break at that :/

[06:27:25.0000] <zcorpan>
Emil: clearly the issue is you're swearing repeatedly in the message :-P

[06:28:54.0000] <Emil>
zcorpan: hehe

[06:28:59.0000] <Emil>
if only :/

[06:29:11.0000] <annevk>
Emil: I meant webSocketInstance.bufferedAmount, if that wasn't clear

[06:29:21.0000] <annevk>
Emil: does it happen in all browsers?

[06:30:57.0000] <Emil>
yeah

[06:31:03.0000] <Emil>
meaining I'm doing something wrong

[06:31:28.0000] <zcorpan>
Emil: so perkele * 9 is 63. perkele * 10 is 70, which means it won't fit in a "small" frame, and will instead use extended payload length

[06:31:45.0000] <zcorpan>
Emil: does the server implementation support such frames?

[06:31:53.0000] <Emil>
zcorpan: but isn't the limit 125 bytes?

[06:32:28.0000] <Emil>
and anycase, yeah, I have extended payload length support

[06:32:53.0000] <zcorpan>
Emil: huh yeah. I thought it was 64 or something. ok

[06:34:03.0000] <Emil>
Is there a situation in which the ws frames don't adhere to the 2 byte header, 0/2/8 bytes extended payload, 4 bytes mask, payload-data

[06:34:20.0000] <Emil>
from browser to server

[06:34:46.0000] <nox>
zcorpan: https://github.com/servo/servo/pull/16618#issuecomment-297409757 Hah!

[06:34:54.0000] <nox>
No need to change the test, just ping the right person on IRC. :P

[06:35:05.0000] <nox>
(The link was supposed to be to a PR, not a comment in it.)

[06:35:53.0000] <zcorpan>
Emil: messages could be fragmented into multiple frames, but i think shouldn't happen for such short messages

[06:36:02.0000] <Emil>
zcorpan: but they still follow the frame format

[06:36:08.0000] <zcorpan>
yeah

[06:36:08.0000] <Emil>
right?

[06:36:16.0000] <Emil>
And because I am only reading frames

[06:36:21.0000] <Emil>
that shouldn't be an issue

[06:38:38.0000] <zcorpan>
Emil: do you know what goes over the wire? (I guess easier to debug without TLS)

[06:39:44.0000] <Emil>
zcorpan: hm?

[06:39:51.0000] <Emil>
I am capturing the raw data in C

[06:40:01.0000] <Emil>
nginx is stripping the TLS off

[06:40:13.0000] <zcorpan>
Emil: ok. so what data do you get?

[06:40:33.0000] <Emil>
here's a raw dump https://emil.fi/jako/koodi/ws_dump_2017-04-26_15:56:14_+0300_4

[06:41:32.0000] <Emil>
that's the data received through the socket without the HTTP handshake

[06:41:43.0000] <Emil>
I can add the HTTP handshake, too, if required

[06:44:08.0000] <annevk>
Domenic: I'm probably not going to get to generalizing the tests today after all :/

[06:50:48.0000] <Emil>
zcorpan: Any success?

[06:53:31.0000] <zcorpan>
Emil: I don't have a websocket implementation at hand to run it through... I started comparing the bits with the spec's framing but that isn't very efficient ^_^

[06:53:54.0000] <zcorpan>
Emil: the first byte looks OK right?

[06:54:22.0000] <Emil>
zcorpan: I get just fine data with a message like: 2017-04-26 16:54:05.617 +0300 perkele

[06:54:27.0000] <Emil>
or perkele repeated 9 times

[06:54:36.0000] <Emil>
but perkele repeated 10 times and it breaks :D

[06:55:37.0000] <Emil>
hmm, I'll write a ws decoder

[06:55:42.0000] <Emil>
for files

[06:56:52.0000] <zcorpan>
very curious. dooes browser's devtools help? (opera 12 had reasonable error messages in the console, but i guess they only help if the client receives something unexpected)

[06:59:44.0000] <Emil>
No, they don't show the actual raw data

[06:59:46.0000] <Emil>
just payload

[07:30:08.0000] <zcorpan>
ok

[09:43:12.0000] <Emil>
hehe

[09:43:15.0000] <Emil>
shame on me

[09:43:51.0000] <Emil>
next time have the right god damn masks you smarty pants

[10:14:03.0000] <annevk>
Domenic: you okay with me reintroducing the BroadcastChannel test I wrote?

[10:14:29.0000] <annevk>
Domenic: I'll look into abstracting for multiple views tomorrow

[10:14:46.0000] <annevk>
Domenic: and update the corresponding shared memory blog post

[10:14:52.0000] <annevk>
Domenic: anything else?

[10:28:25.0000] <Domenic>
annevk: I haven't looked at the Broadcast channel spec fix yet but I assume you got it right there. That does sound like all we need. Maybe I'll rebase and do a last review of the remaining PR.

[10:29:48.0000] <annevk>
Domenic: the remaining PR is already rebased and was already reviewed I think

[10:30:03.0000] <annevk>
Domenic: but we don't have the various view tests

[10:30:27.0000] <annevk>
Domenic: which should be doable, just some abstraction work and making sure everything still runs after the changes have been made

[10:30:27.0000] <Domenic>
annevk: I meant the spec PR

[10:30:37.0000] <annevk>
Domenic: yes, I did too

[10:30:42.0000] <Domenic>
Ah ok

[10:31:09.0000] <Domenic>
Note you can test in Chrome by flipping an extra flag in about:flags

[10:31:21.0000] <annevk>
Ah okay

[11:20:44.0000] <aklein>
Domenic: have you been in contact with Constellation, jonco, Edge folks about <script type=module> spec issues?

[11:21:11.0000] <Domenic>
aklein: you mean the bugfixes around errors and such? Not really, sorry to say.

[11:21:28.0000] <aklein>
Domenic: makes me a little uneasy

[11:22:12.0000] <Domenic>
aklein: my view was that we were working out all the bugs, nothing controversial, and it'd be nicer to present them with a "hey we fixed all the bugs and have tests" instead of keeping them incrementally updated. But maybe more communication would be good.

[11:23:17.0000] <aklein>
Domenic: that seems fine too

[11:23:26.0000] <aklein>
I don't think most of the issues so far are controversial

[11:23:38.0000] <aklein>
I'm mostly curious whether any of them even noticed any of this

[16:01:45.0000] <zewt>
jesus, firefox just installed an update automatically even though I have that turned off

[16:02:35.0000] <zewt>
there's a name for programs that install remote code on your computer without permission, and it's not "browser"


2017-04-27
[21:23:51.0000] <howdoi>
where does the Caches API storage the data? (Browsers's cache? Disk?)

[21:39:27.0000] <annevk>
howdoi: why does it matter?

[21:39:43.0000] <howdoi>
annevk: to understand the internals

[21:40:02.0000] <howdoi>
like we have chrome\user data\default\local storage\

[21:40:28.0000] <annevk>
howdoi: browsers can do whatever as long as it matches the requirements

[21:40:30.0000] <howdoi>
are we using some kind of DB for the cache? sqllite or something or is it on the disk?

[21:41:08.0000] <howdoi>
how is the performance taken care? (Even after restart of the app or the device, the caches will be maintained, so I feel it must be on the disk)

[21:49:25.0000] <howdoi>
annevk: ^ :)

[21:50:29.0000] <annevk>
howdoi: it would depend on the browser, but yes, at some point it probably needs to be written to disk, but there's no requirement that this happens directly

[21:52:33.0000] <howdoi>
annevk: interesting, the spec doesn't speak about the that either, I have cloned https://chromium.googlesource.com/chromium/src.git and eager to dig in.

[21:54:28.0000] <annevk>
howdoi: there's no reason for the spec to talk about implementation strategies

[21:55:00.0000] <annevk>
howdoi: JavaScript doesn't require a JIT either, even though in practice you can't compete without one

[21:55:24.0000] <howdoi>
annevk: agree, makes sense.

[21:56:45.0000] <howdoi>
one thing that bothers me the most is the try-catch block for await statements

[21:58:21.0000] <KiChjang>
why use JIT when you can AOT

[22:02:11.0000] <Domenic>
You could write to cloud instead of disk.

[22:26:24.0000] <howdoi>
Domenic: what does chrome do?

[00:09:42.0000] <tobie>
Hey, we're planning to lump reporting of all sensor value changes together right before rAF. I assume that implies adding a step in the event loop processing model that references an abstract operation in the generic sensor spec.

[00:10:30.0000] <tobie>
If that's so, should I just get a PR ready where we can discuss further details (e.g. position in the algo steps)?

[00:11:31.0000] <annevk>
tobie: probably, though it's unclear to me that section has had sufficient testing in general

[00:11:50.0000] <tobie>
annevk: not sure what you mean.

[00:12:14.0000] <annevk>
tobie: also, Firefox is about to remove some earlier sensor APIs due to same-origin policy breaking stuff and nobody seems interested in putting in the effort to give them a security story

[00:12:31.0000] <annevk>
tobie: that it's not clear to me that section of the algorithm is stable

[00:13:20.0000] <tobie>
well, we're working closely with the Enamel team to get the security story straight. Would be happy to get more involvement from mozilla folks.

[00:15:31.0000] <tobie>
annevk: I'll send a PR. We can discuss further there.

[00:15:48.0000] <annevk>
tobie: so what's their story for the ambient light?

[00:15:53.0000] <annevk>
s/the//

[00:17:14.0000] <tobie>
annevk: I think ambient light should be put on the back burner until we have 1) good use cases for it, 2) a sound permission strategy.

[00:17:48.0000] <tobie>
annevk: in the meantime, we could expose a mediaquery-inspired LightLevelSensor instead, with just a enum for values.

[00:18:03.0000] <tobie>
s/a/an/

[00:19:21.0000] <tobie>
annevk: that said, we'll need to figure out a good permission story for all of the motion sensors (which have similar if not worse security concerns than ambient light, and use cases which prevent a lot of the mitigation strategies we could use for ambient-light).

[00:20:43.0000] <annevk>
And by that you mean UX?

[00:25:57.0000] <tobie>
annevk: well; UX, adequate permission descriptors, permission names that work (we have sensors that are combination of others sensors and the Permission spec isn't really designed to handle that), a precise understanding of the threats we're trying to mitigate, precise understanding of the requirements for each sensor and how that affects mitigation

[00:25:58.0000] <tobie>
strategies (e.g. motion sensors values are often integrated, so fuzzing the values or the timestamps isn't an option, while that's something that would work for ambient-light).

[00:31:19.0000] <tobie>
annevk: for example, should permission descriptor allow for different permission strategies (e.g. opt-out vs. prompt) depending on the frequency at which the sensors are polled?

[00:32:06.0000] <annevk>
I think all of that depends on whether UX can even find a way to phrase that question

[00:32:48.0000] <annevk>
It's hard to get UX feedback, but a lot of features could really do with UX-first

[00:33:21.0000] <annevk>
Design the user interaction model first, then figure out what engineering is required to make that happen

[02:46:28.0000] <zcorpan>
Apparently meta viewport uses the same parser as window.open() features in at least webkit. https://bugs.webkit.org/show_bug.cgi?id=170548#c36

[03:44:21.0000] <zcorpan>
TabAtkins: irregular friendly ping re fingerprint :-)

[05:31:51.0000] <annevk>
Domenic: I added basic tests for all views

[05:32:02.0000] <annevk>
Domenic: let me know if you had something more in find

[05:32:39.0000] <annevk>
zcorpan: maybe in Blink it's not less code, but I'd imagine that if you had some code sharing for boolean features you'd end up with less code

[05:33:33.0000] <zcorpan>
annevk: i guess that is possible

[08:29:13.0000] <hsivonen>
annevk: is there a reason why the EUC-JP decoder can prepend ASCII *and* 0xA0 *and* 0xFF in the situation where the other two-byte decoders prepend ASCII only?

[08:29:39.0000] <hsivonen>
that is, why are 0xA0 and 0xFF as a bogus trail byte different in EUC-JP compared to the others?

[08:36:55.0000] <hsivonen>
/me commented on euc-jp tests github

[09:33:07.0000] <annevk>
hsivonen: not sure

[11:15:28.0000] <TabAtkins>
annevk, Domenic, bz: Btw, sorry for the frustration coming thru in the Array-like thread, but jiminy christmas i'm getting frustrated over this.

[14:06:33.0000] <Domenic>
Hmm I wonder why we left the named getter on window instead of moving it to WindowProxy

[14:06:38.0000] <Domenic>
annevk ^

[14:51:19.0000] <tobie>
TabAtkins: share your dev experience concerns about arrays-likes on the platform. Happy to work on this asap.

[14:51:43.0000] <TabAtkins>
Already doing it in #345, the thread I was indirectly referencing. ^_^

[14:58:35.0000] <tobie>
TabAtkins: Yes, I've been following along.

[15:04:15.0000] <tobie>
TabAtkins: what I meant is I'm happy to do the editing once the dust settles.

[15:04:24.0000] <TabAtkins>
ah, kk


2017-04-28
[18:50:28.0000] <luxio>
HTML forms should support more HTTP methods like PUT, and also support sending requests with a WWW-Authenticate header

[18:50:40.0000] <luxio>
Is there a reason these aren't implemented?

[18:53:15.0000] <luxio>
s/WWW-Authenticate/Authorization

[20:34:34.0000] <annevk>
Domenic: only indexed properties needed special considerations; bz suggested this setup

[20:35:20.0000] <annevk>
luxio: not something that enough sites would use and quite complex to add

[20:44:01.0000] <luxio>
annevk: Not enough sites use authentication?

[20:44:11.0000] <luxio>
Login is done with POST, and it definitely shouldn't - that's not what the POST method is for.

[20:45:37.0000] <Domenic>
annevk: I guess I don't remember what's different between indexed and named. And I vaguely remember the idea being that Window was ordinary (no exotic methods needed).

[20:48:01.0000] <annevk>
Domenic: indexed you need to do the array index dance for; and yeah, we lost ordinary

[20:48:22.0000] <annevk>
Domenic: we could move it if there's demand

[20:48:45.0000] <annevk>
luxio: not what I said

[20:49:28.0000] <luxio>
Perhaps I'm not understanding then - what did you mean to say?

[20:49:36.0000] <Domenic>
Kind of doubt it matters, but Chrome people were fixing related code and it felt strange to point them to different spec sections for named vs. indexed.

[21:02:28.0000] <annevk>
luxio: I meant what I said; you generalized from HTTP auth to auth in general

[21:03:41.0000] <luxio>
annevk: yeah I'm saying sites should use HTTP auth, but they're not able to do that with forms

[21:03:44.0000] <zewt>
"not what POST is for" sounds like you're interpreting the original concept of HTTP requests, which have very little relevance today

[21:04:00.0000] <luxio>
zewt: does HTTP not have standards anymore?

[21:04:31.0000] <luxio>
Why'd they lose relevance?

[21:04:52.0000] <zewt>
"that's not what the founding fathers intended" reasoning doesn't go very far

[21:05:53.0000] <luxio>
ignore the first question, is strawman

[21:06:01.0000] <luxio>
but why'd they change? makes more sense to have those different methods

[21:06:08.0000] <luxio>
instead of just clumping them all together into POST

[21:07:14.0000] <zewt>
things change based on how things are actually used, and how they develop over time, and the main things POST means is "don't blindly send this request a second time because it may have side-effects" and "this has a request body"

[21:08:58.0000] <zewt>
they're clumped together because POST is general purpose, so the protocol doesn't *need* to know special things about something being an authentication request or anything else

[21:10:04.0000] <zewt>
similarly you almost never see DELETE used in good protocols, since there's no reason at all for HTTP to know that something is abstractly deleting something ... it's just transporting a request

[21:11:05.0000] <not-an-aardvark>
I disagree, TCP is transporting a request. HTTP is designed to have semantics.

[21:14:02.0000] <not-an-aardvark>
Generally I would agree that using POST for a bunch of things is probably fine, but I wouldn't say there's "no reason at all for HTTP to know that something is abstractly deleting something". The information seems like it would be useful for caches, etc.

[21:14:22.0000] <zewt>
there's no benefit for HTTP knowing that something is a deletion (beyond telling clients/proxies not to repeat the request, which you get from POST), it's purely a holdover from before the usage of the protocol was well established

[21:15:14.0000] <not-an-aardvark>
But DELETE is idempotent and POST is not. Clients and proxies should repeat DELETE requests, but not POST requests.

[21:15:43.0000] <zewt>
DELETE is definitely not idempotent: if you create a file, send a DELETE request, then create a file in its place, sending that DELETE again is destroying information

[21:18:24.0000] <not-an-aardvark>
That would apply to PUT too -- if you send a PUT, and then send another request modifying the resource, and then resend the original PUT, you're destroying information.

[21:18:25.0000] <zewt>
(and more generally, filesystem-like things are much more complex than HTTP methods can represent--there's no RENAME which is just as destructive as DELETE if it overwrites a file)

[21:18:58.0000] <zewt>
that's the point, the notion of having a bunch of methods to let HTTP know all about your filesystem-like protocol you're putting on top of it doesn't work at all

[21:19:36.0000] <not-an-aardvark>
Idempotence doesn't apply anyway if someone is modifying the resource between your two requests.

[21:19:45.0000] <not-an-aardvark>
re. DELETE being idempotent, see https://tools.ietf.org/html/rfc7231#section-4.2.2

[21:20:21.0000] <not-an-aardvark>
Anyway I think this discussion is off-topic for this channel so maybe we should take it elsewhere

[21:20:22.0000] <zewt>
someone can always modify the resource between requests if you send a request twice.

[21:40:18.0000] <annevk>
Domenic: going to land SAB tests now, will probably land the PR and post later today

[03:15:43.0000] <annevk>
All done

[07:20:14.0000] <annevk>
Hmm, at some point Chrome starts returning null from the window getter

[07:20:25.0000] <annevk>
Cannot invoke open() on null

[07:28:32.0000] <annevk>
*Gossip Girl voice*: spotted, tobie created a local branch on web-platform-tests

[07:29:11.0000] <tobie>
What did I do?

[07:30:50.0000] <annevk>
tobie: I recall you saying you always create remote branches to emulate the experience of new contributors

[07:32:11.0000] <tobie>
annevk: yeah, used the Web interface to avoid a massive git fetch/rebase

[07:36:48.0000] <tobie>
annevk: iirc, GH used to let you choose to which repo you'd branch.

[07:37:34.0000] <tobie>
annevk: seems it no longer the case, so I got lazy. :)

[07:44:56.0000] <annevk>
It'll be remembered for future arguments 😛

[07:52:29.0000] <tobie>
that I get lazy? ;)

[13:04:27.0000] <Krinkle>
JakeA: igrigorik: Hey. Got a question about preload. As of this week, it's in use on Wikipedia for a simple use case (Main site logo). I'd like to use it more but wonder whether my use case is (or should be) supported.

[13:05:33.0000] <Krinkle>
We've got a small async script that bootstraps the environment. This url is unversioned and stuck in HTML static cache. That script response than is purged whenever we deploy new code and contains the versioned/immutable urls. I can't add preload for the versioned urls to the HTML response, but I could add them to the async script. I wonder if that's

[13:05:34.0000] <Krinkle>
supported: Link preload headers on javascript responses.

[13:05:53.0000] <Krinkle>
It would mean the browser can discover the url much earlier (not after the js download finishes, and executes async/deferred)

[13:06:03.0000] <Krinkle>
But I get the impression it's HTML only.

[13:06:29.0000] <Krinkle>
or rather, "page view" only, the same way Link-stylesheet works for image files in Firefox, but obviously only when you're viewing it as its own tab.

[14:04:33.0000] <Domenic>
Hmm service workers don't control third-party iframes, right?

[14:04:46.0000] <Domenic>
Otherwise I was hoping to use one to block the tracker requests from Disqus comments (see http://donw.io/post/github-comments/)

[14:06:59.0000] <TabAtkins>
Domenic: A service worker on yourself (first party)? No, they don't - they'd have to be installed on the third party in the first place to control the iframe.

[14:13:58.0000] <Domenic>
Yeah, so sad

[14:14:49.0000] <TabAtkins>
It seems like it would be a pretty major security violation to let your service worker control a third-party domain's loading. ^_^

[14:15:11.0000] <Domenic>
True

[14:16:07.0000] <wanderview>
someone did a thing about trying to use service workers to sanitize requests from a sandbox recently... SW isn't really designed for it

[14:19:31.0000] <wanderview>
Domenic: this thread: https://twitter.com/freddyb/status/841041787120693251

[16:29:57.0000] <Krinkle>
TabAtkins: Although, iirc, service workers do get to intercept/cache script/css/img/fetch requests from the page right? So it doesn't seem *that* weird if iframes would be allowed, too. It'd have to be opaque though.

[16:32:42.0000] <TabAtkins>
Krinkle: Now that we're talking about requests the iframe'd page is making, not the iframe request itself.

[16:32:50.0000] <TabAtkins>
*Note

[16:33:06.0000] <Krinkle>
TabAtkins: Ah, I see. Yeah, makes sense.


2017-04-29
[07:25:16.0000] <nickrathert>
Testing…


2017-04-30
[01:40:11.0000] <shmedia>
Hello

[01:41:03.0000] <shmedia>
Please help me out about how could I comment on html issues on github.

[01:45:49.0000] <shmedia>
Ah, the good ol' '90s, a lot of people, everybody away.. :)

[01:54:14.0000] <annevk>
shmedia: if you have a GitHub account you should be able to leave comments

[01:54:55.0000] <shmedia>
I do and I also logged in, but seem to be able only to vote comments up and down, not to reply

[01:54:58.0000] <annevk>
shmedia: I think in most of the world today is not a working day, so that's why it's a little quieter probably

[01:55:21.0000] <annevk>
shmedia: perhaps you're looking at an issue that was locked?

[01:57:01.0000] <annevk>
shmedia: anyway, I'd be surprised if you couldn't comment on a single issue, if that's true maybe send an email and I'll try to sort it out

[01:57:04.0000] <annevk>
shmedia: gotta go now

[01:57:07.0000] <shmedia>
Um, I'm here

[01:57:08.0000] <shmedia>
https://github.com/whatwg/html/issues/2271

[01:57:16.0000] <shmedia>
I will, thanks

[01:57:53.0000] <shmedia>
Um, strange..

[01:58:21.0000] <shmedia>
I just pulled the plug on my computer (lame yep) but now that I logged in again I can actually comment.. duh.. what a quirk

