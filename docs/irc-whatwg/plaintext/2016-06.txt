2016-06-01
[17:43:17.0000] <caitp>
you could always require the spambots to pick out photos of specific kinds of boats, to prove they're human

[17:43:59.0000] <caitp>
anyone willing to actually go through that crap would probably really, really want you do fix their spec issue

[17:44:00.0000] <Garbee>
"Pick the one called Boaty McBoatFace"

[06:16:43.0000] <zcorpan>
MikeSmith: are you interested in implementing https://github.com/whatwg/html/pull/1356 for v.nu? would be nice to sanity-check against the test cases

[06:17:06.0000] <MikeSmith>
/me looks

[06:17:50.0000] <MikeSmith>
I think that might a change to the parser but regardless yeah I would be willing to implement it for testing

[06:19:07.0000] <zcorpan>
cool

[07:20:54.0000] <whatwg>
Hey!

[07:21:32.0000] <whatwg>
First time at IRC

[08:18:23.0000] <FND>
hi - what's the current status of the Custom Element APIs; can https://github.com/w3c/webcomponents/pull/405 be considered final?

[08:20:07.0000] <FND>
if so, have polyfill maintainers indicated that they'll update? (AFAIK there's the Polymer-based stuff at webcomponents.org as well as https://github.com/WebReflection/document-register-element)

[08:22:57.0000] <Domenic>
FND: yes; custom elements have been upstreamed into HTML (and parts into DOM). See https://html.spec.whatwg.org/multipage/scripting.html#custom-elements. I believe Polymer is working on an updated polyfill, although some things are much harder to polyfill in the new version.

[08:24:07.0000] <FND>
thanks Domenic - can you elaborate on the polyfill difficulties; what will this mean for users?

[08:25:41.0000] <Domenic>
FND: well, they depend on ES6 class syntax, including aspects that are impossible to transpile in general. So I believe Polymer is investigating things like an extra transpiler pass or advising authors to add an extra line to their constructor (which they won't need in native implementations) in order to work with Polymer. I am not the expert here though;

[08:25:42.0000] <Domenic>
let me see if I can summon a Polymer person.

[08:27:25.0000] <FND>
tbh, I'm not actually that interested in Polymer-specific aspects, as I prefer to use vanilla custom elements (is that a term?)

[08:27:38.0000] <FND>
(though I realize their solution might well be generally applicable)

[08:27:39.0000] <Domenic>
Yeah, but they maintain a custom elements polyfill

[08:27:43.0000] <FND>
gotcha

[08:28:27.0000] <FND>
the ES6 dependency actually sounds promising in a way, as so far Babel and the polyfills (either of them) didn't cooperate

[08:28:58.0000] <FND>
(Babel injects some sort of class check that fails on HTMLElement, not sure about the details right now)

[08:29:17.0000] <Domenic>
Yeah, I think the polyfill will involve overwriting window.HTMLElement

[08:30:12.0000] <Domenic>
FND: OK, so it sounds like the best place to get info about the Polymer custom elements polyfill will be https://groups.google.com/forum/#!forum/polymer-dev or https://polymer-slack.herokuapp.com

[08:30:25.0000] <Domenic>
It sounds like they're still in the planning stages for the update

[08:30:39.0000] <FND>
roger, thank you

[08:41:57.0000] <FND>
FWIW, the Babel vs. polyfill issue is because polyfilled `HTMLElement` is not a constructor, which trips up Babel's inheritance check:

[08:42:02.0000] <FND>
if (typeof superClass !== "function" && superClass !== null) { throw new TypeError(‚Ä¶) }

[08:49:43.0000] <FND>
also, in case anyone cares: looks like WebReflection's polyfill _might_ be updated https://github.com/WebReflection/document-register-element/issues/58

[08:58:36.0000] <astearns>
trackbot, start meeting

[08:58:45.0000] <astearns>
/me grr

[09:55:01.0000] <nox>
Does Edge still do www.<actually typed>.com on ctrl-enter in address bar?

[12:40:38.0000] <smaug____>
I wonder... if page A opens a new window B and B adds event listener to its opener, and then B is closed

[12:41:01.0000] <smaug____>
GC can't (or at least shouldn't) collect anything from B

[12:41:15.0000] <smaug____>
(GC or CC or whatever UA has)

[13:28:58.0000] <Mek>
hmm, without looking at the spec or trying stuff, what would you expect the output of the following code to be: let c = new MessageChannel(); c.port1.onmessage = e => { console.log(e.data); c.port1.close(); }; c.port2.postMessage('foo'); c.port2.postMessage('bar');

[13:55:25.0000] <Domenic>
Mek: ignoring my "this is a trick question" instincts, I'd expect 'foo' only

[13:55:40.0000] <Domenic>
wellll

[13:55:43.0000] <Mek>
Domenic: both spec and implementation say to print both...

[13:55:50.0000] <Domenic>
it depends on whether onmessage is async

[13:55:56.0000] <Domenic>
if it's async i would expect both

[13:56:28.0000] <Domenic>
basically i expect .close() to be a "graceful close" that allows processing queued up messages

[13:56:41.0000] <Domenic>
i'm just unclear on whether .close() happens before or after 'bar' gets queued

[13:57:10.0000] <Mek>
for BroadcastChannel the spec seems to be the same (postMessage synchronously figures out the set of non-closed destinations, and then queues tasks to all of them), but the firefox implementation doesn't behave that way, so I'm trying to figure out if I should file a firefox or a spec bug...

[13:58:57.0000] <Domenic>
Mehhh... spec bug might get a broader audience of people with expectations, and as a bonus Firefox people will probably show up there anyway?

[13:59:41.0000] <Mek>
true...

[14:29:52.0000] <Krinkle>
Hm.. is "The" supposed to fall behind the main title? https://whatwg.org/specs/

[15:29:49.0000] <TabAtkins>
Krinkle: I doubt it. ^_^ Domenic annevk

[15:30:11.0000] <Domenic>
I dunno, looks intentional to me

[15:30:19.0000] <Domenic>
We can check with Hixie

[15:44:13.0000] <astearns>
it's just a creatively-kerned "ThWeeb"

[15:48:50.0000] <terinjokes>
is there a good way to find all the CSS properties that allow url?

[15:52:39.0000] <Domenic>
There's some CSS index, not sure if it's good for that purpose...

[15:53:05.0000] <Domenic>
terinjokes: https://drafts.csswg.org/indexes/#properties will get you halfway there, but yeah, not quite what you need

[15:53:29.0000] <Krinkle>
astearns: Domenic: http://i.imgur.com/DVxSe8z.png

[15:53:46.0000] <Domenic>
Krinkle: yes, that looks intentional to me. Deemphasizing the pronoun

[15:54:39.0000] <Krinkle>
k :)

[15:54:49.0000] <Krinkle>
It most certainly does not read as "ThWeeb" however.

[16:06:32.0000] <Hixie_>
it's intentional

[16:06:36.0000] <Hixie_>
also, i have no design sense

[16:06:37.0000] <Hixie_>
so...


2016-06-02
[17:09:50.0000] <laughinghan>
dbaron: thank you so much!! (re fixing :target to respect pushState)

[17:15:08.0000] <TabAtkins>
terinjokes: Yeah, we don't yet have a great index of property values. Coming in the nearish future.

[18:23:45.0000] <MikeSmith>
it would be great if somebody has time to post a comment correcting http://stackoverflow.com/questions/37521172/is-javascript-location-href-call-is-asynchronous/37521290#37521290 and/or post an actual right answer

[18:29:09.0000] <caitp>
i would if I could understand the spec conventions in html

[18:54:41.0000] <MikeSmith>
hey caitp

[18:55:07.0000] <MikeSmith>
what do the spec conventions in HTML have to do with it

[18:57:26.0000] <caitp>
not sure how else i'd produce an accurate answer for something that isn't really my domain

[18:57:52.0000] <caitp>
spec conventions would have to do with understanding the specified algorithm enough to answer correctl

[18:57:54.0000] <caitp>
y

[04:14:01.0000] <smaug____>
no zcorpan

[04:52:46.0000] <nox>
Can anyone try http://w3c-test.org/domparsing/createContextualFragment.html on Edge and tell me if 'Namespace generally shouldn't matter' and '<html> in a different namespace shouldn't be special' pass?

[05:58:15.0000] <mathiasbynens>
annevk: üëçüèª

[06:57:40.0000] <annevk>
mathiasbynens: are you here? üòä

[07:08:49.0000] <nox>
annevk: Ping?

[07:09:08.0000] <nox>
annevk: http://logs.glob.uno/?c=mozilla%23content&s=2+Jun+2016&e=2+Jun+2016#c378961 https://github.com/w3c/web-platform-tests/issues/3103

[07:11:22.0000] <annevk>
nox: that looks complicated

[07:11:29.0000] <nox>
Heh.

[07:11:34.0000] <nox>
annevk: Not urgent.

[07:11:47.0000] <nox>
annevk: But I think the spec contradicts the tests for this. Or the opposite.

[07:11:48.0000] <annevk>
nox: maybe zcorpan can help? I'm at a conf, back Monday

[07:11:53.0000] <nox>
annevk: Have fun.

[08:35:21.0000] <mathiasbynens>
annevk: unfortunately not ‚Äî watched the livestream though

[10:31:09.0000] <Domenic>
nox: those two pass, first test and last two tests fail

[10:31:26.0000] <nox>
Domenic: Ok thanks.

[10:34:47.0000] <smaug____>
does Chrome have something similar to FF's about:memory?

[10:35:06.0000] <nox>
Domenic: Btw, https://github.com/whatwg/html/issues/1376

[10:35:36.0000] <Domenic>
nox: yeah... too much to do...

[10:36:51.0000] <wanderview>
smaug____: maybe this? https://developer.chrome.com/devtools/docs/heap-profiling?csw=1

[10:38:55.0000] <smaug____>
thanks

[10:39:03.0000] <smaug____>
/me kicks chrome and its data: handling

[10:40:46.0000] <smaug____>
and now it crashed

[10:41:05.0000] <TabAtkins>
MikeSmith: I'm pretty sure that answer is correct - the navigation is async, so the page will continue executing things until it gets unloaded.

[10:43:32.0000] <MikeSmith>
TabAtkins: ah, OK


2016-06-03
[23:08:21.0000] <annevk>
TabAtkins: it'd be great if LINK ERROR came with a line number

[02:06:16.0000] <Ms2ger>
/me gives up on public-webapps

[02:45:33.0000] <annevk>
I was thinking the same

[02:46:50.0000] <jgraham>
Apparently I had already given up on it, but looking at the thread titles, I guess I have an inkling of why there might be a mass exodus

[03:02:42.0000] <smaug____>
/me wonders if there will be real world use for es symbols

[04:52:08.0000] <nox>
Should a placeholder disappear the moment its input is focused?

[04:56:38.0000] <annevk>
nox: up to UX

[04:57:01.0000] <nox>
annevk: No recommandation at all?

[04:57:46.0000] <nox>
annevk: Ain't that inconsistent with the spec for :placeholder-shown?

[04:58:14.0000] <annevk>
Hmm don't think so

[04:58:41.0000] <nox>
Err no, can't read.

[04:58:50.0000] <nox>
The spec for placeholder says "User agents should present this hint to the user, after having stripped line breaks from it, when the element's value is the empty string, especially if the control is not focused.", so yeah.

[06:53:16.0000] <astearns>
/me +1 to Ms2ger

[07:05:04.0000] <nox>
What's wrong with public-webapps.

[07:05:06.0000] <nox>
?*

[07:19:55.0000] <annevk>
signal/noise

[07:20:14.0000] <annevk>
astearns: üòä

[07:24:34.0000] <nox>
What's the TL;DR for 'is' in createElement()?

[07:29:54.0000] <caitp>
nox: probably like the "is" attribute, which afaik is necessary to avoid custom elements in tables from being orphaned (or similar things like that)?

[07:30:05.0000] <nox>
I see.

[07:45:06.0000] <Ms2ger>
nox, `is` is custom elements

[07:45:23.0000] <nox>
Ms2ger: Should I close the Servo issue?

[07:46:35.0000] <Ms2ger>
I just did :)

[07:47:02.0000] <nox>
Ms2ger: Thanks.

[09:00:38.0000] <caitp>
its too bad nobody wants to break the web to get rid of that orphaning crap entirely, since it's terrible ._.

[09:16:33.0000] <wanderview>
JakeA: your SW modules issue reminded me of this... do you think its a problem? https://github.com/slightlyoff/ServiceWorker/issues/894

[09:18:38.0000] <JakeA>
ah, yes, good spot

[10:15:26.0000] <TabAtkins>
annevk: It'd be great if *all* the errors came with line numbers. Haven't been able to crack that nut so far; it's apparently a well-known problem that lxml drops its line numbers.

[10:15:38.0000] <TabAtkins>
(I only get a line number for the <html> element; all the rest have None.)

[10:27:13.0000] <TabAtkins>
At this point I'm *this* close to just regex-parsing for opening tags in the original HTML and adding a line-number attribute manually.  On the upside, that would avoid me having to coordinate tons of "corrections" as I do various text-munging (mostly Markdown processing) before the HTML parser runs.

[10:34:53.0000] <TabAtkins>
Fuck it, I'm gonna do that (behind a command-line flag, so if it fucks anything up you can just not use it).

[11:16:02.0000] <annevk>
TabAtkins: lxml sounds sad

[11:16:09.0000] <TabAtkins>
It is and I hate it

[11:16:42.0000] <TabAtkins>
But it offers the only half-decent tree api that's html5lib-compatible and CSSParser-compatible.

[11:17:02.0000] <TabAtkins>
So I just soldier on, and reinvent most of DOM on top of it so I have a sane API to work with.

[13:04:05.0000] <hallvors>
annevk: still around? Someone is asking in https://bugzilla.mozilla.org/show_bug.cgi?id=289714 if an empty response labelled as XML should fire xhr.onerror ..

[13:04:44.0000] <hallvors>
I'm not sure but I guess I should RTFS ("read the fantastic spec" ;))

[13:19:37.0000] <annevk>
hallvors: not sure

[13:19:56.0000] <annevk>
hallvors: don't think so

[13:20:04.0000] <hallvors>
annevk: I've just written a comment, hope it makes enough sense

[13:20:23.0000] <annevk>
hallvors: broken XML does not fire it either

[13:21:00.0000] <hallvors>
Indeed, that's what I figured out

[13:22:11.0000] <annevk>
hallvors: looks good, don't think we want to change DOMParser at this point either

[13:22:40.0000] <annevk>
hallvors: pretty sure web depends on parseerror element and is part of spec

[13:23:02.0000] <hallvors>
really? which spec?

[13:23:35.0000] <hallvors>
imho parsererror elements are just weird

[13:23:38.0000] <hallvors>
:-p

[13:24:15.0000] <hallvors>
and should die :-]

[13:33:59.0000] <annevk>
hallvors: DOM Parsing

[13:37:19.0000] <caitp>
if you killed everything weird that should die about the web, there might not be much of a web left

[13:45:58.0000] <hallvors>
caitp: lol

[13:46:57.0000] <hallvors>
annevk: then it gets a bit inconsistent - if we mandate the odd parsererror document for a DOMParser, but do NOT want it for XHR responseXML..

[13:47:41.0000] <hallvors>
thought whatever..

[13:53:18.0000] <annevk>
hallvors: yeah, jl complained about this too in the good old days

[13:53:52.0000] <annevk>
hallvors: no layering or consistency üò¢

[13:54:31.0000] <annevk>
But yeah, just have to suck it up and do a better job going forward

[14:50:47.0000] <Munter>
annevk: I've tried to sum up the content addressable caching discussions in a blog post, since I found it hard to find all the relevant information in an easily accessible way: https://mntr.dk/2016/content-addressable-browser-caching/

[15:48:57.0000] <nox>
I think the spec for querySelectorAll is wrong.

[15:49:34.0000] <TabAtkins>
nox: How so?

[15:49:40.0000] <nox>
It seems to me that element.querySelectorAll("*") should include element, but user agents don't.

[15:52:37.0000] <nox>
TabAtkins: Specifically, the scope-filtered method says to filter to the scoping root and its descendants.

[15:52:52.0000] <TabAtkins>
yup, you're right. as specified it should indeed include element.

[15:53:04.0000] <TabAtkins>
But that's not the intention nor does it match impls. So it's a DOM bug.

[15:53:10.0000] <nox>
TabAtkins: Checked in Safari and Firefox.

[15:54:51.0000] <nox>
Chrome agrees too.

[15:55:07.0000] <TabAtkins>
File a bug on DOM so annevk can fix it

[15:56:35.0000] <nox>
Yeah will do tomorrow.

[15:56:45.0000] <nox>
Reviewing the failing tests in Servo.

[15:56:53.0000] <nox>
(WPT agrees with UAs already.)

[16:06:45.0000] <TabAtkins>
did it for you

[16:55:13.0000] <nox>
TabAtkins: Thanks!

[16:59:48.0000] <TabAtkins>
nox: "will do tomorrow" is usually code for "i've already forgotten about it", at least when I say it ^_^


2016-06-04
[17:00:12.0000] <nox>
Heh. Nah I planned to do it, but thanks anyway I'm happy to not have things to do. :D

[06:31:24.0000] <nox>
I think I found a bug in the event dispatcher in the spec.

[06:31:44.0000] <nox>
Does the spec ever says to reset the stop propagation flag once dispatch is done?

[06:32:31.0000] <nox>
Maybe it's a test and Firefox bug though.

[06:32:38.0000] <nox>
http://w3c-test.org/dom/events/Event-dispatch-multiple-stopPropagation.html Can someone check that on IE11 and Edge?

[06:32:52.0000] <nox>
Safari, Chrome and Servo pass it,

[06:32:56.0000] <nox>
err, fail it.

[06:33:01.0000] <nox>
Firefox is the only one to pass it so far.

[06:35:02.0000] <Domenic>
nox: that is a known open bug yeah. There are open bugs on wpt and on dom for it

[06:35:21.0000] <Domenic>
The spec and wpt don't match, which is bad


2016-06-05
[20:30:48.0000] <MikeSmith>
about the data at https://www.chromestatus.com/features on implementation status in other UAs, does anybody know wherethe source for that data maintained?

[04:26:28.0000] <joynal>
Hello everyone

[05:43:40.0000] <espadrine>
Hi, is there a non-legacy reason for input.files to be readonly?

[05:46:45.0000] <espadrine>
Maybe the idea is for it to be allowed to append File objects once input.files no longer yields a FileList, but an Array instead?

[05:52:51.0000] <nox>
I think I found another bug with Range.createContextualFragment.

[05:53:17.0000] <nox>
Step 4 says to unmark all scripts in fragment node as already started, so that when they get executed when inserted in a document afterwards

[05:53:48.0000] <nox>
But https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model:prepare-a-script-4 says that we should only prepare scripts when connecting them in a tree if it isn't marked as parser-inserted.

[05:54:02.0000] <nox>
Step 4 should probably say that they should be marked as parser-inserted again.

[05:54:32.0000] <nox>
Because step 7 of "prepare" says 'If was-parser-inserted is true, then flag the element as "parser-inserted" again, and set the element's "non-blocking" flag to false.'.

[07:42:34.0000] <espadrine>
Looks like input.files is not actually readonly on Chrome.

[07:42:44.0000] <espadrine>
It still is conformant on Firefox, though.

[08:26:40.0000] <annevk>
espadrine: can you construct a FileList somehow?

[08:27:01.0000] <annevk>
espadrine: there are various open issues on this, iirc

[08:27:46.0000] <espadrine>
annevk: Not through a constructor, although you can fetch one from a different input element or from a drop zone.

[08:29:04.0000] <espadrine>
I‚Äôd welcome a link to an issue; I tried searching for one.

[08:30:17.0000] <annevk>
espadrine: against IDL perhaps? On my phone, so can't really search well

[11:13:35.0000] <silverdust>
boolean attributes are best without values ain't it? Can I get a reference link to prove this too?

[11:58:02.0000] <nox>
silverdust: http://heycam.github.io/webidl/#dfnReturnLink-2

[11:58:23.0000] <nox>
Oh wait, attributes, I read argument.

[12:01:16.0000] <espadrine>
re: input.files, I made an issue https://github.com/whatwg/html/issues/1391

[12:51:44.0000] <silverdust>
yes attributes. Is there any good reason to assign values to attributes like required, checked? Perhaps some browser support?

[15:34:13.0000] <Domenic>
silverdust: https://html.spec.whatwg.org/multipage/infrastructure.html#boolean-attributes might help.

[15:34:38.0000] <Domenic>
silverdust: there is no reason to require values; you can use the name of the attribute as a value if you want but it does nothing different than the empty string or omitting the value entirely

[15:39:23.0000] <silverdust>
Thanks Domenic


2016-06-06
[17:16:13.0000] <gsnedders>
silverdust: I think something like IE3 or NN3 required the attribute value in full; regardless of what, we're talking twenty year old browsers here

[23:27:48.0000] <annevk>
Pro tip: don't cut your index finger

[23:28:16.0000] <annevk>
Such a massive pain with the trackpad

[23:33:13.0000] <MikeSmith>
annevk: use the other hand‚Ä¶

[23:34:03.0000] <annevk>
MikeSmith: for some reason I'm used to use my right hand for this, and even though I'm left-handed that feels very unnatural

[23:34:17.0000] <annevk>
MikeSmith: so I'll use my middle finger to point at things

[02:21:35.0000] <annevk>
https://djcordhose.github.io/flow-vs-typescript/2016_hhjs.html is pretty interesting

[02:21:49.0000] <annevk>
Didn't really know Facebook was also into the typing game these days

[02:30:02.0000] <nox>
Is Flow from Facebook?

[02:30:27.0000] <nox>
Are they unable to name any programming language with something else than a common word?

[02:31:07.0000] <annevk>
WHATWG is guilty of that too, so...

[02:31:24.0000] <nox>
Oh? Which languages? I'm curious.

[02:31:42.0000] <nox>
I was thinking of their ML-like language named Reason.

[02:31:57.0000] <annevk>
Not languages, but say "Fetch", "Encoding", "Fullscreen", "Notifications", "Streams"

[02:32:30.0000] <nox>
Mmmh true. I guess I'm less surprised because they are specs.

[02:33:26.0000] <annevk>
I think generally picking a word is better than picking many words, context is usually sufficient

[02:33:42.0000] <annevk>
Also, dude, Mozilla named its language Rust

[02:34:02.0000] <Ms2ger>
Uh,"Go"?

[02:43:45.0000] <nox>
annevk: Less common than reason and flow. :)

[03:08:06.0000] <jgraham>
Yeah "Rust Programming" seems reasonably easy to search, "Flow Programming" less so

[05:02:59.0000] <nox>
https://github.com/w3c/DOM-Parsing/issues/15

[05:04:55.0000] <nox>
Also, filed https://github.com/whatwg/html/issues/1394 again.

[05:56:18.0000] <smaug____>
/me kicks blink and its silly data: handling

[06:10:17.0000] <smaug____>
hrm, I added a comment to a pull :/

[10:29:45.0000] <annevk>
Very happy https://github.com/tc39/ecma262/issues/573 is happening even though I've little to contribute

[10:30:15.0000] <annevk>
Just feels so good to finally get to the bottom of certain engine disputes, or at least make some progress on them

[10:36:17.0000] <rodneyre_>
ShadowDOM v1 removed Shadow piercing combinators - http://hayato.io/2016/shadowdomv1/#shadow-piercing-combinators - but https://drafts.csswg.org/css-scoping/#deep-combinator still lists >>> in the static profile -- so what is it now?

[10:42:02.0000] <annevk>
rodneyre_: I think there's an open issue on this

[10:42:09.0000] <annevk>
rodneyre_: and some disagreement

[10:42:14.0000] <annevk>
rodneyre_: see the one on /deep/

[10:44:35.0000] <TabAtkins>
rodneyre_: The combinator is *very intentionally* still in CSS in the static profile only (which only covers things like querySelector(), *not* stylesheets).

[10:45:35.0000] <rodneyre_>
but it won't select into closed shadows, correct?

[10:46:54.0000] <TabAtkins>
Closed shadows dont' exist yet. (Except handwavey in the form of built-in elements that clearly contain internal structure.) But based on what I think is going to happen, no, it won't select in. It won't give any power that you can't get from just poking via DOM APIs.

[10:47:42.0000] <Domenic>
closed shadows exist

[10:48:00.0000] <TabAtkins>
Oh really? News to my ears, but I'm a bit out of the loop.

[10:48:13.0000] <TabAtkins>
I've stayed in touch *just* enough to figure out what needs to happen on the CSS side.

[10:48:26.0000] <Domenic>
yeah, they were necessary to get consensus back when that happened.

[10:48:33.0000] <rodneyre_>
I mean, don't get me wrong. I'd happily do away with that, if we get some way to disable focusable elements within a shadow

[10:49:31.0000] <annevk>
TabAtkins: I don't think there's agreement on implementing it for querySelector() at this point

[10:50:08.0000] <TabAtkins>
It's the plan of record to the best of my knowledge, and no one's contradicted it yet.

[10:50:22.0000] <TabAtkins>
It would be pretty fucking stupid to not have it, given that you can just poke thru via the DOM api.

[10:50:23.0000] <annevk>
TabAtkins: see https://github.com/w3c/webcomponents/issues/78

[10:51:05.0000] <TabAtkins>
Requiring a .query(...).map(x=>x.shadowRoot).query(...) would be dumb as hell just to avoid .query(... >>> ...)

[10:51:27.0000] <annevk>
It seems fine for a first iteration

[10:51:34.0000] <TabAtkins>
(It's actually much more difficult to faithfully implement, but even this pretend version is stupid.)

[10:51:37.0000] <annevk>
It's not even clear you should iterate that way as rniwa points out

[11:11:11.0000] <Domenic>
Does anyone know the right contact for Gecko for BroadcastChannel? Would be good to get them to weigh in at https://github.com/whatwg/html/issues/1371

[11:11:40.0000] <annevk>
Baku

[11:11:54.0000] <annevk>
bakulf iirc?

[11:12:00.0000] <annevk>
On GH

[11:13:01.0000] <Domenic>
https://github.com/bakulf ?

[11:23:58.0000] <wanderview>
Domenic: I pinged him in IRC as well, although I think this is towards the end of the work day for him

[11:43:56.0000] <annevk>
Domenic: yeah

[13:07:29.0000] <zcorpan>
annevk: what happened to your finger?

[13:09:12.0000] <zcorpan>
hmm i pictured you had it cut off entirely but i suppose that is not necessarily the case

[13:25:39.0000] <TabAtkins>
I suspect he just cut it, and bandaids make it hard to use touchpads. ^_^

[13:37:52.0000] <zcorpan>
just need an outer layer of bacon to fix it üëå

[13:46:14.0000] <TabAtkins>
then you get a greasy screen. d- fix

[14:56:25.0000] <astearns>
kickstarter: conductive bandaids for touchscreen use

[14:58:30.0000] <jgraham>
astearns: They already exist

[14:59:12.0000] <astearns>
ugh, of course they do

[15:00:55.0000] <jgraham>
Your dream of being the Zuckerberg of home medicine will have to be put on hold


2016-06-07
[17:26:08.0000] <wanderview>
Domenic: in streams section 3.9.5 (ReadableStreamDefaultControllerEnqueue), does step 5.d.ii mean to rethrow the exception?  I'm not really familiar with the "abrupt cancellation" terminology

[17:26:36.0000] <wanderview>
Domenic: woops... mean step 5.b.ii.2

[17:26:45.0000] <wanderview>
or I guess its the same usage there

[17:37:35.0000] <Domenic>
wanderview: yep, that's the idea.

[17:38:00.0000] <wanderview>
Domenic: I thought I was finally starting to understand spec language... and then I have to go learn ES spec language :-)

[17:38:37.0000] <Domenic>
wanderview: it builds character ;)

[17:38:47.0000] <wanderview>
it builds something

[21:52:37.0000] <howdoi>
what was the exact reason why Object.observe brought down?

[22:11:41.0000] <MikeSmith>
howdoi: https://esdiscuss.org/topic/an-update-on-object-observe

[22:17:39.0000] <howdoi>
Thanks MikeSmith

[00:28:49.0000] <Ms2ger>
hallvors, ping

[00:29:23.0000] <hallvors>
Ms2ger: pong

[00:29:42.0000] <Ms2ger>
hallvors, trying to figure out where the spec backs http://w3c-test.org/XMLHttpRequest/send-content-type-charset.htm

[00:29:52.0000] <Ms2ger>
Especially the "charset given but wrong, fix it" ones

[00:31:36.0000] <hallvors>
Let me investigate a bit - we may have to ping annevk too, I think several of those assertations were written by him originally

[00:32:45.0000] <annevk>
Ms2ger: anything not backed by step 4 of https://xhr.spec.whatwg.org/#the-send()-method is likely wrong

[00:33:08.0000] <Ms2ger>
Oh wait

[00:33:11.0000] <annevk>
Ms2ger: it seems to be testing that from skimming it and those requirements might well have been tweaked a little bit since I wrote that test (or part of it)

[00:33:41.0000] <Ms2ger>
Ah, I seem to have missed the last paragraph

[00:34:02.0000] <annevk>
ok

[00:34:51.0000] <hallvors>
I was about to point to step 4, last para too :)

[00:35:26.0000] <Ms2ger>
Though I'm not sure that requires the exact string values in the test

[00:35:34.0000] <hallvors>
/me notes that even the test's meta data is correct

[00:36:06.0000] <hallvors>
for once :) (lots of meta data is outdated and I have ambitious plans for fixing that)

[00:37:08.0000] <Ms2ger>
Someone want to reply to https://github.com/w3c/web-platform-tests/issues/3121?

[00:39:02.0000] <MikeSmith>
zcorpan: about experimenting with https://github.com/whatwg/html/issues/1351 ‚ÄúRemove parse error for dashes in comments‚Äù, do we want to experiment with also dropping the warning ‚ÄúThe document is not mappable to XML 1.0 due to two consecutive hyphens in a comment.‚Äù, or do you want to continue to emit that?

[00:40:54.0000] <hallvors>
annevk - I mostly agree with the 3121 issue, but I think you defended the test when I brought it up earlier ("be strict in what you send" etc). Leaving to you to reply ;)

[00:41:21.0000] <zcorpan>
MikeSmith: i think we should keep that, at least for now. if the people using the validator don't care about those warnings then all of them should be turned off by default, not just for -- in comments

[00:41:32.0000] <MikeSmith>
ok

[00:41:37.0000] <zcorpan>
imho

[00:41:43.0000] <MikeSmith>
yeah

[00:42:06.0000] <MikeSmith>
zcorpan: OK so FYI take a look at the adjustDoubleHyphenAndAppendToStrBufAndErr function at https://github.com/validator/htmlparser/blob/master/src/nu/validator/htmlparser/impl/Tokenizer.java#L922

[00:43:25.0000] <MikeSmith>
and https://github.com/validator/htmlparser/blob/master/src/nu/validator/htmlparser/impl/Tokenizer.java#L476

[00:43:36.0000] <MikeSmith>
I guess by default it does ALTER_INFOSET

[00:44:08.0000] <MikeSmith>
ah wait though, if that were true it wouldn‚Äôt be emitting the warning

[00:44:56.0000] <MikeSmith>
will need to look at the checker code further to see what it is setting

[00:45:27.0000] <zcorpan>
maybe the validator doesn't use the parser's default

[00:45:36.0000] <MikeSmith>
yeah I think it must not

[00:45:42.0000] <MikeSmith>
anyway, the simplest change would of course be just to drop the errConsecutiveHyphens(); call at line 924

[00:45:54.0000] <annevk>
Ms2ger: hallvors: I left a reply

[00:46:48.0000] <MikeSmith>
zcorpan: but in looking at that code, I could also just move the errConsecutiveHyphens() call into the ALLOW and FATAL cases

[00:47:31.0000] <MikeSmith>
so that for ALTER_INFOSET case it would just silently alter the infoset, with no error and no warning

[00:48:08.0000] <zcorpan>
MikeSmith: don't we still want to use ALLOW in the checker?

[00:48:12.0000] <MikeSmith>
I guess in the context of the checker it doesn‚Äôt really matter much since nothing actually consumes the parse tree it creates

[00:48:40.0000] <zcorpan>
to get the warning if nothing else

[00:48:44.0000] <MikeSmith>
OK

[00:49:03.0000] <MikeSmith>
so that is what I will do for not

[00:49:06.0000] <MikeSmith>
*for now

[00:49:14.0000] <MikeSmith>
and push it to https://checker.html5.org/

[00:50:13.0000] <zcorpan>
MikeSmith: what about <!-- <!-- -->

[00:51:15.0000] <annevk>
https://github.com/w3c/webcomponents/issues/496#issuecomment-223529711 o_O

[00:56:51.0000] <zcorpan>
MikeSmith: https://github.com/validator/htmlparser/blob/master/src/nu/validator/htmlparser/impl/Tokenizer.java#L2602 was also moved to be an error when seeing ">" in COMMENT_END_BANG instead

[00:58:43.0000] <MikeSmith>
zcorpan: what about it? we want to try to dropping that error too?

[00:59:33.0000] <zcorpan>
MikeSmith: it's a new error, that won't be reported otherwise

[01:00:03.0000] <MikeSmith>
oh

[01:00:18.0000] <MikeSmith>
we we want to *add* new reporting for it?

[01:00:27.0000] <MikeSmith>
/me looks back that the issue discussion

[01:00:29.0000] <zcorpan>
MikeSmith: https://github.com/whatwg/html/pull/1356/commits/b4d672b4976740cea236f197cc340a066cf0ac6e

[01:04:56.0000] <MikeSmith>
zcorpan: https://github.com/validator/htmlparser/blob/master/src/nu/validator/htmlparser/impl/Tokenizer.java#L2602 is for --! right?

[01:05:02.0000] <MikeSmith>
how is that relevant?

[01:06:53.0000] <zcorpan>
right. i suppose it's a separate thing but i changed it in the PR, because i didn't see any reason to disallow <!-- --! -->

[01:08:31.0000] <MikeSmith>
ok

[01:08:53.0000] <zcorpan>
sorry this was not a one-line change :-)

[01:15:06.0000] <MikeSmith>
heh

[01:15:28.0000] <MikeSmith>
OK will need to set aside more time to write it up

[01:15:56.0000] <zcorpan>
üëç

[01:26:03.0000] <Manishearth>
annevk: https://fetch.spec.whatwg.org/#cors-preflight-fetch-0

[01:26:37.0000] <Manishearth>
annevk: from what it says there, if you have a header `content-type: x-pony`, which is not in accesscontrolallowheaders, it should error, yes?

[01:27:11.0000] <Manishearth>
because http://web-platform.test:8000/XMLHttpRequest/send-redirect-to-cors.htm seems to think otherwise?

[01:27:54.0000] <annevk>
Manishearth: yeah, that's not a CORS-safelisted request-header

[01:28:35.0000] <Manishearth>
so is the test wrong? O.o

[01:28:44.0000] <Manishearth>
it somehow passes in firefox

[01:28:45.0000] <Manishearth>
hold on

[01:30:20.0000] <Manishearth>
annevk: ok, not sure what's going on, this test should fail

[01:30:40.0000] <Manishearth>
(it fails in servo, but not firefox)

[01:31:31.0000] <annevk>
Manishearth: looking at corsenabled.py I'm not sure why it should fail

[01:32:03.0000] <Manishearth>
annevk: as in?

[01:32:11.0000] <Manishearth>
annevk: we send a content-type: x-pony header with it

[01:32:34.0000] <Manishearth>
so the preflight fetch should return a network error, since that's not an allowed header

[01:32:54.0000] <annevk>
Oh yes, and it seems Firefox doesn't even issue a preflight here

[01:33:03.0000] <annevk>
Unless the network console cannot be trusted

[01:33:27.0000] <Manishearth>
annevk: I just assumed that the preflight isn't put in the network console

[01:35:09.0000] <annevk>
I hope that's not true

[01:35:10.0000] <Manishearth>
annevk: oh, from the wptserve log -- it doesn't

[01:35:21.0000] <Manishearth>
annevk: it should be issuing a preflight, right?

[01:35:43.0000] <annevk>
Yeah, I think so, otherwise you could use a redirect to circumvent preflights...

[01:35:54.0000] <annevk>
Which seems to be what is happening here

[01:36:13.0000] <Manishearth>
huh

[01:36:21.0000] <Manishearth>
chrome fails these tests

[01:36:24.0000] <Manishearth>
but not the way servo fails

[01:36:34.0000] <annevk>
Yeah, also in a weird way

[01:36:45.0000] <annevk>
/me curses redirects

[01:36:49.0000] <Manishearth>
chrome, too, doesn't do preflights

[01:37:12.0000] <Manishearth>
brb filing bug on chrome to make tons of bounty monies

[01:37:52.0000] <Manishearth>
chrome doesn't preflight, but it *does* scrub the headers

[01:37:57.0000] <annevk>
Manishearth: can you file one against Firefox too and against wpt?

[01:38:06.0000] <Manishearth>
right

[01:38:18.0000] <annevk>
Not the best way to start the day

[01:38:24.0000] <Manishearth>
heh :)

[01:38:34.0000] <Manishearth>
well, for once the failure isn't servo's fault :)

[01:38:50.0000] <Manishearth>
annevk: chrome runs wpt too, right?

[01:39:10.0000] <annevk>
I'm not sure at what stage they are

[01:39:29.0000] <Manishearth>
annevk: given that no browser does this properly, I assume this isn't a security bug (for firefox?)

[01:39:53.0000] <annevk>
Manishearth: it kinda is, but we just discussed it in public

[01:40:06.0000] <annevk>
Manishearth: copy Jonas Sicking

[01:40:11.0000] <Manishearth>
yeah

[01:44:37.0000] <Manishearth>
annevk: https://github.com/w3c/web-platform-tests/issues/3123

[01:45:26.0000] <Manishearth>
should we mark it an easy bug?

[01:47:25.0000] <annevk>
Manishearth: probably not, since we want to keep some variant of that test around

[01:47:42.0000] <annevk>
Manishearth: we just need to change the pass conditions

[01:47:53.0000] <annevk>
Manishearth: and I guess we want a new test for what the old test actually wanted to test

[01:48:32.0000] <Manishearth>
annevk: right, the current test should check for a network error

[01:52:37.0000] <Manishearth>
annevk: how do you recommend I write a testcase for this?

[01:56:26.0000] <annevk>
Manishearth: the existing testcase can be changed to invoke assert_unreached() from xhr.onload and test.done() from xhr.onerror

[01:56:40.0000] <Manishearth>
annevk: but that needs wpt

[01:56:47.0000] <Manishearth>
I want to write one that doesn't need wpt

[01:56:53.0000] <Manishearth>
trying to write a netcat test case rn

[01:57:15.0000] <annevk>
Manishearth: what are you looking to test?

[01:57:36.0000] <Manishearth>
annevk: that the preflight doesn't happen

[01:57:42.0000] <Manishearth>
for the gecko/chrome bug

[01:58:29.0000] <annevk>
Manishearth: you could test that if a preflight did happen, the server would reply something bogus

[02:08:15.0000] <Manishearth>
annevk: ok, now I'm not sure what's happening

[02:08:26.0000] <Manishearth>
I am getting an OPTIONS request with http://manishearth.anapnea.net/tmp/test.html

[02:08:56.0000] <Manishearth>
I don't get one if there are no headers, but that's ok

[02:09:06.0000] <Manishearth>
on firefox, that is

[02:09:37.0000] <annevk>
Manishearth: what if you set Content-Type instead?

[02:11:49.0000] <Manishearth>
annevk: no OPTIONS, only GET

[02:12:03.0000] <annevk>
Manishearth: there you go

[02:12:08.0000] <annevk>
Manishearth: and without redirect?

[02:12:41.0000] <annevk>
Manishearth: I guess maybe the check post-redirect is not the same check as normal, which would be pretty bad architecture

[02:13:47.0000] <Manishearth>
annevk: both firefox and chrome skip OPTIONS when there are no strange headers, even on a direct XHR

[02:13:56.0000] <Manishearth>
and they replace POST with GET

[02:14:14.0000] <Manishearth>
in both cases

[02:14:37.0000] <Manishearth>
the only time I get OPTIONS is when I add a strange header

[02:15:03.0000] <Manishearth>
this happens even without redirects

[02:15:25.0000] <Manishearth>
cookies are scrubbed, too

[02:15:30.0000] <annevk>
So basically Firefox does not restrict Content-Type: unknown/type?

[02:15:36.0000] <Manishearth>
oh, not tried that

[02:15:39.0000] <annevk>
Sure, no cookies is normal

[02:15:52.0000] <annevk>
Replacing POST with GET based on a redirect is normal

[02:15:58.0000] <annevk>
That's all per spec

[02:16:12.0000] <Manishearth>
annevk: yeah, it does not restrict

[02:16:18.0000] <annevk>
o_O

[02:16:23.0000] <Manishearth>
chrome just scrubs the content-type header if it's strange

[02:16:39.0000] <annevk>
Pffff

[02:17:06.0000] <Manishearth>
no, chrome unconditionally scrubs that header

[02:17:25.0000] <Manishearth>
annevk: wait I goofed up

[02:17:27.0000] <Manishearth>
hold on

[02:17:47.0000] <annevk>
ooh

[02:18:08.0000] <Manishearth>
on direct POST, with content type text/plain

[02:18:19.0000] <Manishearth>
firefox keeps it a post

[02:18:24.0000] <Manishearth>
and keeps the content

[02:18:49.0000] <Manishearth>
if the content-type is strange, it gives an OPTIONS

[02:19:00.0000] <annevk>
Okay, so only with a redirect?

[02:19:23.0000] <Manishearth>
chrome has the same behavior for direct

[02:20:29.0000] <Manishearth>
on redirects

[02:20:34.0000] <Manishearth>
all POSTs become GETs

[02:20:43.0000] <Manishearth>
good content-types are let through

[02:20:48.0000] <Manishearth>
firefox lets through bad content-types

[02:20:52.0000] <Manishearth>
chrome scrubs them

[02:21:25.0000] <annevk>
So both those behaviors are wrong

[02:21:35.0000] <Manishearth>
but not dangerous

[02:21:37.0000] <annevk>
POST -> GET is fine, for 301/302 (not the others)

[02:22:24.0000] <Manishearth>
annevk: why is not sending a preflight ok?

[02:22:56.0000] <annevk>
Manishearth: that part is not okay

[02:23:08.0000] <Manishearth>
annevk: even when there is a text/plain content type?

[02:23:08.0000] <annevk>
Manishearth: scrubbing is not okay either

[02:23:23.0000] <annevk>
Manishearth: text/plain is safelisted

[02:23:37.0000] <Manishearth>
annevk: yeah, but spec-wise that check happens *after* the preflight, no?

[02:23:48.0000] <annevk>
Manishearth: no

[02:24:05.0000] <hallvors>
I think the short-term fix for the test suite bug is to set headers allowed to *

[02:24:20.0000] <annevk>
Manishearth: we check for safelisted request-headers and only if they're outside that range we preflight

[02:24:21.0000] <hallvors>
But given the details here we clearly need better tests

[02:24:32.0000] <Manishearth>
huh

[02:24:35.0000] <hallvors>
so we can catch the implementations that are currently not quite doing the right thing

[02:24:37.0000] <Manishearth>
okay, so servo has a bug here too

[02:24:40.0000] <annevk>
hallvors: that's not a good fix

[02:24:49.0000] <Manishearth>
you get a bug. you get a bug. everybodygetsabug!

[02:24:53.0000] <annevk>
hallvors: first of all, * is a new feature for those headers so won't work

[02:25:35.0000] <hallvors>
ah..so we're having this discussion because the spec is changing? Got it..

[02:25:41.0000] <annevk>
hallvors: we could add "content-type" to the list, but apparently the preflight is not even happening, so we also need some tests that set other headers

[02:25:46.0000] <annevk>
hallvors: noooo

[02:26:15.0000] <annevk>
hallvors: we're having this discussion because implementations have bugs with the spec as written before wildcarding became a thing for header names

[02:26:35.0000] <Manishearth>
annevk: btw, where in the spec does it mention POST -> GET for redirects?

[02:26:43.0000] <hallvors>
well, we need better tests - so we can use Manishearth's bug for that

[02:26:44.0000] <Manishearth>
wait no nv

[02:26:46.0000] <Manishearth>
nvm

[02:27:19.0000] <annevk>
Manishearth: in the HTTP-redirect section

[02:27:26.0000] <Manishearth>
yeah, found it

[02:27:42.0000] <annevk>
Manishearth: fairly recent change (HTTP calls it out a bit, but not normative enough)

[02:27:50.0000] <hallvors>
BTW to all in #whatwg - there's a request for more tests here, should be trivial to add: https://github.com/w3c/web-platform-tests/issues/3124 - would be great if someone could jump in and add stuff :)

[02:28:32.0000] <Manishearth>
annevk: yeah, there's even servo code handling that, wonder why it didn't get hit

[02:28:42.0000] <Manishearth>
wait, no, it *did* get hit

[02:28:42.0000] <Manishearth>
hm

[02:38:31.0000] <Manishearth>
annevk: why are we nitpicky baout content-type, btw?

[02:38:36.0000] <Manishearth>
*about

[02:38:44.0000] <Manishearth>
there is no content anyway, that gets scrubbed

[02:39:57.0000] <Manishearth>
also, why only 301/302/303 for making the method GET?

[02:41:10.0000] <annevk>
Manishearth: same-origin policy violations for Content-Type was restricted to <form> historically

[02:41:56.0000] <Manishearth>
ah

[02:42:01.0000] <Manishearth>
annevk: but form doesn't use fetch?

[02:42:03.0000] <annevk>
Manishearth: only 301/302 change POST to GET for historical reasons, mostly because browsers maybe mistakenly did that and sites relied on it

[02:42:16.0000] <annevk>
Manishearth: 303 changes to GET always because that's just what it does

[02:42:25.0000] <Manishearth>
annevk: what happens for the other redirect methods?

[02:42:29.0000] <Manishearth>
or are those the only 3 ?

[02:42:34.0000] <annevk>
Manishearth: <form> uses navigate which uses fetch, but it doesn't use "cors", it uses "navigate"

[02:42:44.0000] <Manishearth>
oh, navigate uses fetch now?

[02:42:47.0000] <annevk>
Manishearth: 307/308 preserve the method

[02:42:55.0000] <annevk>
Manishearth: more or less

[02:43:08.0000] <Manishearth>
annevk: what about script/link/etc?

[02:43:10.0000] <annevk>
Manishearth: there's a lot of work to be done still, hopefully over the summer

[02:43:16.0000] <annevk>
Manishearth: yeah those all use Fetch

[02:43:18.0000] <Manishearth>
oh ok

[02:43:21.0000] <Manishearth>
oh, really?nice

[02:43:33.0000] <annevk>
Yeah, that happened last year I think

[02:43:46.0000] <Manishearth>
I saw some changes but wasn't sure if it was everywhere yet

[02:45:22.0000] <hallvors>
annevk: another XHR question in https://bugzilla.mozilla.org/show_bug.cgi?id=918764 - about letters (not) allowed in script-set headers

[02:46:13.0000] <annevk>
hallvors: there's a couple of spec issues on that

[02:46:14.0000] <hallvors>
I'm just skimming bugmail - is RFC 7230 too strict for the web, or is the test misinterpreting it? If all browsers fail the test is probably wrong..

[02:46:25.0000] <annevk>
hallvors: might be too strict

[02:46:45.0000] <hallvors>
a few links in the bug report would be great :)

[02:47:57.0000] <Manishearth>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=1278493

[02:51:18.0000] <annevk>
hallvors: done

[02:51:35.0000] <annevk>
Manishearth: ta

[02:52:02.0000] <Manishearth>
Domenic: filed https://bugs.chromium.org/p/chromium/issues/detail?id=617902

[02:54:12.0000] <hallvors>
annevk: thanks :)

[03:21:09.0000] <Manishearth>
annevk: more possibly buggy spec tests?

[03:21:23.0000] <Manishearth>
annevk: https://fetch.spec.whatwg.org/#concept-http-fetch

[03:21:26.0000] <Manishearth>
the 401 line

[03:21:41.0000] <Manishearth>
response is returned if request's credentials mode is not "include".

[03:21:44.0000] <Manishearth>
however

[03:22:11.0000] <Manishearth>
https://xhr.spec.whatwg.org/#the-send()-method

[03:22:38.0000] <Manishearth>
> If the withCredentials attribute value is true, "include", and "same-origin" otherwise.

[03:22:52.0000] <Manishearth>
so by default the credentials mode is same origin

[03:24:27.0000] <Manishearth>
however, https://github.com/w3c/web-platform-tests/blob/master/XMLHttpRequest/send-authentication-competing-names-passwords.htm doesn't set withcredentials

[03:25:42.0000] <Manishearth>
annevk: perhaps the spec should say "the cors flag is set AND credentials mode is not include"

[03:30:04.0000] <Manishearth>
annevk: https://github.com/whatwg/fetch/issues/319

[03:40:36.0000] <howdoi>
try-catch with async-await is a pain in the....

[03:40:58.0000] <howdoi>
Object.values but not give null values?

[03:56:44.0000] <annevk>
Manishearth: why?

[03:56:57.0000] <annevk>
Manishearth: it says one of

[04:20:16.0000] <annevk>
Ah, will follow up in the issue

[04:27:00.0000] <Manishearth>
annevk: so the spec needs fixing, right? I wasn't sure from your response

[04:31:05.0000] <annevk>
Manishearth: I think so

[06:34:07.0000] <annevk>
Domenic: so what does fetch(..., { token }) mean per ES6?

[06:58:37.0000] <Domenic>
annevk: fetch(..., { token: token })

[06:59:25.0000] <annevk>
Domenic: interesting

[07:02:05.0000] <annevk>
Domenic: does it take after the variable name?

[07:03:12.0000] <Domenic>
annevk: if I understand what you're asking, yes?

[07:03:21.0000] <Domenic>
It's just a shortcut. { x } is always shortcut for { x: x }

[07:03:53.0000] <annevk>
ta

[07:04:09.0000] <annevk>
I think at some point I learned about that and then never used it enough to remember

[09:16:48.0000] <nox>
annevk: How stable is the CE spec now?

[09:16:55.0000] <nox>
Is it ready to be implemented in Q3?

[09:35:02.0000] <annevk>
nox: yeah

[09:42:58.0000] <annevk>
Domenic: I guess you run tip-of-tree bikeshed?

[09:43:11.0000] <annevk>
/me should probably update

[09:43:45.0000] <Domenic>
annevk: yeah, I git pull and bikeshed update before every commit...

[09:43:55.0000] <annevk>
I see

[10:26:30.0000] <annevk>
Domenic: https://twitter.com/bergi_bergos/status/740193424209522688

[15:14:12.0000] <nox>
Is it just me or DOM uses CEReactions but doesn't include a reference to its definition?

[15:23:33.0000] <Domenic>
nox: yeah, https://github.com/tabatkins/bikeshed/issues/677

[15:24:03.0000] <nox>
Domenic: Thanks for the link.

[15:35:44.0000] <TabAtkins>
That's an easy fix, I should get on that one.

[15:36:15.0000] <TabAtkins>
However, I just added support for getting the 100% accurate line number from a line!

[15:36:32.0000] <TabAtkins>
Just need to annotate every single die()/warn() call to pass the right info.

[15:37:24.0000] <TabAtkins>
s/from a line/for an error/


2016-06-08
[22:13:13.0000] <MikeSmith>
TabAtkins: didn‚Äôt know you‚Äôre an iTerm2 user

[00:05:08.0000] <yoav>
jgraham: Hey! WPT doesn't expose ways to run something like Blink/WebKit's internals in a cross-browser way, right? The subject has come up in https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/j04BdFMfYxg

[00:22:29.0000] <MikeSmith>
yoav: what does ‚Äúrun something like Blink/WebKit's internals in a cross-browser way‚Äù mean?

[00:25:03.0000] <yoav>
MikeSmith: Have a non-Web-exposed API that enables you things like changing the screen density, etc

[00:26:04.0000] <yoav>
e.g. Some of srcset's tests in Blink/WebKit cannot be easily migrated elsewhere because of lack of control on these conditions

[00:26:33.0000] <yoav>
And the related blink-dev discussion was related to adding such an API for network state

[00:27:11.0000] <jgraham>
yoav: No, there is no attempt to provide a standardised api for that because it's very unclear that it's possible without agreement on the semantics of the backing api (in which case why not use that directly)

[00:27:49.0000] <yoav>
jgraham: OK, thanks

[00:28:31.0000] <jgraham>
I think there is likely to be some demand for a standardised test-only api fwiw

[00:30:02.0000] <yoav>
personally, I'd love to see something like that

[02:52:52.0000] <nox>
Is it me or https://dom.spec.whatwg.org/#concept-getelementsbytagname doesn't actually describe UAs?

[02:54:59.0000] <nox>
I see, Safari and Firefox disagrees on "Element in non-HTML namespace, prefix, non-ascii characters in name".

[03:16:21.0000] <nox>
annevk: Following https://github.com/whatwg/dom/issues/143, I think getElementsByTagName still contradicts UAs, or at least Firefox.

[04:50:23.0000] <Ms2ger>
annevk, you know if there's a reason BeforeUnloadEvent doesn't have a constructor?

[04:56:01.0000] <MikeSmith>
bravo wanderview

[04:58:55.0000] <annevk>
Ms2ger: I don't

[05:04:26.0000] <nox>
annevk: Any idea about my own question? Maybe there is an open issue I missed?

[05:09:32.0000] <annevk>
nox: what in particular doesn't match?

[05:09:58.0000] <nox>
annevk: http://w3c-test.org/dom/nodes/Element-getElementsByTagName.html

[05:10:07.0000] <nox>
annevk: "Element in non-HTML namespace, prefix, non-ascii characters in name"

[05:10:14.0000] <nox>
This pass on Safari and Chrome but not Firefox,

[05:10:20.0000] <nox>
and the spec seems to agree with Firefox.

[05:11:42.0000] <annevk>
nox: above you said the spec contradicts Firefox?

[05:12:03.0000] <annevk>
nox: the spec is intended to match Firefox, per that issue bz raised

[05:12:04.0000] <nox>
annevk: Sorry, confused myself.

[05:12:14.0000] <nox>
annevk: So the test didn't get updated per spec, is that all?

[05:12:20.0000] <annevk>
nox: I guess so

[05:12:23.0000] <nox>
Ok great.

[05:12:59.0000] <Ms2ger>
Though Aryeh tried

[05:21:06.0000] <hallvors>
This IDL array vs frozenarray thing -> https://github.com/whatwg/html/issues/11 - is there some context here, like a bug arguing for removing array? zcorpan seems to want me to understand it :)

[05:22:09.0000] <nox>
hallvors: Following links leads me here: https://github.com/heycam/webidl/pull/52 and here: https://www.w3.org/Bugs/Public/show_bug.cgi?id=23682

[05:22:13.0000] <zcorpan>
hallvors: the T[] thing was removed from WebIDL, so any spec still using it is broken

[05:23:40.0000] <hallvors>
ah, thanks. Didn't see the link to 23682

[05:25:47.0000] <nox>
hallvors: No problem.

[06:31:38.0000] <nox>
Spec and tests for insertAdjacentHTML don't seem to agree either.

[06:32:17.0000] <annevk>
I wonder if the insertAdjancentHTML spec is correct

[06:33:12.0000] <annevk>
I looked at it briefly when working on insertAdjacentOtherThings and I remember thinking it had some bugs

[06:33:17.0000] <nox>
annevk: I don't think so.

[06:33:23.0000] <nox>
annevk: But the tests don't look correct either. :)

[06:33:50.0000] <nox>
annevk: https://github.com/servo/servo/blob/master/tests/wpt/web-platform-tests/domparsing/insert_adjacent_html.html#L59-L72

[06:34:00.0000] <nox>
annevk: Am I blind, or child doesn't actually get a parent ever?

[06:38:57.0000] <annevk>
nox: parentElement.appendChild(child);

[06:39:11.0000] <nox>
annevk: Oh missed it.

[06:39:39.0000] <nox>
annevk: Ain't it bad style that it is itself in a test btw?

[06:40:17.0000] <Ms2ger>
That's kinda weird

[06:40:19.0000] <annevk>
nox: it's a little wonky for sure

[06:40:36.0000] <nox>
annevk: Well, someone implemented that method,

[06:40:40.0000] <nox>
and we have failing tests,

[06:40:49.0000] <nox>
so if tests or spec are wrong (or I think they are), I'll ping you.

[06:41:50.0000] <annevk>
it's really the responsibility of Travis Leithead

[06:42:01.0000] <annevk>
since it's part of DOM Parsing & Serialization

[06:42:51.0000] <nox>
Right.

[06:42:56.0000] <annevk>
I sorta think we need to put that in DOM at some point, or at least all the methods and such, but there's also only so many people to do editing work

[06:43:19.0000] <nox>
annevk: You'll forever be my go-to spec guy though. ;)

[07:15:44.0000] <wanderview>
MikeSmith: I should probably avoid twitter before coffee

[07:16:08.0000] <caitp>
the people really want xml https://github.com/angular/angular/issues/673

[07:16:27.0000] <gsnedders>
nox: Travis has been working on bringing the tests in line with the spe AFAIK

[07:17:28.0000] <MikeSmith>
wanderview: nope, you should keep calling out BS and speaking truth to power

[07:28:07.0000] <wanderview>
MikeSmith: ironically they are about to roll out the removal of the UA check and redirect to play store

[07:32:25.0000] <jgraham>
wanderview: It seems entirely reaonable to me. You shouldn't get lots of free marketing for being at the forefront of web design if you are blocking browsers. But ofc when the people making the favoured browsers are the ones handing out the free publicity, it's easy to see why they don't give a fuck

[07:36:34.0000] <annevk>
I'd hope all this renewed interest in the web results in some more people being allocated to making the foundations more interoperable

[07:36:46.0000] <annevk>
Be it through tests or standards

[07:37:27.0000] <caitp>
there's renewed interest in the web?

[07:40:15.0000] <annevk>
caitp: I've no idea, I just want more resources to work on infrastructure

[07:42:21.0000] <caitp>
it only gets harder to keep interest in any of this stuff

[07:42:45.0000] <caitp>
that's the sad truth :(

[07:43:05.0000] <annevk>
Not for me

[07:44:39.0000] <jgraham>
annevk: Not really clear that foudational stuff is the reason that flipkart or whoever are producing single-browser sites

[07:45:00.0000] <jgraham>
(which doesn't mean that it's not important ofc, but it's unclear to me if it's the problem in this case)

[07:45:36.0000] <caitp>
maybe it's because making good experiences on multiple software platforms (and they're all different platforms, they're not a single coherent platform) takes too much time and resources

[07:45:54.0000] <annevk>
Yeah, flipkart seems mostly a case of new technology not having settled

[07:46:18.0000] <annevk>
There's always going to be some brokenness at the forefront

[07:46:46.0000] <annevk>
But that our building blocks are not entirely stable either, I mean, that can't go well forever

[07:46:49.0000] <caitp>
there's unfixable brokenness in the back too

[07:47:38.0000] <annevk>
I wouldn't say it's unfixble really

[07:47:49.0000] <annevk>
We've fixed tons of stuff

[07:48:07.0000] <annevk>
That's the core of what the WHATWG's been doing for a decade and a bit

[07:53:51.0000] <caitp>
I'd write about my perspective on how the web is really playing a key part in the ruining of the world, but it's not an audience that would hear it

[07:54:29.0000] <nox>
WHATWG reconciled me with the Web kinda.

[07:54:33.0000] <caitp>
but the way it speeds the delivery and increases the demand for cheapened crap, while reducing the value of people building that cheapened crap, is not a good thing

[07:54:52.0000] <nox>
caitp: The Web is improving, not regressing, IMO.

[07:55:05.0000] <caitp>
from whose perspective?

[07:55:10.0000] <nox>
Everyone's.

[07:55:44.0000] <caitp>
all week they've been playing on the radio news about a town experiencing like a 10 fold increase in teen suicides, and largely blaming the web, and they're at least partly correct in blaming the web

[07:55:52.0000] <caitp>
it's really a big part of the problem

[07:55:57.0000] <nox>
What.

[07:56:38.0000] <caitp>
it reduces the value of humans, reduces privacy of humans, reduces the value of human works

[07:56:52.0000] <caitp>
actually increases the cost of living

[07:57:00.0000] <caitp>
it's horrific

[07:57:38.0000] <nox>
I don't get your point, nor how it is related with what WHATWG is doing.

[07:57:56.0000] <caitp>
it has nothing to do with the WHATWG, it's just the web, as a technology, is really hurting the world

[07:58:02.0000] <nox>
Abuse and harassment are humans' problems, not the Web's.

[07:58:14.0000] <caitp>
it's not just abuse and harassment

[07:58:23.0000] <caitp>
that's only one side of it

[07:58:24.0000] <nox>
What's hurting the world is the feeling of impunity of some, and parents being completely lost about their youth's virtual lifes.

[07:58:35.0000] <jgraham>
It is unclear to me that The Web is important here in a way that is distinguishable from modern technology in general

[07:58:52.0000] <nox>
jgraham: Thanks, I wish I had said that.

[07:58:58.0000] <caitp>
well, the web is probably the most ubiquitous delivery method for that modern technology

[07:59:52.0000] <nox>
Seems like the Web you talk of is mostly social networks btw.

[08:00:03.0000] <caitp>
it's not, but they're also terribl

[08:01:19.0000] <jgraham>
I think a lot of the bad stuff now happens in ways that are not specifically The Web e.g. via apps. It seems like the general idea of a ubiquitous computer network has a number of unforeseen downsides

[08:01:20.0000] <caitp>
anyways, #whatwg isn't really an audience that is going to see that the web is part of the problem, I drank the same koolaid you all did

[08:01:49.0000] <caitp>
the web is the platform, it helps people communicate and find information, it's important, it changes lives for the better

[08:01:52.0000] <caitp>
but that's not what's happening :(

[08:02:03.0000] <nox>
I didn't drink that koolaid.

[08:02:11.0000] <nox>
I see the Web as the best way to procrastinate, mostly.

[08:02:16.0000] <jgraham>
caitp: I, at least, am receptive to the idea that a problem exists. But I think that pinning it on a specific implementation of the general abstract technology is perhaps naive

[08:02:42.0000] <jgraham>
And there are already multiple implementations of the technology, so it's not like turning off the web tomorrow would make a huge difference

[08:03:33.0000] <caitp>
I keep doing this because it pays for me to keep living, but it's going to result in me drinking a litre of whiskey every week, I'm sure ofi t

[08:03:53.0000] <jgraham>
Pre-emtively give up drinking?

[08:03:55.0000] <caitp>
I need a new job that doesn't involve computers :(

[08:05:07.0000] <nox>
caitp: What about working for IoT then?

[08:05:11.0000] <nox>
/me runs away.

[08:05:16.0000] <caitp>
even worse ;-;

[08:19:12.0000] <MikeSmith>
nothing wrong with drinking a liter of whiskey every week

[08:19:21.0000] <MikeSmith>
or even every day

[08:22:42.0000] <MikeSmith>
and it‚Äôs an interesting phenomenon when after somebody realizes they had a naive understanding of something they‚Äôve put time into, they assume that others putting time into it have the same naive understanding of it, or ever did

[08:51:39.0000] <smaug____>
annevk: thanks. That was my first pr ever on github :)

[08:51:42.0000] <smaug____>
did I do something wrong

[08:52:12.0000] <smaug____>
(locally I probably did)

[08:53:21.0000] <smaug____>
(I need to figure out how to get my local fork synced. I'm totally no-ob in this stuff)

[08:53:53.0000] <smaug____>
I guess I can always delete the fork

[09:05:20.0000] <mathiasbynens>
zcorpan: have you found the Firefox bug # yet?

[09:05:36.0000] <zcorpan>
mathiasbynens: no, but haven't searched

[09:07:57.0000] <mathiasbynens>
zcorpan: https://bugzilla.mozilla.org/show_bug.cgi?id=1094995 apparently

[09:08:15.0000] <mathiasbynens>
(I wasn‚Äôt aware of this bug)

[09:11:01.0000] <mathiasbynens>
‚Üí https://bugzilla.mozilla.org/show_bug.cgi?id=449811

[09:29:18.0000] <zcorpan>
MikeSmith: https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/?utm_source=html5weekly&utm_medium=email about this BEM thing

[09:31:19.0000] <zcorpan>
(from the comments it appears it's a love or hate kind of thing)

[09:31:39.0000] <annevk>
smaug____: I don't think you did anything wrong

[09:32:12.0000] <annevk>
smaug____: I couldn't merge it as-is because I needed to make some other changes and the final commit needs to contain the generated HTML

[09:32:14.0000] <gsnedders>
zcorpan: I'm getting bad gateway from that URL

[09:32:46.0000] <zcorpan>
huh. try https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/

[09:33:17.0000] <gsnedders>
wtf

[09:33:18.0000] <gsnedders>
works

[09:34:17.0000] <MikeSmith>
zcorpan: thanks

[09:34:19.0000] <MikeSmith>
/me looks

[09:34:48.0000] <MikeSmith>
hmm 502 Bad Gateway atm

[09:34:58.0000] <zcorpan>
MikeSmith: try the other link

[09:55:24.0000] <MikeSmith>
zcorpan: thanks

[09:55:46.0000] <MikeSmith>
seems .. complicated

[09:57:09.0000] <zcorpan>
MikeSmith: i guess it avoids thinking of other complicated things like cascade and specificity

[09:57:15.0000] <zcorpan>
gotta go

[10:25:48.0000] <smaug____>
annevk: is there some documentation about best practices how to create prs for specs? /me is obviously looking for some "contributing fixes to specs for dummies"

[10:26:07.0000] <annevk>
smaug____: the README of whatwg/html has some info

[10:26:16.0000] <annevk>
smaug____: README for most specs should have info

[10:26:54.0000] <annevk>
smaug____: if you lack some info, file an issue

[10:27:03.0000] <annevk>
smaug____: because that really should be there in some form

[10:27:28.0000] <smaug____>
well, I was hoping even more precise, like what kind branches one might want to use locally and such

[10:27:40.0000] <smaug____>
github has rather weak documentation itself

[10:28:08.0000] <annevk>
smaug____: oh, if you have write access to a standard always create a branch there with a reasonable unique name

[10:28:23.0000] <annevk>
smaug____: if you don't have write access, you need to create a branch on your fork and what you call that doesn't really matter

[10:30:02.0000] <smaug____>
github documentation just says one may want to use named branches, but isn't too clear about the reasons or whether it is actually required etc

[10:39:24.0000] <annevk>
smaug____: I think it's mostly so you know what the branch is about when selecting one

[10:39:57.0000] <annevk>
/me wonders if mven is mvano

[10:40:38.0000] <annevk>
Domenic: another idea I had with the whole icon thing is to have some kind of API that tells you what icon the browser would select, given some inputs

[10:40:53.0000] <Domenic>
annevk: that does seem really nice

[10:41:08.0000] <annevk>
Domenic: and then not alter the end points and just keep those as a single URL that you get out of the API

[10:41:20.0000] <Domenic>
annevk: I don't understand that latter part

[10:41:57.0000] <annevk>
Domenic: instead of making the Notification object more complicated to support multiple icons, just solve the icon selection thing in this new API and then feed the Notification object the result

[10:42:18.0000] <Domenic>
annevk: so what complexity would you remove from the Notification object?

[10:42:48.0000] <annevk>
Domenic: nothing compared to the current state, but we wouldn't add the PR that adds support for multiple icons

[10:43:22.0000] <Domenic>
annevk: we would still accept them as input, just not reflect them in the API, I guess?

[10:44:57.0000] <annevk>
That would be another way to go; I was thinking the Image Selection API would return the URL of the chosen image and you'd pass that along

[10:45:19.0000] <Domenic>
oh i see

[10:46:33.0000] <annevk>
I'm guessing <picture> and friends were before extensible web thingie happened? Anyway, while walking around with O today I figured there is some kind of API there that we don't expose

[10:46:46.0000] <annevk>
And because of that we keep copying the high-level pattern around

[10:47:20.0000] <annevk>
Which just creates a ton of API surface with not so much value

[10:53:16.0000] <Domenic>
Yeah that seems very true to me

[10:53:30.0000] <Domenic>
<picture> is a bit unique because it needs to be in markup for the preload scanner

[10:55:10.0000] <annevk>
Anyway, really time to make dinner, guess I'll post tomorrow unless someone wants to do it for me

[10:56:43.0000] <TabAtkins>
MikeSmith: I'm not, that's just a good feature that's worth telling others about.

[11:06:36.0000] <mven>
annevk: hmm. nope.

[11:06:45.0000] <mven>
who's mvano?

[11:17:26.0000] <jyasskin>
mven: Michael van Ouwerkerk

[11:23:02.0000] <TabAtkins>
smaug____: I've been meaning to write up some stuff on that topic for myself anyway, so I went ahead and did it: http://www.xanthir.com/b4hf0

[11:23:13.0000] <TabAtkins>
smaug____: My guidelines for how to easily work with forks on GitHub.

[11:24:34.0000] <smaug____>
I need to see what git does when there are merge conflicts

[11:24:53.0000] <smaug____>
TabAtkins: thanks

[11:39:30.0000] <annevk>
TabAtkins: five is no longer needed thanks to squash and merge

[11:39:56.0000] <annevk>
TabAtkins: actually prefer fixup commits to more easily review them

[11:40:14.0000] <TabAtkins>
annevk: Yeah, that's probably true.

[12:46:46.0000] <coppro>
there is no way to use HTTP content negotiation to negotiate image size, is there?

[13:00:00.0000] <TabAtkins>
coppro: No.

[13:17:47.0000] <coppro>
:(

[13:48:25.0000] <coppro>
also is there a more recent spec for CORS than the W3C recommendation? By my reading of fetch(), it doesn't implement that recommendation.

[13:48:36.0000] <coppro>
(in particular, it requires the server to explicitly allow Authorization)

[13:50:39.0000] <TabAtkins>
It looks like Fetch defines CORS on its own? https://fetch.spec.whatwg.org/#http-cors-protocol

[13:50:42.0000] <TabAtkins>
but annevk ^^^

[14:14:42.0000] <Domenic>
coppro: TabAtkins: yes, CORS spec is obsoleted by Fetch

[14:16:10.0000] <coppro>
cool, thanks!


2016-06-09
[19:17:27.0000] <boogyman>
annevk: looking at https://github.com/whatwg/fetch/issues/27 it seems like there hasn't been progress or decisions recently. Are you aware of any not currently listed there?

[21:29:09.0000] <annevk>
boogyman: cancelable promises is making progress in TC39

[00:28:33.0000] <manishearth>
annevk: if it's a security bug, would it have been worth a bounty? ;)

[00:28:43.0000] <manishearth>
(I'm not eligible for bounties anymore anyway)

[00:29:02.0000] <annevk>
manishearth: dunno

[00:29:40.0000] <manishearth>
annevk: how can this be exploited, anyway?

[00:29:57.0000] <manishearth>
sounds like a minor detail about the security policy -- not sure what mischief can be done if this leaks

[00:29:58.0000] <annevk>
manishearth: a server might do something weird upon receiving that header

[00:30:37.0000] <manishearth>
ah

[01:03:27.0000] <annevk>
Do we have any other github.io domains than Loader?

[01:03:46.0000] <annevk>
/me wants to enforce HTTPS for all of them now that's possible

[01:50:57.0000] <manishearth>
annevk: does gecko implement the fetch spec yet? or does each thing approximate it?

[01:51:10.0000] <manishearth>
as in, is there a hunk of code that more or less looks like the spec

[01:51:29.0000] <Ms2ger>
There is not

[01:51:36.0000] <Ms2ger>
There may well never be

[01:51:53.0000] <annevk>
manishearth: no, this is why service workers took a long time and such

[01:51:56.0000] <manishearth>
ah

[01:52:02.0000] <annevk>
Ms2ger: interesting, they're not convinced it's better architecture?

[01:52:11.0000] <annevk>
Ms2ger: or will Rust just replace all the code?

[01:52:37.0000] <Ms2ger>
I don't know about that

[01:52:41.0000] <manishearth>
yeah when I implemented XHR in servo I realized that we should switch to the fetch spec (at the time it wasn't complete) as soon as possible, since approximating it makes reasoning abut certain things hard

[01:52:49.0000] <annevk>
Ms2ger: so you're speculating?

[01:52:52.0000] <Ms2ger>
It's just a lot of code, and large rewrites are always hard

[01:52:53.0000] <Ms2ger>
Yes

[01:52:56.0000] <manishearth>
yeah

[01:53:17.0000] <manishearth>
we have a pretty small net stack right now so it's not hard to write the fetch thing

[01:54:00.0000] <Ms2ger>
And it's been pretty big for us too

[01:54:02.0000] <manishearth>
 + <!-- If you are ever tempted to move this around, carefully consider responses from about URLs,

[01:54:05.0000] <manishearth>
+      blob URLs, service workers, HTTP cache, HTTP network, etc. -->

[01:54:07.0000] <manishearth>
haha

[01:54:10.0000] <manishearth>
Ms2ger: right

[01:54:31.0000] <annevk>
It's nice that there's at least one implementation that is fairly close

[01:54:31.0000] <manishearth>
one outreachy intern, plus a week of work for me integrating it + chasing tests (mostly spec bugs and test bugs, yay)

[01:55:01.0000] <annevk>
I never quite wrapped my head around Gecko's stack, but it seems like there's a lot of disjoint pieces that sorta hold the fort together

[01:55:13.0000] <manishearth>
annevk: this is why I've been filing so many spec/wpt bugs lately, we implemented the spec to the letter (modulo stuff we don't support), and it turns out that the spec is wrong in a few places :)

[01:55:19.0000] <annevk>
And Chrome seems to have similar flaky code where it's quite easy for new features to violate the same-origin policy

[01:55:42.0000] <manishearth>
well, I mean it's just as easy to violate the same origin policy by adding a new feature to the fetch spec :)

[01:55:43.0000] <annevk>
Yeah, unfortunately all specs are pretty crappy

[01:56:10.0000] <annevk>
Even https://encoding.spec.whatwg.org/ which I keep thinking is done gets some rather annoying bug reports from time to time

[01:56:12.0000] <manishearth>
eh, it's okay. these were mostly minor edge cases, which were fortunately caught by wpt

[01:56:18.0000] <manishearth>
heh

[01:57:18.0000] <annevk>
I saw that some folks will maybe try to turn the ECMAScript specification into something that can be verified

[01:57:40.0000] <annevk>
If we reach that level of tooling and can start adopting that elsewhere, that would be quite nice

[01:57:59.0000] <annevk>
Writing standards and hoping humans will catch all the errors is just so messy

[02:00:46.0000] <Ms2ger>
Verifying is fucking hard, though :/

[02:01:35.0000] <manishearth>
annevk: > response's url list will be typically empty at this point

[02:01:38.0000] <manishearth>
annevk: why?

[02:01:51.0000] <manishearth>
that step runs after basic fetch or http fetch

[02:02:02.0000] <annevk>
manishearth: because nothing has set it

[02:02:08.0000] <manishearth>
oh wait

[02:02:09.0000] <manishearth>
sorry

[02:02:14.0000] <manishearth>
*response*'s url list

[02:02:30.0000] <annevk>
üòä

[02:02:55.0000] <annevk>
Ms2ger: the current state of play is too, no?

[02:40:40.0000] <annevk>
Domenic: happy b-day! üéÇ

[02:43:52.0000] <nox>
Domenic: http://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Pencils_hb.jpg/440px-Pencils_hb.jpg

[03:13:57.0000] <manishearth>
annevk: I want privileged frames to be able to bypass CORS checks

[03:14:07.0000] <manishearth>
Request mode "no-cors" is enough for this?

[03:14:52.0000] <manishearth>
nox: ha!

[03:35:38.0000] <annevk>
manishearth: frames use navigate

[03:36:07.0000] <manishearth>
hm

[03:36:14.0000] <manishearth>
annevk: does it affect anything else?

[03:36:47.0000] <annevk>
manishearth: it's not really clear what you want

[03:37:10.0000] <manishearth>
annevk: I want it to work exactly like an XHR fetch from the same origin

[03:37:28.0000] <manishearth>
annevk: we have a toplevel privileged frame that is allowed to do some of these things

[03:39:27.0000] <annevk>
manishearth: I'm not sure

[03:39:35.0000] <annevk>
manishearth: Fetch is defined for the observable web

[03:39:43.0000] <annevk>
manishearth: I don't really want to provide guarantees beyond that

[04:21:00.0000] <nox>
manishearth: Glad someone liked it. :)

[06:11:36.0000] <annevk>
Domenic: there's a lot of technical debt around creating documents, geez

[06:12:15.0000] <Domenic>
annevk: during navigation? Or in general?

[06:12:17.0000] <annevk>
Domenic: and these algorithms have become quite big so it's not super easy to refactor, so I'm just doing it very slowly

[06:12:27.0000] <annevk>
Domenic: navigation in particular

[06:12:32.0000] <Domenic>
annevk: nox: thanks üòÄ

[06:13:03.0000] <annevk>
Domenic: there might be a more general document allocation thing lurking in the background, but navigation is the one I'm trying to tackle atm

[06:13:56.0000] <Ms2ger>
annevk, any particular kind of chocolate you like?

[06:14:13.0000] <Ms2ger>
(Don't say "Swiss"...)

[06:14:53.0000] <jgraham>
Do say "Icelandic"

[06:16:12.0000] <annevk>
Ms2ger: hmm, chocolates with filling from Belgium?

[06:16:29.0000] <nox>
Swiss chocolate with Belgian filling.

[06:16:34.0000] <annevk>
jgraham: have to try those sometime

[06:17:15.0000] <Ms2ger>
You could say Icelandic, but then you just wouldn't be getting anything :)

[06:17:47.0000] <annevk>
I was trying to bring a present from the airport for someone, but the Zurich airport is somewhat disappointing; however, it has lots of chocolates of which I could bring some next week

[06:18:07.0000] <annevk>
Organize a little competition üòõ

[06:18:19.0000] <nox>
Ms2ger: Not in #servo anymore, is that normal?

[06:18:49.0000] <Ms2ger>
Hrm, I just realized I might not be able to get chocolate before leaving...

[06:18:52.0000] <Ms2ger>
We'll see

[06:20:15.0000] <jgraham>
Ms2ger: If only London had chocolate shops‚Ä¶

[06:21:45.0000] <Ms2ger>
jgraham, pah

[06:22:30.0000] <jgraham>
(oblig. hint: http://sourcedmarket.com/ stocks chocolate from http://cocoarunners.com/. Although not filled chocolates iirc. But for that there's e.g. https://www.rococochocolates.com/ and many others)

[06:22:54.0000] <jgraham>
(both are in Marylebone)

[06:23:52.0000] <annevk>
jgraham: ah, you can give us the tour

[07:21:38.0000] <wanderview>
annevk: is SRI integrity supported on anything other than HTTP?

[07:31:13.0000] <annevk>
wanderview: I think it works for blob URLs and such

[07:31:41.0000] <annevk>
wanderview: can you get to https://github.com/whatwg/fetch/pull/322 today?

[07:31:49.0000] <wanderview>
ok... yea... in this case I guess the constraining thing is we only intercept http URLs

[07:31:54.0000] <annevk>
wanderview: well, that's not really needed, but an ETA would be nice

[07:33:50.0000] <wanderview>
annevk: looking

[07:42:32.0000] <wanderview>
annevk: done

[07:44:41.0000] <annevk>
ta

[08:20:54.0000] <annevk>
What invokes https://html.spec.whatwg.org/multipage/browsers.html#scroll-to-fragid exactly? That first paragraph and its steps seems completely standalone?

[08:21:49.0000] <Ms2ger>
Not sure

[08:22:13.0000] <Domenic>
looks like it's meant to be invoked by navigation...

[08:22:34.0000] <Domenic>
> Fragments: If this is not a reload-triggered navigation, resource's URL equals browsingContext's active document's URL with exclude fragments flag set, and resource's URL's fragment is non-null, then navigate to that fragment and abort these steps.

[08:22:49.0000] <Ms2ger>
Yeah, just found that too

[08:22:52.0000] <Domenic>
Confusing since the <dfn> is inside the heading, not the phrase

[08:26:09.0000] <annevk>
I see

[08:26:27.0000] <annevk>
So much still to test

[14:01:54.0000] <zcorpan>
https://twitter.com/zcorpan/status/740653950899216384 15 mins left

[14:05:12.0000] <Domenic>
i am really curious about that one

[14:18:28.0000] <wanderview>
Domenic: why does streams 3.10.5.2 [[Pull]] create a Record with [[ctor]] %Uint8Array% instead of just constructing a Uint8Array?

[14:19:02.0000] <wanderview>
Domenic: oh... I guess that is used to construct the thing later... sorry for my confusion

[14:21:25.0000] <zcorpan>
Domenic: answer posted

[14:48:44.0000] <gsnedders>
is <p><table> not another Acid2 quirk?


2016-06-10
[19:58:26.0000] <MikeSmith>
annevk: http://stackoverflow.com/questions/37733163/cors-preflight-not-happening-consistently

[19:59:27.0000] <MikeSmith>
annevk: sounds like an implementation bug somewhere, but anyway just FYI if you have any clues

[22:14:43.0000] <annevk>
MikeSmith: commented

[22:14:55.0000] <MikeSmith>
thanks

[22:24:41.0000] <MikeSmith>
annevk: I guess I assumed the OP was talking about the same POST request made a different times, but seeing different behavior

[22:24:45.0000] <MikeSmith>
but maybe not

[22:31:04.0000] <rniwa>
MikeSmith: hi MikeSmith!

[22:31:07.0000] <rniwa>
annevk: hi annevk!

[22:37:10.0000] <annevk>
Hey rniwa, good evening üòä

[22:42:55.0000] <MikeSmith>
rniwa: hola

[22:45:01.0000] <rniwa>
annevk: glad we settled on getRootNode

[22:45:04.0000] <MikeSmith>
rniwa: question: Who do you reckon will probably end up doing the Service Worker implementation work for WebkKit? Maybe you?

[22:45:18.0000] <rniwa>
annevk: that git hub issue got super ugly LOL

[22:45:30.0000] <rniwa>
MikeSmith: definitely not me

[22:45:31.0000] <MikeSmith>
the main part of it I mean, or organizaing the work

[22:45:33.0000] <MikeSmith>
oh

[22:45:41.0000] <MikeSmith>
rniwa: wonder who else

[22:45:42.0000] <MikeSmith>
then

[22:45:43.0000] <rniwa>
MikeSmith: someone who knows the network stack

[22:45:48.0000] <MikeSmith>
ah yeah

[22:45:58.0000] <rniwa>
MikeSmith: like https://twitter.com/bradeeoh

[22:46:13.0000] <MikeSmith>
ah

[22:47:10.0000] <rniwa>
MikeSmith: we finally did some massive rewrite of the network stack this year but we've still got a long way...

[22:48:22.0000] <MikeSmith>
well

[22:48:40.0000] <MikeSmith>
you gonna rewrite large parts when you implement Service Workers

[22:48:41.0000] <MikeSmith>
I bet

[22:48:54.0000] <MikeSmith>
or at least need to touch large partts of it

[22:53:15.0000] <rniwa>
MikeSmith: yeah

[23:09:07.0000] <annevk>
rniwa: yeah, got resolved quickly after removal though üòä

[23:09:42.0000] <rniwa>
annevk: I guess we gotta thank Domenic for that ;)

[23:09:55.0000] <rniwa>
annevk: it looks like shadow DOM is getting into a good shape now

[23:10:11.0000] <rniwa>
annevk: adoption seems to be a big problem for custom elements though

[23:10:24.0000] <annevk>
MikeSmith: WebKit is doing Fetch refactoring first

[23:10:53.0000] <rniwa>
annevk: I'm of the opinion that it might be better to make adoption throw for now but that might be also tricky because some DOM APIs assume any node can be adopted :(

[23:10:56.0000] <annevk>
Which I've tried to advocate everyone to start with, but, you know

[23:10:59.0000] <MikeSmith>
annevk: oh

[23:11:54.0000] <annevk>
rniwa: yeah, that does not seem easy

[23:12:21.0000] <rniwa>
annevk: but spec'ing some semi-interoperable behavior seems super risky

[23:12:49.0000] <rniwa>
annevk: because i'm sure someone would start relying on that behavior with adopting from iframe, etc...

[23:12:50.0000] <annevk>
rniwa: also fails with the <template> pattern?

[23:12:56.0000] <rniwa>
annevk: something like that.

[23:13:02.0000] <rniwa>
annevk: so that's a big bummer

[23:13:14.0000] <annevk>
Hmm

[23:13:25.0000] <rniwa>
annevk: but custom elements don't get upgarded in regular template element's content anyway

[23:13:28.0000] <rniwa>
annevk: so that might be okay?

[23:13:35.0000] <rniwa>
or maybe we've changed that?

[23:14:11.0000] <annevk>
I think people expect copying the template into a shadow tree to not throw

[23:14:18.0000] <rniwa>
annevk: indeed

[23:14:34.0000] <rniwa>
annevk: but I think regular case would work because custom elements aren't upgraded in template contents

[23:14:59.0000] <rniwa>
annevk: the cloned nodes only get upgraded then they're inserted into a document

[23:15:05.0000] <rniwa>
annevk: so I don't think that use case is broken

[23:15:23.0000] <rniwa>
annevk: if I'm not mistaken

[23:17:42.0000] <annevk>
rniwa: yeah, that might be true

[23:18:10.0000] <annevk>
rniwa: same for importing from XHR and such

[23:19:11.0000] <rniwa>
annevk: right

[23:19:19.0000] <annevk>
rniwa: so the conditional would check cross-document and custom, and throw if so

[23:19:39.0000] <annevk>
Custom initialized*

[23:19:45.0000] <rniwa>
annevk: yeah, I think that might be acceptable until we get a better story for adoption

[23:19:54.0000] <rniwa>
annevk: adopting* builtin elements

[23:21:54.0000] <annevk>
giving a callback for self-cleanup seems like the only way out

[23:22:26.0000] <annevk>
Or requiring similar global state in both documents‚Ä¶

[23:23:15.0000] <annevk>
Ugh

[23:24:00.0000] <annevk>
I might blog about this

[23:24:11.0000] <annevk>
See what Twitter says

[01:55:02.0000] <tobie>
Ms2ger: I think you worked on a bikeshed port of the WebIDL spec.

[01:56:02.0000] <tobie>
Ms2ger: as I'm planning to work on precisely that, I thought there were pieces I might be able to recuperate, or at least knowledge of what problems you bumped into.

[02:01:03.0000] <tobie>
MikeSmith: I'm going to be triaging the WebIDL issue trackers. I'd want to close the bugzilla one and possibly migrate some or all of the outstanding issues to GitHub (afaik you have scripts for that).

[02:01:42.0000] <tobie>
MikeSmith: Would love to hear the pros and cons of migrating those and what your recommendations would be.

[02:02:27.0000] <annevk>
Only migrate if you fix or if you substantially improve the description of the issue

[02:02:39.0000] <annevk>
Migrations I've seen so far always require looking at the original bug

[02:03:03.0000] <tobie>
annevk: oh, that's an interesting strategy.

[02:03:33.0000] <annevk>
The copy-and-paste migrations go wrong and actually make things harder to follow

[02:03:56.0000] <tobie>
So that would be sort of like summarising and moving only ongoing issues to GH

[02:04:01.0000] <annevk>
Personally I just keep the bugs open, but there's probably some cut-off point where you should just migrate the remainder

[02:05:50.0000] <tobie>
I guess that makes sense.

[02:06:32.0000] <annevk>
https://www.npmjs.com/package/rdf-fetch hah

[02:06:38.0000] <annevk>
Can't escape 'm

[02:07:02.0000] <Ms2ger>
tobie, one thing I remember running into was that it doesn't support the grammar thingies

[02:07:39.0000] <tobie>
Ms2ger: I kind of suspected that was going to be an issue.

[02:08:11.0000] <tobie>
Did you run a manual transform or did you write some tools to do it?

[02:08:24.0000] <Ms2ger>
Manually with liberal search&replace

[02:08:29.0000] <tobie>
:D

[02:10:12.0000] <Ms2ger>
https://github.com/Ms2ger/webidl/tree/bs btw

[02:10:47.0000] <Ms2ger>
tobie, I also filed https://github.com/tabatkins/bikeshed/issues/542

[02:11:50.0000] <tobie>
ta

[02:17:51.0000] <Ms2ger>
tobie, fwiw, there's a webidl planning meeting at Mozilla's all hands meeting next week

[02:19:15.0000] <tobie>
Ms2ger: I'll DM you a snail mail address where Mozilla can send me my plane tickets.

[02:19:45.0000] <Ms2ger>
Where are you based nowadays?

[02:19:57.0000] <tobie>
Ms2ger: Geneva, Switzerland

[02:20:17.0000] <Ms2ger>
Maybe you can get there in annevk's carry-on :)

[02:20:33.0000] <tobie>
maybe

[02:20:50.0000] <tobie>
annevk? how big is your suitcase?

[02:20:54.0000] <annevk>
I've met tobie and that seems unlikely

[02:21:32.0000] <tobie>
My 6 month old son would fit, however.

[02:21:42.0000] <tobie>
He's got mad editing skilz

[02:22:03.0000] <tobie>
Not sure about his english, though.

[02:22:33.0000] <tobie>
More seriously; where's that thing going to be?

[02:22:40.0000] <annevk>
tobie: I'll happily pay for your flight

[02:23:10.0000] <annevk>
tobie: London, near Paddington iirc

[02:23:14.0000] <AutomatedTester>
tobie: London

[02:23:22.0000] <tobie>
Oh, I could totally do that.

[02:23:46.0000] <tobie>
When would that meeting be?

[02:24:04.0000] <annevk>
tobie: Mozilla is meeting all of next week, starting Tuesday

[02:24:35.0000] <tobie>
sure, but I just need to attend the WebIDL meetings

[02:24:42.0000] <annevk>
tobie: would be nice, so you can meet bz and heycam if you haven't before

[02:25:04.0000] <annevk>
tobie: right, I think that's scheduled for midday Wednesday

[02:25:05.0000] <tobie>
depending on the day--I could certainly make it.

[02:25:27.0000] <tobie>
OK, let me check and get back to you.

[02:25:43.0000] <tobie>
Think Moz could cover the ticket?

[02:26:25.0000] <annevk>
Probably, I can otherwise if it's not excessive

[02:27:37.0000] <tobie>
err--you check, I'll check with Domenic

[02:28:33.0000] <annevk>
Sure, left a message with the people in charge

[02:28:49.0000] <Ms2ger>
It's 11AM UTC+1 Wed

[02:29:20.0000] <tobie>
is UTC+1 the current london time?

[02:29:41.0000] <Ms2ger>
Yes

[02:29:52.0000] <tobie>
your offices are still in the same place I was in last time?

[02:30:15.0000] <annevk>
tobie: the meeting is in some hotel

[02:30:20.0000] <tobie>
oh

[02:30:37.0000] <Ms2ger>
I suspect http://www.hiltonlondonmet.com/

[02:30:53.0000] <Ms2ger>
We'll also need to get you a badge

[02:30:58.0000] <tobie>
https://wiki.mozilla.org/All_Hands/2016_London ?

[02:31:24.0000] <Ms2ger>
Yep

[02:32:21.0000] <annevk>
Ms2ger: that's the one, "Meeting Room 9", whatever that means, 12PM (though that conflicts so somewhere around that time...)

[02:33:22.0000] <Ms2ger>
https://mozillalondonallhands2016.sched.org/event/72q5/webidl-planning says 11AM, are you looking at a calendar in UTC+2?

[02:34:20.0000] <tobie>
sounds like I'm going to spend more on a steampunk outfit than on the plane ticket

[02:35:17.0000] <tobie>
You guys have FB logins for your all hand meetings? (speechless)

[02:35:45.0000] <Ms2ger>
The benefits of outsourcing

[02:35:59.0000] <annevk>
Ms2ger: oops, yes

[02:36:10.0000] <annevk>
Ms2ger: to be fair, that's the only real timezone

[02:36:35.0000] <Ms2ger>
I did the same yesterday while making a hard copy of my calendar

[02:36:44.0000] <annevk>
tobie: you can just create an account

[02:37:42.0000] <annevk>
Ms2ger: what annoys me a lot is that when I can get invited for events, it seems like the timezone information is dropped once I accept

[02:37:52.0000] <annevk>
Ms2ger: it's converted to local time and that's that

[02:37:57.0000] <Ms2ger>
Huh

[02:38:34.0000] <tobie>
Ok. Added this thing.

[02:38:52.0000] <tobie>
Should I plan to stay in town that evening and crash somewhere?

[02:39:07.0000] <tobie>
Or should I just fly back right away?

[02:40:02.0000] <annevk>
tobie: the evening before might be better

[02:40:12.0000] <annevk>
tobie: or both :-)

[02:40:52.0000] <tobie>
yeah--except that's a bit short notice to organize all the baby sitting required.

[02:41:34.0000] <annevk>
tobie: actually, it doesn't matter much, if you hang around on Wednesday we'll for sure be able to have dinner together and some other IDL/DOM folks

[03:26:58.0000] <jgraham>
Speaking of meetings

[03:27:07.0000] <jgraham>
Ms2ger: Any chance you want to go to TPAC?

[03:27:39.0000] <annevk>
/me wonders if MikeSmith is going to TPAC

[03:28:33.0000] <annevk>
rbyers has been convincing me I should go...

[03:29:22.0000] <jgraham>
YEah, rbyers seems to be trying to organise some tsting thing. Ms2ger should be there. Even if I have to get larsberg to manhandle him onto a plane ;)

[03:30:28.0000] <annevk>
jgraham: who do you plan on getting to get larsberg on a plane to do that?

[03:30:28.0000] <AutomatedTester>
jgraham: that shouldnt be difficult for larsberg :P

[03:30:46.0000] <AutomatedTester>
annevk: Jack?

[03:30:56.0000] <AutomatedTester>
the rest of the Servo team?

[03:31:24.0000] <annevk>
/me was not expecting a serious reply

[03:32:34.0000] <AutomatedTester>
you know better than to ask rhetorical questions with this group...

[03:32:38.0000] <jgraham>
annevk: I think larsberg is usually on a plane

[03:32:49.0000] <jgraham>
Although mostly flying back from Japan

[03:33:24.0000] <jgraham>
I'm sure he can schedule Tokyo->Brussels->Lisbon->Chicago somehow

[04:04:56.0000] <Ms2ger>
jgraham, when

[04:06:54.0000] <jgraham>
Ms2ger: https://www.w3.org/2016/09/TPAC/

[04:27:25.0000] <MikeSmith>
tobie: about the bug migration, what annevk said

[04:27:56.0000] <MikeSmith>
tobie: but also FYI I have never done a mass migration from bugzilla into github

[04:28:16.0000] <MikeSmith>
tobie: maybe dom or robin has, or plh

[04:28:33.0000] <tobie>
ok

[04:28:45.0000] <tobie>
MikeSmith: ok

[04:29:26.0000] <tobie>
MikeSmith: who do I need to talk to to give me a bit more privileges on the Bugzilla tracker?

[04:29:41.0000] <MikeSmith>
me

[04:29:53.0000] <MikeSmith>
I can go in now and set you up with whatever you need

[04:30:14.0000] <tobie>
MikeSmith: awesome.

[04:30:43.0000] <tobie>
No idea what I need precisely, but something so I can open/close issues, etc.

[04:31:03.0000] <MikeSmith>
tobie: btw just for the sake of comparison, there are still 151 bugs open bugs for HTML in bugzilla

[04:31:06.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/buglist.cgi?component=HTML&list_id=63854&product=WHATWG&resolution=---

[04:31:14.0000] <tobie>
think I'm using my gmail account on this (tobie.langel‚äôgc)

[04:31:21.0000] <tobie>
oh wow

[04:31:30.0000] <MikeSmith>
down from 350 or someting when it was first moved to github

[04:32:06.0000] <MikeSmith>
those 151 bugs are all pretty tough ones

[04:32:27.0000] <MikeSmith>
the low-hanging fruit was dealt with a long time ago, then the medium-hanging fruit

[04:32:40.0000] <tobie>
I see

[04:33:05.0000] <MikeSmith>
but in parallel a ton of work has been done at https://github.com/whatwg/html/issues and https://github.com/whatwg/html/pulls

[04:33:39.0000] <MikeSmith>
more than 700 PRs and more than 650 issues

[04:34:39.0000] <MikeSmith>
(this is all for the source, not the fork)

[04:36:30.0000] <MikeSmith>
tobie: OK just gave you editcomponents editkeywords editclassifications perms

[04:37:09.0000] <MikeSmith>
there is no more that is give-able without making you an admin

[04:37:20.0000] <MikeSmith>
which I can do if really needed

[04:39:30.0000] <MikeSmith>
annevk: will be at TPAC

[04:39:33.0000] <MikeSmith>
in full effect

[04:53:25.0000] <Ms2ger>
MikeSmith, I guess that's reason enough to come

[04:58:08.0000] <MikeSmith>
Ms2ger: yeah I know people like the play the odds on trying to most accurately pick the time during each meeting when I nod off and then suddenly snap back awake while making some weird gurgling sound

[05:07:12.0000] <ondras>
so, looking for an advice re. web app security

[05:07:38.0000] <ondras>
initially, we passed our (config) values to JS via a server-side template: <script>var CONF = {{somedata}}</script>

[05:07:49.0000] <ondras>
the we decided to use CSP without unsafe-inline

[05:07:54.0000] <ondras>
so we moved this to a .js file

[05:08:08.0000] <ondras>
<script src="conf.js"></script>, conf.js: var CONF = {{somedata}}

[05:08:23.0000] <ondras>
but it turns out that somedata is sensitive, cookie-based auth

[05:08:42.0000] <ondras>
so an attacker can insert <script src="ourdomain/conf.js"></script>

[05:08:49.0000] <ondras>
what are my options here?

[05:08:58.0000] <ondras>
fetching conf via XHR, Referer check, anything else?

[05:14:09.0000] <ondras>
annevk: ^

[05:17:40.0000] <annevk>
ondras: XHR/fetch

[05:18:05.0000] <annevk>
ondras: in the future maybe first-party cookies, but I'm not entirely sure what the processing model of those is going to be

[05:19:09.0000] <annevk>
ondras: that's an interesting little story you got there though

[05:19:40.0000] <annevk>
ondras: note that for a slightly different reason this is also a bad API; this is similar to JSONP which some sites use to talk to each other

[05:19:50.0000] <annevk>
ondras: basically allowing the other site to execute code in your origin

[05:20:13.0000] <annevk>
ondras: basically whenever you have data to exchange, put it behind some HTTP API

[05:21:09.0000] <ondras>
right, I am pretty familiar with JSONP

[05:21:24.0000] <ondras>
moving this stuff to .js was a straightforward way to do CSP

[05:21:36.0000] <ondras>
I guess nobody thought about potential security issues with this approach

[05:22:01.0000] <ondras>
annevk: thanks for consultation and your time! What do you thing about that Referer check as a fast way to fix this?

[05:22:36.0000] <annevk>
ondras: what would you do when Referer is omitted?

[05:22:43.0000] <ondras>
403

[05:22:47.0000] <ondras>
or similar

[05:22:54.0000] <ondras>
401

[05:22:56.0000] <ondras>
..

[05:23:01.0000] <annevk>
ondras: coupled with the cookie that might be sufficient

[05:23:13.0000] <annevk>
ondras: status code doesn't matter so much, as long as you don't include the content

[05:23:17.0000] <ondras>
right

[05:23:23.0000] <ondras>
the cookie is going to stay there

[05:23:32.0000] <annevk>
ondras: but some software on the user's computer might strip Referer

[05:23:35.0000] <ondras>
I am just not sure whether all regular UAs sned the Referer

[05:23:46.0000] <ondras>
hm, do we have any numbers on that?

[05:23:56.0000] <annevk>
ondras: Google had some numbers on that (5% iirc), not sure if it affects HTTPS too

[05:24:12.0000] <annevk>
ondras: that's in part why CORS has Origin

[05:24:13.0000] <ondras>
annevk: the whole site is https only

[05:24:35.0000] <annevk>
Although Origin and Referer can be different too... hmm

[05:56:02.0000] <MikeSmith>
zcorpan: I based together something for the comment thing, and pushed it to https://checker.html5.org/

[05:56:22.0000] <MikeSmith>
zcorpan: I have done almost no testing of it

[05:56:45.0000] <MikeSmith>
if we are going to ever really land it we will need test cases

[05:57:05.0000] <MikeSmith>
in the mean time please try it and see what I missed

[05:57:15.0000] <MikeSmith>
beacuse I‚Äôm sure I did miss something

[05:57:32.0000] <MikeSmith>
it handles the new error for <!--

[05:57:37.0000] <MikeSmith>
or intends to

[05:57:48.0000] <MikeSmith>
diff of the parser change is at https://github.com/validator/htmlparser/commit/f0b12a2769734ddf716d7fa4f54f2da90a4dd6ef

[05:58:17.0000] <MikeSmith>
/me with that steps away for a couple hours

[05:58:36.0000] <zcorpan>
MikeSmith: awesome, will check. thanks

[05:58:40.0000] <MikeSmith>
cheers

[06:27:35.0000] <zcorpan>
/me commented on the diff

[06:32:21.0000] <zcorpan>
MikeSmith: in what form do you prefer to have test cases? html5lib tokenizer tests?

[06:33:12.0000] <zcorpan>
/me gotta go, will read logs

[07:18:01.0000] <annevk>
Hmm, so navigation in the HTML Standard is broken...

[07:18:51.0000] <annevk>
manishearth: e.g., as you likely have discovered too, if you get a 204, even as the result of a redirect, the unload process will not have started yet

[07:19:09.0000] <annevk>
manishearth: unloading starts after you get a response (all HTTP headers are in)...

[07:19:20.0000] <annevk>
How can this have been wrong for so long?

[07:19:43.0000] <manishearth>
annevk: nobody implements the spec word-to-word :)

[07:19:45.0000] <manishearth>
except servo

[07:20:30.0000] <jgraham>
*including servo

[07:20:35.0000] <Manishearth>
well, yeah

[07:20:39.0000] <annevk>
Servo is the hero standards need, but they don't deserve it

[07:20:45.0000] <Manishearth>
but we try to get our code matching the spec as much as possible

[07:21:03.0000] <Manishearth>
AFAICT other browsers read the spec, get an idea of what's necessary, and then implement it independently, perhaps glancing at the spec

[07:21:18.0000] <Manishearth>
at least, that's the vibe I've gotten from gecko code. but I haven't looked at much

[07:21:42.0000] <Manishearth>
we deviate from the spec when we don't implement a feature or if we feel that a set of steps is equivalent

[07:21:45.0000] <Manishearth>
but this is small scale

[07:21:53.0000] <Manishearth>
(not the "don't have the feature" thing)

[07:22:10.0000] <Manishearth>
but the nice thing is that it's very easy to find bugs when your code is like this. either in servo or in the spec :)

[07:23:50.0000] <annevk>
The amount of spec that needs to be rewritten for navigation appears to be most of it

[07:24:12.0000] <annevk>
But I'm slowly getting a sense of what it needs to do, unfortunately another week of distraction is coming up

[07:25:31.0000] <annevk>
The behavior in browsers is also far more logical... Wait for a final response, than unload if necessary

[07:27:00.0000] <Manishearth>
annevk: :(

[07:29:16.0000] <annevk>
Manishearth: sometime Europe's summer this will all be in a much better state, navigation and allocating documents

[07:29:39.0000] <annevk>
Unless it ends up being too hard, but so far it seems tractable, just taking loads of time

[07:30:00.0000] <Manishearth>
ah

[07:30:36.0000] <annevk>
I guess there's also the caveat that my manager has some other priorities, but that seems unlikely

[07:32:37.0000] <jgraham>
I'm not sure what browsers do for navigation is *that* sane

[07:32:48.0000] <jgraham>
Depending on what you mean by navigation

[07:33:08.0000] <jgraham>
e.g. the stuff about how documents don't end up in the session history if they get unloaded too eaerly

[07:33:11.0000] <jgraham>
*early

[07:40:17.0000] <annevk>
Manishearth: if you're still curious, redirects do have an effect with fragments

[07:40:45.0000] <annevk>
Manishearth: so test.html that navigates to redirect-to-test.html#x and thus ends up being test.html#x will unload

[07:41:26.0000] <Manishearth>
nice

[07:41:34.0000] <annevk>
Manishearth: so that whole thing of jumping back to the fragments step after redirects...

[07:42:00.0000] <Manishearth>
oh I see how this can get complicated :)

[07:42:58.0000] <annevk>
tobie: not sure if you're still around, but see various PMs

[07:43:46.0000] <annevk>
jgraham: is that about the algorithm maturing?

[07:44:04.0000] <annevk>
jgraham: I've mostly been studying the "basics" thus far

[07:44:52.0000] <jgraham>
annevk: I don't recall if it's in the spec or not, but I remember running into interop problems around what happened to the history if you did document.open during load or similar

[07:45:08.0000] <jgraham>
This was some time ago though

[08:39:57.0000] <jgraham>
/me grumbles at Travis (the person, not the CI tool)

[09:48:44.0000] <mathiasbynens>
/me spots annevk‚Äôs Twitter bio

[09:49:44.0000] <annevk>
mathiasbynens: closest to a business card, which I don‚Äôt have

[10:51:49.0000] <tobie>
MikeSmith: ty

[10:54:08.0000] <tobie>
annevk: BEARD!!

[11:39:13.0000] <wanderview>
tobie: that was my thought as well


2016-06-12
[08:41:00.0000] <qFox>
hey. what's the proper term for a javascript: url and where can i find specs for that?

[08:45:38.0000] <Ms2ger>
In the HTML spec, navigation section

[09:00:19.0000] <qFox>
i guess here https://w3c.github.io/html/browsers.html#navigating-across-documents , thanks :)

[09:01:07.0000] <Ms2ger>
Nonono

[09:01:28.0000] <Ms2ger>
https://html.spec.whatwg.org/multipage/browsers.html#javascript-protocol

[09:01:41.0000] <Ms2ger>
W3C's fork of HTML is notoriously low-quality

[09:05:28.0000] <qFox>
ah, sorry for cursing :)

[09:08:45.0000] <qFox>
a little confusing in both specs (which say nearly the same thing); that spec mentions explicitly what happens when the result is not a string. yet in the example below it it explicitly mentions that "its return value (if it was not void) would replace that browsing context's Document".

[09:09:33.0000] <qFox>
this kind of implies (and only through the example) that an undefined result, triggers a status code 204 but does not throw away the current browsing context. is that correct?

[09:11:07.0000] <Ms2ger>
The example is probably wrong

[09:11:19.0000] <Ms2ger>
The check for being a string was changed recently?

[09:12:25.0000] <Ms2ger>
https://github.com/whatwg/html/issues/1415

[09:12:27.0000] <qFox>
ok. so what _should_ happen for undefined results?

[09:13:18.0000] <qFox>
(another reading could be that "void" in the example refers to a spec artifact rather than the actual JS value "undefined"...)

[09:14:57.0000] <qFox>
the reason that actually drew me here was what the context should be that these urls should run in. when you do `javascript:this.x=5,'<script>console.log(this.x);</script>'; what should happen? for example; firefox says it works, chrome says it doesnt

[09:15:14.0000] <qFox>
*when it's the url of an iframe...

[09:17:06.0000] <Ms2ger>
File an issue? I think it's known, but I can't find an open issue

[10:01:55.0000] <Ms2ger>
TabAtkins, thanks, you're a gentleman and a scholar


2016-06-13
[18:29:51.0000] <jacobolus>
it seems that when I try to draw a >100 bezier curve segment path in the canvas, only the first 100 segments get drawn

[18:29:57.0000] <jacobolus>
does anyone know where that limit is documented?

[18:30:11.0000] <jacobolus>
(I apparently this limit in both safari and firefox)

[18:35:12.0000] <jacobolus>
doesn't raise any console errors or anything, just silently stops adding segments to the path

[19:02:54.0000] <jacobolus>
okay nevermind, the effect apparently vanished, and now I can't reproduce it.

[19:02:58.0000] <jacobolus>
maybe was a bug in my code

[03:43:25.0000] <mkwst>
annevk: I'd like to move the "site for cookies" definition from https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-2.1.1 to somewhere (and potentially expose it to JavaScript).

[03:44:07.0000] <mkwst>
annevk: We discussed this (very) briefly in February (https://lists.w3.org/Archives/Public/ietf-http-wg/2016JanMar/0249.html). It's not clear to me what needs to go where, though. :)

[03:44:30.0000] <mkwst>
Is "site for cookies" a concept you'd see folding into HTML? Or Fetch? Or touching both, I suppose?

[03:45:38.0000] <mkwst>
Touches on https://storage.spec.whatwg.org/#site, as well, of course.

[04:50:23.0000] <annevk>
mkwst: HTML I suppose, with URL defining site?

[04:51:07.0000] <annevk>
Anyone in the Metropole already? wanderview and I are considering lunch in a bit‚Ä¶

[04:52:33.0000] <gsnedders>
annevk: from other channelspeople I know are in the one that begins with L whose name I've now forgotten

[04:52:54.0000] <gsnedders>
Landmark. That's it.

[04:53:06.0000] <gsnedders>
But that's probably sample bias as to who I speak to more :P

[04:53:25.0000] <annevk>
gsnedders: Metropole houses platform supposedly

[04:53:38.0000] <gsnedders>
annevk: Research is all in Landmark

[04:54:17.0000] <annevk>
Ugh, that should really be located with platform, imo

[04:54:55.0000] <gsnedders>
/me suspects this mostly came down to fitting with the number of rooms they got for a not insane price

[04:55:09.0000] <gsnedders>
"not insane price" and London don't really go together though

[05:04:06.0000] <jgraham>
The Landmark is considerably more insane

[05:04:39.0000] <jgraham>
So I iamgine they filled the cheap(er) hotels first and then put the remainders in the expensive one

[05:05:06.0000] <gsnedders>
does anyone know where the volunteers ended up?

[05:13:00.0000] <annevk>
Metropole for some at least

[05:13:59.0000] <gsnedders>
I was just like "yyeeeaaaahhhhh sharing a room I'll stay half an hour away with a room of my own for free"

[05:14:11.0000] <annevk>
Also, please don't use insane in a derogatory way

[05:15:07.0000] <annevk>
gsnedders: didn't know you moved

[05:15:50.0000] <gsnedders>
annevk: I haven't

[07:03:12.0000] <tobie>
TabAtkins, others: Is there a bikeshed definition <-> auto-link dictionary?

[07:03:55.0000] <tobie>
context: looking at converting WebIDL to bikeshed and seems reverse-engineering the links to bikeshed shorthand would make for an easier to edit spec.

[07:40:18.0000] <Ms2ger>
tobie, did we manage to get you here for the meeting?

[07:41:09.0000] <tobie>
yup--got my plane and Heathrow Express tickets

[07:41:19.0000] <tobie>
Now trying to find a couch or hotel room.

[08:29:34.0000] <MikeSmith>
igrigorik_: is <link rel=preload> meant to be allowed in the body of a document? (not just in the head)

[08:29:51.0000] <MikeSmith>
igrigorik_: I mean in the way that rel=prerender/prefetch/preconnect are allowed in the body now

[08:31:31.0000] <MikeSmith>
igrigorik_: nm, looking at https://github.com/whatwg/html/pull/616 now I see you specifically mention it

[10:05:35.0000] <TabAtkins>
tobie: What do you mean?

[10:06:12.0000] <tobie>
TabAtkins: the WebIDL spec is a pretty large XML file

[10:06:31.0000] <tobie>
which gets converted to HTML through an XSLT stylesheet

[10:06:35.0000] <TabAtkins>
Right.

[10:06:40.0000] <TabAtkins>
(I've done PRs on it.)

[10:07:03.0000] <tobie>
The idea's to convert it to Bikeshed

[10:07:44.0000] <tobie>
Right, now I'm toying with doing that using a modified version of the XSLT stylesheet used to convert it to HTML

[10:08:22.0000] <TabAtkins>
I'd strongly recommend just converting it to Bikeshed-HTML directly. ^_^

[10:09:03.0000] <tobie>
oh yeah, absolutely

[10:09:33.0000] <tobie>
Doing such transformations on such a huge spec manually seems brittle, though

[10:10:27.0000] <TabAtkins>
Eh, I did it with DOM. You'd have to ask annevk, but I think I did all right.

[10:10:47.0000] <TabAtkins>
But anyway!

[10:10:47.0000] <tobie>
You did it by hand?

[10:10:50.0000] <TabAtkins>
Yeah

[10:11:27.0000] <TabAtkins>
it took a few months worth of weekends, tho. ^_^

[10:11:32.0000] <tobie>
haha

[10:11:55.0000] <tobie>
an transform sheet seems a lot faster, then. :D

[10:12:08.0000] <TabAtkins>
But yeah, anyway, I was actually asking what you meant by " Is there a bikeshed definition <-> auto-link dictionary?". I know all about your project (I helped Domenic deal with it)

[10:12:41.0000] <tobie>
TabAtkins: right

[10:13:05.0000] <tobie>
Maybe my assumptions are wrong, here, so do tell me if they are. :)

[10:13:45.0000] <tobie>
TabAtkins: what I was thinking was that it would be better to turn the expanded HTML links and dfns into bikeshed shorthand

[10:14:03.0000] <tobie>
(better for editing purposes)

[10:16:53.0000] <TabAtkins>
sure. so what are you actually asking for?

[10:18:09.0000] <tobie>
TabAtkins: For example, when I see <dfn data-export="" data-dfn-for="union" id='dfn-flattened-union-member-types'>flattened member types</dfn> how do I best turn it into bikeshed shorthand

[10:18:33.0000] <TabAtkins>
Ah!

[10:18:54.0000] <tobie>
yeah, sorry if that wasn't super clear.

[10:19:10.0000] <TabAtkins>
So in general, the docs for marking up definitions should explain this.  It doesn't have *details* on this reverse transformation, but it should be obvious what becomes what.

[10:19:19.0000] <TabAtkins>
In particular, that example becomes:

[10:19:50.0000] <TabAtkins>
<dfn export for=union id=dfn-flattened-union-member-types>flattened member types</dfn>

[10:19:59.0000] <TabAtkins>
It's mostly just dropping the prefixes on the attrs.

[10:20:23.0000] <TabAtkins>
If you want to convert links all the way down to the textual shorthands it's a bit more dramatic, obvious.

[10:20:42.0000] <tobie>
It's the links I was interested in actually

[10:21:12.0000] <TabAtkins>
Same advice applies then. Gimme an example, and i'll brb

[10:23:44.0000] <tobie>
<a class='dfnref' href='#dfn-optional-argument'>operation optional argument</a>

[10:23:47.0000] <tobie>
for example

[10:24:09.0000] <tobie>
^ TabAtkins

[10:28:14.0000] <TabAtkins>
tobie: So it depends a little bit on what the linking text of the dfn is; if it matches the text you're linking, it's just <a>operation optional argument</a>.

[10:28:30.0000] <TabAtkins>
Or in text shorthand form, [=operation optional argument=]

[10:28:53.0000] <TabAtkins>
If you're linking slightly different text than what the definition declares, you've got two options.

[10:29:12.0000] <TabAtkins>
Either expand the dfn's linking text, with <dfn lt="first text | second text | ...">

[10:29:19.0000] <tobie>
Right

[10:29:30.0000] <TabAtkins>
Or specify the linking text manually on the link, with either <a lt="linking text">visible text</a>

[10:29:42.0000] <TabAtkins>
Or [=linking text|visible text=]

[10:30:41.0000] <tobie>
OK, I guess the part I'm slightly confused about is how does the linking text relate to the dfn's id

[10:30:51.0000] <tobie>
especially if you specify the id manually

[10:31:38.0000] <TabAtkins>
There is no intrinsic relation.  Bikeshed will auto-gen an ID for you from the dfn's (first) linking text (and its type), but that has nothing to do with autolinking.  If you specify an ID manually, it just leave that alone.

[10:34:51.0000] <tobie>
OK. SO I guess I should just use the href of the links to get to the dfn, and use the dfn's textContent as lt foe the link.

[10:35:02.0000] <tobie>
s/for/foe/

[10:35:06.0000] <TabAtkins>
Since you're coming from a spec with IDs that don't match up with Bikeshed's autogenning pattern, you should definitely manually preserve all the current IDs.

[10:35:14.0000] <tobie>
absolutely

[10:35:53.0000] <TabAtkins>
And yeah, that'll work.  You can then do a cleanup pass to remove any lt that matches the literal text.

[10:36:19.0000] <tobie>
But ideally (and again, correct me if I'm wrong), the links and dfns inside of the spec itself shouldn't rely on these legacy IDs.

[10:36:35.0000] <TabAtkins>
Correct, Bikeshed doesn't care about IDs one whit.

[10:36:54.0000] <tobie>
Alright. That makes sense.

[10:37:01.0000] <tobie>
Thanks.

[10:37:22.0000] <TabAtkins>
np, ping me if you have any other questions, happy to help get this project to completion.

[10:37:48.0000] <tobie>
Follow-up Q if I may. Since I'll be generating those links, would you go for constantly using <a> or would you favor the shorthand?

[10:38:23.0000] <TabAtkins>
Don't care, up to you.

[10:38:53.0000] <tobie>
TabAtkins: is there a best practice of some sort, here?

[10:39:12.0000] <tobie>
I mean, I haven't used Bikeshed beyond the sensor specs

[10:39:15.0000] <TabAtkins>
Nope, it's up to the spec author which they prefer.

[10:39:38.0000] <TabAtkins>
Particularly for "dfn"-type links.  I strongly recommend using the text shorthand for the other types, like IDL.

[10:39:59.0000] <TabAtkins>
But the difference between <a>foo</a> and [=foo=] is fairly small, so whatever.

[10:40:12.0000] <tobie>
ok, that makes sense.

[10:40:15.0000] <tobie>
Thanks

[10:42:44.0000] <tobie>
TabAtkins: If the XSLT solution proves to be the right one (and so far it does), I'll run the output your way before merging it.

[10:42:51.0000] <TabAtkins>
cool

[10:50:37.0000] <frewsxcv_>
Apple just announced Apple Pay in websites

[10:50:48.0000] <frewsxcv_>
Where's that in a spec? :)

[11:24:44.0000] <MikeSmith>
frewsxcv_: hopefully it is https://w3c.github.io/browser-payment-api/

[12:25:29.0000] <Domenic>
Welp https://developer.apple.com/reference/applepayjs

[12:29:12.0000] <jamesr_>
what's an "iOS and OS X Safari based website"?

[12:31:00.0000] <caitp>
a website for people with money

[12:31:42.0000] <caitp>
money to throw away on items needed to buy items sold on your website that only renders on those said expensive items

[15:06:49.0000] <TabAtkins>
tobie: I just added an "extended-attribute" definition type, for the bunch of [foo] things that WebIDL defines.  The linking text will be the word itself, not including the brackets.

[15:07:15.0000] <TabAtkins>
(This'll automatically link things up in everyone's WebIDL blocks once you finish up the spec conversion.)

[15:08:52.0000] <tobie>
TabAtkins: I'm not sure what you mean (yet) but this sounds great.

[15:09:02.0000] <aleray>
hi, I'm trying to create a filter using python that would search all the data token for some strings and wrap the results in some tag (like <mark>)

[15:10:06.0000] <TabAtkins>
tobie: I mean that when you're marking up all the extended attributes in section 4.3, mark them up with the new type.

[15:10:38.0000] <tobie>
TabAtkins: yeah--sorry; past midnight, slow brain gets slower.

[15:11:07.0000] <aleray>
here is what I have at the moment: http://dpaste.com/2DP0RFW

[15:11:27.0000] <aleray>
but in between line 16 and 20 it is a little bit fuzzy

[15:12:43.0000] <tobie>
TabAtkins: sounds like this might be easier to do post-conversion.

[15:12:46.0000] <tobie>
We'll see.

[15:13:04.0000] <TabAtkins>
tobie: Yeah, it's just a five-minute pass over the headings to mark them as definitions of the right type.

[15:13:11.0000] <tobie>
yup

[15:13:32.0000] <TabAtkins>
Just pinging you now, because I just added this at HTML's request, because they define several extended attributes of their own.

[15:14:08.0000] <TabAtkins>
aleray: This sounds like something that should just be done by re.sub().

[15:14:58.0000] <aleray>
TabAtkins, can I do this in a filter? I tried but it escaped all the html entities

[15:15:07.0000] <TabAtkins>
What is a filter?

[15:15:28.0000] <TabAtkins>
(It sounds like you're using some web framework?)

[15:15:30.0000] <aleray>
TabAtkins, I'm using HTML5lib filters

[15:15:46.0000] <aleray>
sorry I should have mentionned

[15:16:50.0000] <TabAtkins>
Oh! I have no clue, never used those.  I work in an LXML tree after html5lib is done, and wrote a variant of re.sub() that handles replacing string bits with real objects.

[15:17:13.0000] <aleray>
I could actually make my life easier working directly on the tree

[15:17:18.0000] <aleray>
OK I try

[15:17:24.0000] <aleray>
:)

[15:18:27.0000] <TabAtkins>
https://github.com/tabatkins/bikeshed/blob/master/bikeshed/config.py#L356 and the following function

[15:18:59.0000] <TabAtkins>
reSubObject() actually does the substitution, but processTextNodes() lets me chain that across multiple replacers easily.


2016-06-14
[19:17:04.0000] <MikeSmith>
https://whatwebcando.today/ is nice but should track a lot more features

[19:35:13.0000] <MikeSmith>
yoav: is there an open webkit bug for adding support for <link rel=preload>

[21:35:02.0000] <yoav>
MikeSmith: I see you opened one

[00:01:50.0000] <annevk>
So yeah, unsubscribed from public-webapps

[00:02:03.0000] <annevk>
Guess that era is over

[00:03:43.0000] <MikeSmith>
annevk: yup

[00:03:49.0000] <MikeSmith>
for better or worse

[00:05:01.0000] <MikeSmith>
yoav: yeah, did not find that you or igrigorik_ had opened one yet

[00:06:34.0000] <yoav>
MikeSmith: Cool. I opened smaller issues as I'm implementing, but always nice to have a meta-issue

[00:07:47.0000] <tantek>
what happened to public-webapps?

[00:08:09.0000] <tantek>
just transition wpwg?

[00:08:24.0000] <annevk>
The bureaucrats took over

[00:08:35.0000] <tantek>
sigh

[00:09:16.0000] <annevk>
"being concerned with procedural correctness at the expense of people's needs" is apt in particular as it was called out a few times

[00:12:56.0000] <tantek>
did any browser implementers respond to the HTML 5.1 CfC for CR? I was busy with conferences at the time and it already closed. https://lists.w3.org/Archives/Public/public-webapps/2016AprJun/thread.html#msg99

[00:15:30.0000] <tantek>
If I don't find any I may reply to that thread pointing out that an HTML CfC is meaningless without any browser implementer participation

[00:16:37.0000] <annevk>
tantek: Microsoft and Yandex

[00:16:53.0000] <tantek>
I didn't know Yandex made a browser

[00:16:54.0000] <MikeSmith>
yoav: I actually wasn‚Äôt aware you were already implementing it in WebKit

[00:17:05.0000] <tantek>
annevk: who at Microsoft?

[00:17:28.0000] <annevk>
tantek: Microsoft edits the fork, Adrian, Travis, Aaron, ...

[00:17:49.0000] <annevk>
tantek: I don't think they're doing a particularly good job, but they're making changes and copying our work

[00:18:14.0000] <tantek>
thank annevk. I'll look into it further.

[00:18:26.0000] <MikeSmith>
yoav: I saw one bug about preload and events but wasn‚Äôt sure how it was related (and didn‚Äôt look into it further)

[00:19:12.0000] <MikeSmith>
tantek: the thing is, they already made a bunch of decisions unilaterally without even attempting to ask the WG and record WG decisions

[00:19:17.0000] <MikeSmith>
as they are supposed to

[00:19:37.0000] <MikeSmith>
and as they would if they were actuallly sincere about operating by consensus

[00:19:47.0000] <tantek>
MikeSmith: so it really is off the rails completely then

[00:19:52.0000] <MikeSmith>
yes

[00:19:54.0000] <MikeSmith>
bingo

[00:20:09.0000] <MikeSmith>
they are operating way out of consensus at this point

[00:20:44.0000] <MikeSmith>
it is just the many people do not even care enough any longer to even bother to speak up

[00:21:15.0000] <tantek>
this is exactly what I need to be hearing. AB f2f meeting is next week.

[00:22:23.0000] <MikeSmith>
well at this point I do not know what difference it would make, because they have already decided to operate so far outside of the W3C‚Äôs own process

[00:23:09.0000] <MikeSmith>
they have basically fundamentally de-legitimized everything they are doing

[00:23:18.0000] <tantek>
in particular this is highly problematic since two WPWG co-chairs are now on the AB, so it is even worse to not be following W3C's own process

[00:24:08.0000] <MikeSmith>
I am sure they have some ends-justify-the-means rationalization about it

[00:24:36.0000] <tantek>
that's not going to fly at the AB

[00:25:27.0000] <MikeSmith>
meanwhile chaals in particular is quietly and unilaterally pulling stunts like this: https://github.com/w3c/html/pull/484/commits/19c383bbce5f032f8e66470d44a95f52f4f0f940

[00:26:31.0000] <MikeSmith>
‚Äúresetting‚Äù the acknowledgements for a document they are hostile-copying against the wishes of the authors who actually created

[00:26:50.0000] <MikeSmith>
‚Äúresetting‚Äù the acknowledgements by essentially removing 99% of them

[00:27:04.0000] <tantek>
that seems quite rude

[00:27:59.0000] <MikeSmith>
it is gall on top of rudeness motivated by genuine pathology

[00:29:06.0000] <MikeSmith>
he replaced the real acknowledgements with thanks to a list of people who have had zero to do with this actual document but instead worked on ancient previous versions of HTML specs at the W3C

[00:29:26.0000] <MikeSmith>
and on XHTML ‚Äúfamily‚Äù specs

[00:31:15.0000] <tantek>
that is very odd indeed

[00:33:33.0000] <MikeSmith>
tantek: in the little bizarro universe he has constructed for himself around this, I am sure it all makes perfect sense to him

[00:33:50.0000] <MikeSmith>
it is certainly consistent with the rest of the crazy shit he has been doing there

[00:34:45.0000] <MikeSmith>
loose cannon on personal vendetta as chair of a WG

[00:34:51.0000] <tantek>
I really do not understand the motivations for these actions. Like why is it worth the personal time to bother with.

[00:35:03.0000] <MikeSmith>
neurosis

[00:35:10.0000] <MikeSmith>
is the motivation

[00:35:15.0000] <MikeSmith>
if not something worse

[00:35:27.0000] <MikeSmith>
going back years now

[00:35:55.0000] <tantek>
it just looks petty at this point

[00:35:56.0000] <MikeSmith>
petty payback time

[00:35:59.0000] <MikeSmith>
yeah

[00:35:59.0000] <tantek>
lol

[00:36:04.0000] <MikeSmith>
sad

[00:36:10.0000] <Ms2ger>
/me waves

[00:36:17.0000] <tantek>
yeah, I'm off to get breakfast here in London

[00:36:32.0000] <MikeSmith>
and extra sad that he has managed to take of all of public-webapps down with him

[00:36:37.0000] <Ms2ger>
/me should do likewise

[00:36:41.0000] <MikeSmith>
hai

[00:37:02.0000] <Ms2ger>
Chaals on an empty stomach is not something I recommend

[00:57:24.0000] <ondras>
annevk: why is there only a very small amount of response http headers available to JS for crossorigin requests, even if the request is explicitely allowed via CORS?

[01:00:26.0000] <Mek>
ondras: you mean why there is a Access-Control-Expose-Headers header?

[01:02:47.0000] <ondras>
Mek: well I mean why is there https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name

[01:03:25.0000] <Mek>
ondras: well, that's kind of the same question. That's the list of headers that is available even without explicitly allowing any via the CORS Access-Control-Expose-Headers header

[01:04:13.0000] <ondras>
Mek: right. so I would like to know why there is a separate way to whitelist headers which somehow duplicates the fact that the response itself -- the body -- was already made available via Access-Control-Allow-Origin

[01:04:39.0000] <ondras>
Mek: or, in other words, why does one want to hide headers but make the body public

[01:11:15.0000] <annevk>
ondras: we want explicit consent for both

[01:11:37.0000] <annevk>
ondras: to avoid exposing debug headers and such

[01:17:58.0000] <ondras>
annevk: interesting, although I probably do not exactly see the motivation/usecase... the server owner already made the guarantee that the client may process his response data

[01:31:47.0000] <annevk>
ondras: it just makes it a little trickier to copy-and-paste yourself into a bad situation

[01:32:16.0000] <annevk>
ondras: a lot of CORS is motivated by that

[01:32:47.0000] <annevk>
ondras: not really my preference, but so be it

[01:33:08.0000] <ondras>
okay, thanks

[04:15:05.0000] <zcorpan>
MikeSmith: i suppose case COMMENT_LESS_THAN_BANG_DASH: should be moved down to

[04:15:08.0000] <zcorpan>
                 case COMMENT_END_DASH:

[04:15:09.0000] <zcorpan>
                 case COMMENT_START_DASH:

[04:15:09.0000] <zcorpan>
                     errEofInComment();

[04:15:10.0000] <zcorpan>
                     /* Emit the comment token. */

[04:15:12.0000] <zcorpan>
                     emitComment(1, 0);

[04:49:10.0000] <gsnedders>
zcorpan: how convinced are we that this change introduces no behaviour changes?

[04:49:32.0000] <gsnedders>
zcorpan: modulo parse errors, obviously

[04:51:23.0000] <zcorpan>
gsnedders: i found one bug in MikeSmith's impl from the tests in the PR, see https://github.com/whatwg/html/pull/1356#issuecomment-225839546

[04:51:47.0000] <zcorpan>
gsnedders: but we need to put those tests into html5lib tokenizer tests or something, too

[04:51:59.0000] <gsnedders>
/me is quite worried about unintentional changes here

[04:52:29.0000] <zcorpan>
gsnedders: yep, that's a risk. please review :-)

[04:52:55.0000] <gsnedders>
Hard to review every possible transition

[04:52:56.0000] <zcorpan>
i tried to be as careful as i could be, but i could have made a mistake

[04:53:12.0000] <gsnedders>
And I don't really want to add parse errors to formal model of the tokenizer to verify this

[04:53:50.0000] <zcorpan>
doesn't html5lib already test for parse errors in the tokenizer?

[04:54:07.0000] <gsnedders>
yeah, sure

[04:55:03.0000] <zcorpan>
https://github.com/whatwg/html/pull/1356#issuecomment-222793570 is intended to cover all relevant cases (except U+0000)

[04:55:21.0000] <gsnedders>
but proving equivalence modulo parse errors based on an implementation instead of a formal model is virtually impossible

[04:56:47.0000] <zcorpan>
ah, ok. yeah i suppose i don't have a mathematical proof

[04:57:37.0000] <gsnedders>
and given we know the current spec is web compat I'm very hestitant about introducing changes to it that we /think/ are right but haven't really tested web compat affect of

[05:00:24.0000] <zcorpan>
it's 3 new states, there are a finite number of new cases to consider. no? if the parsed tree is the same for those tests, there's no effect for web compat

[05:02:42.0000] <gsnedders>
yeah, mostly

[05:02:52.0000] <gsnedders>
still needs a kinda handwavey argument around "current node" though

[05:04:16.0000] <zcorpan>
what about current node?

[05:07:35.0000] <gsnedders>
you need to prove it's dead after that state

[05:09:06.0000] <MikeSmith>
zcorpan: yeah, thanks for catching that (moving the error case for COMMENT_LESS_THAN_BANG_DASH)

[05:09:12.0000] <MikeSmith>
was just careless there

[05:10:11.0000] <MikeSmith>
gsnedders: what zcorpan said (about your concern this introduces no behaviour changes)

[05:10:34.0000] <gsnedders>
MikeSmith: which thing he said?

[05:11:33.0000] <MikeSmith>
gsnedders: despite that modulo the one flub I made in my implementation, this is extremely low risk

[05:12:14.0000] <MikeSmith>
it is really only affecting the parse-error behavior, which most implementations do not implement anyway

[05:12:53.0000] <MikeSmith>
the mistake I made was not because of any lack of clarity in the spec text

[05:15:07.0000] <MikeSmith>
and no risk of new problems with web compat, because as zcorpan said there is not actually any effect on web compat

[05:15:55.0000] <MikeSmith>
if you (re)review the whole thing I think you will see that for yourself

[07:16:19.0000] <MikeSmith>
zcorpan: fixed that tokenizing issue and pushed

[07:16:21.0000] <MikeSmith>
https://checker.html5.org/parsetree/?parser=html5&content=%3C%21--%3C%21-&submit=Print+Tree

[07:16:39.0000] <zcorpan>
MikeSmith: yep saw that. writing a comment in the PR :-)

[07:18:19.0000] <MikeSmith>
k

[07:38:23.0000] <MikeSmith>
botie, inform zcorpan before merging that PR I wonder if we should try to secure agreement from more implementors for it, or else flag it in the spec with a big editorial note for now

[08:50:57.0000] <Domenic>
This PR doesn't impact implementers at all, does it?

[08:51:58.0000] <gsnedders>
Domenic: it *shouldn't*, but we should at least have implementers convinced that changing the state machine as it is in the spec is worth the risk and have them agree that the changes don't have any affect

[08:52:27.0000] <Domenic>
I don't really agree. I think the editors should be able to make editorial changes and we should be able to trust them to do so.

[08:57:56.0000] <gsnedders>
I think plenty of us would much rather some parts of the spec, including the parser, be pretty much frozen

[09:01:17.0000] <MikeSmith>
it does affect those who implement the parse errors and expose them

[09:01:31.0000] <MikeSmith>
which Henri does for View Source in Firefox

[09:02:06.0000] <MikeSmith>
and I thought the parse5 implementor was planning to support all the parse errors

[09:02:40.0000] <MikeSmith>
once we have explicit identifiers for all of them in the spec

[09:03:02.0000] <gsnedders>
I'll try and work on that over the summer, while I update html5lib to match the spec.

[09:04:33.0000] <MikeSmith>
fwiw I believe that because this is user-facing change, it should be motivated by trying to do what is best for users

[09:04:50.0000] <MikeSmith>
and in that regard it is not just editorial

[09:05:16.0000] <MikeSmith>
certainly it makes a significant difference in the HTML checker behavior

[09:05:45.0000] <gsnedders>
Now I don't expect it to be totally frozen, but I think we should have a pretty high barrier before changes

[09:05:54.0000] <MikeSmith>
I behavior change that I assert is a change for the better for users

[09:07:58.0000] <MikeSmith>
gsnedders: I think another way to look at it is that is maybe the last chance we might still have to get in a change like this before we are really stuck forever with the current legacy suboptimal-for-users behavior

[09:08:20.0000] <MikeSmith>
let‚Äôs try to change it now while we still have some chance

[09:09:01.0000] <gsnedders>
MikeSmith: why would we not have the chance to make it lateR?

[09:26:37.0000] <MikeSmith>
gsnedders: because I think the longer we wait to make a change like this, the more likely it is that the answer will be, ‚ÄúToo late to make this kind of change‚Äù

[10:40:52.0000] <MikeSmith>
botie, inform zcorpan before merging that PR I wonder if we should try to secure agreement from more implementors for it, or else flag it in the spec with a big editorial note for now

[10:40:52.0000] <botie>
will do


2016-06-15
[23:31:43.0000] <annevk>
https://twitter.com/cwilso/status/742864947986587648 So because Chris Wilson was not personally acknowledged (did he ever contribute?) he doesn't care that others are no longer acknowledged either? What a weird thing to say...

[00:32:43.0000] <zcorpan>
https://github.com/whatwg/html/pull/907#issuecomment-226106645 ;_; ;_; ;_; ;_;

[00:33:23.0000] <zcorpan>
apple people, please get this fixed

[00:36:57.0000] <zcorpan>
othermaciej hober ^

[00:38:42.0000] <othermaciej>
I love that the sample page URL he gives is scrolled to HKBodyTemperatureSensorLocationRectum

[00:39:47.0000] <ondras>
:D

[00:41:39.0000] <othermaciej>
I guess this bug is a pain in the ass?

[00:43:51.0000] <othermaciej>
zcorpan: probably better for hober to field it but it would help to know what the issue is more specifically. I see that you requested not to use the menuitem tag but from the issue log I don't think I'd be able to explain to the docs people why it's wrong that they are doing so

[00:43:53.0000] <zcorpan>
it's a pain in the ass for chromium trying to ship <menuitem> with spec-conforming parser. it's really really trivial fix on your side (change "<menuitem" to "<menu-item" in the markup and any css etc)

[00:44:33.0000] <othermaciej>
zcorpan: has the parser always had a requirement that would make this page get mis-parsed, or is it a recent change?

[00:45:06.0000] <othermaciej>
zcorpan: is this the only page on Apple's docs site that has the issue?

[00:45:11.0000] <zcorpan>
othermaciej: they are really using a custom tag, no the spec's menuitem, so it should be a custom tag or a <div> instead

[00:45:35.0000] <zcorpan>
othermaciej: it has always been void, which breaks the page. it was recently changed to be "like option" but it still breaks the page

[00:45:58.0000] <zcorpan>
othermaciej: firefox parses it like unknown elements are parsed, which does not break the page

[00:46:19.0000] <othermaciej>
zcorpan: hmm, I thought we'd had a 100% conforming implementation of the HTML parsing algorithm in WebKit

[00:46:22.0000] <othermaciej>
at one point

[00:47:11.0000] <othermaciej>
maybe <menuitem> got added after that? Which I guess shows the foolishness of adding new void elements.

[00:47:37.0000] <othermaciej>
anyway I think hober is more likely to be able to pass this along effectively, hopefully he will see this in his scrollback

[00:48:55.0000] <zcorpan>
othermaciej: yeah menuitem was probably a new void when hixie tried to make the spec somewhat closer to gecko (who invented menuitem iirc)

[00:49:07.0000] <zcorpan>
othermaciej: ok thanks

[00:50:21.0000] <othermaciej>
since Firefox doesn't actually parse it that way, that seems like an obsolete reason

[00:51:48.0000] <othermaciej>
Maybe the spec should change, since it is hard to use new void elements in content and still have it degrade gracefully. And there may be more content using it wrong. Should not be too hard to get Apple's docs fixed. It would help to know if it affects other pages though.

[00:52:45.0000] <zcorpan>
right, the spec was changed to no longer be void. we've researched this and couldn't find any other page being broken, and there haven't been any other reports about other pages being broken

[00:53:22.0000] <zcorpan>
the problem with the current spec is that <menuitem>x<menu> parses like <menuitem>x</menuitem><menu>

[00:54:00.0000] <othermaciej>
So I guess you can always use end tags to support browsers that don't match the latest spec, but if you actually try to use the allowance for tag omission you will get unexpected parsing in older browsers

[00:54:25.0000] <zcorpan>
right

[00:54:38.0000] <othermaciej>
that seems gratuitous for a convenience feature of end tag omission

[00:58:31.0000] <zcorpan>
maybe so. but you don't see people doing <video><source></source> because it parses differently in old browsers. so in 5-10 years maybe people will happily use <menuitem> without the end tag, if that is supported?

[00:59:44.0000] <zcorpan>
anyway, it is possible to change the spec to match firefox, i'm just sad that it's only apple docs that is blocking

[01:32:43.0000] <MikeSmith>
fwiw gecko did not invent menuitem

[01:32:50.0000] <MikeSmith>
Hixie did

[01:33:30.0000] <MikeSmith>
then gecko unilaterally implemented a variation of menuitem that did not conform to what Hixie has specced

[01:37:32.0000] <annevk>
Tweeting about a new t-shirt is my career highlight

[02:00:17.0000] <MikeSmith>
I wish roc has revealed his secrets while he was still working on gecko http://robert.ocallahan.org/2016/06/nastiness-works.html

[02:00:42.0000] <MikeSmith>
as far as tactics for pressuring him to prioritize bugs

[02:54:48.0000] <Ms2ger>
OH: "are you writing XSLT to create the bikeshed?"

[07:03:30.0000] <Manishearth>
annevk: we're having a meeting near the registration desk @ the beanbags about navigation; coming? :)

[07:04:31.0000] <jgraham>
Manishearth: annevk is busy I believe

[07:05:29.0000] <Manishearth>
ah

[07:44:31.0000] <gsnedders>
https://webkit.org/blog/6589/next-steps-for-legacy-plug-ins/ is interesting insofar as navigator.plugins and hiding what's installed and the privacy consequences of it

[07:49:57.0000] <annevk>
Manishearth: sorry :-/

[08:02:29.0000] <Manishearth>
annevk: np

[08:40:12.0000] <zcorpan>
MikeSmith: i thought Hixie_ invented <command> but gecko implemented <menuitem> instead

[08:41:10.0000] <MikeSmith>
yeah Hixie_ made command too but pretty sure he has also specced out an explicit <menuitem> as well

[08:42:17.0000] <MikeSmith>
but I could be wrong

[08:42:40.0000] <MikeSmith>
and you are likely to remember it better than me anyway

[08:42:53.0000] <zcorpan>
https://lists.w3.org/Archives/Public/public-whatwg-archive/2012Dec/0264.html

[08:42:58.0000] <MikeSmith>
given that you were editing the doc that tracked the diffs

[08:43:30.0000] <MikeSmith>
there you go :)

[08:43:47.0000] <MikeSmith>
/me eats crow

[08:44:12.0000] <zcorpan>
:-)

[08:44:30.0000] <zcorpan>
ask me what i had for dinner two days ago, wouldn't have a clue

[08:44:35.0000] <MikeSmith>
haha

[08:45:04.0000] <zcorpan>
AMA about html's history, off the top of my head

[08:45:11.0000] <zcorpan>
weird brain

[08:45:27.0000] <MikeSmith>
you have some special storage there

[08:45:33.0000] <MikeSmith>
optimized for HTML

[08:56:44.0000] <caitp>
that's sad, how are you going to remember that delicious tender bloody prime rib, and that $500 wine you got for christmas?

[08:56:46.0000] <caitp>
priorities man

[09:26:34.0000] <annevk>
Manishearth: in badge area now‚Ä¶

[09:28:06.0000] <Manishearth>
annevk: might want to talk with ajeffrey if he's still in the hotel

[09:28:13.0000] <Manishearth>
I'm not :)

[09:29:07.0000] <zcorpan>
caitp: i know right

[11:49:30.0000] <Domenic>
I like the framing on that WebKit  blog post: "guest post from the Safari team". Seems kind of cool to emphasize that separation.

[11:50:52.0000] <Domenic>
I'm hoping one day we can just spec navigator.plugins and navigator.mimeTypes to return an empty array or something

[11:51:02.0000] <Domenic>
And get rid of all the specialized types

[11:52:04.0000] <Domenic>
Well, maybe we won't be able to get rid of PluginArray and MimeTypeArray, as they have too many non-array methods :(

[11:52:52.0000] <Domenic>
Chrome also fills those up with stuff for PDFs and DRM and NaCl so maybe they will never go away

[12:09:55.0000] <othermaciej>
we have built-in PDF rendering that is implemented as a plugin under the covers, but we largely hide that fact (I think)

[12:41:04.0000] <Ms2ger>
Servo had to implement them (as empty sets) for compat with twitter

[12:41:07.0000] <Ms2ger>
https://github.com/servo/servo/issues/9991


2016-06-16
[19:12:33.0000] <cluelesscoder>
so I figured why not read the HTML syntax spec... and it's been a bit tough reading. "If the current node is an HTML element whose tag name is subject" - what element has the tag name of subject?

[19:28:24.0000] <caitp>
reading the adoption agency algorithm?

[19:28:48.0000] <caitp>
the text of that one can pretty much be replaced with "dumbdumbdumbdumbdumbdumbdumbdumbdumb" with no difference in meaning

[19:30:18.0000] <caitp>
I mean you'd have to repeat that a few dozen times to really capture the same semantics, but basically

[19:32:25.0000] <caitp>
unfortunately html doesn't make the rules, it just writes them down

[22:55:07.0000] <MikeSmit1>
cluelesscoder: yeah that spec text doesn‚Äôt mean a tag named ‚Äúsubject‚Äù

[22:56:56.0000] <MikeSmith>
cluelesscoder: not literally ‚Äúsubject‚Äù but instead that‚Äôs a placeholder for whatever the actual tag name is, when that generic algorithm is called on that tag

[23:38:23.0000] <annevk>
https://github.com/whatwg/html/pull/1428#issuecomment-226282258 <3

[03:45:00.0000] <wanderview>
JakeA: what version of node are you using for this? https://github.com/jakearchibald/range-request-test

[03:45:37.0000] <JakeA>
wanderview: v6.2.1 - sorry, I just had to update node on one of my machines to get it working too

[03:46:02.0000] <wanderview>
JakeA: np... just thought I would ask instead of continuing to guess :-)

[03:47:05.0000] <JakeA>
wanderview: updated the readme. Didn't realise I was using new-node stuff when I originally built it.

[03:47:12.0000] <wanderview>
np

[03:49:15.0000] <wanderview>
JakeA: weird that brew only has node 5.x

[03:53:32.0000] <JakeA>
wanderview: lmk if it's getting in the way. I can probably avoid whatever feature that requires 6. I think it's the spread operator.

[04:06:19.0000] <wanderview>
JakeA: its fine... I do see the range header in the service worker... but we don't play the video in that case... so something is broken

[04:06:49.0000] <ondras>
annevk: CSP headers are relevant only to html resources, right?

[04:07:21.0000] <JakeA>
wanderview: but is the range header actually being sent? I don't see it in the server's log

[04:07:30.0000] <JakeA>
wanderview: https://bugs.chromium.org/p/chromium/issues/detail?id=620386

[04:07:35.0000] <annevk>
ondras: hmm ask mkwst

[04:08:05.0000] <annevk>
ondras: currently parsed for all though, maybe‚Ä¶

[04:08:19.0000] <wanderview>
JakeA: no... you found the error... its spec'd that way as far as I can tell:  step 5 here https://fetch.spec.whatwg.org/#concept-headers-append

[04:09:16.0000] <JakeA>
wanderview: not sure how the range header appears on the request at all then

[04:10:05.0000] <wanderview>
JakeA: well, I think media probably does not go through the headers append algorithm in practice... but when you fetch I think we re-append headers, etc

[04:10:08.0000] <ondras>
mkwst: ?

[04:10:09.0000] <JakeA>
this seems like a similar issue to the client headers stuff. Maybe headers need the concept of "UA-added" meaning they bypass some of the checks +annevk

[04:10:14.0000] <wanderview>
JakeA: maybe we can just blame annevk

[04:10:19.0000] <ondras>
mkwst: CSP headers are relevant only to html resources, right?

[04:10:23.0000] <JakeA>
haha

[04:10:36.0000] <wanderview>
JakeA: he is not looking at his computer at the moment... I should probably pay attention to this meeting too

[04:10:59.0000] <JakeA>
wanderview: btw, pub this evening?

[04:11:08.0000] <wanderview>
JakeA: yes pleae!

[04:11:09.0000] <wanderview>
please

[04:11:16.0000] <JakeA>
\o/

[04:20:33.0000] <annevk>
JakeA: hmm I thought about that, but it seems bad from a security perspective

[04:21:15.0000] <annevk>
JakeA: trying to figure out what we are willing to do about that

[04:21:36.0000] <annevk>
JakeA: some of the institutional knowledge got lost

[04:21:47.0000] <JakeA>
annevk: we need to come up with a way to let things like Range headers through. At the moment event.respondWith(fetch(event.request)) breaks

[04:22:42.0000] <wanderview>
JakeA: I'm not sure it should from the spec... fetch header list should just be copied across from the original request

[04:24:55.0000] <wanderview>
JakeA: I think maybe firefox never provides the response back to the media element in fetch(event.request) case and exact range request

[04:26:55.0000] <annevk>
JakeA: üòû

[04:27:23.0000] <JakeA>
We'll give ourselves one pint to solve it later

[04:27:31.0000] <annevk>
JakeA: I will look into it next week I suppose

[04:27:35.0000] <annevk>
heh

[04:28:16.0000] <JakeA>
But I can't think of anything better other than "The UA may add headers that bypass filters" - because that's effectively what it already does

[04:28:22.0000] <wanderview>
JakeA: can you turn these into WPT tests? :-)

[04:29:28.0000] <JakeA>
Y'know what, it's been lovely to do a little bit of research on this stuff and have a think about standards. *dev-rel whip cracks* oh yeah gotta a get a talk ready

[04:29:47.0000] <JakeA>
wanderview: I'd be happy to do this. Not written one before though

[04:30:16.0000] <wanderview>
JakeA: would just be nice since you are half-way there and clearly there are some bugs here... might help the other browsers get it right the first time they do it too

[04:30:47.0000] <JakeA>
agreed

[05:14:05.0000] <tobie>
heycam: what's the status of the Java-specific stuff from within the spec?

[05:14:17.0000] <heycam>
tobie: it should all have been removed

[05:14:20.0000] <heycam>
a while ago

[05:14:46.0000] <tobie>
heycam: alright. Just wanted to make sure. :)

[05:33:34.0000] <gsnedders>
tobie: <3

[06:06:06.0000] <MikeSmith>
noticing https://www.linkedin.com/in/h%C3%A5vard-molland-45022b5

[06:06:22.0000] <MikeSmith>
Haavard Molland moving on

[08:36:23.0000] <MikeSmith>
https://twitter.com/myriamjessier/status/743412990138028032 ‚ÄúI went into a German conference on web components. I don't speak German. Here are my notes.‚Äù

[15:34:11.0000] <tobie>
TabAtkins: WebIDL has ednotes. What would you make those into in bikeshed? Issues?

[15:35:19.0000] <tobie>
TabAtkins: e.g.: http://heycam.github.io/webidl/#idl-callback-functions

[15:35:36.0000] <TabAtkins>
Ah, the "Editorial note"?

[15:35:47.0000] <TabAtkins>
Oh yeah, sorry, I was misreading as "endnotes"

[15:35:53.0000] <TabAtkins>
So yeah, issue.

[15:36:08.0000] <TabAtkins>
Either class=issue, or if you're taking advantage of markdown, just start a paragraph with "Issue: "

[15:38:21.0000] <TabAtkins>
Oh yeah, and newish thing: any webidl in a non-normative block (if it or an ancestor is class=example, class=note, or class=non-normative) will get syntax-highlighted but not linked up. So make sure all your IDL blocks have class=idl and either they or an ancestor has one of the non-normative classes.

[15:39:01.0000] <tobie>
TabAtkins: yeah, saw those improvements, that's awesome.

[15:39:27.0000] <tobie>
While I have your attention, what's your suggestion on how to deal with the grammar?

[15:40:38.0000] <tobie>
TabAtkins: i.e., this stuff: http://heycam.github.io/webidl/#prod-Definitions

[15:41:41.0000] <TabAtkins>
I don't have an abnf parser yet. (Mike West said he would work on it, BUT HE HAS FAILED TO.)

[15:42:11.0000] <TabAtkins>
So, uh, dunno.

[15:42:38.0000] <TabAtkins>
I'd say use type=type, as that's what we use for CSS grammar non-terminals, but maybe we don't want things to overlap?

[15:43:10.0000] <TabAtkins>
I'm wondering if a type=abnf would work, with a mandatory for='' value.

[15:43:15.0000] <TabAtkins>
To algorithm-scope it.

[15:49:31.0000] <tobie>
mmm

[15:52:12.0000] <tobie>
I guess I need to think about this some more.

[15:58:45.0000] <TabAtkins>
or i do

[15:59:19.0000] <TabAtkins>
just write it in a pre for now; i'll put "auto-parse abnf" on my roadmap for the near future

[15:59:21.0000] <TabAtkins>
it's not hard

[15:59:31.0000] <tobie>
I like where you're going with this. :)

[16:00:10.0000] <TabAtkins>
What, "do whatever the easiest thing is, I'll make the hard parts work automatically"?

[16:00:25.0000] <tobie>
yes

[16:00:28.0000] <tobie>
:)

[16:00:28.0000] <TabAtkins>
^_^

[16:10:16.0000] <TabAtkins>
Hmm, it looks like IDL is just using some ad hoc grammar convention.


2016-06-17
[20:43:31.0000] <timwis>
hey folks, any suggestions on passing objects/arrays to custom elements via attributes other than serializing/deserializing JSON?

[20:43:48.0000] <timwis>
(JSX, for example, lets you pass arrays and objects. I know that's a bit different under the hood but just an example.)

[20:44:14.0000] <MikeSmith>
timwis: wonder how other libraries do it

[20:45:04.0000] <timwis>
MikeSmith: JSX doesn't actually use custom elements; it just calls JS classes and passes the "attributes" to the class constructor as arguments

[20:45:34.0000] <timwis>
I believe I read somewhere that polymer serializes/deserializes JSON

[20:53:29.0000] <MikeSmith>
timwis: yeah polymer was what I was wondering about specifically

[20:53:57.0000] <MikeSmith>
have to admit I do not know what other libraries there might be out there yet for custom elements

[20:57:33.0000] <MikeSmith>
hayato: any suggestions? ‚¨Ü

[01:03:29.0000] <MikeSmith>
zcorpan: I am fine with going ahead and merging that double-dash-in-comment PR

[01:03:59.0000] <MikeSmith>
under ‚Äúcommit then review‚Äù as far as getting more review from any implementors who have not commented so far

[01:04:39.0000] <MikeSmith>
and I will be doing a new HTML checker release today or tomorrow, so this change would go out in this release

[01:05:21.0000] <MikeSmith>
and so subsquently get picked up by the grunt-html packager of it, gulp package, etc.

[04:35:03.0000] <zcorpan>
MikeSmith: ok, i'll merge

[04:35:33.0000] <zcorpan>
should i merge it as a single commit? Domenic annevk

[04:38:30.0000] <annevk>
zcorpan: let Domenic merge it I guess?

[04:38:51.0000] <annevk>
zcorpan: still a little concerned with all the state changed

[04:38:56.0000] <annevk>
s*

[04:39:51.0000] <gsnedders>
annevk: what are you up to this afternoon?

[04:40:42.0000] <zcorpan>
annevk: it's a bit tricky but i think implementors will get it right if they run the tests

[04:40:58.0000] <annevk>
gsnedders: post 4pm free, maybe earlier

[04:41:14.0000] <annevk>
gsnedders: storage from 2pm onward

[04:42:47.0000] <gsnedders>
annevk: k. we should chat either after 4pm or at party tonight about what you wanted to do with tests, possibly with jgraham and ms2ger?

[04:50:06.0000] <annevk>
gsnedders: sure, nothing seriously planned though, just an idea

[06:27:44.0000] <tobie>
TabAtkins: we might be able to transform some of those.

[07:02:06.0000] <gsnedders>
annevk: where do yo uwant to meet? I'll be in the Landmark at 4, at least.

[07:02:14.0000] <gsnedders>
I guess Ms2ger may well be to, if he wants to come.

[07:37:40.0000] <jgraham>
/me is not in the Landmark fwiw

[07:40:49.0000] <Ms2ger>
I'm in the Landmark with gsnedders

[07:54:50.0000] <annevk>
gsnedders: platform home room now‚Ä¶

[07:55:03.0000] <annevk>
gsnedders: not sure where landmark is

[07:57:35.0000] <Ms2ger>
Next to Marylebone station

[07:57:42.0000] <Ms2ger>
I'm stuck here for a while still

[08:02:17.0000] <gsnedders>
annevk: okay, should we meet on the beanbags in the Metropole west wing?

[08:02:34.0000] <annevk>
Yeah

[08:05:16.0000] <gsnedders>
oh, it's already 4

[08:05:29.0000] <gsnedders>
yeah, I think yself and Ms2ger aren't going anywhere soon

[08:05:39.0000] <gsnedders>
may as well just say scrap that and see you tonight

[08:06:08.0000] <jgraham>
Why are you stuck?

[08:06:15.0000] <jgraham>
Also, I can see annevk, if that helps

[08:07:46.0000] <gsnedders>
jgraham: go ahead, you know what I said earlier!

[08:07:58.0000] <gsnedders>
jgraham: Servo layout talk overrunning

[08:38:58.0000] <gsnedders>
annevk, jgraham: you still about or talking or?

[08:39:21.0000] <gsnedders>
/me on the whole votes for talking later

[08:39:34.0000] <caitp>
you're all pretty clever, so how much scrutiny do you give to an "unsubscribe" link in an unsolicited spam email

[08:56:52.0000] <annevk>
gsnedders: still about

[08:57:05.0000] <annevk>
gsnedders: jgraham left maybe

[08:57:22.0000] <timdream>
annevk: so for Storage Standard... what's the reason for calling eTLD+1 a "site"? It sounds generic and confusing... was other names considered (like "origin group" or something)

[08:58:50.0000] <jgraham>
annevk: I'm behind you

[09:03:19.0000] <annevk>
timdream: file an issue?

[09:03:41.0000] <timdream>
annevk: ok will do

[09:42:46.0000] <stakagi>
Hi, are there those who are investigating this issue of lazy load?

[09:42:48.0000] <stakagi>
https://www.seroundtable.com/google-mobile-lazy-load-content-mobile-20759.html

[09:46:36.0000] <stakagi>
It is because this changes src of an img element to data-src for lazy load.

[09:46:44.0000] <stakagi>
It has broken the semantics of the original img element.

[09:46:49.0000] <stakagi>
It seems that it has caused it that the way of operating lazy load with src does not exist.

[09:49:22.0000] <stakagi>
It seems that the investigation about defered loading is not going although I saw many investigation for prefetch in webperf wg.

[09:50:00.0000] <MikeSmith>
stakagi: igrigorik_ might have some insight

[09:51:37.0000] <stakagi>
Thanks.

[09:53:32.0000] <stakagi>
I think that a js library such as lazyload.js should enable it to realize lazy load using src even if it makes deferment the way of realizing it declaratively for a while.

[09:57:27.0000] <cwilso>
weird, irccloud didn't notify me.  annevk: "did he ever contribute" - welp, that was my point.   Do I think Chaals' pr was good, or should have been accepted?  No, of course not (it was a distraction that can only have downside, and acknowledgements should only be additive imo).  At the same time, your premise is that I've never contributed even a small

[09:57:27.0000] <cwilso>
useful comment in the couple of years I co-chaired the HTML WG or during the previous time.  I think my contributions would have reached the bar of "useful comments, both large and small, that have led to changes to this specification over the years."  But hey, whatever. Given the personal snub, why would you think I'd have it in me to personally focus about

[09:57:27.0000] <cwilso>
this?  [this is rhetorical, of course.]

[09:58:52.0000] <annevk>
Is that my premise?

[09:58:59.0000] <annevk>
I was just asking...

[09:59:04.0000] <annevk>
Since I have no idea

[10:00:00.0000] <annevk>
It does seem weird, since the policy is any suggestion that causes a change, including typos

[10:00:33.0000] <annevk>
I also don't recall if the work was already forked at that point or not

[10:01:30.0000] <cwilso>
Well, I dunno.  I presumed it was, since you asked the question.  I'm not particularly proud of my tenure as HTML co-chair, and some of the reasons are certainly my own fault.  The logical conclusion of not being in that list is that I made no comments at any time that led to changes in the specification.

[10:02:32.0000] <cwilso>
But seriously, we don't need to hash this out.  You called me on why shouldn't I care; that's why.

[10:03:39.0000] <annevk>
I'm not sure I understand, if you feel you've been overlooked, we should add you

[10:04:09.0000] <annevk>
What I didn't understand was you personally not being listed seemingly making it okay for that PR to land

[10:04:39.0000] <annevk>
To me it seems they are not really related

[10:06:13.0000] <annevk>
And if memory serves, you added <font>, so there's no real reason not to have you listed even if you didn't contribute directly during your chairing period (mind you, not saying you didn't)

[10:08:04.0000] <annevk>
cwilso: gotta go pretty soon, but hope that clarifies

[10:08:45.0000] <MikeSmith>
not to open up this can of worms any wider, but I personally have never thought it was such a brilliant idea to try to include an exhaustive list of every single person who has ever contributed to the spec

[10:08:55.0000] <MikeSmith>
for just this kind of reason, among other reasons

[10:09:25.0000] <MikeSmith>
HTML was the first spec to ever have an Acknowledgments section like that I think

[10:09:38.0000] <annevk>
And it was the first honest acknowledgments section

[10:09:40.0000] <cwilso>
> What I didn't understand was you personally not being listed seemingly making it okay for that PR to land/To me it seems they are not really relatedNo, I did not mean that (that I approved of landing the PR) - just that I wasn't personally engaged.

[10:09:44.0000] <annevk>
We should definitely continue that tradition

[10:10:01.0000] <annevk>
It's important to indicate it's many many many people that make these documents

[10:10:16.0000] <cwilso>
gah, that formatting messed up.  In short - no, I wasn't "approving" the PR.  Just saying I wasn't personally going to be vested in that discussion.

[10:10:36.0000] <annevk>
cwilso: the reason you gave still seems weird

[10:10:44.0000] <MikeSmith>
annevk: yeah fair enough it does help in that regard

[10:11:07.0000] <cwilso>
MikeSmith: I think that ship has firmly sailed.  You can see what happens when someone (Chaals) tries to recall it to port.  :)

[10:11:39.0000] <annevk>
/me files https://github.com/whatwg/html/issues/1434

[10:11:51.0000] <MikeSmith>
cwilso: yeah

[14:13:57.0000] <TabAtkins>
Domenic: Did I tell y'all that support for defining/autolinking extended attributes is in Bikeshed now? Doing a <dfn extended-attribute>CEReactions</dfn> should do the right thing automatically now.


2016-06-18
[18:31:06.0000] <Domenic>
TabAtkins: yep, it's on my todo list

[18:31:25.0000] <Domenic>
TabAtkins: data-dfn-type="extended-attribute", right?

[03:37:37.0000] <smaug____>
is yehuda ever here?

[03:57:08.0000] <zcorpan>
gsnedders: https://github.com/whatwg/html/issues/1339#issuecomment-226930591

[06:11:58.0000] <smaugIC>
wycats: do you have the DOM Batch API idea somewhere online?

[14:58:04.0000] <wycats>
Should post it before the end of the weekend :)

[15:09:03.0000] <wycats>
smaug____: ^

[15:28:36.0000] <smaug____>
wycats: post it where?

[15:29:27.0000] <smaug____>
wycats: but ping me once it is somewhere, or send email or something

[15:29:42.0000] <wycats>
I'll post a #whatwg issue

[15:30:10.0000] <smaug____>
k, ,thanks


2016-06-19
[10:23:41.0000] <tobie>
TabAtkins, others: are there conventions as how to markup stuff that doesn't necessarily get auto-linked or that aren't vars (e.g. this, null, Function)?

[10:43:18.0000] <annevk>
tobie: varies, recommend following ES

[15:30:34.0000] <smaug____>
jgraham: does wpt has a place for adding tests for unstable or non-standard APIs?

[15:30:45.0000] <smaug____>
s/has/have/

[15:31:27.0000] <gsnedders>
smaug____: like what?

[15:31:57.0000] <smaug____>
blink's webkitdirectory and the directory stuff in dnd

[15:32:50.0000] <gsnedders>
that should probs be in the compat spec given where we are now

[15:33:00.0000] <smaug____>
sure

[15:33:19.0000] <smaug____>
but while implementing the mess, could we put the tests to wpt

[15:33:28.0000] <smaug____>
and then finally document how it all works

[15:33:46.0000] <smaug____>
(Chrome's implementation seems to be super buggy. )

[15:34:16.0000] <gsnedders>
idk if jgraham has stronger opinions, but compat/provision-webkitdirectory.html or something would keep me happy

[15:35:12.0000] <smaug____>
k

[15:54:14.0000] <gsnedders>
*provisional

[15:59:30.0000] <jgraham>
smaug____: There's a directory in m-c that doesn't get upstreamed if you want to use that for now (testing/web-platform/mozilla/tests)

[16:00:31.0000] <jgraham>
Or just make a directory for these tests under compat/ and don't worry too much. Maybe tell some people what you are doing so that Microsoft or whoever aren't surprised.

[16:01:59.0000] <gsnedders>
Well MS are/have implemented it

[16:02:14.0000] <gsnedders>
hence why there's basically no question about them becoming standard

[16:04:01.0000] <jgraham>
Right, more "surprised if they fail some tests"

[16:04:35.0000] <jgraham>
The badness I want to avoid is to write tests that don't match webkit and that accidentially cause someone else to change their implementation

[16:04:49.0000] <jgraham>
Which seems very unlikely but quite avoidable

[16:05:14.0000] <gsnedders>
s/webkit/blink/ here, but yes

[16:05:32.0000] <gsnedders>
(WebKit doesn't have it anymore. It was behind a compile-time flag that Apple-WebKit never shipped.)

[16:08:19.0000] <gsnedders>
jgraham: is it a crazy idea for me to come into office to hack on some wpt/csswg-test stuff in the next few days? I presume not tomorrow‚Ä¶ maybe Wednesday so you're settled in a bit?

[16:08:28.0000] <gsnedders>
/me needs to look at the weather to work out what he's doing when

[16:10:44.0000] <jgraham>
gsnedders: Not crazy, although since we are moving next week, there might be chaos

[16:12:32.0000] <gsnedders>
well the crazy bit I meant was the whole moving thing

[16:13:40.0000] <jgraham>
I think it's still allowed. Ask Mandy?

[16:15:58.0000] <smaug____>
jgraham: I'm not going to write anything here. Outsourcing test and code writing to baku :)

[16:16:40.0000] <smaug____>
(which does however mean I will need to do the reviews)

[16:17:11.0000] <smaug____>
jgraham: webkit doesn't have these webkit prefixed APIs

[16:17:17.0000] <smaug____>
they are blink APIs

[16:17:37.0000] <gsnedders>
jgraham: I've always dealt with her by proxy :)

[16:17:39.0000] <jgraham>
OK s/webkit/blink/ in what I said :)

[16:17:43.0000] <jgraham>
gsnedders: #london

[16:17:46.0000] <jgraham>
Now: sleep


2016-06-20
[21:11:46.0000] <wycats>
some people have asked: https://github.com/whatwg/dom/issues/270

[21:11:49.0000] <wycats>
finally posted

[21:11:50.0000] <wycats>
annevk: ^

[21:11:57.0000] <wycats>
if smaug pops around, he was asking about it too

[23:09:48.0000] <MikeSmith>
botie, inform smaug____ wycats: some people have asked: https://github.com/whatwg/dom/issues/270 if smaug pops around, he was asking about it too

[23:09:48.0000] <botie>
will do

[23:12:40.0000] <wycats>
:)

[23:12:44.0000] <wycats>
bedtime for me

[00:14:37.0000] <annevk>
wycats++

[01:32:26.0000] <Ms2ger>
|<html version="5.0">

[01:33:36.0000] <annevk>
Ms2ger: we can pat ourselves on the back for going with half of the idea

[01:42:53.0000] <MikeSmith>
?

[01:43:21.0000] <MikeSmith>
/me doesn‚Äôt understand that |<html version="5.0"> reference

[01:43:25.0000] <annevk>
MikeSmith: zcorpan tweeted a link about how he came up with <!doctype html>

[01:43:38.0000] <annevk>
MikeSmith: that proposal also contained a proposal for <html version="5.0">

[01:44:17.0000] <MikeSmith>
oh

[01:44:46.0000] <zcorpan>
clearly it was necessary to specify the version... good thing Hixie knew better :-)

[01:45:41.0000] <annevk>
zcorpan: it's also interesting how the doctype bit included justification and the version thing was just like, well, that's always been there

[01:46:12.0000] <zcorpan>
yeah

[03:07:33.0000] <annevk>
zcorpan: https://github.com/whatwg/html/commit/9ac1071abe7fca185604b56b89cb969ea34e39db must have been...

[03:08:27.0000] <annevk>
Somewhat surprised I didn't spot that while reviewing

[03:08:31.0000] <annevk>
Guess I just ignored it as noise

[03:09:00.0000] <annevk>
Which is somewhat disconcerting as that would be a way to comprise the security...

[03:50:35.0000] <kochi>
smaug____ ?

[03:51:03.0000] <kochi>
Can we have a chance to have VC or something to chat about iframe/history thing?

[03:53:01.0000] <smaug____>
kochi: perhaps, though I'm not sure why that would be useful

[03:54:53.0000] <smaug____>
random note, it seems like HTML spec's session history part is rather bogus, not following what implementations do

[03:55:01.0000] <kochi>
smaug____: I just commented on the thread, and hope we could move forward.

[03:55:25.0000] <kochi>
where is it, specifically?

[03:56:02.0000] <smaug____>
though, spec being bogus doesn't affect to this particular issue

[03:56:15.0000] <annevk>
kochi: where is what?

[03:56:31.0000] <kochi>
where is the bogus part of session history?

[03:56:38.0000] <smaug____>
it is wrong in that it uses joint session history for browsing contexts, yet browsers seem to have transaction list of session history entry trees

[03:57:10.0000] <annevk>
that is a lot of words

[03:57:14.0000] <smaug____>
:)

[03:58:19.0000] <smaug____>
annevk: kochi: forwarded you an email about this

[03:58:32.0000] <kochi>
I'm not sure other implementations, but Chrome/Blink stores frame-tree -like history as a node for joint session history.

[03:58:37.0000] <smaug____>
but anyhow, that doesn't affect to the shadow DOM issue

[03:59:36.0000] <smaug____>
I'm hoping Servo folks will help here to fix the issues in the spec

[04:00:17.0000] <kochi>
okay, thanks for forwarding the mail.

[04:00:54.0000] <annevk>
Yeah, I briefly spoke to someone from Servo about this and they seemed happy to file issues

[04:01:00.0000] <annevk>
Just needed a little encouragement

[04:01:33.0000] <annevk>
I think the fact that standards are just like other software projects hasn't entirely hit home just yet

[04:05:53.0000] <kochi>
so the fact is that we haven't come up with a good way to separate the history list, as I wrote in the comment.

[04:08:00.0000] <smaug____>
we could just have a separate session history and not show the shadow history in the UI

[04:08:06.0000] <kochi>
oops, the comment is not posted...?

[04:08:26.0000] <kochi>
okay, posted :)

[04:08:38.0000] <smaug____>
I need to find some food

[04:08:40.0000] <smaug____>
back later

[04:09:09.0000] <kochi>
ooh... I have to go home soon too... talk to you later.

[04:09:34.0000] <zcorpan>
annevk: could the linter maybe fail if new files are added (other than in demos, fonts, images)

[04:09:56.0000] <annevk>
zcorpan: yeah maybe

[04:10:11.0000] <kochi>
for the context, smaug____ and I are talking about https://github.com/w3c/webcomponents/issues/184

[04:10:17.0000] <annevk>
hmm food

[04:11:02.0000] <annevk>
kochi: I'm sorry I don't have more input; I generally agree with smaug____ we should preserve encapsulation since that's a goal, but I don't really know how to achieve it properly here since I don't know enough about session history yet

[04:12:43.0000] <kochi>
annevk: yeah, we are not against having encapsulation, but rather thinking about implementation complexity and breaking user expectation about UI history back/forward.

[04:13:20.0000] <kochi>
history API is broken in the first place, I'd say :)

[04:14:23.0000] <kochi>
but I also have to admit that it is the way how web has worked so far.

[04:15:28.0000] <annevk>
Sure, but if we break the promise of shadow trees the moment you use <iframe>, we might get some issues too down the road

[04:24:46.0000] <kochi>
Yeah, like https://github.com/whatwg/html/issues/763 (link target should not bypass shadow boundary) ideally I'd hope history.go() outside shadow won't disturb shadow trees...

[07:42:15.0000] <annevk>
hsivonen: https://github.com/whatwg/encoding/pulls first two PRs are awaiting review

[08:22:03.0000] <Ms2ger>
hayato, !

[08:22:46.0000] <Ms2ger>
hayato, you broke travis: https://travis-ci.org/w3c/web-platform-tests/builds/138874200

[08:43:23.0000] <MikeSmith>
/me notices a typo he made in that lint message

[10:14:02.0000] <tobie>
TabAtkins: just forced Specref to use https for all w3c links. LMK if you bump into issues.

[10:19:45.0000] <annevk>
/me is getting pretty close to the point where he can refactor document creation

[10:19:51.0000] <annevk>
Hopefully I won't regress all the things

[10:21:02.0000] <tobie>
annevk: Thinking the same thing about my https upgrade. :)

[10:24:05.0000] <annevk>
tobie: but at least it'll be secure

[10:24:16.0000] <annevk>
tobie: whereas this...

[10:24:20.0000] <tobie>
:D

[10:40:55.0000] <TabAtkins>
tobie: Should be fine; Bikeshed is pretty agnostic about the biblio data. It mostly just cares about the keys, and just spams the url into markup without looking at it.

[10:41:19.0000] <tobie>
TabAtkins: yeah, that was my impression also.

[14:15:56.0000] <smaug____>
hmm, reviews... do webkit or blink (or other large open source project) folks somehow ensure reviewing is spread somewhat evenly between reviewers

[14:21:38.0000] <jsbell>
smaug____: for blink, not via formal process (other than the review tool suggesting potential reviewers randomly from a per-directory OWNERS list). We do end up with review requests piling up on particular reviewers, who are either particularly responsive or the only experts in a part of the codebase. And then we may suggest spreading the work around.


2016-06-21
[17:37:38.0000] <hayato>
Ms2ger: Sorry for breaking travis. I fixed. https://github.com/w3c/web-platform-tests/commit/12b780086f4a0d1d6ff5e6d588482ae04624e794

[22:50:17.0000] <annevk>
/me signed up for a week of TPAC

[01:54:15.0000] <zcorpan>
hmm https://twitter.com/zcorpan/status/744896721017257984 only 12 votes. maybe people don't understand the question?

[01:57:41.0000] <annevk>
zcorpan: too hard

[03:51:07.0000] <annevk>
JakeA: if we're going to do navigation transitions it'd be great if someone helped out refactoring the navigation algorithm to make it actually match browsers

[04:27:25.0000] <zcorpan>
MikeSmith: getting 502 for https://checker.html5.org/

[04:44:31.0000] <MikeSmith>
zcorpan: yeah was restarting it, should work now

[04:44:59.0000] <zcorpan>
ah ok, yep works now

[04:53:59.0000] <annevk>
hsivonen: thanks for the review, please only merge if there's a generated index with an-up-to-date date next time; or just leave that part to me

[04:56:23.0000] <annevk>
hsivonen: it didn't matter much since I fixed it with the second PR, so just a note for next time

[05:12:21.0000] <hallvors>
zcorpan: it is tricky indeed :)

[05:12:30.0000] <hallvors>
I've guessed something, but don't know

[05:15:30.0000] <hallvors>
annevk: quick XHR question.. #handle-response-end-of-file step 10 seems to guarantee that you'll always get a progress event when readyState is 4. I don't really see implementations doing that..?

[05:16:25.0000] <annevk>
hallvors: yeah, zewt and I determined that would be good, but I guess implementations never really got there

[05:16:44.0000] <annevk>
hallvors: maybe it's time to give up on that especially since XHR isn't really the API-to-be anyway

[05:16:49.0000] <annevk>
hallvors: file an issue?

[05:16:54.0000] <hallvors>
OK.

[05:17:12.0000] <hallvors>
Seems fine to me to drop that requirement, you get load and loadend and readystatechange ..

[05:17:26.0000] <annevk>
Yeah, the idea was that you could just listen to progress and be fine

[05:17:27.0000] <hallvors>
I don't think we really need more events here :)

[05:17:52.0000] <annevk>
So that you'd never get a progress bar that hangs at 80% or so

[05:18:16.0000] <annevk>
But at this point everyone probably learned not to do that...

[05:44:07.0000] <hallvors>
annevk: https://github.com/whatwg/xhr/issues/72

[05:48:49.0000] <annevk>
ta

[06:06:18.0000] <howdoi>
So, anyone can write a proposal on a gist/github/anyLink and it will be counted as stage-0 ?

[06:07:05.0000] <annevk>
howdoi: you need a TC39 member to champion it

[06:07:56.0000] <howdoi>
annevk: and on what factors will the championing depend on? (I know there might be many, but the cruz would be?)

[06:08:40.0000] <annevk>
howdoi: that someone thinks it's good?

[06:08:58.0000] <howdoi>
and how does on make it to TC39 community as a member, I do noticed that there are many who havn't made a proposal or their proposals are still not in stage-4

[06:09:27.0000] <annevk>
howdoi: I'm not sure I follow that question

[06:09:27.0000] <howdoi>
annevk: makes sense :) (Can consider as voting or majority of them supports in via the mailing list or something else)

[06:09:50.0000] <annevk>
howdoi: note that I'm not really doing TC39 stuff

[06:09:58.0000] <howdoi>
in simple terms : Who are eligible to become a TC39 member?

[06:10:10.0000] <annevk>
howdoi: I think anyone who pays USD 10k a year

[06:10:25.0000] <annevk>
howdoi: not sure if the fee remained the same, might be more now?

[06:10:32.0000] <howdoi>
just 10k :D heh heh ok!

[06:13:37.0000] <annevk>
Domenic: playsinline change LGTM, though not entirely sure about ordering, but I'm guessing you thought about that

[06:13:46.0000] <howdoi>
annevk: last (silly) question, say Mr.X is working at a company Y which is a TC39 member, this person can also get into the community via the company?

[06:13:58.0000] <hallvors>
annevk: an improved test for POST and redirects here https://github.com/w3c/web-platform-tests/compare/hallvors/upload-redirect - should be ready for a PR now

[06:14:16.0000] <annevk>
howdoi: sure, everyone that participates is in the community

[06:14:31.0000] <howdoi>
annevk: killer! nice :)

[06:15:30.0000] <annevk>
hallvors: cool, so if you want to do more work, you could generalize the method bit

[06:15:43.0000] <annevk>
hallvors: e.g., PUT needs to be preserved for all redirect types

[06:15:55.0000] <howdoi>
annevk: luckily the company at which I work in an ordinary member, let me see what best I can get from them ;)

[06:16:08.0000] <annevk>
hallvors: POST -> GET happens for 301/302; oh and 303 always goes to GET

[06:16:19.0000] <annevk>
hallvors: 307 and 308 always preserve

[06:16:20.0000] <hallvors>
heh, that should all be tested for sure

[06:16:38.0000] <annevk>
hallvors: Fetch spells this out

[06:16:46.0000] <annevk>
hallvors: yeah, not sure to what length you want to go with this one

[06:17:01.0000] <hallvors>
Not sure if I should extend that test or write a couple of other ones.. might get too complex to be readable at some point.

[06:17:17.0000] <annevk>
hallvors: does this pass in any browser?

[06:17:22.0000] <hallvors>
yes

[06:18:11.0000] <hallvors>
once I gave up expecting a progress event in readystate 4 it passes nicely in Firefox and Chrome (on a Mac), fails in Safari which appears to not do 307 correctly

[06:18:31.0000] <annevk>
hallvors: cool, LGTM then

[06:18:59.0000] <annevk>
hallvors: could maybe ping cdumez in the eventual PR/merge for the Safari thing

[06:19:04.0000] <annevk>
hallvors: sure they'd like to fix

[06:19:31.0000] <hallvors>
I'll report a bug on testing those other methods..because I should be doing webcompat bug analysis right now..

[06:20:52.0000] <annevk>
yeah, back to staring at cross-origin function wrappers

[06:21:03.0000] <annevk>
they are exactly as exciting as they sound

[06:21:51.0000] <hallvors>
just say that in a deep, sexy voice and see how exciting you can make them :-p

[06:32:43.0000] <hallvors>
annevk: Travis has found some console use in a file I haven't touched.. https://github.com/w3c/web-platform-tests/pull/3210

[06:32:48.0000] <hallvors>
wot?

[06:33:04.0000] <Domenic>
annevk: ordering?

[06:33:15.0000] <annevk>
Domenic: relative to other attributes

[06:33:24.0000] <annevk>
hallvors: dunno

[06:33:53.0000] <Domenic>
annevk: ah yeah I just kind of was like... seems kind of like autoplay, let's put it there. But in IDL it should probably be last since that in theory has webcompat impacts

[06:41:07.0000] <Ms2ger>
hallvors, should be fixed on master

[06:41:53.0000] <hallvors>
Ms2ger: this afternoon? I thought I had pulled recently.

[06:42:02.0000] <hallvors>
hm.. maybe I pulled on another laptop

[06:42:07.0000] <hallvors>
#-]

[06:42:57.0000] <Ms2ger>
hallvors, https://github.com/w3c/web-platform-tests/commit/12b780086f4a0d1d6ff5e6d588482ae04624e794

[06:44:49.0000] <hallvors>
Ms2ger: thanks, will rebase..

[08:01:04.0000] <annevk>
Domenic: I don't really need the [[Wrapped]] stuff anymore?

[08:01:20.0000] <Domenic>
annevk: yeah I think CrossOriginFunctionWrapper can go away

[08:01:35.0000] <annevk>
Domenic: it's never become entirely clear to me how ECMAScript does anonymous functions, but what you suggested works for me

[08:12:09.0000] <annevk>
Domenic: thanks, still not entirely pleased with the IDL mismatch, but it's a lot better than a security hole

[08:16:11.0000] <annevk>
Domenic: playsinline fixup LGTM

[08:16:17.0000] <Domenic>
\o/

[08:16:19.0000] <annevk>
Domenic: yay for avoiding the negations

[08:29:13.0000] <hsivonen>
annevk: ok. sorry. I won't merge going forward. I thought it was part of having it assigned to me.

[08:29:40.0000] <annevk>
hsivonen: yeah I should have clarified

[08:29:49.0000] <annevk>
hsivonen: all is good now

[08:30:01.0000] <annevk>
hsivonen: I assume you saw all the new tests?

[08:52:29.0000] <hsivonen>
annevk: I didn't see new tests yet.

[09:28:06.0000] <annevk>
hsivonen: see new open issues from Richard

[09:35:42.0000] <annevk>
Domenic: I have some internal emails here suggesting Worklets need a ton of work

[09:35:59.0000] <annevk>
Domenic: planning on shifting through tomorrow

[09:36:15.0000] <Domenic>
annevk: sounds interesting... not sure it's something i want to tackle, but I guess I can help.

[09:36:16.0000] <annevk>
Domenic: was wondering if you had taken a peek yet

[09:36:25.0000] <Domenic>
annevk: not really looked, no

[09:36:59.0000] <annevk>
Domenic: okay, if I end up filing a bunch of things tomorrow I'll let you know

[10:10:02.0000] <annevk>
Navigation üò≠

[12:39:12.0000] <mathiasbynens>
Domenic: old discussion about those, ehm, ‚Äúbest practices‚Äù: https://github.com/mathiasbynens/mothereff.in/issues/29

[12:40:30.0000] <Domenic>
mathiasbynens: I can't find the rationale there? Some people in that thread thinks it looks bad? The spec explicitly has examples that end in non-alphanumerics

[12:46:31.0000] <mathiasbynens>
seems like it was about aesthetics

[12:46:43.0000] <mathiasbynens>
= subjective, ofc

[12:48:21.0000] <mathiasbynens>
it‚Äôs not a bad idea to be strict and warn on things that might cause confusion in tools like these, imho

[12:48:25.0000] <mathiasbynens>
people who want to use non-alpha can and will do so

[12:49:55.0000] <caitp>
if you can't have custom elements named <\u1f922>, what is the point

[13:14:45.0000] <mathiasbynens>
caitp: <foo-ÔøΩ> (U+FFFD) is valid though, which results in U+1F922 anyway

[13:19:31.0000] <caitp>
yeah, but but you can't have <ÔøΩ-foo>

[13:19:45.0000] <caitp>
which is just terrible!

[13:19:58.0000] <caitp>
emojis are people too

[13:22:54.0000] <TabAtkins>
#NotAllEmojis

[13:47:38.0000] <zcorpan>
https://twitter.com/jcdsvg/status/745337593210904577 is interesting. we (browsers) should be communicating better that removing the doctype is bad. or something, i dunno

[13:50:04.0000] <gsnedders>
zcorpan: *is* it all bad if browsers interoperate?

[13:50:54.0000] <zcorpan>
they don't

[13:51:14.0000] <gsnedders>
they don't currently, but if browsers converge, does quirks mode continue to be bad?

[13:51:21.0000] <gsnedders>
because we are seeing convergence, slowly

[13:52:26.0000] <zcorpan>
some of the quirks are pretty confusing

[13:52:45.0000] <zcorpan>
like https://quirks.spec.whatwg.org/#the-tables-inherit-color-from-body-quirk

[13:53:19.0000] <gsnedders>
is it still inheritence when it goes from child to parent? ;P

[13:53:53.0000] <zcorpan>
it's not child to parent?

[13:55:09.0000] <zcorpan>
i guess it could be a sibling or a descendant of a sibling to body though

[13:55:29.0000] <gsnedders>
zcorpan: oh, wait

[13:55:37.0000] <gsnedders>
zcorpan: I thought that meant tbody

[14:00:10.0000] <zcorpan>
also the syntax quirks only working for some properties and not others is confusing. color: 5a5a5a working but color: 5e5e5e not working is confusing. them working in @supports but not CSS.supports() is confusing. IDs and class names being case-insensitive can introduce bugs.

[14:00:14.0000] <zcorpan>
etc

[14:03:09.0000] <gsnedders>
(I'm just playing devil's advocate here, given interop does get rid a lot of the tradition arguments)

[14:03:57.0000] <zcorpan>
sure

[14:04:17.0000] <zcorpan>
a bit like the value of validation when html parsers interoperate

[14:05:25.0000] <MikeSmith>
zcorpan: https://github.com/validator/validator/issues/310

[14:06:10.0000] <MikeSmith>
zcorpan: there are many sites using <!--> with IE conditional comments

[14:06:42.0000] <MikeSmith>
due to guidance like https://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment

[14:07:28.0000] <MikeSmith>
and in https://www.sitepoint.com/web-foundations/internet-explorer-conditional-comments/

[14:07:35.0000] <zcorpan>
MikeSmith: thx. need to think a bit how to fix that

[14:08:13.0000] <MikeSmith>
yeah, in checking things like Alexa top 100 sites, many or most of them are using that

[14:08:50.0000] <gsnedders>
MikeSmith: pretty sure everything I work on still uses conditional comments, FWIW

[14:09:11.0000] <MikeSmith>
well not all IE conditional comments use that

[14:09:13.0000] <gsnedders>
plenty of things still care about older versions of IE, for which they're the sanest way to target them

[14:09:33.0000] <MikeSmith>
I am not sure why some sites use that while others do not

[14:10:51.0000] <MikeSmith>
I would think we might be able to allow <!--> at end of a comment while still disallowing things like <!-- foo <!-- bar -->

[14:11:39.0000] <MikeSmith>
(that is, where the nested <!-- is clearly in the midst of some comment and not at the end)

[14:20:35.0000] <zcorpan>
in related news, 36,813 pages of 496,558 pages in httparchive are in quirks mode

[14:21:19.0000] <zcorpan>
7.4%

[14:22:29.0000] <zcorpan>
MikeSmith: also allow <!-- <!---> ?

[14:23:14.0000] <MikeSmith>
zcorpan: probably could just as easily allow that too

[14:23:25.0000] <MikeSmith>
though I am not sure anybody actually does that

[14:23:57.0000] <MikeSmith>
the docs all specifically say just <!--> at the end

[14:24:13.0000] <zcorpan>
yeah

[14:26:50.0000] <zcorpan>
the syntax currently disallows comment data ending with <! or <!-, so if we allow <!-- <!--> but not the other we'd still need to disallow comment data ending with <!-.

[14:28:30.0000] <zcorpan>
maybe only change <!--> and not any more dashes

[14:43:39.0000] <zcorpan>
filed an issue

[14:58:18.0000] <zcorpan>
63,518 resources in httparchive have conditional comments with <!-->

[15:01:41.0000] <zcorpan>
1 has conditional comment with <!--->. 28 have <!---> *somewhere*


2016-06-22
[20:21:23.0000] <howdoi>
oninput event must work for contenteditable=true right?

[01:56:51.0000] <tobie>
heycam: any idea what this HTML comment is doing here? https://github.com/heycam/webidl/blob/1d575a6/index.xml#L461

[01:57:46.0000] <heycam>
tobie: that was from me half-arsing the raises()/setraises()/getraises() annotation removal

[01:57:49.0000] <heycam>
it can be removed

[01:57:54.0000] <heycam>
same with any of the <!--JAVA ... --> sections

[01:58:04.0000] <tobie>
yes, kicked those out already

[01:58:07.0000] <heycam>
cool :)

[01:58:09.0000] <heycam>
/me must go to dinner now

[01:58:22.0000] <tobie>
bon appetit

[06:33:20.0000] <Ms2ger>
My nexus 5x has that

[06:34:17.0000] <Ms2ger>
Did the MS people end up publishing a table layout spec?

[06:35:43.0000] <nox>
There is no headphone jack on iPhone 6?

[06:36:52.0000] <annevk>
nox: there's a rumor about the next iPhone

[06:37:30.0000] <nox>
I don't understand the parallel with floppy drives. I wouldn't use floppies when the drives got removed. I've never had a headset that wouldn't use a jack.

[06:38:06.0000] <Ms2ger>
Moz shipped me a usb headset

[06:40:48.0000] <nox>
Ms2ger: I ordered a Bose headset.

[06:40:53.0000] <nox>
No USB thingie on it.

[07:16:04.0000] <zcorpan>
MikeSmith: nice. confirmed those two cases. is there a diff for this latest change?

[07:19:34.0000] <MikeSmith>
zcorpan: there is not, because I squashed the commits and force-pushed to the fork of the parser repo

[07:20:46.0000] <zcorpan>
ah ok

[07:21:45.0000] <zcorpan>
MikeSmith: now i'm curious what the flub was :-)

[07:30:03.0000] <MikeSmith>
zcorpan: <!--<!---> or <!--<!----> or <!--<!-----> etc caused the parser to never end the comment and return to the data state :)

[07:31:09.0000] <zcorpan>
nice

[13:46:16.0000] <smaug____>
Domenic: curious, are the currently any APIs which need to refer to relevant realm ?

[13:46:45.0000] <Domenic>
smaug____: yeah, we have an example of navigator.getBattery in https://html.spec.whatwg.org/multipage/webappapis.html#realms-settings-objects-global-objects

[13:47:19.0000] <smaug____>
that is an example

[13:47:33.0000] <Domenic>
smaug____: it is not a hypothetical example

[13:48:43.0000] <Domenic>
smaug____: customElements does a similar thing; window1.customElements.define.call(window2.customElements, ...) will define the element in window2

[13:49:37.0000] <smaug____>
and the spec actually uses relevant realm? I was just surprised to see 4th global type :)

[13:49:53.0000] <smaug____>
thanks for adding the example to the spec

[13:49:54.0000] <smaug____>
https://html.spec.whatwg.org/multipage/webappapis.html#realms-settings-objects-global-objects:the-iframe-element

[13:50:16.0000] <smaug____>
"type", 4th way to refer to a global

[13:50:38.0000] <Domenic>
yeah, it's been kind of implicit; "relevant" was the most-often-used term I believe, so we settled on that

[13:51:36.0000] <Domenic>
And yeah I figured after I spent all the time sucking this information from bz's mind I was going to make sure it was at least somewhat more accessible for the next person

[13:57:06.0000] <tobie>
TabAtkins: Some of the WebIDL grammar gets mixed up for macros by Bikeshed (e.g. -?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)). Is there an undocumented way to escape these in groups (e.g. insert them in a <pre> element or something) or am I out of luck and will need to escape all of them separately (e.g.: -?(\[1-9]\[0-9]*|0[Xx][0-9A-Fa-f]+|0\[0-7]*))?

[14:00:04.0000] <Domenic>
tobie: <pre> can be used

[14:00:12.0000] <Domenic>
tobie: you can also use a custom element and put it in the "opaque elements" list

[14:00:27.0000] <Domenic>
tobie: https://github.com/whatwg/streams/blob/master/index.bs#L26

[14:00:44.0000] <TabAtkins>
tobie: Unfortunately macro replacement happens at the text level (pre-parsing) because you can use macros in attribute values, or insert markup with them. So I don't have any implicit escaping.  That said, I already skip over macro-looking things that only contain digits, and I can skip ones that also contain a dash.

[14:00:57.0000] <TabAtkins>
Domenic: Unfortunately macros are in the set of things that this doesn't work for.

[14:01:27.0000] <Domenic>
oh hmm i guess i am unfamiliar with macros

[14:02:14.0000] <TabAtkins>
There are a few markup shorthands that have this problem too, if they'd interfere with HTML parsing, like the <<grammar-term>> one.

[14:02:28.0000] <TabAtkins>
(I should probably have switched macros to a much harder-to-collide syntax early on. Maybe I can still do this?)

[14:02:50.0000] <TabAtkins>
They're almost never used in the body of things, just in boilerplate.

[14:05:55.0000] <TabAtkins>
And I just pushed that, so the ones that are just [0-9] no longer need escaping.

[14:06:00.0000] <TabAtkins>
The ones for hex digits still do, tho.

[14:06:53.0000] <tobie>
TabAtkins: sorry, one of my daughters woke up. She's back to sleep now.

[14:08:08.0000] <tobie>
So yeah, they wouldn't really be macros if they happened on a constructed tree, right?

[14:08:23.0000] <tobie>
Thanks for fixing the [0-9] case.

[14:08:35.0000] <tobie>
I'll do the other ones by hand.

[14:09:16.0000] <TabAtkins>
tobie: Exactly. (Unfortunately.)

[14:10:27.0000] <tobie>
I think it would make sense to make the macro syntax a bit more out of the ordinary.

[14:10:52.0000] <TabAtkins>
I've idly contemplated writing an HTML parser just so I could hook these things into it and do *no* non-Markdown manipulations on the raw text.

[14:10:53.0000] <tobie>
But I can't really estimate the risk of breaking things.

[14:10:58.0000] <TabAtkins>
But that's quite a bit of work. :/

[14:11:16.0000] <TabAtkins>
(Writing my own HTML serializer was worth it, at least.)

[14:11:48.0000] <tobie>
You lost me at "*no* non-Markdown."

[14:12:42.0000] <TabAtkins>
Markdown-related things still have to happen at the textual level, I think.  But everything else could move to post-parsing if not for it confusing the HTML parser.

[14:12:45.0000] <tobie>
OK. Read it three times and I think now I sort of get it.

[14:14:03.0000] <tobie>
I'm not familiar enough with the architecture of Bikeshed to comment on this, tbh.

[14:14:22.0000] <TabAtkins>
Yeah that's fine, I'm just thinking aloud. ^_^

[14:16:34.0000] <tobie>
Merged your changes and I no longer have macro issues at all.

[14:16:43.0000] <tobie>
:)

[14:19:04.0000] <TabAtkins>
Oh yeah! It requires the text to be all-uppercase, so all those hex character-classes aren't hitting it. ^_^

[14:19:35.0000] <tobie>
yup. :)

[14:20:05.0000] <tobie>
https://www.irccloud.com/pastebin/zuhGICmX/

[14:20:29.0000] <TabAtkins>
Hmmmm

[14:20:42.0000] <TabAtkins>
How... is that not hit before.

[14:20:52.0000] <tobie>
TabAtkins: now getting the above. The src is super, super messy, still, so that might be the cause.

[14:23:51.0000] <tobie>
TabAtkins: current src file: https://github.com/tobie/webidl/blob/bikeshed/index.bs

[14:24:10.0000] <TabAtkins>
Yeah, I spotted the problem, but it's in the "how the fuck did this ever work" category, so ???

[14:25:15.0000] <tobie>
:D

[14:31:55.0000] <tobie>
non-normative IDL is a rather new feature no?

[14:33:47.0000] <TabAtkins>
Yeah, brand new, but also I *tested* this.

[14:34:11.0000] <TabAtkins>
Or... maybe I didn't. Maybe I only tested the highlighting of normal IDL?

[14:34:19.0000] <TabAtkins>
That seems unlikely.

[14:34:20.0000] <TabAtkins>
I dunno.

[14:36:15.0000] <TabAtkins>
Okay, works now.

[14:45:57.0000] <tobie>
\o/

[15:26:13.0000] <tobie>
TabAtkins: Thoughts as to how best handle ES object internal properties (e.g.: [[DefineOwnProperty]])?

[15:28:00.0000] <TabAtkins>
Slots in an object are recognized as an IDL type, so you can do {{[[foo]]}}.

[15:28:22.0000] <tobie>
awesome. Thanks!

[15:29:26.0000] <TabAtkins>
Of course, your usage is generic, not referring to any actual existing slot, so that's not going to help you. ^_^

[15:31:49.0000] <TabAtkins>
But escaping it with \ works in that case.

[15:32:29.0000] <tobie>
Right.

[15:32:32.0000] <tobie>
ta


2016-06-23
[17:04:40.0000] <TabAtkins>
Domenic: That globals email was super-helpful, thanks! This answers some questions that were recently raised for some Houdini specs.

[19:07:35.0000] <Domenic>
\o/

[21:19:02.0000] <jdp>
hey all. does the url spec (https://url.spec.whatwg.org/) apply to all urls across all schemes? i'm asking cuz i'm unsure if postgres' strategy for specifying unix domain sockets in postgres:// urls is invalid

[21:20:27.0000] <jdp>
postgres percent-encodes the domain socket's path and places it in the host section of the postgres url, but according to https://url.spec.whatwg.org/#host-parsing that would be invalid, because %2F decodes to / and that would cause a syntax violation

[21:23:46.0000] <jdp>
for reference, toward bottom of the section: https://www.postgresql.org/docs/current/static/libpq-connect.html#AEN42532

[21:38:46.0000] <annevk>
jdp: yeah, it is for all URLs

[21:39:21.0000] <jdp>
annevk: cool thanks

[23:32:26.0000] <kochi>
annevk: do you know which timezone smaug's in?

[23:33:12.0000] <annevk>
kochi: UTC+02:00

[23:33:26.0000] <annevk>
kochi: aka Eastern European Time Zone

[23:33:56.0000] <annevk>
kochi: having said that, he doesn't exactly keep office hours is my impression

[23:34:25.0000] <kochi>
I was told that he could be in PST, so...

[23:35:25.0000] <kochi>
unless he's travelling, my assumption was right :)

[01:19:58.0000] <nox>
Specs down?

[01:20:37.0000] <nox>
Can't load https://quirks.spec.whatwg.org here.

[01:21:02.0000] <nox>
Never mind, was just slow.

[01:24:48.0000] <nox>
annevk: Next time someone ask about postgresql socket URLs,

[01:24:59.0000] <nox>
annevk: feel free to refer them to https://github.com/servo/rust-url/issues/26#issuecomment-200900094.

[01:25:51.0000] <zcorpan>
http://www.downforeveryoneorjustme.com/html.spec.whatwg.org :-(

[01:26:50.0000] <zcorpan>
Hixie_: ^

[01:27:39.0000] <nox>
"In quirks mode and limited-quirks mode, for a block container element whose content is composed of inline-level elements, the element‚Äôs line-height must be ignored for the purpose of calculating the minimal height of line boxes within the element."

[01:27:57.0000] <nox>
So the line-height isn't ignored if the block container contains something that isn't inline, right?

[01:45:55.0000] <zcorpan>
nox: ...right. or this quirk is only intended to override CSS's requirements for that particular case. it could be that CSS already specifies that line-height is ignored for some other situation

[01:46:36.0000] <zcorpan>
nox: which case are you interested in?

[01:47:05.0000] <nox>
zcorpan: The line-height for a table cell.

[01:47:15.0000] <nox>
zcorpan: Trying to fix the HN top bar in Servo.

[01:51:46.0000] <zcorpan>
nox: hmmm, i think a table cell is also a block container. https://drafts.csswg.org/css2/visuren.html#block-container-element

[01:52:03.0000] <nox>
Yes it is, my question was about the kind of content. :)

[01:55:20.0000] <zcorpan>
ok, yeah, only block containers that establish an inline formatting context (i.e. only contain inlines). but if a block container has mixed inline and block you get an anonymous block to wrap the inlines, and i suppose the quirk should apply to the anonymous block?

[01:58:42.0000] <zcorpan>
nox: is the problem with the image? https://quirks.spec.whatwg.org/#the-line-height-calculation-quirk is also closely related

[02:01:19.0000] <nox>
zcorpan: Yes it's the logo.

[02:01:42.0000] <nox>
zcorpan: https://github.com/servo/servo/issues/11821

[02:02:44.0000] <zcorpan>
ok i think you need to implement those two quirks to get that working correctly. it seems chromium passes all the tests for the two quirks

[02:31:30.0000] <zcorpan>
hmmm doesn't httparchive include page rank anymore?

[02:55:43.0000] <zcorpan>
nox: https://gist.githubusercontent.com/zcorpan/1c2fd8b55133c0e6f4892243c87b2d0a/raw/dcb7707d46379337eb719f39ac506db50530c72b/quirks_doctypes_2016_06_01.md all quirks mode urls in httparchive (sorted by their doctype)

[02:57:15.0000] <zcorpan>
https://gist.github.com/zcorpan/1c2fd8b55133c0e6f4892243c87b2d0a for the html version but it seems to be cut off for me, i guess github thought it was too long

[03:18:08.0000] <mathiasbynens>
/me was just about to mention that

[04:59:06.0000] <Ms2ger>
TabAtkins, still not sure you fixed https://github.com/w3c/csswg-drafts/issues/85

[05:02:56.0000] <Ms2ger>
Who the hell is Mostafa Shahdadi and why are they messing with random w3c bugs?

[05:15:48.0000] <MikeSmith>
Ms2ger: just a spammer?

[05:16:25.0000] <MikeSmith>
I'm not at my pc now to check

[05:21:43.0000] <MikeSmith>
disabled the account

[05:33:44.0000] <annevk>
JakeA: data:text/html,<object data="http://example.com/gofish">I am fallback</object> and https://bugzilla.mozilla.org/show_bug.cgi?id=1003797#c20 might be of interest

[05:33:55.0000] <annevk>
JakeA: with two requests you can figure out 2xx

[05:34:35.0000] <annevk>
JakeA: given that, we could consider opening up response.ok, though I'm a little wary still

[05:36:43.0000] <JakeA>
annevk: struggling to figure out why it needs two requests. Why isn't <object> fallback enough?

[05:37:03.0000] <annevk>
JakeA: how do you tell network error from 404?

[05:37:43.0000] <annevk>
JakeA: maybe nobody cares about that distinction

[05:38:29.0000] <JakeA>
annevk: ahh, yeah. response.ok would expose the difference

[05:38:44.0000] <annevk>
JakeA: "My statement above is wrong, determining 2xx requires one request, telling non-2xx and network errors apart requires two." is a comment I'll add there

[05:39:12.0000] <annevk>
JakeA: indeed

[05:44:09.0000] <annevk>
<embed src=http://test:test/ onerror=w(1) onload=w(2)></embed> gives 2 in Chrome, nothing in Firefox

[05:44:53.0000] <JakeA>
annevk: btw, been thinking about the path to range requests & service worker. Was thinking of adding an algorithm to fetch that asserts if a given partial response is ok to use. Something in the form assertPartialResponse(response, typeAllowed) (but as an algorithm rather than API), where typeAllowed is "any", "visible" (not opaque) or a url the response

[05:44:53.0000] <JakeA>
must come from. It throws if not allowed, otherwise returns the next value for typeAllowed

[05:45:30.0000] <JakeA>
annevk: so assertPartialResponse(corsResponse, "any") returns "cors"

[05:45:53.0000] <JakeA>
assertPartialResponse(opaqueResponse, "any") returns the response url

[05:46:09.0000] <annevk>
the return value seems strange?

[05:46:35.0000] <annevk>
I'm not entirely sure what this does based on this description

[05:47:26.0000] <JakeA>
annevk: the problem is the calling API needs to be responsible for maintaining some state, since only it knows what the response is being used for

[05:48:36.0000] <JakeA>
Eg for a video, returning ranges from multiple cors urls is cool. Using a single no-cors url is cool. Using multiple no-cors urls is not cool. Mixing cors & no-cors is not cool.

[05:48:57.0000] <JakeA>
But if the video changes src, or resets somehow, we're back to the start in terms of how responses are processed

[05:49:27.0000] <annevk>
Does <video> today do "no-cors" and multiple range requests?

[05:49:34.0000] <JakeA>
yes

[05:50:03.0000] <annevk>
Right, that's what I thought too, not sure anyone thought through the implications of just doing that, but...

[05:50:41.0000] <annevk>
But also, what <video> can request is restricted. It can only ever be "no-cors" or "cors" I think

[05:51:30.0000] <annevk>
But you're probably getting at something else and I'm not there yet

[05:53:04.0000] <JakeA>
If a <video> is making no-cors requests, we need to make sure the response is either all cors responses, or no-cors responses from the same url

[05:54:51.0000] <JakeA>
It probably doesn't matter tons for <video>, but I want to avoid being able to return a single response that wraps opaque data in "exposeThis(` and "`)" and executes it as JS

[05:58:15.0000] <JakeA>
I think I need to write something up in more detail. The intent is to give APIs a way to ensure that partial responses for something that's going to be treated as a single unit don't allow parts to be opaque unless they're all from the same url

[06:03:52.0000] <annevk>
JakeA: I guess we also need to figure out how to make partial requests

[06:04:16.0000] <JakeA>
annevk: works with the fetch API today by just setting headers

[06:04:17.0000] <annevk>
JakeA: currently that would result in CORS preflight if you enabled CORS

[06:04:24.0000] <JakeA>
annevk: ah, yeah, that

[06:04:37.0000] <zcorpan>
LINK ERROR: No 'idl' refs found for 'supports()' with for='CSS'.

[06:04:37.0000] <zcorpan>
LINK ERROR: No 'method' refs found for 'supports(property, value)'.

[06:04:42.0000] <zcorpan>
TabAtkins: ^

[06:05:13.0000] <JakeA>
annevk: and in both Chrome and Firefox we silently drop the range header if it's no-cors, which is a bug

[06:06:08.0000] <annevk>
I'm surprised this kind of thing is never escalated but stays under the wraps for so long

[06:08:16.0000] <JakeA>
annevk: oh wait, I missed a lot of important details there. We drop the header in the case of event.respondWith(fetch(event.request)) in a service worker

[06:08:49.0000] <JakeA>
I think it's because at some point the request gets recreated and the non-safe headers get dropped

[06:25:05.0000] <annevk>
fetch() does that

[06:25:41.0000] <annevk>
No good ideas here

[06:30:06.0000] <JakeA>
annevk: when this came up with client hint headers we discussed the idea of a header entry being "blessed" somehow. So if it's "ua added" it isn't filtered

[06:33:22.0000] <annevk>
JakeA: yeah, but UA getting a same origin bypass is‚Ä¶ Ship sailed I guess, but still

[06:34:15.0000] <annevk>
JakeA: seems complex to get correct too

[06:49:48.0000] <annevk>
JakeA: I think we should more carefully study a concept of "passthrough"

[06:50:36.0000] <annevk>
JakeA: where if the request is not modified, we just pass it on to the network or cache API, without altering the headers that were already okay'd be the API in some way (however wrong we may think that is)

[06:51:05.0000] <JakeA>
annevk: in which cases is it wrong?

[06:51:31.0000] <JakeA>
Marking an immutable header object as passthrough seems fine

[06:51:36.0000] <annevk>
JakeA: it's arguably wrong for UAs to add Range, DNT, etc. as servers might not expect those headers coming from UAs

[06:52:18.0000] <annevk>
JakeA: for developers we require a CORS preflight, for UAs we just do, that's a weird security policy

[06:52:30.0000] <JakeA>
annevk: in this case range predates CORS right?

[06:52:47.0000] <annevk>
I don't think so

[06:52:56.0000] <annevk>
CORS is from 2006, <video> was first proposed in 2007

[06:53:11.0000] <JakeA>
but download resuming?

[06:53:13.0000] <annevk>
DNT is definitely post-CORS

[06:53:34.0000] <JakeA>
(I'm assuming download resuming used range headers)

[06:53:44.0000] <annevk>
JakeA: not sure, perhaps

[07:47:01.0000] <wanderview>
annevk: JakeA: I still don't buy that its fetch() removing the range header because its unsafe... it should hit the init path that just copies the headers without going through append algorithm

[07:47:28.0000] <wanderview>
/me kind of misses being on European time so he doesn't have to read backscrolll first thing...

[07:48:19.0000] <wanderview>
step 8 of new Request says "header list is a copy of request's header list"... so I think that should avoid stripping the range header

[07:49:20.0000] <JakeA>
Yeah, that's right

[07:49:22.0000] <JakeA>
hmm

[07:49:39.0000] <annevk>
Ah yeah, I already do passthrough

[07:50:23.0000] <JakeA>
It's `init` that goes through the filtering

[07:50:45.0000] <ondras>
hmmh, Safari has issues with CORS with HTTP redirects

[07:50:55.0000] <ondras>
is this known/workaroundable?

[07:51:08.0000] <annevk>
wanderview: doesn't step 31 overwrite the headers either way?

[07:51:31.0000] <annevk>
ondras: all browsers do, to some extent

[07:51:39.0000] <wanderview>
annevk: ah, crap... yea

[07:51:48.0000] <annevk>
ondras: the main fix is submitting tests to web-platform-tests

[07:52:31.0000] <ondras>
annevk: well my particular use case -- cross-origin request with one HTTP redirect -- works in other browsers

[07:52:59.0000] <ondras>
Safari *seems* to try (does preflight for the redirected GET)

[07:53:03.0000] <wanderview>
annevk: JakeA: yea... and we do it just like the spec... that will remove the range headers https://dxr.mozilla.org/mozilla-central/source/dom/fetch/Request.cpp#502

[07:53:04.0000] <annevk>
JakeA: wanderview: so yeah, if we want to fix stuff like that we should reconsider proper passthrough requests :/

[07:53:16.0000] <ondras>
but even if I respond properly to this unnecessary preflight, it fails

[07:53:37.0000] <wanderview>
annevk: if we just set the guard after the fill it would be fine I think... but maybe unsafe for other cases

[07:53:50.0000] <annevk>
ondras: what makes it unneeded?

[07:54:10.0000] <ondras>
annevk: it is a GET with no custom headers

[07:54:24.0000] <annevk>
wanderview: I don't think we want to allow modifying the request aspects while keeping the headers

[07:54:25.0000] <ondras>
annevk: I am not aware of other browsers doing a preflight

[07:54:54.0000] <annevk>
wanderview: either nothing changes per whatever policy the API decided things were safe, or we apply the policy we know is safe

[07:55:22.0000] <annevk>
ondras: I see, I recommend filing bugs and maybe writing tests

[07:56:42.0000] <ondras>
annevk: I would love to speak to some Apple engineer first to rule out the possibility of me doing something completely wrong, but I suppose those are hard to come by?

[07:58:56.0000] <annevk>
ondras: a little bit, I think if you've done your homework and tested in other browsers you're generally good for a bug report

[08:00:03.0000] <ondras>
annevk: "To access Apple Bug Reporter, sign in with the Apple ID associated with your developer account." <-- this is the preferred way?

[08:00:21.0000] <annevk>
ondras: use https://bugs.webkit.org/enter_bug.cgi?product=WebKit

[08:00:34.0000] <ondras>
annevk: okay, thanks a lot

[08:01:03.0000] <annevk>
ondras: oh, and if you haven't, test in Safari Technology Preview

[08:01:26.0000] <ondras>
annevk: will try, thanks

[08:49:54.0000] <wanderview>
does anyone implement as= for <link rel=preload> now? https://github.com/whatwg/html/pull/1418#issuecomment-227481256

[09:00:08.0000] <MikeSmith>
wanderview: I thought Chrome does but have not tested

[09:00:26.0000] <MikeSmith>
yoav would know

[09:00:35.0000] <MikeSmith>
or igrigorik_

[09:05:45.0000] <wanderview>
thanks

[09:23:48.0000] <smaug____>
/me wonders what would it take to convince blink folks to remove .chrome

[09:55:41.0000] <annevk>
hayato: is anyone from your team planning on adding the relatedTarget stuff to the event dispatch algorithm?

[09:55:49.0000] <annevk>
hayato: or is the idea that I take that on?

[09:56:28.0000] <annevk>
hayato: I should probably go through the remaining shadow tree issues again I suppose, got a little distracted with navigation

[10:51:45.0000] <TabAtkins>
Ms2ger: What do you think isn't fixed about it? (Preferably, comment in the bug.)

[10:54:33.0000] <Domenic>
I still find it confusing that "static" in CSS selectors means "from JavaScript" and "dynamic" means "from CSS stylesheets". I usually think of JS code as much more dynamic than CSS stylesheets.

[10:55:17.0000] <TabAtkins>
JS code evaluates selectors against what is, at the timescales we're dealing with, a static DOM, while stylesheets are 99% evaluated against a DOM in the process of being built or mutating.

[10:55:44.0000] <annevk>
"static" and "live" might match DOM terminology better

[10:56:12.0000] <TabAtkins>
The words carry the right semantics at least, insofar as "static" is considered cheaper or capable of handling more expensive operations than "dynamic" stuff is.

[12:37:38.0000] <Domenic>
Yeah not saying it's wrong, or even that it's necessarily confusing to most, but it's confusing to me. I see "we should put this in the static profile" and my gut reaction is "great, then I can use it in my static CSS stylesheets!"

[13:03:05.0000] <Mek>
TabAtkins: any idea why with latest bikeshed I lose about 50% of the references in the service worker spec?

[13:03:39.0000] <Mek>
TabAtkins: as in the list of specs in the "Normative References" section and in the "Terms defined by reference" sections are missing about half the specs with latest bikeshed...

[13:07:07.0000] <Mek>
TabAtkins: bisecting blames https://github.com/tabatkins/bikeshed/commit/b77fe40776dedaf83b23b77a952a1599c29ac398, before that commit all the references are there, after it half are missing

[13:08:08.0000] <TabAtkins>
Mek: Point me to your spec?

[13:08:36.0000] <Mek>
TabAtkins: https://github.com/slightlyoff/ServiceWorker/blob/master/spec/service_worker/index.bs

[13:08:55.0000] <Mek>
https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html is what some old bikeshed version generated, with latest bikeshed half the references are missing

[14:42:59.0000] <Mek>
TabAtkins: should I file a bug for the broken references?

[14:43:18.0000] <TabAtkins>
Nah, got it. Got distracted by some other things, but fixing it now.

[14:43:28.0000] <Mek>
okay, thanks


2016-06-24
[21:17:27.0000] <MikeSmith>
so I am planning to spend some time next week doing an experimental implementation of a language-detection feature for the HTML checker

[21:18:34.0000] <MikeSmith>
but I am wondering what methodology to use for getting the best sample of text from a document to check in the normal case

[21:19:13.0000] <MikeSmith>
general case

[21:19:23.0000] <MikeSmith>
it seems clear I want to begin but only looking at some text from some point in the body

[21:19:59.0000] <MikeSmith>
ignoring the head

[21:20:21.0000] <MikeSmith>
and ignoring any text nodes from <script>

[21:21:22.0000] <MikeSmith>
but if I do the naive thing of just looking at the first couple thousand characters of a given document, it many cases that is just going to amount to looking at at Table of Contents or some such

[21:23:03.0000] <MikeSmith>
which will actually probably work fine in practice as far as identifying the language of the document, but then my implementation amounts to being a more specific language-identification-by-only-looking-at-front-matter tool

[21:24:21.0000] <MikeSmith>
so I am wondering if there are better heuristics for detecting when I have hit the actual main text flow of a document

[21:26:22.0000] <MikeSmith>
btw this needs to not introduce a requirement significantly increasing the amount of memory the checker uses, so I can‚Äôt do the really simple thing of just sucking the whole document and running the language detector on the whole doc

[21:28:34.0000] <MikeSmith>
one simple idea is just to not start collecting any characters to check until I hit the first <p>

[21:31:53.0000] <MikeSmith>
another is to not do it until I hit the first h2 or h3 or h4

[03:09:27.0000] <howdoi>
wasup with Array.prototype.values?

[03:09:42.0000] <howdoi>
String.prototype.contains also had issues right?

[03:10:39.0000] <mathiasbynens>
howdoi: yeah, so it was renamed to `includes`

[03:10:54.0000] <howdoi>
mathiasbynens: reason being?

[03:11:04.0000] <howdoi>
not a security thinge right?

[03:11:06.0000] <mathiasbynens>
howdoi: not web-compatible https://esdiscuss.org/topic/having-a-non-enumerable-array-prototype-contains-may-not-be-web-compatible

[03:11:11.0000] <howdoi>
it broke some other code AFAIR

[03:11:48.0000] <howdoi>
MooTools! Thanks I remember reading that mathiasbynens

[03:11:51.0000] <howdoi>
that was fast!

[03:12:00.0000] <howdoi>
and with values, what's the issue?

[03:12:49.0000] <howdoi>
we don't even need .values(), for-in does a good job

[03:13:00.0000] <howdoi>
or even Symbol.iterator

[03:13:08.0000] <mathiasbynens>
howdoi: see https://bugs.chromium.org/p/v8/issues/detail?id=4247#c12 which points to https://bugs.chromium.org/p/chromium/issues/detail?id=615873

[03:16:09.0000] <howdoi>
mathiasbynens: Array.values would have been better?

[03:34:14.0000] <mathiasbynens>
howdoi: who knows

[03:34:57.0000] <howdoi>
:{

[05:29:05.0000] <Greg_>
Hello

[09:02:59.0000] <AutomatedTester>
annevk: is there a list of idl attributes that are not element attributes anywhere?

[09:08:24.0000] <Ms2ger>
"all of them"? :)(

[09:09:29.0000] <Domenic>
AutomatedTester: assuming you mean "IDL attributes that don't reflect element attributes", there's not yet, but you could get reasonably close by excluding those with [CEReactions]

[09:10:20.0000] <Domenic>
That will exclude some that should be included, since [CEReactions] really means "can modify the DOM in certain ways". But everything that is a reflected attribute will have [CEReactions].

[09:11:23.0000] <AutomatedTester>
Domenic: ahh cool

[09:11:53.0000] <AutomatedTester>
Domenic: I can see those in the html spec

[09:11:56.0000] <AutomatedTester>
I will make a list

[09:12:13.0000] <Domenic>
One day we will spec [Reflect]

[09:12:36.0000] <AutomatedTester>
Domenic: wrt to WebComponents, how would Reflect work

[09:12:44.0000] <Domenic>
AutomatedTester: what do you mean exactly

[09:13:03.0000] <Domenic>
[Reflect] would just be a way of expressing in IDL the spec's current "The target IDL attribute must reflect the content attribute of the same name."

[09:13:06.0000] <AutomatedTester>
Domenic: normal reflective attributes do not need to be reflective in web components iirc

[09:13:09.0000] <Domenic>
It's fairly unrelated to web components

[09:13:19.0000] <Domenic>
Web components can create whatever API they want

[09:13:31.0000] <Domenic>
Good ones will, IMO, have APIs that reflect their valid attributes

[09:13:48.0000] <Domenic>
but that'd be done manually

[13:13:55.0000] <TabAtkins>
Mek: Looks like the problem should be fixed? Domenic, you too.

[13:14:00.0000] <TabAtkins>
lmk if there are still refs missing.

[13:39:57.0000] <Mek>
TabAtkins: yeah, looks fixed

[14:22:20.0000] <wanderview>
love the broken emoji in this tweet https://twitter.com/webkit/status/746441587811508227

[14:22:26.0000] <wanderview>
at least on my machine/platform

[14:23:07.0000] <nox>
wanderview: It works on Apple computer, it's a private use code point.

[14:23:11.0000] <nox>
wanderview: It's Apple's logo.

[14:23:21.0000] <wanderview>
yea, thats what I was guessing

[14:23:38.0000] <wanderview>
just drives the point home, I guess


2016-06-25
[22:41:55.0000] <howdoi>
from when fetch's response.boby has become a readableStream?

[22:53:32.0000] <howdoi>
response.body.pipeThrough is undefined

[22:55:00.0000] <annevk>
howdoi: some time ago

[22:55:17.0000] <annevk>
howdoi: pipes are not yet a thing

[22:55:34.0000] <howdoi>
annevk: hmm, pipeThrough will be awesome to have

[22:56:06.0000] <annevk>
Yes

[22:56:11.0000] <howdoi>
we can do x => transform => y

[22:56:22.0000] <howdoi>
jsx => transfrom => html :D

[23:26:21.0000] <howdoi>
annevk: If we fetch an URL that returns a tar, I could used .blob and then extract it?

[23:29:50.0000] <annevk>
howdoi: I guess

[23:35:06.0000] <howdoi>
annevk: request('http://example.com/foo.gz').pipe(zlib.createGunzip()).pipe(out); something like that must be possible with pipeThrough, I guess

[23:37:09.0000] <annevk>
howdoi: something like that

[23:38:06.0000] <howdoi>
hmm

[03:01:48.0000] <annevk>
wanderview: JakeA: https://github.com/whatwg/storage/issues/31 is mostly because of the Cache API at this point, right?

[03:02:26.0000] <annevk>
wanderview: JakeA: do you know what browsers are doing about it? We should probably mention this in the standard somehow

[03:21:17.0000] <JakeA>
annevk: there have been some internal threads about it. Will direct them to this issue


2016-06-26
[09:29:02.0000] <annevk>
JakeA: btw, I finally figured out <embed> / <object>

[09:29:38.0000] <annevk>
JakeA: the way they work is that they have an internal fetch algorithm, which is sometimes used, and then sometimes they pass the response resulting from that to navigate

[09:29:59.0000] <annevk>
JakeA: apparently app cache had some weird model where that required loading it again rather than just using that response

[09:30:04.0000] <annevk>
JakeA: we should not copy that model

[09:30:11.0000] <JakeA>
annevk: we deliberately didnt

[09:30:16.0000] <annevk>
JakeA: right

[09:30:29.0000] <JakeA>
annevk: that's why we excluded embed/object

[09:30:35.0000] <annevk>
JakeA: but we can expose "onnavigate" perhaps at some point and hand that the response/request

[09:30:42.0000] <JakeA>
I think we can bring it back with typemustmatch btw

[09:31:02.0000] <annevk>
JakeA: even without I don't think there's a big problem

[09:31:30.0000] <annevk>
JakeA: as long as we acknowledge that if it uses a nested browsing context, it works like <iframe>

[09:31:55.0000] <JakeA>
annevk: but object isn't always a nested context is it?

[09:32:10.0000] <annevk>
JakeA: correct

[09:32:10.0000] <JakeA>
I thought that was why appcache jumped through hoops

[09:32:35.0000] <JakeA>
annevk: oh so you're saying we should always treat it as a client if SW is there?

[09:32:37.0000] <annevk>
JakeA: as I said, the <object data> algorithm might result in creation of a browsing context and navigation to a response (rather than a request)

[09:32:56.0000] <annevk>
JakeA: no, I'm saying we shouldn't try to work around the way it works

[09:33:37.0000] <annevk>
JakeA: there's already several others ways in which navigate can be invoked with a response rather than a request

[09:33:59.0000] <annevk>
JakeA: so not all navigations go through fetch, which is fine

[09:34:19.0000] <annevk>
JakeA: but AppCache didn't consider that to be fine I guess, which is why it had the hack

[09:34:47.0000] <JakeA>
annevk: interesting. We'll need to ensure a cross-origin object that becomes a navigation can't receive a response from a url other than its request url

[09:35:12.0000] <JakeA>
Maybe even a cached resource could be a security issue

[09:35:52.0000] <annevk>
JakeA: yeah, the main problem is where the response originates I guess

[09:36:57.0000] <annevk>
JakeA: kinda wish we had sorted out navigation before service workers, but I guess we can retrofit it all somehow

[09:45:53.0000] <annevk>
Saying that because I think it might be hard to add this now due to the concern you mention. Though maybe there's a way... Probably best to figure out first exactly how things work


2016-06-27
[22:04:26.0000] <kochi>
Hmm, requestFullscreen()/exitFullscreen() already defined to return promise.  pointerLock should follow, too.

[23:05:06.0000] <Manishearth>
annevk: ping, whenever you're around

[23:28:37.0000] <annevk>
Manishearth: good morning

[23:30:15.0000] <Manishearth>
o/

[23:30:17.0000] <Manishearth>
I'll PM

[01:12:15.0000] <annevk>
JakeA: thanks for switching from durable to persistent

[01:12:21.0000] <annevk>
JakeA: also, exciting news

[01:22:41.0000] <JakeA>
annevk: Yeah! Great to see movement on this. I'm unsure about using heuristics to grant the permission though, but we'll see how that goes I guess

[01:23:10.0000] <JakeA>
It seems like one of the few cases where adding to homescreen / installing is a good permission signal

[01:24:24.0000] <annevk>
JakeA: I don't think we're going down that route initially, but we'll see

[01:25:49.0000] <JakeA>
annevk: are you going for a regular permission request?

[01:25:55.0000] <annevk>
JakeA: I can see how that might work out well, though coupling bookmark with storage might not be what users want

[01:25:59.0000] <annevk>
JakeA: yeah

[01:26:56.0000] <JakeA>
I think if the wording is right, that's the best solution. Although if the user "installs" a site, I think persistent storage is an expectation.

[01:27:05.0000] <JakeA>
But I agree that a bookmark isn't that

[01:28:11.0000] <annevk>
Calling it "installing" and not "bookmarking" makes me worry though

[01:28:33.0000] <annevk>
I wonder if that means folks will give those URLs more permissions

[01:29:11.0000] <annevk>
Just because I put some fruit collecting game on "New Tab" doesn't mean I'm okay with it getting anymore permissions than a random URL I visit

[01:29:26.0000] <annevk>
Or more easily, it's not a trust decision, it's a convenience thing

[01:30:01.0000] <annevk>
Whereas when folks talk about "installing" they seem to think it's a "trust" thing

[01:31:16.0000] <JakeA>
I agree in general, but when it comes to storage usage I'm less sure. Bookmarking, adding to homescreen, pinning‚Ä¶ all these things have the feeling of "keep this around" about them.

[01:31:52.0000] <JakeA>
I think pinning the storage could already be the expectation in some of those cases

[01:32:04.0000] <annevk>
Yeah, I agree that for storage it's fairly reasonable

[01:32:15.0000] <annevk>
Since you've taken an action of persisting that URL

[04:41:25.0000] <annevk>
Kinda want to write a PR-speak to English version of https://www.w3.org/blog/2016/06/perspectives-on-security-research-consensus-and-w3c-process/

[04:50:32.0000] <nox>
annevk: Do it, I'll go buy popcorn.

[05:27:59.0000] <annevk>
nox: https://annevankesteren.nl/2016/06/translation-from-w3c-drm-pr-speak-to-english

[06:03:44.0000] <zcorpan>
hmm bikeshed's self-link on headings are out of view on narrow viewports. mathiasbynens do you have an idea for a non-ugly fix? (e.g. dom or quirks mode specs)

[06:04:33.0000] <jwalden>
annevk: lol

[06:05:24.0000] <mathiasbynens>
zcorpan: perhaps http://nicolasgallagher.com/jump-links-and-viewport-positioning/ helps?

[06:07:00.0000] <mathiasbynens>
zcorpan: or if i misunderstood the problem, can haz example link?

[06:11:35.0000] <zcorpan>
mathiasbynens: it's off to the left, not off to the top. https://quirks.spec.whatwg.org/#goals

[06:12:19.0000] <zcorpan>
shrink the window to <= 767px and look at the heading, in particular the ¬ß

[06:13:15.0000] <annevk>
Manishearth: did you end up filing that CORS redirect issue we discussed a while back?

[06:13:36.0000] <Manishearth>
annevk: the content-type thing?

[06:13:40.0000] <Manishearth>
I thought I did file it?

[06:14:52.0000] <annevk>
Manishearth: pointer?

[06:15:31.0000] <mathiasbynens>
zcorpan: hmm, `.self-link { left: auto; }` looks alright to me

[06:15:53.0000] <mathiasbynens>
(within a media query for narrow viewports)

[06:16:26.0000] <zcorpan>
thx

[06:16:43.0000] <mathiasbynens>
zcorpan: ah wait, except for multiline headings

[06:17:43.0000] <Manishearth>
annevk: https://bugs.chromium.org/p/chromium/issues/detail?id=617902 https://bugzilla.mozilla.org/show_bug.cgi?id=1278493

[06:18:02.0000] <mathiasbynens>
zcorpan: so maybe `.self-link { position: relative; top: auto; left: auto; margin-left: 1em; }`?

[06:18:20.0000] <mathiasbynens>
.5em looks better

[06:18:45.0000] <zcorpan>
left: auto; top: auto seems to be enough

[06:19:17.0000] <mathiasbynens>
zcorpan: oh right, and some `margin-left`

[06:19:42.0000] <mathiasbynens>
https://usercontent.irccloud-cdn.com/file/BVxu9uX4/Screen%20Shot%202016-06-27%20at%2015.18.40.png

[06:41:24.0000] <annevk>
Manishearth: belated thanks, that was useful

[06:59:21.0000] <zcorpan>
MikeSmith: i can try to fix the DOMString thing for .as if you like, or i can try to explain better if you want to fix it yourself

[06:59:40.0000] <nox>
annevk: Nice. RT'd you.

[07:02:23.0000] <MikeSmith>
zcorpan: probably quicker if you just change it on the branch directly yourself, if you have time. And I can just learn for next time from looking at how it ends up after your changes.

[07:03:21.0000] <zcorpan>
ok

[07:05:28.0000] <zcorpan>
MikeSmith: fwiw IDL enums are case-sensitive, but enumerated attribute is ascii-case-insensitive

[07:17:57.0000] <MikeSmith>
zcorpan: per Fetch, destinations are case-sensitive

[07:18:27.0000] <MikeSmith>
https://fetch.spec.whatwg.org/#concept-request-destination

[07:19:24.0000] <zcorpan>
MikeSmith: sure, but the as attribute doesn't have to be

[07:19:43.0000] <zcorpan>
MikeSmith: seems better to me to be consistent with <input type> et al

[07:55:50.0000] <annevk>
zcorpan: hmmm

[07:56:18.0000] <annevk>
zcorpan: that means you limit the namespace

[07:56:31.0000] <annevk>
zcorpan: not sure that's great

[07:56:59.0000] <annevk>
zcorpan: HTML has case-sensitive attributes already

[07:57:14.0000] <annevk>
zcorpan: seems better to continue that trend

[07:57:53.0000] <zcorpan>
annevk: which are enumerated and case-sensitive?

[08:00:40.0000] <zcorpan>
<ol type> i suppose

[08:04:20.0000] <zcorpan>
annevk: do you want to preserve the ability to introduce "Document" as a separate keyword from "document"?

[08:05:14.0000] <annevk>
zcorpan: I mainly don't think we should continue the practice

[08:05:44.0000] <annevk>
zcorpan: it has caused harm before, eg, with <form method>

[08:10:47.0000] <zcorpan>
hmm ok

[08:15:01.0000] <annevk>
zcorpan: we should maybe also see if we can make referrerpolicy case-sensitive, but it might be too late

[08:15:23.0000] <annevk>
zcorpan: having case-sensitivity differ between APIs and markup is just bad

[08:16:55.0000] <zcorpan>
annevk: yes. having case-sensitivity differ between two similar markup features is also bad, but maybe less so?

[08:19:26.0000] <annevk>
zcorpan: I think that's less of an issue, if you stick to case-sensitive you'll be fine

[08:19:51.0000] <annevk>
zcorpan: and case-sensitive is the trend everywhere since case-insensitive only makes sense for ASCII

[14:06:54.0000] <TabAtkins>
zcorpan, mathiasbynens: If y'all figure out what looks good, please PR Bikeshed about it.

[14:07:09.0000] <TabAtkins>
Or at least open an issue and I'll put the style in the right place.

[14:34:48.0000] <mathiasbynens>
TabAtkins: https://github.com/whatwg/resources.whatwg.org/commit/316a3ac1fca5978826c0d2cef7e21e449cba3639

[16:57:50.0000] <KevinMarks_>
any idea why the fetch soec doesn't mention ETag at all? https://fetch.spec.whatwg.org

[16:59:05.0000] <KevinMarks_>
it calls out Last-Modified


2016-06-28
[23:10:09.0000] <howdoi>
is there a stage-4 proposal list?

[23:29:32.0000] <annevk>
KevinMarks_: why should it call out ETag?

[00:10:18.0000] <KevinMarks>
Well, conditional get applies to both etag and last modified

[00:11:17.0000] <annevk>
KevinMarks: the conditional request logic is mostly based on request headers

[00:11:33.0000] <annevk>
KevinMarks: the only reason Last-Modified is mentioned is because that header is safelisted for CORS

[00:12:15.0000] <annevk>
KevinMarks: not entirely sure why ETag isn't, but I'm not sure it matters much

[02:14:08.0000] <zcorpan>
Ms2ger: do you have an opinion on https://github.com/whatwg/html/pull/1449#issuecomment-228803521 ?

[02:15:54.0000] <zcorpan>
since there is machinery already for reflecting enumerated attributes for both impl and testing i don't think making this case-sensitive is necessarily simpler to implement and test

[02:19:52.0000] <annevk>
zcorpan: stepping on the value space seems a bigger problem

[02:20:19.0000] <annevk>
zcorpan: and the long term confusion that causes, e.g., with HTTP methods

[02:22:33.0000] <zcorpan>
annevk: yeah i agree that that is a problem

[03:01:44.0000] <kochi>
zcorpan: quick question: related to the recent change of offsetParent to unclosed node

[03:03:41.0000] <kochi>
zcorpan: if we traverse up the layout tree and find a fixed position element, which is "closed" to the context object, and if it end up that the nearest unclosed one is <body>

[03:04:26.0000] <kochi>
zcorpan: then it should return null, not <body>, right?

[03:07:00.0000] <kochi>
hmm, https://github.com/w3c/csswg-drafts/issues/159 has some follow-up question.

[03:11:00.0000] <kochi>
/me is reading the thread

[03:35:34.0000] <zcorpan>
kochi: possibly the spec is not yet what we want it to be. i also don't understand shadow dom well enough yet to be able to say what does and doesn't make sense :-)

[04:38:20.0000] <kochi>
zcorpan: I'm not a frontend engineer so I'm not sure whether the offsetParent usages of what @platosha put in the thread is popular in the wild or not, but my gut feeling is that the spec still needs some tweaks.

[04:45:25.0000] <zcorpan>
kochi: ok. happy to tweak the spec as necessary

[04:47:16.0000] <kochi>
zcorpan: the problem is that what is the expected answer for web developers :)

[04:47:26.0000] <zcorpan>
yeah

[05:17:14.0000] <Ms2ger>
> we can remove the "gone async" concept

[05:17:20.0000] <Ms2ger>
\o/

[05:17:43.0000] <annevk>
Actually making the patch is the hard part

[05:17:55.0000] <annevk>
Well, maybe thinking it all through is too

[05:18:02.0000] <annevk>
Since I keep hitting new things

[05:19:14.0000] <kochi>
zcorpan: I posted comments on the thread.  In "the nearest ancestor unclosed element", does "ancestor" mean box tree based one? (I'm not familiar with CSS terminology yet)

[05:19:43.0000] <kochi>
if so, an element with fixed position does not have an ancestor, right?

[05:21:03.0000] <zcorpan>
kochi: i think the walk is supposed to be on the DOM tree per spec

[05:23:18.0000] <kochi>
oh, then returning document.body for the case sounds correct, if we follow the spec strictly.

[05:25:42.0000] <zcorpan>
nox: SimonSapin: what about calc(10% - 10px) ? (which quirk?)

[05:26:10.0000] <nox>
zcorpan: Line height calculation quirk.

[05:26:11.0000] <SimonSapin>
zcorpan: https://quirks.spec.whatwg.org/#the-line-height-calculation-quirk "

[05:26:12.0000] <SimonSapin>
The border-right-width, border-left-width, padding-right and padding-left properties have a used value of zero.

[05:26:14.0000] <SimonSapin>
"

[05:26:25.0000] <nox>
This is 0 if containing block is 100px wide.

[05:26:31.0000] <nox>
But should that trigger the quirk?

[05:27:15.0000] <zcorpan>
i suppose so, per the current spec :-) but i'm happy to disable the quirk when calc() is used

[05:27:52.0000] <SimonSapin>
nox: we should (by which I mean do you wanna?) write test cases and see what other impls do

[05:28:25.0000] <nox>
zcorpan: I think we could just say "have a computed value that is definitely zero", if current browsers don't trigger quirk in such a case.

[05:28:38.0000] <nox>
SimonSapin: We should indeed. I may do it when I'm done with my webrender stuff.

[05:28:59.0000] <Ms2ger>
As long as "is definitely zero" is well-defined

[05:29:09.0000] <nox>
Ms2ger: Yes of course.

[05:29:14.0000] <SimonSapin>
s/definitely zero/0px or 0%/

[05:29:20.0000] <zcorpan>
http://w3c-test.org/quirks-mode/percentage-height-calculation.html has tests for this quirk but they do not match the current spec, they match a previous version of the spec. i had to change the spec to make <body> fill the viewport

[05:29:28.0000] <zcorpan>
/me bbiab

[05:30:34.0000] <nox>
SimonSapin: Fair enough.

[06:55:50.0000] <zcorpan>
SimonSapin: the line-height calculation quirk should maybe take writing modes into account

[07:20:31.0000] <SimonSapin>
zcorpan: maybe... if impls do

[07:21:32.0000] <SimonSapin>
If impls need to change I'd rather remove the quirk than make it nicer

[07:49:03.0000] <zcorpan>
SimonSapin: i think these two quirks are ones that can't be removed. note they are also present in limited-quirks which is probably a bigger set of pages than those that are in quirks mode

[07:57:20.0000] <Ms2ger>
SimonSapin, we're talking about this because even Servo hit webcompat issues from not implementing the quirk, right?

[08:36:57.0000] <Domenic>
mathiasbynens: did you ever propose some way to get the length of a JS string in code points?

[09:20:06.0000] <mathiasbynens>
Domenic: no actual proposal, but I may have started an es-discuss thread about it

[09:20:25.0000] <Domenic>
seems more useful than .at() ;P

[09:20:54.0000] <mathiasbynens>
Domenic: agreed

[09:20:56.0000] <mathiasbynens>
Domenic: https://esdiscuss.org/topic/how-to-count-the-number-of-symbols-in-a-string

[09:21:11.0000] <mathiasbynens>
(‚Ä¶and `codePointAt`, hah!)

[09:22:05.0000] <mathiasbynens>
Domenic: really depends on the use case though ‚Äî some systems count code points, others grapheme clusters

[09:22:11.0000] <Domenic>
right yeah

[09:22:35.0000] <Domenic>
I guess I was mostly thinking about this HTML issue https://github.com/whatwg/html/issues/1467

[09:22:36.0000] <mathiasbynens>
the latter is probably more useful in general, but then again the ‚Äúnew‚Äù ES2015 APIs all deal with code points

[09:23:02.0000] <Domenic>
If we changed textarea[maxlength] to validate code point length then having something in the JS API you could compare it to would make sense

[09:23:26.0000] <mathiasbynens>
I see

[09:23:38.0000] <Domenic>
[...string].length lol

[09:23:39.0000] <mathiasbynens>
well, there‚Äôs always [...string].length

[09:23:42.0000] <mathiasbynens>
GMTA

[09:23:44.0000] <Domenic>
probably shorter than anything we come up with

[09:24:18.0000] <Domenic>
https://esdiscuss.org/topic/how-to-count-the-number-of-symbols-in-a-string#content-11 is fairly compelling too

[09:26:28.0000] <mathiasbynens>
yeah

[09:32:38.0000] <zcorpan>
Domenic: thx for reviewing as="". will check again later tonight or tomorrow. :-)

[09:32:47.0000] <Domenic>
:)

[09:56:29.0000] <SimonSapin>
zcorpan: Ms2ger: yeah, the removing bit is just wishful thinking. It's for the writing mode sensitivity we should write test cases

[10:19:44.0000] <annevk>
https://github.com/whatwg/html/commit/b063361829de68dc0907ecc0764e2582c105cf05 has some of the navigate restructuring I'm planning < Manishearth

[10:20:00.0000] <annevk>
Needs a lot of polish still

[10:20:39.0000] <annevk>
And even that is just a rather minor step of a whole lot of changes that are needed üòï

[12:06:44.0000] <wanderview>
Domenic: is step 9.b.i of ReadableByteStreamControllerEnqueue() correct? https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue

[12:06:58.0000] <wanderview>
Domenic: seems like it should be asserting its a default reader and not that the reader is unlocked?

[12:08:08.0000] <Domenic>
wanderview: so it is definitely a default reader; an assert might help. now trying to figure out if the assertion of it being unlocked is false...

[12:08:24.0000] <wanderview>
Domenic: the style in other places has been to assert the default reader there

[12:08:29.0000] <wanderview>
other places in the streams spec

[12:09:06.0000] <Domenic>
wanderview: no, I think it's correct. there are 3 cases: default reader, byob reader, no reader

[12:09:10.0000] <wanderview>
Domenic: like step 6.a of https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor

[12:09:26.0000] <Domenic>
wanderview: step 8 => default reader. 9a => byob reader. 9b => no reader

[12:09:41.0000] <wanderview>
Domenic: oh, I see... ok... thanks!

[12:09:42.0000] <Domenic>
I think there should be some de-indenting and maybe an additional assert

[12:09:47.0000] <Domenic>
I will do a clarifying PR

[12:15:57.0000] <wanderview>
Domenic: what is the purpose of the SameRealmTransfer in ReadableByteStreamControllerEnqueue?  I thought we were trying to avoid copying the buffer

[12:16:08.0000] <Domenic>
wanderview: transfer, not copy!

[12:16:44.0000] <wanderview>
Domenic: where else is this concept used?

[12:16:57.0000] <Domenic>
wanderview: in HTML a bunch

[12:17:01.0000] <Domenic>
wanderview: postMessage

[12:17:13.0000] <wanderview>
hmm

[12:17:34.0000] <wanderview>
Domenic: the whole goal here is to make the original thing that script has a hold of detached?

[12:18:00.0000] <Domenic>
wanderview: exactly, yeah

[12:18:58.0000] <Domenic>
https://blog.domenic.me/reading-from-files/ kind of goes over it, in a more abstract setting

[12:19:22.0000] <wanderview>
ok, thanks

[12:19:32.0000] <wanderview>
/me leaves a big TODO comment there for now.

[12:19:51.0000] <Domenic>
^_^

[12:21:15.0000] <wanderview>
Domenic: the js engine guys pointed me to a serialize/deserialize thing... but I don't think thats what we want here

[12:21:18.0000] <wanderview>
since thats a copy

[12:21:22.0000] <Domenic>
agree

[12:21:43.0000] <Domenic>
this should probably be pretty simple; Mozilla's lth was leading the charge on an ArrayBuffer.transfer method proposal

[12:22:06.0000] <Domenic>
I guess it's in nightlies https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer

[12:22:26.0000] <Domenic>
Ah that wasn't lth though

[12:22:56.0000] <wanderview>
Domenic: this is only needed for ArrayBuffers in streams spec?

[12:23:18.0000] <Domenic>
wanderview: in the streams spec, only ArrayBuffers are transferred, if that's what you're asking

[12:23:24.0000] <wanderview>
yes

[12:49:41.0000] <wanderview>
Domenic: should step 8.b here say "set ready" instead of "let ready"?  since ready was already declared further up

[12:49:43.0000] <wanderview>
https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-pull-into-descriptor-from-queue

[12:49:59.0000] <Domenic>
wanderview: yep

[12:52:42.0000] <wanderview>
Domenic: want me to write an issue or do you have time to just fix it?

[12:52:50.0000] <Domenic>
wanderview: fixed :)

[12:53:26.0000] <wanderview>
thanks


2016-06-29
[21:07:02.0000] <MikeSmith>
botie, inform zcorpan made some changes on the as-attribute branch in response to Domenic‚Äôs review comments, so make sure to pull before you do more work there locally

[21:07:02.0000] <botie>
will do

[21:31:59.0000] <botie>
zcorpan, at 2016-06-29 04:07 UTC, MikeSmith said: made some changes on the as-attribute branch in response to Domenic‚Äôs review comments, so make sure to pull before you do more work there locally

[22:59:42.0000] <MikeSmith>
annevk: there are bunch of different places in the HTML spec that say, ‚ÄúLet request be a new request whose‚Ä¶ destination is "subresource"‚Äù but "subresource" is not (any longer) a valid destination

[23:00:18.0000] <MikeSmith>
annevk: so am I misunderstanding something, or do those places need to be updated/fixed?

[23:05:23.0000] <MikeSmith>
annevk: and if so I‚Äôm happy to write up a PR with the fix, but first I need to understand what it should be changed to‚Ä¶

[23:06:15.0000] <annevk>
MikeSmith: need to be changed to the new values we introduced

[23:06:32.0000] <annevk>
MikeSmith: there is an open issue

[23:06:48.0000] <MikeSmith>
ah ok

[23:06:57.0000] <MikeSmith>
/me looks for the issue

[23:08:29.0000] <annevk>
MikeSmith: should be pretty easy mapping; Fetch also has a table near def of destination

[23:09:27.0000] <MikeSmith>
yeah

[23:10:06.0000] <MikeSmith>
OK I can try writing up a patch

[23:10:43.0000] <MikeSmith>
I don‚Äôt see an open issue other than https://github.com/whatwg/html/issues/1142

[23:16:18.0000] <Manishearth>
annevk: thanks for the link. forwarded to ajeffrey, who is working with navigation in servo

[23:16:41.0000] <Manishearth>
(I'm not really looking at navigation right now; I came across that bug when going through how javascript: works)

[23:16:58.0000] <Manishearth>
> This algorithm has so much drama.

[23:16:59.0000] <Manishearth>
so true

[23:17:26.0000] <Manishearth>
you should replace the algorithm with "just load the effin page"

[23:19:24.0000] <annevk>
MikeSmith: hmm not sure

[23:24:22.0000] <MikeSmith>
annevk: no worries I don‚Äôt think I need it

[23:27:49.0000] <MikeSmith>
annevk: so just for one example, in the algorithm for handling ping=, at https://html.spec.whatwg.org/multipage/semantics.html#hyperlink-auditing, it should set destination just to "", right?

[23:29:10.0000] <annevk>
MikeSmith: per https://fetch.spec.whatwg.org/#concept-request-destination, yes

[23:29:17.0000] <MikeSmith>
yeah

[23:29:29.0000] <MikeSmith>
OK, thanks, will make a PR

[00:03:51.0000] <MikeSmith>
annevk: raised https://github.com/whatwg/html/pull/1470 for the ‚Äúdestination is subresource‚Äù fixes

[08:29:00.0000] <wanderview>
JakeA: in chrome, does a <link rel="prefetch"> or <link rel="preload"> trigger a FetchEvent?

[08:29:27.0000] <JakeA>
Good question. Let's find out! *writes test*

[08:29:32.0000] <JakeA>
They *should*

[08:31:15.0000] <wanderview>
JakeA: should they?  because if the intent is to populate the http cache, then the SW gets in the way... although its a nice way to spin up the SW early before the user clicks a link

[08:32:05.0000] <wanderview>
same thing with preconnect

[08:32:17.0000] <wanderview>
prerender seems like it must go through service worker

[08:33:50.0000] <annevk>
I think they all should

[08:33:54.0000] <wanderview>
JakeA: it still feels to me like the PlzNavigate "preflight" is basically a preload or prefetch

[08:34:03.0000] <wanderview>
in terms of spec concept

[08:34:04.0000] <annevk>
Service worker needs to be in control

[08:34:46.0000] <wanderview>
annevk: the problem is that it basically destroys the benefit of prefetch/preload if you have to start a cold service worker... by the time the user clicks the link you may not have started the network fetch yet

[08:35:05.0000] <annevk>
I don't think that comparison makes sense, re preflight

[08:35:08.0000] <wanderview>
assuming the SW is going to go the network

[08:35:27.0000] <wanderview>
annevk: I'm not talking about CORS preflight... I'm talking about the issue slightlyoff wrote

[08:35:46.0000] <annevk>
Well the document just came from the SW, so‚Ä¶

[08:35:58.0000] <annevk>
wanderview: neither am I?

[08:36:02.0000] <wanderview>
annevk: where the browser initiates a network request based on the user typing in the URL bar... and starts loading the page for the most likely entry

[08:36:11.0000] <wanderview>
to me thats pretty much exactly prefetch or preload, no?

[08:37:02.0000] <annevk>
Not coupled with the proposal of bypassing SW for network activity

[08:37:08.0000] <wanderview>
annevk: I thought preload or preflight could be cross-origin navigation links... like from search results page, etc

[08:37:52.0000] <JakeA>
wanderview: looks like preload isn't just to warm up the HTTP cache http://w3c.github.io/preload/#dfn-preload-resource-has-been-obtained

[08:38:07.0000] <JakeA>
looks like there's intent to have a page-level cache somewhat like <img>

[08:38:26.0000] <JakeA>
In which case a service worker's response here could be useful

[08:38:55.0000] <wanderview>
I wonder if anyone implements it that way

[08:39:47.0000] <JakeA>
It's not properly defined, so I guess not

[08:41:28.0000] <wanderview>
JakeA: I just feel there is something missing from the route proposal that doesn't meet the original use case...  I think they wanted to return something different for the "PlzNavigate preflight" case, but only if there is a service worker, and without blocking the "PlzNavigate preflight" request on starting up the service worker

[08:41:37.0000] <wanderview>
but I guess we have to ask thme

[08:43:07.0000] <JakeA>
wanderview: yeah, I was wondering what the setPreflightHeader bit was for. If it's important, we could add it as an option to FetchSource

[08:44:23.0000] <wanderview>
JakeA: I think my gut feeling is still to wait on the routing solution... lets see what frameworks become popular/dominant to see what use cases people really care about

[08:44:58.0000] <wanderview>
JakeA: but if there was a way to help the preload/prefetch/preflight case do something today that can't be polyfilled, maybe it would be worth doing if it can be kept small and simple

[08:45:13.0000] <JakeA>
wanderview: yeah, it feels early to me too. I'd only want to push forward on it if this SW startup time proves to be mega disastrous

[08:46:18.0000] <wanderview>
JakeA: do you know where most of the SW startup time comes from in chrome?  is it v8 specific?

[08:46:27.0000] <JakeA>
wanderview: I'm worried that we're scenario-solving by doing that. Also worried that we don't have a great picture of the problem

[08:47:22.0000] <JakeA>
wanderview: Not sure. If it's v8 then parsed code caching should solve it, but I get the impression it's something more

[08:47:24.0000] <wanderview>
JakeA: I do agree... but feels there is just a small piece missing... "bypass service worker for pre-* network request"... then the SW can just use existing fetch(url, {cache: only-if-cached}) to get the result of the pre-*

[08:48:16.0000] <wanderview>
that could be a very small API that does a well defined thing... and would be useful for continuing to prefetch http cache resources

[08:48:21.0000] <wanderview>
for sites that want that behavior

[08:48:41.0000] <JakeA>
wanderview: pages are generally not cachable though

[08:49:17.0000] <JakeA>
wanderview: also, I don't like that there's no opt-in/out for this extra network request. What if I'm navigating to a movie I've cached?

[08:50:28.0000] <JakeA>
wanderview: what bothers me is the numbers I've seen come from sites that have added an empty SW just to get a feel for what the startup time is. It's not surprising that SW isn't free, but it seems broken not to compare that to the gains of actually using SW

[08:50:29.0000] <wanderview>
JakeA: the service worker doesn't have to use the result of the preflight... it could decide to use Cache.match

[08:51:03.0000] <wanderview>
JakeA: the numbers that were mentioned to me were 200ms... thats a lot of ground to make up

[08:51:06.0000] <JakeA>
wanderview: right, so now I've got a 3gb video downloading in the background?

[08:51:43.0000] <JakeA>
that I didn't need to download

[08:51:52.0000] <JakeA>
Or is the stream cancelled?

[08:53:30.0000] <wanderview>
JakeA: well, the SW proposal was an opt-in thing... so I assume you would not opt-in if you expect your navigations to be 3GB videos

[08:53:54.0000] <wanderview>
JakeA: for PlzNavigate itself... thats a browser-specific optimization... hopefully they take that issue into account before downloading tons of network

[08:54:41.0000] <wanderview>
as I understand it, anyway

[08:55:14.0000] <wanderview>
JakeA: anyway, I'm happy to just say "not yet" and focus on getting SW startup times down... that benefits everyone... not just huge sites that can afford to micro-optimize this kind of stuff

[08:55:34.0000] <wanderview>
but I also kind of see where they are coming from

[08:55:35.0000] <JakeA>
wanderview: I don't see the opt-in in Alex's proposal :(

[08:56:42.0000] <JakeA>
Also, if it blocks the fetch event on this preflight returning headers, it's breaking the offline-first usecase

[08:56:43.0000] <wanderview>
JakeA: ah... as its was described to me by the partner... they suggested an opt-in... if I call a method in install handler, do the preflight with a particular RequestInit value

[08:57:18.0000] <wanderview>
JakeA: yea... that part I agree is not well defined for what they are trying to do... it sounds like they want to race, but then Alex's proposal said it had the response in the fetch event

[08:58:00.0000] <JakeA>
wanderview: Would be great to get partners involved in that issue. Feels like the use-cases are a bit vague, to me anyway

[08:59:50.0000] <JakeA>
wanderview: If you're going to have the race, surely you'd want to use the network response if it wins? Waiting for the fetch event still at that point seems like it's missing a trick

[09:00:21.0000] <wanderview>
JakeA: in the use case that was described to me they wanted to return a json object and have the SW do extra processing

[09:00:41.0000] <wanderview>
¬Ø\_(„ÉÑ)_/¬Ø

[09:01:02.0000] <JakeA>
wanderview: did that processing affect the response, or was it additional non-response work like caching

[09:01:07.0000] <JakeA>
wanderview: also, giv

[09:01:10.0000] <JakeA>
bah

[09:01:19.0000] <JakeA>
wanderview: also, if this is json, it doesn't sound like a navigation

[09:01:53.0000] <wanderview>
JakeA: sounded to me like client side rendering using a stream... most of the shell is cached and they use the json to construct the html just in time

[09:02:36.0000] <JakeA>
wanderview: wouldn't the SW be awake from the shell fetch in that case?

[09:03:05.0000] <wanderview>
JakeA: I think this is the case where the user hasn't had the site open for a while, but they expect it was previously installed... so SW is likely timed out and cold

[09:03:48.0000] <JakeA>
wanderview: as in page is open, SW has terminated, user clicks something that triggers the JSON download?

[09:04:32.0000] <wanderview>
JakeA:  as in page is closed, user types the name of the site in the url bar, hits enter, triggers JSON download, previously installed service worker renders html

[09:04:46.0000] <wanderview>
JakeA: this is why they wanted a custom header so they know its safe to serve the json instead of html

[09:04:52.0000] <wanderview>
I think

[09:06:09.0000] <JakeA>
wanderview: so without a service worker the site just displays JSON?

[09:06:25.0000] <JakeA>
I feel like my brain has fallen off the rails a bit

[09:06:48.0000] <wanderview>
JakeA: without a service worker the "please preflight with this header" API is never called... the server does not see the special header... the server sends html

[09:07:07.0000] <wanderview>
and the browser displays html

[09:07:17.0000] <wanderview>
JakeA: very complicated!  and for how big a win?

[09:09:08.0000] <JakeA>
Ahh I see, so in the SW case the shell would be loaded, which then makes a request for the page but with Accept: application/json or whatever

[09:09:47.0000] <wanderview>
right

[09:10:01.0000] <wanderview>
but they want to be able to get that fetched without the SW startup cost

[09:11:26.0000] <JakeA>
Even if we give them this preflight + header thing their first render is still blocked on SW startup

[09:11:54.0000] <wanderview>
JakeA: yea, they just want to make it parallel with the fetch event they know they want to attempt in this case

[09:12:18.0000] <JakeA>
And doing this preflight for *all* URLs, even though they only want it for a subset, feels like a dodgy solution

[09:12:51.0000] <wanderview>
JakeA: well, in this case I think they had the impression PlzNavigate would only do it for URLs that show up as likely results in the URL bar

[09:13:13.0000] <JakeA>
wanderview: The routes thing I'm handwaving about would let them get on screen with their shell and fetch their JSON without the SW starting up at all

[09:13:38.0000] <wanderview>
JakeA: well, they still need to process the JSON into html somehow

[09:14:05.0000] <JakeA>
wanderview: are they not doing that from the page anyway?

[09:14:10.0000] <wanderview>
JakeA: I agree the routes thing is a better defined mechanism that probably meets their use case...

[09:14:32.0000] <wanderview>
JakeA: my impression the JSON was going to be rendered into the index.html in the SW... but I could be mistaken

[09:15:03.0000] <wanderview>
JakeA: think of it like delta-encoding... they just want to send a diff down for their index.html

[09:15:30.0000] <JakeA>
wanderview: I guess you could do it as a stream, which would make doing it in the SW a benefit.

[09:15:48.0000] <JakeA>
That puts them in the same use-case as my blog, so racing the network for the full response becomes a better solution

[09:16:09.0000] <wanderview>
yea, I think they want something like that

[09:17:27.0000] <JakeA>
wanderview: that's the final example in https://github.com/slightlyoff/ServiceWorker/issues/920#issuecomment-229390344

[09:18:36.0000] <JakeA>
But yeah, I'm reaching out to teams/partners to try and get more details on this. Feel in the dark about the use cases a bit

[09:18:36.0000] <wanderview>
JakeA: yea... I just go back to the concern about adding a relatively large general purpose framework in the browser when its still pretty early in SW adoption

[09:19:39.0000] <wanderview>
JakeA: I do like the route framework, but I'm hesitant after something as simple as cache.add() was not quite right

[09:19:52.0000] <JakeA>
absolutely agree

[09:20:18.0000] <wanderview>
for added fun, this was just written: https://github.com/slightlyoff/ServiceWorker/issues/921

[09:20:31.0000] <wanderview>
which could play into how all this works

[09:31:16.0000] <wanderview>
annevk: fwiw, this suggests rel=prefetch is intended to speed up the next navigation https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/

[09:31:42.0000] <annevk>
wanderview: sure, but it doesn't skip the SW

[09:33:33.0000] <Domenic>
It makes sense to me that preconnect skips service worker but prefetch does not

[09:34:17.0000] <Domenic>
prefetch hints to perform a fetch, which if performed, goes through service worker. preconnect is below the fetch level

[09:34:22.0000] <JakeA>
Agreed

[09:41:32.0000] <annevk>
preconnect just establishes a network connection (defined in terms of something defined in Fetch)

[09:41:40.0000] <annevk>
so yeah

[09:47:23.0000] <wanderview>
sounds reasonable

[09:47:38.0000] <wanderview>
strangely, I can't find a site that actually uses <link rel="prefetch">

[09:49:18.0000] <JakeA>
Depending on how http://w3c.github.io/preload/#dfn-preload-resource-has-been-obtained works, it might be useless for cross-navigation resources. Unless they end up in the SW/HTTP cache as a result

[10:24:29.0000] <slightlyoff>
JakeA: they're always going to be "blocked" on SW startup, but the network request for fresh data isn't. We're talking about the difference here between being able to serve your site's header and stream content in almost as soon as that's in place, vs waiting for the SW startup before you ever get the request for the content out to the network

[10:24:41.0000] <slightlyoff>
and routing doesn't help here

[10:25:31.0000] <slightlyoff>
it isn't about getting UI from the server; it's about pivoting the request from being all your UI to just being your data (which could be an HTML "partial" or similar)

[10:27:16.0000] <JakeA>
slightlyoff: I've shown in the issue that routing can help here, even in the particular case you're talking about. And doesn't result in a lot of wasted requests.

[10:27:18.0000] <slightlyoff>
I'll respond in the issue, but none of the proposed problems that JakeA outlined are the problems that big sites are facing w/ SW latency

[10:28:01.0000] <JakeA>
slightlyoff: please provide actual details for what sites are trying to do

[10:28:07.0000] <slightlyoff>
Will do

[12:34:44.0000] <smaug____>
/me wishes html spec would in the attribute definitions have some link to the algorithms using that particular attribute

[13:14:33.0000] <wanderview>
Domenic: in ReadableByteStreamControllerPullInto, what is "the typed array constructors table"?  the link seems busted

[13:14:56.0000] <Domenic>
smaug____: the dfn popup should do that for you, shouldn't it?

[13:15:16.0000] <wanderview>
Domenic: ah... the links are just missing ecma262 path

[13:15:25.0000] <Domenic>
wanderview: haha wow that is a busted link. thank you.

[13:15:52.0000] <wanderview>
I thought maybe it was a proposal or something

[13:16:18.0000] <Domenic>
fixed

[13:16:25.0000] <Domenic>
it's much more boring than that

[13:16:42.0000] <wanderview>
thanks!

[13:17:10.0000] <Domenic>
I love that the hash is #table-49 but the table is now table 50

[13:21:07.0000] <wanderview>
Domenic: is there a reason we don't use .BYTES_PER_ELEMENT?

[13:21:15.0000] <Domenic>
wanderview: mutable by authors

[13:21:25.0000] <smaug____>
Domenic: "dfn popup" ?

[13:21:36.0000] <Domenic>
smaug____: click a <dfn>, you get a nice popup showing all its uses?

[13:21:51.0000] <smaug____>
I don't know what is dfn

[13:21:55.0000] <Domenic>
smaug____: bold things

[13:22:02.0000] <Domenic>
that when you hover over them have a hand cursor

[13:22:11.0000] <wanderview>
Domenic: TypedArray.prototype.BYTES_PER_ELEMENT is [[Writable]]:false... doesn't that prevent script from messing with it?

[13:22:28.0000] <smaug____>
Domenic: so, I start from https://html.spec.whatwg.org/#htmlanchorelement, click 'download'

[13:22:43.0000] <Domenic>
wanderview: nah, just assigning. You can still do `Object.defineProperty(Uint8Array.prototype, "BYTES_PER_ELEMENT", { get() { throw new Error("boo"); } })

[13:22:47.0000] <smaug____>
and download just gives link back to htmlanchorelement

[13:23:22.0000] <Domenic>
smaug____: yes. Then click the bolded "download"

[13:23:32.0000] <Domenic>
that you ended up at

[13:24:41.0000] <smaug____>
Domenic: and then what?

[13:25:08.0000] <Domenic>
See the nice popup in this screenshot? https://usercontent.irccloud-cdn.com/file/dUYdvuFC/2016-06-29.png

[13:25:18.0000] <smaug____>
no

[13:25:26.0000] <Domenic>
it's below the "HTML" bookmark

[13:25:31.0000] <Domenic>
right next to the bold word "download"

[13:25:35.0000] <Domenic>
in the upper left

[13:26:00.0000] <smaug____>
Domenic: clicking in the HTMLAnchorElement download leads to https://html.spec.whatwg.org/#dom-a-download

[13:26:23.0000] <Domenic>
I see, you're clicking on the IDL attribute

[13:26:36.0000] <smaug____>
yes, what else would I click?

[13:26:38.0000] <Domenic>
No algorithms use the IDL attribute

[13:26:40.0000] <Domenic>
The content attribute

[13:26:57.0000] <Domenic>
which leads to https://html.spec.whatwg.org/#attr-hyperlink-download

[13:27:01.0000] <smaug____>
and the idl attribute definition doesn't link to the content attribute

[13:27:18.0000] <Domenic>
yes, it's assumed it's clear what "the same name" means

[13:27:18.0000] <TabAtkins>
Yeah, those two are very far apart. I had to click around a bit before I finally found the content attribute.

[13:28:13.0000] <TabAtkins>
Domenic: It's clear, yes. It's not easily jumpable, tho.

[13:28:39.0000] <TabAtkins>
If you wind up looking at the IDL rather than the elementdef table, there's no obvious way to reach the content attribute.

[14:16:38.0000] <wanderview>
Domenic: is it intentional that ReadableByteStreamControllerRespond shadow the bytesWritten argument?

[14:16:59.0000] <wanderview>
using "let" instead of "set"

[14:17:06.0000] <wanderview>
/me nit picks

[14:21:01.0000] <Domenic>
Hmm, not really

[14:21:08.0000] <Domenic>
Unsure whether we should pick a non-colliding name or just use Set

[14:21:11.0000] <Domenic>
probably "ste"

[14:30:21.0000] <TabAtkins>
Ah, non-colliding operating name. Bold move.

[14:30:25.0000] <TabAtkins>
*operation


2016-06-30
[17:21:36.0000] <tantek>
anyone here have any idea why annevk is notable? His notability is being questioned https://en.wikipedia.org/wiki/Anne_van_Kesteren by a user named "Ham Pastrami" (no joke)

[17:22:35.0000] <TabAtkins>
Where's the notability question?

[17:22:57.0000] <TabAtkins>
Oh, duh, the warning right at the top of the page.

[17:22:58.0000] <tantek>
that banner you missed at the top

[17:43:21.0000] <TabAtkins>
Okay, removed the banner with some justification in edit summary; anne seems to reasonably qualify as notable per the Notability page.

[00:02:43.0000] <nishu>
does websocket work on port 80 only? or is it for the http handshake and then there is another port used?

[00:04:55.0000] <ondras>
it works on any port

[00:05:06.0000] <ondras>
and does not switch ports during the handshake

[00:48:38.0000] <hsivonen>
annevk: what's the history of the ISO-2022-JP-3 Kana set being part of Web ISO-2022-JP while ISO-2022-JP-1, ISO-2022-JP-2 and the rest of ISO-2022-JP-3 aren't?

[00:50:30.0000] <annevk>
hsivonen: too long ago

[00:50:53.0000] <annevk>
hsivonen: I think we dropped parts of ISO-2022 based on other browsers not supporting things, but I'm not entirely sure

[00:51:31.0000] <annevk>
hsivonen: I guess I could grep the log

[00:52:29.0000] <annevk>
hsivonen: https://github.com/whatwg/encoding/commit/19b0ebf0e48c3a607ab7623b5b272642dd59d6e7

[00:53:42.0000] <annevk>
hsivonen: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26885 discusses an earlier change where we removed parts of it because we only needed those parts for Thunderbird

[00:59:28.0000] <hsivonen>
annevk: I mean: ESC ( I wasn't part of the RFC and came as part of the *third* round of extensions, so how come browser adopted that one?

[00:59:51.0000] <hsivonen>
"I" in "ESC ( I" being part of the byte sequence

[00:59:54.0000] <annevk>
hsivonen: maybe Microsoft shipped it from day 1?

[01:00:03.0000] <hsivonen>
annevk: OK

[01:00:10.0000] <annevk>
hsivonen: that sounds like a before-my-time question

[01:00:18.0000] <hsivonen>
annevk: it is

[01:00:26.0000] <hsivonen>
annevk: but you might still know, so I asked

[01:11:12.0000] <hsivonen>
TIL: Erik van der Poel is one of the authors of the ISO-2022-JP RFC

[01:11:40.0000] <hsivonen>
(I'm assuming the same Erik van der Poel as the one who worked on Gecko i18n in the Netscape days)

[01:14:37.0000] <annevk>
And is now at Google, suspect that's accurate

[02:36:16.0000] <zcorpan>
Domenic: in webkit i get this error for const c = document.querySelector("#c").contentWindow; (from multiple globals test in the spec) SyntaxError: Can't create duplicate variable that shadows a global property: 'c'

[02:36:33.0000] <zcorpan>
Domenic: bug in webkit?

[02:57:35.0000] <hsivonen>
/me is surprised that ISO-2022-JP (the original) can't represent Katakana

[02:57:41.0000] <hsivonen>
am I missing something?

[03:00:05.0000] <hsivonen>
looking at what Wikipedia says about Katakana usage, it seems incredible that the encoding for Japanese email couldn't encode the words for "television" or "America"

[03:00:13.0000] <hsivonen>
what am I missing?

[03:00:47.0000] <kochi>
hsivonen: I guess you are confused about half-width katakana and full-width katakana

[03:01:09.0000] <hsivonen>
kochi: ooh! that's it. Thanks.

[03:01:27.0000] <kochi>
hsivonen: what ISO-2022-JP cannot represent is half-width Katakana, full-width Katakana is included in ISO-2022-JP, IIUC.

[03:01:44.0000] <hsivonen>
kochi: yeah, that's the situation

[03:03:43.0000] <kochi>
ISO-2022-JP used to be the canonical encoding for emails (as it uses only 7bits), so half-width Katakana could not be used in such emails.

[03:07:59.0000] <kochi>
s/canonical encoding for emails/canonical encoding for emails for Japanese usersss/

[03:08:08.0000] <kochi>
oops, too many ss

[03:11:51.0000] <hsivonen>
unfortunately, there is still a lack of consensus on the "used to be" part

[03:14:47.0000] <annevk>
Really? I thought everyone was agreed on UTF-8 now?

[03:14:50.0000] <annevk>
What's the holdout?

[03:15:41.0000] <hsivonen>
annevk: Thunderbird! also, Apple Mail users who install the "Letter Fix" hack that restores the capability to send ISO-2022-JP email.

[03:16:02.0000] <kochi>
hsivonen: do you mean "it is still"?

[03:16:40.0000] <hsivonen>
kochi: there are people who argue it is still, yes, despite e.g. Gmail removing the capability to send non-UTF-8 email

[03:17:02.0000] <annevk>
Ugh

[03:17:37.0000] <kochi>
hsivonen: isee, I know there used to be such people, but TIL still they are :)

[03:19:18.0000] <kochi>
If any mailer sends UTF-8 mail without MIME header, that's bad, but if with MIME header, it should be totally fine.

[03:20:48.0000] <kochi>
Is there any network that passes only 7bits or truncates 8-bit char to 7bit? :)

[03:22:57.0000] <hsivonen>
as I understand it, that's not the assumed threat

[03:23:51.0000] <hsivonen>
instead, I gather the assumed problems are 1) email clients on pre-Android/iOS phones and 2) some server-side things that don't look at headers and just assume the body is ISO-2022-JP

[03:23:59.0000] <hsivonen>
I don't know if either actually still exist

[03:27:03.0000] <hsivonen>
anyway, if there's a list of email clients (besides Gmail) that 1) are used in Japan and 2) can't be made to send ISO-2022-JP (not even via a hack like Letter Fix), I'd be interested in the list

[03:27:28.0000] <hsivonen>
(so that I could appeal to the list as evidence that Thunderbird could go UTF-8-only, too)

[03:29:21.0000] <kochi>
I'm not familiar with email clients of these days, sorry I can't help for that.

[03:30:30.0000] <kochi>
it is interesting to know there are still ISO-2022-JP email activists

[03:30:43.0000] <annevk>
hsivonen: does Thunderbird still have a significant userbase?

[03:32:16.0000] <hsivonen>
annevk: yes

[03:36:02.0000] <smaug____>
what does "When a node is inert, then the user agent must act as if the node was absent for the purposes of targeting user interaction events" mean?

[03:36:39.0000] <smaug____>
oh, there is example below

[03:36:42.0000] <smaug____>
hmm hmm

[03:36:43.0000] <kochi>
cannot take focus, take key events etc.??

[03:37:12.0000] <smaug____>
those are clear, but mouse event handling

[03:37:17.0000] <smaug____>
it becomes bizarre

[03:54:37.0000] <smaug____>
inert is nicely very much underdefined

[06:28:15.0000] <zcorpan>
smaug____: isn't mouse events and hit testing in general underdefined?

[06:30:09.0000] <annevk>
that's rhetorical, right?

[06:39:22.0000] <smaug____>
zcorpan: it is. But my comment isn't about that, but whether inert affects to hit testing or just skips some elements in the event path

[08:57:46.0000] <Domenic>
botie: tell zcorpan yes, bug in webkit (https://bugs.webkit.org/show_bug.cgi?id=159270), although I thought I created a version that works there too, hmm...

[08:57:46.0000] <botie>
will do

[08:57:54.0000] <Domenic>
botie, you are inhumanly fast

[08:57:54.0000] <botie>
OK, Domenic.

[09:42:23.0000] <botie>
zcorpan, at 2016-06-30 15:57 UTC, Domenic said: yes, bug in webkit (https://bugs.webkit.org/show_bug.cgi?id=159270), although I thought I created a version that works there too, hmm...

[12:21:52.0000] <smaug____>
TabAtkins: so Worklets in their current form are like Workers with super tiny API (no networking, no communication with the main thread)?

[12:22:15.0000] <smaug____>
or perhaps ian is here?

[12:23:27.0000] <smaug____>
I guess main thread can communicate by sending data:, urls as imported scripts

[12:23:39.0000] <smaug____>
but there is no worklet->main thread communication

[12:24:24.0000] <smaug____>
are there plans to add some simple postMessage like communication channel?

[12:30:59.0000] <annevk>
smaug____: I think the idea is for them to be like pure functions

[12:32:45.0000] <smaug____>
right

[12:33:16.0000] <smaug____>
and I guess Worklet having possible multiple workletglobals make the communication a bit hard

[12:33:56.0000] <smaug____>
but mainthread -> worker communication is there via  data:, trick, which is a bit ugly

[12:34:03.0000] <iank___>
Sorry on phone at the moment... but various specs can add worklet to main communication if they need to.

[12:34:30.0000] <smaug____>
hmm, I'd still assume mainthread -> worklet communication will be needed

[12:34:36.0000] <smaug____>
perhaps not worklet -> mainthread

[12:35:43.0000] <iank___>
Depends on the spec. Paint api all the communication is done through the style engine as the functions should be "pure"

[12:35:59.0000] <iank___>
Adding side channel breaks this.

[12:36:42.0000] <smaug____>
well, there is already script importing as a mainthread->worklet communication channel

[12:37:01.0000] <iank___>
Audio folks have communication from a main thread class instance to a specific worklet class instance. So dont need to worry about the multiple globals problem.

[12:37:12.0000] <iank___>
Yeah that's right.

[12:37:17.0000] <smaug____>
I would be surprised if that data:, won't be used if there is no other communication channel

[12:37:34.0000] <smaug____>
for stuff like passing some settings to worklet

[12:38:52.0000] <iank___>
Right, I'm sure that people will do that but want to discourage that for css related things. :) If that makes sense.

[12:40:39.0000] <smaug____>
iank___: could you explain how registerPaint is supposed to work

[12:40:49.0000] <smaug____>
it is not clear from the spec yet

[12:41:03.0000] <smaug____>
one registers some callback

[12:41:11.0000] <smaug____>
which is just a function

[12:41:25.0000] <smaug____>
but then there is the comment "Note: This is how the class should look. "

[12:43:25.0000] <smaug____>
https://drafts.css-houdini.org/css-paint-api-1/#dom-paintworkletglobalscope-registerpaint seems to use some ecma stuff when it really should just rely on webidl. Like, couldn't registerPaint take PaintClass as the second param?

[12:43:26.0000] <iank___>
Yeah can you give me 15 mins?

[12:43:30.0000] <smaug____>
sure

[12:56:40.0000] <iank___>
back! Yeah I need to fix the spec to convert a bunch of the things to WebIDL types. But basically it registers a class. E.g.

[12:56:41.0000] <iank___>
https://github.com/GoogleChrome/houdini-samples/blob/master/paint-worklet/circle/paintworklet.js#L17

[12:57:33.0000] <iank___>
the engine is responsible for creating an instance of the class, then invoking it to generate images.

[12:58:34.0000] <iank___>
It's possible for the engine to kill the PaintWorkletGlobalScopes if a window/tab is backgrounded for example to reclaim memory, and restarted if foregrounded again.

[13:47:51.0000] <smaug____>
iank___: why engine needs to create instance?

[13:48:57.0000] <smaug____>
I mean, why isn't a callback interface instance passed to registerPaint ?

[13:50:01.0000] <smaug____>
(I don't understand how killing PaintWorkletGlobalScopes is related to this. paintCtor can be created dynamically, so it might not be available after restarting the worklet)

[13:51:19.0000] <TabAtkins>
annevk or Domenic: Can one of y'all comment on https://github.com/w3c/svgwg/issues/181 and tell them to not add any more camelCase names to SVG?

[13:52:06.0000] <smaug____>
hmm, so the spec uses a callback registration mechanism no other API in the web platform is using

[13:52:33.0000] <Domenic>
smaug____: is this about custom elements? I just fixed that...

[13:52:40.0000] <Domenic>
smaug____: oh you're talking about paint

[13:52:54.0000] <smaug____>
Domenic: this is about PaintWorkletGlobalScope

[13:53:01.0000] <Domenic>
smaug____: I think they were copying custom elements and will fix it soon

[13:53:11.0000] <smaug____>
aha

[13:53:17.0000] <smaug____>
yeah, this looks rather weird currently

[13:53:33.0000] <smaug____>
maybe there is some good reason, but don't know what that is

[13:53:46.0000] <Domenic>
that said, I think if your complaint is registering a class instead of registering a callback, that likely won't change...

[13:56:19.0000] <smaug____>
Domenic: I'm just complaining it being unusual and spec using ecma terminology and not easily understandable webidl

[13:56:36.0000] <smaug____>
Domenic: I'd expect callback to be an instance of a class

[13:56:40.0000] <smaug____>
not a class itself

[13:56:58.0000] <Domenic>
that's not the intent of this API

[13:57:11.0000] <Domenic>
The intent is to allow you to register a constructor which is called later

[13:57:14.0000] <Domenic>
similar to custom elements

[13:57:22.0000] <smaug____>
why?

[13:57:25.0000] <smaug____>
in this case

[13:57:35.0000] <Domenic>
So that it can be created repeatedly

[13:58:04.0000] <smaug____>
what can be created repeatedly?

[13:58:19.0000] <smaug____>
or why you need to create anything repeatedly?

[13:58:49.0000] <Domenic>
Because worklets are created and destroyed often, and each time you need to create a new paint thingy, is my understanding

[13:59:09.0000] <Domenic>
I guess I'll let iank___ take back over if it's just questions of "how is this API intended to be used"

[13:59:40.0000] <smaug____>
but when you create workletglobalscope again, you don't know whether you still have the same classes available

[13:59:51.0000] <TabAtkins>
One of the ways we intend to enforce "this should be a pure function" (without having to go whole-hog and define brand-new concepts of a frozen environment or something) is to kill and restart things somewhat arbitrarily.

[14:00:21.0000] <TabAtkins>
So if you do rely on a long-lived thing thru multiple invocations, you'll have a bad time.

[14:00:52.0000] <smaug____>
yes. And I don't understand how the class approach helps with that

[14:07:38.0000] <TabAtkins>
Oh, I have no comment on that. Please open issues and comment if you have problems with any particular in the approach; we've been dying trying to get other people to review this stuff in depth.

[14:22:07.0000] <iank___>
Right, it's pretty non-obvious why we did it like that for the current API. This is mainly for future stuff we want to be able to do.

[14:23:29.0000] <smaug____>
iank___: what kind of future stuff you have in mind?

[14:23:46.0000] <iank___>
Bascially consider the use-case where the author wants to pre-generate a bunch of images; and you have the ability to create additional PaintRenderingContext2D's for example.

[14:23:53.0000] <iank___>
e.g. (sorry typing).

[14:24:27.0000] <iank___>
registerPaint('foo', class { constructor { this.frameN = new PaintRenderingContext2d(100, 100) /* bunch of pre-initialization */ }

[14:24:49.0000] <iank___>
paint(ctx, geom, styleMap) { if (something) { ctx.drawImage(this.frameN); } }

[14:25:53.0000] <iank___>
we cut a bunch of things from v1 paint api, but you're right the current API could just be registerPaint('foo', callbackFn)

[14:26:24.0000] <iank___>
layout api will have a lot more of these things that you'll want to cache on the class instance.

[14:26:32.0000] <smaug____>
hmm, I didn't understand that example

[14:26:40.0000] <smaug____>
this.frameN is just set once

[14:26:44.0000] <smaug____>
I assume

[14:27:08.0000] <smaug____>
or is registerPaint such that each time paint will be called, a new instance of the class is created?

[14:28:10.0000] <smaug____>
(that would be rather garbage heavy)

[14:28:34.0000] <iank___>
yeah this.frameN is just set once, ("frameN" may have been a bad name, just pretend its a heavyweight image that you want to cache). instance of class is re-used across paint method invocations.

[14:29:33.0000] <smaug____>
right. So all that could be done just by passing an callback interface object, no?

[14:29:57.0000] <smaug____>
why the need to pass ctor

[14:30:56.0000] <smaug____>
(I could totally miss something here. This is just all very unique to the platform (well, custom elements apparently has something similar, but it has some reasons for being unusual ))

[14:32:35.0000] <iank___>
Here is an example with layout: https://gist.github.com/bfgeek/a4ca5e42f7e379c2b4009ca71e6ae296

[14:33:26.0000] <iank___>
layout example shows more clearly why you'd want this cache-on-class behaviour.

[14:35:42.0000] <smaug____>
you cache on the instance of the class

[14:42:48.0000] <iank___>
yup that's right. (sorry 2 ticks)

[14:44:19.0000] <smaug____>
so, why the need for class here.

[14:44:30.0000] <smaug____>
and not an instance of such

[14:52:37.0000] <iank___>
gives explicit control to the engine for what instances actually need to be created.

[14:52:37.0000] <iank___>
for example if the author is doing a large amount of work in the constructor, and that paint-image-function is never used.

[14:52:37.0000] <iank___>
with the class based approach authors can put large amounts of initialization code on the ctor, and it's only called if actually needed.

[14:53:01.0000] <iank___>
 / or when it is needed.

[14:54:25.0000] <smaug____>
well, often that kind of stuff is cached when the heavy operation is first time called

[14:54:31.0000] <smaug____>
so, the first paint() call could do the caching

[14:54:56.0000] <smaug____>
it isn't any different than doing caching in constructor and then using it paint() which is first time called right after paint()

[14:56:18.0000] <smaug____>
the class approach would make sense if we'd expect multiple instances for some reason, but looks like that isn't the case.

[14:56:44.0000] <iank___>
you are right, but i kinda disagree because the engine can potentially schedule constructor in an idle period ahead of the callback.

[14:57:33.0000] <iank___>
right, so again this makes a lot more sense for layout at the moment b/c we stripped so much from paint ^-^

[14:59:19.0000] <iank___>
we were debating if for paint we'd have an instance per set of paint arguments. e.g.

[14:59:19.0000] <iank___>
background-image: paint(chat-bubble, round);

[14:59:19.0000] <iank___>
background-image: paint(chat-bubble, bevel);

[14:59:19.0000] <iank___>
(^ different instances).

[14:59:19.0000] <iank___>
but really not sure yet.

[14:59:21.0000] <smaug____>
ok, the paint spec doesn't hint anyhow that it is ok for UA to run steps in "draw a paint image" asynchronously

[14:59:54.0000] <iank___>
i'll file an issue for that.

[15:00:36.0000] <smaug____>
this class thing just seem to mostly make the spec more complicated than it needs to be

[15:01:22.0000] <smaug____>
and not really giving anything.

[15:01:45.0000] <smaug____>
callback interface would be simpler.

[15:01:53.0000] <smaug____>
but perhaps I'm missing something here

[15:07:08.0000] <iank___>
for paint you are right that it is more complex spec wise but it gives us a few things in my mind; (1) future-proofing for additional methods on the class (2) consistency with other houdini spec's which will rely on the class based things very heavily (3) explicit signalling for when to create cached things.

[15:09:40.0000] <Domenic>
Hmm, according to Chrome's IDL at least, the HTMLDocument/XMLDocument/Document merger looks closer than I thought it would

[15:13:04.0000] <smaug____>
iank___: why other houdini specs will rely on class based setup?

[15:14:09.0000] <iank___>
for layout you'll have an instance per Node in the tree for example.

[15:14:11.0000] <smaug____>
and I don't understand (1) at all :) and there is no explicit signalling when to create cached things. Right now it happens during the same event loop spin as paint(), so caching in constructor would be rather bad. caching should happen earlier

[15:14:30.0000] <smaug____>
iank___: ahaa

[15:14:38.0000] <iank___>
\o/

[15:15:11.0000] <smaug____>
ok, if so, that would be a good reason.

[15:15:28.0000] <smaug____>
it wasn't clear from worklet or paint specs

[15:15:59.0000] <smaug____>
and I don't know where the layout spec lives

[15:16:01.0000] <smaug____>
/me searches

[15:16:13.0000] <iank___>
https://github.com/w3c/css-houdini-drafts/tree/master/css-layout-api

[15:16:21.0000] <iank___>
^ has the best information at the moment.

[15:16:24.0000] <iank___>
but it's patchy.

[15:16:49.0000] <iank___>
I'm going to do a rev of the layout api in the next few weeks

[15:17:29.0000] <iank___>
it's 5x more complex than paint as so many new concepts that we haven't exposed previously.

[15:17:35.0000] <iank___>
but would love feedback on it.

[15:17:48.0000] <iank___>
if you'll be at TPAC we'll be spending a bunch of time on it.

[15:18:38.0000] <smaug____>
I'm trying to stay away from css/layout stuff ;) but worklet is also an API so need to understand why and what we might implement in Gecko

[15:20:52.0000] <smaug____>
but yes, I'm planning to be at TPAC

[15:20:56.0000] <iank___>
cool, yeah we tried to make it as simple as possible and allow engines to experiment with a bunch of things if they like, so if you have any suggestions feel free to reach out.

[15:23:16.0000] <iank___>
in blink we've currently just got a main thread impl of worklets, and at the moment working on an audio thread for the webaudio api.

[15:23:39.0000] <smaug____>
will you reuse worket implementation for worklets

[15:23:46.0000] <smaug____>
or are workers in blink too heavy for this?

[15:24:02.0000] <smaug____>
s/worket/worker/

[15:25:21.0000] <Domenic>
new WebSocket(relativeURL) is supposed to work, right?

[15:25:22.0000] <iank___>
yeah we basically are extracting a bunch of common infrastructure out (global initialization, etc) so they share quite a lot of code.

[15:26:12.0000] <iank___>
the "heavy" part comes from that each script has to have a new global, which we don't have for worklets.

[15:26:46.0000] <iank___>
i think we are at ~100k for an empty v8 global memory wise.

[15:28:04.0000] <smaug____>
ah, I was thinking importing scripts similar to importing scripts inside workers, where the same global is reused of course

[15:28:16.0000] <smaug____>
but yeah, global creation is rather heavy

[15:29:22.0000] <Domenic>
holy shit new WebSocket("relative-url") does not work

[15:29:29.0000] <Domenic>
oh I guess that's predicatable since it has to start with ws://

[16:04:44.0000] <iank___>
smaug____: yeah that's basically how we've implemented it.

[16:05:21.0000] <iank___>
we aren't doing any of the "load like a module yet" but will once the v8 team implements.

